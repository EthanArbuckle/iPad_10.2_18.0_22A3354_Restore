void *llvm::DWARFDebugLine::LineTable::parse@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t, __int128 *)@<X5>, uint64_t a7@<X6>, llvm::raw_ostream *a8@<X7>, uint64_t *a9@<X8>, unsigned __int8 a10)
{
  uint64_t v11;
  void (*v12)(uint64_t, __int128 *);
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  void *result;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  void (*v30)(uint64_t, __int128 *);
  const std::error_category *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t v45;
  llvm::dwarf *v46;
  BOOL v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  char v52;
  char *v53;
  size_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  _BYTE *v58;
  char *v59;
  char v60;
  BOOL v61;
  _WORD *v62;
  unint64_t v63;
  llvm::raw_ostream *v64;
  uint64_t v65;
  void (*v66)(uint64_t, __int128 *);
  const char *CStrRef;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  _WORD *v74;
  __int16 v75;
  _WORD *v76;
  unint64_t v77;
  int SLEB128;
  _WORD *v79;
  __int16 v80;
  _WORD *v81;
  uint64_t ULEB128;
  uint64_t v83;
  unint64_t v84;
  _WORD *v85;
  llvm::raw_ostream *v86;
  char v87;
  char v88;
  _WORD *v89;
  _BYTE *v90;
  void *v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *i;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  char *v109;
  BOOL v110;
  unsigned __int8 v111;
  unint64_t v112;
  signed int v113;
  char *v114;
  unint64_t v115;
  _QWORD *v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  size_t v122;
  char *v123;
  size_t v124;
  void *v125;
  uint64_t v126;
  char v127;
  uint64_t *v128;
  unint64_t v129;
  _WORD *v130;
  _BYTE *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  llvm::raw_ostream *v135;
  int v136;
  _BYTE *v137;
  char *v138;
  char *v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  _WORD *v147;
  _WORD *v148;
  size_t v149;
  size_t v150;
  uint64_t v151;
  uint64_t v152;
  _BYTE *v153;
  llvm::raw_ostream *v154;
  uint64_t v155;
  const std::error_category *v156;
  void **v157;
  uint64_t v158;
  unsigned int v159;
  unsigned int v160;
  uint64_t v161;
  unint64_t v162;
  _BYTE *v163;
  char *v164;
  int v165;
  unint64_t v166;
  void **v167;
  uint64_t v168;
  uint64_t v169;
  unsigned __int16 RelocatedValue;
  _BYTE *v171;
  _BYTE *v172;
  const std::error_category *v173;
  void **v174;
  uint64_t v175;
  _WORD *v176;
  _BYTE *v177;
  const char *v178;
  const std::error_category *v179;
  void **v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  _BYTE *v184;
  _BYTE *v185;
  _BYTE *v186;
  uint64_t v187;
  const char *v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  const std::error_category *v193;
  uint64_t v194;
  void (*v195)(uint64_t, __int128 *);
  BOOL v196;
  unint64_t v197;
  void *v198;
  uint64_t v199;
  _QWORD *v200;
  unint64_t *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  char *v207;
  uint64_t v208[2];
  BOOL v209;
  unsigned __int8 v210;
  __int128 v211;
  _OWORD v212[2];
  uint64_t v213;
  void *v214;
  BOOL (*v215)(uint64_t, uint64_t);
  const char *v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  char v220;
  uint64_t v221;
  int v222;
  void **v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  void *__p;
  const char *v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  __int128 v233;
  uint64_t v234;
  char *(*v235)(char *);
  uint64_t v236;
  uint64_t *v237;
  uint64_t v238;
  void **p_p;
  char v240;
  uint64_t *v241;
  __int16 v242;
  void (*v243)(uint64_t, __int128 *);
  uint64_t v244;
  __int128 v245[5];
  uint64_t v246;

  v11 = a7;
  v12 = a6;
  v15 = (_QWORD *)a1;
  v246 = *MEMORY[0x1E0C80C00];
  v16 = *a3;
  *(_QWORD *)(a1 + 8) = 0;
  v17 = a1 + 8;
  *(_QWORD *)(a1 + 13) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a1 + 144);
  v18 = *a2;
  v19 = a2[1];
  v213 = *((_QWORD *)a2 + 4);
  v212[0] = v18;
  v212[1] = v19;
  result = llvm::DWARFDebugLine::Prologue::parse(a1 + 8, (uint64_t)v212, a3, a6, a7, a4, a5, (uint64_t *)&v214);
  if (a8)
  {
    v232 = -1;
    *(_QWORD *)&v233 = 0x1040000FFFFFFFFLL;
    DWORD2(v233) = 0;
    v234 = (uint64_t)&unk_1E8169658;
    v235 = llvm::WithColor::defaultErrorHandler;
    v237 = &v234;
    v238 = (uint64_t)&unk_1E8169658;
    p_p = (void **)llvm::WithColor::defaultWarningHandler;
    v241 = &v238;
    WORD6(v233) = a10;
    sub_1C624C4A4((uint64_t)v245, (__int128 *)&v232);
    llvm::DWARFDebugLine::Prologue::dump(v17, a8, v245);
    sub_1C624C568(v245);
    result = sub_1C624C568(&v232);
    v21 = (uint64_t)v214;
    if (v214)
    {
      v22 = (_BYTE *)*((_QWORD *)a8 + 4);
      if (*((_BYTE **)a8 + 3) == v22)
      {
        result = llvm::raw_ostream::write(a8, "\n", 1uLL);
      }
      else
      {
        *v22 = 10;
        ++*((_QWORD *)a8 + 4);
      }
      goto LABEL_3;
    }
  }
  else
  {
    v21 = (uint64_t)v214;
    if (v214)
    {
LABEL_3:
      *a9 = v21;
      return result;
    }
  }
  v202 = a3;
  v23 = v15[1];
  v24 = 4;
  if (*((_BYTE *)v15 + 19) == 1)
    v24 = 12;
  v25 = v24 + v23;
  v26 = v24 + v23 + v16;
  v27 = *((_QWORD *)a2 + 1);
  v197 = v16;
  if (v26 < v16 || v27 <= v26 - 1)
  {
    v29 = v11;
    v30 = v12;
    v31 = std::generic_category();
    __p = 0;
    v228 = 0;
    v229 = 0;
    LODWORD(v233) = 0;
    LOBYTE(v236) = 0;
    v237 = 0;
    v232 = (uint64_t)&unk_1E81A7208;
    p_p = &__p;
    LODWORD(v238) = 0;
    v235 = 0;
    *((_QWORD *)&v233 + 1) = 0;
    v234 = 0;
    v215 = (BOOL (*)(uint64_t, uint64_t))&unk_1E8169E08;
    v216 = "line table program with offset 0x%8.8llx has length 0x%8.8llx but only 0x%8.8llx bytes are available";
    v217 = v16;
    v218 = v25;
    v219 = v27 - v16;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v232, (uint64_t)&v215);
    v32 = (char *)p_p;
    v33 = operator new();
    LOWORD(v219) = 260;
    v215 = (BOOL (*)(uint64_t, uint64_t))v32;
    *(_QWORD *)v33 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v215, (_QWORD *)(v33 + 8));
    *(_QWORD *)(v33 + 32) = 22;
    *(_QWORD *)(v33 + 40) = v31;
    *(_BYTE *)(v33 + 48) = 1;
    v232 = (uint64_t)off_1E81A6E70;
    if ((_DWORD)v238 == 1 && *((_QWORD *)&v233 + 1))
      MEMORY[0x1CAA32F9C](*((_QWORD *)&v233 + 1), 0x1000C8077774924);
    v12 = v30;
    if (SHIBYTE(v229) < 0)
      operator delete(__p);
    v232 = v33;
    v11 = v29;
    v12(v29, (__int128 *)&v232);
    v28 = a10;
    if (v232)
      (*(void (**)(uint64_t))(*(_QWORD *)v232 + 8))(v232);
    v26 = v27;
    v27 = *((_QWORD *)a2 + 1);
  }
  else
  {
    v28 = a10;
  }
  if (v27 >= v26)
    v34 = v26;
  else
    v34 = v27;
  v35 = *((_BYTE *)a2 + 16) != 0;
  v36 = *((unsigned __int8 *)a2 + 17);
  v208[0] = *(_QWORD *)a2;
  v208[1] = v34;
  v209 = v35;
  v210 = v36;
  v211 = *(__int128 *)((char *)a2 + 24);
  if (!v36)
    v210 = *((_BYTE *)v15 + 18);
  v241 = (uint64_t *)v16;
  v242 = 257;
  v243 = v12;
  v244 = v11;
  v37 = *((_BYTE *)v15 + 35) != 0;
  v233 = xmmword_1C640F7C0;
  v232 = (uint64_t)v15;
  v234 = 0x1000000000001;
  BYTE4(v235) = 0;
  LODWORD(v235) = 0;
  BYTE5(v235) = BYTE5(v235) & 0xE0 | v37;
  v237 = 0;
  v236 = 0;
  v238 = -1;
  p_p = 0;
  v240 = 1;
  v38 = 4;
  v39 = 12;
  if (*((_BYTE *)v15 + 19) == 1)
    v38 = 8;
  else
    v39 = 4;
  v40 = v15[3] + v39 + v38;
  v41 = v40 + 2;
  v42 = v40 + 4;
  if (*((unsigned __int16 *)v15 + 8) <= 4u)
    v42 = v41;
  v43 = v42 + v16;
  v44 = v202;
  *v202 = v42 + v16;
  if (a8 && v43 < v26)
  {
    v186 = (_BYTE *)*((_QWORD *)a8 + 4);
    if ((unint64_t)v186 >= *((_QWORD *)a8 + 3))
    {
      llvm::raw_ostream::write(a8, 10);
    }
    else
    {
      *((_QWORD *)a8 + 4) = v186 + 1;
      *v186 = 10;
    }
    if (v28)
      v187 = 12;
    else
      v187 = 0;
    llvm::DWARFDebugLine::Row::dumpTableHeader(a8, (llvm::raw_ostream *)v187);
    v43 = *v202;
  }
  if (v43 >= v26)
  {
LABEL_326:
    if (!v240)
    {
      v179 = std::generic_category();
      v224 = 0;
      v225 = 0;
      v226 = 0;
      LODWORD(v216) = 0;
      v220 = 0;
      v221 = 0;
      v215 = (BOOL (*)(uint64_t, uint64_t))&unk_1E81A7208;
      v223 = &v224;
      v222 = 0;
      v218 = 0;
      v219 = 0;
      v217 = 0;
      __p = &unk_1E8133270;
      v228 = "last sequence in debug line table at offset 0x%8.8llx is not terminated";
      v229 = v197;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v215, (uint64_t)&__p);
      v180 = v223;
      v181 = operator new();
      LOWORD(v231) = 260;
      __p = v180;
      *(_QWORD *)v181 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)&__p, (_QWORD *)(v181 + 8));
      *(_QWORD *)(v181 + 32) = 92;
      *(_QWORD *)(v181 + 40) = v179;
      *(_BYTE *)(v181 + 48) = 1;
      v215 = (BOOL (*)(uint64_t, uint64_t))off_1E81A6E70;
      if (v222 == 1 && v217)
        MEMORY[0x1CAA32F9C](v217, 0x1000C8077774924);
      if (SHIBYTE(v226) < 0)
        operator delete(v224);
      v215 = (BOOL (*)(uint64_t, uint64_t))v181;
      v12(v11, (__int128 *)&v215);
      if (v215)
        (*(void (**)(BOOL (*)(uint64_t, uint64_t)))(*(_QWORD *)v215 + 8))(v215);
    }
    v182 = v15[18];
    v183 = v15[19];
    if (v182 != v183)
    {
      v215 = sub_1C624F5C0;
      sub_1C54A0830(v182, v183, (uint64_t (**)(__int128 *, __int128 *))&v215, 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v183 - v182) >> 3)), 1);
    }
    if (a8)
    {
      v184 = (_BYTE *)*((_QWORD *)a8 + 4);
      if (*((_BYTE **)a8 + 3) == v184)
      {
        llvm::raw_ostream::write(a8, "\n", 1uLL);
      }
      else
      {
        *v184 = 10;
        ++*((_QWORD *)a8 + 4);
      }
    }
    *a9 = 0;
    goto LABEL_341;
  }
  v196 = 0;
  v203 = v26;
  v194 = v11;
  v195 = v12;
  while (1)
  {
    v206 = (void *)v43;
    v207 = 0;
    if (v28)
    {
      v215 = (BOOL (*)(uint64_t, uint64_t))&unk_1E8133270;
      v216 = "0x%08.08llx: ";
      v217 = v43;
      llvm::raw_ostream::operator<<(a8, (uint64_t)&v215);
      v43 = *v44;
    }
    v45 = sub_1C5DEAEAC(v208, (unint64_t *)&v206, (uint64_t *)&v207);
    v46 = (llvm::dwarf *)v45;
    v204 = v15[15];
    v205 = v15[16];
    if (v207)
      v47 = 1;
    else
      v47 = v28 == 0;
    if (!v47)
    {
      v215 = (BOOL (*)(uint64_t, uint64_t))&unk_1E8145938;
      v216 = "%02.02hhx ";
      v217 = v45;
      llvm::raw_ostream::operator<<(a8, (uint64_t)&v215);
    }
    if ((_DWORD)v46)
    {
      if (v46 < *((unsigned __int8 *)v15 + 38))
      {
        if (v28)
        {
          v123 = llvm::dwarf::LNStandardString(v46);
          v124 = v122;
          v125 = (void *)*((_QWORD *)a8 + 4);
          if (v122 <= *((_QWORD *)a8 + 3) - (_QWORD)v125)
          {
            if (v122)
            {
              memcpy(v125, v123, v122);
              *((_QWORD *)a8 + 4) += v124;
            }
          }
          else
          {
            llvm::raw_ostream::write(a8, v123, v122);
          }
        }
        switch((int)v46)
        {
          case 1:
            if (v196)
              goto LABEL_135;
            if (a10)
            {
              v172 = (_BYTE *)*((_QWORD *)a8 + 4);
              if (*((_BYTE **)a8 + 3) == v172)
              {
                llvm::raw_ostream::write(a8, "\n", 1uLL);
              }
              else
              {
                *v172 = 10;
                ++*((_QWORD *)a8 + 4);
              }
              llvm::raw_ostream::write(a8, "                                                                                ", 0xCuLL);
            }
            else if (!a8)
            {
              goto LABEL_46;
            }
            llvm::DWARFDebugLine::Row::dump((llvm::DWARFDebugLine::Row *)&v233, a8);
LABEL_46:
            llvm::DWARFDebugLine::ParsingState::appendRowToMatrix((llvm::DWARFDebugLine::ParsingState *)&v232);
            goto LABEL_135;
          case 2:
            ULEB128 = llvm::DataExtractor::getULEB128(v208, (uint64_t *)&v206, &v207);
            if (v207)
              goto LABEL_135;
            v83 = llvm::DWARFDebugLine::ParsingState::advanceAddr((llvm::DWARFDebugLine::ParsingState *)&v232, ULEB128, (llvm::dwarf *)2, v43);
            if (!a10)
              goto LABEL_135;
            v84 = v83;
            v85 = (_WORD *)*((_QWORD *)a8 + 4);
            if (*((_QWORD *)a8 + 3) - (_QWORD)v85 > 1uLL)
            {
              *v85 = 10272;
              *((_QWORD *)a8 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(a8, " (", 2uLL);
            }
            v86 = a8;
            v77 = v84;
            goto LABEL_104;
          case 3:
            SLEB128 = llvm::DataExtractor::getSLEB128(v208, (uint64_t *)&v206, &v207);
            if (v207)
              goto LABEL_135;
            LODWORD(v234) = v234 + SLEB128;
            if (!a10)
              goto LABEL_135;
            v79 = (_WORD *)*((_QWORD *)a8 + 4);
            if (*((_QWORD *)a8 + 3) - (_QWORD)v79 > 1uLL)
            {
              *v79 = 10272;
              *((_QWORD *)a8 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(a8, " (", 2uLL);
            }
            v77 = v234;
            goto LABEL_103;
          case 4:
            v80 = llvm::DataExtractor::getULEB128(v208, (uint64_t *)&v206, &v207);
            if (v207)
              goto LABEL_135;
            HIWORD(v234) = v80;
            if (!a10)
              goto LABEL_135;
            v81 = (_WORD *)*((_QWORD *)a8 + 4);
            if (*((_QWORD *)a8 + 3) - (_QWORD)v81 > 1uLL)
            {
              *v81 = 10272;
              *((_QWORD *)a8 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(a8, " (", 2uLL);
            }
            v77 = HIWORD(v234);
            goto LABEL_103;
          case 5:
            v75 = llvm::DataExtractor::getULEB128(v208, (uint64_t *)&v206, &v207);
            if (v207)
              goto LABEL_135;
            WORD2(v234) = v75;
            if (!a10)
              goto LABEL_135;
            v76 = (_WORD *)*((_QWORD *)a8 + 4);
            if (*((_QWORD *)a8 + 3) - (_QWORD)v76 > 1uLL)
            {
              *v76 = 10272;
              *((_QWORD *)a8 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(a8, " (", 2uLL);
            }
            v77 = WORD2(v234);
            goto LABEL_103;
          case 6:
            v87 = BYTE5(v235) ^ 1;
            goto LABEL_134;
          case 7:
            v87 = BYTE5(v235) | 2;
            goto LABEL_134;
          case 8:
            v169 = llvm::DWARFDebugLine::ParsingState::advanceAddrForOpcode((llvm::DWARFDebugLine::ParsingState *)&v232, (llvm::dwarf *)8, v43);
            if (!v28)
              goto LABEL_135;
            v215 = (BOOL (*)(uint64_t, uint64_t))&unk_1E8133270;
            v216 = " (0x%16.16llx)";
            v217 = v169;
            goto LABEL_269;
          case 9:
            RelocatedValue = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)v208, 2, (unint64_t *)&v206, 0, (uint64_t *)&v207);
            if (v207)
              goto LABEL_135;
            *(_QWORD *)&v233 = v233 + RelocatedValue;
            if (!a10)
              goto LABEL_135;
            v215 = (BOOL (*)(uint64_t, uint64_t))&unk_1E8169900;
            v216 = " (0x%4.4hx)";
            v217 = RelocatedValue;
LABEL_269:
            llvm::raw_ostream::operator<<(a8, (uint64_t)&v215);
            goto LABEL_135;
          case 10:
            v87 = BYTE5(v235) | 8;
            goto LABEL_134;
          case 11:
            v87 = BYTE5(v235) | 0x10;
LABEL_134:
            BYTE5(v235) = v87;
            goto LABEL_135;
          case 12:
            v88 = llvm::DataExtractor::getULEB128(v208, (uint64_t *)&v206, &v207);
            if (!v207)
            {
              BYTE4(v235) = v88;
              if (a10)
              {
                v89 = (_WORD *)*((_QWORD *)a8 + 4);
                if (*((_QWORD *)a8 + 3) - (_QWORD)v89 > 1uLL)
                {
                  *v89 = 10272;
                  *((_QWORD *)a8 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(a8, " (", 2uLL);
                }
                v77 = BYTE4(v235);
LABEL_103:
                v86 = a8;
LABEL_104:
                sub_1C5E21910(v86, v77, 0, 0, 0);
                v90 = (_BYTE *)*((_QWORD *)a8 + 4);
                if (*((_BYTE **)a8 + 3) == v90)
                {
                  llvm::raw_ostream::write(a8, ")", 1uLL);
                }
                else
                {
                  *v90 = 41;
                  ++*((_QWORD *)a8 + 4);
                }
              }
            }
            goto LABEL_135;
          default:
            if (v28)
            {
              v91 = (void *)*((_QWORD *)a8 + 4);
              if (*((_QWORD *)a8 + 3) - (_QWORD)v91 > 0x1BuLL)
              {
                qmemcpy(v91, "Unrecognized standard opcode", 28);
                *((_QWORD *)a8 + 4) += 28;
              }
              else
              {
                llvm::raw_ostream::write(a8, "Unrecognized standard opcode", 0x1CuLL);
              }
            }
            v92 = v15[6] + v46;
            v93 = *(unsigned __int8 *)(v92 - 1);
            if (!*(_BYTE *)(v92 - 1))
              goto LABEL_135;
            v200 = v15;
            v94 = 0;
            v95 = 0;
            v96 = 0;
            v97 = 0;
            break;
        }
        while (1)
        {
          v98 = llvm::DataExtractor::getULEB128(v208, (uint64_t *)&v206, &v207);
          if (v207)
            break;
          v99 = v98;
          if (v96 >= v97)
          {
            v101 = v96 - v95;
            v102 = v101 + 1;
            if ((unint64_t)(v101 + 1) >> 61)
              goto LABEL_354;
            if (((char *)v97 - (char *)v95) >> 2 > v102)
              v102 = ((char *)v97 - (char *)v95) >> 2;
            if ((unint64_t)((char *)v97 - (char *)v95) >= 0x7FFFFFFFFFFFFFF8)
              v103 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v103 = v102;
            if (v103)
            {
              if (v103 >> 61)
                goto LABEL_355;
              v104 = (char *)operator new(8 * v103);
            }
            else
            {
              v104 = 0;
            }
            v105 = (uint64_t *)&v104[8 * v101];
            *v105 = v99;
            for (i = v105 + 1; v96 != v95; --v105)
            {
              v106 = *--v96;
              *(v105 - 1) = v106;
            }
            v97 = (uint64_t *)&v104[8 * v103];
            if (v95)
              operator delete(v95);
            v95 = v105;
          }
          else
          {
            *v96 = v98;
            i = v96 + 1;
          }
          ++v94;
          v96 = i;
          if (v94 >= v93)
            goto LABEL_168;
        }
        i = v96;
LABEL_168:
        v11 = v194;
        v12 = v195;
        v44 = v202;
        if (a10 && v95 != i)
        {
          v126 = *((_QWORD *)a8 + 4);
          if ((unint64_t)(*((_QWORD *)a8 + 3) - v126) > 0xB)
          {
            *(_DWORD *)(v126 + 8) = 540701540;
            *(_QWORD *)v126 = *(_QWORD *)" (operands: ";
            *((_QWORD *)a8 + 4) += 12;
          }
          else
          {
            llvm::raw_ostream::write(a8, " (operands: ", 0xCuLL);
          }
          v127 = 1;
          v128 = v95;
          do
          {
            v129 = *v128;
            if ((v127 & 1) == 0)
            {
              v130 = (_WORD *)*((_QWORD *)a8 + 4);
              if (*((_QWORD *)a8 + 3) - (_QWORD)v130 > 1uLL)
              {
                *v130 = 8236;
                *((_QWORD *)a8 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(a8, ", ", 2uLL);
              }
            }
            v215 = (BOOL (*)(uint64_t, uint64_t))&unk_1E8133270;
            v216 = "0x%16.16llx";
            v217 = v129;
            llvm::raw_ostream::operator<<(a8, (uint64_t)&v215);
            v127 = 0;
            ++v128;
          }
          while (v128 != i);
          v131 = (_BYTE *)*((_QWORD *)a8 + 4);
          if ((unint64_t)v131 >= *((_QWORD *)a8 + 3))
          {
            llvm::raw_ostream::write(a8, 41);
          }
          else
          {
            *((_QWORD *)a8 + 4) = v131 + 1;
            *v131 = 41;
          }
        }
        v15 = v200;
        if (v95)
          operator delete(v95);
LABEL_135:
        v107 = (uint64_t)v206;
        v28 = a10;
        goto LABEL_136;
      }
      v112 = llvm::DWARFDebugLine::ParsingState::advanceAddrForOpcode((llvm::DWARFDebugLine::ParsingState *)&v232, v46, v43);
      if (*(_BYTE *)(v232 + 37))
        v113 = v111 % *(unsigned __int8 *)(v232 + 37) + *(char *)(v232 + 36);
      else
        v113 = 0;
      LODWORD(v234) = v234 + v113;
      if (v28)
      {
        v132 = *((_QWORD *)a8 + 4);
        if ((unint64_t)(*((_QWORD *)a8 + 3) - v132) > 0xA)
        {
          *(_DWORD *)(v132 + 7) = 540879648;
          *(_QWORD *)v132 = *(_QWORD *)"address += ";
          *((_QWORD *)a8 + 4) += 11;
        }
        else
        {
          llvm::raw_ostream::write(a8, "address += ", 0xBuLL);
        }
        sub_1C5E21910(a8, v112, 0, 0, 0);
        v133 = *((_QWORD *)a8 + 4);
        if ((unint64_t)(*((_QWORD *)a8 + 3) - v133) > 0xA)
        {
          *(_DWORD *)(v133 + 7) = 540879648;
          *(_QWORD *)v133 = *(_QWORD *)",  line += ";
          *((_QWORD *)a8 + 4) += 11;
        }
        else
        {
          llvm::raw_ostream::write(a8, ",  line += ", 0xBuLL);
        }
        v134 = v113;
        if (v113 < 0)
        {
          v134 = -(uint64_t)v113;
          v135 = a8;
          v136 = 1;
        }
        else
        {
          v135 = a8;
          v136 = 0;
        }
        sub_1C5E21910(v135, v134, 0, 0, v136);
        if (v196)
          goto LABEL_196;
        v137 = (_BYTE *)*((_QWORD *)a8 + 4);
        if (*((_BYTE **)a8 + 3) == v137)
        {
          llvm::raw_ostream::write(a8, "\n", 1uLL);
        }
        else
        {
          *v137 = 10;
          ++*((_QWORD *)a8 + 4);
        }
        llvm::raw_ostream::write(a8, "                                                                                ", 0xCuLL);
      }
      else
      {
        if (v196)
        {
LABEL_196:
          v107 = (uint64_t)v206;
          goto LABEL_136;
        }
        if (!a8)
        {
LABEL_195:
          llvm::DWARFDebugLine::ParsingState::appendRowToMatrix((llvm::DWARFDebugLine::ParsingState *)&v232);
          goto LABEL_196;
        }
      }
      llvm::DWARFDebugLine::Row::dump((llvm::DWARFDebugLine::Row *)&v233, a8);
      goto LABEL_195;
    }
    v48 = llvm::DataExtractor::getULEB128(v208, (uint64_t *)&v206, &v207);
    if (v48)
      break;
    v56 = (uint64_t)v207;
    v44 = v202;
    if (v207 || !v28)
      goto LABEL_56;
    v57 = (void *)*((_QWORD *)a8 + 4);
    if (*((_QWORD *)a8 + 3) - (_QWORD)v57 <= 0x28uLL)
    {
      llvm::raw_ostream::write(a8, "Badly formed extended line op (length 0)\n", 0x29uLL);
      v56 = (uint64_t)v207;
LABEL_56:
      if (v56)
      {
        if (v28)
        {
          v58 = (_BYTE *)*((_QWORD *)a8 + 4);
          if (*((_BYTE **)a8 + 3) == v58)
          {
            llvm::raw_ostream::write(a8, "\n", 1uLL);
          }
          else
          {
            *v58 = 10;
            ++*((_QWORD *)a8 + 4);
          }
        }
        v59 = v207;
        v207 = 0;
        v215 = (BOOL (*)(uint64_t, uint64_t))v59;
        v12(v11, (__int128 *)&v215);
        if (v215)
          (*(void (**)(BOOL (*)(uint64_t, uint64_t)))(*(_QWORD *)v215 + 8))(v215);
      }
      goto LABEL_62;
    }
    qmemcpy(v57, "Badly formed extended line op (length 0)\n", 41);
    *((_QWORD *)a8 + 4) += 41;
LABEL_62:
    *v202 = (unint64_t)v206;
LABEL_148:
    if (v207)
      (*(void (**)(char *))(*(_QWORD *)v207 + 8))(v207);
    v43 = *v44;
    if (*v44 >= v26)
      goto LABEL_326;
  }
  v49 = v48;
  v199 = (uint64_t)v206;
  v50 = sub_1C5DEAEAC(v208, (unint64_t *)&v206, (uint64_t *)&v207);
  v51 = v50;
  v198 = v206;
  if (v28)
  {
    v52 = v50 - 1;
    if ((v50 - 1) <= 3u)
    {
      v53 = off_1E8169F58[v52];
      v54 = qword_1C8651A88[v52];
      v55 = (void *)*((_QWORD *)a8 + 4);
      if (v54 <= *((_QWORD *)a8 + 3) - (_QWORD)v55)
      {
        memcpy(v55, v53, v54);
        *((_QWORD *)a8 + 4) += v54;
      }
      else
      {
        llvm::raw_ostream::write(a8, v53, v54);
      }
      goto LABEL_64;
    }
LABEL_222:
    if (!v207 && v28)
    {
      v215 = (BOOL (*)(uint64_t, uint64_t))&unk_1E8145938;
      v216 = "Unrecognized extended op 0x%02.02hhx";
      v217 = v51;
      v154 = llvm::raw_ostream::operator<<(a8, (uint64_t)&v215);
      __p = &unk_1E8133270;
      v228 = " length %llx";
      v229 = v49;
      llvm::raw_ostream::operator<<(v154, (uint64_t)&__p);
    }
    llvm::DataExtractor::skip((_BOOL8)v208, (unint64_t *)&v206, v49 - 1);
  }
  else
  {
LABEL_64:
    switch(v51)
    {
      case 1u:
        v60 = BYTE5(v235) | 4;
        BYTE5(v235) |= 4u;
        if (v196)
          goto LABEL_69;
        if (v28)
        {
          v171 = (_BYTE *)*((_QWORD *)a8 + 4);
          if (*((_BYTE **)a8 + 3) == v171)
          {
            llvm::raw_ostream::write(a8, "\n", 1uLL);
          }
          else
          {
            *v171 = 10;
            ++*((_QWORD *)a8 + 4);
          }
          llvm::raw_ostream::write(a8, "                                                                                ", 0xCuLL);
        }
        else if (!a8)
        {
          goto LABEL_68;
        }
        llvm::DWARFDebugLine::Row::dump((llvm::DWARFDebugLine::Row *)&v233, a8);
LABEL_68:
        llvm::DWARFDebugLine::ParsingState::appendRowToMatrix((llvm::DWARFDebugLine::ParsingState *)&v232);
        v60 = BYTE5(v235);
LABEL_69:
        v61 = *(_BYTE *)(v232 + 35) != 0;
        v233 = xmmword_1C640F7C0;
        v234 = 0x1000000000001;
        BYTE4(v235) = 0;
        LODWORD(v235) = 0;
        BYTE5(v235) = v60 & 0xE0 | v61;
        v236 = 0;
        v237 = 0;
        v238 = -1;
        p_p = 0;
        v240 = 1;
        break;
      case 2u:
        v165 = v210;
        v166 = v49 - 1;
        if (v210 && v166 != v210)
        {
          v193 = std::generic_category();
          v224 = 0;
          v225 = 0;
          LODWORD(v216) = 0;
          v220 = 0;
          v221 = 0;
          v215 = (BOOL (*)(uint64_t, uint64_t))&unk_1E81A7208;
          v223 = &v224;
          v222 = 0;
          v218 = 0;
          v219 = 0;
          v217 = 0;
          v226 = 0;
          __p = &off_1E8169F48;
          v228 = "mismatching address size at offset 0x%8.8llx expected 0x%2.2hhx found 0x%2.2llx";
          v229 = v199;
          LOBYTE(v230) = v165;
          v231 = v49 - 1;
          llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v215, (uint64_t)&__p);
          v167 = v223;
          v168 = operator new();
          LOWORD(v231) = 260;
          __p = v167;
          *(_QWORD *)v168 = off_1E81A0C88;
          llvm::Twine::str((llvm::Twine *)&__p, (_QWORD *)(v168 + 8));
          *(_QWORD *)(v168 + 32) = 22;
          *(_QWORD *)(v168 + 40) = v193;
          *(_BYTE *)(v168 + 48) = 1;
          v215 = (BOOL (*)(uint64_t, uint64_t))off_1E81A6E70;
          if (v222 == 1 && v217)
            MEMORY[0x1CAA32F9C](v217, 0x1000C8077774924);
          if (SHIBYTE(v226) < 0)
            operator delete(v224);
          v215 = (BOOL (*)(uint64_t, uint64_t))v168;
          v12(v11, (__int128 *)&v215);
          v28 = a10;
          if (v215)
            (*(void (**)(BOOL (*)(uint64_t, uint64_t)))(*(_QWORD *)v215 + 8))(v215);
        }
        if (v49 <= 9 && ((1 << v49) & 0x22C) != 0)
        {
          v210 = v49 - 1;
          *(_QWORD *)&v233 = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)v208, (int)v49 - 1, (unint64_t *)&v206, (_QWORD *)&v233 + 1, (uint64_t *)&v207);
          v196 = (_QWORD)v233 == 0xFFFFFFFFFFFFFFFFLL >> (-8 * v166);
          if (v165)
            v210 = v165;
        }
        else
        {
          v173 = std::generic_category();
          v224 = 0;
          v225 = 0;
          v226 = 0;
          LODWORD(v216) = 0;
          v220 = 0;
          v221 = 0;
          v215 = (BOOL (*)(uint64_t, uint64_t))&unk_1E81A7208;
          v223 = &v224;
          v222 = 0;
          v218 = 0;
          v219 = 0;
          v217 = 0;
          __p = &unk_1E8169BA8;
          v228 = "address size 0x%2.2llx of DW_LNE_set_address opcode at offset 0x%8.8llx is unsupported";
          v229 = v49 - 1;
          v230 = v199;
          llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v215, (uint64_t)&__p);
          v174 = v223;
          v175 = operator new();
          LOWORD(v231) = 260;
          __p = v174;
          *(_QWORD *)v175 = off_1E81A0C88;
          llvm::Twine::str((llvm::Twine *)&__p, (_QWORD *)(v175 + 8));
          *(_QWORD *)(v175 + 32) = 22;
          *(_QWORD *)(v175 + 40) = v173;
          *(_BYTE *)(v175 + 48) = 1;
          v215 = (BOOL (*)(uint64_t, uint64_t))off_1E81A6E70;
          if (v222 == 1 && v217)
            MEMORY[0x1CAA32F9C](v217, 0x1000C8077774924);
          v28 = a10;
          if (SHIBYTE(v226) < 0)
            operator delete(v224);
          v215 = (BOOL (*)(uint64_t, uint64_t))v175;
          v12(v11, (__int128 *)&v215);
          if (v215)
            (*(void (**)(BOOL (*)(uint64_t, uint64_t)))(*(_QWORD *)v215 + 8))(v215);
          llvm::DataExtractor::skip((_BOOL8)v208, (unint64_t *)&v206, v49 - 1);
        }
        if (!v207 && v28)
        {
          v176 = (_WORD *)*((_QWORD *)a8 + 4);
          if (*((_QWORD *)a8 + 3) - (_QWORD)v176 > 1uLL)
          {
            *v176 = 10272;
            *((_QWORD *)a8 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(a8, " (", 2uLL);
          }
          v215 = (BOOL (*)(uint64_t, uint64_t))&off_1E816A1C0;
          v216 = "0x%*.*llx";
          LOBYTE(v217) = 2 * v166;
          BYTE1(v217) = 2 * v166;
          v218 = v233;
          llvm::raw_ostream::operator<<(a8, (uint64_t)&v215);
          v177 = (_BYTE *)*((_QWORD *)a8 + 4);
          if ((unint64_t)v177 >= *((_QWORD *)a8 + 3))
          {
            llvm::raw_ostream::write(a8, 41);
          }
          else
          {
            *((_QWORD *)a8 + 4) = v177 + 1;
            *v177 = 41;
          }
        }
        break;
      case 3u:
        v192 = v49;
        v65 = v11;
        v66 = v12;
        CStrRef = (const char *)llvm::DataExtractor::getCStrRef(v208, (unint64_t *)&v206, (uint64_t *)&v207);
        v68 = llvm::DataExtractor::getULEB128(v208, (uint64_t *)&v206, &v207);
        v69 = llvm::DataExtractor::getULEB128(v208, (uint64_t *)&v206, &v207);
        v70 = llvm::DataExtractor::getULEB128(v208, (uint64_t *)&v206, &v207);
        v71 = v70;
        v73 = (char *)v15[13];
        v72 = v15[14];
        v190 = v69;
        v191 = v68;
        if ((unint64_t)v73 >= v72)
        {
          v188 = CStrRef;
          v114 = (char *)v15[12];
          v115 = 0xF0F0F0F0F0F0F0F1 * ((v73 - v114) >> 3) + 1;
          if (v115 > 0x1E1E1E1E1E1E1E1)
LABEL_354:
            abort();
          v116 = v15;
          v117 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v72 - (_QWORD)v114) >> 3);
          if (2 * v117 > v115)
            v115 = 2 * v117;
          if (v117 >= 0xF0F0F0F0F0F0F0)
            v118 = 0x1E1E1E1E1E1E1E1;
          else
            v118 = v115;
          if (v118)
          {
            if (v118 > 0x1E1E1E1E1E1E1E1)
LABEL_355:
              sub_1C4764EE4();
            v119 = v69;
            v120 = v70;
            v121 = (char *)operator new(136 * v118);
            v71 = v120;
            v69 = v119;
          }
          else
          {
            v121 = 0;
          }
          v138 = &v121[8 * ((v73 - v114) >> 3)];
          *(_WORD *)v138 = 8;
          v138[2] = 0;
          *((_QWORD *)v138 + 1) = v188;
          *((_QWORD *)v138 + 2) = 0;
          *((_QWORD *)v138 + 4) = 0;
          *((_QWORD *)v138 + 5) = 0;
          *((_QWORD *)v138 + 6) = v68;
          *((_QWORD *)v138 + 7) = v69;
          *((_QWORD *)v138 + 8) = v71;
          *((_WORD *)v138 + 44) = 0;
          v138[90] = 0;
          *((_QWORD *)v138 + 12) = 0;
          *((_QWORD *)v138 + 13) = 0;
          *((_QWORD *)v138 + 15) = 0;
          *((_QWORD *)v138 + 16) = 0;
          v139 = v138;
          if (v73 != v114)
          {
            do
            {
              *(_OWORD *)(v139 - 136) = *(_OWORD *)(v73 - 136);
              v140 = *(_OWORD *)(v73 - 120);
              v141 = *(_OWORD *)(v73 - 104);
              v142 = *(_OWORD *)(v73 - 88);
              *(_OWORD *)(v139 - 72) = *(_OWORD *)(v73 - 72);
              *(_OWORD *)(v139 - 88) = v142;
              *(_OWORD *)(v139 - 104) = v141;
              *(_OWORD *)(v139 - 120) = v140;
              v143 = *(_OWORD *)(v73 - 56);
              v144 = *(_OWORD *)(v73 - 40);
              v145 = *(_OWORD *)(v73 - 24);
              *((_QWORD *)v139 - 1) = *((_QWORD *)v73 - 1);
              *(_OWORD *)(v139 - 24) = v145;
              *(_OWORD *)(v139 - 40) = v144;
              *(_OWORD *)(v139 - 56) = v143;
              v139 -= 136;
              v73 -= 136;
            }
            while (v73 != v114);
            v73 = (char *)v116[12];
          }
          v74 = v138 + 136;
          v116[12] = v139;
          v116[13] = v138 + 136;
          v116[14] = &v121[136 * v118];
          v15 = v116;
          v66 = v195;
          if (v73)
          {
            v146 = v71;
            operator delete(v73);
            v71 = v146;
          }
          v65 = v194;
          CStrRef = v188;
        }
        else
        {
          *(_WORD *)v73 = 8;
          v73[2] = 0;
          *((_QWORD *)v73 + 1) = CStrRef;
          *((_QWORD *)v73 + 2) = 0;
          *((_QWORD *)v73 + 4) = 0;
          *((_QWORD *)v73 + 5) = 0;
          *((_QWORD *)v73 + 6) = v68;
          *((_QWORD *)v73 + 7) = v69;
          *((_QWORD *)v73 + 8) = v70;
          *((_WORD *)v73 + 44) = 0;
          v73[90] = 0;
          v74 = v73 + 136;
          *((_QWORD *)v73 + 12) = 0;
          *((_QWORD *)v73 + 13) = 0;
          *((_QWORD *)v73 + 15) = 0;
          *((_QWORD *)v73 + 16) = 0;
        }
        v15[13] = v74;
        if (v207)
        {
          v28 = a10;
LABEL_221:
          v12 = v66;
          v11 = v65;
          v49 = v192;
          break;
        }
        v28 = a10;
        if (!a10)
          goto LABEL_221;
        v189 = v71;
        v147 = (_WORD *)*((_QWORD *)a8 + 4);
        if (*((_QWORD *)a8 + 3) - (_QWORD)v147 > 1uLL)
        {
          *v147 = 10272;
          v148 = (_WORD *)(*((_QWORD *)a8 + 4) + 2);
          *((_QWORD *)a8 + 4) = v148;
          if (!CStrRef)
            goto LABEL_210;
        }
        else
        {
          llvm::raw_ostream::write(a8, " (", 2uLL);
          v148 = (_WORD *)*((_QWORD *)a8 + 4);
          if (!CStrRef)
            goto LABEL_210;
        }
        v149 = strlen(CStrRef);
        v150 = v149;
        if (v149 > *((_QWORD *)a8 + 3) - (_QWORD)v148)
        {
          llvm::raw_ostream::write(a8, CStrRef, v149);
          v148 = (_WORD *)*((_QWORD *)a8 + 4);
LABEL_210:
          v12 = v66;
          goto LABEL_211;
        }
        v178 = CStrRef;
        v12 = v66;
        if (v149)
        {
          memcpy(v148, v178, v149);
          v148 = (_WORD *)(*((_QWORD *)a8 + 4) + v150);
          *((_QWORD *)a8 + 4) = v148;
        }
LABEL_211:
        v11 = v65;
        v49 = v192;
        if (*((_QWORD *)a8 + 3) - (_QWORD)v148 > 5uLL)
        {
          v148[2] = 15730;
          *(_DWORD *)v148 = 1768169516;
          *((_QWORD *)a8 + 4) += 6;
        }
        else
        {
          llvm::raw_ostream::write(a8, ", dir=", 6uLL);
        }
        sub_1C5E21910(a8, v191, 0, 0, 0);
        v151 = *((_QWORD *)a8 + 4);
        if ((unint64_t)(*((_QWORD *)a8 + 3) - v151) > 0xA)
        {
          *(_DWORD *)(v151 + 7) = 1030057321;
          *(_QWORD *)v151 = *(_QWORD *)", mod_time=";
          *((_QWORD *)a8 + 4) += 11;
        }
        else
        {
          llvm::raw_ostream::write(a8, ", mod_time=", 0xBuLL);
        }
        v215 = (BOOL (*)(uint64_t, uint64_t))&unk_1E8133270;
        v216 = "(0x%16.16llx)";
        v217 = v190;
        llvm::raw_ostream::operator<<(a8, (uint64_t)&v215);
        v152 = *((_QWORD *)a8 + 4);
        if ((unint64_t)(*((_QWORD *)a8 + 3) - v152) > 8)
        {
          *(_BYTE *)(v152 + 8) = 61;
          *(_QWORD *)v152 = *(_QWORD *)", length=";
          *((_QWORD *)a8 + 4) += 9;
        }
        else
        {
          llvm::raw_ostream::write(a8, ", length=", 9uLL);
        }
        v64 = a8;
        v63 = v189;
LABEL_218:
        sub_1C5E21910(v64, v63, 0, 0, 0);
        v153 = (_BYTE *)*((_QWORD *)a8 + 4);
        if (*((_BYTE **)a8 + 3) == v153)
        {
          llvm::raw_ostream::write(a8, ")", 1uLL);
        }
        else
        {
          *v153 = 41;
          ++*((_QWORD *)a8 + 4);
        }
        break;
      case 4u:
        LODWORD(v235) = llvm::DataExtractor::getULEB128(v208, (uint64_t *)&v206, &v207);
        if (v207 || !v28)
          break;
        v62 = (_WORD *)*((_QWORD *)a8 + 4);
        if (*((_QWORD *)a8 + 3) - (_QWORD)v62 > 1uLL)
        {
          *v62 = 10272;
          *((_QWORD *)a8 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(a8, " (", 2uLL);
        }
        v63 = v235;
        v64 = a8;
        goto LABEL_218;
      default:
        goto LABEL_222;
    }
  }
  v107 = v199 + v49;
  v155 = (uint64_t)v207;
  if (!v207 && v206 != (void *)v107)
  {
    v156 = std::generic_category();
    v224 = 0;
    v225 = 0;
    v226 = 0;
    LODWORD(v216) = 0;
    v220 = 0;
    v221 = 0;
    v215 = (BOOL (*)(uint64_t, uint64_t))&unk_1E81A7208;
    v223 = &v224;
    v222 = 0;
    v218 = 0;
    v219 = 0;
    v217 = 0;
    __p = &unk_1E8169E08;
    v228 = "unexpected line op length at offset 0x%8.8llx expected 0x%2.2llx found 0x%2.2llx";
    v229 = v199;
    v230 = v49;
    v231 = (unint64_t)v206 - v199;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v215, (uint64_t)&__p);
    v157 = v223;
    v158 = operator new();
    LOWORD(v231) = 260;
    __p = v157;
    *(_QWORD *)v158 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&__p, (_QWORD *)(v158 + 8));
    *(_QWORD *)(v158 + 32) = 92;
    *(_QWORD *)(v158 + 40) = v156;
    *(_BYTE *)(v158 + 48) = 1;
    v215 = (BOOL (*)(uint64_t, uint64_t))off_1E81A6E70;
    if (v222 == 1 && v217)
      MEMORY[0x1CAA32F9C](v217, 0x1000C8077774924);
    if (SHIBYTE(v226) < 0)
      operator delete(v224);
    v215 = (BOOL (*)(uint64_t, uint64_t))v158;
    v12(v11, (__int128 *)&v215);
    v28 = a10;
    if (v215)
      (*(void (**)(BOOL (*)(uint64_t, uint64_t)))(*(_QWORD *)v215 + 8))(v215);
    v155 = (uint64_t)v207;
  }
  if (v155)
  {
    v44 = v202;
    if (v28)
    {
      __p = v198;
      v228 = 0;
      v159 = sub_1C5DEAEAC(v208, (unint64_t *)&__p, (uint64_t *)&v228);
      if (!v228)
      {
        v160 = v159;
        v161 = *((_QWORD *)a8 + 4);
        if ((unint64_t)(*((_QWORD *)a8 + 3) - v161) > 0x10)
        {
          *(_BYTE *)(v161 + 16) = 62;
          *(_OWORD *)v161 = *(_OWORD *)" (<parsing error>";
          *((_QWORD *)a8 + 4) += 17;
        }
        else
        {
          llvm::raw_ostream::write(a8, " (<parsing error>", 0x11uLL);
        }
        v162 = v160;
        do
        {
          v215 = (BOOL (*)(uint64_t, uint64_t))&unk_1E8145938;
          v216 = " %2.2hhx";
          v217 = v162;
          llvm::raw_ostream::operator<<(a8, (uint64_t)&v215);
          v162 = sub_1C5DEAEAC(v208, (unint64_t *)&__p, (uint64_t *)&v228);
        }
        while (!v228);
        v163 = (_BYTE *)*((_QWORD *)a8 + 4);
        if (*((_BYTE **)a8 + 3) == v163)
        {
          llvm::raw_ostream::write(a8, ")", 1uLL);
        }
        else
        {
          *v163 = 41;
          ++*((_QWORD *)a8 + 4);
        }
        v11 = v194;
        v12 = v195;
      }
      v164 = (char *)v228;
      v228 = 0;
      v224 = v164;
      sub_1C4D62BD4((char **)&v224, (char **)&v215);
      if (v224)
        (*(void (**)(void *))(*(_QWORD *)v224 + 8))(v224);
      if (v228)
        (*(void (**)(const char *))(*(_QWORD *)v228 + 8))(v228);
    }
  }
  else
  {
    v44 = v202;
  }
LABEL_136:
  *v44 = v107;
  if (!v28)
  {
    v109 = v207;
    v110 = v207 == 0;
    v26 = v203;
    if ((_DWORD)v46 && v207)
      goto LABEL_340;
    goto LABEL_145;
  }
  v26 = v203;
  if (v15[16] - v15[15] == v205 - v204)
  {
    v108 = (_BYTE *)*((_QWORD *)a8 + 4);
    if (*((_BYTE **)a8 + 3) == v108)
    {
      llvm::raw_ostream::write(a8, "\n", 1uLL);
    }
    else
    {
      *v108 = 10;
      ++*((_QWORD *)a8 + 4);
    }
  }
  v109 = v207;
  v110 = v207 == 0;
  if (!(_DWORD)v46 || !v207)
  {
LABEL_145:
    if (!v110)
    {
      v207 = 0;
      v215 = (BOOL (*)(uint64_t, uint64_t))v109;
      v12(v11, (__int128 *)&v215);
      if (v215)
        (*(void (**)(BOOL (*)(uint64_t, uint64_t)))(*(_QWORD *)v215 + 8))(v215);
    }
    goto LABEL_148;
  }
  v185 = (_BYTE *)*((_QWORD *)a8 + 4);
  if (*((_BYTE **)a8 + 3) == v185)
  {
    llvm::raw_ostream::write(a8, "\n", 1uLL);
  }
  else
  {
    *v185 = 10;
    ++*((_QWORD *)a8 + 4);
  }
LABEL_340:
  *a9 = (uint64_t)v207;
LABEL_341:
  result = v214;
  if (v214)
    return (void *)(*(uint64_t (**)(void *))(*(_QWORD *)v214 + 8))(v214);
  return result;
}

void sub_1C549EFA4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, char *a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void **v14;
  uint64_t v15;
  _QWORD v16[4];
  uint64_t v17;
  char v18;
  void (**v19)(llvm::raw_ostream *__hidden);
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  int v26;
  void **v27;
  void *v28[2];
  uint64_t v29;

  v28[0] = 0;
  v28[1] = 0;
  v29 = 0;
  v20 = 0;
  v24 = 0;
  v25 = 0;
  v19 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v27 = v28;
  v26 = 0;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v10 = *a4;
  v11 = *a5;
  v12 = *a6;
  v13 = *a7;
  v16[0] = &off_1E8169F08;
  v16[1] = "line table program at offset 0x%8.8llx contains a %s opcode at offset 0x%8.8llx, but the prologue maximum_ope"
           "rations_per_instruction value is %hhd, which is unsupported. Assuming a value of 1 instead";
  v16[2] = v10;
  v16[3] = v11;
  v17 = v12;
  v18 = v13;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v19, (uint64_t)v16);
  v14 = v27;
  v15 = operator new();
  LOWORD(v17) = 260;
  v16[0] = v14;
  *(_QWORD *)v15 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v16, (_QWORD *)(v15 + 8));
  *(_QWORD *)(v15 + 32) = a2;
  *(_QWORD *)(v15 + 40) = a3;
  *(_BYTE *)(v15 + 48) = 1;
  *a1 = v15;
  v19 = off_1E81A6E70;
  if (v26 == 1 && v21)
    MEMORY[0x1CAA32F9C](v21, 0x1000C8077774924);
  if (SHIBYTE(v29) < 0)
    operator delete(v28[0]);
}

void sub_1C549F0F8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  void (**v15)(llvm::raw_ostream *__hidden);
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  void **v23;
  void *__p[2];
  uint64_t v25;
  _QWORD v26[4];
  uint64_t v27;

  __p[0] = 0;
  __p[1] = 0;
  v25 = 0;
  v16 = 0;
  v20 = 0;
  v21 = 0;
  v15 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v23 = __p;
  v22 = 0;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v10 = *a5;
  v11 = *a6;
  v12 = *a7;
  v26[0] = &off_1E8169F28;
  v26[1] = a4;
  v26[2] = v10;
  v26[3] = v11;
  v27 = v12;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v15, (uint64_t)v26);
  v13 = v23;
  v14 = operator new();
  LOWORD(v27) = 260;
  v26[0] = v13;
  *(_QWORD *)v14 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v26, (_QWORD *)(v14 + 8));
  *(_QWORD *)(v14 + 32) = a2;
  *(_QWORD *)(v14 + 40) = a3;
  *(_BYTE *)(v14 + 48) = 1;
  *a1 = v14;
  v15 = off_1E81A6E70;
  if (v22 == 1 && v17)
    MEMORY[0x1CAA32F9C](v17, 0x1000C8077774924);
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
}

uint64_t llvm::DWARFDebugLine::ParsingState::handleSpecialOpcode(llvm::DWARFDebugLine::ParsingState *this, llvm::dwarf *a2, uint64_t a3)
{
  uint64_t result;
  unsigned __int8 v5;
  unsigned int v6;

  result = llvm::DWARFDebugLine::ParsingState::advanceAddrForOpcode(this, a2, a3);
  v6 = *(unsigned __int8 *)(*(_QWORD *)this + 37);
  if (*(_BYTE *)(*(_QWORD *)this + 37))
    v6 = v5 % v6 + *(char *)(*(_QWORD *)this + 36);
  *((_DWORD *)this + 6) += v6;
  return result;
}

unint64_t llvm::DWARFDebugLine::LineTable::findRowInSeq(_QWORD *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;

  if (*(_QWORD *)(a2 + 16) != a4 || *(_QWORD *)a2 > a3 || a3 >= *(_QWORD *)(a2 + 8))
    return *(unsigned int *)a1;
  v7 = a1[15];
  v8 = v7 + 32 * *(unsigned int *)(a2 + 24) + 32;
  v9 = 32 * *(unsigned int *)(a2 + 28) - 32 - (32 * *(unsigned int *)(a2 + 24) + 32);
  if (v9)
  {
    v10 = v9 >> 5;
    do
    {
      v11 = v10 >> 1;
      v12 = (unint64_t *)(v8 + 32 * (v10 >> 1));
      v13 = v12[1];
      if (a4 >= v13)
      {
        if (v13 >= a4)
        {
          v15 = *v12;
          v14 = v12 + 4;
          v16 = v10 + ~v11;
          if (a3 >= v15)
          {
            v8 = (uint64_t)v14;
            v11 = v16;
          }
        }
        else
        {
          v8 = (uint64_t)(v12 + 4);
          v11 = v10 + ~v11;
        }
      }
      v10 = v11;
    }
    while (v11);
  }
  return (unint64_t)(v8 - v7 - 32) >> 5;
}

unint64_t llvm::DWARFDebugLine::LineTable::lookupAddress(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  unint64_t result;

  result = llvm::DWARFDebugLine::LineTable::lookupAddressImpl(a1, a2, a3);
  if ((_DWORD)result == *(_DWORD *)a1 && a3 != -1)
    return llvm::DWARFDebugLine::LineTable::lookupAddressImpl(a1, a2, 0xFFFFFFFFFFFFFFFFLL);
  return result;
}

unint64_t llvm::DWARFDebugLine::LineTable::lookupAddressImpl(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;

  v5 = a1[18];
  v6 = a1[19];
  if (v6 != v5)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v5) >> 3);
    do
    {
      v8 = v7 >> 1;
      v9 = v5 + 40 * (v7 >> 1);
      v10 = *(_QWORD *)(v9 + 16);
      if (a3 >= v10)
      {
        if (v10 >= a3)
        {
          v11 = a2 < *(_QWORD *)(v9 + 8);
          v12 = v7 + ~v8;
          v13 = v9 + 40;
          if (!v11)
          {
            v5 = v13;
            v8 = v12;
          }
        }
        else
        {
          v5 = v9 + 40;
          v8 = v7 + ~v8;
        }
      }
      v7 = v8;
    }
    while (v8);
  }
  if (v5 == v6 || *(_QWORD *)(v5 + 16) != a3)
    return *(unsigned int *)a1;
  else
    return llvm::DWARFDebugLine::LineTable::findRowInSeq(a1, v5, a2, a3);
}

uint64_t llvm::DWARFDebugLine::LineTable::lookupAddressRange(_QWORD *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((llvm::DWARFDebugLine::LineTable::lookupAddressRangeImpl(a1, a2, a3, a4, a5) & 1) != 0)
    return 1;
  if (a3 == -1)
    return 0;
  return llvm::DWARFDebugLine::LineTable::lookupAddressRangeImpl(a1, a2, 0xFFFFFFFFFFFFFFFFLL, a4, a5);
}

uint64_t llvm::DWARFDebugLine::LineTable::lookupAddressRangeImpl(_QWORD *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t *v5;
  unint64_t *v6;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unsigned int RowInSeq;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t result;
  uint64_t v34;
  unint64_t v36;
  unint64_t v37;

  v6 = (unint64_t *)a1[18];
  v5 = (unint64_t *)a1[19];
  if (v6 == v5)
    return 0;
  v9 = a1;
  v10 = 0xCCCCCCCCCCCCCCCDLL * (v5 - v6);
  do
  {
    v11 = v10 >> 1;
    v12 = &v6[5 * (v10 >> 1)];
    v13 = v12[2];
    if (a3 >= v13)
    {
      if (v13 >= a3)
      {
        v14 = a2 < v12[1];
        v15 = v10 + ~v11;
        v16 = v12 + 5;
        if (!v14)
        {
          v6 = v16;
          v11 = v15;
        }
      }
      else
      {
        v6 = v12 + 5;
        v11 = v10 + ~v11;
      }
    }
    v10 = v11;
  }
  while (v11);
  if (v6 == v5 || v6[2] != a3 || *v6 > a2 || a2 >= v6[1])
    return 0;
  v34 = a1[19];
  v37 = a2 + a4;
  v36 = a2 + a4 - 1;
  v17 = (uint64_t)v6;
  while (*(_QWORD *)v17 < v37)
  {
    if ((unint64_t *)v17 == v6)
      RowInSeq = llvm::DWARFDebugLine::LineTable::findRowInSeq(v9, (uint64_t)v6, a2, a3);
    else
      RowInSeq = *(_DWORD *)(v17 + 24);
    v19 = llvm::DWARFDebugLine::LineTable::findRowInSeq(v9, v17, v36, a3);
    if (v19 == *(_DWORD *)v9)
      v20 = *(_DWORD *)(v17 + 28) - 1;
    else
      v20 = v19;
    if (RowInSeq <= v20)
    {
      v21 = *(unsigned int **)(a5 + 8);
      do
      {
        v22 = *(_QWORD *)(a5 + 16);
        if ((unint64_t)v21 >= v22)
        {
          v24 = *(unsigned int **)a5;
          v25 = ((uint64_t)v21 - *(_QWORD *)a5) >> 2;
          v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 62)
            abort();
          v27 = v22 - (_QWORD)v24;
          if (v27 >> 1 > v26)
            v26 = v27 >> 1;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
            v28 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v28 = v26;
          if (v28)
          {
            if (v28 >> 62)
              sub_1C4764EE4();
            v29 = (char *)operator new(4 * v28);
          }
          else
          {
            v29 = 0;
          }
          v30 = (unsigned int *)&v29[4 * v25];
          *v30 = RowInSeq;
          v23 = v30 + 1;
          while (v21 != v24)
          {
            v31 = *--v21;
            *--v30 = v31;
          }
          *(_QWORD *)a5 = v30;
          *(_QWORD *)(a5 + 8) = v23;
          *(_QWORD *)(a5 + 16) = &v29[4 * v28];
          if (v24)
            operator delete(v24);
        }
        else
        {
          *v21 = RowInSeq;
          v23 = v21 + 1;
        }
        *(_QWORD *)(a5 + 8) = v23;
        ++RowInSeq;
        v21 = v23;
      }
      while (RowInSeq <= v20);
    }
    v17 += 40;
    result = 1;
    v9 = a1;
    if (v17 == v34)
      return result;
  }
  return 1;
}

size_t llvm::DWARFDebugLine::LineTable::getSourceByIndex@<X0>(size_t result@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  char v10;
  size_t v11;
  _OWORD v12[3];
  char v13;

  if (!a3)
    goto LABEL_7;
  if (*(unsigned __int16 *)(result + 16) < 5u)
  {
    if (!a2)
      goto LABEL_7;
    v7 = *(_QWORD *)(result + 96);
    if (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(result + 104) - v7) >> 3) < a2)
      goto LABEL_7;
    v6 = v7 + 136 * a2 - 136;
  }
  else
  {
    v5 = *(_QWORD *)(result + 96);
    if (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(result + 104) - v5) >> 3) <= a2)
    {
LABEL_7:
      v8 = 0;
      *(_BYTE *)a4 = 0;
      goto LABEL_8;
    }
    v6 = v5 + 136 * a2;
  }
  v9 = *(_OWORD *)(v6 + 104);
  v12[0] = *(_OWORD *)(v6 + 88);
  v12[1] = v9;
  v12[2] = *(_OWORD *)(v6 + 120);
  v13 = 1;
  result = (size_t)sub_1C624DEB4((llvm::DWARFFormValue *)v12);
  if (!v10)
    goto LABEL_7;
  v11 = result;
  if (result)
    result = strlen((const char *)result);
  else
    result = 0;
  *(_QWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = result;
  v8 = 1;
LABEL_8:
  *(_BYTE *)(a4 + 16) = v8;
  return result;
}

uint64_t llvm::DWARFDebugLine::Prologue::getFileNameByIndex(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, const llvm::Twine *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  char *v19;
  char v20;
  char *v21;
  size_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  const void *v27;
  __int128 *p_dst;
  unint64_t v29;
  size_t v30;
  char *v31;
  size_t v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 *v40;
  char *v41;
  size_t v42;
  const void *v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47[4];
  __int16 v48;
  _QWORD *v49[4];
  __int16 v50;
  __int128 __dst;
  size_t __len[2];
  __int128 v53;
  char v54;
  char *__s;
  size_t v56;
  __int16 v57;
  _QWORD *v58;
  __int128 v59;
  _QWORD v60[4];

  v60[2] = *MEMORY[0x1E0C80C00];
  if (!a5)
    return 0;
  if (*(unsigned __int16 *)(a1 + 8) < 5u)
  {
    if (!a2)
      return 0;
    v15 = *(_QWORD *)(a1 + 88);
    if (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(a1 + 96) - v15) >> 3) < a2)
      return 0;
    v14 = v15 + 136 * a2 - 136;
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 88);
    if (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(a1 + 96) - v13) >> 3) <= a2)
      return 0;
    v14 = v13 + 136 * a2;
  }
  v17 = *(_OWORD *)v14;
  v18 = *(_OWORD *)(v14 + 32);
  *(_OWORD *)__len = *(_OWORD *)(v14 + 16);
  v53 = v18;
  __dst = v17;
  v54 = 1;
  v19 = sub_1C624DEB4((llvm::DWARFFormValue *)&__dst);
  if (!v20)
    return 0;
  v21 = v19;
  if (v19)
    v22 = strlen(v19);
  else
    v22 = 0;
  if (a5 != 1)
  {
    LOWORD(v53) = 261;
    *(_QWORD *)&__dst = v21;
    *((_QWORD *)&__dst + 1) = v22;
    if ((llvm::sys::path::is_absolute((const char **)&__dst, (const llvm::Twine *)1) & 1) == 0
      && (llvm::sys::path::is_absolute((const char **)&__dst, (const llvm::Twine *)3) & 1) == 0)
    {
      if (a5 == 2)
      {
        __len[0] = 0;
        __len[1] = 0;
        *(_QWORD *)&__dst = v21;
        *((_QWORD *)&__dst + 1) = v22;
        *(_QWORD *)&v53 = v22;
        DWORD2(v53) = 0;
        llvm::sys::path::reverse_iterator::operator++((uint64_t)&__dst);
        v26 = __len[1];
        if (__len[1] <= 0x7FFFFFFFFFFFFFF7)
        {
          v27 = (const void *)__len[0];
          if (__len[1] >= 0x17)
          {
            v32 = (__len[1] & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((__len[1] | 7) != 0x17)
              v32 = __len[1] | 7;
            v33 = v32 + 1;
            p_dst = (__int128 *)operator new(v32 + 1);
            *((_QWORD *)&__dst + 1) = v26;
            __len[0] = v33 | 0x8000000000000000;
            *(_QWORD *)&__dst = p_dst;
          }
          else
          {
            HIBYTE(__len[0]) = __len[1];
            p_dst = &__dst;
            if (!__len[1])
              goto LABEL_42;
          }
          memmove(p_dst, v27, v26);
LABEL_42:
          *((_BYTE *)p_dst + v26) = 0;
          goto LABEL_25;
        }
LABEL_75:
        abort();
      }
      v58 = v60;
      v59 = xmmword_1C6612EE0;
      v29 = *(_QWORD *)(v14 + 48);
      if (*(unsigned __int16 *)(a1 + 8) < 5u)
      {
        if (!v29)
          goto LABEL_56;
        v34 = *(_QWORD *)(a1 + 64);
        if (v29 > 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 72) - v34) >> 4))
          goto LABEL_56;
        v35 = v34 + 48 * v29;
        v36 = *(_OWORD *)(v35 - 48);
        v37 = *(_OWORD *)(v35 - 32);
        v38 = *(_OWORD *)(v35 - 16);
      }
      else
      {
        if (a5 == 3 && !v29)
        {
          v30 = 0;
          v31 = 0;
          goto LABEL_63;
        }
        v39 = *(_QWORD *)(a1 + 64);
        if (v29 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 72) - v39) >> 4))
          goto LABEL_56;
        v40 = (__int128 *)(v39 + 48 * v29);
        v36 = *v40;
        v37 = v40[1];
        v38 = v40[2];
      }
      *(_OWORD *)__len = v37;
      v53 = v38;
      __dst = v36;
      v54 = 1;
      llvm::DWARFFormValue::getAsCString((llvm::DWARFFormValue *)&__dst, (uint64_t)&__s);
      v31 = __s;
      if ((v56 & 1) == 0)
      {
        if (__s)
        {
          v30 = strlen(__s);
LABEL_58:
          if (a5 == 4)
          {
            if (a4)
            {
              LOWORD(v53) = 261;
              *(_QWORD *)&__dst = v31;
              *((_QWORD *)&__dst + 1) = v30;
              if ((llvm::sys::path::is_absolute((const char **)&__dst, (const llvm::Twine *)1) & 1) == 0
                && (llvm::sys::path::is_absolute((const char **)&__dst, (const llvm::Twine *)3) & 1) == 0)
              {
                LOWORD(v53) = 261;
                *(_QWORD *)&__dst = a3;
                *((_QWORD *)&__dst + 1) = a4;
                v57 = 257;
                v50 = 257;
                v48 = 257;
                llvm::sys::path::append(&v58, a7, (_QWORD **)&__dst, (_QWORD **)&__s, v49, (void ***)v47);
              }
            }
          }
LABEL_63:
          LOWORD(v53) = 261;
          *(_QWORD *)&__dst = v31;
          *((_QWORD *)&__dst + 1) = v30;
          v57 = 261;
          __s = v21;
          v56 = v22;
          v50 = 257;
          v48 = 257;
          llvm::sys::path::append(&v58, a7, (_QWORD **)&__dst, (_QWORD **)&__s, v49, (void ***)v47);
          v42 = v59;
          if ((unint64_t)v59 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_75;
          v43 = v58;
          if ((unint64_t)v59 >= 0x17)
          {
            v45 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
            if (((unint64_t)v59 | 7) != 0x17)
              v45 = v59 | 7;
            v46 = v45 + 1;
            v44 = (__int128 *)operator new(v45 + 1);
            *((_QWORD *)&__dst + 1) = v42;
            __len[0] = v46 | 0x8000000000000000;
            *(_QWORD *)&__dst = v44;
          }
          else
          {
            HIBYTE(__len[0]) = v59;
            v44 = &__dst;
            if (!(_QWORD)v59)
              goto LABEL_71;
          }
          memmove(v44, v43, v42);
LABEL_71:
          *((_BYTE *)v44 + v42) = 0;
          if (*(char *)(a6 + 23) < 0)
            operator delete(*(void **)a6);
          *(_OWORD *)a6 = __dst;
          *(_QWORD *)(a6 + 16) = __len[0];
          if (v58 != v60)
            free(v58);
          return 1;
        }
LABEL_57:
        v30 = 0;
        goto LABEL_58;
      }
      __s = 0;
      v47[0] = v31;
      sub_1C4D62BD4(v47, (char **)v49);
      if (v47[0])
        (*(void (**)(char *))(*(_QWORD *)v47[0] + 8))(v47[0]);
      if ((v56 & 1) != 0)
      {
        v41 = __s;
        __s = 0;
        if (v41)
          (*(void (**)(char *))(*(_QWORD *)v41 + 8))(v41);
      }
LABEL_56:
      v31 = 0;
      goto LABEL_57;
    }
  }
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_75;
  if (v22 >= 0x17)
  {
    v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v24 = v22 | 7;
    v25 = v24 + 1;
    v23 = (__int128 *)operator new(v24 + 1);
    *((_QWORD *)&__dst + 1) = v22;
    __len[0] = v25 | 0x8000000000000000;
    *(_QWORD *)&__dst = v23;
  }
  else
  {
    HIBYTE(__len[0]) = v22;
    v23 = &__dst;
    if (!v22)
      goto LABEL_24;
  }
  memmove(v23, v21, v22);
LABEL_24:
  *((_BYTE *)v23 + v22) = 0;
LABEL_25:
  if (*(char *)(a6 + 23) < 0)
    operator delete(*(void **)a6);
  *(_OWORD *)a6 = __dst;
  *(_QWORD *)(a6 + 16) = __len[0];
  return 1;
}

uint64_t llvm::DWARFDebugLine::LineTable::getFileLineInfoForAddress(_QWORD *a1, unint64_t a2, unint64_t a3, const char *a4, int a5, uint64_t a6)
{
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int16 *v18;
  unsigned int v19;
  size_t v20;
  uint64_t result;
  int FileNameByIndex;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v12 = llvm::DWARFDebugLine::LineTable::lookupAddressImpl(a1, a2, a3);
  if (v12 == *(_DWORD *)a1 && a3 != -1)
    v12 = llvm::DWARFDebugLine::LineTable::lookupAddressImpl(a1, a2, 0xFFFFFFFFFFFFFFFFLL);
  if (v12 == -1)
    return 0;
  v14 = v12;
  v15 = a1[15];
  v16 = v15 + 32 * v12;
  v19 = *(unsigned __int16 *)(v16 + 22);
  v18 = (unsigned __int16 *)(v16 + 22);
  v17 = v19;
  if (a4)
    v20 = strlen(a4);
  else
    v20 = 0;
  FileNameByIndex = llvm::DWARFDebugLine::Prologue::getFileNameByIndex((uint64_t)(a1 + 1), v17, (uint64_t)a4, v20, a5, a6, 0);
  result = 0;
  if (FileNameByIndex)
  {
    v23 = v15 + 32 * v14;
    *(_DWORD *)(a6 + 96) = *(_DWORD *)(v23 + 16);
    *(_DWORD *)(a6 + 100) = *(unsigned __int16 *)(v23 + 20);
    *(_DWORD *)(a6 + 128) = *(_DWORD *)(v23 + 24);
    llvm::DWARFDebugLine::LineTable::getSourceByIndex((size_t)a1, *v18, a5, (uint64_t)&v24);
    *(_OWORD *)(a6 + 72) = v24;
    *(_QWORD *)(a6 + 88) = v25;
    return 1;
  }
  return result;
}

uint64_t llvm::DWARFDebugLine::SectionParser::SectionParser(uint64_t a1, uint64_t a2, uint64_t a3, llvm::DWARFUnit **a4, llvm::DWARFUnit **a5)
{
  _QWORD **v6;
  llvm::DWARFUnit **v8;
  llvm::DWARFUnit *v9;
  llvm::DWARFUnit *v10;
  llvm::DWARFUnit *v11;
  BOOL v12;
  llvm::DWARFUnit *v13;
  BOOL v14;
  uint64_t v15;
  llvm::DWARFUnit *v16;
  uint64_t **v17;
  uint64_t **v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned __int16 v30;
  unint64_t v31;
  char v32;
  llvm::DWARFUnit *v33[2];

  *(_QWORD *)(a1 + 8) = 0;
  v6 = (_QWORD **)(a1 + 8);
  *(_QWORD *)a1 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  v28 = 0;
  v29 = 0;
  v27 = &v28;
  if (a4 == a5)
  {
    v23 = 0;
  }
  else
  {
    v8 = a4;
    do
    {
      v9 = *v8;
      llvm::DWARFUnit::extractDIEsIfNeeded(*v8, 1);
      v10 = (llvm::DWARFUnit *)*((_QWORD *)v9 + 36);
      v11 = (llvm::DWARFUnit *)*((_QWORD *)v9 + 37);
      v12 = v10 == v11;
      if (v10 == v11)
        v13 = 0;
      else
        v13 = v9;
      if (v12)
        v10 = 0;
      v33[0] = v13;
      v33[1] = v10;
      if (v13)
        v14 = v10 == 0;
      else
        v14 = 1;
      if (!v14)
      {
        llvm::DWARFDie::find(v33, 16, &v30);
        if (v32 && (llvm::DWARFFormValue::isFormClass(&v30, 8) & 1) != 0)
        {
          v15 = v31;
          v16 = *v8;
          v17 = &v28;
          v18 = &v28;
          v19 = v28;
          if (v28)
          {
            while (1)
            {
              while (1)
              {
                v18 = (uint64_t **)v19;
                v20 = v19[4];
                if (v20 <= v31)
                  break;
                v19 = *v18;
                v17 = v18;
                if (!*v18)
                  goto LABEL_24;
              }
              if (v20 >= v31)
                break;
              v19 = v18[1];
              if (!v19)
              {
                v17 = v18 + 1;
                goto LABEL_24;
              }
            }
          }
          else
          {
LABEL_24:
            v21 = (uint64_t *)operator new(0x30uLL);
            v21[4] = v15;
            v21[5] = (uint64_t)v16;
            *v21 = 0;
            v21[1] = 0;
            v21[2] = (uint64_t)v18;
            *v17 = v21;
            if (*v27)
            {
              v27 = (uint64_t **)*v27;
              v22 = *v17;
            }
            else
            {
              v22 = v21;
            }
            sub_1C4768E74(v28, v22);
            ++v29;
          }
        }
      }
      ++v8;
    }
    while (v8 != a5);
    v23 = *v6;
  }
  sub_1C4FE319C(a1, v23);
  v24 = v28;
  *(_QWORD *)a1 = v27;
  *(_QWORD *)(a1 + 8) = v24;
  v25 = v29;
  *(_QWORD *)(a1 + 16) = v29;
  if (v25)
  {
    v24[2] = (uint64_t)v6;
    v27 = &v28;
    v28 = 0;
    v29 = 0;
    v24 = 0;
  }
  else
  {
    *(_QWORD *)a1 = v6;
  }
  sub_1C4FE319C((uint64_t)&v27, v24);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) <= *(_QWORD *)(a1 + 40))
    *(_BYTE *)(a1 + 48) = 1;
  return a1;
}

void *llvm::DWARFDebugLine::SectionParser::parseNext@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, __int128 *)@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t, uint64_t *)@<X3>, uint64_t a5@<X4>, llvm::raw_ostream *a6@<X5>, unsigned __int8 a7@<W6>, uint64_t a8@<X8>)
{
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *result;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v14 = (unint64_t *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD **)(a1 + 8);
  if (!v16)
    goto LABEL_12;
  v17 = (_QWORD *)(a1 + 8);
  do
  {
    v18 = v16[4];
    v19 = v18 >= v15;
    if (v18 >= v15)
      v20 = v16;
    else
      v20 = v16 + 1;
    if (v19)
      v17 = v16;
    v16 = (_QWORD *)*v20;
  }
  while (*v20);
  if (v17 != (_QWORD *)(a1 + 8) && v17[4] <= v15)
  {
    v21 = v17[5];
    v24 = a1 + 24;
    v23 = *(_QWORD *)(a1 + 24);
    if (v21)
      v22 = *(_BYTE *)(v21 + 34);
    else
      v22 = 0;
  }
  else
  {
LABEL_12:
    v21 = 0;
    v22 = 0;
    v24 = a1 + 24;
    v23 = *(_QWORD *)(a1 + 24);
  }
  *(_BYTE *)(v23 + 17) = v22;
  *(_DWORD *)a8 = -1;
  *(_QWORD *)(a8 + 8) = 0;
  v25 = (_QWORD *)(a8 + 8);
  *(_QWORD *)(a8 + 13) = 0;
  *(_QWORD *)(a8 + 24) = 0;
  *(_QWORD *)(a8 + 32) = 0;
  *(_DWORD *)(a8 + 39) = 0;
  *(_OWORD *)(a8 + 48) = 0u;
  *(_OWORD *)(a8 + 64) = 0u;
  *(_OWORD *)(a8 + 80) = 0u;
  *(_OWORD *)(a8 + 96) = 0u;
  *(_OWORD *)(a8 + 112) = 0u;
  *(_OWORD *)(a8 + 128) = 0u;
  *(_OWORD *)(a8 + 144) = 0u;
  *(_QWORD *)(a8 + 160) = 0;
  result = llvm::DWARFDebugLine::LineTable::parse(a8, (__int128 *)v23, v14, *(_QWORD *)(a1 + 32), v21, a2, a3, a6, &v29, a7);
  if (v29)
  {
    v30 = v29;
    a4(a5, &v30);
    result = (void *)v30;
    if (v30)
      result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  }
  if (!*v25)
    goto LABEL_20;
  v27 = 4;
  if (*(_BYTE *)(a8 + 19) == 1)
    v27 = 12;
  v28 = *v25 + v15 + v27;
  *v14 = v28;
  if (*(_QWORD *)(*(_QWORD *)v24 + 8) <= v28)
LABEL_20:
    *(_BYTE *)(a1 + 48) = 1;
  return result;
}

uint64_t llvm::DWARFDebugLine::SectionParser::prepareToParse(llvm::DWARFDebugLine::SectionParser *this, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  BOOL v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (!v2)
    goto LABEL_12;
  v3 = (_QWORD *)((char *)this + 8);
  do
  {
    v4 = v2[4];
    v5 = v4 >= a2;
    if (v4 >= a2)
      v6 = v2;
    else
      v6 = v2 + 1;
    if (v5)
      v3 = v2;
    v2 = (_QWORD *)*v6;
  }
  while (*v6);
  if (v3 != (_QWORD *)((char *)this + 8) && v3[4] <= a2)
  {
    v7 = v3[5];
    v9 = *((_QWORD *)this + 3);
    if (v7)
      v8 = *(_BYTE *)(v7 + 34);
    else
      v8 = 0;
  }
  else
  {
LABEL_12:
    v7 = 0;
    v8 = 0;
    v9 = *((_QWORD *)this + 3);
  }
  *(_BYTE *)(v9 + 17) = v8;
  return v7;
}

uint64_t llvm::DWARFDebugLine::SectionParser::moveToNextTable(uint64_t this, uint64_t a2, const llvm::DWARFDebugLine::Prologue *a3)
{
  uint64_t v3;
  unint64_t v4;

  if (!*(_QWORD *)a3)
    goto LABEL_5;
  v3 = 4;
  if (*((_BYTE *)a3 + 11) == 1)
    v3 = 12;
  v4 = *(_QWORD *)a3 + a2 + v3;
  *(_QWORD *)(this + 40) = v4;
  if (*(_QWORD *)(*(_QWORD *)(this + 24) + 8) <= v4)
LABEL_5:
    *(_BYTE *)(this + 48) = 1;
  return this;
}

_QWORD *llvm::DWARFDebugLine::SectionParser::skip(uint64_t a1, void (*a2)(uint64_t, __int128 *), uint64_t a3, void (*a4)(uint64_t, uint64_t *), uint64_t a5)
{
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  _OWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  _QWORD v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v8 = (unint64_t *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD **)(a1 + 8);
  if (!v10)
    goto LABEL_12;
  v11 = (_QWORD *)(a1 + 8);
  do
  {
    v12 = v10[4];
    v13 = v12 >= v9;
    if (v12 >= v9)
      v14 = v10;
    else
      v14 = v10 + 1;
    if (v13)
      v11 = v10;
    v10 = (_QWORD *)*v14;
  }
  while (*v14);
  if (v11 != (_QWORD *)(a1 + 8) && v11[4] <= v9)
  {
    v15 = v11[5];
    v18 = a1 + 24;
    v17 = *(__int128 **)(a1 + 24);
    if (v15)
      v16 = *(_BYTE *)(v15 + 34);
    else
      v16 = 0;
  }
  else
  {
LABEL_12:
    v15 = 0;
    v16 = 0;
    v18 = a1 + 24;
    v17 = *(__int128 **)(a1 + 24);
  }
  *((_BYTE *)v17 + 17) = v16;
  LODWORD(v27) = -1;
  memset(v28, 0, 13);
  v28[2] = 0;
  v29[0] = 0;
  *(_DWORD *)((char *)v29 + 7) = 0;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0;
  v19 = *v17;
  v20 = v17[1];
  v25 = *((_QWORD *)v17 + 4);
  v24[0] = v19;
  v24[1] = v20;
  llvm::DWARFDebugLine::Prologue::parse((uint64_t)v28, (uint64_t)v24, v8, a2, a3, *(_QWORD *)(a1 + 32), v15, &v26);
  if (v26)
  {
    v38 = v26;
    a4(a5, &v38);
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  }
  if (!v28[0])
    goto LABEL_20;
  v21 = 4;
  if (BYTE3(v28[1]) == 1)
    v21 = 12;
  v22 = v28[0] + v9 + v21;
  *v8 = v22;
  if (*(_QWORD *)(*(_QWORD *)v18 + 8) <= v22)
LABEL_20:
    *(_BYTE *)(a1 + 48) = 1;
  return sub_1C624DF80(&v27);
}

char *sub_1C54A0400(uint64_t a1, uint64_t *a2, unint64_t *a3, _BYTE *a4)
{
  int v8;
  char v9;
  int v10;
  int ULEB128;
  unsigned __int16 v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  int v17;
  const std::error_category *v18;
  char *result;
  const std::error_category *v20;
  std::string *v21;
  void **v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  std::string v29;
  char *v30;
  uint64_t v31;
  const std::error_category *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int v38;
  void **v39;
  void *__p[2];
  uint64_t v41;
  _BYTE *v42[4];
  __int16 v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD v46[6];

  v46[4] = *MEMORY[0x1E0C80C00];
  v30 = 0;
  v44 = v46;
  v45 = 0x400000000;
  v8 = sub_1C5DEAEAC(a2, a3, (uint64_t *)&v30);
  if (!v8 || v30)
  {
    if (!v30)
    {
LABEL_26:
      v18 = std::generic_category();
      v31 = 22;
      v32 = v18;
      v42[0] = "failed to parse entry content descriptions because no path was found";
      sub_1C5DF1730(v42, &v31, &v27);
      *(_BYTE *)(a1 + 48) |= 1u;
      *(_QWORD *)a1 = v27;
      v27 = 0;
      goto LABEL_27;
    }
LABEL_32:
    v20 = std::generic_category();
    v28 = v30;
    v30 = 0;
    sub_1C61D2548(&v28, &v29);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = &v29;
    else
      v21 = (std::string *)v29.__r_.__value_.__r.__words[0];
    __p[0] = 0;
    __p[1] = 0;
    v41 = 0;
    LODWORD(v32) = 0;
    v36 = 0;
    v37 = 0;
    v31 = (uint64_t)&unk_1E81A7208;
    v39 = __p;
    v38 = 0;
    v34 = 0;
    v35 = 0;
    v33 = 0;
    v42[0] = &off_1E8132A78;
    v42[1] = "failed to parse entry content descriptors: %s";
    v42[2] = v21;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v31, (uint64_t)v42);
    v22 = v39;
    v23 = operator new();
    v43 = 260;
    v42[0] = v22;
    *(_QWORD *)v23 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v42, (_QWORD *)(v23 + 8));
    *(_QWORD *)(v23 + 32) = 22;
    *(_QWORD *)(v23 + 40) = v20;
    *(_BYTE *)(v23 + 48) = 1;
    v31 = (uint64_t)off_1E81A6E70;
    if (v38 == 1 && v33)
      MEMORY[0x1CAA32F9C](v33, 0x1000C8077774924);
    if (SHIBYTE(v41) < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 48) |= 1u;
    *(_QWORD *)a1 = v23;
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (v28)
      (*(void (**)(char *))(*(_QWORD *)v28 + 8))(v28);
    goto LABEL_27;
  }
  v26 = a1;
  v9 = 0;
  v10 = v8 - 1;
  do
  {
    ULEB128 = llvm::DataExtractor::getULEB128(a2, (uint64_t *)a3, &v30);
    v12 = llvm::DataExtractor::getULEB128(a2, (uint64_t *)a3, &v30);
    if (!a4)
      goto LABEL_13;
    if (ULEB128 > 4)
    {
      v13 = a4 + 2;
      if (ULEB128 != 5)
      {
        if (ULEB128 != 8193)
          goto LABEL_13;
        v13 = a4 + 3;
      }
LABEL_12:
      *v13 = 1;
      goto LABEL_13;
    }
    v13 = a4;
    if (ULEB128 == 3)
      goto LABEL_12;
    v13 = a4 + 1;
    if (ULEB128 == 4)
      goto LABEL_12;
LABEL_13:
    v14 = v45;
    if (v45 >= (unint64_t)HIDWORD(v45))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, (uint64_t)v46, v45 + 1, 8);
      v14 = v45;
    }
    v9 |= ULEB128 == 1;
    v44[v14] = ULEB128 | ((unint64_t)v12 << 32);
    v15 = (v45 + 1);
    LODWORD(v45) = v45 + 1;
    if (!v10)
      break;
    --v10;
  }
  while (!v30);
  a1 = v26;
  if (v30)
    goto LABEL_32;
  if ((v9 & 1) == 0)
    goto LABEL_26;
  *(_BYTE *)(v26 + 48) &= ~1u;
  v16 = (void *)(v26 + 16);
  *(_QWORD *)v26 = v26 + 16;
  *(_QWORD *)(v26 + 8) = 0x400000000;
  if (&v44 != (_QWORD **)v26 && (_DWORD)v15)
  {
    if (v44 != v46)
    {
      *(_QWORD *)v26 = v44;
      v17 = HIDWORD(v45);
      *(_DWORD *)(v26 + 8) = v15;
      *(_DWORD *)(v26 + 12) = v17;
      v44 = v46;
      HIDWORD(v45) = 0;
      goto LABEL_48;
    }
    if (v15 < 5)
    {
      v25 = v46;
      v24 = v15;
LABEL_46:
      memcpy(v16, v25, 8 * v24);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v26, v26 + 16, v15, 8);
      v24 = v45;
      if ((_DWORD)v45)
      {
        v25 = v44;
        v16 = *(void **)v26;
        goto LABEL_46;
      }
    }
    *(_DWORD *)(v26 + 8) = v15;
LABEL_48:
    LODWORD(v45) = 0;
  }
LABEL_27:
  if (v44 != v46)
    free(v44);
  result = v30;
  if (v30)
    return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v30 + 8))(v30);
  return result;
}

void sub_1C54A0830(uint64_t a1, unint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  __int128 *v27;
  unint64_t v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  BOOL v41;
  BOOL v42;
  __int128 v43;
  __int128 v44;
  __int128 *v45;
  int v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 *v65;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  __int128 *v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  int64_t v79;
  int64_t v80;
  int64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  _OWORD *v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v121;
  __int128 *v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  char v127;
  __int128 v128;
  __int128 v129;
  __int128 *v130;
  __int128 *v131;
  uint64_t v132;
  _OWORD *v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;

uint64_t sub_1C54A113C(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  char v28;
  __int128 v29;
  char v30;
  __int128 v31;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v10 = *((_QWORD *)a1 + 4);
      v11 = *a1;
      v12 = a1[1];
      v13 = *((_BYTE *)a3 + 32);
      v14 = a3[1];
      *a1 = *a3;
      a1[1] = v14;
      *((_BYTE *)a1 + 32) = v13;
    }
    else
    {
      v25 = *((_QWORD *)a1 + 4);
      v26 = *a1;
      v27 = a1[1];
      v28 = *((_BYTE *)a2 + 32);
      v29 = a2[1];
      *a1 = *a2;
      a1[1] = v29;
      *((_BYTE *)a1 + 32) = v28;
      *a2 = v26;
      a2[1] = v27;
      *((_BYTE *)a2 + 32) = v25;
      result = (*a4)(a3, a2);
      if (!(_DWORD)result)
        return result;
      v10 = *((_QWORD *)a2 + 4);
      v11 = *a2;
      v12 = a2[1];
      v30 = *((_BYTE *)a3 + 32);
      v31 = a3[1];
      *a2 = *a3;
      a2[1] = v31;
      *((_BYTE *)a2 + 32) = v30;
    }
    *a3 = v11;
    a3[1] = v12;
    *((_BYTE *)a3 + 32) = v10;
  }
  else if ((_DWORD)result)
  {
    v15 = *((_QWORD *)a2 + 4);
    v16 = *a2;
    v17 = a2[1];
    v18 = *((_BYTE *)a3 + 32);
    v19 = a3[1];
    *a2 = *a3;
    a2[1] = v19;
    *((_BYTE *)a2 + 32) = v18;
    *a3 = v16;
    a3[1] = v17;
    *((_BYTE *)a3 + 32) = v15;
    result = (*a4)(a2, a1);
    if ((_DWORD)result)
    {
      v20 = *((_QWORD *)a1 + 4);
      v21 = *a1;
      v22 = a1[1];
      v23 = *((_BYTE *)a2 + 32);
      v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      *((_BYTE *)a1 + 32) = v23;
      *a2 = v21;
      a2[1] = v22;
      *((_BYTE *)a2 + 32) = v20;
    }
  }
  return result;
}

BOOL sub_1C54A1274(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  char v12;
  __int128 v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = (__int128 *)(a2 - 40);
      if (!(*a3)((__int128 *)(a2 - 40), (__int128 *)a1))
        return 1;
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(_OWORD *)a1;
      v11 = *(_OWORD *)(a1 + 16);
      v12 = *(_BYTE *)(a2 - 8);
      v13 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *v8;
      *(_OWORD *)(a1 + 16) = v13;
      *(_BYTE *)(a1 + 32) = v12;
      *v8 = v10;
      *(_OWORD *)(a2 - 24) = v11;
      result = 1;
      *(_BYTE *)(a2 - 8) = v9;
      return result;
    case 3uLL:
      sub_1C54A113C((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a2 - 40), a3);
      return 1;
    case 4uLL:
      sub_1C54A1468(a1, a1 + 40, a1 + 80, a2 - 40, a3);
      return 1;
    case 5uLL:
      sub_1C54A1550(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40, a3);
      return 1;
    default:
      v14 = (__int128 *)(a1 + 80);
      sub_1C54A113C((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80), a3);
      v15 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((__int128 *)v15, v14))
    {
      v18 = *(_OWORD *)(v15 + 16);
      v24 = *(_OWORD *)v15;
      v25 = v18;
      v26 = *(_QWORD *)(v15 + 32);
      v19 = v16;
      while (1)
      {
        v20 = a1 + v19;
        v21 = *(_OWORD *)(a1 + v19 + 96);
        *(_OWORD *)(v20 + 120) = *(_OWORD *)(a1 + v19 + 80);
        *(_OWORD *)(v20 + 136) = v21;
        *(_BYTE *)(v20 + 152) = *(_BYTE *)(a1 + v19 + 112);
        if (v19 == -80)
          break;
        v19 -= 40;
        if (((*a3)(&v24, (__int128 *)(v20 + 40)) & 1) == 0)
        {
          v22 = a1 + v19 + 120;
          goto LABEL_12;
        }
      }
      v22 = a1;
LABEL_12:
      v23 = v25;
      *(_OWORD *)v22 = v24;
      *(_OWORD *)(v22 + 16) = v23;
      *(_BYTE *)(v22 + 32) = v26;
      if (++v17 == 8)
        return v15 + 40 == a2;
    }
    v14 = (__int128 *)v15;
    v16 += 40;
    v15 += 40;
    if (v15 == a2)
      return 1;
  }
}

__n128 sub_1C54A1468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  char v23;
  __int128 v24;

  sub_1C54A113C((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5);
  if ((*a5)((__int128 *)a4, (__int128 *)a3))
  {
    v11 = *(_QWORD *)(a3 + 32);
    v12 = *(_OWORD *)a3;
    v13 = *(_OWORD *)(a3 + 16);
    v14 = *(_BYTE *)(a4 + 32);
    v15 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v15;
    *(_BYTE *)(a3 + 32) = v14;
    *(_OWORD *)a4 = v12;
    *(_OWORD *)(a4 + 16) = v13;
    *(_BYTE *)(a4 + 32) = v11;
    if ((*a5)((__int128 *)a3, (__int128 *)a2))
    {
      v16 = *(_QWORD *)(a2 + 32);
      v17 = *(_OWORD *)a2;
      v18 = *(_OWORD *)(a2 + 16);
      v19 = *(_BYTE *)(a3 + 32);
      v20 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v20;
      *(_BYTE *)(a2 + 32) = v19;
      *(_OWORD *)a3 = v17;
      *(_OWORD *)(a3 + 16) = v18;
      *(_BYTE *)(a3 + 32) = v16;
      if ((*a5)((__int128 *)a2, (__int128 *)a1))
      {
        v21 = *(_QWORD *)(a1 + 32);
        result = *(__n128 *)a1;
        v22 = *(_OWORD *)(a1 + 16);
        v23 = *(_BYTE *)(a2 + 32);
        v24 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v24;
        *(_BYTE *)(a1 + 32) = v23;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v22;
        *(_BYTE *)(a2 + 32) = v21;
      }
    }
  }
  return result;
}

__n128 sub_1C54A1550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  __n128 v12;
  __n128 result;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  __n128 v25;
  __int128 v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  char v31;
  __int128 v32;

  v12 = sub_1C54A1468(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    v14 = *(_QWORD *)(a4 + 32);
    v15 = *(_OWORD *)a4;
    v16 = *(_OWORD *)(a4 + 16);
    v17 = *(_BYTE *)(a5 + 32);
    v18 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v18;
    *(_BYTE *)(a4 + 32) = v17;
    *(_OWORD *)a5 = v15;
    *(_OWORD *)(a5 + 16) = v16;
    *(_BYTE *)(a5 + 32) = v14;
    if ((*a6)((__int128 *)a4, (__int128 *)a3))
    {
      v19 = *(_QWORD *)(a3 + 32);
      v20 = *(_OWORD *)a3;
      v21 = *(_OWORD *)(a3 + 16);
      v22 = *(_BYTE *)(a4 + 32);
      v23 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v23;
      *(_BYTE *)(a3 + 32) = v22;
      *(_OWORD *)a4 = v20;
      *(_OWORD *)(a4 + 16) = v21;
      *(_BYTE *)(a4 + 32) = v19;
      if ((*a6)((__int128 *)a3, (__int128 *)a2))
      {
        v24 = *(_QWORD *)(a2 + 32);
        v25 = *(__n128 *)a2;
        v26 = *(_OWORD *)(a2 + 16);
        v27 = *(_BYTE *)(a3 + 32);
        v28 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v28;
        *(_BYTE *)(a2 + 32) = v27;
        *(__n128 *)a3 = v25;
        *(_OWORD *)(a3 + 16) = v26;
        *(_BYTE *)(a3 + 32) = v24;
        if ((*a6)((__int128 *)a2, (__int128 *)a1))
        {
          v29 = *(_QWORD *)(a1 + 32);
          result = *(__n128 *)a1;
          v30 = *(_OWORD *)(a1 + 16);
          v31 = *(_BYTE *)(a2 + 32);
          v32 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v32;
          *(_BYTE *)(a1 + 32) = v31;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v30;
          *(_BYTE *)(a2 + 32) = v29;
        }
      }
    }
  }
  return result;
}

uint64_t llvm::DWARFLocationTable::visitAbsoluteLocationList(uint64_t a1, uint64_t a2, __int128 *a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v7;
  _QWORD *v8;
  void (*v9)(void);
  uint64_t result;
  uint64_t v11;
  _QWORD v12[2];
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[3];
  _QWORD *v18;
  __int128 v19;
  uint64_t v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v16[0] = a5;
  v16[1] = a6;
  v13 = *a3;
  v14 = *((_QWORD *)a3 + 2);
  v15 = a2;
  v7 = (_QWORD *)a4[3];
  if (!v7)
  {
    v18 = 0;
    v19 = *a3;
    v20 = *((_QWORD *)a3 + 2);
    v8 = v21;
    goto LABEL_5;
  }
  if (v7 != a4)
  {
    v18 = (_QWORD *)a4[3];
    a4[3] = 0;
    v19 = v13;
    v20 = v14;
    v8 = v21;
    goto LABEL_7;
  }
  v18 = v17;
  (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v17);
  v7 = v18;
  v19 = v13;
  v20 = v14;
  v8 = v21;
  if (!v18)
  {
LABEL_5:
    v22 = 0;
    goto LABEL_14;
  }
LABEL_7:
  if (v7 != v17)
  {
    v22 = v7;
    v18 = 0;
    goto LABEL_14;
  }
  v22 = v21;
  (*(void (**)(_QWORD *, _BYTE *))(v17[0] + 24))(v17, v21);
  if (v18 == v17)
  {
    v9 = *(void (**)(void))(v17[0] + 32);
  }
  else
  {
    if (!v18)
      goto LABEL_14;
    v9 = *(void (**)(void))(*v18 + 40);
  }
  v9();
LABEL_14:
  v12[0] = &v19;
  v12[1] = v16;
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t (*)(uint64_t *, uint64_t), _QWORD *))(*(_QWORD *)a1 + 16))(a1, &v15, sub_1C54A2958, v12);
  if (v22 == v21)
  {
    v11 = 4;
  }
  else
  {
    if (!v22)
      return result;
    v11 = 5;
    v8 = v22;
  }
  return (*(uint64_t (**)(_QWORD *))(*v8 + 8 * v11))(v8);
}

_QWORD *llvm::DWARFDebugLoc::dump(_QWORD *result, llvm::raw_ostream *this, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  const char *v12;
  size_t v13;
  char v14;
  void *v15;
  char v16;
  _BYTE *v17;
  uint64_t v18;
  __int128 v19;
  char v20;
  unint64_t v21;
  __int128 v22;
  char v23;
  uint64_t v24[2];
  _QWORD v25[11];
  _QWORD v26[13];

  v11 = (uint64_t)result;
  v26[11] = *MEMORY[0x1E0C80C00];
  v24[0] = a6;
  v24[1] = a7;
  if ((_BYTE)a7)
  {
    LOBYTE(v22) = 0;
    v23 = 0;
    sub_1C624C4A4((uint64_t)v26, a5);
    LODWORD(v18) = 12;
    llvm::DWARFLocationTable::dumpLocationList(v11, v24, this, &v22, a3, a4, 0, (uint64_t)v26, v18);
    return sub_1C624C568(v26);
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v21 = 0;
    v14 = 1;
    do
    {
      if (*(_QWORD *)(v11 + 16) <= v21)
        break;
      v15 = (void *)*((_QWORD *)this + 4);
      if (v13 <= *((_QWORD *)this + 3) - (_QWORD)v15)
      {
        if ((v14 & 1) == 0)
        {
          memcpy(v15, v12, v13);
          *((_QWORD *)this + 4) += v13;
        }
      }
      else
      {
        llvm::raw_ostream::write(this, v12, v13);
      }
      LOBYTE(v19) = 0;
      v20 = 0;
      sub_1C624C4A4((uint64_t)v25, a5);
      LODWORD(v18) = 12;
      v16 = llvm::DWARFLocationTable::dumpLocationList(v11, (uint64_t *)&v21, this, &v19, a3, a4, 0, (uint64_t)v25, v18);
      result = sub_1C624C568(v25);
      v17 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v17 >= *((_QWORD *)this + 3))
      {
        result = llvm::raw_ostream::write(this, 10);
      }
      else
      {
        *((_QWORD *)this + 4) = v17 + 1;
        *v17 = 10;
      }
      v14 = 0;
      v12 = "\n";
      v13 = 1;
    }
    while ((v16 & 1) != 0);
  }
  return result;
}

uint64_t llvm::DWARFDebugLoc::visitLocationList@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, char *)@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  unint64_t RelocatedValue;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 v15;
  unsigned int v16;
  uint64_t result;
  char v18[8];
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v26 = *a2;
  v27 = 0;
  v10 = (_QWORD *)(a1 + 8);
  do
  {
    v25 = 0;
    RelocatedValue = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)v10, *(unsigned __int8 *)(a1 + 25), &v26, 0, &v27);
    v12 = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)v10, *(unsigned __int8 *)(a1 + 25), &v26, &v25, &v27);
    v22 = &v24;
    v23 = xmmword_1C6612EF0;
    if (RelocatedValue | v12)
    {
      v13 = 0xFFFFFFFFLL;
      if (*(_BYTE *)(a1 + 25) != 4)
        v13 = -1;
      if (RelocatedValue == v13)
      {
        v18[0] = 6;
        v19 = v12;
        v21 = v25;
      }
      else
      {
        v18[0] = 4;
        v19 = RelocatedValue;
        v20 = v12;
        v21 = v25;
        v16 = sub_1C63871E8((uint64_t)v10, &v26, &v27);
        sub_1C624FC70(v10, &v26, &v22, v16);
      }
    }
    else
    {
      v18[0] = 0;
    }
    if (v27)
    {
      *a5 = v27;
      v27 = 0;
      v14 = 1;
    }
    else
    {
      v15 = a3(a4, v18);
      if ((v15 & (v18[0] != 0)) != 0)
        v14 = 0;
      else
        v14 = 3;
    }
    if (v22 != &v24)
      free(v22);
  }
  while (!v14);
  if (v14 == 3)
  {
    *a2 = v26;
    *a5 = 0;
  }
  result = v27;
  if (v27)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  return result;
}

void sub_1C54A1BB0(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v7;
  void **v8;
  uint64_t v9;
  void (**v10)(llvm::raw_ostream *__hidden);
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  void **v18;
  void *__p[2];
  uint64_t v20;
  _QWORD v21[4];
  __int16 v22;

  __p[0] = 0;
  __p[1] = 0;
  v20 = 0;
  v11 = 0;
  v15 = 0;
  v16 = 0;
  v10 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v18 = __p;
  v17 = 0;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  v7 = *a4;
  v21[0] = &unk_1E8169D00;
  v21[1] = "LLE of kind %x not supported";
  v21[2] = v7;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v10, (uint64_t)v21);
  v8 = v18;
  v9 = operator new();
  v22 = 260;
  v21[0] = v8;
  *(_QWORD *)v9 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v21, (_QWORD *)(v9 + 8));
  *(_QWORD *)(v9 + 32) = a2;
  *(_QWORD *)(v9 + 40) = a3;
  *(_BYTE *)(v9 + 48) = 1;
  *a1 = v9;
  v10 = off_1E81A6E70;
  if (v17 == 1 && v12)
    MEMORY[0x1CAA32F9C](v12, 0x1000C8077774924);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
}

llvm::raw_ostream *llvm::DWARFDebugLoclists::dumpRawEntry(uint64_t a1, _QWORD *a2, llvm::raw_ostream *this, unsigned int a4, __int128 *a5, llvm::raw_ostream *a6)
{
  _BYTE *v12;
  char *v13;
  llvm::raw_ostream *result;
  unsigned int v15;
  int v16;
  int v17;
  _WORD *v18;
  uint64_t (***v19)(llvm::format_object_base *__hidden);
  _BYTE *v20;
  _QWORD v21[2];
  int v22;
  __int16 v23;
  char v24;
  uint64_t (**v25)(llvm::format_object_base *__hidden);
  const char *v26;
  uint64_t v27;
  char *v28;
  _QWORD v29[12];

  v29[11] = *MEMORY[0x1E0C80C00];
  v12 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v12)
  {
    llvm::raw_ostream::write(this, "\n", 1uLL);
  }
  else
  {
    *v12 = 10;
    ++*((_QWORD *)this + 4);
  }
  llvm::raw_ostream::indent(this, a4);
  v13 = llvm::dwarf::LocListEncodingString((llvm::dwarf *)*(unsigned __int8 *)a2);
  v25 = &off_1E816A020;
  v26 = "%-*s(";
  v27 = 23;
  v28 = v13;
  result = llvm::raw_ostream::operator<<(this, (uint64_t)&v25);
  v15 = *(unsigned __int8 *)a2;
  if (v15 > 8)
    goto LABEL_11;
  v16 = 2 * *(unsigned __int8 *)(a1 + 25) + 2;
  v17 = 1 << v15;
  if ((v17 & 0x19C) != 0)
  {
    v25 = (uint64_t (**)(llvm::format_object_base *__hidden))a2[1];
    v26 = 0;
    LODWORD(v27) = v16;
    WORD2(v27) = 1;
    BYTE6(v27) = 1;
    llvm::raw_ostream::operator<<(this, (uint64_t)&v25);
    v18 = (_WORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v18 > 1uLL)
    {
      *v18 = 8236;
      *((_QWORD *)this + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(this, ", ", 2uLL);
    }
    v21[0] = a2[2];
    v21[1] = 0;
    v22 = v16;
    v23 = 1;
    v24 = 1;
    v19 = (uint64_t (***)(llvm::format_object_base *__hidden))v21;
  }
  else
  {
    if ((v17 & 0x42) == 0)
      goto LABEL_11;
    v25 = (uint64_t (**)(llvm::format_object_base *__hidden))a2[1];
    v26 = 0;
    LODWORD(v27) = v16;
    WORD2(v27) = 1;
    BYTE6(v27) = 1;
    v19 = &v25;
  }
  result = llvm::raw_ostream::operator<<(this, (uint64_t)v19);
LABEL_11:
  v20 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v20 >= *((_QWORD *)this + 3))
  {
    result = llvm::raw_ostream::write(this, 41);
  }
  else
  {
    *((_QWORD *)this + 4) = v20 + 1;
    *v20 = 41;
  }
  if (*(unsigned __int8 *)a2 - 6 <= 2)
  {
    sub_1C624C4A4((uint64_t)v29, a5);
    llvm::DWARFFormValue::dumpAddressSection(a6, this, (uint64_t)v29, a2[3]);
    return (llvm::raw_ostream *)sub_1C624C568(v29);
  }
  return result;
}

double llvm::DWARFDebugLoclists::dumpRange(uint64_t a1, unint64_t a2, uint64_t a3, llvm::raw_ostream *this, uint64_t a5, uint64_t a6, __int128 *a7)
{
  unint64_t v8;
  const char *v14;
  size_t v15;
  char v16;
  void *v17;
  char v18;
  double result;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  char v24;
  unint64_t v25;
  _QWORD v26[12];

  v26[11] = *MEMORY[0x1E0C80C00];
  v8 = a3 + a2;
  if (__CFADD__(a3, a2) || *(_QWORD *)(a1 + 16) <= v8 - 1)
  {
    v21 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v21) > 0x12)
    {
      *(_DWORD *)(v21 + 15) = 174417774;
      result = *(double *)"Invalid dump range\n";
      *(_OWORD *)v21 = *(_OWORD *)"Invalid dump range\n";
      *((_QWORD *)this + 4) += 19;
    }
    else
    {
      llvm::raw_ostream::write(this, "Invalid dump range\n", 0x13uLL);
    }
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v25 = a2;
    v16 = 1;
    do
    {
      if (v25 >= v8)
        break;
      v17 = (void *)*((_QWORD *)this + 4);
      if (v15 <= *((_QWORD *)this + 3) - (_QWORD)v17)
      {
        if ((v16 & 1) == 0)
        {
          memcpy(v17, v14, v15);
          *((_QWORD *)this + 4) += v15;
        }
      }
      else
      {
        llvm::raw_ostream::write(this, v14, v15);
      }
      LOBYTE(v23) = 0;
      v24 = 0;
      sub_1C624C4A4((uint64_t)v26, a7);
      LODWORD(v22) = 12;
      v18 = llvm::DWARFLocationTable::dumpLocationList(a1, (uint64_t *)&v25, this, &v23, a5, a6, 0, (uint64_t)v26, v22);
      sub_1C624C568(v26);
      v20 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v20 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 10);
      }
      else
      {
        *((_QWORD *)this + 4) = v20 + 1;
        *v20 = 10;
      }
      v16 = 0;
      v14 = "\n";
      v15 = 1;
    }
    while ((v18 & 1) != 0);
  }
  return result;
}

void sub_1C54A2120(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;

  v4 = a1[1];
  if (v4 < a2)
    goto LABEL_2;
  if (v4 != a2)
  {
    if (v4 > a2)
    {
LABEL_6:
      a1[1] = a2;
      return;
    }
LABEL_2:
    if (a1[2] < a2)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, a2, 1);
      v4 = a1[1];
    }
    if (v4 != a2)
      bzero((void *)(*a1 + v4), a2 - v4);
    goto LABEL_6;
  }
}

void sub_1C54A21A4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C54A21B8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8169FD8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C54A21EC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8169FD8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C54A2208@<X0>(uint64_t a1@<X0>, int *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return llvm::DWARFUnit::getAddrOffsetSectionItem(result, *a2, (uint64_t)a3);
  *a3 = 0;
  a3[16] = 0;
  return result;
}

uint64_t sub_1C54A2224(uint64_t a1, unsigned __int8 *a2)
{
  _BYTE *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  void *v16;
  llvm::raw_ostream *v17;
  uint64_t v18;
  unsigned __int8 v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  llvm::raw_ostream *v22;
  uint64_t v23;
  BOOL v24;
  char v25;
  llvm::DWARFUnit **v26;
  llvm::MCRegisterInfo *v27;
  llvm::DWARFUnit *v28;
  _QWORD v29[2];
  BOOL v30;
  char v31;
  char v32;
  __int16 v33;
  __int128 v34[5];
  _QWORD v35[11];
  _QWORD v36[11];
  uint64_t v37[3];
  char v38;
  uint64_t *v39;
  uint64_t v40;
  char v41;
  char v42;
  __int128 v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE **)(a1 + 16);
  sub_1C54A25AC((uint64_t)v37, *(_QWORD *)a1, (uint64_t)a2);
  v5 = v42;
  v6 = *(_QWORD *)(a1 + 8);
  if ((v42 & 1) != 0 || *(_BYTE *)(v6 + 21))
  {
    v11 = *(_QWORD *)(a1 + 24);
    v12 = **(unsigned int **)(a1 + 32);
    sub_1C624C4A4((uint64_t)v36, (__int128 *)v6);
    (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v4 + 24))(v4, a2, v11, v12, v36, *(_QWORD *)(a1 + 40));
    sub_1C624C568(v36);
    v5 = v42;
  }
  if ((v5 & 1) != 0 || !v41)
  {
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_6;
  }
  v13 = *(llvm::raw_ostream **)(a1 + 24);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if (*((_BYTE **)v13 + 3) == v14)
  {
    llvm::raw_ostream::write(v13, "\n", 1uLL);
  }
  else
  {
    *v14 = 10;
    ++*((_QWORD *)v13 + 4);
  }
  llvm::raw_ostream::indent(*(llvm::raw_ostream **)(a1 + 24), **(_DWORD **)(a1 + 32));
  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 21))
  {
    v15 = *(llvm::raw_ostream **)(a1 + 24);
    v16 = (void *)*((_QWORD *)v15 + 4);
    if (*((_QWORD *)v15 + 3) - (_QWORD)v16 > 0xCuLL)
    {
      qmemcpy(v16, "          => ", 13);
      *((_QWORD *)v15 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v15, "          => ", 0xDuLL);
    }
  }
  sub_1C624C4A4((uint64_t)&v43, *(__int128 **)(a1 + 8));
  v44 = 0;
  v17 = *(llvm::raw_ostream **)(a1 + 24);
  if (v38)
  {
    v19 = v4[25];
    sub_1C624C4A4((uint64_t)v35, &v43);
    llvm::DWARFAddressRange::dump(v37, v17, v19, (uint64_t)v35, *(llvm::raw_ostream **)(a1 + 40));
    sub_1C624C568(v35);
  }
  else
  {
    v18 = *((_QWORD *)v17 + 4);
    if ((unint64_t)(*((_QWORD *)v17 + 3) - v18) > 8)
    {
      *(_BYTE *)(v18 + 8) = 62;
      *(_QWORD *)v18 = *(_QWORD *)"<default>";
      *((_QWORD *)v17 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 24), "<default>", 9uLL);
    }
  }
  sub_1C624C568(&v43);
  if ((v42 & 1) != 0)
  {
LABEL_6:
    v7 = v37[0];
    v37[0] = 0;
    *(_QWORD *)&v34[0] = v7;
    sub_1C4D62BD4((char **)v34, (char **)&v43);
    if (*(_QWORD *)&v34[0])
      (*(void (**)(_QWORD))(**(_QWORD **)&v34[0] + 8))(*(_QWORD *)&v34[0]);
  }
LABEL_8:
  v8 = *a2;
  if (v8 > 6 || ((1 << v8) & 0x43) == 0)
  {
    v20 = *(llvm::raw_ostream **)(a1 + 24);
    v21 = (_WORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 1uLL)
    {
      *v21 = 8250;
      *((_QWORD *)v20 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v20, ": ", 2uLL);
    }
    v22 = *(llvm::raw_ostream **)(a1 + 24);
    sub_1C624C4A4((uint64_t)v34, *(__int128 **)(a1 + 8));
    v23 = *((_QWORD *)a2 + 5);
    v24 = v4[24] != 0;
    v25 = v4[25];
    v26 = *(llvm::DWARFUnit ***)(a1 + 56);
    v27 = **(llvm::MCRegisterInfo ***)(a1 + 48);
    v28 = *v26;
    v29[0] = *((_QWORD *)a2 + 4);
    v29[1] = v23;
    v30 = v24;
    v31 = v25;
    v32 = v25;
    v33 = 0;
    sub_1C624C4A4((uint64_t)&v43, v34);
    llvm::DWARFExpression::print((uint64_t)v29, v22, &v43, v27, v28, 0);
    sub_1C624C568(&v43);
    sub_1C624C568(v34);
  }
  if ((v42 & 1) != 0)
  {
    v9 = v37[0];
    v37[0] = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  else if (v41 && v39 != &v40)
  {
    free(v39);
  }
  return 1;
}

void sub_1C54A25AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

void sub_1C54A25EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, __int128 a14, __int128 a15, void *__dst, __int128 a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v40;
  unsigned __int8 *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  __int128 v51;
  const void **v52;
  size_t v53;
  const void **v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _QWORD *v58;
  unint64_t v59;

  *(_DWORD *)(v45 - 72) = *((_QWORD *)v41 + 1);
  v46 = v42[6];
  if (v46)
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v46 + 48))(&v56, v46, v45 - 72);
    *(_OWORD *)v42 = v56;
    v47 = v57;
    v42[2] = v57;
    if (v47)
    {
      *(_BYTE *)(v40 + 72) &= ~1u;
      *(_BYTE *)v40 = 0;
      *(_BYTE *)(v40 + 64) = 0;
    }
    else
    {
      v48 = *((_QWORD *)v41 + 1);
      v49 = *v41;
      v50 = operator new();
      *(_QWORD *)v50 = &off_1E8169F88;
      *(_DWORD *)(v50 + 8) = v48;
      *(_DWORD *)(v50 + 12) = v49;
      *(_BYTE *)(v40 + 72) |= 1u;
      *(_QWORD *)v40 = v50;
    }
  }
  else
  {
    sub_1C485C2F0();
    v54 = v52;
    llvm::SmallVectorBase<unsigned long long>::grow_pod(v43, v42, v44, 1);
    v53 = *((_QWORD *)v41 + 5);
    if (v53)
      memcpy(v58, *v54, v53);
    v59 = v44;
    *(_BYTE *)(v40 + 72) &= ~1u;
    v51 = v57;
    *(_OWORD *)v40 = v56;
    *(_OWORD *)(v40 + 16) = v51;
    *(_QWORD *)(v40 + 32) = v40 + 56;
    *(_OWORD *)(v40 + 40) = v55;
    sub_1C6153FB0(v40 + 32, v43);
    *(_BYTE *)(v40 + 64) = 1;
    if (v58 != v42)
      free(v58);
  }
}

uint64_t sub_1C54A2958(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  size_t v4;
  uint64_t *v5;
  size_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v14[2];
  void *v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  _OWORD v19[2];
  void *__src;
  size_t __n;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  sub_1C54A25AC((uint64_t)v19, *a1, a2);
  if ((v24 & 1) == 0)
  {
    if (!v23)
    {
      v7 = 1;
      goto LABEL_17;
    }
    v3 = a1[1];
    v18 = 0;
    v14[0] = v19[0];
    v14[1] = v19[1];
    v15 = &v17;
    v16 = xmmword_1C6612EF0;
    v4 = __n;
    if (!__n)
    {
LABEL_8:
      v7 = sub_1C54A2B20(*(uint64_t (**)(uint64_t, _QWORD *))v3, *(_QWORD *)(v3 + 8), (uint64_t *)v14);
      if ((v18 & 1) == 0)
      {
        v8 = v15;
        if (v15 == &v17)
          goto LABEL_17;
LABEL_13:
        free(v8);
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    if (__n >= 5)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v15, &v17, __n, 1);
      v6 = __n;
      if (!__n)
        goto LABEL_7;
      v5 = (uint64_t *)v15;
    }
    else
    {
      v5 = &v17;
      v6 = __n;
    }
    memcpy(v5, __src, v6);
LABEL_7:
    *(_QWORD *)&v16 = v4;
    goto LABEL_8;
  }
  v9 = a1[1];
  v10 = *(_QWORD *)&v19[0];
  *(_QWORD *)&v19[0] = 0;
  v18 = -1;
  *(_QWORD *)&v14[0] = v10;
  v7 = sub_1C54A2B20(*(uint64_t (**)(uint64_t, _QWORD *))v9, *(_QWORD *)(v9 + 8), (uint64_t *)v14);
  if ((v18 & 1) == 0)
  {
    v8 = v15;
    if (v15 == &v17)
      goto LABEL_17;
    goto LABEL_13;
  }
LABEL_14:
  v11 = *(_QWORD *)&v14[0];
  *(_QWORD *)&v14[0] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
LABEL_17:
  if ((v24 & 1) != 0)
  {
    v12 = *(_QWORD *)&v19[0];
    *(_QWORD *)&v19[0] = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  else if (v23 && __src != &v22)
  {
    free(__src);
  }
  return v7;
}

uint64_t sub_1C54A2B20(uint64_t (*a1)(uint64_t, _QWORD *), uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];
  void *v9;
  _BYTE v10[16];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  sub_1C54A2BD8((uint64_t)v8, a3);
  v5 = a1(a2, v8);
  if ((v10[8] & 1) != 0)
  {
    v6 = v8[0];
    v8[0] = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  else if (v9 != v10)
  {
    free(v9);
  }
  return v5;
}

uint64_t sub_1C54A2BD8(uint64_t result, uint64_t *a2)
{
  char v2;
  __int128 v3;
  uint64_t v4;

  v2 = *((_BYTE *)a2 + 64);
  *(_BYTE *)(result + 64) = *(_BYTE *)(result + 64) & 0xFE | v2 & 1;
  if ((v2 & 1) != 0)
  {
    v4 = *a2;
    *a2 = 0;
    *(_QWORD *)result = v4;
  }
  else
  {
    v3 = *((_OWORD *)a2 + 1);
    *(_OWORD *)result = *(_OWORD *)a2;
    *(_OWORD *)(result + 16) = v3;
    *(_QWORD *)(result + 32) = result + 56;
    *(_OWORD *)(result + 40) = xmmword_1C6612EF0;
    if (a2[5])
      return sub_1C6153FB0(result + 32, (uint64_t)(a2 + 4));
  }
  return result;
}

uint64_t llvm::DWARFDebugMacro::MacroHeader::getDwarfFormat(llvm::DWARFDebugMacro::MacroHeader *this)
{
  return *((_BYTE *)this + 2) & 1;
}

uint64_t llvm::DWARFDebugMacro::MacroHeader::getOffsetByteSize(llvm::DWARFDebugMacro::MacroHeader *this)
{
  if ((*((_BYTE *)this + 2) & 1) != 0)
    return 8;
  else
    return 4;
}

llvm::raw_ostream *llvm::DWARFDebugMacro::MacroHeader::dumpMacroHeader(llvm::DWARFDebugMacro::MacroHeader *this, llvm::raw_ostream *a2)
{
  uint64_t v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  uint64_t v7;
  llvm::raw_ostream *result;
  _DWORD *v9;
  const char *v10;
  char v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];

  v4 = *(unsigned __int16 *)this;
  v15 = &unk_1E8169900;
  v16 = "macro header: version = 0x%04hx";
  v17 = v4;
  v5 = llvm::raw_ostream::operator<<(a2, (uint64_t)&v15);
  v6 = *((unsigned __int8 *)this + 2);
  v19[0] = &unk_1E8145938;
  v19[1] = ", flags = 0x%02hhx";
  v19[2] = v6;
  llvm::raw_ostream::operator<<(v5, (uint64_t)v19);
  v7 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v7) > 0xA)
  {
    *(_DWORD *)(v7 + 7) = 540876916;
    *(_QWORD *)v7 = *(_QWORD *)", format = ";
    v9 = (_DWORD *)(*((_QWORD *)a2 + 4) + 11);
    *((_QWORD *)a2 + 4) = v9;
    result = a2;
  }
  else
  {
    result = llvm::raw_ostream::write(a2, ", format = ", 0xBuLL);
    v9 = (_DWORD *)*((_QWORD *)result + 4);
  }
  if ((*((_BYTE *)this + 2) & 1) != 0)
    v10 = "DWARF64";
  else
    v10 = "DWARF32";
  if (*((_QWORD *)result + 3) - (_QWORD)v9 > 6uLL)
  {
    *v9 = *(_DWORD *)v10;
    *(_DWORD *)((char *)v9 + 3) = *(_DWORD *)(v10 + 3);
    *((_QWORD *)result + 4) += 7;
  }
  else
  {
    result = llvm::raw_ostream::write(result, v10, 7uLL);
  }
  v11 = *((_BYTE *)this + 2);
  if ((v11 & 2) != 0)
  {
    v12 = *((_QWORD *)this + 1);
    v15 = &unk_1E81698E0;
    v16 = ", debug_line_offset = 0x%0*llx";
    if ((v11 & 1) != 0)
      v13 = 16;
    else
      v13 = 8;
    LODWORD(v17) = v13;
    v18 = v12;
    result = llvm::raw_ostream::operator<<(a2, (uint64_t)&v15);
  }
  v14 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v14)
    return llvm::raw_ostream::write(a2, "\n", 1uLL);
  *v14 = 10;
  ++*((_QWORD *)a2 + 4);
  return result;
}

uint64_t llvm::DWARFDebugMacro::dump(uint64_t this, llvm::raw_ostream *a2)
{
  unsigned __int16 *v2;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  _WORD *v13;
  llvm::raw_ostream *v14;
  size_t v15;
  const char *v16;
  size_t v17;
  llvm::raw_ostream *v18;
  const char *v19;
  size_t v20;
  llvm::raw_ostream *v21;
  llvm::dwarf *v22;
  char *v23;
  size_t v24;
  char *v25;
  size_t v26;
  unsigned int v27;
  uint64_t v28;
  llvm::raw_ostream *v29;
  _QWORD *v30;
  llvm::raw_ostream *v31;
  const char *v32;
  size_t v33;
  llvm::raw_ostream *v34;
  const void *v35;
  unint64_t v36;
  _BYTE *v37;
  int v38;
  uint64_t v39;
  void *v40;
  llvm::raw_ostream *v41;
  uint64_t v42;
  uint64_t v43;
  llvm::raw_ostream *v44;
  uint64_t v45;
  llvm::raw_ostream *v46;
  uint64_t v47;
  unsigned __int16 *v48;
  llvm::raw_ostream *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;

  v2 = *(unsigned __int16 **)this;
  v48 = *(unsigned __int16 **)(this + 8);
  if (*(unsigned __int16 **)this != v48)
  {
    v4 = 0;
    while (1)
    {
      v5 = *((_QWORD *)v2 + 16);
      v49 = (llvm::raw_ostream *)&unk_1E8133270;
      v50 = "0x%08llx:\n";
      v51 = v5;
      this = (uint64_t)llvm::raw_ostream::operator<<(a2, (uint64_t)&v49);
      if (*((_BYTE *)v2 + 136))
        this = (uint64_t)llvm::DWARFDebugMacro::MacroHeader::dumpMacroHeader((llvm::DWARFDebugMacro::MacroHeader *)v2, a2);
      v6 = *((_DWORD *)v2 + 6);
      if (v6)
        break;
LABEL_75:
      v2 += 72;
      if (v2 == v48)
        return this;
    }
    v7 = (unsigned int *)*((_QWORD *)v2 + 2);
    v8 = &v7[6 * v6];
    while (1)
    {
      v9 = *v7;
      if (v4)
      {
        v11 = v9 == 4;
        v10 = v4 - v11;
        v12 = v4 - v11;
        if (v4 != v11)
        {
          do
          {
            v13 = (_WORD *)*((_QWORD *)a2 + 4);
            if (*((_QWORD *)a2 + 3) - (_QWORD)v13 > 1uLL)
            {
              *v13 = 8224;
              *((_QWORD *)a2 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(a2, "  ", 2uLL);
            }
            --v12;
          }
          while (v12);
          v9 = *v7;
        }
      }
      else
      {
        v10 = 0;
      }
      if (v9 == 3)
        v4 = v10 + 1;
      else
        v4 = v10;
      if (*((_BYTE *)v2 + 136))
      {
        llvm::WithColor::WithColor((uint64_t)&v49, (uint64_t)a2, 5, 0);
        v21 = v49;
        v22 = (llvm::dwarf *)*v7;
        if (*v2 > 4u)
          v23 = llvm::dwarf::MacroString(v22);
        else
          v23 = llvm::dwarf::GnuMacroString(v22);
        v25 = v23;
        v26 = v24;
        this = *((_QWORD *)v21 + 4);
        if (v24 <= *((_QWORD *)v21 + 3) - this)
        {
          if (v24)
          {
            this = (uint64_t)memcpy((void *)this, v25, v24);
            *((_QWORD *)v21 + 4) += v26;
          }
          goto LABEL_31;
        }
        v18 = v21;
        v19 = v25;
        v20 = v26;
      }
      else
      {
        llvm::WithColor::WithColor((uint64_t)&v49, (uint64_t)a2, 5, 0);
        v14 = v49;
        v16 = llvm::dwarf::MacinfoString((llvm::dwarf *)*v7);
        v17 = v15;
        this = *((_QWORD *)v14 + 4);
        if (v15 <= *((_QWORD *)v14 + 3) - this)
        {
          if (v15)
          {
            this = (uint64_t)memcpy((void *)this, v16, v15);
            *((_QWORD *)v14 + 4) += v17;
          }
          goto LABEL_31;
        }
        v18 = v14;
        v19 = v16;
        v20 = v17;
      }
      this = (uint64_t)llvm::raw_ostream::write(v18, v19, v20);
LABEL_31:
      if ((_DWORD)v50 != 2)
      {
        if ((_DWORD)v50 == 1 || (this = llvm::WithColor::AutoDetectFunction(v49), (this & 1) != 0))
          this = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)v49 + 32))(v49);
      }
      v27 = *v7;
      if (*v7 > 0xC)
        goto LABEL_55;
      if (((1 << v27) & 0x1866) != 0)
      {
        v28 = *((_QWORD *)a2 + 4);
        if ((unint64_t)(*((_QWORD *)a2 + 3) - v28) > 0xA)
        {
          *(_DWORD *)(v28 + 7) = 540700526;
          *(_QWORD *)v28 = *(_QWORD *)" - lineno: ";
          *((_QWORD *)a2 + 4) += 11;
          v29 = a2;
        }
        else
        {
          v29 = llvm::raw_ostream::write(a2, " - lineno: ", 0xBuLL);
        }
        this = (uint64_t)sub_1C5E21910(v29, *((_QWORD *)v7 + 1), 0, 0, 0);
        v30 = (_QWORD *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v30 <= 7uLL)
        {
          v31 = a2;
          v32 = " macro: ";
          v33 = 8;
          goto LABEL_41;
        }
        *v30 = 0x203A6F7263616D20;
        v47 = *((_QWORD *)a2 + 4) + 8;
        goto LABEL_70;
      }
      if (v27 == 3)
      {
        v43 = *((_QWORD *)a2 + 4);
        if ((unint64_t)(*((_QWORD *)a2 + 3) - v43) > 0xA)
        {
          *(_DWORD *)(v43 + 7) = 540700526;
          *(_QWORD *)v43 = *(_QWORD *)" - lineno: ";
          *((_QWORD *)a2 + 4) += 11;
          v44 = a2;
        }
        else
        {
          v44 = llvm::raw_ostream::write(a2, " - lineno: ", 0xBuLL);
        }
        sub_1C5E21910(v44, *((_QWORD *)v7 + 1), 0, 0, 0);
        v45 = *((_QWORD *)a2 + 4);
        if ((unint64_t)(*((_QWORD *)a2 + 3) - v45) > 9)
        {
          *(_WORD *)(v45 + 8) = 8250;
          *(_QWORD *)v45 = *(_QWORD *)" filenum: ";
          *((_QWORD *)a2 + 4) += 10;
          v46 = a2;
        }
        else
        {
          v46 = llvm::raw_ostream::write(a2, " filenum: ", 0xAuLL);
        }
        this = (uint64_t)sub_1C5E21910(v46, *((_QWORD *)v7 + 2), 0, 0, 0);
        goto LABEL_45;
      }
      if (v27 == 7)
      {
        if ((v2[1] & 1) != 0)
          v38 = 16;
        else
          v38 = 8;
        v39 = *((_QWORD *)v7 + 1);
        v49 = (llvm::raw_ostream *)&unk_1E81698E0;
        v50 = " - import offset: 0x%0*llx";
        LODWORD(v51) = v38;
        v52 = v39;
        this = (uint64_t)llvm::raw_ostream::operator<<(a2, (uint64_t)&v49);
      }
      else
      {
LABEL_55:
        if (v27 == 255)
        {
          v40 = (void *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v40 > 0xCuLL)
          {
            qmemcpy(v40, " - constant: ", 13);
            *((_QWORD *)a2 + 4) += 13;
            v41 = a2;
          }
          else
          {
            v41 = llvm::raw_ostream::write(a2, " - constant: ", 0xDuLL);
          }
          this = (uint64_t)sub_1C5E21910(v41, *((_QWORD *)v7 + 1), 0, 0, 0);
          v42 = *((_QWORD *)a2 + 4);
          if ((unint64_t)(*((_QWORD *)a2 + 3) - v42) <= 8)
          {
            v31 = a2;
            v32 = " string: ";
            v33 = 9;
LABEL_41:
            this = (uint64_t)llvm::raw_ostream::write(v31, v32, v33);
            v34 = (llvm::raw_ostream *)this;
LABEL_42:
            v35 = (const void *)*((_QWORD *)v7 + 2);
            if (v35)
            {
              v36 = strlen(*((const char **)v7 + 2));
              this = *((_QWORD *)v34 + 4);
              if (v36 <= *((_QWORD *)v34 + 3) - this)
              {
                if (v36)
                {
                  this = (uint64_t)memcpy((void *)this, v35, v36);
                  *((_QWORD *)v34 + 4) += v36;
                }
              }
              else
              {
                this = (uint64_t)llvm::raw_ostream::write(v34, (const char *)v35, v36);
              }
            }
            goto LABEL_45;
          }
          *(_BYTE *)(v42 + 8) = 32;
          *(_QWORD *)v42 = *(_QWORD *)" string: ";
          v47 = *((_QWORD *)a2 + 4) + 9;
LABEL_70:
          *((_QWORD *)a2 + 4) = v47;
          v34 = a2;
          goto LABEL_42;
        }
      }
LABEL_45:
      v37 = (_BYTE *)*((_QWORD *)a2 + 4);
      if (*((_BYTE **)a2 + 3) == v37)
      {
        this = (uint64_t)llvm::raw_ostream::write(a2, "\n", 1uLL);
      }
      else
      {
        *v37 = 10;
        ++*((_QWORD *)a2 + 4);
      }
      v7 += 6;
      if (v7 == v8)
        goto LABEL_75;
    }
  }
  return this;
}

uint64_t llvm::DWARFDebugMacro::parseImpl@<X0>(char **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, const char **a6@<X8>)
{
  int v6;
  uint64_t v7;
  char **v8;
  unint64_t v10;
  llvm::DWARFUnit **v11;
  llvm::DWARFUnit **v12;
  llvm::DWARFUnit **v14;
  unsigned int (*v15)(llvm::DWARFUnit **);
  llvm::DWARFUnit *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  llvm::DWARFUnit *v20;
  uint64_t v22;
  llvm::DWARFUnit *v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  BOOL v44;
  unsigned int v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char **v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  unsigned int v62;
  BOOL v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  __int128 v69;
  uint64_t v70;
  _QWORD *v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  int ULEB128;
  int v76;
  unint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t CStrRef;
  llvm::DWARFUnit *v86;
  unsigned int v87;
  const char *v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  BOOL v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  __int128 v97;
  char *v98;
  const std::error_category *v100;
  llvm::DWARFUnit *v101;
  char *v102;
  uint64_t v103;
  int v104;
  _OWORD v106[2];
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  unint64_t v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;

  v6 = a5;
  v7 = a4;
  v8 = a1;
  v10 = 0;
  v117 = *MEMORY[0x1E0C80C00];
  v114 = 0;
  v111 = 0;
  v112 = 0;
  v113 = 0;
  if (a5)
  {
    v10 = *(_QWORD *)(a4 + 8);
    if (v10)
    {
      v11 = *(llvm::DWARFUnit ***)a2;
      v12 = *(llvm::DWARFUnit ***)(a2 + 24);
      if (*(llvm::DWARFUnit ***)a2 != v12)
      {
        v14 = *(llvm::DWARFUnit ***)(a2 + 8);
        v15 = *(unsigned int (**)(llvm::DWARFUnit **))(a2 + 16);
        while (1)
        {
          v16 = *v11;
          llvm::DWARFUnit::extractDIEsIfNeeded(*v11, 1);
          v17 = *((_QWORD *)v16 + 36);
          v18 = *((_QWORD *)v16 + 37);
          v19 = v17 == v18;
          if (v17 == v18)
            v20 = 0;
          else
            v20 = v16;
          if (v19)
            v17 = 0;
          v115 = (const char *)v20;
          v116 = v17;
          if (v20 && v17 != 0)
          {
            llvm::DWARFDie::find((llvm::DWARFUnit **)&v115, 121, &v108);
            if (v110 && (llvm::DWARFFormValue::isFormClass((unsigned __int16 *)&v108, 8) & 1) != 0)
              break;
          }
LABEL_15:
          while (++v11 != v14)
          {
            if (v15(v11))
              goto LABEL_19;
          }
          v11 = v14;
LABEL_19:
          if (v11 == v12)
          {
            v10 = v114;
            v8 = a1;
            goto LABEL_69;
          }
        }
        v22 = *((_QWORD *)&v108 + 1);
        v23 = *v11;
        if (v113)
        {
          v24 = (v113 - 1) & (37 * DWORD2(v108));
          v25 = (_QWORD *)(v111 + 16 * v24);
          v26 = *v25;
          if (*((_QWORD *)&v108 + 1) == *v25)
            goto LABEL_15;
          v27 = 0;
          v28 = 1;
          while (v26 != -1)
          {
            if (v27)
              v29 = 0;
            else
              v29 = v26 == -2;
            if (v29)
              v27 = v25;
            v30 = v24 + v28++;
            v24 = v30 & (v113 - 1);
            v25 = (_QWORD *)(v111 + 16 * v24);
            v26 = *v25;
            if (*((_QWORD *)&v108 + 1) == *v25)
              goto LABEL_15;
          }
          if (v27)
            v31 = v27;
          else
            v31 = v25;
        }
        else
        {
          v31 = 0;
        }
        if (4 * (int)v112 + 4 >= 3 * v113)
        {
          v101 = *v11;
          sub_1C53061CC((uint64_t)&v111, 2 * v113);
          v33 = v113 - 1;
          v34 = (v113 - 1) & (37 * v22);
          v31 = (_QWORD *)(v111 + 16 * v34);
          v35 = *v31;
          if (v22 == *v31)
            goto LABEL_55;
          v36 = 0;
          v37 = 1;
          while (v35 != -1)
          {
            if (v36)
              v38 = 0;
            else
              v38 = v35 == -2;
            if (v38)
              v36 = v31;
            v39 = v34 + v37++;
            v34 = v39 & v33;
            v31 = (_QWORD *)(v111 + 16 * (v39 & v33));
            v35 = *v31;
            if (v22 == *v31)
              goto LABEL_55;
          }
        }
        else
        {
          if (v113 + ~(_DWORD)v112 - HIDWORD(v112) > v113 >> 3)
          {
LABEL_37:
            v32 = *v31;
LABEL_38:
            LODWORD(v112) = v112 + 1;
            if (v32 != -1)
              --HIDWORD(v112);
            *v31 = v22;
            v31[1] = v23;
            goto LABEL_15;
          }
          v101 = *v11;
          sub_1C53061CC((uint64_t)&v111, v113);
          v40 = v113 - 1;
          v41 = (v113 - 1) & (37 * v22);
          v31 = (_QWORD *)(v111 + 16 * v41);
          v42 = *v31;
          if (v22 == *v31)
          {
LABEL_55:
            v32 = v22;
            v23 = v101;
            goto LABEL_38;
          }
          v36 = 0;
          v43 = 1;
          while (v42 != -1)
          {
            if (v36)
              v44 = 0;
            else
              v44 = v42 == -2;
            if (v44)
              v36 = v31;
            v45 = v41 + v43++;
            v41 = v45 & v40;
            v31 = (_QWORD *)(v111 + 16 * (v45 & v40));
            v42 = *v31;
            if (v22 == *v31)
              goto LABEL_55;
          }
        }
        if (v36)
          v31 = v36;
        v23 = v101;
        goto LABEL_37;
      }
      v10 = 0;
    }
  }
LABEL_69:
  if (*(_QWORD *)(v7 + 8) <= v10)
  {
LABEL_149:
    *a6 = 0;
    return MEMORY[0x1CAA32FB4](v111, 8);
  }
  v46 = 0;
  v104 = v6;
  v103 = v7;
  while (2)
  {
    v47 = v46;
    if (v46)
      goto LABEL_109;
    v49 = v8[1];
    v48 = (unint64_t)v8[2];
    if ((unint64_t)v49 < v48)
    {
      *((_OWORD *)v49 + 7) = 0u;
      *((_OWORD *)v49 + 8) = 0u;
      *((_OWORD *)v49 + 5) = 0u;
      *((_OWORD *)v49 + 6) = 0u;
      *((_OWORD *)v49 + 3) = 0u;
      *((_OWORD *)v49 + 4) = 0u;
      *(_OWORD *)v49 = 0u;
      *((_OWORD *)v49 + 1) = 0u;
      *((_OWORD *)v49 + 2) = 0u;
      *((_QWORD *)v49 + 2) = v49 + 32;
      v50 = v49 + 144;
      *((_DWORD *)v49 + 7) = 4;
      goto LABEL_107;
    }
    v51 = v8;
    v52 = *v8;
    v53 = 0x8E38E38E38E38E39 * ((v49 - v52) >> 4) + 1;
    if (v53 > 0x1C71C71C71C71C7)
      abort();
    v54 = 0x8E38E38E38E38E39 * ((uint64_t)(v48 - (_QWORD)v52) >> 4);
    if (2 * v54 > v53)
      v53 = 2 * v54;
    if (v54 >= 0xE38E38E38E38E3)
      v53 = 0x1C71C71C71C71C7;
    if (v53 > 0x1C71C71C71C71C7)
      sub_1C4764EE4();
    v55 = 9 * v53;
    v56 = (char *)operator new(144 * v53);
    v57 = &v56[16 * ((v49 - v52) >> 4)];
    *(_OWORD *)v57 = 0u;
    *((_OWORD *)v57 + 1) = 0u;
    *((_OWORD *)v57 + 3) = 0u;
    *((_OWORD *)v57 + 4) = 0u;
    *((_OWORD *)v57 + 5) = 0u;
    *((_OWORD *)v57 + 6) = 0u;
    *((_OWORD *)v57 + 7) = 0u;
    *((_OWORD *)v57 + 8) = 0u;
    *((_OWORD *)v57 + 2) = 0u;
    *((_QWORD *)v57 + 2) = v57 + 32;
    *((_QWORD *)v57 + 3) = 0x400000000;
    v50 = v57 + 144;
    if (v49 == v52)
    {
      v8 = v51;
      *v51 = v57;
      v51[1] = v50;
      v51[2] = &v56[16 * v55];
      v6 = v104;
      v7 = v103;
      goto LABEL_104;
    }
    v102 = &v56[16 * v55];
    v58 = 0;
    do
    {
      v59 = &v49[v58];
      v60 = &v57[v58];
      *((_OWORD *)v60 - 9) = *(_OWORD *)&v49[v58 - 144];
      v61 = &v57[v58 - 112];
      *(_QWORD *)&v57[v58 - 128] = v61;
      *((_QWORD *)v60 - 15) = 0x400000000;
      v62 = *(_DWORD *)&v49[v58 - 120];
      if (v62)
        v63 = v60 == v59;
      else
        v63 = 1;
      if (!v63)
      {
        v64 = (char *)*((_QWORD *)v59 - 16);
        if (v59 - 112 != v64)
        {
          *((_QWORD *)v60 - 16) = v64;
          *((_DWORD *)v60 - 30) = v62;
          *((_DWORD *)v60 - 29) = *(_DWORD *)&v49[v58 - 116];
          *((_QWORD *)v59 - 16) = v59 - 112;
          *(_DWORD *)&v49[v58 - 116] = 0;
LABEL_94:
          *((_DWORD *)v59 - 30) = 0;
          goto LABEL_95;
        }
        if (v62 < 5)
        {
          v65 = *(unsigned int *)&v49[v58 - 120];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57[v58 - 128], (uint64_t)&v57[v58 - 112], *(unsigned int *)&v49[v58 - 120], 24);
          v65 = *((unsigned int *)v59 - 30);
          if (!(_DWORD)v65)
          {
LABEL_93:
            *((_DWORD *)v60 - 30) = v62;
            goto LABEL_94;
          }
          v64 = (char *)*((_QWORD *)v59 - 16);
          v61 = *(char **)&v57[v58 - 128];
        }
        memcpy(v61, v64, 24 * v65);
        goto LABEL_93;
      }
LABEL_95:
      v66 = *((_QWORD *)v59 - 2);
      *(v60 - 8) = *(v59 - 8);
      *((_QWORD *)v60 - 2) = v66;
      v58 -= 144;
    }
    while (&v49[v58] != v52);
    v8 = v51;
    v49 = *v51;
    v67 = v51[1];
    *v51 = &v57[v58];
    v51[1] = v50;
    v51[2] = v102;
    if (v67 == v49)
    {
      v6 = v104;
      v7 = v103;
    }
    else
    {
      v6 = v104;
      v7 = v103;
      do
      {
        v68 = (char *)*((_QWORD *)v67 - 16);
        if (v67 - 112 != v68)
          free(v68);
        v67 -= 144;
      }
      while (v67 != v49);
    }
LABEL_104:
    if (v49)
      operator delete(v49);
    v10 = v114;
LABEL_107:
    v8[1] = v50;
    v47 = v50 - 144;
    *((_QWORD *)v50 - 2) = v10;
    *(v50 - 8) = v6;
    if (!v6
      || (v69 = *(_OWORD *)(v7 + 16),
          v106[0] = *(_OWORD *)v7,
          v106[1] = v69,
          v107 = *(_QWORD *)(v7 + 32),
          llvm::DWARFDebugMacro::MacroHeader::parseMacroHeader((uint64_t)(v50 - 144), v106, &v114, a6),
          !*a6))
    {
LABEL_109:
      v70 = *((unsigned int *)v47 + 6);
      if (v70 >= *((_DWORD *)v47 + 7))
      {
        v90 = (uint64_t)(v47 + 16);
        v109 = 0;
        v108 = 0uLL;
        v91 = v70 + 1;
        v92 = *((_QWORD *)v47 + 2);
        v93 = v92 + 24 * v70 > (unint64_t)&v108;
        if (v92 <= (unint64_t)&v108 && v93)
        {
          v98 = (char *)&v108 - v92;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v90, (uint64_t)(v47 + 32), v91, 24);
          v94 = *((_QWORD *)v47 + 2);
          v95 = &v98[v94];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v90, (uint64_t)(v47 + 32), v91, 24);
          v94 = *((_QWORD *)v47 + 2);
          v95 = (char *)&v108;
        }
        v96 = v94 + 24 * *((unsigned int *)v47 + 6);
        v97 = *(_OWORD *)v95;
        *(_QWORD *)(v96 + 16) = *((_QWORD *)v95 + 2);
        *(_OWORD *)v96 = v97;
      }
      else
      {
        v71 = (_QWORD *)(*((_QWORD *)v47 + 2) + 24 * v70);
        *v71 = 0;
        v71[1] = 0;
        v71[2] = 0;
      }
      v72 = *((_DWORD *)v47 + 6) + 1;
      v73 = *((_QWORD *)v47 + 2);
      *((_DWORD *)v47 + 6) = v72;
      v74 = v73 + 24 * v72;
      ULEB128 = llvm::DataExtractor::getULEB128((uint64_t *)v7, (uint64_t *)&v114, 0);
      *(_DWORD *)(v74 - 24) = ULEB128;
      v46 = 0;
      switch(ULEB128)
      {
        case 0:
          goto LABEL_137;
        case 1:
        case 2:
          goto LABEL_125;
        case 3:
          *(_QWORD *)(v74 - 16) = llvm::DataExtractor::getULEB128((uint64_t *)v7, (uint64_t *)&v114, 0);
          CStrRef = llvm::DataExtractor::getULEB128((uint64_t *)v7, (uint64_t *)&v114, 0);
          goto LABEL_127;
        case 4:
          goto LABEL_128;
        case 5:
        case 6:
          if ((v6 & 1) == 0)
            goto LABEL_148;
          *(_QWORD *)(v74 - 16) = llvm::DataExtractor::getULEB128((uint64_t *)v7, (uint64_t *)&v114, 0);
          if ((v47[2] & 1) != 0)
            v76 = 8;
          else
            v76 = 4;
          *(_QWORD *)&v108 = llvm::DWARFDataExtractor::getRelocatedValue(v7, v76, &v114, 0, 0);
          v77 = (unint64_t *)&v108;
          v78 = a3;
          goto LABEL_126;
        case 7:
          if ((v47[2] & 1) != 0)
            v89 = 8;
          else
            v89 = 4;
          *(_QWORD *)(v74 - 16) = llvm::DWARFDataExtractor::getRelocatedValue(v7, v89, &v114, 0, 0);
          goto LABEL_128;
        case 8:
        case 9:
        case 10:
          goto LABEL_148;
        case 11:
        case 12:
          if ((v6 & 1) == 0)
            goto LABEL_148;
          *(_QWORD *)(v74 - 16) = llvm::DataExtractor::getULEB128((uint64_t *)v7, (uint64_t *)&v114, 0);
          if (!v113)
            goto LABEL_130;
          v79 = *((_QWORD *)v47 + 16);
          LODWORD(v80) = (37 * v79) & (v113 - 1);
          v81 = (uint64_t *)(v111 + 16 * v80);
          v82 = *v81;
          if (*v81 == v79)
            goto LABEL_131;
          v83 = 1;
          while (v82 != -1)
          {
            v84 = v80 + v83++;
            v80 = v84 & (v113 - 1);
            v82 = *(_QWORD *)(v111 + 16 * v80);
            if (v82 == v79)
            {
              v81 = (uint64_t *)(v111 + 16 * v80);
              goto LABEL_131;
            }
          }
LABEL_130:
          v81 = (uint64_t *)(v111 + 16 * v113);
LABEL_131:
          if ((uint64_t *)(v111 + 16 * v113) == v81)
          {
            v100 = std::generic_category();
            *(_QWORD *)&v108 = 22;
            *((_QWORD *)&v108 + 1) = v100;
            v115 = "Macro contribution of the unit not found";
            sub_1C5DF1730((_BYTE **)&v115, (uint64_t *)&v108, a6);
          }
          else
          {
            v86 = (llvm::DWARFUnit *)v81[1];
            v87 = llvm::DataExtractor::getULEB128((uint64_t *)v7, (uint64_t *)&v114, 0);
            llvm::DWARFUnit::getStringOffsetSectionItem(v86, v87, (uint64_t)&v115);
            if ((v116 & 1) == 0)
            {
              v108 = *(_OWORD *)(v81[1] + 152);
              LOWORD(v109) = 0;
              *(_QWORD *)(v74 - 8) = llvm::DataExtractor::getCStrRef((uint64_t *)&v108, (unint64_t *)&v115, 0);
              if ((v116 & 1) != 0)
              {
                v88 = v115;
                v115 = 0;
                if (v88)
                  (*(void (**)(const char *))(*(_QWORD *)v88 + 8))(v88);
              }
              v46 = v47;
              goto LABEL_137;
            }
            *a6 = v115;
          }
          return MEMORY[0x1CAA32FB4](v111, 8);
        default:
          if (ULEB128 == 255)
          {
LABEL_125:
            *(_QWORD *)(v74 - 16) = llvm::DataExtractor::getULEB128((uint64_t *)v7, (uint64_t *)&v114, 0);
            v77 = &v114;
            v78 = (uint64_t *)v7;
LABEL_126:
            CStrRef = (uint64_t)llvm::DataExtractor::getCStrRef(v78, v77, 0);
LABEL_127:
            *(_QWORD *)(v74 - 8) = CStrRef;
LABEL_128:
            v46 = v47;
LABEL_137:
            v10 = v114;
            if (*(_QWORD *)(v7 + 8) <= v114)
              goto LABEL_149;
            continue;
          }
LABEL_148:
          *(_DWORD *)(v74 - 24) = -1;
          goto LABEL_149;
      }
    }
    return MEMORY[0x1CAA32FB4](v111, 8);
  }
}

void llvm::DWARFDebugMacro::MacroHeader::parseMacroHeader(uint64_t a1@<X0>, _QWORD *a2@<X1>, unint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v8;
  char v9;
  int v10;
  const char *v11;
  uint64_t v12[2];

  *(_WORD *)a1 = sub_1C63871E8((uint64_t)a2, a3, 0);
  v8 = *a3;
  if (!llvm::DataExtractor::prepareRead((uint64_t)a2, *a3, 1, 0))
  {
    *(_BYTE *)(a1 + 2) = 0;
LABEL_4:
    *a4 = 0;
    return;
  }
  v9 = *(_BYTE *)(*a2 + v8);
  ++*a3;
  if ((v9 & 4) == 0)
  {
    *(_BYTE *)(a1 + 2) = v9;
    if ((v9 & 2) != 0)
    {
      if ((v9 & 1) != 0)
        v10 = 8;
      else
        v10 = 4;
      *(_QWORD *)(a1 + 8) = llvm::DataExtractor::getUnsigned(a2, a3, v10, 0);
    }
    goto LABEL_4;
  }
  v12[0] = 45;
  v12[1] = (uint64_t)std::generic_category();
  v11 = "opcode_operands_table is not supported";
  sub_1C5DF1730((_BYTE **)&v11, v12, a4);
}

void llvm::DWARFDebugPubTable::extract(void **a1, uint64_t a2, int a3, void (*a4)(_QWORD, _QWORD), uint64_t a5)
{
  void **v8;
  char *v9;
  char *i;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *v28;
  void *v29;
  unint64_t InitialLength;
  char v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  unint64_t Unsigned;
  unint64_t v38;
  unsigned int v39;
  void *CStrRef;
  unint64_t v41;
  void *v42;
  unint64_t v43;
  int v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t *v47;
  _QWORD *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  __int128 v58;
  _QWORD *v59;
  void *v60;
  const std::error_category *v61;
  std::string *v62;
  std::string *v63;
  uint64_t v64;
  int v65;
  const std::error_category *v66;
  std::string *v67;
  uint64_t v68;
  unint64_t v69;
  const std::error_category *v70;
  std::string *v71;
  std::string *v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  const std::error_category *v76;
  std::string *v77;
  std::string *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void **v83;
  uint64_t v84;
  void (*v85)(_QWORD, _QWORD);
  unsigned int v86;
  char *v88;
  char *v89;
  std::string v90;
  void *__p;
  unint64_t v92;
  uint64_t v93;
  __int128 v94;
  char *v95;
  unint64_t v96;
  char *v97;
  void (**v98)(llvm::raw_ostream *__hidden);
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  int v105;
  std::string *p_p;
  std::string v107;
  std::string *v108;
  const char *v109;
  unint64_t v110;
  std::string *v111;
  unint64_t v112;

  v8 = a1;
  *((_BYTE *)a1 + 24) = a3;
  v9 = (char *)*a1;
  for (i = (char *)a1[1]; i != v9; i -= 56)
  {
    v11 = (void *)*((_QWORD *)i - 3);
    if (v11)
    {
      *((_QWORD *)i - 2) = v11;
      operator delete(v11);
    }
  }
  v8[1] = v9;
  if (*(_QWORD *)(a2 + 8))
  {
    v12 = 0;
    v81 = a5;
    v84 = a2;
    v85 = a4;
    v83 = v8;
    do
    {
      v14 = (char *)v8[1];
      v13 = (unint64_t)v8[2];
      if ((unint64_t)v14 < v13)
      {
        *(_QWORD *)v14 = 0;
        v14[8] = 0;
        *((_WORD *)v14 + 5) = 0;
        v15 = v14 + 56;
        *((_OWORD *)v14 + 1) = 0u;
        *((_OWORD *)v14 + 2) = 0u;
        *((_QWORD *)v14 + 6) = 0;
        goto LABEL_28;
      }
      v16 = a5;
      v17 = v12;
      v18 = (char *)*v8;
      v19 = 0x6DB6DB6DB6DB6DB7 * ((v14 - (_BYTE *)*v8) >> 3);
      v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) > 0x492492492492492)
LABEL_121:
        abort();
      v21 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v13 - (_QWORD)v18) >> 3);
      if (2 * v21 > v20)
        v20 = 2 * v21;
      if (v21 >= 0x249249249249249)
        v22 = 0x492492492492492;
      else
        v22 = v20;
      if (v22 > 0x492492492492492)
LABEL_122:
        sub_1C4764EE4();
      v23 = 56 * v22;
      v24 = (char *)operator new(56 * v22);
      v25 = &v24[56 * v19];
      *(_QWORD *)v25 = 0;
      v25[8] = 0;
      v26 = &v24[v23];
      *((_WORD *)v25 + 5) = 0;
      v15 = v25 + 56;
      *((_OWORD *)v25 + 1) = 0u;
      *((_OWORD *)v25 + 2) = 0u;
      *((_QWORD *)v25 + 6) = 0;
      if (v14 == v18)
      {
        *v8 = v25;
        v8[1] = v15;
        v8[2] = v26;
        v12 = v17;
      }
      else
      {
        do
        {
          v27 = *(_OWORD *)(v14 - 56);
          *(_OWORD *)(v25 - 40) = *(_OWORD *)(v14 - 40);
          *(_OWORD *)(v25 - 56) = v27;
          *((_QWORD *)v25 - 2) = 0;
          *((_QWORD *)v25 - 1) = 0;
          *((_QWORD *)v25 - 3) = 0;
          *(_OWORD *)(v25 - 24) = *(_OWORD *)(v14 - 24);
          *((_QWORD *)v25 - 1) = *((_QWORD *)v14 - 1);
          v25 -= 56;
          *((_QWORD *)v14 - 3) = 0;
          *((_QWORD *)v14 - 2) = 0;
          *((_QWORD *)v14 - 1) = 0;
          v14 -= 56;
        }
        while (v14 != v18);
        v14 = (char *)*v8;
        v28 = (char *)v8[1];
        *v8 = v25;
        v8[1] = v15;
        v8[2] = v26;
        v12 = v17;
        if (v28 != v14)
        {
          a5 = v16;
          do
          {
            v29 = (void *)*((_QWORD *)v28 - 3);
            if (v29)
            {
              *((_QWORD *)v28 - 2) = v29;
              operator delete(v29);
            }
            v28 -= 56;
          }
          while (v28 != v14);
          goto LABEL_26;
        }
      }
      a5 = v16;
LABEL_26:
      if (v14)
        operator delete(v14);
LABEL_28:
      v8[1] = v15;
      v96 = v12;
      v97 = 0;
      InitialLength = llvm::DWARFDataExtractor::getInitialLength(a2, &v96, &v97);
      *((_QWORD *)v15 - 7) = InitialLength;
      *(v15 - 48) = v31;
      if (!v97)
      {
        v82 = v12;
        v32 = v96 + InitialLength;
        v33 = *(_QWORD *)(a2 + 8);
        if (v33 >= v96 + InitialLength)
          v33 = v96 + InitialLength;
        v34 = *(_BYTE *)(a2 + 16) != 0;
        v35 = *(_BYTE *)(a2 + 17);
        __p = *(void **)a2;
        v92 = v33;
        LOBYTE(v93) = v34;
        BYTE1(v93) = v35;
        v94 = *(_OWORD *)(a2 + 24);
        if (v31)
          v36 = 8;
        else
          v36 = 4;
        *((_WORD *)v15 - 23) = sub_1C63871E8((uint64_t)&__p, &v96, (uint64_t *)&v97);
        *((_QWORD *)v15 - 5) = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)&__p, v36, &v96, 0, (uint64_t *)&v97);
        *((_QWORD *)v15 - 4) = llvm::DataExtractor::getUnsigned(&__p, &v96, v36, (uint64_t *)&v97);
        v86 = v36;
        if (v97)
        {
          v75 = v32;
          v76 = std::generic_category();
          v89 = v97;
          v97 = 0;
          sub_1C61D2548(&v89, &v90);
          v77 = &v90;
          if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v77 = (std::string *)v90.__r_.__value_.__r.__words[0];
          memset(&v107, 0, sizeof(v107));
          v99 = 0;
          v103 = 0;
          v104 = 0;
          v98 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
          p_p = &v107;
          v105 = 0;
          v101 = 0;
          v102 = 0;
          v100 = 0;
          v108 = (std::string *)&unk_1E8169880;
          v109 = "name lookup table at offset 0x%llx does not have a complete header: %s";
          v110 = v12;
          v111 = v77;
          llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v98, (uint64_t)&v108);
          v78 = p_p;
          v79 = operator new();
          LOWORD(v112) = 260;
          v108 = v78;
          *(_QWORD *)v79 = off_1E81A0C88;
          llvm::Twine::str((llvm::Twine *)&v108, (_QWORD *)(v79 + 8));
          *(_QWORD *)(v79 + 32) = 22;
          *(_QWORD *)(v79 + 40) = v76;
          *(_BYTE *)(v79 + 48) = 1;
          v98 = off_1E81A6E70;
          if (v105 == 1 && v100)
            MEMORY[0x1CAA32F9C](v100, 0x1000C8077774924);
          if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v107.__r_.__value_.__l.__data_);
          v98 = (void (**)(llvm::raw_ostream *__hidden))v79;
          a4 = v85;
          v85(a5, &v98);
          v32 = v75;
          if (v98)
            (*((void (**)(_QWORD))*v98 + 1))(v98);
          v8 = v83;
          a2 = v84;
          if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v90.__r_.__value_.__l.__data_);
          v74 = v89;
          if (v89)
            goto LABEL_93;
        }
        else
        {
          while (1)
          {
            Unsigned = llvm::DataExtractor::getUnsigned(&__p, &v96, v36, (uint64_t *)&v97);
            if (!Unsigned)
              break;
            v38 = Unsigned;
            if (a3)
              v39 = sub_1C5DEAEAC(&__p, &v96, (uint64_t *)&v97);
            else
              v39 = 0;
            CStrRef = llvm::DataExtractor::getCStrRef((uint64_t *)&__p, &v96, (uint64_t *)&v97);
            if (!v97)
            {
              v42 = CStrRef;
              v43 = v41;
              v44 = (v39 >> 4) & 7;
              v45 = v39 >> 7;
              v47 = (unint64_t *)*((_QWORD *)v15 - 2);
              v46 = *((_QWORD *)v15 - 1);
              if ((unint64_t)v47 >= v46)
              {
                v49 = v32;
                v50 = (char *)*((_QWORD *)v15 - 3);
                v51 = ((char *)v47 - v50) >> 5;
                v52 = v51 + 1;
                if ((unint64_t)(v51 + 1) >> 59)
                  goto LABEL_121;
                v53 = v46 - (_QWORD)v50;
                if (v53 >> 4 > v52)
                  v52 = v53 >> 4;
                v54 = (unint64_t)v53 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v52;
                if (v54)
                {
                  if (v54 >> 59)
                    goto LABEL_122;
                  v80 = v54;
                  v55 = (char *)operator new(32 * v54);
                  v54 = v80;
                }
                else
                {
                  v55 = 0;
                }
                v56 = &v55[32 * v51];
                *(_QWORD *)v56 = v38;
                *((_DWORD *)v56 + 2) = v44;
                *((_DWORD *)v56 + 3) = v45;
                *((_QWORD *)v56 + 2) = v42;
                *((_QWORD *)v56 + 3) = v43;
                v57 = v56;
                v32 = v49;
                if (v47 != (unint64_t *)v50)
                {
                  do
                  {
                    v58 = *((_OWORD *)v47 - 1);
                    *((_OWORD *)v57 - 2) = *((_OWORD *)v47 - 2);
                    *((_OWORD *)v57 - 1) = v58;
                    v57 -= 32;
                    v47 -= 4;
                  }
                  while (v47 != (unint64_t *)v50);
                  v47 = (unint64_t *)*((_QWORD *)v15 - 3);
                }
                v48 = v56 + 32;
                *((_QWORD *)v15 - 3) = v57;
                *((_QWORD *)v15 - 2) = v56 + 32;
                *((_QWORD *)v15 - 1) = &v55[32 * v54];
                if (v47)
                  operator delete(v47);
                a5 = v81;
              }
              else
              {
                *v47 = v38;
                *((_DWORD *)v47 + 2) = v44;
                *((_DWORD *)v47 + 3) = v45;
                v48 = v47 + 4;
                v47[2] = (unint64_t)CStrRef;
                v47[3] = v41;
              }
              *((_QWORD *)v15 - 2) = v48;
              v36 = v86;
              if (!v97)
                continue;
            }
            goto LABEL_83;
          }
          if (!v97)
          {
            if (v96 == v32)
            {
              v65 = 0;
              a2 = v84;
              a4 = v85;
              v8 = v83;
            }
            else
            {
              v66 = std::generic_category();
              memset(&v107, 0, sizeof(v107));
              v99 = 0;
              v103 = 0;
              v104 = 0;
              v98 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
              p_p = &v107;
              v105 = 0;
              v101 = 0;
              v102 = 0;
              v100 = 0;
              v108 = (std::string *)&unk_1E8169E08;
              v109 = "name lookup table at offset 0x%llx has a terminator at offset 0x%llx before the expected end at 0x%llx";
              v110 = v82;
              v111 = (std::string *)(v96 - v36);
              v112 = v32 - v36;
              llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v98, (uint64_t)&v108);
              v67 = p_p;
              v68 = operator new();
              LOWORD(v112) = 260;
              v108 = v67;
              *(_QWORD *)v68 = off_1E81A0C88;
              llvm::Twine::str((llvm::Twine *)&v108, (_QWORD *)(v68 + 8));
              *(_QWORD *)(v68 + 32) = 22;
              *(_QWORD *)(v68 + 40) = v66;
              *(_BYTE *)(v68 + 48) = 1;
              v98 = off_1E81A6E70;
              a4 = v85;
              if (v105 == 1 && v100)
                MEMORY[0x1CAA32F9C](v100, 0x1000C8077774924);
              if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v107.__r_.__value_.__l.__data_);
              v98 = (void (**)(llvm::raw_ostream *__hidden))v68;
              v85(a5, &v98);
              v8 = v83;
              a2 = v84;
              if (v98)
                (*((void (**)(_QWORD))*v98 + 1))(v98);
              v65 = 0;
            }
            goto LABEL_95;
          }
LABEL_83:
          v69 = v32;
          v70 = std::generic_category();
          v88 = v97;
          v97 = 0;
          sub_1C61D2548(&v88, &v90);
          v71 = &v90;
          if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v71 = (std::string *)v90.__r_.__value_.__r.__words[0];
          memset(&v107, 0, sizeof(v107));
          v99 = 0;
          v103 = 0;
          v104 = 0;
          v98 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
          p_p = &v107;
          v105 = 0;
          v101 = 0;
          v102 = 0;
          v100 = 0;
          v108 = (std::string *)&unk_1E8169880;
          v109 = "name lookup table at offset 0x%llx parsing failed: %s";
          v110 = v82;
          v111 = v71;
          llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v98, (uint64_t)&v108);
          v72 = p_p;
          v73 = operator new();
          LOWORD(v112) = 260;
          v108 = v72;
          *(_QWORD *)v73 = off_1E81A0C88;
          llvm::Twine::str((llvm::Twine *)&v108, (_QWORD *)(v73 + 8));
          *(_QWORD *)(v73 + 32) = 22;
          *(_QWORD *)(v73 + 40) = v70;
          *(_BYTE *)(v73 + 48) = 1;
          v98 = off_1E81A6E70;
          if (v105 == 1 && v100)
            MEMORY[0x1CAA32F9C](v100, 0x1000C8077774924);
          if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v107.__r_.__value_.__l.__data_);
          v98 = (void (**)(llvm::raw_ostream *__hidden))v73;
          a4 = v85;
          v85(a5, &v98);
          v32 = v69;
          if (v98)
            (*((void (**)(_QWORD))*v98 + 1))(v98);
          v8 = v83;
          a2 = v84;
          if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v90.__r_.__value_.__l.__data_);
          v74 = v88;
          if (!v88)
            goto LABEL_94;
LABEL_93:
          (*(void (**)(char *))(*(_QWORD *)v74 + 8))(v74);
        }
LABEL_94:
        v65 = 2;
LABEL_95:
        v12 = v32;
        goto LABEL_96;
      }
      v59 = v8[1];
      v60 = (void *)*(v59 - 3);
      if (v60)
      {
        *(v59 - 2) = v60;
        operator delete(v60);
      }
      v8[1] = v59 - 7;
      v61 = std::generic_category();
      v95 = v97;
      v97 = 0;
      sub_1C61D2548(&v95, &v107);
      v62 = &v107;
      if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v62 = (std::string *)v107.__r_.__value_.__r.__words[0];
      __p = 0;
      v92 = 0;
      v93 = 0;
      v99 = 0;
      v103 = 0;
      v104 = 0;
      v98 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
      p_p = (std::string *)&__p;
      v105 = 0;
      v101 = 0;
      v102 = 0;
      v100 = 0;
      v108 = (std::string *)&unk_1E8169880;
      v109 = "name lookup table at offset 0x%llx parsing failed: %s";
      v110 = v12;
      v111 = v62;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v98, (uint64_t)&v108);
      v63 = p_p;
      v64 = operator new();
      LOWORD(v112) = 260;
      v108 = v63;
      *(_QWORD *)v64 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)&v108, (_QWORD *)(v64 + 8));
      *(_QWORD *)(v64 + 32) = 22;
      *(_QWORD *)(v64 + 40) = v61;
      *(_BYTE *)(v64 + 48) = 1;
      v98 = off_1E81A6E70;
      if (v105 == 1 && v100)
        MEMORY[0x1CAA32F9C](v100, 0x1000C8077774924);
      if (SHIBYTE(v93) < 0)
        operator delete(__p);
      v98 = (void (**)(llvm::raw_ostream *__hidden))v64;
      a4(a5, &v98);
      if (v98)
        (*((void (**)(_QWORD))*v98 + 1))(v98);
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v107.__r_.__value_.__l.__data_);
      if (v95)
        (*(void (**)(char *))(*(_QWORD *)v95 + 8))(v95);
      v65 = 1;
LABEL_96:
      if (v97)
        (*(void (**)(char *))(*(_QWORD *)v97 + 8))(v97);
    }
    while ((v65 | 2) == 2 && *(_QWORD *)(a2 + 8) > v12);
  }
}

uint64_t **llvm::DWARFDebugPubTable::dump(uint64_t **this, llvm::raw_ostream *a2)
{
  uint64_t *v2;
  uint64_t **v4;
  int v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  const char *v11;
  _DWORD *v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  const char *v15;
  _OWORD *v16;
  llvm::raw_ostream *v17;
  uint64_t v18;
  void *v19;
  llvm::raw_ostream *v20;
  uint64_t v21;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  const char *v24;
  size_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  char *v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  const void *v37;
  unint64_t v38;
  llvm::raw_ostream *v39;
  uint64_t *v40;
  _QWORD v41[3];
  uint64_t (**v42)(llvm::format_object_base *__hidden);
  const char *v43;
  const char *v44;
  uint64_t v45;

  v2 = *this;
  v40 = this[1];
  if (*this != v40)
  {
    v4 = this;
    do
    {
      if (*((_BYTE *)v2 + 8))
        v5 = 16;
      else
        v5 = 8;
      v6 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v6) > 8)
      {
        *(_BYTE *)(v6 + 8) = 32;
        *(_QWORD *)v6 = *(_QWORD *)"length = ";
        *((_QWORD *)a2 + 4) += 9;
        v7 = a2;
      }
      else
      {
        v7 = llvm::raw_ostream::write(a2, "length = ", 9uLL);
      }
      v42 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E81698E0;
      v8 = *v2;
      v43 = "0x%0*llx";
      LODWORD(v44) = v5;
      v45 = v8;
      llvm::raw_ostream::operator<<(v7, (uint64_t)&v42);
      v9 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v9) > 0xA)
      {
        *(_DWORD *)(v9 + 7) = 540876916;
        *(_QWORD *)v9 = *(_QWORD *)", format = ";
        *((_QWORD *)a2 + 4) += 11;
        v10 = a2;
      }
      else
      {
        v10 = llvm::raw_ostream::write(a2, ", format = ", 0xBuLL);
      }
      if (*((_BYTE *)v2 + 8))
      {
        if (*((_BYTE *)v2 + 8) != 1)
          goto LABEL_17;
        v11 = "DWARF64";
      }
      else
      {
        v11 = "DWARF32";
      }
      v12 = (_DWORD *)*((_QWORD *)v10 + 4);
      if (*((_QWORD *)v10 + 3) - (_QWORD)v12 > 6uLL)
      {
        *v12 = *(_DWORD *)v11;
        *(_DWORD *)((char *)v12 + 3) = *(_DWORD *)(v11 + 3);
        *((_QWORD *)v10 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(v10, v11, 7uLL);
      }
LABEL_17:
      v13 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v13) > 0xB)
      {
        *(_DWORD *)(v13 + 8) = 540876910;
        *(_QWORD *)v13 = *(_QWORD *)", version = ";
        *((_QWORD *)a2 + 4) += 12;
        v14 = a2;
      }
      else
      {
        v14 = llvm::raw_ostream::write(a2, ", version = ", 0xCuLL);
      }
      v15 = (const char *)*((unsigned __int16 *)v2 + 5);
      v42 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E8169900;
      v43 = "0x%04x";
      v44 = v15;
      llvm::raw_ostream::operator<<(v14, (uint64_t)&v42);
      v16 = (_OWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v16 > 0xFuLL)
      {
        *v16 = *(_OWORD *)", unit_offset = ";
        *((_QWORD *)a2 + 4) += 16;
        v17 = a2;
      }
      else
      {
        v17 = llvm::raw_ostream::write(a2, ", unit_offset = ", 0x10uLL);
      }
      v18 = v2[2];
      v42 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E81698E0;
      v43 = "0x%0*llx";
      LODWORD(v44) = v5;
      v45 = v18;
      llvm::raw_ostream::operator<<(v17, (uint64_t)&v42);
      v19 = (void *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v19 > 0xDuLL)
      {
        qmemcpy(v19, ", unit_size = ", 14);
        *((_QWORD *)a2 + 4) += 14;
        v20 = a2;
      }
      else
      {
        v20 = llvm::raw_ostream::write(a2, ", unit_size = ", 0xEuLL);
      }
      v21 = v2[3];
      v42 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E81698E0;
      v43 = "0x%0*llx";
      LODWORD(v44) = v5;
      v45 = v21;
      v22 = llvm::raw_ostream::operator<<(v20, (uint64_t)&v42);
      v23 = (_BYTE *)*((_QWORD *)v22 + 4);
      if ((unint64_t)v23 >= *((_QWORD *)v22 + 3))
      {
        llvm::raw_ostream::write(v22, 10);
      }
      else
      {
        *((_QWORD *)v22 + 4) = v23 + 1;
        *v23 = 10;
      }
      if (*((_BYTE *)v4 + 24))
        v24 = "Offset     Linkage  Kind     Name\n";
      else
        v24 = "Offset     Name\n";
      if (*((_BYTE *)v4 + 24))
        v25 = 34;
      else
        v25 = 16;
      v26 = (void *)*((_QWORD *)a2 + 4);
      if (v25 <= *((_QWORD *)a2 + 3) - (_QWORD)v26)
      {
        this = (uint64_t **)memcpy(v26, v24, v25);
        *((_QWORD *)a2 + 4) += v25;
      }
      else
      {
        this = (uint64_t **)llvm::raw_ostream::write(a2, v24, v25);
      }
      v27 = v2[4];
      v28 = v2[5];
      if (v27 != v28)
      {
        v29 = v27 + 12;
        do
        {
          v31 = v29 - 12;
          v30 = *(_QWORD *)(v29 - 12);
          v42 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E81698E0;
          v43 = "0x%0*llx ";
          LODWORD(v44) = v5;
          v45 = v30;
          llvm::raw_ostream::operator<<(a2, (uint64_t)&v42);
          if (*((_BYTE *)v4 + 24))
          {
            v32 = "STATIC";
            if (!*(_DWORD *)v29)
              v32 = "EXTERNAL";
            v33 = off_1E816A090[*(int *)(v29 - 4)];
            v42 = &off_1E8132A78;
            v43 = "%-8s";
            v44 = v32;
            llvm::raw_ostream::operator<<(a2, (uint64_t)&v42);
            v34 = (_BYTE *)*((_QWORD *)a2 + 4);
            if ((unint64_t)v34 >= *((_QWORD *)a2 + 3))
            {
              llvm::raw_ostream::write(a2, 32);
            }
            else
            {
              *((_QWORD *)a2 + 4) = v34 + 1;
              *v34 = 32;
            }
            v41[0] = &off_1E8132A78;
            v41[1] = "%-8s";
            v41[2] = v33;
            llvm::raw_ostream::operator<<(a2, (uint64_t)v41);
            v35 = (_BYTE *)*((_QWORD *)a2 + 4);
            if ((unint64_t)v35 >= *((_QWORD *)a2 + 3))
            {
              llvm::raw_ostream::write(a2, 32);
            }
            else
            {
              *((_QWORD *)a2 + 4) = v35 + 1;
              *v35 = 32;
            }
          }
          v36 = (_BYTE *)*((_QWORD *)a2 + 4);
          if ((unint64_t)v36 >= *((_QWORD *)a2 + 3))
          {
            llvm::raw_ostream::write(a2, 34);
          }
          else
          {
            *((_QWORD *)a2 + 4) = v36 + 1;
            *v36 = 34;
          }
          v37 = *(const void **)(v29 + 4);
          v38 = *(_QWORD *)(v29 + 12);
          this = (uint64_t **)*((_QWORD *)a2 + 4);
          if (v38 <= *((_QWORD *)a2 + 3) - (_QWORD)this)
          {
            if (v38)
            {
              memcpy(this, v37, *(_QWORD *)(v29 + 12));
              this = (uint64_t **)(*((_QWORD *)a2 + 4) + v38);
              *((_QWORD *)a2 + 4) = this;
            }
            v39 = a2;
          }
          else
          {
            v39 = llvm::raw_ostream::write(a2, (const char *)v37, *(_QWORD *)(v29 + 12));
            this = (uint64_t **)*((_QWORD *)v39 + 4);
          }
          if (*((_QWORD *)v39 + 3) - (_QWORD)this > 1uLL)
          {
            *(_WORD *)this = 2594;
            *((_QWORD *)v39 + 4) += 2;
          }
          else
          {
            this = (uint64_t **)llvm::raw_ostream::write(v39, "\"\n", 2uLL);
          }
          v29 += 32;
        }
        while (v31 + 32 != v28);
      }
      v2 += 7;
    }
    while (v2 != v40);
  }
  return this;
}

BOOL llvm::DWARFDebugRangeList::RangeListEntry::isBaseAddressSelectionEntry(llvm::DWARFDebugRangeList::RangeListEntry *this, char a2)
{
  return *(_QWORD *)this == 0xFFFFFFFFFFFFFFFFLL >> (-8 * a2);
}

void llvm::DWARFDebugRangeList::extract(llvm::DWARFDebugRangeList *this@<X0>, const llvm::DWARFDataExtractor *a2@<X1>, unint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned int v8;
  const std::error_category *v9;
  uint64_t v10;
  unint64_t RelocatedValue;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  const std::error_category *v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  const std::error_category *v27;
  void **v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  void (**v32)(llvm::raw_ostream *__hidden);
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  int v39;
  void **p_p;
  void *__p;
  uint64_t v42;
  uint64_t v43;
  void **v44;
  const char *v45;
  uint64_t v46;
  __int16 v47;

  *(_QWORD *)this = -1;
  *((_BYTE *)this + 8) = 0;
  *((_QWORD *)this + 3) = *((_QWORD *)this + 2);
  if (*((_QWORD *)a2 + 1) <= *a3)
  {
    v23 = std::generic_category();
    __p = 0;
    v42 = 0;
    v43 = 0;
    v33 = 0;
    v37 = 0;
    v38 = 0;
    v32 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    p_p = &__p;
    v39 = 0;
    v35 = 0;
    v36 = 0;
    v34 = 0;
    v24 = *a3;
    v44 = (void **)&unk_1E8133270;
    v45 = "invalid range list offset 0x%llx";
    v46 = v24;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v32, (uint64_t)&v44);
    v25 = p_p;
    v26 = operator new();
    v47 = 260;
    v44 = v25;
    *(_QWORD *)v26 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v44, (_QWORD *)(v26 + 8));
    *(_QWORD *)(v26 + 32) = 22;
    *(_QWORD *)(v26 + 40) = v23;
    *(_BYTE *)(v26 + 48) = 1;
    *a4 = v26;
  }
  else
  {
    v8 = *((unsigned __int8 *)a2 + 17);
    *((_BYTE *)this + 8) = v8;
    v9 = std::generic_category();
    sub_1C5490600(v8, 22, (uint64_t)v9, (uint64_t)"range list at offset 0x%llx", (uint64_t *)a3, a4);
    if (*a4)
      return;
    *(_QWORD *)this = *a3;
    while (1)
    {
      v31 = -1;
      v10 = *a3;
      *(_QWORD *)&v30 = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)a2, *((unsigned __int8 *)a2 + 17), a3, 0, 0);
      RelocatedValue = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)a2, *((unsigned __int8 *)a2 + 17), a3, &v31, 0);
      *((_QWORD *)&v30 + 1) = RelocatedValue;
      if (*a3 != v10 + 2 * *((unsigned __int8 *)this + 8))
        break;
      if (!((unint64_t)v30 | RelocatedValue))
      {
        *a4 = 0;
        return;
      }
      v13 = (_QWORD *)*((_QWORD *)this + 3);
      v12 = *((_QWORD *)this + 4);
      if ((unint64_t)v13 >= v12)
      {
        v15 = (_QWORD *)*((_QWORD *)this + 2);
        v16 = 0xAAAAAAAAAAAAAAABLL * (v13 - v15) + 1;
        if (v16 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v15) >> 3);
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x555555555555555)
          v18 = 0xAAAAAAAAAAAAAAALL;
        else
          v18 = v16;
        if (v18)
        {
          if (v18 > 0xAAAAAAAAAAAAAAALL)
            sub_1C4764EE4();
          v19 = (char *)operator new(24 * v18);
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[8 * (v13 - v15)];
        *(_OWORD *)v20 = v30;
        *((_QWORD *)v20 + 2) = v31;
        v21 = v20;
        if (v13 != v15)
        {
          do
          {
            v22 = *(_OWORD *)(v13 - 3);
            *((_QWORD *)v21 - 1) = *(v13 - 1);
            *(_OWORD *)(v21 - 24) = v22;
            v21 -= 24;
            v13 -= 3;
          }
          while (v13 != v15);
          v13 = (_QWORD *)*((_QWORD *)this + 2);
        }
        v14 = v20 + 24;
        *((_QWORD *)this + 2) = v21;
        *((_QWORD *)this + 3) = v20 + 24;
        *((_QWORD *)this + 4) = &v19[24 * v18];
        if (v13)
          operator delete(v13);
      }
      else
      {
        v13[2] = v31;
        *(_OWORD *)v13 = v30;
        v14 = v13 + 3;
      }
      *((_QWORD *)this + 3) = v14;
    }
    *(_QWORD *)this = -1;
    *((_BYTE *)this + 8) = 0;
    *((_QWORD *)this + 3) = *((_QWORD *)this + 2);
    v27 = std::generic_category();
    __p = 0;
    v42 = 0;
    v43 = 0;
    v33 = 0;
    v37 = 0;
    v38 = 0;
    v32 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    p_p = &__p;
    v39 = 0;
    v35 = 0;
    v36 = 0;
    v34 = 0;
    v44 = (void **)&unk_1E8133270;
    v45 = "invalid range list entry at offset 0x%llx";
    v46 = v10;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v32, (uint64_t)&v44);
    v28 = p_p;
    v29 = operator new();
    v47 = 260;
    v44 = v28;
    *(_QWORD *)v29 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v44, (_QWORD *)(v29 + 8));
    *(_QWORD *)(v29 + 32) = 22;
    *(_QWORD *)(v29 + 40) = v27;
    *(_BYTE *)(v29 + 48) = 1;
    *a4 = v29;
  }
  v32 = off_1E81A6E70;
  if (v39 == 1 && v34)
    MEMORY[0x1CAA32F9C](v34, 0x1000C8077774924);
  if (SHIBYTE(v43) < 0)
    operator delete(__p);
}

llvm::raw_ostream *llvm::DWARFDebugRangeList::dump(llvm::DWARFDebugRangeList *this, llvm::raw_ostream *a2)
{
  int v4;
  const char *v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void *v12;
  const char *v13;
  uint64_t v14;
  __int128 v15;

  v4 = *((unsigned __int8 *)this + 8);
  if (v4 == 2)
  {
    v5 = "%08llx %04llx %04llx\n";
  }
  else if (v4 == 8)
  {
    v5 = "%08llx %016llx %016llx\n";
  }
  else
  {
    v5 = "%08llx %08llx %08llx\n";
  }
  v6 = (__int128 *)*((_QWORD *)this + 2);
  v7 = (__int128 *)*((_QWORD *)this + 3);
  while (v6 != v7)
  {
    v8 = *(_QWORD *)this;
    v12 = &unk_1E8169E08;
    v13 = v5;
    v14 = v8;
    v9 = *v6;
    v6 = (__int128 *)((char *)v6 + 24);
    v15 = v9;
    llvm::raw_ostream::operator<<(a2, (uint64_t)&v12);
  }
  v10 = *(_QWORD *)this;
  v12 = &unk_1E8133270;
  v13 = "%08llx <End of list>\n";
  v14 = v10;
  return llvm::raw_ostream::operator<<(a2, (uint64_t)&v12);
}

void llvm::DWARFDebugRangeList::getAbsoluteRanges(uint64_t a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  char **v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v27;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *(uint64_t **)(a1 + 16);
  v4 = *(uint64_t **)(a1 + 24);
  if (v3 != v4)
  {
    v7 = a3;
    v8 = 0;
    v9 = (0xFFFFFFFFFFFFFFFFLL >> (-8 * *(_BYTE *)(a1 + 8))) - 1;
    v25 = v9;
    do
    {
      v10 = *v3;
      if (*v3 == 0xFFFFFFFFFFFFFFFFLL >> (-8 * *(_BYTE *)(a1 + 8)))
      {
        v11 = *((unsigned __int8 *)a2 + 16);
        *(_OWORD *)a2 = *(_OWORD *)(v3 + 1);
        if (!v11)
          *((_BYTE *)a2 + 16) = 1;
      }
      else if (v10 != v9)
      {
        v12 = v3[1];
        v13 = v3[2];
        if (!*((_BYTE *)a2 + 16))
          goto LABEL_11;
        v14 = *a2;
        if (*a2 != v9)
        {
          v10 += v14;
          v12 += v14;
          if (v13 == -1)
            v13 = a2[1];
LABEL_11:
          v15 = (unint64_t)v7[2];
          if ((unint64_t)v8 >= v15)
          {
            v17 = *v7;
            v18 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v17) >> 3) + 1;
            if (v18 > 0xAAAAAAAAAAAAAAALL)
              abort();
            v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)v17) >> 3);
            if (2 * v19 > v18)
              v18 = 2 * v19;
            if (v19 >= 0x555555555555555)
              v20 = 0xAAAAAAAAAAAAAAALL;
            else
              v20 = v18;
            v27 = v20;
            if (v20)
            {
              if (v20 > 0xAAAAAAAAAAAAAAALL)
                sub_1C4764EE4();
              v21 = (char *)operator new(24 * v20);
            }
            else
            {
              v21 = 0;
            }
            v22 = &v21[8 * ((v8 - v17) >> 3)];
            *(_QWORD *)v22 = v10;
            *((_QWORD *)v22 + 1) = v12;
            *((_QWORD *)v22 + 2) = v13;
            v23 = v22;
            if (v8 == v17)
            {
              v7 = a3;
            }
            else
            {
              do
              {
                v24 = *(_OWORD *)(v8 - 24);
                *((_QWORD *)v23 - 1) = *((_QWORD *)v8 - 1);
                *(_OWORD *)(v23 - 24) = v24;
                v23 -= 24;
                v8 -= 24;
              }
              while (v8 != v17);
              v7 = a3;
              v8 = *a3;
            }
            v16 = v22 + 24;
            *v7 = v23;
            v7[1] = v22 + 24;
            v7[2] = &v21[24 * v27];
            if (v8)
              operator delete(v8);
            v9 = v25;
          }
          else
          {
            *(_QWORD *)v8 = v10;
            *((_QWORD *)v8 + 1) = v12;
            v16 = v8 + 24;
            *((_QWORD *)v8 + 2) = v13;
          }
          v7[1] = v16;
          v8 = v16;
        }
      }
      v3 += 3;
    }
    while (v3 != v4);
  }
}

void sub_1C54A5674(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  int v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  void (**v13)(llvm::raw_ostream *__hidden);
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int v20;
  void **v21;
  void *__p[2];
  uint64_t v23;
  _QWORD v24[2];
  int v25;
  uint64_t v26;
  __int16 v27;

  __p[0] = 0;
  __p[1] = 0;
  v23 = 0;
  v14 = 0;
  v18 = 0;
  v19 = 0;
  v13 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v21 = __p;
  v20 = 0;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v9 = *a4;
  v10 = *a5;
  v24[0] = &unk_1E8169860;
  v24[1] = a3;
  v25 = v9;
  v26 = v10;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v13, (uint64_t)v24);
  v11 = v21;
  v12 = operator new();
  v27 = 260;
  v24[0] = v11;
  *(_QWORD *)v12 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v24, (_QWORD *)(v12 + 8));
  *(_QWORD *)(v12 + 32) = a1;
  *(_QWORD *)(v12 + 40) = a2;
  *(_BYTE *)(v12 + 48) = 1;
  *a6 = v12;
  v13 = off_1E81A6E70;
  if (v20 == 1 && v15)
    MEMORY[0x1CAA32F9C](v15, 0x1000C8077774924);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
}

void sub_1C54A57B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  void (**v12)(llvm::raw_ostream *__hidden);
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  void **v20;
  void *__p[2];
  uint64_t v22;
  _QWORD v23[4];
  __int16 v24;

  __p[0] = 0;
  __p[1] = 0;
  v22 = 0;
  v13 = 0;
  v17 = 0;
  v18 = 0;
  v12 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v20 = __p;
  v19 = 0;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v8 = *a4;
  v9 = *a5;
  v23[0] = &unk_1E8169B68;
  v23[1] = "read past end of table when reading %s encoding at offset 0x%llx";
  v23[2] = v8;
  v23[3] = v9;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v12, (uint64_t)v23);
  v10 = v20;
  v11 = operator new();
  v24 = 260;
  v23[0] = v10;
  *(_QWORD *)v11 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v23, (_QWORD *)(v11 + 8));
  *(_QWORD *)(v11 + 32) = a2;
  *(_QWORD *)(v11 + 40) = a3;
  *(_BYTE *)(v11 + 48) = 1;
  *a1 = v11;
  v12 = off_1E81A6E70;
  if (v19 == 1 && v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8077774924);
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
}

int8x16_t **llvm::DWARFDebugRnglist::getAbsoluteRanges@<X0>(int8x16_t **result@<X0>, uint64_t a2@<X1>, _QWORD *(*a3)(__int128 *__return_ptr, uint64_t, _QWORD)@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  int8x16_t *v5;
  int8x16_t *v6;
  int v10;
  int v11;
  char v12;
  __int128 v13;
  uint64_t v14;

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v6 = *result;
  v5 = result[1];
  if (*result != v5)
  {
    do
    {
      v10 = v6->u8[8];
      if (v10 == 1)
      {
        result = (int8x16_t **)a3(&v13, a4, v6[1].u32[2]);
        *(_OWORD *)a2 = v13;
        v12 = v14;
        *(_QWORD *)(a2 + 16) = v14;
        if (!v12)
        {
          *(_QWORD *)a2 = v6[1].i64[1];
          *(_QWORD *)(a2 + 8) = -1;
LABEL_10:
          *(_BYTE *)(a2 + 16) = 1;
        }
      }
      else
      {
        if (v10 != 5)
        {
          if (v6->i8[8])
            __asm { BR              X10 }
          return result;
        }
        v11 = *(unsigned __int8 *)(a2 + 16);
        *(int8x16_t *)a2 = vextq_s8(v6[1], v6[1], 8uLL);
        if (!v11)
          goto LABEL_10;
      }
      v6 = (int8x16_t *)((char *)v6 + 40);
    }
    while (v6 != v5);
  }
  return result;
}

void llvm::RangeListEntry::dump(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t (**v14)(llvm::format_object_base *__hidden);
  const char *v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a6 + 20))
  {
    v9 = *(char **)a1;
    v14 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E8133270;
    v15 = "0x%8.8llx:";
    v16 = v9;
    llvm::raw_ostream::operator<<(a2, (uint64_t)&v14);
    v10 = *(char *)(a1 + 8);
    if (v10 > 7)
    {
      v11 = 0;
      v12 = 0;
    }
    else
    {
      v11 = off_1E816A0F0[v10];
      v12 = qword_1C8651AE8[v10];
    }
    v14 = &off_1E816A0E0;
    v15 = " [%s%*c";
    v16 = v11;
    v17 = v12 + a4 + 1;
    v18 = 93;
    llvm::raw_ostream::operator<<(a2, (uint64_t)&v14);
    if (*(_BYTE *)(a1 + 8))
    {
      v13 = (_WORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v13 > 1uLL)
      {
        *v13 = 8250;
        *((_QWORD *)a2 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(a2, ": ", 2uLL);
      }
    }
  }
  __asm { BR              X10 }
}

uint64_t sub_1C54A63BC@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return llvm::DWARFUnit::getAddrOffsetSectionItem(*a1, a2, a3);
}

uint64_t sub_1C54A63C4(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(char *)(a1 + 32));
}

void llvm::DWARFDie::getFullName(llvm::DWARFUnit **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  llvm::DWARFUnit *v8;
  llvm::DWARFUnit *v9;
  llvm::DWARFUnit *v10;
  uint64_t v11;
  __int16 v12;

  if (llvm::DWARFDie::getShortName((llvm::DWARFDie *)a1))
  {
    v6 = (uint64_t *)a1[1];
    v7 = v6[2];
    if (!v7 || *(_WORD *)(v7 + 4) != 16647)
    {
      v11 = a2;
      v12 = 1;
      v8 = *a1;
      v9 = sub_1C54A8CE4(&v11, v8, v6, a3);
      sub_1C54A9800(&v11, v8, v6, v9, v10, 0);
    }
  }
}

void llvm::dumpTypeUnqualifiedName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::DWARFUnit *v3;
  uint64_t *v4;
  llvm::DWARFUnit *v5;
  llvm::DWARFUnit *v6;
  uint64_t v7;
  __int16 v8;

  v7 = a2;
  v8 = 1;
  v3 = *(llvm::DWARFUnit **)a1;
  v4 = *(uint64_t **)(a1 + 8);
  v5 = sub_1C54A8CE4(&v7, *(llvm::DWARFUnit **)a1, v4, a3);
  sub_1C54A9800(&v7, v3, v4, v5, v6, 0);
}

BOOL llvm::DWARFDie::isSubprogramDIE(llvm::DWARFDie *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 16);
  return v1 && *(unsigned __int16 *)(v1 + 4) == 46;
}

BOOL llvm::DWARFDie::isSubroutineDIE(llvm::DWARFDie *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 16);
  if (v1)
    LODWORD(v1) = *(unsigned __int16 *)(v1 + 4);
  return (_DWORD)v1 == 46 || (_DWORD)v1 == 29;
}

void llvm::DWARFDie::findRecursively(_OWORD *a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  unsigned int v7;
  char *v8;
  llvm::DWARFUnit *v9;
  llvm::DWARFUnit *v10;
  BOOL v11;
  llvm::DWARFUnit *AttributeValueAsReferencedDie;
  llvm::DWARFUnit *v13;
  llvm::DWARFUnit *v14;
  llvm::DWARFUnit *v15;
  uint64_t v16;
  llvm::DWARFUnit **v17;
  llvm::DWARFUnit *v18;
  llvm::DWARFUnit *v19;
  llvm::DWARFUnit *v20;
  llvm::DWARFUnit *v21;
  unint64_t v22;
  llvm::DWARFUnit **v23;
  llvm::DWARFUnit *v24;
  llvm::DWARFUnit *v25;
  llvm::DWARFUnit *v26[2];
  void *v27[2];
  _QWORD v28[7];
  _QWORD *v29[2];
  void *v30;
  uint64_t v31;
  _OWORD v32[3];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v29[1] = 0;
  v30 = v32;
  v32[0] = *a1;
  v31 = 0x300000001;
  v27[0] = v28;
  v27[1] = (void *)0x300000000;
  v28[6] = v29;
  v29[0] = 0;
  sub_1C54A6768((uint64_t)v27, (uint64_t)a1);
  v7 = v31;
  while (v7)
  {
    v8 = (char *)v30 + 16 * v7;
    v10 = (llvm::DWARFUnit *)*((_QWORD *)v8 - 2);
    v9 = (llvm::DWARFUnit *)*((_QWORD *)v8 - 1);
    LODWORD(v31) = --v7;
    v26[0] = v10;
    v26[1] = v9;
    if (v10)
      v11 = v9 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      llvm::DWARFDie::find(v26, a2, a3, a4);
      if (a4[48])
        goto LABEL_3;
      AttributeValueAsReferencedDie = llvm::DWARFDie::getAttributeValueAsReferencedDie(v26, 49);
      v24 = AttributeValueAsReferencedDie;
      v25 = v13;
      if (AttributeValueAsReferencedDie)
      {
        v14 = v13;
        if (v13)
        {
          v15 = AttributeValueAsReferencedDie;
          if ((sub_1C54A6768((uint64_t)v27, (uint64_t)&v24) & 0x100000000) != 0)
          {
            v16 = v31;
            if (v31 >= (unint64_t)HIDWORD(v31))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, (uint64_t)v32, v31 + 1, 16);
              v16 = v31;
            }
            v17 = (llvm::DWARFUnit **)((char *)v30 + 16 * v16);
            *v17 = v15;
            v17[1] = v14;
            LODWORD(v31) = v31 + 1;
          }
        }
      }
      v18 = llvm::DWARFDie::getAttributeValueAsReferencedDie(v26, 71);
      v24 = v18;
      v25 = v19;
      if (v18 && (v20 = v19) != 0)
      {
        v21 = v18;
        v22 = sub_1C54A6768((uint64_t)v27, (uint64_t)&v24);
        v7 = v31;
        if ((v22 & 0x100000000) != 0)
        {
          if (v31 >= HIDWORD(v31))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, (uint64_t)v32, v31 + 1, 16);
            v7 = v31;
          }
          v23 = (llvm::DWARFUnit **)((char *)v30 + 16 * v7);
          *v23 = v21;
          v23[1] = v20;
          v7 = v31 + 1;
          LODWORD(v31) = v31 + 1;
        }
      }
      else
      {
        v7 = v31;
      }
    }
  }
  *a4 = 0;
  a4[48] = 0;
LABEL_3:
  sub_1C6143384(v29[0]);
  if (v27[0] != v28)
    free(v27[0]);
  if (v30 != v32)
    free(v30);
}

unint64_t sub_1C54A6768(uint64_t a1, uint64_t a2)
{
  int64x2_t *v5;
  uint64_t v6;
  int64x2_t v7;
  uint64_t v8;
  int64x2_t *v9;
  int32x2_t v10;
  int64x2_t v11;

  if (*(_QWORD *)(a1 + 80))
    return ((unint64_t)sub_1C54AC314((uint64_t **)(a1 + 64), *(unint64_t **)(a2 + 8), (_OWORD *)a2) << 32) | 1;
  v5 = *(int64x2_t **)a1;
  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6)
  {
    v7 = *(int64x2_t *)a2;
    v8 = 16 * v6;
    v9 = *(int64x2_t **)a1;
    while (1)
    {
      v10 = vmovn_s64(vceqq_s64(*v9, v7));
      if ((v10.i32[1] & v10.i32[0] & 1) != 0)
        break;
      ++v9;
      v8 -= 16;
      if (!v8)
        goto LABEL_11;
    }
    if (v8)
      return 1;
LABEL_11:
    if (v6 > 2)
    {
      do
      {
        sub_1C54AC314((uint64_t **)(a1 + 64), *(unint64_t **)(*(_QWORD *)a1 + 16 * v6 - 8), (_OWORD *)(*(_QWORD *)a1 + 16 * v6 - 16));
        LODWORD(v6) = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v6;
      }
      while ((_DWORD)v6);
      sub_1C54AC314((uint64_t **)(a1 + 64), *(unint64_t **)(a2 + 8), (_OWORD *)a2);
      return 0x100000001;
    }
  }
  else
  {
    v7 = *(int64x2_t *)a2;
  }
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    v11 = v7;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 16);
    v7 = v11;
    v5 = *(int64x2_t **)a1;
    v6 = *(unsigned int *)(a1 + 8);
  }
  v5[v6] = v7;
  ++*(_DWORD *)(a1 + 8);
  return 0x100000001;
}

llvm::DWARFUnit *llvm::DWARFDie::getAttributeValueAsReferencedDie(llvm::DWARFUnit **a1, int a2)
{
  _BYTE v4[56];

  llvm::DWARFDie::find(a1, a2, v4);
  if (v4[48])
    return llvm::DWARFDie::getAttributeValueAsReferencedDie((llvm::DWARFDie *)a1, (const llvm::DWARFFormValue *)v4);
  else
    return 0;
}

uint64_t llvm::DWARFDie::getRangesBaseAttribute(llvm::DWARFUnit **this)
{
  int v2;
  unsigned __int16 v3;
  uint64_t v4;
  char v5;

  v2 = 556925044;
  llvm::DWARFDie::find(this, (unsigned __int16 *)&v2, 2, &v3);
  if (!v5)
    return 0;
  if (llvm::DWARFFormValue::isFormClass(&v3, 8))
    return v4;
  return 0;
}

uint64_t llvm::DWARFDie::getLocBaseAttribute(llvm::DWARFUnit **this)
{
  unsigned __int16 v2;
  uint64_t v3;
  char v4;

  llvm::DWARFDie::find(this, 140, &v2);
  if (!v4)
    return 0;
  if (llvm::DWARFFormValue::isFormClass(&v2, 8))
    return v3;
  return 0;
}

unint64_t llvm::DWARFDie::getHighPC(llvm::DWARFUnit **this, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t AsUnsignedConstant;
  char v7;
  _QWORD v8[6];
  char v9;
  unint64_t v10;
  char v11;

  if (0xFFFFFFFFFFFFFFFFLL >> (-8 * *((_BYTE *)*this + 34)) == a2)
  {
    LOBYTE(v2) = 0;
    v3 = 0;
    return v2 | (v3 << 8);
  }
  llvm::DWARFDie::find(this, 18, v8);
  if (!v9)
  {
    v3 = 0;
LABEL_6:
    LOBYTE(v2) = 0;
    return v2 | (v3 << 8);
  }
  llvm::DWARFFormValue::getAsSectionedAddress(v8, (uint64_t)&v10);
  LOBYTE(v2) = v10;
  if (v11)
    v3 = v10 >> 8;
  else
    v3 = 0;
  if (!v11)
  {
    AsUnsignedConstant = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v8);
    if (v7)
    {
      v2 = AsUnsignedConstant + a2;
      v3 = v2 >> 8;
      return v2 | (v3 << 8);
    }
    goto LABEL_6;
  }
  return v2 | (v3 << 8);
}

uint64_t llvm::DWARFDie::addressRangeContainsAddress(llvm::DWARFDie *this, unint64_t a2)
{
  char v3;
  char *v4;
  char *v5;
  BOOL v6;
  uint64_t v7;
  char *v9;
  char *v10;
  void *__p;
  char *v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  llvm::DWARFDie::getAddressRanges(this, (uint64_t)&__p);
  v3 = v13;
  v4 = (char *)__p;
  if ((v13 & 1) != 0)
  {
    __p = 0;
    v9 = v4;
    sub_1C4D62BD4(&v9, &v10);
    if (v9)
      (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
    v7 = 0;
    v3 = v13;
    v4 = (char *)__p;
LABEL_16:
    if ((v3 & 1) == 0)
      goto LABEL_17;
    goto LABEL_20;
  }
  if (__p != v12)
  {
    v5 = (char *)__p;
    do
    {
      v6 = *(_QWORD *)v5 <= a2 && *((_QWORD *)v5 + 1) > a2;
      v7 = v6;
      if (v6)
        break;
      v5 += 24;
    }
    while (v5 != v12);
    goto LABEL_16;
  }
  v7 = 0;
  if ((v13 & 1) == 0)
  {
LABEL_17:
    if (v4)
    {
      v12 = v4;
      operator delete(v4);
    }
    return v7;
  }
LABEL_20:
  __p = 0;
  if (v4)
    (*(void (**)(char *))(*(_QWORD *)v4 + 8))(v4);
  return v7;
}

void llvm::DWARFDie::getLocations(llvm::DWARFUnit **a1@<X0>, llvm::dwarf *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v7;
  const char *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t LoclistOffset;
  char v13;
  size_t v14;
  const void *v15;
  uint64_t v16;
  const char *v18;
  const char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  void *v26;
  size_t v27;
  void **v29;
  uint64_t v30;
  llvm::dwarf *v31;
  unsigned int v32[2];
  const void *v33;
  char v34;
  void *__p;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  const char *v39;
  const char *v40;
  const char *v41;
  __int16 v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  __int128 v46;
  int v47;
  void **p_p;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  llvm::DWARFDie::find(a1, (int)a2, &v31);
  if (!v34)
  {
    if (!atomic_load(qword_1ED836B58))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
    v7 = qword_1ED836B58[0];
    v8 = llvm::dwarf::AttributeString(a2);
    __p = 0;
    v36 = 0;
    v37 = 0;
    DWORD2(v43) = 0;
    LOBYTE(v46) = 0;
    *((_QWORD *)&v46 + 1) = 0;
    *(_QWORD *)&v43 = &unk_1E81A7208;
    p_p = &__p;
    v47 = 0;
    v45 = 0;
    v44 = 0uLL;
    v38 = (const char *)&off_1E8132A78;
    v39 = "No %s";
    v40 = v8;
LABEL_5:
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v43, (uint64_t)&v38);
    v9 = p_p;
    v10 = operator new();
    v42 = 260;
    v38 = (const char *)v9;
    *(_QWORD *)v10 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v38, (_QWORD *)(v10 + 8));
    *(_QWORD *)(v10 + 32) = 3;
    *(_QWORD *)(v10 + 40) = v7;
    *(_BYTE *)(v10 + 48) = 1;
    *(_QWORD *)&v43 = off_1E81A6E70;
    if (v47 == 1 && (_QWORD)v44)
      MEMORY[0x1CAA32F9C](v44, 0x1000C8077774924);
    if (SHIBYTE(v37) < 0)
      operator delete(__p);
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v10;
    return;
  }
  if (!llvm::DWARFFormValue::isFormClass((unsigned __int16 *)&v31, 8))
  {
    if ((unsigned __int16)v31 > 0x2Du
      || ((0x618uLL >> (char)v31) & 1) == 0 && (unsigned __int16)v31 != 30 && (unsigned __int16)v31 != 24)
    {
      if (!atomic_load(qword_1ED836B58))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
      v7 = qword_1ED836B58[0];
      v18 = llvm::dwarf::AttributeString(a2);
      v19 = llvm::dwarf::FormEncodingString((llvm::dwarf *)(unsigned __int16)v31);
      __p = 0;
      v36 = 0;
      v37 = 0;
      DWORD2(v43) = 0;
      LOBYTE(v46) = 0;
      *((_QWORD *)&v46 + 1) = 0;
      *(_QWORD *)&v43 = &unk_1E81A7208;
      p_p = &__p;
      v47 = 0;
      v45 = 0;
      v44 = 0uLL;
      v38 = (const char *)&unk_1E813E940;
      v39 = "Unsupported %s encoding: %s";
      v40 = v18;
      v41 = v19;
      goto LABEL_5;
    }
    v14 = *(_QWORD *)v32;
    v15 = v33;
    LOBYTE(v43) = 0;
    BYTE8(v44) = 0;
    v45 = (char *)&v47;
    v46 = xmmword_1C6612EF0;
    if (*(_QWORD *)v32 < 5uLL)
    {
      v16 = 0;
      v20 = 0;
      if (!*(_QWORD *)v32)
        goto LABEL_26;
    }
    else
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v45, &v47, *(unint64_t *)v32, 1);
      v16 = v46;
    }
    memcpy(&v45[v16], v15, v14);
    v20 = v46;
LABEL_26:
    v21 = v20 + v14;
    *(_QWORD *)&v46 = v21;
    v22 = (char *)operator new(0x40uLL);
    v23 = v22;
    v24 = v22 + 64;
    v25 = v44;
    *(_OWORD *)v22 = v43;
    *((_OWORD *)v22 + 1) = v25;
    v26 = v22 + 56;
    *((_QWORD *)v22 + 4) = v22 + 56;
    *(_OWORD *)(v22 + 40) = xmmword_1C6612EF0;
    if (!v21)
      goto LABEL_31;
    if (v21 >= 5)
    {
      v29 = (void **)(v22 + 32);
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(v22 + 32), v26, v21, 1);
      v27 = v46;
      if (!(_QWORD)v46)
        goto LABEL_30;
      v26 = *v29;
    }
    else
    {
      v27 = v21;
    }
    memcpy(v26, v45, v27);
LABEL_30:
    *((_QWORD *)v23 + 5) = v21;
LABEL_31:
    *(_BYTE *)(a3 + 24) &= ~1u;
    *(_QWORD *)a3 = v23;
    *(_QWORD *)(a3 + 8) = v24;
    *(_QWORD *)(a3 + 16) = v24;
    v39 = 0;
    v40 = 0;
    v38 = 0;
    __p = &v38;
    sub_1C548DA28((void ***)&__p);
    if (v45 != (char *)&v47)
      free(v45);
    return;
  }
  v11 = *(_QWORD *)v32;
  if ((unsigned __int16)v31 != 34)
  {
LABEL_14:
    llvm::DWARFUnit::findLoclistFromOffset(*a1, v11, a3);
    return;
  }
  LoclistOffset = llvm::DWARFUnit::getLoclistOffset(*a1, v32[0]);
  if (v13)
  {
    v11 = LoclistOffset;
    goto LABEL_14;
  }
  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  *(_QWORD *)&v43 = 3;
  *((_QWORD *)&v43 + 1) = qword_1ED836B58[0];
  v38 = "Loclist table not found";
  sub_1C5DF1730((_BYTE **)&v38, (uint64_t *)&v43, &v30);
  *(_BYTE *)(a3 + 24) |= 1u;
  *(_QWORD *)a3 = v30;
}

char *llvm::DWARFDie::getSubroutineName(llvm::DWARFDie *a1, int a2)
{
  uint64_t v2;
  int v3;
  BOOL v4;

  v2 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 16);
  if (v2 && ((v3 = *(unsigned __int16 *)(v2 + 4), v3 != 46) ? (v4 = v3 == 29) : (v4 = 1), v4))
    return llvm::DWARFDie::getName(a1, a2);
  else
    return 0;
}

char *llvm::DWARFDie::getName(llvm::DWARFDie *a1, int a2)
{
  char *result;

  if (!*(_QWORD *)a1)
    return 0;
  result = 0;
  if (a2)
  {
    if (*((_QWORD *)a1 + 1))
    {
      if (a2 != 2)
        return llvm::DWARFDie::getShortName(a1);
      result = llvm::DWARFDie::getLinkageName(a1);
      if (!result)
        return llvm::DWARFDie::getShortName(a1);
    }
  }
  return result;
}

unint64_t llvm::DWARFDie::getDeclLine(llvm::DWARFDie *this)
{
  unint64_t result;
  char v2;
  unsigned __int16 v3;
  _BYTE v4[56];

  v3 = 59;
  llvm::DWARFDie::findRecursively(this, &v3, 1, v4);
  if (!v4[48])
    return 0;
  result = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v4);
  if (!v2)
    return 0;
  return result;
}

void llvm::DWARFDie::getDeclFile(_OWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  void *v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  unsigned __int16 v9[24];
  char v10;

  LOWORD(v6) = 58;
  llvm::DWARFDie::findRecursively(a1, (unsigned __int16 *)&v6, 1, v9);
  if (v10 && (llvm::DWARFFormValue::getAsFile(v9, a2, (uint64_t)&v6), v8))
  {
    if (SHIBYTE(v7) < 0)
    {
      v5 = (void *)v6;
      sub_1C47EBC30((_BYTE *)a3, (void *)v6, *((unint64_t *)&v6 + 1));
      operator delete(v5);
    }
    else
    {
      *(_OWORD *)a3 = v6;
      *(_QWORD *)(a3 + 16) = v7;
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
}

uint64_t llvm::DWARFDie::getCallerFrame(llvm::DWARFUnit **this, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int v10;
  unsigned int AsUnsignedConstant;
  char v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t result;
  unsigned int v20;
  char v21;
  _BYTE v22[48];
  unsigned __int8 v23;

  llvm::DWARFDie::find(this, 88, v22);
  v10 = v23;
  if (v23)
  {
    AsUnsignedConstant = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v22);
    if (v12)
      v10 = AsUnsignedConstant;
    else
      v10 = 0;
  }
  *a2 = v10;
  llvm::DWARFDie::find(this, 89, v22);
  v13 = v23;
  if (v23)
  {
    v14 = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v22);
    if (v15)
      v13 = v14;
    else
      v13 = 0;
  }
  *a3 = v13;
  llvm::DWARFDie::find(this, 87, v22);
  v16 = v23;
  if (v23)
  {
    v17 = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v22);
    if (v18)
      v16 = v17;
    else
      v16 = 0;
  }
  *a4 = v16;
  result = (uint64_t)llvm::DWARFDie::find(this, 8502, v22);
  v20 = v23;
  if (v23)
  {
    result = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v22);
    if (v21)
      v20 = result;
    else
      v20 = 0;
  }
  *a5 = v20;
  return result;
}

void llvm::DWARFDie::dump(uint64_t *a1, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int ULEB128;
  uint64_t v18;
  void *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  llvm::raw_ostream *v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  _BYTE *v32;
  int v33;
  int v34;
  uint64_t v35;
  llvm::raw_ostream *FirstChild;
  unsigned int *v37;
  const llvm::DWARFAbbreviationDeclaration *v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t i;
  unsigned int *v42;
  llvm::raw_ostream *v43[2];
  _OWORD v44[4];
  uint64_t v45;
  unint64_t v46;
  uint64_t v47[2];
  char v48;
  char v49;
  uint64_t v50;
  uint64_t *v51;
  _QWORD v52[11];
  _QWORD v53[11];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _OWORD v57[2];
  uint64_t v58;
  int v59;
  _QWORD v60[12];

  v60[11] = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  if (!*a1)
    return;
  v6 = (uint64_t *)a1[1];
  if (!v6)
    return;
  v10 = *(uint64_t **)(v4 + 16);
  v11 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 520);
  v12 = *(_BYTE *)(v4 + 208);
  v13 = *(_BYTE *)(v4 + 34);
  v14 = v10[1];
  v47[0] = *v10;
  v47[1] = v14;
  v48 = v12;
  v49 = v13;
  v50 = v11;
  v51 = v10;
  v15 = *v6;
  v46 = *v6;
  if (!*(_BYTE *)(a4 + 17))
  {
    v16 = v15;
    goto LABEL_5;
  }
  sub_1C624C4A4((uint64_t)&v54, (__int128 *)a4);
  LOWORD(v55) = 0;
  v22 = *a1;
  if (*a1)
  {
    v23 = a1[1];
    if (v23)
    {
      v24 = *(_DWORD *)(v23 + 8);
      if (v24 != -1)
      {
        v25 = *(_QWORD *)(v22 + 288) + 24 * v24;
        goto LABEL_22;
      }
    }
    v22 = 0;
  }
  v25 = 0;
LABEL_22:
  sub_1C624C4A4((uint64_t)v60, &v54);
  LODWORD(a3) = sub_1C54A783C(v22, v25, (uint64_t)a2, a3, (uint64_t)v60, 0);
  sub_1C624C568(v60);
  sub_1C624C568(&v54);
  v16 = v46;
LABEL_5:
  if (v14 > v16)
  {
    ULEB128 = llvm::DataExtractor::getULEB128(v47, (uint64_t *)&v46, 0);
    if (*(_BYTE *)(a4 + 15))
    {
      llvm::WithColor::WithColor((uint64_t)v43, (uint64_t)a2, 0, 0);
      *(_QWORD *)&v54 = &unk_1E8133270;
      *((_QWORD *)&v54 + 1) = "\n0x%8.8llx: ";
      *(_QWORD *)&v55 = v15;
      llvm::raw_ostream::operator<<(v43[0], (uint64_t)&v54);
      if (LODWORD(v43[1]) != 2 && (LODWORD(v43[1]) == 1 || (llvm::WithColor::AutoDetectFunction(v43[0]) & 1) != 0))
        (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v43[0] + 32))(v43[0]);
    }
    if (ULEB128)
    {
      v18 = *(_QWORD *)(a1[1] + 16);
      if (v18)
      {
        llvm::WithColor::WithColor((uint64_t)v43, (uint64_t)a2, 2, 0);
        v26 = v43[0];
        llvm::raw_ostream::indent(v43[0], a3);
        v27 = 0;
        v28 = *(_QWORD *)(a1[1] + 16);
        if (v28)
          v27 = *(_WORD *)(v28 + 4);
        *(_QWORD *)&v54 = "{0}";
        *((_QWORD *)&v54 + 1) = 3;
        *(_QWORD *)&v55 = v57;
        *((_QWORD *)&v55 + 1) = 1;
        *(_QWORD *)&v56 = &unk_1E8169568;
        WORD4(v56) = v27;
        *(_QWORD *)&v57[0] = &v56;
        sub_1C639D338((uint64_t)&v54, v26);
        if (LODWORD(v43[1]) != 2 && (LODWORD(v43[1]) == 1 || (llvm::WithColor::AutoDetectFunction(v43[0]) & 1) != 0))
          (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v43[0] + 32))(v43[0]);
        if (*(_BYTE *)(a4 + 20))
        {
          v29 = 0x2A00000000;
          if (!*(_BYTE *)(v18 + 7))
            v29 = 0x2000000000;
          *(_QWORD *)&v54 = &off_1E816A1A0;
          *((_QWORD *)&v54 + 1) = " [%u] %c";
          *(_QWORD *)&v55 = v29 | ULEB128;
          llvm::raw_ostream::operator<<(a2, (uint64_t)&v54);
          v30 = *(_DWORD *)(a1[1] + 8);
          if (v30 != -1)
          {
            v31 = *(_QWORD *)(*(_QWORD *)(*a1 + 288) + 24 * v30);
            *(_QWORD *)&v54 = &unk_1E8133270;
            *((_QWORD *)&v54 + 1) = " (0x%8.8llx)";
            *(_QWORD *)&v55 = v31;
            llvm::raw_ostream::operator<<(a2, (uint64_t)&v54);
          }
        }
        v32 = (_BYTE *)*((_QWORD *)a2 + 4);
        if ((unint64_t)v32 >= *((_QWORD *)a2 + 3))
        {
          llvm::raw_ostream::write(a2, 10);
        }
        else
        {
          *((_QWORD *)a2 + 4) = v32 + 1;
          *v32 = 10;
        }
        llvm::DWARFDie::attributes((llvm::DWARFDie *)a1, (uint64_t)&v54);
        v45 = v58;
        v44[1] = v56;
        v44[2] = v57[0];
        v44[3] = v57[1];
        *(_OWORD *)v43 = v54;
        v44[0] = v55;
        v33 = v59;
        while ((_DWORD)v45 != v33)
        {
          sub_1C624C4A4((uint64_t)v53, (__int128 *)a4);
          sub_1C54A7998(a2, a1, (uint64_t)v44, a3, (uint64_t)v53);
          sub_1C624C568(v53);
          v38 = (const llvm::DWARFAbbreviationDeclaration *)*((_QWORD *)v43[1] + 2);
          if (v38)
            llvm::DWARFDie::attribute_iterator::updateForIndex((uint64_t)v43, v38, v45 + 1);
        }
        if (*(_BYTE *)(a4 + 16))
        {
          v34 = *(_DWORD *)(a4 + 4);
          if (v34)
          {
            if (*a1 && (v35 = a1[1]) != 0)
            {
              FirstChild = (llvm::raw_ostream *)llvm::DWARFUnit::getFirstChild(*a1, v35);
              v37 = v39;
            }
            else
            {
              FirstChild = 0;
              v37 = 0;
            }
            v43[0] = FirstChild;
            v43[1] = (llvm::raw_ostream *)v37;
            *(_DWORD *)(a4 + 4) = v34 - 1;
            sub_1C624C4A4((uint64_t)&v54, (__int128 *)a4);
            BYTE1(v55) = 0;
            if (FirstChild)
            {
              if (v37)
              {
                v40 = (a3 + 2);
                sub_1C624C4A4((uint64_t)v52, &v54);
                llvm::DWARFDie::dump(v43, a2, v40, v52);
                sub_1C624C568(v52);
                for (i = v37[3]; (_DWORD)i; i = v42[3])
                {
                  v42 = (unsigned int *)(*((_QWORD *)FirstChild + 36) + 24 * i);
                  v43[0] = FirstChild;
                  v43[1] = (llvm::raw_ostream *)v42;
                  sub_1C624C4A4((uint64_t)v52, &v54);
                  llvm::DWARFDie::dump(v43, a2, v40, v52);
                  sub_1C624C568(v52);
                }
              }
            }
            sub_1C624C568(&v54);
          }
        }
      }
      else
      {
        v19 = (void *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v19 > 0x3DuLL)
        {
          qmemcpy(v19, "Abbreviation code not found in 'debug_abbrev' class for code: ", 62);
          *((_QWORD *)a2 + 4) += 62;
        }
        else
        {
          llvm::raw_ostream::write(a2, "Abbreviation code not found in 'debug_abbrev' class for code: ", 0x3EuLL);
        }
        sub_1C5E21910(a2, ULEB128, 0, 0, 0);
        v20 = (_BYTE *)*((_QWORD *)a2 + 4);
        if ((unint64_t)v20 >= *((_QWORD *)a2 + 3))
        {
          llvm::raw_ostream::write(a2, 10);
        }
        else
        {
          *((_QWORD *)a2 + 4) = v20 + 1;
          *v20 = 10;
        }
      }
    }
    else
    {
      llvm::raw_ostream::indent(a2, a3);
      v21 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v21) > 4)
      {
        *(_BYTE *)(v21 + 4) = 10;
        *(_DWORD *)v21 = 1280070990;
        *((_QWORD *)a2 + 4) += 5;
      }
      else
      {
        llvm::raw_ostream::write(a2, "NULL\n", 5uLL);
      }
    }
  }
}

uint64_t sub_1C54A783C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[11];
  _QWORD v17[12];

  v17[11] = *MEMORY[0x1E0C80C00];
  v15[0] = a1;
  v15[1] = a2;
  if (a1 && a2 && *(_DWORD *)(a5 + 8) - 1 >= a6)
  {
    v11 = *(_DWORD *)(a2 + 8);
    if (v11 == -1)
    {
      v12 = 0;
      v13 = 0;
    }
    else
    {
      v13 = a1;
      v12 = *(_QWORD *)(a1 + 288) + 24 * v11;
    }
    sub_1C624C4A4((uint64_t)v17, (__int128 *)a5);
    v14 = sub_1C54A783C(v13, v12, a3, a4, v17, a6 + 1);
    sub_1C624C568(v17);
    sub_1C624C4A4((uint64_t)v16, (__int128 *)a5);
    llvm::DWARFDie::dump(v15, a3, v14, v16);
    sub_1C624C568(v16);
    return (v14 + 2);
  }
  return a4;
}

uint64_t llvm::DWARFDie::getParent(llvm::DWARFDie *this)
{
  uint64_t result;
  uint64_t v3;

  result = *(_QWORD *)this;
  if (result)
  {
    v3 = *((_QWORD *)this + 1);
    if (!v3 || *(_DWORD *)(v3 + 8) == -1)
      return 0;
  }
  return result;
}

void sub_1C54A7998(llvm::raw_ostream *a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5)
{
  char *v5;
  BOOL v6;
  size_t v12;
  void *v13;
  _WORD *v14;
  uint64_t v15;
  _WORD *v16;
  llvm::dwarf *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t AsUnsignedConstant;
  char *CompilationDir;
  uint64_t v22;
  llvm::dwarf *v23;
  char v24;
  void *v25;
  size_t v26;
  size_t v27;
  int v28;
  size_t v29;
  std::string *v30;
  void *v31;
  const void *p_p;
  char v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  std::string::size_type v38;
  void *v39;
  char v40;
  std::string::value_type v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *LoclistOffset;
  char v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  uint64_t v50;
  llvm::MCRegisterInfo *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned __int8 v54;
  char v55;
  __int16 v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  unint64_t v60;
  _WORD *v61;
  const char *v62;
  size_t v63;
  const char *v64;
  size_t v65;
  void *v66;
  char *v67;
  char *v68;
  _WORD *v69;
  std::string::size_type v70;
  char *LinkageName;
  char *ShortName;
  const char *p_dst;
  size_t v74;
  _BYTE *v75;
  _BYTE *v76;
  size_t v77;
  size_t v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  llvm::DWARFUnit *v82;
  uint64_t v83;
  uint64_t v84;
  llvm::DWARFUnit *v85;
  const char *v86;
  size_t v87;
  _BYTE *v88;
  _BYTE *v89;
  llvm::raw_ostream *v90;
  int v91;
  unint64_t RnglistOffset;
  char v93;
  uint64_t *v94;
  uint64_t *v95;
  unsigned __int8 v96;
  unsigned int v97;
  _BYTE *v98;
  void *v99;
  _WORD *v100;
  const std::error_category *v101;
  char *v102;
  std::string *v103;
  void **v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  std::string v109;
  uint64_t v110;
  _OWORD v111[3];
  char *__dst;
  size_t v113;
  unsigned __int8 v114;
  void *__p;
  __int128 v116;
  __int16 v117;
  unsigned __int16 v118;
  void *v119[2];
  uint64_t v120;
  void *v121[3];
  char v122;
  _QWORD v123[11];
  _BYTE v124[88];
  __int128 v125[5];
  __int128 v126[5];
  _BYTE v127[88];
  _QWORD v128[11];
  char __s[16];
  __int128 v130;
  std::string *v131;
  char v132;
  __int16 v133;
  __int16 v134;
  std::string v135;
  uint64_t v136;
  uint64_t (**v137)(llvm::detail::format_adapter *__hidden);
  unsigned __int16 *v138;
  uint64_t (***v139)(llvm::detail::format_adapter *__hidden);
  int v140;
  void **v141;
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  if (*a2)
    v6 = a2[1] == 0;
  else
    v6 = 1;
  if (v6)
    return;
  strcpy(__s, "            ");
  v12 = strlen(__s);
  v13 = (void *)*((_QWORD *)a1 + 4);
  if (v12 <= *((_QWORD *)a1 + 3) - (_QWORD)v13)
  {
    if (v12)
    {
      memcpy(v13, __s, v12);
      *((_QWORD *)a1 + 4) += v12;
    }
  }
  else
  {
    llvm::raw_ostream::write(a1, __s, v12);
  }
  llvm::raw_ostream::indent(a1, a4 + 2);
  v118 = *(_WORD *)(a3 + 12);
  llvm::WithColor::WithColor((uint64_t)&v130, (uint64_t)a1, 3, 0);
  v135.__r_.__value_.__r.__words[0] = (std::string::size_type)"{0}";
  v135.__r_.__value_.__l.__size_ = 3;
  v135.__r_.__value_.__r.__words[2] = (std::string::size_type)&v139;
  v136 = 1;
  v137 = &off_1E816A140;
  v138 = &v118;
  v139 = &v137;
  sub_1C639D338((uint64_t)&v135, (llvm::raw_ostream *)v130);
  if (DWORD2(v130) != 2 && (DWORD2(v130) == 1 || (llvm::WithColor::AutoDetectFunction(v130) & 1) != 0))
    (*(void (**)(_QWORD))(*(_QWORD *)v130 + 32))(v130);
  v14 = (_WORD *)(a3 + 16);
  v117 = *(_WORD *)(a3 + 16);
  if (*(_BYTE *)(a5 + 20) || *(_BYTE *)(a5 + 18))
  {
    v135.__r_.__value_.__r.__words[0] = (std::string::size_type)" [{0}]";
    v135.__r_.__value_.__l.__size_ = 6;
    v135.__r_.__value_.__r.__words[2] = (std::string::size_type)&v139;
    v136 = 1;
    v137 = (uint64_t (**)(llvm::detail::format_adapter *__hidden))&unk_1E816A170;
    v138 = (unsigned __int16 *)&v117;
    v139 = &v137;
    sub_1C639D338((uint64_t)&v135, a1);
  }
  v15 = *a2;
  v16 = (_WORD *)*((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 3) - (_QWORD)v16 > 1uLL)
  {
    *v16 = 10249;
    *((_QWORD *)a1 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a1, "\t(", 2uLL);
  }
  __p = 0;
  v116 = 0uLL;
  v17 = (llvm::dwarf *)v118;
  if (v118 == 88 || v118 == 58)
  {
    llvm::DWARFContext::getLineTableForUnit(*(llvm::DWARFContext **)(v15 + 8), (llvm::DWARFUnit *)v15);
    if (!v18)
      goto LABEL_46;
    v19 = v18;
    AsUnsignedConstant = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)(a3 + 16));
    CompilationDir = llvm::DWARFUnit::getCompilationDir((llvm::DWARFUnit **)v15);
    v5 = CompilationDir;
    v22 = CompilationDir ? strlen(CompilationDir) : 0;
    if (!llvm::DWARFDebugLine::Prologue::getFileNameByIndex(v19 + 8, AsUnsignedConstant, (uint64_t)v5, v22, 4, (uint64_t)&__p, 0))goto LABEL_46;
    if (v116 >= 0)
      v29 = HIBYTE(v116) & 0x7F;
    else
      v29 = v116;
    v30 = &v135;
    sub_1C484371C((uint64_t)&v135, v29 + 1);
    if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v30 = (std::string *)v135.__r_.__value_.__r.__words[0];
    v30->__r_.__value_.__s.__data_[0] = 34;
    v31 = (char *)&v30->__r_.__value_.__l.__data_ + 1;
    if (v29)
    {
      if (v116 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      memmove(v31, p_p, v29);
    }
    v5 = (char *)&v116;
    *((_BYTE *)v31 + v29) = 0;
    std::string::push_back(&v135, 34);
    *(_QWORD *)&v130 = v135.__r_.__value_.__l.__size_;
    v25 = (void *)v135.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)&v130 + 7) = *(std::string::size_type *)((char *)&v135.__r_.__value_.__r.__words[1] + 7);
    v33 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
    memset(&v135, 0, sizeof(v135));
    if (SHIBYTE(v116) < 0)
    {
      operator delete(__p);
      __p = v25;
      *(_QWORD *)&v116 = v130;
      *(_QWORD *)((char *)&v116 + 7) = *(_QWORD *)((char *)&v130 + 7);
      HIBYTE(v116) = v33;
      if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v135.__r_.__value_.__l.__data_);
        v33 = HIBYTE(v116);
        v25 = __p;
      }
    }
    else
    {
      __p = v25;
      *(_QWORD *)&v116 = v130;
      *(_QWORD *)((char *)&v116 + 7) = *(_QWORD *)((char *)&v130 + 7);
      HIBYTE(v116) = v33;
    }
    if (v33 < 0)
    {
      v27 = v116;
    }
    else
    {
      v25 = &__p;
      v27 = v33 & 0x7F;
    }
    v28 = 1;
  }
  else
  {
    v23 = (llvm::dwarf *)llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)(a3 + 16));
    if (!v24)
      goto LABEL_46;
    v25 = (void *)llvm::dwarf::AttributeValueString(v17, v23);
    v27 = v26;
    v28 = 4;
  }
  if (v27)
  {
    llvm::WithColor::WithColor((uint64_t)&v135, (uint64_t)a1, v28, 0);
    v38 = v135.__r_.__value_.__r.__words[0];
    v39 = *(void **)(v135.__r_.__value_.__r.__words[0] + 32);
    if (v27 <= *(_QWORD *)(v135.__r_.__value_.__r.__words[0] + 24) - (_QWORD)v39)
    {
      memcpy(v39, v25, v27);
      *(_QWORD *)(v38 + 32) += v27;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v135.__r_.__value_.__l.__data_, (const char *)v25, v27);
    }
    if (LODWORD(v135.__r_.__value_.__r.__words[1]) != 2
      && (LODWORD(v135.__r_.__value_.__r.__words[1]) == 1
       || (llvm::WithColor::AutoDetectFunction(v135.__r_.__value_.__r.__words[0]) & 1) != 0))
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)v135.__r_.__value_.__l.__data_ + 32))(v135.__r_.__value_.__r.__words[0]);
    }
    goto LABEL_99;
  }
LABEL_46:
  v34 = v118;
  if (v118 != 17)
  {
    if (v118 == 89 || v118 == 59)
    {
      v35 = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)(a3 + 16));
      sub_1C5E21910(a1, v35, 0, 0, 0);
      goto LABEL_99;
    }
LABEL_70:
    if (v34 == 18 && !*(_BYTE *)(a5 + 18) && !*(_BYTE *)(a5 + 20))
    {
      llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)(a3 + 16));
      if (v40)
      {
        if (!*(_BYTE *)(a5 + 15))
          goto LABEL_99;
        v121[0] = 0;
        if (llvm::DWARFDie::getLowAndHighPC((llvm::DWARFUnit **)a2, (unint64_t *)&v130, (unint64_t *)v121, (unint64_t *)v119))
        {
          v41 = 2 * *(_BYTE *)(v15 + 34);
          v135.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E816A1C0;
          v135.__r_.__value_.__l.__size_ = (std::string::size_type)"0x%*.*llx";
          v135.__r_.__value_.__s.__data_[16] = v41;
          v135.__r_.__value_.__s.__data_[17] = v41;
          v136 = (uint64_t)v121[0];
          llvm::raw_ostream::operator<<(a1, (uint64_t)&v135);
          goto LABEL_99;
        }
        sub_1C624C4A4((uint64_t)v127, (__int128 *)a5);
        llvm::DWARFFormValue::dump((unsigned __int16 *)(a3 + 16), a1, (uint64_t)v127);
        v49 = (__int128 *)v127;
        goto LABEL_98;
      }
    }
    if (!llvm::DWARFAttribute::mayHaveLocationList(v34)
      || !llvm::DWARFFormValue::isFormClass((unsigned __int16 *)(a3 + 16), 8))
    {
      if ((llvm::DWARFFormValue::isFormClass((unsigned __int16 *)(a3 + 16), 9) & 1) != 0
        || llvm::DWARFAttribute::mayHaveLocationExpr(v34)
        && llvm::DWARFFormValue::isFormClass((unsigned __int16 *)(a3 + 16), 2))
      {
        sub_1C624C4A4((uint64_t)v125, (__int128 *)a5);
        v50 = *(_QWORD *)(v15 + 8);
        v51 = *(llvm::MCRegisterInfo **)(v50 + 448);
        v52 = (unsigned __int16)*v14;
        if (v52 <= 0x2D && (((0x618uLL >> v52) & 1) != 0 || v52 == 30 || v52 == 24))
        {
          v5 = *(char **)(a3 + 24);
          v53 = *(_QWORD *)(a3 + 32);
        }
        else
        {
          v53 = 0;
        }
        v54 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v50 + 520) + 40))(*(_QWORD *)(v50 + 520));
        v55 = *(_BYTE *)(v15 + 34);
        v56 = *(unsigned __int8 *)(v15 + 35) | 0x100;
        *(_QWORD *)&v130 = v53;
        *((_QWORD *)&v130 + 1) = v5;
        LOWORD(v131) = v54;
        v132 = v55;
        v133 = v56;
        sub_1C624C4A4((uint64_t)&v135, v125);
        llvm::DWARFExpression::print((uint64_t)&v130, a1, (__int128 *)&v135, v51, (llvm::DWARFUnit *)v15, 0);
        sub_1C624C568(&v135);
        v49 = v125;
      }
      else
      {
        sub_1C624C4A4((uint64_t)v124, (__int128 *)a5);
        llvm::DWARFFormValue::dump((unsigned __int16 *)(a3 + 16), a1, (uint64_t)v124);
        v49 = (__int128 *)v124;
      }
      goto LABEL_98;
    }
    sub_1C624C4A4((uint64_t)v126, (__int128 *)a5);
    v42 = *(_QWORD *)(v15 + 8);
    v43 = *(_QWORD *)(v42 + 448);
    if (llvm::DWARFFormValue::isFormClass((unsigned __int16 *)(a3 + 16), 8))
      v44 = *(void **)(a3 + 24);
    else
      v44 = 0;
    v119[0] = v44;
    if (*(_WORD *)(a3 + 16) == 34)
    {
      sub_1C624C4A4((uint64_t)&v135, v126);
      llvm::DWARFFormValue::dump((unsigned __int16 *)(a3 + 16), a1, (uint64_t)&v135);
      sub_1C624C568(&v135);
      LoclistOffset = (void *)llvm::DWARFUnit::getLoclistOffset((llvm::DWARFUnit *)v15, (int)v44);
      if (!v46)
      {
LABEL_86:
        v49 = v126;
LABEL_98:
        sub_1C624C568(v49);
        goto LABEL_99;
      }
      v119[0] = LoclistOffset;
    }
    v47 = *(_QWORD *)(v15 + 136);
    llvm::DWARFUnit::getBaseAddress((llvm::DWARFUnit *)v15, (uint64_t)v121);
    v48 = *(_QWORD *)(v42 + 520);
    sub_1C624C4A4((uint64_t)&v130, v126);
    LODWORD(v107) = a4 + 17;
    llvm::DWARFLocationTable::dumpLocationList(v47, (uint64_t *)v119, a1, (__int128 *)v121, v43, v48, v15, (uint64_t)&v130, v107);
    sub_1C624C568(&v130);
    goto LABEL_86;
  }
  llvm::DWARFFormValue::getAsSectionedAddress((_QWORD *)(a3 + 16), (uint64_t)&v135);
  if (!v135.__r_.__value_.__s.__data_[16]
    || v135.__r_.__value_.__r.__words[0] != 0xFFFFFFFFFFFFFFFFLL >> (-8 * *(_BYTE *)(v15 + 34)))
  {
    v34 = v118;
    goto LABEL_70;
  }
  if (*(_BYTE *)(a5 + 20))
  {
    sub_1C624C4A4((uint64_t)v128, (__int128 *)a5);
    llvm::DWARFFormValue::dump((unsigned __int16 *)(a3 + 16), a1, (uint64_t)v128);
    sub_1C624C568(v128);
    v100 = (_WORD *)*((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 3) - (_QWORD)v100 > 1uLL)
    {
      *v100 = 10272;
      *((_QWORD *)a1 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a1, " (", 2uLL);
    }
  }
  v36 = *((_QWORD *)a1 + 4);
  if ((unint64_t)(*((_QWORD *)a1 + 3) - v36) > 8)
  {
    *(_BYTE *)(v36 + 8) = 101;
    *(_QWORD *)v36 = *(_QWORD *)"dead code";
    *((_QWORD *)a1 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(a1, "dead code", 9uLL);
  }
  if (*(_BYTE *)(a5 + 20))
  {
    v37 = (_BYTE *)*((_QWORD *)a1 + 4);
    if ((unint64_t)v37 >= *((_QWORD *)a1 + 3))
    {
      llvm::raw_ostream::write(a1, 41);
    }
    else
    {
      *((_QWORD *)a1 + 4) = v37 + 1;
      *v37 = 41;
    }
  }
LABEL_99:
  v114 = *(_BYTE *)(a5 + 15);
  v57 = v114;
  if (v114)
    memcpy(&__dst, " ", v114);
  *((_BYTE *)&__dst + v57) = 0;
  if (v118 <= 0x48u)
  {
    if (v118 != 49 && v118 != 71)
      goto LABEL_119;
    v135.__r_.__value_.__r.__words[0] = (std::string::size_type)llvm::DWARFDie::getAttributeValueAsReferencedDie((llvm::DWARFDie *)a2, (const llvm::DWARFFormValue *)(a3 + 16));
    v135.__r_.__value_.__l.__size_ = v70;
    if (!v135.__r_.__value_.__r.__words[0] || !v70)
      goto LABEL_119;
    LinkageName = llvm::DWARFDie::getLinkageName((llvm::DWARFDie *)&v135);
    if (LinkageName)
    {
      ShortName = LinkageName;
    }
    else
    {
      ShortName = llvm::DWARFDie::getShortName((llvm::DWARFDie *)&v135);
      if (!ShortName)
        goto LABEL_119;
    }
    if ((v114 & 0x80u) == 0)
      p_dst = (const char *)&__dst;
    else
      p_dst = __dst;
    if ((v114 & 0x80u) == 0)
      v74 = v114 & 0x7F;
    else
      v74 = v113;
    llvm::raw_ostream::write(a1, p_dst, v74);
    v75 = (_BYTE *)*((_QWORD *)a1 + 4);
    if (*((_BYTE **)a1 + 3) == v75)
    {
      llvm::raw_ostream::write(a1, "\"", 1uLL);
      v76 = (_BYTE *)*((_QWORD *)a1 + 4);
    }
    else
    {
      *v75 = 34;
      v76 = (_BYTE *)(*((_QWORD *)a1 + 4) + 1);
      *((_QWORD *)a1 + 4) = v76;
    }
    v77 = strlen(ShortName);
    v78 = v77;
    if (v77 <= *((_QWORD *)a1 + 3) - (_QWORD)v76)
    {
      if (v77)
      {
        memcpy(v76, ShortName, v77);
        v76 = (_BYTE *)(*((_QWORD *)a1 + 4) + v78);
        *((_QWORD *)a1 + 4) = v76;
      }
    }
    else
    {
      llvm::raw_ostream::write(a1, ShortName, v77);
      v76 = (_BYTE *)*((_QWORD *)a1 + 4);
    }
    if ((unint64_t)v76 >= *((_QWORD *)a1 + 3))
      goto LABEL_178;
    *((_QWORD *)a1 + 4) = v76 + 1;
    *v76 = 34;
  }
  else
  {
    if (v118 != 73)
    {
      if (v118 == 85)
      {
        v90 = *(llvm::raw_ostream **)(*(_QWORD *)(*a2 + 8) + 520);
        if (*v14 == 35)
        {
          v91 = llvm::DWARFFormValue::isFormClass((unsigned __int16 *)(a3 + 16), 8)
              ? *(_DWORD *)(a3 + 24)
              : 0;
          RnglistOffset = llvm::DWARFUnit::getRnglistOffset((llvm::DWARFUnit *)v15, v91);
          if (v93)
          {
            LOWORD(v135.__r_.__value_.__l.__data_) = 23;
            v135.__r_.__value_.__s.__data_[2] = 0;
            *(_OWORD *)&v135.__r_.__value_.__r.__words[1] = RnglistOffset;
            v137 = 0;
            v138 = 0;
            sub_1C624C4A4((uint64_t)v123, (__int128 *)a5);
            llvm::DWARFFormValue::dump((unsigned __int16 *)&v135, a1, (uint64_t)v123);
            sub_1C624C568(v123);
          }
        }
        llvm::DWARFDie::getAddressRanges((llvm::DWARFDie *)a2, (uint64_t)v121);
        if ((v122 & 1) != 0)
        {
          v101 = std::generic_category();
          if ((v122 & 1) != 0)
          {
            v102 = (char *)v121[0];
            v121[0] = 0;
          }
          else
          {
            v102 = 0;
          }
          v108 = v102;
          sub_1C61D2548(&v108, &v109);
          if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v103 = &v109;
          else
            v103 = (std::string *)v109.__r_.__value_.__r.__words[0];
          v119[0] = 0;
          v119[1] = 0;
          v120 = 0;
          LODWORD(v135.__r_.__value_.__r.__words[1]) = 0;
          LOBYTE(v138) = 0;
          v139 = 0;
          v135.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
          v141 = v119;
          v140 = 0;
          v136 = 0;
          v137 = 0;
          v135.__r_.__value_.__r.__words[2] = 0;
          *(_QWORD *)&v130 = &off_1E8132A78;
          *((_QWORD *)&v130 + 1) = "decoding address ranges: %s";
          v131 = v103;
          llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v135, (uint64_t)&v130);
          v104 = v141;
          v105 = operator new();
          v134 = 260;
          *(_QWORD *)&v130 = v104;
          *(_QWORD *)v105 = off_1E81A0C88;
          llvm::Twine::str((llvm::Twine *)&v130, (_QWORD *)(v105 + 8));
          *(_QWORD *)(v105 + 32) = 22;
          *(_QWORD *)(v105 + 40) = v101;
          *(_BYTE *)(v105 + 48) = 1;
          v110 = v105;
          v135.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
          if (v140 == 1)
            goto LABEL_207;
          while (1)
          {
            if (SHIBYTE(v120) < 0)
              operator delete(v119[0]);
            v106 = *(_QWORD *)(a5 + 48);
            if (v106)
              break;
            sub_1C485C2F0();
LABEL_207:
            if (v135.__r_.__value_.__r.__words[2])
              MEMORY[0x1CAA32F9C](v135.__r_.__value_.__r.__words[2], 0x1000C8077774924);
          }
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v106 + 48))(v106, &v110);
          if (v110)
            (*(void (**)(uint64_t))(*(_QWORD *)v110 + 8))(v110);
          if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v109.__r_.__value_.__l.__data_);
          if (v108)
            (*(void (**)(char *))(*(_QWORD *)v108 + 8))(v108);
        }
        else if (*(_BYTE *)(a5 + 15))
        {
          v94 = (uint64_t *)v121[0];
          v95 = (uint64_t *)v121[1];
          if (v121[0] != v121[1])
          {
            v96 = *(_BYTE *)(v15 + 34);
            v97 = a4 + 17;
            do
            {
              v98 = (_BYTE *)*((_QWORD *)a1 + 4);
              if ((unint64_t)v98 >= *((_QWORD *)a1 + 3))
              {
                llvm::raw_ostream::write(a1, 10);
              }
              else
              {
                *((_QWORD *)a1 + 4) = v98 + 1;
                *v98 = 10;
              }
              llvm::raw_ostream::indent(a1, v97);
              sub_1C624C4A4((uint64_t)&v135, (__int128 *)a5);
              llvm::DWARFAddressRange::dump(v94, a1, v96, (uint64_t)&v135, v90);
              sub_1C624C568(&v135);
              v94 += 3;
            }
            while (v94 != v95);
          }
        }
        v99 = v121[0];
        if ((v122 & 1) != 0)
        {
          v121[0] = 0;
          if (v99)
            (*(void (**)(void *))(*(_QWORD *)v99 + 8))(v99);
        }
        else if (v121[0])
        {
          v121[1] = v121[0];
          operator delete(v121[0]);
        }
      }
      else if (v118 == 16363)
      {
        v58 = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)(a3 + 16));
        if (v59)
        {
          v60 = v58;
          v61 = (_WORD *)*((_QWORD *)a1 + 4);
          if (*((_QWORD *)a1 + 3) - (_QWORD)v61 > 1uLL)
          {
            *v61 = 10272;
            *((_QWORD *)a1 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(a1, " (", 2uLL);
          }
          while (1)
          {
            v62 = llvm::dwarf::ApplePropertyString((llvm::dwarf *)(v60 & -(uint64_t)v60));
            if (v63)
            {
              v64 = v62;
              v65 = v63;
              v66 = (void *)*((_QWORD *)a1 + 4);
              if (v63 <= *((_QWORD *)a1 + 3) - (_QWORD)v66)
              {
                memcpy(v66, v64, v63);
                *((_QWORD *)a1 + 4) += v65;
              }
              else
              {
                llvm::raw_ostream::write(a1, v64, v63);
              }
            }
            else
            {
              v135.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E8133270;
              v135.__r_.__value_.__l.__size_ = (std::string::size_type)"DW_APPLE_PROPERTY_0x%llx";
              v135.__r_.__value_.__r.__words[2] = v60 & -(uint64_t)v60;
              llvm::raw_ostream::operator<<(a1, (uint64_t)&v135);
            }
            v68 = (char *)*((_QWORD *)a1 + 3);
            v67 = (char *)*((_QWORD *)a1 + 4);
            v60 ^= v60 & -(uint64_t)v60;
            if (!v60)
              break;
            if ((unint64_t)(v68 - v67) > 1)
            {
              *(_WORD *)v67 = 8236;
              *((_QWORD *)a1 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(a1, ", ", 2uLL);
            }
          }
          if (v68 == v67)
          {
            llvm::raw_ostream::write(a1, ")", 1uLL);
          }
          else
          {
            *v67 = 41;
            ++*((_QWORD *)a1 + 4);
          }
        }
      }
      goto LABEL_119;
    }
    v79 = *(_OWORD *)a2;
    v80 = *(_OWORD *)(a3 + 32);
    v111[0] = *(_OWORD *)v14;
    v111[1] = v80;
    v111[2] = *(_OWORD *)(a3 + 48);
    *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v79;
    *(_QWORD *)&v130 = llvm::DWARFDie::getAttributeValueAsReferencedDie((llvm::DWARFDie *)&v135, (const llvm::DWARFFormValue *)v111);
    *((_QWORD *)&v130 + 1) = v81;
    v82 = llvm::DWARFDie::resolveTypeUnitReference((llvm::DWARFUnit **)&v130);
    if (v82)
    {
      v84 = v83;
      if (v83)
      {
        if (*(_QWORD *)(v83 + 16))
        {
          v85 = v82;
          if ((v114 & 0x80u) == 0)
            v86 = (const char *)&__dst;
          else
            v86 = __dst;
          if ((v114 & 0x80u) == 0)
            v87 = v114 & 0x7F;
          else
            v87 = v113;
          llvm::raw_ostream::write(a1, v86, v87);
          v88 = (_BYTE *)*((_QWORD *)a1 + 4);
          if (*((_BYTE **)a1 + 3) == v88)
          {
            llvm::raw_ostream::write(a1, "\"", 1uLL);
          }
          else
          {
            *v88 = 34;
            ++*((_QWORD *)a1 + 4);
          }
          v135.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
          LOWORD(v135.__r_.__value_.__r.__words[1]) = 1;
          sub_1C54A8B34((llvm::raw_ostream *)&v135, v85, v84);
          v89 = (_BYTE *)*((_QWORD *)a1 + 4);
          if ((unint64_t)v89 < *((_QWORD *)a1 + 3))
          {
            *((_QWORD *)a1 + 4) = v89 + 1;
            *v89 = 34;
            goto LABEL_119;
          }
LABEL_178:
          llvm::raw_ostream::write(a1, 34);
        }
      }
    }
  }
LABEL_119:
  v69 = (_WORD *)*((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 3) - (_QWORD)v69 > 1uLL)
  {
    *v69 = 2601;
    *((_QWORD *)a1 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a1, ")\n", 2uLL);
  }
  if ((char)v114 < 0)
    operator delete(__dst);
  if (SHIBYTE(v116) < 0)
    operator delete(__p);
}

uint64_t llvm::DWARFDie::attribute_iterator::operator++(uint64_t a1)
{
  const llvm::DWARFAbbreviationDeclaration *v2;

  v2 = *(const llvm::DWARFAbbreviationDeclaration **)(*(_QWORD *)(a1 + 8) + 16);
  if (v2)
    llvm::DWARFDie::attribute_iterator::updateForIndex(a1, v2, *(_DWORD *)(a1 + 80) + 1);
  return a1;
}

uint64_t llvm::DWARFDie::getFirstChild(llvm::DWARFDie *this)
{
  uint64_t result;
  uint64_t v3;

  result = *(_QWORD *)this;
  if (result)
  {
    v3 = *((_QWORD *)this + 1);
    if (v3)
      return llvm::DWARFUnit::getFirstChild(result, v3);
    else
      return 0;
  }
  return result;
}

uint64_t llvm::DWARFDie::getSibling(llvm::DWARFDie *this)
{
  uint64_t result;
  uint64_t v3;

  result = *(_QWORD *)this;
  if (result)
  {
    v3 = *((_QWORD *)this + 1);
    if (!v3 || !*(_DWORD *)(v3 + 12))
      return 0;
  }
  return result;
}

uint64_t llvm::DWARFDie::getPreviousSibling(llvm::DWARFDie *this)
{
  uint64_t result;
  uint64_t v3;

  result = *(_QWORD *)this;
  if (result)
  {
    v3 = *((_QWORD *)this + 1);
    if (v3)
      return llvm::DWARFUnit::getPreviousSibling(result, v3);
    else
      return 0;
  }
  return result;
}

uint64_t llvm::DWARFDie::getLastChild(llvm::DWARFDie *this)
{
  uint64_t result;
  uint64_t v3;

  result = *(_QWORD *)this;
  if (result)
  {
    v3 = *((_QWORD *)this + 1);
    if (v3)
      return llvm::DWARFUnit::getLastChild(result, v3);
    else
      return 0;
  }
  return result;
}

uint64_t llvm::DWARFDie::attribute_iterator::attribute_iterator(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  uint64_t v5;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 28) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 34) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  v5 = a3[2];
  if (a4)
  {
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(v5 + 16);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *a3 + *(unsigned __int8 *)(v5 + 6);
    llvm::DWARFDie::attribute_iterator::updateForIndex(a1, (const llvm::DWARFAbbreviationDeclaration *)v5, 0);
  }
  return a1;
}

void llvm::dumpTypeQualifiedName(llvm *this, const llvm::DWARFDie *a2, llvm::raw_ostream *a3)
{
  const llvm::DWARFDie *v3;
  __int16 v4;

  v3 = a2;
  v4 = 1;
  sub_1C54A8B34((llvm::raw_ostream *)&v3, *(llvm::DWARFUnit **)this, *((_QWORD *)this + 1));
}

void sub_1C54A8B34(llvm::raw_ostream *a1, llvm::DWARFUnit *a2, uint64_t a3)
{
  llvm::DWARFUnit *v4;
  unsigned int v6;
  llvm::DWARFUnit *v7;
  llvm::DWARFUnit *v8;
  llvm::DWARFUnit *v9;

  v4 = a2;
  if (a2 && a3)
  {
    v6 = *(_DWORD *)(a3 + 8);
    if (v6 == -1)
    {
      v7 = 0;
      a2 = 0;
    }
    else
    {
      v7 = (llvm::DWARFUnit *)(*((_QWORD *)a2 + 36) + 24 * v6);
    }
    sub_1C54A8BC4(a1, a2, v7);
  }
  v8 = sub_1C54A8CE4(a1, v4, (uint64_t *)a3, 0);
  sub_1C54A9800(a1, v4, (uint64_t *)a3, v8, v9, 0);
}

llvm::raw_ostream *sub_1C54A8BC4(llvm::raw_ostream *result, llvm::DWARFUnit *a2, llvm::DWARFUnit *a3)
{
  llvm::raw_ostream *v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  unint64_t v7;
  BOOL v8;
  llvm::DWARFUnit *v9;
  uint64_t v10;
  llvm::DWARFUnit *v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  llvm::DWARFUnit *v15;
  llvm::DWARFUnit *v16;
  _WORD *v17;
  llvm::DWARFUnit *v18[2];

  v3 = result;
  v18[0] = a2;
  v18[1] = a3;
  v4 = *((_QWORD *)a3 + 2);
  if (!v4
    || ((v5 = *(unsigned __int16 *)(v4 + 4) - 11, v6 = v5 > 0x3F, v7 = (1 << v5) & 0x8040000800000041, !v6)
      ? (v8 = v7 == 0)
      : (v8 = 1),
        v8))
  {
    v9 = llvm::DWARFDie::resolveTypeUnitReference(v18);
    v11 = v9;
    v12 = (uint64_t *)v10;
    if (v9)
    {
      if (v10)
      {
        v13 = *(_DWORD *)(v10 + 8);
        if (v13 != -1)
        {
          v14 = *((_QWORD *)v9 + 36);
          if (v14)
            sub_1C54A8BC4(v3, v9, v14 + 24 * v13);
        }
      }
    }
    v15 = sub_1C54A8CE4(v3, v11, v12, 0);
    sub_1C54A9800(v3, v11, v12, v15, v16, 0);
    result = *(llvm::raw_ostream **)v3;
    v17 = *(_WORD **)(*(_QWORD *)v3 + 32);
    if (*(_QWORD *)(*(_QWORD *)v3 + 24) - (_QWORD)v17 > 1uLL)
    {
      *v17 = 14906;
      *((_QWORD *)result + 4) += 2;
    }
    else
    {
      return llvm::raw_ostream::write(result, "::", 2uLL);
    }
  }
  return result;
}

llvm::DWARFUnit *sub_1C54A8CE4(_BYTE *a1, llvm::DWARFUnit *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  llvm::DWARFUnit *v11;
  uint64_t v12;
  llvm::DWARFUnit *v13;
  llvm::raw_ostream *v14;
  char *v15;
  char v16;
  llvm::raw_ostream *v17;
  _DWORD *v18;
  const char *v19;
  size_t v20;
  uint64_t v21;
  llvm::DWARFUnit *v22;
  uint64_t v23;
  BOOL v24;
  size_t v25;
  llvm::DWARFUnit *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  llvm::raw_ostream *v30;
  uint64_t v31;
  llvm::raw_ostream *v32;
  _BYTE *v33;
  BOOL v34;
  llvm::raw_ostream *v35;
  uint64_t v36;
  llvm::raw_ostream *v37;
  uint64_t v38;
  uint64_t v40;
  llvm::DWARFUnit *v41;
  llvm::DWARFUnit *v42;
  const char *v43;
  char *ShortName;
  const char *v45;
  size_t v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  llvm::DWARFUnit *v51;
  _BYTE *v52;
  llvm::DWARFUnit *v53;
  llvm::DWARFUnit *v54;
  size_t v55;
  char *v56;
  char v57;
  char *v58;
  size_t v59;
  size_t v60;
  size_t v61;
  BOOL v62;
  uint64_t v63;
  llvm::dwarf *v64;
  char *v65;
  char v66;
  char *v67;
  llvm::raw_ostream *v68;
  size_t v69;
  void *v70;
  uint64_t v71;
  llvm::DWARFUnit *v72;
  llvm::DWARFUnit *v73;
  uint64_t v75;
  void *v76;
  llvm::raw_ostream *v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  llvm::raw_ostream *v81;
  _BYTE *v82;
  uint64_t v83;
  const char *v84;
  unint64_t v85;
  size_t v86;
  size_t v89;
  const void *v90;
  size_t v91;
  _BYTE *v92;
  _QWORD *v93;
  void *v94;
  _BYTE *v95;
  unint64_t v96;
  llvm::raw_ostream *v97;
  void *v98;
  size_t v99;
  char v100;
  llvm::raw_ostream *v101;
  _BYTE *v102;
  uint64_t v103;
  llvm::DWARFUnit *v104;
  uint64_t v105;
  llvm::raw_ostream *v106;
  _WORD *v107;
  llvm::raw_ostream *v108;
  _BYTE *v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  llvm::DWARFUnit *v113;
  size_t v114;
  char *v115;
  size_t v116;
  __int16 v117;
  char v118;
  _QWORD v119[2];
  llvm::DWARFUnit *v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;

  v119[0] = a2;
  v119[1] = a3;
  a1[8] = 1;
  if (!a2 || !a3)
  {
    v17 = *(llvm::raw_ostream **)a1;
    v18 = *(_DWORD **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v18 <= 3uLL)
    {
      v19 = "void";
      v20 = 4;
      goto LABEL_14;
    }
    v11 = 0;
    *v18 = 1684631414;
    v83 = *((_QWORD *)v17 + 4) + 4;
LABEL_106:
    *((_QWORD *)v17 + 4) = v83;
    return v11;
  }
  v8 = a3[2];
  if (!v8)
  {
    LOBYTE(v113) = 0;
    v118 = 0;
    goto LABEL_74;
  }
  v9 = *(unsigned __int16 *)(v8 + 4);
  if (v9 <= 0x34)
  {
    if (*(unsigned __int16 *)(v8 + 4) > 0x14u)
    {
      if (v9 != 38)
      {
        if (v9 == 21)
        {
          v113 = a2;
          v114 = (size_t)a3;
          *(_QWORD *)&v111 = llvm::DWARFDie::getAttributeValueAsReferencedDie(&v113, 73);
          *((_QWORD *)&v111 + 1) = v79;
          v11 = llvm::DWARFDie::resolveTypeUnitReference((llvm::DWARFUnit **)&v111);
          sub_1C54AA640((uint64_t)a1, v11, v80);
          if (a1[8])
          {
            v81 = *(llvm::raw_ostream **)a1;
            v82 = *(_BYTE **)(*(_QWORD *)a1 + 32);
            if ((unint64_t)v82 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
            {
              llvm::raw_ostream::write(v81, 32);
            }
            else
            {
              *((_QWORD *)v81 + 4) = v82 + 1;
              *v82 = 32;
            }
          }
          goto LABEL_171;
        }
        if (v9 == 31)
        {
          v113 = a2;
          v114 = (size_t)a3;
          *(_QWORD *)&v111 = llvm::DWARFDie::getAttributeValueAsReferencedDie(&v113, 73);
          *((_QWORD *)&v111 + 1) = v10;
          v11 = llvm::DWARFDie::resolveTypeUnitReference((llvm::DWARFUnit **)&v111);
          v13 = (llvm::DWARFUnit *)v12;
          sub_1C54AA640((uint64_t)a1, v11, v12);
          if (sub_1C54AA6B4(v11, v13))
          {
            v14 = *(llvm::raw_ostream **)a1;
            v15 = *(char **)(*(_QWORD *)a1 + 32);
            if ((unint64_t)v15 < *(_QWORD *)(*(_QWORD *)a1 + 24))
            {
              *((_QWORD *)v14 + 4) = v15 + 1;
              v16 = 40;
LABEL_132:
              *v15 = v16;
              goto LABEL_165;
            }
            v100 = 40;
          }
          else
          {
            if (!a1[8])
              goto LABEL_165;
            v14 = *(llvm::raw_ostream **)a1;
            v15 = *(char **)(*(_QWORD *)a1 + 32);
            if ((unint64_t)v15 < *(_QWORD *)(*(_QWORD *)a1 + 24))
            {
              *((_QWORD *)v14 + 4) = v15 + 1;
              v16 = 32;
              goto LABEL_132;
            }
            v100 = 32;
          }
          llvm::raw_ostream::write(v14, v100);
LABEL_165:
          v113 = a2;
          v114 = (size_t)a3;
          *(_QWORD *)&v111 = llvm::DWARFDie::getAttributeValueAsReferencedDie(&v113, 29);
          *((_QWORD *)&v111 + 1) = v103;
          v104 = llvm::DWARFDie::resolveTypeUnitReference((llvm::DWARFUnit **)&v111);
          if (v104 && v105)
          {
            sub_1C54A8B34(a1, v104, v105);
            a1[9] = 0;
            v106 = *(llvm::raw_ostream **)a1;
            v107 = *(_WORD **)(*(_QWORD *)a1 + 32);
            if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v107 > 1uLL)
            {
              *v107 = 14906;
              *((_QWORD *)v106 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v106, "::", 2uLL);
            }
          }
          v108 = *(llvm::raw_ostream **)a1;
          v109 = *(_BYTE **)(*(_QWORD *)a1 + 32);
          if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v109)
          {
            llvm::raw_ostream::write(v108, "*", 1uLL);
          }
          else
          {
            *v109 = 42;
            ++*((_QWORD *)v108 + 4);
          }
LABEL_171:
          a1[8] = 0;
          return v11;
        }
        goto LABEL_73;
      }
LABEL_17:
      *(_QWORD *)&v124 = a2;
      *((_QWORD *)&v124 + 1) = a3;
      v123 = 0uLL;
      v122 = 0uLL;
      v120 = 0;
      v121 = 0;
      sub_1C54AB730(&v124, &v120, &v123, &v122);
      v22 = v120;
      v21 = v121;
      if (!v120 || !v121)
        goto LABEL_39;
      v23 = *(_QWORD *)(v121 + 16);
      v24 = v23 && *(_WORD *)(v23 + 4) == 21;
      v25 = v121;
      v26 = v120;
      while (1)
      {
        v27 = *(_QWORD *)(v25 + 16);
        if (!v27)
        {
LABEL_27:
          if (v24)
            goto LABEL_49;
          goto LABEL_39;
        }
        v28 = *(unsigned __int16 *)(v27 + 4);
        if (v28 != 1)
          break;
        v113 = v26;
        v114 = v25;
        *(_QWORD *)&v111 = llvm::DWARFDie::getAttributeValueAsReferencedDie(&v113, 73);
        *((_QWORD *)&v111 + 1) = v29;
        v26 = llvm::DWARFDie::resolveTypeUnitReference((llvm::DWARFUnit **)&v111);
        if (!v26 || !v25)
          goto LABEL_27;
      }
      if (v24)
        goto LABEL_49;
      if ((v28 | 0x10) == 0x1F)
      {
        sub_1C54AA640((uint64_t)a1, v22, v21);
        a1[8] = 1;
        if ((_QWORD)v123 && *((_QWORD *)&v123 + 1))
        {
          v30 = *(llvm::raw_ostream **)a1;
          v31 = *(_QWORD *)(*(_QWORD *)a1 + 32);
          if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v31) > 4)
          {
            *(_BYTE *)(v31 + 4) = 116;
            *(_DWORD *)v31 = 1936617315;
            *((_QWORD *)v30 + 4) += 5;
          }
          else
          {
            llvm::raw_ostream::write(v30, "const", 5uLL);
          }
          if (!(_QWORD)v122 || !*((_QWORD *)&v122 + 1))
            return 0;
          v32 = *(llvm::raw_ostream **)a1;
          v33 = *(_BYTE **)(*(_QWORD *)a1 + 32);
          if ((unint64_t)v33 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
          {
            llvm::raw_ostream::write(v32, 32);
          }
          else
          {
            *((_QWORD *)v32 + 4) = v33 + 1;
            *v33 = 32;
          }
        }
        else if (!(_QWORD)v122 || !*((_QWORD *)&v122 + 1))
        {
          return 0;
        }
        v17 = *(llvm::raw_ostream **)a1;
        v93 = *(_QWORD **)(*(_QWORD *)a1 + 32);
        if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v93 <= 7uLL)
        {
          v19 = "volatile";
          v20 = 8;
          goto LABEL_14;
        }
        *v93 = 0x656C6974616C6F76;
        *((_QWORD *)v17 + 4) += 8;
      }
      else
      {
LABEL_39:
        if ((_QWORD)v123)
          v34 = *((_QWORD *)&v123 + 1) == 0;
        else
          v34 = 1;
        if (!v34)
        {
          v35 = *(llvm::raw_ostream **)a1;
          v36 = *(_QWORD *)(*(_QWORD *)a1 + 32);
          if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v36) > 5)
          {
            *(_WORD *)(v36 + 4) = 8308;
            *(_DWORD *)v36 = 1936617315;
            *((_QWORD *)v35 + 4) += 6;
          }
          else
          {
            llvm::raw_ostream::write(v35, "const ", 6uLL);
          }
        }
        if ((_QWORD)v122 && *((_QWORD *)&v122 + 1))
        {
          v37 = *(llvm::raw_ostream **)a1;
          v38 = *(_QWORD *)(*(_QWORD *)a1 + 32);
          if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v38) > 8)
          {
            *(_BYTE *)(v38 + 8) = 32;
            *(_QWORD *)v38 = *(_QWORD *)"volatile ";
            *((_QWORD *)v37 + 4) += 9;
          }
          else
          {
            llvm::raw_ostream::write(v37, "volatile ", 9uLL);
          }
        }
LABEL_49:
        sub_1C54AA640((uint64_t)a1, v22, v21);
      }
      return 0;
    }
    if (v9 != 1)
    {
      if (v9 == 15)
      {
        v113 = a2;
        v114 = (size_t)a3;
        *(_QWORD *)&v111 = llvm::DWARFDie::getAttributeValueAsReferencedDie(&v113, 73);
        *((_QWORD *)&v111 + 1) = v50;
        v11 = llvm::DWARFDie::resolveTypeUnitReference((llvm::DWARFUnit **)&v111);
        v42 = v51;
        v43 = "*";
        goto LABEL_72;
      }
      if (v9 == 16)
      {
        v113 = a2;
        v114 = (size_t)a3;
        *(_QWORD *)&v111 = llvm::DWARFDie::getAttributeValueAsReferencedDie(&v113, 73);
        *((_QWORD *)&v111 + 1) = v40;
        v11 = llvm::DWARFDie::resolveTypeUnitReference((llvm::DWARFUnit **)&v111);
        v42 = v41;
        v43 = "&";
LABEL_72:
        v52 = a1;
        v53 = v11;
        v54 = v42;
        v55 = 1;
LABEL_86:
        sub_1C54AA548(v52, v53, v54, v43, v55);
        return v11;
      }
LABEL_73:
      llvm::DWARFAbbreviationDeclaration::getAttributeValue(v8, a2, *a3, 3, &v113);
LABEL_74:
      v56 = sub_1C624DEB4((llvm::DWARFFormValue *)&v113);
      if (v57)
      {
        v58 = v56;
        if (v56)
        {
          a1[8] = 1;
          v59 = strlen(v56);
          v60 = v59;
          v61 = v59 - 5;
          if (v59 >= 5)
          {
            if (*(_DWORD *)v58 == 1314149215 && v58[4] == 124)
            {
              v58 += 5;
              if (v59 >= 6 && (v95 = memchr(v58, 124, v61)) != 0)
                v96 = v95 - v58;
              else
                v96 = -1;
              if (v61 >= v96)
                v60 = v96;
              else
                v60 = v61;
              if (a4)
              {
                if (v61 >= v96 + 1)
                  v99 = v96 + 1;
                else
                  v99 = v61;
                v113 = (llvm::DWARFUnit *)v58;
                v114 = v60;
                v115 = &v58[v99];
                v116 = v61 - v99;
                v117 = 1285;
                llvm::Twine::str((llvm::Twine *)&v113, &v111);
                if (*(char *)(a4 + 23) < 0)
                  operator delete(*(void **)a4);
                *(_OWORD *)a4 = v111;
                *(_QWORD *)(a4 + 16) = v112;
              }
              goto LABEL_93;
            }
          }
          else if (!v59)
          {
            v62 = 0;
LABEL_92:
            a1[9] = v62;
LABEL_93:
            v75 = *(_QWORD *)a1;
            v76 = *(void **)(*(_QWORD *)a1 + 32);
            if (v60 <= *(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v76)
            {
              if (!v60)
                goto LABEL_98;
              memcpy(v76, v58, v60);
              *(_QWORD *)(v75 + 32) += v60;
            }
            else
            {
              llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, v58, v60);
            }
            if (v58[v60 - 1] != 62)
            {
LABEL_98:
              v11 = 0;
              if (sub_1C54AA730(a1, (uint64_t)a2, (uint64_t)a3, 0))
              {
                if (a1[9])
                {
                  v77 = *(llvm::raw_ostream **)a1;
                  v78 = *(_BYTE **)(*(_QWORD *)a1 + 32);
                  if ((unint64_t)v78 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
                  {
                    llvm::raw_ostream::write(v77, 32);
                  }
                  else
                  {
                    *((_QWORD *)v77 + 4) = v78 + 1;
                    *v78 = 32;
                  }
                }
                v101 = *(llvm::raw_ostream **)a1;
                v102 = *(_BYTE **)(*(_QWORD *)a1 + 32);
                if ((unint64_t)v102 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
                {
                  llvm::raw_ostream::write(v101, 62);
                }
                else
                {
                  *((_QWORD *)v101 + 4) = v102 + 1;
                  *v102 = 62;
                }
                v11 = 0;
                *((_WORD *)a1 + 4) = 257;
              }
              return v11;
            }
            return 0;
          }
          v62 = v58[v59 - 1] == 62;
          goto LABEL_92;
        }
      }
      v63 = a3[2];
      if (v63)
        v64 = (llvm::dwarf *)*(unsigned __int16 *)(v63 + 4);
      else
        v64 = 0;
      v84 = llvm::dwarf::TagString(v64);
      v86 = v85 - 7;
      if (v85 < 7)
        return 0;
      if (*(_DWORD *)v84 != 1415534404 || *(_DWORD *)(v84 + 3) != 1598505300)
        return 0;
      if (*(_DWORD *)&v84[v85 - 5] != 1887007839 || v84[v85 - 1] != 101)
        return 0;
      v68 = *(llvm::raw_ostream **)a1;
      v89 = v85 - 12;
      v90 = v84 + 7;
      if (v86 >= v89)
        v91 = v89;
      else
        v91 = v86;
      v92 = (_BYTE *)*((_QWORD *)v68 + 4);
      if (v91 <= *((_QWORD *)v68 + 3) - (_QWORD)v92)
      {
        if (v91)
        {
          memcpy(v92, v90, v91);
          v92 = (_BYTE *)(*((_QWORD *)v68 + 4) + v91);
          *((_QWORD *)v68 + 4) = v92;
        }
      }
      else
      {
        llvm::raw_ostream::write(v68, (const char *)v90, v91);
        v92 = (_BYTE *)*((_QWORD *)v68 + 4);
      }
      if (*((_BYTE **)v68 + 3) == v92)
      {
        v19 = " ";
        v17 = v68;
        v20 = 1;
        goto LABEL_14;
      }
      v11 = 0;
      *v92 = 32;
      v110 = *((_QWORD *)v68 + 4) + 1;
LABEL_184:
      *((_QWORD *)v68 + 4) = v110;
      return v11;
    }
LABEL_70:
    v113 = a2;
    v114 = (size_t)a3;
    *(_QWORD *)&v111 = llvm::DWARFDie::getAttributeValueAsReferencedDie(&v113, 73);
    *((_QWORD *)&v111 + 1) = v48;
    v11 = llvm::DWARFDie::resolveTypeUnitReference((llvm::DWARFUnit **)&v111);
    sub_1C54AA640((uint64_t)a1, v11, v49);
    return v11;
  }
  if (*(unsigned __int16 *)(v8 + 4) <= 0x38u)
  {
    if (v9 == 53)
      goto LABEL_17;
    goto LABEL_73;
  }
  if (*(unsigned __int16 *)(v8 + 4) > 0x41u)
  {
    if (v9 == 66)
    {
      v113 = a2;
      v114 = (size_t)a3;
      *(_QWORD *)&v111 = llvm::DWARFDie::getAttributeValueAsReferencedDie(&v113, 73);
      *((_QWORD *)&v111 + 1) = v71;
      v11 = llvm::DWARFDie::resolveTypeUnitReference((llvm::DWARFUnit **)&v111);
      v73 = v72;
      v43 = "&&";
      v52 = a1;
      v53 = v11;
      v54 = v73;
      v55 = 2;
      goto LABEL_86;
    }
    if (v9 != 17152)
      goto LABEL_73;
    goto LABEL_70;
  }
  if (v9 == 57)
  {
    llvm::DWARFAbbreviationDeclaration::getAttributeValue(v8, a2, *a3, 3, &v113);
    v65 = sub_1C624DEB4((llvm::DWARFFormValue *)&v113);
    if (v66)
    {
      v67 = v65;
      if (v65)
      {
        v68 = *(llvm::raw_ostream **)a1;
        v69 = strlen(v65);
        v70 = (void *)*((_QWORD *)v68 + 4);
        if (v69 <= *((_QWORD *)v68 + 3) - (_QWORD)v70)
        {
          if (!v69)
            return 0;
          memcpy(v70, v67, v69);
          v11 = 0;
          v110 = *((_QWORD *)v68 + 4) + v69;
          goto LABEL_184;
        }
        v17 = v68;
        v19 = v67;
        v20 = v69;
LABEL_14:
        llvm::raw_ostream::write(v17, v19, v20);
        return 0;
      }
    }
    v17 = *(llvm::raw_ostream **)a1;
    v94 = *(void **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v94 <= 0x14uLL)
    {
      v19 = "(anonymous namespace)";
      v20 = 21;
      goto LABEL_14;
    }
    v11 = 0;
    qmemcpy(v94, "(anonymous namespace)", 21);
    v83 = *((_QWORD *)v17 + 4) + 21;
    goto LABEL_106;
  }
  if (v9 != 59)
    goto LABEL_73;
  ShortName = llvm::DWARFDie::getShortName((llvm::DWARFDie *)v119);
  if (ShortName)
  {
    v45 = ShortName;
    v46 = strlen(ShortName);
    if (v46 == 17)
    {
      if (*(_QWORD *)v45 ^ 0x657079746C636564 | *((_QWORD *)v45 + 1) ^ 0x7274706C6C756E28 | *((unsigned __int8 *)v45
                                                                                                 + 16) ^ 0x29)
      {
        v47 = 17;
      }
      else
      {
        v45 = "std::nullptr_t";
        v47 = 14;
      }
    }
    else
    {
      v47 = v46;
    }
    a1[8] = 1;
    v97 = *(llvm::raw_ostream **)a1;
    v98 = *(void **)(*(_QWORD *)a1 + 32);
    if (v47 <= *(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v98)
    {
      if (v47)
      {
        memcpy(v98, v45, v47);
        *((_QWORD *)v97 + 4) += v47;
      }
    }
    else
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, v45, v47);
    }
  }
  else
  {
    a1[8] = 1;
  }
  v11 = 0;
  a1[9] = 0;
  return v11;
}

void sub_1C54A9800(_BYTE *a1, llvm::DWARFUnit *a2, uint64_t *a3, llvm::DWARFUnit *a4, llvm::DWARFUnit *a5, BOOL a6)
{
  std::string::size_type v6;
  uint64_t *v7;
  llvm::DWARFUnit *v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  uint64_t v16;
  llvm::DWARFUnit *v17;
  uint64_t v18;
  llvm::DWARFUnit *v19;
  uint64_t *v20;
  __int128 v21;
  uint64_t v22;
  unsigned int v23;
  const std::string::value_type **v24;
  uint64_t v25;
  const std::string::value_type *v26;
  std::string::size_type size;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  char *v38;
  const char *v39;
  size_t v40;
  std::string *v41;
  size_t v42;
  llvm::raw_ostream *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  llvm::DWARFUnit *v49;
  BOOL v50;
  int v51;
  BOOL v52;
  int v53;
  uint64_t v54;
  llvm::DWARFUnit *v55;
  uint64_t v56;
  unsigned int v57;
  unint64_t AsUnsignedConstant;
  unint64_t v59;
  BOOL v60;
  llvm::DWARFUnit *v61;
  uint64_t *v62;
  llvm::DWARFUnit *v63;
  uint64_t v64;
  unsigned int v65;
  unint64_t v66;
  unsigned __int8 v67;
  char v68;
  uint64_t v69;
  unsigned __int8 v70;
  uint64_t v71;
  unsigned __int8 v72;
  uint64_t *v73;
  uint64_t *v74;
  llvm::DWARFUnit *v75;
  BOOL v76;
  uint64_t v77;
  int v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  int v81;
  char v82;
  llvm::raw_ostream *v83;
  _WORD *v84;
  llvm::raw_ostream *v85;
  _WORD *v86;
  llvm::raw_ostream *v87;
  _WORD *v88;
  llvm::raw_ostream *v89;
  llvm::raw_ostream *v90;
  _BYTE *v91;
  llvm::raw_ostream *v92;
  _DWORD *v93;
  _WORD *v94;
  llvm::raw_ostream *v95;
  _BYTE *v96;
  unint64_t v97;
  _BYTE *v98;
  llvm::raw_ostream *v99;
  _BYTE *v100;
  llvm::raw_ostream *v101;
  _WORD *v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  unsigned __int8 v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  std::string v112;
  _BYTE *v113;
  _BYTE *v114;
  char v115;
  uint64_t v116;
  int v117;
  __int128 *p_p;
  __int128 __p;
  uint64_t v120;
  std::string v121;
  __int128 v122;
  _BYTE v123[16];
  __int128 v124;
  __int128 v125;
  char v126;
  __int128 v127;
  char v128;
  char v129[7];
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v7 = a3;
    if (a3)
    {
      v9 = a2;
      while (1)
      {
        v11 = v7[2];
        if (!v11)
          return;
        v12 = *(unsigned __int16 *)(v11 + 4);
        v13 = (v12 - 15);
        if (v13 > 0x33)
          goto LABEL_20;
        v6 = (std::string::size_type)a4;
        if (((1 << (v12 - 15)) & 0x8000000010003) == 0)
          break;
        if (sub_1C54AA6B4(a4, a5))
        {
          v14 = *(llvm::raw_ostream **)a1;
          v15 = *(_BYTE **)(*(_QWORD *)a1 + 32);
          if ((unint64_t)v15 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
          {
            llvm::raw_ostream::write(v14, 41);
          }
          else
          {
            *((_QWORD *)v14 + 4) = v15 + 1;
            *v15 = 41;
          }
        }
        v112.__r_.__value_.__r.__words[0] = v6;
        v112.__r_.__value_.__l.__size_ = (std::string::size_type)a5;
        *(_QWORD *)&v124 = llvm::DWARFDie::getAttributeValueAsReferencedDie((llvm::DWARFUnit **)&v112, 73);
        *((_QWORD *)&v124 + 1) = v16;
        a4 = llvm::DWARFDie::resolveTypeUnitReference((llvm::DWARFUnit **)&v124);
        v18 = v7[2];
        if (v18)
        {
          a6 = *(unsigned __int16 *)(v18 + 4) == 31;
          if (!v6)
            return;
        }
        else
        {
          a6 = 0;
          if (!v6)
            return;
        }
        v7 = (uint64_t *)a5;
        v9 = (llvm::DWARFUnit *)v6;
        a5 = v17;
        if (!v7)
          return;
      }
      if (v13 == 6)
      {
        sub_1C54AB9C8(a1, (uint64_t)v9, (uint64_t)v7, a4, (uint64_t *)a5, a6, 0, 0);
        return;
      }
      if (((1 << (v12 - 15)) & 0x4000800000) != 0)
      {
        *(_QWORD *)&v122 = v9;
        *((_QWORD *)&v122 + 1) = v7;
        *(_OWORD *)&v121.__r_.__value_.__l.__data_ = 0uLL;
        __p = 0uLL;
        v127 = 0uLL;
        sub_1C54AB730(&v122, (llvm::DWARFUnit **)&v127, &v121, &__p);
        v45 = v127;
        if ((_QWORD)v127
          && *((_QWORD *)&v127 + 1)
          && (v46 = *(_QWORD *)(*((_QWORD *)&v127 + 1) + 16)) != 0
          && *(_WORD *)(v46 + 4) == 21)
        {
          *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v127;
          *(_QWORD *)&v124 = llvm::DWARFDie::getAttributeValueAsReferencedDie((llvm::DWARFUnit **)&v112, 73);
          *((_QWORD *)&v124 + 1) = v47;
          v49 = llvm::DWARFDie::resolveTypeUnitReference((llvm::DWARFUnit **)&v124);
          if (v121.__r_.__value_.__r.__words[0])
            v50 = v121.__r_.__value_.__l.__size_ == 0;
          else
            v50 = 1;
          v51 = !v50;
          if ((_QWORD)__p)
            v52 = *((_QWORD *)&__p + 1) == 0;
          else
            v52 = 1;
          v53 = !v52;
          sub_1C54AB9C8(a1, v45, *((uint64_t *)&v45 + 1), v49, v48, 0, v51, v53);
        }
        else
        {
          *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v127;
          *(_QWORD *)&v124 = llvm::DWARFDie::getAttributeValueAsReferencedDie((llvm::DWARFUnit **)&v112, 73);
          *((_QWORD *)&v124 + 1) = v54;
          v55 = llvm::DWARFDie::resolveTypeUnitReference((llvm::DWARFUnit **)&v124);
          sub_1C54A9800(a1, v45, *((_QWORD *)&v45 + 1), v55, v56, 0);
        }
      }
      else
      {
LABEL_20:
        if (v12 == 17152)
        {
          *(_QWORD *)&v122 = v123;
          *((_QWORD *)&v122 + 1) = 0x200000000;
          llvm::DWARFAbbreviationDeclaration::getAttributeValue(v11, v9, *v7, 15880, &v112);
          if ((_BYTE)v116 && llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&v112))
          {
            v57 = DWORD2(v122);
            if (DWORD2(v122) >= HIDWORD(v122))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v122, (uint64_t)v123, DWORD2(v122) + 1, 8);
              v57 = DWORD2(v122);
            }
            *(_QWORD *)(v122 + 8 * v57) = "isa-pointer";
            ++DWORD2(v122);
          }
          v22 = v7[2];
          if (v22 && (llvm::DWARFAbbreviationDeclaration::getAttributeValue(v22, v9, *v7, 15881, &v112), (_BYTE)v116))
          {
            AsUnsignedConstant = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&v112);
            v23 = DWORD2(v122);
            if (AsUnsignedConstant)
            {
              if (DWORD2(v122) >= HIDWORD(v122))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v122, (uint64_t)v123, DWORD2(v122) + 1, 8);
                v23 = DWORD2(v122);
              }
              *(_QWORD *)(v122 + 8 * v23) = "authenticates-null-values";
              v23 = ++DWORD2(v122);
            }
          }
          else
          {
            v23 = DWORD2(v122);
          }
          memset(&v121, 0, sizeof(v121));
          if (v23)
          {
            v24 = (const std::string::value_type **)v122;
            v25 = 8 * v23;
            do
            {
              v26 = *v24;
              size = *((_BYTE *)&v121.__r_.__value_.__s + 23) & 0x7F;
              if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                size = v121.__r_.__value_.__l.__size_;
              if (size)
                std::string::append(&v121, ",");
              std::string::append(&v121, v26);
              ++v24;
              v25 -= 8;
            }
            while (v25);
            v28 = HIBYTE(v121.__r_.__value_.__r.__words[2]);
            if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v28 = v121.__r_.__value_.__l.__size_;
            if (v28)
            {
              std::operator+<char>();
              v29 = std::string::append(&v112, "\"");
              v30 = v29->__r_.__value_.__r.__words[0];
              *(_QWORD *)&v124 = v29->__r_.__value_.__l.__size_;
              *(_QWORD *)((char *)&v124 + 7) = *(std::string::size_type *)((char *)&v29->__r_.__value_.__r.__words[1] + 7);
              v31 = HIBYTE(v29->__r_.__value_.__r.__words[2]);
              v29->__r_.__value_.__l.__size_ = 0;
              v29->__r_.__value_.__r.__words[2] = 0;
              v29->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v121.__r_.__value_.__l.__data_);
              v121.__r_.__value_.__r.__words[0] = v30;
              v121.__r_.__value_.__l.__size_ = v124;
              *(std::string::size_type *)((char *)&v121.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v124 + 7);
              *((_BYTE *)&v121.__r_.__value_.__s + 23) = v31;
              if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v112.__r_.__value_.__l.__data_);
            }
          }
          __p = 0uLL;
          v120 = 0;
          LODWORD(v112.__r_.__value_.__r.__words[1]) = 0;
          v115 = 0;
          v116 = 0;
          v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
          p_p = &__p;
          v117 = 0;
          v113 = 0;
          v114 = 0;
          v112.__r_.__value_.__r.__words[2] = 0;
          llvm::raw_ostream::write((llvm::raw_ostream *)&v112, "__ptrauth(", 0xAuLL);
          v32 = v7[2];
          if (v32 && (llvm::DWARFAbbreviationDeclaration::getAttributeValue(v32, v9, *v7, 15876, &v124), v126))
            v33 = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&v124);
          else
            v33 = 0;
          sub_1C5E21910((llvm::raw_ostream *)&v112, v33, 0, 0, 0);
          if ((unint64_t)(v113 - v114) > 1)
          {
            *(_WORD *)v114 = 8236;
            v114 += 2;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v112, ", ", 2uLL);
          }
          v34 = v7[2];
          if (v34 && (llvm::DWARFAbbreviationDeclaration::getAttributeValue(v34, v9, *v7, 15877, &v124), v126))
            v35 = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&v124);
          else
            v35 = 0;
          sub_1C5E21910((llvm::raw_ostream *)&v112, v35, 0, 0, 0);
          v36 = v114;
          if ((unint64_t)(v113 - v114) > 4)
          {
            v114[4] = 48;
            *v36 = 2016419884;
            v114 += 5;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v112, ", 0x0", 5uLL);
          }
          v37 = v7[2];
          if (v37
            && (llvm::DWARFAbbreviationDeclaration::getAttributeValue(v37, v9, *v7, 15878, &v124), v126)
            && (v59 = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&v124)) != 0)
          {
            v38 = v129;
            do
            {
              *--v38 = a0123456789abcd_6[v59 & 0xF] | 0x20;
              v60 = v59 > 0xF;
              v59 >>= 4;
            }
            while (v60);
          }
          else
          {
            v38 = &v128;
            v128 = 48;
          }
          sub_1C4E61270(&v124, v38, v129, v129 - v38);
          if ((SBYTE7(v125) & 0x80u) == 0)
            v39 = (const char *)&v124;
          else
            v39 = (const char *)v124;
          if ((SBYTE7(v125) & 0x80u) == 0)
            v40 = BYTE7(v125) & 0x7F;
          else
            v40 = *((_QWORD *)&v124 + 1);
          llvm::raw_ostream::write((llvm::raw_ostream *)&v112, v39, v40);
          if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v41 = &v121;
          else
            v41 = (std::string *)v121.__r_.__value_.__r.__words[0];
          if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v42 = *((_BYTE *)&v121.__r_.__value_.__s + 23) & 0x7F;
          else
            v42 = v121.__r_.__value_.__l.__size_;
          llvm::raw_ostream::write((llvm::raw_ostream *)&v112, (const char *)v41, v42);
          if (v113 == v114)
            llvm::raw_ostream::write((llvm::raw_ostream *)&v112, ")", 1uLL);
          else
            *v114++ = 41;
          if (SBYTE7(v125) < 0)
            operator delete((void *)v124);
          if (v120 >= 0)
            v43 = (llvm::raw_ostream *)&__p;
          else
            v43 = (llvm::raw_ostream *)__p;
          if (v120 >= 0)
            v44 = HIBYTE(v120) & 0x7F;
          else
            v44 = *((_QWORD *)&__p + 1);
          llvm::printEscapedString(v43, v44, *(llvm::raw_ostream **)a1);
          v112.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
          if (v117 == 1 && v112.__r_.__value_.__r.__words[2])
            MEMORY[0x1CAA32F9C](v112.__r_.__value_.__r.__words[2], 0x1000C8077774924);
          if (SHIBYTE(v120) < 0)
            operator delete((void *)__p);
          if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v121.__r_.__value_.__l.__data_);
          if ((_BYTE *)v122 != v123)
            free((void *)v122);
        }
        else if (v12 == 1)
        {
          sub_1C6250D68((uint64_t *)&v124, (uint64_t)v9, (uint64_t)v7);
          v20 = (uint64_t *)*((_QWORD *)&v124 + 1);
          v19 = (llvm::DWARFUnit *)v124;
          v21 = v125;
          if (v124 == v125)
          {
LABEL_23:
            a1[9] = 0;
            return;
          }
          v106 = 0;
          while (1)
          {
            v61 = v19;
            v62 = v20;
            v63 = v19;
            v64 = v20[2];
            if (!v64 || *(_WORD *)(v64 + 4) != 33)
              goto LABEL_120;
            v66 = v6 & 0xFFFFFFFFFFFFFF00;
            v110 &= 0xFFFFFFFFFFFFFF00;
            v111 &= 0xFFFFFFFFFFFFFF00;
            if (!v20 || !v19)
              break;
            llvm::DWARFAbbreviationDeclaration::getAttributeValue(v64, v19, *v20, 34, &v112);
            if ((_BYTE)v116)
            {
              v66 = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&v112);
              LOBYTE(v107) = v68;
            }
            else
            {
              LOBYTE(v107) = 0;
            }
            v69 = v20[2];
            v109 = v66;
            if (v69 && (llvm::DWARFAbbreviationDeclaration::getAttributeValue(v69, v63, *v20, 55, &v112), (_BYTE)v116))
            {
              v111 = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&v112);
              v67 = v70;
            }
            else
            {
              v67 = 0;
            }
            v71 = v20[2];
            if (!v71)
              goto LABEL_140;
            llvm::DWARFAbbreviationDeclaration::getAttributeValue(v71, v63, *v20, 47, &v112);
            if (!(_BYTE)v116)
              goto LABEL_140;
            v110 = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&v112);
            v72 = v80;
LABEL_141:
            llvm::DWARFUnit::extractDIEsIfNeeded(v9, 1);
            v73 = (uint64_t *)*((_QWORD *)v9 + 36);
            v74 = (uint64_t *)*((_QWORD *)v9 + 37);
            if (v73 == v74)
              v75 = 0;
            else
              v75 = v9;
            if (v73 == v74)
              v73 = 0;
            if (v75)
              v76 = v73 == 0;
            else
              v76 = 1;
            if (v76 || (v77 = v73[2]) == 0)
            {
LABEL_155:
              v79 = 0;
              v78 = 0;
              goto LABEL_156;
            }
            llvm::DWARFAbbreviationDeclaration::getAttributeValue(v77, v75, *v73, 19, &v112);
            v78 = v116;
            if ((_BYTE)v116)
            {
              v81 = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&v112);
              if (!v82)
                goto LABEL_155;
              v103 = llvm::dwarf::LanguageLowerBound(v81);
              v106 = v103 >> 8;
              v79 = v103;
              v78 = BYTE4(v103);
              if (BYTE4(v103) && (_BYTE)v107)
              {
                if (v109 == v103)
                  v104 = 0;
                else
                  v104 = v109;
                v105 = v107;
                if (v109 == v103)
                  v105 = 0;
                LOBYTE(v107) = v105;
                v109 = v104;
                v78 = 1;
              }
            }
            else
            {
              v79 = 0;
            }
LABEL_156:
            if ((_BYTE)v107 || v67 || v72)
            {
              if ((_BYTE)v107)
              {
                v107 = v107;
                v85 = *(llvm::raw_ostream **)a1;
                v86 = *(_WORD **)(*(_QWORD *)a1 + 32);
                if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v86 > 1uLL)
                {
                  *v86 = 23387;
                  *((_QWORD *)v85 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v85, "[[", 2uLL);
                }
                sub_1C5E21910(*(llvm::raw_ostream **)a1, v109, 0, 0, 0);
                goto LABEL_166;
              }
              v90 = *(llvm::raw_ostream **)a1;
              if (!(v67 | (unint64_t)v72) || !v78)
              {
                v107 = v107;
                v94 = (_WORD *)*((_QWORD *)v90 + 4);
                if (*((_QWORD *)v90 + 3) - (_QWORD)v94 > 1uLL)
                {
                  *v94 = 23387;
                  *((_QWORD *)v90 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v90, "[[", 2uLL);
                }
                v95 = *(llvm::raw_ostream **)a1;
                v96 = *(_BYTE **)(*(_QWORD *)a1 + 32);
                if ((unint64_t)v96 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
                {
                  llvm::raw_ostream::write(v95, 63);
                }
                else
                {
                  *((_QWORD *)v95 + 4) = v96 + 1;
                  *v96 = 63;
                }
LABEL_166:
                v87 = *(llvm::raw_ostream **)a1;
                v88 = *(_WORD **)(*(_QWORD *)a1 + 32);
                if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v88 > 1uLL)
                {
                  *v88 = 8236;
                  *((_QWORD *)v87 + 4) += 2;
                  if (v67)
                    goto LABEL_168;
                }
                else
                {
                  llvm::raw_ostream::write(v87, ", ", 2uLL);
                  if (v67)
                  {
LABEL_168:
                    v89 = *(llvm::raw_ostream **)a1;
                    if (v107)
                    {
                      v6 = v109;
                      sub_1C5E21910(v89, v109 + v111, 0, 0, 0);
                    }
                    else
                    {
                      v93 = (_DWORD *)*((_QWORD *)v89 + 4);
                      v6 = v109;
                      if (*((_QWORD *)v89 + 3) - (_QWORD)v93 > 3uLL)
                      {
                        *v93 = 539697215;
                        *((_QWORD *)v89 + 4) += 4;
                      }
                      else
                      {
                        v89 = llvm::raw_ostream::write(v89, "? + ", 4uLL);
                      }
                      sub_1C5E21910(v89, v111, 0, 0, 0);
                    }
                    goto LABEL_195;
                  }
                }
                v99 = *(llvm::raw_ostream **)a1;
                if (v72)
                {
                  sub_1C5E21910(v99, v110 + 1, 0, 0, 0);
                  v6 = v109;
                }
                else
                {
                  v100 = (_BYTE *)*((_QWORD *)v99 + 4);
                  v6 = v109;
                  if ((unint64_t)v100 >= *((_QWORD *)v99 + 3))
                  {
                    llvm::raw_ostream::write(v99, 63);
                  }
                  else
                  {
                    *((_QWORD *)v99 + 4) = v100 + 1;
                    *v100 = 63;
                  }
                }
LABEL_195:
                v101 = *(llvm::raw_ostream **)a1;
                v102 = *(_WORD **)(*(_QWORD *)a1 + 32);
                if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v102 > 1uLL)
                {
                  *v102 = 23849;
                  *((_QWORD *)v101 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v101, ")]", 2uLL);
                }
                goto LABEL_120;
              }
              v91 = (_BYTE *)*((_QWORD *)v90 + 4);
              v92 = *(llvm::raw_ostream **)a1;
              if ((unint64_t)v91 >= *((_QWORD *)v90 + 3))
              {
                v108 = v79;
                llvm::raw_ostream::write(v90, 91);
                v79 = v108;
              }
              else
              {
                *((_QWORD *)v90 + 4) = v91 + 1;
                *v91 = 91;
              }
              v97 = v111;
              if (!v67)
                v97 = v110 - (v79 | (unint64_t)(v106 << 8)) + 1;
              sub_1C5E21910(v92, v97, 0, 0, 0);
              v98 = (_BYTE *)*((_QWORD *)v92 + 4);
              if ((unint64_t)v98 >= *((_QWORD *)v92 + 3))
              {
                llvm::raw_ostream::write(v92, 93);
              }
              else
              {
                *((_QWORD *)v92 + 4) = v98 + 1;
                *v98 = 93;
              }
            }
            else
            {
              v83 = *(llvm::raw_ostream **)a1;
              v84 = *(_WORD **)(*(_QWORD *)a1 + 32);
              if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v84 > 1uLL)
              {
                *v84 = 23899;
                *((_QWORD *)v83 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v83, "[]", 2uLL);
              }
            }
            v6 = v109;
LABEL_120:
            v19 = 0;
            if (v20)
            {
              v20 = 0;
              if (v61)
              {
                v65 = *((_DWORD *)v62 + 3);
                if (v65)
                {
                  v20 = (uint64_t *)(*((_QWORD *)v63 + 36) + 24 * v65);
                  v19 = v63;
                }
                else
                {
                  v19 = 0;
                  v20 = 0;
                }
              }
            }
            else
            {
              v20 = 0;
            }
            if (__PAIR128__((unint64_t)v20, (unint64_t)v19) == v21)
              goto LABEL_23;
          }
          LOBYTE(v107) = 0;
          v109 = v66;
          v67 = 0;
LABEL_140:
          v72 = 0;
          goto LABEL_141;
        }
      }
    }
  }
}

void *sub_1C54AA548(_BYTE *a1, llvm::DWARFUnit *a2, llvm::DWARFUnit *a3, const void *a4, size_t a5)
{
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  uint64_t v14;
  void *result;

  sub_1C54AA640((uint64_t)a1, a2, (uint64_t)a3);
  if (a1[8])
  {
    v10 = *(llvm::raw_ostream **)a1;
    v11 = *(_BYTE **)(*(_QWORD *)a1 + 32);
    if ((unint64_t)v11 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
    {
      llvm::raw_ostream::write(v10, 32);
    }
    else
    {
      *((_QWORD *)v10 + 4) = v11 + 1;
      *v11 = 32;
    }
  }
  if (sub_1C54AA6B4(a2, a3))
  {
    v12 = *(llvm::raw_ostream **)a1;
    v13 = *(_BYTE **)(*(_QWORD *)a1 + 32);
    if ((unint64_t)v13 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
    {
      llvm::raw_ostream::write(v12, 40);
    }
    else
    {
      *((_QWORD *)v12 + 4) = v13 + 1;
      *v13 = 40;
    }
  }
  v14 = *(_QWORD *)a1;
  result = *(void **)(*(_QWORD *)a1 + 32);
  if (a5 <= *(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)result)
  {
    if (a5)
    {
      result = memcpy(result, a4, a5);
      *(_QWORD *)(v14 + 32) += a5;
    }
  }
  else
  {
    result = llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, (const char *)a4, a5);
  }
  *((_WORD *)a1 + 4) = 0;
  return result;
}

uint64_t sub_1C54AA640(uint64_t a1, llvm::DWARFUnit *a2, uint64_t a3)
{
  llvm::DWARFUnit *v3;
  int v4;
  unsigned int v5;
  uint64_t v6;

  v3 = a2;
  v4 = a1;
  if (a2 && a3)
  {
    v5 = *(_DWORD *)(a3 + 8);
    if (v5 == -1)
    {
      v6 = 0;
      a2 = 0;
    }
    else
    {
      v6 = *((_QWORD *)a2 + 36) + 24 * v5;
    }
    sub_1C54A8BC4(a1, a2, v6);
  }
  return sub_1C54A8CE4(v4, v3);
}

BOOL sub_1C54AA6B4(llvm::DWARFUnit *a1, llvm::DWARFUnit *a2)
{
  uint64_t i;
  int v3;
  llvm::DWARFUnit *v4;
  llvm::DWARFUnit *v7[2];
  llvm::DWARFUnit *v8[2];

  for (i = 0; a1 && a2; i = 0)
  {
    i = *((_QWORD *)a2 + 2);
    if (!i)
      break;
    v3 = *(unsigned __int16 *)(i + 4);
    if (v3 != 53 && v3 != 38)
      return v3 == 21 || v3 == 1;
    v8[0] = a1;
    v8[1] = a2;
    v7[0] = llvm::DWARFDie::getAttributeValueAsReferencedDie(v8, 73);
    v7[1] = v4;
    a1 = llvm::DWARFDie::resolveTypeUnitReference(v7);
  }
  return i;
}

uint64_t sub_1C54AA730(_BYTE *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t *v5;
  _BYTE *v6;
  llvm::DWARFUnit *FirstChild;
  uint64_t *v9;
  uint64_t *v11;
  uint64_t *v12;
  llvm::DWARFUnit *v13;
  int v14;
  llvm::DWARFUnit *v15;
  uint64_t *v16;
  llvm::DWARFUnit *v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  llvm::DWARFUnit *v21;
  uint64_t *v22;
  uint64_t *v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  _WORD *v28;
  llvm::DWARFUnit *v29;
  uint64_t v30;
  unsigned int v31;
  const char *v32;
  uint64_t v33;
  char *v34;
  char v35;
  const char *v36;
  size_t v37;
  _WORD *v38;
  llvm::raw_ostream *v39;
  _BYTE *v40;
  _WORD *v41;
  uint64_t v42;
  int v43;
  llvm::raw_ostream *v44;
  void *v45;
  llvm::raw_ostream *v46;
  _BYTE *v47;
  char *v48;
  char v49;
  char *v50;
  size_t v51;
  uint64_t v52;
  llvm::raw_ostream *v54;
  _BYTE *v55;
  uint64_t v56;
  llvm::raw_ostream *v57;
  const char *v58;
  const char *p_p;
  size_t v60;
  unint64_t AsSignedConstant;
  llvm::raw_ostream *v63;
  _DWORD *v64;
  const char *v65;
  size_t v66;
  llvm::raw_ostream *v68;
  const char *v69;
  const char *v70;
  size_t v71;
  llvm::raw_ostream *v72;
  _WORD *v73;
  const char *v74;
  size_t v75;
  uint64_t v76;
  BOOL v77;
  llvm::raw_ostream *v79;
  const char *v80;
  const char *v81;
  size_t v82;
  char *v83;
  unint64_t v86;
  llvm::raw_ostream *v87;
  _BYTE *v88;
  _OWORD *v90;
  llvm::raw_ostream *v91;
  const char *v92;
  const char *v93;
  size_t v94;
  llvm::raw_ostream *v95;
  llvm::raw_ostream *v98;
  const char *v99;
  const char *v100;
  size_t v101;
  uint64_t v102;
  llvm::raw_ostream *v103;
  unint64_t AsUnsignedConstant;
  size_t v105;
  void *v106;
  llvm::raw_ostream *v107;
  const char *v108;
  const char *v109;
  size_t v110;
  llvm::raw_ostream *v111;
  _WORD *v112;
  const char *v113;
  size_t v114;
  uint64_t v115;
  void *v116;
  llvm::raw_ostream *v117;
  _BYTE *v118;
  int *v119;
  llvm::raw_ostream *v120;
  const char *v121;
  const char *v122;
  size_t v123;
  _BYTE *v124;
  uint64_t v125;
  llvm::raw_ostream *v126;
  _BYTE *v127;
  llvm::raw_ostream *v128;
  _BYTE *v129;
  llvm::raw_ostream *v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  int v136;
  uint64_t result;
  llvm::raw_ostream *v138;
  _BYTE *v139;
  unint64_t v140;
  uint64_t LastChild;
  _OWORD v142[3];
  llvm::DWARFUnit *AttributeValueAsReferencedDie;
  const char *v144;
  uint64_t v145;
  void *__p;
  uint64_t *v147;
  char v148;
  _OWORD v149[3];
  char v150;
  _BYTE v151[9];

  v5 = 0;
  v151[0] = 1;
  if (a4)
    v6 = a4;
  else
    v6 = v151;
  if (a2)
  {
    FirstChild = 0;
    LastChild = 0;
    v9 = 0;
    if (a3)
    {
      FirstChild = (llvm::DWARFUnit *)llvm::DWARFUnit::getFirstChild(a2, a3);
      v5 = v11;
      LastChild = llvm::DWARFUnit::getLastChild(a2, a3);
      v9 = v12;
    }
  }
  else
  {
    FirstChild = 0;
    LastChild = 0;
    v9 = 0;
  }
  v13 = (llvm::DWARFUnit *)LastChild;
  if (v9 == v5 && (llvm::DWARFUnit *)LastChild == FirstChild)
    return 0;
  v14 = 0;
  do
  {
    v15 = FirstChild;
    v16 = v5;
    v17 = FirstChild;
    v18 = v5[2];
    if (!v18)
      goto LABEL_35;
    v19 = *(unsigned __int16 *)(v18 + 4);
    if (v19 == 16647)
    {
      sub_1C54AA730(a1, FirstChild, v5, v6);
      v18 = v5[2];
      if (!v18)
        goto LABEL_34;
      v19 = *(unsigned __int16 *)(v18 + 4);
      v14 = 1;
    }
    if (v19 == 47)
    {
      if (v5 && FirstChild)
      {
        llvm::DWARFAbbreviationDeclaration::getAttributeValue(v18, FirstChild, *v5, 73, v149);
      }
      else
      {
        LOBYTE(v149[0]) = 0;
        v150 = 0;
      }
      v26 = *(llvm::raw_ostream **)a1;
      if (*v6)
      {
        v27 = (_BYTE *)*((_QWORD *)v26 + 4);
        if ((unint64_t)v27 >= *((_QWORD *)v26 + 3))
        {
          llvm::raw_ostream::write(v26, 60);
        }
        else
        {
          *((_QWORD *)v26 + 4) = v27 + 1;
          *v27 = 60;
        }
      }
      else
      {
        v28 = (_WORD *)*((_QWORD *)v26 + 4);
        if (*((_QWORD *)v26 + 3) - (_QWORD)v28 > 1uLL)
        {
          *v28 = 8236;
          *((_QWORD *)v26 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v26, ", ", 2uLL);
        }
      }
      a1[9] = 0;
      *v6 = 0;
      if (v150)
      {
        v142[0] = v149[0];
        v142[1] = v149[1];
        v142[2] = v149[2];
        __p = FirstChild;
        v147 = v5;
        AttributeValueAsReferencedDie = llvm::DWARFDie::getAttributeValueAsReferencedDie((llvm::DWARFDie *)&__p, (const llvm::DWARFFormValue *)v142);
        v144 = v32;
        v29 = llvm::DWARFDie::resolveTypeUnitReference(&AttributeValueAsReferencedDie);
        v30 = v33;
      }
      else
      {
        v29 = 0;
        v30 = 0;
      }
      sub_1C54A8B34(a1, v29, v30);
LABEL_34:
      v14 = 1;
      goto LABEL_35;
    }
    if (v19 != 16646)
    {
      if (v19 != 48)
        goto LABEL_35;
      *(_QWORD *)&v149[0] = FirstChild;
      *((_QWORD *)&v149[0] + 1) = v5;
      __p = llvm::DWARFDie::getAttributeValueAsReferencedDie((llvm::DWARFUnit **)v149, 73);
      v147 = v20;
      v21 = llvm::DWARFDie::resolveTypeUnitReference((llvm::DWARFUnit **)&__p);
      v23 = v22;
      v24 = *(llvm::raw_ostream **)a1;
      if (*v6)
      {
        v25 = (_BYTE *)*((_QWORD *)v24 + 4);
        if ((unint64_t)v25 >= *((_QWORD *)v24 + 3))
        {
          llvm::raw_ostream::write(v24, 60);
        }
        else
        {
          *((_QWORD *)v24 + 4) = v25 + 1;
          *v25 = 60;
        }
      }
      else
      {
        v38 = (_WORD *)*((_QWORD *)v24 + 4);
        if (*((_QWORD *)v24 + 3) - (_QWORD)v38 > 1uLL)
        {
          *v38 = 8236;
          *((_QWORD *)v24 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v24, ", ", 2uLL);
        }
      }
      a1[9] = 0;
      *v6 = 0;
      v42 = v23[2];
      if (!v42)
        goto LABEL_79;
      v43 = *(unsigned __int16 *)(v42 + 4);
      if (v43 == 15)
        goto LABEL_65;
      if (v43 == 4)
      {
        v46 = *(llvm::raw_ostream **)a1;
        v47 = *(_BYTE **)(*(_QWORD *)a1 + 32);
        if ((unint64_t)v47 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
        {
          llvm::raw_ostream::write(v46, 40);
        }
        else
        {
          *((_QWORD *)v46 + 4) = v47 + 1;
          *v47 = 40;
        }
        sub_1C54A8B34(a1, v21, v23);
        v54 = *(llvm::raw_ostream **)a1;
        v55 = *(_BYTE **)(*(_QWORD *)a1 + 32);
        if ((unint64_t)v55 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
        {
          llvm::raw_ostream::write(v54, 41);
        }
        else
        {
          *((_QWORD *)v54 + 4) = v55 + 1;
          *v55 = 41;
        }
        if (v5 && v15 && (v56 = v5[2]) != 0)
        {
          llvm::DWARFAbbreviationDeclaration::getAttributeValue(v56, v17, *v5, 28, v149);
        }
        else
        {
          LOBYTE(v149[0]) = 0;
          v150 = 0;
        }
        v57 = *(llvm::raw_ostream **)a1;
        AttributeValueAsReferencedDie = (llvm::DWARFUnit *)llvm::DWARFFormValue::getAsSignedConstant((llvm::DWARFFormValue *)v149);
        v144 = v58;
        sub_1C54AB80C((uint64_t)&__p, (unint64_t *)&AttributeValueAsReferencedDie);
        if (v148 >= 0)
          p_p = (const char *)&__p;
        else
          p_p = (const char *)__p;
        if (v148 >= 0)
          v60 = v148 & 0x7F;
        else
          v60 = (size_t)v147;
        llvm::raw_ostream::write(v57, p_p, v60);
        if (v148 < 0)
          operator delete(__p);
        v14 = 1;
        v13 = (llvm::DWARFUnit *)LastChild;
        goto LABEL_35;
      }
      if (v21 && v23)
      {
        llvm::DWARFAbbreviationDeclaration::getAttributeValue(v42, v21, *v23, 3, v149);
      }
      else
      {
LABEL_79:
        LOBYTE(v149[0]) = 0;
        v150 = 0;
      }
      v48 = sub_1C624DEB4((llvm::DWARFFormValue *)v149);
      if (v49)
        v50 = v48;
      else
        v50 = 0;
      if (v50)
        v51 = strlen(v50);
      else
        v51 = 0;
      if (v5 && v15 && (v52 = v5[2]) != 0)
      {
        llvm::DWARFAbbreviationDeclaration::getAttributeValue(v52, v17, *v5, 28, v149);
      }
      else
      {
        LOBYTE(v149[0]) = 0;
        v150 = 0;
      }
      switch(v51)
      {
        case 3uLL:
          if (*(_WORD *)v50 != 28265 || v50[2] != 116)
            goto LABEL_65;
          goto LABEL_179;
        case 4uLL:
          if (*(_DWORD *)v50 == 1819242338)
          {
            v103 = *(llvm::raw_ostream **)a1;
            AsUnsignedConstant = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v149);
            if (AsUnsignedConstant)
              v74 = "true";
            else
              v74 = "false";
            if (AsUnsignedConstant)
              v105 = 4;
            else
              v105 = 5;
            v106 = (void *)*((_QWORD *)v103 + 4);
            if (v105 <= *((_QWORD *)v103 + 3) - (_QWORD)v106)
            {
              memcpy(v106, v74, v105);
              *((_QWORD *)v103 + 4) += v105;
              goto LABEL_269;
            }
            v72 = v103;
            v75 = v105;
LABEL_268:
            llvm::raw_ostream::write(v72, v74, v75);
LABEL_269:
            v13 = (llvm::DWARFUnit *)LastChild;
            goto LABEL_65;
          }
          if (*(_DWORD *)v50 != 1735290732)
          {
            if (*(_DWORD *)v50 == 1918986339)
            {
              AsSignedConstant = llvm::DWARFFormValue::getAsSignedConstant((llvm::DWARFFormValue *)v149);
              goto LABEL_235;
            }
LABEL_65:
            v14 = 1;
            goto LABEL_35;
          }
          v120 = *(llvm::raw_ostream **)a1;
          AttributeValueAsReferencedDie = (llvm::DWARFUnit *)llvm::DWARFFormValue::getAsSignedConstant((llvm::DWARFFormValue *)v149);
          v144 = v121;
          sub_1C54AB80C((uint64_t)&__p, (unint64_t *)&AttributeValueAsReferencedDie);
          if (v148 >= 0)
            v122 = (const char *)&__p;
          else
            v122 = (const char *)__p;
          if (v148 >= 0)
            v123 = v148 & 0x7F;
          else
            v123 = (size_t)v147;
          llvm::raw_ostream::write(v120, v122, v123);
          if (v148 < 0)
            operator delete(__p);
          v111 = *(llvm::raw_ostream **)a1;
          v124 = *(_BYTE **)(*(_QWORD *)a1 + 32);
          v13 = (llvm::DWARFUnit *)LastChild;
          if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v124)
          {
            v113 = "L";
            v114 = 1;
            goto LABEL_248;
          }
          *v124 = 76;
          v135 = *((_QWORD *)v111 + 4) + 1;
          break;
        case 5uLL:
          if (*(_DWORD *)v50 != 1919903859 || v50[4] != 116)
            goto LABEL_65;
          v63 = *(llvm::raw_ostream **)a1;
          v64 = *(_DWORD **)(*(_QWORD *)a1 + 32);
          if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v64 <= 6uLL)
          {
            v65 = "(short)";
            v66 = 7;
            goto LABEL_178;
          }
          *(_DWORD *)((char *)v64 + 3) = 695497327;
          *v64 = 1869116200;
          v132 = *((_QWORD *)v63 + 4) + 7;
          goto LABEL_298;
        case 9uLL:
          if (*(_QWORD *)v50 != 0x6E6F6C20676E6F6CLL || v50[8] != 103)
            goto LABEL_65;
          v68 = *(llvm::raw_ostream **)a1;
          AttributeValueAsReferencedDie = (llvm::DWARFUnit *)llvm::DWARFFormValue::getAsSignedConstant((llvm::DWARFFormValue *)v149);
          v144 = v69;
          sub_1C54AB80C((uint64_t)&__p, (unint64_t *)&AttributeValueAsReferencedDie);
          if (v148 >= 0)
            v70 = (const char *)&__p;
          else
            v70 = (const char *)__p;
          if (v148 >= 0)
            v71 = v148 & 0x7F;
          else
            v71 = (size_t)v147;
          llvm::raw_ostream::write(v68, v70, v71);
          if (v148 < 0)
            operator delete(__p);
          v72 = *(llvm::raw_ostream **)a1;
          v73 = *(_WORD **)(*(_QWORD *)a1 + 32);
          if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v73 <= 1uLL)
          {
            v74 = "LL";
            v75 = 2;
            goto LABEL_268;
          }
          *v73 = 19532;
          v133 = *((_QWORD *)v72 + 4) + 2;
          goto LABEL_314;
        case 0xBuLL:
          v76 = *(_QWORD *)(v50 + 3);
          v77 = *(_QWORD *)v50 == 0x632064656E676973;
          goto LABEL_164;
        case 0xCuLL:
          if (*(_QWORD *)v50 != 0x64656E6769736E75 || *((_DWORD *)v50 + 2) != 1953392928)
            goto LABEL_65;
          v79 = *(llvm::raw_ostream **)a1;
          AttributeValueAsReferencedDie = (llvm::DWARFUnit *)llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v149);
          v144 = v80;
          sub_1C4D737CC((unint64_t *)&AttributeValueAsReferencedDie, (uint64_t)&__p);
          if (v148 >= 0)
            v81 = (const char *)&__p;
          else
            v81 = (const char *)__p;
          if (v148 >= 0)
            v82 = v148 & 0x7F;
          else
            v82 = (size_t)v147;
          llvm::raw_ostream::write(v79, v81, v82);
          if (v148 < 0)
            operator delete(__p);
          v72 = *(llvm::raw_ostream **)a1;
          v83 = *(char **)(*(_QWORD *)a1 + 32);
          if (*(char **)(*(_QWORD *)a1 + 24) == v83)
          {
            v74 = "U";
            goto LABEL_158;
          }
          v134 = 85;
          goto LABEL_296;
        case 0xDuLL:
          if (*(_QWORD *)v50 != 0x64656E6769736E75 || *(_QWORD *)(v50 + 5) != 0x676E6F6C2064656ELL)
          {
            v76 = *(_QWORD *)(v50 + 5);
            v77 = *(_QWORD *)v50 == 0x64656E6769736E75;
LABEL_164:
            if (!v77 || v76 != 0x726168632064656ELL)
              goto LABEL_65;
            v86 = llvm::DWARFFormValue::getAsSignedConstant((llvm::DWARFFormValue *)v149);
            v87 = *(llvm::raw_ostream **)a1;
            v88 = *(_BYTE **)(*(_QWORD *)a1 + 32);
            v140 = v86;
            if ((unint64_t)v88 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
            {
              llvm::raw_ostream::write(v87, 40);
            }
            else
            {
              *((_QWORD *)v87 + 4) = v88 + 1;
              *v88 = 40;
            }
            v115 = *(_QWORD *)a1;
            v116 = *(void **)(*(_QWORD *)a1 + 32);
            if (v51 <= *(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v116)
            {
              memcpy(v116, v50, v51);
              *(_QWORD *)(v115 + 32) += v51;
            }
            else
            {
              llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, v50, v51);
            }
            v117 = *(llvm::raw_ostream **)a1;
            v118 = *(_BYTE **)(*(_QWORD *)a1 + 32);
            if ((unint64_t)v118 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
            {
              llvm::raw_ostream::write(v117, 41);
            }
            else
            {
              *((_QWORD *)v117 + 4) = v118 + 1;
              *v118 = 41;
            }
            AsSignedConstant = v140;
LABEL_235:
            switch(AsSignedConstant)
            {
              case 7uLL:
                v72 = *(llvm::raw_ostream **)a1;
                v119 = *(int **)(*(_QWORD *)a1 + 32);
                if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v119 <= 3uLL)
                {
                  v74 = "'\\a'";
                  goto LABEL_267;
                }
                v136 = 660692007;
                goto LABEL_313;
              case 8uLL:
                v72 = *(llvm::raw_ostream **)a1;
                v119 = *(int **)(*(_QWORD *)a1 + 32);
                if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v119 <= 3uLL)
                {
                  v74 = "'\\b'";
                  goto LABEL_267;
                }
                v136 = 660757543;
                goto LABEL_313;
              case 9uLL:
                v72 = *(llvm::raw_ostream **)a1;
                v119 = *(int **)(*(_QWORD *)a1 + 32);
                if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v119 <= 3uLL)
                {
                  v74 = "'\\t'";
                  goto LABEL_267;
                }
                v136 = 661937191;
                goto LABEL_313;
              case 0xAuLL:
                v72 = *(llvm::raw_ostream **)a1;
                v119 = *(int **)(*(_QWORD *)a1 + 32);
                if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v119 <= 3uLL)
                {
                  v74 = "'\\n'";
                  goto LABEL_267;
                }
                v136 = 661543975;
                goto LABEL_313;
              case 0xBuLL:
                v72 = *(llvm::raw_ostream **)a1;
                v119 = *(int **)(*(_QWORD *)a1 + 32);
                if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v119 <= 3uLL)
                {
                  v74 = "'\\v'";
                  goto LABEL_267;
                }
                v136 = 662068263;
                goto LABEL_313;
              case 0xCuLL:
                v72 = *(llvm::raw_ostream **)a1;
                v119 = *(int **)(*(_QWORD *)a1 + 32);
                if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v119 <= 3uLL)
                {
                  v74 = "'\\f'";
                  goto LABEL_267;
                }
                v136 = 661019687;
                goto LABEL_313;
              case 0xDuLL:
                v72 = *(llvm::raw_ostream **)a1;
                v119 = *(int **)(*(_QWORD *)a1 + 32);
                if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v119 <= 3uLL)
                {
                  v74 = "'\\r'";
                  goto LABEL_267;
                }
                v136 = 661806119;
                goto LABEL_313;
              default:
                if (AsSignedConstant == 39)
                {
                  v72 = *(llvm::raw_ostream **)a1;
                  v119 = *(int **)(*(_QWORD *)a1 + 32);
                  if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v119 <= 3uLL)
                  {
                    v74 = "'\\''";
                    goto LABEL_267;
                  }
                  v136 = 656890919;
                  goto LABEL_313;
                }
                if (AsSignedConstant == 92)
                {
                  v72 = *(llvm::raw_ostream **)a1;
                  v119 = *(int **)(*(_QWORD *)a1 + 32);
                  if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v119 <= 3uLL)
                  {
                    v74 = "'\\\\'";
LABEL_267:
                    v75 = 4;
                    goto LABEL_268;
                  }
                  v136 = 660364327;
LABEL_313:
                  *v119 = v136;
                  v133 = *((_QWORD *)v72 + 4) + 4;
LABEL_314:
                  *((_QWORD *)v72 + 4) = v133;
                  goto LABEL_269;
                }
                if ((~(_DWORD)AsSignedConstant & 0xFFFFFF00) != 0)
                  v125 = AsSignedConstant;
                else
                  v125 = AsSignedConstant;
                if ((unint64_t)(v125 - 32) > 0x5E)
                {
                  if (v125 > 255)
                  {
                    v130 = *(llvm::raw_ostream **)a1;
                    AttributeValueAsReferencedDie = (llvm::DWARFUnit *)&unk_1E8169D20;
                    if ((unint64_t)v125 >> 16)
                      v131 = "'\\U%08x'";
                    else
                      v131 = "'\\u%04x'";
                    v144 = v131;
                    v145 = v125;
                    sub_1C54AB8EC((uint64_t)&__p, (uint64_t)&AttributeValueAsReferencedDie);
                    if (v148 >= 0)
                      v93 = (const char *)&__p;
                    else
                      v93 = (const char *)__p;
                    if (v148 >= 0)
                      v94 = v148 & 0x7F;
                    else
                      v94 = (size_t)v147;
                    v95 = v130;
                  }
                  else
                  {
                    v91 = *(llvm::raw_ostream **)a1;
                    AttributeValueAsReferencedDie = (llvm::DWARFUnit *)&unk_1E8169D20;
                    v144 = "'\\x%02x'";
                    v145 = v125;
                    sub_1C54AB8EC((uint64_t)&__p, (uint64_t)&AttributeValueAsReferencedDie);
LABEL_180:
                    if (v148 >= 0)
                      v93 = (const char *)&__p;
                    else
                      v93 = (const char *)__p;
                    if (v148 >= 0)
                      v94 = v148 & 0x7F;
                    else
                      v94 = (size_t)v147;
                    v95 = v91;
                  }
                  llvm::raw_ostream::write(v95, v93, v94);
                  if (v148 < 0)
                    operator delete(__p);
                  goto LABEL_269;
                }
                v126 = *(llvm::raw_ostream **)a1;
                v127 = *(_BYTE **)(*(_QWORD *)a1 + 32);
                if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v127)
                {
                  llvm::raw_ostream::write(v126, "'", 1uLL);
                }
                else
                {
                  *v127 = 39;
                  ++*((_QWORD *)v126 + 4);
                }
                v128 = *(llvm::raw_ostream **)a1;
                v129 = *(_BYTE **)(*(_QWORD *)a1 + 32);
                if ((unint64_t)v129 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
                {
                  llvm::raw_ostream::write(v128, v125);
                }
                else
                {
                  *((_QWORD *)v128 + 4) = v129 + 1;
                  *v129 = v125;
                }
                v72 = *(llvm::raw_ostream **)a1;
                v83 = *(char **)(*(_QWORD *)a1 + 32);
                if (*(char **)(*(_QWORD *)a1 + 24) != v83)
                {
                  v134 = 39;
LABEL_296:
                  *v83 = v134;
                  v133 = *((_QWORD *)v72 + 4) + 1;
                  goto LABEL_314;
                }
                v74 = "'";
LABEL_158:
                v75 = 1;
                break;
            }
            goto LABEL_268;
          }
          v107 = *(llvm::raw_ostream **)a1;
          AttributeValueAsReferencedDie = (llvm::DWARFUnit *)llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v149);
          v144 = v108;
          sub_1C4D737CC((unint64_t *)&AttributeValueAsReferencedDie, (uint64_t)&__p);
          if (v148 >= 0)
            v109 = (const char *)&__p;
          else
            v109 = (const char *)__p;
          if (v148 >= 0)
            v110 = v148 & 0x7F;
          else
            v110 = (size_t)v147;
          llvm::raw_ostream::write(v107, v109, v110);
          if (v148 < 0)
            operator delete(__p);
          v111 = *(llvm::raw_ostream **)a1;
          v112 = *(_WORD **)(*(_QWORD *)a1 + 32);
          v13 = (llvm::DWARFUnit *)LastChild;
          if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v112 <= 1uLL)
          {
            v113 = "UL";
            v114 = 2;
LABEL_248:
            llvm::raw_ostream::write(v111, v113, v114);
            goto LABEL_65;
          }
          *v112 = 19541;
          v135 = *((_QWORD *)v111 + 4) + 2;
          break;
        case 0xEuLL:
          if (*(_QWORD *)v50 != 0x64656E6769736E75 || *(_QWORD *)(v50 + 6) != 0x74726F6873206465)
            goto LABEL_65;
          v63 = *(llvm::raw_ostream **)a1;
          v90 = *(_OWORD **)(*(_QWORD *)a1 + 32);
          if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v90 > 0xFuLL)
          {
            *v90 = *(_OWORD *)"(unsigned short)";
            v132 = *((_QWORD *)v63 + 4) + 16;
LABEL_298:
            *((_QWORD *)v63 + 4) = v132;
          }
          else
          {
            v65 = "(unsigned short)";
            v66 = 16;
LABEL_178:
            llvm::raw_ostream::write(v63, v65, v66);
          }
LABEL_179:
          v91 = *(llvm::raw_ostream **)a1;
          AttributeValueAsReferencedDie = (llvm::DWARFUnit *)llvm::DWARFFormValue::getAsSignedConstant((llvm::DWARFFormValue *)v149);
          v144 = v92;
          sub_1C54AB80C((uint64_t)&__p, (unint64_t *)&AttributeValueAsReferencedDie);
          goto LABEL_180;
        case 0x12uLL:
          if (*(_QWORD *)v50 != 0x64656E6769736E75
            || *((_QWORD *)v50 + 1) != 0x6F6C20676E6F6C20
            || *((_WORD *)v50 + 8) != 26478)
          {
            goto LABEL_65;
          }
          v98 = *(llvm::raw_ostream **)a1;
          AttributeValueAsReferencedDie = (llvm::DWARFUnit *)llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v149);
          v144 = v99;
          sub_1C4D737CC((unint64_t *)&AttributeValueAsReferencedDie, (uint64_t)&__p);
          if (v148 >= 0)
            v100 = (const char *)&__p;
          else
            v100 = (const char *)__p;
          if (v148 >= 0)
            v101 = v148 & 0x7F;
          else
            v101 = (size_t)v147;
          llvm::raw_ostream::write(v98, v100, v101);
          if (v148 < 0)
            operator delete(__p);
          v72 = *(llvm::raw_ostream **)a1;
          v102 = *(_QWORD *)(*(_QWORD *)a1 + 32);
          if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v102) <= 2)
          {
            v74 = "ULL";
            v75 = 3;
            goto LABEL_268;
          }
          *(_BYTE *)(v102 + 2) = 76;
          *(_WORD *)v102 = 19541;
          v133 = *((_QWORD *)v72 + 4) + 3;
          goto LABEL_314;
        default:
          goto LABEL_65;
      }
      *((_QWORD *)v111 + 4) = v135;
      goto LABEL_65;
    }
    if (v5 && FirstChild)
    {
      llvm::DWARFAbbreviationDeclaration::getAttributeValue(v18, FirstChild, *v5, 8464, v149);
    }
    else
    {
      LOBYTE(v149[0]) = 0;
      v150 = 0;
    }
    v34 = sub_1C624DEB4((llvm::DWARFFormValue *)v149);
    if (v35)
      v36 = v34;
    else
      v36 = 0;
    if (v36)
      v37 = strlen(v36);
    else
      v37 = 0;
    v39 = *(llvm::raw_ostream **)a1;
    if (*v6)
    {
      v40 = (_BYTE *)*((_QWORD *)v39 + 4);
      if ((unint64_t)v40 >= *((_QWORD *)v39 + 3))
      {
        llvm::raw_ostream::write(v39, 60);
      }
      else
      {
        *((_QWORD *)v39 + 4) = v40 + 1;
        *v40 = 60;
      }
    }
    else
    {
      v41 = (_WORD *)*((_QWORD *)v39 + 4);
      if (*((_QWORD *)v39 + 3) - (_QWORD)v41 > 1uLL)
      {
        *v41 = 8236;
        *((_QWORD *)v39 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v39, ", ", 2uLL);
      }
    }
    a1[9] = 0;
    *v6 = 0;
    v44 = *(llvm::raw_ostream **)a1;
    v45 = *(void **)(*(_QWORD *)a1 + 32);
    if (v37 <= *(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v45)
    {
      if (v37)
      {
        memcpy(v45, v36, v37);
        *((_QWORD *)v44 + 4) += v37;
      }
    }
    else
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, v36, v37);
    }
    v14 = 1;
    v13 = (llvm::DWARFUnit *)LastChild;
LABEL_35:
    FirstChild = 0;
    if (v5)
    {
      v5 = 0;
      if (v15)
      {
        v31 = *((_DWORD *)v16 + 3);
        if (v31)
        {
          v5 = (uint64_t *)(*((_QWORD *)v17 + 36) + 24 * v31);
          FirstChild = v17;
        }
        else
        {
          FirstChild = 0;
          v5 = 0;
        }
      }
    }
    else
    {
      v5 = 0;
    }
  }
  while (v9 != v5 || v13 != FirstChild);
  if (!v14)
    return 0;
  result = 1;
  if (v6 == v151 && *v6)
  {
    v138 = *(llvm::raw_ostream **)a1;
    v139 = *(_BYTE **)(*(_QWORD *)a1 + 32);
    if ((unint64_t)v139 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
    {
      llvm::raw_ostream::write(v138, 60);
    }
    else
    {
      *((_QWORD *)v138 + 4) = v139 + 1;
      *v139 = 60;
    }
    a1[9] = 0;
    return 1;
  }
  return result;
}

llvm::DWARFUnit *sub_1C54AB730(__int128 *a1, llvm::DWARFUnit **a2, _OWORD *a3, _OWORD *a4)
{
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  llvm::DWARFUnit *result;
  llvm::DWARFUnit *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  llvm::DWARFUnit *v15;
  llvm::DWARFUnit *AttributeValueAsReferencedDie;
  uint64_t v17;
  __int128 v18;

  v7 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 16);
  v8 = a4;
  if (v7)
  {
    if (*(_WORD *)(v7 + 4) == 38)
      v8 = a3;
    else
      v8 = a4;
  }
  *v8 = *a1;
  v18 = *a1;
  AttributeValueAsReferencedDie = llvm::DWARFDie::getAttributeValueAsReferencedDie((llvm::DWARFUnit **)&v18, 73);
  v17 = v9;
  result = llvm::DWARFDie::resolveTypeUnitReference(&AttributeValueAsReferencedDie);
  *a2 = result;
  a2[1] = v11;
  if (result)
  {
    if (v11)
    {
      v12 = *((_QWORD *)v11 + 2);
      if (v12)
      {
        v13 = *(unsigned __int16 *)(v12 + 4);
        if (v13 == 53)
        {
          *a4 = *(_OWORD *)a2;
        }
        else
        {
          if (v13 != 38)
            return result;
          *a3 = *(_OWORD *)a2;
        }
        v18 = *(_OWORD *)a2;
        AttributeValueAsReferencedDie = llvm::DWARFDie::getAttributeValueAsReferencedDie((llvm::DWARFUnit **)&v18, 73);
        v17 = v14;
        result = llvm::DWARFDie::resolveTypeUnitReference(&AttributeValueAsReferencedDie);
        *a2 = result;
        a2[1] = v15;
      }
    }
  }
  return result;
}

void sub_1C54AB80C(uint64_t a1, unint64_t *a2)
{
  __int128 v3;
  void (**v4)(llvm::raw_ostream *__hidden);
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  void **v12;
  void *v13[2];
  uint64_t v14;

  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  v5 = 0;
  v9 = 0;
  v10 = 0;
  v4 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v12 = v13;
  v11 = 0;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v4, *a2);
  if (*((char *)v12 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a1, *v12, (unint64_t)v12[1]);
  }
  else
  {
    v3 = *(_OWORD *)v12;
    *(_QWORD *)(a1 + 16) = v12[2];
    *(_OWORD *)a1 = v3;
  }
  v4 = off_1E81A6E70;
  if (v11 == 1 && v6)
    MEMORY[0x1CAA32F9C](v6, 0x1000C8077774924);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
}

void sub_1C54AB8EC(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  void (**v4)(llvm::raw_ostream *__hidden);
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  void **v12;
  void *v13[2];
  uint64_t v14;

  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  v5 = 0;
  v9 = 0;
  v10 = 0;
  v4 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v12 = v13;
  v11 = 0;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v4, a2);
  if (*((char *)v12 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a1, *v12, (unint64_t)v12[1]);
  }
  else
  {
    v3 = *(_OWORD *)v12;
    *(_QWORD *)(a1 + 16) = v12[2];
    *(_OWORD *)a1 = v3;
  }
  v4 = off_1E81A6E70;
  if (v11 == 1 && v6)
    MEMORY[0x1CAA32F9C](v6, 0x1000C8077774924);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
}

llvm::raw_ostream *sub_1C54AB9C8(_BYTE *a1, uint64_t a2, uint64_t a3, llvm::DWARFUnit *a4, uint64_t *a5, int a6, int a7, int a8)
{
  llvm::raw_ostream *result;
  _BYTE *v16;
  BOOL v17;
  char v18;
  char v19;
  int v20;
  uint64_t v21;
  int v22;
  llvm::DWARFUnit *v24;
  uint64_t *v25;
  llvm::DWARFUnit *v26;
  uint64_t v27;
  llvm::DWARFUnit *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  llvm::raw_ostream *v32;
  _WORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  llvm::DWARFUnit *FirstChild;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  llvm::raw_ostream *v42;
  _BYTE *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  llvm::DWARFUnit *v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  llvm::raw_ostream *v57;
  _OWORD *v58;
  const char *v59;
  uint64_t v60;
  _OWORD *v61;
  void *v62;
  size_t v63;
  _OWORD *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  llvm::raw_ostream *v69;
  uint64_t v70;
  const char *v71;
  const char *v72;
  const char *v73;
  uint64_t v74;
  const char *v75;
  llvm::raw_ostream *v76;
  uint64_t v77;
  uint64_t v78;
  llvm::raw_ostream *v79;
  _WORD *v80;
  uint64_t v81;
  llvm::raw_ostream *v82;
  uint64_t v83;
  uint64_t v84;
  llvm::DWARFUnit *v85;
  uint64_t v86;
  int v87;
  char v88;
  int v89;
  uint64_t *v90;
  llvm::DWARFUnit *v91;
  llvm::DWARFUnit *v92;
  uint64_t *v93;
  uint64_t *v94;
  llvm::DWARFUnit *v95;
  llvm::DWARFUnit *v96;
  llvm::DWARFUnit *v98;
  uint64_t *v99;
  char v100;
  llvm::DWARFUnit *AttributeValueAsReferencedDie;
  uint64_t v102;

  result = *(llvm::raw_ostream **)a1;
  v16 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v16 >= *((_QWORD *)result + 3))
  {
    result = llvm::raw_ostream::write(result, 40);
  }
  else
  {
    *((_QWORD *)result + 4) = v16 + 1;
    *v16 = 40;
  }
  v87 = a7;
  a1[9] = 0;
  if (a2)
    v17 = a3 == 0;
  else
    v17 = 1;
  v18 = v17;
  v90 = (uint64_t *)a3;
  v91 = (llvm::DWARFUnit *)a2;
  if (v17)
  {
    v39 = 0;
    FirstChild = 0;
    v96 = 0;
    v41 = 0;
  }
  else
  {
    FirstChild = (llvm::DWARFUnit *)llvm::DWARFUnit::getFirstChild(a2, a3);
    v39 = v38;
    result = (llvm::raw_ostream *)llvm::DWARFUnit::getLastChild(a2, a3);
    v96 = result;
    v41 = v40;
  }
  v88 = v18;
  v89 = a8;
  v92 = a4;
  v93 = a5;
  if (v39 != v41 || FirstChild != v96)
  {
    v94 = 0;
    v95 = 0;
    v19 = 1;
    v20 = 1;
    while (1)
    {
      v21 = v39[2];
      if (!v21)
        return result;
      v22 = *(unsigned __int16 *)(v21 + 4);
      if (v22 != 24 && v22 != 5)
        return result;
      v24 = FirstChild;
      v25 = v39;
      v26 = FirstChild;
      v98 = FirstChild;
      v99 = v39;
      AttributeValueAsReferencedDie = llvm::DWARFDie::getAttributeValueAsReferencedDie(&v98, 73);
      v102 = v27;
      v28 = llvm::DWARFDie::resolveTypeUnitReference(&AttributeValueAsReferencedDie);
      v30 = v29;
      if ((a6 & v20) == 1
        && v39
        && v24
        && (v31 = v39[2]) != 0
        && (result = (llvm::raw_ostream *)llvm::DWARFAbbreviationDeclaration::getAttributeValue(v31, v26, *v39, 52, &v98), v100))
      {
        v20 = 0;
        v94 = v30;
        v95 = v28;
      }
      else
      {
        if ((v19 & 1) == 0)
        {
          v32 = *(llvm::raw_ostream **)a1;
          v33 = *(_WORD **)(*(_QWORD *)a1 + 32);
          if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v33 > 1uLL)
          {
            *v33 = 8236;
            *((_QWORD *)v32 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v32, ", ", 2uLL);
          }
        }
        v34 = v39[2];
        if (v34 && *(_WORD *)(v34 + 4) == 24)
        {
          result = *(llvm::raw_ostream **)a1;
          v35 = *(_QWORD *)(*(_QWORD *)a1 + 32);
          if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v35) > 2)
          {
            v19 = 0;
            *(_BYTE *)(v35 + 2) = 46;
            *(_WORD *)v35 = 11822;
            *((_QWORD *)result + 4) += 3;
            goto LABEL_37;
          }
          result = llvm::raw_ostream::write(result, "...", 3uLL);
        }
        else
        {
          result = (llvm::raw_ostream *)sub_1C54A8B34(a1, v28, v30);
        }
        v19 = 0;
      }
LABEL_37:
      FirstChild = 0;
      if (v39)
      {
        v39 = 0;
        if (v24)
        {
          v36 = *((_DWORD *)v25 + 3);
          if (v36)
          {
            v39 = (uint64_t *)(*((_QWORD *)v26 + 36) + 24 * v36);
            FirstChild = v26;
          }
          else
          {
            FirstChild = 0;
            v39 = 0;
          }
        }
      }
      else
      {
        v39 = 0;
      }
      if (v39 == v41 && FirstChild == v96)
        goto LABEL_49;
    }
  }
  v94 = 0;
  v95 = 0;
LABEL_49:
  a1[9] = 0;
  v42 = *(llvm::raw_ostream **)a1;
  v43 = *(_BYTE **)(*(_QWORD *)a1 + 32);
  if ((unint64_t)v43 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
  {
    llvm::raw_ostream::write(v42, 41);
  }
  else
  {
    *((_QWORD *)v42 + 4) = v43 + 1;
    *v43 = 41;
  }
  v44 = v89;
  v45 = v87;
  if (v95)
  {
    if (v94)
    {
      v46 = v94[2];
      if (v46)
      {
        if (*(_WORD *)(v46 + 4) == 15)
        {
          v98 = v95;
          v99 = v94;
          AttributeValueAsReferencedDie = llvm::DWARFDie::getAttributeValueAsReferencedDie(&v98, 73);
          v102 = v47;
          v48 = llvm::DWARFDie::resolveTypeUnitReference(&AttributeValueAsReferencedDie);
          if (v48)
          {
            if (v49)
            {
              v50 = v49[2];
              if (v50)
              {
                v51 = *(unsigned __int16 *)(v50 + 4);
                if (v51 == 38)
                  v45 = 1;
                LODWORD(v50) = v51 == 53;
              }
              v44 = v50 | v89;
              v98 = v48;
              v99 = v49;
              AttributeValueAsReferencedDie = llvm::DWARFDie::getAttributeValueAsReferencedDie(&v98, 73);
              v102 = v52;
              if (llvm::DWARFDie::resolveTypeUnitReference(&AttributeValueAsReferencedDie) && v53)
              {
                v54 = *(_QWORD *)(v53 + 16);
                if (v54)
                {
                  v55 = *(unsigned __int16 *)(v54 + 4);
                  if (v55 == 38)
                    v45 = 1;
                  LODWORD(v54) = v55 == 53;
                }
                v44 |= v54;
              }
            }
          }
        }
      }
    }
  }
  if ((v88 & 1) == 0)
  {
    v56 = v90[2];
    if (v56)
    {
      llvm::DWARFAbbreviationDeclaration::getAttributeValue(v56, v91, *v90, 54, &v98);
      if (v100)
      {
        switch(llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&v98))
        {
          case 0xB1uLL:
            v57 = *(llvm::raw_ostream **)a1;
            v58 = *(_OWORD **)(*(_QWORD *)a1 + 32);
            if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v58 <= 0x18uLL)
            {
              v59 = " __attribute__((stdcall))";
              goto LABEL_104;
            }
            v71 = " __attribute__((stdcall))";
            goto LABEL_130;
          case 0xB2uLL:
            v57 = *(llvm::raw_ostream **)a1;
            v60 = *(_QWORD *)(*(_QWORD *)a1 + 32);
            if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v60) <= 0x17)
            {
              v59 = " __attribute__((pascal))";
              goto LABEL_85;
            }
            v72 = " __attribute__((pascal))";
            goto LABEL_119;
          case 0xB3uLL:
            v57 = *(llvm::raw_ostream **)a1;
            v61 = *(_OWORD **)(*(_QWORD *)a1 + 32);
            if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v61 <= 0x19uLL)
            {
              v59 = " __attribute__((fastcall))";
              goto LABEL_88;
            }
            v73 = " __attribute__((fastcall))";
            goto LABEL_121;
          case 0xB5uLL:
            v57 = *(llvm::raw_ostream **)a1;
            v61 = *(_OWORD **)(*(_QWORD *)a1 + 32);
            if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v61 <= 0x19uLL)
            {
              v59 = " __attribute__((thiscall))";
              goto LABEL_88;
            }
            v73 = " __attribute__((thiscall))";
            goto LABEL_121;
          case 0xC0uLL:
            v57 = *(llvm::raw_ostream **)a1;
            v62 = *(void **)(*(_QWORD *)a1 + 32);
            if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v62 <= 0x1BuLL)
            {
              v59 = " __attribute__((vectorcall))";
              v63 = 28;
              goto LABEL_105;
            }
            qmemcpy(v62, " __attribute__((vectorcall))", 28);
            v74 = *((_QWORD *)v57 + 4) + 28;
            goto LABEL_131;
          case 0xC1uLL:
            v57 = *(llvm::raw_ostream **)a1;
            v60 = *(_QWORD *)(*(_QWORD *)a1 + 32);
            if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v60) <= 0x17)
            {
              v59 = " __attribute__((ms_abi))";
LABEL_85:
              v63 = 24;
              goto LABEL_105;
            }
            v72 = " __attribute__((ms_abi))";
LABEL_119:
            *(_OWORD *)v60 = *(_OWORD *)v72;
            *(_QWORD *)(v60 + 16) = *((_QWORD *)v72 + 2);
            v74 = *((_QWORD *)v57 + 4) + 24;
            goto LABEL_131;
          case 0xC2uLL:
            v57 = *(llvm::raw_ostream **)a1;
            v61 = *(_OWORD **)(*(_QWORD *)a1 + 32);
            if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v61 <= 0x19uLL)
            {
              v59 = " __attribute__((sysv_abi))";
LABEL_88:
              v63 = 26;
              goto LABEL_105;
            }
            v73 = " __attribute__((sysv_abi))";
LABEL_121:
            *v61 = *(_OWORD *)v73;
            *(_OWORD *)((char *)v61 + 10) = *(_OWORD *)(v73 + 10);
            v74 = *((_QWORD *)v57 + 4) + 26;
            goto LABEL_131;
          case 0xC3uLL:
            v57 = *(llvm::raw_ostream **)a1;
            v64 = *(_OWORD **)(*(_QWORD *)a1 + 32);
            if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v64 <= 0x1DuLL)
            {
              v59 = " __attribute__((pcs(\"aapcs\")))";
              goto LABEL_101;
            }
            v75 = " __attribute__((pcs(\"aapcs\")))";
            goto LABEL_128;
          case 0xC4uLL:
            v57 = *(llvm::raw_ostream **)a1;
            v65 = *(void **)(*(_QWORD *)a1 + 32);
            if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v65 <= 0x21uLL)
            {
              v59 = " __attribute__((pcs(\"aapcs-vfp\")))";
              v63 = 34;
              goto LABEL_105;
            }
            qmemcpy(v65, " __attribute__((pcs(\"aapcs-vfp\")))", 34);
            v74 = *((_QWORD *)v57 + 4) + 34;
            goto LABEL_131;
          case 0xC5uLL:
            v57 = *(llvm::raw_ostream **)a1;
            v66 = *(void **)(*(_QWORD *)a1 + 32);
            if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v66 <= 0x1FuLL)
            {
              v59 = " __attribute__((intel_ocl_bicc))";
              v63 = 32;
              goto LABEL_105;
            }
            qmemcpy(v66, " __attribute__((intel_ocl_bicc))", 32);
            v74 = *((_QWORD *)v57 + 4) + 32;
            goto LABEL_131;
          case 0xC8uLL:
            v57 = *(llvm::raw_ostream **)a1;
            v67 = *(void **)(*(_QWORD *)a1 + 32);
            if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v67 <= 0x1AuLL)
            {
              v59 = " __attribute__((swiftcall))";
              v63 = 27;
              goto LABEL_105;
            }
            qmemcpy(v67, " __attribute__((swiftcall))", 27);
            v74 = *((_QWORD *)v57 + 4) + 27;
            goto LABEL_131;
          case 0xC9uLL:
            v57 = *(llvm::raw_ostream **)a1;
            v68 = *(void **)(*(_QWORD *)a1 + 32);
            if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v68 <= 0x1EuLL)
            {
              v59 = " __attribute__((preserve_most))";
              v63 = 31;
              goto LABEL_105;
            }
            qmemcpy(v68, " __attribute__((preserve_most))", 31);
            v74 = *((_QWORD *)v57 + 4) + 31;
            goto LABEL_131;
          case 0xCAuLL:
            v57 = *(llvm::raw_ostream **)a1;
            v64 = *(_OWORD **)(*(_QWORD *)a1 + 32);
            if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v64 <= 0x1DuLL)
            {
              v59 = " __attribute__((preserve_all))";
LABEL_101:
              v63 = 30;
              goto LABEL_105;
            }
            v75 = " __attribute__((preserve_all))";
LABEL_128:
            *v64 = *(_OWORD *)v75;
            *(_OWORD *)((char *)v64 + 14) = *(_OWORD *)(v75 + 14);
            v74 = *((_QWORD *)v57 + 4) + 30;
            goto LABEL_131;
          case 0xCBuLL:
            v57 = *(llvm::raw_ostream **)a1;
            v58 = *(_OWORD **)(*(_QWORD *)a1 + 32);
            if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v58 <= 0x18uLL)
            {
              v59 = " __attribute__((regcall))";
LABEL_104:
              v63 = 25;
LABEL_105:
              llvm::raw_ostream::write(v57, v59, v63);
              break;
            }
            v71 = " __attribute__((regcall))";
LABEL_130:
            *v58 = *(_OWORD *)v71;
            *(_OWORD *)((char *)v58 + 9) = *(_OWORD *)(v71 + 9);
            v74 = *((_QWORD *)v57 + 4) + 25;
LABEL_131:
            *((_QWORD *)v57 + 4) = v74;
            if (v45)
              goto LABEL_132;
            goto LABEL_107;
          default:
            break;
        }
      }
    }
  }
  if (!v45)
  {
LABEL_107:
    if (v44)
      goto LABEL_108;
LABEL_134:
    if ((v88 & 1) == 0)
      goto LABEL_135;
    goto LABEL_143;
  }
LABEL_132:
  v76 = *(llvm::raw_ostream **)a1;
  v77 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v77) > 5)
  {
    *(_WORD *)(v77 + 4) = 29811;
    *(_DWORD *)v77 = 1852793632;
    *((_QWORD *)v76 + 4) += 6;
    if (!v44)
      goto LABEL_134;
  }
  else
  {
    llvm::raw_ostream::write(v76, " const", 6uLL);
    if (!v44)
      goto LABEL_134;
  }
LABEL_108:
  v69 = *(llvm::raw_ostream **)a1;
  v70 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v70) > 8)
  {
    *(_BYTE *)(v70 + 8) = 101;
    *(_QWORD *)v70 = *(_QWORD *)" volatile";
    *((_QWORD *)v69 + 4) += 9;
    if ((v88 & 1) == 0)
      goto LABEL_135;
  }
  else
  {
    llvm::raw_ostream::write(v69, " volatile", 9uLL);
    if ((v88 & 1) == 0)
    {
LABEL_135:
      v78 = v90[2];
      if (v78)
      {
        llvm::DWARFAbbreviationDeclaration::getAttributeValue(v78, v91, *v90, 119, &v98);
        if (v100)
        {
          v79 = *(llvm::raw_ostream **)a1;
          v80 = *(_WORD **)(*(_QWORD *)a1 + 32);
          if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v80 > 1uLL)
          {
            *v80 = 9760;
            *((_QWORD *)v79 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v79, " &", 2uLL);
          }
        }
        v81 = v90[2];
        if (v81)
        {
          llvm::DWARFAbbreviationDeclaration::getAttributeValue(v81, v91, *v90, 120, &v98);
          if (v100)
          {
            v82 = *(llvm::raw_ostream **)a1;
            v83 = *(_QWORD *)(*(_QWORD *)a1 + 32);
            if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v83) > 2)
            {
              *(_BYTE *)(v83 + 2) = 38;
              *(_WORD *)v83 = 9760;
              *((_QWORD *)v82 + 4) += 3;
            }
            else
            {
              llvm::raw_ostream::write(v82, " &&", 3uLL);
            }
          }
        }
      }
    }
  }
LABEL_143:
  v98 = v92;
  v99 = v93;
  AttributeValueAsReferencedDie = llvm::DWARFDie::getAttributeValueAsReferencedDie(&v98, 73);
  v102 = v84;
  v85 = llvm::DWARFDie::resolveTypeUnitReference(&AttributeValueAsReferencedDie);
  return (llvm::raw_ostream *)sub_1C54A9800(a1, v92, v93, v85, v86, 0);
}

uint64_t sub_1C54AC314(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  _OWORD *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *(_QWORD *)v5[5];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        return 0;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = operator new(0x30uLL);
    v10[2] = *a3;
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = v8;
    *v6 = (uint64_t *)v10;
    v11 = (uint64_t *)**a1;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    else
    {
      v12 = (uint64_t *)v10;
    }
    sub_1C4768E74(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return 1;
  }
}

_QWORD *sub_1C54AC3E4(_QWORD *a1, const void *a2, unint64_t a3)
{
  uint64_t v5;
  size_t v6;
  char *v7;
  char *v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v5 = 3 * a3;
    v6 = 24 * a3;
    v7 = (char *)operator new(24 * a3);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[8 * v5];
    a1[2] = v8;
    memmove(v7, a2, v6);
    a1[1] = v8;
  }
  return a1;
}

uint64_t llvm::DWARFExpression::Operation::extract(uint64_t a1, uint64_t *a2, int a3, unint64_t a4, unsigned __int16 a5)
{
  unsigned int v10;
  unsigned __int8 v11;
  unsigned __int8 *v12;
  int v13;
  __int16 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  int v20;
  char v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t Unsigned;
  uint64_t SLEB128;
  uint64_t *v30;
  int v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v40;
  char *v41;
  uint64_t i;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t j;
  uint64_t v47;
  uint64_t k;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;

  v51 = a4;
  *(_QWORD *)(a1 + 8) = a4;
  if (llvm::DataExtractor::prepareRead((uint64_t)a2, a4, 1, 0))
  {
    v10 = *(unsigned __int8 *)(*a2 + a4);
    v51 = a4 + 1;
  }
  else
  {
    v10 = 0;
  }
  *(_BYTE *)a1 = v10;
  v11 = atomic_load((unsigned __int8 *)&qword_1ED8057E8);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_1ED8057E8))
  {
    v41 = (char *)operator new(0x2FDuLL);
    for (i = 0; i != 765; i += 3)
    {
      v43 = &v41[i];
      *(_WORD *)v43 = -256;
      v43[2] = -1;
    }
    v44 = 0;
    qword_1ED8057F0 = (uint64_t)v41;
    *(_QWORD *)algn_1ED8057F8 = v41 + 765;
    qword_1ED805800 = (uint64_t)(v41 + 765);
    *(_WORD *)(v41 + 9) = 1282;
    v41[11] = -1;
    *(_OWORD *)(v41 + 24) = xmmword_1C8651B70;
    *(_OWORD *)(v41 + 40) = xmmword_1C8651B80;
    *(_OWORD *)(v41 + 56) = xmmword_1C8651B90;
    *(_OWORD *)(v41 + 72) = xmmword_1C8651BA0;
    *(_OWORD *)(v41 + 88) = xmmword_1C8651BB0;
    *(_OWORD *)(v41 + 104) = xmmword_1C8651BC0;
    *(_OWORD *)(v41 + 120) = xmmword_1C8651BD0;
    *((_WORD *)v41 + 9) = -254;
    v41[20] = -1;
    *((_QWORD *)v41 + 17) = 0xFF8102FFFF02FFFFLL;
    do
    {
      v45 = qword_1ED8057F0 + v44;
      *(_WORD *)(v45 + 144) = -254;
      *(_BYTE *)(v45 + 146) = -1;
      v44 += 3;
    }
    while (v44 != 96);
    for (j = 0; j != 96; j += 3)
    {
      v47 = qword_1ED8057F0 + j;
      *(_WORD *)(v47 + 240) = -254;
      *(_BYTE *)(v47 + 242) = -1;
    }
    for (k = 336; k != 432; k += 3)
    {
      v49 = qword_1ED8057F0 + k;
      *(_WORD *)v49 = -31742;
      *(_BYTE *)(v49 + 2) = -1;
    }
    v50 = qword_1ED8057F0;
    *(_OWORD *)(qword_1ED8057F0 + 432) = xmmword_1C8651BE0;
    *(_OWORD *)(v50 + 448) = xmmword_1C8651BF0;
    *(_OWORD *)(v50 + 464) = xmmword_1C8651C00;
    *(_WORD *)(v50 + 711) = 1028;
    *(_BYTE *)(v50 + 713) = 30;
    *(_WORD *)(v50 + 672) = -253;
    *(_BYTE *)(v50 + 674) = -1;
    *(_WORD *)(v50 + 483) = 1028;
    *(_BYTE *)(v50 + 485) = -1;
    *(_DWORD *)(v50 + 753) = 83821572;
    *(_WORD *)(v50 + 757) = -252;
    *(_WORD *)(v50 + 729) = 1028;
    *(_BYTE *)(v50 + 731) = -1;
    *(_WORD *)(v50 + 504) = 2053;
    *(_BYTE *)(v50 + 506) = -1;
    *(_WORD *)(v50 + 489) = 1029;
    *(_BYTE *)(v50 + 491) = -1;
    *(_WORD *)(v50 + 495) = 1029;
    *(_BYTE *)(v50 + 497) = 8;
    __cxa_atexit((void (*)(void *))sub_1C54ADD30, &qword_1ED8057F0, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED8057E8);
  }
  if (0xAAAAAAAAAAAAAAABLL * (*(_QWORD *)algn_1ED8057F8 - qword_1ED8057F0) <= v10)
  {
    v13 = 0;
    v15 = -1;
    v14 = 255;
  }
  else
  {
    v12 = (unsigned __int8 *)(qword_1ED8057F0 + 3 * v10);
    v13 = *v12;
    v14 = v12[1];
    v15 = v12[2];
  }
  *(_BYTE *)(a1 + 3) = v15;
  *(_WORD *)(a1 + 1) = v13 | (v14 << 8);
  if (!v13)
    return 0;
  v16 = 0;
  v17 = a5 & 0xFF00;
  if ((_BYTE)a5)
    v18 = 8;
  else
    v18 = 4;
  v19 = 1;
  while (1)
  {
    v20 = *(unsigned __int8 *)(a1 + v16 + 2);
    if (v20 == 255)
      break;
    v21 = v19;
    switch(v20 & 0x7F)
    {
      case 0:
        v22 = v51;
        if (llvm::DataExtractor::prepareRead((uint64_t)a2, v51, 1, 0))
        {
          v23 = *(unsigned __int8 *)(*a2 + v22);
          ++v51;
        }
        else
        {
          v23 = 0;
        }
        v24 = a1 + 8 * v16;
        *(_QWORD *)(v24 + 16) = v23;
        v25 = (_QWORD *)(v24 + 16);
        if ((v20 & 0x80) != 0)
          *v25 = (char)v23;
        goto LABEL_32;
      case 1:
        v33 = sub_1C63871E8((uint64_t)a2, &v51, 0);
        v34 = a1 + 8 * v16;
        *(_QWORD *)(v34 + 16) = v33;
        v35 = (_QWORD *)(v34 + 16);
        if ((v20 & 0x80) == 0)
          goto LABEL_32;
        v36 = (__int16)v33;
        goto LABEL_40;
      case 2:
        v37 = sub_1C6387364((uint64_t)a2, &v51, 0);
        v38 = a1 + 8 * v16;
        *(_QWORD *)(v38 + 16) = v37;
        v35 = (_QWORD *)(v38 + 16);
        if ((v20 & 0x80) == 0)
          goto LABEL_32;
        v36 = (int)v37;
LABEL_40:
        *v35 = v36;
        goto LABEL_32;
      case 3:
        Unsigned = sub_1C63873F8((uint64_t)a2, &v51, 0);
        goto LABEL_29;
      case 4:
        if ((v20 & 0x80) != 0)
          SLEB128 = llvm::DataExtractor::getSLEB128(a2, (uint64_t *)&v51, 0);
        else
          SLEB128 = llvm::DataExtractor::getULEB128(a2, (uint64_t *)&v51, 0);
        *(_QWORD *)(a1 + 8 * v16 + 16) = SLEB128;
        goto LABEL_32;
      case 5:
        v30 = a2;
        v31 = a3;
        goto LABEL_28;
      case 6:
        if (!v17)
          return 0;
        v30 = a2;
        v31 = v18;
LABEL_28:
        Unsigned = llvm::DataExtractor::getUnsigned(v30, &v51, v31, 0);
        goto LABEL_29;
      case 7:
        if ((v19 & 1) != 0)
          return 0;
        v40 = v51;
        *(_QWORD *)(a1 + 16 + 8 * v16) = v51;
        v32 = *(_QWORD *)(a1 + 16) + v40;
        *(_QWORD *)(a1 + 8 * v16 + 32) = v32;
        goto LABEL_45;
      case 8:
        goto LABEL_23;
      default:
        v26 = *(_QWORD *)(a1 + 16);
        if (v26 < 3 || v26 == 4)
        {
LABEL_23:
          Unsigned = llvm::DataExtractor::getULEB128(a2, (uint64_t *)&v51, 0);
LABEL_29:
          *(_QWORD *)(a1 + 8 * v16 + 16) = Unsigned;
        }
        else
        {
          if (v26 != 3)
            return 0;
          *(_QWORD *)(a1 + 8 * v16 + 16) = sub_1C6387364((uint64_t)a2, &v51, 0);
        }
LABEL_32:
        v19 = 0;
        v32 = v51;
        *(_QWORD *)(a1 + 8 * v16 + 32) = v51;
        v16 = 1;
        if ((v21 & 1) == 0)
          goto LABEL_45;
        break;
    }
  }
  v32 = v51;
LABEL_45:
  *(_QWORD *)(a1 + 8) = v32;
  return 1;
}

BOOL llvm::DWARFExpression::Operation::print(unsigned __int8 *a1, llvm::raw_ostream *this, __int128 *a3, _QWORD *a4, llvm::MCRegisterInfo *a5, llvm::DWARFUnit *a6, int a7)
{
  _OWORD *v8;
  size_t v16;
  const char *v17;
  size_t v18;
  void *v19;
  int v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  uint64_t v25;
  char i;
  char v27;
  int v28;
  _DWORD *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  const char *v38;
  __int128 *v39;
  int v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t LLVMRegNum;
  uint64_t v45;
  const char *v46;
  _BYTE *v47;
  uint64_t v48;
  size_t v49;
  void *v50;
  _QWORD *v51;
  uint64_t v52;
  int v53;
  _QWORD v54[4];
  _QWORD v55[11];
  __int128 v56[5];
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v53 = a1[4];
  if (a1[4])
  {
    v8 = (_OWORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v8 > 0xFuLL)
    {
      *v8 = *(_OWORD *)"<decoding error>";
      *((_QWORD *)this + 4) += 16;
    }
    else
    {
      llvm::raw_ostream::write(this, "<decoding error>", 0x10uLL);
    }
    return v53 == 0;
  }
  v17 = llvm::dwarf::OperationEncodingString((llvm::dwarf *)*a1);
  v18 = v16;
  v19 = (void *)*((_QWORD *)this + 4);
  if (v16 <= *((_QWORD *)this + 3) - (_QWORD)v19)
  {
    if (v16)
    {
      memcpy(v19, v17, v16);
      *((_QWORD *)this + 4) += v18;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, v17, v16);
  }
  v20 = *a1;
  if ((v20 - 80) >= 0x40)
  {
    v21 = v20 - 144;
    v22 = v21 > 0x15;
    v23 = (1 << v21) & 0x200005;
    if (v22 || v23 == 0)
      goto LABEL_15;
  }
  v39 = a3;
  sub_1C624C4A4((uint64_t)v56, a3);
  if (!a5)
    goto LABEL_56;
  v41 = (unsigned int *)(a1 + 16);
  v40 = *a1;
  if ((v40 - 144) <= 0x15 && ((1 << (v40 + 112)) & 0x200005) != 0)
  {
    v42 = *v41;
    v43 = 1;
  }
  else
  {
    v42 = (v40 - 112) <= 0x21 ? v40 - 112 : v40 - 80;
    v43 = 0;
  }
  v52 = v43;
  LLVMRegNum = llvm::MCRegisterInfo::getLLVMRegNum(a5, v42, a7);
  if ((LLVMRegNum & 0xFF00000000) == 0 || (v45 = *((_QWORD *)a5 + 8)) == 0)
  {
LABEL_56:
    sub_1C624C568(v56);
    a3 = v39;
LABEL_15:
    v25 = 0;
    v51 = a1 + 16;
    for (i = 1; ; i = 0)
    {
      v27 = i;
      v28 = a1[v25 + 2];
      if (v28 == 255)
        return v53 == 0;
      if (a6 && v28 == 8)
      {
        if (*a1 != 168 || *(_QWORD *)&a1[8 * v25 + 16])
        {
          sub_1C624C4A4((uint64_t)v55, a3);
          sub_1C54ACE8C(a6, this, (uint64_t)v55, (uint64_t)v51, v25);
          sub_1C624C568(v55);
        }
        else
        {
          v29 = (_DWORD *)*((_QWORD *)this + 4);
          if (*((_QWORD *)this + 3) - (_QWORD)v29 > 3uLL)
          {
            *v29 = 813183008;
            *((_QWORD *)this + 4) += 4;
          }
          else
          {
            llvm::raw_ostream::write(this, " 0x0", 4uLL);
          }
        }
        goto LABEL_42;
      }
      if (v28 == 7)
      {
        v31 = &a1[8 * (v25 - 1)];
        v33 = *((_QWORD *)v31 + 2);
        v32 = v31 + 16;
        if (v33)
        {
          v34 = *(_QWORD *)&a1[8 * v25 + 16];
          v35 = 1;
          do
          {
            if (llvm::DataExtractor::prepareRead((uint64_t)a4, v34, 1, 0))
              v36 = *(unsigned __int8 *)(*a4 + v34++);
            else
              v36 = 0;
            v57 = &unk_1E8145938;
            v58 = " 0x%02x";
            v59 = v36;
            llvm::raw_ostream::operator<<(this, (uint64_t)&v57);
            v22 = *v32 > (unint64_t)v35++;
          }
          while (v22);
        }
        goto LABEL_42;
      }
      if (v28 != 30)
        break;
      if (*v51 <= 4uLL)
      {
        v30 = *(_QWORD *)&a1[8 * v25 + 16];
        goto LABEL_38;
      }
LABEL_42:
      v25 = 1;
      if ((v27 & 1) == 0)
        return v53 == 0;
    }
    if ((v28 & 0x80) != 0)
    {
      v30 = *(_QWORD *)&a1[8 * v25 + 16];
      v57 = &unk_1E8169D20;
      v38 = " %+lld";
    }
    else
    {
      v37 = *a1;
      if (v37 == 163 || v37 == 243)
        goto LABEL_42;
      v30 = *(_QWORD *)&a1[8 * v25 + 16];
LABEL_38:
      v57 = &unk_1E8133270;
      v38 = " 0x%llx";
    }
    v58 = v38;
    v59 = v30;
    llvm::raw_ostream::operator<<(this, (uint64_t)&v57);
    goto LABEL_42;
  }
  v46 = (const char *)(v45 + *(unsigned int *)(*(_QWORD *)a5 + 24 * LLVMRegNum));
  if (v40 == 146 || (v40 - 112) <= 0x1F)
  {
    v48 = *(_QWORD *)&v41[2 * v52];
    v54[0] = &unk_1E8169B68;
    v54[1] = " %s%+lld";
    v54[2] = v46;
    v54[3] = v48;
    llvm::raw_ostream::operator<<(this, (uint64_t)v54);
  }
  else
  {
    v47 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v47 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, 32);
    }
    else
    {
      *((_QWORD *)this + 4) = v47 + 1;
      *v47 = 32;
    }
    v49 = strlen(v46);
    v50 = (void *)*((_QWORD *)this + 4);
    if (v49 <= *((_QWORD *)this + 3) - (_QWORD)v50)
    {
      if (v49)
      {
        memcpy(v50, v46, v49);
        *((_QWORD *)this + 4) += v49;
      }
    }
    else
    {
      llvm::raw_ostream::write(this, v46, v49);
    }
    if (v40 == 165)
    {
      sub_1C624C4A4((uint64_t)&v57, v56);
      sub_1C54ACE8C(a6, this, (uint64_t)&v57, (uint64_t)v41, 1u);
      sub_1C624C568(&v57);
    }
  }
  sub_1C624C568(v56);
  return v53 == 0;
}

llvm::raw_ostream *sub_1C54ACE8C(llvm::DWARFUnit *a1, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v9;
  llvm::DWARFUnit *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  llvm::raw_ostream *result;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  const char *v19;
  _WORD *v20;
  _BYTE *v21;
  llvm::raw_ostream *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  llvm::DWARFUnit *v26[2];

  v9 = a5;
  v26[0] = sub_1C624DB94(a1, *(_QWORD *)(a4 + 8 * a5) + *((_QWORD *)a1 + 3));
  v26[1] = v10;
  if (v26[0])
    v11 = v10 == 0;
  else
    v11 = 1;
  if (v11 || (v12 = *((_QWORD *)v10 + 2)) == 0 || *(_WORD *)(v12 + 4) != 36)
  {
    v13 = *(_QWORD *)(a4 + 8 * v9);
    v23 = &unk_1E8133270;
    v24 = " <invalid base_type ref: 0x%llx>";
    v25 = v13;
    return llvm::raw_ostream::operator<<(a2, (uint64_t)&v23);
  }
  v15 = (_WORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v15 > 1uLL)
  {
    *v15 = 10272;
    *((_QWORD *)a2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a2, " (", 2uLL);
  }
  if (*(_BYTE *)(a3 + 20))
  {
    v16 = *(_QWORD *)(a4 + 8 * v9);
    v23 = &unk_1E8133270;
    v24 = "0x%08llx -> ";
    v25 = v16;
    llvm::raw_ostream::operator<<(a2, (uint64_t)&v23);
  }
  v17 = *(_QWORD *)(a4 + 8 * v9) + *((_QWORD *)a1 + 3);
  v23 = &unk_1E8133270;
  v24 = "0x%08llx)";
  v25 = v17;
  llvm::raw_ostream::operator<<(a2, (uint64_t)&v23);
  llvm::DWARFDie::find(v26, 3, &v23);
  result = (llvm::raw_ostream *)sub_1C624DEB4((llvm::DWARFFormValue *)&v23);
  if (v18)
  {
    v19 = (const char *)result;
    v20 = (_WORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v20 > 1uLL)
    {
      *v20 = 8736;
      v21 = (_BYTE *)(*((_QWORD *)a2 + 4) + 2);
      *((_QWORD *)a2 + 4) = v21;
      if (result)
      {
LABEL_16:
        result = (llvm::raw_ostream *)strlen(v19);
        v22 = result;
        if ((unint64_t)result <= *((_QWORD *)a2 + 3) - (_QWORD)v21)
        {
          if (result)
          {
            result = (llvm::raw_ostream *)memcpy(v21, v19, (size_t)result);
            v21 = (char *)v22 + *((_QWORD *)a2 + 4);
            *((_QWORD *)a2 + 4) = v21;
          }
        }
        else
        {
          result = llvm::raw_ostream::write(a2, v19, (size_t)result);
          v21 = (_BYTE *)*((_QWORD *)a2 + 4);
        }
      }
    }
    else
    {
      result = llvm::raw_ostream::write(a2, " \"", 2uLL);
      v21 = (_BYTE *)*((_QWORD *)a2 + 4);
      if (v19)
        goto LABEL_16;
    }
    if (*((_BYTE **)a2 + 3) == v21)
    {
      return llvm::raw_ostream::write(a2, "\"", 1uLL);
    }
    else
    {
      *v21 = 34;
      ++*((_QWORD *)a2 + 4);
    }
  }
  return result;
}

unint64_t *sub_1C54AD0C8(unint64_t *a1)
{
  __int128 *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5;
  char v6;
  __int128 v8;
  uint64_t v9;

  if (*((_BYTE *)a1 + 20))
  {
    v2 = (__int128 *)*a1;
    v3 = (unint64_t *)(*a1 + 8);
  }
  else
  {
    v3 = a1 + 3;
    v2 = (__int128 *)*a1;
  }
  v4 = *v3;
  a1[1] = *v3;
  if (v4 >= *((_QWORD *)v2 + 1))
  {
    v6 = 1;
  }
  else
  {
    v5 = *v2;
    v9 = *((_QWORD *)v2 + 2);
    v8 = v5;
    v6 = llvm::DWARFExpression::Operation::extract((uint64_t)(a1 + 2), (uint64_t *)&v8, *((unsigned __int8 *)v2 + 24), v4, *(_WORD *)((char *)v2 + 25)) ^ 1;
  }
  *((_BYTE *)a1 + 20) = v6;
  return a1;
}

BOOL llvm::DWARFExpression::Operation::verify(llvm::DWARFExpression::Operation *this, const Operation *a2, llvm::DWARFUnit *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  llvm::DWARFUnit *v11;
  uint64_t v12;
  uint64_t v14;
  _BOOL8 result;

  v5 = 0;
  v6 = 1;
  while (1)
  {
    while (1)
    {
      v7 = v6;
      v8 = *((unsigned __int8 *)this + v5 + 2);
      if (v8 != 8)
      {
        if (v8 == 255)
          return 1;
        goto LABEL_10;
      }
      v9 = *((_QWORD *)this + v5 + 2);
      if (*(unsigned __int8 *)this != 168 || v9 != 0)
        break;
LABEL_10:
      v6 = 0;
      v5 = 1;
      if ((v7 & 1) == 0)
        return 1;
    }
    v11 = sub_1C624DB94(a2, *((_QWORD *)a2 + 3) + v9);
    if (!v11 || v12 == 0)
      return 0;
    v14 = *(_QWORD *)(v12 + 16);
    if (!v14)
      return 0;
    v6 = 0;
    result = *(unsigned __int16 *)(v14 + 4) == 36;
    v5 = 1;
    if (!(v7 & result))
      return result;
  }
}

BOOL llvm::DWARFExpression::verify(llvm::DWARFExpression *this, llvm::DWARFUnit *a2)
{
  llvm::DWARFUnit *v4;
  _BOOL8 v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1C54ADD60((uint64_t)&v11, (__int128 *)this, 0);
  sub_1C54ADD60((uint64_t)&v9, (__int128 *)this, *((_QWORD *)this + 1));
  if (v11 == v9 && v12 == v10)
    return 1;
  do
  {
    v6 = llvm::DWARFExpression::Operation::verify((llvm::DWARFExpression::Operation *)&v13, a2, v4);
    if (!v6)
      break;
    sub_1C54AD0C8(&v11);
  }
  while (v11 != v9 || v12 != v10);
  return v6;
}

uint64_t llvm::DWARFExpression::printCompact(llvm::DWARFExpression *this, llvm::raw_ostream *a2, const llvm::MCRegisterInfo *a3)
{
  __int128 *v7[8];
  _BYTE v8[64];

  sub_1C54ADD60((uint64_t)v8, (__int128 *)this, 0);
  sub_1C54ADD60((uint64_t)v7, (__int128 *)this, *((_QWORD *)this + 1));
  return sub_1C54AD32C(a2, (uint64_t)v8, v7, a3);
}

uint64_t sub_1C54AD32C(llvm::raw_ostream *a1, uint64_t a2, __int128 **a3, llvm::MCRegisterInfo *a4)
{
  __int128 *v6;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  char *v15;
  uint64_t v16;
  const char *v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  uint64_t v23;
  const char *v24;
  size_t v25;
  char *v26;
  _DWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t LLVMRegNum;
  unsigned int v33;
  char *v34;
  uint64_t v35;
  const char *v36;
  size_t v37;
  uint64_t v38;
  unsigned int v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  const char *v45;
  size_t v46;
  _WORD *v47;
  uint64_t v48;
  llvm::raw_ostream *v49;
  unint64_t v50;
  int v51;
  _BYTE *v52;
  const char *v53;
  llvm::raw_ostream *v54;
  size_t v55;
  _WORD *v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD v67[4];
  _OWORD v68[4];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _QWORD v73[2];
  uint64_t v74;
  _BYTE *v75;
  char *v76;
  int v77;
  void *v78;
  uint64_t v79;
  _QWORD v80[26];

  v80[24] = *MEMORY[0x1E0C80C00];
  v78 = v80;
  v79 = 0x400000000;
  v6 = *(__int128 **)a2;
  if (v6 == *a3 && *(_QWORD *)(a2 + 8) == (_QWORD)a3[1])
    goto LABEL_81;
  do
  {
    v10 = *(unsigned __int8 *)(a2 + 16);
    if (*(unsigned __int8 *)(a2 + 16) <= 0x9Eu)
    {
      if ((_DWORD)v10 == 144)
      {
        v19 = *(_QWORD *)(a2 + 32);
        LLVMRegNum = llvm::MCRegisterInfo::getLLVMRegNum(a4, v19, 0);
        if ((LLVMRegNum & 0xFF00000000) == 0)
        {
LABEL_66:
          v48 = *((_QWORD *)a1 + 4);
          if ((unint64_t)(*((_QWORD *)a1 + 3) - v48) > 0x11)
          {
            *(_WORD *)(v48 + 16) = 8306;
            *(_OWORD *)v48 = *(_OWORD *)"<unknown register ";
            *((_QWORD *)a1 + 4) += 18;
          }
          else
          {
            llvm::raw_ostream::write(a1, "<unknown register ", 0x12uLL);
          }
          v49 = a1;
          v50 = v19;
          goto LABEL_69;
        }
        v33 = LLVMRegNum;
        LODWORD(v69) = 1;
        v34 = sub_1C54ADDD8((uint64_t)&v78, &v69);
        sub_1C613932C((uint64_t)v73, (uint64_t)(v34 + 8));
        v35 = *((_QWORD *)a4 + 8);
        if (v35)
        {
          v36 = (const char *)(v35 + *(unsigned int *)(*(_QWORD *)a4 + 24 * v33));
          v37 = strlen(v36);
          if (v37 > v75 - v76)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v73, v36, v37);
            goto LABEL_47;
          }
          if (!v37)
            goto LABEL_47;
          goto LABEL_57;
        }
      }
      else
      {
        if ((_DWORD)v10 == 146)
        {
          v12 = *(_QWORD *)(a2 + 32);
          v11 = *(_QWORD *)(a2 + 40);
          v13 = llvm::MCRegisterInfo::getLLVMRegNum(a4, v12, 0);
          if ((v13 & 0xFF00000000) != 0)
          {
            v14 = v13;
            v15 = sub_1C54ADECC((uint64_t)&v78);
            sub_1C613932C((uint64_t)v73, (uint64_t)(v15 + 8));
            v16 = *((_QWORD *)a4 + 8);
            if (v16)
            {
              v17 = (const char *)(v16 + *(unsigned int *)(*(_QWORD *)a4 + 24 * v14));
              v18 = strlen(v17);
              if (v18 <= v75 - v76)
              {
                if (v18)
                {
                  memcpy(v76, v17, v18);
                  v76 += v18;
                }
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)v73, v17, v18);
              }
            }
            if (v11)
            {
LABEL_25:
              *(_QWORD *)&v69 = &unk_1E8169D20;
              *((_QWORD *)&v69 + 1) = "%+lld";
              *(_QWORD *)&v70 = v11;
              llvm::raw_ostream::operator<<((llvm::raw_ostream *)v73, (uint64_t)&v69);
            }
LABEL_26:
            v73[0] = off_1E81A6E70;
            if (v77 != 1)
              goto LABEL_27;
            v42 = v74;
            if (!v74)
              goto LABEL_27;
            goto LABEL_49;
          }
          v64 = *((_QWORD *)a1 + 4);
          if ((unint64_t)(*((_QWORD *)a1 + 3) - v64) > 0x11)
          {
            *(_WORD *)(v64 + 16) = 8306;
            *(_OWORD *)v64 = *(_OWORD *)"<unknown register ";
            *((_QWORD *)a1 + 4) += 18;
          }
          else
          {
            llvm::raw_ostream::write(a1, "<unknown register ", 0x12uLL);
          }
          v50 = (int)v12;
          if (v12 << 32 < (uint64_t)0xFFFFFFFF00000001)
          {
            v50 = -(uint64_t)(int)v12;
            v49 = a1;
            v51 = 1;
            goto LABEL_70;
          }
          v49 = a1;
LABEL_69:
          v51 = 0;
LABEL_70:
          sub_1C5E21910(v49, v50, 0, 0, v51);
          v52 = (_BYTE *)*((_QWORD *)a1 + 4);
          if (*((_BYTE **)a1 + 3) == v52)
          {
            v53 = ">";
            v54 = a1;
            v55 = 1;
LABEL_78:
            llvm::raw_ostream::write(v54, v53, v55);
            v57 = 0;
            goto LABEL_85;
          }
          v57 = 0;
          *v52 = 62;
          v66 = *((_QWORD *)a1 + 4) + 1;
          goto LABEL_108;
        }
LABEL_18:
        if ((v10 - 80) > 0x1F)
        {
          if ((v10 - 112) <= 0x1F)
          {
            v19 = v10 - 112;
            v11 = *(_QWORD *)(a2 + 32);
            v20 = llvm::MCRegisterInfo::getLLVMRegNum(a4, v19, 0);
            if ((v20 & 0xFF00000000) == 0)
              goto LABEL_66;
            v21 = v20;
            v22 = sub_1C54ADECC((uint64_t)&v78);
            sub_1C613932C((uint64_t)v73, (uint64_t)(v22 + 8));
            v23 = *((_QWORD *)a4 + 8);
            if (v23)
            {
              v24 = (const char *)(v23 + *(unsigned int *)(*(_QWORD *)a4 + 24 * v21));
              v25 = strlen(v24);
              if (v25 <= v75 - v76)
              {
                if (v25)
                {
                  memcpy(v76, v24, v25);
                  v76 += v25;
                }
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)v73, v24, v25);
              }
            }
            if (v11)
              goto LABEL_25;
            goto LABEL_26;
          }
          v43 = *((_QWORD *)a1 + 4);
          if ((unint64_t)(*((_QWORD *)a1 + 3) - v43) > 0xB)
          {
            *(_DWORD *)(v43 + 8) = 544239392;
            *(_QWORD *)v43 = *(_QWORD *)"<unknown op ";
            *((_QWORD *)a1 + 4) += 12;
          }
          else
          {
            llvm::raw_ostream::write(a1, "<unknown op ", 0xCuLL);
          }
          v45 = llvm::dwarf::OperationEncodingString((llvm::dwarf *)v10);
          v46 = v44;
          v47 = (_WORD *)*((_QWORD *)a1 + 4);
          if (v44 <= *((_QWORD *)a1 + 3) - (_QWORD)v47)
          {
            if (v44)
            {
              memcpy(v47, v45, v44);
              v47 = (_WORD *)(*((_QWORD *)a1 + 4) + v46);
              *((_QWORD *)a1 + 4) = v47;
            }
          }
          else
          {
            llvm::raw_ostream::write(a1, v45, v44);
            v47 = (_WORD *)*((_QWORD *)a1 + 4);
          }
          if (*((_QWORD *)a1 + 3) - (_QWORD)v47 > 1uLL)
          {
            *v47 = 10272;
            *((_QWORD *)a1 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(a1, " (", 2uLL);
          }
          sub_1C5E21910(a1, v10, 0, 0, 0);
          v56 = (_WORD *)*((_QWORD *)a1 + 4);
          if (*((_QWORD *)a1 + 3) - (_QWORD)v56 <= 1uLL)
          {
            v53 = ")>";
            v54 = a1;
            v55 = 2;
            goto LABEL_78;
          }
          v57 = 0;
          *v56 = 15913;
          v66 = *((_QWORD *)a1 + 4) + 2;
LABEL_108:
          *((_QWORD *)a1 + 4) = v66;
          goto LABEL_85;
        }
        v38 = llvm::MCRegisterInfo::getLLVMRegNum(a4, (int)v10 - 80, 0);
        if ((v38 & 0xFF00000000) == 0)
        {
          v65 = *((_QWORD *)a1 + 4);
          if ((unint64_t)(*((_QWORD *)a1 + 3) - v65) > 0x11)
          {
            *(_WORD *)(v65 + 16) = 8306;
            *(_OWORD *)v65 = *(_OWORD *)"<unknown register ";
            *((_QWORD *)a1 + 4) += 18;
          }
          else
          {
            llvm::raw_ostream::write(a1, "<unknown register ", 0x12uLL);
          }
          v49 = a1;
          v50 = (v10 - 80);
          goto LABEL_69;
        }
        v39 = v38;
        LODWORD(v69) = 1;
        v40 = sub_1C54ADDD8((uint64_t)&v78, &v69);
        sub_1C613932C((uint64_t)v73, (uint64_t)(v40 + 8));
        v41 = *((_QWORD *)a4 + 8);
        if (v41)
        {
          v36 = (const char *)(v41 + *(unsigned int *)(*(_QWORD *)a4 + 24 * v39));
          v37 = strlen(v36);
          if (v37 > v75 - v76)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v73, v36, v37);
            goto LABEL_47;
          }
          if (!v37)
            goto LABEL_47;
LABEL_57:
          memcpy(v76, v36, v37);
          v76 += v37;
        }
      }
LABEL_47:
      v73[0] = off_1E81A6E70;
      if (v77 != 1)
        goto LABEL_27;
      v42 = v74;
      if (!v74)
        goto LABEL_27;
LABEL_49:
      MEMORY[0x1CAA32F9C](v42, 0x1000C8077774924);
      goto LABEL_27;
    }
    if ((_DWORD)v10 == 159)
    {
      *((_DWORD *)v78 + 12 * v79 - 12) = 1;
LABEL_27:
      sub_1C54AD0C8((unint64_t *)a2);
      goto LABEL_28;
    }
    if ((_DWORD)v10 != 163 && (_DWORD)v10 != 243)
      goto LABEL_18;
    sub_1C54ADD60((uint64_t)&v69, v6, *(_QWORD *)(a2 + 24) + *(_QWORD *)(a2 + 32));
    sub_1C54AD0C8((unint64_t *)a2);
    v26 = sub_1C54ADECC((uint64_t)&v78);
    sub_1C613932C((uint64_t)v73, (uint64_t)(v26 + 8));
    v27 = v76;
    if ((unint64_t)(v75 - v76) > 5)
    {
      *((_WORD *)v76 + 2) = 10361;
      *v27 = 1920233061;
      v76 += 6;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v73, "entry(", 6uLL);
    }
    v28 = *(_OWORD *)(a2 + 16);
    v68[0] = *(_OWORD *)a2;
    v68[1] = v28;
    v29 = *(_OWORD *)(a2 + 48);
    v68[2] = *(_OWORD *)(a2 + 32);
    v68[3] = v29;
    v67[0] = v69;
    v67[1] = v70;
    v67[2] = v71;
    v67[3] = v72;
    sub_1C54AD32C(v73, v68, v67, a4);
    if (v75 == v76)
      llvm::raw_ostream::write((llvm::raw_ostream *)v73, ")", 1uLL);
    else
      *v76++ = 41;
    v30 = v70;
    *(_OWORD *)a2 = v69;
    *(_OWORD *)(a2 + 16) = v30;
    v31 = v72;
    *(_OWORD *)(a2 + 32) = v71;
    *(_OWORD *)(a2 + 48) = v31;
    v73[0] = off_1E81A6E70;
    if (v77 == 1 && v74)
      MEMORY[0x1CAA32F9C](v74, 0x1000C8077774924);
LABEL_28:
    v6 = *(__int128 **)a2;
  }
  while (*(__int128 **)a2 != *a3 || *(__int128 **)(a2 + 8) != a3[1]);
  if (*(_DWORD *)v78)
  {
    llvm::raw_ostream::write(a1, *((const char **)v78 + 1), *((_QWORD *)v78 + 2));
    goto LABEL_103;
  }
LABEL_81:
  v58 = (_BYTE *)*((_QWORD *)a1 + 4);
  if (*((_BYTE **)a1 + 3) == v58)
  {
    llvm::raw_ostream::write(a1, "[", 1uLL);
  }
  else
  {
    *v58 = 91;
    ++*((_QWORD *)a1 + 4);
  }
  llvm::raw_ostream::write(a1, *((const char **)v78 + 1), *((_QWORD *)v78 + 2));
  v59 = (_BYTE *)*((_QWORD *)a1 + 4);
  if (*((_BYTE **)a1 + 3) == v59)
  {
    v57 = 1;
    llvm::raw_ostream::write(a1, "]", 1uLL);
  }
  else
  {
    *v59 = 93;
    ++*((_QWORD *)a1 + 4);
LABEL_103:
    v57 = 1;
  }
LABEL_85:
  v60 = (char *)v78;
  if ((_DWORD)v79)
  {
    v61 = 48 * v79;
    do
    {
      v62 = *(char **)&v60[v61 - 40];
      if (&v60[v61 - 16] != v62)
        free(v62);
      v61 -= 48;
    }
    while (v61);
    v60 = (char *)v78;
  }
  if (v60 != (char *)v80)
    free(v60);
  return v57;
}

BOOL llvm::DWARFExpression::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  BOOL v3;
  size_t v4;

  if (*(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24))
    return 0;
  v2 = *(unsigned __int8 *)(a2 + 26);
  if (*(_BYTE *)(a1 + 26))
    v3 = v2 == 0;
  else
    v3 = 1;
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 26) == 0) == (v2 != 0))
      return 0;
  }
  else if (*(unsigned __int8 *)(a1 + 25) != *(unsigned __int8 *)(a2 + 25))
  {
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != *(_QWORD *)(a2 + 8))
    return 0;
  return !v4 || memcmp(*(const void **)a1, *(const void **)a2, v4) == 0;
}

uint64_t sub_1C54ADD30(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1C54ADD60(uint64_t a1, __int128 *a2, unint64_t a3)
{
  char v4;
  __int128 v6;
  uint64_t v7;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 17) = 16776960;
  if (*((_QWORD *)a2 + 1) <= a3)
  {
    v4 = 1;
  }
  else
  {
    v6 = *a2;
    v7 = *((_QWORD *)a2 + 2);
    v4 = llvm::DWARFExpression::Operation::extract(a1 + 16, (uint64_t *)&v6, *((unsigned __int8 *)a2 + 24), a3, *(_WORD *)((char *)a2 + 25)) ^ 1;
  }
  *(_BYTE *)(a1 + 20) = v4;
  return a1;
}

char *sub_1C54ADDD8(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char *v8;
  char *v10;
  char *v11;
  int v12;
  unsigned int v13;
  unint64_t v14;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v14 = 0;
    v10 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 48, &v14);
    v11 = &v10[48 * *(unsigned int *)(a1 + 8)];
    *(_DWORD *)v11 = *a2;
    *((_QWORD *)v11 + 1) = v11 + 32;
    *((_OWORD *)v11 + 1) = xmmword_1C6612EE0;
    sub_1C54ADFB4((uint64_t *)a1, (uint64_t)v10);
    v12 = v14;
    if (*(_QWORD *)a1 != a1 + 16)
      free(*(void **)a1);
    *(_QWORD *)a1 = v10;
    v13 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v13;
    *(_DWORD *)(a1 + 12) = v12;
    v8 = &v10[48 * v13];
  }
  else
  {
    v5 = *(_QWORD *)a1;
    v6 = *(_QWORD *)a1 + 48 * v4;
    *(_DWORD *)v6 = *a2;
    *(_QWORD *)(v6 + 8) = v6 + 32;
    *(_OWORD *)(v6 + 16) = xmmword_1C6612EE0;
    v7 = v4 + 1;
    *(_DWORD *)(a1 + 8) = v7;
    v8 = (char *)(v5 + 48 * v7);
  }
  return v8 - 48;
}

char *sub_1C54ADECC(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  char *v6;
  char *v8;
  char *v9;
  int v10;
  unsigned int v11;
  unint64_t v12;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    v12 = 0;
    v8 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 48, &v12);
    v9 = &v8[48 * *(unsigned int *)(a1 + 8)];
    *(_DWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = v9 + 32;
    *((_OWORD *)v9 + 1) = xmmword_1C6612EE0;
    sub_1C54ADFB4((uint64_t *)a1, (uint64_t)v8);
    v10 = v12;
    if (*(_QWORD *)a1 != a1 + 16)
      free(*(void **)a1);
    *(_QWORD *)a1 = v8;
    v11 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v11;
    *(_DWORD *)(a1 + 12) = v10;
    v6 = &v8[48 * v11];
  }
  else
  {
    v3 = *(_QWORD *)a1;
    v4 = *(_QWORD *)a1 + 48 * v2;
    *(_DWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = v4 + 32;
    *(_OWORD *)(v4 + 16) = xmmword_1C6612EE0;
    v5 = v2 + 1;
    *(_DWORD *)(a1 + 8) = v5;
    v6 = (char *)(v3 + 48 * v5);
  }
  return v6 - 48;
}

void sub_1C54ADFB4(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v5 = 0;
    v6 = *a1;
    v7 = *a1 + 48 * v2;
    do
    {
      v8 = a2 + v5;
      v9 = v6 + v5;
      *(_DWORD *)v8 = *(_DWORD *)(v6 + v5);
      *(_OWORD *)(v8 + 16) = xmmword_1C6612EE0;
      *(_QWORD *)(v8 + 8) = a2 + v5 + 32;
      if (*(_QWORD *)(v6 + v5 + 16))
        sub_1C4FE6ED8(a2 + v5 + 8, v9 + 8);
      v5 += 48;
    }
    while (v9 + 48 != v7);
    v10 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v10)
    {
      v11 = *a1;
      v12 = 48 * v10;
      do
      {
        v13 = *(void **)(v11 + v12 - 40);
        if ((void *)(v11 + v12 - 16) != v13)
          free(v13);
        v12 -= 48;
      }
      while (v12);
    }
  }
}

uint64_t llvm::DWARFFormValue::createFromBlockValue@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_WORD *)a4 = result;
  *(_BYTE *)(a4 + 2) = 0;
  *(_QWORD *)(a4 + 8) = a3;
  *(_QWORD *)(a4 + 16) = a2;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  return result;
}

uint64_t llvm::DWARFFormValue::extractValue(unsigned __int16 *a1, uint64_t *a2, uint64_t *a3, int a4, uint64_t a5, uint64_t a6)
{
  unsigned int v9;
  uint64_t result;
  unint64_t ULEB128;
  char *v12;
  int v13;
  char *v14;
  char *v15;
  char *v16;

  if (!a5 && a6)
    a5 = *(_QWORD *)(a6 + 8);
  *((_QWORD *)a1 + 4) = a6;
  *((_QWORD *)a1 + 5) = a5;
  *((_BYTE *)a1 + 2) = HIBYTE(a4);
  *((_QWORD *)a1 + 2) = 0;
  v14 = 0;
  v9 = *a1;
  if (v9 <= 0x1F00)
    __asm { BR              X10 }
  if (v9 - 7937 < 2)
  {
    ULEB128 = llvm::DataExtractor::getULEB128(a2, a3, &v14);
LABEL_12:
    *((_QWORD *)a1 + 1) = ULEB128;
    goto LABEL_13;
  }
  if (v9 - 7968 < 2)
  {
    if (HIBYTE(a4))
      v13 = 8;
    else
      v13 = 4;
    ULEB128 = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)a2, v13, (unint64_t *)a3, 0, (uint64_t *)&v14);
    goto LABEL_12;
  }
  *((_QWORD *)a1 + 1) = llvm::DataExtractor::getULEB128(a2, a3, &v14) << 32;
  *((_QWORD *)a1 + 1) |= sub_1C6387364((uint64_t)a2, (unint64_t *)a3, (uint64_t *)&v14);
LABEL_13:
  v12 = v14;
  v14 = 0;
  if (!v12)
    return 1;
  v15 = v12;
  sub_1C4D62BD4(&v15, &v16);
  if (v15)
    (*(void (**)(char *))(*(_QWORD *)v15 + 8))(v15);
  result = (uint64_t)v14;
  if (v14)
  {
    (*(void (**)(char *))(*(_QWORD *)v14 + 8))(v14);
    return 0;
  }
  return result;
}

llvm::raw_ostream *llvm::DWARFFormValue::dumpAddressSection(llvm::raw_ostream *result, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  const void *v11;
  size_t v12;
  _QWORD v13[9];

  if (a4 != -1)
  {
    v13[7] = v4;
    v13[8] = v5;
    if (*(_BYTE *)(a3 + 20))
    {
      v8 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)result + 32))(result);
      v9 = v8 + 24 * a4;
      v10 = (_WORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v10 > 1uLL)
      {
        *v10 = 8736;
        result = (llvm::raw_ostream *)(*((_QWORD *)a2 + 4) + 2);
        *((_QWORD *)a2 + 4) = result;
      }
      else
      {
        llvm::raw_ostream::write(a2, " \"", 2uLL);
        result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
      }
      v11 = *(const void **)v9;
      v12 = *(_QWORD *)(v9 + 8);
      if (v12 <= *((_QWORD *)a2 + 3) - (_QWORD)result)
      {
        if (v12)
        {
          memcpy(result, v11, v12);
          result = (llvm::raw_ostream *)(*((_QWORD *)a2 + 4) + v12);
          *((_QWORD *)a2 + 4) = result;
        }
      }
      else
      {
        llvm::raw_ostream::write(a2, (const char *)v11, v12);
        result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
      }
      if ((unint64_t)result >= *((_QWORD *)a2 + 3))
      {
        result = llvm::raw_ostream::write(a2, 34);
      }
      else
      {
        *((_QWORD *)a2 + 4) = (char *)result + 1;
        *(_BYTE *)result = 34;
      }
      if (!*(_BYTE *)(v8 + 24 * a4 + 16))
      {
        v13[0] = &unk_1E8133270;
        v13[1] = " [%llu]";
        v13[2] = a4;
        return llvm::raw_ostream::operator<<(a2, (uint64_t)v13);
      }
    }
  }
  return result;
}

void llvm::DWARFFormValue::getAsCString(llvm::DWARFFormValue *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  const char *v9;
  std::string *v10;
  unint64_t v11;
  llvm::DWARFUnit *v12;
  char v13;
  unint64_t *v14;
  uint64_t (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  void *CStrRef;
  const char *v21;
  unint64_t v22;
  std::string::size_type v23;
  const char *v24;
  std::string *p_dst;
  uint64_t v26;
  uint64_t v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  const std::string::value_type *p_p;
  std::string::size_type v31;
  unint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  unint64_t *v36;
  __int16 v37;
  void *__p;
  std::string::size_type v39;
  char v40;
  std::string __dst;
  uint64_t v42[2];
  __int16 v43;
  unint64_t v44;
  std::string *v45;
  char v46;
  const char *v47;
  __int16 v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int16 *)this;
  if (v4 <= 0x2D && ((0x1E0A4004100uLL >> v4) & 1) != 0)
  {
    if (v4 == 8)
    {
      *(_BYTE *)(a2 + 8) &= ~1u;
      v10 = (std::string *)*((_QWORD *)this + 1);
      goto LABEL_28;
    }
  }
  else if (v4 != 7938)
  {
    if (v4 != 7969)
    {
      if (!atomic_load(qword_1ED836B58))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
      v6 = qword_1ED836B58[0];
      v7 = (_QWORD *)operator new();
      v8 = v7;
      v9 = "Invalid form for string attribute";
LABEL_19:
      v45 = (std::string *)v9;
      v48 = 259;
      *v7 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)&v45, v7 + 1);
      v8[4] = 3;
      v8[5] = v6;
      *((_BYTE *)v8 + 48) = 1;
      *(_BYTE *)(a2 + 8) |= 1u;
      *(_QWORD *)a2 = v8;
      return;
    }
LABEL_16:
    if (!atomic_load(qword_1ED836B58))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
    v6 = qword_1ED836B58[0];
    v7 = (_QWORD *)operator new();
    v8 = v7;
    v9 = "Unsupported form for string attribute";
    goto LABEL_19;
  }
  if (!*((_QWORD *)this + 5))
    goto LABEL_16;
  v11 = *((_QWORD *)this + 1);
  v44 = v11;
  if (v4 <= 0x28 && ((1 << v4) & 0x1E004000000) != 0 || v4 == 7938)
  {
    v12 = (llvm::DWARFUnit *)*((_QWORD *)this + 4);
    if (!v12)
    {
      if (!atomic_load(qword_1ED836B58))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
      v6 = qword_1ED836B58[0];
      v7 = (_QWORD *)operator new();
      v8 = v7;
      v9 = "API limitation - string extraction not available without a DWARFUnit";
      goto LABEL_19;
    }
    llvm::DWARFUnit::getStringOffsetSectionItem(v12, v11, (uint64_t)&v45);
    if ((v46 & 1) == 0)
    {
      v13 = 0;
      v44 = (unint64_t)v45;
      v4 = *(unsigned __int16 *)this;
      v14 = (unint64_t *)v11;
      goto LABEL_25;
    }
    v10 = v45;
    *(_BYTE *)(a2 + 8) |= 1u;
LABEL_28:
    *(_QWORD *)a2 = v10;
    return;
  }
  v14 = 0;
  v13 = 1;
LABEL_25:
  if (v4 == 31)
  {
    v17 = *(uint64_t (**)(void))(**(_QWORD **)(*((_QWORD *)this + 5) + 520) + 128);
  }
  else
  {
    v18 = *((_QWORD *)this + 4);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 160);
      v42[0] = *(_QWORD *)(v18 + 152);
      goto LABEL_33;
    }
    v17 = *(uint64_t (**)(void))(**(_QWORD **)(*((_QWORD *)this + 5) + 520) + 136);
  }
  v42[0] = v17();
LABEL_33:
  v42[1] = v19;
  v43 = 0;
  CStrRef = llvm::DataExtractor::getCStrRef(v42, &v44, 0);
  if (CStrRef)
  {
    *(_BYTE *)(a2 + 8) &= ~1u;
    *(_QWORD *)a2 = CStrRef;
    return;
  }
  v21 = llvm::dwarf::FormEncodingString((llvm::dwarf *)*(unsigned __int16 *)this);
  if (!v21)
  {
    memset(&__dst, 0, sizeof(__dst));
    goto LABEL_46;
  }
  v23 = v22;
  if (v22 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v24 = v21;
  if (v22 >= 0x17)
  {
    v26 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v26 = v22 | 7;
    v27 = v26 + 1;
    p_dst = (std::string *)operator new(v26 + 1);
    __dst.__r_.__value_.__l.__size_ = v23;
    __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v22;
    p_dst = &__dst;
    if (!v22)
      goto LABEL_45;
  }
  memmove(p_dst, v24, v23);
LABEL_45:
  p_dst->__r_.__value_.__s.__data_[v23] = 0;
LABEL_46:
  if ((v13 & 1) == 0)
  {
    v35[0] = " uses index ";
    v36 = v14;
    v37 = 2051;
    v45 = (std::string *)v35;
    v47 = ", but the referenced string";
    v48 = 770;
    llvm::Twine::str((llvm::Twine *)&v45, &__p);
    v28 = v40 >= 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
    v29 = v40 >= 0 ? v40 & 0x7F : v39;
    std::string::append(&__dst, v28, v29);
    if (v40 < 0)
      operator delete(__p);
  }
  v35[0] = " offset ";
  v36 = &v44;
  v37 = 3075;
  v45 = (std::string *)v35;
  v47 = " is beyond .debug_str bounds";
  v48 = 770;
  llvm::Twine::str((llvm::Twine *)&v45, &__p);
  if (v40 >= 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if (v40 >= 0)
    v31 = v40 & 0x7F;
  else
    v31 = v39;
  std::string::append(&__dst, p_p, v31);
  if (v40 < 0)
    operator delete(__p);
  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  v33 = qword_1ED836B58[0];
  v34 = operator new();
  v48 = 260;
  v45 = &__dst;
  *(_QWORD *)v34 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v45, (_QWORD *)(v34 + 8));
  *(_QWORD *)(v34 + 32) = 3;
  *(_QWORD *)(v34 + 40) = v33;
  *(_BYTE *)(v34 + 48) = 1;
  *(_BYTE *)(a2 + 8) |= 1u;
  *(_QWORD *)a2 = v34;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

uint64_t llvm::DWARFFormValue::getAsAddress(llvm::DWARFFormValue *this)
{
  uint64_t v2;
  char v3;

  llvm::DWARFFormValue::getAsSectionedAddress(this, (uint64_t)&v2);
  if (v3)
    return v2;
  else
    return 0;
}

uint64_t llvm::DWARFFormValue::getAsReference(llvm::DWARFFormValue *this)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  llvm::DWARFFormValue::getAsRelativeReference((unsigned __int16 *)this, (uint64_t)&v2);
  if (!v4)
    return 0;
  if (v2)
    return v3 + *(_QWORD *)(v2 + 24);
  return v3;
}

uint64_t llvm::DWARFFormValue::getAsCStringOffset(llvm::DWARFFormValue *this)
{
  unsigned int v1;

  v1 = *(unsigned __int16 *)this;
  if (v1 <= 0x2D && v1 == 8 && ((0x1E0A4004100uLL >> v1) & 1) == 0)
    return 0;
  else
    return *((_QWORD *)this + 1);
}

double llvm::DWARFFormValue::getAsFile@<D0>(unsigned __int16 *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v8;
  double result;
  uint64_t v10;
  unint64_t v11;
  char *CompilationDir;
  uint64_t v13;
  size_t v14;
  void *__p[2];
  uint64_t v16;

  v4 = *((_QWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    if (v6 <= 0x2D && ((0x24000A8E0uLL >> v6) & 1) != 0)
    {
      if (*(_BYTE *)(v4 + 209))
        v4 = *(_QWORD *)(v4 + 184);
      llvm::DWARFContext::getLineTableForUnit(*(llvm::DWARFContext **)(v4 + 8), (llvm::DWARFUnit *)v4);
      if (v8)
      {
        v10 = v8;
        __p[0] = 0;
        __p[1] = 0;
        v16 = 0;
        v11 = *((_QWORD *)a1 + 1);
        CompilationDir = llvm::DWARFUnit::getCompilationDir((llvm::DWARFUnit **)v4);
        v13 = (uint64_t)CompilationDir;
        if (CompilationDir)
          v14 = strlen(CompilationDir);
        else
          v14 = 0;
        if (llvm::DWARFDebugLine::Prologue::getFileNameByIndex(v10 + 8, v11, v13, v14, a2, (uint64_t)__p, 0))
        {
          result = *(double *)__p;
          *(_OWORD *)a3 = *(_OWORD *)__p;
          *(_QWORD *)(a3 + 16) = v16;
          *(_BYTE *)(a3 + 24) = 1;
          return result;
        }
        if (SHIBYTE(v16) < 0)
          operator delete(__p[0]);
      }
    }
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 24) = 0;
  return result;
}

llvm::raw_ostream *llvm::DWARFGdbIndex::dumpCUList(llvm::DWARFGdbIndex *this, llvm::raw_ostream *a2)
{
  uint64_t v4;
  int v5;
  llvm::raw_ostream *result;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)(llvm::format_object_base *__hidden);
  const char *v13;
  int v14;
  __int128 v15;

  v4 = *((unsigned int *)this + 8);
  v5 = *((_DWORD *)this + 1);
  v12 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E8169860;
  v13 = "\n  CU list offset = 0x%x, has %lld entries:";
  v14 = v5;
  *(_QWORD *)&v15 = v4;
  result = llvm::raw_ostream::operator<<(a2, (uint64_t)&v12);
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)a2 + 3))
  {
    result = llvm::raw_ostream::write(a2, 10);
  }
  else
  {
    *((_QWORD *)a2 + 4) = v7 + 1;
    *v7 = 10;
  }
  v8 = *((unsigned int *)this + 8);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = *((_QWORD *)this + 3);
    v11 = 16 * v8;
    do
    {
      v12 = &off_1E816A1E0;
      v13 = "    %d: Offset = 0x%llx, Length = 0x%llx\n";
      v14 = v9;
      v15 = *(_OWORD *)(v10 + 16 * v9);
      result = llvm::raw_ostream::operator<<(a2, (uint64_t)&v12);
      ++v9;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void llvm::DWARFGdbIndex::dumpTUList(llvm::DWARFGdbIndex *this, llvm::raw_ostream *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  void ***v12;
  uint64_t v13;
  void *v14;
  char *v15;
  uint64_t (**v16)(llvm::detail::format_adapter *__hidden);
  uint64_t v17;
  void **v18;
  uint64_t (***v19)(llvm::detail::format_adapter *__hidden);
  _QWORD v20[2];
  _QWORD v21[4];

  v4 = *((unsigned int *)this + 12);
  v10 = "\n  Types CU list offset = {0:x}, has {1} entries:\n";
  v11 = 50;
  v12 = &v18;
  v13 = 2;
  v14 = &unk_1E813B5F0;
  v15 = (char *)this + 8;
  v16 = &off_1E816A200;
  v17 = v4;
  v18 = &v14;
  v19 = &v16;
  sub_1C639D338((uint64_t)&v10, a2);
  v5 = *((_DWORD *)this + 12);
  if (v5)
  {
    v6 = 0;
    v7 = *((_QWORD *)this + 5);
    v9 = v7 + 24 * v5;
    do
    {
      v8 = v6 + 1;
      v10 = "    {0}: offset = {1:x8}, type_offset = {2:x8}, type_signature = {3:x16}\n";
      v11 = 73;
      v12 = (void ***)v21;
      v13 = 4;
      v14 = &unk_1E816A230;
      LODWORD(v15) = v6;
      v16 = (uint64_t (**)(llvm::detail::format_adapter *__hidden))&unk_1E816A260;
      v17 = v7;
      v18 = (void **)&unk_1E816A260;
      v19 = (uint64_t (***)(llvm::detail::format_adapter *__hidden))(v7 + 8);
      v20[0] = &unk_1E816A260;
      v20[1] = v7 + 16;
      v21[0] = &v14;
      v21[1] = &v16;
      v21[2] = &v18;
      v21[3] = v20;
      sub_1C639D338((uint64_t)&v10, a2);
      v7 += 24;
      v6 = v8;
    }
    while (v7 != v9);
  }
}

llvm::raw_ostream *llvm::DWARFGdbIndex::dumpAddressArea(llvm::DWARFGdbIndex *this, llvm::raw_ostream *a2)
{
  uint64_t v4;
  int v5;
  llvm::raw_ostream *result;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t (**v15)(llvm::format_object_base *__hidden);
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  v4 = *((unsigned int *)this + 16);
  v5 = *((_DWORD *)this + 3);
  v15 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E8169860;
  v16 = "\n  Address area offset = 0x%x, has %lld entries:";
  LODWORD(v17) = v5;
  v18 = v4;
  result = llvm::raw_ostream::operator<<(a2, (uint64_t)&v15);
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)a2 + 3))
  {
    result = llvm::raw_ostream::write(a2, 10);
  }
  else
  {
    *((_QWORD *)a2 + 4) = v7 + 1;
    *v7 = 10;
  }
  v8 = *((unsigned int *)this + 16);
  if ((_DWORD)v8)
  {
    v9 = *((_QWORD *)this + 7);
    v10 = 24 * v8;
    v11 = (_DWORD *)(v9 + 16);
    do
    {
      v13 = *((_QWORD *)v11 - 2);
      v12 = *((_QWORD *)v11 - 1);
      v15 = &off_1E816A290;
      v14 = *v11;
      v11 += 6;
      v16 = "    Low/High address = [0x%llx, 0x%llx) (Size: 0x%llx), CU id = %d\n";
      v17 = v13;
      v18 = v12;
      v19 = v12 - v13;
      v20 = v14;
      result = llvm::raw_ostream::operator<<(a2, (uint64_t)&v15);
      v10 -= 24;
    }
    while (v10);
  }
  return result;
}

llvm::raw_ostream *llvm::DWARFGdbIndex::dumpSymbolTable(llvm::DWARFGdbIndex *this, llvm::raw_ostream *a2)
{
  uint64_t v4;
  int v5;
  llvm::raw_ostream *result;
  _BYTE *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  void *v21;
  const char *v22;
  unint64_t v23;
  uint64_t v24;

  v4 = *((unsigned int *)this + 20);
  v5 = *((_DWORD *)this + 4);
  v21 = &unk_1E8169860;
  v22 = "\n  Symbol table offset = 0x%x, size = %lld, filled slots:";
  LODWORD(v23) = v5;
  v24 = v4;
  result = llvm::raw_ostream::operator<<(a2, (uint64_t)&v21);
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)a2 + 3))
  {
    result = llvm::raw_ostream::write(a2, 10);
  }
  else
  {
    *((_QWORD *)a2 + 4) = v7 + 1;
    *v7 = 10;
  }
  v8 = *((unsigned int *)this + 20);
  if ((_DWORD)v8)
  {
    v9 = (unsigned int *)*((_QWORD *)this + 9);
    v10 = &v9[2 * v8];
    v11 = -1;
    do
    {
      ++v11;
      v12 = *v9;
      v13 = v9[1];
      if (*(_QWORD *)v9)
      {
        v21 = &unk_1E816A2B0;
        v22 = "    %d: Name offset = 0x%x, CU vector offset = 0x%x\n";
        v23 = __PAIR64__(v12, v11);
        LODWORD(v24) = v13;
        llvm::raw_ostream::operator<<(a2, (uint64_t)&v21);
        v14 = *((_QWORD *)this + 14);
        if (v14 >= *((_DWORD *)this + 5) - *((_DWORD *)this + 30) + *v9)
          v14 = *((_DWORD *)this + 5) - *((_DWORD *)this + 30) + *v9;
        v15 = *((_QWORD *)this + 11);
        v16 = *((unsigned int *)this + 24);
        if ((_DWORD)v16)
        {
          v17 = (_DWORD *)(v15 + 24 * v16);
          v18 = 24 * v16;
          v19 = (_DWORD *)*((_QWORD *)this + 11);
          while (*v19 != v9[1])
          {
            v19 += 6;
            v18 -= 24;
            if (!v18)
            {
              v19 = v17;
              break;
            }
          }
        }
        else
        {
          v19 = (_DWORD *)*((_QWORD *)this + 11);
        }
        v20 = *((_QWORD *)this + 13) + v14;
        v21 = &unk_1E816A2D0;
        v22 = "      String name: %s, CU vector index: %d\n";
        v23 = v20;
        LODWORD(v24) = -1431655765 * (((unint64_t)v19 - v15) >> 3);
        result = llvm::raw_ostream::operator<<(a2, (uint64_t)&v21);
      }
      v9 += 2;
    }
    while (v9 != v10);
  }
  return result;
}

llvm::raw_ostream *llvm::DWARFGdbIndex::dumpConstantPool(llvm::DWARFGdbIndex *this, llvm::raw_ostream *a2)
{
  uint64_t v4;
  int v5;
  llvm::raw_ostream *result;
  int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  uint64_t (**v17)(llvm::format_object_base *__hidden);
  const char *v18;
  unint64_t v19;
  uint64_t v20;

  v4 = *((unsigned int *)this + 24);
  v5 = *((_DWORD *)this + 5);
  v17 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E8169860;
  v18 = "\n  Constant pool offset = 0x%x, has %lld CU vectors:";
  LODWORD(v19) = v5;
  v20 = v4;
  result = llvm::raw_ostream::operator<<(a2, (uint64_t)&v17);
  v7 = *((_DWORD *)this + 24);
  if (v7)
  {
    v8 = 0;
    v9 = (unsigned int *)*((_QWORD *)this + 11);
    v10 = &v9[6 * v7];
    do
    {
      v17 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E813F0F8;
      v11 = v8 | ((unint64_t)*v9 << 32);
      v18 = "\n    %d(0x%x): ";
      v19 = v11;
      result = llvm::raw_ostream::operator<<(a2, (uint64_t)&v17);
      v12 = v9[4];
      if ((_DWORD)v12)
      {
        v13 = (unsigned int *)*((_QWORD *)v9 + 1);
        v14 = 4 * v12;
        do
        {
          v15 = *v13++;
          v17 = &off_1E8132728;
          v18 = "0x%x ";
          v19 = v15;
          result = llvm::raw_ostream::operator<<(a2, (uint64_t)&v17);
          v14 -= 4;
        }
        while (v14);
      }
      ++v8;
      v9 += 6;
    }
    while (v9 != v10);
  }
  v16 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v16 >= *((_QWORD *)a2 + 3))
    return llvm::raw_ostream::write(a2, 10);
  *((_QWORD *)a2 + 4) = v16 + 1;
  *v16 = 10;
  return result;
}

double llvm::DWARFGdbIndex::dump(llvm::DWARFGdbIndex *this, llvm::raw_ostream *a2)
{
  uint64_t v3;
  double result;
  uint64_t v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;

  if (*((_BYTE *)this + 125))
  {
    v3 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v3) > 0x10)
    {
      *(_BYTE *)(v3 + 16) = 10;
      result = *(double *)"\n<error parsing>\n";
      *(_OWORD *)v3 = *(_OWORD *)"\n<error parsing>\n";
      *((_QWORD *)a2 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(a2, "\n<error parsing>\n", 0x11uLL);
    }
  }
  else if (*((_BYTE *)this + 124))
  {
    v6 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v6) > 0xB)
    {
      *(_DWORD *)(v6 + 8) = 540876910;
      *(_QWORD *)v6 = *(_QWORD *)"  Version = ";
      *((_QWORD *)a2 + 4) += 12;
      v7 = a2;
    }
    else
    {
      v7 = llvm::raw_ostream::write(a2, "  Version = ", 0xCuLL);
    }
    sub_1C5E21910(v7, *(unsigned int *)this, 0, 0, 0);
    v8 = (_BYTE *)*((_QWORD *)v7 + 4);
    if ((unint64_t)v8 >= *((_QWORD *)v7 + 3))
    {
      llvm::raw_ostream::write(v7, 10);
    }
    else
    {
      *((_QWORD *)v7 + 4) = v8 + 1;
      *v8 = 10;
    }
    llvm::DWARFGdbIndex::dumpCUList(this, a2);
    llvm::DWARFGdbIndex::dumpTUList(this, a2);
    llvm::DWARFGdbIndex::dumpAddressArea(this, a2);
    llvm::DWARFGdbIndex::dumpSymbolTable(this, a2);
    llvm::DWARFGdbIndex::dumpConstantPool(this, a2);
  }
  return result;
}

uint64_t llvm::DWARFGdbIndex::parseImpl(uint64_t a1, _QWORD *a2)
{
  int v4;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  void **v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unsigned int v35;
  void *v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  void **p_src;
  uint64_t v42;
  __int128 v43;
  unint64_t v44;
  BOOL v45;
  char *v46;
  int i;
  unsigned int v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  void *v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  unint64_t v60;
  char *v61;
  void *v62;
  uint64_t v63;
  unint64_t v64;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  int v71;
  uint64_t v72;
  void **v73;
  int v74;
  BOOL v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  int v81;
  unint64_t v82;
  int v83;
  unint64_t v84;
  void **v85;
  uint64_t v86;
  char *v87;
  char *v88;
  void *__src;
  unint64_t v90;
  int v91;
  unint64_t v92;
  unint64_t v93;

  v92 = 0;
  v4 = sub_1C6387364((uint64_t)a2, &v92, 0);
  *(_DWORD *)a1 = v4;
  if (v4 != 7)
    return 0;
  *(_DWORD *)(a1 + 4) = sub_1C6387364((uint64_t)a2, &v92, 0);
  *(_DWORD *)(a1 + 8) = sub_1C6387364((uint64_t)a2, &v92, 0);
  *(_DWORD *)(a1 + 12) = sub_1C6387364((uint64_t)a2, &v92, 0);
  *(_DWORD *)(a1 + 16) = sub_1C6387364((uint64_t)a2, &v92, 0);
  *(_DWORD *)(a1 + 20) = sub_1C6387364((uint64_t)a2, &v92, 0);
  v6 = *(unsigned int *)(a1 + 4);
  if (v92 != v6)
    return 0;
  v7 = *(_DWORD *)(a1 + 8) - v6;
  if (*(_DWORD *)(a1 + 36) < v7 >> 4)
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, a1 + 40, v7 >> 4, 16);
  if (v7 >= 0x10)
  {
    if (v7 >> 4 <= 1)
      v30 = 1;
    else
      v30 = v7 >> 4;
    do
    {
      v31 = sub_1C63873F8((uint64_t)a2, &v92, 0);
      v32 = sub_1C63873F8((uint64_t)a2, &v92, 0);
      v33 = *(unsigned int *)(a1 + 32);
      if (v33 >= *(unsigned int *)(a1 + 36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, a1 + 40, v33 + 1, 16);
        v33 = *(unsigned int *)(a1 + 32);
      }
      v34 = (unint64_t *)(*(_QWORD *)(a1 + 24) + 16 * v33);
      *v34 = v31;
      v34[1] = v32;
      ++*(_DWORD *)(a1 + 32);
      --v30;
    }
    while (v30);
  }
  v8 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8);
  v9 = v8 / 0x18uLL;
  v10 = (_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 48);
  if (v11 != (_DWORD)v9)
  {
    if (v11 <= v9)
    {
      if (*(_DWORD *)(a1 + 52) < v9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 40, a1 + 56, v8 / 0x18uLL, 24);
        v11 = *(_DWORD *)(a1 + 48);
      }
      if (v11 != (_DWORD)v9)
        bzero((void *)(*v10 + 24 * v11), 24 * ((24 * (v9 - v11) - 24) / 0x18) + 24);
    }
    *(_DWORD *)(a1 + 48) = v9;
  }
  if (v8 >= 0x18)
  {
    v12 = 0;
    if (v9 <= 1)
      v13 = 1;
    else
      v13 = v8 / 0x18;
    v14 = 24 * v13;
    do
    {
      v15 = sub_1C63873F8((uint64_t)a2, &v92, 0);
      v16 = sub_1C63873F8((uint64_t)a2, &v92, 0);
      v17 = sub_1C63873F8((uint64_t)a2, &v92, 0);
      v18 = (unint64_t *)(*v10 + v12);
      *v18 = v15;
      v18[1] = v16;
      v18[2] = v17;
      v12 += 24;
    }
    while (v14 != v12);
  }
  v19 = *(_DWORD *)(a1 + 16) - *(_DWORD *)(a1 + 12);
  v20 = v19 / 0x14;
  v21 = (unint64_t *)(a1 + 56);
  if (*(_DWORD *)(a1 + 68) < v19 / 0x14)
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 56, a1 + 72, v20, 24);
  if (v19 >= 0x14)
  {
    if (v20 <= 1)
      v35 = 1;
    else
      v35 = v19 / 0x14;
    do
    {
      v36 = (void *)sub_1C63873F8((uint64_t)a2, &v92, 0);
      v37 = sub_1C63873F8((uint64_t)a2, &v92, 0);
      v38 = sub_1C6387364((uint64_t)a2, &v92, 0);
      __src = v36;
      v90 = v37;
      v91 = v38;
      v39 = *(unsigned int *)(a1 + 64);
      v40 = *(_QWORD *)(a1 + 56);
      if (v39 >= *(_DWORD *)(a1 + 68))
      {
        v44 = v39 + 1;
        v45 = v40 + 24 * v39 > (unint64_t)&__src;
        if (v40 <= (unint64_t)&__src && v45)
        {
          v46 = (char *)&__src - v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 56, a1 + 72, v44, 24);
          v40 = *v21;
          p_src = (void **)&v46[*v21];
          goto LABEL_47;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 56, a1 + 72, v44, 24);
        v40 = *v21;
      }
      p_src = &__src;
LABEL_47:
      v42 = v40 + 24 * *(unsigned int *)(a1 + 64);
      v43 = *(_OWORD *)p_src;
      *(_QWORD *)(v42 + 16) = p_src[2];
      *(_OWORD *)v42 = v43;
      ++*(_DWORD *)(a1 + 64);
      --v35;
    }
    while (v35);
  }
  v22 = *(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 16);
  v23 = v22 >> 3;
  if (*(_DWORD *)(a1 + 84) < v22 >> 3)
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 72, a1 + 88, v22 >> 3, 8);
  if (v22 >= 8)
  {
    v24 = 0;
    v25 = (void **)(a1 + 88);
    if (v23 <= 1)
      v26 = 1;
    else
      v26 = v23;
    do
    {
      v27 = sub_1C6387364((uint64_t)a2, &v92, 0);
      v28 = sub_1C6387364((uint64_t)a2, &v92, 0);
      v29 = *(unsigned int *)(a1 + 80);
      if (v29 >= *(unsigned int *)(a1 + 84))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 72, a1 + 88, v29 + 1, 8);
        v29 = *(unsigned int *)(a1 + 80);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v29) = v27 | (unint64_t)(v28 << 32);
      ++*(_DWORD *)(a1 + 80);
      if (v27 | v28)
        ++v24;
      --v26;
    }
    while (v26);
    if (v24)
    {
      for (i = 0; i != v24; ++i)
      {
        __src = &v91;
        v90 = 0;
        v48 = *(_DWORD *)(a1 + 96);
        if (v48 >= *(_DWORD *)(a1 + 100))
        {
          v93 = 0;
          v85 = v25;
          v87 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)v25, 0, 24, &v93);
          v61 = &v87[24 * *(unsigned int *)(a1 + 96)];
          *(_DWORD *)v61 = 0;
          v62 = v61 + 24;
          *((_QWORD *)v61 + 2) = 0;
          *((_QWORD *)v61 + 1) = v61 + 24;
          v63 = (uint64_t)(v61 + 8);
          v64 = v90;
          if ((void **)v63 != &__src && (_DWORD)v90 != 0)
          {
            v66 = __src;
            if (__src == &v91)
            {
              *(_DWORD *)(v63 + 8) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod(v63, v63 + 16, v64, 4);
              if ((_DWORD)v90)
                memcpy(*(void **)v63, __src, 4 * v90);
              *(_DWORD *)(v63 + 8) = v64;
            }
            else
            {
              if (v62 != (void *)(v63 + 16))
              {
                free(v62);
                v66 = __src;
                LODWORD(v64) = v90;
              }
              *(_QWORD *)v63 = v66;
              *(_DWORD *)(v63 + 8) = v64;
              *(_DWORD *)(v63 + 12) = HIDWORD(v90);
              __src = &v91;
              HIDWORD(v90) = 0;
            }
            LODWORD(v90) = 0;
          }
          v88 = *(char **)(a1 + 88);
          v67 = *(unsigned int *)(a1 + 96);
          if ((_DWORD)v67)
          {
            v68 = 0;
            v86 = 24 * v67;
            do
            {
              v69 = &v87[v68];
              v70 = &v88[v68];
              v71 = *(_DWORD *)&v88[v68];
              v72 = (uint64_t)&v87[v68 + 24];
              *(_QWORD *)&v87[v68 + 8] = v72;
              v73 = (void **)&v87[v68 + 8];
              *(_DWORD *)v69 = v71;
              *((_QWORD *)v69 + 2) = 0;
              v74 = *(_DWORD *)&v88[v68 + 16];
              if (v74)
                v75 = v70 == v69;
              else
                v75 = 1;
              if (!v75)
              {
                v76 = (char *)*((_QWORD *)v70 + 1);
                if (v70 + 24 == v76)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v73, v72, *((unsigned int *)v70 + 4), 4);
                  v77 = *((unsigned int *)v70 + 4);
                  if ((_DWORD)v77)
                    memcpy(*v73, *((const void **)v70 + 1), 4 * v77);
                  *((_DWORD *)v69 + 4) = v74;
                }
                else
                {
                  *v73 = v76;
                  *((_DWORD *)v69 + 4) = v74;
                  *((_DWORD *)v69 + 5) = *(_DWORD *)&v88[v68 + 20];
                  *((_QWORD *)v70 + 1) = v70 + 24;
                  *(_DWORD *)&v88[v68 + 20] = 0;
                }
                *((_DWORD *)v70 + 4) = 0;
              }
              v68 += 24;
            }
            while (v86 != v68);
            v88 = *(char **)(a1 + 88);
            v78 = *(unsigned int *)(a1 + 96);
            if ((_DWORD)v78)
            {
              v79 = 24 * v78;
              do
              {
                v80 = *(char **)&v88[v79 - 16];
                if (&v88[v79] != v80)
                  free(v80);
                v79 -= 24;
              }
              while (v79);
              v88 = (char *)*v85;
            }
          }
          v81 = v93;
          if (v88 != (char *)(a1 + 104))
            free(v88);
          *(_QWORD *)(a1 + 88) = v87;
          v55 = *(_DWORD *)(a1 + 96) + 1;
          *(_DWORD *)(a1 + 96) = v55;
          *(_DWORD *)(a1 + 100) = v81;
          v25 = v85;
        }
        else
        {
          v49 = (uint64_t)*v25 + 24 * v48;
          *(_DWORD *)v49 = 0;
          v50 = (void *)(v49 + 24);
          *(_QWORD *)(v49 + 16) = 0;
          *(_QWORD *)(v49 + 8) = v49 + 24;
          v51 = v49 + 8;
          v52 = v90;
          if ((void **)v51 != &__src && (_DWORD)v90 != 0)
          {
            v54 = __src;
            if (__src == &v91)
            {
              *(_DWORD *)(v51 + 8) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod(v51, v51 + 16, v52, 4);
              if ((_DWORD)v90)
                memcpy(*(void **)v51, __src, 4 * v90);
              *(_DWORD *)(v51 + 8) = v52;
            }
            else
            {
              if (v50 != (void *)(v51 + 16))
              {
                free(v50);
                v54 = __src;
                LODWORD(v52) = v90;
              }
              *(_QWORD *)v51 = v54;
              *(_DWORD *)(v51 + 8) = v52;
              *(_DWORD *)(v51 + 12) = HIDWORD(v90);
              __src = &v91;
              HIDWORD(v90) = 0;
            }
            LODWORD(v90) = 0;
          }
          v55 = *(_DWORD *)(a1 + 96) + 1;
          *(_DWORD *)(a1 + 96) = v55;
        }
        if (__src != &v91)
        {
          free(__src);
          v55 = *(_DWORD *)(a1 + 96);
        }
        v56 = *(_QWORD *)(a1 + 88) + 24 * v55;
        *(_DWORD *)(v56 - 24) = v92 - *(_DWORD *)(a1 + 20);
        v57 = sub_1C6387364((uint64_t)a2, &v92, 0);
        if (v57)
        {
          v58 = v57;
          do
          {
            v59 = sub_1C6387364((uint64_t)a2, &v92, 0);
            v60 = *(unsigned int *)(v56 - 8);
            if (v60 >= *(unsigned int *)(v56 - 4))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v56 - 16, v56, v60 + 1, 4);
              v60 = *(unsigned int *)(v56 - 8);
            }
            *(_DWORD *)(*(_QWORD *)(v56 - 16) + 4 * v60) = v59;
            ++*(_DWORD *)(v56 - 8);
            --v58;
          }
          while (v58);
        }
      }
    }
  }
  v82 = a2[1];
  v83 = v92;
  if (v82 >= v92)
    v84 = v92;
  else
    v84 = a2[1];
  *(_QWORD *)(a1 + 104) = *a2 + v84;
  *(_QWORD *)(a1 + 112) = v82 - v84;
  *(_DWORD *)(a1 + 120) = v83;
  return 1;
}

uint64_t llvm::DWARFGdbIndex::parse(uint64_t result, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  v2 = result;
  v3 = *((_QWORD *)a2 + 1);
  *(_BYTE *)(result + 124) = v3 != 0;
  if (v3)
  {
    v4 = *a2;
    v5 = *((_QWORD *)a2 + 2);
    result = llvm::DWARFGdbIndex::parseImpl(result, &v4);
    LOBYTE(v3) = result ^ 1;
  }
  *(_BYTE *)(v2 + 125) = v3;
  return result;
}

uint64_t sub_1C54AFC48(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

void sub_1C54AFC84()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C54AFC98(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  unsigned int v17;
  size_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  unint64_t v25;
  int v27;
  unsigned __int8 *v28;
  uint64_t v29;

  v28 = a3;
  v29 = a4;
  v27 = 0;
  if (!sub_1C617F438(&v28, &v27))
  {
    v14 = v29;
    if (!v29)
    {
      v15 = 0;
      goto LABEL_20;
    }
    v15 = 0;
    v16 = v28;
    v17 = *v28;
    if (v17 > 0x63)
    {
      if (v17 != 100)
      {
        if (v17 != 110)
        {
LABEL_26:
          v19 = 0;
          v20 = &v16[v14];
          v21 = v14;
          while (1)
          {
            v22 = *v16;
            if ((v22 - 48) >= 0xA)
            {
              if ((v22 - 97) >= 0x1A)
              {
                if ((v22 - 65) > 0x19)
                {
LABEL_45:
                  v18 = v19;
                  v20 = v16;
LABEL_46:
                  if (v14 != v21)
                  {
                    v28 = v20;
                    v29 = v21;
                    return sub_1C5E21910(a2, *(_QWORD *)(a1 + 8), v18, v15, 0);
                  }
LABEL_20:
                  v18 = 0;
                  return sub_1C5E21910(a2, *(_QWORD *)(a1 + 8), v18, v15, 0);
                }
                v23 = -55;
              }
              else
              {
                v23 = -87;
              }
            }
            else
            {
              v23 = -48;
            }
            v24 = v23 + v22;
            if (v24 > 9)
              goto LABEL_45;
            v18 = 10 * v19 + v24;
            if (v19 > v18 / 0xA)
              goto LABEL_20;
            ++v16;
            v19 = 10 * v19 + v24;
            if (!--v21)
              goto LABEL_46;
          }
        }
        goto LABEL_23;
      }
    }
    else if (v17 != 68)
    {
      if (v17 != 78)
        goto LABEL_26;
LABEL_23:
      v16 = ++v28;
      v15 = 1;
      goto LABEL_25;
    }
    v15 = 0;
    v16 = ++v28;
LABEL_25:
    v14 = v29 - 1;
    v29 = v14;
    if (!v14)
      goto LABEL_20;
    goto LABEL_26;
  }
  if (!v29)
    goto LABEL_44;
  v6 = 0;
  v7 = v28;
  v8 = &v28[v29];
  v9 = v29;
  while (1)
  {
    v10 = *v7;
    if ((v10 - 48) < 0xA)
    {
      v11 = -48;
      goto LABEL_6;
    }
    if ((v10 - 97) < 0x1A)
    {
      v11 = -87;
      goto LABEL_6;
    }
    if ((v10 - 65) > 0x19)
      break;
    v11 = -55;
LABEL_6:
    v12 = v11 + v10;
    if (v12 > 9)
      break;
    v13 = 10 * v6 + v12;
    if (v6 > v13 / 0xA)
      goto LABEL_44;
    ++v7;
    v6 = v13;
    if (!--v9)
      goto LABEL_38;
  }
  v13 = v6;
  v8 = v7;
LABEL_38:
  if (v29 != v9)
  {
    v28 = v8;
    v29 = v9;
    goto LABEL_40;
  }
LABEL_44:
  v13 = 0;
LABEL_40:
  if ((v27 & 0xFFFFFFFE) == 2)
    v25 = v13 + 2;
  else
    v25 = v13;
  return llvm::write_hex(a2, *(_QWORD *)(a1 + 8), v27, v25, 1);
}

void sub_1C54AFED0()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C54AFEE4(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1C617F300(*(unint64_t **)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1C54AFEEC(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

uint64_t sub_1C54AFF2C(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned int *)(a1 + 24));
}

char *llvm::DWARFListTableHeader::extract@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t InitialLength;
  unsigned __int8 v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const std::error_category *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::string *v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  char *result;
  const std::error_category *v25;
  uint64_t v26;
  std::string *v27;
  unint64_t v28;
  void **v29;
  uint64_t v30;
  unint64_t v31;
  _BOOL4 v32;
  unint64_t v33;
  char v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  __int16 v41;
  uint64_t v42;
  std::string *v43;
  unint64_t v44;
  _OWORD *v45;
  llvm::raw_ostream *v46;
  _OWORD *v47;
  char v48;
  uint64_t i;
  unint64_t v50;
  size_t v51;
  const char *v52;
  llvm::raw_ostream *v53;
  _BYTE *v54;
  void **v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  char *v63;
  std::string v64;
  char *v65;
  void (**v66)(llvm::raw_ostream *__hidden);
  int v67;
  uint64_t v68;
  unint64_t v69;
  _OWORD *v70;
  char v71;
  uint64_t v72;
  int v73;
  void **p_p;
  void *__p;
  uint64_t v76;
  uint64_t v77;
  uint64_t (**v78)(llvm::format_object_base *__hidden);
  int64x2_t v79;
  unint64_t v80;
  std::string *v81;

  *(_QWORD *)(a1 + 24) = *a3;
  v65 = 0;
  InitialLength = llvm::DWARFDataExtractor::getInitialLength(a2, a3, &v65);
  *(_QWORD *)a1 = InitialLength;
  *(_BYTE *)(a1 + 16) = v9;
  if (!v65)
  {
    v10 = v9;
    v11 = 12;
    v12 = 4;
    if (v9)
      v12 = 12;
    v13 = v12 + InitialLength;
    if (v9)
      v11 = 20;
    if (v13 >= v11)
    {
      v17 = *(_QWORD *)(a1 + 24);
      v18 = v17 + v13;
      if (__CFADD__(v17, v13) || *(_QWORD *)(a2 + 8) <= v18 - 1)
      {
        v14 = std::generic_category();
        __p = 0;
        v76 = 0;
        v77 = 0;
        v67 = 0;
        v71 = 0;
        v72 = 0;
        v66 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
        p_p = &__p;
        v73 = 0;
        v69 = 0;
        v70 = 0;
        v68 = 0;
        v20 = *(std::string **)(a1 + 24);
        v19 = *(_QWORD *)(a1 + 32);
        v78 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E8169CC0;
        v79.i64[0] = (uint64_t)"section is not large enough to contain a %s table of length 0x%llx at offset 0x%llx";
        v79.i64[1] = v19;
        v80 = v13;
        v81 = v20;
      }
      else
      {
        *(_WORD *)(a1 + 8) = sub_1C63871E8(a2, a3, 0);
        v31 = *a3;
        v32 = llvm::DataExtractor::prepareRead(a2, *a3, 1, 0);
        v33 = *a3;
        if (v32)
        {
          v34 = *(_BYTE *)(*(_QWORD *)a2 + v31);
          *a3 = ++v33;
        }
        else
        {
          v34 = 0;
        }
        *(_BYTE *)(a1 + 10) = v34;
        if (llvm::DataExtractor::prepareRead(a2, v33, 1, 0))
        {
          v35 = *(_BYTE *)(*(_QWORD *)a2 + v33);
          ++*a3;
        }
        else
        {
          v35 = 0;
        }
        *(_BYTE *)(a1 + 11) = v35;
        *(_DWORD *)(a1 + 12) = sub_1C6387364(a2, a3, 0);
        if (*(_WORD *)(a1 + 8) == 5)
        {
          v36 = *(unsigned __int8 *)(a1 + 10);
          v14 = std::generic_category();
          v37 = *(_QWORD *)(a1 + 32);
          if (sub_1C54916D8(v36))
          {
            *a4 = 0;
            if (!*(_BYTE *)(a1 + 11))
            {
              v56 = 20;
              if (!*(_BYTE *)(a1 + 16))
                v56 = 12;
              v57 = v56 + *(_QWORD *)(a1 + 24);
              if (v10 == 1)
                v58 = 3;
              else
                v58 = 2;
              v59 = (*(_DWORD *)(a1 + 12) << v58);
              if (v18 >= v57 + v59)
              {
                *(_BYTE *)(a2 + 17) = *(_BYTE *)(a1 + 10);
                *a3 += v59;
                goto LABEL_15;
              }
              v14 = std::generic_category();
              __p = 0;
              v76 = 0;
              v77 = 0;
              v67 = 0;
              v71 = 0;
              v72 = 0;
              v66 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
              p_p = &__p;
              v73 = 0;
              v69 = 0;
              v70 = 0;
              v68 = 0;
              v61 = *(_QWORD *)(a1 + 24);
              v60 = *(_QWORD *)(a1 + 32);
              v62 = *(_DWORD *)(a1 + 12);
              v78 = &off_1E816A350;
              v79.i64[0] = (uint64_t)"%s table at offset 0x%llx has more offset entries (%u) than there is space for";
              v79.i64[1] = v60;
              v80 = v61;
              LODWORD(v81) = v62;
              goto LABEL_11;
            }
            v14 = std::generic_category();
            __p = 0;
            v76 = 0;
            v77 = 0;
            v67 = 0;
            v71 = 0;
            v72 = 0;
            v66 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
            p_p = &__p;
            v73 = 0;
            v69 = 0;
            v70 = 0;
            v68 = 0;
            v39 = *(_QWORD *)(a1 + 24);
            v38 = *(_QWORD *)(a1 + 32);
            v40 = *(_BYTE *)(a1 + 11);
            v78 = &off_1E816A330;
            v79.i64[0] = (uint64_t)"%s table at offset 0x%llx has unsupported segment selector size %hhu";
            v79.i64[1] = v38;
            v80 = v39;
            LOBYTE(v81) = v40;
            llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v66, (uint64_t)&v78);
          }
          else
          {
            __p = 0;
            v76 = 0;
            v77 = 0;
            v67 = 0;
            v71 = 0;
            v72 = 0;
            v66 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
            p_p = &__p;
            v73 = 0;
            v69 = 0;
            v70 = 0;
            v68 = 0;
            v44 = *(_QWORD *)(a1 + 24);
            v78 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E8169B68;
            v79.i64[0] = (uint64_t)"%s table at offset 0x%llx";
            v79.i64[1] = v37;
            v80 = v44;
            llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v66, (uint64_t)&v78);
            v45 = v70;
            if (v69 - (unint64_t)v70 > 0x1E)
            {
              *v70 = *(_OWORD *)" has unsupported address size: ";
              *(_OWORD *)((char *)v45 + 15) = *(_OWORD *)"d address size: ";
              v70 = (_OWORD *)((char *)v70 + 31);
              v46 = (llvm::raw_ostream *)&v66;
            }
            else
            {
              v46 = llvm::raw_ostream::write((llvm::raw_ostream *)&v66, " has unsupported address size: ", 0x1FuLL);
            }
            sub_1C5E21910(v46, v36, 0, 0, 0);
            v47 = (_OWORD *)*((_QWORD *)v46 + 4);
            if (*((_QWORD *)v46 + 3) - (_QWORD)v47 > 0xFuLL)
            {
              *v47 = *(_OWORD *)" (supported are ";
              *((_QWORD *)v46 + 4) += 16;
            }
            else
            {
              llvm::raw_ostream::write(v46, " (supported are ", 0x10uLL);
            }
            v48 = 0;
            v78 = (uint64_t (**)(llvm::format_object_base *__hidden))&v80;
            LOWORD(v80) = 1026;
            BYTE2(v80) = 8;
            v79 = vdupq_n_s64(3uLL);
            for (i = 24; i != 27; ++i)
            {
              v50 = *((unsigned __int8 *)&v78 + i);
              if ((v48 & 1) != 0)
                v51 = 2;
              else
                v51 = 0;
              if (v51 <= v69 - (unint64_t)v70)
              {
                if ((v48 & 1) != 0)
                {
                  *(_WORD *)v70 = 8236;
                  v70 = (_OWORD *)((char *)v70 + 2);
                }
                v53 = (llvm::raw_ostream *)&v66;
              }
              else
              {
                if ((v48 & 1) != 0)
                  v52 = ", ";
                else
                  v52 = 0;
                v53 = llvm::raw_ostream::write((llvm::raw_ostream *)&v66, v52, v51);
              }
              sub_1C5E21910(v53, v50, 0, 0, 0);
              v48 = 1;
            }
            if (v78 != (uint64_t (**)(llvm::format_object_base *__hidden))&v80)
              free(v78);
            v54 = v70;
            if ((unint64_t)v70 >= v69)
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)&v66, 41);
            }
            else
            {
              v70 = (_OWORD *)((char *)v70 + 1);
              *v54 = 41;
            }
          }
          v55 = p_p;
          v22 = operator new();
          LOWORD(v81) = 260;
          v78 = (uint64_t (**)(llvm::format_object_base *__hidden))v55;
          *(_QWORD *)v22 = off_1E81A0C88;
          llvm::Twine::str((llvm::Twine *)&v78, (_QWORD *)(v22 + 8));
          v23 = 45;
LABEL_12:
          *(_QWORD *)(v22 + 32) = v23;
          *(_QWORD *)(v22 + 40) = v14;
          *(_BYTE *)(v22 + 48) = 1;
          *a4 = v22;
          v66 = off_1E81A6E70;
          if (v73 == 1 && v68)
            MEMORY[0x1CAA32F9C](v68, 0x1000C8077774924);
          if (SHIBYTE(v77) < 0)
            operator delete(__p);
          goto LABEL_15;
        }
        v14 = std::generic_category();
        __p = 0;
        v76 = 0;
        v77 = 0;
        v67 = 0;
        v71 = 0;
        v72 = 0;
        v66 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
        p_p = &__p;
        v73 = 0;
        v69 = 0;
        v70 = 0;
        v68 = 0;
        v41 = *(_WORD *)(a1 + 8);
        v43 = *(std::string **)(a1 + 24);
        v42 = *(_QWORD *)(a1 + 32);
        v78 = &off_1E816A310;
        v79.i64[0] = (uint64_t)"unrecognised %s table version %hu in table at offset 0x%llx";
        v79.i64[1] = v42;
        LOWORD(v80) = v41;
        v81 = v43;
      }
    }
    else
    {
      v14 = std::generic_category();
      __p = 0;
      v76 = 0;
      v77 = 0;
      v67 = 0;
      v71 = 0;
      v72 = 0;
      v66 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
      p_p = &__p;
      v73 = 0;
      v69 = 0;
      v70 = 0;
      v68 = 0;
      v16 = *(_QWORD *)(a1 + 24);
      v15 = *(_QWORD *)(a1 + 32);
      v78 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E8169CC0;
      v79.i64[0] = (uint64_t)"%s table at offset 0x%llx has too small length (0x%llx) to contain a complete header";
      v79.i64[1] = v15;
      v80 = v16;
      v81 = (std::string *)v13;
    }
LABEL_11:
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v66, (uint64_t)&v78);
    v21 = p_p;
    v22 = operator new();
    LOWORD(v81) = 260;
    v78 = (uint64_t (**)(llvm::format_object_base *__hidden))v21;
    *(_QWORD *)v22 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v78, (_QWORD *)(v22 + 8));
    v23 = 22;
    goto LABEL_12;
  }
  v25 = std::generic_category();
  v26 = *(_QWORD *)(a1 + 32);
  v63 = v65;
  v65 = 0;
  sub_1C61D2548(&v63, &v64);
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = &v64;
  else
    v27 = (std::string *)v64.__r_.__value_.__r.__words[0];
  __p = 0;
  v76 = 0;
  v77 = 0;
  v67 = 0;
  v71 = 0;
  v72 = 0;
  v66 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  p_p = &__p;
  v73 = 0;
  v69 = 0;
  v70 = 0;
  v68 = 0;
  v28 = *(_QWORD *)(a1 + 24);
  v78 = &off_1E816A2F0;
  v79.i64[0] = (uint64_t)"parsing %s table at offset 0x%llx: %s";
  v79.i64[1] = v26;
  v80 = v28;
  v81 = v27;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v66, (uint64_t)&v78);
  v29 = p_p;
  v30 = operator new();
  LOWORD(v81) = 260;
  v78 = (uint64_t (**)(llvm::format_object_base *__hidden))v29;
  *(_QWORD *)v30 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v78, (_QWORD *)(v30 + 8));
  *(_QWORD *)(v30 + 32) = 22;
  *(_QWORD *)(v30 + 40) = v25;
  *(_BYTE *)(v30 + 48) = 1;
  *a4 = v30;
  v66 = off_1E81A6E70;
  if (v73 == 1 && v68)
    MEMORY[0x1CAA32F9C](v68, 0x1000C8077774924);
  if (SHIBYTE(v77) < 0)
    operator delete(__p);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (v63)
    (*(void (**)(char *))(*(_QWORD *)v63 + 8))(v63);
LABEL_15:
  result = v65;
  if (v65)
    return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v65 + 8))(v65);
  return result;
}

llvm::raw_ostream *llvm::DWARFListTableHeader::dump(uint64_t *a1, __int128 *a2, llvm::raw_ostream *a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  const char *v13;
  _DWORD *v14;
  unint64_t v15;
  llvm::raw_ostream *result;
  uint64_t v17;
  unsigned int v18;
  unsigned int i;
  unint64_t Unsigned;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  unint64_t v29[3];
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;

  if (*(_BYTE *)(a4 + 20))
  {
    v7 = a1[3];
    *(_QWORD *)&v30 = &unk_1E8133270;
    *((_QWORD *)&v30 + 1) = "0x%8.8llx: ";
    v31 = v7;
    llvm::raw_ostream::operator<<(a3, (uint64_t)&v30);
  }
  v8 = a1[6];
  v9 = *a1;
  if (*((_BYTE *)a1 + 16))
    v10 = 16;
  else
    v10 = 8;
  *(_QWORD *)&v30 = &off_1E816A370;
  *((_QWORD *)&v30 + 1) = "%s list header: length = 0x%0*llx";
  v31 = v8;
  LODWORD(v32) = v10;
  v33 = v9;
  llvm::raw_ostream::operator<<(a3, (uint64_t)&v30);
  v11 = *((_QWORD *)a3 + 4);
  if ((unint64_t)(*((_QWORD *)a3 + 3) - v11) > 0xA)
  {
    *(_DWORD *)(v11 + 7) = 540876916;
    *(_QWORD *)v11 = *(_QWORD *)", format = ";
    *((_QWORD *)a3 + 4) += 11;
    v12 = a3;
  }
  else
  {
    v12 = llvm::raw_ostream::write(a3, ", format = ", 0xBuLL);
  }
  if (*((_BYTE *)a1 + 16))
  {
    if (*((_BYTE *)a1 + 16) != 1)
      goto LABEL_15;
    v13 = "DWARF64";
  }
  else
  {
    v13 = "DWARF32";
  }
  v14 = (_DWORD *)*((_QWORD *)v12 + 4);
  if (*((_QWORD *)v12 + 3) - (_QWORD)v14 > 6uLL)
  {
    *v14 = *(_DWORD *)v13;
    *(_DWORD *)((char *)v14 + 3) = *(_DWORD *)(v13 + 3);
    *((_QWORD *)v12 + 4) += 7;
  }
  else
  {
    v12 = llvm::raw_ostream::write(v12, v13, 7uLL);
  }
LABEL_15:
  v15 = a1[1];
  v29[0] = (unint64_t)&off_1E816A390;
  v29[1] = (unint64_t)", version = 0x%4.4hx, addr_size = 0x%2.2hhx, seg_size = 0x%2.2hhx, offset_entry_count = 0x%8.8x\n";
  v29[2] = v15;
  result = llvm::raw_ostream::operator<<(v12, (uint64_t)v29);
  if (*((_DWORD *)a1 + 3))
  {
    v17 = *((_QWORD *)a3 + 4);
    if ((unint64_t)(*((_QWORD *)a3 + 3) - v17) > 9)
    {
      *(_WORD *)(v17 + 8) = 23328;
      *(_QWORD *)v17 = *(_QWORD *)"offsets: [";
      *((_QWORD *)a3 + 4) += 10;
    }
    else
    {
      result = llvm::raw_ostream::write(a3, "offsets: [", 0xAuLL);
    }
    v18 = *((_DWORD *)a1 + 3);
    if (v18)
    {
      for (i = 0; i < v18; ++i)
      {
        if (v18 > i)
        {
          v30 = *a2;
          v31 = *((_QWORD *)a2 + 2);
          v23 = *((unsigned __int8 *)a1 + 16);
          v24 = 20;
          if (!*((_BYTE *)a1 + 16))
            v24 = 12;
          if (v23 == 1)
            v25 = 8;
          else
            v25 = 4;
          if (v23 == 1)
            v26 = 3;
          else
            v26 = 2;
          v29[0] = v24 + a1[3] + (i << v26);
          Unsigned = llvm::DataExtractor::getUnsigned(&v30, v29, v25, 0);
        }
        else
        {
          Unsigned = 0;
        }
        *(_QWORD *)&v30 = &unk_1E81698E0;
        *((_QWORD *)&v30 + 1) = "\n0x%0*llx";
        LODWORD(v31) = v10;
        v32 = Unsigned;
        result = llvm::raw_ostream::operator<<(a3, (uint64_t)&v30);
        if (*(_BYTE *)(a4 + 20))
        {
          v21 = 20;
          if (!*((_BYTE *)a1 + 16))
            v21 = 12;
          v22 = a1[3] + Unsigned + v21;
          *(_QWORD *)&v30 = &unk_1E8133270;
          *((_QWORD *)&v30 + 1) = " => 0x%08llx";
          v31 = v22;
          result = llvm::raw_ostream::operator<<(a3, (uint64_t)&v30);
        }
        v18 = *((_DWORD *)a1 + 3);
      }
    }
    v27 = *((_QWORD *)a3 + 4);
    if ((unint64_t)(*((_QWORD *)a3 + 3) - v27) > 2)
    {
      *(_BYTE *)(v27 + 2) = 10;
      *(_WORD *)v27 = 23818;
      *((_QWORD *)a3 + 4) += 3;
    }
    else
    {
      return llvm::raw_ostream::write(a3, "\n]\n", 3uLL);
    }
  }
  return result;
}

uint64_t sub_1C54B0B18(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

uint64_t sub_1C54B0B54(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int16 *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

uint64_t sub_1C54B0B90(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
}

uint64_t sub_1C54B0BCC(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 32));
}

uint64_t sub_1C54B0C08(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned int *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

uint64_t sub_1C54B0C44(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned __int16 *)(a1 + 16), *(unsigned __int8 *)(a1 + 18), *(unsigned __int8 *)(a1 + 19), *(unsigned int *)(a1 + 20));
}

void sub_1C54B0D68()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C54B0D7C(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  const void *v7;
  size_t v8;
  size_t v9;
  uint64_t result;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned __int8 *v15[2];

  v5 = *(unsigned __int8 **)(a1 + 8);
  v6 = *(unsigned __int8 **)(a1 + 16);
  v15[0] = a3;
  v15[1] = a4;
  v7 = (const void *)sub_1C54B0E6C(v15, 0x24u, (uint64_t)", ");
  v9 = v8;
  result = sub_1C54B0E6C(v15, 0x40u, (uint64_t)"");
  v11 = (unsigned __int8 *)result;
  v13 = v12;
  if (v5 == v6)
    goto LABEL_3;
  while (1)
  {
    result = (uint64_t)sub_1C624F864(v5++, a2, v11, v13);
LABEL_3:
    if (v5 == v6)
      break;
    v14 = (void *)*((_QWORD *)a2 + 4);
    if (v9 <= *((_QWORD *)a2 + 3) - (_QWORD)v14)
    {
      if (v9)
      {
        memcpy(v14, v7, v9);
        *((_QWORD *)a2 + 4) += v9;
      }
    }
    else
    {
      llvm::raw_ostream::write(a2, (const char *)v7, v9);
    }
  }
  return result;
}

uint64_t sub_1C54B0E6C(unsigned __int8 **a1, unsigned __int8 a2, uint64_t a3)
{
  unsigned __int8 *v4;
  uint64_t v6;
  unsigned __int8 *v7;
  size_t v8;
  uint64_t v9;
  char *v10;
  _BYTE *v11;
  uint64_t v12;
  BOOL v13;
  size_t v14;

  v4 = a1[1];
  if (v4)
  {
    v6 = (uint64_t)*a1;
    if (**a1 == a2)
    {
      v7 = (unsigned __int8 *)(v6 + 1);
      v8 = (size_t)(v4 - 1);
      *a1 = (unsigned __int8 *)(v6 + 1);
      a1[1] = v4 - 1;
      if (v4 != (unsigned __int8 *)1)
      {
        v9 = 0;
        while (1)
        {
          v10 = off_1E816A3D0[v9];
          if (*v7 == *v10)
            break;
          if (++v9 == 3)
            return a3;
        }
        v11 = memchr((void *)(v6 + 1), v10[1], v8);
        v12 = v11 - v7;
        if (v11)
          v13 = v12 == -1;
        else
          v13 = 1;
        if (!v13)
        {
          a3 = v6 + 2;
          if (v8 >= v12 + 1)
            v14 = v12 + 1;
          else
            v14 = v8;
          *a1 = &v7[v14];
          a1[1] = (unsigned __int8 *)(v8 - v14);
        }
      }
    }
  }
  return a3;
}

uint64_t llvm::serializeSectionKind(uint64_t result, int a2)
{
  if (a2 != 5)
    return dword_1C8651DD0[(int)result - 1];
  return result;
}

uint64_t llvm::deserializeSectionKind(uint64_t this, int a2)
{
  unsigned int v2;

  v2 = this - 1;
  if (a2 == 5)
  {
    if (v2 >= 8 || (_DWORD)this == 2)
      return 0;
    else
      return this;
  }
  else if (v2 > 7)
  {
    return 0;
  }
  else
  {
    return dword_1C8651DF8[v2];
  }
}

uint64_t llvm::DWARFUnitIndex::Header::parse(_DWORD *a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v3;
  int v8;
  int v9;

  v3 = *a3;
  if (*a3 > 0xFFFFFFFFFFFFFFEFLL || *(_QWORD *)(a2 + 8) <= v3 + 15)
    return 0;
  v8 = sub_1C6387364(a2, a3, 0);
  *a1 = v8;
  if (v8 != 2)
  {
    *a3 = v3;
    v9 = sub_1C63871E8(a2, a3, 0);
    *a1 = v9;
    if (v9 != 5)
      return 0;
    *a3 += 2;
  }
  a1[1] = sub_1C6387364(a2, a3, 0);
  a1[2] = sub_1C6387364(a2, a3, 0);
  a1[3] = sub_1C6387364(a2, a3, 0);
  return 1;
}

llvm::raw_ostream *llvm::DWARFUnitIndex::Header::dump(llvm::DWARFUnitIndex::Header *this, llvm::raw_ostream *a2)
{
  int v2;
  _QWORD v4[2];
  int v5;
  uint64_t v6;

  v2 = *(_DWORD *)this;
  v4[0] = &unk_1E816A2B0;
  v4[1] = "version = %u, units = %u, slots = %u\n\n";
  v5 = v2;
  v6 = *((_QWORD *)this + 1);
  return llvm::raw_ostream::operator<<(a2, (uint64_t)v4);
}

uint64_t llvm::DWARFUnitIndex::parseImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  size_t v12;
  void *v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  size_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v30;
  uint64_t v31;
  int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int i;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;

  v40 = *(_OWORD *)a2;
  v41 = *(_QWORD *)(a2 + 16);
  v42 = 0;
  if (!llvm::DWARFUnitIndex::Header::parse((_DWORD *)a1, (uint64_t)&v40, &v42))
    return 0;
  if (*(_DWORD *)a1 == 5)
    *(_DWORD *)(a1 + 16) = 1;
  v4 = *(unsigned int *)(a1 + 12);
  v5 = 12 * (_DWORD)v4 + ((8 * *(_DWORD *)(a1 + 8)) | 4u) * *(_DWORD *)(a1 + 4);
  if (__CFADD__(v42, v5) || *(_QWORD *)(a2 + 8) <= v42 + v5 - 1)
    return 0;
  v6 = (_QWORD *)operator new[]();
  *v6 = 24;
  v6[1] = v4;
  v7 = v6 + 2;
  if ((_DWORD)v4)
    bzero(v6 + 2, 24 * ((24 * (unint64_t)v4 - 24) / 0x18) + 24);
  v8 = *(_QWORD *)(a1 + 40);
  v39 = 0;
  *(_QWORD *)(a1 + 40) = v7;
  if (v8)
  {
    sub_1C548D5AC(a1 + 40, v8);
    v9 = v39;
    v39 = 0;
    if (v9)
      sub_1C548D5AC((uint64_t)&v39, v9);
  }
  v10 = 8 * *(unsigned int *)(a1 + 8);
  v11 = (void *)operator new[]();
  bzero(v11, v10);
  v12 = 4 * *(unsigned int *)(a1 + 4);
  v13 = (void *)operator new[]();
  bzero(v13, v12);
  v14 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v13;
  if (v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8052888210);
  v15 = 4 * *(unsigned int *)(a1 + 4);
  v16 = (void *)operator new[]();
  bzero(v16, v15);
  v17 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v16;
  if (v17)
    MEMORY[0x1CAA32F9C](v17, 0x1000C8052888210);
  if (*(_DWORD *)(a1 + 12))
  {
    v18 = 0;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24 * v18++ + 8) = sub_1C63873F8(a2, &v42, 0);
    while (v18 != *(_DWORD *)(a1 + 12));
    if (v18)
    {
      v19 = 0;
      do
      {
        v20 = sub_1C6387364(a2, &v42, 0);
        if (v20)
        {
          v21 = v20;
          *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24 * v19) = a1;
          v22 = 8 * *(unsigned int *)(a1 + 4);
          v23 = (void *)operator new[]();
          bzero(v23, v22);
          v24 = *(_QWORD *)(a1 + 40) + 24 * v19;
          v25 = *(_QWORD *)(v24 + 16);
          *(_QWORD *)(v24 + 16) = v23;
          if (v25)
            MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
          *((_QWORD *)v11 + (v21 - 1)) = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24 * v19 + 16);
        }
        ++v19;
      }
      while (v19 != *(_DWORD *)(a1 + 12));
    }
  }
  if (*(_DWORD *)(a1 + 4))
  {
    v26 = 0;
    do
    {
      v27 = sub_1C6387364(a2, &v42, 0);
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v26) = v27;
      v28 = v27 - 1;
      if (*(_DWORD *)a1 == 5)
      {
        if (v28 >= 8 || v27 == 2)
          v30 = 0;
        else
          v30 = v27;
      }
      else if (v28 > 7)
      {
        v30 = 0;
      }
      else
      {
        v30 = dword_1C8651DF8[v28];
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v26) = v30;
      if (v30 == *(_DWORD *)(a1 + 16))
      {
        if (*(_DWORD *)(a1 + 20) != -1)
          goto LABEL_61;
        *(_DWORD *)(a1 + 20) = v26;
      }
      ++v26;
    }
    while (v26 != *(_DWORD *)(a1 + 4));
  }
  else
  {
    v26 = 0;
  }
  if (*(_DWORD *)(a1 + 20) == -1)
  {
LABEL_61:
    v31 = 0;
  }
  else
  {
    v33 = *(_DWORD *)(a1 + 8);
    if (v33)
    {
      v34 = 0;
      v35 = v26;
      do
      {
        if (v35)
        {
          v26 = 0;
          v36 = *((_QWORD *)v11 + v34);
          do
            *(_DWORD *)(v36 + 8 * v26++) = sub_1C6387364(a2, &v42, 0);
          while (v26 != *(_DWORD *)(a1 + 4));
          v33 = *(_DWORD *)(a1 + 8);
          v35 = v26;
        }
        ++v34;
      }
      while (v34 != v33);
      if (v33)
      {
        for (i = 0; i != v33; ++i)
        {
          if (v26)
          {
            v26 = 0;
            v38 = *((_QWORD *)v11 + i);
            do
              *(_DWORD *)(v38 + 8 * v26++ + 4) = sub_1C6387364(a2, &v42, 0);
            while (v26 != *(_DWORD *)(a1 + 4));
            v33 = *(_DWORD *)(a1 + 8);
          }
        }
      }
    }
    v31 = 1;
  }
  MEMORY[0x1CAA32F9C](v11, 0x20C8093837F09);
  return v31;
}

uint64_t llvm::DWARFUnitIndex::getColumnHeader(int a1)
{
  return qword_1E816A410[a1];
}

llvm::raw_ostream *llvm::DWARFUnitIndex::dump(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  int v2;
  llvm::raw_ostream *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  int v9;
  void *v10;
  _BYTE *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  _BYTE *v19;
  void *v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;

  v2 = *((_DWORD *)this + 3);
  if (v2)
  {
    v4 = this;
    v5 = *(_DWORD *)this;
    v6 = *((_DWORD *)this + 2);
    v20 = &unk_1E816A2B0;
    v21 = "version = %u, units = %u, slots = %u\n\n";
    v22 = __PAIR64__(v6, v5);
    LODWORD(v23) = v2;
    this = llvm::raw_ostream::operator<<(a2, (uint64_t)&v20);
    v7 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v7) > 0x17)
    {
      *(_QWORD *)(v7 + 16) = 0x2020202020202020;
      *(_OWORD *)v7 = *(_OWORD *)"Index Signature         ";
      *((_QWORD *)a2 + 4) += 24;
    }
    else
    {
      this = llvm::raw_ostream::write(a2, "Index Signature         ", 0x18uLL);
    }
    if (*((_DWORD *)v4 + 1))
      __asm { BR              X9 }
    v8 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v8 > 0x18uLL)
    {
      qmemcpy(v8, "\n----- ------------------", 25);
      *((_QWORD *)a2 + 4) += 25;
    }
    else
    {
      this = llvm::raw_ostream::write(a2, "\n----- ------------------", 0x19uLL);
    }
    if (*((_DWORD *)v4 + 1))
    {
      v9 = 0;
      do
      {
        v10 = (void *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v10 > 0x18uLL)
        {
          qmemcpy(v10, " ------------------------", 25);
          *((_QWORD *)a2 + 4) += 25;
        }
        else
        {
          this = llvm::raw_ostream::write(a2, " ------------------------", 0x19uLL);
        }
        ++v9;
      }
      while (v9 != *((_DWORD *)v4 + 1));
    }
    v11 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v11 >= *((_QWORD *)a2 + 3))
    {
      this = llvm::raw_ostream::write(a2, 10);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v11 + 1;
      *v11 = 10;
    }
    if (*((_DWORD *)v4 + 3))
    {
      v12 = 0;
      do
      {
        v13 = v12;
        v14 = *((_QWORD *)v4 + 5);
        v15 = *(_QWORD *)(v14 + 24 * v12 + 16);
        if (v15)
        {
          v20 = &unk_1E8169860;
          v16 = *(_QWORD *)(v14 + 24 * v12++ + 8);
          v21 = "%5u 0x%016llx ";
          LODWORD(v22) = v13 + 1;
          v23 = v16;
          this = llvm::raw_ostream::operator<<(a2, (uint64_t)&v20);
          if (*((_DWORD *)v4 + 1))
          {
            v17 = 0;
            do
            {
              v18 = *(unsigned int *)(v15 + 8 * v17) | ((unint64_t)(*(_DWORD *)(v15 + 8 * v17 + 4)
                                                                                         + *(_DWORD *)(v15 + 8 * v17)) << 32);
              v20 = &unk_1E813F0F8;
              v21 = "[0x%08x, 0x%08x) ";
              v22 = v18;
              this = llvm::raw_ostream::operator<<(a2, (uint64_t)&v20);
              ++v17;
            }
            while (v17 != *((_DWORD *)v4 + 1));
          }
          v19 = (_BYTE *)*((_QWORD *)a2 + 4);
          if ((unint64_t)v19 >= *((_QWORD *)a2 + 3))
          {
            this = llvm::raw_ostream::write(a2, 10);
          }
          else
          {
            *((_QWORD *)a2 + 4) = v19 + 1;
            *v19 = 10;
          }
        }
        else
        {
          ++v12;
        }
      }
      while (v12 != *((_DWORD *)v4 + 3));
    }
  }
  return this;
}

uint64_t llvm::DWARFUnitIndex::getFromOffset(llvm::DWARFUnitIndex *this, unsigned int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  llvm::DWARFUnitIndex *v32;

  v5 = (_QWORD *)*((_QWORD *)this + 6);
  v4 = (_QWORD *)*((_QWORD *)this + 7);
  if (v5 == v4)
  {
    v6 = *((_DWORD *)this + 3);
    if (v6)
    {
      v7 = 0;
      do
      {
        v8 = v7;
        v9 = *((_QWORD *)this + 5);
        if (*(_QWORD *)(v9 + 24 * v7 + 16))
        {
          v10 = v9 + 24 * v7;
          v11 = *((_QWORD *)this + 8);
          if ((unint64_t)v5 >= v11)
          {
            v13 = (_QWORD *)*((_QWORD *)this + 6);
            v14 = v5 - v13;
            v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 61)
              abort();
            v16 = v11 - (_QWORD)v13;
            if (v16 >> 2 > v15)
              v15 = v16 >> 2;
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
              v17 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v17 = v15;
            if (v17)
            {
              if (v17 >> 61)
                sub_1C4764EE4();
              v18 = (char *)operator new(8 * v17);
            }
            else
            {
              v18 = 0;
            }
            v19 = &v18[8 * v14];
            *(_QWORD *)v19 = v10;
            v12 = v19 + 8;
            if (v5 != v13)
            {
              do
              {
                v20 = *--v5;
                *((_QWORD *)v19 - 1) = v20;
                v19 -= 8;
              }
              while (v5 != v13);
              v5 = (_QWORD *)*((_QWORD *)this + 6);
            }
            *((_QWORD *)this + 6) = v19;
            *((_QWORD *)this + 7) = v12;
            *((_QWORD *)this + 8) = &v18[8 * v17];
            if (v5)
            {
              operator delete(v5);
              v6 = *((_DWORD *)this + 3);
            }
          }
          else
          {
            *v5 = v10;
            v12 = v5 + 1;
          }
          *((_QWORD *)this + 7) = v12;
          v5 = v12;
        }
        v7 = v8 + 1;
      }
      while (v8 + 1 != v6);
      v21 = (uint64_t *)*((_QWORD *)this + 6);
    }
    else
    {
      v21 = (uint64_t *)*((_QWORD *)this + 6);
    }
    v22 = 126 - 2 * __clz(v5 - v21);
    v32 = this;
    if (v5 == v21)
      v23 = 0;
    else
      v23 = v22;
    sub_1C54B1B60(v21, v5, (uint64_t)&v32, v23, 1);
    v5 = (_QWORD *)*((_QWORD *)this + 6);
    v4 = (_QWORD *)*((_QWORD *)this + 7);
  }
  if (v4 != v5)
  {
    v24 = v4 - v5;
    v4 = v5;
    do
    {
      v25 = v24 >> 1;
      v26 = &v4[v24 >> 1];
      v28 = *v26;
      v27 = v26 + 1;
      v24 += ~(v24 >> 1);
      if (*(_DWORD *)(*(_QWORD *)(v28 + 16) + 8 * *((int *)this + 5)) <= a2)
        v4 = v27;
      else
        v24 = v25;
    }
    while (v24);
  }
  if (v4 == v5)
    return 0;
  v29 = *(v4 - 1);
  v30 = (_DWORD *)(*(_QWORD *)(v29 + 16) + 8 * *((int *)this + 5));
  if (v30[1] + *v30 <= a2)
    return 0;
  else
    return v29;
}

uint64_t *sub_1C54B1B60(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  BOOL v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  int64_t v73;
  int64_t v74;
  int64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v45 = *(a2 - 1);
        v46 = *v10;
        v47 = 8 * *(int *)(*(_QWORD *)a3 + 20);
        if (*(_DWORD *)(*(_QWORD *)(v45 + 16) + v47) < *(_DWORD *)(*(_QWORD *)(*v10 + 16) + v47))
        {
          *v10 = v45;
          *(a2 - 1) = v46;
        }
        return result;
      case 3:
        return sub_1C54B2458(v10, v10 + 1, a2 - 1, a3);
      case 4:
        return sub_1C54B27BC(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5:
        v48 = v10 + 1;
        v49 = v10 + 2;
        v50 = v10 + 3;
        result = sub_1C54B27BC(v10, v10 + 1, v10 + 2, v10 + 3, a3);
        v51 = *(a2 - 1);
        v52 = v10[3];
        v53 = 8 * *(int *)(*(_QWORD *)a3 + 20);
        if (*(_DWORD *)(*(_QWORD *)(v51 + 16) + v53) < *(_DWORD *)(*(_QWORD *)(v52 + 16) + v53))
        {
          *v50 = v51;
          *(a2 - 1) = v52;
          v54 = *v50;
          v55 = *v49;
          v56 = 8 * *(int *)(*(_QWORD *)a3 + 20);
          if (*(_DWORD *)(*(_QWORD *)(*v50 + 16) + v56) < *(_DWORD *)(*(_QWORD *)(*v49 + 16) + v56))
          {
            *v49 = v54;
            *v50 = v55;
            v57 = *v48;
            v58 = 8 * *(int *)(*(_QWORD *)a3 + 20);
            if (*(_DWORD *)(*(_QWORD *)(v54 + 16) + v58) < *(_DWORD *)(*(_QWORD *)(*v48 + 16) + v58))
            {
              v10[1] = v54;
              v10[2] = v57;
              v59 = *v10;
              v60 = 8 * *(int *)(*(_QWORD *)a3 + 20);
              if (*(_DWORD *)(*(_QWORD *)(v54 + 16) + v60) < *(_DWORD *)(*(_QWORD *)(*v10 + 16) + v60))
              {
                *v10 = v54;
                v10[1] = v59;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 191)
        {
          v61 = v10 + 1;
          v63 = v10 == a2 || v61 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v63)
            {
              v64 = *(_QWORD *)a3;
              v65 = 8;
              v66 = v10;
              do
              {
                v68 = *v66;
                v67 = v66[1];
                v66 = v61;
                if (*(_DWORD *)(*(_QWORD *)(v67 + 16) + 8 * *(int *)(v64 + 20)) < *(_DWORD *)(*(_QWORD *)(v68 + 16)
                                                                                               + 8
                                                                                               * *(int *)(v64 + 20)))
                {
                  v69 = v65;
                  while (1)
                  {
                    *(uint64_t *)((char *)v10 + v69) = v68;
                    v70 = v69 - 8;
                    if (v69 == 8)
                      break;
                    v71 = 8 * *(int *)(*(_QWORD *)a3 + 20);
                    v68 = *(uint64_t *)((char *)v10 + v69 - 16);
                    v69 -= 8;
                    if (*(_DWORD *)(*(_QWORD *)(v67 + 16) + v71) >= *(_DWORD *)(*(_QWORD *)(v68 + 16) + v71))
                    {
                      v72 = (uint64_t *)((char *)v10 + v70);
                      goto LABEL_80;
                    }
                  }
                  v72 = v10;
LABEL_80:
                  *v72 = v67;
                  v64 = *(_QWORD *)a3;
                }
                v61 = v66 + 1;
                v65 += 8;
              }
              while (v66 + 1 != a2);
            }
          }
          else if (!v63)
          {
            v108 = *(_QWORD *)a3;
            do
            {
              v110 = *v9;
              v109 = v9[1];
              v9 = v61;
              if (*(_DWORD *)(*(_QWORD *)(v109 + 16) + 8 * *(int *)(v108 + 20)) < *(_DWORD *)(*(_QWORD *)(v110 + 16)
                                                                                               + 8
                                                                                               * *(int *)(v108 + 20)))
              {
                v111 = v61;
                do
                {
                  *v111 = v110;
                  v112 = 8 * *(int *)(*(_QWORD *)a3 + 20);
                  v110 = *(v111 - 2);
                  --v111;
                }
                while (*(_DWORD *)(*(_QWORD *)(v109 + 16) + v112) < *(_DWORD *)(*(_QWORD *)(v110 + 16) + v112));
                *v111 = v109;
                v108 = *(_QWORD *)a3;
              }
              v61 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v73 = (unint64_t)(v12 - 2) >> 1;
            v74 = v73;
            do
            {
              v75 = v74;
              if (v73 >= v74)
              {
                v76 = (2 * v74) | 1;
                v77 = &v10[v76];
                v78 = *v77;
                if (2 * v75 + 2 >= v12)
                {
                  v79 = *(int *)(*(_QWORD *)a3 + 20);
                }
                else
                {
                  v79 = *(int *)(*(_QWORD *)a3 + 20);
                  if (*(_DWORD *)(*(_QWORD *)(v78 + 16) + 8 * v79) < *(_DWORD *)(*(_QWORD *)(v77[1] + 16) + 8 * v79))
                  {
                    v78 = v77[1];
                    ++v77;
                    v76 = 2 * v75 + 2;
                  }
                }
                v80 = &v10[v75];
                v81 = *v80;
                result = *(uint64_t **)(*v80 + 16);
                if (*(_DWORD *)(*(_QWORD *)(v78 + 16) + 8 * v79) >= LODWORD(result[v79]))
                {
                  do
                  {
                    v82 = v77;
                    *v80 = v78;
                    if (v73 < v76)
                      break;
                    v83 = (2 * v76) | 1;
                    v77 = &v10[v83];
                    v76 = 2 * v76 + 2;
                    v78 = *v77;
                    if (v76 >= v12)
                    {
                      v84 = *(int *)(*(_QWORD *)a3 + 20);
                      v76 = v83;
                    }
                    else
                    {
                      v84 = *(int *)(*(_QWORD *)a3 + 20);
                      if (*(_DWORD *)(*(_QWORD *)(v78 + 16) + 8 * v84) >= *(_DWORD *)(*(_QWORD *)(v77[1] + 16) + 8 * v84))
                      {
                        v76 = v83;
                      }
                      else
                      {
                        v78 = v77[1];
                        ++v77;
                      }
                    }
                    v85 = 8 * v84;
                    result = (uint64_t *)*(unsigned int *)(*(_QWORD *)(v78 + 16) + v85);
                    v80 = v82;
                  }
                  while (result >= *(_DWORD *)(*(_QWORD *)(v81 + 16) + v85));
                  *v82 = v81;
                }
              }
              v74 = v75 - 1;
            }
            while (v75);
            do
            {
              v86 = 0;
              v87 = *v10;
              v88 = v10;
              do
              {
                v89 = &v88[v86];
                v92 = v89[1];
                v90 = v89 + 1;
                v91 = v92;
                v93 = (2 * v86) | 1;
                v94 = 2 * v86 + 2;
                if (v94 < v12)
                {
                  v95 = 8 * *(int *)(*(_QWORD *)a3 + 20);
                  v96 = *(_DWORD *)(*(_QWORD *)(v91 + 16) + v95);
                  result = (uint64_t *)*(unsigned int *)(*(_QWORD *)(v90[1] + 16) + v95);
                  if (v96 < result)
                  {
                    v91 = v90[1];
                    ++v90;
                    v93 = v94;
                  }
                }
                *v88 = v91;
                v88 = v90;
                v86 = v93;
              }
              while (v93 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
              if (v90 == --a2)
              {
                *v90 = v87;
              }
              else
              {
                *v90 = *a2;
                *a2 = v87;
                v97 = (char *)v90 - (char *)v10 + 8;
                if (v97 >= 9)
                {
                  v98 = (((unint64_t)v97 >> 3) - 2) >> 1;
                  v99 = &v10[v98];
                  v100 = *v99;
                  v101 = *v90;
                  v102 = 8 * *(int *)(*(_QWORD *)a3 + 20);
                  if (*(_DWORD *)(*(_QWORD *)(*v99 + 16) + v102) < *(_DWORD *)(*(_QWORD *)(*v90 + 16) + v102))
                  {
                    do
                    {
                      v103 = v99;
                      *v90 = v100;
                      if (!v98)
                        break;
                      v98 = (v98 - 1) >> 1;
                      v99 = &v10[v98];
                      v100 = *v99;
                      v104 = 8 * *(int *)(*(_QWORD *)a3 + 20);
                      v105 = *(_DWORD *)(*(_QWORD *)(*v99 + 16) + v104);
                      v106 = *(_DWORD *)(*(_QWORD *)(v101 + 16) + v104);
                      v90 = v103;
                    }
                    while (v105 < v106);
                    *v103 = v101;
                  }
                }
              }
            }
            while (v12-- > 2);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v10[(unint64_t)v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          result = sub_1C54B2458(&v9[(unint64_t)v12 >> 1], v9, a2 - 1, a3);
        }
        else
        {
          sub_1C54B2458(v9, &v9[(unint64_t)v12 >> 1], a2 - 1, a3);
          sub_1C54B2458(v9 + 1, v14 - 1, a2 - 2, a3);
          sub_1C54B2458(v9 + 2, &v9[v13 + 1], a2 - 3, a3);
          result = sub_1C54B2458(v14 - 1, v14, &v9[v13 + 1], a3);
          v15 = *v9;
          *v9 = *v14;
          *v14 = v15;
        }
        --a4;
        v16 = *v9;
        v17 = *(_QWORD *)a3;
        if ((a5 & 1) == 0)
        {
          v18 = *(int *)(v17 + 20);
          v20 = 8 * v18;
          v19 = *(_DWORD *)(*(_QWORD *)(v16 + 16) + 8 * v18);
          if (*(_DWORD *)(*(_QWORD *)(*(v9 - 1) + 16) + 8 * v18) < v19)
            goto LABEL_12;
          if (v19 >= *(_DWORD *)(*(_QWORD *)(*(a2 - 1) + 16) + 8 * v18))
          {
            v36 = v9 + 1;
            do
            {
              v10 = v36;
              if (v36 >= a2)
                break;
              ++v36;
            }
            while (v19 >= *(_DWORD *)(*(_QWORD *)(*v10 + 16) + v20));
          }
          else
          {
            v10 = v9;
            do
            {
              v35 = v10[1];
              ++v10;
            }
            while (v19 >= *(_DWORD *)(*(_QWORD *)(v35 + 16) + 8 * v18));
          }
          v37 = a2;
          if (v10 < a2)
          {
            v37 = a2;
            do
              v38 = *--v37;
            while (v19 < *(_DWORD *)(*(_QWORD *)(v38 + 16) + v20));
          }
          if (v10 < v37)
          {
            v39 = *v10;
            v40 = *v37;
            do
            {
              *v10 = v40;
              *v37 = v39;
              v41 = *(_DWORD *)(*(_QWORD *)(v16 + 16) + 8 * *(int *)(*(_QWORD *)a3 + 20));
              do
              {
                v42 = v10[1];
                ++v10;
                v39 = v42;
              }
              while (v41 >= *(_DWORD *)(*(_QWORD *)(v42 + 16) + 8 * *(int *)(*(_QWORD *)a3 + 20)));
              do
              {
                v43 = *--v37;
                v40 = v43;
              }
              while (v41 < *(_DWORD *)(*(_QWORD *)(v43 + 16) + 8 * *(int *)(*(_QWORD *)a3 + 20)));
            }
            while (v10 < v37);
          }
          v44 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v44;
          a5 = 0;
          *v44 = v16;
          continue;
        }
        v18 = *(int *)(v17 + 20);
        v19 = *(_DWORD *)(*(_QWORD *)(v16 + 16) + 8 * v18);
LABEL_12:
        v21 = 0;
        do
        {
          v22 = v9[v21 + 1];
          v23 = 8 * v18;
          ++v21;
        }
        while (*(_DWORD *)(*(_QWORD *)(v22 + 16) + 8 * v18) < v19);
        v24 = &v9[v21];
        v25 = a2;
        if (v21 == 1)
        {
          v25 = a2;
          do
          {
            if (v24 >= v25)
              break;
            v27 = *--v25;
          }
          while (*(_DWORD *)(*(_QWORD *)(v27 + 16) + v23) >= v19);
        }
        else
        {
          do
            v26 = *--v25;
          while (*(_DWORD *)(*(_QWORD *)(v26 + 16) + v23) >= v19);
        }
        if (v24 >= v25)
        {
          v10 = &v9[v21];
        }
        else
        {
          v28 = *v25;
          v10 = &v9[v21];
          v29 = v25;
          do
          {
            *v10 = v28;
            *v29 = v22;
            v30 = *(_DWORD *)(*(_QWORD *)(v16 + 16) + 8 * *(int *)(*(_QWORD *)a3 + 20));
            do
            {
              v31 = v10[1];
              ++v10;
              v22 = v31;
            }
            while (*(_DWORD *)(*(_QWORD *)(v31 + 16) + 8 * *(int *)(*(_QWORD *)a3 + 20)) < v30);
            do
            {
              v32 = *--v29;
              v28 = v32;
            }
            while (*(_DWORD *)(*(_QWORD *)(v32 + 16) + 8 * *(int *)(*(_QWORD *)a3 + 20)) >= v30);
          }
          while (v10 < v29);
        }
        v33 = v10 - 1;
        if (v10 - 1 != v9)
          *v9 = *v33;
        *v33 = v16;
        if (v24 < v25)
        {
LABEL_33:
          result = (uint64_t *)sub_1C54B1B60(v9, v10 - 1, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v34 = sub_1C54B2524(v9, v10 - 1, a3);
        result = (uint64_t *)sub_1C54B2524(v10, a2, a3);
        if (!(_DWORD)result)
        {
          if (v34)
            continue;
          goto LABEL_33;
        }
        a2 = v10 - 1;
        if (!v34)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C54B2458(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a2;
  v5 = *result;
  v6 = 8 * *(int *)(*(_QWORD *)a4 + 20);
  v7 = *(_DWORD *)(*(_QWORD *)(*a2 + 16) + v6);
  v8 = *(_DWORD *)(*(_QWORD *)(*result + 16) + v6);
  v9 = *a3;
  v10 = *(_DWORD *)(*(_QWORD *)(*a3 + 16) + v6);
  if (v7 >= v8)
  {
    if (v10 < v7)
    {
      *a2 = v9;
      *a3 = v4;
      v11 = *result;
      v12 = 8 * *(int *)(*(_QWORD *)a4 + 20);
      if (*(_DWORD *)(*(_QWORD *)(*a2 + 16) + v12) < *(_DWORD *)(*(_QWORD *)(*result + 16) + v12))
      {
        *result = *a2;
        *a2 = v11;
      }
    }
  }
  else
  {
    if (v10 >= v7)
    {
      *result = v4;
      *a2 = v5;
      v13 = 8 * *(int *)(*(_QWORD *)a4 + 20);
      if (*(_DWORD *)(*(_QWORD *)(*a3 + 16) + v13) >= *(_DWORD *)(*(_QWORD *)(v5 + 16) + v13))
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v9;
    }
    *a3 = v5;
  }
  return result;
}

BOOL sub_1C54B2524(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      v10 = 8 * *(int *)(*(_QWORD *)a3 + 20);
      if (*(_DWORD *)(*(_QWORD *)(v8 + 16) + v10) < *(_DWORD *)(*(_QWORD *)(*a1 + 16) + v10))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      sub_1C54B2458(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C54B27BC(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v25 = a1 + 1;
      v26 = a1 + 2;
      v27 = a1 + 3;
      sub_1C54B27BC(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v28 = *(a2 - 1);
      v29 = a1[3];
      v30 = 8 * *(int *)(*(_QWORD *)a3 + 20);
      if (*(_DWORD *)(*(_QWORD *)(v28 + 16) + v30) < *(_DWORD *)(*(_QWORD *)(v29 + 16) + v30))
      {
        *v27 = v28;
        *(a2 - 1) = v29;
        v31 = *v27;
        v32 = *v26;
        v33 = 8 * *(int *)(*(_QWORD *)a3 + 20);
        if (*(_DWORD *)(*(_QWORD *)(*v27 + 16) + v33) < *(_DWORD *)(*(_QWORD *)(*v26 + 16) + v33))
        {
          *v26 = v31;
          *v27 = v32;
          v34 = *v25;
          v35 = 8 * *(int *)(*(_QWORD *)a3 + 20);
          if (*(_DWORD *)(*(_QWORD *)(v31 + 16) + v35) < *(_DWORD *)(*(_QWORD *)(*v25 + 16) + v35))
          {
            a1[1] = v31;
            a1[2] = v34;
            v36 = *a1;
            v37 = 8 * *(int *)(*(_QWORD *)a3 + 20);
            if (*(_DWORD *)(*(_QWORD *)(v31 + 16) + v37) < *(_DWORD *)(*(_QWORD *)(*a1 + 16) + v37))
            {
              *a1 = v31;
              a1[1] = v36;
            }
          }
        }
      }
      return 1;
    default:
      v11 = a1 + 2;
      sub_1C54B2458(a1, a1 + 1, a1 + 2, a3);
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = *(_QWORD *)a3;
      v15 = 24;
      break;
  }
  while (1)
  {
    v16 = *v12;
    v17 = *v11;
    if (*(_DWORD *)(*(_QWORD *)(*v12 + 16) + 8 * *(int *)(v14 + 20)) < *(_DWORD *)(*(_QWORD *)(*v11 + 16)
                                                                                    + 8 * *(int *)(v14 + 20)))
      break;
LABEL_15:
    v11 = v12;
    v15 += 8;
    if (++v12 == a2)
      return 1;
  }
  v18 = v15;
  while (1)
  {
    *(uint64_t *)((char *)a1 + v18) = v17;
    v19 = v18 - 8;
    if (v18 == 8)
      break;
    v20 = (char *)a1 + v18;
    v21 = 8 * *(int *)(*(_QWORD *)a3 + 20);
    v22 = *(_DWORD *)(*(_QWORD *)(v16 + 16) + v21);
    v17 = *((_QWORD *)v20 - 2);
    v23 = *(_DWORD *)(*(_QWORD *)(v17 + 16) + v21);
    v18 = v19;
    if (v22 >= v23)
    {
      v24 = (uint64_t *)((char *)a1 + v19);
      goto LABEL_13;
    }
  }
  v24 = a1;
LABEL_13:
  *v24 = v16;
  if (++v13 != 8)
  {
    v14 = *(_QWORD *)a3;
    goto LABEL_15;
  }
  return v12 + 1 == a2;
}

uint64_t *sub_1C54B27BC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = sub_1C54B2458(a1, a2, a3, a5);
  v11 = *a3;
  v12 = 8 * *(int *)(*(_QWORD *)a5 + 20);
  if (*(_DWORD *)(*(_QWORD *)(*a4 + 16) + v12) < *(_DWORD *)(*(_QWORD *)(*a3 + 16) + v12))
  {
    *a3 = *a4;
    *a4 = v11;
    v13 = *a2;
    v14 = 8 * *(int *)(*(_QWORD *)a5 + 20);
    if (*(_DWORD *)(*(_QWORD *)(*a3 + 16) + v14) < *(_DWORD *)(*(_QWORD *)(*a2 + 16) + v14))
    {
      *a2 = *a3;
      *a3 = v13;
      v15 = *a1;
      v16 = 8 * *(int *)(*(_QWORD *)a5 + 20);
      if (*(_DWORD *)(*(_QWORD *)(*a2 + 16) + v16) < *(_DWORD *)(*(_QWORD *)(*a1 + 16) + v16))
      {
        *a1 = *a2;
        *a2 = v15;
      }
    }
  }
  return result;
}

uint64_t llvm::DWARFUnitVector::addUnit(uint64_t a1, char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = *(_QWORD *)a1;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4)
  {
    do
    {
      v5 = v4 >> 1;
      v6 = (uint64_t *)(v3 + 8 * (v4 >> 1));
      v8 = *v6;
      v7 = v6 + 1;
      v4 += ~(v4 >> 1);
      if (*(_QWORD *)(*(_QWORD *)a2 + 24) < *(_QWORD *)(v8 + 24))
        v4 = v5;
      else
        v3 = (unint64_t)v7;
    }
    while (v4);
  }
  return *(_QWORD *)sub_1C54B59B8(a1, v3, a2);
}

uint64_t llvm::DWARFUnit::DWARFUnit(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char a15, uint64_t a16)
{
  __int128 v17;
  __int128 v18;
  __int128 v19;

  *(_QWORD *)a1 = off_1E816A478;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_OWORD *)(a1 + 24) = *a4;
  v17 = a4[1];
  v18 = a4[2];
  v19 = a4[3];
  *(_OWORD *)(a1 + 88) = a4[4];
  *(_OWORD *)(a1 + 72) = v19;
  *(_OWORD *)(a1 + 56) = v18;
  *(_OWORD *)(a1 + 40) = v17;
  *(_QWORD *)(a1 + 104) = a5;
  *(_QWORD *)(a1 + 112) = a6;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = a13;
  *(_QWORD *)(a1 + 152) = a9;
  *(_QWORD *)(a1 + 160) = a10;
  *(_QWORD *)(a1 + 168) = a11;
  *(_QWORD *)(a1 + 176) = a12;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 208) = a14;
  *(_BYTE *)(a1 + 209) = a15;
  *(_QWORD *)(a1 + 216) = a16;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = a1 + 320;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  llvm::DWARFUnit::clear((llvm::DWARFUnit *)a1);
  return a1;
}

void llvm::DWARFUnit::clear(llvm::DWARFUnit *this)
{
  _QWORD *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *((_QWORD *)this + 32) = 0;
  if (*((_BYTE *)this + 280))
    *((_BYTE *)this + 280) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_BYTE *)this + 192) = 0;
  *((_BYTE *)this + 200) = 0;
  *((_QWORD *)this + 23) = 0;
  v2 = (_QWORD *)((char *)this + 288);
  v3 = (void *)*((_QWORD *)this + 36);
  if (v3)
  {
    *((_QWORD *)this + 37) = v3;
    operator delete(v3);
  }
  *v2 = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void llvm::DWARFUnit::getStringOffsetSectionItem(llvm::DWARFUnit *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  BOOL v5;
  uint64_t v6;
  int v7;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v17;
  unsigned __int8 v18;
  unint64_t RelocatedValue;
  _QWORD v20[4];
  __int16 v21;
  unint64_t v22;
  _QWORD v23[2];
  const char *v24;
  uint64_t v25;
  _QWORD *v26;

  if (!*((_BYTE *)this + 248))
  {
    if (!atomic_load(qword_1ED836B58))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
    v13 = qword_1ED836B58[0];
    v14 = (_QWORD *)operator new();
    v15 = v14;
    v23[0] = "DW_FORM_strx used without a valid string offsets table";
    LOWORD(v26) = 259;
    goto LABEL_17;
  }
  v5 = *((_BYTE *)this + 243) == 0;
  v6 = 8;
  if (*((_BYTE *)this + 243))
    v7 = 8;
  else
    v7 = 4;
  if (*((_BYTE *)this + 243))
    v8 = 3;
  else
    v8 = 2;
  v9 = *((_QWORD *)this + 28) + (a2 << v8);
  v22 = v9;
  v10 = (_QWORD *)*((_QWORD *)this + 21);
  v11 = v10[1];
  if (v5)
    v6 = 4;
  if (v11 < v9 + v6)
  {
    v20[0] = "DW_FORM_strx uses index ";
    v20[2] = a2;
    v21 = 2051;
    v23[0] = v20;
    v24 = ", which is too large";
    LOWORD(v26) = 770;
    if (!atomic_load(qword_1ED836B58))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
    v13 = qword_1ED836B58[0];
    v14 = (_QWORD *)operator new();
    v15 = v14;
LABEL_17:
    *v14 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v23, v14 + 1);
    v15[4] = 3;
    v15[5] = v13;
    *((_BYTE *)v15 + 48) = 1;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v15;
    return;
  }
  v17 = *(_QWORD *)(*((_QWORD *)this + 1) + 520);
  v18 = *((_BYTE *)this + 208);
  v23[0] = *v10;
  v23[1] = v11;
  LOWORD(v24) = v18;
  v25 = v17;
  v26 = v10;
  RelocatedValue = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)v23, v7, &v22, 0, 0);
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_QWORD *)a3 = RelocatedValue;
}

void sub_1C54B2C40(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void (**v14)(llvm::raw_ostream *__hidden);
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  void **v22;
  void *__p[2];
  uint64_t v24;
  _QWORD v25[4];
  uint64_t v26;

  __p[0] = 0;
  __p[1] = 0;
  v24 = 0;
  v15 = 0;
  v19 = 0;
  v20 = 0;
  v14 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v22 = __p;
  v21 = 0;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v9 = *a4;
  v10 = *a5;
  v11 = *a6;
  v25[0] = &off_1E816A4E8;
  v25[1] = "DWARF unit from offset 0x%8.8llx incl. to offset  0x%8.8llx excl. extends past section size 0x%8.8zx";
  v25[2] = v9;
  v25[3] = v10;
  v26 = v11;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v14, (uint64_t)v25);
  v12 = v22;
  v13 = operator new();
  LOWORD(v26) = 260;
  v25[0] = v12;
  *(_QWORD *)v13 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v25, (_QWORD *)(v13 + 8));
  *(_QWORD *)(v13 + 32) = a2;
  *(_QWORD *)(v13 + 40) = a3;
  *(_BYTE *)(v13 + 48) = 1;
  *a1 = v13;
  v14 = off_1E81A6E70;
  if (v21 == 1 && v16)
    MEMORY[0x1CAA32F9C](v16, 0x1000C8077774924);
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
}

void sub_1C54B2D8C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, __int16 *a5, int *a6)
{
  uint64_t v9;
  __int16 v10;
  int v11;
  void **v12;
  uint64_t v13;
  void (**v14)(llvm::raw_ostream *__hidden);
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  void **v22;
  void *__p[2];
  uint64_t v24;
  _QWORD v25[3];
  __int16 v26;
  int v27;
  __int16 v28;

  __p[0] = 0;
  __p[1] = 0;
  v24 = 0;
  v15 = 0;
  v19 = 0;
  v20 = 0;
  v14 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v22 = __p;
  v21 = 0;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v9 = *a4;
  v10 = *a5;
  v11 = *a6;
  v25[0] = &off_1E816A508;
  v25[1] = "DWARF unit at offset 0x%8.8llx has unsupported version %hu, supported are 2-%u";
  v25[2] = v9;
  v26 = v10;
  v27 = v11;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v14, (uint64_t)v25);
  v12 = v22;
  v13 = operator new();
  v28 = 260;
  v25[0] = v12;
  *(_QWORD *)v13 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v25, (_QWORD *)(v13 + 8));
  *(_QWORD *)(v13 + 32) = a2;
  *(_QWORD *)(v13 + 40) = a3;
  *(_BYTE *)(v13 + 48) = 1;
  *a1 = v13;
  v14 = off_1E81A6E70;
  if (v21 == 1 && v16)
    MEMORY[0x1CAA32F9C](v16, 0x1000C8077774924);
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
}

void sub_1C54B2EDC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  void (**v12)(llvm::raw_ostream *__hidden);
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  void **v20;
  void *__p[2];
  uint64_t v22;
  _QWORD v23[4];
  __int16 v24;

  __p[0] = 0;
  __p[1] = 0;
  v22 = 0;
  v13 = 0;
  v17 = 0;
  v18 = 0;
  v12 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v20 = __p;
  v19 = 0;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v8 = *a4;
  v9 = *a5;
  v23[0] = &unk_1E8169BA8;
  v23[1] = "DWARF type unit at offset 0x%8.8llx has its relocated type_offset 0x%8.8llx pointing inside the header";
  v23[2] = v8;
  v23[3] = v9;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v12, (uint64_t)v23);
  v10 = v20;
  v11 = operator new();
  v24 = 260;
  v23[0] = v10;
  *(_QWORD *)v11 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v23, (_QWORD *)(v11 + 8));
  *(_QWORD *)(v11 + 32) = a2;
  *(_QWORD *)(v11 + 40) = a3;
  *(_BYTE *)(v11 + 48) = 1;
  *a1 = v11;
  v12 = off_1E81A6E70;
  if (v19 == 1 && v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8077774924);
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
}

void sub_1C54B3024(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void (**v14)(llvm::raw_ostream *__hidden);
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  void **v22;
  void *__p[2];
  uint64_t v24;
  _QWORD v25[4];
  uint64_t v26;

  __p[0] = 0;
  __p[1] = 0;
  v24 = 0;
  v15 = 0;
  v19 = 0;
  v20 = 0;
  v14 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v22 = __p;
  v21 = 0;
  v18 = 0;
  v16 = 0;
  v17 = 0;
  v9 = *a4;
  v10 = *a5;
  v11 = *a6;
  v25[0] = &unk_1E8169E08;
  v25[1] = "DWARF type unit from offset 0x%8.8llx incl. to offset 0x%8.8llx excl. has its relocated type_offset 0x%8.8llx"
           " pointing past the unit end";
  v25[2] = v9;
  v25[3] = v10;
  v26 = v11;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v14, (uint64_t)v25);
  v12 = v22;
  v13 = operator new();
  LOWORD(v26) = 260;
  v25[0] = v12;
  *(_QWORD *)v13 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v25, (_QWORD *)(v13 + 8));
  *(_QWORD *)(v13 + 32) = a2;
  *(_QWORD *)(v13 + 40) = a3;
  *(_BYTE *)(v13 + 48) = 1;
  *a1 = v13;
  v14 = off_1E81A6E70;
  if (v21 == 1 && v16)
    MEMORY[0x1CAA32F9C](v16, 0x1000C8077774924);
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
}

uint64_t llvm::DWARFUnitHeader::applyIndexEntry(uint64_t a1, _QWORD *a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;

  *(_QWORD *)(a1 + 32) = a2;
  if (*(_QWORD *)(a1 + 24))
    return 0;
  v3 = (unsigned int *)a2[2];
  if (!v3)
    return 0;
  v4 = *a2;
  v5 = 12;
  if (!*(_BYTE *)(a1 + 11))
    v5 = 4;
  if (v5 + *(_QWORD *)(a1 + 16) != v3[2 * *(int *)(*a2 + 20) + 1])
    return 0;
  v6 = *(unsigned int *)(v4 + 4);
  if (!(_DWORD)v6)
    return 0;
  v7 = *(int **)(v4 + 24);
  while (1)
  {
    v8 = *v7++;
    if (v8 == 3)
      break;
    v3 += 2;
    if (!--v6)
      return 0;
  }
  *(_QWORD *)(a1 + 24) = *v3;
  return 1;
}

void llvm::DWARFUnit::extractRangeList(llvm::DWARFUnit *this@<X0>, llvm::DWARFDebugRangeList *a2@<X2>, uint64_t a3@<X1>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  char v5;
  char v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  char v11;
  char v12;
  uint64_t v13;
  _OWORD *v14;

  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 520);
  v5 = *((_BYTE *)this + 208);
  v6 = *((_BYTE *)this + 34);
  v7 = (_OWORD *)*((_QWORD *)this + 14);
  v8 = *((_QWORD *)this + 15);
  v10 = *v7;
  v11 = v5;
  v12 = v6;
  v13 = v4;
  v14 = v7;
  v9 = v8 + a3;
  llvm::DWARFDebugRangeList::extract(a2, (const llvm::DWARFDataExtractor *)&v10, &v9, a4);
}

void llvm::DWARFUnit::clearDIEs(llvm::DWARFUnit *this, int a2)
{
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  __int128 v8;
  uint64_t v9;

  v3 = (_QWORD *)*((_QWORD *)this + 36);
  if (a2 && v3 != *((_QWORD **)this + 37))
  {
    v8 = *(_OWORD *)v3;
    v9 = v3[2];
    v4 = operator new(0x18uLL);
    v5 = (char *)(v4 + 3);
    *(_OWORD *)v4 = v8;
    v4[2] = v9;
LABEL_5:
    *((_QWORD *)this + 37) = v3;
    operator delete(v3);
    v6 = v5;
    v7 = v4;
    goto LABEL_6;
  }
  v5 = 0;
  v4 = 0;
  v6 = 0;
  v7 = 0;
  if (v3)
    goto LABEL_5;
LABEL_6:
  *((_QWORD *)this + 36) = v7;
  *((_QWORD *)this + 37) = v6;
  *((_QWORD *)this + 38) = v6;
}

void llvm::DWARFUnit::extractDIEsToVector(uint64_t a1, int a2, int a3, char **a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  char v10;
  char v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char v17;
  unsigned int v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  char *v24;
  unint64_t v25;
  char *v26;
  __int128 v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  __int128 v44;
  char *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  __int128 v54;
  int v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  int v69;
  char *__p;
  char *v71;
  char *v72;
  unint64_t v75;
  char *v77;
  __int128 v78;
  char v79;
  char v80;
  uint64_t v81;
  _OWORD *v82;
  __int128 v83;
  uint64_t v84;
  unint64_t v85;

  if ((a2 & 1) != 0 || a3)
  {
    v5 = *(_QWORD *)(a1 + 24);
    v85 = v5 + *(unsigned __int8 *)(a1 + 97);
    v6 = *(_QWORD *)(a1 + 40) + v5;
    v7 = 12;
    if (!*(_BYTE *)(a1 + 35))
      v7 = 4;
    v75 = v6 + v7;
    *(_QWORD *)&v83 = 0;
    *((_QWORD *)&v83 + 1) = 0xFFFFFFFFLL;
    v84 = 0;
    v8 = *(_OWORD **)(a1 + 16);
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 520);
    v10 = *(_BYTE *)(a1 + 208);
    v11 = *(_BYTE *)(a1 + 34);
    v78 = *v8;
    v79 = v10;
    v80 = v11;
    v81 = v9;
    v82 = v8;
    v12 = (char *)operator new(4uLL);
    *(_DWORD *)v12 = -1;
    v13 = v12 + 4;
    if ((a2 & 1) == 0)
    {
      v14 = (char *)operator new(8uLL);
      *(_QWORD *)v14 = 0xFFFFFFFFLL;
      v13 = v14 + 8;
      operator delete(v12);
      v12 = v14;
    }
    v15 = (char *)operator new(4uLL);
    *(_DWORD *)v15 = 0;
    v16 = v15 + 4;
    v17 = 1;
    __p = v15;
    v71 = v15 + 4;
    v72 = v13;
    while (llvm::DWARFDebugInfoEntry::extractFast((llvm::DWARFDebugInfoEntry *)&v83, (const llvm::DWARFUnit *)a1, &v85, (const llvm::DWARFDataExtractor *)&v78, v75, *((_DWORD *)v13 - 1)))
    {
      v18 = *((_DWORD *)v16 - 1);
      if (v18)
        *(_DWORD *)&(*a4)[24 * v18 + 12] = -1431655765 * ((unint64_t)(a4[1] - *a4) >> 3);
      v77 = v12;
      if ((v17 & 1) != 0)
      {
        if (a2)
        {
          v26 = a4[1];
          v25 = (unint64_t)a4[2];
          if ((unint64_t)v26 >= v25)
          {
            v33 = *a4;
            v34 = 0xAAAAAAAAAAAAAAABLL * ((v26 - *a4) >> 3);
            v35 = v34 + 1;
            if (v34 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_113;
            v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (_QWORD)v33) >> 3);
            if (2 * v36 > v35)
              v35 = 2 * v36;
            if (v36 >= 0x555555555555555)
              v37 = 0xAAAAAAAAAAAAAAALL;
            else
              v37 = v35;
            if (v37)
            {
              if (v37 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_114;
              v38 = (char *)operator new(24 * v37);
            }
            else
            {
              v38 = 0;
            }
            v42 = &v38[24 * v34];
            *(_OWORD *)v42 = v83;
            *((_QWORD *)v42 + 2) = v84;
            v43 = v42;
            if (v26 != v33)
            {
              do
              {
                v44 = *(_OWORD *)(v26 - 24);
                *((_QWORD *)v43 - 1) = *((_QWORD *)v26 - 1);
                *(_OWORD *)(v43 - 24) = v44;
                v43 -= 24;
                v26 -= 24;
              }
              while (v26 != v33);
              v26 = *a4;
            }
            v28 = v42 + 24;
            *a4 = v43;
            a4[1] = v42 + 24;
            a4[2] = &v38[24 * v37];
            if (v26)
              operator delete(v26);
          }
          else
          {
            v27 = v83;
            *((_QWORD *)v26 + 2) = v84;
            *(_OWORD *)v26 = v27;
            v28 = v26 + 24;
          }
          a4[1] = v28;
        }
        if (!a3)
        {
          v12 = v77;
          break;
        }
        v46 = *a4;
        v45 = a4[1];
        v47 = 0xAAAAAAAAAAAAAAABLL * ((v45 - *a4) >> 3);
        v48 = 4;
        if (*(_BYTE *)(a1 + 35))
          v48 = 12;
        v49 = v47 + (v48 + *(_QWORD *)(a1 + 40) - (unint64_t)*(unsigned __int8 *)(a1 + 97)) / 0xE;
        if (0xAAAAAAAAAAAAAAABLL * ((a4[2] - v46) >> 3) < v49)
        {
          if (v49 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_113;
          v50 = 3 * v49;
          v51 = (char *)operator new(24 * v49);
          v52 = &v51[24 * v47];
          if (v45 != v46)
          {
            v53 = &v51[24 * v47];
            do
            {
              v54 = *(_OWORD *)(v45 - 24);
              v52 = v53 - 24;
              *((_QWORD *)v53 - 1) = *((_QWORD *)v45 - 1);
              *(_OWORD *)(v53 - 24) = v54;
              v45 -= 24;
              v53 -= 24;
            }
            while (v45 != v46);
          }
          *a4 = v52;
          a4[1] = &v51[24 * v47];
          a4[2] = &v51[8 * v50];
          if (v46)
            operator delete(v46);
        }
      }
      else
      {
        v20 = *a4;
        v19 = a4[1];
        v21 = (v19 - *a4) / 24;
        *((_DWORD *)v16 - 1) = v21;
        v22 = (unint64_t)a4[2];
        if ((unint64_t)v19 >= v22)
        {
          v29 = v21 + 1;
          if ((unint64_t)(v21 + 1) > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_113;
          v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (_QWORD)v20) >> 3);
          if (2 * v30 > v29)
            v29 = 2 * v30;
          if (v30 >= 0x555555555555555)
            v31 = 0xAAAAAAAAAAAAAAALL;
          else
            v31 = v29;
          if (v31)
          {
            if (v31 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_114;
            v32 = (char *)operator new(24 * v31);
          }
          else
          {
            v32 = 0;
          }
          v39 = &v32[24 * v21];
          *(_OWORD *)v39 = v83;
          *((_QWORD *)v39 + 2) = v84;
          v40 = v39;
          if (v19 != v20)
          {
            do
            {
              v41 = *(_OWORD *)(v19 - 24);
              *((_QWORD *)v40 - 1) = *((_QWORD *)v19 - 1);
              *(_OWORD *)(v40 - 24) = v41;
              v40 -= 24;
              v19 -= 24;
            }
            while (v19 != v20);
            v19 = *a4;
          }
          v24 = v39 + 24;
          *a4 = v40;
          a4[1] = v39 + 24;
          a4[2] = &v32[24 * v31];
          if (v19)
            operator delete(v19);
        }
        else
        {
          v23 = v83;
          *((_QWORD *)v19 + 2) = v84;
          *(_OWORD *)v19 = v23;
          v24 = v19 + 24;
        }
        a4[1] = v24;
      }
      if (v84)
      {
        v12 = v77;
        if (*(_BYTE *)(v84 + 7))
        {
          if ((v17 & 1) == 0 || a2)
          {
            v55 = -1 - 1431655765 * ((unint64_t)(a4[1] - *a4) >> 3);
            if (v13 >= v72)
            {
              v57 = (v13 - v77) >> 2;
              v58 = v57 + 1;
              if ((unint64_t)(v57 + 1) >> 62)
                goto LABEL_113;
              if ((v72 - v77) >> 1 > v58)
                v58 = (v72 - v77) >> 1;
              if ((unint64_t)(v72 - v77) >= 0x7FFFFFFFFFFFFFFCLL)
                v59 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v59 = v58;
              if (v59)
              {
                if (v59 >> 62)
                  goto LABEL_114;
                v60 = (char *)operator new(4 * v59);
              }
              else
              {
                v60 = 0;
              }
              v61 = &v60[4 * v57];
              *(_DWORD *)v61 = v55;
              v56 = v61 + 4;
              while (v13 != v77)
              {
                v62 = *((_DWORD *)v13 - 1);
                v13 -= 4;
                *((_DWORD *)v61 - 1) = v62;
                v61 -= 4;
              }
              v72 = &v60[4 * v59];
              if (v77)
                operator delete(v77);
              v12 = v61;
            }
            else
            {
              *(_DWORD *)v13 = v55;
              v56 = v13 + 4;
            }
            if (v16 >= v71)
            {
              v63 = (v16 - __p) >> 2;
              v64 = v63 + 1;
              if ((unint64_t)(v63 + 1) >> 62)
LABEL_113:
                abort();
              if ((v71 - __p) >> 1 > v64)
                v64 = (v71 - __p) >> 1;
              if ((unint64_t)(v71 - __p) >= 0x7FFFFFFFFFFFFFFCLL)
                v65 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v65 = v64;
              if (v65)
              {
                if (v65 >> 62)
LABEL_114:
                  sub_1C4764EE4();
                v66 = (char *)operator new(4 * v65);
              }
              else
              {
                v66 = 0;
              }
              v67 = &v66[4 * v63];
              *(_DWORD *)v67 = 0;
              v68 = v67 + 4;
              while (v16 != __p)
              {
                v69 = *((_DWORD *)v16 - 1);
                v16 -= 4;
                *((_DWORD *)v67 - 1) = v69;
                v67 -= 4;
              }
              v71 = &v66[4 * v65];
              if (__p)
                operator delete(__p);
              __p = v67;
              v16 = v68;
            }
            else
            {
              *(_DWORD *)v16 = 0;
              v16 += 4;
            }
            v13 = v56;
          }
        }
        else if ((v17 & 1) != 0)
        {
          break;
        }
      }
      else
      {
        v16 -= 4;
        v13 -= 4;
        v12 = v77;
      }
      if ((v17 & 1) != 0)
        v17 = 0;
      if ((unint64_t)(v13 - v12) <= 4)
        break;
    }
    if (__p)
      operator delete(__p);
    if (v12)
      operator delete(v12);
  }
}

void llvm::DWARFUnit::tryExtractDIEsIfNeeded(llvm::DWARFUnit *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  llvm::DWARFUnit *v7;
  int v8;
  uint64_t v9;
  _OWORD *v10;
  char v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  int v18;
  unint64_t AsUnsignedConstant;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  uint64_t *v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const std::error_category *v67;
  std::string *v68;
  std::string::size_type v69;
  void **v70;
  unsigned int isFormClass;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  char *v78;
  std::string v79;
  void *v80[2];
  std::string::size_type v81;
  void **v82;
  __int16 v83;
  __int128 v84;
  char v85;
  char v86;
  uint64_t v87;
  _OWORD *v88;
  llvm::DWARFUnit *v89[2];
  void *__p[2];
  char v91;
  void **v92;
  uint64_t v93[2];
  _OWORD v94[2];
  char v95;
  char v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) != 0)
  {
    v5 = *((_QWORD *)this + 36);
    if (v5 != *((_QWORD *)this + 37))
    {
LABEL_8:
      *a3 = 0;
      return;
    }
    v6 = *((_QWORD *)this + 36);
  }
  else
  {
    v5 = *((_QWORD *)this + 36);
    v6 = *((_QWORD *)this + 37);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 3) >= 2)
    goto LABEL_8;
  llvm::DWARFUnit::extractDIEsToVector((uint64_t)this, v5 == v6, a2 ^ 1, (char **)this + 36);
  v7 = (llvm::DWARFUnit *)*((_QWORD *)this + 36);
  if (v7 == *((llvm::DWARFUnit **)this + 37) || v5 != v6)
    goto LABEL_8;
  v89[0] = this;
  v89[1] = v7;
  llvm::DWARFDie::find(v89, 8497, v94);
  if (v96)
  {
    AsUnsignedConstant = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v94);
    if (v20)
    {
      v21 = *((unsigned __int8 *)this + 88);
      *((_QWORD *)this + 10) = AsUnsignedConstant;
      if (!v21)
        *((_BYTE *)this + 88) = 1;
    }
  }
  if (*((_BYTE *)this + 209))
  {
    v8 = 1;
  }
  else
  {
    llvm::DWARFDie::find(v89, 115, v94);
    if (v96 && (llvm::DWARFFormValue::isFormClass((unsigned __int16 *)v94, 8) & 1) != 0)
    {
      *((_QWORD *)this + 24) = *((_QWORD *)&v94[0] + 1);
      *((_QWORD *)this + 25) = 1;
    }
    else
    {
      *((_QWORD *)this + 24) = 0;
      *((_QWORD *)this + 25) = 0;
      llvm::DWARFDie::find(v89, 8499, v94);
      if (v96)
      {
        isFormClass = llvm::DWARFFormValue::isFormClass((unsigned __int16 *)v94, 8);
        v65 = *((_QWORD *)&v94[0] + 1);
        v66 = isFormClass;
        if (!isFormClass)
          v65 = 0;
      }
      else
      {
        v65 = 0;
        v66 = 0;
      }
      *((_QWORD *)this + 24) = v65;
      *((_QWORD *)this + 25) = v66;
    }
    llvm::DWARFDie::find(v89, 116, v94);
    if (v96)
    {
      v73 = llvm::DWARFFormValue::isFormClass((unsigned __int16 *)v94, 8);
      v72 = *((_QWORD *)&v94[0] + 1);
      if (!v73)
        v72 = 0;
    }
    else
    {
      v72 = 0;
    }
    *((_QWORD *)this + 15) = v72;
    llvm::DWARFDie::find(v89, 140, v94);
    if (v96)
    {
      v77 = llvm::DWARFFormValue::isFormClass((unsigned __int16 *)v94, 8);
      v74 = *((_QWORD *)&v94[0] + 1);
      if (!v77)
        v74 = 0;
    }
    else
    {
      v74 = 0;
    }
    *((_QWORD *)this + 16) = v74;
    v8 = *((unsigned __int8 *)this + 209);
  }
  v9 = *(_QWORD *)(*((_QWORD *)this + 1) + 520);
  v10 = (_OWORD *)*((_QWORD *)this + 21);
  v11 = *((_BYTE *)this + 208);
  v84 = *v10;
  v85 = v11;
  v86 = 0;
  v87 = v9;
  v88 = v10;
  if (v8)
  {
    llvm::DWARFUnit::determineStringOffsetsTableContributionDWO(this, (llvm::DWARFDataExtractor *)&v84, (uint64_t)v94);
  }
  else
  {
    if (*((unsigned __int16 *)this + 16) <= 4u)
    {
LABEL_38:
      v26 = *((unsigned __int16 *)this + 16);
      if (*((_BYTE *)this + 209))
      {
        v27 = v26 > 4;
        v28 = 264;
        if (v27)
          v28 = 272;
        v29 = (uint64_t *)(*(uint64_t (**)(void))(**(_QWORD **)(*((_QWORD *)this + 1) + 520) + v28))();
        v30 = *v29;
        v31 = v29[1];
        v32 = (_QWORD *)*((_QWORD *)this + 7);
        v33 = *((unsigned __int16 *)this + 16);
        if (v32)
        {
          v34 = v33 <= 4 ? 9 : 5;
          v35 = *(unsigned int *)(*v32 + 4);
          if ((_DWORD)v35)
          {
            v36 = 0;
            v37 = *(int **)(*v32 + 24);
            v38 = 8 * v35;
            while (1)
            {
              v39 = *v37++;
              if (v39 == v34)
                break;
              v36 += 8;
              if (v38 == v36)
                goto LABEL_61;
            }
            v55 = v32[2];
            if (v55)
            {
              v56 = (unsigned int *)(v55 + v36);
              v58 = *v56;
              v57 = v56[1];
              if (v31 < v58)
                v58 = v29[1];
              v30 += v58;
              v59 = v31 - v58;
              if (v59 >= v57)
                v31 = v57;
              else
                v31 = v59;
            }
          }
        }
LABEL_61:
        v60 = *((_BYTE *)this + 208);
        v61 = *((_BYTE *)this + 34);
        v62 = operator new();
        *(_QWORD *)(v62 + 16) = v31;
        *(_BYTE *)(v62 + 24) = v60;
        *(_BYTE *)(v62 + 25) = v61;
        *(_QWORD *)(v62 + 32) = 0;
        *(_QWORD *)(v62 + 40) = 0;
        *(_QWORD *)v62 = &unk_1E816A040;
        *(_QWORD *)(v62 + 8) = v30;
        *(_WORD *)(v62 + 48) = v33;
        v63 = *((_QWORD *)this + 17);
        *((_QWORD *)this + 17) = v62;
        if (v63)
          (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
        v64 = 20;
        if (!*((_BYTE *)this + 35))
          v64 = 12;
        *((_QWORD *)this + 16) = v64;
      }
      else
      {
        v40 = *(uint64_t **)(*((_QWORD *)this + 1) + 520);
        v41 = *v40;
        if (v26 < 5)
        {
          v49 = (uint64_t *)(*(uint64_t (**)(_QWORD))(v41 + 80))(*(_QWORD *)(*((_QWORD *)this + 1) + 520));
          v50 = *((_BYTE *)this + 208);
          v51 = *((_BYTE *)this + 34);
          v52 = *v49;
          v53 = v49[1];
          v48 = operator new();
          *(_QWORD *)(v48 + 16) = v53;
          *(_BYTE *)(v48 + 24) = v50;
          *(_BYTE *)(v48 + 25) = v51;
          *(_QWORD *)(v48 + 32) = v40;
          *(_QWORD *)(v48 + 40) = v49;
          *(_QWORD *)v48 = &unk_1E816A070;
          *(_QWORD *)(v48 + 8) = v52;
          *(_QWORD *)(v48 + 48) = v48 + 64;
          *(_QWORD *)(v48 + 56) = 0x400000000;
        }
        else
        {
          v42 = (uint64_t *)(*(uint64_t (**)(_QWORD))(v41 + 88))(*(_QWORD *)(*((_QWORD *)this + 1) + 520));
          v43 = *((_BYTE *)this + 208);
          v44 = *((_BYTE *)this + 34);
          v45 = *v42;
          v46 = v42[1];
          v47 = *((_WORD *)this + 16);
          v48 = operator new();
          *(_QWORD *)(v48 + 16) = v46;
          *(_BYTE *)(v48 + 24) = v43;
          *(_BYTE *)(v48 + 25) = v44;
          *(_QWORD *)(v48 + 32) = v40;
          *(_QWORD *)(v48 + 40) = v42;
          *(_QWORD *)v48 = &unk_1E816A040;
          *(_QWORD *)(v48 + 8) = v45;
          *(_WORD *)(v48 + 48) = v47;
        }
        v54 = *((_QWORD *)this + 17);
        *((_QWORD *)this + 17) = v48;
        if (v54)
          (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
      }
      goto LABEL_8;
    }
    llvm::DWARFUnit::determineStringOffsetsTableContribution((llvm::DWARFUnit **)this, (llvm::DWARFDataExtractor *)&v84, (uint64_t)v94);
  }
  if ((v95 & 1) == 0)
  {
    v12 = v94[1];
    *((_OWORD *)this + 14) = v94[0];
    *((_OWORD *)this + 15) = v12;
    if (*((unsigned __int16 *)this + 16) >= 5u)
    {
      if (*((_BYTE *)this + 209))
      {
        v13 = (_QWORD *)*((_QWORD *)this + 7);
        if (!v13)
          goto LABEL_34;
        v14 = *(unsigned int *)(*v13 + 4);
        if (!(_DWORD)v14)
          goto LABEL_34;
        v15 = 0;
        v16 = *(int **)(*v13 + 24);
        v17 = 8 * v14;
        while (1)
        {
          v18 = *v16++;
          if (v18 == 8)
            break;
          v15 += 8;
          if (v17 == v15)
            goto LABEL_34;
        }
        v22 = v13[2];
        if (v22)
          v23 = *(unsigned int *)(v22 + v15);
        else
LABEL_34:
          v23 = 0;
        v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 520) + 304))(*(_QWORD *)(*((_QWORD *)this + 1) + 520));
        v25 = 20;
        if (!*((_BYTE *)this + 35))
          v25 = 12;
        *((_QWORD *)this + 14) = v24;
        *((_QWORD *)this + 15) = v25 + v23;
      }
      else
      {
        v75 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 520) + 152))(*(_QWORD *)(*((_QWORD *)this + 1) + 520));
        llvm::DWARFDie::find(v89, 116, v94);
        if (*((_BYTE *)this + 35))
          v76 = 20;
        else
          v76 = 12;
        if (v96 && llvm::DWARFFormValue::isFormClass((unsigned __int16 *)v94, 8))
          v76 = *((_QWORD *)&v94[0] + 1);
        *((_QWORD *)this + 14) = v75;
        *((_QWORD *)this + 15) = v76;
      }
    }
    goto LABEL_38;
  }
  v67 = std::generic_category();
  v78 = *(char **)&v94[0];
  sub_1C61D2548(&v78, &v79);
  v68 = std::string::insert(&v79, 0, "invalid reference to or invalid content in .debug_str_offsets[.dwo]: ");
  v69 = v68->__r_.__value_.__r.__words[2];
  *(_OWORD *)v80 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
  v81 = v69;
  v68->__r_.__value_.__l.__size_ = 0;
  v68->__r_.__value_.__r.__words[2] = 0;
  v68->__r_.__value_.__r.__words[0] = 0;
  v83 = 260;
  v82 = v80;
  llvm::Twine::str((llvm::Twine *)&v82, __p);
  if (v91 >= 0)
    v70 = __p;
  else
    v70 = (void **)__p[0];
  v93[0] = 22;
  v93[1] = (uint64_t)v67;
  v92 = v70;
  sub_1C5DF1730((_BYTE **)&v92, v93, a3);
  if (v91 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v81) < 0)
    operator delete(v80[0]);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (v78)
    (*(void (**)(char *))(*(_QWORD *)v78 + 8))(v78);
}

void llvm::DWARFUnit::determineStringOffsetsTableContribution(llvm::DWARFUnit **this@<X0>, llvm::DWARFDataExtractor *a2@<X1>, uint64_t a3@<X8>)
{
  llvm::DWARFUnit *v6;
  llvm::DWARFUnit *v7;
  BOOL v8;
  llvm::DWARFUnit *v9;
  uint64_t v10;
  llvm::DWARFUnit *v11[2];
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  llvm::DWARFUnit::extractDIEsIfNeeded((llvm::DWARFUnit *)this, 1);
  v6 = this[36];
  v7 = this[37];
  v8 = v6 == v7;
  if (v6 == v7)
    v9 = 0;
  else
    v9 = (llvm::DWARFUnit *)this;
  if (v8)
    v6 = 0;
  v11[0] = v9;
  v11[1] = v6;
  llvm::DWARFDie::find(v11, 114, &v12);
  if (v15 && (llvm::DWARFFormValue::isFormClass((unsigned __int16 *)&v12, 8) & 1) != 0)
  {
    sub_1C54B5418((uint64_t)&v12, a2, *((unsigned __int8 *)this + 35), *((unint64_t *)&v12 + 1));
    if ((v14 & 1) != 0)
    {
      v10 = v12;
      *(_BYTE *)(a3 + 32) |= 1u;
      *(_QWORD *)a3 = v10;
    }
    else
    {
      *(_BYTE *)(a3 + 32) &= ~1u;
      *(_OWORD *)a3 = v12;
      *(_QWORD *)(a3 + 16) = v13;
      *(_BYTE *)(a3 + 24) = 1;
    }
  }
  else
  {
    *(_BYTE *)(a3 + 32) &= ~1u;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
  }
}

uint64_t llvm::DWARFUnit::parseDWO(llvm::DWARFUnit *this)
{
  uint64_t v2;
  llvm::DWARFUnit *v4;
  llvm::DWARFUnit *v5;
  BOOL v6;
  llvm::DWARFUnit *v7;
  int v9;
  char *v10;
  char v11;
  llvm::DWARFContext *v12;
  char *v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  llvm::DWARFUnit *DWOCompileUnitForHash;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t RangesBaseAttribute;
  uint64_t v31;
  char v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  void **v37[4];
  __int16 v38;
  _QWORD *v39[4];
  __int16 v40;
  _QWORD *v41[4];
  __int16 v42;
  llvm::DWARFContext *v43;
  std::__shared_weak_count *v44;
  char v45;
  char v46;
  llvm::DWARFUnit *v47[2];
  unsigned __int8 *v48;
  __int128 v49;
  _QWORD v50[5];

  v50[4] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 209) || *((_QWORD *)this + 42))
    return 0;
  llvm::DWARFUnit::extractDIEsIfNeeded(this, 1);
  v4 = (llvm::DWARFUnit *)*((_QWORD *)this + 36);
  v5 = (llvm::DWARFUnit *)*((_QWORD *)this + 37);
  v6 = v4 == v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = this;
  if (v6)
    v4 = 0;
  v47[0] = v7;
  v47[1] = v4;
  if (!v7 || v4 == 0)
    return 0;
  v9 = *((unsigned __int16 *)this + 16) < 5u ? 8496 : 118;
  llvm::DWARFDie::find(v47, v9, &v48);
  v10 = sub_1C624DEB4((llvm::DWARFFormValue *)&v48);
  if (!v11)
    return 0;
  v12 = (llvm::DWARFContext *)v10;
  llvm::DWARFDie::find(v47, 27, &v48);
  v13 = sub_1C624DEB4((llvm::DWARFFormValue *)&v48);
  v15 = v14;
  v48 = (unsigned __int8 *)v50;
  v49 = xmmword_1C6612EE0;
  v16 = 1;
  v46 = 1;
  if (*(_BYTE *)v12)
  {
    v43 = v12;
    v16 = 3;
  }
  v45 = v16;
  if ((llvm::sys::path::is_absolute((const char **)&v43, 0) & 1) == 0 && v15 && v13)
  {
    v17 = 1;
    v46 = 1;
    if (*v13)
    {
      v43 = (llvm::DWARFContext *)v13;
      v17 = 3;
    }
    v45 = v17;
    v42 = 257;
    v40 = 257;
    v38 = 257;
    llvm::sys::path::append(&v48, 0, (_QWORD **)&v43, v41, v39, v37);
  }
  v18 = 1;
  v46 = 1;
  if (*(_BYTE *)v12)
  {
    v43 = v12;
    v18 = 3;
  }
  v45 = v18;
  v42 = 257;
  v40 = 257;
  v38 = 257;
  llvm::sys::path::append(&v48, 0, (_QWORD **)&v43, v41, v39, v37);
  llvm::DWARFUnit::extractDIEsIfNeeded(this, 1);
  if (*((_BYTE *)this + 88))
  {
    v19 = *((_QWORD *)this + 10);
    llvm::DWARFContext::getDWOContext(*((_QWORD *)this + 1), v48, v49, (uint64_t *)&v43);
    if (v43 && (DWOCompileUnitForHash = llvm::DWARFContext::getDWOCompileUnitForHash(v43, v19)) != 0)
    {
      v21 = v44;
      if (v44)
      {
        p_shared_owners = (unint64_t *)&v44->__shared_owners_;
        do
          v23 = __ldxr(p_shared_owners);
        while (__stxr(v23 + 1, p_shared_owners));
      }
      v24 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
      *((_QWORD *)this + 42) = DWOCompileUnitForHash;
      *((_QWORD *)this + 43) = v21;
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = *((_QWORD *)this + 42);
      *(_QWORD *)(v27 + 184) = this;
      if (*((_BYTE *)this + 200))
      {
        v28 = *((_QWORD *)this + 24);
        *(_QWORD *)(v27 + 176) = *((_QWORD *)this + 22);
        v29 = *(unsigned __int8 *)(v27 + 200);
        *(_QWORD *)(v27 + 192) = v28;
        if (!v29)
          *(_BYTE *)(v27 + 200) = 1;
      }
      if (*((_WORD *)this + 16) == 4)
      {
        RangesBaseAttribute = llvm::DWARFDie::getRangesBaseAttribute(v47);
        v31 = *((_QWORD *)this + 42);
        if (v32)
          v33 = RangesBaseAttribute;
        else
          v33 = 0;
        *(_QWORD *)(v31 + 112) = *((_QWORD *)this + 14);
        *(_QWORD *)(v31 + 120) = v33;
      }
      v2 = 1;
    }
    else
    {
      v2 = 0;
    }
    v34 = v44;
    if (v44)
    {
      v35 = (unint64_t *)&v44->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
  else
  {
    v2 = 0;
  }
  if (v48 != (unsigned __int8 *)v50)
    free(v48);
  return v2;
}

void llvm::DWARFUnit::findRnglistFromOffset(llvm::DWARFUnit *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  void *v11;
  _OWORD *v12;
  char v13;
  char v14;
  __int128 v15;
  unint64_t v16;
  void *v17;
  _BYTE v18[24];
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  _QWORD **v24;
  _QWORD *v25[4];
  uint64_t v26[3];
  __int128 v27;
  void *__p;
  void *v29;
  _OWORD *v30;
  __int128 v31;
  uint64_t v32;
  llvm::DWARFUnit *v33;
  unint64_t v34[2];
  uint64_t v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (*((unsigned __int16 *)this + 16) > 4u)
  {
    v11 = *(void **)(*((_QWORD *)this + 1) + 520);
    v12 = (_OWORD *)*((_QWORD *)this + 14);
    v13 = *((_BYTE *)this + 208);
    v14 = *((_BYTE *)this + 34);
    v15 = *v12;
    *(_QWORD *)v18 = 0;
    v20 = ".debug_rnglists";
    v21 = 15;
    v25[0] = 0;
    v25[1] = 0;
    v22 = "range";
    v23 = 5;
    v24 = v25;
    v25[2] = "ranges:";
    v25[3] = (_QWORD *)7;
    v32 = 0;
    v33 = (llvm::DWARFUnit *)a2;
    v31 = 0uLL;
    v27 = v15;
    LOBYTE(__p) = v13;
    BYTE1(__p) = v14;
    v29 = v11;
    v30 = v12;
    sub_1C548BF38((char **)&v31, (uint64_t)&v27, 0, (uint64_t *)&v33, (uint64_t)".debug_rnglists", (uint64_t)"range", (uint64_t *)v34);
    v16 = v34[0];
    if (v34[0])
    {
      if ((_QWORD)v31)
      {
        *((_QWORD *)&v31 + 1) = v31;
        operator delete((void *)v31);
      }
      *(_BYTE *)(a3 + 24) |= 1u;
      *(_QWORD *)a3 = v16;
    }
    else
    {
      v36 = 0;
      v17 = (void *)v31;
      *(_OWORD *)v34 = v31;
      v35 = v32;
      llvm::DWARFUnit::getBaseAddress(this, (uint64_t)&v27);
      v33 = this;
      llvm::DWARFDebugRnglist::getAbsoluteRanges((int8x16_t **)v34, (uint64_t)&v27, (_QWORD *(*)(__int128 *__return_ptr, uint64_t, _QWORD))sub_1C54A63BC, (uint64_t)&v33, &v31);
      *(_BYTE *)(a3 + 24) &= ~1u;
      *(_QWORD *)(a3 + 16) = v32;
      *(_OWORD *)a3 = v31;
      if (v17)
        operator delete(v17);
    }
    sub_1C624E018((uint64_t)&v24, v25[0]);
  }
  else
  {
    __p = 0;
    v29 = 0;
    v30 = 0;
    *(_QWORD *)&v27 = -1;
    BYTE8(v27) = 0;
    v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 520);
    v6 = (const char *)*((_QWORD *)this + 14);
    v7 = *((_QWORD *)this + 15);
    v8 = *(_OWORD *)v6;
    v18[16] = *((_BYTE *)this + 208);
    v9 = *((_BYTE *)this + 34);
    *(_OWORD *)v18 = v8;
    v18[17] = v9;
    v19 = v5;
    v20 = v6;
    v34[0] = v7 + a2;
    llvm::DWARFDebugRangeList::extract((llvm::DWARFDebugRangeList *)&v27, (const llvm::DWARFDataExtractor *)v18, v34, (uint64_t *)&v31);
    v10 = v31;
    if ((_QWORD)v31)
    {
      *(_BYTE *)(a3 + 24) |= 1u;
    }
    else
    {
      llvm::DWARFUnit::getBaseAddress(this, (uint64_t)v26);
      llvm::DWARFDebugRangeList::getAbsoluteRanges((uint64_t)&v27, v26, (char **)v18);
      *(_BYTE *)(a3 + 24) &= ~1u;
      v10 = *(_QWORD *)v18;
      *(_OWORD *)(a3 + 8) = *(_OWORD *)&v18[8];
    }
    *(_QWORD *)a3 = v10;
    if (__p)
    {
      v29 = __p;
      operator delete(__p);
    }
  }
}

void llvm::DWARFUnit::findRnglistFromIndex(llvm::DWARFUnit *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t RnglistOffset;
  char v7;
  const std::error_category *v8;
  void **v9;
  uint64_t v10;
  void (**v11)(llvm::raw_ostream *__hidden);
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  void **v19;
  void *__p[2];
  uint64_t v21;
  _QWORD v22[4];
  __int16 v23;

  RnglistOffset = llvm::DWARFUnit::getRnglistOffset(this, a2);
  if (v7)
  {
    llvm::DWARFUnit::findRnglistFromOffset(this, RnglistOffset, a3);
  }
  else
  {
    v8 = std::generic_category();
    __p[0] = 0;
    __p[1] = 0;
    v21 = 0;
    v12 = 0;
    v16 = 0;
    v17 = 0;
    v11 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    v19 = __p;
    v18 = 0;
    v14 = 0;
    v15 = 0;
    v13 = 0;
    v22[0] = &off_1E8132728;
    v22[1] = "invalid range list table index %d (possibly missing the entire range list table)";
    v22[2] = a2;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v11, (uint64_t)v22);
    v9 = v19;
    v10 = operator new();
    v23 = 260;
    v22[0] = v9;
    *(_QWORD *)v10 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v22, (_QWORD *)(v10 + 8));
    *(_QWORD *)(v10 + 32) = 22;
    *(_QWORD *)(v10 + 40) = v8;
    *(_BYTE *)(v10 + 48) = 1;
    v11 = off_1E81A6E70;
    if (v18 == 1 && v13)
      MEMORY[0x1CAA32F9C](v13, 0x1000C8077774924);
    if (SHIBYTE(v21) < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v10;
  }
}

unint64_t llvm::DWARFUnit::getRnglistOffset(llvm::DWARFUnit *this, int a2)
{
  char v2;
  uint64_t v3;
  char v4;
  int v5;
  char v6;
  __int128 v8;
  char v9;
  char v10;
  unint64_t v11;

  v2 = *((_BYTE *)this + 208);
  v3 = *((_QWORD *)this + 15);
  v4 = *((_BYTE *)this + 34);
  v8 = *(_OWORD *)*((_QWORD *)this + 14);
  v9 = v2;
  v10 = v4;
  if (*((_BYTE *)this + 35) == 1)
    v5 = 8;
  else
    v5 = 4;
  if (*((_BYTE *)this + 35) == 1)
    v6 = 3;
  else
    v6 = 2;
  v11 = v3 + (a2 << v6);
  return *((_QWORD *)this + 15) + llvm::DataExtractor::getUnsigned(&v8, &v11, v5, 0);
}

void llvm::DWARFUnit::collectAddressRanges(llvm::DWARFUnit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  llvm::DWARFUnit *v7;
  BOOL v8;
  char *v9;
  const std::error_category *v10;
  char *v11;
  std::string *v12;
  void **v13;
  uint64_t v14;
  char *v15;
  std::string v16;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  const std::error_category *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  int v26;
  void **v27;
  void *__p[2];
  uint64_t v29;
  _BYTE *v30[4];
  __int16 v31;
  char *v32;
  _BYTE *v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  llvm::DWARFUnit::extractDIEsIfNeeded(this, 1);
  v4 = *((_QWORD *)this + 36);
  v5 = *((_QWORD *)this + 37);
  v6 = v4 == v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = this;
  if (v6)
    v4 = 0;
  v18[0] = v7;
  v18[1] = v4;
  if (v7)
    v8 = v4 == 0;
  else
    v8 = 1;
  if (v8)
  {
    v19 = 22;
    v20 = std::generic_category();
    v30[0] = "No unit DIE";
    sub_1C5DF1730(v30, &v19, &v17);
    *(_BYTE *)(a2 + 24) |= 1u;
    *(_QWORD *)a2 = v17;
  }
  else
  {
    llvm::DWARFDie::getAddressRanges((llvm::DWARFDie *)v18, (uint64_t)&v32);
    if ((v34 & 1) != 0)
    {
      v10 = std::generic_category();
      if ((v34 & 1) != 0)
      {
        v11 = v32;
        v32 = 0;
      }
      else
      {
        v11 = 0;
      }
      v15 = v11;
      sub_1C61D2548(&v15, &v16);
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v16;
      else
        v12 = (std::string *)v16.__r_.__value_.__r.__words[0];
      __p[0] = 0;
      __p[1] = 0;
      v29 = 0;
      LODWORD(v20) = 0;
      v24 = 0;
      v25 = 0;
      v19 = (uint64_t)&unk_1E81A7208;
      v27 = __p;
      v26 = 0;
      v22 = 0;
      v23 = 0;
      v21 = 0;
      v30[0] = &off_1E8132A78;
      v30[1] = "decoding address ranges: %s";
      v30[2] = v12;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v19, (uint64_t)v30);
      v13 = v27;
      v14 = operator new();
      v31 = 260;
      v30[0] = v13;
      *(_QWORD *)v14 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)v30, (_QWORD *)(v14 + 8));
      *(_QWORD *)(v14 + 32) = 22;
      *(_QWORD *)(v14 + 40) = v10;
      *(_BYTE *)(v14 + 48) = 1;
      v19 = (uint64_t)off_1E81A6E70;
      if (v26 == 1 && v21)
        MEMORY[0x1CAA32F9C](v21, 0x1000C8077774924);
      if (SHIBYTE(v29) < 0)
        operator delete(__p[0]);
      *(_BYTE *)(a2 + 24) |= 1u;
      *(_QWORD *)a2 = v14;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      if (v15)
        (*(void (**)(char *))(*(_QWORD *)v15 + 8))(v15);
    }
    else
    {
      *(_BYTE *)(a2 + 24) &= ~1u;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)a2 = 0;
      sub_1C54B5B50((_QWORD *)a2, v32, (uint64_t)v33, 0xAAAAAAAAAAAAAAABLL * ((v33 - v32) >> 3));
    }
    v9 = v32;
    if ((v34 & 1) != 0)
    {
      v32 = 0;
      if (v9)
        (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
    }
    else if (v32)
    {
      v33 = v32;
      operator delete(v32);
    }
  }
}

void llvm::DWARFUnit::findLoclistFromOffset(llvm::DWARFUnit *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  void (**v8)(_QWORD *);
  char *v9;
  char *v10;
  uint64_t v11;
  void **v12[2];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v15 = 0uLL;
  v16 = 0;
  *((_QWORD *)&v14 + 1) = 0;
  v6 = *((_QWORD *)this + 17);
  llvm::DWARFUnit::getBaseAddress(this, (uint64_t)&v13);
  v17[0] = &off_1E816A528;
  v17[1] = this;
  v18 = v17;
  v12[0] = (void **)&v15;
  v12[1] = (void **)&v14 + 1;
  llvm::DWARFLocationTable::visitAbsoluteLocationList(v6, a2, &v13, v17, (uint64_t)sub_1C54B5C50, (uint64_t)v12);
  v7 = v18;
  if (v18 == v17)
  {
    v8 = (void (**)(_QWORD *))(v17[0] + 32);
    v7 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_6;
    v8 = (void (**)(_QWORD *))(*v18 + 40);
  }
  (*v8)(v7);
LABEL_6:
  if (v14 == 0)
  {
    *(_BYTE *)(a3 + 24) &= ~1u;
    *(_OWORD *)a3 = v15;
    *(_QWORD *)(a3 + 16) = v16;
    v15 = 0uLL;
    v16 = 0;
  }
  else
  {
    v9 = (char *)*((_QWORD *)&v14 + 1);
    v10 = (char *)v14;
    v14 = 0uLL;
    sub_1C624E8DC(&v10, &v9, &v11);
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v11;
    v11 = 0;
    if (v9)
      (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
    if (v10)
      (*(void (**)(char *))(*(_QWORD *)v10 + 8))(v10);
  }
  if ((_QWORD)v14)
    (*(void (**)(_QWORD))(*(_QWORD *)v14 + 8))(v14);
  if (*((_QWORD *)&v14 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v14 + 1) + 8))(*((_QWORD *)&v14 + 1));
  v12[0] = (void **)&v15;
  sub_1C548DA28(v12);
}

void llvm::DWARFUnit::updateAddressDieMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  BOOL v8;
  char v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  unint64_t v17;
  BOOL v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t **v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t FirstChild;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  __int128 v33;
  char *v34;
  char *v35;
  void *__p;
  char *v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v33 = a2;
  *((_QWORD *)&v33 + 1) = a3;
  v6 = *(_QWORD *)(a3 + 16);
  if (!v6)
    goto LABEL_6;
  v7 = *(unsigned __int16 *)(v6 + 4);
  v8 = v7 == 46 || v7 == 29;
  if (!v8)
    goto LABEL_6;
  llvm::DWARFDie::getAddressRanges((llvm::DWARFDie *)&v33, (uint64_t)&__p);
  v9 = v38;
  v10 = (char *)__p;
  if ((v38 & 1) != 0)
  {
    __p = 0;
    v34 = v10;
    sub_1C4D62BD4(&v34, &v35);
    if (v34)
      (*(void (**)(char *))(*(_QWORD *)v34 + 8))(v34);
  }
  else
  {
    v11 = v37;
    if (__p == v37)
      goto LABEL_42;
    v12 = (_QWORD *)(a1 + 320);
    do
    {
      v13 = *(uint64_t **)v10;
      v14 = *((_QWORD *)v10 + 1);
      if (*(_QWORD *)v10 != v14)
      {
        v15 = (_QWORD *)*v12;
        v16 = (uint64_t *)(a1 + 320);
        if (*v12)
        {
          v16 = (uint64_t *)(a1 + 320);
          do
          {
            v17 = v15[4];
            v18 = (unint64_t)v13 >= v17;
            if ((unint64_t)v13 >= v17)
              v19 = v15 + 1;
            else
              v19 = v15;
            if (!v18)
              v16 = v15;
            v15 = (_QWORD *)*v19;
          }
          while (*v19);
        }
        if (v16 != *(uint64_t **)(a1 + 312))
        {
          v20 = *v16;
          if (*v16)
          {
            do
            {
              v21 = v20;
              v20 = *(_QWORD *)(v20 + 8);
            }
            while (v20);
          }
          else
          {
            do
            {
              v21 = v16[2];
              v8 = *(_QWORD *)v21 == (_QWORD)v16;
              v16 = (uint64_t *)v21;
            }
            while (v8);
          }
          v22 = *(_QWORD *)(v21 + 40);
          if ((unint64_t)v13 < v22)
          {
            if (v14 < v22)
            {
              v23 = sub_1C4FCE454((uint64_t **)(a1 + 312), v14, (uint64_t **)v10 + 1);
              v23[5] = *(uint64_t **)(v21 + 40);
              *((_OWORD *)v23 + 3) = *(_OWORD *)(v21 + 48);
              v13 = *(uint64_t **)v10;
            }
            v24 = *(_QWORD *)(v21 + 32);
            if ((unint64_t)v13 > v24)
            {
              sub_1C4FCE454((uint64_t **)(a1 + 312), v24, (uint64_t **)(v21 + 32))[5] = v13;
              v13 = *(uint64_t **)v10;
            }
          }
        }
        v25 = (uint64_t *)*((_QWORD *)v10 + 1);
        v26 = sub_1C4FCE454((uint64_t **)(a1 + 312), (unint64_t)v13, (uint64_t **)v10);
        v26[5] = v25;
        *((_OWORD *)v26 + 3) = v33;
      }
      v10 += 24;
    }
    while (v10 != v11);
  }
  v10 = (char *)__p;
  v9 = v38;
LABEL_42:
  if ((v9 & 1) != 0)
  {
    __p = 0;
    if (v10)
      (*(void (**)(char *))(*(_QWORD *)v10 + 8))(v10);
  }
  else if (v10)
  {
    v37 = v10;
    operator delete(v10);
  }
LABEL_6:
  if (a3)
  {
    if (a2)
    {
      FirstChild = llvm::DWARFUnit::getFirstChild(a2, a3);
      if (FirstChild)
      {
        v29 = v28;
        if (v28)
        {
          v30 = FirstChild;
          llvm::DWARFUnit::updateAddressDieMap(a1, FirstChild, v28);
          for (i = *(unsigned int *)(v29 + 12); (_DWORD)i; i = *(unsigned int *)(v32 + 12))
          {
            v32 = *(_QWORD *)(v30 + 288) + 24 * i;
            llvm::DWARFUnit::updateAddressDieMap(a1, v30, v32);
          }
        }
      }
    }
  }
}

uint64_t llvm::DWARFUnit::getSubroutineForAddress(llvm::DWARFUnit *this, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v13;
  uint64_t v14;
  llvm::DWARFUnit *v15;
  uint64_t v16;

  llvm::DWARFUnit::extractDIEsIfNeeded(this, 0);
  if (!*((_QWORD *)this + 41))
  {
    llvm::DWARFUnit::extractDIEsIfNeeded(this, 1);
    v13 = *((_QWORD *)this + 36);
    v14 = *((_QWORD *)this + 37);
    if (v13 == v14)
      v15 = 0;
    else
      v15 = this;
    if (v13 == v14)
      v16 = 0;
    else
      v16 = *((_QWORD *)this + 36);
    llvm::DWARFUnit::updateAddressDieMap((uint64_t)this, (uint64_t)v15, v16);
  }
  v4 = (_QWORD *)((char *)this + 320);
  v5 = (_QWORD *)*((_QWORD *)this + 40);
  if (v5)
  {
    do
    {
      v6 = v5[4];
      v7 = v6 > a2;
      if (v6 <= a2)
        v8 = v5 + 1;
      else
        v8 = v5;
      if (v7)
        v4 = v5;
      v5 = (_QWORD *)*v8;
    }
    while (*v8);
  }
  if (v4 == *((_QWORD **)this + 39))
    return 0;
  v9 = (_QWORD *)*v4;
  if (*v4)
  {
    do
    {
      v10 = v9;
      v9 = (_QWORD *)v9[1];
    }
    while (v9);
  }
  else
  {
    do
    {
      v10 = (_QWORD *)v4[2];
      v11 = *v10 == (_QWORD)v4;
      v4 = v10;
    }
    while (v11);
  }
  if (v10[5] <= a2)
    return 0;
  else
    return v10[6];
}

_QWORD *llvm::DWARFUnit::getInlinedChainForAddress(llvm::DWARFUnit *a1, unint64_t a2, uint64_t a3)
{
  llvm::DWARFUnit *v6;
  _QWORD *result;
  uint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  llvm::DWARFUnit::parseDWO(a1);
  if (*((_QWORD *)a1 + 42))
    v6 = (llvm::DWARFUnit *)*((_QWORD *)a1 + 42);
  else
    v6 = a1;
  result = (_QWORD *)llvm::DWARFUnit::getSubroutineForAddress(v6, a2);
  if (result)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (v9)
    return result;
  v10 = result;
  v11 = v8;
  while (1)
  {
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v13 = *(unsigned __int16 *)(v12 + 4);
      if (v13 == 29)
      {
        v14 = *(unsigned int *)(a3 + 8);
        if (v14 >= *(unsigned int *)(a3 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v14 + 1, 16);
          v14 = *(unsigned int *)(a3 + 8);
        }
        v15 = (_QWORD *)(*(_QWORD *)a3 + 16 * v14);
        *v15 = v10;
        v15[1] = v11;
        ++*(_DWORD *)(a3 + 8);
        goto LABEL_17;
      }
      if (v13 == 46)
        break;
    }
LABEL_17:
    v16 = *(_DWORD *)(v11 + 8);
    if (v16 != -1)
    {
      v17 = v10[36];
      v11 = v17 + 24 * v16;
      if (v17)
        continue;
    }
    return result;
  }
  v18 = *(unsigned int *)(a3 + 8);
  if (v18 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v18 + 1, 16);
    LODWORD(v18) = *(_DWORD *)(a3 + 8);
  }
  v19 = (_QWORD *)(*(_QWORD *)a3 + 16 * v18);
  *v19 = v10;
  v19[1] = v11;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

uint64_t llvm::getDWARFUnitIndex(llvm::DWARFContext *a1, int a2)
{
  if (a2 == 1)
    return llvm::DWARFContext::getCUIndex(a1);
  else
    return llvm::DWARFContext::getTUIndex(a1);
}

uint64_t llvm::DWARFUnit::getParent(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (!a2 || *(_DWORD *)(a2 + 8) == -1)
    return 0;
  return result;
}

uint64_t llvm::DWARFUnit::getSibling(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (!a2 || !*(_DWORD *)(a2 + 12))
    return 0;
  return result;
}

uint64_t llvm::DWARFUnit::getPreviousSibling(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;

  if (!a2)
    return 0;
  v2 = *(_DWORD *)(a2 + 8);
  v3 = v2 == -1 ? 0 : *(_DWORD *)(a2 + 8);
  if (v2 == -1)
    return 0;
  v4 = *(_QWORD *)(result + 288);
  v5 = -1431655765 * ((unint64_t)(a2 - v4) >> 3) - 1;
  if (v5 == v2)
    return 0;
  do
  {
    v5 = *(_DWORD *)(v4 + 24 * v5 + 8);
    v6 = v5 == -1;
    if (v5 == -1)
      v5 = 0;
  }
  while (v6 || v5 != v3);
  return result;
}

uint64_t llvm::DWARFUnit::getLastChild(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (!*(_BYTE *)(v2 + 7))
    return 0;
  if (!*(_DWORD *)(a2 + 12))
  {
    v3 = *(_QWORD *)(result + 288);
    if (-1431655765 * ((unint64_t)(a2 - v3) >> 3))
      return 0;
    v4 = *(_QWORD *)(result + 296);
    if (0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 3) < 2)
      return 0;
    v5 = *(_QWORD *)(v4 - 8);
    if (v5)
    {
      if (*(_WORD *)(v5 + 4))
        return 0;
    }
  }
  return result;
}

__n128 llvm::StrOffsetsContributionDescriptor::validateContributionSize@<Q0>(llvm::StrOffsetsContributionDescriptor *this@<X0>, llvm::DWARFDataExtractor *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  __n128 result;
  uint64_t v12;
  const char *v13;
  uint64_t v14[2];

  v4 = -8;
  if (!*((_BYTE *)this + 19))
    v4 = -4;
  v5 = 8;
  if (!*((_BYTE *)this + 19))
    v5 = 4;
  v6 = *((_QWORD *)this + 1);
  v7 = (v6 + v5 - 1) & v4;
  if (v7 >= v6
    && ((v8 = *(unsigned int *)this, v9 = v8 + v7, v9 >= v8) ? (v10 = *((_QWORD *)a2 + 1) > v9 - 1) : (v10 = 0), v10))
  {
    *(_BYTE *)(a3 + 24) &= ~1u;
    result = *(__n128 *)this;
    *(_OWORD *)a3 = *(_OWORD *)this;
    *(_QWORD *)(a3 + 16) = *((_QWORD *)this + 2);
  }
  else
  {
    v14[0] = 22;
    v14[1] = (uint64_t)std::generic_category();
    v13 = "length exceeds section size";
    sub_1C5DF1730((_BYTE **)&v13, v14, &v12);
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v12;
  }
  return result;
}

double sub_1C54B5418(uint64_t a1, llvm::DWARFDataExtractor *a2, int a3, unint64_t a4)
{
  unsigned __int8 v4;
  double result;
  uint64_t v8;
  const std::error_category *v9;
  const char *v10;
  char *v11;
  char *v12;
  unsigned int v13;
  const std::error_category *v14;
  unint64_t v15;
  unsigned __int8 v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  char v23;
  char v24;
  unint64_t v25;
  const char *v26;
  uint64_t v27;
  const std::error_category *v28;

  v4 = a3;
  memset(v22, 0, 21);
  if (!a3)
  {
    if (a4 <= 7)
    {
      v27 = 22;
      v28 = std::generic_category();
      v26 = "insufficient space for 32 bit header prefix";
      sub_1C5DF1730((_BYTE **)&v26, &v27, &v20);
      *(_BYTE *)(a1 + 24) |= 1u;
      v8 = v20;
      goto LABEL_13;
    }
    v25 = a4 - 8;
    if (*((_QWORD *)a2 + 1) > a4 - 1)
    {
      v13 = sub_1C6387364((uint64_t)a2, &v25, 0);
      if (v13 >= 0xFFFFFFF0)
      {
        v14 = std::generic_category();
        v27 = 22;
        v28 = v14;
        v10 = "invalid length";
        goto LABEL_16;
      }
      v19 = v13;
      v16 = sub_1C63871E8((uint64_t)a2, &v25, 0);
      sub_1C63871E8((uint64_t)a2, &v25, 0);
      v17 = v25;
      v18 = v19 - 4;
      goto LABEL_19;
    }
LABEL_11:
    v27 = 22;
    v28 = std::generic_category();
    v26 = "section offset exceeds section size";
    v11 = &v24;
    v12 = &v24;
LABEL_12:
    sub_1C5DF1730((_BYTE **)&v26, &v27, v12);
    v8 = *(_QWORD *)v11;
    *(_BYTE *)(a1 + 24) |= 1u;
    goto LABEL_13;
  }
  if (a3 == 1)
  {
    if (a4 <= 0xF)
    {
      v27 = 22;
      v28 = std::generic_category();
      v26 = "insufficient space for 64 bit header prefix";
      sub_1C5DF1730((_BYTE **)&v26, &v27, &v21);
      *(_BYTE *)(a1 + 24) |= 1u;
      v8 = v21;
LABEL_13:
      *(_QWORD *)a1 = v8;
      return result;
    }
    v25 = a4 - 16;
    if (*((_QWORD *)a2 + 1) > a4 - 1)
    {
      if (sub_1C6387364((uint64_t)a2, &v25, 0) != -1)
      {
        v9 = std::generic_category();
        v27 = 22;
        v28 = v9;
        v10 = "32 bit contribution referenced from a 64 bit unit";
LABEL_16:
        v26 = v10;
        v11 = &v23;
        v12 = &v23;
        goto LABEL_12;
      }
      v15 = sub_1C63873F8((uint64_t)a2, &v25, 0);
      v16 = sub_1C63871E8((uint64_t)a2, &v25, 0);
      sub_1C63871E8((uint64_t)a2, &v25, 0);
      v17 = v25;
      v18 = v15 - 4;
LABEL_19:
      v22[0] = v17;
      v22[1] = v18;
      LOWORD(v22[2]) = v16;
      BYTE2(v22[2]) = 0;
      *(_WORD *)((char *)&v22[2] + 3) = v4;
      goto LABEL_20;
    }
    goto LABEL_11;
  }
LABEL_20:
  *(_QWORD *)&result = llvm::StrOffsetsContributionDescriptor::validateContributionSize((llvm::StrOffsetsContributionDescriptor *)v22, a2, a1).n128_u64[0];
  return result;
}

unint64_t llvm::DWARFUnit::getLoclistOffset(llvm::DWARFUnit *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;

  v3 = *((_QWORD *)this + 16);
  v2 = *((_QWORD *)this + 17);
  v4 = *(_QWORD *)(v2 + 24);
  v8 = *(_OWORD *)(v2 + 8);
  if (*((_BYTE *)this + 35) == 1)
    v5 = 8;
  else
    v5 = 4;
  if (*((_BYTE *)this + 35) == 1)
    v6 = 3;
  else
    v6 = 2;
  v9 = v4;
  v10 = v3 + (a2 << v6);
  return *((_QWORD *)this + 16) + llvm::DataExtractor::getUnsigned(&v8, &v10, v5, 0);
}

void sub_1C54B56E8()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C54B56FC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x70uLL);
  *(_QWORD *)v2 = &off_1E816A4A0;
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *((_QWORD *)v2 + 13) = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_1C54B5764(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a2 = &off_1E816A4A0;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(__n128 *)(a2 + 56) = result;
  return result;
}

void sub_1C54B57B4(uint64_t a1@<X0>, unint64_t *a2@<X1>, int *a3@<X2>, _QWORD *a4@<X3>, _QWORD **a5@<X4>, uint64_t *a6@<X8>)
{
  unint64_t v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int16 v26;
  void *v27;
  llvm::DWARFContext *v28;
  llvm::DWARFUnitIndex *CUIndex;
  unsigned int v30[4];
  __int128 v31;
  _BYTE v32[32];
  __int128 v33;
  _QWORD v34[2];
  char v35;
  char v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;

  v8 = *a2;
  v9 = *a3;
  v10 = (_QWORD *)*a4;
  v11 = *a5;
  v39 = *a2;
  v12 = *(_QWORD *)(a1 + 104);
  v13 = *(_QWORD *)(a1 + 16);
  if (v10)
    v14 = v10;
  else
    v14 = *(_QWORD **)(a1 + 24);
  v15 = *(_BYTE *)(a1 + 48);
  v16 = v14[1];
  v34[0] = *v14;
  v34[1] = v16;
  v35 = v15;
  v36 = 0;
  v37 = v13;
  v38 = v14;
  if (v16 > v8)
  {
    *(_QWORD *)v30 = 0;
    LOBYTE(v30[3]) = 0;
    LOBYTE(v33) = 0;
    WORD4(v33) = 0;
    v31 = 0u;
    memset(v32, 0, 25);
    v18 = 0;
    if (llvm::DWARFUnitHeader::extract((uint64_t)v30, *(_QWORD *)(a1 + 8), v34, &v39, v9))
    {
      if ((v11
         || *(_BYTE *)(a1 + 49)
         && ((v28 = *(llvm::DWARFContext **)(a1 + 8), (BYTE8(v33) & 0xFB) != 2)
           ? (CUIndex = (llvm::DWARFUnitIndex *)llvm::DWARFContext::getCUIndex(v28))
           : (CUIndex = (llvm::DWARFUnitIndex *)llvm::DWARFContext::getTUIndex(v28)),
             (v11 = (_QWORD *)llvm::DWARFUnitIndex::getFromOffset(CUIndex, v30[0])) != 0))
        && !llvm::DWARFUnitHeader::applyIndexEntry((uint64_t)v30, v11))
      {
        v18 = 0;
      }
      else
      {
        v19 = BYTE8(v33) & 0xFB;
        v20 = *(_QWORD *)(a1 + 8);
        v21 = *(_QWORD *)(a1 + 32);
        v22 = *(_QWORD *)(a1 + 40);
        v18 = operator new();
        v23 = *(_OWORD *)v30;
        *(_OWORD *)(v18 + 40) = v31;
        v24 = *(_OWORD *)&v32[16];
        *(_OWORD *)(v18 + 56) = *(_OWORD *)v32;
        *(_OWORD *)(v18 + 72) = v24;
        *(_OWORD *)(v18 + 88) = v33;
        v25 = *(_QWORD *)(a1 + 96);
        v26 = *(_WORD *)(a1 + 48);
        *(_QWORD *)v18 = off_1E816A478;
        *(_QWORD *)(v18 + 8) = v20;
        *(_QWORD *)(v18 + 16) = v14;
        *(_OWORD *)(v18 + 24) = v23;
        *(_OWORD *)(v18 + 104) = *(_OWORD *)(a1 + 56);
        *(_QWORD *)(v18 + 136) = 0;
        *(_QWORD *)(v18 + 144) = v22;
        *(_OWORD *)(v18 + 152) = *(_OWORD *)(a1 + 80);
        *(_QWORD *)(v18 + 168) = v21;
        *(_QWORD *)(v18 + 176) = v25;
        *(_BYTE *)(v18 + 192) = 0;
        *(_BYTE *)(v18 + 200) = 0;
        *(_WORD *)(v18 + 208) = v26;
        *(_QWORD *)(v18 + 216) = v12;
        *(_BYTE *)(v18 + 224) = 0;
        *(_BYTE *)(v18 + 248) = 0;
        *(_BYTE *)(v18 + 264) = 0;
        *(_BYTE *)(v18 + 280) = 0;
        *(_QWORD *)(v18 + 288) = 0;
        *(_QWORD *)(v18 + 296) = 0;
        *(_QWORD *)(v18 + 320) = 0;
        *(_QWORD *)(v18 + 328) = 0;
        *(_QWORD *)(v18 + 304) = 0;
        *(_QWORD *)(v18 + 312) = v18 + 320;
        *(_QWORD *)(v18 + 336) = 0;
        *(_QWORD *)(v18 + 344) = 0;
        llvm::DWARFUnit::clear((llvm::DWARFUnit *)v18);
        v27 = &unk_1E8169920;
        if (v19 == 2)
          v27 = &unk_1E816A3F8;
        *(_QWORD *)v18 = v27;
      }
    }
    *a6 = v18;
  }
  else
  {
    *a6 = 0;
  }
}

uint64_t sub_1C54B59B8(uint64_t a1, unint64_t a2, char *a3)
{
  char *v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  unint64_t v29;
  char *v31;
  char *v32;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(_QWORD *)a1 + 8 * v6;
  if (v7 == a2)
  {
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      v29 = v6 + 1;
      if (v5 <= (unint64_t)a3 && a2 > (unint64_t)a3)
      {
        v32 = &a3[-v5];
        sub_1C6189DFC(a1, v29);
        v5 = *(_QWORD *)a1;
        v3 = &v32[*(_QWORD *)a1];
      }
      else
      {
        sub_1C6189DFC(a1, v29);
        v5 = *(_QWORD *)a1;
      }
    }
    v24 = *(unsigned int *)(a1 + 8);
    v25 = *(_QWORD *)v3;
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v5 + 8 * v24) = v25;
    LODWORD(v24) = v24 + 1;
    *(_DWORD *)(a1 + 8) = v24;
    return *(_QWORD *)a1 + 8 * v24 - 8;
  }
  else
  {
    v8 = (uint64_t)(a2 - v5) >> 3;
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      v27 = v6 + 1;
      if (v5 <= (unint64_t)a3 && v7 > (unint64_t)a3)
      {
        v31 = &a3[-v5];
        sub_1C6189DFC(a1, v27);
        v5 = *(_QWORD *)a1;
        v3 = &v31[*(_QWORD *)a1];
      }
      else
      {
        sub_1C6189DFC(a1, v27);
        v5 = *(_QWORD *)a1;
      }
    }
    v9 = (char *)(v5 + 8 * v8);
    v10 = *(unsigned int *)(a1 + 8);
    v11 = (_QWORD *)(v5 + 8 * v10);
    v12 = *(v11 - 1);
    *(v11 - 1) = 0;
    *v11 = v12;
    v13 = *(_QWORD *)a1;
    v14 = (uint64_t *)(*(_QWORD *)a1 + 8 * v10 - 8);
    if (v14 != (uint64_t *)v9)
    {
      v15 = (char *)(*(_QWORD *)a1 + 8 * v10 - 8);
      do
      {
        v16 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *(_QWORD *)v15 = 0;
        v17 = *v14;
        *v14 = v16;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        v14 = (uint64_t *)v15;
      }
      while (v15 != v9);
      LODWORD(v10) = *(_DWORD *)(a1 + 8);
      v13 = *(_QWORD *)a1;
    }
    v18 = v10 + 1;
    *(_DWORD *)(a1 + 8) = v18;
    v19 = v13 + 8 * v18;
    v21 = v3 >= v9 && (unint64_t)v3 < v19;
    v22 = *(_QWORD *)&v3[8 * v21];
    *(_QWORD *)&v3[8 * v21] = 0;
    v23 = *(_QWORD *)v9;
    *(_QWORD *)v9 = v22;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  return (uint64_t)v9;
}

_QWORD *sub_1C54B5B50(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v6 = result;
    v7 = 3 * a4;
    result = operator new(24 * a4);
    v8 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v6[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_1C54B5BE0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C54B5BF4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E816A528;
  result[1] = v3;
  return result;
}

uint64_t sub_1C54B5C28(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E816A528;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C54B5C44@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  return llvm::DWARFUnit::getAddrOffsetSectionItem(*(_QWORD *)(a1 + 8), *a2, a3);
}

BOOL sub_1C54B5C50(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  char *v5;
  __int128 v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v27;
  char **v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  sub_1C54A2BD8((uint64_t)&v32, a2);
  if ((v37 & 1) != 0)
  {
    v27 = (char *)v32;
    *(_QWORD *)&v32 = 0;
    v30 = v27;
    v28 = (char **)a1[1];
    v29 = *v28;
    *v28 = 0;
    sub_1C624E8DC(&v30, &v29, &v31);
    *(_QWORD *)a1[1] = v31;
    v31 = 0;
    if (v29)
      (*(void (**)(char *))(*(_QWORD *)v29 + 8))(v29);
    if (v30)
      (*(void (**)(char *))(*(_QWORD *)v30 + 8))(v30);
  }
  else
  {
    v3 = *a1;
    v5 = *(char **)(*a1 + 8);
    v4 = *(_QWORD *)(*a1 + 16);
    if ((unint64_t)v5 >= v4)
    {
      v8 = *(char **)v3;
      v9 = (uint64_t)&v5[-*(_QWORD *)v3] >> 6;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 58)
        abort();
      v11 = v4 - (_QWORD)v8;
      if (v11 >> 5 > v10)
        v10 = v11 >> 5;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0)
        v12 = 0x3FFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12 >> 58)
        sub_1C4764EE4();
      v13 = (char *)operator new(v12 << 6);
      v14 = &v13[64 * v9];
      v15 = v33;
      *(_OWORD *)v14 = v32;
      *((_OWORD *)v14 + 1) = v15;
      *((_QWORD *)v14 + 4) = v14 + 56;
      v16 = xmmword_1C6612EF0;
      *(_OWORD *)(v14 + 40) = xmmword_1C6612EF0;
      if (v35)
      {
        sub_1C6153FB0((uint64_t)(v14 + 32), (uint64_t)&v34);
        v16 = xmmword_1C6612EF0;
        v8 = *(char **)v3;
        v5 = *(char **)(v3 + 8);
      }
      v17 = &v13[64 * v12];
      v7 = v14 + 64;
      if (v5 == v8)
      {
        *(_QWORD *)v3 = v14;
        *(_QWORD *)(v3 + 8) = v7;
        *(_QWORD *)(v3 + 16) = v17;
      }
      else
      {
        v18 = 0;
        do
        {
          v19 = *(_OWORD *)&v5[v18 - 64];
          v20 = *(_OWORD *)&v5[v18 - 48];
          *(_QWORD *)&v14[v18 - 32] = &v14[v18 - 8];
          v21 = (uint64_t)&v14[v18 - 32];
          *(_OWORD *)(v21 - 32) = v19;
          *(_OWORD *)(v21 - 16) = v20;
          *(_OWORD *)(v21 + 8) = v16;
          if (*(_QWORD *)&v5[v18 - 24])
          {
            sub_1C6153FB0(v21, (uint64_t)&v5[v18 - 32]);
            v16 = xmmword_1C6612EF0;
          }
          v18 -= 64;
        }
        while (&v5[v18] != v8);
        v8 = *(char **)v3;
        v22 = *(char **)(v3 + 8);
        *(_QWORD *)v3 = &v14[v18];
        *(_QWORD *)(v3 + 8) = v7;
        *(_QWORD *)(v3 + 16) = v17;
        while (v22 != v8)
        {
          v23 = (char *)*((_QWORD *)v22 - 4);
          if (v22 - 8 != v23)
            free(v23);
          v22 -= 64;
        }
      }
      if (v8)
        operator delete(v8);
    }
    else
    {
      v6 = v33;
      *(_OWORD *)v5 = v32;
      *((_OWORD *)v5 + 1) = v6;
      *((_QWORD *)v5 + 4) = v5 + 56;
      *(_OWORD *)(v5 + 40) = xmmword_1C6612EF0;
      if (v35)
        sub_1C6153FB0((uint64_t)(v5 + 32), (uint64_t)&v34);
      v7 = v5 + 64;
    }
    *(_QWORD *)(v3 + 8) = v7;
  }
  v24 = *(_QWORD *)a1[1];
  if ((v37 & 1) != 0)
  {
    v25 = v32;
    *(_QWORD *)&v32 = 0;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
  else if (v34 != &v36)
  {
    free(v34);
  }
  return v24 == 0;
}

void llvm::DWARFVerifier::DieRangeInfo::insert(_QWORD *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t *v3;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  unint64_t *v21;
  uint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  unint64_t *v39;
  char *v40;
  __int128 v41;
  unint64_t *v42;
  int64_t v43;
  char *v44;
  void *v45;
  uint64_t v46;
  __int128 v47;
  unint64_t v48;

  v3 = a2;
  v7 = (unint64_t *)a1[2];
  v6 = (unint64_t *)a1[3];
  if (v6 == v7)
  {
    v11 = (unint64_t *)a1[2];
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (v6 - v7);
    v9 = a2[2];
    v10 = *a2;
    v11 = (unint64_t *)a1[2];
    do
    {
      v12 = v8 >> 1;
      v13 = &v11[3 * (v8 >> 1)];
      v14 = v13[2];
      if (v14 < v9 || v9 >= v14 && (*v13 < v10 || v10 >= *v13 && v13[1] < a2[1]))
      {
        v11 = v13 + 3;
        v12 = v8 + ~v12;
      }
      v8 = v12;
    }
    while (v12);
  }
  if (v6 != v11 && (v48 = v11[2], v47 = *(_OWORD *)v11, sub_1C54B62C8(v11, a2))
    || v7 != v11 && (v48 = *(v11 - 1), v47 = *(_OWORD *)(v11 - 3), sub_1C54B62C8(v11 - 3, v3)))
  {
    *(_OWORD *)a3 = v47;
    *(_QWORD *)(a3 + 16) = v48;
    *(_BYTE *)(a3 + 24) = 1;
    return;
  }
  v16 = (unint64_t *)a1[2];
  v15 = (unint64_t *)a1[3];
  v17 = ((char *)v11 - (char *)v16) / 24;
  v18 = &v16[3 * v17];
  v19 = a1[4];
  if ((unint64_t)v15 >= v19)
  {
    v24 = 0xAAAAAAAAAAAAAAABLL * (v15 - v16) + 1;
    if (v24 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (_QWORD)v16) >> 3);
    if (2 * v25 > v24)
      v24 = 2 * v25;
    if (v25 >= 0x555555555555555)
      v26 = 0xAAAAAAAAAAAAAAALL;
    else
      v26 = v24;
    v46 = a3;
    if (v26)
    {
      if (v26 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_58;
      v27 = (char *)operator new(24 * v26);
    }
    else
    {
      v27 = 0;
    }
    v30 = &v27[24 * v17];
    v31 = &v27[24 * v26];
    if (v17 != v26)
    {
LABEL_49:
      *(_OWORD *)v30 = *(_OWORD *)v3;
      *((_QWORD *)v30 + 2) = v3[2];
      v38 = v30;
      if (v18 != v16)
      {
        v39 = v18;
        v40 = v30;
        do
        {
          v41 = *(_OWORD *)(v39 - 3);
          v38 = v40 - 24;
          *((_QWORD *)v40 - 1) = *(v39 - 1);
          *(_OWORD *)(v40 - 24) = v41;
          v39 -= 3;
          v40 -= 24;
        }
        while (v39 != v16);
      }
      v42 = (unint64_t *)a1[3];
      v43 = (char *)v42 - (char *)v18;
      if (v42 != v18)
      {
        v44 = v31;
        memmove(v30 + 24, v18, (char *)v42 - (char *)v18);
        v31 = v44;
      }
      v45 = (void *)a1[2];
      a1[2] = v38;
      a1[3] = &v30[v43 + 24];
      a1[4] = v31;
      a3 = v46;
      if (v45)
        operator delete(v45);
      goto LABEL_56;
    }
    if ((char *)v11 - (char *)v16 >= 1)
    {
      v32 = v17 + 2;
      if (v17 >= -1)
        v32 = v17 + 1;
      v30 -= 24 * (v32 >> 1);
      goto LABEL_49;
    }
    v33 = 2 * v17;
    if (v16 == v11)
      v33 = 1;
    if (v33 <= 0xAAAAAAAAAAAAAAALL)
    {
      v34 = v33 >> 2;
      v35 = 3 * v33;
      v36 = (char *)operator new(24 * v33);
      v30 = &v36[24 * v34];
      v31 = &v36[8 * v35];
      if (v27)
      {
        v37 = &v36[8 * v35];
        operator delete(v27);
        v31 = v37;
        v16 = (unint64_t *)a1[2];
      }
      goto LABEL_49;
    }
LABEL_58:
    sub_1C4764EE4();
  }
  if (v18 == v15)
  {
    v29 = *(_OWORD *)v3;
    v18[2] = v3[2];
    *(_OWORD *)v18 = v29;
    a1[3] = v18 + 3;
  }
  else
  {
    v20 = (char *)(v18 + 3);
    v21 = v15 - 3;
    v22 = a1[3];
    while (v21 < v15)
    {
      v23 = *(_OWORD *)v21;
      *(_QWORD *)(v22 + 16) = v21[2];
      *(_OWORD *)v22 = v23;
      v22 += 24;
      v21 += 3;
    }
    a1[3] = v22;
    if (v15 != (unint64_t *)v20)
      memmove(v18 + 3, &v16[3 * v17], (char *)v15 - v20);
    if (v18 <= v3)
      v3 += 3 * (a1[3] > (unint64_t)v3);
    v28 = *(_OWORD *)v3;
    v18[2] = v3[2];
    *(_OWORD *)v18 = v28;
  }
LABEL_56:
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 24) = 0;
}

uint64_t sub_1C54B62C8(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (a1[2] != a2[2])
    return 0;
  v3 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 0;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 == v5)
    return 0;
  if (v4 >= v2 || v3 >= v5)
    return 0;
  if (v4 < v3)
    v3 = *a2;
  *a1 = v3;
  if (v2 <= a2[1])
    v2 = a2[1];
  a1[1] = v2;
  return 1;
}

_QWORD *llvm::DWARFVerifier::DieRangeInfo::insert(uint64_t a1, uint64_t a2)
{
  _QWORD **v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  _OWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;

  if (*(_QWORD *)(a2 + 16) == *(_QWORD *)(a2 + 24))
    return (_QWORD *)(a1 + 48);
  v4 = (_QWORD **)(a1 + 40);
  v5 = *(_QWORD **)(a1 + 40);
  v6 = (_QWORD *)(a1 + 48);
  if (v5 == (_QWORD *)(a1 + 48))
  {
LABEL_10:
    v10 = sub_1C54BEFE0(a1 + 40, &v20, a2);
    if (!*v10)
    {
      v11 = v10;
      v12 = operator new(0x60uLL);
      v12[2] = *(_OWORD *)a2;
      *((_QWORD *)v12 + 7) = 0;
      *((_QWORD *)v12 + 8) = 0;
      *((_QWORD *)v12 + 6) = 0;
      sub_1C54B5B50((_QWORD *)v12 + 6, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3));
      *((_QWORD *)v12 + 10) = 0;
      *((_QWORD *)v12 + 9) = v12 + 5;
      *((_QWORD *)v12 + 11) = 0;
      v13 = *(_QWORD **)(a2 + 40);
      v14 = (_QWORD *)(a2 + 48);
      if (v13 != v14)
      {
        do
        {
          sub_1C54BF1C4((uint64_t)v12 + 72, (_QWORD *)v12 + 10, (uint64_t)(v13 + 4), (uint64_t)(v13 + 4));
          v15 = (_QWORD *)v13[1];
          if (v15)
          {
            do
            {
              v16 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              v16 = (_QWORD *)v13[2];
              v9 = *v16 == (_QWORD)v13;
              v13 = v16;
            }
            while (!v9);
          }
          v13 = v16;
        }
        while (v16 != v14);
      }
      v17 = v20;
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      *((_QWORD *)v12 + 2) = v17;
      *v11 = v12;
      v18 = (_QWORD *)**v4;
      if (v18)
      {
        *v4 = v18;
        v12 = (_OWORD *)*v11;
      }
      sub_1C4768E74(*(uint64_t **)(a1 + 48), (uint64_t *)v12);
      ++*(_QWORD *)(a1 + 56);
    }
    return (_QWORD *)(a1 + 48);
  }
  else
  {
    while ((llvm::DWARFVerifier::DieRangeInfo::intersects((uint64_t)(v5 + 4), a2) & 1) == 0)
    {
      v7 = (_QWORD *)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v5[2];
          v9 = *v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
      if (v8 == v6)
        goto LABEL_10;
    }
  }
  return v5;
}

uint64_t llvm::DWARFVerifier::DieRangeInfo::intersects(uint64_t a1, uint64_t a2)
{
  unint64_t *v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t *i;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  _BOOL4 v13;
  unsigned int v14;

  v2 = *(unint64_t **)(a1 + 16);
  v3 = *(unint64_t **)(a1 + 24);
  v4 = *(unint64_t **)(a2 + 16);
  for (i = *(unint64_t **)(a2 + 24); v2 != v3 && v4 != i; v2 += 3 * v13)
  {
    v7 = *v2;
    if (v2[2] == v4[2])
    {
      v8 = v2[1];
      v9 = *v4;
      if (v7 != v8)
      {
        v10 = v4[1];
        v11 = v9 == v10 || v9 >= v8;
        if (!v11 && v7 < v10)
          return 1;
      }
    }
    else
    {
      v9 = *v4;
    }
    v11 = v7 >= v9;
    v13 = v7 < v9;
    v14 = v11;
    v4 += 3 * v14;
  }
  return 0;
}

uint64_t llvm::DWARFVerifier::DieRangeInfo::contains(uint64_t a1, uint64_t a2)
{
  unint64_t *v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *(unint64_t **)(a2 + 16);
  v2 = *(unint64_t **)(a2 + 24);
  if (v3 == v2)
    return 1;
  v5 = *(unint64_t **)(a1 + 16);
  v4 = *(unint64_t **)(a1 + 24);
  if (v5 != v4)
  {
    v6 = *v3;
    v7 = v3[1];
    do
    {
      if (v6 == v7)
        goto LABEL_10;
      if (*v5 > v6)
        return 0;
      v8 = v5[1];
      if (v7 <= v8)
      {
LABEL_10:
        if (v3 + 3 == v2)
          return 1;
        v6 = v3[3];
        v7 = v3[4];
        v3 += 3;
      }
      else
      {
        if (v6 <= v8)
          v6 = v5[1];
        v5 += 3;
      }
    }
    while (v5 != v4);
  }
  return 0;
}

uint64_t llvm::DWARFVerifier::verifyUnitHeader(llvm::raw_ostream **a1, _QWORD *a2, unint64_t *a3, int a4, _BYTE *a5, BOOL *a6)
{
  unint64_t v11;
  unint64_t InitialLength;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  _BOOL4 v20;
  unint64_t v21;
  llvm::DWARFDebugAbbrev *DebugAbbrev;
  _QWORD *AbbreviationDeclarationSet;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD *v29;
  _BOOL4 v30;
  BOOL v31;
  int v32;
  int v33;
  uint64_t result;
  uint64_t v35;
  llvm::raw_ostream *v36;
  BOOL v37;
  llvm::raw_ostream *v38;
  void *v39;
  llvm::raw_ostream *v40;
  void *v41;
  llvm::raw_ostream *v42;
  void *v43;
  llvm::raw_ostream *v44;
  void *v45;
  llvm::raw_ostream *v46;
  void *v47;
  unsigned int v49;
  BOOL v50;
  BOOL *v51;
  _QWORD v52[2];
  int v53;
  unint64_t v54;

  v11 = *a3;
  InitialLength = llvm::DWARFDataExtractor::getInitialLength((uint64_t)a2, a3, 0);
  *a6 = v13 == 1;
  v49 = sub_1C63871E8((uint64_t)a2, a3, 0);
  v51 = a6;
  if (v49 < 5)
  {
    *a5 = 0;
    if (*a6)
      v19 = sub_1C63873F8((uint64_t)a2, a3, 0);
    else
      v19 = sub_1C6387364((uint64_t)a2, a3, 0);
    v21 = *a3;
    v20 = 1;
    if (llvm::DataExtractor::prepareRead((uint64_t)a2, *a3, 1, 0))
    {
      v18 = *(unsigned __int8 *)(*a2 + v21);
      ++*a3;
      v20 = 1;
    }
    else
    {
      v18 = 0;
    }
  }
  else
  {
    v14 = v11;
    v15 = *a3;
    if (llvm::DataExtractor::prepareRead((uint64_t)a2, *a3, 1, 0))
    {
      v16 = *(_BYTE *)(*a2 + v15);
      ++*a3;
    }
    else
    {
      v16 = 0;
    }
    *a5 = v16;
    v17 = *a3;
    if (llvm::DataExtractor::prepareRead((uint64_t)a2, *a3, 1, 0))
    {
      v18 = *(unsigned __int8 *)(*a2 + v17);
      ++*a3;
    }
    else
    {
      v18 = 0;
    }
    v11 = v14;
    if (*a6)
      v19 = sub_1C63873F8((uint64_t)a2, a3, 0);
    else
      v19 = sub_1C6387364((uint64_t)a2, a3, 0);
    v20 = *a5 - 1 < 6;
  }
  DebugAbbrev = (llvm::DWARFDebugAbbrev *)llvm::DWARFContext::getDebugAbbrev(a1[1]);
  AbbreviationDeclarationSet = llvm::DWARFDebugAbbrev::getAbbreviationDeclarationSet(DebugAbbrev, (void **)v19);
  v24 = v11;
  v25 = InitialLength + v11;
  v26 = a2[1];
  v27 = v49 - 6;
  v28 = v18;
  v29 = AbbreviationDeclarationSet;
  v30 = sub_1C54916D8(v28);
  v31 = v26 > v25 + 3 && v27 >= 0xFFFFFFFC;
  v32 = !v30;
  if (!v31)
    v32 = 1;
  if (!v29)
    v32 = 1;
  v33 = v32 | !v20;
  if (v33 == 1)
  {
    v50 = v30;
    v36 = llvm::WithColor::error(*a1, "", 0, 0);
    v52[0] = &unk_1E8169860;
    v52[1] = "Units[%d] - start offset: 0x%08llx \n";
    v53 = a4;
    v54 = v24;
    llvm::raw_ostream::operator<<(v36, (uint64_t)v52);
    if (v26 <= v25 + 3)
    {
      v40 = llvm::WithColor::note(*a1, "", 0, 0);
      v41 = (void *)*((_QWORD *)v40 + 4);
      if (*((_QWORD *)v40 + 3) - (_QWORD)v41 > 0x43uLL)
      {
        qmemcpy(v41, "The length for this unit is too large for the .debug_info provided.\n", 68);
        *((_QWORD *)v40 + 4) += 68;
      }
      else
      {
        llvm::raw_ostream::write(v40, "The length for this unit is too large for the .debug_info provided.\n", 0x44uLL);
      }
    }
    v37 = v50;
    if (v27 <= 0xFFFFFFFB)
    {
      v42 = llvm::WithColor::note(*a1, "", 0, 0);
      v43 = (void *)*((_QWORD *)v42 + 4);
      if (*((_QWORD *)v42 + 3) - (_QWORD)v43 > 0x2CuLL)
      {
        qmemcpy(v43, "The 16 bit unit header version is not valid.\n", 45);
        *((_QWORD *)v42 + 4) += 45;
      }
      else
      {
        llvm::raw_ostream::write(v42, "The 16 bit unit header version is not valid.\n", 0x2DuLL);
      }
      v37 = v50;
      if (v20)
      {
LABEL_29:
        if (v29)
          goto LABEL_30;
        goto LABEL_41;
      }
    }
    else if (v20)
    {
      goto LABEL_29;
    }
    v44 = llvm::WithColor::note(*a1, "", 0, 0);
    v45 = (void *)*((_QWORD *)v44 + 4);
    if (*((_QWORD *)v44 + 3) - (_QWORD)v45 > 0x24uLL)
    {
      qmemcpy(v45, "The unit type encoding is not valid.\n", 37);
      *((_QWORD *)v44 + 4) += 37;
    }
    else
    {
      llvm::raw_ostream::write(v44, "The unit type encoding is not valid.\n", 0x25uLL);
    }
    v37 = v50;
    if (v29)
    {
LABEL_30:
      if (!v37)
      {
        v38 = llvm::WithColor::note(*a1, "", 0, 0);
        v39 = (void *)*((_QWORD *)v38 + 4);
        if (*((_QWORD *)v38 + 3) - (_QWORD)v39 > 0x20uLL)
        {
          qmemcpy(v39, "The address size is unsupported.\n", 33);
          *((_QWORD *)v38 + 4) += 33;
        }
        else
        {
          llvm::raw_ostream::write(v38, "The address size is unsupported.\n", 0x21uLL);
        }
      }
      goto LABEL_23;
    }
LABEL_41:
    v46 = llvm::WithColor::note(*a1, "", 0, 0);
    v47 = (void *)*((_QWORD *)v46 + 4);
    if (*((_QWORD *)v46 + 3) - (_QWORD)v47 > 0x37uLL)
    {
      qmemcpy(v47, "The offset into the .debug_abbrev section is not valid.\n", 56);
      *((_QWORD *)v46 + 4) += 56;
    }
    else
    {
      llvm::raw_ostream::write(v46, "The offset into the .debug_abbrev section is not valid.\n", 0x38uLL);
    }
    v37 = v50;
    goto LABEL_30;
  }
LABEL_23:
  result = v33 ^ 1u;
  v35 = 12;
  if (!*v51)
    v35 = 4;
  *a3 = v35 + v25;
  return result;
}

llvm::raw_ostream *llvm::DWARFVerifier::error(llvm::raw_ostream **this)
{
  return llvm::WithColor::error(*this, "", 0, 0);
}

llvm::raw_ostream *llvm::DWARFVerifier::note(llvm::raw_ostream **this)
{
  return llvm::WithColor::note(*this, "", 0, 0);
}

uint64_t llvm::DWARFVerifier::verifyName(llvm::DWARFVerifier *this, llvm::DWARFUnit **a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  void **p_s1;
  uint64_t v10;
  void *v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  void *v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::DWARFUnit *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  llvm::raw_ostream *v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  uint64_t v27[2];
  void *__s1;
  size_t __n;
  uint64_t v30;
  void (**v31)(llvm::raw_ostream *__hidden);
  int v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char v36;
  uint64_t v37;
  int v38;
  void **p_p;
  void *__p;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[4];
  _QWORD v44[2];
  _QWORD v45[2];
  _QWORD v46[4];

  v46[3] = *MEMORY[0x1E0C80C00];
  __p = 0;
  v41 = 0;
  v42 = 0;
  v32 = 0;
  v36 = 0;
  v37 = 0;
  v30 = 0;
  v31 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  p_p = &__p;
  v38 = 0;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  __s1 = 0;
  __n = 0;
  llvm::DWARFDie::getFullName(a2, (uint64_t)&v31, (uint64_t)&__s1);
  v4 = v35 - v33;
  if (v35 != v33)
  {
    v35 = v33;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v31, v33, v4);
  }
  v5 = HIBYTE(v30) & 0x7F;
  if (v30 >= 0)
    v6 = HIBYTE(v30) & 0x7F;
  else
    v6 = __n;
  if (!v6)
  {
LABEL_18:
    v10 = 0;
    if ((v30 & 0x8000000000000000) == 0)
      goto LABEL_38;
    goto LABEL_19;
  }
  v7 = HIBYTE(v42) & 0x7F;
  if (v42 < 0)
    v7 = v41;
  if (v6 == v7)
  {
    if (v42 >= 0)
      v8 = (unsigned __int8 *)&__p;
    else
      v8 = (unsigned __int8 *)__p;
    if (v30 < 0)
    {
      v11 = __s1;
      if (!memcmp(__s1, v8, __n))
      {
        v10 = 0;
        goto LABEL_22;
      }
    }
    else
    {
      if ((v30 & 0x7F00000000000000) == 0)
      {
        v10 = 0;
        goto LABEL_38;
      }
      p_s1 = &__s1;
      while (*(unsigned __int8 *)p_s1 == *v8)
      {
        p_s1 = (void **)((char *)p_s1 + 1);
        ++v8;
        if (!--v5)
          goto LABEL_18;
      }
    }
  }
  v12 = llvm::WithColor::error(*(llvm::raw_ostream **)this, "", 0, 0);
  v13 = v12;
  v14 = (void *)*((_QWORD *)v12 + 4);
  if (*((_QWORD *)v12 + 3) - (_QWORD)v14 > 0x3AuLL)
  {
    qmemcpy(v14, "Simplified template DW_AT_name could not be reconstituted:\n", 59);
    *((_QWORD *)v12 + 4) += 59;
  }
  else
  {
    llvm::raw_ostream::write(v12, "Simplified template DW_AT_name could not be reconstituted:\n", 0x3BuLL);
  }
  v43[0] = "         original: {0}\n    reconstituted: {1}\n";
  v43[1] = 46;
  v43[2] = v46;
  v43[3] = 2;
  v44[0] = &unk_1E816A5D0;
  v44[1] = &__s1;
  v45[0] = &unk_1E816A5D0;
  v45[1] = &__p;
  v46[0] = v44;
  v46[1] = v45;
  sub_1C639D338((uint64_t)v43, v13);
  v15 = *(llvm::raw_ostream **)this;
  sub_1C624C4A4((uint64_t)v43, (__int128 *)this + 1);
  llvm::DWARFDie::dump((uint64_t *)a2, v15, 0, (uint64_t)v43);
  sub_1C624C568(v43);
  v16 = *(llvm::raw_ostream **)this;
  v17 = *(_BYTE **)(*(_QWORD *)this + 32);
  if ((unint64_t)v17 >= *(_QWORD *)(*(_QWORD *)this + 24))
  {
    llvm::raw_ostream::write(v16, 10);
  }
  else
  {
    *((_QWORD *)v16 + 4) = v17 + 1;
    *v17 = 10;
  }
  v18 = *a2;
  llvm::DWARFUnit::extractDIEsIfNeeded(v18, 1);
  v19 = *((_QWORD *)v18 + 36);
  v20 = *((_QWORD *)v18 + 37);
  v21 = v19 == v20;
  if (v19 == v20)
    v22 = 0;
  else
    v22 = (uint64_t)v18;
  if (v21)
    v19 = 0;
  v27[0] = v22;
  v27[1] = v19;
  v23 = *(llvm::raw_ostream **)this;
  sub_1C624C4A4((uint64_t)v43, (__int128 *)this + 1);
  llvm::DWARFDie::dump(v27, v23, 0, (uint64_t)v43);
  sub_1C624C568(v43);
  v24 = *(llvm::raw_ostream **)this;
  v25 = *(_BYTE **)(*(_QWORD *)this + 32);
  if ((unint64_t)v25 >= *(_QWORD *)(*(_QWORD *)this + 24))
  {
    llvm::raw_ostream::write(v24, 10);
  }
  else
  {
    *((_QWORD *)v24 + 4) = v25 + 1;
    *v25 = 10;
  }
  v10 = 1;
  if (v30 < 0)
  {
LABEL_19:
    v11 = __s1;
LABEL_22:
    operator delete(v11);
  }
LABEL_38:
  v31 = off_1E81A6E70;
  if (v38 == 1 && v33)
    MEMORY[0x1CAA32F9C](v33, 0x1000C8077774924);
  if (SHIBYTE(v42) < 0)
    operator delete(__p);
  return v10;
}

uint64_t llvm::DWARFVerifier::dump(llvm::DWARFVerifier *this, const llvm::DWARFDie *a2, uint64_t a3)
{
  llvm::raw_ostream *v6;
  _QWORD v8[12];

  v8[11] = *MEMORY[0x1E0C80C00];
  v6 = *(llvm::raw_ostream **)this;
  sub_1C624C4A4((uint64_t)v8, (__int128 *)this + 1);
  llvm::DWARFDie::dump((uint64_t *)a2, v6, a3, (uint64_t)v8);
  sub_1C624C568(v8);
  return *(_QWORD *)this;
}

uint64_t llvm::DWARFVerifier::verifyUnitContents(llvm::DWARFVerifier *a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  BOOL v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  const llvm::DWARFAbbreviationDeclaration *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  llvm::raw_ostream *v37;
  llvm::dwarf *v38;
  uint64_t v39;
  size_t v40;
  const char *v41;
  size_t v42;
  void *v43;
  llvm::raw_ostream *v44;
  llvm::raw_ostream *v45;
  llvm::raw_ostream *v46;
  void *v47;
  char *v48;
  unint64_t v49;
  void *v50;
  _OWORD *v51;
  llvm::raw_ostream *v52;
  llvm::raw_ostream *v53;
  void *v54;
  uint64_t v55;
  llvm::dwarf *v56;
  llvm::raw_ostream *v57;
  void *v58;
  size_t v59;
  const char *v60;
  size_t v61;
  _WORD *v62;
  llvm::raw_ostream *v63;
  void *v64;
  uint64_t v65;
  llvm::dwarf *v66;
  size_t v67;
  const char *v68;
  size_t v69;
  _OWORD *v70;
  _OWORD v73[4];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  void *__p[2];
  __int128 v82;
  _OWORD v83[2];
  uint64_t v84;
  int v85;
  llvm::DWARFUnit *v86;
  uint64_t v87;
  _QWORD v88[3];
  void *v89;
  __int128 v90;
  void **v91;
  void *v92;
  __int128 v93;
  void **v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  llvm::DWARFUnit::extractDIEsIfNeeded((llvm::DWARFUnit *)a2, 0);
  v6 = 0;
  v7 = -1431655765 * ((*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 3);
  if ((_DWORD)v7)
  {
    v25 = 0;
    v6 = 0;
    do
    {
      v26 = *(_QWORD *)(a2 + 288) + 24 * v25;
      v86 = (llvm::DWARFUnit *)a2;
      v87 = v26;
      v27 = *(_QWORD *)(v26 + 16);
      if (v27 && *(_WORD *)(v27 + 4))
      {
        llvm::DWARFDie::attributes((llvm::DWARFDie *)&v86, (uint64_t)&v80);
        v28 = v84;
        v79 = v84;
        v76 = v82;
        v77 = v83[0];
        v78 = v83[1];
        v74 = v80;
        v75 = *(_OWORD *)__p;
        v29 = v85;
        while (v28 != v29)
        {
          v73[0] = v75;
          v73[1] = v76;
          v73[2] = v77;
          v73[3] = v78;
          v30 = llvm::DWARFVerifier::verifyDebugInfoAttribute((uint64_t)a1, (uint64_t)&v86, (uint64_t)v73);
          v31 = llvm::DWARFVerifier::verifyDebugInfoForm((uint64_t)a1, (const llvm::DWARFDie *)&v86, (llvm::DWARFFormValue *)v73, a3, a4);
          v32 = *(const llvm::DWARFAbbreviationDeclaration **)(*((_QWORD *)&v74 + 1) + 16);
          if (v32)
          {
            llvm::DWARFDie::attribute_iterator::updateForIndex((uint64_t)&v74, v32, v28 + 1);
            v28 = v79;
          }
          v6 += v30 + v31;
        }
        v33 = llvm::DWARFVerifier::verifyName(a1, &v86);
        v34 = *(_QWORD *)(v87 + 16);
        if (v34)
        {
          if (*(_BYTE *)(v34 + 7))
          {
            if (v86)
            {
              if (llvm::DWARFUnit::getFirstChild((uint64_t)v86, v87))
              {
                if (v35)
                {
                  v36 = *(_QWORD *)(v35 + 16);
                  if (!v36 || !*(_WORD *)(v36 + 4))
                  {
                    v37 = llvm::WithColor::warning(*(llvm::raw_ostream **)a1, "", 0, 0);
                    v38 = 0;
                    v39 = *(_QWORD *)(v87 + 16);
                    if (v39)
                      v38 = (llvm::dwarf *)*(unsigned __int16 *)(v39 + 4);
                    v41 = llvm::dwarf::TagString(v38);
                    v42 = v40;
                    v43 = (void *)*((_QWORD *)v37 + 4);
                    if (v40 <= *((_QWORD *)v37 + 3) - (_QWORD)v43)
                    {
                      if (v40)
                      {
                        memcpy(v43, v41, v40);
                        v43 = (void *)(*((_QWORD *)v37 + 4) + v42);
                        *((_QWORD *)v37 + 4) = v43;
                      }
                    }
                    else
                    {
                      llvm::raw_ostream::write(v37, v41, v40);
                      v43 = (void *)*((_QWORD *)v37 + 4);
                    }
                    if (*((_QWORD *)v37 + 3) - (_QWORD)v43 > 0x2DuLL)
                    {
                      qmemcpy(v43, " has DW_CHILDREN_yes but DIE has no children: ", 46);
                      *((_QWORD *)v37 + 4) += 46;
                    }
                    else
                    {
                      llvm::raw_ostream::write(v37, " has DW_CHILDREN_yes but DIE has no children: ", 0x2EuLL);
                    }
                    v44 = *(llvm::raw_ostream **)a1;
                    v93 = 0u;
                    v88[2] = 0;
                    v90 = 0u;
                    v88[0] = -1;
                    v88[1] = 0x1040000FFFFFFFFLL;
                    v89 = &unk_1E8169658;
                    *(_QWORD *)&v90 = llvm::WithColor::defaultErrorHandler;
                    v91 = &v89;
                    v92 = &unk_1E8169658;
                    *(_QWORD *)&v93 = llvm::WithColor::defaultWarningHandler;
                    v94 = &v92;
                    llvm::DWARFDie::dump((uint64_t *)&v86, v44, 0, (uint64_t)v88);
                    sub_1C624C568(v88);
                  }
                }
              }
            }
          }
        }
        v6 += v33 + llvm::DWARFVerifier::verifyDebugInfoCallSite((llvm::raw_ostream **)a1, (const llvm::DWARFDie *)&v86);
      }
      ++v25;
    }
    while (v25 != v7);
  }
  llvm::DWARFUnit::extractDIEsIfNeeded((llvm::DWARFUnit *)a2, 0);
  v9 = *(_QWORD *)(a2 + 288);
  v8 = *(_QWORD *)(a2 + 296);
  v10 = v9 == v8;
  if (v9 == v8)
    v11 = 0;
  else
    v11 = a2;
  if (v10)
    v12 = 0;
  else
    v12 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)&v74 = v11;
  *((_QWORD *)&v74 + 1) = v12;
  if (v10 || v12 == 0)
  {
    v57 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
    v58 = (void *)*((_QWORD *)v57 + 4);
    if (*((_QWORD *)v57 + 3) - (_QWORD)v58 > 0x1DuLL)
    {
      qmemcpy(v58, "Compilation unit without DIE.\n", 30);
      *((_QWORD *)v57 + 4) += 30;
    }
    else
    {
      llvm::raw_ostream::write(v57, "Compilation unit without DIE.\n", 0x1EuLL);
    }
    return (v6 + 1);
  }
  else
  {
    v14 = *(_QWORD *)(v12 + 16);
    if (!v14
      || ((v15 = *(unsigned __int16 *)(v14 + 4), (v15 - 17) <= 0x39)
        ? (v16 = ((1 << (v15 - 17)) & 0x201080000000001) == 0)
        : (v16 = 1),
          v16))
    {
      v52 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
      v53 = v52;
      v54 = (void *)*((_QWORD *)v52 + 4);
      if (*((_QWORD *)v52 + 3) - (_QWORD)v54 > 0x2CuLL)
      {
        qmemcpy(v54, "Compilation unit root DIE is not a unit DIE: ", 45);
        *((_QWORD *)v52 + 4) += 45;
      }
      else
      {
        llvm::raw_ostream::write(v52, "Compilation unit root DIE is not a unit DIE: ", 0x2DuLL);
      }
      v55 = *(_QWORD *)(v12 + 16);
      if (v55)
        v56 = (llvm::dwarf *)*(unsigned __int16 *)(v55 + 4);
      else
        v56 = 0;
      v60 = llvm::dwarf::TagString(v56);
      v61 = v59;
      v62 = (_WORD *)*((_QWORD *)v53 + 4);
      if (v59 <= *((_QWORD *)v53 + 3) - (_QWORD)v62)
      {
        if (v59)
        {
          memcpy(v62, v60, v59);
          v62 = (_WORD *)(*((_QWORD *)v53 + 4) + v61);
          *((_QWORD *)v53 + 4) = v62;
        }
      }
      else
      {
        llvm::raw_ostream::write(v53, v60, v59);
        v62 = (_WORD *)*((_QWORD *)v53 + 4);
      }
      if (*((_QWORD *)v53 + 3) - (_QWORD)v62 > 1uLL)
      {
        *v62 = 2606;
        *((_QWORD *)v53 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v53, ".\n", 2uLL);
      }
      ++v6;
      v14 = *(_QWORD *)(v9 + 16);
      v17 = *(unsigned __int8 *)(a2 + 96);
      if (v14)
        v15 = *(unsigned __int16 *)(v14 + 4);
      else
        v15 = 0;
    }
    else
    {
      v17 = *(unsigned __int8 *)(a2 + 96);
    }
    v18 = v17 - 1;
    switch(v17)
    {
      case 1:
        if (v15 == 17)
          goto LABEL_23;
        goto LABEL_64;
      case 2:
        if (v15 != 65)
          goto LABEL_64;
        goto LABEL_23;
      case 3:
        if (v15 != 60)
          goto LABEL_64;
        goto LABEL_23;
      case 4:
        if (v15 != 74)
          goto LABEL_64;
        goto LABEL_23;
      case 5:
      case 6:
        v19 = v15 - 17;
        v20 = v19 > 0x39;
        v21 = (1 << v19) & 0x201080000000001;
        if (v20 || v21 == 0)
          goto LABEL_64;
LABEL_23:
        if (v14)
          goto LABEL_24;
        goto LABEL_26;
      default:
LABEL_64:
        v45 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
        v46 = v45;
        v47 = (void *)*((_QWORD *)v45 + 4);
        if (*((_QWORD *)v45 + 3) - (_QWORD)v47 > 0x16uLL)
        {
          qmemcpy(v47, "Compilation unit type (", 23);
          *((_QWORD *)v45 + 4) += 23;
        }
        else
        {
          llvm::raw_ostream::write(v45, "Compilation unit type (", 0x17uLL);
        }
        if (v18 >= 6)
          goto LABEL_69;
        v48 = off_1E816A7A8[(char)v18];
        v49 = qword_1C8651ED8[(char)v18];
        v50 = (void *)*((_QWORD *)v46 + 4);
        if (v49 <= *((_QWORD *)v46 + 3) - (_QWORD)v50)
        {
          memcpy(v50, v48, qword_1C8651ED8[(char)v18]);
          v51 = (_OWORD *)(*((_QWORD *)v46 + 4) + v49);
          *((_QWORD *)v46 + 4) = v51;
        }
        else
        {
          llvm::raw_ostream::write(v46, v48, qword_1C8651ED8[(char)v18]);
LABEL_69:
          v51 = (_OWORD *)*((_QWORD *)v46 + 4);
        }
        if (*((_QWORD *)v46 + 3) - (_QWORD)v51 > 0xFuLL)
        {
          *v51 = *(_OWORD *)") and root DIE (";
          *((_QWORD *)v46 + 4) += 16;
        }
        else
        {
          llvm::raw_ostream::write(v46, ") and root DIE (", 0x10uLL);
        }
        v65 = *(_QWORD *)(v9 + 16);
        if (v65)
          v66 = (llvm::dwarf *)*(unsigned __int16 *)(v65 + 4);
        else
          v66 = 0;
        v68 = llvm::dwarf::TagString(v66);
        v69 = v67;
        v70 = (_OWORD *)*((_QWORD *)v46 + 4);
        if (v67 <= *((_QWORD *)v46 + 3) - (_QWORD)v70)
        {
          if (v67)
          {
            memcpy(v70, v68, v67);
            v70 = (_OWORD *)(*((_QWORD *)v46 + 4) + v69);
            *((_QWORD *)v46 + 4) = v70;
          }
        }
        else
        {
          llvm::raw_ostream::write(v46, v68, v67);
          v70 = (_OWORD *)*((_QWORD *)v46 + 4);
        }
        if (*((_QWORD *)v46 + 3) - (_QWORD)v70 > 0xFuLL)
        {
          *v70 = *(_OWORD *)") do not match.\n";
          *((_QWORD *)v46 + 4) += 16;
        }
        else
        {
          llvm::raw_ostream::write(v46, ") do not match.\n", 0x10uLL);
        }
        ++v6;
        v14 = *(_QWORD *)(v12 + 16);
        if (v14)
        {
LABEL_24:
          if (*(_WORD *)(v14 + 4) == 74 && *(_BYTE *)(v14 + 7))
          {
            v63 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
            v64 = (void *)*((_QWORD *)v63 + 4);
            if (*((_QWORD *)v63 + 3) - (_QWORD)v64 > 0x27uLL)
            {
              qmemcpy(v64, "Skeleton compilation unit has children.\n", 40);
              *((_QWORD *)v63 + 4) += 40;
            }
            else
            {
              llvm::raw_ostream::write(v63, "Skeleton compilation unit has children.\n", 0x28uLL);
            }
            ++v6;
          }
        }
LABEL_26:
        v80 = 0u;
        *(_OWORD *)__p = 0u;
        v83[0] = 0uLL;
        *(_QWORD *)&v82 = 0;
        *((_QWORD *)&v82 + 1) = v83;
        v23 = llvm::DWARFVerifier::verifyDieRanges((uint64_t)a1, (llvm::DWARFDie *)&v74, (uint64_t *)&v80)
            + v6;
        sub_1C54BEE78(*(_QWORD **)&v83[0]);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        break;
    }
  }
  return v23;
}

uint64_t llvm::DWARFVerifier::verifyDebugInfoAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::DWARFUnit *v6;
  llvm::dwarf *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  char v13;
  __int16 v14;
  BOOL v15;
  _BOOL4 v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  llvm::dwarf *v25;
  uint64_t *v26;
  uint64_t *v27;
  void **p_data;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  llvm::dwarf *v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  const char *v49;
  uint64_t v50;
  __int16 v51;
  unint64_t AsUnsignedConstant;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  const char *v60;
  __int128 *v61;
  const char *v62;
  uint64_t v63;
  __int16 v64;
  const char *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  llvm::dwarf *v69;
  const char *v70;
  uint64_t v71;
  void ***v72;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  char v80;
  __int128 *v81;
  char v82;
  __int128 *v83;
  uint64_t v84;
  _QWORD v85[4];
  __int16 v86;
  _QWORD v87[4];
  __int16 v88;
  _QWORD v89[4];
  __int16 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  _QWORD v94[2];
  _QWORD v95[2];
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  char *v99;
  __int128 v100;
  std::string *v101;
  uint64_t v102;
  __int16 v103;
  _QWORD v104[3];
  unsigned int v105;
  std::string v106;
  uint64_t v107;
  void *v108;
  _QWORD *v109;
  _QWORD v110[2];
  std::string *v111;
  uint64_t v112;
  const char *v113;
  uint64_t v114;
  void *v115;
  __int128 **v116;
  _QWORD v117[2];
  __int128 *v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  __int16 v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v105 = 0;
  v104[0] = &v105;
  v104[1] = a1;
  v104[2] = a2;
  v6 = *(llvm::DWARFUnit **)a2;
  v7 = (llvm::dwarf *)*(unsigned __int16 *)(a3 + 12);
  if (*(unsigned __int16 *)(a3 + 12) <= 0x46u)
  {
    if (*(unsigned __int16 *)(a3 + 12) <= 0x30u)
    {
      if ((_DWORD)v7 == 2)
      {
        llvm::DWARFDie::getLocations((llvm::DWARFUnit **)a2, (llvm::dwarf *)2, (uint64_t)&v118);
        v8 = (char *)v118;
        if ((v121 & 1) == 0)
        {
          v9 = (char *)v119;
          if (v118 != (__int128 *)v119)
          {
            do
            {
              v10 = *((_QWORD *)v8 + 4);
              v11 = *((_QWORD *)v8 + 5);
              v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 520) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 520));
              v13 = *((_BYTE *)v6 + 34);
              v14 = *((unsigned __int8 *)v6 + 35) | 0x100;
              *(_QWORD *)&v100 = v10;
              *((_QWORD *)&v100 + 1) = v11;
              LOWORD(v101) = v12;
              LOBYTE(v102) = v13;
              *(_WORD *)((char *)&v102 + 1) = v14;
              sub_1C54ADD60((uint64_t)&v111, &v100, 0);
              sub_1C54ADD60((uint64_t)&v106, &v100, *((unint64_t *)&v100 + 1));
              v15 = v111 == (std::string *)v106.__r_.__value_.__l.__data_ && v112 == v106.__r_.__value_.__l.__size_;
              LOBYTE(v16) = !v15;
              if (!v15 && !BYTE4(v113))
              {
                do
                {
                  sub_1C54AD0C8((unint64_t *)&v111);
                  v16 = v111 != (std::string *)v106.__r_.__value_.__l.__data_ || v112 != v106.__r_.__value_.__l.__size_;
                }
                while (v16 && BYTE4(v113) == 0);
              }
              if (v16 || !llvm::DWARFExpression::verify((llvm::DWARFExpression *)&v100, v6))
              {
                v111 = (std::string *)"DIE contains invalid DWARF expression:";
                LOWORD(v115) = 259;
                sub_1C54BA214((uint64_t)v104, (uint64_t)&v111);
              }
              v8 += 64;
            }
            while (v8 != v9);
          }
          goto LABEL_115;
        }
        v118 = 0;
        if (v8)
        {
          if ((*(unsigned int (**)(char *, void *))(*(_QWORD *)v8 + 48))(v8, &llvm::ErrorList::ID))
          {
            v26 = (uint64_t *)*((_QWORD *)v8 + 1);
            v27 = (uint64_t *)*((_QWORD *)v8 + 2);
            if (v26 == v27)
            {
              p_data = 0;
            }
            else
            {
              p_data = 0;
              do
              {
                v106.__r_.__value_.__r.__words[0] = (std::string::size_type)p_data;
                v29 = *v26;
                *v26 = 0;
                if ((*(unsigned int (**)(uint64_t, void *))(*(_QWORD *)v29 + 48))(v29, &llvm::ResolverError::ID))
                {
                  v30 = *((unsigned __int8 *)v6 + 209);
                  if (*((_BYTE *)v6 + 209))
                    v31 = 0;
                  else
                    v31 = v29;
                  *(_QWORD *)&v100 = v31;
                  if (v30)
                    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
                }
                else
                {
                  *(_QWORD *)&v100 = v29;
                }
                sub_1C6174794(&v106.__r_.__value_.__l.__data_, (char **)&v100, &v111);
                p_data = (void **)&v111->__r_.__value_.__l.__data_;
                v111 = 0;
                if ((_QWORD)v100)
                  (*(void (**)(_QWORD))(*(_QWORD *)v100 + 8))(v100);
                if (v106.__r_.__value_.__r.__words[0])
                  (*(void (**)(std::string::size_type))(*(_QWORD *)v106.__r_.__value_.__l.__data_ + 8))(v106.__r_.__value_.__r.__words[0]);
                ++v26;
              }
              while (v26 != v27);
            }
            (*(void (**)(char *))(*(_QWORD *)v8 + 8))(v8);
            v8 = (char *)p_data;
            if (!p_data)
              goto LABEL_115;
            goto LABEL_127;
          }
          if (((*(uint64_t (**)(char *, void *))(*(_QWORD *)v8 + 48))(v8, &llvm::ResolverError::ID) & 1) == 0
            || !*((_BYTE *)v6 + 209))
          {
LABEL_127:
            v99 = v8;
            sub_1C61D2548(&v99, &v106);
            LOWORD(v115) = 260;
            v111 = &v106;
            sub_1C54BA214((uint64_t)v104, (uint64_t)&v111);
            if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v106.__r_.__value_.__l.__data_);
            if (v99)
              (*(void (**)(char *))(*(_QWORD *)v99 + 8))(v99);
            goto LABEL_115;
          }
          (*(void (**)(char *))(*(_QWORD *)v8 + 8))(v8);
        }
LABEL_115:
        if ((v121 & 1) != 0)
        {
          v61 = v118;
          v118 = 0;
          if (v61)
            (*(void (**)(__int128 *))(*(_QWORD *)v61 + 8))(v61);
        }
        else
        {
          v111 = (std::string *)&v118;
          sub_1C548DA28((void ***)&v111);
        }
        return v105;
      }
      if ((_DWORD)v7 != 16)
        return v105;
      if (llvm::DWARFFormValue::isFormClass((unsigned __int16 *)(a3 + 16), 8))
      {
        v118 = *(__int128 **)(a3 + 24);
        v119 = 1;
        if ((unint64_t)v118 < *(_QWORD *)(*((_QWORD *)v6 + 18) + 8))
          return v105;
        v111 = (std::string *)"{0:x8}";
        v112 = 6;
        v113 = (const char *)v117;
        v114 = 1;
        v115 = &unk_1E816A600;
        v116 = &v118;
        v117[0] = &v115;
        v106.__r_.__value_.__r.__words[0] = (std::string::size_type)"DW_AT_stmt_list offset is beyond .debug_line bounds: ";
        v106.__r_.__value_.__r.__words[2] = (std::string::size_type)&v111;
        v51 = 1539;
        goto LABEL_150;
      }
      v65 = "DIE has invalid DW_AT_stmt_list encoding:";
      goto LABEL_122;
    }
    if ((_DWORD)v7 != 49)
    {
      if ((_DWORD)v7 != 58)
        return v105;
      goto LABEL_105;
    }
    goto LABEL_39;
  }
  if (*(unsigned __int16 *)(a3 + 12) <= 0x48u)
  {
    if ((_DWORD)v7 != 71)
      return v105;
LABEL_39:
    if (llvm::DWARFDie::getAttributeValueAsReferencedDie((llvm::DWARFUnit **)a2, *(unsigned __int16 *)(a3 + 12)) && v23)
    {
      v24 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 16);
      v25 = v24 ? (llvm::dwarf *)*(unsigned __int16 *)(v24 + 4) : 0;
      v32 = *(_QWORD *)(v23 + 16);
      v33 = v32 ? (llvm::dwarf *)*(unsigned __int16 *)(v32 + 4) : 0;
      if ((_DWORD)v25 != (_DWORD)v33 && ((_DWORD)v25 != 29 || (_DWORD)v33 != 46))
      {
        v34 = (_DWORD)v25 == 16649 && (_DWORD)v33 == 46;
        v35 = v34;
        v36 = (_DWORD)v33 == 13 && (_DWORD)v25 == 52;
        if (!v36 && !v35)
        {
          LOWORD(v98) = 1283;
          *(_QWORD *)&v96 = "DIE with tag ";
          *(_QWORD *)&v97 = llvm::dwarf::TagString(v25);
          *((_QWORD *)&v97 + 1) = v37;
          *(_QWORD *)&v100 = &v96;
          v101 = (std::string *)" has ";
          v103 = 770;
          v38 = llvm::dwarf::AttributeString(v7);
          v118 = &v100;
          v120 = v38;
          v121 = v39;
          v122 = 1282;
          v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
          v106.__r_.__value_.__r.__words[2] = (std::string::size_type)" that points to DIE with incompatible tag ";
          LOWORD(v108) = 770;
          v40 = llvm::dwarf::TagString(v33);
          v111 = &v106;
          v113 = v40;
          v114 = v41;
          LOWORD(v115) = 1282;
LABEL_134:
          v72 = (void ***)&v111;
LABEL_135:
          sub_1C54BA214((uint64_t)v104, (uint64_t)v72);
          return v105;
        }
      }
    }
    return v105;
  }
  switch((_DWORD)v7)
  {
    case 'I':
      if (llvm::DWARFDie::getAttributeValueAsReferencedDie((llvm::DWARFUnit **)a2, 73))
      {
        v20 = v19;
        if (v19)
        {
          v21 = *(_QWORD *)(v19 + 16);
          v22 = v21 ? *(unsigned __int16 *)(v21 + 4) : 0;
          if (!sub_1C6253858(v22))
          {
            v66 = llvm::dwarf::AttributeString((llvm::dwarf *)0x49);
            v122 = 1283;
            v118 = (__int128 *)"DIE has ";
            v120 = v66;
            v121 = v67;
            v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
            v106.__r_.__value_.__r.__words[2] = (std::string::size_type)" with incompatible tag ";
            LOWORD(v108) = 770;
            v68 = *(_QWORD *)(v20 + 16);
            if (v68)
              v69 = (llvm::dwarf *)*(unsigned __int16 *)(v68 + 4);
            else
              v69 = 0;
            v70 = llvm::dwarf::TagString(v69);
            v111 = &v106;
            v113 = v70;
            v114 = v71;
            v64 = 1282;
            goto LABEL_133;
          }
        }
      }
      break;
    case 'X':
LABEL_105:
      AsUnsignedConstant = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)(a3 + 16));
      v95[0] = AsUnsignedConstant;
      v95[1] = v53;
      if (!(_BYTE)v53)
      {
        v62 = llvm::dwarf::AttributeString(v7);
        LOWORD(v108) = 1283;
        v106.__r_.__value_.__r.__words[0] = (std::string::size_type)"DIE has ";
        v106.__r_.__value_.__r.__words[2] = (std::string::size_type)v62;
        v107 = v63;
        v111 = &v106;
        v113 = " with invalid encoding";
        v64 = 770;
LABEL_133:
        LOWORD(v115) = v64;
        goto LABEL_134;
      }
      v54 = AsUnsignedConstant;
      if (*((_BYTE *)v6 + 209) && (*((_BYTE *)v6 + 96) & 0xFB) != 2)
        return v105;
      llvm::DWARFContext::getLineTableForUnit(*((llvm::DWARFContext **)v6 + 1), v6);
      if (v55)
      {
        if (*(unsigned __int16 *)(v55 + 16) < 5u)
        {
          if (v54)
          {
            v76 = *(_QWORD *)(v55 + 96);
            v77 = *(_QWORD *)(v55 + 104);
            if (0xF0F0F0F0F0F0F0F1 * ((v77 - v76) >> 3) >= v54)
              return v105;
          }
          else
          {
            v76 = *(_QWORD *)(v55 + 96);
            v77 = *(_QWORD *)(v55 + 104);
          }
          if (v76 != v77)
          {
            v59 = 0xF0F0F0F0F0F0F0F1 * ((v77 - v76) >> 3);
            v60 = "1-";
LABEL_144:
            v94[0] = v59;
            v94[1] = 1;
            v86 = 1283;
            v85[0] = "DIE has ";
            v85[2] = llvm::dwarf::AttributeString(v7);
            v85[3] = v78;
            v87[0] = v85;
            v87[2] = " with an invalid file index ";
            v88 = 770;
            v111 = (std::string *)"{0}";
            v112 = 3;
            v113 = (const char *)v117;
            v114 = 1;
            v115 = &unk_1E816A600;
            v116 = (__int128 **)v95;
            v117[0] = &v115;
            v89[0] = v87;
            v89[2] = &v111;
            v90 = 1538;
            *(_QWORD *)&v91 = v89;
            *(_QWORD *)&v92 = " (valid values are [";
            LOWORD(v93) = 770;
            if (*v60)
            {
              *(_QWORD *)&v96 = &v91;
              *(_QWORD *)&v97 = v60;
              LOWORD(v98) = 770;
              v106.__r_.__value_.__r.__words[0] = (std::string::size_type)"{0}";
              v106.__r_.__value_.__l.__size_ = 3;
              v106.__r_.__value_.__r.__words[2] = (std::string::size_type)v110;
              v107 = 1;
              v79 = v94;
              v108 = &unk_1E816A600;
              v109 = v94;
              v80 = 2;
              v81 = &v96;
              v110[0] = &v108;
            }
            else
            {
              v96 = v91;
              v97 = v92;
              v98 = v93;
              v83 = (__int128 *)&v106;
              v106.__r_.__value_.__r.__words[0] = (std::string::size_type)"{0}";
              v106.__r_.__value_.__l.__size_ = 3;
              v106.__r_.__value_.__r.__words[2] = (std::string::size_type)v110;
              v107 = 1;
              v108 = &unk_1E816A600;
              v109 = v94;
              v110[0] = &v108;
              if (v93 == 1)
              {
                *(_QWORD *)&v100 = &v106;
                v103 = 262;
                v82 = 6;
                goto LABEL_147;
              }
              v79 = (_QWORD *)*((_QWORD *)&v96 + 1);
              v81 = (__int128 *)v96;
              if (BYTE1(v98) == 1)
              {
                v80 = v93;
              }
              else
              {
                v81 = &v96;
                v80 = 2;
              }
            }
            *(_QWORD *)&v100 = v81;
            *((_QWORD *)&v100 + 1) = v79;
            v101 = &v106;
            LOBYTE(v103) = v80;
            v82 = 2;
            v83 = &v100;
            HIBYTE(v103) = 6;
LABEL_147:
            v118 = v83;
            v120 = "])";
            LOBYTE(v122) = v82;
            HIBYTE(v122) = 3;
            v72 = (void ***)&v118;
            goto LABEL_135;
          }
        }
        else
        {
          v57 = *(_QWORD *)(v55 + 96);
          v56 = *(_QWORD *)(v55 + 104);
          v58 = 0xF0F0F0F0F0F0F0F1 * ((v56 - v57) >> 3);
          if (v58 > v54)
            return v105;
          if (v57 != v56)
          {
            v59 = v58 - 1;
            v60 = "0-";
            goto LABEL_144;
          }
        }
        LOWORD(v98) = 1283;
        *(_QWORD *)&v96 = "DIE has ";
        *(_QWORD *)&v97 = llvm::dwarf::AttributeString(v7);
        *((_QWORD *)&v97 + 1) = v84;
        *(_QWORD *)&v100 = &v96;
        v101 = (std::string *)" with an invalid file index ";
        v51 = 770;
        v103 = 770;
        v111 = (std::string *)"{0}";
        v112 = 3;
        v113 = (const char *)v117;
        v114 = 1;
        v115 = &unk_1E816A600;
        v116 = (__int128 **)v95;
        v117[0] = &v115;
        v118 = &v100;
        v120 = (const char *)&v111;
        v122 = 1538;
        v75 = " (the file table in the prologue is empty)";
      }
      else
      {
        LOWORD(v98) = 1283;
        *(_QWORD *)&v96 = "DIE has ";
        *(_QWORD *)&v97 = llvm::dwarf::AttributeString(v7);
        *((_QWORD *)&v97 + 1) = v74;
        *(_QWORD *)&v100 = &v96;
        v101 = (std::string *)" that references a file with index ";
        v51 = 770;
        v103 = 770;
        v111 = (std::string *)"{0}";
        v112 = 3;
        v113 = (const char *)v117;
        v114 = 1;
        v115 = &unk_1E816A600;
        v116 = (__int128 **)v95;
        v117[0] = &v115;
        v118 = &v100;
        v120 = (const char *)&v111;
        v122 = 1538;
        v75 = " and the compile unit has no line table";
      }
      v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
      v106.__r_.__value_.__r.__words[2] = (std::string::size_type)v75;
LABEL_150:
      LOWORD(v108) = v51;
      v72 = (void ***)&v106;
      goto LABEL_135;
    case 'U':
      v42 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 520);
      if (!llvm::DWARFFormValue::isFormClass((unsigned __int16 *)(a3 + 16), 8))
      {
        v65 = "DIE has invalid DW_AT_ranges encoding:";
LABEL_122:
        v111 = (std::string *)v65;
        v64 = 259;
        goto LABEL_133;
      }
      v43 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)&v96 = v43;
      *((_QWORD *)&v96 + 1) = 1;
      v44 = *((unsigned __int16 *)v6 + 16);
      v45 = 152;
      if (v44 < 5)
        v45 = 144;
      v46 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v42 + v45))(v42) + 8);
      if (v46)
        v47 = 1;
      else
        v47 = *((_BYTE *)v6 + 209) == 0;
      if (v47 && v43 >= v46)
      {
        v103 = 1283;
        if (v44 >= 5)
          v49 = ".debug_rnglists";
        else
          v49 = ".debug_ranges";
        *(_QWORD *)&v100 = "DW_AT_ranges offset is beyond ";
        v50 = 15;
        if (v44 < 5)
          v50 = 13;
        v101 = (std::string *)v49;
        v102 = v50;
        v118 = &v100;
        v120 = " bounds: ";
        v122 = 770;
        v111 = (std::string *)"{0:x8}";
        v112 = 6;
        v113 = (const char *)v117;
        v114 = 1;
        v115 = &unk_1E816A600;
        v116 = (__int128 **)&v96;
        v117[0] = &v115;
        v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
        v106.__r_.__value_.__r.__words[2] = (std::string::size_type)&v111;
        v51 = 1538;
        goto LABEL_150;
      }
      break;
    default:
      return v105;
  }
  return v105;
}

uint64_t llvm::DWARFVerifier::verifyDebugInfoForm(uint64_t a1, const llvm::DWARFDie *a2, llvm::DWARFFormValue *this, uint64_t **a4, uint64_t **a5)
{
  uint64_t result;
  llvm::dwarf *v7;
  uint64_t v9;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string::size_type v17;
  uint64_t **v18;
  std::string *v19;
  uint64_t **v20;
  char *v21;
  unint64_t AsReference;
  std::string::size_type v24;
  llvm::raw_ostream *v25;
  size_t v26;
  const char *v27;
  size_t v28;
  _QWORD *v29;
  llvm::raw_ostream *v30;
  std::string *v31;
  size_t size;
  _WORD *v33;
  llvm::raw_ostream *v34;
  __int128 *v35;
  void *v36;
  uint64_t v37;
  llvm::raw_ostream *v38;
  llvm::raw_ostream *v39;
  _BYTE *v40;
  llvm::raw_ostream *v41;
  void *v42;
  char *v43;
  _QWORD v44[3];
  uint64_t *v45[2];
  _QWORD v46[11];
  std::string __p[3];
  uint64_t v48;

  result = 0;
  v48 = *MEMORY[0x1E0C80C00];
  v7 = (llvm::dwarf *)*((unsigned __int16 *)this + 8);
  if (v7 > 0x28)
    return result;
  if (((1 << (char)v7) & 0x1E004004000) != 0)
  {
    llvm::DWARFFormValue::getAsCString((llvm::DWARFFormValue *)((char *)this + 16), (uint64_t)__p);
    if ((__p[0].__r_.__value_.__s.__data_[8] & 1) == 0)
      return 0;
    v21 = (char *)__p[0].__r_.__value_.__r.__words[0];
    if (!__p[0].__r_.__value_.__r.__words[0])
      return 0;
    v30 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
    v43 = v21;
    sub_1C61D2548(&v43, __p);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = __p;
    else
      v31 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p[0].__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v30, (const char *)v31, size);
    v33 = (_WORD *)*((_QWORD *)v30 + 4);
    if (*((_QWORD *)v30 + 3) - (_QWORD)v33 > 1uLL)
    {
      *v33 = 2618;
      *((_QWORD *)v30 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v30, ":\n", 2uLL);
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (v43)
      (*(void (**)(char *))(*(_QWORD *)v43 + 8))(v43);
    v34 = *(llvm::raw_ostream **)a1;
    v35 = (__int128 *)(a1 + 16);
  }
  else
  {
    v9 = *(_QWORD *)a2;
    if (((1 << (char)v7) & 0x3E0000) == 0)
    {
      if (v7 != (llvm::dwarf *)16)
        return result;
      AsReference = llvm::DWARFFormValue::getAsReference((llvm::DWARFFormValue *)((char *)this + 16));
      __p[0].__r_.__value_.__r.__words[0] = AsReference;
      __p[0].__r_.__value_.__l.__size_ = v24;
      if (!(_BYTE)v24)
        return 0;
      if (AsReference < *(_QWORD *)(*(_QWORD *)(v9 + 16) + 8))
      {
        v18 = sub_1C4E2B0E8(a5, AsReference, (uint64_t **)__p) + 5;
        v44[0] = **((_QWORD **)a2 + 1);
        v19 = (std::string *)v44;
        v20 = (uint64_t **)v44;
        goto LABEL_9;
      }
      v41 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
      v42 = (void *)*((_QWORD *)v41 + 4);
      if (*((_QWORD *)v41 + 3) - (_QWORD)v42 > 0x32uLL)
      {
        qmemcpy(v42, "DW_FORM_ref_addr offset beyond .debug_info bounds:\n", 51);
        *((_QWORD *)v41 + 4) += 51;
      }
      else
      {
        llvm::raw_ostream::write(v41, "DW_FORM_ref_addr offset beyond .debug_info bounds:\n", 0x33uLL);
      }
      v39 = (llvm::raw_ostream *)llvm::DWARFVerifier::dump((llvm::DWARFVerifier *)a1, a2, 0);
      goto LABEL_43;
    }
    v12 = (uint64_t *)llvm::DWARFFormValue::getAsReference((llvm::DWARFFormValue *)((char *)this + 16));
    v45[0] = v12;
    v45[1] = v13;
    if (!(_BYTE)v13)
      return 0;
    v14 = *(_QWORD *)(v9 + 40);
    v15 = 12;
    if (!*(_BYTE *)(v9 + 35))
      v15 = 4;
    v16 = v15 + v14;
    v17 = *((_QWORD *)this + 3);
    if (v17 < v15 + v14)
    {
      v18 = sub_1C4E2B0E8(a4, (unint64_t)v12, v45) + 5;
      __p[0].__r_.__value_.__r.__words[0] = **((_QWORD **)a2 + 1);
      v19 = __p;
      v20 = (uint64_t **)__p;
LABEL_9:
      sub_1C47BC21C(v18, (unint64_t *)v19, v20);
      return 0;
    }
    v25 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
    v27 = llvm::dwarf::FormEncodingString(v7);
    v28 = v26;
    v29 = (_QWORD *)*((_QWORD *)v25 + 4);
    if (v26 <= *((_QWORD *)v25 + 3) - (_QWORD)v29)
    {
      if (v26)
      {
        memcpy(v29, v27, v26);
        v29 = (_QWORD *)(*((_QWORD *)v25 + 4) + v28);
        *((_QWORD *)v25 + 4) = v29;
      }
    }
    else
    {
      llvm::raw_ostream::write(v25, v27, v26);
      v29 = (_QWORD *)*((_QWORD *)v25 + 4);
    }
    if (*((_QWORD *)v25 + 3) - (_QWORD)v29 > 0xAuLL)
    {
      *(_DWORD *)((char *)v29 + 7) = 544499059;
      *v29 = *(_QWORD *)" CU offset ";
      *((_QWORD *)v25 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(v25, " CU offset ", 0xBuLL);
    }
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E8133270;
    __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)"0x%08llx";
    __p[0].__r_.__value_.__r.__words[2] = v17;
    llvm::raw_ostream::operator<<(v25, (uint64_t)__p);
    v36 = (void *)*((_QWORD *)v25 + 4);
    if (*((_QWORD *)v25 + 3) - (_QWORD)v36 > 0x29uLL)
    {
      qmemcpy(v36, " is invalid (must be less than CU size of ", 42);
      *((_QWORD *)v25 + 4) += 42;
    }
    else
    {
      llvm::raw_ostream::write(v25, " is invalid (must be less than CU size of ", 0x2AuLL);
    }
    v44[0] = &unk_1E8133270;
    v44[1] = "0x%08llx";
    v44[2] = v16;
    llvm::raw_ostream::operator<<(v25, (uint64_t)v44);
    v37 = *((_QWORD *)v25 + 4);
    if ((unint64_t)(*((_QWORD *)v25 + 3) - v37) > 2)
    {
      *(_BYTE *)(v37 + 2) = 10;
      *(_WORD *)v37 = 14889;
      *((_QWORD *)v25 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v25, "):\n", 3uLL);
    }
    v38 = *(llvm::raw_ostream **)a1;
    sub_1C624C4A4((uint64_t)v46, (__int128 *)(a1 + 16));
    llvm::DWARFDie::dump((uint64_t *)a2, v38, 0, (uint64_t)v46);
    sub_1C624C568(v46);
    v34 = *(llvm::raw_ostream **)a1;
    v35 = (__int128 *)(a1 + 16);
  }
  sub_1C624C4A4((uint64_t)__p, v35);
  llvm::DWARFDie::dump((uint64_t *)a2, v34, 0, (uint64_t)__p);
  sub_1C624C568(__p);
  v39 = *(llvm::raw_ostream **)a1;
LABEL_43:
  v40 = (_BYTE *)*((_QWORD *)v39 + 4);
  if ((unint64_t)v40 >= *((_QWORD *)v39 + 3))
  {
    llvm::raw_ostream::write(v39, 10);
  }
  else
  {
    *((_QWORD *)v39 + 4) = v40 + 1;
    *v40 = 10;
  }
  return 1;
}

llvm::raw_ostream *llvm::DWARFVerifier::warn(llvm::raw_ostream **this)
{
  return llvm::WithColor::warning(*this, "", 0, 0);
}

uint64_t llvm::DWARFVerifier::verifyDebugInfoCallSite(llvm::raw_ostream **this, const llvm::DWARFDie *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  llvm::raw_ostream *v11;
  void *v12;
  llvm::raw_ostream *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  llvm::raw_ostream *v20;
  void *v21;
  llvm::raw_ostream *v22;
  llvm::raw_ostream *v23;
  llvm::raw_ostream *v24;
  void *v25;
  llvm::raw_ostream *v26;
  _BYTE v27[56];
  llvm::DWARFUnit *v28;
  uint64_t v29;
  _QWORD v30[3];
  _QWORD v31[4];
  void *v32;
  __int128 v33;
  void **v34;
  _QWORD v35[3];
  _QWORD v36[4];
  _QWORD v37[4];
  uint64_t v38;
  int v39;
  _QWORD v40[3];
  void *v41;
  __int128 v42;
  void **v43;
  void *v44;
  __int128 v45;
  void **v46;
  _QWORD v47[3];
  void *v48;
  __int128 v49;
  void **v50;
  void *v51;
  __int128 v52;
  void **v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)a2 + 1);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
    return 0;
  v6 = *(unsigned __int16 *)(v3 + 4);
  if (v6 != 16649 && v6 != 72)
    return 0;
  v9 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2 || (v10 = *(_DWORD *)(v2 + 8), v10 == -1))
  {
    v28 = 0;
    v29 = 0;
    goto LABEL_9;
  }
  v15 = *(_QWORD *)(v9 + 288);
  v16 = v15 + 24 * v10;
  v28 = *(llvm::DWARFUnit **)a2;
  v29 = v16;
  if (v15)
  {
    while (1)
    {
      v17 = *(_QWORD *)(v16 + 16);
      if (v17)
      {
        if (*(_WORD *)(v17 + 4) == 46)
        {
          v28 = (llvm::DWARFUnit *)v9;
          v29 = v16;
          goto LABEL_14;
        }
        if (*(_WORD *)(v17 + 4) == 29)
          break;
      }
      v18 = *(_DWORD *)(v2 + 8);
      if (v18 == -1)
      {
        v9 = 0;
        v29 = v16;
        v16 = 0;
LABEL_22:
        v28 = (llvm::DWARFUnit *)v9;
        v29 = v16;
        goto LABEL_23;
      }
      v19 = *(_QWORD *)(v9 + 288);
      v16 = v19 + 24 * v18;
      if (!v19)
        goto LABEL_22;
    }
    v28 = (llvm::DWARFUnit *)v9;
    v29 = v16;
    v24 = llvm::WithColor::error(*this, "", 0, 0);
    v25 = (void *)*((_QWORD *)v24 + 4);
    if (*((_QWORD *)v24 + 3) - (_QWORD)v25 > 0x30uLL)
    {
      qmemcpy(v25, "Call site entry nested within inlined subroutine:", 49);
      *((_QWORD *)v24 + 4) += 49;
    }
    else
    {
      llvm::raw_ostream::write(v24, "Call site entry nested within inlined subroutine:", 0x31uLL);
    }
    v26 = *this;
    v47[2] = 0;
    v49 = 0u;
    v52 = 0u;
    v47[0] = -1;
    v47[1] = 0x1040000FFFFFFFFLL;
    v48 = &unk_1E8169658;
    *(_QWORD *)&v49 = llvm::WithColor::defaultErrorHandler;
    v50 = &v48;
    v51 = &unk_1E8169658;
    *(_QWORD *)&v52 = llvm::WithColor::defaultWarningHandler;
    v53 = &v51;
    llvm::DWARFDie::dump((uint64_t *)&v28, v26, 0, (uint64_t)v47);
    v14 = v47;
    goto LABEL_12;
  }
LABEL_14:
  v9 = 1;
LABEL_23:
  if (!v9 || !v16)
  {
LABEL_9:
    v11 = llvm::WithColor::error(*this, "", 0, 0);
    v12 = (void *)*((_QWORD *)v11 + 4);
    if (*((_QWORD *)v11 + 3) - (_QWORD)v12 > 0x34uLL)
    {
      qmemcpy(v12, "Call site entry not nested within a valid subprogram:", 53);
      *((_QWORD *)v11 + 4) += 53;
    }
    else
    {
      llvm::raw_ostream::write(v11, "Call site entry not nested within a valid subprogram:", 0x35uLL);
    }
    v13 = *this;
    v40[2] = 0;
    v42 = 0u;
    v45 = 0u;
    v40[0] = -1;
    v40[1] = 0x1040000FFFFFFFFLL;
    v41 = &unk_1E8169658;
    *(_QWORD *)&v42 = llvm::WithColor::defaultErrorHandler;
    v43 = &v41;
    v44 = &unk_1E8169658;
    *(_QWORD *)&v45 = llvm::WithColor::defaultWarningHandler;
    v46 = &v44;
    llvm::DWARFDie::dump((uint64_t *)a2, v13, 0, (uint64_t)v40);
    v14 = v40;
LABEL_12:
    sub_1C624C568(v14);
    return 1;
  }
  v38 = 0x2117007C007B007ALL;
  v39 = 555098392;
  llvm::DWARFDie::find(&v28, (unsigned __int16 *)&v38, 6, v27);
  if (v27[48])
    return 0;
  v20 = llvm::WithColor::error(*this, "", 0, 0);
  v21 = (void *)*((_QWORD *)v20 + 4);
  if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 0x3BuLL)
  {
    qmemcpy(v21, "Subprogram with call site entry has no DW_AT_call attribute:", 60);
    *((_QWORD *)v20 + 4) += 60;
  }
  else
  {
    llvm::raw_ostream::write(v20, "Subprogram with call site entry has no DW_AT_call attribute:", 0x3CuLL);
  }
  v22 = *this;
  v36[2] = 0;
  v37[2] = 0;
  v35[0] = -1;
  v35[1] = 0x1040000FFFFFFFFLL;
  v35[2] = 0;
  v36[0] = &unk_1E8169658;
  v36[1] = llvm::WithColor::defaultErrorHandler;
  v36[3] = v36;
  v37[0] = &unk_1E8169658;
  v37[1] = llvm::WithColor::defaultWarningHandler;
  v37[3] = v37;
  llvm::DWARFDie::dump((uint64_t *)&v28, v22, 0, (uint64_t)v35);
  sub_1C624C568(v35);
  v23 = *this;
  v31[2] = 0;
  v33 = 0u;
  v30[0] = -1;
  v30[1] = 0x1040000FFFFFFFFLL;
  v30[2] = 0;
  v31[0] = &unk_1E8169658;
  v31[1] = llvm::WithColor::defaultErrorHandler;
  v31[3] = v31;
  v32 = &unk_1E8169658;
  *(_QWORD *)&v33 = llvm::WithColor::defaultWarningHandler;
  v34 = &v32;
  v7 = 1;
  llvm::DWARFDie::dump((uint64_t *)a2, v23, 1, (uint64_t)v30);
  sub_1C624C568(v30);
  return v7;
}

uint64_t llvm::DWARFVerifier::verifyDieRanges(uint64_t a1, llvm::DWARFDie *a2, uint64_t *a3)
{
  char *v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  char v13;
  llvm::raw_ostream *v14;
  void *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  void *v19;
  llvm::raw_ostream *v20;
  uint64_t v21;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  char *v24;
  llvm::raw_ostream *v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t LastChild;
  uint64_t v34;
  uint64_t FirstChild;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  void *v40;
  uint64_t *v41;
  llvm::raw_ostream *v42;
  void *v43;
  llvm::raw_ostream *v44;
  llvm::raw_ostream *v45;
  llvm::raw_ostream *v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  llvm::raw_ostream *v50;
  void *v51;
  llvm::raw_ostream *v52;
  llvm::raw_ostream *v53;
  llvm::raw_ostream *v54;
  _BYTE *v55;
  char *v56[2];
  void *__p;
  void *v58;
  uint64_t v59;
  _QWORD **v60;
  _QWORD *v61[2];
  void *v62;
  uint64_t *v63;
  char v64;
  char *v65[3];
  char v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v3 = *(char **)a2;
  if (*(_QWORD *)a2)
    v4 = *((_QWORD *)a2 + 1) == 0;
  else
    v4 = 1;
  if (v4)
    return 0;
  llvm::DWARFDie::getAddressRanges(a2, (uint64_t)&v62);
  if ((v64 & 1) != 0)
  {
    v5 = v3[209] == 0;
    v24 = (char *)v62;
    v62 = 0;
    v56[0] = v24;
    sub_1C4D62BD4(v56, v65);
    if (v56[0])
      (*(void (**)(char *))(*(_QWORD *)v56[0] + 8))(v56[0]);
    goto LABEL_64;
  }
  v10 = *((_QWORD *)a2 + 1);
  v56[0] = *(char **)a2;
  v56[1] = (char *)v10;
  __p = 0;
  v58 = 0;
  v61[0] = 0;
  v61[1] = 0;
  v59 = 0;
  v60 = v61;
  if (*(_BYTE *)(a1 + 108) && !*(_BYTE *)(a1 + 109) && (v28 = *(_QWORD *)(v10 + 16)) != 0 && *(_WORD *)(v28 + 4) == 17
    || (v11 = (uint64_t *)v62, v12 = v63, v62 == v63))
  {
    v5 = 0;
    goto LABEL_41;
  }
  v5 = 0;
  v13 = 0;
  do
  {
    if (*v11 > (unint64_t)v11[1])
    {
      v14 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
      v15 = (void *)*((_QWORD *)v14 + 4);
      if (*((_QWORD *)v14 + 3) - (_QWORD)v15 > 0x15uLL)
      {
        qmemcpy(v15, "Invalid address range ", 22);
        *((_QWORD *)v14 + 4) += 22;
      }
      else
      {
        v14 = llvm::raw_ostream::write(v14, "Invalid address range ", 0x16uLL);
      }
      v5 = (v5 + 1);
      v16 = llvm::operator<<(v14, v11);
      v17 = (_BYTE *)*((_QWORD *)v16 + 4);
      if (*((_BYTE **)v16 + 3) == v17)
      {
        v13 = 1;
        llvm::raw_ostream::write(v16, "\n", 1uLL);
        goto LABEL_15;
      }
      *v17 = 10;
      ++*((_QWORD *)v16 + 4);
    }
    else
    {
      llvm::DWARFVerifier::DieRangeInfo::insert(v56, (unint64_t *)v11, (uint64_t)v65);
      if (!v66)
        goto LABEL_15;
      v18 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
      v19 = (void *)*((_QWORD *)v18 + 4);
      if (*((_QWORD *)v18 + 3) - (_QWORD)v19 > 0x35uLL)
      {
        qmemcpy(v19, "DIE has overlapping ranges in DW_AT_ranges attribute: ", 54);
        *((_QWORD *)v18 + 4) += 54;
      }
      else
      {
        v18 = llvm::raw_ostream::write(v18, "DIE has overlapping ranges in DW_AT_ranges attribute: ", 0x36uLL);
      }
      v20 = llvm::operator<<(v18, (uint64_t *)v65);
      v21 = *((_QWORD *)v20 + 4);
      if ((unint64_t)(*((_QWORD *)v20 + 3) - v21) > 4)
      {
        *(_BYTE *)(v21 + 4) = 32;
        *(_DWORD *)v21 = 1684955424;
        *((_QWORD *)v20 + 4) += 5;
      }
      else
      {
        v20 = llvm::raw_ostream::write(v20, " and ", 5uLL);
      }
      v5 = (v5 + 1);
      v22 = llvm::operator<<(v20, v11);
      v23 = (_BYTE *)*((_QWORD *)v22 + 4);
      if ((unint64_t)v23 >= *((_QWORD *)v22 + 3))
      {
        llvm::raw_ostream::write(v22, 10);
      }
      else
      {
        *((_QWORD *)v22 + 4) = v23 + 1;
        *v23 = 10;
      }
    }
    v13 = 1;
LABEL_15:
    v11 += 3;
  }
  while (v11 != v12);
  if ((v13 & 1) != 0)
  {
    v25 = *(llvm::raw_ostream **)a1;
    sub_1C624C4A4((uint64_t)v65, (__int128 *)(a1 + 16));
    llvm::DWARFDie::dump((uint64_t *)a2, v25, 2, (uint64_t)v65);
    sub_1C624C568(v65);
    v26 = *(llvm::raw_ostream **)a1;
    v27 = *(_BYTE **)(*(_QWORD *)a1 + 32);
    if ((unint64_t)v27 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
    {
      llvm::raw_ostream::write(v26, 10);
    }
    else
    {
      *((_QWORD *)v26 + 4) = v27 + 1;
      *v27 = 10;
    }
  }
LABEL_41:
  v29 = llvm::DWARFVerifier::DieRangeInfo::insert((uint64_t)a3, (uint64_t)v56);
  if (a3 + 6 != v29)
  {
    v41 = v29;
    v5 = (v5 + 1);
    v42 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
    v43 = (void *)*((_QWORD *)v42 + 4);
    if (*((_QWORD *)v42 + 3) - (_QWORD)v43 > 0x24uLL)
    {
      qmemcpy(v43, "DIEs have overlapping address ranges:", 37);
      *((_QWORD *)v42 + 4) += 37;
    }
    else
    {
      llvm::raw_ostream::write(v42, "DIEs have overlapping address ranges:", 0x25uLL);
    }
    v44 = *(llvm::raw_ostream **)a1;
    sub_1C624C4A4((uint64_t)v65, (__int128 *)(a1 + 16));
    llvm::DWARFDie::dump((uint64_t *)a2, v44, 0, (uint64_t)v65);
    sub_1C624C568(v65);
    v45 = *(llvm::raw_ostream **)a1;
    sub_1C624C4A4((uint64_t)v65, (__int128 *)(a1 + 16));
    llvm::DWARFDie::dump(v41 + 4, v45, 0, (uint64_t)v65);
    sub_1C624C568(v65);
    v46 = *(llvm::raw_ostream **)a1;
    v47 = *(_BYTE **)(*(_QWORD *)a1 + 32);
    if ((unint64_t)v47 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
    {
      llvm::raw_ostream::write(v46, 10);
    }
    else
    {
      *((_QWORD *)v46 + 4) = v47 + 1;
      *v47 = 10;
    }
  }
  if (__p != v58 && a3[2] != a3[3])
  {
    v30 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 16);
    if ((!v30 || *(_WORD *)(v30 + 4) != 46 || (v31 = *(_QWORD *)(a3[1] + 16)) == 0 || *(_WORD *)(v31 + 4) != 46)
      && (llvm::DWARFVerifier::DieRangeInfo::contains((uint64_t)a3, (uint64_t)v56) & 1) == 0)
    {
      v5 = (v5 + 1);
      v50 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
      v51 = (void *)*((_QWORD *)v50 + 4);
      if (*((_QWORD *)v50 + 3) - (_QWORD)v51 > 0x3BuLL)
      {
        qmemcpy(v51, "DIE address ranges are not contained in its parent's ranges:", 60);
        *((_QWORD *)v50 + 4) += 60;
      }
      else
      {
        llvm::raw_ostream::write(v50, "DIE address ranges are not contained in its parent's ranges:", 0x3CuLL);
      }
      v52 = *(llvm::raw_ostream **)a1;
      sub_1C624C4A4((uint64_t)v65, (__int128 *)(a1 + 16));
      llvm::DWARFDie::dump(a3, v52, 0, (uint64_t)v65);
      sub_1C624C568(v65);
      v53 = *(llvm::raw_ostream **)a1;
      sub_1C624C4A4((uint64_t)v65, (__int128 *)(a1 + 16));
      llvm::DWARFDie::dump((uint64_t *)a2, v53, 2, (uint64_t)v65);
      sub_1C624C568(v65);
      v54 = *(llvm::raw_ostream **)a1;
      v55 = *(_BYTE **)(*(_QWORD *)a1 + 32);
      if ((unint64_t)v55 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
      {
        llvm::raw_ostream::write(v54, 10);
      }
      else
      {
        *((_QWORD *)v54 + 4) = v55 + 1;
        *v55 = 10;
      }
    }
  }
  v32 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    LastChild = *((_QWORD *)a2 + 1);
    if (LastChild)
    {
      FirstChild = llvm::DWARFUnit::getFirstChild(v32, LastChild);
      v34 = v48;
      LastChild = llvm::DWARFUnit::getLastChild(v32, LastChild);
      v32 = v49;
    }
    else
    {
      v34 = 0;
      FirstChild = 0;
      v32 = 0;
    }
  }
  else
  {
    v34 = 0;
    FirstChild = 0;
    LastChild = 0;
  }
  if (v34 != v32 || FirstChild != LastChild)
  {
    while (1)
    {
      v65[0] = (char *)FirstChild;
      v65[1] = (char *)v34;
      v36 = llvm::DWARFVerifier::verifyDieRanges(a1, v65, v56);
      v37 = 0;
      v38 = 0;
      if (v34 && FirstChild)
      {
        v39 = *(_DWORD *)(v34 + 12);
        if (v39)
        {
          v38 = *(_QWORD *)(FirstChild + 288) + 24 * v39;
          v37 = FirstChild;
        }
        else
        {
          v37 = 0;
          v38 = 0;
        }
      }
      v5 = (v36 + v5);
      v34 = v38;
      FirstChild = v37;
      if (v38 == v32)
      {
        v34 = v38;
        FirstChild = v37;
        if (v37 == LastChild)
          break;
      }
    }
  }
  sub_1C54BEE78(v61[0]);
  if (__p)
  {
    v58 = __p;
    operator delete(__p);
  }
LABEL_64:
  v40 = v62;
  if ((v64 & 1) != 0)
  {
    v62 = 0;
    if (v40)
      (*(void (**)(void *))(*(_QWORD *)v40 + 8))(v40);
  }
  else if (v62)
  {
    v63 = (uint64_t *)v62;
    operator delete(v62);
  }
  return v5;
}

uint64_t llvm::DWARFVerifier::verifyAbbrevSection(llvm::raw_ostream **this, const llvm::DWARFDebugAbbrev *a2)
{
  _QWORD *AbbreviationDeclarationSet;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  llvm::dwarf *v11;
  unsigned int v12;
  unsigned int v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  void *v16;
  size_t v17;
  const char *v18;
  size_t v19;
  void *v20;
  __int16 *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _BYTE v29[128];
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  AbbreviationDeclarationSet = llvm::DWARFDebugAbbrev::getAbbreviationDeclarationSet(a2, 0);
  v4 = (uint64_t *)AbbreviationDeclarationSet[2];
  v5 = (uint64_t *)AbbreviationDeclarationSet[3];
  if (v4 == v5)
    return 0;
  v6 = 0;
  do
  {
    v26 = *v4;
    v27 = v29;
    v28 = 0x800000000;
    v7 = *((unsigned int *)v4 + 4);
    if (!(_DWORD)v7 || &v26 == v4)
    {
      v30 = v4[19];
      goto LABEL_37;
    }
    v8 = (unsigned __int16 *)v29;
    v9 = *((unsigned int *)v4 + 4);
    if (v7 < 9
      || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, (uint64_t)v29, *((unsigned int *)v4 + 4), 16),
          v9 = *((unsigned int *)v4 + 4),
          v8 = (unsigned __int16 *)v27,
          (_DWORD)v9))
    {
      memcpy(v8, (const void *)v4[1], 16 * v9);
      v8 = (unsigned __int16 *)v27;
    }
    LODWORD(v28) = v7;
    v30 = v4[19];
    v23 = 1;
    v24 = -1;
    v10 = 16 * v7;
    do
    {
      v11 = (llvm::dwarf *)*v8;
      v22 = 0;
      if ((sub_1C54BF560((uint64_t)&v23, (unsigned __int16)v11, &v22) & 1) == 0)
      {
        v12 = v23 >> 1;
        if ((v23 & 1) != 0)
          v13 = 4;
        else
          v13 = v25;
        if (4 * v12 + 4 >= 3 * v13)
        {
          v13 *= 2;
        }
        else if (v13 + ~v12 - HIDWORD(v23) > v13 >> 3)
        {
LABEL_16:
          LODWORD(v23) = v23 + 2;
          if (*v22 != -1)
            --HIDWORD(v23);
          *v22 = (__int16)v11;
          goto LABEL_19;
        }
        sub_1C54BF614((uint64_t)&v23, v13);
        v22 = 0;
        sub_1C54BF560((uint64_t)&v23, (unsigned __int16)v11, &v22);
        goto LABEL_16;
      }
      v14 = llvm::WithColor::error(*this, "", 0, 0);
      v15 = v14;
      v16 = (void *)*((_QWORD *)v14 + 4);
      if (*((_QWORD *)v14 + 3) - (_QWORD)v16 > 0x2AuLL)
      {
        qmemcpy(v16, "Abbreviation declaration contains multiple ", 43);
        *((_QWORD *)v14 + 4) += 43;
      }
      else
      {
        llvm::raw_ostream::write(v14, "Abbreviation declaration contains multiple ", 0x2BuLL);
      }
      v18 = llvm::dwarf::AttributeString(v11);
      v19 = v17;
      v20 = (void *)*((_QWORD *)v15 + 4);
      if (v17 <= *((_QWORD *)v15 + 3) - (_QWORD)v20)
      {
        if (v17)
        {
          memcpy(v20, v18, v17);
          v20 = (void *)(*((_QWORD *)v15 + 4) + v19);
          *((_QWORD *)v15 + 4) = v20;
        }
      }
      else
      {
        llvm::raw_ostream::write(v15, v18, v17);
        v20 = (void *)*((_QWORD *)v15 + 4);
      }
      if (*((_QWORD *)v15 + 3) - (_QWORD)v20 > 0xCuLL)
      {
        qmemcpy(v20, " attributes.\n", 13);
        *((_QWORD *)v15 + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(v15, " attributes.\n", 0xDuLL);
      }
      llvm::DWARFAbbreviationDeclaration::dump((llvm::DWARFAbbreviationDeclaration *)&v26, *this);
      v6 = (v6 + 1);
LABEL_19:
      v8 += 8;
      v10 -= 16;
    }
    while (v10);
    if ((v23 & 1) == 0)
      MEMORY[0x1CAA32FB4](v24, 2);
LABEL_37:
    if (v27 != v29)
      free(v27);
    v4 += 20;
  }
  while (v4 != v5);
  return v6;
}

BOOL llvm::DWARFVerifier::handleDebugAbbrev(llvm::raw_ostream **this)
{
  llvm::raw_ostream *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  const llvm::DWARFDebugAbbrev *DebugAbbrev;
  const llvm::DWARFDebugAbbrev *DebugAbbrevDWO;

  v2 = *this;
  v3 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v3 > 0x1AuLL)
  {
    qmemcpy(v3, "Verifying .debug_abbrev...\n", 27);
    *((_QWORD *)v2 + 4) += 27;
  }
  else
  {
    llvm::raw_ostream::write(v2, "Verifying .debug_abbrev...\n", 0x1BuLL);
  }
  v4 = *((_QWORD *)this[1] + 65);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
  if (v5)
  {
    DebugAbbrev = (const llvm::DWARFDebugAbbrev *)llvm::DWARFContext::getDebugAbbrev(this[1]);
    v6 = llvm::DWARFVerifier::verifyAbbrevSection(this, DebugAbbrev);
  }
  else
  {
    v6 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 248))(v4);
  if (v7)
  {
    DebugAbbrevDWO = (const llvm::DWARFDebugAbbrev *)llvm::DWARFContext::getDebugAbbrevDWO(this[1]);
    v6 += llvm::DWARFVerifier::verifyAbbrevSection(this, DebugAbbrevDWO);
  }
  return v6 == 0;
}

uint64_t llvm::DWARFVerifier::verifyUnits(llvm::raw_ostream **this, const llvm::DWARFUnitVector *a2)
{
  const llvm::DWARFUnitVector *v2;
  uint64_t v4;
  int v5;
  llvm::DWARFUnit **v6;
  uint64_t v7;
  unint64_t v8;
  llvm::raw_ostream *v9;
  _OWORD *v10;
  uint64_t v11;
  llvm::DWARFUnit *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t *v16;
  char *ShortName;
  const char *v18;
  const llvm::DWARFUnitVector *v19;
  llvm::raw_ostream *v20;
  uint64_t v21;
  _BYTE *v22;
  size_t v23;
  size_t v24;
  llvm::raw_ostream *v25;
  _BYTE *v26;
  llvm::raw_ostream *v27;
  const char *v28;
  const char *v29;
  int v30;
  uint64_t v31;
  llvm::DWARFUnit **v33;
  uint64_t *v34;
  _QWORD *v35[2];
  uint64_t *v36;
  _QWORD *v37[2];

  v2 = a2;
  v37[0] = 0;
  v37[1] = 0;
  v36 = (uint64_t *)v37;
  v4 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = *(llvm::DWARFUnit ***)a2;
    v7 = 8 * v4;
    v8 = 1;
    do
    {
      v9 = *this;
      v10 = (_OWORD *)*((_QWORD *)*this + 4);
      if (*((_QWORD *)*this + 3) - (_QWORD)v10 > 0xFuLL)
      {
        *v10 = *(_OWORD *)"Verifying unit: ";
        *((_QWORD *)v9 + 4) += 16;
      }
      else
      {
        llvm::raw_ostream::write(*this, "Verifying unit: ", 0x10uLL);
      }
      sub_1C5E21910(v9, v8, 0, 0, 0);
      v11 = *((_QWORD *)v9 + 4);
      if ((unint64_t)(*((_QWORD *)v9 + 3) - v11) > 2)
      {
        *(_BYTE *)(v11 + 2) = 32;
        *(_WORD *)v11 = 12064;
        *((_QWORD *)v9 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v9, " / ", 3uLL);
      }
      sub_1C5E21910(v9, *((unsigned int *)v2 + 2), 0, 0, 0);
      v12 = *v6;
      llvm::DWARFUnit::extractDIEsIfNeeded(*v6, 1);
      v13 = (_QWORD *)*((_QWORD *)v12 + 36);
      v14 = (_QWORD *)*((_QWORD *)v12 + 37);
      v15 = v13 == v14;
      if (v13 == v14)
        v16 = 0;
      else
        v16 = (uint64_t *)v12;
      if (v15)
        v13 = 0;
      v34 = v16;
      v35[0] = v13;
      ShortName = llvm::DWARFDie::getShortName((llvm::DWARFDie *)&v34);
      if (ShortName)
      {
        v18 = ShortName;
        v19 = v2;
        v20 = *this;
        v21 = *((_QWORD *)*this + 4);
        if ((unint64_t)(*((_QWORD *)*this + 3) - v21) > 2)
        {
          *(_BYTE *)(v21 + 2) = 34;
          *(_WORD *)v21 = 8236;
          v22 = (_BYTE *)(*((_QWORD *)v20 + 4) + 3);
          *((_QWORD *)v20 + 4) = v22;
        }
        else
        {
          llvm::raw_ostream::write(*this, ", \"", 3uLL);
          v22 = (_BYTE *)*((_QWORD *)v20 + 4);
        }
        v23 = strlen(v18);
        v24 = v23;
        if (v23 <= *((_QWORD *)v20 + 3) - (_QWORD)v22)
        {
          if (v23)
          {
            memcpy(v22, v18, v23);
            v22 = (_BYTE *)(*((_QWORD *)v20 + 4) + v24);
            *((_QWORD *)v20 + 4) = v22;
          }
        }
        else
        {
          llvm::raw_ostream::write(v20, v18, v23);
          v22 = (_BYTE *)*((_QWORD *)v20 + 4);
        }
        if ((unint64_t)v22 >= *((_QWORD *)v20 + 3))
        {
          llvm::raw_ostream::write(v20, 34);
        }
        else
        {
          *((_QWORD *)v20 + 4) = v22 + 1;
          *v22 = 34;
        }
        v2 = v19;
      }
      v25 = *this;
      v26 = (_BYTE *)*((_QWORD *)*this + 4);
      if ((unint64_t)v26 >= *((_QWORD *)*this + 3))
      {
        llvm::raw_ostream::write(v25, 10);
      }
      else
      {
        *((_QWORD *)v25 + 4) = v26 + 1;
        *v26 = 10;
      }
      v27 = *this;
      v28 = (const char *)*((_QWORD *)*this + 4);
      v29 = (const char *)*((_QWORD *)*this + 2);
      if (v28 != v29)
      {
        *((_QWORD *)v27 + 4) = v29;
        llvm::raw_ostream::flush_tied_then_write(v27, v29, v28 - v29);
      }
      v35[0] = 0;
      v35[1] = 0;
      v34 = (uint64_t *)v35;
      v30 = llvm::DWARFVerifier::verifyUnitContents((llvm::DWARFVerifier *)this, (uint64_t)*v6, &v34, &v36);
      v33 = v6;
      v5 += v30
          + llvm::DWARFVerifier::verifyDebugInfoReferences(this, &v34, (uint64_t (*)(uint64_t, unint64_t))sub_1C54BF874, (uint64_t)&v33);
      ++v8;
      sub_1C54BF830(v35[0]);
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  else
  {
    v5 = 0;
  }
  v34 = (uint64_t *)v2;
  v31 = llvm::DWARFVerifier::verifyDebugInfoReferences(this, &v36, (uint64_t (*)(uint64_t, unint64_t))sub_1C54BF880, (uint64_t)&v34)+ v5;
  sub_1C54BF830(v37[0]);
  return v31;
}

uint64_t llvm::DWARFVerifier::verifyDebugInfoReferences(llvm::raw_ostream **a1, _QWORD *a2, uint64_t (*a3)(uint64_t, unint64_t), uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v9;
  __int128 *v10;
  unint64_t v11;
  llvm::DWARFUnit *v12;
  llvm::raw_ostream *v13;
  void *v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  void *v17;
  _QWORD *v18;
  unint64_t v19;
  llvm::DWARFUnit *v20;
  uint64_t v21;
  llvm::raw_ostream *v22;
  llvm::raw_ostream *v23;
  _BYTE *v24;
  _QWORD *v25;
  _QWORD *v26;
  llvm::raw_ostream *v27;
  _BYTE *v28;
  uint64_t v29;
  BOOL v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v34[2];
  _QWORD v35[12];

  v35[11] = *MEMORY[0x1E0C80C00];
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
    return 0;
  v9 = 0;
  v10 = (__int128 *)(a1 + 2);
  do
  {
    v11 = v5[4];
    v12 = (llvm::DWARFUnit *)a3(a4, v11);
    if (!v12 || (sub_1C624DB94(v12, v11) ? (v30 = v29 == 0) : (v30 = 1), v30))
    {
      v13 = llvm::WithColor::error(*a1, "", 0, 0);
      v14 = (void *)*((_QWORD *)v13 + 4);
      if (*((_QWORD *)v13 + 3) - (_QWORD)v14 > 0x15uLL)
      {
        qmemcpy(v14, "invalid DIE reference ", 22);
        *((_QWORD *)v13 + 4) += 22;
      }
      else
      {
        v13 = llvm::raw_ostream::write(v13, "invalid DIE reference ", 0x16uLL);
      }
      v15 = v5[4];
      v35[0] = &unk_1E8133270;
      v35[1] = "0x%08llx";
      v35[2] = v15;
      v16 = llvm::raw_ostream::operator<<(v13, (uint64_t)v35);
      v17 = (void *)*((_QWORD *)v16 + 4);
      if (*((_QWORD *)v16 + 3) - (_QWORD)v17 > 0x1CuLL)
      {
        qmemcpy(v17, ". Offset is in between DIEs:\n", 29);
        *((_QWORD *)v16 + 4) += 29;
      }
      else
      {
        llvm::raw_ostream::write(v16, ". Offset is in between DIEs:\n", 0x1DuLL);
      }
      v18 = (_QWORD *)v5[5];
      if (v18 != v5 + 6)
      {
        do
        {
          v19 = v18[4];
          v20 = (llvm::DWARFUnit *)a3(a4, v19);
          if (v20)
            v20 = sub_1C624DB94(v20, v19);
          else
            v21 = 0;
          v34[0] = (uint64_t)v20;
          v34[1] = v21;
          v22 = *a1;
          sub_1C624C4A4((uint64_t)v35, v10);
          llvm::DWARFDie::dump(v34, v22, 0, (uint64_t)v35);
          sub_1C624C568(v35);
          v23 = *a1;
          v24 = (_BYTE *)*((_QWORD *)*a1 + 4);
          if ((unint64_t)v24 >= *((_QWORD *)*a1 + 3))
          {
            llvm::raw_ostream::write(v23, 10);
          }
          else
          {
            *((_QWORD *)v23 + 4) = v24 + 1;
            *v24 = 10;
          }
          v25 = (_QWORD *)v18[1];
          if (v25)
          {
            do
            {
              v26 = v25;
              v25 = (_QWORD *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              v26 = (_QWORD *)v18[2];
              v30 = *v26 == (_QWORD)v18;
              v18 = v26;
            }
            while (!v30);
          }
          v18 = v26;
        }
        while (v26 != v5 + 6);
      }
      v9 = (v9 + 1);
      v27 = *a1;
      v28 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if (*((_BYTE **)*a1 + 3) == v28)
      {
        llvm::raw_ostream::write(v27, "\n", 1uLL);
      }
      else
      {
        *v28 = 10;
        ++*((_QWORD *)v27 + 4);
      }
    }
    v31 = (_QWORD *)v5[1];
    if (v31)
    {
      do
      {
        v32 = v31;
        v31 = (_QWORD *)*v31;
      }
      while (v31);
    }
    else
    {
      do
      {
        v32 = (_QWORD *)v5[2];
        v30 = *v32 == (_QWORD)v5;
        v5 = v32;
      }
      while (!v30);
    }
    v5 = v32;
  }
  while (v32 != v4);
  return v9;
}

BOOL llvm::DWARFVerifier::verifyUnitSection(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  llvm::raw_ostream *v25;
  uint64_t v26;
  _QWORD v27[2];
  char v28;
  char v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD **v32;
  _QWORD *v33[2];
  __int16 v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[24];
  _BYTE *v40;
  int v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[24];
  _BYTE *v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 520);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v6 = *a2;
  v7 = a2[1];
  v34 = 0;
  v42 = &v44;
  v43 = 0x100000000;
  v46 = 0;
  v47 = -1;
  v35 = 0;
  v36 = &v38;
  v37 = 0x100000000;
  v40 = 0;
  v41 = -1;
  v33[0] = 0;
  v33[1] = 0;
  v32 = v33;
  if (v7)
  {
    v8 = v5;
    v9 = 0;
    v10 = 1;
    while (1)
    {
      v27[0] = v6;
      v27[1] = v7;
      v28 = v8;
      v29 = 0;
      v30 = v4;
      v31 = a2;
      if ((llvm::DWARFVerifier::verifyUnitHeader((llvm::raw_ostream **)a1, v27, &v35, v9, (_BYTE *)&v34 + 1, (BOOL *)&v34) & 1) == 0)
      {
        v10 = 0;
        v11 = 0;
        if ((_BYTE)v34)
          break;
      }
      ++v9;
      if (v7 <= v35)
      {
        v11 = v10;
        if (!v9)
          goto LABEL_34;
        break;
      }
    }
  }
  else
  {
LABEL_34:
    v25 = llvm::WithColor::warning(*(llvm::raw_ostream **)a1, "", 0, 0);
    v26 = *((_QWORD *)v25 + 4);
    if ((unint64_t)(*((_QWORD *)v25 + 3) - v26) > 0x11)
    {
      *(_WORD *)(v26 + 16) = 2606;
      *(_OWORD *)v26 = *(_OWORD *)"Section is empty.\n";
      *((_QWORD *)v25 + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(v25, "Section is empty.\n", 0x12uLL);
    }
    v11 = 1;
  }
  sub_1C54BF830(v33[0]);
  v12 = v40;
  if (v40 == v39)
  {
    v13 = 4;
    v12 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_12;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_12:
  v14 = (uint64_t *)v36;
  if ((_DWORD)v37)
  {
    v15 = 8 * v37;
    v16 = (char *)v36 - 8;
    do
    {
      v17 = *(_QWORD *)&v16[v15];
      *(_QWORD *)&v16[v15] = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      v15 -= 8;
    }
    while (v15);
    v14 = (uint64_t *)v36;
  }
  if (v14 != &v38)
    free(v14);
  v18 = v46;
  if (v46 == v45)
  {
    v19 = 4;
    v18 = v45;
  }
  else
  {
    if (!v46)
      goto LABEL_25;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_25:
  v20 = (uint64_t *)v42;
  if ((_DWORD)v43)
  {
    v21 = 8 * v43;
    v22 = (char *)v42 - 8;
    do
    {
      v23 = *(_QWORD *)&v22[v21];
      *(_QWORD *)&v22[v21] = 0;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      v21 -= 8;
    }
    while (v21);
    v20 = (uint64_t *)v42;
  }
  if (v20 != &v44)
    free(v20);
  return (v11 & 1) == 0;
}

BOOL llvm::DWARFVerifier::handleDebugInfo(llvm::DWARFVerifier *this)
{
  llvm::raw_ostream *v2;
  uint64_t v4;
  void *v5;
  llvm::raw_ostream *v6;
  void *v7;
  llvm::raw_ostream *v8;
  void *v9;
  uint64_t v10;
  int v11;
  llvm::raw_ostream *v12;
  void *v13;
  uint64_t v14;
  int v15;
  int *v17;
  llvm::DWARFVerifier *v18;
  int v19;

  v2 = *(llvm::raw_ostream **)this;
  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 520);
  v19 = 0;
  v5 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v5 > 0x2AuLL)
  {
    qmemcpy(v5, "Verifying .debug_info Unit Header Chain...\n", 43);
    *((_QWORD *)v2 + 4) += 43;
  }
  else
  {
    llvm::raw_ostream::write(v2, "Verifying .debug_info Unit Header Chain...\n", 0x2BuLL);
  }
  v17 = &v19;
  v18 = this;
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t, _QWORD *), int **))(*(_QWORD *)v4 + 56))(v4, sub_1C54BF888, &v17);
  v6 = *(llvm::raw_ostream **)this;
  v7 = *(void **)(*(_QWORD *)this + 32);
  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v7 > 0x2BuLL)
  {
    qmemcpy(v7, "Verifying .debug_types Unit Header Chain...\n", 44);
    *((_QWORD *)v6 + 4) += 44;
  }
  else
  {
    llvm::raw_ostream::write(v6, "Verifying .debug_types Unit Header Chain...\n", 0x2CuLL);
  }
  v17 = &v19;
  v18 = this;
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t, _QWORD *), int **))(*(_QWORD *)v4 + 64))(v4, sub_1C54BF8BC, &v17);
  v8 = *(llvm::raw_ostream **)this;
  v9 = *(void **)(*(_QWORD *)this + 32);
  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v9 > 0x1AuLL)
  {
    qmemcpy(v9, "Verifying non-dwo Units...\n", 27);
    *((_QWORD *)v8 + 4) += 27;
  }
  else
  {
    llvm::raw_ostream::write(v8, "Verifying non-dwo Units...\n", 0x1BuLL);
  }
  v10 = *((_QWORD *)this + 1);
  llvm::DWARFContext::parseNormalUnits(v10);
  v11 = llvm::DWARFVerifier::verifyUnits((llvm::raw_ostream **)this, (const llvm::DWARFUnitVector *)(v10 + 16));
  v19 += v11;
  v12 = *(llvm::raw_ostream **)this;
  v13 = *(void **)(*(_QWORD *)this + 32);
  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v13 > 0x16uLL)
  {
    qmemcpy(v13, "Verifying dwo Units...\n", 23);
    *((_QWORD *)v12 + 4) += 23;
  }
  else
  {
    llvm::raw_ostream::write(v12, "Verifying dwo Units...\n", 0x17uLL);
  }
  v14 = *((_QWORD *)this + 1);
  llvm::DWARFContext::parseDWOUnits(v14, 0);
  v15 = llvm::DWARFVerifier::verifyUnits((llvm::raw_ostream **)this, (const llvm::DWARFUnitVector *)(v14 + 240));
  return v19 + v15 == 0;
}

llvm::raw_ostream *sub_1C54BA214(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t *v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *result;
  _BYTE *v11;
  _QWORD v12[12];

  v12[11] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  ++**(_DWORD **)a1;
  v5 = llvm::WithColor::error(*(llvm::raw_ostream **)v4, "", 0, 0);
  llvm::Twine::printOneChild((uint64_t)v5, v5, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 32));
  llvm::Twine::printOneChild(v6, v5, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_BYTE *)(a2 + 33));
  v7 = (_BYTE *)*((_QWORD *)v5 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v5 + 3))
  {
    llvm::raw_ostream::write(v5, 10);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v7 + 1;
    *v7 = 10;
  }
  v8 = *(uint64_t **)(a1 + 16);
  v9 = *(llvm::raw_ostream **)v4;
  sub_1C624C4A4((uint64_t)v12, (__int128 *)(v4 + 16));
  llvm::DWARFDie::dump(v8, v9, 0, (uint64_t)v12);
  sub_1C624C568(v12);
  result = *(llvm::raw_ostream **)v4;
  v11 = *(_BYTE **)(*(_QWORD *)v4 + 32);
  if ((unint64_t)v11 >= *(_QWORD *)(*(_QWORD *)v4 + 24))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v11 + 1;
  *v11 = 10;
  return result;
}

void llvm::DWARFVerifier::verifyDebugLineStmtOffsets(llvm::DWARFVerifier *this)
{
  llvm::DWARFUnit **v2;
  llvm::DWARFUnit **v3;
  __int128 *v4;
  llvm::DWARFUnit **v5;
  unsigned int (*v6)(llvm::DWARFUnit **);
  llvm::DWARFUnit *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  llvm::DWARFUnit *v11;
  const char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t **v20;
  uint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  llvm::raw_ostream *v27;
  uint64_t v28;
  llvm::raw_ostream *v29;
  void *v30;
  llvm::raw_ostream *v31;
  llvm::raw_ostream *v32;
  _BYTE *v33;
  llvm::raw_ostream *v34;
  void *v35;
  BOOL v36;
  uint64_t *v37;
  _QWORD **v38;
  const char *v39;
  llvm::raw_ostream *v40;
  uint64_t v41;
  uint64_t v42;
  llvm::raw_ostream *v43;
  void *v44;
  llvm::raw_ostream *v45;
  llvm::raw_ostream *v46;
  _BYTE *v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  __int128 *v51;
  _QWORD v52[3];
  __int128 v53;
  _QWORD v54[3];
  llvm::DWARFUnit **v55;
  uint64_t **v56;
  uint64_t *v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  const char *v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v57 = 0;
  v58 = 0;
  v56 = &v57;
  sub_1C548BC00(*((_QWORD *)this + 1), v54);
  v2 = (llvm::DWARFUnit **)v54[0];
  v3 = v55;
  if ((llvm::DWARFUnit **)v54[0] != v55)
  {
    v4 = (__int128 *)((char *)this + 16);
    v5 = (llvm::DWARFUnit **)v54[1];
    v6 = (unsigned int (*)(llvm::DWARFUnit **))v54[2];
    while (1)
    {
      v7 = *v2;
      llvm::DWARFUnit::extractDIEsIfNeeded(*v2, 1);
      v8 = *((_QWORD *)v7 + 36);
      v9 = *((_QWORD *)v7 + 37);
      v10 = v8 == v9;
      if (v8 == v9)
        v11 = 0;
      else
        v11 = v7;
      if (v10)
        v8 = 0;
      *(_QWORD *)&v53 = v11;
      *((_QWORD *)&v53 + 1) = v8;
      llvm::DWARFDie::find((llvm::DWARFUnit **)&v53, 16, &v59);
      if (v62)
      {
        if ((llvm::DWARFFormValue::isFormClass((unsigned __int16 *)&v59, 8) & 1) != 0)
        {
          v12 = v60;
          llvm::DWARFContext::getLineTableForUnit(*((llvm::DWARFContext **)this + 1), *v2);
          v50 = v13;
          if ((unint64_t)v12 < *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 520)
                                                                                     + 120))(*(_QWORD *)(*((_QWORD *)this + 1) + 520))
                                                 + 8))
            break;
        }
      }
LABEL_9:
      while (++v2 != v5)
      {
        if (v6(v2))
          goto LABEL_13;
      }
      v2 = v5;
LABEL_13:
      if (v2 == v3)
        goto LABEL_65;
    }
    v14 = (uint64_t *)v12;
    if (v50)
    {
      v51 = v4;
      v15 = v57;
      v16 = v57;
      v17 = &v57;
      v18 = &v57;
      v19 = &v57;
      if (!v57)
        goto LABEL_34;
      do
      {
        v20 = v17;
        v21 = v16;
        v22 = v16[4];
        if (v22 >= (unint64_t)v14)
          v17 = (uint64_t **)v16;
        else
          ++v16;
        v16 = (uint64_t *)*v16;
      }
      while (v16);
      if (v17 == &v57 || (v22 >= (unint64_t)v14 ? (v23 = v21) : (v23 = v20), (unint64_t)v14 < v23[4]))
      {
        do
        {
          while (1)
          {
            v19 = (uint64_t **)v15;
            v24 = v15[4];
            if (v24 <= (unint64_t)v14)
              break;
            v15 = *v19;
            v18 = v19;
            if (!*v19)
              goto LABEL_34;
          }
          if (v24 >= (unint64_t)v14)
            goto LABEL_37;
          v15 = v19[1];
        }
        while (v15);
        v18 = v19 + 1;
LABEL_34:
        v48 = (uint64_t *)v19;
        v25 = v14;
        v19 = (uint64_t **)operator new(0x38uLL);
        *v19 = 0;
        v19[1] = 0;
        v19[5] = 0;
        v19[6] = 0;
        v19[4] = v25;
        v19[2] = v48;
        *v18 = (uint64_t *)v19;
        v26 = (uint64_t *)v19;
        if (*v56)
        {
          v56 = (uint64_t **)*v56;
          v26 = *v18;
        }
        sub_1C4768E74(v57, v26);
        ++v58;
LABEL_37:
        *(_OWORD *)(v19 + 5) = v53;
        v4 = v51;
        goto LABEL_9;
      }
      v49 = (unint64_t)v14;
      ++*((_DWORD *)this + 26);
      v34 = llvm::WithColor::error(*(llvm::raw_ostream **)this, "", 0, 0);
      v35 = (void *)*((_QWORD *)v34 + 4);
      if (*((_QWORD *)v34 + 3) - (_QWORD)v35 > 0x16uLL)
      {
        qmemcpy(v35, "two compile unit DIEs, ", 23);
        *((_QWORD *)v34 + 4) += 23;
      }
      else
      {
        v34 = llvm::raw_ostream::write(v34, "two compile unit DIEs, ", 0x17uLL);
      }
      v36 = v22 >= v49;
      if (v22 >= v49)
        v37 = v21 + 5;
      else
        v37 = (uint64_t *)(v20 + 5);
      if (v36)
        v38 = (_QWORD **)v21;
      else
        v38 = v20;
      v39 = (const char *)*v38[6];
      v59 = &unk_1E8133270;
      v60 = "0x%08llx";
      v61 = v39;
      v40 = llvm::raw_ostream::operator<<(v34, (uint64_t)&v59);
      v41 = *((_QWORD *)v40 + 4);
      if ((unint64_t)(*((_QWORD *)v40 + 3) - v41) > 4)
      {
        *(_BYTE *)(v41 + 4) = 32;
        *(_DWORD *)v41 = 1684955424;
        *((_QWORD *)v40 + 4) += 5;
      }
      else
      {
        v40 = llvm::raw_ostream::write(v40, " and ", 5uLL);
      }
      v42 = **((_QWORD **)&v53 + 1);
      v52[0] = &unk_1E8133270;
      v52[1] = "0x%08llx";
      v52[2] = v42;
      v43 = llvm::raw_ostream::operator<<(v40, (uint64_t)v52);
      v44 = (void *)*((_QWORD *)v43 + 4);
      if (*((_QWORD *)v43 + 3) - (_QWORD)v44 > 0x2FuLL)
      {
        qmemcpy(v44, ", have the same DW_AT_stmt_list section offset:\n", 48);
        *((_QWORD *)v43 + 4) += 48;
      }
      else
      {
        llvm::raw_ostream::write(v43, ", have the same DW_AT_stmt_list section offset:\n", 0x30uLL);
      }
      v45 = *(llvm::raw_ostream **)this;
      v4 = v51;
      sub_1C624C4A4((uint64_t)&v59, v51);
      llvm::DWARFDie::dump(v37, v45, 0, (uint64_t)&v59);
      sub_1C624C568(&v59);
      v46 = *(llvm::raw_ostream **)this;
      sub_1C624C4A4((uint64_t)&v59, v51);
      llvm::DWARFDie::dump((uint64_t *)&v53, v46, 0, (uint64_t)&v59);
      sub_1C624C568(&v59);
      v32 = *(llvm::raw_ostream **)this;
      v47 = *(_BYTE **)(*(_QWORD *)this + 32);
      if ((unint64_t)v47 < *(_QWORD *)(*(_QWORD *)this + 24))
      {
        *((_QWORD *)v32 + 4) = v47 + 1;
        *v47 = 10;
        goto LABEL_9;
      }
    }
    else
    {
      ++*((_DWORD *)this + 26);
      v27 = llvm::WithColor::error(*(llvm::raw_ostream **)this, "", 0, 0);
      v28 = *((_QWORD *)v27 + 4);
      if ((unint64_t)(*((_QWORD *)v27 + 3) - v28) > 0xB)
      {
        *(_DWORD *)(v28 + 8) = 1533374057;
        *(_QWORD *)v28 = *(_QWORD *)".debug_line[";
        *((_QWORD *)v27 + 4) += 12;
      }
      else
      {
        v27 = llvm::raw_ostream::write(v27, ".debug_line[", 0xCuLL);
      }
      v59 = &unk_1E8133270;
      v60 = "0x%08llx";
      v61 = v12;
      v29 = llvm::raw_ostream::operator<<(v27, (uint64_t)&v59);
      v30 = (void *)*((_QWORD *)v29 + 4);
      if (*((_QWORD *)v29 + 3) - (_QWORD)v30 > 0x23uLL)
      {
        qmemcpy(v30, "] was not able to be parsed for CU:\n", 36);
        *((_QWORD *)v29 + 4) += 36;
      }
      else
      {
        llvm::raw_ostream::write(v29, "] was not able to be parsed for CU:\n", 0x24uLL);
      }
      v31 = *(llvm::raw_ostream **)this;
      sub_1C624C4A4((uint64_t)&v59, v4);
      llvm::DWARFDie::dump((uint64_t *)&v53, v31, 0, (uint64_t)&v59);
      sub_1C624C568(&v59);
      v32 = *(llvm::raw_ostream **)this;
      v33 = *(_BYTE **)(*(_QWORD *)this + 32);
      if ((unint64_t)v33 < *(_QWORD *)(*(_QWORD *)this + 24))
      {
        *((_QWORD *)v32 + 4) = v33 + 1;
        *v33 = 10;
        goto LABEL_9;
      }
    }
    llvm::raw_ostream::write(v32, 10);
    goto LABEL_9;
  }
LABEL_65:
  sub_1C49F3440(v57);
}

void llvm::DWARFVerifier::verifyDebugLineRows(llvm::DWARFVerifier *this)
{
  llvm::DWARFVerifier *v1;
  llvm::DWARFUnit **v2;
  llvm::DWARFUnit **v3;
  llvm::DWARFUnit **v4;
  unsigned int (*v5)(llvm::DWARFUnit **);
  llvm::DWARFUnit *v6;
  llvm::DWARFUnit *v7;
  llvm::DWARFUnit *v8;
  BOOL v9;
  llvm::DWARFUnit *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  llvm::raw_ostream *v18;
  llvm::raw_ostream *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int isFormClass;
  void *v24;
  void *v25;
  _BYTE *v26;
  char *CompilationDir;
  uint64_t v28;
  size_t v29;
  unsigned __int8 *p_p;
  size_t v31;
  uint64_t v32;
  int v33;
  size_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int i;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  size_t v43;
  unsigned __int8 *v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v60;
  llvm::raw_ostream *v61;
  llvm::raw_ostream *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  _WORD *v67;
  int v68;
  _QWORD *v69;
  uint64_t *v70;
  unint64_t *v71;
  unsigned int v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  llvm::raw_ostream *v79;
  llvm::raw_ostream *v80;
  uint64_t v81;
  uint64_t v82;
  llvm::raw_ostream *v83;
  llvm::raw_ostream *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  _WORD *v88;
  void *v89;
  uint64_t v90;
  _WORD *v91;
  const char *v92;
  const char *v93;
  char *v94;
  uint64_t v95;
  llvm::raw_ostream *v96;
  _BYTE *v97;
  int v98;
  uint64_t v99;
  void *v100;
  llvm::raw_ostream *v101;
  _BYTE *v102;
  uint64_t v103;
  _QWORD *v104;
  unsigned int (*v106)(llvm::DWARFUnit **);
  llvm::DWARFUnit **v107;
  llvm::DWARFUnit **v108;
  llvm::raw_ostream **v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  _QWORD *v115;
  unint64_t v116;
  uint64_t v117;
  unsigned __int8 *__s1;
  _QWORD v119[3];
  unsigned __int16 v120;
  uint64_t v121;
  char v122;
  void *__p;
  const char *v124;
  uint64_t v125;
  _QWORD *v126;
  __int128 v127;
  llvm::DWARFUnit *v128[2];
  llvm::DWARFUnit **v129;
  llvm::DWARFUnit **v130;
  unsigned int (*v131)(llvm::DWARFUnit **);
  llvm::DWARFUnit **v132;

  v1 = this;
  sub_1C548BC00(*((_QWORD *)this + 1), &v129);
  v2 = v129;
  v3 = v132;
  if (v129 != v132)
  {
    v4 = v130;
    v5 = v131;
    v109 = (llvm::raw_ostream **)v1;
    v107 = v130;
    v108 = v132;
    v106 = v131;
    while (1)
    {
      v6 = *v2;
      llvm::DWARFUnit::extractDIEsIfNeeded(*v2, 1);
      v7 = (llvm::DWARFUnit *)*((_QWORD *)v6 + 36);
      v8 = (llvm::DWARFUnit *)*((_QWORD *)v6 + 37);
      v9 = v7 == v8;
      if (v7 == v8)
        v10 = 0;
      else
        v10 = v6;
      if (v9)
        v7 = 0;
      v128[0] = v10;
      v128[1] = v7;
      llvm::DWARFContext::getLineTableForUnit(*((llvm::DWARFContext **)v1 + 1), *v2);
      if (v11)
        break;
LABEL_183:
      while (++v2 != v4)
      {
        if (v5(v2))
          goto LABEL_187;
      }
      v2 = v4;
LABEL_187:
      if (v2 == v3)
        return;
    }
    v12 = v11;
    v14 = v11[9];
    v13 = v11[10];
    v126 = 0;
    *(_QWORD *)&v127 = 0;
    *((_QWORD *)&v127 + 1) = 0x1000000000;
    v15 = v11[12];
    v112 = v11[13];
    v115 = v11;
    v16 = 0;
    if (v15 != v112)
    {
      v110 = -1431655765 * ((unint64_t)(v13 - v14) >> 4);
      v111 = (uint64_t)(v11 + 1);
      v17 = 1;
      while (1)
      {
        if (*(_QWORD *)(v15 + 48) <= v110)
        {
          v22 = v17;
        }
        else
        {
          ++*((_DWORD *)v1 + 26);
          v18 = llvm::WithColor::error(*(llvm::raw_ostream **)v1, "", 0, 0);
          v19 = v18;
          v20 = *((_QWORD *)v18 + 4);
          if ((unint64_t)(*((_QWORD *)v18 + 3) - v20) > 0xB)
          {
            *(_DWORD *)(v20 + 8) = 1533374057;
            *(_QWORD *)v20 = *(_QWORD *)".debug_line[";
            *((_QWORD *)v18 + 4) += 12;
          }
          else
          {
            llvm::raw_ostream::write(v18, ".debug_line[", 0xCuLL);
          }
          llvm::DWARFDie::find(v128, 16, &v120);
          if (v122)
          {
            isFormClass = llvm::DWARFFormValue::isFormClass(&v120, 8);
            v21 = v121;
            if (!isFormClass)
              v21 = 0;
          }
          else
          {
            v21 = 0;
          }
          __p = &unk_1E8133270;
          v124 = "0x%08llx";
          v125 = v21;
          llvm::raw_ostream::operator<<(v19, (uint64_t)&__p);
          v24 = (void *)*((_QWORD *)v19 + 4);
          if (*((_QWORD *)v19 + 3) - (_QWORD)v24 > 0x15uLL)
          {
            qmemcpy(v24, "].prologue.file_names[", 22);
            *((_QWORD *)v19 + 4) += 22;
          }
          else
          {
            llvm::raw_ostream::write(v19, "].prologue.file_names[", 0x16uLL);
          }
          v22 = v17;
          sub_1C5E21910(v19, v17, 0, 0, 0);
          v25 = (void *)*((_QWORD *)v19 + 4);
          if (*((_QWORD *)v19 + 3) - (_QWORD)v25 > 0x24uLL)
          {
            qmemcpy(v25, "].dir_idx contains an invalid index: ", 37);
            *((_QWORD *)v19 + 4) += 37;
          }
          else
          {
            llvm::raw_ostream::write(v19, "].dir_idx contains an invalid index: ", 0x25uLL);
          }
          sub_1C5E21910(v19, *(_QWORD *)(v15 + 48), 0, 0, 0);
          v26 = (_BYTE *)*((_QWORD *)v19 + 4);
          if (*((_BYTE **)v19 + 3) == v26)
          {
            llvm::raw_ostream::write(v19, "\n", 1uLL);
          }
          else
          {
            *v26 = 10;
            ++*((_QWORD *)v19 + 4);
          }
        }
        __p = 0;
        v124 = 0;
        v125 = 0;
        CompilationDir = llvm::DWARFUnit::getCompilationDir((llvm::DWARFUnit **)*v2);
        v28 = (uint64_t)CompilationDir;
        v114 = v17;
        if (CompilationDir)
          v29 = strlen(CompilationDir);
        else
          v29 = 0;
        llvm::DWARFDebugLine::Prologue::getFileNameByIndex(v111, v22, v28, v29, 4, (uint64_t)&__p, 0);
        p_p = (unsigned __int8 *)__p;
        if (v125 >= 0)
          p_p = (unsigned __int8 *)&__p;
        __s1 = p_p;
        v31 = v125 >= 0 ? HIBYTE(v125) & 0x7F : (size_t)v124;
        v32 = v127;
        v113 = v15;
        if ((_DWORD)v127)
        {
          v116 = v22;
          v33 = 0;
          if (v31)
          {
            v34 = v31;
            do
            {
              v35 = *p_p++;
              v33 = 33 * v33 + v35;
              --v34;
            }
            while (v34);
          }
          v36 = HIDWORD(v127);
          v37 = 1;
          for (i = v33; ; i = v39 + v37++)
          {
            v39 = i & (v32 - 1);
            v40 = (_QWORD *)v16[v39];
            if (v40 != (_QWORD *)-8)
            {
              if (!v40)
                goto LABEL_47;
              if (*((_DWORD *)&v16[v32 + 1] + v39) == v33
                && v31 == *v40
                && (!v31 || !memcmp(__s1, (char *)v40 + v36, v31)))
              {
                break;
              }
            }
          }
          if ((_DWORD)v39 != -1)
          {
            v41 = (int)v39;
            if ((int)v39 != v32)
            {
              v60 = v114;
              if (v114 == *(unsigned __int16 *)(v16[(int)v39] + 8))
              {
                v1 = (llvm::DWARFVerifier *)v109;
                v12 = v115;
              }
              else
              {
                v1 = (llvm::DWARFVerifier *)v109;
                v61 = llvm::WithColor::warning(*v109, "", 0, 0);
                v62 = v61;
                v63 = *((_QWORD *)v61 + 4);
                v12 = v115;
                if ((unint64_t)(*((_QWORD *)v61 + 3) - v63) > 0xB)
                {
                  *(_DWORD *)(v63 + 8) = 1533374057;
                  *(_QWORD *)v63 = *(_QWORD *)".debug_line[";
                  *((_QWORD *)v61 + 4) += 12;
                }
                else
                {
                  llvm::raw_ostream::write(v61, ".debug_line[", 0xCuLL);
                }
                llvm::DWARFDie::find(v128, 16, &v120);
                if (v122)
                {
                  v68 = llvm::DWARFFormValue::isFormClass(&v120, 8);
                  v64 = v121;
                  if (!v68)
                    v64 = 0;
                }
                else
                {
                  v64 = 0;
                }
                v119[0] = &unk_1E8133270;
                v119[1] = "0x%08llx";
                v119[2] = v64;
                llvm::raw_ostream::operator<<(v62, (uint64_t)v119);
                v65 = (void *)*((_QWORD *)v62 + 4);
                if (*((_QWORD *)v62 + 3) - (_QWORD)v65 > 0x15uLL)
                {
                  qmemcpy(v65, "].prologue.file_names[", 22);
                  *((_QWORD *)v62 + 4) += 22;
                }
                else
                {
                  llvm::raw_ostream::write(v62, "].prologue.file_names[", 0x16uLL);
                }
                sub_1C5E21910(v62, v116, 0, 0, 0);
                v66 = (void *)*((_QWORD *)v62 + 4);
                if (*((_QWORD *)v62 + 3) - (_QWORD)v66 > 0x1EuLL)
                {
                  qmemcpy(v66, "] is a duplicate of file_names[", 31);
                  *((_QWORD *)v62 + 4) += 31;
                }
                else
                {
                  llvm::raw_ostream::write(v62, "] is a duplicate of file_names[", 0x1FuLL);
                }
                sub_1C5E21910(v62, *(unsigned __int16 *)(v16[v41] + 8), 0, 0, 0);
                v67 = (_WORD *)*((_QWORD *)v62 + 4);
                if (*((_QWORD *)v62 + 3) - (_QWORD)v67 > 1uLL)
                {
                  *v67 = 2653;
                  *((_QWORD *)v62 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v62, "]\n", 2uLL);
                }
              }
              goto LABEL_79;
            }
          }
        }
        else
        {
          *(_QWORD *)((char *)&v127 + 4) = 0;
          v69 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
          if (!v69)
            llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
          v16 = v69;
          v69[16] = 2;
          v126 = v69;
          LODWORD(v32) = 16;
          LODWORD(v127) = 16;
        }
LABEL_47:
        v42 = 0;
        if (v31)
        {
          v43 = v31;
          v44 = __s1;
          do
          {
            v45 = *v44++;
            v42 = 33 * v42 + v45;
            --v43;
          }
          while (v43);
        }
        v46 = v32 - 1;
        v47 = (uint64_t)&v16[v32 + 1];
        v117 = HIDWORD(v127);
        v48 = -1;
        v49 = 1;
        v50 = v42;
        while (1)
        {
          v51 = v50 & v46;
          v52 = v16[v51];
          if (!v52)
            break;
          if (v52 == -8)
          {
            if (v48 == -1)
              v48 = v50 & v46;
          }
          else if (*(_DWORD *)(v47 + 4 * v51) == v42
                 && v31 == *(_QWORD *)v52
                 && (!v31 || !memcmp(__s1, (const void *)(v52 + v117), v31)))
          {
            goto LABEL_65;
          }
          v50 = v49 + v51;
          ++v49;
        }
        v53 = v48;
        if (v48 == -1)
        {
          v53 = v51;
          v51 = v51;
        }
        else
        {
          v51 = v48;
        }
        *(_DWORD *)(v47 + 4 * v53) = v42;
        v52 = v16[v51];
LABEL_65:
        if (v52 == -8)
          break;
        if (!v52)
          goto LABEL_69;
        v1 = (llvm::DWARFVerifier *)v109;
        v12 = v115;
        v15 = v113;
LABEL_78:
        *(_WORD *)(v52 + 8) = v114;
        v60 = v114;
LABEL_79:
        if (SHIBYTE(v125) < 0)
          operator delete(__p);
        v17 = v60 + 1;
        v15 += 136;
        if (v15 == v112)
          goto LABEL_108;
      }
      --DWORD2(v127);
LABEL_69:
      v54 = (char *)operator new(v31 + 17, (std::align_val_t)8uLL);
      v55 = v54;
      v56 = v54 + 16;
      if (v31)
        memcpy(v54 + 16, __s1, v31);
      v56[v31] = 0;
      *(_QWORD *)v55 = v31;
      *((_WORD *)v55 + 4) = 0;
      v16[v51] = v55;
      ++DWORD1(v127);
      v57 = llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v126, v51);
      v16 = v126;
      v58 = v57;
      v1 = (llvm::DWARFVerifier *)v109;
      v12 = v115;
      v15 = v113;
      while (1)
      {
        v52 = v126[v58];
        if (v52 && v52 != -8)
          break;
        ++v58;
      }
      goto LABEL_78;
    }
LABEL_108:
    v71 = (unint64_t *)v12[15];
    v70 = (uint64_t *)v12[16];
    if (v71 == (unint64_t *)v70)
    {
LABEL_173:
      if (DWORD1(v127))
      {
        v103 = v127;
        if ((_DWORD)v127)
        {
          v104 = v16;
          do
          {
            if (*v104 != -8 && *v104 != 0)
              MEMORY[0x1CAA32FB4]();
            ++v104;
            --v103;
          }
          while (v103);
        }
      }
      free(v16);
      v4 = v107;
      v3 = v108;
      v5 = v106;
      goto LABEL_183;
    }
    v72 = 0;
    v73 = 0;
    while (1)
    {
      if (*v71 < v73)
      {
        ++*((_DWORD *)v1 + 26);
        v83 = llvm::WithColor::error(*(llvm::raw_ostream **)v1, "", 0, 0);
        v84 = v83;
        v85 = *((_QWORD *)v83 + 4);
        if ((unint64_t)(*((_QWORD *)v83 + 3) - v85) > 0xB)
        {
          *(_DWORD *)(v85 + 8) = 1533374057;
          *(_QWORD *)v85 = *(_QWORD *)".debug_line[";
          *((_QWORD *)v83 + 4) += 12;
        }
        else
        {
          llvm::raw_ostream::write(v83, ".debug_line[", 0xCuLL);
        }
        llvm::DWARFDie::find(v128, 16, &v120);
        if (v122)
        {
          v98 = llvm::DWARFFormValue::isFormClass(&v120, 8);
          v86 = v121;
          if (!v98)
            v86 = 0;
        }
        else
        {
          v86 = 0;
        }
        __p = &unk_1E8133270;
        v124 = "0x%08llx";
        v125 = v86;
        llvm::raw_ostream::operator<<(v84, (uint64_t)&__p);
        v99 = *((_QWORD *)v84 + 4);
        if ((unint64_t)(*((_QWORD *)v84 + 3) - v99) > 5)
        {
          *(_WORD *)(v99 + 4) = 23415;
          *(_DWORD *)v99 = 1869750365;
          *((_QWORD *)v84 + 4) += 6;
        }
        else
        {
          llvm::raw_ostream::write(v84, "] row[", 6uLL);
        }
        sub_1C5E21910(v84, v72, 0, 0, 0);
        v100 = (void *)*((_QWORD *)v84 + 4);
        if (*((_QWORD *)v84 + 3) - (_QWORD)v100 > 0x29uLL)
        {
          qmemcpy(v100, "] decreases in address from previous row:\n", 42);
          *((_QWORD *)v84 + 4) += 42;
        }
        else
        {
          llvm::raw_ostream::write(v84, "] decreases in address from previous row:\n", 0x2AuLL);
        }
        llvm::DWARFDebugLine::Row::dumpTableHeader(*(llvm::DWARFDebugLine::Row **)v1, 0);
        if (v72)
          llvm::DWARFDebugLine::Row::dump((llvm::DWARFDebugLine::Row *)(v12[15] + 32 * (v72 - 1)), *(llvm::raw_ostream **)v1);
        llvm::DWARFDebugLine::Row::dump((llvm::DWARFDebugLine::Row *)v71, *(llvm::raw_ostream **)v1);
        v101 = *(llvm::raw_ostream **)v1;
        v102 = *(_BYTE **)(*(_QWORD *)v1 + 32);
        if ((unint64_t)v102 >= *(_QWORD *)(*(_QWORD *)v1 + 24))
        {
          llvm::raw_ostream::write(v101, 10);
        }
        else
        {
          *((_QWORD *)v101 + 4) = v102 + 1;
          *v102 = 10;
        }
      }
      v74 = *((unsigned __int16 *)v71 + 11);
      v75 = *((unsigned __int16 *)v12 + 8);
      if (v75 < 5)
      {
        if (!*((_WORD *)v71 + 11) || 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v12[13] - v12[12]) >> 3) < v74)
        {
LABEL_121:
          ++*((_DWORD *)v1 + 26);
          v79 = llvm::WithColor::error(*(llvm::raw_ostream **)v1, "", 0, 0);
          v80 = v79;
          v81 = *((_QWORD *)v79 + 4);
          if ((unint64_t)(*((_QWORD *)v79 + 3) - v81) > 0xB)
          {
            *(_DWORD *)(v81 + 8) = 1533374057;
            *(_QWORD *)v81 = *(_QWORD *)".debug_line[";
            *((_QWORD *)v79 + 4) += 12;
          }
          else
          {
            llvm::raw_ostream::write(v79, ".debug_line[", 0xCuLL);
          }
          llvm::DWARFDie::find(v128, 16, &v120);
          if (v122)
          {
            v87 = llvm::DWARFFormValue::isFormClass(&v120, 8);
            v82 = v121;
            if (!v87)
              v82 = 0;
          }
          else
          {
            v82 = 0;
          }
          __p = &unk_1E8133270;
          v124 = "0x%08llx";
          v125 = v82;
          llvm::raw_ostream::operator<<(v80, (uint64_t)&__p);
          v88 = (_WORD *)*((_QWORD *)v80 + 4);
          if (*((_QWORD *)v80 + 3) - (_QWORD)v88 > 1uLL)
          {
            *v88 = 23389;
            *((_QWORD *)v80 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v80, "][", 2uLL);
          }
          sub_1C5E21910(v80, v72, 0, 0, 0);
          v89 = (void *)*((_QWORD *)v80 + 4);
          if (*((_QWORD *)v80 + 3) - (_QWORD)v89 > 0x18uLL)
          {
            qmemcpy(v89, "] has invalid file index ", 25);
            *((_QWORD *)v80 + 4) += 25;
          }
          else
          {
            llvm::raw_ostream::write(v80, "] has invalid file index ", 0x19uLL);
          }
          sub_1C5E21910(v80, *((unsigned __int16 *)v71 + 11), 0, 0, 0);
          v90 = *((_QWORD *)v80 + 4);
          if ((unint64_t)(*((_QWORD *)v80 + 3) - v90) > 0x13)
          {
            *(_DWORD *)(v90 + 16) = 1528849778;
            *(_OWORD *)v90 = *(_OWORD *)" (valid values are [";
            v91 = (_WORD *)(*((_QWORD *)v80 + 4) + 20);
            *((_QWORD *)v80 + 4) = v91;
          }
          else
          {
            llvm::raw_ostream::write(v80, " (valid values are [", 0x14uLL);
            v91 = (_WORD *)*((_QWORD *)v80 + 4);
          }
          if (v75 <= 4)
            v92 = "1,";
          else
            v92 = "0,";
          if (*((_QWORD *)v80 + 3) - (_QWORD)v91 > 1uLL)
          {
            *v91 = *(_WORD *)v92;
            *((_QWORD *)v80 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v80, v92, 2uLL);
          }
          sub_1C5E21910(v80, 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v115[13] - v115[12]) >> 3), 0, 0, 0);
          if (v75 <= 4)
            v93 = "]";
          else
            v93 = ")";
          v94 = (char *)*((_QWORD *)v80 + 4);
          if (*((char **)v80 + 3) == v94)
          {
            llvm::raw_ostream::write(v80, v93, 1uLL);
            v95 = *((_QWORD *)v80 + 4);
          }
          else
          {
            *v94 = *v93;
            v95 = *((_QWORD *)v80 + 4) + 1;
            *((_QWORD *)v80 + 4) = v95;
          }
          v12 = v115;
          if ((unint64_t)(*((_QWORD *)v80 + 3) - v95) > 2)
          {
            *(_BYTE *)(v95 + 2) = 10;
            *(_WORD *)v95 = 14889;
            *((_QWORD *)v80 + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(v80, "):\n", 3uLL);
          }
          llvm::DWARFDebugLine::Row::dumpTableHeader(*(llvm::DWARFDebugLine::Row **)v1, 0);
          llvm::DWARFDebugLine::Row::dump((llvm::DWARFDebugLine::Row *)v71, *(llvm::raw_ostream **)v1);
          v96 = *(llvm::raw_ostream **)v1;
          v97 = *(_BYTE **)(*(_QWORD *)v1 + 32);
          if ((unint64_t)v97 >= *(_QWORD *)(*(_QWORD *)v1 + 24))
          {
            llvm::raw_ostream::write(v96, 10);
          }
          else
          {
            *((_QWORD *)v96 + 4) = v97 + 1;
            *v97 = 10;
          }
        }
      }
      else if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v12[13] - v12[12]) >> 3) <= v74)
      {
        goto LABEL_121;
      }
      v76 = *((_BYTE *)v71 + 29);
      v78 = *v71;
      v71 += 4;
      v77 = v78;
      if ((v76 & 4) != 0)
        v73 = 0;
      else
        v73 = v77;
      ++v72;
      if (v71 == (unint64_t *)v70)
        goto LABEL_173;
    }
  }
}

uint64_t llvm::DWARFVerifier::DWARFVerifier(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  __int128 v6;
  __int128 *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  v6 = *a4;
  *(_QWORD *)(a1 + 30) = *(_QWORD *)((char *)a4 + 14);
  *(_OWORD *)(a1 + 16) = v6;
  v7 = (__int128 *)*((_QWORD *)a4 + 6);
  if (v7)
  {
    if (v7 == (__int128 *)((char *)a4 + 24))
    {
      *(_QWORD *)(a1 + 64) = a1 + 40;
      (*(void (**)(_QWORD))(**((_QWORD **)a4 + 6) + 24))(*((_QWORD *)a4 + 6));
    }
    else
    {
      *(_QWORD *)(a1 + 64) = v7;
      *((_QWORD *)a4 + 6) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
  }
  v8 = (__int128 *)*((_QWORD *)a4 + 10);
  if (v8)
  {
    if (v8 == (__int128 *)((char *)a4 + 56))
    {
      *(_QWORD *)(a1 + 96) = a1 + 72;
      (*(void (**)(_QWORD))(**((_QWORD **)a4 + 10) + 24))(*((_QWORD *)a4 + 10));
    }
    else
    {
      *(_QWORD *)(a1 + 96) = v8;
      *((_QWORD *)a4 + 10) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_DWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 108) = 0;
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 520) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 520));
  if (v9)
  {
    v10 = v9;
    *(_BYTE *)(a1 + 108) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 424))(v9);
    *(_BYTE *)(a1 + 109) = (*(_DWORD *)(v10 + 8) & 0xFFFFFFFC) == 16;
  }
  return a1;
}

BOOL llvm::DWARFVerifier::handleDebugLine(llvm::DWARFVerifier *this)
{
  llvm::raw_ostream *v2;
  void *v3;

  *((_DWORD *)this + 26) = 0;
  v2 = *(llvm::raw_ostream **)this;
  v3 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v3 > 0x18uLL)
  {
    qmemcpy(v3, "Verifying .debug_line...\n", 25);
    *((_QWORD *)v2 + 4) += 25;
  }
  else
  {
    llvm::raw_ostream::write(v2, "Verifying .debug_line...\n", 0x19uLL);
  }
  llvm::DWARFVerifier::verifyDebugLineStmtOffsets(this);
  llvm::DWARFVerifier::verifyDebugLineRows(this);
  return *((_DWORD *)this + 26) == 0;
}

uint64_t llvm::DWARFVerifier::verifyAppleAccelTable(llvm::raw_ostream **a1, _OWORD *a2, uint64_t *a3, const char *a4)
{
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  uint64_t v12;
  _DWORD *v13;
  size_t v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  llvm::raw_ostream *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  llvm::raw_ostream *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned __int16 v35;
  unsigned __int16 v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  llvm::raw_ostream *v42;
  llvm::raw_ostream *v43;
  _DWORD *v44;
  size_t v45;
  const char *v46;
  size_t v47;
  void *v48;
  const char *CStrRef;
  const char *v50;
  llvm::raw_ostream *v51;
  uint64_t v52;
  llvm::dwarf *v53;
  size_t v54;
  const char *v55;
  size_t v56;
  _QWORD *v57;
  uint64_t v58;
  llvm::raw_ostream *v60;
  void *v61;
  llvm::raw_ostream *v62;
  std::string *p_p;
  size_t size;
  _BYTE *v65;
  llvm::raw_ostream *v66;
  void *v67;
  const char *v68;
  size_t v69;
  void *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  std::string::size_type v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  std::string __p;
  unint64_t v80;
  unsigned int v81;
  int v82;
  unint64_t v83;
  int v84;
  unint64_t v85;
  const char *v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  __int128 v93;
  __int128 v94;
  _OWORD *v95;
  uint64_t (**v96)();
  __int128 v97;
  __int128 v98;
  _OWORD *v99;
  __int128 v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  void *v105;
  uint64_t v106;
  _BYTE v107[24];
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  v8 = *((_QWORD *)a1[1] + 65);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  v93 = *a2;
  LOWORD(v94) = v9;
  *((_QWORD *)&v94 + 1) = v8;
  v95 = a2;
  v100 = *(_OWORD *)a3;
  v75 = a3;
  v10 = a3[2];
  v97 = v93;
  v98 = v94;
  v99 = a2;
  v96 = &off_1E8169710;
  v101 = v10;
  v105 = v107;
  v106 = 0x300000000;
  v107[16] = 0;
  v11 = *a1;
  v12 = *((_QWORD *)*a1 + 4);
  if ((unint64_t)(*((_QWORD *)*a1 + 3) - v12) > 9)
  {
    *(_WORD *)(v12 + 8) = 8295;
    *(_QWORD *)v12 = *(_QWORD *)"Verifying ";
    v13 = (_DWORD *)(*((_QWORD *)v11 + 4) + 10);
    *((_QWORD *)v11 + 4) = v13;
    if (!a4)
      goto LABEL_5;
  }
  else
  {
    llvm::raw_ostream::write(*a1, "Verifying ", 0xAuLL);
    v13 = (_DWORD *)*((_QWORD *)v11 + 4);
    if (!a4)
      goto LABEL_5;
  }
  v14 = strlen(a4);
  v15 = v14;
  if (v14 <= *((_QWORD *)v11 + 3) - (_QWORD)v13)
  {
    if (v14)
    {
      memcpy(v13, a4, v14);
      v13 = (_DWORD *)(*((_QWORD *)v11 + 4) + v15);
      *((_QWORD *)v11 + 4) = v13;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, a4, v14);
    v13 = (_DWORD *)*((_QWORD *)v11 + 4);
  }
LABEL_5:
  if (*((_QWORD *)v11 + 3) - (_QWORD)v13 > 3uLL)
  {
    *v13 = 170798638;
    *((_QWORD *)v11 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v11, "...\n", 4uLL);
  }
  if (*((_QWORD *)&v93 + 1) <= 0x14uLL)
  {
    v60 = llvm::WithColor::error(*a1, "", 0, 0);
    v61 = (void *)*((_QWORD *)v60 + 4);
    if (*((_QWORD *)v60 + 3) - (_QWORD)v61 > 0x2DuLL)
    {
      qmemcpy(v61, "Section is too small to fit a section header.\n", 46);
      *((_QWORD *)v60 + 4) += 46;
    }
    else
    {
      llvm::raw_ostream::write(v60, "Section is too small to fit a section header.\n", 0x2EuLL);
    }
LABEL_99:
    v18 = 1;
    goto LABEL_73;
  }
  llvm::AppleAcceleratorTable::extract((llvm::AppleAcceleratorTable *)&v96, &v92);
  if (v92)
  {
    v62 = llvm::WithColor::error(*a1, "", 0, 0);
    v91 = v92;
    v92 = 0;
    sub_1C61D2548(&v91, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v62, (const char *)p_p, size);
    v65 = (_BYTE *)*((_QWORD *)v62 + 4);
    if ((unint64_t)v65 >= *((_QWORD *)v62 + 3))
    {
      llvm::raw_ostream::write(v62, 10);
    }
    else
    {
      *((_QWORD *)v62 + 4) = v65 + 1;
      *v65 = 10;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v91)
      (*(void (**)(char *))(*(_QWORD *)v91 + 8))(v91);
    if (v92)
      (*(void (**)(char *))(*(_QWORD *)v92 + 8))(v92);
    goto LABEL_99;
  }
  v73 = v103;
  v16 = (char *)(v104 + 20);
  v92 = v16;
  v77 = v102;
  if (v102)
  {
    v17 = 0;
    v18 = 0;
    do
    {
      v19 = sub_1C6387364((uint64_t)&v93, (unint64_t *)&v92, 0);
      if (v19 >= v73 && (_DWORD)v19 != -1)
      {
        v21 = v19;
        v22 = llvm::WithColor::error(*a1, "", 0, 0);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E813F0F8;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)"Bucket[%d] has invalid hash index: %u.\n";
        __p.__r_.__value_.__r.__words[2] = v17 | (v21 << 32);
        llvm::raw_ostream::operator<<(v22, (uint64_t)&__p);
        v18 = (v18 + 1);
      }
      ++v17;
    }
    while (v77 != v17);
  }
  else
  {
    v18 = 0;
  }
  if (!(_DWORD)v106)
  {
    v66 = llvm::WithColor::error(*a1, "", 0, 0);
    v67 = (void *)*((_QWORD *)v66 + 4);
    if (*((_QWORD *)v66 + 3) - (_QWORD)v67 <= 0x22uLL)
    {
      v68 = "No atoms: failed to read HashData.\n";
      v69 = 35;
LABEL_90:
      llvm::raw_ostream::write(v66, v68, v69);
LABEL_91:
      v18 = 1;
      goto LABEL_73;
    }
    qmemcpy(v67, "No atoms: failed to read HashData.\n", 35);
    v71 = *((_QWORD *)v66 + 4) + 35;
LABEL_108:
    *((_QWORD *)v66 + 4) = v71;
    goto LABEL_91;
  }
  if (!llvm::AppleAcceleratorTable::validateForms((llvm::AppleAcceleratorTable *)&v96))
  {
    v66 = llvm::WithColor::error(*a1, "", 0, 0);
    v70 = (void *)*((_QWORD *)v66 + 4);
    if (*((_QWORD *)v66 + 3) - (_QWORD)v70 <= 0x2AuLL)
    {
      v68 = "Unsupported form: failed to read HashData.\n";
      v69 = 43;
      goto LABEL_90;
    }
    qmemcpy(v70, "Unsupported form: failed to read HashData.\n", 43);
    v71 = *((_QWORD *)v66 + 4) + 43;
    goto LABEL_108;
  }
  if ((_DWORD)v73)
  {
    v74 = (std::string::size_type)a4;
    v23 = 0;
    v72 = &v16[(4 * v77)];
    while (1)
    {
      v24 = (4 * v23);
      v90 = &v72[v24];
      v89 = &v72[(4 * v73) + v24];
      v25 = v23;
      v26 = sub_1C6387364((uint64_t)&v93, (unint64_t *)&v90, 0);
      v88 = 0;
      v88 = sub_1C6387364((uint64_t)&v93, (unint64_t *)&v89, 0);
      v76 = v25;
      if (*((_QWORD *)&v93 + 1) <= v88 + 7)
      {
        v27 = llvm::WithColor::error(*a1, "", 0, 0);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E8169860;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)"Hash[%d] has invalid HashData offset: 0x%08llx.\n";
        LODWORD(__p.__r_.__value_.__r.__words[2]) = v25;
        v80 = v88;
        llvm::raw_ostream::operator<<(v27, (uint64_t)&__p);
        v18 = (v18 + 1);
      }
      v28 = sub_1C6387364((uint64_t)&v93, &v88, 0);
      if (v28)
        break;
LABEL_72:
      v23 = v76 + 1;
      if (v76 + 1 == v73)
        goto LABEL_73;
    }
    v29 = v28;
    v78 = 0;
    while (1)
    {
      v30 = sub_1C6387364((uint64_t)&v93, &v88, 0);
      if (v30)
        break;
LABEL_28:
      ++v78;
      v29 = sub_1C6387364((uint64_t)&v93, &v88, 0);
      if (!v29)
        goto LABEL_72;
    }
    v31 = 0;
    v32 = v29;
    v33 = v30;
    while (1)
    {
      v34 = llvm::AppleAcceleratorTable::readAtoms((llvm::AppleAcceleratorTable *)&v96, &v88);
      v36 = v35;
      if (llvm::DWARFContext::getDIEForOffset((uint64_t **)a1[1], v34))
        v38 = v37 == 0;
      else
        v38 = 1;
      if (v38)
      {
        if ((_DWORD)v77)
          v41 = v26 % v77;
        else
          v41 = -1;
        v87 = v32;
        CStrRef = (const char *)llvm::DataExtractor::getCStrRef(v75, &v87, 0);
        if (CStrRef)
          v50 = CStrRef;
        else
          v50 = "<NULL>";
        v51 = llvm::WithColor::error(*a1, "", 0, 0);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E816A630;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)"%s Bucket[%d] Hash[%d] = 0x%08x Str[%u] = 0x%08llx DIE[%"
                                                                "d] = 0x%08llx is not a valid DIE offset for \"%s\".\n";
        __p.__r_.__value_.__r.__words[2] = v74;
        v80 = __PAIR64__(v76, v41);
        v81 = v26;
        v82 = v78;
        v83 = v32;
        v84 = v31;
        v85 = v34;
        v86 = v50;
        llvm::raw_ostream::operator<<(v51, (uint64_t)&__p);
      }
      else
      {
        if (!v36)
          goto LABEL_39;
        v39 = v37;
        v40 = *(_QWORD *)(v37 + 16);
        if (v40)
          LODWORD(v40) = *(unsigned __int16 *)(v40 + 4);
        if ((_DWORD)v40 == v36)
          goto LABEL_39;
        v42 = llvm::WithColor::error(*a1, "", 0, 0);
        v43 = v42;
        v44 = (_DWORD *)*((_QWORD *)v42 + 4);
        if (*((_QWORD *)v42 + 3) - (_QWORD)v44 > 3uLL)
        {
          *v44 = 543646036;
          *((_QWORD *)v42 + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(v42, "Tag ", 4uLL);
        }
        v46 = llvm::dwarf::TagString((llvm::dwarf *)v36);
        v47 = v45;
        v48 = (void *)*((_QWORD *)v43 + 4);
        if (v45 <= *((_QWORD *)v43 + 3) - (_QWORD)v48)
        {
          if (v45)
          {
            memcpy(v48, v46, v45);
            v48 = (void *)(*((_QWORD *)v43 + 4) + v47);
            *((_QWORD *)v43 + 4) = v48;
          }
        }
        else
        {
          llvm::raw_ostream::write(v43, v46, v45);
          v48 = (void *)*((_QWORD *)v43 + 4);
        }
        if (*((_QWORD *)v43 + 3) - (_QWORD)v48 > 0x28uLL)
        {
          qmemcpy(v48, " in accelerator table does not match Tag ", 41);
          *((_QWORD *)v43 + 4) += 41;
        }
        else
        {
          llvm::raw_ostream::write(v43, " in accelerator table does not match Tag ", 0x29uLL);
        }
        v52 = *(_QWORD *)(v39 + 16);
        if (v52)
          v53 = (llvm::dwarf *)*(unsigned __int16 *)(v52 + 4);
        else
          v53 = 0;
        v55 = llvm::dwarf::TagString(v53);
        v56 = v54;
        v57 = (_QWORD *)*((_QWORD *)v43 + 4);
        if (v54 <= *((_QWORD *)v43 + 3) - (_QWORD)v57)
        {
          if (v54)
          {
            memcpy(v57, v55, v54);
            v57 = (_QWORD *)(*((_QWORD *)v43 + 4) + v56);
            *((_QWORD *)v43 + 4) = v57;
          }
        }
        else
        {
          llvm::raw_ostream::write(v43, v55, v54);
          v57 = (_QWORD *)*((_QWORD *)v43 + 4);
        }
        if (*((_QWORD *)v43 + 3) - (_QWORD)v57 > 7uLL)
        {
          *v57 = 0x5B45494420666F20;
          *((_QWORD *)v43 + 4) += 8;
        }
        else
        {
          llvm::raw_ostream::write(v43, " of DIE[", 8uLL);
        }
        sub_1C5E21910(v43, v31, 0, 0, 0);
        v58 = *((_QWORD *)v43 + 4);
        if ((unint64_t)(*((_QWORD *)v43 + 3) - v58) > 2)
        {
          *(_BYTE *)(v58 + 2) = 10;
          *(_WORD *)v58 = 11869;
          *((_QWORD *)v43 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v43, "].\n", 3uLL);
        }
      }
      v18 = (v18 + 1);
LABEL_39:
      if (v33 == ++v31)
        goto LABEL_28;
    }
  }
LABEL_73:
  v96 = &off_1E8169710;
  if (v105 != v107)
    free(v105);
  return v18;
}

uint64_t llvm::DWARFVerifier::verifyDebugNamesCULists(llvm::DWARFVerifier *this, const llvm::DWARFDebugNames *a2)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  const char *v7;
  const char *v8;
  const char *v9;
  void ***v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int i;
  int v16;
  char v17;
  uint64_t *v18;
  void ***v19;
  llvm::raw_ostream *v20;
  unint64_t *v21;
  llvm::raw_ostream *v22;
  unint64_t *v23;
  llvm::raw_ostream *v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  llvm::raw_ostream *v33;
  unsigned int v36;
  const char *v37;
  uint64_t v38;
  void ***v39;
  uint64_t v40;
  void *v41;
  unint64_t *v42;
  void **v43;
  unint64_t *p_RelocatedValue;
  void **v45;
  void ***v46;
  _QWORD v47[3];
  unint64_t RelocatedValue;
  unint64_t *v49;
  uint64_t v50;
  unsigned int v51;

  v49 = 0;
  v50 = 0;
  v51 = 0;
  v3 = *((_QWORD *)this + 1);
  llvm::DWARFContext::parseNormalUnits(v3);
  v4 = *(_DWORD *)(v3 + 72);
  if (v4 != -1)
  {
    if (!v4)
      goto LABEL_4;
    goto LABEL_3;
  }
  v4 = *(_DWORD *)(v3 + 24);
  if (v4)
  {
LABEL_3:
    v5 = (4 * v4 / 3u + 1) | ((unint64_t)(4 * v4 / 3u + 1) >> 1);
    v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
    sub_1C54BF948((uint64_t)&v49, (((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8)) + 1);
  }
LABEL_4:
  sub_1C548BC00(*((_QWORD *)this + 1), &v37);
  v7 = v37;
  v8 = (const char *)v40;
  if (v37 != (const char *)v40)
  {
    v9 = (const char *)v38;
    v10 = v39;
    do
    {
      RelocatedValue = *(_QWORD *)(*(_QWORD *)v7 + 24);
      sub_1C54BFAD4((uint64_t)&v49, (uint64_t *)&RelocatedValue)[1] = -1;
      while (1)
      {
        v7 += 8;
        if (v7 == v9)
          break;
        if (((unsigned int (*)(const char *))v10)(v7))
          goto LABEL_11;
      }
      v7 = v9;
LABEL_11:
      ;
    }
    while (v7 != v8);
  }
  v11 = *((_DWORD *)a2 + 20);
  if (v11)
  {
    v36 = 0;
    v12 = *((_QWORD *)a2 + 9);
    v13 = v12 + 160 * v11;
    do
    {
      v14 = *(_DWORD *)(v12 + 36);
      if (v14)
      {
        for (i = 0; i != v14; ++i)
        {
          RelocatedValue = 0;
          if (*(_BYTE *)(v12 + 32))
            v16 = 8;
          else
            v16 = 4;
          if (*(_BYTE *)(v12 + 32))
            v17 = 3;
          else
            v17 = 2;
          v37 = (const char *)(*(_QWORD *)(v12 + 112) + (i << v17));
          RelocatedValue = llvm::DWARFDataExtractor::getRelocatedValue(*(_QWORD *)(v12 + 96) + 8, v16, (unint64_t *)&v37, 0, 0);
          v18 = sub_1C5309DE0((uint64_t *)&v49, &RelocatedValue);
          if (&v49[2 * v51] == (unint64_t *)v18)
          {
            v20 = llvm::WithColor::error(*(llvm::raw_ostream **)this, "", 0, 0);
            v21 = *(unint64_t **)(v12 + 104);
            v37 = "Name Index @ {0:x} references a non-existing CU @ {1:x}\n";
            v38 = 56;
            v39 = &v45;
            v40 = 2;
            v41 = &unk_1E8134F58;
            v42 = v21;
            v43 = (void **)&unk_1E816A600;
            p_RelocatedValue = &RelocatedValue;
            v45 = &v41;
            v46 = &v43;
            sub_1C639D338((uint64_t)&v37, v20);
            ++v36;
          }
          else
          {
            v19 = (void ***)(v18 + 1);
            if (v18[1] == -1)
            {
              *v19 = *(void ***)(v12 + 104);
            }
            else
            {
              v22 = llvm::WithColor::error(*(llvm::raw_ostream **)this, "", 0, 0);
              v23 = *(unint64_t **)(v12 + 104);
              v37 = "Name Index @ {0:x} references a CU @ {1:x}, but this CU is already indexed by Name Index @ {2:x}\n";
              v38 = 97;
              v39 = (void ***)v47;
              v40 = 3;
              v41 = &unk_1E8134F58;
              v42 = v23;
              v43 = (void **)&unk_1E816A600;
              p_RelocatedValue = &RelocatedValue;
              v45 = (void **)&unk_1E816A600;
              v46 = v19;
              v47[0] = &v41;
              v47[1] = &v43;
              v47[2] = &v45;
              sub_1C639D338((uint64_t)&v37, v22);
            }
          }
        }
      }
      else
      {
        v24 = llvm::WithColor::error(*(llvm::raw_ostream **)this, "", 0, 0);
        v25 = *(unint64_t **)(v12 + 104);
        v37 = "Name Index @ {0:x} does not index any CU\n";
        v38 = 41;
        v39 = &v43;
        v40 = 1;
        v41 = &unk_1E8134F58;
        v42 = v25;
        v43 = &v41;
        sub_1C639D338((uint64_t)&v37, v24);
        ++v36;
      }
      v12 += 160;
    }
    while (v12 != v13);
  }
  else
  {
    v36 = 0;
  }
  v26 = (uint64_t)v49;
  v27 = &v49[2 * v51];
  if ((_DWORD)v50)
  {
    if (v51)
    {
      v28 = 16 * v51;
      v29 = v49;
      while (*v29 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v29 += 2;
        v28 -= 16;
        if (!v28)
          goto LABEL_40;
      }
    }
    else
    {
      v29 = v49;
    }
  }
  else
  {
LABEL_40:
    v29 = &v49[2 * v51];
  }
  v30 = &v49[2 * v51];
  if (v29 != v30)
  {
    do
    {
      if (v29[1] == -1)
      {
        v33 = llvm::WithColor::warning(*(llvm::raw_ostream **)this, "", 0, 0);
        v37 = "CU @ {0:x} not covered by any Name Index\n";
        v38 = 41;
        v39 = &v43;
        v40 = 1;
        v41 = &unk_1E816A260;
        v42 = v29;
        v43 = &v41;
        sub_1C639D338((uint64_t)&v37, v33);
      }
      v31 = v29 + 2;
      while (v31 != v27)
      {
        v32 = *v31;
        v31 += 2;
        if (v32 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v29 = v31 - 2;
          goto LABEL_50;
        }
      }
      v29 = v27;
LABEL_50:
      ;
    }
    while (v29 != v30);
    v26 = (uint64_t)v49;
  }
  MEMORY[0x1CAA32FB4](v26, 8);
  return v36;
}

uint64_t llvm::DWARFVerifier::verifyNameIndexBuckets(llvm::raw_ostream **this, const llvm::DWARFDebugNames::NameIndex *a2, const llvm::DataExtractor *a3)
{
  unsigned int v4;
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  unsigned int *v20;
  int v21;
  uint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int *v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  void ***v31;
  void **v32;
  unsigned __int32 i;
  unsigned int *v34;
  unsigned __int32 v35;
  unsigned int *CStrRef;
  unsigned int *v37;
  char *v38;
  unsigned int v39;
  void ***v40;
  llvm::raw_ostream *v41;
  char *v42;
  unint64_t *v43;
  unsigned int v44;
  llvm::raw_ostream *v45;
  unint64_t *v46;
  int v47;
  llvm::raw_ostream *v48;
  unint64_t *v49;
  unsigned int v50;
  llvm::raw_ostream *v51;
  unint64_t *v52;
  void **v53;
  __n128 v55;
  void ***v56;
  uint64_t v57;
  void *v58;
  unint64_t *v59;
  void **v60;
  unsigned int *v61;
  void *v62;
  unsigned __int32 *v63;
  void **v64;
  void ***v65;
  void **v66;
  void ***v67;
  void **v68;
  void ***v69;
  void **v70;
  void ***v71;
  void ***v72;
  char *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned __int32 v76;
  unsigned int v77;
  unint64_t v78[2];

  v4 = *((_DWORD *)a2 + 12);
  if (v4)
  {
    if (v4 == -1)
    {
      v5 = 0;
      v6 = 0;
    }
    else
    {
      v5 = (unsigned int *)operator new(8 * (v4 + 1));
      v6 = (char *)&v5[2 * v4 + 2];
    }
    v7 = 0;
    v8 = 0;
    LODWORD(v78[0]) = 0;
    v9 = v5;
    do
    {
      LODWORD(v73) = 0;
      v55.n128_u64[0] = *((_QWORD *)a2 + 15) + 4 * v8;
      v10 = sub_1C6387364(*((_QWORD *)a2 + 12) + 8, v55.n128_u64, 0);
      LODWORD(v73) = v10;
      if (v10 > *((_DWORD *)a2 + 13))
      {
        v19 = llvm::WithColor::error(*this, "", 0, 0);
        v20 = (unsigned int *)*((_QWORD *)a2 + 13);
        v21 = *((_DWORD *)a2 + 13);
        v55.n128_u64[0] = (unint64_t)"Bucket {0} of Name Index @ {1:x} contains invalid value {2}. Valid range is [0, {3}].\n";
        v55.n128_u64[1] = 86;
        v56 = &v66;
        v57 = 4;
        v58 = &unk_1E8168E30;
        v59 = v78;
        v60 = (void **)&unk_1E8134F58;
        v61 = v20;
        v62 = &unk_1E8168E30;
        v63 = (unsigned __int32 *)&v73;
        v64 = (void **)&unk_1E816A230;
        LODWORD(v65) = v21;
        v66 = &v58;
        v67 = &v60;
        v68 = &v62;
        v69 = &v64;
        sub_1C639D338((uint64_t)&v55, v19);
        v7 = (v7 + 1);
      }
      else
      {
        v11 = v10;
        if (v10)
        {
          if (v5 >= (unsigned int *)v6)
          {
            v12 = ((char *)v5 - (char *)v9) >> 3;
            v13 = v12 + 1;
            if ((unint64_t)(v12 + 1) >> 61)
              goto LABEL_71;
            if ((v6 - (char *)v9) >> 2 > v13)
              v13 = (v6 - (char *)v9) >> 2;
            if ((unint64_t)(v6 - (char *)v9) >= 0x7FFFFFFFFFFFFFF8)
              v14 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v14 = v13;
            if (v14 >> 61)
              goto LABEL_72;
            v15 = (char *)operator new(8 * v14);
            v16 = &v15[8 * v12];
            *(_DWORD *)v16 = v78[0];
            *((_DWORD *)v16 + 1) = v11;
            v17 = v16;
            while (v5 != v9)
            {
              v18 = *((_QWORD *)v5 - 1);
              v5 -= 2;
              *((_QWORD *)v17 - 1) = v18;
              v17 -= 8;
            }
            v6 = &v15[8 * v14];
            v5 = (unsigned int *)(v16 + 8);
            if (v9)
              operator delete(v9);
            v9 = (unsigned int *)v17;
          }
          else
          {
            *v5 = v78[0];
            v5[1] = v10;
            v5 += 2;
          }
        }
      }
      v8 = LODWORD(v78[0]) + 1;
      LODWORD(v78[0]) = v8;
    }
    while (v8 < v4);
    if (!(_DWORD)v7)
    {
      v23 = (char *)v5 - (char *)v9;
      if ((char *)v5 - (char *)v9 >= 16)
        qsort(v9, (unint64_t)v23 >> 3, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C54BFD00);
      v24 = *((_DWORD *)a2 + 12);
      v25 = *((_DWORD *)a2 + 13) + 1;
      if (v5 >= (unsigned int *)v6)
      {
        v27 = v23 >> 3;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 61)
LABEL_71:
          abort();
        if ((v6 - (char *)v9) >> 2 > v28)
          v28 = (v6 - (char *)v9) >> 2;
        if ((unint64_t)(v6 - (char *)v9) >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        if (v28 >> 61)
LABEL_72:
          sub_1C4764EE4();
        v29 = (unsigned int *)((char *)operator new(8 * v28) + 8 * v27);
        *v29 = v24;
        v29[1] = v25;
        v26 = v29 + 2;
        while (v5 != v9)
        {
          v30 = *((_QWORD *)v5 - 1);
          v5 -= 2;
          *((_QWORD *)v29 - 1) = v30;
          v29 -= 2;
        }
        if (v9)
          operator delete(v9);
        v9 = v29;
      }
      else
      {
        *v5 = v24;
        v5[1] = v25;
        v26 = v5 + 2;
      }
      v77 = 1;
      if (v9 == v26)
      {
        v7 = 0;
      }
      else
      {
        v7 = 0;
        v31 = &v60;
        v32 = &v62;
        i = 1;
        v34 = v9;
        do
        {
          v35 = v34[1];
          if (v35 > i)
          {
            v45 = llvm::WithColor::error(*this, "", 0, 0);
            v46 = (unint64_t *)*((_QWORD *)a2 + 13);
            v47 = v34[1] - 1;
            v55.n128_u64[0] = (unint64_t)"Name Index @ {0:x}: Name table entries [{1}, {2}] are not covered by the hash table.\n";
            v55.n128_u64[1] = 85;
            v56 = &v64;
            v57 = 3;
            v58 = &unk_1E8134F58;
            v59 = v46;
            v60 = (void **)&unk_1E8168E30;
            v61 = &v77;
            v62 = &unk_1E816A230;
            LODWORD(v63) = v47;
            v64 = &v58;
            v65 = v31;
            v66 = v32;
            sub_1C639D338((uint64_t)&v55, v45);
            v7 = (v7 + 1);
            v35 = v34[1];
          }
          v76 = v35;
          if (*v34 == *((_DWORD *)a2 + 12))
            break;
          v75 = 0;
          v55.n128_u64[0] = *((_QWORD *)a2 + 16) + 4 * v35 - 4;
          v75 = sub_1C6387364(*((_QWORD *)a2 + 12) + 8, v55.n128_u64, 0);
          if (v75 % *((_DWORD *)a2 + 12) != *v34)
          {
            v48 = llvm::WithColor::error(*this, "", 0, 0);
            v49 = (unint64_t *)*((_QWORD *)a2 + 13);
            v50 = *((_DWORD *)a2 + 12);
            v55.n128_u64[0] = (unint64_t)"Name Index @ {0:x}: Bucket {1} is not empty but points to a mismatched h"
                                                "ash value {2:x} (belonging to bucket {3}).\n";
            v55.n128_u64[1] = 115;
            v56 = &v66;
            v57 = 4;
            v58 = &unk_1E8134F58;
            v59 = v49;
            v60 = (void **)&unk_1E813B5F0;
            v61 = v34;
            v62 = &unk_1E8168E30;
            v63 = &v75;
            v64 = (void **)&unk_1E816A230;
            LODWORD(v65) = v75 % v50;
            v66 = &v58;
            v67 = v31;
            v68 = v32;
            v69 = &v64;
            sub_1C639D338((uint64_t)&v55, v48);
            v7 = (v7 + 1);
          }
          for (i = v76; i <= *((_DWORD *)a2 + 13); i = ++v76)
          {
            v74 = 0;
            v55.n128_u64[0] = *((_QWORD *)a2 + 16) + 4 * i - 4;
            v74 = sub_1C6387364(*((_QWORD *)a2 + 12) + 8, v55.n128_u64, 0);
            if (v74 % *((_DWORD *)a2 + 12) != *v34)
            {
              i = v76;
              break;
            }
            v73 = 0;
            llvm::DWARFDebugNames::NameIndex::getNameTableEntry(a2, v76, &v55);
            v78[0] = (unint64_t)v58;
            CStrRef = (unsigned int *)llvm::DataExtractor::getCStrRef((uint64_t *)&v55, v78, 0);
            v37 = CStrRef;
            v73 = (char *)CStrRef;
            if (CStrRef)
              v38 = (char *)strlen((const char *)CStrRef);
            else
              v38 = 0;
            v39 = llvm::caseFoldingDjbHash(v37, v38, 5381);
            if (v39 != v74)
            {
              v53 = v32;
              v40 = v31;
              v41 = llvm::WithColor::error(*this, "", 0, 0);
              v42 = 0;
              v43 = (unint64_t *)*((_QWORD *)a2 + 13);
              if (v73)
                v42 = (char *)strlen(v73);
              v44 = llvm::caseFoldingDjbHash((unsigned int *)v73, v42, 5381);
              v55.n128_u64[0] = (unint64_t)"Name Index @ {0:x}: String ({1}) at index {2} hashes to {3:x}, but the"
                                                  " Name Index hash is {4:x}\n";
              v55.n128_u64[1] = 96;
              v56 = &v68;
              v57 = 5;
              v58 = &unk_1E8134F58;
              v59 = v43;
              v60 = (void **)&off_1E816A650;
              v61 = (unsigned int *)&v73;
              v62 = &unk_1E8168E30;
              v63 = &v76;
              v64 = (void **)&unk_1E816A230;
              LODWORD(v65) = v44;
              v66 = (void **)&unk_1E8168E30;
              v67 = (void ***)&v74;
              v68 = &v58;
              v69 = v40;
              v31 = v40;
              v32 = v53;
              v70 = v53;
              v71 = &v64;
              v72 = &v66;
              sub_1C639D338((uint64_t)&v55, v41);
              v7 = (v7 + 1);
            }
          }
          if (v77 > i)
            i = v77;
          v77 = i;
          v34 += 2;
        }
        while (v34 != v26);
      }
    }
    if (v9)
      operator delete(v9);
  }
  else
  {
    v51 = llvm::WithColor::warning(*this, "", 0, 0);
    v52 = (unint64_t *)*((_QWORD *)a2 + 13);
    v55.n128_u64[0] = (unint64_t)"Name Index @ {0:x} does not contain a hash table.\n";
    v55.n128_u64[1] = 50;
    v56 = &v60;
    v57 = 1;
    v58 = &unk_1E8134F58;
    v59 = v52;
    v60 = &v58;
    sub_1C639D338((uint64_t)&v55, v51);
    return 0;
  }
  return v7;
}

uint64_t llvm::DWARFVerifier::verifyNameIndexAttribute(llvm::raw_ostream **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  llvm::raw_ostream *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  llvm::raw_ostream *v14;
  uint64_t v15;
  int *v16;
  char isFormClass;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t (***v21)(llvm::detail::format_adapter *__hidden);
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t (**v27)(llvm::detail::format_adapter *__hidden);
  char *v28;
  uint64_t (**v29)(llvm::detail::format_adapter *__hidden);
  void **v30;
  uint64_t (**v31)(llvm::detail::format_adapter *__hidden);
  void **v32;
  uint64_t (***v33)(llvm::detail::format_adapter *__hidden);
  uint64_t (***v34)(llvm::detail::format_adapter *__hidden);
  uint64_t (***v35)(llvm::detail::format_adapter *__hidden);
  uint64_t (***v36)(llvm::detail::format_adapter *__hidden);
  uint64_t (***v37)(llvm::detail::format_adapter *__hidden);
  uint64_t v38;

  v38 = a4;
  llvm::dwarf::FormEncodingString((llvm::dwarf *)WORD2(a4));
  if (!v8)
  {
    v9 = llvm::WithColor::error(*a1, "", 0, 0);
    v10 = *(_QWORD *)(a2 + 104);
    v19 = "NameIndex @ {0:x}: Abbreviation {1:x}: {2} uses an unknown form: {3}.\n";
    v20 = 70;
    v21 = &v31;
    v22 = 4;
    v23 = &unk_1E8134F58;
    v24 = v10;
    v25 = &unk_1E813B5F0;
    v26 = a3;
    v27 = &off_1E816A680;
    v28 = (char *)&v38;
    v29 = (uint64_t (**)(llvm::detail::format_adapter *__hidden))&unk_1E816A170;
    v30 = (void **)((char *)&v38 + 4);
    v31 = (uint64_t (**)(llvm::detail::format_adapter *__hidden))&v23;
    v32 = &v25;
    v33 = &v27;
    v34 = &v29;
LABEL_6:
    sub_1C639D338((uint64_t)&v19, v9);
    return 1;
  }
  if ((_DWORD)a4 == 5 && WORD2(a4) != 7)
  {
    v9 = llvm::WithColor::error(*a1, "", 0, 0);
    v11 = *(_QWORD *)(a2 + 104);
    v19 = "NameIndex @ {0:x}: Abbreviation {1:x}: DW_IDX_type_hash uses an unexpected form {2} (should be {3}).\n";
    v20 = 101;
    v21 = &v31;
    v22 = 4;
    v23 = &unk_1E8134F58;
    v24 = v11;
    v25 = &unk_1E813B5F0;
    v26 = a3;
    v27 = (uint64_t (**)(llvm::detail::format_adapter *__hidden))&unk_1E816A170;
    v28 = (char *)&v38 + 4;
    v29 = &off_1E816A6B0;
    LOWORD(v30) = 7;
    v31 = (uint64_t (**)(llvm::detail::format_adapter *__hidden))&v23;
    v32 = &v25;
    v33 = &v27;
    v34 = &v29;
    goto LABEL_6;
  }
  v13 = 0;
  while (dword_1E816A560[v13] != (_DWORD)a4)
  {
    v13 += 6;
    if (v13 == 24)
    {
      v14 = llvm::WithColor::warning(*a1, "", 0, 0);
      v15 = *(_QWORD *)(a2 + 104);
      v19 = "NameIndex @ {0:x}: Abbreviation {1:x} contains an unknown index attribute: {2}.\n";
      v20 = 80;
      v21 = &v29;
      v22 = 3;
      v23 = &unk_1E8134F58;
      v24 = v15;
      v25 = &unk_1E813B5F0;
      v26 = a3;
      v27 = &off_1E816A680;
      v28 = (char *)&v38;
      v29 = (uint64_t (**)(llvm::detail::format_adapter *__hidden))&v23;
      v30 = &v25;
      v31 = (uint64_t (**)(llvm::detail::format_adapter *__hidden))&v27;
      sub_1C639D338((uint64_t)&v19, v14);
      return 0;
    }
  }
  LOWORD(v19) = WORD2(a4);
  BYTE2(v19) = 0;
  v16 = &dword_1E816A560[v13];
  v20 = 0;
  v21 = 0;
  v23 = 0;
  v24 = 0;
  isFormClass = llvm::DWARFFormValue::isFormClass((unsigned __int16 *)&v19, dword_1E816A560[v13 + 1]);
  result = 0;
  if ((isFormClass & 1) == 0)
  {
    v9 = llvm::WithColor::error(*a1, "", 0, 0);
    v18 = *(_QWORD *)(a2 + 104);
    v19 = "NameIndex @ {0:x}: Abbreviation {1:x}: {2} uses an unexpected form {3} (expected form class {4}).\n";
    v20 = 98;
    v21 = (uint64_t (***)(llvm::detail::format_adapter *__hidden))&v33;
    v22 = 5;
    v23 = &unk_1E8134F58;
    v24 = v18;
    v25 = &unk_1E813B5F0;
    v26 = a3;
    v27 = &off_1E816A680;
    v28 = (char *)&v38;
    v29 = (uint64_t (**)(llvm::detail::format_adapter *__hidden))&unk_1E816A170;
    v30 = (void **)((char *)&v38 + 4);
    v31 = &off_1E816A6E0;
    v32 = (void **)(v16 + 2);
    v33 = (uint64_t (***)(llvm::detail::format_adapter *__hidden))&v23;
    v34 = (uint64_t (***)(llvm::detail::format_adapter *__hidden))&v25;
    v35 = &v27;
    v36 = &v29;
    v37 = &v31;
    goto LABEL_6;
  }
  return result;
}

uint64_t llvm::DWARFVerifier::verifyNameIndexAbbrevs(llvm::raw_ostream **this, const llvm::DWARFDebugNames::NameIndex *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  llvm::raw_ostream *v14;
  uint64_t v15;
  int v16;
  char v17;
  llvm::raw_ostream *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *j;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  llvm::raw_ostream *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  llvm::raw_ostream *v35;
  uint64_t v36;
  llvm::raw_ostream *v37;
  uint64_t v38;
  const char *v40;
  uint64_t v41;
  void ***v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void **v46;
  uint64_t v47;
  uint64_t (**v48)(llvm::detail::format_adapter *__hidden);
  uint64_t *v49;
  void **v50;
  void ***v51;
  uint64_t (***v52)(llvm::detail::format_adapter *__hidden);
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)a2 + 10) + *((_DWORD *)a2 + 11))
  {
    v37 = llvm::WithColor::warning(*this, "", 0, 0);
    v38 = *((_QWORD *)a2 + 13);
    v40 = "Name Index @ {0:x}: Verifying indexes of type units is not currently supported.\n";
    v41 = 80;
    v42 = &v46;
    v43 = 1;
    v44 = &unk_1E8134F58;
    v45 = v38;
    v46 = &v44;
    sub_1C639D338((uint64_t)&v40, v37);
    return 0;
  }
  if (!*((_DWORD *)a2 + 2))
    return 0;
  v4 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v4)
  {
    v5 = 32 * v4;
    for (i = *(_QWORD *)a2; (*(_DWORD *)i + 1) <= 1; i += 32)
    {
      v5 -= 32;
      if (!v5)
        return 0;
    }
  }
  else
  {
    i = *(_QWORD *)a2;
  }
  v7 = *(_QWORD *)a2 + 32 * v4;
  if (v7 == i)
    return 0;
  LODWORD(v8) = 0;
  v9 = &v55;
LABEL_11:
  llvm::dwarf::TagString((llvm::dwarf *)*(unsigned __int16 *)(i + 4));
  if (!v10)
  {
    v14 = llvm::WithColor::warning(*this, "", 0, 0);
    v15 = *((_QWORD *)a2 + 13);
    v40 = "NameIndex @ {0:x}: Abbreviation {1:x} references an unknown tag: {2}.\n";
    v41 = 70;
    v42 = &v50;
    v43 = 3;
    v44 = &unk_1E8134F58;
    v45 = v15;
    v46 = (void **)&unk_1E813B5F0;
    v47 = i;
    v48 = (uint64_t (**)(llvm::detail::format_adapter *__hidden))&unk_1E81697E0;
    v49 = (uint64_t *)(i + 4);
    v50 = &v44;
    v51 = &v46;
    v52 = &v48;
    sub_1C639D338((uint64_t)&v40, v14);
  }
  v11 = (uint64_t)v9;
  v53 = v9;
  v54 = 0x500000000;
  v57 = 0;
  v58 = 0;
  v56 = (uint64_t *)&v57;
  v12 = *(uint64_t **)(i + 8);
  v13 = *(uint64_t **)(i + 16);
  if (v12 == v13)
  {
    v9 = (uint64_t *)v11;
    if (*((_DWORD *)a2 + 9) > 1u)
      goto LABEL_47;
    goto LABEL_63;
  }
  do
  {
    v16 = *(_DWORD *)v12;
    LODWORD(v40) = *(_DWORD *)v12;
    if (v58)
    {
      sub_1C4778ED8(&v56, (unsigned int *)&v40, &v40);
      if ((v17 & 1) == 0)
      {
LABEL_18:
        v18 = llvm::WithColor::error(*this, "", 0, 0);
        v19 = *((_QWORD *)a2 + 13);
        v40 = "NameIndex @ {0:x}: Abbreviation {1:x} contains multiple {2} attributes.\n";
        v41 = 72;
        v42 = &v50;
        v43 = 3;
        v44 = &unk_1E8134F58;
        v45 = v19;
        v46 = (void **)&unk_1E813B5F0;
        v47 = i;
        v48 = (uint64_t (**)(llvm::detail::format_adapter *__hidden))&unk_1E8169810;
        v49 = v12;
        v50 = &v44;
        v51 = &v46;
        v52 = &v48;
        sub_1C639D338((uint64_t)&v40, v18);
        v8 = (v8 + 1);
        goto LABEL_32;
      }
    }
    else
    {
      v20 = v53;
      v21 = v54;
      if (!(_DWORD)v54)
        goto LABEL_26;
      v22 = 4 * v54;
      v23 = v53;
      while (*v23 != v16)
      {
        ++v23;
        v22 -= 4;
        if (!v22)
          goto LABEL_25;
      }
      if (v22)
        goto LABEL_18;
LABEL_25:
      if (v54 >= 5)
      {
        do
        {
          sub_1C4778ED8(&v56, (unsigned int *)v53 + v21 - 1, (_DWORD *)v53 + v21 - 1);
          LODWORD(v21) = v54 - 1;
          LODWORD(v54) = v54 - 1;
        }
        while ((_DWORD)v54);
        sub_1C4778ED8(&v56, (unsigned int *)&v40, &v40);
      }
      else
      {
LABEL_26:
        if (v54 >= HIDWORD(v54))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v11, v54 + 1, 4);
          v20 = v53;
          v21 = v54;
        }
        v20[v21] = v16;
        LODWORD(v54) = v54 + 1;
      }
    }
    v8 = llvm::DWARFVerifier::verifyNameIndexAttribute(this, (uint64_t)a2, i, *v12) + v8;
LABEL_32:
    ++v12;
  }
  while (v12 != v13);
  v24 = v58;
  v9 = (uint64_t *)v11;
  if (*((_DWORD *)a2 + 9) <= 1u)
    goto LABEL_48;
  if (v58)
  {
    v25 = v57;
    for (j = v57; j; j = (_QWORD *)*j)
    {
      v27 = *((_DWORD *)j + 7);
      if (v27 <= 1)
      {
        if (v27)
          goto LABEL_51;
        ++j;
      }
    }
    goto LABEL_47;
  }
  v28 = v54;
  if (!(_DWORD)v54)
    goto LABEL_47;
  v29 = 0;
  v30 = v53;
  while (*(_DWORD *)((char *)v53 + v29) != 1)
  {
    v29 += 4;
    if (4 * v54 == v29)
      goto LABEL_47;
  }
  if (v29 == 4 * v54)
  {
LABEL_47:
    v31 = llvm::WithColor::error(*this, "", 0, 0);
    v32 = *((_QWORD *)a2 + 13);
    v40 = "NameIndex @ {0:x}: Indexing multiple compile units and abbreviation {1:x} has no {2} attribute.\n";
    v41 = 96;
    v42 = &v50;
    v43 = 3;
    v44 = &unk_1E8134F58;
    v45 = v32;
    v46 = (void **)&unk_1E813B5F0;
    v47 = i;
    v48 = &off_1E816A710;
    LODWORD(v49) = 1;
    v50 = &v44;
    v51 = &v46;
    v52 = &v48;
    sub_1C639D338((uint64_t)&v40, v31);
    v8 = (v8 + 1);
    v24 = v58;
LABEL_48:
    if (v24)
    {
      v25 = v57;
LABEL_51:
      while (v25)
      {
        v33 = *((_DWORD *)v25 + 7);
        if (v33 <= 3)
        {
          if (v33 == 3)
            goto LABEL_64;
          ++v25;
        }
        v25 = (_QWORD *)*v25;
      }
      goto LABEL_63;
    }
    v30 = v53;
    v28 = v54;
  }
  if (!v28)
    goto LABEL_63;
  v34 = 4 * v28;
  while (*v30 != 3)
  {
    ++v30;
    v34 -= 4;
    if (!v34)
      goto LABEL_63;
  }
  if (!v34)
  {
LABEL_63:
    v35 = llvm::WithColor::error(*this, "", 0, 0);
    v36 = *((_QWORD *)a2 + 13);
    v40 = "NameIndex @ {0:x}: Abbreviation {1:x} has no {2} attribute.\n";
    v41 = 60;
    v42 = &v50;
    v43 = 3;
    v44 = &unk_1E8134F58;
    v45 = v36;
    v46 = (void **)&unk_1E813B5F0;
    v47 = i;
    v48 = &off_1E816A710;
    LODWORD(v49) = 3;
    v50 = &v44;
    v51 = &v46;
    v52 = &v48;
    sub_1C639D338((uint64_t)&v40, v35);
    v8 = (v8 + 1);
  }
LABEL_64:
  sub_1C47655E8((uint64_t)&v56, v57);
  if (v53 != v9)
    free(v53);
  while (1)
  {
    i += 32;
    if (i == v7)
      return v8;
    if ((*(_DWORD *)i + 1) > 1)
    {
      if (i != v7)
        goto LABEL_11;
      return v8;
    }
  }
}

uint64_t llvm::DWARFVerifier::verifyNameIndexEntries(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  const char *CStrRef;
  int v7;
  int v8;
  void **v9;
  const char ***v10;
  unsigned int CUIndex;
  llvm::raw_ostream *v12;
  char *v13;
  int v14;
  uint64_t v15;
  char v16;
  char *RelocatedValue;
  llvm::DWARFUnit *DIEForOffset;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  const char *v28;
  size_t v29;
  uint64_t v30;
  const char *v31;
  char v32;
  unint64_t v33;
  const char *v34;
  llvm::raw_ostream *v35;
  char *v36;
  llvm::raw_ostream *v37;
  char *v38;
  void *v39;
  llvm::raw_ostream *v40;
  __int16 v41;
  uint64_t v42;
  char *v43;
  __int16 v44;
  llvm::raw_ostream *v45;
  char *v46;
  uint64_t v47;
  const char *v48;
  uint64_t *v49;
  uint64_t *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(void);
  const char *v55;
  llvm::raw_ostream *v57;
  uint64_t v58;
  int v59;
  char *v60;
  const char ***v61;
  void **v62;
  int v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  const char *v69;
  size_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  const char *v75;
  void *v76;
  void ***v77;
  uint64_t v78;
  const char **v79;
  char *v80;
  void *v81;
  unint64_t *v82;
  void *v83;
  char **v84;
  const char ***v85;
  void **v86;
  void **v87;
  void *v88;
  const char ***v89;
  void **v90;
  void **v91;
  void **v92;
  _QWORD *v93;
  void ***v94;
  __int128 v95;
  char v96;
  void *v97;
  uint64_t v98;
  _QWORD v99[4];
  const char *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD v104[2];
  void *v105;
  int v106;
  _QWORD v107[13];
  __int128 v108;
  char v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 40) + *(_DWORD *)(a2 + 44))
    return 0;
  v3 = a3;
  v100 = (const char *)a3[4];
  CStrRef = (const char *)llvm::DataExtractor::getCStrRef(a3, (unint64_t *)&v100, 0);
  if (!CStrRef)
  {
    v57 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
    v58 = *(_QWORD *)(a2 + 104);
    v59 = *((_DWORD *)v3 + 6);
    v100 = "Name Index @ {0:x}: Unable to get string associated with name {1}.\n";
    v101 = (void *)67;
    v102 = (uint64_t)v107;
    v103 = 2;
    v104[0] = &unk_1E8134F58;
    v104[1] = v58;
    v105 = &unk_1E816A230;
    v106 = v59;
    v107[0] = v104;
    v107[1] = &v105;
    sub_1C639D338((uint64_t)&v100, v57);
    return 1;
  }
  v69 = CStrRef;
  v70 = strlen(CStrRef);
  v67 = v3[5];
  v68 = 0;
  v66 = v67;
  llvm::DWARFDebugNames::NameIndex::getEntry((llvm::DWARFDebugNames::NameIndex *)a2, &v66, (uint64_t)&v100);
  if ((v109 & 1) == 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = (void **)&v85;
    v10 = &v79;
    do
    {
      LODWORD(v72) = 0;
      CUIndex = llvm::DWARFDebugNames::Entry::getCUIndex((llvm::DWARFDebugNames::Entry *)&v100);
      LODWORD(v72) = CUIndex;
      if (*(_DWORD *)(a2 + 36) >= CUIndex)
      {
        if (*(_BYTE *)(a2 + 32))
          v14 = 8;
        else
          v14 = 4;
        v15 = *(_QWORD *)(a2 + 112);
        if (*(_BYTE *)(a2 + 32))
          v16 = 3;
        else
          v16 = 2;
        v74 = 0;
        v75 = (const char *)(v15 + (CUIndex << v16));
        RelocatedValue = (char *)llvm::DWARFDataExtractor::getRelocatedValue(*(_QWORD *)(a2 + 96) + 8, v14, (unint64_t *)&v75, 0, 0);
        v73 = 0;
        v74 = RelocatedValue;
        v73 = &RelocatedValue[llvm::DWARFDebugNames::Entry::getDIEUnitOffset((llvm::DWARFDebugNames::Entry *)&v100)];
        DIEForOffset = llvm::DWARFContext::getDIEForOffset(*(uint64_t ***)(a1 + 8), (unint64_t)v73);
        v64 = (char *)DIEForOffset;
        v65 = v19;
        if (DIEForOffset)
          v20 = v19 == 0;
        else
          v20 = 1;
        if (v20)
        {
          v35 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
          v36 = *(char **)(a2 + 104);
          v75 = "Name Index @ {0:x}: Entry @ {1:x} references a non-existing DIE @ {2:x}.\n";
          v76 = (void *)73;
          v77 = (void ***)v9;
          v78 = 3;
          v79 = (const char **)&unk_1E8134F58;
          v80 = v36;
          v81 = &unk_1E816A600;
          v82 = &v67;
          v83 = &unk_1E816A600;
          v84 = &v73;
          v85 = v10;
          v86 = &v81;
          v87 = &v83;
          sub_1C639D338((uint64_t)&v75, v35);
          HIDWORD(v68) = ++v8;
        }
        else
        {
          if (*((char **)DIEForOffset + 3) != v74)
          {
            v37 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
            v38 = *(char **)(a2 + 104);
            v39 = (void *)*((_QWORD *)v64 + 3);
            v75 = "Name Index @ {0:x}: Entry @ {1:x}: mismatched CU of DIE @ {2:x}: index - {3:x}; debug_info - {4:x}.\n";
            v76 = (void *)100;
            v77 = (void ***)&v89;
            v78 = 5;
            v79 = (const char **)&unk_1E8134F58;
            v80 = v38;
            v81 = &unk_1E816A600;
            v82 = &v67;
            v83 = &unk_1E816A600;
            v84 = &v73;
            v85 = (const char ***)&unk_1E816A600;
            v86 = (void **)&v74;
            v87 = (void **)&unk_1E8134F58;
            v88 = v39;
            v89 = v10;
            v90 = &v81;
            v91 = &v83;
            v92 = v9;
            v93 = &v87;
            sub_1C639D338((uint64_t)&v75, v37);
            HIDWORD(v68) = ++v8;
            v19 = v65;
          }
          v21 = *(_QWORD *)(v19 + 16);
          if (v21)
            LODWORD(v21) = *(unsigned __int16 *)(v21 + 4);
          if ((_DWORD)v21 != *(unsigned __int16 *)(*((_QWORD *)&v108 + 1) + 4))
          {
            v40 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
            v41 = 0;
            v42 = *(_QWORD *)(v65 + 16);
            if (v42)
              v41 = *(_WORD *)(v42 + 4);
            v43 = *(char **)(a2 + 104);
            v44 = *(_WORD *)(*((_QWORD *)&v108 + 1) + 4);
            v75 = "Name Index @ {0:x}: Entry @ {1:x}: mismatched Tag of DIE @ {2:x}: index - {3}; debug_info - {4}.\n";
            v76 = (void *)97;
            v77 = (void ***)&v89;
            v78 = 5;
            v79 = (const char **)&unk_1E8134F58;
            v80 = v43;
            v81 = &unk_1E816A600;
            v82 = &v67;
            v83 = &unk_1E816A600;
            v84 = &v73;
            v85 = (const char ***)&unk_1E8169568;
            LOWORD(v86) = v44;
            v87 = (void **)&unk_1E8169568;
            LOWORD(v88) = v41;
            v89 = v10;
            v90 = &v81;
            v91 = &v83;
            v92 = v9;
            v93 = &v87;
            sub_1C639D338((uint64_t)&v75, v40);
            HIDWORD(v68) = ++v8;
          }
          sub_1C54BE11C((uint64_t)&v97, (llvm::DWARFDie *)&v64, 1);
          v22 = v97;
          v23 = v98;
          v24 = (char *)v97;
          if ((_DWORD)v98)
          {
            v61 = v10;
            v62 = v9;
            v63 = v8;
            v25 = v3;
            v26 = a1;
            v27 = v7;
            v28 = v69;
            v29 = v70;
            v30 = 16 * v98;
            v24 = (char *)v97;
            v60 = (char *)v97 + v30;
            while (*((_QWORD *)v24 + 1) != v29 || v29 && memcmp(*(const void **)v24, v28, v29))
            {
              v24 += 16;
              v30 -= 16;
              if (!v30)
              {
                v24 = v60;
                break;
              }
            }
            v7 = v27;
            a1 = v26;
            v3 = v25;
            v8 = v63;
            v10 = v61;
            v9 = v62;
          }
          if (v23 == (v24 - v22) >> 4)
          {
            v45 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
            v46 = *(char **)(a2 + 104);
            v75 = "Name Index @ {0:x}: Entry @ {1:x}: mismatched Name of DIE @ {2:x}: index - {3}; debug_info - {4}.\n";
            v76 = (void *)98;
            v77 = &v90;
            v78 = 5;
            v79 = (const char **)&unk_1E8134F58;
            v80 = v46;
            v81 = &unk_1E816A600;
            v82 = &v67;
            v83 = &unk_1E816A600;
            v84 = &v73;
            v85 = (const char ***)&unk_1E8168E00;
            v86 = (void **)&v69;
            v87 = (void **)&off_1E816A740;
            v88 = v97;
            v89 = (const char ***)((char *)v97 + 16 * v98);
            v90 = (void **)v10;
            v91 = &v81;
            v92 = &v83;
            v93 = v9;
            v94 = &v87;
            sub_1C639D338((uint64_t)&v75, v45);
            HIDWORD(v68) = ++v8;
            v22 = v97;
          }
          if (v22 != (_BYTE *)v99)
            free(v22);
        }
      }
      else
      {
        v12 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
        v13 = *(char **)(a2 + 104);
        v75 = "Name Index @ {0:x}: Entry @ {1:x} contains an invalid CU index ({2}).\n";
        v76 = (void *)70;
        v77 = (void ***)v9;
        v78 = 3;
        v79 = (const char **)&unk_1E8134F58;
        v80 = v13;
        v81 = &unk_1E816A600;
        v82 = &v67;
        v83 = &unk_1E8168E30;
        v84 = (char **)&v72;
        v85 = v10;
        v86 = &v81;
        v87 = &v83;
        sub_1C639D338((uint64_t)&v75, v12);
        HIDWORD(v68) = ++v8;
      }
      LODWORD(v68) = ++v7;
      v67 = v66;
      llvm::DWARFDebugNames::NameIndex::getEntry((llvm::DWARFDebugNames::NameIndex *)a2, &v66, (uint64_t)&v75);
      if ((v109 & 1) != 0)
      {
        v31 = v100;
        v100 = 0;
        if (v31)
          (*(void (**)(const char *))(*(_QWORD *)v31 + 8))(v31);
      }
      else
      {
        v100 = (const char *)&unk_1E81697C0;
        if (v101 != &v103)
          free(v101);
      }
      v32 = v96;
      v109 = v109 & 0xFE | v96 & 1;
      if ((v96 & 1) != 0)
      {
        v34 = v75;
        v75 = 0;
        v100 = v34;
      }
      else
      {
        v100 = (const char *)&unk_1E81697C0;
        v101 = &v103;
        v102 = 0x300000000;
        if ((_DWORD)v77)
        {
          sub_1C624D034((uint64_t)&v101, (uint64_t)&v76);
          v32 = v96;
        }
        v100 = (const char *)&off_1E81696C0;
        v108 = v95;
        if ((v32 & 1) == 0)
        {
          v75 = (const char *)&unk_1E81697C0;
          if (v76 != &v78)
            free(v76);
          continue;
        }
      }
      v33 = (unint64_t)v75;
      v75 = 0;
      if (v33)
        (*(void (**)(unint64_t))(*(_QWORD *)v33 + 8))(v33);
    }
    while ((v109 & 1) == 0);
  }
  v48 = v100;
  v100 = 0;
  v75 = (const char *)&v68;
  v76 = (void *)a1;
  v77 = (void ***)a2;
  v78 = (uint64_t)v3;
  v79 = &v69;
  v80 = (char *)&v68 + 4;
  v97 = (void *)a1;
  v98 = a2;
  v99[0] = v3;
  v99[1] = &v69;
  v99[2] = (char *)&v68 + 4;
  if (!v48)
  {
    v71 = 0;
    goto LABEL_73;
  }
  if ((*(unsigned int (**)(const char *, void *))(*(_QWORD *)v48 + 48))(v48, &llvm::ErrorList::ID))
  {
    v49 = (uint64_t *)*((_QWORD *)v48 + 1);
    v50 = (uint64_t *)*((_QWORD *)v48 + 2);
    if (v49 == v50)
    {
      v51 = 0;
    }
    else
    {
      v51 = 0;
      do
      {
        v74 = v51;
        v52 = *v49;
        *v49 = 0;
        v72 = v52;
        sub_1C54C018C(&v73, &v72, (uint64_t)&v75, (uint64_t)&v97);
        sub_1C6174794(&v74, &v73, &v64);
        v51 = v64;
        v64 = 0;
        if (v73)
          (*(void (**)(char *))(*(_QWORD *)v73 + 8))(v73);
        v53 = v72;
        v72 = 0;
        if (v53)
          (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
        if (v74)
          (*(void (**)(char *))(*(_QWORD *)v74 + 8))(v74);
        ++v49;
      }
      while (v49 != v50);
    }
    v71 = v51;
    v54 = *(void (**)(void))(*(_QWORD *)v48 + 8);
  }
  else
  {
    v64 = (char *)v48;
    sub_1C54C018C(&v71, &v64, (uint64_t)&v75, (uint64_t)&v97);
    if (!v64)
      goto LABEL_73;
    v54 = *(void (**)(void))(*(_QWORD *)v64 + 8);
  }
  v54();
LABEL_73:
  v47 = HIDWORD(v68);
  if ((v109 & 1) != 0)
  {
    v55 = v100;
    v100 = 0;
    if (v55)
      (*(void (**)(const char *))(*(_QWORD *)v55 + 8))(v55);
  }
  else
  {
    v100 = (const char *)&unk_1E81697C0;
    if (v101 != &v103)
      free(v101);
  }
  return v47;
}

const char *sub_1C54BE11C(uint64_t a1, llvm::DWARFDie *a2, int a3)
{
  uint64_t v6;
  const char *result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  const char *v11;

  v6 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x200000000;
  result = llvm::DWARFDie::getShortName(a2);
  v11 = result;
  if (result)
  {
    result = (const char *)sub_1C54BEEDC(a1, &v11);
  }
  else
  {
    v8 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 16);
    if (v8 && *(_WORD *)(v8 + 4) == 57)
    {
      v9 = *(unsigned int *)(a1 + 8);
      if (v9 >= *(_DWORD *)(a1 + 12))
      {
        result = (const char *)llvm::SmallVectorBase<unsigned int>::grow_pod(a1, v6, v9 + 1, 16);
        v9 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 8);
        *(_QWORD *)v9 = "(anonymous namespace)";
        *(_QWORD *)(v9 + 8) = 21;
        LODWORD(v9) = *(_DWORD *)(a1 + 8);
      }
      else
      {
        v10 = (_QWORD *)(*(_QWORD *)a1 + 16 * v9);
        *v10 = "(anonymous namespace)";
        v10[1] = 21;
      }
      *(_DWORD *)(a1 + 8) = v9 + 1;
    }
  }
  if (a3)
  {
    result = llvm::DWARFDie::getLinkageName(a2);
    v11 = result;
    if (result)
      return (const char *)sub_1C54BEEDC(a1, &v11);
  }
  return result;
}

uint64_t llvm::DWARFVerifier::verifyNameIndexCompleteness(llvm::raw_ostream **this, llvm::DWARFUnit **a2, const llvm::DWARFDebugNames::NameIndex *a3)
{
  uint64_t v7;
  int v8;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  char *v14;
  char *v15;
  llvm::DWARFUnit *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  __int16 v21;
  int v23;
  char *v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t DIEUnitOffset;
  char v30;
  BOOL v31;
  llvm::raw_ostream *v33;
  __int16 v34;
  llvm::DWARFUnit *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  llvm::raw_ostream **v39;
  llvm::DWARFUnit **v40;
  unsigned int v41;
  __int128 *v42;
  const llvm::DWARFDebugNames::NameIndex *v43;
  __int128 v44;
  char v45;
  char v46;
  char v47;
  __int16 v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[2];
  void *v56;
  __int16 v57;
  _QWORD v58[2];
  _QWORD v59[13];
  char v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char v66;
  void *v67;
  void *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  __int128 __src;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  unsigned int v76;
  uint64_t v77;
  char *v78;
  char *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  __int128 __p;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  void *v90;
  void *v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  llvm::DWARFDie::find(a2, 60, &v49);
  if (LOBYTE(v55[0]))
    return 0;
  v7 = *((_QWORD *)a2[1] + 2);
  if (v7)
  {
    v8 = *(unsigned __int16 *)(v7 + 4);
    v10 = v8 == 46 || v8 == 29;
  }
  else
  {
    v10 = 0;
  }
  sub_1C54BE11C((uint64_t)&v75, (llvm::DWARFDie *)a2, v10);
  if (!v76)
    goto LABEL_106;
  v39 = this;
  v40 = a2;
  v11 = *((_QWORD *)a2[1] + 2);
  v43 = a3;
  if (!v11)
    goto LABEL_50;
  v12 = *(unsigned __int16 *)(v11 + 4);
  v41 = 0;
  if ((int)v12 <= 28)
  {
    switch((int)v12)
    {
      case 8:
      case 13:
      case 17:
        goto LABEL_107;
      case 9:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
        goto LABEL_50;
      case 10:
        goto LABEL_35;
      default:
        if ((_DWORD)v12 != 5)
          goto LABEL_50;
        break;
    }
    goto LABEL_107;
  }
  if (v12 <= 0x34)
  {
    if (((1 << v12) & 0x1810040000000) != 0)
      goto LABEL_107;
    if (((1 << v12) & 0x400020000000) != 0)
    {
LABEL_35:
      v88 = (char *)0x52005500120011;
      llvm::DWARFDie::findRecursively(a2, (unsigned __int16 *)&v88, 4, &v49);
      if (LOBYTE(v55[0]))
        goto LABEL_50;
      goto LABEL_106;
    }
    if (v12 == 52)
    {
      v13 = this[1];
      llvm::DWARFDie::getLocations(v40, (llvm::dwarf *)2, (uint64_t)&v78);
      v14 = v78;
      if ((v81 & 1) != 0)
      {
        v78 = 0;
        v88 = v14;
        sub_1C4D62BD4(&v88, &v49);
        if (v88)
          (*(void (**)(char *))(*(_QWORD *)v88 + 8))(v88);
      }
      else
      {
        v15 = v79;
        if (v78 != v79)
        {
          v16 = *v40;
          while (1)
          {
            v17 = *((_QWORD *)v14 + 4);
            v18 = *((_QWORD *)v14 + 5);
            v19 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v13 + 65) + 40))(*((_QWORD *)v13 + 65));
            v20 = *((_BYTE *)v16 + 34);
            v21 = *((unsigned __int8 *)v16 + 35) | 0x100;
            *(_QWORD *)&v44 = v17;
            *((_QWORD *)&v44 + 1) = v18;
            a3 = v43;
            v45 = v19;
            v46 = v20;
            v47 = v20;
            v48 = v21;
            sub_1C54ADD60((uint64_t)&v49, &v44, 0);
            sub_1C54ADD60((uint64_t)&v88, &v44, *((unint64_t *)&v44 + 1));
            if (v49 != v88 || v50 != v89)
              break;
LABEL_32:
            v14 += 64;
            if (v14 == v15)
              goto LABEL_43;
          }
          while (BYTE4(v51) || v51 != 3 && v51 != 155 && v51 != 224)
          {
            sub_1C54AD0C8((unint64_t *)&v49);
            if (v49 == v88 && v50 == v89)
              goto LABEL_32;
          }
          v23 = 1;
LABEL_45:
          if ((v81 & 1) != 0)
          {
            v24 = v78;
            v78 = 0;
            if (v24)
              (*(void (**)(char *))(*(_QWORD *)v24 + 8))(v24);
          }
          else
          {
            v49 = (char *)&v78;
            sub_1C548DA28((void ***)&v49);
          }
          if (v23)
          {
LABEL_50:
            if (v76)
            {
              v41 = 0;
              v25 = (__int128 *)v75;
              v26 = *(_QWORD *)v40[1] - *((_QWORD *)*v40 + 3);
              v42 = (__int128 *)((char *)v75 + 16 * v76);
              do
              {
                v44 = *v25;
                llvm::DWARFDebugNames::NameIndex::equal_range((uint64_t)a3, (const void *)v44, *((size_t *)&v44 + 1), (uint64_t)&v49);
                v88 = v49;
                LOBYTE(v89) = v50;
                LOBYTE(v90) = 0;
                v93 = 0;
                if (v60)
                  sub_1C54C04AC((uint64_t)&v90, (uint64_t)&v51);
                v94 = v61;
                if (SHIBYTE(v63) < 0)
                {
                  sub_1C47EBC30(&v95, (void *)v62, *((unint64_t *)&v62 + 1));
                }
                else
                {
                  v95 = v62;
                  v96 = v63;
                }
                v97 = v64;
                v78 = v65;
                LOBYTE(v79) = v66;
                LOBYTE(v80) = 0;
                v83 = 0;
                if (v70)
                  sub_1C54C04AC((uint64_t)&v80, (uint64_t)&v67);
                v27 = v71;
                v84 = v71;
                if (SHIBYTE(v73) < 0)
                {
                  sub_1C47EBC30(&__p, (void *)__src, *((unint64_t *)&__src + 1));
                  v27 = v84;
                }
                else
                {
                  __p = __src;
                  v86 = v73;
                }
                v87 = v74;
                if (v88 == v78 && v94 == v27)
                {
                  v28 = 1;
                }
                else
                {
                  do
                  {
                    DIEUnitOffset = llvm::DWARFDebugNames::Entry::getDIEUnitOffset((llvm::DWARFDebugNames::Entry *)&v90);
                    if (v30)
                      v31 = DIEUnitOffset == v26;
                    else
                      v31 = 0;
                    v28 = !v31;
                    if (v31)
                      break;
                    llvm::DWARFDebugNames::ValueIterator::next((llvm::DWARFDebugNames::ValueIterator *)&v88);
                  }
                  while (v88 != v78 || v94 != v84);
                }
                if (SHIBYTE(v86) < 0)
                  operator delete((void *)__p);
                if (v83)
                {
                  v80 = &unk_1E81697C0;
                  if (v81 != &v82)
                    free(v81);
                  v83 = 0;
                }
                if (SHIBYTE(v96) < 0)
                  operator delete((void *)v95);
                if (v93)
                {
                  v90 = &unk_1E81697C0;
                  if (v91 != &v92)
                    free(v91);
                }
                if (SHIBYTE(v73) < 0)
                  operator delete((void *)__src);
                if (v70)
                {
                  v67 = &unk_1E81697C0;
                  if (v68 != &v69)
                    free(v68);
                  v70 = 0;
                }
                if (SHIBYTE(v63) < 0)
                  operator delete((void *)v62);
                if (v60)
                {
                  v51 = &unk_1E81697C0;
                  if (v52 != &v54)
                    free(v52);
                }
                if (v28)
                {
                  v33 = llvm::WithColor::error(*v39, "", 0, 0);
                  v34 = 0;
                  v35 = v40[1];
                  v36 = *((_QWORD *)v35 + 2);
                  if (v36)
                    v34 = *(_WORD *)(v36 + 4);
                  a3 = v43;
                  v37 = *((_QWORD *)v43 + 13);
                  v38 = *(_QWORD *)v35;
                  v49 = "Name Index @ {0:x}: Entry for DIE @ {1:x} ({2}) with name {3} missing.\n";
                  v50 = 71;
                  v51 = v59;
                  v52 = (void *)4;
                  v53 = &unk_1E8134F58;
                  v54 = v37;
                  v55[0] = &unk_1E8134F58;
                  v55[1] = v38;
                  v56 = &unk_1E8169568;
                  v57 = v34;
                  v58[0] = &unk_1E8168E00;
                  v58[1] = &v44;
                  v59[0] = &v53;
                  v59[1] = v55;
                  v59[2] = &v56;
                  v59[3] = v58;
                  sub_1C639D338((uint64_t)&v49, v33);
                  ++v41;
                }
                else
                {
                  a3 = v43;
                }
                ++v25;
              }
              while (v25 != v42);
              goto LABEL_107;
            }
          }
LABEL_106:
          v41 = 0;
          goto LABEL_107;
        }
      }
LABEL_43:
      v23 = 0;
      goto LABEL_45;
    }
  }
  if ((v12 - 16646) >= 2)
    goto LABEL_50;
LABEL_107:
  if (v75 != &v77)
    free(v75);
  return v41;
}

uint64_t llvm::DWARFVerifier::verifyDebugNames(llvm::DWARFVerifier *a1, _OWORD *a2, __int128 *a3)
{
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  void *v11;
  const llvm::DataExtractor *v12;
  uint64_t v13;
  llvm::DWARFDebugNames::NameIndex *v14;
  uint64_t v15;
  llvm::DWARFDebugNames::NameIndex *v16;
  uint64_t v17;
  llvm::DWARFDebugNames::NameIndex *v18;
  llvm::DWARFDebugNames::NameIndex *v19;
  int v20;
  int v21;
  llvm::DWARFUnit **v22;
  llvm::DWARFUnit **v23;
  __int128 v24;
  uint64_t CUNameIndex;
  const llvm::DWARFDebugNames::NameIndex *v26;
  llvm::DWARFUnit *v27;
  llvm::DWARFUnit *v28;
  llvm::DWARFUnit *v29;
  llvm::raw_ostream *v30;
  std::string *p_p;
  size_t size;
  _BYTE *v33;
  llvm::DWARFUnit *v35[2];
  std::string __p;
  llvm::DWARFUnit **v37;
  llvm::DWARFUnit *v38;
  uint64_t (**v39)();
  __int128 v40;
  char v41;
  char v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 v45;
  uint64_t v46;
  llvm::DWARFDebugNames::NameIndex *v47;
  uint64_t v48;
  _QWORD v49[2];
  int v50;

  v6 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 520);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  v8 = *a2;
  v45 = *a3;
  v9 = *((_QWORD *)a3 + 2);
  v40 = v8;
  v41 = v7;
  v42 = 0;
  v43 = v6;
  v44 = a2;
  v39 = &off_1E8169740;
  v46 = v9;
  v47 = (llvm::DWARFDebugNames::NameIndex *)v49;
  v49[0] = 0;
  v49[1] = 0;
  v48 = 0;
  v50 = 0;
  v10 = *(llvm::raw_ostream **)a1;
  v11 = *(void **)(*(_QWORD *)a1 + 32);
  if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v11 > 0x19uLL)
  {
    qmemcpy(v11, "Verifying .debug_names...\n", 26);
    *((_QWORD *)v10 + 4) += 26;
  }
  else
  {
    llvm::raw_ostream::write(v10, "Verifying .debug_names...\n", 0x1AuLL);
  }
  llvm::DWARFDebugNames::extract((uint64_t *)&v39, (uint64_t *)v35);
  if (v35[0])
  {
    v30 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
    v38 = v35[0];
    v35[0] = 0;
    sub_1C61D2548((char **)&v38, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v30, (const char *)p_p, size);
    v33 = (_BYTE *)*((_QWORD *)v30 + 4);
    if ((unint64_t)v33 >= *((_QWORD *)v30 + 3))
    {
      llvm::raw_ostream::write(v30, 10);
    }
    else
    {
      *((_QWORD *)v30 + 4) = v33 + 1;
      *v33 = 10;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v38)
      (*(void (**)(llvm::DWARFUnit *))(*(_QWORD *)v38 + 8))(v38);
    if (v35[0])
      (*(void (**)(llvm::DWARFUnit *))(*(_QWORD *)v35[0] + 8))(v35[0]);
    v13 = 1;
  }
  else
  {
    v13 = llvm::DWARFVerifier::verifyDebugNamesCULists(a1, (const llvm::DWARFDebugNames *)&v39);
    if ((_DWORD)v48)
    {
      v14 = v47;
      v15 = 160 * v48;
      do
      {
        v13 = llvm::DWARFVerifier::verifyNameIndexBuckets((llvm::raw_ostream **)a1, v14, v12)
            + v13;
        v14 = (llvm::DWARFDebugNames::NameIndex *)((char *)v14 + 160);
        v15 -= 160;
      }
      while (v15);
      if ((_DWORD)v48)
      {
        v16 = v47;
        v17 = 160 * v48;
        do
        {
          v13 = llvm::DWARFVerifier::verifyNameIndexAbbrevs((llvm::raw_ostream **)a1, v16)
              + v13;
          v16 = (llvm::DWARFDebugNames::NameIndex *)((char *)v16 + 160);
          v17 -= 160;
        }
        while (v17);
      }
    }
    if (!(_DWORD)v13)
    {
      if (!(_DWORD)v48)
        goto LABEL_18;
      v13 = 0;
      v18 = v47;
      v19 = (llvm::DWARFDebugNames::NameIndex *)((char *)v47 + 160 * v48);
      do
      {
        v20 = *((_DWORD *)v18 + 13);
        if (v20)
        {
          v21 = 0;
          do
          {
            llvm::DWARFDebugNames::NameIndex::getNameTableEntry(v18, ++v21, (__n128 *)&__p);
            v13 = llvm::DWARFVerifier::verifyNameIndexEntries((uint64_t)a1, (uint64_t)v18, (uint64_t *)&__p)
                + v13;
          }
          while (v20 != v21);
        }
        v18 = (llvm::DWARFDebugNames::NameIndex *)((char *)v18 + 160);
      }
      while (v18 != v19);
      if (!(_DWORD)v13)
      {
LABEL_18:
        sub_1C548BC00(*((_QWORD *)a1 + 1), &__p);
        v22 = (llvm::DWARFUnit **)__p.__r_.__value_.__r.__words[0];
        v23 = v37;
        if ((llvm::DWARFUnit **)__p.__r_.__value_.__l.__data_ == v37)
        {
          v13 = 0;
        }
        else
        {
          v13 = 0;
          v24 = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
          do
          {
            CUNameIndex = llvm::DWARFDebugNames::getCUNameIndex((llvm::DWARFDebugNames *)&v39, *((_QWORD *)*v22 + 3));
            if (CUNameIndex)
            {
              v26 = (const llvm::DWARFDebugNames::NameIndex *)CUNameIndex;
              v27 = *v22;
              llvm::DWARFUnit::extractDIEsIfNeeded(*v22, 0);
              v29 = (llvm::DWARFUnit *)*((_QWORD *)v27 + 36);
              v28 = (llvm::DWARFUnit *)*((_QWORD *)v27 + 37);
              while (v29 != v28)
              {
                v35[0] = v27;
                v35[1] = v29;
                v13 = llvm::DWARFVerifier::verifyNameIndexCompleteness((llvm::raw_ostream **)a1, v35, v26)
                    + v13;
                v29 = (llvm::DWARFUnit *)((char *)v29 + 24);
              }
            }
            while (++v22 != (llvm::DWARFUnit **)v24)
            {
              if ((*((unsigned int (**)(llvm::DWARFUnit **))&v24 + 1))(v22))
                goto LABEL_25;
            }
            v22 = (llvm::DWARFUnit **)v24;
LABEL_25:
            ;
          }
          while (v22 != v23);
        }
      }
    }
  }
  v39 = &off_1E8169740;
  MEMORY[0x1CAA32FB4](v49[0], 8);
  sub_1C547F76C((char **)&v47);
  return v13;
}

BOOL llvm::DWARFVerifier::handleAccelTables(llvm::DWARFVerifier *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _OWORD *v7;
  int v8;
  _OWORD *v9;
  _OWORD *v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v14;
  char v15;
  char v16;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 520);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v2);
  v5 = v4;
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 520) + 40))(*(_QWORD *)(*((_QWORD *)this + 1) + 520));
  *(_QWORD *)&v14 = v3;
  *((_QWORD *)&v14 + 1) = v5;
  v15 = v6;
  v16 = 0;
  if (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 320))(v2) + 8))
  {
    v7 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 320))(v2);
    v8 = llvm::DWARFVerifier::verifyAppleAccelTable((llvm::raw_ostream **)this, v7, (uint64_t *)&v14, ".apple_names");
  }
  else
  {
    v8 = 0;
  }
  if (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 328))(v2) + 8))
  {
    v9 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 328))(v2);
    v8 += llvm::DWARFVerifier::verifyAppleAccelTable((llvm::raw_ostream **)this, v9, (uint64_t *)&v14, ".apple_types");
  }
  if (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 336))(v2) + 8))
  {
    v10 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 336))(v2);
    v8 += llvm::DWARFVerifier::verifyAppleAccelTable((llvm::raw_ostream **)this, v10, (uint64_t *)&v14, ".apple_namespaces");
  }
  if (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 352))(v2) + 8))
  {
    v11 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 352))(v2);
    v8 += llvm::DWARFVerifier::verifyAppleAccelTable((llvm::raw_ostream **)this, v11, (uint64_t *)&v14, ".apple_objc");
  }
  if (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 344))(v2) + 8))
  {
    v12 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 344))(v2);
    v8 += llvm::DWARFVerifier::verifyDebugNames(this, v12, &v14);
  }
  return v8 == 0;
}

void sub_1C54BEE78(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    sub_1C54BEE78(*a1);
    sub_1C54BEE78(a1[1]);
    sub_1C54BEE78(a1[10]);
    v2 = (void *)a1[6];
    if (v2)
    {
      a1[7] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t sub_1C54BEEDC(uint64_t a1, const char **a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return sub_1C54BEF50(a1, a2);
  v4 = *(_QWORD *)a1;
  v5 = *a2;
  *(_QWORD *)(*(_QWORD *)a1 + 16 * v3) = *a2;
  if (v5)
    v5 = (const char *)strlen(v5);
  *(_QWORD *)(v4 + 16 * v3 + 8) = v5;
  *(_DWORD *)(a1 + 8) = v3 + 1;
  return v4 + 16 * (v3 + 1) - 16;
}

uint64_t sub_1C54BEF50(uint64_t a1, const char **a2)
{
  const char *v3;
  size_t v4;
  uint64_t v5;
  const char **v6;

  v3 = *a2;
  if (*a2)
    v4 = strlen(*a2);
  else
    v4 = 0;
  v5 = *(unsigned int *)(a1 + 8);
  if (v5 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5 + 1, 16);
    LODWORD(v5) = *(_DWORD *)(a1 + 8);
  }
  v6 = (const char **)(*(_QWORD *)a1 + 16 * v5);
  *v6 = v3;
  v6[1] = (const char *)v4;
  LODWORD(v6) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v6;
  return *(_QWORD *)a1 + 16 * v6 - 16;
}

_QWORD *sub_1C54BEFE0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t *v7;
  unint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = *(unint64_t **)(a3 + 16);
    v8 = *(unint64_t **)(a3 + 24);
    do
    {
      while (1)
      {
        v9 = (_QWORD *)v4;
        v10 = v4 + 32;
        v11 = *(unint64_t **)(v4 + 48);
        v12 = *(unint64_t **)(v4 + 56);
        if (!sub_1C54BF0A8(v7, v8, a3, v11, v12, v4 + 32))
          break;
        v4 = *v9;
        v5 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (!sub_1C54BF0A8(v11, v12, v10, v7, v8, a3))
        break;
      v5 = v9 + 1;
      v4 = v9[1];
    }
    while (v4);
  }
  else
  {
    v9 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v9;
  return v5;
}

BOOL sub_1C54BF0A8(unint64_t *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, unint64_t *a5, uint64_t a6)
{
  if ((sub_1C54BF138(a1, a2, (uint64_t)a4, (uint64_t)a5) & 1) != 0)
    return 1;
  if ((sub_1C54BF138(a4, a5, (uint64_t)a1, (uint64_t)a2) & 1) != 0)
    return 0;
  return **(_QWORD **)(a3 + 8) < **(_QWORD **)(a6 + 8);
}

uint64_t sub_1C54BF138(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (a3 == a4)
    return 0;
  if (a1 != a2)
  {
    v4 = a3 + 24;
    do
    {
      v5 = a1[2];
      v6 = *(_QWORD *)(v4 - 8);
      if (v5 < v6)
        break;
      if (v6 < v5)
        return 0;
      v7 = *(_QWORD *)(v4 - 24);
      if (*a1 < v7)
        break;
      if (v7 < *a1)
        return 0;
      v8 = a1[1];
      v9 = *(_QWORD *)(v4 - 16);
      if (v8 < v9)
        break;
      v10 = 0;
      if (v9 < v8 || v4 == a4)
        return v10;
      a1 += 3;
      v4 += 24;
    }
    while (a1 != a2);
  }
  return 1;
}

uint64_t sub_1C54BF1C4(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  _QWORD *v21;
  _OWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;

  v7 = result;
  v8 = (_QWORD *)(result + 8);
  if ((_QWORD *)(result + 8) == a2
    || (v9 = *(unint64_t **)(a3 + 16),
        v10 = *(unint64_t **)(a3 + 24),
        v11 = (unint64_t *)a2[6],
        v12 = (unint64_t *)a2[7],
        result = sub_1C54BF0A8(v9, v10, a3, v11, v12, (uint64_t)(a2 + 4)),
        (_DWORD)result))
  {
    v13 = *a2;
    if (*(_QWORD **)v7 == a2)
    {
      v15 = a2;
LABEL_17:
      if (v13)
      {
        v29 = v15;
        v18 = v15 + 1;
      }
      else
      {
        v29 = a2;
        v18 = a2;
      }
      goto LABEL_28;
    }
    if (v13)
    {
      v14 = (_QWORD *)*a2;
      do
      {
        v15 = v14;
        v14 = (_QWORD *)v14[1];
      }
      while (v14);
    }
    else
    {
      v19 = a2;
      do
      {
        v15 = (_QWORD *)v19[2];
        v20 = *v15 == (_QWORD)v19;
        v19 = v15;
      }
      while (v20);
    }
    result = sub_1C54BF0A8((unint64_t *)v15[6], (unint64_t *)v15[7], (uint64_t)(v15 + 4), *(unint64_t **)(a3 + 16), *(unint64_t **)(a3 + 24), a3);
    if ((_DWORD)result)
      goto LABEL_17;
LABEL_27:
    result = (uint64_t)sub_1C54BEFE0(v7, &v29, a3);
    v18 = (_QWORD *)result;
    goto LABEL_28;
  }
  result = sub_1C54BF0A8(v11, v12, (uint64_t)(a2 + 4), v9, v10, a3);
  if (!(_DWORD)result)
    return result;
  v16 = a2[1];
  if (v16)
  {
    v17 = (_QWORD *)a2[1];
    do
    {
      v18 = v17;
      v17 = (_QWORD *)*v17;
    }
    while (v17);
  }
  else
  {
    v21 = a2;
    do
    {
      v18 = (_QWORD *)v21[2];
      v20 = *v18 == (_QWORD)v21;
      v21 = v18;
    }
    while (!v20);
  }
  if (v18 != v8)
  {
    result = sub_1C54BF0A8(v9, v10, a3, (unint64_t *)v18[6], (unint64_t *)v18[7], (uint64_t)(v18 + 4));
    if (!(_DWORD)result)
      goto LABEL_27;
  }
  if (v16)
  {
    v29 = v18;
  }
  else
  {
    v29 = a2;
    v18 = a2 + 1;
  }
LABEL_28:
  if (!*v18)
  {
    v22 = operator new(0x60uLL);
    v22[2] = *(_OWORD *)a4;
    *((_QWORD *)v22 + 7) = 0;
    *((_QWORD *)v22 + 8) = 0;
    *((_QWORD *)v22 + 6) = 0;
    sub_1C54B5B50((_QWORD *)v22 + 6, *(const void **)(a4 + 16), *(_QWORD *)(a4 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 24) - *(_QWORD *)(a4 + 16)) >> 3));
    *((_QWORD *)v22 + 10) = 0;
    *((_QWORD *)v22 + 9) = v22 + 5;
    *((_QWORD *)v22 + 11) = 0;
    v23 = *(_QWORD **)(a4 + 40);
    v24 = (_QWORD *)(a4 + 48);
    if (v23 != v24)
    {
      do
      {
        sub_1C54BF1C4((char *)v22 + 72, v22 + 5, v23 + 4, v23 + 4);
        v25 = (_QWORD *)v23[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v23[2];
            v20 = *v26 == (_QWORD)v23;
            v23 = v26;
          }
          while (!v20);
        }
        v23 = v26;
      }
      while (v26 != v24);
    }
    v27 = v29;
    *(_QWORD *)v22 = 0;
    *((_QWORD *)v22 + 1) = 0;
    *((_QWORD *)v22 + 2) = v27;
    *v18 = v22;
    v28 = **(_QWORD **)v7;
    if (v28)
    {
      *(_QWORD *)v7 = v28;
      v22 = (_OWORD *)*v18;
    }
    result = (uint64_t)sub_1C4768E74(*(uint64_t **)(v7 + 8), (uint64_t *)v22);
    ++*(_QWORD *)(v7 + 16);
  }
  return result;
}

llvm::raw_ostream *sub_1C54BF45C(uint64_t a1, llvm::raw_ostream *this, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  unint64_t v9;
  char v10;
  BOOL v11;
  const char *v12;
  size_t v13;
  size_t v14;
  llvm::raw_ostream *result;

  if (a4)
  {
    v5 = 0;
    while (1)
    {
      v6 = *a3;
      if ((v6 - 48) >= 0xA)
      {
        if ((v6 - 97) >= 0x1A)
        {
          if ((v6 - 65) > 0x19)
            break;
          v7 = -55;
        }
        else
        {
          v7 = -87;
        }
      }
      else
      {
        v7 = -48;
      }
      v8 = v7 + v6;
      if (v8 > 9)
        break;
      v9 = 10 * v5 + v8;
      if (v5 > v9 / 0xA)
        break;
      ++a3;
      v5 = v9;
      if (!--a4)
        goto LABEL_14;
    }
  }
  v9 = -1;
LABEL_14:
  v10 = *(_BYTE *)(a1 + 23);
  v11 = v10 < 0;
  if (v10 >= 0)
    v12 = (const char *)a1;
  else
    v12 = *(const char **)a1;
  v13 = v10 & 0x7F;
  if (v11)
    v13 = *(_QWORD *)(a1 + 8);
  if (v13 >= v9)
    v14 = v9;
  else
    v14 = v13;
  result = (llvm::raw_ostream *)*((_QWORD *)this + 4);
  if (v14 > *((_QWORD *)this + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(this, v12, v14);
  if (v14)
  {
    result = (llvm::raw_ostream *)memcpy(result, v12, v14);
    *((_QWORD *)this + 4) += v14;
  }
  return result;
}

uint64_t sub_1C54BF560(uint64_t a1, unsigned __int16 a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned __int16 *v7;
  int v8;
  uint64_t result;
  unsigned __int16 *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & (37 * a2);
  v7 = (unsigned __int16 *)(v3 + 2 * v6);
  v8 = *v7;
  if (v8 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != 0xFFFF)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == 65534;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (unsigned __int16 *)(v3 + 2 * (v13 & v5));
      v8 = *v7;
      if (v8 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t sub_1C54BF614(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  _WORD *v6;
  uint64_t v7;
  __int16 *v8;
  uint64_t i;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_WORD **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(2 * a2, (std::align_val_t)2uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C54BF77C(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = &v14;
  for (i = 8; i != 16; i += 2)
  {
    v10 = *(unsigned __int16 *)(a1 + i);
    if (v10 <= 0xFFFD)
      *v8++ = v10;
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(2 * a2, (std::align_val_t)2uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C54BF77C(a1, &v14, v8);
}

uint64_t sub_1C54BF77C(uint64_t result, _WORD *a2, _WORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  unsigned int v10;
  _WORD *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (void *)(result + 8);
    v9 = 8;
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_6;
    v8 = *(void **)(result + 8);
    v9 = 2 * v7;
  }
  result = (uint64_t)memset(v8, 255, v9);
LABEL_6:
  while (a2 != a3)
  {
    v10 = (unsigned __int16)*a2;
    if (v10 <= 0xFFFD)
    {
      v11 = 0;
      result = sub_1C54BF560((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

void sub_1C54BF830(_QWORD *a1)
{
  if (a1)
  {
    sub_1C54BF830(*a1);
    sub_1C54BF830(a1[1]);
    sub_1C47655E8((uint64_t)(a1 + 5), (_QWORD *)a1[6]);
    operator delete(a1);
  }
}

uint64_t sub_1C54BF874(uint64_t a1)
{
  return **(_QWORD **)a1;
}

uint64_t sub_1C54BF880(uint64_t ***a1, unint64_t a2)
{
  return llvm::DWARFUnitVector::getUnitForOffset(*a1, a2);
}

uint64_t sub_1C54BF888(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = llvm::DWARFVerifier::verifyUnitSection(*(_QWORD *)(a1 + 8), a2);
  **(_DWORD **)a1 += result;
  return result;
}

uint64_t sub_1C54BF8BC(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = llvm::DWARFVerifier::verifyUnitSection(*(_QWORD *)(a1 + 8), a2);
  **(_DWORD **)a1 += result;
  return result;
}

uint64_t sub_1C54BF8F0(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned int *)(a1 + 24), *(unsigned int *)(a1 + 28), *(unsigned int *)(a1 + 32), *(unsigned int *)(a1 + 36), *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

_QWORD *sub_1C54BF948(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C54BFA00(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -1;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C54BFA00(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(_QWORD **)result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    v6 = *(_QWORD **)result;
    do
    {
      *v6 = -1;
      v6 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  if (a2 != a3)
  {
    v7 = 0;
    v8 = v4 - 1;
    do
    {
      v9 = *a2;
      if ((unint64_t)*a2 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v10 = (37 * v9) & v8;
        v11 = &v3[2 * v10];
        v12 = *v11;
        if (v9 != *v11)
        {
          v13 = 0;
          v14 = 1;
          while (v12 != -1)
          {
            if (v13)
              v15 = 0;
            else
              v15 = v12 == -2;
            if (v15)
              v13 = v11;
            v16 = v10 + v14++;
            v10 = v16 & v8;
            v11 = &v3[2 * (v16 & v8)];
            v12 = *v11;
            if (v9 == *v11)
              goto LABEL_8;
          }
          if (v13)
            v11 = v13;
        }
LABEL_8:
        *v11 = v9;
        v11[1] = a2[1];
        *(_DWORD *)(result + 8) = ++v7;
      }
      a2 += 2;
    }
    while (a2 != a3);
  }
  return result;
}

_QWORD *sub_1C54BFAD4(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _QWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v12 = 0;
LABEL_13:
    v6 = sub_1C54BFB8C(a1, (uint64_t)a2, a2, v12);
    *v6 = *a2;
    v6[1] = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = (37 * *a2) & (v3 - 1);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -1)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -2;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v11 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
    goto LABEL_13;
  }
  return v6;
}

_QWORD *sub_1C54BFB8C(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1C54BF948(a1, 2 * v7);
    v8 = *a3;
    v10 = *(_DWORD *)(a1 + 16) - 1;
    v11 = (37 * *a3) & v10;
    a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
    v12 = *a4;
    if (*a3 != *a4)
    {
      v13 = 0;
      v14 = 1;
      while (v12 != -1)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == -2;
        if (v15)
          v13 = a4;
        v16 = v11 + v14++;
        v11 = v16 & v10;
        a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
        v12 = *a4;
        if (v8 == *a4)
          goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
    {
LABEL_3:
      v8 = *a4;
      goto LABEL_4;
    }
    sub_1C54BF948(a1, v7);
    v8 = *a3;
    v17 = *(_DWORD *)(a1 + 16) - 1;
    v18 = (37 * *a3) & v17;
    a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v18);
    v19 = *a4;
    if (*a3 != *a4)
    {
      v13 = 0;
      v20 = 1;
      while (v19 != -1)
      {
        if (v13)
          v21 = 0;
        else
          v21 = v19 == -2;
        if (v21)
          v13 = a4;
        v22 = v18 + v20++;
        v18 = v22 & v17;
        a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v18);
        v19 = *a4;
        if (v8 == *a4)
          goto LABEL_4;
      }
LABEL_27:
      if (v13)
        a4 = v13;
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C54BFD00(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *(_DWORD *)(a1 + 4);
  v3 = *(_DWORD *)(a2 + 4);
  if (v2 < v3)
    return 0xFFFFFFFFLL;
  else
    return v3 < v2;
}

void sub_1C54BFD1C()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C54BFD30(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1C54BFD38(*(const char ***)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *sub_1C54BFD38(const char **a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  size_t v9;
  const char *v10;
  size_t v11;
  llvm::raw_ostream *result;

  if (a4)
  {
    v5 = 0;
    while (1)
    {
      v6 = *a3;
      if ((v6 - 48) >= 0xA)
      {
        if ((v6 - 97) >= 0x1A)
        {
          if ((v6 - 65) > 0x19)
            break;
          v7 = -55;
        }
        else
        {
          v7 = -87;
        }
      }
      else
      {
        v7 = -48;
      }
      v8 = v7 + v6;
      if (v8 > 9)
        break;
      v9 = 10 * v5 + v8;
      if (v5 > v9 / 0xA)
        break;
      ++a3;
      v5 = 10 * v5 + v8;
      if (!--a4)
        goto LABEL_14;
    }
  }
  v9 = -1;
LABEL_14:
  v10 = *a1;
  if (*a1)
    v11 = strlen(*a1);
  else
    v11 = 0;
  if (v11 < v9)
    v9 = v11;
  result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  if (v9 > *((_QWORD *)a2 + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(a2, v10, v9);
  if (v9)
  {
    result = (llvm::raw_ostream *)memcpy(result, v10, v9);
    *((_QWORD *)a2 + 4) += v9;
  }
  return result;
}

void sub_1C54BFE4C()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C54BFE60(uint64_t a1, llvm::raw_ostream *a2)
{
  return sub_1C624D190(*(unsigned int **)(a1 + 8), a2);
}

void sub_1C54BFE68()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C54BFE7C(uint64_t a1, llvm::raw_ostream *a2)
{
  return sub_1C624C274((unsigned __int16 *)(a1 + 8), a2);
}

void sub_1C54BFE84()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C54BFE98(uint64_t a1, llvm::raw_ostream *this, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v5;
  const char *v6;
  size_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  size_t v13;
  llvm::raw_ostream *result;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(const char **)v5;
  v7 = *(_QWORD *)(v5 + 8);
  if (a4)
  {
    v8 = 0;
    while (1)
    {
      v9 = *a3;
      if ((v9 - 48) >= 0xA)
      {
        if ((v9 - 97) >= 0x1A)
        {
          if ((v9 - 65) > 0x19)
            break;
          v10 = -55;
        }
        else
        {
          v10 = -87;
        }
      }
      else
      {
        v10 = -48;
      }
      v11 = v10 + v9;
      if (v11 > 9)
        break;
      v12 = 10 * v8 + v11;
      if (v8 > v12 / 0xA)
        break;
      ++a3;
      v8 = v12;
      if (!--a4)
        goto LABEL_14;
    }
  }
  v12 = -1;
LABEL_14:
  if (v7 >= v12)
    v13 = v12;
  else
    v13 = v7;
  result = (llvm::raw_ostream *)*((_QWORD *)this + 4);
  if (v13 > *((_QWORD *)this + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(this, v6, v13);
  if (v13)
  {
    result = (llvm::raw_ostream *)memcpy(result, v6, v13);
    *((_QWORD *)this + 4) += v13;
  }
  return result;
}

void sub_1C54BFF88()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C54BFF9C(uint64_t a1, llvm::raw_ostream *a2)
{
  return sub_1C624D190((unsigned int *)(a1 + 8), a2);
}

void sub_1C54BFFA4()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C54BFFB8(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  size_t v8;
  size_t v9;
  uint64_t result;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned __int8 *v15[2];

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v15[0] = a3;
  v15[1] = a4;
  v7 = (const void *)sub_1C54C00A8(v15, 0x24u, (uint64_t)", ");
  v9 = v8;
  result = sub_1C54C00A8(v15, 0x40u, (uint64_t)"");
  v11 = (unsigned __int8 *)result;
  v13 = v12;
  if (v5 == v6)
    goto LABEL_3;
  while (1)
  {
    result = (uint64_t)sub_1C542B944(v5, a2, v11, v13);
    v5 += 16;
LABEL_3:
    if (v5 == v6)
      break;
    v14 = (void *)*((_QWORD *)a2 + 4);
    if (v9 <= *((_QWORD *)a2 + 3) - (_QWORD)v14)
    {
      if (v9)
      {
        memcpy(v14, v7, v9);
        *((_QWORD *)a2 + 4) += v9;
      }
    }
    else
    {
      llvm::raw_ostream::write(a2, (const char *)v7, v9);
    }
  }
  return result;
}

uint64_t sub_1C54C00A8(unsigned __int8 **a1, unsigned __int8 a2, uint64_t a3)
{
  unsigned __int8 *v4;
  uint64_t v6;
  unsigned __int8 *v7;
  size_t v8;
  uint64_t v9;
  char *v10;
  _BYTE *v11;
  uint64_t v12;
  BOOL v13;
  size_t v14;

  v4 = a1[1];
  if (v4)
  {
    v6 = (uint64_t)*a1;
    if (**a1 == a2)
    {
      v7 = (unsigned __int8 *)(v6 + 1);
      v8 = (size_t)(v4 - 1);
      *a1 = (unsigned __int8 *)(v6 + 1);
      a1[1] = v4 - 1;
      if (v4 != (unsigned __int8 *)1)
      {
        v9 = 0;
        while (1)
        {
          v10 = off_1E816A760[v9];
          if (*v7 == *v10)
            break;
          if (++v9 == 3)
            return a3;
        }
        v11 = memchr((void *)(v6 + 1), v10[1], v8);
        v12 = v11 - v7;
        if (v11)
          v13 = v12 == -1;
        else
          v13 = 1;
        if (!v13)
        {
          a3 = v6 + 2;
          if (v8 >= v12 + 1)
            v14 = v12 + 1;
          else
            v14 = v8;
          *a1 = &v7[v14];
          a1[1] = (unsigned __int8 *)(v8 - v14);
        }
      }
    }
  }
  return a3;
}

void sub_1C54C018C(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void *v18;
  char v19;
  void *v20;
  __int128 v21;
  const char *v22;
  uint64_t v23;
  void ***v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  int v29;
  void *v30;
  uint64_t v31;
  void **v32;
  void *__p;
  _BYTE v34[15];
  char v35;
  _QWORD v36[4];

  v8 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*a2 + 48))(*a2, &llvm::DWARFDebugNames::SentinelError::ID);
  v9 = *a2;
  *a2 = 0;
  if (v8)
  {
    if (!**(_DWORD **)a3)
    {
      v10 = llvm::WithColor::error(**(llvm::raw_ostream ***)(a3 + 8), "", 0, 0);
      v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 104);
      v12 = *(_DWORD *)(*(_QWORD *)(a3 + 24) + 24);
      v13 = *(_QWORD *)(a3 + 32);
      v22 = "Name Index @ {0:x}: Name {1} ({2}) is not associated with any entries.\n";
      v23 = 71;
      v24 = &v32;
      v25 = 3;
      v26 = &unk_1E8134F58;
      v27 = v11;
      v28 = &unk_1E816A230;
      v29 = v12;
      v30 = &unk_1E8168E00;
      v31 = v13;
      v32 = &v26;
      __p = &v28;
      *(_QWORD *)v34 = &v30;
      sub_1C639D338((uint64_t)&v22, v10);
      ++**(_DWORD **)(a3 + 40);
    }
    *a1 = 0;
    if (v9)
LABEL_5:
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t, void *))(*(_QWORD *)v9 + 48))(v9, &llvm::ErrorInfoBase::ID))
    {
      v14 = llvm::WithColor::error(**(llvm::raw_ostream ***)a4, "", 0, 0);
      v15 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 104);
      v16 = *(_DWORD *)(*(_QWORD *)(a4 + 16) + 24);
      v17 = *(_QWORD *)(a4 + 24);
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v9 + 24))(&v20, v9);
      v18 = v20;
      *(_QWORD *)v34 = v21;
      *(_QWORD *)&v34[7] = *(_QWORD *)((char *)&v21 + 7);
      v19 = HIBYTE(v21);
      v21 = 0uLL;
      v20 = 0;
      v22 = "Name Index @ {0:x}: Name {1} ({2}): {3}\n";
      v23 = 40;
      v24 = (void ***)v36;
      v25 = 4;
      v26 = &unk_1E8134F58;
      v27 = v15;
      v28 = &unk_1E816A230;
      v29 = v16;
      v30 = &unk_1E8168E00;
      v31 = v17;
      v32 = (void **)&unk_1E816A788;
      __p = v18;
      v35 = v19;
      v36[0] = &v26;
      v36[1] = &v28;
      v36[2] = &v30;
      v36[3] = &v32;
      sub_1C639D338((uint64_t)&v22, v14);
      v32 = (void **)&unk_1E816A788;
      if (v35 < 0)
        operator delete(__p);
      if (SHIBYTE(v21) < 0)
        operator delete(v20);
      ++**(_DWORD **)(a4 + 32);
      *a1 = 0;
      goto LABEL_5;
    }
    *a1 = v9;
  }
}

uint64_t sub_1C54C041C(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E816A788;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1C54C045C(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E816A788;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C54C04AC(uint64_t a1, uint64_t a2)
{
  void *v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  __n128 result;

  if (*(_BYTE *)(a1 + 184))
  {
    *(_QWORD *)a1 = &unk_1E81697C0;
    v4 = *(void **)(a1 + 8);
    if (v4 != (void *)(a1 + 24))
      free(v4);
    *(_BYTE *)(a1 + 184) = 0;
  }
  *(_QWORD *)a1 = &unk_1E81697C0;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_QWORD *)(a1 + 16) = 0x300000000;
  v5 = *(_DWORD *)(a2 + 16);
  if (v5)
    v6 = a1 == a2;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 < 4)
    {
      v7 = *(unsigned int *)(a2 + 16);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 8, a1 + 24, *(unsigned int *)(a2 + 16), 48);
      v7 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v7)
        goto LABEL_14;
    }
    memcpy(*(void **)(a1 + 8), *(const void **)(a2 + 8), 48 * v7);
LABEL_14:
    *(_DWORD *)(a1 + 16) = v5;
  }
  *(_QWORD *)a1 = &off_1E81696C0;
  result = *(__n128 *)(a2 + 168);
  *(__n128 *)(a1 + 168) = result;
  *(_BYTE *)(a1 + 184) = 1;
  return result;
}

void llvm::demangle(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  _BYTE *v5;
  void *v6;
  void *__p[2];
  uint64_t v8;

  __p[0] = 0;
  __p[1] = 0;
  v8 = 0;
  if (*(char *)(a1 + 23) >= 0)
    v4 = (char *)a1;
  else
    v4 = *(char **)a1;
  if (!llvm::nonMicrosoftDemangle((llvm *)v4, (uint64_t)__p)
    && (*v4 != 95 || !llvm::nonMicrosoftDemangle((llvm *)(v4 + 1), (uint64_t)__p)))
  {
    v5 = llvm::microsoftDemangle(v4, 0, 0, 0, 0, 0);
    if (!v5)
    {
      if (*(char *)(a1 + 23) < 0)
      {
        sub_1C47EBC30((_BYTE *)a2, *(void **)a1, *(_QWORD *)(a1 + 8));
      }
      else
      {
        *(_OWORD *)a2 = *(_OWORD *)a1;
        *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
      }
      goto LABEL_10;
    }
    v6 = v5;
    MEMORY[0x1CAA32ABC](__p, v5);
    free(v6);
  }
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 16) = v8;
  __p[1] = 0;
  v8 = 0;
  __p[0] = 0;
LABEL_10:
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
}

uint64_t llvm::nonMicrosoftDemangle(llvm *a1, uint64_t a2)
{
  int *v4;
  const char *v5;
  void *v6;
  void *v7;
  size_t v9;
  const char *v10;
  size_t v11;
  void **p_dst;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  unint64_t v16;
  void **v17;
  void **v18;
  void **__dst;
  size_t v20;
  int64_t v21;

  if (!strncmp((const char *)a1, "_Z", 2uLL) || !strncmp((const char *)a1, "___Z", 4uLL))
  {
    v6 = llvm::itaniumDemangle(a1, 0, 0, 0, v4);
    goto LABEL_7;
  }
  if (*(_BYTE *)a1 == 95 && *((_BYTE *)a1 + 1) == 82)
  {
    v6 = (void *)llvm::rustDemangle((const char *)a1, v5);
    goto LABEL_7;
  }
  v9 = strlen((const char *)a1);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v11 = v9;
  if (v9 >= 0x17)
  {
    v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v13 = v9 | 7;
    v14 = v13 + 1;
    p_dst = (void **)operator new(v13 + 1);
    v20 = v11;
    v21 = v14 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_16;
  }
  HIBYTE(v21) = v9;
  p_dst = (void **)&__dst;
  if (v9)
LABEL_16:
    memcpy(p_dst, a1, v11);
  v15 = 0;
  *((_BYTE *)p_dst + v11) = 0;
  v16 = HIBYTE(v21) & 0x7E;
  if (v21 < 0)
    v16 = v20;
  if (v16 >= 2)
  {
    v17 = __dst;
    if (v21 >= 0)
      v18 = (void **)&__dst;
    else
      v18 = __dst;
    if (*(_BYTE *)v18 == 95)
    {
      if (v21 >= 0)
        v17 = (void **)&__dst;
      v15 = *((unsigned __int8 *)v17 + 1) == 68;
      if (SHIBYTE(v21) < 0)
        goto LABEL_32;
    }
    else
    {
      v15 = 0;
      if (SHIBYTE(v21) < 0)
        goto LABEL_32;
    }
LABEL_21:
    if (!v15)
      return 0;
    goto LABEL_22;
  }
  if ((SHIBYTE(v21) & 0x80000000) == 0)
    goto LABEL_21;
LABEL_32:
  operator delete(__dst);
  if (!v15)
    return 0;
LABEL_22:
  v6 = llvm::dlangDemangle((char *)a1, v10);
LABEL_7:
  v7 = v6;
  if (v6)
  {
    MEMORY[0x1CAA32ABC](a2, v6);
    free(v7);
    return 1;
  }
  return 0;
}

_BYTE *llvm::itaniumDemangle(llvm *this, const char *a2, char *a3, unint64_t *a4, int *a5)
{
  const char *v5;
  _BYTE *v6;
  uint64_t *v7;
  int *v8;
  int *v9;
  uint64_t *v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void **v18;
  void **v19;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD v26[2];
  void *v27;
  _OWORD *v28;
  void **v29;
  _OWORD v30[16];
  void *v31[3];
  _BYTE v32[256];
  void *v33[3];
  _BYTE v34[64];
  void *v35[3];
  _BYTE v36[32];
  void *v37[3];
  _BYTE v38[32];
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _OWORD v43[256];
  void *v44;
  uint64_t v45;

  v5 = (const char *)MEMORY[0x1E0C80A78](this, a2, a3, a4);
  v9 = v8;
  v45 = *MEMORY[0x1E0C80C00];
  if (!v5 || (v10 = v7, (v11 = v6) != 0) && !v7)
  {
    v12 = 0;
    if (v8)
      *v8 = -3;
    return v12;
  }
  v26[0] = v5;
  v26[1] = &v5[strlen(v5)];
  v27 = v30;
  v28 = v30;
  v29 = v31;
  memset(v30, 0, sizeof(v30));
  v31[0] = v32;
  v31[1] = v32;
  memset(v32, 0, sizeof(v32));
  memset(v34, 0, sizeof(v34));
  v33[0] = v34;
  v33[1] = v34;
  v31[2] = v33;
  v33[2] = v35;
  v35[0] = v36;
  v35[1] = v36;
  v35[2] = v37;
  memset(v38, 0, sizeof(v38));
  memset(v36, 0, sizeof(v36));
  v37[0] = v38;
  v37[1] = v38;
  v37[2] = &v39;
  v39 = 1;
  v40 = -1;
  v42 = 0;
  v41 = 0;
  v43[0] = 0u;
  v44 = v43;
  v24 = -1;
  v25 = 1;
  v13 = sub_1C54C0B94((uint64_t)v26);
  if (!v13)
  {
    v12 = 0;
    v16 = -2;
    if (!v9)
      goto LABEL_18;
    goto LABEL_17;
  }
  v14 = v13;
  if (v11)
  {
    v15 = *v10;
  }
  else
  {
    v15 = 1024;
    v11 = malloc_type_malloc(0x400uLL, 0x1E4FE0F9uLL);
    if (!v11)
    {
      v12 = 0;
      v16 = -1;
      if (!v9)
        goto LABEL_18;
      goto LABEL_17;
    }
  }
  v21 = v11;
  v22 = 0;
  v23 = v15;
  (*(void (**)(uint64_t, _BYTE **))(*(_QWORD *)v14 + 32))(v14, &v21);
  if ((*(_WORD *)(v14 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, _BYTE **))(*(_QWORD *)v14 + 40))(v14, &v21);
  sub_1C54C1634(&v21, 1);
  v17 = v22++;
  v21[v17] = 0;
  if (v10)
    *v10 = v22;
  v16 = 0;
  v12 = v21;
  if (!v9)
    goto LABEL_18;
LABEL_17:
  *v9 = v16;
LABEL_18:
  v18 = (void **)v44;
  if (v44)
  {
    do
    {
      while (1)
      {
        v19 = (void **)*v18;
        v44 = *v18;
        if (v18 == (void **)v43)
          break;
        free(v18);
        v18 = (void **)v44;
        if (!v44)
          goto LABEL_23;
      }
      v18 = v19;
    }
    while (v19);
  }
LABEL_23:
  v43[0] = 0uLL;
  v44 = v43;
  if (v37[0] != v38)
    free(v37[0]);
  if (v35[0] != v36)
    free(v35[0]);
  if (v33[0] != v34)
    free(v33[0]);
  if (v31[0] != v32)
    free(v31[0]);
  if (v27 != v30)
    free(v27);
  return v12;
}

uint64_t sub_1C54C0B94(uint64_t a1)
{
  unsigned __int8 *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned __int8 **)a1;
  v3 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v3 < 2)
    goto LABEL_9;
  v4 = 2;
  if (strncmp("_Z", (const char *)v2, 2uLL))
  {
    if (v3 < 3)
    {
LABEL_9:
      result = sub_1C54C2310(a1);
      if (*(_QWORD *)(a1 + 8) != *(_QWORD *)a1)
        return 0;
      return result;
    }
    v4 = 3;
    if (strncmp("__Z", (const char *)v2, 3uLL))
    {
      if (v3 < 4)
        goto LABEL_9;
      v5 = 4;
      if (strncmp("___Z", (const char *)v2, 4uLL))
      {
        if (v3 < 5)
          goto LABEL_9;
        v5 = 5;
        if (strncmp("____Z", (const char *)v2, 5uLL))
          goto LABEL_9;
      }
      *(_QWORD *)a1 = &v2[v5];
      result = sub_1C54C1690((unsigned __int8 **)a1);
      v16 = result;
      if (!result)
        return result;
      v11 = *(unsigned __int8 **)a1;
      v12 = *(unsigned __int8 **)(a1 + 8);
      if ((unint64_t)&v12[-*(_QWORD *)a1] < 0xD || strncmp("_block_invoke", *(const char **)a1, 0xDuLL))
        return 0;
      *(_QWORD *)a1 = v11 + 13;
      if (v11 + 13 == v12 || v11[13] != 95)
      {
        sub_1C54C21F4((char **)a1, 0);
      }
      else
      {
        *(_QWORD *)a1 = v11 + 14;
        v13 = sub_1C54C21F4((char **)a1, 0);
        if (v13 == v14)
          return 0;
      }
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 != *(_QWORD *)a1)
      {
        if (**(_BYTE **)a1 != 46)
          return 0;
        *(_QWORD *)a1 = v15;
      }
      return sub_1C54C2290(a1, "invocation function for block in ", &v16);
    }
  }
  *(_QWORD *)a1 = &v2[v4];
  result = sub_1C54C1690((unsigned __int8 **)a1);
  if (result)
  {
    v7 = result;
    v9 = *(unsigned __int8 **)a1;
    v8 = *(unsigned __int8 **)(a1 + 8);
    if (v8 == *(unsigned __int8 **)a1)
    {
      v9 = *(unsigned __int8 **)(a1 + 8);
    }
    else if (*v9 == 46)
    {
      v10 = sub_1C54C413C(a1 + 808, 40);
      *(_BYTE *)(v10 + 8) = 1;
      *(_WORD *)(v10 + 9) = *(_WORD *)(v10 + 9) & 0xF000 | 0x540;
      *(_QWORD *)v10 = &unk_1E816C130;
      *(_QWORD *)(v10 + 16) = v7;
      *(_QWORD *)(v10 + 24) = v9;
      *(_QWORD *)(v10 + 32) = v8;
      v9 = *(unsigned __int8 **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      v8 = v9;
      v7 = v10;
    }
    if (v8 == v9)
      return v7;
    else
      return 0;
  }
  return result;
}

_QWORD *sub_1C54C0DC4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = a1 + 101;
  v3 = (_QWORD *)a1[613];
  if (v3)
  {
    do
    {
      while (1)
      {
        v4 = (_QWORD *)*v3;
        a1[613] = *v3;
        if (v3 == v2)
          break;
        free(v3);
        v3 = (_QWORD *)a1[613];
        if (!v3)
          goto LABEL_6;
      }
      v3 = v4;
    }
    while (v4);
  }
LABEL_6:
  *v2 = 0;
  v2[1] = 0;
  a1[613] = v2;
  v5 = (_QWORD *)a1[90];
  if (v5 != a1 + 93)
    free(v5);
  v6 = (_QWORD *)a1[83];
  if (v6 != a1 + 86)
    free(v6);
  v7 = (_QWORD *)a1[72];
  if (v7 != a1 + 75)
    free(v7);
  v8 = (_QWORD *)a1[37];
  if (v8 != a1 + 40)
    free(v8);
  v9 = (_QWORD *)a1[2];
  if (v9 != a1 + 5)
    free(v9);
  return a1;
}

void llvm::ItaniumPartialDemangler::~ItaniumPartialDemangler(llvm::ItaniumPartialDemangler *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v1 = (_QWORD *)*((_QWORD *)this + 1);
  if (v1)
  {
    v2 = v1 + 101;
    v3 = (_QWORD *)v1[613];
    if (v3)
    {
      do
      {
        while (1)
        {
          v4 = (_QWORD *)*v3;
          v1[613] = *v3;
          if (v3 == v2)
            break;
          free(v3);
          v3 = (_QWORD *)v1[613];
          if (!v3)
            goto LABEL_7;
        }
        v3 = v4;
      }
      while (v4);
    }
LABEL_7:
    *v2 = 0;
    v1[102] = 0;
    v1[613] = v2;
    v5 = (_QWORD *)v1[90];
    if (v5 != v1 + 93)
      free(v5);
    v6 = (_QWORD *)v1[83];
    if (v6 != v1 + 86)
      free(v6);
    v7 = (_QWORD *)v1[72];
    if (v7 != v1 + 75)
      free(v7);
    v8 = (_QWORD *)v1[37];
    if (v8 != v1 + 40)
      free(v8);
    v9 = (_QWORD *)v1[2];
    if (v9 != v1 + 5)
      free(v9);
    MEMORY[0x1CAA32FC0](v1, 0x10F0C408ABB1DA5);
  }
}

{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)*((_QWORD *)this + 1);
  if (v1)
  {
    v2 = sub_1C54C0DC4(v1);
    MEMORY[0x1CAA32FC0](v2, 0x10F0C408ABB1DA5);
  }
}

__n128 llvm::ItaniumPartialDemangler::ItaniumPartialDemangler(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

uint64_t *llvm::ItaniumPartialDemangler::operator=(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  v3 = result[1];
  result[1] = a2[1];
  a2[1] = v3;
  return result;
}

_BYTE *llvm::ItaniumPartialDemangler::getFunctionBaseName(llvm::ItaniumPartialDemangler *this, char *a2, unint64_t *a3)
{
  uint64_t i;
  uint64_t v4;
  int v5;

  if (*(_BYTE *)(*(_QWORD *)this + 8) != 18)
    return 0;
  for (i = *(_QWORD *)this + 24; ; i = v4 + 24)
  {
    while (1)
    {
      v4 = *(_QWORD *)i;
      v5 = *(unsigned __int8 *)(*(_QWORD *)i + 8);
      if (v5 <= 23)
        break;
      if (v5 == 24 || v5 == 26)
        goto LABEL_10;
      if (v5 != 41)
        return sub_1C54C1030(v4, a2, (uint64_t *)a3);
LABEL_11:
      i = v4 + 16;
    }
    if (v5 == 8)
      goto LABEL_11;
    if (v5 != 23)
      break;
LABEL_10:
    ;
  }
  return sub_1C54C1030(v4, a2, (uint64_t *)a3);
}

BOOL llvm::ItaniumPartialDemangler::isFunction(llvm::ItaniumPartialDemangler *this)
{
  return *(_BYTE *)(*(_QWORD *)this + 8) == 18;
}

_BYTE *sub_1C54C1030(uint64_t a1, _BYTE *a2, uint64_t *a3)
{
  uint64_t v5;
  _BYTE *result;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v11 = -1;
  v12 = 1;
  if (a2)
  {
    v5 = *a3;
  }
  else
  {
    v5 = 128;
    result = malloc_type_malloc(0x80uLL, 0x1E4FE0F9uLL);
    a2 = result;
    if (!result)
      return result;
  }
  v8 = a2;
  v9 = 0;
  v10 = v5;
  (*(void (**)(uint64_t, _BYTE **))(*(_QWORD *)a1 + 32))(a1, &v8);
  if ((*(_WORD *)(a1 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, _BYTE **))(*(_QWORD *)a1 + 40))(a1, &v8);
  sub_1C54C1634(&v8, 1);
  v7 = v9++;
  v8[v7] = 0;
  if (a3)
    *a3 = v9;
  return v8;
}

char *llvm::ItaniumPartialDemangler::getFunctionDeclContextName(llvm::ItaniumPartialDemangler *this, char *a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *result;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  if (*(_BYTE *)(*(_QWORD *)this + 8) != 18)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)this + 24);
  v15 = -1;
  v16 = 1;
  if (a2)
  {
    v5 = *a3;
  }
  else
  {
    v5 = 128;
    result = (char *)malloc_type_malloc(0x80uLL, 0x1E4FE0F9uLL);
    a2 = result;
    if (!result)
      return result;
  }
  v12 = a2;
  v13 = 0;
  v14 = v5;
  while (1)
  {
    v7 = *(unsigned __int8 *)(v4 + 8);
    switch(v7)
    {
      case 41:
LABEL_10:
        v8 = (uint64_t *)(v4 + 16);
        goto LABEL_16;
      case 26:
        v4 = *(_QWORD *)(v4 + 24);
        v7 = *(unsigned __int8 *)(v4 + 8);
        break;
      case 8:
        goto LABEL_10;
    }
    if (v7 != 24)
      break;
    v9 = *(_QWORD *)(v4 + 16);
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v9 + 32))(v9, &v12);
    if ((*(_WORD *)(v9 + 9) & 0xC0) != 0x40)
      (*(void (**)(uint64_t, char **))(*(_QWORD *)v9 + 40))(v9, &v12);
    sub_1C54C1634(&v12, 2);
    *(_WORD *)&v12[v13] = 14906;
    v13 += 2;
    v8 = (uint64_t *)(v4 + 24);
LABEL_16:
    v4 = *v8;
  }
  if (v7 == 23)
  {
    v10 = *(_QWORD *)(v4 + 16);
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v10 + 32))(v10, &v12);
    if ((*(_WORD *)(v10 + 9) & 0xC0) != 0x40)
      (*(void (**)(uint64_t, char **))(*(_QWORD *)v10 + 40))(v10, &v12);
  }
  sub_1C54C1634(&v12, 1);
  v11 = v13++;
  v12[v11] = 0;
  if (a3)
    *a3 = v13;
  return v12;
}

char *llvm::ItaniumPartialDemangler::getFunctionParameters(llvm::ItaniumPartialDemangler *this, char *a2, unint64_t *a3)
{
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;

  if (*(_BYTE *)(*(_QWORD *)this + 8) != 18)
    return 0;
  v14 = *(_OWORD *)(*(_QWORD *)this + 32);
  v12 = -1;
  v13 = 1;
  if (a2)
  {
    v4 = *a3;
  }
  else
  {
    v4 = 128;
    result = (char *)malloc_type_malloc(0x80uLL, 0x1E4FE0F9uLL);
    a2 = result;
    if (!result)
      return result;
  }
  v9 = a2;
  v10 = 0;
  v11 = v4;
  sub_1C54C1634(&v9, 1);
  v6 = v10++;
  v9[v6] = 40;
  sub_1C54C1398(&v14, (uint64_t *)&v9);
  sub_1C54C1634(&v9, 1);
  v7 = v10++;
  v9[v7] = 41;
  sub_1C54C1634(&v9, 1);
  v8 = v10++;
  v9[v8] = 0;
  if (a3)
    *a3 = v10;
  return v9;
}

_QWORD *sub_1C54C1398(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  if (result[1])
  {
    v3 = result;
    v4 = 0;
    v5 = a2[1];
    v6 = 1;
    do
    {
      v7 = v5;
      if ((v6 & 1) == 0)
      {
        sub_1C54C1634(a2, 2);
        *(_WORD *)(*a2 + a2[1]) = 8236;
        v7 = a2[1] + 2;
        a2[1] = v7;
      }
      result = sub_1C6253C74(*(_QWORD *)(*v3 + 8 * v4), a2, 18, 0);
      if (v7 == a2[1])
      {
        a2[1] = v5;
      }
      else
      {
        v6 = 0;
        v5 = a2[1];
      }
      ++v4;
    }
    while (v4 != v3[1]);
  }
  return result;
}

char *llvm::ItaniumPartialDemangler::getFunctionReturnType(llvm::ItaniumPartialDemangler *this, char *a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  char *result;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v3 = *(_QWORD *)this;
  if (*(_BYTE *)(*(_QWORD *)this + 8) != 18)
    return 0;
  v13 = -1;
  v14 = 1;
  if (a2)
  {
    v5 = *a3;
  }
  else
  {
    result = (char *)malloc_type_malloc(0x80uLL, 0x1E4FE0F9uLL);
    if (!result)
      return result;
    a2 = result;
    v3 = *(_QWORD *)this;
    v5 = 128;
  }
  v10 = a2;
  v11 = 0;
  v12 = v5;
  v8 = *(_QWORD *)(v3 + 16);
  if (v8)
  {
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v8 + 32))(v8, &v10);
    if ((*(_WORD *)(v8 + 9) & 0xC0) != 0x40)
      (*(void (**)(uint64_t, char **))(*(_QWORD *)v8 + 40))(v8, &v10);
  }
  sub_1C54C1634(&v10, 1);
  v9 = v11++;
  v10[v9] = 0;
  if (a3)
    *a3 = v11;
  return v10;
}

_BYTE *llvm::ItaniumPartialDemangler::finishDemangle(llvm::ItaniumPartialDemangler *this, char *a2, unint64_t *a3)
{
  return sub_1C54C1030(*(_QWORD *)this, a2, (uint64_t *)a3);
}

BOOL llvm::ItaniumPartialDemangler::hasFunctionQualifiers(llvm::ItaniumPartialDemangler *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (*(_BYTE *)(*(_QWORD *)this + 8) != 18)
    return 0;
  if (*(_DWORD *)(v1 + 56))
    return 1;
  return *(_BYTE *)(v1 + 60) != 0;
}

BOOL llvm::ItaniumPartialDemangler::isCtorOrDtor(llvm::ItaniumPartialDemangler *this)
{
  uint64_t v1;
  unsigned int v2;
  _BOOL8 result;
  uint64_t *v4;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  while (1)
  {
    v2 = *(unsigned __int8 *)(v1 + 8);
    if (v2 <= 0x28)
      break;
    if (v2 != 41)
      return v2 == 45;
LABEL_8:
    v4 = (uint64_t *)(v1 + 16);
LABEL_9:
    v1 = *v4;
    if (!v1)
      return 0;
  }
  result = 0;
  switch(*(_BYTE *)(v1 + 8))
  {
    case 0x12:
    case 0x17:
    case 0x18:
    case 0x1A:
      v4 = (uint64_t *)(v1 + 24);
      goto LABEL_9;
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x19:
      return result;
    default:
      if (v2 == 8)
        goto LABEL_8;
      break;
  }
  return result;
}

BOOL llvm::ItaniumPartialDemangler::isSpecialName(llvm::ItaniumPartialDemangler *this)
{
  return (*(_BYTE *)(*(_QWORD *)this + 8) & 0xFE) == 20;
}

BOOL llvm::ItaniumPartialDemangler::isData(llvm::ItaniumPartialDemangler *this)
{
  int v1;
  int v2;
  BOOL v3;

  v1 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
  v3 = v1 == 18;
  v2 = v1 & 0xFE;
  v3 = v3 || v2 == 20;
  return !v3;
}

_QWORD *sub_1C54C1634(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  size_t v5;
  unint64_t v6;
  size_t v7;

  v2 = result[2];
  v3 = result[1] + a2;
  if (v3 > v2)
  {
    v4 = result;
    v5 = v3 + 992;
    v6 = 2 * v2;
    if (v6 <= v5)
      v7 = v5;
    else
      v7 = v6;
    result[2] = v7;
    result = malloc_type_realloc((void *)*result, v7, 0xF306D45BuLL);
    *v4 = result;
    if (!result)
      std::terminate();
  }
  return result;
}

uint64_t sub_1C54C1690(unsigned __int8 **a1)
{
  char *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v50;
  unsigned __int8 *v51;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  char *v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  void *v61;
  void *v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  unsigned __int8 *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 *v75;
  uint64_t v76;
  unsigned __int8 *v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t __dst;
  void *__dsta;
  uint64_t v83;
  char v84;
  unint64_t v85;
  char *v86;
  void *v87[3];
  _OWORD v88[2];
  void *v89[3];
  _OWORD v90[4];
  uint64_t v91;

  v86 = (char *)a1;
  v87[0] = v88;
  v87[1] = v88;
  v87[2] = v89;
  memset(v88, 0, sizeof(v88));
  v89[0] = v90;
  v89[1] = v90;
  v89[2] = &v91;
  memset(v90, 0, sizeof(v90));
  sub_1C6253D78((char *)v87, (uint64_t)(a1 + 83));
  sub_1C6253E58((char *)v89, (uint64_t)(v86 + 576));
  v2 = v86;
  *((_QWORD *)v86 + 84) = *((_QWORD *)v86 + 83);
  *((_QWORD *)v2 + 73) = *((_QWORD *)v2 + 72);
  v3 = *a1;
  v4 = a1[1];
  v5 = v4 - *a1;
  if (v4 == *a1)
    goto LABEL_9;
  v6 = *v3;
  if (v6 == 71)
  {
    if (v5 < 2)
      goto LABEL_75;
    v32 = (char)v3[1];
    switch(v32)
    {
      case 'I':
        *a1 = v3 + 2;
        v83 = 0;
        v10 = 0;
        if ((sub_1C54C4000(a1, &v83) & 1) != 0)
          goto LABEL_76;
        v8 = v83;
        if (!v83)
          goto LABEL_76;
        v9 = sub_1C54C413C((uint64_t)(a1 + 101), 40);
        v10 = v9;
        *(_BYTE *)(v9 + 8) = 20;
        *(_WORD *)(v9 + 9) = *(_WORD *)(v9 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v9 = &unk_1E816A800;
        v11 = "initializer for module ";
        v12 = "";
        break;
      case 'R':
        *a1 = v3 + 2;
        v35 = sub_1C54C3774((uint64_t)a1, 0);
        v10 = 0;
        if (!v35)
          goto LABEL_76;
        v8 = v35;
        v36 = sub_1C54C3F6C(a1, &v83);
        v37 = *a1;
        if (*a1 == a1[1] || *v37 != 95)
        {
          if (!v36)
            goto LABEL_75;
        }
        else
        {
          *a1 = v37 + 1;
        }
        v9 = sub_1C54C413C((uint64_t)(a1 + 101), 40);
        v10 = v9;
        *(_BYTE *)(v9 + 8) = 20;
        *(_WORD *)(v9 + 9) = *(_WORD *)(v9 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v9 = &unk_1E816A800;
        v11 = "reference temporary for ";
        v12 = "";
        break;
      case 'V':
        *a1 = v3 + 2;
        v33 = sub_1C54C3774((uint64_t)a1, 0);
        v10 = 0;
        if (!v33)
          goto LABEL_76;
        v8 = v33;
        v9 = sub_1C54C413C((uint64_t)(a1 + 101), 40);
        v10 = v9;
        *(_BYTE *)(v9 + 8) = 20;
        *(_WORD *)(v9 + 9) = *(_WORD *)(v9 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v9 = &unk_1E816A800;
        v11 = "guard variable for ";
        v12 = "";
        break;
      default:
        goto LABEL_75;
    }
LABEL_107:
    *(_QWORD *)(v9 + 16) = v11;
    *(_QWORD *)(v9 + 24) = v12;
    *(_QWORD *)(v9 + 32) = v8;
    goto LABEL_76;
  }
  if (v6 != 84)
  {
LABEL_9:
    LOWORD(v83) = 0;
    HIDWORD(v83) = 0;
    v84 = 0;
    v85 = (a1[91] - a1[90]) >> 3;
    v10 = sub_1C54C3774((uint64_t)a1, (uint64_t)&v83);
    if (!v10)
      goto LABEL_76;
    v13 = v85;
    v14 = a1[90];
    v15 = (a1[91] - v14) >> 3;
    v16 = v15 > v85;
    v17 = v15 - v85;
    if (v16)
    {
      v18 = a1[83];
      if (v18 != a1[84])
      {
        v19 = &v14[8 * v85];
        while (*(_QWORD *)v18)
        {
          v20 = *(_QWORD *)(*(_QWORD *)v19 + 16);
          v21 = **(_QWORD **)v18;
          if (v20 >= (*(_QWORD *)(*(_QWORD *)v18 + 8) - v21) >> 3)
            break;
          *(_QWORD *)(*(_QWORD *)v19 + 24) = *(_QWORD *)(v21 + 8 * v20);
          v19 += 8;
          if (!--v17)
            goto LABEL_17;
        }
      }
      goto LABEL_75;
    }
LABEL_17:
    a1[91] = &v14[8 * v13];
    v22 = *a1;
    v23 = a1[1];
    if (v23 != *a1)
    {
      v24 = *v22 - 46;
      v16 = v24 > 0x31;
      v25 = (1 << v24) & 0x2000000800001;
      if (v16 || v25 == 0)
      {
        if ((unint64_t)(v23 - *a1) >= 0xD && !strncmp("Ua9enable_ifI", (const char *)*a1, 0xDuLL))
        {
          v27 = v22 + 13;
          *a1 = v22 + 13;
          v28 = (a1[3] - a1[2]) >> 3;
          while (v27 == v23 || *v27 != 69)
          {
            v29 = sub_1C54C3CA8(a1);
            if (!v29)
              goto LABEL_75;
            v30 = v29;
            v31 = a1[3];
            if (v31 == a1[4])
            {
              sub_1C625449C((uint64_t)(a1 + 2), (v31 - a1[2]) >> 2);
              v31 = a1[3];
            }
            a1[3] = v31 + 8;
            *(_QWORD *)v31 = v30;
            v27 = *a1;
            v23 = a1[1];
          }
          *a1 = v27 + 1;
          v75 = a1[3];
          v76 = v28;
          v77 = &a1[2][8 * v28];
          __dsta = (void *)sub_1C54C413C((uint64_t)(a1 + 101), (int)v75 - (int)v77);
          v78 = v75 - v77;
          if (v78)
            memmove(__dsta, v77, v78);
          a1[3] = &a1[2][8 * v76];
          v38 = sub_1C54C413C((uint64_t)(a1 + 101), 32);
          *(_BYTE *)(v38 + 8) = 9;
          *(_WORD *)(v38 + 9) = *(_WORD *)(v38 + 9) & 0xF000 | 0x540;
          *(_QWORD *)v38 = &unk_1E816C080;
          *(_QWORD *)(v38 + 16) = __dsta;
          *(_QWORD *)(v38 + 24) = v78 >> 3;
        }
        else
        {
          v38 = 0;
        }
        v39 = 0;
        if (!(_BYTE)v83)
        {
          if (BYTE1(v83))
          {
            v39 = sub_1C54C2310((uint64_t)a1);
            if (!v39)
              goto LABEL_75;
          }
        }
        v40 = *a1;
        if (*a1 == a1[1] || *v40 != 118)
        {
          v79 = v39;
          v80 = v38;
          __dst = (a1[3] - a1[2]) >> 3;
          while (1)
          {
            v44 = sub_1C54C2310((uint64_t)a1);
            if (!v44)
              goto LABEL_75;
            v45 = v44;
            v46 = a1[3];
            if (v46 == a1[4])
            {
              sub_1C625449C((uint64_t)(a1 + 2), (v46 - a1[2]) >> 2);
              v46 = a1[3];
            }
            a1[3] = v46 + 8;
            *(_QWORD *)v46 = v45;
            if (a1[1] != *a1)
            {
              v47 = **a1 - 46;
              v16 = v47 > 0x31;
              v48 = (1 << v47) & 0x2000000800001;
              if (v16 || v48 == 0)
                continue;
            }
            v59 = a1[3];
            v60 = &a1[2][8 * __dst];
            v61 = (void *)sub_1C54C413C((uint64_t)(a1 + 101), (int)v59 - (int)v60);
            v62 = v61;
            v63 = v59 - v60;
            if (v63)
              memmove(v61, v60, v63);
            a1[3] = &a1[2][8 * __dst];
            v41 = sub_1C54C413C((uint64_t)(a1 + 101), 64);
            v42 = HIDWORD(v83);
            v43 = v84;
            *(_BYTE *)(v41 + 8) = 18;
            *(_WORD *)(v41 + 9) = *(_WORD *)(v41 + 9) & 0xF000 | 0x100;
            *(_QWORD *)v41 = &unk_1E816C0D8;
            *(_QWORD *)(v41 + 16) = v79;
            *(_QWORD *)(v41 + 24) = v10;
            *(_QWORD *)(v41 + 32) = v62;
            *(_QWORD *)(v41 + 40) = v63 >> 3;
            v38 = v80;
            goto LABEL_88;
          }
        }
        *a1 = v40 + 1;
        v41 = sub_1C54C413C((uint64_t)(a1 + 101), 64);
        v42 = HIDWORD(v83);
        v43 = v84;
        *(_BYTE *)(v41 + 8) = 18;
        *(_WORD *)(v41 + 9) = *(_WORD *)(v41 + 9) & 0xF000 | 0x100;
        *(_QWORD *)v41 = &unk_1E816C0D8;
        *(_QWORD *)(v41 + 16) = v39;
        *(_QWORD *)(v41 + 24) = v10;
        *(_QWORD *)(v41 + 32) = 0;
        *(_QWORD *)(v41 + 40) = 0;
LABEL_88:
        *(_QWORD *)(v41 + 48) = v38;
        *(_DWORD *)(v41 + 56) = v42;
        v10 = v41;
        *(_BYTE *)(v41 + 60) = v43;
      }
    }
  }
  else
  {
    if (v5 >= 2)
    {
      switch(v3[1])
      {
        case 'A':
          *a1 = v3 + 2;
          v34 = sub_1C54C3CA8(a1);
          if (!v34)
            goto LABEL_75;
          v8 = v34;
          v9 = sub_1C54C413C((uint64_t)(a1 + 101), 40);
          v10 = v9;
          *(_BYTE *)(v9 + 8) = 20;
          *(_WORD *)(v9 + 9) = *(_WORD *)(v9 + 9) & 0xF000 | 0x540;
          *(_QWORD *)v9 = &unk_1E816A800;
          v11 = "template parameter object for ";
          v12 = "";
          goto LABEL_107;
        case 'B':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
          goto LABEL_70;
        case 'C':
          *a1 = v3 + 2;
          v65 = sub_1C54C2310((uint64_t)a1);
          if (!v65)
            goto LABEL_75;
          v66 = v65;
          v67 = sub_1C54C21F4((char **)a1, 1);
          if (v67 == v68)
            goto LABEL_75;
          v69 = *a1;
          if (*a1 == a1[1])
            goto LABEL_75;
          if (*v69 != 95)
            goto LABEL_75;
          *a1 = v69 + 1;
          v70 = sub_1C54C2310((uint64_t)a1);
          if (!v70)
            goto LABEL_75;
          v71 = v70;
          v10 = sub_1C54C413C((uint64_t)(a1 + 101), 32);
          *(_BYTE *)(v10 + 8) = 21;
          *(_WORD *)(v10 + 9) = *(_WORD *)(v10 + 9) & 0xF000 | 0x540;
          *(_QWORD *)v10 = &unk_1E816A858;
          *(_QWORD *)(v10 + 16) = v71;
          *(_QWORD *)(v10 + 24) = v66;
          goto LABEL_76;
        case 'H':
          *a1 = v3 + 2;
          v64 = sub_1C54C3774((uint64_t)a1, 0);
          v10 = 0;
          if (!v64)
            goto LABEL_76;
          v8 = v64;
          v9 = sub_1C54C413C((uint64_t)(a1 + 101), 40);
          v10 = v9;
          *(_BYTE *)(v9 + 8) = 20;
          *(_WORD *)(v9 + 9) = *(_WORD *)(v9 + 9) & 0xF000 | 0x540;
          *(_QWORD *)v9 = &unk_1E816A800;
          v11 = "thread-local initialization routine for ";
          v12 = "";
          break;
        case 'I':
          *a1 = v3 + 2;
          v72 = sub_1C54C2310((uint64_t)a1);
          if (!v72)
            goto LABEL_75;
          v8 = v72;
          v9 = sub_1C54C413C((uint64_t)(a1 + 101), 40);
          v10 = v9;
          *(_BYTE *)(v9 + 8) = 20;
          *(_WORD *)(v9 + 9) = *(_WORD *)(v9 + 9) & 0xF000 | 0x540;
          *(_QWORD *)v9 = &unk_1E816A800;
          v11 = "typeinfo for ";
          v12 = "";
          goto LABEL_107;
        default:
          switch(v3[1])
          {
            case 'S':
              *a1 = v3 + 2;
              v7 = sub_1C54C2310((uint64_t)a1);
              if (!v7)
                goto LABEL_75;
              v8 = v7;
              v9 = sub_1C54C413C((uint64_t)(a1 + 101), 40);
              v10 = v9;
              *(_BYTE *)(v9 + 8) = 20;
              *(_WORD *)(v9 + 9) = *(_WORD *)(v9 + 9) & 0xF000 | 0x540;
              *(_QWORD *)v9 = &unk_1E816A800;
              v11 = "typeinfo name for ";
              v12 = "";
              goto LABEL_107;
            case 'T':
              *a1 = v3 + 2;
              v73 = sub_1C54C2310((uint64_t)a1);
              if (!v73)
                goto LABEL_75;
              v8 = v73;
              v9 = sub_1C54C413C((uint64_t)(a1 + 101), 40);
              v10 = v9;
              *(_BYTE *)(v9 + 8) = 20;
              *(_WORD *)(v9 + 9) = *(_WORD *)(v9 + 9) & 0xF000 | 0x540;
              *(_QWORD *)v9 = &unk_1E816A800;
              v11 = "VTT for ";
              v12 = "";
              goto LABEL_107;
            case 'U':
              goto LABEL_70;
            case 'V':
              *a1 = v3 + 2;
              v74 = sub_1C54C2310((uint64_t)a1);
              if (!v74)
                goto LABEL_75;
              v8 = v74;
              v9 = sub_1C54C413C((uint64_t)(a1 + 101), 40);
              v10 = v9;
              *(_BYTE *)(v9 + 8) = 20;
              *(_WORD *)(v9 + 9) = *(_WORD *)(v9 + 9) & 0xF000 | 0x540;
              *(_QWORD *)v9 = &unk_1E816A800;
              v11 = "vtable for ";
              v12 = "";
              goto LABEL_107;
            case 'W':
              *a1 = v3 + 2;
              v10 = 0;
              v83 = sub_1C54C3774((uint64_t)a1, 0);
              if (v83)
                v10 = sub_1C54C2290((uint64_t)a1, "thread-local wrapper routine for ", &v83);
              goto LABEL_76;
            default:
              if (v3[1] != 99)
                goto LABEL_70;
              *a1 = v3 + 2;
              if ((sub_1C54C3E9C((uint64_t)a1) & 1) != 0)
                goto LABEL_75;
              if ((sub_1C54C3E9C((uint64_t)a1) & 1) != 0)
                goto LABEL_75;
              v50 = sub_1C54C1690(a1);
              if (!v50)
                goto LABEL_75;
              v8 = v50;
              v9 = sub_1C54C413C((uint64_t)(a1 + 101), 40);
              v10 = v9;
              *(_BYTE *)(v9 + 8) = 20;
              *(_WORD *)(v9 + 9) = *(_WORD *)(v9 + 9) & 0xF000 | 0x540;
              *(_QWORD *)v9 = &unk_1E816A800;
              v11 = "covariant return thunk to ";
              v12 = "";
              break;
          }
          goto LABEL_107;
      }
      goto LABEL_107;
    }
LABEL_70:
    v51 = v3 + 1;
    *a1 = v51;
    v52 = v4 != v51 && *v51 == 118;
    if ((sub_1C54C3E9C((uint64_t)a1) & 1) != 0 || (v53 = sub_1C54C1690(a1)) == 0)
    {
LABEL_75:
      v10 = 0;
      goto LABEL_76;
    }
    v55 = v53;
    v56 = sub_1C54C413C((uint64_t)(a1 + 101), 40);
    v10 = v56;
    *(_BYTE *)(v56 + 8) = 20;
    *(_WORD *)(v56 + 9) = *(_WORD *)(v56 + 9) & 0xF000 | 0x540;
    *(_QWORD *)v56 = &unk_1E816A800;
    if (v52)
    {
      v57 = "virtual thunk to ";
      v58 = "";
    }
    else
    {
      v57 = "non-virtual thunk to ";
      v58 = "";
    }
    *(_QWORD *)(v56 + 16) = v57;
    *(_QWORD *)(v56 + 24) = v58;
    *(_QWORD *)(v56 + 32) = v55;
  }
LABEL_76:
  sub_1C6253D78(v86 + 664, (uint64_t)v87);
  sub_1C6253E58(v86 + 576, (uint64_t)v89);
  if (v89[0] != v90)
    free(v89[0]);
  if (v87[0] != v88)
    free(v87[0]);
  return v10;
}

char *sub_1C54C21F4(char **a1, int a2)
{
  char *result;
  char *v5;
  char *v6;
  uint64_t v7;

  result = *a1;
  v5 = a1[1];
  v6 = result;
  if (a2)
  {
    if (result == v5)
      return 0;
    v6 = result;
    if (*result == 110)
    {
      v6 = result + 1;
      *a1 = result + 1;
    }
  }
  if (v5 == v6)
    return 0;
  if (*v6 < 0)
    return 0;
  v7 = MEMORY[0x1E0C80978];
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *v6 + 60) & 0x400) == 0)
    return 0;
  do
  {
    if (*v6 < 0)
      break;
    if ((*(_DWORD *)(v7 + 4 * *v6 + 60) & 0x400) == 0)
      break;
    *a1 = ++v6;
  }
  while (v6 != v5);
  return result;
}

uint64_t sub_1C54C2290(uint64_t a1, const char *a2, uint64_t *a3)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  v5 = sub_1C54C413C(a1 + 808, 40);
  v6 = strlen(a2);
  v7 = *a3;
  *(_BYTE *)(v5 + 8) = 20;
  *(_WORD *)(v5 + 9) = *(_WORD *)(v5 + 9) & 0xF000 | 0x540;
  *(_QWORD *)v5 = &unk_1E816A800;
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = &a2[v6];
  *(_QWORD *)(v5 + 32) = v7;
  return v5;
}

uint64_t sub_1C54C2310(uint64_t a1)
{
  char *v2;
  char *v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  _BOOL4 v7;
  unint64_t v8;
  _BOOL4 v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  int v47;
  uint64_t *v49;
  uint64_t v50;
  const char *v51;
  char *v52;
  unsigned int v54;
  uint64_t v55;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char *v68;
  char *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  unsigned int v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 v98;
  unint64_t v99;

  v2 = *(char **)a1;
  v3 = *(char **)(a1 + 8);
  v4 = (unint64_t)&v3[-*(_QWORD *)a1];
  if (v3 != *(char **)a1)
  {
    v5 = *v2;
    switch(*v2)
    {
      case 'A':
        if (v5 != 65)
          return 0;
        *(_QWORD *)a1 = v2 + 1;
        if (v3 == v2 + 1)
        {
          if ((*(_BYTE *)(MEMORY[0x1E0C80978] + 61) & 4) == 0)
            goto LABEL_108;
        }
        else
        {
          if (v2[1] < 0)
            goto LABEL_108;
          v15 = v2[1];
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v15 + 60) & 0x400) == 0)
          {
            if ((_DWORD)v15 == 95)
            {
              v16 = 0;
              v17 = v2 + 2;
              goto LABEL_114;
            }
LABEL_108:
            v57 = sub_1C54C52C0(a1);
            if (!v57)
              return 0;
LABEL_111:
            v61 = *(char **)a1;
            if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8) || *v61 != 95)
              return 0;
            v16 = (char *)v57;
            v17 = v61 + 1;
LABEL_114:
            *(_QWORD *)a1 = v17;
            v62 = sub_1C54C2310(a1);
            if (!v62)
              return 0;
            v27 = (char *)v62;
            v29 = sub_1C54C413C(a1 + 808, 32);
            v21 = v29;
            *(_BYTE *)(v29 + 8) = 14;
            *(_WORD *)(v29 + 9) = *(_WORD *)(v29 + 9) & 0xF000 | 0x400;
            v31 = (char *)&unk_1E816C4E8;
LABEL_106:
            *(_QWORD *)v29 = v31 + 16;
            *(_QWORD *)(v29 + 16) = v27;
            *(_QWORD *)(v29 + 24) = v16;
            goto LABEL_57;
          }
        }
        v58 = sub_1C54C21F4((char **)a1, 0);
        v60 = v59;
        v57 = sub_1C54C413C(a1 + 808, 32);
        *(_BYTE *)(v57 + 8) = 7;
        *(_WORD *)(v57 + 9) = *(_WORD *)(v57 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v57 = &unk_1E816A8B0;
        *(_QWORD *)(v57 + 16) = v58;
        *(_QWORD *)(v57 + 24) = v60;
        goto LABEL_111;
      case 'C':
        *(_QWORD *)a1 = v2 + 1;
        v18 = sub_1C54C2310(a1);
        if (!v18)
          return 0;
        v19 = v18;
        v20 = sub_1C54C413C(a1 + 808, 40);
        v21 = v20;
        *(_BYTE *)(v20 + 8) = 5;
        *(_WORD *)(v20 + 9) = *(_WORD *)(v20 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v20 = &unk_1E816C6B0;
        *(_QWORD *)(v20 + 16) = v19;
        *(_QWORD *)(v20 + 24) = " complex";
        v22 = "";
        goto LABEL_29;
      case 'D':
        if (v4 < 2)
          return 0;
        break;
      case 'F':
        goto LABEL_102;
      case 'G':
        *(_QWORD *)a1 = v2 + 1;
        v24 = sub_1C54C2310(a1);
        if (!v24)
          return 0;
        v25 = v24;
        v20 = sub_1C54C413C(a1 + 808, 40);
        v21 = v20;
        *(_BYTE *)(v20 + 8) = 5;
        *(_WORD *)(v20 + 9) = *(_WORD *)(v20 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v20 = &unk_1E816C6B0;
        *(_QWORD *)(v20 + 16) = v25;
        *(_QWORD *)(v20 + 24) = " imaginary";
        v22 = "";
LABEL_29:
        *(_QWORD *)(v20 + 32) = v22;
        goto LABEL_57;
      case 'K':
      case 'V':
      case 'r':
        v6 = v5 == 114;
        v7 = v4 > v6 && v2[v6] == 86;
        v8 = v7 + (unint64_t)v6;
        v9 = v4 > v8 && v2[v8] == 75;
        v10 = v8 + v9;
        if (v4 <= v10)
          goto LABEL_15;
        v11 = v2[v10];
        if (v11 != 70)
        {
          v12 = v10 + 1;
          v13 = v11 == 68 && v4 > v12;
          if (!v13)
            goto LABEL_15;
          v54 = v2[v12] - 79;
          v13 = v54 > 0x29;
          v55 = (1 << v54) & 0x30100000001;
          if (v13 || v55 == 0)
            goto LABEL_15;
        }
LABEL_102:
        v14 = sub_1C54C8978(a1);
        goto LABEL_56;
      case 'M':
        if (v5 != 77)
          return 0;
        *(_QWORD *)a1 = v2 + 1;
        v26 = sub_1C54C2310(a1);
        if (!v26)
          return 0;
        v27 = (char *)v26;
        v28 = sub_1C54C2310(a1);
        if (!v28)
          return 0;
        v16 = (char *)v28;
        v29 = sub_1C54C413C(a1 + 808, 32);
        v21 = v29;
        v30 = *(_WORD *)(v16 + 9);
        *(_BYTE *)(v29 + 8) = 13;
        *(_WORD *)(v29 + 9) = v30 & 0xC0 | 0x500 | *(_WORD *)(v29 + 9) & 0xF000;
        v31 = (char *)&unk_1E816C540;
        goto LABEL_106;
      case 'O':
        *(_QWORD *)a1 = v2 + 1;
        v32 = sub_1C54C2310(a1);
        if (!v32)
          return 0;
        v33 = v32;
        v34 = sub_1C54C413C(a1 + 808, 32);
        v21 = v34;
        v35 = *(_WORD *)(v33 + 9);
        *(_BYTE *)(v34 + 8) = 12;
        *(_WORD *)(v34 + 9) = v35 & 0xC0 | 0x500 | *(_WORD *)(v34 + 9) & 0xF000;
        *(_QWORD *)v34 = &unk_1E816C658;
        *(_QWORD *)(v34 + 16) = v33;
        *(_DWORD *)(v34 + 24) = 1;
        goto LABEL_41;
      case 'P':
        *(_QWORD *)a1 = v2 + 1;
        v36 = sub_1C54C2310(a1);
        if (!v36)
          return 0;
        v37 = v36;
        v38 = sub_1C54C413C(a1 + 808, 24);
        v21 = v38;
        v39 = *(_WORD *)(v37 + 9);
        *(_BYTE *)(v38 + 8) = 11;
        *(_WORD *)(v38 + 9) = v39 & 0xC0 | 0x500 | *(_WORD *)(v38 + 9) & 0xF000;
        v40 = (char *)&unk_1E816C5F0;
LABEL_38:
        *(_QWORD *)v38 = v40 + 16;
        *(_QWORD *)(v38 + 16) = v37;
        goto LABEL_57;
      case 'R':
        *(_QWORD *)a1 = v2 + 1;
        v41 = sub_1C54C2310(a1);
        if (!v41)
          return 0;
        v42 = v41;
        v34 = sub_1C54C413C(a1 + 808, 32);
        v21 = v34;
        v43 = *(_WORD *)(v42 + 9);
        *(_BYTE *)(v34 + 8) = 12;
        *(_WORD *)(v34 + 9) = v43 & 0xC0 | 0x500 | *(_WORD *)(v34 + 9) & 0xF000;
        *(_QWORD *)v34 = &unk_1E816C658;
        *(_QWORD *)(v34 + 16) = v42;
        *(_DWORD *)(v34 + 24) = 0;
LABEL_41:
        *(_BYTE *)(v34 + 28) = 0;
        goto LABEL_57;
      case 'S':
        if (v4 >= 2 && v2[1] == 116)
          goto LABEL_55;
        v98 = 0;
        v44 = sub_1C54C4324(a1, 0, &v98);
        if (!v44)
          return 0;
        v21 = v44;
        if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
        {
          v45 = v98;
        }
        else
        {
          v45 = v98;
          if (**(_BYTE **)a1 == 73)
          {
            if (v98)
            {
              if (!*(_BYTE *)(a1 + 776))
                return v21;
            }
            else
            {
              v70 = *(uint64_t **)(a1 + 304);
              if (v70 == *(uint64_t **)(a1 + 312))
              {
                sub_1C625449C(a1 + 296, ((uint64_t)v70 - *(_QWORD *)(a1 + 296)) >> 2);
                v70 = *(uint64_t **)(a1 + 304);
              }
              *(_QWORD *)(a1 + 304) = v70 + 1;
              *v70 = v21;
            }
LABEL_129:
            v71 = sub_1C54C444C(a1, 0);
            if (v71)
            {
              v72 = v71;
              v73 = sub_1C54C413C(a1 + 808, 32);
              *(_BYTE *)(v73 + 8) = 41;
              *(_WORD *)(v73 + 9) = *(_WORD *)(v73 + 9) & 0xF000 | 0x540;
              *(_QWORD *)v73 = &unk_1E816BFD0;
              *(_QWORD *)(v73 + 16) = v21;
              *(_QWORD *)(v73 + 24) = v72;
              v21 = v73;
              goto LABEL_57;
            }
            return 0;
          }
        }
        if (v45)
          return v21;
        goto LABEL_57;
      case 'T':
        if (v4 >= 2)
        {
          v46 = v2[1] - 101;
          v13 = v46 > 0x10;
          v47 = (1 << v46) & 0x14001;
          if (!v13 && v47 != 0)
            goto LABEL_55;
        }
        v21 = sub_1C54C47F4(a1);
        if (!v21)
          return v21;
        if (*(_BYTE *)(a1 + 776) && *(_QWORD *)(a1 + 8) != *(_QWORD *)a1 && **(_BYTE **)a1 == 73)
          goto LABEL_129;
        goto LABEL_57;
      case 'U':
LABEL_15:
        v14 = sub_1C54C8E04(a1);
        goto LABEL_56;
      case 'a':
        *(_QWORD *)a1 = v2 + 1;
        v50 = sub_1C54C413C(a1 + 808, 32);
        v21 = v50;
        *(_BYTE *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v50 = &unk_1E816A8B0;
        v51 = "signed char";
        goto LABEL_66;
      case 'b':
        *(_QWORD *)a1 = v2 + 1;
        v50 = sub_1C54C413C(a1 + 808, 32);
        v21 = v50;
        *(_BYTE *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v50 = &unk_1E816A8B0;
        v51 = "BOOL";
        goto LABEL_85;
      case 'c':
        *(_QWORD *)a1 = v2 + 1;
        v50 = sub_1C54C413C(a1 + 808, 32);
        v21 = v50;
        *(_BYTE *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v50 = &unk_1E816A8B0;
        v51 = "char";
        goto LABEL_85;
      case 'd':
        *(_QWORD *)a1 = v2 + 1;
        v50 = sub_1C54C413C(a1 + 808, 32);
        v21 = v50;
        *(_BYTE *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v50 = &unk_1E816A8B0;
        v51 = "double";
LABEL_64:
        v52 = (char *)(v51 + 6);
        goto LABEL_91;
      case 'e':
        *(_QWORD *)a1 = v2 + 1;
        v50 = sub_1C54C413C(a1 + 808, 32);
        v21 = v50;
        *(_BYTE *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v50 = &unk_1E816A8B0;
        v51 = "long double";
LABEL_66:
        v52 = (char *)(v51 + 11);
        goto LABEL_91;
      case 'f':
        *(_QWORD *)a1 = v2 + 1;
        v50 = sub_1C54C413C(a1 + 808, 32);
        v21 = v50;
        *(_BYTE *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v50 = &unk_1E816A8B0;
        v51 = "float";
        goto LABEL_79;
      case 'g':
        *(_QWORD *)a1 = v2 + 1;
        v50 = sub_1C54C413C(a1 + 808, 32);
        v21 = v50;
        *(_BYTE *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v50 = &unk_1E816A8B0;
        v51 = "__float128";
LABEL_69:
        v52 = (char *)(v51 + 10);
        goto LABEL_91;
      case 'h':
        *(_QWORD *)a1 = v2 + 1;
        v50 = sub_1C54C413C(a1 + 808, 32);
        v21 = v50;
        *(_BYTE *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v50 = &unk_1E816A8B0;
        v51 = "unsigned char";
        goto LABEL_75;
      case 'i':
        *(_QWORD *)a1 = v2 + 1;
        v50 = sub_1C54C413C(a1 + 808, 32);
        v21 = v50;
        *(_BYTE *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v50 = &unk_1E816A8B0;
        v51 = "int";
        goto LABEL_90;
      case 'j':
        *(_QWORD *)a1 = v2 + 1;
        v50 = sub_1C54C413C(a1 + 808, 32);
        v21 = v50;
        *(_BYTE *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v50 = &unk_1E816A8B0;
        v51 = "unsigned int";
        v52 = "";
        goto LABEL_91;
      case 'l':
        *(_QWORD *)a1 = v2 + 1;
        v50 = sub_1C54C413C(a1 + 808, 32);
        v21 = v50;
        *(_BYTE *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v50 = &unk_1E816A8B0;
        v51 = "long";
        goto LABEL_85;
      case 'm':
        *(_QWORD *)a1 = v2 + 1;
        v50 = sub_1C54C413C(a1 + 808, 32);
        v21 = v50;
        *(_BYTE *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v50 = &unk_1E816A8B0;
        v51 = "unsigned long";
LABEL_75:
        v52 = (char *)(v51 + 13);
        goto LABEL_91;
      case 'n':
        *(_QWORD *)a1 = v2 + 1;
        v50 = sub_1C54C413C(a1 + 808, 32);
        v21 = v50;
        *(_BYTE *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v50 = &unk_1E816A8B0;
        v51 = "__int128";
        v52 = "";
        goto LABEL_91;
      case 'o':
        *(_QWORD *)a1 = v2 + 1;
        v50 = sub_1C54C413C(a1 + 808, 32);
        v21 = v50;
        *(_BYTE *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v50 = &unk_1E816A8B0;
        v51 = "unsigned __int128";
        v52 = "";
        goto LABEL_91;
      case 's':
        *(_QWORD *)a1 = v2 + 1;
        v50 = sub_1C54C413C(a1 + 808, 32);
        v21 = v50;
        *(_BYTE *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v50 = &unk_1E816A8B0;
        v51 = "short";
LABEL_79:
        v52 = (char *)(v51 + 5);
        goto LABEL_91;
      case 't':
        *(_QWORD *)a1 = v2 + 1;
        v50 = sub_1C54C413C(a1 + 808, 32);
        v21 = v50;
        *(_BYTE *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v50 = &unk_1E816A8B0;
        v51 = "unsigned short";
        v52 = "";
        goto LABEL_91;
      case 'u':
        *(_QWORD *)a1 = v2 + 1;
        v99 = 0;
        v16 = 0;
        v27 = 0;
        if ((sub_1C54C42B4((unsigned __int8 **)a1, (uint64_t *)&v99) & 1) == 0)
        {
          v27 = *(char **)a1;
          if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 >= v99)
          {
            v16 = &v27[v99];
            *(_QWORD *)a1 = &v27[v99];
          }
          else
          {
            v16 = 0;
            v27 = 0;
          }
        }
        if (v27 == v16)
          return 0;
        v29 = sub_1C54C413C(a1 + 808, 32);
        v21 = v29;
        *(_BYTE *)(v29 + 8) = 7;
        *(_WORD *)(v29 + 9) = *(_WORD *)(v29 + 9) & 0xF000 | 0x540;
        v31 = (char *)&unk_1E816A8A0;
        goto LABEL_106;
      case 'v':
        *(_QWORD *)a1 = v2 + 1;
        v50 = sub_1C54C413C(a1 + 808, 32);
        v21 = v50;
        *(_BYTE *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v50 = &unk_1E816A8B0;
        v51 = "void";
LABEL_85:
        v52 = (char *)(v51 + 4);
        goto LABEL_91;
      case 'w':
        *(_QWORD *)a1 = v2 + 1;
        v50 = sub_1C54C413C(a1 + 808, 32);
        v21 = v50;
        *(_BYTE *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v50 = &unk_1E816A8B0;
        v51 = "wchar_t";
        v52 = "";
        goto LABEL_91;
      case 'x':
        *(_QWORD *)a1 = v2 + 1;
        v50 = sub_1C54C413C(a1 + 808, 32);
        v21 = v50;
        *(_BYTE *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v50 = &unk_1E816A8B0;
        v51 = "long long";
        v52 = "";
        goto LABEL_91;
      case 'y':
        *(_QWORD *)a1 = v2 + 1;
        v50 = sub_1C54C413C(a1 + 808, 32);
        v21 = v50;
        *(_BYTE *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v50 = &unk_1E816A8B0;
        v51 = "unsigned long long";
        v52 = "";
        goto LABEL_91;
      case 'z':
        *(_QWORD *)a1 = v2 + 1;
        v50 = sub_1C54C413C(a1 + 808, 32);
        v21 = v50;
        *(_BYTE *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v50 = &unk_1E816A8B0;
        v51 = "...";
LABEL_90:
        v52 = (char *)(v51 + 3);
LABEL_91:
        *(_QWORD *)(v50 + 16) = v51;
        *(_QWORD *)(v50 + 24) = v52;
        return v21;
      default:
        goto LABEL_55;
    }
    v21 = 0;
    v23 = v2[1];
    switch(v2[1])
    {
      case 'O':
      case 'o':
      case 'w':
      case 'x':
        goto LABEL_102;
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
      case '[':
      case '\\':
      case ']':
      case '^':
      case '_':
      case 'b':
      case 'g':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'q':
      case 'r':
        return v21;
      case 'T':
      case 't':
        v14 = sub_1C54C4A6C(a1);
        goto LABEL_56;
      case 'U':
        goto LABEL_131;
      case 'a':
        *(_QWORD *)a1 = v2 + 2;
        v76 = "auto";
        return sub_1C54C520C(a1, v76);
      case 'c':
        *(_QWORD *)a1 = v2 + 2;
        v76 = "decltype(auto)";
        return sub_1C54C520C(a1, v76);
      case 'd':
        *(_QWORD *)a1 = v2 + 2;
        v76 = "decimal64";
        return sub_1C54C520C(a1, v76);
      case 'e':
        *(_QWORD *)a1 = v2 + 2;
        v50 = sub_1C54C413C(a1 + 808, 32);
        v21 = v50;
        *(_BYTE *)(v50 + 8) = 7;
        *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v50 = &unk_1E816A8B0;
        v51 = "decimal128";
        goto LABEL_69;
      case 'f':
        *(_QWORD *)a1 = v2 + 2;
        v76 = "decimal32";
        return sub_1C54C520C(a1, v76);
      case 'h':
        *(_QWORD *)a1 = v2 + 2;
        v76 = "half";
        return sub_1C54C520C(a1, v76);
      case 'i':
        *(_QWORD *)a1 = v2 + 2;
        v76 = "char32_t";
        return sub_1C54C520C(a1, v76);
      case 'n':
        *(_QWORD *)a1 = v2 + 2;
        v76 = "std::nullptr_t";
        return sub_1C54C520C(a1, v76);
      case 'p':
        *(_QWORD *)a1 = v2 + 2;
        v77 = sub_1C54C2310(a1);
        if (!v77)
          return 0;
        v37 = v77;
        v38 = sub_1C54C413C(a1 + 808, 24);
        v21 = v38;
        *(_BYTE *)(v38 + 8) = 38;
        *(_WORD *)(v38 + 9) = *(_WORD *)(v38 + 9) & 0xF000 | 0x540;
        v40 = (char *)&unk_1E816B780;
        goto LABEL_38;
      case 's':
        *(_QWORD *)a1 = v2 + 2;
        v76 = "char16_t";
        return sub_1C54C520C(a1, v76);
      case 'u':
        *(_QWORD *)a1 = v2 + 2;
        v76 = "char8_t";
        return sub_1C54C520C(a1, v76);
      case 'v':
        if (strncmp("Dv", v2, 2uLL))
          return 0;
        *(_QWORD *)a1 = v2 + 2;
        if (v3 == v2 + 2 || v2[2] < 49)
          goto LABEL_174;
        v78 = v2[2];
        if (v78 <= 0x39)
        {
          v79 = sub_1C54C21F4((char **)a1, 0);
          v81 = v80;
          v82 = sub_1C54C413C(a1 + 808, 32);
          *(_BYTE *)(v82 + 8) = 7;
          *(_WORD *)(v82 + 9) = *(_WORD *)(v82 + 9) & 0xF000 | 0x540;
          *(_QWORD *)v82 = &unk_1E816A8B0;
          *(_QWORD *)(v82 + 16) = v79;
          *(_QWORD *)(v82 + 24) = v81;
          v83 = *(char **)a1;
          v84 = *(char **)(a1 + 8);
          if (*(char **)a1 != v84 && *v83 == 95)
          {
            v37 = v82;
            *(_QWORD *)a1 = v83 + 1;
            if (v83 + 1 != v84 && v83[1] == 112)
            {
              *(_QWORD *)a1 = v83 + 2;
              v38 = sub_1C54C413C(a1 + 808, 24);
              v21 = v38;
              *(_BYTE *)(v38 + 8) = 28;
              *(_WORD *)(v38 + 9) = *(_WORD *)(v38 + 9) & 0xF000 | 0x540;
              v40 = (char *)&unk_1E816C438;
              goto LABEL_38;
            }
            v97 = sub_1C54C2310(a1);
            if (v97)
            {
              v95 = v97;
              v96 = a1 + 808;
              goto LABEL_179;
            }
          }
          return 0;
        }
        if (v78 != 95)
        {
LABEL_174:
          v92 = sub_1C54C52C0(a1);
          if (v92)
          {
            v93 = *(char **)a1;
            if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) && *v93 == 95)
            {
              v37 = v92;
              *(_QWORD *)a1 = v93 + 1;
              v94 = sub_1C54C2310(a1);
              if (v94)
              {
                v95 = v94;
                v96 = a1 + 808;
LABEL_179:
                v21 = sub_1C54C413C(v96, 32);
                *(_BYTE *)(v21 + 8) = 27;
                *(_WORD *)(v21 + 9) = *(_WORD *)(v21 + 9) & 0xF000 | 0x540;
                *(_QWORD *)v21 = &unk_1E816C4A0;
                *(_QWORD *)(v21 + 16) = v95;
                *(_QWORD *)(v21 + 24) = v37;
                goto LABEL_57;
              }
            }
          }
          return 0;
        }
        *(_QWORD *)a1 = v2 + 3;
        v90 = sub_1C54C2310(a1);
        if (!v90)
          return 0;
        v91 = v90;
        v21 = sub_1C54C413C(a1 + 808, 32);
        *(_BYTE *)(v21 + 8) = 27;
        *(_WORD *)(v21 + 9) = *(_WORD *)(v21 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v21 = &unk_1E816C4A0;
        *(_QWORD *)(v21 + 16) = v91;
        *(_QWORD *)(v21 + 24) = 0;
        goto LABEL_57;
      default:
        if (v23 != 66)
        {
          if (v23 != 70)
            return v21;
          *(_QWORD *)a1 = v2 + 2;
          v63 = sub_1C54C21F4((char **)a1, 0);
          v65 = v64;
          v66 = sub_1C54C413C(a1 + 808, 32);
          *(_BYTE *)(v66 + 8) = 7;
          *(_WORD *)(v66 + 9) = *(_WORD *)(v66 + 9) & 0xF000 | 0x540;
          *(_QWORD *)v66 = &unk_1E816A8B0;
          *(_QWORD *)(v66 + 16) = v63;
          *(_QWORD *)(v66 + 24) = v65;
          if (v65 - (_QWORD)v63 == 2)
          {
            v67 = strncmp(v63, "16", 2uLL);
            v68 = *(char **)a1;
            v69 = *(char **)(a1 + 8);
            if (!v67)
            {
              if (v68 == v69)
                return 0;
              if (*v68 == 98)
              {
                *(_QWORD *)a1 = v68 + 1;
                v50 = sub_1C54C413C(a1 + 808, 32);
                v21 = v50;
                *(_BYTE *)(v50 + 8) = 7;
                *(_WORD *)(v50 + 9) = *(_WORD *)(v50 + 9) & 0xF000 | 0x540;
                *(_QWORD *)v50 = &unk_1E816A8B0;
                v51 = "__bf16";
                goto LABEL_64;
              }
            }
          }
          else
          {
            v68 = *(char **)a1;
            v69 = *(char **)(a1 + 8);
          }
          if (v68 != v69 && *v68 == 95)
          {
            *(_QWORD *)a1 = v68 + 1;
            v21 = sub_1C54C413C(a1 + 808, 24);
            *(_BYTE *)(v21 + 8) = 29;
            *(_WORD *)(v21 + 9) = *(_WORD *)(v21 + 9) & 0xF000 | 0x540;
            *(_QWORD *)v21 = &unk_1E816C398;
            *(_QWORD *)(v21 + 16) = v66;
            return v21;
          }
          return 0;
        }
LABEL_131:
        v74 = v2[1] == 66;
        *(_QWORD *)a1 = v2 + 2;
        if (v3 == v2 + 2)
        {
          v75 = 0;
        }
        else
        {
          if (v2[2] < 0)
            goto LABEL_161;
          v75 = v2[2];
        }
        if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v75 + 60) & 0x400) != 0)
        {
          v86 = sub_1C54C21F4((char **)a1, 0);
          v88 = v87;
          v85 = sub_1C54C413C(a1 + 808, 32);
          *(_BYTE *)(v85 + 8) = 7;
          *(_WORD *)(v85 + 9) = *(_WORD *)(v85 + 9) & 0xF000 | 0x540;
          *(_QWORD *)v85 = &unk_1E816A8B0;
          *(_QWORD *)(v85 + 16) = v86;
          *(_QWORD *)(v85 + 24) = v88;
          goto LABEL_164;
        }
LABEL_161:
        v85 = sub_1C54C52C0(a1);
        if (!v85)
          return 0;
LABEL_164:
        v89 = *(char **)a1;
        if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) && *v89 == 95)
        {
          *(_QWORD *)a1 = v89 + 1;
          v21 = sub_1C54C413C(a1 + 808, 32);
          *(_BYTE *)(v21 + 8) = 30;
          *(_WORD *)(v21 + 9) = *(_WORD *)(v21 + 9) & 0xF000 | 0x540;
          *(_QWORD *)v21 = &unk_1E816C3F0;
          *(_QWORD *)(v21 + 16) = v85;
          *(_BYTE *)(v21 + 24) = v74;
          return v21;
        }
        return 0;
    }
  }
LABEL_55:
  v14 = sub_1C54C9074((const char **)a1);
LABEL_56:
  v21 = v14;
  if (v14)
  {
LABEL_57:
    v49 = *(uint64_t **)(a1 + 304);
    if (v49 == *(uint64_t **)(a1 + 312))
    {
      sub_1C625449C(a1 + 296, ((uint64_t)v49 - *(_QWORD *)(a1 + 296)) >> 2);
      v49 = *(uint64_t **)(a1 + 304);
    }
    *(_QWORD *)(a1 + 304) = v49 + 1;
    *v49 = v21;
  }
  return v21;
}

uint64_t sub_1C54C3774(uint64_t a1, uint64_t a2)
{
  char *v4;
  int v5;
  int v6;
  char *v7;
  char *v8;
  int v9;
  char v10;
  uint64_t i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char v38;

  v4 = *(char **)a1;
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
    goto LABEL_11;
  v5 = *v4;
  if (v5 == 90)
  {
    *(_QWORD *)a1 = v4 + 1;
    v16 = sub_1C54C1690(a1);
    if (!v16)
      return 0;
    v19 = *(char **)a1;
    v18 = *(const char **)(a1 + 8);
    if (*(const char **)a1 == v18 || *v19 != 69)
      return 0;
    v20 = v16;
    *(_QWORD *)a1 = v19 + 1;
    if (v19 + 1 == v18)
      goto LABEL_30;
    v21 = v19[1];
    if (v21 == 100)
    {
      *(_QWORD *)a1 = v19 + 2;
      sub_1C54C21F4((char **)a1, 1);
      v35 = *(char **)a1;
      if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
        return 0;
      if (*v35 != 95)
        return 0;
      *(_QWORD *)a1 = v35 + 1;
      v36 = sub_1C54C3774(a1, a2);
      if (!v36)
        return 0;
    }
    else
    {
      if (v21 != 115)
      {
LABEL_30:
        v22 = sub_1C54C3774(a1, a2);
        if (!v22)
          return 0;
        v24 = v22;
        *(_QWORD *)a1 = llvm::itanium_demangle::parse_discriminator(*(const char **)a1, *(const char **)(a1 + 8), v23);
LABEL_85:
        i = sub_1C54C413C(a1 + 808, 32);
        *(_BYTE *)(i + 8) = 24;
        *(_WORD *)(i + 9) = *(_WORD *)(i + 9) & 0xF000 | 0x540;
        *(_QWORD *)i = &unk_1E816BEC8;
        *(_QWORD *)(i + 16) = v20;
        *(_QWORD *)(i + 24) = v24;
        return i;
      }
      *(_QWORD *)a1 = v19 + 2;
      *(_QWORD *)a1 = llvm::itanium_demangle::parse_discriminator(v19 + 2, v18, v17);
      v36 = sub_1C54C520C(a1, "string literal");
    }
    v24 = v36;
    goto LABEL_85;
  }
  if (v5 == 78)
  {
    *(_QWORD *)a1 = v4 + 1;
    v6 = sub_1C54C4768(a1);
    if (a2)
      *(_DWORD *)(a2 + 4) = v6;
    v7 = *(char **)a1;
    v8 = *(char **)(a1 + 8);
    if (*(char **)a1 == v8)
      goto LABEL_32;
    v9 = *v7;
    if (v9 == 82)
    {
      *(_QWORD *)a1 = ++v7;
      if (a2)
      {
        v10 = 1;
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (v9 != 79)
    {
LABEL_32:
      if (a2)
      {
        v10 = 0;
        goto LABEL_36;
      }
    }
    else
    {
      *(_QWORD *)a1 = ++v7;
      if (a2)
      {
        v10 = 2;
LABEL_36:
        *(_BYTE *)(a2 + 8) = v10;
      }
    }
LABEL_37:
    for (i = 0; ; i = v25)
    {
      while (1)
      {
        if (v7 != v8 && *v7 == 69)
        {
          *(_QWORD *)a1 = v7 + 1;
          if (i)
          {
            v34 = *(_QWORD *)(a1 + 304);
            if (*(_QWORD *)(a1 + 296) != v34)
            {
              *(_QWORD *)(a1 + 304) = v34 - 8;
              return i;
            }
            return 0;
          }
          return i;
        }
        if (a2)
          *(_BYTE *)(a2 + 1) = 0;
        if (v7 == v8)
          goto LABEL_60;
        v25 = 0;
        v26 = *v7;
        if (v26 > 0x52)
          break;
        if (v26 == 68)
        {
          if ((unint64_t)(v8 - v7) >= 2 && (v7[1] | 0x20) == 0x74)
          {
            if (i)
              return 0;
            v30 = sub_1C54C4A6C(a1);
LABEL_62:
            i = v30;
            if (!v30)
              return i;
            goto LABEL_63;
          }
LABEL_60:
          v25 = 0;
          goto LABEL_61;
        }
        if (v26 != 73)
          goto LABEL_61;
        if (!i)
          return i;
        v27 = sub_1C54C444C(a1, a2 != 0);
        if (!v27 || *(_BYTE *)(i + 8) == 41)
          return 0;
        v28 = v27;
        if (a2)
          *(_BYTE *)(a2 + 1) = 1;
        v29 = sub_1C54C413C(a1 + 808, 32);
        *(_BYTE *)(v29 + 8) = 41;
        *(_WORD *)(v29 + 9) = *(_WORD *)(v29 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v29 = &unk_1E816BFD0;
        *(_QWORD *)(v29 + 16) = i;
        *(_QWORD *)(v29 + 24) = v28;
        i = v29;
LABEL_63:
        v31 = *(uint64_t **)(a1 + 304);
        if (v31 == *(uint64_t **)(a1 + 312))
        {
          sub_1C625449C(a1 + 296, ((uint64_t)v31 - *(_QWORD *)(a1 + 296)) >> 2);
          v31 = *(uint64_t **)(a1 + 304);
        }
        *(_QWORD *)(a1 + 304) = v31 + 1;
        *v31 = i;
        v7 = *(char **)a1;
        v32 = *(char **)(a1 + 8);
        v8 = *(char **)a1;
        if (*(char **)a1 != v32)
        {
          v8 = *(char **)(a1 + 8);
          if (*v7 == 77)
          {
            *(_QWORD *)a1 = ++v7;
            v8 = v32;
          }
        }
      }
      if (v26 != 83)
      {
        if (v26 == 84)
        {
          if (i)
            return 0;
          v30 = sub_1C54C47F4(a1);
          goto LABEL_62;
        }
LABEL_61:
        v30 = sub_1C54C4D40(a1, a2, i, v25);
        goto LABEL_62;
      }
      if ((unint64_t)(v8 - v7) >= 2 && v7[1] == 116)
      {
        *(_QWORD *)a1 = v7 + 2;
        v25 = sub_1C54C413C(a1 + 808, 32);
        *(_BYTE *)(v25 + 8) = 7;
        *(_WORD *)(v25 + 9) = *(_WORD *)(v25 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v25 = &unk_1E816A8B0;
        *(_QWORD *)(v25 + 16) = "std";
        *(_QWORD *)(v25 + 24) = "";
      }
      else
      {
        v33 = sub_1C54C4B50(a1);
        if (!v33)
          return 0;
        v25 = v33;
        if (*(_BYTE *)(v33 + 8) == 25)
          goto LABEL_61;
      }
      if (i)
        return 0;
      v7 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
    }
  }
LABEL_11:
  v38 = 0;
  i = sub_1C54C4324(a1, a2, &v38);
  if (i)
  {
    if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1 || **(_BYTE **)a1 != 73)
    {
      if (!v38)
        return i;
      return 0;
    }
    if (!v38)
    {
      v12 = *(uint64_t **)(a1 + 304);
      if (v12 == *(uint64_t **)(a1 + 312))
      {
        sub_1C625449C(a1 + 296, ((uint64_t)v12 - *(_QWORD *)(a1 + 296)) >> 2);
        v12 = *(uint64_t **)(a1 + 304);
      }
      *(_QWORD *)(a1 + 304) = v12 + 1;
      *v12 = i;
    }
    v13 = sub_1C54C444C(a1, a2 != 0);
    if (!v13)
      return 0;
    v14 = v13;
    if (a2)
      *(_BYTE *)(a2 + 1) = 1;
    v15 = sub_1C54C413C(a1 + 808, 32);
    *(_BYTE *)(v15 + 8) = 41;
    *(_WORD *)(v15 + 9) = *(_WORD *)(v15 + 9) & 0xF000 | 0x540;
    *(_QWORD *)v15 = &unk_1E816BFD0;
    *(_QWORD *)(v15 + 16) = i;
    *(_QWORD *)(v15 + 24) = v14;
    return v15;
  }
  return i;
}

uint64_t sub_1C54C3CA8(_QWORD *a1)
{
  char *v2;
  char *v3;
  int v4;
  uint64_t result;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  const void *v12;
  void *v13;
  void *v14;
  int64_t v15;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  if (v2 == (char *)*a1)
    return sub_1C54C2310(a1);
  v4 = *v3;
  switch(v4)
  {
    case 'J':
      v7 = v3 + 1;
      *a1 = v7;
      v8 = (uint64_t)(a1[3] - a1[2]) >> 3;
      while (v7 == v2 || *v7 != 69)
      {
        result = sub_1C54C3CA8(a1);
        if (!result)
          return result;
        v9 = result;
        v10 = (uint64_t *)a1[3];
        if (v10 == (uint64_t *)a1[4])
        {
          sub_1C625449C((uint64_t)(a1 + 2), ((uint64_t)v10 - a1[2]) >> 2);
          v10 = (uint64_t *)a1[3];
        }
        a1[3] = v10 + 1;
        *v10 = v9;
        v7 = (char *)*a1;
        v2 = (char *)a1[1];
      }
      *a1 = v7 + 1;
      v11 = a1[3];
      v12 = (const void *)(a1[2] + 8 * v8);
      v13 = (void *)sub_1C54C413C((uint64_t)(a1 + 101), (int)v11 - (int)v12);
      v14 = v13;
      v15 = v11 - (_QWORD)v12;
      if (v15)
        memmove(v13, v12, v15);
      a1[3] = a1[2] + 8 * v8;
      result = sub_1C54C413C((uint64_t)(a1 + 101), 32);
      *(_BYTE *)(result + 8) = 37;
      *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
      *(_QWORD *)result = &unk_1E816C028;
      *(_QWORD *)(result + 16) = v14;
      *(_QWORD *)(result + 24) = v15 >> 3;
      break;
    case 'L':
      if ((unint64_t)&v2[-*a1] < 2 || v3[1] != 90)
        return sub_1C54C6E3C((uint64_t)a1);
      *a1 = v3 + 2;
      result = sub_1C54C1690(a1);
      if (result)
        goto LABEL_6;
      break;
    case 'X':
      *a1 = v3 + 1;
      result = sub_1C54C52C0((uint64_t)a1);
      if (!result)
        return result;
LABEL_6:
      v6 = (char *)*a1;
      if (*a1 == a1[1] || *v6 != 69)
        return 0;
      *a1 = v6 + 1;
      return result;
    default:
      return sub_1C54C2310(a1);
  }
  return result;
}

uint64_t sub_1C54C3E9C(uint64_t a1)
{
  char *v1;
  int v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v9;
  char *v10;
  char *v11;

  v1 = *(char **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
    return 1;
  v3 = *v1;
  if (v3 != 118)
  {
    if (v3 == 104)
    {
      *(_QWORD *)a1 = v1 + 1;
      v4 = 1;
      goto LABEL_5;
    }
    return 1;
  }
  *(_QWORD *)a1 = v1 + 1;
  v4 = 1;
  v9 = sub_1C54C21F4((char **)a1, 1);
  if (v9 == v10)
    return v4;
  v11 = *(char **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8) || *v11 != 95)
    return v4;
  *(_QWORD *)a1 = v11 + 1;
LABEL_5:
  v5 = sub_1C54C21F4((char **)a1, 1);
  if (v5 != v6)
  {
    v7 = *(char **)a1;
    if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) && *v7 == 95)
    {
      v4 = 0;
      *(_QWORD *)a1 = v7 + 1;
    }
  }
  return v4;
}

uint64_t sub_1C54C3F6C(unsigned __int8 **a1, uint64_t *a2)
{
  char *v2;
  unsigned __int8 *v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v2 = (char *)a1[1];
  if (v2 == (char *)*a1 || (char)*v3 < 48)
    return 1;
  v4 = *v3;
  if (v4 >= 0x3A && v4 - 65 > 0x19)
    return 1;
  v6 = 0;
  do
  {
    if ((char)*v3 < 48)
      break;
    if (*v3 >= 0x3Au)
    {
      if (*v3 - 65 >= 0x1A)
        break;
      v7 = -55;
    }
    else
    {
      v7 = -48;
    }
    v6 = *v3++ + 36 * v6 + v7;
    *a1 = v3;
  }
  while (v3 != (unsigned __int8 *)v2);
  result = 0;
  *a2 = v6;
  return result;
}

uint64_t sub_1C54C4000(_QWORD *a1, uint64_t *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v2 = (_BYTE *)*a1;
  v3 = (_BYTE *)a1[1];
  if ((_BYTE *)*a1 != v3)
  {
    v6 = (uint64_t)(a1 + 101);
    v7 = (uint64_t)(a1 + 37);
    while (*v2 == 87)
    {
      *a1 = v2 + 1;
      if (v2 + 1 == v3 || v2[1] != 80)
      {
        v8 = 0;
      }
      else
      {
        *a1 = v2 + 2;
        v8 = 1;
      }
      v9 = sub_1C54C41E0((uint64_t)a1);
      if (!v9)
        return 1;
      v10 = v9;
      v11 = sub_1C54C413C(v6, 40);
      v12 = *a2;
      *(_BYTE *)(v11 + 8) = 25;
      *(_WORD *)(v11 + 9) = *(_WORD *)(v11 + 9) & 0xF000 | 0x540;
      *(_QWORD *)v11 = &unk_1E816A908;
      *(_QWORD *)(v11 + 16) = v12;
      *(_QWORD *)(v11 + 24) = v10;
      *(_BYTE *)(v11 + 32) = v8;
      *a2 = v11;
      v13 = (uint64_t *)a1[38];
      if (v13 == (uint64_t *)a1[39])
      {
        sub_1C625449C(v7, ((uint64_t)v13 - a1[37]) >> 2);
        v13 = (uint64_t *)a1[38];
      }
      a1[38] = v13 + 1;
      *v13 = v11;
      v2 = (_BYTE *)*a1;
      v3 = (_BYTE *)a1[1];
      if ((_BYTE *)*a1 == v3)
        return 0;
    }
  }
  return 0;
}

uint64_t sub_1C54C413C(uint64_t a1, int a2)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v3 = (a2 + 15) & 0xFFFFFFF0;
  v4 = *(_QWORD **)(a1 + 4096);
  v5 = v4[1];
  if (v5 + v3 >= 0xFF0)
  {
    if (v3 >= 0xFF1)
    {
      v6 = malloc_type_malloc(v3 + 16, 0x5C78FD72uLL);
      if (v6)
      {
        v7 = *(_QWORD **)(a1 + 4096);
        *v6 = *v7;
        v6[1] = 0;
        *v7 = v6;
        return (uint64_t)(v6 + 2);
      }
LABEL_8:
      std::terminate();
    }
    v4 = malloc_type_malloc(0x1000uLL, 0x2301439BuLL);
    if (!v4)
      goto LABEL_8;
    v5 = 0;
    *v4 = *(_QWORD *)(a1 + 4096);
    v4[1] = 0;
    *(_QWORD *)(a1 + 4096) = v4;
  }
  v4[1] = v5 + v3;
  return (uint64_t)v4 + v5 + 16;
}

uint64_t sub_1C54C41E0(uint64_t a1)
{
  char v2;
  uint64_t result;
  const char *v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;

  v7 = 0;
  v2 = sub_1C54C42B4((unsigned __int8 **)a1, (uint64_t *)&v7);
  result = 0;
  if ((v2 & 1) == 0)
  {
    v4 = *(const char **)a1;
    v5 = v7;
    if (v7 - 1 >= *(_QWORD *)(a1 + 8) - *(_QWORD *)a1)
    {
      return 0;
    }
    else
    {
      v6 = (char *)&v4[v7];
      *(_QWORD *)a1 = &v4[v7];
      if (v5 >= 0xA && !strncmp("_GLOBAL__N", v4, 0xAuLL))
      {
        v4 = "(anonymous namespace)";
        v6 = "";
      }
      result = sub_1C54C413C(a1 + 808, 32);
      *(_BYTE *)(result + 8) = 7;
      *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
      *(_QWORD *)result = &unk_1E816A8B0;
      *(_QWORD *)(result + 16) = v4;
      *(_QWORD *)(result + 24) = v6;
    }
  }
  return result;
}

uint64_t sub_1C54C42B4(unsigned __int8 **a1, uint64_t *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v8;

  *a2 = 0;
  v3 = *a1;
  v2 = a1[1];
  if (v2 == *a1 || *v3 - 58 < 0xFFFFFFF6)
    return 1;
  v5 = 0;
  v6 = v3 + 1;
  do
  {
    v7 = 5 * v5;
    *a2 = 2 * v7;
    *a1 = v6;
    v5 = (char)*(v6 - 1) + 2 * v7 - 48;
    *a2 = v5;
    if (v6 == v2)
      break;
    v8 = *v6++;
  }
  while ((v8 - 48) <= 9);
  return 0;
}

uint64_t sub_1C54C4324(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *(unsigned __int8 **)a1;
  v7 = *(unsigned __int8 **)(a1 + 8);
  if ((unint64_t)&v7[-*(_QWORD *)a1] >= 2 && !strncmp("St", (const char *)v6, 2uLL))
  {
    *(_QWORD *)a1 = v6 + 2;
    v8 = sub_1C54C413C(a1 + 808, 32);
    *(_BYTE *)(v8 + 8) = 7;
    *(_WORD *)(v8 + 9) = *(_WORD *)(v8 + 9) & 0xF000 | 0x540;
    *(_QWORD *)v8 = &unk_1E816A8B0;
    *(_QWORD *)(v8 + 16) = "std";
    *(_QWORD *)(v8 + 24) = "";
    v6 = *(unsigned __int8 **)a1;
    v7 = *(unsigned __int8 **)(a1 + 8);
  }
  else
  {
    v8 = 0;
  }
  if (v7 == v6 || *v6 != 83)
  {
    v10 = 0;
    return sub_1C54C4D40((unsigned __int8 **)a1, a2, v8, v10);
  }
  result = sub_1C54C4B50(a1);
  if (!result)
    return result;
  v10 = result;
  if (*(_BYTE *)(result + 8) == 25)
    return sub_1C54C4D40((unsigned __int8 **)a1, a2, v8, v10);
  result = 0;
  if (a3)
  {
    if (!v8)
    {
      *a3 = 1;
      return v10;
    }
  }
  return result;
}

uint64_t sub_1C54C444C(uint64_t a1, int a2)
{
  _BYTE *v2;
  _QWORD *v5;
  void **v6;
  uint64_t *v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13;
  _BYTE *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  void *v31;
  __int128 v32;
  _BYTE v33[32];
  uint64_t v34;

  v2 = *(_BYTE **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8) || *v2 != 73)
    return 0;
  *(_QWORD *)a1 = v2 + 1;
  if (a2)
  {
    v5 = *(_QWORD **)(a1 + 664);
    *(_QWORD *)(a1 + 672) = v5;
    if (v5 == *(_QWORD **)(a1 + 680))
    {
      sub_1C625449C(a1 + 664, 0);
      v5 = *(_QWORD **)(a1 + 672);
    }
    *(_QWORD *)(a1 + 672) = v5 + 1;
    *v5 = a1 + 576;
    *(_QWORD *)(a1 + 584) = *(_QWORD *)(a1 + 576);
  }
  v6 = (void **)(a1 + 664);
  v7 = &v34;
  v8 = (_BYTE *)(a1 + 688);
  v9 = a1 + 720;
  v28 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
  v29 = a1 + 808;
  while (1)
  {
    v10 = *(_BYTE **)a1;
    if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) && *v10 == 69)
      break;
    if (a2)
    {
      v31 = v33;
      *((_QWORD *)&v32 + 1) = v7;
      memset(v33, 0, sizeof(v33));
      if (*v6 == v8)
      {
        v14 = *(_BYTE **)(a1 + 672);
        v15 = v14 - v8;
        if (v14 != v8)
          memcpy(v33, (const void *)(a1 + 688), v14 - v8);
        *(_QWORD *)&v32 = &v33[v15];
        *(_QWORD *)(a1 + 672) = v8;
      }
      else
      {
        v31 = *v6;
        v32 = *(_OWORD *)(a1 + 672);
        *(_QWORD *)(a1 + 664) = v8;
        *(_QWORD *)(a1 + 672) = v8;
        *(_QWORD *)(a1 + 680) = v9;
      }
      v16 = sub_1C54C3CA8((_QWORD *)a1);
      sub_1C6253D78((char *)(a1 + 664), (uint64_t)&v31);
      if (v16)
      {
        v30 = v7;
        v17 = v9;
        v18 = *(uint64_t **)(a1 + 24);
        if (v18 == *(uint64_t **)(a1 + 32))
        {
          sub_1C625449C(a1 + 16, ((uint64_t)v18 - *(_QWORD *)(a1 + 16)) >> 2);
          v18 = *(uint64_t **)(a1 + 24);
        }
        *(_QWORD *)(a1 + 24) = v18 + 1;
        *v18 = v16;
        v19 = v16;
        if (*(_BYTE *)(v16 + 8) == 37)
        {
          v22 = *(_QWORD *)(v16 + 16);
          v27 = *(_QWORD *)(v16 + 24);
          v19 = sub_1C54C413C(v29, 32);
          sub_1C6257EB4(v19, v22, v27);
        }
        v20 = *(_QWORD **)(*(_QWORD *)(a1 + 672) - 8);
        v21 = (uint64_t *)v20[1];
        if (v21 == (uint64_t *)v20[2])
        {
          sub_1C625449C(*(_QWORD *)(*(_QWORD *)(a1 + 672) - 8), ((uint64_t)v21 - *v20) >> 2);
          v21 = (uint64_t *)v20[1];
        }
        v20[1] = v21 + 1;
        *v21 = v19;
        v9 = v17;
        v7 = v30;
      }
      if (v31 != v33)
        free(v31);
      if (!v16)
        return 0;
    }
    else
    {
      result = sub_1C54C3CA8((_QWORD *)a1);
      if (!result)
        return result;
      v12 = result;
      v13 = *(uint64_t **)(a1 + 24);
      if (v13 == *(uint64_t **)(a1 + 32))
      {
        sub_1C625449C(a1 + 16, ((uint64_t)v13 - *(_QWORD *)(a1 + 16)) >> 2);
        v13 = *(uint64_t **)(a1 + 24);
      }
      *(_QWORD *)(a1 + 24) = v13 + 1;
      *v13 = v12;
    }
  }
  *(_QWORD *)a1 = v10 + 1;
  v23 = *(_BYTE **)(a1 + 24);
  v24 = (_BYTE *)(*(_QWORD *)(a1 + 16) + 8 * v28);
  v25 = (void *)sub_1C54C413C(v29, (int)v23 - (int)v24);
  v26 = v25;
  if (v23 != v24)
    memmove(v25, v24, v23 - v24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16) + 8 * v28;
  result = sub_1C54C413C(v29, 32);
  *(_BYTE *)(result + 8) = 39;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
  *(_QWORD *)result = &unk_1E816BF78;
  *(_QWORD *)(result + 16) = v26;
  *(_QWORD *)(result + 24) = (v23 - v24) >> 3;
  return result;
}

uint64_t sub_1C54C4768(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v1 = *(_BYTE **)a1;
  v2 = *(_BYTE **)(a1 + 8);
  if (*(_BYTE **)a1 == v2 || *v1 != 114)
  {
    v3 = 0;
  }
  else
  {
    *(_QWORD *)a1 = ++v1;
    v3 = 4;
  }
  if (v1 == v2)
  {
    v5 = 0;
  }
  else
  {
    v4 = *v1;
    if (v4 == 86)
      *(_QWORD *)a1 = ++v1;
    if (v1 == v2 || *v1 != 75)
    {
      v5 = 0;
    }
    else
    {
      *(_QWORD *)a1 = v1 + 1;
      v5 = 1;
    }
    if (v4 == 86)
      v3 |= 2u;
  }
  return v3 | v5;
}

uint64_t sub_1C54C47F4(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(unsigned __int8 **)a1;
  v1 = *(unsigned __int8 **)(a1 + 8);
  if (*(unsigned __int8 **)a1 == v1 || *v2 != 84)
    return 0;
  v4 = v2 + 1;
  *(_QWORD *)a1 = v2 + 1;
  v18 = 0;
  if (v2 + 1 == v1)
  {
    v6 = 0;
    v17 = 0;
    goto LABEL_14;
  }
  if (*v4 == 76)
  {
    *(_QWORD *)a1 = v2 + 2;
    if ((sub_1C54C42B4((unsigned __int8 **)a1, &v18) & 1) != 0)
      return 0;
    v5 = *(unsigned __int8 **)a1;
    v1 = *(unsigned __int8 **)(a1 + 8);
    if (*(unsigned __int8 **)a1 == v1 || *v5 != 95)
      return 0;
    v6 = v18 + 1;
    v4 = v5 + 1;
    *(_QWORD *)a1 = v4;
  }
  else
  {
    v6 = 0;
  }
  v17 = 0;
  if (v4 == v1 || *v4 != 95)
  {
LABEL_14:
    if ((sub_1C54C42B4((unsigned __int8 **)a1, &v17) & 1) == 0)
    {
      v4 = *(unsigned __int8 **)a1;
      if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) && *v4 == 95)
      {
        v7 = v17 + 1;
        goto LABEL_18;
      }
    }
    return 0;
  }
  v7 = 0;
LABEL_18:
  *(_QWORD *)a1 = v4 + 1;
  if (!*(_BYTE *)(a1 + 777) || v6)
  {
    v11 = *(_QWORD **)(a1 + 672);
    v12 = *(_QWORD *)(a1 + 664);
    v13 = (uint64_t)v11 - v12;
    if (v6 < ((uint64_t)v11 - v12) >> 3
      && (v14 = *(_QWORD **)(v12 + 8 * v6)) != 0
      && (v16 = v14, v15 = *v14, v7 < (v16[1] - v15) >> 3))
    {
      return *(_QWORD *)(v15 + 8 * v7);
    }
    else
    {
      v8 = 0;
      if (v6 <= v13 >> 3 && *(_QWORD *)(a1 + 784) == v6)
      {
        if (v6 == v13 >> 3)
        {
          if (v11 == *(_QWORD **)(a1 + 680))
          {
            sub_1C625449C(a1 + 664, v13 >> 2);
            v11 = *(_QWORD **)(a1 + 672);
          }
          *(_QWORD *)(a1 + 672) = v11 + 1;
          *v11 = 0;
        }
        v8 = sub_1C54C413C(a1 + 808, 32);
        *(_BYTE *)(v8 + 8) = 7;
        *(_WORD *)(v8 + 9) = *(_WORD *)(v8 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v8 = &unk_1E816A8B0;
        *(_QWORD *)(v8 + 16) = "auto";
        *(_QWORD *)(v8 + 24) = "";
      }
    }
  }
  else
  {
    v8 = sub_1C54C413C(a1 + 808, 40);
    *(_BYTE *)(v8 + 8) = 40;
    *(_WORD *)(v8 + 9) = *(_WORD *)(v8 + 9) & 0xF000 | 0xA80;
    *(_QWORD *)v8 = &unk_1E816A960;
    *(_QWORD *)(v8 + 16) = v7;
    *(_QWORD *)(v8 + 24) = 0;
    *(_BYTE *)(v8 + 32) = 0;
    v9 = *(uint64_t **)(a1 + 728);
    if (v9 == *(uint64_t **)(a1 + 736))
    {
      sub_1C625449C(a1 + 720, ((uint64_t)v9 - *(_QWORD *)(a1 + 720)) >> 2);
      v9 = *(uint64_t **)(a1 + 728);
    }
    *(_QWORD *)(a1 + 728) = v9 + 1;
    *v9 = v8;
  }
  return v8;
}

uint64_t sub_1C54C4A6C(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t result;
  _BYTE *v5;
  uint64_t v6;

  v1 = *(_BYTE **)a1;
  v2 = *(_BYTE **)(a1 + 8);
  if (*(_BYTE **)a1 == v2)
    return 0;
  if (*v1 != 68)
    return 0;
  *(_QWORD *)a1 = v1 + 1;
  if (v1 + 1 == v2 || (v1[1] | 0x20) != 0x74)
    return 0;
  *(_QWORD *)a1 = v1 + 2;
  result = sub_1C54C52C0(a1);
  if (!result)
    return result;
  v5 = *(_BYTE **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8) || *v5 != 69)
    return 0;
  v6 = result;
  *(_QWORD *)a1 = v5 + 1;
  result = sub_1C54C413C(a1 + 808, 56);
  *(_BYTE *)(result + 8) = 56;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
  *(_QWORD *)result = &unk_1E816B160;
  *(_QWORD *)(result + 16) = "decltype";
  *(_QWORD *)(result + 24) = "";
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 32) = v6;
  return result;
}

uint64_t sub_1C54C4B50(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  v1 = *(unsigned __int8 **)a1;
  v2 = *(unsigned __int8 **)(a1 + 8);
  if (*(unsigned __int8 **)a1 == v2 || *v1 != 83)
    return 0;
  *(_QWORD *)a1 = v1 + 1;
  if (v2 == v1 + 1)
    goto LABEL_11;
  v4 = v1[1];
  if ((char)v1[1] < 97)
  {
    if (v4 == 95)
    {
      *(_QWORD *)a1 = v1 + 2;
      v7 = *(_QWORD *)(a1 + 296);
      if (v7 != *(_QWORD *)(a1 + 304))
        return *(_QWORD *)v7;
      return 0;
    }
LABEL_11:
    v15 = 0;
    v5 = 0;
    if ((sub_1C54C3F6C((unsigned __int8 **)a1, &v15) & 1) != 0)
      return v5;
    v8 = *(unsigned __int8 **)a1;
    if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) && *v8 == 95)
    {
      v9 = v15 + 1;
      *(_QWORD *)a1 = v8 + 1;
      v10 = *(_QWORD *)(a1 + 296);
      if (v9 < (*(_QWORD *)(a1 + 304) - v10) >> 3)
        return *(_QWORD *)(v10 + 8 * v9);
    }
    return 0;
  }
  if (v4 > 0x7A)
    goto LABEL_11;
  v5 = 0;
  v6 = 0;
  switch(v1[1])
  {
    case 'a':
      goto LABEL_24;
    case 'b':
      v6 = 1;
      goto LABEL_24;
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
      return v5;
    case 'd':
      v6 = 5;
      goto LABEL_24;
    case 'i':
      v6 = 3;
      goto LABEL_24;
    default:
      if (v4 == 111)
      {
        v6 = 4;
      }
      else
      {
        if (v4 != 115)
          return v5;
        v6 = 2;
      }
LABEL_24:
      *(_QWORD *)a1 = v1 + 2;
      v12 = sub_1C54C413C(a1 + 808, 16);
      *(_BYTE *)(v12 + 8) = 44;
      *(_WORD *)(v12 + 9) = *(_WORD *)(v12 + 9) & 0xF000 | 0x540;
      *(_QWORD *)v12 = &unk_1E816BC60;
      *(_DWORD *)(v12 + 12) = v6;
      v13 = sub_1C54C8820(a1, v12);
      if (v13 == v12)
      {
        v5 = v12;
      }
      else
      {
        v5 = v13;
        v14 = *(uint64_t **)(a1 + 304);
        if (v14 == *(uint64_t **)(a1 + 312))
        {
          sub_1C625449C(a1 + 296, ((uint64_t)v14 - *(_QWORD *)(a1 + 296)) >> 2);
          v14 = *(uint64_t **)(a1 + 304);
        }
        *(_QWORD *)(a1 + 304) = v14 + 1;
        *v14 = v5;
      }
      break;
  }
  return v5;
}

uint64_t sub_1C54C4D40(unsigned __int8 **a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  void *v31;
  void *v32;
  int64_t v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;

  v37 = a4;
  if ((sub_1C54C4000(a1, &v37) & 1) != 0)
    return 0;
  v9 = *a1;
  v10 = a1[1];
  if (*a1 != v10 && *v9 == 76)
    *a1 = ++v9;
  if (v10 != v9 && (char)*v9 >= 49)
  {
    v11 = *v9;
    if (v11 <= 0x39)
    {
      v12 = sub_1C54C41E0((uint64_t)a1);
LABEL_28:
      v17 = v12;
      goto LABEL_29;
    }
    if (v11 == 85)
    {
      v12 = sub_1C54C78F4((uint64_t)a1, (uint64_t)a2);
      goto LABEL_28;
    }
  }
  if ((unint64_t)(v10 - v9) >= 2 && !strncmp("DC", (const char *)v9, 2uLL))
  {
    *a1 = v9 + 2;
    v22 = a1[2];
    v23 = a1[3];
    v24 = sub_1C54C41E0((uint64_t)a1);
    if (!v24)
      return 0;
    v25 = v24;
    v26 = (v23 - v22) >> 3;
    while (1)
    {
      v27 = (uint64_t *)a1[3];
      if (v27 == (uint64_t *)a1[4])
      {
        sub_1C625449C((uint64_t)(a1 + 2), ((char *)v27 - (char *)a1[2]) >> 2);
        v27 = (uint64_t *)a1[3];
      }
      a1[3] = (unsigned __int8 *)(v27 + 1);
      *v27 = v25;
      v28 = *a1;
      if (*a1 != a1[1] && *v28 == 69)
        break;
      v25 = sub_1C54C41E0((uint64_t)a1);
      v7 = 0;
      if (!v25)
        return v7;
    }
    *a1 = v28 + 1;
    v29 = a1[3];
    v30 = &a1[2][8 * v26];
    v31 = (void *)sub_1C54C413C((uint64_t)(a1 + 101), (int)v29 - (int)v30);
    v32 = v31;
    v33 = v29 - v30;
    if (v33)
      memmove(v31, v30, v33);
    a1[3] = &a1[2][8 * v26];
    v17 = sub_1C54C413C((uint64_t)(a1 + 101), 32);
    *(_BYTE *)(v17 + 8) = 49;
    *(_WORD *)(v17 + 9) = *(_WORD *)(v17 + 9) & 0xF000 | 0x540;
    *(_QWORD *)v17 = &unk_1E816BD10;
    *(_QWORD *)(v17 + 16) = v32;
    *(_QWORD *)(v17 + 24) = v33 >> 3;
  }
  else
  {
    if (v10 == v9 || *v9 - 67 > 1)
    {
      v12 = sub_1C54C85F0((uint64_t)a1, a2);
      goto LABEL_28;
    }
    v7 = 0;
    if (!a3 || v37)
      return v7;
    if (*(_BYTE *)(a3 + 8) == 44)
    {
      v13 = *(_DWORD *)(a3 + 12);
      if ((v13 - 2) <= 3)
      {
        a3 = sub_1C54C413C((uint64_t)(a1 + 101), 16);
        *(_BYTE *)(a3 + 8) = 43;
        *(_WORD *)(a3 + 9) = *(_WORD *)(a3 + 9) & 0xF000 | 0x540;
        *(_QWORD *)a3 = &unk_1E816BD68;
        *(_DWORD *)(a3 + 12) = v13;
        v9 = *a1;
        v10 = a1[1];
      }
    }
    if (v9 == v10)
      return 0;
    v14 = *v9;
    if (v14 == 67)
    {
      v15 = v9 + 1;
      *a1 = v9 + 1;
      if (v9 + 1 == v10)
      {
        v16 = 0;
        v15 = v10;
      }
      else if (*v15 == 73)
      {
        v15 = v9 + 2;
        *a1 = v9 + 2;
        v16 = 1;
      }
      else
      {
        v16 = 0;
      }
      if (v10 == v15)
        return 0;
      v36 = *v15;
      if ((v36 - 49) > 4)
        return 0;
      *a1 = v15 + 1;
      if (a2)
        *a2 = 1;
      if (v16 && !sub_1C54C3774((uint64_t)a1, (uint64_t)a2))
        return 0;
      v17 = sub_1C54C413C((uint64_t)(a1 + 101), 32);
      *(_BYTE *)(v17 + 8) = 45;
      *(_WORD *)(v17 + 9) = *(_WORD *)(v17 + 9) & 0xF000 | 0x540;
      *(_QWORD *)v17 = &unk_1E816BDC0;
      *(_QWORD *)(v17 + 16) = a3;
      *(_BYTE *)(v17 + 24) = 0;
      *(_DWORD *)(v17 + 28) = v36 - 48;
    }
    else
    {
      v7 = 0;
      if ((unint64_t)(v10 - v9) < 2)
        return v7;
      if (v14 != 68)
        return v7;
      v7 = 0;
      v34 = v9[1];
      if (v34 > 0x35 || ((1 << v34) & 0x37000000000000) == 0)
        return v7;
      v35 = v34 - 48;
      *a1 = v9 + 2;
      if (a2)
        *a2 = 1;
      v17 = sub_1C54C413C((uint64_t)(a1 + 101), 32);
      *(_BYTE *)(v17 + 8) = 45;
      *(_WORD *)(v17 + 9) = *(_WORD *)(v17 + 9) & 0xF000 | 0x540;
      *(_QWORD *)v17 = &unk_1E816BDC0;
      *(_QWORD *)(v17 + 16) = a3;
      *(_BYTE *)(v17 + 24) = 1;
      *(_DWORD *)(v17 + 28) = v35;
    }
  }
LABEL_29:
  if (!v17 || (v18 = v37) == 0)
  {
    if (v17)
      goto LABEL_33;
    return 0;
  }
  v19 = sub_1C54C413C((uint64_t)(a1 + 101), 32);
  *(_BYTE *)(v19 + 8) = 26;
  *(_WORD *)(v19 + 9) = *(_WORD *)(v19 + 9) & 0xF000 | 0x540;
  *(_QWORD *)v19 = &unk_1E816BE18;
  *(_QWORD *)(v19 + 16) = v18;
  *(_QWORD *)(v19 + 24) = v17;
  v17 = v19;
LABEL_33:
  v20 = sub_1C54C8820((uint64_t)a1, v17);
  v7 = v20;
  if (a3 && v20)
  {
    v21 = sub_1C54C413C((uint64_t)(a1 + 101), 32);
    *(_BYTE *)(v21 + 8) = 23;
    *(_WORD *)(v21 + 9) = *(_WORD *)(v21 + 9) & 0xF000 | 0x540;
    *(_QWORD *)v21 = &unk_1E816BE70;
    *(_QWORD *)(v21 + 16) = a3;
    *(_QWORD *)(v21 + 24) = v7;
    return v21;
  }
  return v7;
}

uint64_t sub_1C54C520C(uint64_t a1, const char *a2)
{
  uint64_t v3;
  size_t v4;

  v3 = sub_1C54C413C(a1 + 808, 32);
  v4 = strlen(a2);
  *(_BYTE *)(v3 + 8) = 7;
  *(_WORD *)(v3 + 9) = *(_WORD *)(v3 + 9) & 0xF000 | 0x540;
  *(_QWORD *)v3 = &unk_1E816A8B0;
  *(_QWORD *)(v3 + 16) = a2;
  *(_QWORD *)(v3 + 24) = &a2[v4];
  return v3;
}

uint64_t sub_1C54C5278(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (!*(_BYTE *)(result + 32))
  {
    *(_BYTE *)(result + 32) = 1;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 24) + 24))(*(_QWORD *)(result + 24));
    *(_BYTE *)(v1 + 32) = 0;
  }
  return result;
}

uint64_t sub_1C54C52C0(uint64_t a1)
{
  unsigned __int8 *v2;
  int v3;
  char *v4;
  char *v5;
  uint64_t v6;
  size_t v7;
  size_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t result;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  char *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t **v56;
  uint64_t v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  uint64_t *v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  const void *v79;
  uint64_t v80;
  void *v81;
  void *v82;
  int64_t v83;
  unsigned int v84;
  unsigned __int8 *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  const void *v90;
  uint64_t v91;
  void *v92;
  void *v93;
  int64_t v94;
  uint64_t v95;
  unsigned int v96;
  char *v97;
  uint64_t v98;
  unsigned __int8 *v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  const char *v104;
  char *v105;
  uint64_t v106;
  const void *v107;
  void *v108;
  void *v109;
  int64_t v110;
  _BYTE *v111;
  _BYTE *v112;
  void *v113;
  void *v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  unsigned __int8 *v120;
  unsigned __int8 *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  _BOOL4 v135;
  uint64_t v136;
  uint64_t v137;
  const char *v138;
  size_t v139;
  unsigned int v140;
  const char *v141;
  uint64_t v142;
  const char *v143;
  unsigned __int8 *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  unsigned __int8 *v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  const void *v154;
  uint64_t v155;
  void *v156;
  void *v157;
  int64_t v158;
  BOOL v159;
  uint64_t v160;
  _BYTE *v161;
  _BYTE *v162;
  void *v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  const void *v168;
  void *v169;
  void *v170;
  int64_t v171;
  uint64_t v172;
  uint64_t v173;
  _BYTE *v174;
  _BYTE *v175;
  uint64_t v176;
  void *v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unsigned __int8 *v183;
  uint64_t v184;
  uint64_t v185;
  unsigned __int8 *v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  unsigned __int8 *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;

  v2 = *(unsigned __int8 **)a1;
  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 >= 2uLL && !strncmp("gs", (const char *)v2, 2uLL))
  {
    *(_QWORD *)a1 = v2 + 2;
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  v4 = sub_1C54C6D0C((unsigned __int8 **)a1);
  if (v4)
  {
    v5 = v4;
    v6 = *((_QWORD *)v4 + 1);
    v7 = strlen((const char *)v6);
    v8 = v7;
    v9 = 8;
    if (v7 < 8)
      v9 = v7;
    v10 = (_BYTE *)(v6 + v9);
    if (v7 >= 9 && *v10 == 32)
      ++v10;
    while (2)
    {
      v6 += v8;
      result = 0;
      switch(v5[2])
      {
        case 0:
          return sub_1C54C6DB4(a1, (uint64_t)v10, v6, v5[3] >> 1);
        case 1:
          v12 = *(unsigned __int8 **)a1;
          if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) && *v12 == 95)
          {
            *(_QWORD *)a1 = v12 + 1;
            return sub_1C54C6DB4(a1, (uint64_t)v10, v6, v5[3] >> 1);
          }
          result = sub_1C54C52C0(a1);
          if (!result)
            return result;
          v50 = result;
          v51 = v5[3];
          result = sub_1C54C413C(a1 + 808, 40);
          *(_BYTE *)(result + 8) = 52;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | (v51 >> 1) | 0x540;
          *(_QWORD *)result = &unk_1E816AE48;
          *(_QWORD *)(result + 16) = v50;
          *(_QWORD *)(result + 24) = v10;
          goto LABEL_68;
        case 2:
          v17 = v5[3];
          result = sub_1C54C52C0(a1);
          if (!result)
            return result;
          v18 = result;
          result = sub_1C54C52C0(a1);
          if (!result)
            return result;
          v19 = result;
          result = sub_1C54C413C(a1 + 808, 48);
          *(_BYTE *)(result + 8) = 50;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | (v17 >> 1) | 0x540;
          v20 = (char *)&unk_1E816AD88;
          goto LABEL_27;
        case 3:
          result = sub_1C54C52C0(a1);
          if (result)
          {
            v21 = result;
            result = sub_1C54C52C0(a1);
            if (result)
            {
              v22 = result;
              v23 = v5[3];
              result = sub_1C54C413C(a1 + 808, 32);
              *(_BYTE *)(result + 8) = 51;
              *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | (v23 >> 1) | 0x540;
              *(_QWORD *)result = &unk_1E816AEA0;
              *(_QWORD *)(result + 16) = v21;
              *(_QWORD *)(result + 24) = v22;
            }
          }
          return result;
        case 4:
          result = sub_1C54C52C0(a1);
          if (result)
          {
            v24 = result;
            result = sub_1C54C52C0(a1);
            if (result)
            {
              v25 = result;
              v26 = v5[3];
              result = sub_1C54C413C(a1 + 808, 48);
              *(_BYTE *)(result + 8) = 54;
              *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | (v26 >> 1) | 0x540;
              *(_QWORD *)result = &unk_1E816AEF8;
              *(_QWORD *)(result + 16) = v24;
              *(_QWORD *)(result + 24) = v10;
              *(_QWORD *)(result + 32) = v6;
              *(_QWORD *)(result + 40) = v25;
            }
          }
          return result;
        case 5:
          v27 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
          while (2)
          {
            v28 = *(unsigned __int8 **)a1;
            if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) && *v28 == 95)
            {
              *(_QWORD *)a1 = v28 + 1;
              v65 = *(_BYTE **)(a1 + 24);
              v66 = (_BYTE *)(*(_QWORD *)(a1 + 16) + 8 * v27);
              v67 = a1 + 808;
              v68 = (void *)sub_1C54C413C(a1 + 808, (int)v65 - (int)v66);
              v69 = v68;
              v70 = v65 - v66;
              if (v65 != v66)
                memmove(v68, v66, v65 - v66);
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16) + 8 * v27;
              result = sub_1C54C2310(a1);
              if (result)
              {
                v71 = result;
                v73 = *(unsigned __int8 **)a1;
                v72 = *(unsigned __int8 **)(a1 + 8);
                v203 = v69;
                if ((unint64_t)&v72[-*(_QWORD *)a1] >= 2 && !strncmp("pi", (const char *)v73, 2uLL))
                {
                  v73 += 2;
                  *(_QWORD *)a1 = v73;
                  v74 = 1;
                }
                else
                {
                  v74 = 0;
                }
                v75 = v70 >> 3;
                v204 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
                while (1)
                {
                  if (v73 != v72 && *v73 == 69)
                  {
                    *(_QWORD *)a1 = v73 + 1;
                    v111 = *(_BYTE **)(a1 + 24);
                    v112 = (_BYTE *)(*(_QWORD *)(a1 + 16) + 8 * v204);
                    v113 = (void *)sub_1C54C413C(a1 + 808, (int)v111 - (int)v112);
                    v114 = v113;
                    if (v111 != v112)
                      memmove(v113, v112, v111 - v112);
                    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16) + 8 * v204;
                    v115 = v5[3];
                    result = sub_1C54C413C(v67, 64);
                    *(_BYTE *)(result + 8) = 60;
                    *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | (v115 >> 1) | 0x540;
                    *(_QWORD *)result = &unk_1E816AF50;
                    *(_QWORD *)(result + 16) = v203;
                    *(_QWORD *)(result + 24) = v75;
                    *(_QWORD *)(result + 32) = v71;
                    *(_QWORD *)(result + 40) = v114;
                    *(_QWORD *)(result + 48) = (v111 - v112) >> 3;
                    *(_BYTE *)(result + 56) = v3;
                    *(_BYTE *)(result + 57) = v115 & 1;
                    return result;
                  }
                  if (!v74)
                    return 0;
                  result = sub_1C54C52C0(a1);
                  if (!result)
                    break;
                  v76 = result;
                  v77 = *(uint64_t **)(a1 + 24);
                  if (v77 == *(uint64_t **)(a1 + 32))
                  {
                    sub_1C625449C(a1 + 16, ((uint64_t)v77 - *(_QWORD *)(a1 + 16)) >> 2);
                    v77 = *(uint64_t **)(a1 + 24);
                  }
                  *(_QWORD *)(a1 + 24) = v77 + 1;
                  *v77 = v76;
                  v73 = *(unsigned __int8 **)a1;
                  v72 = *(unsigned __int8 **)(a1 + 8);
                }
              }
            }
            else
            {
              result = sub_1C54C52C0(a1);
              if (result)
              {
                v29 = result;
                v30 = *(uint64_t **)(a1 + 24);
                if (v30 == *(uint64_t **)(a1 + 32))
                {
                  sub_1C625449C(a1 + 16, ((uint64_t)v30 - *(_QWORD *)(a1 + 16)) >> 2);
                  v30 = *(uint64_t **)(a1 + 24);
                }
                *(_QWORD *)(a1 + 24) = v30 + 1;
                *v30 = v29;
                continue;
              }
            }
            break;
          }
          return result;
        case 6:
          result = sub_1C54C52C0(a1);
          if (result)
          {
            v31 = result;
            v32 = v5[3];
            result = sub_1C54C413C(a1 + 808, 32);
            *(_BYTE *)(result + 8) = 61;
            *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | (v32 >> 1) | 0x540;
            *(_QWORD *)result = &unk_1E816AFA8;
            *(_QWORD *)(result + 16) = v31;
            *(_BYTE *)(result + 24) = v3;
            *(_BYTE *)(result + 25) = v32 & 1;
          }
          return result;
        case 7:
          result = sub_1C54C52C0(a1);
          if (!result)
            return result;
          v33 = result;
          v34 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
          while (2)
          {
            v35 = *(unsigned __int8 **)a1;
            if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) && *v35 == 69)
            {
              *(_QWORD *)a1 = v35 + 1;
              v78 = *(_QWORD *)(a1 + 24);
              v79 = (const void *)(*(_QWORD *)(a1 + 16) + 8 * v34);
              v80 = a1 + 808;
              v81 = (void *)sub_1C54C413C(a1 + 808, (int)v78 - (int)v79);
              v82 = v81;
              v83 = v78 - (_QWORD)v79;
              if (v83)
                memmove(v81, v79, v83);
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16) + 8 * v34;
              v84 = v5[3];
              result = sub_1C54C413C(v80, 40);
              *(_BYTE *)(result + 8) = 59;
              *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | (v84 >> 1) | 0x540;
              *(_QWORD *)result = &unk_1E816B000;
              *(_QWORD *)(result + 16) = v33;
              *(_QWORD *)(result + 24) = v82;
              *(_QWORD *)(result + 32) = v83 >> 3;
            }
            else
            {
              result = sub_1C54C52C0(a1);
              if (result)
              {
                v36 = result;
                v37 = *(uint64_t **)(a1 + 24);
                if (v37 == *(uint64_t **)(a1 + 32))
                {
                  sub_1C625449C(a1 + 16, ((uint64_t)v37 - *(_QWORD *)(a1 + 16)) >> 2);
                  v37 = *(uint64_t **)(a1 + 24);
                }
                *(_QWORD *)(a1 + 24) = v37 + 1;
                *v37 = v36;
                continue;
              }
            }
            break;
          }
          return result;
        case 8:
          v38 = *(_BYTE *)(a1 + 776);
          *(_BYTE *)(a1 + 776) = 0;
          result = sub_1C54C2310(a1);
          *(_BYTE *)(a1 + 776) = v38;
          if (!result)
            return result;
          v39 = result;
          v40 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
          v41 = *(unsigned __int8 **)a1;
          if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8) || *v41 != 95)
          {
            v42 = 0;
          }
          else
          {
            *(_QWORD *)a1 = v41 + 1;
            v42 = 1;
          }
          v61 = v40 >> 3;
          break;
        case 9:
          result = sub_1C54C52C0(a1);
          if (!result)
            return result;
          v43 = result;
          result = sub_1C54C52C0(a1);
          if (!result)
            return result;
          v44 = result;
          result = sub_1C54C52C0(a1);
          if (!result)
            return result;
          v45 = result;
          v46 = v5[3];
          result = sub_1C54C413C(a1 + 808, 40);
          *(_BYTE *)(result + 8) = 53;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | (v46 >> 1) | 0x540;
          *(_QWORD *)result = &unk_1E816B0B0;
          *(_QWORD *)(result + 16) = v43;
          *(_QWORD *)(result + 24) = v44;
          goto LABEL_69;
        case 10:
          return result;
        default:
          continue;
      }
      break;
    }
    while (1)
    {
      v62 = *(unsigned __int8 **)a1;
      if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) && *v62 == 69)
        break;
      result = sub_1C54C52C0(a1);
      if (!result)
        return result;
      v63 = result;
      v64 = *(uint64_t **)(a1 + 24);
      if (v64 == *(uint64_t **)(a1 + 32))
      {
        sub_1C625449C(a1 + 16, ((uint64_t)v64 - *(_QWORD *)(a1 + 16)) >> 2);
        v64 = *(uint64_t **)(a1 + 24);
      }
      *(_QWORD *)(a1 + 24) = v64 + 1;
      *v64 = v63;
      if ((v42 & 1) == 0)
        goto LABEL_126;
    }
    *(_QWORD *)a1 = v62 + 1;
LABEL_126:
    v89 = *(_QWORD *)(a1 + 24);
    v90 = (const void *)(*(_QWORD *)(a1 + 16) + 8 * v61);
    v91 = a1 + 808;
    v92 = (void *)sub_1C54C413C(a1 + 808, (int)v89 - (int)v90);
    v93 = v92;
    v94 = v89 - (_QWORD)v90;
    if (v94)
      memmove(v92, v90, v94);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16) + 8 * v61;
    if (((v94 != 8) & ~v42) == 0)
    {
      v95 = v94 >> 3;
      v96 = v5[3];
      result = sub_1C54C413C(v91, 40);
      *(_BYTE *)(result + 8) = 64;
      *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | (v96 >> 1) | 0x540;
      *(_QWORD *)result = &unk_1E816B058;
      *(_QWORD *)(result + 16) = v39;
      *(_QWORD *)(result + 24) = v93;
LABEL_130:
      *(_QWORD *)(result + 32) = v95;
      return result;
    }
    return 0;
  }
  v13 = *(unsigned __int8 **)a1;
  v14 = *(unsigned __int8 **)(a1 + 8);
  v15 = (unint64_t)&v14[-*(_QWORD *)a1];
  if (v15 < 2)
    return 0;
  v16 = *v13;
  if (v16 == 76)
    return sub_1C54C6E3C(a1);
  if (v14 != v13 && v16 == 84)
    return sub_1C54C47F4(a1);
  if (v14 == v13 || v16 != 102)
  {
    if (!strncmp("il", *(const char **)a1, 2uLL))
    {
      v85 = v13 + 2;
      *(_QWORD *)a1 = v13 + 2;
      v86 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
      while (v85 == v14 || *v85 != 69)
      {
        result = sub_1C54C7678((_QWORD *)a1);
        if (!result)
          return result;
        v87 = result;
        v88 = *(uint64_t **)(a1 + 24);
        if (v88 == *(uint64_t **)(a1 + 32))
        {
          sub_1C625449C(a1 + 16, ((uint64_t)v88 - *(_QWORD *)(a1 + 16)) >> 2);
          v88 = *(uint64_t **)(a1 + 24);
        }
        *(_QWORD *)(a1 + 24) = v88 + 1;
        *v88 = v87;
        v85 = *(unsigned __int8 **)a1;
        v14 = *(unsigned __int8 **)(a1 + 8);
      }
      *(_QWORD *)a1 = v85 + 1;
      v106 = *(_QWORD *)(a1 + 24);
      v107 = (const void *)(*(_QWORD *)(a1 + 16) + 8 * v86);
      v108 = (void *)sub_1C54C413C(a1 + 808, (int)v106 - (int)v107);
      v109 = v108;
      v110 = v106 - (_QWORD)v107;
      if (v110)
        memmove(v108, v107, v110);
      v6 = v110 >> 3;
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16) + 8 * v86;
      result = sub_1C54C413C(a1 + 808, 40);
      *(_BYTE *)(result + 8) = 66;
      *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
      *(_QWORD *)result = &unk_1E816B898;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = v109;
LABEL_68:
      *(_QWORD *)(result + 32) = v6;
      return result;
    }
    if (!strncmp("mc", (const char *)v13, 2uLL))
    {
      *(_QWORD *)a1 = v13 + 2;
      result = sub_1C54C2310(a1);
      if (result)
      {
        v18 = result;
        result = sub_1C54C52C0(a1);
        if (result)
        {
          v10 = (_BYTE *)result;
          v97 = sub_1C54C21F4((char **)a1, 1);
          v99 = *(unsigned __int8 **)a1;
          if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8) || *v99 != 69)
            return 0;
          v6 = (uint64_t)v97;
          v19 = v98;
          *(_QWORD *)a1 = v99 + 1;
          result = sub_1C54C413C(a1 + 808, 48);
          *(_BYTE *)(result + 8) = 65;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x542;
          v20 = (char *)&unk_1E816B8E0;
LABEL_27:
          *(_QWORD *)result = v20 + 16;
          *(_QWORD *)(result + 16) = v18;
          *(_QWORD *)(result + 24) = v10;
          *(_QWORD *)(result + 32) = v6;
          *(_QWORD *)(result + 40) = v19;
        }
      }
      return result;
    }
    if (!strncmp("nx", (const char *)v13, 2uLL))
    {
      *(_QWORD *)a1 = v13 + 2;
      result = sub_1C54C52C0(a1);
      if (!result)
        return result;
      v103 = result;
      result = sub_1C54C413C(a1 + 808, 56);
      *(_BYTE *)(result + 8) = 56;
      *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x542;
      *(_QWORD *)result = &unk_1E816B160;
      v104 = "noexcept ";
      v105 = "";
    }
    else
    {
      if (!strncmp("so", (const char *)v13, 2uLL))
      {
        *(_QWORD *)a1 = v13 + 2;
        result = sub_1C54C2310(a1);
        if (result)
        {
          v116 = result;
          result = sub_1C54C52C0(a1);
          if (result)
          {
            v117 = result;
            v118 = sub_1C54C21F4((char **)a1, 1);
            v120 = *(unsigned __int8 **)a1;
            v121 = *(unsigned __int8 **)(a1 + 8);
            if (*(unsigned __int8 **)a1 == v121)
              return 0;
            v122 = v118;
            v123 = *(_QWORD *)(a1 + 16);
            v124 = *(_QWORD *)(a1 + 24);
            v125 = *v120;
            if (v125 == 95)
            {
              v200 = *(_QWORD *)(a1 + 24);
              v201 = *(_QWORD *)(a1 + 16);
              v205 = v119;
              v202 = v118;
              while (1)
              {
                *(_QWORD *)a1 = v120 + 1;
                v126 = sub_1C54C21F4((char **)a1, 0);
                v128 = v127;
                v129 = sub_1C54C413C(a1 + 808, 32);
                *(_BYTE *)(v129 + 8) = 7;
                *(_WORD *)(v129 + 9) = *(_WORD *)(v129 + 9) & 0xF000 | 0x540;
                *(_QWORD *)v129 = &unk_1E816A8B0;
                *(_QWORD *)(v129 + 16) = v126;
                *(_QWORD *)(v129 + 24) = v128;
                v130 = *(uint64_t **)(a1 + 24);
                if (v130 == *(uint64_t **)(a1 + 32))
                {
                  sub_1C625449C(a1 + 16, ((uint64_t)v130 - *(_QWORD *)(a1 + 16)) >> 2);
                  v130 = *(uint64_t **)(a1 + 24);
                }
                *(_QWORD *)(a1 + 24) = v130 + 1;
                *v130 = v129;
                v120 = *(unsigned __int8 **)a1;
                v121 = *(unsigned __int8 **)(a1 + 8);
                if (*(unsigned __int8 **)a1 == v121)
                  return 0;
                v125 = *v120;
                if (v125 != 95)
                {
                  v122 = v202;
                  v119 = v205;
                  v124 = v200;
                  v123 = v201;
                  break;
                }
              }
            }
            if (v125 == 112)
              *(_QWORD *)a1 = ++v120;
            v159 = v125 == 112;
            if (v120 == v121 || *v120 != 69)
              return 0;
            v206 = v119;
            v160 = (v124 - v123) >> 3;
            *(_QWORD *)a1 = v120 + 1;
            v161 = *(_BYTE **)(a1 + 24);
            v162 = (_BYTE *)(*(_QWORD *)(a1 + 16) + 8 * v160);
            v163 = (void *)sub_1C54C413C(a1 + 808, (int)v161 - (int)v162);
            v164 = v163;
            v165 = v161 - v162;
            if (v161 != v162)
            {
              memmove(v163, v162, v161 - v162);
              v165 = v161 - v162;
            }
            v166 = v165 >> 3;
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16) + 8 * v160;
            result = sub_1C54C413C(a1 + 808, 72);
            *(_BYTE *)(result + 8) = 55;
            *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
            *(_QWORD *)result = &unk_1E816B948;
            *(_QWORD *)(result + 16) = v116;
            *(_QWORD *)(result + 24) = v117;
            *(_QWORD *)(result + 32) = v122;
            *(_QWORD *)(result + 40) = v206;
            *(_QWORD *)(result + 48) = v164;
            *(_QWORD *)(result + 56) = v166;
            *(_BYTE *)(result + 64) = v159;
          }
        }
        return result;
      }
      if (!strncmp("sp", (const char *)v13, 2uLL))
      {
        *(_QWORD *)a1 = v13 + 2;
        result = sub_1C54C52C0(a1);
        if (!result)
          return result;
        v133 = result;
        result = sub_1C54C413C(a1 + 808, 24);
        *(_BYTE *)(result + 8) = 38;
        *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
        v134 = (char *)&unk_1E816B780;
        goto LABEL_178;
      }
      if (strncmp("sZ", (const char *)v13, 2uLL))
      {
        if (!strncmp("sP", (const char *)v13, 2uLL))
        {
          v144 = v13 + 2;
          *(_QWORD *)a1 = v13 + 2;
          v145 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
          while (v144 == v14 || *v144 != 69)
          {
            result = sub_1C54C3CA8(a1);
            if (!result)
              return result;
            v146 = result;
            v147 = *(uint64_t **)(a1 + 24);
            if (v147 == *(uint64_t **)(a1 + 32))
            {
              sub_1C625449C(a1 + 16, ((uint64_t)v147 - *(_QWORD *)(a1 + 16)) >> 2);
              v147 = *(uint64_t **)(a1 + 24);
            }
            *(_QWORD *)(a1 + 24) = v147 + 1;
            *v147 = v146;
            v144 = *(unsigned __int8 **)a1;
            v14 = *(unsigned __int8 **)(a1 + 8);
          }
          *(_QWORD *)a1 = v144 + 1;
          v153 = *(_QWORD *)(a1 + 24);
          v154 = (const void *)(*(_QWORD *)(a1 + 16) + 8 * v145);
          v155 = a1 + 808;
          v156 = (void *)sub_1C54C413C(a1 + 808, (int)v153 - (int)v154);
          v157 = v156;
          v158 = v153 - (_QWORD)v154;
          if (v158)
            memmove(v156, v154, v158);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16) + 8 * v145;
          v95 = sub_1C54C413C(a1 + 808, 32);
          *(_BYTE *)(v95 + 8) = 0;
          *(_WORD *)(v95 + 9) = *(_WORD *)(v95 + 9) & 0xF000 | 0x540;
          *(_QWORD *)v95 = &unk_1E816B9F8;
          *(_QWORD *)(v95 + 16) = v157;
          *(_QWORD *)(v95 + 24) = v158 >> 3;
          result = sub_1C54C413C(v155, 56);
          *(_BYTE *)(result + 8) = 56;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
          *(_QWORD *)result = &unk_1E816B160;
          *(_QWORD *)(result + 16) = "sizeof... ";
          *(_QWORD *)(result + 24) = "";
          *(_QWORD *)(result + 40) = 0;
          *(_QWORD *)(result + 48) = 0;
          goto LABEL_130;
        }
        if (!strncmp("tl", (const char *)v13, 2uLL))
        {
          *(_QWORD *)a1 = v13 + 2;
          result = sub_1C54C2310(a1);
          if (!result)
            return result;
          v148 = result;
          v149 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
          while (1)
          {
            v150 = *(unsigned __int8 **)a1;
            if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) && *v150 == 69)
              break;
            result = sub_1C54C7678((_QWORD *)a1);
            if (!result)
              return result;
            v151 = result;
            v152 = *(uint64_t **)(a1 + 24);
            if (v152 == *(uint64_t **)(a1 + 32))
            {
              sub_1C625449C(a1 + 16, ((uint64_t)v152 - *(_QWORD *)(a1 + 16)) >> 2);
              v152 = *(uint64_t **)(a1 + 24);
            }
            *(_QWORD *)(a1 + 24) = v152 + 1;
            *v152 = v151;
          }
          *(_QWORD *)a1 = v150 + 1;
          v167 = *(_QWORD *)(a1 + 24);
          v168 = (const void *)(*(_QWORD *)(a1 + 16) + 8 * v149);
          v169 = (void *)sub_1C54C413C(a1 + 808, (int)v167 - (int)v168);
          v170 = v169;
          v171 = v167 - (_QWORD)v168;
          if (v171)
            memmove(v169, v168, v171);
          v45 = v171 >> 3;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16) + 8 * v149;
          result = sub_1C54C413C(a1 + 808, 40);
          *(_BYTE *)(result + 8) = 66;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
          *(_QWORD *)result = &unk_1E816B898;
          *(_QWORD *)(result + 16) = v148;
          *(_QWORD *)(result + 24) = v170;
LABEL_69:
          *(_QWORD *)(result + 32) = v45;
          return result;
        }
        if (!strncmp("tr", (const char *)v13, 2uLL))
        {
          *(_QWORD *)a1 = v13 + 2;
          result = sub_1C54C413C(a1 + 808, 32);
          *(_BYTE *)(result + 8) = 7;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
          *(_QWORD *)result = &unk_1E816A8B0;
          *(_QWORD *)(result + 16) = "throw";
          *(_QWORD *)(result + 24) = "";
          return result;
        }
        if (!strncmp("tw", (const char *)v13, 2uLL))
        {
          *(_QWORD *)a1 = v13 + 2;
          result = sub_1C54C52C0(a1);
          if (!result)
            return result;
          v133 = result;
          result = sub_1C54C413C(a1 + 808, 24);
          *(_BYTE *)(result + 8) = 68;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
          v134 = (char *)&unk_1E816BA40;
          goto LABEL_178;
        }
        if (v14 != v13 && v16 == 117)
        {
          *(_QWORD *)a1 = v13 + 1;
          result = sub_1C54C41E0(a1);
          if (!result)
            return result;
          v52 = result;
          v53 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
          if (v54 - (_QWORD)v53 == 8 && !strncmp(v53, "__uuidof", 8uLL))
          {
            v186 = *(unsigned __int8 **)a1;
            if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
            {
              v187 = *v186;
              if (v187 == 122)
              {
                *(_QWORD *)a1 = v186 + 1;
                v188 = sub_1C54C52C0(a1);
                goto LABEL_283;
              }
              if (v187 == 116)
              {
                *(_QWORD *)a1 = v186 + 1;
                v188 = sub_1C54C2310(a1);
LABEL_283:
                v198 = v188;
                if (!v188)
                  return 0;
                v55 = (_QWORD *)(a1 + 16);
                v56 = (uint64_t **)(a1 + 24);
                v199 = *(uint64_t **)(a1 + 24);
                v57 = (uint64_t)v199 - *(_QWORD *)(a1 + 16);
                if (v199 == *(uint64_t **)(a1 + 32))
                {
                  sub_1C625449C(a1 + 16, v57 >> 2);
                  v199 = *v56;
                }
                *v56 = v199 + 1;
                *v199 = v198;
                goto LABEL_241;
              }
            }
          }
          v55 = (_QWORD *)(a1 + 16);
          v56 = (uint64_t **)(a1 + 24);
          v57 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
          while (1)
          {
            v58 = *(unsigned __int8 **)a1;
            if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) && *v58 == 69)
              break;
            result = sub_1C54C3CA8(a1);
            if (!result)
              return result;
            v59 = result;
            v60 = *(uint64_t **)(a1 + 24);
            if (v60 == *(uint64_t **)(a1 + 32))
            {
              sub_1C625449C(a1 + 16, ((uint64_t)v60 - *v55) >> 2);
              v60 = *v56;
            }
            *v56 = v60 + 1;
            *v60 = v59;
          }
          *(_QWORD *)a1 = v58 + 1;
LABEL_241:
          v173 = *(_QWORD *)(a1 + 16);
          v174 = *(_BYTE **)(a1 + 24);
          v175 = (_BYTE *)(v173 + v57);
          v176 = a1 + 808;
          v177 = (void *)sub_1C54C413C(a1 + 808, (int)v174 - ((int)v173 + (int)v57));
          v178 = v177;
          if (v174 != v175)
            memmove(v177, v175, v174 - v175);
          v45 = (v174 - v175) >> 3;
          *v56 = (uint64_t *)(*v55 + 8 * (v57 >> 3));
          result = sub_1C54C413C(v176, 40);
          *(_BYTE *)(result + 8) = 59;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x541;
          *(_QWORD *)result = &unk_1E816B000;
          *(_QWORD *)(result + 16) = v52;
          *(_QWORD *)(result + 24) = v178;
          goto LABEL_69;
        }
        if (v15 >= 3 && !strncmp("srN", (const char *)v13, 3uLL))
        {
          *(_QWORD *)a1 = v13 + 3;
          result = sub_1C54C82D8((unsigned __int8 **)a1);
          if (!result)
            return result;
          v179 = result;
          if (*(_QWORD *)(a1 + 8) != *(_QWORD *)a1 && **(_BYTE **)a1 == 73)
          {
            result = sub_1C54C444C(a1, 0);
            if (!result)
              return result;
            v180 = result;
            v181 = sub_1C54C413C(a1 + 808, 32);
            *(_BYTE *)(v181 + 8) = 41;
            *(_WORD *)(v181 + 9) = *(_WORD *)(v181 + 9) & 0xF000 | 0x540;
            *(_QWORD *)v181 = &unk_1E816BFD0;
            *(_QWORD *)(v181 + 16) = v179;
            *(_QWORD *)(v181 + 24) = v180;
            v179 = v181;
          }
          v182 = a1 + 808;
          while (1)
          {
            v183 = *(unsigned __int8 **)a1;
            if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) && *v183 == 69)
              break;
            result = sub_1C54C8378((_QWORD *)a1);
            if (!result)
              return result;
            v184 = result;
            v185 = sub_1C54C413C(a1 + 808, 32);
            *(_BYTE *)(v185 + 8) = 22;
            *(_WORD *)(v185 + 9) = *(_WORD *)(v185 + 9) & 0xF000 | 0x540;
            *(_QWORD *)v185 = &unk_1E816BAA8;
            *(_QWORD *)(v185 + 16) = v179;
            *(_QWORD *)(v185 + 24) = v184;
            v179 = v185;
          }
          *(_QWORD *)a1 = v183 + 1;
          result = sub_1C54C8420((unsigned __int8 **)a1);
          if (result)
          {
            v196 = result;
            result = sub_1C54C413C(v182, 32);
            *(_BYTE *)(result + 8) = 22;
            *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
            *(_QWORD *)result = &unk_1E816BAA8;
            *(_QWORD *)(result + 16) = v179;
            *(_QWORD *)(result + 24) = v196;
          }
          return result;
        }
        if (strncmp("sr", (const char *)v13, 2uLL))
        {
          result = sub_1C54C8420((unsigned __int8 **)a1);
          v133 = result;
          if (!v3 || !result)
            return result;
          result = sub_1C54C413C(a1 + 808, 24);
          *(_BYTE *)(result + 8) = 42;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
          v134 = (char *)&unk_1E816BBF8;
LABEL_178:
          *(_QWORD *)result = v134 + 16;
          *(_QWORD *)(result + 16) = v133;
          return result;
        }
        *(_QWORD *)a1 = v13 + 2;
        if (v14 == v13 + 2)
        {
          v172 = 0;
        }
        else
        {
          if ((char)v13[2] < 0)
          {
LABEL_260:
            result = sub_1C54C82D8((unsigned __int8 **)a1);
            if (result)
            {
              v189 = result;
              if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1 || **(_BYTE **)a1 != 73)
                goto LABEL_280;
              result = sub_1C54C444C(a1, 0);
              if (result)
              {
                v190 = result;
                v191 = sub_1C54C413C(a1 + 808, 32);
                *(_BYTE *)(v191 + 8) = 41;
                *(_WORD *)(v191 + 9) = *(_WORD *)(v191 + 9) & 0xF000 | 0x540;
                *(_QWORD *)v191 = &unk_1E816BFD0;
                *(_QWORD *)(v191 + 16) = v189;
                *(_QWORD *)(v191 + 24) = v190;
                v189 = v191;
LABEL_280:
                result = sub_1C54C8420((unsigned __int8 **)a1);
                if (result)
                {
                  v197 = result;
                  result = sub_1C54C413C(a1 + 808, 32);
                  *(_BYTE *)(result + 8) = 22;
                  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
                  *(_QWORD *)result = &unk_1E816BAA8;
                  *(_QWORD *)(result + 16) = v189;
                  *(_QWORD *)(result + 24) = v197;
                }
              }
            }
            return result;
          }
          v172 = v13[2];
        }
        if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v172 + 60) & 0x400) == 0)
          goto LABEL_260;
        result = sub_1C54C8378((_QWORD *)a1);
        if (!result)
          return result;
        v192 = result;
        v189 = 0;
        while (1)
        {
          if (v189)
          {
            v193 = sub_1C54C413C(a1 + 808, 32);
            *(_BYTE *)(v193 + 8) = 22;
            *(_WORD *)(v193 + 9) = *(_WORD *)(v193 + 9) & 0xF000 | 0x540;
            *(_QWORD *)v193 = &unk_1E816BAA8;
            *(_QWORD *)(v193 + 16) = v189;
            v194 = (uint64_t *)(v193 + 24);
            v189 = v193;
          }
          else
          {
            if (!v3)
            {
              v189 = v192;
              goto LABEL_272;
            }
            v189 = sub_1C54C413C(a1 + 808, 24);
            *(_BYTE *)(v189 + 8) = 42;
            *(_WORD *)(v189 + 9) = *(_WORD *)(v189 + 9) & 0xF000 | 0x540;
            *(_QWORD *)v189 = &unk_1E816BC08;
            v194 = (uint64_t *)(v189 + 16);
          }
          *v194 = v192;
LABEL_272:
          v195 = *(unsigned __int8 **)a1;
          if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) && *v195 == 69)
          {
            *(_QWORD *)a1 = v195 + 1;
            goto LABEL_280;
          }
          v192 = sub_1C54C8378((_QWORD *)a1);
          result = 0;
          if (!v192)
            return result;
        }
      }
      *(_QWORD *)a1 = v13 + 2;
      if (v14 != v13 + 2 && v13[2] == 84)
      {
        result = sub_1C54C47F4(a1);
        if (!result)
          return result;
        v133 = result;
        result = sub_1C54C413C(a1 + 808, 24);
        *(_BYTE *)(result + 8) = 58;
        *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
        v134 = (char *)&unk_1E816B990;
        goto LABEL_178;
      }
      result = sub_1C54C74D8(a1);
      if (!result)
        return result;
      v103 = result;
      result = sub_1C54C413C(a1 + 808, 56);
      *(_BYTE *)(result + 8) = 56;
      *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
      *(_QWORD *)result = &unk_1E816B160;
      v104 = "sizeof... ";
      v105 = "";
    }
    *(_QWORD *)(result + 16) = v104;
    *(_QWORD *)(result + 24) = v105;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 32) = v103;
    return result;
  }
  v47 = (char *)(v13 + 1);
  v48 = v13[1];
  if (v48 == 112)
    return sub_1C54C74D8(a1);
  if (v48 != 76)
    goto LABEL_138;
  if (v15 < 3)
  {
    v49 = 0;
  }
  else
  {
    if ((char)v13[2] < 0)
      goto LABEL_138;
    v49 = v13[2];
  }
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v49 + 60) & 0x400) != 0)
    return sub_1C54C74D8(a1);
LABEL_138:
  *(_QWORD *)a1 = v47;
  if (v14 == (unsigned __int8 *)v47)
    return 0;
  result = 0;
  v100 = *v47;
  if (v100 > 107)
  {
    if (v100 == 108)
    {
      v102 = 0;
      v101 = 1;
    }
    else
    {
      if (v100 != 114)
        return result;
      v101 = 0;
      v102 = 0;
    }
  }
  else
  {
    if (v100 == 76)
    {
      v101 = 1;
    }
    else
    {
      if (v100 != 82)
        return result;
      v101 = 0;
    }
    v102 = 1;
  }
  *(_QWORD *)a1 = v13 + 2;
  result = (uint64_t)sub_1C54C6D0C((unsigned __int8 **)a1);
  if (result)
  {
    v131 = result;
    if (*(_BYTE *)(result + 2) != 2)
      return 0;
    result = sub_1C54C52C0(a1);
    if (result)
    {
      v132 = result;
      if (v102)
      {
        result = sub_1C54C52C0(a1);
        if (!result)
          return result;
      }
      else
      {
        result = 0;
      }
      v135 = result != 0;
      if ((v101 & v135) != 0)
        v136 = v132;
      else
        v136 = result;
      if ((v101 & v135) != 0)
        v137 = result;
      else
        v137 = v132;
      v138 = *(const char **)(v131 + 8);
      v139 = strlen(v138);
      v140 = *(unsigned __int8 *)(v131 + 2);
      v141 = v138;
      if (v140 <= 0xA)
      {
        v142 = 8;
        if (v139 < 8)
          v142 = v139;
        v141 = &v138[v142];
        if (v139 >= 9 && *v141 == 32)
          ++v141;
      }
      v143 = &v138[v139];
      result = sub_1C54C413C(a1 + 808, 56);
      *(_BYTE *)(result + 8) = 67;
      *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
      *(_QWORD *)result = &unk_1E816B738;
      *(_QWORD *)(result + 16) = v137;
      *(_QWORD *)(result + 24) = v136;
      *(_QWORD *)(result + 32) = v141;
      *(_QWORD *)(result + 40) = v143;
      *(_BYTE *)(result + 48) = v101;
    }
  }
  return result;
}

char *sub_1C54C6D0C(unsigned __int8 **a1)
{
  unsigned __int8 *v1;
  int v3;
  char *result;
  unint64_t v5;
  unint64_t v6;
  char *v7;

  v1 = *a1;
  if ((unint64_t)(a1[1] - *a1) < 2)
    return 0;
  v3 = *v1;
  result = &byte_1E816A9A8;
  v5 = 62;
  do
  {
    v6 = v5 >> 1;
    v7 = &result[16 * (v5 >> 1)];
    if (*v7 < (char)v3 || *v7 == v3 && v7[1] < (char)v1[1])
    {
      result = v7 + 16;
      v6 = v5 + ~v6;
    }
    v5 = v6;
  }
  while (v6);
  if (result == (char *)&unk_1E816AD88 || *result != v3 || result[1] != v1[1])
    return 0;
  *a1 = v1 + 2;
  return result;
}

uint64_t sub_1C54C6DB4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1C54C52C0();
  if (result)
  {
    v9 = result;
    result = sub_1C54C413C(a1 + 808, 40);
    *(_BYTE *)(result + 8) = 62;
    *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | a4 & 0x3F | 0x540;
    *(_QWORD *)result = &unk_1E816ADF0;
    *(_QWORD *)(result + 16) = a2;
    *(_QWORD *)(result + 24) = a3;
    *(_QWORD *)(result + 32) = v9;
  }
  return result;
}

uint64_t sub_1C54C6E3C(uint64_t a1)
{
  _BYTE *v1;
  char *v2;
  unint64_t v4;
  uint64_t result;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  const char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _BYTE *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(char **)a1;
  v1 = *(_BYTE **)(a1 + 8);
  if (*(_BYTE **)a1 != v1 && *v2 == 76)
  {
    *(_QWORD *)a1 = v2 + 1;
    v4 = v1 - (v2 + 1);
    if (v1 == v2 + 1)
    {
LABEL_10:
      result = sub_1C54C2310(a1);
      if (!result)
        return result;
      v9 = result;
      v10 = sub_1C54C21F4((char **)a1, 1);
      if (v10 != v11)
      {
        v12 = *(char **)a1;
        if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) && *v12 == 69)
        {
          v13 = v10;
          v14 = v11;
          *(_QWORD *)a1 = v12 + 1;
          result = sub_1C54C413C(a1 + 808, 40);
          *(_BYTE *)(result + 8) = 72;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
          *(_QWORD *)result = &unk_1E816B688;
          *(_QWORD *)(result + 16) = v9;
          *(_QWORD *)(result + 24) = v13;
          *(_QWORD *)(result + 32) = v14;
          return result;
        }
      }
    }
    else
    {
      result = 0;
      switch(v2[1])
      {
        case 'A':
          result = sub_1C54C2310(a1);
          if (!result)
            return result;
          v6 = *(char **)a1;
          if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8) || *v6 != 69)
            return 0;
          v7 = result;
          *(_QWORD *)a1 = v6 + 1;
          result = sub_1C54C413C(a1 + 808, 24);
          *(_BYTE *)(result + 8) = 70;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
          v8 = (char *)&unk_1E816B360;
          goto LABEL_9;
        case 'D':
          if (v4 < 3 || strncmp("DnE", v2 + 1, 3uLL))
            return 0;
          *(_QWORD *)a1 = v2 + 4;
          return sub_1C54C520C(a1, "nullptr");
        case 'T':
          return result;
        case 'U':
          if (v4 < 2 || v2[2] != 108)
            return 0;
          result = sub_1C54C78F4(a1, 0);
          if (!result)
            return result;
          v15 = *(char **)a1;
          if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8) || *v15 != 69)
            return 0;
          v7 = result;
          *(_QWORD *)a1 = v15 + 1;
          result = sub_1C54C413C(a1 + 808, 24);
          *(_BYTE *)(result + 8) = 71;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
          v8 = (char *)&unk_1E816B620;
LABEL_9:
          *(_QWORD *)result = v8 + 16;
          *(_QWORD *)(result + 16) = v7;
          return result;
        case '_':
          if (v4 < 2 || strncmp("_Z", v2 + 1, 2uLL))
            return 0;
          *(_QWORD *)a1 = v2 + 3;
          result = sub_1C54C1690(a1);
          if (!result)
            return result;
          v16 = *(char **)a1;
          if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8) || *v16 != 69)
            return 0;
          *(_QWORD *)a1 = v16 + 1;
          return result;
        case 'a':
          *(_QWORD *)a1 = v2 + 2;
          v17 = "signed char";
          v18 = "";
          goto LABEL_69;
        case 'b':
          if (v4 < 3)
            return 0;
          if (!strncmp("b0E", v2 + 1, 3uLL))
          {
            *(_QWORD *)a1 = v2 + 4;
            result = sub_1C54C413C(a1 + 808, 16);
            *(_BYTE *)(result + 8) = 69;
            *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
            *(_QWORD *)result = &unk_1E816B210;
            *(_BYTE *)(result + 11) = 0;
          }
          else
          {
            if (strncmp("b1E", v2 + 1, 3uLL))
              return 0;
            *(_QWORD *)a1 = v2 + 4;
            result = sub_1C54C413C(a1 + 808, 16);
            *(_BYTE *)(result + 8) = 69;
            *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
            *(_QWORD *)result = &unk_1E816B210;
            *(_BYTE *)(result + 11) = 1;
          }
          return result;
        case 'c':
          *(_QWORD *)a1 = v2 + 2;
          v17 = "char";
          v18 = "";
          goto LABEL_69;
        case 'd':
          v19 = v2 + 2;
          *(_QWORD *)a1 = v2 + 2;
          if ((unint64_t)(v1 - (v2 + 2)) < 0x11)
            return 0;
          v20 = 0;
          v21 = v2 + 18;
          while ((v19[v20] & 0x80000000) == 0
               && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v19[v20] + 60) & 0x10000) != 0)
          {
            if (++v20 == 16)
            {
              *(_QWORD *)a1 = v21;
              if (v21 != v1 && *v21 == 69)
              {
                *(_QWORD *)a1 = v2 + 19;
                result = sub_1C54C413C(a1 + 808, 32);
                *(_BYTE *)(result + 8) = 75;
                *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
                v22 = (char *)&unk_1E816B2B0;
                goto LABEL_78;
              }
              return 0;
            }
          }
          return 0;
        case 'e':
          v19 = v2 + 2;
          *(_QWORD *)a1 = v2 + 2;
          if ((unint64_t)(v1 - (v2 + 2)) < 0x21)
            return 0;
          v23 = 0;
          v21 = v2 + 34;
          while ((v19[v23] & 0x80000000) == 0
               && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v19[v23] + 60) & 0x10000) != 0)
          {
            if (++v23 == 32)
            {
              *(_QWORD *)a1 = v21;
              if (v21 != v1 && *v21 == 69)
              {
                *(_QWORD *)a1 = v2 + 35;
                result = sub_1C54C413C(a1 + 808, 32);
                *(_BYTE *)(result + 8) = 76;
                *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
                v22 = (char *)&unk_1E816B308;
                goto LABEL_78;
              }
              return 0;
            }
          }
          return 0;
        case 'f':
          v19 = v2 + 2;
          *(_QWORD *)a1 = v2 + 2;
          if ((unint64_t)(v1 - (v2 + 2)) < 9)
            return 0;
          v25 = 0;
          v21 = v2 + 10;
          break;
        case 'h':
          *(_QWORD *)a1 = v2 + 2;
          v17 = "unsigned char";
          v18 = "";
          goto LABEL_69;
        case 'i':
          *(_QWORD *)a1 = v2 + 2;
          v17 = "";
          v24 = a1;
          v18 = "";
          return sub_1C54C7840(v24, (uint64_t)v17, (uint64_t)v18);
        case 'j':
          *(_QWORD *)a1 = v2 + 2;
          v17 = "u";
          goto LABEL_59;
        case 'l':
          *(_QWORD *)a1 = v2 + 2;
          v17 = "l";
LABEL_59:
          v18 = (char *)(v17 + 1);
          goto LABEL_69;
        case 'm':
          *(_QWORD *)a1 = v2 + 2;
          v17 = "ul";
          goto LABEL_67;
        case 'n':
          *(_QWORD *)a1 = v2 + 2;
          v17 = "__int128";
          v18 = "";
          goto LABEL_69;
        case 'o':
          *(_QWORD *)a1 = v2 + 2;
          v17 = "unsigned __int128";
          v18 = "";
          goto LABEL_69;
        case 's':
          *(_QWORD *)a1 = v2 + 2;
          v17 = "short";
          v18 = "";
          goto LABEL_69;
        case 't':
          *(_QWORD *)a1 = v2 + 2;
          v17 = "unsigned short";
          v18 = "";
          goto LABEL_69;
        case 'w':
          *(_QWORD *)a1 = v2 + 2;
          v17 = "wchar_t";
          v18 = "";
          goto LABEL_69;
        case 'x':
          *(_QWORD *)a1 = v2 + 2;
          v17 = "ll";
LABEL_67:
          v18 = (char *)(v17 + 2);
          goto LABEL_69;
        case 'y':
          *(_QWORD *)a1 = v2 + 2;
          v17 = "ull";
          v18 = "";
LABEL_69:
          v24 = a1;
          return sub_1C54C7840(v24, (uint64_t)v17, (uint64_t)v18);
        default:
          goto LABEL_10;
      }
      while ((v19[v25] & 0x80000000) == 0
           && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v19[v25] + 60) & 0x10000) != 0)
      {
        if (++v25 == 8)
        {
          *(_QWORD *)a1 = v21;
          if (v21 == v1 || *v21 != 69)
            return 0;
          *(_QWORD *)a1 = v2 + 11;
          result = sub_1C54C413C(a1 + 808, 32);
          *(_BYTE *)(result + 8) = 74;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
          v22 = (char *)&unk_1E816B258;
LABEL_78:
          *(_QWORD *)result = v22 + 16;
          *(_QWORD *)(result + 16) = v19;
          *(_QWORD *)(result + 24) = v21;
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1C54C74D8(uint64_t a1)
{
  const char *v2;
  unint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t result;

  v2 = *(const char **)a1;
  v3 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v3 < 3)
  {
    if (v3 != 2)
      return 0;
LABEL_5:
    if (!strncmp("fp", v2, 2uLL))
    {
      v7 = (char *)(v2 + 2);
    }
    else
    {
      if (strncmp("fL", v2, 2uLL))
        return 0;
      *(_QWORD *)a1 = v2 + 2;
      v4 = sub_1C54C21F4((char **)a1, 0);
      if (v4 == v5)
        return 0;
      v6 = *(char **)a1;
      if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8) || *v6 != 112)
        return 0;
      v7 = v6 + 1;
    }
    *(_QWORD *)a1 = v7;
    sub_1C54C4768(a1);
    v8 = sub_1C54C21F4((char **)a1, 0);
    v10 = *(char **)a1;
    if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) && *v10 == 95)
    {
      v11 = v8;
      v12 = v9;
      *(_QWORD *)a1 = v10 + 1;
      result = sub_1C54C413C(a1 + 808, 32);
      *(_BYTE *)(result + 8) = 63;
      *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
      *(_QWORD *)result = &unk_1E816B6E0;
      *(_QWORD *)(result + 16) = v11;
      *(_QWORD *)(result + 24) = v12;
      return result;
    }
    return 0;
  }
  if (strncmp("fpT", v2, 3uLL))
    goto LABEL_5;
  *(_QWORD *)a1 = v2 + 3;
  result = sub_1C54C413C(a1 + 808, 32);
  *(_BYTE *)(result + 8) = 7;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
  *(_QWORD *)result = &unk_1E816A8B0;
  *(_QWORD *)(result + 16) = "this";
  *(_QWORD *)(result + 24) = "";
  return result;
}

uint64_t sub_1C54C7678(_QWORD *a1)
{
  _BYTE *v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (_BYTE *)*a1;
  if (a1[1] - *a1 < 2uLL || *v2 != 100)
    return sub_1C54C52C0(a1);
  v3 = (char)v2[1];
  switch(v3)
  {
    case 'X':
      *a1 = v2 + 2;
      result = sub_1C54C52C0(a1);
      if (result)
      {
        v7 = result;
        result = sub_1C54C52C0(a1);
        if (result)
        {
          v8 = result;
          result = sub_1C54C7678(a1);
          if (result)
          {
            v9 = result;
            result = sub_1C54C413C((uint64_t)(a1 + 101), 40);
            *(_BYTE *)(result + 8) = 78;
            *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
            *(_QWORD *)result = &unk_1E816B840;
            *(_QWORD *)(result + 16) = v7;
            *(_QWORD *)(result + 24) = v8;
            *(_QWORD *)(result + 32) = v9;
          }
        }
      }
      break;
    case 'x':
      *a1 = v2 + 2;
      result = sub_1C54C52C0(a1);
      if (result)
      {
        v10 = result;
        result = sub_1C54C7678(a1);
        if (result)
        {
          v11 = result;
          result = sub_1C54C413C((uint64_t)(a1 + 101), 40);
          *(_BYTE *)(result + 8) = 77;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
          *(_QWORD *)result = &unk_1E816B7E8;
          *(_QWORD *)(result + 16) = v10;
          *(_QWORD *)(result + 24) = v11;
          *(_BYTE *)(result + 32) = 1;
        }
      }
      break;
    case 'i':
      *a1 = v2 + 2;
      result = sub_1C54C41E0((uint64_t)a1);
      if (result)
      {
        v5 = result;
        result = sub_1C54C7678(a1);
        if (result)
        {
          v6 = result;
          result = sub_1C54C413C((uint64_t)(a1 + 101), 40);
          *(_BYTE *)(result + 8) = 77;
          *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
          *(_QWORD *)result = &unk_1E816B7E8;
          *(_QWORD *)(result + 16) = v5;
          *(_QWORD *)(result + 24) = v6;
          *(_BYTE *)(result + 32) = 0;
        }
      }
      return result;
    default:
      return sub_1C54C52C0(a1);
  }
  return result;
}

uint64_t sub_1C54C7840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t result;

  v6 = sub_1C54C21F4((char **)a1, 1);
  if (v6 == v7)
    return 0;
  v8 = *(char **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8) || *v8 != 69)
    return 0;
  v9 = v6;
  v10 = v7;
  *(_QWORD *)a1 = v8 + 1;
  result = sub_1C54C413C(a1 + 808, 48);
  *(_BYTE *)(result + 8) = 73;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
  *(_QWORD *)result = &unk_1E816B1B8;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v10;
  return result;
}

uint64_t sub_1C54C78F4(uint64_t a1, uint64_t a2)
{
  const char *v3;
  uint64_t v4;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char *v35;
  char *v36;
  _BYTE *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  void *v48;
  uint64_t v49;

  if (a2)
    *(_QWORD *)(a1 + 672) = *(_QWORD *)(a1 + 664);
  v3 = *(const char **)a1;
  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 < 2uLL)
    return 0;
  if (!strncmp("Ut", *(const char **)a1, 2uLL))
  {
    *(_QWORD *)a1 = v3 + 2;
    v7 = sub_1C54C21F4((char **)a1, 0);
    v9 = *(char **)a1;
    if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) && *v9 == 95)
    {
      v10 = v7;
      v11 = v8;
      *(_QWORD *)a1 = v9 + 1;
      v4 = sub_1C54C413C(a1 + 808, 32);
      *(_BYTE *)(v4 + 8) = 47;
      *(_WORD *)(v4 + 9) = *(_WORD *)(v4 + 9) & 0xF000 | 0x540;
      *(_QWORD *)v4 = &unk_1E816B3C8;
      *(_QWORD *)(v4 + 16) = v10;
      *(_QWORD *)(v4 + 24) = v11;
      return v4;
    }
    return 0;
  }
  if (strncmp("Ul", v3, 2uLL))
  {
    if (!strncmp("Ub", v3, 2uLL))
    {
      *(_QWORD *)a1 = v3 + 2;
      sub_1C54C21F4((char **)a1, 0);
      v6 = *(char **)a1;
      if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) && *v6 == 95)
      {
        *(_QWORD *)a1 = v6 + 1;
        v4 = sub_1C54C413C(a1 + 808, 32);
        *(_BYTE *)(v4 + 8) = 7;
        *(_WORD *)(v4 + 9) = *(_WORD *)(v4 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v4 = &unk_1E816A8B0;
        *(_QWORD *)(v4 + 16) = "'block-literal'";
        *(_QWORD *)(v4 + 24) = "";
        return v4;
      }
    }
    return 0;
  }
  *(_QWORD *)a1 = v3 + 2;
  v12 = *(_QWORD *)(a1 + 784);
  *(_QWORD *)(a1 + 784) = (uint64_t)(*(_QWORD *)(a1 + 672) - *(_QWORD *)(a1 + 664)) >> 3;
  sub_1C54C7D98((uint64_t)v47, (_QWORD *)a1);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(char **)a1;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 == *(_QWORD *)a1)
  {
    v23 = *(_BYTE **)(a1 + 24);
    v22 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    do
    {
      if (*v15 != 84)
        break;
      v17 = (unint64_t)(v16 - (_QWORD)v15) < 2 ? 0 : v15[1];
      v18 = memchr("yptn", v17, 4uLL);
      if (!v18 || v18 - "yptn" == -1)
        break;
      v19 = sub_1C54C7E38(a1);
      if (!v19)
        goto LABEL_48;
      v20 = v19;
      v21 = *(uint64_t **)(a1 + 24);
      if (v21 == *(uint64_t **)(a1 + 32))
      {
        sub_1C625449C(a1 + 16, ((uint64_t)v21 - *(_QWORD *)(a1 + 16)) >> 2);
        v21 = *(uint64_t **)(a1 + 24);
      }
      *(_QWORD *)(a1 + 24) = v21 + 1;
      *v21 = v20;
      v15 = *(char **)a1;
      v16 = *(_QWORD *)(a1 + 8);
    }
    while (v16 != *(_QWORD *)a1);
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_BYTE **)(a1 + 24);
  }
  v24 = (v14 - v13) >> 3;
  v25 = (_BYTE *)(v22 + 8 * v24);
  v26 = v23 - v25;
  v27 = (void *)sub_1C54C413C(a1 + 808, (int)v23 - (int)v25);
  v28 = v27;
  if (v23 == v25)
  {
    v29 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 672) -= 8;
  }
  else
  {
    memmove(v27, v25, v23 - v25);
    v29 = *(_QWORD *)(a1 + 16);
  }
  v30 = (_BYTE *)(v29 + 8 * v24);
  *(_QWORD *)(a1 + 24) = v30;
  v31 = *(char **)a1;
  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 > 1uLL && !strncmp("vE", *(const char **)a1, 2uLL))
  {
    v36 = v31 + 2;
  }
  else
  {
    v32 = sub_1C54C2310(a1);
    if (!v32)
    {
LABEL_48:
      v4 = 0;
      goto LABEL_49;
    }
    v33 = v32;
    while (1)
    {
      v34 = *(uint64_t **)(a1 + 24);
      if (v34 == *(uint64_t **)(a1 + 32))
      {
        sub_1C625449C(a1 + 16, ((uint64_t)v34 - *(_QWORD *)(a1 + 16)) >> 2);
        v34 = *(uint64_t **)(a1 + 24);
      }
      *(_QWORD *)(a1 + 24) = v34 + 1;
      *v34 = v33;
      v35 = *(char **)a1;
      if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) && *v35 == 69)
        break;
      v33 = sub_1C54C2310(a1);
      if (!v33)
        goto LABEL_48;
    }
    v36 = v35 + 1;
    v29 = *(_QWORD *)(a1 + 16);
    v30 = *(_BYTE **)(a1 + 24);
  }
  *(_QWORD *)a1 = v36;
  v37 = (_BYTE *)(v29 + 8 * v24);
  v38 = (void *)sub_1C54C413C(a1 + 808, (int)v30 - (int)v37);
  v39 = v38;
  v40 = v30 - v37;
  if (v30 != v37)
    memmove(v38, v37, v30 - v37);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16) + 8 * v24;
  v41 = sub_1C54C21F4((char **)a1, 0);
  v43 = *(char **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8) || *v43 != 95)
    goto LABEL_48;
  v44 = v41;
  v45 = v42;
  v46 = v40 >> 3;
  *(_QWORD *)a1 = v43 + 1;
  v4 = sub_1C54C413C(a1 + 808, 64);
  *(_BYTE *)(v4 + 8) = 48;
  *(_WORD *)(v4 + 9) = *(_WORD *)(v4 + 9) & 0xF000 | 0x540;
  *(_QWORD *)v4 = &unk_1E816B5D8;
  *(_QWORD *)(v4 + 16) = v28;
  *(_QWORD *)(v4 + 24) = v26 >> 3;
  *(_QWORD *)(v4 + 32) = v39;
  *(_QWORD *)(v4 + 40) = v46;
  *(_QWORD *)(v4 + 48) = v44;
  *(_QWORD *)(v4 + 56) = v45;
LABEL_49:
  *(_QWORD *)(v47[0] + 672) = *(_QWORD *)(v47[0] + 664) + 8 * v47[1];
  if (v48 != &v49)
    free(v48);
  *(_QWORD *)(a1 + 784) = v12;
  return v4;
}

uint64_t sub_1C54C7D98(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t)(a2[84] - a2[83]) >> 3;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 16) = a1 + 40;
  v5 = a1 + 16;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 32) = a1 + 104;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  v6 = (_QWORD *)a2[84];
  if (v6 == (_QWORD *)a2[85])
  {
    sub_1C625449C((uint64_t)(a2 + 83), ((uint64_t)v6 - a2[83]) >> 2);
    v6 = (_QWORD *)a2[84];
  }
  a2[84] = v6 + 1;
  *v6 = v5;
  return a1;
}

uint64_t sub_1C54C7E38(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  const void *v28;
  void *v29;
  void *v30;
  int64_t v31;
  _QWORD v33[2];
  void *v34;
  uint64_t v35;

  v1 = *(const char **)a1;
  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 < 2uLL)
    return 0;
  if (!strncmp("Ty", v1, 2uLL))
  {
    *(_QWORD *)a1 = v1 + 2;
    v8 = *(_DWORD *)(a1 + 792);
    *(_DWORD *)(a1 + 792) = v8 + 1;
    v9 = a1 + 808;
    v5 = sub_1C54C413C(a1 + 808, 24);
    *(_BYTE *)(v5 + 8) = 31;
    *(_WORD *)(v5 + 9) = *(_WORD *)(v5 + 9) & 0xF000 | 0x540;
    *(_QWORD *)v5 = &unk_1E816B420;
    *(_DWORD *)(v5 + 12) = 0;
    *(_DWORD *)(v5 + 16) = v8;
    v10 = *(_QWORD **)(*(_QWORD *)(a1 + 672) - 8);
    v11 = (uint64_t *)v10[1];
    if (v11 == (uint64_t *)v10[2])
    {
      sub_1C625449C((uint64_t)v10, ((uint64_t)v11 - *v10) >> 2);
      v11 = (uint64_t *)v10[1];
    }
    v10[1] = v11 + 1;
    *v11 = v5;
    v6 = sub_1C54C413C(v9, 24);
    v2 = v6;
    *(_BYTE *)(v6 + 8) = 32;
    *(_WORD *)(v6 + 9) = *(_WORD *)(v6 + 9) & 0xF000 | 0x500;
    v7 = (char *)&unk_1E816B468;
    goto LABEL_12;
  }
  if (!strncmp("Tn", v1, 2uLL))
  {
    *(_QWORD *)a1 = v1 + 2;
    v12 = *(_DWORD *)(a1 + 796);
    *(_DWORD *)(a1 + 796) = v12 + 1;
    v13 = sub_1C54C413C(a1 + 808, 24);
    *(_BYTE *)(v13 + 8) = 31;
    *(_WORD *)(v13 + 9) = *(_WORD *)(v13 + 9) & 0xF000 | 0x540;
    *(_QWORD *)v13 = &unk_1E816B420;
    *(_DWORD *)(v13 + 12) = 1;
    *(_DWORD *)(v13 + 16) = v12;
    v14 = *(_QWORD **)(*(_QWORD *)(a1 + 672) - 8);
    v15 = (uint64_t *)v14[1];
    if (v15 == (uint64_t *)v14[2])
    {
      sub_1C625449C(*(_QWORD *)(*(_QWORD *)(a1 + 672) - 8), ((uint64_t)v15 - *v14) >> 2);
      v15 = (uint64_t *)v14[1];
    }
    v14[1] = v15 + 1;
    *v15 = v13;
    v16 = sub_1C54C2310(a1);
    if (v16)
    {
      v17 = v16;
      v2 = sub_1C54C413C(a1 + 808, 32);
      *(_BYTE *)(v2 + 8) = 33;
      *(_WORD *)(v2 + 9) = *(_WORD *)(v2 + 9) & 0xF000 | 0x500;
      *(_QWORD *)v2 = &unk_1E816B4D0;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v17;
      return v2;
    }
    return 0;
  }
  if (strncmp("Tt", v1, 2uLL))
  {
    if (strncmp("Tp", v1, 2uLL))
      return 0;
    *(_QWORD *)a1 = v1 + 2;
    v4 = sub_1C54C7E38(a1);
    if (!v4)
      return 0;
    v5 = v4;
    v6 = sub_1C54C413C(a1 + 808, 24);
    v2 = v6;
    *(_BYTE *)(v6 + 8) = 35;
    *(_WORD *)(v6 + 9) = *(_WORD *)(v6 + 9) & 0xF000 | 0x500;
    v7 = (char *)&unk_1E816B570;
LABEL_12:
    *(_QWORD *)v6 = v7 + 16;
    *(_QWORD *)(v6 + 16) = v5;
    return v2;
  }
  *(_QWORD *)a1 = v1 + 2;
  v18 = *(_DWORD *)(a1 + 800);
  *(_DWORD *)(a1 + 800) = v18 + 1;
  v19 = sub_1C54C413C(a1 + 808, 24);
  *(_BYTE *)(v19 + 8) = 31;
  *(_WORD *)(v19 + 9) = *(_WORD *)(v19 + 9) & 0xF000 | 0x540;
  *(_QWORD *)v19 = &unk_1E816B420;
  *(_DWORD *)(v19 + 12) = 2;
  *(_DWORD *)(v19 + 16) = v18;
  v20 = *(_QWORD **)(*(_QWORD *)(a1 + 672) - 8);
  v21 = (uint64_t *)v20[1];
  if (v21 == (uint64_t *)v20[2])
  {
    sub_1C625449C(*(_QWORD *)(*(_QWORD *)(a1 + 672) - 8), ((uint64_t)v21 - *v20) >> 2);
    v21 = (uint64_t *)v20[1];
  }
  v20[1] = v21 + 1;
  *v21 = v19;
  v22 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
  sub_1C54C7D98((uint64_t)v33, (_QWORD *)a1);
  while (1)
  {
    v23 = *(const char **)a1;
    if (*(_QWORD *)(a1 + 8) != *(_QWORD *)a1 && *v23 == 69)
      break;
    v24 = sub_1C54C7E38(a1);
    if (!v24)
    {
      v2 = 0;
      goto LABEL_30;
    }
    v25 = v24;
    v26 = *(uint64_t **)(a1 + 24);
    if (v26 == *(uint64_t **)(a1 + 32))
    {
      sub_1C625449C(a1 + 16, ((uint64_t)v26 - *(_QWORD *)(a1 + 16)) >> 2);
      v26 = *(uint64_t **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 24) = v26 + 1;
    *v26 = v25;
  }
  *(_QWORD *)a1 = v23 + 1;
  v27 = *(_QWORD *)(a1 + 24);
  v28 = (const void *)(*(_QWORD *)(a1 + 16) + 8 * v22);
  v29 = (void *)sub_1C54C413C(a1 + 808, (int)v27 - (int)v28);
  v30 = v29;
  v31 = v27 - (_QWORD)v28;
  if (v31)
    memmove(v29, v28, v31);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16) + 8 * v22;
  v2 = sub_1C54C413C(a1 + 808, 40);
  *(_BYTE *)(v2 + 8) = 34;
  *(_WORD *)(v2 + 9) = *(_WORD *)(v2 + 9) & 0xF000 | 0x500;
  *(_QWORD *)v2 = &unk_1E816B528;
  *(_QWORD *)(v2 + 16) = v19;
  *(_QWORD *)(v2 + 24) = v30;
  *(_QWORD *)(v2 + 32) = v31 >> 3;
LABEL_30:
  *(_QWORD *)(v33[0] + 672) = *(_QWORD *)(v33[0] + 664) + 8 * v33[1];
  if (v34 != &v35)
    free(v34);
  return v2;
}

uint64_t sub_1C54C82D8(unsigned __int8 **a1)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  unsigned __int8 *v6;

  if (a1[1] == *a1)
    return sub_1C54C4B50((uint64_t)a1);
  v2 = **a1;
  if (v2 == 68)
  {
    v3 = sub_1C54C4A6C((uint64_t)a1);
    goto LABEL_7;
  }
  if (v2 != 84)
    return sub_1C54C4B50((uint64_t)a1);
  v3 = sub_1C54C47F4((uint64_t)a1);
LABEL_7:
  v5 = v3;
  if (v3)
  {
    v6 = a1[38];
    if (v6 == a1[39])
    {
      sub_1C625449C((uint64_t)(a1 + 37), (v6 - a1[37]) >> 2);
      v6 = a1[38];
    }
    a1[38] = v6 + 8;
    *(_QWORD *)v6 = v5;
  }
  return v5;
}

uint64_t sub_1C54C8378(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = sub_1C54C41E0((uint64_t)a1);
  if (v2 && a1[1] != *a1 && *(_BYTE *)*a1 == 73)
  {
    v3 = sub_1C54C444C(a1, 0);
    if (v3)
    {
      v4 = v3;
      v5 = sub_1C54C413C((uint64_t)(a1 + 101), 32);
      *(_BYTE *)(v5 + 8) = 41;
      *(_WORD *)(v5 + 9) = *(_WORD *)(v5 + 9) & 0xF000 | 0x540;
      *(_QWORD *)v5 = &unk_1E816BFD0;
      *(_QWORD *)(v5 + 16) = v2;
      *(_QWORD *)(v5 + 24) = v4;
      return v5;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t sub_1C54C8420(unsigned __int8 **a1)
{
  const char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = (const char *)*a1;
  v3 = (char *)a1[1];
  if (v3 == (char *)*a1)
  {
    v4 = 0;
  }
  else
  {
    if (*v2 < 0)
      goto LABEL_6;
    v4 = *(unsigned __int8 *)v2;
  }
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v4 + 60) & 0x400) != 0)
    return sub_1C54C8378(a1);
LABEL_6:
  if ((unint64_t)(v3 - (char *)*a1) < 2)
    goto LABEL_10;
  if (!strncmp("dn", v2, 2uLL))
  {
    *a1 = (unsigned __int8 *)(v2 + 2);
    if (v3 == v2 + 2)
    {
      v10 = 0;
    }
    else
    {
      if (v2[2] < 0)
        goto LABEL_21;
      v10 = *((unsigned __int8 *)v2 + 2);
    }
    if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v10 + 60) & 0x400) != 0)
    {
      v11 = sub_1C54C8378(a1);
LABEL_23:
      v12 = v11;
      if (v11)
      {
        v5 = sub_1C54C413C((uint64_t)(a1 + 101), 24);
        *(_BYTE *)(v5 + 8) = 46;
        *(_WORD *)(v5 + 9) = *(_WORD *)(v5 + 9) & 0xF000 | 0x540;
        *(_QWORD *)v5 = &unk_1E816BB00;
        *(_QWORD *)(v5 + 16) = v12;
        return v5;
      }
      return 0;
    }
LABEL_21:
    v11 = sub_1C54C82D8(a1);
    goto LABEL_23;
  }
  if (!strncmp("on", v2, 2uLL))
    *a1 = (unsigned __int8 *)(v2 + 2);
LABEL_10:
  v5 = sub_1C54C85F0((uint64_t)a1, 0);
  if (!v5 || a1[1] == *a1 || **a1 != 73)
    return v5;
  v6 = sub_1C54C444C(a1, 0);
  if (!v6)
    return 0;
  v7 = v6;
  v8 = sub_1C54C413C((uint64_t)(a1 + 101), 32);
  *(_BYTE *)(v8 + 8) = 41;
  *(_WORD *)(v8 + 9) = *(_WORD *)(v8 + 9) & 0xF000 | 0x540;
  *(_QWORD *)v8 = &unk_1E816BFD0;
  *(_QWORD *)(v8 + 16) = v5;
  *(_QWORD *)(v8 + 24) = v7;
  return v8;
}

uint64_t sub_1C54C85F0(uint64_t a1, _BYTE *a2)
{
  char *v4;
  unsigned int v5;
  char v6;
  int v7;
  BOOL v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  char *v15;
  const char *v16;
  const char *v17;

  v4 = sub_1C54C6D0C((unsigned __int8 **)a1);
  if (!v4)
  {
    v12 = *(unsigned __int8 **)a1;
    v13 = *(unsigned __int8 **)(a1 + 8);
    if ((unint64_t)&v13[-*(_QWORD *)a1] >= 2 && !strncmp("li", *(const char **)a1, 2uLL))
    {
      *(_QWORD *)a1 = v12 + 2;
      result = sub_1C54C41E0(a1);
      if (!result)
        return result;
      v14 = result;
      result = sub_1C54C413C(a1 + 808, 24);
      *(_BYTE *)(result + 8) = 19;
      *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
      v15 = (char *)&unk_1E816BBA0;
    }
    else
    {
      if (v12 == v13)
        return 0;
      if (*v12 != 118)
        return 0;
      *(_QWORD *)a1 = v12 + 1;
      if (v13 == v12 + 1 || v12[1] - 48 > 9)
        return 0;
      *(_QWORD *)a1 = v12 + 2;
      result = sub_1C54C41E0(a1);
      if (!result)
        return result;
      v14 = result;
      result = sub_1C54C413C(a1 + 808, 24);
      *(_BYTE *)(result + 8) = 4;
      *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
      v15 = (char *)&unk_1E816BB48;
    }
    *(_QWORD *)result = v15 + 16;
    *(_QWORD *)(result + 16) = v14;
    return result;
  }
  v5 = v4[2];
  if (v5 != 8)
  {
    if (v5 <= 0xA && (v5 != 4 || (v4[3] & 1) != 0))
    {
      v16 = (const char *)*((_QWORD *)v4 + 1);
      v17 = &v16[strlen(v16)];
      result = sub_1C54C413C(a1 + 808, 32);
      *(_BYTE *)(result + 8) = 7;
      *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
      *(_QWORD *)result = &unk_1E816A8B0;
      *(_QWORD *)(result + 16) = v16;
      *(_QWORD *)(result + 24) = v17;
      return result;
    }
    return 0;
  }
  v6 = *(_BYTE *)(a1 + 776);
  *(_BYTE *)(a1 + 776) = 0;
  v7 = *(unsigned __int8 *)(a1 + 777);
  if (a2)
    v8 = 0;
  else
    v8 = v7 == 0;
  v9 = !v8;
  *(_BYTE *)(a1 + 777) = v9;
  result = sub_1C54C2310(a1);
  if (result)
  {
    v11 = result;
    if (a2)
      *a2 = 1;
    result = sub_1C54C413C(a1 + 808, 24);
    *(_BYTE *)(result + 8) = 4;
    *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
    *(_QWORD *)result = &unk_1E816BB58;
    *(_QWORD *)(result + 16) = v11;
  }
  *(_BYTE *)(a1 + 777) = v7;
  *(_BYTE *)(a1 + 776) = v6;
  return result;
}

uint64_t sub_1C54C8820(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t result;
  __int16 v9;
  unint64_t v10;

  v3 = *(unsigned __int8 **)a1;
  if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
  {
    v5 = a1 + 808;
    while (*v3 == 66)
    {
      *(_QWORD *)a1 = v3 + 1;
      v10 = 0;
      v6 = 0;
      v7 = 0;
      if ((sub_1C54C42B4((unsigned __int8 **)a1, (uint64_t *)&v10) & 1) == 0)
      {
        v7 = *(unsigned __int8 **)a1;
        if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 >= v10)
        {
          v6 = &v7[v10];
          *(_QWORD *)a1 = &v7[v10];
        }
        else
        {
          v6 = 0;
          v7 = 0;
        }
      }
      if (v7 == v6)
        return 0;
      result = sub_1C54C413C(v5, 40);
      v9 = *(_WORD *)(a2 + 9);
      *(_BYTE *)(result + 8) = 8;
      *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | v9 & 0xFC0;
      *(_QWORD *)result = &unk_1E816BCB8;
      *(_QWORD *)(result + 16) = a2;
      *(_QWORD *)(result + 24) = v7;
      *(_QWORD *)(result + 32) = v6;
      v3 = *(unsigned __int8 **)a1;
      a2 = result;
      if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
        return result;
    }
  }
  return a2;
}

uint64_t sub_1C54C8934(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (*(_DWORD *)(a2 + 28) == -1)
  {
    v2 = 0;
    v3 = *(_QWORD *)(result + 24);
    *(_DWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 28) = v3;
  }
  else
  {
    v2 = *(unsigned int *)(a2 + 24);
    v3 = *(_QWORD *)(result + 24);
  }
  if (v3 > v2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8 * v2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  }
  return result;
}

uint64_t sub_1C54C8978(uint64_t a1)
{
  int v2;
  const char *v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  void *v26;
  void *v27;
  int64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  void *v31;
  void *v32;
  int v33;

  v2 = sub_1C54C4768(a1);
  v4 = *(const char **)a1;
  v3 = *(const char **)(a1 + 8);
  if ((unint64_t)&v3[-*(_QWORD *)a1] < 2)
    goto LABEL_2;
  if (!strncmp("Do", *(const char **)a1, 2uLL))
  {
    *(_QWORD *)a1 = v4 + 2;
    v5 = sub_1C54C413C(a1 + 808, 32);
    *(_BYTE *)(v5 + 8) = 7;
    *(_WORD *)(v5 + 9) = *(_WORD *)(v5 + 9) & 0xF000 | 0x540;
    *(_QWORD *)v5 = &unk_1E816A8B0;
    *(_QWORD *)(v5 + 16) = "noexcept";
    *(_QWORD *)(v5 + 24) = "";
    goto LABEL_14;
  }
  if (!strncmp("DO", v4, 2uLL))
  {
    *(_QWORD *)a1 = v4 + 2;
    result = sub_1C54C52C0(a1);
    if (!result)
      return result;
    v22 = *(const char **)a1;
    if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8) || *v22 != 69)
      return 0;
    v23 = result;
    *(_QWORD *)a1 = v22 + 1;
    v5 = sub_1C54C413C(a1 + 808, 24);
    *(_BYTE *)(v5 + 8) = 16;
    *(_WORD *)(v5 + 9) = *(_WORD *)(v5 + 9) & 0xF000 | 0x540;
    *(_QWORD *)v5 = &unk_1E816C188;
    *(_QWORD *)(v5 + 16) = v23;
  }
  else
  {
    if (strncmp("Dw", v4, 2uLL))
    {
LABEL_2:
      v5 = 0;
      goto LABEL_14;
    }
    v6 = v4 + 2;
    *(_QWORD *)a1 = v4 + 2;
    v7 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
    while (v6 == v3 || *v6 != 69)
    {
      result = sub_1C54C2310(a1);
      if (!result)
        return result;
      v9 = result;
      v10 = *(uint64_t **)(a1 + 24);
      if (v10 == *(uint64_t **)(a1 + 32))
      {
        sub_1C625449C(a1 + 16, ((uint64_t)v10 - *(_QWORD *)(a1 + 16)) >> 2);
        v10 = *(uint64_t **)(a1 + 24);
      }
      *(_QWORD *)(a1 + 24) = v10 + 1;
      *v10 = v9;
      v6 = *(const char **)a1;
      v3 = *(const char **)(a1 + 8);
    }
    *(_QWORD *)a1 = v6 + 1;
    v29 = *(_BYTE **)(a1 + 24);
    v30 = (_BYTE *)(*(_QWORD *)(a1 + 16) + 8 * v7);
    v31 = (void *)sub_1C54C413C(a1 + 808, (int)v29 - (int)v30);
    v32 = v31;
    if (v29 != v30)
      memmove(v31, v30, v29 - v30);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16) + 8 * v7;
    v5 = sub_1C54C413C(a1 + 808, 32);
    *(_BYTE *)(v5 + 8) = 17;
    *(_WORD *)(v5 + 9) = *(_WORD *)(v5 + 9) & 0xF000 | 0x540;
    *(_QWORD *)v5 = &unk_1E816C1E0;
    *(_QWORD *)(v5 + 16) = v32;
    *(_QWORD *)(v5 + 24) = (v29 - v30) >> 3;
  }
LABEL_14:
  v12 = *(const char **)a1;
  v11 = *(const char **)(a1 + 8);
  if ((unint64_t)&v11[-*(_QWORD *)a1] >= 2 && !strncmp("Dx", *(const char **)a1, 2uLL))
  {
    v12 += 2;
    *(_QWORD *)a1 = v12;
  }
  if (v12 == v11 || *v12 != 70)
    return 0;
  *(_QWORD *)a1 = v12 + 1;
  if (v12 + 1 != v11 && v12[1] == 89)
    *(_QWORD *)a1 = v12 + 2;
  result = sub_1C54C2310(a1);
  if (!result)
    return result;
  v13 = result;
  v33 = v2;
  v14 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
  v15 = 2;
  while (1)
  {
    while (1)
    {
      v17 = *(const char **)a1;
      v16 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)a1 != v16)
        break;
LABEL_27:
      if ((unint64_t)(v16 - (_QWORD)v17) >= 2)
      {
        if (!strncmp("RE", *(const char **)a1, 2uLL))
        {
          v19 = 1;
          goto LABEL_44;
        }
        v19 = 2;
        if (!strncmp("OE", v17, 2uLL))
        {
          v15 = 2;
          goto LABEL_44;
        }
      }
      result = sub_1C54C2310(a1);
      if (!result)
        return result;
      v20 = result;
      v21 = *(uint64_t **)(a1 + 24);
      if (v21 == *(uint64_t **)(a1 + 32))
      {
        sub_1C625449C(a1 + 16, ((uint64_t)v21 - *(_QWORD *)(a1 + 16)) >> 2);
        v21 = *(uint64_t **)(a1 + 24);
      }
      *(_QWORD *)(a1 + 24) = v21 + 1;
      *v21 = v20;
    }
    v18 = *(unsigned __int8 *)v17;
    if (v18 != 118)
      break;
    *(_QWORD *)a1 = v17 + 1;
  }
  if (v18 != 69)
    goto LABEL_27;
  v19 = 0;
  v15 = 1;
LABEL_44:
  *(_QWORD *)a1 = &v17[v15];
  v24 = *(_QWORD *)(a1 + 24);
  v25 = (const void *)(*(_QWORD *)(a1 + 16) + 8 * v14);
  v26 = (void *)sub_1C54C413C(a1 + 808, (int)v24 - (int)v25);
  v27 = v26;
  v28 = v24 - (_QWORD)v25;
  if (v28)
    memmove(v26, v25, v28);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16) + 8 * v14;
  result = sub_1C54C413C(a1 + 808, 56);
  *(_BYTE *)(result + 8) = 15;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x100;
  *(_QWORD *)result = &unk_1E816C238;
  *(_QWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 24) = v27;
  *(_QWORD *)(result + 32) = v28 >> 3;
  *(_DWORD *)(result + 40) = v33;
  *(_BYTE *)(result + 44) = v19;
  *(_QWORD *)(result + 48) = v5;
  return result;
}

uint64_t sub_1C54C8E04(uint64_t a1)
{
  unsigned __int8 *v2;
  const char *v3;
  const char *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;

  v2 = *(unsigned __int8 **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8) || *v2 != 85)
  {
    v5 = sub_1C54C4768(a1);
    v6 = sub_1C54C2310(a1);
    if (v6 && v5)
    {
      v7 = sub_1C54C413C(a1 + 808, 24);
      v8 = *(_WORD *)(v6 + 9);
      *(_BYTE *)(v7 + 8) = 3;
      *(_WORD *)(v7 + 9) = *(_WORD *)(v7 + 9) & 0xF000 | v8 & 0xFC0;
      *(_QWORD *)v7 = &unk_1E816C340;
      *(_DWORD *)(v7 + 12) = v5;
      *(_QWORD *)(v7 + 16) = v6;
      return v7;
    }
    return v6;
  }
  *(_QWORD *)a1 = v2 + 1;
  v20 = 0;
  v3 = 0;
  v4 = 0;
  if ((sub_1C54C42B4((unsigned __int8 **)a1, (uint64_t *)&v20) & 1) == 0)
  {
    v4 = *(const char **)a1;
    if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 >= v20)
    {
      v3 = &v4[v20];
      *(_QWORD *)a1 = &v4[v20];
    }
    else
    {
      v3 = 0;
      v4 = 0;
    }
  }
  if (v4 == v3)
    return 0;
  if ((unint64_t)(v3 - v4) > 8)
  {
    v11 = strncmp("objcproto", v4, 9uLL);
    v9 = *(unsigned __int8 **)a1;
    v10 = *(unsigned __int8 **)(a1 + 8);
    if (!v11)
    {
      *(_QWORD *)a1 = v4 + 9;
      *(_QWORD *)(a1 + 8) = v3;
      v20 = 0;
      v15 = 0;
      v16 = 0;
      if ((sub_1C54C42B4((unsigned __int8 **)a1, (uint64_t *)&v20) & 1) == 0)
      {
        if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 >= v20)
          v15 = (unsigned __int8 *)(*(_QWORD *)a1 + v20);
        else
          v15 = 0;
        if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 >= v20)
          v16 = *(unsigned __int8 **)a1;
        else
          v16 = 0;
      }
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v10;
      if (v16 == v15)
        return 0;
      v17 = sub_1C54C8E04(a1);
      if (!v17)
        return 0;
      v18 = v17;
      v6 = sub_1C54C413C(a1 + 808, 40);
      *(_BYTE *)(v6 + 8) = 10;
      *(_WORD *)(v6 + 9) = *(_WORD *)(v6 + 9) & 0xF000 | 0x540;
      *(_QWORD *)v6 = &unk_1E816C290;
      *(_QWORD *)(v6 + 16) = v18;
      *(_QWORD *)(v6 + 24) = v16;
      *(_QWORD *)(v6 + 32) = v15;
      return v6;
    }
  }
  else
  {
    v9 = *(unsigned __int8 **)a1;
    v10 = *(unsigned __int8 **)(a1 + 8);
  }
  if (v10 == v9 || *v9 != 73)
  {
    v12 = 0;
  }
  else
  {
    v12 = sub_1C54C444C(a1, 0);
    if (!v12)
      return 0;
  }
  v13 = sub_1C54C8E04(a1);
  if (!v13)
    return 0;
  v14 = v13;
  v6 = sub_1C54C413C(a1 + 808, 48);
  *(_BYTE *)(v6 + 8) = 2;
  *(_WORD *)(v6 + 9) = *(_WORD *)(v6 + 9) & 0xF000 | 0x540;
  *(_QWORD *)v6 = &unk_1E816C2E8;
  *(_QWORD *)(v6 + 16) = v14;
  *(_QWORD *)(v6 + 24) = v4;
  *(_QWORD *)(v6 + 32) = v3;
  *(_QWORD *)(v6 + 40) = v12;
  return v6;
}

uint64_t sub_1C54C9074(const char **a1)
{
  const char *v2;
  const char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  if ((unint64_t)(a1[1] - *a1) < 2)
    goto LABEL_5;
  if (!strncmp("Ts", v2, 2uLL))
  {
    v3 = "struct";
    v4 = "";
LABEL_9:
    *a1 = v2 + 2;
    goto LABEL_10;
  }
  if (!strncmp("Tu", v2, 2uLL))
  {
    v3 = "union";
    v4 = "";
    goto LABEL_9;
  }
  if (!strncmp("Te", v2, 2uLL))
  {
    v3 = "enum";
    v4 = "";
    goto LABEL_9;
  }
LABEL_5:
  v3 = 0;
  v4 = 0;
LABEL_10:
  v5 = sub_1C54C3774((uint64_t)a1, 0);
  if (v5 && v3 != v4)
  {
    v6 = sub_1C54C413C((uint64_t)(a1 + 101), 40);
    *(_BYTE *)(v6 + 8) = 6;
    *(_WORD *)(v6 + 9) = *(_WORD *)(v6 + 9) & 0xF000 | 0x540;
    *(_QWORD *)v6 = &unk_1E816C5A8;
    *(_QWORD *)(v6 + 16) = v3;
    *(_QWORD *)(v6 + 24) = v4;
    *(_QWORD *)(v6 + 32) = v5;
    return v6;
  }
  return v5;
}

uint64_t sub_1C54C9194(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t *v5;
  void *v7;
  uint64_t *v8;
  uint64_t *v9;
  _OWORD v10[4];
  uint64_t v11;

  v1 = *(_DWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 16);
  v7 = v10;
  v8 = (uint64_t *)v10;
  v9 = &v11;
  memset(v10, 0, sizeof(v10));
  for (i = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
        *(_BYTE *)(i + 8) == 12;
        i = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4))
  {
    v4 = *(_QWORD *)(i + 16);
    if (*(_DWORD *)(i + 24) < (signed int)v1)
      v1 = *(_DWORD *)(i + 24);
    v5 = v8;
    if (v8 == v9)
    {
      sub_1C6259DD8((uint64_t)&v7, ((char *)v8 - (_BYTE *)v7) >> 2);
      v5 = v8;
    }
    v8 = v5 + 1;
    *v5 = v4;
    if ((unint64_t)((char *)v8 - (_BYTE *)v7) >= 9
      && v4 == *(_QWORD *)((char *)v7 + (((((char *)v8 - (_BYTE *)v7) >> 1) - 4) & 0xFFFFFFFFFFFFFFF8)))
    {
      break;
    }
  }
  if (v7 != v10)
    free(v7);
  return v1;
}

void *llvm::ms_demangle::Demangler::copyString(uint64_t a1, const void *a2, uint64_t a3)
{
  size_t v4;
  void *v5;

  v4 = a3 - (_QWORD)a2;
  v5 = (void *)sub_1C54C92EC((uint64_t **)(a1 + 16), a3 - (_QWORD)a2);
  memcpy(v5, a2, v4);
  return v5;
}

uint64_t sub_1C54C92EC(uint64_t **a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t *v8;
  uint64_t result;
  uint64_t *v10;

  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1];
  v2[1] = v4 + a2;
  if (v4 + a2 <= v2[2])
    return v3 + v4;
  if (a2 <= 0x1000)
    v7 = 4096;
  else
    v7 = a2;
  v8 = (uint64_t *)operator new();
  result = operator new[]();
  v10 = *a1;
  v8[2] = v7;
  v8[3] = (uint64_t)v10;
  *a1 = v8;
  *v8 = result;
  v8[1] = a2;
  return result;
}

uint64_t sub_1C54C9388(uint64_t a1, char *__s1, uint64_t a3)
{
  size_t v3;
  const char *v4;
  uint64_t v5;
  size_t v6;
  size_t v9;

  v3 = a3 - (_QWORD)__s1;
  v4 = *(const char **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = v5 - *(_QWORD *)a1;
  if (a3 - (uint64_t)__s1 > v6 || strncmp(__s1, v4, v3))
    return 0;
  if (v6 >= v3)
    v9 = v3;
  else
    v9 = v6;
  *(_QWORD *)a1 = &v4[v9];
  *(_QWORD *)(a1 + 8) = v5;
  return 1;
}

uint64_t llvm::ms_demangle::Demangler::demangleUnsigned(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;

  result = llvm::ms_demangle::Demangler::demangleNumber(a1, a2);
  if (v4)
    *(_BYTE *)(a1 + 8) = 1;
  return result;
}

uint64_t llvm::ms_demangle::Demangler::demangleSigned(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;

  result = llvm::ms_demangle::Demangler::demangleNumber(a1, a2);
  if (result < 0)
    *(_BYTE *)(a1 + 8) = 1;
  if (v4)
    return -result;
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleSpecialIntrinsic(uint64_t a1, uint64_t *a2)
{
  const char *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v8;
  uint64_t v10;
  uint64_t *v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  char v22;

  v2 = (const char *)*a2;
  v3 = a2[1];
  v4 = v3 - *a2;
  if (v4 < 3)
    return 0;
  v8 = 3;
  if (!strncmp("?_7", (const char *)*a2, 3uLL))
  {
    v13 = 1;
LABEL_29:
    *a2 = (uint64_t)&v2[v8];
    a2[1] = v3;
    return llvm::ms_demangle::Demangler::demangleSpecialTableSymbolNode(a1, a2, v13);
  }
  v8 = 3;
  if (!strncmp("?_8", v2, 3uLL))
  {
    v13 = 2;
    goto LABEL_29;
  }
  if (!strncmp("?_9", v2, 3uLL))
  {
    *a2 = (uint64_t)(v2 + 3);
    a2[1] = v3;
    return llvm::ms_demangle::Demangler::demangleVcallThunkNode(a1, a2);
  }
  if (!strncmp("?_A", v2, 3uLL))
    goto LABEL_13;
  if (!strncmp("?_B", v2, 3uLL))
  {
    *a2 = (uint64_t)(v2 + 3);
    a2[1] = v3;
    v10 = a1;
    v11 = a2;
    v12 = 0;
    return llvm::ms_demangle::Demangler::demangleLocalStaticGuard(v10, v11, v12);
  }
  if (!strncmp("?_C", v2, 3uLL))
  {
    *a2 = (uint64_t)(v2 + 3);
    a2[1] = v3;
    return llvm::ms_demangle::Demangler::demangleStringLiteral(a1, (uint64_t)a2);
  }
  if (!strncmp("?_P", v2, 3uLL))
  {
LABEL_13:
    *a2 = (uint64_t)(v2 + 3);
    a2[1] = v3;
LABEL_14:
    v5 = 0;
    *(_BYTE *)(a1 + 8) = 1;
    return v5;
  }
  if (v4 < 4)
  {
    v8 = 3;
    if (!strncmp("?_S", v2, 3uLL))
    {
LABEL_33:
      v13 = 16;
      goto LABEL_29;
    }
    return 0;
  }
  if (!strncmp("?_R0", v2, 4uLL))
  {
    *a2 = (uint64_t)(v2 + 4);
    a2[1] = v3;
    v14 = llvm::ms_demangle::Demangler::demangleType(a1, (uint64_t)a2, 2);
    if (!*(_BYTE *)(a1 + 8))
    {
      v15 = v14;
      if (sub_1C54C9388((uint64_t)a2, "@8", (uint64_t)""))
      {
        if (*a2 == a2[1])
        {
          v16 = (uint64_t *)(a1 + 16);
          v5 = sub_1C625A664(v16);
          *(_QWORD *)(v5 + 32) = v15;
          return v5;
        }
      }
    }
    goto LABEL_14;
  }
  if (!strncmp("?_R1", v2, 4uLL))
  {
    *a2 = (uint64_t)(v2 + 4);
    a2[1] = v3;
    return llvm::ms_demangle::Demangler::demangleRttiBaseClassDescriptorNode(a1, (uint64_t *)(a1 + 16), a2);
  }
  if (!strncmp("?_R2", v2, 4uLL))
  {
    *a2 = (uint64_t)(v2 + 4);
    a2[1] = v3;
    v17 = (uint64_t *)(a1 + 16);
    v19 = "";
    return llvm::ms_demangle::Demangler::demangleUntypedVariable(a1, v17, a2, (uint64_t)v18, (uint64_t)v19);
  }
  if (!strncmp("?_R3", v2, 4uLL))
  {
    *a2 = (uint64_t)(v2 + 4);
    a2[1] = v3;
    v17 = (uint64_t *)(a1 + 16);
    v19 = "";
    return llvm::ms_demangle::Demangler::demangleUntypedVariable(a1, v17, a2, (uint64_t)v18, (uint64_t)v19);
  }
  v8 = 4;
  if (!strncmp("?_R4", v2, 4uLL))
  {
    v13 = 15;
    goto LABEL_29;
  }
  v8 = 3;
  if (!strncmp("?_S", v2, 3uLL))
    goto LABEL_33;
  if (!strncmp("?__E", v2, 4uLL))
  {
    *a2 = (uint64_t)(v2 + 4);
    a2[1] = v3;
    v20 = a1;
    v21 = a2;
    v22 = 0;
  }
  else
  {
    if (strncmp("?__F", v2, 4uLL))
    {
      if (strncmp("?__J", v2, 4uLL))
        return 0;
      *a2 = (uint64_t)(v2 + 4);
      a2[1] = v3;
      v10 = a1;
      v11 = a2;
      v12 = 1;
      return llvm::ms_demangle::Demangler::demangleLocalStaticGuard(v10, v11, v12);
    }
    *a2 = (uint64_t)(v2 + 4);
    a2[1] = v3;
    v20 = a1;
    v21 = a2;
    v22 = 1;
  }
  return llvm::ms_demangle::Demangler::demangleInitFiniStub(v20, v21, v22);
}

unint64_t llvm::ms_demangle::Demangler::demangleStringLiteral(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  unint64_t v5;
  void *v6;
  void *v7;
  char *v8;
  int v9;
  int v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  unsigned __int8 *v46;
  int v47;
  const void *v48;
  size_t v49;
  char *v50;
  void *v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  _BYTE v56[128];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v53 = -1;
  v54 = 1;
  v4 = (uint64_t **)(a1 + 16);
  v5 = sub_1C625C51C((uint64_t *)(a1 + 16));
  v6 = malloc_type_malloc(0x400uLL, 0x1E4FE0F9uLL);
  if (!v6)
    std::terminate();
  v7 = v6;
  v51 = v6;
  v52 = xmmword_1C86520E0;
  if ((sub_1C54C9388(a2, "@_", (uint64_t)"") & 1) == 0)
    goto LABEL_32;
  v8 = *(char **)a2;
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
    goto LABEL_32;
  *(_QWORD *)a2 = v8 + 1;
  v9 = *v8;
  if (v9 == 48)
  {
    v10 = 0;
  }
  else
  {
    if (v9 != 49)
      goto LABEL_32;
    v10 = 1;
  }
  v11 = llvm::ms_demangle::Demangler::demangleNumber(a1, a2);
  v13 = 1;
  if (v10)
    v13 = 2;
  if (!*(_BYTE *)(a1 + 8) && !v12)
  {
    v14 = v11;
    if (v11 >= v13)
    {
      v15 = *(char **)a2;
      v16 = *(char **)(a2 + 8);
      v17 = (unint64_t)&v16[-*(_QWORD *)a2];
      if (v16 != *(char **)a2)
      {
        v18 = (char *)memchr(*(void **)a2, 64, (size_t)&v16[-*(_QWORD *)a2]);
        if (v18)
        {
          v19 = (char *)(v18 - v15);
          if (v18 - v15 != -1)
          {
            v20 = v17 >= (unint64_t)(v19 + 1) ? (uint64_t)(v19 + 1) : v17;
            v21 = &v15[v20];
            *(_QWORD *)a2 = &v15[v20];
            *(_QWORD *)(a2 + 8) = v16;
            if (&v15[v20] != v16)
            {
              if (v10)
              {
                *(_DWORD *)(v5 + 44) = 3;
                if (v14 >= 0x41)
                  *(_BYTE *)(v5 + 40) = 1;
                v22 = v14 - 2;
                while (1)
                {
                  v24 = *(char **)a2;
                  v23 = *(_QWORD *)(a2 + 8);
                  if (*(_QWORD *)a2 != v23 && *v24 == 64)
                    break;
                  if ((unint64_t)(v23 - (_QWORD)v24) >= 2)
                  {
                    v25 = llvm::ms_demangle::Demangler::demangleWcharLiteral(a1, a2);
                    if (v22 || *(_BYTE *)(v5 + 40))
                      sub_1C54CA708((uint64_t *)&v51, v25);
                    v22 -= 2;
                    if (!*(_BYTE *)(a1 + 8))
                      continue;
                  }
                  v7 = v51;
                  goto LABEL_32;
                }
                *(_QWORD *)a2 = v24 + 1;
                *(_QWORD *)(a2 + 8) = v23;
                goto LABEL_77;
              }
              if (*v21 == 64)
              {
                v27 = 0;
                v28 = 0;
LABEL_41:
                if (v16 != v21)
                  ++v21;
                *(_QWORD *)a2 = v21;
                *(_QWORD *)(a2 + 8) = v16;
                if (v14 > v28)
                  *(_BYTE *)(v5 + 40) = 1;
                if ((v14 & 1) != 0)
                  goto LABEL_55;
                if (v14 >= 0x20)
                {
                  v33 = 0;
                  if ((_DWORD)v28)
                  {
                    v34 = v56;
                    v35 = v28;
                    do
                    {
                      if (!*v34++)
                        ++v33;
                      --v35;
                    }
                    while (v35);
                  }
                  if ((v14 & 3) != 0 || v33 < 2 * (int)v28 / 3u)
                  {
                    if (v33 < v28 / 3)
                      goto LABEL_55;
LABEL_65:
                    v32 = 2;
                    v31 = 1;
LABEL_66:
                    *(_DWORD *)(v5 + 44) = v31;
                    if (v32 <= v28)
                    {
                      v37 = 0;
                      v38 = v32;
                      v39 = v27 / v32;
                      if (v39 <= 1)
                        v40 = 1;
                      else
                        v40 = v39;
                      v41 = 8 * v32;
                      v42 = v56;
                      v43 = v28 / v32;
                      do
                      {
                        v44 = 0;
                        v45 = 0;
                        v46 = v42;
                        do
                        {
                          v47 = *v46++;
                          v45 |= v47 << v44;
                          v44 += 8;
                        }
                        while (v41 != v44);
                        if (++v37 < v43 || *(_BYTE *)(v5 + 40))
                          sub_1C54CA708((uint64_t *)&v51, v45);
                        v42 += v38;
                      }
                      while (v37 != v40);
                    }
LABEL_77:
                    v48 = v51;
                    v49 = v52;
                    v50 = (char *)sub_1C54C92EC(v4, v52);
                    memcpy(v50, v48, v49);
                    *(_QWORD *)(v5 + 24) = v50;
                    *(_QWORD *)(v5 + 32) = &v50[v49];
                    v7 = v51;
                    goto LABEL_33;
                  }
                }
                else
                {
                  if (!(_DWORD)v28)
                  {
LABEL_55:
                    v31 = 0;
                    v32 = 1;
                    goto LABEL_66;
                  }
                  v29 = 0;
                  v30 = v28;
                  while (!v56[v30 - 1])
                  {
                    ++v29;
                    if (!(_DWORD)--v30)
                    {
                      v29 = v28;
                      break;
                    }
                  }
                  if ((v14 & 3) != 0 || v29 <= 3)
                  {
                    if (v29 < 2)
                      goto LABEL_55;
                    goto LABEL_65;
                  }
                }
                v32 = 4;
                v31 = 2;
                goto LABEL_66;
              }
              v28 = 0;
              while (v28 != 128)
              {
                v56[v28] = llvm::ms_demangle::Demangler::demangleCharLiteral(a1, (unsigned __int8 **)a2);
                v21 = *(char **)a2;
                v16 = *(char **)(a2 + 8);
                if (*(char **)a2 == v16)
                  break;
                ++v28;
                if (*v21 == 64)
                {
                  v27 = v28;
                  goto LABEL_41;
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_32:
  v5 = 0;
  *(_BYTE *)(a1 + 8) = 1;
LABEL_33:
  free(v7);
  return v5;
}

unint64_t llvm::ms_demangle::Demangler::demangleFunctionIdentifierCode(uint64_t a1, uint64_t *a2, int a3)
{
  char *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  int v12;
  BOOL v13;
  uint64_t v15;
  char v16;
  char *v17;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;

  v3 = (char *)*a2;
  if (*a2 == a2[1])
  {
    v6 = 0;
    *(_BYTE *)(a1 + 8) = 1;
    return v6;
  }
  if (a3 == 2)
  {
    *a2 = (uint64_t)(v3 + 1);
    v4 = *v3;
    if ((_DWORD)v4 == 75)
      return llvm::ms_demangle::Demangler::demangleLiteralOperatorIdentifier(a1, a2);
    v7 = (uint64_t *)(a1 + 16);
    if ((v4 - 48) >= 0xA && (v4 - 65) >= 0x1A)
    {
      v16 = 0;
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      v15 = -55;
      if ((v4 - 48) < 0xA)
        v15 = -48;
      v16 = byte_1C8652202[v15 + v4];
    }
    v21 = v16;
    v17 = &v21;
    return sub_1C625B408(v7, v17);
  }
  if (a3 == 1)
  {
    v7 = (uint64_t *)(a1 + 16);
    *a2 = (uint64_t)(v3 + 1);
    v8 = *v3;
    if ((v8 - 48) >= 0xA && (v8 - 65) >= 0x1A)
    {
      v11 = 0;
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      v10 = -55;
      if ((v8 - 48) < 0xA)
        v10 = -48;
      v11 = asc_1C86521DE[v10 + v8];
    }
    v22 = v11;
    v17 = &v22;
    return sub_1C625B408(v7, v17);
  }
  *a2 = (uint64_t)(v3 + 1);
  v12 = *v3;
  if ((v12 - 48) < 2)
  {
    v13 = v12 == 49;
    v6 = sub_1C625B1D8((uint64_t *)(a1 + 16));
    *(_BYTE *)(v6 + 32) = v13;
    return v6;
  }
  if (v12 != 66)
  {
    v7 = (uint64_t *)(a1 + 16);
    if ((v12 - 48) >= 0xA && (v12 - 65) >= 0x1Au)
    {
      v20 = 0;
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      v19 = -55;
      if ((v12 - 48) < 0xAu)
        v19 = -48;
      v20 = byte_1C86521BA[v19 + v12];
    }
    v23 = v20;
    v17 = &v23;
    return sub_1C625B408(v7, v17);
  }
  return sub_1C625B294((uint64_t *)(a1 + 16));
}

unint64_t llvm::ms_demangle::Demangler::demangleStructorIdentifier(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t result;

  result = sub_1C625B1D8((uint64_t *)(a1 + 16));
  *(_BYTE *)(result + 32) = a3;
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleConversionOperatorIdentifier(uint64_t a1)
{
  return sub_1C625B294((uint64_t *)(a1 + 16));
}

unint64_t llvm::ms_demangle::Demangler::demangleLiteralOperatorIdentifier(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  result = sub_1C625B34C((uint64_t *)(a1 + 16));
  v5 = *a2;
  v6 = a2[1];
  v7 = v6 - *a2;
  if (v6 == *a2)
    goto LABEL_15;
  v8 = 0;
  v9 = v7 <= 1 ? 1 : v6 - *a2;
  while (*(_BYTE *)(v5 + v8) != 64)
  {
    if (v9 == ++v8)
      goto LABEL_15;
  }
  if (!v8)
  {
LABEL_15:
    v11 = 0;
    v5 = 0;
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    if (v7 >= v8)
      v10 = v8;
    else
      v10 = v6 - *a2;
    v11 = v5 + v10;
    if (v7 >= v8 + 1)
      v7 = v8 + 1;
    *a2 = v5 + v7;
    a2[1] = v6;
  }
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = v11;
  return result;
}

char *llvm::ms_demangle::Demangler::demangleSimpleString(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = *(char **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 == *(_QWORD *)a2)
    goto LABEL_16;
  v6 = 0;
  v7 = v5 <= 1 ? 1 : v3 - *(_QWORD *)a2;
  while (v4[v6] != 64)
  {
    if (v7 == ++v6)
      goto LABEL_16;
  }
  if (!v6)
  {
LABEL_16:
    v4 = 0;
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    if (v5 >= v6)
      v8 = v6;
    else
      v8 = v3 - *(_QWORD *)a2;
    if (v5 >= v6 + 1)
      v5 = v6 + 1;
    *(_QWORD *)a2 = &v4[v5];
    *(_QWORD *)(a2 + 8) = v3;
    if (a3)
      llvm::ms_demangle::Demangler::memorizeString(a1, v4, (uint64_t)&v4[v8]);
  }
  return v4;
}

uint64_t llvm::ms_demangle::Demangler::translateIntrinsicFunctionCode(uint64_t a1, unsigned __int8 a2, int a3)
{
  unsigned int v3;
  uint64_t v5;
  uint64_t result;

  v3 = a2 - 48;
  if (v3 >= 0xA && a2 - 65 >= 0x1A)
  {
    result = 0;
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    v5 = -55;
    if (v3 < 0xA)
      v5 = -48;
    return *((unsigned __int8 *)*(&off_1E816C7D8 + a3) + v5 + a2);
  }
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleEncodedSymbol(uint64_t a1, char **a2, uint64_t a3)
{
  char *v4;
  unint64_t result;
  uint64_t v7;

  v4 = *a2;
  if (*a2 == a2[1])
  {
    result = 0;
    *(_BYTE *)(a1 + 8) = 1;
  }
  else if ((*v4 - 48) > 4)
  {
    result = llvm::ms_demangle::Demangler::demangleFunctionEncoding(a1, a2);
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 16) + 8 * *(_QWORD *)(*(_QWORD *)(a3 + 16) + 24) - 8);
    if (*(_DWORD *)(v7 + 8) == 9 && result != 0)
      *(_QWORD *)(v7 + 24) = *(_QWORD *)(*(_QWORD *)(result + 24) + 32);
  }
  else
  {
    *a2 = v4 + 1;
    return llvm::ms_demangle::Demangler::demangleVariableEncoding(a1, a2, *v4 - 47);
  }
  return result;
}

uint64_t llvm::ms_demangle::Demangler::demangleVariableStorageClass(uint64_t a1, _QWORD *a2)
{
  _BYTE *v2;

  v2 = (_BYTE *)(*a2)++;
  return (*v2 - 47);
}

unint64_t llvm::ms_demangle::Demangler::demangleMD5Name(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v7;
  char *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;

  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v5 < 4
    || ((v7 = (char *)memchr((void *)(v3 + 3), 64, v5 - 3), v8 = &v7[-v3], v7) ? (v9 = v8 + 1 == 0) : (v9 = 1), v9))
  {
    v10 = 0;
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    if (v5 >= (unint64_t)(v8 + 1))
      v12 = (unint64_t)(v8 + 1);
    else
      v12 = v5;
    *a2 = v3 + v12;
    a2[1] = v4;
    sub_1C54C9388((uint64_t)a2, "??_R4@", (uint64_t)"");
    v13 = *a2;
    v14 = (uint64_t *)(a1 + 16);
    v15 = 1;
    v10 = sub_1C625B64C(v14, &v15);
    *(_QWORD *)(v10 + 16) = sub_1C54CA19C(v14, v3, v13);
  }
  return v10;
}

unint64_t sub_1C54CA19C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v6 = sub_1C625A050(a1);
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = a3;
  v7 = sub_1C625C858(a1);
  v8 = sub_1C625D9F0(a1);
  *(_QWORD *)(v7 + 16) = v8;
  *(_QWORD *)(v8 + 24) = 1;
  v9 = (_QWORD *)sub_1C54CB1D8(a1, 1uLL);
  *(_QWORD *)(*(_QWORD *)(v7 + 16) + 16) = v9;
  *v9 = v6;
  return v7;
}

unint64_t llvm::ms_demangle::Demangler::parseTagUniqueName(uint64_t a1, _QWORD *a2)
{
  if (sub_1C54C9388((uint64_t)a2, ".?A", (uint64_t)"")
    && (sub_1C54C9388((uint64_t)a2, ".?A", (uint64_t)""), *a2 != a2[1]))
  {
    return llvm::ms_demangle::Demangler::demangleClassType(a1, (uint64_t)a2);
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::ms_demangle::Demangler::demangleNumber(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_BYTE **)a2;
  v2 = *(_BYTE **)(a2 + 8);
  if (*(_BYTE **)a2 == v2)
  {
    v4 = *(_BYTE **)a2;
  }
  else
  {
    if (*v3 == 63)
    {
      *(_QWORD *)a2 = ++v3;
      *(_QWORD *)(a2 + 8) = v2;
    }
    v4 = v2;
  }
  if (v3 != v2 && ((char)*v3 & 0x80000000) == 0)
  {
    v5 = *v3;
    if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v5 + 60) & 0x400) != 0)
    {
      v8 = v5 - 47;
      if (v4 != v3)
        ++v3;
LABEL_23:
      *(_QWORD *)a2 = v3;
      *(_QWORD *)(a2 + 8) = v4;
      return v8;
    }
  }
  v6 = v4 - v3;
  if (v4 != v3)
  {
    v7 = 0;
    v8 = 0;
    if (v6 <= 1)
      v9 = 1;
    else
      v9 = v4 - v3;
    while (1)
    {
      v10 = (char)v3[v7];
      if (v10 == 64)
        break;
      if ((v10 - 65) <= 0xFu)
      {
        v8 = (v10 - 65) + 16 * v8;
        if (v9 != ++v7)
          continue;
      }
      goto LABEL_16;
    }
    if (v6 >= v7 + 1)
      v6 = v7 + 1;
    v3 += v6;
    goto LABEL_23;
  }
LABEL_16:
  v8 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  return v8;
}

uint64_t llvm::ms_demangle::Demangler::memorizeString(uint64_t result, char *__s1, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;

  v3 = *(_QWORD *)(result + 192);
  if (v3 <= 9)
  {
    v6 = result;
    if (v3)
    {
      v7 = a3 - (_QWORD)__s1;
      v8 = result + 112;
      while (1)
      {
        v9 = *(const char **)(*(_QWORD *)v8 + 24);
        if (v7 == *(_QWORD *)(*(_QWORD *)v8 + 32) - (_QWORD)v9)
        {
          result = strncmp(__s1, v9, a3 - (_QWORD)__s1);
          if (!(_DWORD)result)
            break;
        }
        v8 += 8;
        if (!--v3)
          goto LABEL_8;
      }
    }
    else
    {
LABEL_8:
      result = sub_1C625A050((uint64_t *)(v6 + 16));
      *(_QWORD *)(result + 24) = __s1;
      *(_QWORD *)(result + 32) = a3;
      v10 = *(_QWORD *)(v6 + 192);
      *(_QWORD *)(v6 + 192) = v10 + 1;
      *(_QWORD *)(v6 + 8 * v10 + 112) = result;
    }
  }
  return result;
}

uint64_t llvm::ms_demangle::Demangler::demangleBackRefName(uint64_t a1, char **a2)
{
  char *v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *a2;
  v3 = **a2 - 48;
  if (v3 >= *(_QWORD *)(a1 + 192))
  {
    v4 = 0;
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    if (a2[1] != v2)
      ++v2;
    *a2 = v2;
    return *(_QWORD *)(a1 + 8 * v3 + 112);
  }
  return v4;
}

uint64_t llvm::ms_demangle::Demangler::demangleUnqualifiedSymbolName(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  char *v13;
  uint64_t v14;

  v6 = (_BYTE *)*a2;
  v7 = (_BYTE *)a2[1];
  if ((_BYTE *)*a2 == v7
    || (char)*v6 < 0
    || (v8 = *v6, (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v8 + 60) & 0x400) == 0))
  {
    if ((unint64_t)(v7 - v6) >= 2 && !strncmp("?$", (const char *)*a2, 2uLL))
    {
      return llvm::ms_demangle::Demangler::demangleTemplateInstantiationName(a1, (int)a2);
    }
    else if (v6 != v7 && *v6 == 63)
    {
      return llvm::ms_demangle::Demangler::demangleFunctionIdentifierCode(a1, a2);
    }
    else
    {
      v9 = llvm::ms_demangle::Demangler::demangleSimpleString(a1, (uint64_t)a2, (a3 >> 1) & 1);
      if (*(_BYTE *)(a1 + 8))
      {
        return 0;
      }
      else
      {
        v13 = v9;
        v14 = v10;
        result = sub_1C625A050((uint64_t *)(a1 + 16));
        *(_QWORD *)(result + 24) = v13;
        *(_QWORD *)(result + 32) = v14;
      }
    }
  }
  else
  {
    v12 = v8 - 48;
    if (v12 >= *(_QWORD *)(a1 + 192))
    {
      result = 0;
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      *a2 = (uint64_t)(v6 + 1);
      return *(_QWORD *)(a1 + 8 * v12 + 112);
    }
  }
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleSimpleName(uint64_t a1, uint64_t a2, int a3)
{
  char *v4;
  uint64_t v5;
  unint64_t result;
  char *v7;
  uint64_t v8;

  v4 = llvm::ms_demangle::Demangler::demangleSimpleString(a1, a2, a3);
  if (*(_BYTE *)(a1 + 8))
    return 0;
  v7 = v4;
  v8 = v5;
  result = sub_1C625A050((uint64_t *)(a1 + 16));
  *(_QWORD *)(result + 24) = v7;
  *(_QWORD *)(result + 32) = v8;
  return result;
}

uint64_t llvm::ms_demangle::Demangler::demangleCharLiteral(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;

  v3 = *a2;
  v2 = a2[1];
  if (*a2 == v2 || *v3 != 63)
  {
    *a2 = v3 + 1;
    return *v3;
  }
  *a2 = v3 + 1;
  a2[1] = v2;
  if (v3 + 1 == v2)
    goto LABEL_18;
  v4 = v3[1];
  if ((_DWORD)v4 != 36)
  {
    if ((v4 & 0x80) == 0)
    {
      if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v4 + 60) & 0x400) != 0)
      {
        v7 = asc_1C8722527[v4 - 48];
        goto LABEL_15;
      }
      if ((v4 - 97) <= 0x19)
      {
        v7 = byte_1C8652226[v4 - 97];
LABEL_15:
        *a2 = v3 + 2;
        a2[1] = v2;
        return v7;
      }
      if ((v4 - 65) <= 0x19)
      {
        v7 = byte_1C8652240[v4 - 65];
        goto LABEL_15;
      }
    }
LABEL_18:
    v7 = 0;
    *(_BYTE *)(a1 + 8) = 1;
    return v7;
  }
  *a2 = v3 + 2;
  a2[1] = v2;
  if ((unint64_t)(v2 - (v3 + 2)) < 2)
    goto LABEL_18;
  v5 = v3[2] - 65;
  if (v5 > 0xFu)
    goto LABEL_18;
  v6 = v3[3] - 65;
  if (v6 > 0xFu)
    goto LABEL_18;
  *a2 = v3 + 4;
  a2[1] = v2;
  return (v6 | (16 * v5));
}

uint64_t sub_1C54CA708(uint64_t *a1, int a2)
{
  unsigned int v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  unsigned int v14;
  char v15;
  char v16;
  char *v17;
  const char *v18;
  size_t v19;
  _QWORD v20[2];
  char v21;
  uint64_t v22;

  v2 = a2;
  v22 = *MEMORY[0x1E0C80C00];
  if (a2 <= 33)
  {
    switch(a2)
    {
      case 0:
        result = (uint64_t)sub_1C54C1634(a1, 2);
        v5 = *a1;
        v6 = a1[1];
        v7 = 12380;
        goto LABEL_17;
      case 7:
        result = (uint64_t)sub_1C54C1634(a1, 2);
        v5 = *a1;
        v6 = a1[1];
        v7 = 24924;
        goto LABEL_17;
      case 8:
        result = (uint64_t)sub_1C54C1634(a1, 2);
        v5 = *a1;
        v6 = a1[1];
        v7 = 25180;
        goto LABEL_17;
      case 9:
        result = (uint64_t)sub_1C54C1634(a1, 2);
        v5 = *a1;
        v6 = a1[1];
        v7 = 29788;
        goto LABEL_17;
      case 10:
        result = (uint64_t)sub_1C54C1634(a1, 2);
        v5 = *a1;
        v6 = a1[1];
        v7 = 28252;
        goto LABEL_17;
      case 11:
        result = (uint64_t)sub_1C54C1634(a1, 2);
        v5 = *a1;
        v6 = a1[1];
        v7 = 30300;
        goto LABEL_17;
      case 12:
        result = (uint64_t)sub_1C54C1634(a1, 2);
        v5 = *a1;
        v6 = a1[1];
        v7 = 26204;
        goto LABEL_17;
      case 13:
        result = (uint64_t)sub_1C54C1634(a1, 2);
        v5 = *a1;
        v6 = a1[1];
        v7 = 29276;
        goto LABEL_17;
      default:
        goto LABEL_20;
    }
  }
  switch(a2)
  {
    case '"':
      result = (uint64_t)sub_1C54C1634(a1, 2);
      v5 = *a1;
      v6 = a1[1];
      v7 = 8796;
      goto LABEL_17;
    case '\'':
      result = (uint64_t)sub_1C54C1634(a1, 2);
      v5 = *a1;
      v6 = a1[1];
      v7 = 10076;
      goto LABEL_17;
    case '\\':
      result = (uint64_t)sub_1C54C1634(a1, 2);
      v5 = *a1;
      v6 = a1[1];
      v7 = 23644;
LABEL_17:
      *(_WORD *)(v5 + v6) = v7;
      v8 = a1[1] + 2;
LABEL_18:
      a1[1] = v8;
      return result;
  }
LABEL_20:
  if ((a2 - 32) <= 0x5E)
  {
    result = (uint64_t)sub_1C54C1634(a1, 1);
    v9 = *a1;
    v10 = a1[1];
    a1[1] = v10 + 1;
    *(_BYTE *)(v9 + v10) = v2;
    return result;
  }
  v20[0] = 0;
  v20[1] = 0;
  v21 = 0;
  if (a2)
  {
    LODWORD(v11) = 15;
    do
    {
      v12 = v11;
      v13 = 1;
      v11 = (int)v11;
      do
      {
        v14 = v2;
        v15 = v13;
        if ((v2 & 0xF) >= 0xA)
          v16 = 55;
        else
          v16 = 48;
        *((_BYTE *)v20 + v11--) = v16 + (v2 & 0xF);
        v2 >>= 4;
        --v12;
        v13 = 0;
      }
      while ((v15 & 1) != 0);
    }
    while (v14 >= 0x10);
  }
  else
  {
    v12 = 15;
  }
  v17 = (char *)v20 + v12;
  *(_WORD *)(v17 - 1) = 30812;
  v18 = v17 - 1;
  result = strlen(v18);
  if (result)
  {
    v19 = result;
    sub_1C54C1634(a1, result);
    result = (uint64_t)memcpy((void *)(*a1 + a1[1]), v18, v19);
    v8 = a1[1] + v19;
    goto LABEL_18;
  }
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleAnonymousNamespaceName(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  BOOL v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1C54C9388(a2, "?A", (uint64_t)"");
  v4 = sub_1C625A050((uint64_t *)(a1 + 16));
  *(_QWORD *)(v4 + 32) = "";
  v6 = *(char **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = v5 - *(_QWORD *)a2;
  if (v5 == *(_QWORD *)a2
    || ((v8 = v4, v9 = memchr(*(void **)a2, 64, v5 - *(_QWORD *)a2), v10 = v9 - v6, v9)
      ? (v11 = v10 == -1)
      : (v11 = 1),
        v11))
  {
    v8 = 0;
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    if (v7 >= v10)
      v12 = v9 - v6;
    else
      v12 = v7;
    llvm::ms_demangle::Demangler::memorizeString(a1, v6, (uint64_t)&v6[v12]);
    v13 = v10 + *(_QWORD *)a2 + 1;
    v14 = v13 + *(_QWORD *)(a2 + 8) + ~v10 - *(_QWORD *)a2;
    *(_QWORD *)a2 = v13;
    *(_QWORD *)(a2 + 8) = v14;
  }
  return v8;
}

unint64_t llvm::ms_demangle::Demangler::demangleUnqualifiedTypeName(uint64_t a1, const char **a2, int a3)
{
  const char *v6;
  const char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t result;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  if (v6 == v7
    || *v6 < 0
    || (v8 = *(unsigned __int8 *)v6, (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v8 + 60) & 0x400) == 0))
  {
    if ((unint64_t)(v7 - v6) >= 2 && !strncmp("?$", v6, 2uLL))
    {
      return llvm::ms_demangle::Demangler::demangleTemplateInstantiationName(a1, (int)a2);
    }
    else
    {
      v9 = llvm::ms_demangle::Demangler::demangleSimpleString(a1, (uint64_t)a2, a3);
      if (*(_BYTE *)(a1 + 8))
      {
        return 0;
      }
      else
      {
        v12 = v9;
        v13 = v10;
        result = sub_1C625A050((uint64_t *)(a1 + 16));
        *(_QWORD *)(result + 24) = v12;
        *(_QWORD *)(result + 32) = v13;
      }
    }
  }
  else if ((unint64_t)(v8 - 48) >= *(_QWORD *)(a1 + 192))
  {
    result = 0;
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    *a2 = v6 + 1;
    return *(_QWORD *)(a1 + 8 * (v8 - 48) + 112);
  }
  return result;
}

uint64_t llvm::ms_demangle::Demangler::demangleNameScopePiece(uint64_t a1, uint64_t *a2)
{
  const char *v4;
  const char *v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned __int8 *v8;
  size_t v9;
  _BYTE *v10;
  size_t v11;
  int v13;
  uint64_t result;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned __int8 *v24;

  v4 = (const char *)*a2;
  v5 = (const char *)a2[1];
  if ((const char *)*a2 == v5
    || *v4 < 0
    || (v6 = *(unsigned __int8 *)v4, (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v6 + 60) & 0x400) == 0))
  {
    if ((unint64_t)(v5 - v4) >= 2)
    {
      if (!strncmp("?$", (const char *)*a2, 2uLL))
        return llvm::ms_demangle::Demangler::demangleTemplateInstantiationName(a1, a2, 1);
      if (!strncmp("?A", v4, 2uLL))
        return llvm::ms_demangle::Demangler::demangleAnonymousNamespaceName(a1, (uint64_t)a2);
    }
    if (v4 != v5)
    {
      v7 = v4 + 1;
      if (*v4 == 63)
      {
        v8 = (unsigned __int8 *)(v4 + 1);
        v9 = v5 - v7;
        if (v9)
        {
          v10 = memchr(v7, 63, v9);
          v11 = v10 - v8;
          if (v10 && v11 != -1)
          {
            if (v9 < v11)
              v11 = v9;
            if (v11)
            {
              if (v11 == 1)
              {
                v13 = *v8;
                if (v13 == 64 || (v13 - 48) < 0xA)
                  return llvm::ms_demangle::Demangler::demangleLocallyScopedNamePiece(a1, a2);
              }
              else
              {
                v17 = &v8[v11];
                v19 = *(v17 - 1);
                v18 = v17 - 1;
                if (v19 == 64 && *v8 - 81 >= 0xFFFFFFF1)
                {
                  if (v18 == v8)
                    v24 = v8;
                  else
                    v24 = v8 + 1;
                  while (v24 != v18)
                  {
                    if (*v24 - 81 < 0xFFFFFFF0)
                      goto LABEL_30;
                    if (v18 != v24)
                      ++v24;
                  }
                  return llvm::ms_demangle::Demangler::demangleLocallyScopedNamePiece(a1, a2);
                }
              }
            }
          }
        }
      }
    }
LABEL_30:
    v20 = llvm::ms_demangle::Demangler::demangleSimpleString(a1, (uint64_t)a2, 1);
    if (*(_BYTE *)(a1 + 8))
    {
      return 0;
    }
    else
    {
      v22 = v20;
      v23 = v21;
      result = sub_1C625A050((uint64_t *)(a1 + 16));
      *(_QWORD *)(result + 24) = v22;
      *(_QWORD *)(result + 32) = v23;
    }
  }
  else
  {
    v16 = v6 - 48;
    if (v16 >= *(_QWORD *)(a1 + 192))
    {
      result = 0;
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      *a2 = (uint64_t)(v4 + 1);
      return *(_QWORD *)(a1 + 8 * v16 + 112);
    }
  }
  return result;
}

unint64_t sub_1C54CAD70(uint64_t *a1, _QWORD *a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;

  v6 = sub_1C625D9F0(a1);
  *(_QWORD *)(v6 + 24) = a3;
  *(_QWORD *)(v6 + 16) = sub_1C54CB1D8(a1, a3);
  if (a3)
  {
    v7 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * v7) = *a2;
      a2 = (_QWORD *)a2[1];
      ++v7;
    }
    while (a3 != v7);
  }
  return v6;
}

unint64_t llvm::ms_demangle::Demangler::demangleFunctionType(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char v17;

  v6 = sub_1C625D04C((uint64_t *)(a1 + 16));
  v7 = v6;
  if (a3)
  {
    v8 = llvm::ms_demangle::Demangler::demanglePointerExtQualifiers(v6, a2);
    *(_BYTE *)(v7 + 12) = v8;
    v10 = *(char **)a2;
    v9 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 != v9)
    {
      v11 = *v10;
      if (v11 == 71)
      {
        v12 = 1;
        goto LABEL_8;
      }
      if (v11 == 72)
      {
        v12 = 2;
LABEL_8:
        *(_QWORD *)a2 = v10 + 1;
        *(_QWORD *)(a2 + 8) = v9;
        goto LABEL_9;
      }
    }
    v12 = 0;
LABEL_9:
    *(_DWORD *)(v7 + 24) = v12;
    *(_BYTE *)(v7 + 12) = v8 | llvm::ms_demangle::Demangler::demangleQualifiers(a1, (char **)a2);
  }
  *(_BYTE *)(v7 + 20) = llvm::ms_demangle::Demangler::demangleCallingConvention(a1, (char **)a2);
  v14 = *(char **)a2;
  v13 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 == v13 || *v14 != 64)
  {
    *(_QWORD *)(v7 + 32) = llvm::ms_demangle::Demangler::demangleType(a1, a2);
  }
  else
  {
    *(_QWORD *)a2 = v14 + 1;
    *(_QWORD *)(a2 + 8) = v13;
  }
  *(_QWORD *)(v7 + 48) = llvm::ms_demangle::Demangler::demangleFunctionParameterList(a1, (unsigned __int8 **)a2, (_BYTE *)(v7 + 40));
  v15 = *(char **)a2;
  v16 = *(char **)(a2 + 8);
  if ((unint64_t)&v16[-*(_QWORD *)a2] >= 2 && !strncmp("_E", *(const char **)a2, 2uLL))
  {
    *(_QWORD *)a2 = v15 + 2;
    *(_QWORD *)(a2 + 8) = v16;
    v17 = 1;
  }
  else if (v15 == v16 || *v15 != 90)
  {
    v17 = 0;
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    v17 = 0;
    *(_QWORD *)a2 = v15 + 1;
    *(_QWORD *)(a2 + 8) = v16;
  }
  *(_BYTE *)(v7 + 56) = v17;
  return v7;
}

uint64_t sub_1C54CAF54(_QWORD *a1)
{
  uint64_t result;
  _BYTE *v3;

  if ((sub_1C54C9388((uint64_t)a1, "$$Q", (uint64_t)"") & 1) != 0)
    return 0x300000000;
  v3 = (_BYTE *)(*a1)++;
  switch(*v3)
  {
    case 'P':
      result = 0x100000000;
      break;
    case 'Q':
      result = 0x100000001;
      break;
    case 'R':
      result = 0x100000002;
      break;
    case 'S':
      result = 0x100000003;
      break;
    default:
      result = 0x200000000;
      break;
  }
  return result;
}

_BYTE *llvm::microsoftDemangle(const char *a1, _QWORD *a2, _BYTE *a3, uint64_t *a4, int *a5, unsigned int a6)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _BYTE *v16;
  int v17;
  uint64_t v19;
  uint64_t v20[2];
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t (**v26)();
  unsigned __int8 v27;
  _QWORD v28[24];

  v26 = &off_1E816C7C8;
  v27 = 0;
  v12 = operator new();
  *(_QWORD *)v12 = operator new[]();
  *(_QWORD *)(v12 + 24) = 0;
  *(_OWORD *)(v12 + 8) = xmmword_1C8652130;
  v28[0] = v12;
  v28[11] = 0;
  v28[22] = 0;
  v24 = -1;
  v25 = 1;
  v20[0] = (uint64_t)a1;
  v20[1] = (uint64_t)&a1[strlen(a1)];
  v13 = llvm::ms_demangle::Demangler::parse((uint64_t)&v26, v20);
  v14 = v27;
  if (a2 && !v27)
    *a2 = v20[0] - (_QWORD)a1;
  if ((a6 & 1) != 0)
    llvm::ms_demangle::Demangler::dumpBackReferences((llvm::ms_demangle::Demangler *)&v26);
  if (v14)
  {
    v16 = 0;
    v17 = -2;
    if (!a5)
      goto LABEL_13;
LABEL_12:
    *a5 = v17;
    goto LABEL_13;
  }
  if (a3)
  {
    v15 = *a4;
  }
  else
  {
    v15 = 1024;
    a3 = malloc_type_malloc(0x400uLL, 0x1E4FE0F9uLL);
    if (!a3)
    {
      v16 = 0;
      v17 = -1;
      if (!a5)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  v21 = a3;
  v22 = 0;
  v23 = v15;
  (*(void (**)(uint64_t, _BYTE **, _QWORD))(*(_QWORD *)v13 + 16))(v13, &v21, a6 & 0x20 | (a6 >> 2) & 1 | (a6 >> 1) & 8 | (2 * a6) & 0x14);
  sub_1C54C1634(&v21, 1);
  v19 = v22++;
  v21[v19] = 0;
  if (a4)
    *a4 = v22;
  v17 = 0;
  v16 = v21;
  if (a5)
    goto LABEL_12;
LABEL_13:
  v26 = &off_1E816C7C8;
  sub_1C625DAE8(v28);
  return v16;
}

unint64_t sub_1C54CB1D8(uint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  size_t v12;

  v3 = 8 * a2;
  v4 = *a1;
  v5 = (*(_QWORD *)(*a1 + 8) + *(_QWORD *)*a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = 8 * a2 - *(_QWORD *)*a1 + v5;
  *(_QWORD *)(v4 + 8) = v6;
  if (v6 <= *(_QWORD *)(v4 + 16))
  {
    if (a2 >> 61)
      v12 = -1;
    else
      v12 = 8 * a2;
    v10 = (void *)v5;
  }
  else
  {
    if (v3 <= 0x1000)
      v8 = 4096;
    else
      v8 = 8 * a2;
    v9 = (_QWORD *)operator new();
    v10 = (void *)operator new[]();
    v5 = (unint64_t)v10;
    v11 = *a1;
    v9[2] = v8;
    v9[3] = v11;
    *a1 = (uint64_t)v9;
    *v9 = v10;
    v9[1] = v3;
    if (a2 >> 61)
      v12 = -1;
    else
      v12 = v3;
  }
  bzero(v10, v12);
  return v5;
}

void llvm::ms_demangle::Node::toString(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = 0uLL;
  v9 = -1;
  v10 = 1;
  v6 = malloc_type_malloc(0x400uLL, 0x1E4FE0F9uLL);
  if (v6)
  {
    v7 = v6;
    v8 = xmmword_1C86520E0;
  }
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v7, a2);
  sub_1C4E61270(a3, (char *)v7, (char *)v7 + v8, v8);
  free(v7);
}

uint64_t *sub_1C54CB358(uint64_t *result, int a2, uint64_t a3, int a4)
{
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2)
  {
    v6 = result;
    v7 = result[1];
    v8 = sub_1C54CB720(result, a2, 1, a3);
    v9 = sub_1C54CB720(v6, a2, 2, v8);
    result = (uint64_t *)sub_1C54CB720(v6, a2, 32, v9);
    if (a4)
    {
      if (v6[1] > v7)
      {
        result = sub_1C54C1634(v6, 1);
        *(_BYTE *)(*v6 + v6[1]++) = 32;
      }
    }
  }
  return result;
}

unint64_t sub_1C54CB3F4(uint64_t *a1, int a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  result = sub_1C54CB674((unint64_t)a1);
  switch(a2)
  {
    case 1:
      v5 = 7;
      result = (unint64_t)sub_1C54C1634(a1, 7);
      v6 = *a1;
      v8 = a1[1];
      v7 = a1 + 1;
      v9 = v6 + v8;
      *(_DWORD *)(v9 + 3) = 1818453348;
      v10 = 1684234079;
      goto LABEL_10;
    case 2:
      v5 = 8;
      result = (unint64_t)sub_1C54C1634(a1, 8);
      v11 = *a1;
      v12 = a1[1];
      v7 = a1 + 1;
      *(_QWORD *)(v11 + v12) = 0x6C61637361705F5FLL;
      goto LABEL_16;
    case 3:
      v5 = 10;
      result = (unint64_t)sub_1C54C1634(a1, 10);
      v13 = *a1;
      v14 = a1[1];
      v7 = a1 + 1;
      v15 = v13 + v14;
      v16 = "__thiscall";
      goto LABEL_7;
    case 4:
      v5 = 9;
      result = (unint64_t)sub_1C54C1634(a1, 9);
      v17 = *a1;
      v18 = a1[1];
      v7 = a1 + 1;
      v19 = v17 + v18;
      v20 = "__stdcall";
      goto LABEL_13;
    case 5:
      v5 = 10;
      result = (unint64_t)sub_1C54C1634(a1, 10);
      v21 = *a1;
      v22 = a1[1];
      v7 = a1 + 1;
      v15 = v21 + v22;
      v16 = "__fastcall";
LABEL_7:
      *(_QWORD *)v15 = *(_QWORD *)v16;
      *(_WORD *)(v15 + 8) = 27756;
      goto LABEL_16;
    case 6:
      v5 = 9;
      result = (unint64_t)sub_1C54C1634(a1, 9);
      v23 = *a1;
      v24 = a1[1];
      v7 = a1 + 1;
      v19 = v23 + v24;
      v20 = "__clrcall";
      goto LABEL_13;
    case 7:
      v5 = 6;
      result = (unint64_t)sub_1C54C1634(a1, 6);
      v25 = *a1;
      v26 = a1[1];
      v7 = a1 + 1;
      v9 = v25 + v26;
      *(_WORD *)(v9 + 4) = 26978;
      v10 = 1634033503;
LABEL_10:
      *(_DWORD *)v9 = v10;
      goto LABEL_16;
    case 8:
      v5 = 12;
      result = (unint64_t)sub_1C54C1634(a1, 12);
      v27 = *a1;
      v28 = a1[1];
      v7 = a1 + 1;
      v29 = v27 + v28;
      *(_QWORD *)v29 = *(_QWORD *)"__vectorcall";
      *(_DWORD *)(v29 + 8) = 1819042147;
      goto LABEL_16;
    case 9:
      v5 = 9;
      result = (unint64_t)sub_1C54C1634(a1, 9);
      v30 = *a1;
      v31 = a1[1];
      v7 = a1 + 1;
      v19 = v30 + v31;
      v20 = "__regcall";
LABEL_13:
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *(_BYTE *)(v19 + 8) = 108;
      goto LABEL_16;
    case 10:
      v5 = 31;
      result = (unint64_t)sub_1C54C1634(a1, 31);
      v32 = *a1;
      v33 = a1[1];
      v7 = a1 + 1;
      qmemcpy((void *)(v32 + v33), "__attribute__((__swiftcall__)) ", 31);
      goto LABEL_16;
    case 11:
      v5 = 36;
      result = (unint64_t)sub_1C54C1634(a1, 36);
      v34 = *a1;
      v35 = a1[1];
      v7 = a1 + 1;
      qmemcpy((void *)(v34 + v35), "__attribute__((__swiftasynccall__)) ", 36);
LABEL_16:
      *v7 += v5;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1C54CB674(unint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  int v3;
  int v4;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = (_QWORD *)result;
    v3 = *(char *)(v1 + *(_QWORD *)result - 1);
    v4 = v3;
    if (v3 < 0)
      result = __maskrune((char)v3, 0x500uLL);
    else
      result = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v3 + 60) & 0x500;
    if (v4 == 62 || (_DWORD)result != 0)
    {
      result = (unint64_t)sub_1C54C1634(v2, 1);
      *(_BYTE *)(*v2 + v2[1]++) = 32;
    }
  }
  return result;
}

uint64_t llvm::ms_demangle::ArrayTypeNode::outputOneDimension(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;

  if (a4[2])
    return (*(uint64_t (**)(_QWORD *))(*a4 + 16))(a4);
  return result;
}

uint64_t sub_1C54CB720(uint64_t *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if ((a3 & a2) != 0)
  {
    if ((_DWORD)a4)
    {
      sub_1C54C1634(a1, 1);
      *(_BYTE *)(*a1 + a1[1]++) = 32;
    }
    switch(a3)
    {
      case 32:
        v6 = 10;
        sub_1C54C1634(a1, 10);
        v11 = *a1;
        v12 = a1[1];
        v8 = a1 + 1;
        v13 = v11 + v12;
        *(_QWORD *)v13 = *(_QWORD *)"__restrict";
        *(_WORD *)(v13 + 8) = 29795;
        break;
      case 2:
        v6 = 8;
        sub_1C54C1634(a1, 8);
        v14 = *a1;
        v15 = a1[1];
        v8 = a1 + 1;
        *(_QWORD *)(v14 + v15) = 0x656C6974616C6F76;
        break;
      case 1:
        v6 = 5;
        sub_1C54C1634(a1, 5);
        v7 = *a1;
        v9 = a1[1];
        v8 = a1 + 1;
        v10 = v7 + v9;
        *(_BYTE *)(v10 + 4) = 116;
        *(_DWORD *)v10 = 1936617315;
        break;
      default:
        return 1;
    }
    *v8 += v6;
    return 1;
  }
  return a4;
}

const char *llvm::rustDemangle(const char *this, const char *a2)
{
  const char *v2;
  size_t v3;
  unint64_t v4;
  char *v5;
  int v6;
  char *v7;
  const char *v8;
  _BYTE *v9;
  unint64_t v10;
  char *v11;
  char v12;
  int v13;
  _QWORD v14[3];
  const char *v15;
  const char *v16;
  uint64_t v17;
  __int16 v18;
  const char *v19;
  __int128 v20;
  uint64_t v21;
  int v22;

  if (this)
  {
    v2 = this;
    v3 = strlen(this);
    if (v3 >= 2)
    {
      v4 = v3;
      if (!strncmp("_R", v2, 2uLL))
      {
        v15 = 0;
        v16 = 0;
        v14[0] = 500;
        v21 = -1;
        v22 = 1;
        this = (const char *)malloc_type_malloc(0x400uLL, 0x1E4FE0F9uLL);
        if (!this)
          return this;
        v5 = (char *)this;
        v19 = this;
        v20 = xmmword_1C86520E0;
        v17 = 0;
        v18 = 1;
        v14[1] = 0;
        v14[2] = 0;
        v6 = strncmp("_R", v2, 2uLL);
        if (v6)
        {
          HIBYTE(v18) = 1;
        }
        else
        {
          v7 = (char *)&v2[v4];
          v8 = v2 + 2;
          if (v4 >= 3 && (v9 = memchr((void *)&v2[2 * (v6 == 0)], 46, v4 - 2 * (v6 == 0))) != 0)
            v10 = v9 - v8;
          else
            v10 = -1;
          if (v4 - 2 < v10)
            v10 = v4 - 2;
          v11 = (char *)&v8[v10];
          v15 = v2 + 2;
          v16 = &v8[v10];
          sub_1C54CBA70((unint64_t)v14, 0, 0);
          if (v17 == v16 - v15
            || (v12 = v18,
                LOBYTE(v18) = 0,
                sub_1C54CBA70((unint64_t)v14, 0, 0),
                LOBYTE(v18) = v12,
                v17 == v16 - v15))
          {
            v13 = HIBYTE(v18);
          }
          else
          {
            v13 = 1;
            HIBYTE(v18) = 1;
          }
          if (v11 != v7)
          {
            if (!v13 && (_BYTE)v18)
            {
              sub_1C54C1634(&v19, 2);
              *(_WORD *)&v19[v20] = 10272;
              *(_QWORD *)&v20 = v20 + 2;
            }
            sub_1C54CC150(v14, v11, v7);
            v13 = HIBYTE(v18);
            if (!HIBYTE(v18))
            {
              if ((_BYTE)v18)
              {
                sub_1C54C1634(&v19, 1);
                v19[v20] = 41;
                *(_QWORD *)&v20 = v20 + 1;
                v13 = HIBYTE(v18);
              }
            }
          }
          if (!v13)
          {
            sub_1C54C1634(&v19, 1);
            v19[v20] = 0;
            return v19;
          }
          v5 = (char *)v19;
        }
        free(v5);
      }
    }
    return 0;
  }
  return this;
}

uint64_t sub_1C54CBA70(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t result;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 **v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _BYTE v43[24];

  if (*(_BYTE *)(a1 + 49) || (v4 = *(_QWORD *)(a1 + 8), v4 >= *(_QWORD *)a1))
  {
    result = 0;
    *(_BYTE *)(a1 + 49) = 1;
    return result;
  }
  *(_QWORD *)(a1 + 8) = v4 + 1;
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32) - v6;
  if (v5 >= v7)
    goto LABEL_42;
  v9 = v5 + 1;
  *(_QWORD *)(a1 + 40) = v5 + 1;
  v10 = *(char *)(v6 + v5);
  if (v10 > 76)
  {
    if (v10 <= 87)
    {
      if (v10 != 77)
      {
        if (v10 == 78 && v9 < v7)
        {
          *(_QWORD *)(a1 + 40) = v5 + 2;
          v11 = *(unsigned __int8 *)(v6 + v9);
          if ((v11 & 0xFFFFFFDF) - 65 < 0x1A)
          {
            sub_1C54CBA70(a1, a2, 0);
            v12 = sub_1C54CC1C0(a1, 0x73u);
            sub_1C54CC67C((uint64_t)&v41, a1);
            if ((v11 - 65) <= 0x19)
            {
              if (!*(_BYTE *)(a1 + 49) && *(_BYTE *)(a1 + 48))
              {
                sub_1C54C1634((_QWORD *)(a1 + 56), 3);
                v13 = *(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 64);
                *(_BYTE *)(v13 + 2) = 123;
                *(_WORD *)v13 = 14906;
                *(_QWORD *)(a1 + 64) += 3;
              }
              if (v11 == 83)
              {
                v14 = *(unsigned __int8 *)(a1 + 49);
                if (!*(_BYTE *)(a1 + 49))
                {
                  if (*(_BYTE *)(a1 + 48))
                  {
                    sub_1C54C1634((_QWORD *)(a1 + 56), 4);
                    *(_DWORD *)(*(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 64)) = 1835624563;
                    v16 = *(_QWORD *)(a1 + 64) + 4;
                    goto LABEL_86;
                  }
LABEL_90:
                  v14 = *(unsigned __int8 *)(a1 + 49);
                }
              }
              else if (v11 == 67)
              {
                v14 = *(unsigned __int8 *)(a1 + 49);
                if (!*(_BYTE *)(a1 + 49))
                {
                  if (*(_BYTE *)(a1 + 48))
                  {
                    sub_1C54C1634((_QWORD *)(a1 + 56), 7);
                    v15 = (_DWORD *)(*(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 64));
                    *(_DWORD *)((char *)v15 + 3) = 1701999987;
                    *v15 = 1936682083;
                    v16 = *(_QWORD *)(a1 + 64) + 7;
LABEL_86:
                    *(_QWORD *)(a1 + 64) = v16;
                    goto LABEL_90;
                  }
                  goto LABEL_90;
                }
              }
              else
              {
                v14 = *(unsigned __int8 *)(a1 + 49);
                if (!*(_BYTE *)(a1 + 49))
                {
                  if (*(_BYTE *)(a1 + 48))
                  {
                    sub_1C54C1634((_QWORD *)(a1 + 56), 1);
                    v31 = *(_QWORD *)(a1 + 56);
                    v32 = *(_QWORD *)(a1 + 64);
                    *(_QWORD *)(a1 + 64) = v32 + 1;
                    *(_BYTE *)(v31 + v32) = v11;
                  }
                  goto LABEL_90;
                }
              }
              if ((_QWORD)v41 != *((_QWORD *)&v41 + 1))
              {
                if (!v14 && *(_BYTE *)(a1 + 48))
                {
                  sub_1C54C1634((_QWORD *)(a1 + 56), 1);
                  *(_BYTE *)(*(_QWORD *)(a1 + 56) + (*(_QWORD *)(a1 + 64))++) = 58;
                }
                v39 = v41;
                v40 = v42;
                sub_1C54CC240((_BYTE *)a1, (unsigned __int8 **)&v39);
                v14 = *(unsigned __int8 *)(a1 + 49);
              }
              if (!v14)
              {
                if (*(_BYTE *)(a1 + 48))
                {
                  sub_1C54C1634((_QWORD *)(a1 + 56), 1);
                  v33 = *(_QWORD *)(a1 + 56);
                  v34 = *(_QWORD *)(a1 + 64);
                  *(_QWORD *)(a1 + 64) = v34 + 1;
                  *(_BYTE *)(v33 + v34) = 35;
                  if (!*(_BYTE *)(a1 + 49))
                  {
                    if (*(_BYTE *)(a1 + 48))
                    {
                      sub_1C6255C10((_QWORD *)(a1 + 56), v12, 0);
                      if (!*(_BYTE *)(a1 + 49))
                      {
                        if (*(_BYTE *)(a1 + 48))
                        {
                          sub_1C54C1634((_QWORD *)(a1 + 56), 1);
                          v35 = *(_QWORD *)(a1 + 56);
                          v36 = *(_QWORD *)(a1 + 64);
                          *(_QWORD *)(a1 + 64) = v36 + 1;
                          *(_BYTE *)(v35 + v36) = 125;
                        }
                      }
                    }
                  }
                }
              }
              goto LABEL_97;
            }
            if ((_QWORD)v41 == *((_QWORD *)&v41 + 1))
              goto LABEL_97;
            if (!*(_BYTE *)(a1 + 49) && *(_BYTE *)(a1 + 48))
            {
              sub_1C54C1634((_QWORD *)(a1 + 56), 2);
              *(_WORD *)(*(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 64)) = 14906;
              *(_QWORD *)(a1 + 64) += 2;
            }
            v37 = v41;
            v38 = v42;
            v22 = (unsigned __int8 **)&v37;
LABEL_45:
            sub_1C54CC240((_BYTE *)a1, v22);
            goto LABEL_97;
          }
        }
        goto LABEL_42;
      }
      v19 = *(unsigned __int8 *)(a1 + 48);
      *(_BYTE *)(a1 + 48) = 0;
      sub_1C54CC1C0(a1, 0x73u);
      sub_1C54CBA70(a1, a2, 0);
      *(_BYTE *)(a1 + 48) = v19;
      if (v19 && !*(_BYTE *)(a1 + 49))
      {
        sub_1C54C1634((_QWORD *)(a1 + 56), 1);
        *(_BYTE *)(*(_QWORD *)(a1 + 56) + (*(_QWORD *)(a1 + 64))++) = 60;
      }
      sub_1C54CC7E8(a1);
      if (*(_BYTE *)(a1 + 49))
        goto LABEL_97;
LABEL_53:
      if (*(_BYTE *)(a1 + 48))
      {
        v24 = (_QWORD *)(a1 + 56);
LABEL_55:
        sub_1C54C1634(v24, 1);
        result = 0;
        *(_BYTE *)(*(_QWORD *)(a1 + 56) + (*(_QWORD *)(a1 + 64))++) = 62;
        goto LABEL_43;
      }
      goto LABEL_97;
    }
    if (v10 == 88)
    {
      v23 = *(unsigned __int8 *)(a1 + 48);
      *(_BYTE *)(a1 + 48) = 0;
      sub_1C54CC1C0(a1, 0x73u);
      sub_1C54CBA70(a1, a2, 0);
      *(_BYTE *)(a1 + 48) = v23;
      if (!v23 || *(_BYTE *)(a1 + 49))
      {
LABEL_49:
        sub_1C54CC7E8(a1);
        if (!*(_BYTE *)(a1 + 49) && *(_BYTE *)(a1 + 48))
        {
          sub_1C54C1634((_QWORD *)(a1 + 56), 4);
          *(_DWORD *)(*(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 64)) = 544432416;
          *(_QWORD *)(a1 + 64) += 4;
        }
        sub_1C54CBA70(a1, 1, 0);
        result = 0;
        if (*(_BYTE *)(a1 + 49))
          goto LABEL_43;
        goto LABEL_53;
      }
    }
    else
    {
      if (v10 != 89)
        goto LABEL_42;
      if (!*(_BYTE *)(a1 + 48))
        goto LABEL_49;
    }
    sub_1C54C1634((_QWORD *)(a1 + 56), 1);
    *(_BYTE *)(*(_QWORD *)(a1 + 56) + (*(_QWORD *)(a1 + 64))++) = 60;
    goto LABEL_49;
  }
  if (v10 == 66)
  {
    v20 = sub_1C54CD6C4(a1);
    if (!*(_BYTE *)(a1 + 49))
    {
      v21 = *(_QWORD *)(a1 + 40);
      if (v20 < v21)
      {
        if (*(_BYTE *)(a1 + 48))
        {
          *(_QWORD *)(a1 + 40) = v20;
          result = sub_1C54CBA70(a1, a2, a3);
          *(_QWORD *)(a1 + 40) = v21;
          goto LABEL_43;
        }
        goto LABEL_97;
      }
    }
    goto LABEL_42;
  }
  if (v10 == 67)
  {
    sub_1C54CC1C0(a1, 0x73u);
    sub_1C54CC67C((uint64_t)v43, a1);
    v22 = (unsigned __int8 **)v43;
    goto LABEL_45;
  }
  if (v10 != 73)
  {
LABEL_42:
    result = 0;
    *(_BYTE *)(a1 + 49) = 1;
    goto LABEL_43;
  }
  sub_1C54CBA70(a1, a2, 0);
  if ((_DWORD)a2)
  {
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_57;
    goto LABEL_26;
  }
  if (*(_BYTE *)(a1 + 49))
    goto LABEL_57;
  if (*(_BYTE *)(a1 + 48))
  {
    sub_1C54C1634((_QWORD *)(a1 + 56), 2);
    *(_WORD *)(*(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 64)) = 14906;
    *(_QWORD *)(a1 + 64) += 2;
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_57;
LABEL_26:
    if (!*(_BYTE *)(a1 + 48))
      goto LABEL_61;
    sub_1C54C1634((_QWORD *)(a1 + 56), 1);
    *(_BYTE *)(*(_QWORD *)(a1 + 56) + (*(_QWORD *)(a1 + 64))++) = 60;
    if (!*(_BYTE *)(a1 + 49))
      goto LABEL_61;
LABEL_57:
    result = (_DWORD)a3 == 1;
    goto LABEL_43;
  }
LABEL_61:
  v25 = 0;
  while (1)
  {
    v26 = *(_QWORD *)(a1 + 40);
    v27 = *(_QWORD *)(a1 + 24);
    v28 = *(_QWORD *)(a1 + 32) - v27;
    if (v26 < v28 && *(_BYTE *)(v27 + v26) == 69)
      break;
    if (v25 && *(_BYTE *)(a1 + 48))
    {
      sub_1C54C1634((_QWORD *)(a1 + 56), 2);
      *(_WORD *)(*(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 64)) = 8236;
      *(_QWORD *)(a1 + 64) += 2;
      if (*(_BYTE *)(a1 + 49))
        goto LABEL_72;
      v26 = *(_QWORD *)(a1 + 40);
      v27 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32) - v27;
    }
    if (v26 >= v28)
      goto LABEL_72;
    v29 = *(unsigned __int8 *)(v27 + v26);
    if (v29 == 75)
    {
      *(_QWORD *)(a1 + 40) = v26 + 1;
      sub_1C54CD804(a1);
      goto LABEL_73;
    }
    if (v29 != 76)
    {
LABEL_72:
      sub_1C54CC7E8(a1);
      goto LABEL_73;
    }
    *(_QWORD *)(a1 + 40) = v26 + 1;
    v30 = sub_1C54CD6C4(a1);
    sub_1C54CDBF0((_QWORD *)a1, v30);
LABEL_73:
    --v25;
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_57;
  }
  *(_QWORD *)(a1 + 40) = v26 + 1;
  if ((_DWORD)a3 == 1)
  {
    result = 1;
    goto LABEL_43;
  }
  if (*(_BYTE *)(a1 + 48))
  {
    v24 = (_QWORD *)(a1 + 56);
    goto LABEL_55;
  }
LABEL_97:
  result = 0;
LABEL_43:
  *(_QWORD *)(a1 + 8) = v4;
  return result;
}

_BYTE *sub_1C54CC150(_BYTE *result, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v4;
  BOOL v5;
  size_t v6;

  if (!result[49])
  {
    v4 = result;
    if (result[48])
      v5 = a3 == a2;
    else
      v5 = 1;
    if (!v5)
    {
      v6 = a3 - a2;
      sub_1C54C1634((_QWORD *)result + 7, a3 - a2);
      result = memcpy((void *)(*((_QWORD *)v4 + 7) + *((_QWORD *)v4 + 8)), a2, v6);
      *((_QWORD *)v4 + 8) += v6;
    }
  }
  return result;
}

unint64_t sub_1C54CC1C0(uint64_t a1, unsigned __int8 a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t result;

  if (*(_BYTE *)(a1 + 49))
    return 0;
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 24);
  if (v3 >= *(_QWORD *)(a1 + 32) - v4)
    return 0;
  if (*(char *)(v4 + v3) != a2)
    return 0;
  *(_QWORD *)(a1 + 40) = v3 + 1;
  v5 = sub_1C54CD6C4(a1);
  if (*(_BYTE *)(a1 + 49))
    return 0;
  if (v5 != -1)
    return v5 + 1;
  result = 0;
  *(_BYTE *)(a1 + 49) = 1;
  return result;
}

_BYTE *sub_1C54CC240(_BYTE *result, unsigned __int8 **a2)
{
  _BYTE *v2;
  _BYTE *v3;
  unsigned __int8 *v4;
  uint64_t *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _BYTE *v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  char v51;
  unint64_t v52;

  if (!result[49])
  {
    v2 = result;
    if (result[48])
    {
      v3 = *a2;
      v4 = a2[1];
      if (!*((_BYTE *)a2 + 16))
        return sub_1C54CC150(result, *a2, v4);
      v5 = (uint64_t *)(result + 56);
      v6 = *((_QWORD *)result + 8);
      v7 = (_BYTE *)(v4 - v3);
      if (v4 == v3)
        goto LABEL_24;
      v8 = 0;
      v9 = -1;
      do
      {
        if (v3[v8] == 95)
          v9 = v8;
        ++v8;
      }
      while (v7 != (_BYTE *)v8);
      if (v9 == -1)
      {
LABEL_24:
        v18 = 0;
        v10 = *((_QWORD *)result + 8);
      }
      else
      {
        v10 = *((_QWORD *)result + 8);
        if (v9)
        {
          v11 = *a2;
          v12 = v9;
          do
          {
            v14 = *v11++;
            v13 = v14;
            v15 = v14 - 97;
            if ((v14 - 48) >= 0xA && v15 >= 0x1A && v13 != 95 && (v13 - 65) > 0x19)
              goto LABEL_71;
            result = sub_1C54C1634((_QWORD *)v2 + 7, 4);
            *(_DWORD *)(*((_QWORD *)v2 + 7) + *((_QWORD *)v2 + 8)) = v13;
            v10 = *((_QWORD *)v2 + 8) + 4;
            *((_QWORD *)v2 + 8) = v10;
          }
          while (--v12);
        }
        v18 = v9 + 1;
      }
      if ((_BYTE *)v18 != v7)
      {
        v26 = 0;
        v27 = v3 - v4;
        v28 = 700;
        v29 = 72;
        v30 = 128;
        result = (_BYTE *)0xEA0EA0EA0EA0EA0FLL;
LABEL_40:
        ++v18;
        v31 = 36;
        v32 = 1;
        v33 = v26;
        while (1)
        {
          v34 = v3[v18 - 1];
          if ((v34 - 97) >= 0x1A)
          {
            if ((v34 - 48) > 9)
              break;
            v35 = -22;
          }
          else
          {
            v35 = -97;
          }
          v36 = v35 + v34;
          if (v36 > ~v33 / v32)
            break;
          v33 += v36 * v32;
          v37 = v31 - v29;
          if (v31 >= v29 + 26)
            v37 = 26;
          if (v31 <= v29)
            v37 = 1;
          if (v36 < v37)
          {
            v38 = ((unint64_t)(v10 - v6) >> 2) + 1;
            v39 = (v33 - v26) / v28 / v38 + (v33 - v26) / v28;
            if (v39 < 0x1C8)
            {
              v40 = 0;
            }
            else
            {
              v40 = 0;
              v41 = v39;
              do
              {
                v39 = v41 / 0x23;
                v40 += 36;
                v42 = v41 >> 3;
                v41 /= 0x23uLL;
              }
              while (v42 > 0x7CA);
            }
            if (__CFADD__(v30, v33 / v38))
              break;
            v43 = v33 / v38 + v30;
            if (v43 >> 11 == 27)
              break;
            v52 = v43;
            if (v43 > 0x7F)
            {
              if (v43 > 0x7FF)
              {
                if (v43 >> 16)
                {
                  if (v43 >> 16 > 0x10)
                    break;
                  v44 = v6;
                  LODWORD(v49) = (v43 >> 12) & 0x3F | 0xFFFFFF80;
                  HIDWORD(v49) = (v43 >> 6) & 0x3F | 0xFFFFFF80;
                  v50 = (v43 >> 18) | 0xFFFFFFF0;
                  v51 = v43 & 0x3F | 0x80;
                }
                else
                {
                  v44 = v6;
                  v50 = (v43 >> 12) | 0xFFFFFFE0;
                  v51 = 0;
                  LODWORD(v49) = (v43 >> 6) & 0x3F | 0xFFFFFF80;
                  BYTE4(v49) = v43 & 0x3F | 0x80;
                }
              }
              else
              {
                v44 = v6;
                v50 = (v43 >> 6) | 0xFFFFFFC0;
                v51 = 0;
                v49 = v43 & 0x3F | 0xFFFFFF80;
              }
            }
            else
            {
              v44 = v6;
              LOBYTE(v50) = v43;
              v51 = 0;
              v49 = 0;
            }
            v48 = v44;
            v29 = v40 + 4 * ((9 * (_WORD)v39) & 0x3FFFu) / (unsigned __int16)(v39 + 38);
            v45 = v33 % v38;
            v46 = v44 + 4 * (v33 % v38);
            sub_1C54C1634((_QWORD *)v2 + 7, 4);
            memmove((void *)(*((_QWORD *)v2 + 7) + v46 + 4), (const void *)(*((_QWORD *)v2 + 7) + v46), *((_QWORD *)v2 + 8) - v46);
            v47 = (_BYTE *)(*((_QWORD *)v2 + 7) + v46);
            *v47 = v50;
            v47[1] = v49;
            v47[2] = BYTE4(v49);
            v47[3] = v51;
            v10 = *((_QWORD *)v2 + 8) + 4;
            *((_QWORD *)v2 + 8) = v10;
            v26 = v45 + 1;
            v6 = v48;
            v28 = 2;
            v30 = v52;
            result = (_BYTE *)0xEA0EA0EA0EA0EA0FLL;
            if (v27 + v18)
              goto LABEL_40;
            goto LABEL_26;
          }
          if (is_mul_ok(36 - v37, v32))
          {
            ++v18;
            v32 *= 36 - v37;
            v31 += 36;
            if (v27 + v18 != 1)
              continue;
          }
          break;
        }
LABEL_71:
        v2[49] = 1;
        return result;
      }
LABEL_26:
      v19 = *v5;
      v20 = (void *)(*v5 + v6);
      v21 = (_BYTE *)(*v5 + v10);
      result = memchr(v20, 0, v21 - (_BYTE *)v20);
      if (result)
        v22 = (unint64_t)result;
      else
        v22 = (unint64_t)v21;
      v23 = (_BYTE *)(v22 + 1);
      if ((_BYTE *)v22 != v21 && v23 != v21)
      {
        v25 = ~v22 + v10 + v19;
        do
        {
          if (*v23)
            *(_BYTE *)v22++ = *v23;
          ++v23;
          --v25;
        }
        while (v25);
      }
      *((_QWORD *)v2 + 8) = v22 - v19;
    }
  }
  return result;
}

uint64_t sub_1C54CC67C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  int v15;

  if (*(_BYTE *)(a2 + 49))
    goto LABEL_14;
  v2 = *(_QWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = v2 - v4;
  if (v3 < v2 - v4 && *(_BYTE *)(v4 + v3) == 117)
  {
    *(_QWORD *)(a2 + 40) = ++v3;
    v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  if (v3 >= v5)
    goto LABEL_14;
  v7 = *(unsigned __int8 *)(v4 + v3);
  if ((v7 - 48) > 9)
    goto LABEL_14;
  if (v7 == 48)
  {
    v8 = 0;
    v9 = v3 + 1;
    *(_QWORD *)(a2 + 40) = v3 + 1;
  }
  else
  {
    v8 = 0;
    while (*(unsigned __int8 *)(v4 + v3) - 48 <= 9)
    {
      if (v8 > 0x1999999999999999)
        goto LABEL_14;
      v10 = 10 * v8;
      v9 = v3 + 1;
      *(_QWORD *)(a2 + 40) = v3 + 1;
      v11 = *(char *)(v4 + v3);
      if (v10 > 47 - v11)
        goto LABEL_14;
      v8 = v10 + v11 - 48;
      v3 = v9;
      if (v9 >= v5)
        goto LABEL_10;
    }
    v9 = v3;
  }
LABEL_10:
  if (v9 < v5 && *(_BYTE *)(v4 + v9) == 95)
    *(_QWORD *)(a2 + 40) = ++v9;
  if (v8 > v2 - (v9 + v4))
    goto LABEL_14;
  v12 = (unsigned __int8 *)(v4 + v9);
  *(_QWORD *)(a2 + 40) = v9 + v8;
  if (v8)
  {
    v13 = v8;
    v14 = v12;
    while (1)
    {
      v15 = *v14;
      if ((v15 - 48) >= 0xA
        && (v15 - 97) >= 0x1A
        && v15 != 95
        && (v15 - 65) > 0x19)
      {
        break;
      }
      ++v14;
      if (!--v13)
        goto LABEL_33;
    }
LABEL_14:
    *(_BYTE *)(a2 + 49) = 1;
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 0;
    return result;
  }
LABEL_33:
  *(_QWORD *)result = v12;
  *(_QWORD *)(result + 8) = &v12[v8];
  *(_BYTE *)(result + 16) = v6;
  return result;
}

unint64_t sub_1C54CC7E8(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  unsigned __int16 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _DWORD *v51;
  unint64_t v52;
  char *v53;
  char *i;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  char *v67;
  char *v68;
  char v69;

  v1 = result;
  if (!*(_BYTE *)(result + 49))
  {
    v2 = *(_QWORD *)(result + 8);
    if (v2 < *(_QWORD *)result)
    {
      *(_QWORD *)(result + 8) = v2 + 1;
      v3 = *(_QWORD *)(result + 40);
      v4 = *(_QWORD *)(result + 24);
      v5 = *(_QWORD *)(result + 32) - v4;
      if (v3 >= v5)
      {
        v8 = 0;
        v6 = 1;
        *(_BYTE *)(result + 49) = 1;
        v7 = v3;
      }
      else
      {
        v6 = 0;
        v7 = v3 + 1;
        *(_QWORD *)(result + 40) = v3 + 1;
        v8 = *(unsigned __int8 *)(v4 + v3);
      }
      v66 = 0;
      result = sub_1C54CD7C4((char)v8, &v66);
      if ((_DWORD)result)
      {
        switch(v66)
        {
          case 0:
            if (v3 < v5 && *(_BYTE *)(v1 + 48))
            {
              result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 4);
              v9 = *(_QWORD *)(v1 + 56);
              v10 = *(_QWORD *)(v1 + 64);
              v11 = 1819242338;
              goto LABEL_112;
            }
            break;
          case 1:
            if (v3 < v5 && *(_BYTE *)(v1 + 48))
            {
              result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 4);
              v9 = *(_QWORD *)(v1 + 56);
              v10 = *(_QWORD *)(v1 + 64);
              v11 = 1918986339;
              goto LABEL_112;
            }
            break;
          case 2:
            if (v3 < v5 && *(_BYTE *)(v1 + 48))
            {
              result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 2);
              v29 = *(_QWORD *)(v1 + 56);
              v30 = *(_QWORD *)(v1 + 64);
              v31 = 14441;
              goto LABEL_132;
            }
            break;
          case 3:
            if (v3 < v5 && *(_BYTE *)(v1 + 48))
            {
              result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 3);
              v32 = *(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64);
              *(_BYTE *)(v32 + 2) = 54;
              v33 = 12649;
              goto LABEL_136;
            }
            break;
          case 4:
            if (v3 < v5 && *(_BYTE *)(v1 + 48))
            {
              result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 3);
              v32 = *(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64);
              *(_BYTE *)(v32 + 2) = 50;
              v33 = 13161;
              goto LABEL_136;
            }
            break;
          case 5:
            if (v3 < v5 && *(_BYTE *)(v1 + 48))
            {
              result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 3);
              v32 = *(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64);
              *(_BYTE *)(v32 + 2) = 52;
              v33 = 13929;
              goto LABEL_136;
            }
            break;
          case 6:
            if (v3 < v5 && *(_BYTE *)(v1 + 48))
            {
              result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 4);
              v9 = *(_QWORD *)(v1 + 56);
              v10 = *(_QWORD *)(v1 + 64);
              v11 = 942813545;
              goto LABEL_112;
            }
            break;
          case 7:
            if (v3 < v5 && *(_BYTE *)(v1 + 48))
            {
              result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 5);
              v34 = *(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64);
              *(_BYTE *)(v34 + 4) = 101;
              v35 = 29545;
              goto LABEL_116;
            }
            break;
          case 8:
            if (v3 < v5 && *(_BYTE *)(v1 + 48))
            {
              result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 2);
              v29 = *(_QWORD *)(v1 + 56);
              v30 = *(_QWORD *)(v1 + 64);
              v31 = 14453;
              goto LABEL_132;
            }
            break;
          case 9:
            if (v3 < v5 && *(_BYTE *)(v1 + 48))
            {
              result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 3);
              v32 = *(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64);
              *(_BYTE *)(v32 + 2) = 54;
              v33 = 12661;
              goto LABEL_136;
            }
            break;
          case 10:
            if (v3 < v5 && *(_BYTE *)(v1 + 48))
            {
              result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 3);
              v32 = *(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64);
              *(_BYTE *)(v32 + 2) = 50;
              v33 = 13173;
              goto LABEL_136;
            }
            break;
          case 11:
            if (v3 < v5 && *(_BYTE *)(v1 + 48))
            {
              result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 3);
              v32 = *(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64);
              *(_BYTE *)(v32 + 2) = 52;
              v33 = 13941;
              goto LABEL_136;
            }
            break;
          case 12:
            if (v3 < v5 && *(_BYTE *)(v1 + 48))
            {
              result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 4);
              v9 = *(_QWORD *)(v1 + 56);
              v10 = *(_QWORD *)(v1 + 64);
              v11 = 942813557;
LABEL_112:
              *(_DWORD *)(v9 + v10) = v11;
              v36 = *(_QWORD *)(v1 + 64) + 4;
              goto LABEL_183;
            }
            break;
          case 13:
            if (v3 < v5 && *(_BYTE *)(v1 + 48))
            {
              result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 5);
              v34 = *(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64);
              *(_BYTE *)(v34 + 4) = 101;
              v35 = 29557;
LABEL_116:
              *(_DWORD *)v34 = v35 | 0x7A690000;
              v36 = *(_QWORD *)(v1 + 64) + 5;
              goto LABEL_183;
            }
            break;
          case 14:
            if (v3 < v5 && *(_BYTE *)(v1 + 48))
            {
              result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 3);
              v32 = *(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64);
              *(_BYTE *)(v32 + 2) = 50;
              v33 = 13158;
              goto LABEL_136;
            }
            break;
          case 15:
            if (v3 < v5 && *(_BYTE *)(v1 + 48))
            {
              result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 3);
              v32 = *(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64);
              *(_BYTE *)(v32 + 2) = 52;
              v33 = 13926;
              goto LABEL_136;
            }
            break;
          case 16:
            if (v3 < v5 && *(_BYTE *)(v1 + 48))
            {
              result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 3);
              v32 = *(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64);
              *(_BYTE *)(v32 + 2) = 114;
              v33 = 29811;
              goto LABEL_136;
            }
            break;
          case 17:
            if (v3 < v5 && *(_BYTE *)(v1 + 48))
            {
              result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 1);
              v23 = *(_QWORD *)(v1 + 56);
              v24 = *(_QWORD *)(v1 + 64);
              v25 = 95;
              goto LABEL_182;
            }
            break;
          case 18:
            if (v3 < v5 && *(_BYTE *)(v1 + 48))
            {
              result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 2);
              v29 = *(_QWORD *)(v1 + 56);
              v30 = *(_QWORD *)(v1 + 64);
              v31 = 10536;
LABEL_132:
              *(_WORD *)(v29 + v30) = v31;
              v36 = *(_QWORD *)(v1 + 64) + 2;
              goto LABEL_183;
            }
            break;
          case 19:
            if (v3 < v5 && *(_BYTE *)(v1 + 48))
            {
              result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 3);
              v32 = *(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64);
              *(_BYTE *)(v32 + 2) = 46;
              v33 = 11822;
LABEL_136:
              *(_WORD *)v32 = v33;
              v36 = *(_QWORD *)(v1 + 64) + 3;
              goto LABEL_183;
            }
            break;
          case 20:
            if (v3 < v5 && *(_BYTE *)(v1 + 48))
            {
              result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 1);
              v23 = *(_QWORD *)(v1 + 56);
              v24 = *(_QWORD *)(v1 + 64);
              v25 = 33;
              goto LABEL_182;
            }
            break;
          default:
            goto LABEL_184;
        }
        goto LABEL_184;
      }
      switch((char)v8)
      {
        case 'A':
          if (v3 < v5 && *(_BYTE *)(v1 + 48))
          {
            sub_1C54C1634((_QWORD *)(v1 + 56), 1);
            *(_BYTE *)(*(_QWORD *)(v1 + 56) + (*(_QWORD *)(v1 + 64))++) = 91;
          }
          sub_1C54CC7E8(v1);
          if (!*(_BYTE *)(v1 + 49) && *(_BYTE *)(v1 + 48))
          {
            sub_1C54C1634((_QWORD *)(v1 + 56), 2);
            *(_WORD *)(*(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64)) = 8251;
            *(_QWORD *)(v1 + 64) += 2;
          }
          result = sub_1C54CD804(v1);
          goto LABEL_61;
        case 'B':
          result = sub_1C54CD6C4(v1);
          if (*(_BYTE *)(v1 + 49))
            goto LABEL_45;
          v18 = *(_QWORD *)(v1 + 40);
          if (result >= v18)
            goto LABEL_45;
          if (*(_BYTE *)(v1 + 48))
          {
            *(_QWORD *)(v1 + 40) = result;
            result = sub_1C54CC7E8(v1);
            *(_QWORD *)(v1 + 40) = v18;
          }
          goto LABEL_184;
        case 'D':
          v19 = *(_QWORD *)(v1 + 16);
          if (v3 < v5 && *(_BYTE *)(v1 + 48))
          {
            sub_1C54C1634((_QWORD *)(v1 + 56), 4);
            *(_DWORD *)(*(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64)) = 544110948;
            *(_QWORD *)(v1 + 64) += 4;
          }
          result = (unint64_t)sub_1C54CDE20(v1);
          if (*(_BYTE *)(v1 + 49))
            goto LABEL_44;
          v37 = 0;
          while (1)
          {
            v38 = *(_QWORD *)(v1 + 40);
            v39 = *(_QWORD *)(v1 + 24);
            v40 = *(_QWORD *)(v1 + 32) - v39;
            if (v38 < v40 && *(_BYTE *)(v39 + v38) == 69)
              break;
            if (v37 && *(_BYTE *)(v1 + 48))
            {
              sub_1C54C1634((_QWORD *)(v1 + 56), 3);
              v41 = *(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64);
              *(_BYTE *)(v41 + 2) = 32;
              *(_WORD *)v41 = 11040;
              *(_QWORD *)(v1 + 64) += 3;
            }
            result = sub_1C54CBA70(v1, 1, 1);
            if (!*(_BYTE *)(v1 + 49))
            {
              while (1)
              {
                v42 = *(_QWORD *)(v1 + 40);
                v43 = *(_QWORD *)(v1 + 24);
                if (v42 >= *(_QWORD *)(v1 + 32) - v43 || *(_BYTE *)(v43 + v42) != 112)
                  break;
                *(_QWORD *)(v1 + 40) = v42 + 1;
                if ((result & 1) != 0)
                {
                  if (*(_BYTE *)(v1 + 48))
                  {
                    sub_1C54C1634((_QWORD *)(v1 + 56), 2);
                    *(_WORD *)(*(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64)) = 8236;
                    *(_QWORD *)(v1 + 64) += 2;
                  }
                }
                else if (*(_BYTE *)(v1 + 48))
                {
                  sub_1C54C1634((_QWORD *)(v1 + 56), 1);
                  v44 = *(_QWORD *)(v1 + 56);
                  v45 = *(_QWORD *)(v1 + 64);
                  *(_QWORD *)(v1 + 64) = v45 + 1;
                  *(_BYTE *)(v44 + v45) = 60;
                }
                sub_1C54CC67C((uint64_t)&v67, v1);
                sub_1C54CC150((_BYTE *)v1, v67, v68);
                if (!*(_BYTE *)(v1 + 49) && *(_BYTE *)(v1 + 48))
                {
                  sub_1C54C1634((_QWORD *)(v1 + 56), 3);
                  v46 = *(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64);
                  *(_BYTE *)(v46 + 2) = 32;
                  *(_WORD *)v46 = 15648;
                  *(_QWORD *)(v1 + 64) += 3;
                }
                sub_1C54CC7E8(v1);
                result = 1;
                if (*(_BYTE *)(v1 + 49))
                  goto LABEL_44;
              }
              if ((result & 1) != 0)
              {
                v47 = *(unsigned __int8 *)(v1 + 48);
                if (*(_BYTE *)(v1 + 48))
                {
                  result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 1);
                  *(_BYTE *)(*(_QWORD *)(v1 + 56) + (*(_QWORD *)(v1 + 64))++) = 62;
                  v47 = *(unsigned __int8 *)(v1 + 49);
                }
              }
              else
              {
                v47 = 0;
              }
              ++v37;
              if (!v47)
                continue;
            }
LABEL_44:
            *(_QWORD *)(v1 + 16) = v19;
LABEL_45:
            *(_BYTE *)(v1 + 49) = 1;
            goto LABEL_184;
          }
          *(_QWORD *)(v1 + 40) = v38 + 1;
          *(_QWORD *)(v1 + 16) = v19;
          if (v38 + 1 >= v40 || *(_BYTE *)(v39 + v38 + 1) != 76)
            goto LABEL_45;
          *(_QWORD *)(v1 + 40) = v38 + 2;
          result = sub_1C54CD6C4(v1);
          if (result)
          {
            v64 = result;
            if (!*(_BYTE *)(v1 + 49) && *(_BYTE *)(v1 + 48))
            {
              sub_1C54C1634((_QWORD *)(v1 + 56), 3);
              v65 = *(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64);
              *(_BYTE *)(v65 + 2) = 32;
              *(_WORD *)v65 = 11040;
              *(_QWORD *)(v1 + 64) += 3;
            }
            result = (unint64_t)sub_1C54CDBF0((_QWORD *)v1, v64);
          }
          goto LABEL_184;
        case 'F':
          v20 = *(_QWORD *)(v1 + 16);
          result = (unint64_t)sub_1C54CDE20(v1);
          if (*(_BYTE *)(v1 + 49))
            goto LABEL_47;
          v48 = *(_QWORD *)(v1 + 40);
          v49 = *(_QWORD *)(v1 + 24);
          v50 = *(_QWORD *)(v1 + 32) - v49;
          if (v48 >= v50)
            goto LABEL_170;
          if (*(_BYTE *)(v49 + v48) != 85)
            goto LABEL_170;
          *(_QWORD *)(v1 + 40) = ++v48;
          if (!*(_BYTE *)(v1 + 48))
            goto LABEL_170;
          result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 7);
          v51 = (_DWORD *)(*(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64));
          *(_DWORD *)((char *)v51 + 3) = 543516257;
          *v51 = 1634954869;
          *(_QWORD *)(v1 + 64) += 7;
          if (*(_BYTE *)(v1 + 49))
            goto LABEL_47;
          v48 = *(_QWORD *)(v1 + 40);
          v49 = *(_QWORD *)(v1 + 24);
          v50 = *(_QWORD *)(v1 + 32) - v49;
LABEL_170:
          if (v48 >= v50 || *(_BYTE *)(v49 + v48) != 75)
            goto LABEL_198;
          v52 = v48 + 1;
          *(_QWORD *)(v1 + 40) = v52;
          if (!*(_BYTE *)(v1 + 48))
            goto LABEL_175;
          result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 8);
          *(_QWORD *)(*(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64)) = 0x22206E7265747865;
          *(_QWORD *)(v1 + 64) += 8;
          if (*(_BYTE *)(v1 + 49))
            goto LABEL_185;
          v52 = *(_QWORD *)(v1 + 40);
          v49 = *(_QWORD *)(v1 + 24);
          v50 = *(_QWORD *)(v1 + 32) - v49;
LABEL_175:
          if (v52 >= v50 || *(_BYTE *)(v49 + v52) != 67)
          {
LABEL_185:
            result = sub_1C54CC67C((uint64_t)&v67, v1);
            if (v69)
              *(_BYTE *)(v1 + 49) = 1;
            v53 = v67;
            for (i = v68; v53 != i; ++v53)
            {
              if (*v53 == 95)
                v55 = 45;
              else
                v55 = *v53;
              if (!*(_BYTE *)(v1 + 49) && *(_BYTE *)(v1 + 48))
              {
                result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 1);
                v56 = *(_QWORD *)(v1 + 56);
                v57 = *(_QWORD *)(v1 + 64);
                *(_QWORD *)(v1 + 64) = v57 + 1;
                *(_BYTE *)(v56 + v57) = v55;
              }
            }
          }
          else
          {
            *(_QWORD *)(v1 + 40) = v52 + 1;
            if (*(_BYTE *)(v1 + 48))
            {
              result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 1);
              *(_BYTE *)(*(_QWORD *)(v1 + 56) + (*(_QWORD *)(v1 + 64))++) = 67;
            }
          }
          if (*(_BYTE *)(v1 + 49))
            goto LABEL_47;
          if (*(_BYTE *)(v1 + 48))
          {
            result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 2);
            *(_WORD *)(*(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64)) = 8226;
            *(_QWORD *)(v1 + 64) += 2;
            if (*(_BYTE *)(v1 + 49))
              goto LABEL_47;
          }
LABEL_198:
          if (*(_BYTE *)(v1 + 48))
          {
            result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 3);
            v58 = *(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64);
            *(_BYTE *)(v58 + 2) = 40;
            *(_WORD *)v58 = 28262;
            *(_QWORD *)(v1 + 64) += 3;
            if (*(_BYTE *)(v1 + 49))
              goto LABEL_47;
          }
          v59 = 0;
          while (1)
          {
            v60 = *(_QWORD *)(v1 + 40);
            v61 = *(_QWORD *)(v1 + 24);
            v62 = *(_QWORD *)(v1 + 32) - v61;
            if (v60 < v62 && *(_BYTE *)(v61 + v60) == 69)
              break;
            if (v59 && *(_BYTE *)(v1 + 48))
            {
              sub_1C54C1634((_QWORD *)(v1 + 56), 2);
              *(_WORD *)(*(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64)) = 8236;
              *(_QWORD *)(v1 + 64) += 2;
            }
            result = sub_1C54CC7E8(v1);
            --v59;
            if (*(_BYTE *)(v1 + 49))
              goto LABEL_47;
          }
          v63 = v60 + 1;
          *(_QWORD *)(v1 + 40) = v63;
          if (!*(_BYTE *)(v1 + 48))
            goto LABEL_215;
          result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 1);
          *(_BYTE *)(*(_QWORD *)(v1 + 56) + (*(_QWORD *)(v1 + 64))++) = 41;
          if (*(_BYTE *)(v1 + 49))
            goto LABEL_47;
          v63 = *(_QWORD *)(v1 + 40);
          v61 = *(_QWORD *)(v1 + 24);
          v62 = *(_QWORD *)(v1 + 32) - v61;
LABEL_215:
          if (v63 >= v62 || *(_BYTE *)(v61 + v63) != 117)
          {
            if (*(_BYTE *)(v1 + 48))
            {
              sub_1C54C1634((_QWORD *)(v1 + 56), 4);
              *(_DWORD *)(*(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64)) = 540945696;
              *(_QWORD *)(v1 + 64) += 4;
            }
LABEL_47:
            result = sub_1C54CC7E8(v1);
            goto LABEL_48;
          }
          *(_QWORD *)(v1 + 40) = v63 + 1;
LABEL_48:
          *(_QWORD *)(v1 + 16) = v20;
          goto LABEL_184;
        case 'O':
          if (v3 >= v5 || !*(_BYTE *)(v1 + 48))
            goto LABEL_56;
          sub_1C54C1634((_QWORD *)(v1 + 56), 5);
          v21 = *(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64);
          *(_BYTE *)(v21 + 4) = 32;
          *(_DWORD *)v21 = 1953852714;
          v17 = *(_QWORD *)(v1 + 64) + 5;
          goto LABEL_55;
        case 'P':
          if (v3 >= v5 || !*(_BYTE *)(v1 + 48))
            goto LABEL_56;
          sub_1C54C1634((_QWORD *)(v1 + 56), 7);
          v22 = (_DWORD *)(*(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64));
          *(_DWORD *)((char *)v22 + 3) = 544502638;
          *v22 = 1852793642;
          v17 = *(_QWORD *)(v1 + 64) + 7;
          goto LABEL_55;
        case 'Q':
        case 'R':
          if (v3 >= v5)
            goto LABEL_24;
          if (!*(_BYTE *)(v1 + 48))
            goto LABEL_18;
          sub_1C54C1634((_QWORD *)(v1 + 56), 1);
          v12 = *(_QWORD *)(v1 + 56);
          v13 = *(_QWORD *)(v1 + 64);
          *(_QWORD *)(v1 + 64) = v13 + 1;
          *(_BYTE *)(v12 + v13) = 38;
          if (!*(_BYTE *)(v1 + 49))
          {
            v7 = *(_QWORD *)(v1 + 40);
            v4 = *(_QWORD *)(v1 + 24);
            v5 = *(_QWORD *)(v1 + 32) - v4;
LABEL_18:
            if (v7 < v5 && *(_BYTE *)(v4 + v7) == 76)
            {
              *(_QWORD *)(v1 + 40) = v7 + 1;
              v14 = sub_1C54CD6C4(v1);
              if (v14)
              {
                sub_1C54CDBF0((_QWORD *)v1, v14);
                if (!*(_BYTE *)(v1 + 49))
                {
                  if (*(_BYTE *)(v1 + 48))
                  {
                    sub_1C54C1634((_QWORD *)(v1 + 56), 1);
                    v15 = *(_QWORD *)(v1 + 56);
                    v16 = *(_QWORD *)(v1 + 64);
                    *(_QWORD *)(v1 + 64) = v16 + 1;
                    *(_BYTE *)(v15 + v16) = 32;
                  }
                }
              }
            }
          }
LABEL_24:
          if (v8 == 81 && !*(_BYTE *)(v1 + 49) && *(_BYTE *)(v1 + 48))
          {
            sub_1C54C1634((_QWORD *)(v1 + 56), 4);
            *(_DWORD *)(*(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64)) = 544503149;
            v17 = *(_QWORD *)(v1 + 64) + 4;
LABEL_55:
            *(_QWORD *)(v1 + 64) = v17;
          }
LABEL_56:
          result = sub_1C54CC7E8(v1);
          goto LABEL_184;
        case 'S':
          if (v3 < v5 && *(_BYTE *)(v1 + 48))
          {
            sub_1C54C1634((_QWORD *)(v1 + 56), 1);
            *(_BYTE *)(*(_QWORD *)(v1 + 56) + (*(_QWORD *)(v1 + 64))++) = 91;
          }
          result = sub_1C54CC7E8(v1);
LABEL_61:
          if (*(_BYTE *)(v1 + 49) || !*(_BYTE *)(v1 + 48))
            goto LABEL_184;
          result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 1);
          v23 = *(_QWORD *)(v1 + 56);
          v24 = *(_QWORD *)(v1 + 64);
          v25 = 93;
          goto LABEL_182;
        case 'T':
          if (v3 >= v5)
            goto LABEL_67;
          if (*(_BYTE *)(v1 + 48))
          {
            result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 1);
            *(_BYTE *)(*(_QWORD *)(v1 + 56) + (*(_QWORD *)(v1 + 64))++) = 40;
            v6 = *(unsigned __int8 *)(v1 + 49);
LABEL_67:
            if (v6)
              goto LABEL_184;
          }
          v26 = 1;
          break;
        default:
          *(_QWORD *)(v1 + 40) = v3;
          result = sub_1C54CBA70(v1, 1, 0);
          goto LABEL_184;
      }
      while (1)
      {
        v27 = *(_QWORD *)(v1 + 40);
        v28 = *(_QWORD *)(v1 + 24);
        if (v27 < *(_QWORD *)(v1 + 32) - v28 && *(_BYTE *)(v28 + v27) == 69)
          break;
        if (--v26 && *(_BYTE *)(v1 + 48))
        {
          sub_1C54C1634((_QWORD *)(v1 + 56), 2);
          *(_WORD *)(*(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64)) = 8236;
          *(_QWORD *)(v1 + 64) += 2;
        }
        result = sub_1C54CC7E8(v1);
        if (*(_BYTE *)(v1 + 49))
          goto LABEL_184;
      }
      *(_QWORD *)(v1 + 40) = v27 + 1;
      if (v26)
      {
        if (*(_BYTE *)(v1 + 48))
          goto LABEL_181;
      }
      else if (*(_BYTE *)(v1 + 48))
      {
        result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 1);
        *(_BYTE *)(*(_QWORD *)(v1 + 56) + (*(_QWORD *)(v1 + 64))++) = 44;
        if (!*(_BYTE *)(v1 + 49))
        {
          if (*(_BYTE *)(v1 + 48))
          {
LABEL_181:
            result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 1);
            v23 = *(_QWORD *)(v1 + 56);
            v24 = *(_QWORD *)(v1 + 64);
            v25 = 41;
LABEL_182:
            *(_BYTE *)(v23 + v24) = v25;
            v36 = *(_QWORD *)(v1 + 64) + 1;
LABEL_183:
            *(_QWORD *)(v1 + 64) = v36;
          }
        }
      }
LABEL_184:
      *(_QWORD *)(v1 + 8) = v2;
      return result;
    }
  }
  *(_BYTE *)(result + 49) = 1;
  return result;
}

unint64_t sub_1C54CD6C4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 49))
    goto LABEL_20;
  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32) - v2;
  if (v1 >= v3)
    goto LABEL_20;
  if (*(_BYTE *)(v2 + v1) != 95)
  {
    v5 = 0;
    if (v1 > v3)
      v3 = *(_QWORD *)(a1 + 40);
    while (1)
    {
      v6 = v1 + 1;
      *(_QWORD *)(a1 + 40) = v1 + 1;
      v7 = *(char *)(v2 + v1);
      if (v7 == 95)
        break;
      if ((v7 - 48) >= 0xAu)
      {
        if ((v7 - 97) >= 0x1Au)
        {
          if ((v7 - 65) >= 0x1Au)
            goto LABEL_20;
          v8 = -29;
        }
        else
        {
          v8 = -87;
        }
      }
      else
      {
        v8 = -48;
      }
      if (v5 < 0x421084210842109)
      {
        v9 = v8 + v7;
        v10 = 62 * v5;
        if (!__CFADD__(v9, v10))
        {
          v5 = v9 + v10;
          v1 = v6;
          if (v3 != v6)
            continue;
        }
      }
      goto LABEL_20;
    }
    if (v5 != -1)
      return v5 + 1;
LABEL_20:
    v4 = 0;
    *(_BYTE *)(a1 + 49) = 1;
    return v4;
  }
  v4 = 0;
  *(_QWORD *)(a1 + 40) = v1 + 1;
  return v4;
}

uint64_t sub_1C54CD7C4(int a1, _DWORD *a2)
{
  uint64_t v2;

  v2 = a1 - 97;
  if (v2 > 0x19 || ((0x3BCFBBFu >> v2) & 1) == 0)
    return 0;
  *a2 = dword_1C8652398[v2];
  return 1;
}

unint64_t sub_1C54CD804(unint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char *v30;
  char *v31;

  v1 = result;
  if (!*(_BYTE *)(result + 49))
  {
    v2 = *(_QWORD *)(result + 8);
    if (v2 < *(_QWORD *)result)
    {
      *(_QWORD *)(result + 8) = v2 + 1;
      v3 = *(_QWORD *)(result + 40);
      v4 = *(_QWORD *)(result + 24);
      v5 = *(_QWORD *)(result + 32) - v4;
      if (v3 >= v5)
        goto LABEL_38;
      v6 = v3 + 1;
      *(_QWORD *)(result + 40) = v3 + 1;
      v7 = *(char *)(v4 + v3);
      v29 = 0;
      result = sub_1C54CD7C4(v7, &v29);
      if ((result & 1) == 0)
      {
        if (v7 == 66)
        {
          result = sub_1C54CD6C4(v1);
          if (!*(_BYTE *)(v1 + 49))
          {
            v12 = *(_QWORD *)(v1 + 40);
            if (result < v12)
            {
              if (*(_BYTE *)(v1 + 48))
              {
                *(_QWORD *)(v1 + 40) = result;
                result = sub_1C54CD804(v1);
                *(_QWORD *)(v1 + 40) = v12;
              }
              goto LABEL_39;
            }
          }
        }
        goto LABEL_38;
      }
      if ((v29 - 2) < 0xC)
      {
        if (v6 < v5 && *(_BYTE *)(v4 + v6) == 110)
        {
          *(_QWORD *)(v1 + 40) = v3 + 2;
          if (*(_BYTE *)(v1 + 48))
          {
            sub_1C54C1634((_QWORD *)(v1 + 56), 1);
            v8 = *(_QWORD *)(v1 + 56);
            v9 = *(_QWORD *)(v1 + 64);
            *(_QWORD *)(v1 + 64) = v9 + 1;
            *(_BYTE *)(v8 + v9) = 45;
          }
        }
        v30 = 0;
        v31 = 0;
        result = sub_1C54CDD24(v1, &v30);
        v11 = v30;
        v10 = v31;
        if ((unint64_t)(v31 - v30) <= 0x10)
        {
          if (!*(_BYTE *)(v1 + 49))
          {
            if (*(_BYTE *)(v1 + 48))
              result = (unint64_t)sub_1C6255C10((_QWORD *)(v1 + 56), result, 0);
          }
          goto LABEL_39;
        }
        if (!*(_BYTE *)(v1 + 49) && *(_BYTE *)(v1 + 48))
        {
          sub_1C54C1634((_QWORD *)(v1 + 56), 2);
          *(_WORD *)(*(_QWORD *)(v1 + 56) + *(_QWORD *)(v1 + 64)) = 30768;
          *(_QWORD *)(v1 + 64) += 2;
        }
        v13 = (_BYTE *)v1;
        v14 = v11;
        v15 = v10;
        goto LABEL_25;
      }
      if (!v29)
      {
        v30 = 0;
        v31 = 0;
        result = sub_1C54CDD24(v1, &v30);
        if (v31 - v30 == 1)
        {
          v19 = *v30;
          if (v19 == 49)
          {
            v14 = "true";
            v15 = "";
          }
          else
          {
            if (v19 != 48)
              goto LABEL_38;
            v14 = "false";
            v15 = "";
          }
          v13 = (_BYTE *)v1;
LABEL_25:
          result = (unint64_t)sub_1C54CC150(v13, v14, v15);
LABEL_39:
          *(_QWORD *)(v1 + 8) = v2;
          return result;
        }
LABEL_38:
        *(_BYTE *)(v1 + 49) = 1;
        goto LABEL_39;
      }
      if (v29 != 1)
      {
        if (v29 == 17)
        {
          if (!*(_BYTE *)(v1 + 48))
            goto LABEL_39;
          result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 1);
          v16 = *(_QWORD *)(v1 + 56);
          v17 = *(_QWORD *)(v1 + 64);
          *(_QWORD *)(v1 + 64) = v17 + 1;
          v18 = 95;
LABEL_31:
          *(_BYTE *)(v16 + v17) = v18;
          goto LABEL_39;
        }
        goto LABEL_38;
      }
      v30 = 0;
      v31 = 0;
      result = sub_1C54CDD24(v1, &v30);
      if (*(_BYTE *)(v1 + 49))
        goto LABEL_38;
      v21 = v30;
      v20 = v31;
      if ((unint64_t)(v31 - v30) >= 7)
        goto LABEL_38;
      v22 = result;
      result = (unint64_t)sub_1C54CC150((_BYTE *)v1, "'", "");
      if (v22 > 33)
      {
        switch(v22)
        {
          case '"':
            v23 = "\"";
            v24 = "";
LABEL_56:
            result = (unint64_t)sub_1C54CC150((_BYTE *)v1, v23, v24);
LABEL_57:
            if (*(_BYTE *)(v1 + 49) || !*(_BYTE *)(v1 + 48))
              goto LABEL_39;
            result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 1);
            v16 = *(_QWORD *)(v1 + 56);
            v17 = *(_QWORD *)(v1 + 64);
            *(_QWORD *)(v1 + 64) = v17 + 1;
            v18 = 39;
            goto LABEL_31;
          case '\'':
            v23 = "\\'";
            goto LABEL_55;
          case '\\':
            v23 = "\\\\";
            goto LABEL_55;
        }
      }
      else
      {
        switch(v22)
        {
          case 9:
            v23 = "\\t";
            goto LABEL_55;
          case 10:
            v23 = "\\n";
            goto LABEL_55;
          case 13:
            v23 = "\\r";
LABEL_55:
            v24 = v23 + 2;
            goto LABEL_56;
        }
      }
      if ((unint64_t)(v22 - 32) > 0x5E)
      {
        sub_1C54CC150((_BYTE *)v1, "\\u{", "");
        result = (unint64_t)sub_1C54CC150((_BYTE *)v1, v21, v20);
        if (*(_BYTE *)(v1 + 49))
          goto LABEL_39;
        if (*(_BYTE *)(v1 + 48))
        {
          result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 1);
          v27 = *(_QWORD *)(v1 + 56);
          v28 = *(_QWORD *)(v1 + 64);
          *(_QWORD *)(v1 + 64) = v28 + 1;
          *(_BYTE *)(v27 + v28) = 125;
        }
      }
      else
      {
        if (*(_BYTE *)(v1 + 49))
          goto LABEL_39;
        if (*(_BYTE *)(v1 + 48))
        {
          result = (unint64_t)sub_1C54C1634((_QWORD *)(v1 + 56), 1);
          v25 = *(_QWORD *)(v1 + 56);
          v26 = *(_QWORD *)(v1 + 64);
          *(_QWORD *)(v1 + 64) = v26 + 1;
          *(_BYTE *)(v25 + v26) = v22;
        }
      }
      goto LABEL_57;
    }
  }
  *(_BYTE *)(result + 49) = 1;
  return result;
}

_QWORD *sub_1C54CDBF0(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result;
  if (!a2)
    return sub_1C54CC150(result, "'_", "");
  v3 = result[2];
  if (a2 - 1 >= v3)
  {
    *((_BYTE *)result + 49) = 1;
  }
  else
  {
    v4 = v3 - a2;
    if (!*((_BYTE *)result + 49) && *((_BYTE *)result + 48))
    {
      result = sub_1C54C1634(result + 7, 1);
      v5 = v2[7];
      v6 = v2[8];
      v2[8] = v6 + 1;
      *(_BYTE *)(v5 + v6) = 39;
    }
    if (v4 > 0x19)
    {
      if (!*((_BYTE *)v2 + 49))
      {
        if (*((_BYTE *)v2 + 48))
        {
          result = sub_1C54C1634(v2 + 7, 1);
          v9 = v2[7];
          v10 = v2[8];
          v2[8] = v10 + 1;
          *(_BYTE *)(v9 + v10) = 122;
          if (!*((_BYTE *)v2 + 49))
          {
            if (*((_BYTE *)v2 + 48))
              return sub_1C6255C10(v2 + 7, v4 - 25, 0);
          }
        }
      }
    }
    else if (!*((_BYTE *)v2 + 49))
    {
      if (*((_BYTE *)v2 + 48))
      {
        result = sub_1C54C1634(v2 + 7, 1);
        v7 = v2[7];
        v8 = v2[8];
        v2[8] = v8 + 1;
        *(_BYTE *)(v7 + v8) = v4 + 97;
      }
    }
  }
  return result;
}

uint64_t sub_1C54CDD24(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_BYTE *)(a1 + 49))
    goto LABEL_21;
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = v3 - v4;
  if (v2 >= v3 - v4)
    goto LABEL_21;
  v6 = v4 + v2;
  v7 = *(unsigned __int8 *)(v4 + v2);
  if ((v7 - 48) >= 0xA && (v7 - 97) > 5)
    goto LABEL_21;
  if (v7 != 48)
  {
    v10 = 0;
    v9 = *(_QWORD *)(a1 + 40);
    while (1)
    {
      v11 = v9 + 1;
      if (*(_BYTE *)(v4 + v9) == 95)
        goto LABEL_11;
      *(_QWORD *)(a1 + 40) = v11;
      v14 = *(unsigned __int8 *)(v4 + v9);
      v15 = 16 * v10;
      if ((v14 - 48) > 9)
      {
        if ((v14 - 97) > 5)
          goto LABEL_21;
        v10 = (v14 - 87) + v15;
      }
      else
      {
        v10 = v15 + v14 - 48;
      }
      v9 = v11;
      if (v11 >= v5)
        goto LABEL_21;
    }
  }
  v9 = v2 + 1;
  *(_QWORD *)(a1 + 40) = v2 + 1;
  if (v2 + 1 >= v5 || *(_BYTE *)(v4 + v9) != 95)
  {
LABEL_21:
    v10 = 0;
    *(_BYTE *)(a1 + 49) = 1;
    *a2 = 0;
    a2[1] = 0;
    return v10;
  }
  v10 = 0;
  v11 = v2 + 2;
LABEL_11:
  *(_QWORD *)(a1 + 40) = v11;
  v12 = v9 - v2;
  v13 = v3 - (v2 + v4);
  if (v13 >= v12)
    v13 = v12;
  *a2 = v6;
  a2[1] = v6 + v13;
  return v10;
}

_BYTE *sub_1C54CDE20(uint64_t a1)
{
  _BYTE *result;
  BOOL v3;
  _BYTE *v4;
  _BYTE *v5;

  result = (_BYTE *)sub_1C54CC1C0(a1, 0x47u);
  if (*(_BYTE *)(a1 + 49))
    v3 = 1;
  else
    v3 = result == 0;
  if (!v3)
  {
    v4 = result;
    if ((unint64_t)result >= *(_QWORD *)(a1 + 32) - (*(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 24)))
    {
      *(_BYTE *)(a1 + 49) = 1;
    }
    else
    {
      sub_1C54CC150((_BYTE *)a1, "for<", "");
      v5 = 0;
      do
      {
        ++*(_QWORD *)(a1 + 16);
        if (v5)
          sub_1C54CC150((_BYTE *)a1, ", ", "");
        sub_1C54CDBF0((_QWORD *)a1, 1);
        ++v5;
      }
      while (v4 != v5);
      return sub_1C54CC150((_BYTE *)a1, "> ", "");
    }
  }
  return result;
}

char *llvm::dlangDemangle(char *this, const char *a2)
{
  const char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  const char *v12;
  int v13;
  void *v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  if (this)
  {
    v2 = this;
    if (strncmp(this, "_D", 2uLL))
      return 0;
    v16 = -1;
    v17 = 1;
    this = (char *)malloc_type_malloc(0x400uLL, 0x1E4FE0F9uLL);
    if (!this)
      return this;
    v14 = this;
    v15 = xmmword_1C86520E0;
    if (!strcmp(v2, "_Dmain"))
    {
      sub_1C54C1634(&v14, 6);
      v11 = (char *)v14 + v15;
      *((_WORD *)v11 + 2) = 28265;
      *(_DWORD *)v11 = 1634541636;
      *(_QWORD *)&v15 = v15 + 6;
      if ((_QWORD)v15)
      {
LABEL_27:
        sub_1C54C1634(&v14, 1);
        *((_BYTE *)v14 + v15) = 0;
        return (char *)v14;
      }
      goto LABEL_28;
    }
    v12 = v2;
    v3 = 0;
    v13 = strlen(v2);
    v4 = (char *)(v2 + 2);
    v5 = MEMORY[0x1E0C80978];
    do
    {
      if (*v4 == 48)
      {
        do
          v6 = *++v4;
        while (v6 == 48);
      }
      else
      {
        if (v3)
        {
          sub_1C54C1634(&v14, 1);
          v7 = v15;
          *(_QWORD *)&v15 = v15 + 1;
          *((_BYTE *)v14 + v7) = 46;
        }
        v8 = sub_1C54CE1AC(&v12, &v14, (unsigned __int8 *)v4);
        if (!v8)
          goto LABEL_28;
        v4 = (char *)v8;
        v3 = 1;
      }
      v18 = 0;
      if (*v4 < 0)
        break;
      v9 = *v4;
    }
    while ((*(_DWORD *)(v5 + 4 * v9 + 60) & 0x400) != 0
         || (_DWORD)v9 == 81
         && sub_1C54CE634(v4 + 1, &v18)
         && v18 <= v4 - v12
         && (v4[-v18] & 0x80000000) == 0
         && (*(_DWORD *)(v5 + 4 * v4[-v18] + 60) & 0x400) != 0);
    if (*v4 == 90)
    {
      v10 = v4 + 1;
    }
    else
    {
      v10 = sub_1C54CE0FC((uint64_t)&v12, v4);
      if (!v10)
      {
LABEL_28:
        free(v14);
        return 0;
      }
    }
    if (!*v10 && (_QWORD)v15)
      goto LABEL_27;
    goto LABEL_28;
  }
  return this;
}

char *sub_1C54CE0FC(uint64_t a1, char *a2)
{
  int v2;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a2;
  if (!*a2)
    return 0;
  if (v2 != 81)
  {
    if (v2 == 105)
      return a2 + 1;
    else
      return 0;
  }
  v6 = &a2[-*(_QWORD *)a1];
  v7 = *(int *)(a1 + 8);
  if ((uint64_t)v6 >= v7)
    return 0;
  *(_DWORD *)(a1 + 8) = (_DWORD)v6;
  v11 = 0;
  v8 = sub_1C54CE634(a2 + 1, &v11);
  if (!v8 || v11 > (uint64_t)&a2[-*(_QWORD *)a1])
    return 0;
  v9 = v8;
  v10 = sub_1C54CE0FC(a1, &a2[-v11]);
  *(_DWORD *)(a1 + 8) = v7;
  if (v10)
    return v9;
  else
    return 0;
}

const char *sub_1C54CE1AC(_QWORD *a1, _QWORD *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  _BYTE *v10;
  const char *result;
  unsigned __int8 *v12;
  char *v13;
  size_t v14;
  uint64_t v15;

  while (1)
  {
    if (!a3)
      return 0;
    v3 = a3;
    if (!*a3)
      return 0;
    v4 = a2;
    v5 = a1;
    if (*a3 == 81)
      break;
    v15 = 0;
    v10 = sub_1C54CE34C(a3, (unint64_t *)&v15);
    result = 0;
    if (!v10 || !v15)
      return result;
    if (strlen(v10) < v15)
      return 0;
    if ((unint64_t)v15 < 4 || *v10 != 95 || v10[1] != 95 || v10[2] != 83)
      return sub_1C54CE3D0(v4, v10, v15);
    v12 = v10 + 3;
    a3 = &v10[v15];
    if (v15 >= 4)
    {
      do
      {
        if ((char)*v12 < 0)
          break;
        if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *v12 + 60) & 0x400) == 0)
          break;
        ++v12;
      }
      while (v12 < a3);
    }
    if (a3 != v12)
      return sub_1C54CE3D0(v4, v10, v15);
    a1 = v5;
    a2 = v4;
  }
  v14 = 0;
  v15 = 0;
  v6 = sub_1C54CE634((char *)a3 + 1, &v15);
  if (v6)
  {
    v7 = v6;
    v8 = (uint64_t)&v3[-*v5];
    if (v15 <= v8)
      v6 = (char *)&v3[-v15];
    else
      v6 = 0;
    if (v15 <= v8)
      v9 = v7;
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  result = sub_1C54CE34C(v6, &v14);
  if (result)
  {
    v13 = (char *)result;
    if (strlen(result) < v14)
      return 0;
    if (sub_1C54CE3D0(v4, v13, v14))
      return v9;
    else
      return 0;
  }
  return result;
}

_BYTE *sub_1C54CE34C(_BYTE *result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  if (result)
  {
    if (((char)*result & 0x80000000) == 0)
    {
      v2 = *result;
      if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v2 + 60) & 0x400) != 0)
      {
        v3 = 0;
        while (v3 <= (0x10000002FLL - v2) / 0xAuLL)
        {
          ++result;
          v3 = v2 + 10 * v3 - 48;
          if ((char)*result < 0)
            goto LABEL_10;
          v2 = *result;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v2 + 60) & 0x400) == 0)
          {
            if (!*result)
              return 0;
LABEL_10:
            *a2 = v3;
            return result;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

char *sub_1C54CE3D0(_QWORD *a1, char *__s1, size_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;

  switch(a3)
  {
    case 6uLL:
      if (!strncmp(__s1, "__initZ", 7uLL))
      {
        sub_1C54C1634(a1, 16);
        memmove((void *)(*a1 + 16), (const void *)*a1, a1[1]);
        *(_OWORD *)*a1 = *(_OWORD *)"initializer for ";
        v7 = a1[1] + 15;
      }
      else
      {
        if (strncmp(__s1, "__vtblZ", 7uLL))
          goto LABEL_12;
        sub_1C54C1634(a1, 11);
        memmove((void *)(*a1 + 11), (const void *)*a1, a1[1]);
        v6 = *a1;
        *(_QWORD *)v6 = *(_QWORD *)"vtable for ";
        *(_DWORD *)(v6 + 7) = 544370534;
        v7 = a1[1] + 10;
      }
      a1[1] = v7;
      v8 = __s1 + 6;
      break;
    case 7uLL:
      if (strncmp(__s1, "__ClassZ", 8uLL))
        goto LABEL_12;
      sub_1C54C1634(a1, 14);
      memmove((void *)(*a1 + 14), (const void *)*a1, a1[1]);
      qmemcpy((void *)*a1, "ClassInfo for ", 14);
      a1[1] += 13;
      v8 = __s1 + 7;
      break;
    case 0xBuLL:
      if (strncmp(__s1, "__InterfaceZ", 0xCuLL))
        goto LABEL_12;
      sub_1C54C1634(a1, 14);
      memmove((void *)(*a1 + 14), (const void *)*a1, a1[1]);
      qmemcpy((void *)*a1, "Interface for ", 14);
      a1[1] += 13;
      v8 = __s1 + 11;
      break;
    case 0xCuLL:
      if (strncmp(__s1, "__ModuleInfoZ", 0xDuLL))
      {
LABEL_12:
        v8 = &__s1[a3];
        goto LABEL_13;
      }
      sub_1C54C1634(a1, 15);
      memmove((void *)(*a1 + 15), (const void *)*a1, a1[1]);
      qmemcpy((void *)*a1, "ModuleInfo for ", 15);
      a1[1] += 14;
      v8 = __s1 + 12;
      break;
    default:
      v8 = &__s1[a3];
      if (a3)
      {
LABEL_13:
        sub_1C54C1634(a1, a3);
        memcpy((void *)(*a1 + a1[1]), __s1, a3);
        a1[1] += a3;
      }
      break;
  }
  return v8;
}

char *sub_1C54CE634(char *a1, uint64_t *a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a1;
  if (a1)
  {
    v4 = *a1;
    v5 = MEMORY[0x1E0C80978];
    if (*a1 < 0)
    {
      if (!__maskrune((char)v4, 0x100uLL))
        return 0;
    }
    else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v4 + 60) & 0x100) == 0)
    {
      return 0;
    }
    v6 = 0;
    ++v2;
    while (1)
    {
      v7 = *(v2 - 1);
      v8 = *(v2 - 1) < 0 ? __maskrune((char)v7, 0x100uLL) : *(_DWORD *)(v5 + 4 * v7 + 60) & 0x100;
      if (!v8 || v6 > 0x9D89D89D89D89D7)
        break;
      v10 = 26 * v6;
      v11 = *(v2 - 1);
      if ((v11 - 97) <= 0x19u)
      {
        v12 = (v11 - 97) + v10;
        if (v12 < 1)
          return 0;
        *a2 = v12;
        return v2;
      }
      v6 = v10 + v11 - 65;
      ++v2;
    }
    return 0;
  }
  return v2;
}

uint64_t llvm::omp::getOpenMPDirectiveKind(char *__s1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v31;
  int v32;
  uint64_t v54;
  int v67;
  char v70;
  char v71;
  int v78;
  char v81;
  char v82;
  char v88;
  char v89;
  char v94;
  char v95;
  int v98;
  BOOL v99;
  char v104;
  BOOL v106;
  char v108;
  char v109;
  char v110;
  char v111;
  char v112;
  char v117;
  char v126;
  char v130;
  char v131;
  BOOL v132;
  uint64_t v133;
  _BOOL4 v134;
  char v136;
  char v138;
  char v141;
  _BOOL4 v142;
  uint64_t v144;
  BOOL v145;
  char v146;
  char v147;
  char v151;
  char v152;
  char v156;
  char v157;
  uint64_t v158;

  if (a2 == 8)
  {
    switch(*(_QWORD *)__s1)
    {
      case 0x657461636F6C6C61:
        v5 = 0x100000000;
        goto LABEL_610;
      case 0x6C61636974697263:
        v5 = 0x100000009;
        goto LABEL_610;
      case 0x646D697320726F66:
        v5 = 0x100000022;
        goto LABEL_610;
      case 0x6C656C6C61726170:
        v5 = 0x100000028;
        goto LABEL_610;
      case 0x7365726975716572:
        v5 = 0x100000032;
        goto LABEL_610;
      case 0x736E6F6974636573:
        v5 = 0x100000035;
        goto LABEL_610;
      case 0x706F6F6C6B736174:
        v5 = 0x10000004CLL;
        goto LABEL_610;
      case 0x746961776B736174:
        v5 = 0x10000004ELL;
        goto LABEL_610;
    }
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v5 = 0;
    v9 = 1;
LABEL_540:
    if (a2 == 5 && v9)
    {
      if (*(_DWORD *)__s1 == 1835099508 && __s1[4] == 115)
      {
        v5 = 0x100000050;
        goto LABEL_610;
      }
    }
    else
    {
LABEL_548:
      if (v7)
      {
LABEL_549:
        if (*(_QWORD *)__s1 == 0x696420736D616574 && *((_QWORD *)__s1 + 1) == 0x6574756269727473)
        {
          v5 = 0x100000051;
          goto LABEL_610;
        }
      }
    }
    if (v6)
    {
LABEL_554:
      if (*(_QWORD *)__s1 == 0x696420736D616574
        && *((_QWORD *)__s1 + 1) == 0x6574756269727473
        && *((_QWORD *)__s1 + 2) == 0x656C6C6172617020
        && *((_DWORD *)__s1 + 6) == 1868832876)
      {
        v54 = 80;
        goto LABEL_609;
      }
    }
    else
    {
      v126 = v9 ^ 1;
      if (a2 != 33)
        v126 = 1;
      if ((v126 & 1) == 0)
      {
        if (!memcmp(__s1, "teams distribute parallel do simd", 0x21uLL))
        {
          v54 = 81;
          goto LABEL_609;
        }
        goto LABEL_597;
      }
    }
    if (a2 == 29 && v9)
    {
      if (*(_QWORD *)__s1 == 0x696420736D616574
        && *((_QWORD *)__s1 + 1) == 0x6574756269727473
        && *((_QWORD *)__s1 + 2) == 0x656C6C6172617020
        && *(_QWORD *)(__s1 + 21) == 0x726F66206C656C6CLL)
      {
        v5 = 0x100000054;
        goto LABEL_610;
      }
    }
    else
    {
      v130 = v9 ^ 1;
      if (a2 == 34)
        v131 = v9 ^ 1;
      else
        v131 = 1;
      if ((v131 & 1) != 0)
      {
        if (a2 != 21)
          v130 = 1;
        if ((v130 & 1) == 0)
        {
LABEL_200:
          if (*(_QWORD *)__s1 != 0x696420736D616574
            || *((_QWORD *)__s1 + 1) != 0x6574756269727473
            || *(_QWORD *)(__s1 + 13) != 0x646D697320657475)
          {
            goto LABEL_610;
          }
          v54 = 84;
          goto LABEL_609;
        }
      }
      else if (!memcmp(__s1, "teams distribute parallel for simd", 0x22uLL))
      {
        v5 = 0x100000055;
        goto LABEL_610;
      }
    }
LABEL_597:
    if (!v8
      || (*(_QWORD *)__s1 == 0x7270646165726874 ? (v132 = *(_QWORD *)(__s1 + 5) == 0x6574617669727064) : (v132 = 0),
          !v132))
    {
      v133 = v5 & 0x100000000;
      v134 = (v5 & 0x100000000) == 0;
      if (a2 == 4 && !v133)
      {
        if (*(_DWORD *)__s1 == 1701603700)
        {
          v5 = 0x100000058;
        }
        else if (*(_DWORD *)__s1 == 1886351212)
        {
          v5 = 0x10000005ELL;
        }
        goto LABEL_610;
      }
LABEL_652:
      v142 = a2 == 7;
      if (a2 == 7 && v134)
      {
        if (*(_DWORD *)__s1 == 1852534389 && *(_DWORD *)(__s1 + 3) == 1853321070)
        {
          v5 = 0x100000059;
          goto LABEL_610;
        }
        v142 = 1;
        v134 = 1;
      }
      else
      {
        v146 = !v134;
        v147 = a2 != 6 || !v134;
        if ((v147 & 1) == 0)
        {
          if (*(_DWORD *)__s1 == 1869770357 && *((_WORD *)__s1 + 2) == 27756)
          {
            v5 = 0x10000005ALL;
          }
          else if (*(_DWORD *)__s1 == 1802723693 && *((_WORD *)__s1 + 2) == 25701)
          {
            v5 = 0x10000005FLL;
          }
          goto LABEL_610;
        }
        if (a2 != 9)
          v146 = 1;
        if ((v146 & 1) == 0)
        {
          if (*(_QWORD *)__s1 == 0x726168736B726F77 && __s1[8] == 101)
            v5 = 0x10000005BLL;
          goto LABEL_610;
        }
        if (a2 == 8 && !v133)
        {
          v144 = 0x10000005CLL;
          v145 = *(_QWORD *)__s1 == 0x6863746170736964;
          goto LABEL_723;
        }
      }
      if (v142 && v134)
      {
        v144 = 0x10000005DLL;
        v145 = (*(_DWORD *)__s1 ^ 0x65746E69 | *(_DWORD *)(__s1 + 3) ^ 0x706F7265) == 0;
      }
      else
      {
        v151 = !v134;
        v152 = a2 != 13 || !v134;
        if ((v152 & 1) == 0)
        {
          if (*(_QWORD *)__s1 == 0x6C656C6C61726170 && *(_QWORD *)(__s1 + 5) == 0x706F6F6C206C656CLL)
            v5 = 0x100000060;
          goto LABEL_610;
        }
        if (a2 != 20)
          v151 = 1;
        if ((v151 & 1) == 0)
        {
          if (*(_QWORD *)__s1 == 0x7020746567726174
            && *((_QWORD *)__s1 + 1) == 0x206C656C6C617261
            && *((_DWORD *)__s1 + 4) == 1886351212)
          {
            v5 = 0x100000061;
          }
          goto LABEL_610;
        }
        v156 = !v134;
        if (a2 == 17)
          v157 = v156;
        else
          v157 = 1;
        if ((v157 & 1) != 0)
        {
          if (a2 != 10)
            v156 = 1;
          if ((v156 & 1) != 0)
            goto LABEL_610;
          v158 = *(_QWORD *)__s1 ^ 0x6F6C20736D616574 | *((unsigned __int16 *)__s1 + 4) ^ 0x706FLL;
          v144 = 0x100000063;
        }
        else
        {
          v158 = *(_QWORD *)__s1 ^ 0x7420746567726174 | *((_QWORD *)__s1 + 1) ^ 0x6F6F6C20736D6165 | __s1[16] ^ 0x70;
          v144 = 0x100000062;
        }
        v145 = v158 == 0;
      }
LABEL_723:
      if (v145)
        v5 = v144;
      goto LABEL_610;
    }
    v54 = 85;
LABEL_609:
    v5 = v54 | 0x100000002;
    goto LABEL_610;
  }
  v4 = 0;
  switch(a2)
  {
    case 2:
      if (*(_WORD *)__s1 != 28516)
        goto LABEL_249;
      v5 = 0x100000016;
      goto LABEL_610;
    case 3:
      if (*(_WORD *)__s1 != 28518 || __s1[2] != 114)
        goto LABEL_249;
      v5 = 0x100000021;
      goto LABEL_610;
    case 5:
      if (*(_DWORD *)__s1 != 1937075302 || __s1[4] != 104)
        goto LABEL_98;
      v5 = 0x100000020;
      goto LABEL_610;
    case 6:
      if (*(_DWORD *)__s1 == 1836020833 && *((_WORD *)__s1 + 2) == 25449)
      {
        v5 = 0x100000002;
      }
      else if (*(_DWORD *)__s1 == 1668178275 && *((_WORD *)__s1 + 2) == 27749)
      {
        v5 = 0x100000007;
      }
      else if (*(_DWORD *)__s1 == 1869636964 && *((_WORD *)__s1 + 2) == 27234)
      {
        v5 = 0x10000000FLL;
      }
      else if (*(_DWORD *)__s1 == 543452773 && *((_WORD *)__s1 + 2) == 28516)
      {
        v5 = 0x10000001BLL;
      }
      else
      {
        if (*(_DWORD *)__s1 != 1953718637 || *((_WORD *)__s1 + 2) != 29285)
          goto LABEL_249;
        v5 = 0x100000023;
      }
      goto LABEL_610;
    case 7:
      if (*(_DWORD *)__s1 == 1970500449 && *(_DWORD *)(__s1 + 3) == 1936026997)
      {
        v4 = 0;
        v9 = 0;
        v5 = 0x100000001;
        goto LABEL_251;
      }
      if (*(_DWORD *)__s1 == 1920098658 && *(_DWORD *)(__s1 + 3) == 1919248754)
      {
        v5 = 0x100000003;
      }
      else if (*(_DWORD *)__s1 == 1931505508 && *(_DWORD *)(__s1 + 3) == 1684892019)
      {
        v5 = 0x100000017;
      }
      else
      {
        if (*(_DWORD *)__s1 != 1701081711 || *(_DWORD *)(__s1 + 3) != 1684370021)
          goto LABEL_89;
        v5 = 0x100000027;
      }
      goto LABEL_610;
    case 10:
      if (*(_QWORD *)__s1 == 0x7562697274736964 && *((_WORD *)__s1 + 4) == 25972)
      {
        v5 = 0x100000010;
      }
      else
      {
        if (*(_QWORD *)__s1 != 0x676E697320646E65 || *((_WORD *)__s1 + 4) != 25964)
          goto LABEL_98;
        v5 = 0x10000001ELL;
      }
      goto LABEL_610;
    case 11:
      if (*(_QWORD *)__s1 == 0x7573736120646E65 && *(_QWORD *)(__s1 + 3) == 0x73656D7573736120)
      {
        v5 = 0x100000018;
      }
      else
      {
        if (*(_QWORD *)__s1 != 0x73206F6420646E65 || *(_QWORD *)(__s1 + 3) != 0x646D6973206F6420)
        {
LABEL_89:
          v4 = 0;
          goto LABEL_112;
        }
        v5 = 0x10000001CLL;
      }
      goto LABEL_610;
    case 12:
      if (*(_QWORD *)__s1 == 0x206572616C636564 && *((_DWORD *)__s1 + 2) == 1684892019)
      {
        v5 = 0x10000000CLL;
      }
      else
      {
        if (*(_QWORD *)__s1 != 0x7463657320646E65 || *((_DWORD *)__s1 + 2) != 1936617321)
        {
LABEL_98:
          v5 = 0;
          v4 = 0;
          v9 = 1;
          goto LABEL_262;
        }
        v5 = 0x10000001DLL;
      }
      goto LABEL_610;
    case 13:
      if (*(_QWORD *)__s1 == 0x7361206E69676562 && *(_QWORD *)(__s1 + 5) == 0x73656D7573736120)
      {
        v5 = 0x100000004;
      }
      else if (*(_QWORD *)__s1 == 0x6B726F7720646E65 && *(_QWORD *)(__s1 + 5) == 0x65726168736B726FLL)
      {
        v5 = 0x10000001FLL;
      }
      else
      {
        if (*(_QWORD *)__s1 != 0x657269646174656DLL || *(_QWORD *)(__s1 + 5) != 0x6576697463657269)
        {
          v4 = 1;
          goto LABEL_112;
        }
        v5 = 0x100000026;
      }
      goto LABEL_610;
    case 14:
      if (*(_QWORD *)__s1 == 0x206572616C636564 && *(_QWORD *)(__s1 + 6) == 0x72657070616D2065)
      {
        v5 = 0x10000000ALL;
      }
      else
      {
        if (*(_QWORD *)__s1 != 0x206572616C636564 || *(_QWORD *)(__s1 + 6) != 0x7465677261742065)
          goto LABEL_249;
        v5 = 0x10000000DLL;
      }
      goto LABEL_610;
    case 15:
      if (*(_QWORD *)__s1 == 0x206572616C636564 && *(_QWORD *)(__s1 + 7) == 0x746E616972617620)
      {
        v5 = 0x10000000ELL;
      }
      else if (*(_QWORD *)__s1 == 0x7562697274736964 && *(_QWORD *)(__s1 + 7) == 0x646D697320657475)
      {
        v5 = 0x100000015;
      }
      else
      {
        if (*(_QWORD *)__s1 != 0x742072657473616DLL || *(_QWORD *)(__s1 + 7) != 0x706F6F6C6B736174)
          goto LABEL_249;
        v5 = 0x100000024;
      }
      goto LABEL_610;
    case 17:
      if (*(_QWORD *)__s1 != 0x206572616C636564 || *((_QWORD *)__s1 + 1) != 0x6F69746375646572 || __s1[16] != 110)
        goto LABEL_249;
      v5 = 0x10000000BLL;
      goto LABEL_610;
    case 18:
      if (*(_QWORD *)__s1 == 0x616C6C65636E6163
        && *((_QWORD *)__s1 + 1) == 0x696F70206E6F6974
        && *((_WORD *)__s1 + 8) == 29806)
      {
        v5 = 0x100000008;
      }
      else
      {
        if (*(_QWORD *)__s1 != 0x6C63656420646E65
          || *((_QWORD *)__s1 + 1) != 0x6772617420657261
          || *((_WORD *)__s1 + 8) != 29797)
        {
          goto LABEL_249;
        }
        v5 = 0x100000019;
      }
      goto LABEL_610;
    case 19:
      if (*(_QWORD *)__s1 != 0x6C63656420646E65
        || *((_QWORD *)__s1 + 1) != 0x6972617620657261
        || *(_QWORD *)(__s1 + 11) != 0x746E616972617620)
      {
        goto LABEL_249;
      }
      v5 = 0x10000001ALL;
      goto LABEL_610;
    case 20:
      if (*(_QWORD *)__s1 == 0x6564206E69676562
        && *((_QWORD *)__s1 + 1) == 0x6174206572616C63
        && *((_DWORD *)__s1 + 4) == 1952802674)
      {
        v5 = 0x100000005;
      }
      else
      {
        if (*(_QWORD *)__s1 != 0x742072657473616DLL
          || *((_QWORD *)__s1 + 1) != 0x20706F6F6C6B7361
          || *((_DWORD *)__s1 + 4) != 1684892019)
        {
          goto LABEL_249;
        }
        v5 = 0x100000025;
      }
      goto LABEL_610;
    case 21:
      if (*(_QWORD *)__s1 != 0x6564206E69676562
        || *((_QWORD *)__s1 + 1) != 0x6176206572616C63
        || *(_QWORD *)(__s1 + 13) != 0x746E616972617620)
      {
        v5 = 0;
        goto LABEL_200;
      }
      v5 = 0x100000006;
      goto LABEL_610;
    case 22:
      if (*(_QWORD *)__s1 != 0x7562697274736964
        || *((_QWORD *)__s1 + 1) != 0x6C61726170206574
        || *(_QWORD *)(__s1 + 14) != 0x6F64206C656C6C61)
      {
        goto LABEL_249;
      }
      v5 = 0x100000011;
      goto LABEL_610;
    case 23:
      if (*(_QWORD *)__s1 != 0x7562697274736964
        || *((_QWORD *)__s1 + 1) != 0x6C61726170206574
        || *(_QWORD *)(__s1 + 15) != 0x726F66206C656C6CLL)
      {
        goto LABEL_249;
      }
      v5 = 0x100000013;
      goto LABEL_610;
    case 27:
      if (*(_QWORD *)__s1 != 0x7562697274736964
        || *((_QWORD *)__s1 + 1) != 0x6C61726170206574
        || *((_QWORD *)__s1 + 2) != 0x73206F64206C656CLL
        || *(_QWORD *)(__s1 + 19) != 0x646D6973206F6420)
      {
        goto LABEL_249;
      }
      v5 = 0x100000012;
      goto LABEL_610;
    case 28:
      if (*(_QWORD *)__s1 != 0x7562697274736964
        || *((_QWORD *)__s1 + 1) != 0x6C61726170206574
        || *((_QWORD *)__s1 + 2) != 0x20726F66206C656CLL
        || *((_DWORD *)__s1 + 6) != 1684892019)
      {
LABEL_249:
        v4 = 0;
        goto LABEL_250;
      }
      v5 = 0x100000014;
      goto LABEL_610;
    default:
LABEL_112:
      if (a2 == 11)
      {
        if (*(_QWORD *)__s1 == 0x6C656C6C61726170 && *(_QWORD *)(__s1 + 3) == 0x6F64206C656C6C61)
        {
          v5 = 0x100000029;
          goto LABEL_610;
        }
        v5 = 0;
        v31 = 0;
        v32 = 1;
        goto LABEL_269;
      }
LABEL_250:
      v5 = 0;
      v9 = 1;
LABEL_251:
      if (a2 == 16 && v9)
      {
        if (*(_QWORD *)__s1 == 0x6C656C6C61726170 && *((_QWORD *)__s1 + 1) == 0x646D6973206F6420)
        {
          v5 = 0x10000002ALL;
          goto LABEL_610;
        }
        if (*(_QWORD *)__s1 == 0x6520746567726174 && *((_QWORD *)__s1 + 1) == 0x6174616420746978)
        {
          v5 = 0x10000003BLL;
          goto LABEL_610;
        }
        v67 = 0;
        v31 = 0;
        v7 = 1;
LABEL_313:
        v9 = 1;
        goto LABEL_314;
      }
LABEL_262:
      if (a2 == 12 && v9)
      {
        if (*(_QWORD *)__s1 == 0x6C656C6C61726170 && *((_DWORD *)__s1 + 2) == 1919903264)
        {
          v5 = 0x10000002BLL;
          goto LABEL_610;
        }
        v32 = 0;
        v31 = 0;
LABEL_269:
        v9 = 1;
        goto LABEL_270;
      }
      v70 = v9 ^ 1;
      if (a2 == 17)
        v71 = v9 ^ 1;
      else
        v71 = 1;
      if ((v71 & 1) == 0)
      {
        if (*(_QWORD *)__s1 == 0x6C656C6C61726170 && *((_QWORD *)__s1 + 1) == 0x6D697320726F6620 && __s1[16] == 100)
        {
          v5 = 0x10000002CLL;
          goto LABEL_610;
        }
        if (*(_QWORD *)__s1 == 0x6C656C6C61726170 && *((_QWORD *)__s1 + 1) == 0x6E6F697463657320 && __s1[16] == 115)
        {
          v5 = 0x100000030;
          goto LABEL_610;
        }
        if (*(_QWORD *)__s1 == 0x6520746567726174 && *((_QWORD *)__s1 + 1) == 0x746164207265746ELL && __s1[16] == 97)
        {
          v5 = 0x10000003ALL;
          goto LABEL_610;
        }
        goto LABEL_302;
      }
      if (a2 != 15)
        v70 = 1;
      if ((v70 & 1) == 0)
      {
        if (*(_QWORD *)__s1 == 0x6C656C6C61726170 && *(_QWORD *)(__s1 + 7) == 0x72657473616D206CLL)
        {
          v5 = 0x10000002DLL;
          goto LABEL_610;
        }
        v67 = 0;
        v31 = 0;
        v7 = 0;
        goto LABEL_313;
      }
      v81 = v9 ^ 1;
      if (a2 == 24)
        v82 = v9 ^ 1;
      else
        v82 = 1;
      if ((v82 & 1) != 0)
      {
        if (a2 != 29)
          v81 = 1;
        if ((v81 & 1) != 0)
        {
          v88 = v9 ^ 1;
          if (a2 == 18)
            v89 = v9 ^ 1;
          else
            v89 = 1;
          if ((v89 & 1) == 0)
          {
            if (*(_QWORD *)__s1 == 0x6C656C6C61726170
              && *((_QWORD *)__s1 + 1) == 0x6168736B726F7720
              && *((_WORD *)__s1 + 8) == 25970)
            {
              v5 = 0x100000031;
              goto LABEL_610;
            }
            v7 = 0;
            v31 = 0;
            v67 = 0;
            v9 = 1;
            goto LABEL_389;
          }
          if (a2 != 4)
            v88 = 1;
          if ((v88 & 1) != 0)
          {
            v136 = v9 ^ 1;
            if (a2 != 7)
              v136 = 1;
            if ((v136 & 1) == 0)
            {
              if (*(_DWORD *)__s1 == 1952671091 && *(_DWORD *)(__s1 + 3) == 1852795252)
              {
                v5 = 0x100000034;
                goto LABEL_610;
              }
              if ((v4 & 1) == 0)
              {
                v133 = v5 & 0x100000000;
                v134 = (v5 & 0x100000000) == 0;
                goto LABEL_652;
              }
              v7 = 0;
              goto LABEL_509;
            }
          }
          else
          {
            if (*(_DWORD *)__s1 == 1851876211)
            {
              v5 = 0x100000033;
              goto LABEL_610;
            }
            v9 = 1;
          }
          if (a2 == 4 && v9)
          {
            if (*(_DWORD *)__s1 == 1684892019)
            {
              v5 = 0x100000036;
              goto LABEL_610;
            }
          }
          else
          {
            v138 = v9 ^ 1;
            if (a2 != 6)
              v138 = 1;
            if ((v138 & 1) != 0)
            {
              v31 = 0;
              v67 = 0;
              v7 = 0;
              if (a2 == 11)
                v141 = v9;
              else
                v141 = 0;
              if ((v141 & 1) != 0)
                goto LABEL_272;
              goto LABEL_314;
            }
            if (*(_DWORD *)__s1 == 1735289203 && *((_WORD *)__s1 + 2) == 25964)
            {
              v5 = 0x100000037;
              goto LABEL_610;
            }
            if (*(_DWORD *)__s1 == 1735549300 && *((_WORD *)__s1 + 2) == 29797)
            {
              v5 = 0x100000038;
              goto LABEL_610;
            }
          }
LABEL_302:
          v7 = 0;
          v78 = 0;
          v9 = 1;
          if ((v4 & 1) == 0)
            goto LABEL_515;
          goto LABEL_509;
        }
        if (*(_QWORD *)__s1 == 0x6C656C6C61726170
          && *((_QWORD *)__s1 + 1) == 0x2072657473616D20
          && *((_QWORD *)__s1 + 2) == 0x706F6F6C6B736174
          && *(_QWORD *)(__s1 + 21) == 0x646D697320706F6FLL)
        {
          v5 = 0x10000002FLL;
          goto LABEL_610;
        }
        v32 = 0;
        v31 = 0;
      }
      else
      {
        if (*(_QWORD *)__s1 == 0x6C656C6C61726170
          && *((_QWORD *)__s1 + 1) == 0x2072657473616D20
          && *((_QWORD *)__s1 + 2) == 0x706F6F6C6B736174)
        {
          v5 = 0x10000002ELL;
          goto LABEL_610;
        }
        v32 = 0;
        v31 = 1;
      }
LABEL_270:
      v67 = 0;
      v7 = 0;
      if (v32 && v9)
      {
LABEL_272:
        if (*(_QWORD *)__s1 == 0x6420746567726174 && *(_QWORD *)(__s1 + 3) == 0x6174616420746567)
        {
          v5 = 0x100000039;
          goto LABEL_610;
        }
        v7 = 0;
        v67 = 1;
        goto LABEL_313;
      }
LABEL_314:
      if (a2 == 15 && v9)
      {
        if (*(_QWORD *)__s1 == 0x7020746567726174 && *(_QWORD *)(__s1 + 7) == 0x6C656C6C61726170)
        {
          v5 = 0x10000003CLL;
          goto LABEL_610;
        }
LABEL_422:
        v98 = 0;
        goto LABEL_423;
      }
LABEL_389:
      if (a2 == 18 && v9)
      {
        if (*(_QWORD *)__s1 == 0x7020746567726174
          && *((_QWORD *)__s1 + 1) == 0x206C656C6C617261
          && *((_WORD *)__s1 + 8) == 28516)
        {
          v5 = 0x10000003DLL;
          goto LABEL_610;
        }
        goto LABEL_422;
      }
      v94 = v9 ^ 1;
      if (a2 == 23)
        v95 = v9 ^ 1;
      else
        v95 = 1;
      if ((v95 & 1) != 0)
      {
        if (a2 != 19)
          v94 = 1;
        if ((v94 & 1) == 0)
        {
          v99 = *(_QWORD *)__s1 == 0x7020746567726174 && *((_QWORD *)__s1 + 1) == 0x206C656C6C617261;
          if (v99 && *(_QWORD *)(__s1 + 11) == 0x726F66206C656C6CLL)
          {
            v5 = 0x10000003FLL;
            goto LABEL_610;
          }
        }
        goto LABEL_422;
      }
      if (*(_QWORD *)__s1 == 0x7020746567726174
        && *((_QWORD *)__s1 + 1) == 0x206C656C6C617261
        && *(_QWORD *)(__s1 + 15) == 0x646D6973206F6420)
      {
        v5 = 0x10000003ELL;
        goto LABEL_610;
      }
      v98 = 1;
LABEL_423:
      if (v31)
      {
        if (*(_QWORD *)__s1 == 0x7020746567726174
          && *((_QWORD *)__s1 + 1) == 0x206C656C6C617261
          && *((_QWORD *)__s1 + 2) == 0x646D697320726F66)
        {
          v5 = 0x100000040;
          goto LABEL_610;
        }
      }
      else if (v67)
      {
        if (*(_QWORD *)__s1 == 0x7320746567726174 && *(_QWORD *)(__s1 + 3) == 0x646D697320746567)
        {
          v5 = 0x100000041;
          goto LABEL_610;
        }
      }
      if (a2 == 12)
        v104 = v9;
      else
        v104 = 0;
      if ((v104 & 1) != 0)
      {
        if (*(_QWORD *)__s1 == 0x7420746567726174 && *((_DWORD *)__s1 + 2) == 1936548197)
        {
          v5 = 0x100000042;
          goto LABEL_610;
        }
      }
      else
      {
        if (v98)
        {
          v106 = *(_QWORD *)__s1 == 0x7420746567726174 && *((_QWORD *)__s1 + 1) == 0x73696420736D6165;
          if (v106 && *(_QWORD *)(__s1 + 15) == 0x6574756269727473)
          {
            v5 = 0x100000043;
            goto LABEL_610;
          }
        }
        v108 = v9 ^ 1;
        if (a2 == 35)
          v109 = v9 ^ 1;
        else
          v109 = 1;
        if ((v109 & 1) != 0)
        {
          if (a2 != 40)
            v108 = 1;
          if ((v108 & 1) != 0)
          {
            v110 = v9 ^ 1;
            if (a2 == 36)
              v111 = v9 ^ 1;
            else
              v111 = 1;
            if ((v111 & 1) != 0)
            {
              if (a2 != 41)
                v110 = 1;
              if ((v110 & 1) != 0)
              {
                v112 = v9 ^ 1;
                if (a2 != 28)
                  v112 = 1;
                if ((v112 & 1) == 0)
                {
                  if (*(_QWORD *)__s1 == 0x7420746567726174
                    && *((_QWORD *)__s1 + 1) == 0x73696420736D6165
                    && *((_QWORD *)__s1 + 2) == 0x2065747562697274
                    && *((_DWORD *)__s1 + 6) == 1684892019)
                  {
                    v5 = 0x100000048;
                    goto LABEL_610;
                  }
                  if ((v4 & 1) == 0)
                  {
                    v8 = 0;
                    if ((v7 & 1) == 0)
                      goto LABEL_554;
                    v6 = 1;
                    goto LABEL_549;
                  }
                  v6 = 1;
                  goto LABEL_527;
                }
              }
              else if (!memcmp(__s1, "target teams distribute parallel for simd", 0x29uLL))
              {
                v5 = 0x100000047;
                goto LABEL_610;
              }
            }
            else if (!memcmp(__s1, "target teams distribute parallel for", 0x24uLL))
            {
              v5 = 0x100000046;
              goto LABEL_610;
            }
          }
          else if (!memcmp(__s1, "target teams distribute parallel do simd", 0x28uLL))
          {
            v5 = 0x100000045;
            goto LABEL_610;
          }
        }
        else if (!memcmp(__s1, "target teams distribute parallel do", 0x23uLL))
        {
          v5 = 0x100000044;
          goto LABEL_610;
        }
      }
      if (!v4)
      {
        v78 = 0;
        goto LABEL_515;
      }
LABEL_509:
      if (*(_QWORD *)__s1 == 0x7520746567726174 && *(_QWORD *)(__s1 + 5) == 0x6574616470752074)
      {
        v5 = 0x100000049;
        goto LABEL_610;
      }
      v78 = 1;
LABEL_515:
      if (a2 == 4 && v9)
      {
        if (*(_DWORD *)__s1 == 1802723700)
        {
          v5 = 0x10000004ALL;
          goto LABEL_610;
        }
      }
      else
      {
        v117 = v9 ^ 1;
        if (a2 != 9)
          v117 = 1;
        if ((v117 & 1) == 0 && *(_QWORD *)__s1 == 0x756F72676B736174 && __s1[8] == 112)
        {
          v5 = 0x10000004BLL;
          goto LABEL_610;
        }
      }
      v6 = 0;
      v8 = 0;
      if (v78)
      {
LABEL_527:
        if (*(_QWORD *)__s1 == 0x706F6F6C6B736174 && *(_QWORD *)(__s1 + 5) == 0x646D697320706F6FLL)
        {
          v5 = 0x10000004DLL;
          goto LABEL_610;
        }
        v8 = 1;
      }
      if (a2 != 9 || !v9)
        goto LABEL_540;
      if (*(_QWORD *)__s1 != 0x6C6569796B736174 || __s1[8] != 100)
        goto LABEL_548;
      v5 = 0x10000004FLL;
LABEL_610:
      if ((v5 & 0x300000000) != 0)
        return v5;
      else
        return 89;
  }
}

uint64_t llvm::omp::getOpenMPClauseKind(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  _BOOL4 v7;
  int v8;
  int v9;
  _BOOL4 v10;
  int v11;
  int v18;
  int v19;
  char v20;
  char v30;
  _BOOL4 v34;
  char v36;
  char v44;
  char v45;
  int v50;
  _BOOL4 v51;
  char v53;
  char v55;
  char v56;
  char v57;
  int v58;
  char v60;
  char v61;
  char v71;
  char v72;
  char v74;
  char v75;
  int v77;
  char v78;
  char v85;
  char v86;
  BOOL v89;
  char v101;
  BOOL v102;
  char v104;
  char v105;
  char v108;
  BOOL v112;

  v2 = 0x100000055;
  if (a2 != 7)
  {
    v3 = 0;
    LOBYTE(v4) = 1;
    v5 = 1;
    switch(a2)
    {
      case 4:
        if (*(_DWORD *)a1 != 1684957538)
        {
          v6 = 0;
          v3 = 0;
          v7 = 1;
          goto LABEL_5;
        }
        v2 = 0x10000000ALL;
        goto LABEL_626;
      case 5:
        if (*(_DWORD *)a1 != 1734962273 || *(_BYTE *)(a1 + 4) != 110)
        {
          v3 = 0;
          goto LABEL_68;
        }
        v2 = 0x100000004;
        goto LABEL_626;
      case 6:
      case 7:
      case 10:
        goto LABEL_90;
      case 8:
        if (*(_QWORD *)a1 == 0x7974696E69666661)
        {
          v2 = 0x100000003;
          goto LABEL_626;
        }
        if (*(_QWORD *)a1 == 0x657461636F6C6C61)
        {
          v2 = 0x100000006;
          goto LABEL_626;
        }
LABEL_87:
        v3 = 0;
        goto LABEL_88;
      case 9:
        if (*(_QWORD *)a1 != 0x6F7461636F6C6C61 || *(_BYTE *)(a1 + 8) != 114)
          goto LABEL_87;
        v2 = 0x100000007;
        goto LABEL_626;
      case 11:
        if (*(_QWORD *)a1 == 0x615F7473756A6461 && *(_QWORD *)(a1 + 3) == 0x736772615F747375)
        {
          v2 = 0x100000002;
        }
        else
        {
          if (*(_QWORD *)a1 != 0x615F646E65707061 || *(_QWORD *)(a1 + 3) != 0x736772615F646E65)
          {
            v3 = 0;
            v5 = 1;
            goto LABEL_108;
          }
          v2 = 0x100000008;
        }
        goto LABEL_626;
      default:
        v5 = 1;
        if (a2 != 24)
          goto LABEL_90;
        if (*(_QWORD *)a1 != 0x645F63696D6F7461
          || *(_QWORD *)(a1 + 8) != 0x6D5F746C75616665
          || *(_QWORD *)(a1 + 16) != 0x726564726F5F6D65)
        {
          v11 = 0;
          v18 = 0;
          v19 = 0;
          v10 = 0;
          v3 = 0;
          v9 = 0;
          v8 = 0;
          v20 = 1;
          v7 = 1;
          goto LABEL_41;
        }
        v2 = 0x100000009;
        break;
    }
    goto LABEL_626;
  }
  if (*(_DWORD *)a1 == 1601266529 && *(_DWORD *)(a1 + 3) == 1818587743)
  {
    v2 = 0x100000000;
    goto LABEL_626;
  }
  if (*(_DWORD *)a1 != 1970365281 || *(_DWORD *)(a1 + 3) != 1701996917)
  {
    if (*(_DWORD *)a1 == 1734962273 && *(_DWORD *)(a1 + 3) == 1684368999)
    {
      v2 = 0x100000005;
      goto LABEL_626;
    }
    if (*(_DWORD *)a1 == 1953522019 && *(_DWORD *)(a1 + 3) == 1701999988)
    {
      v2 = 0x10000000BLL;
      goto LABEL_626;
    }
    v3 = 0;
    v5 = 1;
    goto LABEL_94;
  }
  v3 = 0x100000001;
LABEL_88:
  v5 = (v3 & 0x100000000) == 0;
  v4 = HIDWORD(v3);
  if (a2 != 7)
    LOBYTE(v4) = 1;
LABEL_90:
  if (a2 == 8 && v5 && *(_QWORD *)a1 == 0x657370616C6C6F63)
  {
    v2 = 0x10000000CLL;
    goto LABEL_626;
  }
  if ((v4 & 1) == 0)
  {
LABEL_94:
    if (*(_DWORD *)a1 == 1886220131 && *(_DWORD *)(a1 + 3) == 1701994864)
    {
      v2 = 0x10000000DLL;
      goto LABEL_626;
    }
    v30 = 0;
    goto LABEL_115;
  }
LABEL_108:
  v30 = 1;
  if (a2 == 11 && v5)
  {
    if (*(_QWORD *)a1 == 0x7669727079706F63 && *(_QWORD *)(a1 + 3) == 0x6574617669727079)
    {
      v2 = 0x10000000ELL;
      goto LABEL_626;
    }
    v5 = 1;
    goto LABEL_158;
  }
LABEL_115:
  v34 = a2 == 6 && v5;
  if (v34 && *(_DWORD *)a1 == 2037411683 && *(_WORD *)(a1 + 4) == 28265)
  {
    v2 = 0x10000000FLL;
    goto LABEL_626;
  }
  if ((v30 & 1) != 0)
  {
    v36 = !v5;
    if (a2 != 10)
      v36 = 1;
    if ((v36 & 1) == 0)
    {
      if (*(_QWORD *)a1 == 0x6D746C7561666564 && *(_WORD *)(a1 + 8) == 28769)
      {
        v2 = 0x100000011;
        goto LABEL_626;
      }
      v5 = 1;
    }
  }
  else if (*(_DWORD *)a1 == 1634100580 && *(_DWORD *)(a1 + 3) == 1953264993)
  {
    v2 = 0x100000010;
    goto LABEL_626;
  }
  if (!v34)
  {
    if ((v30 & 1) == 0 && *(_DWORD *)a1 == 1953719652 && *(_DWORD *)(a1 + 3) == 2037346932)
      goto LABEL_303;
LABEL_158:
    if (a2 == 11 && v5)
    {
      if (*(_QWORD *)a1 == 0x745F656369766564 && *(_QWORD *)(a1 + 3) == 0x657079745F656369)
      {
        v2 = 0x100000017;
        goto LABEL_626;
      }
LABEL_196:
      v6 = v3 & 0x100000000;
      v7 = (v3 & 0x100000000) == 0;
      goto LABEL_197;
    }
    v44 = !v5;
    v45 = a2 != 13 || !v5;
    if ((v45 & 1) == 0)
    {
      if (*(_QWORD *)a1 == 0x6863735F74736964 && *(_QWORD *)(a1 + 5) == 0x656C756465686373)
      {
        v2 = 0x100000018;
        goto LABEL_626;
      }
      goto LABEL_196;
    }
    if (a2 != 18)
      v44 = 1;
    if ((v44 & 1) == 0)
    {
      if (*(_QWORD *)a1 == 0x5F63696D616E7964
        && *(_QWORD *)(a1 + 8) == 0x6F7461636F6C6C61
        && *(_WORD *)(a1 + 16) == 29554)
      {
        v2 = 0x100000019;
        goto LABEL_626;
      }
      goto LABEL_196;
    }
    v60 = !v5;
    v61 = a2 != 9 || !v5;
    if ((v61 & 1) == 0)
    {
      if (*(_QWORD *)a1 == 0x766973756C637865 && *(_BYTE *)(a1 + 8) == 101)
      {
        v2 = 0x10000001ALL;
        goto LABEL_626;
      }
      goto LABEL_252;
    }
    if (a2 != 5)
      v60 = 1;
    if ((v60 & 1) != 0)
    {
      v86 = !v5;
      if (a2 != 12)
        v86 = 1;
      if ((v86 & 1) == 0)
      {
        if (*(_QWORD *)a1 == 0x6972707473726966 && *(_DWORD *)(a1 + 8) == 1702125942)
        {
          v2 = 0x10000001DLL;
          goto LABEL_626;
        }
        goto LABEL_252;
      }
    }
    else
    {
LABEL_68:
      if (*(_DWORD *)a1 == 1634625894 && *(_BYTE *)(a1 + 4) == 108)
      {
        v2 = 0x10000001CLL;
        goto LABEL_626;
      }
    }
    v6 = v3 & 0x100000000;
    v7 = (v3 & 0x100000000) == 0;
    if (a2 != 5 || v6)
    {
LABEL_5:
      if (a2 == 4 && v7)
      {
        switch(*(_DWORD *)a1)
        {
          case 0x6D6F7266:
            v2 = 0x10000001FLL;
            goto LABEL_626;
          case 0x6C6C7566:
            v2 = 0x100000020;
            goto LABEL_626;
          case 0x746E6968:
            v2 = 0x100000023;
            goto LABEL_626;
          case 0x74696E69:
            v2 = 0x100000029;
            goto LABEL_626;
          case 0x6B6E696C:
            v2 = 0x10000002DLL;
            goto LABEL_626;
        }
        v8 = 0;
        v9 = 0;
        v10 = 0;
        v11 = 1;
        goto LABEL_331;
      }
LABEL_253:
      if (a2 == 9 && v7)
      {
        if (*(_QWORD *)a1 == 0x7A69736E69617267 && *(_BYTE *)(a1 + 8) == 101)
        {
          v2 = 0x100000021;
          goto LABEL_626;
        }
        if (*(_QWORD *)a1 == 0x766973756C636E69 && *(_BYTE *)(a1 + 8) == 101)
        {
          v2 = 0x100000027;
          goto LABEL_626;
        }
        v8 = 0;
        v9 = 0;
        v10 = 0;
        v58 = 1;
        goto LABEL_264;
      }
LABEL_197:
      if (a2 == 15 && v7)
      {
        if (*(_QWORD *)a1 == 0x697665645F736168 && *(_QWORD *)(a1 + 7) == 0x726464615F656369)
        {
          v2 = 0x100000022;
          goto LABEL_626;
        }
        v11 = 0;
        v8 = 0;
        v9 = 0;
        v50 = 0;
        v7 = 1;
        goto LABEL_204;
      }
      v56 = !v7;
      v57 = a2 != 2 || !v7;
      if ((v57 & 1) != 0)
      {
        if (a2 != 12)
          v56 = 1;
        if ((v56 & 1) != 0)
        {
          v71 = !v7;
          v72 = a2 != 8 || !v7;
          if ((v72 & 1) != 0)
          {
            if (a2 != 13)
              v71 = 1;
            if ((v71 & 1) == 0)
            {
              if (*(_QWORD *)a1 == 0x63697665645F7369 && *(_QWORD *)(a1 + 5) == 0x7274705F65636976)
              {
                v2 = 0x10000002ALL;
                goto LABEL_626;
              }
              v51 = 0;
              v50 = 0;
              v9 = 0;
              v11 = 0;
              v7 = 1;
              goto LABEL_471;
            }
            v108 = !v7;
            if (a2 != 11)
              v108 = 1;
            if ((v108 & 1) == 0)
            {
              if (*(_QWORD *)a1 == 0x766972707473616CLL && *(_QWORD *)(a1 + 3) == 0x6574617669727074)
              {
                v2 = 0x10000002BLL;
                goto LABEL_626;
              }
              if (*(_QWORD *)a1 == 0x6F706D65746E6F6ELL && *(_QWORD *)(a1 + 3) == 0x6C61726F706D6574)
              {
                v2 = 0x100000035;
                goto LABEL_626;
              }
              if (*(_QWORD *)a1 == 0x6172626E69746F6ELL && *(_QWORD *)(a1 + 3) == 0x68636E6172626E69)
              {
                v2 = 0x100000036;
                goto LABEL_626;
              }
              v2 = 0x10000003ALL;
              v112 = (*(_QWORD *)a1 ^ 0x657268745F6D756ELL | *(_QWORD *)(a1 + 3) ^ 0x736461657268745FLL) == 0;
              goto LABEL_611;
            }
            goto LABEL_296;
          }
          if (*(_QWORD *)a1 == 0x68636E6172626E69)
          {
            v2 = 0x100000026;
            goto LABEL_626;
          }
          if (*(_QWORD *)a1 == 0x7463657269646E69)
          {
            v2 = 0x100000028;
            goto LABEL_626;
          }
          v9 = 0;
          v58 = 0;
          v10 = 0;
          v8 = 1;
        }
        else
        {
          if (*(_QWORD *)a1 == 0x63756465725F6E69 && *(_DWORD *)(a1 + 8) == 1852795252)
          {
            v2 = 0x100000025;
            goto LABEL_626;
          }
          v8 = 0;
          v9 = 0;
          v58 = 0;
          v10 = 0;
        }
      }
      else
      {
        if (*(_WORD *)a1 == 26217)
        {
          v2 = 0x100000024;
          goto LABEL_626;
        }
        v8 = 0;
        v58 = 0;
        v10 = 0;
        v9 = 1;
      }
LABEL_264:
      v7 = 1;
      goto LABEL_265;
    }
    if (*(_DWORD *)a1 == 1937075302 && *(_BYTE *)(a1 + 4) == 104)
      goto LABEL_626;
LABEL_252:
    v6 = v3 & 0x100000000;
    v7 = (v3 & 0x100000000) == 0;
    goto LABEL_253;
  }
  if (*(_DWORD *)a1 == 1701864804 && *(_WORD *)(a1 + 4) == 25710)
  {
    v2 = 0x100000012;
    goto LABEL_626;
  }
  if (*(_DWORD *)a1 == 1869636964 && *(_WORD *)(a1 + 4) == 27234)
    goto LABEL_626;
  if ((v30 & 1) != 0)
  {
    if (*(_DWORD *)a1 == 1635018084 && *(_WORD *)(a1 + 4) == 26723)
    {
      v2 = 0x100000015;
      goto LABEL_626;
    }
    goto LABEL_287;
  }
  if (*(_DWORD *)a1 == 1953719652 && *(_DWORD *)(a1 + 3) == 2037346932)
  {
LABEL_303:
    v2 = 0x100000014;
    goto LABEL_626;
  }
LABEL_287:
  if (*(_DWORD *)a1 == 1769366884 && *(_WORD *)(a1 + 4) == 25955)
  {
    v2 = 0x100000016;
    goto LABEL_626;
  }
  if (*(_DWORD *)a1 == 1953261926 && *(_WORD *)(a1 + 4) == 29285)
  {
    v2 = 0x10000001BLL;
    goto LABEL_626;
  }
  v6 = v3 & 0x100000000;
  v7 = (v3 & 0x100000000) == 0;
LABEL_296:
  v8 = 0;
  v10 = a2 == 6;
  if (a2 == 6 && v7)
  {
    if (*(_DWORD *)a1 == 1701734764 && *(_WORD *)(a1 + 4) == 29281)
    {
      v2 = 0x10000002CLL;
      goto LABEL_626;
    }
    v11 = 0;
    v18 = 0;
    v19 = 0;
    v9 = 0;
    v8 = 0;
    v20 = 1;
    v10 = 1;
    goto LABEL_41;
  }
  v9 = 0;
  v58 = 0;
LABEL_265:
  if (a2 == 3 && v7)
  {
    if (*(_WORD *)a1 == 24941 && *(_BYTE *)(a1 + 2) == 112)
    {
      v2 = 0x10000002ELL;
      goto LABEL_626;
    }
    v11 = 0;
    if ((v58 & 1) != 0)
    {
      v7 = 1;
      goto LABEL_341;
    }
LABEL_331:
    v19 = 0;
    v18 = v11;
    v20 = 1;
    v7 = 1;
    v11 = 0;
    goto LABEL_41;
  }
  v11 = a2 == 5 && v7;
  if (v11 == 1)
  {
    if (*(_DWORD *)a1 == 1668571501 && *(_BYTE *)(a1 + 4) == 104)
    {
      v2 = 0x10000002FLL;
      goto LABEL_626;
    }
LABEL_339:
    v7 = 1;
    goto LABEL_340;
  }
  v78 = !v7;
  if (a2 != 12)
    v78 = 1;
  if ((v78 & 1) == 0)
  {
    if (*(_QWORD *)a1 == 0x6F5F79726F6D656DLL && *(_DWORD *)(a1 + 8) == 1919247474)
    {
      v2 = 0x100000030;
      goto LABEL_626;
    }
    goto LABEL_339;
  }
LABEL_340:
  if (!v58)
  {
    v19 = 0;
    goto LABEL_381;
  }
LABEL_341:
  if (*(_QWORD *)a1 == 0x6C6261656772656DLL && *(_BYTE *)(a1 + 8) == 101)
  {
    v2 = 0x100000031;
    goto LABEL_626;
  }
  v19 = 1;
LABEL_381:
  v18 = 0;
  v20 = 1;
  if (a2 == 7 && !v6)
  {
    if (*(_DWORD *)a1 == 1919381358 && *(_DWORD *)(a1 + 3) == 1886744434)
    {
      v2 = 0x100000032;
      goto LABEL_626;
    }
    v20 = 0;
    v18 = 0;
    if (v19)
      goto LABEL_48;
    goto LABEL_388;
  }
LABEL_41:
  if (v10 && v7 && *(_DWORD *)a1 == 1635217262 && *(_WORD *)(a1 + 4) == 29801)
  {
    v2 = 0x100000033;
    goto LABEL_626;
  }
  if (v19)
  {
LABEL_48:
    if (*(_QWORD *)a1 == 0x7865746E6F636F6ELL && *(_BYTE *)(a1 + 8) == 116)
    {
      v2 = 0x100000034;
      goto LABEL_626;
    }
    if (a2 != 10 || !v7)
    {
      if (*(_QWORD *)a1 == 0x6B7361745F6D756ELL && *(_BYTE *)(a1 + 8) == 115)
      {
        v2 = 0x100000038;
        goto LABEL_626;
      }
      goto LABEL_351;
    }
    if (*(_QWORD *)a1 != 0x6E61697261766F6ELL || *(_WORD *)(a1 + 8) != 29556)
    {
LABEL_351:
      if (*(_QWORD *)a1 == 0x6D6165745F6D756ELL && *(_BYTE *)(a1 + 8) == 115)
      {
        v2 = 0x100000039;
        goto LABEL_626;
      }
      goto LABEL_396;
    }
LABEL_420:
    v2 = 0x100000037;
    goto LABEL_626;
  }
LABEL_388:
  v89 = a2 == 10 && v7;
  if (v89 && *(_QWORD *)a1 == 0x6E61697261766F6ELL && *(_WORD *)(a1 + 8) == 29556)
    goto LABEL_420;
LABEL_396:
  if (v11)
  {
    if (*(_DWORD *)a1 == 1701081711 && *(_BYTE *)(a1 + 4) == 114)
    {
      v2 = 0x10000003BLL;
      goto LABEL_626;
    }
  }
  if ((v20 & 1) == 0)
  {
    if (*(_DWORD *)a1 == 1701081711 && *(_DWORD *)(a1 + 3) == 1684370021)
    {
      v2 = 0x10000003CLL;
      goto LABEL_626;
    }
    if (*(_DWORD *)a1 == 1953653104 && *(_DWORD *)(a1 + 3) == 1818323316)
    {
      v2 = 0x10000003DLL;
      goto LABEL_626;
    }
  }
  if (v8 && *(_QWORD *)a1 == 0x797469726F697270)
  {
    v2 = 0x10000003ELL;
    goto LABEL_626;
  }
  if ((v20 & 1) == 0)
  {
    if (*(_DWORD *)a1 == 1986622064 && *(_DWORD *)(a1 + 3) == 1702125942)
    {
      v2 = 0x10000003FLL;
      goto LABEL_626;
    }
    if ((v18 & 1) == 0)
    {
      if (!v19)
      {
        v50 = 0;
        goto LABEL_586;
      }
      goto LABEL_427;
    }
LABEL_455:
    if (*(_DWORD *)a1 == 1684104562)
    {
      v2 = 0x100000041;
      goto LABEL_626;
    }
    v50 = 1;
    goto LABEL_457;
  }
  if (!v19)
  {
    if (v18)
      goto LABEL_455;
    v50 = 0;
LABEL_204:
    v51 = a2 == 15 && v7;
    if (v51 && *(_QWORD *)a1 == 0x5F65737265766572 && *(_QWORD *)(a1 + 7) == 0x64616F6C66666F5FLL)
    {
      v2 = 0x100000045;
      goto LABEL_626;
    }
    if (v8 && *(_QWORD *)a1 == 0x656C756465686373)
    {
      v2 = 0x100000047;
      goto LABEL_626;
    }
    v53 = !v7;
    if (a2 != 6)
      v53 = 1;
    if ((v53 & 1) != 0)
    {
      v55 = 1;
      if (!v50)
        goto LABEL_315;
    }
    else
    {
      if (*(_DWORD *)a1 == 1918986355 && *(_WORD *)(a1 + 4) == 25701)
      {
        v2 = 0x100000049;
        goto LABEL_626;
      }
      v55 = 1;
      v7 = 1;
      if (!v50)
        goto LABEL_315;
    }
    goto LABEL_314;
  }
  if (*(_QWORD *)a1 == 0x6E69625F636F7270 && *(_BYTE *)(a1 + 8) == 100)
  {
    v2 = 0x100000040;
    goto LABEL_626;
  }
  if ((v18 & 1) != 0)
    goto LABEL_455;
LABEL_427:
  if (*(_QWORD *)a1 == 0x6F69746375646572 && *(_BYTE *)(a1 + 8) == 110)
  {
    v2 = 0x100000042;
    goto LABEL_626;
  }
  v50 = 0;
LABEL_457:
  if ((v20 & 1) != 0)
    goto LABEL_204;
LABEL_586:
  if (*(_DWORD *)a1 == 1634493810 && *(_DWORD *)(a1 + 3) == 1684371553)
  {
    v2 = 0x100000043;
    goto LABEL_626;
  }
  if (*(_DWORD *)a1 == 1701602674 && *(_DWORD *)(a1 + 3) == 1702060389)
  {
    v2 = 0x100000044;
    goto LABEL_626;
  }
  if (*(_DWORD *)a1 == 1701208435 && *(_DWORD *)(a1 + 3) == 1852140645)
  {
    v2 = 0x100000046;
    goto LABEL_626;
  }
  if (*(_DWORD *)a1 == 1601267059 && *(_DWORD *)(a1 + 3) == 1953719135)
  {
    v2 = 0x100000048;
    goto LABEL_626;
  }
  v55 = 0;
  v51 = 0;
  if (v50)
  {
LABEL_314:
    if (*(_DWORD *)a1 == 1684892019)
    {
      v2 = 0x10000004ALL;
      goto LABEL_626;
    }
  }
LABEL_315:
  if ((v55 & 1) != 0)
  {
    if (v11)
    {
      if (*(_DWORD *)a1 == 1702521203 && *(_BYTE *)(a1 + 4) == 115)
      {
        v2 = 0x10000004CLL;
        goto LABEL_626;
      }
    }
    v74 = !v7;
    v75 = a2 != 14 || !v7;
    if ((v75 & 1) == 0)
    {
      if (*(_QWORD *)a1 == 0x6465725F6B736174 && *(_QWORD *)(a1 + 6) == 0x6E6F697463756465)
      {
        v2 = 0x10000004DLL;
        goto LABEL_626;
      }
      v77 = 1;
      goto LABEL_478;
    }
    if (a2 != 12)
      v74 = 1;
    if ((v74 & 1) == 0)
    {
      if (*(_QWORD *)a1 == 0x6C5F646165726874 && *(_DWORD *)(a1 + 8) == 1953066345)
      {
        v2 = 0x10000004ELL;
        goto LABEL_626;
      }
LABEL_477:
      v77 = 0;
LABEL_478:
      LOBYTE(v7) = 1;
LABEL_479:
      if (v9 && *(_WORD *)a1 == 28532)
      {
        v2 = 0x100000051;
        goto LABEL_626;
      }
      v85 = 1;
      goto LABEL_482;
    }
LABEL_471:
    v77 = 0;
    if (a2 != 13 || !v7)
      goto LABEL_479;
    if (*(_QWORD *)a1 == 0x7270646165726874 && *(_QWORD *)(a1 + 5) == 0x6574617669727064)
      goto LABEL_626;
    goto LABEL_477;
  }
  if (*(_DWORD *)a1 == 1684892019 && *(_DWORD *)(a1 + 3) == 1852140644)
  {
    v2 = 0x10000004BLL;
    goto LABEL_626;
  }
  if (*(_DWORD *)a1 == 1701996660 && *(_DWORD *)(a1 + 3) == 1935958373)
  {
    v2 = 0x100000050;
    goto LABEL_626;
  }
  v85 = 0;
  v77 = 0;
LABEL_482:
  if (v51)
  {
    if (*(_QWORD *)a1 == 0x5F64656966696E75 && *(_QWORD *)(a1 + 7) == 0x737365726464615FLL)
    {
      v2 = 0x100000052;
      goto LABEL_626;
    }
  }
  else
  {
    v101 = !v7;
    if (a2 != 21)
      v101 = 1;
    if ((v101 & 1) == 0)
    {
      v102 = *(_QWORD *)a1 == 0x5F64656966696E75 && *(_QWORD *)(a1 + 8) == 0x6D5F646572616873;
      if (v102 && *(_QWORD *)(a1 + 13) == 0x79726F6D656D5F64)
      {
        v2 = 0x100000053;
        goto LABEL_626;
      }
    }
  }
  if ((v85 & 1) != 0)
  {
    v104 = !v7;
    if (a2 == 6)
      v105 = v104;
    else
      v105 = 1;
    if ((v105 & 1) != 0)
    {
      if (a2 != 3)
        v104 = 1;
      if ((v104 & 1) == 0)
      {
        if (*(_WORD *)a1 == 29557 && *(_BYTE *)(a1 + 2) == 101)
        {
          v2 = 0x100000058;
          goto LABEL_626;
        }
        if ((v77 & 1) == 0)
        {
          if (!v51)
            goto LABEL_583;
          goto LABEL_570;
        }
LABEL_579:
        if (*(_QWORD *)a1 == 0x697665645F657375 && *(_QWORD *)(a1 + 6) == 0x7274705F65636976)
        {
          v2 = 0x10000005ALL;
          goto LABEL_626;
        }
LABEL_583:
        if (v50)
        {
          v2 = 0x10000005CLL;
          v112 = *(_DWORD *)a1 == 1852139639;
        }
        else
        {
          if (!v11)
          {
            v2 = v3;
            goto LABEL_626;
          }
          v2 = 0x10000005DLL;
          v112 = (*(_DWORD *)a1 ^ 0x74697277 | *(unsigned __int8 *)(a1 + 4) ^ 0x65) == 0;
        }
LABEL_611:
        if (!v112)
          v2 = v3;
        goto LABEL_626;
      }
    }
    else
    {
      if (*(_DWORD *)a1 == 1769238133 && *(_WORD *)(a1 + 4) == 25701)
      {
        v2 = 0x100000056;
        goto LABEL_626;
      }
      if (*(_DWORD *)a1 == 1633972341 && *(_WORD *)(a1 + 4) == 25972)
      {
        v2 = 0x100000057;
        goto LABEL_626;
      }
    }
LABEL_564:
    if (v51)
    {
      if (*(_QWORD *)a1 == 0x697665645F657375 && *(_QWORD *)(a1 + 7) == 0x726464615F656369)
      {
        v2 = 0x100000059;
        goto LABEL_626;
      }
      if ((v77 & 1) == 0)
      {
LABEL_570:
        if (*(_QWORD *)a1 == 0x6C6C615F73657375 && *(_QWORD *)(a1 + 7) == 0x73726F7461636F6CLL)
        {
          v2 = 0x10000005BLL;
          goto LABEL_626;
        }
        goto LABEL_583;
      }
    }
    else if (!v77)
    {
      goto LABEL_583;
    }
    goto LABEL_579;
  }
  if (*(_DWORD *)a1 == 1718185589 && *(_DWORD *)(a1 + 3) == 1836216166)
  {
    v2 = 0x100000054;
    goto LABEL_626;
  }
  if (*(_DWORD *)a1 != 1852534389 || *(_DWORD *)(a1 + 3) != 1853321070)
    goto LABEL_564;
LABEL_626:
  if ((v2 & 0xFF00000000) != 0)
    return v2;
  else
    return 85;
}

uint64_t llvm::omp::getMemoryOrderKind(_DWORD *a1, uint64_t a2)
{
  if (a2 != 7)
    return 6;
  if (*a1 == 1601267059 && *(_DWORD *)((char *)a1 + 3) == 1953719135)
    return 1;
  if (*a1 == 1601266529 && *(_DWORD *)((char *)a1 + 3) == 1818587743)
    return 2;
  if (*a1 == 1970365281 && *(_DWORD *)((char *)a1 + 3) == 1701996917)
    return 3;
  if (*a1 == 1701602674 && *(_DWORD *)((char *)a1 + 3) == 1702060389)
    return 4;
  if (*a1 ^ 0x616C6572 | *(_DWORD *)((char *)a1 + 3) ^ 0x64657861)
    return 6;
  return 5;
}

char *llvm::omp::getOpenMPMemoryOrderKindName(int a1)
{
  return off_1E816D298[a1 - 1];
}

uint64_t llvm::omp::getOrderKind(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  if (a2 == 10
    && (*(_QWORD *)a1 == 0x65727275636E6F63 ? (v2 = *(unsigned __int16 *)(a1 + 8) == 29806) : (v2 = 0), v2))
  {
    return 1;
  }
  else
  {
    return 2;
  }
}

const char *llvm::omp::getOpenMPOrderKindName(int a1)
{
  if (a1 == 2)
    return "unknown";
  else
    return "concurrent";
}

uint64_t llvm::omp::getProcBindKind(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a2 == 5)
  {
    if (*(_DWORD *)a1 ^ 0x736F6C63 | *(unsigned __int8 *)(a1 + 4) ^ 0x65)
      v4 = 0;
    else
      v4 = 0x100000003;
    goto LABEL_30;
  }
  if (a2 == 6)
  {
    v4 = 0x100000002;
    if (*(_DWORD *)a1 == 1953718637 && *(_WORD *)(a1 + 4) == 29285)
      goto LABEL_30;
    if (*(_DWORD *)a1 == 1701998707 && *(_WORD *)(a1 + 4) == 25697)
    {
      v4 = 0x100000004;
      goto LABEL_30;
    }
LABEL_26:
    v4 = 0;
    goto LABEL_30;
  }
  if (a2 != 7)
    goto LABEL_26;
  if (*(_DWORD *)a1 == 1835627120 && *(_DWORD *)(a1 + 3) == 2037539181)
  {
    v4 = 0x100000005;
  }
  else if (*(_DWORD *)a1 == 1634100580 && *(_DWORD *)(a1 + 3) == 1953264993)
  {
    v4 = 0x100000006;
  }
  else
  {
    v4 = 0x100000007;
    if (*(_DWORD *)a1 ^ 0x6E6B6E75 | *(_DWORD *)(a1 + 3) ^ 0x6E776F6E)
      v4 = 0;
  }
LABEL_30:
  if ((v4 & 0x300000000) != 0)
    return v4;
  else
    return 7;
}

char *llvm::omp::getOpenMPProcBindKindName(int a1)
{
  return off_1E816D2C8[a1 - 2];
}

uint64_t llvm::omp::getScheduleKind(uint64_t a1, uint64_t a2)
{
  if (a2 == 4)
  {
    if (*(_DWORD *)a1 == 1869903201)
      return 5;
    return 7;
  }
  if (a2 == 7)
  {
    if (*(_DWORD *)a1 == 1634629988 && *(_DWORD *)(a1 + 3) == 1667853665)
      return 3;
    if (*(_DWORD *)a1 == 1953396082 && *(_DWORD *)(a1 + 3) == 1701669236)
      return 6;
    return 7;
  }
  if (a2 != 6)
    return 7;
  if (*(_DWORD *)a1 != 1952543859 || *(_WORD *)(a1 + 4) != 25449)
  {
    if (*(_DWORD *)a1 == 1684632935 && *(_WORD *)(a1 + 4) == 25701)
      return 4;
    return 7;
  }
  return 2;
}

char *llvm::omp::getOpenMPScheduleKindName(int a1)
{
  return off_1E816D2F8[a1 - 2];
}

uint64_t llvm::omp::isAllowedClauseForDirective(int a1)
{
  return ((uint64_t (*)(_QWORD))((char *)&def_1C54D1DF0 + 4 * word_1C8652446[a1]))(0);
}

BOOL sub_1C54D1B64(uint64_t a1, int a2, int a3)
{
  return a2 == 51 && a3 > 0;
}

uint64_t sub_1C54D3C24(_QWORD **a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD **v7;
  unint64_t v8;
  int v9;
  unsigned int i;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int *v24;
  int *v25;
  uint64_t v26;
  _BOOL4 v27;
  int v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int v33;
  _BOOL4 v34;
  unsigned int v35;
  BOOL v36;
  BOOL v37;
  uint64_t v39;
  unint64_t v40;

  v7 = a1;
  v8 = **a1;
  v40 = v8;
  if ((v8 & 0x40000000000) != 0)
    v9 = 2;
  else
    v9 = (v8 >> 41) & 1;
  for (i = sub_1C476B7EC((uint64_t)a1); i != -1; i = sub_1C476BA0C(v7, (int)v11 + 1, *((_DWORD *)v7 + 16), 1u))
  {
    v11 = i;
    if ((!a4 || llvm::omp::getOpenMPContextTraitSetForProperty(i) == 2)
      && llvm::omp::getOpenMPContextTraitSelectorForProperty(v11) != 9)
    {
      if ((_DWORD)v11 == 49)
      {
        v12 = *((unsigned int *)v7 + 20);
        if ((_DWORD)v12)
        {
          v13 = v7[9];
          v14 = &v13[2 * v12];
          do
          {
            v15 = *v13;
            v16 = v13[1];
            v13 += 2;
            LODWORD(v17) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v15, v16);
            if ((_DWORD)v17)
              v18 = v13 == v14;
            else
              v18 = 1;
          }
          while (!v18);
        }
        else
        {
          LODWORD(v17) = 1;
        }
      }
      else
      {
        v17 = (*(_QWORD *)(*(_QWORD *)(a2 + 8) + ((v11 >> 3) & 0x1FFFFFF8)) >> v11) & 1;
      }
      if (v9 == 1)
      {
        if ((v17 & 1) != 0)
          return 1;
      }
      else
      {
        v19 = v9 != 0;
        if (!(_DWORD)v17)
          v19 = (v40 & 0x40000000000) == 0;
        if (v19)
          return 0;
      }
    }
  }
  v20 = v40;
  if ((a4 & 1) != 0)
    return v9 != 1;
  v21 = *((unsigned int *)v7 + 56);
  if (!(_DWORD)v21)
    return v9 != 1;
  v22 = 0;
  v23 = *(_DWORD *)(a2 + 88);
  v24 = (int *)v7[27];
  v25 = &v24[v21];
  v26 = a3 + 16;
  while (1)
  {
    if (v22 == v23)
    {
      v27 = 0;
      v22 = v23;
    }
    else
    {
      v28 = *v24;
      do
      {
        v29 = *(_DWORD *)(*(_QWORD *)(a2 + 80) + 4 * v22);
        v27 = v29 == v28;
      }
      while (v29 != v28 && v23 - 1 != v22++);
    }
    if (a3)
    {
      v31 = *(unsigned int *)(a3 + 8);
      if (v31 >= *(unsigned int *)(a3 + 12))
      {
        v39 = v26;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v26, v31 + 1, 4);
        v26 = v39;
        v20 = v40;
        v31 = *(unsigned int *)(a3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v31) = v22 - 1;
      ++*(_DWORD *)(a3 + 8);
    }
    if (v9)
      v32 = 0;
    else
      v32 = v27;
    v33 = (v20 & 0x40000000000) == 0 || v27;
    if (v32)
      v33 = 0;
    v34 = v9 == 1 && v27;
    if (v9 == 1)
      v33 = v27;
    v35 = v27 ? v7 : 0;
    v36 = v33 == 0;
    v37 = !v33 && v27;
    v7 = v36 ? (_QWORD **)v35 : (_QWORD **)v34;
    if (!v37)
      break;
    if (++v24 == v25)
      return v9 != 1;
  }
  return (uint64_t)v7;
}

uint64_t llvm::omp::getBestVariantMatchForContext(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  char v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unsigned int OpenMPContextTraitSetForProperty;
  int OpenMPContextTraitSelectorForProperty;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  void *__s1;
  unsigned int v34;
  void *__s2;
  unsigned int v36;
  unint64_t *v37;
  unsigned int v38;
  void *v39[2];
  _QWORD v40[6];

  v40[4] = *MEMORY[0x1E0C80C00];
  v36 = 64;
  __s2 = 0;
  v30 = *((unsigned int *)a1 + 2);
  if (!(_DWORD)v30)
    return 0xFFFFFFFFLL;
  v2 = 0;
  v3 = 0;
  v28 = -1;
  do
  {
    v4 = *a1;
    v5 = *a1 + 368 * v2;
    v39[0] = v40;
    v39[1] = (void *)0x800000000;
    if (!sub_1C54D3C24((_QWORD **)v5, a2, (uint64_t)v39, 0))
      goto LABEL_32;
    v34 = 64;
    __s1 = (void *)1;
    v6 = v4 + 368 * v2;
    v9 = *(_DWORD *)(v6 + 224);
    v7 = (unsigned int *)(v6 + 224);
    v8 = v9;
    v10 = sub_1C476B7EC(v5);
    if (v10 != -1)
    {
      v11 = v10;
      v12 = v4 + 368 * v2 + 264;
      v29 = 1 << (v8 + 2);
      v13 = 1 << (v8 + 1);
      v14 = 1 << v8;
      do
      {
        if (sub_1C626123C(v12, v11, &v37))
        {
          sub_1C62611B8((llvm::APInt *)&v37, v12, v11);
          v15 = (unint64_t *)&v37;
          if (v38 >= 0x41)
            v15 = v37;
          llvm::APInt::operator+=((uint64_t)&__s1, *v15);
          if (v38 >= 0x41 && v37)
            MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
          goto LABEL_15;
        }
        OpenMPContextTraitSetForProperty = llvm::omp::getOpenMPContextTraitSetForProperty(v11);
        if ((OpenMPContextTraitSetForProperty > 4 || ((1 << OpenMPContextTraitSetForProperty) & 0x1A) == 0)
          && v11 != 11)
        {
          OpenMPContextTraitSelectorForProperty = llvm::omp::getOpenMPContextTraitSelectorForProperty(v11);
          switch(OpenMPContextTraitSelectorForProperty)
          {
            case 12:
              v18 = v29;
              goto LABEL_23;
            case 7:
              v18 = v13;
              goto LABEL_23;
            case 6:
              v18 = v14;
LABEL_23:
              llvm::APInt::operator+=((uint64_t)&__s1, v18);
              break;
          }
        }
LABEL_15:
        v11 = sub_1C476BA0C((_QWORD *)v5, v11 + 1, *(_DWORD *)(v5 + 64), 1u);
      }
      while (v11 != -1);
    }
    v19 = *v7;
    if ((_DWORD)v19)
    {
      v20 = 0;
      v21 = 4 * v19;
      do
      {
        llvm::APInt::operator+=((uint64_t)&__s1, 1 << *(_DWORD *)((char *)v39[0] + v20));
        v20 += 4;
      }
      while (v21 != v20);
    }
    v22 = v34;
    if (v34 <= 0x40)
    {
      if (__s1 < __s2)
        goto LABEL_29;
      if (__s1 == __s2)
      {
LABEL_37:
        if (sub_1C54D4268(v5, v3) || !sub_1C54D4268(v3, v5))
          goto LABEL_29;
        v22 = v34;
      }
      if (v36 <= 0x40 && v22 <= 0x40)
      {
        __s2 = __s1;
        v36 = v22;
        v3 = v5;
        v28 = v2;
        goto LABEL_29;
      }
      goto LABEL_48;
    }
    v23 = ((unint64_t)v34 + 63) >> 3;
    v24 = v23 & 0x3FFFFFF8;
    while (v24)
    {
      v25 = *(_QWORD *)((char *)__s1 + v24 - 8);
      v26 = *(_QWORD *)((char *)__s2 + v24 - 8);
      v24 -= 8;
      if (v25 != v26)
      {
        if (v25 <= v26)
          goto LABEL_29;
        break;
      }
    }
    if (!memcmp(__s1, __s2, v23 & 0x3FFFFFF8))
      goto LABEL_37;
LABEL_48:
    v28 = v2;
    llvm::APInt::reallocate((uint64_t)&__s2, v22);
    if (v36 <= 0x40)
      __s2 = __s1;
    else
      memcpy(__s2, __s1, (((unint64_t)v36 + 63) >> 3) & 0x3FFFFFF8);
    v3 = v5;
LABEL_29:
    if (v34 >= 0x41 && __s1)
      MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
LABEL_32:
    if (v39[0] != v40)
      free(v39[0]);
    ++v2;
  }
  while (v2 != v30);
  if (v36 >= 0x41)
  {
    if (__s2)
      MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
  }
  return v28;
}

BOOL sub_1C54D4268(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  int8x8_t *v6;
  uint64_t v7;
  int8x8_t v8;
  uint8x8_t v9;
  uint64_t v10;
  unsigned int v11;
  int8x8_t *v12;
  uint64_t v13;
  int8x8_t v14;
  uint8x8_t v15;
  unsigned int i;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 result;
  _DWORD *v20;
  int *v21;
  int *v22;
  _DWORD *v23;
  int *v24;
  int v25;

  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = *(int8x8_t **)a1;
    v7 = 8 * v4;
    do
    {
      v8 = *v6++;
      v9 = (uint8x8_t)vcnt_s8(v8);
      v9.i16[0] = vaddlv_u8(v9);
      v5 += v9.i32[0];
      v7 -= 8;
    }
    while (v7);
  }
  else
  {
    v5 = 0;
  }
  v10 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = *(int8x8_t **)a2;
    v13 = 8 * v10;
    do
    {
      v14 = *v12++;
      v15 = (uint8x8_t)vcnt_s8(v14);
      v15.i16[0] = vaddlv_u8(v15);
      v11 += v15.i32[0];
      v13 -= 8;
    }
    while (v13);
  }
  else
  {
    v11 = 0;
  }
  if (v5 >= v11)
    return 0;
  for (i = sub_1C476B7EC(a1); i != -1; i = sub_1C476BA0C((_QWORD *)a1, i + 1, *(_DWORD *)(a1 + 64), 1u))
  {
    if (((*(_QWORD *)(*(_QWORD *)a2 + (((unint64_t)i >> 3) & 0x1FFFFFF8)) >> i) & 1) == 0)
      return 0;
  }
  v17 = *(unsigned int *)(a1 + 224);
  v18 = *(unsigned int *)(a2 + 224);
  if (v17 > v18)
    return 0;
  result = (_DWORD)v17 == 0;
  if ((_DWORD)v17 && (_DWORD)v18)
  {
    v20 = *(_DWORD **)(a2 + 216);
    v21 = *(int **)(a1 + 216);
    v22 = &v21[v17];
    v23 = &v20[v18];
    do
    {
      v24 = v21;
      while (1)
      {
        v25 = *v24++;
        if (v25 == *v20)
          break;
        v21 = v24;
        if (v24 == v22)
          return 1;
      }
      result = ++v21 == v22;
      if (v21 == v22)
        break;
      ++v20;
    }
    while (v20 != v23);
  }
  return result;
}

uint64_t llvm::omp::getOpenMPContextTraitSetKind(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = 0;
  switch(a2)
  {
    case 4:
      v3 = 0x100000004;
      v4 = *(_DWORD *)a1 == 1919251317;
      goto LABEL_18;
    case 6:
      if (*(_DWORD *)a1 != 1769366884 || *(_WORD *)(a1 + 4) != 25955)
        goto LABEL_13;
      v2 = 0x100000002;
      break;
    case 7:
      if (*(_DWORD *)a1 == 1635151465 && *(_DWORD *)(a1 + 3) == 1684630625)
        v2 = 0x100000000;
      else
LABEL_13:
        v2 = 0;
      break;
    case 9:
      v2 = 0x100000001;
      if (*(_QWORD *)a1 ^ 0x63757274736E6F63 | *(unsigned __int8 *)(a1 + 8) ^ 0x74)
        v2 = 0;
      break;
    case 14:
      v3 = 0x100000003;
      v4 = (*(_QWORD *)a1 ^ 0x6E656D656C706D69 | *(_QWORD *)(a1 + 6) ^ 0x6E6F697461746E65) == 0;
LABEL_18:
      if (v4)
        v2 = v3;
      else
        v2 = 0;
      break;
    default:
      break;
  }
  if ((v2 & 0x100000000) != 0)
    return v2;
  else
    return 0;
}

uint64_t llvm::omp::getOpenMPContextTraitSelectorKind(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v12;
  uint64_t v13;

  v2 = 0;
  switch(a2)
  {
    case 3:
      if (*(_WORD *)a1 == 28518 && *(_BYTE *)(a1 + 2) == 114)
      {
        v2 = 0x100000004;
      }
      else
      {
        if (*(_WORD *)a1 != 29545 || *(_BYTE *)(a1 + 2) != 97)
          goto LABEL_66;
        v2 = 0x10000000CLL;
      }
      break;
    case 4:
      switch(*(_DWORD *)a1)
      {
        case 0x646D6973:
          v2 = 0x100000005;
          break;
        case 0x646E696B:
          v2 = 0x100000006;
          break;
        case 0x68637261:
          v2 = 0x100000007;
          break;
        default:
          goto LABEL_66;
      }
      break;
    case 5:
      if (*(_DWORD *)a1 != 1835099508 || *(_BYTE *)(a1 + 4) != 115)
        goto LABEL_66;
      v2 = 0x100000002;
      break;
    case 6:
      if (*(_DWORD *)a1 == 1735549300 && *(_WORD *)(a1 + 4) == 29797)
      {
        v2 = 0x100000001;
      }
      else
      {
        if (*(_DWORD *)a1 != 1684956534 || *(_WORD *)(a1 + 4) != 29295)
          goto LABEL_66;
        v2 = 0x100000008;
      }
      break;
    case 7:
      if (*(_DWORD *)a1 != 1635151465 || *(_DWORD *)(a1 + 3) != 1684630625)
        goto LABEL_66;
      v2 = 0x100000000;
      break;
    case 8:
      if (*(_QWORD *)a1 == 0x6C656C6C61726170)
      {
        v2 = 0x100000003;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x6863746170736964)
          goto LABEL_66;
        v2 = 0x10000000BLL;
      }
      break;
    case 9:
      if (*(_QWORD *)a1 == 0x6F69736E65747865 && *(_BYTE *)(a1 + 8) == 110)
      {
        v2 = 0x100000009;
      }
      else
      {
        v2 = 0x10000000ALL;
        if (*(_QWORD *)a1 ^ 0x6F697469646E6F63 | *(unsigned __int8 *)(a1 + 8) ^ 0x6ELL)
          v2 = 0;
      }
      break;
    case 15:
      if (*(_QWORD *)a1 == 0x5F64656966696E75 && *(_QWORD *)(a1 + 7) == 0x737365726464615FLL)
      {
        v2 = 0x10000000DLL;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x5F65737265766572 || *(_QWORD *)(a1 + 7) != 0x64616F6C66666F5FLL)
          goto LABEL_66;
        v2 = 0x10000000FLL;
      }
      break;
    case 18:
      v12 = *(_QWORD *)a1 ^ 0x5F63696D616E7964 | *(_QWORD *)(a1 + 8) ^ 0x6F7461636F6C6C61 | *(unsigned __int16 *)(a1 + 16) ^ 0x7372;
      v13 = 0x100000010;
      goto LABEL_68;
    case 21:
      if (*(_QWORD *)a1 == 0x5F64656966696E75
        && *(_QWORD *)(a1 + 8) == 0x6D5F646572616873
        && *(_QWORD *)(a1 + 13) == 0x79726F6D656D5F64)
      {
        v2 = 0x10000000ELL;
      }
      else
      {
LABEL_66:
        v2 = 0;
      }
      break;
    case 24:
      v12 = *(_QWORD *)a1 ^ 0x645F63696D6F7461 | *(_QWORD *)(a1 + 8) ^ 0x6D5F746C75616665 | *(_QWORD *)(a1 + 16) ^ 0x726564726F5F6D65;
      v13 = 0x100000011;
LABEL_68:
      if (v12)
        v2 = 0;
      else
        v2 = v13;
      break;
    default:
      break;
  }
  if ((v2 & 0x300000000) != 0)
    return v2;
  else
    return 0;
}

uint64_t llvm::omp::getOpenMPContextTraitPropertyKind(int a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  BOOL v14;
  BOOL v15;

  if (a1 == 2 && a2 == 12)
    return 49;
  if (a1 == 1)
  {
    switch(a4)
    {
      case 3:
        if (*(_WORD *)a3 != 28518 || *(_BYTE *)(a3 + 2) != 114)
          return 0;
        return 4;
      case 4:
        if (*(_DWORD *)a3 != 1684892019)
          return 0;
        return 5;
      case 5:
        if (*(_DWORD *)a3 != 1835099508 || *(_BYTE *)(a3 + 4) != 115)
          return 0;
        return 2;
      case 6:
        return *(_DWORD *)a3 == 1735549300 && *(_WORD *)(a3 + 4) == 29797;
      case 8:
        if (*(_QWORD *)a3 == 0x6C656C6C61726170)
        {
          result = 3;
        }
        else
        {
          if (*(_QWORD *)a3 != 0x6863746170736964)
            return 0;
          result = 48;
        }
        break;
      default:
        return 0;
    }
  }
  else
  {
    if (a1)
    {
      switch(a1)
      {
        case 2:
          switch(a4)
          {
            case 3:
              if (*(_WORD *)a3 == 28771 && *(_BYTE *)(a3 + 2) == 117)
                return 8;
              if (*(_WORD *)a3 == 28775 && *(_BYTE *)(a3 + 2) == 117)
                return 9;
              if (*(_WORD *)a3 == 28257 && *(_BYTE *)(a3 + 2) == 121)
                return 11;
              if (*(_WORD *)a3 == 29281 && *(_BYTE *)(a3 + 2) == 109)
                return 12;
              if (*(_WORD *)a3 == 28784 && *(_BYTE *)(a3 + 2) == 99)
                return 17;
              if (*(_WORD *)a3 == 14456 && *(_BYTE *)(a3 + 2) == 54)
                return 21;
              return 0;
            case 4:
              if (*(_DWORD *)a3 == 1953722216)
                return 6;
              if (*(_DWORD *)a3 != 1634168934)
                return 0;
              return 10;
            case 5:
              if (*(_DWORD *)a3 == 1701671521 && *(_BYTE *)(a3 + 4) == 98)
                return 13;
              if (*(_DWORD *)a3 == 1818456176 && *(_BYTE *)(a3 + 4) == 101)
                return 18;
              if (*(_DWORD *)a3 == 912486512 && *(_BYTE *)(a3 + 4) == 52)
                return 19;
              if (*(_DWORD *)a3 == 1953527406 && *(_BYTE *)(a3 + 4) == 120)
                return 24;
              return 0;
            case 6:
              if (*(_DWORD *)a3 == 1869115246 && *(_WORD *)(a3 + 4) == 29811)
                return 7;
              if (*(_DWORD *)a3 == 1597388920 && *(_WORD *)(a3 + 4) == 13366)
                return 22;
              if (*(_DWORD *)a3 == 1734634849 && *(_WORD *)(a3 + 4) == 28259)
                return 23;
              return 0;
            case 7:
              if (*(_DWORD *)a3 == 1668440417 && *(_DWORD *)(a3 + 3) == 875980899)
                return 14;
              if (*(_DWORD *)a3 == 912486512 && *(_DWORD *)(a3 + 3) == 1701590070)
                return 20;
              if (*(_DWORD *)a3 == 1953527406 && *(_DWORD *)(a3 + 3) == 875985012)
                return 25;
              return 0;
            case 8:
            case 9:
              return 0;
            case 10:
              if (*(_QWORD *)a3 == 0x5F34366863726161 && *(_WORD *)(a3 + 8) == 25954)
                return 15;
              if (*(_QWORD *)a3 == 0x5F34366863726161 && *(_WORD *)(a3 + 8) == 12851)
                return 16;
              break;
            default:
              if (a4 != 32)
                return 0;
              v14 = *(_QWORD *)a3 == 0x6E65202C796E613CLL && *(_QWORD *)(a3 + 8) == 0x7420796C65726974;
              v15 = v14 && *(_QWORD *)(a3 + 16) == 0x6564207465677261;
              if (!v15 || *(_QWORD *)(a3 + 24) != 0x3E746E65646E6570)
                return 0;
              return 49;
          }
          break;
        case 4:
          if (a4 == 7)
          {
            if (*(_DWORD *)a3 == 1852534389 && *(_DWORD *)(a3 + 3) == 1853321070)
              return 47;
          }
          else if (a4 == 5)
          {
            if (*(_DWORD *)a3 == 1936482662 && *(_BYTE *)(a3 + 4) == 101)
              return 46;
          }
          else if (a4 == 4 && *(_DWORD *)a3 == 1702195828)
          {
            return 45;
          }
          break;
        case 3:
          switch(a4)
          {
            case 2:
              if (*(_WORD *)a3 != 26996)
                return 0;
              return 38;
            case 3:
              if (*(_WORD *)a3 == 28001 && *(_BYTE *)(a3 + 2) == 100)
                return 26;
              if (*(_WORD *)a3 == 29281 && *(_BYTE *)(a3 + 2) == 109)
                return 27;
              if (*(_WORD *)a3 == 29538 && *(_BYTE *)(a3 + 2) == 99)
                return 28;
              if (*(_WORD *)a3 == 28263 && *(_BYTE *)(a3 + 2) == 117)
                return 31;
              if (*(_WORD *)a3 == 25193 && *(_BYTE *)(a3 + 2) == 109)
                return 32;
              if (*(_WORD *)a3 == 25966 && *(_BYTE *)(a3 + 2) == 99)
                return 35;
              if (*(_WORD *)a3 == 26480 && *(_BYTE *)(a3 + 2) == 105)
                return 37;
              return 0;
            case 4:
              if (*(_DWORD *)a3 == 2036429411)
                return 29;
              if (*(_DWORD *)a3 != 1836477548)
                return 0;
              return 34;
            case 5:
              if (*(_DWORD *)a3 != 1702129257 || *(_BYTE *)(a3 + 4) != 108)
                return 0;
              return 33;
            case 6:
              if (*(_DWORD *)a3 != 1684633198 || *(_WORD *)(a3 + 4) != 24937)
                return 0;
              return 36;
            case 7:
              if (*(_DWORD *)a3 == 1768584550 && *(_DWORD *)(a3 + 3) == 1970500713)
                return 30;
              if (*(_DWORD *)a3 == 1852534389 && *(_DWORD *)(a3 + 3) == 1853321070)
                return 39;
              return 0;
            case 9:
              if (*(_QWORD *)a3 == 0x6C615F686374616DLL && *(_BYTE *)(a3 + 8) == 108)
                return 40;
              if (*(_QWORD *)a3 == 0x6E615F686374616DLL && *(_BYTE *)(a3 + 8) == 121)
                return 41;
              return 0;
            case 10:
              if (*(_QWORD *)a3 != 0x6F6E5F686374616DLL || *(_WORD *)(a3 + 8) != 25966)
                return 0;
              return 42;
            case 15:
              if (*(_QWORD *)a3 == 0x65745F776F6C6C61 && *(_QWORD *)(a3 + 7) == 0x736574616C706D65)
                return 44;
              if (*(_QWORD *)a3 == 0x5F64656966696E75 && *(_QWORD *)(a3 + 7) == 0x737365726464615FLL)
                return 50;
              if (*(_QWORD *)a3 == 0x5F65737265766572 && *(_QWORD *)(a3 + 7) == 0x64616F6C66666F5FLL)
                return 52;
              return 0;
            case 18:
              if (*(_QWORD *)a3 != 0x5F63696D616E7964
                || *(_QWORD *)(a3 + 8) != 0x6F7461636F6C6C61
                || *(_WORD *)(a3 + 16) != 29554)
              {
                return 0;
              }
              return 53;
            case 21:
              if (*(_QWORD *)a3 == 0x5F656C6261736964
                && *(_QWORD *)(a3 + 8) == 0x746963696C706D69
                && *(_QWORD *)(a3 + 13) == 0x657361625F746963)
              {
                return 43;
              }
              if (*(_QWORD *)a3 == 0x5F64656966696E75
                && *(_QWORD *)(a3 + 8) == 0x6D5F646572616873
                && *(_QWORD *)(a3 + 13) == 0x79726F6D656D5F64)
              {
                return 51;
              }
              break;
            case 24:
              if (*(_QWORD *)a3 != 0x645F63696D6F7461
                || *(_QWORD *)(a3 + 8) != 0x6D5F746C75616665
                || *(_QWORD *)(a3 + 16) != 0x726564726F5F6D65)
              {
                return 0;
              }
              return 54;
            default:
              return 0;
          }
          break;
      }
    }
    return 0;
  }
  return result;
}

uint64_t llvm::omp::getOpenMPContextTraitPropertyForSelector(int a1)
{
  char *OpenMPContextTraitSelectorName;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BOOL4 v10;
  int v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _BOOL4 v17;
  _BOOL4 v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  _BOOL4 v76;
  _BOOL4 v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  int v90;
  uint64_t v91;
  BOOL v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;

  OpenMPContextTraitSelectorName = llvm::omp::getOpenMPContextTraitSelectorName(a1);
  if (v3 == 7)
  {
    v13 = *(_DWORD *)OpenMPContextTraitSelectorName == 1635151465
       && *(_DWORD *)(OpenMPContextTraitSelectorName + 3) == 1684630625;
    if (v13)
    {
      v4 = 0x100000000;
      goto LABEL_342;
    }
    v4 = 0;
LABEL_51:
    v12 = 0;
    v11 = 0;
    v10 = a1 == 6;
LABEL_58:
    if (v12 && (v4 & 0x300000000) == 0)
    {
      v13 = !v10;
      v25 = 0x100000000;
      if (!v13)
        v25 = 0x10000000BLL;
      if (!(*(unsigned __int16 *)OpenMPContextTraitSelectorName ^ 0x6E61 | OpenMPContextTraitSelectorName[2] ^ 0x79))
        v4 = v25;
    }
    v18 = a1 == 7;
    v26 = v12 ^ 1;
    if ((v4 & 0x300000000) != 0)
      v26 = 1;
    if ((v26 & 1) == 0)
    {
      v27 = 0x10000000CLL;
      if (a1 != 7)
        v27 = 0x100000000;
      if (!(*(unsigned __int16 *)OpenMPContextTraitSelectorName ^ 0x7261 | OpenMPContextTraitSelectorName[2] ^ 0x6D))
        v4 = v27;
    }
    v28 = v4 & 0x300000000;
    v16 = v3 == 5;
    if (v3 != 5 || v28)
    {
      if (v3 != 7 || v28)
      {
        v19 = 0;
        v17 = v3 == 10;
        if (v3 == 10 && !v28)
        {
          v19 = 0;
          v31 = 0x10000000FLL;
          if (a1 != 7)
            v31 = 0x100000000;
          if (!(*(_QWORD *)OpenMPContextTraitSelectorName ^ 0x5F34366863726161 | *((unsigned __int16 *)OpenMPContextTraitSelectorName
                                                                                    + 4) ^ 0x6562))
            v4 = v31;
          v17 = 1;
        }
LABEL_92:
        if (v17 && (v4 & 0x300000000) == 0)
        {
          v32 = 0x100000010;
          if (!v18)
            v32 = 0x100000000;
          if (!(*(_QWORD *)OpenMPContextTraitSelectorName ^ 0x5F34366863726161 | *((unsigned __int16 *)OpenMPContextTraitSelectorName
                                                                                    + 4) ^ 0x3233))
            v4 = v32;
          LOBYTE(v17) = 1;
        }
      }
      else
      {
        v19 = 0;
        LOBYTE(v17) = 0;
        v30 = 0x10000000ELL;
        if (a1 != 7)
          v30 = 0x100000000;
        if (!(*(_DWORD *)OpenMPContextTraitSelectorName ^ 0x63726161 | *(_DWORD *)(OpenMPContextTraitSelectorName + 3) ^ 0x34366863))
          v4 = v30;
      }
    }
    else
    {
      v19 = 0;
      LOBYTE(v17) = 0;
      v29 = 0x10000000DLL;
      if (a1 != 7)
        v29 = 0x100000000;
      if (!(*(_DWORD *)OpenMPContextTraitSelectorName ^ 0x656D7261 | OpenMPContextTraitSelectorName[4] ^ 0x62))
        v4 = v29;
      v16 = 1;
    }
    if (v12 && (v4 & 0x300000000) == 0)
    {
      v33 = 0x100000011;
      if (!v18)
        v33 = 0x100000000;
      if (!(*(unsigned __int16 *)OpenMPContextTraitSelectorName ^ 0x7070 | OpenMPContextTraitSelectorName[2] ^ 0x63))
        v4 = v33;
    }
    v34 = !v16;
    v35 = (v4 & 0x300000000) != 0 || !v16;
    if ((v35 & 1) == 0)
    {
      v36 = 0x100000012;
      if (!v18)
        v36 = 0x100000000;
      if (!(*(_DWORD *)OpenMPContextTraitSelectorName ^ 0x6C637070 | OpenMPContextTraitSelectorName[4] ^ 0x65))
        v4 = v36;
    }
    if ((v4 & 0x300000000) != 0)
      v34 = 1;
    if ((v34 & 1) != 0)
    {
      if (v3 != 7 || (v4 & 0x300000000) != 0)
      {
LABEL_124:
        v39 = v12 ^ 1;
        if ((v4 & 0x300000000) != 0)
          v39 = 1;
        if ((v39 & 1) == 0)
        {
          v40 = 0x100000015;
          if (!v18)
            v40 = 0x100000000;
          if (!(*(unsigned __int16 *)OpenMPContextTraitSelectorName ^ 0x3878 | OpenMPContextTraitSelectorName[2] ^ 0x36))
            v4 = v40;
        }
        goto LABEL_131;
      }
      v37 = *(_DWORD *)OpenMPContextTraitSelectorName ^ 0x36637070 | *(_DWORD *)(OpenMPContextTraitSelectorName + 3) ^ 0x656C3436;
      v38 = 0x100000014;
    }
    else
    {
      v37 = *(_DWORD *)OpenMPContextTraitSelectorName ^ 0x36637070 | OpenMPContextTraitSelectorName[4] ^ 0x34;
      v38 = 0x100000013;
    }
    if (!v18)
      v38 = 0x100000000;
    if (!v37)
      v4 = v38;
    goto LABEL_124;
  }
  v4 = 0;
  switch(v3)
  {
    case 3:
      v5 = *(unsigned __int16 *)OpenMPContextTraitSelectorName ^ 0x6F66;
      v6 = OpenMPContextTraitSelectorName[2] ^ 0x72;
      v7 = 0x100000004;
      v8 = 0x100000000;
      if (a1 != 4)
        v7 = 0x100000000;
      v9 = v5 | v6;
      if (v5 | v6)
        v4 = 0;
      else
        v4 = v7;
      v10 = a1 == 6;
      v11 = 0;
      if (v9)
      {
        if (a1 == 6)
          v8 = 0x100000008;
        if (!(*(unsigned __int16 *)OpenMPContextTraitSelectorName ^ 0x7063 | OpenMPContextTraitSelectorName[2] ^ 0x75))
          v4 = v8;
      }
      v12 = 1;
      if ((v4 & 0x300000000) == 0)
      {
        v24 = 0x100000009;
        if (a1 != 6)
          v24 = 0x100000000;
        if (!(*(unsigned __int16 *)OpenMPContextTraitSelectorName ^ 0x7067 | OpenMPContextTraitSelectorName[2] ^ 0x75))
          v4 = v24;
        v12 = 1;
      }
      goto LABEL_58;
    case 4:
      v4 = 0x100000005;
      v14 = 0x100000000;
      if (a1 != 5)
        v4 = 0x100000000;
      if (*(_DWORD *)OpenMPContextTraitSelectorName != 1684892019)
      {
        if (a1 == 6)
          v14 = 0x100000006;
        if (*(_DWORD *)OpenMPContextTraitSelectorName == 1953722216)
          v4 = v14;
        else
          v4 = 0;
      }
      if ((v4 & 0x300000000) == 0)
      {
        v15 = 0x10000000ALL;
        if (a1 != 6)
          v15 = 0x100000000;
        if (*(_DWORD *)OpenMPContextTraitSelectorName == 1634168934)
          v4 = v15;
      }
      v16 = 0;
      v11 = 0;
      v12 = 0;
      v17 = 0;
      v18 = a1 == 7;
      v19 = 1;
      goto LABEL_92;
    case 5:
      v20 = 0x100000000;
      if (a1 == 2)
        v20 = 0x100000002;
      v21 = (*(_DWORD *)OpenMPContextTraitSelectorName ^ 0x6D616574 | OpenMPContextTraitSelectorName[4] ^ 0x73) == 0;
      goto LABEL_48;
    case 6:
      v4 = (a1 == 1) | 0x100000000;
      v22 = *(_DWORD *)OpenMPContextTraitSelectorName ^ 0x67726174 | *((unsigned __int16 *)OpenMPContextTraitSelectorName
                                                                     + 2) ^ 0x7465;
      if (v22)
        v4 = 0;
      v10 = a1 == 6;
      if (!v22)
      {
        v12 = 0;
        v11 = 1;
        goto LABEL_58;
      }
      v16 = 0;
      v19 = 0;
      LOBYTE(v12) = 0;
      LOBYTE(v17) = 0;
      v23 = 0x100000007;
      if (a1 != 6)
        v23 = 0x100000000;
      if (!(*(_DWORD *)OpenMPContextTraitSelectorName ^ 0x6F686F6E | *((unsigned __int16 *)OpenMPContextTraitSelectorName
                                                                      + 2) ^ 0x7473))
        v4 = v23;
      v18 = a1 == 7;
      v11 = 1;
      break;
    case 8:
      v20 = 0x100000000;
      if (a1 == 3)
        v20 = 0x100000003;
      v21 = *(_QWORD *)OpenMPContextTraitSelectorName == 0x6C656C6C61726170;
LABEL_48:
      if (v21)
        v4 = v20;
      else
        v4 = 0;
      goto LABEL_51;
    default:
      goto LABEL_51;
  }
LABEL_131:
  if (v11 && (v4 & 0x300000000) == 0)
  {
    v41 = 0x100000016;
    if (!v18)
      v41 = 0x100000000;
    if (!(*(_DWORD *)OpenMPContextTraitSelectorName ^ 0x5F363878 | *((unsigned __int16 *)OpenMPContextTraitSelectorName
                                                                    + 2) ^ 0x3436))
      v4 = v41;
  }
  v42 = v11 ^ 1;
  if ((v4 & 0x300000000) != 0)
    v42 = 1;
  if ((v42 & 1) == 0)
  {
    v43 = 0x100000017;
    if (!v18)
      v43 = 0x100000000;
    if (!(*(_DWORD *)OpenMPContextTraitSelectorName ^ 0x67646D61 | *((unsigned __int16 *)OpenMPContextTraitSelectorName
                                                                    + 2) ^ 0x6E63))
      v4 = v43;
  }
  v44 = !v16;
  if ((v4 & 0x300000000) != 0)
    v44 = 1;
  if ((v44 & 1) != 0)
  {
    if (v3 != 7 || (v4 & 0x300000000) != 0)
      goto LABEL_155;
    v45 = *(_DWORD *)OpenMPContextTraitSelectorName ^ 0x7470766E | *(_DWORD *)(OpenMPContextTraitSelectorName + 3) ^ 0x34367874;
    v46 = 0x100000019;
  }
  else
  {
    v45 = *(_DWORD *)OpenMPContextTraitSelectorName ^ 0x7470766E | OpenMPContextTraitSelectorName[4] ^ 0x78;
    v46 = 0x100000018;
  }
  v13 = !v18;
  v47 = 0x100000000;
  if (!v13)
    v47 = v46;
  if (!v45)
    v4 = v47;
LABEL_155:
  v48 = v12 ^ 1;
  if ((v4 & 0x300000000) != 0)
    v49 = 1;
  else
    v49 = v12 ^ 1;
  if ((v49 & 1) == 0)
  {
    v50 = 0x10000001ALL;
    if (a1 != 8)
      v50 = 0x100000000;
    if (!(*(unsigned __int16 *)OpenMPContextTraitSelectorName ^ 0x6D61 | OpenMPContextTraitSelectorName[2] ^ 0x64))
      v4 = v50;
  }
  if ((v4 & 0x300000000) != 0)
    v48 = 1;
  if ((v48 & 1) == 0)
  {
    v51 = 0x10000001BLL;
    if (a1 != 8)
      v51 = 0x100000000;
    if (!(*(unsigned __int16 *)OpenMPContextTraitSelectorName ^ 0x7261 | OpenMPContextTraitSelectorName[2] ^ 0x6D))
      v4 = v51;
  }
  v52 = v12 ^ 1;
  if ((v4 & 0x300000000) != 0)
    v52 = 1;
  if ((v52 & 1) == 0)
  {
    v53 = 0x10000001CLL;
    if (a1 != 8)
      v53 = 0x100000000;
    if (!(*(unsigned __int16 *)OpenMPContextTraitSelectorName ^ 0x7362 | OpenMPContextTraitSelectorName[2] ^ 0x63))
      v4 = v53;
  }
  v54 = v19 ^ 1;
  if ((v4 & 0x300000000) != 0)
    v54 = 1;
  if ((v54 & 1) == 0)
  {
    v55 = 0x10000001DLL;
    if (a1 != 8)
      v55 = 0x100000000;
    if (*(_DWORD *)OpenMPContextTraitSelectorName == 2036429411)
      v4 = v55;
  }
  if (v3 == 7 && (v4 & 0x300000000) == 0)
  {
    v56 = 0x10000001ELL;
    if (a1 != 8)
      v56 = 0x100000000;
    if (!(*(_DWORD *)OpenMPContextTraitSelectorName ^ 0x696A7566 | *(_DWORD *)(OpenMPContextTraitSelectorName + 3) ^ 0x75737469))
      v4 = v56;
  }
  v57 = v12 ^ 1;
  if ((v4 & 0x300000000) != 0)
    v58 = 1;
  else
    v58 = v12 ^ 1;
  if ((v58 & 1) == 0)
  {
    v59 = 0x10000001FLL;
    if (a1 != 8)
      v59 = 0x100000000;
    if (!(*(unsigned __int16 *)OpenMPContextTraitSelectorName ^ 0x6E67 | OpenMPContextTraitSelectorName[2] ^ 0x75))
      v4 = v59;
  }
  if ((v4 & 0x300000000) != 0)
    v57 = 1;
  if ((v57 & 1) == 0)
  {
    v60 = 0x100000020;
    if (a1 != 8)
      v60 = 0x100000000;
    if (!(*(unsigned __int16 *)OpenMPContextTraitSelectorName ^ 0x6269 | OpenMPContextTraitSelectorName[2] ^ 0x6D))
      v4 = v60;
  }
  v61 = !v16;
  if ((v4 & 0x300000000) != 0)
    v61 = 1;
  if ((v61 & 1) == 0)
  {
    v62 = 0x100000021;
    if (a1 != 8)
      v62 = 0x100000000;
    if (!(*(_DWORD *)OpenMPContextTraitSelectorName ^ 0x65746E69 | OpenMPContextTraitSelectorName[4] ^ 0x6C))
      v4 = v62;
  }
  v63 = v19 ^ 1;
  if ((v4 & 0x300000000) != 0)
    v63 = 1;
  if ((v63 & 1) == 0)
  {
    v64 = 0x100000022;
    if (a1 != 8)
      v64 = 0x100000000;
    if (*(_DWORD *)OpenMPContextTraitSelectorName == 1836477548)
      v4 = v64;
  }
  v65 = v12 ^ 1;
  if ((v4 & 0x300000000) != 0)
    v65 = 1;
  if ((v65 & 1) == 0)
  {
    v66 = 0x100000023;
    if (a1 != 8)
      v66 = 0x100000000;
    if (!(*(unsigned __int16 *)OpenMPContextTraitSelectorName ^ 0x656E | OpenMPContextTraitSelectorName[2] ^ 0x63))
      v4 = v66;
  }
  v67 = v11 ^ 1;
  if ((v4 & 0x300000000) != 0)
    v67 = 1;
  if ((v67 & 1) == 0)
  {
    v68 = 0x100000024;
    if (a1 != 8)
      v68 = 0x100000000;
    if (!(*(_DWORD *)OpenMPContextTraitSelectorName ^ 0x6469766E | *((unsigned __int16 *)OpenMPContextTraitSelectorName
                                                                    + 2) ^ 0x6169))
      v4 = v68;
  }
  v69 = v12 ^ 1;
  if ((v4 & 0x300000000) != 0)
    v69 = 1;
  if ((v69 & 1) == 0)
  {
    v70 = 0x100000025;
    if (a1 != 8)
      v70 = 0x100000000;
    if (!(*(unsigned __int16 *)OpenMPContextTraitSelectorName ^ 0x6770 | OpenMPContextTraitSelectorName[2] ^ 0x69))
      v4 = v70;
  }
  v71 = v4 & 0x300000000;
  if (v3 == 2 && !v71)
  {
    v72 = (bswap32(*(unsigned __int16 *)OpenMPContextTraitSelectorName) >> 16) - 29801;
    v73 = 0x100000026;
LABEL_266:
    if (a1 != 8)
      v73 = 0x100000000;
    if (!v72)
      v4 = v73;
    v76 = a1 == 9;
    goto LABEL_271;
  }
  if (v3 == 7 && !v71)
  {
    v74 = 1970170734;
    v75 = bswap32(*(_DWORD *)OpenMPContextTraitSelectorName);
    if (v75 == 1970170734
      && (v74 = 1852798830, v75 = bswap32(*(_DWORD *)(OpenMPContextTraitSelectorName + 3)), v75 == 1852798830))
    {
      v72 = 0;
    }
    else if (v75 < v74)
    {
      v72 = -1;
    }
    else
    {
      v72 = 1;
    }
    v73 = 0x100000027;
    goto LABEL_266;
  }
  v76 = a1 == 9;
  v77 = v3 == 9;
  if (v3 == 9 && !v71)
  {
    v78 = 0x100000028;
    if (a1 != 9)
      v78 = 0x100000000;
    if (!(*(_QWORD *)OpenMPContextTraitSelectorName ^ 0x6C615F686374616DLL | OpenMPContextTraitSelectorName[8] ^ 0x6CLL))
      v4 = v78;
    v77 = 1;
  }
  if (v77 && (v4 & 0x300000000) == 0)
  {
    v79 = 0x100000029;
    if (a1 != 9)
      v79 = 0x100000000;
    if (!(*(_QWORD *)OpenMPContextTraitSelectorName ^ 0x6E615F686374616DLL | OpenMPContextTraitSelectorName[8] ^ 0x79))
      v4 = v79;
  }
LABEL_271:
  v80 = !v17;
  if ((v4 & 0x300000000) != 0)
    v80 = 1;
  if ((v80 & 1) == 0)
  {
    v81 = 0x10000002ALL;
    if (!v76)
      v81 = 0x100000000;
    if (!(*(_QWORD *)OpenMPContextTraitSelectorName ^ 0x6F6E5F686374616DLL | *((unsigned __int16 *)OpenMPContextTraitSelectorName
                                                                              + 4) ^ 0x656ELL))
      v4 = v81;
  }
  v82 = v4 & 0x300000000;
  if (v3 != 21 || v82)
  {
    v83 = v3 == 15;
    if (v3 == 15 && !v82)
    {
      v13 = !v76;
      v85 = 0x100000000;
      if (!v13)
        v85 = 0x10000002CLL;
      if (!(*(_QWORD *)OpenMPContextTraitSelectorName ^ 0x65745F776F6C6C61 | *(_QWORD *)(OpenMPContextTraitSelectorName
                                                                                          + 7) ^ 0x736574616C706D65))
        v4 = v85;
      v83 = 1;
    }
  }
  else
  {
    v83 = 0;
    v13 = !v76;
    v84 = 0x100000000;
    if (!v13)
      v84 = 0x10000002BLL;
    if (!(*(_QWORD *)OpenMPContextTraitSelectorName ^ 0x5F656C6261736964 | *((_QWORD *)OpenMPContextTraitSelectorName
                                                                              + 1) ^ 0x746963696C706D69 | *(_QWORD *)(OpenMPContextTraitSelectorName + 13) ^ 0x657361625F746963))
      v4 = v84;
  }
  v86 = v19 ^ 1;
  if ((v4 & 0x300000000) != 0)
    v86 = 1;
  if ((v86 & 1) == 0)
  {
    v87 = 0x10000002DLL;
    if (a1 != 10)
      v87 = 0x100000000;
    if (*(_DWORD *)OpenMPContextTraitSelectorName == 1702195828)
      v4 = v87;
  }
  v88 = v4 & 0x300000000;
  v89 = !v16;
  if ((v4 & 0x300000000) != 0)
    v89 = 1;
  if ((v89 & 1) == 0)
  {
    v90 = *(_DWORD *)OpenMPContextTraitSelectorName ^ 0x736C6166 | OpenMPContextTraitSelectorName[4] ^ 0x65;
    v91 = 0x10000002ELL;
LABEL_306:
    if (a1 != 10)
      v91 = 0x100000000;
    v92 = v90 == 0;
LABEL_309:
    if (v92)
      v4 = v91;
    goto LABEL_312;
  }
  if (v3 == 7 && !v88)
  {
    v90 = *(_DWORD *)OpenMPContextTraitSelectorName ^ 0x6E6B6E75 | *(_DWORD *)(OpenMPContextTraitSelectorName + 3) ^ 0x6E776F6E;
    v91 = 0x10000002FLL;
    goto LABEL_306;
  }
  if (v3 == 8 && !v88)
  {
    v91 = 0x100000030;
    if (a1 != 11)
      v91 = 0x100000000;
    v92 = *(_QWORD *)OpenMPContextTraitSelectorName == 0x6863746170736964;
    goto LABEL_309;
  }
  if (v3 == 32 && !v88)
  {
    v91 = 0x100000031;
    if (a1 != 12)
      v91 = 0x100000000;
    v92 = (*(_QWORD *)OpenMPContextTraitSelectorName ^ 0x6E65202C796E613CLL | *((_QWORD *)OpenMPContextTraitSelectorName
                                                                              + 1) ^ 0x7420796C65726974 | *((_QWORD *)OpenMPContextTraitSelectorName + 2) ^ 0x6564207465677261 | *((_QWORD *)OpenMPContextTraitSelectorName + 3) ^ 0x3E746E65646E6570) == 0;
    goto LABEL_309;
  }
LABEL_312:
  v93 = !v83;
  if ((v4 & 0x300000000) != 0)
    v93 = 1;
  if ((v93 & 1) == 0)
  {
    v94 = 0x100000032;
    if (a1 != 13)
      v94 = 0x100000000;
    if (!(*(_QWORD *)OpenMPContextTraitSelectorName ^ 0x5F64656966696E75 | *(_QWORD *)(OpenMPContextTraitSelectorName
                                                                                        + 7) ^ 0x737365726464615FLL))
      v4 = v94;
  }
  if (v3 == 21 && (v4 & 0x300000000) == 0)
  {
    v95 = 0x100000033;
    if (a1 != 14)
      v95 = 0x100000000;
    if (!(*(_QWORD *)OpenMPContextTraitSelectorName ^ 0x5F64656966696E75 | *((_QWORD *)OpenMPContextTraitSelectorName
                                                                              + 1) ^ 0x6D5F646572616873 | *(_QWORD *)(OpenMPContextTraitSelectorName + 13) ^ 0x79726F6D656D5F64))
      v4 = v95;
  }
  v96 = !v83;
  if ((v4 & 0x300000000) != 0)
    v96 = 1;
  if ((v96 & 1) == 0)
  {
    v97 = 0x100000034;
    if (a1 != 15)
      v97 = 0x100000000;
    if (!(*(_QWORD *)OpenMPContextTraitSelectorName ^ 0x5F65737265766572 | *(_QWORD *)(OpenMPContextTraitSelectorName
                                                                                        + 7) ^ 0x64616F6C66666F5FLL))
      v4 = v97;
  }
  v98 = v4 & 0x300000000;
  if (v3 != 18 || v98)
  {
    if (v3 != 24 || v98)
      goto LABEL_342;
    v99 = *(_QWORD *)OpenMPContextTraitSelectorName ^ 0x645F63696D6F7461 | *((_QWORD *)OpenMPContextTraitSelectorName
                                                                             + 1) ^ 0x6D5F746C75616665 | *((_QWORD *)OpenMPContextTraitSelectorName + 2) ^ 0x726564726F5F6D65;
    v100 = 0x100000036;
    v101 = a1 == 17;
  }
  else
  {
    v99 = *(_QWORD *)OpenMPContextTraitSelectorName ^ 0x5F63696D616E7964 | *((_QWORD *)OpenMPContextTraitSelectorName
                                                                             + 1) ^ 0x6F7461636F6C6C61 | *((unsigned __int16 *)OpenMPContextTraitSelectorName + 8) ^ 0x7372;
    v100 = 0x100000035;
    v101 = a1 == 16;
  }
  if (!v101)
    v100 = 0x100000000;
  if (!v99)
    v4 = v100;
LABEL_342:
  if ((v4 & 0x300000000) != 0)
    return v4;
  else
    return 0;
}

uint64_t llvm::omp::getOpenMPContextTraitPropertyName(int a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_1C54D633C + 4 * byte_1C865367A[a1]))("invalid", 7);
}

const char *sub_1C54D633C()
{
  return "arm";
}

const char *sub_1C54D6504()
{
  return "ti";
}

const char *sub_1C54D6514()
{
  return "match_all";
}

const char *sub_1C54D6540()
{
  return "disable_implicit_base";
}

const char *sub_1C54D654C()
{
  return "allow_templates";
}

uint64_t sub_1C54D6588@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

const char *sub_1C54D6594()
{
  return "unified_address";
}

const char *sub_1C54D65C0()
{
  return "dynamic_allocators";
}

const char *sub_1C54D65D0()
{
  return "atomic_default_mem_order";
}

char *llvm::omp::getOpenMPContextTraitPropertyFullName(int a1)
{
  return off_1E816D408[a1];
}

uint64_t llvm::omp::isValidTraitPropertyForTraitSetAndSelector(int a1)
{
  return ((uint64_t (*)(void))((char *)sub_1C54D6618 + 4 * byte_1C86536B1[a1]))();
}

BOOL sub_1C54D6618(uint64_t a1, int a2, int a3)
{
  return a2 == 7 && a3 == 2;
}

void sub_1C54D6690()
{
  JUMPOUT(0x1C54D662CLL);
}

void sub_1C54D6698()
{
  JUMPOUT(0x1C54D6638);
}

void sub_1C54D66A0()
{
  JUMPOUT(0x1C54D6638);
}

void sub_1C54D66A8()
{
  JUMPOUT(0x1C54D6638);
}

void sub_1C54D66B0()
{
  JUMPOUT(0x1C54D6638);
}

void sub_1C54D66B8()
{
  JUMPOUT(0x1C54D6638);
}

std::string *llvm::omp::listOpenMPContextTraitSets@<X0>(std::string *a1@<X8>)
{
  std::string *v2;
  std::string *v3;
  std::string *v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *result;
  int v16;
  std::string::size_type size;
  std::string::size_type v18;

  v2 = a1;
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  v3 = std::string::append(a1, "'");
  v4 = std::string::append(v3, "construct");
  v5 = std::string::append(v4, "'");
  std::string::append(v5, " ");
  v6 = std::string::append(v2, "'");
  v7 = std::string::append(v6, "device");
  v8 = std::string::append(v7, "'");
  std::string::append(v8, " ");
  v9 = std::string::append(v2, "'");
  v10 = std::string::append(v9, "implementation");
  v11 = std::string::append(v10, "'");
  std::string::append(v11, " ");
  v12 = std::string::append(v2, "'");
  v13 = std::string::append(v12, "user");
  v14 = std::string::append(v13, "'");
  result = std::string::append(v14, " ");
  v16 = SHIBYTE(v2->__r_.__value_.__r.__words[2]);
  size = v2->__r_.__value_.__l.__size_;
  if (v16 >= 0)
    size = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  v18 = size - 1;
  if (v16 < 0)
  {
    v2->__r_.__value_.__l.__size_ = v18;
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
  }
  else
  {
    *((_BYTE *)&v2->__r_.__value_.__s + 23) = v18 & 0x7F;
  }
  v2->__r_.__value_.__s.__data_[v18] = 0;
  return result;
}

std::string *llvm::omp::listOpenMPContextTraitSelectors@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  std::string *v2;
  const std::string::value_type *v3;
  uint64_t v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  std::string *v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  std::string *v23;
  std::string *v24;
  std::string *v25;
  std::string *v26;
  std::string *v27;
  std::string *v28;
  std::string *v29;
  std::string *v30;
  std::string *v31;
  std::string *v32;
  std::string *v33;
  std::string *v34;
  std::string *v35;
  std::string *v36;
  std::string *v37;
  std::string *v38;
  std::string *v39;
  std::string *v40;
  std::string *v41;
  std::string *v42;
  std::string *v43;
  std::string *v44;
  std::string *v45;
  std::string *v46;
  int v47;
  std::string::size_type size;

  v2 = a2;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = "condition";
  switch((int)result)
  {
    case 0:
      v3 = "invalid";
      goto LABEL_7;
    case 1:
      v5 = std::string::append(a2, "'");
      v6 = std::string::append(v5, "target");
      v7 = std::string::append(v6, "'");
      std::string::append(v7, " ");
      v8 = std::string::append(v2, "'");
      v9 = std::string::append(v8, "teams");
      v10 = std::string::append(v9, "'");
      std::string::append(v10, " ");
      v11 = std::string::append(v2, "'");
      v12 = std::string::append(v11, "parallel");
      v13 = std::string::append(v12, "'");
      std::string::append(v13, " ");
      v14 = std::string::append(v2, "'");
      v15 = std::string::append(v14, "for");
      v16 = std::string::append(v15, "'");
      std::string::append(v16, " ");
      v17 = std::string::append(v2, "'");
      v18 = std::string::append(v17, "simd");
      v19 = std::string::append(v18, "'");
      std::string::append(v19, " ");
      v3 = "dispatch";
      goto LABEL_7;
    case 2:
      v20 = std::string::append(a2, "'");
      v21 = std::string::append(v20, "kind");
      v22 = std::string::append(v21, "'");
      std::string::append(v22, " ");
      v23 = std::string::append(v2, "'");
      v24 = std::string::append(v23, "arch");
      v25 = std::string::append(v24, "'");
      std::string::append(v25, " ");
      v3 = "isa";
      goto LABEL_7;
    case 3:
      v26 = std::string::append(a2, "'");
      v27 = std::string::append(v26, "vendor");
      v28 = std::string::append(v27, "'");
      std::string::append(v28, " ");
      v29 = std::string::append(v2, "'");
      v30 = std::string::append(v29, "extension");
      v31 = std::string::append(v30, "'");
      std::string::append(v31, " ");
      v32 = std::string::append(v2, "'");
      v33 = std::string::append(v32, "unified_address");
      v34 = std::string::append(v33, "'");
      std::string::append(v34, " ");
      v35 = std::string::append(v2, "'");
      v36 = std::string::append(v35, "unified_shared_memory");
      v37 = std::string::append(v36, "'");
      std::string::append(v37, " ");
      v38 = std::string::append(v2, "'");
      v39 = std::string::append(v38, "reverse_offload");
      v40 = std::string::append(v39, "'");
      std::string::append(v40, " ");
      v41 = std::string::append(v2, "'");
      v42 = std::string::append(v41, "dynamic_allocators");
      v43 = std::string::append(v42, "'");
      std::string::append(v43, " ");
      v3 = "atomic_default_mem_order";
      goto LABEL_7;
    case 4:
LABEL_7:
      v44 = std::string::append(v2, "'");
      v45 = std::string::append(v44, v3);
      v46 = std::string::append(v45, "'");
      result = std::string::append(v46, " ");
      v47 = SHIBYTE(v2->__r_.__value_.__r.__words[2]);
      size = v2->__r_.__value_.__l.__size_;
      if (v47 >= 0)
        size = HIBYTE(v2->__r_.__value_.__r.__words[2]);
      v4 = size - 1;
      if ((v47 & 0x80000000) == 0)
        goto LABEL_10;
      v2->__r_.__value_.__l.__size_ = v4;
      v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
      break;
    default:
      v4 = -1;
LABEL_10:
      *((_BYTE *)&v2->__r_.__value_.__s + 23) = v4 & 0x7F;
      break;
  }
  v2->__r_.__value_.__s.__data_[v4] = 0;
  return result;
}

double llvm::omp::listOpenMPContextTraitProperties@<D0>(int a1@<W0>, int a2@<W1>, char *a3@<X8>)
{
  const std::string::value_type *v4;
  const std::string::value_type *v5;
  const std::string::value_type *v6;
  const std::string::value_type *v7;
  const std::string::value_type *v8;
  const std::string::value_type *v9;
  const std::string::value_type *v10;
  const std::string::value_type *v11;
  const std::string::value_type *v12;
  const std::string::value_type *v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  std::string *v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  std::string *v23;
  std::string *v24;
  std::string *v25;
  std::string *v26;
  std::string *v27;
  std::string *v28;
  std::string *v29;
  std::string *v30;
  std::string *v31;
  std::string *v32;
  std::string *v33;
  std::string *v34;
  std::string *v35;
  std::string *v36;
  std::string *v37;
  std::string *v38;
  std::string *v39;
  std::string *v40;
  std::string *v41;
  std::string *v42;
  std::string *v43;
  std::string *v44;
  std::string *v45;
  std::string *v46;
  std::string *v47;
  std::string *v48;
  std::string *v49;
  std::string *v50;
  std::string *v51;
  std::string *v52;
  std::string *v53;
  std::string *v54;
  std::string *v55;
  double result;
  char v57;
  std::string::size_type size;
  std::string::size_type v59;
  std::string *v60;
  std::string::value_type *__s;
  std::string::value_type *v62;
  std::string::value_type *v63;
  std::string::value_type *v64;
  const char *v65;
  const char *v66;
  std::string v67;

  memset(&v67, 0, sizeof(v67));
  if (a1 == 1 && a2 == 1)
  {
    v4 = "target";
LABEL_29:
    v53 = std::string::append(&v67, "'");
    v54 = std::string::append(v53, v4);
    v55 = std::string::append(v54, "'");
    std::string::append(v55, " ");
    v57 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
    size = v67.__r_.__value_.__l.__size_;
    goto LABEL_30;
  }
  if (a1 == 1 && a2 == 2)
  {
    v4 = "teams";
    goto LABEL_29;
  }
  if (a1 == 1 && a2 == 3)
  {
    v4 = "parallel";
    goto LABEL_29;
  }
  if (a1 == 1 && a2 == 4)
  {
    v4 = "for";
    goto LABEL_29;
  }
  if (a1 == 1 && a2 == 5)
  {
    v4 = "simd";
    goto LABEL_29;
  }
  if (a1 == 2 && a2 == 6)
  {
    v4 = "any";
    v5 = "fpga";
    v6 = "gpu";
    v7 = "cpu";
    v8 = "nohost";
    v9 = "host";
LABEL_26:
    v38 = std::string::append(&v67, "'");
    v39 = std::string::append(v38, v9);
    v40 = std::string::append(v39, "'");
    std::string::append(v40, " ");
LABEL_27:
    v41 = std::string::append(&v67, "'");
    v42 = std::string::append(v41, v8);
    v43 = std::string::append(v42, "'");
    std::string::append(v43, " ");
    v44 = std::string::append(&v67, "'");
    v45 = std::string::append(v44, v7);
    v46 = std::string::append(v45, "'");
    std::string::append(v46, " ");
LABEL_28:
    v47 = std::string::append(&v67, "'");
    v48 = std::string::append(v47, v6);
    v49 = std::string::append(v48, "'");
    std::string::append(v49, " ");
    v50 = std::string::append(&v67, "'");
    v51 = std::string::append(v50, v5);
    v52 = std::string::append(v51, "'");
    std::string::append(v52, " ");
    goto LABEL_29;
  }
  if (a1 == 2 && a2 == 7)
  {
    v4 = "nvptx64";
    v65 = "amdgcn";
    v66 = "nvptx";
    v7 = "x86_64";
    v8 = "x86";
    v9 = "ppc64le";
    v63 = "ppcle";
    v64 = "ppc64";
    __s = "aarch64_32";
    v62 = "ppc";
    v10 = "aarch64_be";
    v11 = "aarch64";
    v12 = "armeb";
    v13 = "arm";
LABEL_25:
    v14 = std::string::append(&v67, "'");
    v15 = std::string::append(v14, v13);
    v16 = std::string::append(v15, "'");
    std::string::append(v16, " ");
    v17 = std::string::append(&v67, "'");
    v18 = std::string::append(v17, v12);
    v19 = std::string::append(v18, "'");
    std::string::append(v19, " ");
    v20 = std::string::append(&v67, "'");
    v21 = std::string::append(v20, v11);
    v22 = std::string::append(v21, "'");
    std::string::append(v22, " ");
    v23 = std::string::append(&v67, "'");
    v24 = std::string::append(v23, v10);
    v25 = std::string::append(v24, "'");
    std::string::append(v25, " ");
    v26 = std::string::append(&v67, "'");
    v27 = std::string::append(v26, __s);
    v28 = std::string::append(v27, "'");
    std::string::append(v28, " ");
    v29 = std::string::append(&v67, "'");
    v30 = std::string::append(v29, v62);
    v31 = std::string::append(v30, "'");
    std::string::append(v31, " ");
    v32 = std::string::append(&v67, "'");
    v33 = std::string::append(v32, v63);
    v34 = std::string::append(v33, "'");
    std::string::append(v34, " ");
    v35 = std::string::append(&v67, "'");
    v36 = std::string::append(v35, v64);
    v37 = std::string::append(v36, "'");
    std::string::append(v37, " ");
    v6 = v65;
    v5 = v66;
    goto LABEL_26;
  }
  if (a1 == 3 && a2 == 8)
  {
    v4 = "unknown";
    v65 = "pgi";
    v66 = "ti";
    v7 = "nvidia";
    v8 = "nec";
    v9 = "llvm";
    v63 = "ibm";
    v64 = "intel";
    __s = "fujitsu";
    v62 = "gnu";
    v10 = "cray";
    v11 = "bsc";
    v12 = "arm";
    v13 = "amd";
    goto LABEL_25;
  }
  if (a1 == 3 && a2 == 9)
  {
    v4 = "allow_templates";
    v5 = "disable_implicit_base";
    v6 = "match_none";
    v7 = "match_any";
    v8 = "match_all";
    goto LABEL_27;
  }
  if (a1 == 4 && a2 == 10)
  {
    v4 = "unknown";
    v5 = "false";
    v6 = "true";
    goto LABEL_28;
  }
  if (a1 == 1 && a2 == 11)
  {
    v4 = "dispatch";
    goto LABEL_29;
  }
  if (a1 == 2 && a2 == 12)
  {
    v4 = "<any, entirely target dependent>";
    goto LABEL_29;
  }
  if (a1 == 3 && a2 == 13)
  {
    v4 = "unified_address";
    goto LABEL_29;
  }
  if (a1 == 3 && a2 == 14)
  {
    v4 = "unified_shared_memory";
    goto LABEL_29;
  }
  if (a1 == 3 && a2 == 15)
  {
    v4 = "reverse_offload";
    goto LABEL_29;
  }
  if (a1 == 3 && a2 == 16)
  {
    v4 = "dynamic_allocators";
    goto LABEL_29;
  }
  v57 = 0;
  size = 0;
  if (a1 == 3 && a2 == 17)
  {
    v4 = "atomic_default_mem_order";
    goto LABEL_29;
  }
LABEL_30:
  if (v57 >= 0)
    size = v57 & 0x7F;
  if (size)
  {
    v59 = size - 1;
    v60 = &v67;
    if (v57 < 0)
      v60 = (std::string *)v67.__r_.__value_.__r.__words[0];
    if (v57 < 0)
      v67.__r_.__value_.__l.__size_ = v59;
    else
      *((_BYTE *)&v67.__r_.__value_.__s + 23) = v59 & 0x7F;
    v60->__r_.__value_.__s.__data_[v59] = 0;
    result = *(double *)&v67.__r_.__value_.__l.__data_;
    *(std::string *)a3 = v67;
  }
  else
  {
    a3[23] = 6;
    strcpy(a3, "<none>");
    if (v57 < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
  }
  return result;
}

uint64_t llvm::OpenMPIRBuilder::getOrCreateRuntimeFunctionPtr(uint64_t a1, int a2)
{
  uint64_t v2;

  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(_QWORD *)(a1 + 336), a2);
  if (*(_BYTE *)(v2 + 16))
    return 0;
  else
    return v2;
}

void llvm::OpenMPIRBuilder::finalize(llvm::OpenMPIRBuilder *this, llvm::Function *a2)
{
  _QWORD *v3;
  unsigned int v4;
  unint64_t v6;
  llvm::Function *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t CodeRegion;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t i;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  BOOL v31;
  void *v32;
  char *v33;
  int v35;
  unsigned int v36;
  _BYTE *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *j;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  unsigned int v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  __int128 v61;
  char v62;
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  int v66;
  _BYTE v67[256];
  uint64_t v68;
  _BYTE v69[56];
  uint64_t v70[8];
  void *v71;
  uint64_t v72;
  void *v73;
  char v74;
  uint64_t v75[3];
  void *__p;
  void *v77;
  _BYTE v78[192];
  void *v79;
  uint64_t v80;
  _QWORD v81[176];
  void *v82;
  uint64_t v83;
  _QWORD v84[34];

  v84[32] = *MEMORY[0x1E0C80C00];
  v63 = v67;
  v64 = v67;
  v65 = 32;
  v66 = 0;
  v82 = v84;
  v83 = 0x2000000000;
  v79 = v81;
  v80 = 0x1000000000;
  v3 = v81;
  v4 = *((_DWORD *)this + 136);
  if (v4)
  {
    v6 = *((_QWORD *)this + 67);
    v60 = v6 + 88 * v4;
    while (a2 && *(llvm::Function **)(*(_QWORD *)(v6 + 32) + 56) != a2)
    {
      v32 = v79;
      v33 = (char *)v6;
      if (v80 >= HIDWORD(v80))
      {
        v38 = v80 + 1;
        if ((unint64_t)v79 <= v6 && (unint64_t)v79 + 88 * v80 > v6)
        {
          v39 = v6 - (_QWORD)v79;
          sub_1C626DCD4((uint64_t)&v79, v38);
          v32 = v79;
          v33 = (char *)v79 + v39;
        }
        else
        {
          sub_1C626DCD4((uint64_t)&v79, v38);
          v32 = v79;
          v33 = (char *)v6;
        }
      }
      sub_1C626D62C((uint64_t)v32 + 88 * v80, (uint64_t)v33);
      LODWORD(v80) = v80 + 1;
LABEL_44:
      v6 += 88;
      if (v6 == v60)
      {
        v3 = v79;
        goto LABEL_61;
      }
    }
    if (v64 != v63)
    {
      if (v65 >= 0x21 && 4 * (HIDWORD(v65) - v66) < v65)
      {
        free(v64);
        v35 = 1 << (33 - __clz(HIDWORD(v65) - v66 - 1));
        v29 = (HIDWORD(v65) - v66) > 0x10;
        HIDWORD(v65) = 0;
        v66 = 0;
        if (v29)
          v36 = v35;
        else
          v36 = 32;
        LODWORD(v65) = v36;
        v37 = malloc_type_malloc(8 * v36, 0x4065EBACuLL);
        if (!v37)
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        v64 = v37;
        memset(v37, 255, 8 * v65);
        goto LABEL_7;
      }
      memset(v64, 255, 8 * v65);
    }
    HIDWORD(v65) = 0;
    v66 = 0;
LABEL_7:
    LODWORD(v83) = 0;
    llvm::OpenMPIRBuilder::OutlineInfo::collectBlocks(v6, (llvm::SmallPtrSetImplBase *)&v63, (uint64_t)&v82);
    v7 = *(llvm::Function **)(*(_QWORD *)(v6 + 32) + 56);
    llvm::CodeExtractorAnalysisCache::CodeExtractorAnalysisCache((llvm::CodeExtractorAnalysisCache *)v78, v7);
    v8 = *(_QWORD *)(v6 + 48);
    v62 = 8;
    strcpy((char *)&v61, ".omp_par");
    llvm::CodeExtractor::CodeExtractor((uint64_t)v69, (uint64_t *)v82, v83, 0, 1, 0, 0, 0, 1u, 1, v8, &v61);
    v9 = *(unsigned int *)(v6 + 64);
    if ((_DWORD)v9)
    {
      v10 = *(uint64_t **)(v6 + 56);
      v11 = 8 * v9;
      do
      {
        v12 = *v10++;
        v68 = v12;
        sub_1C4D954B8(v75, &v68);
        v11 -= 8;
      }
      while (v11);
    }
    CodeRegion = llvm::CodeExtractor::extractCodeRegion((llvm::CodeExtractor *)v69, (const llvm::CodeExtractorAnalysisCache *)v78);
    llvm::SymbolTableListTraits<llvm::Function>::removeNodeFromList(*(_QWORD *)(CodeRegion + 40) + 24, (uint64_t ***)CodeRegion);
    v14 = *(_QWORD *)(CodeRegion + 56);
    v15 = *(_QWORD **)(CodeRegion + 64);
    *v15 = v14;
    *(_QWORD *)(v14 + 8) = v15;
    *(_QWORD *)(CodeRegion + 56) = 0;
    *(_QWORD *)(CodeRegion + 64) = 0;
    sub_1C6267D70((_QWORD *)(*((_QWORD *)this + 42) + 24), (uint64_t)v7 + 56, CodeRegion);
    v16 = *(_QWORD *)(CodeRegion + 80);
    if (v16)
      v17 = (uint64_t *)(v16 - 24);
    else
      v17 = 0;
    v18 = (uint64_t *)v17[5];
    if (v18 != v17 + 5)
    {
      do
      {
        v31 = v18 == 0;
        v22 = (uint64_t *)*v18;
        v20 = v18 - 3;
        v21 = v22;
        if (v31)
          v23 = 0;
        else
          v23 = v20;
        if (*((unsigned __int8 *)v23 + 16) - 29 >= 0xB)
        {
          v24 = *(_QWORD *)(v6 + 32);
          v25 = (uint64_t *)(v24 + 40);
          for (i = *(_QWORD *)(v24 + 48); (uint64_t *)i != v25; i = *(_QWORD *)(i + 8))
          {
            v27 = i - 24;
            if (!i)
              v27 = 0;
            if (*(_BYTE *)(v27 + 16) != 83)
            {
              v28 = *(unsigned __int8 *)(i - 8) - 38;
              v29 = v28 > 0x38;
              v30 = (1 << v28) & 0x100060000000001;
              v31 = v29 || v30 == 0;
              if (v31)
                v25 = (uint64_t *)i;
              else
                v25 = *(uint64_t **)(i + 8);
              break;
            }
          }
          llvm::Instruction::moveBefore(v23, v24, v25);
        }
        v18 = v21;
      }
      while (v21 != v17 + 5);
    }
    sub_1C4FCEAA0(v17[7] + 72, v17 + 3, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 56) + 72, (uint64_t *)(*(_QWORD *)(v6 + 32) + 24));
    llvm::BasicBlock::eraseFromParent((llvm::BasicBlock *)v17);
    v19 = *(_QWORD *)(v6 + 24);
    if (v19)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 48))(v19, CodeRegion);
    if (__p)
    {
      v77 = __p;
      operator delete(__p);
    }
    MEMORY[0x1CAA32FB4](v75[0], 8);
    if (v74 < 0)
      operator delete(v73);
    if (v71 != &v72)
      free(v71);
    sub_1C5408A20(v70);
    sub_1C626D3D0((uint64_t)v78);
    goto LABEL_44;
  }
LABEL_61:
  v40 = (uint64_t *)((char *)this + 536);
  if ((void **)((char *)this + 536) != &v79)
  {
    if (v3 == v81)
    {
      v41 = v80;
      v42 = *((unsigned int *)this + 136);
      if (v42 >= v80)
      {
        v43 = *v40;
        if ((_DWORD)v80)
        {
          v44 = sub_1C54E77E8((uint64_t)v81, (uint64_t)&v81[11 * v80], v43);
          v43 = *((_QWORD *)this + 67);
          LODWORD(v42) = *((_DWORD *)this + 136);
        }
        else
        {
          v44 = *v40;
        }
        for (j = (_QWORD *)(v43 + 88 * v42); j != (_QWORD *)v44; j = sub_1C626D6CC(j - 11))
          ;
        *((_DWORD *)this + 136) = v41;
        if ((_DWORD)v80)
        {
          v46 = 88 * v80;
          v47 = (char *)v79 - 88;
          do
          {
            sub_1C626D6CC(&v47[v46]);
            v46 -= 88;
          }
          while (v46);
        }
        goto LABEL_94;
      }
      if (*((_DWORD *)this + 137) < v80)
      {
        if ((_DWORD)v42)
        {
          v50 = 88 * v42;
          v51 = *v40 - 88;
          do
          {
            sub_1C626D6CC((_QWORD *)(v51 + v50));
            v50 -= 88;
          }
          while (v50);
        }
        *((_DWORD *)this + 136) = 0;
        sub_1C626DCD4((uint64_t)this + 536, v41);
      }
      else if ((_DWORD)v42)
      {
        sub_1C54E77E8((uint64_t)v81, (uint64_t)&v81[11 * v42], *v40);
LABEL_87:
        v52 = (char *)v79;
        v53 = v80;
        if (v42 != v80)
        {
          v54 = *v40 + 88 * v42;
          v55 = (char *)v79 + 88 * v42;
          v56 = 88 * v80 - 88 * v42;
          do
          {
            v57 = sub_1C626D594(v54, (uint64_t)v55);
            v55 += 88;
            v54 = v57 + 88;
            v56 -= 88;
          }
          while (v56);
          v52 = (char *)v79;
          v53 = v80;
        }
        *((_DWORD *)this + 136) = v41;
        if (v53)
        {
          v58 = 88 * v53;
          v59 = v52 - 88;
          do
          {
            sub_1C626D6CC(&v59[v58]);
            v58 -= 88;
          }
          while (v58);
        }
LABEL_94:
        LODWORD(v80) = 0;
        goto LABEL_95;
      }
      v42 = 0;
      goto LABEL_87;
    }
    sub_1C626DD40((char **)this + 67, (char **)&v79);
    v3 = v79;
  }
  if (!(_DWORD)v80)
    goto LABEL_96;
  v48 = 11 * v80;
  v49 = v3 - 11;
  do
  {
    sub_1C626D6CC(&v49[v48]);
    v48 -= 11;
  }
  while (v48 * 8);
LABEL_95:
  v3 = v79;
LABEL_96:
  if (v3 != v81)
    free(v3);
  if (v82 != v84)
    free(v82);
  if (v64 != v63)
    free(v64);
}

void llvm::OpenMPIRBuilder::OutlineInfo::collectBlocks(uint64_t a1, llvm::SmallPtrSetImplBase *this, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[34];

  v24[32] = *MEMORY[0x1E0C80C00];
  v22 = v24;
  v23 = 0x2000000000;
  sub_1C4774094(this, *(_QWORD *)(a1 + 32));
  sub_1C4774094(this, *(_QWORD *)(a1 + 40));
  v24[0] = *(_QWORD *)(a1 + 32);
  v6 = 1;
  LODWORD(v23) = 1;
  do
  {
    v7 = *((_QWORD *)v22 + v6 - 1);
    LODWORD(v23) = v6 - 1;
    v8 = *(unsigned int *)(a3 + 8);
    if (v8 >= *(unsigned int *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v8 + 1, 8);
      v8 = *(unsigned int *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v8) = v7;
    ++*(_DWORD *)(a3 + 8);
    v9 = *(_QWORD *)(v7 + 40);
    if (v9 != v7 + 40)
    {
      if (v9)
        v10 = v9 - 24;
      else
        v10 = 0;
      v11 = *(unsigned __int8 *)(v10 + 16);
      v12 = v11 - 29;
      if (v11 != 30)
      {
        v13 = 2;
        switch(v12)
        {
          case 1:
            __break(1u);
            return;
          case 2:
            v13 = (*(_DWORD *)(v10 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_28;
          case 3:
          case 9:
            v13 = (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_28;
          case 4:
            goto LABEL_15;
          case 7:
            v13 = *(_WORD *)(v10 + 18) & 1;
            goto LABEL_28;
          case 8:
            v13 = 1;
            goto LABEL_15;
          case 10:
            v13 = *(_DWORD *)(v10 + 80) + 1;
LABEL_28:
            if (!v13)
              goto LABEL_25;
            goto LABEL_15;
          default:
            goto LABEL_25;
        }
      }
      if ((*(_DWORD *)(v10 + 20) & 0x7FFFFFF) == 3)
        v13 = 2;
      else
        v13 = 1;
LABEL_15:
      v14 = 0;
      v15 = 0;
      v16 = v13;
      v17 = v10 - 64;
      do
      {
        v18 = *(unsigned __int8 *)(v10 + 16);
        if (v18 != 30)
          __asm { BR              X9 }
        v19 = *(_QWORD *)(v10 - 32 - 32 * v15);
        sub_1C4774094(this, v19);
        if (v20)
        {
          v21 = v23;
          if (v23 >= (unint64_t)HIDWORD(v23))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, (uint64_t)v24, v23 + 1, 8);
            v21 = v23;
          }
          *((_QWORD *)v22 + v21) = v19;
          LODWORD(v23) = v23 + 1;
        }
        ++v15;
        v14 += 2;
        v17 += 32;
      }
      while (v16 != v15);
    }
LABEL_25:
    v6 = v23;
  }
  while ((_DWORD)v23);
  if (v22 != v24)
    free(v22);
}

uint64_t llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(uint64_t a1, const void *a2, size_t a3, const void *a4, size_t a5, unsigned int a6, unsigned int a7, _DWORD *a8)
{
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  size_t v19;
  std::string *v20;
  size_t size;
  uint64_t v22;
  size_t v23;
  std::string *v24;
  size_t v25;
  uint64_t v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t SrcLocStr;
  std::string v32;
  void *v33;
  __int128 v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v33 = v35;
  v35[0] = 59;
  v34 = xmmword_1C85FBF70;
  if (a5 + 1 < 0x81)
  {
    v16 = 1;
    if (!a5)
      goto LABEL_4;
    goto LABEL_3;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v33, v35, a5 + 1, 1);
  v16 = v34;
  if (a5)
  {
LABEL_3:
    memcpy((char *)v33 + v16, a4, a5);
    v16 = v34;
  }
LABEL_4:
  v17 = v16 + a5;
  *(_QWORD *)&v34 = v17;
  if (v17 + 1 > *((_QWORD *)&v34 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v33, v35, v17 + 1, 1);
    v17 = v34;
  }
  *((_BYTE *)v33 + v17) = 59;
  v18 = v34 + 1;
  *(_QWORD *)&v34 = v18;
  if (*((_QWORD *)&v34 + 1) >= v18 + a3)
  {
    if (!a3)
      goto LABEL_9;
    goto LABEL_8;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v33, v35, v18 + a3, 1);
  v18 = v34;
  if (a3)
  {
LABEL_8:
    memcpy((char *)v33 + v18, a2, a3);
    v18 = v34;
  }
LABEL_9:
  v19 = v18 + a3;
  *(_QWORD *)&v34 = v19;
  if (v19 + 1 > *((_QWORD *)&v34 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v33, v35, v19 + 1, 1);
    v19 = v34;
  }
  *((_BYTE *)v33 + v19) = 59;
  *(_QWORD *)&v34 = v34 + 1;
  v20 = &v32;
  std::to_string(&v32, a6);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    size = *((_BYTE *)&v32.__r_.__value_.__s + 23) & 0x7F;
  }
  else
  {
    size = v32.__r_.__value_.__l.__size_;
    v20 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  v22 = v34;
  if (*((_QWORD *)&v34 + 1) >= (unint64_t)v34 + size)
  {
    if (!size)
      goto LABEL_17;
    goto LABEL_16;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v33, v35, v34 + size, 1);
  v22 = v34;
  if (size)
  {
LABEL_16:
    memcpy((char *)v33 + v22, v20, size);
    v22 = v34;
  }
LABEL_17:
  v23 = v22 + size;
  *(_QWORD *)&v34 = v23;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v32.__r_.__value_.__l.__data_);
    v23 = v34;
  }
  if (v23 + 1 > *((_QWORD *)&v34 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v33, v35, v23 + 1, 1);
    v23 = v34;
  }
  *((_BYTE *)v33 + v23) = 59;
  *(_QWORD *)&v34 = v34 + 1;
  v24 = &v32;
  std::to_string(&v32, a7);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v25 = *((_BYTE *)&v32.__r_.__value_.__s + 23) & 0x7F;
  }
  else
  {
    v25 = v32.__r_.__value_.__l.__size_;
    v24 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  v26 = v34;
  if (*((_QWORD *)&v34 + 1) >= (unint64_t)v34 + v25)
  {
    if (!v25)
      goto LABEL_27;
    goto LABEL_26;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v33, v35, v34 + v25, 1);
  v26 = v34;
  if (v25)
  {
LABEL_26:
    memcpy((char *)v33 + v26, v24, v25);
    v26 = v34;
  }
LABEL_27:
  v27 = v26 + v25;
  *(_QWORD *)&v34 = v27;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v32.__r_.__value_.__l.__data_);
    v27 = v34;
  }
  if (v27 + 1 > *((_QWORD *)&v34 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v33, v35, v27 + 1, 1);
    v27 = v34;
  }
  *((_BYTE *)v33 + v27) = 59;
  v28 = v34;
  v29 = v34 + 1;
  *(_QWORD *)&v34 = v34 + 1;
  if ((unint64_t)(v28 + 2) > *((_QWORD *)&v34 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v33, v35, v28 + 2, 1);
    v29 = v34;
  }
  *((_BYTE *)v33 + v29) = 59;
  *(_QWORD *)&v34 = v34 + 1;
  SrcLocStr = llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, (unsigned __int8 *)v33, (llvm::Type *)v34, a8);
  if (v33 != v35)
    free(v33);
  return SrcLocStr;
}

uint64_t llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t ***a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  char v11;
  const void *v12;
  size_t v13;
  size_t v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  size_t *v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  size_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ****v29;
  uint64_t ***v30;
  int v31;
  int v32;
  uint64_t ***v33;
  size_t v34;

  v5 = *a2;
  if (*a2)
  {
    v7 = *(_QWORD *)(a1 + 336);
    v10 = *(const void **)(v7 + 168);
    v8 = v7 + 168;
    v9 = v10;
    v11 = *(_BYTE *)(v8 + 23);
    if (v11 >= 0)
      v12 = (const void *)v8;
    else
      v12 = v9;
    v13 = *(_QWORD *)(v8 + 8);
    if (v11 >= 0)
      v14 = v11 & 0x7F;
    else
      v14 = v13;
    v15 = *(unsigned __int8 **)(v5 - 8 * *(unsigned int *)(v5 + 8));
    v16 = *v15;
    v17 = v15;
    if (v16 == 15 || (v17 = *(unsigned __int8 **)&v15[-8 * *((unsigned int *)v15 + 2)]) != 0)
    {
      if (v17[56])
      {
        v18 = *(size_t **)(*((_QWORD *)v17 + 6) + 8);
        v19 = *v18;
        v12 = v18 + 3;
        v14 = v19;
      }
    }
    while ((v16 & 0xFE) == 0x12)
    {
      v15 = *(unsigned __int8 **)&v15[-8 * *((unsigned int *)v15 + 2) + 8];
      LOBYTE(v16) = *v15;
    }
    v20 = *(_QWORD *)&v15[-8 * *((unsigned int *)v15 + 2) + 16];
    if (v20)
    {
      v21 = *(_QWORD **)(v20 + 8);
      v24 = *v21;
      v22 = (char *)(v21 + 3);
      v23 = v24;
      if (!a4)
        return llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, v22, v23, v12, v14, *(_DWORD *)(v5 + 4), *(unsigned __int16 *)(v5 + 2), a3);
    }
    else
    {
      v23 = 0;
      v22 = 0;
      if (!a4)
        return llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, v22, v23, v12, v14, *(_DWORD *)(v5 + 4), *(unsigned __int16 *)(v5 + 2), a3);
    }
    if (!v23)
    {
      if ((*((_BYTE *)a4 + 23) & 0x10) == 0)
      {
        v23 = 0;
        v22 = &byte_1C871356D;
        return llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, v22, v23, v12, v14, *(_DWORD *)(v5 + 4), *(unsigned __int16 *)(v5 + 2), a3);
      }
      v25 = ***a4;
      v26 = *(_QWORD *)(v25 + 152);
      v27 = *(unsigned int *)(v25 + 168);
      if ((_DWORD)v27)
      {
        LODWORD(v28) = (v27 - 1) & ((a4 >> 4) ^ (a4 >> 9));
        v29 = (uint64_t ****)(v26 + 16 * v28);
        v30 = *v29;
        if (*v29 == a4)
        {
LABEL_27:
          v33 = v29[1];
          v34 = (size_t)*v33;
          v22 = (char *)(v33 + 2);
          v23 = v34;
          return llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, v22, v23, v12, v14, *(_DWORD *)(v5 + 4), *(unsigned __int16 *)(v5 + 2), a3);
        }
        v31 = 1;
        while (v30 != (uint64_t ***)-4096)
        {
          v32 = v28 + v31++;
          v28 = v32 & (v27 - 1);
          v30 = *(uint64_t ****)(v26 + 16 * v28);
          if (v30 == a4)
          {
            v29 = (uint64_t ****)(v26 + 16 * v28);
            goto LABEL_27;
          }
        }
      }
      v29 = (uint64_t ****)(v26 + 16 * v27);
      goto LABEL_27;
    }
    return llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, v22, v23, v12, v14, *(_DWORD *)(v5 + 4), *(unsigned __int16 *)(v5 + 2), a3);
  }
  return llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, ";unknown;unknown;0;0;;", (llvm::Type *)0x16, a3);
}

uint64_t llvm::OpenMPIRBuilder::emitBarrierImpl(uint64_t a1, _QWORD *a2, int a3, char a4, int a5)
{
  int v8;
  int v9;
  llvm::Value **v10;
  unsigned int v11;
  llvm::UndefValue *Ident;
  unsigned int v13;
  uint64_t v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t **v19;
  llvm::Constant **v20;
  uint64_t v21;
  _BYTE v23[32];
  __int16 v24;
  unsigned int v25;
  _BYTE v26[24];
  uint64_t v27;
  uint64_t v28[3];

  v28[2] = *MEMORY[0x1E0C80C00];
  if (a3 == 53)
    v8 = 192;
  else
    v8 = 64;
  if (a3 == 55)
    v8 = 320;
  if (a3 == 3)
    v9 = 32;
  else
    v9 = v8;
  v25 = 0;
  v10 = (llvm::Value **)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v25);
  v11 = v25;
  v28[0] = (uint64_t)llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v10, v25, v9, 0);
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v10, v11, 0, 0);
  v28[1] = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
  if ((a4 & 1) == 0 && (v13 = *(_DWORD *)(a1 + 8)) != 0 && (v14 = *(_QWORD *)a1 + 40 * v13, *(_BYTE *)(v14 - 4)))
  {
    v15 = *(_DWORD *)(v14 - 8) == 40;
    v16 = 2 * v15;
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(_QWORD *)(a1 + 336), v16);
  if (*(_BYTE *)(v17 + 16))
    v18 = 0;
  else
    v18 = v17;
  if (v18)
    v19 = *(uint64_t ***)(v18 + 24);
  else
    v19 = 0;
  v24 = 257;
  v20 = (llvm::Constant **)sub_1C4774778((uint64_t *)(a1 + 344), v19, v18, v28, 2, (uint64_t)v23, 0);
  if ((v15 & a5) == 1)
  {
    v27 = 0;
    llvm::OpenMPIRBuilder::emitCancelationCheckImpl(a1, v20, v21, (uint64_t)v26);
  }
  return *(_QWORD *)(a1 + 392);
}

uint64_t llvm::OpenMPIRBuilder::createParallel(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *), uint64_t *a6, uint64_t (*a7)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t a8, llvm::Value *a9, llvm *a10, unsigned __int8 *a11, unsigned int a12, char a13)
{
  uint64_t *v20;
  uint64_t v21;
  llvm::Value **v23;
  uint64_t ThreadID;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t **v33;
  uint64_t v34;
  llvm *v35;
  uint64_t *v36;
  llvm::PointerType *v37;
  llvm::PointerType *v38;
  llvm::Type *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *NullValue;
  char v44;
  void **v45;
  char *v46;
  unsigned __int8 **v47;
  unsigned __int8 ***v48;
  llvm::Value *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  uint64_t v56;
  uint64_t *v57;
  char v58;
  char v59;
  char *v60;
  char *v61;
  unsigned __int8 ***v62;
  llvm::Value *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unsigned __int8 ****v67;
  unsigned __int8 *v68;
  uint64_t v69;
  llvm::MDNode *v70;
  char *v71;
  char *v72;
  _QWORD *v73;
  uint64_t v74;
  char *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  _QWORD *v80;
  __int128 *v81;
  void (**v82)(__int128 *);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 *v86;
  llvm::PointerType *v87;
  unsigned __int8 **v88;
  uint64_t v89;
  char v90;
  char v91;
  char *v92;
  char *v93;
  _QWORD *v94;
  unsigned __int8 *v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  char *v100;
  char *v101;
  llvm::Value *v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  char v108;
  char v109;
  char *v110;
  char *v111;
  llvm::Value *v112;
  _QWORD *v113;
  unsigned __int8 *v114;
  uint64_t v115;
  int v116;
  uint64_t *v117;
  llvm::Value *v118;
  uint64_t v119;
  llvm::Value *v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  unsigned int v125;
  llvm::Value **v126;
  llvm::Value *v127;
  llvm::Value **v128;
  int v129;
  BOOL v130;
  unsigned int v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned __int8 **v137;
  int v138;
  unsigned __int8 *v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  uint64_t v142;
  uint64_t v143;
  unsigned __int8 **v144;
  int v145;
  unsigned __int8 *v146;
  unsigned __int8 *v147;
  unsigned __int8 *v148;
  uint64_t v149;
  uint64_t v150;
  unsigned __int8 **v151;
  int v152;
  unsigned __int8 *v153;
  unsigned __int8 *v154;
  unsigned __int8 *v155;
  uint64_t v156;
  llvm::ValueSymbolTable *v157;
  uint64_t *v158;
  llvm::MDNode *Impl;
  unint64_t v160;
  _BYTE *v161;
  uint64_t v162;
  _BYTE *v163;
  _BYTE *v164;
  unint64_t v165;
  char *v166;
  char *v167;
  __int128 v168;
  __int128 v169;
  void *v170;
  _BYTE *v171;
  unint64_t v172;
  int *v173;
  void (**v174)(int *);
  uint64_t *v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t ***v178;
  uint64_t v179;
  uint64_t i;
  uint64_t v181;
  unsigned int v182;
  BOOL v183;
  uint64_t v184;
  llvm::BasicBlock *v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned __int8 **v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  unsigned __int8 ***v196;
  unsigned __int8 ***v197;
  uint64_t v198;
  _QWORD *v199;
  void (**v200)(void);
  uint64_t v201;
  BOOL v202;
  uint64_t v203;
  unsigned __int8 **v204;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  llvm::Value *v209;
  uint64_t v210;
  BOOL v211;
  _QWORD *v212;
  unsigned int *v213;
  uint64_t *v214;
  uint64_t *v215;
  uint64_t *v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  char *v221;
  uint64_t *v222;
  uint64_t v223;
  llvm::PointerType *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unsigned __int8 ***v229;
  unsigned __int8 **v230;
  int v231;
  int v232;
  unsigned __int8 **v233;
  unsigned __int8 *v234;
  unsigned __int8 *v235;
  unsigned __int8 *v236;
  unsigned __int8 **v237;
  _QWORD *v238;
  _QWORD *v239;
  char v240;
  char v241;
  char *v242;
  char *v243;
  unsigned __int8 ***v244;
  llvm::Value *v245;
  unsigned __int8 *v246;
  unsigned __int8 ****v247;
  unsigned __int8 *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char v252;
  char v253;
  char *v254;
  char *v255;
  unsigned __int8 *v256;
  _QWORD *v257;
  unsigned __int8 *v258;
  uint64_t v259;
  uint64_t v260;
  unsigned __int8 *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unsigned __int8 ***v265;
  uint64_t *v266;
  unsigned __int8 **v267;
  unsigned __int8 *v268;
  unsigned __int8 *v269;
  unsigned __int8 *v270;
  unsigned __int8 *v271;
  unsigned __int8 *v272;
  uint64_t v273;
  uint64_t v274;
  unsigned __int8 **v275;
  int v276;
  unsigned __int8 *v277;
  unsigned __int8 *v278;
  unsigned __int8 *v279;
  uint64_t v280;
  uint64_t v281;
  unsigned __int8 **v282;
  int v283;
  unsigned __int8 *v284;
  unsigned __int8 *v285;
  unsigned __int8 **v286;
  unsigned __int8 **v287;
  unsigned __int8 *v288;
  unsigned __int8 **v289;
  uint64_t v290;
  void (**v291)(void);
  int v292;
  uint64_t v293;
  uint64_t v294;
  unsigned __int8 **v295;
  int v296;
  unsigned __int8 *v297;
  uint64_t v298;
  uint64_t v299;
  unsigned __int8 **v300;
  int v301;
  unsigned __int8 *v302;
  unsigned __int8 *v303;
  unsigned __int8 *v304;
  llvm::Value **v305;
  llvm::Value *v306;
  unsigned __int8 *v307;
  uint64_t v308;
  _QWORD *v309;
  char *v310;
  uint64_t *v311;
  llvm::Function *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t ***v316;
  uint64_t *v317;
  uint64_t *v318;
  uint64_t v319;
  _QWORD *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t (*v323)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, unsigned __int8 **, llvm::Value *, unsigned __int8 **);
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  llvm::UndefValue *Ident;
  uint64_t v328;
  unsigned __int8 **v329;
  unsigned __int8 **v330;
  unsigned int *v331;
  _QWORD *v332;
  uint64_t v333;
  _QWORD v334[2];
  int v335;
  void *__p;
  void *v337;
  uint64_t v338;
  uint64_t v339[2];
  int v340;
  void *v341;
  void *v342;
  uint64_t v343;
  _QWORD v344[2];
  int v345;
  void *v346;
  void *v347;
  uint64_t v348;
  _QWORD v349[2];
  int v350;
  void *v351;
  unsigned __int8 ***v352;
  uint64_t v353;
  llvm::BasicBlock *v354;
  __int128 v355;
  char v356;
  int v357[2];
  llvm::Instruction *v358;
  char *v359;
  unsigned int v360;
  uint64_t v361[4];
  __int16 v362;
  unsigned int *v363;
  __int128 v364;
  unsigned __int8 *v365;
  _QWORD v366[2];
  int v367;
  uint64_t *v368;
  uint64_t *v369;
  uint64_t *v370;
  unsigned __int8 *v371[2];
  const char *v372;
  __int16 v373;
  unsigned __int8 *v374;
  int v375[6];
  int *v376;
  __int16 v377;
  uint64_t v378[8];
  void *v379;
  uint64_t v380;
  void *v381;
  char v382;
  uint64_t v383;
  void *v384;
  void *v385;
  unsigned int v386[48];
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  uint64_t v391;
  void *v392;
  uint64_t v393;
  _BYTE v394[184];
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  uint64_t v399;
  void *v400;
  unint64_t v401;
  _BYTE v402[208];
  _QWORD v403[3];
  _QWORD *v404;
  _QWORD v405[3];
  int *v406;
  uint64_t *v407;
  uint64_t v408;
  uint64_t v409;
  _QWORD *v410;
  uint64_t v411;
  _BYTE v412[16];
  _QWORD *v413;
  uint64_t v414;
  _QWORD v415[7];

  v20 = (uint64_t *)a1;
  v415[4] = *MEMORY[0x1E0C80C00];
  if (!sub_1C62683AC(a1, a2))
    return *a2;
  v324 = a8;
  v360 = 0;
  v23 = (llvm::Value **)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr((uint64_t)v20, a2, &v360);
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent((uint64_t)v20, v23, v360, 0, 0);
  ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)v20, Ident);
  v25 = ThreadID;
  v322 = a3;
  if (a11)
  {
    *(_QWORD *)&v388 = 0;
    *(_QWORD *)&v387 = Ident;
    *((_QWORD *)&v387 + 1) = ThreadID;
    v26 = v20[265];
    LOWORD(v397) = 257;
    *(_QWORD *)&v388 = sub_1C4D8D514(v20 + 43, a11, v26, 0, (uint64_t)&v395);
    llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction((uint64_t)v20, v20[42], 9);
    v28 = v27;
    v29 = 0;
    if (*(_BYTE *)(v28 + 16))
      v30 = 0;
    else
      v30 = v28;
    if (v30)
      v29 = *(uint64_t ***)(v30 + 24);
    LOWORD(v397) = 257;
    sub_1C4774778(v20 + 43, v29, v30, (uint64_t *)&v387, 3, (uint64_t)&v395, 0);
  }
  if (a12 != 6)
  {
    *(_QWORD *)&v388 = 0;
    *(_QWORD *)&v387 = Ident;
    *((_QWORD *)&v387 + 1) = v25;
    *(_QWORD *)&v388 = llvm::ConstantInt::get((llvm::ConstantInt *)v20[265], a12, (const llvm::APInt *)1);
    llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction((uint64_t)v20, v20[42], 10);
    v32 = v31;
    v33 = 0;
    if (*(_BYTE *)(v32 + 16))
      v34 = 0;
    else
      v34 = v32;
    if (v34)
      v33 = *(uint64_t ***)(v34 + 24);
    LOWORD(v397) = 257;
    sub_1C4774778(v20 + 43, v33, v34, (uint64_t *)&v387, 3, (uint64_t)&v395, 0);
  }
  v35 = a10;
  v36 = v20 + 43;
  v321 = v20[49];
  v312 = *(llvm::Function **)(v321 + 56);
  v413 = v415;
  v414 = 0x400000000;
  v332 = v20 + 49;
  if (a3)
  {
    sub_1C4D8AE2C((uint64_t)(v20 + 43), a3, a4);
  }
  else
  {
    v20[49] = 0;
    v20[50] = 0;
  }
  v37 = (llvm::PointerType *)v20[265];
  *(_QWORD *)&v395 = "tid.addr";
  LOWORD(v397) = 259;
  v329 = sub_1C486A5CC(v20 + 43, v37, 0, (uint64_t)&v395);
  v38 = (llvm::PointerType *)v20[265];
  *(_QWORD *)&v395 = "zero.addr";
  LOWORD(v397) = 259;
  v330 = sub_1C486A5CC(v20 + 43, v38, 0, (uint64_t)&v395);
  v331 = (unsigned int *)(v20 + 43);
  v323 = a7;
  v333 = (uint64_t)v20;
  v325 = v25;
  if (a10)
  {
    NullValue = (uint64_t *)llvm::Constant::getNullValue((llvm::Constant *)v20[265], v39);
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v20[49] + 56) + 40) + 272, *NullValue);
    LOBYTE(v45) = v44;
    v46 = (char *)operator new(0x80uLL);
    v47 = (unsigned __int8 **)v46;
    *((_DWORD *)v46 + 21) = *((_DWORD *)v46 + 21) & 0x38000000 | 2;
    *(_QWORD *)v46 = 0;
    *((_QWORD *)v46 + 2) = 0;
    *((_QWORD *)v46 + 1) = 0;
    *((_QWORD *)v46 + 5) = 0;
    *((_QWORD *)v46 + 6) = 0;
    *((_QWORD *)v46 + 4) = 0;
    v48 = (unsigned __int8 ***)(v46 + 32);
    *((_QWORD *)v46 + 8) = **(_QWORD **)*NullValue + 1576;
    v49 = (llvm::Value *)(v46 + 64);
    *((_QWORD *)v46 + 3) = v46 + 64;
    *((_QWORD *)v46 + 7) = v46 + 64;
    *((_QWORD *)v46 + 9) = 0;
    v46[80] = 61;
    v46[81] = 0;
    *((_WORD *)v46 + 41) = 0;
    *((_DWORD *)v46 + 21) = 2;
    *(_OWORD *)(v46 + 88) = 0u;
    *(_OWORD *)(v46 + 104) = 0u;
    *((_DWORD *)v46 + 30) = 0;
    *(_QWORD *)v46 = NullValue;
    v52 = NullValue[1];
    v51 = NullValue + 1;
    v50 = v52;
    *((_QWORD *)v46 + 1) = v52;
    if (v52)
      *(_QWORD *)(v50 + 16) = v46 + 8;
    *((_QWORD *)v46 + 2) = v51;
    *v51 = v46;
    if (*((_QWORD *)v46 + 4))
      goto LABEL_442;
    goto LABEL_30;
  }
  v40 = v414;
  v41 = v321;
  if (v414 >= HIDWORD(v414))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v413, (uint64_t)v415, v414 + 1, 8);
    v40 = v414;
  }
  v413[v40] = v329;
  v42 = (v414 + 1);
  LODWORD(v414) = v42;
  if (v42 >= HIDWORD(v414))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v413, (uint64_t)v415, v42 + 1, 8);
    LODWORD(v42) = v414;
  }
  v413[v42] = v330;
  LODWORD(v414) = v414 + 1;
  while (1)
  {
    v71 = (char *)operator new(0x40uLL);
    *((_DWORD *)v71 + 5) &= 0x38000000u;
    *(_QWORD *)v71 = *(_QWORD *)v20[51] + 1576;
    *((_QWORD *)v71 + 1) = 0;
    v71[16] = 35;
    v72 = v71 + 24;
    *(_OWORD *)(v71 + 44) = 0u;
    *(_OWORD *)(v71 + 33) = 0u;
    *(_OWORD *)(v71 + 17) = 0u;
    *((_QWORD *)v71 + 5) = v41;
    *(_WORD *)(v41 + 18) &= ~0x8000u;
    if ((v71[23] & 0x10) != 0)
    {
      v156 = *(_QWORD *)(v41 + 56);
      if (v156)
      {
        v157 = *(llvm::ValueSymbolTable **)(v156 + 104);
        if (v157)
          llvm::ValueSymbolTable::reinsertValue(v157, (llvm::Value *)v71);
      }
    }
    v74 = *(_QWORD *)(v41 + 40);
    v73 = (_QWORD *)(v41 + 40);
    *((_QWORD *)v71 + 3) = v74;
    *((_QWORD *)v71 + 4) = v73;
    *(_QWORD *)(v74 + 8) = v72;
    v320 = v73;
    *v73 = v72;
    v358 = 0;
    v359 = v71;
    v75 = v71;
    if (v35)
    {
      llvm::SplitBlockAndInsertIfThenElse(v35, (llvm::Value *)v71, (llvm::Instruction *)&v359, &v358, 0, v70);
      v75 = v359;
    }
    v76 = (uint64_t *)*((_QWORD *)v75 + 5);
    *(_QWORD *)&v395 = "omp.par.entry";
    LOWORD(v397) = 259;
    v77 = (uint64_t *)llvm::BasicBlock::splitBasicBlock(v76, (uint64_t *)v75 + 3, (uint64_t)&v395, 0);
    *(_QWORD *)&v395 = "omp.par.region";
    LOWORD(v397) = 259;
    v78 = (uint64_t *)llvm::BasicBlock::splitBasicBlock(v77, (uint64_t *)v359 + 3, (uint64_t)&v395, 0);
    *(_QWORD *)&v395 = "omp.par.pre_finalize";
    LOWORD(v397) = 259;
    v317 = v78;
    v79 = (uint64_t *)llvm::BasicBlock::splitBasicBlock(v78, (uint64_t *)v359 + 3, (uint64_t)&v395, 0);
    *(_QWORD *)v357 = 0;
    *(_QWORD *)&v395 = "omp.par.exit";
    LOWORD(v397) = 259;
    v318 = v79;
    *(_QWORD *)v357 = llvm::BasicBlock::splitBasicBlock(v79, (uint64_t *)v359 + 3, (uint64_t)&v395, 0);
    v80 = operator new(0x20uLL);
    *v80 = &off_1E816D8C8;
    v80[1] = v20;
    v80[2] = v357;
    v80[3] = a9;
    *((_QWORD *)&v396 + 1) = v80;
    LODWORD(v397) = 40;
    BYTE4(v397) = a13;
    sub_1C6268990((uint64_t)v20, (unint64_t)&v395);
    v81 = (__int128 *)*((_QWORD *)&v396 + 1);
    if (*((__int128 **)&v396 + 1) == &v395)
    {
      v82 = (void (**)(__int128 *))(v395 + 32);
      v81 = &v395;
    }
    else
    {
      if (!*((_QWORD *)&v396 + 1))
        goto LABEL_52;
      v82 = (void (**)(__int128 *))(**((_QWORD **)&v396 + 1) + 40);
    }
    (*v82)(v81);
LABEL_52:
    v83 = 0;
    v84 = v77[5];
    if (v84)
      v85 = v84 - 24;
    else
      v85 = 0;
    if (*(unsigned __int8 *)(v85 + 16) - 29 >= 0xB)
      v85 = 0;
    v20[49] = *(_QWORD *)(v85 + 40);
    v20[50] = v85 + 24;
    v86 = *(unsigned __int8 **)(v85 + 48);
    *(_QWORD *)&v395 = v86;
    if (v86)
    {
      llvm::MetadataTracking::track((uint64_t)&v395, v86, 2);
      v83 = v395;
    }
    v311 = v77;
    sub_1C4774EF4((uint64_t)v36, 0, v83);
    if ((_QWORD)v395)
      llvm::MetadataTracking::untrack((uint64_t)&v395, (unsigned __int8 *)v395);
    v313 = v20[50];
    v314 = v20[49];
    v87 = (llvm::PointerType *)v20[265];
    *(_QWORD *)&v395 = "tid.addr.local";
    LOWORD(v397) = 259;
    v88 = sub_1C486A5CC(v36, v87, 0, (uint64_t)&v395);
    v89 = v20[265];
    *(_QWORD *)&v387 = "tid";
    LOWORD(v389) = 259;
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v20[49] + 56) + 40) + 272, v89);
    v91 = v90;
    v92 = (char *)operator new(0x60uLL);
    v93 = v92;
    *((_QWORD *)v92 + 2) = 0;
    *((_QWORD *)v92 + 3) = v92 + 32;
    v316 = (uint64_t ***)(v92 + 32);
    LOWORD(v397) = 257;
    *((_QWORD *)v92 + 4) = v89;
    *((_QWORD *)v92 + 5) = 0;
    *((_WORD *)v92 + 24) = 60;
    *((_DWORD *)v92 + 13) = 1;
    *(_OWORD *)(v92 + 56) = 0u;
    *(_OWORD *)(v92 + 72) = 0u;
    *((_DWORD *)v92 + 22) = 0;
    *(_QWORD *)v92 = v88;
    *((_QWORD *)v92 + 1) = 0;
    if (v88)
    {
      v94 = v88 + 1;
      v95 = v88[1];
      *((_QWORD *)v92 + 1) = v95;
      if (v95)
        *((_QWORD *)v95 + 2) = v92 + 8;
      *((_QWORD *)v92 + 2) = v94;
      *v94 = v92;
    }
    *((_WORD *)v92 + 25) = 2 * (v91 & 0x3F);
    v92[92] = 1;
    llvm::Value::setName(v316, (uint64_t)&v395);
    (*(void (**)(uint64_t, uint64_t ***, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v20[53] + 16))(v20[53], v316, &v387, v20[49], v20[50]);
    v96 = *((unsigned int *)v20 + 88);
    if ((_DWORD)v96)
    {
      v135 = v20[43];
      v136 = v135 + 16 * v96;
      v137 = (unsigned __int8 **)(v93 + 80);
      do
      {
        v138 = *(_DWORD *)v135;
        v139 = *(unsigned __int8 **)(v135 + 8);
        if (v139)
        {
          if (!v138)
          {
            *(_QWORD *)v375 = *(_QWORD *)(v135 + 8);
            llvm::MetadataTracking::track((uint64_t)v375, v139, 2);
            v140 = *v137;
            goto LABEL_112;
          }
        }
        else
        {
          v140 = *v137;
          if (!*v137 && (v93[55] & 0x20) == 0)
            goto LABEL_109;
          if (!v138)
          {
            *(_QWORD *)v375 = 0;
LABEL_112:
            if (v140)
              llvm::MetadataTracking::untrack((uint64_t)(v93 + 80), v140);
            v141 = *(unsigned __int8 **)v375;
            *v137 = *(unsigned __int8 **)v375;
            if (v141)
              llvm::MetadataTracking::retrack((uint64_t)v375, v141, (uint64_t)(v93 + 80));
            goto LABEL_109;
          }
        }
        llvm::Value::setMetadata((llvm::Value *)v316, *(_DWORD *)v135, (llvm::MDNode *)v139);
LABEL_109:
        v135 += 16;
      }
      while (v135 != v136);
    }
    v309 = v71 + 24;
    v97 = v20[265];
    *(_QWORD *)&v387 = "tid.addr.use";
    LOWORD(v389) = 259;
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v20[49] + 56) + 40) + 272, v97);
    v99 = v98;
    v100 = (char *)operator new(0x60uLL);
    v101 = v100;
    v102 = (llvm::Value *)(v100 + 32);
    *((_QWORD *)v100 + 2) = 0;
    *((_QWORD *)v100 + 3) = v100 + 32;
    LOWORD(v397) = 257;
    *((_QWORD *)v100 + 4) = v97;
    *((_QWORD *)v100 + 5) = 0;
    *((_WORD *)v100 + 24) = 60;
    *((_DWORD *)v100 + 13) = 1;
    *(_OWORD *)(v100 + 56) = 0u;
    *(_OWORD *)(v100 + 72) = 0u;
    *((_DWORD *)v100 + 22) = 0;
    *(_QWORD *)v100 = v329;
    *((_QWORD *)v100 + 1) = 0;
    if (v329)
    {
      v103 = v329 + 1;
      v104 = v329[1];
      *((_QWORD *)v100 + 1) = v104;
      if (v104)
        *((_QWORD *)v104 + 2) = v100 + 8;
      *((_QWORD *)v100 + 2) = v103;
      *v103 = v100;
    }
    v310 = v71;
    *((_WORD *)v100 + 25) = 2 * (v99 & 0x3F);
    v100[92] = 1;
    llvm::Value::setName((uint64_t ***)v100 + 4, (uint64_t)&v395);
    (*(void (**)(uint64_t, llvm::Value *, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v20[53] + 16))(v20[53], v102, &v387, v20[49], v20[50]);
    v105 = *((unsigned int *)v20 + 88);
    if ((_DWORD)v105)
    {
      v142 = v20[43];
      v143 = v142 + 16 * v105;
      v144 = (unsigned __int8 **)(v101 + 80);
      do
      {
        v145 = *(_DWORD *)v142;
        v146 = *(unsigned __int8 **)(v142 + 8);
        if (v146)
        {
          if (!v145)
          {
            *(_QWORD *)v375 = *(_QWORD *)(v142 + 8);
            llvm::MetadataTracking::track((uint64_t)v375, v146, 2);
            v147 = *v144;
            goto LABEL_127;
          }
        }
        else
        {
          v147 = *v144;
          if (!*v144 && (v101[55] & 0x20) == 0)
            goto LABEL_124;
          if (!v145)
          {
            *(_QWORD *)v375 = 0;
LABEL_127:
            if (v147)
              llvm::MetadataTracking::untrack((uint64_t)(v101 + 80), v147);
            v148 = *(unsigned __int8 **)v375;
            *v144 = *(unsigned __int8 **)v375;
            if (v148)
              llvm::MetadataTracking::retrack((uint64_t)v375, v148, (uint64_t)(v101 + 80));
            goto LABEL_124;
          }
        }
        llvm::Value::setMetadata(v102, *(_DWORD *)v142, (llvm::MDNode *)v146);
LABEL_124:
        v142 += 16;
      }
      while (v142 != v143);
    }
    v106 = v414;
    if (v414 >= HIDWORD(v414))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v413, (uint64_t)v415, v414 + 1, 8);
      v106 = v414;
    }
    v413[v106] = v102;
    LODWORD(v414) = v414 + 1;
    v107 = v20[265];
    *(_QWORD *)&v387 = "zero.addr.use";
    LOWORD(v389) = 259;
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v20[49] + 56) + 40) + 272, v107);
    v109 = v108;
    v110 = (char *)operator new(0x60uLL);
    v111 = v110;
    v112 = (llvm::Value *)(v110 + 32);
    *((_QWORD *)v110 + 2) = 0;
    *((_QWORD *)v110 + 3) = v110 + 32;
    LOWORD(v397) = 257;
    *((_QWORD *)v110 + 4) = v107;
    *((_QWORD *)v110 + 5) = 0;
    *((_WORD *)v110 + 24) = 60;
    *((_DWORD *)v110 + 13) = 1;
    *(_OWORD *)(v110 + 56) = 0u;
    *(_OWORD *)(v110 + 72) = 0u;
    *((_DWORD *)v110 + 22) = 0;
    *(_QWORD *)v110 = v330;
    *((_QWORD *)v110 + 1) = 0;
    if (v330)
    {
      v113 = v330 + 1;
      v114 = v330[1];
      *((_QWORD *)v110 + 1) = v114;
      if (v114)
        *((_QWORD *)v114 + 2) = v110 + 8;
      *((_QWORD *)v110 + 2) = v113;
      *v113 = v110;
    }
    *((_WORD *)v110 + 25) = 2 * (v109 & 0x3F);
    v110[92] = 1;
    llvm::Value::setName((uint64_t ***)v110 + 4, (uint64_t)&v395);
    (*(void (**)(uint64_t, llvm::Value *, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v20[53] + 16))(v20[53], v112, &v387, v20[49], v20[50]);
    v115 = *((unsigned int *)v20 + 88);
    if ((_DWORD)v115)
    {
      v149 = v20[43];
      v150 = v149 + 16 * v115;
      v151 = (unsigned __int8 **)(v111 + 80);
      do
      {
        v152 = *(_DWORD *)v149;
        v153 = *(unsigned __int8 **)(v149 + 8);
        if (v153)
        {
          if (!v152)
          {
            *(_QWORD *)v375 = *(_QWORD *)(v149 + 8);
            llvm::MetadataTracking::track((uint64_t)v375, v153, 2);
            v154 = *v151;
            goto LABEL_142;
          }
        }
        else
        {
          v154 = *v151;
          if (!*v151 && (v111[55] & 0x20) == 0)
            goto LABEL_139;
          if (!v152)
          {
            *(_QWORD *)v375 = 0;
LABEL_142:
            if (v154)
              llvm::MetadataTracking::untrack((uint64_t)(v111 + 80), v154);
            v155 = *(unsigned __int8 **)v375;
            *v151 = *(unsigned __int8 **)v375;
            if (v155)
              llvm::MetadataTracking::retrack((uint64_t)v375, v155, (uint64_t)(v111 + 80));
            goto LABEL_139;
          }
        }
        llvm::Value::setMetadata(v112, *(_DWORD *)v149, (llvm::MDNode *)v153);
LABEL_139:
        v149 += 16;
      }
      while (v149 != v150);
    }
    v116 = v414;
    if (v414 >= HIDWORD(v414))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v413, (uint64_t)v415, v414 + 1, 8);
      v116 = v414;
    }
    v413[v116] = v112;
    LODWORD(v414) = v414 + 1;
    v117 = a6;
    a6 = v318;
    ((void (*)(uint64_t *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *))a5)(v117, v314, v313, v317, v317[6], v318);
    llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction((uint64_t)v20, v20[42], 6);
    v119 = 0;
    if (*((_BYTE *)v118 + 16))
      v120 = 0;
    else
      v120 = v118;
    if (!v120)
      goto LABEL_151;
    v119 = *((_QWORD *)v120 + 3);
    if (*((_BYTE *)v120 + 16))
      goto LABEL_151;
    if ((*((_BYTE *)v120 + 23) & 0x20) == 0)
      goto LABEL_150;
    v121 = ***(_QWORD ***)v120;
    *(_QWORD *)&v395 = v120;
    v122 = *(_DWORD *)(v121 + 2496);
    if (!v122)
    {
      v305 = 0;
LABEL_437:
      v126 = (llvm::Value **)sub_1C541AB24(v121 + 2480, (uint64_t)&v395, (uint64_t *)&v395, v305);
      v306 = (llvm::Value *)v395;
      v126[3] = 0;
      v126[4] = 0;
      *v126 = v306;
      v126[1] = (llvm::Value *)(v126 + 3);
      v126[2] = (llvm::Value *)0x100000000;
      goto LABEL_96;
    }
    v123 = *(_QWORD *)(v121 + 2480);
    v124 = v122 - 1;
    v125 = v124 & ((v120 >> 4) ^ (v120 >> 9));
    v126 = (llvm::Value **)(v123 + 40 * v125);
    v127 = *v126;
    if (*v126 != v120)
    {
      v128 = 0;
      v129 = 1;
      while (v127 != (llvm::Value *)-4096)
      {
        if (v128)
          v130 = 0;
        else
          v130 = v127 == (llvm::Value *)-8192;
        if (v130)
          v128 = v126;
        v131 = v125 + v129++;
        v125 = v131 & v124;
        v126 = (llvm::Value **)(v123 + 40 * v125);
        v127 = *v126;
        if (*v126 == v120)
          goto LABEL_96;
      }
      if (v128)
        v305 = v128;
      else
        v305 = v126;
      goto LABEL_437;
    }
LABEL_96:
    v132 = *((unsigned int *)v126 + 4);
    if (!(_DWORD)v132)
      goto LABEL_150;
    v133 = (_QWORD *)((char *)v126[1] + 8);
    v134 = 16 * v132;
    while (*((_DWORD *)v133 - 2) != 26)
    {
      v133 += 2;
      v134 -= 16;
      if (!v134)
        goto LABEL_150;
    }
    if (!*v133)
    {
LABEL_150:
      *(_QWORD *)&v395 = **(_QWORD **)v120;
      v158 = (uint64_t *)v395;
      *(_QWORD *)v375 = -1;
      *(_QWORD *)&v387 = llvm::MDBuilder::createCallbackEncoding((llvm::Type **)&v395, (llvm::Type *)2, v375, 2, 1u);
      Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(v158, &v387, 1, 0, 1);
      llvm::Value::addMetadata(v120, 26, Impl);
    }
LABEL_151:
    v20 = v405;
    v406 = 0;
    v410 = v412;
    v411 = 0x200000000;
    *(_QWORD *)&v387 = v333;
    *((_QWORD *)&v387 + 1) = Ident;
    *(_QWORD *)&v388 = v119;
    *((_QWORD *)&v388 + 1) = v120;
    *(_QWORD *)&v389 = *(_QWORD *)v357;
    *((_QWORD *)&v389 + 1) = v316;
    *(_QWORD *)&v390 = v88;
    *((_QWORD *)&v390 + 1) = v358;
    a5 = v394;
    v391 = v325;
    v392 = v394;
    v393 = 0x400000000;
    v160 = v414;
    if (!(_DWORD)v414)
    {
      v397 = v389;
      v398 = v390;
      v395 = v387;
      v396 = v388;
      v35 = (llvm *)v402;
      v399 = v391;
      v400 = v402;
      v401 = 0x400000000;
      goto LABEL_160;
    }
    v161 = v394;
    v162 = v414;
    if (v414 < 5)
      goto LABEL_154;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v392, (uint64_t)v394, v414, 8);
    v162 = v414;
    if ((_DWORD)v414)
    {
      v161 = v392;
LABEL_154:
      memcpy(v161, v413, 8 * v162);
    }
    LODWORD(v393) = v160;
    v397 = v389;
    v398 = v390;
    v395 = v387;
    v396 = v388;
    v35 = (llvm *)v402;
    v399 = v391;
    v400 = v402;
    v401 = 0x400000000;
    if (v392 != v394)
    {
      v400 = v392;
      v401 = __PAIR64__(HIDWORD(v393), v160);
      v392 = v394;
      HIDWORD(v393) = 0;
      goto LABEL_159;
    }
    v163 = v402;
    v164 = v394;
    v165 = v160;
    if (v160 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v400, (uint64_t)v402, v160, 8);
      v165 = v393;
      if (!(_DWORD)v393)
        goto LABEL_158;
      v164 = v392;
      v163 = v400;
    }
    memcpy(v163, v164, 8 * v165);
LABEL_158:
    LODWORD(v401) = v160;
LABEL_159:
    LODWORD(v393) = 0;
LABEL_160:
    v376 = 0;
    v166 = (char *)operator new(0x80uLL);
    v167 = v166;
    v168 = v395;
    *(_OWORD *)(v166 + 24) = v396;
    v169 = v398;
    *(_OWORD *)(v166 + 40) = v397;
    *(_OWORD *)(v166 + 56) = v169;
    *(_QWORD *)v166 = &off_1E816D910;
    *((_QWORD *)v166 + 9) = v399;
    *(_OWORD *)(v166 + 8) = v168;
    v170 = v166 + 96;
    *((_QWORD *)v166 + 10) = v166 + 96;
    v45 = (void **)(v166 + 80);
    *((_QWORD *)v166 + 11) = 0x400000000;
    if (!(_DWORD)v160)
      goto LABEL_167;
    if (v400 != v402)
    {
      *((_QWORD *)v166 + 10) = v400;
      v292 = HIDWORD(v401);
      *((_DWORD *)v166 + 22) = v160;
      *((_DWORD *)v166 + 23) = v292;
      v400 = v402;
      HIDWORD(v401) = 0;
      goto LABEL_166;
    }
    if (v160 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v166 + 80), (uint64_t)v170, v160, 8);
      v172 = v401;
      if (!(_DWORD)v401)
        goto LABEL_165;
      v171 = v400;
      v170 = *v45;
    }
    else
    {
      v171 = v402;
      v172 = v160;
    }
    memcpy(v170, v171, 8 * v172);
LABEL_165:
    *((_DWORD *)v167 + 22) = v160;
LABEL_166:
    LODWORD(v401) = 0;
LABEL_167:
    v376 = (int *)v167;
    v173 = v406;
    if (v406 == (int *)v405)
    {
      (*(void (**)(_QWORD *, int *))(v405[0] + 24))(v405, v375);
      (*(void (**)(int *))(*(_QWORD *)v406 + 32))(v406);
      v406 = v376;
      v376 = v375;
      v47 = v330;
      v49 = a9;
LABEL_170:
      v174 = (void (**)(int *))(*(_QWORD *)v375 + 32);
      v173 = v375;
LABEL_171:
      (*v174)(v173);
      goto LABEL_172;
    }
    v376 = v406;
    v406 = (int *)v167;
    v47 = v330;
    v49 = a9;
    if (v173 == v375)
      goto LABEL_170;
    if (v173)
    {
      v174 = (void (**)(int *))(*(_QWORD *)v173 + 40);
      goto LABEL_171;
    }
LABEL_172:
    if (v400 != v402)
      free(v400);
    if (v392 != v394)
      free(v392);
    sub_1C6268A28((uint64_t)v403, (uint64_t *)v333);
    v175 = (uint64_t *)v318[5];
    if (v175 == v318 + 5)
    {
      v176 = 0;
    }
    else
    {
      if (v175)
        v176 = v175 - 3;
      else
        v176 = 0;
      if (*((unsigned __int8 *)v176 + 16) - 29 >= 0xB)
        v176 = 0;
    }
    *(_QWORD *)&v395 = v318;
    *((_QWORD *)&v395 + 1) = v176 + 3;
    v177 = *((_QWORD *)v49 + 3);
    if (v177)
      break;
    sub_1C485C2F0();
LABEL_442:
    *(_QWORD *)v47[6] = v47[5];
    v307 = v47[5];
    if (v307)
      *((_QWORD *)v307 + 2) = v47[6];
LABEL_30:
    *v48 = v329;
    if (v329)
    {
      v53 = (unsigned __int8 *)(v329 + 1);
      v54 = v329[1];
      v47[5] = v54;
      if (v54)
        *((_QWORD *)v54 + 2) = v47 + 5;
      v47[6] = v53;
      *(_QWORD *)v53 = v48;
    }
    *((_WORD *)v47 + 41) = 2 * (v45 & 0x3F);
    *((_BYTE *)v47 + 124) = 1;
    LOWORD(v397) = 257;
    (*(void (**)(uint64_t, llvm::Value *, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v20[53] + 16))(v20[53], v49, &v395, v20[49], v20[50]);
    v56 = *((unsigned int *)v20 + 88);
    if ((_DWORD)v56)
    {
      v293 = v20[43];
      v294 = v293 + 16 * v56;
      v295 = v47 + 14;
      do
      {
        v296 = *(_DWORD *)v293;
        v297 = *(unsigned __int8 **)(v293 + 8);
        if (v297)
        {
          if (!v296)
          {
            *(_QWORD *)&v387 = *(_QWORD *)(v293 + 8);
            llvm::MetadataTracking::track((uint64_t)&v387, v297, 2);
            v55 = *v295;
            goto LABEL_413;
          }
        }
        else
        {
          v55 = *v295;
          if (!*v295 && (*((_BYTE *)v47 + 87) & 0x20) == 0)
            goto LABEL_410;
          if (!v296)
          {
            *(_QWORD *)&v387 = 0;
LABEL_413:
            if (v55)
              llvm::MetadataTracking::untrack((uint64_t)(v47 + 14), v55);
            v55 = (unsigned __int8 *)v387;
            *v295 = (unsigned __int8 *)v387;
            if (v55)
              llvm::MetadataTracking::retrack((uint64_t)&v387, v55, (uint64_t)(v47 + 14));
            v20 = (uint64_t *)v333;
            goto LABEL_410;
          }
        }
        llvm::Value::setMetadata(v49, *(_DWORD *)v293, (llvm::MDNode *)v297);
LABEL_410:
        v293 += 16;
      }
      while (v293 != v294);
    }
    v57 = (uint64_t *)llvm::Constant::getNullValue((llvm::Constant *)v20[265], (llvm::Type *)v55);
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v20[49] + 56) + 40) + 272, *v57);
    v59 = v58;
    v60 = (char *)operator new(0x80uLL);
    v61 = v60;
    *((_DWORD *)v60 + 21) = *((_DWORD *)v60 + 21) & 0x38000000 | 2;
    *(_QWORD *)v60 = 0;
    *((_QWORD *)v60 + 2) = 0;
    *((_QWORD *)v60 + 1) = 0;
    *((_QWORD *)v60 + 5) = 0;
    *((_QWORD *)v60 + 6) = 0;
    *((_QWORD *)v60 + 4) = 0;
    v62 = (unsigned __int8 ***)(v60 + 32);
    *((_QWORD *)v60 + 8) = **(_QWORD **)*v57 + 1576;
    v63 = (llvm::Value *)(v60 + 64);
    *((_QWORD *)v60 + 3) = v60 + 64;
    *((_QWORD *)v60 + 7) = v60 + 64;
    *((_QWORD *)v60 + 9) = 0;
    v60[80] = 61;
    v60[81] = 0;
    *((_WORD *)v60 + 41) = 0;
    *((_DWORD *)v60 + 21) = 2;
    *(_OWORD *)(v60 + 88) = 0u;
    *(_OWORD *)(v60 + 104) = 0u;
    *((_DWORD *)v60 + 30) = 0;
    *(_QWORD *)v60 = v57;
    v66 = v57[1];
    v65 = v57 + 1;
    v64 = v66;
    *((_QWORD *)v60 + 1) = v66;
    if (v66)
      *(_QWORD *)(v64 + 16) = v60 + 8;
    *((_QWORD *)v60 + 2) = v65;
    *v65 = v60;
    if (*((_QWORD *)v60 + 4))
    {
      **((_QWORD **)v60 + 6) = *((_QWORD *)v60 + 5);
      v308 = *((_QWORD *)v60 + 5);
      if (v308)
        *(_QWORD *)(v308 + 16) = *((_QWORD *)v60 + 6);
    }
    *v62 = v330;
    if (v330)
    {
      v67 = (unsigned __int8 ****)(v330 + 1);
      v68 = v330[1];
      *((_QWORD *)v60 + 5) = v68;
      if (v68)
        *((_QWORD *)v68 + 2) = v60 + 40;
      *((_QWORD *)v60 + 6) = v67;
      *v67 = v62;
    }
    *((_WORD *)v60 + 41) = 2 * (v59 & 0x3F);
    v60[124] = 1;
    LOWORD(v397) = 257;
    (*(void (**)(uint64_t, llvm::Value *, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v20[53] + 16))(v20[53], v63, &v395, v20[49], v20[50]);
    v69 = *((unsigned int *)v20 + 88);
    if ((_DWORD)v69)
    {
      v298 = v20[43];
      v299 = v298 + 16 * v69;
      v300 = (unsigned __int8 **)(v61 + 112);
      do
      {
        v301 = *(_DWORD *)v298;
        v302 = *(unsigned __int8 **)(v298 + 8);
        if (v302)
        {
          if (!v301)
          {
            *(_QWORD *)&v387 = *(_QWORD *)(v298 + 8);
            llvm::MetadataTracking::track((uint64_t)&v387, v302, 2);
            v303 = *v300;
            goto LABEL_429;
          }
        }
        else
        {
          v303 = *v300;
          if (!*v300 && (v61[87] & 0x20) == 0)
            goto LABEL_426;
          if (!v301)
          {
            *(_QWORD *)&v387 = 0;
LABEL_429:
            if (v303)
              llvm::MetadataTracking::untrack((uint64_t)(v61 + 112), v303);
            v304 = (unsigned __int8 *)v387;
            *v300 = (unsigned __int8 *)v387;
            if (v304)
              llvm::MetadataTracking::retrack((uint64_t)&v387, v304, (uint64_t)(v61 + 112));
            v20 = (uint64_t *)v333;
            goto LABEL_426;
          }
        }
        llvm::Value::setMetadata(v63, *(_DWORD *)v298, (llvm::MDNode *)v302);
LABEL_426:
        v298 += 16;
      }
      while (v298 != v299);
    }
    v36 = (uint64_t *)v331;
    v41 = v321;
  }
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v177 + 48))(v177, &v395);
  v407 = v311;
  v408 = *(_QWORD *)v357;
  v409 = v322;
  *(_QWORD *)&v395 = &v397;
  *((_QWORD *)&v395 + 1) = &v397;
  *(_QWORD *)&v396 = 32;
  DWORD2(v396) = 0;
  *(_QWORD *)&v387 = &v388;
  *((_QWORD *)&v387 + 1) = 0x2000000000;
  llvm::OpenMPIRBuilder::OutlineInfo::collectBlocks((uint64_t)v405, (llvm::SmallPtrSetImplBase *)&v395, (uint64_t)&v387);
  v178 = *(uint64_t ****)v357;
  v179 = *(_QWORD *)v357 + 40;
  for (i = *(_QWORD *)(*(_QWORD *)v357 + 48); i != v179; i = *(_QWORD *)(i + 8))
  {
    v181 = i - 24;
    if (!i)
      v181 = 0;
    if (*(_BYTE *)(v181 + 16) != 83)
    {
      v182 = *(unsigned __int8 *)(i - 8) - 38;
      v183 = v182 > 0x38;
      v184 = (1 << v182) & 0x100060000000001;
      if (v183 || v184 == 0)
        v179 = i;
      else
        v179 = *(_QWORD *)(i + 8);
      break;
    }
  }
  if (v179)
    v186 = (llvm::BasicBlock *)(v179 - 24);
  else
    v186 = 0;
  v377 = 257;
  *(_QWORD *)v357 = sub_1C5EBD70C(*(llvm **)v357, v186, 0, 0, 0, 0, (llvm::Twine *)v375, 0);
  *(_QWORD *)v375 = "omp.par.outlined.exit";
  v377 = 259;
  llvm::Value::setName(v178, (uint64_t)v375);
  v187 = DWORD2(v387);
  if (DWORD2(v387) >= HIDWORD(v387))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v387, (uint64_t)&v388, DWORD2(v387) + 1, 8);
    v187 = DWORD2(v387);
  }
  *(_QWORD *)(v387 + 8 * v187) = v178;
  ++DWORD2(v387);
  llvm::CodeExtractorAnalysisCache::CodeExtractorAnalysisCache((llvm::CodeExtractorAnalysisCache *)v386, v312);
  v356 = 8;
  strcpy((char *)&v355, ".omp_par");
  llvm::CodeExtractor::CodeExtractor((uint64_t)v375, (uint64_t *)v387, DWORD2(v387), 0, 0, 0, 0, 0, 1u, 1, v322, &v355);
  v353 = 0;
  v354 = 0;
  v349[0] = 0;
  v349[1] = 0;
  v350 = 0;
  v351 = 0;
  v352 = 0;
  v344[0] = 0;
  v344[1] = 0;
  v345 = 0;
  v347 = 0;
  v348 = 0;
  v346 = 0;
  v339[0] = 0;
  v339[1] = 0;
  v340 = 0;
  v342 = 0;
  v343 = 0;
  v341 = 0;
  v334[0] = 0;
  v334[1] = 0;
  v335 = 0;
  v337 = 0;
  v338 = 0;
  __p = 0;
  llvm::CodeExtractor::findAllocas((uint64_t)v375, v386, v339, v334, &v354);
  llvm::CodeExtractor::findInputsOutputs((uint64_t)v375, v349, v344, v339);
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(v333, *(_QWORD *)(v333 + 336), 4);
  if (*(_BYTE *)(v188 + 16))
    v189 = 0;
  else
    v189 = v188;
  v319 = v189;
  v190 = *(_QWORD *)(v322 + 48);
  if (v190 == v322 + 40)
  {
    v315 = v322 + 40;
    v191 = v329;
  }
  else
  {
    v191 = v329;
    while (1)
    {
      v192 = v190 - 24;
      if (!v190)
        v192 = 0;
      if (*(_BYTE *)(v192 + 16) != 83)
        break;
      v190 = *(_QWORD *)(v190 + 8);
      if (v190 == v322 + 40)
      {
        v315 = v322 + 40;
        goto LABEL_217;
      }
    }
    v193 = *(unsigned __int8 *)(v190 - 8) - 38;
    v183 = v193 > 0x38;
    v194 = (1 << v193) & 0x100060000000001;
    if (!v183 && v194 != 0)
      v190 = *(_QWORD *)(v190 + 8);
    v315 = v190;
  }
LABEL_217:
  v196 = (unsigned __int8 ***)v351;
  v197 = v352;
  if (v351 != v352)
  {
    v201 = *((_QWORD *)v111 + 8);
    v328 = *((_QWORD *)v111 + 9);
    if (v201)
      v202 = v201 == v328 + 40;
    else
      v202 = 1;
    if (v202)
      v203 = 0;
    else
      v203 = v201 - 24;
    v326 = v203 + 24;
    while (1)
    {
      v204 = *v196;
      if (v191 == *v196 || v47 == v204)
      {
        v206 = v411;
        if (v411 >= (unint64_t)HIDWORD(v411))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v410, (uint64_t)v412, v411 + 1, 8);
          v206 = v411;
        }
        v410[v206] = v204;
        LODWORD(v411) = v411 + 1;
        goto LABEL_254;
      }
      v367 = 0;
      v369 = 0;
      v370 = 0;
      v368 = 0;
      v366[1] = 0;
      v207 = v204 + 1;
      v208 = (uint64_t)v204[1];
      for (v366[0] = 0; v208; v208 = *(_QWORD *)(v208 + 8))
      {
        v210 = *(_QWORD *)(v208 + 24);
        if (v210)
          v211 = *(unsigned __int8 *)(v210 + 16) >= 0x1Cu;
        else
          v211 = 0;
        if (v211)
        {
          v212 = sub_1C477672C((uint64_t)&v395, *(_QWORD *)(v210 + 40));
          v213 = *((_QWORD *)&v395 + 1) == (_QWORD)v395 ? (unsigned int *)((char *)&v396 + 4) : (unsigned int *)&v396;
          if (v212 != (_QWORD *)(*((_QWORD *)&v395 + 1) + 8 * *v213))
          {
            v361[0] = v208;
            sub_1C61B7564((uint64_t)v371, (uint64_t)v366, v361);
            if ((_BYTE)v372)
            {
              v214 = v369;
              if (v369 >= v370)
              {
                v216 = v368;
                v217 = v369 - v368;
                v218 = v217 + 1;
                if ((unint64_t)(v217 + 1) >> 61)
                  abort();
                v219 = (char *)v370 - (char *)v368;
                if (((char *)v370 - (char *)v368) >> 2 > v218)
                  v218 = v219 >> 2;
                if ((unint64_t)v219 >= 0x7FFFFFFFFFFFFFF8)
                  v220 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v220 = v218;
                if (v220)
                {
                  if (v220 >> 61)
                    sub_1C4764EE4();
                  v221 = (char *)operator new(8 * v220);
                }
                else
                {
                  v221 = 0;
                }
                v222 = (uint64_t *)&v221[8 * v217];
                *v222 = v208;
                v215 = v222 + 1;
                if (v214 != v216)
                {
                  do
                  {
                    v223 = *--v214;
                    *--v222 = v223;
                  }
                  while (v214 != v216);
                  v214 = v368;
                }
                v368 = v222;
                v369 = v215;
                v370 = (uint64_t *)&v221[8 * v220];
                if (v214)
                  operator delete(v214);
              }
              else
              {
                *v369 = v208;
                v215 = v214 + 1;
              }
              v369 = v215;
            }
          }
        }
      }
      v209 = (llvm::Value *)v204;
      if ((*v204)[8] != 15)
        break;
LABEL_327:
      v371[0] = 0;
      v191 = v329;
      if (*((_BYTE *)v204 + 16) == 84)
      {
        v262 = (uint64_t)*(v204 - 4);
        if (!v262 || *(_BYTE *)(v262 + 16) || *(unsigned __int8 **)(v262 + 24) != v204[9])
          v262 = 0;
        if (v262 == v319)
        {
          v371[0] = (unsigned __int8 *)v316;
          v47 = v330;
LABEL_339:
          v265 = (unsigned __int8 ***)v368;
          v266 = v369;
          while (v265 != (unsigned __int8 ***)v266)
          {
            v267 = *v265;
            v268 = v371[0];
            if (**v265)
            {
              *(_QWORD *)v267[2] = v267[1];
              v269 = v267[1];
              if (v269)
                *((_QWORD *)v269 + 2) = v267[2];
            }
            *v267 = v268;
            if (v268)
            {
              v272 = (unsigned __int8 *)*((_QWORD *)v268 + 1);
              v270 = v268 + 8;
              v271 = v272;
              v267[1] = v272;
              if (v272)
                *((_QWORD *)v271 + 2) = v267 + 1;
              v267[2] = v270;
              *(_QWORD *)v270 = v267;
            }
            ++v265;
          }
          goto LABEL_338;
        }
      }
      v263 = v323(v324, v328, v326, *(_QWORD *)(v333 + 392), *(_QWORD *)(v333 + 400), v204, v209, v371);
      if (v263)
      {
        sub_1C4D8AE2C((uint64_t)v331, v263, v264);
      }
      else
      {
        *v332 = 0;
        v332[1] = 0;
      }
      v47 = v330;
      if ((unsigned __int8 **)v371[0] != v204)
        goto LABEL_339;
LABEL_338:
      sub_1C6176BF8(v366);
LABEL_254:
      if (++v196 == v197)
        goto LABEL_218;
    }
    v363 = v331;
    v364 = *(_OWORD *)v332;
    llvm::IRBuilderBase::getCurrentDebugLocation(v331, &v365);
    if (v322)
    {
      sub_1C4D8AE2C((uint64_t)v331, v322, v315);
    }
    else
    {
      *v332 = 0;
      v332[1] = 0;
    }
    v224 = (llvm::PointerType *)*v204;
    if ((*((_BYTE *)v204 + 23) & 0x10) == 0)
    {
      v234 = 0;
      v235 = (unsigned __int8 *)&byte_1C871356D;
      goto LABEL_300;
    }
    v225 = **(_QWORD **)v224;
    v226 = *(_QWORD *)(v225 + 152);
    v227 = *(unsigned int *)(v225 + 168);
    if ((_DWORD)v227)
    {
      LODWORD(v228) = (v227 - 1) & ((v204 >> 4) ^ (v204 >> 9));
      v229 = (unsigned __int8 ***)(v226 + 16 * v228);
      v230 = *v229;
      if (*v229 == v204)
      {
LABEL_299:
        v233 = v229[1];
        v236 = *v233;
        v235 = (unsigned __int8 *)(v233 + 2);
        v234 = v236;
LABEL_300:
        v373 = 773;
        v371[0] = v235;
        v371[1] = v234;
        v372 = ".reloaded";
        v237 = sub_1C486A5CC((uint64_t *)v331, v224, 0, (uint64_t)v371);
        v238 = 0;
        v239 = (_QWORD *)*v320;
        if ((_QWORD *)*v320 != v320)
        {
          v238 = v239 - 3;
          if (!v239)
            v238 = 0;
          if (*((unsigned __int8 *)v238 + 16) - 29 >= 0xB)
            v238 = 0;
        }
        sub_1C4D8AE2C((uint64_t)v331, v321, (uint64_t)(v238 + 3));
        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*v332 + 56) + 40) + 272, (uint64_t)*v204);
        v241 = v240;
        v242 = (char *)operator new(0x80uLL);
        v243 = v242;
        *((_DWORD *)v242 + 21) = *((_DWORD *)v242 + 21) & 0x38000000 | 2;
        *(_QWORD *)v242 = 0;
        *((_QWORD *)v242 + 2) = 0;
        *((_QWORD *)v242 + 1) = 0;
        *((_QWORD *)v242 + 5) = 0;
        *((_QWORD *)v242 + 6) = 0;
        *((_QWORD *)v242 + 4) = 0;
        v244 = (unsigned __int8 ***)(v242 + 32);
        *((_QWORD *)v242 + 8) = **(_QWORD **)*v204 + 1576;
        v245 = (llvm::Value *)(v242 + 64);
        *((_QWORD *)v242 + 3) = v242 + 64;
        *((_QWORD *)v242 + 7) = v242 + 64;
        *((_QWORD *)v242 + 9) = 0;
        v242[80] = 61;
        v242[81] = 0;
        *((_WORD *)v242 + 41) = 0;
        *((_DWORD *)v242 + 21) = 2;
        *(_OWORD *)(v242 + 88) = 0u;
        *(_OWORD *)(v242 + 104) = 0u;
        *((_DWORD *)v242 + 30) = 0;
        *(_QWORD *)v242 = v204;
        v246 = v204[1];
        *((_QWORD *)v242 + 1) = v246;
        if (v246)
          *((_QWORD *)v246 + 2) = v242 + 8;
        *((_QWORD *)v242 + 2) = v207;
        *v207 = v242;
        if (*((_QWORD *)v242 + 4))
        {
          **((_QWORD **)v242 + 6) = *((_QWORD *)v242 + 5);
          v290 = *((_QWORD *)v242 + 5);
          if (v290)
            *(_QWORD *)(v290 + 16) = *((_QWORD *)v242 + 6);
        }
        *v244 = v237;
        if (v237)
        {
          v247 = (unsigned __int8 ****)(v237 + 1);
          v248 = v237[1];
          *((_QWORD *)v242 + 5) = v248;
          if (v248)
            *((_QWORD *)v248 + 2) = v242 + 40;
          *((_QWORD *)v242 + 6) = v247;
          *v247 = v244;
        }
        *((_WORD *)v242 + 41) = 2 * (v241 & 0x3F);
        v242[124] = 1;
        v373 = 257;
        (*(void (**)(_QWORD, llvm::Value *, unsigned __int8 **, _QWORD, _QWORD))(**(_QWORD **)(v333 + 424)
                                                                                          + 16))(*(_QWORD *)(v333 + 424), v245, v371, *(_QWORD *)(v333 + 392), *(_QWORD *)(v333 + 400));
        v249 = *(unsigned int *)(v333 + 352);
        if (!(_DWORD)v249)
        {
LABEL_313:
          sub_1C4D8AE2C((uint64_t)v331, v328, v326);
          v250 = *v332;
          v251 = (uint64_t)*v204;
          v362 = 257;
          llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v250 + 56) + 40) + 272, v251);
          v253 = v252;
          v254 = (char *)operator new(0x60uLL);
          v255 = v254;
          v209 = (llvm::Value *)(v254 + 32);
          *((_QWORD *)v254 + 2) = 0;
          *((_QWORD *)v254 + 3) = v254 + 32;
          v373 = 257;
          *((_QWORD *)v254 + 4) = v251;
          *((_QWORD *)v254 + 5) = 0;
          *((_WORD *)v254 + 24) = 60;
          *((_DWORD *)v254 + 13) = 1;
          *(_OWORD *)(v254 + 56) = 0u;
          *(_OWORD *)(v254 + 72) = 0u;
          *((_DWORD *)v254 + 22) = 0;
          *(_QWORD *)v254 = v237;
          *((_QWORD *)v254 + 1) = 0;
          if (v237)
          {
            v258 = v237[1];
            v257 = v237 + 1;
            v256 = v258;
            *((_QWORD *)v254 + 1) = v258;
            if (v258)
              *((_QWORD *)v256 + 2) = v254 + 8;
            *((_QWORD *)v254 + 2) = v257;
            *v257 = v254;
          }
          *((_WORD *)v254 + 25) = 2 * (v253 & 0x3F);
          v254[92] = 1;
          llvm::Value::setName((uint64_t ***)v254 + 4, (uint64_t)v371);
          (*(void (**)(_QWORD, llvm::Value *, uint64_t *, _QWORD, _QWORD))(**(_QWORD **)(v333 + 424) + 16))(*(_QWORD *)(v333 + 424), v209, v361, *(_QWORD *)(v333 + 392), *(_QWORD *)(v333 + 400));
          v259 = *(unsigned int *)(v333 + 352);
          if (!(_DWORD)v259)
          {
LABEL_318:
            v260 = (uint64_t)v363;
            if ((_QWORD)v364)
            {
              sub_1C4D8AE2C((uint64_t)v363, v364, *((uint64_t *)&v364 + 1));
              v260 = (uint64_t)v363;
            }
            else
            {
              *((_QWORD *)v363 + 6) = 0;
              *(_QWORD *)(v260 + 56) = 0;
            }
            v371[0] = v365;
            if (v365)
            {
              llvm::MetadataTracking::track((uint64_t)v371, v365, 2);
              v261 = v371[0];
            }
            else
            {
              v261 = 0;
            }
            sub_1C4774EF4(v260, 0, (uint64_t)v261);
            if (v371[0])
              llvm::MetadataTracking::untrack((uint64_t)v371, v371[0]);
            if (v365)
              llvm::MetadataTracking::untrack((uint64_t)&v365, v365);
            goto LABEL_327;
          }
          v273 = *(_QWORD *)(v333 + 344);
          v274 = v273 + 16 * v259;
          v275 = (unsigned __int8 **)(v255 + 80);
          while (1)
          {
            v276 = *(_DWORD *)v273;
            v277 = *(unsigned __int8 **)(v273 + 8);
            if (v277)
            {
              if (!v276)
              {
                v374 = *(unsigned __int8 **)(v273 + 8);
                llvm::MetadataTracking::track((uint64_t)&v374, v277, 2);
                v278 = *v275;
                goto LABEL_360;
              }
            }
            else
            {
              v278 = *v275;
              if (!*v275 && (v255[55] & 0x20) == 0)
                goto LABEL_357;
              if (!v276)
              {
                v374 = 0;
LABEL_360:
                if (v278)
                  llvm::MetadataTracking::untrack((uint64_t)(v255 + 80), v278);
                v279 = v374;
                *v275 = v374;
                if (v279)
                  llvm::MetadataTracking::retrack((uint64_t)&v374, v279, (uint64_t)(v255 + 80));
                goto LABEL_357;
              }
            }
            llvm::Value::setMetadata(v209, *(_DWORD *)v273, (llvm::MDNode *)v277);
LABEL_357:
            v273 += 16;
            if (v273 == v274)
              goto LABEL_318;
          }
        }
        v280 = *(_QWORD *)(v333 + 344);
        v281 = v280 + 16 * v249;
        v282 = (unsigned __int8 **)(v243 + 112);
        while (1)
        {
          v283 = *(_DWORD *)v280;
          v284 = *(unsigned __int8 **)(v280 + 8);
          if (v284)
          {
            if (!v283)
            {
              v361[0] = *(_QWORD *)(v280 + 8);
              v287 = v282;
              llvm::MetadataTracking::track((uint64_t)v361, v284, 2);
              v282 = v287;
              v285 = *v287;
              goto LABEL_377;
            }
          }
          else
          {
            v285 = *v282;
            if (!*v282 && (v243[87] & 0x20) == 0)
              goto LABEL_374;
            if (!v283)
            {
              v361[0] = 0;
LABEL_377:
              if (v285)
              {
                v289 = v282;
                llvm::MetadataTracking::untrack((uint64_t)v282, v285);
                v282 = v289;
              }
              v288 = (unsigned __int8 *)v361[0];
              *v282 = (unsigned __int8 *)v361[0];
              if (!v288)
                goto LABEL_374;
              v286 = v282;
              llvm::MetadataTracking::retrack((uint64_t)v361, v288, (uint64_t)v282);
              goto LABEL_373;
            }
          }
          v286 = v282;
          llvm::Value::setMetadata(v245, *(_DWORD *)v280, (llvm::MDNode *)v284);
LABEL_373:
          v282 = v286;
LABEL_374:
          v280 += 16;
          if (v280 == v281)
            goto LABEL_313;
        }
      }
      v231 = 1;
      while (v230 != (unsigned __int8 **)-4096)
      {
        v232 = v228 + v231++;
        v228 = v232 & (v227 - 1);
        v230 = *(unsigned __int8 ***)(v226 + 16 * v228);
        if (v230 == v204)
        {
          v229 = (unsigned __int8 ***)(v226 + 16 * v228);
          goto LABEL_299;
        }
      }
    }
    v229 = (unsigned __int8 ***)(v226 + 16 * v227);
    goto LABEL_299;
  }
LABEL_218:
  sub_1C626D428(v333 + 536, (uint64_t)v405);
  v21 = *((_QWORD *)v310 + 5);
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v21 + 40, (uint64_t ***)v310);
  v198 = *((_QWORD *)v310 + 3);
  v199 = (_QWORD *)*((_QWORD *)v310 + 4);
  *v199 = v198;
  *(_QWORD *)(v198 + 8) = v199;
  *v309 = 0;
  v309[1] = 0;
  llvm::Value::deleteValue((llvm::Value *)v310);
  if (__p)
  {
    v337 = __p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v334[0], 8);
  if (v341)
  {
    v342 = v341;
    operator delete(v341);
  }
  MEMORY[0x1CAA32FB4](v339[0], 8);
  if (v346)
  {
    v347 = v346;
    operator delete(v346);
  }
  MEMORY[0x1CAA32FB4](v344[0], 8);
  if (v351)
  {
    v352 = (unsigned __int8 ***)v351;
    operator delete(v351);
  }
  MEMORY[0x1CAA32FB4](v349[0], 8);
  if (v384)
  {
    v385 = v384;
    operator delete(v384);
  }
  MEMORY[0x1CAA32FB4](v383, 8);
  if (v382 < 0)
    operator delete(v381);
  if (v379 != &v380)
    free(v379);
  sub_1C5408A20(v378);
  sub_1C626D3D0((uint64_t)v386);
  if ((__int128 *)v387 != &v388)
    free((void *)v387);
  if (*((_QWORD *)&v395 + 1) != (_QWORD)v395)
    free(*((void **)&v395 + 1));
  if (v404 == v403)
  {
    v200 = (void (**)(void))(v403[0] + 32);
  }
  else
  {
    if (!v404)
      goto LABEL_386;
    v200 = (void (**)(void))(*v404 + 40);
  }
  (*v200)();
LABEL_386:
  if (v410 != (_QWORD *)v412)
    free(v410);
  if (v406 == (int *)v405)
  {
    v291 = (void (**)(void))(v405[0] + 32);
  }
  else
  {
    if (!v406)
      goto LABEL_393;
    v291 = (void (**)(void))(*(_QWORD *)v406 + 40);
  }
  (*v291)();
LABEL_393:
  if (v413 != v415)
    free(v413);
  return v21;
}

llvm::BasicBlock *llvm::OpenMPIRBuilder::EmitOMPInlinedRegion(uint64_t a1, int a2, llvm::Constant **a3, uint64_t a4, void (*a5)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, llvm::BasicBlock *), uint64_t a6, _QWORD *a7, char a8, unsigned __int8 a9, char a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::BasicBlock *v19;
  uint64_t v20;
  uint64_t v21;
  llvm::BasicBlock *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  llvm::Type *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  llvm::BasicBlock *v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  _QWORD *v41;
  uint64_t v42;
  uint64_t i;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  uint64_t v47;
  void (**v49)(void);
  unsigned __int8 *v53[3];
  unsigned __int8 **v54;
  int v55;
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (!a9)
    goto LABEL_2;
  v41 = (_QWORD *)a7[3];
  if (v41)
  {
    if (v41 == a7)
    {
      v54 = v53;
      (*(void (**)(_QWORD *, unsigned __int8 **))(*a7 + 24))(a7, v53);
    }
    else
    {
      v54 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD *))(*v41 + 16))(v41);
    }
  }
  else
  {
    v54 = 0;
  }
  v55 = a2;
  v56 = a10;
  sub_1C6268990(a1, (unint64_t)v53);
  if (v54 == v53)
  {
    v49 = (void (**)(void))(v53[0] + 32);
    goto LABEL_62;
  }
  if (v54)
  {
    v49 = (void (**)(void))(*v54 + 40);
LABEL_62:
    (*v49)();
  }
LABEL_2:
  v13 = *(_QWORD *)(a1 + 392);
  v15 = v13 + 40;
  v14 = *(_QWORD *)(v13 + 40);
  if (v14 == v13 + 40 || ((v16 = (char *)(v14 - 24), v14) ? (v17 = v14 - 24) : (v17 = 0), *(_BYTE *)(v17 + 16) != 30))
  {
    v16 = (char *)operator new(0x40uLL);
    *((_DWORD *)v16 + 5) &= 0x38000000u;
    *(_QWORD *)v16 = **(_QWORD **)(a1 + 408) + 1576;
    *((_QWORD *)v16 + 1) = 0;
    v16[16] = 35;
    *(_OWORD *)(v16 + 44) = 0u;
    *(_OWORD *)(v16 + 33) = 0u;
    *(_OWORD *)(v16 + 17) = 0u;
    *((_QWORD *)v16 + 5) = v13;
    *(_WORD *)(v13 + 18) &= ~0x8000u;
    v18 = *(_QWORD *)(v13 + 40);
    *((_QWORD *)v16 + 4) = v15;
    *((_QWORD *)v16 + 3) = v18;
    *(_QWORD *)(v18 + 8) = v16 + 24;
    *(_QWORD *)(v13 + 40) = v16 + 24;
  }
  v53[0] = "omp_region.end";
  LOWORD(v55) = 259;
  v19 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock((uint64_t *)v13, (uint64_t *)v16 + 3, (uint64_t)v53, 0);
  v20 = *(_QWORD *)(v13 + 40);
  if (v20 == v15)
  {
    v21 = 0;
  }
  else
  {
    if (v20)
      v21 = v20 - 24;
    else
      v21 = 0;
    if (*(unsigned __int8 *)(v21 + 16) - 29 >= 0xB)
      v21 = 0;
  }
  v53[0] = "omp_region.finalize";
  LOWORD(v55) = 259;
  v22 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock((uint64_t *)v13, (uint64_t *)(v21 + 24), (uint64_t)v53, 0);
  v23 = 0;
  v24 = *(_QWORD *)(v13 + 40);
  if (v24)
    v25 = v24 - 24;
  else
    v25 = 0;
  if (*(unsigned __int8 *)(v25 + 16) - 29 >= 0xB)
    v25 = 0;
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(v25 + 40);
  *(_QWORD *)(a1 + 400) = v25 + 24;
  v26 = *(unsigned __int8 **)(v25 + 48);
  v53[0] = v26;
  if (v26)
  {
    llvm::MetadataTracking::track((uint64_t)v53, v26, 2);
    v23 = v53[0];
  }
  sub_1C4774EF4(a1 + 344, 0, (uint64_t)v23);
  v27 = (llvm::Type *)v53[0];
  if (v53[0])
    llvm::MetadataTracking::untrack((uint64_t)v53, v53[0]);
  llvm::OpenMPIRBuilder::emitCommonDirectiveEntry(a1, v27, a3, v19, a8);
  a5(a6, 0, 0, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400), v22);
  if (!llvm::BasicBlock::hasNPredecessors(v22, 0))
  {
    v42 = (uint64_t)v22 + 40;
    for (i = *((_QWORD *)v22 + 6); i != v42; i = *(_QWORD *)(i + 8))
    {
      v44 = i - 24;
      if (!i)
        v44 = 0;
      if (*(_BYTE *)(v44 + 16) != 83)
      {
        v45 = *(unsigned __int8 *)(i - 8) - 38;
        v46 = v45 > 0x38;
        v47 = (1 << v45) & 0x100060000000001;
        if (v46 || v47 == 0)
          v42 = i;
        else
          v42 = *(_QWORD *)(i + 8);
        break;
      }
    }
    llvm::OpenMPIRBuilder::emitCommonDirectiveExit((uint64_t *)a1, v28, (uint64_t)v22, v42, a4, a9);
    llvm::MergeBlockIntoPredecessor((uint64_t)v22, 0, 0, 0, 0, 0);
    goto LABEL_33;
  }
  llvm::BasicBlock::eraseFromParent(v22);
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(a4 + 40) + 40, (uint64_t ***)a4);
  v29 = *(_QWORD *)(a4 + 24);
  v30 = *(_QWORD **)(a4 + 32);
  *v30 = v29;
  *(_QWORD *)(v29 + 8) = v30;
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)a4);
  if (a9)
  {
    v31 = *(_DWORD *)(a1 + 8) - 1;
    *(_DWORD *)(a1 + 8) = v31;
    v32 = *(_QWORD *)a1 + 40 * v31;
    v33 = *(_QWORD **)(v32 + 24);
    if (v33 == (_QWORD *)v32)
    {
      v34 = 4;
      v33 = (_QWORD *)v32;
    }
    else
    {
      if (!v33)
        goto LABEL_32;
      v34 = 5;
    }
    (*(void (**)(void))(*v33 + 8 * v34))();
  }
LABEL_32:
  if ((a8 & 1) == 0)
  {
    llvm::BasicBlock::eraseFromParent(v19);
    v35 = 0;
    v38 = 0;
    *(_QWORD *)(a1 + 392) = 0;
    goto LABEL_40;
  }
LABEL_33:
  if (llvm::MergeBlockIntoPredecessor((uint64_t)v19, 0, 0, 0, 0, 0))
    v35 = (llvm::BasicBlock *)*((_QWORD *)v16 + 5);
  else
    v35 = v19;
  if (v16[16] != 30)
  {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v16 + 5) + 40, (uint64_t ***)v16);
    v36 = *((_QWORD *)v16 + 3);
    v37 = (_QWORD *)*((_QWORD *)v16 + 4);
    *v37 = v36;
    *(_QWORD *)(v36 + 8) = v37;
    *((_QWORD *)v16 + 3) = 0;
    *((_QWORD *)v16 + 4) = 0;
    llvm::Value::deleteValue((llvm::Value *)v16);
  }
  *(_QWORD *)(a1 + 392) = v35;
  v38 = (char *)v35 + 40;
LABEL_40:
  *(_QWORD *)(a1 + 400) = v38;
  return v35;
}

uint64_t *getFreshReductionFunc(uint64_t **a1)
{
  uint64_t v2;
  uint64_t **v3;
  llvm::PointerType *v4;
  llvm::Type *v5;
  void *v6;
  uint64_t v8[4];
  __int16 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = **a1;
  v3 = (uint64_t **)(v2 + 1576);
  v8[0] = llvm::PointerType::get((llvm::PointerType *)(v2 + 1912), 0);
  v8[1] = v8[0];
  v4 = (llvm::PointerType *)llvm::FunctionType::get(v3, v8, 2, 0);
  v5 = (llvm::Type *)*((unsigned int *)a1 + 72);
  v8[0] = (uint64_t)".omp.reduction.func";
  v9 = 259;
  v6 = operator new(0x80uLL);
  *((_DWORD *)v6 + 7) = *((_DWORD *)v6 + 7) & 0x38000000 | 0x40000000;
  *(_QWORD *)v6 = 0;
  return llvm::Function::Function((uint64_t *)v6 + 1, v4, 7, v5, (uint64_t)v8, (uint64_t)a1);
}

uint64_t llvm::OpenMPIRBuilder::createReductions(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v14;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  llvm::ArrayType *v24;
  llvm::PointerType *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  llvm::Value **v29;
  int v30;
  _BOOL4 v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t *v38;
  char v39;
  char v40;
  char *v41;
  char *v42;
  uint64_t *v43;
  llvm::Value *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 **v54;
  int v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  llvm::UndefValue *Ident;
  const llvm::APInt *v64;
  uint64_t v65;
  llvm::ConstantInt *v66;
  unint64_t v67;
  unint64_t v68;
  llvm::ValueHandleBase *v69;
  const char *v70;
  const llvm::APInt *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  llvm::ConstantInt *v76;
  unsigned int v77;
  unint64_t v78;
  llvm::ValueHandleBase *v79;
  uint64_t *FreshReductionFunc;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t **v84;
  _QWORD ***v85;
  uint64_t *v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  unsigned __int8 **v98;
  const llvm::APInt *v99;
  unsigned __int8 **v100;
  uint64_t v101;
  llvm::ConstantInt *v102;
  unsigned int v103;
  unint64_t v104;
  llvm::ConstantInt *v105;
  const llvm::APInt *v106;
  uint64_t v107;
  llvm::ConstantInt *v108;
  unsigned int v109;
  unint64_t v110;
  llvm::ConstantInt *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  char v117;
  char *v118;
  char *v119;
  llvm::Value *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  char v127;
  char *v128;
  char *v129;
  llvm::Value *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  char v139;
  char v140;
  char *v141;
  char *v142;
  _QWORD *v143;
  llvm::Value *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned __int8 **v154;
  int v155;
  unsigned __int8 *v156;
  unsigned __int8 *v157;
  unsigned __int8 *v158;
  uint64_t v159;
  uint64_t v160;
  unsigned __int8 **v161;
  int v162;
  unsigned __int8 *v163;
  unsigned __int8 *v164;
  unsigned __int8 *v165;
  uint64_t v166;
  uint64_t v167;
  unsigned __int8 **v168;
  int v169;
  unsigned __int8 *v170;
  unsigned __int8 *v171;
  unsigned __int8 *v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t **v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  unsigned __int8 *v191;
  uint64_t v192;
  unsigned __int8 *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  char v199;
  char *v200;
  char *v201;
  unsigned __int8 *v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unsigned __int8 *v208;
  uint64_t v209;
  char v210;
  char v211;
  char *v212;
  char *v213;
  llvm::Value *v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  char v222;
  char *v223;
  char *v224;
  llvm::Value *v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unsigned __int8 *v231;
  uint64_t v232;
  char v233;
  char v234;
  char *v235;
  char *v236;
  llvm::Value *v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  uint64_t v241;
  llvm::Module *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  char v246;
  char v247;
  char *v248;
  char *v249;
  unsigned __int8 **v250;
  llvm::Value *v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  uint64_t v255;
  unsigned __int8 ***v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unsigned __int8 **v261;
  int v262;
  unsigned __int8 *v263;
  unsigned __int8 *v264;
  unsigned __int8 *v265;
  uint64_t v266;
  uint64_t v267;
  unsigned __int8 **v268;
  int v269;
  unsigned __int8 *v270;
  unsigned __int8 *v271;
  unsigned __int8 *v272;
  uint64_t v273;
  uint64_t v274;
  unsigned __int8 **v275;
  int v276;
  unsigned __int8 *v277;
  unsigned __int8 *v278;
  unsigned __int8 *v279;
  uint64_t v280;
  uint64_t v281;
  unsigned __int8 **v282;
  int v283;
  unsigned __int8 *v284;
  unsigned __int8 *v285;
  unsigned __int8 *v286;
  uint64_t v287;
  uint64_t v288;
  unsigned __int8 **v289;
  int v290;
  unsigned __int8 *v291;
  unsigned __int8 *v292;
  unsigned __int8 *v293;
  uint64_t v294;
  uint64_t *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t OMPCriticalRegionLock;
  uint64_t ThreadID;
  uint64_t *v301;
  int v302;
  uint64_t *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t **v307;
  llvm::Module *v308;
  llvm::PointerType *v309;
  uint64_t v310;
  uint64_t *v311;
  unint64_t v312;
  unint64_t v313;
  uint64_t *v314;
  int v315[2];
  unint64_t v316;
  unsigned int v317;
  uint64_t *v318;
  const char *v319;
  uint64_t v320;
  llvm::ValueHandleBase *v321;
  llvm::ValueHandleBase *v322;
  unsigned __int8 *v323;
  uint64_t *v324;
  uint64_t v325;
  uint64_t v326[2];
  uint64_t v327;
  __int16 v328;
  uint64_t v329;

  v329 = *MEMORY[0x1E0C80C00];
  if (!sub_1C62683AC(a1, a2))
    return 0;
  v302 = a7;
  v305 = a6;
  v306 = a5;
  v17 = (uint64_t *)*a2;
  v16 = (uint64_t *)a2[1];
  v319 = "reduce.finalize";
  LOWORD(v323) = 259;
  v304 = llvm::BasicBlock::splitBasicBlock(v17, v16, (uint64_t)&v319, 0);
  v18 = (uint64_t *)v17[5];
  if (v18 == v17 + 5)
  {
    v19 = 0;
  }
  else
  {
    if (v18)
      v20 = v18 - 3;
    else
      v20 = 0;
    if (*((unsigned __int8 *)v20 + 16) - 29 >= 0xB)
      v19 = 0;
    else
      v19 = v20;
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v19[5] + 40, (uint64_t ***)v19);
  v21 = v19[3];
  v22 = (_QWORD *)v19[4];
  *v22 = v21;
  *(_QWORD *)(v21 + 8) = v22;
  v19[3] = 0;
  v19[4] = 0;
  llvm::Value::deleteValue((llvm::Value *)v19);
  v23 = (uint64_t *)(a1 + 344);
  v24 = (llvm::ArrayType *)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(a1 + 408) + 1912), 0);
  llvm::ArrayType::get(v24, (llvm::Type *)v305);
  v309 = v25;
  if (a3)
  {
    sub_1C4D8AE2C(a1 + 344, a3, a4);
  }
  else
  {
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 400) = 0;
  }
  v310 = a5 + 56 * v305;
  v319 = "red.array";
  LOWORD(v323) = 259;
  v314 = (uint64_t *)sub_1C486A5CC((uint64_t *)(a1 + 344), v309, 0, (uint64_t)&v319);
  sub_1C4D8AE2C(a1 + 344, (uint64_t)v17, (uint64_t)(v17 + 5));
  v311 = (uint64_t *)(a1 + 344);
  if (v305)
  {
    v33 = 0;
    v34 = v306;
    while (1)
    {
      v319 = "red.array.elem.";
      v321 = (llvm::ValueHandleBase *)v33;
      LOWORD(v323) = 2051;
      v35 = sub_1C6269D18((uint64_t)v23, v309, v314, 0, v33, (uint64_t)&v319);
      v36 = *(unsigned __int8 **)(v34 + 16);
      v37 = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(a1 + 408) + 1912), 0);
      v326[0] = (uint64_t)"private.red.var.";
      v327 = v33;
      v328 = 2051;
      v319 = (const char *)v326;
      v321 = (llvm::ValueHandleBase *)".casted";
      LOWORD(v323) = 770;
      v38 = (uint64_t *)sub_1C4773E38(v23, 49, v36, v37, (uint64_t)&v319);
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 392) + 56) + 40) + 272, *v38);
      v40 = v39;
      v41 = (char *)operator new(0x80uLL);
      v42 = v41;
      *((_DWORD *)v41 + 21) = *((_DWORD *)v41 + 21) & 0x38000000 | 2;
      *(_QWORD *)v41 = 0;
      *((_QWORD *)v41 + 2) = 0;
      *((_QWORD *)v41 + 1) = 0;
      *((_QWORD *)v41 + 5) = 0;
      *((_QWORD *)v41 + 6) = 0;
      *((_QWORD *)v41 + 4) = 0;
      v43 = (uint64_t *)(v41 + 32);
      *((_QWORD *)v41 + 8) = **(_QWORD **)*v38 + 1576;
      v44 = (llvm::Value *)(v41 + 64);
      *((_QWORD *)v41 + 3) = v41 + 64;
      *((_QWORD *)v41 + 7) = v41 + 64;
      *((_QWORD *)v41 + 9) = 0;
      v41[80] = 61;
      v41[81] = 0;
      *((_WORD *)v41 + 41) = 0;
      *((_DWORD *)v41 + 21) = 2;
      *(_OWORD *)(v41 + 88) = 0u;
      *(_OWORD *)(v41 + 104) = 0u;
      *((_DWORD *)v41 + 30) = 0;
      *(_QWORD *)v41 = v38;
      v47 = v38[1];
      v46 = v38 + 1;
      v45 = v47;
      *((_QWORD *)v41 + 1) = v47;
      if (v47)
        *(_QWORD *)(v45 + 16) = v41 + 8;
      *((_QWORD *)v41 + 2) = v46;
      *v46 = v41;
      if (*((_QWORD *)v41 + 4))
      {
        **((_QWORD **)v41 + 6) = *((_QWORD *)v41 + 5);
        v59 = *((_QWORD *)v41 + 5);
        if (v59)
          *(_QWORD *)(v59 + 16) = *((_QWORD *)v41 + 6);
      }
      *v43 = v35;
      if (v35)
      {
        v50 = *(_QWORD *)(v35 + 8);
        v49 = (uint64_t **)(v35 + 8);
        v48 = v50;
        *((_QWORD *)v41 + 5) = v50;
        if (v50)
          *(_QWORD *)(v48 + 16) = v41 + 40;
        *((_QWORD *)v41 + 6) = v49;
        *v49 = v43;
      }
      *((_WORD *)v41 + 41) = 2 * (v40 & 0x3F);
      v41[124] = 1;
      LOWORD(v323) = 257;
      (*(void (**)(_QWORD, llvm::Value *, const char **, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v44, &v319, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
      v51 = *(unsigned int *)(a1 + 352);
      if ((_DWORD)v51)
        break;
LABEL_27:
      v34 += 56;
      ++v33;
      v23 = (uint64_t *)(a1 + 344);
      if (v34 == v310)
        goto LABEL_16;
    }
    v52 = *(_QWORD *)(a1 + 344);
    v53 = v52 + 16 * v51;
    v54 = (unsigned __int8 **)(v42 + 112);
    while (1)
    {
      v55 = *(_DWORD *)v52;
      v56 = *(unsigned __int8 **)(v52 + 8);
      if (v56)
      {
        if (!v55)
        {
          v326[0] = *(_QWORD *)(v52 + 8);
          llvm::MetadataTracking::track((uint64_t)v326, v56, 2);
          v57 = *v54;
          goto LABEL_40;
        }
      }
      else
      {
        v57 = *v54;
        if (!*v54 && (v42[87] & 0x20) == 0)
          goto LABEL_37;
        if (!v55)
        {
          v326[0] = 0;
LABEL_40:
          if (v57)
            llvm::MetadataTracking::untrack((uint64_t)(v42 + 112), v57);
          v58 = (unsigned __int8 *)v326[0];
          *v54 = (unsigned __int8 *)v326[0];
          if (v58)
            llvm::MetadataTracking::retrack((uint64_t)v326, v58, (uint64_t)(v42 + 112));
          goto LABEL_37;
        }
      }
      llvm::Value::setMetadata(v44, *(_DWORD *)v52, (llvm::MDNode *)v56);
LABEL_37:
      v52 += 16;
      if (v52 == v53)
        goto LABEL_27;
    }
  }
LABEL_16:
  v26 = *(_QWORD *)(*(_QWORD *)(a1 + 392) + 56);
  v307 = *(uint64_t ***)(v26 + 40);
  v27 = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(a1 + 408) + 1912), 0);
  v319 = "red.array.ptr";
  LOWORD(v323) = 259;
  v28 = sub_1C4773E38(v23, 49, (unsigned __int8 *)v314, v27, (uint64_t)&v319);
  v317 = 0;
  v29 = (llvm::Value **)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v317);
  if (v305)
  {
    v60 = (uint64_t *)(v306 + 40);
    v61 = 56 * v305;
    v32 = v302;
    while (1)
    {
      v62 = *v60;
      v60 += 7;
      v31 = v62 != 0;
      if (!v62)
        break;
      v61 -= 56;
      if (!v61)
      {
        v30 = 16;
        goto LABEL_51;
      }
    }
    v30 = 0;
  }
  else
  {
    v30 = 16;
    v31 = 1;
    v32 = v302;
  }
LABEL_51:
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v29, v317, v30, 0);
  ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
  v65 = **(_QWORD **)(a1 + 408);
  v66 = *(llvm::ConstantInt **)(v65 + 1960);
  v67 = *(unsigned int *)(v65 + 1968);
  LODWORD(v320) = v67 >> 8;
  if (v67 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v319, v305, 0);
  }
  else
  {
    if (v67 <= 0xFF)
      LODWORD(v68) = 0;
    else
      v68 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v67);
    v319 = (const char *)(v68 & v305);
  }
  v69 = llvm::ConstantInt::get(v66, (llvm::LLVMContext *)&v319, v64);
  if (v320 >= 0x41 && v319)
    MEMORY[0x1CAA32F9C](v319, 0x1000C8000313F17);
  sub_1C4768AD0((uint64_t)(v307 + 34), (uint64_t)v309);
  v73 = v72 + 7;
  if ((_DWORD)v70 == 1)
  v74 = (v73 >> 3);
  v75 = **(_QWORD **)(a1 + 408);
  v76 = *(llvm::ConstantInt **)(v75 + 1984);
  v77 = *(_DWORD *)(v75 + 1992);
  LODWORD(v320) = v77 >> 8;
  if (v77 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v319, v74, 0);
  }
  else
  {
    if (v77 <= 0xFF)
      v78 = 0;
    else
      v78 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v77);
    v319 = (const char *)(v78 & v74);
  }
  v79 = llvm::ConstantInt::get(v76, (llvm::LLVMContext *)&v319, v71);
  if (v320 >= 0x41 && v319)
    MEMORY[0x1CAA32F9C](v319, 0x1000C8000313F17);
  FreshReductionFunc = getFreshReductionFunc(v307);
  OMPCriticalRegionLock = llvm::OpenMPIRBuilder::getOMPCriticalRegionLock((llvm::OpenMPIRBuilder *)a1, ".reduction", 10);
  if (v32)
    v81 = 53;
  else
    v81 = 52;
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(_QWORD *)(a1 + 336), v81);
  if (*(_BYTE *)(v82 + 16))
    v83 = 0;
  else
    v83 = v82;
  if (v83)
    v84 = *(uint64_t ***)(v83 + 24);
  else
    v84 = 0;
  v298 = (uint64_t)Ident;
  v319 = (const char *)Ident;
  v320 = ThreadID;
  v321 = v69;
  v322 = v79;
  v323 = v28;
  v324 = FreshReductionFunc;
  v295 = FreshReductionFunc;
  v325 = OMPCriticalRegionLock;
  v326[0] = (uint64_t)"reduce";
  v328 = 259;
  v85 = (_QWORD ***)sub_1C4774778(v23, v84, v83, (uint64_t *)&v319, 7, (uint64_t)v326, 0);
  v86 = *v307;
  v319 = "reduce.switch.nonatomic";
  LOWORD(v323) = 259;
  v87 = operator new();
  *(_QWORD *)v87 = *v86 + 1600;
  *(_QWORD *)(v87 + 8) = 0;
  v88 = *(_DWORD *)(v87 + 20) & 0xC0000000;
  *(_QWORD *)(v87 + 24) = 0;
  v89 = v87 + 24;
  *(_DWORD *)(v87 + 16) = 22;
  *(_DWORD *)(v87 + 20) = v88;
  *(_QWORD *)(v87 + 32) = 0;
  *(_QWORD *)(v87 + 40) = v87 + 40;
  *(_QWORD *)(v87 + 48) = v87 + 40;
  *(_QWORD *)(v87 + 56) = 0;
  if (v26)
  {
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v26 + 72, (_QWORD *)v87);
    v90 = *(_QWORD *)(v26 + 72);
    *(_QWORD *)(v87 + 24) = v90;
    *(_QWORD *)(v87 + 32) = v26 + 72;
    *(_QWORD *)(v90 + 8) = v89;
    *(_QWORD *)(v26 + 72) = v89;
  }
  llvm::Value::setName((uint64_t ***)v87, (uint64_t)&v319);
  v91 = *v307;
  v319 = "reduce.switch.atomic";
  LOWORD(v323) = 259;
  v92 = operator new();
  *(_QWORD *)v92 = *v91 + 1600;
  *(_QWORD *)(v92 + 8) = 0;
  v93 = *(_DWORD *)(v92 + 20) & 0xC0000000;
  *(_QWORD *)(v92 + 24) = 0;
  v94 = v92 + 24;
  *(_DWORD *)(v92 + 16) = 22;
  *(_DWORD *)(v92 + 20) = v93;
  *(_QWORD *)(v92 + 32) = 0;
  *(_QWORD *)(v92 + 40) = v92 + 40;
  v296 = v92 + 40;
  *(_QWORD *)(v92 + 48) = v92 + 40;
  *(_QWORD *)(v92 + 56) = 0;
  if (v26)
  {
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v26 + 72, (_QWORD *)v92);
    v95 = *(_QWORD *)(v26 + 72);
    *(_QWORD *)(v92 + 24) = v95;
    *(_QWORD *)(v92 + 32) = v26 + 72;
    *(_QWORD *)(v95 + 8) = v94;
    *(_QWORD *)(v26 + 72) = v94;
  }
  llvm::Value::setName((uint64_t ***)v92, (uint64_t)&v319);
  v96 = (char *)operator new(0x48uLL);
  *((_DWORD *)v96 + 7) = *((_DWORD *)v96 + 7) & 0x38000000 | 0x40000000;
  *(_QWORD *)v96 = 0;
  v97 = ***v85 + 1576;
  *((_DWORD *)v96 + 7) = 0x40000000;
  *((_QWORD *)v96 + 1) = v97;
  *((_QWORD *)v96 + 2) = 0;
  v98 = (unsigned __int8 **)(v96 + 8);
  v96[24] = 31;
  v96[25] = 0;
  *((_WORD *)v96 + 13) = 0;
  *((_DWORD *)v96 + 16) = 0;
  *((_OWORD *)v96 + 3) = 0u;
  *((_OWORD *)v96 + 2) = 0u;
  llvm::SwitchInst::init((uint64_t)(v96 + 8), (uint64_t)v85, v304, 6u);
  LOWORD(v323) = 257;
  v100 = sub_1C4867F8C(v311, v98, (uint64_t)&v319);
  v101 = **(_QWORD **)(a1 + 408);
  v102 = *(llvm::ConstantInt **)(v101 + 1960);
  v103 = *(_DWORD *)(v101 + 1968);
  LODWORD(v320) = v103 >> 8;
  if (v103 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v319, 1, 0);
  }
  else
  {
    if (v103 <= 0xFF)
      LOBYTE(v104) = 0;
    else
      v104 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v103);
    v319 = (const char *)(v104 & 1);
  }
  v105 = llvm::ConstantInt::get(v102, (llvm::LLVMContext *)&v319, v99);
  if (v320 >= 0x41 && v319)
    MEMORY[0x1CAA32F9C](v319, 0x1000C8000313F17);
  llvm::SwitchInst::addCase(v100, v105, (llvm::BasicBlock *)v87);
  v107 = **(_QWORD **)(a1 + 408);
  v108 = *(llvm::ConstantInt **)(v107 + 1960);
  v109 = *(_DWORD *)(v107 + 1968);
  LODWORD(v320) = v109 >> 8;
  if (v109 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v319, 2, 0);
  }
  else
  {
    if (v109 <= 0xFF)
      LOBYTE(v110) = 0;
    else
      v110 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v109);
    v319 = (const char *)(v110 & 2);
  }
  v111 = llvm::ConstantInt::get(v108, (llvm::LLVMContext *)&v319, v106);
  if (v320 >= 0x41 && v319)
    MEMORY[0x1CAA32F9C](v319, 0x1000C8000313F17);
  *(_QWORD *)v315 = a1 + 392;
  v297 = v92;
  llvm::SwitchInst::addCase(v100, v111, (llvm::BasicBlock *)v92);
  *(_QWORD *)(a1 + 392) = v87;
  *(_QWORD *)(a1 + 400) = v87 + 40;
  if (v305)
  {
    v112 = 0;
    v113 = v306;
    while (1)
    {
      v115 = *(_QWORD *)v113;
      v114 = *(_QWORD *)(v113 + 8);
      v312 = v112;
      v316 = v112;
      v326[0] = (uint64_t)"red.value.";
      v327 = (uint64_t)&v316;
      v328 = 2563;
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)v315 + 56) + 40) + 272, v115);
      v117 = v116;
      v118 = (char *)operator new(0x60uLL);
      v119 = v118;
      v120 = (llvm::Value *)(v118 + 32);
      *((_QWORD *)v118 + 2) = 0;
      *((_QWORD *)v118 + 3) = v118 + 32;
      LOWORD(v323) = 257;
      *((_QWORD *)v118 + 4) = v115;
      *((_QWORD *)v118 + 5) = 0;
      *((_WORD *)v118 + 24) = 60;
      *((_DWORD *)v118 + 13) = 1;
      *(_OWORD *)(v118 + 56) = 0u;
      *(_OWORD *)(v118 + 72) = 0u;
      *((_DWORD *)v118 + 22) = 0;
      *(_QWORD *)v118 = v114;
      *((_QWORD *)v118 + 1) = 0;
      if (v114)
      {
        v123 = *(_QWORD *)(v114 + 8);
        v122 = (_QWORD *)(v114 + 8);
        v121 = v123;
        *((_QWORD *)v118 + 1) = v123;
        if (v123)
          *(_QWORD *)(v121 + 16) = v118 + 8;
        *((_QWORD *)v118 + 2) = v122;
        *v122 = v118;
      }
      *((_WORD *)v118 + 25) = 2 * (v117 & 0x3F);
      v118[92] = 1;
      llvm::Value::setName((uint64_t ***)v118 + 4, (uint64_t)&v319);
      (*(void (**)(_QWORD, llvm::Value *, uint64_t *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v120, v326, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
      v124 = *(unsigned int *)(a1 + 352);
      if ((_DWORD)v124)
        break;
LABEL_94:
      v125 = *(_QWORD *)(v113 + 16);
      v316 = v312;
      v326[0] = (uint64_t)"red.private.value.";
      v327 = (uint64_t)&v316;
      v328 = 2563;
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)v315 + 56) + 40) + 272, v115);
      v127 = v126;
      v128 = (char *)operator new(0x60uLL);
      v129 = v128;
      v130 = (llvm::Value *)(v128 + 32);
      *((_QWORD *)v128 + 2) = 0;
      *((_QWORD *)v128 + 3) = v128 + 32;
      LOWORD(v323) = 257;
      *((_QWORD *)v128 + 4) = v115;
      *((_QWORD *)v128 + 5) = 0;
      *((_WORD *)v128 + 24) = 60;
      *((_DWORD *)v128 + 13) = 1;
      *(_OWORD *)(v128 + 56) = 0u;
      *(_OWORD *)(v128 + 72) = 0u;
      *((_DWORD *)v128 + 22) = 0;
      *(_QWORD *)v128 = v125;
      *((_QWORD *)v128 + 1) = 0;
      if (v125)
      {
        v133 = *(_QWORD *)(v125 + 8);
        v132 = (_QWORD *)(v125 + 8);
        v131 = v133;
        *((_QWORD *)v128 + 1) = v133;
        if (v133)
          *(_QWORD *)(v131 + 16) = v128 + 8;
        *((_QWORD *)v128 + 2) = v132;
        *v132 = v128;
      }
      *((_WORD *)v128 + 25) = 2 * (v127 & 0x3F);
      v128[92] = 1;
      llvm::Value::setName((uint64_t ***)v128 + 4, (uint64_t)&v319);
      (*(void (**)(_QWORD, llvm::Value *, uint64_t *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v130, v326, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
      v134 = *(unsigned int *)(a1 + 352);
      if ((_DWORD)v134)
      {
        v159 = *(_QWORD *)(a1 + 344);
        v160 = v159 + 16 * v134;
        v161 = (unsigned __int8 **)(v129 + 80);
        do
        {
          v162 = *(_DWORD *)v159;
          v163 = *(unsigned __int8 **)(v159 + 8);
          if (v163)
          {
            if (!v162)
            {
              v318 = *(uint64_t **)(v159 + 8);
              llvm::MetadataTracking::track((uint64_t)&v318, v163, 2);
              v164 = *v161;
              goto LABEL_137;
            }
          }
          else
          {
            v164 = *v161;
            if (!*v161 && (v129[55] & 0x20) == 0)
              goto LABEL_134;
            if (!v162)
            {
              v318 = 0;
LABEL_137:
              if (v164)
                llvm::MetadataTracking::untrack((uint64_t)(v129 + 80), v164);
              v165 = (unsigned __int8 *)v318;
              *v161 = (unsigned __int8 *)v318;
              if (v165)
                llvm::MetadataTracking::retrack((uint64_t)&v318, v165, (uint64_t)(v129 + 80));
              goto LABEL_134;
            }
          }
          llvm::Value::setMetadata(v130, *(_DWORD *)v159, (llvm::MDNode *)v163);
LABEL_134:
          v159 += 16;
        }
        while (v159 != v160);
      }
      v318 = 0;
      v135 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, llvm::Value *, llvm::Value *, uint64_t **))(v113 + 24))(*(_QWORD *)(v113 + 32), *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400), v120, v130, &v318);
      if (!v135)
      {
LABEL_296:
        **(_QWORD **)v315 = 0;
        *(_QWORD *)(a1 + 400) = 0;
        return 0;
      }
      sub_1C4D8AE2C((uint64_t)v311, v135, v136);
      if (!**(_QWORD **)v315)
        return 0;
      v137 = v318;
      v138 = *(_QWORD *)(v113 + 8);
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)v315 + 56) + 40) + 272, *v318);
      v140 = v139;
      v141 = (char *)operator new(0x80uLL);
      v142 = v141;
      *((_DWORD *)v141 + 21) = *((_DWORD *)v141 + 21) & 0x38000000 | 2;
      *(_QWORD *)v141 = 0;
      *((_QWORD *)v141 + 2) = 0;
      *((_QWORD *)v141 + 1) = 0;
      *((_QWORD *)v141 + 5) = 0;
      *((_QWORD *)v141 + 6) = 0;
      *((_QWORD *)v141 + 4) = 0;
      v143 = v141 + 32;
      *((_QWORD *)v141 + 8) = **(_QWORD **)*v137 + 1576;
      v144 = (llvm::Value *)(v141 + 64);
      *((_QWORD *)v141 + 3) = v141 + 64;
      *((_QWORD *)v141 + 7) = v141 + 64;
      *((_QWORD *)v141 + 9) = 0;
      v141[80] = 61;
      v141[81] = 0;
      *((_WORD *)v141 + 41) = 0;
      *((_DWORD *)v141 + 21) = 2;
      *(_OWORD *)(v141 + 88) = 0u;
      *(_OWORD *)(v141 + 104) = 0u;
      *((_DWORD *)v141 + 30) = 0;
      *(_QWORD *)v141 = v137;
      v147 = v137[1];
      v146 = v137 + 1;
      v145 = v147;
      *((_QWORD *)v141 + 1) = v147;
      if (v147)
        *(_QWORD *)(v145 + 16) = v141 + 8;
      *((_QWORD *)v141 + 2) = v146;
      *v146 = v141;
      if (*((_QWORD *)v141 + 4))
      {
        **((_QWORD **)v141 + 6) = *((_QWORD *)v141 + 5);
        v173 = *((_QWORD *)v141 + 5);
        if (v173)
          *(_QWORD *)(v173 + 16) = *((_QWORD *)v141 + 6);
      }
      *v143 = v138;
      if (v138)
      {
        v150 = *(_QWORD *)(v138 + 8);
        v149 = (_QWORD *)(v138 + 8);
        v148 = v150;
        *((_QWORD *)v141 + 5) = v150;
        if (v150)
          *(_QWORD *)(v148 + 16) = v141 + 40;
        *((_QWORD *)v141 + 6) = v149;
        *v149 = v143;
      }
      *((_WORD *)v141 + 41) = 2 * (v140 & 0x3F);
      v141[124] = 1;
      LOWORD(v323) = 257;
      (*(void (**)(_QWORD, llvm::Value *, const char **, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v144, &v319, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
      v151 = *(unsigned int *)(a1 + 352);
      if ((_DWORD)v151)
      {
        v166 = *(_QWORD *)(a1 + 344);
        v167 = v166 + 16 * v151;
        v168 = (unsigned __int8 **)(v142 + 112);
        do
        {
          v169 = *(_DWORD *)v166;
          v170 = *(unsigned __int8 **)(v166 + 8);
          if (v170)
          {
            if (!v169)
            {
              v326[0] = *(_QWORD *)(v166 + 8);
              llvm::MetadataTracking::track((uint64_t)v326, v170, 2);
              v171 = *v168;
              goto LABEL_152;
            }
          }
          else
          {
            v171 = *v168;
            if (!*v168 && (v142[87] & 0x20) == 0)
              goto LABEL_149;
            if (!v169)
            {
              v326[0] = 0;
LABEL_152:
              if (v171)
                llvm::MetadataTracking::untrack((uint64_t)(v142 + 112), v171);
              v172 = (unsigned __int8 *)v326[0];
              *v168 = (unsigned __int8 *)v326[0];
              if (v172)
                llvm::MetadataTracking::retrack((uint64_t)v326, v172, (uint64_t)(v142 + 112));
              goto LABEL_149;
            }
          }
          llvm::Value::setMetadata(v144, *(_DWORD *)v166, (llvm::MDNode *)v170);
LABEL_149:
          v166 += 16;
        }
        while (v166 != v167);
      }
      v113 += 56;
      v112 = v312 + 1;
      if (v113 == v310)
        goto LABEL_158;
    }
    v152 = *(_QWORD *)(a1 + 344);
    v153 = v152 + 16 * v124;
    v154 = (unsigned __int8 **)(v119 + 80);
    while (1)
    {
      v155 = *(_DWORD *)v152;
      v156 = *(unsigned __int8 **)(v152 + 8);
      if (v156)
      {
        if (!v155)
        {
          v318 = *(uint64_t **)(v152 + 8);
          llvm::MetadataTracking::track((uint64_t)&v318, v156, 2);
          v157 = *v154;
          goto LABEL_122;
        }
      }
      else
      {
        v157 = *v154;
        if (!*v154 && (v119[55] & 0x20) == 0)
          goto LABEL_119;
        if (!v155)
        {
          v318 = 0;
LABEL_122:
          if (v157)
            llvm::MetadataTracking::untrack((uint64_t)(v119 + 80), v157);
          v158 = (unsigned __int8 *)v318;
          *v154 = (unsigned __int8 *)v318;
          if (v158)
            llvm::MetadataTracking::retrack((uint64_t)&v318, v158, (uint64_t)(v119 + 80));
          goto LABEL_119;
        }
      }
      llvm::Value::setMetadata(v120, *(_DWORD *)v152, (llvm::MDNode *)v156);
LABEL_119:
      v152 += 16;
      if (v152 == v153)
        goto LABEL_94;
    }
  }
LABEL_158:
  if (v302)
    v174 = 55;
  else
    v174 = 54;
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(_QWORD *)(a1 + 336), v174);
  if (*(_BYTE *)(v175 + 16))
    v176 = 0;
  else
    v176 = v175;
  if (v176)
    v177 = *(uint64_t ***)(v176 + 24);
  else
    v177 = 0;
  v14 = v304;
  v178 = v297;
  v326[0] = v298;
  v326[1] = ThreadID;
  v327 = OMPCriticalRegionLock;
  LOWORD(v323) = 257;
  sub_1C4774778(v311, v177, v176, v326, 3, (uint64_t)&v319, 0);
  v179 = (char *)operator new(0x60uLL);
  *((_DWORD *)v179 + 13) = *((_DWORD *)v179 + 13) & 0x38000000 | 1;
  *(_QWORD *)v179 = 0;
  *((_QWORD *)v179 + 2) = 0;
  *((_QWORD *)v179 + 1) = 0;
  *((_QWORD *)v179 + 4) = ***(_QWORD ***)v304 + 1576;
  *((_QWORD *)v179 + 3) = v179 + 32;
  *((_QWORD *)v179 + 5) = 0;
  v179[48] = 30;
  v179[49] = 0;
  *((_WORD *)v179 + 25) = 0;
  *((_DWORD *)v179 + 13) = 1;
  *(_OWORD *)(v179 + 56) = 0u;
  *(_OWORD *)(v179 + 72) = 0u;
  *((_DWORD *)v179 + 22) = 0;
  *(_QWORD *)v179 = v304;
  v181 = (_QWORD *)(v304 + 8);
  v180 = *(_QWORD *)(v304 + 8);
  *((_QWORD *)v179 + 1) = v180;
  if (v180)
    *(_QWORD *)(v180 + 16) = v179 + 8;
  *((_QWORD *)v179 + 2) = v181;
  *v181 = v179;
  LOWORD(v323) = 257;
  sub_1C4867F8C(v311, (unsigned __int8 **)v179 + 4, (uint64_t)&v319);
  *(_QWORD *)(a1 + 392) = v297;
  *(_QWORD *)(a1 + 400) = v296;
  if (!v31)
  {
    LLVMBuildUnreachable_0((uint64_t)v311);
    goto LABEL_178;
  }
  if (!v305)
  {
LABEL_175:
    v185 = (char *)operator new(0x60uLL);
    *((_DWORD *)v185 + 13) = *((_DWORD *)v185 + 13) & 0x38000000 | 1;
    *(_QWORD *)v185 = 0;
    *((_QWORD *)v185 + 2) = 0;
    *((_QWORD *)v185 + 1) = 0;
    *((_QWORD *)v185 + 4) = ***(_QWORD ***)v304 + 1576;
    *((_QWORD *)v185 + 3) = v185 + 32;
    *((_QWORD *)v185 + 5) = 0;
    v185[48] = 30;
    v185[49] = 0;
    *((_WORD *)v185 + 25) = 0;
    *((_DWORD *)v185 + 13) = 1;
    *(_OWORD *)(v185 + 56) = 0u;
    *(_OWORD *)(v185 + 72) = 0u;
    *((_DWORD *)v185 + 22) = 0;
    *(_QWORD *)v185 = v304;
    v186 = *(_QWORD *)(v304 + 8);
    *((_QWORD *)v185 + 1) = v186;
    if (v186)
      *(_QWORD *)(v186 + 16) = v185 + 8;
    *((_QWORD *)v185 + 2) = v181;
    *v181 = v185;
    LOWORD(v323) = 257;
    sub_1C4867F8C(v311, (unsigned __int8 **)v185 + 4, (uint64_t)&v319);
LABEL_178:
    v187 = *v307;
    LOWORD(v323) = 257;
    v188 = operator new();
    *(_QWORD *)v188 = *v187 + 1600;
    *(_QWORD *)(v188 + 8) = 0;
    v189 = *(_DWORD *)(v188 + 20) & 0xC0000000;
    *(_DWORD *)(v188 + 16) = 22;
    *(_DWORD *)(v188 + 20) = v189;
    *(_QWORD *)(v188 + 24) = 0;
    *(_QWORD *)(v188 + 32) = 0;
    *(_QWORD *)(v188 + 40) = v188 + 40;
    *(_QWORD *)(v188 + 48) = v188 + 40;
    *(_QWORD *)(v188 + 56) = 0;
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v295 + 9), (_QWORD *)v188);
    v190 = v295[9];
    *(_QWORD *)(v188 + 32) = v295 + 9;
    *(_QWORD *)(v188 + 24) = v190;
    *(_QWORD *)(v190 + 8) = v188 + 24;
    v295[9] = v188 + 24;
    llvm::Value::setName((uint64_t ***)v188, (uint64_t)&v319);
    *(_QWORD *)(a1 + 392) = v188;
    *(_QWORD *)(a1 + 400) = v188 + 40;
    if ((*((_BYTE *)v295 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v295);
    v191 = (unsigned __int8 *)v295[11];
    v192 = llvm::PointerType::get(v309, 0);
    LOWORD(v323) = 257;
    v303 = (uint64_t *)sub_1C4773E38(v311, 49, v191, v192, (uint64_t)&v319);
    if ((*((_WORD *)v295 + 9) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v295);
    v193 = (unsigned __int8 *)(v295[11] + 40);
    v194 = llvm::PointerType::get(v309, 0);
    LOWORD(v323) = 257;
    v301 = (uint64_t *)sub_1C4773E38(v311, 49, v193, v194, (uint64_t)&v319);
    if (!v305)
    {
LABEL_297:
      LLVMBuildRetVoid_0(v311);
      *(_QWORD *)(a1 + 392) = v14;
      *(_QWORD *)(a1 + 400) = v14 + 40;
      return v14;
    }
    v195 = 0;
    while (1)
    {
      LOWORD(v323) = 257;
      v313 = v195;
      v196 = sub_1C6269D18((uint64_t)v311, v309, v303, 0, v195, (uint64_t)&v319);
      v197 = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(a1 + 408) + 1912), 0);
      v328 = 257;
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 392) + 56) + 40) + 272, v197);
      v199 = v198;
      v200 = (char *)operator new(0x60uLL);
      v201 = v200;
      v202 = (unsigned __int8 *)(v200 + 32);
      *((_QWORD *)v200 + 2) = 0;
      *((_QWORD *)v200 + 3) = v200 + 32;
      LOWORD(v323) = 257;
      *((_QWORD *)v200 + 4) = v197;
      *((_QWORD *)v200 + 5) = 0;
      *((_WORD *)v200 + 24) = 60;
      *((_DWORD *)v200 + 13) = 1;
      *(_OWORD *)(v200 + 56) = 0u;
      *(_OWORD *)(v200 + 72) = 0u;
      *((_DWORD *)v200 + 22) = 0;
      *(_QWORD *)v200 = v196;
      *((_QWORD *)v200 + 1) = 0;
      if (v196)
      {
        v205 = *(_QWORD *)(v196 + 8);
        v204 = (_QWORD *)(v196 + 8);
        v203 = v205;
        *((_QWORD *)v200 + 1) = v205;
        if (v205)
          *(_QWORD *)(v203 + 16) = v200 + 8;
        *((_QWORD *)v200 + 2) = v204;
        *v204 = v200;
      }
      *((_WORD *)v200 + 25) = 2 * (v199 & 0x3F);
      v200[92] = 1;
      llvm::Value::setName((uint64_t ***)v200 + 4, (uint64_t)&v319);
      (*(void (**)(_QWORD, unsigned __int8 *, uint64_t *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v202, v326, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
      v206 = *(unsigned int *)(a1 + 352);
      if ((_DWORD)v206)
        break;
LABEL_189:
      v207 = **(_QWORD **)(v306 + 8);
      LOWORD(v323) = 257;
      v208 = sub_1C4773E38(v311, 49, v202, v207, (uint64_t)&v319);
      v209 = *(_QWORD *)v306;
      v328 = 257;
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)v315 + 56) + 40) + 272, v209);
      v211 = v210;
      v212 = (char *)operator new(0x60uLL);
      v213 = v212;
      v214 = (llvm::Value *)(v212 + 32);
      *((_QWORD *)v212 + 2) = 0;
      *((_QWORD *)v212 + 3) = v212 + 32;
      LOWORD(v323) = 257;
      *((_QWORD *)v212 + 4) = v209;
      *((_QWORD *)v212 + 5) = 0;
      *((_WORD *)v212 + 24) = 60;
      *((_DWORD *)v212 + 13) = 1;
      *(_OWORD *)(v212 + 56) = 0u;
      *(_OWORD *)(v212 + 72) = 0u;
      *((_DWORD *)v212 + 22) = 0;
      *(_QWORD *)v212 = v208;
      *((_QWORD *)v212 + 1) = 0;
      if (v208)
      {
        v215 = v208 + 8;
        v216 = *((_QWORD *)v208 + 1);
        *((_QWORD *)v212 + 1) = v216;
        if (v216)
          *(_QWORD *)(v216 + 16) = v212 + 8;
        *((_QWORD *)v212 + 2) = v215;
        *v215 = v212;
      }
      *((_WORD *)v212 + 25) = 2 * (v211 & 0x3F);
      v212[92] = 1;
      llvm::Value::setName((uint64_t ***)v212 + 4, (uint64_t)&v319);
      (*(void (**)(_QWORD, llvm::Value *, uint64_t *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v214, v326, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
      v217 = *(unsigned int *)(a1 + 352);
      v218 = a1 + 344;
      if ((_DWORD)v217)
      {
        v266 = *(_QWORD *)(a1 + 344);
        v267 = v266 + 16 * v217;
        v268 = (unsigned __int8 **)(v213 + 80);
        do
        {
          v269 = *(_DWORD *)v266;
          v270 = *(unsigned __int8 **)(v266 + 8);
          if (v270)
          {
            if (!v269)
            {
              v318 = *(uint64_t **)(v266 + 8);
              llvm::MetadataTracking::track((uint64_t)&v318, v270, 2);
              v271 = *v268;
              goto LABEL_243;
            }
          }
          else
          {
            v271 = *v268;
            if (!*v268 && (v213[55] & 0x20) == 0)
              goto LABEL_240;
            if (!v269)
            {
              v318 = 0;
LABEL_243:
              if (v271)
                llvm::MetadataTracking::untrack((uint64_t)(v213 + 80), v271);
              v272 = (unsigned __int8 *)v318;
              *v268 = (unsigned __int8 *)v318;
              if (v272)
                llvm::MetadataTracking::retrack((uint64_t)&v318, v272, (uint64_t)(v213 + 80));
              v218 = a1 + 344;
              goto LABEL_240;
            }
          }
          llvm::Value::setMetadata(v214, *(_DWORD *)v266, (llvm::MDNode *)v270);
LABEL_240:
          v266 += 16;
        }
        while (v266 != v267);
      }
      v308 = v214;
      LOWORD(v323) = 257;
      v219 = sub_1C6269D18(v218, v309, v301, 0, v313, (uint64_t)&v319);
      v220 = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(a1 + 408) + 1912), 0);
      v328 = 257;
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 392) + 56) + 40) + 272, v220);
      v222 = v221;
      v223 = (char *)operator new(0x60uLL);
      v224 = v223;
      v225 = (llvm::Value *)(v223 + 32);
      *((_QWORD *)v223 + 2) = 0;
      *((_QWORD *)v223 + 3) = v223 + 32;
      LOWORD(v323) = 257;
      *((_QWORD *)v223 + 4) = v220;
      *((_QWORD *)v223 + 5) = 0;
      *((_WORD *)v223 + 24) = 60;
      *((_DWORD *)v223 + 13) = 1;
      *(_OWORD *)(v223 + 56) = 0u;
      *(_OWORD *)(v223 + 72) = 0u;
      *((_DWORD *)v223 + 22) = 0;
      *(_QWORD *)v223 = v219;
      *((_QWORD *)v223 + 1) = 0;
      if (v219)
      {
        v228 = *(_QWORD *)(v219 + 8);
        v227 = (_QWORD *)(v219 + 8);
        v226 = v228;
        *((_QWORD *)v223 + 1) = v228;
        if (v228)
          *(_QWORD *)(v226 + 16) = v223 + 8;
        *((_QWORD *)v223 + 2) = v227;
        *v227 = v223;
      }
      *((_WORD *)v223 + 25) = 2 * (v222 & 0x3F);
      v223[92] = 1;
      llvm::Value::setName((uint64_t ***)v223 + 4, (uint64_t)&v319);
      (*(void (**)(_QWORD, llvm::Value *, uint64_t *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v225, v326, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
      v229 = *(unsigned int *)(a1 + 352);
      if ((_DWORD)v229)
      {
        v273 = *(_QWORD *)(a1 + 344);
        v274 = v273 + 16 * v229;
        v275 = (unsigned __int8 **)(v224 + 80);
        do
        {
          v276 = *(_DWORD *)v273;
          v277 = *(unsigned __int8 **)(v273 + 8);
          if (v277)
          {
            if (!v276)
            {
              v318 = *(uint64_t **)(v273 + 8);
              llvm::MetadataTracking::track((uint64_t)&v318, v277, 2);
              v278 = *v275;
              goto LABEL_259;
            }
          }
          else
          {
            v278 = *v275;
            if (!*v275 && (v224[55] & 0x20) == 0)
              goto LABEL_256;
            if (!v276)
            {
              v318 = 0;
LABEL_259:
              if (v278)
                llvm::MetadataTracking::untrack((uint64_t)(v224 + 80), v278);
              v279 = (unsigned __int8 *)v318;
              *v275 = (unsigned __int8 *)v318;
              if (v279)
                llvm::MetadataTracking::retrack((uint64_t)&v318, v279, (uint64_t)(v224 + 80));
              goto LABEL_256;
            }
          }
          llvm::Value::setMetadata(v225, *(_DWORD *)v273, (llvm::MDNode *)v277);
LABEL_256:
          v273 += 16;
        }
        while (v273 != v274);
      }
      v230 = **(_QWORD **)(v306 + 16);
      LOWORD(v323) = 257;
      v231 = sub_1C4773E38(v311, 49, (unsigned __int8 *)v225, v230, (uint64_t)&v319);
      v232 = *(_QWORD *)v306;
      v328 = 257;
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)v315 + 56) + 40) + 272, v232);
      v234 = v233;
      v235 = (char *)operator new(0x60uLL);
      v236 = v235;
      v237 = (llvm::Value *)(v235 + 32);
      *((_QWORD *)v235 + 2) = 0;
      *((_QWORD *)v235 + 3) = v235 + 32;
      LOWORD(v323) = 257;
      *((_QWORD *)v235 + 4) = v232;
      *((_QWORD *)v235 + 5) = 0;
      *((_WORD *)v235 + 24) = 60;
      *((_DWORD *)v235 + 13) = 1;
      *(_OWORD *)(v235 + 56) = 0u;
      *(_OWORD *)(v235 + 72) = 0u;
      *((_DWORD *)v235 + 22) = 0;
      *(_QWORD *)v235 = v231;
      *((_QWORD *)v235 + 1) = 0;
      if (v231)
      {
        v240 = *((_QWORD *)v231 + 1);
        v239 = v231 + 8;
        v238 = v240;
        *((_QWORD *)v235 + 1) = v240;
        if (v240)
          *(_QWORD *)(v238 + 16) = v235 + 8;
        *((_QWORD *)v235 + 2) = v239;
        *v239 = v235;
      }
      *((_WORD *)v235 + 25) = 2 * (v234 & 0x3F);
      v235[92] = 1;
      llvm::Value::setName((uint64_t ***)v235 + 4, (uint64_t)&v319);
      (*(void (**)(_QWORD, llvm::Value *, uint64_t *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v237, v326, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
      v241 = *(unsigned int *)(a1 + 352);
      v242 = v308;
      if ((_DWORD)v241)
      {
        v280 = *(_QWORD *)(a1 + 344);
        v281 = v280 + 16 * v241;
        v282 = (unsigned __int8 **)(v236 + 80);
        do
        {
          v283 = *(_DWORD *)v280;
          v284 = *(unsigned __int8 **)(v280 + 8);
          if (v284)
          {
            if (!v283)
            {
              v318 = *(uint64_t **)(v280 + 8);
              llvm::MetadataTracking::track((uint64_t)&v318, v284, 2);
              v285 = *v282;
              goto LABEL_274;
            }
          }
          else
          {
            v285 = *v282;
            if (!*v282 && (v236[55] & 0x20) == 0)
              goto LABEL_271;
            if (!v283)
            {
              v318 = 0;
LABEL_274:
              if (v285)
                llvm::MetadataTracking::untrack((uint64_t)(v236 + 80), v285);
              v286 = (unsigned __int8 *)v318;
              *v282 = (unsigned __int8 *)v318;
              if (v286)
                llvm::MetadataTracking::retrack((uint64_t)&v318, v286, (uint64_t)(v236 + 80));
              v242 = v308;
              goto LABEL_271;
            }
          }
          llvm::Value::setMetadata(v237, *(_DWORD *)v280, (llvm::MDNode *)v284);
LABEL_271:
          v280 += 16;
        }
        while (v280 != v281);
      }
      v318 = 0;
      v243 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, llvm::Module *, llvm::Value *, uint64_t **))(v306 + 24))(*(_QWORD *)(v306 + 32), *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400), v242, v237, &v318);
      if (!v243)
        goto LABEL_296;
      sub_1C4D8AE2C((uint64_t)v311, v243, v244);
      if (!**(_QWORD **)v315)
        return 0;
      v245 = v318;
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)v315 + 56) + 40) + 272, *v318);
      v247 = v246;
      v248 = (char *)operator new(0x80uLL);
      v249 = v248;
      *((_DWORD *)v248 + 21) = *((_DWORD *)v248 + 21) & 0x38000000 | 2;
      *(_QWORD *)v248 = 0;
      *((_QWORD *)v248 + 2) = 0;
      *((_QWORD *)v248 + 1) = 0;
      *((_QWORD *)v248 + 5) = 0;
      *((_QWORD *)v248 + 6) = 0;
      *((_QWORD *)v248 + 4) = 0;
      v250 = (unsigned __int8 **)(v248 + 32);
      *((_QWORD *)v248 + 8) = **(_QWORD **)*v245 + 1576;
      v251 = (llvm::Value *)(v248 + 64);
      *((_QWORD *)v248 + 3) = v248 + 64;
      *((_QWORD *)v248 + 7) = v248 + 64;
      *((_QWORD *)v248 + 9) = 0;
      v248[80] = 61;
      v248[81] = 0;
      *((_WORD *)v248 + 41) = 0;
      *((_DWORD *)v248 + 21) = 2;
      *(_OWORD *)(v248 + 88) = 0u;
      *(_OWORD *)(v248 + 104) = 0u;
      *((_DWORD *)v248 + 30) = 0;
      *(_QWORD *)v248 = v245;
      v254 = v245[1];
      v253 = v245 + 1;
      v252 = v254;
      *((_QWORD *)v248 + 1) = v254;
      if (v254)
        *(_QWORD *)(v252 + 16) = v248 + 8;
      *((_QWORD *)v248 + 2) = v253;
      *v253 = v248;
      if (*((_QWORD *)v248 + 4))
      {
        **((_QWORD **)v248 + 6) = *((_QWORD *)v248 + 5);
        v294 = *((_QWORD *)v248 + 5);
        if (v294)
          *(_QWORD *)(v294 + 16) = *((_QWORD *)v248 + 6);
      }
      *v250 = v208;
      if (v208)
      {
        v257 = *((_QWORD *)v208 + 1);
        v256 = (unsigned __int8 ***)(v208 + 8);
        v255 = v257;
        *((_QWORD *)v248 + 5) = v257;
        if (v257)
          *(_QWORD *)(v255 + 16) = v248 + 40;
        *((_QWORD *)v248 + 6) = v256;
        *v256 = v250;
      }
      *((_WORD *)v248 + 41) = 2 * (v247 & 0x3F);
      v248[124] = 1;
      LOWORD(v323) = 257;
      (*(void (**)(_QWORD, llvm::Value *, const char **, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v251, &v319, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
      v258 = *(unsigned int *)(a1 + 352);
      if ((_DWORD)v258)
      {
        v287 = *(_QWORD *)(a1 + 344);
        v288 = v287 + 16 * v258;
        v289 = (unsigned __int8 **)(v249 + 112);
        do
        {
          v290 = *(_DWORD *)v287;
          v291 = *(unsigned __int8 **)(v287 + 8);
          if (v291)
          {
            if (!v290)
            {
              v326[0] = *(_QWORD *)(v287 + 8);
              llvm::MetadataTracking::track((uint64_t)v326, v291, 2);
              v292 = *v289;
              goto LABEL_290;
            }
          }
          else
          {
            v292 = *v289;
            if (!*v289 && (v249[87] & 0x20) == 0)
              goto LABEL_287;
            if (!v290)
            {
              v326[0] = 0;
LABEL_290:
              if (v292)
                llvm::MetadataTracking::untrack((uint64_t)(v249 + 112), v292);
              v293 = (unsigned __int8 *)v326[0];
              *v289 = (unsigned __int8 *)v326[0];
              if (v293)
                llvm::MetadataTracking::retrack((uint64_t)v326, v293, (uint64_t)(v249 + 112));
              goto LABEL_287;
            }
          }
          llvm::Value::setMetadata(v251, *(_DWORD *)v287, (llvm::MDNode *)v291);
LABEL_287:
          v287 += 16;
        }
        while (v287 != v288);
      }
      v195 = v313 + 1;
      v306 += 56;
      v14 = v304;
      if (v306 == v310)
        goto LABEL_297;
    }
    v259 = *(_QWORD *)(a1 + 344);
    v260 = v259 + 16 * v206;
    v261 = (unsigned __int8 **)(v201 + 80);
    while (1)
    {
      v262 = *(_DWORD *)v259;
      v263 = *(unsigned __int8 **)(v259 + 8);
      if (v263)
      {
        if (!v262)
        {
          v318 = *(uint64_t **)(v259 + 8);
          llvm::MetadataTracking::track((uint64_t)&v318, v263, 2);
          v264 = *v261;
          goto LABEL_227;
        }
      }
      else
      {
        v264 = *v261;
        if (!*v261 && (v201[55] & 0x20) == 0)
          goto LABEL_224;
        if (!v262)
        {
          v318 = 0;
LABEL_227:
          if (v264)
            llvm::MetadataTracking::untrack((uint64_t)(v201 + 80), v264);
          v265 = (unsigned __int8 *)v318;
          *v261 = (unsigned __int8 *)v318;
          if (v265)
            llvm::MetadataTracking::retrack((uint64_t)&v318, v265, (uint64_t)(v201 + 80));
          goto LABEL_224;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v202, *(_DWORD *)v259, (llvm::MDNode *)v263);
LABEL_224:
      v259 += 16;
      if (v259 == v260)
        goto LABEL_189;
    }
  }
  v182 = v306;
  while (1)
  {
    v183 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(v182 + 40))(*(_QWORD *)(v182 + 48), v178, *(_QWORD *)(a1 + 400), *(_QWORD *)v182, *(_QWORD *)(v182 + 8), *(_QWORD *)(v182 + 16));
    if (!v183)
      break;
    sub_1C4D8AE2C((uint64_t)v311, v183, v184);
    v178 = **(_QWORD **)v315;
    if (!**(_QWORD **)v315)
      return 0;
    v182 += 56;
    if (v182 == v310)
      goto LABEL_175;
  }
  v14 = 0;
  **(_QWORD **)v315 = 0;
  *(_QWORD *)(a1 + 400) = 0;
  return v14;
}

uint64_t llvm::OpenMPIRBuilder::getOMPCriticalRegionLock(llvm::OpenMPIRBuilder *a1, const char *a2, uint64_t a3)
{
  void **v4;
  void *v5;
  llvm::Type *v6;
  uint64_t OMPInternalVariable;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;
  _QWORD v13[2];
  const char *v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v16 = 1283;
  v13[0] = "gomp_critical_user_";
  v14 = a2;
  v15 = a3;
  llvm::Twine::str((llvm::Twine *)v13, v11);
  v4 = (void **)v11[0];
  if (v12 >= 0)
    v4 = v11;
  v5 = (void *)(v12 & 0x7F);
  if (v12 < 0)
    v5 = v11[1];
  v13[0] = v4;
  v13[1] = v5;
  v14 = "var";
  v15 = 3;
  llvm::OpenMPIRBuilder::getNameWithSeparators((uint64_t)v13, 2, ".", 1uLL, ".", 1uLL, __p);
  v6 = (llvm::Type *)*((_QWORD *)a1 + 277);
  v16 = 260;
  v13[0] = __p;
  OMPInternalVariable = llvm::OpenMPIRBuilder::getOrCreateOMPInternalVariable(a1, v6, (const llvm::Twine *)v13, 0);
  if (v10 < 0)
    operator delete(__p[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  return OMPInternalVariable;
}

llvm::BasicBlock **llvm::OpenMPIRBuilder::createCanonicalLoop(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t), uint64_t a4, llvm::ConstantInt **a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 *v17;
  llvm::BasicBlock **v18;
  uint64_t SingleSuccessor;
  uint64_t *v20;
  uint64_t *v21;
  unsigned __int8 *v22;
  uint64_t Preheader;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30[4];
  __int16 v31;

  v12 = *a2;
  v13 = *(_QWORD *)(*a2 + 56);
  v14 = *(_QWORD *)(*a2 + 32);
  if (v14)
    v15 = v14 == v13 + 72;
  else
    v15 = 1;
  if (v15)
    v16 = 0;
  else
    v16 = v14 - 24;
  v17 = (unsigned __int8 *)a2[2];
  v28 = v17;
  if (v17)
  {
    llvm::MetadataTracking::track((uint64_t)&v28, v17, 2);
    v13 = *(_QWORD *)(v12 + 56);
  }
  v18 = (llvm::BasicBlock **)llvm::OpenMPIRBuilder::createLoopSkeleton(a1, &v28, a5, v13, v16, v16, a6);
  if (v28)
    llvm::MetadataTracking::untrack((uint64_t)&v28, v28);
  SingleSuccessor = llvm::BasicBlock::getSingleSuccessor(v18[3]);
  if (sub_1C62683AC(a1, a2))
  {
    v20 = (uint64_t *)(a1 + 344);
    llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)(a1 + 344), v30);
    v21 = *(uint64_t **)(a1 + 392);
    sub_1C54E6218(v21, *(uint64_t **)(a1 + 400), SingleSuccessor, 0);
    *(_QWORD *)(a1 + 392) = v21;
    *(_QWORD *)(a1 + 400) = v21 + 5;
    v29 = v30[0];
    if (v30[0])
    {
      llvm::MetadataTracking::track((uint64_t)&v29, v30[0], 2);
      v22 = v29;
    }
    else
    {
      v22 = 0;
    }
    sub_1C4774EF4(a1 + 344, 0, (uint64_t)v22);
    if (v29)
      llvm::MetadataTracking::untrack((uint64_t)&v29, v29);
    if (v30[0])
      llvm::MetadataTracking::untrack((uint64_t)v30, v30[0]);
    Preheader = llvm::CanonicalLoopInfo::getPreheader((llvm::CanonicalLoopInfo *)v18);
    v24 = (char *)operator new(0x60uLL);
    *((_DWORD *)v24 + 13) = *((_DWORD *)v24 + 13) & 0x38000000 | 1;
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 2) = 0;
    *((_QWORD *)v24 + 1) = 0;
    *((_QWORD *)v24 + 4) = ***(_QWORD ***)Preheader + 1576;
    *((_QWORD *)v24 + 3) = v24 + 32;
    *((_QWORD *)v24 + 5) = 0;
    v24[48] = 30;
    v24[49] = 0;
    *((_WORD *)v24 + 25) = 0;
    *((_DWORD *)v24 + 13) = 1;
    *(_OWORD *)(v24 + 56) = 0u;
    *(_OWORD *)(v24 + 72) = 0u;
    *((_DWORD *)v24 + 22) = 0;
    v25 = (_QWORD *)(Preheader + 8);
    v26 = *(_QWORD *)(Preheader + 8);
    *(_QWORD *)v24 = Preheader;
    *((_QWORD *)v24 + 1) = v26;
    if (v26)
      *(_QWORD *)(v26 + 16) = v24 + 8;
    *((_QWORD *)v24 + 2) = v25;
    *v25 = v24;
    v31 = 257;
    sub_1C4867F8C(v20, (unsigned __int8 **)v24 + 4, (uint64_t)v30);
  }
  a3(a4);
  return v18;
}

uint64_t llvm::CanonicalLoopInfo::getPreheader(llvm::CanonicalLoopInfo *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  unsigned int v7;
  BOOL v8;

  v1 = *(_QWORD *)this;
  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (v2)
  {
    while (1)
    {
      v1 = *(_QWORD *)(v2 + 24);
      v3 = *(unsigned __int8 *)(v1 + 16);
      v4 = v1 && v3 >= 0x1C;
      if (v4 && v3 - 29 < 0xB)
        break;
      v2 = *(_QWORD *)(v2 + 8);
      if (!v2)
        return v1;
    }
LABEL_12:
    v1 = *(_QWORD *)(v1 + 40);
    if (v1 == *((_QWORD *)this + 2))
    {
      while (1)
      {
        v2 = *(_QWORD *)(v2 + 8);
        if (!v2)
          return *((_QWORD *)this + 2);
        v1 = *(_QWORD *)(v2 + 24);
        v7 = *(unsigned __int8 *)(v1 + 16);
        if (v1)
          v8 = v7 >= 0x1C;
        else
          v8 = 0;
        if (v8 && v7 - 29 <= 0xA)
          goto LABEL_12;
      }
    }
  }
  return v1;
}

uint64_t llvm::CanonicalLoopInfo::setTripCount(uint64_t this, llvm::Value *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 8) + 48);
  if (v2)
    v3 = v2 - 24;
  else
    v3 = 0;
  v4 = *(_DWORD *)(v3 + 20);
  if ((v4 & 0x40000000) != 0)
    v5 = *(_QWORD *)(v3 - 8);
  else
    v5 = v3 - 32 * (v4 & 0x7FFFFFF);
  v6 = (_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v5 + 32))
  {
    **(_QWORD **)(v5 + 48) = *(_QWORD *)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 40);
    if (v7)
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 48);
  }
  *v6 = a2;
  if (a2)
  {
    v10 = *((_QWORD *)a2 + 1);
    v8 = (_QWORD *)((char *)a2 + 8);
    v9 = v10;
    *(_QWORD *)(v5 + 40) = v10;
    if (v10)
      *(_QWORD *)(v9 + 16) = v5 + 40;
    *(_QWORD *)(v5 + 48) = v8;
    *v8 = v6;
  }
  return this;
}

void llvm::CanonicalLoopInfo::mapIndVar(_QWORD *a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[7];

  v22[6] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*a1 + 48);
  if (v5)
    v6 = v5 - 24;
  else
    v6 = 0;
  v20 = v22;
  v21 = 0x600000000;
  v7 = *(_QWORD *)(v6 + 8);
  if (v7)
  {
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(v7 + 24);
      if (v10)
        v11 = *(unsigned __int8 *)(v10 + 16) >= 0x1Cu;
      else
        v11 = 0;
      if (v11)
      {
        v12 = *(_QWORD *)(v10 + 40);
        if (v12 != a1[1] && v12 != a1[2])
        {
          if (v9 >= HIDWORD(v21))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, (uint64_t)v22, v9 + 1, 8);
            v9 = v21;
          }
          *((_QWORD *)v20 + v9) = v7;
          v9 = v21 + 1;
          LODWORD(v21) = v21 + 1;
        }
      }
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7);
  }
  v13 = a2(a3, v6);
  v14 = (uint64_t **)v20;
  if ((_DWORD)v21)
  {
    v15 = (uint64_t **)(v13 + 8);
    v16 = 8 * v21;
    do
    {
      v17 = *v14;
      if (**v14)
      {
        *(_QWORD *)v17[2] = v17[1];
        v18 = v17[1];
        if (v18)
          *(_QWORD *)(v18 + 16) = v17[2];
      }
      *v17 = v13;
      if (v13)
      {
        v19 = (uint64_t)*v15;
        v17[1] = (uint64_t)*v15;
        if (v19)
          *(_QWORD *)(v19 + 16) = v17 + 1;
        v17[2] = (uint64_t)v15;
        *v15 = v17;
      }
      ++v14;
      v16 -= 8;
    }
    while (v16);
    v14 = (uint64_t **)v20;
  }
  if (v14 != v22)
    free(v14);
}

double llvm::CanonicalLoopInfo::invalidate(llvm::CanonicalLoopInfo *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

llvm::BasicBlock *llvm::OpenMPIRBuilder::applyStaticChunkedWorkshareLoop(uint64_t a1, unsigned __int8 **a2, llvm::CanonicalLoopInfo *a3, uint64_t a4, uint64_t a5, int a6, unsigned __int8 *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  llvm::ConstantInt *v22;
  llvm::ConstantInt *v23;
  llvm::ConstantInt *v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  llvm::PointerType *RuntimeFunction;
  uint64_t v29;
  llvm::PointerType *v30;
  uint64_t v31;
  llvm::PointerType *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 **v35;
  unsigned __int8 **v36;
  uint64_t Preheader;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  char v40;
  char v41;
  char *v42;
  char *v43;
  unsigned __int8 ***v44;
  llvm::Value *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned __int8 ****v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  char v54;
  char v55;
  char *v56;
  char *v57;
  unsigned __int8 ***v58;
  llvm::Value *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unsigned __int8 ****v63;
  unsigned __int8 *v64;
  uint64_t v65;
  char v66;
  char v67;
  char *v68;
  char *v69;
  unsigned __int8 ***v70;
  llvm::Value *v71;
  uint64_t v72;
  _QWORD *v73;
  unsigned __int8 ****v74;
  unsigned __int8 *v75;
  uint64_t v76;
  unsigned __int8 *v77;
  llvm::Value **v78;
  llvm::UndefValue *Ident;
  char v80;
  char v81;
  char *v82;
  char *v83;
  llvm::Value *v84;
  unsigned __int8 *v85;
  _QWORD *v86;
  unsigned __int8 *v87;
  uint64_t v88;
  char v89;
  char v90;
  char *v91;
  char *v92;
  llvm::Value *v93;
  uint64_t *v94;
  unsigned __int8 *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  char v105;
  char *v106;
  char *v107;
  llvm::Value *v108;
  unsigned __int8 *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t **v118;
  uint64_t *v119;
  int v120;
  int v121;
  uint64_t *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  BOOL v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned __int8 *v139;
  uint64_t v140;
  llvm::BasicBlock **v141;
  char **v142;
  uint64_t v143;
  uint64_t v144;
  llvm::BasicBlock *v145;
  llvm::BasicBlock *v146;
  llvm::BasicBlock *SingleSuccessor;
  char **v148;
  unsigned __int8 *v149;
  llvm::BasicBlock *v150;
  unsigned __int8 *v151;
  unsigned __int8 *v152;
  uint64_t v153;
  unsigned __int8 *v154;
  unsigned __int8 *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned __int8 *v160;
  unsigned __int8 *v161;
  uint64_t v162;
  char *v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t **v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  unsigned __int8 *Select;
  unsigned __int8 *v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  unsigned __int8 **v179;
  uint64_t v180;
  unsigned __int8 ***v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  llvm::UndefValue *v186;
  uint64_t v187;
  _QWORD *v188;
  unsigned int v189;
  BOOL v190;
  uint64_t v191;
  _QWORD *i;
  _QWORD *v194;
  uint64_t v196;
  uint64_t v197;
  unsigned __int8 **v198;
  int v199;
  unsigned __int8 *v200;
  unsigned __int8 *v201;
  unsigned __int8 *v202;
  uint64_t v203;
  uint64_t v204;
  unsigned __int8 **v205;
  int v206;
  unsigned __int8 *v207;
  unsigned __int8 *v208;
  unsigned __int8 *v209;
  uint64_t v210;
  uint64_t v211;
  unsigned __int8 **v212;
  int v213;
  unsigned __int8 *v214;
  unsigned __int8 *v215;
  unsigned __int8 *v216;
  uint64_t v217;
  uint64_t v218;
  unsigned __int8 **v219;
  int v220;
  unsigned __int8 *v221;
  unsigned __int8 *v222;
  unsigned __int8 **v223;
  unsigned __int8 **v224;
  unsigned __int8 *v225;
  unsigned __int8 **v226;
  uint64_t v227;
  uint64_t v228;
  unsigned __int8 **v229;
  int v230;
  unsigned __int8 *v231;
  unsigned __int8 *v232;
  unsigned __int8 *v233;
  uint64_t v234;
  uint64_t v235;
  unsigned __int8 **v236;
  int v237;
  unsigned __int8 *v238;
  unsigned __int8 *v239;
  unsigned __int8 **v240;
  unsigned __int8 *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unsigned __int8 *v246;
  unsigned __int8 *v247;
  unsigned __int8 **v248;
  uint64_t v249;
  uint64_t **v250;
  uint64_t ThreadID;
  llvm::UndefValue *v252;
  uint64_t v253;
  unsigned __int8 **v254;
  unsigned __int8 **v255;
  unsigned __int8 **v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t **v259;
  unsigned __int8 **v261;
  unsigned __int8 **v262;
  uint64_t *v263;
  uint64_t *v264;
  unsigned __int8 **v266;
  uint64_t v267;
  uint64_t *v268;
  unsigned __int8 *v269;
  unsigned __int8 *v270;
  unsigned __int8 *v271;
  unsigned __int8 *v272;
  unsigned __int8 *v273;
  unsigned __int8 *v274;
  unsigned int v275;
  unsigned __int8 *v276;
  unsigned __int8 *v277;
  uint64_t *v278;
  llvm::CanonicalLoopInfo *v279;
  unsigned __int8 *v280;
  __int128 v281;
  unsigned __int8 *v282;
  unsigned __int8 **v283;
  unsigned __int8 **v284;
  unsigned __int8 **v285;
  unsigned __int8 **v286;
  uint64_t *v287;
  unsigned __int8 *v288;
  __int128 v289;
  unsigned __int8 *v290[2];
  __int16 v291;
  uint64_t v292;

  v292 = *MEMORY[0x1E0C80C00];
  v279 = a3;
  v12 = *((_QWORD *)a3 + 1);
  v13 = *(_QWORD *)(*(_QWORD *)a3 + 48);
  v14 = ***(uint64_t ****)(*(_QWORD *)a3 + 56);
  v15 = (uint64_t *)(v13 - 24);
  if (!v13)
    v15 = 0;
  v278 = v15;
  v16 = *(_QWORD *)(v12 + 48);
  if (v16)
    v17 = v16 - 24;
  else
    v17 = 0;
  v18 = *(_DWORD *)(v17 + 20);
  if ((v18 & 0x40000000) != 0)
    v19 = *(_QWORD *)(v17 - 8);
  else
    v19 = v17 - 32 * (v18 & 0x7FFFFFF);
  v20 = *(unsigned __int8 **)(v19 + 32);
  v257 = *v15;
  v21 = *v14;
  v22 = (llvm::ConstantInt *)(v21 + 1960);
  v23 = (llvm::ConstantInt *)(v21 + 1984);
  if (*(_DWORD *)(*v15 + 8) >> 8 >= 0x21u)
    v24 = v23;
  else
    v24 = v22;
  v25 = ***(_QWORD ***)(a1 + 336);
  v26 = (uint64_t *)llvm::ConstantInt::get(v24, 0, 0);
  v268 = (uint64_t *)llvm::ConstantInt::get(v24, 1, 0);
  if ((*((_DWORD *)v24 + 2) & 0xFFFFFF00) == 0x2000)
    v27 = 59;
  else
    v27 = 61;
  RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(_QWORD *)(a1 + 336), v27);
  v249 = v29;
  v250 = (uint64_t **)RuntimeFunction;
  v30 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(_QWORD *)(a1 + 336), 62);
  v258 = v31;
  v259 = (uint64_t **)v30;
  if (a4)
  {
    sub_1C4D8AE2C(a1 + 344, a4, a5);
  }
  else
  {
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 400) = 0;
  }
  v32 = (llvm::PointerType *)(v25 + 1960);
  v33 = *a2;
  v277 = v33;
  if (v33)
  {
    llvm::MetadataTracking::track((uint64_t)&v277, v33, 2);
    v34 = v277;
  }
  else
  {
    v34 = 0;
  }
  v266 = a2;
  sub_1C4774EF4(a1 + 344, 0, (uint64_t)v34);
  if (v277)
    llvm::MetadataTracking::untrack((uint64_t)&v277, v277);
  *(_QWORD *)&v281 = "p.lastiter";
  LOWORD(v284) = 259;
  v248 = sub_1C486A5CC((uint64_t *)(a1 + 344), v32, 0, (uint64_t)&v281);
  *(_QWORD *)&v281 = "p.lowerbound";
  LOWORD(v284) = 259;
  v35 = sub_1C486A5CC((uint64_t *)(a1 + 344), v24, 0, (uint64_t)&v281);
  *(_QWORD *)&v281 = "p.upperbound";
  LOWORD(v284) = 259;
  v262 = sub_1C486A5CC((uint64_t *)(a1 + 344), v24, 0, (uint64_t)&v281);
  *(_QWORD *)&v281 = "p.stride";
  LOWORD(v284) = 259;
  v36 = sub_1C486A5CC((uint64_t *)(a1 + 344), v24, 0, (uint64_t)&v281);
  Preheader = llvm::CanonicalLoopInfo::getPreheader(a3);
  if (Preheader)
  {
    sub_1C4D8AE2C(a1 + 344, Preheader, *(_QWORD *)(Preheader + 40));
  }
  else
  {
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 400) = 0;
  }
  v38 = *v266;
  v276 = v38;
  if (v38)
  {
    llvm::MetadataTracking::track((uint64_t)&v276, v38, 2);
    v39 = v276;
  }
  else
  {
    v39 = 0;
  }
  sub_1C4774EF4(a1 + 344, 0, (uint64_t)v39);
  if (v276)
    llvm::MetadataTracking::untrack((uint64_t)&v276, v276);
  *(_QWORD *)&v281 = "chunksize";
  LOWORD(v284) = 259;
  v247 = sub_1C4773690((uint64_t *)(a1 + 344), a7, (uint64_t)v24, (uint64_t)&v281);
  *(_QWORD *)&v281 = "tripcount";
  LOWORD(v284) = 259;
  v264 = (uint64_t *)sub_1C4773E38((uint64_t *)(a1 + 344), 39, v20, (uint64_t)v24, (uint64_t)&v281);
  v246 = (unsigned __int8 *)llvm::ConstantInt::get(v32, 33, 0);
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 392) + 56) + 40) + 272, *v26);
  v41 = v40;
  v42 = (char *)operator new(0x80uLL);
  v43 = v42;
  *((_DWORD *)v42 + 21) = *((_DWORD *)v42 + 21) & 0x38000000 | 2;
  *(_QWORD *)v42 = 0;
  *((_QWORD *)v42 + 2) = 0;
  *((_QWORD *)v42 + 1) = 0;
  *((_QWORD *)v42 + 5) = 0;
  *((_QWORD *)v42 + 6) = 0;
  *((_QWORD *)v42 + 4) = 0;
  v44 = (unsigned __int8 ***)(v42 + 32);
  *((_QWORD *)v42 + 8) = **(_QWORD **)*v26 + 1576;
  v45 = (llvm::Value *)(v42 + 64);
  *((_QWORD *)v42 + 3) = v42 + 64;
  *((_QWORD *)v42 + 7) = v42 + 64;
  *((_QWORD *)v42 + 9) = 0;
  v42[80] = 61;
  v42[81] = 0;
  *((_WORD *)v42 + 41) = 0;
  *((_DWORD *)v42 + 21) = 2;
  *(_OWORD *)(v42 + 88) = 0u;
  *(_OWORD *)(v42 + 104) = 0u;
  *((_DWORD *)v42 + 30) = 0;
  *(_QWORD *)v42 = v26;
  v48 = v26[1];
  v47 = v26 + 1;
  v46 = v48;
  *((_QWORD *)v42 + 1) = v48;
  if (v48)
    *(_QWORD *)(v46 + 16) = v42 + 8;
  *((_QWORD *)v42 + 2) = v47;
  *v47 = v42;
  if (*((_QWORD *)v42 + 4))
  {
    **((_QWORD **)v42 + 6) = *((_QWORD *)v42 + 5);
    v242 = *((_QWORD *)v42 + 5);
    if (v242)
      *(_QWORD *)(v242 + 16) = *((_QWORD *)v42 + 6);
  }
  *v44 = v35;
  if (v35)
  {
    v49 = (unsigned __int8 ****)(v35 + 1);
    v50 = v35[1];
    *((_QWORD *)v42 + 5) = v50;
    if (v50)
      *((_QWORD *)v50 + 2) = v42 + 40;
    *((_QWORD *)v42 + 6) = v49;
    *v49 = v44;
  }
  v261 = v36;
  v51 = a1 + 392;
  *((_WORD *)v42 + 41) = 2 * (v41 & 0x3F);
  v42[124] = 1;
  LOWORD(v284) = 257;
  (*(void (**)(_QWORD, llvm::Value *, __int128 *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v45, &v281, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
  v52 = *(unsigned int *)(a1 + 352);
  v267 = a1 + 392;
  if ((_DWORD)v52)
  {
    v217 = *(_QWORD *)(a1 + 344);
    v218 = v217 + 16 * v52;
    v219 = (unsigned __int8 **)(v43 + 112);
    do
    {
      v220 = *(_DWORD *)v217;
      v221 = *(unsigned __int8 **)(v217 + 8);
      if (v221)
      {
        if (!v220)
        {
          *(_QWORD *)&v289 = *(_QWORD *)(v217 + 8);
          v224 = v219;
          llvm::MetadataTracking::track((uint64_t)&v289, v221, 2);
          v219 = v224;
          v222 = *v224;
          goto LABEL_260;
        }
      }
      else
      {
        v222 = *v219;
        if (!*v219 && (v43[87] & 0x20) == 0)
          goto LABEL_257;
        if (!v220)
        {
          *(_QWORD *)&v289 = 0;
LABEL_260:
          if (v222)
          {
            v226 = v219;
            llvm::MetadataTracking::untrack((uint64_t)v219, v222);
            v219 = v226;
          }
          v225 = (unsigned __int8 *)v289;
          *v219 = (unsigned __int8 *)v289;
          if (!v225)
            goto LABEL_257;
          v223 = v219;
          llvm::MetadataTracking::retrack((uint64_t)&v289, v225, (uint64_t)v219);
          goto LABEL_256;
        }
      }
      v223 = v219;
      llvm::Value::setMetadata(v45, *(_DWORD *)v217, (llvm::MDNode *)v221);
LABEL_256:
      v219 = v223;
LABEL_257:
      v217 += 16;
      v51 = a1 + 392;
    }
    while (v217 != v218);
  }
  LOWORD(v284) = 257;
  v53 = (uint64_t *)sub_1C47733F8(a1 + 344, (uint64_t)v264, (uint64_t)v268, (uint64_t)&v281, 0, 0);
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v51 + 56) + 40) + 272, *v53);
  v55 = v54;
  v56 = (char *)operator new(0x80uLL);
  v57 = v56;
  *((_DWORD *)v56 + 21) = *((_DWORD *)v56 + 21) & 0x38000000 | 2;
  *(_QWORD *)v56 = 0;
  *((_QWORD *)v56 + 2) = 0;
  *((_QWORD *)v56 + 1) = 0;
  *((_QWORD *)v56 + 5) = 0;
  *((_QWORD *)v56 + 6) = 0;
  *((_QWORD *)v56 + 4) = 0;
  v58 = (unsigned __int8 ***)(v56 + 32);
  *((_QWORD *)v56 + 8) = **(_QWORD **)*v53 + 1576;
  v59 = (llvm::Value *)(v56 + 64);
  *((_QWORD *)v56 + 3) = v56 + 64;
  *((_QWORD *)v56 + 7) = v56 + 64;
  *((_QWORD *)v56 + 9) = 0;
  v56[80] = 61;
  v56[81] = 0;
  *((_WORD *)v56 + 41) = 0;
  *((_DWORD *)v56 + 21) = 2;
  *(_OWORD *)(v56 + 88) = 0u;
  *(_OWORD *)(v56 + 104) = 0u;
  *((_DWORD *)v56 + 30) = 0;
  *(_QWORD *)v56 = v53;
  v62 = v53[1];
  v61 = v53 + 1;
  v60 = v62;
  *((_QWORD *)v56 + 1) = v62;
  if (v62)
    *(_QWORD *)(v60 + 16) = v56 + 8;
  *((_QWORD *)v56 + 2) = v61;
  *v61 = v56;
  if (*((_QWORD *)v56 + 4))
  {
    **((_QWORD **)v56 + 6) = *((_QWORD *)v56 + 5);
    v243 = *((_QWORD *)v56 + 5);
    if (v243)
      *(_QWORD *)(v243 + 16) = *((_QWORD *)v56 + 6);
  }
  *v58 = v262;
  if (v262)
  {
    v63 = (unsigned __int8 ****)(v262 + 1);
    v64 = v262[1];
    *((_QWORD *)v56 + 5) = v64;
    if (v64)
      *((_QWORD *)v64 + 2) = v56 + 40;
    *((_QWORD *)v56 + 6) = v63;
    *v63 = v58;
  }
  *((_WORD *)v56 + 41) = 2 * (v55 & 0x3F);
  v56[124] = 1;
  LOWORD(v284) = 257;
  (*(void (**)(_QWORD, llvm::Value *, __int128 *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v59, &v281, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
  v65 = *(unsigned int *)(a1 + 352);
  if ((_DWORD)v65)
  {
    v227 = *(_QWORD *)(a1 + 344);
    v228 = v227 + 16 * v65;
    v229 = (unsigned __int8 **)(v57 + 112);
    do
    {
      v230 = *(_DWORD *)v227;
      v231 = *(unsigned __int8 **)(v227 + 8);
      if (v231)
      {
        if (!v230)
        {
          *(_QWORD *)&v289 = *(_QWORD *)(v227 + 8);
          llvm::MetadataTracking::track((uint64_t)&v289, v231, 2);
          v232 = *v229;
          goto LABEL_275;
        }
      }
      else
      {
        v232 = *v229;
        if (!*v229 && (v57[87] & 0x20) == 0)
          goto LABEL_272;
        if (!v230)
        {
          *(_QWORD *)&v289 = 0;
LABEL_275:
          if (v232)
            llvm::MetadataTracking::untrack((uint64_t)(v57 + 112), v232);
          v233 = (unsigned __int8 *)v289;
          *v229 = (unsigned __int8 *)v289;
          if (v233)
            llvm::MetadataTracking::retrack((uint64_t)&v289, v233, (uint64_t)(v57 + 112));
          goto LABEL_272;
        }
      }
      llvm::Value::setMetadata(v59, *(_DWORD *)v227, (llvm::MDNode *)v231);
LABEL_272:
      v227 += 16;
    }
    while (v227 != v228);
  }
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v267 + 56) + 40) + 272, *v268);
  v67 = v66;
  v68 = (char *)operator new(0x80uLL);
  v69 = v68;
  *((_DWORD *)v68 + 21) = *((_DWORD *)v68 + 21) & 0x38000000 | 2;
  *(_QWORD *)v68 = 0;
  *((_QWORD *)v68 + 2) = 0;
  *((_QWORD *)v68 + 1) = 0;
  *((_QWORD *)v68 + 5) = 0;
  *((_QWORD *)v68 + 6) = 0;
  *((_QWORD *)v68 + 4) = 0;
  v70 = (unsigned __int8 ***)(v68 + 32);
  *((_QWORD *)v68 + 8) = **(_QWORD **)*v268 + 1576;
  v71 = (llvm::Value *)(v68 + 64);
  *((_QWORD *)v68 + 3) = v68 + 64;
  *((_QWORD *)v68 + 7) = v68 + 64;
  *((_QWORD *)v68 + 9) = 0;
  v68[80] = 61;
  v68[81] = 0;
  *((_WORD *)v68 + 41) = 0;
  *((_DWORD *)v68 + 21) = 2;
  *(_OWORD *)(v68 + 88) = 0u;
  *(_OWORD *)(v68 + 104) = 0u;
  *((_DWORD *)v68 + 30) = 0;
  *(_QWORD *)v68 = v268;
  v73 = v268 + 1;
  v72 = v268[1];
  *((_QWORD *)v68 + 1) = v72;
  if (v72)
    *(_QWORD *)(v72 + 16) = v68 + 8;
  *((_QWORD *)v68 + 2) = v73;
  *v73 = v68;
  if (*((_QWORD *)v68 + 4))
  {
    **((_QWORD **)v68 + 6) = *((_QWORD *)v68 + 5);
    v244 = *((_QWORD *)v68 + 5);
    if (v244)
      *(_QWORD *)(v244 + 16) = *((_QWORD *)v68 + 6);
  }
  *v70 = v261;
  if (v261)
  {
    v74 = (unsigned __int8 ****)(v261 + 1);
    v75 = v261[1];
    *((_QWORD *)v68 + 5) = v75;
    if (v75)
      *((_QWORD *)v75 + 2) = v68 + 40;
    *((_QWORD *)v68 + 6) = v74;
    *v74 = v70;
  }
  *((_WORD *)v68 + 41) = 2 * (v67 & 0x3F);
  v68[124] = 1;
  LOWORD(v284) = 257;
  (*(void (**)(_QWORD, llvm::Value *, __int128 *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v71, &v281, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
  v76 = *(unsigned int *)(a1 + 352);
  if ((_DWORD)v76)
  {
    v234 = *(_QWORD *)(a1 + 344);
    v235 = v234 + 16 * v76;
    v236 = (unsigned __int8 **)(v69 + 112);
    do
    {
      v237 = *(_DWORD *)v234;
      v238 = *(unsigned __int8 **)(v234 + 8);
      if (v238)
      {
        if (!v237)
        {
          *(_QWORD *)&v289 = *(_QWORD *)(v234 + 8);
          v254 = v236;
          llvm::MetadataTracking::track((uint64_t)&v289, v238, 2);
          v236 = v254;
          v239 = *v254;
          goto LABEL_290;
        }
      }
      else
      {
        v239 = *v236;
        if (!*v236 && (v69[87] & 0x20) == 0)
          goto LABEL_287;
        if (!v237)
        {
          *(_QWORD *)&v289 = 0;
LABEL_290:
          if (v239)
          {
            v256 = v236;
            llvm::MetadataTracking::untrack((uint64_t)v236, v239);
            v236 = v256;
          }
          v241 = (unsigned __int8 *)v289;
          *v236 = (unsigned __int8 *)v289;
          if (v241)
          {
            v255 = v236;
            llvm::MetadataTracking::retrack((uint64_t)&v289, v241, (uint64_t)v236);
            v236 = v255;
          }
          goto LABEL_287;
        }
      }
      v253 = v235;
      v240 = v236;
      llvm::Value::setMetadata(v71, *(_DWORD *)v234, (llvm::MDNode *)v238);
      v236 = v240;
      v235 = v253;
LABEL_287:
      v234 += 16;
    }
    while (v234 != v235);
  }
  v275 = 0;
  v77 = *v266;
  v274 = v77;
  if (v77)
    llvm::MetadataTracking::track((uint64_t)&v274, v77, 2);
  v78 = (llvm::Value **)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, (uint64_t *)&v274, &v275, 0);
  if (v274)
    llvm::MetadataTracking::untrack((uint64_t)&v274, v274);
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v78, v275, 0, 0);
  ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
  v252 = Ident;
  *(_QWORD *)&v281 = Ident;
  *((_QWORD *)&v281 + 1) = ThreadID;
  v282 = v246;
  v283 = v248;
  v284 = v35;
  v285 = v262;
  v286 = v261;
  v287 = v268;
  v288 = v247;
  v291 = 257;
  sub_1C4774778((uint64_t *)(a1 + 344), v250, v249, (uint64_t *)&v281, 9, (uint64_t)&v289, 0);
  *(_QWORD *)&v289 = "omp_firstchunk.lb";
  v291 = 259;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 392) + 56) + 40) + 272, (uint64_t)v24);
  v81 = v80;
  v82 = (char *)operator new(0x60uLL);
  v83 = v82;
  v84 = (llvm::Value *)(v82 + 32);
  *((_QWORD *)v82 + 2) = 0;
  *((_QWORD *)v82 + 3) = v82 + 32;
  LOWORD(v284) = 257;
  *((_QWORD *)v82 + 4) = v24;
  *((_QWORD *)v82 + 5) = 0;
  *((_WORD *)v82 + 24) = 60;
  *((_DWORD *)v82 + 13) = 1;
  *(_OWORD *)(v82 + 56) = 0u;
  *(_OWORD *)(v82 + 72) = 0u;
  *((_DWORD *)v82 + 22) = 0;
  *(_QWORD *)v82 = v35;
  *((_QWORD *)v82 + 1) = 0;
  if (v35)
  {
    v87 = v35[1];
    v86 = v35 + 1;
    v85 = v87;
    *((_QWORD *)v82 + 1) = v87;
    if (v87)
      *((_QWORD *)v85 + 2) = v82 + 8;
    *((_QWORD *)v82 + 2) = v86;
    *v86 = v82;
  }
  *((_WORD *)v82 + 25) = 2 * (v81 & 0x3F);
  v82[92] = 1;
  llvm::Value::setName((uint64_t ***)v82 + 4, (uint64_t)&v281);
  (*(void (**)(_QWORD, llvm::Value *, __int128 *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v84, &v289, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
  v88 = *(unsigned int *)(a1 + 352);
  if ((_DWORD)v88)
  {
    v196 = *(_QWORD *)(a1 + 344);
    v197 = v196 + 16 * v88;
    v198 = (unsigned __int8 **)(v83 + 80);
    do
    {
      v199 = *(_DWORD *)v196;
      v200 = *(unsigned __int8 **)(v196 + 8);
      if (v200)
      {
        if (!v199)
        {
          v280 = *(unsigned __int8 **)(v196 + 8);
          llvm::MetadataTracking::track((uint64_t)&v280, v200, 2);
          v201 = *v198;
          goto LABEL_206;
        }
      }
      else
      {
        v201 = *v198;
        if (!*v198 && (v83[55] & 0x20) == 0)
          goto LABEL_203;
        if (!v199)
        {
          v280 = 0;
LABEL_206:
          if (v201)
            llvm::MetadataTracking::untrack((uint64_t)(v83 + 80), v201);
          v202 = v280;
          *v198 = v280;
          if (v202)
            llvm::MetadataTracking::retrack((uint64_t)&v280, v202, (uint64_t)(v83 + 80));
          goto LABEL_203;
        }
      }
      llvm::Value::setMetadata(v84, *(_DWORD *)v196, (llvm::MDNode *)v200);
LABEL_203:
      v196 += 16;
    }
    while (v196 != v197);
  }
  *(_QWORD *)&v289 = "omp_firstchunk.ub";
  v291 = 259;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v267 + 56) + 40) + 272, (uint64_t)v24);
  v90 = v89;
  v91 = (char *)operator new(0x60uLL);
  v92 = v91;
  v93 = (llvm::Value *)(v91 + 32);
  *((_QWORD *)v91 + 2) = 0;
  *((_QWORD *)v91 + 3) = v91 + 32;
  LOWORD(v284) = 257;
  *((_QWORD *)v91 + 4) = v24;
  *((_QWORD *)v91 + 5) = 0;
  v94 = (uint64_t *)(v91 + 40);
  *((_WORD *)v91 + 24) = 60;
  *((_DWORD *)v91 + 13) = 1;
  *(_OWORD *)(v91 + 56) = 0u;
  *(_OWORD *)(v91 + 72) = 0u;
  *((_DWORD *)v91 + 22) = 0;
  *(_QWORD *)v91 = v262;
  *((_QWORD *)v91 + 1) = 0;
  if (v262)
  {
    v96 = v262 + 1;
    v95 = v262[1];
    *((_QWORD *)v91 + 1) = v95;
    if (v95)
      *((_QWORD *)v95 + 2) = v91 + 8;
    *((_QWORD *)v91 + 2) = v96;
    *v96 = v91;
  }
  v263 = (uint64_t *)v84;
  *((_WORD *)v91 + 25) = 2 * (v90 & 0x3F);
  v91[92] = 1;
  llvm::Value::setName((uint64_t ***)v91 + 4, (uint64_t)&v281);
  (*(void (**)(_QWORD, llvm::Value *, __int128 *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v93, &v289, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
  v97 = *(unsigned int *)(a1 + 352);
  if ((_DWORD)v97)
  {
    v203 = *(_QWORD *)(a1 + 344);
    v204 = v203 + 16 * v97;
    v205 = (unsigned __int8 **)(v92 + 80);
    do
    {
      v206 = *(_DWORD *)v203;
      v207 = *(unsigned __int8 **)(v203 + 8);
      if (v207)
      {
        if (!v206)
        {
          v280 = *(unsigned __int8 **)(v203 + 8);
          llvm::MetadataTracking::track((uint64_t)&v280, v207, 2);
          v208 = *v205;
          goto LABEL_221;
        }
      }
      else
      {
        v208 = *v205;
        if (!*v205 && (v92[55] & 0x20) == 0)
          goto LABEL_218;
        if (!v206)
        {
          v280 = 0;
LABEL_221:
          if (v208)
            llvm::MetadataTracking::untrack((uint64_t)(v92 + 80), v208);
          v209 = v280;
          *v205 = v280;
          if (v209)
            llvm::MetadataTracking::retrack((uint64_t)&v280, v209, (uint64_t)(v92 + 80));
          goto LABEL_218;
        }
      }
      llvm::Value::setMetadata(v93, *(_DWORD *)v203, (llvm::MDNode *)v207);
LABEL_218:
      v203 += 16;
    }
    while (v203 != v204);
  }
  v291 = 257;
  v98 = (*(uint64_t (**)(_QWORD, llvm::Value *, uint64_t *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 416) + 16))(*(_QWORD *)(a1 + 416), v93, v268, 0, 0);
  if (!v98)
  {
    LOWORD(v284) = 257;
    v99 = (char *)operator new(0x80uLL);
    *((_QWORD *)v99 + 8) = *(_QWORD *)v93;
    v100 = (uint64_t)(v99 + 64);
    *((_QWORD *)v99 + 3) = v99 + 64;
    *((_QWORD *)v99 + 5) = 0;
    *((_QWORD *)v99 + 6) = 0;
    *((_QWORD *)v99 + 7) = v99 + 64;
    *((_QWORD *)v99 + 9) = 0;
    *((_QWORD *)v99 + 10) = 0x200000029;
    *(_OWORD *)(v99 + 88) = 0u;
    *(_OWORD *)(v99 + 104) = 0u;
    *((_DWORD *)v99 + 30) = 0;
    *(_QWORD *)v99 = v93;
    v101 = *v94;
    *((_QWORD *)v99 + 1) = *v94;
    if (v101)
      *(_QWORD *)(v101 + 16) = v99 + 8;
    *((_QWORD *)v99 + 2) = v94;
    *v94 = (uint64_t)v99;
    *((_QWORD *)v99 + 4) = v268;
    v102 = v268[1];
    *((_QWORD *)v99 + 5) = v102;
    if (v102)
      *(_QWORD *)(v102 + 16) = v99 + 40;
    *((_QWORD *)v99 + 6) = v73;
    *v73 = v99 + 32;
    llvm::Value::setName((uint64_t ***)v99 + 8, (uint64_t)&v281);
    v98 = sub_1C4773754((uint64_t *)(a1 + 344), v100, (uint64_t)&v289);
  }
  *(_QWORD *)&v281 = "omp_chunk.range";
  LOWORD(v284) = 259;
  v103 = sub_1C47733F8(a1 + 344, v98, (uint64_t)v263, (uint64_t)&v281, 0, 0);
  *(_QWORD *)&v289 = "omp_dispatch.stride";
  v291 = 259;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v267 + 56) + 40) + 272, (uint64_t)v24);
  v105 = v104;
  v106 = (char *)operator new(0x60uLL);
  v107 = v106;
  v108 = (llvm::Value *)(v106 + 32);
  *((_QWORD *)v106 + 2) = 0;
  *((_QWORD *)v106 + 3) = v106 + 32;
  LOWORD(v284) = 257;
  *((_QWORD *)v106 + 4) = v24;
  *((_QWORD *)v106 + 5) = 0;
  *((_WORD *)v106 + 24) = 60;
  *((_DWORD *)v106 + 13) = 1;
  *(_OWORD *)(v106 + 56) = 0u;
  *(_OWORD *)(v106 + 72) = 0u;
  *((_DWORD *)v106 + 22) = 0;
  *(_QWORD *)v106 = v261;
  *((_QWORD *)v106 + 1) = 0;
  if (v261)
  {
    v110 = v261 + 1;
    v109 = v261[1];
    *((_QWORD *)v106 + 1) = v109;
    if (v109)
      *((_QWORD *)v109 + 2) = v106 + 8;
    *((_QWORD *)v106 + 2) = v110;
    *v110 = v106;
  }
  *((_WORD *)v106 + 25) = 2 * (v105 & 0x3F);
  v106[92] = 1;
  llvm::Value::setName((uint64_t ***)v106 + 4, (uint64_t)&v281);
  (*(void (**)(_QWORD, llvm::Value *, __int128 *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v108, &v289, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
  v111 = *(unsigned int *)(a1 + 352);
  if ((_DWORD)v111)
  {
    v210 = *(_QWORD *)(a1 + 344);
    v211 = v210 + 16 * v111;
    v212 = (unsigned __int8 **)(v107 + 80);
    do
    {
      v213 = *(_DWORD *)v210;
      v214 = *(unsigned __int8 **)(v210 + 8);
      if (v214)
      {
        if (!v213)
        {
          v280 = *(unsigned __int8 **)(v210 + 8);
          llvm::MetadataTracking::track((uint64_t)&v280, v214, 2);
          v215 = *v212;
          goto LABEL_236;
        }
      }
      else
      {
        v215 = *v212;
        if (!*v212 && (v107[55] & 0x20) == 0)
          goto LABEL_233;
        if (!v213)
        {
          v280 = 0;
LABEL_236:
          if (v215)
            llvm::MetadataTracking::untrack((uint64_t)(v107 + 80), v215);
          v216 = v280;
          *v212 = v280;
          if (v216)
            llvm::MetadataTracking::retrack((uint64_t)&v280, v216, (uint64_t)(v107 + 80));
          goto LABEL_233;
        }
      }
      llvm::Value::setMetadata(v108, *(_DWORD *)v210, (llvm::MDNode *)v214);
LABEL_233:
      v210 += 16;
    }
    while (v210 != v211);
  }
  llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)(a1 + 344), (unsigned __int8 **)&v289);
  v112 = *(uint64_t **)(a1 + 392);
  v113 = *(uint64_t **)(a1 + 400);
  v114 = *(_QWORD *)*v112;
  if ((*((_BYTE *)v112 + 23) & 0x10) != 0)
  {
    v115 = *(_QWORD *)(*(_QWORD *)v114 + 152);
    v116 = *(unsigned int *)(*(_QWORD *)v114 + 168);
    if ((_DWORD)v116)
    {
      LODWORD(v117) = (v116 - 1) & ((v112 >> 4) ^ (v112 >> 9));
      v118 = (uint64_t **)(v115 + 16 * v117);
      v119 = *v118;
      if (*v118 == v112)
      {
LABEL_88:
        v122 = v118[1];
        v125 = *v122;
        v123 = (char *)(v122 + 2);
        v124 = v125;
        goto LABEL_89;
      }
      v120 = 1;
      while (v119 != (uint64_t *)-4096)
      {
        v121 = v117 + v120++;
        v117 = v121 & (v116 - 1);
        v119 = *(uint64_t **)(v115 + 16 * v117);
        if (v119 == v112)
        {
          v118 = (uint64_t **)(v115 + 16 * v117);
          goto LABEL_88;
        }
      }
    }
    v118 = (uint64_t **)(v115 + 16 * v116);
    goto LABEL_88;
  }
  v124 = 0;
  v123 = &byte_1C871356D;
LABEL_89:
  LOWORD(v284) = 261;
  *(_QWORD *)&v281 = v123;
  *((_QWORD *)&v281 + 1) = v124;
  v126 = v112[7];
  v127 = v112[4];
  v128 = operator new();
  *(_QWORD *)v128 = *(_QWORD *)v114 + 1600;
  *(_QWORD *)(v128 + 8) = 0;
  v129 = *(_DWORD *)(v128 + 20) & 0xC0000000;
  *(_QWORD *)(v128 + 24) = 0;
  v130 = v128 + 24;
  *(_DWORD *)(v128 + 16) = 22;
  *(_DWORD *)(v128 + 20) = v129;
  *(_QWORD *)(v128 + 32) = 0;
  *(_QWORD *)(v128 + 40) = v128 + 40;
  *(_QWORD *)(v128 + 48) = v128 + 40;
  *(_QWORD *)(v128 + 56) = 0;
  if (v126)
  {
    v131 = v127 == v126 + 72 || v127 == 0;
    v132 = v127 - 24;
    if (v131)
      v132 = 0;
    v133 = (uint64_t *)(v132 + 24);
    if (v131)
      v134 = (uint64_t *)(v126 + 72);
    else
      v134 = v133;
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v126 + 72, (_QWORD *)v128);
    v135 = *v134;
    *(_QWORD *)(v128 + 24) = *v134;
    *(_QWORD *)(v128 + 32) = v134;
    *(_QWORD *)(v135 + 8) = v130;
    *v134 = v130;
  }
  llvm::Value::setName((uint64_t ***)v128, (uint64_t)&v281);
  sub_1C54E6218(v112, v113, v128, 1);
  llvm::BasicBlock::replaceSuccessorsPhiUsesWith((llvm::BasicBlock *)v128, (llvm::BasicBlock *)v112, (llvm::BasicBlock *)v128);
  v136 = 0;
  v137 = *(_QWORD *)(*(_QWORD *)(a1 + 392) + 40);
  if (v137)
    v138 = v137 - 24;
  else
    v138 = 0;
  if (*(unsigned __int8 *)(v138 + 16) - 29 >= 0xB)
    v138 = 0;
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(v138 + 40);
  *(_QWORD *)(a1 + 400) = v138 + 24;
  v139 = *(unsigned __int8 **)(v138 + 48);
  *(_QWORD *)&v281 = v139;
  if (v139)
  {
    llvm::MetadataTracking::track((uint64_t)&v281, v139, 2);
    v136 = v281;
  }
  sub_1C4774EF4(a1 + 344, 0, v136);
  if ((_QWORD)v281)
    llvm::MetadataTracking::untrack((uint64_t)&v281, (unsigned __int8 *)v281);
  *(_QWORD *)&v281 = v289;
  if ((_QWORD)v289)
  {
    llvm::MetadataTracking::track((uint64_t)&v281, (unsigned __int8 *)v289, 2);
    v140 = v281;
  }
  else
  {
    v140 = 0;
  }
  sub_1C4774EF4(a1 + 344, 0, v140);
  if ((_QWORD)v281)
    llvm::MetadataTracking::untrack((uint64_t)&v281, (unsigned __int8 *)v281);
  if ((_QWORD)v289)
    llvm::MetadataTracking::untrack((uint64_t)&v289, (unsigned __int8 *)v289);
  v280 = 0;
  v289 = *(_OWORD *)v267;
  v290[0] = *v266;
  if (v290[0])
    llvm::MetadataTracking::track((uint64_t)v290, v290[0], 2);
  v273 = (unsigned __int8 *)&v280;
  *(_QWORD *)&v281 = "dispatch";
  LOWORD(v284) = 259;
  v141 = llvm::OpenMPIRBuilder::createCanonicalLoop(a1, &v289, (uint64_t)sub_1C54E9A90, (uint64_t)&v273, v263, v264, (uint64_t)v108, 0, 0, 0, (uint64_t *)&v281);
  if (v290[0])
    llvm::MetadataTracking::untrack((uint64_t)v290, v290[0]);
  v142 = (char **)v141[2];
  v143 = *((_QWORD *)v141[1] + 5);
  if (v143)
    v144 = v143 - 24;
  else
    v144 = 0;
  if (*(unsigned __int8 *)(v144 + 16) - 29 >= 0xB)
    v144 = 0;
  v145 = *(llvm::BasicBlock **)(v144 - 32);
  v146 = v141[3];
  SingleSuccessor = (llvm::BasicBlock *)llvm::BasicBlock::getSingleSuccessor(v146);
  *(_OWORD *)v141 = 0u;
  *((_OWORD *)v141 + 1) = 0u;
  v148 = (char **)llvm::BasicBlock::getSingleSuccessor(*((llvm::BasicBlock **)a3 + 3));
  v149 = *v266;
  v272 = v149;
  if (v149)
    llvm::MetadataTracking::track((uint64_t)&v272, v149, 2);
  sub_1C54DE244(SingleSuccessor, v148, &v272);
  if (v272)
    llvm::MetadataTracking::untrack((uint64_t)&v272, v272);
  v150 = (llvm::BasicBlock *)*((_QWORD *)a3 + 3);
  v151 = *v266;
  v271 = v151;
  if (v151)
    llvm::MetadataTracking::track((uint64_t)&v271, v151, 2);
  sub_1C54DE244(v150, v142, &v271);
  if (v271)
    llvm::MetadataTracking::untrack((uint64_t)&v271, v271);
  v152 = *v266;
  v270 = v152;
  if (v152)
    llvm::MetadataTracking::track((uint64_t)&v270, v152, 2);
  sub_1C54DE244(v145, (char **)v128, &v270);
  if (v270)
    llvm::MetadataTracking::untrack((uint64_t)&v270, v270);
  v153 = llvm::CanonicalLoopInfo::getPreheader(a3);
  if (v153)
  {
    sub_1C4D8AE2C(a1 + 344, v153, *(_QWORD *)(v153 + 40));
  }
  else
  {
    *(_QWORD *)v267 = 0;
    *(_QWORD *)(a1 + 400) = 0;
  }
  v154 = *v266;
  v269 = v154;
  if (v154)
  {
    llvm::MetadataTracking::track((uint64_t)&v269, v154, 2);
    v155 = v269;
  }
  else
  {
    v155 = 0;
  }
  sub_1C4774EF4(a1 + 344, 0, (uint64_t)v155);
  if (v269)
    llvm::MetadataTracking::untrack((uint64_t)&v269, v269);
  v156 = llvm::CanonicalLoopInfo::getPreheader(a3);
  v157 = 0;
  v158 = *(_QWORD *)(v156 + 40);
  if (v158)
    v159 = v158 - 24;
  else
    v159 = 0;
  if (*(unsigned __int8 *)(v159 + 16) - 29 >= 0xB)
    v159 = 0;
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(v159 + 40);
  *(_QWORD *)(a1 + 400) = v159 + 24;
  v160 = *(unsigned __int8 **)(v159 + 48);
  *(_QWORD *)&v281 = v160;
  if (v160)
  {
    llvm::MetadataTracking::track((uint64_t)&v281, v160, 2);
    v157 = v281;
  }
  sub_1C4774EF4(a1 + 344, 0, v157);
  if ((_QWORD)v281)
    llvm::MetadataTracking::untrack((uint64_t)&v281, (unsigned __int8 *)v281);
  v161 = v280;
  v291 = 257;
  v162 = (*(uint64_t (**)(_QWORD, unsigned __int8 *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 416) + 16))(*(_QWORD *)(a1 + 416), v280, v103, 0, 0);
  if (!v162)
  {
    LOWORD(v284) = 257;
    v163 = (char *)operator new(0x80uLL);
    *(_QWORD *)v163 = 0;
    *((_QWORD *)v163 + 2) = 0;
    *((_QWORD *)v163 + 1) = 0;
    *((_QWORD *)v163 + 5) = 0;
    *((_QWORD *)v163 + 6) = 0;
    *((_QWORD *)v163 + 4) = 0;
    v164 = (uint64_t *)(v163 + 32);
    *((_QWORD *)v163 + 8) = *(_QWORD *)v161;
    v165 = (uint64_t)(v163 + 64);
    *((_QWORD *)v163 + 3) = v163 + 64;
    *((_QWORD *)v163 + 7) = v163 + 64;
    *((_QWORD *)v163 + 9) = 0;
    v163[80] = 41;
    v163[81] = 0;
    *((_WORD *)v163 + 41) = 0;
    *((_DWORD *)v163 + 21) = 2;
    *((_DWORD *)v163 + 30) = 0;
    *(_OWORD *)(v163 + 104) = 0u;
    *(_OWORD *)(v163 + 88) = 0u;
    *(_QWORD *)v163 = v161;
    v168 = *((_QWORD *)v161 + 1);
    v167 = v161 + 8;
    v166 = v168;
    *((_QWORD *)v163 + 1) = v168;
    if (v168)
      *(_QWORD *)(v166 + 16) = v163 + 8;
    *((_QWORD *)v163 + 2) = v167;
    *v167 = v163;
    if (*((_QWORD *)v163 + 4))
    {
      **((_QWORD **)v163 + 6) = *((_QWORD *)v163 + 5);
      v245 = *((_QWORD *)v163 + 5);
      if (v245)
        *(_QWORD *)(v245 + 16) = *((_QWORD *)v163 + 6);
    }
    *v164 = v103;
    if (v103)
    {
      v169 = (uint64_t **)(v103 + 8);
      v170 = *(_QWORD *)(v103 + 8);
      *((_QWORD *)v163 + 5) = v170;
      if (v170)
        *(_QWORD *)(v170 + 16) = v163 + 40;
      *((_QWORD *)v163 + 6) = v169;
      *v169 = v164;
    }
    llvm::Value::setName((uint64_t ***)v163 + 8, (uint64_t)&v281);
    v162 = sub_1C4773754((uint64_t *)(a1 + 344), v165, (uint64_t)&v289);
  }
  *(_QWORD *)&v281 = "omp_chunk.is_last";
  LOWORD(v284) = 259;
  v171 = sub_1C4774B48(a1 + 344, 35, v162, (uint64_t)v264, (uint64_t)&v281);
  LOWORD(v284) = 257;
  v172 = (uint64_t *)sub_1C47733F8(a1 + 344, (uint64_t)v264, (uint64_t)v280, (uint64_t)&v281, 0, 0);
  *(_QWORD *)&v281 = "omp_chunk.tripcount";
  LOWORD(v284) = 259;
  Select = (unsigned __int8 *)llvm::IRBuilderBase::CreateSelect((uint64_t *)(a1 + 344), v171, v172, v103, (uint64_t)&v281, 0);
  *(_QWORD *)&v281 = "omp_chunk.tripcount.trunc";
  LOWORD(v284) = 259;
  v174 = sub_1C4773E38((uint64_t *)(a1 + 344), 38, Select, v257, (uint64_t)&v281);
  v175 = *(_QWORD *)(*((_QWORD *)a3 + 1) + 48);
  if (v175)
    v176 = v175 - 24;
  else
    v176 = 0;
  v177 = *(_DWORD *)(v176 + 20);
  if ((v177 & 0x40000000) != 0)
    v178 = *(_QWORD *)(v176 - 8);
  else
    v178 = v176 - 32 * (v177 & 0x7FFFFFF);
  v179 = (unsigned __int8 **)(v178 + 32);
  if (*(_QWORD *)(v178 + 32))
  {
    **(_QWORD **)(v178 + 48) = *(_QWORD *)(v178 + 40);
    v180 = *(_QWORD *)(v178 + 40);
    if (v180)
      *(_QWORD *)(v180 + 16) = *(_QWORD *)(v178 + 48);
  }
  *v179 = v174;
  if (v174)
  {
    v183 = *((_QWORD *)v174 + 1);
    v181 = (unsigned __int8 ***)(v174 + 8);
    v182 = v183;
    *(_QWORD *)(v178 + 40) = v183;
    if (v183)
      *(_QWORD *)(v182 + 16) = v178 + 40;
    *(_QWORD *)(v178 + 48) = v181;
    *v181 = v179;
  }
  *(_QWORD *)&v281 = "omp_dispatch.iv.trunc";
  LOWORD(v284) = 259;
  v273 = sub_1C4773E38((uint64_t *)(a1 + 344), 38, v280, v257, (uint64_t)&v281);
  *(_QWORD *)&v281 = a1;
  *((_QWORD *)&v281 + 1) = &v279;
  v282 = (unsigned __int8 *)&v278;
  v283 = &v273;
  llvm::CanonicalLoopInfo::mapIndVar(a3, (uint64_t (*)(uint64_t, uint64_t))sub_1C54E9A9C, (uint64_t)&v281);
  v184 = (uint64_t)v146 + 40;
  v185 = (_QWORD *)*((_QWORD *)v146 + 6);
  if (v185 == (_QWORD *)((char *)v146 + 40))
  {
    v187 = ThreadID;
    v186 = v252;
  }
  else
  {
    v187 = ThreadID;
    v186 = v252;
    while (1)
    {
      v188 = v185 - 3;
      if (!v185)
        v188 = 0;
      if (*((_BYTE *)v188 + 16) != 83)
        break;
      v185 = (_QWORD *)v185[1];
      if (v185 == (_QWORD *)v184)
        goto LABEL_187;
    }
    v189 = *((unsigned __int8 *)v185 - 8) - 38;
    v190 = v189 > 0x38;
    v191 = (1 << v189) & 0x100060000000001;
    if (v190 || v191 == 0)
      v184 = (uint64_t)v185;
    else
      v184 = v185[1];
  }
LABEL_187:
  sub_1C4D8AE2C(a1 + 344, (uint64_t)v146, v184);
  *(_QWORD *)&v289 = v186;
  *((_QWORD *)&v289 + 1) = v187;
  LOWORD(v284) = 257;
  sub_1C4774778((uint64_t *)(a1 + 344), v259, v258, (uint64_t *)&v289, 2, (uint64_t)&v281, 0);
  if (a6)
  {
    v281 = *(_OWORD *)v267;
    v282 = *v266;
    if (v282)
      llvm::MetadataTracking::track((uint64_t)&v282, v282, 2);
    if (sub_1C62683AC(a1, (uint64_t *)&v281))
      llvm::OpenMPIRBuilder::emitBarrierImpl(a1, &v281, 33, 0, 0);
    if (v282)
      llvm::MetadataTracking::untrack((uint64_t)&v282, v282);
  }
  for (i = (_QWORD *)*((_QWORD *)SingleSuccessor + 6); i != (_QWORD *)((char *)SingleSuccessor + 40); i = (_QWORD *)i[1])
  {
    v194 = i - 3;
    if (!i)
      v194 = 0;
    if (*((_BYTE *)v194 + 16) != 83)
      break;
  }
  return SingleSuccessor;
}

void sub_1C54DE244(llvm::BasicBlock *a1, char **a2, unsigned __int8 **a3)
{
  llvm::BasicBlock *v6;
  llvm::BasicBlock **v7;
  char *v8;
  uint64_t v9;
  llvm::BasicBlock *v10;
  char **v11;
  llvm::BasicBlock *v12;
  char *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 **v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;

  v6 = (llvm::BasicBlock *)*((_QWORD *)a1 + 5);
  if (v6 == (llvm::BasicBlock *)((char *)a1 + 40)
    || (v6 ? (v7 = (llvm::BasicBlock **)((char *)v6 - 24)) : (v7 = 0),
        *((unsigned __int8 *)v7 + 16) - 29 > 0xA))
  {
    v13 = (char *)operator new(0x60uLL);
    *((_DWORD *)v13 + 13) = *((_DWORD *)v13 + 13) & 0x38000000 | 1;
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = 0;
    *((_QWORD *)v13 + 2) = 0;
    *((_QWORD *)v13 + 3) = v13 + 32;
    llvm::BranchInst::BranchInst((llvm::BranchInst *)(v13 + 32), (llvm::BasicBlock *)a2, a1);
    v14 = *a3;
    v19 = v14;
    if (v14)
      llvm::MetadataTracking::track((uint64_t)&v19, v14, 2);
    v17 = (unsigned __int8 *)*((_QWORD *)v13 + 10);
    v16 = (unsigned __int8 **)(v13 + 80);
    v15 = v17;
    if (v17)
      llvm::MetadataTracking::untrack((uint64_t)v16, v15);
    v18 = v19;
    *v16 = v19;
    if (v18)
      llvm::MetadataTracking::retrack((uint64_t)&v19, v18, (uint64_t)v16);
  }
  else
  {
    v8 = (char *)(v7 - 4);
    llvm::BasicBlock::removePredecessor(*(v7 - 4), a1, 1);
    if (*(v7 - 4))
    {
      *(_QWORD *)*(v7 - 2) = *(v7 - 3);
      v9 = (uint64_t)*(v7 - 3);
      if (v9)
        *(_QWORD *)(v9 + 16) = *(v7 - 2);
    }
    *(_QWORD *)v8 = a2;
    if (a2)
    {
      v12 = (llvm::BasicBlock *)a2[1];
      v11 = a2 + 1;
      v10 = v12;
      *(v7 - 3) = v12;
      if (v12)
        *((_QWORD *)v10 + 2) = v7 - 3;
      *(v7 - 2) = (llvm::BasicBlock *)v11;
      *v11 = v8;
    }
  }
}

void llvm::OpenMPIRBuilder::applyWorkshareLoop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  __asm { BR              X14 }
}

uint64_t sub_1C54DE3D8@<X0>(unsigned __int8 **a1@<X1>, int a2@<W8>)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  llvm::CanonicalLoopInfo *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 **v21;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30[11];

  if (v7)
    v10 = 1;
  else
    v10 = 2;
  if (v3)
    v11 = 64;
  else
    v11 = 32;
  v12 = v10 | v11;
  if (v12 == 79)
    v13 = 69;
  else
    v13 = v12;
  if (v12 == 78)
    v14 = 68;
  else
    v14 = v13;
  if ((v14 & 0xFu) - 1 < 2)
    v3 = 1;
  if (v3)
    v15 = v14;
  else
    v15 = v14 | 0x40000000;
  if (v2)
    v16 = v14 | 0x40000000;
  else
    v16 = v15;
  if (a2)
    v17 = v14 | 0x20000000;
  else
    v17 = v16;
  if (((1 << (v17 & 0x1F)) & 0xFF78) != 0)
  {
    v18 = *a1;
    v26 = v18;
    if (v18)
      llvm::MetadataTracking::track((uint64_t)&v26, v18, 2);
    v19 = llvm::OpenMPIRBuilder::applyDynamicWorkshareLoop(v9, &v26, v8, v6, v5, v17, v4, v7);
    v20 = v26;
    if (v26)
    {
      v21 = &v26;
LABEL_29:
      llvm::MetadataTracking::untrack((uint64_t)v21, v20);
    }
  }
  else if ((v17 & 0x1FFFFF1F) == 1)
  {
    v23 = *a1;
    if ((v17 & 0x40) != 0)
    {
      v28 = v23;
      if (v23)
        llvm::MetadataTracking::track((uint64_t)&v28, v23, 2);
      v19 = llvm::OpenMPIRBuilder::applyDynamicWorkshareLoop(v9, &v28, v8, v6, v5, v17, v4, v7);
      v20 = v28;
      if (v28)
      {
        v21 = &v28;
        goto LABEL_29;
      }
    }
    else
    {
      v27 = v23;
      if (v23)
        llvm::MetadataTracking::track((uint64_t)&v27, v23, 2);
      v19 = (uint64_t)llvm::OpenMPIRBuilder::applyStaticChunkedWorkshareLoop(v9, &v27, v8, v6, v5, v4, (unsigned __int8 *)v7);
      v20 = v27;
      if (v27)
      {
        v21 = &v27;
        goto LABEL_29;
      }
    }
  }
  else
  {
    v24 = *a1;
    if ((v17 & 0x40) != 0)
    {
      v30[0] = v24;
      if (v24)
        llvm::MetadataTracking::track((uint64_t)v30, v24, 2);
      v19 = llvm::OpenMPIRBuilder::applyDynamicWorkshareLoop(v9, v30, v8, v6, v5, v17, v4, v7);
      v20 = v30[0];
      if (v30[0])
      {
        v21 = v30;
        goto LABEL_29;
      }
    }
    else
    {
      v29 = v24;
      if (v24)
        llvm::MetadataTracking::track((uint64_t)&v29, v24, 2);
      llvm::OpenMPIRBuilder::applyStaticWorkshareLoop(v9, &v29, v8, v6, v5, v4);
      v19 = v25;
      v20 = v29;
      if (v29)
      {
        v21 = &v29;
        goto LABEL_29;
      }
    }
  }
  return v19;
}

uint64_t llvm::OpenMPIRBuilder::applyDynamicWorkshareLoop(uint64_t a1, unsigned __int8 **a2, llvm::CanonicalLoopInfo *a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t *a8)
{
  uint64_t *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  llvm::Value **v17;
  llvm::ConstantInt *v18;
  int v19;
  llvm::PointerType *RuntimeFunction;
  uint64_t v21;
  int v22;
  llvm::PointerType *v23;
  uint64_t v24;
  llvm::PointerType *v25;
  unsigned __int8 **v26;
  uint64_t Preheader;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t *v32;
  char v33;
  char v34;
  char *v35;
  char *v36;
  unsigned __int8 ***v37;
  llvm::Value *v38;
  uint64_t v39;
  _QWORD *v40;
  unsigned __int8 ****v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t *v48;
  char v49;
  char v50;
  char *v51;
  char *v52;
  unsigned __int8 ***v53;
  llvm::Value *v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned __int8 ****v57;
  unsigned __int8 *v58;
  uint64_t v59;
  char v60;
  char v61;
  char *v62;
  char *v63;
  unsigned __int8 ***v64;
  llvm::Value *v65;
  uint64_t v66;
  unsigned __int8 ****v67;
  unsigned __int8 *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t ThreadID;
  unsigned __int8 *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  int v80;
  int v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t i;
  uint64_t v93;
  unsigned int v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v98;
  llvm::Value **v99;
  char v100;
  char v101;
  char *v102;
  char *v103;
  llvm::Value *v104;
  unsigned __int8 *v105;
  _QWORD *v106;
  unsigned __int8 *v107;
  uint64_t v108;
  __int128 *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  unsigned __int8 **v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  char v129;
  char v130;
  char *v131;
  char *v132;
  llvm::Value *v133;
  uint64_t *v134;
  unsigned __int8 *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v146;
  uint64_t v147;
  unsigned __int8 **v148;
  int v149;
  unsigned __int8 *v150;
  unsigned __int8 *v151;
  unsigned __int8 *v152;
  uint64_t v153;
  uint64_t v154;
  unsigned __int8 **v155;
  int v156;
  unsigned __int8 *v157;
  unsigned __int8 *v158;
  uint64_t v159;
  unsigned __int8 **v160;
  unsigned __int8 *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned __int8 *v165;
  int v166;
  uint64_t **v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned __int8 *v172;
  uint64_t v173;
  llvm::BasicBlock *v174;
  llvm::BasicBlock *v175;
  int v176;
  unsigned __int8 *v177;
  unsigned __int8 *v178;
  llvm::BasicBlock *v179;
  unsigned __int8 *v180;
  uint64_t v181;
  llvm::BasicBlock *v182;
  unsigned __int8 **v183;
  int v184;
  unsigned __int8 *v185;
  unsigned __int8 *v186;
  unsigned __int8 *v187;
  uint64_t v188;
  llvm::BasicBlock *v189;
  unsigned __int8 **v190;
  int v191;
  unsigned __int8 *v192;
  unsigned __int8 *v193;
  unsigned __int8 *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t SingleSuccessor;
  llvm::BasicBlock *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t **v203;
  unsigned __int8 *v204;
  uint64_t v205;
  uint64_t **v206;
  _QWORD *v207;
  unsigned __int8 **v209;
  llvm::CanonicalLoopInfo *v210;
  uint64_t v211;
  unsigned __int8 **v212;
  unsigned __int8 **v213;
  unsigned __int8 **v214;
  unsigned __int8 **v215;
  unsigned __int8 **v216;
  unsigned __int8 **v217;
  llvm::BasicBlock *v218;
  llvm::BasicBlock *v219;
  llvm::BasicBlock *v220;
  llvm::BasicBlock *v221;
  llvm::BasicBlock *v222;
  llvm::BasicBlock *v223;
  llvm::BasicBlock *v224;
  llvm::BasicBlock *v225;
  llvm::BasicBlock *v226;
  llvm::BasicBlock *v227;
  llvm::BasicBlock *v228;
  _QWORD *v230;
  llvm::ConstantInt *v231;
  llvm::UndefValue *Ident;
  unsigned __int8 **v234;
  llvm::Value *v235;
  unsigned __int8 **v236;
  unsigned __int8 **v237;
  unsigned __int8 **v238;
  unsigned __int8 **v239;
  uint64_t *v240;
  uint64_t v241;
  llvm::ConstantInt *v242;
  unsigned __int8 *v243;
  unsigned int v244;
  unsigned __int8 *v245;
  unsigned __int8 *v246;
  __int128 v247;
  unsigned __int8 *v248;
  void *v249;
  void *v250;
  void *v251;
  uint64_t *v252;
  uint64_t v253[4];
  __int16 v254;
  uint64_t v255;

  v255 = *MEMORY[0x1E0C80C00];
  v13 = (uint64_t *)(a1 + 344);
  v14 = *a2;
  v245 = v14;
  if (v14)
  {
    llvm::MetadataTracking::track((uint64_t)&v245, v14, 2);
    v15 = v245;
  }
  else
  {
    v15 = 0;
  }
  sub_1C4774EF4((uint64_t)v13, 0, (uint64_t)v15);
  if (v245)
    llvm::MetadataTracking::untrack((uint64_t)&v245, v245);
  v244 = 0;
  v209 = a2;
  v16 = *a2;
  v243 = v16;
  if (v16)
    llvm::MetadataTracking::track((uint64_t)&v243, v16, 2);
  v17 = (llvm::Value **)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, (uint64_t *)&v243, &v244, 0);
  if (v243)
    llvm::MetadataTracking::untrack((uint64_t)&v243, v243);
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v17, v244, 0, 0);
  v18 = *(llvm::ConstantInt **)(*(_QWORD *)(*(_QWORD *)a3 + 48) - 24);
  if ((*((_DWORD *)v18 + 2) & 0xFFFFFF00) == 0x2000)
    v19 = 73;
  else
    v19 = 75;
  RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(_QWORD *)(a1 + 336), v19);
  v202 = v21;
  v203 = (uint64_t **)RuntimeFunction;
  v242 = v18;
  if ((*((_DWORD *)v18 + 2) & 0xFFFFFF00) == 0x2000)
    v22 = 77;
  else
    v22 = 79;
  v23 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(_QWORD *)(a1 + 336), v22);
  v205 = v24;
  v206 = (uint64_t **)v23;
  if (a4)
  {
    sub_1C4D8AE2C((uint64_t)v13, a4, a5);
  }
  else
  {
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 400) = 0;
  }
  v25 = (llvm::PointerType *)(***(_QWORD ***)(a1 + 336) + 1960);
  *(_QWORD *)&v247 = "p.lastiter";
  LOWORD(v250) = 259;
  v231 = v25;
  v204 = (unsigned __int8 *)sub_1C486A5CC(v13, v25, 0, (uint64_t)&v247);
  *(_QWORD *)&v247 = "p.lowerbound";
  LOWORD(v250) = 259;
  v26 = sub_1C486A5CC(v13, v18, 0, (uint64_t)&v247);
  *(_QWORD *)&v247 = "p.upperbound";
  LOWORD(v250) = 259;
  v236 = sub_1C486A5CC(v13, v18, 0, (uint64_t)&v247);
  *(_QWORD *)&v247 = "p.stride";
  LOWORD(v250) = 259;
  v234 = sub_1C486A5CC(v13, v18, 0, (uint64_t)&v247);
  Preheader = llvm::CanonicalLoopInfo::getPreheader(a3);
  v28 = 0;
  v29 = *(_QWORD *)(Preheader + 40);
  v207 = (_QWORD *)(Preheader + 40);
  if (v29)
    v30 = v29 - 24;
  else
    v30 = 0;
  if (*(unsigned __int8 *)(v30 + 16) - 29 >= 0xB)
    v30 = 0;
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(v30 + 40);
  *(_QWORD *)(a1 + 400) = v30 + 24;
  v31 = *(unsigned __int8 **)(v30 + 48);
  *(_QWORD *)&v247 = v31;
  if (v31)
  {
    llvm::MetadataTracking::track((uint64_t)&v247, v31, 2);
    v28 = v247;
  }
  sub_1C4774EF4((uint64_t)v13, 0, v28);
  if ((_QWORD)v247)
    llvm::MetadataTracking::untrack((uint64_t)&v247, (unsigned __int8 *)v247);
  v32 = (uint64_t *)llvm::ConstantInt::get(v18, 1, 0);
  v241 = a1 + 392;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 392) + 56) + 40) + 272, *v32);
  v34 = v33;
  v35 = (char *)operator new(0x80uLL);
  v36 = v35;
  *((_DWORD *)v35 + 21) = *((_DWORD *)v35 + 21) & 0x38000000 | 2;
  *(_QWORD *)v35 = 0;
  *((_QWORD *)v35 + 2) = 0;
  *((_QWORD *)v35 + 1) = 0;
  *((_QWORD *)v35 + 5) = 0;
  *((_QWORD *)v35 + 6) = 0;
  *((_QWORD *)v35 + 4) = 0;
  v37 = (unsigned __int8 ***)(v35 + 32);
  *((_QWORD *)v35 + 8) = **(_QWORD **)*v32 + 1576;
  v38 = (llvm::Value *)(v35 + 64);
  *((_QWORD *)v35 + 3) = v35 + 64;
  *((_QWORD *)v35 + 7) = v35 + 64;
  *((_QWORD *)v35 + 9) = 0;
  v35[80] = 61;
  v35[81] = 0;
  *((_WORD *)v35 + 41) = 0;
  *((_DWORD *)v35 + 21) = 2;
  *(_OWORD *)(v35 + 88) = 0u;
  *(_OWORD *)(v35 + 104) = 0u;
  *((_DWORD *)v35 + 30) = 0;
  *(_QWORD *)v35 = v32;
  v40 = v32 + 1;
  v39 = v32[1];
  *((_QWORD *)v35 + 1) = v39;
  if (v39)
    *(_QWORD *)(v39 + 16) = v35 + 8;
  *((_QWORD *)v35 + 2) = v40;
  *v40 = v35;
  if (*((_QWORD *)v35 + 4))
  {
    **((_QWORD **)v35 + 6) = *((_QWORD *)v35 + 5);
    v195 = *((_QWORD *)v35 + 5);
    if (v195)
      *(_QWORD *)(v195 + 16) = *((_QWORD *)v35 + 6);
  }
  *v37 = v26;
  if (v26)
  {
    v41 = (unsigned __int8 ****)(v26 + 1);
    v42 = v26[1];
    *((_QWORD *)v35 + 5) = v42;
    if (v42)
      *((_QWORD *)v42 + 2) = v35 + 40;
    *((_QWORD *)v35 + 6) = v41;
    *v41 = v37;
  }
  v240 = v13;
  *((_WORD *)v35 + 41) = 2 * (v34 & 0x3F);
  v35[124] = 1;
  LOWORD(v250) = 257;
  (*(void (**)(_QWORD, llvm::Value *, __int128 *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v38, &v247, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
  v43 = *(unsigned int *)(a1 + 352);
  if ((_DWORD)v43)
  {
    v173 = *(_QWORD *)(a1 + 344);
    v174 = (llvm::BasicBlock *)(v173 + 16 * v43);
    v175 = (llvm::BasicBlock *)(v36 + 112);
    do
    {
      v176 = *(_DWORD *)v173;
      v177 = *(unsigned __int8 **)(v173 + 8);
      if (v177)
      {
        if (!v176)
        {
          v253[0] = *(_QWORD *)(v173 + 8);
          v220 = v175;
          llvm::MetadataTracking::track((uint64_t)v253, v177, 2);
          v175 = v220;
          v178 = *(unsigned __int8 **)v220;
          goto LABEL_212;
        }
      }
      else
      {
        v178 = *(unsigned __int8 **)v175;
        if (!*(_QWORD *)v175 && (v36[87] & 0x20) == 0)
          goto LABEL_209;
        if (!v176)
        {
          v253[0] = 0;
LABEL_212:
          if (v178)
          {
            v222 = v175;
            llvm::MetadataTracking::untrack((uint64_t)v175, v178);
            v175 = v222;
          }
          v180 = (unsigned __int8 *)v253[0];
          *(_QWORD *)v175 = v253[0];
          if (v180)
          {
            v221 = v175;
            llvm::MetadataTracking::retrack((uint64_t)v253, v180, (uint64_t)v175);
            v175 = v221;
          }
          goto LABEL_209;
        }
      }
      v219 = v174;
      v179 = v175;
      llvm::Value::setMetadata(v38, *(_DWORD *)v173, (llvm::MDNode *)v177);
      v175 = v179;
      v174 = v219;
LABEL_209:
      v173 += 16;
    }
    while ((llvm::BasicBlock *)v173 != v174);
  }
  v44 = *(_QWORD *)(*((_QWORD *)a3 + 1) + 48);
  if (v44)
    v45 = v44 - 24;
  else
    v45 = 0;
  v46 = *(_DWORD *)(v45 + 20);
  if ((v46 & 0x40000000) != 0)
    v47 = *(_QWORD *)(v45 - 8);
  else
    v47 = v45 - 32 * (v46 & 0x7FFFFFF);
  v48 = *(uint64_t **)(v47 + 32);
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v241 + 56) + 40) + 272, *v48);
  v50 = v49;
  v51 = (char *)operator new(0x80uLL);
  v52 = v51;
  *((_DWORD *)v51 + 21) = *((_DWORD *)v51 + 21) & 0x38000000 | 2;
  *(_QWORD *)v51 = 0;
  *((_QWORD *)v51 + 2) = 0;
  *((_QWORD *)v51 + 1) = 0;
  *((_QWORD *)v51 + 5) = 0;
  *((_QWORD *)v51 + 6) = 0;
  *((_QWORD *)v51 + 4) = 0;
  v53 = (unsigned __int8 ***)(v51 + 32);
  *((_QWORD *)v51 + 8) = **(_QWORD **)*v48 + 1576;
  v54 = (llvm::Value *)(v51 + 64);
  *((_QWORD *)v51 + 3) = v51 + 64;
  *((_QWORD *)v51 + 7) = v51 + 64;
  *((_QWORD *)v51 + 9) = 0;
  v51[80] = 61;
  v51[81] = 0;
  *((_WORD *)v51 + 41) = 0;
  *((_DWORD *)v51 + 21) = 2;
  *(_OWORD *)(v51 + 88) = 0u;
  *(_OWORD *)(v51 + 104) = 0u;
  *((_DWORD *)v51 + 30) = 0;
  *(_QWORD *)v51 = v48;
  v55 = v48 + 1;
  v56 = v48[1];
  *((_QWORD *)v51 + 1) = v56;
  if (v56)
    *(_QWORD *)(v56 + 16) = v51 + 8;
  *((_QWORD *)v51 + 2) = v55;
  *v55 = v51;
  if (*((_QWORD *)v51 + 4))
  {
    **((_QWORD **)v51 + 6) = *((_QWORD *)v51 + 5);
    v196 = *((_QWORD *)v51 + 5);
    if (v196)
      *(_QWORD *)(v196 + 16) = *((_QWORD *)v51 + 6);
  }
  *v53 = v236;
  if (v236)
  {
    v57 = (unsigned __int8 ****)(v236 + 1);
    v58 = v236[1];
    *((_QWORD *)v51 + 5) = v58;
    if (v58)
      *((_QWORD *)v58 + 2) = v51 + 40;
    *((_QWORD *)v51 + 6) = v57;
    *v57 = v53;
  }
  *((_WORD *)v51 + 41) = 2 * (v50 & 0x3F);
  v51[124] = 1;
  LOWORD(v250) = 257;
  (*(void (**)(_QWORD, llvm::Value *, __int128 *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v54, &v247, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
  v59 = *(unsigned int *)(a1 + 352);
  if ((_DWORD)v59)
  {
    v181 = *(_QWORD *)(a1 + 344);
    v182 = (llvm::BasicBlock *)(v181 + 16 * v59);
    v183 = (unsigned __int8 **)(v52 + 112);
    do
    {
      v184 = *(_DWORD *)v181;
      v185 = *(unsigned __int8 **)(v181 + 8);
      if (v185)
      {
        if (!v184)
        {
          v253[0] = *(_QWORD *)(v181 + 8);
          v213 = v183;
          v224 = v182;
          llvm::MetadataTracking::track((uint64_t)v253, v185, 2);
          v183 = v213;
          v182 = v224;
          v186 = *v213;
          goto LABEL_228;
        }
      }
      else
      {
        v186 = *v183;
        if (!*v183 && (v52[87] & 0x20) == 0)
          goto LABEL_225;
        if (!v184)
        {
          v253[0] = 0;
LABEL_228:
          if (v186)
          {
            v214 = v183;
            v225 = v182;
            llvm::MetadataTracking::untrack((uint64_t)v183, v186);
            v183 = v214;
            v182 = v225;
          }
          v187 = (unsigned __int8 *)v253[0];
          *v183 = (unsigned __int8 *)v253[0];
          if (!v187)
            goto LABEL_225;
          v212 = v183;
          v223 = v182;
          llvm::MetadataTracking::retrack((uint64_t)v253, v187, (uint64_t)v183);
          goto LABEL_224;
        }
      }
      v212 = v183;
      v223 = v182;
      llvm::Value::setMetadata(v54, *(_DWORD *)v181, (llvm::MDNode *)v185);
LABEL_224:
      v183 = v212;
      v182 = v223;
LABEL_225:
      v181 += 16;
    }
    while ((llvm::BasicBlock *)v181 != v182);
  }
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v241 + 56) + 40) + 272, *v32);
  v61 = v60;
  v62 = (char *)operator new(0x80uLL);
  v63 = v62;
  *((_DWORD *)v62 + 21) = *((_DWORD *)v62 + 21) & 0x38000000 | 2;
  *(_QWORD *)v62 = 0;
  *((_QWORD *)v62 + 2) = 0;
  *((_QWORD *)v62 + 1) = 0;
  *((_QWORD *)v62 + 4) = 0;
  v64 = (unsigned __int8 ***)(v62 + 32);
  *((_QWORD *)v62 + 5) = 0;
  *((_QWORD *)v62 + 6) = 0;
  *((_QWORD *)v62 + 8) = **(_QWORD **)*v32 + 1576;
  v65 = (llvm::Value *)(v62 + 64);
  *((_QWORD *)v62 + 3) = v62 + 64;
  *((_QWORD *)v62 + 7) = v62 + 64;
  *((_QWORD *)v62 + 9) = 0;
  v62[80] = 61;
  v62[81] = 0;
  *((_WORD *)v62 + 41) = 0;
  *((_DWORD *)v62 + 21) = 2;
  *(_OWORD *)(v62 + 88) = 0u;
  *(_OWORD *)(v62 + 104) = 0u;
  *((_DWORD *)v62 + 30) = 0;
  *(_QWORD *)v62 = v32;
  v66 = v32[1];
  *((_QWORD *)v62 + 1) = v66;
  if (v66)
    *(_QWORD *)(v66 + 16) = v62 + 8;
  *((_QWORD *)v62 + 2) = v40;
  *v40 = v62;
  if (*((_QWORD *)v62 + 4))
  {
    **((_QWORD **)v62 + 6) = *((_QWORD *)v62 + 5);
    v197 = *((_QWORD *)v62 + 5);
    if (v197)
      *(_QWORD *)(v197 + 16) = *((_QWORD *)v62 + 6);
  }
  *v64 = v234;
  if (v234)
  {
    v67 = (unsigned __int8 ****)(v234 + 1);
    v68 = v234[1];
    *((_QWORD *)v62 + 5) = v68;
    if (v68)
      *((_QWORD *)v68 + 2) = v62 + 40;
    *((_QWORD *)v62 + 6) = v67;
    *v67 = v64;
  }
  *((_WORD *)v62 + 41) = 2 * (v61 & 0x3F);
  v62[124] = 1;
  LOWORD(v250) = 257;
  (*(void (**)(_QWORD, llvm::Value *, __int128 *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v65, &v247, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
  v69 = *(unsigned int *)(a1 + 352);
  if ((_DWORD)v69)
  {
    v188 = *(_QWORD *)(a1 + 344);
    v189 = (llvm::BasicBlock *)(v188 + 16 * v69);
    v190 = (unsigned __int8 **)(v63 + 112);
    do
    {
      v191 = *(_DWORD *)v188;
      v192 = *(unsigned __int8 **)(v188 + 8);
      if (v192)
      {
        if (!v191)
        {
          v253[0] = *(_QWORD *)(v188 + 8);
          v216 = v190;
          v227 = v189;
          llvm::MetadataTracking::track((uint64_t)v253, v192, 2);
          v190 = v216;
          v189 = v227;
          v193 = *v216;
          goto LABEL_244;
        }
      }
      else
      {
        v193 = *v190;
        if (!*v190 && (v63[87] & 0x20) == 0)
          goto LABEL_241;
        if (!v191)
        {
          v253[0] = 0;
LABEL_244:
          if (v193)
          {
            v217 = v190;
            v228 = v189;
            llvm::MetadataTracking::untrack((uint64_t)v190, v193);
            v190 = v217;
            v189 = v228;
          }
          v194 = (unsigned __int8 *)v253[0];
          *v190 = (unsigned __int8 *)v253[0];
          if (!v194)
            goto LABEL_241;
          v215 = v190;
          v226 = v189;
          llvm::MetadataTracking::retrack((uint64_t)v253, v194, (uint64_t)v190);
          goto LABEL_240;
        }
      }
      v215 = v190;
      v226 = v189;
      llvm::Value::setMetadata(v65, *(_DWORD *)v188, (llvm::MDNode *)v192);
LABEL_240:
      v190 = v215;
      v189 = v226;
LABEL_241:
      v188 += 16;
    }
    while ((llvm::BasicBlock *)v188 != v189);
  }
  v200 = *(llvm::BasicBlock **)a3;
  v201 = *((_QWORD *)a3 + 1);
  v198 = *((_QWORD *)a3 + 2);
  v218 = (llvm::BasicBlock *)*((_QWORD *)a3 + 3);
  SingleSuccessor = llvm::BasicBlock::getSingleSuccessor(v218);
  if (a8)
    v70 = a8;
  else
    v70 = v32;
  ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
  v72 = (unsigned __int8 *)llvm::ConstantInt::get(v231, a6, 0);
  *(_QWORD *)&v247 = Ident;
  *((_QWORD *)&v247 + 1) = ThreadID;
  v211 = ThreadID;
  v248 = v72;
  v249 = v32;
  v250 = v48;
  v251 = v32;
  v252 = v70;
  v254 = 257;
  sub_1C4774778(v240, v203, v202, (uint64_t *)&v247, 7, (uint64_t)v253, 0);
  v73 = **(_QWORD **)Preheader;
  v210 = a3;
  if ((*(_BYTE *)(Preheader + 23) & 0x10) == 0)
  {
    v84 = 0;
    v83 = &byte_1C871356D;
    v76 = a1 + 392;
    goto LABEL_70;
  }
  v74 = *(_QWORD *)(*(_QWORD *)v73 + 152);
  v75 = *(unsigned int *)(*(_QWORD *)v73 + 168);
  v76 = a1 + 392;
  if (!(_DWORD)v75)
    goto LABEL_68;
  LODWORD(v77) = (v75 - 1) & ((Preheader >> 4) ^ (Preheader >> 9));
  v78 = (uint64_t *)(v74 + 16 * v77);
  v79 = *v78;
  if (*v78 != Preheader)
  {
    v80 = 1;
    while (v79 != -4096)
    {
      v81 = v77 + v80++;
      v77 = v81 & (v75 - 1);
      v79 = *(_QWORD *)(v74 + 16 * v77);
      if (v79 == Preheader)
      {
        v78 = (uint64_t *)(v74 + 16 * v77);
        goto LABEL_69;
      }
    }
LABEL_68:
    v78 = (uint64_t *)(v74 + 16 * v75);
  }
LABEL_69:
  v82 = (_QWORD *)v78[1];
  v85 = *v82;
  v83 = (char *)(v82 + 2);
  v84 = v85;
LABEL_70:
  *(_QWORD *)&v247 = v83;
  *((_QWORD *)&v247 + 1) = v84;
  v248 = ".outer.cond";
  LOWORD(v250) = 773;
  v86 = *(_QWORD *)(Preheader + 56);
  v87 = operator new();
  *(_QWORD *)v87 = *(_QWORD *)v73 + 1600;
  *(_QWORD *)(v87 + 8) = 0;
  v230 = (_QWORD *)(v87 + 8);
  v88 = *(_DWORD *)(v87 + 20) & 0xC0000000;
  *(_QWORD *)(v87 + 24) = 0;
  v89 = v87 + 24;
  *(_DWORD *)(v87 + 16) = 22;
  *(_DWORD *)(v87 + 20) = v88;
  v90 = v87 + 40;
  *(_QWORD *)(v87 + 32) = 0;
  *(_QWORD *)(v87 + 40) = v87 + 40;
  *(_QWORD *)(v87 + 48) = v87 + 40;
  *(_QWORD *)(v87 + 56) = 0;
  if (v86)
  {
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v86 + 72, (_QWORD *)v87);
    v91 = *(_QWORD *)(v86 + 72);
    *(_QWORD *)(v87 + 24) = v91;
    *(_QWORD *)(v87 + 32) = v86 + 72;
    *(_QWORD *)(v91 + 8) = v89;
    *(_QWORD *)(v86 + 72) = v89;
  }
  llvm::Value::setName((uint64_t ***)v87, (uint64_t)&v247);
  for (i = *(_QWORD *)(v87 + 48); i != v90; i = *(_QWORD *)(i + 8))
  {
    v93 = i - 24;
    if (!i)
      v93 = 0;
    if (*(_BYTE *)(v93 + 16) != 83)
    {
      v94 = *(unsigned __int8 *)(i - 8) - 38;
      v95 = v94 > 0x38;
      v96 = (1 << v94) & 0x100060000000001;
      if (v95 || v96 == 0)
        v90 = i;
      else
        v90 = *(_QWORD *)(i + 8);
      break;
    }
  }
  sub_1C4D8AE2C((uint64_t)v240, v87, v90);
  *(_QWORD *)&v247 = Ident;
  *((_QWORD *)&v247 + 1) = v211;
  v248 = v204;
  v249 = v26;
  v250 = v236;
  v251 = v234;
  v254 = 257;
  v98 = sub_1C4774778(v240, v206, v205, (uint64_t *)&v247, 6, (uint64_t)v253, 0);
  v99 = llvm::ConstantInt::get(v231, 0, 0);
  LOWORD(v250) = 257;
  v235 = (llvm::Value *)sub_1C4774B48((uint64_t)v240, 33, v98, (uint64_t)v99, (uint64_t)&v247);
  v254 = 257;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v76 + 56) + 40) + 272, (uint64_t)v242);
  v101 = v100;
  v102 = (char *)operator new(0x60uLL);
  v103 = v102;
  v104 = (llvm::Value *)(v102 + 32);
  *((_QWORD *)v102 + 2) = 0;
  *((_QWORD *)v102 + 3) = v102 + 32;
  LOWORD(v250) = 257;
  *((_QWORD *)v102 + 4) = v242;
  *((_QWORD *)v102 + 5) = 0;
  *((_WORD *)v102 + 24) = 60;
  *((_DWORD *)v102 + 13) = 1;
  *(_OWORD *)(v102 + 56) = 0u;
  *(_OWORD *)(v102 + 72) = 0u;
  *((_DWORD *)v102 + 22) = 0;
  *(_QWORD *)v102 = v26;
  *((_QWORD *)v102 + 1) = 0;
  if (v26)
  {
    v107 = v26[1];
    v106 = v26 + 1;
    v105 = v107;
    *((_QWORD *)v102 + 1) = v107;
    if (v107)
      *((_QWORD *)v105 + 2) = v102 + 8;
    *((_QWORD *)v102 + 2) = v106;
    *v106 = v102;
  }
  *((_WORD *)v102 + 25) = 2 * (v101 & 0x3F);
  v102[92] = 1;
  llvm::Value::setName((uint64_t ***)v102 + 4, (uint64_t)&v247);
  (*(void (**)(_QWORD, llvm::Value *, uint64_t *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v104, v253, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
  v108 = *(unsigned int *)(a1 + 352);
  v109 = (__int128 *)(a1 + 392);
  if ((_DWORD)v108)
  {
    v146 = *(_QWORD *)(a1 + 344);
    v147 = v146 + 16 * v108;
    v148 = (unsigned __int8 **)(v103 + 80);
    do
    {
      v149 = *(_DWORD *)v146;
      v150 = *(unsigned __int8 **)(v146 + 8);
      if (v150)
      {
        if (!v149)
        {
          v246 = *(unsigned __int8 **)(v146 + 8);
          llvm::MetadataTracking::track((uint64_t)&v246, v150, 2);
          v151 = *v148;
          goto LABEL_156;
        }
      }
      else
      {
        v151 = *v148;
        if (!*v148 && (v103[55] & 0x20) == 0)
          goto LABEL_153;
        if (!v149)
        {
          v246 = 0;
LABEL_156:
          if (v151)
            llvm::MetadataTracking::untrack((uint64_t)(v103 + 80), v151);
          v152 = v246;
          *v148 = v246;
          if (v152)
            llvm::MetadataTracking::retrack((uint64_t)&v246, v152, (uint64_t)(v103 + 80));
          goto LABEL_153;
        }
      }
      llvm::Value::setMetadata(v104, *(_DWORD *)v146, (llvm::MDNode *)v150);
LABEL_153:
      v146 += 16;
    }
    while (v146 != v147);
  }
  *(_QWORD *)&v247 = "lb";
  LOWORD(v250) = 259;
  v110 = sub_1C47733F8((uint64_t)v240, (uint64_t)v104, (uint64_t)v32, (uint64_t)&v247, 0, 0);
  v111 = (char *)operator new(0xA0uLL);
  v112 = 0;
  v113 = (unsigned __int8 **)(v111 + 96);
  *((_DWORD *)v111 + 29) = *((_DWORD *)v111 + 29) & 0x38000000 | 3;
  do
  {
    v114 = &v111[v112];
    *(_QWORD *)v114 = 0;
    *((_QWORD *)v114 + 1) = 0;
    *((_QWORD *)v114 + 2) = 0;
    *((_QWORD *)v114 + 3) = v113;
    v112 += 32;
  }
  while (v112 != 96);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v111 + 96), v200, v218, v235, 0);
  LOWORD(v250) = 257;
  sub_1C4867F8C(v240, v113, (uint64_t)&v247);
  v115 = *((_QWORD *)v200 + 6);
  if (v115)
    v116 = v115 - 24;
  else
    v116 = 0;
  v117 = *(_DWORD *)(v116 + 20);
  if ((v117 & 0x40000000) != 0)
    v118 = *(_QWORD *)(v116 - 8);
  else
    v118 = v116 - 32 * (v117 & 0x7FFFFFF);
  *(_QWORD *)(v118 + 32 * *(unsigned int *)(v116 + 60)) = v87;
  sub_1C6125834(v116, 0, v110);
  v119 = (_QWORD *)*v207;
  if ((_QWORD *)*v207 == v207)
  {
    v120 = 0;
  }
  else
  {
    if (v119)
      v120 = v119 - 3;
    else
      v120 = 0;
    if (*((unsigned __int8 *)v120 + 16) - 29 >= 0xB)
      v120 = 0;
  }
  if (*(v120 - 4))
  {
    *(_QWORD *)*(v120 - 2) = *(v120 - 3);
    v121 = *(v120 - 3);
    if (v121)
      *(_QWORD *)(v121 + 16) = *(v120 - 2);
  }
  *(v120 - 4) = v87;
  v122 = *(_QWORD *)(v87 + 8);
  *(v120 - 3) = v122;
  if (v122)
    *(_QWORD *)(v122 + 16) = v120 - 3;
  *(v120 - 2) = v230;
  *v230 = v120 - 4;
  v123 = (_QWORD *)(v201 + 40);
  v124 = v201 + 40;
  if (*(_QWORD *)(v201 + 48) != v201 + 40)
  {
    v124 = *(_QWORD *)(v201 + 48);
    while (1)
    {
      v125 = v124 - 24;
      if (!v124)
        v125 = 0;
      if (*(_BYTE *)(v125 + 16) != 83)
        break;
      v124 = *(_QWORD *)(v124 + 8);
      if ((_QWORD *)v124 == v123)
      {
        v124 = v201 + 40;
        goto LABEL_121;
      }
    }
    v126 = *(unsigned __int8 *)(v124 - 8) - 38;
    v95 = v126 > 0x38;
    v127 = (1 << v126) & 0x100060000000001;
    if (!v95 && v127 != 0)
      v124 = *(_QWORD *)(v124 + 8);
  }
LABEL_121:
  sub_1C4D8AE2C((uint64_t)v240, v201, v124);
  v253[0] = (uint64_t)"ub";
  v254 = 259;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v241 + 56) + 40) + 272, (uint64_t)v242);
  v130 = v129;
  v131 = (char *)operator new(0x60uLL);
  v132 = v131;
  v133 = (llvm::Value *)(v131 + 32);
  *((_QWORD *)v131 + 2) = 0;
  *((_QWORD *)v131 + 3) = v131 + 32;
  LOWORD(v250) = 257;
  *((_QWORD *)v131 + 4) = v242;
  *((_QWORD *)v131 + 5) = 0;
  v134 = (uint64_t *)(v131 + 40);
  *((_WORD *)v131 + 24) = 60;
  *((_DWORD *)v131 + 13) = 1;
  *(_OWORD *)(v131 + 56) = 0u;
  *(_OWORD *)(v131 + 72) = 0u;
  *((_DWORD *)v131 + 22) = 0;
  *(_QWORD *)v131 = v236;
  *((_QWORD *)v131 + 1) = 0;
  if (v236)
  {
    v136 = v236 + 1;
    v135 = v236[1];
    *((_QWORD *)v131 + 1) = v135;
    if (v135)
      *((_QWORD *)v135 + 2) = v131 + 8;
    *((_QWORD *)v131 + 2) = v136;
    *v136 = v131;
  }
  *((_WORD *)v131 + 25) = 2 * (v130 & 0x3F);
  v131[92] = 1;
  llvm::Value::setName((uint64_t ***)v131 + 4, (uint64_t)&v247);
  (*(void (**)(_QWORD, llvm::Value *, uint64_t *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v133, v253, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
  v137 = *(unsigned int *)(a1 + 352);
  if ((_DWORD)v137)
  {
    v153 = *(_QWORD *)(a1 + 344);
    v154 = v153 + 16 * v137;
    v155 = (unsigned __int8 **)(v132 + 80);
    do
    {
      v156 = *(_DWORD *)v153;
      v157 = *(unsigned __int8 **)(v153 + 8);
      if (v157)
      {
        if (!v156)
        {
          v246 = *(unsigned __int8 **)(v153 + 8);
          v237 = v155;
          llvm::MetadataTracking::track((uint64_t)&v246, v157, 2);
          v155 = v237;
          v158 = *v237;
          goto LABEL_171;
        }
      }
      else
      {
        v158 = *v155;
        if (!*v155 && (v132[55] & 0x20) == 0)
          goto LABEL_168;
        if (!v156)
        {
          v246 = 0;
LABEL_171:
          if (v158)
          {
            v239 = v155;
            llvm::MetadataTracking::untrack((uint64_t)v155, v158);
            v155 = v239;
          }
          v161 = v246;
          *v155 = v246;
          if (v161)
          {
            v238 = v155;
            llvm::MetadataTracking::retrack((uint64_t)&v246, v161, (uint64_t)v155);
            v155 = v238;
          }
          goto LABEL_168;
        }
      }
      v159 = v154;
      v160 = v155;
      llvm::Value::setMetadata(v133, *(_DWORD *)v153, (llvm::MDNode *)v157);
      v155 = v160;
      v154 = v159;
      v109 = (__int128 *)(a1 + 392);
LABEL_168:
      v153 += 16;
    }
    while (v153 != v154);
  }
  v138 = *(_QWORD *)(a1 + 400);
  if (v138)
    v139 = v138 - 24;
  else
    v139 = 0;
  if (*(_QWORD *)(v139 - 32))
  {
    **(_QWORD **)(v139 - 16) = *(_QWORD *)(v139 - 24);
    v140 = *(_QWORD *)(v139 - 24);
    if (v140)
      *(_QWORD *)(v140 + 16) = *(_QWORD *)(v139 - 16);
  }
  *(_QWORD *)(v139 - 32) = v133;
  v141 = *v134;
  *(_QWORD *)(v139 - 24) = *v134;
  if (v141)
    *(_QWORD *)(v141 + 16) = v139 - 24;
  *(_QWORD *)(v139 - 16) = v134;
  *v134 = v139 - 32;
  if (*v123)
    v142 = *v123 - 24;
  else
    v142 = 0;
  if (*(_QWORD *)(v142 - 64))
  {
    **(_QWORD **)(v142 - 48) = *(_QWORD *)(v142 - 56);
    v143 = *(_QWORD *)(v142 - 56);
    if (v143)
      *(_QWORD *)(v143 + 16) = *(_QWORD *)(v142 - 48);
  }
  *(_QWORD *)(v142 - 64) = v87;
  v144 = *(_QWORD *)(v87 + 8);
  *(_QWORD *)(v142 - 56) = v144;
  if (v144)
    *(_QWORD *)(v144 + 16) = v142 - 56;
  *(_QWORD *)(v142 - 48) = v230;
  *v230 = v142 - 64;
  if ((a6 & 0x40) != 0)
  {
    v162 = 0;
    v163 = *(_QWORD *)(v198 + 40);
    if (v163)
      v164 = v163 - 24;
    else
      v164 = 0;
    *(_QWORD *)(a1 + 392) = *(_QWORD *)(v164 + 40);
    *(_QWORD *)(a1 + 400) = v164 + 24;
    v165 = *(unsigned __int8 **)(v164 + 48);
    *(_QWORD *)&v247 = v165;
    if (v165)
    {
      llvm::MetadataTracking::track((uint64_t)&v247, v165, 2);
      v162 = v247;
    }
    sub_1C4774EF4((uint64_t)v240, 0, v162);
    if ((_QWORD)v247)
      llvm::MetadataTracking::untrack((uint64_t)&v247, (unsigned __int8 *)v247);
    if ((*((_DWORD *)v242 + 2) & 0xFFFFFF00) == 0x2000)
      v166 = 81;
    else
      v166 = 83;
    v167 = (uint64_t **)llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(_QWORD *)(a1 + 336), v166);
    v253[0] = (uint64_t)Ident;
    v253[1] = v211;
    LOWORD(v250) = 257;
    sub_1C4774778(v240, v167, v168, v253, 2, (uint64_t)&v247, 0);
  }
  if (a7)
  {
    v169 = 0;
    v170 = *((_QWORD *)v218 + 5);
    if (v170)
      v171 = v170 - 24;
    else
      v171 = 0;
    *(_QWORD *)(a1 + 392) = *(_QWORD *)(v171 + 40);
    *(_QWORD *)(a1 + 400) = v171 + 24;
    v172 = *(unsigned __int8 **)(v171 + 48);
    *(_QWORD *)&v247 = v172;
    if (v172)
    {
      llvm::MetadataTracking::track((uint64_t)&v247, v172, 2);
      v169 = v247;
    }
    sub_1C4774EF4((uint64_t)v240, 0, v169);
    if ((_QWORD)v247)
      llvm::MetadataTracking::untrack((uint64_t)&v247, (unsigned __int8 *)v247);
    v247 = *v109;
    v248 = *v209;
    if (v248)
      llvm::MetadataTracking::track((uint64_t)&v248, v248, 2);
    if (sub_1C62683AC(a1, (uint64_t *)&v247))
      llvm::OpenMPIRBuilder::emitBarrierImpl(a1, &v247, 33, 0, 0);
    if (v248)
      llvm::MetadataTracking::untrack((uint64_t)&v248, v248);
  }
  *(_OWORD *)v210 = 0u;
  *((_OWORD *)v210 + 1) = 0u;
  return SingleSuccessor;
}

llvm::BasicBlock **llvm::OpenMPIRBuilder::collapseLoops(uint64_t a1, unsigned __int8 **a2, llvm::BasicBlock ***a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  llvm::BasicBlock **v6;
  unint64_t v7;
  llvm::BasicBlock **v8;
  llvm::BasicBlock ***v13;
  uint64_t Preheader;
  uint64_t SingleSuccessor;
  uint64_t v17;
  uint64_t v18;
  llvm::BasicBlock ***v19;
  llvm::BasicBlock **v20;
  uint64_t *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::BasicBlock ***v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  llvm::ConstantInt **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  llvm::BasicBlock ***v58;
  llvm::BasicBlock **v59;
  llvm::BasicBlock **v60;
  uint64_t v61;
  uint64_t v62;
  char **v63;
  llvm::BasicBlock *v64;
  llvm::BasicBlock *v65;
  uint64_t v66;
  llvm::BasicBlock *v67;
  uint64_t v68;
  uint64_t v69;
  char **v70;
  llvm::BasicBlock *v71;
  uint64_t v72;
  unint64_t i;
  llvm::BasicBlock ***v74;
  char **v75;
  llvm::BasicBlock *v76;
  llvm::BasicBlock *v77;
  uint64_t v78;
  char **v79;
  llvm::BasicBlock *v80;
  llvm::BasicBlock **v81;
  uint64_t v82;
  llvm::BasicBlock *v83;
  char **v84;
  unsigned __int8 *v85;
  llvm::BasicBlock *v86;
  char **v87;
  unsigned __int8 *v88;
  uint64_t v89;
  uint64_t v90;
  llvm::ValueAsMetadata *v91;
  _OWORD *v92;
  uint64_t v93;
  llvm::BasicBlock **v94;
  uint64_t v95;
  uint64_t v96;
  llvm::CanonicalLoopInfo *v97;
  unsigned __int8 *v99;
  unsigned __int8 *v100;
  uint64_t v101;
  uint64_t v102;
  llvm::BasicBlock **v103;
  uint64_t *v104;
  unsigned __int8 *v105[2];
  __int16 v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  void *v110[2];
  _BYTE v111[16];
  __int16 v112;
  uint64_t *v113;
  uint64_t v114;
  _QWORD v115[14];

  v115[12] = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  v7 = a4 - 1;
  if (a4 == 1)
    return *a3;
  v13 = a3;
  v94 = a3[v7];
  Preheader = llvm::CanonicalLoopInfo::getPreheader((llvm::CanonicalLoopInfo *)v6);
  SingleSuccessor = llvm::BasicBlock::getSingleSuccessor(v6[3]);
  v93 = Preheader;
  v95 = *(_QWORD *)(Preheader + 56);
  v96 = SingleSuccessor;
  v113 = v115;
  v114 = 0xC00000000;
  if (6 * a4 >= 0xD)
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, (uint64_t)v115, 6 * a4, 8);
  v97 = (llvm::CanonicalLoopInfo *)v6;
  v17 = 8 * a4;
  if (a4)
  {
    v18 = 8 * a4;
    v19 = v13;
    do
    {
      v20 = *v19++;
      llvm::CanonicalLoopInfo::collectControlBlocks(v20, (uint64_t)&v113);
      v18 -= 8;
    }
    while (v18);
  }
  v21 = (uint64_t *)(a1 + 344);
  v22 = *a2;
  v108 = v22;
  if (v22)
  {
    llvm::MetadataTracking::track((uint64_t)&v108, v22, 2);
    v23 = v108;
  }
  else
  {
    v23 = 0;
  }
  sub_1C4774EF4(a1 + 344, 0, (uint64_t)v23);
  if (v108)
    llvm::MetadataTracking::untrack((uint64_t)&v108, v108);
  if (a5)
  {
    v33 = a1 + 344;
    v34 = a5;
    v35 = a6;
  }
  else
  {
    v24 = llvm::CanonicalLoopInfo::getPreheader(v97);
    if (!v24)
    {
      *(_QWORD *)(a1 + 392) = 0;
      *(_QWORD *)(a1 + 400) = 0;
      if (a4)
        goto LABEL_17;
      goto LABEL_31;
    }
    v34 = v24;
    v35 = *(_QWORD *)(v24 + 40);
    v33 = a1 + 344;
  }
  sub_1C4D8AE2C(v33, v34, v35);
  if (a4)
  {
LABEL_17:
    v25 = 0;
    v26 = 8 * a4;
    v27 = v13;
    do
    {
      v28 = *((_QWORD *)(*v27)[1] + 6);
      if (v28)
        v29 = v28 - 24;
      else
        v29 = 0;
      v30 = *(_DWORD *)(v29 + 20);
      if ((v30 & 0x40000000) != 0)
        v31 = *(_QWORD *)(v29 - 8);
      else
        v31 = v29 - 32 * (v30 & 0x7FFFFFF);
      v32 = *(llvm::ConstantInt ***)(v31 + 32);
      if (v25)
      {
        v112 = 257;
        v32 = (llvm::ConstantInt **)sub_1C4EC4040(a1 + 344, v25, (uint64_t)v32, (uint64_t)v110, 1, 0);
      }
      ++v27;
      v25 = (uint64_t)v32;
      v26 -= 8;
    }
    while (v26);
    goto LABEL_32;
  }
LABEL_31:
  v32 = 0;
LABEL_32:
  v36 = *a2;
  v107 = v36;
  if (v36)
    llvm::MetadataTracking::track((uint64_t)&v107, v36, 2);
  v37 = *(_QWORD *)(v93 + 32);
  if (v37)
    v38 = v37 == *(_QWORD *)(v93 + 56) + 72;
  else
    v38 = 1;
  if (v38)
    v39 = 0;
  else
    v39 = v37 - 24;
  v110[0] = "collapsed";
  v112 = 259;
  v8 = (llvm::BasicBlock **)llvm::OpenMPIRBuilder::createLoopSkeleton(a1, &v107, v32, v95, v39, v96, (uint64_t *)v110);
  if (v107)
    llvm::MetadataTracking::untrack((uint64_t)&v107, v107);
  v40 = *((_QWORD *)v8[1] + 5);
  if (v40)
    v41 = v40 - 24;
  else
    v41 = 0;
  if (*(unsigned __int8 *)(v41 + 16) - 29 >= 0xB)
    v41 = 0;
  v42 = *(_QWORD *)(v41 - 32);
  if (v42)
  {
    sub_1C4D8AE2C(a1 + 344, v42, *(_QWORD *)(v42 + 48));
  }
  else
  {
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 400) = 0;
  }
  v43 = *((_QWORD *)*v8 + 6);
  if (v43)
    v44 = (_QWORD *)(v43 - 24);
  else
    v44 = 0;
  v110[0] = v111;
  v110[1] = (void *)0x600000000;
  sub_1C6154790((uint64_t)v110, a4);
  if ((int)v7 >= 1)
  {
    v45 = v7;
    do
    {
      v46 = *((_QWORD *)v13[v45][1] + 6);
      if (v46)
        v47 = v46 - 24;
      else
        v47 = 0;
      v48 = *(_DWORD *)(v47 + 20);
      if ((v48 & 0x40000000) != 0)
        v49 = *(_QWORD *)(v47 - 8);
      else
        v49 = v47 - 32 * (v48 & 0x7FFFFFF);
      v50 = *(_QWORD *)(v49 + 32);
      v106 = 257;
      v51 = sub_1C538EDCC(v21, v44, v50, (uint64_t)&v103);
      *((_QWORD *)v110[0] + v45) = v51;
      v106 = 257;
      v44 = (_QWORD *)sub_1C538E6F8((uint64_t)v21, (uint64_t)v44, v50, (uint64_t)&v103, 0);
    }
    while (v45-- > 1);
  }
  *(_QWORD *)v110[0] = v44;
  v102 = 0;
  v53 = *((_QWORD *)v8[1] + 5);
  if (v53)
    v54 = v53 - 24;
  else
    v54 = 0;
  if (*(unsigned __int8 *)(v54 + 16) - 29 >= 0xB)
    v54 = 0;
  v55 = *(_QWORD *)(v54 - 32);
  v101 = 0;
  v102 = v55;
  v103 = (llvm::BasicBlock **)&v102;
  v104 = &v101;
  v56 = *a2;
  v105[0] = v56;
  if (v56)
    llvm::MetadataTracking::track((uint64_t)v105, v56, 2);
  v57 = 0;
  do
  {
    v58 = &v13[v57];
    v60 = *v58;
    v59 = v58[1];
    v61 = *((_QWORD *)v60[1] + 5);
    if (v61)
      v62 = v61 - 24;
    else
      v62 = 0;
    if (*(unsigned __int8 *)(v62 + 16) - 29 >= 0xB)
      v62 = 0;
    v63 = *(char ***)(v62 - 32);
    v64 = *v59;
    v65 = *v103;
    if (*v103)
    {
      v109 = v105[0];
      if (v105[0])
        llvm::MetadataTracking::track((uint64_t)&v109, v105[0], 2);
      sub_1C54DE244(v65, v63, &v109);
    }
    else
    {
      v66 = *v104;
      v109 = v105[0];
      if (v105[0])
        llvm::MetadataTracking::track((uint64_t)&v109, v105[0], 2);
      sub_1C54E06F8(*(_QWORD *)(v66 + 8), v63, &v109);
    }
    if (v109)
      llvm::MetadataTracking::untrack((uint64_t)&v109, v109);
    ++v57;
    *v103 = 0;
    *v104 = (uint64_t)v64;
  }
  while (v7 != v57);
  v67 = v94[2];
  v68 = *((_QWORD *)v94[1] + 5);
  if (v68)
    v69 = v68 - 24;
  else
    v69 = 0;
  if (*(unsigned __int8 *)(v69 + 16) - 29 >= 0xB)
    v69 = 0;
  v70 = *(char ***)(v69 - 32);
  v71 = *v103;
  if (*v103)
  {
    v109 = v105[0];
    if (v105[0])
      llvm::MetadataTracking::track((uint64_t)&v109, v105[0], 2);
    sub_1C54DE244(v71, v70, &v109);
  }
  else
  {
    v72 = *v104;
    v109 = v105[0];
    if (v105[0])
      llvm::MetadataTracking::track((uint64_t)&v109, v105[0], 2);
    sub_1C54E06F8(*(_QWORD *)(v72 + 8), v70, &v109);
  }
  if (v109)
    llvm::MetadataTracking::untrack((uint64_t)&v109, v109);
  *v103 = 0;
  *v104 = (uint64_t)v67;
  for (i = a4; i != 1; --i)
  {
    v74 = &v13[i];
    v75 = (char **)llvm::BasicBlock::getSingleSuccessor((*(v74 - 1))[3]);
    v76 = (*(v74 - 2))[2];
    v77 = *v103;
    if (*v103)
    {
      v109 = v105[0];
      if (v105[0])
        llvm::MetadataTracking::track((uint64_t)&v109, v105[0], 2);
      sub_1C54DE244(v77, v75, &v109);
    }
    else
    {
      v78 = *v104;
      v109 = v105[0];
      if (v105[0])
        llvm::MetadataTracking::track((uint64_t)&v109, v105[0], 2);
      sub_1C54E06F8(*(_QWORD *)(v78 + 8), v75, &v109);
    }
    if (v109)
      llvm::MetadataTracking::untrack((uint64_t)&v109, v109);
    *v103 = 0;
    *v104 = (uint64_t)v76;
  }
  v79 = (char **)v8[2];
  v80 = *v103;
  if (*v103)
  {
    v109 = v105[0];
    v81 = (llvm::BasicBlock **)v97;
    if (v105[0])
      llvm::MetadataTracking::track((uint64_t)&v109, v105[0], 2);
    sub_1C54DE244(v80, v79, &v109);
  }
  else
  {
    v82 = *v104;
    v109 = v105[0];
    v81 = (llvm::BasicBlock **)v97;
    if (v105[0])
      llvm::MetadataTracking::track((uint64_t)&v109, v105[0], 2);
    sub_1C54E06F8(*(_QWORD *)(v82 + 8), v79, &v109);
  }
  if (v109)
    llvm::MetadataTracking::untrack((uint64_t)&v109, v109);
  *v103 = 0;
  *v104 = 0;
  v83 = (llvm::BasicBlock *)llvm::CanonicalLoopInfo::getPreheader((llvm::CanonicalLoopInfo *)v81);
  v84 = (char **)llvm::CanonicalLoopInfo::getPreheader((llvm::CanonicalLoopInfo *)v8);
  v85 = *a2;
  v100 = v85;
  if (v85)
    llvm::MetadataTracking::track((uint64_t)&v100, v85, 2);
  sub_1C54DE244(v83, v84, &v100);
  if (v100)
    llvm::MetadataTracking::untrack((uint64_t)&v100, v100);
  v86 = (llvm::BasicBlock *)llvm::BasicBlock::getSingleSuccessor(v8[3]);
  v87 = (char **)llvm::BasicBlock::getSingleSuccessor(v81[3]);
  v88 = *a2;
  v99 = v88;
  if (v88)
    llvm::MetadataTracking::track((uint64_t)&v99, v88, 2);
  sub_1C54DE244(v86, v87, &v99);
  if (v99)
    llvm::MetadataTracking::untrack((uint64_t)&v99, v99);
  if (a4)
  {
    v89 = 0;
    do
    {
      v90 = *((_QWORD *)*v13[v89] + 6);
      if (v90)
        v91 = (llvm::ValueAsMetadata *)(v90 - 24);
      else
        v91 = 0;
      llvm::Value::doRAUW(v91, *((llvm::Value **)v110[0] + v89++), (llvm::Value *)1);
    }
    while (a4 != v89);
    sub_1C54E01B4(v113, v114);
    do
    {
      v92 = *v13++;
      *v92 = 0uLL;
      v92[1] = 0uLL;
      v17 -= 8;
    }
    while (v17);
  }
  else
  {
    sub_1C54E01B4(v113, v114);
  }
  if (v105[0])
    llvm::MetadataTracking::untrack((uint64_t)v105, v105[0]);
  if (v110[0] != v111)
    free(v110[0]);
  if (v113 != v115)
    free(v113);
  return v8;
}

void sub_1C54E01B4(uint64_t *a1, uint64_t a2)
{
  unint64_t *v2;
  unint64_t *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v18;
  unsigned int *v19;
  char *v20;
  unsigned int *v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  llvm::BasicBlock **v25;
  uint64_t v26;
  uint64_t v27;
  llvm::BasicBlock *v28;
  unint64_t *v29;
  unint64_t *v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  void *v34;
  uint64_t v35;
  _BYTE v36[56];
  void *v37;
  uint64_t v38;
  _QWORD v39[9];

  v39[8] = *MEMORY[0x1E0C80C00];
  sub_1C52B12D8((llvm::SmallPtrSetImplBase *)&v29, a1, &a1[a2]);
  while (1)
  {
    v3 = v29;
    v2 = v30;
    v5 = v31;
    v4 = v32;
    if (v30 == v29)
      v6 = v32;
    else
      v6 = v31;
    v7 = (char *)v30;
    if ((_DWORD)v6)
    {
      v8 = 0;
      while (v30[v8] >= 0xFFFFFFFFFFFFFFFELL)
      {
        if (v6 == ++v8)
          goto LABEL_39;
      }
      v7 = (char *)&v30[v8];
    }
    v9 = (char *)&v30[v6];
    if (v7 == v9)
      break;
    v10 = 0;
    do
    {
      v11 = (uint64_t *)v7;
      v12 = (unint64_t *)(v7 + 8);
      while (v12 != (unint64_t *)v9)
      {
        v13 = *v12++;
        if (v13 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v7 = (char *)(v12 - 1);
          goto LABEL_18;
        }
      }
      v7 = v9;
LABEL_18:
      v14 = *v11;
      v15 = *(_QWORD *)(*v11 + 8);
      if (v15)
      {
        while (1)
        {
          v16 = *(_QWORD *)(v15 + 24);
          if (v16 && *(unsigned __int8 *)(v16 + 16) >= 0x1Cu)
          {
            v18 = (char *)sub_1C477672C((uint64_t)&v29, *(_QWORD *)(v16 + 40));
            v19 = v30 == v29 ? &v32 : &v31;
            if (v18 == (char *)&v30[*v19])
              break;
          }
          v15 = *(_QWORD *)(v15 + 8);
          if (!v15)
            goto LABEL_36;
        }
        v20 = (char *)sub_1C477672C((uint64_t)&v29, v14);
        if (v30 == v29)
          v21 = &v32;
        else
          v21 = &v31;
        if (v20 != (char *)&v30[*v21])
        {
          *(_QWORD *)v20 = -2;
          ++v33;
        }
        v10 = 1;
      }
LABEL_36:
      ;
    }
    while (v7 != v9);
    if ((v10 & 1) == 0)
    {
      v3 = v29;
      v2 = v30;
      v5 = v31;
      v4 = v32;
      break;
    }
  }
LABEL_39:
  if (v2 == v3)
    v22 = v4;
  else
    v22 = v5;
  v23 = &v2[v22];
  if ((_DWORD)v22)
  {
    v24 = 8 * v22;
    while (*v2 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v2;
      v24 -= 8;
      if (!v24)
      {
        v2 = v23;
        break;
      }
    }
  }
  v34 = v36;
  v35 = 0x700000000;
  sub_1C618F808((unsigned int *)&v34, v2, v23, v23);
  v25 = (llvm::BasicBlock **)v34;
  v26 = v35;
  v37 = v39;
  v38 = 0x400000000;
  llvm::detachDeadBlocks(v34, (llvm::Type *)v35, 0, 0);
  if ((_DWORD)v26)
  {
    v27 = 8 * v26;
    do
    {
      v28 = *v25++;
      llvm::BasicBlock::eraseFromParent(v28);
      v27 -= 8;
    }
    while (v27);
  }
  if (v37 != v39)
    free(v37);
  if (v34 != v36)
    free(v34);
  if (v30 != v29)
    free(v30);
}

void sub_1C54E0438(llvm::CanonicalLoopInfo ****a1, llvm::ConstantInt ***a2, uint64_t a3, uint64_t a4)
{
  llvm::ConstantInt ***v5;
  uint64_t v7;
  llvm::CanonicalLoopInfo ***v8;
  llvm::ConstantInt **v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  llvm::CanonicalLoopInfo *v16;
  llvm::BasicBlock *v17;
  char **Preheader;
  unsigned __int8 *v19;
  llvm::BasicBlock *SingleSuccessor;
  char **v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  llvm::CanonicalLoopInfo ***v25;
  unint64_t v26;
  llvm::CanonicalLoopInfo **v27;
  llvm::CanonicalLoopInfo **v28;
  llvm::CanonicalLoopInfo **v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  llvm::CanonicalLoopInfo **v35;
  llvm::CanonicalLoopInfo *v36;
  llvm::ConstantInt ***v37;
  uint64_t v38;
  uint64_t v39[4];
  char v40;
  char v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;

  if (a3)
  {
    v5 = a2;
    v7 = 0;
    v37 = &a2[a3];
    do
    {
      v8 = a1[1];
      v9 = *v5;
      v38 = v7;
      v10 = *(unsigned __int8 *)(a4 + 32);
      if (*(_BYTE *)(a4 + 32))
      {
        if (v10 == 1)
        {
          v39[0] = (uint64_t)&v38;
          v11 = 1;
          LOBYTE(v10) = 10;
        }
        else
        {
          v12 = *(_QWORD *)(a4 + 8);
          if (*(_BYTE *)(a4 + 33) == 1)
          {
            v13 = *(_QWORD *)a4;
          }
          else
          {
            LOBYTE(v10) = 2;
            v13 = a4;
          }
          v39[0] = v13;
          v39[1] = v12;
          v39[2] = (uint64_t)&v38;
          v11 = 10;
        }
      }
      else
      {
        v11 = 1;
      }
      v40 = v10;
      v41 = v11;
      v15 = (uint64_t)*v8;
      v14 = (unsigned __int8 *)v8[1];
      v44 = v14;
      if (v14)
        llvm::MetadataTracking::track((uint64_t)&v44, v14, 2);
      v16 = (llvm::CanonicalLoopInfo *)llvm::OpenMPIRBuilder::createLoopSkeleton(v15, &v44, v9, (uint64_t)v8[2], (uint64_t)v8[3], (uint64_t)*v8[6], v39);
      if (v44)
        llvm::MetadataTracking::untrack((uint64_t)&v44, v44);
      v17 = *v8[4];
      Preheader = (char **)llvm::CanonicalLoopInfo::getPreheader(v16);
      v19 = (unsigned __int8 *)v8[1];
      v43 = v19;
      if (v19)
        llvm::MetadataTracking::track((uint64_t)&v43, v19, 2);
      sub_1C54DE244(v17, Preheader, &v43);
      if (v43)
        llvm::MetadataTracking::untrack((uint64_t)&v43, v43);
      SingleSuccessor = (llvm::BasicBlock *)llvm::BasicBlock::getSingleSuccessor(*((llvm::BasicBlock **)v16 + 3));
      v21 = (char **)*v8[5];
      v22 = (unsigned __int8 *)v8[1];
      v42 = v22;
      if (v22)
        llvm::MetadataTracking::track((uint64_t)&v42, v22, 2);
      sub_1C54DE244(SingleSuccessor, v21, &v42);
      if (v42)
        llvm::MetadataTracking::untrack((uint64_t)&v42, v42);
      v23 = *(_QWORD *)(*((_QWORD *)v16 + 1) + 40);
      if (v23)
        v24 = v23 - 24;
      else
        v24 = 0;
      if (*(unsigned __int8 *)(v24 + 16) - 29 >= 0xB)
        v24 = 0;
      *v8[4] = *(llvm::CanonicalLoopInfo **)(v24 - 32);
      *v8[5] = (llvm::CanonicalLoopInfo *)*((_QWORD *)v16 + 2);
      *v8[6] = (llvm::CanonicalLoopInfo *)*((_QWORD *)v16 + 2);
      v25 = *a1;
      v27 = (*a1)[1];
      v26 = (unint64_t)(*a1)[2];
      if ((unint64_t)v27 >= v26)
      {
        v29 = *v25;
        v30 = v27 - *v25;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 61)
          abort();
        v32 = v26 - (_QWORD)v29;
        if (v32 >> 2 > v31)
          v31 = v32 >> 2;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
          v33 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        if (v33)
        {
          if (v33 >> 61)
            sub_1C4764EE4();
          v34 = (char *)operator new(8 * v33);
        }
        else
        {
          v34 = 0;
        }
        v35 = (llvm::CanonicalLoopInfo **)&v34[8 * v30];
        *v35 = v16;
        v28 = v35 + 1;
        if (v27 != v29)
        {
          do
          {
            v36 = *--v27;
            *--v35 = v36;
          }
          while (v27 != v29);
          v27 = *v25;
        }
        *v25 = v35;
        v25[1] = v28;
        v25[2] = (llvm::CanonicalLoopInfo **)&v34[8 * v33];
        if (v27)
          operator delete(v27);
      }
      else
      {
        *v27 = v16;
        v28 = v27 + 1;
      }
      v25[1] = v28;
      ++v5;
      ++v7;
    }
    while (v5 != v37);
  }
}

void sub_1C54E06F8(uint64_t a1, char **a2, unsigned __int8 **a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  llvm::BasicBlock *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;

  if (a1)
  {
    v5 = a1;
    while (1)
    {
      v6 = *(_QWORD *)(v5 + 24);
      v7 = *(unsigned __int8 *)(v6 + 16);
      v8 = v6 && v7 >= 0x1C;
      if (v8 && v7 - 29 <= 0xA)
        break;
      v5 = *(_QWORD *)(v5 + 8);
      if (!v5)
        return;
    }
    do
    {
      v10 = v5;
      do
      {
        v5 = *(_QWORD *)(v5 + 8);
        if (!v5)
          break;
        v11 = *(_QWORD *)(v5 + 24);
        v12 = *(unsigned __int8 *)(v11 + 16);
        v13 = v11 && v12 >= 0x1C;
      }
      while (!v13 || v12 - 29 > 0xA);
      v15 = *(llvm::BasicBlock **)(*(_QWORD *)(v10 + 24) + 40);
      v16 = *a3;
      v17 = v16;
      if (v16)
        llvm::MetadataTracking::track((uint64_t)&v17, v16, 2);
      sub_1C54DE244(v15, a2, &v17);
      if (v17)
        llvm::MetadataTracking::untrack((uint64_t)&v17, v17);
    }
    while (v5);
  }
}

void sub_1C54E07C4(_QWORD *a1, void *__src, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  size_t v28;
  uint64_t v29;
  size_t v30;
  llvm::MDNode *Impl;
  _QWORD *v32;
  llvm::Value *v33;
  llvm::Value *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _QWORD v40[7];

  v40[6] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v5 = ***(uint64_t ****)(*a1 + 56);
    v38 = v40;
    v40[0] = 0;
    v39 = 0x600000001;
    v6 = a1[2];
    v9 = *(_QWORD **)(v6 + 40);
    v8 = (_QWORD *)(v6 + 40);
    v7 = v9;
    if (v9 == v8)
    {
      v10 = 0;
    }
    else
    {
      if (v7)
        v10 = (uint64_t)(v7 - 3);
      else
        v10 = 0;
      if (*(unsigned __int8 *)(v10 + 16) - 29 >= 0xB)
        v10 = 0;
    }
    v11 = *(_DWORD *)(v10 + 20);
    if (*(_QWORD *)(v10 + 48))
    {
      if ((v11 & 0x20000000) == 0)
      {
LABEL_32:
        v13 = v38;
        v12 = v39;
LABEL_33:
        v28 = 8 * a3;
        if (((8 * a3) >> 3) + (unint64_t)v12 > HIDWORD(v39))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v40, ((8 * a3) >> 3) + v12, 8);
          v28 = 8 * a3;
          v29 = v39;
          v13 = v38;
        }
        else
        {
          v29 = v12;
        }
        v30 = v28 >> 3;
        memcpy(&v13[v29], __src, v28);
        LODWORD(v39) = v39 + v30;
        Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(v5, v38, v39, 1, 1);
        llvm::MDNode::replaceOperandWith(Impl, 0, Impl);
        v32 = (_QWORD *)*v8;
        if ((_QWORD *)*v8 == v8)
        {
          v34 = 0;
          if (Impl)
          {
LABEL_47:
            llvm::Value::setMetadata(v34, 18, Impl);
LABEL_48:
            if (v38 != v40)
              free(v38);
            return;
          }
        }
        else
        {
          if (v32)
            v33 = (llvm::Value *)(v32 - 3);
          else
            v33 = 0;
          if (*((unsigned __int8 *)v33 + 16) - 29 >= 0xB)
            v34 = 0;
          else
            v34 = v33;
          if (Impl)
            goto LABEL_47;
        }
        if (!*((_QWORD *)v34 + 6) && (*((_BYTE *)v34 + 23) & 0x20) == 0)
          goto LABEL_48;
        goto LABEL_47;
      }
    }
    else if ((v11 & 0x20000000) == 0)
    {
      v12 = 1;
      v13 = v40;
      goto LABEL_33;
    }
    v14 = ***(_QWORD ***)v10;
    v37 = v10;
    v15 = *(_DWORD *)(v14 + 2496);
    if (v15)
    {
      v16 = *(_QWORD *)(v14 + 2480);
      v17 = v15 - 1;
      v18 = v17 & ((v10 >> 4) ^ (v10 >> 9));
      v19 = (_QWORD *)(v16 + 40 * v18);
      v20 = *v19;
      if (*v19 == v10)
        goto LABEL_25;
      v21 = 0;
      v22 = 1;
      while (v20 != -4096)
      {
        if (v21)
          v23 = 0;
        else
          v23 = v20 == -8192;
        if (v23)
          v21 = v19;
        v24 = v18 + v22++;
        v18 = v24 & v17;
        v19 = (_QWORD *)(v16 + 40 * v18);
        v20 = *v19;
        if (*v19 == v10)
          goto LABEL_25;
      }
      if (v21)
        v35 = v21;
      else
        v35 = v19;
    }
    else
    {
      v35 = 0;
    }
    v19 = sub_1C541AB24(v14 + 2480, (uint64_t)&v37, &v37, v35);
    v36 = v37;
    v19[3] = 0;
    v19[4] = 0;
    *v19 = v36;
    v19[1] = v19 + 3;
    v19[2] = 0x100000000;
LABEL_25:
    v25 = *((unsigned int *)v19 + 4);
    if ((_DWORD)v25)
    {
      v26 = (char **)(v19[1] + 8);
      v27 = 16 * v25;
      while (*((_DWORD *)v26 - 2) != 18)
      {
        v26 += 2;
        v27 -= 16;
        if (!v27)
          goto LABEL_32;
      }
      if (*v26)
        sub_1C485BB4C((unsigned int *)&v38, &(*v26)[-8 * *((unsigned int *)*v26 + 2) + 8], *v26);
    }
    goto LABEL_32;
  }
}

uint64_t *llvm::OpenMPIRBuilder::applySimd(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Type *v27;
  const llvm::APInt *v28;
  llvm::MDNode *Impl;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t i;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  BOOL v52;
  int v53;
  unint64_t *v55;
  unint64_t v56;
  llvm::Value **True;
  llvm::Value *v58;
  _QWORD *v59;
  _QWORD *v61;
  int v62;
  BOOL v63;
  unsigned int v64;
  uint64_t *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  int v69;
  _BYTE v70[71];
  uint64_t v71[2];
  int v72;
  uint64_t v73[2];
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  _QWORD v78[2];
  _QWORD v79[2];
  _QWORD __src[2];
  _QWORD v81[2];
  int v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(a1 + 408);
  v5 = *(_QWORD *)(*a3 + 56);
  v71[0] = 0;
  v71[1] = 0;
  v72 = 0;
  v73[0] = 0;
  v73[1] = 0;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v81[0] = &llvm::DominatorTreeAnalysis::Key;
  v6 = sub_1C54E652C(v71, v81);
  if (!v6[1])
  {
    v7 = v6;
    v8 = (_QWORD *)operator new();
    *v8 = &unk_1E816D680;
    v9 = v7[1];
    v7[1] = v8;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  v81[0] = &llvm::LoopAnalysis::Key;
  v10 = sub_1C54E652C(v71, v81);
  if (!v10[1])
  {
    v11 = v10;
    v12 = (_QWORD *)operator new();
    *v12 = &unk_1E816D6D8;
    v13 = v11[1];
    v11[1] = v12;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v81[0] = &llvm::PassInstrumentationAnalysis::Key;
  v14 = sub_1C54E652C(v71, v81);
  if (!v14[1])
  {
    v15 = v14;
    v16 = (_QWORD *)operator new();
    *v16 = &unk_1E816D788;
    v16[1] = 0;
    v17 = v15[1];
    v15[1] = v16;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  llvm::LoopAnalysis::run(v5, (uint64_t)v71, (uint64_t)v81);
  v18 = v82 - 1;
  v19 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v82 - 1);
  v20 = (_QWORD *)(v81[0] + 16 * v19);
  v21 = *v20;
  if (*a3 != *v20)
  {
    v61 = 0;
    v62 = 1;
    while (v21 != -4096)
    {
      if (v61)
        v63 = 0;
      else
        v63 = v21 == -8192;
      if (v63)
        v61 = v20;
      v64 = v19 + v62++;
      v19 = v64 & v18;
      v20 = (_QWORD *)(v81[0] + 16 * (v64 & v18));
      v21 = *v20;
      if (*a3 == *v20)
        goto LABEL_11;
    }
    if (v61)
      v20 = v61;
  }
LABEL_11:
  v22 = v20[1];
  v66 = v70;
  v67 = v70;
  v68 = 8;
  v69 = 0;
  v23 = *(uint64_t **)(v22 + 32);
  v24 = *(_QWORD *)(v22 + 40) - (_QWORD)v23;
  if (v24)
  {
    v25 = 8 * (v24 >> 3);
    do
    {
      v26 = *v23;
      if (*v23 != a3[1] && v26 != *a3)
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v66, v26);
      ++v23;
      v25 -= 8;
    }
    while (v25);
  }
  Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(v4, 0, 0, 1, 1);
  if (v67 == v66)
    v30 = (uint64_t *)((char *)&v68 + 4);
  else
    v30 = &v68;
  v31 = *(unsigned int *)v30;
  if ((_DWORD)v31)
  {
    v32 = 8 * v31;
    v33 = (unint64_t *)v67;
    while (*v33 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v33;
      v32 -= 8;
      if (!v32)
        goto LABEL_80;
    }
  }
  else
  {
    v33 = (unint64_t *)v67;
  }
  v34 = &v67[8 * v31];
  if (v33 == (unint64_t *)v34)
    goto LABEL_80;
  v65 = v4;
  v35 = *v33;
LABEL_28:
  v36 = v35 + 40;
  for (i = *(_QWORD *)(v35 + 48); i != v36; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v38 = i - 24;
    else
      v38 = 0;
    v39 = *(unsigned __int8 *)(v38 + 16);
    v40 = (v39 - 33);
    if (v40 <= 0x37)
    {
      if (((1 << (v39 - 33)) & 0x8000000000041) != 0)
      {
        v42 = *(_QWORD *)(v38 + 64);
        if (!v42 || (*(_BYTE *)(v42 + 20) & 4) == 0 && (*(_BYTE *)(v42 + 17) & 0x10) == 0)
        {
          LODWORD(__src[0]) = 7;
          if (sub_1C53E4BBC(v38, (__int32 *)__src, 1uLL))
          {
            v45 = *(_QWORD *)(v38 - 32);
            if (!v45
              || *(_BYTE *)(v45 + 16)
              || *(_QWORD *)(v45 + 24) != *(_QWORD *)(v38 + 72)
              || *(_DWORD *)(v45 + 36) != 7)
            {
              goto LABEL_58;
            }
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v38, 66) & 1) == 0
            && !llvm::CallBase::hasFnAttrOnCalledFunction(v38, 44))
          {
            goto LABEL_58;
          }
        }
      }
      else
      {
        if (((1 << (v39 - 33)) & 0x808001C8000010) != 0)
          goto LABEL_58;
        if (v40 != 28)
          goto LABEL_37;
        if ((*(_WORD *)(v38 + 18) & 0x301) != 0)
          goto LABEL_58;
      }
      v39 = *(unsigned __int8 *)(v38 + 16);
    }
LABEL_37:
    v41 = (v39 - 33);
    if (v41 > 0x37)
      continue;
    if (((1 << v41) & 0x8000000000041) != 0)
    {
      v43 = *(_QWORD *)(v38 + 64);
      if (v43 && (*(_BYTE *)(v43 + 17) & 0x30) != 0)
        continue;
      v44 = *(_DWORD *)(v38 + 20);
      if (v44 < 0
        && (v46 = v38 - 32 * (v44 & 0x7FFFFFF), v49 = *(_QWORD *)(v46 - 8), v47 = v46 - 8, (v48 = v49) != 0))
      {
        v50 = -v48;
        while (1)
        {
          v51 = *(_DWORD *)(*(_QWORD *)(v47 + v50) + 8);
          v52 = v51 > 7;
          v53 = (1 << v51) & 0x83;
          if (v52 || v53 == 0)
            break;
          v50 += 16;
          if (!v50)
            goto LABEL_52;
        }
      }
      else
      {
LABEL_52:
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v38, 45) & 1) != 0
          || (llvm::CallBase::hasFnAttrOnCalledFunction(v38, 44) & 1) != 0)
        {
          continue;
        }
      }
    }
    else if (v41 == 27)
    {
      if ((*(_WORD *)(v38 + 18) & 0x301) == 0)
        continue;
    }
    else if (((1 << v41) & 0x808001D0000010) == 0)
    {
      continue;
    }
LABEL_58:
    if (Impl || *(_QWORD *)(v38 + 48) || (*(_BYTE *)(v38 + 23) & 0x20) != 0)
      llvm::Value::setMetadata((llvm::Value *)v38, 25, Impl);
  }
  v55 = v33 + 1;
  v4 = v65;
  while (v55 != (unint64_t *)v34)
  {
    v56 = *v55++;
    v35 = v56;
    if (v56 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v33 = v55 - 1;
      goto LABEL_28;
    }
  }
LABEL_80:
  True = llvm::ConstantInt::getTrue((uint64_t **)(*v4 + 1888), v27, v28);
  v59 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)True, v58);
  v79[0] = llvm::MDString::get(v4, "llvm.loop.parallel_accesses", 0x1BuLL);
  v79[1] = Impl;
  __src[0] = llvm::MDTuple::getImpl(v4, v79, 2, 0, 1);
  v78[0] = llvm::MDString::get(v4, "llvm.loop.vectorize.enable", 0x1AuLL);
  v78[1] = v59;
  __src[1] = llvm::MDTuple::getImpl(v4, v78, 2, 0, 1);
  sub_1C54E07C4(a3, __src, 2);
  if (v67 != v66)
    free(v67);
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase(v81);
  MEMORY[0x1CAA32FB4](v75, 8);
  sub_1C4D8B440(v73);
  return sub_1C4D8B52C(v71);
}

void llvm::OpenMPIRBuilder::unrollLoopPartial(uint64_t a1, unsigned __int8 **a2, const llvm::APInt *a3, int a4, const llvm::APInt **a5)
{
  int v5;
  uint64_t ***v7;
  uint64_t *v8;
  unsigned __int8 **v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  unsigned __int8 v17;
  unint64_t v18;
  unsigned int v19;
  int i;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  const llvm::APInt *v27;
  uint64_t Impl;
  unsigned int v29;
  unsigned int v30;
  llvm::ConstantInt **v31;
  llvm::Value **v32;
  llvm::Value *v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t **v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  unint64_t v43;
  unsigned int v44;
  int j;
  unsigned int v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  char v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  __int128 *v90;
  uint64_t v91;
  void (**v92)(void);
  uint64_t ResultImpl;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (**v97)(void);
  void (**v98)(void);
  int v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t k;
  uint64_t v104;
  uint64_t v105;
  uint64_t m;
  uint64_t v107;
  llvm::Value *v108;
  uint64_t **v109;
  uint64_t **v110;
  unsigned int v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  void (**v115)(void);
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  unint64_t v119;
  void **v120;
  unsigned __int8 *v121;
  const llvm::APInt *v122;
  uint64_t v123;
  _QWORD *v124;
  llvm::ConstantInt **v125;
  llvm::Value **v126;
  llvm::Value *v127;
  _QWORD *v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t *v134;
  unsigned __int8 *v135;
  char v136;
  __int16 v137;
  int v138;
  void *v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  _BYTE v144[16];
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147[2];
  int v148;
  uint64_t v149[2];
  int v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  void *v155;
  _BYTE *v156;
  uint64_t v157;
  int v158;
  _BYTE v159[256];
  void **v160;
  _QWORD *v161;
  char *v162[2];
  uint64_t v163;
  char *v164[2];
  int v165;
  char v166;
  _QWORD v167[2];
  int v168;
  void *v169[2];
  uint64_t v170;
  uint64_t v171[2];
  int v172;
  uint64_t v173;
  uint64_t ***v174;
  char v175;
  int v176;
  __int128 __src;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  _BYTE v184[104];
  __int128 v185;
  __int128 v186;
  _BYTE v187[32];
  __int128 __p;
  uint64_t v189;
  _QWORD v190[3];
  _QWORD *v191;
  _QWORD v192[3];
  _QWORD *v193;
  uint64_t v194;

  v5 = a4;
  v194 = *MEMORY[0x1E0C80C00];
  v7 = *(uint64_t ****)(*(_QWORD *)a3 + 56);
  v8 = **v7;
  if (!a5)
  {
    *(_QWORD *)&__src = &v178;
    *((_QWORD *)&__src + 1) = 0x200000000;
    v155 = llvm::MDString::get(v8, "llvm.loop.unroll.enable", 0x17uLL);
    Impl = llvm::MDTuple::getImpl(v8, &v155, 1, 0, 1);
    v29 = DWORD2(__src);
    if (DWORD2(__src) >= HIDWORD(__src))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v178, DWORD2(__src) + 1, 8);
      v29 = DWORD2(__src);
    }
    *(_QWORD *)(__src + 8 * v29) = Impl;
    v30 = ++DWORD2(__src);
    if (v5 >= 1)
    {
      v31 = (llvm::ConstantInt **)(*v8 + 1960);
      LODWORD(v156) = 32;
      v155 = (void *)v5;
      v32 = llvm::ConstantInt::get(v31, (llvm::Type *)&v155, v27);
      v34 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v32, v33);
      if (v156 >= 0x41 && v155)
        MEMORY[0x1CAA32F9C](v155, 0x1000C8000313F17);
      v155 = llvm::MDString::get(v8, "llvm.loop.unroll.count", 0x16uLL);
      v156 = v34;
      v35 = llvm::MDTuple::getImpl(v8, &v155, 2, 0, 1);
      v36 = DWORD2(__src);
      if (DWORD2(__src) >= HIDWORD(__src))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v178, DWORD2(__src) + 1, 8);
        v36 = DWORD2(__src);
      }
      *(_QWORD *)(__src + 8 * v36) = v35;
      v30 = ++DWORD2(__src);
    }
    sub_1C54E07C4(a3, (void *)__src, v30);
    if ((__int128 *)__src != &v178)
      free((void *)__src);
    return;
  }
  v10 = a2;
  v11 = a1;
  if (a4)
    goto LABEL_187;
  v134 = **v7;
  v12 = v7[5];
  v13 = v7[14];
  if (!v13)
  {
    v26 = 0;
    v131 = 0;
    goto LABEL_59;
  }
  if (!*((_DWORD *)v13 + 2))
    goto LABEL_35;
  v14 = v13[5];
  if (!v14)
    goto LABEL_35;
  v15 = *((_DWORD *)v14 + 10);
  if (!v15)
    goto LABEL_35;
  v16 = v14[3];
  v17 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v129 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v129 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v129;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v18 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xBC30287DAC2F782DLL)) ^ ((0x9DDFEA08EB382D69
                                                                             * (qword_1ED7EAC80 ^ 0xBC30287DAC2F782DLL)) >> 47) ^ 0xDF1D5C18CB5D1959);
  v19 = (-348639895 * ((v18 >> 47) ^ v18)) ^ 0x74656772;
  for (i = 1; ; ++i)
  {
    v21 = v19 & (v15 - 1);
    v22 = (uint64_t *)(v16 + 24 * v21);
    v23 = *v22;
    if (*v22 == -1)
    {
      if ("target-cpu" == (char *)-1)
        goto LABEL_22;
      goto LABEL_11;
    }
    if (v23 != -2)
      break;
    if ("target-cpu" == (char *)-2)
      goto LABEL_22;
LABEL_11:
    if (v23 == -1)
      goto LABEL_35;
    v19 = i + v21;
  }
  if (v22[1] != 10)
    goto LABEL_11;
  if (*(_QWORD *)v23 != 0x632D746567726174 || *(_WORD *)(v23 + 8) != 30064)
    goto LABEL_11;
LABEL_22:
  v25 = v22[2];
  if (!v25)
  {
LABEL_35:
    v26 = 0;
    v131 = 0;
    goto LABEL_36;
  }
  v131 = *(unsigned int *)(v25 + 16);
  v26 = v25 + *(unsigned int *)(v25 + 12) + 25;
LABEL_36:
  v37 = v7[14];
  if (!v37 || !*((_DWORD *)v37 + 2) || (v38 = v37[5]) == 0 || (v39 = *((_DWORD *)v38 + 10)) == 0)
  {
LABEL_59:
    v52 = 0;
    v51 = 0;
    goto LABEL_60;
  }
  v40 = v26;
  v41 = v38[3];
  v42 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v130 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v130 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v130;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v43 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xACC792AF839889B6)) ^ ((0x9DDFEA08EB382D69
                                                                             * (qword_1ED7EAC80 ^ 0xACC792AF839889B6)) >> 47) ^ 0xCAEAE6CAE4EAE8C2);
  v44 = (-348639895 * ((v43 >> 47) ^ v43)) ^ 0x74616566;
  for (j = 1; ; ++j)
  {
    v46 = v44 & (v39 - 1);
    v47 = v41 + 24 * v46;
    v48 = *(_QWORD **)v47;
    if (*(_QWORD *)v47 == -1)
    {
      if ("target-features" == (char *)-1)
        goto LABEL_55;
      goto LABEL_44;
    }
    if (v48 != (_QWORD *)-2)
      break;
    if ("target-features" == (char *)-2)
      goto LABEL_55;
LABEL_44:
    if (v48 == (_QWORD *)-1)
    {
      v52 = 0;
      v51 = 0;
      v26 = v40;
      goto LABEL_60;
    }
    v44 = j + v46;
  }
  if (*(_QWORD *)(v47 + 8) != 15)
    goto LABEL_44;
  if (*v48 != 0x662D746567726174 || *(_QWORD *)((char *)v48 + 7) != 0x7365727574616566)
    goto LABEL_44;
LABEL_55:
  v50 = *(_QWORD *)(v47 + 16);
  v26 = v40;
  if (!v50)
    goto LABEL_59;
  v51 = *(unsigned int *)(v50 + 16);
  v52 = v50 + *(unsigned int *)(v50 + 12) + 25;
LABEL_60:
  v155 = 0;
  v156 = 0;
  v157 = 0;
  v53 = llvm::TargetRegistry::lookupTarget((std::string::size_type)(v12 + 27), (uint64_t)&v155);
  if (v53)
  {
    LOBYTE(__src) = 0;
    *(_QWORD *)((char *)&__src + 4) = 0;
    WORD6(__src) = WORD6(__src) & 0xE000 | 0x400;
    *(_QWORD *)&v178 = 0x100000001;
    BYTE8(v178) &= 0xF8u;
    HIDWORD(v178) = 0;
    LODWORD(v179) = v179 & 0xFE000000 | 0x30;
    DWORD1(v179) = 4;
    *(_QWORD *)&v180 = 0;
    *((_QWORD *)&v179 + 1) = 0;
    WORD4(v180) &= 0xF000u;
    v181 = 0u;
    v182 = 0u;
    v183 = xmmword_1C677F4F0;
    *(_DWORD *)v184 = -65536;
    *(_DWORD *)&v184[4] = 0;
    *(_WORD *)&v184[8] = *(_WORD *)&v184[8] & 0xC000 | 0x1000;
    *(_QWORD *)&v184[12] = 2;
    __p = 0u;
    v189 = 0;
    memset(v187, 0, sizeof(v187));
    v186 = 0u;
    v185 = 0u;
    memset(&v184[24], 0, 64);
    v54 = *((_BYTE *)v12 + 239);
    v55 = v54 < 0;
    if (v54 >= 0)
      v56 = (uint64_t)(v12 + 27);
    else
      v56 = (uint64_t)v12[27];
    v57 = v54 & 0x7F;
    if (v55)
      v58 = (uint64_t)v12[28];
    else
      v58 = v57;
    *(_OWORD *)&v184[88] = 0uLL;
    v154 = sub_1C4D7B2D4((uint64_t)v53, v56, v58, v26, v131, v52, v51, (uint64_t)&__src, 0, 0, 3, 0);
    if (SHIBYTE(v189) < 0)
      operator delete((void *)__p);
    v160 = (void **)&v187[8];
    sub_1C4765410(&v160);
    if (SHIBYTE(v185) < 0)
      operator delete(*(void **)&v184[96]);
    if ((v184[95] & 0x80000000) != 0)
      operator delete(*(void **)&v184[72]);
    if ((v184[71] & 0x80000000) != 0)
      operator delete(*(void **)&v184[48]);
    if ((v184[47] & 0x80000000) != 0)
      operator delete(*(void **)&v184[24]);
    if (SBYTE7(v182) < 0)
      operator delete((void *)v181);
    v59 = (std::__shared_weak_count *)v180;
    if ((_QWORD)v180)
    {
      v60 = (unint64_t *)(v180 + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
  }
  else
  {
    v154 = 0;
  }
  if (SHIBYTE(v157) < 0)
    operator delete(v155);
  v147[0] = 0;
  v147[1] = 0;
  v148 = 0;
  v149[0] = 0;
  v149[1] = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  v153 = 0;
  *(_QWORD *)&__src = &llvm::TargetLibraryAnalysis::Key;
  v62 = sub_1C54E652C(v147, &__src);
  if (!v62[1])
  {
    v63 = v62;
    v64 = operator new();
    memset(v184, 0, 96);
    v182 = 0u;
    v183 = 0u;
    v180 = 0u;
    v181 = 0u;
    v178 = 0u;
    v179 = 0u;
    __src = 0u;
    *(_QWORD *)v64 = &unk_1E816D5D0;
    *(_BYTE *)(v64 + 8) = 0;
    *(_BYTE *)(v64 + 208) = 0;
    v65 = v63[1];
    v63[1] = v64;
    if (v65)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
      if (v184[88])
        sub_1C61BB478((uint64_t *)&__src);
    }
  }
  *(_QWORD *)&__src = &llvm::AssumptionAnalysis::Key;
  v66 = sub_1C54E652C(v147, &__src);
  if (!v66[1])
  {
    v67 = v66;
    v68 = (_QWORD *)operator new();
    *v68 = &unk_1E816D628;
    v69 = v67[1];
    v67[1] = v68;
    if (v69)
      (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  }
  *(_QWORD *)&__src = &llvm::DominatorTreeAnalysis::Key;
  v70 = sub_1C54E652C(v147, &__src);
  if (!v70[1])
  {
    v71 = v70;
    v72 = (_QWORD *)operator new();
    *v72 = &unk_1E816D680;
    v73 = v71[1];
    v71[1] = v72;
    if (v73)
      (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  }
  *(_QWORD *)&__src = &llvm::LoopAnalysis::Key;
  v74 = sub_1C54E652C(v147, &__src);
  if (!v74[1])
  {
    v75 = v74;
    v76 = (_QWORD *)operator new();
    *v76 = &unk_1E816D6D8;
    v77 = v75[1];
    v75[1] = v76;
    if (v77)
      (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  }
  *(_QWORD *)&__src = &llvm::ScalarEvolutionAnalysis::Key;
  v78 = sub_1C54E652C(v147, &__src);
  if (!v78[1])
  {
    v79 = v78;
    v80 = (_QWORD *)operator new();
    *v80 = &unk_1E816D730;
    v81 = v79[1];
    v79[1] = v80;
    if (v81)
      (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  }
  *(_QWORD *)&__src = &llvm::PassInstrumentationAnalysis::Key;
  v82 = sub_1C54E652C(v147, &__src);
  if (!v82[1])
  {
    v83 = v82;
    v84 = (_QWORD *)operator new();
    *v84 = &unk_1E816D788;
    v84[1] = 0;
    v85 = v83[1];
    v83[1] = v84;
    if (v85)
      (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
  }
  v192[0] = &off_1E813DC50;
  v192[1] = llvm::TargetIRAnalysis::getDefaultTTI;
  v193 = v192;
  if (!v154)
    goto LABEL_107;
  v190[0] = &off_1E816D7E0;
  v190[1] = &v154;
  v191 = v190;
  *((_QWORD *)&v178 + 1) = &__src;
  *(_QWORD *)&__src = &off_1E816D7E0;
  *((_QWORD *)&__src + 1) = &v154;
  v193 = 0;
  nullsub_1729(v192);
  if (*((_QWORD *)&v178 + 1))
  {
    if (*((__int128 **)&v178 + 1) == &__src)
    {
      v193 = v192;
      (*(void (**)(uint64_t, _QWORD *))(__src + 24))((uint64_t)&__src, v192);
      if (*((__int128 **)&v178 + 1) == &__src)
      {
        v97 = (void (**)(void))(__src + 32);
      }
      else
      {
        if (!*((_QWORD *)&v178 + 1))
          goto LABEL_138;
        v97 = (void (**)(void))(**((_QWORD **)&v178 + 1) + 40);
      }
      (*v97)();
      goto LABEL_138;
    }
    v193 = (_QWORD *)*((_QWORD *)&v178 + 1);
    *((_QWORD *)&v178 + 1) = 0;
  }
  else
  {
    v193 = 0;
  }
LABEL_138:
  if (v191 == v190)
  {
    v98 = (void (**)(void))(v190[0] + 32);
  }
  else
  {
    if (!v191)
      goto LABEL_107;
    v98 = (void (**)(void))(*v191 + 40);
  }
  (*v98)();
LABEL_107:
  *(_QWORD *)&__src = &llvm::TargetIRAnalysis::Key;
  v86 = sub_1C54E652C(v147, &__src);
  if (v86[1])
    goto LABEL_124;
  v87 = v86;
  v89 = (_QWORD *)operator new();
  if (!v193)
  {
    *((_QWORD *)&v178 + 1) = 0;
    *v89 = &unk_1E816D828;
LABEL_116:
    v89[4] = 0;
    goto LABEL_117;
  }
  if (v193 == v192)
  {
    *((_QWORD *)&v178 + 1) = &__src;
    (*(void (**)(_QWORD *, __int128 *))(v192[0] + 24))(v192, &__src);
    v90 = (__int128 *)*((_QWORD *)&v178 + 1);
  }
  else
  {
    v90 = (__int128 *)(*(uint64_t (**)(void))(*v193 + 16))();
    *((_QWORD *)&v178 + 1) = v90;
  }
  *v89 = &unk_1E816D828;
  v88 = v89 + 1;
  if (!v90)
    goto LABEL_116;
  if (v90 == &__src)
  {
    v89[4] = v88;
    (*(void (**)(__int128 *))(__src + 24))(&__src);
  }
  else
  {
    v89[4] = v90;
    *((_QWORD *)&v178 + 1) = 0;
  }
LABEL_117:
  v91 = v87[1];
  v87[1] = v89;
  if (v91)
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v91 + 8))(v91, v88);
  if (*((__int128 **)&v178 + 1) == &__src)
  {
    v92 = (void (**)(void))(__src + 32);
LABEL_123:
    (*v92)();
  }
  else if (*((_QWORD *)&v178 + 1))
  {
    v92 = (void (**)(void))(**((_QWORD **)&v178 + 1) + 40);
    goto LABEL_123;
  }
LABEL_124:
  if (v193)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t ***))(*v193 + 48))(&v146, v193, v7);
    llvm::ScalarEvolutionAnalysis::run((uint64_t)v7, (uint64_t)v147, (uint64_t)&__src);
    v169[0] = &v170;
    v169[1] = (void *)0x100000000;
    v176 = 0;
    v171[1] = 0;
    v171[0] = 0;
    v172 = 0;
    v175 = 0;
    v173 = 0;
    v174 = v7;
    sub_1C53BA620((uint64_t)v169, 0);
    llvm::LoopAnalysis::run((uint64_t)v7, (uint64_t)v147, (uint64_t)v167);
    ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl((uint64_t)v147, &llvm::TargetIRAnalysis::Key, (uint64_t)v7);
    v160 = (void **)v7;
    v161 = (_QWORD *)(ResultImpl + 8);
    v162[0] = (char *)&v163;
    v162[1] = (char *)0x400000000;
    v166 = 0;
    v164[1] = 0;
    v164[0] = 0;
    v165 = 0;
    llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter((llvm::OptimizationRemarkEmitter *)v144, (const llvm::Function *)v7);
    if (v168)
    {
      v94 = ((*(_QWORD *)a3 >> 4) ^ (*(_QWORD *)a3 >> 9)) & (v168 - 1);
      v95 = *(_QWORD *)(v167[0] + 16 * v94);
      if (*(_QWORD *)a3 == v95)
      {
LABEL_127:
        v96 = *(_QWORD *)(v167[0] + 16 * v94 + 8);
        goto LABEL_148;
      }
      v99 = 1;
      while (v95 != -4096)
      {
        v100 = v94 + v99++;
        v94 = v100 & (v168 - 1);
        v95 = *(_QWORD *)(v167[0] + 16 * v94);
        if (*(_QWORD *)a3 == v95)
          goto LABEL_127;
      }
    }
    v96 = 0;
LABEL_148:
    v143 = 0;
    v141 = 0u;
    v142 = 0u;
    v140 = 0u;
    llvm::gatherUnrollingPreferences((llvm::BasicBlock ***)v96, (uint64_t)&__src, &v146, 0, 0, (uint64_t)v144, 3, 0, (uint64_t)&v140, 0, 257, 0, 257, 0, 0, 0);
    LODWORD(v101) = v140;
    LODWORD(v102) = HIDWORD(v140);
    BYTE12(v142) = 1;
    LODWORD(v140) = (*(double *)&xmmword_1ED805948 * (double)v101);
    DWORD2(v140) = v140;
    HIDWORD(v140) = (*(double *)&xmmword_1ED805948 * (double)v102);
    LODWORD(v141) = HIDWORD(v140);
    v139 = 0;
    LODWORD(v155) = 0;
    WORD2(v155) = 1;
    BYTE6(v155) = 1;
    (*(void (**)(uint64_t, uint64_t, __int128 *, void **))(*(_QWORD *)v146 + 192))(v146, v96, &__src, &v155);
    BYTE4(v155) = 0;
    BYTE6(v155) = 0;
    v139 = v155;
    v155 = v159;
    v156 = v159;
    v157 = 32;
    v158 = 0;
    llvm::CodeMetrics::collectEphemeralValues(v96, (llvm::AssumptionCache *)&v160, (llvm::SmallPtrSetImplBase *)&v155);
    v104 = *(_QWORD *)(v96 + 32);
    for (k = *(_QWORD *)(v96 + 40); v104 != k; v104 += 8)
    {
      v105 = *(_QWORD *)v104 + 40;
      for (m = *(_QWORD *)(*(_QWORD *)v104 + 48); m != v105; m = *(_QWORD *)(m + 8))
      {
        if (m)
          v107 = m - 24;
        else
          v107 = 0;
        if (m)
        {
          if (*(unsigned __int8 *)(v107 + 16) - 62 >= 0xFFFFFFFE)
          {
            v108 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v107 - 32));
            if (v108)
            {
              if (*((_BYTE *)v108 + 16) == 59)
              {
                v109 = v7[10];
                if (v109)
                  v110 = v109 - 3;
                else
                  v110 = 0;
                if (*((uint64_t ***)v108 + 5) == v110)
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v155, v107);
              }
            }
          }
        }
      }
    }
    v137 = 0;
    v111 = llvm::ApproximateLoopSize(v96, &v138, (_BYTE *)&v137 + 1, &v137, &v146, &v155, SDWORD1(v142));
    if (HIBYTE(v137) | v137)
    {
      v5 = 1;
    }
    else
    {
      v136 = 0;
      llvm::computeUnrollCount((llvm::Loop *)v96, &v146, (unsigned __int8 *)v169, (uint64_t)v167, (llvm::ConstantInt ****)&__src, &v155, (llvm::OptimizationRemarkEmitter *)v144, 0, 0, 0, 0, v111, (int *)&v140, &v139, &v136);
      if (DWORD1(v141) <= 1)
        v5 = 1;
      else
        v5 = DWORD1(v141);
    }
    v11 = a1;
    v8 = v134;
    if (v156 != v155)
      free(v156);
    v112 = v145;
    v145 = 0;
    if (v112)
    {
      v113 = *v112;
      *v112 = 0;
      if (v113)
        (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
      MEMORY[0x1CAA32FC0](v112, 0x20C4093837F09);
    }
    sub_1C4D9F9F4(v164);
    MEMORY[0x1CAA32FB4](v164[0], 8);
    sub_1C4D9FB40(v162);
    llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase(v167);
    sub_1C4DC4E38(v171);
    if (v169[0] != &v170)
      free(v169[0]);
    llvm::ScalarEvolution::~ScalarEvolution((llvm::ScalarEvolution *)&__src);
    v114 = v146;
    v146 = 0;
    v10 = a2;
    if (v114)
      (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
    if (v193 == v192)
    {
      v115 = (void (**)(void))(v192[0] + 32);
LABEL_184:
      (*v115)();
    }
    else if (v193)
    {
      v115 = (void (**)(void))(*v193 + 40);
      goto LABEL_184;
    }
    MEMORY[0x1CAA32FB4](v151, 8);
    sub_1C4D8B440(v149);
    sub_1C4D8B52C(v147);
    v116 = v154;
    v154 = 0;
    if (v116)
      (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
LABEL_187:
    if (v5 == 1)
    {
      *a5 = a3;
    }
    else
    {
      v117 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 48) - 24);
      v118 = *(_DWORD *)(v117 + 8);
      DWORD2(__src) = v118 >> 8;
      if (v118 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&__src, v5, 0);
      }
      else
      {
        if (v118 <= 0xFF)
          v119 = 0;
        else
          v119 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v118);
        *(_QWORD *)&__src = v119 & v5;
      }
      v120 = (void **)llvm::ConstantInt::get((llvm::ConstantInt **)v117, (llvm::Type *)&__src, a3);
      if (DWORD2(__src) >= 0x41 && (_QWORD)__src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      v121 = *v10;
      v135 = v121;
      if (v121)
        llvm::MetadataTracking::track((uint64_t)&v135, v121, 2);
      v155 = a3;
      v160 = v120;
      llvm::OpenMPIRBuilder::tileLoops(v11, &v135, (_OWORD **)&v155, 1, (uint64_t)&v160, (uint64_t)&__src);
      if (v135)
        llvm::MetadataTracking::untrack((uint64_t)&v135, v135);
      v123 = __src;
      *a5 = *(const llvm::APInt **)__src;
      v124 = *(_QWORD **)(v123 + 8);
      v125 = (llvm::ConstantInt **)(*v8 + 1960);
      LODWORD(v156) = 32;
      v155 = (void *)v5;
      v126 = llvm::ConstantInt::get(v125, (llvm::Type *)&v155, v122);
      v128 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v126, v127);
      if (v156 >= 0x41 && v155)
        MEMORY[0x1CAA32F9C](v155, 0x1000C8000313F17);
      v167[0] = llvm::MDString::get(v8, "llvm.loop.unroll.enable", 0x17uLL);
      v155 = (void *)llvm::MDTuple::getImpl(v8, v167, 1, 0, 1);
      v160 = (void **)llvm::MDString::get(v8, "llvm.loop.unroll.count", 0x16uLL);
      v161 = v128;
      v156 = (_BYTE *)llvm::MDTuple::getImpl(v8, &v160, 2, 0, 1);
      sub_1C54E07C4(v124, &v155, 2);
      if ((_QWORD)__src)
      {
        *((_QWORD *)&__src + 1) = __src;
        operator delete((void *)__src);
      }
    }
  }
  else
  {
    sub_1C485C2F0();
    llvm::OpenMPIRBuilder::createCopyPrivate();
  }
}

uint64_t llvm::OpenMPIRBuilder::createCopyPrivate(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  llvm::Value **v13;
  uint64_t v14;
  char v15;
  char v16;
  char *v17;
  char *v18;
  llvm::Value *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 **v29;
  int v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t ThreadID;
  llvm::UndefValue *Ident;
  _BYTE v36[32];
  __int16 v37;
  unsigned int v38;
  unsigned __int8 *v39;
  uint64_t v40[4];
  uint64_t v41;
  llvm::Value *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (!sub_1C62683AC(a1, a2))
    return *a2;
  v38 = 0;
  v13 = (llvm::Value **)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v38);
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v13, v38, 0, 0);
  ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
  v14 = **(_QWORD **)(a1 + 408) + 1960;
  v37 = 257;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 392) + 56) + 40) + 272, v14);
  v16 = v15;
  v17 = (char *)operator new(0x60uLL);
  v18 = v17;
  v19 = (llvm::Value *)(v17 + 32);
  *((_QWORD *)v17 + 2) = 0;
  *((_QWORD *)v17 + 3) = v17 + 32;
  LOWORD(v41) = 257;
  *((_QWORD *)v17 + 4) = v14;
  *((_QWORD *)v17 + 5) = 0;
  *((_WORD *)v17 + 24) = 60;
  *((_DWORD *)v17 + 13) = 1;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_OWORD *)(v17 + 72) = 0u;
  *((_DWORD *)v17 + 22) = 0;
  *(_QWORD *)v17 = a6;
  *((_QWORD *)v17 + 1) = 0;
  if (a6)
  {
    v22 = *(_QWORD *)(a6 + 8);
    v21 = (_QWORD *)(a6 + 8);
    v20 = v22;
    *((_QWORD *)v17 + 1) = v22;
    if (v22)
      *(_QWORD *)(v20 + 16) = v17 + 8;
    *((_QWORD *)v17 + 2) = v21;
    *v21 = v17;
  }
  *((_WORD *)v17 + 25) = 2 * (v16 & 0x3F);
  v17[92] = 1;
  llvm::Value::setName((uint64_t ***)v17 + 4, (uint64_t)v40);
  (*(void (**)(_QWORD, llvm::Value *, _BYTE *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v19, v36, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
  v23 = *(unsigned int *)(a1 + 352);
  if ((_DWORD)v23)
  {
    v27 = *(_QWORD *)(a1 + 344);
    v28 = v27 + 16 * v23;
    v29 = (unsigned __int8 **)(v18 + 80);
    do
    {
      v30 = *(_DWORD *)v27;
      v31 = *(unsigned __int8 **)(v27 + 8);
      if (v31)
      {
        if (!v30)
        {
          v39 = *(unsigned __int8 **)(v27 + 8);
          llvm::MetadataTracking::track((uint64_t)&v39, v31, 2);
          v32 = *v29;
          goto LABEL_26;
        }
      }
      else
      {
        v32 = *v29;
        if (!*v29 && (v18[55] & 0x20) == 0)
          goto LABEL_23;
        if (!v30)
        {
          v39 = 0;
LABEL_26:
          if (v32)
            llvm::MetadataTracking::untrack((uint64_t)(v18 + 80), v32);
          v33 = v39;
          *v29 = v39;
          if (v33)
            llvm::MetadataTracking::retrack((uint64_t)&v39, v33, (uint64_t)(v18 + 80));
          goto LABEL_23;
        }
      }
      llvm::Value::setMetadata(v19, *(_DWORD *)v27, (llvm::MDNode *)v31);
LABEL_23:
      v27 += 16;
    }
    while (v27 != v28);
  }
  v40[0] = (uint64_t)Ident;
  v40[1] = ThreadID;
  v40[2] = a3;
  v40[3] = a4;
  v41 = a5;
  v42 = v19;
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(_QWORD *)(a1 + 336), 114);
  if (*(_BYTE *)(v24 + 16))
    v25 = 0;
  else
    v25 = v24;
  if (v25)
    v26 = *(uint64_t ***)(v25 + 24);
  else
    v26 = 0;
  v37 = 257;
  sub_1C4774778((uint64_t *)(a1 + 344), v26, v25, v40, 6, (uint64_t)v36, 0);
  return *(_QWORD *)(a1 + 392);
}

uint64_t llvm::OpenMPIRBuilder::createSingle(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, llvm::BasicBlock *), uint64_t a4, _QWORD *a5, char a6, uint64_t a7)
{
  const llvm::APInt *v14;
  uint64_t v16;
  llvm::ConstantInt *v17;
  uint64_t *v18;
  char v19;
  char *v20;
  char *v21;
  llvm::Value *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  llvm::Value **v29;
  llvm::UndefValue *Ident;
  uint64_t ThreadID;
  uint64_t v32;
  uint64_t v33;
  uint64_t **v34;
  uint64_t v35;
  llvm::Constant **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t **v39;
  uint64_t v40;
  _QWORD *v41;
  void (**v42)(void);
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 **v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  unsigned int v54;
  __int128 v55;
  unsigned __int8 *v56[2];
  __int16 v57;
  _QWORD v58[3];
  _QWORD *v59;
  uint64_t v60[3];

  v60[2] = *MEMORY[0x1E0C80C00];
  if (!sub_1C62683AC(a1, a2))
    return *a2;
  if (a7)
  {
    v16 = **(_QWORD **)(a1 + 408);
    v17 = *(llvm::ConstantInt **)(v16 + 1960);
    DWORD2(v55) = *(_DWORD *)(v16 + 1968) >> 8;
    if (DWORD2(v55) > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v55, 0, 0);
    else
      *(_QWORD *)&v55 = 0;
    v18 = (uint64_t *)llvm::ConstantInt::get(v17, (llvm::LLVMContext *)&v55, v14);
    if (DWORD2(v55) >= 0x41 && (_QWORD)v55)
      MEMORY[0x1CAA32F9C](v55, 0x1000C8000313F17);
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 392) + 56) + 40) + 272, *v18);
    v52 = v19;
    v20 = (char *)operator new(0x80uLL);
    v21 = v20;
    *((_DWORD *)v20 + 21) = *((_DWORD *)v20 + 21) & 0x38000000 | 2;
    *(_QWORD *)v20 = 0;
    *((_QWORD *)v20 + 2) = 0;
    *((_QWORD *)v20 + 1) = 0;
    *((_QWORD *)v20 + 5) = 0;
    *((_QWORD *)v20 + 6) = 0;
    *((_QWORD *)v20 + 4) = 0;
    *((_QWORD *)v20 + 8) = **(_QWORD **)*v18 + 1576;
    v22 = (llvm::Value *)(v20 + 64);
    *((_QWORD *)v20 + 3) = v20 + 64;
    *((_QWORD *)v20 + 7) = v20 + 64;
    *((_QWORD *)v20 + 9) = 0;
    v20[80] = 61;
    v20[81] = 0;
    *((_WORD *)v20 + 41) = 0;
    *((_DWORD *)v20 + 21) = 2;
    *(_OWORD *)(v20 + 88) = 0u;
    *(_OWORD *)(v20 + 104) = 0u;
    *((_DWORD *)v20 + 30) = 0;
    *(_QWORD *)v20 = v18;
    v25 = v18[1];
    v24 = v18 + 1;
    v23 = v25;
    *((_QWORD *)v20 + 1) = v25;
    if (v25)
      *(_QWORD *)(v23 + 16) = v20 + 8;
    *((_QWORD *)v20 + 2) = v24;
    *v24 = v20;
    if (*((_QWORD *)v20 + 4))
    {
      **((_QWORD **)v20 + 6) = *((_QWORD *)v20 + 5);
      v51 = *((_QWORD *)v20 + 5);
      if (v51)
        *(_QWORD *)(v51 + 16) = *((_QWORD *)v20 + 6);
    }
    v26 = (_QWORD *)(a7 + 8);
    v27 = *(_QWORD *)(a7 + 8);
    *((_QWORD *)v20 + 5) = v27;
    *((_QWORD *)v20 + 4) = a7;
    if (v27)
      *(_QWORD *)(v27 + 16) = v20 + 40;
    *((_QWORD *)v20 + 6) = v26;
    *v26 = v20 + 32;
    *((_WORD *)v20 + 41) = 2 * (v52 & 0x3F);
    v20[124] = 1;
    v57 = 257;
    (*(void (**)(_QWORD, llvm::Value *, __int128 *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v22, &v55, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
    v28 = *(unsigned int *)(a1 + 352);
    if ((_DWORD)v28)
    {
      v44 = *(_QWORD *)(a1 + 344);
      v45 = v44 + 16 * v28;
      v46 = (unsigned __int8 **)(v21 + 112);
      do
      {
        v47 = *(_DWORD *)v44;
        v48 = *(unsigned __int8 **)(v44 + 8);
        if (v48)
        {
          v53 = v45;
          if (!v47)
          {
            v60[0] = *(_QWORD *)(v44 + 8);
            llvm::MetadataTracking::track((uint64_t)v60, v48, 2);
            v49 = *v46;
            goto LABEL_54;
          }
        }
        else
        {
          v49 = *v46;
          if (!*v46 && (v21[87] & 0x20) == 0)
            goto LABEL_51;
          v53 = v45;
          if (!v47)
          {
            v60[0] = 0;
LABEL_54:
            if (v49)
              llvm::MetadataTracking::untrack((uint64_t)(v21 + 112), v49);
            v50 = (unsigned __int8 *)v60[0];
            *v46 = (unsigned __int8 *)v60[0];
            if (v50)
              llvm::MetadataTracking::retrack((uint64_t)v60, v50, (uint64_t)(v21 + 112));
            goto LABEL_50;
          }
        }
        llvm::Value::setMetadata(v22, v47, (llvm::MDNode *)v48);
LABEL_50:
        v45 = v53;
LABEL_51:
        v44 += 16;
      }
      while (v44 != v45);
    }
  }
  v54 = 0;
  v29 = (llvm::Value **)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v54);
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v29, v54, 0, 0);
  ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
  v60[0] = (uint64_t)Ident;
  v60[1] = ThreadID;
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(_QWORD *)(a1 + 336), 92);
  v33 = v32;
  v34 = 0;
  if (*(_BYTE *)(v33 + 16))
    v35 = 0;
  else
    v35 = v33;
  if (v35)
    v34 = *(uint64_t ***)(v35 + 24);
  v57 = 257;
  v36 = (llvm::Constant **)sub_1C4774778((uint64_t *)(a1 + 344), v34, v35, v60, 2, (uint64_t)&v55, 0);
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(_QWORD *)(a1 + 336), 93);
  if (*(_BYTE *)(v37 + 16))
    v38 = 0;
  else
    v38 = v37;
  if (v38)
    v39 = *(uint64_t ***)(v38 + 24);
  else
    v39 = 0;
  v57 = 257;
  v40 = sub_1C4774778((uint64_t *)(a1 + 344), v39, v38, v60, 2, (uint64_t)&v55, 0);
  v41 = (_QWORD *)a5[3];
  if (v41)
  {
    if (v41 == a5)
    {
      v59 = v58;
      (*(void (**)(_QWORD *, _QWORD *))(*a5 + 24))(a5, v58);
    }
    else
    {
      v59 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v41 + 16))(v41);
    }
  }
  else
  {
    v59 = 0;
  }
  llvm::OpenMPIRBuilder::EmitOMPInlinedRegion(a1, 55, v36, v40, a3, a4, v58, 1, 1u, 0);
  if (v59 == v58)
  {
    v42 = (void (**)(void))(v58[0] + 32);
    goto LABEL_33;
  }
  if (v59)
  {
    v42 = (void (**)(void))(*v59 + 40);
LABEL_33:
    (*v42)();
  }
  if ((a6 & 1) == 0)
  {
    v55 = *(_OWORD *)(a1 + 392);
    v43 = (unsigned __int8 *)a2[2];
    v56[0] = v43;
    if (v43)
      llvm::MetadataTracking::track((uint64_t)v56, v43, 2);
    if (sub_1C62683AC(a1, (uint64_t *)&v55))
      llvm::OpenMPIRBuilder::emitBarrierImpl(a1, &v55, 89, 0, 0);
    if (v56[0])
      llvm::MetadataTracking::untrack((uint64_t)v56, v56[0]);
  }
  return *(_QWORD *)(a1 + 392);
}

llvm::BasicBlock *llvm::OpenMPIRBuilder::emitCommonDirectiveEntry(uint64_t a1, llvm::Type *a2, llvm::Constant **a3, llvm::BasicBlock *a4, char a5)
{
  uint64_t v8;
  llvm::Value **NullValue;
  llvm::Value *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned __int8 **v23;
  char *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  _QWORD *i;
  _QWORD *v36;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 **v40;
  int v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44[4];
  __int16 v45;
  unsigned __int8 *v46;

  if (!a3 || (a5 & 1) == 0)
    return *(llvm::BasicBlock **)(a1 + 392);
  v8 = *(_QWORD *)(a1 + 392);
  v45 = 257;
  NullValue = llvm::Constant::getNullValue(*a3, a2);
  v10 = (llvm::Value *)sub_1C4774B48(a1 + 344, 33, (uint64_t)a3, (uint64_t)NullValue, (uint64_t)v44);
  v11 = **(_QWORD ***)(a1 + 336);
  v44[0] = "omp_region.body";
  v45 = 259;
  v12 = operator new();
  *(_QWORD *)v12 = *v11 + 1600;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v12 + 20) & 0xC0000000;
  *(_DWORD *)(v12 + 16) = 22;
  *(_DWORD *)(v12 + 20) = v13;
  v14 = (_QWORD *)(v12 + 40);
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = v12 + 40;
  *(_QWORD *)(v12 + 48) = v12 + 40;
  *(_QWORD *)(v12 + 56) = 0;
  llvm::Value::setName((uint64_t ***)v12, (uint64_t)v44);
  v15 = (char *)operator new(0x40uLL);
  *(_QWORD *)v15 = **(_QWORD **)(a1 + 408) + 1576;
  *((_QWORD *)v15 + 1) = 0;
  v15[16] = 35;
  *(_OWORD *)(v15 + 17) = 0u;
  v16 = *(_QWORD *)(v12 + 40);
  *((_QWORD *)v15 + 3) = v16;
  v17 = v15 + 24;
  *(_OWORD *)(v15 + 44) = 0u;
  *(_OWORD *)(v15 + 33) = 0u;
  *(_WORD *)(v12 + 18) &= ~0x8000u;
  *((_QWORD *)v15 + 4) = v12 + 40;
  *((_QWORD *)v15 + 5) = v12;
  *(_QWORD *)(v16 + 8) = v15 + 24;
  *(_QWORD *)(v12 + 40) = v15 + 24;
  sub_1C538C368((_QWORD *)(*(_QWORD *)(v8 + 56) + 72), v8 + 24, (_QWORD *)v12);
  v18 = *(_QWORD *)(v8 + 40);
  if (v18 == v8 + 40)
  {
    v20 = 0;
  }
  else
  {
    if (v18)
      v19 = v18 - 24;
    else
      v19 = 0;
    if (*(unsigned __int8 *)(v19 + 16) - 29 >= 0xB)
      v20 = 0;
    else
      v20 = v19;
  }
  v21 = (char *)operator new(0xA0uLL);
  v22 = 0;
  v23 = (unsigned __int8 **)(v21 + 96);
  *((_DWORD *)v21 + 29) = *((_DWORD *)v21 + 29) & 0x38000000 | 3;
  do
  {
    v24 = &v21[v22];
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = 0;
    *((_QWORD *)v24 + 2) = 0;
    *((_QWORD *)v24 + 3) = v23;
    v22 += 32;
  }
  while (v22 != 96);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v21 + 96), (llvm::BasicBlock *)v12, a4, v10, 0);
  v45 = 257;
  sub_1C4867F8C((uint64_t *)(a1 + 344), v23, (uint64_t)v44);
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v20 + 40) + 40, (uint64_t ***)v20);
  v25 = 0;
  v26 = *(_QWORD *)(v20 + 24);
  v27 = *(_QWORD **)(v20 + 32);
  *v27 = v26;
  *(_QWORD *)(v26 + 8) = v27;
  *(_QWORD *)(v20 + 24) = 0;
  *(_QWORD *)(v20 + 32) = 0;
  v28 = (unsigned __int8 *)*((_QWORD *)v15 + 6);
  *(_QWORD *)(a1 + 392) = *((_QWORD *)v15 + 5);
  *(_QWORD *)(a1 + 400) = v17;
  v44[0] = v28;
  if (v28)
  {
    llvm::MetadataTracking::track((uint64_t)v44, v28, 2);
    v25 = v44[0];
  }
  sub_1C4774EF4(a1 + 344, 0, (uint64_t)v25);
  if (v44[0])
    llvm::MetadataTracking::untrack((uint64_t)v44, v44[0]);
  v45 = 257;
  (*(void (**)(_QWORD, uint64_t, unsigned __int8 **, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v20, v44, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
  v29 = *(unsigned int *)(a1 + 352);
  if ((_DWORD)v29)
  {
    v38 = *(_QWORD *)(a1 + 344);
    v39 = v38 + 16 * v29;
    v40 = (unsigned __int8 **)(v20 + 48);
    do
    {
      v41 = *(_DWORD *)v38;
      v42 = *(unsigned __int8 **)(v38 + 8);
      if (v42)
      {
        if (!v41)
        {
          v46 = *(unsigned __int8 **)(v38 + 8);
          llvm::MetadataTracking::track((uint64_t)&v46, v42, 2);
LABEL_46:
          if (&v46 == v40)
          {
            if (v46)
              llvm::MetadataTracking::untrack((uint64_t)&v46, v46);
          }
          else
          {
            if (*v40)
              llvm::MetadataTracking::untrack(v20 + 48, *v40);
            v43 = v46;
            *v40 = v46;
            if (v43)
              llvm::MetadataTracking::retrack((uint64_t)&v46, v43, v20 + 48);
          }
          goto LABEL_43;
        }
      }
      else
      {
        if (!*v40 && (*(_BYTE *)(v20 + 23) & 0x20) == 0)
          goto LABEL_43;
        if (!v41)
        {
          v46 = 0;
          goto LABEL_46;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v20, v41, (llvm::MDNode *)v42);
LABEL_43:
      v38 += 16;
    }
    while (v38 != v39);
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v15 + 5) + 40, (uint64_t ***)v15);
  v30 = *((_QWORD *)v15 + 3);
  v31 = (_QWORD *)*((_QWORD *)v15 + 4);
  *v31 = v30;
  *(_QWORD *)(v30 + 8) = v31;
  *v17 = 0;
  *((_QWORD *)v15 + 4) = 0;
  llvm::Value::deleteValue((llvm::Value *)v15);
  v32 = 0;
  if (*v14)
    v33 = *v14 - 24;
  else
    v33 = 0;
  if (*(unsigned __int8 *)(v33 + 16) - 29 >= 0xB)
    v33 = 0;
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(v33 + 40);
  *(_QWORD *)(a1 + 400) = v33 + 24;
  v34 = *(unsigned __int8 **)(v33 + 48);
  v44[0] = v34;
  if (v34)
  {
    llvm::MetadataTracking::track((uint64_t)v44, v34, 2);
    v32 = v44[0];
  }
  sub_1C4774EF4(a1 + 344, 0, (uint64_t)v32);
  if (v44[0])
    llvm::MetadataTracking::untrack((uint64_t)v44, v44[0]);
  for (i = (_QWORD *)*((_QWORD *)a4 + 6); i != (_QWORD *)((char *)a4 + 40); i = (_QWORD *)i[1])
  {
    v36 = i - 3;
    if (!i)
      v36 = 0;
    if (*((_BYTE *)v36 + 16) != 83)
      break;
  }
  return a4;
}

uint64_t llvm::OpenMPIRBuilder::createCopyinClauseBlocks(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned __int8 *a4, unsigned __int8 *a5, uint64_t a6, int a7)
{
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  llvm::Value *v35;
  char *v36;
  uint64_t v37;
  unsigned __int8 **v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned __int8 **v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  int v52;
  uint64_t v53;
  __int128 v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56[4];
  __int16 v57;

  if (!a2)
    return 0;
  v10 = (uint64_t *)(a1 + 344);
  v53 = a1 + 344;
  v54 = *(_OWORD *)(a1 + 392);
  llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)(a1 + 344), &v55);
  v11 = a2[7];
  v12 = **(_QWORD ***)(a1 + 336);
  v56[0] = "copyin.not.master";
  v57 = 259;
  v13 = operator new();
  *(_QWORD *)v13 = *v12 + 1600;
  *(_QWORD *)(v13 + 8) = 0;
  v14 = *(_DWORD *)(v13 + 20) & 0xC0000000;
  *(_QWORD *)(v13 + 24) = 0;
  v15 = v13 + 24;
  *(_DWORD *)(v13 + 16) = 22;
  *(_DWORD *)(v13 + 20) = v14;
  v16 = v13 + 40;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = v13 + 40;
  *(_QWORD *)(v13 + 48) = v13 + 40;
  *(_QWORD *)(v13 + 56) = 0;
  if (v11)
  {
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v11 + 72, (_QWORD *)v13);
    v17 = *(_QWORD *)(v11 + 72);
    *(_QWORD *)(v13 + 24) = v17;
    *(_QWORD *)(v13 + 32) = v11 + 72;
    *(_QWORD *)(v17 + 8) = v15;
    *(_QWORD *)(v11 + 72) = v15;
  }
  llvm::Value::setName((uint64_t ***)v13, (uint64_t)v56);
  v19 = a2 + 5;
  v18 = (uint64_t *)a2[5];
  v52 = a7;
  if (v18 == a2 + 5 || (v18 ? (v20 = v18 - 3) : (v20 = 0), *((_BYTE *)v20 + 16) != 30))
  {
    v21 = **(_QWORD ***)(a1 + 336);
    v56[0] = "copyin.not.master.end";
    v57 = 259;
    v22 = operator new();
    *(_QWORD *)v22 = *v21 + 1600;
    *(_QWORD *)(v22 + 8) = 0;
    v23 = *(_DWORD *)(v22 + 20) & 0xC0000000;
    *(_QWORD *)(v22 + 24) = 0;
    v24 = v22 + 24;
    *(_DWORD *)(v22 + 16) = 22;
    *(_DWORD *)(v22 + 20) = v23;
    *(_QWORD *)(v22 + 32) = 0;
    *(_QWORD *)(v22 + 40) = v22 + 40;
    *(_QWORD *)(v22 + 48) = v22 + 40;
    *(_QWORD *)(v22 + 56) = 0;
    if (v11)
    {
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v11 + 72, (_QWORD *)v22);
      v25 = *(_QWORD *)(v11 + 72);
      *(_QWORD *)(v22 + 24) = v25;
      *(_QWORD *)(v22 + 32) = v11 + 72;
      *(_QWORD *)(v25 + 8) = v24;
      *(_QWORD *)(v11 + 72) = v24;
    }
    llvm::Value::setName((uint64_t ***)v22, (uint64_t)v56);
    v16 = v13 + 40;
    v27 = a5;
    v26 = a6;
  }
  else
  {
    v56[0] = "copyin.not.master.end";
    v57 = 259;
    v22 = llvm::BasicBlock::splitBasicBlock(a2, v20 + 3, (uint64_t)v56, 0);
    v28 = a2[5];
    if ((uint64_t *)v28 == v19)
    {
      v30 = 0;
    }
    else
    {
      if (v28)
        v29 = v28 - 24;
      else
        v29 = 0;
      if (*(unsigned __int8 *)(v29 + 16) - 29 >= 0xB)
        v30 = 0;
      else
        v30 = v29;
    }
    v27 = a5;
    v26 = a6;
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v30 + 40) + 40, (uint64_t ***)v30);
    v31 = *(_QWORD *)(v30 + 24);
    v32 = *(_QWORD **)(v30 + 32);
    *v32 = v31;
    *(_QWORD *)(v31 + 8) = v32;
    *(_QWORD *)(v30 + 24) = 0;
    *(_QWORD *)(v30 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v30);
  }
  *(_QWORD *)(a1 + 392) = a2;
  *(_QWORD *)(a1 + 400) = v19;
  v57 = 257;
  v33 = sub_1C4773E38(v10, 47, a4, v26, (uint64_t)v56);
  v57 = 257;
  v34 = sub_1C4773E38(v10, 47, v27, v26, (uint64_t)v56);
  v57 = 257;
  v35 = (llvm::Value *)sub_1C4774B48((uint64_t)v10, 33, (uint64_t)v33, (uint64_t)v34, (uint64_t)v56);
  v36 = (char *)operator new(0xA0uLL);
  v37 = 0;
  v38 = (unsigned __int8 **)(v36 + 96);
  *((_DWORD *)v36 + 29) = *((_DWORD *)v36 + 29) & 0x38000000 | 3;
  do
  {
    v39 = &v36[v37];
    *(_QWORD *)v39 = 0;
    *((_QWORD *)v39 + 1) = 0;
    *((_QWORD *)v39 + 2) = 0;
    *((_QWORD *)v39 + 3) = v38;
    v37 += 32;
  }
  while (v37 != 96);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v36 + 96), (llvm::BasicBlock *)v13, (llvm::BasicBlock *)v22, v35, 0);
  v57 = 257;
  sub_1C4867F8C(v10, v38, (uint64_t)v56);
  *(_QWORD *)(a1 + 392) = v13;
  *(_QWORD *)(a1 + 400) = v16;
  if (v52)
  {
    v40 = (char *)operator new(0x60uLL);
    *((_DWORD *)v40 + 13) = *((_DWORD *)v40 + 13) & 0x38000000 | 1;
    *(_QWORD *)v40 = 0;
    *((_QWORD *)v40 + 2) = 0;
    *((_QWORD *)v40 + 1) = 0;
    *((_QWORD *)v40 + 4) = ***(_QWORD ***)v22 + 1576;
    *((_QWORD *)v40 + 3) = v40 + 32;
    *((_QWORD *)v40 + 5) = 0;
    v40[48] = 30;
    v40[49] = 0;
    *((_WORD *)v40 + 25) = 0;
    *((_DWORD *)v40 + 13) = 1;
    *(_OWORD *)(v40 + 56) = 0u;
    *(_OWORD *)(v40 + 72) = 0u;
    *((_DWORD *)v40 + 22) = 0;
    v41 = (_QWORD *)(v22 + 8);
    v42 = *(_QWORD *)(v22 + 8);
    *(_QWORD *)v40 = v22;
    *((_QWORD *)v40 + 1) = v42;
    if (v42)
      *(_QWORD *)(v42 + 16) = v40 + 8;
    *((_QWORD *)v40 + 2) = v41;
    *v41 = v40;
    v57 = 257;
    v43 = sub_1C4867F8C(v10, (unsigned __int8 **)v40 + 4, (uint64_t)v56);
    *(_QWORD *)(a1 + 392) = v43[5];
    *(_QWORD *)(a1 + 400) = v43 + 3;
    v44 = v43[6];
    v56[0] = v44;
    if (v44)
    {
      llvm::MetadataTracking::track((uint64_t)v56, v44, 2);
      v45 = v56[0];
    }
    else
    {
      v45 = 0;
    }
    sub_1C4774EF4((uint64_t)v10, 0, (uint64_t)v45);
    if (v56[0])
      llvm::MetadataTracking::untrack((uint64_t)v56, v56[0]);
    v13 = *(_QWORD *)(a1 + 392);
  }
  v46 = v53;
  if ((_QWORD)v54)
  {
    sub_1C4D8AE2C(v53, v54, *((uint64_t *)&v54 + 1));
    v46 = v53;
  }
  else
  {
    *(_QWORD *)(v53 + 48) = 0;
    *(_QWORD *)(v53 + 56) = 0;
  }
  v56[0] = v55;
  if (v55)
  {
    llvm::MetadataTracking::track((uint64_t)v56, v55, 2);
    v47 = v56[0];
  }
  else
  {
    v47 = 0;
  }
  sub_1C4774EF4(v46, 0, (uint64_t)v47);
  if (v56[0])
    llvm::MetadataTracking::untrack((uint64_t)v56, v56[0]);
  if (v55)
    llvm::MetadataTracking::untrack((uint64_t)&v55, v55);
  return v13;
}

void llvm::OpenMPIRBuilder::getNameWithSeparators(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, const void *a5@<X4>, size_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  size_t v15;
  const void *v16;
  char *v17;
  llvm::raw_ostream *v18;
  char **v19;
  const void *v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int v29;
  uint64_t v30;
  void *v31;
  __int128 v32;
  _QWORD v33[18];

  v33[16] = *MEMORY[0x1E0C80C00];
  v31 = v33;
  v32 = xmmword_1C85F20B0;
  sub_1C613932C((uint64_t)v25, (uint64_t)&v31);
  if (a2)
  {
    v14 = a1 + 16 * a2;
    do
    {
      v16 = *(const void **)a1;
      v15 = *(_QWORD *)(a1 + 8);
      v17 = v28;
      if (a4 <= v27 - (uint64_t)v28)
      {
        if (a4)
        {
          memcpy(v28, a3, a4);
          v17 = &v28[a4];
          v28 += a4;
        }
        v18 = (llvm::raw_ostream *)v25;
        v19 = &v28;
      }
      else
      {
        v18 = llvm::raw_ostream::write((llvm::raw_ostream *)v25, (const char *)a3, a4);
        v19 = (char **)((char *)v18 + 32);
        v17 = (char *)*((_QWORD *)v18 + 4);
      }
      if (v15 <= *((_QWORD *)v18 + 3) - (_QWORD)v17)
      {
        if (v15)
        {
          memcpy(v17, v16, v15);
          *v19 += v15;
        }
      }
      else
      {
        llvm::raw_ostream::write(v18, (const char *)v16, v15);
      }
      a1 += 16;
      a3 = a5;
      a4 = a6;
    }
    while (a1 != v14);
  }
  v20 = *(const void **)v30;
  if (*(_QWORD *)v30)
  {
    v21 = *(_QWORD *)(v30 + 8);
    if (v21 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v21 >= 0x17)
    {
      v22 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v21 | 7) != 0x17)
        v22 = v21 | 7;
      v23 = v22 + 1;
      v24 = operator new(v22 + 1);
      a7[1] = v21;
      a7[2] = v23 | 0x8000000000000000;
      *a7 = v24;
      a7 = v24;
    }
    else
    {
      *((_BYTE *)a7 + 23) = v21;
      if (!v21)
        goto LABEL_23;
    }
    memmove(a7, v20, v21);
LABEL_23:
    *((_BYTE *)a7 + v21) = 0;
    goto LABEL_24;
  }
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
LABEL_24:
  v25[0] = off_1E81A6E70;
  if (v29 == 1 && v26)
    MEMORY[0x1CAA32F9C](v26, 0x1000C8077774924);
  if (v31 != v33)
    free(v31);
}

uint64_t llvm::OpenMPIRBuilder::createMapperAllocas(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned __int8 ***a6)
{
  uint64_t result;
  llvm::PointerType *v13;
  llvm::PointerType *v14;
  llvm::PointerType *v15;
  llvm::PointerType *v16;
  unsigned __int8 **v17;
  unsigned __int8 **v18;
  uint64_t v19;
  _BYTE v20[32];
  __int16 v21;

  result = sub_1C62683AC(a1, a2);
  if ((_DWORD)result)
  {
    llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 2136), (llvm::Type *)a5);
    v14 = v13;
    llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 2128), (llvm::Type *)a5);
    v16 = v15;
    if (a3)
    {
      sub_1C4D8AE2C(a1 + 344, a3, a4);
    }
    else
    {
      *(_QWORD *)(a1 + 392) = 0;
      *(_QWORD *)(a1 + 400) = 0;
    }
    v21 = 257;
    v17 = sub_1C486A5CC((uint64_t *)(a1 + 344), v14, 0, (uint64_t)v20);
    v21 = 257;
    v18 = sub_1C486A5CC((uint64_t *)(a1 + 344), v14, 0, (uint64_t)v20);
    v21 = 257;
    result = (uint64_t)sub_1C486A5CC((uint64_t *)(a1 + 344), v16, 0, (uint64_t)v20);
    v19 = result;
    if (*a2)
    {
      result = sub_1C4D8AE2C(a1 + 344, *a2, a2[1]);
    }
    else
    {
      *(_QWORD *)(a1 + 392) = 0;
      *(_QWORD *)(a1 + 400) = 0;
    }
    *a6 = v17;
    a6[1] = v18;
    a6[2] = (unsigned __int8 **)v19;
  }
  return result;
}

uint64_t llvm::OpenMPIRBuilder::emitMapperCall(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t **a7, uint64_t a8, llvm::Type *a9)
{
  uint64_t result;
  llvm::GetElementPtrInst *v17;
  llvm::GetElementPtrInst *v18;
  const llvm::APInt *v19;
  llvm::GetElementPtrInst *v20;
  llvm::GetElementPtrInst *v21;
  uint64_t *v22;
  uint64_t v23;
  llvm::ConstantInt *v24;
  const llvm::APInt *v25;
  llvm::ValueHandleBase *v26;
  uint64_t *v27;
  uint64_t v28;
  llvm::ConstantInt *v29;
  llvm::ValueHandleBase *v30;
  const llvm::APInt *v31;
  uint64_t *v32;
  uint64_t v33;
  llvm::ConstantInt *v34;
  const llvm::APInt *v35;
  llvm::ValueHandleBase *v36;
  uint64_t v37;
  llvm::ConstantInt *v38;
  llvm::ValueHandleBase *v39;
  const llvm::APInt *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  llvm::ConstantInt *v44;
  const llvm::APInt *v45;
  llvm::ValueHandleBase *v46;
  uint64_t v47;
  llvm::ConstantInt *v48;
  llvm::ValueHandleBase *v49;
  uint64_t v50;
  llvm::Constant *v51;
  llvm::Type *v52;
  const llvm::APInt *v53;
  llvm::Value **NullValue;
  uint64_t **v55;
  uint64_t v56;
  llvm::ConstantInt *v57;
  unsigned int v58;
  unint64_t v59;
  const llvm::APInt *v60;
  llvm::ValueHandleBase *v61;
  uint64_t v62;
  llvm::ConstantInt *v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  llvm::ValueHandleBase *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  llvm::ValueHandleBase *v72;
  __int16 v73;
  uint64_t v74;
  llvm::ValueHandleBase *v75;
  llvm::ValueHandleBase *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  llvm::Value **v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  result = sub_1C62683AC(a1, a2);
  if ((_DWORD)result)
  {
    v69 = a5;
    llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 2136), (llvm::Type *)a9);
    v18 = v17;
    llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 2128), (llvm::Type *)a9);
    v21 = v20;
    v22 = *a7;
    v23 = **(_QWORD **)(a1 + 408);
    v24 = *(llvm::ConstantInt **)(v23 + 1960);
    LODWORD(v75) = *(_DWORD *)(v23 + 1968) >> 8;
    v70 = a6;
    if (v75 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v74, 0, 0);
    else
      v74 = 0;
    v26 = llvm::ConstantInt::get(v24, (llvm::LLVMContext *)&v74, v19);
    if (v75 >= 0x41 && v74)
      MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
    v27 = (uint64_t *)(a1 + 344);
    v71 = (unint64_t)v26;
    v28 = **(_QWORD **)(a1 + 408);
    v29 = *(llvm::ConstantInt **)(v28 + 1960);
    LODWORD(v75) = *(_DWORD *)(v28 + 1968) >> 8;
    if (v75 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v74, 0, 0);
    else
      v74 = 0;
    v30 = llvm::ConstantInt::get(v29, (llvm::LLVMContext *)&v74, v25);
    if (v75 >= 0x41 && v74)
      MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
    v72 = v30;
    LOWORD(v78) = 257;
    v68 = sub_1C53901A0((uint64_t *)(a1 + 344), v18, v22, (llvm::Value *)&v71, 2, (uint64_t)&v74);
    v32 = a7[1];
    v33 = **(_QWORD **)(a1 + 408);
    v34 = *(llvm::ConstantInt **)(v33 + 1960);
    LODWORD(v75) = *(_DWORD *)(v33 + 1968) >> 8;
    if (v75 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v74, 0, 0);
    else
      v74 = 0;
    v36 = llvm::ConstantInt::get(v34, (llvm::LLVMContext *)&v74, v31);
    if (v75 >= 0x41 && v74)
      MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
    v71 = (unint64_t)v36;
    v37 = **(_QWORD **)(a1 + 408);
    v38 = *(llvm::ConstantInt **)(v37 + 1960);
    LODWORD(v75) = *(_DWORD *)(v37 + 1968) >> 8;
    if (v75 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v74, 0, 0);
    else
      v74 = 0;
    v39 = llvm::ConstantInt::get(v38, (llvm::LLVMContext *)&v74, v35);
    if (v75 >= 0x41 && v74)
      MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
    v72 = v39;
    LOWORD(v78) = 257;
    v41 = sub_1C53901A0((uint64_t *)(a1 + 344), v18, v32, (llvm::Value *)&v71, 2, (uint64_t)&v74);
    v42 = a7[2];
    v43 = **(_QWORD **)(a1 + 408);
    v44 = *(llvm::ConstantInt **)(v43 + 1960);
    LODWORD(v75) = *(_DWORD *)(v43 + 1968) >> 8;
    if (v75 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v74, 0, 0);
    else
      v74 = 0;
    v46 = llvm::ConstantInt::get(v44, (llvm::LLVMContext *)&v74, v40);
    if (v75 >= 0x41 && v74)
      MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
    v71 = (unint64_t)v46;
    v47 = **(_QWORD **)(a1 + 408);
    v48 = *(llvm::ConstantInt **)(v47 + 1960);
    LODWORD(v75) = *(_DWORD *)(v47 + 1968) >> 8;
    if (v75 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v74, 0, 0);
    else
      v74 = 0;
    v49 = llvm::ConstantInt::get(v48, (llvm::LLVMContext *)&v74, v45);
    if (v75 >= 0x41 && v74)
      MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
    v72 = v49;
    LOWORD(v78) = 257;
    v50 = sub_1C53901A0((uint64_t *)(a1 + 344), v21, v42, (llvm::Value *)&v71, 2, (uint64_t)&v74);
    v51 = (llvm::Constant *)llvm::PointerType::get(*(llvm::PointerType **)(a1 + 2136), 0);
    NullValue = llvm::Constant::getNullValue(v51, v52);
    if (a3)
      v55 = *(uint64_t ***)(a3 + 24);
    else
      v55 = 0;
    v74 = a4;
    v56 = **(_QWORD **)(a1 + 408);
    v57 = *(llvm::ConstantInt **)(v56 + 1984);
    v58 = *(_DWORD *)(v56 + 1992);
    LODWORD(v72) = v58 >> 8;
    if (v58 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v71, a8, 0);
    }
    else
    {
      if (v58 <= 0xFF)
        v59 = 0;
      else
        v59 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v58);
      v71 = v59 & a8;
    }
    v61 = llvm::ConstantInt::get(v57, (llvm::LLVMContext *)&v71, v53);
    if (v72 >= 0x41 && v71)
      MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
    v75 = v61;
    v62 = **(_QWORD **)(a1 + 408);
    v63 = *(llvm::ConstantInt **)(v62 + 1960);
    v64 = *(_DWORD *)(v62 + 1968);
    LODWORD(v72) = v64 >> 8;
    if (v64 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v71, a9, 0);
      v65 = v68;
    }
    else
    {
      v65 = v68;
      if (v64 <= 0xFF)
        LODWORD(v66) = 0;
      else
        v66 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v64);
      v71 = v66 & a9;
    }
    v67 = llvm::ConstantInt::get(v63, (llvm::LLVMContext *)&v71, v60);
    if (v72 >= 0x41)
    {
      if (v71)
        MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
    }
    v76 = v67;
    v77 = v65;
    v78 = v41;
    v79 = v50;
    v80 = v69;
    v81 = v70;
    v82 = NullValue;
    v73 = 257;
    return sub_1C4774778(v27, v55, a3, &v74, 9, (uint64_t)&v71, 0);
  }
  return result;
}

uint64_t llvm::OpenMPIRBuilder::checkAndEmitFlushAfterAtomic(uint64_t a1, _QWORD *a2, unsigned int a3, int a4)
{
  uint64_t v4;

  switch(a4)
  {
    case 0:
      v4 = 0;
      if (a3 <= 7 && ((1 << a3) & 0xD0) != 0)
        goto LABEL_10;
      return v4;
    case 1:
    case 2:
    case 4:
      if (a3 - 5 >= 3)
        goto LABEL_8;
      goto LABEL_10;
    case 3:
      if ((a3 & 0xFFFFFFFC) != 4)
        goto LABEL_8;
LABEL_10:
      llvm::OpenMPIRBuilder::emitFlush(a1, a2);
      v4 = 1;
      break;
    default:
LABEL_8:
      v4 = 0;
      break;
  }
  return v4;
}

uint64_t llvm::OpenMPIRBuilder::createAtomicRead(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  __int16 v13;
  char v14;
  char v15;
  char *v16;
  char *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  llvm::Type *v25;
  _QWORD *v26;
  llvm::Type *v27;
  int PrimitiveSizeInBits;
  llvm::PointerType *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  __int16 v33;
  char v34;
  char v35;
  char *v36;
  char *v37;
  llvm::Value *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  char v47;
  char v48;
  char *v49;
  char *v50;
  _QWORD *v51;
  llvm::Value *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 **v62;
  int v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 **v69;
  int v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 **v76;
  int v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  _DWORD *v81;
  _DWORD *v82;
  int v83;
  uint64_t v84;
  uint64_t *v85;
  unsigned int v86;
  _QWORD v87[4];
  __int16 v88;
  _QWORD v89[4];
  __int16 v90;
  unsigned __int8 *v91;

  if (!sub_1C62683AC(a1, a2))
    return *a2;
  v11 = *(unsigned __int8 **)a3;
  v10 = *(_QWORD *)(a3 + 8);
  v12 = *(unsigned __int8 *)(v10 + 8);
  v86 = a5;
  if (v12 == 13)
  {
    v13 = *(unsigned __int8 *)(a3 + 17);
    v87[0] = "omp.atomic.read";
    v88 = 259;
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 392) + 56) + 40) + 272, v10);
    v15 = v14;
    v16 = (char *)operator new(0x60uLL);
    v17 = v16;
    v18 = (unsigned __int8 *)(v16 + 32);
    *((_QWORD *)v16 + 2) = 0;
    *((_QWORD *)v16 + 3) = v16 + 32;
    v90 = 257;
    *((_QWORD *)v16 + 4) = v10;
    *((_QWORD *)v16 + 5) = 0;
    *((_WORD *)v16 + 24) = 60;
    *((_DWORD *)v16 + 13) = 1;
    *(_OWORD *)(v16 + 56) = 0u;
    *(_OWORD *)(v16 + 72) = 0u;
    *((_DWORD *)v16 + 22) = 0;
    *(_QWORD *)v16 = v11;
    *((_QWORD *)v16 + 1) = 0;
    if (v11)
    {
      v21 = *((_QWORD *)v11 + 1);
      v20 = v11 + 8;
      v19 = v21;
      *((_QWORD *)v16 + 1) = v21;
      if (v21)
        *(_QWORD *)(v19 + 16) = v16 + 8;
      *((_QWORD *)v16 + 2) = v20;
      *v20 = v16;
    }
    *((_WORD *)v16 + 25) = (2 * (v15 & 0x3F)) | v13;
    v16[92] = 1;
    llvm::Value::setName((uint64_t ***)v16 + 4, (uint64_t)v89);
    (*(void (**)(_QWORD, unsigned __int8 *, _QWORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v18, v87, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
    v22 = *(unsigned int *)(a1 + 352);
    v23 = v86;
    if (!(_DWORD)v22)
    {
LABEL_8:
      *((_WORD *)v17 + 25) = *((_WORD *)v17 + 25) & 0xFC7F | ((_WORD)v86 << 7);
      v17[92] = 1;
      goto LABEL_29;
    }
    v60 = *(_QWORD *)(a1 + 344);
    v61 = v60 + 16 * v22;
    v62 = (unsigned __int8 **)(v17 + 80);
    while (1)
    {
      v63 = *(_DWORD *)v60;
      v64 = *(unsigned __int8 **)(v60 + 8);
      if (v64)
      {
        if (!v63)
        {
          v91 = *(unsigned __int8 **)(v60 + 8);
          llvm::MetadataTracking::track((uint64_t)&v91, v64, 2);
          v65 = *v62;
          goto LABEL_52;
        }
      }
      else
      {
        v65 = *v62;
        if (!*v62 && (v17[55] & 0x20) == 0)
          goto LABEL_49;
        if (!v63)
        {
          v91 = 0;
LABEL_52:
          if (v65)
            llvm::MetadataTracking::untrack((uint64_t)(v17 + 80), v65);
          v66 = v91;
          *v62 = v91;
          if (v66)
            llvm::MetadataTracking::retrack((uint64_t)&v91, v66, (uint64_t)(v17 + 80));
          goto LABEL_49;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v18, *(_DWORD *)v60, (llvm::MDNode *)v64);
LABEL_49:
      v60 += 16;
      if (v60 == v61)
        goto LABEL_8;
    }
  }
  v85 = a4;
  v25 = (llvm::Type *)(*(_DWORD *)(*(_QWORD *)v11 + 8) >> 8);
  v26 = **(_QWORD ***)(a1 + 336);
  v27 = *(llvm::Type **)(a3 + 8);
  if ((v12 & 0xFE) == 0x12)
    v27 = **(llvm::Type ***)(v10 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v27);
  LODWORD(v89[0]) = PrimitiveSizeInBits;
  if (PrimitiveSizeInBits <= 63)
  {
    if (PrimitiveSizeInBits <= 31)
    {
      switch(PrimitiveSizeInBits)
      {
        case 16:
          v29 = (llvm::PointerType *)(*v26 + 1936);
          goto LABEL_20;
        case 8:
          v29 = (llvm::PointerType *)(*v26 + 1912);
          goto LABEL_20;
        case 1:
          v29 = (llvm::PointerType *)(*v26 + 1888);
          goto LABEL_20;
      }
    }
    else if (PrimitiveSizeInBits == 32)
    {
      v29 = (llvm::PointerType *)(*v26 + 1960);
      goto LABEL_20;
    }
  }
  else
  {
    if (PrimitiveSizeInBits == 64)
    {
      v29 = (llvm::PointerType *)(*v26 + 1984);
      goto LABEL_20;
    }
    if (PrimitiveSizeInBits == 128)
    {
      v29 = (llvm::PointerType *)(*v26 + 2008);
      goto LABEL_20;
    }
  }
  v81 = sub_1C5270984(*v26 + 2168, v89);
  v29 = (llvm::PointerType *)*((_QWORD *)v81 + 1);
  if (!v29)
  {
    v82 = v81;
    v29 = (llvm::PointerType *)sub_1C484358C(*v26 + 2040, 24, 3);
    v83 = v89[0];
    *(_QWORD *)v29 = v26;
    *((_QWORD *)v29 + 2) = 0;
    *((_QWORD *)v29 + 1) = (v83 << 8) | 0xDu;
    *((_QWORD *)v82 + 1) = v29;
  }
LABEL_20:
  v30 = *(unsigned __int8 **)a3;
  v31 = llvm::PointerType::get(v29, v25);
  v89[0] = "atomic.src.int.cast";
  v90 = 259;
  v32 = sub_1C4773E38((uint64_t *)(a1 + 344), 49, v30, v31, (uint64_t)v89);
  v33 = *(unsigned __int8 *)(a3 + 17);
  v87[0] = "omp.atomic.load";
  v88 = 259;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 392) + 56) + 40) + 272, (uint64_t)v29);
  v35 = v34;
  v36 = (char *)operator new(0x60uLL);
  v37 = v36;
  v38 = (llvm::Value *)(v36 + 32);
  *((_QWORD *)v36 + 2) = 0;
  *((_QWORD *)v36 + 3) = v36 + 32;
  v90 = 257;
  *((_QWORD *)v36 + 4) = v29;
  *((_QWORD *)v36 + 5) = 0;
  *((_WORD *)v36 + 24) = 60;
  *((_DWORD *)v36 + 13) = 1;
  *(_OWORD *)(v36 + 56) = 0u;
  *(_OWORD *)(v36 + 72) = 0u;
  *((_DWORD *)v36 + 22) = 0;
  *(_QWORD *)v36 = v32;
  *((_QWORD *)v36 + 1) = 0;
  if (v32)
  {
    v41 = *((_QWORD *)v32 + 1);
    v40 = v32 + 8;
    v39 = v41;
    *((_QWORD *)v36 + 1) = v41;
    if (v41)
      *(_QWORD *)(v39 + 16) = v36 + 8;
    *((_QWORD *)v36 + 2) = v40;
    *v40 = v36;
  }
  *((_WORD *)v36 + 25) = (2 * (v35 & 0x3F)) | v33;
  v36[92] = 1;
  llvm::Value::setName((uint64_t ***)v36 + 4, (uint64_t)v89);
  (*(void (**)(_QWORD, llvm::Value *, _QWORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v38, v87, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
  v42 = *(unsigned int *)(a1 + 352);
  v23 = v86;
  if ((_DWORD)v42)
  {
    v67 = *(_QWORD *)(a1 + 344);
    v68 = v67 + 16 * v42;
    v69 = (unsigned __int8 **)(v37 + 80);
    do
    {
      v70 = *(_DWORD *)v67;
      v71 = *(unsigned __int8 **)(v67 + 8);
      if (v71)
      {
        if (!v70)
        {
          v91 = *(unsigned __int8 **)(v67 + 8);
          llvm::MetadataTracking::track((uint64_t)&v91, v71, 2);
          v72 = *v69;
          goto LABEL_67;
        }
      }
      else
      {
        v72 = *v69;
        if (!*v69 && (v37[55] & 0x20) == 0)
          goto LABEL_64;
        if (!v70)
        {
          v91 = 0;
LABEL_67:
          if (v72)
            llvm::MetadataTracking::untrack((uint64_t)(v37 + 80), v72);
          v73 = v91;
          *v69 = v91;
          if (v73)
            llvm::MetadataTracking::retrack((uint64_t)&v91, v73, (uint64_t)(v37 + 80));
          goto LABEL_64;
        }
      }
      llvm::Value::setMetadata(v38, *(_DWORD *)v67, (llvm::MDNode *)v71);
LABEL_64:
      v67 += 16;
    }
    while (v67 != v68);
  }
  *((_WORD *)v37 + 25) = *((_WORD *)v37 + 25) & 0xFC7F | ((_WORD)v86 << 7);
  v37[92] = 1;
  if (*(unsigned __int8 *)(v10 + 8) > 6u)
  {
    v89[0] = "atomic.ptr.cast";
    v90 = 259;
    v43 = (uint64_t *)(a1 + 344);
    v44 = 48;
  }
  else
  {
    v89[0] = "atomic.flt.cast";
    v90 = 259;
    v43 = (uint64_t *)(a1 + 344);
    v44 = 49;
  }
  v18 = sub_1C4773E38(v43, v44, (unsigned __int8 *)v38, v10, (uint64_t)v89);
  a4 = v85;
LABEL_29:
  if (v23 <= 7 && ((1 << v23) & 0xD0) != 0)
    llvm::OpenMPIRBuilder::emitFlush(a1, a2);
  v45 = *a4;
  v46 = *((unsigned __int8 *)a4 + 17);
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 392) + 56) + 40) + 272, *(_QWORD *)v18);
  v48 = v47;
  v49 = (char *)operator new(0x80uLL);
  v50 = v49;
  *((_DWORD *)v49 + 21) = *((_DWORD *)v49 + 21) & 0x38000000 | 2;
  *(_QWORD *)v49 = 0;
  *((_QWORD *)v49 + 2) = 0;
  *((_QWORD *)v49 + 1) = 0;
  *((_QWORD *)v49 + 5) = 0;
  *((_QWORD *)v49 + 6) = 0;
  *((_QWORD *)v49 + 4) = 0;
  v51 = v49 + 32;
  *((_QWORD *)v49 + 8) = ***(_QWORD ***)v18 + 1576;
  v52 = (llvm::Value *)(v49 + 64);
  *((_QWORD *)v49 + 3) = v49 + 64;
  *((_QWORD *)v49 + 7) = v49 + 64;
  *((_QWORD *)v49 + 9) = 0;
  v49[80] = 61;
  v49[81] = 0;
  *((_WORD *)v49 + 41) = 0;
  *((_DWORD *)v49 + 21) = 2;
  *(_OWORD *)(v49 + 88) = 0u;
  *(_OWORD *)(v49 + 104) = 0u;
  *((_DWORD *)v49 + 30) = 0;
  *(_QWORD *)v49 = v18;
  v55 = *((_QWORD *)v18 + 1);
  v54 = v18 + 8;
  v53 = v55;
  *((_QWORD *)v49 + 1) = v55;
  if (v55)
    *(_QWORD *)(v53 + 16) = v49 + 8;
  *((_QWORD *)v49 + 2) = v54;
  *v54 = v49;
  if (*((_QWORD *)v49 + 4))
  {
    **((_QWORD **)v49 + 6) = *((_QWORD *)v49 + 5);
    v84 = *((_QWORD *)v49 + 5);
    if (v84)
      *(_QWORD *)(v84 + 16) = *((_QWORD *)v49 + 6);
  }
  *v51 = v45;
  if (v45)
  {
    v58 = *(_QWORD *)(v45 + 8);
    v57 = (_QWORD *)(v45 + 8);
    v56 = v58;
    *((_QWORD *)v49 + 5) = v58;
    if (v58)
      *(_QWORD *)(v56 + 16) = v49 + 40;
    *((_QWORD *)v49 + 6) = v57;
    *v57 = v51;
  }
  *((_WORD *)v49 + 41) = (2 * (v48 & 0x3F)) | v46;
  v49[124] = 1;
  v90 = 257;
  (*(void (**)(_QWORD, llvm::Value *, _QWORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v52, v89, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
  v59 = *(unsigned int *)(a1 + 352);
  if ((_DWORD)v59)
  {
    v74 = *(_QWORD *)(a1 + 344);
    v75 = v74 + 16 * v59;
    v76 = (unsigned __int8 **)(v50 + 112);
    do
    {
      v77 = *(_DWORD *)v74;
      v78 = *(unsigned __int8 **)(v74 + 8);
      if (v78)
      {
        if (!v77)
        {
          v87[0] = *(_QWORD *)(v74 + 8);
          llvm::MetadataTracking::track((uint64_t)v87, v78, 2);
          v79 = *v76;
          goto LABEL_82;
        }
      }
      else
      {
        v79 = *v76;
        if (!*v76 && (v50[87] & 0x20) == 0)
          goto LABEL_79;
        if (!v77)
        {
          v87[0] = 0;
LABEL_82:
          if (v79)
            llvm::MetadataTracking::untrack((uint64_t)(v50 + 112), v79);
          v80 = (unsigned __int8 *)v87[0];
          *v76 = (unsigned __int8 *)v87[0];
          if (v80)
            llvm::MetadataTracking::retrack((uint64_t)v87, v80, (uint64_t)(v50 + 112));
          goto LABEL_79;
        }
      }
      llvm::Value::setMetadata(v52, *(_DWORD *)v74, (llvm::MDNode *)v78);
LABEL_79:
      v74 += 16;
    }
    while (v74 != v75);
  }
  return *(_QWORD *)(a1 + 392);
}

uint64_t llvm::OpenMPIRBuilder::createAtomicWrite(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, int a5)
{
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  __int16 v13;
  char v14;
  char v15;
  char *v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 **v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  llvm::Type *v33;
  _QWORD *v34;
  int PrimitiveSizeInBits;
  llvm::PointerType *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t *v40;
  __int16 v41;
  char v42;
  char v43;
  char *v44;
  char *v45;
  unsigned __int8 **v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 ***v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 **v56;
  int v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  _DWORD *v61;
  _DWORD *v62;
  int v63;
  uint64_t v64;
  _QWORD v65[4];
  __int16 v66;
  unsigned __int8 *v67;

  if (!sub_1C62683AC(a1, a2))
    return *a2;
  v11 = *(unsigned __int8 **)a3;
  v10 = *(_QWORD *)(a3 + 8);
  v12 = *(unsigned __int8 *)(v10 + 8);
  if (v12 == 13)
  {
    v13 = *(unsigned __int8 *)(a3 + 17);
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 392) + 56) + 40) + 272, *a4);
    v15 = v14;
    v16 = (char *)operator new(0x80uLL);
    v17 = v16;
    *((_DWORD *)v16 + 21) = *((_DWORD *)v16 + 21) & 0x38000000 | 2;
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 2) = 0;
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 5) = 0;
    *((_QWORD *)v16 + 6) = 0;
    *((_QWORD *)v16 + 4) = 0;
    *((_QWORD *)v16 + 8) = **(_QWORD **)*a4 + 1576;
    v18 = v16 + 64;
    *((_QWORD *)v16 + 3) = v16 + 64;
    *((_QWORD *)v16 + 7) = v16 + 64;
    *((_QWORD *)v16 + 9) = 0;
    v16[80] = 61;
    v16[81] = 0;
    *((_DWORD *)v16 + 21) = 2;
    *(_OWORD *)(v16 + 88) = 0u;
    *(_OWORD *)(v16 + 104) = 0u;
    *((_DWORD *)v16 + 30) = 0;
    v19 = a4 + 1;
    v20 = a4[1];
    *(_QWORD *)v16 = a4;
    *((_QWORD *)v16 + 1) = v20;
    if (v20)
      *(_QWORD *)(v20 + 16) = v16 + 8;
    *((_QWORD *)v16 + 2) = v19;
    *v19 = v16;
    *((_QWORD *)v16 + 4) = v11;
    if (v11)
    {
      v23 = *((_QWORD *)v11 + 1);
      v22 = v11 + 8;
      v21 = v23;
      *((_QWORD *)v16 + 5) = v23;
      if (v23)
        *(_QWORD *)(v21 + 16) = v16 + 40;
      *((_QWORD *)v16 + 6) = v22;
      *v22 = v16 + 32;
    }
    *((_WORD *)v16 + 41) = (2 * (v15 & 0x3F)) | v13;
    v16[124] = 1;
    v66 = 257;
    (*(void (**)(_QWORD, char *, _QWORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v18, v65, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
    v24 = *(unsigned int *)(a1 + 352);
    if ((_DWORD)v24)
    {
      v25 = *(_QWORD *)(a1 + 344);
      v26 = v25 + 16 * v24;
      v27 = (unsigned __int8 **)(v17 + 112);
      while (1)
      {
        v28 = *(_DWORD *)v25;
        v29 = *(unsigned __int8 **)(v25 + 8);
        if (v29)
        {
          if (!v28)
          {
            v67 = *(unsigned __int8 **)(v25 + 8);
            llvm::MetadataTracking::track((uint64_t)&v67, v29, 2);
            v30 = *v27;
            goto LABEL_21;
          }
        }
        else
        {
          v30 = *v27;
          if (!*v27 && (v17[87] & 0x20) == 0)
            goto LABEL_18;
          if (!v28)
          {
            v67 = 0;
LABEL_21:
            if (v30)
              llvm::MetadataTracking::untrack((uint64_t)(v17 + 112), v30);
            v31 = v67;
            *v27 = v67;
            if (v31)
              llvm::MetadataTracking::retrack((uint64_t)&v67, v31, (uint64_t)(v17 + 112));
            goto LABEL_18;
          }
        }
        llvm::Value::setMetadata((llvm::Value *)v18, *(_DWORD *)v25, (llvm::MDNode *)v29);
LABEL_18:
        v25 += 16;
        if (v25 == v26)
          goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  v33 = (llvm::Type *)(*(_DWORD *)(*(_QWORD *)v11 + 8) >> 8);
  v34 = **(_QWORD ***)(a1 + 336);
  if ((v12 & 0xFE) == 0x12)
    v10 = **(_QWORD **)(v10 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v10);
  LODWORD(v65[0]) = PrimitiveSizeInBits;
  if (PrimitiveSizeInBits <= 63)
  {
    if (PrimitiveSizeInBits <= 31)
    {
      switch(PrimitiveSizeInBits)
      {
        case 16:
          v36 = (llvm::PointerType *)(*v34 + 1936);
          goto LABEL_36;
        case 8:
          v36 = (llvm::PointerType *)(*v34 + 1912);
          goto LABEL_36;
        case 1:
          v36 = (llvm::PointerType *)(*v34 + 1888);
          goto LABEL_36;
      }
    }
    else if (PrimitiveSizeInBits == 32)
    {
      v36 = (llvm::PointerType *)(*v34 + 1960);
      goto LABEL_36;
    }
  }
  else
  {
    if (PrimitiveSizeInBits == 64)
    {
      v36 = (llvm::PointerType *)(*v34 + 1984);
      goto LABEL_36;
    }
    if (PrimitiveSizeInBits == 128)
    {
      v36 = (llvm::PointerType *)(*v34 + 2008);
      goto LABEL_36;
    }
  }
  v61 = sub_1C5270984(*v34 + 2168, v65);
  v36 = (llvm::PointerType *)*((_QWORD *)v61 + 1);
  if (!v36)
  {
    v62 = v61;
    v36 = (llvm::PointerType *)sub_1C484358C(*v34 + 2040, 24, 3);
    v63 = v65[0];
    *(_QWORD *)v36 = v34;
    *((_QWORD *)v36 + 2) = 0;
    *((_QWORD *)v36 + 1) = (v63 << 8) | 0xDu;
    *((_QWORD *)v62 + 1) = v36;
  }
LABEL_36:
  v37 = *(unsigned __int8 **)a3;
  v38 = llvm::PointerType::get(v36, v33);
  v65[0] = "atomic.dst.int.cast";
  v66 = 259;
  v39 = sub_1C4773E38((uint64_t *)(a1 + 344), 49, v37, v38, (uint64_t)v65);
  v65[0] = "atomic.src.int.cast";
  v66 = 259;
  v40 = (uint64_t *)sub_1C4773E38((uint64_t *)(a1 + 344), 49, (unsigned __int8 *)a4, (uint64_t)v36, (uint64_t)v65);
  v41 = *(unsigned __int8 *)(a3 + 17);
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 392) + 56) + 40) + 272, *v40);
  v43 = v42;
  v44 = (char *)operator new(0x80uLL);
  v45 = v44;
  *((_DWORD *)v44 + 21) = *((_DWORD *)v44 + 21) & 0x38000000 | 2;
  *(_QWORD *)v44 = 0;
  *((_QWORD *)v44 + 2) = 0;
  *((_QWORD *)v44 + 1) = 0;
  *((_QWORD *)v44 + 5) = 0;
  *((_QWORD *)v44 + 6) = 0;
  *((_QWORD *)v44 + 4) = 0;
  v46 = (unsigned __int8 **)(v44 + 32);
  *((_QWORD *)v44 + 8) = **(_QWORD **)*v40 + 1576;
  v18 = v44 + 64;
  *((_QWORD *)v44 + 3) = v44 + 64;
  *((_QWORD *)v44 + 7) = v44 + 64;
  *((_QWORD *)v44 + 9) = 0;
  v44[80] = 61;
  v44[81] = 0;
  *((_WORD *)v44 + 41) = 0;
  *((_DWORD *)v44 + 21) = 2;
  *(_OWORD *)(v44 + 88) = 0u;
  *(_OWORD *)(v44 + 104) = 0u;
  *((_DWORD *)v44 + 30) = 0;
  *(_QWORD *)v44 = v40;
  v49 = v40[1];
  v48 = v40 + 1;
  v47 = v49;
  *((_QWORD *)v44 + 1) = v49;
  if (v49)
    *(_QWORD *)(v47 + 16) = v44 + 8;
  *((_QWORD *)v44 + 2) = v48;
  *v48 = v44;
  if (*((_QWORD *)v44 + 4))
  {
    **((_QWORD **)v44 + 6) = *((_QWORD *)v44 + 5);
    v64 = *((_QWORD *)v44 + 5);
    if (v64)
      *(_QWORD *)(v64 + 16) = *((_QWORD *)v44 + 6);
  }
  *v46 = v39;
  if (v39)
  {
    v52 = *((_QWORD *)v39 + 1);
    v51 = (unsigned __int8 ***)(v39 + 8);
    v50 = v52;
    *((_QWORD *)v44 + 5) = v52;
    if (v52)
      *(_QWORD *)(v50 + 16) = v44 + 40;
    *((_QWORD *)v44 + 6) = v51;
    *v51 = v46;
  }
  *((_WORD *)v44 + 41) = (2 * (v43 & 0x3F)) | v41;
  v44[124] = 1;
  v66 = 257;
  (*(void (**)(_QWORD, char *, _QWORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v18, v65, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
  v53 = *(unsigned int *)(a1 + 352);
  if ((_DWORD)v53)
  {
    v54 = *(_QWORD *)(a1 + 344);
    v55 = v54 + 16 * v53;
    v56 = (unsigned __int8 **)(v45 + 112);
    do
    {
      v57 = *(_DWORD *)v54;
      v58 = *(unsigned __int8 **)(v54 + 8);
      if (v58)
      {
        if (!v57)
        {
          v67 = *(unsigned __int8 **)(v54 + 8);
          llvm::MetadataTracking::track((uint64_t)&v67, v58, 2);
          v59 = *v56;
          goto LABEL_58;
        }
      }
      else
      {
        v59 = *v56;
        if (!*v56 && (v45[87] & 0x20) == 0)
          goto LABEL_55;
        if (!v57)
        {
          v67 = 0;
LABEL_58:
          if (v59)
            llvm::MetadataTracking::untrack((uint64_t)(v45 + 112), v59);
          v60 = v67;
          *v56 = v67;
          if (v60)
            llvm::MetadataTracking::retrack((uint64_t)&v67, v60, (uint64_t)(v45 + 112));
          goto LABEL_55;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v18, *(_DWORD *)v54, (llvm::MDNode *)v58);
LABEL_55:
      v54 += 16;
    }
    while (v54 != v55);
  }
LABEL_44:
  *((_WORD *)v18 + 9) = *((_WORD *)v18 + 9) & 0xFC7F | ((_WORD)a5 << 7);
  v18[60] = 1;
  if ((a5 - 5) <= 2)
    llvm::OpenMPIRBuilder::emitFlush(a1, a2);
  return *(_QWORD *)(a1 + 392);
}

uint64_t llvm::OpenMPIRBuilder::createAtomicUpdate(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, unsigned int a8, uint64_t a9, char a10)
{
  if (!sub_1C62683AC(a1, a2))
    return *a2;
  llvm::OpenMPIRBuilder::emitAtomicUpdate(a1, a3, a4, *(_QWORD *)a5, *(llvm::Type **)(a5 + 8), a6, a7, a8, a9, *(_BYTE *)(a5 + 17), a10);
  if ((a7 - 5) <= 2)
    llvm::OpenMPIRBuilder::emitFlush(a1, a2);
  return *(_QWORD *)(a1 + 392);
}

void *llvm::OpenMPIRBuilder::emitAtomicUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Type *this, uint64_t *a6, int a7, unsigned int a8, uint64_t a9, unsigned __int8 a10, unsigned __int8 a11)
{
  unsigned __int8 *v13;
  int v16;
  _BOOL4 v17;
  int v18;
  char *v19;
  unsigned __int8 **v22;
  void *v23;
  llvm::Type *v24;
  _QWORD *v25;
  llvm::Type *v26;
  int PrimitiveSizeInBits;
  llvm::PointerType *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 **v35;
  unsigned __int8 *v36;
  int v37;
  int v38;
  unsigned __int8 *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  char *v45;
  char *v46;
  llvm::Value *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t **v51;
  uint64_t v52;
  uint64_t *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned __int8 **v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 **v63;
  unsigned __int8 *v64;
  int v65;
  int v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 **v78;
  unsigned __int8 *v79;
  int v80;
  int v81;
  unsigned __int8 *v82;
  unsigned __int8 *v83;
  uint64_t v84;
  uint64_t v85;
  llvm::BasicBlock *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t *v91;
  unsigned __int8 **v92;
  unsigned __int8 **v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 **v98;
  unsigned __int8 *v99;
  int v100;
  int v101;
  unsigned __int8 *v102;
  unsigned __int8 *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  llvm::Type *v108;
  int v109;
  llvm::PointerType *v110;
  unsigned __int8 *v111;
  unsigned __int8 *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 **v118;
  unsigned __int8 *v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned __int8 **v126;
  unsigned __int8 *v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  unsigned __int8 **v132;
  int v133;
  unsigned __int8 *v134;
  unsigned __int8 *v135;
  unsigned __int8 *v136;
  unsigned __int8 *v137;
  unsigned __int8 *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  unsigned __int8 *v143;
  unsigned __int8 *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  char v148;
  char v149;
  char *v150;
  char *v151;
  unsigned __int8 ***v152;
  llvm::Value *v153;
  _QWORD *v154;
  uint64_t v155;
  unsigned __int8 *v156;
  unsigned __int8 ****v157;
  unsigned __int8 *v158;
  uint64_t v159;
  char v160;
  char v161;
  char *v162;
  char *v163;
  uint64_t *v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t *v170;
  uint64_t v171;
  unsigned __int8 **v172;
  uint64_t v173;
  llvm::Value *v174;
  char *v175;
  uint64_t v176;
  unsigned __int8 **v177;
  char *v178;
  llvm::BasicBlock *v179;
  char *v180;
  unsigned int v181;
  BOOL v182;
  unsigned __int8 *v183;
  unsigned __int8 *v184;
  unsigned __int8 *v185;
  uint64_t v187;
  uint64_t v188;
  unsigned __int8 **v189;
  int v190;
  unsigned __int8 *v191;
  unsigned __int8 *v192;
  unsigned __int8 *v193;
  uint64_t v194;
  uint64_t v195;
  unsigned __int8 **v196;
  int v197;
  unsigned __int8 *v198;
  unsigned __int8 *v199;
  unsigned __int8 *v200;
  _DWORD *v201;
  _DWORD *v202;
  int v203;
  _DWORD *v204;
  int v205;
  uint64_t v206;
  unsigned __int8 **v207;
  unsigned __int8 **v208;
  unsigned __int8 **v209;
  _QWORD *v210;
  unsigned __int8 **v211;
  uint64_t v212;
  int v213;
  unsigned __int8 *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  llvm::BasicBlock *v218;
  unsigned int v219;
  llvm::Type *v220;
  llvm::PHINode *v222;
  llvm::BasicBlock *v223;
  int v224;
  uint64_t *v225;
  unsigned int v226;
  uint64_t *v227;
  _QWORD v228[4];
  __int16 v229;
  unsigned __int8 *v230;
  uint64_t v231;
  const char *v232;
  __int16 v233;
  _QWORD v234[2];

  v13 = (unsigned __int8 *)a4;
  if (a8 > 6)
  {
    v212 = a3;
    v19 = (char *)this + 8;
    v18 = *((_DWORD *)this + 2);
LABEL_15:
    v24 = (llvm::Type *)(*(_DWORD *)(*(_QWORD *)a4 + 8) >> 8);
    v25 = **(_QWORD ***)(a1 + 336);
    v26 = this;
    if ((v18 & 0xFE) == 0x12)
      v26 = (llvm::Type *)**((_QWORD **)this + 2);
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v26);
    LODWORD(v230) = PrimitiveSizeInBits;
    v214 = (unsigned __int8 *)v19;
    if (PrimitiveSizeInBits <= 63)
    {
      if (PrimitiveSizeInBits <= 31)
      {
        switch(PrimitiveSizeInBits)
        {
          case 16:
            v28 = (llvm::PointerType *)(*v25 + 1936);
            goto LABEL_25;
          case 8:
            v28 = (llvm::PointerType *)(*v25 + 1912);
            goto LABEL_25;
          case 1:
            v28 = (llvm::PointerType *)(*v25 + 1888);
            goto LABEL_25;
        }
      }
      else if (PrimitiveSizeInBits == 32)
      {
        v28 = (llvm::PointerType *)(*v25 + 1960);
        goto LABEL_25;
      }
    }
    else
    {
      if (PrimitiveSizeInBits == 64)
      {
        v28 = (llvm::PointerType *)(*v25 + 1984);
        goto LABEL_25;
      }
      if (PrimitiveSizeInBits == 128)
      {
        v28 = (llvm::PointerType *)(*v25 + 2008);
        goto LABEL_25;
      }
    }
    v201 = sub_1C5270984(*v25 + 2168, &v230);
    v28 = (llvm::PointerType *)*((_QWORD *)v201 + 1);
    if (!v28)
    {
      v202 = v201;
      v28 = (llvm::PointerType *)sub_1C484358C(*v25 + 2040, 24, 3);
      v203 = (int)v230;
      *(_QWORD *)v28 = v25;
      *((_QWORD *)v28 + 2) = 0;
      *((_QWORD *)v28 + 1) = (v203 << 8) | 0xDu;
      *((_QWORD *)v202 + 1) = v28;
    }
LABEL_25:
    v219 = v24;
    v29 = llvm::PointerType::get(v28, v24);
    v233 = 257;
    v225 = (uint64_t *)(a1 + 344);
    v30 = sub_1C4773E38((uint64_t *)(a1 + 344), 49, v13, v29, (uint64_t)&v230);
    v226 = v13 >> 4;
    v224 = a7;
    if ((v13[23] & 0x10) == 0)
    {
      v41 = 0;
      v40 = &byte_1C871356D;
      goto LABEL_34;
    }
    v31 = ***(_QWORD ***)v13;
    v32 = *(_QWORD *)(v31 + 152);
    v33 = *(unsigned int *)(v31 + 168);
    if ((_DWORD)v33)
    {
      LODWORD(v34) = (v33 - 1) & (v226 ^ (v13 >> 9));
      v35 = (unsigned __int8 **)(v32 + 16 * v34);
      v36 = *v35;
      if (*v35 == v13)
      {
LABEL_33:
        v39 = v35[1];
        v42 = *(_QWORD *)v39;
        v40 = (char *)(v39 + 16);
        v41 = v42;
LABEL_34:
        v229 = 773;
        v228[0] = v40;
        v228[1] = v41;
        v228[2] = ".atomic.load";
        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 392) + 56) + 40) + 272, (uint64_t)v28);
        v44 = v43;
        v45 = (char *)operator new(0x60uLL);
        v46 = v45;
        v47 = (llvm::Value *)(v45 + 32);
        *((_QWORD *)v45 + 2) = 0;
        *((_QWORD *)v45 + 3) = v45 + 32;
        v233 = 257;
        v220 = v28;
        *((_QWORD *)v45 + 4) = v28;
        *((_QWORD *)v45 + 5) = 0;
        *((_WORD *)v45 + 24) = 60;
        *((_DWORD *)v45 + 13) = 1;
        *(_OWORD *)(v45 + 56) = 0u;
        *(_OWORD *)(v45 + 72) = 0u;
        *((_DWORD *)v45 + 22) = 0;
        *(_QWORD *)v45 = v30;
        *((_QWORD *)v45 + 1) = 0;
        if (v30)
        {
          v50 = *((_QWORD *)v30 + 1);
          v49 = v30 + 8;
          v48 = v50;
          *((_QWORD *)v45 + 1) = v50;
          if (v50)
            *(_QWORD *)(v48 + 16) = v45 + 8;
          *((_QWORD *)v45 + 2) = v49;
          *v49 = v45;
        }
        v51 = (uint64_t **)(a1 + 392);
        *((_WORD *)v45 + 25) = 2 * (v44 & 0x3F);
        v45[92] = 1;
        llvm::Value::setName((uint64_t ***)v45 + 4, (uint64_t)&v230);
        (*(void (**)(_QWORD, llvm::Value *, _QWORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v47, v228, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
        v52 = *(unsigned int *)(a1 + 352);
        if (!(_DWORD)v52)
        {
LABEL_39:
          *((_WORD *)v46 + 25) = *((_WORD *)v46 + 25) & 0xFC7F | ((_WORD)v224 << 7);
          v46[92] = 1;
          v53 = *v51;
          v55 = *v51 + 5;
          v54 = (_QWORD *)*v55;
          v56 = a1 + 392;
          if ((_QWORD *)*v55 == v55
            || ((v57 = (unsigned __int8 **)(v54 - 3), v54) ? (v58 = v54 - 3) : (v58 = 0),
                *((unsigned __int8 *)v58 + 16) - 29 >= 0xB))
          {
            v57 = LLVMBuildUnreachable_0((uint64_t)v225);
          }
          if ((v13[23] & 0x10) == 0)
          {
            v69 = 0;
            v68 = (unsigned __int8 *)&byte_1C871356D;
LABEL_54:
            v233 = 773;
            v230 = v68;
            v231 = v69;
            v232 = ".atomic.exit";
            v210 = v57 + 3;
            v71 = llvm::BasicBlock::splitBasicBlock(v53, (uint64_t *)v57 + 3, (uint64_t)&v230, 0);
            v72 = (_QWORD *)v53[5];
            if (v72 == v55)
            {
              v73 = 0;
            }
            else
            {
              if (v72)
                v73 = v72 - 3;
              else
                v73 = 0;
              if (*((unsigned __int8 *)v73 + 16) - 29 >= 0xB)
                v73 = 0;
            }
            v211 = v57;
            if ((v13[23] & 0x10) == 0)
            {
              v84 = 0;
              v83 = (unsigned __int8 *)&byte_1C871356D;
LABEL_70:
              v233 = 773;
              v230 = v83;
              v231 = v84;
              v232 = ".atomic.cont";
              v223 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock(v53, v73 + 3, (uint64_t)&v230, 0);
              v86 = (llvm::BasicBlock *)*((_QWORD *)v223 + 5);
              if (v86 == (llvm::BasicBlock *)((char *)v223 + 40))
              {
                v87 = 0;
              }
              else
              {
                if (v86)
                  v88 = (char *)v86 - 24;
                else
                  v88 = 0;
                if (v88[16] - 29 >= 0xB)
                  v87 = 0;
                else
                  v87 = v88;
              }
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v87 + 5) + 40, (uint64_t ***)v87);
              v89 = *((_QWORD *)v87 + 3);
              v90 = (_QWORD *)*((_QWORD *)v87 + 4);
              *v90 = v89;
              *(_QWORD *)(v89 + 8) = v90;
              *((_QWORD *)v87 + 3) = 0;
              *((_QWORD *)v87 + 4) = 0;
              llvm::Value::deleteValue((llvm::Value *)v87);
              v218 = (llvm::BasicBlock *)v71;
              if (a2)
              {
                v91 = (uint64_t *)(a1 + 344);
                sub_1C4D8AE2C((uint64_t)v225, a2, v212);
              }
              else
              {
                *(_QWORD *)v56 = 0;
                *(_QWORD *)(a1 + 400) = 0;
                v91 = (uint64_t *)(a1 + 344);
              }
              v233 = 257;
              v92 = sub_1C486A5CC(v91, this, 0, (uint64_t)&v230);
              v93 = v92;
              if ((v13[23] & 0x10) == 0)
              {
                v104 = 0;
                v103 = (unsigned __int8 *)&byte_1C871356D;
LABEL_90:
                v233 = 773;
                v230 = v103;
                v231 = v104;
                v232 = "x.new.val";
                llvm::Value::setName((uint64_t ***)v92, (uint64_t)&v230);
                *(_QWORD *)(a1 + 392) = v223;
                *(_QWORD *)(a1 + 400) = (char *)v223 + 40;
                v106 = *(_QWORD *)v47;
                v233 = 257;
                v222 = (llvm::PHINode *)sub_1C4867E94((uint64_t)v91, v106, 2, (uint64_t)&v230);
                sub_1C477667C(v222, (uint64_t)v47, (uint64_t)v53);
                v107 = **(_QWORD ***)(a1 + 336);
                v108 = this;
                if ((*((_DWORD *)this + 2) & 0xFE) == 0x12)
                  v108 = (llvm::Type *)**((_QWORD **)this + 2);
                v109 = llvm::Type::getPrimitiveSizeInBits(v108);
                LODWORD(v230) = v109;
                if (v109 <= 63)
                {
                  if (v109 <= 31)
                  {
                    switch(v109)
                    {
                      case 16:
                        v110 = (llvm::PointerType *)(*v107 + 1936);
                        goto LABEL_100;
                      case 8:
                        v110 = (llvm::PointerType *)(*v107 + 1912);
                        goto LABEL_100;
                      case 1:
                        v110 = (llvm::PointerType *)(*v107 + 1888);
                        goto LABEL_100;
                    }
                  }
                  else if (v109 == 32)
                  {
                    v110 = (llvm::PointerType *)(*v107 + 1960);
                    goto LABEL_100;
                  }
                }
                else
                {
                  if (v109 == 64)
                  {
                    v110 = (llvm::PointerType *)(*v107 + 1984);
                    goto LABEL_100;
                  }
                  if (v109 == 128)
                  {
                    v110 = (llvm::PointerType *)(*v107 + 2008);
                    goto LABEL_100;
                  }
                }
                v204 = sub_1C5270984(*v107 + 2168, &v230);
                v110 = (llvm::PointerType *)*((_QWORD *)v204 + 1);
                if (!v110)
                {
                  v110 = (llvm::PointerType *)sub_1C484358C(*v107 + 2040, 24, 3);
                  v205 = (int)v230;
                  *(_QWORD *)v110 = v107;
                  *((_QWORD *)v110 + 2) = 0;
                  *((_QWORD *)v110 + 1) = (v205 << 8) | 0xDu;
                  *((_QWORD *)v204 + 1) = v110;
                }
LABEL_100:
                v213 = *v214;
                if (v213 == 13)
                {
                  v111 = (unsigned __int8 *)v93;
                  v112 = (unsigned __int8 *)v222;
LABEL_139:
                  v147 = (uint64_t *)(*(uint64_t (**)(_QWORD, unsigned __int8 *, uint64_t *))a9)(*(_QWORD *)(a9 + 8), v112, v91);
                  v227 = (uint64_t *)(a1 + 392);
                  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 56) + 40) + 272, *v147);
                  v149 = v148;
                  v150 = (char *)operator new(0x80uLL);
                  v151 = v150;
                  *((_DWORD *)v150 + 21) = *((_DWORD *)v150 + 21) & 0x38000000 | 2;
                  *(_QWORD *)v150 = 0;
                  *((_QWORD *)v150 + 2) = 0;
                  *((_QWORD *)v150 + 1) = 0;
                  *((_QWORD *)v150 + 5) = 0;
                  *((_QWORD *)v150 + 6) = 0;
                  *((_QWORD *)v150 + 4) = 0;
                  v152 = (unsigned __int8 ***)(v150 + 32);
                  *((_QWORD *)v150 + 8) = **(_QWORD **)*v147 + 1576;
                  v153 = (llvm::Value *)(v150 + 64);
                  *((_QWORD *)v150 + 3) = v150 + 64;
                  *((_QWORD *)v150 + 7) = v150 + 64;
                  *((_QWORD *)v150 + 9) = 0;
                  v150[80] = 61;
                  v150[81] = 0;
                  *((_WORD *)v150 + 41) = 0;
                  *((_DWORD *)v150 + 21) = 2;
                  *(_OWORD *)(v150 + 88) = 0u;
                  *(_OWORD *)(v150 + 104) = 0u;
                  *((_DWORD *)v150 + 30) = 0;
                  *(_QWORD *)v150 = v147;
                  v154 = v147 + 1;
                  v155 = v147[1];
                  *((_QWORD *)v150 + 1) = v155;
                  if (v155)
                    *(_QWORD *)(v155 + 16) = v150 + 8;
                  *((_QWORD *)v150 + 2) = v154;
                  *v154 = v150;
                  if (*((_QWORD *)v150 + 4))
                  {
                    **((_QWORD **)v150 + 6) = *((_QWORD *)v150 + 5);
                    v206 = *((_QWORD *)v150 + 5);
                    if (v206)
                      *(_QWORD *)(v206 + 16) = *((_QWORD *)v150 + 6);
                  }
                  *v152 = v93;
                  if (v93)
                  {
                    v158 = v93[1];
                    v157 = (unsigned __int8 ****)(v93 + 1);
                    v156 = v158;
                    *((_QWORD *)v150 + 5) = v158;
                    if (v158)
                      *((_QWORD *)v156 + 2) = v150 + 40;
                    *((_QWORD *)v150 + 6) = v157;
                    *v157 = v152;
                  }
                  *((_WORD *)v150 + 41) = 2 * (v149 & 0x3F);
                  v150[124] = 1;
                  v233 = 257;
                  (*(void (**)(_QWORD, llvm::Value *, unsigned __int8 **, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v153, &v230, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
                  v159 = *(unsigned int *)(a1 + 352);
                  if (!(_DWORD)v159)
                  {
LABEL_147:
                    v229 = 257;
                    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*v227 + 56) + 40) + 272, (uint64_t)v220);
                    v161 = v160;
                    v162 = (char *)operator new(0x60uLL);
                    v163 = v162;
                    v164 = (uint64_t *)(v162 + 32);
                    *((_QWORD *)v162 + 2) = 0;
                    *((_QWORD *)v162 + 3) = v162 + 32;
                    v233 = 257;
                    *((_QWORD *)v162 + 4) = v220;
                    *((_QWORD *)v162 + 5) = 0;
                    *((_WORD *)v162 + 24) = 60;
                    *((_DWORD *)v162 + 13) = 1;
                    *(_OWORD *)(v162 + 56) = 0u;
                    *(_OWORD *)(v162 + 72) = 0u;
                    *((_DWORD *)v162 + 22) = 0;
                    *(_QWORD *)v162 = v111;
                    *((_QWORD *)v162 + 1) = 0;
                    if (v111)
                    {
                      v167 = *((_QWORD *)v111 + 1);
                      v166 = v111 + 8;
                      v165 = v167;
                      *((_QWORD *)v162 + 1) = v167;
                      if (v167)
                        *(_QWORD *)(v165 + 16) = v162 + 8;
                      *((_QWORD *)v162 + 2) = v166;
                      *v166 = v162;
                    }
                    *((_WORD *)v162 + 25) = 2 * (v161 & 0x3F);
                    v162[92] = 1;
                    llvm::Value::setName((uint64_t ***)v162 + 4, (uint64_t)&v230);
                    (*(void (**)(_QWORD, uint64_t *, _QWORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v164, v228, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
                    v168 = *(unsigned int *)(a1 + 352);
                    if (!(_DWORD)v168)
                    {
LABEL_152:
                      if (v213 == 13)
                      {
                        v169 = v224;
                        v170 = (uint64_t *)(a1 + 344);
                      }
                      else
                      {
                        v171 = llvm::PointerType::get(v220, (llvm::Type *)v219);
                        v233 = 257;
                        v170 = (uint64_t *)(a1 + 344);
                        v13 = sub_1C4773E38(v225, 49, v13, v171, (uint64_t)&v230);
                        v169 = v224;
                      }
                      v172 = sub_1C61D75CC(v170, (uint64_t)v13, (uint64_t ***)v222, v164, 0, v169, dword_1C8654134[v169 - 2], 1);
                      *((_WORD *)v172 + 9) = *((_WORD *)v172 + 9) & 0xFFFE | a10;
                      LODWORD(v228[0]) = 0;
                      v233 = 257;
                      v173 = sub_1C506DBC4((uint64_t)v170, (uint64_t *)v172, (unsigned int *)v228, 1, (uint64_t)&v230);
                      LODWORD(v228[0]) = 1;
                      v233 = 257;
                      v174 = (llvm::Value *)sub_1C506DBC4((uint64_t)v170, (uint64_t *)v172, (unsigned int *)v228, 1, (uint64_t)&v230);
                      sub_1C477667C(v222, v173, *v227);
                      v175 = (char *)operator new(0xA0uLL);
                      v176 = 0;
                      v177 = (unsigned __int8 **)(v175 + 96);
                      *((_DWORD *)v175 + 29) = *((_DWORD *)v175 + 29) & 0x38000000 | 3;
                      do
                      {
                        v178 = &v175[v176];
                        *(_QWORD *)v178 = 0;
                        *((_QWORD *)v178 + 1) = 0;
                        *((_QWORD *)v178 + 2) = 0;
                        *((_QWORD *)v178 + 3) = v177;
                        v176 += 32;
                      }
                      while (v176 != 96);
                      llvm::BranchInst::BranchInst((llvm::BranchInst *)(v175 + 96), v218, v223, v174, 0);
                      v233 = 257;
                      sub_1C4867F8C(v170, v177, (uint64_t)&v230);
                      v179 = (llvm::BasicBlock *)*((_QWORD *)v218 + 5);
                      v23 = v112;
                      if (v179 == (llvm::BasicBlock *)((char *)v218 + 40))
                        goto LABEL_170;
                      if (v179)
                        v180 = (char *)v179 - 24;
                      else
                        v180 = 0;
                      v181 = v180[16] - 40;
                      if (v181 < 0xFFFFFFF5)
                        v180 = 0;
                      if (v179 && (v180[16] == 35 ? (v182 = v181 >= 0xFFFFFFF5) : (v182 = 0), v182))
                      {
                        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v211[5] + 40), (uint64_t ***)v211);
                        v183 = v211[3];
                        v184 = v211[4];
                        *(_QWORD *)v184 = v183;
                        *((_QWORD *)v183 + 1) = v184;
                        *v210 = 0;
                        v210[1] = 0;
                        llvm::Value::deleteValue((llvm::Value *)v211);
                        *(_QWORD *)(a1 + 392) = v218;
                        *(_QWORD *)(a1 + 400) = (char *)v218 + 40;
                      }
                      else
                      {
LABEL_170:
                        *(_QWORD *)(a1 + 392) = MEMORY[0x28];
                        *(_QWORD *)(a1 + 400) = 24;
                        v230 = (unsigned __int8 *)MEMORY[0x30];
                        if (MEMORY[0x30])
                        {
                          llvm::MetadataTracking::track((uint64_t)&v230, MEMORY[0x30], 2);
                          v185 = v230;
                        }
                        else
                        {
                          v185 = 0;
                        }
                        sub_1C4774EF4((uint64_t)v170, 0, (uint64_t)v185);
                        if (v230)
                          llvm::MetadataTracking::untrack((uint64_t)&v230, v230);
                      }
                      return v23;
                    }
                    v187 = *(_QWORD *)(a1 + 344);
                    v188 = v187 + 16 * v168;
                    v189 = (unsigned __int8 **)(v163 + 80);
                    while (1)
                    {
                      v190 = *(_DWORD *)v187;
                      v191 = *(unsigned __int8 **)(v187 + 8);
                      if (v191)
                      {
                        if (!v190)
                        {
                          v234[0] = *(_QWORD *)(v187 + 8);
                          llvm::MetadataTracking::track((uint64_t)v234, v191, 2);
                          v192 = *v189;
                          goto LABEL_186;
                        }
                      }
                      else
                      {
                        v192 = *v189;
                        if (!*v189 && (v163[55] & 0x20) == 0)
                          goto LABEL_183;
                        if (!v190)
                        {
                          v234[0] = 0;
LABEL_186:
                          if (v192)
                            llvm::MetadataTracking::untrack((uint64_t)(v163 + 80), v192);
                          v193 = (unsigned __int8 *)v234[0];
                          *v189 = (unsigned __int8 *)v234[0];
                          if (v193)
                            llvm::MetadataTracking::retrack((uint64_t)v234, v193, (uint64_t)(v163 + 80));
                          goto LABEL_183;
                        }
                      }
                      llvm::Value::setMetadata((llvm::Value *)v164, *(_DWORD *)v187, (llvm::MDNode *)v191);
LABEL_183:
                      v187 += 16;
                      if (v187 == v188)
                        goto LABEL_152;
                    }
                  }
                  v194 = *(_QWORD *)(a1 + 344);
                  v195 = v194 + 16 * v159;
                  v196 = (unsigned __int8 **)(v151 + 112);
                  while (1)
                  {
                    v197 = *(_DWORD *)v194;
                    v198 = *(unsigned __int8 **)(v194 + 8);
                    if (v198)
                    {
                      if (!v197)
                      {
                        v228[0] = *(_QWORD *)(v194 + 8);
                        v216 = v195;
                        v208 = v196;
                        llvm::MetadataTracking::track((uint64_t)v228, v198, 2);
                        v196 = v208;
                        v195 = v216;
                        v199 = *v208;
                        goto LABEL_207;
                      }
                    }
                    else
                    {
                      v199 = *v196;
                      if (!*v196 && (v151[87] & 0x20) == 0)
                        goto LABEL_204;
                      if (!v197)
                      {
                        v228[0] = 0;
LABEL_207:
                        if (v199)
                        {
                          v217 = v195;
                          v209 = v196;
                          llvm::MetadataTracking::untrack((uint64_t)v196, v199);
                          v196 = v209;
                          v195 = v217;
                        }
                        v200 = (unsigned __int8 *)v228[0];
                        *v196 = (unsigned __int8 *)v228[0];
                        if (!v200)
                          goto LABEL_204;
                        v215 = v195;
                        v207 = v196;
                        llvm::MetadataTracking::retrack((uint64_t)v228, v200, (uint64_t)v196);
                        goto LABEL_203;
                      }
                    }
                    v215 = v195;
                    v207 = v196;
                    llvm::Value::setMetadata(v153, *(_DWORD *)v194, (llvm::MDNode *)v198);
LABEL_203:
                    v196 = v207;
                    v195 = v215;
LABEL_204:
                    v194 += 16;
                    if (v194 == v195)
                      goto LABEL_147;
                  }
                }
                v113 = llvm::PointerType::get(v110, (llvm::Type *)v219);
                v233 = 257;
                v111 = sub_1C4773E38(v91, 49, (unsigned __int8 *)v93, v113, (uint64_t)&v230);
                if (*v214 <= 6u)
                {
                  if ((v13[23] & 0x10) == 0)
                  {
                    v139 = 0;
                    v138 = (unsigned __int8 *)&byte_1C871356D;
                    goto LABEL_134;
                  }
                  v114 = ***(_QWORD ***)v13;
                  v115 = *(_QWORD *)(v114 + 152);
                  v116 = *(unsigned int *)(v114 + 168);
                  if ((_DWORD)v116)
                  {
                    LODWORD(v117) = (v116 - 1) & (v226 ^ (v13 >> 9));
                    v118 = (unsigned __int8 **)(v115 + 16 * v117);
                    v119 = *v118;
                    if (*v118 == v13)
                    {
LABEL_133:
                      v137 = v118[1];
                      v140 = *(_QWORD *)v137;
                      v138 = v137 + 16;
                      v139 = v140;
LABEL_134:
                      v233 = 773;
                      v230 = v138;
                      v231 = v139;
                      v232 = ".atomic.fltCast";
                      v141 = v91;
                      v142 = 49;
LABEL_138:
                      v112 = sub_1C4773E38(v141, v142, (unsigned __int8 *)v222, (uint64_t)this, (uint64_t)&v230);
                      goto LABEL_139;
                    }
                    v120 = 1;
                    while (v119 != (unsigned __int8 *)-4096)
                    {
                      v121 = v117 + v120++;
                      v117 = v121 & (v116 - 1);
                      v119 = *(unsigned __int8 **)(v115 + 16 * v117);
                      if (v119 == v13)
                      {
                        v118 = (unsigned __int8 **)(v115 + 16 * v117);
                        goto LABEL_133;
                      }
                    }
                  }
                  v118 = (unsigned __int8 **)(v115 + 16 * v116);
                  goto LABEL_133;
                }
                if ((v13[23] & 0x10) == 0)
                {
                  v145 = 0;
                  v144 = (unsigned __int8 *)&byte_1C871356D;
                  goto LABEL_137;
                }
                v122 = ***(_QWORD ***)v13;
                v123 = *(_QWORD *)(v122 + 152);
                v124 = *(unsigned int *)(v122 + 168);
                if ((_DWORD)v124)
                {
                  LODWORD(v125) = (v124 - 1) & (v226 ^ (v13 >> 9));
                  v126 = (unsigned __int8 **)(v123 + 16 * v125);
                  v127 = *v126;
                  if (*v126 == v13)
                  {
LABEL_136:
                    v143 = v126[1];
                    v146 = *(_QWORD *)v143;
                    v144 = v143 + 16;
                    v145 = v146;
LABEL_137:
                    v233 = 773;
                    v230 = v144;
                    v231 = v145;
                    v232 = ".atomic.ptrCast";
                    v141 = v91;
                    v142 = 48;
                    goto LABEL_138;
                  }
                  v128 = 1;
                  while (v127 != (unsigned __int8 *)-4096)
                  {
                    v129 = v125 + v128++;
                    v125 = v129 & (v124 - 1);
                    v127 = *(unsigned __int8 **)(v123 + 16 * v125);
                    if (v127 == v13)
                    {
                      v126 = (unsigned __int8 **)(v123 + 16 * v125);
                      goto LABEL_136;
                    }
                  }
                }
                v126 = (unsigned __int8 **)(v123 + 16 * v124);
                goto LABEL_136;
              }
              v94 = ***(_QWORD ***)v13;
              v95 = *(_QWORD *)(v94 + 152);
              v96 = *(unsigned int *)(v94 + 168);
              if ((_DWORD)v96)
              {
                LODWORD(v97) = (v96 - 1) & (v226 ^ (v13 >> 9));
                v98 = (unsigned __int8 **)(v95 + 16 * v97);
                v99 = *v98;
                if (*v98 == v13)
                {
LABEL_89:
                  v102 = v98[1];
                  v105 = *(_QWORD *)v102;
                  v103 = v102 + 16;
                  v104 = v105;
                  goto LABEL_90;
                }
                v100 = 1;
                while (v99 != (unsigned __int8 *)-4096)
                {
                  v101 = v97 + v100++;
                  v97 = v101 & (v96 - 1);
                  v99 = *(unsigned __int8 **)(v95 + 16 * v97);
                  if (v99 == v13)
                  {
                    v98 = (unsigned __int8 **)(v95 + 16 * v97);
                    goto LABEL_89;
                  }
                }
              }
              v98 = (unsigned __int8 **)(v95 + 16 * v96);
              goto LABEL_89;
            }
            v74 = ***(_QWORD ***)v13;
            v75 = *(_QWORD *)(v74 + 152);
            v76 = *(unsigned int *)(v74 + 168);
            if ((_DWORD)v76)
            {
              LODWORD(v77) = (v76 - 1) & (v226 ^ (v13 >> 9));
              v78 = (unsigned __int8 **)(v75 + 16 * v77);
              v79 = *v78;
              if (*v78 == v13)
              {
LABEL_69:
                v82 = v78[1];
                v85 = *(_QWORD *)v82;
                v83 = v82 + 16;
                v84 = v85;
                goto LABEL_70;
              }
              v80 = 1;
              while (v79 != (unsigned __int8 *)-4096)
              {
                v81 = v77 + v80++;
                v77 = v81 & (v76 - 1);
                v79 = *(unsigned __int8 **)(v75 + 16 * v77);
                if (v79 == v13)
                {
                  v78 = (unsigned __int8 **)(v75 + 16 * v77);
                  goto LABEL_69;
                }
              }
            }
            v78 = (unsigned __int8 **)(v75 + 16 * v76);
            goto LABEL_69;
          }
          v59 = ***(_QWORD ***)v13;
          v60 = *(_QWORD *)(v59 + 152);
          v61 = *(unsigned int *)(v59 + 168);
          if ((_DWORD)v61)
          {
            LODWORD(v62) = (v61 - 1) & (v226 ^ (v13 >> 9));
            v63 = (unsigned __int8 **)(v60 + 16 * v62);
            v64 = *v63;
            if (*v63 == v13)
            {
LABEL_53:
              v67 = v63[1];
              v70 = *(_QWORD *)v67;
              v68 = v67 + 16;
              v69 = v70;
              goto LABEL_54;
            }
            v65 = 1;
            while (v64 != (unsigned __int8 *)-4096)
            {
              v66 = v62 + v65++;
              v62 = v66 & (v61 - 1);
              v64 = *(unsigned __int8 **)(v60 + 16 * v62);
              if (v64 == v13)
              {
                v63 = (unsigned __int8 **)(v60 + 16 * v62);
                goto LABEL_53;
              }
            }
          }
          v63 = (unsigned __int8 **)(v60 + 16 * v61);
          goto LABEL_53;
        }
        v130 = *(_QWORD *)(a1 + 344);
        v131 = v130 + 16 * v52;
        v132 = (unsigned __int8 **)(v46 + 80);
        while (1)
        {
          v133 = *(_DWORD *)v130;
          v134 = *(unsigned __int8 **)(v130 + 8);
          if (v134)
          {
            if (!v133)
            {
              v234[0] = *(_QWORD *)(v130 + 8);
              llvm::MetadataTracking::track((uint64_t)v234, v134, 2);
              v135 = *v132;
              goto LABEL_128;
            }
          }
          else
          {
            v135 = *v132;
            if (!*v132 && (v46[55] & 0x20) == 0)
              goto LABEL_125;
            if (!v133)
            {
              v234[0] = 0;
LABEL_128:
              if (v135)
                llvm::MetadataTracking::untrack((uint64_t)(v46 + 80), v135);
              v136 = (unsigned __int8 *)v234[0];
              *v132 = (unsigned __int8 *)v234[0];
              if (v136)
                llvm::MetadataTracking::retrack((uint64_t)v234, v136, (uint64_t)(v46 + 80));
              goto LABEL_125;
            }
          }
          llvm::Value::setMetadata(v47, *(_DWORD *)v130, (llvm::MDNode *)v134);
LABEL_125:
          v130 += 16;
          if (v130 == v131)
            goto LABEL_39;
        }
      }
      v37 = 1;
      while (v36 != (unsigned __int8 *)-4096)
      {
        v38 = v34 + v37++;
        v34 = v38 & (v33 - 1);
        v36 = *(unsigned __int8 **)(v32 + 16 * v34);
        if (v36 == v13)
        {
          v35 = (unsigned __int8 **)(v32 + 16 * v34);
          goto LABEL_33;
        }
      }
    }
    v35 = (unsigned __int8 **)(v32 + 16 * v33);
    goto LABEL_33;
  }
  v16 = a11;
  v17 = this != 0;
  if (!this)
    v16 = 0;
  if (a8 == 2)
    v17 = v16;
  v19 = (char *)this + 8;
  v18 = *((unsigned __int8 *)this + 8);
  if (!v17 || v18 != 13)
  {
    v212 = a3;
    goto LABEL_15;
  }
  v22 = sub_1C61D775C((uint64_t *)(a1 + 344), a8, a4, a6, 0, a7, 1);
  v23 = v22;
  if (a8)
    llvm::OpenMPIRBuilder::emitRMWOpAsInstruction(a1, (uint64_t)v22, (uint64_t)a6, a8);
  return v23;
}

void llvm::OpenMPIRBuilder::emitRMWOpAsInstruction(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1C54E5CD4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _WORD v14[20];
  _WORD v15[44];

  v14[16] = 257;
  result = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v2 + 416) + 16))(*(_QWORD *)(v2 + 416), v1, v0, 0, 0);
  if (!result)
  {
    v4 = (uint64_t *)(v2 + 344);
    v15[16] = 257;
    v5 = (char *)operator new(0x80uLL);
    *((_QWORD *)v5 + 8) = *v1;
    v6 = (uint64_t)(v5 + 64);
    *((_QWORD *)v5 + 3) = v5 + 64;
    *((_QWORD *)v5 + 5) = 0;
    v7 = v5 + 40;
    *((_QWORD *)v5 + 6) = 0;
    *((_QWORD *)v5 + 7) = v5 + 64;
    *((_QWORD *)v5 + 9) = 0;
    *((_QWORD *)v5 + 10) = 0x200000029;
    *(_OWORD *)(v5 + 88) = 0u;
    *(_OWORD *)(v5 + 104) = 0u;
    *((_DWORD *)v5 + 30) = 0;
    *(_QWORD *)v5 = v1;
    v10 = v1[1];
    v9 = v1 + 1;
    v8 = v10;
    *((_QWORD *)v5 + 1) = v10;
    if (v10)
      *(_QWORD *)(v8 + 16) = v5 + 8;
    *((_QWORD *)v5 + 2) = v9;
    *v9 = v5;
    *((_QWORD *)v5 + 4) = v0;
    if (v0)
    {
      v13 = *(_QWORD *)(v0 + 8);
      v12 = (_QWORD *)(v0 + 8);
      v11 = v13;
      *v7 = v13;
      if (v13)
        *(_QWORD *)(v11 + 16) = v7;
      *((_QWORD *)v5 + 6) = v12;
      *v12 = v5 + 32;
    }
    llvm::Value::setName((uint64_t ***)v5 + 8, (uint64_t)v15);
    return sub_1C4773754(v4, v6, (uint64_t)v14);
  }
  return result;
}

uint64_t llvm::OpenMPIRBuilder::createAtomicCapture(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, int a8, unsigned int a9, uint64_t a10, char a11, char a12, char a13)
{
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  __int16 v26;
  char v27;
  char v28;
  char *v29;
  char *v30;
  _QWORD *v31;
  llvm::Value *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 **v43;
  int v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  char v49[32];
  __int16 v50;
  unsigned __int8 *v51;

  if (!sub_1C62683AC(a1, a2))
    return *a2;
  if (!a11)
    a9 = 0;
  v22 = (uint64_t *)llvm::OpenMPIRBuilder::emitAtomicUpdate(a1, a3, a4, *(_QWORD *)a5, *(llvm::Type **)(a5 + 8), a7, a8, a9, a10, *(_BYTE *)(a5 + 17), a13);
  if (a12)
    v24 = v22;
  else
    v24 = v23;
  v25 = *a6;
  v26 = *((unsigned __int8 *)a6 + 17);
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 392) + 56) + 40) + 272, *v24);
  v28 = v27;
  v29 = (char *)operator new(0x80uLL);
  v30 = v29;
  *((_DWORD *)v29 + 21) = *((_DWORD *)v29 + 21) & 0x38000000 | 2;
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 2) = 0;
  *((_QWORD *)v29 + 1) = 0;
  *((_QWORD *)v29 + 5) = 0;
  *((_QWORD *)v29 + 6) = 0;
  *((_QWORD *)v29 + 4) = 0;
  v31 = v29 + 32;
  *((_QWORD *)v29 + 8) = **(_QWORD **)*v24 + 1576;
  v32 = (llvm::Value *)(v29 + 64);
  *((_QWORD *)v29 + 3) = v29 + 64;
  *((_QWORD *)v29 + 7) = v29 + 64;
  *((_QWORD *)v29 + 9) = 0;
  v29[80] = 61;
  v29[81] = 0;
  *((_WORD *)v29 + 41) = 0;
  *((_DWORD *)v29 + 21) = 2;
  *(_OWORD *)(v29 + 88) = 0u;
  *(_OWORD *)(v29 + 104) = 0u;
  *((_DWORD *)v29 + 30) = 0;
  *(_QWORD *)v29 = v24;
  v35 = v24[1];
  v34 = v24 + 1;
  v33 = v35;
  *((_QWORD *)v29 + 1) = v35;
  if (v35)
    *(_QWORD *)(v33 + 16) = v29 + 8;
  *((_QWORD *)v29 + 2) = v34;
  *v34 = v29;
  if (*((_QWORD *)v29 + 4))
  {
    **((_QWORD **)v29 + 6) = *((_QWORD *)v29 + 5);
    v48 = *((_QWORD *)v29 + 5);
    if (v48)
      *(_QWORD *)(v48 + 16) = *((_QWORD *)v29 + 6);
  }
  *v31 = v25;
  if (v25)
  {
    v38 = *(_QWORD *)(v25 + 8);
    v37 = (_QWORD *)(v25 + 8);
    v36 = v38;
    *((_QWORD *)v29 + 5) = v38;
    if (v38)
      *(_QWORD *)(v36 + 16) = v29 + 40;
    *((_QWORD *)v29 + 6) = v37;
    *v37 = v31;
  }
  *((_WORD *)v29 + 41) = (2 * (v28 & 0x3F)) | v26;
  v29[124] = 1;
  v50 = 257;
  (*(void (**)(_QWORD, llvm::Value *, char *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424), v32, v49, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400));
  v39 = *(unsigned int *)(a1 + 352);
  if ((_DWORD)v39)
  {
    v41 = *(_QWORD *)(a1 + 344);
    v42 = v41 + 16 * v39;
    v43 = (unsigned __int8 **)(v30 + 112);
    do
    {
      v44 = *(_DWORD *)v41;
      v45 = *(unsigned __int8 **)(v41 + 8);
      if (v45)
      {
        if (!v44)
        {
          v51 = *(unsigned __int8 **)(v41 + 8);
          llvm::MetadataTracking::track((uint64_t)&v51, v45, 2);
          v46 = *v43;
          goto LABEL_31;
        }
      }
      else
      {
        v46 = *v43;
        if (!*v43 && (v30[87] & 0x20) == 0)
          goto LABEL_28;
        if (!v44)
        {
          v51 = 0;
LABEL_31:
          if (v46)
            llvm::MetadataTracking::untrack((uint64_t)(v30 + 112), v46);
          v47 = v51;
          *v43 = v51;
          if (v47)
            llvm::MetadataTracking::retrack((uint64_t)&v51, v47, (uint64_t)(v30 + 112));
          goto LABEL_28;
        }
      }
      llvm::Value::setMetadata(v32, *(_DWORD *)v41, (llvm::MDNode *)v45);
LABEL_28:
      v41 += 16;
    }
    while (v41 != v42);
  }
  if ((a8 & 0xFFFFFFFC) == 4)
    llvm::OpenMPIRBuilder::emitFlush(a1, a2);
  return *(_QWORD *)(a1 + 392);
}

uint64_t sub_1C54E614C(uint64_t result, unsigned int a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_DWORD *)(result + 20);
  if ((v3 & 0x40000000) != 0)
    v4 = *(_QWORD *)(result - 8);
  else
    v4 = result - 32 * (v3 & 0x7FFFFFF);
  v5 = v4 + 32 * a2;
  if (*(_QWORD *)v5)
  {
    **(_QWORD **)(v5 + 16) = *(_QWORD *)(v5 + 8);
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(v5 + 16);
  }
  *(_QWORD *)v5 = a3;
  if (a3)
  {
    v9 = *(_QWORD *)(a3 + 8);
    v7 = (_QWORD *)(a3 + 8);
    v8 = v9;
    v10 = v4 + 32 * a2;
    *(_QWORD *)(v10 + 8) = v9;
    if (v9)
      *(_QWORD *)(v8 + 16) = v10 + 8;
    *(_QWORD *)(v10 + 16) = v7;
    *v7 = v5;
  }
  return result;
}

uint64_t sub_1C54E61C4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = 32 * v1;
    v3 = (_QWORD *)(*(_QWORD *)result + 8);
    do
    {
      if ((*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        result = MEMORY[0x1CAA32FB4](*v3, 8);
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
  return result;
}

void sub_1C54E6218(uint64_t *a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t *v6;
  uint64_t *v7;
  llvm::ValueSymbolTable *v9;
  llvm::ValueSymbolTable *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t *v17;
  llvm::Value *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Value **v23;
  llvm::Value *v24;
  int v25;
  int v26;
  uint64_t v27;
  size_t *v28;
  size_t v29;
  int v30;
  size_t v31;
  unsigned __int8 *v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  int v42;
  uint64_t *v43;
  uint64_t *v44;
  llvm::ValueSymbolTable *v45;
  uint64_t v46;
  int v47;
  llvm::ValueSymbolTable *v48;
  char *__s1;
  llvm::Value *v50;

  v6 = *(uint64_t **)(a3 + 48);
  v7 = a1 + 5;
  if (a1 + 5 == a2 || v6 == v7)
    goto LABEL_16;
  *(_WORD *)(a3 + 18) &= ~0x8000u;
  if (a1 != (uint64_t *)a3)
  {
    v9 = *(llvm::ValueSymbolTable **)(a3 + 56);
    if (v9)
      v9 = (llvm::ValueSymbolTable *)*((_QWORD *)v9 + 13);
    v10 = (llvm::ValueSymbolTable *)a1[7];
    if (v10)
      v10 = (llvm::ValueSymbolTable *)*((_QWORD *)v10 + 13);
    if (v9 == v10)
    {
      v11 = a2;
      do
      {
        v12 = v11 - 3;
        if (!v11)
          v12 = 0;
        v12[5] = a3;
        v11 = (uint64_t *)v11[1];
      }
      while (v11 != v7);
      goto LABEL_15;
    }
    v48 = v10;
    v45 = v9;
    v17 = a2;
    v43 = a2;
    v44 = v6;
    v42 = a4;
    v41 = a1 + 5;
    while (1)
    {
      v18 = (llvm::Value *)(v17 - 3);
      if (!v17)
        v18 = 0;
      v50 = v18;
      v47 = *((_DWORD *)v18 + 5) & 0x10000000;
      if (v48)
      {
        if (v47)
          break;
      }
LABEL_44:
      *((_QWORD *)v50 + 5) = a3;
      if (v45 && v47)
        llvm::ValueSymbolTable::reinsertValue(v45, v50);
      v17 = (uint64_t *)v17[1];
      v7 = v41;
      a4 = v42;
      a2 = v43;
      v6 = v44;
      if (v17 == v41)
        goto LABEL_15;
    }
    v19 = ***(_QWORD ***)v18;
    v20 = *(_QWORD *)(v19 + 152);
    v21 = *(unsigned int *)(v19 + 168);
    if ((_DWORD)v21)
    {
      LODWORD(v22) = (v21 - 1) & ((v50 >> 4) ^ (v50 >> 9));
      v23 = (llvm::Value **)(v20 + 16 * v22);
      v24 = *v23;
      if (*v23 == v50)
        goto LABEL_31;
      v25 = 1;
      while (v24 != (llvm::Value *)-4096)
      {
        v26 = v22 + v25++;
        v22 = v26 & (v21 - 1);
        v24 = *(llvm::Value **)(v20 + 16 * v22);
        if (v24 == v50)
        {
          v23 = (llvm::Value **)(v20 + 16 * v22);
          goto LABEL_31;
        }
      }
    }
    v23 = (llvm::Value **)(v20 + 16 * v21);
LABEL_31:
    v27 = *((unsigned int *)v48 + 2);
    if ((_DWORD)v27)
    {
      v28 = (size_t *)v23[1];
      v46 = *((unsigned int *)v48 + 5);
      __s1 = (char *)v28 + v46;
      v29 = *v28;
      if (*v28)
      {
        v30 = 0;
        v31 = *v28;
        v32 = (unsigned __int8 *)v28 + v46;
        do
        {
          v33 = *v32++;
          v30 = 33 * v30 + v33;
          --v31;
        }
        while (v31);
      }
      else
      {
        v30 = 0;
      }
      v34 = v27 - 1;
      v35 = *(_QWORD *)v48;
      v36 = *(_QWORD *)v48 + 8 * v27 + 8;
      v37 = 1;
      v38 = v30;
      while (1)
      {
        v39 = v38 & v34;
        v40 = *(_QWORD **)(v35 + 8 * v39);
        if (v40 != (_QWORD *)-8)
        {
          if (!v40)
            goto LABEL_44;
          if (*(_DWORD *)(v36 + 4 * v39) == v30 && v29 == *v40 && (!v29 || !memcmp(__s1, (char *)v40 + v46, v29)))
            break;
        }
        v38 = v37 + v39;
        ++v37;
      }
      *(_QWORD *)(v35 + 8 * (int)v39) = -8;
      *(int32x2_t *)((char *)v48 + 12) = vadd_s32(*(int32x2_t *)((char *)v48 + 12), (int32x2_t)0x1FFFFFFFFLL);
    }
    goto LABEL_44;
  }
LABEL_15:
  v13 = *v7;
  v14 = *a2;
  *(_QWORD *)(v14 + 8) = v7;
  *v7 = v14;
  v15 = *v6;
  *(_QWORD *)(v13 + 8) = v6;
  *a2 = v15;
  *(_QWORD *)(v15 + 8) = a2;
  *v6 = v13;
LABEL_16:
  if (a4)
  {
    v16 = operator new(0x60uLL);
    v16[13] = v16[13] & 0x38000000 | 1;
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = 0;
    *((_QWORD *)v16 + 3) = v16 + 8;
    llvm::BranchInst::BranchInst((llvm::BranchInst *)(v16 + 8), (llvm::BasicBlock *)a3, (llvm::BasicBlock *)a1);
  }
}

_QWORD *sub_1C54E652C(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4926528((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C54E6588(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C54E6588(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = a1[2];
  v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C54E6638((uint64_t)a1, v7);
  v9 = 0;
  sub_1C4926528((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096)
    --a1[3];
  return a4;
}

_QWORD *sub_1C54E6638(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C626D72C(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1C54E66F0(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[8];

  v7[7] = *MEMORY[0x1E0C80C00];
  llvm::TargetLibraryAnalysis::run(a1 + 8, a2, (uint64_t)&v5);
  sub_1C54E677C(&v5, &v4);
  *a3 = v4;
  v4 = 0;
  if (v6 != v7)
    free(v6);
}

void sub_1C54E677C(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *__dst;
  uint64_t v14;
  _BYTE v15[48];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  v5 = *a1;
  v12 = *a1;
  __dst = v15;
  v14 = 0x600000000;
  v6 = *((_DWORD *)a1 + 4);
  if (v6)
  {
    if (&v12 != a1)
    {
      if (v6 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v15, *((unsigned int *)a1 + 4), 8);
        v8 = *((unsigned int *)a1 + 4);
        if (!(_DWORD)v8)
        {
LABEL_8:
          LODWORD(v14) = v6;
          v5 = v12;
          goto LABEL_9;
        }
        v7 = __dst;
      }
      else
      {
        v7 = v15;
        v8 = *((unsigned int *)a1 + 4);
      }
      memcpy(v7, (const void *)a1[1], 8 * v8);
      goto LABEL_8;
    }
    v6 = 0;
  }
LABEL_9:
  v9 = *((_DWORD *)a1 + 18);
  v16 = v9;
  *(_QWORD *)v4 = &unk_1E816D600;
  *(_QWORD *)(v4 + 8) = v5;
  v10 = (void *)(v4 + 32);
  *(_QWORD *)(v4 + 16) = v4 + 32;
  *(_QWORD *)(v4 + 24) = 0x600000000;
  if (!v6)
    goto LABEL_15;
  v11 = v6;
  if (v6 < 7)
    goto LABEL_13;
  llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 16, v4 + 32, v6, 8);
  v11 = v14;
  if ((_DWORD)v14)
  {
    v10 = *(void **)(v4 + 16);
LABEL_13:
    memcpy(v10, __dst, 8 * v11);
  }
  *(_DWORD *)(v4 + 24) = v6;
  v9 = v16;
LABEL_15:
  *(_DWORD *)(v4 + 80) = v9;
  *a2 = v4;
  if (__dst != v15)
    free(__dst);
}

void sub_1C54E6904(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_1E816D600;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C54E6958()
{
  return 0;
}

char *sub_1C54E6960()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::TargetLibraryAnalysis]";
  v10[1] = 77;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D)
    v1 = 77;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_1[v1];
  v3 = 77 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char **sub_1C54E6A18@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  __int128 v6;
  char *v7[2];
  uint64_t v8;
  char *v9[2];
  int v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v6 = a1;
  *((_QWORD *)&v6 + 1) = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetIRAnalysis::Key, a1) + 8;
  v7[0] = (char *)&v8;
  v7[1] = (char *)0x400000000;
  v11 = 0;
  v9[0] = 0;
  v9[1] = 0;
  v10 = 0;
  sub_1C54E6AF0(&v6, &v5);
  *a3 = v5;
  v5 = 0;
  sub_1C4D9F9F4(v9);
  MEMORY[0x1CAA32FB4](v9[0], 8);
  return sub_1C4D9FB40(v7);
}

char **sub_1C54E6AF0@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  BOOL v5;
  char *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  int v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  v14 = *a1;
  v15 = (char *)&v17;
  v16 = 0x400000000;
  if (*((_DWORD *)a1 + 6))
  {
    v12 = v4;
    sub_1C4D9DC84((uint64_t)&v15, (uint64_t)(a1 + 1));
    v4 = v12;
    v5 = (_DWORD)v16 == 0;
  }
  else
  {
    v5 = 1;
  }
  v6 = (char *)*((_QWORD *)a1 + 20);
  v18 = v6;
  v7 = *((_DWORD *)a1 + 42);
  v8 = *((_DWORD *)a1 + 43);
  v19 = __PAIR64__(v8, v7);
  *((_QWORD *)a1 + 20) = 0;
  *((_QWORD *)a1 + 21) = 0;
  v9 = *((_DWORD *)a1 + 44);
  v20 = v9;
  *((_DWORD *)a1 + 44) = 0;
  v10 = *((_BYTE *)a1 + 184);
  v21 = v10;
  *(_QWORD *)v4 = &unk_1E816D658;
  *(_OWORD *)(v4 + 8) = v14;
  *(_QWORD *)(v4 + 24) = v4 + 40;
  *(_QWORD *)(v4 + 32) = 0x400000000;
  if (!v5)
  {
    v13 = v4;
    sub_1C4D9DC84(v4 + 24, (uint64_t)&v15);
    v4 = v13;
    v6 = v18;
    v7 = v19;
    v8 = HIDWORD(v19);
    v9 = v20;
    v10 = v21;
  }
  *(_QWORD *)(v4 + 168) = v6;
  v18 = 0;
  v19 = 0;
  *(_DWORD *)(v4 + 176) = v7;
  *(_DWORD *)(v4 + 180) = v8;
  *(_DWORD *)(v4 + 184) = v9;
  v20 = 0;
  *(_BYTE *)(v4 + 192) = v10;
  *a2 = v4;
  sub_1C4D9F9F4(&v18);
  MEMORY[0x1CAA32FB4](v18, 8);
  return sub_1C4D9FB40(&v15);
}

void sub_1C54E6C84(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E816D658;
  sub_1C4D9F9F4((char **)(a1 + 168));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 168), 8);
  sub_1C4D9FB40((char **)(a1 + 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C54E6CDC()
{
  return 0;
}

char *sub_1C54E6CE4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::AssumptionAnalysis]";
  v10[1] = 74;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A)
    v1 = 74;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_2[v1];
  v3 = 74 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_1C54E6D9C(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  void *v4[2];
  uint64_t v5;
  uint64_t v6[2];
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  void *v12[2];
  uint64_t v13;
  uint64_t v14[7];

  v14[6] = *MEMORY[0x1E0C80C00];
  v4[0] = &v5;
  v4[1] = (void *)0x100000000;
  v11 = 0;
  v6[0] = 0;
  v6[1] = 0;
  v7 = 0;
  v10 = 0;
  v8 = 0;
  v9 = a1;
  sub_1C53BA620((uint64_t)v4, 0);
  v3 = (_QWORD *)operator new();
  llvm::DominatorTreeBase<llvm::BasicBlock,false>::DominatorTreeBase((uint64_t)v12, (uint64_t)v4);
  *v3 = &unk_1E816D6B0;
  llvm::DominatorTreeBase<llvm::BasicBlock,false>::DominatorTreeBase((uint64_t)(v3 + 1), (uint64_t)v12);
  sub_1C4DC4E38(v14);
  if (v12[0] != &v13)
    free(v12[0]);
  *a2 = v3;
  sub_1C4DC4E38(v6);
  if (v4[0] != &v5)
    free(v4[0]);
}

_QWORD *sub_1C54E6EB8(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_1E816D6B0;
  sub_1C4DC4E38(a1 + 4);
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C54E6F00(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_1E816D6B0;
  sub_1C4DC4E38(a1 + 4);
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C54E6F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return llvm::DominatorTree::invalidate(a1 + 8, a2, a3);
}

char *sub_1C54E6F60()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DominatorTreeAnalysis]";
  v10[1] = 77;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D)
    v1 = 77;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_3[v1];
  v3 = 77 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

_QWORD *sub_1C54E7018@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  _QWORD v6[18];
  _QWORD v7[19];

  v7[18] = *MEMORY[0x1E0C80C00];
  llvm::LoopAnalysis::run(a1, a2, (uint64_t)v6);
  v4 = (_QWORD *)operator new();
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::LoopInfoBase((uint64_t)v7, (uint64_t)v6);
  *v4 = &unk_1E816D708;
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::LoopInfoBase((uint64_t)(v4 + 1), (uint64_t)v7);
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase(v7);
  *a3 = v4;
  return llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase(v6);
}

void sub_1C54E70D4(_QWORD *a1)
{
  *a1 = &unk_1E816D708;
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C54E7118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return llvm::LoopInfo::invalidate(a1 + 8, a2, a3);
}

char *sub_1C54E7120()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopAnalysis]";
  v10[1] = 68;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x44)
    v1 = 68;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_4[v1];
  v3 = 68 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_1C54E71D8(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  _BYTE v5[1336];
  _BYTE v6[1336];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  llvm::ScalarEvolutionAnalysis::run(a1, a2, (uint64_t)v5);
  v4 = (_QWORD *)operator new();
  llvm::ScalarEvolution::ScalarEvolution((uint64_t)v6, (uint64_t)v5);
  *v4 = &unk_1E816D760;
  llvm::ScalarEvolution::ScalarEvolution((uint64_t)(v4 + 1), (uint64_t)v6);
  llvm::ScalarEvolution::~ScalarEvolution((llvm::ScalarEvolution *)v6);
  *a3 = v4;
  llvm::ScalarEvolution::~ScalarEvolution((llvm::ScalarEvolution *)v5);
}

void sub_1C54E7294(_QWORD *a1)
{
  *a1 = &unk_1E816D760;
  llvm::ScalarEvolution::~ScalarEvolution((llvm::ScalarEvolution *)(a1 + 1));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C54E72D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return llvm::ScalarEvolution::invalidate(a1 + 8, a2, a3, a4);
}

char *sub_1C54E72E0()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ScalarEvolutionAnalysis]";
  v10[1] = 79;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4F)
    v1 = 79;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_5[v1];
  v3 = 79 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

_QWORD *sub_1C54E7398@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  result = (_QWORD *)operator new();
  *result = &unk_1E816D7B8;
  result[1] = v3;
  *a2 = result;
  return result;
}

void sub_1C54E73E4()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C54E73F8()
{
  return 0;
}

char *sub_1C54E7400()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PassInstrumentationAnalysis]";
  v10[1] = 83;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x53)
    v1 = 83;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_6[v1];
  v3 = 83 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_1C54E74BC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C54E74D0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E816D7E0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C54E7504(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E816D7E0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C54E7520(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 88))(**(_QWORD **)(a1 + 8));
}

_QWORD *sub_1C54E7534@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
  {
    sub_1C485C2F0();
    sub_1C54E75A4(v6);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v2 + 48))(&v7);
  result = (_QWORD *)operator new();
  v5 = v7;
  *result = &unk_1E816D858;
  result[1] = v5;
  *a2 = result;
  return result;
}

void sub_1C54E75A4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &unk_1E816D858;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C54E75F8()
{
  return 0;
}

char *sub_1C54E7600()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::TargetIRAnalysis]";
  v10[1] = 72;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x48)
    v1 = 72;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_7[v1];
  v3 = 72 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

uint64_t *sub_1C54E76B8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9;

  v2 = *a1;
  v3 = a1[1];
  if (v3)
  {
    sub_1C4D8AE2C(v2, v3, a1[2]);
  }
  else
  {
    *(_QWORD *)(v2 + 48) = 0;
    *(_QWORD *)(v2 + 56) = 0;
  }
  v4 = *a1;
  v6 = (unsigned __int8 **)(a1 + 3);
  v5 = (unsigned __int8 *)a1[3];
  v9 = v5;
  if (v5)
  {
    llvm::MetadataTracking::track((uint64_t)&v9, v5, 2);
    v7 = v9;
  }
  else
  {
    v7 = 0;
  }
  sub_1C4774EF4(v4, 0, (uint64_t)v7);
  if (v9)
    llvm::MetadataTracking::untrack((uint64_t)&v9, v9);
  if (*v6)
    llvm::MetadataTracking::untrack((uint64_t)(a1 + 3), *v6);
  return a1;
}

double sub_1C54E7764(_WORD *a1, __int128 *a2, double **a3)
{
  double *v6;
  double result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED8058C8, "openmp-ir-builder-unroll-threshold-factor", 0x29uLL);
  word_1ED8058D2 = (32 * (*a1 & 3)) | word_1ED8058D2 & 0xFF9F;
  xmmword_1ED8058E8 = *a2;
  v6 = *a3;
  *(double *)&xmmword_1ED805948 = **a3;
  byte_1ED805960 = 1;
  result = *v6;
  qword_1ED805958 = *(_QWORD *)v6;
  return result;
}

uint64_t sub_1C54E77E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  void *v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  void **v21;
  void **v22;

  if (a1 != a2)
  {
    v6 = 0;
    v7 = a1;
    while (1)
    {
      v8 = a3 + v6;
      v9 = a1 + v6;
      sub_1C48AAFD8((_QWORD *)(a3 + v6), a1 + v6);
      v10 = *(_QWORD *)(a1 + v6 + 48);
      *(_OWORD *)(v8 + 32) = *(_OWORD *)(a1 + v6 + 32);
      *(_QWORD *)(v8 + 48) = v10;
      if (a3 != a1)
        break;
LABEL_13:
      v6 += 88;
      v7 = v9 + 88;
      if (v9 + 88 == a2)
      {
        a3 += v6;
        return a3;
      }
    }
    v11 = (void **)(v8 + 56);
    v12 = *(void **)(v9 + 56);
    if ((void *)(v9 + 72) != v12)
    {
      if ((void *)(a3 + v6 + 72) != *v11)
      {
        free(*v11);
        v11 = (void **)(v8 + 56);
        v12 = *(void **)(v9 + 56);
      }
      *v11 = v12;
      v14 = (_DWORD *)(v7 + 64);
      *(_QWORD *)(a3 + v6 + 64) = *(_QWORD *)(a1 + v6 + 64);
      *(_QWORD *)(v9 + 56) = v9 + 72;
      *(_DWORD *)(a1 + v6 + 68) = 0;
      goto LABEL_12;
    }
    v14 = (_DWORD *)(a1 + v6 + 64);
    v13 = *v14;
    v15 = a3 + v6;
    v16 = *(unsigned int *)(a3 + v6 + 64);
    if (v16 >= v13)
    {
      if ((_DWORD)v13)
        memmove(*v11, v12, 8 * v13);
      goto LABEL_11;
    }
    if (*(_DWORD *)(v15 + 68) < v13)
    {
      *(_DWORD *)(v15 + 64) = 0;
      v21 = v11;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v11, a3 + v6 + 72, v13, 8);
      v11 = v21;
    }
    else if ((_DWORD)v16)
    {
      v20 = *(unsigned int *)(a3 + v6 + 64);
      v22 = v11;
      memmove(*v11, v12, 8 * v16);
      v17 = v20;
      v11 = v22;
LABEL_9:
      v18 = *v14;
      if (v17 != v18)
        memcpy((char *)*v11 + 8 * v17, (const void *)(*(_QWORD *)(v9 + 56) + 8 * v17), 8 * v18 - 8 * v17);
LABEL_11:
      *(_DWORD *)(v15 + 64) = v13;
LABEL_12:
      *v14 = 0;
      goto LABEL_13;
    }
    v17 = 0;
    goto LABEL_9;
  }
  return a3;
}

_OWORD *sub_1C54E7990(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C626DFD0(a1, v4, &v4[3 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = xmmword_1C8651090;
      result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C54E7A58(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;

  *a1 = &off_1E816D880;
  v4 = (unsigned __int8 *)a1[5];
  v2 = (uint64_t)(a1 + 5);
  v3 = v4;
  if (v4)
    llvm::MetadataTracking::untrack(v2, v3);
  return a1;
}

void sub_1C54E7A90(_QWORD *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;

  *a1 = &off_1E816D880;
  v3 = (unsigned __int8 *)a1[5];
  v1 = (uint64_t)(a1 + 5);
  v2 = v3;
  if (v3)
    llvm::MetadataTracking::untrack(v1, v2);
  JUMPOUT(0x1CAA32FC0);
}

char *sub_1C54E7AD8(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  unsigned __int8 *v4;

  v2 = (char *)operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = &off_1E816D880;
  *((_QWORD *)v2 + 1) = v3;
  *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  v4 = *(unsigned __int8 **)(a1 + 40);
  *((_QWORD *)v2 + 5) = v4;
  if (v4)
    llvm::MetadataTracking::track((uint64_t)(v2 + 40), v4, 2);
  return v2;
}

uint64_t sub_1C54E7B38(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;

  *(_QWORD *)a2 = &off_1E816D880;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  v3 = *(unsigned __int8 **)(result + 40);
  *(_QWORD *)(a2 + 40) = v3;
  v4 = a2 + 40;
  if (v3)
    return llvm::MetadataTracking::track(v4, v3, 2);
  return result;
}

uint64_t sub_1C54E7B7C(uint64_t a1)
{
  uint64_t result;
  unsigned __int8 *v2;
  unsigned __int8 *v3;

  v3 = *(unsigned __int8 **)(a1 + 40);
  result = a1 + 40;
  v2 = v3;
  if (v3)
    return llvm::MetadataTracking::untrack(result, v2);
  return result;
}

void sub_1C54E7B8C(char *__p)
{
  char *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;

  v4 = (unsigned __int8 *)*((_QWORD *)__p + 5);
  v2 = __p + 40;
  v3 = v4;
  if (v4)
    llvm::MetadataTracking::untrack((uint64_t)v2, v3);
  operator delete(__p);
}

uint64_t sub_1C54E7BB8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unsigned __int8 *v12[2];
  uint64_t v13;
  __int128 v14;
  unsigned __int8 *v15;

  if (*(_DWORD *)(result + 16) == 40)
  {
    v2 = result;
    v4 = *a2;
    v3 = a2[1];
    v5 = *(_QWORD *)(result + 8);
    v13 = v5 + 344;
    v6 = (__int128 *)(v5 + 392);
    v14 = *(_OWORD *)(v5 + 392);
    llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)(v5 + 344), &v15);
    if (v4)
    {
      sub_1C4D8AE2C(v5 + 344, v4, v3);
      v7 = *v6;
    }
    else
    {
      v7 = 0uLL;
      *v6 = 0u;
    }
    v11 = v7;
    v8 = *(unsigned __int8 **)(v2 + 40);
    v12[0] = v8;
    if (v8)
      llvm::MetadataTracking::track((uint64_t)v12, v8, 2);
    if (sub_1C62683AC(v5, (uint64_t *)&v11))
      llvm::OpenMPIRBuilder::emitBarrierImpl(v5, &v11, 89, 0, 0);
    if (v12[0])
      llvm::MetadataTracking::untrack((uint64_t)v12, v12[0]);
    v9 = v13;
    if ((_QWORD)v14)
    {
      sub_1C4D8AE2C(v13, v14, *((uint64_t *)&v14 + 1));
      v9 = v13;
    }
    else
    {
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
    }
    *(_QWORD *)&v11 = v15;
    if (v15)
    {
      llvm::MetadataTracking::track((uint64_t)&v11, v15, 2);
      v10 = v11;
    }
    else
    {
      v10 = 0;
    }
    result = sub_1C4774EF4(v9, 0, v10);
    if ((_QWORD)v11)
      result = llvm::MetadataTracking::untrack((uint64_t)&v11, (unsigned __int8 *)v11);
    if (v15)
      return llvm::MetadataTracking::untrack((uint64_t)&v15, v15);
  }
  return result;
}

unint64_t sub_1C54E7D28(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 40 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C626E098(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C626E098(a1, v5);
    }
  }
  return a2;
}

void sub_1C54E7D94()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C54E7DA8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E816D8C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C54E7DE8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E816D8C8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C54E7E10(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned __int8 **v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  __int128 v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20[4];
  __int16 v21;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 + 40 == v4)
  {
    v5 = *(_QWORD *)(a1 + 8) + 344;
    v17 = v5;
    v6 = (__int128 *)(*(_QWORD *)(a1 + 8) + 392);
    v18 = *v6;
    llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)v5, &v19);
    if (v3)
    {
      sub_1C4D8AE2C(v5, (uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      *(_QWORD *)v6 = 0;
      *(_QWORD *)(v5 + 56) = 0;
    }
    v7 = **(_QWORD **)(a1 + 16);
    v8 = (char *)operator new(0x60uLL);
    *((_DWORD *)v8 + 13) = *((_DWORD *)v8 + 13) & 0x38000000 | 1;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 2) = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 4) = ***(_QWORD ***)v7 + 1576;
    *((_QWORD *)v8 + 3) = v8 + 32;
    *((_QWORD *)v8 + 5) = 0;
    v8[48] = 30;
    v8[49] = 0;
    *((_WORD *)v8 + 25) = 0;
    *((_DWORD *)v8 + 13) = 1;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *((_DWORD *)v8 + 22) = 0;
    v9 = (_QWORD *)(v7 + 8);
    v10 = *(_QWORD *)(v7 + 8);
    *(_QWORD *)v8 = v7;
    *((_QWORD *)v8 + 1) = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v8 + 8;
    *((_QWORD *)v8 + 2) = v9;
    *v9 = v8;
    v21 = 257;
    v11 = sub_1C4867F8C((uint64_t *)v5, (unsigned __int8 **)v8 + 4, (uint64_t)v20);
    v3 = v11[5];
    v12 = v17;
    if ((_QWORD)v18)
    {
      sub_1C4D8AE2C(v17, v18, *((uint64_t *)&v18 + 1));
      v12 = v17;
    }
    else
    {
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
    }
    v20[0] = v19;
    if (v19)
    {
      llvm::MetadataTracking::track((uint64_t)v20, v19, 2);
      v13 = v20[0];
    }
    else
    {
      v13 = 0;
    }
    v4 = (unsigned __int8 *)(v11 + 3);
    sub_1C4774EF4(v12, 0, (uint64_t)v13);
    if (v20[0])
      llvm::MetadataTracking::untrack((uint64_t)v20, v20[0]);
    if (v19)
      llvm::MetadataTracking::untrack((uint64_t)&v19, v19);
  }
  v14 = *(_QWORD *)(a1 + 24);
  v20[0] = v3;
  v20[1] = v4;
  v15 = *(_QWORD *)(v14 + 24);
  if (v15)
    return (*(uint64_t (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v15 + 48))(v15, v20);
  sub_1C485C2F0();
  return sub_1C54E7FF0();
}

_QWORD *sub_1C54E7FF0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E816D910;
  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  return a1;
}

void sub_1C54E8030(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E816D910;
  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

char *sub_1C54E8080(uint64_t a1)
{
  char *v2;
  char *v3;
  void *v4;
  void **v5;
  unsigned int v6;
  uint64_t v7;

  v2 = (char *)operator new(0x80uLL);
  v3 = v2;
  *(_QWORD *)v2 = &off_1E816D910;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = v2 + 96;
  *((_QWORD *)v2 + 10) = v2 + 96;
  v5 = (void **)(v2 + 80);
  *((_QWORD *)v2 + 11) = 0x400000000;
  v6 = *(_DWORD *)(a1 + 88);
  if (v6 && v2 != (char *)a1)
  {
    if (v6 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 80), (uint64_t)v4, *(unsigned int *)(a1 + 88), 8);
      v7 = *(unsigned int *)(a1 + 88);
      if (!(_DWORD)v7)
        goto LABEL_6;
      v4 = *v5;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 88);
    }
    memcpy(v4, *(const void **)(a1 + 80), 8 * v7);
LABEL_6:
    *((_DWORD *)v3 + 22) = v6;
  }
  return v3;
}

char *sub_1C54E8154(char *result, char *a2)
{
  void *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  void **v8;
  unint64_t v9;
  const void **v11;
  uint64_t v12;

  *(_QWORD *)a2 = &off_1E816D910;
  v2 = a2 + 96;
  v3 = *(_OWORD *)(result + 24);
  v4 = *(_OWORD *)(result + 40);
  v5 = *(_OWORD *)(result + 56);
  v6 = *((_QWORD *)result + 9);
  v7 = *(_OWORD *)(result + 8);
  *((_QWORD *)a2 + 10) = a2 + 96;
  v8 = (void **)(a2 + 80);
  *(_OWORD *)(a2 + 8) = v7;
  *((_QWORD *)a2 + 9) = v6;
  *(_OWORD *)(a2 + 56) = v5;
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *((_QWORD *)a2 + 11) = 0x400000000;
  v9 = *((unsigned int *)result + 22);
  if ((_DWORD)v9)
  {
    v11 = (const void **)result;
    if (a2 != result)
    {
      if (v9 >= 5)
      {
        result = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 80), (uint64_t)(a2 + 96), v9, 8);
        v12 = *((unsigned int *)v11 + 22);
        if (!(_DWORD)v12)
          goto LABEL_6;
        v2 = *v8;
      }
      else
      {
        v12 = *((unsigned int *)result + 22);
      }
      result = (char *)memcpy(v2, v11[10], 8 * v12);
LABEL_6:
      *((_DWORD *)a2 + 22) = v9;
    }
  }
  return result;
}

void sub_1C54E821C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 80);
  if (v2 != (void *)(a1 + 96))
    free(v2);
}

void sub_1C54E8238(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  operator delete(__p);
}

void sub_1C54E826C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ***v8;
  void *v9;
  void *v10;
  unsigned int v11;
  const llvm::APInt *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::ConstantInt *v15;
  unint64_t v16;
  unint64_t v17;
  llvm::ValueHandleBase *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t **v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  char *v46;
  char *v47;
  llvm::Value *v48;
  uint64_t *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  char *v57;
  char *v58;
  llvm::Value *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 **v76;
  int v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  unsigned __int8 *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t **v86;
  uint64_t v87;
  double v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unsigned __int8 *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t **v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 **v98;
  int v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  unsigned __int8 *v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  unsigned __int8 *v106;
  unsigned __int8 **v107;
  unsigned __int8 *v108;
  uint64_t v109;
  unsigned __int8 **v110;
  _QWORD *v111;
  uint64_t *v112;
  unsigned __int8 *v113[4];
  __int16 v114;
  unsigned __int8 *v115[2];
  uint64_t v116[4];
  __int16 v117;
  void *v118;
  uint64_t v119;
  _QWORD v120[2];
  unsigned __int8 *v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = (uint64_t *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(a2 + 112), **(uint64_t ***)a2, 1, 19);
  *(_QWORD *)(a2 + 112) = llvm::AttributeList::addAttributeAtIndex(v5, **(uint64_t ***)a2, 2, 19);
  *(_QWORD *)(a2 + 112) = llvm::AttributeList::addAttributeAtIndex(v5, **(uint64_t ***)a2, -1, 37);
  *(_QWORD *)(a2 + 112) = llvm::AttributeList::addAttributeAtIndex(v5, **(uint64_t ***)a2, -1, 30);
  v6 = *(_QWORD *)(a2 + 96);
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24);
  v8 = *(uint64_t ****)(v7 + 40);
  v118 = "omp_parallel";
  LOWORD(v121) = 259;
  llvm::Value::setName(v8, (uint64_t)&v118);
  *(_QWORD *)(v4 + 392) = *(_QWORD *)(v7 + 40);
  *(_QWORD *)(v4 + 400) = v7 + 24;
  v9 = *(void **)(v7 + 48);
  v110 = (unsigned __int8 **)(v7 + 48);
  v111 = (_QWORD *)(v7 + 24);
  v118 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track((uint64_t)&v118, (unsigned __int8 *)v9, 2);
    v10 = v118;
  }
  else
  {
    v10 = 0;
  }
  v11 = v6 - 2;
  sub_1C4774EF4(v4 + 344, 0, (uint64_t)v10);
  if (v118)
    llvm::MetadataTracking::untrack((uint64_t)&v118, (unsigned __int8 *)v118);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = **(_QWORD **)(v4 + 408);
  v15 = *(llvm::ConstantInt **)(v14 + 1960);
  v16 = *(unsigned int *)(v14 + 1968);
  LODWORD(v119) = v16 >> 8;
  if (v16 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v118, v11, 0);
  }
  else
  {
    if (v16 <= 0xFF)
      LODWORD(v17) = 0;
    else
      v17 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v16);
    v118 = (void *)(v17 & v11);
  }
  v18 = llvm::ConstantInt::get(v15, (llvm::LLVMContext *)&v118, v12);
  if (v119 >= 0x41 && v118)
    MEMORY[0x1CAA32F9C](v118, 0x1000C8000313F17);
  v19 = *(_QWORD *)(v4 + 2272);
  LOWORD(v121) = 257;
  v20 = sub_1C4773E38((uint64_t *)(v4 + 344), 49, (unsigned __int8 *)a2, v19, (uint64_t)&v118);
  v118 = v120;
  v120[0] = v13;
  v120[1] = v18;
  v121 = v20;
  v119 = 0x1000000003;
  v21 = *(_DWORD *)(v7 + 20);
  v22 = v21 & 0x7FFFFFF;
  v23 = v7 - 32 * v22;
  v24 = *(unsigned __int8 *)(v7 + 16);
  v112 = (uint64_t *)(v4 + 344);
  if (v24 == 84)
  {
    v25 = 0;
  }
  else if (v24 == 39)
  {
    v25 = (*(_DWORD *)(v7 + 80) + 1);
  }
  else
  {
    v25 = 2;
  }
  v26 = (uint64_t *)(v23 + 64);
  if (v21 < 0 && (v109 = *(_QWORD *)(v23 - 8), (v109 & 0xFFFFFFFF0) != 0))
    v27 = (*(_DWORD *)(v23 - 12) - *(_DWORD *)(v23 - v109));
  else
    v27 = 0;
  v28 = v7 - 32 * v25 - 32 * v27 - 32;
  v29 = v28 - (_QWORD)v26;
  v30 = ((v28 - (uint64_t)v26) >> 5) + 3;
  if (v30 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, (uint64_t)v120, v30, 8);
    v31 = v119;
    v32 = (uint64_t *)v118;
    v33 = v119;
  }
  else
  {
    v31 = 3;
    v32 = v120;
    v33 = 3;
  }
  if (v26 != (uint64_t *)v28)
  {
    v34 = &v32[v31];
    v35 = 32 * v22 - 32 * v25 - 32 * v27 - 96;
    do
    {
      v36 = *v26;
      v26 += 4;
      *v34++ = v36;
      v35 -= 32;
    }
    while (v35);
    v32 = (uint64_t *)v118;
  }
  LODWORD(v119) = v33 + (v29 >> 5);
  v37 = *(uint64_t ***)(a1 + 24);
  v38 = *(_QWORD *)(a1 + 32);
  v114 = 257;
  sub_1C4774778(v112, v37, v38, v32, v119, (uint64_t)v113, 0);
  v39 = 0;
  v40 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v4 + 392) = *(_QWORD *)(v40 + 40);
  *(_QWORD *)(v4 + 400) = v40 + 24;
  v41 = *(unsigned __int8 **)(v40 + 48);
  v113[0] = v41;
  if (v41)
  {
    llvm::MetadataTracking::track((uint64_t)v113, v41, 2);
    v39 = v113[0];
  }
  sub_1C4774EF4((uint64_t)v112, 0, (uint64_t)v39);
  if (v113[0])
    llvm::MetadataTracking::untrack((uint64_t)v113, v113[0]);
  if ((*(_WORD *)(a2 + 18) & 1) != 0)
    llvm::Function::BuildLazyArguments((llvm::Function *)a2);
  v42 = *(_QWORD *)(a2 + 88);
  v43 = *(_QWORD *)(v4 + 2120);
  v117 = 257;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 392) + 56) + 40) + 272, v43);
  v45 = v44;
  v46 = (char *)operator new(0x60uLL);
  v47 = v46;
  v48 = (llvm::Value *)(v46 + 32);
  *((_QWORD *)v46 + 2) = 0;
  *((_QWORD *)v46 + 3) = v46 + 32;
  v114 = 257;
  *((_QWORD *)v46 + 4) = v43;
  *((_QWORD *)v46 + 5) = 0;
  v49 = (uint64_t *)(v46 + 40);
  *((_WORD *)v46 + 24) = 60;
  *((_DWORD *)v46 + 13) = 1;
  *(_OWORD *)(v46 + 56) = 0u;
  *(_OWORD *)(v46 + 72) = 0u;
  *((_DWORD *)v46 + 22) = 0;
  *(_QWORD *)v46 = v42;
  *((_QWORD *)v46 + 1) = 0;
  if (v42)
  {
    v52 = *(_QWORD *)(v42 + 8);
    v51 = (_QWORD *)(v42 + 8);
    v50 = v52;
    *((_QWORD *)v46 + 1) = v52;
    if (v52)
      *(_QWORD *)(v50 + 16) = v46 + 8;
    *((_QWORD *)v46 + 2) = v51;
    *v51 = v46;
  }
  *((_WORD *)v46 + 25) = 2 * (v45 & 0x3F);
  v46[92] = 1;
  llvm::Value::setName((uint64_t ***)v46 + 4, (uint64_t)v113);
  (*(void (**)(_QWORD, llvm::Value *, uint64_t *, _QWORD, _QWORD))(**(_QWORD **)(v4 + 424) + 16))(*(_QWORD *)(v4 + 424), v48, v116, *(_QWORD *)(v4 + 392), *(_QWORD *)(v4 + 400));
  v53 = *(unsigned int *)(v4 + 352);
  if ((_DWORD)v53)
  {
    v74 = *(_QWORD *)(v4 + 344);
    v75 = v74 + 16 * v53;
    v76 = (unsigned __int8 **)(v47 + 80);
    do
    {
      v77 = *(_DWORD *)v74;
      v78 = *(unsigned __int8 **)(v74 + 8);
      if (v78)
      {
        if (!v77)
        {
          v115[0] = *(unsigned __int8 **)(v74 + 8);
          llvm::MetadataTracking::track((uint64_t)v115, v78, 2);
          v79 = *v76;
          goto LABEL_58;
        }
      }
      else
      {
        v79 = *v76;
        if (!*v76 && (v47[55] & 0x20) == 0)
          goto LABEL_55;
        if (!v77)
        {
          v115[0] = 0;
LABEL_58:
          if (v79)
            llvm::MetadataTracking::untrack((uint64_t)(v47 + 80), v79);
          v80 = v115[0];
          *v76 = v115[0];
          if (v80)
            llvm::MetadataTracking::retrack((uint64_t)v115, v80, (uint64_t)(v47 + 80));
          goto LABEL_55;
        }
      }
      llvm::Value::setMetadata(v48, *(_DWORD *)v74, (llvm::MDNode *)v78);
LABEL_55:
      v74 += 16;
    }
    while (v74 != v75);
  }
  v54 = *(_QWORD *)(a1 + 56);
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 392) + 56) + 40) + 272, *(_QWORD *)v48);
  v56 = v55;
  v57 = (char *)operator new(0x80uLL);
  v58 = v57;
  *((_DWORD *)v57 + 21) = *((_DWORD *)v57 + 21) & 0x38000000 | 2;
  *(_QWORD *)v57 = 0;
  *((_QWORD *)v57 + 2) = 0;
  *((_QWORD *)v57 + 1) = 0;
  *((_QWORD *)v57 + 5) = 0;
  *((_QWORD *)v57 + 6) = 0;
  *((_QWORD *)v57 + 4) = 0;
  *((_QWORD *)v57 + 8) = ***(_QWORD ***)v48 + 1576;
  v59 = (llvm::Value *)(v57 + 64);
  *((_QWORD *)v57 + 3) = v57 + 64;
  *((_QWORD *)v57 + 7) = v57 + 64;
  *((_QWORD *)v57 + 9) = 0;
  v57[80] = 61;
  v57[81] = 0;
  *((_DWORD *)v57 + 21) = 2;
  *(_OWORD *)(v57 + 88) = 0u;
  *(_OWORD *)(v57 + 104) = 0u;
  *((_DWORD *)v57 + 30) = 0;
  v60 = *v49;
  *(_QWORD *)v57 = v48;
  *((_QWORD *)v57 + 1) = v60;
  if (v60)
    *(_QWORD *)(v60 + 16) = v57 + 8;
  *((_QWORD *)v57 + 2) = v49;
  *v49 = (uint64_t)v57;
  *((_QWORD *)v57 + 4) = v54;
  if (v54)
  {
    v63 = *(_QWORD *)(v54 + 8);
    v62 = (_QWORD *)(v54 + 8);
    v61 = v63;
    *((_QWORD *)v57 + 5) = v63;
    if (v63)
      *(_QWORD *)(v61 + 16) = v57 + 40;
    *((_QWORD *)v57 + 6) = v62;
    *v62 = v57 + 32;
  }
  *((_WORD *)v57 + 41) = 2 * (v56 & 0x3F);
  v57[124] = 1;
  v114 = 257;
  (*(void (**)(_QWORD, llvm::Value *, unsigned __int8 **, _QWORD, _QWORD))(**(_QWORD **)(v4 + 424) + 16))(*(_QWORD *)(v4 + 424), v59, v113, *(_QWORD *)(v4 + 392), *(_QWORD *)(v4 + 400));
  v64 = *(unsigned int *)(v4 + 352);
  if ((_DWORD)v64)
  {
    v96 = *(_QWORD *)(v4 + 344);
    v97 = v96 + 16 * v64;
    v98 = (unsigned __int8 **)(v58 + 112);
    do
    {
      v99 = *(_DWORD *)v96;
      v100 = *(unsigned __int8 **)(v96 + 8);
      if (v100)
      {
        if (!v99)
        {
          v115[0] = *(unsigned __int8 **)(v96 + 8);
          llvm::MetadataTracking::track((uint64_t)v115, v100, 2);
          v101 = *v98;
          goto LABEL_91;
        }
      }
      else
      {
        v101 = *v98;
        if (!*v98 && (v58[87] & 0x20) == 0)
          goto LABEL_88;
        if (!v99)
        {
          v115[0] = 0;
LABEL_91:
          if (v101)
            llvm::MetadataTracking::untrack((uint64_t)(v58 + 112), v101);
          v102 = v115[0];
          *v98 = v115[0];
          if (v102)
            llvm::MetadataTracking::retrack((uint64_t)v115, v102, (uint64_t)(v58 + 112));
          goto LABEL_88;
        }
      }
      llvm::Value::setMetadata(v59, *(_DWORD *)v96, (llvm::MDNode *)v100);
LABEL_88:
      v96 += 16;
    }
    while (v96 != v97);
  }
  v65 = *(_QWORD *)(a1 + 64);
  if (!v65)
  {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v7 + 40) + 40, (uint64_t ***)v7);
    v66 = *(_QWORD *)(v7 + 24);
    v67 = *(_QWORD **)(v7 + 32);
    *v67 = v66;
    *(_QWORD *)(v66 + 8) = v67;
    *v111 = 0;
    *(_QWORD *)(v7 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v7);
    goto LABEL_41;
  }
  *(_QWORD *)(v4 + 392) = *(_QWORD *)(v65 + 40);
  *(_QWORD *)(v4 + 400) = v65 + 24;
  v81 = *(unsigned __int8 **)(v65 + 48);
  v113[0] = v81;
  if (v81)
  {
    llvm::MetadataTracking::track((uint64_t)v113, v81, 2);
    v82 = v113[0];
  }
  else
  {
    v82 = 0;
  }
  sub_1C4774EF4((uint64_t)v112, 0, (uint64_t)v82);
  if (v113[0])
    llvm::MetadataTracking::untrack((uint64_t)v113, v113[0]);
  v83 = *(_QWORD *)(a1 + 72);
  v116[0] = *(_QWORD *)(a1 + 16);
  v116[1] = v83;
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(v4, *(_QWORD *)(v4 + 336), 152);
  v85 = v84;
  v86 = 0;
  if (*(_BYTE *)(v85 + 16))
    v87 = 0;
  else
    v87 = v85;
  if (v87)
    v86 = *(uint64_t ***)(v87 + 24);
  v114 = 257;
  sub_1C4774778(v112, v86, v87, v116, 2, (uint64_t)v113, 0);
  *(int32x2_t *)&v88 = llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v7 + 40) + 40, (uint64_t ***)v7);
  v89 = *(_QWORD *)(v7 + 24);
  v90 = *(_QWORD **)(v7 + 32);
  *v90 = v89;
  *(_QWORD *)(v89 + 8) = v90;
  *v111 = 0;
  *(_QWORD *)(v7 + 32) = 0;
  v114 = 257;
  (*(void (**)(_QWORD, uint64_t, unsigned __int8 **, _QWORD, _QWORD, double))(**(_QWORD **)(v4 + 424) + 16))(*(_QWORD *)(v4 + 424), v7, v113, *(_QWORD *)(v4 + 392), *(_QWORD *)(v4 + 400), v88);
  v91 = *(unsigned int *)(v4 + 352);
  if ((_DWORD)v91)
  {
    v103 = *(_QWORD *)(v4 + 344);
    v104 = v103 + 16 * v91;
    do
    {
      v105 = *(_DWORD *)v103;
      v106 = *(unsigned __int8 **)(v103 + 8);
      if (v106)
      {
        if (!v105)
        {
          v115[0] = *(unsigned __int8 **)(v103 + 8);
          llvm::MetadataTracking::track((uint64_t)v115, v106, 2);
LABEL_108:
          v107 = (unsigned __int8 **)(v7 + 48);
          if (v115 == v110)
          {
            if (v115[0])
              llvm::MetadataTracking::untrack((uint64_t)v115, v115[0]);
          }
          else
          {
            if (*v110)
            {
              llvm::MetadataTracking::untrack((uint64_t)v110, *v110);
              v107 = (unsigned __int8 **)(v7 + 48);
            }
            v108 = v115[0];
            *v107 = v115[0];
            if (v108)
              llvm::MetadataTracking::retrack((uint64_t)v115, v108, (uint64_t)v110);
          }
          goto LABEL_105;
        }
      }
      else
      {
        if (!*v110 && (*(_BYTE *)(v7 + 23) & 0x20) == 0)
          goto LABEL_105;
        if (!v105)
        {
          v115[0] = 0;
          goto LABEL_108;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v7, v105, (llvm::MDNode *)v106);
LABEL_105:
      v103 += 16;
    }
    while (v103 != v104);
  }
  v92 = *(unsigned __int8 **)(a1 + 72);
  v115[0] = *(unsigned __int8 **)(a1 + 16);
  v115[1] = v92;
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(v4, *(_QWORD *)(v4 + 336), 153);
  if (*(_BYTE *)(v93 + 16))
    v94 = 0;
  else
    v94 = v93;
  if (v94)
    v95 = *(uint64_t ***)(v94 + 24);
  else
    v95 = 0;
  v114 = 257;
  sub_1C4774778(v112, v95, v94, (uint64_t *)v115, 2, (uint64_t)v113, 0);
LABEL_41:
  v68 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v68)
  {
    v69 = *(uint64_t **)(a1 + 80);
    v70 = 8 * v68;
    do
    {
      v71 = *v69++;
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v71 + 40) + 40, (uint64_t ***)v71);
      v72 = *(_QWORD *)(v71 + 24);
      v73 = *(_QWORD **)(v71 + 32);
      *v73 = v72;
      *(_QWORD *)(v72 + 8) = v73;
      *(_QWORD *)(v71 + 24) = 0;
      *(_QWORD *)(v71 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v71);
      v70 -= 8;
    }
    while (v70);
  }
  if (v118 != v120)
    free(v118);
}

void sub_1C54E8BF0()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C54E8C04(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E816D958;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C54E8C3C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E816D958;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C54E8C5C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 **v2;
  uint64_t v3;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  __int128 *v10;
  llvm::BasicBlock *SinglePredecessor;
  llvm::BasicBlock *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 **v33;
  __int16 v34;

  v5 = *(unsigned __int8 **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 + 40 == v6)
  {
    v3 = *(_QWORD *)(a1 + 16) + 344;
    v29 = v3;
    v10 = (__int128 *)(*(_QWORD *)(a1 + 16) + 392);
    v30 = *v10;
    v2 = &v31;
    llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)v3, &v31);
    if (v5)
    {
      sub_1C4D8AE2C(v3, (uint64_t)v5, v6);
    }
    else
    {
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v3 + 56) = 0;
    }
    SinglePredecessor = (llvm::BasicBlock *)llvm::BasicBlock::getSinglePredecessor((llvm::BasicBlock *)v5);
    v12 = (llvm::BasicBlock *)llvm::BasicBlock::getSinglePredecessor(SinglePredecessor);
    v13 = llvm::BasicBlock::getSinglePredecessor(v12);
    v14 = *(_QWORD *)(v13 + 40);
    if (v14 == v13 + 40)
    {
      v15 = 0;
    }
    else
    {
      if (v14)
        v15 = v14 - 24;
      else
        v15 = 0;
      if (*(unsigned __int8 *)(v15 + 16) - 29 >= 0xB)
        v15 = 0;
    }
    v16 = *(unsigned __int8 *)(v15 + 16);
    if (v16 != 30)
      __asm { BR              X11 }
    v17 = (uint64_t *)(v15 - 64);
    goto LABEL_17;
  }
  v7 = *(_QWORD *)(a1 + 8);
  v32 = *(unsigned __int8 **)a2;
  v33 = (unsigned __int8 **)v6;
  v8 = *(_QWORD *)(v7 + 24);
  if (v8)
    return (*(uint64_t (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v8 + 48))(v8, &v32);
  do
  {
    sub_1C485C2F0();
    v17 = (uint64_t *)(v28 - 32 * (v27 & 0x7FFFFFF) + 96);
LABEL_17:
    v18 = *v17;
    v19 = (char *)operator new(0x60uLL);
    *((_DWORD *)v19 + 13) = *((_DWORD *)v19 + 13) & 0x38000000 | 1;
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v19 + 2) = 0;
    *((_QWORD *)v19 + 1) = 0;
    *((_QWORD *)v19 + 4) = ***(_QWORD ***)v18 + 1576;
    *((_QWORD *)v19 + 3) = v19 + 32;
    *((_QWORD *)v19 + 5) = 0;
    v19[48] = 30;
    v19[49] = 0;
    *((_WORD *)v19 + 25) = 0;
    *((_DWORD *)v19 + 13) = 1;
    *(_OWORD *)(v19 + 56) = 0u;
    *(_OWORD *)(v19 + 72) = 0u;
    *((_DWORD *)v19 + 22) = 0;
    v20 = (_QWORD *)(v18 + 8);
    v21 = *(_QWORD *)(v18 + 8);
    *(_QWORD *)v19 = v18;
    *((_QWORD *)v19 + 1) = v21;
    if (v21)
      *(_QWORD *)(v21 + 16) = v19 + 8;
    *((_QWORD *)v19 + 2) = v20;
    *v20 = v19;
    v34 = 257;
    v22 = sub_1C4867F8C((uint64_t *)v3, (unsigned __int8 **)v19 + 4, (uint64_t)&v32);
    v23 = *(_QWORD *)(a1 + 8);
    v32 = v22[5];
    v33 = v22 + 3;
    v24 = *(_QWORD *)(v23 + 24);
  }
  while (!v24);
  (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v24 + 48))(v24, &v32);
  v25 = v29;
  if ((_QWORD)v30)
  {
    sub_1C4D8AE2C(v29, v30, *((uint64_t *)&v30 + 1));
    v25 = v29;
  }
  else
  {
    *(_QWORD *)(v29 + 48) = 0;
    *(_QWORD *)(v29 + 56) = 0;
  }
  v32 = v31;
  if (v31)
  {
    llvm::MetadataTracking::track((uint64_t)&v32, v31, 2);
    v26 = v32;
  }
  else
  {
    v26 = 0;
  }
  result = sub_1C4774EF4(v25, 0, (uint64_t)v26);
  if (v32)
    result = llvm::MetadataTracking::untrack((uint64_t)&v32, v32);
  if (v31)
    return llvm::MetadataTracking::untrack((uint64_t)v2, v31);
  return result;
}

void sub_1C54E8EE4()
{
  JUMPOUT(0x1C54E8D44);
}

void sub_1C54E8F3C(uint64_t *a1, llvm::BasicBlock *this, uint64_t a3, _QWORD ***a4)
{
  uint64_t v8;
  uint64_t SingleSuccessor;
  uint64_t SinglePredecessor;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  unsigned __int8 **v16;
  unsigned __int8 **v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  const llvm::APInt *v30;
  uint64_t v31;
  llvm::ConstantInt *v32;
  unint64_t v33;
  int v34;
  llvm::ConstantInt *v35;
  void (**v36)(void);
  llvm::BasicBlock *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  llvm::BasicBlock *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  __int16 v46;
  _QWORD v47[2];
  _QWORD v48[3];
  _QWORD *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v43 = *((_QWORD *)this + 7);
  SingleSuccessor = llvm::BasicBlock::getSingleSuccessor(this);
  SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(this);
  v11 = *(_QWORD *)(SinglePredecessor + 40);
  if (v11 == SinglePredecessor + 40)
  {
    v12 = 0;
  }
  else
  {
    if (v11)
      v12 = v11 - 24;
    else
      v12 = 0;
    if (*(unsigned __int8 *)(v12 + 16) - 29 >= 0xB)
      v12 = 0;
  }
  v13 = *(unsigned __int8 *)(v12 + 16);
  if (v13 != 30)
    __asm { BR              X11 }
  v14 = *(_QWORD *)(v12 - 64);
  v15 = (char *)operator new(0x48uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = ***a4 + 1576;
  *((_QWORD *)v15 + 2) = 0;
  v16 = (unsigned __int8 **)(v15 + 8);
  v15[24] = 31;
  v15[25] = 0;
  *((_WORD *)v15 + 13) = 0;
  *((_DWORD *)v15 + 7) = 0x40000000;
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  *((_DWORD *)v15 + 16) = 0;
  llvm::SwitchInst::init((uint64_t)(v15 + 8), (uint64_t)a4, SingleSuccessor, 0x16u);
  v46 = 257;
  v17 = sub_1C4867F8C((uint64_t *)(v8 + 344), v16, (uint64_t)&v44);
  v42 = this;
  if (this)
  {
    sub_1C4D8AE2C(v8 + 344, (uint64_t)this, a3);
  }
  else
  {
    *(_QWORD *)(v8 + 392) = 0;
    *(_QWORD *)(v8 + 400) = 0;
  }
  v18 = a1[1];
  v19 = *(_QWORD *)(v18 + 8);
  if (v19)
  {
    v20 = 0;
    v21 = *(_QWORD **)v18;
    v22 = (uint64_t *)(v43 + 72);
    v23 = 32 * v19;
    while (1)
    {
      v24 = (_QWORD *)v21[3];
      if (v24)
      {
        if (v21 == v24)
        {
          v49 = v48;
          (*(void (**)(_QWORD *, _QWORD *))(*v21 + 24))(v21, v48);
        }
        else
        {
          v49 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v24 + 16))(v24);
        }
      }
      else
      {
        v49 = 0;
      }
      v25 = **(_QWORD ***)(v8 + 336);
      v44 = (unint64_t)"omp_section_loop.body.case";
      v46 = 259;
      v26 = operator new();
      *(_QWORD *)v26 = *v25 + 1600;
      *(_QWORD *)(v26 + 8) = 0;
      v27 = *(_DWORD *)(v26 + 20) & 0xC0000000;
      *(_QWORD *)(v26 + 24) = 0;
      v28 = v26 + 24;
      *(_DWORD *)(v26 + 16) = 22;
      *(_DWORD *)(v26 + 20) = v27;
      *(_QWORD *)(v26 + 32) = 0;
      *(_QWORD *)(v26 + 40) = v26 + 40;
      *(_QWORD *)(v26 + 48) = v26 + 40;
      *(_QWORD *)(v26 + 56) = 0;
      if (v43)
      {
        llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v22, (_QWORD *)v26);
        v29 = *v22;
        *(_QWORD *)(v26 + 24) = *v22;
        *(_QWORD *)(v26 + 32) = v22;
        *(_QWORD *)(v29 + 8) = v28;
        *v22 = v28;
      }
      llvm::Value::setName((uint64_t ***)v26, (uint64_t)&v44);
      v31 = **(_QWORD **)(v8 + 408);
      v32 = *(llvm::ConstantInt **)(v31 + 1960);
      v33 = *(unsigned int *)(v31 + 1968);
      LODWORD(v45) = v33 >> 8;
      if (v33 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v44, v20, 0);
      }
      else
      {
        if (v33 <= 0xFF)
          v34 = 0;
        else
          v34 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v33);
        v44 = v34 & v20;
      }
      v35 = llvm::ConstantInt::get(v32, (llvm::LLVMContext *)&v44, v30);
      if (v45 >= 0x41 && v44)
        MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
      llvm::SwitchInst::addCase(v17, v35, (llvm::BasicBlock *)v26);
      *(_QWORD *)(v8 + 392) = v26;
      *(_QWORD *)(v8 + 400) = v26 + 40;
      v44 = 0;
      v45 = 0;
      v47[0] = v26;
      v47[1] = v26 + 40;
      if (!v49)
        sub_1C485C2F0();
      (*(void (**)(_QWORD *, unint64_t *, _QWORD *, uint64_t))(*v49 + 48))(v49, &v44, v47, v14);
      if (v49 == v48)
        break;
      if (v49)
      {
        v36 = (void (**)(void))(*v49 + 40);
LABEL_33:
        (*v36)();
      }
      v21 += 4;
      ++v20;
      v23 -= 32;
      if (!v23)
        goto LABEL_39;
    }
    v36 = (void (**)(void))(v48[0] + 32);
    goto LABEL_33;
  }
LABEL_39:
  v37 = (llvm::BasicBlock *)*((_QWORD *)v42 + 5);
  if (v37 == (llvm::BasicBlock *)((char *)v42 + 40))
  {
    v39 = 0;
  }
  else
  {
    if (v37)
      v38 = (char *)v37 - 24;
    else
      v38 = 0;
    if (v38[16] - 29 >= 0xB)
      v39 = 0;
    else
      v39 = v38;
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v39 + 5) + 40, (uint64_t ***)v39);
  v40 = *((_QWORD *)v39 + 3);
  v41 = (_QWORD *)*((_QWORD *)v39 + 4);
  *v41 = v40;
  *(_QWORD *)(v40 + 8) = v41;
  *((_QWORD *)v39 + 3) = 0;
  *((_QWORD *)v39 + 4) = 0;
  llvm::Value::deleteValue((llvm::Value *)v39);
}

void sub_1C54E9360()
{
  JUMPOUT(0x1C54E8FDCLL);
}

void sub_1C54E9378(uint64_t a1@<X8>)
{
  if ((*(_WORD *)(a1 + 18) & 1) == 0)
    JUMPOUT(0x1C54E8FE0);
  JUMPOUT(0x1C54E8FDCLL);
}

void sub_1C54E9388()
{
  JUMPOUT(0x1C54E8FDCLL);
}

void sub_1C54E93C8()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C54E93DC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E816D9A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C54E941C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E816D9A0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C54E9444(uint64_t a1, uint64_t a2)
{
  unsigned __int8 **v2;
  uint64_t v3;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  __int128 *v10;
  llvm::BasicBlock *SinglePredecessor;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned __int8 **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 **v32;
  __int16 v33;

  v5 = *(unsigned __int8 **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 + 40 == v6)
  {
    v3 = *(_QWORD *)(a1 + 16) + 344;
    v28 = v3;
    v10 = (__int128 *)(*(_QWORD *)(a1 + 16) + 392);
    v29 = *v10;
    v2 = &v30;
    llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)v3, &v30);
    if (v5)
    {
      sub_1C4D8AE2C(v3, (uint64_t)v5, v6);
    }
    else
    {
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v3 + 56) = 0;
    }
    SinglePredecessor = (llvm::BasicBlock *)llvm::BasicBlock::getSinglePredecessor(**(llvm::BasicBlock ***)(a1 + 24));
    v12 = llvm::BasicBlock::getSinglePredecessor(SinglePredecessor);
    v13 = *(_QWORD *)(v12 + 40);
    if (v13 == v12 + 40)
    {
      v14 = 0;
    }
    else
    {
      if (v13)
        v14 = v13 - 24;
      else
        v14 = 0;
      if (*(unsigned __int8 *)(v14 + 16) - 29 >= 0xB)
        v14 = 0;
    }
    v15 = *(unsigned __int8 *)(v14 + 16);
    if (v15 != 30)
      __asm { BR              X11 }
    v16 = (uint64_t *)(v14 - 64);
    goto LABEL_17;
  }
  v7 = *(_QWORD *)(a1 + 8);
  v31 = *(unsigned __int8 **)a2;
  v32 = (unsigned __int8 **)v6;
  v8 = *(_QWORD *)(v7 + 24);
  if (v8)
    return (*(uint64_t (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v8 + 48))(v8, &v31);
  do
  {
    sub_1C485C2F0();
    v16 = (uint64_t *)(v27 - 32 * (v26 & 0x7FFFFFF) + 96);
LABEL_17:
    v17 = *v16;
    v18 = (char *)operator new(0x60uLL);
    *((_DWORD *)v18 + 13) = *((_DWORD *)v18 + 13) & 0x38000000 | 1;
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 2) = 0;
    *((_QWORD *)v18 + 1) = 0;
    *((_QWORD *)v18 + 4) = ***(_QWORD ***)v17 + 1576;
    *((_QWORD *)v18 + 3) = v18 + 32;
    *((_QWORD *)v18 + 5) = 0;
    v18[48] = 30;
    v18[49] = 0;
    *((_WORD *)v18 + 25) = 0;
    *((_DWORD *)v18 + 13) = 1;
    *(_OWORD *)(v18 + 56) = 0u;
    *(_OWORD *)(v18 + 72) = 0u;
    *((_DWORD *)v18 + 22) = 0;
    v19 = (_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 8);
    *(_QWORD *)v18 = v17;
    *((_QWORD *)v18 + 1) = v20;
    if (v20)
      *(_QWORD *)(v20 + 16) = v18 + 8;
    *((_QWORD *)v18 + 2) = v19;
    *v19 = v18;
    v33 = 257;
    v21 = sub_1C4867F8C((uint64_t *)v3, (unsigned __int8 **)v18 + 4, (uint64_t)&v31);
    v22 = *(_QWORD *)(a1 + 8);
    v31 = v21[5];
    v32 = v21 + 3;
    v23 = *(_QWORD *)(v22 + 24);
  }
  while (!v23);
  (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v23 + 48))(v23, &v31);
  v24 = v28;
  if ((_QWORD)v29)
  {
    sub_1C4D8AE2C(v28, v29, *((uint64_t *)&v29 + 1));
    v24 = v28;
  }
  else
  {
    *(_QWORD *)(v28 + 48) = 0;
    *(_QWORD *)(v28 + 56) = 0;
  }
  v31 = v30;
  if (v30)
  {
    llvm::MetadataTracking::track((uint64_t)&v31, v30, 2);
    v25 = v31;
  }
  else
  {
    v25 = 0;
  }
  result = sub_1C4774EF4(v24, 0, (uint64_t)v25);
  if (v31)
    result = llvm::MetadataTracking::untrack((uint64_t)&v31, v31);
  if (v30)
    return llvm::MetadataTracking::untrack((uint64_t)v2, v30);
  return result;
}

void sub_1C54E96CC()
{
  JUMPOUT(0x1C54E952CLL);
}

uint64_t sub_1C54E9724(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _WORD v22[20];
  _BYTE v23[32];
  __int16 v24;

  v6 = *a1;
  v7 = (uint64_t *)(*a1 + 344);
  if (a2)
  {
    sub_1C4D8AE2C(*a1 + 344, a2, a3);
  }
  else
  {
    *(_QWORD *)(v6 + 392) = 0;
    *(_QWORD *)(v6 + 400) = 0;
  }
  v8 = a1[1];
  v24 = 257;
  v9 = (_QWORD *)sub_1C4EC4040((uint64_t)v7, a4, v8, (uint64_t)v23, 0, 0);
  v10 = a1[2];
  v22[16] = 257;
  v11 = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v6 + 416) + 16))(*(_QWORD *)(v6 + 416), v9, v10, 0, 0);
  if (!v11)
  {
    v24 = 257;
    v12 = (char *)operator new(0x80uLL);
    *((_QWORD *)v12 + 5) = 0;
    v13 = v12 + 40;
    *((_QWORD *)v12 + 6) = 0;
    *((_QWORD *)v12 + 8) = *v9;
    v14 = (uint64_t)(v12 + 64);
    *((_QWORD *)v12 + 3) = v12 + 64;
    *((_QWORD *)v12 + 7) = v12 + 64;
    *((_QWORD *)v12 + 9) = 0;
    v12[80] = 41;
    v12[81] = 0;
    *((_WORD *)v12 + 41) = 0;
    *((_DWORD *)v12 + 21) = 2;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_OWORD *)(v12 + 104) = 0u;
    *((_DWORD *)v12 + 30) = 0;
    *(_QWORD *)v12 = v9;
    v17 = v9[1];
    v16 = v9 + 1;
    v15 = v17;
    *((_QWORD *)v12 + 1) = v17;
    if (v17)
      *(_QWORD *)(v15 + 16) = v12 + 8;
    *((_QWORD *)v12 + 2) = v16;
    *v16 = v12;
    *((_QWORD *)v12 + 4) = v10;
    if (v10)
    {
      v20 = *(_QWORD *)(v10 + 8);
      v19 = (_QWORD *)(v10 + 8);
      v18 = v20;
      *v13 = v20;
      if (v20)
        *(_QWORD *)(v18 + 16) = v13;
      *((_QWORD *)v12 + 6) = v19;
      *v19 = v12 + 32;
    }
    llvm::Value::setName((uint64_t ***)v12 + 8, (uint64_t)v23);
    v11 = sub_1C4773754(v7, v14, (uint64_t)v22);
  }
  return ((uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t))a1[3])(a1[4], *(_QWORD *)(v6 + 392), *(_QWORD *)(v6 + 400), v11);
}

uint64_t sub_1C54E9898(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t result;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char v29[32];
  __int16 v30;
  unsigned __int8 *v31;
  char v32[32];
  __int16 v33;

  v4 = *a1;
  v5 = (uint64_t *)(*a1 + 344);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1[1] + 8) + 40);
  if (v6)
    v7 = v6 - 24;
  else
    v7 = 0;
  if (*(unsigned __int8 *)(v7 + 16) - 29 >= 0xB)
    v7 = 0;
  v8 = *(_QWORD *)(v7 - 32);
  v9 = v8 + 40;
  for (i = *(_QWORD *)(v8 + 48); i != v9; i = *(_QWORD *)(i + 8))
  {
    v11 = i - 24;
    if (!i)
      v11 = 0;
    if (*(_BYTE *)(v11 + 16) != 83)
    {
      v12 = *(unsigned __int8 *)(i - 8) - 38;
      v13 = v12 > 0x38;
      v14 = (1 << v12) & 0x100060000000001;
      if (v13 || v14 == 0)
        v9 = i;
      else
        v9 = *(_QWORD *)(i + 8);
      break;
    }
  }
  sub_1C4D8AE2C(*a1 + 344, v8, v9);
  v16 = *(unsigned __int8 **)a1[2];
  v31 = v16;
  if (v16)
  {
    llvm::MetadataTracking::track((uint64_t)&v31, v16, 2);
    v17 = v31;
  }
  else
  {
    v17 = 0;
  }
  sub_1C4774EF4((uint64_t)v5, 0, (uint64_t)v17);
  if (v31)
    llvm::MetadataTracking::untrack((uint64_t)&v31, v31);
  v18 = *(_QWORD *)a1[3];
  v30 = 257;
  result = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v4 + 416) + 16))(*(_QWORD *)(v4 + 416), a2, v18, 0, 0);
  if (!result)
  {
    v33 = 257;
    v20 = (char *)operator new(0x80uLL);
    *((_QWORD *)v20 + 8) = *a2;
    v21 = (uint64_t)(v20 + 64);
    *((_QWORD *)v20 + 3) = v20 + 64;
    *((_QWORD *)v20 + 5) = 0;
    v22 = v20 + 40;
    *((_QWORD *)v20 + 6) = 0;
    *((_QWORD *)v20 + 7) = v20 + 64;
    *((_QWORD *)v20 + 9) = 0;
    *((_QWORD *)v20 + 10) = 0x200000029;
    *(_OWORD *)(v20 + 88) = 0u;
    *(_OWORD *)(v20 + 104) = 0u;
    *((_DWORD *)v20 + 30) = 0;
    *(_QWORD *)v20 = a2;
    v25 = a2[1];
    v24 = a2 + 1;
    v23 = v25;
    *((_QWORD *)v20 + 1) = v25;
    if (v25)
      *(_QWORD *)(v23 + 16) = v20 + 8;
    *((_QWORD *)v20 + 2) = v24;
    *v24 = v20;
    *((_QWORD *)v20 + 4) = v18;
    if (v18)
    {
      v28 = *(_QWORD *)(v18 + 8);
      v27 = (_QWORD *)(v18 + 8);
      v26 = v28;
      *v22 = v28;
      if (v28)
        *(_QWORD *)(v26 + 16) = v22;
      *((_QWORD *)v20 + 6) = v27;
      *v27 = v20 + 32;
    }
    llvm::Value::setName((uint64_t ***)v20 + 8, (uint64_t)v32);
    return sub_1C4773754(v5, v21, (uint64_t)v29);
  }
  return result;
}

_QWORD **sub_1C54E9A90(_QWORD **result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  **result = a4;
  return result;
}

uint64_t sub_1C54E9A9C(_QWORD **a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _WORD v19[20];
  _BYTE v20[32];
  __int16 v21;

  v2 = (uint64_t)*a1;
  v3 = *a1 + 43;
  v4 = *(_QWORD *)(*(_QWORD *)(*a1[1] + 8) + 40);
  if (v4)
    v5 = v4 - 24;
  else
    v5 = 0;
  if (*(unsigned __int8 *)(v5 + 16) - 29 >= 0xB)
    v5 = 0;
  v6 = *(_QWORD *)(v5 - 32);
  if (v6)
  {
    sub_1C4D8AE2C((uint64_t)(*a1 + 43), v6, *(_QWORD *)(v6 + 48));
  }
  else
  {
    *(_QWORD *)(v2 + 392) = 0;
    *(_QWORD *)(v2 + 400) = 0;
  }
  v7 = (_QWORD *)*a1[2];
  v8 = *a1[3];
  v19[16] = 257;
  result = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v2 + 416) + 16))(*(_QWORD *)(v2 + 416), v7, v8, 0, 0);
  if (!result)
  {
    v21 = 257;
    v10 = (char *)operator new(0x80uLL);
    *((_QWORD *)v10 + 5) = 0;
    v11 = v10 + 40;
    *((_QWORD *)v10 + 6) = 0;
    *((_QWORD *)v10 + 8) = *v7;
    v12 = (uint64_t)(v10 + 64);
    *((_QWORD *)v10 + 3) = v10 + 64;
    *((_QWORD *)v10 + 7) = v10 + 64;
    *((_QWORD *)v10 + 9) = 0;
    v10[80] = 41;
    v10[81] = 0;
    *((_WORD *)v10 + 41) = 0;
    *((_DWORD *)v10 + 21) = 2;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *((_DWORD *)v10 + 30) = 0;
    *(_QWORD *)v10 = v7;
    v15 = v7[1];
    v14 = v7 + 1;
    v13 = v15;
    *((_QWORD *)v10 + 1) = v15;
    if (v15)
      *(_QWORD *)(v13 + 16) = v10 + 8;
    *((_QWORD *)v10 + 2) = v14;
    *v14 = v10;
    *((_QWORD *)v10 + 4) = v8;
    if (v8)
    {
      v18 = *(_QWORD *)(v8 + 8);
      v17 = (_QWORD *)(v8 + 8);
      v16 = v18;
      *v11 = v18;
      if (v18)
        *(_QWORD *)(v16 + 16) = v11;
      *((_QWORD *)v10 + 6) = v17;
      *v17 = v10 + 32;
    }
    llvm::Value::setName((uint64_t ***)v10 + 8, (uint64_t)v20);
    return sub_1C4773754(v3, v12, (uint64_t)v19);
  }
  return result;
}

uint64_t sub_1C54E9C0C()
{
  uint64_t v1;
  uint64_t *v2;
  __n128 v3;
  int v4;

  LODWORD(v1) = 1;
  v3.n128_u64[0] = (unint64_t)"Use optimistic attributes describing 'as-if' properties of runtime calls.";
  v3.n128_u64[1] = 73;
  LOBYTE(v4) = 0;
  v2 = (uint64_t *)&v4;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED805808, "openmp-ir-builder-optimistic-attributes", &v1, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED805808, &dword_1C475E000);
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Factor for the unroll threshold to account for code simplifications still taking place";
  v3.n128_u64[1] = 86;
  v1 = 0x3FF8000000000000;
  v2 = &v1;
  sub_1C626DC2C(&v4, (__int128 *)&v3, (double **)&v2);
  return __cxa_atexit((void (*)(void *))sub_1C4DB7184, &qword_1ED8058C8, &dword_1C475E000);
}

void sub_1C54E9CDC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED8310E8);
  if (v1 != -1)
  {
    v4[0] = sub_1C54E9D40;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED8310E8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C54E9D40(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Analysis containing CSE Info";
  *(_QWORD *)(v2 + 8) = 28;
  *(_QWORD *)(v2 + 16) = "cseinfo";
  *(_QWORD *)(v2 + 24) = 7;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F7108;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C626E334;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t *sub_1C54E9DD4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;

  v4 = *(_QWORD *)(a2 + 24);
  v5 = *a1;
  v6 = *(unsigned int *)(*a1 + 8);
  if (v6 >= *(_DWORD *)(*a1 + 12))
  {
    v19 = *(_QWORD *)(a2 + 24);
    llvm::SmallVectorBase<unsigned int>::grow_pod(*a1, v5 + 16, v6 + 1, 4);
    v4 = v19;
    LODWORD(v6) = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v5 + 4 * v6) = v4;
  v7 = *(_DWORD *)(v5 + 12);
  v8 = (*(_DWORD *)(v5 + 8) + 1);
  *(_DWORD *)(v5 + 8) = v8;
  if (v8 >= v7)
  {
    v20 = HIDWORD(v4);
    llvm::SmallVectorBase<unsigned int>::grow_pod(v5, v5 + 16, v8 + 1, 4);
    HIDWORD(v4) = v20;
    LODWORD(v8) = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v5 + 4 * v8) = HIDWORD(v4);
  ++*(_DWORD *)(v5 + 8);
  v9 = **(unsigned __int16 **)(a2 + 16);
  v10 = *a1;
  v11 = *(unsigned int *)(*a1 + 8);
  if (v11 >= *(_DWORD *)(*a1 + 12))
  {
    v21 = **(unsigned __int16 **)(a2 + 16);
    llvm::SmallVectorBase<unsigned int>::grow_pod(*a1, v10 + 16, v11 + 1, 4);
    v9 = v21;
    LODWORD(v11) = *(_DWORD *)(v10 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v10 + 4 * v11) = v9;
  ++*(_DWORD *)(v10 + 8);
  v12 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD *)(a2 + 32);
    v14 = 32 * v12;
    do
    {
      sub_1C54EACF0(a1, v13);
      v13 += 32;
      v14 -= 32;
    }
    while (v14);
  }
  v15 = *(unsigned __int16 *)(a2 + 44);
  if (*(_WORD *)(a2 + 44))
  {
    v17 = *a1;
    v18 = *(unsigned int *)(*a1 + 8);
    if (v18 >= *(_DWORD *)(*a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(*a1, v17 + 16, v18 + 1, 4);
      LODWORD(v18) = *(_DWORD *)(v17 + 8);
    }
    *(_DWORD *)(*(_QWORD *)v17 + 4 * v18) = v15;
    ++*(_DWORD *)(v17 + 8);
  }
  return a1;
}

uint64_t sub_1C54E9F54(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)a1 = &off_1E816DAA8;
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 336), 4);
  sub_1C54EB26C(a1 + 232);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 208), 8);
  v2 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  llvm::FoldingSetBase::~FoldingSetBase((void **)(a1 + 168));
  sub_1C4926AE8(a1 + 72);
  *(_QWORD *)a1 = off_1E7FA1810;
  v3 = *(void **)(a1 + 16);
  if (v3 != *(void **)(a1 + 8))
    free(v3);
  return a1;
}

uint64_t *sub_1C54E9FF0(int32x2_t *a1, uint64_t *a2, uint64_t a3)
{
  __int32 i;
  uint64_t v7;
  __int32 v8;
  unsigned int v9;
  uint64_t v10;
  int32x2_t v11;
  uint64_t v12;
  int32x2_t v13;
  uint64_t *v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t *result;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t *v24;
  unsigned __int32 v25;
  uint64_t v26;
  __int32 v27;
  int32x2_t v28;
  __int32 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[2];
  void *v38;
  uint64_t v39;
  _QWORD v40[17];

  v40[16] = *MEMORY[0x1E0C80C00];
  if (!a1[45].i8[0])
  {
    a1[45].i8[0] = 1;
    for (i = a1[40].i32[0]; i; i = a1[40].i32[0])
    {
      v25 = a1[30].u32[0];
      do
        v26 = *(_QWORD *)(*(_QWORD *)&a1[29] - 8 + 8 * v25--);
      while (!v26);
      a1[30].i32[0] = v25;
      v27 = a1[41].i32[0];
      if (v27)
      {
        v28 = a1[39];
        v29 = v27 - 1;
        LODWORD(v30) = (v27 - 1) & ((v26 >> 4) ^ (v26 >> 9));
        v31 = (uint64_t *)(*(_QWORD *)&v28 + 16 * v30);
        v32 = *v31;
        if (v26 == *v31)
        {
LABEL_35:
          *v31 = -8192;
          a1[40].i32[0] = i - 1;
          ++a1[40].i32[1];
        }
        else
        {
          v33 = 1;
          while (v32 != -4096)
          {
            v34 = v30 + v33++;
            v30 = v34 & v29;
            v32 = *(_QWORD *)(*(_QWORD *)&v28 + 16 * v30);
            if (v26 == v32)
            {
              v31 = (uint64_t *)(*(_QWORD *)&v28 + 16 * v30);
              goto LABEL_35;
            }
          }
        }
      }
      sub_1C54EA4B0(a1, v26);
    }
    a1[45].i8[0] = 0;
  }
  v7 = (uint64_t)&a1[21];
  if (a3)
  {
    v8 = a1[22].i32[0];
    v9 = a1[22].i32[1] + 1;
    if (v9 > 2 * v8)
    {
      llvm::FoldingSetBase::GrowBucketCount(v7, 2 * v8, (uint64_t)off_1E816DAD8);
      v39 = 0x2000000000;
      v35 = a2[1];
      v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 24) + 32) + 40);
      v37[0] = (uint64_t)&v38;
      v37[1] = v36;
      v38 = v40;
      sub_1C54E9DD4(v37, v35);
      a3 = *(_QWORD *)&a1[21]
         + 8 * ((a1[22].i32[0] - 1) & sub_1C4F5AB38(v38, (uint64_t)v38 + 4 * v39));
      if (v38 != v40)
        free(v38);
      v9 = a1[22].i32[1] + 1;
    }
    a1[22].i32[1] = v9;
    v10 = *(_QWORD *)a3;
    if (!*(_QWORD *)a3)
      v10 = a3 | 1;
    *a2 = v10;
    *(_QWORD *)a3 = a2;
LABEL_9:
    v13 = a1[26];
    v12 = (uint64_t)&a1[26];
    v11 = v13;
    v14 = a2 + 1;
    v15 = *(_DWORD *)(v12 + 16);
    if (v15)
    {
      v16 = v15 - 1;
      v17 = ((*v14 >> 4) ^ (*v14 >> 9)) & v16;
      result = (uint64_t *)(*(_QWORD *)&v11 + 16 * v17);
      v19 = *result;
      if (*v14 == *result)
      {
LABEL_24:
        result[1] = (uint64_t)a2;
        return result;
      }
      v20 = 0;
      v21 = 1;
      while (v19 != -4096)
      {
        if (v20)
          v22 = 0;
        else
          v22 = v19 == -8192;
        if (v22)
          v20 = result;
        v23 = v17 + v21++;
        v17 = v23 & v16;
        result = (uint64_t *)(*(_QWORD *)&v11 + 16 * v17);
        v19 = *result;
        if (*v14 == *result)
          goto LABEL_24;
      }
      if (v20)
        v24 = v20;
      else
        v24 = result;
    }
    else
    {
      v24 = 0;
    }
    result = sub_1C5440874(v12, (uint64_t)(a2 + 1), a2 + 1, v24);
    *result = *v14;
    result[1] = 0;
    goto LABEL_24;
  }
  result = llvm::FoldingSetBase::GetOrInsertNode(v7, a2, (uint64_t)off_1E816DAD8);
  if (result == a2)
    goto LABEL_9;
  return result;
}

uint64_t sub_1C54EA288(int32x2_t *a1, const void **a2, uint64_t a3, _QWORD *a4)
{
  __int32 i;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned __int32 v17;
  uint64_t v18;
  __int32 v19;
  int32x2_t v20;
  __int32 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27[2];
  void *__s1;
  uint64_t v29;
  _QWORD v30[17];

  v30[16] = *MEMORY[0x1E0C80C00];
  if (!a1[45].i8[0])
  {
    a1[45].i8[0] = 1;
    for (i = a1[40].i32[0]; i; i = a1[40].i32[0])
    {
      v17 = a1[30].u32[0];
      do
        v18 = *(_QWORD *)(*(_QWORD *)&a1[29] - 8 + 8 * v17--);
      while (!v18);
      a1[30].i32[0] = v17;
      v19 = a1[41].i32[0];
      if (v19)
      {
        v20 = a1[39];
        v21 = v19 - 1;
        LODWORD(v22) = (v19 - 1) & ((v18 >> 4) ^ (v18 >> 9));
        v23 = (uint64_t *)(*(_QWORD *)&v20 + 16 * v22);
        v24 = *v23;
        if (v18 == *v23)
        {
LABEL_30:
          *v23 = -8192;
          a1[40].i32[0] = i - 1;
          ++a1[40].i32[1];
        }
        else
        {
          v25 = 1;
          while (v24 != -4096)
          {
            v26 = v22 + v25++;
            v22 = v26 & v21;
            v24 = *(_QWORD *)(*(_QWORD *)&v20 + 16 * v22);
            if (v18 == v24)
            {
              v23 = (uint64_t *)(*(_QWORD *)&v20 + 16 * v22);
              goto LABEL_30;
            }
          }
        }
      }
      sub_1C54EA4B0(a1, v18);
    }
    a1[45].i8[0] = 0;
  }
  v9 = (_QWORD *)(*(_QWORD *)&a1[21]
                + 8
                * ((a1[22].i32[0] - 1) & sub_1C4F5AB38(*a2, (uint64_t)*a2 + 4 * *((unsigned int *)a2 + 2))));
  v10 = (_QWORD *)*v9;
  *a4 = 0;
  __s1 = v30;
  v29 = 0x2000000000;
  if (v10)
    v11 = (v10 & 1) == 0;
  else
    v11 = 0;
  if (v11)
  {
    while (1)
    {
      v12 = v10[1];
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 32) + 40);
      v27[0] = (uint64_t)&__s1;
      v27[1] = v13;
      sub_1C54E9DD4(v27, v12);
      v14 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v14 == (_DWORD)v29)
      {
        v15 = __s1;
        if (!memcmp(__s1, *a2, 4 * v14))
          break;
      }
      LODWORD(v29) = 0;
      v10 = (_QWORD *)*v10;
      if (!v10 || (v10 & 1) != 0)
      {
        v15 = __s1;
        goto LABEL_14;
      }
    }
  }
  else
  {
    v15 = v30;
LABEL_14:
    v10 = 0;
    *a4 = v9;
  }
  if (v15 != v30)
    free(v15);
  if (!v10)
    return 0;
  if (*(_QWORD *)(v10[1] + 24) == a3)
    return v10[1];
  return 0;
}

uint64_t sub_1C54EA4B0(int32x2_t *a1, uint64_t a2)
{
  int32x2_t v4;
  __int32 v5;
  unsigned int v6;
  __int32 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  int32x2_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;

  v26 = a2;
  v4 = a1[26];
  v5 = a1[28].i32[0];
  v6 = a2 >> 4;
  if (!v5)
    goto LABEL_7;
  v7 = v5 - 1;
  v8 = (v5 - 1) & (v6 ^ (a2 >> 9));
  v9 = *(_QWORD *)(*(_QWORD *)&v4 + 16 * v8);
  if (v9 != a2)
  {
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v8 + v10++;
      v8 = v11 & v7;
      v9 = *(_QWORD *)(*(_QWORD *)&v4 + 16 * v8);
      if (v9 == a2)
        goto LABEL_6;
    }
LABEL_7:
    v14 = a1[39];
    v15 = a1[41].u32[0];
    if ((_DWORD)v15)
    {
      LODWORD(v16) = (v15 - 1) & (v6 ^ (a2 >> 9));
      v17 = *(_QWORD *)&v14 + 16 * v16;
      v18 = *(_QWORD *)v17;
      if (*(_QWORD *)v17 == a2)
      {
LABEL_14:
        if (v17 != *(_QWORD *)&v14 + 16 * v15)
        {
          *(_QWORD *)(*(_QWORD *)&a1[29] + 8 * *(unsigned int *)(v17 + 8)) = 0;
          *(_QWORD *)v17 = -8192;
          a1[40] = vadd_s32(a1[40], (int32x2_t)0x1FFFFFFFFLL);
        }
        v21 = (_QWORD *)sub_1C484358C((uint64_t)&a1[9], 16, 3);
        *v21 = 0;
        v21[1] = a2;
        return sub_1C54E9FF0(a1);
      }
      v19 = 1;
      while (v18 != -4096)
      {
        v20 = v16 + v19++;
        v16 = v20 & (v15 - 1);
        v18 = *(_QWORD *)(*(_QWORD *)&v14 + 16 * v16);
        if (v18 == a2)
        {
          v17 = *(_QWORD *)&v14 + 16 * v16;
          goto LABEL_14;
        }
      }
    }
    v17 = *(_QWORD *)&v14 + 16 * v15;
    goto LABEL_14;
  }
LABEL_6:
  v12 = *(_QWORD *)&v4 + 16 * v8;
  v13 = *(_QWORD **)(v12 + 8);
  if (!v13)
    goto LABEL_7;
  v23 = (uint64_t)&a1[26];
  v25 = *(_QWORD **)(v12 + 8);
  llvm::FoldingSetBase::RemoveNode((uint64_t)&a1[21], v13);
  v27 = 0;
  if (sub_1C4926528(v23, &v26, &v27))
  {
    *v27 = -8192;
    a1[27] = vadd_s32(a1[27], (int32x2_t)0x1FFFFFFFFLL);
  }
  v24 = v26;
  *v25 = 0;
  v25[1] = v24;
  return sub_1C54E9FF0(a1);
}

int32x2_t sub_1C54EA660(int32x2_t *a1, uint64_t a2)
{
  __int32 v4;
  unsigned int v5;
  int32x2_t v6;
  unsigned int v7;
  __int32 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  _QWORD *v13;
  int32x2_t result;
  __int32 v15;
  int32x2_t v16;
  __int32 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  int32x2_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;

  v4 = a1[28].i32[0];
  v5 = a2 >> 4;
  if (v4)
  {
    v6 = a1[26];
    v7 = v5 ^ (a2 >> 9);
    v8 = v4 - 1;
    v9 = (v4 - 1) & v7;
    v10 = *(_QWORD *)(*(_QWORD *)&v6 + 16 * v9);
    if (v10 == a2)
    {
LABEL_6:
      v13 = *(_QWORD **)(*(_QWORD *)&v6 + 16 * v9 + 8);
      if (v13)
      {
        llvm::FoldingSetBase::RemoveNode((uint64_t)&a1[21], v13);
        v15 = a1[28].i32[0];
        if (v15)
        {
          v16 = a1[26];
          v17 = v15 - 1;
          LODWORD(v18) = (v15 - 1) & v7;
          v19 = (uint64_t *)(*(_QWORD *)&v16 + 16 * v18);
          v20 = *v19;
          if (*v19 == a2)
          {
LABEL_13:
            *v19 = -8192;
            result = vadd_s32(a1[27], (int32x2_t)0x1FFFFFFFFLL);
            a1[27] = result;
          }
          else
          {
            v21 = 1;
            while (v20 != -4096)
            {
              v22 = v18 + v21++;
              v18 = v22 & v17;
              v20 = *(_QWORD *)(*(_QWORD *)&v16 + 16 * v18);
              if (v20 == a2)
              {
                v19 = (uint64_t *)(*(_QWORD *)&v16 + 16 * v18);
                goto LABEL_13;
              }
            }
          }
        }
      }
    }
    else
    {
      v11 = 1;
      while (v10 != -4096)
      {
        v12 = v9 + v11++;
        v9 = v12 & v8;
        v10 = *(_QWORD *)(*(_QWORD *)&v6 + 16 * v9);
        if (v10 == a2)
          goto LABEL_6;
      }
    }
  }
  v23 = a1[39];
  v24 = a1[41].u32[0];
  if ((_DWORD)v24)
  {
    LODWORD(v25) = (v24 - 1) & (v5 ^ (a2 >> 9));
    v26 = *(_QWORD *)&v23 + 16 * v25;
    v27 = *(_QWORD *)v26;
    if (*(_QWORD *)v26 == a2)
      goto LABEL_21;
    v28 = 1;
    while (v27 != -4096)
    {
      v29 = v25 + v28++;
      v25 = v29 & (v24 - 1);
      v27 = *(_QWORD *)(*(_QWORD *)&v23 + 16 * v25);
      if (v27 == a2)
      {
        v26 = *(_QWORD *)&v23 + 16 * v25;
        goto LABEL_21;
      }
    }
  }
  v26 = *(_QWORD *)&v23 + 16 * v24;
LABEL_21:
  if (v26 != *(_QWORD *)&v23 + 16 * v24)
  {
    *(_QWORD *)(*(_QWORD *)&a1[29] + 8 * *(unsigned int *)(v26 + 8)) = 0;
    *(_QWORD *)v26 = -8192;
    result = vadd_s32(a1[40], (int32x2_t)0x1FFFFFFFFLL);
    a1[40] = result;
  }
  return result;
}

_DWORD *sub_1C54EA7F4(uint64_t a1, uint64_t a2)
{
  _DWORD *result;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  result = (_DWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 200) + 16))(*(_QWORD *)(a1 + 200), **(unsigned __int16 **)(a2 + 16));
  if ((_DWORD)result)
  {
    v19 = a2;
    v5 = *(_DWORD *)(a1 + 240);
    v6 = *(_DWORD *)(a1 + 328);
    if (v6)
    {
      v7 = *(_QWORD *)(a1 + 312);
      v8 = v6 - 1;
      v9 = v8 & ((a2 >> 4) ^ (a2 >> 9));
      v10 = (_QWORD *)(v7 + 16 * v9);
      v11 = *v10;
      if (*v10 == a2)
        return result;
      v12 = 0;
      v13 = 1;
      while (v11 != -4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == -8192;
        if (v14)
          v12 = v10;
        v15 = v9 + v13++;
        v9 = v15 & v8;
        v10 = (_QWORD *)(v7 + 16 * v9);
        v11 = *v10;
        if (*v10 == a2)
          return result;
      }
      if (v12)
        v16 = v12;
      else
        v16 = v10;
    }
    else
    {
      v16 = 0;
    }
    result = sub_1C48BE074(a1 + 312, (uint64_t)&v19, &v19, v16);
    *(_QWORD *)result = v19;
    result[2] = v5;
    v17 = v19;
    v18 = *(unsigned int *)(a1 + 240);
    if (v18 >= *(_DWORD *)(a1 + 244))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 232, a1 + 248, v18 + 1, 8);
      LODWORD(v18) = *(_DWORD *)(a1 + 240);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * v18) = v17;
    ++*(_DWORD *)(a1 + 240);
  }
  return result;
}

uint64_t sub_1C54EA924(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2);
}

uint64_t sub_1C54EA960(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

uint64_t *sub_1C54EA96C(uint64_t *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t *v14;

  result[23] = a2[5];
  result[24] = (uint64_t)a2;
  v2 = a2 + 40;
  v3 = (_QWORD *)a2[41];
  if (v3 != a2 + 40)
  {
    v4 = result;
    v5 = (uint64_t)(result + 9);
    while (v3 + 6 == (_QWORD *)(v3[6] & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_21:
      v3 = (_QWORD *)v3[1];
      if (v3 == v2)
        return result;
    }
    for (i = v3[7]; ; i = *(_QWORD *)(i + 8))
    {
      if ((_QWORD *)i == v3 + 6)
        goto LABEL_21;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4[25] + 16))(v4[25], **(unsigned __int16 **)(i + 16));
      if (!(_DWORD)result)
      {
LABEL_7:
        if ((*(_BYTE *)i & 4) != 0)
          continue;
        goto LABEL_8;
      }
      v7 = v4[39];
      v8 = *((unsigned int *)v4 + 82);
      if ((_DWORD)v8)
      {
        LODWORD(v9) = (v8 - 1) & ((i >> 4) ^ (i >> 9));
        v10 = (uint64_t *)(v7 + 16 * v9);
        v11 = *v10;
        if (*v10 == i)
          goto LABEL_17;
        v12 = 1;
        while (v11 != -4096)
        {
          v13 = v9 + v12++;
          v9 = v13 & (v8 - 1);
          v11 = *(_QWORD *)(v7 + 16 * v9);
          if (v11 == i)
          {
            v10 = (uint64_t *)(v7 + 16 * v9);
            goto LABEL_17;
          }
        }
      }
      v10 = (uint64_t *)(v7 + 16 * v8);
LABEL_17:
      if (v10 != (uint64_t *)(v7 + 16 * v8))
      {
        *(_QWORD *)(v4[29] + 8 * *((unsigned int *)v10 + 2)) = 0;
        *v10 = -8192;
        v4[40] = (uint64_t)vadd_s32((int32x2_t)v4[40], (int32x2_t)0x1FFFFFFFFLL);
      }
      v14 = (uint64_t *)sub_1C484358C(v5, 16, 3);
      *v14 = 0;
      v14[1] = i;
      result = sub_1C54E9FF0((int32x2_t *)v4, v14, 0);
      if (i)
        goto LABEL_7;
LABEL_8:
      while ((*(_WORD *)(i + 44) & 8) != 0)
        i = *(_QWORD *)(i + 8);
    }
  }
  return result;
}

uint64_t sub_1C54EAAF0(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  int v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t result;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  bzero(*(void **)(a1 + 168), 8 * *(unsigned int *)(a1 + 176));
  *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * *(unsigned int *)(a1 + 176)) = -1;
  *(_DWORD *)(a1 + 180) = 0;
  v2 = (_QWORD *)(a1 + 208);
  v3 = *(_DWORD *)(a1 + 216);
  if (v3)
  {
    v8 = *(_DWORD *)(a1 + 224);
    if (v8 > 4 * v3 && v8 >= 0x41)
    {
      v9 = 1 << (33 - __clz(v3 - 1));
      if (v9 <= 64)
        v10 = 64;
      else
        v10 = v9;
LABEL_17:
      if (v10 == v8)
      {
        *(_QWORD *)(a1 + 216) = 0;
        v11 = 16 * v8;
        v12 = *(_QWORD **)(a1 + 208);
        do
        {
          *v12 = -4096;
          v12 += 2;
          v11 -= 16;
        }
        while (v11);
      }
      else
      {
        MEMORY[0x1CAA32FB4](*v2, 8);
        if (v10)
        {
          v15 = (4 * v10 / 3u + 1) | ((unint64_t)(4 * v10 / 3u + 1) >> 1);
          v16 = v15 | (v15 >> 2) | ((v15 | (v15 >> 2)) >> 4);
          LODWORD(v16) = (((v16 | (v16 >> 8)) >> 16) | v16 | (v16 >> 8)) + 1;
          *(_DWORD *)(a1 + 224) = v16;
          v17 = operator new(16 * v16, (std::align_val_t)8uLL);
          *(_QWORD *)(a1 + 208) = v17;
          *(_QWORD *)(a1 + 216) = 0;
          v18 = *(unsigned int *)(a1 + 224);
          if ((_DWORD)v18)
          {
            v19 = 16 * v18;
            do
            {
              *v17 = -4096;
              v17 += 2;
              v19 -= 16;
            }
            while (v19);
          }
        }
        else
        {
          *v2 = 0;
          *(_QWORD *)(a1 + 216) = 0;
          *(_DWORD *)(a1 + 224) = 0;
        }
      }
      goto LABEL_3;
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 220))
      goto LABEL_3;
    v8 = *(_DWORD *)(a1 + 224);
    if (v8 > 0x40)
    {
      v10 = 0;
      goto LABEL_17;
    }
  }
  if (v8)
  {
    v20 = (_QWORD *)*v2;
    v21 = 16 * v8;
    do
    {
      *v20 = -4096;
      v20 += 2;
      v21 -= 16;
    }
    while (v21);
  }
  *(_QWORD *)(a1 + 216) = 0;
LABEL_3:
  sub_1C4926A50(a1 + 72);
  *(_DWORD *)(a1 + 240) = 0;
  v4 = *(_DWORD *)(a1 + 320);
  if (v4 || *(_DWORD *)(a1 + 324))
  {
    v5 = (_DWORD *)(a1 + 312);
    v6 = *(unsigned int *)(a1 + 328);
    if (v6 <= 4 * v4 || v6 < 0x41)
    {
      if ((_DWORD)v6)
      {
        v13 = *(_QWORD **)v5;
        v14 = 16 * v6;
        do
        {
          *v13 = -4096;
          v13 += 2;
          v14 -= 16;
        }
        while (v14);
      }
      *(_QWORD *)(a1 + 320) = 0;
    }
    else
    {
      sub_1C476B2A4(v5);
    }
  }
  result = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  return result;
}

uint64_t *sub_1C54EACF0(uint64_t *a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *(_DWORD *)a2;
  if (*(_DWORD *)a2)
  {
    if (v3 == 2 || v3 == 3)
    {
      v8 = *a1;
      v9 = *(_QWORD *)(a2 + 16);
      v10 = *(unsigned int *)(*a1 + 8);
      if (v10 >= *(_DWORD *)(*a1 + 12))
      {
        v17 = *(_QWORD *)(a2 + 16);
        llvm::SmallVectorBase<unsigned int>::grow_pod(*a1, v8 + 16, v10 + 1, 4);
        v9 = v17;
        LODWORD(v10) = *(_DWORD *)(v8 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v8 + 4 * v10) = v9;
      v11 = *(_DWORD *)(v8 + 12);
      v12 = (*(_DWORD *)(v8 + 8) + 1);
      *(_DWORD *)(v8 + 8) = v12;
      if (v12 >= v11)
      {
        v18 = HIDWORD(v9);
        llvm::SmallVectorBase<unsigned int>::grow_pod(v8, v8 + 16, v12 + 1, 4);
        HIDWORD(v9) = v18;
        LODWORD(v12) = *(_DWORD *)(v8 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v8 + 4 * v12) = HIDWORD(v9);
    }
    else if (v3 == 1)
    {
      v8 = *a1;
      v13 = *(_QWORD *)(a2 + 16);
      v14 = *(unsigned int *)(*a1 + 8);
      if (v14 >= *(_DWORD *)(*a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(*a1, v8 + 16, v14 + 1, 4);
        LODWORD(v14) = *(_DWORD *)(v8 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v8 + 4 * v14) = v13;
      v15 = *(_DWORD *)(v8 + 12);
      v16 = (*(_DWORD *)(v8 + 8) + 1);
      *(_DWORD *)(v8 + 8) = v16;
      if (v16 >= v15)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v8, v8 + 16, v16 + 1, 4);
        LODWORD(v16) = *(_DWORD *)(v8 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v8 + 4 * v16) = HIDWORD(v13);
    }
    else
    {
      v8 = *a1;
      v19 = *(_DWORD *)(a2 + 16);
      v20 = *(unsigned int *)(*a1 + 8);
      if (v20 >= *(_DWORD *)(*a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(*a1, v8 + 16, v20 + 1, 4);
        LODWORD(v20) = *(_DWORD *)(v8 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v8 + 4 * v20) = v19;
    }
    ++*(_DWORD *)(v8 + 8);
  }
  else
  {
    v4 = *(_DWORD *)(a2 + 4);
    if ((*(_DWORD *)a2 & 0x1000000) == 0)
    {
      v5 = *a1;
      v6 = *(unsigned int *)(*a1 + 8);
      if (v6 >= *(_DWORD *)(*a1 + 12))
      {
        v21 = *a1;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v5, v5 + 16, v6 + 1, 4);
        v5 = v21;
        LODWORD(v6) = *(_DWORD *)(v21 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v5 + 4 * v6) = v4;
      ++*(_DWORD *)(v5 + 8);
    }
    sub_1C54EAEE8(a1, v4);
  }
  return a1;
}

uint64_t *sub_1C54EAEE8(uint64_t *result, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;

  v2 = result[1];
  v3 = a2 & 0x7FFFFFFF;
  if (a2 < 0 && v3 < *(unsigned int *)(v2 + 432))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v2 + 424) + 8 * v3);
    if ((v4 & 0xFFFFFFFFFFFFFFF9) != 0)
    {
      v5 = v4 & 0xFFFFFFFA | (__rbit32(v4) >> 29) & 0xFFFFFFFD;
      v6 = *result;
      v7 = *(unsigned int *)(*result + 8);
      if (v7 >= *(_DWORD *)(*result + 12))
      {
        v30 = result;
        v19 = a2 & 0x7FFFFFFF;
        v21 = *result;
        v27 = HIDWORD(v4);
        v17 = v5;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v6, v6 + 16, v7 + 1, 4);
        v5 = v17;
        HIDWORD(v4) = v27;
        result = v30;
        v3 = v19;
        v6 = v21;
        LODWORD(v7) = *(_DWORD *)(v21 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v6 + 4 * v7) = v5;
      v8 = *(_DWORD *)(v6 + 12);
      v9 = (*(_DWORD *)(v6 + 8) + 1);
      *(_DWORD *)(v6 + 8) = v9;
      if (v9 >= v8)
      {
        v32 = result;
        v20 = v3;
        v22 = v6;
        v28 = HIDWORD(v4);
        llvm::SmallVectorBase<unsigned int>::grow_pod(v6, v6 + 16, v9 + 1, 4);
        HIDWORD(v4) = v28;
        result = v32;
        v3 = v20;
        v6 = v22;
        LODWORD(v9) = *(_DWORD *)(v22 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v6 + 4 * v9) = HIDWORD(v4);
      ++*(_DWORD *)(v6 + 8);
      v2 = result[1];
    }
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 16 * v3);
  if (v10 >= 8)
  {
    if ((v11 = v10 & 0xFFFFFFFFFFFFFFF8, (v10 & 4) != 0) && v11 || (v11 ? (v12 = (v10 & 4) == 0) : (v12 = 0), v12))
    {
      v13 = *result;
      v14 = *(unsigned int *)(*result + 8);
      if (v14 >= *(_DWORD *)(*result + 12))
      {
        v25 = *result;
        v29 = result;
        v18 = v10 & 0xFFFFFFF8;
        v23 = HIDWORD(v10);
        llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v13 + 16, v14 + 1, 4);
        LODWORD(v11) = v18;
        HIDWORD(v10) = v23;
        v13 = v25;
        result = v29;
        LODWORD(v14) = *(_DWORD *)(v25 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v13 + 4 * v14) = v11;
      v15 = *(_DWORD *)(v13 + 12);
      v16 = *(_DWORD *)(v13 + 8) + 1;
      *(_DWORD *)(v13 + 8) = v16;
      if (v16 >= v15)
      {
        v24 = HIDWORD(v10);
        v26 = v13;
        v31 = result;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v13 + 16, v16 + 1, 4);
        HIDWORD(v10) = v24;
        v13 = v26;
        result = v31;
        v16 = *(_DWORD *)(v26 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v13 + 4 * v16) = HIDWORD(v10);
      ++*(_DWORD *)(v13 + 8);
    }
  }
  return result;
}

uint64_t sub_1C54EB0C0(uint64_t a1, uint64_t *a2, int a3)
{
  BOOL v4;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 376))
    v4 = a3 == 0;
  else
    v4 = 0;
  if (!v4)
  {
    sub_1C54EAAF0(a1);
    v6 = *a2;
    *a2 = 0;
    v7 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    sub_1C54EA96C((uint64_t *)a1, *(_QWORD **)(a1 + 368));
    *(_BYTE *)(a1 + 376) = 1;
  }
  return a1;
}

uint64_t sub_1C54EB130(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  a1[77] = a2;
  return 0;
}

uint64_t sub_1C54EB164(uint64_t a1)
{
  uint64_t result;

  result = sub_1C54EAAF0(a1 + 248);
  *(_BYTE *)(a1 + 624) = 0;
  return result;
}

uint64_t sub_1C54EB18C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(a1 + 8) = a1 + 40;
  *(_QWORD *)(a1 + 16) = a1 + 40;
  *(_QWORD *)(a1 + 24) = 4;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = &off_1E816DAA8;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 104;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 96) = 0x400000000;
  *(_QWORD *)(a1 + 160) = 1;
  *(_QWORD *)(a1 + 136) = a1 + 152;
  *(_QWORD *)(a1 + 144) = 0;
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 168), 6);
  *(_OWORD *)(a1 + 212) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 232) = a1 + 248;
  *(_QWORD *)(a1 + 240) = 0x800000000;
  *(_DWORD *)(a1 + 328) = 16;
  v2 = operator new(0x100uLL, (std::align_val_t)8uLL);
  *(_QWORD *)(a1 + 312) = v2;
  *(_QWORD *)(a1 + 320) = 0;
  v3 = *(unsigned int *)(a1 + 328);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    do
    {
      *v2 = -4096;
      v2 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  *(_BYTE *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 352) = 0;
  return a1;
}

uint64_t sub_1C54EB26C(uint64_t a1)
{
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 80), 8);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  return a1;
}

uint64_t *sub_1C54EB2B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6[2];

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 32) + 40);
  v6[0] = a3;
  v6[1] = v4;
  return sub_1C54E9DD4(v6, v3);
}

BOOL sub_1C54EB2E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11[2];

  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 32) + 40);
  v11[0] = a5;
  v11[1] = v8;
  sub_1C54E9DD4(v11, v7);
  v9 = *(unsigned int *)(a3 + 8);
  return (_DWORD)v9 == *(_DWORD *)(a5 + 8) && memcmp(*(const void **)a5, *(const void **)a3, 4 * v9) == 0;
}

unint64_t sub_1C54EB358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 32) + 40);
  v7[0] = a3;
  v7[1] = v5;
  sub_1C54E9DD4(v7, v4);
  return sub_1C4F5AB38(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

void sub_1C54EB3A8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED8310F0);
  if (v1 != -1)
  {
    v4[0] = sub_1C54EB40C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED8310F0, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C54EB40C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Analysis for ComputingKnownBits";
  *(_QWORD *)(v2 + 8) = 31;
  *(_QWORD *)(v2 + 16) = "gisel-known-bits";
  *(_QWORD *)(v2 + 24) = 16;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F7110;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C626E520;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *sub_1C54EB4A0@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *result;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;

  v5 = *(_QWORD *)(a1 + 80);
  v6 = a2;
  v7 = a2 & 0x7FFFFFFF;
  v8 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 16 * v7);
  if ((v8 & 4) != 0 || (v9 = v8 & 0xFFFFFFFFFFFFFFF8, (v8 & 0xFFFFFFFFFFFFFFF8) == 0))
  {
    if ((a2 & 0x80000000) == 0 || v7 >= *(unsigned int *)(v5 + 432))
    {
      v11 = 1;
      v13 = 1;
      goto LABEL_16;
    }
    v14 = *(_QWORD *)(*(_QWORD *)(v5 + 424) + 8 * v7);
    if ((v14 & 0xFFFFFFFFFFFFFFF9) == 0 || (*(_QWORD *)(*(_QWORD *)(v5 + 424) + 8 * v7) & 4) == 0)
    {
      v13 = 1;
      v11 = 1;
      goto LABEL_16;
    }
    v22 = 0x800000000000000;
    if ((v14 & 2) == 0)
      v22 = 0x8000000000000;
    if ((v22 & v14) != 0)
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", a2);
    v11 = (unsigned __int16)(v14 >> 3);
    v24 = v11;
    if (v11 <= 0x40)
    {
      if ((unsigned __int16)(v14 >> 3))
      {
        v12 = -(v14 >> 3);
        goto LABEL_6;
      }
LABEL_50:
      v13 = 0;
      goto LABEL_16;
    }
LABEL_48:
    llvm::APInt::initSlowCase((llvm::APInt *)&v23, -1, 1);
    v13 = v23;
    v11 = v24;
    goto LABEL_16;
  }
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v5 + 16) + 176))(*(_QWORD *)(*(_QWORD *)v5 + 16));
  v11 = *(_DWORD *)(*(_QWORD *)(v10 + 264)
                  + 24
                  * (*(unsigned __int16 *)(*(_QWORD *)v9 + 24)
                   + *(_DWORD *)(v10 + 272) * ((*(_QWORD *)(v10 + 248) - *(_QWORD *)(v10 + 240)) >> 3)));
  v24 = v11;
  if (v11 > 0x40)
    goto LABEL_48;
  if (!v11)
    goto LABEL_50;
  v12 = -v11;
LABEL_6:
  v13 = 0xFFFFFFFFFFFFFFFFLL >> v12;
LABEL_16:
  v25 = (_QWORD *)v13;
  v26 = v11;
  *(_DWORD *)(a3 + 8) = 1;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 1;
  *(_QWORD *)(a3 + 16) = 0;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD **, _QWORD))(*(_QWORD *)a1 + 48))(a1, v6, a3, &v25, 0);
  v17 = *(_DWORD *)(a1 + 112);
  if (v17 > 1 || *(_DWORD *)(a1 + 116))
  {
    if ((v17 & 1) != 0)
    {
      v20 = a1 + 120;
      v21 = a1 + 760;
      goto LABEL_23;
    }
    v18 = (2 * v17) & 0xFFFFFFFC;
    v19 = *(_DWORD *)(a1 + 128);
    if (v18 >= v19 || v19 < 0x41)
    {
      if (!v19)
      {
LABEL_34:
        *(_DWORD *)(a1 + 112) = v19;
        *(_DWORD *)(a1 + 116) = 0;
        goto LABEL_35;
      }
      v20 = *(_QWORD *)(a1 + 120);
      v21 = v20 + 40 * v19;
      do
      {
LABEL_23:
        if (*(_DWORD *)v20 != -1)
        {
          if (*(_DWORD *)v20 != -2)
          {
            if (*(_DWORD *)(v20 + 32) >= 0x41u)
            {
              result = *(_QWORD **)(v20 + 24);
              if (result)
                result = (_QWORD *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
            }
            if (*(_DWORD *)(v20 + 16) >= 0x41u)
            {
              result = *(_QWORD **)(v20 + 8);
              if (result)
                result = (_QWORD *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
            }
          }
          *(_DWORD *)v20 = -1;
        }
        v20 += 40;
      }
      while (v20 != v21);
      v19 = *(_DWORD *)(a1 + 112) & 1;
      goto LABEL_34;
    }
    result = sub_1C54EF124((_QWORD *)(a1 + 112));
  }
LABEL_35:
  if (v26 >= 0x41)
  {
    result = v25;
    if (v25)
      return (_QWORD *)MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
  }
  return result;
}

void sub_1C54EB764(uint64_t a1, unsigned int a2, llvm::MDNode *a3, llvm::APInt *this, uint64_t a5)
{
  llvm::APInt *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  _DWORD *v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  llvm::APInt *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  llvm::MDNode *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (**v51)();
  llvm::DataLayout **v52;
  llvm::APInt *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  llvm::APInt *v60;
  _BYTE *v61;
  _DWORD *v62;
  llvm::APInt *v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  uint8x8_t v68;
  __int32 v69;
  const llvm::KnownBits *v70;
  const llvm::KnownBits *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  llvm::MDNode *v89;
  uint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  llvm::APInt *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  void *v101;
  uint64_t *v102;
  unint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t *v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v119;
  int *v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t (***v134)();
  void (**v135)(uint64_t (***)());
  uint64_t *v136;
  void (**v137)(uint64_t *);
  unsigned int v138;
  void *v139;
  unint64_t v140;
  unint64_t v141;
  unsigned int v142;
  void *v143;
  uint64_t v144;
  unint64_t v145;
  int v146;
  uint64_t v147;
  int v148;
  uint64_t (**v149)();
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  int8x8_t v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  int v160;
  const char *v161;
  int v162;
  unsigned int v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  const char *v169;
  int v170;
  unsigned int v171;
  _DWORD *v172;
  int v173;
  _DWORD *v174;
  int v175;
  BOOL v176;
  unsigned int v177;
  _DWORD *v178;
  unsigned int v179;
  uint64_t v180;
  unsigned int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  uint64_t v186;
  _QWORD *v187;
  unsigned int v188;
  llvm::MDNode *v189;
  uint64_t *v190;
  unint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t *v194;
  unint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  unint64_t v198;
  int8x8_t *v199;
  int8x8_t v200;
  uint8x8_t v201;
  uint64_t v202;
  char v203;
  __int32 *v204;
  size_t v205;
  __int32 *v206;
  __int32 *v207;
  uint64_t v208;
  unint64_t *v209;
  uint64_t v210;
  const char *v211;
  int v212;
  _DWORD *v213;
  int v214;
  int v215;
  unsigned int v216;
  _DWORD *v217;
  int v218;
  _DWORD *v219;
  int v220;
  BOOL v221;
  unsigned int v222;
  _DWORD *v223;
  unsigned int v224;
  unsigned int v225;
  uint64_t v226;
  int v227;
  uint64_t (**v228)();
  unsigned int v229;
  unint64_t v230;
  uint64_t v231;
  int v232;
  const void **v233;
  uint64_t v234;
  void **v235;
  const void **v236;
  uint64_t v237;
  _BYTE *v238;
  uint64_t v239;
  _BYTE *v240;
  uint64_t v241;
  void **v242;
  uint64_t v243;
  void **v244;
  uint64_t v245;
  unsigned int v246;
  unsigned int v247;
  size_t v248;
  uint64_t v249;
  uint64_t v250;
  size_t v251;
  void *v252;
  void *v253;
  unsigned int v254;
  _QWORD *v255;
  uint64_t *v256;
  unint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t *v260;
  unint64_t v261;
  uint64_t v262;
  unsigned int v263;
  unsigned int v264;
  size_t v265;
  unint64_t v266;
  _QWORD *v267;
  uint64_t *v268;
  unint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t *v272;
  unint64_t v273;
  uint64_t v274;
  _QWORD *v275;
  uint64_t *v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t *v279;
  unint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t *v283;
  unint64_t v284;
  _QWORD *v285;
  uint64_t v286;
  _BYTE *v287;
  _DWORD *v288;
  llvm::APInt *v289;
  llvm::APInt *v290;
  llvm::APInt *v291;
  int v292;
  int v293;
  uint64_t v294;
  unsigned int v295;
  uint64_t v296;
  unsigned int v297;
  void *__src;
  unsigned int v299;
  uint64_t v300;
  int v301;
  void *v302;
  unsigned int v303;
  void *v304;
  unsigned int v305;
  uint64_t v306;
  unsigned int v307;
  uint64_t v308;
  unsigned int v309;
  int8x8_t v310;
  unsigned int v311;
  void *v312;
  unsigned int v313;
  void *v314;
  unsigned int v315;
  void *v316;
  unsigned int v317;
  void *v318;
  unsigned int v319;
  void *v320;
  unsigned int v321;
  unint64_t v322;
  unsigned int v323;
  unint64_t v324;
  unsigned int v325;
  unsigned int v326;
  unint64_t v327;
  unsigned int v328;
  const void *v329;
  unsigned int v330;
  uint64_t (**v331)();
  _QWORD *(*v332)@<X0>(_QWORD *@<X0>, uint64_t@<X8>);
  uint64_t v333;
  int8x8_t *v334;
  uint64_t v335;
  BOOL (*v336)(_BOOL8);
  unint64_t v337;
  const void **v338;
  uint64_t v339;

  v9 = (llvm::APInt *)a1;
  v339 = *MEMORY[0x1E0C80C00];
  v326 = a2;
  v10 = *(_QWORD *)(a1 + 80);
  if ((a2 & 0x80000000) != 0)
    v11 = (uint64_t *)(*(_QWORD *)(v10 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v11 = (uint64_t *)(*(_QWORD *)(v10 + 272) + 8 * a2);
  v12 = *v11;
  if ((*(_BYTE *)(v12 + 3) & 1) == 0)
    v12 = *(_QWORD *)(v12 + 24);
  if ((a2 & 0x80000000) == 0
    || (a2 & 0x7FFFFFFF) >= *(_DWORD *)(v10 + 432)
    || (v13 = *(_QWORD *)(*(_QWORD *)(v10 + 424) + 8 * (a2 & 0x7FFFFFFF)), (v13 & 0xFFFFFFFFFFFFFFF9) == 0))
  {
    if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
      MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
    *(_QWORD *)a3 = 0;
    *((_DWORD *)a3 + 2) = 1;
    if (*((_DWORD *)a3 + 6) >= 0x41u)
    {
      v226 = *((_QWORD *)a3 + 2);
      if (v226)
        MEMORY[0x1CAA32F9C](v226, 0x1000C8000313F17);
    }
    *((_QWORD *)a3 + 2) = 0;
    *((_DWORD *)a3 + 6) = 1;
    return;
  }
  v14 = *(_QWORD *)(v12 + 8);
  v15 = **(unsigned __int16 **)(v14 + 16);
  v16 = (unsigned __int16)(v13 >> 3);
  v17 = (unsigned __int16)(v13 >> 19);
  if ((v13 & 2) == 0)
    v17 = (v13 >> 19);
  if ((v13 & 4) != 0)
    v16 = v17;
  if ((v13 & 1) != 0)
    v18 = (v13 >> 3);
  else
    v18 = v16;
  v20 = (_BYTE *)(a1 + 112);
  v19 = *(_DWORD *)(a1 + 112);
  if ((v19 & 1) != 0)
  {
    v22 = 16;
    v21 = a1 + 120;
  }
  else
  {
    v21 = *(_QWORD *)(a1 + 120);
    v22 = *(_DWORD *)(a1 + 128);
    if (!v22)
    {
      v23 = 0;
      goto LABEL_32;
    }
  }
  v24 = v22 - 1;
  v25 = v24 & (37 * a2);
  v26 = (_DWORD *)(v21 + 40 * v25);
  v27 = *v26;
  if (*v26 == a2)
    goto LABEL_33;
  v28 = 1;
  while (v27 != -1)
  {
    v29 = v25 + v28++;
    v25 = v29 & v24;
    v26 = (_DWORD *)(v21 + 40 * v25);
    v27 = *v26;
    if (*v26 == a2)
      goto LABEL_33;
  }
  if ((v19 & 1) != 0)
  {
    v23 = 16;
    v21 = a1 + 120;
  }
  else
  {
    v21 = *(_QWORD *)(a1 + 120);
    v23 = *(_DWORD *)(a1 + 128);
  }
LABEL_32:
  v26 = (_DWORD *)(v21 + 40 * v23);
LABEL_33:
  if ((v19 & 1) != 0)
  {
    v31 = 16;
    v30 = a1 + 120;
  }
  else
  {
    v30 = *(_QWORD *)(a1 + 120);
    v31 = *(_DWORD *)(a1 + 128);
  }
  if ((_DWORD *)(v30 + 40 * v31) != v26)
  {
    if (*((_DWORD *)a3 + 2) > 0x40u || v26[4] > 0x40u)
    {
      v233 = (const void **)(v26 + 2);
      if (v26 + 2 != (_DWORD *)a3)
      {
        llvm::APInt::reallocate((uint64_t)a3, v26[4]);
        v234 = *((unsigned int *)a3 + 2);
        if (v234 <= 0x40)
          *(_QWORD *)a3 = *v233;
        else
          memcpy(*(void **)a3, *v233, ((unint64_t)(v234 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
    else
    {
      *(_QWORD *)a3 = *((_QWORD *)v26 + 1);
      *((_DWORD *)a3 + 2) = v26[4];
    }
    if (*((_DWORD *)a3 + 6) > 0x40u || v26[8] > 0x40u)
    {
      v235 = (void **)((char *)a3 + 16);
      v236 = (const void **)(v26 + 6);
      if ((_DWORD *)((char *)a3 + 16) != v26 + 6)
      {
        llvm::APInt::reallocate((uint64_t)a3 + 16, v26[8]);
        v237 = *((unsigned int *)a3 + 6);
        if (v237 <= 0x40)
          *v235 = (void *)*v236;
        else
          memcpy(*v235, *v236, ((unint64_t)(v237 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
    else
    {
      *((_QWORD *)a3 + 2) = *((_QWORD *)v26 + 3);
      *((_DWORD *)a3 + 6) = v26[8];
    }
    return;
  }
  LODWORD(v336) = v18;
  if (v18 > 0x40)
  {
    v231 = v14;
    v232 = v15;
    llvm::APInt::initSlowCase((llvm::APInt *)&v335, 0, 0);
    LODWORD(v338) = v18;
    llvm::APInt::initSlowCase((llvm::APInt *)&v337, 0, 0);
    v15 = v232;
    v14 = v231;
    v20 = (char *)v9 + 112;
  }
  else
  {
    LODWORD(v338) = v18;
    v335 = 0;
    v337 = 0;
  }
  if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
  {
    v238 = v20;
    v239 = v14;
    v292 = v15;
    MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
    v15 = v292;
    v14 = v239;
    v20 = v238;
  }
  *(_QWORD *)a3 = v335;
  *((_DWORD *)a3 + 2) = (_DWORD)v336;
  LODWORD(v336) = 0;
  v290 = (llvm::MDNode *)((char *)a3 + 16);
  if (*((_DWORD *)a3 + 6) >= 0x41u && *(_QWORD *)v290)
  {
    v240 = v20;
    v241 = v14;
    v293 = v15;
    MEMORY[0x1CAA32F9C](*(_QWORD *)v290, 0x1000C8000313F17);
    v15 = v293;
    v14 = v241;
    v20 = v240;
  }
  *((_QWORD *)a3 + 2) = v337;
  v32 = v338;
  *((_DWORD *)a3 + 6) = (_DWORD)v338;
  if (*((_DWORD *)v9 + 26) > a5)
  {
    v33 = *((_DWORD *)this + 2);
    v288 = (_DWORD *)((char *)v9 + 120);
    v289 = this;
    v291 = v9;
    if (v33 > 0x40)
    {
      v34 = this;
      v35 = v20;
      v36 = v18;
      v37 = v14;
      v38 = v15;
      v39 = llvm::APInt::countLeadingZerosSlowCase(v34);
      v15 = v38;
      this = v289;
      v14 = v37;
      v18 = v36;
      v9 = v291;
      v20 = v35;
      if (v39 == v33)
        return;
    }
    else if (!*(_QWORD *)this)
    {
      return;
    }
    v323 = 1;
    v322 = 0;
    v325 = 1;
    v324 = 0;
    v287 = v20;
    v40 = v18;
    if (v15 > 89)
    {
      if (v15 <= 192)
      {
        v41 = v14;
        v42 = v15;
        switch(v15)
        {
          case 90:
            v144 = *(_QWORD *)(v14 + 48);
            if ((v144 & 7) != 0)
            {
              v145 = *(_QWORD *)((v144 & 0xFFFFFFFFFFFFFFF8) + 8);
            }
            else
            {
              v145 = v144 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(v14 + 48) = v145;
            }
            v208 = *(_QWORD *)(v145 + 72);
            if (v208)
              llvm::computeKnownBitsFromRangeMetadata(v208, (void **)a3, a3);
            goto LABEL_404;
          case 92:
            if ((v13 & 4) != 0)
              goto LABEL_404;
            v131 = *(_QWORD *)(v14 + 48);
            if ((v131 & 7) != 0)
            {
              v132 = *(_QWORD *)((v131 & 0xFFFFFFFFFFFFFFF8) + 8);
            }
            else
            {
              v132 = v131 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(v14 + 48) = v131 & 0xFFFFFFFFFFFFFFF8;
            }
            v210 = *(_QWORD *)(v132 + 24);
            v209 = (unint64_t *)(v132 + 24);
            if ((v210 & 0xFFFFFFFFFFFFFFF9) != 0)
            {
              v212 = sub_1C4825F50(v209);
              if ((_DWORD)v211 == 1)
            }
            else
            {
              v212 = -1;
            }
            v46 = *((_DWORD *)a3 + 2);
            v47 = a3;
            v48 = v212;
            goto LABEL_403;
          case 118:
            (*(void (**)(llvm::APInt *, _QWORD, llvm::MDNode *, llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v14 + 32) + 36), a3, v289, (a5 + 1));
            llvm::APInt::zext(a3, v18, (uint64_t)&v335);
            llvm::APInt::zext(v290, v18, (uint64_t)&v331);
            goto LABEL_242;
          case 119:
          case 126:
            goto LABEL_64;
          case 120:
            v133 = *((_QWORD *)v291 + 10);
            v335 = (uint64_t)&off_1E816EFF0;
            v336 = sub_1C554C7E0;
            v338 = (const void **)&v335;
            v331 = &off_1E816F038;
            v332 = sub_1C554C7F8;
            v334 = (int8x8_t *)&v331;
            sub_1C554C3AC(a2, v133, (uint64_t)&v335, (uint64_t)&v331, 0, 0, &v327);
            v134 = (uint64_t (***)())v334;
            if (v334 == (int8x8_t *)&v331)
            {
              v135 = (void (**)(uint64_t (***)()))(v331 + 4);
              v134 = &v331;
LABEL_225:
              (*v135)(v134);
              goto LABEL_226;
            }
            if (v334)
            {
              v135 = (void (**)(uint64_t (***)()))(*(_QWORD *)v334 + 40);
              goto LABEL_225;
            }
LABEL_226:
            v136 = (uint64_t *)v338;
            if (v338 == (const void **)&v335)
            {
              v137 = (void (**)(uint64_t *))(v335 + 32);
              v136 = &v335;
            }
            else
            {
              if (!v338)
                goto LABEL_229;
              v137 = (void (**)(uint64_t *))((char *)*v338 + 40);
            }
            (*v137)(v136);
LABEL_229:
            if (!(_BYTE)v330)
              goto LABEL_404;
            v138 = v328;
            if (v328 >= 0x41)
            {
              v265 = (((unint64_t)v328 + 63) >> 3) & 0x3FFFFFF8;
              v139 = (void *)operator new[]();
              v266 = v327;
              memcpy(v139, (const void *)v327, v265);
              if (v266)
                MEMORY[0x1CAA32F9C](v266, 0x1000C8000313F17);
              LODWORD(v336) = v138;
              v335 = operator new[]();
              memcpy((void *)v335, v139, v265);
              llvm::APInt::flipAllBitsSlowCase((uint64_t)&v335);
              v142 = v336;
              v141 = v335;
              v143 = (void *)operator new[]();
              memcpy(v143, v139, v265);
            }
            else
            {
              v139 = (void *)v327;
              v140 = v328 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v328 : 0;
              v141 = v140 & ~v327;
              v142 = v328;
              v143 = (void *)v327;
            }
            if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
              MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
            *(_QWORD *)a3 = v141;
            *((_DWORD *)a3 + 2) = v142;
            if (*((_DWORD *)a3 + 6) >= 0x41u && *(_QWORD *)v290)
              MEMORY[0x1CAA32F9C](*(_QWORD *)v290, 0x1000C8000313F17);
            *((_QWORD *)a3 + 2) = v143;
            *((_DWORD *)a3 + 6) = v138;
            if (v138 < 0x41 || !v139)
              goto LABEL_404;
LABEL_238:
            MEMORY[0x1CAA32F9C]();
            goto LABEL_404;
          case 124:
            (*(void (**)(llvm::APInt *, _QWORD, llvm::MDNode *, llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v14 + 32) + 36), a3, v289, (a5 + 1));
            llvm::APInt::sext(a3, v18, (llvm::APInt *)&v335);
            llvm::APInt::sext(v290, v18, (llvm::APInt *)&v331);
LABEL_242:
            v146 = (int)v336;
            v147 = v335;
            v148 = (int)v332;
            v149 = v331;
            if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
              MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
            *(_QWORD *)a3 = v147;
            *((_DWORD *)a3 + 2) = v146;
            if (*((_DWORD *)a3 + 6) >= 0x41u && *(_QWORD *)v290)
              MEMORY[0x1CAA32F9C](*(_QWORD *)v290, 0x1000C8000313F17);
            *((_QWORD *)a3 + 2) = v149;
            *((_DWORD *)a3 + 6) = v148;
            goto LABEL_404;
          case 125:
            goto LABEL_99;
          case 127:
            LODWORD(v336) = 1;
            v335 = 0;
            LODWORD(v338) = 1;
            v337 = 0;
            LODWORD(v332) = 1;
            v331 = 0;
            LODWORD(v334) = 1;
            v333 = 0;
            (*(void (**)(llvm::APInt *, _QWORD, uint64_t *, llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v14 + 32) + 36), &v335, v289, (a5 + 1));
            (*(void (**)(llvm::APInt *, _QWORD, uint64_t (***)(), llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v41 + 32) + 68), &v331, v289, (a5 + 1));
            llvm::KnownBits::shl((llvm::KnownBits *)&v335, (int8x8_t *)&v331, (llvm::KnownBits *)&v327);
            goto LABEL_247;
          case 128:
            LODWORD(v336) = 1;
            v335 = 0;
            LODWORD(v338) = 1;
            v337 = 0;
            LODWORD(v332) = 1;
            v331 = 0;
            LODWORD(v334) = 1;
            v333 = 0;
            (*(void (**)(llvm::APInt *, _QWORD, uint64_t *, llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v14 + 32) + 36), &v335, v289, (a5 + 1));
            (*(void (**)(llvm::APInt *, _QWORD, uint64_t (***)(), llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v41 + 32) + 68), &v331, v289, (a5 + 1));
            llvm::KnownBits::lshr((llvm::KnownBits *)&v335, (int8x8_t *)&v331, (llvm::KnownBits *)&v327);
            goto LABEL_247;
          case 129:
            LODWORD(v336) = 1;
            v335 = 0;
            LODWORD(v338) = 1;
            v337 = 0;
            LODWORD(v332) = 1;
            v331 = 0;
            LODWORD(v334) = 1;
            v333 = 0;
            (*(void (**)(llvm::APInt *, _QWORD, uint64_t *, llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v14 + 32) + 36), &v335, v289, (a5 + 1));
            (*(void (**)(llvm::APInt *, _QWORD, uint64_t (***)(), llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v41 + 32) + 68), &v331, v289, (a5 + 1));
            llvm::KnownBits::ashr((llvm::KnownBits *)&v335, (int8x8_t *)&v331, &v327);
LABEL_247:
            if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
              MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
            *(_QWORD *)a3 = v327;
            *((_DWORD *)a3 + 2) = v328;
            v328 = 0;
            if (*((_DWORD *)a3 + 6) < 0x41u || !*(_QWORD *)v290)
            {
              *((_QWORD *)a3 + 2) = v329;
              *((_DWORD *)a3 + 6) = v330;
              goto LABEL_279;
            }
            MEMORY[0x1CAA32F9C](*(_QWORD *)v290, 0x1000C8000313F17);
            v158 = v328;
            *((_QWORD *)a3 + 2) = v329;
            *((_DWORD *)a3 + 6) = v330;
            v330 = 0;
            goto LABEL_278;
          case 134:
          case 135:
            if ((v13 & 4) != 0)
              goto LABEL_404;
            v43 = v15 == 135;
            v44 = 52;
            v45 = 56;
            goto LABEL_57;
          case 136:
            v122 = *(_QWORD *)(v14 + 32);
            v123 = *(unsigned int *)(v122 + 68);
            v124 = (a5 + 1);
            (*(void (**)(llvm::APInt *, _QWORD, llvm::MDNode *, llvm::APInt *, uint64_t))(*(_QWORD *)v291
                                                                                                  + 48))(v291, *(unsigned int *)(v122 + 100), a3, v289, v124);
            v125 = *((_DWORD *)a3 + 2);
            if (v125 > 0x40)
            {
              if (llvm::APInt::countLeadingZerosSlowCase(a3) != v125)
                goto LABEL_211;
            }
            else if (*(_QWORD *)a3)
            {
              goto LABEL_211;
            }
            v126 = *((_DWORD *)a3 + 6);
            if (v126 > 0x40)
            {
              if (llvm::APInt::countLeadingZerosSlowCase(v290) == v126)
                goto LABEL_404;
            }
            else if (!*(_QWORD *)v290)
            {
              goto LABEL_404;
            }
LABEL_211:
            LODWORD(v336) = 1;
            v335 = 0;
            LODWORD(v338) = 1;
            v337 = 0;
            (*(void (**)(llvm::APInt *, uint64_t, uint64_t *, llvm::APInt *, uint64_t))(*(_QWORD *)v291 + 48))(v291, v123, &v335, v289, v124);
            v127 = *((unsigned int *)a3 + 2);
            if (v127 > 0x40)
            {
              v128 = (void *)operator new[]();
              memcpy(v128, *(const void **)a3, ((unint64_t)(v127 + 63) >> 3) & 0x3FFFFFF8);
              v279 = (uint64_t *)v335;
              v280 = (unint64_t)(v127 + 63) >> 6;
              v281 = v128;
              do
              {
                v282 = *v279++;
                *v281++ &= v282;
                --v280;
              }
              while (v280);
            }
            else
            {
              v128 = (void *)(v335 & *(_QWORD *)a3);
            }
            v129 = *((unsigned int *)a3 + 6);
            if (v129 > 0x40)
            {
              v130 = (void *)operator new[]();
              memcpy(v130, *(const void **)v290, ((unint64_t)(v129 + 63) >> 3) & 0x3FFFFFF8);
              v283 = (uint64_t *)v337;
              v284 = (unint64_t)(v129 + 63) >> 6;
              v285 = v130;
              do
              {
                v286 = *v283++;
                *v285++ &= v286;
                --v284;
              }
              while (v284);
            }
            else
            {
              v130 = (void *)(v337 & *(_QWORD *)v290);
            }
            if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
              MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
            *(_QWORD *)a3 = v128;
            *((_DWORD *)a3 + 2) = v127;
            if (*((_DWORD *)a3 + 6) >= 0x41u && *(_QWORD *)v290)
              MEMORY[0x1CAA32F9C](*(_QWORD *)v290, 0x1000C8000313F17);
            *((_QWORD *)a3 + 2) = v130;
            *((_DWORD *)a3 + 6) = v129;
            goto LABEL_282;
          case 137:
          case 138:
          case 139:
          case 140:
          case 141:
          case 142:
          case 143:
          case 144:
          case 145:
          case 146:
            if (*(_DWORD *)(*(_QWORD *)(v14 + 32) + 36) != a2)
              goto LABEL_404;
            v43 = (v13 & 4) == 0;
            v44 = 60;
            v45 = 52;
LABEL_57:
            if (v43)
              v44 = v45;
            if (v18 < 2 || *(_DWORD *)(*((_QWORD *)v291 + 11) + v44) != 1)
              goto LABEL_404;
            v46 = *((_DWORD *)a3 + 2);
            v47 = a3;
            v48 = 1;
            goto LABEL_403;
          default:
            goto LABEL_438;
        }
      }
      if (v15 <= 210)
      {
        v41 = v14;
        switch(v15)
        {
          case 193:
            if ((v13 & 4) == 0)
            {
              v54 = *(_DWORD *)(*(_QWORD *)(v14 + 32) + 36);
              if (v54 < 0
                && (v55 = *((_QWORD *)v291 + 10), v56 = v54 & 0x7FFFFFFF, v56 < *(_DWORD *)(v55 + 432)))
              {
                v57 = *(_QWORD *)(*(_QWORD *)(v55 + 424) + 8 * v56);
              }
              else
              {
                v57 = 0;
              }
              v202 = *((_QWORD *)v291 + 12);
              v203 = 35;
              if ((v57 & 4) == 0)
                v203 = 19;
              v204 = *(__int32 **)(v202 + 384);
              v205 = *(unsigned int *)(v202 + 392);
              v206 = wmemchr(v204, (v57 >> v203) & 0xFFFFFF, v205);
              v207 = v206 ? v206 : &v204[v205];
              if (v205 == v207 - v204)
                goto LABEL_383;
            }
            goto LABEL_404;
          case 195:
            LODWORD(v336) = 1;
            v335 = 0;
            LODWORD(v338) = 1;
            v337 = 0;
            (*(void (**)(llvm::APInt *, _QWORD, llvm::MDNode *, llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v14 + 32) + 36), a3, v289, (a5 + 1));
            (*(void (**)(llvm::APInt *, _QWORD, uint64_t *, llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v41 + 32) + 68), &v335, v289, (a5 + 1));
            llvm::KnownBits::smin(a3, (const llvm::KnownBits *)&v335, (uint64_t)&v331);
            goto LABEL_110;
          case 196:
            LODWORD(v336) = 1;
            v335 = 0;
            LODWORD(v338) = 1;
            v337 = 0;
            (*(void (**)(llvm::APInt *, _QWORD, llvm::MDNode *, llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v14 + 32) + 36), a3, v289, (a5 + 1));
            (*(void (**)(llvm::APInt *, _QWORD, uint64_t *, llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v41 + 32) + 68), &v335, v289, (a5 + 1));
            llvm::KnownBits::smax(a3, (const llvm::KnownBits *)&v335, (uint64_t)&v331);
LABEL_110:
            if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
              MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
            *(_QWORD *)a3 = v331;
            *((_DWORD *)a3 + 2) = (_DWORD)v332;
            LODWORD(v332) = 0;
            if (*((_DWORD *)a3 + 6) >= 0x41u && *(_QWORD *)v290)
              MEMORY[0x1CAA32F9C](*(_QWORD *)v290, 0x1000C8000313F17);
            goto LABEL_117;
          case 197:
            LODWORD(v336) = 1;
            v335 = 0;
            LODWORD(v338) = 1;
            v337 = 0;
            (*(void (**)(llvm::APInt *, _QWORD, llvm::MDNode *, llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v14 + 32) + 36), a3, v289, (a5 + 1));
            (*(void (**)(llvm::APInt *, _QWORD, uint64_t *, llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v41 + 32) + 68), &v335, v289, (a5 + 1));
            llvm::KnownBits::umin((const void **)a3, (const void **)&v335, v70, (uint64_t)&v331);
            goto LABEL_115;
          case 198:
            LODWORD(v336) = 1;
            v335 = 0;
            LODWORD(v338) = 1;
            v337 = 0;
            (*(void (**)(llvm::APInt *, _QWORD, llvm::MDNode *, llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v14 + 32) + 36), a3, v289, (a5 + 1));
            (*(void (**)(llvm::APInt *, _QWORD, uint64_t *, llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v41 + 32) + 68), &v335, v289, (a5 + 1));
            llvm::KnownBits::umax((const void **)a3, (const void **)&v335, v71, (uint64_t)&v331);
LABEL_115:
            if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
              MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
            *(_QWORD *)a3 = v331;
            *((_DWORD *)a3 + 2) = (_DWORD)v332;
            LODWORD(v332) = 0;
            if (*((_DWORD *)a3 + 6) < 0x41u || !*(_QWORD *)v290)
            {
LABEL_117:
              *((_QWORD *)a3 + 2) = v333;
              *((_DWORD *)a3 + 6) = (_DWORD)v334;
              goto LABEL_282;
            }
            MEMORY[0x1CAA32F9C](*(_QWORD *)v290, 0x1000C8000313F17);
            v159 = v332;
            *((_QWORD *)a3 + 2) = v333;
            *((_DWORD *)a3 + 6) = (_DWORD)v334;
            LODWORD(v334) = 0;
            break;
          default:
            goto LABEL_438;
        }
        goto LABEL_281;
      }
      if (v15 <= 253)
      {
        switch(v15)
        {
          case 211:
            (*(void (**)(llvm::APInt *, _QWORD, unint64_t *, llvm::APInt *, _QWORD))(*(_QWORD *)v9 + 48))(v9, *(unsigned int *)(*(_QWORD *)(v14 + 32) + 36), &v322, this, (a5 + 1));
            if (v323 > 0x40)
            {
              v69 = 0;
              v198 = ((unint64_t)v323 + 63) >> 6;
              v199 = (int8x8_t *)v322;
              do
              {
                v200 = *v199++;
                v201 = (uint8x8_t)vcnt_s8(v200);
                v201.i16[0] = vaddlv_u8(v201);
                v69 += v201.i32[0];
                --v198;
              }
              while (v198);
            }
            else
            {
              v68 = (uint8x8_t)vcnt_s8((int8x8_t)v322);
              v68.i16[0] = vaddlv_u8(v68);
              v69 = v68.i32[0];
            }
            v48 = 32 - __clz(v323 - v69);
            v46 = *((_DWORD *)a3 + 2);
            v47 = a3;
LABEL_403:
            sub_1C4912E54(v47, v48, v46);
            goto LABEL_404;
          case 212:
            (*(void (**)(llvm::APInt *, _QWORD, llvm::MDNode *, llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v14 + 32) + 36), a3, v289, (a5 + 1));
            sub_1C626E35C((uint64_t)a3, (uint64_t)&v335);
            break;
          case 213:
            (*(void (**)(llvm::APInt *, _QWORD, llvm::MDNode *, llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v14 + 32) + 36), a3, v289, (a5 + 1));
            sub_1C626E3B8((uint64_t)a3, (uint64_t)&v335);
            break;
          default:
            goto LABEL_438;
        }
LABEL_131:
        if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
          MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
        *(_QWORD *)a3 = v335;
        *((_DWORD *)a3 + 2) = (_DWORD)v336;
        LODWORD(v336) = 0;
        if (*((_DWORD *)a3 + 6) < 0x41u || !*(_QWORD *)v290)
          goto LABEL_372;
        MEMORY[0x1CAA32F9C](*(_QWORD *)v290, 0x1000C8000313F17);
        v85 = v336;
        *((_QWORD *)a3 + 2) = v337;
        *((_DWORD *)a3 + 6) = (_DWORD)v338;
        LODWORD(v338) = 0;
LABEL_284:
        if (v85 < 0x41 || !v335)
          goto LABEL_404;
        goto LABEL_238;
      }
      if (v15 != 254)
      {
        if (v15 == 255)
        {
          LODWORD(v336) = 1;
          v335 = 0;
          LODWORD(v338) = 1;
          v337 = 0;
          LODWORD(v332) = 1;
          v331 = 0;
          LODWORD(v334) = 1;
          v333 = 0;
          v328 = 1;
          v327 = 0;
          v330 = 1;
          v329 = 0;
          v58 = v14;
          v59 = (a5 + 1);
          v60 = v291;
          (*(void (**)(llvm::APInt *, _QWORD, uint64_t *, llvm::APInt *, uint64_t))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v14 + 32) + 36), &v335, v289, v59);
          (*(void (**)(llvm::APInt *, _QWORD, uint64_t (***)(), llvm::APInt *, uint64_t))(*(_QWORD *)v60 + 48))(v60, *(unsigned int *)(*(_QWORD *)(v58 + 32) + 68), &v331, v289, v59);
          (*(void (**)(llvm::APInt *, _QWORD, unint64_t *, llvm::APInt *, uint64_t))(*(_QWORD *)v60 + 48))(v60, *(unsigned int *)(*(_QWORD *)(v58 + 32) + 100), &v327, v289, v59);
          sub_1C54EEB20((uint64_t)&v310, v18, (llvm::KnownBits *)&v335, (int8x8_t *)&v331, (uint64_t)&v327);
          if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
            MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
          *(int8x8_t *)a3 = v310;
          *((_DWORD *)a3 + 2) = v311;
          v311 = 0;
          if (*((_DWORD *)a3 + 6) >= 0x41u && *(_QWORD *)v290)
            MEMORY[0x1CAA32F9C](*(_QWORD *)v290, 0x1000C8000313F17);
          *((_QWORD *)a3 + 2) = v312;
          *((_DWORD *)a3 + 6) = v313;
LABEL_276:
          if (v330 >= 0x41 && v329)
            MEMORY[0x1CAA32F9C](v329, 0x1000C8000313F17);
          v158 = v328;
LABEL_278:
          if (v158 >= 0x41 && v327)
            MEMORY[0x1CAA32F9C](v327, 0x1000C8000313F17);
LABEL_279:
          if (v334 >= 0x41 && v333)
            MEMORY[0x1CAA32F9C](v333, 0x1000C8000313F17);
          v159 = v332;
LABEL_281:
          if (v159 >= 0x41 && v331)
            MEMORY[0x1CAA32F9C](v331, 0x1000C8000313F17);
LABEL_282:
          if (v338 >= 0x41 && v337)
            MEMORY[0x1CAA32F9C](v337, 0x1000C8000313F17);
LABEL_283:
          v85 = v336;
          goto LABEL_284;
        }
LABEL_438:
        (*(void (**)(_QWORD, llvm::APInt *, _QWORD, llvm::MDNode *, llvm::APInt *, _QWORD, uint64_t))(**((_QWORD **)v291 + 11) + 1616))(*((_QWORD *)v291 + 11), v291, a2, a3, v289, *((_QWORD *)v291 + 10), a5);
        goto LABEL_404;
      }
      LODWORD(v336) = 1;
      v335 = 0;
      LODWORD(v338) = 1;
      v337 = 0;
      LODWORD(v332) = 1;
      v331 = 0;
      LODWORD(v334) = 1;
      v333 = 0;
      v328 = 1;
      v327 = 0;
      v330 = 1;
      v329 = 0;
      v150 = (a5 + 1);
      v151 = v14;
      (*(void (**)(llvm::APInt *, _QWORD, uint64_t *, llvm::APInt *, uint64_t))(*(_QWORD *)v9 + 48))(v9, *(unsigned int *)(*(_QWORD *)(v14 + 32) + 36), &v335, this, v150);
      (*(void (**)(llvm::APInt *, _QWORD, uint64_t (***)(), llvm::APInt *, uint64_t))(*(_QWORD *)v9 + 48))(v9, *(unsigned int *)(*(_QWORD *)(v151 + 32) + 68), &v331, this, v150);
      (*(void (**)(llvm::APInt *, _QWORD, unint64_t *, llvm::APInt *, uint64_t))(*(_QWORD *)v9 + 48))(v9, *(unsigned int *)(*(_QWORD *)(v151 + 32) + 100), &v327, this, v150);
      sub_1C54EEB20((uint64_t)&v310, v18, (llvm::KnownBits *)&v335, (int8x8_t *)&v331, (uint64_t)&v327);
      if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
        MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
      *(int8x8_t *)a3 = v310;
      *((_DWORD *)a3 + 2) = v311;
      v311 = 0;
      if (*((_DWORD *)a3 + 6) >= 0x41u && *(_QWORD *)v290)
        MEMORY[0x1CAA32F9C](*(_QWORD *)v290, 0x1000C8000313F17);
      *((_QWORD *)a3 + 2) = v312;
      *((_DWORD *)a3 + 6) = v313;
      v299 = v18;
      if (v18 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&__src, v18, 0);
        v40 = v299;
        v307 = v299;
        if (v299 > 0x40)
        {
          v248 = (((unint64_t)v299 + 63) >> 3) & 0x3FFFFFF8;
          v306 = operator new[]();
          memcpy((void *)v306, __src, v248);
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v306);
          v40 = v307;
          v156 = (int8x8_t)v306;
LABEL_259:
          v307 = 0;
          v157 = v299;
          if (v299 >= 0x41)
          {
            v251 = (((unint64_t)v299 + 63) >> 3) & 0x3FFFFFF8;
            v252 = (void *)operator new[]();
            v253 = __src;
            memcpy(v252, __src, v251);
            v311 = v40;
            v310 = v156;
            v313 = v157;
            v312 = v252;
            if (v307 >= 0x41 && v306)
              MEMORY[0x1CAA32F9C](v306, 0x1000C8000313F17);
            if (v253)
              MEMORY[0x1CAA32F9C](v253, 0x1000C8000313F17);
          }
          else
          {
            v311 = v40;
            v310 = v156;
            v313 = v299;
            v312 = __src;
          }
          v303 = v328;
          if (v328 > 0x40)
          {
            v302 = (void *)operator new[]();
            memcpy(v302, (const void *)v327, (((unint64_t)v303 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v302 = (void *)v327;
          }
          v305 = v330;
          if (v330 > 0x40)
          {
            v304 = (void *)operator new[]();
            memcpy(v304, v329, (((unint64_t)v305 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v304 = (void *)v329;
          }
          llvm::KnownBits::computeForAddSub(0, 0, (uint64_t)&v310, (uint64_t)&v302, (uint64_t)&v306);
          if (v305 >= 0x41 && v304)
            MEMORY[0x1CAA32F9C](v304, 0x1000C8000313F17);
          if (v303 >= 0x41 && v302)
            MEMORY[0x1CAA32F9C](v302, 0x1000C8000313F17);
          llvm::KnownBits::shl(a3, (int8x8_t *)&v306, (llvm::KnownBits *)&v294);
          llvm::KnownBits::ashr((llvm::KnownBits *)&v294, (int8x8_t *)&v306, (unint64_t *)&__src);
          if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
            MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
          *(_QWORD *)a3 = __src;
          *((_DWORD *)a3 + 2) = v299;
          v299 = 0;
          if (*((_DWORD *)a3 + 6) >= 0x41u && *(_QWORD *)v290)
          {
            MEMORY[0x1CAA32F9C](*(_QWORD *)v290, 0x1000C8000313F17);
            v264 = v299;
            *((_QWORD *)a3 + 2) = v300;
            *((_DWORD *)a3 + 6) = v301;
            v301 = 0;
            if (v264 >= 0x41 && __src)
              MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          }
          else
          {
            *((_QWORD *)a3 + 2) = v300;
            *((_DWORD *)a3 + 6) = v301;
            v301 = 0;
          }
          if (v297 >= 0x41 && v296)
            MEMORY[0x1CAA32F9C](v296, 0x1000C8000313F17);
          if (v295 >= 0x41 && v294)
            MEMORY[0x1CAA32F9C](v294, 0x1000C8000313F17);
          if (v309 >= 0x41 && v308)
            MEMORY[0x1CAA32F9C](v308, 0x1000C8000313F17);
          if (v307 >= 0x41 && v306)
            MEMORY[0x1CAA32F9C](v306, 0x1000C8000313F17);
          if (v313 >= 0x41 && v312)
            MEMORY[0x1CAA32F9C](v312, 0x1000C8000313F17);
          if (v311 >= 0x41 && *(_QWORD *)&v310)
            MEMORY[0x1CAA32F9C](*(_QWORD *)&v310, 0x1000C8000313F17);
          goto LABEL_276;
        }
        v153 = (unint64_t)__src;
      }
      else
      {
        if ((_DWORD)v18)
          v152 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v18;
        else
          v152 = 0;
        v153 = v152 & v18;
        __src = (void *)v153;
        v307 = v18;
      }
      v154 = ~v153;
      if (v40)
        v155 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v40;
      else
        v155 = 0;
      v156 = (int8x8_t)(v155 & v154);
      v306 = v155 & v154;
      goto LABEL_259;
    }
    v41 = v14;
    v42 = v15;
    switch(v15)
    {
      case '*':
LABEL_99:
        (*(void (**)(llvm::APInt *, _QWORD, llvm::MDNode *, llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v41 + 32) + 36), a3, v289, (a5 + 1));
        llvm::KnownBits::sextInReg(a3, *(_DWORD *)(*(_QWORD *)(v41 + 32) + 80), (unsigned int *)&v335);
        goto LABEL_131;
      case '+':
        goto LABEL_64;
      case ',':
        v80 = *(_QWORD *)(v14 + 32);
        v81 = *(_QWORD *)(v80 + 80);
        if (!v81)
          goto LABEL_404;
        sub_1C4912E54(a3, 0, *(_QWORD *)(v80 + 80));
        v82 = *((_DWORD *)a3 + 6);
        v83 = v81 - v82;
        LODWORD(v336) = v82;
        if (v82 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v335, 0, 0);
          v82 = v336;
        }
        else
        {
          v335 = 0;
        }
        sub_1C4912E54(&v335, v83 + v82, v82);
        v84 = *((unsigned int *)a3 + 6);
        if (v84 > 0x40)
        {
          v275 = *(_QWORD **)v290;
          v276 = (uint64_t *)v335;
          v277 = (unint64_t)(v84 + 63) >> 6;
          do
          {
            v278 = *v276++;
            *v275++ &= v278;
            --v277;
          }
          while (v277);
        }
        else
        {
          *(_QWORD *)v290 &= v335;
        }
        goto LABEL_283;
      case '-':
LABEL_383:
        (*(void (**)(llvm::APInt *, _QWORD, llvm::MDNode *, llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v41 + 32) + 36), a3, v289, (a5 + 1));
        (*(void (**)(llvm::APInt *, _QWORD, unint64_t *, llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v41 + 32) + 68), &v322, v289, (a5 + 1));
        v315 = v323;
        if (v323 > 0x40)
        {
          v314 = (void *)operator new[]();
          memcpy(v314, (const void *)v322, (((unint64_t)v315 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v314 = (void *)v322;
        }
        v317 = v325;
        if (v325 > 0x40)
        {
          v316 = (void *)operator new[]();
          memcpy(v316, (const void *)v324, (((unint64_t)v317 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v316 = (void *)v324;
        }
        llvm::KnownBits::computeForAddSub(1, 0, (uint64_t)a3, (uint64_t)&v314, (uint64_t)&v335);
        if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
          MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
        *(_QWORD *)a3 = v335;
        *((_DWORD *)a3 + 2) = (_DWORD)v336;
        LODWORD(v336) = 0;
        if (*((_DWORD *)a3 + 6) >= 0x41u && *(_QWORD *)v290)
        {
          MEMORY[0x1CAA32F9C](*(_QWORD *)v290, 0x1000C8000313F17);
          v254 = v336;
          *((_QWORD *)a3 + 2) = v337;
          *((_DWORD *)a3 + 6) = (_DWORD)v338;
          LODWORD(v338) = 0;
          if (v254 >= 0x41 && v335)
            MEMORY[0x1CAA32F9C](v335, 0x1000C8000313F17);
        }
        else
        {
          *((_QWORD *)a3 + 2) = v337;
          *((_DWORD *)a3 + 6) = (_DWORD)v338;
          LODWORD(v338) = 0;
        }
        if (v317 >= 0x41 && v316)
          MEMORY[0x1CAA32F9C](v316, 0x1000C8000313F17);
        if (v315 < 0x41 || !v314)
          goto LABEL_404;
        goto LABEL_238;
      case '.':
        (*(void (**)(llvm::APInt *, _QWORD, llvm::MDNode *, llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v14 + 32) + 36), a3, v289, (a5 + 1));
        (*(void (**)(llvm::APInt *, _QWORD, unint64_t *, llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v41 + 32) + 68), &v322, v289, (a5 + 1));
        v319 = v323;
        if (v323 > 0x40)
        {
          v318 = (void *)operator new[]();
          memcpy(v318, (const void *)v322, (((unint64_t)v319 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v318 = (void *)v322;
        }
        v321 = v325;
        if (v325 > 0x40)
        {
          v320 = (void *)operator new[]();
          memcpy(v320, (const void *)v324, (((unint64_t)v321 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v320 = (void *)v324;
        }
        llvm::KnownBits::computeForAddSub(0, 0, (uint64_t)a3, (uint64_t)&v318, (uint64_t)&v335);
        if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
          MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
        *(_QWORD *)a3 = v335;
        *((_DWORD *)a3 + 2) = (_DWORD)v336;
        LODWORD(v336) = 0;
        if (*((_DWORD *)a3 + 6) >= 0x41u && *(_QWORD *)v290)
        {
          MEMORY[0x1CAA32F9C](*(_QWORD *)v290, 0x1000C8000313F17);
          v263 = v336;
          *((_QWORD *)a3 + 2) = v337;
          *((_DWORD *)a3 + 6) = (_DWORD)v338;
          LODWORD(v338) = 0;
          if (v263 >= 0x41 && v335)
            MEMORY[0x1CAA32F9C](v335, 0x1000C8000313F17);
        }
        else
        {
          *((_QWORD *)a3 + 2) = v337;
          *((_DWORD *)a3 + 6) = (_DWORD)v338;
          LODWORD(v338) = 0;
        }
        if (v321 >= 0x41 && v320)
          MEMORY[0x1CAA32F9C](v320, 0x1000C8000313F17);
        if (v319 < 0x41 || !v318)
          goto LABEL_404;
        goto LABEL_238;
      case '/':
        (*(void (**)(llvm::APInt *, _QWORD, llvm::MDNode *, llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v14 + 32) + 68), a3, v289, (a5 + 1));
        (*(void (**)(llvm::APInt *, _QWORD, unint64_t *, llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v41 + 32) + 36), &v322, v289, (a5 + 1));
        llvm::KnownBits::mul((const void **)a3, (const void **)&v322, 0, &v335);
        goto LABEL_131;
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '?':
      case '@':
      case 'D':
      case 'G':
      case 'H':
      case 'I':
      case 'K':
      case 'N':
      case 'O':
        goto LABEL_438;
      case 'A':
        (*(void (**)(llvm::APInt *, _QWORD, llvm::MDNode *, llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v14 + 32) + 68), a3, v289, (a5 + 1));
        (*(void (**)(llvm::APInt *, _QWORD, unint64_t *, llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v41 + 32) + 36), &v322, v289, (a5 + 1));
        v76 = *((unsigned int *)a3 + 2);
        if (v76 > 0x40)
        {
          v255 = *(_QWORD **)a3;
          v256 = (uint64_t *)v322;
          v257 = (unint64_t)(v76 + 63) >> 6;
          do
          {
            v258 = *v256++;
            *v255++ |= v258;
            --v257;
          }
          while (v257);
        }
        else
        {
          *(_QWORD *)a3 |= v322;
        }
        v77 = *((unsigned int *)a3 + 6);
        if (v77 <= 0x40)
        {
          v78 = (unint64_t *)((char *)a3 + 16);
          v79 = *(_QWORD *)v290 & v324;
          goto LABEL_192;
        }
        v259 = *(_QWORD **)v290;
        v260 = (uint64_t *)v324;
        v261 = (unint64_t)(v77 + 63) >> 6;
        do
        {
          v262 = *v260++;
          *v259++ &= v262;
          --v261;
        }
        while (v261);
        goto LABEL_404;
      case 'B':
        (*(void (**)(llvm::APInt *, _QWORD, llvm::MDNode *, llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v14 + 32) + 68), a3, v289, (a5 + 1));
        (*(void (**)(llvm::APInt *, _QWORD, unint64_t *, llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v41 + 32) + 36), &v322, v289, (a5 + 1));
        v110 = *((unsigned int *)a3 + 2);
        if (v110 > 0x40)
        {
          v267 = *(_QWORD **)a3;
          v268 = (uint64_t *)v322;
          v269 = (unint64_t)(v110 + 63) >> 6;
          do
          {
            v270 = *v268++;
            *v267++ &= v270;
            --v269;
          }
          while (v269);
        }
        else
        {
          *(_QWORD *)a3 &= v322;
        }
        v111 = *((unsigned int *)a3 + 6);
        if (v111 > 0x40)
        {
          v271 = *(_QWORD **)v290;
          v272 = (uint64_t *)v324;
          v273 = (unint64_t)(v111 + 63) >> 6;
          do
          {
            v274 = *v272++;
            *v271++ |= v274;
            --v273;
          }
          while (v273);
        }
        else
        {
          v78 = (unint64_t *)((char *)a3 + 16);
          v79 = *(_QWORD *)v290 | v324;
LABEL_192:
          *v78 = v79;
        }
        goto LABEL_404;
      case 'C':
        (*(void (**)(llvm::APInt *, _QWORD, llvm::MDNode *, llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v14 + 32) + 68), a3, v289, (a5 + 1));
        (*(void (**)(llvm::APInt *, _QWORD, unint64_t *, llvm::APInt *, _QWORD))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v41 + 32) + 36), &v322, v289, (a5 + 1));
        llvm::KnownBits::operator^=((const void **)a3, &v322);
        goto LABEL_404;
      case 'E':
        goto LABEL_80;
      case 'F':
        (*(void (**)(_QWORD, _QWORD, llvm::MDNode *, _QWORD))(**((_QWORD **)v291 + 11) + 1632))(*((_QWORD *)v291 + 11), *(unsigned int *)(*(_QWORD *)(v14 + 32) + 48), a3, *((_QWORD *)v291 + 9));
        goto LABEL_404;
      case 'J':
        if ((v13 & 4) != 0)
          goto LABEL_404;
        v112 = (*(_DWORD *)(v14 + 40) - 1);
        v113 = *(_DWORD *)(*(_QWORD *)(v14 + 32) + 32 * v112 + 4);
        if (v113 < 0)
        {
          v114 = *((_QWORD *)v291 + 10);
          if ((v113 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v114 + 432))
          {
            v115 = *(_QWORD *)(*(_QWORD *)(v114 + 424) + 8 * (v113 & 0x7FFFFFFF));
            v116 = v115 & 0xFFFFFFFFFFFFFFF9;
            v117 = v115 & 4;
            if (v116 && v117 != 0)
              goto LABEL_428;
          }
        }
        LODWORD(v336) = 1;
        v335 = 0;
        LODWORD(v338) = 1;
        v337 = 0;
        (*(void (**)(llvm::APInt *))(*(_QWORD *)v291 + 48))(v291);
        if (!(_DWORD)v112)
          goto LABEL_440;
        v119 = 0;
        v120 = (int *)(*(_QWORD *)(v41 + 32) + 4);
        while (1)
        {
          v121 = *v120;
          v120 += 8;
          if (v121 == a2)
            break;
          if (v112 == ++v119)
            goto LABEL_440;
        }
        LODWORD(v112) = v119;
LABEL_440:
        llvm::APInt::extractBits((llvm::APInt *)&v335, v18, v112 * v18, (unsigned int *)&v331);
        llvm::APInt::extractBits((llvm::APInt *)&v337, v18, v112 * v18, (unsigned int *)&v327);
        v227 = (int)v332;
        v228 = v331;
        v229 = v328;
        v230 = v327;
        if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
          MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
        *(_QWORD *)a3 = v228;
        *((_DWORD *)a3 + 2) = v227;
        if (*((_DWORD *)a3 + 6) >= 0x41u && *(_QWORD *)v290)
          MEMORY[0x1CAA32F9C](*(_QWORD *)v290, 0x1000C8000313F17);
        *((_QWORD *)a3 + 2) = v230;
        *((_DWORD *)a3 + 6) = v229;
        goto LABEL_282;
      case 'L':
        v72 = *(_DWORD *)(*(_QWORD *)(v14 + 32) + 36);
        if (v72 < 0
          && (v73 = *((_QWORD *)v291 + 10), v74 = v72 & 0x7FFFFFFF, v74 < *(_DWORD *)(v73 + 432)))
        {
          v75 = *(_QWORD *)(*(_QWORD *)(v73 + 424) + 8 * v74);
        }
        else
        {
          v75 = 0;
        }
        v160 = *(_DWORD *)(v14 + 40);
        v335 = v75;
        v162 = sub_1C4825F50((unint64_t *)&v335);
        if ((_DWORD)v161 == 1)
        v163 = v160 - 1;
        if (v160 != 1)
        {
          v164 = 0;
          v165 = 0;
          v166 = (a5 + 1);
          v167 = 32 * v163;
          do
          {
            LODWORD(v336) = 1;
            v335 = 0;
            LODWORD(v338) = 1;
            v337 = 0;
            (*(void (**)(llvm::APInt *, _QWORD, uint64_t *, llvm::APInt *, uint64_t))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v41 + 32) + v164 + 36), &v335, v289, v166);
            llvm::APInt::insertBits((void **)a3, (const llvm::APInt *)&v335, v165);
            llvm::APInt::insertBits((void **)v290, (const llvm::APInt *)&v337, v165);
            if (v338 >= 0x41 && v337)
              MEMORY[0x1CAA32F9C](v337, 0x1000C8000313F17);
            if (v336 >= 0x41 && v335)
              MEMORY[0x1CAA32F9C](v335, 0x1000C8000313F17);
            v165 += v162;
            v164 += 32;
          }
          while (v167 != v164);
        }
        goto LABEL_404;
      case 'M':
        v86 = *((unsigned int *)a3 + 2);
        if (v86 > 0x40)
        {
          memset(*(void **)a3, 255, ((unint64_t)(v86 + 63) >> 3) & 0x3FFFFFF8);
          LODWORD(v86) = *((_DWORD *)a3 + 2);
        }
        else
        {
          *(_QWORD *)a3 = -1;
        }
        v87 = v41;
        if (!(_DWORD)v86)
        {
          v88 = 0;
          goto LABEL_140;
        }
        v88 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v86;
        if (v86 < 0x41)
        {
LABEL_140:
          v89 = a3;
          goto LABEL_141;
        }
        v89 = (llvm::MDNode *)(*(_QWORD *)a3
                             + 8 * ((((unint64_t)v86 + 63) >> 6) - 1));
LABEL_141:
        *(_QWORD *)v89 &= v88;
        v90 = *((unsigned int *)a3 + 6);
        if (v90 > 0x40)
        {
          memset(*((void **)a3 + 2), 255, ((unint64_t)(v90 + 63) >> 3) & 0x3FFFFFF8);
          v87 = v41;
          LODWORD(v90) = *((_DWORD *)a3 + 6);
          if ((_DWORD)v90)
          {
LABEL_143:
            v91 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v90;
            if (v90 >= 0x41)
            {
              v92 = (_QWORD *)(*(_QWORD *)v290
                             + 8 * ((((unint64_t)v90 + 63) >> 6) - 1));
              goto LABEL_145;
            }
LABEL_144:
            v92 = (_QWORD *)((char *)a3 + 16);
LABEL_145:
            *v92 &= v91;
            v93 = *(_DWORD *)(v87 + 40);
            v94 = (v93 - 1);
            if (v93 == 1)
              goto LABEL_404;
            v95 = 0;
            while (1)
            {
              if (*((_DWORD *)v289 + 2) >= 0x41u)
                v96 = (llvm::APInt *)(*(_QWORD *)v289 + 8 * (v95 >> 6));
              else
                v96 = v289;
              v97 = *(_QWORD *)v96 >> v95++;
              if ((v97 & 1) == 0)
                goto LABEL_161;
              (*(void (**)(llvm::APInt *, _QWORD, unint64_t *))(*(_QWORD *)v291 + 48))(v291, *(unsigned int *)(*(_QWORD *)(v41 + 32) + 32 * v95 + 4), &v322);
              v98 = *((unsigned int *)a3 + 2);
              if (v98 > 0x40)
              {
                v99 = (void *)operator new[]();
                memcpy(v99, *(const void **)a3, ((unint64_t)(v98 + 63) >> 3) & 0x3FFFFFF8);
                v102 = (uint64_t *)v322;
                v103 = (unint64_t)(v98 + 63) >> 6;
                v104 = v99;
                do
                {
                  v105 = *v102++;
                  *v104++ &= v105;
                  --v103;
                }
                while (v103);
              }
              else
              {
                v99 = (void *)(v322 & *(_QWORD *)a3);
              }
              v100 = *((unsigned int *)a3 + 6);
              if (v100 > 0x40)
              {
                v101 = (void *)operator new[]();
                memcpy(v101, *(const void **)v290, ((unint64_t)(v100 + 63) >> 3) & 0x3FFFFFF8);
                v106 = (uint64_t *)v324;
                v107 = (unint64_t)(v100 + 63) >> 6;
                v108 = v101;
                do
                {
                  v109 = *v106++;
                  *v108++ &= v109;
                  --v107;
                }
                while (v107);
              }
              else
              {
                v101 = (void *)(v324 & *(_QWORD *)v290);
              }
              if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
                MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
              *(_QWORD *)a3 = v99;
              *((_DWORD *)a3 + 2) = v98;
              if (*((_DWORD *)a3 + 6) >= 0x41u && *(_QWORD *)v290)
              {
                MEMORY[0x1CAA32F9C](*(_QWORD *)v290, 0x1000C8000313F17);
                LODWORD(v98) = *((_DWORD *)a3 + 2);
              }
              *((_QWORD *)a3 + 2) = v101;
              *((_DWORD *)a3 + 6) = v100;
              if (v98 > 0x40)
              {
                if (llvm::APInt::countLeadingZerosSlowCase(a3) != (_DWORD)v98)
                  goto LABEL_161;
              }
              else if (*(_QWORD *)a3)
              {
                goto LABEL_161;
              }
              if (v100 > 0x40)
              {
                if (llvm::APInt::countLeadingZerosSlowCase(v290) == (_DWORD)v100)
                  goto LABEL_404;
              }
              else if (!v101)
              {
                goto LABEL_404;
              }
LABEL_161:
              if (v95 == v94)
                goto LABEL_404;
            }
          }
        }
        else
        {
          *(_QWORD *)v290 = -1;
          if ((_DWORD)v90)
            goto LABEL_143;
        }
        v91 = 0;
        goto LABEL_144;
      case 'P':
      case 'Q':
        if ((v13 & 4) != 0)
          goto LABEL_404;
LABEL_64:
        v49 = *(_QWORD *)(v41 + 32);
        v50 = *(unsigned int *)(v49 + 36);
        if ((v50 & 0x80000000) != 0)
        {
          v52 = (llvm::DataLayout **)v291;
          v67 = *((_QWORD *)v291 + 10);
          v53 = v289;
          if ((v50 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v67 + 432))
            v51 = 0;
          else
            v51 = *(uint64_t (***)())(*(_QWORD *)(v67 + 424) + 8 * (v50 & 0x7FFFFFFF));
        }
        else
        {
          v51 = 0;
          v52 = (llvm::DataLayout **)v291;
          v53 = v289;
        }
        v331 = v51;
        if (v42 == 43)
        {
          v168 = *(_DWORD *)(v49 + 80);
        }
        else if (((unint64_t)v51 & 0xFFFFFFFFFFFFFFF9) != 0
               && (v51 & 2) != 0
               && (v51 & 4) == 0)
        {
          v168 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(v52[12], ((unint64_t)v51 >> 19) & 0xFFFFFF)
                           + 12);
        }
        else
        {
          v168 = sub_1C4825F50((unint64_t *)&v331);
          if ((_DWORD)v169 == 1)
        }
        sub_1C49A9BF8(a3, v168, (uint64_t)&v335);
        if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
          MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
        *(_QWORD *)a3 = v335;
        *((_DWORD *)a3 + 2) = (_DWORD)v336;
        LODWORD(v336) = 0;
        if (*((_DWORD *)a3 + 6) >= 0x41u && *(_QWORD *)v290)
        {
          MEMORY[0x1CAA32F9C](*(_QWORD *)v290, 0x1000C8000313F17);
          v246 = v336;
          *((_QWORD *)a3 + 2) = v337;
          *((_DWORD *)a3 + 6) = (_DWORD)v338;
          LODWORD(v338) = 0;
          if (v246 >= 0x41 && v335)
            MEMORY[0x1CAA32F9C](v335, 0x1000C8000313F17);
        }
        else
        {
          *((_QWORD *)a3 + 2) = v337;
          *((_DWORD *)a3 + 6) = (_DWORD)v338;
        }
        (*((void (**)(llvm::DataLayout **, uint64_t, llvm::MDNode *, llvm::APInt *, _QWORD))*v52 + 6))(v52, v50, a3, v53, (a5 + 1));
        sub_1C49A9BF8(a3, v18, (uint64_t)&v335);
        if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
          MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
        *(_QWORD *)a3 = v335;
        *((_DWORD *)a3 + 2) = (_DWORD)v336;
        LODWORD(v336) = 0;
        if (*((_DWORD *)a3 + 6) >= 0x41u && *(_QWORD *)v290)
        {
          MEMORY[0x1CAA32F9C](*(_QWORD *)v290, 0x1000C8000313F17);
          v247 = v336;
          *((_QWORD *)a3 + 2) = v337;
          *((_DWORD *)a3 + 6) = (_DWORD)v338;
          LODWORD(v338) = 0;
          if (v247 >= 0x41 && v335)
            MEMORY[0x1CAA32F9C](v335, 0x1000C8000313F17);
        }
        else
        {
          *((_QWORD *)a3 + 2) = v337;
          *((_DWORD *)a3 + 6) = (_DWORD)v338;
        }
        if (v168 >= v18)
          goto LABEL_404;
        v46 = *((_DWORD *)a3 + 2);
        v47 = a3;
        v48 = v168;
        goto LABEL_403;
      default:
        if (v15 && v15 != 19)
          goto LABEL_438;
LABEL_80:
        LODWORD(v336) = v18;
        if (v18 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v335, -1, 1);
          v32 = *((_DWORD *)a3 + 6);
          v61 = v287;
          v62 = v288;
          v14 = v41;
          v63 = v291;
        }
        else
        {
          v61 = v20;
          v62 = v288;
          v63 = v291;
          if ((_DWORD)v18)
            v64 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v18;
          else
            v64 = 0;
          v335 = v64;
        }
        if (v32 >= 0x41 && *(_QWORD *)v290)
        {
          MEMORY[0x1CAA32F9C](*(_QWORD *)v290, 0x1000C8000313F17);
          v14 = v41;
          v61 = v287;
        }
        *((_QWORD *)a3 + 2) = v335;
        *((_DWORD *)a3 + 6) = (_DWORD)v336;
        LODWORD(v336) = v18;
        if (v18 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v335, -1, 1);
          v14 = v41;
          v61 = v287;
        }
        else
        {
          if ((_DWORD)v18)
            v65 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v18;
          else
            v65 = 0;
          v335 = v65;
        }
        if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
        {
          MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
          v14 = v41;
          v61 = v287;
        }
        *(_QWORD *)a3 = v335;
        *((_DWORD *)a3 + 2) = (_DWORD)v336;
        LODWORD(v336) = v18;
        if (v18 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v335, 0, 0);
          LODWORD(v338) = v18;
          llvm::APInt::initSlowCase((llvm::APInt *)&v337, 0, 0);
          v14 = v41;
          v61 = v287;
        }
        else
        {
          LODWORD(v338) = v18;
          v335 = 0;
          v337 = 0;
        }
        if ((*v61 & 1) != 0)
        {
          v66 = 16;
        }
        else
        {
          v66 = *((_DWORD *)v63 + 32);
          if (!v66)
          {
            v178 = 0;
            goto LABEL_332;
          }
          v62 = (_DWORD *)*((_QWORD *)v63 + 15);
        }
        v170 = v66 - 1;
        v171 = v170 & (37 * a2);
        v172 = &v62[10 * v171];
        v173 = *v172;
        if (*v172 == a2)
          goto LABEL_333;
        v174 = 0;
        v175 = 1;
        while (v173 != -1)
        {
          if (v174)
            v176 = 0;
          else
            v176 = v173 == -2;
          if (v176)
            v174 = v172;
          v177 = v171 + v175++;
          v171 = v177 & v170;
          v172 = &v62[10 * v171];
          v173 = *v172;
          if (*v172 == a2)
          {
LABEL_333:
            if (v172[4] >= 0x41u)
            {
              v249 = *((_QWORD *)v172 + 1);
              if (v249)
              {
                MEMORY[0x1CAA32F9C](v249, 0x1000C8000313F17);
                v14 = v41;
              }
            }
            *((_QWORD *)v172 + 1) = v335;
            v172[4] = (_DWORD)v336;
            LODWORD(v336) = 0;
            if (v172[8] >= 0x41u)
            {
              v250 = *((_QWORD *)v172 + 3);
              if (v250)
              {
                MEMORY[0x1CAA32F9C](v250, 0x1000C8000313F17);
                v14 = v41;
              }
            }
            *((_QWORD *)v172 + 3) = v337;
            v172[8] = (_DWORD)v338;
            if (*(_DWORD *)(v14 + 40) < 2u)
              goto LABEL_404;
            v179 = 1;
            while (2)
            {
              v180 = *(_QWORD *)(v41 + 32);
              v181 = v179;
              v182 = *(_DWORD *)(v180 + 32 * v179 + 4);
              if ((v182 & 0x80000000) == 0
                || (*(_DWORD *)(v180 + 32 * v179) & 0xFFF00) != 0
                || (v183 = *((_QWORD *)v291 + 10),
                    (v182 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v183 + 432))
                || (*(_QWORD *)(*(_QWORD *)(v183 + 424) + 8 * (v182 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF9) == 0)
              {
                LODWORD(v336) = v40;
                if (v40 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v335, 0, 0);
                  LODWORD(v338) = v40;
                  llvm::APInt::initSlowCase((llvm::APInt *)&v337, 0, 0);
                }
                else
                {
                  LODWORD(v338) = v40;
                  v335 = 0;
                  v337 = 0;
                }
                if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
                  MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
                *(_QWORD *)a3 = v335;
                *((_DWORD *)a3 + 2) = (_DWORD)v336;
                LODWORD(v336) = 0;
                if (*((_DWORD *)a3 + 6) >= 0x41u && *(_QWORD *)v290)
                  MEMORY[0x1CAA32F9C](*(_QWORD *)v290, 0x1000C8000313F17);
LABEL_372:
                *((_QWORD *)a3 + 2) = v337;
                *((_DWORD *)a3 + 6) = (_DWORD)v338;
LABEL_404:
                v213 = v288;
                if ((*v287 & 1) != 0)
                {
                  v214 = 16;
LABEL_408:
                  v215 = v214 - 1;
                  v216 = (37 * v326) & v215;
                  v217 = &v213[10 * v216];
                  v218 = *v217;
                  if (v326 != *v217)
                  {
                    v219 = 0;
                    v220 = 1;
                    while (v218 != -1)
                    {
                      if (v219)
                        v221 = 0;
                      else
                        v221 = v218 == -2;
                      if (v221)
                        v219 = v217;
                      v222 = v216 + v220++;
                      v216 = v222 & v215;
                      v217 = &v213[10 * v216];
                      v218 = *v217;
                      if (v326 == *v217)
                        goto LABEL_422;
                    }
                    if (v219)
                      v223 = v219;
                    else
                      v223 = v217;
                    goto LABEL_421;
                  }
                }
                else
                {
                  v214 = *((_DWORD *)v291 + 32);
                  if (v214)
                  {
                    v213 = (_DWORD *)*((_QWORD *)v291 + 15);
                    goto LABEL_408;
                  }
                  v223 = 0;
LABEL_421:
                  v217 = sub_1C54EF3A8((uint64_t)v287, (int *)&v326, v223);
                  *v217 = v326;
                  *((_QWORD *)v217 + 3) = 0;
                  *((_QWORD *)v217 + 4) = 0;
                  *((_QWORD *)v217 + 1) = 0;
                  *((_QWORD *)v217 + 2) = 0;
                  v217[4] = 1;
                  v217[8] = 1;
                }
LABEL_422:
                v224 = *((_DWORD *)a3 + 2);
                if (v217[4] > 0x40u || v224 > 0x40)
                {
                  v242 = (void **)(v217 + 2);
                  if (v217 + 2 != (_DWORD *)a3)
                  {
                    llvm::APInt::reallocate((uint64_t)(v217 + 2), v224);
                    v243 = v217[4];
                    if (v243 <= 0x40)
                      *v242 = *(void **)a3;
                    else
                      memcpy(*v242, *(const void **)a3, ((unint64_t)(v243 + 63) >> 3) & 0x3FFFFFF8);
                  }
                }
                else
                {
                  *((_QWORD *)v217 + 1) = *(_QWORD *)a3;
                  v217[4] = *((_DWORD *)a3 + 2);
                }
                v225 = *((_DWORD *)a3 + 6);
                if (v217[8] > 0x40u || v225 > 0x40)
                {
                  v244 = (void **)(v217 + 6);
                  if (v217 + 6 != (_DWORD *)v290)
                  {
                    llvm::APInt::reallocate((uint64_t)(v217 + 6), v225);
                    v245 = v217[8];
                    if (v245 <= 0x40)
                      *v244 = *(void **)v290;
                    else
                      memcpy(*v244, *(const void **)v290, ((unint64_t)(v245 + 63) >> 3) & 0x3FFFFFF8);
                  }
                }
                else
                {
                  *((_QWORD *)v217 + 3) = *((_QWORD *)a3 + 2);
                  v217[8] = *((_DWORD *)a3 + 6);
                }
LABEL_428:
                if (v325 >= 0x41 && v324)
                  MEMORY[0x1CAA32F9C](v324, 0x1000C8000313F17);
                if (v323 >= 0x41 && v322)
                  MEMORY[0x1CAA32F9C](v322, 0x1000C8000313F17);
                return;
              }
              (*(void (**)(void))(*(_QWORD *)v291 + 48))();
              v184 = *((unsigned int *)a3 + 2);
              if (v184 > 0x40)
              {
                v185 = (void *)operator new[]();
                memcpy(v185, *(const void **)a3, ((unint64_t)(v184 + 63) >> 3) & 0x3FFFFFF8);
                v190 = (uint64_t *)v322;
                v191 = (unint64_t)(v184 + 63) >> 6;
                v192 = v185;
                do
                {
                  v193 = *v190++;
                  *v192++ &= v193;
                  --v191;
                }
                while (v191);
              }
              else
              {
                v185 = (void *)(v322 & *(_QWORD *)a3);
              }
              v186 = *((unsigned int *)a3 + 6);
              if (v186 > 0x40)
              {
                v187 = (_QWORD *)operator new[]();
                memcpy(v187, *(const void **)v290, ((unint64_t)(v186 + 63) >> 3) & 0x3FFFFFF8);
                v194 = (uint64_t *)v324;
                v195 = (unint64_t)(v186 + 63) >> 6;
                v196 = v187;
                do
                {
                  v197 = *v194++;
                  *v196++ &= v197;
                  --v195;
                }
                while (v195);
              }
              else
              {
                v187 = (_QWORD *)(v324 & *(_QWORD *)v290);
              }
              if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
                MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
              *(_QWORD *)a3 = v185;
              *((_DWORD *)a3 + 2) = v184;
              if (*((_DWORD *)a3 + 6) >= 0x41u && *(_QWORD *)v290)
                MEMORY[0x1CAA32F9C](*(_QWORD *)v290, 0x1000C8000313F17);
              *((_QWORD *)a3 + 2) = v187;
              *((_DWORD *)a3 + 6) = v186;
              if (v186 < 0x41)
              {
LABEL_350:
                if (!v187)
                {
                  v188 = *((_DWORD *)a3 + 2);
                  if (v188 < 0x41 || v188 - llvm::APInt::countLeadingZerosSlowCase(a3) <= 0x40)
                  {
                    v189 = *(llvm::MDNode **)a3;
                    if (v188 < 0x41)
                      v189 = a3;
                    if (!*(_QWORD *)v189)
                      goto LABEL_404;
                  }
                }
              }
              else if (v186 - llvm::APInt::countLeadingZerosSlowCase(v290) <= 0x40)
              {
                v187 = (_QWORD *)*v187;
                goto LABEL_350;
              }
              v179 = v181 + 2;
              if (v181 + 2 >= *(_DWORD *)(v41 + 40))
                goto LABEL_404;
              continue;
            }
          }
        }
        if (v174)
          v178 = v174;
        else
          v178 = v172;
        v61 = v287;
LABEL_332:
        v172 = sub_1C54EF3A8((uint64_t)v61, (int *)&v326, v178);
        *v172 = a2;
        *((_QWORD *)v172 + 3) = 0;
        *((_QWORD *)v172 + 4) = 0;
        *((_QWORD *)v172 + 1) = 0;
        *((_QWORD *)v172 + 2) = 0;
        v172[4] = 1;
        v172[8] = 1;
        v14 = v41;
        goto LABEL_333;
    }
  }
}

_QWORD *sub_1C54EEB20(uint64_t a1, unsigned int a2, llvm::KnownBits *a3, int8x8_t *a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  size_t v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  _QWORD *result;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  size_t v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t **v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  void *v45;
  unsigned int v46;

  v42 = a2;
  if (a2 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v41, 0, 0);
    v44 = a2;
    llvm::APInt::initSlowCase((llvm::APInt *)&v43, 0, 0);
  }
  else
  {
    v44 = a2;
    v41 = 0;
    v43 = 0;
  }
  v10 = *(unsigned int *)(a5 + 8);
  v46 = v10;
  if (v10 > 0x40)
  {
    v34 = ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8;
    v45 = (void *)operator new[]();
    memcpy(v45, *(const void **)a5, v34);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v45);
    LODWORD(v10) = v46;
    v12 = (uint64_t **)v45;
  }
  else
  {
    v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v10;
    if (!(_DWORD)v10)
      v11 = 0;
    v12 = (uint64_t **)(v11 & ~*(_QWORD *)a5);
  }
  v40 = v10;
  v39 = v12;
  v13 = sub_1C47EE5B8(&v39, a2);
  v46 = a2;
  if (a2 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v45, 0, 0);
    v14 = v46;
  }
  else
  {
    v45 = 0;
    v14 = a2;
  }
  sub_1C4912E54(&v45, v13, v14);
  if (v42 >= 0x41 && v41)
    MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
  v15 = (unint64_t)v45;
  v16 = v46;
  v46 = 0;
  if (v40 >= 0x41 && v39)
    MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
  v17 = *(unsigned int *)(a5 + 24);
  v40 = v17;
  if (v17 > 0x40)
  {
    v18 = ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8;
    v39 = (uint64_t **)operator new[]();
    memcpy(v39, *(const void **)(a5 + 16), v18);
  }
  else
  {
    v39 = *(uint64_t ***)(a5 + 16);
  }
  v19 = sub_1C47EE5B8(&v39, a2);
  v46 = a2;
  if (a2 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v45, 0, 0);
  else
    v45 = 0;
  sub_1C4912E54(&v45, 0, v19);
  if (v44 >= 0x41 && v43)
    MEMORY[0x1CAA32F9C](v43, 0x1000C8000313F17);
  v20 = (unint64_t)v45;
  v21 = v46;
  v46 = 0;
  if (v40 >= 0x41 && v39)
    MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
  result = llvm::KnownBits::lshr(a3, a4, (llvm::KnownBits *)&v35);
  v23 = v36;
  if (v36 > 0x40)
  {
    v26 = (_QWORD *)v35;
    v27 = ((unint64_t)v36 + 63) >> 6;
    v28 = (uint64_t *)v15;
    do
    {
      v29 = *v28++;
      *v26++ |= v29;
      --v27;
    }
    while (v27);
  }
  else
  {
    v35 |= v15;
  }
  v24 = v38;
  if (v38 > 0x40)
  {
    v30 = (_QWORD *)v37;
    v31 = ((unint64_t)v38 + 63) >> 6;
    v32 = (uint64_t *)v20;
    do
    {
      v33 = *v32++;
      *v30++ &= v33;
      --v31;
    }
    while (v31);
    v25 = v37;
  }
  else
  {
    v25 = v37 & v20;
    v37 &= v20;
  }
  *(_DWORD *)(a1 + 8) = v23;
  *(_QWORD *)a1 = v35;
  *(_DWORD *)(a1 + 24) = v24;
  *(_QWORD *)(a1 + 16) = v25;
  v36 = 0;
  v38 = 0;
  if (v21 >= 0x41 && v20)
    result = (_QWORD *)MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
  if (v16 >= 0x41)
  {
    if (v15)
      return (_QWORD *)MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_1C54EEEDC()
{
  return 0;
}

uint64_t sub_1C54EEEE4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1C54EEF04(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = off_1E816DB00;
  v2 = *(_DWORD *)(a1 + 112);
  if ((v2 & 1) != 0)
  {
    v3 = a1 + 120;
    v4 = 16;
  }
  else
  {
    v4 = *(unsigned int *)(a1 + 128);
    if (!(_DWORD)v4)
      goto LABEL_11;
    v3 = *(_QWORD *)(a1 + 120);
  }
  v5 = 40 * v4;
  v6 = v3 + 16;
  do
  {
    if (*(_DWORD *)(v6 - 16) <= 0xFFFFFFFD)
    {
      if (*(_DWORD *)(v6 + 16) >= 0x41u)
      {
        v9 = *(_QWORD *)(v6 + 8);
        if (v9)
        {
          v11 = v6;
          v13 = v5;
          MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
          v6 = v11;
          v5 = v13;
        }
      }
      if (*(_DWORD *)v6 >= 0x41u)
      {
        v7 = *(_QWORD *)(v6 - 8);
        if (v7)
        {
          v10 = v6;
          v12 = v5;
          MEMORY[0x1CAA32F9C](v7, 0x1000C8000313F17);
          v6 = v10;
          v5 = v12;
        }
      }
    }
    v6 += 40;
    v5 -= 40;
  }
  while (v5);
  v2 = *(_DWORD *)(a1 + 112);
LABEL_11:
  if ((v2 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 120), 8);
  *(_QWORD *)a1 = off_1E7FA1810;
  v8 = *(void **)(a1 + 16);
  if (v8 != *(void **)(a1 + 8))
    free(v8);
  JUMPOUT(0x1CAA32FC0);
}

int *sub_1C54EF034(int *a1)
{
  int v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v9;
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *a1;
  if ((*a1 & 1) != 0)
  {
    v3 = a1 + 2;
    v4 = 16;
  }
  else
  {
    v4 = a1[4];
    if (!(_DWORD)v4)
      goto LABEL_11;
    v3 = (int *)*((_QWORD *)a1 + 1);
  }
  v5 = 40 * v4;
  v6 = v3 + 4;
  do
  {
    if (*(v6 - 4) <= 0xFFFFFFFD)
    {
      if (v6[4] >= 0x41)
      {
        v9 = *((_QWORD *)v6 + 1);
        if (v9)
        {
          v11 = v6;
          v13 = v5;
          MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
          v6 = v11;
          v5 = v13;
        }
      }
      if (*v6 >= 0x41)
      {
        v7 = *((_QWORD *)v6 - 1);
        if (v7)
        {
          v10 = v6;
          v12 = v5;
          MEMORY[0x1CAA32F9C](v7, 0x1000C8000313F17);
          v6 = v10;
          v5 = v12;
        }
      }
    }
    v6 += 10;
    v5 -= 40;
  }
  while (v5);
  v2 = *a1;
LABEL_11:
  if ((v2 & 1) == 0)
    MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 1), 8);
  return a1;
}

_QWORD *sub_1C54EF124(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  _DWORD *v12;
  _DWORD *v13;
  char *v14;
  char *v15;
  unsigned int v16;
  unsigned int v17;

  v1 = result;
  v2 = *(_DWORD *)result;
  if ((*(_DWORD *)result & 1) != 0)
  {
    v3 = (char *)(result + 1);
    v4 = 16;
  }
  else
  {
    v4 = *((unsigned int *)result + 4);
    if (!(_DWORD)v4)
      goto LABEL_13;
    v3 = (char *)result[1];
  }
  v5 = 40 * v4;
  v6 = v3 + 16;
  do
  {
    if (*((_DWORD *)v6 - 4) <= 0xFFFFFFFD)
    {
      if (*((_DWORD *)v6 + 4) >= 0x41u)
      {
        result = (_QWORD *)*((_QWORD *)v6 + 1);
        if (result)
        {
          v17 = v2;
          v15 = v6;
          result = (_QWORD *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
          v6 = v15;
          v2 = v17;
        }
      }
      if (*(_DWORD *)v6 >= 0x41u)
      {
        result = (_QWORD *)*((_QWORD *)v6 - 1);
        if (result)
        {
          v16 = v2;
          v14 = v6;
          result = (_QWORD *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
          v6 = v14;
          v2 = v16;
        }
      }
    }
    v6 += 40;
    v5 -= 40;
  }
  while (v5);
LABEL_13:
  v7 = __clz((v2 >> 1) - 1);
  if (v7 == 28)
    v8 = 64;
  else
    v8 = 1 << (33 - v7);
  if (v2 >= 2)
    v9 = v8;
  else
    v9 = 0;
  if ((*(_DWORD *)v1 & 1) != 0 && v9 < 0x11)
  {
    v13 = v1 + 81;
    *v1 = 1;
    v12 = v1 + 1;
  }
  else
  {
    if ((*(_DWORD *)v1 & 1) != 0)
      goto LABEL_24;
    if ((_DWORD)v9 != *((_DWORD *)v1 + 4))
    {
      MEMORY[0x1CAA32FB4](v1[1], 8);
LABEL_24:
      if (v9 > 0x10)
      {
        *(_DWORD *)v1 &= ~1u;
        result = operator new(40 * v9, (std::align_val_t)8uLL);
        v1[1] = result;
        v1[2] = v9;
        v11 = *(_DWORD *)v1;
        *v1 = *(_DWORD *)v1 & 1;
        if ((v11 & 1) == 0)
        {
          v10 = &result[5 * v9];
          do
          {
LABEL_27:
            *(_DWORD *)result = -1;
            result += 5;
          }
          while (result != v10);
          return result;
        }
      }
      else
      {
        *v1 = 1;
      }
      result = v1 + 1;
      v10 = v1 + 81;
      goto LABEL_27;
    }
    *v1 = 0;
    if (!(_DWORD)v9)
      return result;
    v12 = (_DWORD *)v1[1];
    v13 = &v12[10 * v9];
  }
  do
  {
    *v12 = -1;
    v12 += 10;
  }
  while (v12 != v13);
  return result;
}

uint64_t sub_1C54EF30C(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  _DWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;

  v3 = result + 8;
  if ((*(_BYTE *)result & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      v7 = 0;
      goto LABEL_9;
    }
    v3 = *(_QWORD *)(result + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & (37 * a2);
  v7 = (_DWORD *)(v3 + 40 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -1)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -2;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_DWORD *)(v3 + 40 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_9;
    }
    if (v9)
      v7 = v9;
  }
LABEL_9:
  *a3 = v7;
  return result;
}

_DWORD *sub_1C54EF3A8(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  _DWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  _DWORD *v19;

  v5 = *(_DWORD *)a1;
  v6 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v7 = 16;
  else
    v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1C54EF520(a1, 2 * v7);
    v10 = a1 + 8;
    v5 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v11 = 16;
    }
    else
    {
      v11 = *(_DWORD *)(a1 + 16);
      if (!v11)
      {
        v8 = 0;
        a3 = 0;
        goto LABEL_7;
      }
      v10 = *(_QWORD *)(a1 + 8);
    }
    v8 = *(_DWORD *)a1 & 1;
    v12 = v11 - 1;
    v13 = (37 * *a2) & v12;
    a3 = (_DWORD *)(v10 + 40 * v13);
    v14 = *a3;
    if (*a2 != *a3)
    {
      v15 = 0;
      v16 = 1;
      while (v14 != -1)
      {
        if (v15)
          v17 = 0;
        else
          v17 = v14 == -2;
        if (v17)
          v15 = a3;
        v18 = v13 + v16++;
        v13 = v18 & v12;
        a3 = (_DWORD *)(v10 + 40 * v13);
        v14 = *a3;
        if (*a2 == *a3)
          goto LABEL_7;
      }
      if (v15)
        a3 = v15;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 4) <= v7 >> 3)
    {
      sub_1C54EF520(a1, v7);
      v19 = 0;
      sub_1C54EF30C(a1, *a2, &v19);
      a3 = v19;
      v5 = *(_DWORD *)a1;
    }
    v8 = v5 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v5 & 0xFFFFFFFE | v8) + 2;
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 4);
  return a3;
}

uint64_t sub_1C54EF520(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  int *v7;
  int v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v15[160];
  uint64_t v16;

  v2 = a2;
  v16 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(int **)(a1 + 8);
    v8 = *(_DWORD *)(a1 + 16);
    if (v2 > 0x10)
    {
      *(_QWORD *)(a1 + 8) = operator new(40 * v2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C54EF70C(a1, v7, &v7[10 * v8]);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = 0;
  v10 = v15;
  do
  {
    v11 = a1 + v9;
    v12 = *(_DWORD *)(a1 + v9 + 8);
    if (v12 <= 0xFFFFFFFD)
    {
      *v10 = v12;
      v10[4] = *(_DWORD *)(v11 + 24);
      *((_QWORD *)v10 + 1) = *(_QWORD *)(v11 + 16);
      *(_DWORD *)(v11 + 24) = 0;
      v10[8] = *(_DWORD *)(v11 + 40);
      *((_QWORD *)v10 + 3) = *(_QWORD *)(v11 + 32);
      *(_DWORD *)(v11 + 40) = 0;
      v10 += 10;
      if (*(_DWORD *)(v11 + 24) >= 0x41u)
      {
        v13 = *(_QWORD *)(v11 + 16);
        if (v13)
          MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
      }
    }
    v9 += 40;
  }
  while (v9 != 640);
  if (v2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = operator new(40 * v2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v2;
  }
  return sub_1C54EF70C(a1, v15, v10);
}

uint64_t sub_1C54EF70C(uint64_t result, int *a2, int *a3)
{
  int *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  int *v16;
  int v17;
  int *v18;
  int v19;
  BOOL v20;
  unsigned int v21;

  v4 = a2;
  v5 = result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  v7 = result + 8;
  if ((v6 & 1) != 0)
  {
    v10 = (_DWORD *)(result + 648);
    v9 = (_DWORD *)(result + 8);
  }
  else
  {
    v8 = *(_DWORD *)(result + 16);
    if (!v8)
      goto LABEL_5;
    v9 = *(_DWORD **)(result + 8);
    v10 = &v9[10 * v8];
  }
  do
  {
    *v9 = -1;
    v9 += 10;
  }
  while (v9 != v10);
LABEL_5:
  if (a2 != a3)
  {
    do
    {
      v11 = *v4;
      if (*v4 <= 0xFFFFFFFD)
      {
        if ((*(_BYTE *)v5 & 1) != 0)
        {
          v13 = 16;
          v12 = v7;
        }
        else
        {
          v12 = *(_QWORD *)(v5 + 8);
          v13 = *(_DWORD *)(v5 + 16);
        }
        v14 = v13 - 1;
        v15 = (v13 - 1) & (37 * v11);
        v16 = (int *)(v12 + 40 * v15);
        v17 = *v16;
        if (v11 != *v16)
        {
          v18 = 0;
          v19 = 1;
          while (v17 != -1)
          {
            if (v18)
              v20 = 0;
            else
              v20 = v17 == -2;
            if (v20)
              v18 = v16;
            v21 = v15 + v19++;
            v15 = v21 & v14;
            v16 = (int *)(v12 + 40 * (v21 & v14));
            v17 = *v16;
            if (v11 == *v16)
              goto LABEL_14;
          }
          if (v18)
            v16 = v18;
        }
LABEL_14:
        *v16 = v11;
        v16[4] = v4[4];
        *((_QWORD *)v16 + 1) = *((_QWORD *)v4 + 1);
        v4[4] = 0;
        v16[8] = v4[8];
        *((_QWORD *)v16 + 3) = *((_QWORD *)v4 + 3);
        v4[8] = 0;
        *(_DWORD *)v5 += 2;
        if (v4[8] >= 0x41)
        {
          result = *((_QWORD *)v4 + 3);
          if (result)
            result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
        }
        if (v4[4] >= 0x41)
        {
          result = *((_QWORD *)v4 + 1);
          if (result)
            result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
        }
      }
      v4 += 10;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t sub_1C54EF8C8(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int i;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 40) + 48;
  *a4 = 0;
  if (v4 == a3)
    return 1;
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 56);
  if (v5 == a2 || v5 == a3)
    return v5 == a2;
  for (i = 0; i <= dword_1ED831178; ++i)
  {
    if (!v5 || (*(_BYTE *)v5 & 4) == 0)
    {
      while ((*(_WORD *)(v5 + 44) & 8) != 0)
        v5 = *(_QWORD *)(v5 + 8);
    }
    v5 = *(_QWORD *)(v5 + 8);
    if (v5 == a2 || v5 == a3)
      return v5 == a2;
  }
  result = 0;
  *a4 = 1;
  return result;
}

uint64_t sub_1C54EF958(uint64_t a1, const void **a2, _QWORD *a3)
{
  unint64_t *v4;
  uint64_t result;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = *(unint64_t **)(a1 + 40);
  result = sub_1C54EA288(*(int32x2_t **)(a1 + 64), a2, (uint64_t)v4, a3);
  v6 = (unint64_t *)result;
  if (result)
  {
    v7 = *(unint64_t **)(a1 + 48);
    v10 = 0;
    if ((unint64_t *)result == v7)
    {
      v8 = result;
      if ((*(_BYTE *)result & 4) == 0)
      {
        v8 = result;
        if ((*(_WORD *)(result + 44) & 8) != 0)
        {
          v8 = result;
          do
            v8 = *(_QWORD *)(v8 + 8);
          while ((*(_WORD *)(v8 + 44) & 8) != 0);
        }
      }
      v9 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)(a1 + 40) = v4;
      *(_QWORD *)(a1 + 48) = v9;
    }
    else if ((sub_1C54EF8C8(a1, result, (uint64_t)v7, &v10) & 1) != 0 || v10)
    {
      if (v10)
        return 0;
    }
    else
    {
      sub_1C48532D0(v4, v7, v4, v6);
    }
    return *(_QWORD *)(a1 + 8);
  }
  return result;
}

uint64_t *sub_1C54EFA34(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  unsigned int v3;
  uint64_t v4;
  int v5;
  _DWORD v7[2];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a2[4];
  if (v3 == 1)
  {
    a2 = (unsigned int *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 32) + 4);
    goto LABEL_6;
  }
  if (v3 == 2)
  {
    v4 = *a2;
    return (uint64_t *)sub_1C4F52194(*a3, v4);
  }
  if (v3 != 3)
  {
LABEL_6:
    v5 = *a2;
    v8 = 0;
    v9 = 0;
    v7[0] = 0;
    v7[1] = v5;
    v10 = 0;
    return sub_1C54EACF0(a3, (uint64_t)v7);
  }
  v4 = *(_QWORD *)a2;
  return (uint64_t *)sub_1C4F52194(*a3, v4);
}

uint64_t sub_1C54EFAAC(uint64_t result, int a2, int *a3, uint64_t a4, unsigned int *a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v13 = *(_QWORD *)(result + 40);
  v14 = *a8;
  v15 = *(unsigned int *)(*a8 + 8);
  if (v15 >= *(_DWORD *)(*a8 + 12))
  {
    v38 = *a8;
    v34 = a2;
    v30 = a4;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v14, v14 + 16, v15 + 1, 4);
    v14 = v38;
    a2 = v34;
    a4 = v30;
    LODWORD(v15) = *(_DWORD *)(v38 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v14 + 4 * v15) = v13;
  v16 = *(_DWORD *)(v14 + 12);
  v17 = (*(_DWORD *)(v14 + 8) + 1);
  *(_DWORD *)(v14 + 8) = v17;
  if (v17 >= v16)
  {
    v40 = v14;
    v36 = a2;
    v31 = a4;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v14, v14 + 16, v17 + 1, 4);
    v14 = v40;
    a2 = v36;
    a4 = v31;
    LODWORD(v17) = *(_DWORD *)(v40 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v14 + 4 * v17) = HIDWORD(v13);
  ++*(_DWORD *)(v14 + 8);
  v18 = *a8;
  v19 = *(unsigned int *)(*a8 + 8);
  if (v19 >= *(_DWORD *)(*a8 + 12))
  {
    v42 = *a8;
    v32 = a2;
    v33 = a4;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v18, v18 + 16, v19 + 1, 4);
    v18 = v42;
    a2 = v32;
    a4 = v33;
    LODWORD(v19) = *(_DWORD *)(v42 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v18 + 4 * v19) = a2;
  ++*(_DWORD *)(v18 + 8);
  if (a4)
  {
    v20 = 16 * a4;
    do
    {
      v21 = a3[2];
      if (v21 == 1)
      {
        result = (uint64_t)sub_1C54EAEE8(a8, *a3);
      }
      else if (v21 == 2)
      {
        result = sub_1C4F52194(*a8, *(_QWORD *)a3);
      }
      else
      {
        v22 = *(_QWORD *)a3;
        v23 = *a8;
        v24 = *(unsigned int *)(*a8 + 8);
        if (v24 >= *(unsigned int *)(*a8 + 12))
        {
          v35 = *(_QWORD *)a3;
          v39 = *a8;
          result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v23, v23 + 16, v24 + 1, 4);
          v22 = v35;
          v23 = v39;
          v24 = *(unsigned int *)(v39 + 8);
        }
        *(_DWORD *)(*(_QWORD *)v23 + 4 * v24) = v22 & 0xFFFFFFFA | (__rbit32(v22) >> 29) & 0xFFFFFFFD;
        v25 = *(_DWORD *)(v23 + 12);
        v26 = (*(_DWORD *)(v23 + 8) + 1);
        *(_DWORD *)(v23 + 8) = v26;
        if (v26 >= v25)
        {
          v37 = HIDWORD(v22);
          v41 = v23;
          result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v23, v23 + 16, v26 + 1, 4);
          HIDWORD(v22) = v37;
          v23 = v41;
          LODWORD(v26) = *(_DWORD *)(v41 + 8);
        }
        *(_DWORD *)(*(_QWORD *)v23 + 4 * v26) = HIDWORD(v22);
        ++*(_DWORD *)(v23 + 8);
      }
      a3 += 4;
      v20 -= 16;
    }
    while (v20);
  }
  if (a6)
  {
    v27 = 24 * a6;
    do
    {
      result = (uint64_t)sub_1C54EFA34(result, a5, a8);
      a5 += 6;
      v27 -= 24;
    }
    while (v27);
  }
  if ((a7 & 0xFF00000000) != 0 && (_DWORD)a7)
  {
    v28 = *a8;
    v29 = *(unsigned int *)(v28 + 8);
    if (v29 >= *(_DWORD *)(v28 + 12))
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v28, v28 + 16, v29 + 1, 4);
      LODWORD(v29) = *(_DWORD *)(v28 + 8);
    }
    *(_DWORD *)(*(_QWORD *)v28 + 4 * v29) = a7;
    ++*(_DWORD *)(v28 + 8);
  }
  return result;
}

uint64_t sub_1C54EFD74(uint64_t a1, _DWORD *a2, const llvm::DILocation *a3, _QWORD *a4)
{
  const llvm::DILocation *v5;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 **v9;
  llvm::DILocation *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v14;
  unsigned __int8 **v15;
  llvm::DILocation *v16;
  const llvm::DILocation *v17;
  unsigned __int8 *MergedLocation;
  uint64_t v19;
  unsigned __int8 *v20;
  _DWORD v21[6];
  _DWORD v22[4];

  if (a3 == (const llvm::DILocation *)1 && a2[2] == 1)
  {
    v22[0] = *a2;
    v22[2] = 1;
    v21[0] = *(_DWORD *)(*(_QWORD *)(a4[1] + 32) + 4);
    v21[4] = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, 19, v22, 1, v21, 1, 0);
  }
  else
  {
    v5 = *(const llvm::DILocation **)(a1 + 32);
    if (v5)
    {
      v7 = *(_QWORD *)(a1 + 56);
      v8 = a4[1];
      if (v7)
      {
        v19 = *(_QWORD *)(a1 + 56);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, v8);
        v14 = a4[1];
        v16 = *(llvm::DILocation **)(v14 + 56);
        v15 = (unsigned __int8 **)(v14 + 56);
        MergedLocation = (unsigned __int8 *)llvm::DILocation::getMergedLocation(v16, *(const llvm::DILocation **)(a1 + 32), v17);
        v20 = MergedLocation;
        if (MergedLocation)
          llvm::MetadataTracking::track((uint64_t)&v20, MergedLocation, 2);
        sub_1C49264C4(v15, &v20);
        if (v20)
          llvm::MetadataTracking::untrack((uint64_t)&v20, v20);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 40))(v19, a4[1]);
      }
      else
      {
        v10 = *(llvm::DILocation **)(v8 + 56);
        v9 = (unsigned __int8 **)(v8 + 56);
        v11 = (unsigned __int8 *)llvm::DILocation::getMergedLocation(v10, v5, a3);
        v20 = v11;
        if (v11)
          llvm::MetadataTracking::track((uint64_t)&v20, v11, 2);
        if (&v20 == v9)
        {
          if (v20)
            llvm::MetadataTracking::untrack((uint64_t)&v20, v20);
        }
        else
        {
          if (*v9)
            llvm::MetadataTracking::untrack((uint64_t)v9, *v9);
          v12 = v20;
          *v9 = v20;
          if (v12)
            llvm::MetadataTracking::retrack((uint64_t)&v20, v12, (uint64_t)v9);
        }
      }
    }
    return *a4;
  }
}

uint64_t sub_1C54EFF08(uint64_t a1, uint64_t *a2, unint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t *v11;
  int *v14;
  int v15;
  int *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t *v22;
  __int32 *v23;
  size_t v24;
  __int32 *v25;
  __int32 *v26;
  uint64_t v27;
  int *v29;
  int v30;
  int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  const llvm::APFloat *v35;
  llvm::APFloatBase *v36;
  uint64_t v37;
  void *v38;
  const llvm::APInt *v39;
  llvm::ValueHandleBase *v40;
  int v41;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t *v46;
  int *v47;
  unint64_t v48;
  unsigned int *v49;
  int v50;
  uint64_t v51;
  int *v52;
  int v53;
  BOOL v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int32x2_t *v64;
  int32x2_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t *v72;
  void *v73;
  int *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  void **v78;
  unint64_t v79;
  void **v80;
  char v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unint64_t v90;
  int *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  _BYTE v102[48];
  void **v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  void *v107;
  uint64_t v108;
  uint64_t v109[2];
  char v110;
  uint64_t v111;

  v11 = a3;
  v111 = *MEMORY[0x1E0C80C00];
  if ((int)a2 > 162)
  {
    switch((int)a2)
    {
      case 163:
      case 164:
      case 165:
      case 168:
      case 169:
      case 185:
      case 187:
      case 188:
      case 189:
      case 190:
      case 191:
      case 192:
        v14 = (int *)a5;
        if (*(_DWORD *)(a5 + 16) == 1)
          v14 = (int *)(*(_QWORD *)(*(_QWORD *)(a5 + 8) + 32) + 4);
        v15 = *v14;
        if (*(_DWORD *)(a5 + 40) == 1)
          v16 = (int *)(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 32) + 4);
        else
          v16 = (int *)(a5 + 24);
        sub_1C554DA98(a2, v15, *v16, *(_QWORD *)(a1 + 24), &v107);
        goto LABEL_34;
      case 182:
      case 183:
        v43 = *(_QWORD *)(a1 + 24);
        v44 = *((_DWORD *)a3 + 2);
        if (v44)
        {
          if (v44 == 2
            || (*(_DWORD *)a3 & 0x80000000) == 0
            || (v45 = *(_DWORD *)a3 & 0x7FFFFFFF, v45 >= *(_DWORD *)(v43 + 432)))
          {
            v48 = 0;
            goto LABEL_97;
          }
          v46 = (unint64_t *)(*(_QWORD *)(v43 + 424) + 8 * v45);
        }
        else
        {
          v46 = a3;
        }
        v48 = *v46;
LABEL_97:
        v74 = (int *)a5;
        if (*(_DWORD *)(a5 + 16) == 1)
          v74 = (int *)(*(_QWORD *)(*(_QWORD *)(a5 + 8) + 32) + 4);
        sub_1C554E6A0((int)a2, v48, *v74, v43, (uint64_t)&v107);
LABEL_34:
        if (!v110)
          goto LABEL_65;
        v36 = llvm::ConstantFP::get(****(llvm::ConstantFP *****)(a1 + 8), (llvm::LLVMContext *)&v107, v35);
        v37 = (*(uint64_t (**)(uint64_t, unint64_t *, llvm::APFloatBase *))(*(_QWORD *)a1 + 24))(a1, v11, v36);
        if (!v110)
          return v37;
        if ((_UNKNOWN *)v108 == &unk_1C866F1C0)
        {
          sub_1C4773C74(v109);
          return v37;
        }
        if ((*(_DWORD *)(v108 + 8) - 64) > 0xFFFFFF7F)
          return v37;
        v38 = (void *)v109[0];
        if (!v109[0])
          return v37;
        goto LABEL_46;
      case 193:
      case 195:
      case 196:
      case 197:
      case 198:
        goto LABEL_10;
      case 209:
        v49 = (unsigned int *)a5;
        if (*(_DWORD *)(a5 + 16) == 1)
          v49 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a5 + 8) + 32) + 4);
        sub_1C554E900(*v49, *(_QWORD *)(a1 + 24), (uint64_t)&v103);
        if (!v106)
          goto LABEL_65;
        v50 = v104;
        if ((_DWORD)v104 == 1)
        {
          v37 = sub_1C5544694(a1, v11, *(unsigned int *)v103);
          goto LABEL_131;
        }
        v100 = v102;
        v101 = 0xC00000000;
        v75 = *((_DWORD *)v11 + 2);
        if (v75)
        {
          if (v75 == 2
            || (v76 = *(_QWORD *)(a1 + 24), (*(_DWORD *)v11 & 0x80000000) == 0)
            || (v77 = *(_DWORD *)v11 & 0x7FFFFFFF, v77 >= *(_DWORD *)(v76 + 432)))
          {
            v79 = 0;
            goto LABEL_108;
          }
          v78 = (void **)(*(_QWORD *)(v76 + 424) + 8 * v77);
        }
        else
        {
          v78 = (void **)v11;
        }
        v79 = (unint64_t)*v78;
LABEL_108:
        if (!(_DWORD)v104)
        {
          LODWORD(v90) = 0;
          v107 = v109;
          v108 = 0x800000000;
          goto LABEL_127;
        }
        v80 = v103;
        v81 = 3;
        if ((v79 & 1) == 0)
          v81 = 19;
        v82 = v79 >> v81;
        v83 = (v79 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v82) | 2;
        v84 = v79 & 0x8000000000000000 | (8 * v82) | 1;
        if ((v79 & 2) != 0)
          v84 = v83;
        if ((v79 & 0xFFFFFFFFFFFFFFF9) != 0 && (v79 & 4) != 0)
          v85 = (void *)v84;
        else
          v85 = (void *)v79;
        v86 = 4 * v104;
        do
        {
          v87 = *(unsigned int *)v80;
          v107 = v85;
          LODWORD(v108) = 0;
          sub_1C5544694(a1, (unint64_t *)&v107, v87);
          v89 = *(_DWORD *)(*(_QWORD *)(v88 + 32) + 4);
          if (v101 >= HIDWORD(v101))
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, (uint64_t)v102, v101 + 1, 4);
          *((_DWORD *)v100 + v101) = v89;
          v90 = (v101 + 1);
          LODWORD(v101) = v101 + 1;
          v80 = (void **)((char *)v80 + 4);
          v86 -= 4;
        }
        while (v86);
        v91 = (int *)v100;
        v107 = v109;
        v108 = 0x800000000;
        if (v90 >= 9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, (uint64_t)v109, v90, 24);
          v92 = v108;
          v93 = (uint64_t *)v107;
        }
        else
        {
          if (!(_DWORD)v90)
          {
            v50 = 0;
            goto LABEL_127;
          }
          v92 = 0;
          v93 = v109;
        }
        v94 = 3 * v92;
        v95 = 4 * v90;
        do
        {
          v96 = *v91++;
          v97 = &v93[v94];
          *(_DWORD *)v97 = v96;
          *((_DWORD *)v97 + 4) = 0;
          v94 += 3;
          v95 -= 4;
        }
        while (v95);
        v50 = v108;
LABEL_127:
        LODWORD(v108) = v50 + v90;
        v37 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(*(_QWORD *)a1 + 32))(a1, 77, v11, 1);
        if (v107 != v109)
          free(v107);
        if (v100 != v102)
          free(v100);
LABEL_131:
        if (!v106)
          return v37;
        v73 = v103;
        if (v103 == (void **)&v105)
          return v37;
        goto LABEL_94;
      default:
        goto LABEL_65;
    }
  }
  if (((_DWORD)a2 - 45) <= 0x16 && ((1 << ((_BYTE)a2 - 45)) & 0x73C007) != 0
    || ((_DWORD)a2 - 127) < 3)
  {
LABEL_10:
    v17 = sub_1C54F0874((int *)a5, *(_QWORD *)(a1 + 24));
    v18 = v17;
    if ((_DWORD)a2 == 193)
    {
      v19 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 40);
      v20 = v17 & 4;
      v21 = 35;
      if ((v17 & 4) == 0)
        v21 = 19;
      v98 = a6;
      v22 = v11;
      v23 = *(__int32 **)(v19 + 656);
      v24 = *(unsigned int *)(v19 + 664);
      v25 = wmemchr(v23, (v17 >> v21) & 0xFFFFFF, v24);
      if (v25)
        v26 = v25;
      else
        v26 = &v23[v24];
      v27 = (char *)v26 - (char *)v23;
      v11 = v22;
      a6 = v98;
      if (v24 != v27 >> 2)
        goto LABEL_65;
    }
    else
    {
      v20 = v17 & 4;
    }
    if ((v18 & 0xFFFFFFFFFFFFFFF9) != 0 && v20 != 0)
    {
      v32 = (unsigned int *)a5;
      if (*(_DWORD *)(a5 + 16) == 1)
        v32 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a5 + 8) + 32) + 4);
      v33 = *v32;
      if (*(_DWORD *)(a5 + 40) == 1)
        v34 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 32) + 4);
      else
        v34 = (unsigned int *)(a5 + 24);
      v41 = sub_1C554DD18((int)a2, v33, *v34, *(_QWORD *)(a1 + 24), (llvm::ConstantInt *****)a1);
      if (v41)
      {
        LODWORD(v107) = v41;
        LODWORD(v109[0]) = 0;
        return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, 19, v11, 1, &v107, 1, 0);
      }
LABEL_65:
      if (a4 < 2)
      {
        v54 = 1;
      }
      else
      {
        v51 = 16 * a4 - 16;
        v52 = (int *)(v11 + 1);
        do
        {
          v53 = *v52;
          v52 += 4;
          v54 = (v53 & 0xFFFFFFFD) == 0;
          v55 = (v53 & 0xFFFFFFFD) != 0 || v51 == 0;
          v51 -= 16;
        }
        while (!v55);
      }
      v56 = *(_QWORD *)(a1 + 64);
      if (v56
        && ((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(v56 + 200) + 16))(*(_QWORD *)(v56 + 200), a2) & 1) != 0)
      {
        if (!v54)
        {
          v37 = sub_1C5548620((uint64_t *)a1, (int)a2, (uint64_t *)v11, a4, (int *)a5, a6, a7);
          sub_1C54EA660(*(int32x2_t **)(a1 + 64), v60);
          return v37;
        }
        v107 = v109;
        v108 = 0x2000000000;
        v57 = *(_QWORD *)(a1 + 24);
        v103 = &v107;
        v104 = v57;
        v99 = 0;
        sub_1C54EFAAC(a1, (int)a2, (int *)v11, a4, (unsigned int *)a5, a6, a7, (uint64_t *)&v103);
        v100 = (void *)sub_1C54EF958(a1, (const void **)&v107, &v99);
        v101 = v58;
        if (v58)
        {
          v37 = sub_1C54EFD74(a1, v11, (const llvm::DILocation *)a4, &v100);
          goto LABEL_93;
        }
        v37 = sub_1C5548620((uint64_t *)a1, (int)a2, (uint64_t *)v11, a4, (int *)a5, a6, a7);
        v62 = v61;
        v63 = v99;
        v64 = *(int32x2_t **)(a1 + 64);
        v65 = v64[39];
        v66 = v64[41].u32[0];
        if ((_DWORD)v66)
        {
          LODWORD(v67) = (v66 - 1) & ((v61 >> 4) ^ (v61 >> 9));
          v68 = *(_QWORD *)&v65 + 16 * v67;
          v69 = *(_QWORD *)v68;
          if (*(_QWORD *)v68 == v61)
          {
LABEL_90:
            if (v68 != *(_QWORD *)&v65 + 16 * v66)
            {
              *(_QWORD *)(*(_QWORD *)&v64[29] + 8 * *(unsigned int *)(v68 + 8)) = 0;
              *(_QWORD *)v68 = -8192;
              v64[40] = vadd_s32(v64[40], (int32x2_t)0x1FFFFFFFFLL);
            }
            v72 = (uint64_t *)sub_1C484358C((uint64_t)&v64[9], 16, 3);
            *v72 = 0;
            v72[1] = v62;
            sub_1C54E9FF0(v64, v72, v63);
LABEL_93:
            v73 = v107;
            if (v107 != v109)
LABEL_94:
              free(v73);
            return v37;
          }
          v70 = 1;
          while (v69 != -4096)
          {
            v71 = v67 + v70++;
            v67 = v71 & (v66 - 1);
            v69 = *(_QWORD *)(*(_QWORD *)&v65 + 16 * v67);
            if (v69 == v61)
            {
              v68 = *(_QWORD *)&v65 + 16 * v67;
              goto LABEL_90;
            }
          }
        }
        v68 = *(_QWORD *)&v65 + 16 * v66;
        goto LABEL_90;
      }
      return sub_1C5548620((uint64_t *)a1, (int)a2, (uint64_t *)v11, a4, (int *)a5, a6, a7);
    }
    v29 = (int *)a5;
    if (*(_DWORD *)(a5 + 16) == 1)
      v29 = (int *)(*(_QWORD *)(*(_QWORD *)(a5 + 8) + 32) + 4);
    v30 = *v29;
    if (*(_DWORD *)(a5 + 40) == 1)
      v31 = (int *)(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 32) + 4);
    else
      v31 = (int *)(a5 + 24);
    sub_1C554CE74((int)a2, v30, *v31, *(_QWORD *)(a1 + 24), (uint64_t)&v107);
  }
  else
  {
    if ((_DWORD)a2 != 125)
      goto LABEL_65;
    v47 = (int *)a5;
    if (*(_DWORD *)(a5 + 16) == 1)
      v47 = (int *)(*(_QWORD *)(*(_QWORD *)(a5 + 8) + 32) + 4);
    sub_1C554E3D4(125, *v47, *(_QWORD *)(a5 + 24), *(_QWORD *)(a1 + 24), (uint64_t)&v107);
  }
  if (!LOBYTE(v109[0]))
    goto LABEL_65;
  v40 = llvm::ConstantInt::get(****(llvm::ConstantInt *****)(a1 + 8), (llvm::LLVMContext *)&v107, v39);
  v37 = (*(uint64_t (**)(uint64_t, unint64_t *, llvm::ValueHandleBase *))(*(_QWORD *)a1 + 16))(a1, v11, v40);
  if (LOBYTE(v109[0]))
  {
    if (v108 >= 0x41)
    {
      v38 = v107;
      if (v107)
LABEL_46:
        MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
    }
  }
  return v37;
}

uint64_t sub_1C54F0874(int *a1, uint64_t a2)
{
  int v2;
  unsigned int v3;

  if (a1[4] == 1)
  {
    v2 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 32) + 4);
    if ((v2 & 0x80000000) == 0)
      return 0;
  }
  else
  {
    v2 = *a1;
    if ((*a1 & 0x80000000) == 0)
      return 0;
  }
  v3 = v2 & 0x7FFFFFFF;
  if (v3 < *(_DWORD *)(a2 + 432))
    return *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * v3);
  return 0;
}

uint64_t sub_1C54F08C0(_QWORD *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int32x2_t *v25;
  int32x2_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[2];
  uint64_t v39;
  int v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v6 = a1[8];
  if (!v6
    || ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 200) + 16))(*(_QWORD *)(v6 + 200), 120) & 1) == 0)
  {
    return sub_1C55452C4(a1, (uint64_t)a2, a3);
  }
  v7 = a1[3];
  v8 = a2[2];
  v9 = a2;
  if (v8)
  {
    if (v8 == 2)
      goto LABEL_16;
    if ((*a2 & 0x80000000) == 0)
      goto LABEL_16;
    v10 = *a2 & 0x7FFFFFFF;
    if (v10 >= *(_DWORD *)(v7 + 432))
      goto LABEL_16;
    v9 = (int *)(*(_QWORD *)(v7 + 424) + 8 * v10);
  }
  v11 = *(_QWORD *)v9;
  if ((v11 & 0xFFFFFFFFFFFFFFF9) == 0 || (v11 & 4) == 0)
  {
LABEL_16:
    *(_QWORD *)&v41 = &v42;
    v38[0] = (uint64_t)&v41;
    v38[1] = v7;
    v37 = 0;
    v19 = a1[5];
    v42 = v19;
    v43 = 120;
    *((_QWORD *)&v41 + 1) = 0x2000000003;
    if (v8 == 1)
    {
      sub_1C54EAEE8(v38, *a2);
    }
    else if (v8 == 2)
    {
      sub_1C4F52194((uint64_t)&v41, *(_QWORD *)a2);
    }
    else
    {
      v20 = HIDWORD(*(_QWORD *)a2);
      v44 = *(_QWORD *)a2 & 0xFFFFFFFA | (__rbit32(*(_QWORD *)a2) >> 29) & 0xFFFFFFFD;
      v45 = v20;
      DWORD2(v41) = 5;
    }
    LODWORD(v34) = 2;
    v35 = 0;
    v36 = a3;
    sub_1C54EACF0(v38, (uint64_t)&v34);
    v34 = sub_1C54EF958((uint64_t)a1, (const void **)&v41, &v37);
    v35 = v21;
    if (v21)
    {
      v39 = *(_QWORD *)a2;
      v40 = a2[2];
      v17 = sub_1C54EFD74((uint64_t)a1, &v39, (const llvm::DILocation *)1, &v34);
LABEL_32:
      if ((uint64_t *)v41 != &v42)
        free((void *)v41);
      return v17;
    }
    v17 = sub_1C55452C4(a1, (uint64_t)a2, a3);
    v23 = v22;
    v24 = v37;
    v25 = (int32x2_t *)a1[8];
    v26 = v25[39];
    v27 = v25[41].u32[0];
    if ((_DWORD)v27)
    {
      LODWORD(v28) = (v27 - 1) & ((v22 >> 4) ^ (v22 >> 9));
      v29 = *(_QWORD *)&v26 + 16 * v28;
      v30 = *(_QWORD *)v29;
      if (*(_QWORD *)v29 == v22)
      {
LABEL_29:
        if (v29 != *(_QWORD *)&v26 + 16 * v27)
        {
          *(_QWORD *)(*(_QWORD *)&v25[29] + 8 * *(unsigned int *)(v29 + 8)) = 0;
          *(_QWORD *)v29 = -8192;
          v25[40] = vadd_s32(v25[40], (int32x2_t)0x1FFFFFFFFLL);
        }
        v33 = (uint64_t *)sub_1C484358C((uint64_t)&v25[9], 16, 3);
        *v33 = 0;
        v33[1] = v23;
        sub_1C54E9FF0(v25, v33, v24);
        goto LABEL_32;
      }
      v31 = 1;
      while (v30 != -4096)
      {
        v32 = v28 + v31++;
        v28 = v32 & (v27 - 1);
        v30 = *(_QWORD *)(*(_QWORD *)&v26 + 16 * v28);
        if (v30 == v22)
        {
          v29 = *(_QWORD *)&v26 + 16 * v28;
          goto LABEL_29;
        }
      }
    }
    v29 = *(_QWORD *)&v26 + 16 * v27;
    goto LABEL_29;
  }
  v12 = 3;
  if ((v11 & 1) == 0)
    v12 = 19;
  v13 = v11 >> v12;
  v14 = v11 & 0x8000000000000000 | (8 * v13) | 1;
  v15 = (v11 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v13) | 2;
  if ((v11 & 2) == 0)
    v15 = v14;
  v34 = v15;
  LODWORD(v35) = 0;
  *(_QWORD *)&v41 = (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t))(*a1 + 16))(a1, &v34, a3);
  *((_QWORD *)&v41 + 1) = v16;
  LODWORD(v42) = 1;
  return sub_1C5545898(a1, (uint64_t)a2, &v41);
}

uint64_t sub_1C54F0C2C(_QWORD *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int32x2_t *v25;
  int32x2_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[2];
  uint64_t v39;
  int v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v6 = a1[8];
  if (!v6
    || ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 200) + 16))(*(_QWORD *)(v6 + 200), 121) & 1) == 0)
  {
    return sub_1C55459DC(a1, (uint64_t)a2, a3);
  }
  v7 = a1[3];
  v8 = a2[2];
  v9 = a2;
  if (v8)
  {
    if (v8 == 2)
      goto LABEL_16;
    if ((*a2 & 0x80000000) == 0)
      goto LABEL_16;
    v10 = *a2 & 0x7FFFFFFF;
    if (v10 >= *(_DWORD *)(v7 + 432))
      goto LABEL_16;
    v9 = (int *)(*(_QWORD *)(v7 + 424) + 8 * v10);
  }
  v11 = *(_QWORD *)v9;
  if ((v11 & 0xFFFFFFFFFFFFFFF9) == 0 || (v11 & 4) == 0)
  {
LABEL_16:
    *(_QWORD *)&v41 = &v42;
    v38[0] = (uint64_t)&v41;
    v38[1] = v7;
    v37 = 0;
    v19 = a1[5];
    v42 = v19;
    v43 = 121;
    *((_QWORD *)&v41 + 1) = 0x2000000003;
    if (v8 == 1)
    {
      sub_1C54EAEE8(v38, *a2);
    }
    else if (v8 == 2)
    {
      sub_1C4F52194((uint64_t)&v41, *(_QWORD *)a2);
    }
    else
    {
      v20 = HIDWORD(*(_QWORD *)a2);
      v44 = *(_QWORD *)a2 & 0xFFFFFFFA | (__rbit32(*(_QWORD *)a2) >> 29) & 0xFFFFFFFD;
      v45 = v20;
      DWORD2(v41) = 5;
    }
    LODWORD(v34) = 3;
    v35 = 0;
    v36 = a3;
    sub_1C54EACF0(v38, (uint64_t)&v34);
    v34 = sub_1C54EF958((uint64_t)a1, (const void **)&v41, &v37);
    v35 = v21;
    if (v21)
    {
      v39 = *(_QWORD *)a2;
      v40 = a2[2];
      v17 = sub_1C54EFD74((uint64_t)a1, &v39, (const llvm::DILocation *)1, &v34);
LABEL_32:
      if ((uint64_t *)v41 != &v42)
        free((void *)v41);
      return v17;
    }
    v17 = sub_1C55459DC(a1, (uint64_t)a2, a3);
    v23 = v22;
    v24 = v37;
    v25 = (int32x2_t *)a1[8];
    v26 = v25[39];
    v27 = v25[41].u32[0];
    if ((_DWORD)v27)
    {
      LODWORD(v28) = (v27 - 1) & ((v22 >> 4) ^ (v22 >> 9));
      v29 = *(_QWORD *)&v26 + 16 * v28;
      v30 = *(_QWORD *)v29;
      if (*(_QWORD *)v29 == v22)
      {
LABEL_29:
        if (v29 != *(_QWORD *)&v26 + 16 * v27)
        {
          *(_QWORD *)(*(_QWORD *)&v25[29] + 8 * *(unsigned int *)(v29 + 8)) = 0;
          *(_QWORD *)v29 = -8192;
          v25[40] = vadd_s32(v25[40], (int32x2_t)0x1FFFFFFFFLL);
        }
        v33 = (uint64_t *)sub_1C484358C((uint64_t)&v25[9], 16, 3);
        *v33 = 0;
        v33[1] = v23;
        sub_1C54E9FF0(v25, v33, v24);
        goto LABEL_32;
      }
      v31 = 1;
      while (v30 != -4096)
      {
        v32 = v28 + v31++;
        v28 = v32 & (v27 - 1);
        v30 = *(_QWORD *)(*(_QWORD *)&v26 + 16 * v28);
        if (v30 == v22)
        {
          v29 = *(_QWORD *)&v26 + 16 * v28;
          goto LABEL_29;
        }
      }
    }
    v29 = *(_QWORD *)&v26 + 16 * v27;
    goto LABEL_29;
  }
  v12 = 3;
  if ((v11 & 1) == 0)
    v12 = 19;
  v13 = v11 >> v12;
  v14 = v11 & 0x8000000000000000 | (8 * v13) | 1;
  v15 = (v11 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v13) | 2;
  if ((v11 & 2) == 0)
    v15 = v14;
  v34 = v15;
  LODWORD(v35) = 0;
  *(_QWORD *)&v41 = (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t))(*a1 + 24))(a1, &v34, a3);
  *((_QWORD *)&v41 + 1) = v16;
  LODWORD(v42) = 1;
  return sub_1C5545898(a1, (uint64_t)a2, &v41);
}

void sub_1C54F0F98(_QWORD *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;

  *a1 = &off_1E816EC08;
  v3 = (unsigned __int8 *)a1[4];
  v1 = (uint64_t)(a1 + 4);
  v2 = v3;
  if (v3)
    llvm::MetadataTracking::untrack(v1, v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C54F0FE8()
{
  int v1;
  int v2;
  int *v3;
  __int128 v4;

  *(_QWORD *)&v4 = "Max number of instructions to scan for CSEMIRBuilder inst dominance checks";
  *((_QWORD *)&v4 + 1) = 74;
  v3 = &v2;
  v1 = 1;
  v2 = 10000;
  sub_1C61D8E94((uint64_t)&unk_1ED8310F8, "csemib-dom-threshold", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED8310F8, &dword_1C475E000);
}

uint64_t sub_1C54F1068(_DWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  int v17;

  v17 = 48;
  v3 = *(_QWORD *)(a2 + 24);
  if (!v3)
    goto LABEL_38;
  if ((*(unsigned int (**)(uint64_t, int *))(*(_QWORD *)v3 + 48))(v3, &v17))
    *a1 |= 2u;
  v17 = 67;
  v5 = *(_QWORD *)(a2 + 24);
  if (!v5)
    goto LABEL_38;
  if ((*(unsigned int (**)(uint64_t, int *))(*(_QWORD *)v5 + 48))(v5, &v17))
    *a1 |= 1u;
  v17 = 10;
  v6 = *(_QWORD *)(a2 + 24);
  if (!v6)
    goto LABEL_38;
  if ((*(unsigned int (**)(uint64_t, int *))(*(_QWORD *)v6 + 48))(v6, &v17))
    *a1 |= 4u;
  v17 = 73;
  v7 = *(_QWORD *)(a2 + 24);
  if (!v7)
    goto LABEL_38;
  if ((*(unsigned int (**)(uint64_t, int *))(*(_QWORD *)v7 + 48))(v7, &v17))
    *a1 |= 8u;
  v17 = 18;
  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
    goto LABEL_38;
  if ((*(unsigned int (**)(uint64_t, int *))(*(_QWORD *)v8 + 48))(v8, &v17))
    *a1 |= 0x40u;
  v17 = 69;
  v9 = *(_QWORD *)(a2 + 24);
  if (!v9)
    goto LABEL_38;
  if ((*(unsigned int (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v17))
    *a1 |= 0x10u;
  v17 = 72;
  v10 = *(_QWORD *)(a2 + 24);
  if (!v10)
    goto LABEL_38;
  if ((*(unsigned int (**)(uint64_t, int *))(*(_QWORD *)v10 + 48))(v10, &v17))
    *a1 |= 0x400u;
  v17 = 71;
  v11 = *(_QWORD *)(a2 + 24);
  if (!v11)
    goto LABEL_38;
  if ((*(unsigned int (**)(uint64_t, int *))(*(_QWORD *)v11 + 48))(v11, &v17))
    *a1 |= 0x200u;
  v17 = 46;
  v12 = *(_QWORD *)(a2 + 24);
  if (!v12)
    goto LABEL_38;
  if ((*(unsigned int (**)(uint64_t, int *))(*(_QWORD *)v12 + 48))(v12, &v17))
    *a1 |= 0x80u;
  v17 = 64;
  v13 = *(_QWORD *)(a2 + 24);
  if (!v13)
    goto LABEL_38;
  if ((*(unsigned int (**)(uint64_t, int *))(*(_QWORD *)v13 + 48))(v13, &v17))
    *a1 |= 0x1000u;
  v17 = 62;
  v14 = *(_QWORD *)(a2 + 24);
  if (!v14)
    goto LABEL_38;
  if ((*(unsigned int (**)(uint64_t, int *))(*(_QWORD *)v14 + 48))(v14, &v17))
    *a1 |= 0x2000u;
  v17 = 63;
  v15 = *(_QWORD *)(a2 + 24);
  if (v15)
  {
    result = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v15 + 48))(v15, &v17);
    if ((_DWORD)result)
      *a1 |= 0x4000u;
  }
  else
  {
LABEL_38:
    sub_1C485C2F0();
    return sub_1C54F12D4();
  }
  return result;
}

_QWORD *sub_1C54F12D4(_DWORD *a1, uint64_t a2, int a3)
{
  _QWORD *result;
  uint64_t (**v4)(_QWORD *);
  int v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6[0] = &off_1E816DC88;
  v6[1] = a2;
  v6[2] = &v5;
  v7 = v6;
  sub_1C54F1068(a1, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v4 = (uint64_t (**)(_QWORD *))(v6[0] + 32);
    result = v6;
    return (_QWORD *)(*v4)(result);
  }
  if (v7)
  {
    v4 = (uint64_t (**)(_QWORD *))(*v7 + 40);
    return (_QWORD *)(*v4)(result);
  }
  return result;
}

uint64_t sub_1C54F1374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 *a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  llvm::PointerType **v16;
  BOOL v17;
  uint64_t *v18;
  _BYTE *v19;
  uint64_t *v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  unint64_t v27;
  unsigned __int8 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int i;
  unsigned int v35;
  uint64_t *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v40;
  uint64_t v41;
  llvm::PointerType *v42;
  uint64_t v43;
  char v44;
  const llvm::Value *v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  void *v50;
  llvm::PointerType **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t (***v58)();
  void (**v59)(uint64_t (***)());
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  llvm::Value *v68;
  BOOL v69;
  uint64_t v70;
  int v71;
  char v72;
  int v73;
  unsigned __int16 v74;
  char v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  unsigned int v80;
  llvm::PointerType ***v81;
  llvm::PointerType **v82;
  llvm::PointerType ***v83;
  int v84;
  BOOL v85;
  unsigned int v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  int v90;
  char v91;
  char v92;
  int v93;
  uint64_t v94;
  BOOL v96;
  uint64_t v97;
  llvm::MachineFunction *v98;
  llvm::MachineInstr *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  llvm::PointerType ***v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  llvm::PointerType **v111;
  llvm::PointerType **v112;
  unint64_t v113;
  unint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  char *v119;
  llvm::Value *v120;
  uint64_t v121;
  char *v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  char v127;
  int v128;
  uint64_t *v129;
  _QWORD *v130;
  _BYTE *v131;
  unsigned int v132;
  uint64_t v133;
  char v134;
  llvm::DataLayout *v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int v140;
  int v141;
  llvm::PointerType **v142;
  void *v143[2];
  _BYTE v144[56];
  void *v145;
  _BYTE v146[16];
  void *v147;
  _QWORD v148[2];
  int v149;
  char *v150[2];
  uint64_t v151;
  int v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  llvm::PointerType **v156;
  void *v157[2];
  _BYTE v158[48];
  char v159;
  void *v160[2];
  _BYTE v161[16];
  void *v162[2];
  uint64_t v163;
  uint64_t v164;
  int v165;
  void *v166;
  uint64_t v167;
  _BYTE v168[4864];
  int v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  int v173;
  char v174;
  int v175;
  uint64_t (**v176)();
  llvm::PointerType **v177;
  int *v178;
  uint64_t (***v179)();
  uint64_t v180;

  v10 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v128 = v12;
  v133 = v13;
  v125 = v14;
  v131 = v15;
  v16 = (llvm::PointerType **)v11;
  v136 = v10;
  v17 = 0;
  v180 = *MEMORY[0x1E0C80C00];
  v18 = &v172;
  v152 = 0;
  LODWORD(v153) = 1;
  v19 = v158;
  v154 = 0u;
  v156 = 0;
  v157[0] = v158;
  v157[1] = (void *)0x400000000;
  v159 = 0;
  v20 = (uint64_t *)v161;
  v160[0] = v161;
  v160[1] = (void *)0x400000000;
  v162[0] = &v163;
  v162[1] = (void *)0x200000000;
  v164 = 0;
  v21 = v168;
  v166 = v168;
  v167 = 0x2000000000;
  v169 = 0;
  LOBYTE(v172) = 0;
  v170 = 0u;
  LOBYTE(v171) = 0;
  v173 = 0;
  v174 = 1;
  v175 = 0;
  v130 = v22;
  v23 = v22[1];
  v135 = (llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)v23 + 40) + 272);
  v121 = *(_QWORD *)(v23 + 40);
  if (*(_BYTE *)(v11 + 16) != 84)
    goto LABEL_31;
  if ((*(_WORD *)(v11 + 18) & 3u) - 1 > 1
    || !llvm::isInTailCallPosition((llvm *)v11, *(const llvm::CallBase **)(v23 + 8), (const llvm::TargetMachine *)v11))
  {
    v17 = 0;
    goto LABEL_31;
  }
  v24 = *(_QWORD *)(*(_QWORD *)v23 + 112);
  if (!v24 || !*(_DWORD *)(v24 + 8))
    goto LABEL_30;
  v25 = *(_QWORD *)(v24 + 40);
  if (!v25 || (LODWORD(v26) = *(_DWORD *)(v25 + 40), !(_DWORD)v26))
  {
    v17 = 1;
    goto LABEL_31;
  }
  v27 = *(_QWORD *)(v25 + 24);
  v28 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v29 = (unint64_t)&unk_1ED7EA000;
  if ((v28 & 1) == 0)
  {
LABEL_133:
    if (__cxa_guard_acquire(&qword_1ED7EAC88))
    {
      v109 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v109 = 0xFF51AFD7ED558CCDLL;
      *(_QWORD *)(v29 + 3200) = v109;
      __cxa_guard_release(&qword_1ED7EAC88);
    }
  }
  v30 = *(_QWORD *)(v29 + 3200);
  v31 = __ROR8__(v30 ^ 0xAE2F6180382EB467, 30);
  v32 = 0x9DDFEA08EB382D69
      * ((v30 + 0x1ED4D83DFEF8CF66) ^ ((0x9DDFEA08EB382D69
                                        * ((v31 - 0x58DDE70BBE0D1868) ^ (v30 + 0x1ED4D83DFEF8CF66))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v31 - 0x58DDE70BBE0D1868) ^ (v30 + 0x1ED4D83DFEF8CF66))));
  v33 = -348639895 * ((v32 >> 47) ^ v32);
  for (i = 1; ; ++i)
  {
    v35 = v33 & ((_DWORD)v26 - 1);
    v36 = (uint64_t *)(v27 + 24 * v35);
    v37 = *v36;
    if (*v36 == -1)
    {
      if ("disable-tail-calls" == (char *)-1)
        goto LABEL_26;
      goto LABEL_12;
    }
    if (v37 != -2)
      break;
    if ("disable-tail-calls" == (char *)-2)
      goto LABEL_26;
LABEL_12:
    if (v37 == -1)
      goto LABEL_30;
    v33 = i + v35;
  }
  if (v36[1] != 18)
    goto LABEL_12;
  v38 = *(_QWORD *)v37 == 0x2D656C6261736964 && *(_QWORD *)(v37 + 8) == 0x6C61632D6C696174;
  if (!v38 || *(_WORD *)(v37 + 16) != 29548)
    goto LABEL_12;
LABEL_26:
  v40 = v36[2];
  if (v40 && *(_DWORD *)(v40 + 16) == 4)
  {
    v17 = *(_DWORD *)(v40 + *(unsigned int *)(v40 + 12) + 25) != 1702195828;
    goto LABEL_31;
  }
LABEL_30:
  v17 = 1;
LABEL_31:
  v134 = v17;
  v41 = (*((unsigned __int16 *)v16 + 9) >> 2) & 0x3FF;
  v42 = *v16;
  v43 = (uint64_t)v16[8];
  v29 = *((_DWORD *)v16[9] + 2) > 0xFFu;
  v150[0] = (char *)&v151;
  v150[1] = (char *)0x400000000;
  v27 = v136;
  v124 = (uint64_t)v42;
  sub_1C54F1FB8(v136, v41, (llvm::LLVMContext **)v42, v43, (uint64_t)v150, v135);
  v126 = v41;
  v127 = v29;
  v44 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, char **, unint64_t))(*(_QWORD *)v27 + 32))(v27, v23, v41, v150, v29);
  *((_BYTE *)v18 + 12) = v44;
  if ((v44 & 1) == 0)
  {
    sub_1C626E61C(v136, v130, v16, (uint64_t)&v152);
    v134 = 0;
  }
  v46 = *((_DWORD *)v16 + 5);
  v47 = v46 & 0x7FFFFFF;
  v48 = *((unsigned __int8 *)v16 + 16);
  v129 = v18;
  if (v48 == 84)
  {
    v49 = 0;
    v50 = v19;
    v18 = v20;
  }
  else
  {
    if (v48 == 39)
      v49 = (*((_DWORD *)v16 + 20) + 1);
    else
      v49 = 2;
    v50 = v19;
    v18 = v20;
  }
  v51 = &v16[-4 * v47];
  v20 = &v163;
  if (v46 < 0)
  {
    v110 = (uint64_t)*(v51 - 1);
    if ((v110 & 0xFFFFFFFF0) != 0)
      v52 = (*((_DWORD *)v51 - 3) - *(_DWORD *)((char *)v51 - v110));
    else
      v52 = 0;
  }
  else
  {
    v52 = 0;
  }
  if (v51 != &v16[-4 * v52 - 4] - 4 * v49)
  {
    v122 = v21;
    v123 = v50;
    LODWORD(v23) = 0;
    v132 = *((_DWORD *)v16[9] + 3) - 1;
    v19 = (_BYTE *)((32 * v49 + 32 * v52) ^ 0xFFFFFFFFFFFFFFE0);
    v53 = -32 * v47;
    while (1)
    {
      v54 = v133 + 16 * v23;
      v55 = *(_BYTE **)v54;
      v56 = *(_QWORD *)(v54 + 8);
      v57 = (uint64_t *)v16[(unint64_t)v53 / 8];
      v141 = v23;
      v137 = 0;
      v138 = 0;
      v176 = &off_1E816DC40;
      v177 = v16;
      v178 = &v141;
      v179 = &v176;
      sub_1C54F1068(&v137, (uint64_t)&v176);
      v58 = v179;
      if (v179 == &v176)
      {
        v59 = (void (**)(uint64_t (***)()))(v176 + 4);
        v58 = &v176;
      }
      else
      {
        if (!v179)
          goto LABEL_42;
        v59 = (void (**)(uint64_t (***)()))(*v179 + 5);
      }
      (*v59)(v58);
LABEL_42:
      v139 = v137;
      v140 = v138;
      sub_1C4860878((uint64_t)&v142, v55, v56, *v57, v23, &v139, 1, v23 < v132, (uint64_t)v57);
      v23 = (v23 + 1);
      sub_1C54F2304(v136, (uint64_t *)&v142, v23, (uint64_t)v135, (uint64_t)v16);
      if ((*(_BYTE *)v143[0] & 8) != 0)
        v134 &= *((unsigned __int8 *)v16[(unint64_t)v53 / 8] + 16) < 0x1Cu;
      v27 = sub_1C4861E4C((uint64_t)&v166, (unint64_t)&v142, 1);
      v60 = (char *)v166;
      v29 = v167;
      v61 = (char *)v166 + 152 * v167;
      *(_QWORD *)v61 = *(_QWORD *)v27;
      *((_QWORD *)v61 + 1) = v61 + 24;
      *((_QWORD *)v61 + 2) = 0x400000000;
      if (*(_DWORD *)(v27 + 16))
        sub_1C4862300((uint64_t)(v61 + 8), v27 + 8);
      v61[72] = *(_BYTE *)(v27 + 72);
      v62 = &v60[152 * v29];
      *((_QWORD *)v62 + 10) = v62 + 96;
      v63 = (uint64_t)(v62 + 80);
      *(_QWORD *)(v63 + 8) = 0x400000000;
      if (*(_DWORD *)(v27 + 88))
        sub_1C48623F0(v63, v27 + 80);
      v64 = &v60[152 * v29];
      *((_QWORD *)v64 + 14) = v64 + 128;
      v65 = (uint64_t)(v64 + 112);
      *(_QWORD *)(v65 + 8) = 0x200000000;
      if (*(_DWORD *)(v27 + 120))
        sub_1C48623F0(v65, v27 + 112);
      v66 = &v60[152 * v29];
      v67 = *(_QWORD *)(v27 + 136);
      *((_DWORD *)v66 + 36) = *(_DWORD *)(v27 + 144);
      *((_QWORD *)v66 + 17) = v67;
      LODWORD(v167) = v167 + 1;
      if (v147 != v148)
        free(v147);
      if (v145 != v146)
        free(v145);
      if (v143[0] != v144)
        free(v143[0]);
      v53 += 32;
      if (v19 == (_BYTE *)v53)
      {
        v46 = *((_DWORD *)v16 + 5);
        v50 = v123;
        v20 = &v163;
        v21 = v122;
        goto LABEL_60;
      }
    }
  }
  if ((v46 & 0x80000000) == 0)
    goto LABEL_61;
  v111 = &v16[-4 * (v46 & 0x7FFFFFF)];
  v114 = (unint64_t)*(v111 - 1);
  v112 = v111 - 1;
  v113 = v114;
  if ((v114 & 0xFFFFFFFF0) == 0)
    goto LABEL_61;
LABEL_60:
  v115 = 0;
  v116 = (v113 >> 4);
  v117 = (uint64_t *)((char *)v112 - v113);
  do
  {
    v118 = *v117;
    v117 += 2;
    if (*(_DWORD *)(v118 + 8) == 7)
      ++v115;
    --v116;
  }
  while (v116);
  if (v115 && !*((_BYTE *)a9 + 16))
  {
    v119 = llvm::GlobalPtrAuthInfo::analyze((uint64_t ***)*(v16 - 4), v45);
    v120 = llvm::Value::stripPointerCasts(*(llvm::Value **)(*((_QWORD *)v119 - 4)
                                                          - 32
                                                          * (*(_DWORD *)(*((_QWORD *)v119 - 4) + 20) & 0x7FFFFFF)));
    v153 = 10;
    *(_QWORD *)&v154 = 0;
    *((_QWORD *)&v154 + 1) = v120;
    LODWORD(v155) = 0;
  }
  else
  {
LABEL_61:
    v68 = llvm::Value::stripPointerCasts(*(v16 - 4));
    if (v68)
      v69 = *((_BYTE *)v68 + 16) == 0;
    else
      v69 = 0;
    v26 = &v152;
    if (v69)
    {
      v153 = 10;
      *(_QWORD *)&v154 = 0;
      *((_QWORD *)&v154 + 1) = v68;
      LODWORD(v155) = 0;
    }
    else
    {
      v70 = *(_QWORD *)(a10 + 24);
      if (!v70)
      {
        sub_1C485C2F0();
        goto LABEL_133;
      }
      v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 48))(v70);
      LODWORD(v153) = 0;
      HIDWORD(v153) = v71;
      v155 = 0;
      v154 = 0uLL;
    }
  }
  v176 = 0;
  LODWORD(v177) = 0;
  sub_1C4860878((uint64_t)&v142, v131, v125, v124, 0, &v176, 1, 1, 0);
  v156 = v142;
  sub_1C48620A0((uint64_t)v157, (uint64_t)v143);
  v159 = v144[48];
  sub_1C48621E4((uint64_t)v160, (uint64_t)&v145);
  sub_1C48621E4((uint64_t)v162, (uint64_t)&v147);
  v164 = v148[1];
  v165 = v149;
  if (v147 != v148)
    free(v147);
  if (v145 != v146)
    free(v145);
  if (v143[0] != v144)
    free(v143[0]);
  if (*((_BYTE *)v156 + 8) == 7)
  {
    v72 = 0;
    v73 = 0;
  }
  else
  {
    sub_1C54F2304(v136, (uint64_t *)&v156, 0, (uint64_t)v135, (uint64_t)v16);
    v74 = sub_1C543FD8C((uint64_t)v16);
    v73 = 0;
    v72 = 0;
    if (v74 >= 0x100u)
    {
      v75 = v74;
      if ((_BYTE)v74)
      {
        v73 = llvm::MachineRegisterInfo::cloneVirtualRegister(v121, *(_DWORD *)v131, "", 0);
        *(_DWORD *)v160[0] = v73;
        v72 = v75;
      }
    }
  }
  *(_QWORD *)&v170 = v16;
  if ((*((_BYTE *)v16 + 23) & 0x20) == 0)
    goto LABEL_95;
  v76 = **(_QWORD **)*v16;
  v142 = v16;
  v77 = *(_DWORD *)(v76 + 2496);
  if (v77)
  {
    v78 = *(_QWORD *)(v76 + 2480);
    v79 = v77 - 1;
    v80 = v79 & ((v16 >> 4) ^ (v16 >> 9));
    v81 = (llvm::PointerType ***)(v78 + 40 * v80);
    v82 = *v81;
    if (*v81 == v16)
      goto LABEL_90;
    v83 = 0;
    v84 = 1;
    while (v82 != (llvm::PointerType **)-4096)
    {
      if (v83)
        v85 = 0;
      else
        v85 = v82 == (llvm::PointerType **)-8192;
      if (v85)
        v83 = v81;
      v86 = v80 + v84++;
      v80 = v86 & v79;
      v81 = (llvm::PointerType ***)(v78 + 40 * v80);
      v82 = *v81;
      if (*v81 == v16)
        goto LABEL_90;
    }
    if (v83)
      v107 = v83;
    else
      v107 = v81;
  }
  else
  {
    v107 = 0;
  }
  v81 = (llvm::PointerType ***)sub_1C541AB24(v76 + 2480, (uint64_t)&v142, (uint64_t *)&v142, v107);
  v108 = (uint64_t)v142;
  v81[3] = 0;
  v81[4] = 0;
  *v81 = (llvm::PointerType **)v108;
  v81[1] = (llvm::PointerType **)(v81 + 3);
  v81[2] = (llvm::PointerType **)0x100000000;
LABEL_90:
  v87 = *((unsigned int *)v81 + 4);
  if (!(_DWORD)v87)
  {
LABEL_95:
    v94 = 0;
    v90 = v128;
    v91 = v134;
    v93 = v126;
    v92 = v127;
    goto LABEL_96;
  }
  v88 = v81[1] + 1;
  v89 = 16 * v87;
  v90 = v128;
  v91 = v134;
  v93 = v126;
  v92 = v127;
  while (*((_DWORD *)v88 - 2) != 23)
  {
    v94 = 0;
    v88 += 2;
    v89 -= 16;
    if (!v89)
      goto LABEL_96;
  }
  v94 = *v88;
LABEL_96:
  *((_QWORD *)&v170 + 1) = v94;
  v152 = v93;
  v169 = v90;
  v171 = *a9;
  v172 = *((_QWORD *)a9 + 2);
  v96 = *((_BYTE *)v16 + 16) == 84 && (*((_WORD *)v16 + 9) & 3) == 2;
  *((_BYTE *)v129 + 8) = v96;
  *((_BYTE *)v129 + 9) = v91 & 1;
  *((_BYTE *)v129 + 11) = v92;
  v97 = (*(uint64_t (**)(uint64_t, _QWORD *, int *))(*(_QWORD *)v136 + 72))(v136, v130, &v152);
  if ((_DWORD)v97 && v73 && !*((_BYTE *)v129 + 9))
  {
    LODWORD(v137) = *(_DWORD *)v131;
    v138 = 1;
    LODWORD(v176) = v73;
    LODWORD(v178) = 0;
    v98 = (llvm::MachineFunction *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, uint64_t (***)(), uint64_t, _QWORD))(*v130 + 32))(v130, 44, &v137, 1, &v176, 1, 0);
    LODWORD(v142) = 1;
    v143[0] = 0;
    v143[1] = (void *)(1 << v72);
    llvm::MachineInstr::addOperand(v99, v98, (const llvm::MachineOperand *)&v142);
  }
  sub_1C54F54A4(v150);
  v100 = (char *)v166;
  if ((_DWORD)v167)
  {
    v101 = 152 * v167;
    do
    {
      v102 = &v100[v101];
      v103 = *(char **)&v100[v101 - 40];
      if (&v100[v101 - 24] != v103)
        free(v103);
      v104 = (char *)*((_QWORD *)v102 - 9);
      if (v102 - 56 != v104)
        free(v104);
      v105 = *(char **)&v100[v101 - 144];
      if (&v100[v101 - 128] != v105)
        free(v105);
      v101 -= 152;
    }
    while (v101);
    v100 = (char *)v166;
  }
  if (v100 != v21)
    free(v100);
  if (v162[0] != &v163)
    free(v162[0]);
  if (v160[0] != v18)
    free(v160[0]);
  if (v157[0] != v50)
    free(v157[0]);
  return v97;
}

void sub_1C54F1FB8(uint64_t a1, uint64_t a2, llvm::LLVMContext **a3, uint64_t a4, uint64_t a5, llvm::DataLayout *a6)
{
  llvm::LLVMContext *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  int v25;
  uint64_t v26;
  int v27;
  char *v28;
  char *v29;
  int *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int v35;
  unint64_t v36[2];
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  _QWORD v43[10];

  v43[8] = *MEMORY[0x1E0C80C00];
  v9 = *a3;
  v37 = 0;
  v38 = 0;
  v40 = a4;
  v41 = v43;
  v42 = 0x400000000;
  llvm::ComputeValueVTs(*(_QWORD *)(a1 + 8), a6, (uint64_t)a3, (uint64_t)&v41, 0, 0, 0);
  sub_1C54F12D4(&v37, (uint64_t)&v40, 0);
  v10 = (char *)v41;
  if ((_DWORD)v42)
  {
    v11 = &v39;
    v33 = (char *)v41 + 16 * v42;
    do
    {
      v12 = *(_QWORD *)v10;
      v13 = *((_QWORD *)v10 + 1);
      v14 = (*(uint64_t (**)(_QWORD, llvm::LLVMContext *, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8)
                                                                                             + 600))(*(_QWORD *)(a1 + 8), v9, a2, *(_QWORD *)v10, v13);
      LOBYTE(v36[0]) = (*(uint64_t (**)(_QWORD, llvm::LLVMContext *, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 592))(*(_QWORD *)(a1 + 8), v9, a2, v12, v13);
      v36[1] = 0;
      llvm::EVT::getTypeForEVT((llvm::EVT *)v36, v9);
      v34 = v15;
      v35 = v14;
      if (v14)
      {
        v16 = 0;
        v17 = *(_DWORD *)(a5 + 8);
        do
        {
          if (v17 >= *(_DWORD *)(a5 + 12))
          {
            v36[0] = 0;
            v32 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a5, 0, 80, v36);
            v24 = &v32[80 * *(unsigned int *)(a5 + 8)];
            *(_QWORD *)v24 = v34;
            *((_QWORD *)v24 + 1) = v24 + 24;
            *((_QWORD *)v24 + 2) = 0x400000000;
            sub_1C48609D4((unsigned int *)v24 + 2, &v37, v11);
            v24[72] = 1;
            v29 = *(char **)a5;
            v25 = *(_DWORD *)(a5 + 8);
            if (v25)
            {
              v30 = v11;
              v31 = &v29[80 * v25];
              v21 = (uint64_t)(v29 + 8);
              v20 = v32;
              do
              {
                v19 = v21 - 8;
                *(_QWORD *)v20 = *(_QWORD *)(v21 - 8);
                *((_QWORD *)v20 + 1) = v20 + 24;
                *((_QWORD *)v20 + 2) = 0x400000000;
                if (*(_DWORD *)(v21 + 8))
                  sub_1C48620A0((uint64_t)(v20 + 8), v21);
                v20[72] = *(_BYTE *)(v21 + 64);
                v20 += 80;
                v21 += 80;
                v22 = v32;
              }
              while ((char *)(v19 + 80) != v31);
              v29 = *(char **)a5;
              v26 = *(unsigned int *)(a5 + 8);
              if ((_DWORD)v26)
              {
                v23 = 80 * v26;
                v11 = v30;
                do
                {
                  if (&v29[v23 - 56] != *(char **)&v29[v23 - 72])
                  {
                    v28 = v29;
                    free(*(void **)&v29[v23 - 72]);
                    v22 = v32;
                    v29 = v28;
                  }
                  v23 -= 80;
                }
                while (v23);
                v29 = *(char **)a5;
              }
              else
              {
                v11 = v30;
              }
            }
            else
            {
              v22 = v32;
            }
            v27 = v36[0];
            if (v29 != (char *)(a5 + 16))
            {
              free(v29);
              v22 = v32;
            }
            *(_QWORD *)a5 = v22;
            v17 = *(_DWORD *)(a5 + 8) + 1;
            *(_DWORD *)(a5 + 12) = v27;
          }
          else
          {
            v18 = *(_QWORD *)a5 + 80 * v17;
            *(_QWORD *)v18 = v34;
            *(_QWORD *)(v18 + 8) = v18 + 24;
            *(_QWORD *)(v18 + 16) = 0x400000000;
            sub_1C48609D4((unsigned int *)(v18 + 8), &v37, v11);
            *(_BYTE *)(v18 + 72) = 1;
            v17 = *(_DWORD *)(a5 + 8) + 1;
          }
          *(_DWORD *)(a5 + 8) = v17;
          ++v16;
        }
        while (v16 != v35);
      }
      v10 += 16;
    }
    while (v10 != v33);
    v10 = (char *)v41;
  }
  if (v10 != (char *)v43)
    free(v10);
}

void sub_1C54F2304(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v10;
  llvm::AttributeList *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  int ParamStackAlignment;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  const char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;

  v10 = (unsigned int *)a2[1];
  v11 = (llvm::AttributeList *)(a5 + 64);
  v30 = *(_QWORD *)(a5 + 64);
  sub_1C54F12D4(v10, (uint64_t)&v30, a3);
  v12 = *a2;
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12)
  {
    v13 = **(_QWORD **)(v12 + 16);
    v14 = *(unsigned __int8 *)(v13 + 8);
  }
  else
  {
    v14 = *(_DWORD *)(*a2 + 8);
    v13 = *a2;
  }
  if (v14 == 15)
  {
    *v10 |= 0x80000000;
    v15 = *(_DWORD *)(v13 + 8);
    if ((v15 & 0xFE) == 0x12)
      v15 = *(_DWORD *)(**(_QWORD **)(v13 + 16) + 8);
    v10[2] = v15 >> 8;
    v12 = *a2;
  }
  llvm::DataLayout::getAlignment(a4, v12);
  if ((*(_WORD *)v10 & 0x610) != 0)
  {
    v21 = a3 - 1;
    v22 = sub_1C6199478(a5, v21);
    if (!v22)
    {
      v22 = sub_1C626E808(a5, v21);
      if (!v22)
        v22 = sub_1C626E87C(a5, v21);
    }
    sub_1C4768AD0(a4, v22);
    v24 = (unint64_t)(v23 + 7) >> 3;
    v26 = v25 == 1;
    llvm::DataLayout::getAlignment(a4, v22);
    v29 = ((1 << v28) + 0xFFFFFFFFLL + v24) & -(1 << v28);
    if (v26)
    v10[1] = v29;
    ParamStackAlignment = llvm::AttributeList::getParamStackAlignment(v11, v21);
    if ((unsigned __int16)ParamStackAlignment <= 0xFFu)
    {
      ParamStackAlignment = llvm::AttributeList::getParamAlignment(v11, v21);
      if ((unsigned __int16)ParamStackAlignment <= 0xFFu)
        ParamStackAlignment = 63
                            - __clz((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 576))(*(_QWORD *)(a1 + 8), v22, a4));
    }
  }
  else
  {
    ParamStackAlignment = v16;
    if (a3)
    {
      v18 = llvm::AttributeList::getParamStackAlignment(v11, a3 - 1);
      if ((v18 & 0xFF00) != 0)
        ParamStackAlignment = v18;
    }
  }
  *v10 = *v10 & 0xFF87FFFF | (((((ParamStackAlignment << 19) + 0x80000) >> 19) & 0xF) << 19);
  llvm::DataLayout::getAlignment(a4, *a2);
  v20 = *v10 & 0xF07FFFFF | (((((v19 << 23) + 0x800000) >> 23) & 0x1F) << 23);
  if ((*v10 & 0x1000) != 0)
    v20 = *v10 & 0xF07FFF7F | (((((v19 << 23) + 0x800000) >> 23) & 0x1F) << 23);
  *v10 = v20;
}

void sub_1C54F2560(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v9;
  llvm::AttributeList *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t ParamByValType;
  uint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  const char *v22;
  char v23;
  uint64_t v24;
  int ParamStackAlignment;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;

  v9 = (unsigned int *)a2[1];
  v10 = (llvm::AttributeList *)(a5 + 112);
  v29 = *(_QWORD *)(a5 + 112);
  sub_1C54F12D4(v9, (uint64_t)&v29, a3);
  v11 = *a2;
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12)
  {
    v12 = **(_QWORD **)(v11 + 16);
    v13 = *(unsigned __int8 *)(v12 + 8);
  }
  else
  {
    v13 = *(_DWORD *)(*a2 + 8);
    v12 = *a2;
  }
  if (v13 == 15)
  {
    *v9 |= 0x80000000;
    v14 = *(_DWORD *)(v12 + 8);
    if ((v14 & 0xFE) == 0x12)
      v14 = *(_DWORD *)(**(_QWORD **)(v12 + 16) + 8);
    v9[2] = v14 >> 8;
    v11 = *a2;
  }
  llvm::DataLayout::getAlignment(a4, v11);
  if ((*(_WORD *)v9 & 0x610) != 0)
  {
    v16 = a3 - 1;
    ParamByValType = llvm::AttributeList::getParamByValType(v10, v16);
    if (!ParamByValType)
    {
      ParamByValType = llvm::AttributeList::getParamInAllocaType(v10, v16);
      if (!ParamByValType)
        ParamByValType = llvm::AttributeList::getParamPreallocatedType(v10, v16);
    }
    sub_1C4768AD0(a4, ParamByValType);
    v19 = (unint64_t)(v18 + 7) >> 3;
    v21 = v20 == 1;
    llvm::DataLayout::getAlignment(a4, ParamByValType);
    v24 = ((1 << v23) + 0xFFFFFFFFLL + v19) & -(1 << v23);
    if (v21)
    v9[1] = v24;
    ParamStackAlignment = llvm::AttributeList::getParamStackAlignment(v10, v16);
    if ((unsigned __int16)ParamStackAlignment <= 0xFFu)
    {
      ParamStackAlignment = llvm::AttributeList::getParamAlignment(v10, v16);
      if ((unsigned __int16)ParamStackAlignment <= 0xFFu)
        ParamStackAlignment = 63
                            - __clz((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 576))(*(_QWORD *)(a1 + 8), ParamByValType, a4));
    }
  }
  else
  {
    ParamStackAlignment = v15;
    if (a3)
    {
      v26 = llvm::AttributeList::getParamStackAlignment(v10, a3 - 1);
      if ((v26 & 0xFF00) != 0)
        ParamStackAlignment = v26;
    }
  }
  *v9 = *v9 & 0xFF87FFFF | (((((ParamStackAlignment << 19) + 0x80000) >> 19) & 0xF) << 19);
  llvm::DataLayout::getAlignment(a4, *a2);
  v28 = *v9 & 0xF07FFFFF | (((((v27 << 23) + 0x800000) >> 23) & 0x1F) << 23);
  if ((*v9 & 0x1000) != 0)
    v28 = *v9 & 0xF07FFF7F | (((((v27 << 23) + 0x800000) >> 23) & 0x1F) << 23);
  *v9 = v28;
}

void sub_1C54F27B8(uint64_t a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  llvm::DataLayout *v10;
  uint64_t v11;
  unsigned int v12;
  int v14[6];
  unint64_t v15;
  int v16;
  void *v17[2];
  _BYTE v18[64];
  void *v19[2];
  _QWORD v20[9];

  v20[8] = *MEMORY[0x1E0C80C00];
  v10 = (llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(a6 + 8) + 40) + 272);
  v19[0] = v20;
  v19[1] = (void *)0x800000000;
  v17[0] = v18;
  v17[1] = (void *)0x800000000;
  llvm::computeValueLLTs(v10, a5, (unsigned int *)v19, (uint64_t)v17, 0);
  if (a3)
  {
    v11 = 0;
    v12 = 1;
    do
    {
      LODWORD(v15) = *(_DWORD *)(a2 + 4 * v11);
      v16 = 1;
      v14[0] = a4;
      v14[4] = 0;
      sub_1C5546FE4((uint64_t *)a6, &v15, v14, *((_QWORD *)v17[0] + v11));
      v11 = v12;
    }
    while (a3 > v12++);
  }
  if (v17[0] != v18)
    free(v17[0]);
  if (v19[0] != v20)
    free(v19[0]);
}

uint64_t sub_1C54F28EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, int a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t ***v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t v18;
  int v20[12];
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29[2];
  _QWORD v30[25];

  v30[24] = *MEMORY[0x1E0C80C00];
  v15 = (uint64_t ***)a5[1];
  v16 = *v15;
  v29[0] = v30;
  v29[1] = (void *)0x1000000000;
  llvm::CCState::CCState((uint64_t)v20, a6, a7, (uint64_t)v15, (uint64_t)v29, **v16);
  if (sub_1C54F2A64(a1, a3, a4, v20))
    v18 = sub_1C54F2CF0(a1, a2, (uint64_t)a4, v17, (uint64_t *)v29, a5, a9, a10);
  else
    v18 = 0;
  if (v27 != &v28)
    free(v27);
  if (v25 != &v26)
    free(v25);
  if (v23 != &v24)
    free(v23);
  if (v21 != &v22)
    free(v21);
  if (v29[0] != v30)
    free(v29[0]);
  return v18;
}

uint64_t sub_1C54F2A64(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t EVT;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int8 v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v22 = *((unsigned int *)a3 + 2);
  if (!(_DWORD)v22)
    return 1;
  v6 = 0;
  v24 = *((_QWORD *)a4 + 4);
  v23 = *a4;
  while (1)
  {
    EVT = llvm::EVT::getEVT(*(llvm::EVT **)(*a3 + 152 * v6), 0, (BOOL)a3);
    v9 = v8;
    v26 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 592))(*(_QWORD *)(a1 + 8), v24, v23, EVT, v8);
    v10 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 600))(*(_QWORD *)(a1 + 8), v24, v23, EVT, v9);
    v11 = *a3;
    if (v10 != 1)
      break;
    v21 = v21 & 0xFFFFFFFF00000000 | *(unsigned int *)(*(_QWORD *)(v11 + 152 * v6 + 8) + 8);
    if (((*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, v6, EVT, v9, v26, v26, 0) & 1) != 0)return 0;
LABEL_15:
    if (++v6 == v22)
      return 1;
  }
  v12 = v11 + 152 * v6;
  v13 = *(uint64_t **)(v12 + 8);
  v14 = *v13;
  v31 = *((unsigned int *)v13 + 2);
  *(_DWORD *)(v12 + 16) = 0;
  if (!v10)
    goto LABEL_15;
  v30 = v9;
  v15 = 0;
  v28 = v14 & 0xF07FFFFF;
  v29 = v14 & 0xFFFFFFFF00000000;
  v27 = v14 | 0x100;
  v16 = 12 * (v10 - 1);
  v17 = 12 * v10;
  while (1)
  {
    v18 = v16 == v15 ? 8390656 : 0x800000;
    v19 = v18 | v28;
    if (!v15)
      v19 = v27;
    v5 = v5 & 0xFFFFFFFF00000000 | v31;
    sub_1C4860960(*a3 + 152 * v6 + 8, v19 | v29, v5);
    v4 = v4 & 0xFFFFFFFF00000000 | *(unsigned int *)(*(_QWORD *)(*a3 + 152 * v6 + 8) + v15 + 8);
    if (((*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, v6, EVT, v30, v26, v26, 0) & 1) != 0)return 0;
    v15 += 12;
    if (v17 == v15)
      goto LABEL_15;
  }
}

uint64_t sub_1C54F2CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  const llvm::DataLayout *v25;
  unint64_t LLTForType;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  BOOL v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  const char *v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  void (*v48)(void);
  unsigned int v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  unsigned int v66;
  const char *v67;
  unsigned int v68;
  const char *v69;
  unsigned int v70;
  unint64_t v71;
  unsigned int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  BOOL v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  _QWORD *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 *v98;
  const char *v99;
  uint64_t v100;
  unsigned int v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  char *v107;
  char *v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  char v116;
  unsigned __int8 v117;
  unsigned int v118;
  unsigned __int8 v119;
  char v120;
  unsigned __int8 v121;
  char v122;
  int v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  const char *v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  llvm::MachineFunction *v136;
  llvm::MachineInstr *v137;
  llvm::MachineInstr *v138;
  char *v139;
  char *v140;
  char *v141;
  int v142;
  uint64_t v143;
  _DWORD *v144;
  uint64_t v145;
  int *v146;
  unint64_t v147;
  int v148;
  uint64_t v149;
  int v150;
  int v151;
  uint64_t v152;
  const char *v153;
  unint64_t v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  int v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unsigned int v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  const char *v172;
  unint64_t v173;
  const char *v174;
  unint64_t v175;
  int v176;
  char v177;
  unint64_t v178;
  int v179;
  unint64_t v180;
  char v181;
  char v182;
  unint64_t v183;
  unint64_t v184;
  char v185;
  uint64_t v186;
  int *v187;
  int v188;
  uint64_t v189;
  _BYTE *v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  int *v194;
  int v195;
  _BYTE *v196;
  _BYTE *v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  const char *v201;
  uint64_t v202;
  const char *v203;
  unint64_t v204;
  const char *v205;
  unint64_t v206;
  const char *v207;
  unint64_t v208;
  const char *v209;
  unint64_t v210;
  unsigned int v211;
  uint64_t v212;
  unint64_t v213;
  int v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  unsigned int v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  _BYTE *v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  int *v233;
  int v234;
  int v235;
  unint64_t v236;
  char v237;
  unint64_t v238;
  char v239;
  unint64_t v240;
  int *v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  int *v248;
  uint64_t v249;
  int v250;
  unint64_t v251;
  int v252;
  unint64_t v253;
  unint64_t v254;
  const char *v255;
  unint64_t v256;
  const char *v257;
  unint64_t v258;
  unint64_t v259;
  int v260;
  uint64_t v261;
  int GenericVirtualRegister;
  void *v263;
  int *v264;
  uint64_t v265;
  uint64_t v266;
  _BYTE *v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  _DWORD *v271;
  int v272;
  _DWORD *v273;
  uint64_t v274;
  llvm::MachineFunction *v275;
  llvm::MachineInstr *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  llvm::MachineInstr *v280;
  uint64_t v281;
  uint64_t v282;
  const char *v283;
  unsigned int v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  char v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  int v293;
  uint64_t v294;
  uint64_t v295;
  BOOL v296;
  char v297;
  char v298;
  unint64_t v299;
  char v300;
  char v301;
  unint64_t v302;
  char v303;
  char v304;
  uint64_t v305;
  char v306;
  char v307;
  unint64_t v308;
  char *v309;
  uint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  char *v313;
  uint64_t v314;
  uint64_t v316;
  int v317;
  unint64_t v318;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  int v324;
  unint64_t v325;
  unint64_t v326;
  unsigned __int8 EVT;
  uint64_t v329;
  unint64_t v330;
  unint64_t v331;
  uint64_t v332;
  int v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v337;
  llvm::Type *v338;
  uint64_t *v339;
  unint64_t v340;
  unint64_t v341;
  unsigned int __src;
  _DWORD *__srca;
  int v345;
  int v346;
  unint64_t v347;
  uint64_t v348;
  unsigned int v349;
  uint64_t v350;
  __int128 v352;
  uint64_t v353;
  unint64_t v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t v358;
  uint64_t v359;
  void *v360;
  uint64_t v361;
  _BYTE v362[32];
  _BYTE v363[24];
  void *__dst[2];
  _QWORD v365[5];
  _BYTE v366[24];
  _BYTE *v367;
  int v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  uint64_t v372;
  int v373;
  uint64_t v374;

  v374 = *MEMORY[0x1E0C80C00];
  v8 = (_QWORD *)a6[1];
  v9 = v8[5];
  v316 = (uint64_t)v8;
  v10 = *(_QWORD *)(*v8 + 40);
  v11 = *(unsigned int *)(a3 + 8);
  v360 = v362;
  v361 = 0x100000000;
  v12 = 1;
  if (!(_DWORD)v11)
    return v12;
  v13 = a6;
  v14 = (_QWORD *)a3;
  v15 = 0;
  v16 = 0;
  v338 = (llvm::Type *)(v10 + 272);
  v339 = a5;
  v320 = v11;
  v321 = v9;
  do
  {
    v17 = v16;
    v18 = *a5;
    if ((*(_BYTE *)(*a5 + 12 * v16 + 8) & 2) == 0)
    {
      v349 = v16;
      v19 = v18 + 12 * v16;
      v20 = *(unsigned __int8 *)(v19 + 9);
      v324 = *(unsigned __int8 *)(v19 + 10);
      llvm::LLT::LLT(&v355, *(_BYTE *)(v19 + 10));
      v329 = v20;
      llvm::LLT::LLT(&v354, v20);
      v22 = &v355;
      if (!*(_BYTE *)(a2 + 24))
        v22 = &v354;
      v23 = *v22;
      EVT = llvm::EVT::getEVT(*(llvm::EVT **)(*v14 + 152 * v15), 0, v21);
      v322 = v24;
      LLTForType = llvm::getLLTForType(*(llvm **)(*v14 + 152 * v15), v338, v25);
      v27 = *v14 + 152 * v15;
      v28 = *(unsigned int *)(v27 + 16);
      v29 = *(_BYTE **)(v27 + 80);
      v30 = &v29[4 * *(unsigned int *)(v27 + 88)];
      *(_DWORD *)(v27 + 120) = 0;
      sub_1C4860A74((unsigned int *)(v27 + 112), v29, v30);
      v330 = v28;
      v325 = LLTForType;
      v31 = (_DWORD)v28 == 1 && v23 == LLTForType;
      if (!v31)
      {
        sub_1C4A90934(*v14 + 152 * v15 + 80, v28);
        if ((_DWORD)v28)
        {
          v32 = 0;
          do
          {
            *(_DWORD *)(*(_QWORD *)(*v14 + 152 * v15 + 80) + v32) = llvm::MachineRegisterInfo::createGenericVirtualRegister(v9, v23, "", 0);
            v32 += 4;
          }
          while (4 * v330 != v32);
        }
      }
      v33 = (unsigned __int8 *)a2;
      v350 = v15;
      if (*(_BYTE *)(a2 + 24) || LLTForType == v354)
      {
LABEL_105:
        v80 = v339;
        if (*(_BYTE *)v338)
          v81 = 1;
        else
          v81 = EVT == 14;
        v82 = v81;
        v346 = v82;
        if ((_DWORD)v330)
        {
          v83 = 0;
          v84 = 0;
          if (v15)
            v85 = 1;
          else
            v85 = a8 == 0;
          v86 = !v85;
          v333 = v86;
          v87 = v330 - 1;
          do
          {
            v88 = *v14 + 152 * v15;
            v89 = *(unsigned int *)(*(_QWORD *)(v88 + 80) + 4 * v84);
            if (v346)
              v90 = v87;
            else
              v90 = v84;
            v91 = v90 + v349;
            v92 = *v80;
            v93 = (_QWORD *)(*v80 + 12 * (v90 + v349));
            v94 = (unint64_t *)(*(_QWORD *)(v88 + 8) + v83);
            v95 = *v94;
            v96 = *((unsigned int *)v94 + 2);
            v97 = *v94 & 0x10;
            if ((v93[1] & 1) == 0 || (_DWORD)v97)
            {
              v102 = v33[24];
              if ((v93[1] & 1) != 0 && (_DWORD)v97)
              {
                v103 = HIDWORD(v95);
                if (v33[24])
                {
                  *(_QWORD *)v366 = 0;
                  *(_QWORD *)&v366[8] = 0;
                  *(_QWORD *)&v366[13] = 0;
                  v337 = v337 & 0xFFFFFFFF00000000 | v96;
                  v104 = (*(uint64_t (**)(unsigned __int8 *, unint64_t, _QWORD, _BYTE *, unint64_t))(*(_QWORD *)v33 + 16))(v33, HIDWORD(v95), *(unsigned int *)(v92 + 12 * v91 + 4), v366, v95);
                  v14 = (_QWORD *)a3;
                  v15 = v350;
                  *(_DWORD *)v363 = **(_DWORD **)(*(_QWORD *)a3 + 152 * v350 + 80);
                  *(_DWORD *)&v363[8] = 1;
                  LODWORD(__dst[0]) = v104;
                  LODWORD(v365[0]) = 0;
                  (*(void (**)(uint64_t *, uint64_t, _BYTE *, uint64_t, void **, uint64_t, _QWORD))(*a6 + 32))(a6, 19, v363, 1, __dst, 1, 0);
                }
                else
                {
                  v109 = *(unsigned int *)(v92 + 12 * v91 + 4);
                  memset(v363, 0, 21);
                  v110 = (*(uint64_t (**)(unsigned __int8 *, unint64_t, uint64_t, _BYTE *, unint64_t, unint64_t))(*(_QWORD *)v33 + 16))(v33, HIDWORD(v95), v109, v363, v95, v318 & 0xFFFFFFFF00000000 | v96);
                  v111 = *(_QWORD *)(*(_QWORD *)a3 + 152 * v350 + 136);
                  *(_QWORD *)&v352 = v111 & 0xFFFFFFFFFFFFFFFBLL;
                  *((_QWORD *)&v352 + 1) = 0;
                  BYTE4(v353) = 0;
                  v318 = v318 & 0xFFFFFFFF00000000 | v96;
                  v317 = v110;
                  if (v111)
                  {
                    v113 = *(_QWORD *)v111;
                    v114 = *(_DWORD *)(*(_QWORD *)v111 + 8);
                    if ((v114 & 0xFE) == 0x12)
                      v114 = *(_DWORD *)(**(_QWORD **)(v113 + 16) + 8);
                    LODWORD(v115) = v114 >> 8;
                  }
                  else
                  {
                    if (v110 < 0 && (v110 & 0x7FFFFFFFu) < *(_DWORD *)(v321 + 432))
                      v112 = *(_QWORD *)(*(_QWORD *)(v321 + 424) + 8 * (v110 & 0x7FFFFFFF));
                    else
                      v112 = 0;
                    v116 = 19;
                    if ((v112 & 4) != 0)
                      v116 = 35;
                    v115 = (v112 >> v116) & 0xFFFFFF;
                    v352 = 0uLL;
                  }
                  LODWORD(v353) = v115;
                  if (((v95 >> 19) & 0xF) != 0)
                    v117 = ((v95 >> 19) & 0xF) - 1;
                  else
                    v117 = 0;
                  v118 = v117;
                  sub_1C62779F0(v316, v363);
                  if (v118 <= v119)
                    v120 = v119;
                  else
                    v120 = v118;
                  sub_1C62779F0(v316, &v352);
                  if (v118 <= v121)
                    v122 = v121;
                  else
                    v122 = v118;
                  v123 = **(_DWORD **)(*(_QWORD *)a3 + 152 * v350 + 80);
                  v124 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 128;
                  v125 = sub_1C484358C(v124, 80, 3);
                  v126 = ((unint64_t)(v103 & 0x1FFFFFFF) << 6) | 1;
                  *(_OWORD *)v125 = v352;
                  *(_QWORD *)(v125 + 16) = v353;
                  *(_QWORD *)(v125 + 24) = v126;
                  *(_WORD *)(v125 + 32) = 17;
                  *(_BYTE *)(v125 + 34) = v122;
                  *(_OWORD *)(v125 + 40) = 0u;
                  *(_OWORD *)(v125 + 56) = 0u;
                  *(_QWORD *)(v125 + 72) = 0;
                  *(_WORD *)(v125 + 36) = 1;
                  *(_OWORD *)__dst = *(_OWORD *)v363;
                  v365[0] = *(_QWORD *)&v363[16];
                  v127 = sub_1C484358C(v124, 80, 3);
                  v128 = 0;
                  *(_OWORD *)v127 = *(_OWORD *)__dst;
                  *(_QWORD *)(v127 + 16) = v365[0];
                  *(_QWORD *)(v127 + 24) = v126;
                  *(_WORD *)(v127 + 32) = 18;
                  *(_BYTE *)(v127 + 34) = v120;
                  *(_OWORD *)(v127 + 40) = 0u;
                  *(_OWORD *)(v127 + 56) = 0u;
                  *(_QWORD *)(v127 + 72) = 0;
                  *(_WORD *)(v127 + 36) = 1;
                  if (v317 < 0)
                  {
                    v129 = *(_QWORD *)(a2 + 16);
                    if ((v317 & 0x7FFFFFFFu) >= *(_DWORD *)(v129 + 432))
                      v128 = 0;
                    else
                      v128 = *(_QWORD *)(*(_QWORD *)(v129 + 424) + 8 * (v317 & 0x7FFFFFFF));
                  }
                  v359 = v128;
                  v131 = sub_1C4825F50((unint64_t *)&v359);
                  if ((_DWORD)v130 == 1)
                  v132 = *(_QWORD *)(a2 + 8);
                  *(_QWORD *)v366 = (8 * v131) | 1;
                  *(_DWORD *)&v366[8] = 0;
                  v133 = sub_1C5544694(v132, (unint64_t *)v366, v103);
                  v134 = *(_QWORD *)(a2 + 8);
                  *(_DWORD *)v366 = v317;
                  *(_DWORD *)&v366[16] = 0;
                  LODWORD(v367) = v123;
                  v368 = 0;
                  v369 = v133;
                  v370 = v135;
                  v371 = 1;
                  v372 = 0;
                  v373 = 3;
                  v136 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _BYTE *, uint64_t, _QWORD))(*(_QWORD *)v134 + 32))(v134, 234, 0, 0, v366, 4, 0);
                  v138 = v137;
                  llvm::MachineInstr::addMemOperand(v137, v136, (llvm::MachineMemOperand *)v127);
                  llvm::MachineInstr::addMemOperand(v138, v136, (llvm::MachineMemOperand *)v125);
                  v80 = v339;
                  v14 = (_QWORD *)a3;
                  v15 = v350;
                }
              }
              else
              {
                v105 = v333;
                if (!v33[24])
                  v105 = 0;
                v15 = v350;
                if (v105 != 1)
                  goto LABEL_137;
                if (!(*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 88))(a1, v329, 0))
                {
                  v33 = (unsigned __int8 *)a2;
                  v102 = *(unsigned __int8 *)(a2 + 24);
LABEL_137:
                  if (v102)
                  {
                    v331 = v331 & 0xFFFFFFFF00000000 | *((unsigned int *)v93 + 2);
                    (*(void (**)(unsigned __int8 *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v33 + 32))(v33, v89, *(unsigned int *)(v92 + 12 * v91 + 4), *v93);
                    v14 = (_QWORD *)a3;
                  }
                  else
                  {
                    __dst[0] = *(void **)v93;
                    *(_DWORD *)((char *)__dst + 7) = *(_DWORD *)((char *)v93 + 7);
                    v106 = v361;
                    if (v361 >= HIDWORD(v361))
                    {
                      *(_QWORD *)v366 = 0;
                      v139 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v360, 0, 32, (unint64_t *)v366);
                      v140 = &v139[32 * v361];
                      *((_QWORD *)v140 + 3) = 0;
                      v141 = (char *)operator new(0x20uLL);
                      *(_QWORD *)v141 = &off_1E816DCD0;
                      *((_QWORD *)v141 + 1) = a2;
                      *((_DWORD *)v141 + 4) = v89;
                      *(void **)(v141 + 20) = __dst[0];
                      *(_DWORD *)(v141 + 27) = *(_DWORD *)((char *)__dst + 7);
                      *((_QWORD *)v140 + 3) = v141;
                      sub_1C54F55E8((uint64_t)&v360, (uint64_t)v139);
                      v142 = *(_DWORD *)v366;
                      v14 = (_QWORD *)a3;
                      if (v360 != v362)
                        free(v360);
                      v360 = v139;
                      HIDWORD(v361) = v142;
                      LODWORD(v361) = v361 + 1;
                    }
                    else
                    {
                      *(_QWORD *)v366 = *v93;
                      *(_DWORD *)&v366[7] = *(_DWORD *)((char *)v93 + 7);
                      v107 = (char *)v360 + 32 * v361;
                      *((_QWORD *)v107 + 3) = 0;
                      v108 = (char *)operator new(0x20uLL);
                      *(_QWORD *)v108 = &off_1E816DCD0;
                      *((_QWORD *)v108 + 1) = a2;
                      *((_DWORD *)v108 + 4) = v89;
                      *(_QWORD *)(v108 + 20) = *(_QWORD *)v366;
                      *(_DWORD *)(v108 + 27) = *(_DWORD *)&v366[7];
                      *((_QWORD *)v107 + 3) = v108;
                      LODWORD(v361) = v106 + 1;
                      v14 = (_QWORD *)a3;
                    }
                    v80 = v339;
                  }
                  goto LABEL_142;
                }
                v326 = v326 & 0xFFFFFFFF00000000 | *((unsigned int *)v93 + 2);
                (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, v89, *(unsigned int *)(a7 + 4 * v84), *v93);
                v14 = (_QWORD *)a3;
              }
            }
            else
            {
              v98 = v33;
              v341 = v341 & 0xFFFFFFFF00000000 | v96;
              __dst[0] = (void *)(*(uint64_t (**)(unsigned __int8 *, llvm::Type *, uint64_t, unint64_t))(*(_QWORD *)v33 + 24))(v33, v338, *v80 + 12 * v91, v95);
              *(_QWORD *)v366 = 0;
              *(_QWORD *)&v366[8] = 0;
              *(_QWORD *)&v366[13] = 0;
              v100 = sub_1C4825F50((unint64_t *)__dst);
              if ((_DWORD)v99 == 1)
              v340 = v340 & 0xFFFFFFFF00000000 | v96;
              v101 = (*(uint64_t (**)(unsigned __int8 *, unint64_t, _QWORD, _BYTE *, unint64_t))(*(_QWORD *)v98 + 16))(v98, (unint64_t)(v100 + 7) >> 3, *(unsigned int *)(v92 + 12 * v91 + 4), v366, v95);
              v14 = (_QWORD *)a3;
              v15 = v350;
              (*(void (**)(unsigned __int8 *, uint64_t, uint64_t, _QWORD, void *, _BYTE *, _QWORD *))(*(_QWORD *)v98 + 48))(v98, *(_QWORD *)a3 + 152 * v350, v84, v101, __dst[0], v366, v93);
              v80 = v339;
            }
LABEL_142:
            ++v84;
            v83 += 12;
            --v87;
            v33 = (unsigned __int8 *)a2;
          }
          while (12 * v330 != v83);
        }
        v13 = a6;
        v11 = v320;
        if (!v33[24] || v324 == EVT && (v324 || !v322))
          goto LABEL_417;
        v143 = *v14 + 152 * v15;
        v144 = *(_DWORD **)(v143 + 112);
        v145 = *(unsigned int *)(v143 + 120);
        v146 = *(int **)(v143 + 80);
        v147 = *(unsigned int *)(v143 + 88);
        v148 = **(_DWORD **)(v143 + 8);
        v356 = v355;
        v357 = v325;
        if (v355 == v325)
        {
LABEL_416:
          v15 = v350;
LABEL_417:
          v47 = v330 - 1;
          v9 = v321;
          v17 = v349;
          goto LABEL_418;
        }
        __srca = v144;
        v347 = v147;
        v334 = a6[3];
        v149 = sub_1C4825F50(&v356);
        v151 = v150;
        v152 = sub_1C4825F50(&v357);
        v154 = v347;
        if (v149 == v152 && v151 == (_DWORD)v153 && (_DWORD)v145 == 1 && (_DWORD)v347 == 1)
        {
          v155 = *v146;
          LODWORD(__dst[0]) = *__srca;
          LODWORD(__dst[1]) = 1;
          *(_DWORD *)v366 = v155;
          *(_DWORD *)&v366[16] = 0;
          (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, _BYTE *, uint64_t, _QWORD))(*a6 + 32))(a6, 82, __dst, 1, v366, 1, 0);
          goto LABEL_416;
        }
        v156 = (int)v145;
        v157 = v356;
        v158 = v356 & 0xFFFFFFFFFFFFFFF9;
        if ((v356 & 0xFFFFFFFFFFFFFFF9) != 0)
          v159 = (v356 >> 2) & 1;
        else
          v159 = 0;
        v160 = v357;
        v161 = v357 & 0xFFFFFFFFFFFFFFF9;
        v162 = v357 & 4;
        v163 = (v357 >> 2) & 1;
        if ((v357 & 0xFFFFFFFFFFFFFFF9) == 0)
          LODWORD(v163) = 0;
        if (v159 == (_DWORD)v163)
        {
          if ((v356 & 1) != 0)
          {
            v164 = v356 >> 3;
          }
          else if ((v356 & 4) != 0)
          {
            v164 = (v356 & 2) != 0 ? (unsigned __int16)(v356 >> 19) : v356 >> 19;
          }
          else
          {
            v164 = (unsigned __int16)(v356 >> 3);
          }
          if ((v357 & 1) != 0)
          {
            v165 = v357 >> 3;
          }
          else if ((v357 & 4) != 0)
          {
            v165 = (v357 & 2) != 0 ? (unsigned __int16)(v357 >> 19) : v357 >> 19;
          }
          else
          {
            v165 = (unsigned __int16)(v357 >> 3);
          }
          if (v164 > v165)
          {
            if (v159)
            {
              if ((v356 & 2) != 0)
                v166 = 0x800000000000000;
              else
                v166 = 0x8000000000000;
              if ((v166 & v356) != 0)
              {
                llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v153);
                v156 = (int)v145;
                v154 = v347;
                LODWORD(v157) = v356;
                v160 = v357;
              }
              if ((v160 & 2) != 0)
                v167 = 0x800000000000000;
              else
                v167 = 0x8000000000000;
              if ((v167 & v160) != 0)
              {
                v295 = v156;
                llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v153);
                v156 = v295;
                v154 = v347;
                v160 = v357;
              }
              if ((unsigned __int16)(v157 >> 3) != (unsigned __int16)(v160 >> 3)
                || (_DWORD)v156 != 1
                || (_DWORD)v154 != 1)
              {
                v157 = v356;
                v161 = v160 & 0xFFFFFFFFFFFFFFF9;
                v162 = v160 & 4;
                v158 = v356 & 0xFFFFFFFFFFFFFFF9;
                goto LABEL_222;
              }
LABEL_220:
              v168 = *v146;
              if (*v146 < 0)
              {
                v170 = v334;
                if ((v168 & 0x7FFFFFFFu) >= *(_DWORD *)(v334 + 432))
                  v169 = 0;
                else
                  v169 = *(_QWORD *)(*(_QWORD *)(v334 + 424) + 8 * (v168 & 0x7FFFFFFF));
              }
              else
              {
                v169 = 0;
                v170 = v334;
              }
              v273 = __srca;
              if ((v148 & 2) != 0)
              {
                *(_QWORD *)v363 = v169;
                *(_DWORD *)&v363[8] = 0;
                LODWORD(__dst[0]) = v168;
                LODWORD(v365[0]) = 0;
                if ((v160 & 1) != 0)
                {
                  v274 = (v160 >> 3);
                }
                else if ((v160 & 4) != 0)
                {
                  if ((v160 & 2) != 0)
                    v274 = (unsigned __int16)(v160 >> 19);
                  else
                    v274 = (v160 >> 19);
                }
                else
                {
                  v274 = (unsigned __int16)(v160 >> 3);
                }
                v275 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t *, uint64_t, _BYTE *, uint64_t, void **, uint64_t, _QWORD))(*a6 + 32))(a6, 42, v363, 1, __dst, 1, 0);
              }
              else
              {
                if ((v148 & 1) == 0)
                  goto LABEL_406;
                *(_QWORD *)v363 = v169;
                *(_DWORD *)&v363[8] = 0;
                LODWORD(__dst[0]) = v168;
                LODWORD(v365[0]) = 0;
                if ((v160 & 1) != 0)
                {
                  v274 = (v160 >> 3);
                }
                else if ((v160 & 4) != 0)
                {
                  if ((v160 & 2) != 0)
                    v274 = (unsigned __int16)(v160 >> 19);
                  else
                    v274 = (v160 >> 19);
                }
                else
                {
                  v274 = (unsigned __int16)(v160 >> 3);
                }
                v275 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t *, uint64_t, _BYTE *, uint64_t, void **, uint64_t, _QWORD))(*a6 + 32))(a6, 43, v363, 1, __dst, 1, 0);
              }
              v280 = v276;
              *(_DWORD *)v366 = 1;
              *(_QWORD *)&v366[8] = 0;
              *(_QWORD *)&v366[16] = v274;
              llvm::MachineInstr::addOperand(v276, v275, (const llvm::MachineOperand *)v366);
              v168 = *(_DWORD *)(*((_QWORD *)v280 + 4) + 4);
              v273 = __srca;
LABEL_406:
              if ((*v273 & 0x80000000) != 0
                && (v281 = *v273 & 0x7FFFFFFF, v281 < *(_DWORD *)(v170 + 432)))
              {
                v282 = *(_QWORD *)(*(_QWORD *)(v170 + 424) + 8 * v281);
                v359 = v282;
                if ((v282 & 0xFFFFFFFFFFFFFFF9) != 0 && (v282 & 6) == 2)
                {
                  v284 = sub_1C4825F50((unint64_t *)&v359);
                  if ((_DWORD)v283 == 1)
                  v285 = (8 * v284) | 1;
                  v286 = *__srca;
                  *(_QWORD *)&v352 = v285;
                  DWORD2(v352) = 0;
                  LODWORD(__dst[0]) = v168;
                  LODWORD(v365[0]) = 0;
                  v287 = (*(uint64_t (**)(uint64_t *, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*a6 + 32))(a6, 119, &v352, 1, __dst, 1, 0);
                  *(_DWORD *)v363 = v286;
                  *(_DWORD *)&v363[8] = 1;
                  *(_QWORD *)v366 = v287;
                  *(_QWORD *)&v366[8] = v288;
                  *(_DWORD *)&v366[16] = 1;
                  (*(void (**)(uint64_t *, uint64_t, _BYTE *, uint64_t, _BYTE *, uint64_t, _QWORD))(*a6 + 32))(a6, 81, v363, 1, v366, 1, 0);
                  goto LABEL_416;
                }
              }
              else
              {
                v359 = 0;
              }
              LODWORD(__dst[0]) = *v273;
              LODWORD(__dst[1]) = 1;
              *(_DWORD *)v366 = v168;
              *(_DWORD *)&v366[16] = 0;
              goto LABEL_415;
            }
            if ((_DWORD)v145 == 1 && (_DWORD)v347 == 1)
              goto LABEL_220;
          }
        }
LABEL_222:
        if (v162 && v161)
        {
          v171 = v157 & 4;
        }
        else if (!v158 || (v171 = v157 & 4, (v157 & 4) == 0))
        {
          if ((*__srca & 0x80000000) != 0
            && (v198 = *__srca & 0x7FFFFFFF, v198 < *(_DWORD *)(v334 + 432)))
          {
            v199 = *(_QWORD *)(*(_QWORD *)(v334 + 424) + 8 * v198);
          }
          else
          {
            v199 = 0;
          }
          *(_QWORD *)v363 = v199;
          v200 = sub_1C4825F50(&v356);
          v202 = sub_1C4825F50((unint64_t *)v363);
          if ((_DWORD)v201 == 1)
          if (v200 * (_DWORD)v347 == v202)
          {
            *(_DWORD *)v366 = *__srca;
            *(_DWORD *)&v366[8] = 1;
            sub_1C5544D6C((uint64_t)a6, (uint64_t)v366, v146, v347);
            goto LABEL_416;
          }
          *(_QWORD *)v366 = (8 * (v200 * v347)) | 1;
          *(_DWORD *)&v366[8] = 0;
          v223 = sub_1C5544D6C((uint64_t)a6, (uint64_t)v366, v146, v347);
          LODWORD(__dst[0]) = *__srca;
          LODWORD(__dst[1]) = 1;
          *(_QWORD *)v366 = v223;
          *(_QWORD *)&v366[8] = v224;
          goto LABEL_398;
        }
        if (v158 && v171)
        {
          v335 = v156;
          *(_QWORD *)v366 = &v366[16];
          *(_QWORD *)&v366[8] = 0xC00000000;
          sub_1C4860A74((unsigned int *)v366, v146, &v146[v154]);
          v173 = sub_1C4825F50(&v356);
          if ((_DWORD)v172 == 1)
          v175 = sub_1C4825F50(&v357);
          if ((_DWORD)v174 == 1)
          if (v173 > v175)
          {
            if ((v356 & 1) != 0)
            {
              v176 = v356 >> 3;
            }
            else if ((v356 & 4) != 0)
            {
              v176 = (v356 & 2) != 0 ? (unsigned __int16)(v356 >> 19) : v356 >> 19;
            }
            else
            {
              v176 = (unsigned __int16)(v356 >> 3);
            }
            if ((v357 & 1) != 0)
            {
              v235 = v357 >> 3;
            }
            else if ((v357 & 4) != 0)
            {
              v235 = (v357 & 2) != 0 ? (unsigned __int16)(v357 >> 19) : v357 >> 19;
            }
            else
            {
              v235 = (unsigned __int16)(v357 >> 3);
            }
            if (v176 == 2 * v235 && (_DWORD)v347 == 1)
            {
              if ((v357 & 2) != 0)
              {
                v306 = 19;
                v307 = 35;
                if ((v357 & 4) == 0)
                  v307 = 19;
                v308 = v357 >> v307;
                if ((v357 & 4) == 0)
                  v306 = 3;
                if ((v357 & 1) != 0)
                  v306 = 3;
                v290 = (8 * (unsigned __int16)(v357 >> v306)) & 0xFFFFF8000007FFFFLL | ((v308 & 0xFFFFFF) << 19) | 2;
              }
              else
              {
                v289 = 3;
                if ((v357 & 1) == 0)
                  v289 = 19;
                v290 = v357 & 0x8000000000000000 | (8 * (v357 >> v289)) | 1;
              }
              __dst[0] = (void *)sub_1C626E984(&v356, v290);
              v291 = 0x800000000000000;
              if ((v356 & 2) == 0)
                v291 = 0x8000000000000;
              v292 = sub_1C626E9C8((unint64_t *)__dst, (v356 >> 2) & 0x1FFFE | ((unint64_t)((v291 & v356) != 0) << 32));
              v293 = *v146;
              *(_QWORD *)v363 = v292;
              *(_DWORD *)&v363[8] = 0;
              LODWORD(__dst[0]) = v293;
              LODWORD(v365[0]) = 0;
              (*(void (**)(uint64_t *, uint64_t, _BYTE *, uint64_t, void **, uint64_t, _QWORD))(*a6 + 32))(a6, 82, v363, 1, __dst, 1, 0);
              **(_DWORD **)v366 = *(_DWORD *)(*(_QWORD *)(v294 + 32) + 4);
              v356 = v292;
            }
          }
          v236 = v357;
          if ((v357 & 0xFFFFFFFFFFFFFFF9) != 0)
          {
            v236 = v357;
            if ((v357 & 4) != 0)
            {
              v237 = 3;
              if ((v357 & 1) == 0)
                v237 = 19;
              v238 = v357 >> v237;
              if ((v357 & 2) != 0)
                v236 = (v357 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v238) | 2;
              else
                v236 = v357 & 0x8000000000000000 | (8 * v238) | 1;
            }
          }
          if ((v356 & 2) != 0)
          {
            v300 = 19;
            v301 = 35;
            if ((v356 & 4) == 0)
              v301 = 19;
            v302 = v356 >> v301;
            if ((v356 & 4) == 0)
              v300 = 3;
            if ((v356 & 1) != 0)
              v300 = 3;
            v240 = (8 * (unsigned __int16)(v356 >> v300)) & 0xFFFFF8000007FFFFLL | ((v302 & 0xFFFFFF) << 19) | 2;
          }
          else
          {
            v239 = 3;
            if ((v356 & 1) == 0)
              v239 = 19;
            v240 = v356 & 0x8000000000000000 | (8 * (v356 >> v239)) | 1;
          }
          if (v236 == v240)
          {
            v241 = *(int **)v366;
            v348 = *(unsigned int *)&v366[8];
          }
          else
          {
            v242 = sub_1C554F3C8(v357, v356);
            v241 = *(int **)v366;
            if (*(_DWORD *)&v366[8])
            {
              v243 = v242;
              v244 = 0;
              v245 = 4 * *(unsigned int *)&v366[8];
              do
              {
                v246 = v241[v244 / 4];
                *(_QWORD *)v363 = v243;
                *(_DWORD *)&v363[8] = 0;
                LODWORD(__dst[0]) = v246;
                LODWORD(v365[0]) = 0;
                (*(void (**)(uint64_t *, uint64_t, _BYTE *, uint64_t, void **, uint64_t, _QWORD))(*a6 + 32))(a6, 82, v363, 1, __dst, 1, 0);
                v248 = *(int **)v366;
                *(_DWORD *)(*(_QWORD *)v366 + v244) = *(_DWORD *)(*(_QWORD *)(v247 + 32) + 4);
                v244 += 4;
              }
              while (v245 != v244);
              v348 = *(unsigned int *)&v366[8];
              v241 = v248;
            }
            else
            {
              v348 = 0;
            }
          }
          v249 = a6[3];
          v250 = *__srca;
          if ((*__srca & 0x80000000) != 0 && (v250 & 0x7FFFFFFFu) < *(_DWORD *)(v249 + 432))
            v251 = *(_QWORD *)(*(_QWORD *)(v249 + 424) + 8 * (v250 & 0x7FFFFFFF));
          else
            v251 = 0;
          v359 = v251;
          v252 = *v241;
          if (*v241 < 0 && (v252 & 0x7FFFFFFFu) < *(_DWORD *)(v249 + 432))
            v253 = *(_QWORD *)(*(_QWORD *)(v249 + 424) + 8 * (v252 & 0x7FFFFFFF));
          else
            v253 = 0;
          v254 = sub_1C554F268(v251, v253);
          v358 = v254;
          if (v254 == v251)
          {
            LODWORD(__dst[0]) = v250;
            LODWORD(__dst[1]) = 1;
            sub_1C5547BE0((uint64_t)a6, (uint64_t)__dst, v241, v348);
          }
          else
          {
            if (v254 == v253)
            {
              v256 = sub_1C4825F50(&v358);
              if ((_DWORD)v255 == 1)
              v258 = sub_1C4825F50((unint64_t *)&v359);
              v14 = (_QWORD *)a3;
              if ((_DWORD)v257 == 1)
              v259 = v256 / v258;
              __dst[0] = v365;
              __dst[1] = (void *)0x800000000;
              sub_1C4893E04((char *)__dst, (int)v259, 0);
              if ((_DWORD)v145)
                memmove(__dst[0], __srca, 4 * v145);
              if ((_DWORD)v335 != (_DWORD)v259)
              {
                v260 = v259 - v145;
                v261 = 4 * v335;
                do
                {
                  GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v249, v359, "", 0);
                  *(_DWORD *)((char *)__dst[0] + v261) = GenericVirtualRegister;
                  v261 += 4;
                  --v260;
                }
                while (v260);
              }
              if (LODWORD(__dst[1]) == 1)
              {
                LODWORD(v352) = *__srca;
                DWORD2(v352) = 1;
                *(_DWORD *)v363 = v252;
                *(_DWORD *)&v363[16] = 0;
                sub_1C5544EB0(a6, (unint64_t *)&v352, (int *)v363);
              }
              else
              {
                *(_DWORD *)v363 = v252;
                *(_DWORD *)&v363[16] = 0;
                sub_1C5547540((uint64_t)a6, (char *)__dst[0], LODWORD(__dst[1]), (uint64_t)v363);
              }
              if (__dst[0] != v365)
                free(__dst[0]);
              goto LABEL_361;
            }
            *(_DWORD *)v363 = v250;
            *(_DWORD *)&v363[8] = 1;
            *(_QWORD *)&v352 = v254;
            DWORD2(v352) = 0;
            __dst[0] = (void *)sub_1C5544D6C((uint64_t)a6, (uint64_t)&v352, v241, v348);
            __dst[1] = v263;
            LODWORD(v365[0]) = 1;
            sub_1C5544EB0(a6, (unint64_t *)v363, (int *)__dst);
          }
          v14 = (_QWORD *)a3;
LABEL_361:
          v196 = *(_BYTE **)v366;
          v197 = &v366[16];
LABEL_362:
          if (v196 != v197)
            free(v196);
          goto LABEL_416;
        }
        if ((v160 & 2) != 0)
        {
          v296 = v162 == 0;
          v297 = 19;
          v298 = 35;
          if (v296)
            v298 = 19;
          v299 = v160 >> v298;
          if (v296)
            v297 = 3;
          if ((v160 & 1) != 0)
            v297 = 3;
          v178 = (8 * (unsigned __int16)(v160 >> v297)) & 0xFFFFF8000007FFFFLL | ((v299 & 0xFFFFFF) << 19) | 2;
        }
        else
        {
          v177 = 3;
          if ((v160 & 1) == 0)
            v177 = 19;
          v178 = v160 & 0x8000000000000000 | (8 * (v160 >> v177)) | 1;
        }
        *(_QWORD *)&v352 = v178;
        v179 = *__srca;
        if ((*__srca & 0x80000000) != 0 && (v179 & 0x7FFFFFFFu) < *(_DWORD *)(v334 + 432))
        {
          v180 = *(_QWORD *)(*(_QWORD *)(v334 + 424) + 8 * (v179 & 0x7FFFFFFF));
          if ((v180 & 2) != 0)
          {
            v181 = 19;
            v182 = 35;
            if ((v180 & 4) == 0)
              v182 = 19;
            v183 = v180 >> v182;
            if ((v180 & 4) == 0)
              v181 = 3;
            if ((v180 & 1) != 0)
              v181 = 3;
            v184 = (8 * (unsigned __int16)(v180 >> v181)) & 0xFFFFF8000007FFFFLL | ((v183 & 0xFFFFFF) << 19) | 2;
            goto LABEL_255;
          }
        }
        else
        {
          v180 = 0;
        }
        v185 = 3;
        if ((v180 & 1) == 0)
          v185 = 19;
        v184 = v180 & 0x8000000000000000 | (8 * (v180 >> v185)) | 1;
LABEL_255:
        if (v178 == v157)
        {
          if ((v184 & 0xFFFFFFFFFFFFFFF9) != 0 && (v184 & 2) != 0 && (v184 & 4) == 0)
          {
            if (!(_DWORD)v154)
            {
              v195 = 0;
              LODWORD(__dst[0]) = *__srca;
              LODWORD(__dst[1]) = 1;
              *(_QWORD *)v366 = &v366[16];
              *(_DWORD *)&v366[12] = 8;
              goto LABEL_269;
            }
            v186 = 4 * v154;
            v187 = v146;
            do
            {
              v188 = *v187++;
              llvm::MachineRegisterInfo::setType((_QWORD *)v334, v188, v184);
              v186 -= 4;
            }
            while (v186);
            v154 = v347;
            v179 = *__srca;
          }
          LODWORD(__dst[0]) = v179;
          LODWORD(__dst[1]) = 1;
          *(_QWORD *)v366 = &v366[16];
          *(_QWORD *)&v366[8] = 0x800000000;
          if (v154 >= 9)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v366, (uint64_t)&v366[16], v154, 24);
            v154 = v347;
            v189 = *(unsigned int *)&v366[8];
            v190 = *(_BYTE **)v366;
LABEL_266:
            v191 = 24 * v189;
            v192 = 4 * v154;
            do
            {
              v193 = *v146++;
              v194 = (int *)&v190[v191];
              *v194 = v193;
              v194[4] = 0;
              v191 += 24;
              v192 -= 4;
            }
            while (v192);
            v195 = *(_DWORD *)&v366[8];
            goto LABEL_269;
          }
          if ((_DWORD)v154)
          {
            v189 = 0;
            v190 = &v366[16];
            goto LABEL_266;
          }
          v195 = 0;
LABEL_269:
          *(_DWORD *)&v366[8] = v195 + v154;
          (*(void (**)(uint64_t *, uint64_t, void **, uint64_t))(*a6 + 32))(a6, 77, __dst, 1);
          v196 = *(_BYTE **)v366;
          v197 = &v366[16];
          goto LABEL_362;
        }
        v204 = sub_1C4825F50((unint64_t *)&v352);
        if ((_DWORD)v203 == 1)
        v206 = sub_1C4825F50(&v356);
        if ((_DWORD)v205 == 1)
        if (v204 > v206)
        {
          __dst[0] = v365;
          __dst[1] = (void *)0x800000000;
          v208 = sub_1C4825F50((unint64_t *)&v352);
          if ((_DWORD)v207 == 1)
          v210 = sub_1C4825F50(&v356);
          if ((_DWORD)v209 == 1)
          v211 = v357;
          v212 = 0x800000000000000;
          if ((v357 & 2) == 0)
            v212 = 0x8000000000000;
          v31 = (v212 & v357) == 0;
          v213 = v347;
          if (!v31)
          {
            llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v209);
            v213 = v347;
            v211 = v357;
          }
          v214 = (unsigned __int16)(v211 >> 3);
          if ((unsigned __int16)(v211 >> 3))
          {
            v215 = (int)(v208 / v210);
            do
            {
              *(_QWORD *)v366 = v184;
              *(_DWORD *)&v366[8] = 0;
              v216 = v213 - v215;
              if (v213 >= v215)
                v217 = v215;
              else
                v217 = v213;
              sub_1C5544D6C((uint64_t)a6, (uint64_t)v366, v146, v217);
              v219 = v218;
              llvm::MachineRegisterInfo::setType((_QWORD *)v334, *(_DWORD *)(*(_QWORD *)(v218 + 32) + 4), v184);
              v220 = *(_DWORD *)(*(_QWORD *)(v219 + 32) + 4);
              v221 = LODWORD(__dst[1]);
              if (LODWORD(__dst[1]) >= (unint64_t)HIDWORD(__dst[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__dst, (uint64_t)v365, LODWORD(__dst[1]) + 1, 4);
                v221 = LODWORD(__dst[1]);
              }
              *((_DWORD *)__dst[0] + v221) = v220;
              v222 = ++LODWORD(__dst[1]);
              v146 += v215;
              v213 = v216;
              --v214;
            }
            while (v214);
          }
          else
          {
            v222 = __dst[1];
          }
          *(_DWORD *)v363 = *__srca;
          *(_DWORD *)&v363[8] = 1;
          v264 = (int *)__dst[0];
          v265 = v222;
          *(_QWORD *)v366 = &v366[16];
          *(_QWORD *)&v366[8] = 0x800000000;
          if (v222 >= 9)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v366, (uint64_t)&v366[16], v222, 24);
            v266 = *(unsigned int *)&v366[8];
            v267 = *(_BYTE **)v366;
          }
          else
          {
            if (!v222)
            {
              v272 = 0;
              v267 = &v366[16];
LABEL_400:
              *(_DWORD *)&v366[8] = v272 + v265;
              (*(void (**)(uint64_t *, uint64_t, _BYTE *, uint64_t, _BYTE *))(*a6 + 32))(a6, 77, v363, 1, v267);
              if (*(_BYTE **)v366 != &v366[16])
                free(*(void **)v366);
              v196 = __dst[0];
              v197 = v365;
              goto LABEL_362;
            }
            v266 = 0;
            v267 = &v366[16];
          }
          v268 = 24 * v266;
          v269 = 4 * v265;
          do
          {
            v270 = *v264++;
            v271 = &v267[v268];
            *v271 = v270;
            v271[4] = 0;
            v268 += 24;
            v269 -= 4;
          }
          while (v269);
          v272 = *(_DWORD *)&v366[8];
          goto LABEL_400;
        }
        v225 = v357;
        v226 = 0x800000000000000;
        if ((v357 & 2) == 0)
          v226 = 0x8000000000000;
        if ((v226 & v357) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v205);
          v225 = v357;
        }
        __dst[0] = (void *)sub_1C4953AD0((unsigned __int16)(v225 >> 3), v356);
        LODWORD(__dst[1]) = 0;
        *(_QWORD *)v366 = &v366[16];
        *(_QWORD *)&v366[8] = 0x800000000;
        v227 = v347;
        if (v347 >= 9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v366, (uint64_t)&v366[16], v347, 24);
          v227 = v347;
          v228 = *(unsigned int *)&v366[8];
          v229 = *(_BYTE **)v366;
        }
        else
        {
          if (!(_DWORD)v347)
          {
            v234 = 0;
            v229 = &v366[16];
LABEL_395:
            *(_DWORD *)&v366[8] = v234 + v227;
            v277 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, _BYTE *))(*a6 + 32))(a6, 77, __dst, 1, v229);
            v279 = v278;
            if (*(_BYTE **)v366 != &v366[16])
              free(*(void **)v366);
            LODWORD(__dst[0]) = *__srca;
            LODWORD(__dst[1]) = 1;
            *(_QWORD *)v366 = v277;
            *(_QWORD *)&v366[8] = v279;
LABEL_398:
            *(_DWORD *)&v366[16] = 1;
LABEL_415:
            (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, _BYTE *, uint64_t, _QWORD))(*a6 + 32))(a6, 119, __dst, 1, v366, 1, 0);
            goto LABEL_416;
          }
          v228 = 0;
          v229 = &v366[16];
        }
        v230 = 24 * v228;
        v231 = 4 * v227;
        do
        {
          v232 = *v146++;
          v233 = (int *)&v229[v230];
          *v233 = v232;
          v233[4] = 0;
          v230 += 24;
          v231 -= 4;
        }
        while (v231);
        v234 = *(_DWORD *)&v366[8];
        goto LABEL_395;
      }
      v34 = *v14 + 152 * v15;
      v35 = *(char **)(v34 + 80);
      v36 = *(unsigned int *)(v34 + 88);
      v345 = **(_DWORD **)(v34 + 112);
      v37 = **(_DWORD **)(v34 + 8);
      if ((v37 & 1) != 0)
        v38 = 126;
      else
        v38 = 118;
      if ((v37 & 2) != 0)
        v39 = 124;
      else
        v39 = v38;
      __src = v39;
      *(_QWORD *)v363 = LLTForType;
      *(_QWORD *)&v352 = v354;
      v41 = sub_1C4825F50((unint64_t *)&v352);
      if ((_DWORD)v40 == 1)
      v42 = v352;
      v43 = ((unint64_t)v352 >> 2) & 1;
      if ((v352 & 0xFFFFFFFFFFFFFFF9) == 0)
        LODWORD(v43) = 0;
      v44 = *(_QWORD *)v363;
      v45 = (*(_QWORD *)v363 >> 2) & 1;
      if ((*(_QWORD *)v363 & 0xFFFFFFFFFFFFFFF9) == 0)
        LODWORD(v45) = 0;
      if ((_DWORD)v43 == (_DWORD)v45)
      {
        if ((v352 & 1) != 0)
        {
          v46 = (unint64_t)v352 >> 3;
        }
        else if ((v352 & 4) != 0)
        {
          v46 = (v352 & 2) != 0 ? (unsigned __int16)((unint64_t)v352 >> 19) : (unint64_t)v352 >> 19;
        }
        else
        {
          v46 = (unsigned __int16)((unint64_t)v352 >> 3);
        }
        if ((v363[0] & 1) != 0)
        {
          v49 = *(_QWORD *)v363 >> 3;
        }
        else if ((v363[0] & 4) != 0)
        {
          v49 = (v363[0] & 2) != 0 ? (unsigned __int16)(*(_QWORD *)v363 >> 19) : *(_QWORD *)v363 >> 19;
        }
        else
        {
          v49 = (unsigned __int16)(*(_QWORD *)v363 >> 3);
        }
        if (v46 > v49)
        {
          LODWORD(__dst[0]) = *(_DWORD *)v35;
          LODWORD(__dst[1]) = 1;
          *(_DWORD *)v366 = v345;
          *(_DWORD *)&v366[16] = 0;
          (*(void (**)(uint64_t *, _QWORD, void **, uint64_t, _BYTE *, uint64_t, _QWORD))(*v13 + 32))(v13, __src, __dst, 1, v366, 1, 0);
LABEL_63:
          v15 = v350;
LABEL_104:
          v33 = (unsigned __int8 *)a2;
          goto LABEL_105;
        }
      }
      if (((v43 | v45 ^ 1) & 1) == 0)
      {
        v50 = 3;
        if ((v363[0] & 1) == 0)
          v50 = 19;
        v51 = *(_QWORD *)v363 >> v50;
        v332 = v36;
        if ((v363[0] & 2) != 0)
          v52 = (*(_QWORD *)v363 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v51) | 2;
        else
          v52 = *(_QWORD *)v363 & 0x8000000000000000 | (8 * v51) | 1;
        v15 = v350;
        *(_QWORD *)v366 = v52;
        v54 = sub_1C4825F50((unint64_t *)v366);
        if ((_DWORD)v53 == 1)
        v44 = *(_QWORD *)v363;
        if (v41 > v54)
        {
          if ((v363[0] & 2) != 0)
          {
            v303 = 19;
            v304 = 35;
            if ((v363[0] & 4) == 0)
              v304 = 19;
            v305 = *(_QWORD *)v363 >> v304;
            if ((v363[0] & 4) == 0)
              v303 = 3;
            if ((v363[0] & 1) != 0)
              v303 = 3;
            v56 = (8 * (unsigned __int16)(*(_QWORD *)v363 >> v303)) & 0xFFFFF8000007FFFFLL | ((v305 & 0xFFFFFF) << 19) | 2;
          }
          else
          {
            v55 = 3;
            if ((v363[0] & 1) == 0)
              v55 = 19;
            v56 = *(_QWORD *)v363 & 0x8000000000000000 | (8 * (*(_QWORD *)v363 >> v55)) | 1;
          }
          *(_DWORD *)v366 = v345;
          *(_DWORD *)&v366[16] = 0;
          sub_1C5544C30(v13, v56, (int *)v366);
          if ((_DWORD)v332)
          {
            v58 = v57;
            v59 = 0;
            do
            {
              v60 = *(_DWORD *)v35;
              v35 += 4;
              LODWORD(__dst[0]) = v60;
              LODWORD(__dst[1]) = 1;
              *(_DWORD *)v366 = *(_DWORD *)(*(_QWORD *)(v58 + 32) + v59 + 4);
              *(_DWORD *)&v366[16] = 0;
              (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, _BYTE *, uint64_t, _QWORD))(*v13 + 32))(v13, 118, __dst, 1, v366, 1, 0);
              v59 += 32;
            }
            while (32 * v332 != v59);
          }
          goto LABEL_104;
        }
        v42 = v352;
        v36 = v332;
      }
      if (sub_1C554F3C8(v44, v42) == v42)
      {
        *(_DWORD *)v366 = v345;
        *(_DWORD *)&v366[16] = 0;
        sub_1C5547540((uint64_t)v13, v35, v36, (uint64_t)v366);
        goto LABEL_63;
      }
      if ((*(_DWORD *)v35 & 0x80000000) != 0
        && (v61 = v13[3], v62 = *(_DWORD *)v35 & 0x7FFFFFFF, v62 < *(_DWORD *)(v61 + 432)))
      {
        v63 = v36;
        v64 = *(_QWORD *)(*(_QWORD *)(v61 + 424) + 8 * v62);
      }
      else
      {
        v63 = v36;
        v64 = 0;
      }
      v359 = v64;
      v358 = sub_1C554F268(v44, v42);
      v66 = sub_1C4825F50((unint64_t *)&v359);
      if ((_DWORD)v65 == 1)
      v68 = sub_1C4825F50((unint64_t *)v363);
      v15 = v350;
      if ((_DWORD)v67 == 1)
      v70 = sub_1C4825F50(&v358);
      if ((_DWORD)v69 == 1)
      v71 = (v358 >> 2) & 1;
      if ((v358 & 0xFFFFFFFFFFFFFFF9) == 0)
        LOBYTE(v71) = 0;
      if ((v71 & 1) != 0)
      {
        v77 = v345;
      }
      else
      {
        v72 = v68 - v70;
        if (v68 == v70)
        {
          v77 = v345;
        }
        else
        {
          if ((v363[0] & 1) == 0 || (v359 & 1) == 0)
          {
            *(_QWORD *)v366 = *(_QWORD *)v363;
            *(_DWORD *)&v366[8] = 0;
            (*(void (**)(uint64_t *, uint64_t, _BYTE *, uint64_t, _QWORD, _QWORD, _QWORD))(*v13 + 32))(v13, 68, v366, 1, 0, 0, 0);
            v74 = *(_DWORD *)(*(_QWORD *)(v73 + 32) + 4);
            *(_QWORD *)v366 = &v366[16];
            *(_QWORD *)&v366[8] = 0x800000000;
            sub_1C4893E04(v366, 1uLL, v345);
            LODWORD(v75) = *(_DWORD *)&v366[8];
            do
            {
              if (v75 >= *(_DWORD *)&v366[12])
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v366, (uint64_t)&v366[16], v75 + 1, 4);
                LODWORD(v75) = *(_DWORD *)&v366[8];
              }
              *(_DWORD *)(*(_QWORD *)v366 + 4 * v75) = v74;
              v75 = ++*(_DWORD *)&v366[8];
              v72 += v68;
            }
            while (v72);
            __dst[0] = (void *)v358;
            LODWORD(__dst[1]) = 0;
            sub_1C5544D6C((uint64_t)v13, (uint64_t)__dst, *(int **)v366, v75);
            v77 = *(_DWORD *)(*(_QWORD *)(v76 + 32) + 4);
            v15 = v350;
            if (*(_BYTE **)v366 != &v366[16])
              free(*(void **)v366);
            goto LABEL_99;
          }
          v70 = (v66 + (unint64_t)v68 - 1) / v66 * v66;
          __dst[0] = (void *)((8 * v70) | 1);
          LODWORD(__dst[1]) = 0;
          *(_DWORD *)v366 = v345;
          *(_DWORD *)&v366[16] = 0;
          (*(void (**)(uint64_t *, _QWORD, void **, uint64_t, _BYTE *, uint64_t, _QWORD))(*v13 + 32))(v13, __src, __dst, 1, v366, 1, 0);
          v77 = *(_DWORD *)(*(_QWORD *)(v78 + 32) + 4);
        }
        v15 = v350;
      }
LABEL_99:
      if ((v358 & 0xFFFFFFFFFFFFFFF9) != 0 && (v358 & 4) != 0 && v70 != v68)
      {
        __dst[0] = (void *)v358;
        LODWORD(__dst[1]) = 0;
        *(_DWORD *)v366 = v345;
        *(_DWORD *)&v366[16] = 0;
        sub_1C55448CC(v13, (uint64_t *)__dst, (int *)v366);
        v77 = *(_DWORD *)(*(_QWORD *)(v79 + 32) + 4);
      }
      *(_DWORD *)v366 = v77;
      *(_DWORD *)&v366[16] = 0;
      sub_1C5547540((uint64_t)v13, v35, v63, (uint64_t)v366);
      goto LABEL_104;
    }
    v367 = 0;
    v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, _BYTE *))(*(_QWORD *)a2 + 56))(a2, *v14 + 152 * v15, v18 + 12 * v16, *((unsigned int *)a5 + 2) - (unint64_t)v16, v366);
    if (v367)
    {
      sub_1C626E8F0((uint64_t)&v360, (uint64_t)v366);
      if (v367 == v366)
      {
        v48 = *(void (**)(void))(*(_QWORD *)v366 + 32);
      }
      else
      {
        if (!v367)
          goto LABEL_32;
        v48 = *(void (**)(void))(*(_QWORD *)v367 + 40);
      }
      v48();
    }
LABEL_32:
    if (!v47)
    {
      v12 = 0;
      goto LABEL_472;
    }
LABEL_418:
    ++v15;
    v16 = v17 + v47 + 1;
    a5 = v339;
  }
  while (v15 != v11);
  v309 = (char *)v360;
  if (!(_DWORD)v361)
  {
    v12 = 1;
    goto LABEL_482;
  }
  v310 = 32 * v361;
  v311 = (char *)v360 + 24;
  do
  {
    if (!*v311)
      sub_1C485C2F0();
    (*(void (**)(_QWORD))(*(_QWORD *)*v311 + 48))(*v311);
    v311 += 4;
    v310 -= 32;
  }
  while (v310);
  v12 = 1;
LABEL_472:
  v309 = (char *)v360;
  if ((_DWORD)v361)
  {
    v312 = 32 * v361;
    while (1)
    {
      v313 = *(char **)&v309[v312 - 8];
      if (&v309[v312 - 32] == v313)
      {
        v313 = &v309[v312 - 32];
        v314 = 4;
      }
      else
      {
        if (!v313)
          goto LABEL_477;
        v314 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v313 + 8 * v314))();
LABEL_477:
      v312 -= 32;
      if (!v312)
      {
        v309 = (char *)v360;
        break;
      }
    }
  }
LABEL_482:
  if (v309 != v362)
    free(v309);
  return v12;
}

uint64_t sub_1C54F4E40(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  llvm::LLVMContext **v5;
  uint64_t v6;
  uint64_t v7;
  char *v9[2];
  _QWORD v10[41];

  v10[40] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)a2;
  v5 = **(llvm::LLVMContext ****)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 16);
  v6 = (*(unsigned __int16 *)(*(_QWORD *)a2 + 18) >> 4) & 0x3FF;
  v9[0] = (char *)v10;
  v9[1] = (char *)0x400000000;
  sub_1C54F1FB8(a1, v6, v5, v4[14], (uint64_t)v9, (llvm::DataLayout *)(v4[5] + 272));
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char **, BOOL))(*(_QWORD *)a1 + 32))(a1, a2, v6, v9, *(_DWORD *)(v4[3] + 8) > 0xFFu);
  sub_1C54F54A4(v9);
  return v7;
}

uint64_t sub_1C54F4F28(int a1, llvm::DataLayout *this, uint64_t a3, int a4, unsigned int a5)
{
  int v6;
  uint64_t result;
  unsigned __int16 v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v6 = *(unsigned __int8 *)(a3 + 9);
  if (v6 == 254)
    return (8 * (unsigned __int16)llvm::DataLayout::getPointerSize(this, a5)) & 0xFFFFF8000007FFFFLL | ((unint64_t)(a5 & 0xFFFFFF) << 19) | 2;
  llvm::LLT::LLT(&v12, *(_BYTE *)(a3 + 9));
  result = v12;
  if (a4 < 0)
  {
    v9 = v12 >> 19;
    if ((v12 & 2) == 0)
      v9 = v12 >> 19;
    if ((v12 & 4) == 0)
      v9 = v12 >> 3;
    if ((v12 & 1) != 0)
      v9 = v12 >> 3;
    v10 = (8 * v9) & 0xFFFFF8000007FFFFLL | ((*(_QWORD *)&a5 & 0xFFFFFFLL) << 19) | 2;
    if ((v6 - 15) <= 0x9B)
    {
      v11 = 0x800000000000000;
      if ((v12 & 2) == 0)
        v11 = 0x8000000000000;
      return sub_1C4953AD0((unsigned __int16)(v12 >> 3) | ((unint64_t)((v11 & v12) != 0) << 32), v10);
    }
    else
    {
      return (8 * v9) & 0xFFFFF8000007FFFFLL | ((*(_QWORD *)&a5 & 0xFFFFFFLL) << 19) | 2;
    }
  }
  return result;
}

uint64_t sub_1C54F5000(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  const char *v15;
  unint64_t v16;
  uint64_t v17;
  const char *v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD v26[6];
  uint64_t v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  llvm::LLT::LLT((unint64_t *)&v25, *(_BYTE *)(a3 + 10));
  llvm::LLT::LLT(&v24, *(_BYTE *)(a3 + 9));
  v8 = sub_1C4825F50((unint64_t *)&v25);
  v10 = v9;
  if (v8 != sub_1C4825F50(&v24) || v10 != v11)
  {
    if (!a4 || (v25 & 1) == 0)
      goto LABEL_12;
    v12 = a4;
    v14 = sub_1C4825F50((unint64_t *)&v25);
    if ((_DWORD)v13 == 1)
    if (v14 <= v12)
    {
LABEL_12:
      if ((a2 & 0x80000000) != 0
        && (v17 = *(_QWORD *)(a1 + 16), (a2 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v17 + 432)))
      {
        v23 = *(_QWORD *)(*(_QWORD *)(v17 + 424) + 8 * (a2 & 0x7FFFFFFF));
        if ((v23 & 0xFFFFFFFFFFFFFFF9) != 0 && (v23 & 6) == 2)
        {
          v20 = sub_1C4825F50(&v23);
          if ((_DWORD)v19 == 1)
          v21 = *(_QWORD *)(a1 + 8);
          v27 = (8 * v20) | 1;
          v28 = 0;
          v26[0] = a2;
          v26[4] = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 80, &v27, 1, v26, 1, 0);
        }
      }
      else
      {
        v23 = 0;
      }
      __asm { BR              X10 }
    }
    v16 = sub_1C4825F50(&v24);
    if ((_DWORD)v15 == 1)
    if (v16 < v12)
    {
      v25 = (8 * v12) | 1;
      goto LABEL_12;
    }
  }
  return a2;
}

_QWORD *sub_1C54F52E4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = (_QWORD *)a1[14];
  if (v2 != a1 + 16)
    free(v2);
  v3 = (_QWORD *)a1[10];
  if (v3 != a1 + 12)
    free(v3);
  v4 = (_QWORD *)a1[1];
  if (v4 != a1 + 3)
    free(v4);
  return a1;
}

void sub_1C54F5350()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C54F5364(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E816DC40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C54F539C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E816DC40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C54F53BC(uint64_t a1, int *a2)
{
  return llvm::CallBase::paramHasAttr(*(_QWORD *)(a1 + 8), **(_DWORD **)(a1 + 16), *a2);
}

void sub_1C54F53D4()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C54F53E8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E816DC88;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C54F5420(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E816DC88;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C54F5440(uint64_t a1, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  int v6;

  v2 = **(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = **(_DWORD **)(a1 + 16) + 1;
  if (v3 >= *(_DWORD *)(v2 + 8))
    return 0;
  v5 = *(_QWORD *)(v2 + 8 * v3 + 40);
  if (!v5)
    return 0;
  v6 = *a2 + 7;
  if (*a2 >= 0)
    v6 = *a2;
  return (*(unsigned __int8 *)(v5 + (v6 >> 3) + 12) >> (*a2 & 7)) & 1;
}

char **sub_1C54F54A4(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v5 = 80 * v3;
    do
    {
      v6 = *(char **)&v2[v5 - 72];
      if (&v2[v5 - 56] != v6)
      {
        v7 = v5;
        v8 = v2;
        free(v6);
        v5 = v7;
        v2 = v8;
      }
      v5 -= 80;
    }
    while (v5);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_1C54F552C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0x400000000;
  if (*(_DWORD *)(a2 + 16))
    sub_1C48620A0(v4, a2 + 8);
  v5 = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_BYTE *)(a1 + 72) = v5;
  *(_QWORD *)(a1 + 88) = 0x400000000;
  if (*(_DWORD *)(a2 + 88))
    sub_1C48621E4(a1 + 80, a2 + 80);
  *(_QWORD *)(a1 + 112) = a1 + 128;
  *(_QWORD *)(a1 + 120) = 0x200000000;
  if (*(_DWORD *)(a2 + 120))
    sub_1C48621E4(a1 + 112, a2 + 112);
  v6 = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v6;
  return a1;
}

uint64_t sub_1C54F55E8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = *(_QWORD *)result;
    v6 = 32 * v2;
    do
    {
      v7 = *(_QWORD *)(v5 + 24);
      if (v7)
      {
        if (v5 == v7)
        {
          *(_QWORD *)(a2 + 24) = a2;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 24) + 24))(*(_QWORD *)(v5 + 24), a2);
        }
        else
        {
          *(_QWORD *)(a2 + 24) = v7;
          *(_QWORD *)(v5 + 24) = 0;
        }
      }
      else
      {
        *(_QWORD *)(a2 + 24) = 0;
      }
      v5 += 32;
      a2 += 32;
      v6 -= 32;
    }
    while (v6);
    v8 = *(unsigned int *)(v4 + 8);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)v4;
      for (i = 32 * v8; i; i -= 32)
      {
        result = *(_QWORD *)(v9 + i - 8);
        if (v9 + i - 32 == result)
        {
          result = v9 + i - 32;
          v11 = 4;
        }
        else
        {
          if (!result)
            continue;
          v11 = 5;
        }
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v11))();
      }
    }
  }
  return result;
}

void sub_1C54F56BC()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C54F56D0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E816DCD0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C54F5710(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E816DCD0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C54F5738(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 24), *(_QWORD *)(a1 + 20), *(unsigned int *)(a1 + 28));
}

uint64_t sub_1C54F5758(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  _BOOL4 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 + 152 * *(unsigned int *)(a1 + 8) == a2)
  {
    v24 = sub_1C4861E4C(a1, a3, 1);
    v25 = *(_QWORD *)a1;
    v26 = *(_DWORD *)(a1 + 8);
    v27 = *(_QWORD *)a1 + 152 * v26;
    *(_QWORD *)v27 = *(_QWORD *)v24;
    *(_QWORD *)(v27 + 8) = v27 + 24;
    *(_QWORD *)(v27 + 16) = 0x400000000;
    if (*(_DWORD *)(v24 + 16))
      sub_1C4862300(v27 + 8, v24 + 8);
    *(_BYTE *)(v27 + 72) = *(_BYTE *)(v24 + 72);
    v28 = v25 + 152 * v26;
    *(_QWORD *)(v28 + 80) = v28 + 96;
    v29 = v28 + 80;
    *(_QWORD *)(v29 + 8) = 0x400000000;
    if (*(_DWORD *)(v24 + 88))
      sub_1C48623F0(v29, v24 + 80);
    v30 = v25 + 152 * v26;
    *(_QWORD *)(v30 + 112) = v30 + 128;
    result = v30 + 112;
    *(_QWORD *)(result + 8) = 0x200000000;
    if (*(_DWORD *)(v24 + 120))
      result = sub_1C48623F0(result, v24 + 112);
    v31 = v25 + 152 * v26;
    v32 = *(_QWORD *)(v24 + 136);
    *(_DWORD *)(v31 + 144) = *(_DWORD *)(v24 + 144);
    *(_QWORD *)(v31 + 136) = v32;
    ++*(_DWORD *)(a1 + 8);
  }
  else
  {
    v5 = a2 - v4;
    v6 = 0x86BCA1AF286BCA1BLL * ((a2 - v4) >> 3);
    v7 = sub_1C4861E4C(a1, a3, 1);
    v8 = *(_QWORD *)a1;
    v9 = *(_QWORD *)a1 + v5;
    v10 = *(_QWORD *)a1 + 152 * *(unsigned int *)(a1 + 8);
    sub_1C54F552C(v10, v10 - 152);
    v11 = *(_QWORD *)a1;
    v12 = *(_DWORD *)(a1 + 8);
    v13 = *(_QWORD *)a1 + 152 * v12 - 152;
    if (v13 != v9)
    {
      v14 = *(_QWORD *)a1 + 152 * v12 - 152;
      do
      {
        v15 = *(_QWORD *)(v14 - 152);
        v14 -= 152;
        *(_QWORD *)v13 = v15;
        sub_1C48620A0(v13 + 8, v13 - 144);
        *(_BYTE *)(v13 + 72) = *(_BYTE *)(v13 - 80);
        sub_1C48621E4(v13 + 80, v13 - 72);
        sub_1C48621E4(v13 + 112, v13 - 40);
        *(_QWORD *)(v13 + 136) = *(_QWORD *)(v13 - 16);
        *(_DWORD *)(v13 + 144) = *(_DWORD *)(v13 - 8);
        v13 = v14;
      }
      while (v14 != v9);
      v12 = *(_DWORD *)(a1 + 8);
      v11 = *(_QWORD *)a1;
    }
    v16 = v12 + 1;
    *(_DWORD *)(a1 + 8) = v16;
    v17 = v11 + 152 * v16;
    v19 = v7 >= v9 && v7 < v17;
    v20 = v7 + 152 * v19;
    *(_QWORD *)v9 = *(_QWORD *)v20;
    sub_1C4862300(v9 + 8, v20 + 8);
    *(_BYTE *)(v9 + 72) = *(_BYTE *)(v20 + 72);
    v21 = v8 + 152 * v6;
    sub_1C48623F0(v21 + 80, v20 + 80);
    result = sub_1C48623F0(v21 + 112, v20 + 112);
    v23 = *(_DWORD *)(v20 + 144);
    *(_QWORD *)(v21 + 136) = *(_QWORD *)(v20 + 136);
    *(_DWORD *)(v21 + 144) = v23;
  }
  return result;
}

_QWORD *sub_1C54F59A8(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = 0;
  result[2] = a3;
  result[3] = 0;
  return result;
}

uint64_t sub_1C54F59B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (**v7)();
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 **v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE *v15;
  const void *v16;
  void *v17;
  unsigned int v18;
  unsigned int v19;
  _DWORD *v20;
  void *v21;
  void *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  int v43;
  BOOL v44;
  unsigned int v45;
  _QWORD *v46;
  _QWORD *v47;
  int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned __int8 *v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  void (**v64)();
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  int v68;
  _QWORD v69[5];
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  int v73;
  _BYTE v74[32];
  void *v75;
  void *v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  void *v80;
  int v81;
  uint64_t v82;
  void *v83;
  void *__src;
  unsigned int v85;
  unsigned int v86;
  int v87;
  void *v88;
  int v89;
  uint64_t v90;
  uint64_t (**v91)(llvm::MachineFunction::Delegate *__hidden);
  void (**v92)();
  _BYTE *v93;
  void *v94;
  uint64_t v95;
  int v96;
  _BYTE v97[32];
  void *v98;
  uint64_t v99;
  _QWORD v100[4];
  void *v101;
  uint64_t v102;
  _BYTE v103[4096];
  _QWORD *v104;
  uint64_t v105;
  unsigned int v106;
  _DWORD *v107;
  void *v108;
  uint64_t v109;
  _DWORD v110[16];
  uint64_t v111;
  void *v112[18];
  _BYTE *v113;
  void *v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  _BYTE v118[64];
  void *v119;
  uint64_t v120;
  _QWORD v121[18];

  v0 = MEMORY[0x1E0C80A78]();
  v121[16] = *MEMORY[0x1E0C80C00];
  v63 = v2;
  if ((**(_BYTE **)(v2 + 360) & 0x10) != 0)
  {
    v62 = 0;
    return v62 & 1;
  }
  v3 = (uint64_t *)v0;
  v4 = v1;
  v5 = operator new();
  v6 = v5;
  *(_OWORD *)(v5 + 8) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  v7 = (uint64_t (**)())&unk_1E816DC08;
  v61 = v4;
  if (!v4)
    v7 = &off_1E816EC08;
  *(_QWORD *)v5 = v7;
  v8 = v3[3];
  v3[3] = v6;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v6 = v3[3];
  }
  v9 = *(_QWORD *)(v63 + 40);
  v3[1] = v9;
  *(_QWORD *)(v6 + 8) = v63;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 24) = v9;
  *(_QWORD *)(v6 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v63 + 16) + 104))(*(_QWORD *)(v63 + 16));
  v101 = 0;
  v10 = (unsigned __int8 **)(v6 + 32);
  v11 = v4;
  if (&v101 != (void **)(v6 + 32))
  {
    if (*v10)
    {
      llvm::MetadataTracking::untrack(v6 + 32, *v10);
      v11 = v4;
      v60 = (unsigned __int8 *)v101;
      *v10 = (unsigned __int8 *)v101;
      if (v60)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v101, v60, v6 + 32);
        v11 = v4;
      }
    }
    else
    {
      *v10 = 0;
    }
  }
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  if (v11)
    *(_QWORD *)(v3[3] + 64) = v11;
  v12 = 0;
  do
  {
    v62 = v12;
    v101 = v103;
    v102 = 0x20000000000;
    v106 = 1024;
    v13 = operator new(0x4000uLL, (std::align_val_t)8uLL);
    v104 = v13;
    v105 = 0;
    if (v106)
    {
      v14 = 16 * v106;
      do
      {
        *v13 = -4096;
        v13 += 2;
        v14 -= 16;
      }
      while (v14);
    }
    v65 = v69;
    v66 = v69;
    v67 = 4;
    v68 = 0;
    v64 = (void (**)())&off_1E816DD18;
    v69[4] = &v101;
    v70 = v74;
    v71 = v74;
    v72 = 4;
    v73 = 0;
    v93 = v97;
    v94 = v97;
    v95 = 4;
    v96 = 0;
    v91 = &off_1E7FA1778;
    v92 = (void (**)())&unk_1E7FA17D0;
    v98 = v100;
    v100[0] = &v64;
    v99 = 0x400000001;
    if (v61)
    {
      v100[1] = v61;
      LODWORD(v99) = 2;
    }
    *(_QWORD *)(v63 + 728) = &v91;
    sub_1C486F76C((uint64_t)&v113, *(_QWORD *)(v63 + 328));
    memset(&v112[1], 0, 136);
    v111 = 0;
    memset(v110, 0, sizeof(v110));
    v107 = &v110[2];
    v108 = &v110[2];
    v109 = 8;
    v112[0] = &v112[2];
    HIDWORD(v112[1]) = 8;
    sub_1C4EB6BDC((uint64_t)&v113, (uint64_t)&v107, (uint64_t)&v75);
    if (v112[0] != &v112[2])
      free(v112[0]);
    if (v108 != v107)
      free(v108);
    if (v119 != v121)
      free(v119);
    if (v114 != v113)
      free(v114);
    v15 = v118;
    v113 = v118;
    v16 = v76;
    if (v76 == v75)
    {
      v114 = v118;
      v17 = v76;
    }
    else
    {
      v57 = v77;
      v15 = malloc_type_malloc(8 * v77, 0x4065EBACuLL);
      if (!v15 && (v57 || (v15 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_151:
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v114 = v15;
      v17 = v75;
      v16 = v76;
    }
    v18 = v78;
    v115 = v77;
    if (v16 == v17)
      v19 = v78;
    else
      v19 = v77;
    if (v19)
    {
      memmove(v15, v16, 8 * v19);
      v18 = v78;
    }
    v116 = v18;
    v117 = v79;
    v119 = v121;
    v120 = 0x800000000;
    if (v81)
      sub_1C486F660((uint64_t)&v119, (uint64_t)&v80);
    v20 = &v110[2];
    v107 = &v110[2];
    v21 = __src;
    if (__src == v83)
    {
      v108 = &v110[2];
      v22 = __src;
    }
    else
    {
      v58 = v85;
      v20 = malloc_type_malloc(8 * v85, 0x4065EBACuLL);
      if (!v20)
      {
        if (v58)
          goto LABEL_151;
        v20 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v20)
          goto LABEL_151;
      }
      v108 = v20;
      v22 = v83;
      v21 = __src;
    }
    LODWORD(v109) = v85;
    v23 = v86;
    if (v21 == v22)
      v24 = v86;
    else
      v24 = v85;
    if (v24)
    {
      memmove(v20, v21, 8 * v24);
      v23 = v86;
    }
    HIDWORD(v109) = v23;
    v110[0] = v87;
    v112[0] = &v112[2];
    v112[1] = (void *)0x800000000;
    if (v89)
      sub_1C486F660((uint64_t)v112, (uint64_t)&v88);
    while (1)
    {
      v25 = v120;
      if ((_DWORD)v120 != LODWORD(v112[1]))
        goto LABEL_53;
      if (!(_DWORD)v120)
        break;
      v26 = v112[0];
      v27 = v119;
      while (*v27 == *v26 && v27[1] == v26[1])
      {
        v27 += 2;
        v26 += 2;
        if (v27 == (_QWORD *)((char *)v119 + 16 * v120))
          goto LABEL_78;
      }
LABEL_53:
      v29 = *((_QWORD *)v119 + 2 * v120 - 2);
      v31 = *(_QWORD *)(v29 + 48);
      v30 = v29 + 48;
      v32 = v31 & 0xFFFFFFFFFFFFFFF8;
      if ((v31 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_BYTE *)v32 & 4) == 0)
      {
        while ((*(_WORD *)(v32 + 44) & 4) != 0)
          v32 = *(_QWORD *)v32 & 0xFFFFFFFFFFFFFFF8;
      }
      if (v32 != v30)
      {
        do
        {
          v33 = *(_QWORD *)v32 & 0xFFFFFFFFFFFFFFF8;
          if (!v33 || (*(_BYTE *)v33 & 4) == 0)
          {
            while ((*(_WORD *)(v33 + 44) & 4) != 0)
              v33 = *(_QWORD *)v33 & 0xFFFFFFFFFFFFFFF8;
          }
          if (sub_1C554B164(v32, v3[1]))
          {
            v34 = v32;
            if ((*(_BYTE *)v32 & 4) == 0)
            {
              v34 = v32;
              if ((*(_WORD *)(v32 + 44) & 8) != 0)
              {
                v34 = v32;
                do
                  v34 = *(_QWORD *)(v34 + 8);
                while ((*(_WORD *)(v34 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(v32 + 24) + 40, v32, *(_QWORD *)(v34 + 8));
          }
          else
          {
            v35 = v102;
            if (v102 >= (unint64_t)HIDWORD(v102))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v101, (uint64_t)v103, v102 + 1, 8);
              v35 = v102;
            }
            *((_QWORD *)v101 + v35) = v32;
            LODWORD(v102) = v102 + 1;
          }
          v32 = v33;
        }
        while (v33 != v30);
        v25 = v120;
      }
      LODWORD(v120) = v25 - 1;
      if (v25 != 1)
        sub_1C486F1F8(&v113);
    }
LABEL_78:
    if (v112[0] != &v112[2])
      free(v112[0]);
    if (v108 != v107)
      free(v108);
    if (v119 != v121)
      free(v119);
    if (v114 != v113)
      free(v114);
    if (v88 != &v90)
      free(v88);
    if (__src != v83)
      free(__src);
    if (v80 != &v82)
      free(v80);
    if (v76 != v75)
      free(v76);
    v36 = v102;
    if (v102 >= 0x201)
    {
      sub_1C54F67FC(&v104, v102);
      v36 = v102;
      if (!(_DWORD)v102)
        goto LABEL_116;
LABEL_96:
      v37 = 0;
      while (1)
      {
        v38 = (char *)v101 + 8 * v37;
        if (!v106)
          break;
        v39 = ((*v38 >> 4) ^ (*v38 >> 9)) & (v106 - 1);
        v40 = &v104[2 * v39];
        v41 = *v40;
        if (*v38 != *v40)
        {
          v42 = 0;
          v43 = 1;
          while (v41 != -4096)
          {
            if (v42)
              v44 = 0;
            else
              v44 = v41 == -8192;
            if (v44)
              v42 = v40;
            v45 = v39 + v43++;
            v39 = v45 & (v106 - 1);
            v40 = &v104[2 * v39];
            v41 = *v40;
            if (*v38 == *v40)
              goto LABEL_112;
          }
          if (v42)
            v46 = v42;
          else
            v46 = v40;
          goto LABEL_111;
        }
LABEL_112:
        if (++v37 >= (unint64_t)v36)
          goto LABEL_116;
      }
      v46 = 0;
LABEL_111:
      v47 = sub_1C48BE074((uint64_t)&v104, (uint64_t)v101 + 8 * v37, (uint64_t *)v101 + v37, v46);
      *v47 = *v38;
      *((_DWORD *)v47 + 2) = v37;
      v36 = v102;
      goto LABEL_112;
    }
    if ((_DWORD)v102)
      goto LABEL_96;
LABEL_116:
    v48 = v105;
    if ((_DWORD)v105)
    {
      v49 = 0;
      do
      {
        v50 = v102;
        do
          v51 = *((_QWORD *)v101 + --v50);
        while (!v51);
        LODWORD(v102) = v50;
        if (v106)
        {
          LODWORD(v52) = (v106 - 1) & ((v51 >> 4) ^ (v51 >> 9));
          v53 = &v104[2 * v52];
          v54 = *v53;
          if (v51 == *v53)
          {
LABEL_126:
            *v53 = -8192;
            LODWORD(v105) = v48 - 1;
            ++HIDWORD(v105);
          }
          else
          {
            v55 = 1;
            while (v54 != -4096)
            {
              v56 = v52 + v55++;
              v52 = v56 & (v106 - 1);
              v54 = v104[2 * v52];
              if (v51 == v54)
              {
                v53 = &v104[2 * v52];
                goto LABEL_126;
              }
            }
          }
        }
        v49 |= (*(uint64_t (**)(uint64_t, void (***)()))(*(_QWORD *)*v3 + 16))(*v3, &v92);
        v48 = v105;
      }
      while ((_DWORD)v105);
    }
    else
    {
      LOBYTE(v49) = 0;
    }
    *(_QWORD *)(v63 + 728) = 0;
    v91 = &off_1E7FA1778;
    v92 = (void (**)())&unk_1E7FA17D0;
    if (v98 != v100)
      free(v98);
    v92 = off_1E7FA1810;
    if (v94 != v93)
      free(v94);
    v64 = (void (**)())&off_1E816DD18;
    if (v71 != v70)
      free(v71);
    v64 = off_1E7FA1810;
    if (v66 != v65)
      free(v66);
    MEMORY[0x1CAA32FB4](v104, 8);
    if (v101 != v103)
      free(v101);
    v12 = 1;
  }
  while ((v49 & 1) != 0);
  return v62 & 1;
}

_QWORD *sub_1C54F63C0(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E816DD18;
  v2 = (void *)a1[11];
  if (v2 != (void *)a1[10])
    free(v2);
  *a1 = off_1E7FA1810;
  v3 = (void *)a1[2];
  if (v3 != (void *)a1[1])
    free(v3);
  return a1;
}

void sub_1C54F6420(_QWORD *a1)
{
  sub_1C54F63C0(a1);
  JUMPOUT(0x1CAA32FC0);
}

int32x2_t sub_1C54F6444(uint64_t a1, uint64_t a2)
{
  int32x2_t *v2;
  int32x2_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int32x2_t result;

  v2 = *(int32x2_t **)(a1 + 72);
  v3 = v2[514];
  v4 = v2[516].u32[0];
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = *(_QWORD *)&v3 + 16 * v5;
    v7 = *(_QWORD *)v6;
    if (*(_QWORD *)v6 == a2)
      goto LABEL_8;
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(_QWORD *)(*(_QWORD *)&v3 + 16 * v5);
      if (v7 == a2)
      {
        v6 = *(_QWORD *)&v3 + 16 * v5;
        goto LABEL_8;
      }
    }
  }
  v6 = *(_QWORD *)&v3 + 16 * v4;
LABEL_8:
  if (v6 != *(_QWORD *)&v3 + 16 * v4)
  {
    *(_QWORD *)(*(_QWORD *)v2 + 8 * *(unsigned int *)(v6 + 8)) = 0;
    *(_QWORD *)v6 = -8192;
    result = vadd_s32(v2[515], (int32x2_t)0x1FFFFFFFFLL);
    v2[515] = result;
  }
  return result;
}

_QWORD *sub_1C54F64E4(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = result[9];
  v17 = a2;
  v3 = *(_DWORD *)(v2 + 8);
  v4 = *(_DWORD *)(v2 + 4128);
  if (v4)
  {
    v5 = *(_QWORD *)(v2 + 4112);
    v6 = v4 - 1;
    v7 = v6 & ((a2 >> 4) ^ (a2 >> 9));
    v8 = (_QWORD *)(v5 + 16 * v7);
    v9 = *v8;
    if (*v8 == a2)
      return result;
    v10 = 0;
    v11 = 1;
    while (v9 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v9 == -8192;
      if (v12)
        v10 = v8;
      v13 = v7 + v11++;
      v7 = v13 & v6;
      v8 = (_QWORD *)(v5 + 16 * v7);
      v9 = *v8;
      if (*v8 == a2)
        return result;
    }
    if (v10)
      v14 = v10;
    else
      v14 = v8;
  }
  else
  {
    v14 = 0;
  }
  result = sub_1C48BE074(v2 + 4112, (uint64_t)&v17, &v17, v14);
  *result = v17;
  *((_DWORD *)result + 2) = v3;
  v15 = v17;
  v16 = *(unsigned int *)(v2 + 8);
  if (v16 >= *(_DWORD *)(v2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(v2, v2 + 16, v16 + 1, 8);
    LODWORD(v16) = *(_DWORD *)(v2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v2 + 8 * v16) = v15;
  ++*(_DWORD *)(v2 + 8);
  return result;
}

_QWORD *sub_1C54F65EC(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = result[9];
  v17 = a2;
  v3 = *(_DWORD *)(v2 + 8);
  v4 = *(_DWORD *)(v2 + 4128);
  if (v4)
  {
    v5 = *(_QWORD *)(v2 + 4112);
    v6 = v4 - 1;
    v7 = v6 & ((a2 >> 4) ^ (a2 >> 9));
    v8 = (_QWORD *)(v5 + 16 * v7);
    v9 = *v8;
    if (*v8 == a2)
      return result;
    v10 = 0;
    v11 = 1;
    while (v9 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v9 == -8192;
      if (v12)
        v10 = v8;
      v13 = v7 + v11++;
      v7 = v13 & v6;
      v8 = (_QWORD *)(v5 + 16 * v7);
      v9 = *v8;
      if (*v8 == a2)
        return result;
    }
    if (v10)
      v14 = v10;
    else
      v14 = v8;
  }
  else
  {
    v14 = 0;
  }
  result = sub_1C48BE074(v2 + 4112, (uint64_t)&v17, &v17, v14);
  *result = v17;
  *((_DWORD *)result + 2) = v3;
  v15 = v17;
  v16 = *(unsigned int *)(v2 + 8);
  if (v16 >= *(_DWORD *)(v2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(v2, v2 + 16, v16 + 1, 8);
    LODWORD(v16) = *(_DWORD *)(v2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v2 + 8 * v16) = v15;
  ++*(_DWORD *)(v2 + 8);
  return result;
}

_QWORD *sub_1C54F66F4(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = result[9];
  v17 = a2;
  v3 = *(_DWORD *)(v2 + 8);
  v4 = *(_DWORD *)(v2 + 4128);
  if (v4)
  {
    v5 = *(_QWORD *)(v2 + 4112);
    v6 = v4 - 1;
    v7 = v6 & ((a2 >> 4) ^ (a2 >> 9));
    v8 = (_QWORD *)(v5 + 16 * v7);
    v9 = *v8;
    if (*v8 == a2)
      return result;
    v10 = 0;
    v11 = 1;
    while (v9 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v9 == -8192;
      if (v12)
        v10 = v8;
      v13 = v7 + v11++;
      v7 = v13 & v6;
      v8 = (_QWORD *)(v5 + 16 * v7);
      v9 = *v8;
      if (*v8 == a2)
        return result;
    }
    if (v10)
      v14 = v10;
    else
      v14 = v8;
  }
  else
  {
    v14 = 0;
  }
  result = sub_1C48BE074(v2 + 4112, (uint64_t)&v17, &v17, v14);
  *result = v17;
  *((_DWORD *)result + 2) = v3;
  v15 = v17;
  v16 = *(unsigned int *)(v2 + 8);
  if (v16 >= *(_DWORD *)(v2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(v2, v2 + 16, v16 + 1, 8);
    LODWORD(v16) = *(_DWORD *)(v2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v2 + 8 * v16) = v15;
  ++*(_DWORD *)(v2 + 8);
  return result;
}

_QWORD *sub_1C54F67FC(_QWORD *result, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;

  if (a2)
  {
    v2 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v3 = v2 | (v2 >> 2) | ((v2 | (v2 >> 2)) >> 4);
    v4 = ((v3 | (v3 >> 8)) >> 16) | v3 | (v3 >> 8);
    if (*((_DWORD *)result + 4) <= v4)
      return sub_1C48BE1EC((uint64_t)result, v4 + 1);
  }
  return result;
}

_QWORD *sub_1C54F6848()
{
  qword_1ED805990 = (uint64_t)"GlobalISel Combiner";
  *(_QWORD *)algn_1ED805998 = 19;
  qword_1ED8059A0 = (uint64_t)"Control the rules which are enabled. These options all take a comma separated list of rules"
                             " to disable and may be specified by number or number range (e.g. 1-10).";
  unk_1ED8059A8 = 162;
  return llvm::cl::OptionCategory::registerCategory((llvm::cl::OptionCategory *)&qword_1ED805990);
}

unint64_t *sub_1C54F6874(uint64_t *a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v10;
  _DWORD v11[6];
  _DWORD v12[4];

  sub_1C54F8CF8((_QWORD *)a1[2], (uint64_t)a2, a3);
  if (llvm::MachineRegisterInfo::constrainRegAttrs((uint64_t)a2, a4, a3, 0))
  {
    llvm::MachineRegisterInfo::replaceRegWith(a2, a3, a4);
  }
  else
  {
    v10 = *a1;
    v12[0] = a4;
    v12[2] = 1;
    v11[0] = a3;
    v11[4] = 0;
    (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, 19, v12, 1, v11, 1, 0);
  }
  return sub_1C54F8DA0(a1[2]);
}

BOOL sub_1C54F6938(uint64_t *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD v15[6];
  _DWORD v16[4];

  if (**(_WORD **)(a2 + 16) != 19)
    return 0;
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(unsigned int *)(v5 + 4);
  v7 = *(_DWORD *)(v5 + 36);
  result = sub_1C554B0AC(*(_DWORD *)(v5 + 4), v7, a1[1]);
  if (result)
  {
    v8 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v8 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v8 = a2;
        do
          v8 = *(_QWORD *)(v8 + 8);
        while ((*(_WORD *)(v8 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v8 + 8));
    v9 = (_QWORD *)a1[1];
    sub_1C54F8CF8((_QWORD *)a1[2], (uint64_t)v9, v6);
    if (llvm::MachineRegisterInfo::constrainRegAttrs((uint64_t)v9, v7, v6, 0))
    {
      v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v9 + 16) + 176))(*(_QWORD *)(*v9 + 16));
      if ((v6 & 0x80000000) != 0)
        v11 = (uint64_t *)(v9[3] + 16 * (v6 & 0x7FFFFFFF) + 8);
      else
        v11 = (uint64_t *)(v9[34] + 8 * v6);
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = *(_QWORD *)(v12 + 24);
          if (v7 - 1 <= 0x3FFFFFFE)
            llvm::MachineOperand::substPhysReg((unsigned int *)v12, v7, v10);
          else
            llvm::MachineOperand::setReg(v12, v7);
          v12 = v13;
        }
        while (v13);
      }
    }
    else
    {
      v14 = *a1;
      v16[0] = v7;
      v16[2] = 1;
      v15[0] = v6;
      v15[4] = 0;
      (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 19, v16, 1, v15, 1, 0);
    }
    sub_1C54F8DA0(a1[2]);
    return 1;
  }
  return result;
}

uint64_t sub_1C54F6ACC(uint64_t *a1, llvm::MachineInstr *a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unsigned __int8 v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  v7 = 0;
  v8 = v10;
  v9 = 0x400000000;
  result = sub_1C54F6B98(a1, (uint64_t)a2, &v7, (uint64_t)&v8);
  if ((_DWORD)result)
  {
    v6 = result;
    sub_1C626EB44(a1, a2, v7, (int *)v8, v9);
    result = v6;
  }
  if (v8 != v10)
  {
    v5 = result;
    free(v8);
    return v5;
  }
  return result;
}

uint64_t sub_1C54F6B98(uint64_t *a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int *v30;
  int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  *a3 = 1;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(unsigned __int8 *)(v9 + 4);
  v11 = *(unsigned int *)(a2 + 40);
  if ((*(_BYTE *)(v9 + 8) & 2) != 0)
  {
    if ((_DWORD)v11 == v10)
      return 1;
    v12 = *(unsigned __int8 *)(v9 + 4);
    do
    {
      v45 = *(_DWORD *)(v8 + 32 * v10);
      if ((v45 & 0x10000FF) != 0x1000000)
        break;
      v12 += (v45 & 0x2000000) == 0;
      if ((_DWORD)v11 - 1 == v10)
        break;
      ++v10;
    }
    while ((v45 & 0x2000000) == 0);
  }
  else
  {
    v12 = *(unsigned __int8 *)(v9 + 4);
  }
  if (v12 == (_DWORD)v11)
    return 1;
  v14 = 0;
  v15 = v8 + 32 * v11;
  v16 = v8 + 32 * v12;
  v46 = a4 + 16;
  while (1)
  {
    v17 = *(unsigned int *)(v16 + 4);
    v18 = a1[1];
    if ((v17 & 0x80000000) != 0)
      v19 = (uint64_t *)(*(_QWORD *)(v18 + 24) + 16 * (v17 & 0x7FFFFFFF) + 8);
    else
      v19 = (uint64_t *)(*(_QWORD *)(v18 + 272) + 8 * v17);
    v20 = *v19;
    if (v20)
    {
      if ((*(_BYTE *)(v20 + 3) & 1) != 0 || (v20 = *(_QWORD *)(v20 + 24)) != 0 && (*(_BYTE *)(v20 + 3) & 1) != 0)
        v21 = *(_QWORD *)(v20 + 8);
      else
        v21 = 0;
    }
    else
    {
      v21 = 0;
    }
    v22 = *(unsigned __int16 **)(v21 + 16);
    v23 = *v22;
    if (v23 == 68)
    {
      if ((v17 & 0x80000000) != 0 && (v33 = v17 & 0x7FFFFFFF, v33 < *(unsigned int *)(v18 + 432)))
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v18 + 424) + 8 * v33);
        if (!v14)
        {
LABEL_26:
          v35 = *a1;
          *(_QWORD *)(v35 + 40) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v35 + 48) = a2;
          v36 = v34;
          if ((v34 & 0xFFFFFFFFFFFFFFF9) != 0)
          {
            v36 = v34;
            if ((v34 & 4) != 0)
            {
              v37 = 3;
              if ((v34 & 1) == 0)
                v37 = 19;
              v38 = v34 >> v37;
              if ((v34 & 2) != 0)
                v36 = (v34 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v38) | 2;
              else
                v36 = v34 & 0x8000000000000000 | (8 * v38) | 1;
            }
          }
          v39 = *a1;
          v47 = v36;
          v48 = 0;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v39 + 32))(v39, 68, &v47, 1, 0, 0, 0);
          v14 = a2;
        }
      }
      else
      {
        v34 = 0;
        if (!v14)
          goto LABEL_26;
      }
      if ((v34 & 2) != 0)
        v40 = 0x800000000000000;
      else
        v40 = 0x8000000000000;
      if ((v40 & v34) != 0)
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
      v41 = (unsigned __int16)(v34 >> 3);
      if (v41)
      {
        v42 = *(_DWORD *)(a4 + 8);
        do
        {
          v43 = *(_DWORD *)(*(_QWORD *)(v14 + 32) + 4);
          if (v42 >= *(_DWORD *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v46, v42 + 1, 4);
            v42 = *(_DWORD *)(a4 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a4 + 4 * v42) = v43;
          v42 = *(_DWORD *)(a4 + 8) + 1;
          *(_DWORD *)(a4 + 8) = v42;
          --v41;
        }
        while (v41);
      }
      goto LABEL_50;
    }
    if (v23 != 77)
      return 0;
    *a3 = 0;
    v24 = *(_QWORD *)(v21 + 32);
    v25 = *((unsigned __int8 *)v22 + 4);
    v26 = *(unsigned int *)(v21 + 40);
    if ((v22[4] & 2) == 0)
    {
      v27 = *((unsigned __int8 *)v22 + 4);
      goto LABEL_15;
    }
    if ((_DWORD)v26 != v25)
    {
      v27 = *((unsigned __int8 *)v22 + 4);
      do
      {
        v44 = *(_DWORD *)(v24 + 32 * v25);
        if ((v44 & 0x10000FF) != 0x1000000)
          break;
        v27 += (v44 & 0x2000000) == 0;
        if ((_DWORD)v26 - 1 == v25)
          break;
        ++v25;
      }
      while ((v44 & 0x2000000) == 0);
LABEL_15:
      if (v27 != (_DWORD)v26)
      {
        v28 = *(_DWORD *)(a4 + 8);
        v29 = 32 * v26 - 32 * v27;
        v30 = (int *)(v24 + 32 * v27 + 4);
        do
        {
          v32 = *v30;
          v30 += 8;
          v31 = v32;
          if (v28 >= *(_DWORD *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v46, v28 + 1, 4);
            v28 = *(_DWORD *)(a4 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a4 + 4 * v28) = v31;
          v28 = *(_DWORD *)(a4 + 8) + 1;
          *(_DWORD *)(a4 + 8) = v28;
          v29 -= 32;
        }
        while (v29);
      }
    }
LABEL_50:
    v16 += 32;
    if (v16 == v15)
      return 1;
  }
}

uint64_t sub_1C54F6F7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  void *v6;
  uint64_t v7;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  v6 = v8;
  v7 = 0x400000000;
  v4 = sub_1C54F7030(a1, a2, (uint64_t)&v6);
  if ((_DWORD)v4)
    sub_1C54F7320(a1, a2, (int *)v6, v7);
  if (v6 != v8)
    free(v6);
  return v4;
}

uint64_t sub_1C54F7030(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  _BYTE v38[32];
  uint64_t v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v6 = a1[1];
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_DWORD *)(v7 + 4);
  if (v8 < 0 && (v9 = v8 & 0x7FFFFFFF, v9 < *(_DWORD *)(v6 + 432)))
    v10 = *(_QWORD *)(*(_QWORD *)(v6 + 424) + 8 * v9);
  else
    v10 = 0;
  v11 = *(_DWORD *)(v7 + 36);
  if (v11 < 0 && (v11 & 0x7FFFFFFFu) < *(_DWORD *)(v6 + 432))
    v12 = *(_QWORD *)(*(_QWORD *)(v6 + 424) + 8 * (v11 & 0x7FFFFFFF));
  else
    v12 = 0;
  v13 = 1;
  if ((v10 & 0xFFFFFFFFFFFFFFF9) != 0 && (v10 & 4) != 0)
  {
    v14 = 0x800000000000000;
    if ((v10 & 2) == 0)
      v14 = 0x8000000000000;
    if ((v14 & v10) != 0)
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    v13 = (unsigned __int16)(v10 >> 3);
  }
  v15 = 1;
  if ((v12 & 0xFFFFFFFFFFFFFFF9) != 0 && (v12 & 4) != 0)
  {
    v16 = 0x800000000000000;
    if ((v12 & 2) == 0)
      v16 = 0x8000000000000;
    if ((v16 & v12) != 0)
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    v15 = (unsigned __int16)(v12 >> 3);
  }
  if (v13 != 1 && v13 < 2 * v15 || (unsigned __int16)(v13 % v15))
    return 0;
  v36 = v38;
  v37 = 0x800000000;
  sub_1C4893E04((char *)&v36, v13 / v15, -1);
  v19 = *(_QWORD *)(a2 + 32);
  v20 = v36;
  if (v13)
  {
    v21 = 0;
    v22 = *(_QWORD *)(v19 + 112);
    do
    {
      v23 = *(_DWORD *)(v22 + 4 * v21);
      if ((v23 & 0x80000000) == 0)
      {
        v24 = v23 / v15;
        v25 = v23 % v15;
        v26 = v21 / v15;
        if (v25 != v21 % v15 || (v27 = v20[v26], (v27 & 0x80000000) == 0) && v27 != v24)
        {
          v17 = 0;
          goto LABEL_51;
        }
        v20[v26] = v24;
      }
      ++v21;
    }
    while (v13 != v21);
  }
  if (!(_DWORD)v37)
  {
    v17 = 1;
    goto LABEL_51;
  }
  v28 = 0;
  v29 = *(_DWORD *)(v19 + 68);
  v30 = 4 * v37;
  do
  {
    if ((*v20 & 0x80000000) != 0)
    {
      if (!v28)
      {
        v33 = *a1;
        *(_QWORD *)(v33 + 40) = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(v33 + 48) = a2;
        v34 = *a1;
        v39 = v12;
        v40 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v34 + 32))(v34, 68, &v39, 1, 0, 0, 0);
        v28 = *(_DWORD *)(*(_QWORD *)(v35 + 32) + 4);
      }
      v31 = *(unsigned int *)(a3 + 8);
      v32 = v28;
      if (v31 >= *(unsigned int *)(a3 + 12))
      {
LABEL_48:
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v31 + 1, 4);
        v31 = *(unsigned int *)(a3 + 8);
      }
    }
    else
    {
      v31 = *(unsigned int *)(a3 + 8);
      if (*v20)
        v32 = v29;
      else
        v32 = v11;
      if (v31 >= *(unsigned int *)(a3 + 12))
        goto LABEL_48;
    }
    *(_DWORD *)(*(_QWORD *)a3 + 4 * v31) = v32;
    ++*(_DWORD *)(a3 + 8);
    ++v20;
    v30 -= 4;
  }
  while (v30);
  v17 = 1;
  v20 = v36;
LABEL_51:
  if (v20 != (_DWORD *)v38)
    free(v20);
  return v17;
}

unint64_t *sub_1C54F7320(uint64_t *a1, uint64_t a2, int *a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD v14[6];
  _DWORD v15[4];

  v8 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
  v9 = *a1;
  *(_QWORD *)(v9 + 40) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 48) = a2;
  v10 = llvm::MachineRegisterInfo::cloneVirtualRegister(a1[1], v8, (unsigned __int8 *)&unk_1C8725813, 0);
  v11 = *a1;
  if (a4 == 1)
  {
    v15[0] = v10;
    v15[2] = 1;
    v14[0] = *a3;
    v14[4] = 0;
    (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 19, v15, 1, v14, 1, 0);
  }
  else
  {
    v14[0] = v10;
    v14[2] = 1;
    sub_1C5544D6C(v11, (uint64_t)v14, a3, a4);
  }
  v12 = a2;
  if ((*(_BYTE *)a2 & 4) == 0)
  {
    v12 = a2;
    if ((*(_WORD *)(a2 + 44) & 8) != 0)
    {
      v12 = a2;
      do
        v12 = *(_QWORD *)(v12 + 8);
      while ((*(_WORD *)(v12 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v12 + 8));
  return sub_1C54F6874(a1, (_QWORD *)a1[1], v8, v10);
}

BOOL sub_1C54F744C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  int v7;
  uint64_t v9;
  uint64_t v10;
  const char *v12;
  unint64_t v13;
  const char *v14;
  unsigned int v15;
  uint8x8_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  const char *v50;
  unint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned __int8 v57;
  unint64_t v59;
  unint64_t v60;
  int v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  _DWORD v68[2];
  uint64_t v69;
  _QWORD v70[2];
  int v71;
  _QWORD v72[3];

  v72[2] = *MEMORY[0x1E0C80C00];
  v4 = **(unsigned __int16 **)(a2 + 16) - 93;
  if (v4 >= 0xFFFFFFFD)
    v5 = a2;
  else
    v5 = 0;
  if (v4 < 0xFFFFFFFD)
    return 0;
  v7 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
  if ((v7 & 0x80000000) == 0)
    return 0;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = v7 & 0x7FFFFFFF;
  if ((v7 & 0x7FFFFFFFu) >= *(_DWORD *)(v9 + 432))
    return 0;
  v67 = *(_QWORD *)(*(_QWORD *)(v9 + 424) + 8 * v10);
  if ((v67 & 1) == 0)
    return 0;
  v13 = sub_1C4825F50(&v67);
  if ((_DWORD)v12 == 1)
  if (v13 < 8)
    return 0;
  v15 = sub_1C4825F50(&v67);
  if ((_DWORD)v14 == 1)
  v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.i32[0] != 1)
    return 0;
  v17 = **(unsigned __int16 **)(a2 + 16);
  v18 = v17 == 91 ? 124 : 126;
  v19 = v17 == 90 ? 118 : v18;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = v19;
  *(_QWORD *)(a3 + 16) = 0;
  v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 16 * v10 + 8);
  if (!v20)
    return 0;
  if ((*(_BYTE *)(v20 + 3) & 0x81) != 0)
  {
    do
    {
      v20 = *(_QWORD *)(v20 + 24);
      if (!v20)
        return 0;
    }
    while ((*(_DWORD *)v20 & 0x81000000) != 0);
  }
  v21 = *(_QWORD *)(v20 + 8);
LABEL_25:
  v23 = **(unsigned __int16 **)(v21 + 16) - 118;
  v24 = v23 > 8;
  v25 = (1 << v23) & 0x141;
  if (!v24 && v25 != 0)
  {
    v27 = *(_QWORD *)(v5 + 48);
    if ((v27 & 7) != 0)
    {
      v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      v28 = v27 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v5 + 48) = v27 & 0xFFFFFFFFFFFFFFF8;
    }
    v29 = *(unsigned __int16 *)(v28 + 36);
    if ((v29 & 0xF00) == 0 || **(_WORD **)(v21 + 16) == 118)
    {
      v30 = *(_QWORD *)(a1 + 40);
      v31 = *(_QWORD *)(a1 + 8);
      if (v30)
      {
        v32 = 0;
        v33 = *(_DWORD *)(*(_QWORD *)(v21 + 32) + 4);
        if (v33 < 0)
        {
          if ((v33 & 0x7FFFFFFFu) >= *(_DWORD *)(v31 + 432))
            v32 = 0;
          else
            v32 = *(_QWORD *)(*(_QWORD *)(v31 + 424) + 8 * (v33 & 0x7FFFFFFF));
        }
        v34 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
        v61 = v3;
        if (v34 < 0 && (v35 = v34 & 0x7FFFFFFF, v35 < *(_DWORD *)(v31 + 432)))
        {
          v36 = v22;
          v37 = *(_QWORD *)(*(_QWORD *)(v31 + 424) + 8 * v35);
        }
        else
        {
          v36 = v22;
          v37 = 0;
        }
        v38 = *(_QWORD *)(v28 + 24);
        v39 = (1 << *(_BYTE *)(v28 + 34)) | *(_QWORD *)(v28 + 8);
        v40 = **(unsigned __int16 **)(v5 + 16);
        v72[0] = v32;
        v72[1] = v37;
        v70[0] = v38;
        v70[1] = 8 << (63 - __clz(v39 & -v39));
        v71 = (v29 >> 8) & 0xF;
        LODWORD(v62) = v40;
        v63 = v72;
        v64 = 2;
        v65 = v70;
        v66 = 1;
        v41 = v40 - 45;
        v42 = *(_DWORD *)(v30 + 8 + 168 * (v40 - 45));
        if (v42)
          v41 = v42 - 45;
        v43 = sub_1C553C530(v30 + 8 + 168 * v41, (uint64_t)&v62);
        if (v43 == 11)
        {
          if (v64)
          {
            v53 = 0;
            v54 = v30 + 35456;
            v55 = 1;
            while (1)
            {
              v56 = v63[v53];
              v68[0] = v62;
              v68[1] = v55 - 1;
              v69 = v56;
              v57 = sub_1C553DEB0(v54, (uint64_t)v68);
              if (v57)
                break;
              v53 = v55;
              v24 = v64 > v55++;
              if (!v24)
                goto LABEL_49;
            }
            if (v57 - 1 <= 9)
            {
              v22 = v36;
              goto LABEL_47;
            }
          }
LABEL_49:
          v22 = v36;
        }
        else
        {
          v22 = v36;
          if (v43)
          {
LABEL_47:
            v3 = v61;
            goto LABEL_68;
          }
        }
        v31 = *(_QWORD *)(a1 + 8);
        v3 = v61;
      }
      v44 = *(_DWORD *)(*(_QWORD *)(v21 + 32) + 4);
      if (v44 < 0 && (v45 = v44 & 0x7FFFFFFF, v45 < *(_DWORD *)(v31 + 432)))
        v46 = *(_QWORD *)(*(_QWORD *)(v31 + 424) + 8 * v45);
      else
        v46 = 0;
      v47 = **(unsigned __int16 **)(v21 + 16);
      v62 = v46;
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF9) != 0)
      {
        v48 = *(_DWORD *)(a3 + 8);
        if (v47 != 118 || v48 == 118)
        {
          if (v47 != 118 && v48 == 118)
            goto LABEL_67;
          if (*(_QWORD *)a3 == v46)
          {
            if (v47 == 126 && v48 == 124)
            {
              v3 = *(_DWORD *)(a3 + 12);
              v21 = *(_QWORD *)(a3 + 16);
LABEL_75:
              v47 = 124;
              goto LABEL_67;
            }
            if (v47 == 124 && v48 == 126)
              goto LABEL_75;
          }
          v60 = sub_1C4825F50(&v62);
          if ((_DWORD)v50 == 1)
          v51 = sub_1C4825F50((unint64_t *)a3);
          if ((_DWORD)v52 == 1)
          {
            v59 = v51;
            v51 = v59;
          }
          if (v60 <= v51)
          {
            v46 = *(_QWORD *)a3;
            v47 = *(_DWORD *)(a3 + 8);
            v3 = *(_DWORD *)(a3 + 12);
            v21 = *(_QWORD *)(a3 + 16);
          }
          else
          {
            v46 = v62;
          }
          goto LABEL_67;
        }
      }
      else
      {
        v48 = *(_DWORD *)(a3 + 8);
        if (v48 == v47 || v48 == 118)
          goto LABEL_67;
      }
      v3 = *(_DWORD *)(a3 + 12);
      v21 = *(_QWORD *)(a3 + 16);
      v47 = v48;
      v46 = *(_QWORD *)a3;
LABEL_67:
      *(_QWORD *)a3 = v46;
      *(_DWORD *)(a3 + 8) = v47;
      *(_DWORD *)(a3 + 12) = v3;
      *(_QWORD *)(a3 + 16) = v21;
    }
  }
LABEL_68:
  v49 = *(_QWORD *)(v20 + 8);
  while (1)
  {
    v20 = *(_QWORD *)(v20 + 24);
    if (!v20)
      return *(_QWORD *)(a3 + 16) != 0;
    if ((*(_DWORD *)v20 & 0x81000000) == 0)
    {
      v21 = *(_QWORD *)(v20 + 8);
      if (v21 != v49)
        goto LABEL_25;
    }
  }
}

uint64_t sub_1C54F79F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  unint64_t v30;
  unint64_t v31;
  const char *v32;
  unsigned int v33;
  _QWORD *v34;
  unint64_t v36;
  unint64_t v37;
  _QWORD v38[2];
  int v39;
  unsigned int v40;
  void *v41;
  uint64_t v42;
  _QWORD v43[5];

  v43[4] = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 32) + 4);
  v40 = v6;
  v38[0] = 0;
  v38[1] = 0;
  v39 = 0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
  v7 = *(_DWORD *)(a3 + 8);
  v8 = 90;
  if (v7 == 126)
    v8 = 92;
  v22 = v7 == 124;
  v9 = 91;
  if (!v22)
    v9 = v8;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8) + 48 * v9;
  v10 = *(_QWORD *)(a2 + 32);
  v41 = v43;
  v42 = 0x400000000;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(unsigned int *)(v10 + 4);
  if ((v12 & 0x80000000) != 0)
    v13 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
  else
    v13 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v12);
  v14 = *v13;
  if (*v13)
  {
    while ((*(_BYTE *)(v14 + 3) & 1) != 0)
    {
      v14 = *(_QWORD *)(v14 + 24);
      if (!v14)
        goto LABEL_52;
    }
    v15 = 0;
    v16 = 4;
LABEL_13:
    if (v15 >= v16)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, (uint64_t)v43, v15 + 1, 8);
      v15 = v42;
    }
    *((_QWORD *)v41 + v15) = v14;
    v15 = v42 + 1;
    LODWORD(v42) = v42 + 1;
    while (1)
    {
      v14 = *(_QWORD *)(v14 + 24);
      if (!v14)
        break;
      if ((*(_BYTE *)(v14 + 3) & 1) == 0)
      {
        v16 = HIDWORD(v42);
        goto LABEL_13;
      }
    }
    if (!v15)
      goto LABEL_52;
    v17 = (uint64_t *)v41;
    v18 = (uint64_t *)((char *)v41 + 8 * v15);
    while (1)
    {
      v19 = *v17;
      v20 = *(_QWORD *)(*v17 + 8);
      v21 = **(unsigned __int16 **)(v20 + 16);
      v22 = v21 == 118 || *(_DWORD *)(a3 + 8) == v21;
      if (!v22)
      {
LABEL_46:
        v34 = operator new(0x28uLL);
        *v34 = &off_1E816DD58;
        v34[1] = v38;
        v34[2] = a1;
        v34[3] = a2;
        v34[4] = &v40;
        sub_1C54F7DD8(a2, v19, (uint64_t)v34);
        (*(void (**)(_QWORD *))(*v34 + 40))(v34);
        goto LABEL_47;
      }
      v23 = *(_QWORD *)(v20 + 32);
      v24 = *(_DWORD *)(v23 + 4);
      v25 = *(_QWORD *)(a1 + 8);
      if ((v24 & 0x80000000) != 0 && (v24 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v25 + 432))
        v26 = *(_QWORD *)(*(_QWORD *)(v25 + 424) + 8 * (v24 & 0x7FFFFFFF));
      else
        v26 = 0;
      v37 = v26;
      if (v24 == v40)
        break;
      if (*(_QWORD *)a3 == v26)
      {
        sub_1C54F6874((uint64_t *)a1, (_QWORD *)v25, v24, v40);
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), *(_QWORD *)(v19 + 8));
        v27 = *(_QWORD *)(v19 + 8);
        v28 = v27;
        if ((*(_BYTE *)v27 & 4) == 0)
        {
          v28 = *(_QWORD *)(v19 + 8);
          if ((*(_WORD *)(v27 + 44) & 8) != 0)
          {
            v28 = *(_QWORD *)(v19 + 8);
            do
              v28 = *(_QWORD *)(v28 + 8);
            while ((*(_WORD *)(v28 + 44) & 8) != 0);
          }
        }
        goto LABEL_39;
      }
      v30 = sub_1C4825F50((unint64_t *)a3);
      if ((_DWORD)v29 == 1)
      v31 = sub_1C4825F50(&v37);
      if ((_DWORD)v32 == 1)
      {
        v36 = v31;
        v31 = v36;
      }
      if (v30 >= v31)
        goto LABEL_46;
      v33 = v40;
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), *(_QWORD *)(v23 + 40));
      llvm::MachineOperand::setReg(v23 + 32, v33);
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), *(_QWORD *)(v23 + 40));
LABEL_47:
      if (++v17 == v18)
      {
        v6 = v40;
        goto LABEL_52;
      }
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
    v27 = *(_QWORD *)(v19 + 8);
    v28 = v27;
    if ((*(_BYTE *)v27 & 4) == 0)
    {
      v28 = *(_QWORD *)(v19 + 8);
      if ((*(_WORD *)(v27 + 44) & 8) != 0)
      {
        v28 = *(_QWORD *)(v19 + 8);
        do
          v28 = *(_QWORD *)(v28 + 8);
        while ((*(_WORD *)(v28 + 44) & 8) != 0);
      }
    }
LABEL_39:
    sub_1C487FE80(*(_QWORD *)(v27 + 24) + 40, v27, *(_QWORD *)(v28 + 8));
    goto LABEL_47;
  }
LABEL_52:
  llvm::MachineOperand::setReg(*(_QWORD *)(a2 + 32), v6);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a2);
  if (v41 != v43)
    free(v41);
  return MEMORY[0x1CAA32FB4](v38[0], 8);
}

uint64_t sub_1C54F7DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = **(unsigned __int16 **)(v3 + 16);
  if (v4 == 69 || v4 == 0)
    v6 = (uint64_t *)(a2 + 48);
  else
    v6 = (uint64_t *)(v3 + 24);
  v7 = *v6;
  if (v7 == *(_QWORD *)(a1 + 24))
  {
    if ((*(_BYTE *)a1 & 4) == 0)
    {
      while ((*(_WORD *)(a1 + 44) & 8) != 0)
        a1 = *(_QWORD *)(a1 + 8);
    }
    v8 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v8 = v7 + 48;
    for (i = *(_QWORD *)(v7 + 56); i != v8; i = *(_QWORD *)(i + 8))
    {
      if (**(_WORD **)(i + 16) && **(_WORD **)(i + 16) != 69)
      {
        v8 = i;
        break;
      }
    }
  }
  v11 = v7;
  v12 = v8;
  if (a3)
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)a3 + 48))(a3, &v11, &v12, a2);
  sub_1C485C2F0();
  return sub_1C54F7EA0();
}

uint64_t sub_1C54F7EA0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t *v4;
  uint64_t v5;
  uint64_t result;
  const char *v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 48);
  if ((v1 & 7) != 0)
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v2 = v1 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a1 + 48) = v1 & 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *(_QWORD *)(v2 + 24);
  v4 = (unint64_t *)(v2 + 24);
  if ((v5 & 0xFFFFFFFFFFFFFFF9) == 0)
    return -1;
  result = sub_1C4825F50(v4);
  if ((_DWORD)v7 == 1)
  {
    v8 = result;
    return v8;
  }
  return result;
}

uint64_t sub_1C54F7F14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a1 == a2)
    return 1;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = v2 + 48;
  v4 = *(_QWORD *)(v2 + 56);
  if (v4 != v3)
  {
    while (v4 != a1 && v4 != a2)
    {
      if (!v4 || (*(_BYTE *)v4 & 4) == 0)
      {
        while ((*(_WORD *)(v4 + 44) & 8) != 0)
          v4 = *(_QWORD *)(v4 + 8);
      }
      v4 = *(_QWORD *)(v4 + 8);
      if (v4 == v3)
      {
        v4 = v3;
        return v4 == a1;
      }
    }
  }
  return v4 == a1;
}

uint64_t sub_1C54F7F80(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t UniqueVRegDef;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 16);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 120))(v10);
  v12 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
  *a4 = v12;
  UniqueVRegDef = llvm::MachineRegisterInfo::getUniqueVRegDef(*(_QWORD *)(a1 + 8), v12);
  if (UniqueVRegDef && **(_WORD **)(UniqueVRegDef + 16) == 70)
    return 0;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *a4;
  v16 = (uint64_t *)((v15 & 0x80000000) != 0
                  ? *(_QWORD *)(v14 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8
                  : *(_QWORD *)(v14 + 272) + 8 * v15);
  v17 = *v16;
  if (!*v16)
    return 0;
  if ((*(_BYTE *)(v17 + 3) & 0x81) != 0)
  {
    do
    {
      v17 = *(_QWORD *)(v17 + 24);
      if (!v17)
        return 0;
    }
    while ((*(_DWORD *)v17 & 0x81000000) != 0);
  }
  v18 = *(_QWORD *)(v17 + 8);
LABEL_11:
  if (**(_WORD **)(v18 + 16) != 193)
    goto LABEL_16;
  v19 = *(_DWORD *)(*(_QWORD *)(v18 + 32) + 68);
  *a5 = v19;
  v20 = *(_QWORD *)(a1 + 8);
  if (!byte_1ED831238)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v11 + 1544))(v11, a2, *a4))
      goto LABEL_16;
    v20 = *(_QWORD *)(a1 + 8);
    v19 = *a5;
  }
  v21 = llvm::MachineRegisterInfo::getUniqueVRegDef(v20, v19);
  if (!v21 || !sub_1C626ECC0(*(_QWORD *)(a1 + 32), v21, a2))
  {
LABEL_16:
    v22 = *(_QWORD *)(v17 + 8);
    while (1)
    {
      v17 = *(_QWORD *)(v17 + 24);
      if (!v17)
        return 0;
      if ((*(_DWORD *)v17 & 0x81000000) == 0)
      {
        v18 = *(_QWORD *)(v17 + 8);
        if (v18 != v22)
          goto LABEL_11;
      }
    }
  }
  v23 = *(_QWORD *)(a1 + 8);
  v24 = *(unsigned int *)(*(_QWORD *)(v18 + 32) + 4);
  if ((v24 & 0x80000000) != 0)
    v25 = (uint64_t *)(*(_QWORD *)(v23 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8);
  else
    v25 = (uint64_t *)(*(_QWORD *)(v23 + 272) + 8 * v24);
  v26 = *v25;
  if (*v25)
  {
    while ((*(_DWORD *)v26 & 0x81000000) != 0)
    {
      v26 = *(_QWORD *)(v26 + 24);
      if (!v26)
        goto LABEL_38;
    }
    if (sub_1C626ECC0(*(_QWORD *)(a1 + 32), a2, *(_QWORD *)(v26 + 8)))
    {
      while (2)
      {
        v27 = *(_QWORD *)(v26 + 8);
        while (1)
        {
          v26 = *(_QWORD *)(v26 + 24);
          if (!v26)
          {
            LODWORD(v24) = *(_DWORD *)(*(_QWORD *)(v18 + 32) + 4);
            goto LABEL_38;
          }
          if ((*(_DWORD *)v26 & 0x81000000) == 0)
          {
            v28 = *(_QWORD *)(v26 + 8);
            if (v28 != v27)
              break;
          }
        }
        if ((sub_1C626ECC0(*(_QWORD *)(a1 + 32), a2, v28) & 1) != 0)
          continue;
        break;
      }
    }
    goto LABEL_16;
  }
LABEL_38:
  *a3 = v24;
  return 1;
}

uint64_t sub_1C54F81B8(uint64_t a1, uint64_t a2, unsigned int *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _QWORD v26[2];
  char v27;

  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 16);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 120))(v10);
  v12 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 36);
  *a3 = v12;
  sub_1C554CC94(v12, *(_QWORD *)(a1 + 8), (uint64_t)v26);
  result = 0;
  if (v27)
  {
    v14 = v26[0];
    if (v26[0])
    {
      if (**(_WORD **)(v26[0] + 16) != 193)
        return 0;
      v15 = *(_QWORD *)(a1 + 8);
      if (llvm::MachineRegisterInfo::hasOneNonDBGUse(v15, *a3))
        return 0;
      v16 = *(_QWORD *)(v14 + 32);
      *a4 = *(_DWORD *)(v16 + 36);
      *a5 = *(_DWORD *)(v16 + 68);
      if (!byte_1ED831238)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v11 + 1544))(v11, a2, *a4);
        if (!(_DWORD)result)
          return result;
        v15 = *(_QWORD *)(a1 + 8);
      }
      sub_1C554CC94(*a4, v15, (uint64_t)v26);
      v17 = v27 ? v26[0] : 0;
      if (**(_WORD **)(v17 + 16) == 70)
        return 0;
      v18 = *a3;
      if (**(_WORD **)(a2 + 16) != 96
        || (result = 0, v19 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4), *a4 != v19) && v19 != (_DWORD)v18)
      {
        v20 = *(_QWORD *)(a1 + 8);
        if ((v18 & 0x80000000) != 0)
          v21 = (uint64_t *)(*(_QWORD *)(v20 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8);
        else
          v21 = (uint64_t *)(*(_QWORD *)(v20 + 272) + 8 * v18);
        v22 = *v21;
        if (!*v21)
          return 1;
        if ((*(_BYTE *)(v22 + 3) & 0x81) != 0)
        {
          do
          {
            v22 = *(_QWORD *)(v22 + 24);
            if (!v22)
              return 1;
          }
          while ((*(_DWORD *)v22 & 0x81000000) != 0);
        }
        result = sub_1C626ECC0(*(_QWORD *)(a1 + 32), a2, *(_QWORD *)(v22 + 8));
        if ((_DWORD)result)
        {
LABEL_25:
          v23 = *(_QWORD *)(v22 + 8);
          while (1)
          {
            v22 = *(_QWORD *)(v22 + 24);
            if (!v22)
              return 1;
            if ((*(_DWORD *)v22 & 0x81000000) == 0)
            {
              v24 = *(_QWORD *)(v22 + 8);
              if (v24 != v23)
              {
                v25 = sub_1C626ECC0(*(_QWORD *)(a1 + 32), a2, v24);
                result = 0;
                if ((v25 & 1) != 0)
                  goto LABEL_25;
                return result;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C54F83CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;

  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)a1 = &off_1E816EC08;
  v5 = (unsigned __int8 **)(a1 + 32);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v6 = *(_QWORD *)(v4 + 32);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v6 + 40);
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 16) + 104))(*(_QWORD *)(v6 + 16));
  v13 = 0;
  if (&v13 != v5 && (unsigned __int8 **)(a2 + 56) != v5)
  {
    if (*v5)
    {
      llvm::MetadataTracking::untrack((uint64_t)v5, *v5);
      v10 = v13;
      *v5 = v13;
      if (v10)
        llvm::MetadataTracking::retrack((uint64_t)&v13, v10, (uint64_t)v5);
    }
    else
    {
      *v5 = 0;
    }
    *(_QWORD *)(a1 + 48) = a2;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 48) = a2;
    v7 = *(unsigned __int8 **)(a1 + 32);
    if (v7)
      llvm::MetadataTracking::untrack((uint64_t)v5, v7);
    v8 = *(unsigned __int8 **)(a2 + 56);
LABEL_8:
    *v5 = v8;
    if (v8)
      llvm::MetadataTracking::track((uint64_t)v5, v8, 2);
    return a1;
  }
  if (&v13 != v5)
  {
    if (*v5)
    {
      llvm::MetadataTracking::untrack((uint64_t)v5, *v5);
      v12 = v13;
      *v5 = v13;
      if (v12)
        llvm::MetadataTracking::retrack((uint64_t)&v13, v12, (uint64_t)v5);
    }
    else
    {
      *v5 = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 48) = a2;
  v11 = (unsigned __int8 **)(a2 + 56);
  if (v11 != v5)
  {
    if (*v5)
      llvm::MetadataTracking::untrack((uint64_t)v5, *v5);
    v8 = *v11;
    goto LABEL_8;
  }
  return a1;
}

uint64_t sub_1C54F8544(_QWORD *a1, uint64_t *a2, __int128 *a3)
{
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)a2 + 2);
  v7 = a2;
  if (v6)
  {
    if (v6 == 2
      || (v8 = a1[3], (*(_DWORD *)a2 & 0x80000000) == 0)
      || (v9 = *(_DWORD *)a2 & 0x7FFFFFFF, v9 >= *(_DWORD *)(v8 + 432)))
    {
      v10 = 0;
      goto LABEL_8;
    }
    v7 = (uint64_t *)(*(_QWORD *)(v8 + 424) + 8 * v9);
  }
  v10 = *v7;
LABEL_8:
  *(_QWORD *)&v14 = v10;
  DWORD2(v14) = 0;
  v11 = sub_1C5544694((uint64_t)a1, (unint64_t *)&v14, -1);
  v19 = *a2;
  v20 = *((_DWORD *)a2 + 2);
  v14 = *a3;
  v15 = *((_DWORD *)a3 + 4);
  v16 = v11;
  v17 = v12;
  v18 = 1;
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*a1 + 32))(a1, 67, &v19, 1, &v14, 2, 0);
}

unint64_t sub_1C54F8654(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;

  if (*(_QWORD *)(a1 + 96))
  {
    sub_1C54F8B9C((uint64_t **)(a1 + 80), a2, (uint64_t **)a2);
    return ((unint64_t)v4 << 32) | 1;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = *(unsigned int *)(a1 + 8);
    v8 = *a2;
    if (!(_DWORD)v7)
      goto LABEL_11;
    v9 = 8 * v7;
    v10 = *(_QWORD **)a1;
    while (*v10 != v8)
    {
      ++v10;
      v9 -= 8;
      if (!v9)
        goto LABEL_10;
    }
    if (v9)
      return 1;
LABEL_10:
    if (v7 > 7)
    {
      do
      {
        v11 = (uint64_t *)(*(_QWORD *)a1 + 8 * v7 - 8);
        sub_1C54F8B9C((uint64_t **)(a1 + 80), v11, (uint64_t **)v11);
        LODWORD(v7) = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v7;
      }
      while ((_DWORD)v7);
      sub_1C54F8B9C((uint64_t **)(a1 + 80), a2, (uint64_t **)a2);
    }
    else
    {
LABEL_11:
      if (v7 >= *(_DWORD *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v7 + 1, 8);
        v6 = *(_QWORD **)a1;
        v7 = *(unsigned int *)(a1 + 8);
      }
      v6[v7] = v8;
      ++*(_DWORD *)(a1 + 8);
    }
    return 0x100000001;
  }
}

uint64_t sub_1C54F8768(unint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v1 = *a1;
  if ((*a1 & 1) != 0)
    return (~(-1 << (v1 >> 58)) & ~(v1 >> 1)) == 0;
  v2 = *(unsigned int *)(v1 + 64);
  v3 = v2 >> 6;
  if (v2 < 0x40)
  {
LABEL_8:
    v7 = *(_DWORD *)(v1 + 64) & 0x3F;
    if (!v7)
      return 1;
    return *(_QWORD *)(*(_QWORD *)v1 + 8 * v3) == ~(-1 << v7);
  }
  v4 = *(uint64_t **)v1;
  if (v3 <= 1)
    v5 = 1;
  else
    v5 = v3;
  while (1)
  {
    v6 = *v4++;
    if (v6 != -1)
      return 0;
    if (!--v5)
      goto LABEL_8;
  }
}

uint64_t sub_1C54F87F0(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  BOOL v6;
  int v7;
  uint64_t v9;
  unsigned int v10;
  char v11;

  if (sub_1C54F6938(a1, a2))
    return 1;
  v9 = 0;
  result = sub_1C54F744C((uint64_t)a1, a2, (uint64_t)&v9);
  if ((_DWORD)result)
  {
    sub_1C54F79F4((uint64_t)a1, a2, (uint64_t)&v9);
    return 1;
  }
  v9 = 0;
  v10 = 0;
  v5 = **(unsigned __int16 **)(a2 + 16) - 90;
  v6 = v5 > 6;
  v7 = (1 << v5) & 0x47;
  if (!v6 && v7 != 0)
  {
    if (!byte_1ED831238)
      return 0;
    v11 = sub_1C54F81B8((uint64_t)a1, a2, (unsigned int *)&v9, (_DWORD *)&v9 + 1, &v10);
    if ((v11 & 1) != 0 || (result = sub_1C54F7F80((uint64_t)a1, a2, &v9, (unsigned int *)&v9 + 1, &v10), (_DWORD)result))
    {
      sub_1C626ECEC((uint64_t)a1, a2, (uint64_t)&v9);
      return 1;
    }
  }
  return result;
}

void sub_1C54F88FC()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C54F8910(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E816DD58;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C54F8950(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E816DD58;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C54F8978(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD v32[2];
  int v33;
  _DWORD v34[4];

  v6 = *a2;
  v7 = *a3;
  v8 = *(uint64_t **)(a1 + 8);
  v9 = *(uint64_t **)(a1 + 16);
  v10 = *((_DWORD *)v8 + 4);
  if (!v10)
    goto LABEL_9;
  v11 = *v8;
  v12 = v10 - 1;
  v13 = (v10 - 1) & ((v6 >> 4) ^ (v6 >> 9));
  v14 = *(_QWORD *)(v11 + 16 * v13);
  if (v14 != v6)
  {
    v19 = 1;
    while (v14 != -4096)
    {
      v20 = v13 + v19++;
      v13 = v20 & v12;
      v14 = *(_QWORD *)(v11 + 16 * v13);
      if (v14 == v6)
        goto LABEL_3;
    }
LABEL_9:
    v21 = *v9;
    *(_QWORD *)(v21 + 40) = v6;
    *(_QWORD *)(v21 + 48) = v7;
    v18 = llvm::MachineRegisterInfo::cloneVirtualRegister(v9[1], *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32) + 4), (unsigned __int8 *)&unk_1C8725813, 0);
    v22 = *v9;
    v34[0] = v18;
    v34[2] = 1;
    LODWORD(v32[0]) = **(_DWORD **)(a1 + 32);
    v33 = 0;
    (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)v22 + 32))(v22, 119, v34, 1, v32, 1, 0);
    v24 = v23;
    v25 = *(_QWORD *)(a1 + 8);
    v32[0] = 0;
    v26 = sub_1C545B460(*(_QWORD *)v25, *(_DWORD *)(v25 + 16), v6, v32);
    v27 = (uint64_t *)v32[0];
    if ((v26 & 1) != 0)
    {
LABEL_17:
      v27[1] = v24;
      v30 = v9[2];
      v16 = v9 + 2;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 32))(v30, *(_QWORD *)(a4 + 8));
      goto LABEL_18;
    }
    v28 = *(_DWORD *)(v25 + 8);
    v29 = *(_DWORD *)(v25 + 16);
    if (4 * v28 + 4 < 3 * v29)
    {
      if (v29 + ~v28 - *(_DWORD *)(v25 + 12) > v29 >> 3)
        goto LABEL_14;
    }
    else
    {
      v29 *= 2;
    }
    sub_1C545B4F4(v25, v29);
    v32[0] = 0;
    sub_1C545B460(*(_QWORD *)v25, *(_DWORD *)(v25 + 16), v6, v32);
    v27 = (uint64_t *)v32[0];
LABEL_14:
    ++*(_DWORD *)(v25 + 8);
    if (*v27 != -4096)
      --*(_DWORD *)(v25 + 12);
    *v27 = v6;
    v27[1] = 0;
    goto LABEL_17;
  }
LABEL_3:
  v15 = *(_QWORD *)(v11 + 16 * v13 + 8);
  if (!v15)
    goto LABEL_9;
  v17 = v9[2];
  v16 = v9 + 2;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, *(_QWORD *)(a4 + 8));
  v18 = *(_DWORD *)(*(_QWORD *)(v15 + 32) + 4);
LABEL_18:
  llvm::MachineOperand::setReg(a4, v18);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v16 + 40))(*v16, *(_QWORD *)(a4 + 8));
}

uint64_t **sub_1C54F8B9C(uint64_t **a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)v8;
    v8 = (uint64_t **)operator new(0x28uLL);
    v8[4] = *a3;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = v10;
    *v6 = (uint64_t *)v8;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    sub_1C4768E74(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v8;
}

uint64_t sub_1C54F8C78()
{
  __n128 v1;
  char v2;
  char *v3;
  int v4;

  v4 = 1;
  v2 = 0;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Force all indexed operations to be legal for the GlobalISel combiner";
  v1.n128_u64[1] = 68;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED8311B8, "force-legal-indexing", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8311B8, &dword_1C475E000);
}

_QWORD *sub_1C54F8CF8(_QWORD *result, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
  if (a3 >= 0)
    v3 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * a3);
  v4 = *v3;
  if (*v3)
  {
    v5 = result;
    while ((*(_BYTE *)(v4 + 3) & 1) != 0)
    {
      v4 = *(_QWORD *)(v4 + 24);
      if (!v4)
        return result;
    }
    v6 = *(_QWORD *)(v4 + 8);
LABEL_9:
    (*(void (**)(_QWORD *, uint64_t))(*v5 + 32))(v5, v6);
    result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(v5 + 1), v6);
    v7 = *(_QWORD *)(v4 + 8);
    while (1)
    {
      v4 = *(_QWORD *)(v4 + 24);
      if (!v4)
        break;
      if ((*(_BYTE *)(v4 + 3) & 1) == 0)
      {
        v6 = *(_QWORD *)(v4 + 8);
        if (v6 != v7)
          goto LABEL_9;
      }
    }
  }
  return result;
}

unint64_t *sub_1C54F8DA0(uint64_t a1)
{
  unint64_t *result;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v14;
  int v15;
  unsigned int v16;
  void *v17;

  result = *(unint64_t **)(a1 + 16);
  v3 = *(unint64_t **)(a1 + 8);
  v4 = 24;
  if (result == v3)
    v4 = 28;
  v5 = *(unsigned int *)(a1 + v4);
  v6 = result;
  if ((_DWORD)v5)
  {
    v7 = 0;
    while (result[v7] >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (v5 == ++v7)
        goto LABEL_16;
    }
    v6 = &result[v7];
  }
  v8 = &result[v5];
  if (v6 != v8)
  {
    v9 = *v6;
LABEL_11:
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 40))(a1, v9);
    v10 = v6 + 1;
    while (v10 != v8)
    {
      v11 = *v10++;
      v9 = v11;
      if (v11 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v6 = v10 - 1;
        goto LABEL_11;
      }
    }
    v3 = *(unint64_t **)(a1 + 8);
    result = *(unint64_t **)(a1 + 16);
  }
LABEL_16:
  if (result == v3)
    goto LABEL_17;
  v12 = *(unsigned int *)(a1 + 24);
  if (v12 < 0x21 || 4 * (*(_DWORD *)(a1 + 28) - *(_DWORD *)(a1 + 32)) >= v12)
  {
    result = (unint64_t *)memset(result, 255, 8 * v12);
LABEL_17:
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    return result;
  }
  free(result);
  v14 = *(_DWORD *)(a1 + 28) - *(_DWORD *)(a1 + 32);
  v15 = 1 << (33 - __clz(v14 - 1));
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  if (v14 <= 0x10)
    v16 = 32;
  else
    v16 = v15;
  *(_DWORD *)(a1 + 24) = v16;
  v17 = malloc_type_malloc(8 * v16, 0x4065EBACuLL);
  if (!v17)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *(_QWORD *)(a1 + 16) = v17;
  return (unint64_t *)memset(v17, 255, 8 * *(unsigned int *)(a1 + 24));
}

uint64_t sub_1C54F8F08(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeTargetPassConfigPass((uint64_t)a1);
  sub_1C54E9CDC((uint64_t)a1);
  llvm::initializeBlockFrequencyInfoWrapperPassPass(a1, v2);
  llvm::initializeStackProtectorPass(a1, v3);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  v4 = operator new();
  *(_QWORD *)v4 = "IRTranslator LLVM IR -> MI";
  *(_QWORD *)(v4 + 8) = 26;
  *(_QWORD *)(v4 + 16) = "irtranslator";
  *(_QWORD *)(v4 + 24) = 12;
  *(_QWORD *)(v4 + 32) = &unk_1EF8F2FC8;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C62708B8;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

uint64_t *sub_1C54F8FBC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  int v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  void *v17;
  uint64_t v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 448);
  v5 = *(unsigned int *)(a1 + 464);
  if ((_DWORD)v5)
  {
    LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v7 = (uint64_t **)(v4 + 16 * v6);
    v8 = *v7;
    if (*v7 == a2)
      goto LABEL_8;
    v9 = 1;
    while (v8 != (uint64_t *)-4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v8 = *(uint64_t **)(v4 + 16 * v6);
      if (v8 == a2)
      {
        v7 = (uint64_t **)(v4 + 16 * v6);
        goto LABEL_8;
      }
    }
  }
  v7 = (uint64_t **)(v4 + 16 * v5);
LABEL_8:
  if (v7 != (uint64_t **)(v4 + 16 * v5))
    return v7[1];
  v11 = sub_1C54F9160(a1 + 256, (uint64_t)a2);
  v12 = sub_1C54F93BC(a1 + 256, a2);
  v17 = v19;
  v18 = 0x400000000;
  if (*((_DWORD *)v12 + 2))
    v13 = 0;
  else
    v13 = (uint64_t)v12;
  llvm::computeValueLLTs(*(llvm::DataLayout **)(a1 + 880), *a2, (unsigned int *)&v17, v13, 0);
  if ((_DWORD)v18)
  {
    v14 = 0;
    v15 = *((_DWORD *)v11 + 2);
    do
    {
      if (v15 >= *((_DWORD *)v11 + 3))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v11, (uint64_t)(v11 + 2), v15 + 1, 4);
        v15 = *((_DWORD *)v11 + 2);
      }
      *(_DWORD *)(*v11 + 4 * v15) = 0;
      v15 = *((_DWORD *)v11 + 2) + 1;
      *((_DWORD *)v11 + 2) = v15;
      ++v14;
    }
    while (v18 > v14);
  }
  if (v17 != v19)
    free(v17);
  return v11;
}

_QWORD *sub_1C54F9160(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  uint64_t *v35;

  v5 = a1 + 192;
  v4 = *(_QWORD *)(a1 + 192);
  v6 = *(unsigned int *)(a1 + 208);
  v7 = a2 >> 4;
  if ((_DWORD)v6)
  {
    LODWORD(v8) = (v6 - 1) & (v7 ^ (a2 >> 9));
    v9 = (uint64_t *)(v4 + 16 * v8);
    v10 = *v9;
    if (*v9 == a2)
      goto LABEL_8;
    v11 = 1;
    while (v10 != -4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v6 - 1);
      v10 = *(_QWORD *)(v4 + 16 * v8);
      if (v10 == a2)
      {
        v9 = (uint64_t *)(v4 + 16 * v8);
        goto LABEL_8;
      }
    }
  }
  v9 = (uint64_t *)(v4 + 16 * v6);
LABEL_8:
  if (v9 != (uint64_t *)(v4 + 16 * v6))
    return (_QWORD *)v9[1];
  v13 = (_QWORD *)sub_1C484358C(a1, 24, 3);
  *v13 = v13 + 2;
  v13[1] = 0x100000000;
  v14 = *(_DWORD *)(a1 + 208);
  if (!v14)
  {
    v18 = 0;
    goto LABEL_22;
  }
  v15 = *(_QWORD *)(a1 + 192);
  v16 = v14 - 1;
  v17 = (v14 - 1) & (v7 ^ (a2 >> 9));
  v18 = (uint64_t *)(v15 + 16 * v17);
  v19 = *v18;
  if (*v18 != a2)
  {
    v20 = 0;
    v21 = 1;
    while (v19 != -4096)
    {
      if (v20)
        v22 = 0;
      else
        v22 = v19 == -8192;
      if (v22)
        v20 = v18;
      v23 = v17 + v21++;
      v17 = v23 & v16;
      v18 = (uint64_t *)(v15 + 16 * (v23 & v16));
      v19 = *v18;
      if (*v18 == a2)
        goto LABEL_29;
    }
    if (v20)
      v18 = v20;
LABEL_22:
    v24 = *(_DWORD *)(a1 + 200);
    if (4 * v24 + 4 >= 3 * v14)
    {
      sub_1C4964094(v5, 2 * v14);
      v27 = *(_QWORD *)(a1 + 192);
      v28 = *(_DWORD *)(a1 + 208) - 1;
      v29 = v28 & (v7 ^ (a2 >> 9));
      v18 = (uint64_t *)(v27 + 16 * v29);
      v30 = *v18;
      if (*v18 == a2)
      {
LABEL_41:
        v25 = a2;
        goto LABEL_26;
      }
      v31 = 0;
      v32 = 1;
      while (v30 != -4096)
      {
        if (v31)
          v33 = 0;
        else
          v33 = v30 == -8192;
        if (v33)
          v31 = v18;
        v34 = v29 + v32++;
        v29 = v34 & v28;
        v18 = (uint64_t *)(v27 + 16 * (v34 & v28));
        v30 = *v18;
        if (*v18 == a2)
          goto LABEL_41;
      }
      if (v31)
        v18 = v31;
    }
    else if (v14 + ~v24 - *(_DWORD *)(a1 + 204) <= v14 >> 3)
    {
      sub_1C4964094(v5, v14);
      v35 = 0;
      sub_1C4DC18C8(*(_QWORD *)(a1 + 192), *(_DWORD *)(a1 + 208), a2, &v35);
      v18 = v35;
    }
    v25 = *v18;
LABEL_26:
    ++*(_DWORD *)(a1 + 200);
    if (v25 != -4096)
      --*(_DWORD *)(a1 + 204);
    *v18 = a2;
    v18[1] = 0;
  }
LABEL_29:
  v18[1] = (uint64_t)v13;
  return v13;
}

_QWORD *sub_1C54F93BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *result;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v5 = a1 + 216;
  v4 = *(_QWORD *)(a1 + 216);
  v6 = *(unsigned int *)(a1 + 232);
  if ((_DWORD)v6)
  {
    LODWORD(v7) = ((*a2 >> 4) ^ (*a2 >> 9)) & (v6 - 1);
    v8 = (uint64_t *)(v4 + 16 * v7);
    v9 = *v8;
    if (*a2 == *v8)
      goto LABEL_3;
    v11 = 1;
    while (v9 != -4096)
    {
      v12 = v7 + v11++;
      v7 = v12 & (v6 - 1);
      v9 = *(_QWORD *)(v4 + 16 * v7);
      if (*a2 == v9)
      {
        v8 = (uint64_t *)(v4 + 16 * v7);
        goto LABEL_3;
      }
    }
  }
  v8 = (uint64_t *)(v4 + 16 * v6);
LABEL_3:
  if (v8 != (uint64_t *)(v4 + 16 * v6))
    return (_QWORD *)v8[1];
  result = (_QWORD *)sub_1C484358C(a1 + 96, 24, 3);
  *result = result + 2;
  result[1] = 0x100000000;
  v13 = *a2;
  v14 = *(_DWORD *)(a1 + 232);
  if (!v14)
  {
    v18 = 0;
    goto LABEL_24;
  }
  v15 = *(_QWORD *)(a1 + 216);
  v16 = v14 - 1;
  v17 = ((v13 >> 4) ^ (v13 >> 9)) & (v14 - 1);
  v18 = (uint64_t *)(v15 + 16 * v17);
  v19 = *v18;
  if (v13 != *v18)
  {
    v20 = 0;
    v21 = 1;
    while (v19 != -4096)
    {
      if (v20)
        v22 = 0;
      else
        v22 = v19 == -8192;
      if (v22)
        v20 = v18;
      v23 = v17 + v21++;
      v17 = v23 & v16;
      v18 = (uint64_t *)(v15 + 16 * (v23 & v16));
      v19 = *v18;
      if (v13 == *v18)
        goto LABEL_12;
    }
    if (v20)
      v18 = v20;
LABEL_24:
    v24 = *(_DWORD *)(a1 + 224);
    if (4 * v24 + 4 >= 3 * v14)
    {
      v14 *= 2;
    }
    else if (v14 + ~v24 - *(_DWORD *)(a1 + 228) > v14 >> 3)
    {
LABEL_26:
      ++*(_DWORD *)(a1 + 224);
      if (*v18 != -4096)
        --*(_DWORD *)(a1 + 228);
      *v18 = v13;
      v18[1] = 0;
      goto LABEL_12;
    }
    v25 = result;
    v26 = v5;
    v27 = v13;
    sub_1C4ECA920(v26, v14);
    v28 = 0;
    sub_1C504C9E8(*(_QWORD *)(a1 + 216), *(_DWORD *)(a1 + 232), v27, &v28);
    v13 = v27;
    result = v25;
    v18 = v28;
    goto LABEL_26;
  }
LABEL_12:
  v18[1] = (uint64_t)result;
  return result;
}

int *sub_1C54F95B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  int v10;
  int v11;
  int *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  llvm::UndefValue *AggregateElement;
  llvm::UndefValue *v19;
  llvm::Type *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  int GenericVirtualRegister;
  unint64_t v30;
  const llvm::DataLayout *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *Impl;
  unsigned __int8 **v41;
  unsigned __int8 *v42;
  unsigned int v43;
  uint64_t v44;
  void (*v45)(void);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int ElementCount;
  llvm::Type *v51;
  void *NullValue;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  int v62;
  _QWORD *v64;
  uint64_t v65;
  uint64_t ***v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  uint64_t ****v72;
  uint64_t ***v73;
  uint64_t ****v74;
  int v75;
  BOOL v76;
  unsigned int v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  llvm::ConstantDataSequential *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  char *v91;
  unint64_t v92;
  void **v93;
  unsigned __int8 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  llvm::Value **v99;
  int *v100;
  int v101;
  uint64_t v102;
  unint64_t v103;
  llvm::Constant **v104;
  unsigned int v105;
  unsigned int v106;
  llvm::APFloatBase *ElementAsConstant;
  int *v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  unsigned __int8 *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  _DWORD *v121;
  int v122;
  unsigned __int8 *v123;
  uint64_t **v124;
  int v125;
  BOOL v126;
  unsigned int v127;
  char *v128;
  int *v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  _DWORD *v138;
  int v139;
  unint64_t i;
  int *v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  void *v145;
  uint64_t ****v146;
  uint64_t ***v147;
  unsigned __int8 *v148;
  uint64_t **v149;
  uint64_t *v150;
  int *v151;
  uint64_t v152;
  int v153;
  _QWORD *v154;
  uint64_t v155;
  llvm::MachineFunction *v156;
  unint64_t *v157;
  unint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  _QWORD *v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  _DWORD *v175;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t *v185;
  uint64_t v186;
  int *v187;
  uint64_t v188;
  int v189;
  int *v190;
  uint64_t v191;
  int v192;
  int v193;
  uint64_t *v194;
  uint64_t v195;
  int *v196;
  uint64_t v197;
  int v198;
  int *v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _DWORD *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  unsigned __int8 **v212;
  void *v213;
  uint64_t v214;
  unint64_t v215;
  void *v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t *v224;
  uint64_t v225;
  int *v226;
  uint64_t v227;
  int v228;
  int *v229;
  uint64_t v230;
  int v231;
  int v232;
  uint64_t *v233;
  uint64_t v234;
  int *v235;
  uint64_t v236;
  int v237;
  int *v238;
  uint64_t v239;
  int v240;
  int v241;
  uint64_t *v242;
  uint64_t v243;
  int *v244;
  uint64_t v245;
  int v246;
  int *v247;
  uint64_t v248;
  int v249;
  int v250;
  uint64_t *v251;
  uint64_t v252;
  int *v253;
  uint64_t v254;
  int v255;
  int *v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  int v260;
  llvm ***v261;
  unint64_t LLTForType;
  const llvm::DataLayout *v263;
  unint64_t v264;
  int v265;
  uint64_t *v266;
  int v267;
  uint64_t *v268;
  uint64_t v269;
  int *v270;
  uint64_t v271;
  int v272;
  int *v273;
  uint64_t v274;
  int v275;
  int v276;
  uint64_t *v277;
  uint64_t v278;
  int *v279;
  uint64_t v280;
  int v281;
  int *v282;
  uint64_t v283;
  int v284;
  int v285;
  uint64_t *v286;
  uint64_t v287;
  int *v288;
  uint64_t v289;
  int v290;
  int *v291;
  uint64_t v292;
  int v293;
  int v294;
  uint64_t *v295;
  uint64_t v296;
  int *v297;
  uint64_t v298;
  int v299;
  int *v300;
  uint64_t v301;
  int v302;
  int v303;
  uint64_t *v304;
  uint64_t v305;
  int *v306;
  uint64_t v307;
  int v308;
  int *v309;
  uint64_t v310;
  int v311;
  int v312;
  uint64_t *v313;
  uint64_t v314;
  int *v315;
  uint64_t v316;
  int v317;
  int *v318;
  uint64_t v319;
  int v320;
  uint64_t *v321;
  int *v322;
  uint64_t v323;
  int v324;
  int *v325;
  uint64_t v326;
  int v327;
  void *v328[2];
  char v329;
  void *__p;
  char v331;
  int v332;
  int v333;
  void *v334;
  uint64_t v335;
  _QWORD *v336;
  uint64_t v337;
  int v338;
  int v339;
  const char *v340;
  const char *v341;
  uint64_t v342;
  char v343;
  char v344;
  void *v345;
  uint64_t v346;
  _BYTE v347[260];
  int v348;
  uint64_t v349;
  uint64_t *v350;
  uint64_t v351;
  _BYTE v352[32];
  unsigned __int8 *v353;
  uint64_t v354;
  _QWORD v355[4];

  v355[2] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 448);
  v5 = *(unsigned int *)(a1 + 464);
  v6 = a2 >> 4;
  if ((_DWORD)v5)
  {
    LODWORD(v7) = (v5 - 1) & (v6 ^ (a2 >> 9));
    v8 = (uint64_t **)(v4 + 16 * v7);
    v9 = *v8;
    if (*v8 == a2)
      goto LABEL_8;
    v10 = 1;
    while (v9 != (uint64_t *)-4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v5 - 1);
      v9 = *(uint64_t **)(v4 + 16 * v7);
      if (v9 == a2)
      {
        v8 = (uint64_t **)(v4 + 16 * v7);
        goto LABEL_8;
      }
    }
  }
  v8 = (uint64_t **)(v4 + 16 * v5);
LABEL_8:
  if (v8 != (uint64_t **)(v4 + 16 * v5))
    return (int *)*v8[1];
  v13 = *(unsigned __int8 *)(*a2 + 8);
  v14 = sub_1C54F9160(a1 + 256, (uint64_t)a2);
  v15 = (uint64_t)v14;
  if (v13 == 7)
    return (int *)*v14;
  v16 = sub_1C54F93BC(a1 + 256, a2);
  v350 = (uint64_t *)v352;
  v351 = 0x400000000;
  if (*((_DWORD *)v16 + 2))
    v17 = 0;
  else
    v17 = (uint64_t)v16;
  llvm::computeValueLLTs(*(llvm::DataLayout **)(a1 + 880), *a2, (unsigned int *)&v350, v17, 0);
  if (*((unsigned __int8 *)a2 + 16) >= 0x15u)
  {
    if ((_DWORD)v351)
    {
      v27 = v350;
      v28 = 8 * v351;
      do
      {
        GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(a1 + 872), *v27, "", 0);
        v30 = *(unsigned int *)(v15 + 8);
        if (v30 >= *(unsigned int *)(v15 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v15, v15 + 16, v30 + 1, 4);
          v30 = *(unsigned int *)(v15 + 8);
        }
        *(_DWORD *)(*(_QWORD *)v15 + 4 * v30) = GenericVirtualRegister;
        ++*(_DWORD *)(v15 + 8);
        ++v27;
        v28 -= 8;
      }
      while (v28);
    }
    v12 = *(int **)v15;
    goto LABEL_233;
  }
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x10)
  {
    AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)a2, 0);
    if (AggregateElement)
    {
      v19 = AggregateElement;
      LODWORD(v20) = 0;
      do
      {
        v21 = sub_1C54F95B0(a1, v19);
        if (v22)
        {
          v23 = (int *)v21;
          v24 = *(_DWORD *)(v15 + 8);
          v25 = 4 * v22;
          do
          {
            v26 = *v23;
            if (v24 >= *(_DWORD *)(v15 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v15, v15 + 16, v24 + 1, 4);
              v24 = *(_DWORD *)(v15 + 8);
            }
            *(_DWORD *)(*(_QWORD *)v15 + 4 * v24) = v26;
            v24 = *(_DWORD *)(v15 + 8) + 1;
            *(_DWORD *)(v15 + 8) = v24;
            ++v23;
            v25 -= 4;
          }
          while (v25);
        }
        v20 = (llvm::Type *)((_DWORD)v20 + 1);
        v19 = llvm::Constant::getAggregateElement((llvm::Constant *)a2, v20);
      }
      while (v19);
    }
    goto LABEL_232;
  }
  v33 = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(a1 + 872), *v350, "", 0);
  v34 = *(unsigned int *)(v15 + 8);
  if (v34 >= *(_DWORD *)(v15 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v15, v15 + 16, v34 + 1, 4);
    LODWORD(v34) = *(_DWORD *)(v15 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v15 + 4 * v34) = v33;
  ++*(_DWORD *)(v15 + 8);
  v35 = **(_DWORD **)v15;
  v36 = *(void **)(*(_QWORD *)(a1 + 848) + 32);
  v334 = v36;
  if (v36)
  {
    llvm::MetadataTracking::track((uint64_t)&v334, (unsigned __int8 *)v36, 2);
    if (v334)
    {
      v37 = *((unsigned int *)v334 + 2);
      if ((_DWORD)v37 == 2)
        v38 = *((_QWORD *)v334 - 1);
      else
        v38 = 0;
      v39 = *(_QWORD *)(a1 + 856);
      Impl = (unsigned __int8 *)llvm::DILocation::getImpl(*(uint64_t **)*a2, 0, 0, *((_QWORD *)v334 - v37), v38, 0, 0, 1);
      v353 = Impl;
      if (Impl)
        llvm::MetadataTracking::track((uint64_t)&v353, Impl, 2);
      v41 = (unsigned __int8 **)(v39 + 32);
      if (&v353 != v41)
      {
        if (*v41)
          llvm::MetadataTracking::untrack((uint64_t)v41, *v41);
        v42 = v353;
        *v41 = v353;
        if (!v42)
          goto LABEL_46;
        llvm::MetadataTracking::track((uint64_t)v41, v42, 2);
      }
      if (v353)
        llvm::MetadataTracking::untrack((uint64_t)&v353, v353);
LABEL_46:
      v36 = v334;
      if (v334)
        llvm::MetadataTracking::untrack((uint64_t)&v334, (unsigned __int8 *)v334);
    }
  }
  v43 = *((unsigned __int8 *)a2 + 16);
  if (v43 == 17)
  {
    v46 = *(_QWORD *)(a1 + 856);
    LODWORD(v334) = v35;
    LODWORD(v335) = 1;
    v45 = *(void (**)(void))(*(_QWORD *)v46 + 24);
    goto LABEL_52;
  }
  if (v43 != 16)
  {
    if (v43 - 11 <= 1)
    {
      v47 = *(_QWORD *)(a1 + 856);
      LODWORD(v334) = v35;
      LODWORD(v335) = 1;
      v45 = *(void (**)(void))(*(_QWORD *)v47 + 32);
      goto LABEL_52;
    }
    if (v43 == 19)
    {
      v48 = *(_QWORD *)(a1 + 856);
      LODWORD(v334) = v35;
      LODWORD(v335) = 1;
      sub_1C5544694(v48, (unint64_t *)&v334, 0);
      goto LABEL_232;
    }
    if (v43 > 3)
    {
      if (v43 == 13)
      {
        v49 = *a2;
        if (*(_BYTE *)(*a2 + 8) == 18)
        {
          ElementCount = llvm::ConstantAggregateZero::getElementCount((llvm::ConstantAggregateZero *)a2);
          if (ElementCount == 1)
          {
            NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(v49 + 24), v51);
LABEL_94:
            v84 = (uint64_t)NullValue;
            goto LABEL_95;
          }
          v353 = (unsigned __int8 *)v355;
          v354 = 0x400000000;
          if (ElementCount)
          {
            v95 = 0;
            v96 = 8 * ElementCount;
            do
            {
              v97 = *a2;
              if (*(_DWORD *)(*a2 + 8) == 17 || (*(_DWORD *)(*a2 + 8) & 0xFE) == 18)
                v104 = (llvm::Constant **)(v97 + 24);
              else
                v104 = (llvm::Constant **)(*(_QWORD *)(v97 + 16) + v95);
              v99 = llvm::Constant::getNullValue(*v104, v51);
              v100 = (int *)sub_1C54F95B0(a1, v99);
              if (v51)
                v101 = *v100;
              else
                v101 = 0;
              v102 = v354;
              if (v354 >= (unint64_t)HIDWORD(v354))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v353, (uint64_t)v355, v354 + 1, 4);
                v102 = v354;
              }
              *(_DWORD *)&v353[4 * v102] = v101;
              v103 = (v354 + 1);
              LODWORD(v354) = v354 + 1;
              v95 += 8;
            }
            while (v96 != v95);
            v123 = v353;
          }
          else
          {
            v103 = 0;
            v123 = (unsigned __int8 *)v355;
          }
          v132 = *(_QWORD *)(a1 + 856);
          v332 = v35;
          v333 = 1;
          v334 = &v336;
          v335 = 0x800000000;
          if (v103 >= 9)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v334, (uint64_t)&v336, v103, 24);
            v133 = v335;
            v134 = v334;
LABEL_181:
            v135 = 3 * v133;
            v136 = 4 * v103;
            do
            {
              v137 = *(_DWORD *)v123;
              v123 += 4;
              v138 = &v134[v135];
              *v138 = v137;
              v138[4] = 0;
              v135 += 3;
              v136 -= 4;
            }
            while (v136);
LABEL_183:
            v139 = v335;
            goto LABEL_228;
          }
          if (v103)
          {
            v133 = 0;
            v134 = &v336;
            goto LABEL_181;
          }
LABEL_227:
          v139 = 0;
          v134 = &v336;
LABEL_228:
          LODWORD(v335) = v139 + v103;
          (*(void (**)(uint64_t, uint64_t, int *, uint64_t, _QWORD *))(*(_QWORD *)v132 + 32))(v132, 77, &v332, 1, v134);
          if (v334 != &v336)
            free(v334);
          v145 = v353;
          if (v353 == (unsigned __int8 *)v355)
            goto LABEL_232;
          goto LABEL_231;
        }
        goto LABEL_72;
      }
      if (v43 == 15)
        v83 = (llvm::ConstantDataSequential *)a2;
      else
        v83 = 0;
      if (v43 == 15)
      {
        if (*(_DWORD *)(*a2 + 32) == 1)
        {
          NullValue = llvm::ConstantDataSequential::getElementAsConstant((llvm::ConstantDataSequential *)a2);
          goto LABEL_94;
        }
        v105 = 0;
        v106 = 0;
        v353 = (unsigned __int8 *)v355;
        v354 = 0x400000000;
        while (v106 < *(_DWORD *)(*(_QWORD *)v83 + 32))
        {
          ElementAsConstant = llvm::ConstantDataSequential::getElementAsConstant(v83);
          v108 = (int *)sub_1C54F95B0(a1, ElementAsConstant);
          if (v109)
            v110 = *v108;
          else
            v110 = 0;
          v111 = v354;
          if (v354 >= (unint64_t)HIDWORD(v354))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v353, (uint64_t)v355, v354 + 1, 4);
            v111 = v354;
          }
          *(_DWORD *)&v353[4 * v111] = v110;
          v105 = v354 + 1;
          LODWORD(v354) = v354 + 1;
          ++v106;
        }
        v114 = *(_QWORD *)(a1 + 856);
        v332 = v35;
        v333 = 1;
        v115 = v353;
        v334 = &v336;
        v335 = 0x800000000;
        if (v105 >= 9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v334, (uint64_t)&v336, v105, 24);
          v116 = v335;
          v117 = v334;
        }
        else
        {
          if (!v105)
          {
            v122 = 0;
            v117 = &v336;
            goto LABEL_194;
          }
          v116 = 0;
          v117 = &v336;
        }
        v118 = 3 * v116;
        v119 = 4 * v105;
        do
        {
          v120 = *(_DWORD *)v115;
          v115 += 4;
          v121 = &v117[v118];
          *v121 = v120;
          v121[4] = 0;
          v118 += 3;
          v119 -= 4;
        }
        while (v119);
        v122 = v335;
LABEL_194:
        LODWORD(v335) = v122 + v105;
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t, _QWORD *))(*(_QWORD *)v114 + 32))(v114, 77, &v332, 1, v117);
        if (v334 != &v336)
          free(v334);
        v145 = v353;
        if (v353 == (unsigned __int8 *)v355)
          goto LABEL_232;
        goto LABEL_231;
      }
      if (v43 == 5)
        v94 = (unsigned __int8 *)a2;
      else
        v94 = 0;
      if (v43 != 5)
      {
        if (v43 == 10)
          v112 = a2;
        else
          v112 = 0;
        if (v43 == 10)
        {
          v113 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
          if (v113 == 1)
          {
            v84 = *(a2 - 4);
LABEL_95:
            v85 = *(_QWORD *)(a1 + 856);
            v86 = a1;
            v87 = a2;
LABEL_96:
            sub_1C54FF408(v86, v87, v84, v85);
            goto LABEL_232;
          }
          v353 = (unsigned __int8 *)v355;
          v354 = 0x400000000;
          if (v113)
          {
            for (i = 0; i < v113; ++i)
            {
              v141 = (int *)sub_1C54F95B0(a1, v112[-4 * v113]);
              if (v142)
                v143 = *v141;
              else
                v143 = 0;
              v144 = v354;
              if (v354 >= (unint64_t)HIDWORD(v354))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v353, (uint64_t)v355, v354 + 1, 4);
                v144 = v354;
              }
              *(_DWORD *)&v353[4 * v144] = v143;
              v103 = (v354 + 1);
              LODWORD(v354) = v354 + 1;
              v113 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
              v112 += 4;
            }
            v148 = v353;
          }
          else
          {
            v103 = 0;
            v148 = (unsigned __int8 *)v355;
          }
          v132 = *(_QWORD *)(a1 + 856);
          v332 = v35;
          v333 = 1;
          v334 = &v336;
          v335 = 0x800000000;
          if (v103 >= 9)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v334, (uint64_t)&v336, v103, 24);
            v171 = v335;
            v134 = v334;
          }
          else
          {
            if (!v103)
              goto LABEL_227;
            v171 = 0;
            v134 = &v336;
          }
          v172 = 3 * v171;
          v173 = 4 * v103;
          do
          {
            v174 = *(_DWORD *)v148;
            v148 += 4;
            v175 = &v134[v172];
            *v175 = v174;
            v175[4] = 0;
            v172 += 3;
            v173 -= 4;
          }
          while (v173);
          goto LABEL_183;
        }
        if (v43 == 4)
        {
          sub_1C62759D4(*(_QWORD *)(a1 + 856), v35, (uint64_t)a2);
          goto LABEL_232;
        }
LABEL_72:
        v66 = **(uint64_t *****)(a1 + 864);
        if ((*((_BYTE *)v66 + 23) & 0x20) == 0)
          goto LABEL_100;
        v67 = ***v66;
        v334 = **(void ***)(a1 + 864);
        v68 = *(_DWORD *)(v67 + 2496);
        if (v68)
        {
          v69 = *(_QWORD *)(v67 + 2480);
          v70 = v68 - 1;
          v71 = v70 & ((v66 >> 4) ^ (v66 >> 9));
          v72 = (uint64_t ****)(v69 + 40 * v71);
          v73 = *v72;
          if (*v72 == v66)
            goto LABEL_83;
          v74 = 0;
          v75 = 1;
          while (v73 != (uint64_t ***)-4096)
          {
            if (v74)
              v76 = 0;
            else
              v76 = v73 == (uint64_t ***)-8192;
            if (v76)
              v74 = v72;
            v77 = v71 + v75++;
            v71 = v77 & v70;
            v72 = (uint64_t ****)(v69 + 40 * v71);
            v73 = *v72;
            if (*v72 == v66)
              goto LABEL_83;
          }
          if (v74)
            v146 = v74;
          else
            v146 = v72;
        }
        else
        {
          v146 = 0;
        }
        v72 = (uint64_t ****)sub_1C541AB24(v67 + 2480, (uint64_t)&v334, (uint64_t *)&v334, v146);
        v147 = (uint64_t ***)v334;
        v72[3] = 0;
        v72[4] = 0;
        *v72 = v147;
        v72[1] = (uint64_t ***)(v72 + 3);
        v72[2] = (uint64_t ***)0x100000000;
LABEL_83:
        v78 = *((unsigned int *)v72 + 4);
        if ((_DWORD)v78)
        {
          v79 = v72[1] + 1;
          v80 = 16 * v78;
          LODWORD(v81) = 0;
          while (*((_DWORD *)v79 - 2))
          {
            v82 = 0;
            v79 += 2;
            v80 -= 16;
            if (!v80)
              goto LABEL_102;
          }
          v81 = *v79;
          if (*v79)
          {
            v82 = *v79;
            if (*(_BYTE *)v81 != 15)
              v82 = *(_QWORD *)(v81 - 8 * *(unsigned int *)(v81 + 8));
            LODWORD(v81) = *(_DWORD *)(v81 + 28);
            goto LABEL_102;
          }
LABEL_101:
          v82 = 0;
LABEL_102:
          v88 = *(_QWORD *)(**(_QWORD **)(a1 + 864) + 80);
          if (v88)
            v89 = v88 - 24;
          else
            v89 = 0;
          v90 = *(_QWORD **)(v89 + 56);
          LODWORD(v335) = 10;
          BYTE4(v335) = 2;
          v336 = v90;
          v337 = v82;
          v338 = v81;
          v339 = 0;
          v340 = "gisel-irtranslator";
          v341 = "GISelFailure";
          v342 = 12;
          v343 = 0;
          v344 = 0;
          v345 = v347;
          v346 = 0x400000000;
          v347[256] = 0;
          v348 = -1;
          v349 = v89;
          v334 = &off_1E814E538;
          v353 = "unable to translate constant: ";
          v354 = 30;
          sub_1C53B17B4((uint64_t)&v345, (const void **)&v353);
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v328, "Type", 4uLL, (llvm::Type *)*a2);
          sub_1C47E3888((uint64_t)&v334, (uint64_t)v328);
          if (v331 < 0)
            operator delete(__p);
          if (v329 < 0)
            operator delete(v328[0]);
          sub_1C54FB238(**(uint64_t *****)(a1 + 864), *(uint64_t **)(*(_QWORD *)(a1 + 864) + 360), *(_QWORD *)(a1 + 888), *(llvm::OptimizationRemarkEmitter **)(a1 + 904), (llvm::DiagnosticInfoOptimizationBase *)&v334);
          v12 = *(int **)v15;
          v334 = &off_1E814E790;
          v91 = (char *)v345;
          if ((_DWORD)v346)
          {
            v92 = (unint64_t)v346 << 6;
            do
            {
              v93 = (void **)&v91[v92];
              if (v91[v92 - 17] < 0)
                operator delete(*(v93 - 5));
              if (*((char *)v93 - 41) < 0)
                operator delete(*(v93 - 8));
              v92 -= 64;
            }
            while (v92);
            v91 = (char *)v345;
          }
          if (v91 != v347)
            free(v91);
          goto LABEL_233;
        }
LABEL_100:
        LODWORD(v81) = 0;
        goto LABEL_101;
      }
      switch(*((_WORD *)a2 + 9))
      {
        case 1:
          if ((sub_1C54FBF74(a1, (unint64_t)a2, *(_QWORD *)(a1 + 856)) & 1) == 0)
            goto LABEL_72;
          goto LABEL_232;
        case 2:
          sub_1C54FC67C(a1, (uint64_t ***)a2, *(_QWORD **)(a1 + 856));
          goto LABEL_232;
        case 3:
          sub_1C54FD79C(a1, (uint64_t)a2, *(unsigned __int8 ***)(a1 + 856));
          goto LABEL_232;
        case 4:
          sub_1C626F9D8(a1, a2, *(_QWORD *)(a1 + 856));
          goto LABEL_232;
        case 5:
          if ((sub_1C626FDBC(a1, (unint64_t)a2, *(_QWORD **)(a1 + 856)) & 1) == 0)
            goto LABEL_72;
          goto LABEL_232;
        case 7:
          sub_1C55048B4((llvm::MachineFunction *)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 864) + 8) + 1040), (uint64_t)a2, *(_QWORD **)(a1 + 856));
          goto LABEL_232;
        case 0xC:
          sub_1C54FBBFC(a1, 177, (uint64_t)a2, *(_QWORD *)(a1 + 856));
          goto LABEL_232;
        case 0xD:
          v220 = *(_QWORD *)(a1 + 856);
          v221 = a1;
          v222 = 45;
          goto LABEL_378;
        case 0xE:
          v220 = *(_QWORD *)(a1 + 856);
          v221 = a1;
          v222 = 163;
          goto LABEL_378;
        case 0xF:
          v220 = *(_QWORD *)(a1 + 856);
          v221 = a1;
          v222 = 46;
          goto LABEL_378;
        case 0x10:
          v220 = *(_QWORD *)(a1 + 856);
          v221 = a1;
          v222 = 164;
          goto LABEL_378;
        case 0x11:
          v220 = *(_QWORD *)(a1 + 856);
          v221 = a1;
          v222 = 47;
          goto LABEL_378;
        case 0x12:
          v220 = *(_QWORD *)(a1 + 856);
          v221 = a1;
          v222 = 165;
          goto LABEL_378;
        case 0x13:
          v220 = *(_QWORD *)(a1 + 856);
          v221 = a1;
          v222 = 60;
          goto LABEL_378;
        case 0x14:
          v220 = *(_QWORD *)(a1 + 856);
          v221 = a1;
          v222 = 59;
          goto LABEL_378;
        case 0x15:
          v220 = *(_QWORD *)(a1 + 856);
          v221 = a1;
          v222 = 168;
          goto LABEL_378;
        case 0x16:
          v220 = *(_QWORD *)(a1 + 856);
          v221 = a1;
          v222 = 62;
          goto LABEL_378;
        case 0x17:
          v220 = *(_QWORD *)(a1 + 856);
          v221 = a1;
          v222 = 61;
          goto LABEL_378;
        case 0x18:
          v220 = *(_QWORD *)(a1 + 856);
          v221 = a1;
          v222 = 169;
          goto LABEL_378;
        case 0x19:
          v220 = *(_QWORD *)(a1 + 856);
          v221 = a1;
          v222 = 127;
          goto LABEL_378;
        case 0x1A:
          v220 = *(_QWORD *)(a1 + 856);
          v221 = a1;
          v222 = 128;
          goto LABEL_378;
        case 0x1B:
          v220 = *(_QWORD *)(a1 + 856);
          v221 = a1;
          v222 = 129;
          goto LABEL_378;
        case 0x1C:
          v220 = *(_QWORD *)(a1 + 856);
          v221 = a1;
          v222 = 65;
          goto LABEL_378;
        case 0x1D:
          v220 = *(_QWORD *)(a1 + 856);
          v221 = a1;
          v222 = 66;
          goto LABEL_378;
        case 0x1E:
          v220 = *(_QWORD *)(a1 + 856);
          v221 = a1;
          v222 = 67;
LABEL_378:
          sub_1C54FBAA8(v221, v222, (uint64_t)a2, v220);
          goto LABEL_232;
        case 0x1F:
          if ((sub_1C550448C(a1, (uint64_t)a2, *(uint64_t **)(a1 + 856)) & 1) == 0)
            goto LABEL_72;
          goto LABEL_232;
        case 0x20:
          sub_1C54FE594(a1, a2, *(const llvm::MachineBasicBlock ***)(a1 + 856));
          goto LABEL_232;
        case 0x21:
          sub_1C54FEA20(a1, (unint64_t)a2, *(const llvm::MachineBasicBlock ***)(a1 + 856));
          goto LABEL_232;
        case 0x22:
          sub_1C54FF540(a1, a2, *(uint64_t **)(a1 + 856));
          goto LABEL_232;
        case 0x23:
          sub_1C6275920(*(_QWORD *)(a1 + 856), 3u, *((unsigned __int8 *)a2 + 60));
          goto LABEL_232;
        case 0x24:
          sub_1C550501C(a1, (uint64_t)a2, *(_QWORD **)(a1 + 856));
          goto LABEL_232;
        case 0x25:
          if (!sub_1C5505210(a1, (uint64_t)a2, *(_QWORD **)(a1 + 856)))
            goto LABEL_72;
          goto LABEL_232;
        case 0x26:
          v193 = *((_DWORD *)a2 + 5);
          if ((v193 & 0x40000000) != 0)
            v194 = (uint64_t *)*(a2 - 1);
          else
            v194 = &a2[-4 * (v193 & 0x7FFFFFF)];
          v195 = *(_QWORD *)(a1 + 856);
          v196 = (int *)sub_1C54F95B0(a1, *v194);
          if (v197)
            v198 = *v196;
          else
            v198 = 0;
          v199 = (int *)sub_1C54F95B0(a1, a2);
          if (v200)
            v201 = *v199;
          else
            v201 = 0;
          LODWORD(v353) = v201;
          LODWORD(v354) = 1;
          LODWORD(v334) = v198;
          LODWORD(v336) = 0;
          v45 = *(void (**)(void))(*(_QWORD *)v195 + 32);
          goto LABEL_52;
        case 0x27:
          v232 = *((_DWORD *)a2 + 5);
          if ((v232 & 0x40000000) != 0)
            v233 = (uint64_t *)*(a2 - 1);
          else
            v233 = &a2[-4 * (v232 & 0x7FFFFFF)];
          v234 = *(_QWORD *)(a1 + 856);
          v235 = (int *)sub_1C54F95B0(a1, *v233);
          if (v236)
            v237 = *v235;
          else
            v237 = 0;
          v238 = (int *)sub_1C54F95B0(a1, a2);
          if (v239)
            v240 = *v238;
          else
            v240 = 0;
          LODWORD(v353) = v240;
          LODWORD(v354) = 1;
          LODWORD(v334) = v237;
          LODWORD(v336) = 0;
          v45 = *(void (**)(void))(*(_QWORD *)v234 + 32);
          goto LABEL_52;
        case 0x28:
          v241 = *((_DWORD *)a2 + 5);
          if ((v241 & 0x40000000) != 0)
            v242 = (uint64_t *)*(a2 - 1);
          else
            v242 = &a2[-4 * (v241 & 0x7FFFFFF)];
          v243 = *(_QWORD *)(a1 + 856);
          v244 = (int *)sub_1C54F95B0(a1, *v242);
          if (v245)
            v246 = *v244;
          else
            v246 = 0;
          v247 = (int *)sub_1C54F95B0(a1, a2);
          if (v248)
            v249 = *v247;
          else
            v249 = 0;
          LODWORD(v353) = v249;
          LODWORD(v354) = 1;
          LODWORD(v334) = v246;
          LODWORD(v336) = 0;
          v45 = *(void (**)(void))(*(_QWORD *)v243 + 32);
          goto LABEL_52;
        case 0x29:
          v303 = *((_DWORD *)a2 + 5);
          if ((v303 & 0x40000000) != 0)
            v304 = (uint64_t *)*(a2 - 1);
          else
            v304 = &a2[-4 * (v303 & 0x7FFFFFF)];
          v305 = *(_QWORD *)(a1 + 856);
          v306 = (int *)sub_1C54F95B0(a1, *v304);
          if (v307)
            v308 = *v306;
          else
            v308 = 0;
          v309 = (int *)sub_1C54F95B0(a1, a2);
          if (v310)
            v311 = *v309;
          else
            v311 = 0;
          LODWORD(v353) = v311;
          LODWORD(v354) = 1;
          LODWORD(v334) = v308;
          LODWORD(v336) = 0;
          v45 = *(void (**)(void))(*(_QWORD *)v305 + 32);
          goto LABEL_52;
        case 0x2A:
          v285 = *((_DWORD *)a2 + 5);
          if ((v285 & 0x40000000) != 0)
            v286 = (uint64_t *)*(a2 - 1);
          else
            v286 = &a2[-4 * (v285 & 0x7FFFFFF)];
          v287 = *(_QWORD *)(a1 + 856);
          v288 = (int *)sub_1C54F95B0(a1, *v286);
          if (v289)
            v290 = *v288;
          else
            v290 = 0;
          v291 = (int *)sub_1C54F95B0(a1, a2);
          if (v292)
            v293 = *v291;
          else
            v293 = 0;
          LODWORD(v353) = v293;
          LODWORD(v354) = 1;
          LODWORD(v334) = v290;
          LODWORD(v336) = 0;
          v45 = *(void (**)(void))(*(_QWORD *)v287 + 32);
          goto LABEL_52;
        case 0x2B:
          v184 = *((_DWORD *)a2 + 5);
          if ((v184 & 0x40000000) != 0)
            v185 = (uint64_t *)*(a2 - 1);
          else
            v185 = &a2[-4 * (v184 & 0x7FFFFFF)];
          v186 = *(_QWORD *)(a1 + 856);
          v187 = (int *)sub_1C54F95B0(a1, *v185);
          if (v188)
            v189 = *v187;
          else
            v189 = 0;
          v190 = (int *)sub_1C54F95B0(a1, a2);
          if (v191)
            v192 = *v190;
          else
            v192 = 0;
          LODWORD(v353) = v192;
          LODWORD(v354) = 1;
          LODWORD(v334) = v189;
          LODWORD(v336) = 0;
          v45 = *(void (**)(void))(*(_QWORD *)v186 + 32);
          goto LABEL_52;
        case 0x2C:
          v250 = *((_DWORD *)a2 + 5);
          if ((v250 & 0x40000000) != 0)
            v251 = (uint64_t *)*(a2 - 1);
          else
            v251 = &a2[-4 * (v250 & 0x7FFFFFF)];
          v252 = *(_QWORD *)(a1 + 856);
          v253 = (int *)sub_1C54F95B0(a1, *v251);
          if (v254)
            v255 = *v253;
          else
            v255 = 0;
          v256 = (int *)sub_1C54F95B0(a1, a2);
          if (v257)
            v258 = *v256;
          else
            v258 = 0;
          LODWORD(v353) = v258;
          LODWORD(v354) = 1;
          LODWORD(v334) = v255;
          LODWORD(v336) = 0;
          v45 = *(void (**)(void))(*(_QWORD *)v252 + 32);
          goto LABEL_52;
        case 0x2D:
          v267 = *((_DWORD *)a2 + 5);
          if ((v267 & 0x40000000) != 0)
            v268 = (uint64_t *)*(a2 - 1);
          else
            v268 = &a2[-4 * (v267 & 0x7FFFFFF)];
          v269 = *(_QWORD *)(a1 + 856);
          v270 = (int *)sub_1C54F95B0(a1, *v268);
          if (v271)
            v272 = *v270;
          else
            v272 = 0;
          v273 = (int *)sub_1C54F95B0(a1, a2);
          if (v274)
            v275 = *v273;
          else
            v275 = 0;
          LODWORD(v353) = v275;
          LODWORD(v354) = 1;
          LODWORD(v334) = v272;
          LODWORD(v336) = 0;
          v45 = *(void (**)(void))(*(_QWORD *)v269 + 32);
          goto LABEL_52;
        case 0x2E:
          v294 = *((_DWORD *)a2 + 5);
          if ((v294 & 0x40000000) != 0)
            v295 = (uint64_t *)*(a2 - 1);
          else
            v295 = &a2[-4 * (v294 & 0x7FFFFFF)];
          v296 = *(_QWORD *)(a1 + 856);
          v297 = (int *)sub_1C54F95B0(a1, *v295);
          if (v298)
            v299 = *v297;
          else
            v299 = 0;
          v300 = (int *)sub_1C54F95B0(a1, a2);
          if (v301)
            v302 = *v300;
          else
            v302 = 0;
          LODWORD(v353) = v302;
          LODWORD(v354) = 1;
          LODWORD(v334) = v299;
          LODWORD(v336) = 0;
          v45 = *(void (**)(void))(*(_QWORD *)v296 + 32);
          goto LABEL_52;
        case 0x2F:
          v223 = *((_DWORD *)a2 + 5);
          if ((v223 & 0x40000000) != 0)
            v224 = (uint64_t *)*(a2 - 1);
          else
            v224 = &a2[-4 * (v223 & 0x7FFFFFF)];
          v225 = *(_QWORD *)(a1 + 856);
          v226 = (int *)sub_1C54F95B0(a1, *v224);
          if (v227)
            v228 = *v226;
          else
            v228 = 0;
          v229 = (int *)sub_1C54F95B0(a1, a2);
          if (v230)
            v231 = *v229;
          else
            v231 = 0;
          LODWORD(v353) = v231;
          LODWORD(v354) = 1;
          LODWORD(v334) = v228;
          LODWORD(v336) = 0;
          v45 = *(void (**)(void))(*(_QWORD *)v225 + 32);
          goto LABEL_52;
        case 0x30:
          v312 = *((_DWORD *)a2 + 5);
          if ((v312 & 0x40000000) != 0)
            v313 = (uint64_t *)*(a2 - 1);
          else
            v313 = &a2[-4 * (v312 & 0x7FFFFFF)];
          v314 = *(_QWORD *)(a1 + 856);
          v315 = (int *)sub_1C54F95B0(a1, *v313);
          if (v316)
            v317 = *v315;
          else
            v317 = 0;
          v318 = (int *)sub_1C54F95B0(a1, a2);
          if (v319)
            v320 = *v318;
          else
            v320 = 0;
          LODWORD(v353) = v320;
          LODWORD(v354) = 1;
          LODWORD(v334) = v317;
          LODWORD(v336) = 0;
          v45 = *(void (**)(void))(*(_QWORD *)v314 + 32);
          goto LABEL_52;
        case 0x31:
          v259 = *(_QWORD *)(a1 + 856);
          v260 = *((_DWORD *)a2 + 5);
          if ((v260 & 0x40000000) != 0)
            v261 = (llvm ***)*(a2 - 1);
          else
            v261 = (llvm ***)&a2[-4 * (v260 & 0x7FFFFFF)];
          LLTForType = llvm::getLLTForType(**v261, *(llvm::Type **)(a1 + 880), v31);
          v264 = llvm::getLLTForType((llvm *)*a2, *(llvm::Type **)(a1 + 880), v263);
          v265 = *((_DWORD *)a2 + 5);
          if (LLTForType == v264)
          {
            if ((v265 & 0x40000000) != 0)
              v266 = (uint64_t *)*(a2 - 1);
            else
              v266 = &a2[-4 * (v265 & 0x7FFFFFF)];
            v84 = *v266;
            v86 = a1;
            v87 = a2;
            v85 = v259;
            goto LABEL_96;
          }
          if ((v265 & 0x40000000) != 0)
            v321 = (uint64_t *)*(a2 - 1);
          else
            v321 = &a2[-4 * (v265 & 0x7FFFFFF)];
          v322 = (int *)sub_1C54F95B0(a1, *v321);
          if (v323)
            v324 = *v322;
          else
            v324 = 0;
          v325 = (int *)sub_1C54F95B0(a1, a2);
          if (v326)
            v327 = *v325;
          else
            v327 = 0;
          LODWORD(v353) = v327;
          LODWORD(v354) = 1;
          LODWORD(v334) = v324;
          LODWORD(v336) = 0;
          v45 = *(void (**)(void))(*(_QWORD *)v259 + 32);
          goto LABEL_52;
        case 0x32:
          v276 = *((_DWORD *)a2 + 5);
          if ((v276 & 0x40000000) != 0)
            v277 = (uint64_t *)*(a2 - 1);
          else
            v277 = &a2[-4 * (v276 & 0x7FFFFFF)];
          v278 = *(_QWORD *)(a1 + 856);
          v279 = (int *)sub_1C54F95B0(a1, *v277);
          if (v280)
            v281 = *v279;
          else
            v281 = 0;
          v282 = (int *)sub_1C54F95B0(a1, a2);
          if (v283)
            v284 = *v282;
          else
            v284 = 0;
          LODWORD(v353) = v284;
          LODWORD(v354) = 1;
          LODWORD(v334) = v281;
          LODWORD(v336) = 0;
          v45 = *(void (**)(void))(*(_QWORD *)v278 + 32);
          goto LABEL_52;
        case 0x35:
        case 0x36:
          sub_1C54FBD14(a1, (uint64_t)a2, *(_QWORD *)(a1 + 856));
          goto LABEL_232;
        case 0x37:
          v202 = *(_QWORD *)(a1 + 856);
          v334 = &v336;
          v335 = 0x400000000;
          v203 = sub_1C54F95B0(a1, a2);
          if (v204)
          {
            v205 = (_DWORD *)v203;
            v206 = 4 * v204;
            do
            {
              LODWORD(v353) = *v205;
              LODWORD(v354) = 1;
              (*(void (**)(uint64_t, uint64_t, unsigned __int8 **, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v202 + 32))(v202, 69, &v353, 1, 0, 0, 0);
              v208 = v207;
              v209 = v335;
              if (v335 >= (unint64_t)HIDWORD(v335))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v334, (uint64_t)&v336, v335 + 1, 8);
                v209 = v335;
              }
              *((_QWORD *)v334 + v209) = v208;
              LODWORD(v335) = v335 + 1;
              ++v205;
              v206 -= 4;
            }
            while (v206);
          }
          v210 = (_QWORD *)(a1 + 544);
          v353 = v94;
          v211 = *(unsigned int *)(a1 + 552);
          if (v211 >= *(_DWORD *)(a1 + 556))
          {
            sub_1C6270C54((uint64_t)v210, &v353, (uint64_t)&v334);
LABEL_285:
            v145 = v334;
            if (v334 == &v336)
              goto LABEL_232;
LABEL_231:
            free(v145);
            goto LABEL_232;
          }
          v212 = (unsigned __int8 **)(*v210 + 32 * v211);
          *v212 = v94;
          v213 = v212 + 3;
          v212[2] = (unsigned __int8 *)0x100000000;
          v212[1] = (unsigned __int8 *)(v212 + 3);
          v214 = (uint64_t)(v212 + 1);
          v215 = v335;
          if ((void **)v214 == &v334 || (_DWORD)v335 == 0)
            goto LABEL_284;
          v217 = v334;
          if (v334 != &v336)
          {
            if (v213 != (void *)(v214 + 16))
            {
              free(v213);
              v217 = v334;
              LODWORD(v215) = v335;
            }
            *(_QWORD *)v214 = v217;
            *(_DWORD *)(v214 + 8) = v215;
            *(_DWORD *)(v214 + 12) = HIDWORD(v335);
            v334 = &v336;
            HIDWORD(v335) = 0;
            goto LABEL_283;
          }
          if (v335 >= 2)
          {
            *(_DWORD *)(v214 + 8) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v214, v214 + 16, v215, 8);
            v219 = v335;
            if (!(_DWORD)v335)
              goto LABEL_282;
            v218 = v334;
            v213 = *(void **)v214;
          }
          else
          {
            v218 = &v336;
            v219 = v335;
          }
          memcpy(v213, v218, 8 * v219);
LABEL_282:
          *(_DWORD *)(v214 + 8) = v215;
LABEL_283:
          LODWORD(v335) = 0;
LABEL_284:
          ++*(_DWORD *)(a1 + 552);
          goto LABEL_285;
        case 0x38:
          if ((sub_1C5500BC0(a1, (uint64_t)a2, *(_QWORD *)(a1 + 856), v32) & 1) == 0)
            goto LABEL_72;
          goto LABEL_232;
        case 0x39:
          sub_1C54FF260(a1, (uint64_t)a2, *(_QWORD *)(a1 + 856));
          goto LABEL_232;
        case 0x3C:
          sub_1C62700F4(a1, (uint64_t)a2, *(_QWORD *)(a1 + 856));
          goto LABEL_232;
        case 0x3D:
          sub_1C5504B20((_QWORD *)a1, (uint64_t)a2, *(uint64_t **)(a1 + 856));
          goto LABEL_232;
        case 0x3E:
          sub_1C550494C(a1, (uint64_t)a2, *(_QWORD *)(a1 + 856));
          goto LABEL_232;
        case 0x3F:
          sub_1C5504E68(a1, (uint64_t)a2, *(_QWORD *)(a1 + 856));
          goto LABEL_232;
        case 0x40:
          sub_1C54FED98(a1, (uint64_t)a2);
          goto LABEL_232;
        case 0x41:
          sub_1C54FF160(a1, (uint64_t)a2);
          goto LABEL_232;
        case 0x42:
          if ((sub_1C5503E3C(a1, (llvm **)a2, *(uint64_t **)(a1 + 856)) & 1) == 0)
            goto LABEL_72;
          goto LABEL_232;
        case 0x43:
          sub_1C5505414(a1, (uint64_t)a2, *(_QWORD *)(a1 + 856));
          goto LABEL_232;
        default:
          goto LABEL_72;
      }
    }
    if (v43 != 3 || (*((_BYTE *)a2 + 34) & 0x40) == 0)
    {
LABEL_71:
      v64 = *(_QWORD **)(a1 + 856);
      LODWORD(v334) = v35;
      LODWORD(v335) = 1;
      sub_1C5544284(v64, (int *)&v334, (uint64_t)a2);
      if (v65)
        goto LABEL_232;
      goto LABEL_72;
    }
    v53 = **(_QWORD **)*a2;
    v334 = a2;
    v54 = *(_DWORD *)(v53 + 2520);
    if (v54)
    {
      v55 = *(_QWORD *)(v53 + 2504);
      v56 = v54 - 1;
      v57 = v56 & (v6 ^ (a2 >> 9));
      v58 = (uint64_t **)(v55 + 24 * v57);
      v59 = *v58;
      if (*v58 == a2)
      {
LABEL_66:
        if (v58[2] == (uint64_t *)12)
        {
          v60 = v58[1];
          v61 = *v60;
          v62 = *((_DWORD *)v60 + 2);
          if (v61 == 0x7274702E6D766C6CLL && v62 == 1752462689)
          {
            v128 = llvm::GlobalPtrAuthInfo::analyze((uint64_t ***)a2, (const llvm::Value *)v36);
            v129 = (int *)sub_1C54F95B0(a1, *(_QWORD *)(*((_QWORD *)v128 - 4)- 32 * (*(_DWORD *)(*((_QWORD *)v128 - 4) + 20) & 0x7FFFFFF)));
            if (v130)
              v131 = *v129;
            else
              v131 = 0;
            v151 = (int *)sub_1C54F95B0(a1, *(_QWORD *)(*((_QWORD *)v128 - 4)- 32 * (*(_DWORD *)(*((_QWORD *)v128 - 4) + 20) & 0x7FFFFFF)+ 64));
            if (v152)
              v153 = *v151;
            else
              v153 = 0;
            v154 = *(_QWORD **)(a1 + 856);
            v156 = sub_1C55437B8(v154, 0x48u);
            v157 = (unint64_t *)v155;
            v158 = (unint64_t *)v154[6];
            v159 = *(_QWORD *)(v154[5] + 40);
            *(_QWORD *)(v155 + 24) = v159;
            v160 = *(_QWORD *)(v159 + 32);
            v161 = *(unsigned int *)(v155 + 40);
            if ((_DWORD)v161)
            {
              v177 = *(_QWORD *)(v155 + 32);
              v178 = *(_QWORD *)(v160 + 40);
              v179 = 32 * v161;
              do
              {
                if (!*(_BYTE *)v177)
                {
                  v180 = *(unsigned int *)(v177 + 4);
                  if ((int)v180 >= 0)
                    v181 = (uint64_t *)(*(_QWORD *)(v178 + 272) + 8 * v180);
                  else
                    v181 = (uint64_t *)(*(_QWORD *)(v178 + 24) + 16 * (v180 & 0x7FFFFFFF) + 8);
                  v182 = *v181;
                  if (*v181)
                  {
                    v183 = *(_QWORD *)(v182 + 16);
                    *(_QWORD *)(v182 + 16) = v177;
                    *(_QWORD *)(v177 + 16) = v183;
                    if ((*(_BYTE *)(v177 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v177 + 24) = v182;
                    }
                    else
                    {
                      *(_QWORD *)(v177 + 24) = 0;
                      v181 = (uint64_t *)(v183 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v177 + 16) = v177;
                    *(_QWORD *)(v177 + 24) = 0;
                  }
                  *v181 = v177;
                }
                v177 += 32;
                v179 -= 32;
              }
              while (v179);
            }
            v162 = *(_QWORD *)(v160 + 728);
            if (v162)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v162 + 24))(v162, v155);
            v163 = *v158 & 0xFFFFFFFFFFFFFFF8;
            *v157 = v163 | *v157 & 7;
            v157[1] = (unint64_t)v158;
            *(_QWORD *)(v163 + 8) = v157;
            *v158 = *v158 & 7 | (unint64_t)v157;
            v164 = v154[7];
            if (v164)
              (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v164 + 24))(v164, v157);
            v335 = 0;
            v336 = 0;
            v337 = 0;
            LODWORD(v334) = 0x1000000;
            HIDWORD(v334) = v35;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v157, v156, (const llvm::MachineOperand *)&v334);
            v335 = 0;
            v336 = 0;
            LODWORD(v334) = 0;
            HIDWORD(v334) = v131;
            v337 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v157, v156, (const llvm::MachineOperand *)&v334);
            v165 = *(_QWORD *)(*((_QWORD *)v128 - 4)
                             - 32 * (*(_DWORD *)(*((_QWORD *)v128 - 4) + 20) & 0x7FFFFFF)
                             + 32);
            v166 = (_QWORD *)(v165 + 24);
            if (*(_DWORD *)(v165 + 32) >= 0x41u)
              v166 = (_QWORD *)*v166;
            v167 = (_QWORD *)*v166;
            LODWORD(v334) = 1;
            v335 = 0;
            v336 = v167;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v157, v156, (const llvm::MachineOperand *)&v334);
            v335 = 0;
            v336 = 0;
            LODWORD(v334) = 0;
            HIDWORD(v334) = v153;
            v337 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v157, v156, (const llvm::MachineOperand *)&v334);
            v168 = *(_QWORD *)(*((_QWORD *)v128 - 4)
                             - 32 * (*(_DWORD *)(*((_QWORD *)v128 - 4) + 20) & 0x7FFFFFF)
                             + 96);
            v169 = (_QWORD *)(v168 + 24);
            if (*(_DWORD *)(v168 + 32) >= 0x41u)
              v169 = (_QWORD *)*v169;
            v170 = (_QWORD *)*v169;
            LODWORD(v334) = 1;
            v335 = 0;
            v336 = v170;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v157, v156, (const llvm::MachineOperand *)&v334);
            goto LABEL_232;
          }
        }
        goto LABEL_71;
      }
      v124 = 0;
      v125 = 1;
      while (v59 != (uint64_t *)-4096)
      {
        if (v124)
          v126 = 0;
        else
          v126 = v59 == (uint64_t *)-8192;
        if (v126)
          v124 = v58;
        v127 = v57 + v125++;
        v57 = v127 & v56;
        v58 = (uint64_t **)(v55 + 24 * v57);
        v59 = *v58;
        if (*v58 == a2)
          goto LABEL_66;
      }
      if (v124)
        v149 = v124;
      else
        v149 = v58;
    }
    else
    {
      v149 = 0;
    }
    v58 = (uint64_t **)sub_1C53D65B8(v53 + 2504, (uint64_t)&v334, (uint64_t *)&v334, v149);
    v150 = (uint64_t *)v334;
    v58[1] = 0;
    v58[2] = 0;
    *v58 = v150;
    goto LABEL_66;
  }
  v44 = *(_QWORD *)(a1 + 856);
  LODWORD(v334) = v35;
  LODWORD(v335) = 1;
  v45 = *(void (**)(void))(*(_QWORD *)v44 + 16);
LABEL_52:
  v45();
LABEL_232:
  v12 = *(int **)v15;
LABEL_233:
  if (v350 != (uint64_t *)v352)
    free(v350);
  return v12;
}

unint64_t sub_1C54FB238(uint64_t ***a1, uint64_t *a2, uint64_t a3, llvm::OptimizationRemarkEmitter *a4, llvm::DiagnosticInfoOptimizationBase *this)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ****v13;
  uint64_t ***v14;
  int v15;
  int v16;
  uint64_t ***v17;
  char *v18;
  uint64_t **v19;
  uint64_t **v20;
  void **v21;
  const void *v22;
  void *__p;
  char v25;
  _QWORD v26[4];
  __int16 v27;
  _QWORD v28[4];
  __int16 v29;
  void *v30[2];
  char v31;
  const void *v32[2];

  v8 = *a2;
  *a2 |= 0x10uLL;
  if (*((_QWORD *)this + 3) && *(_DWORD *)(*(_QWORD *)(a3 + 112) + 1024) != 1)
    goto LABEL_19;
  if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
  {
    v19 = 0;
    v18 = &byte_1C871356D;
    goto LABEL_12;
  }
  v9 = ***a1;
  v10 = *(_QWORD *)(v9 + 152);
  v11 = *(unsigned int *)(v9 + 168);
  if (!(_DWORD)v11)
    goto LABEL_10;
  LODWORD(v12) = (v11 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  v13 = (uint64_t ****)(v10 + 16 * v12);
  v14 = *v13;
  if (*v13 != a1)
  {
    v15 = 1;
    while (v14 != (uint64_t ***)-4096)
    {
      v16 = v12 + v15++;
      v12 = v16 & (v11 - 1);
      v14 = *(uint64_t ****)(v10 + 16 * v12);
      if (v14 == a1)
      {
        v13 = (uint64_t ****)(v10 + 16 * v12);
        goto LABEL_11;
      }
    }
LABEL_10:
    v13 = (uint64_t ****)(v10 + 16 * v11);
  }
LABEL_11:
  v17 = v13[1];
  v20 = *v17;
  v18 = (char *)(v17 + 2);
  v19 = v20;
LABEL_12:
  v27 = 1283;
  v26[0] = " (in function: ";
  v26[2] = v18;
  v26[3] = v19;
  v28[0] = v26;
  v28[2] = ")";
  v29 = 770;
  llvm::Twine::str((llvm::Twine *)v28, v30);
  v21 = (void **)v30[0];
  if (v31 >= 0)
    v21 = v30;
  v22 = (const void *)(v31 & 0x7F);
  if (v31 < 0)
    v22 = v30[1];
  v32[0] = v21;
  v32[1] = v22;
  sub_1C53B17B4((uint64_t)this + 80, v32);
  if (v31 < 0)
    operator delete(v30[0]);
  if (*(_DWORD *)(*(_QWORD *)(a3 + 112) + 1024) == 1)
  {
    llvm::DiagnosticInfoOptimizationBase::getMsg(this, (uint64_t)v26);
    v29 = 260;
    v28[0] = v26;
    llvm::report_fatal_error((uint64_t)v28, 1);
  }
LABEL_19:
  llvm::DiagnosticInfoOptimizationBase::getMsg(this, (uint64_t)&__p);
  sub_1C554A7E0((v8 & 0x10) == 0, 54282728);
  if (v25 < 0)
    operator delete(__p);
  return llvm::OptimizationRemarkEmitter::emit(a4, this);
}

uint64_t sub_1C54FB420(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  BOOL v11;
  const char *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v4 = (_DWORD *)(a1 + 688);
  v21 = a2;
  v22 = 0;
  if (sub_1C47A82D8(a1 + 688, &v21, &v22)
    && v22 != (_QWORD *)(*(_QWORD *)(a1 + 688) + 16 * *(unsigned int *)(a1 + 704)))
  {
    return *((unsigned int *)v22 + 2);
  }
  v6 = *(_QWORD *)(a1 + 880);
  v7 = *(_QWORD *)(a2 + 64);
  sub_1C4768AD0(v6, v7);
  v9 = (unint64_t)(v8 + 7) >> 3;
  v11 = v10 == 1;
  llvm::DataLayout::getAlignment(v6, v7);
  v14 = (1 << v13) + v9 - 1;
  v15 = -(1 << v13);
  if (v11)
  v16 = *(_QWORD *)(a2 - 32);
  v17 = (_QWORD *)(v16 + 24);
  if (*(_DWORD *)(v16 + 32) >= 0x41u)
    v17 = (_QWORD *)*v17;
  if (*v17 * (v14 & (unint64_t)v15) <= 1)
    v18 = 1;
  else
    v18 = *v17 * (v14 & v15);
  v21 = a2;
  v22 = 0;
  v19 = sub_1C47A82D8((uint64_t)v4, &v21, &v22);
  v20 = v22;
  if ((v19 & 1) == 0)
  {
    v20 = sub_1C5509554(v4, (uint64_t)&v21, &v21, v22);
    *v20 = v21;
    *((_DWORD *)v20 + 2) = 0;
  }
  result = llvm::MachineFrameInfo::CreateStackObject(*(unsigned __int8 **)(*(_QWORD *)(a1 + 864) + 56), v18, *(_WORD *)(a2 + 18) & 0x3F, 0, a2, 0);
  *((_DWORD *)v20 + 2) = result;
  return result;
}

uint64_t sub_1C54FB58C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  unint64_t v12;
  void **v13;
  void *v14[2];
  char v15;
  void *__p;
  char v17;
  const void *v18[2];
  uint64_t (**v19)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  char v29;
  char v30;
  void *v31;
  uint64_t v32;
  _BYTE v33[260];
  int v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  switch(*(_BYTE *)(a2 + 16))
  {
    case '<':
    case '=':
      v4 = (unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1;
      goto LABEL_4;
    case '@':
    case 'A':
      LOBYTE(v4) = *(_BYTE *)(a2 + 19);
LABEL_4:
      result = __clz(1 << v4) ^ 0x3F;
      break;
    default:
      v6 = *(_QWORD *)(a2 + 40);
      v7 = *(_QWORD *)(a2 + 48);
      v8 = *(_QWORD *)(v6 + 56);
      if (v7)
      {
        v9 = *(_QWORD *)(v7 - 8 * *(unsigned int *)(v7 + 8));
        if (*(_BYTE *)v9 != 15)
          v9 = *(_QWORD *)(v9 - 8 * *(unsigned int *)(v9 + 8));
        v10 = *(_DWORD *)(v7 + 4);
        LODWORD(v7) = *(unsigned __int16 *)(v7 + 2);
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
      v20 = 10;
      v21 = 2;
      v22 = v8;
      v23 = v9;
      v24 = v10;
      v25 = v7;
      v26 = "gisel-irtranslator";
      v27 = "";
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = v33;
      v32 = 0x400000000;
      v33[256] = 0;
      v34 = -1;
      v35 = v6;
      v19 = &off_1E814E538;
      v18[0] = "unable to translate memop: ";
      v18[1] = (const void *)27;
      sub_1C53B17B4((uint64_t)&v31, v18);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v14, "Opcode", 6uLL, (_BYTE *)a2);
      sub_1C47E3888((uint64_t)&v19, (uint64_t)v14);
      if (v17 < 0)
        operator delete(__p);
      if (v15 < 0)
        operator delete(v14[0]);
      sub_1C54FB238(**(uint64_t *****)(a1 + 864), *(uint64_t **)(*(_QWORD *)(a1 + 864) + 360), *(_QWORD *)(a1 + 888), *(llvm::OptimizationRemarkEmitter **)(a1 + 904), (llvm::DiagnosticInfoOptimizationBase *)&v19);
      v19 = &off_1E814E790;
      v11 = (char *)v31;
      if ((_DWORD)v32)
      {
        v12 = (unint64_t)v32 << 6;
        do
        {
          v13 = (void **)&v11[v12];
          if (v11[v12 - 17] < 0)
            operator delete(*(v13 - 5));
          if (*((char *)v13 - 41) < 0)
            operator delete(*(v13 - 8));
          v12 -= 64;
        }
        while (v12);
        v11 = (char *)v31;
      }
      if (v11 != v33)
        free(v11);
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_1C54FB7D0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v20;
  int v21;
  BOOL v22;
  unsigned int v24;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v38;
  int v39;
  BOOL v40;
  unsigned int v42;
  uint64_t *v44;

  v7 = result;
  v8 = *(_DWORD *)(result + 536);
  v9 = a2 >> 4;
  v10 = a3 >> 4;
  if (v8)
  {
    v11 = *(_QWORD *)(result + 520);
    v12 = (v10 ^ (a3 >> 9) | ((unint64_t)(v9 ^ (a2 >> 9)) << 32))
        + ~((unint64_t)(v10 ^ (a3 >> 9)) << 32);
    v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
    v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
    v15 = (v8 - 1) & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
    v16 = (uint64_t *)(v11 + 40 * v15);
    v17 = *v16;
    v18 = v16[1];
    if (*v16 == a2 && v18 == a3)
      goto LABEL_31;
    v20 = 0;
    v21 = 1;
    while (v17 != -4096 || v18 != -4096)
    {
      if (v20)
        v22 = 0;
      else
        v22 = v18 == -8192;
      if (v22 && v17 == -8192)
        v20 = v16;
      v24 = v15 + v21++;
      v15 = v24 & (v8 - 1);
      v16 = (uint64_t *)(v11 + 40 * v15);
      v17 = *v16;
      v18 = v16[1];
      if (*v16 == a2 && v18 == a3)
        goto LABEL_31;
    }
    if (v20)
      v16 = v20;
  }
  else
  {
    v16 = 0;
  }
  result += 520;
  v26 = *(_DWORD *)(v7 + 528);
  if (4 * v26 + 4 >= 3 * v8)
  {
    result = (uint64_t)sub_1C5509820((uint64_t *)result, 2 * v8);
    v28 = *(_DWORD *)(v7 + 536);
    if (v28)
    {
      v29 = *(_QWORD *)(v7 + 520);
      v30 = (v10 ^ (a3 >> 9) | ((unint64_t)(v9 ^ (a2 >> 9)) << 32))
          + ~((unint64_t)(v10 ^ (a3 >> 9)) << 32);
      v31 = (v30 ^ (v30 >> 22)) + ~((v30 ^ (v30 >> 22)) << 13);
      v32 = (9 * (v31 ^ (v31 >> 8))) ^ ((9 * (v31 ^ (v31 >> 8))) >> 15);
      v33 = v28 - 1;
      v34 = v33 & (((v32 + ~(v32 << 27)) >> 31) ^ (v32 + ~((_DWORD)v32 << 27)));
      v16 = (uint64_t *)(v29 + 40 * v34);
      v35 = *v16;
      v36 = v16[1];
      if (*v16 != a2 || v36 != a3)
      {
        v38 = 0;
        v39 = 1;
        while (v35 != -4096 || v36 != -4096)
        {
          if (v38)
            v40 = 0;
          else
            v40 = v36 == -8192;
          if (v40 && v35 == -8192)
            v38 = v16;
          v42 = v34 + v39++;
          v34 = v42 & v33;
          v16 = (uint64_t *)(v29 + 40 * v34);
          v35 = *v16;
          v36 = v16[1];
          if (*v16 == a2 && v36 == a3)
            goto LABEL_28;
        }
        if (v38)
          v16 = v38;
      }
    }
    else
    {
      v16 = 0;
    }
  }
  else if (v8 + ~v26 - *(_DWORD *)(v7 + 532) <= v8 >> 3)
  {
    sub_1C5509820((uint64_t *)result, v8);
    v44 = 0;
    result = sub_1C550910C(*(_QWORD *)(v7 + 520), *(_DWORD *)(v7 + 536), a2, a3, &v44);
    v16 = v44;
  }
LABEL_28:
  ++*(_DWORD *)(v7 + 528);
  if (*v16 != -4096 || v16[1] != -4096)
    --*(_DWORD *)(v7 + 532);
  *v16 = a2;
  v16[1] = a3;
  v16[2] = (uint64_t)(v16 + 4);
  v16[3] = 0x100000000;
LABEL_31:
  v27 = *((unsigned int *)v16 + 6);
  if (v27 >= *((_DWORD *)v16 + 7))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v16 + 2), (uint64_t)(v16 + 4), v27 + 1, 8);
    LODWORD(v27) = *((_DWORD *)v16 + 6);
  }
  *(_QWORD *)(v16[2] + 8 * v27) = a4;
  ++*((_DWORD *)v16 + 6);
  return result;
}

uint64_t sub_1C54FBAA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  _QWORD *v9;
  int *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  int *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _DWORD v23[12];
  _DWORD v24[4];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a3 + 20);
  if ((v8 & 0x40000000) != 0)
    v9 = *(_QWORD **)(a3 - 8);
  else
    v9 = (_QWORD *)(a3 - 32 * (v8 & 0x7FFFFFF));
  v10 = (int *)sub_1C54F95B0(a1, *v9);
  if (v11)
    v12 = *v10;
  else
    v12 = 0;
  v13 = *(_DWORD *)(a3 + 20);
  if ((v13 & 0x40000000) != 0)
    v14 = *(_QWORD *)(a3 - 8);
  else
    v14 = a3 - 32 * (v13 & 0x7FFFFFF);
  v15 = (int *)sub_1C54F95B0(a1, *(_QWORD *)(v14 + 32));
  if (v16)
    v17 = *v15;
  else
    v17 = 0;
  v18 = (int *)sub_1C54F95B0(a1, a3);
  if (v19)
    v20 = *v18;
  else
    v20 = 0;
  if (*(unsigned __int8 *)(a3 + 16) < 0x1Cu)
    v21 = 0x100000000;
  else
    v21 = llvm::MachineInstr::copyFlagsFromInstruction(a3) | 0x100000000;
  v24[0] = v20;
  v24[2] = 1;
  v23[0] = v12;
  v23[4] = 0;
  v23[6] = v17;
  v23[10] = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, a2, v24, 1, v23, 2, v21);
}

uint64_t sub_1C54FBBFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  _QWORD *v9;
  int *v10;
  uint64_t v11;
  int v12;
  int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _DWORD v18[6];
  _DWORD v19[4];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a3 + 20);
  if ((v8 & 0x40000000) != 0)
    v9 = *(_QWORD **)(a3 - 8);
  else
    v9 = (_QWORD *)(a3 - 32 * (v8 & 0x7FFFFFF));
  v10 = (int *)sub_1C54F95B0(a1, *v9);
  if (v11)
    v12 = *v10;
  else
    v12 = 0;
  v13 = (int *)sub_1C54F95B0(a1, a3);
  if (v14)
    v15 = *v13;
  else
    v15 = 0;
  if (*(unsigned __int8 *)(a3 + 16) < 0x1Cu)
    v16 = 0x100000000;
  else
    v16 = llvm::MachineInstr::copyFlagsFromInstruction(a3) | 0x100000000;
  v19[0] = v15;
  v19[2] = 1;
  v18[0] = v12;
  v18[4] = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, a2, v19, 1, v18, 1, v16);
}

uint64_t sub_1C54FBD14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  BOOL v8;
  int v9;
  _QWORD *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  int v18;
  int *v19;
  llvm::Type *v20;
  int v21;
  int v22;
  uint64_t (*v23)(uint64_t, uint64_t, int *, uint64_t, _DWORD *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *AllOnesValue;
  int *v28;
  uint64_t v29;
  int v30;
  int v32;
  int v33;
  _DWORD v34[4];
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 *)(a2 + 16);
  v8 = v6 < 0x1C || v6 - 83 < 0xFFFFFFFE;
  v9 = *(_DWORD *)(a2 + 20);
  if ((v9 & 0x40000000) != 0)
    v10 = *(_QWORD **)(a2 - 8);
  else
    v10 = (_QWORD *)(a2 - 32 * (v9 & 0x7FFFFFF));
  v11 = (int *)sub_1C54F95B0(a1, *v10);
  if (v12)
    v13 = *v11;
  else
    v13 = 0;
  v14 = *(_DWORD *)(a2 + 20);
  if ((v14 & 0x40000000) != 0)
    v15 = *(_QWORD *)(a2 - 8);
  else
    v15 = a2 - 32 * (v14 & 0x7FFFFFF);
  v16 = (int *)sub_1C54F95B0(a1, *(_QWORD *)(v15 + 32));
  if (v17)
    v18 = *v16;
  else
    v18 = 0;
  v19 = (int *)sub_1C54F95B0(a1, a2);
  if (v20)
  {
    v21 = *v19;
    if (v8)
    {
LABEL_21:
      v22 = *(unsigned __int16 *)(a2 + 24);
      goto LABEL_24;
    }
  }
  else
  {
    v21 = 0;
    if (v8)
      goto LABEL_21;
  }
  v22 = *(_WORD *)(a2 + 18) & 0x3F;
LABEL_24:
  if ((v22 - 32) <= 9)
  {
    v32 = v21;
    v33 = 1;
    v34[0] = v22;
    v35 = 2;
    v36 = v13;
    v37 = 0;
    v38 = v18;
    v39 = 0;
    v23 = *(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, _DWORD *, uint64_t, uint64_t))(*(_QWORD *)a3 + 32);
    v24 = a3;
    v25 = 134;
    v26 = 0;
    return v23(v24, v25, &v32, 1, v34, 3, v26);
  }
  if (v22 == 15)
  {
    v32 = v21;
    v33 = 1;
    AllOnesValue = llvm::Constant::getAllOnesValue(*(llvm::Constant **)a2, v20);
  }
  else
  {
    if (v22)
    {
      if (v8)
        v26 = 0x100000000;
      else
        v26 = llvm::MachineInstr::copyFlagsFromInstruction(a2) | 0x100000000;
      v32 = v21;
      v33 = 1;
      v34[0] = v22;
      v35 = 2;
      v36 = v13;
      v37 = 0;
      v38 = v18;
      v39 = 0;
      v23 = *(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, _DWORD *, uint64_t, uint64_t))(*(_QWORD *)a3 + 32);
      v24 = a3;
      v25 = 135;
      return v23(v24, v25, &v32, 1, v34, 3, v26);
    }
    v32 = v21;
    v33 = 1;
    AllOnesValue = llvm::Constant::getNullValue(*(llvm::Constant **)a2, v20);
  }
  v28 = (int *)sub_1C54F95B0(a1, AllOnesValue);
  if (v29)
    v30 = *v28;
  else
    v30 = 0;
  v34[0] = v30;
  v35 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, 19, &v32, 1, v34, 1, 0);
}

uint64_t sub_1C54FBF74(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t VRegUseAt;
  const char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  const llvm::Value *v16;

  v6 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)(a2 - 32 * v6);
    if (!v7)
      goto LABEL_3;
    sub_1C4768AD0(*(_QWORD *)(a1 + 880), *v7);
    v14 = v13 + 7;
    if ((_DWORD)v12 == 1)
    if (v14 >= 8)
    {
      v9 = sub_1C54F95B0(a1, v7);
      v8 = v15;
      goto LABEL_4;
    }
  }
  v7 = 0;
LABEL_3:
  v8 = 0;
  v9 = 0;
LABEL_4:
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 248) + 24))(*(_QWORD *)(a1 + 248))
    && (v16 = *(const llvm::Value **)(a1 + 816)) != 0)
  {
    VRegUseAt = llvm::SwiftErrorValueTracking::getOrCreateVRegUseAt((llvm::SwiftErrorValueTracking *)(a1 + 712), a2, *(const llvm::MachineBasicBlock **)(a3 + 40), v16);
  }
  else
  {
    VRegUseAt = 0;
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 248) + 40))(*(_QWORD *)(a1 + 248), a3, v7, v9, v8, a1 + 912, VRegUseAt);
}

void sub_1C54FC06C(_QWORD *a1, uint64_t a2, const llvm::APInt *a3, uint64_t a4, _QWORD *a5, int a6, unsigned int a7, uint64_t a8, char a9)
{
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  llvm::ValueHandleBase *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 **v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  llvm::ValueHandleBase *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  llvm::BasicBlock *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  void *v45;
  llvm::ConstantInt *v46;
  unsigned int v47;
  char v48;
  _QWORD *v49[2];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  __int128 v54;
  unint64_t v55;
  llvm::ValueHandleBase *v56;
  const llvm::APInt *v57;
  uint64_t v58;
  _QWORD *v59;
  unsigned __int8 *v60;
  int v61;
  unsigned __int8 *v62;
  unsigned int v63;
  int v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v52 = 0;
  *(_QWORD *)&v54 = &v52;
  v17 = *(_QWORD *)(a2 + 8);
  if (v17
    && !*(_QWORD *)(v17 + 8)
    && sub_1C4D9EC28((_QWORD **)&v54, 30, a2)
    && (!v52 || *(unsigned __int8 *)(v52 + 16) < 0x1Cu || *(_QWORD *)(v52 + 40) == a5[2]))
  {
    sub_1C54FC06C(a1);
    return;
  }
  v18 = *(unsigned __int8 *)(a2 + 16);
  v50 = 0;
  v51 = 0;
  if (v18 >= 0x1C)
  {
    *(_QWORD *)&v54 = &v51;
    *((_QWORD *)&v54 + 1) = &v50;
    if ((sub_1C4FA438C((_QWORD **)&v54, (uint64_t *)a2) & 1) != 0)
    {
      v28 = a9 ? 29 : 28;
    }
    else
    {
      v49[0] = &v51;
      v49[1] = &v50;
      v36 = sub_1C4FA4278(v49, (uint64_t *)a2);
      if (v36)
        v28 = 29;
      else
        v28 = 0;
      if (v36)
        v37 = 28;
      else
        v37 = 0;
      if (a9)
        v28 = v37;
    }
    if (v28)
    {
      if (v28 == a6)
      {
        v38 = *(_QWORD *)(a2 + 8);
        if (v38)
        {
          if (!*(_QWORD *)(v38 + 8))
          {
            v39 = *(llvm::BasicBlock **)(a2 + 40);
            if (v39 == (llvm::BasicBlock *)a5[2]
              && (!v51 || *(unsigned __int8 *)(v51 + 16) < 0x1Cu || *(llvm::BasicBlock **)(v51 + 40) == v39)
              && (!v50 || *(unsigned __int8 *)(v50 + 16) < 0x1Cu || *(llvm::BasicBlock **)(v50 + 40) == v39))
            {
              v40 = a1[108];
              v41 = *(_QWORD *)(v40 + 312);
              if (v41)
                *(_QWORD *)(v40 + 312) = *(_QWORD *)v41;
              else
                v41 = sub_1C484358C(v40 + 128, 232, 3);
              *(_QWORD *)v41 = 0;
              *(_QWORD *)(v41 + 8) = 0;
              *(_QWORD *)(v41 + 16) = v39;
              *(_DWORD *)(v41 + 24) = -1;
              *(_QWORD *)(v41 + 48) = (v41 + 48) | 4;
              *(_QWORD *)(v41 + 56) = v41 + 48;
              *(_BYTE *)(v41 + 144) = 0;
              *(_OWORD *)(v41 + 64) = 0u;
              *(_OWORD *)(v41 + 80) = 0u;
              *(_OWORD *)(v41 + 96) = 0u;
              *(_OWORD *)(v41 + 112) = 0u;
              *(_OWORD *)(v41 + 121) = 0u;
              *(_QWORD *)(v41 + 160) = 0;
              *(_QWORD *)(v41 + 168) = 0;
              *(_QWORD *)(v41 + 152) = 0;
              *(_BYTE *)(v41 + 176) = 0;
              *(_DWORD *)(v41 + 187) = 0;
              *(_QWORD *)(v41 + 180) = 0;
              *(_QWORD *)(v41 + 192) = 0;
              *(_DWORD *)(v41 + 199) = 0;
              *(_QWORD *)(v41 + 216) = 0;
              *(_QWORD *)(v41 + 224) = 0;
              *(_QWORD *)(v41 + 208) = 0;
              *(_QWORD *)(v41 + 32) = v40;
              *(_QWORD *)(v41 + 40) = v41;
              if (v39)
              {
                *(_QWORD *)(v41 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v39);
                *(_QWORD *)(v41 + 144) = v42;
              }
              v43 = (unint64_t *)a5[1];
              llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(a5[4] + 320, v41);
              v44 = *v43;
              *(_QWORD *)v41 = *v43;
              *(_QWORD *)(v41 + 8) = v43;
              *(_QWORD *)(v44 + 8) = v41;
              *v43 = v41;
              if (a6 == 29)
              {
                sub_1C54FC06C(a1);
                *(_QWORD *)&v54 = &v55;
                v55 = (a7 >> 1) | (unint64_t)(a8 << 32);
                *((_QWORD *)&v54 + 1) = 0x200000002;
                sub_1C50D6C6C((unsigned int *)&v55, (unsigned int *)&v56);
                sub_1C54FC06C(a1);
                v45 = (void *)v54;
                if ((unint64_t *)v54 == &v55)
                  return;
              }
              else
              {
                sub_1C54FC06C(a1);
                *(_QWORD *)&v54 = &v55;
                v55 = a7 | ((unint64_t)(a8 >> 1) << 32);
                *((_QWORD *)&v54 + 1) = 0x200000002;
                sub_1C50D6C6C((unsigned int *)&v55, (unsigned int *)&v56);
                sub_1C54FC06C(a1);
                v45 = (void *)v54;
                if ((unint64_t *)v54 == &v55)
                  return;
              }
              free(v45);
              return;
            }
          }
        }
      }
    }
  }
  v19 = *(unsigned __int8 *)(a2 + 16);
  if (v19 < 0x1C || v19 - 83 < 0xFFFFFFFE)
  {
    if (a9)
      v21 = 33;
    else
      v21 = 32;
    v22 = ***(uint64_t ****)a1[108];
    v23 = *v22;
    v24 = *(llvm::ValueHandleBase **)(*v22 + 1560);
    if (!v24)
    {
      v46 = *(llvm::ConstantInt **)(v23 + 1888);
      v47 = *(_DWORD *)(v23 + 1896);
      DWORD2(v54) = v47 >> 8;
      if (v47 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v54, 1, 0);
      }
      else
      {
        if (v47 <= 0xFF)
          v48 = 0;
        else
          v48 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v47);
        *(_QWORD *)&v54 = v48 & 1;
      }
      v24 = llvm::ConstantInt::get(v46, (llvm::LLVMContext *)&v54, a3);
      if (DWORD2(v54) >= 0x41 && (_QWORD)v54)
        MEMORY[0x1CAA32F9C](v54, 0x1000C8000313F17);
      *(_QWORD *)(v23 + 1560) = v24;
    }
    v25 = *(unsigned __int8 **)(a1[106] + 32);
    v53 = v25;
    if (v25)
    {
      llvm::MetadataTracking::track((uint64_t)&v53, v25, 2);
      v25 = v53;
    }
    LODWORD(v54) = v21;
    BYTE4(v54) = 0;
    *((_QWORD *)&v54 + 1) = a2;
    v55 = 0;
    v56 = v24;
    v57 = a3;
    v58 = a4;
    v59 = a5;
    v60 = 0;
    v61 = 0;
    v62 = v25;
    if (v25)
    {
      llvm::MetadataTracking::track((uint64_t)&v62, v25, 2);
      v26 = v53;
      v63 = a7;
      v64 = a8;
      if (v53)
      {
        v27 = &v53;
LABEL_32:
        llvm::MetadataTracking::untrack((uint64_t)v27, v26);
        goto LABEL_34;
      }
      goto LABEL_34;
    }
LABEL_33:
    v63 = a7;
    v64 = a8;
    goto LABEL_34;
  }
  v29 = *(_WORD *)(a2 + 18) & 0x3FLL;
  if (a9)
    LODWORD(v29) = dword_1C8654640[v29];
  v30 = *(_QWORD *)(a2 - 64);
  v31 = *(llvm::ValueHandleBase **)(a2 - 32);
  v32 = *(_QWORD **)(a1[106] + 32);
  v49[0] = v32;
  if (v32)
  {
    llvm::MetadataTracking::track((uint64_t)v49, (unsigned __int8 *)v32, 2);
    v32 = v49[0];
  }
  LODWORD(v54) = v29;
  BYTE4(v54) = 0;
  *((_QWORD *)&v54 + 1) = v30;
  v55 = 0;
  v56 = v31;
  v57 = a3;
  v58 = a4;
  v59 = a5;
  v60 = 0;
  v61 = 0;
  v62 = (unsigned __int8 *)v32;
  if (!v32)
    goto LABEL_33;
  llvm::MetadataTracking::track((uint64_t)&v62, (unsigned __int8 *)v32, 2);
  v26 = (unsigned __int8 *)v49[0];
  v63 = a7;
  v64 = a8;
  if (v49[0])
  {
    v27 = (unsigned __int8 **)v49;
    goto LABEL_32;
  }
LABEL_34:
  v33 = a1[224];
  v34 = *(_QWORD *)(v33 + 16);
  if (v34 < *(_QWORD *)(v33 + 24))
    v35 = sub_1C6270B40(v34, &v54) + 88;
  else
    v35 = sub_1C5509B18((__int128 **)(v33 + 8), &v54);
  *(_QWORD *)(v33 + 16) = v35;
  if (v62)
    llvm::MetadataTracking::untrack((uint64_t)&v62, v62);
  if (v60)
    llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
}

void sub_1C54FC67C(uint64_t a1, uint64_t ***a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t *v7;
  uint64_t ***v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t **v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  unsigned __int8 *v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t **v44;
  uint64_t *v45;
  uint64_t **v46;
  int v47;
  BOOL v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  const llvm::APInt *v52;
  uint64_t *v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  uint64_t ****v61;
  uint64_t ***v62;
  uint64_t ****v63;
  int v64;
  BOOL v65;
  unsigned int v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  int v70;
  uint64_t **v71;
  int v72;
  uint64_t *v73;
  uint64_t v74;
  int v75;
  _QWORD *v76;
  uint64_t *v77;
  uint64_t v78;
  llvm::ValueHandleBase *v79;
  unsigned __int8 *v80;
  uint64_t **v81;
  unsigned int v82;
  unsigned int v83;
  _BOOL4 v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 **v87;
  unsigned __int8 **v88;
  unsigned __int8 **v89;
  unsigned __int8 **v90;
  unsigned __int8 *v91;
  unsigned __int8 **v92;
  llvm::ConstantInt *v93;
  unsigned int v94;
  char v95;
  unsigned __int8 **v96;
  unsigned __int8 **v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  unsigned __int8 **v105;
  unsigned __int8 *v106;
  unsigned __int8 **v107;
  uint64_t ****v108;
  uint64_t *v109;
  unsigned __int8 *v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  llvm::ValueHandleBase *v114;
  unsigned __int8 *v115;
  uint64_t v116;
  _QWORD *v117;
  unsigned __int8 *v118;
  int v119;
  unsigned __int8 *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v6 = (_QWORD *)a3[5];
  v8 = a2 - 4;
  v7 = (uint64_t *)*(a2 - 4);
  v9 = (_DWORD *)(a1 + 496);
  v111 = v7;
  v10 = *(_DWORD *)(a1 + 512);
  if (v10)
  {
    v11 = *(_QWORD *)(a1 + 496);
    v12 = v10 - 1;
    v13 = v12 & ((v7 >> 4) ^ (v7 >> 9));
    v14 = (uint64_t **)(v11 + 16 * v13);
    v15 = *v14;
    if (v7 == *v14)
      goto LABEL_11;
    v16 = 0;
    v17 = 1;
    while (v15 != (uint64_t *)-4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == (uint64_t *)-8192;
      if (v18)
        v16 = v14;
      v19 = v13 + v17++;
      v13 = v19 & v12;
      v14 = (uint64_t **)(v11 + 16 * v13);
      v15 = *v14;
      if (v7 == *v14)
        goto LABEL_11;
    }
    if (v16)
      v71 = v16;
    else
      v71 = v14;
  }
  else
  {
    v71 = 0;
  }
  v14 = (uint64_t **)sub_1C47AD254(v9, (uint64_t)&v111, &v111, v71);
  *v14 = v111;
  v14[1] = 0;
LABEL_11:
  v20 = (unsigned __int8 *)v14[1];
  if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 1)
  {
    if (!*(_DWORD *)(a1 + 896) || (unsigned __int8 *)v6[1] != v20)
      sub_1C55450BC(a3, v20);
    v21 = *((unsigned __int8 *)a2 + 16);
    if (v21 != 30)
      __asm { BR              X11 }
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 3)
      v22 = 2;
    else
      v22 = 1;
    v23 = 0;
    v24 = v22;
    while (1)
    {
      v25 = *((unsigned __int8 *)a2 + 16);
      if (v25 != 30)
        __asm { BR              X9 }
      v26 = (uint64_t *)v8[-4 * v23];
      v111 = v26;
      v27 = *(_DWORD *)(a1 + 512);
      if (!v27)
        break;
      v28 = *(_QWORD *)(a1 + 496);
      v29 = v27 - 1;
      v30 = v29 & ((v26 >> 4) ^ (v26 >> 9));
      v31 = (_QWORD *)(v28 + 16 * v30);
      v32 = (_QWORD *)*v31;
      if (v26 != (uint64_t *)*v31)
      {
        v33 = 0;
        v34 = 1;
        while (v32 != (_QWORD *)-4096)
        {
          if (v33)
            v35 = 0;
          else
            v35 = v32 == (_QWORD *)-8192;
          if (v35)
            v33 = v31;
          v36 = v30 + v34++;
          v30 = v36 & v29;
          v31 = (_QWORD *)(v28 + 16 * v30);
          v32 = (_QWORD *)*v31;
          if (v26 == (uint64_t *)*v31)
            goto LABEL_31;
        }
        if (v33)
          v37 = v33;
        else
          v37 = v31;
        goto LABEL_37;
      }
LABEL_31:
      llvm::MachineBasicBlock::addSuccessor(v6, (_QWORD *)v31[1], -1);
      if (++v23 == v24)
        return;
    }
    v37 = 0;
LABEL_37:
    v31 = sub_1C47AD254(v9, (uint64_t)&v111, &v111, v37);
    *v31 = v111;
    v31[1] = 0;
    goto LABEL_31;
  }
  v38 = (uint64_t)*(a2 - 12);
  v39 = (uint64_t *)*(a2 - 8);
  v111 = v39;
  v40 = *(_DWORD *)(a1 + 512);
  if (v40)
  {
    v41 = *(_QWORD *)(a1 + 496);
    v42 = v40 - 1;
    v43 = v42 & ((v39 >> 4) ^ (v39 >> 9));
    v44 = (uint64_t **)(v41 + 16 * v43);
    v45 = *v44;
    if (v39 == *v44)
      goto LABEL_49;
    v46 = 0;
    v47 = 1;
    while (v45 != (uint64_t *)-4096)
    {
      if (v46)
        v48 = 0;
      else
        v48 = v45 == (uint64_t *)-8192;
      if (v48)
        v46 = v44;
      v49 = v43 + v47++;
      v43 = v49 & v42;
      v44 = (uint64_t **)(v41 + 16 * v43);
      v45 = *v44;
      if (v39 == *v44)
        goto LABEL_49;
    }
    if (v46)
      v81 = v46;
    else
      v81 = v44;
  }
  else
  {
    v81 = 0;
  }
  v44 = (uint64_t **)sub_1C47AD254(v9, (uint64_t)&v111, &v111, v81);
  *v44 = v111;
  v44[1] = 0;
LABEL_49:
  v50 = (uint64_t)v44[1];
  v51 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 864) + 16) + 120))(*(_QWORD *)(*(_QWORD *)(a1 + 864) + 16));
  if (*(unsigned __int8 *)(v38 + 16) <= 0x1Bu)
    v53 = 0;
  else
    v53 = (uint64_t *)v38;
  if (*(_BYTE *)(v51 + 48))
    v54 = 1;
  else
    v54 = v53 == 0;
  if (v54)
    goto LABEL_92;
  v55 = v53[1];
  if (!v55 || *(_QWORD *)(v55 + 8))
    goto LABEL_92;
  if ((*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v56 = ***a2;
    v111 = (uint64_t *)a2;
    v57 = *(_DWORD *)(v56 + 2496);
    if (v57)
    {
      v58 = *(_QWORD *)(v56 + 2480);
      v59 = v57 - 1;
      v60 = v59 & ((a2 >> 4) ^ (a2 >> 9));
      v61 = (uint64_t ****)(v58 + 40 * v60);
      v62 = *v61;
      if (*v61 == a2)
      {
LABEL_69:
        v67 = *((unsigned int *)v61 + 4);
        if ((_DWORD)v67)
        {
          v68 = v61[1] + 1;
          v69 = 16 * v67;
          while (*((_DWORD *)v68 - 2) != 15)
          {
            v68 += 2;
            v69 -= 16;
            if (!v69)
              goto LABEL_73;
          }
          if (*v68)
            goto LABEL_92;
        }
        goto LABEL_73;
      }
      v63 = 0;
      v64 = 1;
      while (v62 != (uint64_t ***)-4096)
      {
        if (v63)
          v65 = 0;
        else
          v65 = v62 == (uint64_t ***)-8192;
        if (v65)
          v63 = v61;
        v66 = v60 + v64++;
        v60 = v66 & v59;
        v61 = (uint64_t ****)(v58 + 40 * v60);
        v62 = *v61;
        if (*v61 == a2)
          goto LABEL_69;
      }
      if (v63)
        v108 = v63;
      else
        v108 = v61;
    }
    else
    {
      v108 = 0;
    }
    v61 = (uint64_t ****)sub_1C541AB24(v56 + 2480, (uint64_t)&v111, (uint64_t *)&v111, v108);
    v109 = v111;
    v61[3] = 0;
    v61[4] = 0;
    *v61 = (uint64_t ***)v109;
    v61[1] = (uint64_t ***)(v61 + 3);
    v61[2] = (uint64_t ***)0x100000000;
    goto LABEL_69;
  }
LABEL_73:
  v122 = 0;
  v123 = 0;
  v111 = &v123;
  v112 = &v122;
  if ((sub_1C4FA438C(&v111, v53) & 1) != 0)
  {
    v70 = 28;
  }
  else
  {
    v111 = &v123;
    v112 = &v122;
    if (!sub_1C4FA4278(&v111, v53))
    {
LABEL_92:
      v77 = ****(uint64_t *****)(a1 + 864);
      v78 = *v77;
      v79 = *(llvm::ValueHandleBase **)(*v77 + 1560);
      if (!v79)
      {
        v93 = *(llvm::ConstantInt **)(v78 + 1888);
        v94 = *(_DWORD *)(v78 + 1896);
        LODWORD(v112) = v94 >> 8;
        if (v94 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v111, 1, 0);
        }
        else
        {
          if (v94 <= 0xFF)
            v95 = 0;
          else
            v95 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v94);
          v111 = (uint64_t *)(v95 & 1);
        }
        v79 = llvm::ConstantInt::get(v93, (llvm::LLVMContext *)&v111, v52);
        if (v112 >= 0x41 && v111)
          MEMORY[0x1CAA32F9C](v111, 0x1000C8000313F17);
        *(_QWORD *)(v78 + 1560) = v79;
      }
      v80 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 848) + 32);
      v110 = v80;
      if (v80)
      {
        llvm::MetadataTracking::track((uint64_t)&v110, v80, 2);
        v80 = v110;
      }
      LODWORD(v111) = 32;
      BYTE4(v111) = 0;
      v112 = (uint64_t *)v38;
      v113 = 0;
      v114 = v79;
      v115 = v20;
      v116 = v50;
      v117 = v6;
      v118 = 0;
      v119 = 0;
      v120 = v80;
      if (v80)
      {
        llvm::MetadataTracking::track((uint64_t)&v120, v80, 2);
        v121 = -1;
        if (v110)
          llvm::MetadataTracking::untrack((uint64_t)&v110, v110);
      }
      else
      {
        v121 = -1;
      }
      sub_1C54FD04C(a1, (int *)&v111, (uint64_t)v6, *(unsigned __int8 ***)(a1 + 848));
      if (v120)
        llvm::MetadataTracking::untrack((uint64_t)&v120, v120);
      if (v118)
        llvm::MetadataTracking::untrack((uint64_t)&v118, v118);
      return;
    }
    v70 = 29;
  }
  if (*(_BYTE *)(v123 + 16) == 89)
  {
    v72 = *(_DWORD *)(v123 + 20);
    v73 = (v72 & 0x40000000) != 0 ? *(uint64_t **)(v123 - 8) : (uint64_t *)(v123 - 32 * (v72 & 0x7FFFFFF));
    v74 = *v73;
    if (v74 && *(_BYTE *)(v122 + 16) == 89)
    {
      v75 = *(_DWORD *)(v122 + 20);
      v76 = (v75 & 0x40000000) != 0 ? *(_QWORD **)(v122 - 8) : (_QWORD *)(v122 - 32 * (v75 & 0x7FFFFFF));
      if (v74 == *v76)
        goto LABEL_92;
    }
  }
  v82 = sub_1C54FCF68(*(_QWORD *)(a1 + 944), v6[2], (uint64_t)v20);
  v83 = sub_1C54FCF68(*(_QWORD *)(a1 + 944), v6[2], v50);
  sub_1C54FC06C((_QWORD *)a1, (uint64_t)v53, (const llvm::APInt *)v20, v50, v6, v70, v82, v83, 0);
  v84 = sub_1C626F144((int **)(*(_QWORD *)(a1 + 1792) + 8));
  v85 = *(_QWORD *)(a1 + 1792);
  if (!v84)
  {
    v97 = *(unsigned __int8 ***)(v85 + 8);
    v96 = *(unsigned __int8 ***)(v85 + 16);
    v98 = -1171354717 * ((unint64_t)((char *)v96 - (char *)v97) >> 3);
    v99 = v98 - 1;
    if (v98 != 1)
    {
      v100 = 136;
      do
      {
        v101 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 1792) + 8) + v100);
        v102 = *(_QWORD *)(a1 + 864) + 320;
        *(_QWORD *)(*(_QWORD *)(v101[4] + 104) + 8 * *((unsigned int *)v101 + 6)) = 0;
        *((_DWORD *)v101 + 6) = -1;
        v103 = *v101;
        v104 = (_QWORD *)v101[1];
        *v104 = *v101;
        *(_QWORD *)(v103 + 8) = v104;
        *v101 = 0;
        v101[1] = 0;
        llvm::ilist_alloc_traits<llvm::MachineBasicBlock>::deleteNode(v102, (llvm::MachineBasicBlock *)v101);
        v100 += 88;
        --v99;
      }
      while (v99);
      v85 = *(_QWORD *)(a1 + 1792);
      v97 = *(unsigned __int8 ***)(v85 + 8);
      v96 = *(unsigned __int8 ***)(v85 + 16);
    }
    if (v96 != v97)
    {
      v105 = v96 - 2;
      do
      {
        if (*v105)
          llvm::MetadataTracking::untrack((uint64_t)v105, *v105);
        v106 = *(v105 - 2);
        if (v106)
          llvm::MetadataTracking::untrack((uint64_t)(v105 - 2), v106);
        v107 = v105 - 9;
        v105 -= 11;
      }
      while (v107 != v97);
    }
    *(_QWORD *)(v85 + 16) = v97;
    goto LABEL_92;
  }
  sub_1C54FD04C(a1, *(int **)(v85 + 8), (uint64_t)v6, *(unsigned __int8 ***)(a1 + 848));
  v86 = *(_QWORD *)(a1 + 1792);
  sub_1C5509C8C((uint64_t)&v111, *(_QWORD *)(v86 + 8) + 88, *(_QWORD *)(v86 + 16), *(_QWORD *)(v86 + 8));
  v88 = v87;
  v89 = *(unsigned __int8 ***)(v86 + 16);
  if (v89 != v87)
  {
    v90 = v89 - 2;
    do
    {
      if (*v90)
        llvm::MetadataTracking::untrack((uint64_t)v90, *v90);
      v91 = *(v90 - 2);
      if (v91)
        llvm::MetadataTracking::untrack((uint64_t)(v90 - 2), v91);
      v92 = v90 - 9;
      v90 -= 11;
    }
    while (v92 != v88);
  }
  *(_QWORD *)(v86 + 16) = v88;
}

void sub_1C54FCF38()
{
  JUMPOUT(0x1C54FCAD8);
}

void sub_1C54FCF48()
{
  JUMPOUT(0x1C54FCAD8);
}

void sub_1C54FCF54()
{
  JUMPOUT(0x1C54FC778);
}

void sub_1C54FCF5C()
{
  JUMPOUT(0x1C54FCAD8);
}

unint64_t sub_1C54FCF68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;

  if (a1)
    return llvm::BranchProbabilityInfo::getEdgeProbability(a1, a2, *(_QWORD *)(a3 + 16));
  v4 = *(_QWORD *)(a2 + 40);
  if (v4 == a2 + 40)
  {
LABEL_10:
    v8 = 0;
  }
  else
  {
    v5 = v4 - 24;
    if (!v4)
      v5 = 0;
    v6 = *(unsigned __int8 *)(v5 + 16);
    v7 = v6 - 29;
    if (v6 == 30)
    {
      if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 3)
        v8 = 2;
      else
        v8 = 1;
    }
    else
    {
      v8 = 0;
      switch(v7)
      {
        case 0:
        case 5:
        case 6:
          break;
        case 1:
          __break(1u);
          goto LABEL_19;
        case 2:
          v8 = (*(_DWORD *)(v5 + 20) >> 1) & 0x3FFFFFF;
          break;
        case 3:
        case 9:
LABEL_19:
          v8 = (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) - 1;
          break;
        case 4:
          v8 = 2;
          break;
        case 7:
          v8 = *(_WORD *)(v5 + 18) & 1;
          break;
        case 8:
          v8 = 1;
          break;
        case 10:
          v8 = *(_DWORD *)(v5 + 80) + 1;
          break;
        default:
          goto LABEL_10;
      }
    }
  }
  if (v8 <= 1)
    v8 = 1;
  if (v8 == 0x80000000)
    return 1;
  else
    return ((v8 >> 1) | 0x80000000) / v8;
}

uint64_t sub_1C54FD04C(uint64_t a1, int *a2, uint64_t a3, unsigned __int8 **a4)
{
  int *v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 **v12;
  unsigned __int8 **v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t result;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t **v35;
  unsigned int v36;
  int *v37;
  uint64_t v38;
  int v39;
  const char *v40;
  uint64_t v41;
  _QWORD *v42;
  int *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  const llvm::APInt *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _BOOL4 v63;
  unint64_t v64;
  llvm::ValueHandleBase *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  int EdgeProbability;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  int v76;
  unsigned __int8 *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  uint64_t v82;
  unsigned int v83;
  unint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v8 = (int *)sub_1C54F95B0(a1, *((_QWORD *)a2 + 1));
  if (v9)
    v10 = *v8;
  else
    v10 = 0;
  v12 = a4 + 4;
  v11 = a4[4];
  v81 = v11;
  if (v11)
    llvm::MetadataTracking::track((uint64_t)&v81, v11, 2);
  v13 = (unsigned __int8 **)(a2 + 18);
  if (a2 + 18 != (int *)v12)
  {
    if (*v12)
      llvm::MetadataTracking::untrack((uint64_t)(a4 + 4), *v12);
    v14 = *v13;
    *v12 = *v13;
    if (v14)
      llvm::MetadataTracking::track((uint64_t)(a4 + 4), v14, 2);
  }
  v15 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
  a4[5] = v15;
  a4[6] = v15 + 48;
  if (!*((_BYTE *)a2 + 4))
  {
    v25 = *((_QWORD *)a2 + 2);
    if (!v25)
    {
      v31 = 0;
      if (*(_BYTE *)(*((_QWORD *)a2 + 3) + 16) == 16)
        v32 = *((_QWORD *)a2 + 3);
      else
        v32 = 0;
      if (v10 < 0)
      {
        v33 = *(_QWORD *)(a1 + 872);
        if ((v10 & 0x7FFFFFFFu) >= *(_DWORD *)(v33 + 432))
          v31 = 0;
        else
          v31 = *(_QWORD *)(*(_QWORD *)(v33 + 424) + 8 * (v10 & 0x7FFFFFFF));
      }
      v84 = v31;
      v41 = sub_1C4825F50(&v84);
      if ((_DWORD)v40 == 1)
      if (v41 == 1 && v32)
      {
        v42 = (_QWORD *)(v32 + 24);
        if (*(_DWORD *)(v32 + 32) >= 0x41u)
          v42 = (_QWORD *)*v42;
        if (*v42 == 1 && *a2 == 32)
          goto LABEL_74;
      }
      v43 = (int *)sub_1C54F95B0(a1, *((_QWORD *)a2 + 3));
      if (v44)
        v39 = *v43;
      else
        v39 = 0;
      v45 = *a2;
      if (*a2 <= 0xF)
      {
        v82 = 9;
        v83 = 0;
        LODWORD(v84) = v45;
        v86 = 2;
        LODWORD(v87) = v10;
        v89 = 0;
        LODWORD(v90) = v39;
        v92 = 0;
        (*((void (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))*a4
         + 4))(a4, 135, &v82, 1, &v84, 3, 0);
LABEL_73:
        v10 = *(_DWORD *)(*(_QWORD *)(v46 + 32) + 4);
LABEL_74:
        v69 = (_QWORD *)*((_QWORD *)a2 + 6);
        v70 = (_QWORD *)*((_QWORD *)a2 + 4);
        v71 = *(_QWORD *)(a1 + 944);
        if (v71)
        {
          EdgeProbability = a2[20];
          if (EdgeProbability == -1)
            EdgeProbability = llvm::BranchProbabilityInfo::getEdgeProbability(v71, v69[2], v70[2]);
          llvm::MachineBasicBlock::addSuccessor(v69, v70, EdgeProbability);
        }
        else
        {
          llvm::MachineBasicBlock::addSuccessorWithoutProb(*((_QWORD **)a2 + 6), *((llvm::MachineBasicBlock **)a2 + 4));
        }
        sub_1C54FB7D0(a1, *(_QWORD *)(a3 + 16), *(_QWORD *)(*((_QWORD *)a2 + 4) + 16), *((_QWORD *)a2 + 6));
        v73 = (_QWORD *)*((_QWORD *)a2 + 5);
        if (*((_QWORD **)a2 + 4) != v73)
        {
          v74 = (_QWORD *)*((_QWORD *)a2 + 6);
          v75 = *(_QWORD *)(a1 + 944);
          if (v75)
          {
            v76 = a2[21];
            if (v76 == -1)
              v76 = llvm::BranchProbabilityInfo::getEdgeProbability(v75, v74[2], v73[2]);
            llvm::MachineBasicBlock::addSuccessor(v74, v73, v76);
          }
          else
          {
            llvm::MachineBasicBlock::addSuccessorWithoutProb(*((_QWORD **)a2 + 6), *((llvm::MachineBasicBlock **)a2 + 5));
          }
        }
        sub_1C50D6C6C(*(unsigned int **)(*((_QWORD *)a2 + 6) + 112), *(unsigned int **)(*((_QWORD *)a2 + 6) + 120));
        sub_1C54FB7D0(a1, *(_QWORD *)(a3 + 16), *(_QWORD *)(*((_QWORD *)a2 + 5) + 16), *((_QWORD *)a2 + 6));
        LODWORD(v84) = v10;
        v86 = 0;
        sub_1C5546168(a4, (int *)&v84, *((_QWORD *)a2 + 4));
        v21 = (unsigned __int8 *)*((_QWORD *)a2 + 5);
        goto LABEL_84;
      }
      v82 = 9;
      v83 = 0;
      LODWORD(v84) = v45;
      v86 = 2;
      LODWORD(v87) = v10;
      goto LABEL_51;
    }
    v26 = *((_QWORD *)a2 + 1);
    v27 = *((_QWORD *)a2 + 3);
    v28 = (int *)sub_1C54F95B0(a1, v25);
    if (v29)
      v30 = *v28;
    else
      v30 = 0;
    v34 = *((_QWORD *)a2 + 1);
    v35 = (unint64_t **)(v34 + 24);
    v36 = *(_DWORD *)(v34 + 32);
    if (v36 > 0x40)
    {
      if ((((*v35)[(v36 - 1) >> 6] >> (v36 - 1)) & 1) != 0
        && llvm::APInt::countTrailingZerosSlowCase(v35) == v36 - 1)
      {
LABEL_32:
        v37 = (int *)sub_1C54F95B0(a1, *((_QWORD *)a2 + 3));
        if (v38)
          v39 = *v37;
        else
          v39 = 0;
        v82 = 9;
        v83 = 0;
        LODWORD(v84) = 41;
        v86 = 2;
        LODWORD(v87) = v30;
LABEL_51:
        v89 = 0;
        LODWORD(v90) = v39;
        v92 = 0;
LABEL_72:
        (*((void (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))*a4
         + 4))(a4, 134, &v82, 1, &v84, 3, 0);
        goto LABEL_73;
      }
    }
    else if (*v35 == (unint64_t *)(1 << (v36 - 1)))
    {
      goto LABEL_32;
    }
    v79 = v26;
    if (v30 < 0 && (v47 = *(_QWORD *)(a1 + 872), (v30 & 0x7FFFFFFFu) < *(_DWORD *)(v47 + 432)))
      v48 = *(_QWORD *)(*(_QWORD *)(v47 + 424) + 8 * (v30 & 0x7FFFFFFF));
    else
      v48 = 0;
    v82 = v48;
    v83 = 0;
    LODWORD(v84) = v30;
    v86 = 0;
    LODWORD(v87) = v10;
    v89 = 0;
    v49 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))*a4
           + 4))(a4, 46, &v82, 1, &v84, 2, 0);
    v51 = v49;
    v80 = v52;
    v84 = v48;
    v85 = 0;
    v53 = *(unsigned int *)(v27 + 32);
    if (v53 >= 0x41)
    {
      v78 = v49;
      v55 = (void *)operator new[]();
      memcpy(v55, *(const void **)(v27 + 24), ((unint64_t)(v53 + 63) >> 3) & 0x3FFFFFF8);
      v56 = 0;
      v57 = *(unint64_t **)(v79 + 24);
      v58 = (unint64_t)(v53 + 63) >> 6;
      v59 = (unint64_t *)v55;
      v60 = v58;
      do
      {
        v61 = *v57++;
        v62 = *v59 - v61;
        v63 = *v59 < v61;
        v64 = *v59 + ~v61;
        if (v56)
        {
          v56 = v64 >= *v59;
        }
        else
        {
          v64 = v62;
          v56 = v63;
        }
        *v59++ = v64;
        --v60;
      }
      while (v60);
      *((_QWORD *)v55 + (v58 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v53;
      v51 = v78;
    }
    else
    {
      v54 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v53;
      if (!(_DWORD)v53)
        v54 = 0;
      v55 = (void *)(v54 & (*(_QWORD *)(v27 + 24) - *(_QWORD *)(v79 + 24)));
    }
    v83 = v53;
    v82 = (uint64_t)v55;
    v65 = llvm::ConstantInt::get(***(llvm::ConstantInt ****)a4[1], (llvm::LLVMContext *)&v82, v50);
    v66 = (*((uint64_t (**)(unsigned __int8 **, unint64_t *, llvm::ValueHandleBase *))*a4 + 2))(a4, &v84, v65);
    v68 = v67;
    if (v83 >= 0x41 && v82)
      MEMORY[0x1CAA32F9C](v82, 0x1000C8000313F17);
    v82 = 9;
    v83 = 0;
    LODWORD(v84) = 37;
    v86 = 2;
    v87 = v51;
    v88 = v80;
    v89 = 1;
    v90 = v66;
    v91 = v68;
    v92 = 1;
    goto LABEL_72;
  }
  v16 = (_QWORD *)*((_QWORD *)a2 + 6);
  v17 = (_QWORD *)*((_QWORD *)a2 + 4);
  v18 = *(_QWORD *)(a1 + 944);
  if (v18)
  {
    v19 = a2[20];
    if (v19 == -1)
      v19 = llvm::BranchProbabilityInfo::getEdgeProbability(v18, v16[2], v17[2]);
    llvm::MachineBasicBlock::addSuccessor(v16, v17, v19);
  }
  else
  {
    llvm::MachineBasicBlock::addSuccessorWithoutProb(*((_QWORD **)a2 + 6), *((llvm::MachineBasicBlock **)a2 + 4));
  }
  sub_1C54FB7D0(a1, *(_QWORD *)(a3 + 16), *(_QWORD *)(*((_QWORD *)a2 + 4) + 16), *((_QWORD *)a2 + 6));
  result = (uint64_t)sub_1C50D6C6C(*(unsigned int **)(*((_QWORD *)a2 + 6) + 112), *(unsigned int **)(*((_QWORD *)a2 + 6) + 120));
  v21 = (unsigned __int8 *)*((_QWORD *)a2 + 4);
  v22 = *((_QWORD *)a2 + 6);
  v23 = *(_QWORD *)(v22 + 32);
  v24 = *(unsigned __int8 **)(v22 + 8);
  if (v24 == (unsigned __int8 *)(v23 + 320))
    v24 = 0;
  if (v21 != v24)
LABEL_84:
    result = (uint64_t)sub_1C55450BC(a4, v21);
  if (&v81 == v12)
    goto LABEL_91;
  if (*v12)
    result = llvm::MetadataTracking::untrack((uint64_t)(a4 + 4), *v12);
  v77 = v81;
  *v12 = v81;
  if (v77)
  {
    result = llvm::MetadataTracking::track((uint64_t)(a4 + 4), v77, 2);
LABEL_91:
    if (v81)
      return llvm::MetadataTracking::untrack((uint64_t)&v81, v81);
  }
  return result;
}

void sub_1C54FD740(uint64_t a1, llvm::MachineBasicBlock *this, llvm::MachineBasicBlock *a3, int a4)
{
  if (a1)
  {
    if (a4 == -1)
      a4 = sub_1C54FCF68(a1, *((_QWORD *)this + 2), (uint64_t)a3);
    llvm::MachineBasicBlock::addSuccessor(this, a3, a4);
  }
  else
  {
    llvm::MachineBasicBlock::addSuccessorWithoutProb(this, a3);
  }
}

void sub_1C54FD79C(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  int v27;
  int EdgeProbability;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  int v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  _QWORD *v40;
  void *v41;
  _QWORD *v42;
  int v43;
  BOOL v44;
  unsigned int v45;
  void *v46;
  int v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  _QWORD *v51;
  void *v52;
  _QWORD *v53;
  int v54;
  BOOL v55;
  unsigned int v56;
  _QWORD *v57;
  void *v58;
  _QWORD *v59;
  int v60;
  _OWORD *v61;
  _OWORD *v62;
  __int128 v63;
  __int128 v64;
  BOOL v65;
  unsigned int v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  llvm::BasicBlock *v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  int v94;
  void *v95;
  uint64_t v96;
  unsigned __int8 *v97;
  char v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  int v102;
  __int128 v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  void *__p;
  _QWORD *v121;
  unint64_t v122;
  unsigned __int8 *v123;
  _QWORD *v124;
  void *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unsigned __int8 *v131;
  int v132;
  unsigned __int8 *v133;
  unsigned int v134;
  unsigned int v135;
  void *v136[2];
  __int128 v137;
  uint64_t v138;
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 944);
  __p = 0;
  v121 = 0;
  v122 = 0;
  sub_1C54FE040((uint64_t)&__p, ((*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFFu) - 1);
  v6 = *(_DWORD *)(a2 + 20);
  v7 = (v6 >> 1) & 0x3FFFFFF;
  v8 = (v7 - 1);
  if (v7 == 1)
    goto LABEL_32;
  v9 = 0;
  do
  {
    v10 = *(_DWORD *)(a2 + 20);
    if ((v10 & 0x40000000) != 0)
      v11 = *(_QWORD *)(a2 - 8);
    else
      v11 = a2 - 32 * (v10 & 0x7FFFFFF);
    v12 = (2 * v9 + 3);
    if (v9 == 4294967294)
      v12 = 1;
    v13 = *(void **)(v11 + 32 * v12);
    v136[0] = v13;
    v14 = *(_DWORD *)(a1 + 512);
    if (v14)
    {
      v15 = *(_QWORD *)(a1 + 496);
      v16 = v14 - 1;
      v17 = v16 & ((v13 >> 4) ^ (v13 >> 9));
      v18 = (_QWORD *)(v15 + 16 * v17);
      v19 = (void *)*v18;
      if (v13 == (void *)*v18)
        goto LABEL_17;
      v20 = 0;
      v21 = 1;
      while (v19 != (void *)-4096)
      {
        if (v20)
          v22 = 0;
        else
          v22 = v19 == (void *)-8192;
        if (v22)
          v20 = v18;
        v23 = v17 + v21++;
        v17 = v23 & v16;
        v18 = (_QWORD *)(v15 + 16 * v17);
        v19 = (void *)*v18;
        if (v13 == (void *)*v18)
          goto LABEL_17;
      }
      if (v20)
        v33 = v20;
      else
        v33 = v18;
    }
    else
    {
      v33 = 0;
    }
    v18 = sub_1C47AD254((_DWORD *)(a1 + 496), (uint64_t)v136, v136, v33);
    *v18 = v136[0];
    v18[1] = 0;
    v10 = *(_DWORD *)(a2 + 20);
LABEL_17:
    v24 = v18[1];
    if ((v10 & 0x40000000) != 0)
      v25 = *(_QWORD *)(a2 - 8);
    else
      v25 = a2 - 32 * (v10 & 0x7FFFFFF);
    v26 = *(void **)(v25 + 32 * ((2 * (_DWORD)v9 + 2) & 0xFFFFFFFE));
    if (v5)
    {
      if (v9 == 4294967294)
        v27 = 0;
      else
        v27 = v9 + 1;
      EdgeProbability = llvm::BranchProbabilityInfo::getEdgeProbability(v5, *(_QWORD *)(a2 + 40), v27);
    }
    else
    {
      EdgeProbability = ((v10 >> 2) & 0x1FFFFFF | 0x80000000) / ((v10 >> 1) & 0x3FFFFFF);
    }
    LODWORD(v136[0]) = 0;
    v136[1] = v26;
    *(_QWORD *)&v137 = v26;
    *((_QWORD *)&v137 + 1) = v24;
    LODWORD(v138) = EdgeProbability;
    v29 = v121;
    if ((unint64_t)v121 >= v122)
    {
      v32 = sub_1C5509DAC(&__p, (uint64_t)v136);
    }
    else
    {
      v30 = *(_OWORD *)v136;
      v31 = v137;
      v121[4] = v138;
      *v29 = v30;
      v29[1] = v31;
      v32 = (char *)v29 + 40;
    }
    v121 = v32;
    ++v9;
  }
  while (v9 != v8);
  v6 = *(_DWORD *)(a2 + 20);
LABEL_32:
  if ((v6 & 0x40000000) != 0)
    v34 = *(_QWORD *)(a2 - 8);
  else
    v34 = a2 - 32 * (v6 & 0x7FFFFFF);
  v35 = *(void **)(v34 + 32);
  v136[0] = v35;
  v36 = *(_DWORD *)(a1 + 512);
  if (!v36)
  {
    v104 = 0;
    goto LABEL_127;
  }
  v37 = *(_QWORD *)(a1 + 496);
  v38 = v36 - 1;
  v39 = v38 & ((v35 >> 4) ^ (v35 >> 9));
  v40 = (_QWORD *)(v37 + 16 * v39);
  v41 = (void *)*v40;
  if (v35 != (void *)*v40)
  {
    v42 = 0;
    v43 = 1;
    while (v41 != (void *)-4096)
    {
      if (v42)
        v44 = 0;
      else
        v44 = v41 == (void *)-8192;
      if (v44)
        v42 = v40;
      v45 = v39 + v43++;
      v39 = v45 & v38;
      v40 = (_QWORD *)(v37 + 16 * v39);
      v41 = (void *)*v40;
      if (v35 == (void *)*v40)
        goto LABEL_44;
    }
    if (v42)
      v104 = v42;
    else
      v104 = v40;
LABEL_127:
    v40 = sub_1C47AD254((_DWORD *)(a1 + 496), (uint64_t)v136, v136, v104);
    *v40 = v136[0];
    v40[1] = 0;
  }
LABEL_44:
  v112 = v40[1];
  llvm::SwitchCG::sortAndRangeify((uint64_t *)&__p);
  v46 = *(void **)(a2 + 40);
  v136[0] = v46;
  v47 = *(_DWORD *)(a1 + 512);
  if (!v47)
  {
    v105 = 0;
    goto LABEL_131;
  }
  v48 = *(_QWORD *)(a1 + 496);
  v49 = v47 - 1;
  v50 = v49 & ((v46 >> 4) ^ (v46 >> 9));
  v51 = (_QWORD *)(v48 + 16 * v50);
  v52 = (void *)*v51;
  if (v46 != (void *)*v51)
  {
    v53 = 0;
    v54 = 1;
    while (v52 != (void *)-4096)
    {
      if (v53)
        v55 = 0;
      else
        v55 = v52 == (void *)-8192;
      if (v55)
        v53 = v51;
      v56 = v50 + v54++;
      v50 = v56 & v49;
      v51 = (_QWORD *)(v48 + 16 * v50);
      v52 = (void *)*v51;
      if (v46 == (void *)*v51)
        goto LABEL_54;
    }
    if (v53)
      v105 = v53;
    else
      v105 = v51;
LABEL_131:
    v51 = sub_1C47AD254((_DWORD *)(a1 + 496), (uint64_t)v136, v136, v105);
    *v51 = v136[0];
    v51[1] = 0;
  }
LABEL_54:
  v57 = (_QWORD *)v51[1];
  if (__p == v121)
  {
    llvm::MachineBasicBlock::addSuccessor((_QWORD *)v51[1], (_QWORD *)v112, -1);
    if (v57[1] == v57[4] + 320)
      v106 = 0;
    else
      v106 = v57[1];
    if (v112 != v106)
      sub_1C55450BC(a3, (unsigned __int8 *)v112);
  }
  else
  {
    llvm::SwitchCG::SwitchLowering::findJumpTables(*(_QWORD *)(a1 + 1792), &__p, a2, v112, 0, 0);
    v107 = a2;
    llvm::SwitchCG::SwitchLowering::findBitTestClusters(*(uint64_t **)(a1 + 1792), (uint64_t *)&__p, a2);
    v136[0] = &v137;
    v136[1] = (void *)0x400000000;
    v58 = __p;
    v59 = v121 - 5;
    v115 = a1;
    v60 = sub_1C54FCF68(*(_QWORD *)(a1 + 944), v57[2], v112);
    v124 = v57;
    v125 = v58;
    v127 = 0;
    v128 = 0;
    v126 = v59;
    LODWORD(v129) = v60;
    v61 = (_OWORD *)sub_1C52B9D4C((uint64_t)v136, (unint64_t)&v124, 1);
    v62 = (char *)v136[0] + 48 * LODWORD(v136[1]);
    v64 = v61[1];
    v63 = v61[2];
    *v62 = *v61;
    v62[1] = v64;
    v62[2] = v63;
    v65 = __CFADD__(v136[1], 1);
    v66 = ++LODWORD(v136[1]);
    if (!v65)
    {
      do
      {
        v67 = (char *)v136[0] + 48 * v66;
        v69 = *((_QWORD *)v67 - 6);
        v68 = *((_QWORD *)v67 - 5);
        v70 = *((_QWORD *)v67 - 4);
        v108 = *((_DWORD *)v67 - 2);
        LODWORD(v136[1]) = v66 - 1;
        v71 = *(_DWORD *)(v107 + 20);
        if ((v71 & 0x40000000) != 0)
          v72 = *(_QWORD **)(v107 - 8);
        else
          v72 = (_QWORD *)(v107 - 32 * (v71 & 0x7FFFFFF));
        v113 = (_QWORD *)*v72;
        v73 = *(_QWORD *)(v115 + 920);
        v116 = v73 + 320;
        v117 = *(uint64_t **)(v69 + 8);
        if (v117 == (uint64_t *)(v73 + 320))
          v74 = 0;
        else
          v74 = *(_QWORD *)(v69 + 8);
        if (*(_BYTE *)(v115 + 1760))
        {
          v75 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v70 + 40 - v68) >> 3));
          v76 = v70 + 40 == v68 ? 0 : v75;
          sub_1C5509ECC(v68, v70 + 40, v76, 1);
          if (v68 < v70)
          {
            v77 = v70;
            while (*(_DWORD *)(v77 - 8) <= *(_DWORD *)(v70 + 32))
            {
              if (!*(_DWORD *)(v77 - 40) && *(_QWORD *)(v77 - 16) == v74)
              {
                v99 = *(_QWORD *)(v77 - 8);
                v100 = *(_OWORD *)(v77 - 40);
                v101 = *(_OWORD *)(v77 - 24);
                v102 = *(_DWORD *)(v70 + 32);
                v103 = *(_OWORD *)(v70 + 16);
                *(_OWORD *)(v77 - 40) = *(_OWORD *)v70;
                *(_OWORD *)(v77 - 24) = v103;
                *(_DWORD *)(v77 - 8) = v102;
                *(_OWORD *)v70 = v100;
                *(_OWORD *)(v70 + 16) = v101;
                *(_DWORD *)(v70 + 32) = v99;
                break;
              }
              v77 -= 40;
              if (v68 >= v77)
                break;
            }
          }
        }
        if (v70 >= v68)
        {
          v78 = v68;
          v79 = v108;
          do
          {
            v80 = *(unsigned int *)(v78 + 32);
            v81 = v80 + v79;
            v82 = v80 + v79;
            if (v81 <= 0x80000000)
              v79 = v82;
            else
              v79 = 0x80000000;
            v78 += 40;
          }
          while (v70 >= v78);
          v114 = v73 + 128;
          v83 = v68;
          v110 = v70;
          v111 = v57;
          v109 = v73;
          do
          {
            v84 = v69;
            if (v68 == v70)
            {
              v69 = v112;
              v87 = llvm::BasicBlock::getFirstNonPHIOrDbg(*(llvm::BasicBlock **)(v112 + 16), 1)[16] == 35;
            }
            else
            {
              v85 = *(llvm::BasicBlock **)(v69 + 16);
              v69 = *(_QWORD *)(v73 + 312);
              if (v69)
                *(_QWORD *)(v73 + 312) = *(_QWORD *)v69;
              else
                v69 = sub_1C484358C(v114, 232, 3);
              *(_QWORD *)v69 = 0;
              *(_QWORD *)(v69 + 8) = 0;
              *(_QWORD *)(v69 + 16) = v85;
              *(_DWORD *)(v69 + 24) = -1;
              *(_QWORD *)(v69 + 48) = (v69 + 48) | 4;
              *(_QWORD *)(v69 + 56) = v69 + 48;
              *(_BYTE *)(v69 + 144) = 0;
              *(_OWORD *)(v69 + 64) = 0u;
              *(_OWORD *)(v69 + 80) = 0u;
              *(_OWORD *)(v69 + 96) = 0u;
              *(_OWORD *)(v69 + 112) = 0u;
              *(_OWORD *)(v69 + 121) = 0u;
              *(_QWORD *)(v69 + 160) = 0;
              *(_QWORD *)(v69 + 168) = 0;
              *(_QWORD *)(v69 + 152) = 0;
              *(_BYTE *)(v69 + 176) = 0;
              *(_DWORD *)(v69 + 187) = 0;
              *(_QWORD *)(v69 + 180) = 0;
              *(_QWORD *)(v69 + 192) = 0;
              *(_DWORD *)(v69 + 199) = 0;
              *(_QWORD *)(v69 + 216) = 0;
              *(_QWORD *)(v69 + 224) = 0;
              *(_QWORD *)(v69 + 208) = 0;
              *(_QWORD *)(v69 + 32) = v73;
              *(_QWORD *)(v69 + 40) = v69;
              if (v85)
              {
                *(_QWORD *)(v69 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v85);
                *(_QWORD *)(v69 + 144) = v86;
              }
              llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v116, v69);
              v87 = 0;
              v88 = *v117;
              *(_QWORD *)v69 = *v117;
              *(_QWORD *)(v69 + 8) = v117;
              *(_QWORD *)(v88 + 8) = v69;
              *v117 = v69;
            }
            v89 = *(_DWORD *)(v68 + 32);
            if (v79 >= v89)
              v79 -= v89;
            else
              v79 = 0;
            v90 = *(_DWORD *)v68;
            if (*(_DWORD *)v68)
            {
              if (v90 == 1)
              {
                sub_1C626F6A4(v115, v108, (uint64_t)v57, v84, v112, v117, v79, v83, (llvm::MachineBasicBlock *)v69, v87);
              }
              else if (v90 == 2)
              {
                sub_1C626F890(v115, (uint64_t)v57, v84, v117, v108, v79, v83, v69, v87);
              }
            }
            else
            {
              v118 = v84;
              v91 = *(_QWORD *)(v68 + 8);
              v92 = *(_QWORD *)(v68 + 16);
              if (v91 == v92)
                v93 = 0;
              else
                v93 = v113;
              if (v91 == v92)
                v94 = 32;
              else
                v94 = 41;
              if (v91 == v92)
                v95 = v113;
              else
                v95 = *(void **)(v68 + 8);
              v96 = *(_QWORD *)(v68 + 24);
              v97 = a3[4];
              v123 = v97;
              if (v97)
              {
                v98 = v87;
                llvm::MetadataTracking::track((uint64_t)&v123, v97, 2);
                v87 = v98;
                v97 = v123;
                v89 = *(_DWORD *)(v68 + 32);
              }
              LODWORD(v124) = v94;
              BYTE4(v124) = v87;
              v125 = v95;
              v126 = v93;
              v127 = v92;
              v128 = v96;
              v129 = v69;
              v130 = v118;
              v131 = 0;
              v132 = 0;
              v133 = v97;
              if (v97)
              {
                llvm::MetadataTracking::track((uint64_t)&v133, v97, 2);
                v134 = v89;
                v135 = v79;
                v70 = v110;
                v57 = v111;
                v73 = v109;
                if (v123)
                  llvm::MetadataTracking::untrack((uint64_t)&v123, v123);
              }
              else
              {
                v134 = v89;
                v135 = v79;
                v70 = v110;
                v57 = v111;
                v73 = v109;
              }
              sub_1C54FD04C(v115, (int *)&v124, (uint64_t)v57, a3);
              if (v133)
                llvm::MetadataTracking::untrack((uint64_t)&v133, v133);
              if (v131)
                llvm::MetadataTracking::untrack((uint64_t)&v131, v131);
            }
            v68 += 40;
            v83 += 40;
          }
          while (v68 <= v70);
        }
        v66 = v136[1];
      }
      while (LODWORD(v136[1]));
    }
    if (v136[0] != &v137)
      free(v136[0]);
  }
  if (__p)
  {
    v121 = __p;
    operator delete(__p);
  }
}

void sub_1C54FE040(uint64_t a1, unint64_t a2)
{
  _BYTE *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;

  v2 = *(_BYTE **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667)
      abort();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 5 * a2;
    v6 = (char *)operator new(40 * a2);
    v7 = &v6[v4 - v2];
    v8 = v7;
    if (v4 != v2)
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *(_OWORD *)(v4 - 40);
        v11 = *(_OWORD *)(v4 - 24);
        v8 = v9 - 40;
        *((_DWORD *)v9 - 2) = *((_DWORD *)v4 - 2);
        *(_OWORD *)(v9 - 24) = v11;
        *(_OWORD *)(v9 - 40) = v10;
        v4 -= 40;
        v9 -= 40;
      }
      while (v4 != v2);
    }
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v6[8 * v5];
    if (v2)
      operator delete(v2);
  }
}

llvm::MachineFunction *sub_1C54FE118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  const llvm::APInt *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  llvm::ValueHandleBase *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm *v19;
  const llvm::DataLayout *v20;
  unint64_t LLTForType;
  const char *v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  const char *v26;
  unsigned int v27;
  uint8x8_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  int v33;
  const char *v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  llvm::MachineBasicBlock *v39;
  _QWORD *v40;
  uint64_t v41;
  int EdgeProbability;
  uint64_t v43;
  int v44;
  llvm::MachineFunction *result;
  const llvm::APInt *v46;
  llvm::ValueHandleBase *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  llvm::MachineBasicBlock *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 848);
  *(_QWORD *)(v6 + 40) = a3;
  *(_QWORD *)(v6 + 48) = a3 + 48;
  v7 = (int *)sub_1C54F95B0(a1, *(_QWORD *)(a2 + 32));
  if (v9)
  {
    v10 = *v7;
    if (*v7 < 0)
    {
      v11 = *(_QWORD *)(a1 + 872);
      if ((v10 & 0x7FFFFFFFu) < *(_DWORD *)(v11 + 432))
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v11 + 424) + 8 * (v10 & 0x7FFFFFFF));
        goto LABEL_7;
      }
    }
  }
  else
  {
    v10 = 0;
  }
  v12 = 0;
LABEL_7:
  v54 = v12;
  v57 = v12;
  LODWORD(v58) = 0;
  v13 = llvm::ConstantInt::get(****(llvm::ConstantInt *****)(v6 + 8), (llvm::LLVMContext *)a2, v8);
  (*(void (**)(uint64_t, uint64_t *, llvm::ValueHandleBase *))(*(_QWORD *)v6 + 16))(v6, &v57, v13);
  v15 = *(_DWORD *)(*(_QWORD *)(v14 + 32) + 4);
  v55 = v12;
  v56 = 0;
  LODWORD(v57) = v10;
  v59 = 0;
  LODWORD(v60) = v15;
  v62 = 0;
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, 46, &v55, 1, &v57, 2, 0);
  v18 = v17;
  v19 = (llvm *)llvm::PointerType::get((llvm::PointerType *)(*****(_QWORD *****)(a1 + 864) + 1912), 0);
  LLTForType = llvm::getLLTForType(v19, *(llvm::Type **)(a1 + 880), v20);
  v52 = v12;
  v53 = LLTForType;
  v23 = sub_1C4825F50((unint64_t *)&v52);
  if ((_DWORD)v22 == 1)
  v25 = sub_1C4825F50(&v53);
  if ((_DWORD)v24 == 1)
  if (v23 <= v25)
  {
    v27 = sub_1C4825F50((unint64_t *)&v52);
    if ((_DWORD)v26 == 1)
    v28 = (uint8x8_t)vcnt_s8((int8x8_t)v27);
    v28.i16[0] = vaddlv_u8(v28);
    if (v28.i32[0] == 1)
    {
      v29 = *(unsigned int *)(a2 + 72);
      if (!(_DWORD)v29)
        goto LABEL_26;
      v30 = 0;
      v31 = 32 * v29;
      while (1)
      {
        v33 = sub_1C4825F50(&v54);
        if ((_DWORD)v32 == 1)
        if ((v33 & 0xFFFFFFC0) == 0 && 0xFFFFFFFFFFFFFFFFLL >> -(char)v33 < *(_QWORD *)(*(_QWORD *)(a2 + 64) + v30))
          break;
        v30 += 32;
        if (v31 == v30)
          goto LABEL_26;
      }
    }
  }
  v35 = sub_1C4825F50(&v53);
  if ((_DWORD)v34 == 1)
  v52 = (8 * v35) | 1;
LABEL_26:
  v36 = *(_DWORD *)(*(_QWORD *)(v18 + 32) + 4);
  v37 = v54;
  if (v54 != v52)
  {
    v55 = v52;
    v56 = 0;
    LODWORD(v57) = v36;
    v59 = 0;
    sub_1C5546B4C((uint64_t *)v6, 126, &v55, (int *)&v57);
    v36 = *(_DWORD *)(*(_QWORD *)(v38 + 32) + 4);
    v37 = v52;
  }
  *(_BYTE *)(a2 + 44) = llvm::getMVTForLLT(v37);
  *(_DWORD *)(a2 + 40) = v36;
  v39 = *(llvm::MachineBasicBlock **)(*(_QWORD *)(a2 + 64) + 8);
  if (!*(_BYTE *)(a2 + 184))
  {
    v40 = *(_QWORD **)(a2 + 56);
    v41 = *(_QWORD *)(a1 + 944);
    if (v41)
    {
      EdgeProbability = *(_DWORD *)(a2 + 180);
      if (EdgeProbability == -1)
        EdgeProbability = llvm::BranchProbabilityInfo::getEdgeProbability(v41, *(_QWORD *)(a3 + 16), v40[2]);
      llvm::MachineBasicBlock::addSuccessor((_QWORD *)a3, v40, EdgeProbability);
    }
    else
    {
      llvm::MachineBasicBlock::addSuccessorWithoutProb((_QWORD *)a3, *(llvm::MachineBasicBlock **)(a2 + 56));
    }
  }
  v43 = *(_QWORD *)(a1 + 944);
  if (v43)
  {
    v44 = *(_DWORD *)(a2 + 176);
    if (v44 == -1)
      v44 = llvm::BranchProbabilityInfo::getEdgeProbability(v43, *(_QWORD *)(a3 + 16), *((_QWORD *)v39 + 2));
    llvm::MachineBasicBlock::addSuccessor((_QWORD *)a3, v39, v44);
  }
  else
  {
    llvm::MachineBasicBlock::addSuccessorWithoutProb((_QWORD *)a3, v39);
  }
  result = (llvm::MachineFunction *)sub_1C50D6C6C(*(unsigned int **)(a3 + 112), *(unsigned int **)(a3 + 120));
  if (!*(_BYTE *)(a2 + 184))
  {
    v57 = v54;
    LODWORD(v58) = 0;
    v47 = llvm::ConstantInt::get(****(llvm::ConstantInt *****)(v6 + 8), (llvm::LLVMContext *)(a2 + 16), v46);
    v48 = (*(uint64_t (**)(uint64_t, uint64_t *, llvm::ValueHandleBase *))(*(_QWORD *)v6 + 16))(v6, &v57, v47);
    v55 = 9;
    v56 = 0;
    LODWORD(v57) = 34;
    v59 = 2;
    v60 = v16;
    v61 = v18;
    v62 = 1;
    v63 = v48;
    v64 = v49;
    v65 = 1;
    v57 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, 134, &v55, 1, &v57, 3, 0);
    v58 = v50;
    v59 = 1;
    result = sub_1C5546168((_QWORD *)v6, (int *)&v57, *(_QWORD *)(a2 + 56));
  }
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)(a3 + 32) + 320)
    v51 = 0;
  else
    v51 = *(llvm::MachineBasicBlock **)(a3 + 8);
  if (v39 != v51)
    return sub_1C55450BC((_QWORD *)v6, (unsigned __int8 *)v39);
  return result;
}

void sub_1C54FE594(uint64_t a1, uint64_t *a2, const llvm::MachineBasicBlock **a3)
{
  uint64_t v4;
  const char *v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;
  unint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t ***v14;
  llvm *v15;
  const llvm::DataLayout *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  llvm::TargetLoweringBase *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t **v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  __int16 v49;
  int v50;
  unint64_t v51;
  __int128 v52;
  BOOL v53;
  int VRegUseAt;
  uint64_t **v55;
  uint64_t *v56;
  int *v57;
  uint64_t v58;
  const llvm::MachineBasicBlock **v59;
  uint64_t v60;
  __int16 LoadMemOperandFlags;
  unint64_t LLTForType;
  int v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int v66;
  __int128 v67;
  __int128 v68;
  int v69;
  int v70;
  int v71;

  v4 = a1;
  sub_1C4768AD0(*(_QWORD *)(a1 + 880), *a2);
  v8 = v7 + 7;
  if ((_DWORD)v6 == 1)
  if (v8 >= 8)
  {
    v9 = (int *)sub_1C54F95B0(v4, a2);
    v64 = v10;
    v11 = *sub_1C54F93BC(v4 + 256, a2);
    v12 = (int *)sub_1C54F95B0(v4, *(a2 - 4));
    if (v13)
      v63 = *v12;
    else
      v63 = 0;
    v14 = (uint64_t ***)a2;
    llvm::DataLayout::getIntPtrType(*(llvm::DataLayout **)(v4 + 880), *(llvm::Type **)*(a2 - 4));
    LLTForType = llvm::getLLTForType(v15, *(llvm::Type **)(v4 + 880), v16);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v4 + 248) + 24))(*(_QWORD *)(v4 + 248)))
    {
      v17 = *(a2 - 4);
      v18 = *(unsigned __int8 *)(v17 + 16);
      if (v17 && v18 == 21)
      {
        v19 = *(_QWORD *)(*(_QWORD *)(v17 + 24) + 112);
        v14 = (uint64_t ***)a2;
        if (v19)
        {
          v20 = *(_DWORD *)(v17 + 32) + 2;
          if (v20 < *(_DWORD *)(v19 + 8))
          {
            v21 = *(_QWORD *)(v19 + 8 * v20 + 40);
            if (v21)
            {
              if (*(char *)(v21 + 19) < 0)
              {
LABEL_48:
                VRegUseAt = llvm::SwiftErrorValueTracking::getOrCreateVRegUseAt((llvm::SwiftErrorValueTracking *)(v4 + 712), (unint64_t)v14, a3[5], (const llvm::Value *)v17);
                v70 = *v9;
                v71 = 1;
                LODWORD(v67) = VRegUseAt;
                LODWORD(v68) = 0;
                (*((void (**)(const llvm::MachineBasicBlock **, uint64_t, int *, uint64_t, __int128 *, uint64_t, _QWORD))*a3
                 + 4))(a3, 19, &v70, 1, &v67, 1, 0);
                return;
              }
            }
          }
        }
      }
      else
      {
        v14 = (uint64_t ***)a2;
        if (v18 == 59 && (*(_WORD *)(v17 + 18) & 0x80) != 0)
          goto LABEL_48;
      }
    }
    v22 = (llvm::TargetLoweringBase *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 864) + 16)
                                                                        + 120))(*(_QWORD *)(*(_QWORD *)(v4 + 864)
                                                                                            + 16));
    LoadMemOperandFlags = llvm::TargetLoweringBase::getLoadMemOperandFlags(v22, v14, *(const llvm::DataLayout **)(v4 + 880));
    if (v64)
    {
      if (v64 != 1 || (*((_BYTE *)a2 + 23) & 0x20) == 0)
        goto LABEL_35;
      v23 = **(_QWORD **)*a2;
      *(_QWORD *)&v67 = a2;
      v24 = *(_DWORD *)(v23 + 2496);
      if (v24)
      {
        v25 = *(_QWORD *)(v23 + 2480);
        v26 = v24 - 1;
        v27 = v26 & ((a2 >> 4) ^ (a2 >> 9));
        v28 = (uint64_t **)(v25 + 40 * v27);
        v29 = *v28;
        if (*v28 == a2)
          goto LABEL_30;
        v30 = 0;
        v31 = 1;
        while (v29 != (uint64_t *)-4096)
        {
          if (v30)
            v32 = 0;
          else
            v32 = v29 == (uint64_t *)-8192;
          if (v32)
            v30 = v28;
          v33 = v27 + v31++;
          v27 = v33 & v26;
          v28 = (uint64_t **)(v25 + 40 * v27);
          v29 = *v28;
          if (*v28 == a2)
            goto LABEL_30;
        }
        if (v30)
          v55 = v30;
        else
          v55 = v28;
      }
      else
      {
        v55 = 0;
      }
      v28 = (uint64_t **)sub_1C541AB24(v23 + 2480, (uint64_t)&v67, (uint64_t *)&v67, v55);
      v56 = (uint64_t *)v67;
      v28[3] = 0;
      v28[4] = 0;
      *v28 = v56;
      v28[1] = (uint64_t *)(v28 + 3);
      v28[2] = (uint64_t *)0x100000000;
LABEL_30:
      v34 = *((unsigned int *)v28 + 4);
      if ((_DWORD)v34)
      {
        v35 = v28[1] + 1;
        v36 = 16 * v34;
        while (*((_DWORD *)v35 - 2) != 4)
        {
          v60 = 0;
          v35 += 2;
          v36 -= 16;
          if (!v36)
            goto LABEL_36;
        }
        v60 = *v35;
        goto LABEL_36;
      }
LABEL_35:
      v60 = 0;
LABEL_36:
      v37 = 0;
      v38 = 1;
      v58 = v4;
      v59 = a3;
      v57 = v9;
      do
      {
        v69 = 0;
        sub_1C5544564((uint64_t)a3, &v69, v63, LLTForType, *(_QWORD *)(v11 + 8 * v37) >> 3, (uint64_t)&v67);
        v39 = *(a2 - 4);
        if (v39)
        {
          v40 = *(_DWORD *)(*(_QWORD *)v39 + 8);
          if ((v40 & 0xFE) == 0x12)
            v40 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v39 + 16) + 8);
          v66 = v40 >> 8;
        }
        else
        {
          v66 = 0;
        }
        v41 = *(_QWORD *)(v11 + 8 * v37);
        v42 = sub_1C54FB58C(v4, (uint64_t)a2);
        v65 = *(_QWORD *)(v4 + 864);
        v43 = v9[v37];
        if (v43 < 0
          && (v44 = *(_QWORD *)(v4 + 872), v45 = v43 & 0x7FFFFFFF, v45 < *(_DWORD *)(v44 + 432)))
        {
          v46 = *(_QWORD *)(*(_QWORD *)(v44 + 424) + 8 * v45);
        }
        else
        {
          v46 = 0;
        }
        v47 = (1 << v42) | (*(_QWORD *)(v11 + 8 * v37) >> 3);
        v48 = __clz(v47 & -v47);
        llvm::Instruction::getAAMetadata((uint64_t ***)a2, &v67);
        v49 = *((unsigned __int8 *)a2 + 60);
        v50 = *((unsigned __int16 *)a2 + 9) >> 7;
        v51 = sub_1C484358C(v65 + 128, 80, 3);
        *(_QWORD *)v51 = v39 & 0xFFFFFFFFFFFFFFFBLL;
        *(_QWORD *)(v51 + 8) = v41 >> 3;
        *(_DWORD *)(v51 + 16) = v66;
        *(_BYTE *)(v51 + 20) = 0;
        *(_QWORD *)(v51 + 24) = v46;
        v52 = v68;
        *(_OWORD *)(v51 + 40) = v67;
        *(_WORD *)(v51 + 32) = LoadMemOperandFlags;
        *(_BYTE *)(v51 + 34) = 63 - v48;
        *(_OWORD *)(v51 + 56) = v52;
        a3 = v59;
        *(_QWORD *)(v51 + 72) = v60;
        *(_WORD *)(v51 + 36) = v49 & 0xF8FF | ((v50 & 7) << 8);
        v9 = v57;
        v70 = v57[v37];
        v71 = 1;
        LODWORD(v67) = v69;
        LODWORD(v68) = 0;
        sub_1C55464EC(v59, 0x5Au, &v70, (int *)&v67, (llvm::MachineMemOperand *)v51);
        v37 = v38;
        v53 = v64 > v38++;
        v4 = v58;
      }
      while (v53);
    }
  }
}

void sub_1C54FEA20(uint64_t a1, unint64_t a2, const llvm::MachineBasicBlock **a3)
{
  uint64_t v4;
  const char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  unint64_t v13;
  llvm *v14;
  const llvm::DataLayout *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  llvm::TargetLoweringBase *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  char v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  __int16 v36;
  int v37;
  unint64_t v38;
  __int128 v39;
  BOOL v40;
  uint64_t v41;
  const llvm::MachineBasicBlock **v42;
  __int16 StoreMemOperandFlags;
  unint64_t LLTForType;
  int v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  _DWORD *v49;
  int v50[6];
  __int128 v51;
  __int128 v52;
  int v53;

  v4 = a1;
  sub_1C4768AD0(*(_QWORD *)(a1 + 880), **(_QWORD **)(a2 - 64));
  v8 = v7 + 7;
  if ((_DWORD)v6 == 1)
  if (v8 >= 8)
  {
    v49 = (_DWORD *)sub_1C54F95B0(v4, *(_QWORD *)(a2 - 64));
    v46 = v9;
    v10 = *sub_1C54F93BC(v4 + 256, *(uint64_t **)(a2 - 64));
    v11 = (int *)sub_1C54F95B0(v4, *(_QWORD *)(a2 - 32));
    if (v12)
      v45 = *v11;
    else
      v45 = 0;
    v13 = a2;
    llvm::DataLayout::getIntPtrType(*(llvm::DataLayout **)(v4 + 880), **(llvm::Type ***)(a2 - 32));
    LLTForType = llvm::getLLTForType(v14, *(llvm::Type **)(v4 + 880), v15);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v4 + 248) + 24))(*(_QWORD *)(v4 + 248)))
    {
      v16 = *(_QWORD *)(a2 - 32);
      v17 = *(unsigned __int8 *)(v16 + 16);
      if (v16 && v17 == 21)
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v16 + 24) + 112);
        v13 = a2;
        if (v18)
        {
          v19 = *(_DWORD *)(v16 + 32) + 2;
          if (v19 < *(_DWORD *)(v18 + 8))
          {
            v20 = *(_QWORD *)(v18 + 8 * v19 + 40);
            if (v20)
            {
              if (*(char *)(v20 + 19) < 0)
              {
LABEL_30:
                v50[0] = llvm::SwiftErrorValueTracking::getOrCreateVRegDefAt((llvm::SwiftErrorValueTracking *)(v4 + 712), v13, a3[5], (const llvm::Value *)v16);
                v50[2] = 1;
                LODWORD(v51) = *v49;
                LODWORD(v52) = 0;
                (*((void (**)(const llvm::MachineBasicBlock **, uint64_t, int *, uint64_t, __int128 *, uint64_t, _QWORD))*a3
                 + 4))(a3, 19, v50, 1, &v51, 1, 0);
                return;
              }
            }
          }
        }
      }
      else
      {
        v13 = a2;
        if (v17 == 59 && (*(_WORD *)(v16 + 18) & 0x80) != 0)
          goto LABEL_30;
      }
    }
    v21 = (llvm::TargetLoweringBase *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 864) + 16)
                                                                        + 120))(*(_QWORD *)(*(_QWORD *)(v4 + 864)
                                                                                            + 16));
    StoreMemOperandFlags = llvm::TargetLoweringBase::getStoreMemOperandFlags(v21, (const llvm::StoreInst *)v13, *(const llvm::DataLayout **)(v4 + 880));
    if (v46)
    {
      v22 = 0;
      v23 = 1;
      v41 = v4;
      v42 = a3;
      do
      {
        v53 = 0;
        sub_1C5544564((uint64_t)a3, &v53, v45, LLTForType, *(_QWORD *)(v10 + 8 * v22) >> 3, (uint64_t)&v51);
        v24 = *(_QWORD *)(v13 - 32);
        v25 = v10;
        if (v24)
        {
          v26 = *(_DWORD *)(*(_QWORD *)v24 + 8);
          if ((v26 & 0xFE) == 0x12)
            v26 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v24 + 16) + 8);
          v48 = v26 >> 8;
        }
        else
        {
          v48 = 0;
        }
        v27 = *(_QWORD *)(v10 + 8 * v22);
        v28 = sub_1C54FB58C(v4, v13);
        v47 = *(_QWORD *)(v4 + 864);
        v29 = v49[v22];
        if (v29 < 0
          && (v30 = *(_QWORD *)(v4 + 872), v31 = v29 & 0x7FFFFFFF, v31 < *(_DWORD *)(v30 + 432)))
        {
          v32 = *(_QWORD *)(*(_QWORD *)(v30 + 424) + 8 * v31);
        }
        else
        {
          v32 = 0;
        }
        v33 = v27 >> 3;
        v34 = (1 << v28) | (*(_QWORD *)(v25 + 8 * v22) >> 3);
        v10 = v25;
        v35 = __clz(v34 & -v34);
        llvm::Instruction::getAAMetadata((uint64_t ***)v13, &v51);
        v36 = *(unsigned __int8 *)(v13 + 60);
        v37 = *(unsigned __int16 *)(v13 + 18) >> 7;
        v38 = sub_1C484358C(v47 + 128, 80, 3);
        *(_QWORD *)v38 = v24 & 0xFFFFFFFFFFFFFFFBLL;
        *(_QWORD *)(v38 + 8) = v33;
        *(_DWORD *)(v38 + 16) = v48;
        *(_BYTE *)(v38 + 20) = 0;
        *(_QWORD *)(v38 + 24) = v32;
        v39 = v52;
        *(_OWORD *)(v38 + 40) = v51;
        *(_WORD *)(v38 + 32) = StoreMemOperandFlags;
        *(_BYTE *)(v38 + 34) = 63 - v35;
        *(_OWORD *)(v38 + 56) = v39;
        *(_QWORD *)(v38 + 72) = 0;
        *(_WORD *)(v38 + 36) = v36 & 0xF8FF | ((v37 & 7) << 8);
        LODWORD(v51) = v49[v22];
        LODWORD(v52) = 0;
        v50[0] = v53;
        v50[4] = 0;
        a3 = v42;
        sub_1C5546848(v42, (int *)&v51, v50, (llvm::MachineMemOperand *)v38);
        v22 = v23;
        v40 = v46 > v23++;
        v4 = v41;
      }
      while (v40);
    }
  }
}

uint64_t sub_1C54FED98(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t *v14;
  char *v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;

  v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0)
    v5 = *(uint64_t ***)(a2 - 8);
  else
    v5 = (uint64_t **)(a2 - 32 * (v4 & 0x7FFFFFF));
  v6 = *v5;
  v7 = sub_1C54FEEB8(a2, *(llvm::DataLayout **)(a1 + 880));
  v8 = sub_1C54F95B0(a1, v6);
  v9 = sub_1C54F93BC(a1 + 256, v6);
  v10 = (char *)*v9;
  v11 = *((unsigned int *)v9 + 2);
  if ((_DWORD)v11)
  {
    v12 = (char *)*v9;
    do
    {
      v13 = v11 >> 1;
      v14 = (unint64_t *)&v12[8 * (v11 >> 1)];
      v16 = *v14;
      v15 = (char *)(v14 + 1);
      v11 += ~(v11 >> 1);
      if (v16 < v7)
        v12 = v15;
      else
        v11 = v13;
    }
    while (v11);
  }
  else
  {
    v12 = (char *)*v9;
  }
  result = (uint64_t)sub_1C54F8FBC(a1, (uint64_t *)a2);
  if (*(_DWORD *)(result + 8))
  {
    v18 = result;
    v19 = 0;
    v20 = (unint64_t)(v12 - v10) >> 3;
    v21 = *(_QWORD *)result;
    do
    {
      v22 = *(_DWORD *)(v21 + 4 * v19);
      v23 = (v20 + v19);
      if (v22)
      {
        result = llvm::MachineRegisterInfo::replaceRegWith(*(_QWORD **)(a1 + 872), v22, *(_DWORD *)(v8 + 4 * v23));
        v21 = *(_QWORD *)v18;
      }
      *(_DWORD *)(v21 + 4 * v19++) = *(_DWORD *)(v8 + 4 * v23);
    }
    while (v19 < *(unsigned int *)(v18 + 8));
  }
  return result;
}

uint64_t sub_1C54FEEB8(uint64_t a1, llvm::DataLayout *a2)
{
  int v4;
  uint64_t **v5;
  uint64_t *v6;
  llvm::ConstantInt *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  llvm::Value **v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  llvm::Value **v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t IndexedOffsetInType;
  void *v28;
  uint64_t v29;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a1 + 20);
  if ((v4 & 0x40000000) != 0)
    v5 = *(uint64_t ***)(a1 - 8);
  else
    v5 = (uint64_t **)(a1 - 32 * (v4 & 0x7FFFFFF));
  v6 = *v5;
  v7 = (llvm::ConstantInt *)(***(_QWORD ***)a1 + 1960);
  v28 = v30;
  v29 = 0x100000001;
  v30[0] = llvm::ConstantInt::get(v7, 0, 0);
  v8 = 1;
  v9 = *(unsigned __int8 *)(a1 + 16);
  if (v9 == 92)
  {
    v15 = *(unsigned int *)(a1 + 72);
    if ((_DWORD)v15)
    {
      v16 = *(unsigned int **)(a1 + 64);
      v17 = 4 * v15;
      do
      {
        v18 = llvm::ConstantInt::get(v7, *v16, 0);
        v19 = v29;
        if (v29 >= (unint64_t)HIDWORD(v29))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, (uint64_t)v30, v29 + 1, 8);
          v19 = v29;
        }
        *((_QWORD *)v28 + v19) = v18;
        v8 = v29 + 1;
        LODWORD(v29) = v29 + 1;
        ++v16;
        v17 -= 4;
      }
      while (v17);
    }
  }
  else if (v9 == 93)
  {
    v10 = *(unsigned int *)(a1 + 72);
    if ((_DWORD)v10)
    {
      v11 = *(unsigned int **)(a1 + 64);
      v12 = 4 * v10;
      do
      {
        v13 = llvm::ConstantInt::get(v7, *v11, 0);
        v14 = v29;
        if (v29 >= (unint64_t)HIDWORD(v29))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, (uint64_t)v30, v29 + 1, 8);
          v14 = v29;
        }
        *((_QWORD *)v28 + v14) = v13;
        v8 = v29 + 1;
        LODWORD(v29) = v29 + 1;
        ++v11;
        v12 -= 4;
      }
      while (v12);
    }
  }
  else
  {
    v20 = *(_DWORD *)(a1 + 20);
    v21 = v20 & 0x7FFFFFF;
    if (v21 >= 2)
    {
      v22 = 1;
      v23 = 32;
      do
      {
        if ((v20 & 0x40000000) != 0)
          v24 = *(_QWORD *)(a1 - 8);
        else
          v24 = a1 - 32 * v21;
        v25 = *(_QWORD *)(v24 + v23);
        if (v8 >= HIDWORD(v29))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, (uint64_t)v30, v8 + 1, 8);
          v8 = v29;
        }
        *((_QWORD *)v28 + v8) = v25;
        v8 = v29 + 1;
        LODWORD(v29) = v29 + 1;
        ++v22;
        v20 = *(_DWORD *)(a1 + 20);
        v21 = v20 & 0x7FFFFFF;
        v23 += 32;
      }
      while (v22 < v21);
    }
  }
  IndexedOffsetInType = llvm::DataLayout::getIndexedOffsetInType(a2, *v6, (llvm::UndefValue **)v28, v8);
  if (v28 != v30)
    free(v28);
  return 8 * IndexedOffsetInType;
}

uint64_t sub_1C54FF160(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;

  v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0)
    v5 = *(uint64_t **)(a2 - 8);
  else
    v5 = (uint64_t *)(a2 - 32 * (v4 & 0x7FFFFFF));
  v6 = *v5;
  v7 = sub_1C54FEEB8(a2, *(llvm::DataLayout **)(a1 + 880));
  v8 = sub_1C54F8FBC(a1, (uint64_t *)a2);
  v9 = *sub_1C54F93BC(a1 + 256, (uint64_t *)a2);
  v10 = sub_1C54F95B0(a1, v6);
  v11 = *(_DWORD *)(a2 + 20);
  if ((v11 & 0x40000000) != 0)
    v12 = *(_QWORD *)(a2 - 8);
  else
    v12 = a2 - 32 * (v11 & 0x7FFFFFF);
  result = sub_1C54F95B0(a1, *(_QWORD *)(v12 + 32));
  if (*((_DWORD *)v8 + 2))
  {
    v15 = 0;
    v16 = result + 4 * v14;
    v17 = *v8;
    do
    {
      if (*(_QWORD *)(v9 + 8 * v15) >= v7 && result != v16)
        v18 = (_DWORD *)result;
      else
        v18 = (_DWORD *)v10;
      result += 4 * ((*(_QWORD *)(v9 + 8 * v15) >= v7) & (result != v16));
      *(_DWORD *)(v17 + 4 * v15++) = *v18;
      v10 += 4;
    }
    while (v15 < *((unsigned int *)v8 + 2));
  }
  return result;
}

uint64_t sub_1C54FF260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _QWORD *v7;
  int *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  _DWORD v28[18];
  _DWORD v29[4];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a2 + 20);
  if ((v6 & 0x40000000) != 0)
    v7 = *(_QWORD **)(a2 - 8);
  else
    v7 = (_QWORD *)(a2 - 32 * (v6 & 0x7FFFFFF));
  v8 = (int *)sub_1C54F95B0(a1, *v7);
  if (v9)
    v10 = *v8;
  else
    v10 = 0;
  v11 = sub_1C54F95B0(a1, a2);
  v13 = v12;
  v14 = *(_DWORD *)(a2 + 20);
  if ((v14 & 0x40000000) != 0)
    v15 = *(_QWORD *)(a2 - 8);
  else
    v15 = a2 - 32 * (v14 & 0x7FFFFFF);
  v16 = sub_1C54F95B0(a1, *(_QWORD *)(v15 + 32));
  v17 = *(_DWORD *)(a2 + 20);
  if ((v17 & 0x40000000) != 0)
    v18 = *(_QWORD *)(a2 - 8);
  else
    v18 = a2 - 32 * (v17 & 0x7FFFFFF);
  result = sub_1C54F95B0(a1, *(_QWORD *)(v18 + 64));
  v20 = result;
  if (*(_BYTE *)(a2 + 16) == 85)
  {
    result = llvm::MachineInstr::copyFlagsFromInstruction(a2);
    v21 = result | 0x100000000;
  }
  else
  {
    v21 = 0x100000000;
  }
  if (v13)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      v24 = *(_DWORD *)(v11 + 4 * v22);
      v25 = *(_DWORD *)(v16 + 4 * v22);
      v26 = *(_DWORD *)(v20 + 4 * v22);
      v29[0] = v24;
      v29[2] = 1;
      v28[0] = v10;
      v28[4] = 0;
      v28[6] = v25;
      v28[10] = 0;
      v28[12] = v26;
      v28[16] = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 136, v29, 1, v28, 3, v21);
      v22 = v23;
    }
    while (v13 > v23++);
  }
  return result;
}

_DWORD *sub_1C54FF408(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _DWORD *result;
  _DWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _DWORD v17[6];
  _DWORD v18[4];

  v7 = (int *)sub_1C54F95B0(a1, a3);
  if (v8)
    v9 = *v7;
  else
    v9 = 0;
  v10 = a1 + 256;
  v11 = sub_1C54F9160(v10, (uint64_t)a2);
  if (*((_DWORD *)v11 + 2))
  {
    v18[0] = *(_DWORD *)*v11;
    v18[2] = 1;
    v17[0] = v9;
    v17[4] = 0;
    return (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 19, v18, 1, v17, 1, 0);
  }
  else
  {
    if (*((_DWORD *)v11 + 3))
    {
      v12 = 0;
    }
    else
    {
      v16 = v11;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v11, (uint64_t)(v11 + 2), 1uLL, 4);
      v11 = v16;
      v12 = *((unsigned int *)v16 + 2);
    }
    *(_DWORD *)(*v11 + 4 * v12) = v9;
    ++*((_DWORD *)v11 + 2);
    result = sub_1C54F93BC(v10, a2);
    v14 = result;
    v15 = result[2];
    if (v15 >= result[3])
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v15 + 1, 8);
      LODWORD(v15) = v14[2];
    }
    *(_QWORD *)(*(_QWORD *)v14 + 8 * v15) = 0;
    ++v14[2];
  }
  return result;
}

uint64_t sub_1C54FF540(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  int v6;
  llvm ***v7;
  llvm **v8;
  int *v9;
  const llvm::DataLayout *v10;
  uint64_t v11;
  int v12;
  llvm::Type *v13;
  unint64_t LLTForType;
  llvm *v15;
  const llvm::DataLayout *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  llvm *v21;
  llvm::Type *v22;
  const llvm::DataLayout *v23;
  llvm *v24;
  const llvm::DataLayout *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  llvm::UndefValue **v32;
  uint64_t v33;
  llvm::UndefValue **v34;
  llvm::UndefValue *v35;
  llvm::StructType *v36;
  BOOL v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  llvm::UndefValue *AggregateElement;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  BOOL v51;
  const char *v52;
  char v53;
  char v54;
  unint64_t v55;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  int *v63;
  unint64_t v64;
  const llvm::DataLayout *v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  int v80;
  int *v81;
  uint64_t v82;
  int v83;
  int v85;
  uint64_t *v86;
  llvm *v87;
  int v88;
  unint64_t v89;
  llvm::UndefValue **v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  unint64_t v98;
  int v99;
  uint64_t v100;

  v4 = a2;
  v100 = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)a2 + 5);
  if ((v6 & 0x40000000) != 0)
    v7 = (llvm ***)*(a2 - 1);
  else
    v7 = (llvm ***)&a2[-4 * (v6 & 0x7FFFFFF)];
  v8 = *v7;
  v9 = (int *)sub_1C54F95B0(a1, *v7);
  if (v11)
    v12 = *v9;
  else
    v12 = 0;
  v13 = *v8;
  LLTForType = llvm::getLLTForType(*v8, *(llvm::Type **)(a1 + 880), v10);
  llvm::DataLayout::getIntPtrType(*(llvm::DataLayout **)(a1 + 880), v13);
  v87 = v15;
  v92 = llvm::getLLTForType(v15, *(llvm::Type **)(a1 + 880), v16);
  v17 = *v4;
  v88 = 1;
  if (*v4 && (*(_DWORD *)(v17 + 8) & 0xFE) == 0x12)
  {
    v18 = *(unsigned int *)(v17 + 32);
    if (v18 < 2)
    {
      v88 = 1;
    }
    else if ((LLTForType & 0xFFFFFFFFFFFFFFF9) == 0 || (LLTForType & 4) == 0)
    {
      v98 = sub_1C4953AD0(v18, LLTForType);
      v99 = 0;
      LODWORD(v93) = v12;
      v94 = 0;
      sub_1C5545898(a3, (uint64_t)&v98, &v93);
      v12 = *(_DWORD *)(*(_QWORD *)(v20 + 32) + 4);
      llvm::FixedVectorType::get(v13, (llvm::Type *)v18);
      v22 = v21;
      LLTForType = llvm::getLLTForType(v21, *(llvm::Type **)(a1 + 880), v23);
      llvm::DataLayout::getIntPtrType(*(llvm::DataLayout **)(a1 + 880), v22);
      v87 = v24;
      v88 = 0;
      v92 = llvm::getLLTForType(v24, *(llvm::Type **)(a1 + 880), v25);
    }
    else
    {
      v88 = 0;
    }
  }
  v26 = 3;
  if (*((_BYTE *)v4 + 16) == 62)
    v26 = 8;
  v27 = v4[v26];
  v28 = *((_DWORD *)v4 + 5);
  if ((v28 & 0x40000000) != 0)
  {
    v30 = (uint64_t *)*(v4 - 1);
    v29 = v28 & 0x7FFFFFF;
  }
  else
  {
    v29 = v28 & 0x7FFFFFF;
    v30 = &v4[-4 * v29];
  }
  v31 = v27 | 4;
  v32 = (llvm::UndefValue **)(v30 + 4);
  v90 = (llvm::UndefValue **)(v30 + 4);
  v91 = v31;
  if (v29 != 1)
  {
    v89 = LLTForType;
    v86 = v4;
    v33 = 0;
    v34 = (llvm::UndefValue **)&v30[4 * v29];
    do
    {
      v35 = *v32;
      v36 = (llvm::StructType *)(v91 & 0xFFFFFFFFFFFFFFF8);
      if ((v91 & 4) != 0 || !v36)
      {
        v42 = *(_QWORD *)(a1 + 880);
        if ((v91 & 4) == 0 || !v36)
        {
          if (v35)
            v43 = *((_BYTE *)v35 + 16) == 16;
          else
            v43 = 0;
          AggregateElement = *v32;
          if (!v43)
            AggregateElement = llvm::Constant::getAggregateElement(v35, 0);
          v47 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
          v45 = (unsigned int *)((char *)AggregateElement + 24);
          v46 = v47;
          if (v45[2] < 0x41)
            v46 = v45;
          v36 = *(llvm::StructType **)(*((_QWORD *)v36 + 2) + 8 * *v46);
        }
        sub_1C4768AD0(v42, (uint64_t)v36);
        v49 = v48;
        v51 = v50 == 1;
        llvm::DataLayout::getAlignment(v42, (uint64_t)v36);
        v54 = v53;
        if (v51)
        v55 = ((1 << v54) + ((unint64_t)(v49 + 7) >> 3) - 1) & -(1 << v54);
        if (*((_BYTE *)v35 + 16) != 16 || v35 == 0)
        {
          if (v33)
          {
            *(_QWORD *)&v93 = v92;
            DWORD2(v93) = 0;
            sub_1C5544694((uint64_t)a3, (unint64_t *)&v93, v33);
            v58 = *(_DWORD *)(*(_QWORD *)(v57 + 32) + 4);
            v59 = v89;
            v98 = v89;
            v99 = 0;
            LODWORD(v93) = v12;
            v94 = 0;
            LODWORD(v95) = v58;
            v97 = 0;
            (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*a3 + 32))(a3, 193, &v98, 1, &v93, 2, 0);
            v12 = *(_DWORD *)(*(_QWORD *)(v60 + 32) + 4);
          }
          else
          {
            v59 = v89;
          }
          v63 = (int *)sub_1C54F95B0(a1, v35);
          if (v64)
          {
            v66 = *v63;
            if (*v63 < 0 && (v67 = *(_QWORD *)(a1 + 872), (v66 & 0x7FFFFFFFu) < *(_DWORD *)(v67 + 432)))
              v64 = *(_QWORD *)(*(_QWORD *)(v67 + 424) + 8 * (v66 & 0x7FFFFFFF));
            else
              v64 = 0;
          }
          else
          {
            v66 = 0;
          }
          v68 = v92;
          if (v64 != v92)
          {
            v69 = (v64 >> 2) & 1;
            if ((v64 & 0xFFFFFFFFFFFFFFF9) == 0)
              LODWORD(v69) = 0;
            if (((v88 | v69) & 1) == 0)
            {
              v98 = sub_1C626E984(&v92, v64);
              v99 = 0;
              LODWORD(v93) = v66;
              v94 = 0;
              sub_1C5545898(a3, (uint64_t)&v98, &v93);
              v66 = *(_DWORD *)(*(_QWORD *)(v75 + 32) + 4);
              v68 = v92;
            }
            v98 = v68;
            v99 = 0;
            LODWORD(v93) = v66;
            v94 = 0;
            sub_1C5546B4C(a3, 124, &v98, (int *)&v93);
            v66 = *(_DWORD *)(*(_QWORD *)(v70 + 32) + 4);
          }
          if (v55 != 1)
          {
            *(_QWORD *)&v93 = llvm::getLLTForType(v87, *(llvm::Type **)(a1 + 880), v65);
            DWORD2(v93) = 0;
            v71 = sub_1C5544694((uint64_t)a3, (unint64_t *)&v93, v55);
            v98 = v92;
            v99 = 0;
            LODWORD(v93) = v66;
            v94 = 0;
            v95 = v71;
            v96 = v72;
            v97 = 1;
            (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*a3 + 32))(a3, 47, &v98, 1, &v93, 2, 0);
            v66 = *(_DWORD *)(*(_QWORD *)(v73 + 32) + 4);
          }
          v98 = v59;
          v99 = 0;
          LODWORD(v93) = v12;
          v94 = 0;
          LODWORD(v95) = v66;
          v97 = 0;
          (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*a3 + 32))(a3, 193, &v98, 1, &v93, 2, 0);
          v33 = 0;
          v12 = *(_DWORD *)(*(_QWORD *)(v74 + 32) + 4);
        }
        else
        {
          v61 = *((_DWORD *)v35 + 8);
          if (v61 > 0x40)
            v62 = **((_QWORD **)v35 + 3);
          else
            v62 = (uint64_t)(*((_QWORD *)v35 + 3) << -(char)v61) >> -(char)v61;
          v33 += v62 * v55;
        }
      }
      else
      {
        if (v35)
          v37 = *((_BYTE *)v35 + 16) == 16;
        else
          v37 = 0;
        if (!v37)
          v35 = llvm::Constant::getAggregateElement(v35, 0);
        v40 = (unsigned int *)*((_QWORD *)v35 + 3);
        v39 = (unsigned int *)((char *)v35 + 24);
        v38 = v40;
        if (v39[2] < 0x41)
          v38 = v39;
        v41 = *v38;
        v33 += *((_QWORD *)llvm::DataLayout::getStructLayout(*(llvm::DataLayout **)(a1 + 880), v36) + v41 + 2);
      }
      sub_1C4774E38((uint64_t)&v90);
      v32 = v90;
    }
    while (v90 != v34);
    if (v33)
    {
      *(_QWORD *)&v93 = v92;
      DWORD2(v93) = 0;
      sub_1C5544694((uint64_t)a3, (unint64_t *)&v93, v33);
      v77 = v76;
      v78 = (int *)sub_1C54F95B0(a1, v86);
      if (v79)
        v80 = *v78;
      else
        v80 = 0;
      v85 = *(_DWORD *)(*(_QWORD *)(v77 + 32) + 4);
      LODWORD(v98) = v80;
      v99 = 1;
      LODWORD(v93) = v12;
      v94 = 0;
      LODWORD(v95) = v85;
      v97 = 0;
      return (*(uint64_t (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*a3 + 32))(a3, 193, &v98, 1, &v93, 2, 0);
    }
    v4 = v86;
  }
  v81 = (int *)sub_1C54F95B0(a1, v4);
  if (v82)
    v83 = *v81;
  else
    v83 = 0;
  LODWORD(v98) = v83;
  v99 = 1;
  LODWORD(v93) = v12;
  v94 = 0;
  return (*(uint64_t (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*a3 + 32))(a3, 19, &v98, 1, &v93, 1, 0);
}

void sub_1C54FFBA0(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  const char *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  llvm::MachineFunction *v32;
  unint64_t *v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  llvm::AttributeList *v52;
  unsigned int ParamAlignment;
  char v54;
  unsigned int v55;
  unsigned int v56;
  BOOL v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;
  char v71;
  unsigned int v72;
  _BOOL4 v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  _QWORD v95[3];

  v95[2] = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a2 + 20);
  v5 = v4 & 0x7FFFFFF;
  v6 = (_QWORD *)(a2 - 32 * v5);
  if (*(unsigned __int8 *)(v6[4] + 16) - 11 < 2)
    return;
  v11 = v95;
  v93 = v95;
  v94 = 0x300000000;
  v12 = *(unsigned __int8 *)(a2 + 16);
  if (v12 != 84)
  {
    if (v12 == 39)
      v13 = (*(_DWORD *)(a2 + 80) + 1);
    else
      v13 = 2;
    v11 = v95;
    if ((v4 & 0x80000000) == 0)
      goto LABEL_4;
LABEL_102:
    v85 = *(v6 - 1);
    if ((v85 & 0xFFFFFFFF0) != 0)
      v14 = (*((_DWORD *)v6 - 3) - *(_DWORD *)((char *)v6 - v85));
    else
      v14 = 0;
    v11 = v95;
    goto LABEL_5;
  }
  v13 = 0;
  if (v4 < 0)
    goto LABEL_102;
LABEL_4:
  v14 = 0;
LABEL_5:
  if (v6 + 4 == (_QWORD *)(a2 - 32 * v13 - 32 * v14 - 32))
  {
    v25 = 0;
    v16 = -1;
    goto LABEL_26;
  }
  v15 = 32 * v5 - 32 * v13 - 32 * v14 - 64;
  v16 = -1;
  do
  {
    v17 = (int *)sub_1C54F95B0(a1, *v6);
    if (!v18)
    {
      v19 = 0;
LABEL_20:
      v89 = 0;
      goto LABEL_21;
    }
    v19 = *v17;
    if ((*v17 & 0x80000000) == 0)
      goto LABEL_20;
    v20 = *(_QWORD *)(a1 + 872);
    if ((v19 & 0x7FFFFFFFu) >= *(_DWORD *)(v20 + 432))
      goto LABEL_20;
    v89 = *(_QWORD *)(*(_QWORD *)(v20 + 424) + 8 * (v19 & 0x7FFFFFFF));
    if ((v89 & 0xFFFFFFFFFFFFFFF9) != 0 && (v89 & 6) == 2)
    {
      v23 = sub_1C4825F50(&v89);
      if ((_DWORD)v22 == 1)
      if (v16 >= v23)
        v16 = v23;
    }
LABEL_21:
    v24 = v94;
    if (v94 >= (unint64_t)HIDWORD(v94))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, (uint64_t)v95, v94 + 1, 4);
      v24 = v94;
    }
    *((_DWORD *)v93 + v24) = v19;
    v25 = v94 + 1;
    LODWORD(v94) = v94 + 1;
    v6 += 4;
    v15 -= 32;
  }
  while (v15);
  v11 = v93;
LABEL_26:
  v26 = v25 - 1;
  v27 = *((_DWORD *)v11 + v26);
  if ((v27 & 0x80000000) == 0
    || (v28 = *(_QWORD *)(a1 + 872), v29 = v27 & 0x7FFFFFFF, v29 >= *(_DWORD *)(v28 + 432))
    || *(_QWORD *)(*(_QWORD *)(v28 + 424) + 8 * v29) != ((8 * v16) | 1))
  {
    v87 = (8 * v16) | 1;
    v88 = 0;
    LODWORD(v89) = *((_DWORD *)v11 + v26);
    LODWORD(v91) = 0;
    sub_1C5546B4C(a3, 126, (unint64_t *)&v87, (int *)&v89);
    *((_DWORD *)v11 + v26) = *(_DWORD *)(*(_QWORD *)(v30 + 32) + 4);
  }
  v32 = sub_1C55437B8(a3, a4);
  v33 = (unint64_t *)v31;
  v34 = (unint64_t *)a3[6];
  v35 = *(_QWORD *)(a3[5] + 40);
  *(_QWORD *)(v31 + 24) = v35;
  v36 = *(_QWORD *)(v35 + 32);
  v37 = *(unsigned int *)(v31 + 40);
  if ((_DWORD)v37)
  {
    v76 = *(_QWORD *)(v31 + 32);
    v77 = *(_QWORD *)(v36 + 40);
    v78 = 32 * v37;
    do
    {
      if (!*(_BYTE *)v76)
      {
        v79 = *(unsigned int *)(v76 + 4);
        if ((int)v79 >= 0)
          v80 = (uint64_t *)(*(_QWORD *)(v77 + 272) + 8 * v79);
        else
          v80 = (uint64_t *)(*(_QWORD *)(v77 + 24) + 16 * (v79 & 0x7FFFFFFF) + 8);
        v81 = *v80;
        if (*v80)
        {
          v82 = *(_QWORD *)(v81 + 16);
          *(_QWORD *)(v81 + 16) = v76;
          *(_QWORD *)(v76 + 16) = v82;
          if ((*(_BYTE *)(v76 + 3) & 1) != 0)
          {
            *(_QWORD *)(v76 + 24) = v81;
          }
          else
          {
            *(_QWORD *)(v76 + 24) = 0;
            v80 = (uint64_t *)(v82 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v76 + 16) = v76;
          *(_QWORD *)(v76 + 24) = 0;
        }
        *v80 = v76;
      }
      v76 += 32;
      v78 -= 32;
    }
    while (v78);
  }
  v38 = *(_QWORD *)(v36 + 728);
  if (v38)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 24))(v38, v31);
  v39 = *v34 & 0xFFFFFFFFFFFFFFF8;
  *v33 = v39 | *v33 & 7;
  v33[1] = (unint64_t)v34;
  *(_QWORD *)(v39 + 8) = v33;
  *v34 = *v34 & 7 | (unint64_t)v33;
  v40 = a3[7];
  if (v40)
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v40 + 24))(v40, v33);
  if ((_DWORD)v94)
  {
    v41 = (int *)v93;
    v42 = 4 * v94;
    do
    {
      v43 = *v41++;
      v90 = 0;
      LODWORD(v89) = 0;
      HIDWORD(v89) = v43;
      v91 = 0;
      v92 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v33, v32, (const llvm::MachineOperand *)&v89);
      v42 -= 4;
    }
    while (v42);
  }
  v44 = *(unsigned __int8 *)(a2 + 16);
  if (v44 == 84)
  {
    v45 = 0;
  }
  else if (v44 == 39)
  {
    v45 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    v45 = 2;
  }
  v46 = 0;
  v47 = *(_DWORD *)(a2 + 20);
  v48 = -(uint64_t)(v47 & 0x7FFFFFF);
  if (v47 < 0)
  {
    v83 = a2 - 32 * (v47 & 0x7FFFFFF);
    v84 = *(_QWORD *)(v83 - 8);
    if ((v84 & 0xFFFFFFFF0) != 0)
      v46 = *(_DWORD *)(v83 - 12) - *(_DWORD *)(v83 - v84);
    else
      v46 = 0;
  }
  v49 = *(_QWORD *)(a2
                  + 32 * v48
                  + 32
                  * (((-32 * v45 + 32 * (unint64_t)-v46 - 32 * v48 - 32) >> 5) - 1));
  v50 = (unsigned int *)(v49 + 24);
  if (*(_DWORD *)(v49 + 32) >= 0x41u)
    v50 = *(unsigned int **)v50;
  v51 = *v50;
  if (sub_1C53924A0(a2))
  {
    v52 = (llvm::AttributeList *)(a2 + 64);
    ParamAlignment = (unsigned __int16)llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a2 + 64), 0);
    if (ParamAlignment <= 0x100)
      v54 = 0;
    else
      v54 = ParamAlignment;
LABEL_47:
    v55 = (unsigned __int16)llvm::AttributeList::getParamAlignment(v52, 1);
    if (v55 <= 0x100)
      LOBYTE(v55) = 0;
LABEL_55:
    v86 = v55;
  }
  else
  {
    if (sub_1C550CC10(a2))
    {
      v56 = (unsigned __int16)llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a2 + 64), 0);
      v55 = (unsigned __int16)llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a2 + 64), 1);
      if (v56 <= 0x100)
        v54 = 0;
      else
        v54 = v56;
      if (v55 <= 0x100)
        LOBYTE(v55) = 0;
      goto LABEL_55;
    }
    v73 = sub_1C53924F4(a2);
    v52 = (llvm::AttributeList *)(a2 + 64);
    v74 = (unsigned __int16)llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a2 + 64), 0);
    if (v74 <= 0x100)
      v54 = 0;
    else
      v54 = v74;
    if (v73)
      goto LABEL_47;
    v86 = 0;
  }
  if (a4 != 235)
  {
    v57 = (*(_WORD *)(a2 + 18) & 3u) - 1 >= 2;
    LODWORD(v89) = 1;
    v58 = !v57;
    v90 = 0;
    v91 = v58;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v33, v32, (const llvm::MachineOperand *)&v89);
  }
  v59 = 4 * (v51 != 0);
  v60 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v61 = v60 & 0xFFFFFFFFFFFFFFFBLL;
  if (v60)
  {
    v62 = *(_QWORD *)v60;
    v63 = *(_DWORD *)(*(_QWORD *)v60 + 8);
    if ((v63 & 0xFE) == 0x12)
      v63 = *(_DWORD *)(**(_QWORD **)(v62 + 16) + 8);
    v64 = a4;
    v65 = v63 >> 8;
  }
  else
  {
    v64 = a4;
    v65 = 0;
  }
  v66 = sub_1C484358C(*(_QWORD *)(a1 + 864) + 128, 80, 3);
  *(_QWORD *)v66 = v61;
  *(_QWORD *)(v66 + 8) = 0;
  *(_DWORD *)(v66 + 16) = v65;
  *(_BYTE *)(v66 + 20) = 0;
  *(_QWORD *)(v66 + 24) = 65;
  *(_WORD *)(v66 + 32) = v59 | 2;
  *(_BYTE *)(v66 + 34) = v54;
  *(_OWORD *)(v66 + 40) = 0u;
  *(_OWORD *)(v66 + 56) = 0u;
  *(_QWORD *)(v66 + 72) = 0;
  *(_WORD *)(v66 + 36) = 1;
  llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v33, v32, (llvm::MachineMemOperand *)v66);
  if (v64 != 237)
  {
    v67 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
    v68 = v67 & 0xFFFFFFFFFFFFFFFBLL;
    if (v67)
    {
      v69 = *(_QWORD *)v67;
      v70 = *(_DWORD *)(*(_QWORD *)v67 + 8);
      v71 = v86;
      if ((v70 & 0xFE) == 0x12)
        v70 = *(_DWORD *)(**(_QWORD **)(v69 + 16) + 8);
      v72 = v70 >> 8;
    }
    else
    {
      v72 = 0;
      v71 = v86;
    }
    v75 = sub_1C484358C(*(_QWORD *)(a1 + 864) + 128, 80, 3);
    *(_QWORD *)v75 = v68;
    *(_QWORD *)(v75 + 8) = 0;
    *(_DWORD *)(v75 + 16) = v72;
    *(_BYTE *)(v75 + 20) = 0;
    *(_QWORD *)(v75 + 24) = 65;
    *(_WORD *)(v75 + 32) = v59 | 1;
    *(_BYTE *)(v75 + 34) = v71;
    *(_OWORD *)(v75 + 40) = 0u;
    *(_OWORD *)(v75 + 56) = 0u;
    *(_QWORD *)(v75 + 72) = 0;
    *(_WORD *)(v75 + 36) = 1;
    llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v33, v32, (llvm::MachineMemOperand *)v75);
  }
  if (v93 != v95)
    free(v93);
}

uint64_t sub_1C55002A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v8;
  int *v9;
  uint64_t v10;
  int v11;
  int *v12;
  uint64_t v13;
  int v14;
  _DWORD v16[12];
  _DWORD v17[8];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v8 = (_DWORD *)sub_1C54F95B0(a1, a2);
  v17[0] = *v8;
  v17[2] = 1;
  v17[4] = v8[1];
  v17[6] = 1;
  v9 = (int *)sub_1C54F95B0(a1, *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
  if (v10)
    v11 = *v9;
  else
    v11 = 0;
  v16[0] = v11;
  v16[4] = 0;
  v12 = (int *)sub_1C54F95B0(a1, *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32));
  if (v13)
    v14 = *v12;
  else
    v14 = 0;
  v16[6] = v14;
  v16[10] = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, a3, v17, 2, v16, 2, 0);
}

uint64_t sub_1C55003B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *v8;
  uint64_t v9;
  int v10;
  int *v11;
  uint64_t v12;
  int v13;
  int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _DWORD v21[12];
  _QWORD *v22;
  int v23;
  _DWORD v24[4];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v8 = (int *)sub_1C54F95B0(a1, a3);
  if (v9)
    v10 = *v8;
  else
    v10 = 0;
  v11 = (int *)sub_1C54F95B0(a1, *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)));
  if (v12)
    v13 = *v11;
  else
    v13 = 0;
  v14 = (int *)sub_1C54F95B0(a1, *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32));
  if (v15)
    v16 = *v14;
  else
    v16 = 0;
  v17 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 64);
  v18 = (_QWORD *)(v17 + 24);
  if (*(_DWORD *)(v17 + 32) >= 0x41u)
    v18 = (_QWORD *)*v18;
  v19 = (_QWORD *)*v18;
  v24[0] = v10;
  v24[2] = 1;
  v21[0] = v13;
  v21[4] = 0;
  v21[6] = v16;
  v21[10] = 0;
  v22 = v19;
  v23 = 3;
  return (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, a2, v24, 1, v21, 3, 0);
}

uint64_t sub_1C5500500(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int VRegDefAt;
  unint64_t v16;
  uint64_t v17;
  int v18;
  const llvm::DataLayout *v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  unint64_t LLTForType;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  char v34;
  int v35;
  unsigned int v36;
  int v37;
  const llvm::Instruction *v38;
  uint64_t v39;
  uint64_t v40;
  char **v41;
  char *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (**v49)(void);
  uint64_t v50;
  unint64_t v51;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  const llvm::Value *v60;
  const llvm::Value *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  char v72;
  _QWORD v73[2];
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  char *v78;
  uint64_t v79;
  int GenericVirtualRegister;
  _QWORD v81[3];
  _QWORD *v82;
  void *v83;
  uint64_t v84;
  _QWORD v85[18];

  v85[16] = *MEMORY[0x1E0C80C00];
  v7 = sub_1C54F95B0(a1, a2);
  v69 = v8;
  v70 = v7;
  v83 = v85;
  v84 = 0x800000000;
  GenericVirtualRegister = 0;
  v9 = *(_DWORD *)(a2 + 20);
  v10 = v9 & 0x7FFFFFF;
  v11 = *(unsigned __int8 *)(a2 + 16);
  if (v11 == 84)
  {
    v12 = 0;
  }
  else if (v11 == 39)
  {
    v12 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    v12 = 2;
  }
  v13 = a2 - 32 * v10;
  if (v9 < 0 && (v53 = *(_QWORD *)(v13 - 8), (v53 & 0xFFFFFFFF0) != 0))
    v14 = (*(_DWORD *)(v13 - 12) - *(_DWORD *)(v13 - v53));
  else
    v14 = 0;
  if (v13 != a2 - 32 * v12 - 32 * v14 - 32)
  {
    VRegDefAt = 0;
    v16 = (32 * v12 + 32 * v14) ^ 0xFFFFFFFFFFFFFFE0;
    v17 = -32 * v10;
    while (1)
    {
      v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 248) + 24))(*(_QWORD *)(a1 + 248));
      v20 = *(_QWORD *)(a2 + v17);
      if (!v18)
        break;
      v21 = *(unsigned __int8 *)(v20 + 16);
      if (v20)
        v22 = v21 == 21;
      else
        v22 = 0;
      if (v22)
      {
        v26 = *(_QWORD *)(*(_QWORD *)(v20 + 24) + 112);
        if (!v26)
          break;
        v27 = *(_DWORD *)(v20 + 32) + 2;
        if (v27 >= *(_DWORD *)(v26 + 8))
          break;
        v32 = *(_QWORD *)(v26 + 8 * v27 + 40);
        if (!v32 || (*(char *)(v32 + 19) & 0x80000000) == 0)
          break;
      }
      else if (v21 != 59 || (*(_WORD *)(v20 + 18) & 0x80) == 0)
      {
        break;
      }
      LLTForType = llvm::getLLTForType(*(llvm **)v20, *(llvm::Type **)(a1 + 880), v19);
      GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(a1 + 872), LLTForType, "", 0);
      LODWORD(v78) = GenericVirtualRegister;
      LODWORD(v79) = 1;
      LODWORD(v73[0]) = llvm::SwiftErrorValueTracking::getOrCreateVRegUseAt((llvm::SwiftErrorValueTracking *)(a1 + 712), a2, *(const llvm::MachineBasicBlock **)(a3 + 40), *(const llvm::Value **)(a2 + v17));
      LODWORD(v74) = 0;
      (*(void (**)(uint64_t, uint64_t, char **, uint64_t, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, 19, &v78, 1, v73, 1, 0);
      v24 = v84;
      if (v84 >= HIDWORD(v84))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, (uint64_t)v85, v84 + 1, 16);
        v33 = (char *)v83 + 16 * v84;
        *v33 = &GenericVirtualRegister;
        v33[1] = 1;
        v24 = v84;
      }
      else
      {
        v25 = (char *)v83 + 16 * v84;
        *v25 = &GenericVirtualRegister;
        v25[1] = 1;
      }
      LODWORD(v84) = v24 + 1;
      VRegDefAt = llvm::SwiftErrorValueTracking::getOrCreateVRegDefAt((llvm::SwiftErrorValueTracking *)(a1 + 712), a2, *(const llvm::MachineBasicBlock **)(a3 + 40), *(const llvm::Value **)(a2 + v17));
LABEL_22:
      v17 += 32;
      if (v16 == v17)
      {
        v9 = *(_DWORD *)(a2 + 20);
        if (v9 < 0)
          goto LABEL_61;
        goto LABEL_31;
      }
    }
    v3 = sub_1C54F95B0(a1, v20);
    v29 = v28;
    v30 = v84;
    if (v84 >= (unint64_t)HIDWORD(v84))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, (uint64_t)v85, v84 + 1, 16);
      v30 = v84;
    }
    v31 = (uint64_t *)((char *)v83 + 16 * v30);
    *v31 = v3;
    v31[1] = v29;
    LODWORD(v84) = v84 + 1;
    goto LABEL_22;
  }
  VRegDefAt = 0;
  if ((v9 & 0x80000000) == 0)
    goto LABEL_31;
LABEL_61:
  v54 = v9 & 0x7FFFFFF;
  v55 = *(_QWORD *)(a2 - 32 * v54 - 8);
  if ((v55 & 0xFFFFFFFF0) == 0)
    goto LABEL_31;
  v56 = 0;
  v57 = (v55 >> 4);
  v58 = -8 - (v55 + 32 * v54);
  do
  {
    if (*(_DWORD *)(*(_QWORD *)(a2 + v58) + 8) == 7)
      ++v56;
    v58 += 16;
    --v57;
  }
  while (v57);
  if (!v56
    || (sub_1C5500AF4((_DWORD *)a2, "ptrauth", 7uLL, v73),
        v59 = *(uint64_t **)v73[0],
        v60 = *(const llvm::Value **)(v73[0] + 32),
        v78 = llvm::GlobalPtrAuthInfo::analyze(*(uint64_t ****)(a2 - 32), v61),
        v79 = v62,
        (_BYTE)v62)
    && (llvm::GlobalPtrAuthInfo::isCompatibleWith((llvm::GlobalPtrAuthInfo *)&v78, (const llvm::Value *)v59, v60, *(const llvm::DataLayout **)(a1 + 880), v63, v64, v65) & 1) != 0)
  {
LABEL_31:
    v34 = 0;
    LOBYTE(v35) = 0;
    v36 = 0;
  }
  else
  {
    v66 = (int *)sub_1C54F95B0(a1, v60);
    if (v67)
      v35 = *v66;
    else
      v35 = 0;
    v68 = v59 + 3;
    if (*((_DWORD *)v59 + 8) >= 0x41u)
      v68 = (uint64_t *)*v68;
    v3 = *v68;
    v36 = v35 & 0xFFFFFF00;
    v34 = 1;
  }
  v37 = *(unsigned __int8 *)(a2 + 16);
  if (v37 == 84)
    v38 = (const llvm::Instruction *)a2;
  else
    v38 = 0;
  if (v37 == 84)
  {
    v39 = *****(_QWORD *****)(a1 + 904);
    if (*(_QWORD *)(v39 + 128)
      || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v39 + 72) + 48))(*(_QWORD *)(v39 + 72)))
    {
      v40 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
      v41 = **(char ****)(a1 + 8);
      do
      {
        v42 = *v41;
        v41 += 2;
      }
      while (v42 != llvm::TargetLibraryInfoWrapperPass::ID);
      v43 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v41 - 1) + 96))(*(v41 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
      v44 = (uint64_t *)sub_1C4D914E8(v43, v40);
      if (llvm::MemoryOpRemark::canHandle((uint64_t)v38, v44))
      {
        v45 = *(_QWORD *)(a1 + 904);
        v46 = *(_QWORD *)(a1 + 880);
        v73[0] = &unk_1E81A9CF8;
        v73[1] = v45;
        v74 = "gisel-irtranslator-memsize";
        v75 = 26;
        v76 = v46;
        v77 = v44;
        llvm::MemoryOpRemark::visit((llvm::MemoryOpRemark *)v73, v38);
      }
    }
  }
  v47 = *(_QWORD *)(a1 + 248);
  LODWORD(v71) = v36 | v35;
  *((_QWORD *)&v71 + 1) = v3;
  v72 = v34;
  v81[0] = &off_1E816DEA8;
  v81[1] = a1;
  v81[2] = a2;
  v82 = v81;
  v48 = sub_1C54F1374(v47, a3, a2, v70, v69, (uint64_t)v83, v84, VRegDefAt, &v71, (uint64_t)v81);
  if (v82 == v81)
  {
    v49 = (void (**)(void))(v81[0] + 32);
  }
  else
  {
    if (!v82)
      goto LABEL_47;
    v49 = (void (**)(void))(*v82 + 40);
  }
  (*v49)();
LABEL_47:
  if ((_DWORD)v48)
  {
    v50 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 864) + 16) + 104))(*(_QWORD *)(*(_QWORD *)(a1 + 864) + 16));
    v51 = **(_QWORD **)(a3 + 48) & 0xFFFFFFFFFFFFFFF8;
    if (!v51 || (*(_BYTE *)v51 & 4) == 0)
    {
      while ((*(_WORD *)(v51 + 44) & 4) != 0)
        v51 = *(_QWORD *)v51 & 0xFFFFFFFFFFFFFFF8;
    }
    *(_BYTE *)(a1 + 1761) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 1136))(v50);
  }
  if (v83 != v85)
    free(v83);
  return v48;
}

uint64_t sub_1C5500A9C(uint64_t a1, int a2)
{
  int v2;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v2 = *(_DWORD *)(a1 + 20);
  if ((v2 & 0x80000000) == 0)
    return 0;
  v5 = v2 & 0x7FFFFFF;
  v6 = *(_QWORD *)(a1 - 32 * v5 - 8);
  if ((v6 & 0xFFFFFFFF0) == 0)
    return 0;
  LODWORD(result) = 0;
  v7 = (v6 >> 4);
  v8 = (uint64_t *)(a1 - (v6 + 32 * v5) - 8);
  do
  {
    v9 = *v8;
    v8 += 2;
    if (*(_DWORD *)(v9 + 8) == a2)
      result = (result + 1);
    else
      result = result;
    --v7;
  }
  while (v7);
  return result;
}

_DWORD *sub_1C5500AF4@<X0>(_DWORD *result@<X0>, const void *a2@<X1>, size_t a3@<X2>, _BYTE *a4@<X8>)
{
  int v4;
  char v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  size_t v17;

  v4 = result[5];
  if (v4 < 0 && (v6 = v4 & 0x7FFFFFF, v7 = &result[-8 * v6], v8 = *((_QWORD *)v7 - 1), (v8 & 0xFFFFFFFF0) != 0))
  {
    v9 = (v8 >> 4);
    v10 = (_DWORD *)((char *)result - v8 + -32 * v6);
    v17 = a3;
    while (1)
    {
      v11 = a4;
      v12 = (_QWORD *)*((_QWORD *)v10 - 1);
      result = v12 + 2;
      if (*v12 == a3)
      {
        if (!v17)
          break;
        result = (_DWORD *)memcmp(result, a2, v17);
        if (!(_DWORD)result)
          break;
      }
      v10 += 4;
      --v9;
      a4 = v11;
      a3 = v17;
      if (!v9)
        goto LABEL_2;
    }
    v13 = *v10;
    v14 = &v7[8 * v13];
    v15 = v10[1] - v13;
    a4 = v11;
    *v11 = v14;
    v11[1] = v15;
    v11[2] = v12;
    v5 = 1;
  }
  else
  {
LABEL_2:
    v5 = 0;
    *a4 = 0;
  }
  a4[24] = v5;
  return result;
}

uint64_t sub_1C5500BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  const llvm::CallInst *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  llvm::Value *v15;
  const llvm::DataLayout *v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char **v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  int v34;
  char ExceptionBehavior;
  int v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  int v44;
  int *v45;
  uint64_t v46;
  int v47;
  int *v48;
  uint64_t v49;
  int v50;
  void (*v51)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t);
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  int v59;
  int *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  _QWORD *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  uint64_t v75;
  __int128 v76;
  int *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  __int128 *v83;
  unsigned int v84;
  uint64_t v85;
  int *v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  uint64_t v90;
  __int128 v91;
  int *v92;
  uint64_t v93;
  int v94;
  unint64_t v95;
  uint64_t v96;
  __int128 v97;
  int *v98;
  uint64_t v99;
  int v100;
  unint64_t v101;
  uint64_t v102;
  __int128 v103;
  int *v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  unsigned __int8 v111;
  unint64_t v112;
  unsigned int v113;
  int v114;
  unsigned int v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v119;
  uint64_t v120;
  _BYTE *v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  llvm::APInt *v132;
  unsigned int v133;
  BOOL v134;
  unsigned int v135;
  __int128 *v136;
  __int128 *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  llvm::MachineFunction *v143;
  unint64_t *v144;
  unint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  int *v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  llvm::MachineFunction *v165;
  unint64_t *v166;
  unint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int *v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int *v185;
  uint64_t v186;
  int v187;
  unsigned int v188;
  uint64_t *v189;
  char v190;
  int *v191;
  uint64_t v192;
  int v193;
  _QWORD *v194;
  unsigned __int8 *v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  const void *v206;
  unint64_t v207;
  _QWORD *v208;
  unsigned __int8 *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t ****v214;
  uint64_t ***v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t ****v220;
  uint64_t ***v221;
  int v222;
  int v223;
  BOOL v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int *v232;
  uint64_t v233;
  int v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  int v239;
  uint64_t *v240;
  uint64_t v241;
  uint64_t v242;
  unsigned int v243;
  int *v244;
  uint64_t v245;
  int v246;
  int *v247;
  uint64_t v248;
  int v249;
  int *v250;
  uint64_t v251;
  int v252;
  int *v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  BOOL v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int v263;
  uint64_t v264;
  uint64_t v265;
  unsigned int v266;
  llvm::MachineFunction *v267;
  llvm::MachineInstr *v268;
  llvm::MachineInstr *v269;
  uint64_t v270;
  int v271;
  BOOL v272;
  unsigned int v273;
  int v274;
  uint64_t v275;
  int *v276;
  uint64_t v277;
  int v278;
  int *v279;
  uint64_t v280;
  int v281;
  int *v282;
  uint64_t v283;
  int v284;
  int *v285;
  uint64_t v286;
  int v287;
  int *v288;
  const llvm::DataLayout *v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t LLTForType;
  unsigned int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unsigned int v301;
  int *v302;
  uint64_t v303;
  int v304;
  llvm::MachineInstr *v305;
  int v306;
  uint64_t v307;
  llvm::MachineFunction *v308;
  llvm::MachineInstr *v309;
  llvm::MachineInstr *v310;
  uint64_t v311;
  unint64_t v312;
  unsigned int v313;
  unsigned int v314;
  unint64_t v315;
  int v316;
  llvm::DataLayout *v317;
  uint64_t v318;
  llvm::Type *v319;
  const llvm::DataLayout *v320;
  char v321;
  unsigned int v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  int v326;
  unsigned int v327;
  _QWORD *v328;
  uint64_t v329;
  uint64_t *v330;
  uint64_t v331;
  int v332;
  BOOL v333;
  int v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t *v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  llvm::MachineFunction *v342;
  unint64_t *v343;
  unint64_t *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  uint64_t v350;
  int *v351;
  uint64_t v352;
  int v353;
  uint64_t ***v354;
  uint64_t v355;
  char *v356;
  uint64_t v357;
  int v358;
  int v359;
  uint64_t v360;
  uint64_t v361;
  int v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t v366;
  llvm::Value *v367;
  int v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unint64_t FrameAllocSymbol;
  llvm::MachineFunction *v374;
  llvm::MachineInstr *v375;
  llvm::MachineInstr *v376;
  uint64_t *v377;
  uint64_t **v378;
  uint64_t *v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t *v387;
  uint64_t v388;
  uint64_t v389;
  _QWORD *v390;
  _QWORD *v391;
  int *v392;
  uint64_t v393;
  int v394;
  _QWORD *v395;
  _QWORD *v396;
  int *v397;
  uint64_t v398;
  int v399;
  int *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  _BOOL4 v404;
  llvm::MachineInstr *v405;
  llvm::MachineInstr *v406;
  int v407;
  uint64_t v408;
  int v409;
  uint64_t v410;
  unint64_t v411;
  uint64_t v412;
  int v413;
  unint64_t v414;
  uint64_t v415;
  int HasAttr;
  uint64_t v417;
  int v418;
  BOOL v419;
  BOOL v420;
  int *v421;
  unint64_t v422;
  int v423;
  unsigned int v424;
  uint64_t v425;
  unsigned __int8 *Impl;
  int v427;
  uint64_t *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  char v432;
  char v433;
  unint64_t LLTForMVT;
  const char *v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t v438;
  _DWORD *v439;
  uint64_t v440;
  unsigned int v441;
  unsigned int v442;
  __int16 v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  int *v448;
  uint64_t v449;
  int v450;
  unint64_t v451;
  llvm::Value *TypeInfo;
  int *v453;
  uint64_t v454;
  int v455;
  unint64_t v456;
  int v457;
  uint64_t v458;
  int v459;
  int *v460;
  uint64_t v461;
  int v462;
  _DWORD *v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t *v469;
  uint64_t v470;
  uint64_t v471;
  unsigned int TypeIDFor;
  _QWORD *v473;
  int v474;
  BOOL v475;
  unsigned int v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t *FixedStack;
  uint64_t v486;
  int v487;
  unint64_t v488;
  _QWORD *v489;
  uint64_t v490;
  _QWORD *v491;
  uint64_t v492;
  uint64_t v493;
  _DWORD *v494;
  uint64_t v495;
  unint64_t v496;
  unint64_t v497;
  unint64_t v498;
  unint64_t v499;
  int v500;
  uint64_t v501;
  uint64_t *v502;
  uint64_t v503;
  uint64_t v504;
  unint64_t v505;
  uint64_t v506;
  unint64_t v507;
  uint64_t v508;
  llvm::Value **NullValue;
  int GenericVirtualRegister;
  uint64_t ***v511;
  uint64_t v512;
  uint64_t v513;
  llvm::MachineFunction *v514;
  llvm::MachineFunction *v515;
  llvm::MachineFunction *v516;
  int v517;
  uint64_t v518;
  void *v519;
  int v520;
  _BYTE v521[56];
  void *v522;
  _BYTE v523[16];
  void *v524;
  _QWORD v525[2];
  int v526;
  uint64_t v527;
  uint64_t v528;
  __int128 v529;
  uint64_t v530;
  uint64_t v531;
  void *v532[2];
  _DWORD v533[12];
  char v534;
  void *v535[2];
  _BYTE v536[16];
  void *v537[2];
  uint64_t v538;
  uint64_t v539;
  int v540;
  char *v541;
  uint64_t v542;
  _DWORD v543[1218];
  __int128 v544;
  char v545;
  char v546;
  int v547;
  char v548;
  int v549;
  const void *v550;
  unsigned int v551;
  uint64_t v552;

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v6 = v5;
  v8 = v7;
  v9 = v4;
  v552 = *MEMORY[0x1E0C80C00];
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 864) + 8) + 56))(*(_QWORD *)(*(_QWORD *)(v4 + 864) + 8));
  v12 = *(_QWORD *)(v8 - 32);
  if (!v12)
    goto LABEL_5;
  if (*(_BYTE *)(v12 + 16) || *(_QWORD *)(v12 + 24) != *(_QWORD *)(v8 + 72))
  {
    v12 = 0;
LABEL_5:
    v13 = 1;
    goto LABEL_6;
  }
  if ((*(_DWORD *)(v12 + 32) & 0x300) == 0x100)
    return 0;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 864) + 8) + 484) == 15)
  {
    v13 = 0;
    v31 = 0;
    if ((llvm::GlobalValue::hasExternalWeakLinkage(*(llvm::GlobalValue **)(v8 - 32)) & 1) != 0)
      return v31;
  }
  else
  {
    v13 = 0;
  }
LABEL_6:
  v14 = *(_DWORD *)(v8 + 20);
  if (v14 < 0)
  {
    v496 = v8 - 32 * (v14 & 0x7FFFFFF);
    v499 = *(_QWORD *)(v496 - 8);
    v497 = v496 - 8;
    v498 = v499;
    if ((v499 & 0xFFFFFFFF0) != 0)
    {
      v500 = 0;
      v501 = (v498 >> 4);
      v502 = (uint64_t *)(v497 - v498);
      do
      {
        v503 = *v502;
        v502 += 2;
        if (*(_DWORD *)(v503 + 8) == 3)
          ++v500;
        --v501;
      }
      while (v501);
      if (v500)
        return 0;
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(v8 - 32) + 16) == 24)
    return sub_1C626FCE0(v9, v8, (uint64_t)v6);
  llvm::diagnoseDontCall(v8, v10);
  if ((v13 & 1) != 0 || (*(_BYTE *)(v12 + 33) & 0x20) == 0)
    return sub_1C5500500(v9, v8, (uint64_t)v6);
  v19 = *(unsigned int *)(v12 + 36);
  v20 = 1;
  if (v11 && !(_DWORD)v19)
  {
    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 32))(v11, v12);
    v20 = *(_DWORD *)(v12 + 32) & 0x2000;
  }
  if (!v20 || !(_DWORD)v19)
    return sub_1C5500500(v9, v8, (uint64_t)v6);
  if (*(_BYTE *)(v8 + 16) == 84)
  {
    v21 = *(_QWORD *)(v8 - 32);
    if (v21)
    {
      if (!*(_BYTE *)(v21 + 16)
        && *(_QWORD *)(v21 + 24) == *(_QWORD *)(v8 + 72)
        && (*(_BYTE *)(v21 + 33) & 0x20) != 0
        && (*(_DWORD *)(v21 + 36) - 194) <= 6)
      {
        v22 = *****(_QWORD *****)(v9 + 904);
        if (*(_QWORD *)(v22 + 128)
          || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v22 + 72) + 48))(*(_QWORD *)(v22 + 72)))
        {
          v23 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 56);
          v24 = **(char ****)(v9 + 8);
          do
          {
            v25 = *v24;
            v24 += 2;
          }
          while (v25 != llvm::TargetLibraryInfoWrapperPass::ID);
          v26 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v24 - 1) + 96))(*(v24 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
          v27 = (uint64_t *)sub_1C4D914E8(v26, v23);
          if (llvm::MemoryOpRemark::canHandle(v8, v27))
          {
            v28 = *(_QWORD *)(v9 + 904);
            v29 = *(_QWORD *)(v9 + 880);
            v527 = (uint64_t)&unk_1E81A9CF8;
            v528 = v28;
            *(_QWORD *)&v529 = "gisel-irtranslator-memsize";
            *((_QWORD *)&v529 + 1) = 26;
            v530 = v29;
            v531 = (uint64_t)v27;
            llvm::MemoryOpRemark::visit((llvm::MemoryOpRemark *)&v527, (const llvm::Instruction *)v8);
          }
        }
      }
    }
  }
  if ((int)v19 > 169)
  {
    if ((int)v19 <= 238)
    {
      switch((int)v19)
      {
        case 192:
LABEL_648:
          v30 = v19;
          goto LABEL_108;
        case 193:
          v30 = 188;
          goto LABEL_108;
        case 194:
        case 195:
        case 196:
        case 197:
        case 198:
        case 199:
        case 200:
          goto LABEL_67;
        case 201:
          v30 = 191;
          goto LABEL_108;
        case 202:
          v30 = 187;
          goto LABEL_108;
        case 203:
          v30 = 220;
          goto LABEL_108;
        default:
          switch((int)v19)
          {
            case 170:
              v30 = 201;
              goto LABEL_108;
            case 171:
            case 172:
            case 173:
            case 174:
            case 178:
            case 179:
              goto LABEL_67;
            case 175:
              v30 = 174;
              goto LABEL_108;
            case 176:
              goto LABEL_648;
            case 177:
              v30 = 175;
              goto LABEL_108;
            case 180:
              v30 = 87;
              goto LABEL_108;
            case 181:
              v30 = 200;
              goto LABEL_108;
            default:
              if ((_DWORD)v19 != 238)
                goto LABEL_67;
              v30 = 170;
              break;
          }
          goto LABEL_108;
      }
    }
    if ((int)v19 > 279)
    {
      if ((_DWORD)v19 == 280)
      {
        v30 = 217;
      }
      else
      {
        if ((_DWORD)v19 != 296)
        {
          switch((int)v19)
          {
            case 317:
              v30 = 245;
              goto LABEL_108;
            case 318:
              v30 = 247;
              goto LABEL_108;
            case 320:
              v30 = 243;
              goto LABEL_108;
            case 321:
              v30 = 244;
              goto LABEL_108;
            case 323:
              v30 = 246;
              goto LABEL_108;
            case 324:
              v30 = 248;
              goto LABEL_108;
            case 325:
              v30 = 250;
              goto LABEL_108;
            case 326:
              v30 = 251;
              goto LABEL_108;
            case 327:
              v30 = 252;
              goto LABEL_108;
            case 328:
              v30 = 253;
              goto LABEL_108;
            case 329:
              v30 = 249;
              goto LABEL_108;
            default:
              goto LABEL_67;
          }
        }
        v30 = 85;
      }
    }
    else
    {
      switch((int)v19)
      {
        case 252:
          v30 = 194;
          goto LABEL_108;
        case 253:
        case 254:
        case 255:
        case 257:
          goto LABEL_67;
        case 256:
          v30 = 89;
          goto LABEL_108;
        case 258:
          v30 = 219;
          goto LABEL_108;
        case 259:
          v30 = 86;
          goto LABEL_108;
        case 260:
          v30 = 88;
          goto LABEL_108;
        default:
          if ((_DWORD)v19 == 239)
          {
            v30 = 171;
          }
          else
          {
            if ((_DWORD)v19 != 273)
              goto LABEL_67;
            v30 = 216;
          }
          break;
      }
    }
    goto LABEL_108;
  }
  if ((int)v19 > 138)
  {
    switch((int)v19)
    {
      case 139:
        v30 = 184;
        goto LABEL_108;
      case 140:
        v30 = 218;
        goto LABEL_108;
      case 142:
        v30 = 166;
        goto LABEL_108;
      case 148:
        v30 = 130;
        goto LABEL_108;
      case 149:
        v30 = 131;
        goto LABEL_108;
      default:
        goto LABEL_67;
    }
  }
  if ((int)v19 <= 75)
  {
    if ((int)v19 > 74)
    {
      v30 = 172;
    }
    else
    {
      v30 = 212;
      switch((int)v19)
      {
        case 8:
          v30 = 213;
          break;
        case 9:
          break;
        case 10:
        case 11:
        case 12:
        case 15:
        case 16:
        case 17:
        case 18:
          goto LABEL_67;
        case 13:
          v30 = 186;
          break;
        case 14:
          v30 = 214;
          break;
        case 19:
          v30 = 185;
          break;
        default:
          if ((_DWORD)v19 == 53)
          {
            v30 = 211;
          }
          else
          {
            if ((_DWORD)v19 != 51)
              goto LABEL_67;
            v30 = 215;
          }
          break;
      }
    }
LABEL_108:
    v527 = (uint64_t)&v529;
    v528 = 0x400000000;
    v64 = *(_DWORD *)(v8 + 20);
    v65 = v64 & 0x7FFFFFF;
    v66 = (_QWORD *)(v8 - 32 * v65);
    v67 = *(unsigned __int8 *)(v8 + 16);
    if (v67 == 84)
    {
      v68 = 0;
    }
    else if (v67 == 39)
    {
      v68 = (*(_DWORD *)(v8 + 80) + 1);
    }
    else
    {
      v68 = 2;
    }
    if (v64 < 0 && (v504 = *(v66 - 1), (v504 & 0xFFFFFFFF0) != 0))
      v69 = (*((_DWORD *)v66 - 3) - *(_DWORD *)((char *)v66 - v504));
    else
      v69 = 0;
    if (v66 != (_QWORD *)(v8 - 32 * v68 - 32 * v69 - 32))
    {
      v70 = 32 * v65 - 32 * v68 - 32 * v69 - 32;
      do
      {
        v71 = (int *)sub_1C54F95B0(v9, *v66);
        if (v72)
          v73 = *v71;
        else
          v73 = 0;
        LODWORD(v518) = v73;
        v520 = 0;
        v74 = sub_1C4926708((uint64_t)&v527, (unint64_t)&v518, 1);
        v75 = v527 + 24 * v528;
        v76 = *(_OWORD *)v74;
        *(_QWORD *)(v75 + 16) = *(_QWORD *)(v74 + 16);
        *(_OWORD *)v75 = v76;
        LODWORD(v528) = v528 + 1;
        v66 += 4;
        v70 -= 32;
      }
      while (v70);
    }
    v77 = (int *)sub_1C54F95B0(v9, v8);
    if (v78)
      v79 = *v77;
    else
      v79 = 0;
    LODWORD(v518) = v79;
    LODWORD(v519) = 1;
    v80 = v527;
    v81 = v528;
    v82 = llvm::MachineInstr::copyFlagsFromInstruction(v8);
    (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*v6 + 32))(v6, v30, &v518, 1, v80, v81, v82 | 0x100000000);
    v83 = (__int128 *)v527;
    if ((__int128 *)v527 != &v529)
LABEL_122:
      free(v83);
    return 1;
  }
  if ((_DWORD)v19 == 76)
  {
    v30 = 173;
    goto LABEL_108;
  }
LABEL_67:
  v31 = 1;
  if ((int)v19 > 51)
  {
    switch((int)v19)
    {
      case 52:
      case 54:
        v131 = *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32);
        v132 = (llvm::APInt *)(v131 + 24);
        v133 = *(_DWORD *)(v131 + 32);
        if ((_DWORD)v19 == 54)
        {
          if (v133 > 0x40)
            v134 = llvm::APInt::countLeadingZerosSlowCase(v132) == v133;
          else
            v134 = *(_QWORD *)v132 == 0;
          v271 = v134;
          v272 = v271 == 0;
          v273 = 207;
        }
        else
        {
          if (v133 > 0x40)
            v224 = llvm::APInt::countLeadingZerosSlowCase(v132) == v133;
          else
            v224 = *(_QWORD *)v132 == 0;
          v274 = v224;
          v272 = v274 == 0;
          v273 = 209;
        }
        if (v272)
          v275 = v273 + 1;
        else
          v275 = v273;
        v276 = (int *)sub_1C54F95B0(v9, v8);
        if (v277)
          v278 = *v276;
        else
          v278 = 0;
        LODWORD(v518) = v278;
        LODWORD(v519) = 1;
        v279 = (int *)sub_1C54F95B0(v9, *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
        if (v280)
          v281 = *v279;
        else
          v281 = 0;
        LODWORD(v527) = v281;
        LODWORD(v529) = 0;
        v51 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*v6 + 32);
        v31 = 1;
        v52 = &v518;
        v53 = &v527;
        v54 = v6;
        v55 = v275;
        v63 = 1;
        goto LABEL_365;
      case 53:
      case 55:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 74:
      case 75:
      case 76:
      case 78:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 140:
      case 141:
      case 142:
      case 144:
      case 145:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
      case 154:
      case 155:
      case 156:
      case 157:
      case 158:
      case 159:
      case 160:
      case 161:
      case 162:
      case 165:
      case 169:
      case 170:
      case 171:
      case 172:
      case 174:
      case 175:
      case 176:
      case 177:
      case 178:
      case 179:
      case 180:
      case 181:
      case 182:
      case 183:
      case 184:
      case 185:
      case 186:
      case 187:
      case 188:
      case 189:
      case 190:
      case 191:
      case 192:
      case 193:
      case 195:
      case 198:
        goto LABEL_496;
      case 56:
        v194 = (_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
        v195 = *(unsigned __int8 **)(*v194 + 24);
        v196 = *v195;
        if (v196 > 0x22)
          goto LABEL_251;
        if (v196 == 32)
        {
          v195 = (unsigned __int8 *)**((_QWORD **)v195 + 3);
        }
        else if (((1 << v196) & 0x6FFFFFFF0) != 0)
        {
          return 1;
        }
LABEL_251:
        v197 = *((_QWORD *)v195 + 16);
        if (!v197)
          return 1;
        v198 = *(unsigned __int8 *)(v197 + 16);
        if ((v198 - 11) < 2)
          return 1;
        if (v198 == 21)
        {
          v491 = *(_QWORD **)(v9 + 864);
          v492 = *(_QWORD *)(*v491 + 112);
          if (v492)
          {
            v493 = *(unsigned int *)(v197 + 32);
            if ((v493 + 2) < *(_DWORD *)(v492 + 8))
            {
              v495 = *(_QWORD *)(v492 + 8 * (v493 + 2) + 40);
              if (v495)
              {
                if ((*(_BYTE *)(v495 + 19) & 0x40) != 0)
                {
                  LODWORD(v213) = *(_DWORD *)(*(_QWORD *)(v491[5] + 456) + 8 * v493);
                  goto LABEL_627;
                }
              }
            }
          }
        }
        else if (v198 == 59 && *(_BYTE *)(*(_QWORD *)(v197 - 32) + 16) == 16)
        {
          v199 = *(_QWORD *)(v197 + 40);
          v200 = *(_QWORD *)(*(_QWORD *)(v199 + 56) + 80);
          v201 = v200 ? v200 - 24 : 0;
          if (v199 == v201 && (*(_WORD *)(v197 + 18) & 0x40) == 0)
          {
            v202 = *(_QWORD *)(v9 + 864);
            v203 = *(_QWORD *)(v194[4] + 24);
            v204 = *(_QWORD *)(v194[8] + 24);
            v205 = sub_1C54FB420(v9, v197);
            v206 = *(const void **)(v8 + 48);
            v527 = v203;
            v518 = v204;
            v517 = v205;
            v550 = v206;
            sub_1C62708E4(v202 + 768, &v527, &v518, &v517, (uint64_t *)&v550);
            return 1;
          }
        }
        v494 = (_DWORD *)sub_1C54F95B0(v9, v197);
        if (v213)
          LODWORD(v213) = *v494;
        v194 = (_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
LABEL_627:
        v210 = *(_QWORD *)(v194[4] + 24);
        v211 = *(_QWORD *)(v194[8] + 24);
        v212 = (uint64_t)v6;
        goto LABEL_265;
      case 57:
        sub_1C627532C((uint64_t)v6, *(_QWORD *)(*(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)) + 24));
        return 1;
      case 58:
        v208 = (_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
        v209 = *(unsigned __int8 **)(*v208 + 24);
        if (*v209 - 4 < 0x1F || (v445 = *((_QWORD *)v209 + 16)) == 0)
        {
          v210 = *(_QWORD *)(v208[4] + 24);
          v211 = *(_QWORD *)(v208[8] + 24);
          v212 = (uint64_t)v6;
          LODWORD(v213) = 0;
LABEL_265:
          sub_1C62752D0(v212, v213, v210, v211);
          return 1;
        }
        if (*(unsigned __int8 *)(v445 + 16) <= 0x14u)
        {
          sub_1C5543B24(v6, v445, *(_QWORD *)(v208[4] + 24), *(_QWORD *)(v208[8] + 24));
          return 1;
        }
        v446 = sub_1C54F95B0(v9, v445);
        if (!v447)
          return 1;
        v448 = (int *)v446;
        v449 = 4 * v447;
        do
        {
          v450 = *v448++;
          v451 = v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF);
          sub_1C55439CC((uint64_t)v6, v450, *(_QWORD *)(*(_QWORD *)(v451 + 32) + 24), *(_QWORD *)(*(_QWORD *)(v451 + 64) + 24));
          v31 = 1;
          v449 -= 4;
        }
        while (v449);
        return v31;
      case 59:
LABEL_150:
        v107 = *(_QWORD *)(v8 + 64);
        if (!v107)
          goto LABEL_496;
        if (!*(_DWORD *)(v107 + 8))
          goto LABEL_496;
        v108 = *(_QWORD *)(v107 + 40);
        if (!v108)
          goto LABEL_496;
        v109 = *(_DWORD *)(v108 + 40);
        if (!v109)
          goto LABEL_496;
        v110 = *(_QWORD *)(v108 + 24);
        v111 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
        if ((v111 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
        {
          v505 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v505 = 0xFF51AFD7ED558CCDLL;
          qword_1ED7EAC80 = v505;
          __cxa_guard_release(&qword_1ED7EAC88);
        }
        v112 = 0x9DDFEA08EB382D69
             * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xD478F398F5D9C7F9)) ^ ((0x9DDFEA08EB382D69
                                                                                    * (qword_1ED7EAC80 ^ 0xD478F398F5D9C7F9)) >> 47) ^ 0xBA0D95B585B8B58DLL);
        v113 = (-348639895 * ((v112 >> 47) ^ v112)) ^ 0x2D636E75;
        v114 = 1;
        while (2)
        {
          v115 = v113 & (v109 - 1);
          v116 = v110 + 24 * v115;
          v117 = *(_QWORD **)v116;
          if (*(_QWORD *)v116 == -1)
          {
            if ("trap-func-name" != (char *)-1)
              goto LABEL_158;
LABEL_169:
            v119 = *(_QWORD *)(v116 + 16);
            if (v119 && *(_DWORD *)(v119 + 16))
            {
              v120 = v119 + *(unsigned int *)(v119 + 12) + 25;
              LODWORD(v527) = 0;
              LODWORD(v528) = v528 & 0xFFF00000 | 1;
              v529 = 0u;
              v531 = 0;
              v532[0] = v533;
              v532[1] = (void *)0x400000000;
              v534 = 0;
              v535[0] = v536;
              v535[1] = (void *)0x400000000;
              v537[0] = &v538;
              v537[1] = (void *)0x200000000;
              v539 = 0;
              v541 = (char *)v543;
              v542 = 0x2000000000;
              v543[1216] = 0;
              v546 = 0;
              v544 = 0u;
              v545 = 0;
              v547 = 0;
              v548 = 1;
              v549 = 0;
              if ((_DWORD)v19 == 302)
              {
                v121 = (_BYTE *)sub_1C54F95B0(v9, *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
                sub_1C4860878((uint64_t)&v518, v121, v122, **(_QWORD **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)), 0, 0, 0, 1, 0);
                v123 = sub_1C4861E4C((uint64_t)&v541, (unint64_t)&v518, 1);
                sub_1C54F552C((uint64_t)&v541[152 * v542], v123);
                LODWORD(v542) = v542 + 1;
                if (v524 != v525)
                  free(v524);
                if (v522 != v523)
                  free(v522);
                if (v519 != v521)
                  free(v519);
              }
              v528 = 9;
              *(_QWORD *)&v529 = 0;
              *((_QWORD *)&v529 + 1) = v120;
              LODWORD(v530) = 0;
              *(_QWORD *)&v544 = v8;
              LODWORD(v550) = 0;
              sub_1C4860878((uint64_t)&v518, &v550, 1, ***(_QWORD ***)v8 + 1576, 0, 0, 0, 1, 0);
              v531 = v518;
              sub_1C48620A0((uint64_t)v532, (uint64_t)&v519);
              v534 = v521[48];
              sub_1C48621E4((uint64_t)v535, (uint64_t)&v522);
              sub_1C48621E4((uint64_t)v537, (uint64_t)&v524);
              v539 = v525[1];
              v540 = v526;
              if (v524 != v525)
                free(v524);
              if (v522 != v523)
                free(v522);
              if (v519 != v521)
                free(v519);
              v124 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t *))(**(_QWORD **)(v9 + 248) + 72))(*(_QWORD *)(v9 + 248), v6, &v527);
              v125 = v541;
              if ((_DWORD)v542)
              {
                v126 = 152 * v542;
                do
                {
                  v127 = &v125[v126];
                  v128 = *(char **)&v125[v126 - 40];
                  if (&v125[v126 - 24] != v128)
                    free(v128);
                  v129 = (char *)*((_QWORD *)v127 - 9);
                  if (v127 - 56 != v129)
                    free(v129);
                  v130 = *(char **)&v125[v126 - 144];
                  if (&v125[v126 - 128] != v130)
                    free(v130);
                  v126 -= 152;
                }
                while (v126);
                v125 = v541;
              }
              if (v125 != (char *)v543)
                free(v125);
              if (v537[0] != &v538)
                free(v537[0]);
              if (v535[0] != v536)
                free(v535[0]);
              if (v532[0] == v533)
              {
                if ((v124 & 1) != 0)
                  return 1;
              }
              else
              {
                free(v532[0]);
                if ((v124 & 1) != 0)
                  return 1;
              }
            }
            goto LABEL_496;
          }
          if (v117 == (_QWORD *)-2)
          {
            if ("trap-func-name" == (char *)-2)
              goto LABEL_169;
          }
          else if (*(_QWORD *)(v116 + 8) == 14
                 && *v117 == 0x6E75662D70617274
                 && *(_QWORD *)((char *)v117 + 6) == 0x656D616E2D636E75)
          {
            goto LABEL_169;
          }
LABEL_158:
          if (v117 != (_QWORD *)-1)
          {
            v113 = v114 + v115;
            ++v114;
            continue;
          }
          goto LABEL_496;
        }
      case 73:
        TypeInfo = llvm::ExtractTypeInfo(*(llvm **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)), v15);
        v453 = (int *)sub_1C54F95B0(v9, v8);
        if (v454)
          v455 = *v453;
        else
          v455 = 0;
        TypeIDFor = llvm::MachineFunction::getTypeIDFor(*(llvm::MachineFunction **)(v9 + 864), TypeInfo);
        v31 = 1;
        LODWORD(v527) = v455;
        LODWORD(v528) = 1;
        sub_1C5544694((uint64_t)v6, (unint64_t *)&v527, TypeIDFor);
        return v31;
      case 77:
      case 166:
        goto LABEL_79;
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
        ExceptionBehavior = llvm::ConstrainedFPIntrinsic::getExceptionBehavior((llvm::ConstrainedFPIntrinsic *)v8);
        v36 = *(_DWORD *)(*(_QWORD *)(v8 - 32) + 36);
        v37 = 225;
        switch(v36)
        {
          case 'S':
            break;
          case 'T':
          case 'U':
          case 'W':
          case 'Z':
          case '[':
          case '\\':
          case ']':
          case '^':
            goto LABEL_496;
          case 'V':
            v37 = 228;
            break;
          case 'X':
            v37 = 230;
            break;
          case 'Y':
            v37 = 227;
            break;
          case '_':
            v37 = 229;
            break;
            v37 = 226;
            break;
          default:
            if (v36 != 116)
              goto LABEL_496;
            v37 = 231;
            break;
        }
        v84 = llvm::MachineInstr::copyFlagsFromInstruction(v8);
        if (ExceptionBehavior)
          v85 = v84;
        else
          v85 = v84 | 0x4000;
        v527 = (uint64_t)&v529;
        v528 = 0x400000000;
        v86 = (int *)sub_1C54F95B0(v9, *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
        if (v87)
          v88 = *v86;
        else
          v88 = 0;
        LODWORD(v518) = v88;
        v520 = 0;
        v89 = sub_1C4926708((uint64_t)&v527, (unint64_t)&v518, 1);
        v90 = v527 + 24 * v528;
        v91 = *(_OWORD *)v89;
        *(_QWORD *)(v90 + 16) = *(_QWORD *)(v89 + 16);
        *(_OWORD *)v90 = v91;
        LODWORD(v528) = v528 + 1;
        if ((llvm::ConstrainedFPIntrinsic::isUnaryOp((llvm::ConstrainedFPIntrinsic *)v8) & 1) == 0)
        {
          v92 = (int *)sub_1C54F95B0(v9, *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
          if (v93)
            v94 = *v92;
          else
            v94 = 0;
          LODWORD(v518) = v94;
          v520 = 0;
          v95 = sub_1C4926708((uint64_t)&v527, (unint64_t)&v518, 1);
          v96 = v527 + 24 * v528;
          v97 = *(_OWORD *)v95;
          *(_QWORD *)(v96 + 16) = *(_QWORD *)(v95 + 16);
          *(_OWORD *)v96 = v97;
          LODWORD(v528) = v528 + 1;
        }
        if ((*(_DWORD *)(*(_QWORD *)(v8 - 32) + 36) & 0xFFFFFFFD) == 0x58)
        {
          v98 = (int *)sub_1C54F95B0(v9, *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 64));
          if (v99)
            v100 = *v98;
          else
            v100 = 0;
          LODWORD(v518) = v100;
          v520 = 0;
          v101 = sub_1C4926708((uint64_t)&v527, (unint64_t)&v518, 1);
          v102 = v527 + 24 * v528;
          v103 = *(_OWORD *)v101;
          *(_QWORD *)(v102 + 16) = *(_QWORD *)(v101 + 16);
          *(_OWORD *)v102 = v103;
          LODWORD(v528) = v528 + 1;
        }
        v104 = (int *)sub_1C54F95B0(v9, v8);
        if (v105)
          v106 = *v104;
        else
          v106 = 0;
        LODWORD(v518) = v106;
        LODWORD(v519) = 1;
        (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t, _QWORD, uint64_t))(*v6 + 32))(v6, v37, &v518, 1, v527, v528, v85 | 0x100000000);
        v83 = (__int128 *)v527;
        if ((__int128 *)v527 == &v529)
          return 1;
        goto LABEL_122;
      case 126:
      case 163:
        return v31;
      case 143:
        v182 = *(_QWORD *)(v9 + 864);
        v183 = *(_QWORD *)(v182 + 8);
        v184 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v182 + 16) + 120))(*(_QWORD *)(v182 + 16));
        v185 = (int *)sub_1C54F95B0(v9, v8);
        if (v186)
          v187 = *v185;
        else
          v187 = 0;
        v282 = (int *)sub_1C54F95B0(v9, *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
        if (v283)
          v284 = *v282;
        else
          v284 = 0;
        v285 = (int *)sub_1C54F95B0(v9, *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
        if (v286)
          v287 = *v285;
        else
          v287 = 0;
        v288 = (int *)sub_1C54F95B0(v9, *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 64));
        if (v290)
          v291 = *v288;
        else
          v291 = 0;
        if (*(_DWORD *)(v183 + 1104) == 2
          || (v292 = *(_QWORD *)(v9 + 864),
              v293 = sub_1C47A7FD0(v184, *(_QWORD *)(v9 + 880), *(_QWORD *)v8, 0),
              !(*(unsigned int (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v184 + 1336))(v184, v292, v293, v294)))
        {
          LLTForType = llvm::getLLTForType(*(llvm **)v8, *(llvm::Type **)(v9 + 880), v289);
          v297 = llvm::MachineInstr::copyFlagsFromInstruction(v8);
          v518 = LLTForType;
          LODWORD(v519) = 0;
          LODWORD(v527) = v284;
          LODWORD(v529) = 0;
          DWORD2(v529) = v287;
          LODWORD(v531) = 0;
          v298 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 165, &v518, 1, &v527, 2, v297 | 0x100000000);
          v300 = v299;
          v301 = llvm::MachineInstr::copyFlagsFromInstruction(v8);
          LODWORD(v518) = v187;
          LODWORD(v519) = 1;
          v527 = v298;
          v528 = v300;
          LODWORD(v529) = 1;
          DWORD2(v529) = v291;
          LODWORD(v531) = 0;
          (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 163, &v518, 1, &v527, 2, v301 | 0x100000000);
          return 1;
        }
        else
        {
          v295 = llvm::MachineInstr::copyFlagsFromInstruction(v8) | 0x100000000;
          LODWORD(v518) = v187;
          LODWORD(v519) = 1;
          LODWORD(v527) = v284;
          LODWORD(v529) = 0;
          DWORD2(v529) = v287;
          LODWORD(v531) = 0;
          LODWORD(v532[0]) = v291;
          v533[0] = 0;
          (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 166, &v518, 1, &v527, 3, v295);
          return 1;
        }
      case 146:
        v188 = llvm::MachineInstr::copyFlagsFromInstruction(v8);
        v189 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32) + 24) + 8);
        v190 = llvm::convertStrToRoundingMode(v189 + 3, *v189);
        v191 = (int *)sub_1C54F95B0(v9, v8);
        if (v192)
          v193 = *v191;
        else
          v193 = 0;
        v31 = 1;
        LODWORD(v550) = v193;
        v551 = 1;
        v302 = (int *)sub_1C54F95B0(v9, *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
        if (v303)
          v304 = *v302;
        else
          v304 = 0;
        LODWORD(v518) = v304;
        v520 = 0;
        v267 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t *, uint64_t, const void **, uint64_t, uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 84, &v550, 1, &v518, 1, v188 | 0x100000000);
        v269 = v305;
        LODWORD(v527) = 1;
        v270 = v190;
LABEL_388:
        v528 = 0;
        *(_QWORD *)&v529 = v270;
        llvm::MachineInstr::addOperand(v269, v267, (const llvm::MachineOperand *)&v527);
        return v31;
      case 164:
        v207 = llvm::getLLTForType(**(llvm ***)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)), *(llvm::Type **)(v9 + 880), v16);
        v31 = 1;
        LODWORD(v527) = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(v9 + 872), v207, "", 0);
        LODWORD(v528) = 1;
        v51 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*v6 + 32);
        v52 = &v527;
        v54 = v6;
        v55 = 68;
        v53 = 0;
        v63 = 0;
LABEL_365:
        v56 = 0;
        goto LABEL_103;
      case 167:
      case 168:
        if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 864) + 8) + 552))
          return 1;
        if ((_DWORD)v19 == 168)
          v135 = 21;
        else
          v135 = 22;
        v527 = (uint64_t)&v529;
        v528 = 0x400000000;
        llvm::getUnderlyingObjects(*(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32), (uint64_t)&v527, 0, (llvm::Value *)6);
        v136 = (__int128 *)v527;
        if (!(_DWORD)v528)
          goto LABEL_317;
        v137 = (__int128 *)(v527 + 8 * v528);
        while (2)
        {
          v138 = *(_QWORD *)v136;
          if (!*(_QWORD *)v136 || *(_BYTE *)(v138 + 16) != 59)
            goto LABEL_217;
          if (*(_BYTE *)(*(_QWORD *)(v138 - 32) + 16) == 16)
          {
            v139 = *(_QWORD *)(v138 + 40);
            v140 = *(_QWORD *)(*(_QWORD *)(v139 + 56) + 80);
            v141 = v140 ? v140 - 24 : 0;
            if (v139 == v141 && (*(_WORD *)(v138 + 18) & 0x40) == 0)
            {
              v143 = sub_1C55437B8(v6, v135);
              v144 = (unint64_t *)v142;
              v145 = (unint64_t *)v6[6];
              v146 = *(_QWORD *)(v6[5] + 40);
              *(_QWORD *)(v142 + 24) = v146;
              v147 = *(_QWORD *)(v146 + 32);
              v148 = *(unsigned int *)(v142 + 40);
              if ((_DWORD)v148)
              {
                v153 = *(_QWORD *)(v142 + 32);
                v154 = *(_QWORD *)(v147 + 40);
                v155 = 32 * v148;
                do
                {
                  if (!*(_BYTE *)v153)
                  {
                    v156 = *(unsigned int *)(v153 + 4);
                    if ((int)v156 >= 0)
                      v157 = (uint64_t *)(*(_QWORD *)(v154 + 272) + 8 * v156);
                    else
                      v157 = (uint64_t *)(*(_QWORD *)(v154 + 24) + 16 * (v156 & 0x7FFFFFFF) + 8);
                    v158 = *v157;
                    if (*v157)
                    {
                      v159 = *(_QWORD *)(v158 + 16);
                      *(_QWORD *)(v158 + 16) = v153;
                      *(_QWORD *)(v153 + 16) = v159;
                      if ((*(_BYTE *)(v153 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v153 + 24) = v158;
                      }
                      else
                      {
                        *(_QWORD *)(v153 + 24) = 0;
                        v157 = (uint64_t *)(v159 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v153 + 16) = v153;
                      *(_QWORD *)(v153 + 24) = 0;
                    }
                    *v157 = v153;
                  }
                  v153 += 32;
                  v155 -= 32;
                }
                while (v155);
              }
              v149 = *(_QWORD *)(v147 + 728);
              if (v149)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v149 + 24))(v149, v142);
              v150 = *v145 & 0xFFFFFFFFFFFFFFF8;
              *v144 = v150 | *v144 & 7;
              v144[1] = (unint64_t)v145;
              *(_QWORD *)(v150 + 8) = v144;
              *v145 = *v145 & 7 | (unint64_t)v144;
              v151 = v6[7];
              if (v151)
                (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v151 + 24))(v151, v144);
              v152 = sub_1C54FB420(v9, v138);
              LODWORD(v518) = 5;
              v519 = 0;
              v520 = v152;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v144, v143, (const llvm::MachineOperand *)&v518);
LABEL_217:
              v136 = (__int128 *)((char *)v136 + 8);
              if (v136 == v137)
                break;
              continue;
            }
          }
          break;
        }
        v136 = (__int128 *)v527;
LABEL_317:
        if (v136 == &v529)
          return 1;
        v83 = v136;
        goto LABEL_122;
      case 173:
        v214 = *(uint64_t *****)(v9 + 864);
        v215 = *v214;
        if ((*((_BYTE *)*v214 + 23) & 0x10) == 0)
        {
          v513 = 0;
          v356 = &byte_1C871356D;
          goto LABEL_449;
        }
        v216 = ***v215;
        v217 = *(_QWORD *)(v216 + 152);
        v218 = *(unsigned int *)(v216 + 168);
        if (!(_DWORD)v218)
          goto LABEL_442;
        LODWORD(v219) = (v218 - 1) & ((v215 >> 4) ^ (v215 >> 9));
        v220 = (uint64_t ****)(v217 + 16 * v219);
        v221 = *v220;
        if (*v220 == v215)
          goto LABEL_443;
        v222 = 1;
        while (v221 != (uint64_t ***)-4096)
        {
          v223 = v219 + v222++;
          v219 = v223 & (v218 - 1);
          v221 = *(uint64_t ****)(v217 + 16 * v219);
          if (v221 == v215)
          {
            v220 = (uint64_t ****)(v217 + 16 * v219);
            goto LABEL_443;
          }
        }
LABEL_442:
        v220 = (uint64_t ****)(v217 + 16 * v218);
LABEL_443:
        v354 = v220[1];
        v357 = (uint64_t)*v354;
        v356 = (char *)(v354 + 2);
        v355 = v357;
        if (v357)
        {
          v358 = *v356;
          if (v358 == 1)
            --v355;
          v513 = v355;
          if (v358 == 1)
            v356 = (char *)v220[1] + 17;
        }
        else
        {
          v513 = 0;
        }
LABEL_449:
        v515 = (llvm::MachineFunction *)v356;
        v359 = *(unsigned __int8 *)(v8 + 16);
        if (v359 == 84)
        {
          v360 = 0;
        }
        else if (v359 == 39)
        {
          v360 = (*(_DWORD *)(v8 + 80) + 1);
        }
        else
        {
          v360 = 2;
        }
        v361 = 0;
        v362 = *(_DWORD *)(v8 + 20);
        v363 = -(uint64_t)(v362 & 0x7FFFFFF);
        if (v362 < 0)
        {
          v507 = v8 - 32 * (v362 & 0x7FFFFFF);
          v508 = *(_QWORD *)(v507 - 8);
          if ((v508 & 0xFFFFFFFF0) != 0)
            v361 = (*(_DWORD *)(v507 - 12) - *(_DWORD *)(v507 - v508));
          else
            v361 = 0;
        }
        v364 = -32 * v360 - 32 * v361 - 32 * v363 - 32;
        if ((v364 & 0x1FFFFFFFE0) == 0)
          return 1;
        v365 = 0;
        v511 = v214[41];
        v366 = (v364 >> 5);
        do
        {
          v367 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v8
                                                                - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)
                                                                + 32 * v365));
          if (*((_BYTE *)v367 + 16) != 19)
          {
            v368 = sub_1C54FB420(v9, (uint64_t)v367);
            v369 = *(_QWORD *)(*(_QWORD *)(v9 + 864) + 32);
            v370 = *(_QWORD *)(v369 + 2056);
            v371 = v369 + 8;
            if (v370)
              v372 = v370;
            else
              v372 = v371;
            FrameAllocSymbol = llvm::MCContext::getOrCreateFrameAllocSymbol(v372, (uint64_t)v515, v513, v365);
            v374 = sub_1C55437B8(v6, 0x20u);
            v376 = v375;
            v528 = 0;
            *(_QWORD *)&v529 = FrameAllocSymbol;
            DWORD2(v529) = 0;
            v527 = 15;
            llvm::MachineInstr::addOperand(v375, v374, (const llvm::MachineOperand *)&v527);
            v528 = 0;
            LODWORD(v527) = 5;
            LODWORD(v529) = v368;
            llvm::MachineInstr::addOperand(v376, v374, (const llvm::MachineOperand *)&v527);
            v377 = (uint64_t *)v511[7];
            v378 = v511[5];
            *((_QWORD *)v376 + 3) = v378;
            v379 = v378[4];
            v380 = *((unsigned int *)v376 + 10);
            if ((_DWORD)v380)
            {
              v383 = *((_QWORD *)v376 + 4);
              v384 = v379[5];
              v385 = 32 * v380;
              do
              {
                if (!*(_BYTE *)v383)
                {
                  v386 = *(unsigned int *)(v383 + 4);
                  if ((int)v386 >= 0)
                    v387 = (uint64_t *)(*(_QWORD *)(v384 + 272) + 8 * v386);
                  else
                    v387 = (uint64_t *)(*(_QWORD *)(v384 + 24) + 16 * (v386 & 0x7FFFFFFF) + 8);
                  v388 = *v387;
                  if (*v387)
                  {
                    v389 = *(_QWORD *)(v388 + 16);
                    *(_QWORD *)(v388 + 16) = v383;
                    *(_QWORD *)(v383 + 16) = v389;
                    if ((*(_BYTE *)(v383 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v383 + 24) = v388;
                    }
                    else
                    {
                      *(_QWORD *)(v383 + 24) = 0;
                      v387 = (uint64_t *)(v389 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v383 + 16) = v383;
                    *(_QWORD *)(v383 + 24) = 0;
                  }
                  *v387 = v383;
                }
                v383 += 32;
                v385 -= 32;
              }
              while (v385);
            }
            v381 = v379[91];
            if (v381)
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(_QWORD *)v381 + 24))(v381, v376);
            v382 = *v377 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v376 = v382 | *(_QWORD *)v376 & 7;
            *((_QWORD *)v376 + 1) = v377;
            *(_QWORD *)(v382 + 8) = v376;
            *v377 = *v377 & 7 | (unint64_t)v376;
          }
          ++v365;
          v31 = 1;
        }
        while (v365 != v366);
        return v31;
      case 194:
        v178 = v9;
        v179 = v8;
        v180 = v6;
        v181 = 234;
        goto LABEL_268;
      case 196:
        v178 = v9;
        v179 = v8;
        v180 = v6;
        v181 = 235;
        goto LABEL_268;
      case 197:
        v178 = v9;
        v179 = v8;
        v180 = v6;
        v181 = 236;
        goto LABEL_268;
      case 199:
        v178 = v9;
        v179 = v8;
        v180 = v6;
        v181 = 237;
LABEL_268:
        sub_1C54FFBA0(v178, v179, v180, v181);
        return 1;
      default:
        switch((int)v19)
        {
          case 245:
          case 290:
            goto LABEL_79;
          case 246:
          case 247:
          case 248:
          case 250:
          case 251:
          case 252:
          case 253:
          case 256:
          case 257:
          case 258:
          case 259:
          case 260:
          case 261:
          case 266:
          case 267:
          case 268:
          case 269:
          case 270:
          case 271:
          case 273:
          case 279:
          case 280:
          case 281:
          case 289:
          case 291:
          case 292:
          case 293:
          case 294:
          case 296:
          case 297:
          case 298:
          case 299:
          case 313:
          case 317:
          case 318:
          case 320:
          case 321:
            goto LABEL_496;
          case 249:
            v235 = (uint64_t *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
            v236 = *v235;
            v514 = (llvm::MachineFunction *)v235[4];
            v237 = v235[8];
            v238 = *(unsigned __int8 *)(*v235 + 16);
            if (v238 == 75 || v238 == 5 && *(_WORD *)(v236 + 18) == 47)
            {
              v239 = *(_DWORD *)(v236 + 20);
              if ((v239 & 0x40000000) != 0)
                v240 = *(uint64_t **)(v236 - 8);
              else
                v240 = (uint64_t *)(v236 - 32 * (v239 & 0x7FFFFFF));
              v236 = *v240;
            }
            v317 = *(llvm::DataLayout **)(v9 + 880);
            v551 = *(_DWORD *)(*((_QWORD *)v317 + 29) + 4);
            if (v551 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v550, 0, 0);
              v317 = *(llvm::DataLayout **)(v9 + 880);
            }
            else
            {
              v550 = 0;
            }
            v318 = llvm::Value::stripAndAccumulateConstantOffsets(v236, v317, &v550, 1, 0, 0, v17);
            v321 = 0;
            v322 = *(unsigned __int8 *)(v318 + 16);
            if (v322 > 3)
              goto LABEL_492;
            if (v322 != 3 || (*(_BYTE *)(v318 + 34) & 0x40) == 0)
              goto LABEL_417;
            v323 = ***(_QWORD ***)v318;
            v527 = v318;
            v324 = *(_DWORD *)(v323 + 2520);
            if (v324)
            {
              v325 = *(_QWORD *)(v323 + 2504);
              v326 = v324 - 1;
              v327 = (v324 - 1) & ((v318 >> 4) ^ (v318 >> 9));
              v328 = (_QWORD *)(v325 + 24 * v327);
              v329 = *v328;
              if (*v328 == v318)
                goto LABEL_412;
              v473 = 0;
              v474 = 1;
              while (v329 != -4096)
              {
                if (v473)
                  v475 = 0;
                else
                  v475 = v329 == -8192;
                if (v475)
                  v473 = v328;
                v476 = v327 + v474++;
                v327 = v476 & v326;
                v328 = (_QWORD *)(v325 + 24 * (v476 & v326));
                v329 = *v328;
                if (*v328 == v318)
                {
LABEL_412:
                  if (v328[2] == 12
                    && ((v330 = (uint64_t *)v328[1],
                         v331 = *v330,
                         v332 = *((_DWORD *)v330 + 2),
                         v331 == 0x7274702E6D766C6CLL)
                      ? (v333 = v332 == 1752462689)
                      : (v333 = 0),
                        v333))
                  {
                    v321 = 0;
                  }
                  else
                  {
LABEL_417:
                    v334 = *(unsigned __int8 *)(v237 + 16);
                    if (v334 == 16)
                      v335 = v237;
                    else
                      v335 = 0;
                    v512 = v335;
                    if (v334 != 84)
                      goto LABEL_429;
                    v336 = *(_QWORD *)(v237 - 32);
                    if (!v336)
                      goto LABEL_430;
                    if (!*(_BYTE *)(v336 + 16)
                      && *(_QWORD *)(v336 + 24) == *(_QWORD *)(v237 + 72)
                      && (*(_BYTE *)(v336 + 33) & 0x20) != 0
                      && *(_DWORD *)(v336 + 36) == 247)
                    {
                      v337 = (uint64_t *)(v237 - 32 * (*(_DWORD *)(v237 + 20) & 0x7FFFFFF));
                      v338 = v337[4];
                      if (*(_BYTE *)(v338 + 16) != 16)
                        v338 = 0;
                      v512 = v338;
                      v336 = *v337;
                    }
                    else
                    {
LABEL_429:
                      v336 = 0;
                    }
LABEL_430:
                    if (!v512)
                      v336 = v237;
                    NullValue = (llvm::Value **)v336;
                    if (!v336)
                      NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)v237, v319);
                    v339 = *(_QWORD *)(v9 + 872);
                    v340 = llvm::getLLTForType(*(llvm **)v236, *(llvm::Type **)(v9 + 880), v320);
                    GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v339, v340, "", 0);
                    v342 = sub_1C55437B8(v6, 0x48u);
                    v343 = (unint64_t *)v341;
                    v344 = (unint64_t *)v6[6];
                    v345 = *(_QWORD *)(v6[5] + 40);
                    *(_QWORD *)(v341 + 24) = v345;
                    v346 = *(_QWORD *)(v345 + 32);
                    v347 = *(unsigned int *)(v341 + 40);
                    if ((_DWORD)v347)
                    {
                      v477 = *(_QWORD *)(v341 + 32);
                      v478 = *(_QWORD *)(v346 + 40);
                      v479 = 32 * v347;
                      do
                      {
                        if (!*(_BYTE *)v477)
                        {
                          v480 = *(unsigned int *)(v477 + 4);
                          if ((int)v480 >= 0)
                            v481 = (uint64_t *)(*(_QWORD *)(v478 + 272) + 8 * v480);
                          else
                            v481 = (uint64_t *)(*(_QWORD *)(v478 + 24) + 16 * (v480 & 0x7FFFFFFF) + 8);
                          v482 = *v481;
                          if (*v481)
                          {
                            v483 = *(_QWORD *)(v482 + 16);
                            *(_QWORD *)(v482 + 16) = v477;
                            *(_QWORD *)(v477 + 16) = v483;
                            if ((*(_BYTE *)(v477 + 3) & 1) != 0)
                            {
                              *(_QWORD *)(v477 + 24) = v482;
                            }
                            else
                            {
                              *(_QWORD *)(v477 + 24) = 0;
                              v481 = (uint64_t *)(v483 + 24);
                            }
                          }
                          else
                          {
                            *(_QWORD *)(v477 + 16) = v477;
                            *(_QWORD *)(v477 + 24) = 0;
                          }
                          *v481 = v477;
                        }
                        v477 += 32;
                        v479 -= 32;
                      }
                      while (v479);
                    }
                    v348 = *(_QWORD *)(v346 + 728);
                    if (v348)
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v348 + 24))(v348, v341);
                    v349 = *v344 & 0xFFFFFFFFFFFFFFF8;
                    *v343 = v349 | *v343 & 7;
                    v343[1] = (unint64_t)v344;
                    *(_QWORD *)(v349 + 8) = v343;
                    *v344 = *v344 & 7 | (unint64_t)v343;
                    v350 = v6[7];
                    if (v350)
                      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v350 + 24))(v350, v343);
                    v528 = 0;
                    v529 = 0uLL;
                    LODWORD(v527) = 0x1000000;
                    HIDWORD(v527) = GenericVirtualRegister;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v343, v342, (const llvm::MachineOperand *)&v527);
                    v351 = (int *)sub_1C54F95B0(v9, v236);
                    if (v352)
                      v353 = *v351;
                    else
                      v353 = 0;
                    v528 = 0;
                    v529 = 0uLL;
                    LODWORD(v527) = 0;
                    HIDWORD(v527) = v353;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v343, v342, (const llvm::MachineOperand *)&v527);
                    v390 = (_QWORD *)((char *)v514 + 24);
                    if (*((_DWORD *)v514 + 8) >= 0x41u)
                      v390 = (_QWORD *)*v390;
                    v391 = (_QWORD *)*v390;
                    LODWORD(v527) = 1;
                    v528 = 0;
                    *(_QWORD *)&v529 = v391;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v343, v342, (const llvm::MachineOperand *)&v527);
                    v392 = (int *)sub_1C54F95B0(v9, NullValue);
                    if (v393)
                      v394 = *v392;
                    else
                      v394 = 0;
                    v528 = 0;
                    v529 = 0uLL;
                    LODWORD(v527) = 0;
                    HIDWORD(v527) = v394;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v343, v342, (const llvm::MachineOperand *)&v527);
                    if (v512)
                    {
                      v395 = (_QWORD *)(v512 + 24);
                      if (*(_DWORD *)(v512 + 32) >= 0x41u)
                        v395 = (_QWORD *)*v395;
                      v396 = (_QWORD *)*v395;
                    }
                    else
                    {
                      v396 = 0;
                    }
                    v321 = 1;
                    LODWORD(v527) = 1;
                    v528 = 0;
                    *(_QWORD *)&v529 = v396;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v343, v342, (const llvm::MachineOperand *)&v527);
                    v397 = (int *)sub_1C54F95B0(v9, v8);
                    if (v398)
                      v399 = *v397;
                    else
                      v399 = 0;
                    LODWORD(v518) = v399;
                    LODWORD(v519) = 1;
                    LODWORD(v527) = GenericVirtualRegister;
                    LODWORD(v529) = 0;
                    (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*v6 + 32))(v6, 80, &v518, 1, &v527, 1, 0);
                  }
LABEL_492:
                  if (v551 >= 0x41 && v550)
                    MEMORY[0x1CAA32F9C](v550, 0x1000C8000313F17);
                  if ((v321 & 1) == 0)
                  {
LABEL_496:
                    if (*(_BYTE *)(*(_QWORD *)v8 + 8) == 7)
                    {
                      v400 = 0;
                      v401 = 0;
                    }
                    else
                    {
                      v400 = (int *)sub_1C54F95B0(v9, v8);
                      v401 = v402;
                    }
                    v403 = *(_QWORD *)(v12 + 112);
                    if (v403)
                      v404 = (*(_BYTE *)(v403 + 17) & 0x10) == 0;
                    else
                      v404 = 1;
                    v516 = sub_1C5547D24(v6, v19, v400, v401, v404);
                    v406 = v405;
                    if (sub_1C4774A9C(v8))
                      *((_WORD *)v406 + 22) = llvm::MachineInstr::copyFlagsFromInstruction(v8);
                    v407 = *(_DWORD *)(v8 + 20);
                    v408 = v407 & 0x7FFFFFF;
                    v409 = *(unsigned __int8 *)(v8 + 16);
                    if (v409 == 84)
                    {
                      v410 = 0;
                    }
                    else if (v409 == 39)
                    {
                      v410 = (*(_DWORD *)(v8 + 80) + 1);
                    }
                    else
                    {
                      v410 = 2;
                    }
                    v411 = v8 - 32 * v408;
                    if (v407 < 0 && (v506 = *(_QWORD *)(v411 - 8), (v506 & 0xFFFFFFFF0) != 0))
                      v412 = (*(_DWORD *)(v411 - 12) - *(_DWORD *)(v411 - v506));
                    else
                      v412 = 0;
                    if (v411 != v8 - 32 * v410 - 32 * v412 - 32)
                    {
                      v413 = 0;
                      v414 = (32 * v410 + 32 * v412) ^ 0xFFFFFFFFFFFFFFE0;
                      v415 = -32 * v408;
                      do
                      {
                        HasAttr = llvm::CallBase::paramHasAttr(v8, v413, 9);
                        v417 = *(_QWORD *)(v8 + v415);
                        v418 = *(unsigned __int8 *)(v417 + 16);
                        if (HasAttr)
                        {
                          if (v417)
                            v419 = v418 == 16;
                          else
                            v419 = 0;
                          if (v419)
                          {
                            v424 = *(_DWORD *)(v417 + 32);
                            if (v424 > 0x40)
                              v425 = **(_QWORD **)(v417 + 24);
                            else
                              v425 = (uint64_t)(*(_QWORD *)(v417 + 24) << -(char)v424) >> -(char)v424;
                            LODWORD(v527) = 1;
                            v528 = 0;
                            *(_QWORD *)&v529 = v425;
                          }
                          else
                          {
                            LODWORD(v527) = 3;
                            v528 = 0;
                            *(_QWORD *)&v529 = v417;
                          }
                        }
                        else
                        {
                          if (v417)
                            v420 = v418 == 23;
                          else
                            v420 = 0;
                          if (v420)
                          {
                            Impl = *(unsigned __int8 **)(v417 + 24);
                            v427 = *Impl;
                            if ((v427 - 4) >= 0x1F)
                            {
                              if (v427 != 1)
                                return 0;
                              v428 = ****(uint64_t *****)(v9 + 864);
                              v527 = *(_QWORD *)(v417 + 24);
                              Impl = (unsigned __int8 *)llvm::MDTuple::getImpl(v428, &v527, 1, 0, 1);
                            }
                            LODWORD(v527) = 14;
                            v528 = 0;
                            *(_QWORD *)&v529 = Impl;
                          }
                          else
                          {
                            v421 = (int *)sub_1C54F95B0(v9, v417);
                            if (v422 > 1)
                              return 0;
                            v423 = *v421;
                            v528 = 0;
                            LODWORD(v527) = 0;
                            HIDWORD(v527) = v423;
                            v529 = 0uLL;
                          }
                        }
                        llvm::MachineInstr::addOperand(v406, v516, (const llvm::MachineOperand *)&v527);
                        ++v413;
                        v415 += 32;
                      }
                      while (v414 != v415);
                    }
                    v429 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 864) + 16) + 120))(*(_QWORD *)(*(_QWORD *)(v9 + 864) + 16));
                    LODWORD(v527) = 0;
                    LOBYTE(v528) = 0;
                    v531 = 0;
                    v529 = 0uLL;
                    LODWORD(v532[0]) = 256;
                    LODWORD(v530) = 0;
                    if ((*(unsigned int (**)(uint64_t, uint64_t *, unint64_t, _QWORD, uint64_t))(*(_QWORD *)v429 + 472))(v429, &v527, v8, *(_QWORD *)(v9 + 864), v19))
                    {
                      v430 = *(_QWORD *)(v9 + 880);
                      llvm::EVT::getTypeForEVT((llvm::EVT *)&v528, **(llvm::LLVMContext ***)v12);
                      llvm::DataLayout::getAlignment(v430, v431);
                      if (BYTE1(v532[0]))
                        v433 = (char)v532[0];
                      else
                        v433 = v432;
                      if ((_BYTE)v528)
                      {
                        LLTForMVT = llvm::getLLTForMVT(v528);
                      }
                      else
                      {
                        v436 = sub_1C47C1C70((unsigned __int8 *)&v528) << 6;
                        if ((_DWORD)v435 == 1)
                        LLTForMVT = v436 & 0x7FFFFFFC0 | 1;
                      }
                      v437 = *(_QWORD *)(v9 + 864);
                      v438 = *((_QWORD *)&v529 + 1);
                      if (*((_QWORD *)&v529 + 1) < 8uLL)
                      {
                        v442 = 0;
                      }
                      else
                      {
                        v439 = (_DWORD *)(*((_QWORD *)&v529 + 1) & 0xFFFFFFFFFFFFFFF8);
                        if ((BYTE8(v529) & 4) != 0 || !v439)
                        {
                          v442 = v439[3];
                        }
                        else
                        {
                          v440 = *(_QWORD *)v439;
                          v441 = *(_DWORD *)(*(_QWORD *)v439 + 8);
                          if ((v441 & 0xFE) == 0x12)
                            v441 = *(_DWORD *)(**(_QWORD **)(v440 + 16) + 8);
                          v442 = v441 >> 8;
                        }
                      }
                      v443 = WORD1(v532[0]);
                      v444 = sub_1C484358C(v437 + 128, 80, 3);
                      *(_QWORD *)v444 = v438;
                      *(_QWORD *)(v444 + 8) = 0;
                      *(_DWORD *)(v444 + 16) = v442;
                      *(_BYTE *)(v444 + 20) = 0;
                      *(_QWORD *)(v444 + 24) = LLTForMVT;
                      *(_WORD *)(v444 + 32) = v443;
                      *(_BYTE *)(v444 + 34) = v433;
                      *(_OWORD *)(v444 + 40) = 0u;
                      *(_OWORD *)(v444 + 56) = 0u;
                      *(_QWORD *)(v444 + 72) = 0;
                      *(_WORD *)(v444 + 36) = 1;
                      llvm::MachineInstr::addMemOperand(v406, v516, (llvm::MachineMemOperand *)v444);
                    }
                  }
                  return 1;
                }
              }
              if (v473)
                v489 = v473;
              else
                v489 = v328;
            }
            else
            {
              v489 = 0;
            }
            v328 = sub_1C53D65B8(v323 + 2504, (uint64_t)&v527, &v527, v489);
            v490 = v527;
            v328[1] = 0;
            v328[2] = 0;
            *v328 = v490;
            goto LABEL_412;
          case 254:
          case 255:
            v41 = *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
            v42 = (int *)sub_1C54F95B0(v9, v8);
            if (v43)
              v44 = *v42;
            else
              v44 = 0;
            v31 = 1;
            LODWORD(v518) = v44;
            LODWORD(v519) = 1;
            v267 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*v6 + 32))(v6, 232, &v518, 1, 0, 0, 0);
            v269 = v268;
            v270 = *(_QWORD *)(v41 + 24);
            LODWORD(v527) = 14;
            goto LABEL_388;
          case 262:
            v228 = v9;
            v229 = 150;
            goto LABEL_315;
          case 263:
            v225 = v9;
            v226 = v8;
            v227 = 141;
            goto LABEL_307;
          case 264:
            v230 = v9;
            v231 = 159;
            goto LABEL_313;
          case 265:
            v230 = v9;
            v231 = 161;
            goto LABEL_313;
          case 272:
          case 314:
          case 316:
            return v31;
          case 274:
            v228 = v9;
            v229 = 196;
            goto LABEL_315;
          case 275:
            v228 = v9;
            v229 = 195;
            goto LABEL_315;
          case 276:
            v230 = v9;
            v231 = 155;
            goto LABEL_313;
          case 277:
            v230 = v9;
            v231 = 157;
            goto LABEL_313;
          case 278:
            v225 = v9;
            v226 = v8;
            v227 = 146;
            goto LABEL_307;
          case 282:
            v228 = v9;
            v229 = 154;
            goto LABEL_315;
          case 283:
            v228 = v9;
            v229 = 152;
            goto LABEL_315;
          case 284:
            v225 = v9;
            v226 = v8;
            v227 = 143;
            goto LABEL_307;
          case 285:
            v463 = (_DWORD *)sub_1C54F95B0(v9, v8);
            if (v464)
              LODWORD(v464) = *v463;
            sub_1C626FAE8((_QWORD *)v9, v464, (uint64_t)v6);
            return 1;
          case 286:
            v456 = llvm::getLLTForType(**(llvm ***)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)), *(llvm::Type **)(v9 + 880), v16);
            v457 = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(v9 + 872), v456, "", 0);
            sub_1C626FAE8((_QWORD *)v9, v457, (uint64_t)v6);
            v458 = *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32);
            v459 = sub_1C54FB420(v9, v458);
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 864) + 56) + 64) = v459;
            LODWORD(v527) = v457;
            LODWORD(v529) = 0;
            v460 = (int *)sub_1C54F95B0(v9, v458);
            if (v461)
              v462 = *v460;
            else
              v462 = 0;
            LODWORD(v518) = v462;
            v520 = 0;
            v484 = *(_QWORD *)(v9 + 864);
            FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v484 + 432), v459);
            v486 = (unint64_t)FixedStack | 4;
            if (FixedStack)
              v487 = *((_DWORD *)FixedStack + 3);
            else
              v487 = 0;
            v488 = sub_1C484358C(v484 + 128, 80, 3);
            *(_QWORD *)v488 = v486;
            *(_QWORD *)(v488 + 8) = 0;
            *(_DWORD *)(v488 + 16) = v487;
            *(_BYTE *)(v488 + 20) = 0;
            *(_QWORD *)(v488 + 24) = v456;
            *(_WORD *)(v488 + 32) = 6;
            *(_BYTE *)(v488 + 34) = 3;
            *(_OWORD *)(v488 + 40) = 0u;
            *(_OWORD *)(v488 + 56) = 0u;
            *(_QWORD *)(v488 + 72) = 0;
            v31 = 1;
            *(_WORD *)(v488 + 36) = 1;
            sub_1C5546848(v6, (int *)&v527, (int *)&v518, (llvm::MachineMemOperand *)v488);
            return v31;
          case 287:
            v232 = (int *)sub_1C54F95B0(v9, *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
            if (v233)
              v234 = *v232;
            else
              v234 = 0;
            v306 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 864) + 16) + 120))(*(_QWORD *)(*(_QWORD *)(v9 + 864) + 16))
                             + 88);
            if (!v306)
              goto LABEL_496;
            LODWORD(v518) = v306;
            LODWORD(v519) = 1;
            LODWORD(v527) = v234;
            goto LABEL_399;
          case 288:
            v247 = (int *)sub_1C54F95B0(v9, v8);
            if (v248)
              v249 = *v247;
            else
              v249 = 0;
            v316 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 864) + 16) + 120))(*(_QWORD *)(*(_QWORD *)(v9 + 864) + 16))
                             + 88);
            if (!v316)
              goto LABEL_496;
            LODWORD(v518) = v249;
            LODWORD(v519) = 1;
            LODWORD(v527) = v316;
LABEL_399:
            LODWORD(v529) = 0;
            (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*v6 + 32))(v6, 19, &v518, 1, &v527, 1, 0);
            return 1;
          case 295:
          case 302:
            goto LABEL_150;
          case 300:
            v228 = v9;
            v229 = 149;
            goto LABEL_315;
          case 301:
            v225 = v9;
            v226 = v8;
            v227 = 137;
            goto LABEL_307;
          case 303:
            v230 = v9;
            v231 = 160;
            goto LABEL_313;
          case 304:
            v230 = v9;
            v231 = 162;
            goto LABEL_313;
          case 305:
            v228 = v9;
            v229 = 198;
            goto LABEL_315;
          case 306:
            v228 = v9;
            v229 = 197;
            goto LABEL_315;
          case 307:
            v230 = v9;
            v231 = 156;
            goto LABEL_313;
          case 308:
            v230 = v9;
            v231 = 158;
LABEL_313:
            sub_1C55003B4(v230, v231, v8, (uint64_t)v6);
            return 1;
          case 309:
            v225 = v9;
            v226 = v8;
            v227 = 145;
            goto LABEL_307;
          case 310:
            v228 = v9;
            v229 = 153;
            goto LABEL_315;
          case 311:
            v228 = v9;
            v229 = 151;
LABEL_315:
            sub_1C54FBAA8(v228, v229, v8, (uint64_t)v6);
            return 1;
          case 312:
            v225 = v9;
            v226 = v8;
            v227 = 139;
LABEL_307:
            sub_1C55002A8(v225, v226, v227, (uint64_t)v6);
            return 1;
          case 315:
            v241 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 864) + 16) + 120))(*(_QWORD *)(*(_QWORD *)(v9 + 864) + 16));
            v242 = *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
            v243 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v241 + 632))(v241, *(_QWORD *)(v9 + 880));
            v244 = (int *)sub_1C54F95B0(v9, v242);
            if (v245)
              v246 = *v244;
            else
              v246 = 0;
            v307 = v243 >> 3;
            LODWORD(v527) = v246;
            LODWORD(v529) = 0;
            v31 = 1;
            v308 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, _QWORD, uint64_t *, uint64_t, _QWORD))(*v6 + 32))(v6, 122, 0, 0, &v527, 1, 0);
            v310 = v309;
            v311 = *(_QWORD *)(v9 + 864);
            v312 = v242 & 0xFFFFFFFFFFFFFFFBLL;
            v313 = *(_DWORD *)(*(_QWORD *)v242 + 8);
            if ((v313 & 0xFE) == 0x12)
              v313 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v242 + 16) + 8);
            v314 = v313 >> 8;
            v315 = sub_1C484358C(v311 + 128, 80, 3);
            *(_QWORD *)v315 = v312;
            *(_QWORD *)(v315 + 8) = 0;
            *(_DWORD *)(v315 + 16) = v314;
            *(_BYTE *)(v315 + 20) = 0;
            *(_QWORD *)(v315 + 24) = (v307 << 6) | 1;
            *(_WORD *)(v315 + 32) = 2;
            *(_BYTE *)(v315 + 34) = 0;
            *(_OWORD *)(v315 + 40) = 0u;
            *(_OWORD *)(v315 + 56) = 0u;
            *(_QWORD *)(v315 + 72) = 0;
            *(_WORD *)(v315 + 36) = 1;
            llvm::MachineInstr::addMemOperand(v310, v308, (llvm::MachineMemOperand *)v315);
            return v31;
          case 319:
          case 322:
            v160 = (int *)sub_1C54F95B0(v9, v8);
            if (v161)
              v162 = *v160;
            else
              v162 = 0;
            v250 = (int *)sub_1C54F95B0(v9, *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
            if (v251)
              v252 = *v250;
            else
              v252 = 0;
            v253 = (int *)sub_1C54F95B0(v9, *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
            if (v254)
              v255 = *v253;
            else
              v255 = 0;
            if ((*(_BYTE *)(v8 + 17) & 2) != 0)
            {
              v258 = (_DWORD)v19 == 319;
              if ((_DWORD)v19 == 319)
                v259 = 241;
              else
                v259 = 242;
              if (v258)
                v260 = 163;
              else
                v260 = 165;
              if (v162 < 0 && (v261 = *(_QWORD *)(v9 + 872), (v162 & 0x7FFFFFFFu) < *(_DWORD *)(v261 + 432)))
                v262 = *(_QWORD *)(*(_QWORD *)(v261 + 424) + 8 * (v162 & 0x7FFFFFFF));
              else
                v262 = 0;
              v518 = v262;
              LODWORD(v519) = 0;
              LODWORD(v527) = v255;
              LODWORD(v529) = 0;
              v263 = llvm::MachineInstr::copyFlagsFromInstruction(v8);
              v31 = 1;
              v264 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, v259, &v518, 1, &v527, 1, v263 | 0x100000000);
              LODWORD(v518) = v162;
              LODWORD(v519) = 1;
              LODWORD(v527) = v252;
              LODWORD(v529) = 0;
              *((_QWORD *)&v529 + 1) = v264;
              v530 = v265;
              LODWORD(v531) = 1;
              v266 = llvm::MachineInstr::copyFlagsFromInstruction(v8);
              (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, v260, &v518, 1, &v527, 2, v266 | 0x100000000);
            }
            else
            {
              v31 = 1;
              LODWORD(v518) = v162;
              LODWORD(v519) = 1;
              if ((_DWORD)v19 == 319)
                v256 = 239;
              else
                v256 = 240;
              LODWORD(v527) = v252;
              LODWORD(v529) = 0;
              DWORD2(v529) = v255;
              LODWORD(v531) = 0;
              v257 = llvm::MachineInstr::copyFlagsFromInstruction(v8) | 0x100000000;
              (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, v256, &v518, 1, &v527, 2, v257);
            }
            return v31;
          default:
            if ((_DWORD)v19 != 383)
              goto LABEL_496;
            v163 = *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
            v165 = sub_1C55437B8(v6, 0xE9u);
            v166 = (unint64_t *)v164;
            v167 = (unint64_t *)v6[6];
            v168 = *(_QWORD *)(v6[5] + 40);
            *(_QWORD *)(v164 + 24) = v168;
            v169 = *(_QWORD *)(v168 + 32);
            v170 = *(unsigned int *)(v164 + 40);
            if ((_DWORD)v170)
            {
              v465 = *(_QWORD *)(v164 + 32);
              v466 = *(_QWORD *)(v169 + 40);
              v467 = 32 * v170;
              do
              {
                if (!*(_BYTE *)v465)
                {
                  v468 = *(unsigned int *)(v465 + 4);
                  if ((int)v468 >= 0)
                    v469 = (uint64_t *)(*(_QWORD *)(v466 + 272) + 8 * v468);
                  else
                    v469 = (uint64_t *)(*(_QWORD *)(v466 + 24) + 16 * (v468 & 0x7FFFFFFF) + 8);
                  v470 = *v469;
                  if (*v469)
                  {
                    v471 = *(_QWORD *)(v470 + 16);
                    *(_QWORD *)(v470 + 16) = v465;
                    *(_QWORD *)(v465 + 16) = v471;
                    if ((*(_BYTE *)(v465 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v465 + 24) = v470;
                    }
                    else
                    {
                      *(_QWORD *)(v465 + 24) = 0;
                      v469 = (uint64_t *)(v471 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v465 + 16) = v465;
                    *(_QWORD *)(v465 + 24) = 0;
                  }
                  *v469 = v465;
                }
                v465 += 32;
                v467 -= 32;
              }
              while (v467);
            }
            v171 = *(_QWORD *)(v169 + 728);
            if (v171)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v171 + 24))(v171, v164);
            v172 = *v167 & 0xFFFFFFFFFFFFFFF8;
            *v166 = v172 | *v166 & 7;
            v166[1] = (unint64_t)v167;
            *(_QWORD *)(v172 + 8) = v166;
            *v167 = *v167 & 7 | (unint64_t)v166;
            v173 = v6[7];
            if (v173)
              (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v173 + 24))(v173, v166);
            v174 = *(_QWORD *)(v163 + 24);
            LODWORD(v527) = 14;
            v528 = 0;
            *(_QWORD *)&v529 = v174;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v166, v165, (const llvm::MachineOperand *)&v527);
            v175 = (int *)sub_1C54F95B0(v9, *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
            if (v176)
              v177 = *v175;
            else
              v177 = 0;
            v528 = 0;
            v529 = 0uLL;
            LODWORD(v527) = 0;
            HIDWORD(v527) = v177;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v166, v165, (const llvm::MachineOperand *)&v527);
            return 1;
        }
    }
  }
  if ((int)v19 <= 6)
  {
    if ((_DWORD)v19 == 1)
    {
      sub_1C54FBBFC(v9, 199, v8, (uint64_t)v6);
      return 1;
    }
    if ((_DWORD)v19 != 4)
      goto LABEL_496;
LABEL_79:
    v38 = (int *)sub_1C54F95B0(v9, v8);
    if (v39)
      v40 = *v38;
    else
      v40 = 0;
    LODWORD(v518) = v40;
    LODWORD(v519) = 1;
    v48 = (int *)sub_1C54F95B0(v9, *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
    if (v49)
      v50 = *v48;
    else
      v50 = 0;
    LODWORD(v527) = v50;
    LODWORD(v529) = 0;
    v51 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*v6 + 32);
    v31 = 1;
    v52 = &v518;
    v53 = &v527;
    v54 = v6;
    v55 = 19;
    v56 = 0;
  }
  else
  {
    switch((_DWORD)v19)
    {
      case 7:
        return v31;
      case 0x11:
        v45 = (int *)sub_1C54F95B0(v9, v8);
        if (v46)
          v47 = *v45;
        else
          v47 = 0;
        v60 = (int *)sub_1C54F95B0(v9, *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
        if (v61)
          v62 = *v60;
        else
          v62 = 0;
        v56 = llvm::MachineInstr::copyFlagsFromInstruction(v8) | 0x100000000;
        v31 = 1;
        LODWORD(v518) = v47;
        LODWORD(v519) = 1;
        LODWORD(v527) = v62;
        LODWORD(v529) = 0;
        v51 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*v6 + 32);
        v52 = &v518;
        v53 = &v527;
        v54 = v6;
        v55 = 178;
        break;
      case 0x12:
        v32 = (int *)sub_1C54F95B0(v9, v8);
        if (v33)
          v34 = *v32;
        else
          v34 = 0;
        LODWORD(v518) = v34;
        LODWORD(v519) = 1;
        v57 = (int *)sub_1C54F95B0(v9, *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
        if (v58)
          v59 = *v57;
        else
          v59 = 0;
        LODWORD(v527) = v59;
        LODWORD(v529) = 0;
        v56 = llvm::MachineInstr::copyFlagsFromInstruction(v8) | 0x100000000;
        v51 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*v6 + 32);
        v31 = 1;
        v52 = &v518;
        v53 = &v527;
        v54 = v6;
        v55 = 179;
        break;
      default:
        goto LABEL_496;
    }
  }
  v63 = 1;
LABEL_103:
  v51(v54, v55, v52, 1, v53, v63, v56);
  return v31;
}

BOOL sub_1C5503A54(uint64_t a1, const llvm::Value *a2, int a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  llvm::Value **v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  BOOL v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  int v57;
  BOOL v58;
  unsigned int v59;
  _QWORD *v60;
  _QWORD *v61;
  _DWORD *v62;
  unsigned int v63;
  uint64_t v64;

  LODWORD(v5) = a3;
  v6 = (uint64_t)a2;
  v8 = *((_QWORD *)a2 + 7);
  v9 = *(_DWORD *)(v8 + 20);
  if ((v9 & 0x40000000) != 0)
    v10 = *(llvm::Value ***)(v8 - 8);
  else
    v10 = (llvm::Value **)(v8 - 32 * (v9 & 0x7FFFFFF));
  v63 = llvm::classifyEHPersonality(*v10, a2);
  if (v63 == 12)
    return v63 != 12;
  v62 = (_DWORD *)(a1 + 496);
  while (1)
  {
    for (i = *(_QWORD *)(v6 + 48); ; i = *(_QWORD *)(i + 8))
    {
      v12 = i - 24;
      v13 = i ? i - 24 : 0;
      if (*(_BYTE *)(v13 + 16) != 83)
        break;
    }
    v14 = *(unsigned __int8 *)(i - 8);
    if (v14 == 38)
    {
      v16 = *(_DWORD *)(i - 4);
      if ((v16 & 0x40000000) != 0)
      {
        v18 = *(_QWORD *)(i - 32);
        v17 = v16 & 0x7FFFFFF;
      }
      else
      {
        v17 = v16 & 0x7FFFFFF;
        v18 = v12 - 32 * v17;
      }
      v19 = *(_WORD *)(i - 6) & 1;
      v20 = 1;
      if ((*(_WORD *)(i - 6) & 1) != 0)
        v20 = 2;
      if (v20 == v17)
      {
LABEL_44:
        if (!v19)
          return v63 != 12;
        v35 = *(_DWORD *)(i - 4);
        if ((v35 & 0x40000000) != 0)
          v36 = *(_QWORD *)(i - 32);
        else
          v36 = v12 - 32 * (v35 & 0x7FFFFFF);
        v15 = *(_QWORD *)(v36 + 32);
        v37 = *(_QWORD *)(a1 + 944);
        if (v37 && v15)
          v5 = (llvm::BranchProbabilityInfo::getEdgeProbability(v37, v6, *(_QWORD *)(v36 + 32))
              * (unint64_t)v5
              + 0x40000000) >> 31;
        goto LABEL_51;
      }
      v21 = (uint64_t *)(v18 + 32 * v17);
      v22 = (uint64_t *)(v18 + 32 * v20);
      while (1)
      {
        v23 = *v22;
        v64 = *v22;
        v24 = *(_DWORD *)(a1 + 512);
        if (!v24)
          break;
        v25 = *(_QWORD *)(a1 + 496);
        v26 = v24 - 1;
        v27 = v26 & ((v23 >> 4) ^ (v23 >> 9));
        v28 = (_QWORD *)(v25 + 16 * v27);
        v29 = *v28;
        if (v23 != *v28)
        {
          v30 = 0;
          v31 = 1;
          while (v29 != -4096)
          {
            if (v30)
              v32 = 0;
            else
              v32 = v29 == -8192;
            if (v32)
              v30 = v28;
            v33 = v27 + v31++;
            v27 = v33 & v26;
            v28 = (_QWORD *)(v25 + 16 * v27);
            v29 = *v28;
            if (v23 == *v28)
              goto LABEL_33;
          }
          if (v30)
            v34 = v30;
          else
            v34 = v28;
          goto LABEL_42;
        }
LABEL_33:
        sub_1C6202DAC(a4, v28[1], v5);
        if (v63 - 9 <= 1)
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 8) - 16) + 189) = 1;
        if (v63 - 7 >= 2)
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 8) - 16) + 187) = 1;
        v22 += 4;
        if (v22 == v21)
        {
          v19 = *(_WORD *)(i - 6) & 1;
          goto LABEL_44;
        }
      }
      v34 = 0;
LABEL_42:
      v28 = sub_1C47AD254(v62, (uint64_t)&v64, &v64, v34);
      *v28 = v64;
      v28[1] = 0;
      goto LABEL_33;
    }
    if (v14 == 79)
    {
      v64 = v6;
      v39 = *(_DWORD *)(a1 + 512);
      if (v39)
      {
        v40 = *(_QWORD *)(a1 + 496);
        v41 = v39 - 1;
        v42 = v41 & ((v6 >> 4) ^ (v6 >> 9));
        v43 = (_QWORD *)(v40 + 16 * v42);
        v44 = *v43;
        if (v6 == *v43)
        {
LABEL_63:
          sub_1C6202DAC(a4, v43[1], v5);
          v49 = *(_QWORD *)(*(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 8) - 16);
          *(_BYTE *)(v49 + 187) = 1;
          *(_BYTE *)(v49 + 189) = 1;
          return v63 != 12;
        }
        v45 = 0;
        v46 = 1;
        while (v44 != -4096)
        {
          if (v45)
            v47 = 0;
          else
            v47 = v44 == -8192;
          if (v47)
            v45 = v43;
          v48 = v42 + v46++;
          v42 = v48 & v41;
          v43 = (_QWORD *)(v40 + 16 * v42);
          v44 = *v43;
          if (v6 == *v43)
            goto LABEL_63;
        }
        if (v45)
          v60 = v45;
        else
          v60 = v43;
      }
      else
      {
        v60 = 0;
      }
      v43 = sub_1C47AD254(v62, (uint64_t)&v64, &v64, v60);
      *v43 = v64;
      v43[1] = 0;
      goto LABEL_63;
    }
    if (v14 == 94)
      break;
    v15 = v6;
LABEL_51:
    v6 = v15;
    if (!v15)
      return v63 != 12;
  }
  v64 = v6;
  v50 = *(_DWORD *)(a1 + 512);
  if (!v50)
  {
    v61 = 0;
    goto LABEL_82;
  }
  v51 = *(_QWORD *)(a1 + 496);
  v52 = v50 - 1;
  v53 = v52 & ((v6 >> 4) ^ (v6 >> 9));
  v54 = (_QWORD *)(v51 + 16 * v53);
  v55 = *v54;
  if (v6 != *v54)
  {
    v56 = 0;
    v57 = 1;
    while (v55 != -4096)
    {
      if (v56)
        v58 = 0;
      else
        v58 = v55 == -8192;
      if (v58)
        v56 = v54;
      v59 = v53 + v57++;
      v53 = v59 & v52;
      v54 = (_QWORD *)(v51 + 16 * v53);
      v55 = *v54;
      if (v6 == *v54)
        goto LABEL_74;
    }
    if (v56)
      v61 = v56;
    else
      v61 = v54;
LABEL_82:
    v54 = sub_1C47AD254(v62, (uint64_t)&v64, &v64, v61);
    *v54 = v64;
    v54[1] = 0;
  }
LABEL_74:
  sub_1C6202DAC(a4, v54[1], v5);
  return v63 != 12;
}

uint64_t sub_1C5503E3C(uint64_t a1, llvm **a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::MachineFunction *v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  llvm::MachineBasicBlock *v24;
  uint64_t v25;
  int *v26;
  const llvm::DataLayout *v27;
  unint64_t LLTForType;
  const llvm::DataLayout *v29;
  uint64_t v30;
  llvm **v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  char *v38;
  _QWORD *v39;
  llvm **v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  _DWORD *v48;
  int v49;
  int v50;
  unint64_t v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  int GenericVirtualRegister;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  llvm **v71;
  int v72[4];
  int v73;
  uint64_t v74;
  int v75;
  void *v76;
  uint64_t v77;
  llvm::MachineBasicBlock *v78;
  int v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v6 = a3[5];
  *(_BYTE *)(v6 + 184) = 1;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 864) + 16) + 120))(*(_QWORD *)(*(_QWORD *)(a1 + 864) + 16));
  v8 = v7;
  v9 = **(_QWORD **)(a1 + 864);
  v10 = *(_DWORD *)(v9 + 20);
  if ((v10 & 0x40000000) != 0)
    v11 = *(_QWORD **)(v9 - 8);
  else
    v11 = (_QWORD *)(v9 - 32 * (v10 & 0x7FFFFFF));
  v12 = *v11;
  if (!(*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 712))(v7, *v11)
    && !(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 720))(v8, v12)
    || *((_BYTE *)*a2 + 8) == 12)
  {
    return 1;
  }
  v15 = sub_1C55437B8(a3, 4u);
  v16 = (unint64_t *)v14;
  v17 = (unint64_t *)a3[6];
  v18 = *(_QWORD *)(a3[5] + 40);
  *(_QWORD *)(v14 + 24) = v18;
  v19 = *(_QWORD *)(v18 + 32);
  v20 = *(unsigned int *)(v14 + 40);
  if ((_DWORD)v20)
  {
    v64 = *(_QWORD *)(v14 + 32);
    v65 = *(_QWORD *)(v19 + 40);
    v66 = 32 * v20;
    do
    {
      if (!*(_BYTE *)v64)
      {
        v67 = *(unsigned int *)(v64 + 4);
        if ((int)v67 >= 0)
          v68 = (uint64_t *)(*(_QWORD *)(v65 + 272) + 8 * v67);
        else
          v68 = (uint64_t *)(*(_QWORD *)(v65 + 24) + 16 * (v67 & 0x7FFFFFFF) + 8);
        v69 = *v68;
        if (*v68)
        {
          v70 = *(_QWORD *)(v69 + 16);
          *(_QWORD *)(v69 + 16) = v64;
          *(_QWORD *)(v64 + 16) = v70;
          if ((*(_BYTE *)(v64 + 3) & 1) != 0)
          {
            *(_QWORD *)(v64 + 24) = v69;
          }
          else
          {
            *(_QWORD *)(v64 + 24) = 0;
            v68 = (uint64_t *)(v70 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v64 + 16) = v64;
          *(_QWORD *)(v64 + 24) = 0;
        }
        *v68 = v64;
      }
      v64 += 32;
      v66 -= 32;
    }
    while (v66);
  }
  v21 = *(_QWORD *)(v19 + 728);
  if (v21)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 24))(v21, v14);
  v22 = *v17 & 0xFFFFFFFFFFFFFFF8;
  *v16 = v22 | *v16 & 7;
  v16[1] = (unint64_t)v17;
  *(_QWORD *)(v22 + 8) = v16;
  *v17 = *v17 & 7 | (unint64_t)v16;
  v23 = a3[7];
  if (v23)
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v23 + 24))(v23, v16);
  v24 = llvm::MachineFunction::addLandingPad(*(llvm::MachineFunction **)(a1 + 864), (llvm::MachineBasicBlock *)v6);
  v77 = 0;
  v78 = v24;
  v79 = 0;
  v76 = (void *)15;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v15, (const llvm::MachineOperand *)&v76);
  v25 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 864) + 16) + 176))(*(_QWORD *)(*(_QWORD *)(a1 + 864) + 16));
  v26 = (int *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 48))(v25, *(_QWORD *)(a1 + 864));
  if (v26)
    sub_1C4963F5C(*(_QWORD *)(*(_QWORD *)(a1 + 864) + 40) + 280, v26, 0xFFFFFFFF);
  LLTForType = llvm::getLLTForType(*a2, *(llvm::Type **)(a1 + 880), v27);
  LODWORD(v76) = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(a1 + 872), LLTForType, "", 0);
  LODWORD(v77) = 1;
  (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*a3 + 32))(a3, 68, &v76, 1, 0, 0, 0);
  v76 = &v78;
  v77 = 0x200000000;
  v71 = a2;
  v30 = *((unsigned int *)*a2 + 3);
  if ((_DWORD)v30)
  {
    v31 = (llvm **)*((_QWORD *)*a2 + 2);
    v32 = 8 * v30;
    do
    {
      v33 = llvm::getLLTForType(*v31, *(llvm::Type **)(a1 + 880), v29);
      v34 = v77;
      if (v77 >= (unint64_t)HIDWORD(v77))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, (uint64_t)&v78, v77 + 1, 8);
        v34 = v77;
      }
      *((_QWORD *)v76 + v34) = v33;
      LODWORD(v77) = v77 + 1;
      ++v31;
      v32 -= 8;
    }
    while (v32);
  }
  v35 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 712))(v8, v12);
  if (!v35)
  {
    v13 = 0;
    goto LABEL_59;
  }
  v36 = v35;
  v38 = *(char **)(v6 + 160);
  v37 = *(_QWORD *)(v6 + 168);
  if ((unint64_t)v38 >= v37)
  {
    v41 = *(char **)(v6 + 152);
    v42 = (v38 - v41) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      goto LABEL_75;
    v44 = v37 - (_QWORD)v41;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    if (v45)
    {
      if (v45 >> 60)
        goto LABEL_76;
      v46 = (char *)operator new(16 * v45);
    }
    else
    {
      v46 = 0;
    }
    v47 = &v46[16 * v42];
    *(_WORD *)v47 = v36;
    *((_QWORD *)v47 + 1) = -1;
    v39 = v47 + 16;
    if (v38 != v41)
    {
      do
      {
        *((_OWORD *)v47 - 1) = *((_OWORD *)v38 - 1);
        v47 -= 16;
        v38 -= 16;
      }
      while (v38 != v41);
      v38 = *(char **)(v6 + 152);
    }
    *(_QWORD *)(v6 + 152) = v47;
    *(_QWORD *)(v6 + 160) = v39;
    *(_QWORD *)(v6 + 168) = &v46[16 * v45];
    v40 = v71;
    if (v38)
      operator delete(v38);
  }
  else
  {
    *(_WORD *)v38 = v35;
    *((_QWORD *)v38 + 1) = -1;
    v39 = v38 + 16;
    v40 = v71;
  }
  *(_QWORD *)(v6 + 160) = v39;
  v48 = (_DWORD *)sub_1C54F95B0(a1, v40);
  LODWORD(v74) = *v48;
  v75 = 1;
  v72[0] = v36;
  v73 = 0;
  (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, int *, uint64_t, _QWORD))(*a3 + 32))(a3, 19, &v74, 1, v72, 1, 0);
  v49 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 720))(v8, v12);
  if (!v49)
  {
    v13 = 0;
    goto LABEL_59;
  }
  v50 = v49;
  v52 = *(char **)(v6 + 160);
  v51 = *(_QWORD *)(v6 + 168);
  if ((unint64_t)v52 >= v51)
  {
    v54 = *(char **)(v6 + 152);
    v55 = (v52 - v54) >> 4;
    v56 = v55 + 1;
    if (!((unint64_t)(v55 + 1) >> 60))
    {
      v57 = v51 - (_QWORD)v54;
      if (v57 >> 3 > v56)
        v56 = v57 >> 3;
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0)
        v58 = 0xFFFFFFFFFFFFFFFLL;
      else
        v58 = v56;
      if (!v58)
      {
        v59 = 0;
        goto LABEL_53;
      }
      if (!(v58 >> 60))
      {
        v59 = (char *)operator new(16 * v58);
LABEL_53:
        v60 = &v59[16 * v55];
        v61 = &v59[16 * v58];
        *(_WORD *)v60 = v50;
        *((_QWORD *)v60 + 1) = -1;
        v53 = v60 + 16;
        if (v52 != v54)
        {
          do
          {
            *((_OWORD *)v60 - 1) = *((_OWORD *)v52 - 1);
            v60 -= 16;
            v52 -= 16;
          }
          while (v52 != v54);
          v52 = *(char **)(v6 + 152);
        }
        *(_QWORD *)(v6 + 152) = v60;
        *(_QWORD *)(v6 + 160) = v53;
        *(_QWORD *)(v6 + 168) = v61;
        if (v52)
          operator delete(v52);
        goto LABEL_58;
      }
LABEL_76:
      sub_1C4764EE4();
    }
LABEL_75:
    abort();
  }
  *(_WORD *)v52 = v49;
  *((_QWORD *)v52 + 1) = -1;
  v53 = v52 + 16;
LABEL_58:
  *(_QWORD *)(v6 + 160) = v53;
  GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(a1 + 872), *(_QWORD *)v76, "", 0);
  v13 = 1;
  LODWORD(v74) = GenericVirtualRegister;
  v75 = 1;
  v72[0] = v50;
  v73 = 0;
  (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, int *, uint64_t, _QWORD))(*a3 + 32))(a3, 19, &v74, 1, v72, 1, 0);
  LODWORD(v74) = v48[1];
  v75 = 1;
  v72[0] = GenericVirtualRegister;
  v73 = 0;
  sub_1C5546EF4(a3, &v74, v72);
LABEL_59:
  if (v76 != &v78)
    free(v76);
  return v13;
}

uint64_t sub_1C550448C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __int16 v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int *v17;
  uint64_t v18;
  int v19;
  llvm *v20;
  llvm::ConstantInt *v21;
  const llvm::DataLayout *v22;
  unint64_t LLTForType;
  uint64_t v24;
  uint64_t v25;
  int GenericVirtualRegister;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  BOOL v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  llvm::Value **v37;
  int *v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned __int8 v53;
  unsigned int v54;
  char v55;
  int *v56;
  int v57;
  uint64_t v58;
  const char *v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v3 = *(_WORD *)(a2 + 18);
  if ((v3 & 0x80) != 0)
    return 1;
  v7 = *(_QWORD *)(a2 - 32);
  if (*(_BYTE *)(v7 + 16) == 16
    && ((v8 = *(_QWORD *)(a2 + 40), (v9 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 80)) != 0)
      ? (v10 = v9 - 24)
      : (v10 = 0),
        (v3 & 0x40) == 0 && v8 == v10))
  {
    v11 = (int *)sub_1C54F95B0(a1, a2);
    if (v12)
      v13 = *v11;
    else
      v13 = 0;
    v15 = sub_1C54FB420(a1, a2);
    v14 = 1;
    LODWORD(v62) = v13;
    LODWORD(v63) = 1;
    sub_1C5543FA8(a3, (int *)&v62, v15);
  }
  else if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 864) + 8) + 484) == 15)
  {
    return 0;
  }
  else
  {
    v17 = (int *)sub_1C54F95B0(a1, v7);
    if (v18)
      v19 = *v17;
    else
      v19 = 0;
    llvm::DataLayout::getIntPtrType(*(llvm::DataLayout **)(a1 + 880), *(llvm::Type **)a2);
    v21 = v20;
    LLTForType = llvm::getLLTForType(v20, *(llvm::Type **)(a1 + 880), v22);
    v24 = *(_QWORD *)(a1 + 872);
    if (v19 < 0 && (v19 & 0x7FFFFFFFu) < *(_DWORD *)(v24 + 432))
      v25 = *(_QWORD *)(*(_QWORD *)(v24 + 424) + 8 * (v19 & 0x7FFFFFFF));
    else
      v25 = 0;
    if (v25 != LLTForType)
    {
      GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v24, LLTForType, "", 0);
      LODWORD(v68) = GenericVirtualRegister;
      v69 = 1;
      LODWORD(v62) = v19;
      v64 = 0;
      sub_1C5546B4C(a3, 126, &v68, (int *)&v62);
      v24 = *(_QWORD *)(a1 + 872);
      v19 = GenericVirtualRegister;
    }
    v27 = *(_QWORD *)(a2 + 64);
    v60 = llvm::MachineRegisterInfo::createGenericVirtualRegister(v24, LLTForType, "", 0);
    v28 = *(_QWORD *)(a1 + 880);
    sub_1C4768AD0(v28, v27);
    v30 = (unint64_t)(v29 + 7) >> 3;
    v32 = v31 == 1;
    v61 = v27;
    llvm::DataLayout::getAlignment(v28, v27);
    v34 = (1 << v33) + v30 - 1;
    v35 = -(1 << v33);
    v36 = (const char *)(v34 & v35);
    if (v32)
    {
      v59 = (const char *)(v34 & v35);
      v36 = v59;
    }
    v37 = llvm::ConstantInt::get(v21, (uint64_t)v36, 0);
    v38 = (int *)sub_1C54F95B0(a1, v37);
    v39 = 0;
    if (v40)
      v39 = *v38;
    v14 = 1;
    LODWORD(v68) = v60;
    v69 = 1;
    LODWORD(v62) = v19;
    v64 = 0;
    LODWORD(v65) = v39;
    v67 = 0;
    (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*a3 + 32))(a3, 47, &v68, 1, &v62, 2, 0);
    v41 = *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 864) + 16) + 112))(*(_QWORD *)(*(_QWORD *)(a1 + 864) + 16))
                             + 12);
    v62 = LLTForType;
    LODWORD(v63) = 0;
    v42 = sub_1C5544694((uint64_t)a3, &v62, (1 << v41) - 1);
    v68 = LLTForType;
    v69 = 0;
    LODWORD(v62) = v60;
    v64 = 0;
    v65 = v42;
    v66 = v43;
    v67 = 1;
    v44 = (*(uint64_t (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*a3 + 32))(a3, 45, &v68, 1, &v62, 2, 0x100000800);
    v46 = v45;
    v62 = LLTForType;
    LODWORD(v63) = 0;
    v47 = sub_1C5544694((uint64_t)a3, &v62, -(1 << v41));
    v68 = LLTForType;
    v69 = 0;
    v62 = v44;
    v63 = v46;
    v64 = 1;
    v65 = v47;
    v66 = v48;
    v67 = 1;
    v49 = (*(uint64_t (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*a3 + 32))(a3, 65, &v68, 1, &v62, 2, 0);
    v51 = v50;
    v52 = __clz(1 << *(_WORD *)(a2 + 18)) ^ 0x3F;
    llvm::DataLayout::getAlignment(*(_QWORD *)(a1 + 880), v61);
    v54 = v53;
    if (v52 > v53)
      v54 = v52;
    if (v54 <= v41)
      v55 = 0;
    else
      v55 = v54;
    v56 = (int *)sub_1C54F95B0(a1, a2);
    v57 = 0;
    if (v58)
      v57 = *v56;
    LODWORD(v68) = v57;
    v69 = 1;
    v62 = v49;
    v63 = v51;
    v64 = 1;
    sub_1C62753B0((uint64_t)a3, (int *)&v68, (int *)&v62, v55);
    llvm::MachineFrameInfo::CreateVariableSizedObject(*(unsigned __int8 **)(*(_QWORD *)(a1 + 864) + 56), v55, a2);
  }
  return v14;
}

