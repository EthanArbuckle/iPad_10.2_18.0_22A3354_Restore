void sub_1C5BABA98(_QWORD *a1)
{
  if (a1)
  {
    sub_1C5BABA98(*a1);
    sub_1C5BABA98(a1[1]);
    sub_1C631E58C((_DWORD *)a1 + 14);
    MEMORY[0x1CAA32FB4](a1[7], 8);
    operator delete(a1);
  }
}

unsigned __int8 *sub_1C5BABAE4(unsigned __int8 *a1, uint64_t a2, _BYTE *a3, uint64_t *a4)
{
  unsigned __int8 *v4;
  int v6;
  _QWORD v7[2];
  int v8;

  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v6 = 0;
  v4 = sub_1C5BB019C(a1, a2, a3, &v6, (uint64_t)v7, a4);
  MEMORY[0x1CAA32FB4](v7[0], 8);
  return v4;
}

uint64_t sub_1C5BABB3C(uint64_t a1, const llvm::Value *a2, llvm::ValueHandleBase *a3, uint64_t a4, unsigned __int8 **a5, uint64_t a6)
{
  uint64_t *v13;
  uint64_t AnalysisPass;
  const llvm::Twine *v15;
  uint64_t v16;
  int32x2_t *v17;
  const llvm::Loop *v18;
  const llvm::Loop *v19;
  llvm *v20;
  llvm::BasicBlock *v21;
  int32x2_t **v22;
  llvm::BasicBlock *v23;
  llvm::DominatorTree *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  char *v29;
  void **v30;
  void *v31;
  llvm::LegacyDivergenceAnalysis *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  _BYTE *v42;
  char *v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t i;
  uint64_t v72;
  unsigned int v73;
  BOOL v74;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  size_t v91;
  char *v92;
  char *v93;
  uint64_t *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  void *v100;
  _QWORD *v101;
  unint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t ***v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  _QWORD *v112;
  uint64_t *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t *v119;
  uint64_t v120;
  int32x2_t ****v121;
  _QWORD *v123;
  unint64_t v124;
  int32x2_t ****v125;
  int32x2_t *v126;
  unint64_t v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  int32x2_t *****v131;
  int32x2_t ****v132;
  int v133;
  int v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t *v137;
  uint64_t v138;
  int32x2_t *v139;
  unint64_t v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  int v146;
  int v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t *v150;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  llvm::Loop *v155;
  uint64_t v156;
  llvm::Loop *v157;
  unint64_t v158;
  uint64_t **v159;
  unint64_t v160;
  unint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  int v179;
  int v180;
  unint64_t v181;
  uint64_t *v182;
  unint64_t v184;
  _QWORD *v186;
  _QWORD *v187;
  uint64_t *v188;
  unint64_t v189;
  uint64_t *v190;
  int32x2_t *v191;
  unint64_t v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t **v196;
  uint64_t *v197;
  int v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  int32x2_t ****v202;
  _QWORD *v204;
  unint64_t v206;
  int32x2_t ****v207;
  int32x2_t *v208;
  unint64_t v209;
  uint64_t v210;
  unsigned int v211;
  uint64_t v212;
  int32x2_t *****v213;
  int32x2_t ****v214;
  int v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  int v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  _QWORD *v231;
  uint64_t *v232;
  uint64_t j;
  uint64_t v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  int v245;
  int v246;
  uint64_t k;
  uint64_t v248;
  uint64_t v249;
  uint64_t *m;
  uint64_t *v251;
  unsigned int v252;
  uint64_t v253;
  _QWORD *v255;
  _QWORD *v256;
  llvm::Value *v257;
  char *v258;
  uint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  unsigned int v264;
  BOOL v265;
  BOOL v266;
  uint64_t v267;
  uint64_t n;
  llvm::ValueAsMetadata *v269;
  uint64_t v270;
  llvm::ValueAsMetadata *v271;
  unsigned int v272;
  BOOL v273;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  llvm::ValueSymbolTable *v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t ii;
  uint64_t ***v285;
  uint64_t v286;
  llvm::LLVMContext *v287;
  llvm::LLVMContext *v288;
  _BOOL4 v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  llvm::Type *v294;
  llvm::DSOLocalEquivalent **v295;
  int32x2_t **v296;
  uint64_t v297;
  unsigned __int8 *v298;
  int v299;
  uint64_t v300;
  char *v301;
  _QWORD **v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  llvm::Loop **v306;
  _QWORD *v307;
  _QWORD *v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  char *v313;
  llvm::Loop **v314;
  llvm::Loop *v315;
  llvm::DSOLocalEquivalent **v316;
  _QWORD *v317;
  unint64_t v318;
  int32x2_t ****v319;
  int32x2_t *v320;
  unint64_t v321;
  uint64_t v322;
  unsigned int v323;
  uint64_t v324;
  int32x2_t *****v325;
  int32x2_t ****v326;
  int v327;
  int v328;
  llvm::DSOLocalEquivalent **v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  const llvm::APInt *v333;
  uint64_t *v334;
  uint64_t Impl;
  uint64_t LoopID;
  llvm::MDNode *PostTransformationMetadata;
  unint64_t v338;
  const llvm::APInt *v339;
  int32x2_t *v340;
  unint64_t v341;
  uint64_t v342;
  unsigned int v343;
  uint64_t v344;
  const llvm::APInt **v345;
  const llvm::APInt *v346;
  int v347;
  int v348;
  char *v349;
  char *v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t v353;
  unint64_t *v354;
  uint64_t v355;
  int32x2_t *v356;
  unint64_t v357;
  uint64_t v358;
  unsigned int v359;
  uint64_t v360;
  uint64_t *v361;
  uint64_t v362;
  int v363;
  int v364;
  unint64_t v366;
  unint64_t *v367;
  uint64_t v368;
  int32x2_t *v369;
  unint64_t v370;
  uint64_t v371;
  unsigned int v372;
  uint64_t v373;
  uint64_t *v374;
  uint64_t v375;
  int v376;
  int v377;
  char *v378;
  char *v379;
  char *v380;
  uint64_t v381;
  uint64_t v382;
  char *v383;
  uint64_t v384;
  llvm::UndefValue *v385;
  llvm::Value *v386;
  uint64_t v387;
  unsigned __int8 **v388;
  uint64_t v389;
  uint64_t v390;
  llvm::Value *v391;
  llvm::ValueHandleBase *v392;
  uint64_t *v393;
  uint64_t v394;
  llvm::Loop *v395;
  _BYTE *__src;
  uint64_t *__srca;
  uint64_t **__srcb;
  uint64_t v399;
  unint64_t *v400;
  const llvm::APInt *v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t v404;
  uint64_t *v405;
  int32x2_t ****v406;
  void *__p;
  void *v408;
  void *v409;
  int v410[2];
  unsigned int v411;
  uint64_t v412[3];
  char v413;
  uint64_t *v414;
  uint64_t v415;
  _WORD v416[32];
  uint64_t v417;

  v417 = *MEMORY[0x1E0C80C00];
  if (!**(_DWORD **)(a1 + 112))
    return 0;
  if (*(_BYTE *)(a1 + 288))
  {
    v30 = **(void ****)(a1 + 8);
    do
    {
      v31 = *v30;
      v30 += 2;
    }
    while (v31 != &llvm::LegacyDivergenceAnalysis::ID);
    v32 = (llvm::LegacyDivergenceAnalysis *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v30 - 1) + 96))(*(v30 - 1), &llvm::LegacyDivergenceAnalysis::ID);
    if ((llvm::LegacyDivergenceAnalysis::isDivergent(v32, a2) & 1) != 0)
      return 0;
  }
  v13 = *(uint64_t **)(a1 + 136);
  v394 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 56);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), llvm::ScalarEvolutionWrapperPass::ID, 1);
  if (AnalysisPass)
  {
    v16 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, llvm::ScalarEvolutionWrapperPass::ID);
    if (v16)
    {
      v17 = *(int32x2_t **)(v16 + 32);
      v18 = (const llvm::Loop *)v13;
      do
      {
        v19 = v18;
        v18 = *(const llvm::Loop **)v18;
      }
      while (v18);
      llvm::ScalarEvolution::forgetLoop(v17, v19);
    }
  }
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a1 + 264);
  v21 = *(llvm::BasicBlock **)(a1 + 176);
  v20 = *(llvm **)(a1 + 184);
  v22 = *(int32x2_t ***)(a1 + 168);
  v23 = *(llvm::BasicBlock **)(a1 + 144);
  v24 = *(llvm::DominatorTree **)(a1 + 32);
  v416[8] = 257;
  v25 = llvm::SplitEdge(v20, v21, v23, v24, v22, (llvm::MemorySSAUpdater *)&v414, v15);
  v26 = v25;
  v28 = *(uint64_t **)(a1 + 248);
  v27 = *(_QWORD *)(a1 + 256);
  v392 = a3;
  v393 = v13;
  v390 = a6;
  v391 = a2;
  v388 = a5;
  v389 = a4;
  v387 = v25;
  if ((unint64_t)v28 >= v27)
  {
    v33 = *(_QWORD **)(a1 + 240);
    v34 = v28 - v33;
    v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 61)
      goto LABEL_520;
    v36 = v27 - (_QWORD)v33;
    if (v36 >> 2 > v35)
      v35 = v36 >> 2;
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
      v37 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v37 = v35;
    if (v37)
    {
      if (v37 >> 61)
        goto LABEL_521;
      v38 = v25;
      v39 = (char *)operator new(8 * v37);
      v26 = v38;
      v13 = v393;
    }
    else
    {
      v39 = 0;
    }
    v40 = (uint64_t *)&v39[8 * v34];
    *v40 = v26;
    v29 = (char *)(v40 + 1);
    if (v28 != v33)
    {
      do
      {
        v41 = *--v28;
        *--v40 = v41;
      }
      while (v28 != v33);
      v28 = *(uint64_t **)(a1 + 240);
    }
    *(_QWORD *)(a1 + 240) = v40;
    *(_QWORD *)(a1 + 248) = v29;
    *(_QWORD *)(a1 + 256) = &v39[8 * v37];
    if (v28)
      operator delete(v28);
  }
  else
  {
    *v28 = v25;
    v29 = (char *)(v28 + 1);
  }
  *(_QWORD *)(a1 + 248) = v29;
  v43 = (char *)v13[4];
  v42 = (_BYTE *)v13[5];
  v44 = v42 - v43;
  if (v42 - v43 >= 1)
  {
    v45 = v44 >> 3;
    v46 = *(_QWORD *)(a1 + 240);
    v47 = (uint64_t)&v29[-v46];
    v48 = (_BYTE *)(v46 + ((unint64_t)&v29[-v46] & 0xFFFFFFFFFFFFFFF8));
    v49 = *(_QWORD *)(a1 + 256);
    if (v44 >> 3 <= (v49 - (uint64_t)v29) >> 3)
    {
      v55 = (v29 - v48) >> 3;
      if (v55 >= v45)
      {
        v57 = v29;
      }
      else
      {
        v56 = &v43[8 * v55];
        memmove(v29, v56, v42 - v56);
        v57 = &v29[v42 - v56];
        *(_QWORD *)(a1 + 248) = v57;
        if (v29 - v48 < 1)
          goto LABEL_61;
        v42 = v56;
      }
      v58 = &v48[8 * v45];
      v59 = &v57[-8 * v45];
      v60 = v57;
      if (v59 < v29)
      {
        v60 = v57;
        do
        {
          v61 = *(_QWORD *)v59;
          v59 += 8;
          *v60++ = v61;
        }
        while (v59 < v29);
      }
      *(_QWORD *)(a1 + 248) = v60;
      if (v57 != v58)
        memmove(&v57[-8 * ((v57 - v58) >> 3)], v48, v57 - v58);
      if (v42 != v43)
        memmove(v48, v43, v42 - v43);
    }
    else
    {
      v50 = v47 >> 3;
      v51 = (v47 >> 3) + v45;
      if (v51 >> 61)
        goto LABEL_520;
      v52 = v49 - v46;
      if (v52 >> 2 > v51)
        v51 = v52 >> 2;
      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
        v53 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v53 = v51;
      __src = (_BYTE *)(v46 + ((unint64_t)&v29[-v46] & 0xFFFFFFFFFFFFFFF8));
      if (v53)
      {
        if (v53 >> 61)
          goto LABEL_521;
        v54 = (char *)operator new(8 * v53);
      }
      else
      {
        v54 = 0;
      }
      v62 = &v54[8 * v50];
      memcpy(v62, v43, v44);
      v63 = v47 & 0xFFFFFFFFFFFFFFF8;
      if ((unint64_t)v47 >= 8)
      {
        v65 = 8 * v50;
        do
        {
          *(_QWORD *)&v54[v65 - 8] = *(_QWORD *)(v46 - 8 + v65);
          v65 -= 8;
        }
        while (v65);
        v29 = *(char **)(a1 + 248);
        v62 = v54;
      }
      v64 = &v54[v44];
      v66 = &v54[v44 + v63];
      if (v29 != __src)
        memmove(&v64[v63], __src, v29 - __src);
      v67 = *(void **)(a1 + 240);
      *(_QWORD *)(a1 + 240) = v62;
      *(_QWORD *)(a1 + 248) = &v66[v29 - __src];
      *(_QWORD *)(a1 + 256) = &v54[8 * v53];
      if (v67)
        operator delete(v67);
    }
  }
LABEL_61:
  v414 = (uint64_t *)v416;
  v415 = 0x800000000;
  sub_1C4EAEA40(v393, (uint64_t)&v414);
  v68 = v415;
  if ((_DWORD)v415)
  {
    v69 = 0;
    do
    {
      v70 = v414[v69];
      for (i = *(_QWORD *)(v70 + 8); i; i = *(_QWORD *)(i + 8))
      {
        v72 = *(_QWORD *)(i + 24);
        v73 = *(unsigned __int8 *)(v72 + 16);
        if (v72)
          v74 = v73 >= 0x1C;
        else
          v74 = 0;
        if (v74 && v73 - 29 < 0xB)
          break;
      }
      v409 = &v411;
      *(_QWORD *)v410 = 0x400000000;
      sub_1C4DBBCC0((unsigned int *)&v409, i, 0);
      sub_1C5EBE3AC((uint64_t **)v70, (uint64_t *)v409, v410[0], ".us-lcssa", 0, *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 32), *(llvm::MemorySSAUpdater **)(a1 + 168), 1);
      if (v409 != &v411)
        free(v409);
      ++v69;
    }
    while (v69 != v68);
  }
  LODWORD(v415) = 0;
  sub_1C4EAEA40(v393, (uint64_t)&v414);
  v76 = v415;
  if ((_DWORD)v415)
  {
    v77 = (char *)v414;
    v78 = *(_QWORD *)(a1 + 240);
    v79 = *(uint64_t **)(a1 + 248);
    v80 = (uint64_t)v79 - v78;
    v81 = v78 + (((unint64_t)v79 - v78) & 0xFFFFFFFFFFFFFFF8);
    v82 = *(_QWORD *)(a1 + 256);
    if (v415 <= (v82 - (uint64_t)v79) >> 3)
    {
      v88 = (char *)&v414[v415];
      v89 = ((uint64_t)v79 - v81) >> 3;
      if (v89 >= v415)
      {
        v92 = *(char **)(a1 + 248);
      }
      else
      {
        v90 = (char *)&v414[v89];
        v91 = v88 - v90;
        memmove(*(void **)(a1 + 248), v90, v91);
        v92 = (char *)v79 + v91;
        *(_QWORD *)(a1 + 248) = (char *)v79 + v91;
        if ((uint64_t)v79 - v81 < 1)
          goto LABEL_107;
        v88 = v90;
      }
      v93 = (char *)(v81 + 8 * v76);
      v94 = (uint64_t *)&v92[-8 * v76];
      v95 = v92;
      if (v94 < v79)
      {
        v95 = v92;
        do
        {
          v96 = *v94++;
          *(_QWORD *)v95 = v96;
          v95 += 8;
        }
        while (v94 < v79);
      }
      *(_QWORD *)(a1 + 248) = v95;
      if (v92 != v93)
        memmove(&v92[-8 * ((v92 - v93) >> 3)], (const void *)(v78 + (((unint64_t)v79 - v78) & 0xFFFFFFFFFFFFFFF8)), v92 - v93);
      if (v88 != v77)
        memmove((void *)(v78 + (((unint64_t)v79 - v78) & 0xFFFFFFFFFFFFFFF8)), v77, v88 - v77);
    }
    else
    {
      __srca = (uint64_t *)(v78 + (((unint64_t)v79 - v78) & 0xFFFFFFFFFFFFFFF8));
      v83 = v80 >> 3;
      v84 = (v80 >> 3) + v415;
      if (v84 >> 61)
        goto LABEL_520;
      v85 = v82 - v78;
      if (v85 >> 2 > v84)
        v84 = v85 >> 2;
      if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
        v86 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v86 = v84;
      if (v86)
      {
        if (v86 >> 61)
          goto LABEL_521;
        v87 = (char *)operator new(8 * v86);
      }
      else
      {
        v87 = 0;
      }
      v97 = &v87[8 * v83];
      memcpy(v97, v77, 8 * v76);
      if ((unint64_t)v80 >= 8)
      {
        v98 = 8 * v83;
        do
        {
          *(_QWORD *)&v87[v98 - 8] = *(_QWORD *)(v78 - 8 + v98);
          v98 -= 8;
        }
        while (v98);
        v79 = *(uint64_t **)(a1 + 248);
        v97 = v87;
      }
      v99 = &v87[8 * v76 + (v80 & 0xFFFFFFFFFFFFFFF8)];
      if (v79 != __srca)
        memmove(v99, __srca, (char *)v79 - (char *)__srca);
      v100 = *(void **)(a1 + 240);
      *(_QWORD *)(a1 + 240) = v97;
      *(_QWORD *)(a1 + 248) = &v99[(char *)v79 - (char *)__srca];
      *(_QWORD *)(a1 + 256) = &v87[8 * v86];
      if (v100)
        operator delete(v100);
    }
  }
LABEL_107:
  __srcb = (uint64_t **)(a1 + 264);
  sub_1C4DB1D18(a1 + 264, (uint64_t)(*(_QWORD *)(a1 + 248) - *(_QWORD *)(a1 + 240)) >> 3);
  v411 = 128;
  v101 = operator new(0x2000uLL, (std::align_val_t)8uLL);
  v409 = v101;
  *(_QWORD *)v410 = 0;
  if (v411)
  {
    v102 = (unint64_t)v411 << 6;
    v103 = v101 + 2;
    do
    {
      *v103 = 0;
      v103[1] = -4096;
      *(v103 - 2) = &unk_1E814DA10;
      *(v103 - 1) = 2;
      v103[2] = 0;
      v103 += 8;
      v102 -= 64;
    }
    while (v102);
  }
  LOBYTE(v412[0]) = 0;
  v413 = 0;
  v104 = *(_QWORD *)(a1 + 248) - *(_QWORD *)(a1 + 240);
  if ((v104 & 0x7FFFFFFF8) != 0)
  {
    v105 = 0;
    v106 = (v104 >> 3);
    do
    {
      v107 = *(uint64_t ****)(*(_QWORD *)(a1 + 240) + 8 * v105);
      v403 = (unint64_t)".us";
      LOWORD(__p) = 259;
      v108 = llvm::CloneBasicBlock(v107, (uint64_t)&v409, (uint64_t)&v403, v394, 0, 0);
      v109 = v108;
      v111 = *(uint64_t **)(a1 + 272);
      v110 = *(_QWORD *)(a1 + 280);
      if ((unint64_t)v111 >= v110)
      {
        v113 = *__srcb;
        v114 = v111 - *__srcb;
        v115 = v114 + 1;
        if ((unint64_t)(v114 + 1) >> 61)
          goto LABEL_520;
        v116 = v110 - (_QWORD)v113;
        if (v116 >> 2 > v115)
          v115 = v116 >> 2;
        if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8)
          v117 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v117 = v115;
        if (v117)
        {
          if (v117 >> 61)
            goto LABEL_521;
          v118 = (char *)operator new(8 * v117);
        }
        else
        {
          v118 = 0;
        }
        v119 = (uint64_t *)&v118[8 * v114];
        *v119 = v109;
        v112 = v119 + 1;
        if (v111 != v113)
        {
          do
          {
            v120 = *--v111;
            *--v119 = v120;
          }
          while (v111 != v113);
          v111 = *__srcb;
        }
        *(_QWORD *)(a1 + 264) = v119;
        *(_QWORD *)(a1 + 272) = v112;
        *(_QWORD *)(a1 + 280) = &v118[8 * v117];
        if (v111)
          operator delete(v111);
      }
      else
      {
        *v111 = v108;
        v112 = v111 + 1;
      }
      *(_QWORD *)(a1 + 272) = v112;
      v121 = *(int32x2_t *****)(*(_QWORD *)(a1 + 240) + 8 * v105);
      v404 = 2;
      v405 = 0;
      v406 = v121;
      if (v121 != (int32x2_t ****)-8192 && v121 != (int32x2_t ****)-4096 && v121 != 0)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v404);
      v403 = (unint64_t)&unk_1E814DA10;
      __p = &v409;
      v123 = sub_1C52E2ED8((uint64_t)&v409, &v403);
      if (v406 != (int32x2_t ****)-8192 && v406 != (int32x2_t ****)-4096 && v406)
      {
        v124 = v404 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v404 & 0xFFFFFFFFFFFFFFF8) = v405;
        if (v405)
        {
          *v405 = *v405 & 7 | v124;
        }
        else
        {
          v125 = v406;
          v126 = ***v406;
          v127 = (unint64_t)v126[303];
          if (v127 <= v124)
          {
            v128 = v126[305].u32[0];
            if (v127 + 16 * v128 > v124)
            {
              v129 = v128 - 1;
              LODWORD(v130) = v129 & ((v406 >> 4) ^ (v406 >> 9));
              v131 = (int32x2_t *****)(v127 + 16 * v130);
              v132 = *v131;
              if (v406 == *v131)
              {
LABEL_146:
                *v131 = (int32x2_t ****)-8192;
                v126[304] = vadd_s32(v126[304], (int32x2_t)0x1FFFFFFFFLL);
                v125 = v406;
              }
              else
              {
                v133 = 1;
                while (v132 != (int32x2_t ****)-4096)
                {
                  v134 = v130 + v133++;
                  v130 = v134 & v129;
                  v132 = *(int32x2_t *****)(v127 + 16 * v130);
                  if (v406 == v132)
                  {
                    v131 = (int32x2_t *****)(v127 + 16 * v130);
                    goto LABEL_146;
                  }
                }
              }
              *((_BYTE *)v125 + 17) &= ~1u;
            }
          }
        }
      }
      v135 = v123[7];
      if (v135 != v109)
      {
        if (v135 && v135 != -8192 && v135 != -4096)
        {
          v136 = v123[5] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v136 = v123[6];
          v137 = (unint64_t *)v123[6];
          if (v137)
          {
            *v137 = *v137 & 7 | v136;
          }
          else
          {
            v138 = v123[7];
            v139 = ***(int32x2_t ****)v138;
            v140 = (unint64_t)v139[303];
            if (v140 <= v136)
            {
              v141 = v139[305].u32[0];
              if (v140 + 16 * v141 > v136)
              {
                v142 = v141 - 1;
                LODWORD(v143) = v142 & ((v138 >> 4) ^ (v138 >> 9));
                v144 = (uint64_t *)(v140 + 16 * v143);
                v145 = *v144;
                if (v138 == *v144)
                {
LABEL_167:
                  *v144 = -8192;
                  v139[304] = vadd_s32(v139[304], (int32x2_t)0x1FFFFFFFFLL);
                  v138 = v123[7];
                }
                else
                {
                  v146 = 1;
                  while (v145 != -4096)
                  {
                    v147 = v143 + v146++;
                    v143 = v147 & v142;
                    v145 = *(_QWORD *)(v140 + 16 * v143);
                    if (v138 == v145)
                    {
                      v144 = (uint64_t *)(v140 + 16 * v143);
                      goto LABEL_167;
                    }
                  }
                }
                *(_BYTE *)(v138 + 17) &= ~1u;
              }
            }
          }
        }
        v123[7] = v109;
        if (v109 != -8192 && v109 != -4096 && v109)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v123 + 5));
      }
      ++v105;
    }
    while (v105 != v106);
  }
  v148 = (uint64_t *)(v394 + 72);
  v149 = (uint64_t *)(v387 + 24);
  v150 = (uint64_t *)(**__srcb + 24);
  if (v150 != (uint64_t *)(v394 + 72) && v149 != v148)
  {
    v152 = *v148;
    v153 = *v150;
    *(_QWORD *)(v153 + 8) = v148;
    *v148 = v153;
    v154 = *v149;
    *(_QWORD *)(v152 + 8) = v149;
    *v150 = v154;
    *(_QWORD *)(v154 + 8) = v150;
    *v149 = v152;
  }
  v155 = llvm::cloneLoop(v393, *v393, (uint64_t)&v409, *(_QWORD *)(a1 + 32), *(llvm::LPPassManager **)(a1 + 40));
  v157 = v155;
  v158 = *(_QWORD *)(a1 + 88);
  v159 = (uint64_t **)(a1 + 88);
  v160 = a1 + 88;
  if (v158)
  {
    while (1)
    {
      while (1)
      {
        v160 = v158;
        v161 = *(_QWORD *)(v158 + 32);
        if (v161 <= (unint64_t)v155)
          break;
        v158 = *(_QWORD *)v160;
        v159 = (uint64_t **)v160;
        if (!*(_QWORD *)v160)
          goto LABEL_182;
      }
      if (v161 >= (unint64_t)v155)
        break;
      v158 = *(_QWORD *)(v160 + 8);
      if (!v158)
      {
        v159 = (uint64_t **)(v160 + 8);
        goto LABEL_182;
      }
    }
  }
  else
  {
LABEL_182:
    v162 = (char *)operator new(0x50uLL);
    v403 = (unint64_t)v162;
    v404 = a1 + 88;
    *((_QWORD *)v162 + 4) = v157;
    *(_OWORD *)(v162 + 40) = 0u;
    *(_OWORD *)(v162 + 56) = 0u;
    *((_QWORD *)v162 + 9) = 0;
    LOBYTE(v405) = 1;
    *(_QWORD *)v162 = 0;
    *((_QWORD *)v162 + 1) = 0;
    *((_QWORD *)v162 + 2) = v160;
    *v159 = (uint64_t *)v162;
    v163 = **(_QWORD **)(a1 + 80);
    if (v163)
    {
      *(_QWORD *)(a1 + 80) = v163;
      v164 = *v159;
    }
    else
    {
      v164 = (uint64_t *)v162;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 88), v164);
    ++*(_QWORD *)(a1 + 96);
    v160 = v403;
    v403 = 0;
    sub_1C5BAE778((uint64_t)&v403);
  }
  v165 = *(_QWORD *)(a1 + 112);
  v167 = v165 + 16;
  v166 = *(uint64_t **)(v165 + 16);
  v168 = *(_DWORD *)v165 - 1;
  ++*(_DWORD *)(v165 + 4);
  *(_DWORD *)(v160 + 40) = v168 >> 1;
  *(_DWORD *)(v160 + 44) = 0;
  *(_DWORD *)v165 = v168 - (v168 >> 1);
  *(_DWORD *)(v160 + 48) = *(_DWORD *)(v165 + 8);
  v169 = *(_DWORD *)(v165 + 32);
  v170 = &v166[13 * v169];
  v395 = v157;
  if (*(_DWORD *)(v165 + 24))
  {
    if (v169)
    {
      v171 = 104 * v169;
      v172 = v166;
      while ((*v172 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v172 += 13;
        v171 -= 104;
        if (!v171)
          goto LABEL_191;
      }
    }
    else
    {
      v172 = v166;
    }
  }
  else
  {
LABEL_191:
    v172 = &v166[13 * v169];
  }
  v173 = &v166[13 * v169];
  if (v172 != v173)
  {
    v174 = v160 + 56;
    while (1)
    {
      v399 = 0;
      v175 = *v172;
      v399 = *v172;
      if (!v411)
        goto LABEL_201;
      v176 = (v411 - 1) & ((v175 >> 4) ^ (v175 >> 9));
      v177 = (char *)v409 + 64 * v176;
      v178 = v177[3];
      if (v175 != v178)
        break;
LABEL_202:
      v403 = 6;
      if (v177 == (_QWORD *)((char *)v409 + 64 * (unint64_t)v411))
      {
        v181 = 0;
        v182 = 0;
        v404 = 0;
        v405 = 0;
      }
      else
      {
        v181 = 0;
        v182 = (uint64_t *)v177[7];
        v404 = 0;
        v405 = v182;
        if (v182 != (uint64_t *)-8192 && v182 != (uint64_t *)-4096 && v182 != 0)
        {
          v184 = v177[5] & 0xFFFFFFFFFFFFFFF8;
          v404 = *(_QWORD *)v184;
          *(_QWORD *)v184 = &v403;
          v403 = v184 | 6;
          v181 = v404;
          if (v404)
            *(_QWORD *)v404 = *(_QWORD *)v404 & 7 | (unint64_t)&v404;
          v182 = v405;
        }
      }
      if (v182 != (uint64_t *)-8192 && v182 != (uint64_t *)-4096 && v182 != 0)
      {
        v189 = v403 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v403 & 0xFFFFFFFFFFFFFFF8) = v181;
        if (v404)
        {
          *(_QWORD *)v404 = *(_QWORD *)v404 & 7 | v189;
        }
        else
        {
          v190 = v405;
          v191 = **(int32x2_t ***)*v405;
          v192 = (unint64_t)v191[303];
          if (v192 <= v189)
          {
            v193 = v191[305].u32[0];
            if (v192 + 16 * v193 > v189)
            {
              v194 = v193 - 1;
              LODWORD(v195) = v194 & ((v405 >> 4) ^ (v405 >> 9));
              v196 = (uint64_t **)(v192 + 16 * v195);
              v197 = *v196;
              if (v405 == *v196)
              {
LABEL_235:
                *v196 = (uint64_t *)-8192;
                v191[304] = vadd_s32(v191[304], (int32x2_t)0x1FFFFFFFFLL);
                v190 = v405;
              }
              else
              {
                v198 = 1;
                while (v197 != (uint64_t *)-4096)
                {
                  v199 = v195 + v198++;
                  v195 = v199 & v194;
                  v197 = *(uint64_t **)(v192 + 16 * v195);
                  if (v405 == v197)
                  {
                    v196 = (uint64_t **)(v192 + 16 * v195);
                    goto LABEL_235;
                  }
                }
              }
              *((_BYTE *)v190 + 17) &= ~1u;
            }
          }
        }
      }
      v403 = (unint64_t)v182;
      v186 = sub_1C62944C0(v167, &v399);
      v187 = sub_1C62944C0(v174, (uint64_t *)&v403);
      if (v186 != v187)
        llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)(v187 + 1), (const llvm::SmallPtrSetImplBase *)(v186 + 1));
      v188 = v172 + 13;
      v172 = v170;
      if (v188 != v170)
      {
        v172 = v188;
        while ((*v172 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v172 += 13;
          if (v172 == v170)
          {
            v172 = v170;
            break;
          }
        }
      }
      if (v172 == v173)
        goto LABEL_238;
    }
    v179 = 1;
    while (v178 != -4096)
    {
      v180 = v176 + v179++;
      v176 = v180 & (v411 - 1);
      v177 = (char *)v409 + 64 * v176;
      v178 = v177[3];
      if (v175 == v178)
        goto LABEL_202;
    }
LABEL_201:
    v177 = (char *)v409 + 64 * (unint64_t)v411;
    goto LABEL_202;
  }
LABEL_238:
  if (*v393)
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop((_QWORD *)*v393, **(_QWORD **)(a1 + 264), *(_QWORD *)(a1 + 32));
  v200 = v415;
  if ((_DWORD)v415)
  {
    v201 = 0;
    do
    {
      v202 = (int32x2_t ****)v414[v201];
      v404 = 2;
      v405 = 0;
      v406 = v202;
      if (v202 != (int32x2_t ****)-8192 && v202 != (int32x2_t ****)-4096 && v202 != 0)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v404);
      v403 = (unint64_t)&unk_1E814DA10;
      __p = &v409;
      v204 = sub_1C52E2ED8((uint64_t)&v409, &v403);
      if (v406 != (int32x2_t ****)-8192 && v406 != (int32x2_t ****)-4096 && v406 != 0)
      {
        v206 = v404 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v404 & 0xFFFFFFFFFFFFFFF8) = v405;
        if (v405)
        {
          *v405 = *v405 & 7 | v206;
        }
        else
        {
          v207 = v406;
          v208 = ***v406;
          v209 = (unint64_t)v208[303];
          if (v209 <= v206)
          {
            v210 = v208[305].u32[0];
            if (v209 + 16 * v210 > v206)
            {
              v211 = v210 - 1;
              LODWORD(v212) = v211 & ((v406 >> 4) ^ (v406 >> 9));
              v213 = (int32x2_t *****)(v209 + 16 * v212);
              v214 = *v213;
              if (v406 == *v213)
              {
LABEL_261:
                *v213 = (int32x2_t ****)-8192;
                v208[304] = vadd_s32(v208[304], (int32x2_t)0x1FFFFFFFFLL);
                v207 = v406;
              }
              else
              {
                v215 = 1;
                while (v214 != (int32x2_t ****)-4096)
                {
                  v216 = v212 + v215++;
                  v212 = v216 & v211;
                  v214 = *(int32x2_t *****)(v209 + 16 * v212);
                  if (v406 == v214)
                  {
                    v213 = (int32x2_t *****)(v209 + 16 * v212);
                    goto LABEL_261;
                  }
                }
              }
              *((_BYTE *)v207 + 17) &= ~1u;
            }
          }
        }
      }
      v217 = v204[7];
      v218 = *(_QWORD *)(a1 + 32);
      v219 = *(_DWORD *)(v218 + 16);
      if (v219)
      {
        v220 = v414[v201];
        v221 = *(_QWORD *)v218;
        v222 = v219 - 1;
        v223 = ((v220 >> 4) ^ (v220 >> 9)) & (v219 - 1);
        v224 = *(_QWORD *)(*(_QWORD *)v218 + 16 * v223);
        if (v220 == v224)
        {
LABEL_269:
          v227 = *(_QWORD **)(v221 + 16 * v223 + 8);
          if (v227)
            llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v227, v217, v218);
        }
        else
        {
          v225 = 1;
          while (v224 != -4096)
          {
            v226 = v223 + v225++;
            v223 = v226 & v222;
            v224 = *(_QWORD *)(v221 + 16 * v223);
            if (v220 == v224)
              goto LABEL_269;
          }
        }
      }
      v228 = *(_QWORD *)(v217 + 40);
      if (v228 == v217 + 40)
      {
        v229 = 0;
      }
      else
      {
        if (v228)
          v229 = v228 - 24;
        else
          v229 = 0;
        if (*(unsigned __int8 *)(v229 + 16) - 29 >= 0xB)
          v229 = 0;
      }
      v230 = *(unsigned __int8 *)(v229 + 16);
      if (v230 != 30)
        __asm { BR              X10 }
      v231 = *(_QWORD **)(v229 - 32);
      v232 = v231 + 5;
      if ((_QWORD *)v231[5] != v231 + 5)
      {
        for (j = v231[6]; ; j = *(_QWORD *)(v234 + 32))
        {
          v234 = j - 24;
          v235 = j ? j - 24 : 0;
          if (!j || *(_BYTE *)(v235 + 16) != 83)
            break;
          v236 = *(_DWORD *)(j - 4);
          v237 = v236 & 0x7FFFFFF;
          if ((v236 & 0x7FFFFFF) != 0)
          {
            v238 = 0;
            while (1)
            {
              v239 = v234 - 32 * v237;
              if ((v236 & 0x40000000) != 0)
                v239 = *(_QWORD *)(v234 - 8);
              if (*(_QWORD *)(v239 + 32 * *(unsigned int *)(v234 + 60) + 8 * v238) == v414[v201])
                break;
              if (v237 == ++v238)
                goto LABEL_293;
            }
          }
          else
          {
LABEL_293:
            LODWORD(v238) = -1;
          }
          if ((v236 & 0x40000000) != 0)
            v240 = *(_QWORD *)(v234 - 8);
          else
            v240 = v234 - 32 * v237;
          v241 = *(_QWORD *)(v240 + 32 * v238);
          if (v411)
          {
            v242 = ((v241 >> 4) ^ (v241 >> 9)) & (v411 - 1);
            v243 = (char *)v409 + 64 * v242;
            v244 = v243[3];
            if (v241 == v244)
            {
LABEL_301:
              if (v243 != (_QWORD *)((char *)v409 + 64 * (unint64_t)v411))
                v241 = v243[7];
            }
            else
            {
              v245 = 1;
              while (v244 != -4096)
              {
                v246 = v242 + v245++;
                v242 = v246 & (v411 - 1);
                v243 = (char *)v409 + 64 * v242;
                v244 = v243[3];
                if (v241 == v244)
                  goto LABEL_301;
              }
            }
          }
          sub_1C477667C((llvm::PHINode *)v234, v241, v217);
        }
      }
      for (k = *(_QWORD *)(v217 + 48); k != v217 + 40; k = *(_QWORD *)(k + 8))
      {
        if (k)
          v248 = k - 24;
        else
          v248 = 0;
        if (*(_BYTE *)(v248 + 16) != 83)
        {
          if (*(_BYTE *)(k - 8) == 94)
          {
            v249 = *(_QWORD *)(k - 24);
            LOWORD(__p) = 257;
            for (m = (uint64_t *)v231[6]; m != v232; m = (uint64_t *)m[1])
            {
              v251 = m - 3;
              if (!m)
                v251 = 0;
              if (*((_BYTE *)v251 + 16) != 83)
              {
                v252 = *((unsigned __int8 *)m - 8) - 38;
                v266 = v252 > 0x38;
                v253 = (1 << v252) & 0x100060000000001;
                if (v266 || v253 == 0)
                  v232 = m;
                else
                  v232 = (uint64_t *)m[1];
                break;
              }
            }
            v255 = operator new(0x48uLL);
            v256 = v255;
            v255[1] = v249;
            v257 = (llvm::Value *)(v255 + 1);
            *v255 = 0;
            v255[2] = 0;
            v255[3] = 0x4000000000000053;
            *((_OWORD *)v255 + 2) = 0u;
            v258 = (char *)(v255 + 4);
            *((_OWORD *)v255 + 3) = 0u;
            *((_DWORD *)v255 + 16) = 0;
            if (v232)
            {
              v275 = v232[2];
              v255[6] = v275;
              *(_WORD *)(v275 + 18) &= ~0x8000u;
              if ((*((_BYTE *)v255 + 31) & 0x10) != 0)
              {
                v277 = *(_QWORD *)(v275 + 56);
                if (v277)
                {
                  v278 = *(llvm::ValueSymbolTable **)(v277 + 104);
                  if (v278)
                    llvm::ValueSymbolTable::reinsertValue(v278, v257);
                }
              }
              v276 = *v232;
              v256[4] = *v232;
              v256[5] = v232;
              *(_QWORD *)(v276 + 8) = v258;
              *v232 = (uint64_t)v258;
            }
            *((_DWORD *)v256 + 17) = 0;
            llvm::Value::setName((uint64_t ***)v257, (uint64_t)&v403);
            v259 = *((unsigned int *)v256 + 17);
            v260 = operator new(40 * v259);
            *v256 = v260;
            if ((_DWORD)v259)
            {
              v261 = &v260[4 * v259];
              do
              {
                *v260 = 0;
                v260[1] = 0;
                v260[2] = 0;
                v260[3] = v257;
                v260 += 4;
              }
              while (v260 != v261);
            }
            v262 = v231[1];
            if (v262)
            {
              while (1)
              {
                v263 = *(_QWORD *)(v262 + 24);
                v264 = *(unsigned __int8 *)(v263 + 16);
                v265 = v263 && v264 >= 0x1C;
                v266 = !v265 || v264 - 29 > 0xA;
                if (!v266)
                  break;
                v262 = *(_QWORD *)(v262 + 8);
                if (!v262)
                  goto LABEL_338;
              }
LABEL_340:
              v267 = *(_QWORD *)(v263 + 40);
              for (n = *(_QWORD *)(v267 + 48); n != v267 + 40; n = *(_QWORD *)(n + 8))
              {
                v269 = (llvm::ValueAsMetadata *)(n - 24);
                if (n)
                  v270 = n - 24;
                else
                  v270 = 0;
                if (*(_BYTE *)(v270 + 16) != 83)
                  goto LABEL_348;
              }
              v269 = 0;
LABEL_348:
              if (*((_BYTE *)v269 + 16) == 94)
                v271 = v269;
              else
                v271 = 0;
              llvm::Value::doRAUW(v271, v257, (llvm::Value *)1);
              sub_1C477667C(v257, (uint64_t)v271, v267);
              while (1)
              {
                v262 = *(_QWORD *)(v262 + 8);
                if (!v262)
                  break;
                v263 = *(_QWORD *)(v262 + 24);
                v272 = *(unsigned __int8 *)(v263 + 16);
                if (v263)
                  v273 = v272 >= 0x1C;
                else
                  v273 = 0;
                if (v273 && v272 - 29 < 0xB)
                  goto LABEL_340;
              }
            }
          }
          break;
        }
      }
LABEL_338:
      ++v201;
    }
    while (v201 != v200);
  }
  v279 = *(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264);
  if ((v279 & 0x7FFFFFFF8) != 0)
  {
    v280 = 0;
    v281 = (v279 >> 3);
    do
    {
      v282 = (*__srcb)[v280];
      v283 = v282 + 40;
      for (ii = *(_QWORD *)(v282 + 48); ii != v283; ii = *(_QWORD *)(ii + 8))
      {
        if (ii)
          v285 = (uint64_t ***)(ii - 24);
        else
          v285 = 0;
        v286 = operator new();
        *(_DWORD *)v286 = 3;
        *(_QWORD *)(v286 + 8) = 0;
        *(_DWORD *)(v286 + 16) = 0;
        *(_QWORD *)(v286 + 40) = &v409;
        *(_QWORD *)(v286 + 24) = v286 + 40;
        *(_QWORD *)(v286 + 48) = 0;
        *(_QWORD *)(v286 + 32) = 0x200000001;
        *(_QWORD *)(v286 + 72) = v286 + 88;
        *(_QWORD *)(v286 + 80) = 0x400000000;
        *(_QWORD *)(v286 + 184) = v286 + 200;
        *(_QWORD *)(v286 + 192) = 0x100000000;
        *(_QWORD *)(v286 + 216) = v286 + 232;
        *(_QWORD *)(v286 + 224) = 0x1000000000;
        v399 = v286;
        v403 = v286;
        sub_1C5FD706C(v286, v285);
        sub_1C5FD3718((uint64_t *)&v403, v287);
        llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v399, v288);
        v289 = sub_1C4D9F8B4((uint64_t)v285);
        if (ii && v289)
          llvm::AssumptionCache::registerAssumption(*(char ***)(a1 + 48), (uint64_t)v285);
      }
      ++v280;
    }
    while (v280 != v281);
  }
  v290 = *(_QWORD *)(a1 + 184);
  v291 = *(_QWORD *)(v290 + 40);
  if (v291 == v290 + 40)
  {
    v293 = 0;
  }
  else
  {
    if (v291)
      v292 = v291 - 24;
    else
      v292 = 0;
    if (*(unsigned __int8 *)(v292 + 16) - 29 >= 0xB)
      v293 = 0;
    else
      v293 = v292;
  }
  if (*(_QWORD *)(a1 + 168))
  {
    sub_1C4DFE414((uint64_t)&v403, (uint64_t)v393);
    llvm::LoopBlocksDFS::perform((llvm::LoopBlocksDFS *)&v403, *(llvm::LoopInfo **)(a1 + 32));
    llvm::MemorySSAUpdater::updateForClonedLoop(*(_QWORD *)(a1 + 168), (uint64_t)&v403, (uint64_t)v414, v415, (uint64_t)&v409, 0);
    if (__p)
    {
      v408 = __p;
      operator delete(__p);
    }
    MEMORY[0x1CAA32FB4](v404, 8);
  }
  sub_1C5BADA28(a1, v391, v392, **(_QWORD **)(a1 + 264), **(llvm::BasicBlock ***)(a1 + 240), v293, v389, v156, v388, v390);
  v296 = *(int32x2_t ***)(a1 + 168);
  if (v296)
  {
    v297 = *(_QWORD *)(a1 + 144);
    v403 = (unint64_t)&v409;
    sub_1C4EE0074(v296, v414, v415, (uint64_t **)&v403, (uint64_t **)&v404, v297);
  }
  if (v293)
  {
    if ((*(_BYTE *)(v293 + 23) & 8) != 0)
    {
      v385 = llvm::UndefValue::get(*(llvm::UndefValue **)v293, v294);
      llvm::ValueAsMetadata::handleRAUW((uint64_t *)v293, v385, v386);
    }
    v298 = *(unsigned __int8 **)(v293 + 48);
    if (v298)
      llvm::MetadataTracking::untrack(v293 + 48, v298);
    llvm::Value::~Value((llvm::Value *)v293, (llvm::Value *)v298);
    v299 = *(_DWORD *)(v293 + 20);
    if ((v299 & 0x40000000) != 0)
    {
      v380 = *(char **)(v293 - 8);
      v379 = (char *)(v293 - 8);
      v378 = v380;
      v381 = v299 & 0x7FFFFFF;
      if ((_DWORD)v381)
      {
        v382 = 32 * v381;
        do
        {
          v383 = &v378[v382];
          if (*(_QWORD *)&v378[v382 - 32])
          {
            **((_QWORD **)v383 - 2) = *((_QWORD *)v383 - 3);
            v384 = *((_QWORD *)v383 - 3);
            if (v384)
              *(_QWORD *)(v384 + 16) = *((_QWORD *)v383 - 2);
          }
          v382 -= 32;
        }
        while (v382);
      }
      operator delete(v378);
      v301 = v379;
    }
    else
    {
      v300 = v299 & 0x7FFFFFF;
      v301 = (char *)(v293 - 32 * v300);
      if ((_DWORD)v300)
      {
        v302 = (_QWORD **)(v293 - 16);
        v303 = -32 * v300;
        do
        {
          if (*(v302 - 2))
          {
            **v302 = *(v302 - 1);
            v304 = (uint64_t)*(v302 - 1);
            if (v304)
              *(_QWORD *)(v304 + 16) = *v302;
          }
          v302 -= 4;
          v303 += 32;
        }
        while (v303);
      }
      if (v299 < 0)
        v301 = &v301[-*((_QWORD *)v301 - 1) - 8];
    }
    operator delete(v301);
  }
  v306 = *(llvm::Loop ***)(a1 + 64);
  v305 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v306 >= v305)
  {
    v308 = *(_QWORD **)(a1 + 56);
    v309 = v306 - (llvm::Loop **)v308;
    v310 = v309 + 1;
    if (!((unint64_t)(v309 + 1) >> 61))
    {
      v311 = v305 - (_QWORD)v308;
      if (v311 >> 2 > v310)
        v310 = v311 >> 2;
      if ((unint64_t)v311 >= 0x7FFFFFFFFFFFFFF8)
        v312 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v312 = v310;
      if (!v312)
      {
        v313 = 0;
        goto LABEL_421;
      }
      if (!(v312 >> 61))
      {
        v313 = (char *)operator new(8 * v312);
LABEL_421:
        v314 = (llvm::Loop **)&v313[8 * v309];
        *v314 = v395;
        v307 = v314 + 1;
        if (v306 != v308)
        {
          do
          {
            v315 = *--v306;
            *--v314 = v315;
          }
          while (v306 != v308);
          v306 = *(llvm::Loop ***)(a1 + 56);
        }
        *(_QWORD *)(a1 + 56) = v314;
        *(_QWORD *)(a1 + 64) = v307;
        *(_QWORD *)(a1 + 72) = &v313[8 * v312];
        if (v306)
          operator delete(v306);
        goto LABEL_426;
      }
LABEL_521:
      sub_1C4764EE4();
    }
LABEL_520:
    abort();
  }
  *v306 = v395;
  v307 = v306 + 1;
LABEL_426:
  *(_QWORD *)(a1 + 64) = v307;
  *(_BYTE *)(a1 + 129) = 1;
  v399 = 6;
  v400 = 0;
  v401 = v391;
  if (v391 != (llvm::Value *)-8192 && v391 != (llvm::Value *)-4096 && v391)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v399);
  if (v390)
  {
    if (llvm::Constant::isOneValue(v392))
    {
      v404 = 2;
      v405 = 0;
      v406 = (int32x2_t ****)v391;
      if (v391 != (llvm::Value *)-8192 && v391 != (llvm::Value *)-4096 && v391)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v404);
      v403 = (unint64_t)&unk_1E814DA10;
      __p = &v409;
      v317 = sub_1C52E2ED8((uint64_t)&v409, &v403);
      if (v406 != (int32x2_t ****)-8192 && v406 != (int32x2_t ****)-4096 && v406)
      {
        v318 = v404 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v404 & 0xFFFFFFFFFFFFFFF8) = v405;
        if (v405)
        {
          *v405 = *v405 & 7 | v318;
        }
        else
        {
          v319 = v406;
          v320 = ***v406;
          v321 = (unint64_t)v320[303];
          if (v321 <= v318)
          {
            v322 = v320[305].u32[0];
            if (v321 + 16 * v322 > v318)
            {
              v323 = v322 - 1;
              LODWORD(v324) = v323 & ((v406 >> 4) ^ (v406 >> 9));
              v325 = (int32x2_t *****)(v321 + 16 * v324);
              v326 = *v325;
              if (v406 == *v325)
              {
LABEL_447:
                *v325 = (int32x2_t ****)-8192;
                v320[304] = vadd_s32(v320[304], (int32x2_t)0x1FFFFFFFFLL);
                v319 = v406;
              }
              else
              {
                v327 = 1;
                while (v326 != (int32x2_t ****)-4096)
                {
                  v328 = v324 + v327++;
                  v324 = v328 & v323;
                  v326 = *(int32x2_t *****)(v321 + 16 * v324);
                  if (v406 == v326)
                  {
                    v325 = (int32x2_t *****)(v321 + 16 * v324);
                    goto LABEL_447;
                  }
                }
              }
              *((_BYTE *)v319 + 17) &= ~1u;
            }
          }
        }
      }
      v333 = (const llvm::APInt *)v317[7];
      v331 = a1;
      v332 = (uint64_t)v395;
    }
    else
    {
      v331 = a1;
      v332 = (uint64_t)v393;
      v333 = v391;
    }
    sub_1C5BAEE50(v331, v332, v333, (uint64_t ***)v392, (llvm::Type *)1, v316);
    v334 = (uint64_t *)****((_QWORD ****)v395 + 4);
    v403 = (unint64_t)llvm::MDString::get(v334, "llvm.loop.unswitch.partial.disable", 0x22uLL);
    Impl = llvm::MDTuple::getImpl(v334, &v403, 1, 0, 1);
    LoopID = llvm::Loop::getLoopID((llvm::Loop *)v393);
    v403 = (unint64_t)"llvm.loop.unswitch.partial";
    v404 = 26;
    v402 = Impl;
    PostTransformationMetadata = llvm::makePostTransformationMetadata(v334, LoopID, (uint64_t)&v403, 1, &v402, 1);
    llvm::Loop::setLoopID(v395, PostTransformationMetadata);
  }
  else
  {
    sub_1C5BAEE50(a1, (uint64_t)v393, v391, (uint64_t ***)v392, 0, v295);
    v330 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 56) != v330
      && *(llvm::Loop **)(v330 - 8) == v395
      && v401
      && *((unsigned __int8 *)v401 + 16) >= 0x15u)
    {
      sub_1C5BAEE50(a1, (uint64_t)v395, v401, (uint64_t ***)v392, (llvm::Type *)1, v329);
    }
  }
  if (v401 != (const llvm::APInt *)-8192 && v401 != (const llvm::APInt *)-4096 && v401)
  {
    v338 = v399 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v399 & 0xFFFFFFFFFFFFFFF8) = v400;
    if (v400)
    {
      *v400 = *v400 & 7 | v338;
    }
    else
    {
      v339 = v401;
      v340 = ***(int32x2_t ****)v401;
      v341 = (unint64_t)v340[303];
      if (v341 <= v338)
      {
        v342 = v340[305].u32[0];
        if (v341 + 16 * v342 > v338)
        {
          v343 = v342 - 1;
          LODWORD(v344) = v343 & ((v401 >> 4) ^ (v401 >> 9));
          v345 = (const llvm::APInt **)(v341 + 16 * v344);
          v346 = *v345;
          if (v401 == *v345)
          {
LABEL_469:
            *v345 = (const llvm::APInt *)-8192;
            v340[304] = vadd_s32(v340[304], (int32x2_t)0x1FFFFFFFFLL);
            v339 = v401;
          }
          else
          {
            v347 = 1;
            while (v346 != (const llvm::APInt *)-4096)
            {
              v348 = v344 + v347++;
              v344 = v348 & v343;
              v346 = *(const llvm::APInt **)(v341 + 16 * v344);
              if (v401 == v346)
              {
                v345 = (const llvm::APInt **)(v341 + 16 * v344);
                goto LABEL_469;
              }
            }
          }
          *((_BYTE *)v339 + 17) &= ~1u;
        }
      }
    }
  }
  if (v413)
  {
    sub_1C4E43068((uint64_t)v412);
    MEMORY[0x1CAA32FB4](v412[0], 8);
    v413 = 0;
  }
  v349 = (char *)v409;
  if (v411)
  {
    v350 = (char *)v409 + 64 * (unint64_t)v411;
    do
    {
      v351 = *((_QWORD *)v349 + 3);
      if ((v351 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v352 = *((_QWORD *)v349 + 7);
        if (v352)
        {
          if (v352 != -8192 && v352 != -4096)
          {
            v353 = *((_QWORD *)v349 + 5) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v353 = *((_QWORD *)v349 + 6);
            v354 = (unint64_t *)*((_QWORD *)v349 + 6);
            if (v354)
            {
              *v354 = *v354 & 7 | v353;
            }
            else
            {
              v355 = *((_QWORD *)v349 + 7);
              v356 = ***(int32x2_t ****)v355;
              v357 = (unint64_t)v356[303];
              if (v357 <= v353)
              {
                v358 = v356[305].u32[0];
                if (v357 + 16 * v358 > v353)
                {
                  v359 = v358 - 1;
                  LODWORD(v360) = v359 & ((v355 >> 4) ^ (v355 >> 9));
                  v361 = (uint64_t *)(v357 + 16 * v360);
                  v362 = *v361;
                  if (v355 == *v361)
                  {
LABEL_488:
                    *v361 = -8192;
                    v356[304] = vadd_s32(v356[304], (int32x2_t)0x1FFFFFFFFLL);
                    v355 = *((_QWORD *)v349 + 7);
                  }
                  else
                  {
                    v363 = 1;
                    while (v362 != -4096)
                    {
                      v364 = v360 + v363++;
                      v360 = v364 & v359;
                      v362 = *(_QWORD *)(v357 + 16 * v360);
                      if (v355 == v362)
                      {
                        v361 = (uint64_t *)(v357 + 16 * v360);
                        goto LABEL_488;
                      }
                    }
                  }
                  *(_BYTE *)(v355 + 17) &= ~1u;
                }
              }
            }
            v351 = *((_QWORD *)v349 + 3);
          }
        }
      }
      if (v351 != -4096 && v351 != -8192 && v351 != 0)
      {
        v366 = *((_QWORD *)v349 + 1) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v366 = *((_QWORD *)v349 + 2);
        v367 = (unint64_t *)*((_QWORD *)v349 + 2);
        if (v367)
        {
          *v367 = *v367 & 7 | v366;
        }
        else
        {
          v368 = *((_QWORD *)v349 + 3);
          v369 = ***(int32x2_t ****)v368;
          v370 = (unint64_t)v369[303];
          if (v370 <= v366)
          {
            v371 = v369[305].u32[0];
            if (v370 + 16 * v371 > v366)
            {
              v372 = v371 - 1;
              LODWORD(v373) = v372 & ((v368 >> 4) ^ (v368 >> 9));
              v374 = (uint64_t *)(v370 + 16 * v373);
              v375 = *v374;
              if (v368 == *v374)
              {
LABEL_507:
                *v374 = -8192;
                v369[304] = vadd_s32(v369[304], (int32x2_t)0x1FFFFFFFFLL);
                v368 = *((_QWORD *)v349 + 3);
              }
              else
              {
                v376 = 1;
                while (v375 != -4096)
                {
                  v377 = v373 + v376++;
                  v373 = v377 & v372;
                  v375 = *(_QWORD *)(v370 + 16 * v373);
                  if (v368 == v375)
                  {
                    v374 = (uint64_t *)(v370 + 16 * v373);
                    goto LABEL_507;
                  }
                }
              }
              *(_BYTE *)(v368 + 17) &= ~1u;
            }
          }
        }
      }
      v349 += 64;
    }
    while (v349 != v350);
    v349 = (char *)v409;
  }
  MEMORY[0x1CAA32FB4](v349, 8);
  if (v414 != (uint64_t *)v416)
    free(v414);
  return 1;
}

uint64_t sub_1C5BAD8D4(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_BYTE *)(a1 + 16) == 81 && (*(_WORD *)(a1 + 18) & 0x3E) == 0x20)
  {
    v1 = *(_QWORD *)(a1 - 64);
    v2 = *(unsigned __int8 *)(v1 + 16);
    if ((v2 - 11) < 2)
      return 1;
    v3 = *(_QWORD *)(a1 - 32);
    v4 = *(unsigned __int8 *)(v3 + 16);
    if ((v4 - 11) < 2)
      return 1;
    if (v4 == 83)
      v6 = *(_QWORD *)(a1 - 32);
    else
      v6 = 0;
    if (v2 == 83)
    {
      v7 = *(_DWORD *)(v1 + 20);
      if ((v7 & 0x40000000) != 0)
      {
        v9 = *(_QWORD *)(v1 - 8);
        v8 = v7 & 0x7FFFFFF;
      }
      else
      {
        v8 = v7 & 0x7FFFFFF;
        v9 = v1 - 32 * v8;
      }
      if (v8)
      {
        v10 = 32 * v8;
        while (*(unsigned __int8 *)(*(_QWORD *)v9 + 16) - 11 >= 2)
        {
          v9 += 32;
          v10 -= 32;
          if (!v10)
            goto LABEL_17;
        }
        return 1;
      }
    }
LABEL_17:
    if (v6)
    {
      v11 = *(_DWORD *)(v6 + 20);
      if ((v11 & 0x40000000) != 0)
      {
        v13 = *(_QWORD *)(v6 - 8);
        v12 = v11 & 0x7FFFFFF;
      }
      else
      {
        v12 = v11 & 0x7FFFFFF;
        v13 = v6 - 32 * v12;
      }
      if (v12)
      {
        v14 = 32 * v12;
        while (*(unsigned __int8 *)(*(_QWORD *)v13 + 16) - 11 >= 2)
        {
          v13 += 32;
          v14 -= 32;
          if (!v14)
            goto LABEL_25;
        }
        return 1;
      }
    }
LABEL_25:
    if (v4 != 85)
      v3 = 0;
    if (v2 == 85
      && (*(unsigned __int8 *)(*(_QWORD *)(v1 - 64) + 16) - 11 < 2
       || *(unsigned __int8 *)(*(_QWORD *)(v1 - 32) + 16) - 11 < 2)
      || v3
      && (*(unsigned __int8 *)(*(_QWORD *)(v3 - 64) + 16) - 11 < 2
       || *(unsigned __int8 *)(*(_QWORD *)(v3 - 32) + 16) - 11 < 2))
    {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1C5BADA28(uint64_t a1, llvm::Value *a2, llvm::ValueHandleBase *a3, uint64_t a4, llvm::BasicBlock *a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 **a9, uint64_t a10)
{
  uint64_t v11;
  llvm::Value *v14;
  uint64_t *v16;
  uint64_t v17;
  llvm::ValueHandleBase *v18;
  void *v19;
  unint64_t v20;
  unsigned __int8 **v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unsigned __int8 **v25;
  uint64_t v26;
  unint64_t *v27;
  llvm::Instruction *v28;
  llvm::Instruction *v29;
  uint64_t v30;
  llvm::Value *v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  llvm::LLVMContext *v35;
  llvm::LLVMContext *v36;
  _QWORD *v37;
  unint64_t v38;
  int32x2_t ****v39;
  int32x2_t *v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int32x2_t *****v45;
  int32x2_t ****v46;
  int v47;
  int v48;
  llvm::Value *v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  llvm::Instruction *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  llvm::ValueSymbolTable *v70;
  unint64_t v71;
  unint64_t *v72;
  uint64_t v73;
  int32x2_t *v74;
  unint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  int v81;
  int v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  _QWORD *LoopPredecessor;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  int v93;
  uint64_t **v94;
  llvm::BasicBlock *v95;
  uint64_t v96;
  char *DefinedAccess;
  unsigned __int8 *v98;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  int32x2_t ****v103;
  int32x2_t *v104;
  unint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  int32x2_t *****v109;
  int32x2_t ****v110;
  int v111;
  int v112;
  _DWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t *v122;
  uint64_t v123;
  int32x2_t *v124;
  unint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  int v131;
  int v132;
  unint64_t v134;
  unint64_t *v135;
  uint64_t v136;
  int32x2_t *v137;
  unint64_t v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  int v144;
  int v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  unsigned int v149;
  void *v150;
  uint64_t v151;
  void *v152;
  int32x2_t **v153;
  uint64_t v154;
  uint64_t v155;
  llvm::ConstantInt *v157;
  unsigned int v158;
  char v159;
  uint64_t v163;
  _QWORD *v165;
  void *v166;
  uint64_t v167;
  unint64_t *v168;
  int32x2_t ****v169;
  void **v170;
  unint64_t v171;
  unint64_t *v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  char v178;
  char v179;
  uint64_t v180;
  void *v181;
  _QWORD v182[10];

  v11 = a4;
  v182[8] = *MEMORY[0x1E0C80C00];
  if (!a10)
  {
    v14 = a2;
    if (*((_BYTE *)a3 + 16) == 16 && *(_QWORD *)a3 == ***(_QWORD ***)a2 + 1888)
    {
      v16 = **(uint64_t ***)a3;
      v17 = *v16;
      v18 = *(llvm::ValueHandleBase **)(*v16 + 1560);
      if (!v18)
      {
        v157 = *(llvm::ConstantInt **)(v17 + 1888);
        v158 = *(_DWORD *)(v17 + 1896);
        LODWORD(v174) = v158 >> 8;
        if (v158 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v173, 1, 0);
        }
        else
        {
          if (v158 <= 0xFF)
            v159 = 0;
          else
            v159 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v158);
          v173 = (void *)(v159 & 1);
        }
        v18 = llvm::ConstantInt::get(v157, (llvm::LLVMContext *)&v173, a3);
        if (v174 >= 0x41 && v173)
          MEMORY[0x1CAA32F9C](v173, 0x1000C8000313F17);
        *(_QWORD *)(v17 + 1560) = v18;
      }
      if (v18 == a3)
      {
        LODWORD(v19) = 0;
        v20 = (unint64_t)a5;
      }
      else
      {
        LODWORD(v19) = 1;
        v20 = v11;
        v11 = (uint64_t)a5;
      }
      v115 = a6;
    }
    else
    {
      v113 = operator new(0x80uLL);
      v113[21] = v113[21] & 0x38000000 | 2;
      v114 = (uint64_t)(v113 + 16);
      *(_QWORD *)v113 = 0;
      *((_QWORD *)v113 + 1) = 0;
      *((_QWORD *)v113 + 2) = 0;
      *((_QWORD *)v113 + 3) = v113 + 16;
      *((_QWORD *)v113 + 4) = 0;
      *((_QWORD *)v113 + 5) = 0;
      *((_QWORD *)v113 + 6) = 0;
      *((_QWORD *)v113 + 7) = v113 + 16;
      LOWORD(v177) = 257;
      sub_1C4774CC4(*(_DWORD **)v14);
      v115 = a6;
      llvm::CmpInst::CmpInst(v114, v116, 53, 32, (uint64_t)v14, (uint64_t)a3, (uint64_t)&v173, a6, 0);
      LODWORD(v19) = 0;
      v20 = (unint64_t)a5;
      v14 = (llvm::Value *)v114;
    }
    v101 = a7;
    goto LABEL_158;
  }
  v21 = a9;
  LODWORD(v175) = 128;
  v22 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  v23 = 0;
  v173 = v22;
  v174 = 0;
  do
  {
    v24 = &v22[v23];
    *((_QWORD *)v24 + 2) = 0;
    *((_QWORD *)v24 + 3) = -4096;
    *(_QWORD *)v24 = &unk_1E814DA10;
    *((_QWORD *)v24 + 1) = 2;
    v23 += 64;
    *((_QWORD *)v24 + 4) = 0;
  }
  while (v23 != 0x2000);
  LOBYTE(v176) = 0;
  v179 = 0;
  v25 = &a9[a10];
  v26 = a6;
  v27 = (unint64_t *)(a6 + 24);
  v19 = &unk_1E814DA10;
  v163 = a1;
  do
  {
    v29 = (llvm::Instruction *)*--v25;
    v28 = v29;
    llvm::Instruction::clone(v29);
    v31 = (llvm::Value *)v30;
    v32 = *(_QWORD *)(v26 + 40);
    *(_QWORD *)(v30 + 40) = v32;
    *(_WORD *)(v32 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(v30 + 23) & 0x10) != 0)
    {
      v69 = *(_QWORD *)(v32 + 56);
      if (v69)
      {
        v70 = *(llvm::ValueSymbolTable **)(v69 + 104);
        if (v70)
          llvm::ValueSymbolTable::reinsertValue(v70, v31);
      }
    }
    v33 = *v27;
    *((_QWORD *)v31 + 4) = v27;
    *((_QWORD *)v31 + 3) = v33;
    *(_QWORD *)(v33 + 8) = (char *)v31 + 24;
    *v27 = (unint64_t)v31 + 24;
    v34 = (_QWORD *)operator new();
    *(_DWORD *)v34 = 3;
    v34[1] = 0;
    *((_DWORD *)v34 + 4) = 0;
    v34[5] = &v173;
    v34[3] = v34 + 5;
    v34[6] = 0;
    v34[4] = 0x200000001;
    v34[9] = v34 + 11;
    v34[10] = 0x400000000;
    v34[23] = v34 + 25;
    v34[24] = 0x100000000;
    v34[27] = v34 + 29;
    v34[28] = 0x1000000000;
    v165 = v34;
    v166 = v34;
    sub_1C5FD706C((uint64_t)v34, (uint64_t ***)v31);
    sub_1C5FD3718((uint64_t *)&v166, v35);
    llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v165, v36);
    v167 = 2;
    v168 = 0;
    v169 = (int32x2_t ****)v28;
    if (v28 != (llvm::Instruction *)-8192 && v28 != (llvm::Instruction *)-4096 && v28)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v167);
    v166 = &unk_1E814DA10;
    v170 = &v173;
    v37 = sub_1C52E2ED8((uint64_t)&v173, &v166);
    if (v169 != (int32x2_t ****)-8192 && v169 != (int32x2_t ****)-4096 && v169)
    {
      v38 = v167 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v167 & 0xFFFFFFFFFFFFFFF8) = v168;
      if (v168)
      {
        *v168 = *v168 & 7 | v38;
      }
      else
      {
        v39 = v169;
        v40 = ***v169;
        v41 = (unint64_t)v40[303];
        if (v41 <= v38)
        {
          v42 = v40[305].u32[0];
          if (v41 + 16 * v42 > v38)
          {
            v43 = v42 - 1;
            LODWORD(v44) = v43 & ((v169 >> 4) ^ (v169 >> 9));
            v45 = (int32x2_t *****)(v41 + 16 * v44);
            v46 = *v45;
            if (v169 == *v45)
            {
LABEL_26:
              *v45 = (int32x2_t ****)-8192;
              v40[304] = vadd_s32(v40[304], (int32x2_t)0x1FFFFFFFFLL);
              v39 = v169;
            }
            else
            {
              v47 = 1;
              while (v46 != (int32x2_t ****)-4096)
              {
                v48 = v44 + v47++;
                v44 = v48 & v43;
                v46 = *(int32x2_t *****)(v41 + 16 * v44);
                if (v169 == v46)
                {
                  v45 = (int32x2_t *****)(v41 + 16 * v44);
                  goto LABEL_26;
                }
              }
            }
            *((_BYTE *)v39 + 17) &= ~1u;
          }
        }
      }
    }
    v49 = (llvm::Value *)v37[7];
    if (v49 != v31)
    {
      if (v49 && v49 != (llvm::Value *)-8192 && v49 != (llvm::Value *)-4096)
      {
        v71 = v37[5] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v71 = v37[6];
        v72 = (unint64_t *)v37[6];
        if (v72)
        {
          *v72 = *v72 & 7 | v71;
        }
        else
        {
          v73 = v37[7];
          v74 = ***(int32x2_t ****)v73;
          v75 = (unint64_t)v74[303];
          if (v75 <= v71)
          {
            v76 = v74[305].u32[0];
            if (v75 + 16 * v76 > v71)
            {
              v77 = v76 - 1;
              LODWORD(v78) = v77 & ((v73 >> 4) ^ (v73 >> 9));
              v79 = (uint64_t *)(v75 + 16 * v78);
              v80 = *v79;
              if (v73 == *v79)
              {
LABEL_62:
                *v79 = -8192;
                v74[304] = vadd_s32(v74[304], (int32x2_t)0x1FFFFFFFFLL);
                v73 = v37[7];
              }
              else
              {
                v81 = 1;
                while (v80 != -4096)
                {
                  v82 = v78 + v81++;
                  v78 = v82 & v77;
                  v80 = *(_QWORD *)(v75 + 16 * v78);
                  if (v73 == v80)
                  {
                    v79 = (uint64_t *)(v75 + 16 * v78);
                    goto LABEL_62;
                  }
                }
              }
              *(_BYTE *)(v73 + 17) &= ~1u;
            }
          }
        }
      }
      v37[7] = v31;
      if (v31 != (llvm::Value *)-8192 && v31 != (llvm::Value *)-4096 && v31)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v37 + 5));
    }
    v50 = *(uint64_t **)(a1 + 168);
    if (v50)
    {
      v51 = *v50;
      v52 = *(_DWORD *)(v51 + 40);
      if (v52)
      {
        v53 = *(_QWORD *)(v51 + 24);
        v54 = v52 - 1;
        v55 = (v52 - 1) & ((v28 >> 4) ^ (v28 >> 9));
        v56 = *(llvm::Instruction **)(v53 + 16 * v55);
        if (v28 != v56)
        {
          v57 = 1;
          do
          {
            if (v56 == (llvm::Instruction *)-4096)
              goto LABEL_94;
            v58 = v55 + v57++;
            v55 = v58 & v54;
            v56 = *(llvm::Instruction **)(v53 + 16 * v55);
          }
          while (v28 != v56);
        }
        v59 = *(_QWORD *)(v53 + 16 * v55 + 8);
        if (v59)
        {
          if (*(_BYTE *)(v59 + 16) == 25)
          {
            v60 = *(uint64_t **)(a1 + 32);
            v61 = *((_DWORD *)v60 + 4);
            if (v61)
            {
              v62 = *((_QWORD *)v28 + 5);
              v63 = *v60;
              v64 = v61 - 1;
              v65 = ((v62 >> 4) ^ (v62 >> 9)) & (v61 - 1);
              v66 = *(_QWORD *)(v63 + 16 * v65);
              if (v62 == v66)
              {
LABEL_48:
                v11 = *(_QWORD *)(v63 + 16 * v65 + 8);
LABEL_66:
                a1 = *(_QWORD *)(v59 - 32);
                v20 = v11 + 56;
                while (1)
                {
                  while (1)
                  {
                    v83 = sub_1C477672C(v11 + 56, *(_QWORD *)(a1 + 64));
                    v84 = *(_QWORD *)(v11 + 64);
                    v85 = 72;
                    if (v84 == *(_QWORD *)(v11 + 56))
                      v85 = 76;
                    if (v83 == (_QWORD *)(v84 + 8 * *(unsigned int *)(v11 + v85)))
                    {
                      v94 = *(uint64_t ***)(v163 + 168);
                      v95 = (llvm::BasicBlock *)*((_QWORD *)v31 + 5);
                      v96 = a1;
                      a1 = v163;
                      DefinedAccess = llvm::MemorySSA::createDefinedAccess(*v94, (uint64_t)v31, v96, 0);
                      llvm::MemorySSA::insertIntoListsForBlock((uint64_t)*v94, (uint64_t)DefinedAccess, v95, 2);
                      v26 = a6;
                      goto LABEL_94;
                    }
                    v86 = *(unsigned __int8 *)(a1 + 16);
                    if (v86 == 27)
                      break;
                    if (v86 == 25)
                      v91 = a1;
                    else
                      v91 = 0;
                    if (v91)
                      v92 = (uint64_t *)(v91 - 32);
                    else
                      v92 = (uint64_t *)(a1 - 64);
                    a1 = *v92;
                  }
                  LoopPredecessor = (_QWORD *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(v11);
                  if (!LoopPredecessor)
                    break;
                  v88 = (_QWORD *)LoopPredecessor[5];
                  if (v88 == LoopPredecessor + 5)
                    break;
                  if (v88)
                    v89 = v88 - 3;
                  else
                    v89 = 0;
                  if (*((_BYTE *)v89 + 16) == 30)
                  {
                    if ((*((_DWORD *)v89 + 5) & 0x7FFFFFF) == 3)
                      break;
                  }
                  else
                  {
                    v90 = 0;
                    switch(*((_BYTE *)v89 + 16))
                    {
                      case 0x1D:
                      case 0x21:
                      case 0x22:
                      case 0x23:
                      case 0x24:
                      case 0x25:
                      case 0x26:
                        goto LABEL_90;
                      case 0x1E:
                        __break(1u);
                        goto LABEL_190;
                      case 0x1F:
                        v93 = (*((_DWORD *)v89 + 5) >> 1) & 0x3FFFFFF;
                        break;
                      case 0x20:
                        v93 = (*((_DWORD *)v89 + 5) & 0x7FFFFFF) - 1;
                        break;
                      case 0x27:
                        v93 = *((_DWORD *)v89 + 20) + 1;
                        break;
                      default:
                        goto LABEL_78;
                    }
                    if (v93 != 1)
                      break;
                  }
                  v90 = (uint64_t)LoopPredecessor;
LABEL_90:
                  a1 = sub_1C4EDF32C(a1, v90);
                }
LABEL_78:
                v90 = 0;
                goto LABEL_90;
              }
              v67 = 1;
              while (v66 != -4096)
              {
                v68 = v65 + v67++;
                v65 = v68 & v64;
                v66 = *(_QWORD *)(v63 + 16 * v65);
                if (v62 == v66)
                  goto LABEL_48;
              }
            }
            v11 = 0;
            goto LABEL_66;
          }
        }
      }
    }
LABEL_94:
    ;
  }
  while (v25 != a9);
  v98 = *a9;
  v167 = 2;
  v168 = 0;
  v169 = (int32x2_t ****)v98;
  if (v98 != (unsigned __int8 *)-8192 && v98 != (unsigned __int8 *)-4096 && v98 != 0)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v167);
  v166 = &unk_1E814DA10;
  v170 = &v173;
  v100 = sub_1C52E2ED8((uint64_t)&v173, &v166);
  v101 = a7;
  v11 = a4;
  v20 = (unint64_t)a5;
  if (v169 != (int32x2_t ****)-8192 && v169 != (int32x2_t ****)-4096 && v169)
  {
    v102 = v167 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v167 & 0xFFFFFFFFFFFFFFF8) = v168;
    if (v168)
    {
      *v168 = *v168 & 7 | v102;
    }
    else
    {
      v103 = v169;
      v104 = ***v169;
      v105 = (unint64_t)v104[303];
      if (v105 <= v102)
      {
        v106 = v104[305].u32[0];
        if (v105 + 16 * v106 > v102)
        {
          v107 = v106 - 1;
          LODWORD(v108) = v107 & ((v169 >> 4) ^ (v169 >> 9));
          v109 = (int32x2_t *****)(v105 + 16 * v108);
          v110 = *v109;
          if (v169 == *v109)
          {
LABEL_112:
            *v109 = (int32x2_t ****)-8192;
            v104[304] = vadd_s32(v104[304], (int32x2_t)0x1FFFFFFFFLL);
            v103 = v169;
          }
          else
          {
            v111 = 1;
            while (v110 != (int32x2_t ****)-4096)
            {
              v112 = v108 + v111++;
              v108 = v112 & v107;
              v110 = *(int32x2_t *****)(v105 + 16 * v108);
              if (v169 == v110)
              {
                v109 = (int32x2_t *****)(v105 + 16 * v108);
                goto LABEL_112;
              }
            }
          }
          *((_BYTE *)v103 + 17) &= ~1u;
        }
      }
    }
  }
  v14 = (llvm::Value *)v100[7];
  if (v179)
  {
    sub_1C4E43068((uint64_t)&v176);
    MEMORY[0x1CAA32FB4](v176, 8);
    v179 = 0;
  }
  v117 = (char *)v173;
  if ((_DWORD)v175)
  {
    v118 = (char *)v173 + 64 * (unint64_t)v175;
    do
    {
      v119 = *((_QWORD *)v117 + 3);
      if ((v119 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v120 = *((_QWORD *)v117 + 7);
        if (v120)
        {
          if (v120 != -8192 && v120 != -4096)
          {
            v121 = *((_QWORD *)v117 + 5) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v121 = *((_QWORD *)v117 + 6);
            v122 = (unint64_t *)*((_QWORD *)v117 + 6);
            if (v122)
            {
              *v122 = *v122 & 7 | v121;
            }
            else
            {
              v123 = *((_QWORD *)v117 + 7);
              v124 = ***(int32x2_t ****)v123;
              v125 = (unint64_t)v124[303];
              if (v125 <= v121)
              {
                v126 = v124[305].u32[0];
                if (v125 + 16 * v126 > v121)
                {
                  v127 = v126 - 1;
                  LODWORD(v128) = v127 & ((v123 >> 4) ^ (v123 >> 9));
                  v129 = (uint64_t *)(v125 + 16 * v128);
                  v130 = *v129;
                  if (v123 == *v129)
                  {
LABEL_132:
                    *v129 = -8192;
                    v124[304] = vadd_s32(v124[304], (int32x2_t)0x1FFFFFFFFLL);
                    v123 = *((_QWORD *)v117 + 7);
                  }
                  else
                  {
                    v131 = 1;
                    while (v130 != -4096)
                    {
                      v132 = v128 + v131++;
                      v128 = v132 & v127;
                      v130 = *(_QWORD *)(v125 + 16 * v128);
                      if (v123 == v130)
                      {
                        v129 = (uint64_t *)(v125 + 16 * v128);
                        goto LABEL_132;
                      }
                    }
                  }
                  *(_BYTE *)(v123 + 17) &= ~1u;
                }
              }
            }
            v119 = *((_QWORD *)v117 + 3);
          }
        }
      }
      if (v119 != -4096 && v119 != -8192 && v119 != 0)
      {
        v134 = *((_QWORD *)v117 + 1) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v134 = *((_QWORD *)v117 + 2);
        v135 = (unint64_t *)*((_QWORD *)v117 + 2);
        if (v135)
        {
          *v135 = *v135 & 7 | v134;
        }
        else
        {
          v136 = *((_QWORD *)v117 + 3);
          v137 = ***(int32x2_t ****)v136;
          v138 = (unint64_t)v137[303];
          if (v138 <= v134)
          {
            v139 = v137[305].u32[0];
            if (v138 + 16 * v139 > v134)
            {
              v140 = v139 - 1;
              LODWORD(v141) = v140 & ((v136 >> 4) ^ (v136 >> 9));
              v142 = (uint64_t *)(v138 + 16 * v141);
              v143 = *v142;
              if (v136 == *v142)
              {
LABEL_151:
                *v142 = -8192;
                v137[304] = vadd_s32(v137[304], (int32x2_t)0x1FFFFFFFFLL);
                v136 = *((_QWORD *)v117 + 3);
              }
              else
              {
                v144 = 1;
                while (v143 != -4096)
                {
                  v145 = v141 + v144++;
                  v141 = v145 & v140;
                  v143 = *(_QWORD *)(v138 + 16 * v141);
                  if (v136 == v143)
                  {
                    v142 = (uint64_t *)(v138 + 16 * v141);
                    goto LABEL_151;
                  }
                }
              }
              *(_BYTE *)(v136 + 17) &= ~1u;
            }
          }
        }
      }
      v117 += 64;
    }
    while (v117 != v118);
    v117 = (char *)v173;
  }
  MEMORY[0x1CAA32FB4](v117, 8);
  LODWORD(v19) = 0;
  v115 = a6;
LABEL_158:
  v25 = *(unsigned __int8 ***)(v115 - 32);
  v27 = *(unint64_t **)(v115 + 40);
  sub_1C4773D54((uint64_t)&v173, v115, 0, 0, 0);
  v21 = sub_1C61DB60C((uint64_t *)&v173, v14, (llvm::BasicBlock *)v11, (llvm::BasicBlock *)v20, v101);
  LoopPredecessor = v173;
  if (v173 == &v175)
  {
    if ((_DWORD)v19)
      goto LABEL_160;
  }
  else
  {
LABEL_190:
    free(LoopPredecessor);
    if ((_DWORD)v19)
LABEL_160:
      llvm::Instruction::swapProfMetadata((llvm::Instruction *)v21);
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(a6 + 40) + 40, (uint64_t ***)a6);
  v146 = *(_QWORD *)(a6 + 24);
  v147 = *(_QWORD **)(a6 + 32);
  *v147 = v146;
  *(_QWORD *)(v146 + 8) = v147;
  *(_QWORD *)(a6 + 24) = 0;
  *(_QWORD *)(a6 + 32) = 0;
  v148 = *(_QWORD *)(a1 + 144);
  if (v148)
  {
    v166 = &v168;
    v167 = 0x300000000;
    if ((unsigned __int8 **)v11 == v25)
    {
      if (v20 == v11)
      {
        v149 = 0;
      }
      else
      {
        v150 = (void *)(v20 & 0xFFFFFFFFFFFFFFFBLL);
        v168 = v27;
        v149 = 1;
        v151 = 24;
LABEL_168:
        *(void **)((char *)&v166 + v151) = v150;
        LODWORD(v167) = v149;
      }
    }
    else
    {
      v168 = v27;
      v169 = (int32x2_t ****)(v11 & 0xFFFFFFFFFFFFFFFBLL);
      v149 = 1;
      LODWORD(v167) = 1;
      if ((unsigned __int8 **)v20 != v25)
      {
        v170 = (void **)v27;
        v171 = v20 & 0xFFFFFFFFFFFFFFFBLL;
        v150 = (void *)((unint64_t)v25 | 4);
        v172 = v27;
        v149 = 3;
        v151 = 56;
        goto LABEL_168;
      }
    }
    v153 = *(int32x2_t ***)(a1 + 168);
    if (v153)
    {
      llvm::MemorySSAUpdater::applyUpdates(v153, (unint64_t *)&v168, v149, v148, 1);
    }
    else
    {
      sub_1C4E25D14((uint64_t)&v173, (unint64_t *)&v168, v149, 1u);
      llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(v148, (uint64_t)&v173, 0);
      if (v181 != v182)
        free(v181);
      sub_1C4E28CA4((uint64_t)&v180);
      sub_1C4E28CA4((uint64_t)&v173);
    }
    if (v166 != &v168)
      free(v166);
    v152 = *(void **)(a1 + 144);
  }
  else
  {
    v152 = 0;
  }
  v154 = *(_QWORD *)(a1 + 32);
  v155 = *(_QWORD *)(a1 + 168);
  v173 = v152;
  v174 = 0;
  v175 = v154;
  v176 = v155;
  v177 = 0x10000;
  v178 = 1;
  LOWORD(v170) = 257;
  llvm::SplitCriticalEdge((llvm::Instruction *)v21, 0, (uint64_t)&v173, (llvm::Twine *)&v166);
  LOWORD(v170) = 257;
  return llvm::SplitCriticalEdge((llvm::Instruction *)v21, 1u, (uint64_t)&v173, (llvm::Twine *)&v166);
}

uint64_t sub_1C5BAE778(uint64_t a1)
{
  _DWORD *v2;

  v2 = *(_DWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      sub_1C631E58C(v2 + 14);
      MEMORY[0x1CAA32FB4](*((_QWORD *)v2 + 7), 8);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1C5BAE7CC(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE *v8;
  void *v9;
  uint64_t v10;
  int v11;
  _BYTE v12[64];

  v8 = v12;
  v9 = v12;
  v10 = 8;
  v11 = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v8, **(_QWORD **)(a1 + 32));
  v7 = 0;
  v4 = sub_1C5BAEAB0(a1, a2, &v7, (llvm::SmallPtrSetImplBase *)&v8);
  v5 = v7;
  if (v9 != v8)
    free(v9);
  if (v4)
    return v5;
  else
    return 0;
}

void sub_1C5BAE858(uint64_t a1, uint64_t a2, llvm::Value *a3, llvm::ValueHandleBase *a4, llvm *a5, uint64_t a6)
{
  uint64_t AnalysisPass;
  const llvm::Twine *v13;
  uint64_t v14;
  int32x2_t *v15;
  const llvm::Loop *v16;
  const llvm::Loop *v17;
  llvm *v18;
  llvm::BasicBlock *v19;
  llvm::BasicBlock *v20;
  llvm::DominatorTree *v21;
  int32x2_t **v22;
  llvm::BasicBlock *v23;
  uint64_t v24;
  llvm::BasicBlock *v25;
  uint64_t v26;
  llvm::DomTreeUpdater *v27;
  int32x2_t **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  llvm::Type *v36;
  llvm::DSOLocalEquivalent **v37;
  unsigned __int8 *v38;
  int v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  llvm::UndefValue *v51;
  llvm::Value *v52;
  _BYTE v53[32];
  __int16 v54;

  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), llvm::ScalarEvolutionWrapperPass::ID, 1);
  if (AnalysisPass)
  {
    v14 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, llvm::ScalarEvolutionWrapperPass::ID);
    if (v14)
    {
      v15 = *(int32x2_t **)(v14 + 32);
      v16 = (const llvm::Loop *)a2;
      do
      {
        v17 = v16;
        v16 = *(const llvm::Loop **)v16;
      }
      while (v16);
      llvm::ScalarEvolution::forgetLoop(v15, v17);
    }
  }
  v19 = *(llvm::BasicBlock **)(a1 + 176);
  v18 = *(llvm **)(a1 + 184);
  v20 = *(llvm::BasicBlock **)(a1 + 144);
  v21 = *(llvm::DominatorTree **)(a1 + 32);
  v22 = *(int32x2_t ***)(a1 + 168);
  v54 = 257;
  v23 = (llvm::BasicBlock *)llvm::SplitEdge(v18, v19, v20, v21, v22, (llvm::MemorySSAUpdater *)v53, v13);
  v24 = *((_QWORD *)a5 + 6);
  if (v24)
    v25 = (llvm::BasicBlock *)(v24 - 24);
  else
    v25 = 0;
  v26 = *(_QWORD *)(a1 + 144);
  v27 = *(llvm::DomTreeUpdater **)(a1 + 32);
  v28 = *(int32x2_t ***)(a1 + 168);
  v54 = 257;
  v29 = sub_1C5EBD70C(a5, v25, 0, v26, v27, v28, (llvm::Twine *)v53, 0);
  v31 = *(_QWORD *)(a1 + 184);
  v32 = *(_QWORD *)(v31 + 40);
  if (v32 == v31 + 40)
  {
    v34 = 0;
  }
  else
  {
    if (v32)
      v33 = v32 - 24;
    else
      v33 = 0;
    if (*(unsigned __int8 *)(v33 + 16) - 29 >= 0xB)
      v34 = 0;
    else
      v34 = v33;
  }
  if (*(_BYTE *)(v34 + 16) == 30)
    v35 = v34;
  else
    v35 = 0;
  sub_1C5BADA28(a1, a3, a4, v29, v23, v35, a6, v30, 0, 0);
  if (v35)
  {
    if ((*(_BYTE *)(v35 + 23) & 8) != 0)
    {
      v51 = llvm::UndefValue::get(*(llvm::UndefValue **)v35, v36);
      llvm::ValueAsMetadata::handleRAUW((uint64_t *)v35, v51, v52);
    }
    v38 = *(unsigned __int8 **)(v35 + 48);
    if (v38)
      llvm::MetadataTracking::untrack(v35 + 48, v38);
    llvm::Value::~Value((llvm::Value *)v35, (llvm::Value *)v38);
    v39 = *(_DWORD *)(v35 + 20);
    if ((v39 & 0x40000000) != 0)
    {
      v46 = *(char **)(v35 - 8);
      v41 = (char *)(v35 - 8);
      v45 = v46;
      v47 = v39 & 0x7FFFFFF;
      if ((_DWORD)v47)
      {
        v48 = 32 * v47;
        do
        {
          v49 = &v45[v48];
          if (*(_QWORD *)&v45[v48 - 32])
          {
            **((_QWORD **)v49 - 2) = *((_QWORD *)v49 - 3);
            v50 = *((_QWORD *)v49 - 3);
            if (v50)
              *(_QWORD *)(v50 + 16) = *((_QWORD *)v49 - 2);
          }
          v48 -= 32;
        }
        while (v48);
      }
      operator delete(v45);
    }
    else
    {
      v40 = v39 & 0x7FFFFFF;
      v41 = (char *)(v35 - 32 * v40);
      if ((_DWORD)v40)
      {
        v42 = (char *)v34;
        do
        {
          v43 = *((_QWORD *)v42 - 4);
          v42 -= 32;
          if (v43)
          {
            **(_QWORD **)(v34 - 16) = *(_QWORD *)(v34 - 24);
            v44 = *(_QWORD *)(v34 - 24);
            if (v44)
              *(_QWORD *)(v44 + 16) = *(_QWORD *)(v34 - 16);
          }
          v34 = (uint64_t)v42;
        }
        while (v42 != v41);
      }
      if (v39 < 0)
        v41 = &v41[-*((_QWORD *)v41 - 1) - 8];
    }
    operator delete(v41);
  }
  *(_BYTE *)(a1 + 129) = 1;
  sub_1C5BAEE50(a1, a2, a3, (uint64_t ***)a4, 0, v37);
}

uint64_t sub_1C5BAEAB0(uint64_t a1, uint64_t a2, uint64_t *a3, llvm::SmallPtrSetImplBase *a4)
{
  char v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  int v36;
  uint64_t v38;

  sub_1C4774094(a4, a2);
  if (!v8)
    return 0;
  v9 = sub_1C477672C(a1 + 56, a2);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = 72;
  if (v10 == *(_QWORD *)(a1 + 56))
    v11 = 76;
  if (v9 == (_QWORD *)(v10 + 8 * *(unsigned int *)(a1 + v11)))
  {
    if (*a3)
      return 0;
    *a3 = a2;
    return 1;
  }
  v12 = *(_QWORD *)(a2 + 40);
  v38 = a2 + 40;
  if (v12 != a2 + 40)
  {
    if (v12)
      v13 = v12 - 24;
    else
      v13 = 0;
    v14 = *(unsigned __int8 *)(v13 + 16);
    v15 = v14 - 29;
    if (v14 == 30)
    {
      if ((*(_DWORD *)(v13 + 20) & 0x7FFFFFF) == 3)
        v16 = 2;
      else
        v16 = 1;
    }
    else
    {
      v16 = 2;
      switch(v15)
      {
        case 1:
          __break(1u);
          goto LABEL_56;
        case 2:
          v16 = (*(_DWORD *)(v13 + 20) >> 1) & 0x3FFFFFF;
          break;
        case 3:
        case 9:
LABEL_56:
          v16 = (*(_DWORD *)(v13 + 20) & 0x7FFFFFF) - 1;
          break;
        case 4:
          goto LABEL_13;
        case 7:
          v16 = *(_WORD *)(v13 + 18) & 1;
          break;
        case 8:
          v16 = 1;
          goto LABEL_13;
        case 10:
          v16 = *(_DWORD *)(v13 + 80) + 1;
          break;
        default:
          goto LABEL_23;
      }
      if (!v16)
        goto LABEL_23;
    }
LABEL_13:
    v17 = 0;
    v18 = 0;
    v19 = v13 - 64;
    v20 = v16;
    do
    {
      v21 = *(unsigned __int8 *)(v13 + 16);
      if (v21 != 30)
        __asm { BR              X9 }
      if ((sub_1C5BAEAB0(a1, *(_QWORD *)(v13 - 32 - 32 * v18), a3, a4) & 1) == 0)
        return 0;
      ++v18;
      v17 += 2;
      v19 += 32;
    }
    while (v20 != v18);
  }
LABEL_23:
  v23 = *(_QWORD *)(a2 + 48);
  v24 = a2 + 40;
  if (v23 == v38)
    return 1;
  while (1)
  {
    if (v23)
      v25 = v23 - 24;
    else
      v25 = 0;
    v26 = *(unsigned __int8 *)(v25 + 16) - 33;
    if (v26 > 0x37)
      goto LABEL_31;
    if (((1 << (*(_BYTE *)(v25 + 16) - 33)) & 0x808001D0000010) != 0)
      return 0;
    if (((1 << (*(_BYTE *)(v25 + 16) - 33)) & 0x8000000000041) == 0)
    {
      if (v26 == 27 && (*(_WORD *)(v25 + 18) & 0x301) != 0)
        return 0;
      goto LABEL_31;
    }
    v27 = *(_QWORD *)(v25 + 64);
    if (v27 && (*(_BYTE *)(v27 + 17) & 0x30) != 0)
      goto LABEL_31;
    v28 = *(_DWORD *)(v25 + 20);
    if (v28 < 0)
    {
      v29 = v25 - 32 * (v28 & 0x7FFFFFF);
      v32 = *(_QWORD *)(v29 - 8);
      v30 = v29 - 8;
      v31 = v32;
      if (v32)
        break;
    }
LABEL_38:
    if ((llvm::CallBase::hasFnAttrOnCalledFunction(v25, 45) & 1) == 0)
    {
      result = llvm::CallBase::hasFnAttrOnCalledFunction(v25, 44);
      if (!(_DWORD)result)
        return result;
    }
LABEL_31:
    if ((llvm::Instruction::mayThrow((llvm::Instruction *)v25) & 1) != 0
      || (llvm::Instruction::willReturn((llvm::Instruction *)v25) & 1) == 0)
    {
      return 0;
    }
    v23 = *(_QWORD *)(v23 + 8);
    result = 1;
    if (v23 == v24)
      return result;
  }
  v33 = -v31;
  while (1)
  {
    v34 = *(_DWORD *)(*(_QWORD *)(v30 + v33) + 8);
    v35 = v34 > 7;
    v36 = (1 << v34) & 0x83;
    if (v35 || v36 == 0)
      return 0;
    v33 += 16;
    v24 = v38;
    if (!v33)
      goto LABEL_38;
  }
}

void sub_1C5BAEE50(uint64_t a1, uint64_t a2, const llvm::APInt *a3, uint64_t ***a4, llvm::Type *a5, llvm::DSOLocalEquivalent **a6)
{
  llvm::ValueHandleBase *v6;
  uint64_t v9;
  llvm::User **v10;
  uint64_t v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::ValueAsMetadata **v16;
  llvm::User **v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  llvm::User **v25;
  llvm::User **v26;
  llvm::User *v27;
  uint64_t v28;
  _QWORD *v29;
  _BOOL8 v30;
  llvm::ConstantInt *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  llvm::ValueAsMetadata *v37;
  _QWORD *v39;
  const llvm::APInt *v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  const llvm::APInt *v44;
  llvm::ValueHandleBase *v45;
  BOOL v46;
  BOOL v47;
  uint64_t v48;
  llvm::Value *v49;
  llvm::ConstantInt *v50;
  llvm::ValueAsMetadata **v51;
  llvm::ValueAsMetadata **v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  llvm::ValueAsMetadata **v58;
  llvm::ValueAsMetadata *v59;
  int v60;
  int v61;
  char *v62;
  llvm *v63;
  uint64_t v64;
  llvm::BasicBlock *v65;
  uint64_t LoopLatch;
  const llvm::Twine *v67;
  llvm::BasicBlock *v68;
  llvm::DominatorTree *v69;
  int32x2_t **v70;
  int v71;
  char *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t ***v88;
  uint64_t ***v89;
  uint64_t **v90;
  uint64_t **v91;
  const llvm::APInt *v92;
  uint64_t v93;
  llvm::Value *v94;
  _DWORD *v95;
  uint64_t v96;
  llvm::BranchInst *v97;
  _QWORD *v98;
  llvm::Type *v99;
  uint64_t i;
  uint64_t v101;
  uint64_t v102;
  llvm::UndefValue *v103;
  llvm::ConstantInt *v104;
  unsigned int v105;
  char v106;
  llvm::ConstantInt *v107;
  unsigned int v108;
  unint64_t v109;
  llvm::User **v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  unint64_t v114;
  uint64_t *v115;
  _BYTE *v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  _BYTE *v122;
  llvm::UndefValue *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  unsigned __int8 *v129;
  BOOL v130;
  llvm::ValueAsMetadata **v131;
  llvm::User **v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t j;
  llvm::User *v141;
  llvm::User **v142;
  llvm::User **v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  int v158;
  llvm::MemoryAccess *v159;
  int32x2_t **v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  unsigned __int8 *v166;
  BOOL v167;
  llvm::ValueAsMetadata **v168;
  llvm::User **v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  __int32 v177;
  int32x2_t v178;
  __int32 v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  int v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  int v187;
  llvm::BasicBlock *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  unsigned __int8 *v197;
  BOOL v198;
  llvm::ValueAsMetadata **v199;
  llvm::ValueAsMetadata **v200;
  llvm::ValueAsMetadata **v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  llvm::ValueAsMetadata **v210;
  llvm::ValueAsMetadata *v211;
  llvm::ValueAsMetadata **v212;
  llvm::ValueAsMetadata **v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unsigned int v229;
  BOOL v230;
  int v231;
  llvm::BasicBlock *v233;
  llvm::BasicBlock *v234;
  llvm::BasicBlock *v235;
  llvm::BasicBlock *v236;
  uint64_t *v237;
  llvm::Value *v238;
  llvm::Value *v239;
  void **v240;
  llvm::Value *v242;
  llvm::ValueAsMetadata **v244;
  llvm::ValueAsMetadata **v245;
  char *v246;
  void **v247;
  __int128 v248;
  __int128 v249;
  __int16 v250;
  void *v251;
  uint64_t v252;
  _BYTE v253[16];
  __int16 v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char v259;
  _BYTE *v260;
  _BYTE *v261;
  uint64_t v262;
  int v263;
  _BYTE v264[64];
  _BYTE v265[24];
  __int16 v266;
  uint64_t v267;

  v6 = (llvm::ValueHandleBase *)a4;
  v267 = *MEMORY[0x1E0C80C00];
  v244 = 0;
  v245 = 0;
  v246 = 0;
  if ((a5 & 1) != 0)
    goto LABEL_2;
  if (*((_BYTE *)a4 + 16) != 16 || *((_DWORD *)*a4 + 2) != 269)
  {
    v34 = *((_QWORD *)a3 + 1);
    if (!v34)
      return;
    v10 = 0;
    v35 = a2 + 56;
    v237 = **a4;
    v239 = (llvm::Value *)(a2 + 56);
    while (1)
    {
      v37 = *(llvm::ValueAsMetadata **)(v34 + 24);
      if (v37 && *((unsigned __int8 *)v37 + 16) >= 0x1Cu)
      {
        v39 = sub_1C477672C(v35, *((_QWORD *)v37 + 5));
        v41 = *(_QWORD *)(a2 + 64);
        v42 = 76;
        if (v41 != *(_QWORD *)(a2 + 56))
          v42 = 72;
        if (v39 != (_QWORD *)(v41 + 8 * *(unsigned int *)(a2 + v42)))
          break;
      }
LABEL_106:
      v34 = *(_QWORD *)(v34 + 8);
      if (!v34)
      {
        v25 = v244;
        goto LABEL_171;
      }
    }
    if (*((_BYTE *)v37 + 16) != 81
      || (v43 = *((_WORD *)v37 + 9), (v43 & 0x3E) != 0x20)
      || ((v44 = (const llvm::APInt *)*((_QWORD *)v37 - 8),
           v45 = (llvm::ValueHandleBase *)*((_QWORD *)v37 - 4),
           v44 == a3)
        ? (v46 = v45 == v6)
        : (v46 = 0),
          !v46 && (v44 == v6 ? (v47 = v45 == a3) : (v47 = 0), !v47)))
    {
LABEL_78:
      v51 = v245;
      if (v245 >= (llvm::ValueAsMetadata **)v246)
      {
        v52 = v244;
        v53 = v245 - v244;
        v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 61)
LABEL_380:
          abort();
        v55 = v246 - (char *)v244;
        if ((v246 - (char *)v244) >> 2 > v54)
          v54 = v55 >> 2;
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
          v56 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v56 = v54;
        if (v56)
        {
          if (v56 >> 61)
LABEL_381:
            sub_1C4764EE4();
          v57 = (char *)operator new(8 * v56);
        }
        else
        {
          v57 = 0;
        }
        v58 = (llvm::ValueAsMetadata **)&v57[8 * v53];
        *v58 = v37;
        v10 = v58 + 1;
        if (v51 != v52)
        {
          do
          {
            v59 = *--v51;
            *--v58 = v59;
          }
          while (v51 != v52);
          v51 = v244;
        }
        v244 = v58;
        v246 = &v57[8 * v56];
        if (v51)
          operator delete(v51);
        v6 = (llvm::ValueHandleBase *)a4;
      }
      else
      {
        *v245 = v37;
        v10 = v51 + 1;
      }
      v245 = v10;
      if (*((_BYTE *)v37 + 16) == 31 && *((_BYTE *)v6 + 16) == 16)
      {
        sub_1C4E5D490((uint64_t)v37, (uint64_t)v6);
        if (v60 != 4294967294)
        {
          v61 = *((_DWORD *)v37 + 5);
          if ((v61 & 0x40000000) != 0)
            v62 = (char *)*((_QWORD *)v37 - 1);
          else
            v62 = (char *)v37 - 32 * (v61 & 0x7FFFFFF);
          v63 = (llvm *)*((_QWORD *)v37 + 5);
          v64 = (2 * v60 + 3);
          v65 = *(llvm::BasicBlock **)&v62[32 * v64];
          LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(a2);
          if (sub_1C4F3EF30((uint64_t)v37, (uint64_t)v65)
            && (!LoopLatch
             || !llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*(_QWORD *)(a1 + 144), (uint64_t)v65, LoopLatch)))
          {
            v68 = *(llvm::BasicBlock **)(a1 + 144);
            v69 = *(llvm::DominatorTree **)(a1 + 32);
            v70 = *(int32x2_t ***)(a1 + 168);
            v254 = 257;
            llvm::SplitEdge(v63, v65, v68, v69, v70, (llvm::MemorySSAUpdater *)&v251, v67);
            v71 = *((_DWORD *)v37 + 5);
            if ((v71 & 0x40000000) != 0)
              v72 = (char *)*((_QWORD *)v37 - 1);
            else
              v72 = (char *)v37 - 32 * (v71 & 0x7FFFFFF);
            v73 = *(_QWORD **)&v72[32 * v64];
            v75 = v73 + 5;
            v74 = (_QWORD *)v73[5];
            if (v74 == v73 + 5)
            {
              v76 = 0;
            }
            else
            {
              if (v74)
                v76 = v74 - 3;
              else
                v76 = 0;
              if (*((unsigned __int8 *)v76 + 16) - 29 >= 0xB)
                v76 = 0;
            }
            v77 = *((unsigned __int8 *)v76 + 16);
            v233 = (llvm::BasicBlock *)v73;
            if (v77 != 30)
              __asm { BR              X10 }
            v234 = (llvm::BasicBlock *)*(v76 - 4);
            v251 = "us-unreachable";
            v254 = 259;
            v78 = *((_QWORD *)v63 + 7);
            v79 = operator new();
            *(_QWORD *)v79 = *v237 + 1600;
            *(_QWORD *)(v79 + 8) = 0;
            v80 = *(_DWORD *)(v79 + 20) & 0xC0000000;
            *(_QWORD *)(v79 + 24) = 0;
            v81 = v79 + 24;
            *(_DWORD *)(v79 + 16) = 22;
            *(_DWORD *)(v79 + 20) = v80;
            *(_QWORD *)(v79 + 32) = 0;
            *(_QWORD *)(v79 + 40) = v79 + 40;
            *(_QWORD *)(v79 + 48) = v79 + 40;
            *(_QWORD *)(v79 + 56) = 0;
            if (v78)
            {
              v82 = v78 + 72;
              if (v234)
                v83 = (uint64_t *)((char *)v234 + 24);
              else
                v83 = (uint64_t *)(v78 + 72);
              llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v82, (_QWORD *)v79);
              v84 = *v83;
              *(_QWORD *)(v79 + 24) = *v83;
              *(_QWORD *)(v79 + 32) = v83;
              *(_QWORD *)(v84 + 8) = v81;
              *v83 = v81;
            }
            llvm::Value::setName((uint64_t ***)v79, (uint64_t)&v251);
            v85 = (char *)operator new(0x40uLL);
            *(_QWORD *)v85 = *v237 + 1576;
            *((_QWORD *)v85 + 1) = 0;
            v85[16] = 35;
            *(_OWORD *)(v85 + 44) = 0u;
            *(_OWORD *)(v85 + 33) = 0u;
            *(_OWORD *)(v85 + 17) = 0u;
            *(_WORD *)(v79 + 18) &= ~0x8000u;
            v86 = *(_QWORD *)(v79 + 40);
            *((_QWORD *)v85 + 4) = v79 + 40;
            *((_QWORD *)v85 + 5) = v79;
            *((_QWORD *)v85 + 3) = v86;
            v85 += 24;
            *(_QWORD *)(v86 + 8) = v85;
            *(_QWORD *)(v79 + 40) = v85;
            v87 = (_QWORD *)*v75;
            if ((_QWORD *)*v75 == v75)
            {
              v89 = 0;
            }
            else
            {
              if (v87)
                v88 = (uint64_t ***)(v87 - 3);
              else
                v88 = 0;
              if (*((unsigned __int8 *)v88 + 16) - 29 >= 0xB)
                v89 = 0;
              else
                v89 = v88;
            }
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v89[5] + 5), v89);
            v90 = v89[3];
            v91 = v89[4];
            *v91 = (uint64_t *)v90;
            v90[1] = (uint64_t *)v91;
            v89[3] = 0;
            v89[4] = 0;
            llvm::Value::deleteValue((llvm::Value *)v89);
            v93 = *v237;
            v94 = *(llvm::Value **)(*v237 + 1560);
            if (!v94)
            {
              v107 = *(llvm::ConstantInt **)(v93 + 1888);
              v108 = *(_DWORD *)(v93 + 1896);
              LODWORD(v252) = v108 >> 8;
              if (v108 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v251, 1, 0);
              }
              else
              {
                if (v108 <= 0xFF)
                  LOBYTE(v109) = 0;
                else
                  v109 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v108);
                v251 = (void *)(v109 & 1);
              }
              v94 = llvm::ConstantInt::get(v107, (llvm::LLVMContext *)&v251, v92);
              if (v252 >= 0x41 && v251)
                MEMORY[0x1CAA32F9C](v251, 0x1000C8000313F17);
              *(_QWORD *)(v93 + 1560) = v94;
            }
            v95 = operator new(0xA0uLL);
            v96 = 0;
            v97 = (llvm::BranchInst *)(v95 + 24);
            v95[29] = v95[29] & 0x38000000 | 3;
            do
            {
              v98 = &v95[v96];
              *v98 = 0;
              v98[1] = 0;
              v98[2] = 0;
              v98[3] = v97;
              v96 += 8;
            }
            while (v96 != 24);
            llvm::BranchInst::BranchInst(v97, (llvm::BasicBlock *)v79, v234, v94, v233);
            if (*((_QWORD **)v233 + 5) != v75)
            {
              for (i = *((_QWORD *)v233 + 6); ; i = *(_QWORD *)(v101 + 32))
              {
                v101 = i - 24;
                v102 = i ? i - 24 : 0;
                if (!i || *(_BYTE *)(v102 + 16) != 83)
                  break;
                v103 = llvm::UndefValue::get(*(llvm::UndefValue **)v101, v99);
                sub_1C5276870(v101, (uint64_t)v63, (uint64_t)v103);
              }
            }
            llvm::DominatorTreeBase<llvm::BasicBlock,false>::addNewBlock(*(_QWORD *)(a1 + 144), v79, (uint64_t)v233);
          }
          v6 = (llvm::ValueHandleBase *)a4;
          v35 = (uint64_t)v239;
        }
      }
      goto LABEL_106;
    }
    v48 = ***(_QWORD ***)v37;
    if ((v43 & 0x3F) == 0x20)
    {
      v49 = *(llvm::Value **)(v48 + 1568);
      if (v49)
        goto LABEL_76;
      v50 = *(llvm::ConstantInt **)(v48 + 1888);
      LODWORD(v252) = *(_DWORD *)(v48 + 1896) >> 8;
      if (v252 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v251, 0, 0);
      else
        v251 = 0;
      v49 = llvm::ConstantInt::get(v50, (llvm::LLVMContext *)&v251, v40);
      if (v252 >= 0x41 && v251)
        MEMORY[0x1CAA32F9C](v251, 0x1000C8000313F17);
      *(_QWORD *)(v48 + 1568) = v49;
    }
    else
    {
      v49 = *(llvm::Value **)(v48 + 1560);
      if (v49)
        goto LABEL_76;
      v104 = *(llvm::ConstantInt **)(v48 + 1888);
      v105 = *(_DWORD *)(v48 + 1896);
      LODWORD(v252) = v105 >> 8;
      if (v105 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v251, 1, 0);
      }
      else
      {
        if (v105 <= 0xFF)
          v106 = 0;
        else
          v106 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v105);
        v251 = (void *)(v106 & 1);
      }
      v49 = llvm::ConstantInt::get(v104, (llvm::LLVMContext *)&v251, v40);
      if (v252 >= 0x41 && v251)
        MEMORY[0x1CAA32F9C](v251, 0x1000C8000313F17);
      *(_QWORD *)(v48 + 1560) = v49;
    }
    if (!v49)
      goto LABEL_78;
LABEL_76:
    if (sub_1C4F20780(*(uint64_t **)(a1 + 32), (uint64_t)v37, (uint64_t)v49))
      llvm::Value::doRAUW(v37, v49, (llvm::Value *)1);
    goto LABEL_78;
  }
  v28 = ***a4;
  v29 = a4 + 3;
  if (*((_DWORD *)a4 + 8) >= 0x41u)
    v29 = (_QWORD *)*v29;
  v30 = *v29 == 0;
  v31 = *(llvm::ConstantInt **)(v28 + 1888);
  v32 = *(unsigned int *)(v28 + 1896);
  LODWORD(v252) = v32 >> 8;
  if (v32 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v251, v30, 0);
  }
  else
  {
    if (v32 <= 0xFF)
      v33 = 0;
    else
      v33 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v32);
    v251 = (void *)(v33 & v30);
  }
  v6 = llvm::ConstantInt::get(v31, (llvm::LLVMContext *)&v251, a3);
  if (v252 >= 0x41 && v251)
    MEMORY[0x1CAA32F9C](v251, 0x1000C8000313F17);
LABEL_2:
  v9 = *((_QWORD *)a3 + 1);
  if (v9)
  {
    v238 = v6;
    v242 = a3;
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(v9 + 24);
      if (v11)
        v12 = *(unsigned __int8 *)(v11 + 16) >= 0x1Cu;
      else
        v12 = 0;
      if (v12)
      {
        v13 = sub_1C477672C(a2 + 56, *(_QWORD *)(v11 + 40));
        v14 = *(_QWORD *)(a2 + 64);
        v15 = v14 == *(_QWORD *)(a2 + 56) ? 76 : 72;
        if (v13 != (_QWORD *)(v14 + 8 * *(unsigned int *)(a2 + v15)))
        {
          if (v10 >= (llvm::User **)v246)
          {
            v17 = v244;
            v18 = v10 - v244;
            v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 61)
              goto LABEL_380;
            v20 = v246 - (char *)v244;
            if ((v246 - (char *)v244) >> 2 > v19)
              v19 = v20 >> 2;
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
              v21 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v21 = v19;
            if (v21)
            {
              if (v21 >> 61)
                goto LABEL_381;
              v22 = (char *)operator new(8 * v21);
            }
            else
            {
              v22 = 0;
            }
            v23 = &v22[8 * v18];
            *(_QWORD *)v23 = v11;
            v16 = (llvm::ValueAsMetadata **)(v23 + 8);
            if (v10 != v17)
            {
              do
              {
                v24 = (uint64_t)*--v10;
                *((_QWORD *)v23 - 1) = v24;
                v23 -= 8;
              }
              while (v10 != v17);
              v10 = v244;
            }
            v244 = (llvm::ValueAsMetadata **)v23;
            v246 = &v22[8 * v21];
            if (v10)
              operator delete(v10);
          }
          else
          {
            *v10 = (llvm::User *)v11;
            v16 = v10 + 1;
          }
          v245 = v16;
          v10 = v16;
        }
      }
      v9 = *(_QWORD *)(v9 + 8);
    }
    while (v9);
    v25 = v244;
    if (v244 != v10)
    {
      v26 = v244;
      do
      {
        v27 = *v26++;
        llvm::User::replaceUsesOfWith(v27, v242, v238);
      }
      while (v26 != v10);
LABEL_171:
      if (v25 != v10)
      {
        v240 = (void **)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 32) + 56) + 40) + 272);
        while (1)
        {
          v112 = (uint64_t)*(v10 - 1);
          v110 = v10 - 1;
          v111 = v112;
          v245 = v110;
          if (!*(_QWORD *)(v112 + 8) && llvm::wouldInstructionBeTriviallyDead(v111, 0))
          {
            v161 = *(_DWORD *)(v111 + 20);
            v162 = v161 & 0x7FFFFFF;
            if ((v161 & 0x7FFFFFF) != 0)
            {
              v163 = 0;
              do
              {
                v164 = *(_DWORD *)(v111 + 20);
                if ((v164 & 0x40000000) != 0)
                  v165 = *(_QWORD *)(v111 - 8);
                else
                  v165 = v111 - 32 * (v164 & 0x7FFFFFF);
                v166 = *(unsigned __int8 **)(v165 + 32 * v163);
                if (v166)
                  v167 = v166[16] >= 0x1Cu;
                else
                  v167 = 0;
                if (v167)
                {
                  if (v110 >= (llvm::User **)v246)
                  {
                    v169 = v244;
                    v170 = v110 - v244;
                    v171 = v170 + 1;
                    if ((unint64_t)(v170 + 1) >> 61)
                      goto LABEL_380;
                    v172 = v246 - (char *)v244;
                    if ((v246 - (char *)v244) >> 2 > v171)
                      v171 = v172 >> 2;
                    if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFF8)
                      v173 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v173 = v171;
                    if (v173)
                    {
                      if (v173 >> 61)
                        goto LABEL_381;
                      v174 = (char *)operator new(8 * v173);
                    }
                    else
                    {
                      v174 = 0;
                    }
                    v175 = &v174[8 * v170];
                    *(_QWORD *)v175 = v166;
                    v168 = (llvm::ValueAsMetadata **)(v175 + 8);
                    if (v110 != v169)
                    {
                      do
                      {
                        v176 = (uint64_t)*--v110;
                        *((_QWORD *)v175 - 1) = v176;
                        v175 -= 8;
                      }
                      while (v110 != v169);
                      v110 = v244;
                    }
                    v244 = (llvm::ValueAsMetadata **)v175;
                    v245 = v168;
                    v246 = &v174[8 * v173];
                    if (v110)
                      operator delete(v110);
                  }
                  else
                  {
                    *v110 = (llvm::User *)v166;
                    v168 = v110 + 1;
                  }
                  v245 = v168;
                  v110 = v168;
                }
                ++v163;
              }
              while (v163 != v162);
            }
            sub_1C4E7D5A8((uint64_t)&v244, v111);
            v160 = *(int32x2_t ***)(a1 + 168);
            if (v160)
            {
              v177 = (*v160)[5].i32[0];
              if (v177)
              {
                v178 = (*v160)[3];
                v179 = v177 - 1;
                v180 = (v177 - 1) & ((v111 >> 4) ^ (v111 >> 9));
                v181 = *(_QWORD *)(*(_QWORD *)&v178 + 16 * v180);
                if (v181 == v111)
                {
LABEL_284:
                  v159 = *(llvm::MemoryAccess **)(*(_QWORD *)&v178 + 16 * v180 + 8);
                  if (v159)
LABEL_285:
                    llvm::MemorySSAUpdater::removeMemoryAccess(v160, v159, 0);
                }
                else
                {
                  v182 = 1;
                  while (v181 != -4096)
                  {
                    v183 = v180 + v182++;
                    v180 = v183 & v179;
                    v181 = *(_QWORD *)(*(_QWORD *)&v178 + 16 * v180);
                    if (v181 == v111)
                      goto LABEL_284;
                  }
                }
              }
            }
            goto LABEL_286;
          }
          v247 = v240;
          v248 = 0u;
          v249 = 0u;
          v250 = 257;
          v113 = *(_DWORD *)(v111 + 20);
          if ((v113 & 0x40000000) != 0)
          {
            v115 = *(uint64_t **)(v111 - 8);
            v114 = v113 & 0x7FFFFFF;
          }
          else
          {
            v114 = v113 & 0x7FFFFFF;
            v115 = (uint64_t *)(v111 - 32 * v114);
          }
          v116 = v253;
          v251 = v253;
          v252 = 0x800000000;
          if (v114 >= 9)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v251, (uint64_t)v253, v114, 8);
            v117 = v252;
            v116 = v251;
            v118 = v252;
          }
          else
          {
            v117 = 0;
            if (!v114)
            {
              v122 = v253;
              goto LABEL_183;
            }
            v118 = 0;
          }
          v119 = 32 * v114;
          v120 = &v116[8 * v118];
          do
          {
            v121 = *v115;
            v115 += 4;
            *v120++ = v121;
            v119 -= 32;
          }
          while (v119);
          v122 = v251;
LABEL_183:
          LODWORD(v252) = v117 + v114;
          v123 = llvm::SimplifyInstructionWithOperands((llvm *)v111, (uint64_t)v122, (v117 + v114), (uint64_t)&v247, a5, a6);
          if (v251 == v253)
          {
            if (!v123)
              goto LABEL_297;
          }
          else
          {
            free(v251);
            if (!v123)
            {
LABEL_297:
              if (v111)
              {
                if (*(_BYTE *)(v111 + 16) == 30 && (*(_DWORD *)(v111 + 20) & 0x7FFFFFF) == 1)
                {
                  v188 = *(llvm::BasicBlock **)(v111 - 32);
                  if (llvm::BasicBlock::getSinglePredecessor(v188))
                  {
                    sub_1C4E7D5A8((uint64_t)&v244, v111);
                    v236 = v188;
                    v189 = *((_QWORD *)v188 + 6);
                    v190 = v189 - 24;
                    if (v189)
                      v191 = v189 - 24;
                    else
                      v191 = 0;
                    if (v189 && *(_BYTE *)(v191 + 16) == 83)
                    {
                      do
                      {
                        v189 = *(_QWORD *)(v189 + 8);
                        v192 = *(_DWORD *)(v190 + 20);
                        v193 = v192 & 0x7FFFFFF;
                        if ((v192 & 0x7FFFFFF) != 0)
                        {
                          v194 = 0;
                          do
                          {
                            v195 = *(_DWORD *)(v190 + 20);
                            if ((v195 & 0x40000000) != 0)
                              v196 = *(_QWORD *)(v190 - 8);
                            else
                              v196 = v190 - 32 * (v195 & 0x7FFFFFF);
                            v197 = *(unsigned __int8 **)(v196 + 32 * v194);
                            if (v197)
                              v198 = v197[16] >= 0x1Cu;
                            else
                              v198 = 0;
                            if (v198)
                            {
                              v199 = v245;
                              if (v245 >= (llvm::ValueAsMetadata **)v246)
                              {
                                v201 = v244;
                                v202 = v245 - v244;
                                v203 = v202 + 1;
                                if ((unint64_t)(v202 + 1) >> 61)
                                  goto LABEL_380;
                                v204 = v246 - (char *)v244;
                                if ((v246 - (char *)v244) >> 2 > v203)
                                  v203 = v204 >> 2;
                                if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFFF8)
                                  v205 = 0x1FFFFFFFFFFFFFFFLL;
                                else
                                  v205 = v203;
                                if (v205)
                                {
                                  if (v205 >> 61)
                                    goto LABEL_381;
                                  v206 = (char *)operator new(8 * v205);
                                }
                                else
                                {
                                  v206 = 0;
                                }
                                v207 = &v206[8 * v202];
                                *(_QWORD *)v207 = v197;
                                v200 = (llvm::ValueAsMetadata **)(v207 + 8);
                                if (v199 != v201)
                                {
                                  do
                                  {
                                    v208 = (uint64_t)*--v199;
                                    *((_QWORD *)v207 - 1) = v208;
                                    v207 -= 8;
                                  }
                                  while (v199 != v201);
                                  v199 = v244;
                                }
                                v244 = (llvm::ValueAsMetadata **)v207;
                                v246 = &v206[8 * v205];
                                if (v199)
                                  operator delete(v199);
                              }
                              else
                              {
                                *v245 = (llvm::ValueAsMetadata *)v197;
                                v200 = v199 + 1;
                              }
                              v245 = v200;
                            }
                            ++v194;
                          }
                          while (v194 != v193);
                        }
                        v209 = *(_QWORD *)(v190 + 8);
                        if (v209)
                        {
                          v210 = v245;
                          do
                          {
                            v211 = *(llvm::ValueAsMetadata **)(v209 + 24);
                            if (v210 >= (llvm::ValueAsMetadata **)v246)
                            {
                              v213 = v244;
                              v214 = v210 - v244;
                              v215 = v214 + 1;
                              if ((unint64_t)(v214 + 1) >> 61)
                                goto LABEL_380;
                              v216 = v246 - (char *)v244;
                              if ((v246 - (char *)v244) >> 2 > v215)
                                v215 = v216 >> 2;
                              if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFF8)
                                v217 = 0x1FFFFFFFFFFFFFFFLL;
                              else
                                v217 = v215;
                              if (v217)
                              {
                                if (v217 >> 61)
                                  goto LABEL_381;
                                v218 = (char *)operator new(8 * v217);
                              }
                              else
                              {
                                v218 = 0;
                              }
                              v219 = &v218[8 * v214];
                              *(_QWORD *)v219 = v211;
                              v212 = (llvm::ValueAsMetadata **)(v219 + 8);
                              if (v210 != v213)
                              {
                                do
                                {
                                  v220 = (uint64_t)*--v210;
                                  *((_QWORD *)v219 - 1) = v220;
                                  v219 -= 8;
                                }
                                while (v210 != v213);
                                v210 = v244;
                              }
                              v244 = (llvm::ValueAsMetadata **)v219;
                              v245 = v212;
                              v246 = &v218[8 * v217];
                              if (v210)
                                operator delete(v210);
                            }
                            else
                            {
                              *v210 = v211;
                              v212 = v210 + 1;
                            }
                            v245 = v212;
                            v209 = *(_QWORD *)(v209 + 8);
                            v210 = v212;
                          }
                          while (v209);
                        }
                        sub_1C4E7D5A8((uint64_t)&v244, v190);
                        v221 = v189 - 24;
                        if (!v189)
                          v221 = 0;
                        v222 = *(unsigned __int8 *)(v221 + 16);
                        if (v222 == 83)
                          v190 = v221;
                        else
                          v190 = 0;
                      }
                      while (v189 && v222 == 83);
                    }
                    v223 = *(_QWORD *)(a1 + 144);
                    v251 = v253;
                    v252 = 0x1000000000;
                    v255 = 0;
                    v256 = 0;
                    v257 = v223;
                    v258 = 0;
                    v259 = 0;
                    v260 = v264;
                    v261 = v264;
                    v262 = 8;
                    v263 = 0;
                    memset(v265, 0, sizeof(v265));
                    v266 = 0;
                    llvm::MergeBlockIntoPredecessor((uint64_t)v236, (llvm::BasicBlock *)&v251, *(int32x2_t **)(a1 + 32), *(llvm::LoopInfo **)(a1 + 168), 0, 0);
                    llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)&v251);
                    v247 = (void **)v265;
                    sub_1C50B10F0(&v247);
                    if (v261 != v260)
                      free(v261);
                    if (v251 != v253)
                      free(v251);
                  }
                }
              }
              goto LABEL_366;
            }
          }
          if (!sub_1C4F20780(*(uint64_t **)(a1 + 32), v111, (uint64_t)v123))
            goto LABEL_297;
          v235 = *(llvm::BasicBlock **)(a1 + 168);
          v124 = *(_DWORD *)(v111 + 20);
          v125 = v124 & 0x7FFFFFF;
          if ((v124 & 0x7FFFFFF) != 0)
          {
            v126 = 0;
            do
            {
              v127 = *(_DWORD *)(v111 + 20);
              if ((v127 & 0x40000000) != 0)
                v128 = *(_QWORD *)(v111 - 8);
              else
                v128 = v111 - 32 * (v127 & 0x7FFFFFF);
              v129 = *(unsigned __int8 **)(v128 + 32 * v126);
              if (v129)
                v130 = v129[16] >= 0x1Cu;
              else
                v130 = 0;
              if (v130)
              {
                if (v110 >= (llvm::User **)v246)
                {
                  v132 = v244;
                  v133 = v110 - v244;
                  v134 = v133 + 1;
                  if ((unint64_t)(v133 + 1) >> 61)
                    goto LABEL_380;
                  v135 = v246 - (char *)v244;
                  if ((v246 - (char *)v244) >> 2 > v134)
                    v134 = v135 >> 2;
                  if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFF8)
                    v136 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v136 = v134;
                  if (v136)
                  {
                    if (v136 >> 61)
                      goto LABEL_381;
                    v137 = (char *)operator new(8 * v136);
                  }
                  else
                  {
                    v137 = 0;
                  }
                  v138 = &v137[8 * v133];
                  *(_QWORD *)v138 = v129;
                  v131 = (llvm::ValueAsMetadata **)(v138 + 8);
                  if (v110 != v132)
                  {
                    do
                    {
                      v139 = (uint64_t)*--v110;
                      *((_QWORD *)v138 - 1) = v139;
                      v138 -= 8;
                    }
                    while (v110 != v132);
                    v110 = v244;
                  }
                  v244 = (llvm::ValueAsMetadata **)v138;
                  v245 = v131;
                  v246 = &v137[8 * v136];
                  if (v110)
                    operator delete(v110);
                }
                else
                {
                  *v110 = (llvm::User *)v129;
                  v131 = v110 + 1;
                }
                v245 = v131;
                v110 = v131;
              }
              ++v126;
            }
            while (v126 != v125);
          }
          for (j = *(_QWORD *)(v111 + 8); j; v110 = v142)
          {
            v141 = *(llvm::User **)(j + 24);
            if (v110 >= (llvm::User **)v246)
            {
              v143 = v244;
              v144 = v110 - v244;
              v145 = v144 + 1;
              if ((unint64_t)(v144 + 1) >> 61)
                goto LABEL_380;
              v146 = v246 - (char *)v244;
              if ((v246 - (char *)v244) >> 2 > v145)
                v145 = v146 >> 2;
              if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFF8)
                v147 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v147 = v145;
              if (v147)
              {
                if (v147 >> 61)
                  goto LABEL_381;
                v148 = (char *)operator new(8 * v147);
              }
              else
              {
                v148 = 0;
              }
              v149 = &v148[8 * v144];
              *(_QWORD *)v149 = v141;
              v142 = (llvm::User **)(v149 + 8);
              if (v110 != v143)
              {
                do
                {
                  v150 = (uint64_t)*--v110;
                  *((_QWORD *)v149 - 1) = v150;
                  v149 -= 8;
                }
                while (v110 != v143);
                v110 = v244;
              }
              v244 = (llvm::ValueAsMetadata **)v149;
              v245 = v142;
              v246 = &v148[8 * v147];
              if (v110)
                operator delete(v110);
            }
            else
            {
              *v110 = v141;
              v142 = v110 + 1;
            }
            v245 = v142;
            j = *(_QWORD *)(j + 8);
          }
          sub_1C4E7D5A8((uint64_t)&v244, v111);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v111, v123, (llvm::Value *)1);
          v151 = *(unsigned __int8 *)(v111 + 16) - 33;
          if (v151 > 0x37)
            goto LABEL_238;
          if (((1 << (*(_BYTE *)(v111 + 16) - 33)) & 0x808001D0000010) == 0)
          {
            if (((1 << (*(_BYTE *)(v111 + 16) - 33)) & 0x8000000000041) == 0)
            {
              if (v151 == 27 && (*(_WORD *)(v111 + 18) & 0x301) != 0)
                goto LABEL_366;
LABEL_238:
              if ((llvm::Instruction::mayThrow((llvm::Instruction *)v111) & 1) != 0
                || (llvm::Instruction::willReturn((llvm::Instruction *)v111) & 1) == 0)
              {
                goto LABEL_366;
              }
              if (v235)
              {
                v152 = *(_DWORD *)(*(_QWORD *)v235 + 40);
                if (v152)
                {
                  v153 = *(_QWORD *)(*(_QWORD *)v235 + 24);
                  v154 = v152 - 1;
                  v155 = (v152 - 1) & ((v111 >> 4) ^ (v111 >> 9));
                  v156 = *(_QWORD *)(v153 + 16 * v155);
                  if (v156 != v111)
                  {
                    v157 = 1;
                    while (v156 != -4096)
                    {
                      v158 = v155 + v157++;
                      v155 = v158 & v154;
                      v156 = *(_QWORD *)(v153 + 16 * v155);
                      if (v156 == v111)
                        goto LABEL_246;
                    }
                    goto LABEL_286;
                  }
LABEL_246:
                  v159 = *(llvm::MemoryAccess **)(v153 + 16 * v155 + 8);
                  if (v159)
                  {
                    v160 = (int32x2_t **)v235;
                    goto LABEL_285;
                  }
                }
              }
LABEL_286:
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v111 + 40) + 40, (uint64_t ***)v111);
              v184 = *(_QWORD *)(v111 + 24);
              v185 = *(_QWORD **)(v111 + 32);
              *v185 = v184;
              *(_QWORD *)(v184 + 8) = v185;
              *(_QWORD *)(v111 + 24) = 0;
              *(_QWORD *)(v111 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v111);
              goto LABEL_366;
            }
            v186 = *(_QWORD *)(v111 + 64);
            if (v186 && (*(_BYTE *)(v186 + 17) & 0x30) != 0)
              goto LABEL_238;
            v187 = *(_DWORD *)(v111 + 20);
            if (v187 < 0)
            {
              v224 = v111 - 32 * (v187 & 0x7FFFFFF);
              v227 = *(_QWORD *)(v224 - 8);
              v225 = v224 - 8;
              v226 = v227;
              if (v227)
              {
                v228 = -v226;
                do
                {
                  v229 = *(_DWORD *)(*(_QWORD *)(v225 + v228) + 8);
                  v230 = v229 > 7;
                  v231 = (1 << v229) & 0x83;
                  if (v230 || v231 == 0)
                    goto LABEL_366;
                  v228 += 16;
                }
                while (v228);
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v111, 45) & 1) != 0
              || llvm::CallBase::hasFnAttrOnCalledFunction(v111, 44))
            {
              goto LABEL_238;
            }
          }
LABEL_366:
          v10 = v245;
          if (v244 == v245)
          {
            v10 = v244;
            break;
          }
        }
      }
    }
    if (v10)
    {
      v245 = v10;
      operator delete(v10);
    }
  }
}

unsigned __int8 *sub_1C5BB019C(unsigned __int8 *a1, uint64_t a2, _BYTE *a3, int *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12;
  unsigned int v13;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;

  v18 = a1;
  v19 = a1;
  v20 = 0;
  if (sub_1C4926528(a5, &v19, &v20) && v20 != *(_QWORD *)a5 + 16 * *(unsigned int *)(a5 + 16))
    return *(unsigned __int8 **)(v20 + 8);
  if ((*(_DWORD *)(*(_QWORD *)a1 + 8) & 0xFE) == 0x12)
    return 0;
  v13 = a1[16];
  if (v13 < 0x15)
    return 0;
  if (v13 < 0x1C || llvm::Loop::makeLoopInvariant(a2, (uint64_t)a1, a3, 0, a6))
  {
    sub_1C509B72C((uint64_t *)a5, &v18)[1] = a1;
    return v18;
  }
  else
  {
    v15 = a1[16];
    if ((v15 & 0xFE) != 0x38 || v15 < 0x1C || v15 - 59 < 0xFFFFFFEE)
      goto LABEL_26;
    switch(*a4)
    {
      case 0:
        if (v15 == 56)
          v16 = 2;
        else
          v16 = 1;
        break;
      case 1:
        if (v15 != 57)
          goto LABEL_26;
        v16 = 1;
        break;
      case 2:
        if (v15 != 56)
          goto LABEL_26;
        v16 = 2;
        break;
      case 3:
        goto LABEL_26;
      default:
        v16 = 0;
        break;
    }
    *a4 = v16;
    v17 = sub_1C5BB019C(*((_QWORD *)a1 - 8), a2, a3, a4, a5, a6);
    if (v17 || (*a4 = v16, (v17 = sub_1C5BB019C(*((_QWORD *)a1 - 4), a2, a3, a4, a5, a6)) != 0))
    {
      v12 = v17;
      sub_1C509B72C((uint64_t *)a5, &v18)[1] = v17;
    }
    else
    {
LABEL_26:
      v12 = 0;
      sub_1C509B72C((uint64_t *)a5, &v18)[1] = 0;
    }
  }
  return (unsigned __int8 *)v12;
}

uint64_t sub_1C5BB0380()
{
  int v1;
  int v2;
  int *v3;
  __int128 v4;

  *(_QWORD *)&v4 = "Max loop size to unswitch";
  *((_QWORD *)&v4 + 1) = 25;
  v3 = &v2;
  v1 = 1;
  v2 = 100;
  sub_1C61D8E94((uint64_t)&unk_1ED8216C0, "loop-unswitch-threshold", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED8216C0, &dword_1C475E000);
  *(_QWORD *)&v4 = "Max number of memory uses to explore during partial unswitching analysis";
  *((_QWORD *)&v4 + 1) = 72;
  v1 = 1;
  v2 = 100;
  v3 = &v2;
  sub_1C631E5F0(&v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED821780, &dword_1C475E000);
}

uint64_t sub_1C5BB0450(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  llvm::PassRegistry *v5;
  llvm::PassRegistry *v6;
  llvm::PassRegistry *v7;
  llvm::PassRegistry *v8;
  uint64_t v9;

  llvm::initializeAAResultsWrapperPassPass(a1, a2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeGlobalsAAWrapperPassPass(a1, v3);
  llvm::initializeLCSSAWrapperPassPass(a1, v4);
  llvm::initializeLoopAccessLegacyAnalysisPass(a1, v5);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopSimplifyPass(a1, v6);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v7);
  llvm::initializeOptimizationRemarkEmitterWrapperPassPass(a1, v8);
  v9 = operator new();
  *(_QWORD *)v9 = "Loop Versioning For LICM";
  *(_QWORD *)(v9 + 8) = 24;
  *(_QWORD *)(v9 + 16) = "loop-versioning-licm";
  *(_QWORD *)(v9 + 24) = 20;
  *(_QWORD *)(v9 + 32) = &unk_1ED821840;
  *(_WORD *)(v9 + 40) = 0;
  *(_BYTE *)(v9 + 42) = 0;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)(v9 + 56) = 0;
  *(_QWORD *)(v9 + 64) = 0;
  *(_QWORD *)(v9 + 72) = sub_1C5BB21F0;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v9, 1);
  return v9;
}

uint64_t sub_1C5BB0524(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED821840;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)a1 = &off_1E8196260;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED821848);
  if (v3 != -1)
  {
    v7[0] = sub_1C5BB0450;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED821848, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5BB05EC(uint64_t a1, llvm *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  llvm *v21;
  uint64_t v22;
  uint64_t v23;
  llvm::AliasSetTracker *v24;
  llvm::Instruction *v25;
  char v26;
  uint64_t v27;
  uint64_t ExitingBlock;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  llvm::ScalarEvolution *v32;
  const llvm::Loop **BackedgeTakenInfo;
  llvm::OptimizationRemarkEmitter *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int data;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  void **v47;
  char *v48;
  unint64_t v49;
  void **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  const llvm::SCEV *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  const llvm::SCEV *SCEVIter;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  int v99;
  uint64_t v101;
  unsigned int v102;
  llvm::OptimizationRemarkEmitter *v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  llvm::OptimizationRemarkEmitter *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  llvm::OptimizationRemarkEmitter *v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  int v120;
  char *v121;
  unint64_t v122;
  void **v123;
  unint64_t v124;
  void **v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  int v131;
  int v132;
  uint64_t v133;
  _QWORD *v134;
  _BOOL4 v135;
  llvm::OptimizationRemarkEmitter *v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  unint64_t v146;
  void **v147;
  unint64_t v148;
  void **v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  unint64_t v155;
  void **v156;
  unint64_t v157;
  void **v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  unint64_t v162;
  void **v163;
  unint64_t v164;
  void **v165;
  llvm::OptimizationRemarkEmitter *v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  unint64_t v175;
  void **v176;
  char *v177;
  unint64_t v178;
  void **v179;
  llvm::MDNode *v180;
  llvm::MDNode *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t i;
  uint64_t ***v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t **v190;
  uint64_t **v191;
  int v192;
  unsigned int v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  int v197;
  unsigned int v198;
  uint64_t ****v199;
  uint64_t ***v200;
  uint64_t ****v201;
  int v202;
  BOOL v203;
  unsigned int v204;
  uint64_t v205;
  llvm::MDNode **v206;
  uint64_t v207;
  llvm::MDNode *v208;
  llvm::MDNode *Impl;
  llvm::MDNode *v210;
  llvm::MDNode *v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  int v215;
  unsigned int v216;
  uint64_t ****v217;
  uint64_t ***v218;
  uint64_t ****v219;
  int v220;
  BOOL v221;
  unsigned int v222;
  uint64_t v223;
  llvm::MDNode **v224;
  uint64_t v225;
  llvm::MDNode *v226;
  llvm::MDNode *v227;
  llvm::MDNode *v228;
  llvm::MDNode *v229;
  uint64_t ****v230;
  std::string::size_type v231;
  uint64_t ****v232;
  std::string::size_type v233;
  uint64_t v234;
  uint64_t ***v235;
  uint64_t ***v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unsigned int v240;
  int v241;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  std::string v246;
  void *__p;
  char v248;
  uint64_t *v249;
  void *v250;
  uint64_t v251;
  _QWORD v252[8];
  void *v253;
  unsigned int v254;
  _BYTE v255[272];
  std::string v256;
  void *v257;
  char v258;
  llvm *v259;
  llvm *v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  int v264;
  const char *v265;
  const char *v266;
  uint64_t v267;
  char v268;
  char v269;
  void *v270;
  uint64_t v271;
  _BYTE v272[256];
  char v273;
  int v274;
  uint64_t v275;
  uint64_t v276;

  v276 = *MEMORY[0x1E0C80C00];
  if ((llvm::hasLICMVersioningTransformation(a2, a2) & 2) != 0)
    goto LABEL_33;
  *(_QWORD *)(a1 + 40) = a2;
  v8 = operator new();
  *(_QWORD *)v8 = *(_QWORD *)a1;
  *(_QWORD *)(v8 + 8) = v8 + 8;
  *(_DWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 16) = v8 + 8;
  *(_DWORD *)(v8 + 40) = 0;
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  if (v9)
  {
    v10 = sub_1C4D992E4(v9);
    MEMORY[0x1CAA32FC0](v10, 0x1020C406F861E71);
  }
  v11 = (uint64_t *)*((_QWORD *)a2 + 4);
  v12 = (uint64_t *)*((_QWORD *)a2 + 5);
  while (v11 != v12)
  {
    v13 = *v11;
    v14 = *(_DWORD *)(a3 + 16);
    if (v14)
    {
      v15 = *(_QWORD *)a3;
      v16 = v14 - 1;
      v17 = ((v13 >> 4) ^ (v13 >> 9)) & (v14 - 1);
      v18 = *(_QWORD *)(*(_QWORD *)a3 + 16 * v17);
      if (v13 == v18)
      {
LABEL_10:
        v21 = *(llvm **)(v15 + 16 * v17 + 8);
        goto LABEL_12;
      }
      v19 = 1;
      while (v18 != -4096)
      {
        v20 = v17 + v19++;
        v17 = v20 & v16;
        v18 = *(_QWORD *)(v15 + 16 * v17);
        if (v13 == v18)
          goto LABEL_10;
      }
    }
    v21 = 0;
LABEL_12:
    if (v21 == a2)
    {
      v22 = v13 + 40;
      v23 = *(_QWORD *)(v13 + 48);
      if (v23 != v13 + 40)
      {
        v24 = *(llvm::AliasSetTracker **)(a1 + 48);
        do
        {
          if (v23)
            v25 = (llvm::Instruction *)(v23 - 24);
          else
            v25 = 0;
          llvm::AliasSetTracker::add(v24, v25);
          v23 = *(_QWORD *)(v23 + 8);
        }
        while (v23 != v22);
      }
    }
    ++v11;
  }
  llvm::findStringMetadataForLoop(*(llvm::Loop **)(a1 + 40), "llvm.loop.licm_versioning.disable", 0x21uLL);
  if (v26)
    goto LABEL_33;
  if (!llvm::Loop::isLoopSimplifyForm(*(llvm::Loop **)(a1 + 40)))
    goto LABEL_31;
  v27 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(v27 + 8) != *(_QWORD *)(v27 + 16))
    goto LABEL_31;
  if (llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getNumBackEdges(v27) != 1)
    goto LABEL_31;
  if (!llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock(*(_QWORD **)(a1 + 40)))
    goto LABEL_31;
  ExitingBlock = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock(*(_QWORD **)(a1 + 40));
  if (ExitingBlock != llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*(_QWORD *)(a1 + 40)))
    goto LABEL_31;
  if ((llvm::Loop::isAnnotatedParallel(*(llvm::Loop **)(a1 + 40)) & 1) != 0)
    goto LABEL_31;
  v29 = 0;
  v30 = *(_QWORD *)(a1 + 40);
  v31 = (_QWORD *)v30;
  do
  {
    v31 = (_QWORD *)*v31;
    ++v29;
  }
  while (v31);
  if (v29 > *(_DWORD *)(a1 + 56)
    || (v32 = *(llvm::ScalarEvolution **)(a1 + 8),
        BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(v32, *(const llvm::Loop **)(a1 + 40)),
        *(_WORD *)(llvm::ScalarEvolution::BackedgeTakenInfo::getExact((uint64_t)BackedgeTakenInfo, v30, (uint64_t)v32, 0)+ 24) == 15))
  {
LABEL_31:
    v34 = *(llvm::OptimizationRemarkEmitter **)(a1 + 80);
    v35 = ****(_QWORD ****)v34;
    if (*(_QWORD *)(v35 + 128)
      || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v35 + 72) + 48))(*(_QWORD *)(v35 + 72)))
    {
      llvm::Loop::getStartLoc(*(llvm::Loop **)(a1 + 40), &v256);
      data = (int)v256.__r_.__value_.__l.__data_;
      if (v256.__r_.__value_.__r.__words[0])
      {
        v41 = *(_QWORD *)(v256.__r_.__value_.__r.__words[0]
                        - 8 * *(unsigned int *)(v256.__r_.__value_.__r.__words[0] + 8));
        if (*(_BYTE *)v41 != 15)
          v41 = *(_QWORD *)(v41 - 8 * *(unsigned int *)(v41 + 8));
        v42 = *(_DWORD *)(v256.__r_.__value_.__r.__words[0] + 4);
        data = *(unsigned __int16 *)(v256.__r_.__value_.__r.__words[0] + 2);
      }
      else
      {
        v41 = 0;
        v42 = 0;
      }
      v43 = **(_QWORD **)(*(_QWORD *)(a1 + 40) + 32);
      v44 = *(_QWORD *)(v43 + 56);
      LODWORD(v260) = 10;
      BYTE4(v260) = 2;
      v261 = v44;
      v262 = v41;
      v263 = v42;
      v264 = data;
      v265 = "loop-versioning-licm";
      v266 = "IllegalLoopStruct";
      v267 = 17;
      v268 = 0;
      v269 = 0;
      v270 = v272;
      v271 = 0x400000000;
      v273 = 0;
      v274 = -1;
      v275 = v43;
      v259 = (llvm *)&off_1E814E538;
      v250 = " Unsafe Loop structure";
      v251 = 22;
      sub_1C53B17B4((uint64_t)&v270, (const void **)&v250);
      sub_1C61998EC((uint64_t)&v250, (uint64_t)&v259);
      v250 = &off_1E814E538;
      v259 = (llvm *)&off_1E814E790;
      v45 = (char *)v270;
      if ((_DWORD)v271)
      {
        v46 = (unint64_t)v271 << 6;
        do
        {
          v47 = (void **)&v45[v46];
          if (v45[v46 - 17] < 0)
            operator delete(*(v47 - 5));
          if (*((char *)v47 - 41) < 0)
            operator delete(*(v47 - 8));
          v46 -= 64;
        }
        while (v46);
        v45 = (char *)v270;
      }
      if (v45 != v272)
        free(v45);
      if (v256.__r_.__value_.__r.__words[0])
        llvm::MetadataTracking::untrack((uint64_t)&v256, (unsigned __int8 *)v256.__r_.__value_.__l.__data_);
      llvm::OptimizationRemarkEmitter::emit(v34, (llvm::DiagnosticInfoOptimizationBase *)&v250);
      v250 = &off_1E814E790;
      v48 = (char *)v253;
      if (v254)
      {
        v49 = (unint64_t)v254 << 6;
        do
        {
          v50 = (void **)&v48[v49];
          if (v48[v49 - 17] < 0)
            operator delete(*(v50 - 5));
          if (*((char *)v50 - 41) < 0)
            operator delete(*(v50 - 8));
          v49 -= 64;
        }
        while (v49);
        goto LABEL_61;
      }
      goto LABEL_62;
    }
    goto LABEL_33;
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  v51 = *(_QWORD *)(a1 + 40);
  v52 = *(_QWORD *)(v51 + 32);
  v243 = *(_QWORD *)(v51 + 40);
  if (v243 == v52)
  {
LABEL_157:
    v101 = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 24))(*(_QWORD *)(a1 + 32), v51);
    *(_QWORD *)(a1 + 16) = v101;
    v102 = *(_DWORD *)(*(_QWORD *)(v101 + 8) + 288);
    if (!v102)
      goto LABEL_33;
    if (v102 > llvm::VectorizerParams::RuntimeMemoryCheckThreshold)
    {
      v103 = *(llvm::OptimizationRemarkEmitter **)(a1 + 80);
      v104 = ****(_QWORD ****)v103;
      if (!*(_QWORD *)(v104 + 128)
        && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v104 + 72) + 48))(*(_QWORD *)(v104 + 72)))
      {
        goto LABEL_33;
      }
      llvm::Loop::getStartLoc(*(llvm::Loop **)(a1 + 40), &v249);
      v105 = (int)v249;
      if (v249)
      {
        v106 = v249[-*((unsigned int *)v249 + 2)];
        if (*(_BYTE *)v106 != 15)
          v106 = *(_QWORD *)(v106 - 8 * *(unsigned int *)(v106 + 8));
        v107 = *((_DWORD *)v249 + 1);
        v105 = *((unsigned __int16 *)v249 + 1);
      }
      else
      {
        v106 = 0;
        v107 = 0;
      }
      v141 = **(_QWORD **)(*(_QWORD *)(a1 + 40) + 32);
      v142 = *(_QWORD *)(v141 + 56);
      LODWORD(v260) = 10;
      BYTE4(v260) = 2;
      v261 = v142;
      v262 = v106;
      v263 = v107;
      v264 = v105;
      v265 = "loop-versioning-licm";
      v266 = "RuntimeCheck";
      v267 = 12;
      v268 = 0;
      v269 = 0;
      v270 = v272;
      v271 = 0x400000000;
      v273 = 0;
      v274 = -1;
      v275 = v141;
      v259 = (llvm *)&off_1E814E538;
      v250 = "Number of runtime checks ";
      v251 = 25;
      sub_1C53B17B4((uint64_t)&v270, (const void **)&v250);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v256, "RuntimeChecks", 0xDuLL, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 288));
      v143 = sub_1C47E3888((uint64_t)&v259, (uint64_t)&v256);
      v250 = " exceeds threshold ";
      v251 = 19;
      sub_1C53B17B4(v143 + 80, (const void **)&v250);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v246, "Threshold", 9uLL, llvm::VectorizerParams::RuntimeMemoryCheckThreshold);
      v144 = sub_1C47E3888(v143, (uint64_t)&v246);
      sub_1C61998EC((uint64_t)&v250, v144);
      v250 = &off_1E814E538;
      if (v248 < 0)
        operator delete(__p);
      if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v246.__r_.__value_.__l.__data_);
      if (v258 < 0)
        operator delete(v257);
      if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v256.__r_.__value_.__l.__data_);
      v259 = (llvm *)&off_1E814E790;
      v145 = (char *)v270;
      if ((_DWORD)v271)
      {
        v146 = (unint64_t)v271 << 6;
        do
        {
          v147 = (void **)&v145[v146];
          if (v145[v146 - 17] < 0)
            operator delete(*(v147 - 5));
          if (*((char *)v147 - 41) < 0)
            operator delete(*(v147 - 8));
          v146 -= 64;
        }
        while (v146);
        v145 = (char *)v270;
      }
      if (v145 != v272)
        free(v145);
      if (v249)
        llvm::MetadataTracking::untrack((uint64_t)&v249, (unsigned __int8 *)v249);
      llvm::OptimizationRemarkEmitter::emit(v103, (llvm::DiagnosticInfoOptimizationBase *)&v250);
      v250 = &off_1E814E790;
      v48 = (char *)v253;
      if (!v254)
        goto LABEL_62;
      v148 = (unint64_t)v254 << 6;
      do
      {
        v149 = (void **)&v48[v148];
        if (v48[v148 - 17] < 0)
          operator delete(*(v149 - 5));
        if (*((char *)v149 - 41) < 0)
          operator delete(*(v149 - 8));
        v148 -= 64;
      }
      while (v148);
      goto LABEL_61;
    }
    v115 = *(_DWORD *)(a1 + 68);
    if (!v115 || *(_BYTE *)(a1 + 72))
      goto LABEL_33;
    if ((float)(*(float *)(a1 + 60) * (float)*(unsigned int *)(a1 + 64)) > (float)(100 * v115))
    {
      v116 = *(llvm::OptimizationRemarkEmitter **)(a1 + 80);
      v117 = ****(_QWORD ****)v116;
      if (!*(_QWORD *)(v117 + 128)
        && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v117 + 72) + 48))(*(_QWORD *)(v117 + 72)))
      {
        goto LABEL_33;
      }
      llvm::Loop::getStartLoc(*(llvm::Loop **)(a1 + 40), &v249);
      v118 = (int)v249;
      if (v249)
      {
        v119 = v249[-*((unsigned int *)v249 + 2)];
        if (*(_BYTE *)v119 != 15)
          v119 = *(_QWORD *)(v119 - 8 * *(unsigned int *)(v119 + 8));
        v120 = *((_DWORD *)v249 + 1);
        v118 = *((unsigned __int16 *)v249 + 1);
      }
      else
      {
        v119 = 0;
        v120 = 0;
      }
      v150 = **(_QWORD **)(*(_QWORD *)(a1 + 40) + 32);
      v151 = *(_QWORD *)(v150 + 56);
      LODWORD(v260) = 10;
      BYTE4(v260) = 2;
      v261 = v151;
      v262 = v119;
      v263 = v120;
      v264 = v118;
      v265 = "loop-versioning-licm";
      v266 = "InvariantThreshold";
      v267 = 18;
      v268 = 0;
      v269 = 0;
      v270 = v272;
      v271 = 0x400000000;
      v273 = 0;
      v274 = -1;
      v275 = v150;
      v259 = (llvm *)&off_1E814E538;
      v250 = "Invariant load & store ";
      v251 = 23;
      sub_1C53B17B4((uint64_t)&v270, (const void **)&v250);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v256, "LoadAndStoreCounter", 0x13uLL, (100 * *(_DWORD *)(a1 + 68)) / *(_DWORD *)(a1 + 64));
      v152 = sub_1C47E3888((uint64_t)&v259, (uint64_t)&v256);
      v250 = " are less then defined threshold ";
      v251 = 33;
      sub_1C53B17B4(v152 + 80, (const void **)&v250);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v246, "Threshold", 9uLL, *(float *)(a1 + 60));
      v153 = sub_1C47E3888(v152, (uint64_t)&v246);
      sub_1C61998EC((uint64_t)&v250, v153);
      v250 = &off_1E814E538;
      if (v248 < 0)
        operator delete(__p);
      if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v246.__r_.__value_.__l.__data_);
      if (v258 < 0)
        operator delete(v257);
      if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v256.__r_.__value_.__l.__data_);
      v259 = (llvm *)&off_1E814E790;
      v154 = (char *)v270;
      if ((_DWORD)v271)
      {
        v155 = (unint64_t)v271 << 6;
        do
        {
          v156 = (void **)&v154[v155];
          if (v154[v155 - 17] < 0)
            operator delete(*(v156 - 5));
          if (*((char *)v156 - 41) < 0)
            operator delete(*(v156 - 8));
          v155 -= 64;
        }
        while (v155);
        v154 = (char *)v270;
      }
      if (v154 != v272)
        free(v154);
      if (v249)
        llvm::MetadataTracking::untrack((uint64_t)&v249, (unsigned __int8 *)v249);
      llvm::OptimizationRemarkEmitter::emit(v116, (llvm::DiagnosticInfoOptimizationBase *)&v250);
      v250 = &off_1E814E790;
      v48 = (char *)v253;
      if (!v254)
        goto LABEL_62;
      v157 = (unint64_t)v254 << 6;
      do
      {
        v158 = (void **)&v48[v157];
        if (v48[v157 - 17] < 0)
          operator delete(*(v158 - 5));
        if (*((char *)v158 - 41) < 0)
          operator delete(*(v158 - 8));
        v157 -= 64;
      }
      while (v157);
      goto LABEL_61;
    }
    v126 = *(_QWORD *)(a1 + 48);
    v127 = v126 + 8;
    v128 = *(_QWORD *)(v126 + 16);
    if (v128 == v127)
      goto LABEL_207;
    v129 = 0;
    v130 = 0;
    v131 = 0;
    do
    {
      if (!*(_QWORD *)(v128 + 32))
      {
        v132 = *(_DWORD *)(v128 + 64);
        if ((v132 & 0x40000000) == 0)
          goto LABEL_207;
        v133 = *(_QWORD *)(v128 + 16);
        v134 = *(_QWORD **)v133;
        LOBYTE(v135) = 1;
        do
        {
          v135 = v135 && *v134 == **(_QWORD **)v133;
          v133 = *(_QWORD *)(v133 + 16);
        }
        while (v133);
        v131 |= (v132 & 0x20000000u) >> 29;
        v130 |= v135;
        v129 = 1;
      }
      v128 = *(_QWORD *)(v128 + 8);
    }
    while (v128 != v127);
    if ((v130 & v131 & v129 & 1) == 0)
    {
LABEL_207:
      v136 = *(llvm::OptimizationRemarkEmitter **)(a1 + 80);
      v137 = ****(_QWORD ****)v136;
      if (!*(_QWORD *)(v137 + 128)
        && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v137 + 72) + 48))(*(_QWORD *)(v137 + 72)))
      {
        goto LABEL_33;
      }
      llvm::Loop::getStartLoc(*(llvm::Loop **)(a1 + 40), &v256);
      v138 = (int)v256.__r_.__value_.__l.__data_;
      if (v256.__r_.__value_.__r.__words[0])
      {
        v139 = *(_QWORD *)(v256.__r_.__value_.__r.__words[0]
                         - 8 * *(unsigned int *)(v256.__r_.__value_.__r.__words[0] + 8));
        if (*(_BYTE *)v139 != 15)
          v139 = *(_QWORD *)(v139 - 8 * *(unsigned int *)(v139 + 8));
        v140 = *(_DWORD *)(v256.__r_.__value_.__r.__words[0] + 4);
        v138 = *(unsigned __int16 *)(v256.__r_.__value_.__r.__words[0] + 2);
      }
      else
      {
        v139 = 0;
        v140 = 0;
      }
      v159 = **(_QWORD **)(*(_QWORD *)(a1 + 40) + 32);
      v160 = *(_QWORD *)(v159 + 56);
      LODWORD(v260) = 10;
      BYTE4(v260) = 2;
      v261 = v160;
      v262 = v139;
      v263 = v140;
      v264 = v138;
      v265 = "loop-versioning-licm";
      v266 = "IllegalLoopMemoryAccess";
      v267 = 23;
      v268 = 0;
      v269 = 0;
      v270 = v272;
      v271 = 0x400000000;
      v273 = 0;
      v274 = -1;
      v275 = v159;
      v259 = (llvm *)&off_1E814E538;
      v250 = " Unsafe Loop memory access";
      v251 = 26;
      sub_1C53B17B4((uint64_t)&v270, (const void **)&v250);
      sub_1C61998EC((uint64_t)&v250, (uint64_t)&v259);
      v250 = &off_1E814E538;
      v259 = (llvm *)&off_1E814E790;
      v161 = (char *)v270;
      if ((_DWORD)v271)
      {
        v162 = (unint64_t)v271 << 6;
        do
        {
          v163 = (void **)&v161[v162];
          if (v161[v162 - 17] < 0)
            operator delete(*(v163 - 5));
          if (*((char *)v163 - 41) < 0)
            operator delete(*(v163 - 8));
          v162 -= 64;
        }
        while (v162);
        v161 = (char *)v270;
      }
      if (v161 != v272)
        free(v161);
      if (v256.__r_.__value_.__r.__words[0])
        llvm::MetadataTracking::untrack((uint64_t)&v256, (unsigned __int8 *)v256.__r_.__value_.__l.__data_);
      llvm::OptimizationRemarkEmitter::emit(v136, (llvm::DiagnosticInfoOptimizationBase *)&v250);
      v250 = &off_1E814E790;
      v48 = (char *)v253;
      if (!v254)
        goto LABEL_62;
      v164 = (unint64_t)v254 << 6;
      do
      {
        v165 = (void **)&v48[v164];
        if (v48[v164 - 17] < 0)
          operator delete(*(v165 - 5));
        if (*((char *)v165 - 41) < 0)
          operator delete(*(v165 - 8));
        v164 -= 64;
      }
      while (v164);
LABEL_61:
      v48 = (char *)v253;
      goto LABEL_62;
    }
    v166 = *(llvm::OptimizationRemarkEmitter **)(a1 + 80);
    v167 = ****(_QWORD ****)v166;
    if (*(_QWORD *)(v167 + 128)
      || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v167 + 72) + 48))(*(_QWORD *)(v167 + 72)))
    {
      llvm::Loop::getStartLoc(*(llvm::Loop **)(a1 + 40), &v246);
      v168 = (int)v246.__r_.__value_.__l.__data_;
      if (v246.__r_.__value_.__r.__words[0])
      {
        v169 = *(_QWORD *)(v246.__r_.__value_.__r.__words[0]
                         - 8 * *(unsigned int *)(v246.__r_.__value_.__r.__words[0] + 8));
        if (*(_BYTE *)v169 != 15)
          v169 = *(_QWORD *)(v169 - 8 * *(unsigned int *)(v169 + 8));
        v170 = *(_DWORD *)(v246.__r_.__value_.__r.__words[0] + 4);
        v168 = *(unsigned __int16 *)(v246.__r_.__value_.__r.__words[0] + 2);
      }
      else
      {
        v169 = 0;
        v170 = 0;
      }
      v171 = **(_QWORD **)(*(_QWORD *)(a1 + 40) + 32);
      v172 = *(_QWORD *)(v171 + 56);
      LODWORD(v260) = 9;
      BYTE4(v260) = 2;
      v261 = v172;
      v262 = v169;
      v263 = v170;
      v264 = v168;
      v265 = "loop-versioning-licm";
      v266 = "IsLegalForVersioning";
      v267 = 20;
      v268 = 0;
      v269 = 0;
      v270 = v272;
      v271 = 0x400000000;
      v273 = 0;
      v274 = -1;
      v275 = v171;
      v259 = (llvm *)&off_1E814E500;
      v250 = " Versioned loop for LICM.";
      v251 = 25;
      sub_1C53B17B4((uint64_t)&v270, (const void **)&v250);
      v250 = " Number of runtime checks we had to insert ";
      v251 = 43;
      sub_1C53B17B4((uint64_t)&v270, (const void **)&v250);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v256, "RuntimeChecks", 0xDuLL, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 288));
      v173 = sub_1C47E3888((uint64_t)&v259, (uint64_t)&v256);
      sub_1C61998EC((uint64_t)&v250, v173);
      v250 = &off_1E814E500;
      if (v258 < 0)
        operator delete(v257);
      if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v256.__r_.__value_.__l.__data_);
      v259 = (llvm *)&off_1E814E790;
      v174 = (char *)v270;
      if ((_DWORD)v271)
      {
        v175 = (unint64_t)v271 << 6;
        do
        {
          v176 = (void **)&v174[v175];
          if (v174[v175 - 17] < 0)
            operator delete(*(v176 - 5));
          if (*((char *)v176 - 41) < 0)
            operator delete(*(v176 - 8));
          v175 -= 64;
        }
        while (v175);
        v174 = (char *)v270;
      }
      if (v174 != v272)
        free(v174);
      if (v246.__r_.__value_.__r.__words[0])
        llvm::MetadataTracking::untrack((uint64_t)&v246, (unsigned __int8 *)v246.__r_.__value_.__l.__data_);
      llvm::OptimizationRemarkEmitter::emit(v166, (llvm::DiagnosticInfoOptimizationBase *)&v250);
      v250 = &off_1E814E790;
      v177 = (char *)v253;
      if (v254)
      {
        v178 = (unint64_t)v254 << 6;
        do
        {
          v179 = (void **)&v177[v178];
          if (v177[v178 - 17] < 0)
            operator delete(*(v179 - 5));
          if (*((char *)v179 - 41) < 0)
            operator delete(*(v179 - 8));
          v178 -= 64;
        }
        while (v178);
        v177 = (char *)v253;
      }
      if (v177 != v255)
        free(v177);
    }
    llvm::LoopVersioning::LoopVersioning((uint64_t)&v259, *(_QWORD *)(a1 + 16), *(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 280), *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 288), *(_QWORD *)(a1 + 40), a3, a4, *(_QWORD *)(a1 + 8));
    sub_1C631B8A8((uint64_t *)&v259);
    llvm::addStringMetadataToLoop((uint64_t *****)v260, (llvm::Loop *)"llvm.loop.licm_versioning.disable", 0);
    llvm::addStringMetadataToLoop((uint64_t *****)v259, (llvm::Loop *)"llvm.loop.licm_versioning.disable", 0);
    llvm::addStringMetadataToLoop((uint64_t *****)v259, (llvm::Loop *)"llvm.mem.parallel_loop_access", 0);
    v249 = **(uint64_t ***)(*(_QWORD *)(llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v259) + 40)
                         - 24);
    v180 = llvm::MDBuilder::createAnonymousAARoot(&v249, "LVDomain", 8uLL, 0);
    v181 = llvm::MDBuilder::createAnonymousAARoot(&v249, "LVAliasScope", 0xCuLL, (uint64_t)v180);
    v250 = v252;
    v252[0] = v181;
    v251 = 0x400000001;
    v256.__r_.__value_.__r.__words[0] = (std::string::size_type)&v256.__r_.__value_.__r.__words[2];
    v256.__r_.__value_.__r.__words[2] = (std::string::size_type)v181;
    v256.__r_.__value_.__l.__size_ = 0x400000001;
    v182 = *(_QWORD *)(a1 + 40);
    v183 = *(_QWORD *)(v182 + 32);
    v245 = *(_QWORD *)(v182 + 40);
    if (v245 == v183)
    {
LABEL_431:
      if (v250 != v252)
        free(v250);
      sub_1C631A498(&v259);
      v36 = 1;
      goto LABEL_34;
    }
LABEL_330:
    v184 = *(_QWORD *)v183 + 40;
    for (i = *(_QWORD *)(*(_QWORD *)v183 + 48); ; i = *(_QWORD *)(i + 8))
    {
      if (i == v184)
      {
        v183 += 8;
        if (v183 == v245)
        {
          if ((std::string::size_type *)v256.__r_.__value_.__l.__data_ != &v256.__r_.__value_.__r.__words[2])
            free(v256.__r_.__value_.__l.__data_);
          goto LABEL_431;
        }
        goto LABEL_330;
      }
      if (i)
        v186 = (uint64_t ***)(i - 24);
      else
        v186 = 0;
      v187 = *((unsigned __int8 *)v186 + 16);
      v188 = (v187 - 33);
      if (v188 <= 0x37)
      {
        if (((1 << (v187 - 33)) & 0x8000000000041) != 0)
        {
          v190 = v186[8];
          if (!v190 || (*((_BYTE *)v190 + 20) & 4) == 0 && (*((_BYTE *)v190 + 17) & 0x10) == 0)
          {
            LODWORD(v246.__r_.__value_.__l.__data_) = 7;
            if (sub_1C53E4BBC((uint64_t)v186, (__int32 *)&v246, 1uLL))
            {
              v234 = (uint64_t)*(v186 - 4);
              if (!v234 || *(_BYTE *)(v234 + 16) || *(uint64_t ***)(v234 + 24) != v186[9] || *(_DWORD *)(v234 + 36) != 7)
                goto LABEL_360;
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v186, 66) & 1) == 0
              && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v186, 44))
            {
              goto LABEL_360;
            }
          }
        }
        else
        {
          if (((1 << (v187 - 33)) & 0x808001C8000010) != 0)
            goto LABEL_360;
          if (v188 != 28)
            goto LABEL_339;
          if ((*((_WORD *)v186 + 9) & 0x301) != 0)
            goto LABEL_360;
        }
        v187 = *((unsigned __int8 *)v186 + 16);
      }
LABEL_339:
      v189 = (v187 - 33);
      if (v189 > 0x37)
        continue;
      if (((1 << v189) & 0x8000000000041) != 0)
      {
        v191 = v186[8];
        if (v191 && (*((_BYTE *)v191 + 17) & 0x30) != 0)
          continue;
        v192 = *((_DWORD *)v186 + 5);
        if (v192 < 0
          && (v235 = &v186[-4 * (v192 & 0x7FFFFFF)], v238 = (uint64_t)*(v235 - 1), v236 = v235 - 1, (v237 = v238) != 0))
        {
          v239 = -v237;
          while (1)
          {
            v240 = (*(_DWORD **)((char *)v236 + v239))[2];
            v56 = v240 > 7;
            v241 = (1 << v240) & 0x83;
            if (v56 || v241 == 0)
              break;
            v239 += 16;
            if (!v239)
              goto LABEL_354;
          }
        }
        else
        {
LABEL_354:
          if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v186, 45) & 1) != 0
            || (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v186, 44) & 1) != 0)
          {
            continue;
          }
        }
      }
      else if (v189 == 27)
      {
        if ((*((_WORD *)v186 + 9) & 0x301) == 0)
          continue;
      }
      else if (((1 << v189) & 0x808001D0000010) == 0)
      {
        continue;
      }
LABEL_360:
      v193 = v186 >> 4;
      if ((*((_BYTE *)v186 + 23) & 0x20) == 0)
        goto LABEL_376;
      v194 = ***v186;
      v246.__r_.__value_.__r.__words[0] = (std::string::size_type)v186;
      v195 = *(_DWORD *)(v194 + 2496);
      if (v195)
      {
        v196 = *(_QWORD *)(v194 + 2480);
        v197 = v195 - 1;
        v198 = v197 & (v193 ^ (v186 >> 9));
        v199 = (uint64_t ****)(v196 + 40 * v198);
        v200 = *v199;
        if (*v199 == v186)
          goto LABEL_371;
        v201 = 0;
        v202 = 1;
        while (v200 != (uint64_t ***)-4096)
        {
          if (v201)
            v203 = 0;
          else
            v203 = v200 == (uint64_t ***)-8192;
          if (v203)
            v201 = v199;
          v204 = v198 + v202++;
          v198 = v204 & v197;
          v199 = (uint64_t ****)(v196 + 40 * v198);
          v200 = *v199;
          if (*v199 == v186)
            goto LABEL_371;
        }
        if (v201)
          v232 = v201;
        else
          v232 = v199;
      }
      else
      {
        v232 = 0;
      }
      v199 = (uint64_t ****)sub_1C541AB24(v194 + 2480, (uint64_t)&v246, (uint64_t *)&v246, v232);
      v233 = v246.__r_.__value_.__r.__words[0];
      v199[4] = 0;
      v199[3] = 0;
      *v199 = (uint64_t ***)v233;
      v199[1] = (uint64_t ***)(v199 + 3);
      v199[2] = (uint64_t ***)0x100000000;
LABEL_371:
      v205 = *((unsigned int *)v199 + 4);
      if (!(_DWORD)v205)
      {
LABEL_376:
        v208 = 0;
        goto LABEL_377;
      }
      v206 = (llvm::MDNode **)(v199[1] + 1);
      v207 = 16 * v205;
      while (*((_DWORD *)v206 - 2) != 8)
      {
        v208 = 0;
        v206 += 2;
        v207 -= 16;
        if (!v207)
          goto LABEL_377;
      }
      v208 = *v206;
LABEL_377:
      Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(**v186, v256.__r_.__value_.__l.__data_, LODWORD(v256.__r_.__value_.__r.__words[1]), 0, 1);
      v211 = llvm::MDNode::concatenate(v208, Impl, v210);
      if (v211 || v186[6] || (*((_BYTE *)v186 + 23) & 0x20) != 0)
        llvm::Value::setMetadata((llvm::Value *)v186, 8, v211);
      if ((*((_BYTE *)v186 + 23) & 0x20) == 0)
        goto LABEL_397;
      v212 = ***v186;
      v246.__r_.__value_.__r.__words[0] = (std::string::size_type)v186;
      v213 = *(_DWORD *)(v212 + 2496);
      if (v213)
      {
        v214 = *(_QWORD *)(v212 + 2480);
        v215 = v213 - 1;
        v216 = v215 & (v193 ^ (v186 >> 9));
        v217 = (uint64_t ****)(v214 + 40 * v216);
        v218 = *v217;
        if (*v217 == v186)
          goto LABEL_392;
        v219 = 0;
        v220 = 1;
        while (v218 != (uint64_t ***)-4096)
        {
          if (v219)
            v221 = 0;
          else
            v221 = v218 == (uint64_t ***)-8192;
          if (v221)
            v219 = v217;
          v222 = v216 + v220++;
          v216 = v222 & v215;
          v217 = (uint64_t ****)(v214 + 40 * v216);
          v218 = *v217;
          if (*v217 == v186)
            goto LABEL_392;
        }
        if (v219)
          v230 = v219;
        else
          v230 = v217;
      }
      else
      {
        v230 = 0;
      }
      v217 = (uint64_t ****)sub_1C541AB24(v212 + 2480, (uint64_t)&v246, (uint64_t *)&v246, v230);
      v231 = v246.__r_.__value_.__r.__words[0];
      v217[4] = 0;
      v217[3] = 0;
      *v217 = (uint64_t ***)v231;
      v217[1] = (uint64_t ***)(v217 + 3);
      v217[2] = (uint64_t ***)0x100000000;
LABEL_392:
      v223 = *((unsigned int *)v217 + 4);
      if ((_DWORD)v223)
      {
        v224 = (llvm::MDNode **)(v217[1] + 1);
        v225 = 16 * v223;
        while (*((_DWORD *)v224 - 2) != 7)
        {
          v226 = 0;
          v224 += 2;
          v225 -= 16;
          if (!v225)
            goto LABEL_398;
        }
        v226 = *v224;
        goto LABEL_398;
      }
LABEL_397:
      v226 = 0;
LABEL_398:
      v227 = (llvm::MDNode *)llvm::MDTuple::getImpl(**v186, v250, v251, 0, 1);
      v229 = llvm::MDNode::concatenate(v226, v227, v228);
      if (v229 || v186[6] || (*((_BYTE *)v186 + 23) & 0x20) != 0)
        llvm::Value::setMetadata((llvm::Value *)v186, 7, v229);
    }
  }
  while (1)
  {
    v53 = *(_QWORD *)(*(_QWORD *)v52 + 48);
    v244 = *(_QWORD *)v52 + 40;
    if (v53 != v244)
      break;
LABEL_155:
    v52 += 8;
    if (v52 == v243)
    {
      v51 = *(_QWORD *)(a1 + 40);
      goto LABEL_157;
    }
  }
  while (1)
  {
    if (v53)
      v54 = v53 - 24;
    else
      v54 = 0;
    v55 = *(unsigned __int8 *)(v54 + 16) - 33;
    v56 = v55 > 0x33;
    v57 = (1 << v55) & 0x8000000000041;
    if (v56 || v57 == 0)
      goto LABEL_84;
    v59 = *(_QWORD *)(v53 + 40);
    if (v59)
    {
      if ((*(_BYTE *)(v59 + 12) & 0x40) != 0)
        break;
    }
    if ((llvm::CallBase::hasFnAttrOnCalledFunction(v53 - 24, 6) & 1) != 0)
      break;
    v60 = *(_QWORD *)(v53 + 40);
    if (v60)
    {
      if ((*(_BYTE *)(v60 + 15) & 1) != 0)
        break;
    }
    if ((llvm::CallBase::hasFnAttrOnCalledFunction(v53 - 24, 24) & 1) != 0)
      break;
    v61 = *(_QWORD **)(*(_QWORD *)a1 + 8);
    v62 = *(_QWORD **)(*(_QWORD *)a1 + 16);
    if (v61 == v62)
      break;
    v63 = 63;
    while (1)
    {
      v63 &= (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v61 + 48))(*v61, v53 - 24);
      if (v63 == 4)
        break;
      if (++v61 == v62)
        goto LABEL_163;
    }
LABEL_84:
    if ((llvm::Instruction::mayThrow((llvm::Instruction *)v54) & 1) != 0)
      break;
    v64 = *(unsigned __int8 *)(v54 + 16);
    v65 = (v64 - 33);
    if (v65 > 0x37)
      goto LABEL_89;
    if (((1 << (v64 - 33)) & 0x8000000000041) != 0)
    {
      v67 = *(_QWORD *)(v54 + 64);
      if (v67 && ((*(_BYTE *)(v67 + 20) & 4) != 0 || (*(_BYTE *)(v67 + 17) & 0x10) != 0)
        || ((LODWORD(v259) = 7, !sub_1C53E4BBC(v54, (__int32 *)&v259, 1uLL))
         || (v92 = *(_QWORD *)(v54 - 32)) != 0
         && !*(_BYTE *)(v92 + 16)
         && *(_QWORD *)(v92 + 24) == *(_QWORD *)(v54 + 72)
         && *(_DWORD *)(v92 + 36) == 7)
        && ((llvm::CallBase::hasFnAttrOnCalledFunction(v54, 66) & 1) != 0
         || (llvm::CallBase::hasFnAttrOnCalledFunction(v54, 44) & 1) != 0))
      {
LABEL_101:
        v64 = *(unsigned __int8 *)(v54 + 16);
        goto LABEL_89;
      }
LABEL_127:
      if (!v53 || *(_BYTE *)(v54 + 16) != 60 || (*(_WORD *)(v54 + 18) & 0x381) != 0)
        break;
      ++*(_DWORD *)(a1 + 64);
      v81 = *(_QWORD *)(v54 - 32);
      v82 = *(_QWORD *)(a1 + 8);
      v83 = *(_QWORD *)(v82 + 104);
      v84 = *(_DWORD *)(v82 + 120);
      if (v84)
      {
        v85 = v84 - 1;
        v86 = (v84 - 1) & ((v81 >> 4) ^ (v81 >> 9));
        v87 = v83 + 48 * v86;
        v88 = *(_QWORD *)(v87 + 24);
        if (v88 != v81)
        {
          v89 = 1;
          while (v88 != -4096)
          {
            v90 = v86 + v89++;
            v86 = v90 & v85;
            v87 = v83 + 48 * (v90 & v85);
            v88 = *(_QWORD *)(v87 + 24);
            if (v88 == v81)
              goto LABEL_137;
          }
          goto LABEL_136;
        }
      }
      else
      {
LABEL_136:
        v87 = v83 + 48 * v84;
      }
LABEL_137:
      if (v87 == v83 + 48 * v84 || (SCEVIter = *(const llvm::SCEV **)(v87 + 40)) == 0)
        SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(*(llvm::ScalarEvolution **)(a1 + 8), v81);
      if (llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)v82, SCEVIter, *(const llvm::Loop **)(a1 + 40)) == 1)++*(_DWORD *)(a1 + 68);
      goto LABEL_93;
    }
    if (((1 << (v64 - 33)) & 0x808001C8000010) != 0)
      goto LABEL_127;
    if (v65 == 28)
    {
      if ((*(_WORD *)(v54 + 18) & 0x301) != 0)
        goto LABEL_127;
      goto LABEL_101;
    }
LABEL_89:
    v66 = (v64 - 33);
    if (v66 <= 0x37)
    {
      if (((1 << (v64 - 33)) & 0x8000000000041) != 0)
      {
        v68 = *(_QWORD *)(v54 + 64);
        if (v68 && (*(_BYTE *)(v68 + 17) & 0x30) != 0)
          goto LABEL_93;
        v69 = *(_DWORD *)(v54 + 20);
        if (v69 < 0)
        {
          v93 = v54 - 32 * (v69 & 0x7FFFFFF);
          v96 = *(_QWORD *)(v93 - 8);
          v94 = v93 - 8;
          v95 = v96;
          if (v96)
          {
            v97 = -v95;
            while (1)
            {
              v98 = *(_DWORD *)(*(_QWORD *)(v94 + v97) + 8);
              v56 = v98 > 7;
              v99 = (1 << v98) & 0x83;
              if (v56 || v99 == 0)
                break;
              v97 += 16;
              if (!v97)
                goto LABEL_105;
            }
LABEL_108:
            if (!v53 || v64 != 61 || (*(_WORD *)(v54 + 18) & 0x381) != 0)
              break;
            ++*(_DWORD *)(a1 + 64);
            v70 = *(_QWORD *)(v54 - 32);
            v71 = *(_QWORD *)(a1 + 8);
            v72 = *(_QWORD *)(v71 + 104);
            v73 = *(_DWORD *)(v71 + 120);
            if (v73)
            {
              v74 = v73 - 1;
              v75 = (v73 - 1) & ((v70 >> 4) ^ (v70 >> 9));
              v76 = v72 + 48 * v75;
              v77 = *(_QWORD *)(v76 + 24);
              if (v77 != v70)
              {
                v78 = 1;
                while (v77 != -4096)
                {
                  v79 = v75 + v78++;
                  v75 = v79 & v74;
                  v76 = v72 + 48 * (v79 & v74);
                  v77 = *(_QWORD *)(v76 + 24);
                  if (v77 == v70)
                    goto LABEL_120;
                }
                goto LABEL_119;
              }
            }
            else
            {
LABEL_119:
              v76 = v72 + 48 * v73;
            }
LABEL_120:
            if (v76 == v72 + 48 * v73 || (v80 = *(const llvm::SCEV **)(v76 + 40)) == 0)
              v80 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(*(llvm::ScalarEvolution **)(a1 + 8), v70);
            if (llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)v71, v80, *(const llvm::Loop **)(a1 + 40)) == 1)++*(_DWORD *)(a1 + 68);
            *(_BYTE *)(a1 + 72) = 0;
            goto LABEL_93;
          }
        }
LABEL_105:
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v54, 45) & 1) == 0
          && (llvm::CallBase::hasFnAttrOnCalledFunction(v54, 44) & 1) == 0)
        {
          v64 = *(unsigned __int8 *)(v54 + 16);
          goto LABEL_108;
        }
      }
      else if (v66 == 27)
      {
        if ((*(_WORD *)(v54 + 18) & 0x301) != 0)
          break;
      }
      else if (((1 << (v64 - 33)) & 0x808001D0000010) != 0)
      {
        goto LABEL_108;
      }
    }
LABEL_93:
    v53 = *(_QWORD *)(v53 + 8);
    if (v53 == v244)
      goto LABEL_155;
  }
LABEL_163:
  v108 = *(llvm::OptimizationRemarkEmitter **)(a1 + 80);
  v109 = ****(_QWORD ****)v108;
  if (*(_QWORD *)(v109 + 128)
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v109 + 72) + 48))(*(_QWORD *)(v109 + 72)))
  {
    v110 = *(_QWORD *)(v54 + 40);
    v111 = *(_QWORD *)(v54 + 48);
    v112 = *(_QWORD *)(v110 + 56);
    if (v111)
    {
      v113 = *(_QWORD *)(v111 - 8 * *(unsigned int *)(v111 + 8));
      if (*(_BYTE *)v113 != 15)
        v113 = *(_QWORD *)(v113 - 8 * *(unsigned int *)(v113 + 8));
      v114 = *(_DWORD *)(v111 + 4);
      LODWORD(v111) = *(unsigned __int16 *)(v111 + 2);
    }
    else
    {
      v113 = 0;
      v114 = 0;
    }
    LODWORD(v260) = 10;
    BYTE4(v260) = 2;
    v261 = v112;
    v262 = v113;
    v263 = v114;
    v264 = v111;
    v265 = "loop-versioning-licm";
    v266 = "IllegalLoopInst";
    v267 = 15;
    v268 = 0;
    v269 = 0;
    v270 = v272;
    v271 = 0x400000000;
    v273 = 0;
    v274 = -1;
    v275 = v110;
    v259 = (llvm *)&off_1E814E538;
    v250 = " Unsafe Loop Instruction";
    v251 = 24;
    sub_1C53B17B4((uint64_t)&v270, (const void **)&v250);
    sub_1C61998EC((uint64_t)&v250, (uint64_t)&v259);
    v250 = &off_1E814E538;
    v259 = (llvm *)&off_1E814E790;
    v121 = (char *)v270;
    if ((_DWORD)v271)
    {
      v122 = (unint64_t)v271 << 6;
      do
      {
        v123 = (void **)&v121[v122];
        if (v121[v122 - 17] < 0)
          operator delete(*(v123 - 5));
        if (*((char *)v123 - 41) < 0)
          operator delete(*(v123 - 8));
        v122 -= 64;
      }
      while (v122);
      v121 = (char *)v270;
    }
    if (v121 != v272)
      free(v121);
    llvm::OptimizationRemarkEmitter::emit(v108, (llvm::DiagnosticInfoOptimizationBase *)&v250);
    v250 = &off_1E814E790;
    v48 = (char *)v253;
    if (v254)
    {
      v124 = (unint64_t)v254 << 6;
      do
      {
        v125 = (void **)&v48[v124];
        if (v48[v124 - 17] < 0)
          operator delete(*(v125 - 5));
        if (*((char *)v125 - 41) < 0)
          operator delete(*(v125 - 8));
        v124 -= 64;
      }
      while (v124);
      goto LABEL_61;
    }
LABEL_62:
    if (v48 != v255)
      free(v48);
  }
LABEL_33:
  v36 = 0;
LABEL_34:
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  *(_QWORD *)(a1 + 80) = 0;
  v37 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (v37)
  {
    v38 = sub_1C4D992E4(v37);
    MEMORY[0x1CAA32FC0](v38, 0x1020C406F861E71);
  }
  return v36;
}

uint64_t sub_1C5BB21F0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5BB0524(v0);
}

void sub_1C5BB221C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5BB2240()
{
  return "Loop Versioning for LICM";
}

void *sub_1C5BB2250(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)byte_1EF8F7648);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::LoopAccessLegacyAnalysis::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)byte_1EF8F7650);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::OptimizationRemarkEmitterWrapperPass::ID);
}

uint64_t sub_1C5BB2344(llvm::LoopPass *a1, const llvm::Loop *a2)
{
  uint64_t v4;
  char **v5;
  char *v6;
  uint64_t v7;
  char **v8;
  char *v9;
  uint64_t v10;
  void **v11;
  void *v12;
  uint64_t v13;
  char **v14;
  char *v15;
  uint64_t v16;
  char **v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[6];
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  llvm::LoopPass *v30;

  if ((llvm::LoopPass::skipLoop(a1, a2) & 1) != 0)
    return 0;
  v5 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != llvm::AAResultsWrapperPass::ID);
  v7 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), llvm::AAResultsWrapperPass::ID)+ 32);
  v8 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != llvm::ScalarEvolutionWrapperPass::ID);
  v10 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v11 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != &llvm::OptimizationRemarkEmitterWrapperPass::ID);
  v13 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), &llvm::OptimizationRemarkEmitterWrapperPass::ID)+ 32);
  v14 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v15 = *v14;
    v14 += 2;
  }
  while (v15 != llvm::LoopInfoWrapperPass::ID);
  v16 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v14 - 1) + 96))(*(v14 - 1), llvm::LoopInfoWrapperPass::ID);
  v17 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v18 = *v17;
    v17 += 2;
  }
  while (v18 != llvm::DominatorTreeWrapperPass::ID);
  v19 = v16 + 32;
  v20 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v17 - 1) + 96))(*(v17 - 1), llvm::DominatorTreeWrapperPass::ID);
  v30 = a1;
  v23[0] = v7;
  v23[1] = v10;
  v23[2] = 0;
  v23[3] = sub_1C5BB2524;
  v23[5] = 0;
  v24 = 0;
  v23[4] = &v30;
  v25 = dword_1ED821990;
  v26 = dword_1ED8218D0;
  v27 = 0;
  v28 = 1;
  v29 = v13;
  v4 = sub_1C5BB05EC((uint64_t)v23, a2, v19, v20 + 32);
  if (v24)
  {
    v21 = sub_1C4D992E4(v24);
    MEMORY[0x1CAA32FC0](v21, 0x1020C406F861E71);
  }
  return v4;
}

uint64_t sub_1C5BB2524(uint64_t a1, llvm::Loop *a2)
{
  void **v3;
  void *v4;
  llvm::LoopAccessLegacyAnalysis *v5;

  v3 = **(void ****)(*(_QWORD *)a1 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::LoopAccessLegacyAnalysis::ID);
  v5 = (llvm::LoopAccessLegacyAnalysis *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::LoopAccessLegacyAnalysis::ID);
  return llvm::LoopAccessLegacyAnalysis::getInfo(v5, a2);
}

float sub_1C5BB257C(__int128 *a1, int **a2, _WORD *a3)
{
  float result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED821850, "licm-versioning-invariant-threshold", 0x23uLL);
  xmmword_1ED821870 = *a1;
  result = (float)**a2;
  dword_1ED8218D0 = LODWORD(result);
  byte_1ED8218E4 = 1;
  dword_1ED8218E0 = LODWORD(result);
  word_1ED82185A = (32 * (*a3 & 3)) | word_1ED82185A & 0xFF9F;
  return result;
}

uint64_t sub_1C5BB2600(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::getResultImpl(*a1, &llvm::LoopAccessAnalysis::Key, a2, a1[1])+ 8;
}

uint64_t sub_1C5BB262C()
{
  int v1;
  int v2;
  int *v3;
  __int128 v4;

  *(_QWORD *)&v4 = "LoopVersioningLICM's minimum allowed percentageof possible invariant instructions per loop";
  *((_QWORD *)&v4 + 1) = 90;
  v3 = &v2;
  v1 = 1;
  v2 = 25;
  sub_1C631E880(&v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4EBA468, &qword_1ED821850, &dword_1C475E000);
  *(_QWORD *)&v4 = "LoopVersioningLICM's threshold for maximum allowed loop nest/depth";
  *((_QWORD *)&v4 + 1) = 66;
  v1 = 1;
  v2 = 2;
  v3 = &v2;
  sub_1C61D8E94((uint64_t)&unk_1ED821910, "licm-versioning-max-depth-threshold", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED821910, &dword_1C475E000);
}

void llvm::LowerAtomicPass::run(llvm::AtomicCmpXchgInst *a1@<X1>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  char v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;
  _QWORD *v10;
  uint64_t ***v11;
  int v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t v15;
  int v16;
  char v17;

  v3 = (_QWORD *)((char *)a1 + 72);
  v4 = (_QWORD *)*((_QWORD *)a1 + 10);
  if (v4 == (_QWORD *)((char *)a1 + 72))
    goto LABEL_42;
  v5 = 0;
  do
  {
    v6 = v4 - 3;
    if (!v4)
      v6 = 0;
    v7 = v6 + 5;
    v8 = (_QWORD *)v6[6];
    if (v8 != v7)
    {
      v9 = 0;
      while (1)
      {
        v10 = (_QWORD *)v8[1];
        if (v8)
          v11 = (uint64_t ***)(v8 - 3);
        else
          v11 = 0;
        v12 = *((unsigned __int8 *)v11 + 16);
        if (v8 && v12 == 63)
        {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v11[5] + 5), v11);
          v13 = v11[3];
          v14 = v11[4];
          *v14 = (uint64_t *)v13;
          v13[1] = (uint64_t *)v14;
          v11[3] = 0;
          v11[4] = 0;
          llvm::Value::deleteValue((llvm::Value *)v11);
          v9 = 1;
        }
        else
        {
          if (v8 && v12 == 64)
          {
            v17 = llvm::lowerAtomicCmpXchgInst((llvm *)v11, a1);
LABEL_35:
            v9 |= v17;
            goto LABEL_36;
          }
          if (v8 && v12 == 65)
          {
            v17 = llvm::lowerAtomicRMWInst((llvm *)v11, a1);
            goto LABEL_35;
          }
          if (v12 == 60)
            v15 = (uint64_t)v11;
          else
            v15 = 0;
          if (!v8 || v12 != 60)
          {
            v15 = v12 == 61 ? (uint64_t)v11 : 0;
            if (!v8 || v12 != 61)
              goto LABEL_36;
          }
          v16 = *(unsigned __int8 *)(v15 + 16);
          if (v16 != 60 && v16 != 61)
          {
            if ((v16 - 63) >= 3)
              goto LABEL_36;
LABEL_29:
            *(_WORD *)(v15 + 18) &= 0xFC7Fu;
            *(_BYTE *)(v15 + 60) = 1;
            goto LABEL_36;
          }
          if ((*(_WORD *)(v15 + 18) & 0x380) != 0)
            goto LABEL_29;
        }
LABEL_36:
        v8 = v10;
        if (v10 == v7)
          goto LABEL_39;
      }
    }
    v9 = 0;
LABEL_39:
    v5 |= v9;
    v4 = (_QWORD *)v4[1];
  }
  while (v4 != v3);
  if ((v5 & 1) != 0)
  {
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_QWORD *)(a2 + 88) = 0;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_QWORD *)a2 = a2 + 32;
    *(_QWORD *)(a2 + 8) = a2 + 32;
    *(_QWORD *)(a2 + 16) = 2;
    *(_QWORD *)(a2 + 48) = a2 + 80;
    *(_QWORD *)(a2 + 56) = a2 + 80;
    *(_DWORD *)(a2 + 64) = 2;
    return;
  }
LABEL_42:
  *(_QWORD *)a2 = a2 + 32;
  *(_QWORD *)(a2 + 8) = a2 + 32;
  *(_QWORD *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 48) = a2 + 80;
  *(_QWORD *)(a2 + 56) = a2 + 80;
  *(_QWORD *)(a2 + 64) = 2;
  *(_DWORD *)(a2 + 72) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a2, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C5BB2910(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Lower atomic intrinsics to non-atomic form";
  *(_QWORD *)(v2 + 8) = 42;
  *(_QWORD *)(v2 + 16) = "loweratomic";
  *(_QWORD *)(v2 + 24) = 11;
  *(_QWORD *)(v2 + 32) = &unk_1ED8219D0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5BB2A68;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5BB29A0(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED8219D0;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8196310;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED8219D8);
  if (v3 != -1)
  {
    v7[0] = sub_1C5BB2910;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED8219D8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5BB2A68()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5BB29A0(v0);
}

void sub_1C5BB2A94(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C5BB2AB8(uint64_t a1, llvm::AtomicCmpXchgInst *a2)
{
  char *v2;
  _BYTE *v3;
  _BOOL8 v4;
  char *v6;
  char *v7;
  _BYTE v8[40];
  void *v9;
  int v10;
  int v11;
  uint64_t v12[2];
  int v13;
  uint64_t v14[2];
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v12[0] = 0;
  v12[1] = 0;
  v13 = 0;
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  llvm::LowerAtomicPass::run(a2, (uint64_t)&v6);
  if (v10 == v11)
  {
    v2 = (char *)sub_1C477672C((uint64_t)&v6, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
    if (v7 == v6)
      v3 = &v8[4];
    else
      v3 = v8;
    v4 = v2 == &v7[8 * *(unsigned int *)v3];
  }
  else
  {
    v4 = 1;
  }
  if (v9 != *(void **)&v8[32])
    free(v9);
  if (v7 != v6)
    free(v7);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v14);
  sub_1C4D8B52C(v12);
  return v4;
}

_QWORD *llvm::LowerConstantIntrinsicsPass::run@<X0>(llvm *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  llvm::DataLayout *v6;
  uint64_t CachedResultImpl;
  uint64_t v8;
  _BOOL4 v9;

  v6 = (llvm::DataLayout *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetLibraryAnalysis::Key, (uint64_t)a1)+ 8);
  CachedResultImpl = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(a2, (uint64_t)&llvm::DominatorTreeAnalysis::Key, (uint64_t)a1);
  if (CachedResultImpl)
    v8 = CachedResultImpl + 8;
  else
    v8 = 0;
  v9 = sub_1C5BB2C50(a1, v6, v8);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if (v9)
    return sub_1C4DDB144(a3, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
  else
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

BOOL sub_1C5BB2C50(llvm *a1, llvm::DataLayout *a2, uint64_t a3)
{
  uint64_t v5;
  const llvm::APInt *v6;
  llvm::MemorySSAUpdater *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  int v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  int32x2_t ****v24;
  int32x2_t *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int32x2_t *****v30;
  int32x2_t ****v31;
  int v32;
  int v33;
  char v34;
  llvm::DataLayout *v35;
  char *v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  int64x2_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned __int8 *v44;
  BOOL v45;
  llvm::Value *False;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  BOOL v53;
  llvm::BasicBlock **v54;
  llvm::BasicBlock **v55;
  char isNullValue;
  llvm::BasicBlock *v57;
  llvm::BasicBlock *v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  BOOL v67;
  void **v69;
  int v70;
  char *v72;
  _QWORD *v73;
  llvm::DataLayout *v74;
  int v75;
  llvm::BasicBlock *v76;
  int64x2_t v77;
  llvm::DataLayout *v78;
  void *__p;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86[2];
  _QWORD v87[38];
  void *v88;
  uint64_t v89;
  unsigned __int8 v90;
  unint64_t v91[2];
  unint64_t v92;
  uint64_t v93;
  int32x2_t ****v94;
  uint64_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  void *v100;
  uint64_t v101;
  _QWORD v102[10];

  v102[8] = *MEMORY[0x1E0C80C00];
  v82 = a3;
  LOBYTE(v86[0]) = 0;
  v90 = 0;
  if (a3)
  {
    LOBYTE(v92) = 1;
    sub_1C61DDBE0((uint64_t)v86, &v82, (char *)&v92);
  }
  v5 = *((_QWORD *)a1 + 5);
  v83 = (char *)&v85;
  v84 = 0x800000000;
  v92 = (unint64_t)a1;
  v80 = 0;
  v81 = 0;
  __p = 0;
  sub_1C5643D14((char **)&__p, (uint64_t)&v92);
  v9 = (char *)__p;
  v8 = v80;
  if (v80 != __p)
  {
    do
    {
      v10 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      v11 = v10 + 40;
      for (i = *(_QWORD *)(v10 + 48); i != v11; i = *(_QWORD *)(i + 8))
      {
        v13 = i - 24;
        if (!i)
          v13 = 0;
        if (*(_BYTE *)(v13 + 16) == 84)
        {
          v14 = *(_QWORD *)(v13 - 32);
          if (v14)
          {
            if (!*(_BYTE *)(v14 + 16)
              && *(_QWORD *)(v14 + 24) == *(_QWORD *)(v13 + 72)
              && (*(_BYTE *)(v14 + 33) & 0x20) != 0)
            {
              v15 = *(_DWORD *)(*(_QWORD *)(i - 56) + 36);
              if (v15 == 236 || v15 == 165)
              {
                v92 = 6;
                v93 = 0;
                v94 = (int32x2_t ****)v13;
                if (v13 != -8192 && v13 != -4096 && v13)
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v92);
                v16 = (_QWORD *)sub_1C5087E70((unsigned int *)&v83, (unint64_t)&v92, 1);
                v17 = v84;
                v18 = &v83[24 * v84];
                *(_QWORD *)v18 = 6;
                *((_QWORD *)v18 + 1) = 0;
                v19 = (unint64_t)(v18 + 8);
                v20 = v16[2];
                *((_QWORD *)v18 + 2) = v20;
                if (v20 != -8192 && v20 != -4096)
                {
                  if (v20)
                  {
                    v21 = *v16 & 0xFFFFFFFFFFFFFFF8;
                    *((_QWORD *)v18 + 1) = *(_QWORD *)v21;
                    *(_QWORD *)v21 = v18;
                    *(_QWORD *)v18 = v21 | 6;
                    v22 = (uint64_t *)*((_QWORD *)v18 + 1);
                    if (v22)
                      *v22 = *v22 & 7 | v19;
                  }
                }
                LODWORD(v84) = v17 + 1;
                if (v94 != (int32x2_t ****)-8192 && v94 != (int32x2_t ****)-4096 && v94)
                {
                  v23 = v92 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)(v92 & 0xFFFFFFFFFFFFFFF8) = v93;
                  if (v93)
                  {
                    *(_QWORD *)v93 = *(_QWORD *)v93 & 7 | v23;
                  }
                  else
                  {
                    v24 = v94;
                    v25 = ***v94;
                    v26 = (unint64_t)v25[303];
                    if (v26 <= v23)
                    {
                      v27 = v25[305].u32[0];
                      if (v26 + 16 * v27 > v23)
                      {
                        v28 = v27 - 1;
                        LODWORD(v29) = v28 & ((v94 >> 4) ^ (v94 >> 9));
                        v30 = (int32x2_t *****)(v26 + 16 * v29);
                        v31 = *v30;
                        if (v94 == *v30)
                        {
LABEL_35:
                          *v30 = (int32x2_t ****)-8192;
                          v25[304] = vadd_s32(v25[304], (int32x2_t)0x1FFFFFFFFLL);
                          v24 = v94;
                        }
                        else
                        {
                          v32 = 1;
                          while (v31 != (int32x2_t ****)-4096)
                          {
                            v33 = v29 + v32++;
                            v29 = v33 & v28;
                            v31 = *(int32x2_t *****)(v26 + 16 * v29);
                            if (v94 == v31)
                            {
                              v30 = (int32x2_t *****)(v26 + 16 * v29);
                              goto LABEL_35;
                            }
                          }
                        }
                        *((_BYTE *)v24 + 17) &= ~1u;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    while (v8 != v9);
  }
  if ((_DWORD)v84)
  {
    v78 = a2;
    v34 = 0;
    v35 = (llvm::DataLayout *)(v5 + 272);
    v36 = v83;
    v37 = &v83[24 * v84];
    v38 = v102;
    v39 = (char *)&v94;
    v40 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    while (1)
    {
      v41 = *((_QWORD *)v36 + 2);
      if (!v41)
        goto LABEL_51;
      if (*(_BYTE *)(v41 + 16) != 84)
        goto LABEL_51;
      v42 = *(_QWORD *)(v41 - 32);
      if (!v42
        || *(_BYTE *)(v42 + 16)
        || *(_QWORD *)(v42 + 24) != *(_QWORD *)(v41 + 72)
        || (*(_BYTE *)(v42 + 33) & 0x20) == 0)
      {
        goto LABEL_51;
      }
      v77 = v40;
      v43 = *(_DWORD *)(v42 + 36);
      if (v43 == 236)
      {
        v74 = v35;
        False = llvm::lowerObjectSizeCall(v41, v35, v78, 0, 1);
        goto LABEL_61;
      }
      if (v43 == 165)
        break;
LABEL_50:
      v40 = v77;
LABEL_51:
      v36 += 24;
      if (v36 == v37)
      {
        if ((v34 & 1) != 0)
        {
          if (v90)
            v69 = v86;
          else
            v69 = 0;
          llvm::removeUnreachableBlocks(a1, (llvm::Function *)v69, 0, v7);
        }
        goto LABEL_110;
      }
    }
    v74 = v35;
    v44 = *(unsigned __int8 **)(v41 - 32 * (*(_DWORD *)(v41 + 20) & 0x7FFFFFF));
    if (v44)
      v45 = v44[16] > 0x14u;
    else
      v45 = 1;
    if (v45 || !llvm::Constant::isManifestConstant((llvm::Constant *)v44))
      False = (llvm::Value *)llvm::ConstantInt::getFalse(*(uint64_t ***)v41, v35, v6);
    else
      False = (llvm::Value *)llvm::ConstantInt::getTrue(*(uint64_t ***)v41, v35, v6);
LABEL_61:
    v75 = v90;
    v95 = 1;
    v96 = v77;
    v97 = v77;
    v98 = v77;
    v99 = v77;
    v73 = v38;
    v100 = v38;
    v101 = 0x800000000;
    llvm::replaceAndRecursivelySimplify((llvm::Instruction *)v41, False, 0, 0, 0, (uint64_t)&v95);
    v72 = v39;
    v92 = (unint64_t)v39;
    v93 = 0x800000000;
    sub_1C631EA34((unsigned int *)&v92, (char *)v100, (char *)v100 + 8 * v101);
    if (!(_DWORD)v93)
    {
      LOBYTE(v60) = 0;
LABEL_100:
      sub_1C4EE4F14((char **)&v92);
      v38 = v73;
      if (v100 != v73)
        free(v100);
      v39 = v72;
      if ((v95 & 1) == 0)
        MEMORY[0x1CAA32FB4](v96.i64[0], 8);
      v34 |= v60;
      v35 = v74;
      goto LABEL_50;
    }
    v47 = 0;
    v48 = v92;
    v49 = (char *)(v92 + 24 * v93);
    while (1)
    {
      v50 = *(_QWORD *)(v48 + 16);
      if (!v50)
        goto LABEL_81;
      if (*(_BYTE *)(v50 + 16) != 30)
        goto LABEL_81;
      v51 = *(_DWORD *)(v50 + 20) & 0x7FFFFFF;
      if ((_DWORD)v51 == 1)
        goto LABEL_81;
      v52 = *(unsigned __int8 **)(v50 - 32 * v51);
      if (v52)
        v53 = v52[16] > 0x14u;
      else
        v53 = 1;
      if (!v53)
      {
        isNullValue = llvm::Constant::isNullValue((llvm::Constant *)v52);
        if ((isNullValue & 1) != 0 || (sub_1C4E71060((uint64_t)v91, (llvm::Constant *)v52) & 1) != 0)
        {
          v55 = (llvm::BasicBlock **)(v50 - 32);
          v54 = (llvm::BasicBlock **)(v50 - 64);
          goto LABEL_76;
        }
        v52 = *(unsigned __int8 **)(v50 - 32 * (*(_DWORD *)(v50 + 20) & 0x7FFFFFF));
      }
      if (!sub_1C4D89CC8((uint64_t)v91, (llvm::Constant *)v52))
        goto LABEL_81;
      v54 = (llvm::BasicBlock **)(v50 - 32);
      v55 = (llvm::BasicBlock **)(v50 - 64);
LABEL_76:
      v57 = *v55;
      v58 = *v54;
      if (*v54)
        v59 = v58 == v57;
      else
        v59 = 1;
      if (!v59)
      {
        v76 = *(llvm::BasicBlock **)(v50 + 40);
        llvm::BasicBlock::removePredecessor(v57, v76, 0);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v50 + 40) + 40, (uint64_t ***)v50);
        v61 = *(_QWORD *)(v50 + 24);
        v62 = *(_QWORD **)(v50 + 32);
        *v62 = v61;
        *(_QWORD *)(v61 + 8) = v62;
        *(_QWORD *)(v50 + 24) = 0;
        *(_QWORD *)(v50 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v50);
        v63 = operator new(0x60uLL);
        v63[13] = v63[13] & 0x38000000 | 1;
        *(_QWORD *)v63 = 0;
        *((_QWORD *)v63 + 1) = 0;
        *((_QWORD *)v63 + 2) = 0;
        *((_QWORD *)v63 + 3) = v63 + 8;
        llvm::BranchInst::BranchInst((llvm::BranchInst *)(v63 + 8), v58, v76);
        if (v75)
        {
          v91[0] = (unint64_t)v76;
          v91[1] = (unint64_t)v57 | 4;
          llvm::DomTreeUpdater::applyUpdates((uint64_t)v86, v91, 1);
        }
        v64 = *((_QWORD *)v57 + 1);
        if (!v64)
        {
          v60 = 1;
          goto LABEL_82;
        }
        while (1)
        {
          v65 = *(_QWORD *)(v64 + 24);
          v66 = *(unsigned __int8 *)(v65 + 16);
          v67 = v65 && v66 >= 0x1C;
          if (v67 && v66 - 29 <= 0xA)
            break;
          v64 = *(_QWORD *)(v64 + 8);
          v60 = 1;
          if (!v64)
            goto LABEL_82;
        }
      }
LABEL_81:
      v60 = v47;
LABEL_82:
      v48 += 24;
      v47 = v60;
      if ((char *)v48 == v49)
        goto LABEL_100;
    }
  }
LABEL_110:
  v70 = v84;
  if (__p)
  {
    v80 = (char *)__p;
    operator delete(__p);
  }
  sub_1C52768FC(&v83);
  if (v90)
  {
    llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)v86);
    v92 = (unint64_t)&v89;
    sub_1C50B10F0((void ***)&v92);
    if (v88 != (void *)v87[37])
      free(v88);
    if (v86[0] != v87)
      free(v86[0]);
  }
  return v70 != 0;
}

uint64_t sub_1C5BB3348(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetLibraryInfoWrapperPassPass(a1);
  llvm::initializeDominatorTreeWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Lower constant intrinsics";
  *(_QWORD *)(v2 + 8) = 25;
  *(_QWORD *)(v2 + 16) = "lower-constant-intrinsics";
  *(_QWORD *)(v2 + 24) = 25;
  *(_QWORD *)(v2 + 32) = &unk_1ED8219E0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5BB34A8;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5BB33E0(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED8219E0;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81963B0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED8219E8);
  if (v3 != -1)
  {
    v7[0] = sub_1C5BB3348;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED8219E8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5BB34A8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5BB33E0(v0);
}

void sub_1C5BB34D4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5BB34F8(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
}

BOOL sub_1C5BB354C(uint64_t a1, llvm *a2)
{
  char **v4;
  char *v5;
  uint64_t v6;
  void **v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t AnalysisPass;
  uint64_t v11;
  void *v13;
  void **v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17[2];
  int v18;
  uint64_t v19[2];
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  void *__src;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = **(char ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::TargetLibraryInfoWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  v19[0] = 0;
  v19[1] = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  llvm::TargetLibraryAnalysis::run(v6 + 32, (uint64_t)a2, (uint64_t)&v24);
  *(_QWORD *)(v6 + 240) = v24;
  if (*(_BYTE *)(v6 + 320))
  {
    if ((uint64_t *)(v6 + 240) == &v24)
    {
LABEL_16:
      *(_DWORD *)(v6 + 312) = v28;
      goto LABEL_17;
    }
    v7 = (void **)(v6 + 248);
    v8 = v26;
    v9 = *(unsigned int *)(v6 + 256);
    if (v9 >= v26)
    {
      if (v26)
        memmove(*v7, __src, 8 * v26);
      goto LABEL_15;
    }
    if (*(_DWORD *)(v6 + 260) < v26)
    {
      *(_DWORD *)(v6 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 248, v6 + 264, v8, 8);
    }
    else if ((_DWORD)v9)
    {
      memmove(*v7, __src, 8 * v9);
      goto LABEL_13;
    }
    v9 = 0;
LABEL_13:
    if (v9 != v26)
      memcpy((char *)*v7 + 8 * v9, (char *)__src + 8 * v9, 8 * v26 - 8 * v9);
LABEL_15:
    *(_DWORD *)(v6 + 256) = v8;
    goto LABEL_16;
  }
  v13 = (void *)(v6 + 264);
  *(_QWORD *)(v6 + 248) = v6 + 264;
  v14 = (void **)(v6 + 248);
  *(_QWORD *)(v6 + 256) = 0x600000000;
  v15 = v26;
  if (v26 && v14 != &__src)
  {
    if (v26 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 248, v6 + 264, v26, 8);
      v16 = v26;
      if (!v26)
      {
LABEL_32:
        *(_DWORD *)(v6 + 256) = v15;
        goto LABEL_33;
      }
      v13 = *v14;
    }
    else
    {
      v16 = v26;
    }
    memcpy(v13, __src, 8 * v16);
    goto LABEL_32;
  }
LABEL_33:
  *(_DWORD *)(v6 + 312) = v28;
  *(_BYTE *)(v6 + 320) = 1;
LABEL_17:
  if (__src != &v27)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v19);
  sub_1C4D8B52C(v17);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), llvm::DominatorTreeWrapperPass::ID, 1);
  if (AnalysisPass)
    AnalysisPass = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, llvm::DominatorTreeWrapperPass::ID);
  if (AnalysisPass)
    v11 = AnalysisPass + 32;
  else
    v11 = 0;
  return sub_1C5BB2C50(a2, (llvm::DataLayout *)(v6 + 240), v11);
}

double llvm::LowerExpectIntrinsicPass::run@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = sub_1C5BB3888(a1);
  v4 = a2 + 80;
  if (v3)
  {
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_QWORD *)(a2 + 88) = 0;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_QWORD *)a2 = a2 + 32;
    *(_QWORD *)(a2 + 8) = a2 + 32;
    *(_QWORD *)&result = 2;
    *(_QWORD *)(a2 + 16) = 2;
    *(_QWORD *)(a2 + 48) = v4;
    *(_QWORD *)(a2 + 56) = v4;
    *(_DWORD *)(a2 + 64) = 2;
  }
  else
  {
    *(_QWORD *)a2 = a2 + 32;
    *(_QWORD *)(a2 + 8) = a2 + 32;
    *(_QWORD *)(a2 + 16) = 2;
    *(_DWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 48) = v4;
    *(_QWORD *)(a2 + 56) = v4;
    *(_QWORD *)(a2 + 64) = 2;
    *(_DWORD *)(a2 + 72) = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a2, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  return result;
}

uint64_t sub_1C5BB3888(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;
  _QWORD **v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  void *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  llvm::MDNode *v41;
  llvm::Value *v42;
  uint64_t v43;
  int v44;
  uint64_t *v45;
  uint64_t v46;
  _QWORD *v48;
  _QWORD *v49;
  int v50;
  llvm::ValueAsMetadata *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t *v68;
  uint64_t v69;
  BOOL v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  unint64_t v82;
  char *v83;
  char *v84;
  _DWORD *v85;
  uint64_t v86;
  int v87;
  int v88;
  _DWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  BOOL v97;
  char v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  llvm::BasicBlock *v102;
  _QWORD *v103;
  llvm::Value *v104;
  _QWORD *v105;
  unsigned int v106;
  BOOL v107;
  uint64_t SinglePredecessor;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  BOOL v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  llvm::MDNode *v120;
  uint64_t v121;
  _QWORD *v122;
  unint64_t v123;
  _QWORD *v124;
  unint64_t v125;
  llvm::MDNode *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  unint64_t v144;
  uint64_t BranchWeights;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  void *__s2;
  unsigned int v169;
  void *v170;
  uint64_t v171;
  _BYTE v172[64];
  uint64_t *v173;
  unsigned int v174;
  uint64_t v175;

  v175 = *MEMORY[0x1E0C80C00];
  v1 = a1 + 72;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2 != a1 + 72)
  {
    v166 = 0;
    v162 = a1 + 72;
    while (1)
    {
      if (v2)
        v3 = v2 - 24;
      else
        v3 = 0;
      v6 = *(_QWORD ***)(v3 + 40);
      v5 = (_QWORD **)(v3 + 40);
      v4 = v6;
      if (v6 == v5)
        goto LABEL_76;
      if (v4)
        v7 = (uint64_t)(v4 - 3);
      else
        v7 = 0;
      v8 = *(unsigned __int8 *)(v7 + 16) - 40;
      if (v8 >= 0xFFFFFFF5)
        v9 = v7;
      else
        v9 = 0;
      v10 = *(unsigned __int8 *)(v9 + 16);
      if (v4 && (v10 == 30 ? (v11 = v8 >= 0xFFFFFFF5) : (v11 = 0), v11))
      {
        if ((*(_DWORD *)(v9 + 20) & 0x7FFFFFF) == 1)
          goto LABEL_76;
        v13 = (_QWORD *)(v9 - 96);
        v12 = *(_QWORD *)(v9 - 96);
        v14 = *(unsigned __int8 *)(v12 + 16);
        if (v14 == 81)
          v15 = *(_QWORD *)(v9 - 96);
        else
          v15 = 0;
        if (v15)
        {
          v16 = *(_WORD *)(v15 + 18) & 0x3F;
          if ((v16 - 34) < 0xFFFFFFFE)
            goto LABEL_76;
          v17 = *(_QWORD *)(v15 - 32);
          if (!v17 || *(_BYTE *)(v17 + 16) != 16)
            goto LABEL_76;
          v12 = *(_QWORD *)(v15 - 64);
          if (*(_BYTE *)(v12 + 16) != 84 || *(_DWORD *)(v17 + 32) > 0x40u)
            goto LABEL_76;
          v19 = *(_QWORD *)(v17 + 24);
        }
        else
        {
          if (v14 != 84)
            goto LABEL_76;
          v19 = 0;
          v16 = 33;
        }
        v43 = *(_QWORD *)(v12 - 32);
        if (!v43)
          goto LABEL_76;
        if (*(_BYTE *)(v43 + 16))
          goto LABEL_76;
        if (*(_QWORD *)(v43 + 24) != *(_QWORD *)(v12 + 72))
          goto LABEL_76;
        v44 = *(_DWORD *)(v43 + 36);
        if ((v44 - 77) > 1)
          goto LABEL_76;
        v45 = (uint64_t *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF));
        v46 = v45[4];
        if (!v46 || *(_BYTE *)(v46 + 16) != 16)
          goto LABEL_76;
        v165 = *v45;
        __s2 = **(void ***)v12;
        v141 = sub_1C5BB4784(v44, v12, 2);
        v142 = v141;
        v170 = v172;
        v171 = 0x400000000;
        v143 = (_QWORD *)(v46 + 24);
        if (*(_DWORD *)(v46 + 32) >= 0x41u)
          v143 = (_QWORD *)*v143;
        v144 = HIDWORD(v141);
        if ((v16 == 32) == (*v143 != v19))
        {
          v173 = (uint64_t *)__PAIR64__(v141, HIDWORD(v141));
          BranchWeights = llvm::MDBuilder::createBranchWeights((uint64_t **)&__s2, (uint64_t)&v173, 2);
          LODWORD(v171) = 0;
          if (HIDWORD(v171) > 1)
          {
            v147 = 0;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, (uint64_t)v172, 2uLL, 4);
            v147 = v171;
          }
          v148 = v165;
          *(_QWORD *)((char *)v170 + 4 * v147) = v144 | (v142 << 32);
        }
        else
        {
          v173 = (uint64_t *)v141;
          BranchWeights = llvm::MDBuilder::createBranchWeights((uint64_t **)&__s2, (uint64_t)&v173, 2);
          LODWORD(v171) = 0;
          if (HIDWORD(v171) > 1)
          {
            v146 = 0;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, (uint64_t)v172, 2uLL, 4);
            v146 = v171;
          }
          v148 = v165;
          *(_QWORD *)((char *)v170 + 4 * v146) = v142;
        }
        v149 = (v171 + 2);
        LODWORD(v171) = v171 + 2;
        if (v15)
        {
          v154 = (_QWORD *)(v15 - 64);
          if (*(_QWORD *)(v15 - 64))
          {
            **(_QWORD **)(v15 - 48) = *(_QWORD *)(v15 - 56);
            v155 = *(_QWORD *)(v15 - 56);
            if (v155)
              *(_QWORD *)(v155 + 16) = *(_QWORD *)(v15 - 48);
          }
          *v154 = v148;
          if (v148)
          {
            v158 = *(_QWORD *)(v148 + 8);
            v157 = (_QWORD *)(v148 + 8);
            v156 = v158;
            *(_QWORD *)(v15 - 56) = v158;
            if (v158)
              *(_QWORD *)(v156 + 16) = v15 - 56;
            *(_QWORD *)(v15 - 48) = v157;
            *v157 = v154;
          }
        }
        else
        {
          if (*v13)
          {
            **(_QWORD **)(v9 - 80) = *(_QWORD *)(v9 - 88);
            v150 = *(_QWORD *)(v9 - 88);
            if (v150)
              *(_QWORD *)(v150 + 16) = *(_QWORD *)(v9 - 80);
          }
          *v13 = v148;
          if (v148)
          {
            v153 = *(_QWORD *)(v148 + 8);
            v152 = (_QWORD *)(v148 + 8);
            v151 = v153;
            *(_QWORD *)(v9 - 88) = v153;
            if (v153)
              *(_QWORD *)(v151 + 16) = v9 - 88;
            *(_QWORD *)(v9 - 80) = v152;
            *v152 = v13;
          }
        }
        llvm::misexpect::checkFrontendInstrumentation((llvm::misexpect *)v9, (uint64_t)v170, v149);
        if (!BranchWeights && !*(_QWORD *)(v9 + 48) && (*(_BYTE *)(v9 + 23) & 0x20) == 0)
          goto LABEL_296;
        v42 = (llvm::Value *)v9;
        v41 = (llvm::MDNode *)BranchWeights;
      }
      else
      {
        if (!v4)
          goto LABEL_76;
        if (v10 != 31 || v8 < 0xFFFFFFF5)
          goto LABEL_76;
        v21 = *(_DWORD *)(v9 + 20);
        v22 = (v21 & 0x40000000) != 0 ? *(uint64_t **)(v9 - 8) : (uint64_t *)(v9 - 32 * (v21 & 0x7FFFFFF));
        v23 = *v22;
        if (!*v22)
          goto LABEL_76;
        if (*(_BYTE *)(v23 + 16) != 84)
          goto LABEL_76;
        v24 = *(_QWORD *)(v23 - 32);
        if (!v24
          || *(_BYTE *)(v24 + 16)
          || *(_QWORD *)(v24 + 24) != *(_QWORD *)(v23 + 72)
          || (*(_DWORD *)(v24 + 36) - 77) > 1)
        {
          goto LABEL_76;
        }
        v25 = (uint64_t *)(v23 - 32 * (*(_DWORD *)(v23 + 20) & 0x7FFFFFF));
        v26 = v25[4];
        if (!v26 || *(_BYTE *)(v26 + 16) != 16)
          goto LABEL_76;
        v28 = *v25;
        sub_1C4E5D490(v9, v26);
        v30 = v29;
        v31 = ((unint64_t)*(unsigned int *)(v9 + 20) >> 1) & 0x3FFFFFF;
        v32 = sub_1C5BB4784(*(_DWORD *)(v24 + 36), v23, (*(_DWORD *)(v9 + 20) >> 1) & 0x3FFFFFF);
        v33 = v32;
        v170 = v172;
        v171 = 0x1000000000;
        sub_1C4893E04((char *)&v170, v31, SHIDWORD(v32));
        v34 = (v30 + 1);
        if (v30 == -2)
          v34 = 0;
        v35 = v170;
        *((_DWORD *)v170 + v34) = v33;
        llvm::misexpect::checkFrontendInstrumentation((llvm::misexpect *)v9, (uint64_t)v35, v171);
        v36 = *(_DWORD *)(v9 + 20);
        if ((v36 & 0x40000000) != 0)
          v37 = *(_QWORD *)(v9 - 8);
        else
          v37 = v9 - 32 * (v36 & 0x7FFFFFF);
        if (*(_QWORD *)v37)
        {
          **(_QWORD **)(v37 + 16) = *(_QWORD *)(v37 + 8);
          v159 = *(_QWORD *)(v37 + 8);
          if (v159)
            *(_QWORD *)(v159 + 16) = *(_QWORD *)(v37 + 16);
        }
        *(_QWORD *)v37 = v28;
        if (v28)
        {
          v40 = *(_QWORD *)(v28 + 8);
          v39 = (uint64_t *)(v28 + 8);
          v38 = v40;
          *(_QWORD *)(v37 + 8) = v40;
          if (v40)
            *(_QWORD *)(v38 + 16) = v37 + 8;
          *(_QWORD *)(v37 + 16) = v39;
          *v39 = v37;
        }
        v173 = **(uint64_t ***)v23;
        v41 = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights(&v173, (uint64_t)v170, v171);
        if (!v41 && !*(_QWORD *)(v9 + 48) && (*(_BYTE *)(v9 + 23) & 0x20) == 0)
          goto LABEL_296;
        v42 = (llvm::Value *)v9;
      }
      llvm::Value::setMetadata(v42, 2, v41);
LABEL_296:
      if (v170 != v172)
        free(v170);
LABEL_76:
      v48 = *v5;
      if (*v5 != v5)
      {
        while (1)
        {
          v49 = (_QWORD *)*v48;
          v50 = *((unsigned __int8 *)v48 - 8);
          v51 = v50 == 84 ? (llvm::ValueAsMetadata *)(v48 - 3) : 0;
          if (v50 == 84)
            break;
          if (v50 == 85)
          {
            v59 = v48 - 15;
            v58 = *(v48 - 15);
            v60 = *(unsigned __int8 *)(v58 + 16);
            if (v60 == 81)
              v61 = *(v48 - 15);
            else
              v61 = 0;
            if (v61)
            {
              v62 = *(_WORD *)(v61 + 18) & 0x3F;
              if ((v62 - 34) >= 0xFFFFFFFE)
              {
                v63 = *(_QWORD *)(v61 - 32);
                if (v63 && *(_BYTE *)(v63 + 16) == 16)
                {
                  v58 = *(_QWORD *)(v61 - 64);
                  if (*(_BYTE *)(v58 + 16) == 84 && *(_DWORD *)(v63 + 32) <= 0x40u)
                  {
                    v65 = *(_QWORD *)(v63 + 24);
LABEL_106:
                    v66 = *(_QWORD *)(v58 - 32);
                    if (v66)
                    {
                      if (!*(_BYTE *)(v66 + 16) && *(_QWORD *)(v66 + 24) == *(_QWORD *)(v58 + 72))
                      {
                        v67 = *(_DWORD *)(v66 + 36);
                        if ((v67 - 77) <= 1)
                        {
                          v68 = (uint64_t *)(v58 - 32 * (*(_DWORD *)(v58 + 20) & 0x7FFFFFF));
                          v69 = v68[4];
                          if (v69)
                            v70 = *(_BYTE *)(v69 + 16) == 16;
                          else
                            v70 = 0;
                          if (v70)
                          {
                            v164 = *v68;
                            __s2 = **(void ***)v58;
                            v123 = sub_1C5BB4784(v67, v58, 2);
                            v170 = v172;
                            v171 = 0x400000000;
                            v124 = (_QWORD *)(v69 + 24);
                            if (*(_DWORD *)(v69 + 32) >= 0x41u)
                              v124 = (_QWORD *)*v124;
                            v1 = v162;
                            if ((v62 == 32) == (*v124 != v65))
                            {
                              v161 = HIDWORD(v123);
                              v173 = (uint64_t *)__PAIR64__(v123, HIDWORD(v123));
                              v128 = v123;
                              v126 = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights((uint64_t **)&__s2, (uint64_t)&v173, 2);
                              LODWORD(v171) = 0;
                              if (HIDWORD(v171) > 1)
                              {
                                v129 = 0;
                              }
                              else
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, (uint64_t)v172, 2uLL, 4);
                                v129 = v171;
                              }
                              v130 = v164;
                              *(_QWORD *)((char *)v170 + 4 * v129) = v161 | (v128 << 32);
                            }
                            else
                            {
                              v125 = v123;
                              v173 = (uint64_t *)v123;
                              v126 = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights((uint64_t **)&__s2, (uint64_t)&v173, 2);
                              LODWORD(v171) = 0;
                              if (HIDWORD(v171) > 1)
                              {
                                v127 = 0;
                              }
                              else
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, (uint64_t)v172, 2uLL, 4);
                                v127 = v171;
                              }
                              v130 = v164;
                              *(_QWORD *)((char *)v170 + 4 * v127) = v125;
                            }
                            v131 = (v171 + 2);
                            LODWORD(v171) = v171 + 2;
                            if (v61)
                            {
                              v136 = (_QWORD *)(v61 - 64);
                              if (*(_QWORD *)(v61 - 64))
                              {
                                **(_QWORD **)(v61 - 48) = *(_QWORD *)(v61 - 56);
                                v137 = *(_QWORD *)(v61 - 56);
                                if (v137)
                                  *(_QWORD *)(v137 + 16) = *(_QWORD *)(v61 - 48);
                              }
                              *v136 = v130;
                              if (v130)
                              {
                                v140 = *(_QWORD *)(v130 + 8);
                                v139 = (_QWORD *)(v130 + 8);
                                v138 = v140;
                                *(_QWORD *)(v61 - 56) = v140;
                                if (v140)
                                  *(_QWORD *)(v138 + 16) = v61 - 56;
                                *(_QWORD *)(v61 - 48) = v139;
                                *v139 = v136;
                              }
                            }
                            else
                            {
                              if (*v59)
                              {
                                *(_QWORD *)*(v48 - 13) = *(v48 - 14);
                                v132 = *(v48 - 14);
                                if (v132)
                                  *(_QWORD *)(v132 + 16) = *(v48 - 13);
                              }
                              *v59 = v130;
                              if (v130)
                              {
                                v135 = *(_QWORD *)(v130 + 8);
                                v134 = (_QWORD *)(v130 + 8);
                                v133 = v135;
                                *(v48 - 14) = v135;
                                if (v135)
                                  *(_QWORD *)(v133 + 16) = v48 - 14;
                                *(v48 - 13) = v134;
                                *v134 = v59;
                              }
                            }
                            llvm::misexpect::checkFrontendInstrumentation((llvm::misexpect *)(v48 - 3), (uint64_t)v170, v131);
                            if (v126 || v48[3] || (*((_BYTE *)v48 - 1) & 0x20) != 0)
                              llvm::Value::setMetadata((llvm::Value *)(v48 - 3), 2, v126);
                            if (v170 != v172)
                              free(v170);
                          }
                          else
                          {
                            v1 = v162;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            else if (v60 == 84)
            {
              v65 = 0;
              v62 = 33;
              goto LABEL_106;
            }
          }
LABEL_229:
          v48 = v49;
          if (v49 == v5)
            goto LABEL_263;
        }
        v52 = *(v48 - 7);
        if (!v52
          || *(_BYTE *)(v52 + 16)
          || *(_QWORD *)(v52 + 24) != v48[6]
          || (*(_DWORD *)(v52 + 36) - 77) > 1)
        {
          goto LABEL_229;
        }
        v53 = *((_DWORD *)v48 - 1) & 0x7FFFFFF;
        v54 = &v48[-4 * v53 - 3];
        v55 = v54[4];
        v163 = v55;
        if (v55)
          v56 = *(_BYTE *)(v55 + 16) == 16;
        else
          v56 = 0;
        if (!v56)
        {
          v57 = -v53;
LABEL_228:
          v166 = 1;
          llvm::Value::doRAUW(v51, *((llvm::Value **)v51 + 4 * v57), (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v51 + 5) + 40, (uint64_t ***)v51);
          v121 = *((_QWORD *)v51 + 3);
          v122 = (_QWORD *)*((_QWORD *)v51 + 4);
          *v122 = v121;
          *(_QWORD *)(v121 + 8) = v122;
          *((_QWORD *)v51 + 3) = 0;
          *((_QWORD *)v51 + 4) = 0;
          llvm::Value::deleteValue(v51);
          goto LABEL_229;
        }
        v71 = 0;
        v72 = *v54;
        v170 = v172;
        v171 = 0x400000000;
        while (2)
        {
          v73 = *(unsigned __int8 *)(v72 + 16);
          if (v73 <= 0x43)
          {
            if (v73 == 58)
            {
              v75 = *(_QWORD *)(v72 - 32);
              if (v75)
                v76 = *(_BYTE *)(v75 + 16) == 16;
              else
                v76 = 0;
              if (!v76)
                goto LABEL_225;
              v74 = *(_QWORD *)(v72 - 64);
            }
            else
            {
              if (v73 != 67)
                goto LABEL_225;
LABEL_121:
              v74 = *(_QWORD *)(v72 - 32);
            }
            if (v71 >= HIDWORD(v171))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, (uint64_t)v172, v71 + 1, 8);
              v71 = v171;
            }
            *((_QWORD *)v170 + v71) = v72;
            v71 = v171 + 1;
            LODWORD(v171) = v171 + 1;
            v72 = v74;
            continue;
          }
          break;
        }
        if (v73 == 68)
          goto LABEL_121;
        if (v73 != 83 || (v167 = *(_DWORD *)(v72 + 20) & 0x7FFFFFF, !(_DWORD)v167))
        {
LABEL_225:
          if (v170 != v172)
            free(v170);
          v57 = -(uint64_t)(*((_DWORD *)v48 - 1) & 0x7FFFFFF);
          v1 = v162;
          goto LABEL_228;
        }
        v77 = 0;
        while (2)
        {
          v78 = *(_DWORD *)(v72 + 20);
          if ((v78 & 0x40000000) != 0)
            v79 = *(_QWORD *)(v72 - 8);
          else
            v79 = v72 - 32 * (v78 & 0x7FFFFFF);
          v80 = *(_QWORD *)(v79 + 32 * v77);
          if (v80)
            v81 = *(_BYTE *)(v80 + 16) == 16;
          else
            v81 = 0;
          if (!v81)
          {
LABEL_224:
            if (++v77 == v167)
              goto LABEL_225;
            continue;
          }
          break;
        }
        v82 = *(unsigned int *)(v80 + 32);
        v169 = v82;
        if (v82 > 0x40)
        {
          __s2 = (void *)operator new[]();
          v82 = v169;
          memcpy(__s2, *(const void **)(v80 + 24), (((unint64_t)v169 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          __s2 = *(void **)(v80 + 24);
        }
        if ((_DWORD)v171)
        {
          v83 = (char *)v170;
          v84 = (char *)v170 + 8 * v171;
          while (1)
          {
            v86 = *((_QWORD *)v84 - 1);
            v84 -= 8;
            v85 = (_DWORD *)v86;
            v87 = *(unsigned __int8 *)(v86 + 16);
            if (v87 == 68)
              break;
            if (v87 == 67)
            {
              llvm::APInt::zext((llvm::APInt *)&__s2, *(_DWORD *)(*(_QWORD *)v85 + 8) >> 8, (uint64_t)&v173);
              goto LABEL_151;
            }
            v88 = v85[5];
            if ((v88 & 0x40000000) != 0)
              v89 = (_DWORD *)*((_QWORD *)v85 - 1);
            else
              v89 = &v85[-8 * (v88 & 0x7FFFFFF)];
            v90 = *((_QWORD *)v89 + 4);
            if (v82 > 0x40)
            {
              v91 = __s2;
              v92 = *(uint64_t **)(v90 + 24);
              v93 = (v82 + 63) >> 6;
              do
              {
                v94 = *v92++;
                *v91++ ^= v94;
                --v93;
              }
              while (v93);
            }
            else
            {
              __s2 = (void *)((unint64_t)__s2 ^ *(_QWORD *)(v90 + 24));
            }
LABEL_155:
            if (v84 == v83)
              goto LABEL_165;
          }
          llvm::APInt::sext((llvm::APInt *)&__s2, *(_DWORD *)(*(_QWORD *)v85 + 8) >> 8, (llvm::APInt *)&v173);
LABEL_151:
          if (v169 >= 0x41 && __s2)
            MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
          __s2 = v173;
          v82 = v174;
          v169 = v174;
          goto LABEL_155;
        }
LABEL_165:
        v95 = *(unsigned int *)(v163 + 32);
        v96 = __s2;
        if (v95 > 0x40)
          v97 = memcmp(*(const void **)(v163 + 24), __s2, ((unint64_t)(v95 + 63) >> 3) & 0x3FFFFFF8) == 0;
        else
          v97 = *(_QWORD *)(v163 + 24) == (_QWORD)__s2;
        v98 = v97;
        if (v82 >= 0x41 && v96)
          MEMORY[0x1CAA32F9C](v96, 0x1000C8000313F17);
        if ((v98 & 1) != 0)
          goto LABEL_224;
        v99 = *(_DWORD *)(v72 + 20);
        v100 = (v99 & 0x40000000) != 0 ? *(_QWORD *)(v72 - 8) : v72 - 32 * (v99 & 0x7FFFFFF);
        v101 = *(unsigned int *)(v72 + 60);
        v102 = *(llvm::BasicBlock **)(v100 + 32 * v101 + 8 * v77);
        v103 = (_QWORD *)*((_QWORD *)v102 + 5);
        if (v103 == (_QWORD *)((char *)v102 + 40))
          goto LABEL_204;
        v104 = (llvm::Value *)(v103 - 3);
        if (v103)
          v105 = v103 - 3;
        else
          v105 = 0;
        v106 = *((unsigned __int8 *)v105 + 16) - 40;
        if (v106 < 0xFFFFFFF5)
          v105 = 0;
        if (!v103
          || (*((_BYTE *)v105 + 16) == 30 ? (v107 = v106 >= 0xFFFFFFF5) : (v107 = 0),
              !v107 || (*((_DWORD *)v105 + 5) & 0x7FFFFFF) != 3))
        {
LABEL_204:
          SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v102);
          if (!SinglePredecessor)
            goto LABEL_224;
          v109 = *(_QWORD *)(SinglePredecessor + 40);
          if (v109 == SinglePredecessor + 40)
            goto LABEL_224;
          v104 = (llvm::Value *)(v109 - 24);
          if (v109)
            v110 = v109 - 24;
          else
            v110 = 0;
          v111 = *(unsigned __int8 *)(v110 + 16) - 40;
          if (v111 < 0xFFFFFFF5)
            v110 = 0;
          if (!v109)
            goto LABEL_224;
          v112 = *(_BYTE *)(v110 + 16) == 30 && v111 >= 0xFFFFFFF5;
          if (!v112 || (*(_DWORD *)(v110 + 20) & 0x7FFFFFF) == 1)
            goto LABEL_224;
        }
        __s2 = **(void ***)v72;
        if ((v99 & 0x40000000) != 0)
          v113 = *(_QWORD *)(v72 - 8);
        else
          v113 = v72 - 32 * (v99 & 0x7FFFFFF);
        v114 = *(_QWORD *)(v113 + 32 * v101 + 8 * v77);
        v115 = (uint64_t *)sub_1C5BB4784(*(_DWORD *)(*(v48 - 7) + 36), (uint64_t)v51, 2);
        v116 = *((_QWORD *)v104 - 8);
        if (v114 == v116)
          goto LABEL_219;
        if (v114 != *((_QWORD *)v104 + 5))
        {
          if (v114 != *((_QWORD *)v104 - 4))
            goto LABEL_224;
          goto LABEL_218;
        }
        v117 = *(_QWORD *)(v72 + 40);
        if (v117 == v116)
        {
LABEL_219:
          v173 = v115;
        }
        else
        {
          v118 = *((_QWORD *)v104 - 4);
          if (v114 != v118 && v117 != v118)
            goto LABEL_224;
LABEL_218:
          v173 = (uint64_t *)__PAIR64__(v115, HIDWORD(v115));
        }
        v120 = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights((uint64_t **)&__s2, (uint64_t)&v173, 2);
        if (v120 || *((_QWORD *)v104 + 6) || (*((_BYTE *)v104 + 23) & 0x20) != 0)
          llvm::Value::setMetadata(v104, 2, v120);
        goto LABEL_224;
      }
LABEL_263:
      v2 = *(_QWORD *)(v2 + 8);
      if (v2 == v1)
        return v166 & 1;
    }
  }
  v166 = 0;
  return v166 & 1;
}

uint64_t sub_1C5BB462C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Lower 'expect' Intrinsics";
  *(_QWORD *)(v2 + 8) = 25;
  *(_QWORD *)(v2 + 16) = "lower-expect";
  *(_QWORD *)(v2 + 24) = 12;
  *(_QWORD *)(v2 + 32) = &unk_1ED8219F0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5BB4808;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5BB46BC(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED8219F0;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8196450;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED8219F8);
  if (v3 != -1)
  {
    v7[0] = sub_1C5BB462C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED8219F8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

unint64_t sub_1C5BB4784(int a1, uint64_t a2, int a3)
{
  unsigned int v3;
  uint64_t v4;
  double v6;

  if (a1 == 77)
  {
    v3 = dword_1ED821A80;
    v4 = dword_1ED821B40;
  }
  else
  {
    v6 = llvm::APFloat::convertToDouble((llvm::APFloat *)(*(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64)
                                                        + 24));
    v3 = vcvtpd_u64_f64(v6 * 2147483650.0 + 1.0);
    LODWORD(v4) = vcvtpd_u64_f64((1.0 - v6) / (double)(a3 - 1) * 2147483650.0 + 1.0);
  }
  return v3 | (unint64_t)(v4 << 32);
}

uint64_t sub_1C5BB4808()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5BB46BC(v0);
}

void sub_1C5BB4834(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5BB4858(uint64_t a1, uint64_t a2)
{
  return sub_1C5BB3888(a2);
}

uint64_t sub_1C5BB4860()
{
  __int128 v1;
  int v2;
  int *v3;
  int v4;

  v4 = 1;
  v2 = 2000;
  v3 = &v2;
  *(_QWORD *)&v1 = "Weight of the branch likely to be taken (default = 2000)";
  *((_QWORD *)&v1 + 1) = 56;
  sub_1C61798D0((uint64_t)&unk_1ED821A00, "likely-branch-weight", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED821A00, &dword_1C475E000);
  v4 = 1;
  v2 = 1;
  v3 = &v2;
  *(_QWORD *)&v1 = "Weight of the branch unlikely to be taken (default = 1)";
  *((_QWORD *)&v1 + 1) = 55;
  sub_1C61798D0((uint64_t)&unk_1ED821AC0, "unlikely-branch-weight", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED821AC0, &dword_1C475E000);
}

uint64_t sub_1C5BB4948(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Lower the guard intrinsic to normal control flow";
  *(_QWORD *)(v2 + 8) = 48;
  *(_QWORD *)(v2 + 16) = "lower-guard-intrinsic";
  *(_QWORD *)(v2 + 24) = 21;
  *(_QWORD *)(v2 + 32) = &unk_1ED821B80;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5BB4CA0;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::createLowerGuardIntrinsicPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5BB4A00(v1);
}

uint64_t sub_1C5BB4A00(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED821B80;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81964F0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED821B88);
  if (v3 != -1)
  {
    v7[0] = sub_1C5BB4948;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED821B88, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5BB4AC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t Declaration;
  llvm *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[9];

  v19[8] = *MEMORY[0x1E0C80C00];
  v2 = sub_1C4FB7E80(*(uint64_t **)(*(_QWORD *)(a1 + 40) + 112), "llvm.experimental.guard", 0x17uLL);
  if (!v2)
    return 0;
  v5 = v2;
  if (*(_BYTE *)(v2 + 16))
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (v3)
  {
    v6 = 0;
    v17 = v19;
    v18 = 0x800000000;
    do
    {
      v7 = *(_QWORD *)(v3 + 24);
      if (v7 && *(_BYTE *)(v7 + 16) == 84 && *(_QWORD *)(*(_QWORD *)(v7 + 40) + 56) == a1)
      {
        if (v6 >= HIDWORD(v18))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, (uint64_t)v19, v6 + 1, 8);
          v6 = v18;
        }
        *((_QWORD *)v17 + v6) = v7;
        v6 = v18 + 1;
        LODWORD(v18) = v18 + 1;
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3);
    v3 = v6 != 0;
    if (v6)
    {
      v8 = *(uint64_t **)(a1 + 40);
      v16 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 16);
      Declaration = llvm::Intrinsic::getDeclaration(v8, 119, &v16, 1);
      *(_WORD *)(Declaration + 18) = *(_WORD *)(Declaration + 18) & 0xC00F | *(_WORD *)(v5 + 18) & 0x3FF0;
      if ((_DWORD)v18)
      {
        v10 = (llvm *)Declaration;
        v11 = (uint64_t *)v17;
        v12 = 8 * v18;
        do
        {
          v13 = *v11++;
          llvm::makeGuardControlFlowExplicit(v10, (uint64_t ***)v13, 0);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v13 + 40) + 40, (uint64_t ***)v13);
          v14 = *(_QWORD *)(v13 + 24);
          v15 = *(_QWORD **)(v13 + 32);
          *v15 = v14;
          *(_QWORD *)(v14 + 8) = v15;
          *(_QWORD *)(v13 + 24) = 0;
          *(_QWORD *)(v13 + 32) = 0;
          llvm::Value::deleteValue((llvm::Value *)v13);
          v12 -= 8;
        }
        while (v12);
      }
    }
    if (v17 != v19)
      free(v17);
  }
  return v3;
}

uint64_t sub_1C5BB4CA0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5BB4A00(v0);
}

void sub_1C5BB4CCC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5BB4CF0(uint64_t a1, uint64_t a2)
{
  return sub_1C5BB4AC8(a2);
}

uint64_t sub_1C5BB4CF8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  unsigned int *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t j;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::string::size_type v40;
  unsigned int *v41;
  uint64_t v42;
  _QWORD *v43;
  int v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  char **v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  _QWORD *v67;
  _BOOL8 v68;
  void *v69;
  uint64_t v70;
  unsigned int *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _BOOL8 v75;
  unsigned __int8 *v76;
  unsigned int *v77;
  _QWORD *v78;
  void *v79;
  uint64_t v80;
  _BOOL4 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  uint64_t v87;
  _QWORD *v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98;
  _QWORD *v99;
  uint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  int32x2_t *v103;
  unint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  int v110;
  int v111;
  unint64_t v112;
  unint64_t *v113;
  uint64_t v114;
  int32x2_t *v115;
  unint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t *v140;
  int v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  _QWORD **v145;
  _QWORD *v146;
  _QWORD **v147;
  _QWORD *v148;
  llvm::ValueAsMetadata *v149;
  llvm::Value *v150;
  int v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  _QWORD *v155;
  _BOOL4 v156;
  std::string::size_type v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  unsigned int v162;
  _QWORD *v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  int v171;
  int v172;
  uint64_t v173;
  _QWORD *v174;
  llvm::Value *v175;
  _QWORD *v176;
  _QWORD *v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int *v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  _BOOL8 v189;
  _QWORD *v190;
  unsigned int v191;
  _QWORD *v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  int v200;
  int v201;
  _QWORD *v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t *v206;
  unsigned int *v207;
  uint64_t v208;
  _QWORD *v209;
  _QWORD *v210;
  _BOOL8 v211;
  _QWORD *v212;
  unsigned int v213;
  _QWORD *v214;
  unsigned int v215;
  _QWORD *v216;
  unsigned int v217;
  llvm::Value *v218;
  int v219;
  uint64_t v220;
  unsigned int v221;
  uint64_t v222;
  _QWORD *v223;
  _BOOL4 v224;
  uint64_t v225;
  _QWORD *v226;
  llvm::Value *v227;
  _QWORD *v228;
  _QWORD *v229;
  uint64_t v230;
  _QWORD *v231;
  _QWORD *v232;
  _QWORD *v233;
  _QWORD *v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  _BYTE *v239;
  _BYTE *v240;
  _QWORD *v241;
  unsigned int v242;
  _QWORD *v243;
  unsigned int v244;
  _QWORD *v245;
  unsigned int v246;
  uint64_t v247;
  unsigned int *v248;
  uint64_t v249;
  _QWORD *v250;
  _QWORD *v251;
  _BOOL8 v252;
  uint64_t v253;
  _QWORD *v254;
  unsigned int v255;
  _QWORD *v256;
  unsigned int v257;
  int v258;
  uint64_t v259;
  unsigned int v260;
  uint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  llvm::Value *v264;
  uint64_t v265;
  _QWORD *v266;
  llvm::Value *v267;
  uint64_t v268;
  _QWORD *v269;
  char *v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t k;
  uint64_t v275;
  BOOL v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  int v280;
  unint64_t v281;
  unint64_t v282;
  _QWORD *v283;
  _BYTE *v284;
  uint64_t v285;
  char *v286;
  uint64_t *v287;
  char *v288;
  uint64_t *v289;
  uint64_t v290;
  unint64_t v291;
  _QWORD *v292;
  uint64_t v293;
  _QWORD *v294;
  llvm::FixedVectorType *v295;
  uint64_t v296;
  _QWORD *v297;
  _QWORD *v298;
  unsigned int v299;
  uint64_t v300;
  _QWORD *v301;
  unsigned int v302;
  void *v303;
  int v304;
  uint64_t v305;
  void *v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  llvm::Type *v312;
  uint64_t v313;
  uint64_t v314;
  BOOL v315;
  _QWORD *v317;
  uint64_t v318;
  int v319;
  uint64_t v320;
  uint64_t v321;
  unsigned int v322;
  BOOL v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unsigned int v339;
  BOOL v340;
  int v341;
  void *v343;
  int v344;
  uint64_t v345;
  void *v346;
  int v347;
  uint64_t v348;
  unsigned int v349;
  uint64_t v350;
  const llvm::Instruction **v351;
  std::string::value_type *v352;
  uint64_t v353;
  unint64_t v354;
  std::string::size_type v355;
  char *v356;
  _QWORD *v357;
  int v358;
  llvm::Instruction **v359;
  uint64_t v360;
  llvm::Instruction *v361;
  _QWORD *v362;
  uint64_t v363;
  unsigned int *v364;
  uint64_t v365;
  unsigned int *v366;
  unsigned int v367;
  uint64_t *v368;
  uint64_t v369;
  _QWORD *v370;
  uint64_t v371;
  uint64_t v372;
  int v373;
  _QWORD *v374;
  unint64_t v375;
  _QWORD *v376;
  uint64_t v377;
  _QWORD *v378;
  uint64_t v379;
  _QWORD *v380;
  uint64_t v381;
  _QWORD *v382;
  _QWORD *v383;
  int v384;
  int v385;
  llvm::Type *v386;
  unint64_t v387;
  unint64_t v388;
  unsigned int v390;
  _QWORD *v391;
  uint64_t v392;
  unsigned int v393;
  unsigned int v394;
  unsigned int v395;
  unint64_t v396;
  uint64_t v397;
  llvm::ConstantAggregateZero *v398;
  llvm::Type *v399;
  const llvm::APInt *v400;
  llvm::ConstantAggregateZero *v401;
  int v402;
  _QWORD *v403;
  uint64_t v404;
  unsigned int v405;
  unsigned int v406;
  unint64_t v407;
  unint64_t v408;
  llvm::ConstantInt *v409;
  unsigned int v410;
  int v411;
  const llvm::APInt *v412;
  llvm::ValueHandleBase *v413;
  llvm::ConstantInt *v414;
  unsigned int v415;
  unint64_t v416;
  llvm::ValueHandleBase *v417;
  const llvm::APInt *v418;
  unint64_t v419;
  llvm::ConstantInt *v420;
  unsigned int v421;
  unint64_t v422;
  const llvm::APInt *v423;
  llvm::ValueHandleBase *v424;
  llvm::ConstantInt *v425;
  unsigned int v426;
  unint64_t v427;
  llvm::ValueHandleBase *v428;
  unsigned int v429;
  unint64_t v430;
  int v431;
  llvm::ConstantInt *v432;
  unsigned int v433;
  int v434;
  const llvm::APInt *v435;
  llvm::ValueHandleBase *v436;
  llvm::ConstantInt *v437;
  unsigned int v438;
  unint64_t v439;
  llvm::ValueHandleBase *v440;
  uint64_t v441;
  _BOOL8 v442;
  uint64_t v443;
  uint64_t v444;
  _QWORD *v445;
  uint64_t v446;
  _QWORD *v447;
  uint64_t v448;
  _QWORD *v449;
  uint64_t v450;
  _QWORD *v451;
  std::string *v452;
  std::string::size_type v453;
  unint64_t v454;
  uint64_t v455;
  char *v456;
  __int128 v457;
  unsigned int v458;
  llvm::PointerType *v459;
  llvm::DomTreeUpdater *v460;
  llvm *v461;
  llvm::BasicBlock *v462;
  llvm::BasicBlock *TiledLoops;
  llvm::FixedVectorType *v464;
  llvm::ConstantAggregateZero *v465;
  llvm::ConstantAggregateZero *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  unsigned __int8 *v470;
  unint64_t v471;
  unint64_t v472;
  unint64_t v473;
  llvm::PHINode *v474;
  llvm::Type *v475;
  _QWORD *v476;
  uint64_t SingleSuccessor;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  unsigned __int8 *v483;
  unsigned int v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  unsigned __int8 *v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t *v491;
  int v492;
  uint64_t v493;
  unsigned int v494;
  uint64_t v495;
  uint64_t v496;
  int v497;
  int v498;
  uint64_t *****v499;
  int v500;
  uint64_t *v501;
  uint64_t *v502;
  uint64_t v503;
  _QWORD *v504;
  uint64_t *v505;
  int v506;
  uint64_t v507;
  int v508;
  unsigned int v509;
  uint64_t v510;
  _BYTE *v511;
  uint64_t v512;
  llvm::PoisonValue **v513;
  llvm::PoisonValue **v514;
  uint64_t v515;
  unsigned int v516;
  int v517;
  uint64_t v518;
  unsigned int v519;
  _BYTE *v520;
  _BYTE *v521;
  uint64_t v522;
  llvm::PoisonValue **v523;
  uint64_t v524;
  unint64_t v525;
  uint64_t v526;
  unsigned __int8 *v527;
  uint64_t v528;
  uint64_t v529;
  unsigned int v530;
  int v531;
  unsigned __int8 **v532;
  int v533;
  uint64_t v534;
  unsigned __int8 *v535;
  int v536;
  const llvm::APInt *v537;
  uint64_t v538;
  unsigned int v539;
  char *v540;
  char *v541;
  unint64_t v542;
  uint64_t v543;
  uint64_t v544;
  llvm::ConstantInt *v545;
  unsigned int v546;
  unint64_t v547;
  llvm::ValueHandleBase *v548;
  uint64_t v549;
  BOOL v550;
  llvm::PoisonValue **v551;
  unsigned __int8 *v552;
  int v553;
  const llvm::APInt *v554;
  uint64_t v555;
  unsigned int v556;
  char *v557;
  char *v558;
  unint64_t v559;
  uint64_t v560;
  uint64_t v561;
  llvm::ConstantInt *v562;
  unsigned int v563;
  unint64_t v564;
  uint64_t v565;
  llvm::ValueHandleBase *v566;
  uint64_t v567;
  int v568;
  uint64_t v569;
  unsigned __int8 *v570;
  uint64_t v571;
  unsigned __int16 ParamAlignment;
  uint64_t v573;
  llvm::APInt *v574;
  unsigned int v575;
  BOOL v576;
  uint64_t v577;
  uint64_t v578;
  _QWORD *v579;
  llvm::FixedVectorType *v580;
  uint64_t v581;
  _QWORD *v582;
  _QWORD **v583;
  unsigned int v584;
  _QWORD *v585;
  uint64_t v586;
  uint64_t v587;
  unsigned int *v588;
  unsigned int v589;
  unsigned int v590;
  unsigned int v591;
  uint64_t *v592;
  uint64_t *v593;
  uint64_t v594;
  uint64_t v595;
  _QWORD *v596;
  llvm::PoisonValue **v597;
  uint64_t v598;
  _QWORD *v599;
  unsigned int *v600;
  unsigned int v601;
  uint64_t v602;
  unsigned int v603;
  uint64_t v604;
  llvm::UndefValue *v605;
  llvm::Type *v606;
  const llvm::APInt *v607;
  void *v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  llvm::ConstantInt *v613;
  unsigned int v614;
  unint64_t v615;
  llvm::ValueHandleBase *v616;
  const llvm::APInt *v617;
  unsigned __int8 *v618;
  llvm::ConstantInt *v619;
  unsigned int v620;
  unint64_t v621;
  llvm::ValueHandleBase *v622;
  uint64_t v623;
  int v624;
  uint64_t v625;
  llvm::PoisonValue **v626;
  unsigned __int8 *v627;
  uint64_t v628;
  uint64_t v629;
  unsigned __int16 v630;
  uint64_t v631;
  llvm::APInt *v632;
  unsigned int v633;
  BOOL v634;
  __int16 v635;
  uint64_t v636;
  uint64_t v637;
  unsigned int *v638;
  uint64_t v639;
  _QWORD *v640;
  __int16 v641;
  uint64_t v642;
  uint64_t v643;
  unsigned int *v644;
  uint64_t v645;
  _QWORD *v646;
  int32x2_t v647;
  uint64_t *v648;
  uint64_t *v649;
  uint64_t *v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  _QWORD *v658;
  unsigned __int8 *v659;
  BOOL v660;
  llvm::UndefValue *v661;
  uint64_t v662;
  _QWORD *v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  _QWORD *v667;
  llvm *v668;
  int v669;
  unsigned int v670;
  _QWORD *v672;
  uint64_t *v673;
  uint64_t *v674;
  unsigned int v675;
  uint64_t v676;
  int v677;
  uint64_t v678;
  int v679;
  unsigned int v680;
  _QWORD *v681;
  _QWORD ***v682;
  _QWORD *v683;
  int v684;
  BOOL v685;
  unsigned int v686;
  uint64_t v687;
  _QWORD *v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  unint64_t v692;
  unsigned int *v693;
  unsigned __int8 *v694;
  int v695;
  uint64_t v697;
  uint64_t v698;
  unint64_t v699;
  _QWORD *v700;
  void *v701;
  llvm *v702;
  void *v703;
  unint64_t *v704;
  uint64_t *v705;
  uint64_t v706;
  unint64_t *v707;
  uint64_t v708;
  llvm::Value *v709;
  llvm *v710;
  _BYTE *v711;
  unint64_t *v712;
  unint64_t v713;
  unsigned __int8 **v714;
  int64x2_t v715;
  uint64_t *v716;
  uint64_t v717;
  uint64_t v718;
  unsigned int v719;
  char *v720;
  char *v721;
  uint64_t v722;
  uint64_t v723;
  _QWORD *v724;
  int v725;
  uint64_t v726;
  unsigned int v727;
  uint64_t v728;
  int v729;
  unsigned int v730;
  _QWORD **v731;
  uint64_t v732;
  _QWORD *v733;
  uint64_t *v734;
  uint64_t v735;
  unsigned __int8 *v736;
  uint64_t v737;
  unsigned __int8 *v738;
  int v739;
  unsigned int v741;
  unsigned int v742;
  unsigned int v743;
  unsigned int v744;
  std::string *v745;
  unsigned int v746;
  unsigned int v747;
  unsigned int v748;
  uint64_t v749;
  uint64_t v750;
  std::string *v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  std::string *v761;
  std::string::size_type v762;
  _BYTE *v763;
  const void *v764;
  char *v765;
  unint64_t v766;
  void **v767;
  uint64_t v768;
  unint64_t v769;
  unint64_t v770;
  char **v771;
  unint64_t v772;
  _QWORD *v773;
  unsigned int v774;
  unsigned int v775;
  uint64_t v776;
  const llvm::APInt *v777;
  uint64_t v778;
  int64x2_t v779;
  unsigned int v780;
  unsigned __int8 **v781;
  unint64_t v782;
  unint64_t v783;
  unsigned __int8 **v784;
  unsigned int v785;
  llvm::BasicBlock *v786;
  llvm::BasicBlock *v787;
  unint64_t v788;
  unsigned int v789;
  unint64_t v790;
  int v791;
  llvm::Type *v792;
  unsigned int v793;
  uint64_t v794;
  uint64_t *v795;
  llvm::Instruction *v796;
  llvm::Instruction *v797;
  uint64_t v798;
  llvm::OptimizationRemarkEmitter *v799;
  unint64_t v800;
  llvm::ValueHandleBase *v801;
  llvm::ValueHandleBase *v802;
  llvm::ValueHandleBase *v803;
  unint64_t v804;
  unint64_t v805;
  uint64_t *v806;
  unint64_t v807;
  unsigned int v808;
  unint64_t v809;
  unint64_t v810;
  unint64_t __src;
  void *__srca;
  unint64_t v813;
  uint64_t *v814;
  uint64_t v815;
  int v816;
  int v817;
  char v818;
  _QWORD *v819;
  _BOOL8 v820;
  _QWORD **v821;
  _QWORD *v822;
  llvm::FixedVectorType *v823;
  char v824;
  uint64_t *v826[4];
  _DWORD *v827;
  void *v828;
  uint64_t v829;
  int v830;
  _BYTE v831[128];
  void *v832;
  char *v833;
  uint64_t v834;
  std::string v835;
  std::string v836;
  void *v837;
  char v838;
  std::string v839;
  void *__p;
  _BYTE *v841;
  uint64_t v842;
  unsigned __int8 *v843;
  uint64_t v844;
  uint64_t v845;
  unsigned int v846;
  llvm::PoisonValue **v847[2];
  int v848;
  unsigned __int8 **v849;
  unsigned __int8 **v850;
  uint64_t v851;
  const void *v852[2];
  void *v853;
  uint64_t v854;
  _BYTE v855[128];
  void *v856;
  uint64_t v857;
  _BYTE v858[128];
  void *__dst;
  uint64_t v860;
  _BYTE v861[256];
  std::string v862;
  void *v863;
  char v864;
  __int128 v865;
  char v866;
  std::string v867;
  void *v868;
  uint64_t v869;
  uint64_t v870;
  _DWORD v871[11];
  __int128 v872;
  char v873;
  std::string v874;
  void *v875;
  __int16 v876;
  char v877;
  uint64_t v878;
  uint64_t v879;
  int v880;
  __int128 v881;
  char v882;
  std::string v883;
  void *v884;
  char v885;
  std::string v886;
  void *v887;
  char v888;
  __int128 v889;
  std::string *v890;
  __int128 v891;
  __int128 v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  void *v896;
  uint64_t v897;
  _BYTE v898[48];
  __int128 v899;
  BOOL v900;
  char v901;
  int v902;
  uint64_t v903;
  void *v904;
  uint64_t v905;
  _BYTE v906[32];
  void *v907;
  void *v908;
  uint64_t v909;
  uint64_t v910;
  std::string *v911;
  uint64_t v912;
  _QWORD *v913;
  uint64_t v914;
  void **v915;
  uint64_t v916;
  void **v917;
  _BYTE v918[24];
  BOOL v919;
  void *v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  char v925;
  _BYTE *v926;
  void *v927;
  uint64_t v928;
  int v929;
  _BYTE v930[64];
  _BYTE v931[24];
  __int16 v932;
  _BYTE v933[32];
  void (**v934)(llvm::raw_ostream *__hidden);
  int v935;
  char *v936;
  uint64_t v937;
  char *v938;
  char v939;
  uint64_t v940;
  int v941;
  _BYTE *v942;
  int v943;
  uint64_t *v944;
  llvm::Instruction *v945;
  uint64_t *v946;
  void **v947;
  __int128 v948;
  void *v949;
  uint64_t v950;
  int v951;
  _BYTE v952[72];
  void *v953;
  void *v954;
  uint64_t v955;
  int v956;
  _BYTE v957[32];
  uint64_t v958;
  int v959;
  __int128 v960;
  char v961;
  uint64_t v962;

  v962 = *MEMORY[0x1E0C80C00];
  __dst = v861;
  v860 = 0x2000000000;
  v2 = *(_QWORD *)a1 + 72;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  if (v3 == v2)
    goto LABEL_261;
  v4 = 0;
  do
  {
    v5 = v3 - 24;
    if (!v3)
      v5 = 0;
    v6 = v5 + 40;
    for (i = *(_QWORD *)(v5 + 48); i != v6; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v8 = i - 24;
      else
        v8 = 0;
      if (*(_BYTE *)(v8 + 16) == 84)
      {
        v9 = *(_QWORD *)(v8 - 32);
        if (v9)
        {
          if (!*(_BYTE *)(v9 + 16)
            && *(_QWORD *)(v9 + 24) == *(_QWORD *)(v8 + 72)
            && (*(_BYTE *)(v9 + 33) & 0x20) != 0
            && (*(_DWORD *)(*(_QWORD *)(i - 56) + 36) & 0xFFFFFFFC) == 0xBC)
          {
            if (v4 >= HIDWORD(v860))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v861, v4 + 1, 8);
              v4 = v860;
            }
            *((_QWORD *)__dst + v4) = v8;
            v4 = v860 + 1;
            LODWORD(v860) = v860 + 1;
          }
        }
      }
    }
    v3 = *(_QWORD *)(v3 + 8);
  }
  while (v3 != v2);
  if (!v4)
  {
LABEL_261:
    LOBYTE(v141) = 0;
    goto LABEL_1125;
  }
  v10 = (unint64_t)&v909;
  v11 = a1;
  v813 = a1 + 56;
  __src = (unint64_t)&v909;
  do
  {
LABEL_23:
    v907 = &v909;
    v908 = (void *)0x2000000000;
    do
    {
      v12 = *((_QWORD *)__dst + v4 - 1);
      LODWORD(v860) = v4 - 1;
      *(_QWORD *)v933 = 0;
      v953 = 0;
      v874.__r_.__value_.__r.__words[0] = 0;
      v867.__r_.__value_.__r.__words[0] = 0;
      v862.__r_.__value_.__r.__words[0] = 0;
      LODWORD(v889) = 190;
      *((_QWORD *)&v889 + 1) = 0;
      v890 = (std::string *)v933;
      *(_QWORD *)&v891 = 1;
      *((_QWORD *)&v891 + 1) = &v953;
      *(_QWORD *)&v892 = 2;
      *((_QWORD *)&v892 + 1) = &v874;
      v893 = 3;
      v894 = (uint64_t)&v867;
      v895 = 4;
      v896 = &v862;
      if (sub_1C5BBC64C((uint64_t)&v889, v12))
      {
        if (v12)
        {
          if (*(_BYTE *)(v12 + 16) == 84)
          {
            v13 = *(_QWORD *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) + 32 * v893);
            if (v13)
            {
              *(_QWORD *)v894 = v13;
              v14 = *(_QWORD *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) + 32 * v895);
              if (v14)
              {
                *(_QWORD *)v896 = v14;
                v15 = (unsigned int *)(v874.__r_.__value_.__r.__words[0] + 24);
                if (*(_DWORD *)(v874.__r_.__value_.__r.__words[0] + 32) >= 0x41u)
                  v15 = *(unsigned int **)v15;
                v16 = *v15;
                v17 = (_QWORD *)(v862.__r_.__value_.__r.__words[0] + 24);
                if (*(_DWORD *)(v862.__r_.__value_.__r.__words[0] + 32) >= 0x41u)
                  v17 = (_QWORD *)*v17;
                v18 = v16 | (*v17 << 32);
                v10 = v10 & 0xFFFFFFFF00000000 | (dword_1ED821DA8 == 0);
                v19 = v11;
                v20 = v12;
                v21 = v10;
                goto LABEL_40;
              }
            }
          }
        }
      }
      LODWORD(v889) = 191;
      *((_QWORD *)&v889 + 1) = 0;
      v890 = (std::string *)v933;
      *(_QWORD *)&v891 = 1;
      *((_QWORD *)&v891 + 1) = &v874;
      *(_QWORD *)&v892 = 2;
      *((_QWORD *)&v892 + 1) = &v867;
      if (sub_1C5BBC64C((uint64_t)&v889, v12))
      {
        v22 = (unsigned int *)(v867.__r_.__value_.__r.__words[0] + 24);
        if (*(_DWORD *)(v867.__r_.__value_.__r.__words[0] + 32) >= 0x41u)
          v22 = *(unsigned int **)v22;
        v23 = (_QWORD *)(v874.__r_.__value_.__r.__words[0] + 24);
        if (*(_DWORD *)(v874.__r_.__value_.__r.__words[0] + 32) >= 0x41u)
          v23 = (_QWORD *)*v23;
        v18 = *v22 | (*v23 << 32);
        v1 = v1 & 0xFFFFFFFF00000000 | (dword_1ED821DA8 == 0);
        v19 = v11;
        v20 = v12;
        v21 = v1;
        goto LABEL_40;
      }
      LODWORD(v889) = 189;
      *((_QWORD *)&v889 + 1) = 0;
      v890 = (std::string *)v933;
      v891 = xmmword_1C6A5FC00;
      v892 = xmmword_1C8668050;
      v893 = (uint64_t)&v874;
      v894 = 5;
      v895 = (uint64_t)&v867;
      if (sub_1C4E75A6C((uint64_t)&v889, v12))
      {
        if (v12)
        {
          if (*(_BYTE *)(v12 + 16) == 84)
          {
            v31 = *(_QWORD *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) + 32 * DWORD2(v892));
            if (v31)
            {
              *(_QWORD *)v893 = v31;
              v32 = *(_QWORD *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) + 32 * v894);
              if (v32)
              {
                *(_QWORD *)v895 = v32;
                v33 = (unsigned int *)(v867.__r_.__value_.__r.__words[0] + 24);
                if (*(_DWORD *)(v867.__r_.__value_.__r.__words[0] + 32) >= 0x41u)
                  v33 = *(unsigned int **)v33;
                v34 = *v33;
                v35 = (_QWORD *)(v874.__r_.__value_.__r.__words[0] + 24);
                if (*(_DWORD *)(v874.__r_.__value_.__r.__words[0] + 32) >= 0x41u)
                  v35 = (_QWORD *)*v35;
                v18 = v34 | (*v35 << 32);
                v21 = dword_1ED821DA8 == 0;
                v19 = v11;
                v20 = v12;
                v809 = v809 & 0xFFFFFFFF00000000 | (dword_1ED821DA8 == 0);
                goto LABEL_40;
              }
            }
          }
        }
      }
      LODWORD(v889) = 188;
      *(_QWORD *)((char *)&v889 + 4) = 0;
      v36 = *(unsigned __int8 *)(v12 + 16);
      if (v12 && v36 == 84)
      {
        v37 = *(_QWORD *)(v12 - 32);
        if (v37)
        {
          if (!*(_BYTE *)(v37 + 16)
            && *(_QWORD *)(v37 + 24) == *(_QWORD *)(v12 + 72)
            && *(_DWORD *)(v37 + 36) == (_DWORD)v889)
          {
            v38 = v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF);
            v39 = *(_QWORD *)(v38 + 96);
            if (v39)
            {
              v874.__r_.__value_.__r.__words[0] = *(_QWORD *)(v38 + 96);
              v40 = *(_QWORD *)(v38 + 128);
              if (v40)
              {
                v867.__r_.__value_.__r.__words[0] = v40;
                v41 = (unsigned int *)(v39 + 24);
                if (*(_DWORD *)(v39 + 32) >= 0x41u)
                  v41 = *(unsigned int **)v41;
                v42 = *v41;
                v43 = (_QWORD *)(v40 + 24);
                if (*(_DWORD *)(v40 + 32) >= 0x41u)
                  v43 = (_QWORD *)*v43;
                v18 = v42 | (*v43 << 32);
                v21 = dword_1ED821DA8 == 0;
                v19 = v11;
                v20 = v12;
                v804 = v804 & 0xFFFFFFFF00000000 | (dword_1ED821DA8 == 0);
LABEL_40:
                if ((sub_1C5BBC59C(v19, v20, v18, v21) & 1) == 0)
                  goto LABEL_86;
LABEL_41:
                v24 = v908;
                if (v908 >= (unint64_t)HIDWORD(v908))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v907, (uint64_t)&v909, v908 + 1, 8);
                  v24 = v908;
                }
                *((_QWORD *)v907 + v24) = v12;
                LODWORD(v908) = (_DWORD)v908 + 1;
                for (j = *(_QWORD *)(v12 + 8); j; j = *(_QWORD *)(j + 8))
                {
                  v26 = *(_QWORD *)(j + 24);
                  *(_QWORD *)&v889 = 0;
                  if (sub_1C5BBBB34(*(_QWORD *)(v11 + 56), *(_DWORD *)(v11 + 72), v26, &v889))
                  {
                    v27 = v889;
                    v28 = *(_QWORD *)(v11 + 56);
                    v29 = *(_DWORD *)(v11 + 72);
                  }
                  else
                  {
                    v28 = *(_QWORD *)(v11 + 56);
                    v29 = *(_DWORD *)(v11 + 72);
                    v27 = v28 + 56 * v29;
                  }
                  if (v27 == v28 + 56 * v29)
                  {
                    v30 = v860;
                    if (v860 >= (unint64_t)HIDWORD(v860))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v861, v860 + 1, 8);
                      v30 = v860;
                    }
                    *((_QWORD *)__dst + v30) = v26;
                    LODWORD(v860) = v860 + 1;
                  }
                }
                goto LABEL_86;
              }
            }
          }
        }
      }
      else if (v36 == 61)
      {
        v44 = *(_DWORD *)(v12 + 20);
        v45 = (v44 & 0x40000000) != 0 ? *(uint64_t **)(v12 - 8) : (uint64_t *)(v12 - 32 * (v44 & 0x7FFFFFF));
        v46 = *v45;
        if (*v45)
        {
          *(_QWORD *)v933 = *v45;
          *(_QWORD *)&v889 = 0;
          if (sub_1C5BBBB34(*(_QWORD *)(v11 + 56), *(_DWORD *)(v11 + 72), v46, &v889)
            && (_QWORD)v889 != *(_QWORD *)(v11 + 56) + 56 * *(unsigned int *)(v11 + 72))
          {
            v807 = v807 & 0xFFFFFFFF00000000 | *(unsigned int *)(v889 + 48);
            sub_1C5BBC59C(v11, v12, *(_QWORD *)(v889 + 40), *(_DWORD *)(v889 + 48));
          }
          goto LABEL_86;
        }
      }
      if (v36 < 0x1C || v36 - 40 <= 6)
      {
        v47 = *(_DWORD *)(v12 + 20);
        if ((v47 & 0x40000000) != 0)
        {
          v49 = *(uint64_t **)(v12 - 8);
          v48 = v47 & 0x7FFFFFF;
          if (!v48)
            goto LABEL_86;
        }
        else
        {
          v48 = v47 & 0x7FFFFFF;
          v49 = (uint64_t *)(v12 - 32 * v48);
          if (!v48)
            goto LABEL_86;
        }
        v50 = *(_QWORD *)(v11 + 56);
        v51 = *(_DWORD *)(v11 + 72);
        v52 = 32 * v48;
        while (1)
        {
          v53 = *v49;
          *(_QWORD *)&v889 = 0;
          v54 = sub_1C5BBBB34(v50, v51, v53, &v889);
          v50 = *(_QWORD *)(v11 + 56);
          v51 = *(_DWORD *)(v11 + 72);
          if (v54 && (_QWORD)v889 != v50 + 56 * v51)
            break;
          v49 += 4;
          v52 -= 32;
          if (!v52)
            goto LABEL_86;
        }
        v815 = v815 & 0xFFFFFFFF00000000 | *(unsigned int *)(v889 + 48);
        if (sub_1C5BBC59C(v11, v12, *(_QWORD *)(v889 + 40), *(_DWORD *)(v889 + 48)))
          goto LABEL_41;
      }
LABEL_86:
      v4 = v860;
    }
    while ((_DWORD)v860);
    v57 = v907;
    if (v907 != &v909)
    {
      if (__dst != v861)
      {
        free(__dst);
        v57 = v907;
      }
      __dst = v57;
      LODWORD(v58) = (_DWORD)v908;
      HIDWORD(v860) = HIDWORD(v908);
LABEL_109:
      v907 = &v909;
      v908 = (void *)0x2000000000;
      if ((_DWORD)v58)
        goto LABEL_112;
LABEL_262:
      LODWORD(v860) = 0;
      break;
    }
    LODWORD(v58) = (_DWORD)v908;
    if (!(_DWORD)v908)
      goto LABEL_262;
    if (HIDWORD(v860) >= v908)
    {
      v59 = v908;
      v60 = &v909;
      goto LABEL_106;
    }
    LODWORD(v860) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v861, v908, 8);
    v59 = v908;
    v60 = (uint64_t *)v907;
    if ((_DWORD)v908)
    {
      v11 = a1;
LABEL_106:
      memcpy(__dst, v60, 8 * v59);
      v60 = (uint64_t *)v907;
    }
    else
    {
      v11 = a1;
    }
    LODWORD(v860) = v58;
    LODWORD(v908) = 0;
    if (v60 != &v909)
    {
      free(v60);
      LODWORD(v58) = v860;
      goto LABEL_109;
    }
    v907 = &v909;
    v908 = (void *)0x2000000000;
LABEL_112:
    v61 = (char **)(a1 + 56);
    while (2)
    {
      v62 = *((_QWORD *)__dst + v58 - 1);
      v58 = (v58 - 1);
      LODWORD(v860) = v58;
      if (*(unsigned __int8 *)(v62 + 16) >= 0x1Cu)
      {
        v953 = 0;
        v874.__r_.__value_.__r.__words[0] = 0;
        v867.__r_.__value_.__r.__words[0] = 0;
        v862.__r_.__value_.__r.__words[0] = 0;
        v827 = 0;
        LODWORD(v889) = 190;
        *((_QWORD *)&v889 + 1) = 0;
        v890 = (std::string *)&v953;
        *(_QWORD *)&v891 = 1;
        *((_QWORD *)&v891 + 1) = &v874;
        *(_QWORD *)&v892 = 2;
        *((_QWORD *)&v892 + 1) = &v867;
        v893 = 3;
        v894 = (uint64_t)&v862;
        v895 = 4;
        v896 = &v827;
        if (sub_1C5BBC64C((uint64_t)&v889, v62) && *(_BYTE *)(v62 + 16) == 84)
        {
          v63 = *(_QWORD *)(v62 - 32 * (*(_DWORD *)(v62 + 20) & 0x7FFFFFF) + 32 * v893);
          if (v63)
          {
            *(_QWORD *)v894 = v63;
            v64 = *(_QWORD *)(v62 - 32 * (*(_DWORD *)(v62 + 20) & 0x7FFFFFF) + 32 * v895);
            if (v64)
            {
              *(_QWORD *)v896 = v64;
              v65 = (unsigned int *)(v867.__r_.__value_.__r.__words[0] + 24);
              if (*(_DWORD *)(v867.__r_.__value_.__r.__words[0] + 32) >= 0x41u)
                v65 = *(unsigned int **)v65;
              v66 = *v65;
              v67 = (_QWORD *)(v862.__r_.__value_.__r.__words[0] + 24);
              if (*(_DWORD *)(v862.__r_.__value_.__r.__words[0] + 32) >= 0x41u)
                v67 = (_QWORD *)*v67;
              v68 = dword_1ED821DA8 == 0;
              v809 = v809 & 0xFFFFFFFF00000000 | v68;
              if (sub_1C5BBC59C(v11, (uint64_t)v953, v66 | (*v67 << 32), v68))
              {
                v69 = v953;
                if (v953)
                {
                  if (*((unsigned __int8 *)v953 + 16) >= 0x1Cu)
                  {
                    v70 = v860;
                    if (v860 >= (unint64_t)HIDWORD(v860))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v861, v860 + 1, 8);
                      v70 = v860;
                    }
                    *((_QWORD *)__dst + v70) = v69;
                    LODWORD(v860) = v860 + 1;
                  }
                }
              }
              v71 = (unsigned int *)(v862.__r_.__value_.__r.__words[0] + 24);
              if (*(_DWORD *)(v862.__r_.__value_.__r.__words[0] + 32) >= 0x41u)
                v71 = *(unsigned int **)v71;
              v72 = *v71;
              v73 = v827 + 6;
              if (v827[8] >= 0x41u)
                v73 = (_QWORD *)*v73;
              v74 = (_QWORD *)*v73;
              v75 = dword_1ED821DA8 == 0;
              v807 = v807 & 0xFFFFFFFF00000000 | v75;
              if (!sub_1C5BBC59C(v11, (uint64_t)v874.__r_.__value_.__l.__data_, v72 | ((_QWORD)v74 << 32), v75)|| (v76 = (unsigned __int8 *)v874.__r_.__value_.__r.__words[0]) == 0)
              {
LABEL_221:
                if ((_DWORD)v58 != (_DWORD)v860)
                {
                  v133 = v58;
                  LODWORD(v58) = v860;
                  do
                  {
                    v134 = *(_QWORD *)(*((_QWORD *)__dst + v133) + 8);
                    if (v134)
                    {
                      do
                      {
                        v135 = *(_QWORD *)(v134 + 24);
                        if (v62 != v135 && *(unsigned __int8 *)(v135 + 16) >= 0x1Cu)
                        {
                          v137 = v908;
                          if (v908 >= (unint64_t)HIDWORD(v908))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v907, (uint64_t)&v909, v908 + 1, 8);
                            v137 = v908;
                          }
                          *((_QWORD *)v907 + v137) = v135;
                          LODWORD(v908) = (_DWORD)v908 + 1;
                        }
                        v134 = *(_QWORD *)(v134 + 8);
                      }
                      while (v134);
                      LODWORD(v58) = v860;
                    }
                    ++v133;
                  }
                  while (v133 != v58);
                }
                goto LABEL_235;
              }
LABEL_143:
              if (v76[16] >= 0x1Cu)
              {
                v83 = v860;
                if (v860 >= (unint64_t)HIDWORD(v860))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v861, v860 + 1, 8);
                  v83 = v860;
                }
                *((_QWORD *)__dst + v83) = v76;
                LODWORD(v860) = v860 + 1;
              }
              goto LABEL_221;
            }
          }
        }
        LODWORD(v889) = 191;
        *((_QWORD *)&v889 + 1) = 0;
        v890 = (std::string *)&v953;
        *(_QWORD *)&v891 = 1;
        *((_QWORD *)&v891 + 1) = &v867;
        *(_QWORD *)&v892 = 2;
        *((_QWORD *)&v892 + 1) = &v862;
        if (sub_1C5BBC64C((uint64_t)&v889, v62))
        {
          v77 = (unsigned int *)(v867.__r_.__value_.__r.__words[0] + 24);
          if (*(_DWORD *)(v867.__r_.__value_.__r.__words[0] + 32) >= 0x41u)
            v77 = *(unsigned int **)v77;
          v78 = (_QWORD *)(v862.__r_.__value_.__r.__words[0] + 24);
          if (*(_DWORD *)(v862.__r_.__value_.__r.__words[0] + 32) >= 0x41u)
            v78 = (_QWORD *)*v78;
          v79 = v953;
          v80 = *v77 | (*v78 << 32);
          v81 = dword_1ED821DA8 == 0;
          v82 = v11;
          v815 = v815 & 0xFFFFFFFF00000000 | (dword_1ED821DA8 == 0);
          goto LABEL_141;
        }
        LODWORD(v889) = 189;
        *((_QWORD *)&v889 + 1) = 0;
        v890 = (std::string *)&v953;
        v891 = xmmword_1C6A5FC00;
        v892 = xmmword_1C8668050;
        v893 = (uint64_t)&v867;
        v894 = 5;
        v895 = (uint64_t)&v862;
        if (sub_1C4E75A6C((uint64_t)&v889, v62) && *(_BYTE *)(v62 + 16) == 84)
        {
          v84 = *(_QWORD *)(v62 - 32 * (*(_DWORD *)(v62 + 20) & 0x7FFFFFF) + 32 * DWORD2(v892));
          if (v84)
          {
            *(_QWORD *)v893 = v84;
            v85 = *(_QWORD *)(v62 - 32 * (*(_DWORD *)(v62 + 20) & 0x7FFFFFF) + 32 * v894);
            if (v85)
            {
              *(_QWORD *)v895 = v85;
              v86 = (unsigned int *)(v867.__r_.__value_.__r.__words[0] + 24);
              if (*(_DWORD *)(v867.__r_.__value_.__r.__words[0] + 32) >= 0x41u)
                v86 = *(unsigned int **)v86;
              v79 = v953;
              v87 = *v86;
              v88 = (_QWORD *)(v862.__r_.__value_.__r.__words[0] + 24);
              if (*(_DWORD *)(v862.__r_.__value_.__r.__words[0] + 32) >= 0x41u)
                v88 = (_QWORD *)*v88;
              v80 = v87 | (*v88 << 32);
              v81 = dword_1ED821DA8 == 0;
              v82 = v11;
              v804 = v804 & 0xFFFFFFFF00000000 | (dword_1ED821DA8 == 0);
LABEL_141:
              if (!sub_1C5BBC59C(v82, (uint64_t)v79, v80, v81))
                goto LABEL_221;
              v76 = (unsigned __int8 *)v953;
              if (!v953)
                goto LABEL_221;
              goto LABEL_143;
            }
          }
        }
        v89 = *(unsigned __int8 *)(v62 + 16);
        if (v89 - 60 < 2)
          goto LABEL_221;
        if (v89 == 84)
        {
          v90 = *(_QWORD *)(v62 - 32);
          if (v90)
          {
            if (!*(_BYTE *)(v90 + 16) && *(_QWORD *)(v90 + 24) == *(_QWORD *)(v62 + 72) && *(_DWORD *)(v90 + 36) == 188)
              goto LABEL_221;
          }
        }
        if (v89 >= 0x1C && v89 - 40 > 6)
          goto LABEL_221;
        *((_QWORD *)&v889 + 1) = 2;
        v890 = 0;
        v91 = v62;
        *(_QWORD *)&v891 = v62;
        if (v62 != -8192)
        {
          v91 = v62;
          if (v62 != -4096)
          {
            v91 = v62;
            if (v62)
            {
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)((char *)&v889 + 8));
              v91 = v891;
            }
          }
        }
        *(_QWORD *)&v889 = &off_1E8196688;
        *((_QWORD *)&v891 + 1) = v61;
        *(_QWORD *)v933 = 0;
        v92 = sub_1C5BBBB34(*(_QWORD *)(v11 + 56), *(_DWORD *)(v11 + 72), v91, v933);
        v93 = *(_QWORD *)v933;
        if ((v92 & 1) == 0)
        {
          v94 = sub_1C5BBC160(v61, (uint64_t)&v889, *(uint64_t *)v933);
          v93 = v94;
          v95 = *(_QWORD *)(v94 + 24);
          v96 = v891;
          if (v95 != (_QWORD)v891)
          {
            if (v95 != -4096 && v95 && v95 != -8192)
            {
              v112 = *(_QWORD *)(v94 + 8) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v112 = *(_QWORD *)(v94 + 16);
              v113 = *(unint64_t **)(v94 + 16);
              if (v113)
              {
                *v113 = *v113 & 7 | v112;
              }
              else
              {
                v114 = *(_QWORD *)(v94 + 24);
                v115 = ***(int32x2_t ****)v114;
                v116 = (unint64_t)v115[303];
                if (v116 <= v112)
                {
                  v117 = v115[305].u32[0];
                  if (v116 + 16 * v117 > v112)
                  {
                    v118 = v117 - 1;
                    LODWORD(v119) = v118 & ((v114 >> 4) ^ (v114 >> 9));
                    v120 = (uint64_t *)(v116 + 16 * v119);
                    v121 = *v120;
                    if (v114 == *v120)
                    {
LABEL_202:
                      *v120 = -8192;
                      v115[304] = vadd_s32(v115[304], (int32x2_t)0x1FFFFFFFFLL);
                      v114 = *(_QWORD *)(v94 + 24);
                    }
                    else
                    {
                      v122 = 1;
                      while (v121 != -4096)
                      {
                        v123 = v119 + v122++;
                        v119 = v123 & v118;
                        v121 = *(_QWORD *)(v116 + 16 * v119);
                        if (v114 == v121)
                        {
                          v120 = (uint64_t *)(v116 + 16 * v119);
                          goto LABEL_202;
                        }
                      }
                    }
                    *(_BYTE *)(v114 + 17) &= ~1u;
                  }
                }
              }
              v96 = v891;
            }
            *(_QWORD *)(v94 + 24) = v96;
            if (v96 != -4096 && v96 != -8192 && v96 != 0)
            {
              v98 = *((_QWORD *)&v889 + 1);
              v99 = (_QWORD *)(*((_QWORD *)&v889 + 1) & 0xFFFFFFFFFFFFFFF8);
              *(_QWORD *)(v94 + 16) = *(_QWORD *)(*((_QWORD *)&v889 + 1) & 0xFFFFFFFFFFFFFFF8);
              *v99 = v94 + 8;
              *(_QWORD *)(v94 + 8) = v98 & 0xFFFFFFFFFFFFFFF8 | *(_QWORD *)(v94 + 8) & 7;
              v100 = *(uint64_t **)(v94 + 16);
              if (v100)
                *v100 = *v100 & 7 | (v94 + 16);
            }
          }
          *(_QWORD *)(v94 + 32) = *((_QWORD *)&v891 + 1);
          *(_QWORD *)(v94 + 40) = 0;
          *(_BYTE *)(v94 + 48) = dword_1ED821DA8 == 0;
        }
        if ((_QWORD)v891 != -8192 && (_QWORD)v891 != -4096 && (_QWORD)v891)
        {
          v101 = *((_QWORD *)&v889 + 1) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(*((_QWORD *)&v889 + 1) & 0xFFFFFFFFFFFFFFF8) = v890;
          if (v890)
          {
            v890->__r_.__value_.__r.__words[0] = v890->__r_.__value_.__r.__words[0] & 7 | v101;
          }
          else
          {
            v102 = v891;
            v103 = ***(int32x2_t ****)v891;
            v104 = (unint64_t)v103[303];
            if (v104 <= v101)
            {
              v105 = v103[305].u32[0];
              if (v104 + 16 * v105 > v101)
              {
                v106 = v105 - 1;
                LODWORD(v107) = v106 & ((v891 >> 4) ^ (v891 >> 9));
                v108 = (uint64_t *)(v104 + 16 * v107);
                v109 = *v108;
                if ((_QWORD)v891 == *v108)
                {
LABEL_190:
                  *v108 = -8192;
                  v103[304] = vadd_s32(v103[304], (int32x2_t)0x1FFFFFFFFLL);
                  v102 = v891;
                }
                else
                {
                  v110 = 1;
                  while (v109 != -4096)
                  {
                    v111 = v107 + v110++;
                    v107 = v111 & v106;
                    v109 = *(_QWORD *)(v104 + 16 * v107);
                    if ((_QWORD)v891 == v109)
                    {
                      v108 = (uint64_t *)(v104 + 16 * v107);
                      goto LABEL_190;
                    }
                  }
                }
                *(_BYTE *)(v102 + 17) &= ~1u;
              }
            }
          }
        }
        v124 = *(_QWORD *)(v93 + 40);
        v125 = *(unsigned int *)(v93 + 48);
        v126 = *(_DWORD *)(v62 + 20);
        if ((v126 & 0x40000000) != 0)
        {
          v128 = *(uint64_t **)(v62 - 8);
          v127 = v126 & 0x7FFFFFF;
          if (!v127)
          {
LABEL_220:
            v61 = (char **)(a1 + 56);
            goto LABEL_221;
          }
        }
        else
        {
          v127 = v126 & 0x7FFFFFF;
          v128 = (uint64_t *)(v62 - 32 * v127);
          if (!v127)
            goto LABEL_220;
        }
        v129 = 32 * v127;
        do
        {
          v1 = v1 & 0xFFFFFFFF00000000 | v125;
          if (sub_1C5BBC59C(v11, *v128, v124, v1))
          {
            v130 = *v128;
            if (*v128 && *(unsigned __int8 *)(*v128 + 16) >= 0x1Cu)
            {
              v132 = v860;
              if (v860 >= (unint64_t)HIDWORD(v860))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v861, v860 + 1, 8);
                v132 = v860;
              }
              *((_QWORD *)__dst + v132) = v130;
              LODWORD(v860) = v860 + 1;
            }
          }
          v128 += 4;
          v129 -= 32;
          v11 = a1;
        }
        while (v129);
        goto LABEL_220;
      }
LABEL_235:
      if ((_DWORD)v58)
        continue;
      break;
    }
    v138 = v907;
    v10 = (unint64_t)&v909;
    if (v907 != &v909)
    {
      if (__dst != v861)
      {
        free(__dst);
        v138 = v907;
      }
      __dst = v138;
      v860 = (uint64_t)v908;
      v4 = v908;
      if (!(_DWORD)v908)
        break;
      goto LABEL_23;
    }
    v4 = v908;
    if (!(_DWORD)v908)
      goto LABEL_262;
    if (HIDWORD(v860) >= v908)
    {
      v139 = v908;
      v140 = &v909;
      goto LABEL_243;
    }
    LODWORD(v860) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v861, v908, 8);
    v139 = v908;
    v140 = (uint64_t *)v907;
    if ((_DWORD)v908)
    {
      v11 = a1;
      v10 = (unint64_t)&v909;
LABEL_243:
      memcpy(__dst, v140, 8 * v139);
      v140 = (uint64_t *)v907;
    }
    else
    {
      v11 = a1;
      v10 = (unint64_t)&v909;
    }
    LODWORD(v860) = v4;
    LODWORD(v908) = 0;
    if (v140 != &v909)
    {
      free(v140);
      v4 = v860;
    }
  }
  while (v4);
  v142 = *(_QWORD **)v11;
  if (*(_QWORD *)(v11 + 32))
  {
    v143 = v142 + 9;
    v815 = v142[10];
    if (v142 + 9 != (_QWORD *)v815)
    {
      while (1)
      {
        v144 = *v143 ? *v143 - 24 : 0;
        v147 = *(_QWORD ***)(v144 + 40);
        v146 = (_QWORD *)(v144 + 40);
        v145 = v147;
        if (v147 != v146)
          break;
        v143 = (_QWORD *)*v143;
LABEL_379:
        if (v143 == (_QWORD *)v815)
        {
          v142 = *(_QWORD **)v11;
          v143 = *(_QWORD **)(*(_QWORD *)v11 + 80);
          goto LABEL_381;
        }
      }
      v821 = (_QWORD **)v143;
      while (2)
      {
        v148 = *v145;
        if (v145)
          v149 = (llvm::ValueAsMetadata *)(v145 - 3);
        else
          v149 = 0;
        sub_1C4773D54((uint64_t)&v907, (uint64_t)v149, 0, 0, 0);
        v953 = &v907;
        v874.__r_.__value_.__r.__words[0] = 0;
        v867.__r_.__value_.__r.__words[0] = 0;
        v862.__r_.__value_.__r.__words[0] = 0;
        v827 = 0;
        v856 = 0;
        v853 = 0;
        LODWORD(v889) = 191;
        *((_QWORD *)&v889 + 1) = 0;
        v890 = &v874;
        if (!sub_1C4E75A6C((uint64_t)&v889, (uint64_t)v149))
          goto LABEL_318;
        v883.__r_.__value_.__r.__words[0] = 0;
        LODWORD(v889) = 191;
        *((_QWORD *)&v889 + 1) = 0;
        v890 = &v883;
        if (sub_1C4E75A6C((uint64_t)&v889, (uint64_t)v874.__r_.__value_.__l.__data_))
        {
          v150 = (llvm::Value *)v883.__r_.__value_.__r.__words[0];
          *(_QWORD *)&v889 = 0;
          v151 = sub_1C5BBBB34(*(_QWORD *)(v11 + 56), *(_DWORD *)(v11 + 72), (uint64_t)v149, &v889);
          v152 = *(_QWORD *)(v11 + 56);
          v153 = *(_DWORD *)(v11 + 72);
          if (v151)
            v154 = v889;
          else
            v154 = v152 + 56 * v153;
          if (v152 + 56 * v153 != v154)
          {
            sub_1C5BBBBCC((int32x2_t *)v813, (_QWORD *)v154);
            if (sub_1C5BBC6B8((uint64_t)v150))
            {
              *(_QWORD *)&v889 = v150;
              *((_QWORD *)&v889 + 1) = *(_QWORD *)(v154 + 40);
              LODWORD(v890) = *(_DWORD *)(v154 + 48);
              sub_1C5BBBCD4((uint64_t)v933, v813, (uint64_t)&v889);
            }
          }
          llvm::Value::doRAUW(v149, v150, (llvm::Value *)1);
          if (!*((_QWORD *)v149 + 1))
          {
            v155 = v146;
            if (v148 != v146)
            {
              v156 = v145 == 0;
              if (v148)
                v156 = v148 - 3 == (_QWORD *)v149;
              if (v156)
                v155 = (_QWORD *)*v148;
              else
                v155 = v148;
            }
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v149 + 5) + 40, (uint64_t ***)v149);
            v173 = *((_QWORD *)v149 + 3);
            v174 = (_QWORD *)*((_QWORD *)v149 + 4);
            *v174 = v173;
            *(_QWORD *)(v173 + 8) = v174;
            *((_QWORD *)v149 + 3) = 0;
            *((_QWORD *)v149 + 4) = 0;
            llvm::Value::deleteValue(v149);
            v148 = v155;
          }
          v175 = (llvm::Value *)v874.__r_.__value_.__r.__words[0];
          if (!*(_QWORD *)(v874.__r_.__value_.__r.__words[0] + 8))
          {
            v176 = v146;
            if (v148 != v146)
            {
              v177 = v148 - 3;
              if (!v148)
                v177 = 0;
              if (v177 == (_QWORD *)v874.__r_.__value_.__l.__data_)
                v176 = (_QWORD *)*v148;
              else
                v176 = v148;
            }
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v874.__r_.__value_.__r.__words[0] + 40) + 40, (uint64_t ***)v874.__r_.__value_.__l.__data_);
            v178 = *((_QWORD *)v175 + 3);
            v179 = (_QWORD *)*((_QWORD *)v175 + 4);
            *v179 = v178;
            *(_QWORD *)(v178 + 8) = v179;
            *((_QWORD *)v175 + 3) = 0;
            *((_QWORD *)v175 + 4) = 0;
            llvm::Value::deleteValue(v175);
            v148 = v176;
          }
          v11 = a1;
          goto LABEL_318;
        }
        v157 = v874.__r_.__value_.__r.__words[0];
        LODWORD(v889) = 190;
        *((_QWORD *)&v889 + 1) = 0;
        v890 = &v867;
        *(_QWORD *)&v891 = 1;
        *((_QWORD *)&v891 + 1) = &v862;
        *(_QWORD *)&v892 = 2;
        *((_QWORD *)&v892 + 1) = &v827;
        v893 = 3;
        v894 = (uint64_t)&v856;
        v895 = 4;
        v896 = &v853;
        if (!sub_1C57A1C20((uint64_t)&v889, (uint64_t)v874.__r_.__value_.__l.__data_))
          goto LABEL_318;
        if (!v157)
          goto LABEL_318;
        if (*(_BYTE *)(v157 + 16) != 84)
          goto LABEL_318;
        v158 = *(_QWORD *)(v157 - 32 * (*(_DWORD *)(v157 + 20) & 0x7FFFFFF) + 32 * v892);
        if (!v158)
          goto LABEL_318;
        if (*(_BYTE *)(v158 + 16) != 16)
          goto LABEL_318;
        **((_QWORD **)&v892 + 1) = v158;
        v159 = *(_QWORD *)(v157 - 32 * (*(_DWORD *)(v157 + 20) & 0x7FFFFFF) + 32 * v893);
        if (!v159)
          goto LABEL_318;
        if (*(_BYTE *)(v159 + 16) != 16)
          goto LABEL_318;
        *(_QWORD *)v894 = v159;
        v160 = *(_QWORD *)(v157 - 32 * (*(_DWORD *)(v157 + 20) & 0x7FFFFFF) + 32 * v895);
        if (!v160 || *(_BYTE *)(v160 + 16) != 16)
          goto LABEL_318;
        *(_QWORD *)v896 = v160;
        v161 = (char *)v856 + 24;
        if (*((_DWORD *)v856 + 8) >= 0x41u)
          v161 = (_QWORD *)*v161;
        v162 = *(_DWORD *)v161;
        v163 = (char *)v853 + 24;
        if (*((_DWORD *)v853 + 8) >= 0x41u)
          v163 = (_QWORD *)*v163;
        v164 = *(_DWORD *)v163;
        if ((*(_BYTE *)(v862.__r_.__value_.__r.__words[0] + 23) & 0x10) != 0)
        {
          v165 = ***(_QWORD ***)v862.__r_.__value_.__l.__data_;
          v166 = *(_QWORD *)(v165 + 152);
          v167 = *(unsigned int *)(v165 + 168);
          if (!(_DWORD)v167)
            goto LABEL_323;
          LODWORD(v168) = (v167 - 1) & ((LODWORD(v862.__r_.__value_.__l.__data_) >> 4) ^ (LODWORD(v862.__r_.__value_.__l.__data_) >> 9));
          v169 = (uint64_t *)(v166 + 16 * v168);
          v170 = *v169;
          if (*v169 != v862.__r_.__value_.__r.__words[0])
          {
            v171 = 1;
            while (v170 != -4096)
            {
              v172 = v168 + v171++;
              v168 = v172 & (v167 - 1);
              v170 = *(_QWORD *)(v166 + 16 * v168);
              if (v170 == v862.__r_.__value_.__r.__words[0])
              {
                v169 = (uint64_t *)(v166 + 16 * v168);
                goto LABEL_324;
              }
            }
LABEL_323:
            v169 = (uint64_t *)(v166 + 16 * v167);
          }
LABEL_324:
          v180 = (_QWORD *)v169[1];
          v183 = *v180;
          v182 = (char *)(v180 + 2);
          v181 = v183;
        }
        else
        {
          v181 = 0;
          v182 = &byte_1C871356D;
        }
        WORD4(v891) = 773;
        *(_QWORD *)&v889 = v182;
        *((_QWORD *)&v889 + 1) = v181;
        v890 = (std::string *)"_t";
        v184 = sub_1C631F32C((uint64_t **)&v953, (uint64_t)v862.__r_.__value_.__l.__data_, v162, v164, (uint64_t)&v889);
        v185 = (unsigned int *)((char *)v853 + 24);
        if (*((_DWORD *)v853 + 8) >= 0x41u)
          v185 = *(unsigned int **)v185;
        v186 = *v185;
        v187 = (char *)v856 + 24;
        if (*((_DWORD *)v856 + 8) >= 0x41u)
          v187 = (_QWORD *)*v187;
        v188 = (_QWORD *)*v187;
        v189 = dword_1ED821DA8 == 0;
        __src = __src & 0xFFFFFFFF00000000 | v189;
        sub_1C5BBC59C(v11, v184, v186 | ((_QWORD)v188 << 32), v189);
        v190 = v827 + 6;
        if (v827[8] >= 0x41u)
          v190 = (_QWORD *)*v190;
        v191 = *(_DWORD *)v190;
        v192 = (char *)v856 + 24;
        if (*((_DWORD *)v856 + 8) >= 0x41u)
          v192 = (_QWORD *)*v192;
        v193 = *(_DWORD *)v192;
        if ((*(_BYTE *)(v867.__r_.__value_.__r.__words[0] + 23) & 0x10) != 0)
        {
          v194 = ***(_QWORD ***)v867.__r_.__value_.__l.__data_;
          v195 = *(_QWORD *)(v194 + 152);
          v196 = *(unsigned int *)(v194 + 168);
          if (!(_DWORD)v196)
            goto LABEL_340;
          LODWORD(v197) = (v196 - 1) & ((LODWORD(v867.__r_.__value_.__l.__data_) >> 4) ^ (LODWORD(v867.__r_.__value_.__l.__data_) >> 9));
          v198 = (uint64_t *)(v195 + 16 * v197);
          v199 = *v198;
          if (*v198 != v867.__r_.__value_.__r.__words[0])
          {
            v200 = 1;
            while (v199 != -4096)
            {
              v201 = v197 + v200++;
              v197 = v201 & (v196 - 1);
              v199 = *(_QWORD *)(v195 + 16 * v197);
              if (v199 == v867.__r_.__value_.__r.__words[0])
              {
                v198 = (uint64_t *)(v195 + 16 * v197);
                goto LABEL_341;
              }
            }
LABEL_340:
            v198 = (uint64_t *)(v195 + 16 * v196);
          }
LABEL_341:
          v202 = (_QWORD *)v198[1];
          v205 = *v202;
          v204 = (char *)(v202 + 2);
          v203 = v205;
        }
        else
        {
          v203 = 0;
          v204 = &byte_1C871356D;
        }
        WORD4(v891) = 773;
        *(_QWORD *)&v889 = v204;
        *((_QWORD *)&v889 + 1) = v203;
        v890 = (std::string *)"_t";
        v206 = (uint64_t *)sub_1C631F32C((uint64_t **)&v953, (uint64_t)v867.__r_.__value_.__l.__data_, v191, v193, (uint64_t)&v889);
        v207 = (unsigned int *)((char *)v856 + 24);
        if (*((_DWORD *)v856 + 8) >= 0x41u)
          v207 = *(unsigned int **)v207;
        v208 = *v207;
        v209 = v827 + 6;
        if (v827[8] >= 0x41u)
          v209 = (_QWORD *)*v209;
        v210 = (_QWORD *)*v209;
        v211 = dword_1ED821DA8 == 0;
        v809 = v809 & 0xFFFFFFFF00000000 | v211;
        sub_1C5BBC59C(a1, (uint64_t)v206, v208 | ((_QWORD)v210 << 32), v211);
        v212 = (char *)v853 + 24;
        if (*((_DWORD *)v853 + 8) >= 0x41u)
          v212 = (_QWORD *)*v212;
        v213 = *(_DWORD *)v212;
        v214 = (char *)v856 + 24;
        if (*((_DWORD *)v856 + 8) >= 0x41u)
          v214 = (_QWORD *)*v214;
        v215 = *(_DWORD *)v214;
        v216 = v827 + 6;
        if (v827[8] >= 0x41u)
          v216 = (_QWORD *)*v216;
        v217 = *(_DWORD *)v216;
        *(_QWORD *)&v889 = "mmul";
        WORD4(v891) = 259;
        v218 = (llvm::Value *)sub_1C631F42C((uint64_t **)&v953, v184, v206, v213, v215, v217, (uint64_t)&v889);
        *(_QWORD *)&v889 = 0;
        v219 = sub_1C5BBBB34(*(_QWORD *)(a1 + 56), *(_DWORD *)(a1 + 72), (uint64_t)v149, &v889);
        v220 = *(_QWORD *)(a1 + 56);
        v221 = *(_DWORD *)(a1 + 72);
        if (v219)
          v222 = v889;
        else
          v222 = v220 + 56 * v221;
        if (v220 + 56 * v221 != v222)
        {
          sub_1C5BBBBCC((int32x2_t *)v813, (_QWORD *)v222);
          if (sub_1C5BBC6B8((uint64_t)v218))
          {
            *(_QWORD *)&v889 = v218;
            *((_QWORD *)&v889 + 1) = *(_QWORD *)(v222 + 40);
            LODWORD(v890) = *(_DWORD *)(v222 + 48);
            sub_1C5BBBCD4((uint64_t)v933, v813, (uint64_t)&v889);
          }
        }
        llvm::Value::doRAUW(v149, v218, (llvm::Value *)1);
        if (!*((_QWORD *)v149 + 1))
        {
          v223 = v146;
          if (v148 != v146)
          {
            v224 = v145 == 0;
            if (v148)
              v224 = v148 - 3 == (_QWORD *)v149;
            if (v224)
              v223 = (_QWORD *)*v148;
            else
              v223 = v148;
          }
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v149 + 5) + 40, (uint64_t ***)v149);
          v225 = *((_QWORD *)v149 + 3);
          v226 = (_QWORD *)*((_QWORD *)v149 + 4);
          *v226 = v225;
          *(_QWORD *)(v225 + 8) = v226;
          *((_QWORD *)v149 + 3) = 0;
          *((_QWORD *)v149 + 4) = 0;
          llvm::Value::deleteValue(v149);
          v148 = v223;
        }
        v227 = (llvm::Value *)v874.__r_.__value_.__r.__words[0];
        if (!*(_QWORD *)(v874.__r_.__value_.__r.__words[0] + 8))
        {
          v228 = v146;
          if (v148 != v146)
          {
            v229 = v148 - 3;
            if (!v148)
              v229 = 0;
            if (v229 == (_QWORD *)v874.__r_.__value_.__l.__data_)
              v228 = (_QWORD *)*v148;
            else
              v228 = v148;
          }
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v874.__r_.__value_.__r.__words[0] + 40) + 40, (uint64_t ***)v874.__r_.__value_.__l.__data_);
          v230 = *((_QWORD *)v227 + 3);
          v231 = (_QWORD *)*((_QWORD *)v227 + 4);
          *v231 = v230;
          *(_QWORD *)(v230 + 8) = v231;
          *((_QWORD *)v227 + 3) = 0;
          *((_QWORD *)v227 + 4) = 0;
          llvm::Value::deleteValue(v227);
          v148 = v228;
        }
        v11 = a1;
        if (v218)
          v145 = (_QWORD **)*((_QWORD *)v218 + 3);
        else
LABEL_318:
          v145 = (_QWORD **)v148;
        if (v907 != &v909)
          free(v907);
        if (v145 == v146)
        {
          v143 = *v821;
          goto LABEL_379;
        }
        continue;
      }
    }
LABEL_381:
    v819 = v142 + 9;
    if (v143 != v142 + 9)
    {
      do
      {
        v232 = v143 - 3;
        v822 = v143;
        if (!v143)
          v232 = 0;
        v233 = v232 + 5;
        v234 = (_QWORD *)v232[6];
        if (v234 != v232 + 5)
        {
          do
          {
            v235 = (_QWORD *)v234[1];
            if (v234)
              v236 = (uint64_t)(v234 - 3);
            else
              v236 = 0;
            v953 = 0;
            v874.__r_.__value_.__r.__words[0] = 0;
            v867.__r_.__value_.__r.__words[0] = 0;
            v862.__r_.__value_.__r.__words[0] = 0;
            v827 = 0;
            v856 = 0;
            v853 = 0;
            LODWORD(v907) = 190;
            v908 = 0;
            v909 = (uint64_t)&v953;
            v910 = 1;
            v911 = &v874;
            v912 = 2;
            v913 = &v827;
            v914 = 3;
            v915 = &v856;
            v916 = 4;
            v917 = &v853;
            if (sub_1C57A1C20((uint64_t)&v907, v236) && v234 && *(_BYTE *)(v236 + 16) == 84)
            {
              v237 = *(_QWORD *)(v236 - 32 * (*(_DWORD *)(v236 + 20) & 0x7FFFFFF) + 32 * v912);
              if (v237 && *(_BYTE *)(v237 + 16) == 16)
              {
                *v913 = v237;
                v239 = *(_BYTE **)(v236 - 32 * (*(_DWORD *)(v236 + 20) & 0x7FFFFFF) + 32 * v914);
                if (v239)
                {
                  if (v239[16] == 16)
                  {
                    *v915 = v239;
                    v240 = *(_BYTE **)(v236 - 32 * (*(_DWORD *)(v236 + 20) & 0x7FFFFFF) + 32 * v916);
                    if (v240)
                    {
                      if (v240[16] == 16)
                      {
                        *v917 = v240;
                        LODWORD(v889) = 191;
                        *((_QWORD *)&v889 + 1) = 0;
                        v890 = &v867;
                        if (sub_1C4E75A6C((uint64_t)&v889, (uint64_t)v953))
                        {
                          *(_DWORD *)v933 = 191;
                          *(_QWORD *)&v933[8] = 0;
                          *(_QWORD *)&v933[16] = &v862;
                          if (sub_1C4E75A6C((uint64_t)v933, (uint64_t)v874.__r_.__value_.__l.__data_))
                          {
                            sub_1C4773D54((uint64_t)&v907, v236, 0, 0, 0);
                            v883.__r_.__value_.__r.__words[0] = (std::string::size_type)&v907;
                            v241 = (char *)v853 + 24;
                            if (*((_DWORD *)v853 + 8) >= 0x41u)
                              v241 = (_QWORD *)*v241;
                            v242 = *(_DWORD *)v241;
                            v243 = (char *)v856 + 24;
                            if (*((_DWORD *)v856 + 8) >= 0x41u)
                              v243 = (_QWORD *)*v243;
                            v244 = *(_DWORD *)v243;
                            v245 = v827 + 6;
                            if (v827[8] >= 0x41u)
                              v245 = (_QWORD *)*v245;
                            v246 = *(_DWORD *)v245;
                            WORD4(v891) = 257;
                            v247 = sub_1C631F42C((uint64_t **)&v883, (uint64_t)v862.__r_.__value_.__l.__data_, (uint64_t *)v867.__r_.__value_.__l.__data_, v242, v244, v246, (uint64_t)&v889);
                            v248 = (unsigned int *)((char *)v853 + 24);
                            if (*((_DWORD *)v853 + 8) >= 0x41u)
                              v248 = *(unsigned int **)v248;
                            v249 = *v248;
                            v250 = v827 + 6;
                            if (v827[8] >= 0x41u)
                              v250 = (_QWORD *)*v250;
                            v251 = (_QWORD *)*v250;
                            v252 = dword_1ED821DA8 == 0;
                            v253 = v247;
                            v807 = v807 & 0xFFFFFFFF00000000 | v252;
                            sub_1C5BBC59C(a1, v247, v249 | ((_QWORD)v251 << 32), v252);
                            v254 = (char *)v853 + 24;
                            if (*((_DWORD *)v853 + 8) >= 0x41u)
                              v254 = (_QWORD *)*v254;
                            v255 = *(_DWORD *)v254;
                            v256 = v827 + 6;
                            if (v827[8] >= 0x41u)
                              v256 = (_QWORD *)*v256;
                            v257 = *(_DWORD *)v256;
                            WORD4(v891) = 257;
                            v815 = sub_1C631F32C((uint64_t **)&v883, v253, v255, v257, (uint64_t)&v889);
                            *(_QWORD *)&v889 = 0;
                            v258 = sub_1C5BBBB34(*(_QWORD *)(a1 + 56), *(_DWORD *)(a1 + 72), v236, &v889);
                            v259 = *(_QWORD *)(a1 + 56);
                            v260 = *(_DWORD *)(a1 + 72);
                            if (v258)
                              v261 = v889;
                            else
                              v261 = v259 + 56 * v260;
                            if (v259 + 56 * v260 != v261)
                            {
                              sub_1C5BBBBCC((int32x2_t *)v813, (_QWORD *)v261);
                              if (sub_1C5BBC6B8(v815))
                              {
                                *(_QWORD *)&v889 = v815;
                                *((_QWORD *)&v889 + 1) = *(_QWORD *)(v261 + 40);
                                LODWORD(v890) = *(_DWORD *)(v261 + 48);
                                sub_1C5BBBCD4((uint64_t)v933, v813, (uint64_t)&v889);
                              }
                            }
                            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v236, (llvm::Value *)v815, (llvm::Value *)1);
                            if (!*(_QWORD *)(v236 + 8))
                            {
                              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v236 + 40) + 40, (uint64_t ***)v236);
                              v262 = *(_QWORD *)(v236 + 24);
                              v263 = *(_QWORD **)(v236 + 32);
                              *v263 = v262;
                              *(_QWORD *)(v262 + 8) = v263;
                              *(_QWORD *)(v236 + 24) = 0;
                              *(_QWORD *)(v236 + 32) = 0;
                              llvm::Value::deleteValue((llvm::Value *)v236);
                            }
                            v264 = (llvm::Value *)v953;
                            if (!*((_QWORD *)v953 + 1))
                            {
                              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v953 + 5) + 40, (uint64_t ***)v953);
                              v265 = *((_QWORD *)v264 + 3);
                              v266 = (_QWORD *)*((_QWORD *)v264 + 4);
                              *v266 = v265;
                              *(_QWORD *)(v265 + 8) = v266;
                              *((_QWORD *)v264 + 3) = 0;
                              *((_QWORD *)v264 + 4) = 0;
                              llvm::Value::deleteValue(v264);
                              v264 = (llvm::Value *)v953;
                            }
                            v267 = (llvm::Value *)v874.__r_.__value_.__r.__words[0];
                            if (v264 != (llvm::Value *)v874.__r_.__value_.__l.__data_
                              && !*(_QWORD *)(v874.__r_.__value_.__r.__words[0] + 8))
                            {
                              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v874.__r_.__value_.__r.__words[0] + 40) + 40, (uint64_t ***)v874.__r_.__value_.__l.__data_);
                              v268 = *((_QWORD *)v267 + 3);
                              v269 = (_QWORD *)*((_QWORD *)v267 + 4);
                              *v269 = v268;
                              *(_QWORD *)(v268 + 8) = v269;
                              *((_QWORD *)v267 + 3) = 0;
                              *((_QWORD *)v267 + 4) = 0;
                              llvm::Value::deleteValue(v267);
                            }
                            if (v907 != &v909)
                              free(v907);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v234 = v235;
          }
          while (v235 != v233);
        }
        v143 = (_QWORD *)v822[1];
      }
      while (v143 != v819);
      v142 = *(_QWORD **)a1;
    }
  }
  v856 = v858;
  v857 = 0x1000000000;
  v853 = v855;
  v854 = 0x1000000000;
  v907 = v142;
  v834 = 0;
  v832 = 0;
  v833 = 0;
  sub_1C5643D14((char **)&v832, (uint64_t)&v907);
  v270 = v833;
  v271 = (char *)v832;
  if (v833 != v832)
  {
    do
    {
      v272 = *((_QWORD *)v270 - 1);
      v270 -= 8;
      v273 = v272 + 40;
      for (k = *(_QWORD *)(v272 + 48); k != v273; k = *(_QWORD *)(k + 8))
      {
        if (k)
          v275 = k - 24;
        else
          v275 = 0;
        v907 = 0;
        if (sub_1C5BBBB34(*(_QWORD *)(a1 + 56), *(_DWORD *)(a1 + 72), v275, &v907))
          v276 = v907 == (void *)(*(_QWORD *)(a1 + 56) + 56 * *(unsigned int *)(a1 + 72));
        else
          v276 = 1;
        if (!v276)
        {
          if (k)
          {
            if (*(_BYTE *)(v275 + 16) == 84)
            {
              v277 = *(_QWORD *)(v275 - 32);
              if (v277)
              {
                if (!*(_BYTE *)(v277 + 16)
                  && *(_QWORD *)(v277 + 24) == *(_QWORD *)(v275 + 72)
                  && *(_DWORD *)(v277 + 36) == 190)
                {
                  v278 = v857;
                  if (v857 >= (unint64_t)HIDWORD(v857))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v856, (uint64_t)v858, v857 + 1, 8);
                    v278 = v857;
                  }
                  *((_QWORD *)v856 + v278) = v275;
                  LODWORD(v857) = v857 + 1;
                }
              }
            }
          }
          v279 = v854;
          if (v854 >= (unint64_t)HIDWORD(v854))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v853, (uint64_t)v855, v854 + 1, 8);
            v279 = v854;
          }
          *((_QWORD *)v853 + v279) = v275;
          LODWORD(v854) = v854 + 1;
        }
      }
    }
    while (v270 != v271);
  }
  v827 = v831;
  v828 = v831;
  v829 = 16;
  v830 = 0;
  v280 = v857;
  if ((_DWORD)v857)
  {
    v281 = (unint64_t)v856;
    v282 = (unint64_t)v856 + 8 * v857;
    v283 = (_QWORD *)a1;
    v771 = (char **)(a1 + 288);
    v772 = v282;
    v284 = &unk_1ED836000;
    while (1)
    {
      if (!v284[464] || !v283[4])
        goto LABEL_613;
      v285 = *(_QWORD *)v281;
      v286 = (char *)sub_1C477672C((uint64_t)&v827, *(_QWORD *)v281);
      if (v828 == v827)
        v287 = (uint64_t *)((char *)&v829 + 4);
      else
        v287 = &v829;
      v288 = (char *)v828 + 8 * *(unsigned int *)v287;
      if (v286 != v288)
      {
        while (*(_QWORD *)v286 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v286 += 8;
          if (v286 == v288)
            goto LABEL_470;
        }
      }
      if (v286 != v288)
        goto LABEL_613;
LABEL_470:
      v796 = (llvm::Instruction *)v285;
      v289 = (uint64_t *)(v285 - 32 * (*(_DWORD *)(v285 + 20) & 0x7FFFFFF));
      v290 = *v289;
      v291 = v289[4];
      v847[0] = 0;
      if (dword_1ED821DA8)
      {
        LODWORD(v889) = 191;
        *((_QWORD *)&v889 + 1) = 0;
        v890 = (std::string *)v847;
        if (!sub_1C4E75A6C((uint64_t)&v889, v290))
          goto LABEL_501;
      }
      else
      {
        LODWORD(v907) = 191;
        v908 = 0;
        v909 = (uint64_t)v847;
        if (!sub_1C4E75A6C((uint64_t)&v907, v291))
        {
LABEL_501:
          v310 = *(_QWORD *)(v285 + 8);
          if (!v310)
            goto LABEL_613;
          if (*(_QWORD *)(v310 + 8) || dword_1ED821DA8 != 0)
            goto LABEL_613;
          if (*(_BYTE *)(v290 + 16) == 60)
            v312 = (llvm::Type *)v290;
          else
            v312 = 0;
          if (*(_BYTE *)(v291 + 16) != 60)
            v291 = 0;
          v313 = *(_QWORD *)(v310 + 24);
          v314 = *(_BYTE *)(v313 + 16) == 61 ? v313 : 0;
          v315 = !v312 || v291 == 0;
          if (v315 || v314 == 0)
            goto LABEL_613;
          v792 = v312;
          memset(&v839, 0, 20);
          v841 = 0;
          v842 = 0;
          __p = 0;
          v778 = v314;
          v907 = *(void **)(v314 - 32);
          sub_1C4D954B8(&v839, &v907);
          v883.__r_.__value_.__r.__words[0] = (std::string::size_type)&v883.__r_.__value_.__r.__words[2];
          v883.__r_.__value_.__l.__size_ = 0x600000000;
          v317 = __p;
          if (v841 == __p)
          {
            v907 = v283;
            v351 = (const llvm::Instruction **)&v883.__r_.__value_.__r.__words[2];
            v352 = &v883.__r_.__value_.__s.__data_[16];
            v320 = v285;
LABEL_616:
            v353 = 0;
          }
          else
          {
            v318 = 0;
            v319 = 0;
            v320 = v285;
            do
            {
              v321 = v317[v318];
              v322 = *(unsigned __int8 *)(v321 + 16);
              if (v321)
                v323 = v322 >= 0x1C;
              else
                v323 = 0;
              if (v323)
              {
                if (v322 == 83)
                  goto LABEL_654;
                if (!llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(a1 + 32), (const llvm::Value *)v321, (const llvm::Instruction *)v320))
                {
                  v324 = *(unsigned __int8 *)(v321 + 16) - 33;
                  if (v324 <= 0x37)
                  {
                    if (((1 << (*(_BYTE *)(v321 + 16) - 33)) & 0x808001D0000010) != 0)
                      goto LABEL_654;
                    if (((1 << (*(_BYTE *)(v321 + 16) - 33)) & 0x8000000000041) != 0)
                    {
                      v331 = *(_QWORD *)(v321 + 64);
                      if (!v331 || (*(_BYTE *)(v331 + 17) & 0x30) == 0)
                      {
                        v332 = *(_DWORD *)(v321 + 20);
                        if (v332 < 0)
                        {
                          v334 = v321 - 32 * (v332 & 0x7FFFFFF);
                          v337 = *(_QWORD *)(v334 - 8);
                          v335 = v334 - 8;
                          v336 = v337;
                          if (v337)
                          {
                            v338 = -v336;
                            while (1)
                            {
                              v339 = *(_DWORD *)(*(_QWORD *)(v335 + v338) + 8);
                              v340 = v339 > 7;
                              v341 = (1 << v339) & 0x83;
                              if (v340 || v341 == 0)
                                break;
                              v338 += 16;
                              v282 = v772;
                              v284 = (_BYTE *)&unk_1ED836000;
                              v320 = (uint64_t)v796;
                              if (!v338)
                                goto LABEL_559;
                            }
LABEL_871:
                            v283 = (_QWORD *)a1;
                            v282 = v772;
                            goto LABEL_656;
                          }
                        }
LABEL_559:
                        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v321, 45) & 1) == 0
                          && !llvm::CallBase::hasFnAttrOnCalledFunction(v321, 44))
                        {
                          goto LABEL_654;
                        }
                      }
                    }
                    else if (v324 == 27 && (*(_WORD *)(v321 + 18) & 0x301) != 0)
                    {
                      goto LABEL_654;
                    }
                  }
                  if ((llvm::Instruction::mayThrow((llvm::Instruction *)v321) & 1) != 0
                    || !llvm::Instruction::willReturn((llvm::Instruction *)v321))
                  {
                    goto LABEL_654;
                  }
                  v325 = *(unsigned __int8 *)(v321 + 16) - 33;
                  if (v325 <= 0x37)
                  {
                    if (((1 << (*(_BYTE *)(v321 + 16) - 33)) & 0x8000000000041) != 0)
                    {
                      v330 = *(_QWORD *)(v321 + 64);
                      if (!v330 || (*(_BYTE *)(v330 + 20) & 4) == 0 && (*(_BYTE *)(v330 + 17) & 0x10) == 0)
                      {
                        LODWORD(v907) = 7;
                        if (sub_1C53E4BBC(v321, (__int32 *)&v907, 1uLL))
                        {
                          v333 = *(_QWORD *)(v321 - 32);
                          if (!v333 || *(_BYTE *)(v333 + 16) || *(_QWORD *)(v333 + 24) != *(_QWORD *)(v321 + 72))
                            goto LABEL_871;
                          v282 = v772;
                          v284 = (_BYTE *)&unk_1ED836000;
                          v320 = (uint64_t)v796;
                          if (*(_DWORD *)(v333 + 36) != 7)
                            goto LABEL_654;
                        }
                        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v321, 66) & 1) == 0
                          && !llvm::CallBase::hasFnAttrOnCalledFunction(v321, 44))
                        {
                          goto LABEL_654;
                        }
                      }
                    }
                    else if (((1 << (*(_BYTE *)(v321 + 16) - 33)) & 0x808001C8000010) != 0
                           || v325 == 28 && (*(_WORD *)(v321 + 18) & 0x301) != 0)
                    {
                      goto LABEL_654;
                    }
                  }
                  v326 = LODWORD(v883.__r_.__value_.__r.__words[1]);
                  if (LODWORD(v883.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v883.__r_.__value_.__r.__words[1]))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v883, (uint64_t)&v883.__r_.__value_.__r.__words[2], LODWORD(v883.__r_.__value_.__r.__words[1]) + 1, 8);
                    v326 = LODWORD(v883.__r_.__value_.__r.__words[1]);
                  }
                  *(_QWORD *)(v883.__r_.__value_.__r.__words[0] + 8 * v326) = v321;
                  ++LODWORD(v883.__r_.__value_.__r.__words[1]);
                  v327 = *(_DWORD *)(v321 + 20);
                  if ((v327 & 0x40000000) != 0)
                  {
                    v329 = *(uint64_t **)(v321 - 8);
                    v328 = v327 & 0x7FFFFFF;
                  }
                  else
                  {
                    v328 = v327 & 0x7FFFFFF;
                    v329 = (uint64_t *)(v321 - 32 * v328);
                  }
                  sub_1C631F56C((uint64_t)&v839, v329, &v329[4 * v328]);
                }
              }
              v317 = __p;
              v318 = ++v319;
            }
            while (v319 != (v841 - (_BYTE *)__p) >> 3);
            v352 = (std::string::value_type *)v883.__r_.__value_.__r.__words[0];
            v351 = (const llvm::Instruction **)(v883.__r_.__value_.__r.__words[0]
                                              + 8 * LODWORD(v883.__r_.__value_.__r.__words[1]));
            v907 = (void *)a1;
            if (!LODWORD(v883.__r_.__value_.__r.__words[1]))
              goto LABEL_616;
            v353 = 126 - 2 * __clz(LODWORD(v883.__r_.__value_.__r.__words[1]));
          }
          sub_1C5BBDE64((uint64_t)v352, v351, (uint64_t)&v907, v353, 1);
          if (LODWORD(v883.__r_.__value_.__r.__words[1]))
          {
            v359 = (llvm::Instruction **)v883.__r_.__value_.__r.__words[0];
            v360 = 8 * LODWORD(v883.__r_.__value_.__r.__words[1]);
            do
            {
              v361 = *v359++;
              llvm::Instruction::moveBefore(v361, (llvm::Instruction *)v320);
              v360 -= 8;
            }
            while (v360);
          }
          v790 = v291;
          if (!byte_1ED836350)
          {
            v376 = (_QWORD *)(v320 - 32 * (*(_DWORD *)(v320 + 20) & 0x7FFFFFF));
            v377 = v376[8];
            v378 = (_QWORD *)(v377 + 24);
            if (*(_DWORD *)(v377 + 32) >= 0x41u)
              v378 = (_QWORD *)*v378;
            v379 = v376[12];
            v380 = (_QWORD *)(v379 + 24);
            if (*(_DWORD *)(v379 + 32) >= 0x41u)
              v380 = (_QWORD *)*v380;
            v381 = v376[16];
            v382 = (_QWORD *)(v381 + 24);
            if (*(_DWORD *)(v381 + 32) >= 0x41u)
              v382 = (_QWORD *)*v382;
            v383 = (_QWORD *)*v378;
            v384 = *(_DWORD *)v380;
            v385 = *(_DWORD *)v382;
            v386 = *(llvm::Type **)(*(_QWORD *)v320 + 24);
            v387 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 16) + 696))(**(_QWORD **)(a1 + 16), 1);
            v388 = v387 / llvm::Type::getPrimitiveSizeInBits(v386);
            if (v388 <= 1)
              LODWORD(v388) = 1;
            if (v388 >= v383 && v385 == 1)
            {
              v283 = (_QWORD *)a1;
LABEL_656:
              v284 = (_BYTE *)&unk_1ED836000;
            }
            else
            {
              v390 = ((int)v383 + (int)v388 - 1) / v388 * v384
                   + (v384 + (int)v388 - 1) / v388 * v385;
              v391 = *(_QWORD **)(a1 + 16);
              v392 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v391 + 680))(*v391, 1, 0);
              v284 = (_BYTE *)&unk_1ED836000;
              v291 = v790;
              if (v390 > (*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*v391 + 672))(*v391, v392))
                goto LABEL_631;
LABEL_654:
              v283 = (_QWORD *)a1;
            }
            goto LABEL_751;
          }
LABEL_631:
          v362 = (_QWORD *)(v320 - 32 * (*(_DWORD *)(v320 + 20) & 0x7FFFFFF));
          v363 = v362[8];
          v364 = (unsigned int *)(v363 + 24);
          if (*(_DWORD *)(v363 + 32) >= 0x41u)
            v364 = *(unsigned int **)v364;
          v365 = v362[12];
          v366 = (unsigned int *)(v365 + 24);
          v367 = *(_DWORD *)(v365 + 32);
          v368 = (uint64_t *)(v365 + 24);
          v283 = (_QWORD *)a1;
          if (v367 >= 0x41)
          {
            v368 = *(uint64_t **)v366;
            v366 = *(unsigned int **)v366;
          }
          v369 = v362[16];
          v370 = (_QWORD *)(v369 + 24);
          v770 = v281;
          if (*(_DWORD *)(v369 + 32) >= 0x41u)
            v370 = (_QWORD *)*v370;
          v371 = *v364;
          v372 = *v368;
          v805 = v371 | (*v368 << 32);
          v373 = dword_1ED821DA8;
          v374 = (_QWORD *)*v370;
          v788 = *v366 | ((unint64_t)*v370 << 32);
          v823 = *(llvm::FixedVectorType **)(*(_QWORD *)v320 + 24);
          v375 = v778;
          v786 = sub_1C5BBEA34(a1, (uint64_t)v792, v778, (llvm::BasicBlock *)v320);
          v787 = sub_1C5BBEA34(a1, v291, v778, (llvm::BasicBlock *)v320);
          v777 = *(const llvm::APInt **)(v778 - 32);
          v808 = v372;
          v773 = v374;
          if (!byte_1ED821C28 || v371 % dword_1ED836290)
          {
            sub_1C4773D54((uint64_t)&v953, v778, 0, 0, 0);
            if (!(_DWORD)v374)
              goto LABEL_743;
            goto LABEL_659;
          }
          if (v374 % dword_1ED836290)
          {
            sub_1C4773D54((uint64_t)&v953, v778, 0, 0, 0);
LABEL_659:
            v393 = 0;
            v820 = v373 == 0;
            v394 = dword_1ED836290;
            v775 = v371;
            do
            {
              v774 = v393;
              if ((_DWORD)v371)
              {
                v395 = 0;
                v780 = (_DWORD)v374 - v393;
                v810 = v393;
                do
                {
                  v785 = v395;
                  if (v394 >= v371 - v395)
                    v396 = v371 - v395;
                  else
                    v396 = v394;
                  if (v394 >= v780)
                    v397 = v780;
                  else
                    v397 = v394;
                  v907 = &v909;
                  v908 = (void *)0x1000000000;
                  *(_QWORD *)v918 = 0;
                  *(_QWORD *)&v918[8] = 0;
                  v918[16] = dword_1ED821DA8 == 0;
                  v800 = v396;
                  llvm::FixedVectorType::get(v823, (llvm::Type *)v396);
                  if ((_DWORD)v397)
                  {
                    v401 = v398;
                    v402 = v397;
                    do
                    {
                      v403 = llvm::ConstantAggregateZero::get(v401, v399);
                      v404 = v908;
                      if (v908 >= (unint64_t)HIDWORD(v908))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v907, (uint64_t)&v909, v908 + 1, 8);
                        v404 = v908;
                      }
                      *((_QWORD *)v907 + v404) = v403;
                      LODWORD(v908) = (_DWORD)v908 + 1;
                      --v402;
                    }
                    while (v402);
                  }
                  if ((_DWORD)v372)
                  {
                    v405 = 0;
                    v798 = v397 << 32;
                    v406 = dword_1ED836290;
                    do
                    {
                      if (v406 >= v372 - v405)
                        v407 = v372 - v405;
                      else
                        v407 = v406;
                      v408 = *((unsigned __int16 *)v792 + 9);
                      v409 = *(llvm::ConstantInt **)(*(_QWORD *)v958 + 1984);
                      v410 = *(_DWORD *)(*(_QWORD *)v958 + 1992);
                      *(_DWORD *)&v933[8] = v410 >> 8;
                      if (v410 >> 8 > 0x40)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)v933, v785, 0);
                      }
                      else
                      {
                        if (v410 <= 0xFF)
                          v411 = 0;
                        else
                          v411 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v410);
                        *(_QWORD *)v933 = v411 & v785;
                      }
                      v413 = llvm::ConstantInt::get(v409, (llvm::LLVMContext *)v933, v400);
                      if (*(_DWORD *)&v933[8] >= 0x41u && *(_QWORD *)v933)
                        MEMORY[0x1CAA32F9C](*(_QWORD *)v933, 0x1000C8000313F17);
                      v414 = *(llvm::ConstantInt **)(*(_QWORD *)v958 + 1984);
                      v415 = *(_DWORD *)(*(_QWORD *)v958 + 1992);
                      *(_DWORD *)&v933[8] = v415 >> 8;
                      if (v415 >> 8 > 0x40)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)v933, v405, 0);
                      }
                      else
                      {
                        if (v415 <= 0xFF)
                          LODWORD(v416) = 0;
                        else
                          v416 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v415);
                        *(_QWORD *)v933 = v416 & v405;
                      }
                      v417 = llvm::ConstantInt::get(v414, (llvm::LLVMContext *)v933, v412);
                      if (*(_DWORD *)&v933[8] >= 0x41u && *(_QWORD *)v933)
                        MEMORY[0x1CAA32F9C](*(_QWORD *)v933, 0x1000C8000313F17);
                      v291 = (v408 >> 1) & 0x3F | v291 & 0xFFFFFFFFFFFF0000 | 0x100;
                      v375 = v375 & 0xFFFFFFFF00000000 | v820;
                      v813 = v813 & 0xFFFFFFFF00000000 | (dword_1ED821DA8 == 0);
                      sub_1C5BBF694((uint64_t)&v889, a1, v786, v291, v408 & 1, v805, v375, (uint64_t)v413, (uint64_t)v417, v800, (v800 | (v407 << 32)) >> 32, dword_1ED821DA8 == 0, v823, (uint64_t)&v953);
                      v419 = *(unsigned __int16 *)(v790 + 18);
                      v420 = *(llvm::ConstantInt **)(*(_QWORD *)v958 + 1984);
                      v421 = *(_DWORD *)(*(_QWORD *)v958 + 1992);
                      LODWORD(v874.__r_.__value_.__r.__words[1]) = v421 >> 8;
                      if (v421 >> 8 > 0x40)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v874, v405, 0);
                      }
                      else
                      {
                        if (v421 <= 0xFF)
                          LODWORD(v422) = 0;
                        else
                          v422 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v421);
                        v874.__r_.__value_.__r.__words[0] = v422 & v405;
                      }
                      v424 = llvm::ConstantInt::get(v420, (llvm::LLVMContext *)&v874, v418);
                      LODWORD(v372) = v808;
                      if (LODWORD(v874.__r_.__value_.__r.__words[1]) >= 0x41 && v874.__r_.__value_.__r.__words[0])
                        MEMORY[0x1CAA32F9C](v874.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
                      v425 = *(llvm::ConstantInt **)(*(_QWORD *)v958 + 1984);
                      v426 = *(_DWORD *)(*(_QWORD *)v958 + 1992);
                      LODWORD(v874.__r_.__value_.__r.__words[1]) = v426 >> 8;
                      if (v426 >> 8 > 0x40)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v874, v810, 0);
                      }
                      else
                      {
                        if (v426 <= 0xFF)
                          v427 = 0;
                        else
                          v427 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v426);
                        v874.__r_.__value_.__r.__words[0] = v427 & v810;
                      }
                      v428 = llvm::ConstantInt::get(v425, (llvm::LLVMContext *)&v874, v423);
                      if (LODWORD(v874.__r_.__value_.__r.__words[1]) >= 0x41 && v874.__r_.__value_.__r.__words[0])
                        MEMORY[0x1CAA32F9C](v874.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
                      v282 = (v419 >> 1) & 0x3F | v282 & 0xFFFFFFFFFFFF0000 | 0x100;
                      v281 = v281 & 0xFFFFFFFF00000000 | v820;
                      v815 = v815 & 0xFFFFFFFF00000000 | (dword_1ED821DA8 == 0);
                      sub_1C5BBF694((uint64_t)v933, a1, v787, v282, v419 & 1, v788, v281, (uint64_t)v424, (uint64_t)v428, v798 | v407, (v798 | v407) >> 32, dword_1ED821DA8 == 0, v823, (uint64_t)&v953);
                      v320 = (uint64_t)v796;
                      v429 = sub_1C5BBD100((uint64_t)v796);
                      sub_1C5BBCB68(a1, (uint64_t **)&v907, (uint64_t)&v889, (uint64_t)v933, (uint64_t)&v953, 1, 0, v429);
                      if (*(_BYTE **)v933 != &v933[16])
                        free(*(void **)v933);
                      if ((std::string **)v889 != &v890)
                        free((void *)v889);
                      v406 = dword_1ED836290;
                      v405 += dword_1ED836290;
                    }
                    while (v405 < v808);
                  }
                  v430 = *(unsigned __int16 *)(v778 + 18);
                  v431 = dword_1ED821DA8;
                  v432 = *(llvm::ConstantInt **)(*(_QWORD *)v958 + 1984);
                  v433 = *(_DWORD *)(*(_QWORD *)v958 + 1992);
                  DWORD2(v889) = v433 >> 8;
                  if (v433 >> 8 > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v889, v785, 0);
                  }
                  else
                  {
                    if (v433 <= 0xFF)
                      v434 = 0;
                    else
                      v434 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v433);
                    *(_QWORD *)&v889 = v434 & v785;
                  }
                  v436 = llvm::ConstantInt::get(v432, (llvm::LLVMContext *)&v889, v400);
                  if (DWORD2(v889) >= 0x41 && (_QWORD)v889)
                    MEMORY[0x1CAA32F9C](v889, 0x1000C8000313F17);
                  v437 = *(llvm::ConstantInt **)(*(_QWORD *)v958 + 1984);
                  v438 = *(_DWORD *)(*(_QWORD *)v958 + 1992);
                  DWORD2(v889) = v438 >> 8;
                  if (v438 >> 8 > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v889, v810, 0);
                  }
                  else
                  {
                    if (v438 <= 0xFF)
                      v439 = 0;
                    else
                      v439 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v438);
                    *(_QWORD *)&v889 = v439 & v810;
                  }
                  v440 = llvm::ConstantInt::get(v437, (llvm::LLVMContext *)&v889, v435);
                  if (DWORD2(v889) >= 0x41 && (_QWORD)v889)
                    MEMORY[0x1CAA32F9C](v889, 0x1000C8000313F17);
                  v441 = (v430 >> 1) & 0x3F;
                  v442 = v431 == 0;
                  v768 = (uint64_t)v440;
                  v283 = (_QWORD *)a1;
                  v782 = v441 | v782 & 0xFFFFFFFFFFFF0000 | 0x100;
                  v783 = v783 & 0xFFFFFFFF00000000 | v442;
                  sub_1C5BBFA04(a1, (uint64_t)&v907, v777, v441 | 0x100, v430 & 1, v805, v442, (uint64_t)v436, v768, v823, (uint64_t)&v953);
                  LODWORD(v371) = v775;
                  if (v907 != &v909)
                    free(v907);
                  v394 = dword_1ED836290;
                  v395 = dword_1ED836290 + v785;
                  LODWORD(v372) = v808;
                }
                while (dword_1ED836290 + v785 < v775);
              }
              v393 = v394 + v774;
              LODWORD(v374) = (_DWORD)v773;
            }
            while (v394 + v774 < v773);
LABEL_743:
            if (v953 != &v955)
              free(v953);
            v281 = v770;
            v282 = v772;
            v284 = (_BYTE *)&unk_1ED836000;
            v443 = v790;
LABEL_746:
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v827, v778);
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v827, v320);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v778 + 40) + 40, (uint64_t ***)v778);
            v444 = *(_QWORD *)(v778 + 24);
            v445 = *(_QWORD **)(v778 + 32);
            *v445 = v444;
            *(_QWORD *)(v444 + 8) = v445;
            *(_QWORD *)(v778 + 24) = 0;
            *(_QWORD *)(v778 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v778);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v320 + 40) + 40, (uint64_t ***)v320);
            v446 = *(_QWORD *)(v320 + 24);
            v447 = *(_QWORD **)(v320 + 32);
            *v447 = v446;
            *(_QWORD *)(v446 + 8) = v447;
            *(_QWORD *)(v320 + 24) = 0;
            *(_QWORD *)(v320 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v320);
            if (!*((_QWORD *)v792 + 1))
            {
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v827, (uint64_t)v792);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v792 + 5) + 40, (uint64_t ***)v792);
              v448 = *((_QWORD *)v792 + 3);
              v449 = (_QWORD *)*((_QWORD *)v792 + 4);
              *v449 = v448;
              *(_QWORD *)(v448 + 8) = v449;
              *((_QWORD *)v792 + 3) = 0;
              *((_QWORD *)v792 + 4) = 0;
              llvm::Value::deleteValue(v792);
            }
            if ((llvm::Type *)v443 != v792 && !*(_QWORD *)(v443 + 8))
            {
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v827, v443);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v443 + 40) + 40, (uint64_t ***)v443);
              v450 = *(_QWORD *)(v443 + 24);
              v451 = *(_QWORD **)(v443 + 32);
              *v451 = v450;
              *(_QWORD *)(v450 + 8) = v451;
              *(_QWORD *)(v443 + 24) = 0;
              *(_QWORD *)(v443 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v443);
            }
LABEL_751:
            if ((std::string::size_type *)v883.__r_.__value_.__l.__data_ != &v883.__r_.__value_.__r.__words[2])
              free(v883.__r_.__value_.__l.__data_);
            if (__p)
            {
              v841 = __p;
              operator delete(__p);
            }
            MEMORY[0x1CAA32FB4](v839.__r_.__value_.__r.__words[0], 8);
            goto LABEL_613;
          }
          v824 = v373 == 0;
          v458 = v374;
          v459 = *(llvm::PointerType **)(*(_QWORD *)v320 + 24);
          v867.__r_.__value_.__r.__words[0] = __PAIR64__(v458, v371);
          v867.__r_.__value_.__l.__size_ = __PAIR64__(dword_1ED836290, v372);
          v867.__r_.__value_.__r.__words[2] = (std::string::size_type)v459;
          memset(v871, 0, sizeof(v871));
          v907 = &v909;
          v908 = (void *)0x1000000000;
          v921 = 0;
          v922 = 0;
          v460 = *(llvm::DomTreeUpdater **)(a1 + 40);
          v923 = *(_QWORD *)(a1 + 32);
          v924 = 0;
          v925 = 1;
          v926 = v930;
          v927 = v930;
          v928 = 8;
          v929 = 0;
          memset(v931, 0, sizeof(v931));
          v932 = 0;
          v461 = *(llvm **)(v320 + 40);
          *(_QWORD *)&v889 = "continue";
          WORD4(v891) = 259;
          v462 = (llvm::BasicBlock *)sub_1C5EBD70C(v461, (llvm::BasicBlock *)v320, 0, v923, v460, 0, (llvm::Twine *)&v889, 0);
          sub_1C4773D54((uint64_t)&v874, v320, 0, 0, 0);
          TiledLoops = llvm::TileInfo::CreateTiledLoops((llvm::TileInfo *)&v867, v461, v462, (llvm::Type **)&v874, (llvm::DomTreeUpdater *)&v907, *(llvm::LoopInfo **)(a1 + 40));
          v464 = *(llvm::FixedVectorType **)v320;
          if ((*(_DWORD *)(*(_QWORD *)v320 + 8) & 0xFE) == 0x12)
            v464 = (llvm::FixedVectorType *)**((_QWORD **)v464 + 2);
          llvm::FixedVectorType::get(v464, (llvm::Type *)dword_1ED836290);
          v466 = v465;
          v467 = 0;
          v899 = 0uLL;
          v900 = dword_1ED821DA8 == 0;
          v468 = *(_QWORD *)(*(_QWORD *)&v871[7] + 40);
          if (v468)
            v469 = v468 - 24;
          else
            v469 = 0;
          if (*(unsigned __int8 *)(v469 + 16) - 29 >= 0xB)
            v469 = 0;
          v878 = *(_QWORD *)(v469 + 40);
          v879 = v469 + 24;
          *(_QWORD *)&v889 = &v890;
          *((_QWORD *)&v889 + 1) = 0x1000000000;
          v470 = *(unsigned __int8 **)(v469 + 48);
          *(_QWORD *)v933 = v470;
          v283 = (_QWORD *)a1;
          v282 = v772;
          if (v470)
          {
            llvm::MetadataTracking::track((uint64_t)v933, v470, 2);
            v467 = *(_QWORD *)v933;
          }
          sub_1C4774EF4((uint64_t)&v874, 0, v467);
          if (*(_QWORD *)v933)
            llvm::MetadataTracking::untrack((uint64_t)v933, *(unsigned __int8 **)v933);
          v776 = v371;
          v886.__r_.__value_.__r.__words[0] = (std::string::size_type)&v886.__r_.__value_.__r.__words[2];
          v886.__r_.__value_.__l.__size_ = 0x400000000;
          if (dword_1ED836290)
          {
            v471 = 0;
            v472 = v769;
            do
            {
              *(_QWORD *)v933 = "result.vec.";
              v473 = v472 & 0xFFFFFFFF00000000 | v471;
              *(_QWORD *)&v933[16] = v473;
              LOWORD(v934) = 2051;
              v474 = (llvm::PHINode *)sub_1C4867E94((uint64_t)&v874, (uint64_t)v466, 2, (uint64_t)v933);
              v476 = llvm::ConstantAggregateZero::get(v466, v475);
              SingleSuccessor = llvm::BasicBlock::getSingleSuccessor(*(llvm::BasicBlock **)&v871[3]);
              sub_1C477667C(v474, (uint64_t)v476, SingleSuccessor);
              v478 = DWORD2(v889);
              if (DWORD2(v889) >= (unint64_t)HIDWORD(v889))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v889, (uint64_t)&v890, DWORD2(v889) + 1, 8);
                v478 = DWORD2(v889);
              }
              *(_QWORD *)(v889 + 8 * v478) = v474;
              ++DWORD2(v889);
              v479 = LODWORD(v886.__r_.__value_.__r.__words[1]);
              v283 = (_QWORD *)a1;
              if (LODWORD(v886.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v886.__r_.__value_.__r.__words[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v886, (uint64_t)&v886.__r_.__value_.__r.__words[2], LODWORD(v886.__r_.__value_.__r.__words[1]) + 1, 8);
                v472 = v473;
                v479 = LODWORD(v886.__r_.__value_.__r.__words[1]);
              }
              else
              {
                v472 = v473;
              }
              *(_QWORD *)(v886.__r_.__value_.__r.__words[0] + 8 * v479) = v474;
              ++LODWORD(v886.__r_.__value_.__r.__words[1]);
              ++v471;
            }
            while (v471 < dword_1ED836290);
          }
          else
          {
            v472 = v769;
          }
          v769 = v472;
          v480 = 0;
          v481 = *((_QWORD *)TiledLoops + 5);
          if (v481)
            v482 = v481 - 24;
          else
            v482 = 0;
          if (*(unsigned __int8 *)(v482 + 16) - 29 >= 0xB)
            v482 = 0;
          v878 = *(_QWORD *)(v482 + 40);
          v879 = v482 + 24;
          v483 = *(unsigned __int8 **)(v482 + 48);
          *(_QWORD *)v933 = v483;
          if (v483)
          {
            llvm::MetadataTracking::track((uint64_t)v933, v483, 2);
            v480 = *(_QWORD *)v933;
          }
          sub_1C4774EF4((uint64_t)&v874, 0, v480);
          v320 = (uint64_t)v796;
          if (*(_QWORD *)v933)
            llvm::MetadataTracking::untrack((uint64_t)v933, *(unsigned __int8 **)v933);
          sub_1C5BBF694((uint64_t)v933, (uint64_t)v283, v786, 0, 0, v805, v824, (uint64_t)v868, v870, dword_1ED836290, dword_1ED836290, dword_1ED821DA8 == 0, v459, (uint64_t)&v874);
          sub_1C5BBF694((uint64_t)&v953, (uint64_t)v283, v787, 0, 0, v788, v824, v870, v869, dword_1ED836290, dword_1ED836290, dword_1ED821DA8 == 0, v459, (uint64_t)&v874);
          v484 = sub_1C5BBD100((uint64_t)v796);
          sub_1C5BBCB68((uint64_t)v283, (uint64_t **)&v889, (uint64_t)v933, (uint64_t)&v953, (uint64_t)&v874, 1, 0, v484);
          v485 = 0;
          v486 = *(_QWORD *)(*(_QWORD *)&v871[5] + 40);
          if (v486)
            v487 = v486 - 24;
          else
            v487 = 0;
          if (*(unsigned __int8 *)(v487 + 16) - 29 >= 0xB)
            v487 = 0;
          v878 = *(_QWORD *)(v487 + 40);
          v879 = v487 + 24;
          v488 = *(unsigned __int8 **)(v487 + 48);
          v836.__r_.__value_.__r.__words[0] = (std::string::size_type)v488;
          if (v488)
          {
            llvm::MetadataTracking::track((uint64_t)&v836, v488, 2);
            v485 = v836.__r_.__value_.__r.__words[0];
          }
          sub_1C4774EF4((uint64_t)&v874, 0, v485);
          if (v836.__r_.__value_.__r.__words[0])
            llvm::MetadataTracking::untrack((uint64_t)&v836, (unsigned __int8 *)v836.__r_.__value_.__l.__data_);
          sub_1C5BBFA04((uint64_t)v283, (uint64_t)&v889, *(const llvm::APInt **)(v778 - 32), (*(_WORD *)(v778 + 18) >> 1) & 0x3F | 0x100, *(_WORD *)(v778 + 18) & 1, ((_QWORD)v773 << 32) | v776, dword_1ED821DA8 == 0, (uint64_t)v868, v869, v459, (uint64_t)&v874);
          if (DWORD2(v889))
          {
            v489 = 0;
            do
            {
              sub_1C477667C(*(llvm::PHINode **)(v886.__r_.__value_.__r.__words[0] + 8 * v489), *(_QWORD *)(v889 + 8 * v489), *(uint64_t *)&v871[9]);
              ++v489;
            }
            while (v489 < DWORD2(v889));
          }
          if (v372 / dword_1ED836290 >= 0xA)
            v490 = 10;
          else
            v490 = v372 / dword_1ED836290;
          v491 = (uint64_t *)v283[5];
          v492 = *((_DWORD *)v491 + 4);
          v284 = (_BYTE *)&unk_1ED836000;
          v443 = v790;
          if (v492)
          {
            v493 = *v491;
            v494 = v492 - 1;
            v495 = ((v871[7] >> 4) ^ (v871[7] >> 9)) & (v492 - 1);
            v496 = *(_QWORD *)(v493 + 16 * v495);
            if (*(_QWORD *)&v871[7] != v496)
            {
              v497 = 1;
              while (v496 != -4096)
              {
                v498 = v495 + v497++;
                v495 = v498 & v494;
                v496 = *(_QWORD *)(v493 + 16 * v495);
                if (*(_QWORD *)&v871[7] == v496)
                  goto LABEL_832;
              }
              goto LABEL_833;
            }
LABEL_832:
            v499 = *(uint64_t ******)(v493 + 16 * v495 + 8);
          }
          else
          {
LABEL_833:
            v499 = 0;
          }
          llvm::addStringMetadataToLoop(v499, (llvm::Loop *)"llvm.loop.unroll.count", (const char *)v490);
          if (v953 != &v955)
            free(v953);
          if (*(_BYTE **)v933 != &v933[16])
            free(*(void **)v933);
          if ((std::string::size_type *)v886.__r_.__value_.__l.__data_ != &v886.__r_.__value_.__r.__words[2])
            free(v886.__r_.__value_.__l.__data_);
          if ((std::string **)v889 != &v890)
            free((void *)v889);
          if ((std::string::size_type *)v874.__r_.__value_.__l.__data_ != &v874.__r_.__value_.__r.__words[2])
            free(v874.__r_.__value_.__l.__data_);
          llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)&v907);
          *(_QWORD *)&v889 = v931;
          sub_1C50B10F0((void ***)&v889);
          if (v927 != v926)
            free(v927);
          if (v907 != &v909)
            free(v907);
          goto LABEL_746;
        }
      }
      sub_1C4773D54((uint64_t)&v883, v285, 0, 0, 0);
      v292 = (_QWORD *)(v285 - 32 * (*(_DWORD *)(v285 + 20) & 0x7FFFFFF));
      v293 = v292[8];
      v294 = (_QWORD *)(v293 + 24);
      if (*(_DWORD *)(v293 + 32) >= 0x41u)
        v294 = (_QWORD *)*v294;
      v295 = *(llvm::FixedVectorType **)(*(_QWORD *)v285 + 24);
      v296 = v292[12];
      v297 = (_QWORD *)*v294;
      v298 = (_QWORD *)(v296 + 24);
      if (*(_DWORD *)(v296 + 32) >= 0x41u)
        v298 = (_QWORD *)*v298;
      v299 = *(_DWORD *)v298;
      v300 = v292[16];
      v301 = (_QWORD *)(v300 + 24);
      if (*(_DWORD *)(v300 + 32) >= 0x41u)
        v301 = (_QWORD *)*v301;
      v302 = *(_DWORD *)v301;
      *(_QWORD *)v933 = &v933[16];
      *(_QWORD *)&v933[8] = 0x1000000000;
      v948 = 0uLL;
      LOBYTE(v949) = dword_1ED821DA8 == 0;
      v953 = &v955;
      v954 = (void *)0x1000000000;
      v960 = 0uLL;
      v961 = dword_1ED821DA8 == 0;
      if (dword_1ED821DA8)
      {
        *(_QWORD *)&v889 = __PAIR64__(v299, v297);
        BYTE8(v889) = 0;
        sub_1C5BBC734((uint64_t)&v907, (uint64_t)v283, v847[0], (uint64_t)&v889, (uint64_t)&v883);
        v303 = v907;
        if (v907 == &v909)
        {
          v304 = (int)v908;
          v305 = *(unsigned int *)&v933[8];
          if (*(_DWORD *)&v933[8] >= v908)
          {
            if ((_DWORD)v908)
              memmove(*(void **)v933, &v909, 8 * v908);
            *(_DWORD *)&v933[8] = v304;
            v283 = (_QWORD *)a1;
          }
          else
          {
            if (*(_DWORD *)&v933[12] < v908)
            {
              *(_DWORD *)&v933[8] = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v933, (uint64_t)&v933[16], v908, 8);
LABEL_483:
              v305 = 0;
            }
            else
            {
              if (!*(_DWORD *)&v933[8])
                goto LABEL_483;
              memmove(*(void **)v933, &v909, 8 * *(unsigned int *)&v933[8]);
            }
            if (v305 != v908)
              memcpy((void *)(*(_QWORD *)v933 + 8 * v305), (char *)v907 + 8 * v305, 8 * v908 - 8 * v305);
            *(_DWORD *)&v933[8] = v304;
            v283 = (_QWORD *)a1;
          }
        }
        else
        {
          if (*(_BYTE **)v933 != &v933[16])
          {
            free(*(void **)v933);
            v303 = v907;
          }
          *(_QWORD *)v933 = v303;
          *(_QWORD *)&v933[8] = v908;
          v907 = &v909;
          HIDWORD(v908) = 0;
        }
        LODWORD(v908) = 0;
        v948 = *(_OWORD *)v918;
        LOBYTE(v949) = v918[16];
        if (v907 != &v909)
          free(v907);
        *(_QWORD *)&v889 = __PAIR64__(v299, v302);
        BYTE8(v889) = dword_1ED821DA8 == 0;
        sub_1C5BBC734((uint64_t)&v907, (uint64_t)v283, (llvm::PoisonValue **)v291, (uint64_t)&v889, (uint64_t)&v883);
        v306 = v907;
        v282 = v772;
        if (v907 == &v909)
        {
          v307 = (int)v908;
          v308 = v954;
          if (v954 >= v908)
          {
            if ((_DWORD)v908)
              memmove(v953, &v909, 8 * v908);
            LODWORD(v954) = v307;
            v283 = (_QWORD *)a1;
            v282 = v772;
          }
          else
          {
            if (HIDWORD(v954) < v908)
            {
              LODWORD(v954) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v953, (uint64_t)&v955, v908, 8);
LABEL_493:
              v308 = 0;
            }
            else
            {
              if (!(_DWORD)v954)
                goto LABEL_493;
              memmove(v953, &v909, 8 * v954);
            }
            if (v308 != v908)
              memcpy((char *)v953 + 8 * v308, (char *)v907 + 8 * v308, 8 * v908 - 8 * v308);
            LODWORD(v954) = v307;
            v283 = (_QWORD *)a1;
          }
        }
        else
        {
          if (v953 != &v955)
          {
            free(v953);
            v306 = v907;
          }
          v953 = v306;
          v954 = v908;
          v907 = &v909;
          HIDWORD(v908) = 0;
        }
        LODWORD(v908) = 0;
        v960 = *(_OWORD *)v918;
        v961 = v918[16];
        if (v907 != &v909)
          free(v907);
        v291 = v290;
        v309 = (uint64_t)v796;
        goto LABEL_599;
      }
      *(_QWORD *)&v889 = __PAIR64__(v299, v297);
      BYTE8(v889) = 1;
      sub_1C5BBC734((uint64_t)&v907, (uint64_t)v283, (llvm::PoisonValue **)v290, (uint64_t)&v889, (uint64_t)&v883);
      v343 = v907;
      if (v907 == &v909)
      {
        v344 = (int)v908;
        v345 = *(unsigned int *)&v933[8];
        if (*(_DWORD *)&v933[8] < v908)
        {
          if (*(_DWORD *)&v933[12] < v908)
          {
            *(_DWORD *)&v933[8] = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v933, (uint64_t)&v933[16], v908, 8);
LABEL_583:
            v345 = 0;
          }
          else
          {
            if (!*(_DWORD *)&v933[8])
              goto LABEL_583;
            memmove(*(void **)v933, &v909, 8 * *(unsigned int *)&v933[8]);
          }
          if (v345 != v908)
            memcpy((void *)(*(_QWORD *)v933 + 8 * v345), (char *)v907 + 8 * v345, 8 * v908 - 8 * v345);
          *(_DWORD *)&v933[8] = v344;
          v283 = (_QWORD *)a1;
          goto LABEL_587;
        }
        if ((_DWORD)v908)
          memmove(*(void **)v933, &v909, 8 * v908);
        *(_DWORD *)&v933[8] = v344;
        v283 = (_QWORD *)a1;
        v282 = v772;
      }
      else
      {
        if (*(_BYTE **)v933 != &v933[16])
        {
          free(*(void **)v933);
          v343 = v907;
        }
        *(_QWORD *)v933 = v343;
        *(_QWORD *)&v933[8] = v908;
        v907 = &v909;
        HIDWORD(v908) = 0;
      }
LABEL_587:
      LODWORD(v908) = 0;
      v948 = *(_OWORD *)v918;
      LOBYTE(v949) = v918[16];
      if (v907 != &v909)
        free(v907);
      *(_QWORD *)&v889 = __PAIR64__(v299, v302);
      BYTE8(v889) = dword_1ED821DA8 == 0;
      sub_1C5BBC734((uint64_t)&v907, (uint64_t)v283, v847[0], (uint64_t)&v889, (uint64_t)&v883);
      v346 = v907;
      if (v907 != &v909)
      {
        if (v953 != &v955)
        {
          free(v953);
          v346 = v907;
        }
        v953 = v346;
        v954 = v908;
        v907 = &v909;
        HIDWORD(v908) = 0;
        goto LABEL_597;
      }
      v347 = (int)v908;
      v348 = v954;
      if (v954 >= v908)
      {
        if ((_DWORD)v908)
          memmove(v953, &v909, 8 * v908);
        LODWORD(v954) = v347;
        v283 = (_QWORD *)a1;
        v282 = v772;
        goto LABEL_597;
      }
      if (HIDWORD(v954) < v908)
      {
        LODWORD(v954) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v953, (uint64_t)&v955, v908, 8);
      }
      else if ((_DWORD)v954)
      {
        memmove(v953, &v909, 8 * v954);
        goto LABEL_594;
      }
      v348 = 0;
LABEL_594:
      if (v348 != v908)
        memcpy((char *)v953 + 8 * v348, (char *)v907 + 8 * v348, 8 * v908 - 8 * v348);
      LODWORD(v954) = v347;
      v283 = (_QWORD *)a1;
LABEL_597:
      v309 = (uint64_t)v796;
      LODWORD(v908) = 0;
      v960 = *(_OWORD *)v918;
      v961 = v918[16];
      if (v907 != &v909)
        free(v907);
LABEL_599:
      sub_1C5BBCA8C((uint64_t)&v874, v297, v302, v295);
      v349 = sub_1C5BBD100(v309);
      sub_1C5BBCB68((uint64_t)v283, (uint64_t **)&v874, (uint64_t)v933, (uint64_t)&v953, (uint64_t)&v883, 0, 1, v349);
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v827, v309);
      v350 = *(_QWORD *)(v291 + 8);
      if (v350 && !*(_QWORD *)(v350 + 8))
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v827, v291);
        v354 = *((unsigned int *)v283 + 32);
        if (v354 >= *((unsigned int *)v283 + 33))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 120, a1 + 136, v354 + 1, 8);
          v354 = *((unsigned int *)v283 + 32);
        }
        *(_QWORD *)(v283[15] + 8 * v354) = v291;
        ++*((_DWORD *)v283 + 32);
        sub_1C5BBCA8C((uint64_t)&v867, v299, v302, v295);
        v839.__r_.__value_.__r.__words[0] = v291;
        LODWORD(v839.__r_.__value_.__r.__words[1]) = 0;
        sub_1C6245320(a1 + 264, (uint64_t *)&v839, &v839.__r_.__value_.__r.__words[1], (uint64_t)&v886);
        v355 = v886.__r_.__value_.__r.__words[0];
        if (v886.__r_.__value_.__s.__data_[16])
        {
          *(_QWORD *)&v889 = &v890;
          *((_QWORD *)&v889 + 1) = 0x1000000000;
          v899 = 0uLL;
          v900 = dword_1ED821DA8 == 0;
          v907 = (void *)v291;
          v908 = &v910;
          v909 = 0x1000000000;
          *(_OWORD *)&v918[8] = 0uLL;
          v919 = dword_1ED821DA8 == 0;
          sub_1C5BBDA9C(v771, (uint64_t)&v907);
          if (v908 != &v910)
            free(v908);
          if ((std::string **)v889 != &v890)
            free((void *)v889);
          v357 = v283 + 36;
          v356 = (char *)v283[36];
          v358 = -1 - 1171354717 * ((v357[1] - (_QWORD)v356) >> 4);
          *(_DWORD *)(v355 + 8) = v358;
        }
        else
        {
          v358 = *(_DWORD *)(v886.__r_.__value_.__r.__words[0] + 8);
          v356 = *v771;
        }
        v452 = (std::string *)&v356[176 * v358 + 8];
        if (v452 != &v867)
        {
          v453 = v867.__r_.__value_.__r.__words[0];
          if ((std::string::size_type *)v867.__r_.__value_.__l.__data_ == &v867.__r_.__value_.__r.__words[2])
          {
            v454 = LODWORD(v867.__r_.__value_.__r.__words[1]);
            v455 = *(unsigned int *)&v356[176 * v358 + 16];
            if (v455 >= LODWORD(v867.__r_.__value_.__r.__words[1]))
            {
              if (LODWORD(v867.__r_.__value_.__r.__words[1]))
                memmove(v452->__r_.__value_.__l.__data_, &v867.__r_.__value_.__r.__words[2], 8 * LODWORD(v867.__r_.__value_.__r.__words[1]));
              *(_DWORD *)&v356[176 * v358 + 16] = v454;
              v282 = v772;
              v309 = (uint64_t)v796;
            }
            else
            {
              if (*(_DWORD *)&v356[176 * v358 + 20] < LODWORD(v867.__r_.__value_.__r.__words[1]))
              {
                *(_DWORD *)&v356[176 * v358 + 16] = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v356[176 * v358 + 8], (uint64_t)&v356[176 * v358 + 24], v454, 8);
LABEL_762:
                v455 = 0;
              }
              else
              {
                if (!(_DWORD)v455)
                  goto LABEL_762;
                memmove(v452->__r_.__value_.__l.__data_, &v867.__r_.__value_.__r.__words[2], 8 * v455);
              }
              if (v455 != LODWORD(v867.__r_.__value_.__r.__words[1]))
                memcpy((void *)(v452->__r_.__value_.__r.__words[0] + 8 * v455), (const void *)(v867.__r_.__value_.__r.__words[0] + 8 * v455), 8 * LODWORD(v867.__r_.__value_.__r.__words[1]) - 8 * v455);
              *(_DWORD *)&v356[176 * v358 + 16] = v454;
            }
          }
          else
          {
            if (*(char **)&v356[176 * v358 + 8] != &v356[176 * v358 + 24])
            {
              free(v452->__r_.__value_.__l.__data_);
              v453 = v867.__r_.__value_.__r.__words[0];
            }
            v452->__r_.__value_.__r.__words[0] = v453;
            *(_QWORD *)&v356[176 * v358 + 16] = v867.__r_.__value_.__l.__size_;
            v867.__r_.__value_.__r.__words[0] = (std::string::size_type)&v867.__r_.__value_.__r.__words[2];
            HIDWORD(v867.__r_.__value_.__r.__words[1]) = 0;
          }
          LODWORD(v867.__r_.__value_.__r.__words[1]) = 0;
        }
        v456 = &v356[176 * v358];
        v457 = v872;
        v456[168] = v873;
        *(_OWORD *)(v456 + 152) = v457;
        if ((std::string::size_type *)v867.__r_.__value_.__l.__data_ != &v867.__r_.__value_.__r.__words[2])
          free(v867.__r_.__value_.__l.__data_);
        v283 = (_QWORD *)a1;
      }
      v862.__r_.__value_.__r.__words[0] = (std::string::size_type)&v862.__r_.__value_.__r.__words[2];
      v862.__r_.__value_.__l.__size_ = 0x1000000000;
      if (LODWORD(v874.__r_.__value_.__r.__words[1]))
        sub_1C49EEBE4((uint64_t)&v862, (uint64_t)&v874);
      v865 = v881;
      v866 = v882;
      sub_1C5BBD150((uint64_t)v283, v309, &v862.__r_.__value_.__l.__data_, (uint64_t)&v883);
      if ((std::string::size_type *)v862.__r_.__value_.__l.__data_ != &v862.__r_.__value_.__r.__words[2])
        free(v862.__r_.__value_.__l.__data_);
      v284 = (_BYTE *)&unk_1ED836000;
      if ((std::string::size_type *)v874.__r_.__value_.__l.__data_ != &v874.__r_.__value_.__r.__words[2])
        free(v874.__r_.__value_.__l.__data_);
      if (v953 != &v955)
        free(v953);
      if (*(_BYTE **)v933 != &v933[16])
        free(*(void **)v933);
      if ((std::string::size_type *)v883.__r_.__value_.__l.__data_ != &v883.__r_.__value_.__r.__words[2])
        free(v883.__r_.__value_.__l.__data_);
LABEL_613:
      v281 += 8;
      if (v281 == v282)
      {
        v280 = HIDWORD(v829);
        v500 = v830;
        goto LABEL_878;
      }
    }
  }
  v500 = 0;
  v283 = (_QWORD *)a1;
LABEL_878:
  v141 = v280 != v500;
  if ((_DWORD)v854)
  {
    v501 = (uint64_t *)v853;
    v502 = (uint64_t *)((char *)v853 + 8 * v854);
    v806 = v502;
    while (1)
    {
      v503 = *v501;
      v504 = sub_1C477672C((uint64_t)&v827, *v501);
      v505 = v828 == v827 ? (uint64_t *)((char *)&v829 + 4) : &v829;
      if (v504 == (_QWORD *)((char *)v828 + 8 * *(unsigned int *)v505))
        break;
LABEL_987:
      if (++v501 == v502)
        goto LABEL_1089;
    }
    sub_1C4773D54((uint64_t)&v867, v503, 0, 0, 0);
    v506 = *(unsigned __int8 *)(v503 + 16);
    if (v503 && v506 == 84)
    {
      v507 = *(_QWORD *)(v503 - 32);
      if (v507)
      {
        if (!*(_BYTE *)(v507 + 16)
          && *(_QWORD *)(v507 + 24) == *(_QWORD *)(v503 + 72)
          && (*(_BYTE *)(v507 + 33) & 0x20) != 0)
        {
          switch(*(_DWORD *)(v507 + 36))
          {
            case 0xBC:
              v569 = v503 - 32 * (*(_DWORD *)(v503 + 20) & 0x7FFFFFF);
              v570 = *(unsigned __int8 **)v569;
              v571 = *(_QWORD *)(v569 + 32);
              ParamAlignment = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v503 + 64), 0);
              v573 = *(_QWORD *)(v569 + 64);
              v574 = (llvm::APInt *)(v573 + 24);
              v575 = *(_DWORD *)(v573 + 32);
              if (v575 > 0x40)
                v576 = llvm::APInt::countLeadingZerosSlowCase(v574) == v575 - 1;
              else
                v576 = *(_QWORD *)v574 == 1;
              v635 = v576;
              v636 = *(_QWORD *)(v569 + 96);
              v637 = *(_QWORD *)(v569 + 128);
              v638 = (unsigned int *)(v636 + 24);
              if (*(_DWORD *)(v636 + 32) >= 0x41u)
                v638 = *(unsigned int **)v638;
              v283 = (_QWORD *)a1;
              v639 = *v638;
              v640 = (_QWORD *)(v637 + 24);
              if (*(_DWORD *)(v637 + 32) >= 0x41u)
                v640 = (_QWORD *)*v640;
              sub_1C5BC07F4(a1, v503, v570, ParamAlignment, v571, v635, v639 | (*v640 << 32), dword_1ED821DA8 == 0);
              goto LABEL_1069;
            case 0xBD:
              v625 = v503 - 32 * (*(_DWORD *)(v503 + 20) & 0x7FFFFFF);
              v626 = *(llvm::PoisonValue ***)v625;
              v627 = *(unsigned __int8 **)(v625 + 32);
              v628 = *(_QWORD *)(v625 + 64);
              v630 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v503 + 64), 1);
              v631 = *(_QWORD *)(v625 + 96);
              v632 = (llvm::APInt *)(v631 + 24);
              v633 = *(_DWORD *)(v631 + 32);
              if (v633 > 0x40)
                v634 = llvm::APInt::countLeadingZerosSlowCase(v632) == v633 - 1;
              else
                v634 = *(_QWORD *)v632 == 1;
              v641 = v634;
              v642 = *(_QWORD *)(v625 + 128);
              v643 = *(_QWORD *)(v625 + 160);
              v644 = (unsigned int *)(v642 + 24);
              v502 = v806;
              if (*(_DWORD *)(v642 + 32) >= 0x41u)
                v644 = *(unsigned int **)v644;
              v283 = (_QWORD *)a1;
              v645 = *v644;
              v646 = (_QWORD *)(v643 + 24);
              if (*(_DWORD *)(v643 + 32) >= 0x41u)
                v646 = (_QWORD *)*v646;
              sub_1C5BC090C(a1, v503, v626, v627, v630, v628, v641, v629, v645 | (*v646 << 32), dword_1ED821DA8 == 0);
LABEL_1069:
              LODWORD(v507) = 1;
              break;
            case 0xBE:
              sub_1C4773D54((uint64_t)&v874, v503, 0, 0, 0);
              v577 = v503 - 32 * (*(_DWORD *)(v503 + 20) & 0x7FFFFFF);
              v578 = *(_QWORD *)(v577 + 64);
              v579 = (_QWORD *)(v578 + 24);
              if (*(_DWORD *)(v578 + 32) >= 0x41u)
                v579 = (_QWORD *)*v579;
              v580 = *(llvm::FixedVectorType **)(*(_QWORD *)v503 + 24);
              v581 = *(_QWORD *)(v577 + 96);
              v582 = (_QWORD *)*v579;
              v583 = (_QWORD **)(v581 + 24);
              v584 = *(_DWORD *)(v581 + 32);
              v585 = v583;
              if (v584 >= 0x41)
                v585 = *v583;
              v862.__r_.__value_.__r.__words[0] = __PAIR64__(*v585, v582);
              v862.__r_.__value_.__s.__data_[8] = dword_1ED821DA8 == 0;
              v586 = *(_QWORD *)(v577 + 128);
              if (v584 >= 0x41)
                v583 = (_QWORD **)*v583;
              v587 = (uint64_t)*v583;
              v588 = (unsigned int *)(v586 + 24);
              if (*(_DWORD *)(v586 + 32) >= 0x41u)
                v588 = *(unsigned int **)v588;
              v589 = *v588;
              v883.__r_.__value_.__r.__words[0] = __PAIR64__(*v588, v587);
              v883.__r_.__value_.__s.__data_[8] = dword_1ED821DA8 == 0;
              sub_1C5BBC734((uint64_t)&v907, a1, *(llvm::PoisonValue ***)v577, (uint64_t)&v862, (uint64_t)&v874);
              sub_1C5BBC734((uint64_t)&v889, a1, *(llvm::PoisonValue ***)(v503 - 32 * (*(_DWORD *)(v503 + 20) & 0x7FFFFFF) + 32), (uint64_t)&v883, (uint64_t)&v874);
              v590 = v589;
              v283 = (_QWORD *)a1;
              sub_1C5BBCA8C((uint64_t)v933, v582, v590, v580);
              v591 = sub_1C5BBD100(v503);
              sub_1C5BBCB68(a1, (uint64_t **)v933, (uint64_t)&v907, (uint64_t)&v889, (uint64_t)&v874, 0, 0, v591);
              v953 = &v955;
              v954 = (void *)0x1000000000;
              if (*(_DWORD *)&v933[8])
                sub_1C49EEBE4((uint64_t)&v953, (uint64_t)v933);
              v960 = v948;
              v961 = (char)v949;
              sub_1C5BBD150(a1, v503, (_BYTE **)&v953, (uint64_t)&v874);
              if (v953 != &v955)
                free(v953);
              if (*(_BYTE **)v933 != &v933[16])
                free(*(void **)v933);
              if ((std::string **)v889 != &v890)
                free((void *)v889);
              if (v907 != &v909)
                free(v907);
              v592 = (uint64_t *)v874.__r_.__value_.__r.__words[0];
              v593 = (uint64_t *)&v874.__r_.__value_.__r.__words[2];
              goto LABEL_1080;
            case 0xBF:
              v907 = &v909;
              v908 = (void *)0x1000000000;
              *(_QWORD *)v918 = 0;
              *(_QWORD *)&v918[8] = 0;
              v918[16] = dword_1ED821DA8 == 0;
              sub_1C4773D54((uint64_t)&v953, v503, 0, 0, 0);
              v594 = v503 - 32 * (*(_DWORD *)(v503 + 20) & 0x7FFFFFF);
              v595 = *(_QWORD *)(v594 + 32);
              v596 = (_QWORD *)(v595 + 24);
              if (*(_DWORD *)(v595 + 32) >= 0x41u)
                v596 = (_QWORD *)*v596;
              v597 = *(llvm::PoisonValue ***)v594;
              v802 = **(llvm::ValueHandleBase ***)v594;
              v598 = *(_QWORD *)(v594 + 64);
              v599 = (_QWORD *)*v596;
              v600 = (unsigned int *)(v598 + 24);
              if (*(_DWORD *)(v598 + 32) >= 0x41u)
                v600 = *(unsigned int **)v600;
              v601 = *v600;
              v883.__r_.__value_.__r.__words[0] = __PAIR64__(*v600, v599);
              v883.__r_.__value_.__s.__data_[8] = dword_1ED821DA8 == 0;
              sub_1C5BBC734((uint64_t)&v889, (uint64_t)v283, v597, (uint64_t)&v883, (uint64_t)&v953);
              if (v900)
                v602 = v599;
              else
                v602 = v601;
              if (v900)
                v603 = v601;
              else
                v603 = v599;
              v793 = v603;
              v794 = v602;
              if ((_DWORD)v602)
              {
                v789 = v601;
                v791 = (int)v599;
                v604 = 0;
                v817 = v141;
                do
                {
                  llvm::FixedVectorType::get(*((llvm::FixedVectorType **)v802 + 3), (llvm::Type *)v793);
                  v608 = llvm::UndefValue::get(v605, v606);
                  if (DWORD2(v889))
                  {
                    v609 = 0;
                    v610 = v889;
                    v611 = 8 * DWORD2(v889);
                    do
                    {
                      v612 = *(_QWORD *)(v610 + 8 * v609);
                      v876 = 257;
                      v613 = *(llvm::ConstantInt **)(*(_QWORD *)v958 + 1984);
                      v614 = *(_DWORD *)(*(_QWORD *)v958 + 1992);
                      LODWORD(v862.__r_.__value_.__r.__words[1]) = v614 >> 8;
                      if (v614 >> 8 > 0x40)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v862, v604, 0);
                      }
                      else
                      {
                        if (v614 <= 0xFF)
                          v615 = 0;
                        else
                          v615 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v614);
                        v862.__r_.__value_.__r.__words[0] = v615 & v604;
                      }
                      v616 = llvm::ConstantInt::get(v613, (llvm::LLVMContext *)&v862, v607);
                      if (LODWORD(v862.__r_.__value_.__r.__words[1]) >= 0x41 && v862.__r_.__value_.__r.__words[0])
                        MEMORY[0x1CAA32F9C](v862.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
                      v618 = sub_1C4772EE0((uint64_t *)&v953, v612, (uint64_t)v616, (uint64_t)&v874);
                      v876 = 257;
                      v619 = *(llvm::ConstantInt **)(*(_QWORD *)v958 + 1984);
                      v620 = *(_DWORD *)(*(_QWORD *)v958 + 1992);
                      LODWORD(v862.__r_.__value_.__r.__words[1]) = v620 >> 8;
                      if (v620 >> 8 > 0x40)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v862, v609, 0);
                      }
                      else
                      {
                        if (v620 <= 0xFF)
                          v621 = 0;
                        else
                          v621 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v620);
                        v862.__r_.__value_.__r.__words[0] = v621 & v609;
                      }
                      v622 = llvm::ConstantInt::get(v619, (llvm::LLVMContext *)&v862, v617);
                      if (LODWORD(v862.__r_.__value_.__r.__words[1]) >= 0x41 && v862.__r_.__value_.__r.__words[0])
                        MEMORY[0x1CAA32F9C](v862.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
                      v608 = sub_1C4773154((uint64_t *)&v953, (uint64_t)v608, (uint64_t)v618, (uint64_t)v622, (uint64_t)&v874);
                      ++v609;
                      v611 -= 8;
                    }
                    while (v611);
                  }
                  v623 = v908;
                  if (v908 >= (unint64_t)HIDWORD(v908))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v907, (uint64_t)&v909, v908 + 1, 8);
                    v623 = v908;
                  }
                  v283 = (_QWORD *)a1;
                  v141 = v817;
                  v502 = v806;
                  *((_QWORD *)v907 + v623) = v608;
                  v624 = (_DWORD)v908 + 1;
                  LODWORD(v908) = (_DWORD)v908 + 1;
                  ++v604;
                }
                while (v604 != v794);
                LODWORD(v599) = v791;
                v601 = v789;
              }
              else
              {
                v624 = (int)v908;
              }
              v647.i32[1] = 1;
              v647.i32[0] = 2 * (_DWORD)v599 * v601;
              *(int32x2_t *)&v918[8] = vadd_s32(*(int32x2_t *)&v918[8], v647);
              *(_QWORD *)v933 = &v933[16];
              *(_QWORD *)&v933[8] = 0x1000000000;
              if (v624)
                sub_1C49EEBE4((uint64_t)v933, (uint64_t)&v907);
              v948 = *(_OWORD *)v918;
              LOBYTE(v949) = v918[16];
              sub_1C5BBD150((uint64_t)v283, v503, (_BYTE **)v933, (uint64_t)&v953);
              if (*(_BYTE **)v933 != &v933[16])
                free(*(void **)v933);
              if ((std::string **)v889 != &v890)
                free((void *)v889);
              if (v953 != &v955)
                free(v953);
              v592 = (uint64_t *)v907;
              v593 = &v909;
LABEL_1080:
              if (v592 != v593)
                free(v592);
              LODWORD(v507) = 1;
              break;
            default:
              goto LABEL_890;
          }
        }
        else
        {
LABEL_890:
          LODWORD(v507) = 0;
        }
      }
      v141 |= v507;
      v506 = *(unsigned __int8 *)(v503 + 16);
    }
    if (v503 && (v506 - 59) >= 0xFFFFFFEE)
    {
      v816 = v141;
      v907 = 0;
      v508 = sub_1C5BBBB34(v283[7], *((_DWORD *)v283 + 18), v503, &v907);
      v509 = *((_DWORD *)v283 + 18);
      v510 = v283[7] + 56 * v509;
      if (v508)
        v511 = v907;
      else
        v511 = (_BYTE *)(v283[7] + 56 * v509);
      if (v511 != (_BYTE *)v510)
      {
        v801 = (llvm::ValueHandleBase *)(v283[7] + 56 * v509);
        v512 = (uint64_t)v283;
        v513 = *(llvm::PoisonValue ***)(v503 - 64);
        v514 = *(llvm::PoisonValue ***)(v503 - 32);
        sub_1C4773D54((uint64_t)&v874, v503, 0, 0, 0);
        v907 = &v909;
        v908 = (void *)0x1000000000;
        *(_QWORD *)v918 = 0;
        *(_QWORD *)&v918[8] = 0;
        v918[16] = dword_1ED821DA8 == 0;
        sub_1C5BBC734((uint64_t)&v889, v512, v513, (uint64_t)(v511 + 40), (uint64_t)&v874);
        sub_1C5BBC734((uint64_t)v933, v512, v514, (uint64_t)(v511 + 40), (uint64_t)&v874);
        v880 = sub_1C5BBD100(v503);
        v515 = 40;
        if (v511[48])
          v515 = 44;
        if (*(_DWORD *)&v511[v515])
          __asm { BR              X9 }
        v283 = (_QWORD *)a1;
        v516 = sub_1C5BBDA28(a1, **(_QWORD **)v907);
        *(_DWORD *)&v918[8] += (_DWORD)v908 * v516;
        v953 = &v955;
        v954 = (void *)0x1000000000;
        if ((_DWORD)v908)
          sub_1C49EEBE4((uint64_t)&v953, (uint64_t)&v907);
        v960 = *(_OWORD *)v918;
        v961 = v918[16];
        sub_1C5BBD150(a1, v503, (_BYTE **)&v953, (uint64_t)&v874);
        if (v953 != &v955)
          free(v953);
        if (*(_BYTE **)v933 != &v933[16])
          free(*(void **)v933);
        if ((std::string **)v889 != &v890)
          free((void *)v889);
        if (v907 != &v909)
          free(v907);
        if ((std::string::size_type *)v874.__r_.__value_.__l.__data_ != &v874.__r_.__value_.__r.__words[2])
          free(v874.__r_.__value_.__l.__data_);
        v510 = (uint64_t)v801;
      }
      v141 = v816 | (v511 != (_BYTE *)v510);
      v506 = *(unsigned __int8 *)(v503 + 16);
    }
    if (v503 && v506 == 40)
    {
      v907 = 0;
      v517 = sub_1C5BBBB34(v283[7], *((_DWORD *)v283 + 18), v503, &v907);
      v518 = v283[7];
      v519 = *((_DWORD *)v283 + 18);
      v520 = (_BYTE *)(v518 + 56 * v519);
      if (v517)
        v521 = v907;
      else
        v521 = (_BYTE *)(v518 + 56 * v519);
      if (v521 != v520)
      {
        v522 = (uint64_t)v283;
        v523 = *(llvm::PoisonValue ***)(v503 - 32);
        sub_1C4773D54((uint64_t)&v953, v503, 0, 0, 0);
        v907 = &v909;
        v908 = (void *)0x1000000000;
        *(_QWORD *)v918 = 0;
        *(_QWORD *)&v918[8] = 0;
        v918[16] = dword_1ED821DA8 == 0;
        sub_1C5BBC734((uint64_t)&v889, v522, v523, (uint64_t)(v521 + 40), (uint64_t)&v953);
        v959 = sub_1C5BBD100(v503);
        v524 = 40;
        if (v521[48])
          v524 = 44;
        if (*(_DWORD *)&v521[v524])
        {
          v525 = 0;
          do
          {
            v526 = *(_QWORD *)(v889 + 8 * v525);
            v876 = 257;
            v527 = sub_1C4772890((uint64_t *)&v953, v526, (uint64_t)&v874, 0);
            v528 = v908;
            if (v908 >= (unint64_t)HIDWORD(v908))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v907, (uint64_t)&v909, v908 + 1, 8);
              v528 = v908;
            }
            *((_QWORD *)v907 + v528) = v527;
            LODWORD(v908) = (_DWORD)v908 + 1;
            ++v525;
            v529 = 40;
            if (v521[48])
              v529 = 44;
          }
          while (v525 < *(unsigned int *)&v521[v529]);
        }
        v283 = (_QWORD *)a1;
        v530 = sub_1C5BBDA28(a1, **(_QWORD **)v907);
        *(_DWORD *)&v918[8] += (_DWORD)v908 * v530;
        *(_QWORD *)v933 = &v933[16];
        *(_QWORD *)&v933[8] = 0x1000000000;
        if ((_DWORD)v908)
          sub_1C49EEBE4((uint64_t)v933, (uint64_t)&v907);
        v948 = *(_OWORD *)v918;
        LOBYTE(v949) = v918[16];
        sub_1C5BBD150(a1, v503, (_BYTE **)v933, (uint64_t)&v953);
        if (*(_BYTE **)v933 != &v933[16])
          free(*(void **)v933);
        if ((std::string **)v889 != &v890)
          free((void *)v889);
        if (v907 != &v909)
          free(v907);
        if (v953 != &v955)
          free(v953);
      }
      v141 |= v521 != v520;
      v506 = *(unsigned __int8 *)(v503 + 16);
    }
    if (v506 == 61)
    {
      v533 = *(_DWORD *)(v503 + 20);
      if ((v533 & 0x40000000) != 0)
        v534 = *(_QWORD *)(v503 - 8);
      else
        v534 = v503 - 32 * (v533 & 0x7FFFFFF);
      v551 = *(llvm::PoisonValue ***)v534;
      if (*(_QWORD *)v534)
      {
        v552 = *(unsigned __int8 **)(v534 + 32);
        if (v552)
        {
          v907 = 0;
          v553 = sub_1C5BBBB34(v283[7], *((_DWORD *)v283 + 18), (uint64_t)v551, &v907);
          v555 = v283[7];
          v556 = *((_DWORD *)v283 + 18);
          v557 = (char *)(v555 + 56 * v556);
          if (v553)
            v558 = (char *)v907;
          else
            v558 = (char *)(v555 + 56 * v556);
          if (v558 != v557)
          {
            v559 = *(unsigned __int16 *)(v503 + 18);
            v560 = 40;
            if (!v558[48])
              v560 = 44;
            v561 = *(unsigned int *)&v558[v560];
            v562 = *(llvm::ConstantInt **)(**(_QWORD **)&v871[3] + 1984);
            v563 = *(_DWORD *)(**(_QWORD **)&v871[3] + 1992);
            LODWORD(v908) = v563 >> 8;
            if (v563 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v907, v561, 0);
            }
            else
            {
              if (v563 <= 0xFF)
                v564 = 0;
              else
                v564 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v563);
              v907 = (void *)(v564 & v561);
            }
            v566 = llvm::ConstantInt::get(v562, (llvm::LLVMContext *)&v907, v554);
            if (v908 >= 0x41 && v907)
              MEMORY[0x1CAA32F9C](v907, 0x1000C8000313F17);
            v567 = (uint64_t)v566;
            v283 = (_QWORD *)a1;
            sub_1C5BC090C(a1, v503, v551, v552, (v559 >> 1) & 0x3F | 0x100, v567, *(_WORD *)(v503 + 18) & 1, v565, *((_QWORD *)v558 + 5), *((_DWORD *)v558 + 12));
            v502 = v806;
          }
          v550 = v558 == v557;
LABEL_981:
          v568 = !v550;
          v141 |= v568;
        }
      }
    }
    else if (v506 == 60)
    {
      v531 = *(_DWORD *)(v503 + 20);
      v532 = (v531 & 0x40000000) != 0
           ? *(unsigned __int8 ***)(v503 - 8)
           : (unsigned __int8 **)(v503 - 32 * (v531 & 0x7FFFFFF));
      v535 = *v532;
      if (*v532)
      {
        v907 = 0;
        v536 = sub_1C5BBBB34(v283[7], *((_DWORD *)v283 + 18), v503, &v907);
        v538 = v283[7];
        v539 = *((_DWORD *)v283 + 18);
        v540 = (char *)(v538 + 56 * v539);
        if (v536)
          v541 = (char *)v907;
        else
          v541 = (char *)(v538 + 56 * v539);
        if (v541 != v540)
        {
          v542 = *(unsigned __int16 *)(v503 + 18);
          v543 = 40;
          if (!v541[48])
            v543 = 44;
          v544 = *(unsigned int *)&v541[v543];
          v545 = *(llvm::ConstantInt **)(**(_QWORD **)&v871[3] + 1984);
          v546 = *(_DWORD *)(**(_QWORD **)&v871[3] + 1992);
          LODWORD(v908) = v546 >> 8;
          if (v546 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v907, v544, 0);
          }
          else
          {
            if (v546 <= 0xFF)
              v547 = 0;
            else
              v547 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v546);
            v907 = (void *)(v547 & v544);
          }
          v548 = llvm::ConstantInt::get(v545, (llvm::LLVMContext *)&v907, v537);
          if (v908 >= 0x41 && v907)
            MEMORY[0x1CAA32F9C](v907, 0x1000C8000313F17);
          v549 = (uint64_t)v548;
          v283 = (_QWORD *)a1;
          sub_1C5BC07F4(a1, v503, v535, (v542 >> 1) & 0x3F | 0x100, v549, *(_WORD *)(v503 + 18) & 1, *((_QWORD *)v541 + 5), *((_DWORD *)v541 + 12));
        }
        v550 = v541 == v540;
        goto LABEL_981;
      }
    }
    if ((std::string::size_type *)v867.__r_.__value_.__l.__data_ != &v867.__r_.__value_.__r.__words[2])
      free(v867.__r_.__value_.__l.__data_);
    goto LABEL_987;
  }
LABEL_1089:
  v648 = (uint64_t *)v283[6];
  if (!v648)
    goto LABEL_1091;
  v649 = (uint64_t *)*v283;
  v826[0] = v283 + 33;
  v826[1] = v648;
  v650 = (uint64_t *)(v649[5] + 272);
  v826[2] = v649;
  v826[3] = v650;
  if (!sub_1C550930C(**(_QWORD **)*v648, (uint64_t)"lower-matrix-intrinsics", 23))
    goto LABEL_1091;
  v797 = (llvm::Instruction *)(v283 + 33);
  v799 = (llvm::OptimizationRemarkEmitter *)v648;
  v847[1] = 0;
  v847[0] = 0;
  v848 = 0;
  v851 = 0;
  v849 = 0;
  v850 = 0;
  v672 = v283;
  v673 = (uint64_t *)v283[36];
  v674 = (uint64_t *)v672[37];
  if (v673 == v674)
    goto LABEL_1196;
  v795 = v650;
  v818 = v141;
  v675 = (v649 >> 4) ^ (v649 >> 9);
  if ((*((_BYTE *)v649 + 23) & 0x20) == 0)
    goto LABEL_1145;
  while (2)
  {
    v676 = **(_QWORD **)*v649;
    v907 = v649;
    v677 = *(_DWORD *)(v676 + 2496);
    if (!v677)
    {
      v700 = 0;
      goto LABEL_1175;
    }
    v678 = *(_QWORD *)(v676 + 2480);
    v679 = v677 - 1;
    v680 = v679 & v675;
    v681 = (_QWORD *)(v678 + 40 * (v679 & v675));
    v682 = (_QWORD ***)*v681;
    if ((uint64_t *)*v681 != v649)
    {
      v683 = 0;
      v684 = 1;
      while (v682 != (_QWORD ***)-4096)
      {
        if (v683)
          v685 = 0;
        else
          v685 = v682 == (_QWORD ***)-8192;
        if (v685)
          v683 = v681;
        v686 = v680 + v684++;
        v680 = v686 & v679;
        v681 = (_QWORD *)(v678 + 40 * v680);
        v682 = (_QWORD ***)*v681;
        if ((uint64_t *)*v681 == v649)
          goto LABEL_1141;
      }
      if (v683)
        v700 = v683;
      else
        v700 = v681;
LABEL_1175:
      v681 = sub_1C541AB24(v676 + 2480, (uint64_t)&v907, (uint64_t *)&v907, v700);
      v701 = v907;
      v681[4] = 0;
      v681[3] = 0;
      *v681 = v701;
      v681[1] = v681 + 3;
      v681[2] = 0x100000000;
    }
    v687 = *((unsigned int *)v681 + 4);
    if (!(_DWORD)v687)
      goto LABEL_1145;
LABEL_1141:
    v688 = (_QWORD *)(v681[1] + 8);
    v689 = 16 * v687;
    while (*((_DWORD *)v688 - 2))
    {
      v688 += 2;
      v689 -= 16;
      if (!v689)
        goto LABEL_1145;
    }
    if (*v688)
    {
      v693 = *(unsigned int **)(*v673 + 48);
      if (v693)
      {
        while (1)
        {
          v694 = *(unsigned __int8 **)&v693[-2 * v693[2]];
          v695 = *v694;
          if (v695 != 17 && (v695 & 0xFE) == 18)
          {
            do
              v694 = *(unsigned __int8 **)&v694[-8 * *((unsigned int *)v694 + 2) + 8];
            while ((*v694 & 0xFE) == 0x12);
          }
          *(_QWORD *)&v889 = &v890;
          *((_QWORD *)&v889 + 1) = 0x800000000;
          v907 = v694;
          v908 = &v910;
          v909 = 0x800000000;
          v697 = sub_1C631F604((uint64_t)v847, (uint64_t *)&v907);
          if (v908 != &v910)
            free(v908);
          if ((std::string **)v889 != &v890)
            free((void *)v889);
          v698 = *v673;
          v699 = *(unsigned int *)(v697 + 16);
          if (v699 >= *(unsigned int *)(v697 + 20))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v697 + 8, v697 + 24, v699 + 1, 8);
            v699 = *(unsigned int *)(v697 + 16);
          }
          *(_QWORD *)(*(_QWORD *)(v697 + 8) + 8 * v699) = v698;
          ++*(_DWORD *)(v697 + 16);
          v907 = v693;
          llvm::MetadataTracking::track((uint64_t)&v907, (unsigned __int8 *)v693, 2);
          if (*((_DWORD *)v907 + 2) != 2)
            break;
          v693 = (unsigned int *)*((_QWORD *)v907 - 1);
          llvm::MetadataTracking::untrack((uint64_t)&v907, (unsigned __int8 *)v907);
          if (!v693)
            goto LABEL_1152;
        }
        llvm::MetadataTracking::untrack((uint64_t)&v907, (unsigned __int8 *)v907);
      }
    }
    else
    {
LABEL_1145:
      *(_QWORD *)&v889 = &v890;
      *((_QWORD *)&v889 + 1) = 0x800000000;
      v907 = 0;
      v908 = &v910;
      v909 = 0x800000000;
      v690 = sub_1C631F604((uint64_t)v847, (uint64_t *)&v907);
      if (v908 != &v910)
        free(v908);
      if ((std::string **)v889 != &v890)
        free((void *)v889);
      v691 = *v673;
      v692 = *(unsigned int *)(v690 + 16);
      if (v692 >= *(unsigned int *)(v690 + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v690 + 8, v690 + 24, v692 + 1, 8);
        v692 = *(unsigned int *)(v690 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(v690 + 8) + 8 * v692) = v691;
      ++*(_DWORD *)(v690 + 16);
    }
LABEL_1152:
    v673 += 22;
    if (v673 != v674)
      continue;
    break;
  }
  v714 = v849;
  v781 = v850;
  LOBYTE(v141) = v818;
  if (v849 != v850)
  {
    v715 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v779 = v715;
    do
    {
      v716 = (uint64_t *)v714[1];
      v784 = v714;
      v717 = *((unsigned int *)v714 + 4);
      v718 = 8;
      v907 = (void *)1;
      do
      {
        *(int64x2_t *)((char *)&v907 + v718) = v715;
        v718 += 16;
      }
      while (v718 != 264);
      v920 = &v922;
      v921 = 0x2000000000;
      sub_1C631F774(&v907, v716, &v716[v717]);
      v904 = v906;
      v905 = 0x400000000;
      if ((_DWORD)v921)
      {
        v719 = 0;
        v720 = (char *)v920;
        v721 = (char *)v920 + 8 * v921;
        do
        {
          v722 = *(_QWORD *)v720;
          if (*(_BYTE *)(**(_QWORD **)v720 + 8) != 7)
          {
            v723 = *(_QWORD *)(v722 + 8);
            if (v723)
            {
              if ((v907 & 1) != 0)
                v724 = &v908;
              else
                v724 = v908;
              if ((v907 & 1) != 0)
                v725 = 31;
              else
                v725 = v909 - 1;
              do
              {
                if (v907 & 1 | ((_DWORD)v909 != 0))
                {
                  v726 = *(_QWORD *)(v723 + 24);
                  v727 = ((v726 >> 4) ^ (v726 >> 9)) & v725;
                  v728 = v724[v727];
                  if (v726 == v728)
                    goto LABEL_1221;
                  v729 = 1;
                  while (v728 != -4096)
                  {
                    v730 = v727 + v729++;
                    v727 = v730 & v725;
                    v728 = v724[v727];
                    if (v726 == v728)
                      goto LABEL_1221;
                  }
                }
                v723 = *(_QWORD *)(v723 + 8);
              }
              while (v723);
            }
          }
          if (v719 >= HIDWORD(v905))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v904, (uint64_t)v906, v719 + 1, 8);
            v719 = v905;
          }
          *((_QWORD *)v904 + v719) = v722;
          v719 = v905 + 1;
          LODWORD(v905) = v905 + 1;
LABEL_1221:
          v720 += 8;
        }
        while (v720 != v721);
        v731 = (_QWORD **)v904;
        v845 = 0;
        v844 = 0;
        v846 = 0;
        if (v719)
        {
          v732 = 8 * v719;
          do
          {
            v733 = *v731++;
            sub_1C5BC0AAC(v733, (uint64_t)v733, (uint64_t)&v907, (uint64_t)&v844);
            v732 -= 8;
          }
          while (v732);
          if ((_DWORD)v905)
          {
            v734 = (uint64_t *)v904;
            v803 = (llvm::ValueHandleBase *)((char *)v904 + 8 * v905);
            do
            {
              v814 = v734;
              v735 = *v734;
              v736 = *(unsigned __int8 **)(*v734 + 48);
              v843 = v736;
              if (v736)
              {
                llvm::MetadataTracking::track((uint64_t)&v843, v736, 2);
                v737 = *(_QWORD *)(v735 + 48);
                if (v737)
                {
                  while (1)
                  {
                    v738 = *(unsigned __int8 **)(v737 - 8 * *(unsigned int *)(v737 + 8));
                    v739 = *v738;
                    if (v739 != 17 && (v739 & 0xFE) == 18)
                    {
                      do
                        v738 = *(unsigned __int8 **)&v738[-8 * *((unsigned int *)v738 + 2) + 8];
                      while ((*v738 & 0xFE) == 0x12);
                    }
                    if (v738 == *v784)
                      break;
                    *(_QWORD *)&v889 = v737;
                    llvm::MetadataTracking::track((uint64_t)&v889, (unsigned __int8 *)v737, 2);
                    if (*(_DWORD *)(v889 + 8) != 2)
                    {
                      llvm::MetadataTracking::untrack((uint64_t)&v889, (unsigned __int8 *)v889);
                      goto LABEL_1248;
                    }
                    v737 = *(_QWORD *)(v889 - 8);
                    llvm::MetadataTracking::untrack((uint64_t)&v889, (unsigned __int8 *)v889);
                    if (!v737)
                      goto LABEL_1248;
                  }
                  *(_QWORD *)&v889 = v737;
                  llvm::MetadataTracking::track((uint64_t)&v889, (unsigned __int8 *)v737, 2);
                  if (v843)
                    llvm::MetadataTracking::untrack((uint64_t)&v843, v843);
                  v843 = (unsigned __int8 *)v889;
                  if ((_QWORD)v889)
                    llvm::MetadataTracking::retrack((uint64_t)&v889, (unsigned __int8 *)v889, (uint64_t)&v843);
                }
              }
LABEL_1248:
              v953 = v957;
              v954 = v957;
              v955 = 8;
              v956 = 0;
              sub_1C5BC0C08((uint64_t)&v889, v826, v735, (llvm::SmallPtrSetImplBase *)&v953, (uint64_t)&v907, (uint64_t)&v844);
              v741 = v889;
              v742 = DWORD1(v889);
              v743 = DWORD2(v889);
              v744 = HIDWORD(v889);
              v745 = v890;
              v746 = v891;
              v747 = v843;
              if (v843)
              {
                v749 = *(_QWORD *)&v843[-8 * *((unsigned int *)v843 + 2)];
                if (*(_BYTE *)v749 != 15)
                  v749 = *(_QWORD *)(v749 - 8 * *(unsigned int *)(v749 + 8));
                v748 = *((_DWORD *)v843 + 1);
                v747 = *((unsigned __int16 *)v843 + 1);
              }
              else
              {
                v748 = 0;
                v749 = 0;
              }
              __srca = (void *)v735;
              v750 = *(_QWORD *)(v735 + 40);
              v751 = *(std::string **)(v750 + 56);
              DWORD2(v889) = 9;
              BYTE12(v889) = 2;
              v890 = v751;
              *(_QWORD *)&v891 = v749;
              *((_QWORD *)&v891 + 1) = __PAIR64__(v747, v748);
              *(_QWORD *)&v892 = "lower-matrix-intrinsics";
              *((_QWORD *)&v892 + 1) = "matrix-lowered";
              v893 = 14;
              LOBYTE(v894) = 0;
              LOBYTE(v895) = 0;
              v896 = v898;
              v897 = 0x400000000;
              v901 = 0;
              v902 = -1;
              v903 = v750;
              *(_QWORD *)&v889 = &off_1E814E500;
              *(_QWORD *)v933 = "Lowered with ";
              *(_QWORD *)&v933[8] = 13;
              sub_1C53B17B4((uint64_t)&v896, (const void **)v933);
              llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v874, "NumStores", 9uLL, v741);
              v752 = sub_1C47E3888((uint64_t)&v889, (uint64_t)&v874);
              *(_QWORD *)v933 = " stores, ";
              *(_QWORD *)&v933[8] = 9;
              sub_1C53B17B4(v752 + 80, (const void **)v933);
              llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v867, "NumLoads", 8uLL, v742);
              v753 = sub_1C47E3888(v752, (uint64_t)&v867);
              *(_QWORD *)v933 = " loads, ";
              *(_QWORD *)&v933[8] = 8;
              sub_1C53B17B4(v753 + 80, (const void **)v933);
              llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v862, "NumComputeOps", 0xDuLL, v743);
              v754 = sub_1C47E3888(v753, (uint64_t)&v862);
              *(_QWORD *)v933 = " compute ops, ";
              *(_QWORD *)&v933[8] = 14;
              sub_1C53B17B4(v754 + 80, (const void **)v933);
              llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v883, "NumExposedTransposes", 0x14uLL, v744);
              v755 = sub_1C47E3888(v754, (uint64_t)&v883);
              *(_QWORD *)v933 = " exposed transposes";
              *(_QWORD *)&v933[8] = 19;
              sub_1C53B17B4(v755 + 80, (const void **)v933);
              if (v885 < 0)
                operator delete(v884);
              if (SHIBYTE(v883.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v883.__r_.__value_.__l.__data_);
              if (v864 < 0)
                operator delete(v863);
              if (SHIBYTE(v862.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v862.__r_.__value_.__l.__data_);
              if (SHIBYTE(v870) < 0)
                operator delete(v868);
              if (SHIBYTE(v867.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v867.__r_.__value_.__l.__data_);
              if (v877 < 0)
                operator delete(v875);
              if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v874.__r_.__value_.__l.__data_);
              if (v745 || v746)
              {
                *(_QWORD *)v933 = ",\nadditionally ";
                *(_QWORD *)&v933[8] = 15;
                sub_1C53B17B4((uint64_t)&v896, (const void **)v933);
                llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v886, "NumStores", 9uLL, v745);
                v756 = sub_1C47E3888((uint64_t)&v889, (uint64_t)&v886);
                *(_QWORD *)v933 = " stores, ";
                *(_QWORD *)&v933[8] = 9;
                sub_1C53B17B4(v756 + 80, (const void **)v933);
                llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v839, "NumLoads", 8uLL, HIDWORD(v745));
                v757 = sub_1C47E3888(v756, (uint64_t)&v839);
                *(_QWORD *)v933 = " loads, ";
                *(_QWORD *)&v933[8] = 8;
                sub_1C53B17B4(v757 + 80, (const void **)v933);
                llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v836, "NumFPOps", 8uLL, v746);
                v758 = sub_1C47E3888(v757, (uint64_t)&v836);
                *(_QWORD *)v933 = " compute ops";
                *(_QWORD *)&v933[8] = 12;
                v759 = v758 + 80;
                sub_1C53B17B4(v758 + 80, (const void **)v933);
                *(_QWORD *)v933 = " are shared with other expressions";
                *(_QWORD *)&v933[8] = 34;
                sub_1C53B17B4(v759, (const void **)v933);
                if (v838 < 0)
                  operator delete(v837);
                if (SHIBYTE(v836.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v836.__r_.__value_.__l.__data_);
                if (SHIBYTE(v842) < 0)
                  operator delete(__p);
                if (SHIBYTE(v839.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v839.__r_.__value_.__l.__data_);
                if (v888 < 0)
                  operator delete(v887);
                if (SHIBYTE(v886.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v886.__r_.__value_.__l.__data_);
              }
              *(_DWORD *)v933 = 100;
              memset(&v933[8], 0, 24);
              v935 = 0;
              v939 = 0;
              v940 = 0;
              v934 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
              v942 = &v933[8];
              v941 = 0;
              v943 = 0;
              v937 = 0;
              v938 = 0;
              v936 = 0;
              v944 = v795;
              v945 = v797;
              v946 = &v844;
              v947 = &v907;
              *(_QWORD *)&v948 = __srca;
              *((_QWORD *)&v948 + 1) = v952;
              v949 = v952;
              v950 = 8;
              v951 = 0;
              sub_1C5BC1200((uint64_t)v933, (uint64_t)__srca, 0, 0, 0);
              v760 = v938 - v936;
              if (v938 != v936)
              {
                v938 = v936;
                llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v934, v936, v760);
              }
              if ((v933[31] & 0x80000000) != 0)
                sub_1C47EBC30(&v835, *(void **)&v933[8], *(unint64_t *)&v933[16]);
              else
                v835 = *(std::string *)&v933[8];
              if (v949 != *((void **)&v948 + 1))
                free(v949);
              v934 = off_1E81A6E70;
              if (v941 == 1 && v936)
                MEMORY[0x1CAA32F9C](v936, 0x1000C8077774924);
              if ((v933[31] & 0x80000000) != 0)
                operator delete(*(void **)&v933[8]);
              v761 = std::string::insert(&v835, 0, "\n");
              v762 = v761->__r_.__value_.__r.__words[2];
              *(_OWORD *)v933 = *(_OWORD *)&v761->__r_.__value_.__l.__data_;
              *(_QWORD *)&v933[16] = v762;
              v761->__r_.__value_.__l.__size_ = 0;
              v761->__r_.__value_.__r.__words[2] = 0;
              v761->__r_.__value_.__r.__words[0] = 0;
              v763 = *(_BYTE **)v933;
              if (v933[23] >= 0)
                v763 = v933;
              v764 = (const void *)(v933[23] & 0x7F);
              if (v933[23] < 0)
                v764 = *(const void **)&v933[8];
              v852[0] = v763;
              v852[1] = v764;
              sub_1C53B17B4((uint64_t)&v896, v852);
              if ((v933[23] & 0x80000000) != 0)
                operator delete(*(void **)v933);
              if (SHIBYTE(v835.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v835.__r_.__value_.__l.__data_);
              llvm::OptimizationRemarkEmitter::emit(v799, (llvm::DiagnosticInfoOptimizationBase *)&v889);
              *(_QWORD *)&v889 = &off_1E814E790;
              v765 = (char *)v896;
              if ((_DWORD)v897)
              {
                v766 = (unint64_t)v897 << 6;
                do
                {
                  v767 = (void **)&v765[v766];
                  if (v765[v766 - 17] < 0)
                    operator delete(*(v767 - 5));
                  if (*((char *)v767 - 41) < 0)
                    operator delete(*(v767 - 8));
                  v766 -= 64;
                }
                while (v766);
                v765 = (char *)v896;
              }
              if (v765 != v898)
                free(v765);
              if (v954 != v953)
                free(v954);
              if (v843)
                llvm::MetadataTracking::untrack((uint64_t)&v843, v843);
              v734 = v814 + 1;
            }
            while (v814 + 1 != (uint64_t *)v803);
          }
        }
      }
      else
      {
        v845 = 0;
        v844 = 0;
        v846 = 0;
      }
      sub_1C62C4F70(v844, v846);
      MEMORY[0x1CAA32FB4](v844, 8);
      if (v904 != v906)
        free(v904);
      LOBYTE(v141) = v818;
      if (v920 != &v922)
        free(v920);
      if ((v907 & 1) == 0)
        MEMORY[0x1CAA32FB4](v908, 8);
      v714 = v784 + 11;
      v715 = v779;
    }
    while (v784 + 11 != v781);
  }
LABEL_1196:
  sub_1C62EA8E4((uint64_t)v847);
  v283 = (_QWORD *)a1;
LABEL_1091:
  v907 = &v911;
  v908 = &v911;
  v909 = 16;
  LODWORD(v910) = 0;
  v651 = *((unsigned int *)v283 + 32);
  if ((_DWORD)v651)
  {
    v652 = v283[15];
    v653 = v652 + 8 * v651;
    do
    {
      v655 = *(_QWORD *)(v653 - 8);
      v653 -= 8;
      v654 = v655;
      v656 = *(_QWORD *)(v655 + 8);
      if (v656)
      {
        do
        {
          v658 = (_QWORD *)(v656 + 8);
          v657 = *(_QWORD *)(v656 + 8);
          v659 = *(unsigned __int8 **)(v656 + 24);
          if (v659)
            v660 = v659[16] >= 0x1Cu;
          else
            v660 = 0;
          if (v660)
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v907, (uint64_t)v659);
          v661 = llvm::UndefValue::get(*(llvm::UndefValue **)v654, (llvm::Type *)v659);
          if (*(_QWORD *)v656)
          {
            **(_QWORD **)(v656 + 16) = *(_QWORD *)(v656 + 8);
            v662 = *(_QWORD *)(v656 + 8);
            if (v662)
              *(_QWORD *)(v662 + 16) = *(_QWORD *)(v656 + 16);
          }
          *(_QWORD *)v656 = v661;
          if (v661)
          {
            v665 = *((_QWORD *)v661 + 1);
            v663 = (_QWORD *)((char *)v661 + 8);
            v664 = v665;
            *v658 = v665;
            if (v665)
              *(_QWORD *)(v664 + 16) = v658;
            *(_QWORD *)(v656 + 16) = v663;
            *v663 = v656;
          }
          v656 = v657;
        }
        while (v657);
      }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v654 + 40) + 40, (uint64_t ***)v654);
      v666 = *(_QWORD *)(v654 + 24);
      v667 = *(_QWORD **)(v654 + 32);
      *v667 = v666;
      *(_QWORD *)(v666 + 8) = v667;
      *(_QWORD *)(v654 + 24) = 0;
      *(_QWORD *)(v654 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v654);
      v668 = (llvm *)sub_1C477672C((uint64_t)&v907, v654);
      v669 = HIDWORD(v909);
      if (v908 == v907)
        v670 = HIDWORD(v909);
      else
        v670 = v909;
      if (v668 != (llvm *)((char *)v908 + 8 * v670))
      {
        *(_QWORD *)v668 = -2;
        LODWORD(v910) = v910 + 1;
      }
    }
    while (v653 != v652);
    if (v669 != (_DWORD)v910)
    {
      v702 = llvm::dbgs(v668);
      v703 = (void *)*((_QWORD *)v702 + 4);
      if (*((_QWORD *)v702 + 3) - (_QWORD)v703 > 0x21uLL)
      {
        qmemcpy(v703, "Undefed but present instructions:\n", 34);
        *((_QWORD *)v702 + 4) += 34;
      }
      else
      {
        v702 = llvm::raw_ostream::write(v702, "Undefed but present instructions:\n", 0x22uLL);
      }
      v704 = (unint64_t *)v908;
      if (v908 == v907)
        v705 = (uint64_t *)((char *)&v909 + 4);
      else
        v705 = &v909;
      v706 = *(unsigned int *)v705;
      v707 = (unint64_t *)((char *)v908 + 8 * v706);
      if ((_DWORD)v706)
      {
        v708 = 8 * v706;
        do
        {
          if (*v704 < 0xFFFFFFFFFFFFFFFELL)
            goto LABEL_1187;
          ++v704;
          v708 -= 8;
        }
        while (v708);
        v704 = v707;
      }
      while (1)
      {
LABEL_1187:
        v709 = (llvm::Value *)*v704;
        v710 = llvm::dbgs(v702);
        llvm::Value::print(v709, v710, 0);
        v711 = (_BYTE *)*((_QWORD *)v710 + 4);
        if (*((_BYTE **)v710 + 3) == v711)
        {
          v702 = llvm::raw_ostream::write(v710, "\n", 1uLL);
        }
        else
        {
          *v711 = 10;
          ++*((_QWORD *)v710 + 4);
        }
        v712 = v704 + 1;
        while (v712 != v707)
        {
          v713 = *v712++;
          if (v713 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v704 = v712 - 1;
            goto LABEL_1187;
          }
        }
        v704 = v707;
      }
    }
    if (v908 != v907)
      free(v908);
  }
  if (v828 != v827)
    free(v828);
  if (v832)
  {
    v833 = (char *)v832;
    operator delete(v832);
  }
  if (v853 != v855)
    free(v853);
  if (v856 != v858)
    free(v856);
LABEL_1125:
  if (__dst != v861)
    free(__dst);
  return v141 & 1;
}

uint64_t sub_1C5BBB1E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  int32x2_t *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int v23;

  v2 = *(_QWORD *)(a1 + 288);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 296);
    v4 = *(void **)(a1 + 288);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 168);
        if ((void *)(v3 - 152) != v5)
          free(v5);
        v3 -= 176;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 288);
    }
    *(_QWORD *)(a1 + 296) = v2;
    operator delete(v4);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 264), 8);
  v6 = *(void **)(a1 + 120);
  if (v6 != (void *)(a1 + 136))
    free(v6);
  if (*(_BYTE *)(a1 + 104))
  {
    sub_1C4E43068(a1 + 80);
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 80), 8);
    *(_BYTE *)(a1 + 104) = 0;
  }
  v7 = *(_DWORD *)(a1 + 72);
  v8 = *(_QWORD **)(a1 + 56);
  if (v7)
  {
    v9 = &v8[7 * v7];
    do
    {
      v10 = v8[3];
      if (v10 != -8192 && v10 != -4096 && v10 != 0)
      {
        v12 = v8[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v12 = v8[2];
        v13 = (unint64_t *)v8[2];
        if (v13)
        {
          *v13 = *v13 & 7 | v12;
        }
        else
        {
          v14 = v8[3];
          v15 = ***(int32x2_t ****)v14;
          v16 = (unint64_t)v15[303];
          if (v16 <= v12)
          {
            v17 = v15[305].u32[0];
            if (v16 + 16 * v17 > v12)
            {
              v18 = v17 - 1;
              LODWORD(v19) = v18 & ((v14 >> 4) ^ (v14 >> 9));
              v20 = (uint64_t *)(v16 + 16 * v19);
              v21 = *v20;
              if (v14 == *v20)
              {
LABEL_30:
                *v20 = -8192;
                v15[304] = vadd_s32(v15[304], (int32x2_t)0x1FFFFFFFFLL);
                v14 = v8[3];
              }
              else
              {
                v22 = 1;
                while (v21 != -4096)
                {
                  v23 = v19 + v22++;
                  v19 = v23 & v18;
                  v21 = *(_QWORD *)(v16 + 16 * v19);
                  if (v14 == v21)
                  {
                    v20 = (uint64_t *)(v16 + 16 * v19);
                    goto LABEL_30;
                  }
                }
              }
              *(_BYTE *)(v14 + 17) &= ~1u;
            }
          }
        }
      }
      v8 += 7;
    }
    while (v8 != v9);
    v8 = *(_QWORD **)(a1 + 56);
  }
  MEMORY[0x1CAA32FB4](v8, 8);
  return a1;
}

uint64_t sub_1C5BBB3B0(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeOptimizationRemarkEmitterWrapperPassPass(a1, a2);
  llvm::initializeAAResultsWrapperPassPass(a1, v3);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  v4 = operator new();
  *(_QWORD *)v4 = "Lower the matrix intrinsics";
  *(_QWORD *)(v4 + 8) = 27;
  *(_QWORD *)(v4 + 16) = "lower-matrix-intrinsics";
  *(_QWORD *)(v4 + 24) = 23;
  *(_QWORD *)(v4 + 32) = &unk_1ED821B90;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C5BC2870;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

uint64_t sub_1C5BBB45C(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED821B90;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81966B0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED821B98);
  if (v3 != -1)
  {
    v7[0] = sub_1C5BBB3B0;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED821B98, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5BBB524(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Lower the matrix intrinsics (minimal)";
  *(_QWORD *)(v2 + 8) = 37;
  *(_QWORD *)(v2 + 16) = "lower-matrix-intrinsics-minimal";
  *(_QWORD *)(v2 + 24) = 31;
  *(_QWORD *)(v2 + 32) = &unk_1ED821B91;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5BC2C4C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5BBB5B4(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED821B91;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8196750;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED821BA0);
  if (v3 != -1)
  {
    v7[0] = sub_1C5BBB524;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED821BA0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5BBB67C(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

uint64_t sub_1C5BBB690(_QWORD *a1)
{
  uint64_t v1;
  _QWORD ***v2;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v10;
  _QWORD ***v11;
  int32x2_t *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD ***v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  int32x2_t *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  unint64_t *v34;
  _QWORD ***v35;
  uint64_t v36;
  _QWORD *v37;

  v1 = a1[1];
  v33 = v1 & 6;
  v34 = 0;
  v2 = (_QWORD ***)a1[3];
  v35 = v2;
  if (v2 != (_QWORD ***)-8192 && v2 != (_QWORD ***)-4096 && v2 != 0)
  {
    v34 = *(unint64_t **)(v1 & 0xFFFFFFFFFFFFFFF8);
    *(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) = &v33;
    v33 = v1 & 0xFFFFFFFFFFFFFFFELL;
    if (v34)
      *v34 = *v34 & 7 | (unint64_t)&v34;
  }
  v4 = a1[4];
  v36 = v4;
  v37 = 0;
  result = sub_1C5BBBB34(*(_QWORD *)v4, *(_DWORD *)(v4 + 16), (uint64_t)v35, &v37);
  if ((_DWORD)result)
  {
    v6 = v37;
    v7 = v37[3];
    if (v7 != -8192)
    {
      if (v7 != -4096 && v7 != 0)
      {
        v21 = v37[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v21 = v37[2];
        v22 = (unint64_t *)v6[2];
        if (v22)
        {
          *v22 = *v22 & 7 | v21;
        }
        else
        {
          v23 = v6[3];
          v24 = ***(int32x2_t ****)v23;
          v25 = (unint64_t)v24[303];
          if (v25 <= v21)
          {
            v26 = v24[305].u32[0];
            if (v25 + 16 * v26 > v21)
            {
              v27 = v26 - 1;
              LODWORD(v28) = v27 & ((v23 >> 4) ^ (v23 >> 9));
              v29 = (uint64_t *)(v25 + 16 * v28);
              v30 = *v29;
              if (v23 == *v29)
              {
LABEL_42:
                *v29 = -8192;
                v24[304] = vadd_s32(v24[304], (int32x2_t)0x1FFFFFFFFLL);
                v23 = v6[3];
              }
              else
              {
                v31 = 1;
                while (v30 != -4096)
                {
                  v32 = v28 + v31++;
                  v28 = v32 & v27;
                  v30 = *(_QWORD *)(v25 + 16 * v28);
                  if (v23 == v30)
                  {
                    v29 = (uint64_t *)(v25 + 16 * v28);
                    goto LABEL_42;
                  }
                }
              }
              *(_BYTE *)(v23 + 17) &= ~1u;
            }
          }
        }
      }
      v6[3] = -8192;
    }
    v6[4] = 0;
    *(int32x2_t *)(v4 + 8) = vadd_s32(*(int32x2_t *)(v4 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v35 != (_QWORD ***)-8192 && v35 != (_QWORD ***)-4096 && v35 != 0)
  {
    v10 = v33 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF8) = v34;
    if (v34)
    {
      *v34 = *v34 & 7 | v10;
    }
    else
    {
      v11 = v35;
      v12 = (int32x2_t *)***v35;
      v13 = (unint64_t)v12[303];
      if (v13 <= v10)
      {
        v14 = v12[305].u32[0];
        if (v13 + 16 * v14 > v10)
        {
          v15 = v14 - 1;
          LODWORD(v16) = v15 & ((v35 >> 4) ^ (v35 >> 9));
          v17 = (_QWORD *)(v13 + 16 * v16);
          v18 = (_QWORD ***)*v17;
          if (v35 == (_QWORD ***)*v17)
          {
LABEL_32:
            *v17 = -8192;
            v12[304] = vadd_s32(v12[304], (int32x2_t)0x1FFFFFFFFLL);
            v11 = v35;
          }
          else
          {
            v19 = 1;
            while (v18 != (_QWORD ***)-4096)
            {
              v20 = v16 + v19++;
              v16 = v20 & v15;
              v18 = *(_QWORD ****)(v13 + 16 * v16);
              if (v35 == v18)
              {
                v17 = (_QWORD *)(v13 + 16 * v16);
                goto LABEL_32;
              }
            }
          }
          *((_BYTE *)v11 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C5BBB938(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  int32x2_t ****v13;
  int32x2_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int32x2_t *****v19;
  int32x2_t ****v20;
  int v21;
  int v22;
  char v23[24];
  _QWORD v24[2];
  int v25;
  uint64_t (**v26)(llvm::CallbackVH *__hidden);
  unint64_t v27;
  unint64_t *v28;
  int32x2_t ****v29;
  uint64_t v30;

  v3 = a1[1];
  v27 = v3 & 6;
  v28 = 0;
  v4 = a1[3];
  v29 = (int32x2_t ****)v4;
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
  {
    v28 = *(unint64_t **)(v3 & 0xFFFFFFFFFFFFFFF8);
    v6 = v28;
    *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8) = &v27;
    v27 = v3 & 0xFFFFFFFFFFFFFFFELL;
    if (v6)
      *v6 = *v6 & 7 | (unint64_t)&v28;
  }
  v7 = a1[4];
  v26 = &off_1E8196688;
  v30 = v7;
  v24[0] = 0;
  result = sub_1C5BBBB34(*(_QWORD *)v7, *(_DWORD *)(v7 + 16), v4, v24);
  if ((_DWORD)result)
  {
    v9 = v24[0];
    v10 = *(_QWORD *)v7;
    v11 = *(_DWORD *)(v7 + 16);
  }
  else
  {
    v10 = *(_QWORD *)v7;
    v11 = *(_DWORD *)(v7 + 16);
    v9 = *(_QWORD *)v7 + 56 * v11;
  }
  if (v10 + 56 * v11 != v9)
  {
    v24[1] = *(_QWORD *)(v9 + 40);
    v25 = *(_DWORD *)(v9 + 48);
    sub_1C5BBBBCC((int32x2_t *)v7, (_QWORD *)v9);
    v24[0] = a2;
    result = sub_1C5BBBCD4((uint64_t)v23, v30, (uint64_t)v24);
  }
  if (v29 != (int32x2_t ****)-8192 && v29 != (int32x2_t ****)-4096 && v29)
  {
    v12 = v27 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF8) = v28;
    if (v28)
    {
      *v28 = *v28 & 7 | v12;
    }
    else
    {
      v13 = v29;
      v14 = ***v29;
      v15 = (unint64_t)v14[303];
      if (v15 <= v12)
      {
        v16 = v14[305].u32[0];
        if (v15 + 16 * v16 > v12)
        {
          v17 = v16 - 1;
          LODWORD(v18) = v17 & ((v29 >> 4) ^ (v29 >> 9));
          v19 = (int32x2_t *****)(v15 + 16 * v18);
          v20 = *v19;
          if (v29 == *v19)
          {
LABEL_24:
            *v19 = (int32x2_t ****)-8192;
            v14[304] = vadd_s32(v14[304], (int32x2_t)0x1FFFFFFFFLL);
            v13 = v29;
          }
          else
          {
            v21 = 1;
            while (v20 != (int32x2_t ****)-4096)
            {
              v22 = v18 + v21++;
              v18 = v22 & v17;
              v20 = *(int32x2_t *****)(v15 + 16 * v18);
              if (v29 == v20)
              {
                v19 = (int32x2_t *****)(v15 + 16 * v18);
                goto LABEL_24;
              }
            }
          }
          *((_BYTE *)v13 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C5BBBB34(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = a1 + 56 * v5;
    v7 = *(_QWORD *)(v6 + 24);
    if (v7 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = a1 + 56 * (v13 & v4);
        v7 = *(_QWORD *)(v6 + 24);
        v8 = 1;
        if (v7 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

int32x2_t sub_1C5BBBBCC(int32x2_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int32x2_t result;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  int32x2_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;

  v2 = a2[3];
  if (v2 != -8192)
  {
    if (v2 != -4096 && v2 != 0)
    {
      v5 = a2[1] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v5 = a2[2];
      v6 = (unint64_t *)a2[2];
      if (v6)
      {
        *v6 = *v6 & 7 | v5;
      }
      else
      {
        v7 = a2[3];
        v8 = ***(int32x2_t ****)v7;
        v9 = (unint64_t)v8[303];
        if (v9 <= v5)
        {
          v10 = v8[305].u32[0];
          if (v9 + 16 * v10 > v5)
          {
            v11 = v10 - 1;
            LODWORD(v12) = v11 & ((v7 >> 4) ^ (v7 >> 9));
            v13 = (uint64_t *)(v9 + 16 * v12);
            v14 = *v13;
            if (v7 == *v13)
            {
LABEL_17:
              *v13 = -8192;
              v8[304] = vadd_s32(v8[304], (int32x2_t)0x1FFFFFFFFLL);
              v7 = a2[3];
            }
            else
            {
              v15 = 1;
              while (v14 != -4096)
              {
                v16 = v12 + v15++;
                v12 = v16 & v11;
                v14 = *(_QWORD *)(v9 + 16 * v12);
                if (v7 == v14)
                {
                  v13 = (uint64_t *)(v9 + 16 * v12);
                  goto LABEL_17;
                }
              }
            }
            *(_BYTE *)(v7 + 17) &= ~1u;
          }
        }
      }
    }
    a2[3] = -8192;
  }
  a2[4] = 0;
  result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

uint64_t sub_1C5BBBCD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  int32x2_t ****v14;
  int32x2_t ****v15;
  unint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  int32x2_t ****v24;
  int32x2_t *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int32x2_t *****v30;
  int32x2_t ****v31;
  int v32;
  int v33;
  unint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  int32x2_t *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  int v45;
  unint64_t v47;
  int32x2_t ****v48;
  int32x2_t *v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  int32x2_t *****v54;
  int32x2_t ****v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t *v59;
  int32x2_t ****v60;
  uint64_t v61;
  uint64_t (**v62)(llvm::CallbackVH *__hidden);
  unint64_t v63;
  unint64_t *v64;
  int32x2_t ****v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;

  v6 = *(_QWORD *)a3;
  v7 = 2;
  v58 = 2;
  v59 = 0;
  v60 = (int32x2_t ****)v6;
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
  {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v58);
    v7 = v58;
    v6 = (uint64_t)v60;
  }
  v61 = a2;
  v63 = v7 & 6;
  v64 = 0;
  v65 = (int32x2_t ****)v6;
  if (v6 == -8192 || v6 == -4096)
  {
    v9 = a2;
  }
  else
  {
    v9 = a2;
    if (v6)
    {
      v64 = *(unint64_t **)(v7 & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8) = &v63;
      v63 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if (v64)
        *v64 = *v64 & 7 | (unint64_t)&v64;
      v9 = v61;
      v6 = (uint64_t)v65;
    }
  }
  v62 = &off_1E8196688;
  v10 = *(_QWORD *)(a3 + 8);
  v66 = v9;
  v67 = v10;
  v68 = *(_DWORD *)(a3 + 16);
  v69 = 0;
  result = sub_1C5BBBB34(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), v6, &v69);
  v12 = v69;
  if ((result & 1) != 0)
  {
    v13 = 0;
  }
  else
  {
    result = sub_1C5BBC160((char **)a2, (uint64_t)&v62, v69);
    v12 = result;
    v14 = *(int32x2_t *****)(result + 24);
    v15 = v65;
    if (v14 != v65)
    {
      if (v14 != (int32x2_t ****)-4096 && v14 && v14 != (int32x2_t ****)-8192)
      {
        v34 = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v34 = *(_QWORD *)(result + 16);
        v35 = *(unint64_t **)(result + 16);
        if (v35)
        {
          *v35 = *v35 & 7 | v34;
        }
        else
        {
          v36 = *(_QWORD *)(result + 24);
          v37 = ***(int32x2_t ****)v36;
          v38 = (unint64_t)v37[303];
          if (v38 <= v34)
          {
            v39 = v37[305].u32[0];
            if (v38 + 16 * v39 > v34)
            {
              v40 = v39 - 1;
              LODWORD(v41) = v40 & ((v36 >> 4) ^ (v36 >> 9));
              v42 = (uint64_t *)(v38 + 16 * v41);
              v43 = *v42;
              if (v36 == *v42)
              {
LABEL_49:
                *v42 = -8192;
                v37[304] = vadd_s32(v37[304], (int32x2_t)0x1FFFFFFFFLL);
                v36 = *(_QWORD *)(result + 24);
              }
              else
              {
                v44 = 1;
                while (v43 != -4096)
                {
                  v45 = v41 + v44++;
                  v41 = v45 & v40;
                  v43 = *(_QWORD *)(v38 + 16 * v41);
                  if (v36 == v43)
                  {
                    v42 = (uint64_t *)(v38 + 16 * v41);
                    goto LABEL_49;
                  }
                }
              }
              *(_BYTE *)(v36 + 17) &= ~1u;
            }
          }
        }
        v15 = v65;
      }
      *(_QWORD *)(result + 24) = v15;
      if (v15 != (int32x2_t ****)-4096 && v15 != (int32x2_t ****)-8192 && v15 != 0)
      {
        v17 = v63;
        v18 = (_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF8);
        *(_QWORD *)(result + 16) = *(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF8);
        *v18 = result + 8;
        *(_QWORD *)(result + 8) = v17 & 0xFFFFFFFFFFFFFFF8 | *(_QWORD *)(result + 8) & 7;
        v19 = *(uint64_t **)(result + 16);
        if (v19)
          *v19 = *v19 & 7 | (result + 16);
      }
    }
    *(_QWORD *)(result + 32) = v66;
    v20 = v67;
    *(_DWORD *)(result + 48) = v68;
    *(_QWORD *)(result + 40) = v20;
    v13 = 1;
  }
  v21 = *(_QWORD *)a2;
  v22 = *(_DWORD *)(a2 + 16);
  if (v65 != (int32x2_t ****)-8192 && v65 != (int32x2_t ****)-4096 && v65)
  {
    v23 = v63 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF8) = v64;
    if (v64)
    {
      *v64 = *v64 & 7 | v23;
    }
    else
    {
      v24 = v65;
      v25 = ***v65;
      v26 = (unint64_t)v25[303];
      if (v26 <= v23)
      {
        v27 = v25[305].u32[0];
        if (v26 + 16 * v27 > v23)
        {
          v28 = v27 - 1;
          LODWORD(v29) = v28 & ((v65 >> 4) ^ (v65 >> 9));
          v30 = (int32x2_t *****)(v26 + 16 * v29);
          v31 = *v30;
          if (v65 == *v30)
          {
LABEL_37:
            *v30 = (int32x2_t ****)-8192;
            v25[304] = vadd_s32(v25[304], (int32x2_t)0x1FFFFFFFFLL);
            v24 = v65;
          }
          else
          {
            v32 = 1;
            while (v31 != (int32x2_t ****)-4096)
            {
              v33 = v29 + v32++;
              v29 = v33 & v28;
              v31 = *(int32x2_t *****)(v26 + 16 * v29);
              if (v65 == v31)
              {
                v30 = (int32x2_t *****)(v26 + 16 * v29);
                goto LABEL_37;
              }
            }
          }
          *((_BYTE *)v24 + 17) &= ~1u;
        }
      }
    }
  }
  if (v60 != (int32x2_t ****)-8192 && v60 != (int32x2_t ****)-4096 && v60 != 0)
  {
    v47 = v58 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF8) = v59;
    if (v59)
    {
      *v59 = *v59 & 7 | v47;
    }
    else
    {
      v48 = v60;
      v49 = ***v60;
      v50 = (unint64_t)v49[303];
      if (v50 <= v47)
      {
        v51 = v49[305].u32[0];
        if (v50 + 16 * v51 > v47)
        {
          v52 = v51 - 1;
          LODWORD(v53) = v52 & ((v60 >> 4) ^ (v60 >> 9));
          v54 = (int32x2_t *****)(v50 + 16 * v53);
          v55 = *v54;
          if (v60 == *v54)
          {
LABEL_67:
            *v54 = (int32x2_t ****)-8192;
            v49[304] = vadd_s32(v49[304], (int32x2_t)0x1FFFFFFFFLL);
            v48 = v60;
          }
          else
          {
            v56 = 1;
            while (v55 != (int32x2_t ****)-4096)
            {
              v57 = v53 + v56++;
              v53 = v57 & v52;
              v55 = *(int32x2_t *****)(v50 + 16 * v53);
              if (v60 == v55)
              {
                v54 = (int32x2_t *****)(v50 + 16 * v53);
                goto LABEL_67;
              }
            }
          }
          *((_BYTE *)v48 + 17) &= ~1u;
        }
      }
    }
  }
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v21 + 56 * v22;
  *(_BYTE *)(a1 + 16) = v13;
  return result;
}

uint64_t sub_1C5BBC160(char **a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  int32x2_t *v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t v44;
  int32x2_t *v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _QWORD *v58;

  v57 = a3;
  v5 = *((_DWORD *)a1 + 2);
  v6 = *((_DWORD *)a1 + 4);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v7 = 2 * v6;
  }
  else
  {
    v7 = *((_DWORD *)a1 + 4);
    if (v6 + ~v5 - *((_DWORD *)a1 + 3) > v6 >> 3)
      goto LABEL_3;
  }
  v9 = (uint64_t)*a1;
  v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40)
    v13 = v12 + 1;
  else
    v13 = 64;
  *((_DWORD *)a1 + 4) = v13;
  v14 = (char *)operator new(56 * v13, (std::align_val_t)8uLL);
  *a1 = v14;
  if (v9)
  {
    a1[1] = 0;
    v15 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v15)
    {
      v16 = 56 * v15;
      v17 = v14 + 16;
      do
      {
        *v17 = 0;
        v17[1] = -4096;
        *(v17 - 2) = &off_1E8196688;
        *(v17 - 1) = 2;
        v17[2] = 0;
        v17 += 7;
        v16 -= 56;
      }
      while (v16);
    }
    if (v6)
    {
      v18 = v9 + 56 * v6;
      v19 = v9;
      do
      {
        v20 = *(_QWORD *)(v19 + 24);
        if ((v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v58 = 0;
          sub_1C5BBBB34((uint64_t)*a1, *((_DWORD *)a1 + 4), v20, &v58);
          v21 = v58;
          v22 = v58[3];
          v23 = *(_QWORD *)(v19 + 24);
          if (v22 != v23)
          {
            v24 = v22 == -4096 || v22 == 0;
            if (!v24 && v22 != -8192)
            {
              v42 = v58[1] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v42 = v58[2];
              v43 = (unint64_t *)v21[2];
              if (v43)
              {
                *v43 = *v43 & 7 | v42;
              }
              else
              {
                v44 = v21[3];
                v45 = ***(int32x2_t ****)v44;
                v46 = (unint64_t)v45[303];
                if (v46 <= v42)
                {
                  v47 = v45[305].u32[0];
                  if (v46 + 16 * v47 > v42)
                  {
                    v48 = v47 - 1;
                    LODWORD(v49) = v48 & ((v44 >> 4) ^ (v44 >> 9));
                    v50 = (uint64_t *)(v46 + 16 * v49);
                    v51 = *v50;
                    if (v44 == *v50)
                    {
LABEL_59:
                      *v50 = -8192;
                      v45[304] = vadd_s32(v45[304], (int32x2_t)0x1FFFFFFFFLL);
                      v44 = v21[3];
                    }
                    else
                    {
                      v52 = 1;
                      while (v51 != -4096)
                      {
                        v53 = v49 + v52++;
                        v49 = v53 & v48;
                        v51 = *(_QWORD *)(v46 + 16 * v49);
                        if (v44 == v51)
                        {
                          v50 = (uint64_t *)(v46 + 16 * v49);
                          goto LABEL_59;
                        }
                      }
                    }
                    *(_BYTE *)(v44 + 17) &= ~1u;
                  }
                }
              }
              v23 = *(_QWORD *)(v19 + 24);
            }
            v21[3] = v23;
            if (v23 != -4096 && v23 != -8192 && v23 != 0)
            {
              v26 = *(_QWORD *)(v19 + 8);
              v21[2] = *(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF8);
              *(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF8) = v21 + 1;
              v21[1] = v26 & 0xFFFFFFFFFFFFFFF8 | v21[1] & 7;
              v27 = (uint64_t *)v21[2];
              if (v27)
                *v27 = *v27 & 7 | (unint64_t)(v21 + 2);
            }
          }
          v21[4] = *(_QWORD *)(v19 + 32);
          v28 = *(_QWORD *)(v19 + 40);
          *((_DWORD *)v21 + 12) = *(_DWORD *)(v19 + 48);
          v21[5] = v28;
          ++*((_DWORD *)a1 + 2);
          v20 = *(_QWORD *)(v19 + 24);
        }
        if (v20 != -8192 && v20 != -4096 && v20 != 0)
        {
          v30 = *(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v30 = *(_QWORD *)(v19 + 16);
          v31 = *(unint64_t **)(v19 + 16);
          if (v31)
          {
            *v31 = *v31 & 7 | v30;
          }
          else
          {
            v32 = *(_QWORD *)(v19 + 24);
            v33 = ***(int32x2_t ****)v32;
            v34 = (unint64_t)v33[303];
            if (v34 <= v30)
            {
              v35 = v33[305].u32[0];
              if (v34 + 16 * v35 > v30)
              {
                v36 = v35 - 1;
                LODWORD(v37) = v36 & ((v32 >> 4) ^ (v32 >> 9));
                v38 = (uint64_t *)(v34 + 16 * v37);
                v39 = *v38;
                if (v32 == *v38)
                {
LABEL_47:
                  *v38 = -8192;
                  v33[304] = vadd_s32(v33[304], (int32x2_t)0x1FFFFFFFFLL);
                  v32 = *(_QWORD *)(v19 + 24);
                }
                else
                {
                  v40 = 1;
                  while (v39 != -4096)
                  {
                    v41 = v37 + v40++;
                    v37 = v41 & v36;
                    v39 = *(_QWORD *)(v34 + 16 * v37);
                    if (v32 == v39)
                    {
                      v38 = (uint64_t *)(v34 + 16 * v37);
                      goto LABEL_47;
                    }
                  }
                }
                *(_BYTE *)(v32 + 17) &= ~1u;
              }
            }
          }
        }
        v19 += 56;
      }
      while (v19 != v18);
    }
    MEMORY[0x1CAA32FB4](v9, 8);
    v14 = *a1;
    LODWORD(v54) = *((_DWORD *)a1 + 4);
  }
  else
  {
    a1[1] = 0;
    v54 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v54)
    {
      v55 = 0;
      do
      {
        v56 = &v14[v55];
        *((_QWORD *)v56 + 2) = 0;
        *((_QWORD *)v56 + 3) = -4096;
        *(_QWORD *)v56 = &off_1E8196688;
        *((_QWORD *)v56 + 1) = 2;
        v55 += 56;
        *((_QWORD *)v56 + 4) = 0;
      }
      while (56 * v54 != v55);
    }
  }
  sub_1C5BBBB34((uint64_t)v14, v54, *(_QWORD *)(a2 + 24), &v57);
  v5 = *((_DWORD *)a1 + 2);
  a3 = v57;
LABEL_3:
  *((_DWORD *)a1 + 2) = v5 + 1;
  if (*(_QWORD *)(a3 + 24) != -4096)
    --*((_DWORD *)a1 + 3);
  return a3;
}

uint64_t sub_1C5BBC59C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[2];
  int v14;

  if (*(unsigned __int8 *)(a2 + 16) - 11 < 2)
    return 0;
  result = sub_1C5BBC6B8(a2);
  if (!(_DWORD)result)
    return result;
  v10 = *(_QWORD *)(a1 + 56);
  v9 = a1 + 56;
  v13[0] = 0;
  if (sub_1C5BBBB34(v10, *(_DWORD *)(v9 + 16), a2, v13)
    && v13[0] != *(_QWORD *)v9 + 56 * *(unsigned int *)(v9 + 16))
  {
    return 0;
  }
  v13[0] = a2;
  v13[1] = a3;
  v14 = a4;
  sub_1C5BBBCD4((uint64_t)&v12, v9, (uint64_t)v13);
  return 1;
}

BOOL sub_1C5BBC64C(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;

  result = sub_1C57A1C20(a1, a2);
  if (result)
  {
    result = 0;
    if (a2)
    {
      if (*(_BYTE *)(a2 + 16) == 84)
      {
        v5 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 40));
        if (v5)
        {
          **(_QWORD **)(a1 + 48) = v5;
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C5BBC6B8(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;

  v1 = 0;
  if (a1)
  {
    v2 = *(unsigned __int8 *)(a1 + 16);
    if (v2 >= 0x1C)
    {
      if (v2 == 84)
      {
        v3 = *(_QWORD *)(a1 - 32);
        if (v3
          && !*(_BYTE *)(v3 + 16)
          && *(_QWORD *)(v3 + 24) == *(_QWORD *)(a1 + 72)
          && (*(_BYTE *)(v3 + 33) & 0x20) != 0)
        {
          return (*(_DWORD *)(v3 + 36) & 0xFFFFFFFC) == 188;
        }
      }
      else if (v2 - 40 < 7)
      {
        return 1;
      }
      return (v2 & 0xFE) == 60;
    }
  }
  return v1;
}

void sub_1C5BBC734(uint64_t a1, uint64_t a2, llvm::PoisonValue **a3, uint64_t a4, uint64_t a5)
{
  llvm::PoisonValue **v6;
  llvm::PoisonValue *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::PoisonValue **v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  llvm::PoisonValue ****v19;
  int v20;
  _DWORD *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  void *v30;
  uint64_t v31;
  llvm::Type *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _BYTE *v38;
  const char *v40;
  __int16 v41;
  void *v42;
  unsigned int v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _QWORD v47[18];

  v6 = a3;
  v47[16] = *MEMORY[0x1E0C80C00];
  if ((*((_DWORD *)*a3 + 2) & 0xFE) == 0x12)
    v8 = *a3;
  else
    v8 = 0;
  v9 = *(_QWORD *)(a2 + 264);
  v10 = *(unsigned int *)(a2 + 280);
  if (!(_DWORD)v10)
  {
LABEL_10:
    v12 = v9 + 16 * v10;
    goto LABEL_11;
  }
  LODWORD(v11) = (v10 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v12 = v9 + 16 * v11;
  v13 = *(llvm::PoisonValue ***)v12;
  if (*(llvm::PoisonValue ***)v12 != a3)
  {
    v14 = 1;
    while (v13 != (llvm::PoisonValue **)-4096)
    {
      v15 = v11 + v14++;
      v11 = v15 & (v10 - 1);
      v13 = *(llvm::PoisonValue ***)(v9 + 16 * v11);
      if (v13 == a3)
      {
        v12 = v9 + 16 * v11;
        goto LABEL_11;
      }
    }
    goto LABEL_10;
  }
LABEL_11:
  if (v12 == v9 + 16 * v10)
    goto LABEL_25;
  v16 = *(_DWORD *)(v12 + 8);
  v17 = *(_QWORD *)(a2 + 288);
  if (v17 + 176 * v16 == *(_QWORD *)(a2 + 296))
    goto LABEL_25;
  v18 = v17 + 176 * v16;
  v19 = (llvm::PoisonValue ****)(v18 + 8);
  v20 = *(_DWORD *)a4;
  if (*(_BYTE *)(v18 + 168))
  {
    if (v20 == *((_DWORD *)***v19 + 8))
    {
      v21 = (_DWORD *)(v17 + 176 * v16 + 16);
      goto LABEL_18;
    }
  }
  else if (v20 == *(_DWORD *)(v17 + 176 * v16 + 16))
  {
    v21 = (_DWORD *)((char *)***v19 + 32);
LABEL_18:
    if (*(_DWORD *)(a4 + 4) == *v21)
    {
      *(_QWORD *)a1 = a1 + 16;
      *(_QWORD *)(a1 + 8) = 0x1000000000;
      if (*(_DWORD *)(v17 + 176 * v16 + 16))
        sub_1C49EEBE4(a1, (uint64_t)v19);
      v22 = v17 + 176 * v16;
      v23 = *(_OWORD *)(v22 + 152);
      *(_BYTE *)(a1 + 160) = *(_BYTE *)(v22 + 168);
      *(_OWORD *)(a1 + 144) = v23;
      return;
    }
  }
  v24 = *(unsigned int *)(v17 + 176 * v16 + 16);
  if ((_DWORD)v24 == 1)
    v6 = **v19;
  else
    v6 = (llvm::PoisonValue **)llvm::concatenateVectors(a5, *v19, v24);
LABEL_25:
  v45 = v47;
  v46 = 0x1000000000;
  if (*((_DWORD *)v8 + 8))
  {
    v25 = 0;
    v26 = *(unsigned __int8 *)(a4 + 8);
    v28 = *(_DWORD *)a4;
    v27 = *(_DWORD *)(a4 + 4);
    do
    {
      if (v26)
        v29 = v28;
      else
        v29 = v27;
      llvm::createSequentialMask((void *)v25, v29, 0, (uint64_t)&v42);
      v30 = v42;
      v31 = v43;
      v40 = "split";
      v41 = 259;
      v33 = llvm::PoisonValue::get(*v6, v32);
      v34 = sub_1C486AD20(a5, (uint64_t)v6, (uint64_t)v33, v30, v31, (uint64_t)&v40);
      if (v42 != &v44)
        free(v42);
      v35 = v46;
      if (v46 >= (unint64_t)HIDWORD(v46))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, (uint64_t)v47, v46 + 1, 8);
        v35 = v46;
      }
      *((_QWORD *)v45 + v35) = v34;
      v36 = (v46 + 1);
      LODWORD(v46) = v46 + 1;
      v26 = *(unsigned __int8 *)(a4 + 8);
      v28 = *(_DWORD *)a4;
      v27 = *(_DWORD *)(a4 + 4);
      if (*(_BYTE *)(a4 + 8))
        v37 = *(_DWORD *)a4;
      else
        v37 = *(_DWORD *)(a4 + 4);
      v25 = (v37 + v25);
    }
    while (v25 < *((_DWORD *)v8 + 8));
    v38 = v45;
  }
  else
  {
    v36 = 0;
    v38 = v47;
  }
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x1000000000;
  sub_1C4FA6FB8((unsigned int *)a1, v38, &v38[8 * v36]);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = dword_1ED821DA8 == 0;
  if (v45 != v47)
    free(v45);
}

uint64_t sub_1C5BBCA8C(uint64_t a1, unsigned int a2, unsigned int a3, llvm::FixedVectorType *this)
{
  uint64_t v5;
  BOOL v6;
  unsigned int v7;
  unint64_t v11;
  llvm::UndefValue *v12;
  llvm::Type *v13;
  llvm::UndefValue *v14;
  unint64_t v15;

  v5 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x1000000000;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  v6 = dword_1ED821DA8 == 0;
  *(_BYTE *)(a1 + 160) = dword_1ED821DA8 == 0;
  if (v6)
    v7 = a3;
  else
    v7 = a2;
  for (; v7; --v7)
  {
    if (*(_BYTE *)(a1 + 160))
      v11 = a2;
    else
      v11 = a3;
    llvm::FixedVectorType::get(this, (llvm::Type *)v11);
    v14 = llvm::UndefValue::get(v12, v13);
    v15 = *(unsigned int *)(a1 + 8);
    if (v15 >= *(unsigned int *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, v5, v15 + 1, 8);
      v15 = *(unsigned int *)(a1 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v14;
    ++*(_DWORD *)(a1 + 8);
  }
  return a1;
}

unint64_t sub_1C5BBCB68(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, unsigned int a8)
{
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t result;
  unint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int *v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  llvm::PoisonValue **v26;
  unsigned int i;
  const llvm::APInt *v28;
  uint64_t *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::ConstantInt *v34;
  unint64_t v35;
  unint64_t v36;
  llvm::ValueHandleBase *v37;
  unsigned __int8 *v38;
  uint64_t VectorSplat;
  BOOL v40;
  uint64_t *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  llvm::PoisonValue **v47;
  const llvm::APInt *v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  llvm::ConstantInt *v54;
  unint64_t v55;
  unint64_t v56;
  llvm::ValueHandleBase *v57;
  unsigned __int8 *v58;
  uint64_t *v59;
  BOOL v60;
  uint64_t *v61;
  unsigned int v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t **v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t j;
  uint64_t v76;
  unsigned int v79;
  _QWORD v80[4];
  __int16 v81;
  int v82;
  unint64_t v83;
  unsigned int v84;

  v12 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 16) + 696))(**(_QWORD **)(a1 + 16), 1);
  v13 = (uint64_t *)**a2;
  v14 = *v13;
  v15 = *(unsigned __int8 **)(*v13 + 24);
  result = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v15);
  v17 = v12 / result;
  if ((v12 / result) <= 1)
    LODWORD(v17) = 1;
  v62 = v17;
  if (*((_BYTE *)a2 + 160))
    v18 = (unsigned int *)(v14 + 32);
  else
    v18 = (unsigned int *)(a2 + 1);
  v19 = *v18;
  if (*((_BYTE *)a2 + 160))
    v20 = (unsigned int *)(a2 + 1);
  else
    v20 = (unsigned int *)(v14 + 32);
  v21 = *v20;
  v79 = a8;
  v76 = a3;
  v65 = v19;
  v66 = a2;
  v64 = *v20;
  if (*(_BYTE *)(a3 + 160))
  {
    v71 = *(_DWORD *)(a3 + 8);
    v67 = v15[8];
    v82 = 0;
    *(_DWORD *)(a5 + 96) = a8;
    if (v21)
    {
      v73 = 0;
      do
      {
        if ((_DWORD)v19)
        {
          v22 = 0;
          v69 = *(unsigned __int8 *)((*v66)[v73] + 16);
          v23 = v62;
          do
          {
            v24 = v23;
            do
            {
              v23 = v24;
              v25 = v24 + v22;
              v24 = v24 >> 1;
            }
            while (v25 > v19);
            if (a6)
              v26 = (llvm::PoisonValue **)sub_1C5BBD43C((uint64_t)*v66, *((_BYTE *)v66 + 160), v22, v73, v23, a5);
            else
              v26 = 0;
            if (v71)
            {
              for (i = 0; i != v71; ++i)
              {
                v29 = (uint64_t *)sub_1C5BBD43C(*(_QWORD *)a3, *(_BYTE *)(a3 + 160), v22, i, v23, a5);
                if (a7)
                  v30 = i;
                else
                  v30 = v73;
                v31 = *(_QWORD *)(*(_QWORD *)a4 + 8 * v30);
                if (a7)
                  v32 = v73;
                else
                  v32 = i;
                v81 = 257;
                v33 = **(_QWORD **)(a5 + 64);
                v34 = *(llvm::ConstantInt **)(v33 + 1984);
                v35 = *(unsigned int *)(v33 + 1992);
                v84 = v35 >> 8;
                if (v35 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v83, v32, 0);
                }
                else
                {
                  if (v35 <= 0xFF)
                    v36 = 0;
                  else
                    v36 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v35);
                  v83 = v36 & v32;
                }
                v37 = llvm::ConstantInt::get(v34, (llvm::LLVMContext *)&v83, v28);
                if (v84 >= 0x41 && v83)
                  MEMORY[0x1CAA32F9C](v83, 0x1000C8000313F17);
                v38 = sub_1C4772EE0((uint64_t *)a5, v31, (uint64_t)v37, (uint64_t)v80);
                v80[0] = "splat";
                v81 = 259;
                VectorSplat = llvm::IRBuilderBase::CreateVectorSplat(a5, (llvm::Type *)v23, (uint64_t ***)v38, (uint64_t)v80);
                if (i)
                  v40 = 0;
                else
                  v40 = v69 == 13;
                if (v40)
                  v41 = 0;
                else
                  v41 = (uint64_t *)v26;
                v26 = (llvm::PoisonValue **)sub_1C5BBD520(a1, v41, v29, VectorSplat, v67 < 7, a5, (v79 >> 5) & 1, &v82);
                a3 = v76;
              }
            }
            result = sub_1C5BBD7D4((*v66)[v73], v22, v26, a5);
            (*v66)[v73] = result;
            v22 = v25;
            LODWORD(v19) = v65;
          }
          while (v25 < v65);
        }
        ++v73;
      }
      while (v73 != v64);
    }
  }
  else
  {
    v72 = *(_DWORD *)(***(_QWORD ***)a3 + 32);
    v68 = v15[8];
    v82 = 0;
    *(_DWORD *)(a5 + 96) = a8;
    if ((_DWORD)v19)
    {
      for (j = 0; j != v19; ++j)
      {
        if ((_DWORD)v64)
        {
          v42 = 0;
          v70 = *(unsigned __int8 *)((*v66)[j] + 16);
          v43 = v62;
          do
          {
            v44 = v43;
            do
            {
              v43 = v44;
              v45 = v44 + v42;
              v44 = v44 >> 1;
            }
            while (v45 > v64);
            if (v72)
            {
              v46 = 0;
              v47 = 0;
              do
              {
                v49 = sub_1C5BBD43C(*(_QWORD *)a4, *(_BYTE *)(a4 + 160), v46, v42, v43, a5);
                if (a7)
                  v50 = v46;
                else
                  v50 = j;
                v51 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v50);
                if (a7)
                  v52 = j;
                else
                  v52 = v46;
                v81 = 257;
                v53 = **(_QWORD **)(a5 + 64);
                v54 = *(llvm::ConstantInt **)(v53 + 1984);
                v55 = *(unsigned int *)(v53 + 1992);
                v84 = v55 >> 8;
                if (v55 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v83, v52, 0);
                }
                else
                {
                  if (v55 <= 0xFF)
                    v56 = 0;
                  else
                    v56 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v55);
                  v83 = v56 & v52;
                }
                v57 = llvm::ConstantInt::get(v54, (llvm::LLVMContext *)&v83, v48);
                if (v84 >= 0x41 && v83)
                  MEMORY[0x1CAA32F9C](v83, 0x1000C8000313F17);
                v58 = sub_1C4772EE0((uint64_t *)a5, v51, (uint64_t)v57, (uint64_t)v80);
                v80[0] = "splat";
                v81 = 259;
                v59 = (uint64_t *)llvm::IRBuilderBase::CreateVectorSplat(a5, (llvm::Type *)v43, (uint64_t ***)v58, (uint64_t)v80);
                if (v46)
                  v60 = 0;
                else
                  v60 = v70 == 13;
                if (v60)
                  v61 = 0;
                else
                  v61 = (uint64_t *)v47;
                v47 = (llvm::PoisonValue **)sub_1C5BBD520(a1, v61, v59, v49, v68 < 7, a5, (v79 >> 5) & 1, &v82);
                ++v46;
                a3 = v76;
              }
              while (v72 != v46);
            }
            else
            {
              v47 = 0;
            }
            result = sub_1C5BBD7D4((*v66)[j], v42, v47, a5);
            (*v66)[j] = result;
            v42 = v45;
            v19 = v65;
          }
          while (v45 < v64);
        }
      }
    }
  }
  *((_DWORD *)v66 + 38) += v82;
  return result;
}

uint64_t sub_1C5BBD100(uint64_t a1)
{
  int v2;

  v2 = sub_1C4774A9C(a1);
  if (v2)
  {
    if (*(unsigned __int8 *)(a1 + 17) >> 1 == 127)
      v2 = -1;
    else
      v2 = *(unsigned __int8 *)(a1 + 17) >> 1;
  }
  return v2 & 0xFFFFFFDF | (32 * ((byte_1ED821CE8 | v2 & 0x20) != 0));
}

void sub_1C5BBD150(uint64_t a1, uint64_t a2, _BYTE **a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _BYTE v33[49];
  __int128 v34;
  char v35;
  uint64_t v36;
  void *v37;
  unint64_t v38;
  _OWORD v39[9];
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v8 = a1 + 264;
  v30 = a2;
  v31 = v33;
  v32 = 0x1000000000;
  if (*((_DWORD *)a3 + 2))
  {
    sub_1C49EEBE4((uint64_t)&v31, (uint64_t)a3);
    v10 = v30;
    v9 = v32;
  }
  else
  {
    v9 = 0;
    v10 = a2;
  }
  v34 = *((_OWORD *)a3 + 9);
  v35 = *((_BYTE *)a3 + 160);
  v36 = v10;
  v37 = v39;
  v38 = 0x1000000000;
  if (v9)
  {
    if (v31 != v33)
    {
      v37 = v31;
      v38 = __PAIR64__(HIDWORD(v32), v9);
      v31 = v33;
      HIDWORD(v32) = 0;
      goto LABEL_10;
    }
    v11 = v9;
    if (v9 >= 0x11)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, (uint64_t)v39, v9, 8);
      v11 = v32;
      if (!(_DWORD)v32)
        goto LABEL_9;
      v13 = v31;
      v12 = v37;
    }
    else
    {
      v12 = v39;
      v13 = v33;
    }
    memcpy(v12, v13, 8 * v11);
LABEL_9:
    LODWORD(v38) = v9;
    v10 = v36;
LABEL_10:
    LODWORD(v32) = 0;
  }
  v39[8] = v34;
  v40 = v35;
  v28 = v10;
  v29 = 0;
  sub_1C6245320(v8, &v28, &v29, (uint64_t)&v26);
  if (v27)
  {
    v14 = v26;
    sub_1C5BBDA9C((char **)(a1 + 288), (uint64_t)&v36);
    *(_DWORD *)(v14 + 8) = -1171354717 * ((*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 4) - 1;
  }
  if (v37 != v39)
    free(v37);
  if (v31 != v33)
    free(v31);
  v15 = *(unsigned int *)(a1 + 128);
  if (v15 >= *(_DWORD *)(a1 + 132))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 120, a1 + 136, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a1 + 128);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v15) = a2;
  ++*(_DWORD *)(a1 + 128);
  v16 = *(_QWORD *)(a2 + 8);
  if (v16)
  {
    v17 = 0;
    do
    {
      v18 = v16;
      v19 = (_QWORD *)(v16 + 8);
      v16 = *(_QWORD *)(v16 + 8);
      v20 = v19[2];
      v36 = 0;
      if (sub_1C5BBBB34(*(_QWORD *)(a1 + 56), *(_DWORD *)(a1 + 72), v20, &v36))
        v21 = v36 == *(_QWORD *)(a1 + 56) + 56 * *(unsigned int *)(a1 + 72);
      else
        v21 = 1;
      if (v21)
      {
        if (!v17)
        {
          v22 = *((unsigned int *)a3 + 2);
          if ((_DWORD)v22 == 1)
            v17 = *(_QWORD *)*a3;
          else
            v17 = llvm::concatenateVectors(a4, *a3, v22);
        }
        if (*(_QWORD *)v18)
        {
          **(_QWORD **)(v18 + 16) = *(_QWORD *)(v18 + 8);
          v23 = *(_QWORD *)(v18 + 8);
          if (v23)
            *(_QWORD *)(v23 + 16) = *(_QWORD *)(v18 + 16);
        }
        *(_QWORD *)v18 = v17;
        if (v17)
        {
          v24 = (_QWORD *)(v17 + 8);
          v25 = *(_QWORD *)(v17 + 8);
          *v19 = v25;
          if (v25)
            *(_QWORD *)(v25 + 16) = v19;
          *(_QWORD *)(v18 + 16) = v24;
          *v24 = v18;
        }
      }
    }
    while (v16);
  }
}

uint64_t sub_1C5BBD43C(uint64_t a1, char a2, unsigned int a3, unsigned int a4, int a5, uint64_t a6)
{
  unsigned int v7;
  unint64_t v8;
  llvm::PoisonValue **v9;
  void *v10;
  uint64_t v11;
  llvm::Type *v12;
  _QWORD *v13;
  uint64_t v14;
  const char *v16;
  __int16 v17;
  void *v18;
  unsigned int v19;
  _QWORD v20[9];

  v20[8] = *MEMORY[0x1E0C80C00];
  if (a2)
    v7 = a4;
  else
    v7 = a3;
  if (a2)
    v8 = a3;
  else
    v8 = a4;
  v9 = *(llvm::PoisonValue ***)(a1 + 8 * v7);
  llvm::createSequentialMask((void *)v8, a5, 0, (uint64_t)&v18);
  v10 = v18;
  v11 = v19;
  v16 = "block";
  v17 = 259;
  v13 = llvm::PoisonValue::get(*v9, v12);
  v14 = sub_1C486AD20(a6, (uint64_t)v9, (uint64_t)v13, v10, v11, (uint64_t)&v16);
  if (v18 != v20)
    free(v18);
  return v14;
}

uint64_t sub_1C5BBD520(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, int a5, uint64_t a6, int a7, _DWORD *a8)
{
  uint64_t *v16;
  uint64_t Declaration;
  uint64_t **v18;
  uint64_t result;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[4];
  __int16 v32;
  uint64_t v33[4];
  __int16 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  *a8 += sub_1C5BBDA28(a1, *a3);
  if (a2)
  {
    if (a5)
    {
      if (a7)
      {
        v16 = *(uint64_t **)(*(_QWORD *)a1 + 40);
        v31[0] = *a3;
        Declaration = llvm::Intrinsic::getDeclaration(v16, 143, v31, 1);
        if (Declaration)
          v18 = *(uint64_t ***)(Declaration + 24);
        else
          v18 = 0;
        v33[0] = (uint64_t)a3;
        v33[1] = a4;
        v33[2] = (uint64_t)a2;
        v32 = 257;
        return sub_1C4774778((uint64_t *)a6, v18, Declaration, v33, 3, (uint64_t)v31, 0);
      }
      else
      {
        *a8 += sub_1C5BBDA28(a1, *a3);
        v32 = 257;
        v30 = sub_1C4772428(a6, a3, a4, (uint64_t)v31, 0);
        v32 = 257;
        return sub_1C534554C(a6, a2, v30, (uint64_t)v31, 0);
      }
    }
    else
    {
      *a8 += sub_1C5BBDA28(a1, *a3);
      v32 = 257;
      v20 = sub_1C4EC4040(a6, (uint64_t)a3, a4, (uint64_t)v31, 0, 0);
      v34 = 257;
      result = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a6 + 72) + 16))(*(_QWORD *)(a6 + 72), a2, v20, 0, 0);
      if (!result)
      {
        v32 = 257;
        v21 = (char *)operator new(0x80uLL);
        *((_QWORD *)v21 + 8) = *a2;
        v22 = (uint64_t)(v21 + 64);
        *((_QWORD *)v21 + 3) = v21 + 64;
        *((_QWORD *)v21 + 5) = 0;
        v23 = v21 + 40;
        *((_QWORD *)v21 + 6) = 0;
        *((_QWORD *)v21 + 7) = v21 + 64;
        *((_QWORD *)v21 + 9) = 0;
        *((_QWORD *)v21 + 10) = 0x200000029;
        *(_OWORD *)(v21 + 88) = 0u;
        *(_OWORD *)(v21 + 104) = 0u;
        *((_DWORD *)v21 + 30) = 0;
        *(_QWORD *)v21 = a2;
        v26 = a2[1];
        v25 = a2 + 1;
        v24 = v26;
        *((_QWORD *)v21 + 1) = v26;
        if (v26)
          *(_QWORD *)(v24 + 16) = v21 + 8;
        *((_QWORD *)v21 + 2) = v25;
        *v25 = v21;
        *((_QWORD *)v21 + 4) = v20;
        if (v20)
        {
          v29 = *(_QWORD *)(v20 + 8);
          v28 = (_QWORD *)(v20 + 8);
          v27 = v29;
          *v23 = v29;
          if (v29)
            *(_QWORD *)(v27 + 16) = v23;
          *((_QWORD *)v21 + 6) = v28;
          *v28 = v21 + 32;
        }
        llvm::Value::setName((uint64_t ***)v21 + 8, (uint64_t)v31);
        return sub_1C4773754((uint64_t *)a6, v22, (uint64_t)v33);
      }
    }
  }
  else if (a5)
  {
    v32 = 257;
    return sub_1C4772428(a6, a3, a4, (uint64_t)v31, 0);
  }
  else
  {
    v34 = 257;
    return sub_1C4EC4040(a6, (uint64_t)a3, a4, (uint64_t)v33, 0, 0);
  }
  return result;
}

uint64_t sub_1C5BBD7D4(uint64_t a1, unsigned int a2, llvm::PoisonValue **a3, uint64_t a4)
{
  int v8;
  void *v9;
  uint64_t v10;
  llvm::Type *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  _BYTE v21[32];
  __int16 v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[9];

  v25[8] = *MEMORY[0x1E0C80C00];
  v8 = *((_DWORD *)*a3 + 8);
  llvm::createSequentialMask(0, v8, *(_DWORD *)(*(_QWORD *)a1 + 32) - v8, (uint64_t)&v23);
  v9 = v23;
  v10 = v24;
  v22 = 257;
  v12 = llvm::PoisonValue::get(*a3, v11);
  v13 = sub_1C486AD20(a4, (uint64_t)a3, (uint64_t)v12, v9, v10, (uint64_t)v21);
  if (v23 != v25)
    free(v23);
  v23 = v25;
  v24 = 0x1000000000;
  v14 = 0;
  if (a2)
  {
    v15 = 0;
    do
    {
      if (v14 >= HIDWORD(v24))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, (uint64_t)v25, v14 + 1, 4);
        v14 = v24;
      }
      *((_DWORD *)v23 + v14) = v15;
      v14 = v24 + 1;
      LODWORD(v24) = v24 + 1;
      ++v15;
    }
    while (a2 != v15);
  }
  v16 = *(_DWORD *)(*(_QWORD *)a1 + 32);
  v17 = v8 + a2;
  if (v8 + a2 > a2)
  {
    v18 = *(_DWORD *)(*(_QWORD *)a1 + 32);
    do
    {
      if (v14 >= HIDWORD(v24))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, (uint64_t)v25, v14 + 1, 4);
        v14 = v24;
      }
      *((_DWORD *)v23 + v14) = v18;
      v14 = v24 + 1;
      LODWORD(v24) = v24 + 1;
      ++v18;
      --v8;
    }
    while (v8);
    a2 = v17;
  }
  if (a2 < v16)
  {
    do
    {
      if (v14 >= HIDWORD(v24))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, (uint64_t)v25, v14 + 1, 4);
        v14 = v24;
      }
      *((_DWORD *)v23 + v14) = a2;
      v14 = v24 + 1;
      LODWORD(v24) = v24 + 1;
      ++a2;
    }
    while (v16 != a2);
  }
  v22 = 257;
  v19 = sub_1C486AD20(a4, a1, v13, v23, v14, (uint64_t)v21);
  if (v23 != v25)
    free(v23);
  return v19;
}

unsigned int sub_1C5BBDA28(uint64_t a1, uint64_t a2)
{
  llvm::Type *v3;
  uint64_t v4;
  double v5;

  v3 = (llvm::Type *)a2;
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
    v3 = **(llvm::Type ***)(a2 + 16);
  v4 = *(unsigned int *)(a2 + 32);
  v5 = (double)(llvm::Type::getPrimitiveSizeInBits(v3) * v4);
  return vcvtpd_u64_f64(v5/ (double)(unint64_t)(*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 16) + 696))(**(_QWORD **)(a1 + 16), 1));
}

void sub_1C5BBDA9C(char **a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  void *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  __int128 v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  void *v21;
  void **v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  unsigned int v31;
  BOOL v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  char *v37;
  char *v38;
  int v39;
  int v40;
  char *v41;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = *(_QWORD *)a2;
    v6 = v5 + 24;
    *((_QWORD *)v5 + 1) = v5 + 24;
    *((_QWORD *)v5 + 2) = 0x1000000000;
    v7 = *(_DWORD *)(a2 + 16);
    if (v7)
      v8 = v5 == (char *)a2;
    else
      v8 = 1;
    if (v8)
      goto LABEL_12;
    v9 = *(_QWORD *)(a2 + 8);
    v10 = (const void *)(a2 + 24);
    if (v9 != a2 + 24)
    {
      *((_QWORD *)v5 + 1) = v9;
      v39 = *(_DWORD *)(a2 + 20);
      *((_DWORD *)v5 + 4) = v7;
      *((_DWORD *)v5 + 5) = v39;
      *(_QWORD *)(a2 + 8) = v10;
      *(_DWORD *)(a2 + 20) = 0;
      goto LABEL_11;
    }
    if (v7 >= 0x11)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v5 + 8), (uint64_t)(v5 + 24), *(unsigned int *)(a2 + 16), 8);
      v11 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v11)
        goto LABEL_10;
      v10 = *(const void **)(a2 + 8);
      v6 = (void *)*((_QWORD *)v5 + 1);
    }
    else
    {
      v11 = *(unsigned int *)(a2 + 16);
    }
    memcpy(v6, v10, 8 * v11);
LABEL_10:
    *((_DWORD *)v5 + 4) = v7;
LABEL_11:
    *(_DWORD *)(a2 + 16) = 0;
LABEL_12:
    v12 = *(_OWORD *)(a2 + 152);
    v5[168] = *(_BYTE *)(a2 + 168);
    *(_OWORD *)(v5 + 152) = v12;
    v13 = v5 + 176;
    goto LABEL_55;
  }
  v14 = *a1;
  v15 = 0x2E8BA2E8BA2E8BA3 * ((v5 - *a1) >> 4);
  v16 = v15 + 1;
  if ((unint64_t)(v15 + 1) > 0x1745D1745D1745DLL)
    abort();
  v17 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v4 - (_QWORD)v14) >> 4);
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0xBA2E8BA2E8BA2ELL)
    v18 = 0x1745D1745D1745DLL;
  else
    v18 = v16;
  if (v18)
  {
    if (v18 > 0x1745D1745D1745DLL)
      sub_1C4764EE4();
    v19 = (char *)operator new(176 * v18);
  }
  else
  {
    v19 = 0;
  }
  v20 = &v19[176 * v15];
  *(_QWORD *)v20 = *(_QWORD *)a2;
  v21 = v20 + 24;
  *((_QWORD *)v20 + 1) = v20 + 24;
  v22 = (void **)(v20 + 8);
  *((_QWORD *)v20 + 2) = 0x1000000000;
  v23 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v23 && v22 != (void **)(a2 + 8))
  {
    v24 = *(void **)(a2 + 8);
    if (v24 != (void *)(a2 + 24))
    {
      *v22 = v24;
      v40 = *(_DWORD *)(a2 + 20);
      *((_DWORD *)v20 + 4) = v23;
      *((_DWORD *)v20 + 5) = v40;
      *(_QWORD *)(a2 + 8) = a2 + 24;
      *(_DWORD *)(a2 + 20) = 0;
      goto LABEL_30;
    }
    if (v23 >= 0x11)
    {
      *((_DWORD *)v20 + 4) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v20 + 8), (uint64_t)(v20 + 24), v23, 8);
      v25 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v25)
        goto LABEL_29;
      v24 = *(void **)(a2 + 8);
      v21 = *v22;
    }
    else
    {
      v25 = *(unsigned int *)(a2 + 16);
    }
    memcpy(v21, v24, 8 * v25);
LABEL_29:
    *((_DWORD *)v20 + 4) = v23;
LABEL_30:
    *(_DWORD *)(a2 + 16) = 0;
    v14 = *a1;
    v5 = a1[1];
  }
  v26 = &v19[176 * v15];
  *(_OWORD *)(v26 + 152) = *(_OWORD *)(a2 + 152);
  v26[168] = *(_BYTE *)(a2 + 168);
  v13 = v20 + 176;
  if (v5 != v14)
  {
    v41 = &v19[176 * v18];
    v27 = 0;
    while (1)
    {
      v28 = &v5[v27];
      v29 = &v20[v27];
      *((_QWORD *)v29 - 22) = *(_QWORD *)&v5[v27 - 176];
      v30 = &v20[v27 - 152];
      *(_QWORD *)&v20[v27 - 168] = v30;
      *((_QWORD *)v29 - 20) = 0x1000000000;
      v31 = *(_DWORD *)&v5[v27 - 160];
      if (v31)
        v32 = v29 == v28;
      else
        v32 = 1;
      if (v32)
        goto LABEL_43;
      v33 = (char *)*((_QWORD *)v28 - 21);
      if (v28 - 152 != v33)
      {
        *((_QWORD *)v29 - 21) = v33;
        v36 = *(_DWORD *)&v5[v27 - 156];
        *((_DWORD *)v29 - 40) = v31;
        *((_DWORD *)v29 - 39) = v36;
        *((_QWORD *)v28 - 21) = v28 - 152;
        *(_DWORD *)&v5[v27 - 156] = 0;
        goto LABEL_42;
      }
      if (v31 >= 0x11)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20[v27 - 168], (uint64_t)&v20[v27 - 152], *(unsigned int *)&v5[v27 - 160], 8);
        v34 = *((unsigned int *)v28 - 40);
        if (!(_DWORD)v34)
          goto LABEL_41;
        v33 = (char *)*((_QWORD *)v28 - 21);
        v30 = *(char **)&v20[v27 - 168];
      }
      else
      {
        v34 = *(unsigned int *)&v5[v27 - 160];
      }
      memcpy(v30, v33, 8 * v34);
LABEL_41:
      *((_DWORD *)v29 - 40) = v31;
LABEL_42:
      *((_DWORD *)v28 - 40) = 0;
LABEL_43:
      v35 = *(_OWORD *)(v28 - 24);
      *(v29 - 8) = *(v28 - 8);
      *(_OWORD *)(v29 - 24) = v35;
      v27 -= 176;
      if (&v5[v27] == v14)
      {
        v14 = *a1;
        v37 = a1[1];
        *a1 = &v20[v27];
        a1[1] = v13;
        a1[2] = v41;
        while (v37 != v14)
        {
          v38 = (char *)*((_QWORD *)v37 - 21);
          if (v37 - 152 != v38)
            free(v38);
          v37 -= 176;
        }
        goto LABEL_53;
      }
    }
  }
  *a1 = v20;
  a1[1] = v13;
  a1[2] = &v19[176 * v18];
LABEL_53:
  if (v14)
    operator delete(v14);
LABEL_55:
  a1[1] = v13;
}

uint64_t sub_1C5BBDE64(uint64_t result, const llvm::Instruction **a2, uint64_t a3, uint64_t a4, char a5)
{
  const llvm::Instruction **v9;
  const llvm::Instruction **v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const llvm::Instruction **v14;
  const llvm::Instruction *v15;
  uint64_t v16;
  const llvm::Instruction *v17;
  const llvm::Instruction **v19;
  const llvm::Instruction **v20;
  const llvm::Value *v21;
  const llvm::Value *v22;
  const llvm::Instruction **v23;
  const llvm::Instruction *v24;
  const llvm::Value *v25;
  const llvm::Value *v26;
  const llvm::Instruction **v27;
  BOOL v28;
  const llvm::Value *v29;
  const llvm::Instruction *v30;
  const llvm::Instruction **v31;
  const llvm::Instruction **v32;
  const llvm::Instruction *v33;
  const llvm::Instruction *v34;
  const llvm::Instruction *v35;
  const llvm::Instruction *v36;
  const llvm::Instruction **v37;
  const llvm::Instruction *v38;
  const llvm::Instruction **v39;
  BOOL v41;
  uint64_t v42;
  const llvm::Instruction **v43;
  const llvm::Value *v44;
  const llvm::Instruction *v45;
  const llvm::Value *v46;
  uint64_t v47;
  const llvm::Instruction **v48;
  int64_t v49;
  int64_t v50;
  uint64_t v51;
  const llvm::Value **v52;
  const llvm::Instruction **v53;
  const llvm::Instruction *v54;
  const llvm::Instruction **v55;
  uint64_t v56;
  uint64_t v57;
  const llvm::Instruction **v58;
  const llvm::Instruction **v59;
  uint64_t v60;
  const llvm::Instruction **v61;
  const llvm::Value **v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  const llvm::Value **v67;
  const llvm::Instruction *v68;
  const llvm::Value **v69;
  const llvm::Value *v71;
  const llvm::Instruction *v72;
  const llvm::Value *v73;
  const llvm::Instruction **v74;
  const llvm::Instruction **v75;
  const llvm::Instruction *v76;
  const llvm::Instruction **v77;
  const llvm::Value **v78;
  int64_t v79;
  const llvm::Instruction *v80;

  v9 = (const llvm::Instruction **)result;
LABEL_2:
  v78 = a2 - 1;
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a3 + 32), *(a2 - 1), *v9);
        if ((_DWORD)result)
        {
          v38 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v38;
        }
        return result;
      case 3:
        return sub_1C5BBE6D8(v9, v9 + 1, v78, a3);
      case 4:
        return sub_1C5BBE978(v9, v9 + 1, v9 + 2, v78, a3);
      case 5:
        return sub_1C5BBE5F0(v9, v9 + 1, v9 + 2, v9 + 3, v78, a3);
      default:
        if (v11 <= 191)
        {
          v39 = v9 + 1;
          v41 = v9 == a2 || v39 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v41)
            {
              v42 = 0;
              v43 = v9;
              do
              {
                v45 = *v43;
                v44 = v43[1];
                v43 = v39;
                result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a3 + 32), v44, v45);
                if ((_DWORD)result)
                {
                  v46 = *v43;
                  v47 = v42;
                  while (1)
                  {
                    *(const llvm::Instruction **)((char *)v9 + v47 + 8) = *(const llvm::Instruction **)((char *)v9 + v47);
                    if (!v47)
                      break;
                    result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a3 + 32), v46, *(const llvm::Instruction **)((char *)v9 + v47 - 8));
                    v47 -= 8;
                    if ((result & 1) == 0)
                    {
                      v48 = (const llvm::Instruction **)((char *)v9 + v47 + 8);
                      goto LABEL_72;
                    }
                  }
                  v48 = v9;
LABEL_72:
                  *v48 = v46;
                }
                v39 = v43 + 1;
                v42 += 8;
              }
              while (v43 + 1 != a2);
            }
          }
          else if (!v41)
          {
            do
            {
              v72 = *v9;
              v71 = v9[1];
              v9 = v39;
              result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a3 + 32), v71, v72);
              if ((_DWORD)result)
              {
                v73 = *v9;
                v74 = v9;
                do
                {
                  v75 = v74;
                  v76 = *--v74;
                  *v75 = v76;
                  result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a3 + 32), v73, *(v75 - 2));
                }
                while ((result & 1) != 0);
                *v74 = v73;
              }
              v39 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v49 = (unint64_t)(v12 - 2) >> 1;
            v77 = a2;
            v79 = v49;
            do
            {
              v50 = v49;
              if (v79 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v9[v51];
                if (2 * v49 + 2 < v12
                  && llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a3 + 32), *v52, v52[1]))
                {
                  ++v52;
                  v51 = 2 * v50 + 2;
                }
                v53 = &v9[v50];
                result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a3 + 32), *v52, *v53);
                if ((result & 1) == 0)
                {
                  v54 = *v53;
                  do
                  {
                    v55 = v52;
                    *v53 = *v52;
                    if (v79 < v51)
                      break;
                    v56 = (2 * v51) | 1;
                    v52 = &v9[v56];
                    v57 = 2 * v51 + 2;
                    if (v57 < v12
                      && llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a3 + 32), *v52, v52[1]))
                    {
                      ++v52;
                      v56 = v57;
                    }
                    result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a3 + 32), *v52, v54);
                    v53 = v55;
                    v51 = v56;
                  }
                  while (!(_DWORD)result);
                  *v55 = v54;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v58 = v77;
            do
            {
              v59 = v58;
              v60 = 0;
              v80 = *v9;
              v61 = v9;
              do
              {
                v62 = &v61[v60 + 1];
                v63 = (2 * v60) | 1;
                v64 = 2 * v60 + 2;
                if (v64 < v12)
                {
                  result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a3 + 32), *v62, v61[v60 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v62;
                    v63 = v64;
                  }
                }
                *v61 = *v62;
                v61 = v62;
                v60 = v63;
              }
              while (v63 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
              v58 = v59 - 1;
              if (v62 == v59 - 1)
              {
                *v62 = v80;
              }
              else
              {
                *v62 = *v58;
                *v58 = v80;
                v65 = (char *)v62 - (char *)v9 + 8;
                if (v65 >= 9)
                {
                  v66 = (((unint64_t)v65 >> 3) - 2) >> 1;
                  v67 = &v9[v66];
                  result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a3 + 32), *v67, *v62);
                  if ((_DWORD)result)
                  {
                    v68 = *v62;
                    do
                    {
                      v69 = v67;
                      *v62 = *v67;
                      if (!v66)
                        break;
                      v66 = (v66 - 1) >> 1;
                      v67 = &v9[v66];
                      result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a3 + 32), *v67, v68);
                      v62 = v69;
                    }
                    while ((result & 1) != 0);
                    *v69 = v68;
                  }
                }
              }
            }
            while (v12-- > 2);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v9[(unint64_t)v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          sub_1C5BBE6D8(v14, v9, v78, a3);
        }
        else
        {
          sub_1C5BBE6D8(v9, v14, v78, a3);
          sub_1C5BBE6D8(v9 + 1, v14 - 1, a2 - 2, a3);
          sub_1C5BBE6D8(v9 + 2, &v9[v13 + 1], a2 - 3, a3);
          sub_1C5BBE6D8(v14 - 1, v14, &v9[v13 + 1], a3);
          v15 = *v9;
          *v9 = *v14;
          *v14 = v15;
        }
        --a4;
        if ((a5 & 1) == 0
          && !llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a3 + 32), *(v9 - 1), *v9))
        {
          v29 = *v9;
          result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a3 + 32), *v9, *v78);
          if ((result & 1) != 0)
          {
            v10 = v9;
            do
            {
              v30 = v10[1];
              ++v10;
              result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a3 + 32), v29, v30);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v31 = v9 + 1;
            do
            {
              v10 = v31;
              if (v31 >= a2)
                break;
              ++v31;
              result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a3 + 32), v29, *v10);
            }
            while (!(_DWORD)result);
          }
          v32 = a2;
          if (v10 < a2)
          {
            v32 = a2;
            do
            {
              v33 = *--v32;
              result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a3 + 32), v29, v33);
            }
            while ((result & 1) != 0);
          }
          while (v10 < v32)
          {
            v34 = *v10;
            *v10 = *v32;
            *v32 = v34;
            do
            {
              v35 = v10[1];
              ++v10;
            }
            while (!llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a3 + 32), v29, v35));
            do
            {
              v36 = *--v32;
              result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a3 + 32), v29, v36);
            }
            while ((result & 1) != 0);
          }
          v37 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v37;
          a5 = 0;
          *v37 = v29;
          continue;
        }
        v16 = 0;
        v17 = *v9;
        while (llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a3 + 32), v9[++v16], v17))
          ;
        v19 = &v9[v16];
        v20 = a2;
        if (v16 == 1)
        {
          v20 = a2;
          do
          {
            if (v19 >= v20)
              break;
            v22 = *--v20;
          }
          while (!llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a3 + 32), v22, v17));
        }
        else
        {
          do
            v21 = *--v20;
          while (!llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a3 + 32), v21, v17));
        }
        v10 = &v9[v16];
        if (v19 < v20)
        {
          v23 = v20;
          do
          {
            v24 = *v10;
            *v10 = *v23;
            *v23 = v24;
            do
            {
              v25 = v10[1];
              ++v10;
            }
            while (llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a3 + 32), v25, v17));
            do
              v26 = *--v23;
            while (!llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a3 + 32), v26, v17));
          }
          while (v10 < v23);
        }
        v27 = v10 - 1;
        if (v10 - 1 != v9)
          *v9 = *v27;
        *v27 = v17;
        if (v19 < v20)
        {
LABEL_30:
          result = sub_1C5BBDE64(v9, v10 - 1, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v28 = sub_1C5BBE7C8(v9, v10 - 1, a3);
        result = sub_1C5BBE7C8(v10, a2, a3);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_30;
        }
        a2 = v10 - 1;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1C5BBE5F0(const llvm::Instruction **a1, const llvm::Value **a2, const llvm::Value **a3, const llvm::Value **a4, const llvm::Value **a5, uint64_t a6)
{
  _BOOL8 result;
  const llvm::Value *v13;
  const llvm::Value *v14;
  const llvm::Value *v15;
  const llvm::Instruction *v16;

  sub_1C5BBE978(a1, a2, a3, a4, a6);
  result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a6 + 32), *a5, *a4);
  if (result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a6 + 32), *a4, *a3);
    if (result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a6 + 32), *a3, *a2);
      if (result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a6 + 32), *a2, *a1);
        if (result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

BOOL sub_1C5BBE6D8(const llvm::Instruction **a1, const llvm::Value **a2, const llvm::Value **a3, uint64_t a4)
{
  BOOL v8;
  _BOOL8 result;
  const llvm::Instruction *v10;
  const llvm::Value *v11;
  const llvm::Instruction *v12;
  const llvm::Value *v13;

  v8 = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a4 + 32), *a2, *a1);
  result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a4 + 32), *a3, *a2);
  if (v8)
  {
    v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a4 + 32), *a3, v10);
      if (result)
      {
        v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if (result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a4 + 32), *a2, *a1);
    if (result)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL sub_1C5BBE7C8(const llvm::Instruction **a1, const llvm::Instruction **a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  const llvm::Instruction *v8;
  const llvm::Instruction **v9;
  const llvm::Value **v10;
  uint64_t v11;
  int v12;
  const llvm::Value *v13;
  uint64_t v14;
  BOOL v15;
  const llvm::Instruction **v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a3 + 32), *(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_1C5BBE6D8(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C5BBE978(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1C5BBE5F0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      sub_1C5BBE6D8(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a3 + 32), *v10, *v9))
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        *(const llvm::Instruction **)((char *)a1 + v14 + 24) = *(const llvm::Instruction **)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v15 = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a3 + 32), v13, *(const llvm::Instruction **)((char *)a1 + v14 + 8));
        v14 -= 8;
        if (!v15)
        {
          v16 = (const llvm::Instruction **)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

BOOL sub_1C5BBE978(const llvm::Instruction **a1, const llvm::Value **a2, const llvm::Value **a3, const llvm::Value **a4, uint64_t a5)
{
  _BOOL8 result;
  const llvm::Value *v11;
  const llvm::Value *v12;
  const llvm::Instruction *v13;

  sub_1C5BBE6D8(a1, a2, a3, a5);
  result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a5 + 32), *a4, *a3);
  if (result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a5 + 32), *a3, *a2);
    if (result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)a5 + 32), *a2, *a1);
      if (result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

llvm::BasicBlock *sub_1C5BBEA34(uint64_t a1, uint64_t a2, uint64_t a3, llvm::BasicBlock *a4)
{
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm *v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  llvm::BasicBlock *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  llvm::DomTreeUpdater *v35;
  llvm::BasicBlock *v36;
  llvm *v37;
  llvm::DomTreeUpdater *v38;
  uint64_t v39;
  llvm *v40;
  llvm::DomTreeUpdater *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  llvm::ConstantInt *IntPtrType;
  unsigned __int8 *v48;
  llvm::Value **v49;
  uint64_t v50;
  unsigned __int8 *v51;
  llvm::Value *v52;
  _DWORD *v53;
  _DWORD *v54;
  uint64_t v55;
  llvm::Value *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  unsigned __int8 **v62;
  int v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  llvm::Value **v70;
  uint64_t v71;
  llvm::Value *v72;
  _DWORD *v73;
  _DWORD *v74;
  uint64_t v75;
  llvm::Value *v76;
  _QWORD *v77;
  llvm::PointerType *v78;
  llvm::PointerType *v79;
  uint64_t v80;
  unsigned int v81;
  unsigned __int8 **v82;
  uint64_t v83;
  const llvm::APInt *v84;
  unsigned __int8 *v85;
  char v86;
  llvm::Value *v87;
  uint64_t v88;
  __int16 v89;
  unint64_t v90;
  llvm::ConstantInt *v91;
  unsigned int v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  unsigned __int8 **v108;
  int v109;
  unsigned __int8 *v110;
  unsigned __int8 *v111;
  unsigned __int8 *v112;
  uint64_t v113;
  llvm::BasicBlock *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  llvm::BasicBlock *v118;
  uint64_t v119;
  _BYTE v120[32];
  __int16 v121;
  unsigned __int8 *v122;
  unint64_t v123;
  uint64_t v124[4];
  unsigned __int8 *v125;
  unint64_t v126;
  uint64_t v127[4];
  unsigned __int8 *v128;
  void *v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  llvm::LLVMContext *v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  _BYTE v139[64];
  const char *v140;
  unsigned int v141;
  __int16 v142;
  uint64_t v143;
  void *v144;
  _QWORD v145[10];

  v145[8] = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned __int8 **)(a3 - 32);
  sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 56) + 40) + 272, **(_QWORD **)(a3 - 64));
  if (v10 == 1)
    v11 = -2;
  else
    v11 = (unint64_t)(v9 + 7) >> 3;
  llvm::Instruction::getAAMetadata((uint64_t ***)a3, v127);
  v125 = v8;
  v126 = v11;
  v12 = *(unsigned __int8 **)(a2 - 32);
  sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40) + 272, *(_QWORD *)a2);
  if (v14 == 1)
    v15 = -2;
  else
    v15 = (unint64_t)(v13 + 7) >> 3;
  llvm::Instruction::getAAMetadata((uint64_t ***)a2, v124);
  v122 = v12;
  v123 = v15;
  if (!llvm::AAResults::alias(*(_QWORD *)(a1 + 24), (uint64_t)&v122, (uint64_t)&v125))
    return *(llvm::BasicBlock **)(a2 - 32);
  v17 = *((_QWORD *)a4 + 5);
  v137 = v139;
  v138 = 0x400000000;
  v19 = v17 + 40;
  v18 = *(_QWORD *)(v17 + 40);
  v20 = (llvm *)v17;
  v116 = a1;
  if (v18 != v17 + 40)
  {
    if (v18)
      v21 = v18 - 24;
    else
      v21 = 0;
    v22 = *(unsigned __int8 *)(v21 + 16);
    v23 = v22 - 29;
    if (v22 == 30)
    {
      if ((*(_DWORD *)(v21 + 20) & 0x7FFFFFF) == 3)
        v24 = 2;
      else
        v24 = 1;
LABEL_18:
      v118 = a4;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = (llvm::BasicBlock *)(v21 + 32);
      v29 = v21 - 64;
      v30 = v24;
      v31 = v21 - 64;
      do
      {
        v32 = *(unsigned __int8 *)(v21 + 16);
        if (v32 != 30)
          __asm { BR              X10 }
        v33 = *(_QWORD *)(v21 - 32 - 32 * v27);
        if (v26 >= HIDWORD(v138))
        {
          v113 = v29;
          v114 = v28;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v137, (uint64_t)v139, v26 + 1, 16);
          v29 = v113;
          v28 = v114;
          v26 = v138;
        }
        v34 = (uint64_t *)((char *)v137 + 16 * v26);
        *v34 = v17;
        v34[1] = v33 | 4;
        v26 = v138 + 1;
        LODWORD(v138) = v138 + 1;
        ++v27;
        v25 += 2;
        v31 += 32;
      }
      while (v30 != v27);
      v19 = v17 + 40;
      a4 = v118;
      v20 = (llvm *)*((_QWORD *)v118 + 5);
      a1 = v116;
      goto LABEL_25;
    }
    v24 = 2;
    v20 = (llvm *)v17;
    switch(v23)
    {
      case 1:
        __break(1u);
        goto LABEL_107;
      case 2:
        v24 = (*(_DWORD *)(v21 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 3:
      case 9:
        v24 = (*(_DWORD *)(v21 + 20) & 0x7FFFFFF) - 1;
        break;
      case 4:
        goto LABEL_18;
      case 7:
        v24 = *(_WORD *)(v21 + 18) & 1;
        break;
      case 8:
        v24 = 1;
        goto LABEL_18;
      case 10:
        v24 = *(_DWORD *)(v21 + 80) + 1;
        break;
      default:
        goto LABEL_25;
    }
    v20 = (llvm *)v17;
    if (v24)
      goto LABEL_18;
  }
LABEL_25:
  v35 = *(llvm::DomTreeUpdater **)(a1 + 40);
  v140 = "alias_cont";
  v142 = 259;
  v36 = (llvm::BasicBlock *)sub_1C5EBD70C(v20, a4, 0, 0, v35, 0, (llvm::Twine *)&v140, 0);
  v37 = (llvm *)*((_QWORD *)a4 + 5);
  v38 = *(llvm::DomTreeUpdater **)(a1 + 40);
  v140 = "copy";
  v142 = 259;
  v39 = sub_1C5EBD70C(v37, a4, 0, 0, v38, 0, (llvm::Twine *)&v140, 0);
  v40 = (llvm *)*((_QWORD *)a4 + 5);
  v41 = *(llvm::DomTreeUpdater **)(a1 + 40);
  v140 = "no_alias";
  v142 = 259;
  v119 = sub_1C5EBD70C(v40, a4, 0, 0, v41, 0, (llvm::Twine *)&v140, 0);
  sub_1C4773D54((uint64_t)&v129, (uint64_t)a4, 0, 0, 0);
  v42 = 0;
  v43 = *(_QWORD *)(v17 + 40);
  if (v43 != v19)
  {
    if (v43)
      v44 = v43 - 24;
    else
      v44 = 0;
    if (*(unsigned __int8 *)(v44 + 16) - 29 >= 0xB)
      v42 = 0;
    else
      v42 = v44;
  }
  v115 = v39;
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v42 + 40) + 40, (uint64_t ***)v42);
  v45 = *(_QWORD *)(v42 + 24);
  v46 = *(_QWORD **)(v42 + 32);
  *v46 = v45;
  *(_QWORD *)(v45 + 8) = v46;
  *(_QWORD *)(v42 + 24) = 0;
  *(_QWORD *)(v42 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)v42);
  v132 = v17;
  v133 = v19;
  IntPtrType = (llvm::ConstantInt *)llvm::DataLayout::getIntPtrType((llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40)+ 272), v134, 0);
  v140 = "store.begin";
  v142 = 259;
  v48 = sub_1C4773E38((uint64_t *)&v129, 47, v125, (uint64_t)IntPtrType, (uint64_t)&v140);
  v49 = llvm::ConstantInt::get(IntPtrType, v126 & 0x7FFFFFFFFFFFFFFFLL, 0);
  v140 = "store.end";
  v142 = 259;
  v50 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, llvm::Value **, uint64_t, uint64_t))(*(_QWORD *)v135 + 16))(v135, v48, v49, 1, 1);
  if (!v50)
    v50 = sub_1C4774D04((uint64_t *)&v129, 13, v48, (uint64_t)v49, (uint64_t)&v140, 1, 1);
  v140 = "load.begin";
  v142 = 259;
  v51 = sub_1C4773E38((uint64_t *)&v129, 47, v122, (uint64_t)IntPtrType, (uint64_t)&v140);
  v121 = 257;
  v52 = (llvm::Value *)sub_1C4774B48((uint64_t)&v129, 36, (uint64_t)v51, v50, (uint64_t)v120);
  v53 = operator new(0xA0uLL);
  v54 = v53;
  v55 = 0;
  v56 = (llvm::Value *)(v53 + 24);
  v53[29] = v53[29] & 0x38000000 | 3;
  do
  {
    v57 = &v53[v55];
    *v57 = 0;
    v57[1] = 0;
    v57[2] = 0;
    v57[3] = v56;
    v55 += 8;
  }
  while (v55 != 24);
  v117 = (uint64_t)v36;
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v53 + 24), v36, (llvm::BasicBlock *)v119, v52, 0);
  v142 = 257;
  (*(void (**)(uint64_t, llvm::Value *, const char **, uint64_t, uint64_t))(*(_QWORD *)v136 + 16))(v136, v56, &v140, v132, v133);
  if (v130)
  {
    v60 = (char *)v129;
    v61 = (char *)v129 + 16 * v130;
    v62 = (unsigned __int8 **)(v54 + 36);
    do
    {
      v63 = *(_DWORD *)v60;
      v64 = (unsigned __int8 *)*((_QWORD *)v60 + 1);
      if (v64)
      {
        if (!v63)
        {
          v128 = (unsigned __int8 *)*((_QWORD *)v60 + 1);
          llvm::MetadataTracking::track((uint64_t)&v128, v64, 2);
          v65 = *v62;
          if (!*v62)
          {
LABEL_51:
            v66 = v128;
            *v62 = v128;
            if (v66)
              llvm::MetadataTracking::retrack((uint64_t)&v128, v66, (uint64_t)(v54 + 36));
            goto LABEL_48;
          }
LABEL_45:
          llvm::MetadataTracking::untrack((uint64_t)(v54 + 36), v65);
          goto LABEL_51;
        }
      }
      else
      {
        v65 = *v62;
        if (!*v62 && (*((_BYTE *)v54 + 119) & 0x20) == 0)
          goto LABEL_48;
        if (!v63)
        {
          v128 = 0;
          if (!v65)
            goto LABEL_51;
          goto LABEL_45;
        }
      }
      llvm::Value::setMetadata(v56, *(_DWORD *)v60, (llvm::MDNode *)v64);
LABEL_48:
      v60 += 16;
    }
    while (v60 != v61);
  }
  v58 = *(_QWORD *)(v117 + 40);
  if (v58 == v117 + 40)
  {
    v59 = 0;
  }
  else
  {
    if (v58)
      v67 = v58 - 24;
    else
      v67 = 0;
    if (*(unsigned __int8 *)(v67 + 16) - 29 >= 0xB)
      v59 = 0;
    else
      v59 = v67;
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v59 + 40) + 40, (uint64_t ***)v59);
  v68 = *(_QWORD *)(v59 + 24);
  v69 = *(_QWORD **)(v59 + 32);
  *v69 = v68;
  *(_QWORD *)(v68 + 8) = v69;
  *(_QWORD *)(v59 + 24) = 0;
  *(_QWORD *)(v59 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)v59);
  sub_1C4D8AE2C((uint64_t)&v129, v117, *(_QWORD *)(v117 + 48));
  v70 = llvm::ConstantInt::get(IntPtrType, v123 & 0x7FFFFFFFFFFFFFFFLL, 0);
  v140 = "load.end";
  v142 = 259;
  v71 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, llvm::Value **, uint64_t, uint64_t))(*(_QWORD *)v135 + 16))(v135, v51, v70, 1, 1);
  if (!v71)
    v71 = sub_1C4774D04((uint64_t *)&v129, 13, v51, (uint64_t)v70, (uint64_t)&v140, 1, 1);
  v121 = 257;
  v72 = (llvm::Value *)sub_1C4774B48((uint64_t)&v129, 36, (uint64_t)v48, v71, (uint64_t)v120);
  v73 = operator new(0xA0uLL);
  v74 = v73;
  v75 = 0;
  v76 = (llvm::Value *)(v73 + 24);
  v73[29] = v73[29] & 0x38000000 | 3;
  do
  {
    v77 = &v73[v75];
    *v77 = 0;
    v77[1] = 0;
    v77[2] = 0;
    v77[3] = v76;
    v75 += 8;
  }
  while (v75 != 24);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v73 + 24), (llvm::BasicBlock *)v115, (llvm::BasicBlock *)v119, v72, 0);
  v142 = 257;
  (*(void (**)(uint64_t, llvm::Value *, const char **, uint64_t, uint64_t))(*(_QWORD *)v136 + 16))(v136, v76, &v140, v132, v133);
  if (v130)
  {
    v106 = (char *)v129;
    v107 = (char *)v129 + 16 * v130;
    v108 = (unsigned __int8 **)(v74 + 36);
    do
    {
      v109 = *(_DWORD *)v106;
      v110 = (unsigned __int8 *)*((_QWORD *)v106 + 1);
      if (v110)
      {
        if (!v109)
        {
          v128 = (unsigned __int8 *)*((_QWORD *)v106 + 1);
          llvm::MetadataTracking::track((uint64_t)&v128, v110, 2);
          v111 = *v108;
          if (!*v108)
          {
LABEL_97:
            v112 = v128;
            *v108 = v128;
            if (v112)
              llvm::MetadataTracking::retrack((uint64_t)&v128, v112, (uint64_t)(v74 + 36));
            goto LABEL_94;
          }
LABEL_91:
          llvm::MetadataTracking::untrack((uint64_t)(v74 + 36), v111);
          goto LABEL_97;
        }
      }
      else
      {
        v111 = *v108;
        if (!*v108 && (*((_BYTE *)v74 + 119) & 0x20) == 0)
          goto LABEL_94;
        if (!v109)
        {
          v128 = 0;
          if (!v111)
            goto LABEL_97;
          goto LABEL_91;
        }
      }
      llvm::Value::setMetadata(v76, *(_DWORD *)v106, (llvm::MDNode *)v110);
LABEL_94:
      v106 += 16;
    }
    while (v106 != v107);
  }
  sub_1C4D8AE2C((uint64_t)&v129, v115, *(_QWORD *)(v115 + 48));
  v78 = *(llvm::PointerType **)a2;
  llvm::ArrayType::get(*(llvm::ArrayType **)(*(_QWORD *)a2 + 24), (llvm::Type *)*(unsigned int *)(*(_QWORD *)a2 + 32));
  v80 = **(_QWORD **)(a2 - 32);
  v81 = *(_DWORD *)(v80 + 8);
  if ((v81 & 0xFE) == 0x12)
    v81 = *(_DWORD *)(**(_QWORD **)(v80 + 16) + 8);
  v142 = 257;
  v82 = sub_1C627CF40((uint64_t)&v129, v79, (llvm::Type *)(v81 >> 8), 0, (uint64_t)&v140);
  v83 = llvm::PointerType::get(v78, 0);
  v142 = 257;
  v85 = sub_1C4773E38((uint64_t *)&v129, 49, (unsigned __int8 *)v82, v83, (uint64_t)&v140);
  v86 = *((_WORD *)v82 + 9);
  v87 = *(llvm::Value **)(a2 - 32);
  v88 = v123 & 0x7FFFFFFFFFFFFFFFLL;
  v89 = v86 & 0x3F | 0x100;
  v90 = ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1) & 0x3F | 0x100;
  v91 = *(llvm::ConstantInt **)(*(_QWORD *)v134 + 1984);
  v92 = *(_DWORD *)(*(_QWORD *)v134 + 1992);
  v141 = v92 >> 8;
  if (v92 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v140, v88, 0);
  }
  else
  {
    if (v92 <= 0xFF)
      v93 = 0;
    else
      v93 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v92);
    v140 = (const char *)(v93 & v88);
  }
  v94 = (uint64_t *)llvm::ConstantInt::get(v91, (llvm::LLVMContext *)&v140, v84);
  if (v141 >= 0x41 && v140)
    MEMORY[0x1CAA32F9C](v140, 0x1000C8000313F17);
  llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v129, 194, (llvm::Value *)v85, v89, v87, v90, v94, 0, 0, 0, 0, 0);
  sub_1C4D8AE2C((uint64_t)&v129, v119, *(_QWORD *)(v119 + 48));
  v95 = **(_QWORD **)(a2 - 32);
  v142 = 257;
  a4 = (llvm::BasicBlock *)sub_1C4867E94((uint64_t)&v129, v95, 3, (uint64_t)&v140);
  sub_1C477667C(a4, *(_QWORD *)(a2 - 32), v17);
  sub_1C477667C(a4, *(_QWORD *)(a2 - 32), v117);
  sub_1C477667C(a4, (uint64_t)v85, v115);
  v96 = v138;
  if (v138 >= HIDWORD(v138))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v137, (uint64_t)v139, v138 + 1, 16);
    v96 = v138;
  }
  v97 = (uint64_t *)((char *)v137 + 16 * v96);
  *v97 = v17;
  v97[1] = v117 & 0xFFFFFFFFFFFFFFFBLL;
  v98 = (v138 + 1);
  LODWORD(v138) = v98;
  v99 = v119 & 0xFFFFFFFFFFFFFFFBLL;
  if (v98 >= HIDWORD(v138))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v137, (uint64_t)v139, v98 + 1, 16);
    LODWORD(v98) = v138;
  }
  v100 = (uint64_t *)((char *)v137 + 16 * v98);
  *v100 = v17;
  v100[1] = v99;
  v101 = (v138 + 1);
  LODWORD(v138) = v101;
  if (v101 >= HIDWORD(v138))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v137, (uint64_t)v139, v101 + 1, 16);
    LODWORD(v101) = v138;
  }
  v102 = (uint64_t *)((char *)v137 + 16 * v101);
  *v102 = v117;
  v102[1] = v115 & 0xFFFFFFFFFFFFFFFBLL;
  v103 = (v138 + 1);
  LODWORD(v138) = v103;
  if (v103 >= HIDWORD(v138))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v137, (uint64_t)v139, v103 + 1, 16);
    LODWORD(v103) = v138;
  }
  v104 = (uint64_t *)((char *)v137 + 16 * v103);
  *v104 = v117;
  v104[1] = v99;
  LODWORD(v138) = v138 + 1;
  v105 = *(_QWORD *)(v116 + 32);
  sub_1C4E25D14((uint64_t)&v140, (unint64_t *)v137, v138, 1u);
  llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(v105, (uint64_t)&v140, 0);
  if (v144 != v145)
    free(v144);
  sub_1C4E28CA4((uint64_t)&v143);
  sub_1C4E28CA4((uint64_t)&v140);
  v20 = (llvm *)v129;
  if (v129 != &v131)
LABEL_107:
    free(v20);
  if (v137 != v139)
    free(v137);
  return a4;
}

void sub_1C5BBF694(uint64_t a1, uint64_t a2, const llvm::APInt *a3, unsigned __int16 a4, __int16 a5, unint64_t a6, char a7, uint64_t a8, uint64_t a9, unsigned int a10, unsigned int a11, char a12, llvm::PointerType *a13, uint64_t a14)
{
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ConstantInt *v19;
  unint64_t v20;
  unint64_t v22;
  llvm::ValueHandleBase *v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  llvm::Type *v35;
  uint64_t v36;
  uint64_t *v37;
  unsigned __int8 *v38;
  llvm::PointerType *v39;
  llvm::PointerType *v40;
  uint64_t v41;
  const llvm::APInt *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  llvm::ConstantInt *v45;
  unsigned int v46;
  unint64_t v47;
  int v48;
  llvm::ValueHandleBase *v49;
  _BYTE v53[32];
  __int16 v54;
  _BYTE v55[32];
  __int16 v56;
  const char *v57;
  unsigned int v58;
  __int16 v59;

  v16 = HIDWORD(a6);
  if (a7)
    LODWORD(v16) = a6;
  v17 = v16;
  v18 = **(_QWORD **)(a14 + 64);
  v19 = *(llvm::ConstantInt **)(v18 + 1984);
  v20 = *(unsigned int *)(v18 + 1992);
  v58 = v20 >> 8;
  if (v20 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v57, v17, 0);
  }
  else
  {
    if (v20 <= 0xFF)
      v22 = 0;
    else
      v22 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v20);
    v57 = (const char *)(v22 & v17);
  }
  v23 = llvm::ConstantInt::get(v19, (llvm::LLVMContext *)&v57, a3);
  if (v58 >= 0x41 && v57)
    MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
  v56 = 257;
  v24 = (_QWORD *)sub_1C4EC4040(a14, a9, (uint64_t)v23, (uint64_t)v55, 0, 0);
  v54 = 257;
  v25 = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a14 + 72) + 16))(*(_QWORD *)(a14 + 72), v24, a8, 0, 0);
  if (!v25)
  {
    v59 = 257;
    v26 = (char *)operator new(0x80uLL);
    *((_QWORD *)v26 + 5) = 0;
    v27 = v26 + 40;
    *((_QWORD *)v26 + 6) = 0;
    *((_QWORD *)v26 + 8) = *v24;
    v28 = (uint64_t)(v26 + 64);
    *((_QWORD *)v26 + 3) = v26 + 64;
    *((_QWORD *)v26 + 7) = v26 + 64;
    *((_QWORD *)v26 + 9) = 0;
    v26[80] = 41;
    v26[81] = 0;
    *((_WORD *)v26 + 41) = 0;
    *((_DWORD *)v26 + 21) = 2;
    *(_OWORD *)(v26 + 88) = 0u;
    *(_OWORD *)(v26 + 104) = 0u;
    *((_DWORD *)v26 + 30) = 0;
    *(_QWORD *)v26 = v24;
    v31 = v24[1];
    v30 = v24 + 1;
    v29 = v31;
    *((_QWORD *)v26 + 1) = v31;
    if (v31)
      *(_QWORD *)(v29 + 16) = v26 + 8;
    *((_QWORD *)v26 + 2) = v30;
    *v30 = v26;
    *((_QWORD *)v26 + 4) = a8;
    if (a8)
    {
      v34 = *(_QWORD *)(a8 + 8);
      v33 = (_QWORD *)(a8 + 8);
      v32 = v34;
      *v27 = v34;
      if (v34)
        *(_QWORD *)(v32 + 16) = v27;
      *((_QWORD *)v26 + 6) = v33;
      *v33 = v26 + 32;
    }
    llvm::Value::setName((uint64_t ***)v26 + 8, (uint64_t)&v57);
    v25 = sub_1C4773754((uint64_t *)a14, v28, (uint64_t)v53);
  }
  v35 = (llvm::Type *)(*(_DWORD *)(*(_QWORD *)a3 + 8) >> 8);
  v36 = llvm::PointerType::get(a13, v35);
  v59 = 257;
  v37 = (uint64_t *)sub_1C5098D9C((uint64_t *)a14, (unsigned __int8 *)a3, v36, (uint64_t)&v57);
  v59 = 257;
  v38 = (unsigned __int8 *)sub_1C4867B70((uint64_t *)a14, a13, v37, v25, (uint64_t)&v57);
  llvm::FixedVectorType::get(a13, (llvm::Type *)(a11 * a10));
  v40 = v39;
  v41 = llvm::PointerType::get(v39, v35);
  v57 = "col.cast";
  v59 = 259;
  v43 = sub_1C5098D9C((uint64_t *)a14, v38, v41, (uint64_t)&v57);
  v44 = **(_QWORD **)(a14 + 64);
  v45 = *(llvm::ConstantInt **)(v44 + 1984);
  v46 = *(_DWORD *)(v44 + 1992);
  v58 = v46 >> 8;
  if (v46 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v57, v17, 0);
  }
  else
  {
    if (v46 <= 0xFF)
      v47 = 0;
    else
      v47 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v46);
    v57 = (const char *)(v47 & v17);
  }
  v49 = llvm::ConstantInt::get(v45, (llvm::LLVMContext *)&v57, v42);
  if (v58 >= 0x41 && v57)
    MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
  sub_1C5BBFE48(a1, a2, *((llvm::FixedVectorType **)v40 + 3), v43, a4, (uint64_t)v49, a5, v48, a10, a11, a12, (uint64_t *)a14);
}

void sub_1C5BBFA04(uint64_t a1, uint64_t a2, const llvm::APInt *a3, unsigned __int16 a4, __int16 a5, unint64_t a6, char a7, uint64_t a8, uint64_t a9, llvm::PointerType *a10, uint64_t a11)
{
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::ConstantInt *v18;
  unint64_t v19;
  unint64_t v20;
  llvm::ValueHandleBase *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  llvm::Type *v33;
  uint64_t v34;
  uint64_t *v35;
  unsigned __int8 *v36;
  _DWORD *v37;
  _DWORD *v38;
  llvm::PointerType *v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::APInt *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  llvm::ConstantInt *v45;
  unsigned int v46;
  __int16 v47;
  unint64_t v48;
  unsigned __int16 v49;
  llvm::ValueHandleBase *v50;
  _BYTE v53[32];
  __int16 v54;
  _BYTE v55[32];
  __int16 v56;
  const char *v57;
  unsigned int v58;
  __int16 v59;
  void *v60[2];
  _OWORD v61[9];
  char v62;
  void *v63;
  _QWORD v64[21];

  v64[19] = *MEMORY[0x1E0C80C00];
  v15 = HIDWORD(a6);
  if (a7)
    LODWORD(v15) = a6;
  v16 = v15;
  v17 = **(_QWORD **)(a11 + 64);
  v18 = *(llvm::ConstantInt **)(v17 + 1984);
  v19 = *(unsigned int *)(v17 + 1992);
  v58 = v19 >> 8;
  if (v19 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v57, v16, 0);
  }
  else
  {
    if (v19 <= 0xFF)
      v20 = 0;
    else
      v20 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v19);
    v57 = (const char *)(v20 & v16);
  }
  v21 = llvm::ConstantInt::get(v18, (llvm::LLVMContext *)&v57, a3);
  if (v58 >= 0x41 && v57)
    MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
  v56 = 257;
  v22 = (_QWORD *)sub_1C4EC4040(a11, a9, (uint64_t)v21, (uint64_t)v55, 0, 0);
  v54 = 257;
  v23 = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a11 + 72) + 16))(*(_QWORD *)(a11 + 72), v22, a8, 0, 0);
  if (!v23)
  {
    v59 = 257;
    v24 = (char *)operator new(0x80uLL);
    *((_QWORD *)v24 + 5) = 0;
    v25 = v24 + 40;
    *((_QWORD *)v24 + 6) = 0;
    *((_QWORD *)v24 + 8) = *v22;
    v26 = (uint64_t)(v24 + 64);
    *((_QWORD *)v24 + 3) = v24 + 64;
    *((_QWORD *)v24 + 7) = v24 + 64;
    *((_QWORD *)v24 + 9) = 0;
    v24[80] = 41;
    v24[81] = 0;
    *((_WORD *)v24 + 41) = 0;
    *((_DWORD *)v24 + 21) = 2;
    *(_OWORD *)(v24 + 88) = 0u;
    *(_OWORD *)(v24 + 104) = 0u;
    *((_DWORD *)v24 + 30) = 0;
    *(_QWORD *)v24 = v22;
    v29 = v22[1];
    v28 = v22 + 1;
    v27 = v29;
    *((_QWORD *)v24 + 1) = v29;
    if (v29)
      *(_QWORD *)(v27 + 16) = v24 + 8;
    *((_QWORD *)v24 + 2) = v28;
    *v28 = v24;
    *((_QWORD *)v24 + 4) = a8;
    if (a8)
    {
      v32 = *(_QWORD *)(a8 + 8);
      v31 = (_QWORD *)(a8 + 8);
      v30 = v32;
      *v25 = v32;
      if (v32)
        *(_QWORD *)(v30 + 16) = v25;
      *((_QWORD *)v24 + 6) = v31;
      *v31 = v24 + 32;
    }
    llvm::Value::setName((uint64_t ***)v24 + 8, (uint64_t)&v57);
    v23 = sub_1C4773754((uint64_t *)a11, v26, (uint64_t)v53);
  }
  v33 = (llvm::Type *)(*(_DWORD *)(*(_QWORD *)a3 + 8) >> 8);
  v34 = llvm::PointerType::get(a10, v33);
  v59 = 257;
  v35 = (uint64_t *)sub_1C5098D9C((uint64_t *)a11, (unsigned __int8 *)a3, v34, (uint64_t)&v57);
  v59 = 257;
  v36 = (unsigned __int8 *)sub_1C4867B70((uint64_t *)a11, a10, v35, v23, (uint64_t)&v57);
  if (*(_BYTE *)(a2 + 160))
  {
    v37 = (_DWORD *)(a2 + 8);
    v38 = (_DWORD *)(***(_QWORD ***)a2 + 32);
  }
  else
  {
    v38 = (_DWORD *)(a2 + 8);
    v37 = (_DWORD *)(***(_QWORD ***)a2 + 32);
  }
  llvm::FixedVectorType::get(a10, (llvm::Type *)(*v37 * *v38));
  v40 = (uint64_t)v39;
  v41 = llvm::PointerType::get(v39, v33);
  v57 = "col.cast";
  v59 = 259;
  v43 = sub_1C5098D9C((uint64_t *)a11, v36, v41, (uint64_t)&v57);
  v60[0] = v61;
  v60[1] = (void *)0x1000000000;
  if (*(_DWORD *)(a2 + 8))
    sub_1C49EEBE4((uint64_t)v60, a2);
  v61[8] = *(_OWORD *)(a2 + 144);
  v62 = *(_BYTE *)(a2 + 160);
  v44 = **(_QWORD **)(a11 + 64);
  v45 = *(llvm::ConstantInt **)(v44 + 1984);
  v46 = *(_DWORD *)(v44 + 1992);
  v58 = v46 >> 8;
  if (v46 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v57, v16, 0);
    v47 = a5;
    v49 = a4;
  }
  else
  {
    v47 = a5;
    if (v46 <= 0xFF)
      v48 = 0;
    else
      v48 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v46);
    v49 = a4;
    v57 = (const char *)(v48 & v16);
  }
  v50 = llvm::ConstantInt::get(v45, (llvm::LLVMContext *)&v57, v42);
  if (v58 >= 0x41 && v57)
    MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
  sub_1C5BC0464((uint64_t)&v63, a1, v40, (unsigned int *)v60, v43, v49, (uint64_t)v50, v47, (uint64_t *)a11);
  if (v63 != v64)
    free(v63);
  if (v60[0] != v61)
    free(v60[0]);
}

void sub_1C5BBFE48(uint64_t a1, uint64_t a2, llvm::FixedVectorType *this, unsigned __int8 *a4, unsigned __int16 a5, uint64_t a6, __int16 a7, int a8, unsigned int a9, unsigned int a10, char a11, uint64_t *a12)
{
  llvm::Type *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  llvm::Type *v24;
  int PrimitiveSizeInBits;
  const llvm::APInt *v26;
  _QWORD *v27;
  unint64_t v28;
  llvm::ConstantInt *v29;
  unsigned int v30;
  unint64_t v31;
  llvm::ValueHandleBase *v32;
  unsigned __int8 *v33;
  unsigned __int8 v34;
  unint64_t v35;
  llvm::Value *v36;
  uint64_t v37;
  _DWORD *v38;
  int v39;
  unsigned int v40;
  int v41;
  _DWORD *v42;
  uint64_t v44;
  const char *v47;
  unsigned int v48;
  __int16 v49;
  void *v50;
  uint64_t v51;
  _WORD v52[64];
  __int128 v53;
  BOOL v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if (a11)
    v16 = (llvm::Type *)a9;
  else
    v16 = (llvm::Type *)a10;
  if (a11)
    v17 = a10;
  else
    v17 = a9;
  v44 = v17;
  llvm::FixedVectorType::get(this, v16);
  v19 = v18;
  v20 = llvm::PointerType::get(this, (llvm::Type *)(*(_DWORD *)(*(_QWORD *)a4 + 8) >> 8));
  v52[8] = 257;
  v21 = (uint64_t)&v50;
  v22 = (uint64_t *)sub_1C5098D9C(a12, a4, v20, (uint64_t)&v50);
  v23 = 0;
  v50 = v52;
  v51 = 0x1000000000;
  v53 = 0uLL;
  v54 = dword_1ED821DA8 == 0;
  do
  {
    v24 = *(llvm::Type **)a6;
    if ((*(_DWORD *)(*(_QWORD *)a6 + 8) & 0xFE) == 0x12)
      v24 = (llvm::Type *)**((_QWORD **)v24 + 2);
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v24);
    v27 = (_QWORD *)a12[8];
    LODWORD(v47) = PrimitiveSizeInBits;
    if (PrimitiveSizeInBits <= 63)
    {
      if (PrimitiveSizeInBits <= 31)
      {
        switch(PrimitiveSizeInBits)
        {
          case 16:
            v28 = *v27 + 1936;
            goto LABEL_18;
          case 8:
            v28 = *v27 + 1912;
            goto LABEL_18;
          case 1:
            v28 = *v27 + 1888;
            goto LABEL_18;
        }
      }
      else if (PrimitiveSizeInBits == 32)
      {
        v28 = *v27 + 1960;
        goto LABEL_18;
      }
    }
    else
    {
      if (PrimitiveSizeInBits == 64)
      {
        v28 = *v27 + 1984;
        goto LABEL_18;
      }
      if (PrimitiveSizeInBits == 128)
      {
        v28 = *v27 + 2008;
        goto LABEL_18;
      }
    }
    v38 = sub_1C5270984(*v27 + 2168, &v47);
    v28 = *((_QWORD *)v38 + 1);
    if (!v28)
    {
      v42 = v38;
      v28 = sub_1C484358C(*v27 + 2040, 24, 3);
      v39 = (int)v47;
      *(_QWORD *)v28 = v27;
      *(_QWORD *)(v28 + 16) = 0;
      *(_DWORD *)(v28 + 8) = (v39 << 8) | 0xD;
      *(_DWORD *)(v28 + 12) = 0;
      *((_QWORD *)v42 + 1) = v28;
    }
LABEL_18:
    v29 = *(llvm::ConstantInt **)v28;
    v30 = *(_DWORD *)(v28 + 8);
    v48 = v30 >> 8;
    if (v30 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v47, v23, 0);
    }
    else
    {
      if (v30 <= 0xFF)
        v31 = 0;
      else
        v31 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v30);
      v47 = (const char *)(v31 & v23);
    }
    v32 = llvm::ConstantInt::get(v29, (llvm::LLVMContext *)&v47, v26);
    if (v48 >= 0x41 && v47)
      MEMORY[0x1CAA32F9C](v47, 0x1000C8000313F17);
    v33 = sub_1C5BC0240(v22, (uint64_t)v32, a6, v16, this, a12);
    v34 = sub_1C5BC035C(a2, v23, a6, (uint64_t)this, a5);
    v47 = "col.load";
    v49 = 259;
    v35 = v21 & 0xFFFFFFFFFFFF0000 | v34;
    v21 = v35 | 0x100;
    v36 = sub_1C506D920(a12, v19, (uint64_t)v33, (unsigned __int16)v35 | 0x100u, a7, (uint64_t)&v47);
    v37 = v51;
    if (v51 >= (unint64_t)HIDWORD(v51))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)v52, v51 + 1, 8);
      v37 = v51;
    }
    *((_QWORD *)v50 + v37) = v36;
    LODWORD(v51) = v51 + 1;
    ++v23;
  }
  while (v44 != v23);
  v40 = sub_1C5BBDA28(a2, **(_QWORD **)v50);
  v41 = v51;
  DWORD1(v53) += v51 * v40;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x1000000000;
  if (v41)
    sub_1C49EEBE4(a1, (uint64_t)&v50);
  *(_OWORD *)(a1 + 144) = v53;
  *(_BYTE *)(a1 + 160) = v54;
  if (v50 != v52)
    free(v50);
}

unsigned __int8 *sub_1C5BC0240(uint64_t *a1, uint64_t a2, uint64_t a3, llvm::Type *a4, llvm::GetElementPtrInst *a5, uint64_t *a6)
{
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  llvm::APInt *v13;
  unsigned int v14;
  llvm::PointerType *v15;
  uint64_t v16;
  _QWORD v18[4];
  __int16 v19;

  v9 = a1;
  v10 = *(_DWORD *)(*a1 + 8);
  v18[0] = "vec.start";
  v19 = 259;
  v11 = sub_1C4EC4040((uint64_t)a6, a2, a3, (uint64_t)v18, 0, 0);
  v12 = v11;
  if (*(_BYTE *)(v11 + 16) != 16)
    goto LABEL_4;
  v13 = (llvm::APInt *)(v11 + 24);
  v14 = *(_DWORD *)(v12 + 32);
  if (v14 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(v13) == v14)
      goto LABEL_5;
    goto LABEL_4;
  }
  if (*(_QWORD *)v13)
  {
LABEL_4:
    v18[0] = "vec.gep";
    v19 = 259;
    v9 = (uint64_t *)sub_1C4867B70(a6, a5, v9, v12, (uint64_t)v18);
  }
LABEL_5:
  llvm::FixedVectorType::get(a5, a4);
  v16 = llvm::PointerType::get(v15, (llvm::Type *)(v10 >> 8));
  v18[0] = "vec.cast";
  v19 = 259;
  return sub_1C5098D9C(a6, (unsigned __int8 *)v9, v16, (uint64_t)v18);
}

uint64_t sub_1C5BC035C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;

  v9 = a5;
  if ((a5 & 0xFF00) == 0)
  {
    llvm::DataLayout::getAlignment(*(_QWORD *)(a1 + 8), a4);
    v9 = v10;
  }
  if (a2)
  {
    sub_1C4768AD0(*(_QWORD *)(a1 + 8), a4);
    if (a3 && *(_BYTE *)(a3 + 16) == 16)
    {
      v13 = (_QWORD *)(a3 + 24);
      if (*(_DWORD *)(a3 + 32) >= 0x41u)
        v13 = (_QWORD *)*v13;
      v14 = *v13 * v11;
      if ((_DWORD)v12 == 1)
      v15 = (v14 >> 3) * a2;
    }
    else
    {
      if ((_DWORD)v12 == 1)
      {
        v17 = v11;
        v11 = v17;
      }
      v15 = v11 >> 3;
    }
    return 63 - __clz((v15 | (1 << v9)) & -(uint64_t)(v15 | (1 << v9)));
  }
  return v9;
}

void sub_1C5BC0464(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, __int16 a8, uint64_t *a9)
{
  uint64_t v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Type *v21;
  int PrimitiveSizeInBits;
  const llvm::APInt *v23;
  _QWORD *v24;
  _QWORD *v25;
  llvm::ConstantInt *v26;
  unsigned int v27;
  unint64_t v28;
  llvm::ValueHandleBase *v29;
  unsigned __int8 *v30;
  uint64_t *v31;
  unint64_t v32;
  _DWORD *v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t **v38;
  uint64_t *v39;
  void *v42;
  uint64_t v43;
  _WORD v44[64];
  __int128 v45;
  BOOL v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v15 = llvm::PointerType::get(*(llvm::PointerType **)(a3 + 24), (llvm::Type *)(*(_DWORD *)(*(_QWORD *)a5 + 8) >> 8));
  v44[8] = 257;
  v39 = (uint64_t *)sub_1C5098D9C(a9, a5, v15, (uint64_t)&v42);
  v16 = *(uint64_t ***)a4;
  v17 = a4[2];
  if ((_DWORD)v17)
  {
    v37 = a1;
    v38 = *(uint64_t ***)a4;
    v18 = 0;
    v19 = (unsigned __int16)a6;
    v20 = 8 * v17;
    while (1)
    {
      v21 = *(llvm::Type **)a7;
      if ((*(_DWORD *)(*(_QWORD *)a7 + 8) & 0xFE) == 0x12)
        v21 = (llvm::Type *)**((_QWORD **)v21 + 2);
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v21);
      v24 = (_QWORD *)a9[8];
      LODWORD(v42) = PrimitiveSizeInBits;
      if (PrimitiveSizeInBits <= 63)
      {
        if (PrimitiveSizeInBits <= 31)
        {
          switch(PrimitiveSizeInBits)
          {
            case 16:
              v25 = (_QWORD *)(*v24 + 1936);
              break;
            case 8:
              v25 = (_QWORD *)(*v24 + 1912);
              break;
            case 1:
              v25 = (_QWORD *)(*v24 + 1888);
              break;
            default:
LABEL_27:
              v33 = sub_1C5270984(*v24 + 2168, &v42);
              v25 = (_QWORD *)*((_QWORD *)v33 + 1);
              if (!v25)
              {
                v25 = (_QWORD *)sub_1C484358C(*v24 + 2040, 24, 3);
                v34 = (int)v42;
                *v25 = v24;
                v25[2] = 0;
                v25[1] = (v34 << 8) | 0xDu;
                *((_QWORD *)v33 + 1) = v25;
              }
              break;
          }
        }
        else
        {
          if (PrimitiveSizeInBits != 32)
            goto LABEL_27;
          v25 = (_QWORD *)(*v24 + 1960);
        }
      }
      else if (PrimitiveSizeInBits == 64)
      {
        v25 = (_QWORD *)(*v24 + 1984);
      }
      else
      {
        if (PrimitiveSizeInBits != 128)
          goto LABEL_27;
        v25 = (_QWORD *)(*v24 + 2008);
      }
      v26 = (llvm::ConstantInt *)*v25;
      v27 = *((_DWORD *)v25 + 2);
      LODWORD(v43) = v27 >> 8;
      if (v27 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v42, v18, 0);
      }
      else
      {
        if (v27 <= 0xFF)
          v28 = 0;
        else
          v28 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v27);
        v42 = (void *)(v28 & v18);
      }
      v29 = llvm::ConstantInt::get(v26, (llvm::LLVMContext *)&v42, v23);
      if (v43 >= 0x41 && v42)
        MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
      v30 = sub_1C5BC0240(v39, (uint64_t)v29, a7, (llvm::Type *)*(unsigned int *)(***(_QWORD ***)a4 + 32), *(llvm::GetElementPtrInst **)(a3 + 24), a9);
      v31 = v38[v18];
      v32 = a6 & 0xFFFFFFFFFFFF0000 | sub_1C5BC035C(a2, v18, a7, *(_QWORD *)(a3 + 24), v19);
      a6 = v32 | 0x100;
      sub_1C509CCE8(a9, v31, (uint64_t)v30, v32 | 0x100, a8);
      ++v18;
      v20 -= 8;
      if (!v20)
      {
        v16 = *(uint64_t ***)a4;
        a1 = v37;
        break;
      }
    }
  }
  v42 = v44;
  v43 = 0x1000000000;
  v45 = 0uLL;
  v46 = dword_1ED821DA8 == 0;
  v35 = sub_1C5BBDA28(a2, **v16);
  v36 = v43;
  LODWORD(v45) = v45 + a4[2] * v35;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x1000000000;
  if (v36)
    sub_1C49EEBE4(a1, (uint64_t)&v42);
  *(_OWORD *)(a1 + 144) = v45;
  *(_BYTE *)(a1 + 160) = v46;
  if (v42 != v44)
    free(v42);
}

void sub_1C5BC07F4(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int16 a4, uint64_t a5, __int16 a6, uint64_t a7, char a8)
{
  int v16;
  void *v17[2];
  uint64_t v18;
  void *v19[2];
  _QWORD v20[16];

  v20[15] = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)v19, a2, 0, 0, 0);
  sub_1C5BBFE48((uint64_t)v17, a1, *(llvm::FixedVectorType **)(*(_QWORD *)a2 + 24), a3, a4, a5, a6, v16, a7, HIDWORD(a7), a8, (uint64_t *)v19);
  sub_1C5BBD150(a1, a2, (_BYTE **)v17, (uint64_t)v19);
  if (v17[0] != &v18)
    free(v17[0]);
  if (v19[0] != v20)
    free(v19[0]);
}

void sub_1C5BC090C(uint64_t a1, uint64_t a2, llvm::PoisonValue **a3, unsigned __int8 *a4, unsigned __int16 a5, uint64_t a6, __int16 a7, uint64_t a8, uint64_t a9, int a10)
{
  llvm::PoisonValue *v17;
  uint64_t v18;
  int v19;
  void *v20[2];
  _OWORD v21[9];
  char v22;
  void *v23[2];
  uint64_t v24;
  void *v25;
  int v26;
  _OWORD v27[9];
  char v28;
  void *v29[2];
  _QWORD v30[16];

  v30[15] = *MEMORY[0x1E0C80C00];
  v18 = a9;
  v19 = a10;
  sub_1C4773D54((uint64_t)v29, a2, 0, 0, 0);
  sub_1C5BBC734((uint64_t)&v25, a1, a3, (uint64_t)&v18, (uint64_t)v29);
  v17 = *a3;
  v20[0] = v21;
  v20[1] = (void *)0x1000000000;
  if (v26)
    sub_1C49EEBE4((uint64_t)v20, (uint64_t)&v25);
  v21[8] = v27[8];
  v22 = v28;
  sub_1C5BC0464((uint64_t)v23, a1, (uint64_t)v17, (unsigned int *)v20, a4, a5, a6, a7, (uint64_t *)v29);
  sub_1C5BBD150(a1, a2, (_BYTE **)v23, (uint64_t)v29);
  if (v23[0] != &v24)
    free(v23[0]);
  if (v20[0] != v21)
    free(v20[0]);
  if (v25 != v27)
    free(v25);
  if (v29[0] != v30)
    free(v29[0]);
}

_QWORD *sub_1C5BC0AAC(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  int v24;
  _BYTE v25[16];
  _QWORD v26[3];

  v7 = (uint64_t)result;
  v8 = a3 + 8;
  if ((*(_BYTE *)a3 & 1) != 0)
  {
    v9 = 32;
  }
  else
  {
    v9 = *(_DWORD *)(a3 + 16);
    if (!v9)
      return result;
    v8 = *(_QWORD *)(a3 + 8);
  }
  v10 = v9 - 1;
  v11 = v10 & ((a2 >> 4) ^ (a2 >> 9));
  v12 = *(_QWORD *)(v8 + 8 * v11);
  if (v12 == a2)
  {
LABEL_9:
    v20 = a2;
    v21 = v25;
    v22 = v25;
    v23 = 2;
    v24 = 0;
    sub_1C631F824((uint64_t)v26, a4, &v20, (uint64_t *)&v21);
    if (v22 != v21)
      free(v22);
    result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(v26[0] + 8), v7);
    v15 = *(_DWORD *)(a2 + 20);
    if ((v15 & 0x40000000) != 0)
    {
      v17 = *(uint64_t **)(a2 - 8);
      v16 = v15 & 0x7FFFFFF;
      if (!v16)
        return result;
    }
    else
    {
      v16 = v15 & 0x7FFFFFF;
      v17 = (uint64_t *)(a2 - 32 * v16);
      if (!v16)
        return result;
    }
    v18 = 32 * v16;
    do
    {
      v19 = *v17;
      v17 += 4;
      result = (_QWORD *)sub_1C5BC0AAC(v7, v19, a3, a4);
      v18 -= 32;
    }
    while (v18);
  }
  else
  {
    v13 = 1;
    while (v12 != -4096)
    {
      v14 = v11 + v13++;
      v11 = v14 & v10;
      v12 = *(_QWORD *)(v8 + 8 * v11);
      if (v12 == a2)
        goto LABEL_9;
    }
  }
  return result;
}

uint64_t sub_1C5BC0C08(uint64_t result, uint64_t **a2, uint64_t a3, llvm::SmallPtrSetImplBase *a4, uint64_t a5, uint64_t a6)
{
  _OWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  int32x4_t v26;
  int32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32[2];

  v11 = (_OWORD *)result;
  v12 = a5 + 8;
  if ((*(_BYTE *)a5 & 1) != 0)
  {
    v13 = 32;
  }
  else
  {
    v13 = *(_DWORD *)(a5 + 16);
    if (!v13)
      goto LABEL_10;
    v12 = *(_QWORD *)(a5 + 8);
  }
  v14 = v13 - 1;
  v15 = v14 & ((a3 >> 4) ^ (a3 >> 9));
  v16 = *(_QWORD *)(v12 + 8 * v15);
  if (v16 != a3)
  {
    v17 = 1;
    while (v16 != -4096)
    {
      v18 = v15 + v17++;
      v15 = v18 & v14;
      v16 = *(_QWORD *)(v12 + 8 * v15);
      if (v16 == a3)
        goto LABEL_9;
    }
    goto LABEL_10;
  }
LABEL_9:
  result = (uint64_t)sub_1C4774094(a4, a3);
  if (!v19)
  {
LABEL_10:
    *v11 = 0u;
    v11[1] = 0u;
    return result;
  }
  v32[0].i64[0] = 0;
  if (sub_1C61A45F4(*(_QWORD *)a6, *(_DWORD *)(a6 + 16), a3, v32))
    v20 = v32[0].i64[0];
  else
    v20 = *(_QWORD *)a6 + 56 * *(unsigned int *)(a6 + 16);
  result = sub_1C5BC1178(*a2, a3);
  v21 = *(int8x16_t *)(result + 152);
  v22 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(*(_DWORD *)(v20 + 28) - *(_DWORD *)(v20 + 32) == 1)), 0x1FuLL));
  v23 = *(_DWORD *)(a3 + 20);
  if ((v23 & 0x40000000) != 0)
  {
    v25 = *(uint64_t **)(a3 - 8);
    v24 = v23 & 0x7FFFFFF;
  }
  else
  {
    v24 = v23 & 0x7FFFFFF;
    v25 = (uint64_t *)(a3 - 32 * v24);
  }
  v26 = (int32x4_t)vandq_s8(v21, v22);
  v27 = (int32x4_t)vbicq_s8(v21, v22);
  if (v24)
  {
    v28 = 32 * v24;
    do
    {
      v30 = v27;
      v31 = v26;
      v29 = *v25;
      v25 += 4;
      result = sub_1C5BC0C08(v32, a2, v29, a4, a5, a6);
      v26 = vaddq_s32(v32[0], v31);
      v27 = vaddq_s32(v32[1], v30);
      v28 -= 32;
    }
    while (v28);
  }
  *v11 = v26;
  v11[1] = v27;
  return result;
}

void sub_1C5BC0DA8(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  void *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void *v20;
  void **v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  char *v25;
  char *i;
  char *v27;
  int v28;
  void *__p;
  char *v30;
  char *v31;
  char *v32;
  uint64_t *v33;

  v4 = a1[2];
  v5 = a1[1];
  if (v5 < v4)
  {
    *(_QWORD *)v5 = *(_QWORD *)a2;
    v6 = (void *)(v5 + 24);
    *(_QWORD *)(v5 + 8) = v5 + 24;
    *(_QWORD *)(v5 + 16) = 0x800000000;
    v7 = *(_DWORD *)(a2 + 16);
    if (v7)
      v8 = v5 == a2;
    else
      v8 = 1;
    if (v8)
      goto LABEL_12;
    v9 = *(_QWORD *)(a2 + 8);
    v10 = (const void *)(a2 + 24);
    if (v9 != a2 + 24)
    {
      *(_QWORD *)(v5 + 8) = v9;
      *(_DWORD *)(v5 + 16) = v7;
      *(_DWORD *)(v5 + 20) = *(_DWORD *)(a2 + 20);
      *(_QWORD *)(a2 + 8) = v10;
      *(_DWORD *)(a2 + 20) = 0;
      goto LABEL_11;
    }
    if (v7 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 8, v5 + 24, *(unsigned int *)(a2 + 16), 8);
      v11 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v11)
        goto LABEL_10;
      v10 = *(const void **)(a2 + 8);
      v6 = *(void **)(v5 + 8);
    }
    else
    {
      v11 = *(unsigned int *)(a2 + 16);
    }
    memcpy(v6, v10, 8 * v11);
LABEL_10:
    *(_DWORD *)(v5 + 16) = v7;
LABEL_11:
    *(_DWORD *)(a2 + 16) = 0;
LABEL_12:
    v12 = v5 + 88;
    goto LABEL_13;
  }
  v13 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - *a1) >> 3);
  if ((unint64_t)(v13 + 1) > 0x2E8BA2E8BA2E8BALL)
    abort();
  v14 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v4 - *a1) >> 3);
  v15 = 2 * v14;
  if (2 * v14 <= v13 + 1)
    v15 = v13 + 1;
  if (v14 >= 0x1745D1745D1745DLL)
    v16 = 0x2E8BA2E8BA2E8BALL;
  else
    v16 = v15;
  v33 = a1 + 2;
  if (v16 > 0x2E8BA2E8BA2E8BALL)
    sub_1C4764EE4();
  v17 = 88 * v16;
  v18 = (char *)operator new(88 * v16);
  v19 = &v18[88 * v13];
  __p = v18;
  v30 = v19;
  v32 = &v18[v17];
  *(_QWORD *)v19 = *(_QWORD *)a2;
  v20 = v19 + 24;
  *((_QWORD *)v19 + 1) = v19 + 24;
  v21 = (void **)(v19 + 8);
  *((_QWORD *)v19 + 2) = 0x800000000;
  v22 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v22 && v21 != (void **)(a2 + 8))
  {
    v23 = *(void **)(a2 + 8);
    if (v23 != (void *)(a2 + 24))
    {
      *v21 = v23;
      v28 = *(_DWORD *)(a2 + 20);
      *((_DWORD *)v19 + 4) = v22;
      *((_DWORD *)v19 + 5) = v28;
      *(_QWORD *)(a2 + 8) = a2 + 24;
      *(_DWORD *)(a2 + 20) = 0;
      goto LABEL_28;
    }
    if (v22 >= 9)
    {
      *((_DWORD *)v19 + 4) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v19 + 8), (uint64_t)(v19 + 24), v22, 8);
      v24 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v24)
        goto LABEL_27;
      v23 = *(void **)(a2 + 8);
      v20 = *v21;
    }
    else
    {
      v24 = *(unsigned int *)(a2 + 16);
    }
    memcpy(v20, v23, 8 * v24);
LABEL_27:
    *((_DWORD *)v19 + 4) = v22;
LABEL_28:
    *(_DWORD *)(a2 + 16) = 0;
  }
  v31 = v19 + 88;
  sub_1C631F6A8(a1, &__p);
  v12 = a1[1];
  v25 = v30;
  for (i = v31; i != v25; i -= 88)
  {
    v27 = (char *)*((_QWORD *)i - 10);
    if (i - 64 != v27)
      free(v27);
  }
  if (__p)
    operator delete(__p);
LABEL_13:
  a1[1] = v12;
}

_QWORD *sub_1C5BC1058(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v6 = a2 + 8;
  if ((*(_DWORD *)a2 & 1) != 0)
  {
    v7 = 32;
    v8 = a2 + 8;
  }
  else
  {
    v7 = *(_DWORD *)(a2 + 16);
    if (!v7)
    {
      v18 = 0;
      goto LABEL_18;
    }
    v8 = *(_QWORD *)(a2 + 8);
  }
  v9 = v7 - 1;
  v10 = ((*a3 >> 4) ^ (*a3 >> 9)) & v9;
  result = (_QWORD *)(v8 + 8 * v10);
  v12 = *result;
  if (*a3 == *result)
  {
LABEL_13:
    if ((*(_DWORD *)a2 & 1) != 0)
    {
      v17 = 32;
    }
    else
    {
      v6 = *(_QWORD *)(a2 + 8);
      v17 = *(unsigned int *)(a2 + 16);
    }
    v21 = 0;
    v20 = v6 + 8 * v17;
    goto LABEL_21;
  }
  v13 = 0;
  v14 = 1;
  while (v12 != -4096)
  {
    if (v13)
      v15 = 0;
    else
      v15 = v12 == -8192;
    if (v15)
      v13 = result;
    v16 = v10 + v14++;
    v10 = v16 & v9;
    result = (_QWORD *)(v8 + 8 * v10);
    v12 = *result;
    if (*a3 == *result)
      goto LABEL_13;
  }
  if (v13)
    v18 = v13;
  else
    v18 = result;
LABEL_18:
  result = sub_1C4993C28(a2, (uint64_t)a3, a3, v18);
  *result = *a3;
  if ((*(_BYTE *)a2 & 1) != 0)
  {
    v19 = 32;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    v19 = *(unsigned int *)(a2 + 16);
  }
  v20 = v6 + 8 * v19;
  v21 = 1;
LABEL_21:
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 16) = v21;
  return result;
}

uint64_t sub_1C5BC1178(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_8;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    return a1[4];
  else
    return a1[3] + 176 * *((unsigned int *)v5 + 2);
}

void sub_1C5BC1200(uint64_t a1, uint64_t a2, int a3, char a4, char a5)
{
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  uint64_t ***v14;
  void *v15;
  llvm::raw_ostream *v16;
  char *v17;
  size_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  const char *OpcodeName;
  size_t v41;
  size_t v42;
  __int128 *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 *v46;
  size_t v47;
  void *v48;
  _BYTE *v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unsigned __int8 *v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned __int8 *v62;
  int v63;
  unsigned int v64;
  unsigned __int8 *v65;
  unsigned __int8 *UnderlyingObject;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 *v79;
  int v80;
  int v81;
  const char *v82;
  size_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  _WORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 **v92;
  unsigned __int8 *v93;
  int v94;
  int v95;
  size_t *v96;
  const void *v97;
  size_t v98;
  size_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned __int8 *v106;
  int v107;
  int v108;
  uint64_t v109;
  int v110;
  unsigned int v111;
  unsigned __int8 *v112;
  int v113;
  unsigned int v114;
  char *v115;
  uint64_t v116;
  std::string *v117;
  std::string::size_type v118;
  uint64_t v119;
  unint64_t v120;
  const void *v121;
  std::string::size_type v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  BOOL v127;
  std::string::size_type v128;
  std::string::size_type v129;
  std::string *v130;
  _WORD *v131;
  _BYTE *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t ****v139;
  uint64_t ***v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t *v147;
  unint64_t *v148;
  unint64_t v149;
  std::string *v150;
  std::string::size_type v151;
  std::string *v152;
  std::string::size_type v153;
  std::string *v154;
  std::string::size_type size;
  std::string *v156;
  std::string::size_type v157;
  std::string *v158;
  const char *v159;
  __int128 *p_dst;
  size_t v161;
  void *v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t ***v165;
  size_t v166;
  unint64_t v167;
  void *v169;
  uint64_t v170;
  char *v171;
  size_t v172;
  uint64_t v173;
  char *v174;
  size_t v175;
  _BYTE *v176;
  uint64_t v177;
  unsigned int v178;
  unint64_t v179;
  uint64_t v180;
  std::string v181;
  std::string v182;
  std::string v183;
  unsigned __int8 *v184;
  __int128 __dst;
  const char *v186;
  uint64_t v187;
  const char *v188;
  char v189;
  uint64_t v190;
  int v191;
  std::string *p_p;
  std::string __p;
  char *v194;
  uint64_t v195;
  _BYTE v196[64];
  std::string v197;
  _QWORD v198[7];

  v198[5] = *MEMORY[0x1E0C80C00];
  sub_1C5BC25D4((llvm::raw_ostream *)a1, a3);
  v194 = v196;
  v195 = 0x800000000;
  if ((a5 & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    v133 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)&__dst = 0;
    if (sub_1C61A45F4(*(_QWORD *)v133, *(_DWORD *)(v133 + 16), a2, &__dst))
      v134 = __dst;
    else
      v134 = *(_QWORD *)v133 + 56 * *(unsigned int *)(v133 + 16);
    v143 = *(_QWORD *)(v134 + 16);
    v144 = 24;
    if (v143 == *(_QWORD *)(v134 + 8))
      v144 = 28;
    v145 = *(unsigned int *)(v134 + v144);
    if ((_DWORD)v145)
    {
      v146 = 8 * v145;
      v147 = *(unint64_t **)(v134 + 16);
      while (*v147 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v147;
        v146 -= 8;
        if (!v146)
          goto LABEL_256;
      }
    }
    else
    {
      v147 = *(unint64_t **)(v134 + 16);
    }
    v148 = (unint64_t *)(v143 + 8 * v145);
    if (v147 != v148)
    {
      v149 = *v147;
LABEL_221:
      if (v149 != *(_QWORD *)(a1 + 144))
      {
        v184 = *(unsigned __int8 **)(v149 + 48);
        llvm::MetadataTracking::track((uint64_t)&v184, v184, 2);
        std::to_string(&v182, *((_DWORD *)v184 + 1));
        v150 = std::string::insert(&v182, 0, "shared with remark at line ");
        v151 = v150->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v183.__r_.__value_.__l.__data_ = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
        v183.__r_.__value_.__r.__words[2] = v151;
        v150->__r_.__value_.__l.__size_ = 0;
        v150->__r_.__value_.__r.__words[2] = 0;
        v150->__r_.__value_.__r.__words[0] = 0;
        v152 = std::string::append(&v183, " column ");
        v153 = v152->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v152->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v153;
        v152->__r_.__value_.__l.__size_ = 0;
        v152->__r_.__value_.__r.__words[2] = 0;
        v152->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v181, *((unsigned __int16 *)v184 + 1));
        if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v154 = &v181;
        else
          v154 = (std::string *)v181.__r_.__value_.__r.__words[0];
        if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&v181.__r_.__value_.__s + 23) & 0x7F;
        else
          size = v181.__r_.__value_.__l.__size_;
        v156 = std::string::append(&__p, (const std::string::value_type *)v154, size);
        v157 = v156->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v197.__r_.__value_.__l.__data_ = *(_OWORD *)&v156->__r_.__value_.__l.__data_;
        v197.__r_.__value_.__r.__words[2] = v157;
        v156->__r_.__value_.__l.__size_ = 0;
        v156->__r_.__value_.__r.__words[2] = 0;
        v156->__r_.__value_.__r.__words[0] = 0;
        v158 = std::string::append(&v197, " (");
        v159 = (const char *)v158->__r_.__value_.__r.__words[2];
        __dst = *(_OWORD *)&v158->__r_.__value_.__l.__data_;
        v186 = v159;
        v158->__r_.__value_.__l.__size_ = 0;
        v158->__r_.__value_.__r.__words[2] = 0;
        v158->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v186) >= 0)
          p_dst = &__dst;
        else
          p_dst = (__int128 *)__dst;
        if (SHIBYTE(v186) >= 0)
          v161 = HIBYTE(v186) & 0x7F;
        else
          v161 = *((_QWORD *)&__dst + 1);
        *(_DWORD *)(a1 + 104) += v161;
        v162 = *(void **)(a1 + 64);
        if (v161 <= *(_QWORD *)(a1 + 56) - (_QWORD)v162)
        {
          if (v161)
          {
            memcpy(v162, p_dst, v161);
            *(_QWORD *)(a1 + 64) += v161;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), (const char *)p_dst, v161);
        }
        if (SHIBYTE(v186) < 0)
          operator delete((void *)__dst);
        if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v197.__r_.__value_.__l.__data_);
        if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v181.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v183.__r_.__value_.__l.__data_);
        if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v182.__r_.__value_.__l.__data_);
        if (v184)
          llvm::MetadataTracking::untrack((uint64_t)&v184, v184);
      }
      v163 = v147 + 1;
      while (v163 != v148)
      {
        v164 = *v163++;
        v149 = v164;
        if (v164 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v147 = v163 - 1;
          goto LABEL_221;
        }
      }
    }
LABEL_256:
    v10 = (*(_DWORD *)(v134 + 28) - *(_DWORD *)(v134 + 32)) > 1;
  }
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 152), a2);
  v180 = v11;
  if (!v11 && (a4 & 1) == 0)
  {
    *(_DWORD *)(a1 + 104) += 9;
    v12 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)(*(_QWORD *)(a1 + 56) - v12) > 8)
    {
      *(_BYTE *)(v12 + 8) = 32;
      *(_QWORD *)v12 = *(_QWORD *)"(reused) ";
      *(_QWORD *)(a1 + 64) += 9;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), "(reused) ", 9uLL);
    }
  }
  v13 = *(unsigned __int8 *)(a2 + 16);
  v178 = v10;
  if (!a2 || v13 != 84)
  {
    if (v13 == 77)
    {
      *(_DWORD *)(a1 + 104) += 6;
      v19 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)(*(_QWORD *)(a1 + 56) - v19) > 5)
      {
        *(_WORD *)(v19 + 4) = 30825;
        *(_DWORD *)v19 = 1920229741;
        *(_QWORD *)(a1 + 64) += 6;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), "matrix", 6uLL);
      }
      goto LABEL_195;
    }
    v20 = *(_DWORD *)(a2 + 20);
    if ((v20 & 0x40000000) != 0)
    {
      v22 = *(char **)(a2 - 8);
      v21 = v20 & 0x7FFFFFF;
    }
    else
    {
      v21 = v20 & 0x7FFFFFF;
      v22 = (char *)(a2 - 32 * v21);
    }
    sub_1C5BC269C((uint64_t)&v194, v22, &v22[32 * v21]);
    OpcodeName = llvm::Instruction::getOpcodeName((llvm::Instruction *)(*(unsigned __int8 *)(a2 + 16) - 28));
    v41 = strlen(OpcodeName);
    if (v41 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_281;
    v42 = v41;
    if (v41 >= 0x17)
    {
      v44 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v41 | 7) != 0x17)
        v44 = v41 | 7;
      v45 = v44 + 1;
      v43 = (__int128 *)operator new(v44 + 1);
      *((_QWORD *)&__dst + 1) = v42;
      v186 = (const char *)(v45 | 0x8000000000000000);
      *(_QWORD *)&__dst = v43;
    }
    else
    {
      HIBYTE(v186) = v41;
      v43 = &__dst;
      if (!v41)
        goto LABEL_50;
    }
    memmove(v43, OpcodeName, v42);
LABEL_50:
    *((_BYTE *)v43 + v42) = 0;
    if (SHIBYTE(v186) >= 0)
      v46 = &__dst;
    else
      v46 = (__int128 *)__dst;
    if (SHIBYTE(v186) >= 0)
      v47 = HIBYTE(v186) & 0x7F;
    else
      v47 = *((_QWORD *)&__dst + 1);
    *(_DWORD *)(a1 + 104) += v47;
    v48 = *(void **)(a1 + 64);
    if (v47 <= *(_QWORD *)(a1 + 56) - (_QWORD)v48)
    {
      if (v47)
      {
        memcpy(v48, v46, v47);
        *(_QWORD *)(a1 + 64) += v47;
      }
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), (const char *)v46, v47);
    }
    if (SHIBYTE(v186) < 0)
      operator delete((void *)__dst);
    goto LABEL_62;
  }
  v14 = *(uint64_t ****)(a2 - 32);
  if (v14 && !*((_BYTE *)v14 + 16) && v14[3] == *(uint64_t ***)(a2 + 72))
  {
    if ((*((_BYTE *)v14 + 23) & 0x10) == 0)
    {
      v166 = 0;
      v17 = &byte_1C871356D;
LABEL_263:
      *(_DWORD *)(a1 + 104) += v166;
      v169 = *(void **)(a1 + 64);
      if (v166 > *(_QWORD *)(a1 + 56) - (_QWORD)v169)
      {
        v16 = (llvm::raw_ostream *)(a1 + 32);
        v18 = v166;
        goto LABEL_15;
      }
      if (!v166)
        goto LABEL_23;
      memcpy(v169, v17, v166);
      v23 = *(_QWORD *)(a1 + 64) + v166;
LABEL_22:
      *(_QWORD *)(a1 + 64) = v23;
      goto LABEL_23;
    }
    v135 = ***v14;
    v136 = *(_QWORD *)(v135 + 152);
    v137 = *(unsigned int *)(v135 + 168);
    if ((_DWORD)v137)
    {
      LODWORD(v138) = (v137 - 1) & ((v14 >> 4) ^ (v14 >> 9));
      v139 = (uint64_t ****)(v136 + 16 * v138);
      v140 = *v139;
      if (*v139 == v14)
      {
LABEL_258:
        v165 = v139[1];
        v167 = (unint64_t)*v165;
        v17 = (char *)(v165 + 2);
        v166 = v167;
        if (v167 >= 0xB && *(_QWORD *)v17 == 0x74616D2E6D766C6CLL && *(_QWORD *)(v17 + 3) == 0x78697274616D2E6DLL)
        {
          v170 = *((unsigned int *)v14 + 9);
          v171 = off_1E814EB28[v170];
          if (v171)
            v172 = strlen(off_1E814EB28[v170]);
          else
            v172 = 0;
          v173 = 12;
          if (v172 < 0xC)
            v173 = v172;
          v174 = &v171[v173];
          v175 = v172 - v173;
          *(_DWORD *)(a1 + 104) += v172 - v173;
          v176 = *(_BYTE **)(a1 + 64);
          if (v172 - v173 <= *(_QWORD *)(a1 + 56) - (_QWORD)v176)
          {
            if (v172 >= 0xD)
            {
              memcpy(v176, v174, v175);
              v176 = (_BYTE *)(*(_QWORD *)(a1 + 64) + v175);
              *(_QWORD *)(a1 + 64) = v176;
            }
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), v174, v175);
            v176 = *(_BYTE **)(a1 + 64);
          }
          ++*(_DWORD *)(a1 + 104);
          if (*(_BYTE **)(a1 + 56) == v176)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), ".", 1uLL);
          }
          else
          {
            *v176 = 46;
            ++*(_QWORD *)(a1 + 64);
          }
          memset(&v197, 0, sizeof(v197));
          DWORD2(__dst) = 0;
          v189 = 0;
          v190 = 0;
          *(_QWORD *)&__dst = &unk_1E81A7208;
          p_p = &v197;
          v191 = 0;
          v187 = 0;
          v188 = 0;
          v186 = 0;
          __asm { BR              X10 }
        }
        goto LABEL_263;
      }
      v141 = 1;
      while (v140 != (uint64_t ***)-4096)
      {
        v142 = v138 + v141++;
        v138 = v142 & (v137 - 1);
        v140 = *(uint64_t ****)(v136 + 16 * v138);
        if (v140 == v14)
        {
          v139 = (uint64_t ****)(v136 + 16 * v138);
          goto LABEL_258;
        }
      }
    }
    v139 = (uint64_t ****)(v136 + 16 * v137);
    goto LABEL_258;
  }
  *(_DWORD *)(a1 + 104) += 14;
  v15 = *(void **)(a1 + 64);
  if (*(_QWORD *)(a1 + 56) - (_QWORD)v15 > 0xDuLL)
  {
    qmemcpy(v15, "<no called fn>", 14);
    v23 = *(_QWORD *)(a1 + 64) + 14;
    goto LABEL_22;
  }
  v16 = (llvm::raw_ostream *)(a1 + 32);
  v17 = "<no called fn>";
  v18 = 14;
LABEL_15:
  llvm::raw_ostream::write(v16, v17, v18);
LABEL_23:
  v24 = *(_DWORD *)(a2 + 20);
  v25 = v24 & 0x7FFFFFF;
  v26 = (_QWORD *)(a2 - 32 * v25);
  v27 = *(unsigned __int8 *)(a2 + 16);
  if (v27 == 84)
  {
    v28 = 0;
  }
  else if (v27 == 39)
  {
    v28 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    v28 = 2;
  }
  if (v24 < 0 && (v177 = *(v26 - 1), (v177 & 0xFFFFFFFF0) != 0))
    v29 = (*((_DWORD *)v26 - 3) - *(_DWORD *)((char *)v26 - v177));
  else
    v29 = 0;
  v30 = *(_QWORD *)(a2 - 32);
  if (v30
    && !*(_BYTE *)(v30 + 16)
    && *(_QWORD *)(v30 + 24) == *(_QWORD *)(a2 + 72)
    && (*(_BYTE *)(v30 + 33) & 0x20) != 0
    && (v31 = *(_DWORD *)(v30 + 36) - 188, v31 <= 3))
  {
    v32 = qword_1C866A500[v31];
  }
  else
  {
    v32 = 0;
  }
  v33 = a2 - 32 * v28 - 32 * v29 - 32 + 32 * v32;
  v34 = v33 - (_QWORD)v26;
  v35 = v195;
  v36 = v195 + ((v33 - (uint64_t)v26) >> 5);
  if (v36 > HIDWORD(v195))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v194, (uint64_t)v196, v36, 8);
    v35 = v195;
  }
  if (v26 != (_QWORD *)v33)
  {
    v37 = &v194[8 * v35];
    v38 = 32 * v32 + 32 * v25 - 32 * v28 - 32 * v29 - 32;
    do
    {
      v39 = *v26;
      v26 += 4;
      *(_QWORD *)v37 = v39;
      v37 += 8;
      v38 -= 32;
    }
    while (v38);
  }
  LODWORD(v195) = v35 + (v34 >> 5);
  v10 = v178;
LABEL_62:
  HIBYTE(v186) = 1;
  LOWORD(__dst) = 40;
  ++*(_DWORD *)(a1 + 104);
  v49 = *(_BYTE **)(a1 + 64);
  if (*(_BYTE **)(a1 + 56) == v49)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), (const char *)&__dst, 1uLL);
  }
  else
  {
    *v49 = 40;
    ++*(_QWORD *)(a1 + 64);
  }
  if (SHIBYTE(v186) < 0)
    operator delete((void *)__dst);
  v50 = 1;
  if (a2 && *(_BYTE *)(a2 + 16) == 84)
  {
    v51 = *(_QWORD *)(a2 - 32);
    if (v51 && !*(_BYTE *)(v51 + 16) && *(_QWORD *)(v51 + 24) == *(_QWORD *)(a2 + 72))
    {
      if (*(_DWORD *)(v51 + 36) == 188)
        v50 = 2;
      else
        v50 = 1;
    }
    else
    {
      v50 = 1;
    }
  }
  if (!(_DWORD)v195)
    goto LABEL_192;
  v52 = v194;
  v53 = &v194[8 * v195];
  v54 = (a3 + 1);
  v179 = v50;
  do
  {
    v55 = *(unsigned __int8 **)v52;
    if (v50 < v195)
    {
      v56 = *(_BYTE **)(a1 + 64);
      if (*(_BYTE **)(a1 + 56) == v56)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), "\n", 1uLL);
      }
      else
      {
        *v56 = 10;
        ++*(_QWORD *)(a1 + 64);
      }
      *(_DWORD *)(a1 + 104) = 0;
    }
    sub_1C5BC25D4((llvm::raw_ostream *)a1, v54);
    v57 = *(_QWORD *)(a1 + 136);
    v58 = v57 + 8;
    if ((*(_BYTE *)v57 & 1) != 0)
    {
      v59 = 32;
      goto LABEL_83;
    }
    v59 = *(_DWORD *)(v57 + 16);
    if (v59)
    {
      v58 = *(_QWORD *)(v57 + 8);
LABEL_83:
      v60 = v59 - 1;
      v61 = v60 & ((v55 >> 4) ^ (v55 >> 9));
      v62 = *(unsigned __int8 **)(v58 + 8 * v61);
      if (v55 == v62)
      {
LABEL_87:
        sub_1C5BC1200(a1, v55, v54, v180 == 0, v10);
        goto LABEL_179;
      }
      v63 = 1;
      while (v62 != (unsigned __int8 *)-4096)
      {
        v64 = v61 + v63++;
        v61 = v64 & v60;
        v62 = *(unsigned __int8 **)(v58 + 8 * v61);
        if (v55 == v62)
          goto LABEL_87;
      }
    }
    v65 = v55;
    while (1)
    {
      UnderlyingObject = v65;
      v67 = v65[16];
      if (!UnderlyingObject || (v67 - 62) <= 0xFFFFFFFD)
        break;
      v68 = -1;
LABEL_95:
      v65 = *(unsigned __int8 **)&UnderlyingObject[32 * v68];
      if (!v65)
        goto LABEL_96;
    }
    if (UnderlyingObject && v67 == 62)
    {
      v68 = -(uint64_t)(*((_DWORD *)UnderlyingObject + 5) & 0x7FFFFFF);
      goto LABEL_95;
    }
LABEL_96:
    v69 = *(unsigned __int8 *)(*(_QWORD *)UnderlyingObject + 8);
    if (v69 == 15)
    {
      UnderlyingObject = (unsigned __int8 *)llvm::getUnderlyingObject((llvm *)UnderlyingObject, (const llvm::Value *)6);
      v69 = *(unsigned __int8 *)(*(_QWORD *)UnderlyingObject + 8);
    }
    if (v69 != 15)
    {
      memset(&__p, 0, sizeof(__p));
      DWORD2(__dst) = 0;
      v189 = 0;
      v190 = 0;
      *(_QWORD *)&__dst = &unk_1E81A7208;
      p_p = &__p;
      v191 = 0;
      v187 = 0;
      v188 = 0;
      v186 = 0;
      v73 = UnderlyingObject[16];
      if (v73 == 16)
      {
        v197.__r_.__value_.__r.__words[0] = (std::string::size_type)v198;
        *(_OWORD *)&v197.__r_.__value_.__r.__words[1] = xmmword_1C64638D0;
        llvm::APInt::toString((uint64_t)(UnderlyingObject + 24), &v197, 0xAu, 1, 0);
        llvm::raw_ostream::write((llvm::raw_ostream *)&__dst, v197.__r_.__value_.__l.__data_, v197.__r_.__value_.__l.__size_);
        if (v197.__r_.__value_.__l.__data_ != (std::string::pointer)v198)
          free(v197.__r_.__value_.__l.__data_);
LABEL_154:
        v115 = v53;
        v116 = v188 - v186;
        if (v188 != v186)
        {
          v188 = v186;
          llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&__dst, v186, v116);
        }
        v117 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v117 = &__p;
        v118 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v118 = __p.__r_.__value_.__l.__size_;
        v183.__r_.__value_.__r.__words[0] = (std::string::size_type)v117;
        v183.__r_.__value_.__l.__size_ = v118;
        v119 = sub_1C534E9D8((uint64_t *)&v183, " \t\n\v\f\r", 6);
        if (v120 <= 0x7FFFFFFFFFFFFFF7)
        {
          v121 = (const void *)v119;
          v122 = v120;
          if (v120 >= 0x17)
          {
            v124 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v120 | 7) != 0x17)
              v124 = v120 | 7;
            v125 = v124 + 1;
            v123 = operator new(v124 + 1);
            v126 = v125 | 0x8000000000000000;
            v10 = v178;
            v197.__r_.__value_.__l.__size_ = v122;
            v197.__r_.__value_.__r.__words[2] = v126;
            v197.__r_.__value_.__r.__words[0] = (std::string::size_type)v123;
          }
          else
          {
            *((_BYTE *)&v197.__r_.__value_.__s + 23) = v120;
            v123 = &v197;
            if (!v120)
              goto LABEL_168;
          }
          memmove(v123, v121, v122);
LABEL_168:
          v53 = v115;
          *((_BYTE *)v123 + v122) = 0;
          v50 = v179;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p = v197;
          v127 = (v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
          v128 = v197.__r_.__value_.__r.__words[0];
          if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v129 = HIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x7F;
          else
            v129 = __p.__r_.__value_.__l.__size_;
          *(_DWORD *)(a1 + 104) += v129;
          if (v127)
            v130 = (std::string *)v128;
          else
            v130 = &__p;
          llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), (const char *)v130, v129);
          *(_QWORD *)&__dst = off_1E81A6E70;
          if (v191 == 1 && v186)
            MEMORY[0x1CAA32F9C](v186, 0x1000C8077774924);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_179;
        }
LABEL_281:
        abort();
      }
      if (v73 <= 0x14)
      {
        v82 = "constant";
        v83 = 8;
LABEL_153:
        llvm::raw_ostream::write((llvm::raw_ostream *)&__dst, v82, v83);
        goto LABEL_154;
      }
      v84 = *(_QWORD *)(a1 + 136);
      v85 = v84 + 8;
      if ((*(_BYTE *)v84 & 1) != 0)
      {
        v86 = 32;
LABEL_146:
        v110 = v86 - 1;
        v111 = v110 & ((UnderlyingObject >> 4) ^ (UnderlyingObject >> 9));
        v112 = *(unsigned __int8 **)(v85 + 8 * v111);
        if (UnderlyingObject != v112)
        {
          v113 = 1;
          while (v112 != (unsigned __int8 *)-4096)
          {
            v114 = v111 + v113++;
            v111 = v114 & v110;
            v112 = *(unsigned __int8 **)(v85 + 8 * v111);
            if (UnderlyingObject == v112)
              goto LABEL_150;
          }
          goto LABEL_151;
        }
LABEL_150:
        v82 = "matrix";
      }
      else
      {
        v86 = *(_DWORD *)(v84 + 16);
        if (v86)
        {
          v85 = *(_QWORD *)(v84 + 8);
          goto LABEL_146;
        }
LABEL_151:
        v82 = "scalar";
      }
      v83 = 6;
      goto LABEL_153;
    }
    v70 = *(_QWORD *)(a1 + 64);
    v71 = *(_QWORD *)(a1 + 56) - v70;
    if (UnderlyingObject[16] == 59)
    {
      if (v71 > 9)
      {
        *(_WORD *)(v70 + 8) = 29284;
        *(_QWORD *)v70 = *(_QWORD *)"stack addr";
        *(_QWORD *)(a1 + 64) += 10;
        v72 = 10;
      }
      else
      {
        v72 = 10;
        llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), "stack addr", 0xAuLL);
      }
    }
    else if (v71 > 3)
    {
      *(_DWORD *)v70 = 1919181921;
      *(_QWORD *)(a1 + 64) += 4;
      v72 = 4;
    }
    else
    {
      v72 = 4;
      llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), "addr", 4uLL);
    }
    *(_DWORD *)(a1 + 104) += v72;
    if ((UnderlyingObject[23] & 0x10) != 0)
    {
      v74 = ***(_QWORD ***)UnderlyingObject;
      v75 = *(_QWORD *)(v74 + 152);
      v76 = *(unsigned int *)(v74 + 168);
      if (!(_DWORD)v76)
        goto LABEL_119;
      LODWORD(v77) = (v76 - 1) & ((UnderlyingObject >> 4) ^ (UnderlyingObject >> 9));
      v78 = v75 + 16 * v77;
      v79 = *(unsigned __int8 **)v78;
      if (*(unsigned __int8 **)v78 != UnderlyingObject)
      {
        v80 = 1;
        while (v79 != (unsigned __int8 *)-4096)
        {
          v81 = v77 + v80++;
          v77 = v81 & (v76 - 1);
          v79 = *(unsigned __int8 **)(v75 + 16 * v77);
          if (v79 == UnderlyingObject)
          {
            v78 = v75 + 16 * v77;
            goto LABEL_120;
          }
        }
LABEL_119:
        v78 = v75 + 16 * v76;
      }
LABEL_120:
      if (**(_QWORD **)(v78 + 8))
      {
        v87 = *(_WORD **)(a1 + 64);
        if (*(_QWORD *)(a1 + 56) - (_QWORD)v87 > 1uLL)
        {
          *v87 = 9504;
          *(_QWORD *)(a1 + 64) += 2;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), " %", 2uLL);
        }
        if ((UnderlyingObject[23] & 0x10) != 0)
        {
          v88 = ***(_QWORD ***)UnderlyingObject;
          v89 = *(_QWORD *)(v88 + 152);
          v90 = *(unsigned int *)(v88 + 168);
          if (!(_DWORD)v90)
            goto LABEL_130;
          LODWORD(v91) = (v90 - 1) & ((UnderlyingObject >> 4) ^ (UnderlyingObject >> 9));
          v92 = (unsigned __int8 **)(v89 + 16 * v91);
          v93 = *v92;
          if (*v92 != UnderlyingObject)
          {
            v94 = 1;
            while (v93 != (unsigned __int8 *)-4096)
            {
              v95 = v91 + v94++;
              v91 = v95 & (v90 - 1);
              v93 = *(unsigned __int8 **)(v89 + 16 * v91);
              if (v93 == UnderlyingObject)
              {
                v92 = (unsigned __int8 **)(v89 + 16 * v91);
                goto LABEL_131;
              }
            }
LABEL_130:
            v92 = (unsigned __int8 **)(v89 + 16 * v90);
          }
LABEL_131:
          v96 = (size_t *)v92[1];
          v99 = *v96;
          v97 = v96 + 2;
          v98 = v99;
          v100 = *(void **)(a1 + 64);
          if (v99 <= *(_QWORD *)(a1 + 56) - (_QWORD)v100)
          {
            if (v98)
            {
              memcpy(v100, v97, v98);
              *(_QWORD *)(a1 + 64) += v98;
            }
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), (const char *)v97, v98);
          }
        }
        if ((UnderlyingObject[23] & 0x10) != 0)
        {
          v101 = ***(_QWORD ***)UnderlyingObject;
          v102 = *(_QWORD *)(v101 + 152);
          v103 = *(unsigned int *)(v101 + 168);
          if (!(_DWORD)v103)
            goto LABEL_142;
          LODWORD(v104) = (v103 - 1) & ((UnderlyingObject >> 4) ^ (UnderlyingObject >> 9));
          v105 = v102 + 16 * v104;
          v106 = *(unsigned __int8 **)v105;
          if (*(unsigned __int8 **)v105 != UnderlyingObject)
          {
            v107 = 1;
            while (v106 != (unsigned __int8 *)-4096)
            {
              v108 = v104 + v107++;
              v104 = v108 & (v103 - 1);
              v106 = *(unsigned __int8 **)(v102 + 16 * v104);
              if (v106 == UnderlyingObject)
              {
                v105 = v102 + 16 * v104;
                goto LABEL_143;
              }
            }
LABEL_142:
            v105 = v102 + 16 * v103;
          }
LABEL_143:
          v109 = **(_QWORD **)(v105 + 8);
        }
        else
        {
          LODWORD(v109) = 0;
        }
        *(_DWORD *)(a1 + 104) += v109 + 2;
      }
    }
LABEL_179:
    if (v55 != *(unsigned __int8 **)&v194[8 * v195 - 8])
    {
      *(_DWORD *)(a1 + 104) += 2;
      v131 = *(_WORD **)(a1 + 64);
      if (*(_QWORD *)(a1 + 56) - (_QWORD)v131 > 1uLL)
      {
        *v131 = 8236;
        *(_QWORD *)(a1 + 64) += 2;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), ", ", 2uLL);
      }
    }
    v52 += 8;
  }
  while (v52 != v53);
LABEL_192:
  ++*(_DWORD *)(a1 + 104);
  v132 = *(_BYTE **)(a1 + 64);
  if (*(_BYTE **)(a1 + 56) == v132)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), ")", 1uLL);
  }
  else
  {
    *v132 = 41;
    ++*(_QWORD *)(a1 + 64);
  }
LABEL_195:
  if (v194 != v196)
    free(v194);
}

llvm::raw_ostream *sub_1C5BC25D4(llvm::raw_ostream *result, int a2)
{
  llvm::raw_ostream *v3;
  unsigned int v4;
  _BYTE *v5;
  _BYTE *v6;

  v3 = result;
  v4 = *((_DWORD *)result + 26);
  if (v4 >= *(_DWORD *)result)
  {
    v5 = (_BYTE *)*((_QWORD *)result + 8);
    if (*((_BYTE **)result + 7) == v5)
    {
      result = llvm::raw_ostream::write((llvm::raw_ostream *)((char *)result + 32), "\n", 1uLL);
    }
    else
    {
      *v5 = 10;
      ++*((_QWORD *)result + 8);
    }
  }
  else if (v4)
  {
    return result;
  }
  *((_DWORD *)v3 + 26) = a2;
  if (a2)
  {
    result = (llvm::raw_ostream *)((char *)v3 + 32);
    do
    {
      v6 = (_BYTE *)*((_QWORD *)v3 + 8);
      if (*((_BYTE **)v3 + 7) == v6)
      {
        result = llvm::raw_ostream::write(result, " ", 1uLL);
      }
      else
      {
        *v6 = 32;
        ++*((_QWORD *)v3 + 8);
      }
      --a2;
    }
    while (a2);
  }
  return result;
}

uint64_t sub_1C5BC269C(uint64_t result, char *a2, char *a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int64_t v10;
  uint64_t v11;

  v3 = a3 - a2;
  v4 = *(unsigned int *)(result + 8);
  v5 = v4 + ((a3 - a2) >> 5);
  if (v5 > *(unsigned int *)(result + 12))
  {
    v10 = a3 - a2;
    v11 = result;
    v8 = a3;
    v9 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, v5, 8);
    a2 = v9;
    v3 = v10;
    a3 = v8;
    result = v11;
    v4 = *(unsigned int *)(v11 + 8);
  }
  if (a2 != a3)
  {
    v6 = (_QWORD *)(*(_QWORD *)result + 8 * v4);
    do
    {
      v7 = *(_QWORD *)a2;
      a2 += 32;
      *v6++ = v7;
    }
    while (a2 != a3);
  }
  *(_DWORD *)(result + 8) = v4 + (v3 >> 5);
  return result;
}

llvm::raw_ostream *sub_1C5BC272C(uint64_t *a1, uint64_t a2, llvm::raw_ostream *a3)
{
  llvm::raw_ostream *result;
  llvm::raw_ostream *v6;
  unsigned int *v7;
  _DWORD *v8;
  _BYTE *v9;
  unsigned int *v10;

  result = (llvm::raw_ostream *)sub_1C5BC1178(a1, a2);
  if ((llvm::raw_ostream *)a1[4] == result)
  {
    v8 = (_DWORD *)*((_QWORD *)a3 + 4);
    if (*((_QWORD *)a3 + 3) - (_QWORD)v8 > 6uLL)
    {
      *(_DWORD *)((char *)v8 + 3) = 1853321070;
      *v8 = 1852534389;
      *((_QWORD *)a3 + 4) += 7;
    }
    else
    {
      return llvm::raw_ostream::write(a3, "unknown", 7uLL);
    }
  }
  else
  {
    v6 = result;
    if (*((_BYTE *)result + 168))
      v7 = (unsigned int *)(***((_QWORD ***)result + 1) + 32);
    else
      v7 = (unsigned int *)((char *)result + 16);
    sub_1C5E21910(a3, *v7, 0, 0, 0);
    v9 = (_BYTE *)*((_QWORD *)a3 + 4);
    if (*((_BYTE **)a3 + 3) == v9)
    {
      llvm::raw_ostream::write(a3, "x", 1uLL);
    }
    else
    {
      *v9 = 120;
      ++*((_QWORD *)a3 + 4);
    }
    if (*((_BYTE *)v6 + 168))
      v10 = (unsigned int *)((char *)v6 + 16);
    else
      v10 = (unsigned int *)(***((_QWORD ***)v6 + 1) + 32);
    return sub_1C5E21910(a3, *v10, 0, 0, 0);
  }
  return result;
}

uint64_t sub_1C5BC2870()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5BBB45C(v0);
}

void sub_1C5BC289C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5BC28C0(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::OptimizationRemarkEmitterWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::LoopInfoWrapperPass::ID);
}

uint64_t sub_1C5BC296C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  char **v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void *v14;
  uint64_t v15;
  char **v16;
  char *v17;
  uint64_t v18;
  char **v19;
  char *v20;
  uint64_t v21;
  char **v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  int v42;
  char v43;
  char v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD v47[18];
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v6 = **(char ****)(a1 + 8);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != llvm::TargetTransformInfoWrapperPass::ID);
  v8 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v33 = 0;
  v34 = 0;
  LODWORD(v35) = 0;
  v36 = 0;
  v37 = 0;
  LODWORD(v38) = 0;
  v39 = 0;
  v40 = 0;
  LODWORD(v41) = 0;
  v9 = *(_QWORD *)(v8 + 56);
  if (!v9)
  {
    sub_1C485C2F0();
    goto LABEL_20;
  }
  v2 = &v36;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v9 + 48))(&v32, v9, a2);
  v3 = (_QWORD *)(v8 + 64);
  v10 = v32;
  if (!*(_BYTE *)(v8 + 72))
  {
    *(_QWORD *)(v8 + 64) = v32;
    *(_BYTE *)(v8 + 72) = 1;
    goto LABEL_7;
  }
  v32 = 0;
  v11 = *v3;
  *v3 = v10;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v32;
    v32 = 0;
    if (v12)
LABEL_20:
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
LABEL_7:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v2);
  sub_1C4D8B52C(&v33);
  v13 = **(void ****)(a1 + 8);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != &llvm::OptimizationRemarkEmitterWrapperPass::ID);
  v15 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), &llvm::OptimizationRemarkEmitterWrapperPass::ID)+ 32);
  v16 = **(char ****)(a1 + 8);
  do
  {
    v17 = *v16;
    v16 += 2;
  }
  while (v17 != llvm::AAResultsWrapperPass::ID);
  v18 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v16 - 1) + 96))(*(v16 - 1), llvm::AAResultsWrapperPass::ID)+ 32);
  v19 = **(char ****)(a1 + 8);
  do
  {
    v20 = *v19;
    v19 += 2;
  }
  while (v20 != llvm::DominatorTreeWrapperPass::ID);
  v21 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v19 - 1) + 96))(*(v19 - 1), llvm::DominatorTreeWrapperPass::ID);
  v22 = **(char ****)(a1 + 8);
  do
  {
    v23 = *v22;
    v22 += 2;
  }
  while (v23 != llvm::LoopInfoWrapperPass::ID);
  v24 = v21 + 32;
  v25 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v22 - 1) + 96))(*(v22 - 1), llvm::LoopInfoWrapperPass::ID);
  v26 = *(_QWORD *)(a2 + 40) + 272;
  v33 = a2;
  v34 = v26;
  v35 = v3;
  v36 = v18;
  v37 = v24;
  v38 = v25 + 32;
  v39 = v15;
  v42 = 128;
  v27 = (char *)operator new(0x1C00uLL, (std::align_val_t)8uLL);
  v40 = v27;
  v41 = 0;
  v28 = -7168;
  do
  {
    v29 = &v27[v28];
    *((_QWORD *)v29 + 897) = 2;
    *((_QWORD *)v29 + 898) = 0;
    *((_QWORD *)v29 + 899) = -4096;
    *((_QWORD *)v29 + 896) = &off_1E8196688;
    *((_QWORD *)v29 + 900) = 0;
    v28 += 56;
  }
  while (v28);
  v43 = 0;
  v44 = 0;
  v45 = v47;
  v46 = 0x1000000000;
  v47[16] = 0;
  v47[17] = 0;
  v48 = 0;
  v50 = 0;
  v51 = 0;
  v49 = 0;
  v30 = sub_1C5BB4CF8((uint64_t)&v33);
  sub_1C5BBB1E8((uint64_t)&v33);
  return v30;
}

uint64_t sub_1C5BC2C4C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5BBB5B4(v0);
}

void sub_1C5BC2C78(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5BC2C9C(uint64_t a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C5BC2CCC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  char **v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  uint64_t v25;
  int v26;
  char v27;
  char v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD v31[18];
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v5 = **(char ****)(a1 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != llvm::TargetTransformInfoWrapperPass::ID);
  v7 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v19 = 0;
  v20 = 0;
  LODWORD(v21) = 0;
  v22 = 0uLL;
  LODWORD(v23) = 0;
  *((_QWORD *)&v23 + 1) = 0;
  v24 = 0;
  LODWORD(v25) = 0;
  v8 = *(_QWORD *)(v7 + 56);
  if (!v8)
  {
    sub_1C485C2F0();
    goto LABEL_12;
  }
  v2 = (uint64_t *)&v22;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 48))(&v18, v8, a2);
  v3 = (_QWORD *)(v7 + 64);
  v9 = v18;
  if (!*(_BYTE *)(v7 + 72))
  {
    *(_QWORD *)(v7 + 64) = v18;
    *(_BYTE *)(v7 + 72) = 1;
    goto LABEL_7;
  }
  v18 = 0;
  v10 = *v3;
  *v3 = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = v18;
    v18 = 0;
    if (v11)
LABEL_12:
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
LABEL_7:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v2);
  sub_1C4D8B52C(&v19);
  v12 = *(_QWORD *)(a2 + 40) + 272;
  v19 = a2;
  v20 = v12;
  v21 = v3;
  v22 = 0u;
  v23 = 0u;
  v26 = 128;
  v13 = (char *)operator new(0x1C00uLL, (std::align_val_t)8uLL);
  v24 = v13;
  v25 = 0;
  v14 = -7168;
  do
  {
    v15 = &v13[v14];
    *((_QWORD *)v15 + 897) = 2;
    *((_QWORD *)v15 + 898) = 0;
    *((_QWORD *)v15 + 899) = -4096;
    *((_QWORD *)v15 + 896) = &off_1E8196688;
    *((_QWORD *)v15 + 900) = 0;
    v14 += 56;
  }
  while (v14);
  v27 = 0;
  v28 = 0;
  v29 = v31;
  v30 = 0x1000000000;
  v31[16] = 0;
  v31[17] = 0;
  v32 = 0;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  v16 = sub_1C5BB4CF8((uint64_t)&v19);
  sub_1C5BBB1E8((uint64_t)&v19);
  return v16;
}

void sub_1C5BC2EC8(int **a1, __int128 *a2, uint64_t *a3)
{
  int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED821D28, "matrix-default-layout", 0x15uLL);
  v6 = *a1;
  dword_1ED821DA8 = **a1;
  byte_1ED821DBC = 1;
  dword_1ED821DB8 = *v6;
  xmmword_1ED821D48 = *a2;
  v7 = *((_DWORD *)a3 + 2);
  if (v7)
  {
    v8 = *a3;
    v9 = v8 + 40 * v7;
    do
    {
      sub_1C631F9D8(*(unsigned __int8 **)v8, *(_QWORD *)(v8 + 8), *(_DWORD *)(v8 + 16), *(_QWORD *)(v8 + 24), *(_QWORD *)(v8 + 32));
      v8 += 40;
    }
    while (v8 != v9);
  }
}

unint64_t sub_1C5BC2F64(unint64_t a1)
{
  unint64_t v3;
  unint64_t v5;

  if (qword_1ED821DD8 >= HIDWORD(qword_1ED821DD8))
  {
    v3 = qword_1ED821DD8 + 1;
    if (qword_1ED821DD0 <= a1 && qword_1ED821DD0 + 48 * (unint64_t)qword_1ED821DD8 > a1)
    {
      v5 = a1 - qword_1ED821DD0;
      sub_1C631FA8C(v3);
      return qword_1ED821DD0 + v5;
    }
    else
    {
      sub_1C631FA8C(v3);
    }
  }
  return a1;
}

uint64_t sub_1C5BC2FD8()
{
  __int128 v1;
  int v2;
  int *v3;
  __n128 v4;
  _QWORD v5[2];
  int v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  LOBYTE(v2) = 1;
  *(_QWORD *)&v1 = &v2;
  LODWORD(v3) = 1;
  v4.n128_u64[0] = (unint64_t)"Enable/disable fusing matrix instructions.";
  v4.n128_u64[1] = 42;
  sub_1C498EDF8((llvm::cl::Option *)&FuseMatrix, "fuse-matrix", (_BYTE **)&v1, &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &FuseMatrix, &dword_1C475E000);
  v2 = 1;
  LODWORD(v3) = 4;
  *(_QWORD *)&v1 = &v3;
  v4.n128_u64[0] = (unint64_t)"Tile size for matrix instruction fusion using square-shaped tiles.";
  v4.n128_u64[1] = 66;
  sub_1C4DB1928((uint64_t)&TileSize, "fuse-matrix-tile-size", (int **)&v1, &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &TileSize, &dword_1C475E000);
  LOBYTE(v2) = 0;
  *(_QWORD *)&v1 = &v2;
  LODWORD(v3) = 1;
  v4.n128_u64[0] = (unint64_t)"Generate loop nest for tiling.";
  v4.n128_u64[1] = 30;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED821BA8, "fuse-matrix-use-loops", (_BYTE **)&v1, &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED821BA8, &dword_1C475E000);
  LOBYTE(v2) = 0;
  *(_QWORD *)&v1 = &v2;
  LODWORD(v3) = 1;
  v4.n128_u64[0] = (unint64_t)"Force matrix instruction fusion even if not profitable.";
  v4.n128_u64[1] = 55;
  sub_1C498EDF8((llvm::cl::Option *)&ForceFusion, "force-fuse-matrix", (_BYTE **)&v1, &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &ForceFusion, &dword_1C475E000);
  LOBYTE(v2) = 1;
  *(_QWORD *)&v1 = &v2;
  LODWORD(v3) = 1;
  v4.n128_u64[0] = (unint64_t)"Allow the use of FMAs if available and profitable. This may result in different res"
                                     "ults, due to less rounding error.";
  v4.n128_u64[1] = 116;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED821C68, "matrix-allow-contract", (_BYTE **)&v1, &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED821C68, &dword_1C475E000);
  v2 = 0;
  *(_QWORD *)&v1 = "Sets the default matrix layout";
  *((_QWORD *)&v1 + 1) = 30;
  v3 = &v2;
  v4.n128_u64[0] = (unint64_t)v5;
  v5[0] = "column-major";
  v5[1] = 12;
  v6 = 0;
  v7 = "Use column-major layout";
  v8 = 23;
  v9 = "row-major";
  v10 = 9;
  v11 = 1;
  v12 = "Use row-major layout";
  v13 = 20;
  v4.n128_u64[1] = 0x400000002;
  sub_1C631F8D8(&v3, &v1, (uint64_t *)&v4);
  if ((_QWORD *)v4.n128_u64[0] != v5)
    free((void *)v4.n128_u64[0]);
  return __cxa_atexit((void (*)(void *))sub_1C631EC44, qword_1ED821D28, &dword_1C475E000);
}

uint64_t sub_1C5BC3298(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Lower the widenable condition to default true value";
  *(_QWORD *)(v2 + 8) = 51;
  *(_QWORD *)(v2 + 16) = "lower-widenable-condition";
  *(_QWORD *)(v2 + 24) = 25;
  *(_QWORD *)(v2 + 32) = &unk_1ED821F80;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5BC3664;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::createLowerWidenableConditionPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5BC3350(v1);
}

uint64_t sub_1C5BC3350(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED821F80;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8196838;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED821F88);
  if (v3 != -1)
  {
    v7[0] = sub_1C5BC3298;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED821F88, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

BOOL sub_1C5BC3418(uint64_t a1)
{
  uint64_t v2;
  const llvm::APInt *v3;
  _BOOL8 v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  llvm::ValueAsMetadata **v9;
  uint64_t v10;
  llvm::ValueAsMetadata *v11;
  uint64_t *v12;
  uint64_t v13;
  llvm::Value *v14;
  _QWORD *v15;
  _QWORD *v16;
  llvm::ConstantInt *v17;
  unsigned int v18;
  char v19;
  llvm::ConstantInt *v20;
  llvm::Value *v21;
  uint64_t v22;
  unsigned int v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[9];

  v26[8] = *MEMORY[0x1E0C80C00];
  v2 = sub_1C4FB7E80(*(uint64_t **)(*(_QWORD *)(a1 + 40) + 112), "llvm.experimental.widenable.condition", 0x25uLL);
  if (!v2)
    return 0;
  if (*(_BYTE *)(v2 + 16))
    return 0;
  v6 = *(_QWORD *)(v2 + 8);
  if (!v6)
    return 0;
  v7 = 0;
  v24 = v26;
  v25 = 0x800000000;
  do
  {
    v8 = *(_QWORD *)(v6 + 24);
    if (v8 && *(_BYTE *)(v8 + 16) == 84 && *(_QWORD *)(*(_QWORD *)(v8 + 40) + 56) == a1)
    {
      if (v7 >= HIDWORD(v25))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, (uint64_t)v26, v7 + 1, 8);
        v7 = v25;
      }
      *((_QWORD *)v24 + v7) = v8;
      v7 = v25 + 1;
      LODWORD(v25) = v25 + 1;
    }
    v6 = *(_QWORD *)(v6 + 8);
  }
  while (v6);
  v9 = (llvm::ValueAsMetadata **)v24;
  v4 = v7 != 0;
  if (v7)
  {
    v10 = 8 * v7;
    do
    {
      v11 = *v9;
      v12 = **(uint64_t ***)*v9;
      v13 = *v12;
      v14 = *(llvm::Value **)(*v12 + 1560);
      if (!v14)
      {
        v17 = *(llvm::ConstantInt **)(v13 + 1888);
        v18 = *(_DWORD *)(v13 + 1896);
        v23 = v18 >> 8;
        if (v18 >> 8 > 0x40)
        {
          v20 = v17;
          llvm::APInt::initSlowCase((llvm::APInt *)&v22, 1, 0);
          v17 = v20;
        }
        else
        {
          if (v18 <= 0xFF)
            v19 = 0;
          else
            v19 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v18);
          v22 = v19 & 1;
        }
        v14 = llvm::ConstantInt::get(v17, (llvm::LLVMContext *)&v22, v3);
        if (v23 >= 0x41 && v22)
        {
          v21 = v14;
          MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
          v14 = v21;
        }
        *(_QWORD *)(v13 + 1560) = v14;
      }
      llvm::Value::doRAUW(v11, v14, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v11 + 5) + 40, (uint64_t ***)v11);
      v15 = (_QWORD *)*((_QWORD *)v11 + 3);
      v16 = (_QWORD *)*((_QWORD *)v11 + 4);
      *v16 = v15;
      v15[1] = v16;
      *((_QWORD *)v11 + 3) = 0;
      *((_QWORD *)v11 + 4) = 0;
      llvm::Value::deleteValue(v11);
      ++v9;
      v10 -= 8;
    }
    while (v10);
    v9 = (llvm::ValueAsMetadata **)v24;
  }
  if (v9 != v26)
    free(v9);
  return v4;
}

uint64_t sub_1C5BC3664()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5BC3350(v0);
}

void sub_1C5BC3690(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C5BC36B4(uint64_t a1, uint64_t a2)
{
  return sub_1C5BC3418(a2);
}

uint64_t sub_1C5BC36BC(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Lower the guard intrinsic to explicit control flow form";
  *(_QWORD *)(v2 + 8) = 55;
  *(_QWORD *)(v2 + 16) = "make-guards-explicit";
  *(_QWORD *)(v2 + 24) = 20;
  *(_QWORD *)(v2 + 32) = &unk_1ED821F90;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5BC39D4;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5BC374C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *i;
  _QWORD *v8;
  _QWORD *v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t Declaration;
  llvm *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[9];

  v28[8] = *MEMORY[0x1E0C80C00];
  v2 = sub_1C4FB7E80(*(uint64_t **)(a1[5] + 112), "llvm.experimental.guard", 0x17uLL);
  if (!v2)
    return 0;
  v5 = v2;
  if (*(_BYTE *)(v2 + 16) || !*(_QWORD *)(v2 + 8))
    return 0;
  v26 = v28;
  v27 = 0x800000000;
  v6 = a1 + 9;
  for (i = (_QWORD *)a1[10]; ; i = (_QWORD *)i[1])
  {
    if (i == v6)
      goto LABEL_36;
    v8 = i - 3;
    if (!i)
      v8 = 0;
    v9 = (_QWORD *)v8[6];
    if (v9 != v8 + 5)
      break;
  }
  v10 = 0;
  do
  {
    v11 = v9 - 3;
    if (v9)
    {
      if (*((_BYTE *)v9 - 8) == 84)
      {
        v12 = *(v9 - 7);
        if (v12)
        {
          if (!*(_BYTE *)(v12 + 16) && *(_QWORD *)(v12 + 24) == v9[6] && *(_DWORD *)(v12 + 36) == 125)
          {
            if (v10 >= HIDWORD(v27))
            {
              v24 = i;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, (uint64_t)v28, v10 + 1, 8);
              v11 = v9 - 3;
              i = v24;
              v10 = v27;
            }
            *((_QWORD *)v26 + v10) = v11;
            v10 = v27 + 1;
            LODWORD(v27) = v27 + 1;
          }
        }
      }
    }
    v9 = (_QWORD *)v9[1];
    v13 = i - 3;
    if (!i)
      v13 = 0;
    v14 = v13 + 5;
    while (v9 == v14)
    {
      i = (_QWORD *)i[1];
      if (i == v6)
        goto LABEL_31;
      v15 = i - 3;
      if (!i)
        v15 = 0;
      v14 = v15 + 5;
      v9 = (_QWORD *)v15[6];
    }
  }
  while (i != v6);
LABEL_31:
  if (!v10)
  {
LABEL_36:
    v3 = 0;
    goto LABEL_37;
  }
  v16 = (uint64_t *)a1[5];
  v25 = **(_QWORD **)(a1[3] + 16);
  v3 = 1;
  Declaration = llvm::Intrinsic::getDeclaration(v16, 119, &v25, 1);
  *(_WORD *)(Declaration + 18) = *(_WORD *)(Declaration + 18) & 0xC00F | *(_WORD *)(v5 + 18) & 0x3FF0;
  if ((_DWORD)v27)
  {
    v18 = (llvm *)Declaration;
    v19 = (uint64_t *)v26;
    v20 = 8 * v27;
    do
    {
      v21 = *v19++;
      v3 = 1;
      llvm::makeGuardControlFlowExplicit(v18, (uint64_t ***)v21, (llvm::CallInst *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v21 + 40) + 40, (uint64_t ***)v21);
      v22 = *(_QWORD *)(v21 + 24);
      v23 = *(_QWORD **)(v21 + 32);
      *v23 = v22;
      *(_QWORD *)(v22 + 8) = v23;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v21);
      v20 -= 8;
    }
    while (v20);
  }
LABEL_37:
  if (v26 != v28)
    free(v26);
  return v3;
}

uint64_t sub_1C5BC39D4()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = &unk_1ED821F90;
  *(_DWORD *)(v0 + 24) = 2;
  *(_QWORD *)v0 = &off_1E81968D8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED821F98);
  if (v2 != -1)
  {
    v6[0] = sub_1C5BC36BC;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED821F98, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C5BC3AB8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5BC3ADC(uint64_t a1, _QWORD *a2)
{
  return sub_1C5BC374C(a2);
}

uint64_t sub_1C5BC3AE4(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED822060;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8196978;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED822068);
  if (v3 != -1)
  {
    v7[0] = sub_1C5BC3BB8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED822068, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5BC3BB8(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  uint64_t v5;

  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v2);
  llvm::initializeGlobalsAAWrapperPassPass(a1, v3);
  llvm::initializeMemorySSAWrapperPassPass(a1, v4);
  v5 = operator new();
  *(_QWORD *)v5 = "MemCpy Optimization";
  *(_QWORD *)(v5 + 8) = 19;
  *(_QWORD *)(v5 + 16) = "memcpyopt";
  *(_QWORD *)(v5 + 24) = 9;
  *(_QWORD *)(v5 + 32) = &unk_1ED822060;
  *(_WORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 42) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = sub_1C5BC96D8;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v5, 1);
  return v5;
}

void llvm::MemCpyOptPass::eraseInstruction(llvm::MemCpyOptPass *this, llvm::Instruction *a2)
{
  int32x2_t **v3;
  __int32 v4;
  int32x2_t v5;
  __int32 v6;
  uint64_t v7;
  llvm::Instruction *v8;
  int v9;
  int v10;
  llvm::MemoryAccess *v11;
  uint64_t v12;
  _QWORD *v13;

  v3 = (int32x2_t **)*((_QWORD *)this + 5);
  v4 = (*v3)[5].i32[0];
  if (v4)
  {
    v5 = (*v3)[3];
    v6 = v4 - 1;
    v7 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v8 = *(llvm::Instruction **)(*(_QWORD *)&v5 + 16 * v7);
    if (v8 == a2)
    {
LABEL_6:
      v11 = *(llvm::MemoryAccess **)(*(_QWORD *)&v5 + 16 * v7 + 8);
      if (v11)
        llvm::MemorySSAUpdater::removeMemoryAccess(v3, v11, 0);
    }
    else
    {
      v9 = 1;
      while (v8 != (llvm::Instruction *)-4096)
      {
        v10 = v7 + v9++;
        v7 = v10 & v6;
        v8 = *(llvm::Instruction **)(*(_QWORD *)&v5 + 16 * v7);
        if (v8 == a2)
          goto LABEL_6;
      }
    }
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)a2 + 5) + 40, (uint64_t ***)a2);
  v12 = *((_QWORD *)a2 + 3);
  v13 = (_QWORD *)*((_QWORD *)a2 + 4);
  *v13 = v12;
  *(_QWORD *)(v12 + 8) = v13;
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  llvm::Value::deleteValue(a2);
}

unsigned __int8 **llvm::MemCpyOptPass::tryMergingIntoMemset(llvm::MemCpyOptPass *this, llvm::Instruction *a2, llvm::Value *a3, llvm::Value *a4)
{
  uint64_t v7;
  const llvm::Value *v8;
  int v9;
  unsigned __int8 **MemSet;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  llvm::MemoryAccess *v27;
  llvm::MemoryAccess *v28;
  llvm::MemoryAccess *v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  llvm::APInt *v37;
  unsigned int v38;
  int v39;
  __int16 v40;
  uint64_t *v41;
  uint64_t v42;
  const llvm::DataLayout *v43;
  int v44;
  llvm::Value **v45;
  const llvm::DataLayout *v46;
  BOOL v47;
  llvm::Value *v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  llvm::Value *v55;
  const llvm::DataLayout *v56;
  unint64_t isPointerOffset;
  char v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  uint64_t v75;
  uint64_t v76;
  llvm::MemoryAccess *v77;
  const llvm::APInt *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 *v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned int v89;
  llvm::MemoryAccess *v90;
  llvm::Value *v91;
  unint64_t v92;
  unint64_t v93;
  __int16 v94;
  llvm::ConstantInt *v95;
  unsigned int v96;
  unint64_t v97;
  uint64_t *v98;
  llvm::MemoryAccess *v99;
  llvm::MemoryAccess *v100;
  unsigned __int8 *v101;
  unsigned __int8 **v102;
  unsigned __int8 *v103;
  uint64_t **v104;
  char *MemoryAccessBefore;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  int32x2_t **v110;
  __int32 v111;
  int32x2_t v112;
  __int32 v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  llvm::MemoryAccess *v118;
  uint64_t v119;
  _QWORD *v120;
  unsigned __int8 v121;
  unsigned __int8 *v122;
  unint64_t v123;
  unsigned __int8 *v124;
  unsigned __int8 v125;
  unsigned int v126;
  BOOL v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v132;
  llvm::MemoryAccess *v133;
  llvm::MemoryAccess *v134;
  uint64_t v135;
  llvm *v136;
  unsigned __int8 *v137;
  unint64_t v138;
  unsigned int v139;
  void *v140[2];
  uint64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  _BYTE v145[1408];
  uint64_t v146;
  uint64_t v147;

  v136 = a3;
  v147 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40);
  v8 = (const llvm::Value *)(v7 + 272);
  if (a2)
  {
    if (*((_BYTE *)a2 + 16) == 61)
    {
      sub_1C4768AD0(v7 + 272, **((_QWORD **)a2 - 8));
      if (v9 == 1)
        return 0;
    }
  }
  v135 = v7;
  MemSet = 0;
  v143 = v145;
  v144 = 0x800000000;
  v146 = v7 + 272;
  v11 = (char *)a2 + 24;
  if (!a2)
    v11 = 0;
  v12 = *((_QWORD *)v11 + 1);
  v13 = v12 - 24;
  v14 = v12 == 0;
  if (v12)
    v15 = v12 - 24;
  else
    v15 = 0;
  v18 = *(unsigned __int8 *)(v15 + 16);
  v17 = (unsigned __int8 *)(v15 + 16);
  v16 = v18;
  if ((v18 - 29) >= 0xB)
  {
    v132 = v145;
    v133 = 0;
    v134 = 0;
    while (1)
    {
      v19 = **((_QWORD **)this + 5);
      v20 = *(_DWORD *)(v19 + 40);
      if (v20)
      {
        v21 = *(_QWORD *)(v19 + 24);
        v22 = v20 - 1;
        v23 = (v20 - 1) & ((v13 >> 4) ^ (v13 >> 9));
        v24 = *(_QWORD *)(v21 + 16 * v23);
        if (v13 == v24)
        {
LABEL_17:
          v27 = *(llvm::MemoryAccess **)(v21 + 16 * v23 + 8);
          if (v27)
          {
            if (*((_BYTE *)v27 + 16) == 26)
              v28 = v27;
            else
              v28 = 0;
            v29 = v133;
            if (v28)
              v29 = v28;
            v133 = v29;
            v134 = v27;
          }
        }
        else
        {
          v25 = 1;
          while (v24 != -4096)
          {
            v26 = v23 + v25++;
            v23 = v26 & v22;
            v24 = *(_QWORD *)(v21 + 16 * v23);
            if (v13 == v24)
              goto LABEL_17;
          }
        }
      }
      v30 = v16 - 33;
      if (v30 <= 0x33 && ((1 << v30) & 0x8000000000041) != 0 && !v14)
      {
        v31 = *(_QWORD *)(v13 + 64);
        if (v31)
        {
          if ((*(_BYTE *)(v31 + 13) & 8) != 0)
            goto LABEL_90;
        }
        LODWORD(v140[0]) = 7;
        if ((!sub_1C53E4BBC(v13, (__int32 *)v140, 1uLL)
           || (v65 = *(_QWORD *)(v13 - 32)) != 0
           && !*(_BYTE *)(v65 + 16)
           && *(_QWORD *)(v65 + 24) == *(_QWORD *)(v13 + 72)
           && *(_DWORD *)(v65 + 36) == 7)
          && (llvm::CallBase::hasFnAttrOnCalledFunction(v13, 11) & 1) != 0)
        {
          goto LABEL_90;
        }
      }
      v32 = *v17;
      if (v32 == 61)
        goto LABEL_34;
      if (!sub_1C5392540(v13))
        break;
      v32 = *v17;
LABEL_34:
      v47 = v32 == 61;
      v33 = v32 != 61;
      if (v47)
        v34 = v13;
      else
        v34 = 0;
      if (v14 || v33)
      {
        v35 = v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF);
        v36 = *(_QWORD *)(v35 + 96);
        v37 = (llvm::APInt *)(v36 + 24);
        v38 = *(_DWORD *)(v36 + 32);
        if (v38 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v37) != v38)
            goto LABEL_115;
        }
        else if (*(_QWORD *)v37)
        {
          goto LABEL_115;
        }
        if (a4 != *(llvm::Value **)(v35 + 32))
          goto LABEL_115;
        if (*(_BYTE *)(*(_QWORD *)(v35 + 64) + 16) != 16)
          goto LABEL_115;
        v55 = llvm::Value::stripPointerCasts(*(llvm::Value **)v35);
        isPointerOffset = llvm::isPointerOffset(v136, v55, v8, v56);
        if (!v58)
          goto LABEL_115;
        sub_1C5BC4790((uint64_t)&v143, isPointerOffset, v13);
      }
      else
      {
        v39 = *(unsigned __int8 *)(v34 + 16);
        if (v39 == 60 || v39 == 61)
        {
          v40 = *(_WORD *)(v34 + 18);
          if ((v40 & 0x380) != 0 || (v40 & 1) != 0)
            goto LABEL_115;
        }
        else if ((v39 - 63) < 3 || (*(_WORD *)(v34 + 18) & 1) != 0)
        {
          goto LABEL_115;
        }
        v41 = *(uint64_t **)(v34 - 64);
        v42 = *v41;
        if ((*(_DWORD *)(*v41 + 8) & 0xFE) == 0x12)
          v42 = **(_QWORD **)(v42 + 16);
        if (sub_1C4DEB33C((uint64_t)v8, v42))
          goto LABEL_115;
        sub_1C4768AD0((uint64_t)v8, *v41);
        if (v44 == 1)
          goto LABEL_115;
        v45 = llvm::isBytewiseValue((llvm *)v41, v8, v43);
        v47 = *((unsigned __int8 *)a4 + 16) - 11 >= 2 || v45 == 0;
        if (!v47)
          a4 = (llvm::Value *)v45;
        if (a4 != (llvm::Value *)v45)
          goto LABEL_115;
        v48 = (llvm::Value *)v45;
        v49 = llvm::isPointerOffset(v136, *(const llvm::Value **)(v34 - 32), v8, v46);
        if (!v50)
        {
          a4 = v48;
          goto LABEL_115;
        }
        v51 = v49;
        sub_1C4768AD0(v146, **(_QWORD **)(v34 - 64));
        sub_1C5BC9700((uint64_t)&v143, v51, (unint64_t)(v52 + 7) >> 3, *(_QWORD *)(v34 - 32), 1 << ((unint64_t)*(unsigned __int16 *)(v34 + 18) >> 1), v34);
        a4 = v48;
      }
LABEL_90:
      v12 = *(_QWORD *)(v12 + 8);
      v13 = v12 - 24;
      v14 = v12 == 0;
      if (v12)
        v63 = v12 - 24;
      else
        v63 = 0;
      v64 = *(unsigned __int8 *)(v63 + 16);
      v17 = (unsigned __int8 *)(v63 + 16);
      v16 = v64;
      if ((v64 - 29) <= 0xA)
        goto LABEL_115;
    }
    v53 = *(unsigned __int8 *)(v13 + 16);
    v54 = (v53 - 33);
    if (v54 > 0x37)
      goto LABEL_78;
    if (((1 << (v53 - 33)) & 0x8000000000041) == 0)
    {
      if (v54 != 27)
      {
        if (((1 << (v53 - 33)) & 0x808001D0000010) != 0)
          goto LABEL_115;
LABEL_78:
        v61 = (v53 - 33);
        if (v61 <= 0x37)
        {
          if (((1 << v61) & 0x8000000000041) != 0)
          {
            v62 = *(_QWORD *)(v13 + 64);
            if (!v62 || (*(_BYTE *)(v62 + 20) & 4) == 0 && (*(_BYTE *)(v62 + 17) & 0x10) == 0)
            {
              LODWORD(v140[0]) = 7;
              if (sub_1C53E4BBC(v13, (__int32 *)v140, 1uLL))
              {
                v66 = *(_QWORD *)(v13 - 32);
                if (!v66
                  || *(_BYTE *)(v66 + 16)
                  || *(_QWORD *)(v66 + 24) != *(_QWORD *)(v13 + 72)
                  || *(_DWORD *)(v66 + 36) != 7)
                {
                  goto LABEL_115;
                }
              }
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v13, 66) & 1) == 0
                && (llvm::CallBase::hasFnAttrOnCalledFunction(v13, 44) & 1) == 0)
              {
                goto LABEL_115;
              }
            }
          }
          else if (((1 << v61) & 0x808001C8000010) != 0 || v61 == 28 && (*(_WORD *)(v13 + 18) & 0x301) != 0)
          {
            goto LABEL_115;
          }
        }
        goto LABEL_90;
      }
      if ((*(_WORD *)(v13 + 18) & 0x301) != 0)
        goto LABEL_115;
LABEL_77:
      v53 = *(unsigned __int8 *)(v13 + 16);
      goto LABEL_78;
    }
    v59 = *(_QWORD *)(v13 + 64);
    if (v59 && (*(_BYTE *)(v59 + 17) & 0x30) != 0)
      goto LABEL_77;
    v60 = *(_DWORD *)(v13 + 20);
    if ((v60 & 0x80000000) == 0
      || (v67 = v13 - 32 * (v60 & 0x7FFFFFF), v70 = *(_QWORD *)(v67 - 8), v68 = v67 - 8, (v69 = v70) == 0))
    {
LABEL_73:
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v13, 45) & 1) == 0
        && !llvm::CallBase::hasFnAttrOnCalledFunction(v13, 44))
      {
        goto LABEL_115;
      }
      goto LABEL_77;
    }
    v71 = -v69;
    while (1)
    {
      v72 = *(_DWORD *)(*(_QWORD *)(v68 + v71) + 8);
      v83 = v72 > 7;
      v73 = (1 << v72) & 0x83;
      if (v83 || v73 == 0)
        break;
      v71 += 16;
      if (!v71)
        goto LABEL_73;
    }
LABEL_115:
    if ((_DWORD)v144)
    {
      if (a2 && *((_BYTE *)a2 + 16) == 61)
      {
        sub_1C4768AD0(v146, **((_QWORD **)a2 - 8));
        sub_1C5BC9700((uint64_t)&v143, 0, (unint64_t)(v75 + 7) >> 3, *((_QWORD *)a2 - 4), 1 << ((unint64_t)*((unsigned __int16 *)a2 + 9) >> 1), (uint64_t)a2);
      }
      else
      {
        sub_1C5BC4790((uint64_t)&v143, 0, (uint64_t)a2);
      }
      v76 = v135;
      v77 = v133;
      sub_1C4773D54((uint64_t)v140, v13, 0, 0, 0);
      if ((_DWORD)v144)
      {
        MemSet = 0;
        v79 = (char *)v143;
        v80 = (char *)v143 + 176 * v144;
        while (1)
        {
          v81 = *((unsigned int *)v79 + 10);
          if ((_DWORD)v81 != 1)
          {
            v82 = *((_QWORD *)v79 + 1) - *(_QWORD *)v79;
            v83 = v81 <= 3 && v82 <= 15;
            if (!v83)
              goto LABEL_141;
            if (v81 >= 2)
              break;
          }
LABEL_173:
          v79 += 176;
          if (v79 == v80)
            goto LABEL_188;
        }
        v84 = *((_QWORD *)v79 + 4);
        v85 = 8 * v81;
        while (*(_BYTE *)(*(_QWORD *)v84 + 16) == 61)
        {
          v84 += 8;
          v85 -= 8;
          if (!v85)
          {
            if ((_DWORD)v81 == 2)
              goto LABEL_173;
            v86 = *(unsigned __int8 **)(v76 + 304);
            v87 = *(_QWORD *)(v76 + 312);
            if (v87 >= 2)
            {
              v122 = v86 + 1;
              v121 = *v86;
              v123 = v87 - 1;
              v88 = *(unsigned __int8 **)(v76 + 304);
              v124 = v86 + 1;
              do
              {
                v126 = *v124++;
                v125 = v126;
                v127 = v121 >= v126;
                if (v121 <= v126)
                  v121 = v125;
                if (!v127)
                  v88 = v122;
                v122 = v124;
                --v123;
              }
              while (v123);
            }
            else
            {
              v88 = *(unsigned __int8 **)(v76 + 304);
            }
            v89 = v88 == &v86[v87] || *v88 <= 7u ? 1 : *v88 >> 3;
            if (v81 <= v82 % v89 + v82 / v89)
              goto LABEL_173;
            break;
          }
        }
LABEL_141:
        v90 = v77;
        v91 = (llvm::Value *)*((_QWORD *)v79 + 2);
        v92 = *((unsigned int *)v79 + 6);
        v93 = __clz(v92) ^ 0x13F;
        if ((_DWORD)v92)
          v94 = v93;
        else
          v94 = 0;
        v95 = *(llvm::ConstantInt **)(*(_QWORD *)v142 + 1984);
        v96 = *(_DWORD *)(*(_QWORD *)v142 + 1992);
        v139 = v96 >> 8;
        if (v96 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v138, v82, 0);
        }
        else
        {
          if (v96 <= 0xFF)
            v97 = 0;
          else
            v97 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v96);
          v138 = v97 & v82;
        }
        v98 = (uint64_t *)llvm::ConstantInt::get(v95, (llvm::LLVMContext *)&v138, v78);
        if (v139 >= 0x41 && v138)
          MEMORY[0x1CAA32F9C](v138, 0x1000C8000313F17);
        MemSet = (unsigned __int8 **)llvm::IRBuilderBase::CreateMemSet((uint64_t)v140, v91, (uint64_t)a4, v98, v94, 0, 0, 0, 0);
        v99 = v90;
        v100 = v134;
        if (*((_DWORD *)v79 + 10))
        {
          v101 = *(unsigned __int8 **)(**((_QWORD **)v79 + 4) + 48);
          v137 = v101;
          if (v101)
            llvm::MetadataTracking::track((uint64_t)&v137, v101, 2);
          v102 = MemSet + 6;
          if (&v137 == MemSet + 6)
          {
            if (v137)
              llvm::MetadataTracking::untrack((uint64_t)&v137, v137);
          }
          else
          {
            if (*v102)
              llvm::MetadataTracking::untrack((uint64_t)(MemSet + 6), *v102);
            v103 = v137;
            *v102 = v137;
            if (v103)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v137, v103, (uint64_t)(MemSet + 6));
              v137 = 0;
            }
          }
        }
        v104 = (uint64_t **)*((_QWORD *)this + 5);
        if (*((_QWORD *)v100 + 9) == v13)
          MemoryAccessBefore = llvm::MemorySSAUpdater::createMemoryAccessBefore(v104, (uint64_t)MemSet, (uint64_t)v99, (uint64_t)v100);
        else
          MemoryAccessBefore = llvm::MemorySSAUpdater::createMemoryAccessAfter(v104, (llvm::Instruction *)MemSet, v99, (llvm::BasicBlock **)v100);
        v77 = (llvm::MemoryAccess *)MemoryAccessBefore;
        llvm::MemorySSAUpdater::insertDef(*((llvm::MemorySSAUpdater **)this + 5), (llvm::MemoryDef *)MemoryAccessBefore, 1);
        v106 = *((unsigned int *)v79 + 10);
        v76 = v135;
        if ((_DWORD)v106)
        {
          v107 = (uint64_t *)*((_QWORD *)v79 + 4);
          v108 = &v107[v106];
          do
          {
            v109 = *v107;
            v110 = (int32x2_t **)*((_QWORD *)this + 5);
            v111 = (*v110)[5].i32[0];
            if (v111)
            {
              v112 = (*v110)[3];
              v113 = v111 - 1;
              v114 = (v111 - 1) & ((v109 >> 4) ^ (v109 >> 9));
              v115 = *(_QWORD *)(*(_QWORD *)&v112 + 16 * v114);
              if (v115 == v109)
              {
LABEL_168:
                v118 = *(llvm::MemoryAccess **)(*(_QWORD *)&v112 + 16 * v114 + 8);
                if (v118)
                  llvm::MemorySSAUpdater::removeMemoryAccess(v110, v118, 0);
              }
              else
              {
                v116 = 1;
                while (v115 != -4096)
                {
                  v117 = v114 + v116++;
                  v114 = v117 & v113;
                  v115 = *(_QWORD *)(*(_QWORD *)&v112 + 16 * v114);
                  if (v115 == v109)
                    goto LABEL_168;
                }
              }
            }
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v109 + 40) + 40, (uint64_t ***)v109);
            v119 = *(_QWORD *)(v109 + 24);
            v120 = *(_QWORD **)(v109 + 32);
            *v120 = v119;
            *(_QWORD *)(v119 + 8) = v120;
            *(_QWORD *)(v109 + 24) = 0;
            *(_QWORD *)(v109 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v109);
            ++v107;
          }
          while (v107 != v108);
          v134 = v77;
          v76 = v135;
        }
        else
        {
          v134 = v77;
        }
        goto LABEL_173;
      }
      MemSet = 0;
LABEL_188:
      if (v140[0] != &v141)
        free(v140[0]);
      v128 = (char *)v143;
      if (!(_DWORD)v144)
        goto LABEL_196;
      v129 = 176 * v144;
      do
      {
        v130 = *(char **)&v128[v129 - 144];
        if (&v128[v129 - 128] != v130)
          free(v130);
        v129 -= 176;
      }
      while (v129);
    }
    else
    {
      MemSet = 0;
    }
    v128 = (char *)v143;
LABEL_196:
    if (v128 != v132)
      free(v128);
  }
  return MemSet;
}

void sub_1C5BC4790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  llvm::Value *v10;
  __int16 ParamAlignment;
  int v12;

  v6 = a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = (uint64_t *)(v7 + 24);
  if (*(_DWORD *)(v7 + 32) >= 0x41u)
    v8 = (uint64_t *)*v8;
  v9 = *v8;
  v10 = llvm::Value::stripPointerCasts(*(llvm::Value **)v6);
  ParamAlignment = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a3 + 64), 0);
  if ((ParamAlignment & 0xFF00) != 0)
    v12 = 1 << ParamAlignment;
  else
    v12 = 0;
  sub_1C5BC9700(a1, a2, v9, (uint64_t)v10, v12, a3);
}

uint64_t llvm::MemCpyOptPass::moveUp(llvm::MemCpyOptPass *this, llvm::StoreInst *a2, llvm::Instruction *a3, const llvm::LoadInst *a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  _OWORD *v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  const llvm::CallBase **v49;
  uint64_t v50;
  llvm::Value *PersonalityFn;
  const llvm::Value *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  llvm::Instruction *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  unsigned int v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  int v69;
  int v70;
  char *v71;
  char *v72;
  llvm::Instruction *v73;
  llvm::Instruction *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  llvm::Instruction *v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *i;
  _OWORD v87[3];
  __int128 v88;
  _OWORD v89[2];
  uint64_t v90;
  int32x2_t v91;
  int v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  char v99;
  void *v100;
  uint64_t v101;
  _BYTE v102[64];
  void *v103[2];
  __int128 v104;
  __int128 v105;
  __int128 v106;
  char *v107;
  uint64_t v108;
  _QWORD v109[10];

  v109[8] = *MEMORY[0x1E0C80C00];
  v8 = *((_QWORD *)a2 - 4);
  sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40) + 272, **((_QWORD **)a2 - 8));
  if (v10 == 1)
    v11 = -2;
  else
    v11 = (unint64_t)(v9 + 7) >> 3;
  llvm::Instruction::getAAMetadata((uint64_t ***)a2, &v94);
  *(_QWORD *)&v93 = v8;
  *((_QWORD *)&v93 + 1) = v11;
  v12 = *((_QWORD *)this + 1);
  *(_OWORD *)v103 = v93;
  v104 = v94;
  v105 = v95;
  LOBYTE(v106) = 1;
  if ((sub_1C4D90C64(v12, (uint64_t)a3, (__int128 *)v103) & 3) != 0)
    return 0;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v14 = *((_QWORD *)a2 - 4);
  if (*(unsigned __int8 *)(v14 + 16) <= 0x1Bu)
    v14 = 0;
  v107 = (char *)v14;
  if (v14 && *(_QWORD *)(v14 + 40) == *((_QWORD *)a2 + 5))
    sub_1C61DB390((uint64_t)&v90, &v107, (uint64_t)v103);
  v107 = (char *)v109;
  v109[0] = a2;
  v108 = 0x800000001;
  v104 = v93;
  v105 = v94;
  v106 = v95;
  v103[0] = &v104;
  v103[1] = (void *)0x800000001;
  v100 = v102;
  v101 = 0x800000000;
  v15 = *((_QWORD *)a4 - 4);
  sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a4 + 5) + 56) + 40) + 272, *(_QWORD *)a4);
  if (v17 == 1)
    v18 = -2;
  else
    v18 = (unint64_t)(v16 + 7) >> 3;
  llvm::Instruction::getAAMetadata((uint64_t ***)a4, v89);
  *(_QWORD *)&v88 = v15;
  *((_QWORD *)&v88 + 1) = v18;
  v19 = (_QWORD *)*((_QWORD *)a2 + 3);
  for (i = (_QWORD *)((char *)a3 + 24); v19 != i; v19 = (_QWORD *)*v19)
  {
    v13 = 0;
    if (v19)
      v20 = (uint64_t)(v19 - 3);
    else
      v20 = 0;
    v21 = *(unsigned __int8 *)(v20 + 16);
    if (v21 == 29 || v21 == 35)
      goto LABEL_101;
    if (v21 == 80)
    {
      PersonalityFn = (llvm::Value *)llvm::Function::getPersonalityFn(*(llvm::Function **)(*(_QWORD *)(v20 + 40) + 56));
      if (llvm::classifyEHPersonality(PersonalityFn, v52) != 10)
        goto LABEL_68;
    }
    else if ((llvm::Instruction::mayThrow((llvm::Instruction *)v20) & 1) != 0
           || !llvm::Instruction::willReturn((llvm::Instruction *)v20))
    {
      goto LABEL_68;
    }
    v22 = *((_QWORD *)this + 1);
    LOBYTE(v96) = 0;
    v99 = 0;
    v23 = sub_1C4D90C64(v22, v20, &v96) & 3;
    if (v92)
    {
      LODWORD(v24) = (v92 - 1) & ((v20 >> 4) ^ (v20 >> 9));
      v25 = (uint64_t *)(v90 + 8 * v24);
      v26 = *v25;
      if (v20 == *v25)
      {
LABEL_25:
        *v25 = -8192;
        v91 = vadd_s32(v91, (int32x2_t)0x1FFFFFFFFLL);
        goto LABEL_26;
      }
      v42 = 1;
      while (v26 != -4096)
      {
        v43 = v24 + v42++;
        v24 = v43 & (v92 - 1);
        v26 = *(_QWORD *)(v90 + 8 * v24);
        if (v20 == v26)
        {
          v25 = (uint64_t *)(v90 + 8 * v24);
          goto LABEL_25;
        }
      }
    }
    if (!v23)
      continue;
    if (LODWORD(v103[1]))
    {
      v44 = (__int128 *)v103[0];
      v45 = 48 * LODWORD(v103[1]);
      while (1)
      {
        v46 = *((_QWORD *)this + 1);
        v47 = *v44;
        v48 = v44[2];
        v97 = v44[1];
        v98 = v48;
        v96 = v47;
        v99 = 1;
        if ((sub_1C4D90C64(v46, v20, &v96) & 3) != 0)
          break;
        v44 += 3;
        v45 -= 48;
        if (!v45)
          goto LABEL_61;
      }
    }
    else
    {
LABEL_61:
      if (!(_DWORD)v101)
        continue;
      v49 = (const llvm::CallBase **)v100;
      v50 = 8 * v101;
      while ((llvm::AAResults::getModRefInfo(*((llvm::AAResults **)this + 1), (llvm::Instruction *)v20, *v49) & 3) == 0)
      {
        ++v49;
        v50 -= 8;
        if (!v50)
          goto LABEL_65;
      }
    }
LABEL_26:
    if (v23)
    {
      v27 = *((_QWORD *)this + 1);
      v96 = v88;
      v97 = v89[0];
      v98 = v89[1];
      v99 = 1;
      if ((sub_1C4D90C64(v27, v20, &v96) & 2) != 0)
        goto LABEL_68;
      v13 = 0;
      v28 = *(unsigned __int8 *)(v20 + 16) - 33;
      if (v28 > 0x37)
        goto LABEL_101;
      if (((1 << v28) & 0x8000000000041) != 0)
      {
        if ((llvm::AAResults::getModRefInfo(*((llvm::AAResults **)this + 1), a3, (const llvm::CallBase *)(v19 - 3)) & 3) != 0)
          goto LABEL_68;
        v34 = v101;
        if (v101 >= (unint64_t)HIDWORD(v101))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, (uint64_t)v102, v101 + 1, 8);
          v34 = v101;
        }
        *((_QWORD *)v100 + v34) = v19 - 3;
        LODWORD(v101) = v101 + 1;
      }
      else
      {
        if (((1 << v28) & 0x80000018000000) == 0)
          goto LABEL_101;
        llvm::MemoryLocation::getOrNone((uint64_t ***)v20, (uint64_t)&v96);
        v87[1] = v97;
        v87[2] = v98;
        v87[0] = v96;
        v29 = *((_QWORD *)this + 1);
        v99 = 1;
        if ((sub_1C4D90C64(v29, (uint64_t)a3, &v96) & 3) != 0)
        {
LABEL_68:
          v13 = 0;
          goto LABEL_101;
        }
        v30 = (_OWORD *)sub_1C52B9D4C((uint64_t)v103, (unint64_t)v87, 1);
        v31 = (char *)v103[0] + 48 * LODWORD(v103[1]);
        v33 = v30[1];
        v32 = v30[2];
        *v31 = *v30;
        v31[1] = v33;
        v31[2] = v32;
        ++LODWORD(v103[1]);
      }
    }
    v35 = v108;
    if (v108 >= (unint64_t)HIDWORD(v108))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, (uint64_t)v109, v108 + 1, 8);
      v35 = v108;
    }
    *(_QWORD *)&v107[8 * v35] = v20;
    LODWORD(v108) = v108 + 1;
    v36 = *(_DWORD *)(v20 + 20) & 0x7FFFFFF;
    if ((_DWORD)v36)
    {
      v37 = 0;
      v38 = 32 * v36;
      do
      {
        *(_QWORD *)&v87[0] = 0;
        v39 = *(_DWORD *)(v20 + 20);
        if ((v39 & 0x40000000) != 0)
          v40 = *(_QWORD *)(v20 - 8);
        else
          v40 = v20 - 32 * (v39 & 0x7FFFFFF);
        v41 = *(_QWORD *)(v40 + v37);
        if (*(unsigned __int8 *)(v41 + 16) <= 0x1Bu)
          v41 = 0;
        *(_QWORD *)&v87[0] = v41;
        if (v41 && *(_QWORD *)(v41 + 40) == *((_QWORD *)a2 + 5))
        {
          if ((llvm::Instruction *)v41 == a3)
            goto LABEL_68;
          sub_1C61DB390((uint64_t)&v90, v87, (uint64_t)&v96);
        }
        v37 += 32;
      }
      while (v38 != v37);
    }
LABEL_65:
    ;
  }
  v53 = **((_QWORD **)this + 5);
  v54 = *(_QWORD *)(v53 + 24);
  v55 = *(_DWORD *)(v53 + 40);
  if (v55)
  {
    v56 = (v55 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    v57 = *(llvm::Instruction **)(v54 + 16 * v56);
    if (v57 == a3)
    {
LABEL_74:
      v60 = *(_QWORD *)(v54 + 16 * v56 + 8);
      if (v60)
      {
        v61 = *(_QWORD *)(v60 + 32);
        if (v61)
          v62 = v61 - 32;
        else
          v62 = 0;
        goto LABEL_90;
      }
    }
    else
    {
      v58 = 1;
      while (v57 != (llvm::Instruction *)-4096)
      {
        v59 = v56 + v58++;
        v56 = v59 & (v55 - 1);
        v57 = *(llvm::Instruction **)(v54 + 16 * v56);
        if (v57 == a3)
          goto LABEL_74;
      }
    }
  }
  v63 = (_QWORD *)*((_QWORD *)a4 + 3);
  v64 = (_QWORD *)*i;
  if ((_QWORD *)*i != v63)
  {
    v65 = v55 - 1;
    do
    {
      v66 = v64 - 3;
      if (!v64)
        v66 = 0;
      if (v55)
      {
        v67 = ((v66 >> 4) ^ (v66 >> 9)) & v65;
        v68 = *(_QWORD **)(v54 + 16 * v67);
        if (v66 == v68)
        {
LABEL_87:
          v62 = *(_QWORD *)(v54 + 16 * v67 + 8);
          if (v62)
            goto LABEL_90;
        }
        else
        {
          v69 = 1;
          while (v68 != (_QWORD *)-4096)
          {
            v70 = v67 + v69++;
            v67 = v70 & v65;
            v68 = *(_QWORD **)(v54 + 16 * v67);
            if (v66 == v68)
              goto LABEL_87;
          }
        }
      }
      v64 = (_QWORD *)*v64;
    }
    while (v64 != v63);
  }
  v62 = 0;
LABEL_90:
  if ((_DWORD)v108)
  {
    v71 = v107;
    v72 = &v107[8 * v108];
    do
    {
      v74 = (llvm::Instruction *)*((_QWORD *)v72 - 1);
      v72 -= 8;
      v73 = v74;
      llvm::Instruction::moveBefore(v74, a3);
      v75 = *((_QWORD *)this + 5);
      v76 = *(_DWORD *)(*(_QWORD *)v75 + 40);
      if (v76)
      {
        v77 = *(_QWORD *)(*(_QWORD *)v75 + 24);
        v78 = v76 - 1;
        v79 = (v76 - 1) & ((v73 >> 4) ^ (v73 >> 9));
        v80 = *(llvm::Instruction **)(v77 + 16 * v79);
        if (v73 == v80)
        {
LABEL_97:
          v83 = v77 + 16 * v79;
          v84 = *(_QWORD *)(v83 + 8);
          if (v84)
          {
            sub_1C4EE2E28(v75, *(_QWORD *)(v83 + 8), *(llvm::BasicBlock **)(v62 + 64), *(_QWORD **)(v62 + 40));
            v62 = v84;
          }
        }
        else
        {
          v81 = 1;
          while (v80 != (llvm::Instruction *)-4096)
          {
            v82 = v79 + v81++;
            v79 = v82 & v78;
            v80 = *(llvm::Instruction **)(v77 + 16 * v79);
            if (v73 == v80)
              goto LABEL_97;
          }
        }
      }
    }
    while (v72 != v71);
  }
  v13 = 1;
LABEL_101:
  if (v100 != v102)
    free(v100);
  if (v103[0] != &v104)
    free(v103[0]);
  if (v107 != (char *)v109)
    free(v107);
  MEMORY[0x1CAA32FB4](v90, 8);
  return v13;
}

uint64_t llvm::MemCpyOptPass::processStore(uint64_t a1, llvm::LoadInst *a2, _QWORD *a3)
{
  llvm::LoadInst *v4;
  int v6;
  __int16 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  llvm::LoadInst **v13;
  llvm::LoadInst *v14;
  llvm::LoadInst **v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  llvm::Value *v22;
  llvm::LoadInst *v23;
  uint64_t v24;
  const llvm::DataLayout *v25;
  uint64_t result;
  llvm::LoadInst *v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  llvm::Instruction *v40;
  uint64_t v41;
  llvm::LoadInst **v42;
  llvm::LoadInst *v43;
  uint64_t v44;
  unsigned int v45;
  llvm::Value *v46;
  llvm::Value *v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  int v53;
  void (**v54)(void);
  int32x2_t **v55;
  __int32 v56;
  int32x2_t v57;
  __int32 v58;
  uint64_t v59;
  llvm::LoadInst *v60;
  int v61;
  int v62;
  llvm::MemoryAccess *v63;
  uint64_t v64;
  _QWORD *v65;
  llvm::LoadInst *v66;
  int32x2_t **v67;
  __int32 v68;
  int32x2_t v69;
  __int32 v70;
  uint64_t v71;
  llvm::LoadInst *v72;
  int v73;
  int v74;
  llvm::MemoryAccess *v75;
  uint64_t v76;
  _QWORD *v77;
  llvm *v79;
  uint64_t v80;
  unsigned __int8 **v81;
  const char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  const llvm::APInt *v86;
  llvm::Value *v87;
  unint64_t v88;
  llvm::ConstantInt *v89;
  unsigned int v90;
  unint64_t v91;
  uint64_t *v92;
  llvm::Instruction *MemSet;
  uint64_t v94;
  int v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  llvm::LoadInst *v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  char *MemoryAccessBefore;
  int32x2_t **v106;
  __int32 v107;
  int32x2_t v108;
  __int32 v109;
  uint64_t v110;
  llvm::LoadInst *v111;
  int v112;
  int v113;
  llvm::MemoryAccess *v114;
  uint64_t v115;
  _QWORD *v116;
  char ModRefInfo;
  const char *v118;
  uint64_t v119;
  unint64_t v120;
  const llvm::APInt *v121;
  llvm::Value *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  llvm::ConstantInt *v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t *v129;
  llvm::Value *MemMove;
  unint64_t v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t **v134;
  int v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  llvm::LoadInst *v139;
  int v140;
  int v141;
  llvm::MemoryAccess *v142;
  char *MemoryAccessAfter;
  int32x2_t **v144;
  __int32 v145;
  int32x2_t v146;
  __int32 v147;
  uint64_t v148;
  llvm::LoadInst *v149;
  int v150;
  int v151;
  llvm::MemoryAccess *v152;
  uint64_t v153;
  _QWORD *v154;
  __int32 v155;
  __int32 v156;
  llvm::LoadInst *v157;
  int v158;
  int v159;
  llvm::Value *v160;
  __int128 v161;
  _OWORD v162[2];
  llvm::LoadInst *v163;
  unint64_t v164;
  unsigned int v165;
  _QWORD v166[3];
  _QWORD *v167;
  void *v168[2];
  _OWORD v169[2];
  char v170;
  uint64_t *v171;
  uint64_t v172;

  v4 = a2;
  v172 = *MEMORY[0x1E0C80C00];
  v6 = *((unsigned __int8 *)a2 + 16);
  if (v6 == 60 || v6 == 61)
  {
    v7 = *((_WORD *)a2 + 9);
    if ((v7 & 0x380) != 0 || (v7 & 1) != 0)
      return 0;
  }
  else if ((v6 - 63) < 3 || (*((_WORD *)a2 + 9) & 1) != 0)
  {
    return 0;
  }
  if ((*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v8 = ***(_QWORD ***)a2;
    v168[0] = a2;
    v9 = *(_DWORD *)(v8 + 2496);
    if (v9)
    {
      v10 = *(_QWORD *)(v8 + 2480);
      v11 = v9 - 1;
      v12 = v11 & ((a2 >> 4) ^ (a2 >> 9));
      v13 = (llvm::LoadInst **)(v10 + 40 * v12);
      v14 = *v13;
      if (*v13 == a2)
      {
LABEL_15:
        v19 = *((unsigned int *)v13 + 4);
        if ((_DWORD)v19)
        {
          v20 = (_QWORD *)((char *)v13[1] + 8);
          v21 = 16 * v19;
          while (*((_DWORD *)v20 - 2) != 9)
          {
            v20 += 2;
            v21 -= 16;
            if (!v21)
              goto LABEL_19;
          }
          if (*v20)
            return 0;
        }
        goto LABEL_19;
      }
      v15 = 0;
      v16 = 1;
      while (v14 != (llvm::LoadInst *)-4096)
      {
        if (v15)
          v17 = 0;
        else
          v17 = v14 == (llvm::LoadInst *)-8192;
        if (v17)
          v15 = v13;
        v18 = v12 + v16++;
        v12 = v18 & v11;
        v13 = (llvm::LoadInst **)(v10 + 40 * v12);
        v14 = *v13;
        if (*v13 == a2)
          goto LABEL_15;
      }
      if (v15)
        v42 = v15;
      else
        v42 = v13;
    }
    else
    {
      v42 = 0;
    }
    v13 = (llvm::LoadInst **)sub_1C541AB24(v8 + 2480, (uint64_t)v168, (uint64_t *)v168, v42);
    v43 = (llvm::LoadInst *)v168[0];
    v13[3] = 0;
    v13[4] = 0;
    *v13 = v43;
    v13[1] = (llvm::LoadInst *)(v13 + 3);
    v13[2] = (llvm::LoadInst *)0x100000000;
    goto LABEL_15;
  }
LABEL_19:
  v22 = (llvm::Value *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 5) + 56) + 40) + 272);
  v23 = (llvm::LoadInst *)*((_QWORD *)v4 - 8);
  v24 = *(_QWORD *)v23;
  if ((*(_DWORD *)(*(_QWORD *)v23 + 8) & 0xFE) == 0x12)
    v24 = **(_QWORD **)(v24 + 16);
  if (sub_1C4DEB33C(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 5) + 56) + 40) + 272, v24))
    return 0;
  if (*((_BYTE *)v23 + 16) == 60)
    v27 = v23;
  else
    v27 = 0;
  v163 = v27;
  if (!v27)
    goto LABEL_92;
  v28 = *((unsigned __int8 *)v27 + 16);
  if (v28 == 60 || v28 == 61)
  {
    v29 = *((_WORD *)v27 + 9);
    if ((v29 & 0x380) != 0 || (v29 & 1) != 0)
      goto LABEL_92;
  }
  else if ((v28 - 63) < 3 || (*((_WORD *)v27 + 9) & 1) != 0)
  {
    goto LABEL_92;
  }
  v30 = *((_QWORD *)v27 + 1);
  if (!v30)
    goto LABEL_92;
  if (*(_QWORD *)(v30 + 8))
    goto LABEL_92;
  v31 = *((_QWORD *)v27 + 5);
  if (v31 != *((_QWORD *)v4 + 5))
    goto LABEL_92;
  v32 = *(_QWORD *)v27;
  if ((*(_DWORD *)(*(_QWORD *)v27 + 8) & 0xFE) == 0x10)
  {
    if (byte_1ED822020
      || (v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 40), (v44 & 4) == 0)
      && (v45 = *(unsigned __int8 *)(**(_QWORD **)a1 + 80), v45 >= 0x40)
      && (v44 & 8) == 0
      && (v45 & 0x30) != 0)
    {
      v33 = *((_QWORD *)v27 - 4);
      sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(v31 + 56) + 40) + 272, *(_QWORD *)v27);
      if (v35 == 1)
        v36 = -2;
      else
        v36 = (unint64_t)(v34 + 7) >> 3;
      llvm::Instruction::getAAMetadata((uint64_t ***)v27, v162);
      *(_QWORD *)&v161 = v33;
      *((_QWORD *)&v161 + 1) = v36;
      v37 = (_QWORD *)((char *)v4 + 24);
      v38 = (_QWORD *)*((_QWORD *)v163 + 4);
      v39 = (uint64_t)v4;
      if (v38 != (_QWORD *)((char *)v4 + 24))
      {
        while (1)
        {
          v40 = v38 ? (llvm::Instruction *)(v38 - 3) : 0;
          v41 = *(_QWORD *)(a1 + 8);
          *(_OWORD *)v168 = v161;
          v169[0] = v162[0];
          v169[1] = v162[1];
          v170 = 1;
          if ((sub_1C4D90C64(v41, (uint64_t)v40, (__int128 *)v168) & 2) != 0)
            break;
          v38 = (_QWORD *)v38[1];
          if (v38 == v37)
          {
            v40 = v4;
            break;
          }
        }
        if (!v40
          || (v39 = (uint64_t)v4, v40 != v4)
          && (v39 = (uint64_t)v40, !llvm::MemCpyOptPass::moveUp((llvm::MemCpyOptPass *)a1, v4, v40, v163)))
        {
          v23 = v163;
          goto LABEL_68;
        }
      }
      ModRefInfo = llvm::AAResults::getModRefInfo(*(_QWORD *)(a1 + 8), (uint64_t)v4, &v161);
      sub_1C4768AD0((uint64_t)v22, v32);
      v120 = (unint64_t)(v119 + 7) >> 3;
      if ((_DWORD)v118 == 1)
      sub_1C4773D54((uint64_t)v168, v39, 0, 0, 0);
      v160 = (llvm::Value *)*((_QWORD *)v4 - 4);
      v122 = (llvm::Value *)*((_QWORD *)v163 - 4);
      v123 = ((unint64_t)*((unsigned __int16 *)v4 + 9) >> 1) & 0x3F | 0x100;
      v124 = ((unint64_t)*((unsigned __int16 *)v163 + 9) >> 1) & 0x3F | 0x100;
      v125 = *v171;
      v126 = *(llvm::ConstantInt **)(*v171 + 1984);
      if ((ModRefInfo & 2) != 0)
      {
        v131 = *(unsigned int *)(v125 + 1992);
        v165 = v131 >> 8;
        if (v131 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v164, v120, 0);
        }
        else
        {
          if (v131 <= 0xFF)
            v132 = 0;
          else
            v132 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v131);
          v164 = v132 & v120;
        }
        v133 = (uint64_t *)llvm::ConstantInt::get(v126, (llvm::LLVMContext *)&v164, v121);
        if (v165 >= 0x41 && v164)
          MEMORY[0x1CAA32F9C](v164, 0x1000C8000313F17);
        MemMove = llvm::IRBuilderBase::CreateMemMove((uint64_t)v168, v160, v123, v122, v124, v133, 0, 0, 0, 0);
      }
      else
      {
        v127 = *(unsigned int *)(v125 + 1992);
        v165 = v127 >> 8;
        if (v127 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v164, v120, 0);
        }
        else
        {
          if (v127 <= 0xFF)
            v128 = 0;
          else
            v128 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v127);
          v164 = v128 & v120;
        }
        v129 = (uint64_t *)llvm::ConstantInt::get(v126, (llvm::LLVMContext *)&v164, v121);
        if (v165 >= 0x41 && v164)
          MEMORY[0x1CAA32F9C](v164, 0x1000C8000313F17);
        MemMove = llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)v168, 194, v160, v123, v122, v124, v129, 0, 0, 0, 0, 0);
      }
      MemSet = MemMove;
      v134 = *(uint64_t ***)(a1 + 40);
      v135 = *((_DWORD *)*v134 + 10);
      if (v135)
      {
        v136 = (*v134)[3];
        v137 = v135 - 1;
        v138 = (v135 - 1) & ((v4 >> 4) ^ (v4 >> 9));
        v139 = *(llvm::LoadInst **)(v136 + 16 * v138);
        if (v139 == v4)
        {
LABEL_157:
          v142 = *(llvm::MemoryAccess **)(v136 + 16 * v138 + 8);
          goto LABEL_159;
        }
        v140 = 1;
        while (v139 != (llvm::LoadInst *)-4096)
        {
          v141 = v138 + v140++;
          v138 = v141 & v137;
          v139 = *(llvm::LoadInst **)(v136 + 16 * v138);
          if (v139 == v4)
            goto LABEL_157;
        }
      }
      v142 = 0;
LABEL_159:
      MemoryAccessAfter = llvm::MemorySSAUpdater::createMemoryAccessAfter(v134, MemSet, v142, (llvm::BasicBlock **)v142);
      llvm::MemorySSAUpdater::insertDef(*(llvm::MemorySSAUpdater **)(a1 + 40), (llvm::MemoryDef *)MemoryAccessAfter, 1);
      v144 = *(int32x2_t ***)(a1 + 40);
      v145 = (*v144)[5].i32[0];
      if (v145)
      {
        v146 = (*v144)[3];
        v147 = v145 - 1;
        v148 = (v145 - 1) & ((v4 >> 4) ^ (v4 >> 9));
        v149 = *(llvm::LoadInst **)(*(_QWORD *)&v146 + 16 * v148);
        if (v149 == v4)
        {
LABEL_164:
          v152 = *(llvm::MemoryAccess **)(*(_QWORD *)&v146 + 16 * v148 + 8);
          if (v152)
            llvm::MemorySSAUpdater::removeMemoryAccess(v144, v152, 0);
        }
        else
        {
          v150 = 1;
          while (v149 != (llvm::LoadInst *)-4096)
          {
            v151 = v148 + v150++;
            v148 = v151 & v147;
            v149 = *(llvm::LoadInst **)(*(_QWORD *)&v146 + 16 * v148);
            if (v149 == v4)
              goto LABEL_164;
          }
        }
      }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v4 + 5) + 40, (uint64_t ***)v4);
      v153 = *((_QWORD *)v4 + 3);
      v154 = (_QWORD *)*((_QWORD *)v4 + 4);
      *v154 = v153;
      *(_QWORD *)(v153 + 8) = v154;
      *v37 = 0;
      *((_QWORD *)v4 + 4) = 0;
      llvm::Value::deleteValue(v4);
      v4 = v163;
      v106 = *(int32x2_t ***)(a1 + 40);
      v155 = (*v106)[5].i32[0];
      if (!v155)
        goto LABEL_132;
      v108 = (*v106)[3];
      v156 = v155 - 1;
      v110 = (v155 - 1) & ((v163 >> 4) ^ (v163 >> 9));
      v157 = *(llvm::LoadInst **)(*(_QWORD *)&v108 + 16 * v110);
      if (v157 != v163)
      {
        v158 = 1;
        while (v157 != (llvm::LoadInst *)-4096)
        {
          v159 = v110 + v158++;
          v110 = v159 & v156;
          v157 = *(llvm::LoadInst **)(*(_QWORD *)&v108 + 16 * v110);
          if (v157 == v163)
            goto LABEL_130;
        }
        goto LABEL_132;
      }
      goto LABEL_130;
    }
  }
LABEL_68:
  v46 = llvm::Value::stripPointerCasts(*((llvm::Value **)v4 - 4));
  v47 = llvm::Value::stripPointerCasts(*((llvm::Value **)v163 - 4));
  sub_1C4768AD0((uint64_t)v22, **((_QWORD **)v4 - 8));
  v50 = __clz(1 << ((unint64_t)*((unsigned __int16 *)v4 + 9) >> 1)) ^ 0x3F;
  v51 = __clz(1 << ((unint64_t)*((unsigned __int16 *)v163 + 9) >> 1)) ^ 0x3F;
  if (v51 >= v50)
    v52 = v50;
  else
    v52 = v51;
  v166[0] = &off_1E8196A18;
  v166[1] = a1;
  v166[2] = &v163;
  v167 = v166;
  v53 = llvm::MemCpyOptPass::performCallSlotOptzn((_QWORD *)a1, (uint64_t)v23, (uint64_t)v4, (uint64_t)v46, (uint64_t)v47, (void *)((unint64_t)(v48 + 7) >> 3), v49 == 1, (_BYTE *)v52, (uint64_t)v166);
  if (v167 == v166)
  {
    v54 = (void (**)(void))(v166[0] + 32);
  }
  else
  {
    if (!v167)
      goto LABEL_76;
    v54 = (void (**)(void))(*v167 + 40);
  }
  (*v54)();
LABEL_76:
  if (v53)
  {
    v55 = *(int32x2_t ***)(a1 + 40);
    v56 = (*v55)[5].i32[0];
    if (v56)
    {
      v57 = (*v55)[3];
      v58 = v56 - 1;
      v59 = (v56 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      v60 = *(llvm::LoadInst **)(*(_QWORD *)&v57 + 16 * v59);
      if (v60 == v4)
      {
LABEL_82:
        v63 = *(llvm::MemoryAccess **)(*(_QWORD *)&v57 + 16 * v59 + 8);
        if (v63)
          llvm::MemorySSAUpdater::removeMemoryAccess(v55, v63, 0);
      }
      else
      {
        v61 = 1;
        while (v60 != (llvm::LoadInst *)-4096)
        {
          v62 = v59 + v61++;
          v59 = v62 & v58;
          v60 = *(llvm::LoadInst **)(*(_QWORD *)&v57 + 16 * v59);
          if (v60 == v4)
            goto LABEL_82;
        }
      }
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v4 + 5) + 40, (uint64_t ***)v4);
    v64 = *((_QWORD *)v4 + 3);
    v65 = (_QWORD *)*((_QWORD *)v4 + 4);
    *v65 = v64;
    *(_QWORD *)(v64 + 8) = v65;
    *((_QWORD *)v4 + 3) = 0;
    *((_QWORD *)v4 + 4) = 0;
    llvm::Value::deleteValue(v4);
    v66 = v163;
    v67 = *(int32x2_t ***)(a1 + 40);
    v68 = (*v67)[5].i32[0];
    if (v68)
    {
      v69 = (*v67)[3];
      v70 = v68 - 1;
      v71 = (v68 - 1) & ((v163 >> 4) ^ (v163 >> 9));
      v72 = *(llvm::LoadInst **)(*(_QWORD *)&v69 + 16 * v71);
      if (v72 == v163)
      {
LABEL_89:
        v75 = *(llvm::MemoryAccess **)(*(_QWORD *)&v69 + 16 * v71 + 8);
        if (v75)
          llvm::MemorySSAUpdater::removeMemoryAccess(v67, v75, 0);
      }
      else
      {
        v73 = 1;
        while (v72 != (llvm::LoadInst *)-4096)
        {
          v74 = v71 + v73++;
          v71 = v74 & v70;
          v72 = *(llvm::LoadInst **)(*(_QWORD *)&v69 + 16 * v71);
          if (v72 == v163)
            goto LABEL_89;
        }
      }
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v66 + 5) + 40, (uint64_t ***)v66);
    v76 = *((_QWORD *)v66 + 3);
    v77 = (_QWORD *)*((_QWORD *)v66 + 4);
    *v77 = v76;
    *(_QWORD *)(v76 + 8) = v77;
    *((_QWORD *)v66 + 3) = 0;
    *((_QWORD *)v66 + 4) = 0;
    llvm::Value::deleteValue(v66);
    return 1;
  }
LABEL_92:
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 40) & 0x40) != 0)
  {
    if (!byte_1ED822020)
      return 0;
  }
  else if ((*(_BYTE *)(**(_QWORD **)a1 + 81) & 0x30) == 0 && byte_1ED822020 == 0)
  {
    return 0;
  }
  v79 = (llvm *)*((_QWORD *)v4 - 8);
  result = (uint64_t)llvm::isBytewiseValue(v79, v22, v25);
  if (result)
  {
    v80 = result;
    v81 = llvm::MemCpyOptPass::tryMergingIntoMemset((llvm::MemCpyOptPass *)a1, v4, *((llvm::Value **)v4 - 4), (llvm::Value *)result);
    if (v81)
    {
      *a3 = v81 + 3;
      return 1;
    }
    if ((*(_DWORD *)(*(_QWORD *)v79 + 8) & 0xFE) == 0x10)
    {
      sub_1C4768AD0((uint64_t)v22, *(_QWORD *)v79);
      v84 = v83 + 7;
      if ((_DWORD)v82 == 1)
      v85 = v84 >> 3;
      sub_1C4773D54((uint64_t)v168, (uint64_t)v4, 0, 0, 0);
      v87 = (llvm::Value *)*((_QWORD *)v4 - 4);
      v88 = ((unint64_t)*((unsigned __int16 *)v4 + 9) >> 1) & 0x3F | 0x100;
      v89 = *(llvm::ConstantInt **)(*v171 + 1984);
      v90 = *(_DWORD *)(*v171 + 1992);
      DWORD2(v161) = v90 >> 8;
      if (v90 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v161, v85, 0);
      }
      else
      {
        if (v90 <= 0xFF)
          v91 = 0;
        else
          v91 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v90);
        *(_QWORD *)&v161 = v91 & v85;
      }
      v92 = (uint64_t *)llvm::ConstantInt::get(v89, (llvm::LLVMContext *)&v161, v86);
      if (DWORD2(v161) >= 0x41 && (_QWORD)v161)
        MEMORY[0x1CAA32F9C](v161, 0x1000C8000313F17);
      MemSet = llvm::IRBuilderBase::CreateMemSet((uint64_t)v168, v87, v80, v92, v88, 0, 0, 0, 0);
      v94 = *(_QWORD *)(a1 + 32);
      v95 = *(_DWORD *)(v94 + 40);
      if (v95)
      {
        v96 = *(_QWORD *)(v94 + 24);
        v97 = v95 - 1;
        v98 = (v95 - 1) & ((v4 >> 4) ^ (v4 >> 9));
        v99 = *(llvm::LoadInst **)(v96 + 16 * v98);
        if (v99 == v4)
        {
LABEL_117:
          v102 = *(_QWORD *)(v96 + 16 * v98 + 8);
LABEL_119:
          if (*(_BYTE *)(v102 + 16) == 25)
            v103 = v102;
          else
            v103 = 0;
          if (v103)
            v104 = (uint64_t *)(v103 - 32);
          else
            v104 = (uint64_t *)(v102 - 64);
          MemoryAccessBefore = llvm::MemorySSAUpdater::createMemoryAccessBefore(*(uint64_t ***)(a1 + 40), (uint64_t)MemSet, *v104, v102);
          llvm::MemorySSAUpdater::insertDef(*(llvm::MemorySSAUpdater **)(a1 + 40), (llvm::MemoryDef *)MemoryAccessBefore, 0);
          v106 = *(int32x2_t ***)(a1 + 40);
          v107 = (*v106)[5].i32[0];
          if (!v107)
          {
LABEL_132:
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v4 + 5) + 40, (uint64_t ***)v4);
            v115 = *((_QWORD *)v4 + 3);
            v116 = (_QWORD *)*((_QWORD *)v4 + 4);
            *v116 = v115;
            *(_QWORD *)(v115 + 8) = v116;
            *((_QWORD *)v4 + 3) = 0;
            *((_QWORD *)v4 + 4) = 0;
            llvm::Value::deleteValue(v4);
            *a3 = (char *)MemSet + 24;
            if (v168[0] != v169)
              free(v168[0]);
            return 1;
          }
          v108 = (*v106)[3];
          v109 = v107 - 1;
          v110 = (v107 - 1) & ((v4 >> 4) ^ (v4 >> 9));
          v111 = *(llvm::LoadInst **)(*(_QWORD *)&v108 + 16 * v110);
          if (v111 != v4)
          {
            v112 = 1;
            while (v111 != (llvm::LoadInst *)-4096)
            {
              v113 = v110 + v112++;
              v110 = v113 & v109;
              v111 = *(llvm::LoadInst **)(*(_QWORD *)&v108 + 16 * v110);
              if (v111 == v4)
                goto LABEL_130;
            }
            goto LABEL_132;
          }
LABEL_130:
          v114 = *(llvm::MemoryAccess **)(*(_QWORD *)&v108 + 16 * v110 + 8);
          if (v114)
            llvm::MemorySSAUpdater::removeMemoryAccess(v106, v114, 0);
          goto LABEL_132;
        }
        v100 = 1;
        while (v99 != (llvm::LoadInst *)-4096)
        {
          v101 = v98 + v100++;
          v98 = v101 & v97;
          v99 = *(llvm::LoadInst **)(v96 + 16 * v98);
          if (v99 == v4)
            goto LABEL_117;
        }
      }
      v102 = 0;
      goto LABEL_119;
    }
    return 0;
  }
  return result;
}

uint64_t llvm::MemCpyOptPass::performCallSlotOptzn(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, int a7, _BYTE *a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v12;
  const llvm::DataLayout *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  const char *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  _BYTE *v59;
  _QWORD *v60;
  unsigned int v61;
  void *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v67;
  uint64_t v68;
  int v69;
  const llvm::Instruction *v70;
  uint64_t v71;
  _DWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char ModRefInfo;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t j;
  void *v85;
  uint64_t v86;
  const llvm::Value **v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  unint64_t v91;
  uint64_t k;
  int v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  llvm *UnderlyingObject;
  const llvm::Value *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t i;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t *v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  unsigned int v118;
  uint64_t v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  llvm::Value *PointerCast;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  int v133;
  int v134;
  _QWORD *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  llvm::Value **v145;
  llvm::Value *v146;
  int v147;
  int v148;
  _QWORD *v149;
  uint64_t **v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  llvm::Value *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  llvm::Value *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  unsigned int v168;
  unint64_t v169;
  unint64_t v170;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  llvm *v177[2];
  __int128 v178;
  __int128 v179;
  void *v180;
  uint64_t v181;
  _BYTE v182[64];
  __int128 v183;
  __int128 v184;
  __int128 v185;
  char v186;
  _QWORD v187[2];
  _BYTE *v188;
  uint64_t v189;
  _BYTE v190[128];
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;

  v194 = *MEMORY[0x1E0C80C00];
  if (a7 == 1)
    return 0;
  v9 = 0;
  if (!a5)
    return v9;
  if (*(_BYTE *)(a5 + 16) != 59)
    return v9;
  v9 = 0;
  v12 = *(_QWORD *)(a5 - 32);
  if (!v12 || *(_BYTE *)(v12 + 16) != 16)
    return v9;
  v16 = (const llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40) + 272);
  v17 = *(_QWORD *)(a5 + 64);
  sub_1C4768AD0((uint64_t)v16, v17);
  v19 = (unint64_t)(v18 + 7) >> 3;
  v21 = v20 == 1;
  v22 = 1;
  llvm::DataLayout::getAlignment((uint64_t)v16, v17);
  v25 = (_QWORD *)(v12 + 24);
  if (*(_DWORD *)(v12 + 32) >= 0x41u)
    v25 = (_QWORD *)*v25;
  v26 = *v25 * (((1 << v23) + v19 - 1) & -(1 << v23));
  if (v21)
  if ((unint64_t)a6 < v26)
    return 0;
  v27 = *(_QWORD *)(a9 + 24);
  if (!v27)
  {
    sub_1C485C2F0();
LABEL_222:
    free(v85);
LABEL_97:
    if ((v183 & 1) == 0)
      MEMORY[0x1CAA32FB4](*((_QWORD *)&v183 + 1), 8);
    goto LABEL_108;
  }
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 48))(v27);
  if (!v28)
    return 0;
  v29 = v28;
  v31 = v28 - 32;
  v30 = *(_QWORD *)(v28 - 32);
  if (v30)
  {
    if (!*(_BYTE *)(v30 + 16)
      && *(_QWORD *)(v30 + 24) == *(_QWORD *)(v28 + 72)
      && (*(_BYTE *)(v30 + 33) & 0x20) != 0
      && *(_DWORD *)(v30 + 36) == 168)
    {
      return 0;
    }
  }
  if (*(_QWORD *)(v28 + 40) != *(_QWORD *)(a3 + 40))
    return 0;
  v170 = v26;
  if (*(_BYTE *)(a3 + 16) == 61)
  {
    llvm::MemoryLocation::getOrNone((uint64_t ***)a3, (uint64_t)&v183);
    v174 = v183;
    v175 = v184;
    v176 = v185;
  }
  else
  {
    llvm::MemoryLocation::getForArgument(a3, 0, 0, (uint64_t)&v174);
  }
  v32 = a1[1];
  v33 = a1[4];
  v34 = *(_QWORD *)(v33 + 24);
  v35 = *(_DWORD *)(v33 + 40) - 1;
  v36 = v35 & ((v29 >> 4) ^ (v29 >> 9));
  v37 = *(_QWORD *)(v34 + 16 * v36);
  if (v29 == v37)
  {
LABEL_28:
    v40 = *(_QWORD *)(v34 + 16 * v36 + 8);
  }
  else
  {
    v38 = 1;
    while (v37 != -4096)
    {
      v39 = v36 + v38++;
      v36 = v39 & v35;
      v37 = *(_QWORD *)(v34 + 16 * v36);
      if (v29 == v37)
        goto LABEL_28;
    }
    v40 = 0;
  }
  v41 = v35 & ((a3 >> 4) ^ (a3 >> 9));
  v42 = *(_QWORD *)(v34 + 16 * v41);
  v169 = v31;
  if (v42 == a3)
  {
LABEL_34:
    v45 = *(_QWORD *)(v34 + 16 * v41 + 8);
  }
  else
  {
    v43 = 1;
    while (v42 != -4096)
    {
      v44 = v41 + v43++;
      v41 = v44 & v35;
      v42 = *(_QWORD *)(v34 + 16 * v41);
      if (v42 == a3)
        goto LABEL_34;
    }
    v45 = 0;
  }
  v46 = v45 + 32;
  v47 = *(_QWORD *)(v40 + 40);
  if (v47 != v45 + 32)
  {
    do
    {
      v48 = v47 - 32;
      if (!v47)
        v48 = 0;
      v49 = *(_QWORD *)(v48 + 72);
      v183 = v174;
      v184 = v175;
      v185 = v176;
      v186 = 1;
      if ((sub_1C4D90C64(v32, v49, &v183) & 3) != 0)
        return 0;
      v47 = *(_QWORD *)(v47 + 8);
    }
    while (v47 != v46);
  }
  v50 = (unsigned __int8 *)a1[3];
  LODWORD(v181) = 64;
  v180 = a6;
  *(_QWORD *)&v183 = &v185;
  *((_QWORD *)&v183 + 1) = &v185;
  *(_QWORD *)&v184 = 32;
  DWORD2(v184) = 0;
  v12 = v29;
  v51 = sub_1C4E99094(a4, 0, (llvm::APInt *)&v180, v16, (unint64_t *)v29, v50, 0, (llvm::SmallPtrSetImplBase *)&v183, 16);
  if (*((_QWORD *)&v183 + 1) != (_QWORD)v183)
    free(*((void **)&v183 + 1));
  if (v181 >= 0x41 && v180)
    MEMORY[0x1CAA32F9C](v180, 0x1000C8000313F17);
  if (!v51)
    return 0;
  if ((sub_1C5BC6B1C((llvm *)a4, v29, a3) & 1) != 0)
    return 0;
  v52 = *(_WORD *)(a5 + 18) & 0x3F;
  if (a8 < v52 && *(_BYTE *)(a4 + 16) != 59)
    return 0;
  v168 = a8;
  v53 = *(_QWORD *)(a5 + 8);
  a8 = v182;
  v180 = v182;
  v181 = 0x800000000;
  if (v53)
  {
    v54 = -1;
    v55 = v53;
    do
    {
      v55 = *(_QWORD *)(v55 + 8);
      ++v54;
    }
    while (v55);
    v56 = v54 + 1;
    if (v54 >= 8)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v180, (uint64_t)v182, v54 + 1, 8);
      v57 = v181;
      v59 = v180;
      v58 = v181;
    }
    else
    {
      v57 = 0;
      v58 = 0;
      v59 = v182;
    }
    v60 = &v59[8 * v57];
    do
    {
      *v60++ = *(_QWORD *)(v53 + 24);
      v53 = *(_QWORD *)(v53 + 8);
    }
    while (v53);
  }
  else
  {
    v58 = 0;
    v56 = 0;
  }
  v61 = v58 + v56;
  LODWORD(v181) = v58 + v56;
  if (v58 + v56)
  {
    do
    {
      v62 = v180;
      v63 = *((_QWORD *)v180 + --v61);
      LODWORD(v181) = v61;
      v64 = *(unsigned __int8 *)(v63 + 16);
      if ((v64 - 77) < 2)
        goto LABEL_64;
      if (v64 == 84)
      {
        v65 = *(_QWORD *)(v63 - 32);
        if (v65
          && !*(_BYTE *)(v65 + 16)
          && *(_QWORD *)(v65 + 24) == *(_QWORD *)(v63 + 72)
          && (*(_BYTE *)(v65 + 33) & 0x20) != 0
          && llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)v63))
        {
          continue;
        }
      }
      else if (v64 == 62)
      {
        if ((llvm::GetElementPtrInst::hasAllZeroIndices((llvm::GetElementPtrInst *)v63) & 1) == 0)
          goto LABEL_217;
LABEL_64:
        sub_1C4F5E908((unsigned int *)&v180, (uint64_t)v62 + 8 * v61, *(_QWORD *)(v63 + 8), 0);
        v61 = v181;
        continue;
      }
      if (v63 != a2 && v63 != v29)
        goto LABEL_217;
    }
    while (v61);
  }
  v67 = *(_DWORD *)(v29 + 20);
  v68 = v67 & 0x7FFFFFF;
  v69 = *(unsigned __int8 *)(v29 + 16);
  v167 = v52;
  if (v69 == 84)
  {
    v70 = (const llvm::Instruction *)v29;
    v71 = 0;
  }
  else if (v69 == 39)
  {
    v70 = (const llvm::Instruction *)v29;
    v71 = (*(_DWORD *)(v29 + 80) + 1);
  }
  else
  {
    v71 = 2;
    v70 = (const llvm::Instruction *)v29;
  }
  v72 = (_DWORD *)((char *)v70 - 32 * v68);
  if (v67 < 0)
  {
    v166 = *((_QWORD *)v72 - 1);
    if ((v166 & 0xFFFFFFFF0) != 0)
      v73 = (*(v72 - 3) - *(_DWORD *)((char *)v72 - v166));
    else
      v73 = 0;
    v70 = (const llvm::Instruction *)v29;
  }
  else
  {
    v73 = 0;
  }
  if (v72 != (_DWORD *)((char *)v70 + -32 * v73 + -32 * v71 - 32))
  {
    v74 = (32 * v71 + 32 * v73) ^ 0xFFFFFFFFFFFFFFE0;
    v75 = -32 * v68;
    while (llvm::Value::stripPointerCasts(*(llvm::Value **)((char *)v70 + v75)) != (llvm::Value *)a5
         || sub_1C4D91D40((uint64_t)v70, (v75 + 32 * (unint64_t)(*((_DWORD *)v70 + 5) & 0x7FFFFFF)) >> 5, 22))
    {
      v75 += 32;
      if (v74 == v75)
        goto LABEL_85;
    }
    UnderlyingObject = llvm::getUnderlyingObject((llvm *)a4, (const llvm::Value *)6);
    if (!llvm::isIdentifiedFunctionLocal(UnderlyingObject, v103))
    {
LABEL_217:
      v9 = 0;
      goto LABEL_218;
    }
    v9 = 0;
    if ((llvm::PointerMayBeCapturedBefore(UnderlyingObject, (const llvm::Value *)1, 1, (uint64_t)v70, a1[3], 1, 0, 0) & 1) != 0)goto LABEL_218;
    if (v170 <= 0x7FFFFFFFFFFFFFFBLL)
      v104 = v170;
    else
      v104 = -2;
    v70 = (const llvm::Instruction *)v29;
    v105 = *(_QWORD *)(v29 + 32);
    for (i = *(_QWORD *)(v29 + 40) + 40; v105 != i; v105 = *(_QWORD *)(v105 + 8))
    {
      v107 = v105 - 24;
      if (v105)
        v108 = v105 - 24;
      else
        v108 = 0;
      v109 = *(unsigned __int8 *)(v108 + 16);
      if (v109 == 84)
      {
        v110 = *(_QWORD *)(v108 - 32);
        if (v110
          && !*(_BYTE *)(v110 + 16)
          && *(_QWORD *)(v110 + 24) == *(_QWORD *)(v108 + 72)
          && (*(_BYTE *)(v110 + 33) & 0x20) != 0
          && *(_DWORD *)(*(_QWORD *)(v105 - 56) + 36) == 167
          && llvm::Value::stripPointerCasts(*(llvm::Value **)(v107 - 32 * (*(_DWORD *)(v105 - 4) & 0x7FFFFFF) + 32)) == (llvm::Value *)a5)
        {
          v111 = *(_QWORD *)(v107 - 32 * (*(_DWORD *)(v105 - 4) & 0x7FFFFFF));
          v112 = (unint64_t *)(v111 + 24);
          v113 = *(_DWORD *)(v111 + 32);
          if (v113 >= 0x41)
          {
            v114 = v113 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v111 + 24));
            v70 = (const llvm::Instruction *)v12;
            if (v114 > 0x40)
              break;
            v112 = (unint64_t *)*v112;
          }
          v70 = (const llvm::Instruction *)v12;
          if (*v112 >= v170)
            break;
        }
        v109 = *(unsigned __int8 *)(v108 + 16);
      }
      if (v109 == 29)
        break;
      if (v108 != a2)
      {
        v115 = a1[1];
        *(_QWORD *)&v183 = a5;
        *((_QWORD *)&v183 + 1) = v104;
        v184 = 0u;
        v185 = 0u;
        v186 = 1;
        if ((sub_1C4D90C64(v115, v108, &v183) & 3) != 0
          || *(unsigned __int8 *)(v108 + 16) - 40 > 0xFFFFFFF4)
        {
          goto LABEL_217;
        }
      }
    }
  }
LABEL_85:
  v76 = (uint64_t)v70;
  v22 = a4;
  if (!llvm::DominatorTree::dominates((llvm::DominatorTree *)a1[3], (const llvm::Value *)a4, v70))
  {
    v9 = 0;
    if (!a4 || *(_BYTE *)(a4 + 16) != 62)
      goto LABEL_218;
    v86 = *(_DWORD *)(a4 + 20) & 0x7FFFFFF;
    v87 = (const llvm::Value **)(a4 - 32 * v86);
    if ((_DWORD)v86 != 1)
    {
      v88 = 1;
      while (*((_BYTE *)v87[4 * v88] + 16) == 16)
      {
        if ((_DWORD)v86 == ++v88)
          goto LABEL_105;
      }
      goto LABEL_217;
    }
LABEL_105:
    v76 = v12;
    if (!llvm::DominatorTree::dominates((llvm::DominatorTree *)a1[3], *v87, (const llvm::Instruction *)v12))
      goto LABEL_217;
    llvm::Instruction::moveBefore((llvm::Instruction *)a4, (llvm::Instruction *)v12);
  }
  v77 = a1[1];
  if (v170 <= 0x7FFFFFFFFFFFFFFBLL)
    v78 = v170;
  else
    v78 = -2;
  *(_QWORD *)&v183 = a4;
  *((_QWORD *)&v183 + 1) = v78;
  v184 = 0u;
  v185 = 0u;
  ModRefInfo = llvm::AAResults::getModRefInfo(v77, v76, (uint64_t)&v183);
  if ((ModRefInfo & 3) != 0)
  {
    v80 = a1[1];
    v81 = a1[3];
    v177[0] = (llvm *)a4;
    v177[1] = (llvm *)v78;
    v178 = 0u;
    v179 = 0u;
    *(_QWORD *)&v183 = 1;
    v82 = 8;
    v19 = v169;
    do
    {
      v83 = (char *)&v183 + v82;
      *(_OWORD *)v83 = xmmword_1C85F2120;
      *((_OWORD *)v83 + 1) = xmmword_1C85F2120;
      v82 += 40;
    }
    while (v83 + 40 != (char *)v187);
    v187[0] = &v191;
    v187[1] = 0;
    v188 = v190;
    v189 = 0x400000000;
    v191 = &unk_1E8134870;
    v192 = 1;
    for (j = 504; j != 632; j += 16)
      *(_QWORD *)((char *)&v183 + j) = -4096;
    LOBYTE(a6) = llvm::AAResults::callCapturesBefore(v80, v12, v177, v81, (uint64_t)&v183);
    if ((v192 & 1) == 0)
      MEMORY[0x1CAA32FB4](v193, 8);
    v85 = v188;
    if (v188 == v190)
      goto LABEL_97;
    goto LABEL_222;
  }
  LOBYTE(a6) = ModRefInfo;
  v19 = v169;
LABEL_108:
  if ((a6 & 3) != 0)
    goto LABEL_217;
  v89 = *(_DWORD *)(*(_QWORD *)a5 + 8);
  if ((v89 & 0xFE) == 0x12)
    v89 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a5 + 16) + 8);
  v90 = *(_DWORD *)(*(_QWORD *)v22 + 8);
  if ((v90 & 0xFE) == 0x12)
    v90 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v22 + 16) + 8);
  if ((v90 ^ v89) > 0xFF)
    goto LABEL_217;
  v91 = 0;
  for (k = v12; ; k += 32)
  {
    v93 = *(unsigned __int8 *)(v12 + 16);
    if (v93 == 84)
    {
      v94 = 0;
    }
    else
    {
      v94 = v93 == 39 ? (*(_DWORD *)(v12 + 80) + 1) : 2;
      v22 = a4;
      v19 = v169;
    }
    v95 = *(_DWORD *)(v12 + 20);
    if (v95 < 0 && (v101 = v95 & 0x7FFFFFF, (*(_QWORD *)(v12 - 8 - 32 * v101) & 0xFFFFFFFF0) != 0))
    {
      v97 = -v101;
      v96 = *(_DWORD *)(v12 - 32 * v101 - 12) - *(_DWORD *)(v12 - 32 * v101 - *(_QWORD *)(v12 - 32 * v101 - 8));
    }
    else
    {
      v96 = 0;
      v97 = -(uint64_t)(v95 & 0x7FFFFFF);
    }
    if (v91 >= ((v19 - 32 * v94 + 32 * -v96 - (v12 + 32 * v97)) >> 5))
      break;
    if (llvm::Value::stripPointerCasts(*(llvm::Value **)(k + 32 * v97)) == (llvm::Value *)a5)
    {
      v98 = *(_DWORD *)(*(_QWORD *)a5 + 8);
      if ((v98 & 0xFE) == 0x12)
        v98 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a5 + 16) + 8);
      v99 = **(_QWORD **)(k - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF));
      v100 = *(_DWORD *)(v99 + 8);
      if ((v100 & 0xFE) == 0x12)
        v100 = *(_DWORD *)(**(_QWORD **)(v99 + 16) + 8);
      if ((v100 ^ v98) > 0xFF)
        goto LABEL_217;
    }
    ++v91;
  }
  v116 = 0;
  v117 = 0;
  v118 = (v22 >> 4) ^ (v22 >> 9);
  while (1)
  {
    if (v93 == 84)
    {
      v119 = 0;
    }
    else
    {
      v119 = v93 == 39 ? (*(_DWORD *)(v12 + 80) + 1) : 2;
      v22 = a4;
      v19 = v169;
    }
    v120 = *(_DWORD *)(v12 + 20);
    if (v120 < 0 && (v165 = v120 & 0x7FFFFFF, (*(_QWORD *)(v12 - 8 - 32 * v165) & 0xFFFFFFFF0) != 0))
    {
      v122 = -v165;
      v121 = *(_DWORD *)(v12 - 32 * v165 - 12) - *(_DWORD *)(v12 - 32 * v165 - *(_QWORD *)(v12 - 32 * v165 - 8));
    }
    else
    {
      v121 = 0;
      v122 = -(uint64_t)(v120 & 0x7FFFFFF);
    }
    v123 = v19 - 32 * v119 + 32 * -v121;
    v124 = v12 + 32 * v122;
    if (v116 >= ((unint64_t)(v123 - v124) >> 5))
      break;
    if (llvm::Value::stripPointerCasts(*(llvm::Value **)(v124 + 32 * v116)) != (llvm::Value *)a5)
      goto LABEL_202;
    v125 = *(_QWORD *)a5;
    PointerCast = (llvm::Value *)v22;
    if (*(_QWORD *)a5 != *(_QWORD *)v22)
    {
      if ((*(_BYTE *)(v22 + 23) & 0x10) != 0)
      {
        v127 = ***(_QWORD ***)v22;
        v128 = *(_QWORD *)(v127 + 152);
        v129 = *(unsigned int *)(v127 + 168);
        if (!(_DWORD)v129)
          goto LABEL_175;
        LODWORD(v130) = (v129 - 1) & v118;
        v131 = (uint64_t *)(v128 + 16 * v130);
        v132 = *v131;
        if (*v131 != v22)
        {
          v133 = 1;
          while (v132 != -4096)
          {
            v134 = v130 + v133++;
            v130 = v134 & (v129 - 1);
            v132 = *(_QWORD *)(v128 + 16 * v130);
            if (v132 == v22)
            {
              v131 = (uint64_t *)(v128 + 16 * v130);
              goto LABEL_176;
            }
          }
LABEL_175:
          v131 = (uint64_t *)(v128 + 16 * v129);
        }
LABEL_176:
        v135 = (_QWORD *)v131[1];
        v138 = *v135;
        v137 = (char *)(v135 + 2);
        v136 = v138;
      }
      else
      {
        v136 = 0;
        v137 = &byte_1C871356D;
      }
      LOWORD(v185) = 261;
      *(_QWORD *)&v183 = v137;
      *((_QWORD *)&v183 + 1) = v136;
      PointerCast = llvm::CastInst::CreatePointerCast((_QWORD *)v22, v125, (uint64_t)&v183, v12);
    }
    v139 = v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) + 32 * v116;
    v140 = **(_QWORD **)v139;
    if (v140 == *(_QWORD *)PointerCast)
    {
      v149 = (_QWORD *)(v139 + 8);
      v150 = (uint64_t **)(v139 + 16);
      **(_QWORD **)(v139 + 16) = *(_QWORD *)(v139 + 8);
      v151 = *(_QWORD *)(v139 + 8);
      if (v151)
        *(_QWORD *)(v151 + 16) = *v150;
      *(_QWORD *)v139 = PointerCast;
      v154 = *((_QWORD *)PointerCast + 1);
      v152 = (uint64_t *)((char *)PointerCast + 8);
      v153 = v154;
      *v149 = v154;
      if (v154)
        *(_QWORD *)(v153 + 16) = v149;
      *v150 = v152;
      goto LABEL_200;
    }
    if ((*((_BYTE *)PointerCast + 23) & 0x10) != 0)
    {
      v141 = ***(_QWORD ***)PointerCast;
      v142 = *(_QWORD *)(v141 + 152);
      v143 = *(unsigned int *)(v141 + 168);
      if (!(_DWORD)v143)
        goto LABEL_191;
      LODWORD(v144) = (v143 - 1) & ((PointerCast >> 4) ^ (PointerCast >> 9));
      v145 = (llvm::Value **)(v142 + 16 * v144);
      v146 = *v145;
      if (*v145 != PointerCast)
      {
        v147 = 1;
        while (v146 != (llvm::Value *)-4096)
        {
          v148 = v144 + v147++;
          v144 = v148 & (v143 - 1);
          v146 = *(llvm::Value **)(v142 + 16 * v144);
          if (v146 == PointerCast)
          {
            v145 = (llvm::Value **)(v142 + 16 * v144);
            goto LABEL_192;
          }
        }
LABEL_191:
        v145 = (llvm::Value **)(v142 + 16 * v143);
      }
LABEL_192:
      v155 = v145[1];
      v158 = *(_QWORD *)v155;
      v157 = (char *)v155 + 16;
      v156 = v158;
      goto LABEL_193;
    }
    v156 = 0;
    v157 = &byte_1C871356D;
LABEL_193:
    LOWORD(v185) = 261;
    *(_QWORD *)&v183 = v157;
    *((_QWORD *)&v183 + 1) = v156;
    v159 = llvm::CastInst::CreatePointerCast(PointerCast, v140, (uint64_t)&v183, v12);
    v160 = v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF);
    v139 = v160 + 32 * v116;
    if (*(_QWORD *)v139)
    {
      **(_QWORD **)(v139 + 16) = *(_QWORD *)(v139 + 8);
      v161 = *(_QWORD *)(v139 + 8);
      if (v161)
        *(_QWORD *)(v161 + 16) = *(_QWORD *)(v139 + 16);
    }
    *(_QWORD *)v139 = v159;
    if (!v159)
      goto LABEL_201;
    v163 = *((_QWORD *)v159 + 1);
    v152 = (uint64_t *)((char *)v159 + 8);
    v162 = v163;
    v164 = v160 + 32 * v116;
    *(_QWORD *)(v164 + 8) = v163;
    if (v163)
      *(_QWORD *)(v162 + 16) = v164 + 8;
    *(_QWORD *)(v164 + 16) = v152;
LABEL_200:
    *v152 = v139;
LABEL_201:
    v117 = 1;
LABEL_202:
    ++v116;
    LOBYTE(v93) = *(_BYTE *)(v12 + 16);
  }
  if ((v117 & 1) == 0)
    goto LABEL_217;
  if (v168 < v167)
    *(_WORD *)(a4 + 18) = *(_WORD *)(a4 + 18) & 0xFFC0 | v167;
  LODWORD(v184) = 25;
  v183 = xmmword_1C866A520;
  llvm::combineMetadata(v12, (_BYTE *)a2, (unsigned int *)&v183, 5, 1);
  if (a3 != a2)
    llvm::combineMetadata(v12, (_BYTE *)a3, (unsigned int *)&v183, 5, 1);
  v9 = 1;
LABEL_218:
  if (v180 != a8)
    free(v180);
  return v9;
}

unsigned __int8 **llvm::MemCpyOptPass::processMemSet(llvm::MemCpyOptPass *a1, llvm::Instruction *a2, _QWORD *a3)
{
  _DWORD *v3;
  uint64_t v7;
  llvm::APInt *v8;
  unsigned int v9;
  unsigned __int8 **result;
  llvm::Value *v11;

  v3 = (_DWORD *)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  if (*(_BYTE *)(*((_QWORD *)v3 + 8) + 16) != 16)
    return 0;
  v7 = *((_QWORD *)v3 + 12);
  v8 = (llvm::APInt *)(v7 + 24);
  v9 = *(_DWORD *)(v7 + 32);
  if (v9 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(v8) != v9)
      return 0;
  }
  else if (*(_QWORD *)v8)
  {
    return 0;
  }
  v11 = llvm::Value::stripPointerCasts(*(llvm::Value **)v3);
  result = llvm::MemCpyOptPass::tryMergingIntoMemset(a1, a2, v11, ((llvm::Value **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4]);
  if (result)
  {
    *a3 = result + 3;
    return (unsigned __int8 **)1;
  }
  return result;
}

uint64_t sub_1C5BC6B1C(llvm *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  llvm *UnderlyingObject;
  BOOL *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  llvm::Instruction *v11;
  char v12;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 112);
  if (v5 && (*(_BYTE *)(v5 + 16) & 0x20) != 0)
    return 0;
  v12 = 0;
  UnderlyingObject = llvm::getUnderlyingObject(a1, (const llvm::Value *)6);
  if (llvm::isNotVisibleOnUnwind(UnderlyingObject, (const llvm::Value *)&v12, v7))
  {
    result = 0;
    if (!v12)
      return result;
  }
  if (a2 == a3)
    return 0;
  v9 = a3 + 24;
  v10 = a2 + 24;
  do
  {
    if (v10)
      v11 = (llvm::Instruction *)(v10 - 24);
    else
      v11 = 0;
    result = llvm::Instruction::mayThrow(v11);
    if ((result & 1) != 0)
      break;
    v10 = *(_QWORD *)(v10 + 8);
  }
  while (v10 != v9);
  return result;
}

uint64_t llvm::MemCpyOptPass::processMemCpyMemCpyDependence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::Value *v6;
  uint64_t v8;
  llvm::APInt *v9;
  unsigned int v10;
  llvm::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  llvm::MemorySSA *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  llvm::Value *v40;
  __int16 v41;
  llvm::Value *v42;
  __int16 v43;
  uint64_t *v44;
  uint64_t v45;
  llvm::APInt *v46;
  unsigned int v47;
  BOOL v48;
  uint64_t v49;
  llvm::Value *v50;
  __int16 ParamAlignment;
  llvm::Value *v52;
  __int16 v53;
  uint64_t *v54;
  uint64_t v55;
  llvm::APInt *v56;
  unsigned int v57;
  BOOL v58;
  BOOL v59;
  int v60;
  llvm::Value *MemMove;
  int v62;
  int v63;
  llvm::Instruction *v64;
  uint64_t **v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  llvm::MemoryAccess *v73;
  char *MemoryAccessAfter;
  int32x2_t **v75;
  __int32 v76;
  int32x2_t v77;
  __int32 v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  llvm::MemoryAccess *v83;
  uint64_t v84;
  _QWORD *v85;
  __int128 v86[3];
  void *v87[2];
  _QWORD v88[17];

  v88[15] = *MEMORY[0x1E0C80C00];
  v6 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32));
  if (v6 != llvm::Value::stripPointerCasts(*(llvm::Value **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF))))
    return 0;
  v8 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 96);
  v9 = (llvm::APInt *)(v8 + 24);
  v10 = *(_DWORD *)(v8 + 32);
  if (v10 <= 0x40)
  {
    if (!*(_QWORD *)v9)
      goto LABEL_7;
    return 0;
  }
  if (llvm::APInt::countLeadingZerosSlowCase(v9) != v10)
    return 0;
LABEL_7:
  v11 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32));
  if (v11 == llvm::Value::stripPointerCasts(*(llvm::Value **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32)))
    return 0;
  v12 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 64);
  v13 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64);
  if (v12 != v13)
  {
    v14 = *(_BYTE *)(v12 + 16) == 16 ? *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 64) : 0;
    v15 = *(_BYTE *)(v13 + 16) == 16 ? *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64) : 0;
    if (!v14 || v15 == 0)
      return 0;
    v17 = (_QWORD *)(v14 + 24);
    if (*(_DWORD *)(v14 + 32) >= 0x41u)
      v17 = (_QWORD *)*v17;
    v18 = (_QWORD *)*v17;
    v19 = (_QWORD *)(v15 + 24);
    if (*(_DWORD *)(v15 + 32) >= 0x41u)
      v19 = (_QWORD *)*v19;
    if ((unint64_t)v18 < *v19)
      return 0;
  }
  v20 = *(llvm::MemorySSA **)(a1 + 32);
  v21 = *(_QWORD *)(a1 + 8);
  llvm::MemoryLocation::getForArgument(a3, 1u, 0, (uint64_t)v86);
  v22 = *(_QWORD *)(a1 + 32);
  v23 = *(_DWORD *)(v22 + 40);
  v24 = a2 >> 4;
  if (v23)
  {
    v25 = *(_QWORD *)(v22 + 24);
    v26 = v23 - 1;
    v27 = v26 & ((a3 >> 4) ^ (a3 >> 9));
    v28 = *(_QWORD *)(v25 + 16 * v27);
    if (v28 == a3)
    {
LABEL_29:
      v31 = *(_QWORD *)(v25 + 16 * v27 + 8);
    }
    else
    {
      v29 = 1;
      while (v28 != -4096)
      {
        v30 = v27 + v29++;
        v27 = v30 & v26;
        v28 = *(_QWORD *)(v25 + 16 * v27);
        if (v28 == a3)
          goto LABEL_29;
      }
      v31 = 0;
    }
    v32 = v26 & (v24 ^ (a2 >> 9));
    v33 = *(_QWORD *)(v25 + 16 * v32);
    if (v33 == a2)
    {
LABEL_35:
      v36 = *(_QWORD *)(v25 + 16 * v32 + 8);
      goto LABEL_38;
    }
    v34 = 1;
    while (v33 != -4096)
    {
      v35 = v32 + v34++;
      v32 = v35 & v26;
      v33 = *(_QWORD *)(v25 + 16 * v32);
      if (v33 == a2)
        goto LABEL_35;
    }
  }
  else
  {
    v31 = 0;
  }
  v36 = 0;
LABEL_38:
  if ((sub_1C5BC7164(v20, v21, v86, v31, v36) & 1) != 0)
    return 0;
  v37 = *(_QWORD *)(a1 + 8);
  llvm::MemoryLocation::getForArgument(a3, 1u, 0, (uint64_t)v87);
  LOBYTE(v37) = llvm::AAResults::getModRefInfo(v37, a2, (uint64_t)v87);
  sub_1C4773D54((uint64_t)v87, a2, 0, 0, 0);
  if ((v37 & 2) != 0)
  {
    v49 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
    v50 = *(llvm::Value **)v49;
    ParamAlignment = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a2 + 64), 0);
    v52 = *(llvm::Value **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32);
    v53 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a3 + 64), 1);
    v54 = *(uint64_t **)(v49 + 64);
    v55 = *(_QWORD *)(v49 + 96);
    v56 = (llvm::APInt *)(v55 + 24);
    v57 = *(_DWORD *)(v55 + 32);
    if (v57 > 0x40)
      v58 = llvm::APInt::countLeadingZerosSlowCase(v56) == v57;
    else
      v58 = *(_QWORD *)v56 == 0;
    v60 = v58;
    MemMove = llvm::IRBuilderBase::CreateMemMove((uint64_t)v87, v50, ParamAlignment, v52, v53, v54, v60 ^ 1u, 0, 0, 0);
  }
  else
  {
    v38 = *(_DWORD *)(*(_QWORD *)(a2 - 32) + 36);
    v39 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
    v40 = *(llvm::Value **)v39;
    v41 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a2 + 64), 0);
    v42 = *(llvm::Value **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32);
    v43 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a3 + 64), 1);
    v44 = *(uint64_t **)(v39 + 64);
    v45 = *(_QWORD *)(v39 + 96);
    v46 = (llvm::APInt *)(v45 + 24);
    v47 = *(_DWORD *)(v45 + 32);
    if (v38 == 196)
    {
      if (v47 > 0x40)
        v48 = llvm::APInt::countLeadingZerosSlowCase(v46) == v47;
      else
        v48 = *(_QWORD *)v46 == 0;
      v62 = v48;
      MemMove = llvm::IRBuilderBase::CreateMemCpyInline((uint64_t)v87, v40, v41, v42, v43, v44, v62 ^ 1u, 0, 0, 0, 0);
    }
    else
    {
      if (v47 > 0x40)
        v59 = llvm::APInt::countLeadingZerosSlowCase(v46) == v47;
      else
        v59 = *(_QWORD *)v46 == 0;
      v63 = v59;
      MemMove = llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)v87, 194, v40, v41, v42, v43, v44, v63 ^ 1u, 0, 0, 0, 0);
    }
  }
  v64 = MemMove;
  v65 = *(uint64_t ***)(a1 + 40);
  v66 = *((_DWORD *)*v65 + 10);
  if (!v66)
  {
LABEL_68:
    v73 = 0;
    goto LABEL_69;
  }
  v67 = (*v65)[3];
  v68 = v66 - 1;
  v69 = (v66 - 1) & (v24 ^ (a2 >> 9));
  v70 = *(_QWORD *)(v67 + 16 * v69);
  if (v70 != a2)
  {
    v71 = 1;
    while (v70 != -4096)
    {
      v72 = v69 + v71++;
      v69 = v72 & v68;
      v70 = *(_QWORD *)(v67 + 16 * v69);
      if (v70 == a2)
        goto LABEL_67;
    }
    goto LABEL_68;
  }
LABEL_67:
  v73 = *(llvm::MemoryAccess **)(v67 + 16 * v69 + 8);
LABEL_69:
  MemoryAccessAfter = llvm::MemorySSAUpdater::createMemoryAccessAfter(v65, v64, v73, (llvm::BasicBlock **)v73);
  llvm::MemorySSAUpdater::insertDef(*(llvm::MemorySSAUpdater **)(a1 + 40), (llvm::MemoryDef *)MemoryAccessAfter, 1);
  v75 = *(int32x2_t ***)(a1 + 40);
  v76 = (*v75)[5].i32[0];
  if (v76)
  {
    v77 = (*v75)[3];
    v78 = v76 - 1;
    v79 = (v76 - 1) & (v24 ^ (a2 >> 9));
    v80 = *(_QWORD *)(*(_QWORD *)&v77 + 16 * v79);
    if (v80 == a2)
    {
LABEL_74:
      v83 = *(llvm::MemoryAccess **)(*(_QWORD *)&v77 + 16 * v79 + 8);
      if (v83)
        llvm::MemorySSAUpdater::removeMemoryAccess(v75, v83, 0);
    }
    else
    {
      v81 = 1;
      while (v80 != -4096)
      {
        v82 = v79 + v81++;
        v79 = v82 & v78;
        v80 = *(_QWORD *)(*(_QWORD *)&v77 + 16 * v79);
        if (v80 == a2)
          goto LABEL_74;
      }
    }
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(a2 + 40) + 40, (uint64_t ***)a2);
  v84 = *(_QWORD *)(a2 + 24);
  v85 = *(_QWORD **)(a2 + 32);
  *v85 = v84;
  *(_QWORD *)(v84 + 8) = v85;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)a2);
  if (v87[0] != v88)
    free(v87[0]);
  return 1;
}

uint64_t sub_1C5BC7164(llvm::MemorySSA *a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD *WalkerImpl;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23[3];
  char v24;

  if (*(_BYTE *)(a5 + 16) == 25)
  {
    if (*(_QWORD *)(a4 + 64) == *(_QWORD *)(a5 + 64))
    {
      v14 = *(_QWORD *)(a4 + 40);
      v15 = a5 + 32;
      v20 = *a3;
      v21 = a3[1];
      v22 = a3[2];
      if (v14 == a5 + 32)
      {
        return 0;
      }
      else
      {
        v8 = 1;
        while (1)
        {
          v17 = v14 - 32;
          if (!v14)
            v17 = 0;
          if (*(_BYTE *)(v17 + 16) != 25)
          {
            v18 = *(_QWORD *)(v17 + 72);
            v23[0] = v20;
            v23[1] = v21;
            v23[2] = v22;
            v24 = 1;
            if ((sub_1C4D90C64(a2, v18, v23) & 2) != 0)
              break;
          }
          v14 = *(_QWORD *)(v14 + 8);
          if (v14 == v15)
            return 0;
        }
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    WalkerImpl = llvm::MemorySSA::getWalkerImpl(a1);
    if (*(_BYTE *)(a5 + 16) == 25)
      v11 = a5;
    else
      v11 = 0;
    if (v11)
      v12 = (_QWORD *)(v11 - 32);
    else
      v12 = (_QWORD *)(a5 - 64);
    v13 = (*(uint64_t (**)(_QWORD *, _QWORD, __int128 *))(*WalkerImpl + 24))(WalkerImpl, *v12, a3);
    return llvm::MemorySSA::dominates((uint64_t)a1, v13, a4) ^ 1;
  }
  return v8;
}

uint64_t llvm::MemCpyOptPass::processMemSetMemCpyDependence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  llvm::Value *v7;
  llvm::Value *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  llvm *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  int v34;
  int32x2_t **v35;
  __int32 v36;
  int32x2_t v37;
  __int32 v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  llvm::MemoryAccess *v43;
  uint64_t v44;
  _QWORD *v45;
  __int16 ParamAlignment;
  unsigned int v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  llvm::Type *v57;
  uint64_t *NullValue;
  unsigned int v59;
  llvm::PointerType *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t ***v63;
  unint64_t v64;
  __int16 v65;
  llvm::Value *MemSet;
  uint64_t **v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  char *MemoryAccessBefore;
  int32x2_t **v79;
  __int32 v80;
  int32x2_t v81;
  __int32 v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  llvm::MemoryAccess *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t *Select;
  unint64_t v92;
  char v93[32];
  __int16 v94;
  _OWORD v95[3];
  _QWORD v96[2];
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  char v102;
  _QWORD *v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 8);
  v7 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)));
  v8 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
  *(_QWORD *)&v99 = v7;
  *((_QWORD *)&v99 + 1) = 1;
  v100 = 0u;
  v101 = 0u;
  v96[0] = v8;
  v96[1] = 1;
  v97 = 0u;
  v98 = 0u;
  if (llvm::AAResults::alias(v6, (uint64_t)&v99, (uint64_t)v96) == 3)
  {
    v9 = *(_QWORD *)(a1 + 8);
    llvm::MemoryLocation::getForArgument(a2, 1u, 0, (uint64_t)&v99);
    if ((llvm::AAResults::getModRefInfo(v9, a2, (uint64_t)&v99) & 2) == 0)
    {
      v10 = *(_QWORD *)(a1 + 8);
      llvm::MemoryLocation::getForArgument(a3, 0, 0, (uint64_t)v95);
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(_QWORD *)(v11 + 24);
      v13 = (a3 >> 4) ^ (a3 >> 9);
      v14 = *(_DWORD *)(v11 + 40) - 1;
      v15 = v14 & v13;
      v16 = *(_QWORD *)(v12 + 16 * v15);
      if (v16 == a3)
      {
LABEL_7:
        v19 = *(_QWORD *)(v12 + 16 * v15 + 8);
      }
      else
      {
        v17 = 1;
        while (v16 != -4096)
        {
          v18 = v15 + v17++;
          v15 = v18 & v14;
          v16 = *(_QWORD *)(v12 + 16 * v15);
          if (v16 == a3)
            goto LABEL_7;
        }
        v19 = 0;
      }
      v20 = (a2 >> 4) ^ (a2 >> 9);
      v21 = v14 & v20;
      v22 = *(_QWORD *)(v12 + 16 * v21);
      if (v22 == a2)
      {
LABEL_13:
        v25 = *(_QWORD *)(v12 + 16 * v21 + 8);
      }
      else
      {
        v23 = 1;
        while (v22 != -4096)
        {
          v24 = v21 + v23++;
          v21 = v24 & v14;
          v22 = *(_QWORD *)(v12 + 16 * v21);
          if (v22 == a2)
            goto LABEL_13;
        }
        v25 = 0;
      }
      v26 = v25 + 32;
      v27 = *(_QWORD *)(v19 + 40);
      if (v27 != v25 + 32)
      {
        do
        {
          v28 = v27 - 32;
          if (!v27)
            v28 = 0;
          v29 = *(_QWORD *)(v28 + 72);
          v99 = v95[0];
          v100 = v95[1];
          v101 = v95[2];
          v102 = 1;
          if ((sub_1C4D90C64(v10, v29, &v99) & 3) != 0)
            return 0;
          v27 = *(_QWORD *)(v27 + 8);
        }
        while (v27 != v26);
      }
      v30 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
      v31 = *(llvm **)v30;
      v32 = *(unsigned __int8 **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 64);
      v33 = *(unsigned __int8 **)(v30 + 64);
      v34 = sub_1C5BC6B1C(*(llvm **)v30, a3, a2);
      if ((v34 & 1) != 0)
        return v34 ^ 1u;
      if (v32 == v33)
      {
        v35 = *(int32x2_t ***)(a1 + 40);
        v36 = (*v35)[5].i32[0];
        if (v36)
        {
          v37 = (*v35)[3];
          v38 = v36 - 1;
          v39 = (v36 - 1) & v13;
          v40 = *(_QWORD *)(*(_QWORD *)&v37 + 16 * v39);
          if (v40 == a3)
          {
LABEL_27:
            v43 = *(llvm::MemoryAccess **)(*(_QWORD *)&v37 + 16 * v39 + 8);
            if (v43)
              llvm::MemorySSAUpdater::removeMemoryAccess(v35, v43, 0);
          }
          else
          {
            v41 = 1;
            while (v40 != -4096)
            {
              v42 = v39 + v41++;
              v39 = v42 & v38;
              v40 = *(_QWORD *)(*(_QWORD *)&v37 + 16 * v39);
              if (v40 == a3)
                goto LABEL_27;
            }
          }
        }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(a3 + 40) + 40, (uint64_t ***)a3);
        v44 = *(_QWORD *)(a3 + 24);
        v45 = *(_QWORD **)(a3 + 32);
        *v45 = v44;
        *(_QWORD *)(v44 + 8) = v45;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)a3);
        return v34 ^ 1u;
      }
      ParamAlignment = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a3 + 64), 0);
      if ((ParamAlignment & 0xFF00) != 0)
        v48 = 1 << ParamAlignment;
      else
        v48 = 0;
      v49 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a2 + 64), 0);
      v92 = 1;
      v50 = 1 << v49;
      if ((v49 & 0xFF00) == 0)
        LODWORD(v50) = 0;
      if (v48 > v50)
        LODWORD(v50) = v48;
      if (v50 >= 2)
      {
        if (v33[16] != 16 || v33 == 0)
        {
          v52 = 1;
        }
        else
        {
          v53 = v33 + 24;
          if (*((_DWORD *)v33 + 8) >= 0x41u)
            v53 = (_QWORD *)*v53;
          v52 = -(*(_DWORD *)v53 | v50) & (*(_DWORD *)v53 | v50);
        }
        v92 = v52;
      }
      sub_1C4773D54((uint64_t)&v99, a2, 0, 0, 0);
      v54 = *(_QWORD *)v32;
      v55 = *(_QWORD *)v33;
      if (*(_QWORD *)v32 != *(_QWORD *)v33)
      {
        if (*(_DWORD *)(v54 + 8) >> 8 <= *(_DWORD *)(v55 + 8) >> 8)
        {
          LOWORD(v98) = 257;
          v32 = sub_1C4773E38((uint64_t *)&v99, 39, v32, v55, (uint64_t)v96);
        }
        else
        {
          LOWORD(v98) = 257;
          v33 = sub_1C4773E38((uint64_t *)&v99, 39, v33, v54, (uint64_t)v96);
        }
      }
      LOWORD(v98) = 257;
      v90 = sub_1C4774B48((uint64_t)&v99, 37, (uint64_t)v32, (uint64_t)v33, (uint64_t)v96);
      LOWORD(v98) = 257;
      v56 = sub_1C47733F8((uint64_t)&v99, (uint64_t)v32, (uint64_t)v33, (uint64_t)v96, 0, 0);
      NullValue = (uint64_t *)llvm::Constant::getNullValue(*(llvm::Constant **)v32, v57);
      LOWORD(v98) = 257;
      Select = (uint64_t *)llvm::IRBuilderBase::CreateSelect((uint64_t *)&v99, v90, NullValue, v56, (uint64_t)v96, 0);
      v59 = *(_DWORD *)(*(_QWORD *)v31 + 8);
      if ((v59 & 0xFE) == 0x12)
        v59 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v31 + 16) + 8);
      v60 = (llvm::PointerType *)(*v103 + 1912);
      v61 = llvm::PointerType::get(v60, (llvm::Type *)(v59 >> 8));
      LOWORD(v98) = 257;
      v62 = (uint64_t *)sub_1C5098D9C((uint64_t *)&v99, (unsigned __int8 *)v31, v61, (uint64_t)v96);
      v94 = 257;
      v63 = sub_1C4867B70((uint64_t *)&v99, v60, v62, (uint64_t)v33, (uint64_t)v93);
      v64 = __clz(v92) ^ 0x13F;
      if (v92)
        v65 = v64;
      else
        v65 = 0;
      MemSet = llvm::IRBuilderBase::CreateMemSet((uint64_t)&v99, (llvm::Value *)v63, *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32), Select, v65, 0, 0, 0, 0);
      v67 = *(uint64_t ***)(a1 + 40);
      v68 = *((_DWORD *)*v67 + 10);
      if (v68)
      {
        v69 = (*v67)[3];
        v70 = v68 - 1;
        v71 = (v68 - 1) & v20;
        v72 = *(_QWORD *)(v69 + 16 * v71);
        if (v72 == a2)
        {
LABEL_65:
          v75 = *(_QWORD *)(v69 + 16 * v71 + 8);
LABEL_67:
          if (*(_BYTE *)(v75 + 16) == 25)
            v76 = v75;
          else
            v76 = 0;
          if (v76)
            v77 = (uint64_t *)(v76 - 32);
          else
            v77 = (uint64_t *)(v75 - 64);
          MemoryAccessBefore = llvm::MemorySSAUpdater::createMemoryAccessBefore(v67, (uint64_t)MemSet, *v77, v75);
          llvm::MemorySSAUpdater::insertDef(*(llvm::MemorySSAUpdater **)(a1 + 40), (llvm::MemoryDef *)MemoryAccessBefore, 1);
          v79 = *(int32x2_t ***)(a1 + 40);
          v80 = (*v79)[5].i32[0];
          if (v80)
          {
            v81 = (*v79)[3];
            v82 = v80 - 1;
            v83 = (v80 - 1) & v13;
            v84 = *(_QWORD *)(*(_QWORD *)&v81 + 16 * v83);
            if (v84 == a3)
            {
LABEL_78:
              v87 = *(llvm::MemoryAccess **)(*(_QWORD *)&v81 + 16 * v83 + 8);
              if (v87)
                llvm::MemorySSAUpdater::removeMemoryAccess(v79, v87, 0);
            }
            else
            {
              v85 = 1;
              while (v84 != -4096)
              {
                v86 = v83 + v85++;
                v83 = v86 & v82;
                v84 = *(_QWORD *)(*(_QWORD *)&v81 + 16 * v83);
                if (v84 == a3)
                  goto LABEL_78;
              }
            }
          }
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(a3 + 40) + 40, (uint64_t ***)a3);
          v88 = *(_QWORD *)(a3 + 24);
          v89 = *(_QWORD **)(a3 + 32);
          *v89 = v88;
          *(_QWORD *)(v88 + 8) = v89;
          *(_QWORD *)(a3 + 24) = 0;
          *(_QWORD *)(a3 + 32) = 0;
          llvm::Value::deleteValue((llvm::Value *)a3);
          if ((__int128 *)v99 != &v100)
            free((void *)v99);
          return v34 ^ 1u;
        }
        v73 = 1;
        while (v72 != -4096)
        {
          v74 = v71 + v73++;
          v71 = v74 & v70;
          v72 = *(_QWORD *)(v69 + 16 * v71);
          if (v72 == a2)
            goto LABEL_65;
        }
      }
      v75 = 0;
      goto LABEL_67;
    }
  }
  return 0;
}

uint64_t llvm::MemCpyOptPass::performMemCpyToMemSetOptzn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  _QWORD *WalkerImpl;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  llvm *v32;
  llvm::Value *v34;
  uint64_t v35;
  __int16 ParamAlignment;
  unint64_t v37;
  unint64_t v38;
  __int16 v39;
  llvm::Instruction *MemSet;
  uint64_t **v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  llvm::MemoryAccess *v49;
  char *MemoryAccessAfter;
  _QWORD v51[2];
  __int128 v52;
  __int128 v53;
  void *v54[2];
  _OWORD v55[2];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
  v54[0] = *(void **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
  v54[1] = (void *)1;
  memset(v55, 0, sizeof(v55));
  v51[0] = v7;
  v51[1] = 1;
  v52 = 0u;
  v53 = 0u;
  if (llvm::AAResults::alias(v6, (uint64_t)v54, (uint64_t)v51) != 3)
    return 0;
  v8 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 64);
  v9 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64);
  if (v8 != v9)
  {
    if (v8)
      v10 = *(_BYTE *)(v8 + 16) == 16;
    else
      v10 = 0;
    if (!v10)
      return 0;
    if (!v9 || *(_BYTE *)(v9 + 16) != 16)
      return 0;
    v12 = (_QWORD *)(v9 + 24);
    if (*(_DWORD *)(v9 + 32) >= 0x41u)
      v12 = (_QWORD *)*v12;
    v13 = (_QWORD *)*v12;
    v14 = (_QWORD *)(v8 + 24);
    if (*(_DWORD *)(v8 + 32) >= 0x41u)
      v14 = (_QWORD *)*v14;
    if ((unint64_t)v13 <= *v14)
    {
      v8 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64);
      goto LABEL_39;
    }
    llvm::MemoryLocation::getForArgument(a2, 1u, 0, (uint64_t)v54);
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_DWORD *)(v15 + 40);
    if (v16)
    {
      v17 = *(_QWORD *)(v15 + 24);
      v18 = v16 - 1;
      v19 = (v16 - 1) & ((a3 >> 4) ^ (a3 >> 9));
      v20 = *(_QWORD *)(v17 + 16 * v19);
      if (v20 == a3)
      {
LABEL_23:
        v23 = *(_QWORD *)(v17 + 16 * v19 + 8);
        goto LABEL_25;
      }
      v21 = 1;
      while (v20 != -4096)
      {
        v22 = v19 + v21++;
        v19 = v22 & v18;
        v20 = *(_QWORD *)(v17 + 16 * v19);
        if (v20 == a3)
          goto LABEL_23;
      }
    }
    v23 = 0;
LABEL_25:
    WalkerImpl = llvm::MemorySSA::getWalkerImpl((llvm::MemorySSA *)v15);
    if (*(_BYTE *)(v23 + 16) == 25)
      v25 = v23;
    else
      v25 = 0;
    if (v25)
      v26 = (_QWORD *)(v25 - 32);
    else
      v26 = (_QWORD *)(v23 - 64);
    v27 = (*(uint64_t (**)(_QWORD *, _QWORD, void **))(*WalkerImpl + 24))(WalkerImpl, *v26, v54);
    if (v27)
      v28 = *(_BYTE *)(v27 + 16) == 26;
    else
      v28 = 0;
    if (!v28)
      return 0;
    v29 = v27;
    v30 = *(_QWORD *)(a1 + 32);
    v31 = *(_QWORD *)(a1 + 8);
    v32 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32));
    if (!sub_1C5BC7CBC(*(_QWORD *)(v30 + 96), v31, v32, v29, v9))
      return 0;
  }
LABEL_39:
  sub_1C4773D54((uint64_t)v54, a2, 0, 0, 0);
  v34 = *(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v35 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32);
  ParamAlignment = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a2 + 64), 0);
  v37 = (1 << ParamAlignment);
  if ((ParamAlignment & 0xFF00) == 0)
    v37 = 0;
  v38 = __clz(__rbit64(v37)) | 0x100;
  if (v37)
    v39 = v38;
  else
    v39 = 0;
  MemSet = llvm::IRBuilderBase::CreateMemSet((uint64_t)v54, v34, v35, (uint64_t *)v8, v39, 0, 0, 0, 0);
  v41 = *(uint64_t ***)(a1 + 40);
  v42 = *((_DWORD *)*v41 + 10);
  if (!v42)
  {
LABEL_50:
    v49 = 0;
    goto LABEL_51;
  }
  v43 = (*v41)[3];
  v44 = v42 - 1;
  v45 = (v42 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v46 = *(_QWORD *)(v43 + 16 * v45);
  if (v46 != a2)
  {
    v47 = 1;
    while (v46 != -4096)
    {
      v48 = v45 + v47++;
      v45 = v48 & v44;
      v46 = *(_QWORD *)(v43 + 16 * v45);
      if (v46 == a2)
        goto LABEL_49;
    }
    goto LABEL_50;
  }
LABEL_49:
  v49 = *(llvm::MemoryAccess **)(v43 + 16 * v45 + 8);
LABEL_51:
  MemoryAccessAfter = llvm::MemorySSAUpdater::createMemoryAccessAfter(v41, MemSet, v49, (llvm::BasicBlock **)v49);
  llvm::MemorySSAUpdater::insertDef(*(llvm::MemorySSAUpdater **)(a1 + 40), (llvm::MemoryDef *)MemoryAccessAfter, 1);
  if (v54[0] != v55)
    free(v54[0]);
  return 1;
}

BOOL sub_1C5BC7CBC(uint64_t a1, uint64_t a2, llvm *this, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  llvm *UnderlyingObject;
  _BOOL8 result;
  const char *v17;
  llvm *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int64_t v22;
  int v23;
  unint64_t v25;
  int v26;
  llvm *v27;
  _QWORD v28[2];
  __int128 v29;
  __int128 v30;
  llvm *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;

  if (a1 == a4)
    return *((_BYTE *)llvm::getUnderlyingObject(this, (const llvm::Value *)6) + 16) == 59;
  v6 = *(_QWORD *)(a4 + 72);
  if (!v6)
    return 0;
  if (*(_BYTE *)(v6 + 16) != 84)
    return 0;
  v7 = *(_QWORD *)(v6 - 32);
  if (!v7
    || *(_BYTE *)(v7 + 16)
    || *(_QWORD *)(v7 + 24) != *(_QWORD *)(v6 + 72)
    || (*(_BYTE *)(v7 + 33) & 0x20) == 0
    || *(_DWORD *)(v7 + 36) != 168)
  {
    return 0;
  }
  v9 = (uint64_t *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF));
  v10 = *v9;
  if (a5)
  {
    if (*(_BYTE *)(a5 + 16) == 16)
    {
      v11 = v9[4];
      v31 = this;
      v32 = 1;
      v33 = 0u;
      v34 = 0u;
      v28[0] = v11;
      v28[1] = 1;
      v29 = 0u;
      v30 = 0u;
      if (llvm::AAResults::alias(a2, (uint64_t)&v31, (uint64_t)v28) == 3)
      {
        v12 = (_QWORD *)(v10 + 24);
        if (*(_DWORD *)(v10 + 32) >= 0x41u)
          v12 = (_QWORD *)*v12;
        v13 = (_QWORD *)*v12;
        v14 = (_QWORD *)(a5 + 24);
        if (*(_DWORD *)(a5 + 32) >= 0x41u)
          v14 = (_QWORD *)*v14;
        if ((unint64_t)v13 >= *v14)
          return 1;
      }
    }
  }
  UnderlyingObject = llvm::getUnderlyingObject(this, (const llvm::Value *)6);
  result = 0;
  if (UnderlyingObject && *((_BYTE *)UnderlyingObject + 16) == 59)
  {
    if (llvm::getUnderlyingObject(*(llvm **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32), (const llvm::Value *)6) == UnderlyingObject)
    {
      llvm::AllocaInst::getAllocationSizeInBits(UnderlyingObject, (const llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)UnderlyingObject + 5) + 56) + 40) + 272), (uint64_t)&v31);
      if ((_BYTE)v33)
      {
        if ((_DWORD)v32 == 1)
        v18 = v31;
        v19 = *(unsigned int *)(v10 + 32);
        if (v19 > 0x40)
        {
          v21 = (_QWORD *)operator new[]();
          memcpy(v21, *(const void **)(v10 + 24), ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8);
          v22 = (unint64_t)(v19 + 63) >> 6;
          llvm::APInt::tcMultiplyPart((llvm::APInt *)v21, v21, (const unint64_t *)8, 0, v22, v22, 0);
          v23 = 0;
          v21[(v22 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
          do
          {
            if (v22-- < 1)
              break;
            v25 = v21[v22];
            v23 += __clz(v25);
          }
          while (!v25);
          v26 = v19 | 0xFFFFFFC0;
          if ((v19 & 0x3F) == 0)
            v26 = 0;
          if ((v19 - v23 - v26) >= 0x41)
          {
            MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
          }
          else
          {
            v27 = (llvm *)*v21;
            MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
            if (v27 == v18)
              return 1;
          }
        }
        else
        {
          v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
          if (!(_DWORD)v19)
            v20 = 0;
          if ((llvm *)(v20 & (8 * *(_QWORD *)(v10 + 24))) == v31)
            return 1;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t llvm::MemCpyOptPass::processMemCpy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  llvm::APInt *v8;
  unsigned int v9;
  llvm::Value *v10;
  llvm::Value *v11;
  BOOL v12;
  llvm::Value *v13;
  llvm::GlobalValue *Section;
  const llvm::DataLayout *v15;
  uint64_t v16;
  llvm::Module *v17;
  llvm::Value **v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *WalkerImpl;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  double v37;
  uint64_t v38;
  BOOL v39;
  uint64_t result;
  int32x2_t **v41;
  __int32 v42;
  int32x2_t v43;
  __int32 v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  unsigned int v54;
  unsigned __int8 v55;
  unsigned int v56;
  unint64_t v57;
  llvm::Value *v58;
  llvm::Value *v59;
  _QWORD *v60;
  _QWORD *v61;
  int v62;
  void (**v63)(void);
  __int32 v64;
  __int32 v65;
  uint64_t v66;
  int v67;
  int v68;
  __int32 v69;
  __int32 v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  llvm *v76;
  __int32 v77;
  __int32 v78;
  uint64_t v79;
  int v80;
  int v81;
  llvm::MemoryAccess *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  llvm::Value *v87;
  uint64_t *v88;
  __int16 ParamAlignment;
  unint64_t v90;
  unint64_t v91;
  __int16 v92;
  llvm::Instruction *MemSet;
  uint64_t **v94;
  int v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  llvm::MemoryAccess *v103;
  char *MemoryAccessAfter;
  int32x2_t **v105;
  __int32 v106;
  int32x2_t v107;
  __int32 v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  llvm::MemoryAccess *v113;
  uint64_t v114;
  _QWORD *v115;
  BOOL v116;
  _BYTE v117[48];
  _QWORD v118[3];
  _QWORD *v119;
  void *v120[2];
  _QWORD v121[17];

  v121[15] = *MEMORY[0x1E0C80C00];
  v6 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  v7 = *(_QWORD *)(v6 + 96);
  v8 = (llvm::APInt *)(v7 + 24);
  v9 = *(_DWORD *)(v7 + 32);
  if (v9 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(v8) == v9)
      goto LABEL_5;
    return 0;
  }
  if (*(_QWORD *)v8)
    return 0;
LABEL_5:
  v10 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v6 + 32));
  if (v10 == llvm::Value::stripPointerCasts(*(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF))))
  {
    *(_QWORD *)a3 = *(_QWORD *)(*(_QWORD *)a3 + 8);
    v41 = *(int32x2_t ***)(a1 + 40);
    v42 = (*v41)[5].i32[0];
    if (!v42)
      goto LABEL_98;
    v43 = (*v41)[3];
    v44 = v42 - 1;
    v45 = (v42 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v46 = *(_QWORD *)(*(_QWORD *)&v43 + 16 * v45);
    if (v46 != a2)
    {
      v47 = 1;
      while (v46 != -4096)
      {
        v48 = v45 + v47++;
        v45 = v48 & v44;
        v46 = *(_QWORD *)(*(_QWORD *)&v43 + 16 * v45);
        if (v46 == a2)
          goto LABEL_96;
      }
      goto LABEL_98;
    }
LABEL_96:
    v82 = *(llvm::MemoryAccess **)(*(_QWORD *)&v43 + 16 * v45 + 8);
    if (v82)
      llvm::MemorySSAUpdater::removeMemoryAccess(v41, v82, 0);
    goto LABEL_98;
  }
  v11 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32));
  if (v11)
    v12 = *((_BYTE *)v11 + 16) == 3;
  else
    v12 = 0;
  if (v12)
  {
    v13 = v11;
    if ((*((_BYTE *)v11 + 80) & 1) != 0 && (*((_DWORD *)v11 + 5) & 0x7FFFFFF) != 0)
    {
      Section = llvm::GlobalValue::getSection(v11);
      if (v16 != 12
        || (*(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
          ? (v116 = *((unsigned int *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
          : (v116 = 0),
            !v116))
      {
        if ((*((_DWORD *)v13 + 8) & 0xFu) - 5 < 4 || ((1 << (*((_DWORD *)v13 + 8) & 0xF)) & 0x614) == 0)
        {
          v17 = (llvm::Module *)*((_QWORD *)v13 + 5);
          if ((!v17 || !llvm::Module::getSemanticInterposition(v17) || (*((_BYTE *)v13 + 33) & 0x40) != 0)
            && (*((_BYTE *)v13 + 80) & 2) == 0)
          {
            v18 = llvm::isBytewiseValue(*((llvm **)v13 - 4), (llvm::Value *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40) + 272), v15);
            if (v18)
            {
              v85 = (uint64_t)v18;
              sub_1C4773D54((uint64_t)v120, a2, 0, 0, 0);
              v86 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
              v87 = *(llvm::Value **)v86;
              v88 = *(uint64_t **)(v86 + 64);
              ParamAlignment = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a2 + 64), 0);
              v90 = (1 << ParamAlignment);
              if ((ParamAlignment & 0xFF00) == 0)
                v90 = 0;
              v91 = __clz(__rbit64(v90)) | 0x100;
              if (v90)
                v92 = v91;
              else
                v92 = 0;
              MemSet = llvm::IRBuilderBase::CreateMemSet((uint64_t)v120, v87, v85, v88, v92, 0, 0, 0, 0);
              v94 = *(uint64_t ***)(a1 + 40);
              v95 = *((_DWORD *)*v94 + 10);
              v96 = a2 >> 4;
              if (v95)
              {
                v97 = (*v94)[3];
                v98 = v95 - 1;
                v99 = (v95 - 1) & (v96 ^ (a2 >> 9));
                v100 = *(_QWORD *)(v97 + 16 * v99);
                if (v100 == a2)
                {
LABEL_113:
                  v103 = *(llvm::MemoryAccess **)(v97 + 16 * v99 + 8);
LABEL_115:
                  MemoryAccessAfter = llvm::MemorySSAUpdater::createMemoryAccessAfter(v94, MemSet, v103, (llvm::BasicBlock **)v103);
                  llvm::MemorySSAUpdater::insertDef(*(llvm::MemorySSAUpdater **)(a1 + 40), (llvm::MemoryDef *)MemoryAccessAfter, 1);
                  v105 = *(int32x2_t ***)(a1 + 40);
                  v106 = (*v105)[5].i32[0];
                  if (v106)
                  {
                    v107 = (*v105)[3];
                    v108 = v106 - 1;
                    v109 = (v106 - 1) & (v96 ^ (a2 >> 9));
                    v110 = *(_QWORD *)(*(_QWORD *)&v107 + 16 * v109);
                    if (v110 == a2)
                    {
LABEL_120:
                      v113 = *(llvm::MemoryAccess **)(*(_QWORD *)&v107 + 16 * v109 + 8);
                      if (v113)
                        llvm::MemorySSAUpdater::removeMemoryAccess(v105, v113, 0);
                    }
                    else
                    {
                      v111 = 1;
                      while (v110 != -4096)
                      {
                        v112 = v109 + v111++;
                        v109 = v112 & v108;
                        v110 = *(_QWORD *)(*(_QWORD *)&v107 + 16 * v109);
                        if (v110 == a2)
                          goto LABEL_120;
                      }
                    }
                  }
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(a2 + 40) + 40, (uint64_t ***)a2);
                  v114 = *(_QWORD *)(a2 + 24);
                  v115 = *(_QWORD **)(a2 + 32);
                  *v115 = v114;
                  *(_QWORD *)(v114 + 8) = v115;
                  *(_QWORD *)(a2 + 24) = 0;
                  *(_QWORD *)(a2 + 32) = 0;
                  llvm::Value::deleteValue((llvm::Value *)a2);
                  if (v120[0] != v121)
                    free(v120[0]);
                  return 1;
                }
                v101 = 1;
                while (v100 != -4096)
                {
                  v102 = v99 + v101++;
                  v99 = v102 & v98;
                  v100 = *(_QWORD *)(v97 + 16 * v99);
                  if (v100 == a2)
                    goto LABEL_113;
                }
              }
              v103 = 0;
              goto LABEL_115;
            }
          }
        }
      }
    }
  }
  v19 = *(_QWORD *)(a1 + 32);
  v20 = *(_DWORD *)(v19 + 40);
  if (v20)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = v20 - 1;
    v23 = (v20 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v24 = *(_QWORD *)(v21 + 16 * v23);
    if (v24 == a2)
    {
LABEL_24:
      v27 = *(_QWORD *)(v21 + 16 * v23 + 8);
      goto LABEL_26;
    }
    v25 = 1;
    while (v24 != -4096)
    {
      v26 = v23 + v25++;
      v23 = v26 & v22;
      v24 = *(_QWORD *)(v21 + 16 * v23);
      if (v24 == a2)
        goto LABEL_24;
    }
  }
  v27 = 0;
LABEL_26:
  if (*(_BYTE *)(v27 + 16) == 25)
    v28 = v27;
  else
    v28 = 0;
  v29 = (uint64_t *)(v27 - 64);
  if (v28)
    v29 = (uint64_t *)(v28 - 32);
  v30 = *v29;
  llvm::MemoryLocation::getForArgument(a2, 0, 0, (uint64_t)v120);
  WalkerImpl = llvm::MemorySSA::getWalkerImpl(*(llvm::MemorySSA **)(a1 + 32));
  v32 = (*(uint64_t (**)(_QWORD *, uint64_t, void **))(*WalkerImpl + 24))(WalkerImpl, v30, v120);
  if (v32)
    v33 = *(_BYTE *)(v32 + 16) == 26;
  else
    v33 = 0;
  if (v33)
  {
    v34 = v32;
    v35 = *(_QWORD *)(v32 + 72);
    if (v35)
    {
      if (sub_1C5392540(*(_QWORD *)(v32 + 72))
        && *(_QWORD *)(v34 + 64) == *(_QWORD *)(a2 + 40)
        && (llvm::MemCpyOptPass::processMemSetMemCpyDependence(a1, a2, v35) & 1) != 0)
      {
        return 1;
      }
    }
  }
  v36 = llvm::MemorySSA::getWalkerImpl(*(llvm::MemorySSA **)(a1 + 32));
  v37 = llvm::MemoryLocation::getForArgument(a2, 1u, 0, (uint64_t)v117);
  v38 = (*(uint64_t (**)(_QWORD *, uint64_t, _BYTE *, double))(*v36 + 24))(v36, v30, v117, v37);
  if (v38)
    v39 = *(_BYTE *)(v38 + 16) == 26;
  else
    v39 = 0;
  if (!v39)
    return 0;
  v49 = v38;
  v50 = *(_QWORD *)(v38 + 72);
  if (!v50)
    goto LABEL_90;
  v51 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  v52 = *(_QWORD *)(v51 + 64);
  if (v52)
    v53 = *(_BYTE *)(v52 + 16) == 16;
  else
    v53 = 0;
  if (!v53 || *(_BYTE *)(v50 + 16) != 84)
  {
LABEL_80:
    if (sub_1C53924A0(v50))
      return llvm::MemCpyOptPass::processMemCpyMemCpyDependence(a1, a2, v50);
    if (sub_1C5392540(v50) && llvm::MemCpyOptPass::performMemCpyToMemSetOptzn(a1, a2, v50))
    {
      v41 = *(int32x2_t ***)(a1 + 40);
      v69 = (*v41)[5].i32[0];
      if (!v69)
        goto LABEL_98;
      v43 = (*v41)[3];
      v70 = v69 - 1;
      v45 = (v69 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v71 = *(_QWORD *)(*(_QWORD *)&v43 + 16 * v45);
      if (v71 != a2)
      {
        v72 = 1;
        while (v71 != -4096)
        {
          v73 = v45 + v72++;
          v45 = v73 & v70;
          v71 = *(_QWORD *)(*(_QWORD *)&v43 + 16 * v45);
          if (v71 == a2)
            goto LABEL_96;
        }
        goto LABEL_98;
      }
      goto LABEL_96;
    }
LABEL_90:
    v74 = *(_QWORD *)(a1 + 32);
    v75 = *(_QWORD *)(a1 + 8);
    v76 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32));
    result = sub_1C5BC7CBC(*(_QWORD *)(v74 + 96), v75, v76, v49, *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64));
    if (!(_DWORD)result)
      return result;
    v41 = *(int32x2_t ***)(a1 + 40);
    v77 = (*v41)[5].i32[0];
    if (!v77)
      goto LABEL_98;
    v43 = (*v41)[3];
    v78 = v77 - 1;
    v45 = (v77 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v79 = *(_QWORD *)(*(_QWORD *)&v43 + 16 * v45);
    if (v79 != a2)
    {
      v80 = 1;
      while (v79 != -4096)
      {
        v81 = v45 + v80++;
        v45 = v81 & v78;
        v79 = *(_QWORD *)(*(_QWORD *)&v43 + 16 * v45);
        if (v79 == a2)
          goto LABEL_96;
      }
      goto LABEL_98;
    }
    goto LABEL_96;
  }
  v54 = (unsigned __int16)llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a2 + 64), 0);
  if (v54 <= 0x100)
    v55 = 0;
  else
    v55 = v54;
  v56 = (unsigned __int16)llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a2 + 64), 1);
  if (v56 <= 0x100)
    LOBYTE(v56) = 0;
  if (v56 >= v55)
    v57 = v55;
  else
    v57 = v56;
  v58 = llvm::Value::stripPointerCasts(*(llvm::Value **)v51);
  v59 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32));
  v60 = (_QWORD *)(v52 + 24);
  if (*(_DWORD *)(v52 + 32) >= 0x41u)
    v60 = (_QWORD *)*v60;
  v61 = (_QWORD *)*v60;
  v118[0] = &off_1E8196A60;
  v118[1] = v50;
  v119 = v118;
  v62 = llvm::MemCpyOptPass::performCallSlotOptzn((_QWORD *)a1, a2, a2, (uint64_t)v58, (uint64_t)v59, v61, 0, (_BYTE *)v57, (uint64_t)v118);
  if (v119 == v118)
  {
    v63 = (void (**)(void))(v118[0] + 32);
  }
  else
  {
    if (!v119)
      goto LABEL_73;
    v63 = (void (**)(void))(*v119 + 40);
  }
  (*v63)();
LABEL_73:
  if (!v62)
    goto LABEL_80;
  v41 = *(int32x2_t ***)(a1 + 40);
  v64 = (*v41)[5].i32[0];
  if (v64)
  {
    v43 = (*v41)[3];
    v65 = v64 - 1;
    v45 = (v64 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v66 = *(_QWORD *)(*(_QWORD *)&v43 + 16 * v45);
    if (v66 != a2)
    {
      v67 = 1;
      while (v66 != -4096)
      {
        v68 = v45 + v67++;
        v45 = v68 & v65;
        v66 = *(_QWORD *)(*(_QWORD *)&v43 + 16 * v45);
        if (v66 == a2)
          goto LABEL_96;
      }
      goto LABEL_98;
    }
    goto LABEL_96;
  }
LABEL_98:
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(a2 + 40) + 40, (uint64_t ***)a2);
  v83 = *(_QWORD *)(a2 + 24);
  v84 = *(_QWORD **)(a2 + 32);
  *v84 = v83;
  *(_QWORD *)(v83 + 8) = v84;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)a2);
  return 1;
}

BOOL llvm::MemCpyOptPass::processByValArgument(llvm::MemCpyOptPass *this, llvm::CallBase *a2, unsigned int a3)
{
  unsigned __int8 *v6;
  llvm::Value *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  BOOL v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  llvm::CallBase *v22;
  int v23;
  int v24;
  uint64_t v25;
  _QWORD *WalkerImpl;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v31;
  _BOOL8 result;
  uint64_t v33;
  llvm::APInt *v34;
  unsigned int v35;
  llvm::Value *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v40;
  unsigned __int16 ParamAlignment;
  __int16 v42;
  unsigned __int16 v43;
  llvm::Value *v44;
  uint64_t v45;
  llvm::Value *v46;
  unsigned int v47;
  int v48;
  llvm::MemorySSA *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  llvm::CallBase *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  llvm::Value *v66;
  char *v67;
  llvm::Value *v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  unsigned __int8 **v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char **v79;
  uint64_t v80;
  char *v81;
  unsigned int v82;
  unsigned __int8 *v83;
  const char *v84;
  __int16 v85;
  __int128 v86[3];
  _QWORD v87[2];
  __int128 v88;
  __int128 v89;

  v6 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40) + 272);
  v7 = (llvm::Value *)*((_QWORD *)a2 + 4 * a3 + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  v8 = sub_1C6199478((uint64_t)a2, a3);
  sub_1C4768AD0((uint64_t)v6, v8);
  v10 = (unint64_t)(v9 + 7) >> 3;
  v12 = v11 == 1;
  llvm::DataLayout::getAlignment((uint64_t)v6, v8);
  v14 = ((1 << v13) + v10 - 1) & -(1 << v13);
  v15 = -2;
  if (!v12 && v14 <= 0x7FFFFFFFFFFFFFFBLL)
    v15 = ((1 << v13) + v10 - 1) & -(1 << v13);
  v87[0] = v7;
  v87[1] = v15;
  v88 = 0u;
  v89 = 0u;
  v16 = *((_QWORD *)this + 4);
  v17 = *(_DWORD *)(v16 + 40);
  if (!v17)
    return 0;
  v18 = *(_QWORD *)(v16 + 24);
  v19 = (a2 >> 4) ^ (a2 >> 9);
  v20 = v17 - 1;
  v21 = (v17 - 1) & v19;
  v22 = *(llvm::CallBase **)(v18 + 16 * v21);
  if (v22 != a2)
  {
    v23 = 1;
    while (v22 != (llvm::CallBase *)-4096)
    {
      v24 = v21 + v23++;
      v21 = v24 & v20;
      v22 = *(llvm::CallBase **)(v18 + 16 * v21);
      if (v22 == a2)
        goto LABEL_8;
    }
    return 0;
  }
LABEL_8:
  v25 = *(_QWORD *)(v18 + 16 * v21 + 8);
  if (!v25)
    return 0;
  WalkerImpl = llvm::MemorySSA::getWalkerImpl((llvm::MemorySSA *)v16);
  v27 = *(_BYTE *)(v25 + 16) == 25 ? v25 : 0;
  v28 = (_QWORD *)(v27 ? v27 - 32 : v25 - 64);
  v29 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD *))(*WalkerImpl + 24))(WalkerImpl, *v28, v87);
  if (!v29 || *(_BYTE *)(v29 + 16) != 26)
    return 0;
  v31 = *(_QWORD *)(v29 + 72);
  if (!v31)
    return 0;
  result = sub_1C53924A0(*(_QWORD *)(v29 + 72));
  if (!result)
    return result;
  v33 = *(_QWORD *)(v31 - 32 * (*(_DWORD *)(v31 + 20) & 0x7FFFFFF) + 96);
  v34 = (llvm::APInt *)(v33 + 24);
  v35 = *(_DWORD *)(v33 + 32);
  if (v35 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(v34) != v35)
      return 0;
  }
  else if (*(_QWORD *)v34)
  {
    return 0;
  }
  v36 = llvm::Value::stripPointerCasts(v7);
  if (v36 != llvm::Value::stripPointerCasts(*(llvm::Value **)(v31 - 32 * (*(_DWORD *)(v31 + 20) & 0x7FFFFFF))))
    return 0;
  v37 = *(_DWORD *)(v31 + 20) & 0x7FFFFFF;
  v38 = *(_QWORD *)(v31 - 32 * v37 + 64);
  if (!v38 || *(_BYTE *)(v38 + 16) != 16)
    return 0;
  v40 = (unint64_t *)(v38 + 24);
  if (*(_DWORD *)(v38 + 32) >= 0x41u)
    v40 = (unint64_t *)*v40;
  result = 0;
  if (!v12 && *v40 >= v14)
  {
    ParamAlignment = llvm::AttributeList::getParamAlignment((llvm::CallBase *)((char *)a2 + 64), a3);
    if (ParamAlignment < 0x100u)
      return 0;
    v42 = ParamAlignment;
    v43 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v31 + 64), 1);
    if (v43 > 0xFFu)
    {
      v82 = v42;
      if (v42 <= v43)
      {
        v45 = -v37;
        goto LABEL_44;
      }
    }
    else
    {
      v82 = v42;
    }
    v44 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v31 - 32 * v37 + 32));
    if (v82 > llvm::getOrEnforceKnownAlignment((uint64_t)v44, v42, v6, (uint64_t)a2, *((_QWORD *)this + 2), *((_QWORD *)this + 3)))return 0;
    v45 = -(uint64_t)(*(_DWORD *)(v31 + 20) & 0x7FFFFFF);
LABEL_44:
    v46 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v31 + 32 * v45 + 32));
    v47 = *(_DWORD *)(*(_QWORD *)v46 + 8);
    if ((v47 & 0xFE) == 0x12)
      v47 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v46 + 16) + 8);
    v48 = *(_DWORD *)(*(_QWORD *)v7 + 8);
    if ((v48 & 0xFE) == 0x12)
      v48 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v7 + 16) + 8);
    if ((v48 ^ v47) > 0xFF)
      return 0;
    v49 = (llvm::MemorySSA *)*((_QWORD *)this + 4);
    v50 = *((_QWORD *)this + 1);
    llvm::MemoryLocation::getForArgument(v31, 1u, 0, (uint64_t)v86);
    v51 = *((_QWORD *)this + 4);
    v52 = *(_DWORD *)(v51 + 40);
    if (v52)
    {
      v53 = *(_QWORD *)(v51 + 24);
      v54 = v52 - 1;
      v55 = v54 & ((v31 >> 4) ^ (v31 >> 9));
      v56 = *(_QWORD *)(v53 + 16 * v55);
      if (v31 == v56)
      {
LABEL_54:
        v59 = *(_QWORD *)(v53 + 16 * v55 + 8);
      }
      else
      {
        v57 = 1;
        while (v56 != -4096)
        {
          v58 = v55 + v57++;
          v55 = v58 & v54;
          v56 = *(_QWORD *)(v53 + 16 * v55);
          if (v31 == v56)
            goto LABEL_54;
        }
        v59 = 0;
      }
      v60 = v54 & v19;
      v61 = *(llvm::CallBase **)(v53 + 16 * v60);
      if (v61 == a2)
      {
LABEL_60:
        v64 = *(_QWORD *)(v53 + 16 * v60 + 8);
        goto LABEL_63;
      }
      v62 = 1;
      while (v61 != (llvm::CallBase *)-4096)
      {
        v63 = v60 + v62++;
        v60 = v63 & v54;
        v61 = *(llvm::CallBase **)(v53 + 16 * v60);
        if (v61 == a2)
          goto LABEL_60;
      }
    }
    else
    {
      v59 = 0;
    }
    v64 = 0;
LABEL_63:
    if ((sub_1C5BC7164(v49, v50, v86, v59, v64) & 1) == 0)
    {
      v65 = a3;
      v66 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v31 - 32 * (*(_DWORD *)(v31 + 20) & 0x7FFFFFF) + 32));
      if (*(_QWORD *)llvm::Value::stripPointerCasts(*(llvm::Value **)(v31
                                                                     - 32 * (*(_DWORD *)(v31 + 20) & 0x7FFFFFF)
                                                                     + 32)) != *(_QWORD *)v7)
      {
        v67 = (char *)operator new(0x60uLL);
        v66 = (llvm::Value *)(v67 + 32);
        *((_DWORD *)v67 + 13) = *((_DWORD *)v67 + 13) & 0x38000000 | 1;
        *(_QWORD *)v67 = 0;
        *((_QWORD *)v67 + 1) = 0;
        *((_QWORD *)v67 + 2) = 0;
        *((_QWORD *)v67 + 3) = v67 + 32;
        v68 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v31 - 32 * (*(_DWORD *)(v31 + 20) & 0x7FFFFFF) + 32));
        v69 = *(_QWORD *)v7;
        v84 = "tmpcast";
        v85 = 259;
        llvm::BitCastInst::BitCastInst((uint64_t)(v67 + 32), (uint64_t)v68, v69, (uint64_t)&v84, (uint64_t)a2);
        v70 = *(unsigned __int8 **)(v31 + 48);
        v83 = v70;
        if (v70)
          llvm::MetadataTracking::track((uint64_t)&v83, v70, 2);
        v73 = (unsigned __int8 *)*((_QWORD *)v67 + 10);
        v72 = (unsigned __int8 **)(v67 + 80);
        v71 = v73;
        if (v73)
          llvm::MetadataTracking::untrack((uint64_t)v72, v71);
        v74 = v83;
        *v72 = v83;
        if (v74)
          llvm::MetadataTracking::retrack((uint64_t)&v83, v74, (uint64_t)v72);
      }
      v75 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
      v76 = &v75[32 * v65];
      if (*(_QWORD *)v76)
      {
        **((_QWORD **)v76 + 2) = *((_QWORD *)v76 + 1);
        v77 = *((_QWORD *)v76 + 1);
        if (v77)
          *(_QWORD *)(v77 + 16) = *((_QWORD *)v76 + 2);
      }
      *(_QWORD *)v76 = v66;
      if (v66)
      {
        v80 = *((_QWORD *)v66 + 1);
        v79 = (char **)((char *)v66 + 8);
        v78 = v80;
        v81 = &v75[32 * v65];
        *((_QWORD *)v81 + 1) = v80;
        if (v80)
          *(_QWORD *)(v78 + 16) = v81 + 8;
        *((_QWORD *)v81 + 2) = v79;
        *v79 = v76;
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t llvm::MemCpyOptPass::iterateOnFunction(llvm::MemCpyOptPass *this, llvm::Function *a2)
{
  char *v2;
  char *v3;
  int v5;
  uint64_t v6;
  _QWORD *i;
  llvm::CallBase *v8;
  llvm::LoadInst *v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  char *v24;
  uint64_t v25;
  _QWORD *v27;

  v2 = (char *)a2 + 72;
  v3 = (char *)*((_QWORD *)a2 + 10);
  if (v3 != (char *)a2 + 72)
  {
    v5 = 0;
    while (1)
    {
      v6 = v3 ? (uint64_t)(v3 - 24) : 0;
      if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(*((_QWORD *)this + 3), v6))
        break;
LABEL_48:
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return v5 & 1;
    }
    for (i = *(_QWORD **)(v6 + 48); ; i = v27)
    {
      if (i == (_QWORD *)(v6 + 40))
        goto LABEL_48;
      v27 = (_QWORD *)i[1];
      v8 = (llvm::CallBase *)(i - 3);
      if (i)
        v9 = (llvm::LoadInst *)(i - 3);
      else
        v9 = 0;
      if (i && *((_BYTE *)v9 + 16) == 61)
      {
        v5 |= llvm::MemCpyOptPass::processStore((uint64_t)this, v9, &v27);
        continue;
      }
      v10 = sub_1C5392540((uint64_t)v9);
      if (i)
      {
        if (v10)
          break;
      }
      v11 = sub_1C53924A0((uint64_t)v9);
      if (i && v11)
      {
        if ((llvm::MemCpyOptPass::processMemCpy((uint64_t)this, (uint64_t)v9, (uint64_t)&v27) & 1) == 0)
          continue;
LABEL_22:
        if (v27 != *(_QWORD **)(v6 + 48))
          v27 = (_QWORD *)*v27;
        v5 = 1;
        continue;
      }
      v12 = sub_1C53924F4((uint64_t)v9);
      if (i && v12)
      {
        if (!llvm::MemCpyOptPass::processMemMove((uint64_t)this, (uint64_t)v9))
          continue;
        goto LABEL_22;
      }
      v13 = *((unsigned __int8 *)v9 + 16) - 33;
      v14 = v13 > 0x33;
      v15 = (1 << v13) & 0x8000000000041;
      if (!v14 && v15 != 0)
      {
        v17 = *((unsigned __int8 *)i - 8);
        if (v17 == 84)
          v18 = 0;
        else
          v18 = v17 == 39 ? (*((_DWORD *)i + 14) + 1) : 2;
        v19 = *((_DWORD *)i - 1);
        if (v19 < 0
          && (v24 = (char *)v8 - 32 * (v19 & 0x7FFFFFF), v25 = *((_QWORD *)v24 - 1), (v25 & 0xFFFFFFFF0) != 0))
        {
          v21 = -(uint64_t)(v19 & 0x7FFFFFF);
          v20 = *((_DWORD *)v24 - 3) - *(_DWORD *)&v24[-v25];
        }
        else
        {
          v20 = 0;
          v21 = -(uint64_t)(v19 & 0x7FFFFFF);
        }
        v22 = (-32 * v18 + 32 * (unint64_t)-v20 - 32 * v21 - 32) >> 5;
        if ((_DWORD)v22)
        {
          v23 = 0;
          do
          {
            if (llvm::CallBase::paramHasAttr((uint64_t)v8, v23, 69))
              v5 |= llvm::MemCpyOptPass::processByValArgument(this, v8, v23);
            ++v23;
          }
          while ((_DWORD)v22 != v23);
        }
      }
LABEL_40:
      ;
    }
    if ((llvm::MemCpyOptPass::processMemSet(this, v9, &v27) & 1) == 0)
      goto LABEL_40;
    goto LABEL_22;
  }
  LOBYTE(v5) = 0;
  return v5 & 1;
}

_QWORD *llvm::MemCpyOptPass::run@<X0>(llvm::MemCpyOptPass *a1@<X0>, llvm::Function *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ResultImpl;
  char v13;

  v8 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::TargetLibraryAnalysis::Key, (uint64_t)a2) + 8;
  v9 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::AAManager::Key, (uint64_t)a2) + 8;
  v10 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::AssumptionAnalysis::Key, (uint64_t)a2) + 8;
  v11 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::DominatorTreeAnalysis::Key, (uint64_t)a2) + 8;
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::MemorySSAAnalysis::Key, (uint64_t)a2);
  v13 = llvm::MemCpyOptPass::runImpl(a1, a2, v8, v9, v10, v11, *(_QWORD *)(ResultImpl + 8));
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  if ((v13 & 1) == 0)
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::CFGAnalyses::SetKey);
  return sub_1C4DDB144(a4, (uint64_t)&llvm::MemorySSAAnalysis::Key);
}

uint64_t llvm::MemCpyOptPass::runImpl(llvm::MemCpyOptPass *this, llvm::Function *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v10;
  char v11;
  char v12;
  uint64_t v14;
  char *v15[2];
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  int v20;
  _BYTE v21[64];
  void *v22;
  uint64_t v23;
  _BYTE v24[64];
  _QWORD **v25;
  _QWORD *v26[3];

  v10 = 0;
  v26[2] = *(_QWORD **)MEMORY[0x1E0C80C00];
  *(_QWORD *)this = a3;
  *((_QWORD *)this + 1) = a4;
  *((_QWORD *)this + 2) = a5;
  *((_QWORD *)this + 3) = a6;
  v14 = a7;
  v15[0] = (char *)&v16;
  v15[1] = (char *)0x1000000000;
  v17 = v21;
  v18 = v21;
  v19 = 8;
  v20 = 0;
  v22 = v24;
  v23 = 0x800000000;
  v25 = v26;
  v26[1] = 0;
  v26[0] = 0;
  *((_QWORD *)this + 4) = a7;
  *((_QWORD *)this + 5) = &v14;
  do
  {
    v11 = v10;
    v12 = llvm::MemCpyOptPass::iterateOnFunction(this, a2);
    v10 = 1;
  }
  while ((v12 & 1) != 0);
  if (llvm::VerifyMemorySSA)
    llvm::MemorySSA::verifyMemorySSA(a7, 0);
  sub_1C61247C0((uint64_t)&v25, v26[0]);
  if (v22 != v24)
    free(v22);
  if (v18 != v17)
    free(v18);
  sub_1C4EE41F8(v15);
  return v11 & 1;
}

void sub_1C5BC926C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5BC9290(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
}

uint64_t sub_1C5BC9370(_QWORD **a1, const llvm::Function *a2)
{
  char **v5;
  char *v6;
  uint64_t v7;
  uint64_t *v8;
  void **v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  char *v13;
  uint64_t v14;
  char **v15;
  char *v16;
  llvm::AssumptionCacheTracker *v17;
  uint64_t AssumptionCache;
  char **v19;
  char *v20;
  uint64_t v21;
  void **v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void **v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30[2];
  int v31;
  uint64_t v32[2];
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  void *__src;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, a2) & 1) != 0)
    return 0;
  v5 = (char **)*a1[1];
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != llvm::TargetLibraryInfoWrapperPass::ID);
  v7 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v30[0] = 0;
  v30[1] = 0;
  v31 = 0;
  v32[0] = 0;
  v32[1] = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  llvm::TargetLibraryAnalysis::run(v7 + 32, (uint64_t)a2, (uint64_t)&v37);
  *(_QWORD *)(v7 + 240) = v37;
  v8 = (uint64_t *)(v7 + 240);
  if (!*(_BYTE *)(v7 + 320))
  {
    v26 = (void *)(v7 + 264);
    *(_QWORD *)(v7 + 248) = v7 + 264;
    v27 = (void **)(v7 + 248);
    *(_QWORD *)(v7 + 256) = 0x600000000;
    v28 = v39;
    if (!v39 || v27 == &__src)
      goto LABEL_39;
    if (v39 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7 + 248, v7 + 264, v39, 8);
      v29 = v39;
      if (!v39)
      {
LABEL_38:
        *(_DWORD *)(v7 + 256) = v28;
LABEL_39:
        *(_DWORD *)(v7 + 312) = v41;
        *(_BYTE *)(v7 + 320) = 1;
        goto LABEL_19;
      }
      v26 = *v27;
    }
    else
    {
      v29 = v39;
    }
    memcpy(v26, __src, 8 * v29);
    goto LABEL_38;
  }
  if (v8 != &v37)
  {
    v9 = (void **)(v7 + 248);
    v10 = v39;
    v11 = *(unsigned int *)(v7 + 256);
    if (v11 >= v39)
    {
      if (v39)
        memmove(*v9, __src, 8 * v39);
      goto LABEL_17;
    }
    if (*(_DWORD *)(v7 + 260) < v39)
    {
      *(_DWORD *)(v7 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7 + 248, v7 + 264, v10, 8);
    }
    else if ((_DWORD)v11)
    {
      memmove(*v9, __src, 8 * v11);
      goto LABEL_15;
    }
    v11 = 0;
LABEL_15:
    if (v11 != v39)
      memcpy((char *)*v9 + 8 * v11, (char *)__src + 8 * v11, 8 * v39 - 8 * v11);
LABEL_17:
    *(_DWORD *)(v7 + 256) = v10;
  }
  *(_DWORD *)(v7 + 312) = v41;
LABEL_19:
  if (__src != &v40)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v32);
  sub_1C4D8B52C(v30);
  v12 = (char **)*a1[1];
  do
  {
    v13 = *v12;
    v12 += 2;
  }
  while (v13 != llvm::AAResultsWrapperPass::ID);
  v14 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v12 - 1) + 96))(*(v12 - 1), llvm::AAResultsWrapperPass::ID)+ 32);
  v15 = (char **)*a1[1];
  do
  {
    v16 = *v15;
    v15 += 2;
  }
  while (v16 != llvm::AssumptionCacheTracker::ID);
  v17 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v15 - 1) + 96))(*(v15 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = llvm::AssumptionCacheTracker::getAssumptionCache(v17, a2);
  v19 = (char **)*a1[1];
  do
  {
    v20 = *v19;
    v19 += 2;
  }
  while (v20 != llvm::DominatorTreeWrapperPass::ID);
  v21 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v19 - 1) + 96))(*(v19 - 1), llvm::DominatorTreeWrapperPass::ID);
  v22 = (void **)*a1[1];
  do
  {
    v23 = *v22;
    v22 += 2;
  }
  while (v23 != &llvm::MemorySSAWrapperPass::ID);
  v24 = v21 + 32;
  v25 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v22 - 1) + 96))(*(v22 - 1), &llvm::MemorySSAWrapperPass::ID);
  return llvm::MemCpyOptPass::runImpl((llvm::MemCpyOptPass *)(a1 + 4), a2, (uint64_t)v8, v14, AssumptionCache, v24, *(_QWORD *)(v25 + 32));
}

uint64_t sub_1C5BC96D8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5BC3AE4(v0);
}

void sub_1C5BC9700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void **v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  const void *v33;
  void **v34;
  unint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  _BOOL4 v55;
  char *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  _DWORD *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  _OWORD *v73;
  uint64_t v74;
  _OWORD *v75;
  void **v76;
  unint64_t v77;
  _DWORD *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  unsigned int v83;
  uint64_t v84;
  void *v85;
  int v86;
  uint64_t v87;
  unsigned int *v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  void *v95[2];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;

  v6 = a6;
  v7 = a5;
  v8 = a4;
  v104 = *MEMORY[0x1E0C80C00];
  v11 = a3 + a2;
  v12 = *(_QWORD *)a1;
  v13 = *(_DWORD *)(a1 + 8);
  if (v13)
  {
    v14 = *(_QWORD *)a1;
    v15 = *(unsigned int *)(a1 + 8);
    do
    {
      v16 = v15 >> 1;
      v17 = v14 + 176 * (v15 >> 1);
      v18 = *(_QWORD *)(v17 + 8);
      v19 = v17 + 176;
      v15 += ~(v15 >> 1);
      if (v18 < a2)
        v14 = v19;
      else
        v15 = v16;
    }
    while (v15);
  }
  else
  {
    v14 = *(_QWORD *)a1;
  }
  v92 = a3 + a2;
  if (v14 == v12 + 176 * v13)
  {
    v102 = 0u;
    v103 = 0u;
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95[1] = (void *)0x1000000000;
    v93 = 0u;
    v95[0] = &v96;
    v41 = sub_1C5BC9FBC(a1, (unint64_t)&v93);
    v42 = *(_QWORD *)a1 + 176 * *(unsigned int *)(a1 + 8);
    v43 = *(_OWORD *)v41;
    *(_OWORD *)(v42 + 12) = *(_OWORD *)(v41 + 12);
    *(_OWORD *)v42 = v43;
    v44 = (void *)(v42 + 48);
    *(_QWORD *)(v42 + 40) = 0x1000000000;
    *(_QWORD *)(v42 + 32) = v42 + 48;
    v45 = v42 + 32;
    v46 = *((unsigned int *)v41 + 10);
    if (!(_DWORD)v46 || (char *)v45 == v41 + 32)
      goto LABEL_45;
    v47 = (char *)*((_QWORD *)v41 + 4);
    if (v47 != v41 + 48)
    {
      if (v44 != (void *)(v45 + 16))
      {
        free(v44);
        v47 = (char *)*((_QWORD *)v41 + 4);
        LODWORD(v46) = *((_DWORD *)v41 + 10);
      }
      *(_QWORD *)v45 = v47;
      *(_DWORD *)(v45 + 8) = v46;
      *(_DWORD *)(v45 + 12) = *((_DWORD *)v41 + 11);
      *((_QWORD *)v41 + 4) = v41 + 48;
      *((_DWORD *)v41 + 11) = 0;
      v11 = v92;
      goto LABEL_44;
    }
    if (v46 >= 0x11)
    {
      *(_DWORD *)(v45 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v45, v45 + 16, v46, 8);
      v48 = *((unsigned int *)v41 + 10);
      v11 = v92;
      if (!(_DWORD)v48)
        goto LABEL_43;
      v47 = (char *)*((_QWORD *)v41 + 4);
      v44 = *(void **)v45;
    }
    else
    {
      v48 = *((unsigned int *)v41 + 10);
      v11 = v92;
    }
    memcpy(v44, v47, 8 * v48);
LABEL_43:
    *(_DWORD *)(v45 + 8) = v46;
LABEL_44:
    *((_DWORD *)v41 + 10) = 0;
LABEL_45:
    v49 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v49;
    v23 = *(_QWORD *)a1 + 176 * v49 - 176;
    goto LABEL_67;
  }
  if (v11 < *(_QWORD *)v14)
  {
    v102 = 0u;
    v103 = 0u;
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95[1] = (void *)0x1000000000;
    v93 = 0u;
    v20 = v14 - v12;
    v21 = v20 >> 4;
    v95[0] = &v96;
    v22 = sub_1C5BC9FBC(a1, (unint64_t)&v93);
    v23 = *(_QWORD *)a1 + v20;
    v87 = *(_QWORD *)a1;
    v24 = *(_QWORD *)a1 + 176 * *(unsigned int *)(a1 + 8);
    *(_OWORD *)(v24 + 12) = *(_OWORD *)(v24 - 164);
    *(_OWORD *)v24 = *(_OWORD *)(v24 - 176);
    v25 = (void *)(v24 + 48);
    *(_QWORD *)(v24 + 32) = v24 + 48;
    v26 = (void **)(v24 + 32);
    *(_QWORD *)(v24 + 40) = 0x1000000000;
    v27 = *(unsigned int *)(v24 - 136);
    if (!(_DWORD)v27 || v26 == (void **)(v24 - 144))
    {
LABEL_19:
      v30 = *(_QWORD *)a1;
      v31 = *(_DWORD *)(a1 + 8);
      v32 = *(_QWORD *)a1 + 176 * v31 - 176;
      if (v32 == v23)
        goto LABEL_50;
      while (1)
      {
        *(_OWORD *)v32 = *(_OWORD *)(v32 - 176);
        *(_OWORD *)(v32 + 12) = *(_OWORD *)(v32 - 164);
        v33 = *(const void **)(v32 - 144);
        if ((const void *)(v32 - 128) != v33)
        {
          v39 = *(void **)(v32 + 32);
          if ((void *)(v32 + 48) != v39)
          {
            free(v39);
            v33 = *(const void **)(v32 - 144);
          }
          v36 = (_DWORD *)(v32 - 136);
          v40 = *(_QWORD *)(v32 - 136);
          *(_QWORD *)(v32 + 32) = v33;
          *(_QWORD *)(v32 + 40) = v40;
          *(_QWORD *)(v32 - 144) = v32 - 128;
          *(_DWORD *)(v32 - 132) = 0;
          goto LABEL_28;
        }
        v34 = (void **)(v32 + 32);
        v36 = (_DWORD *)(v32 - 136);
        v35 = *(unsigned int *)(v32 - 136);
        v37 = *(unsigned int *)(v32 + 40);
        if (v37 >= v35)
        {
          if ((_DWORD)v35)
            memmove(*v34, v33, 8 * v35);
          goto LABEL_27;
        }
        if (*(_DWORD *)(v32 + 44) < v35)
          break;
        if (!(_DWORD)v37)
          goto LABEL_24;
        memmove(*v34, v33, 8 * v37);
LABEL_25:
        v38 = *v36;
        if (v37 != v38)
          memcpy((void *)(*(_QWORD *)(v32 + 32) + 8 * v37), (const void *)(*(_QWORD *)(v32 - 144) + 8 * v37), 8 * v38 - 8 * v37);
LABEL_27:
        *(_DWORD *)(v32 + 40) = v35;
LABEL_28:
        v32 -= 176;
        *v36 = 0;
        if (v32 == v23)
        {
          v31 = *(_DWORD *)(a1 + 8);
          v30 = *(_QWORD *)a1;
LABEL_50:
          v52 = v31 + 1;
          *(_DWORD *)(a1 + 8) = v52;
          v53 = v30 + 176 * v52;
          v55 = (unint64_t)v22 >= v23 && (unint64_t)v22 < v53;
          v56 = &v22[176 * v55];
          v57 = *(_OWORD *)v56;
          *(_OWORD *)(v23 + 12) = *(_OWORD *)(v56 + 12);
          *(_OWORD *)v23 = v57;
          v58 = v87 + 16 * v21;
          if ((char *)v58 == v56)
          {
            v11 = v92;
            v6 = a6;
            v7 = a5;
          }
          else
          {
            v59 = v58 + 32;
            v60 = v56 + 32;
            v62 = v56 + 48;
            v61 = (char *)*((_QWORD *)v56 + 4);
            v6 = a6;
            v7 = a5;
            if (v61 == v56 + 48)
            {
              v63 = v56 + 40;
              v64 = *((unsigned int *)v56 + 10);
              v65 = *(unsigned int *)(v58 + 40);
              if (v65 >= v64)
              {
                if ((_DWORD)v64)
                  memmove(*(void **)v59, v61, 8 * v64);
              }
              else
              {
                if (*(_DWORD *)(v58 + 44) < v64)
                {
                  *(_DWORD *)(v58 + 40) = 0;
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v58 + 32, v58 + 48, v64, 8);
LABEL_61:
                  v65 = 0;
                }
                else
                {
                  if (!(_DWORD)v65)
                    goto LABEL_61;
                  memmove(*(void **)v59, v61, 8 * v65);
                }
                v66 = *v63;
                if (v65 != v66)
                  memcpy((void *)(*(_QWORD *)v59 + 8 * v65), (const void *)(*(_QWORD *)v60 + 8 * v65), *(_QWORD *)v60 + 8 * v66 - (*(_QWORD *)v60 + 8 * v65));
              }
              *(_DWORD *)(v59 + 8) = v64;
            }
            else
            {
              if (*(_QWORD *)(v58 + 32) != v58 + 48)
              {
                free(*(void **)v59);
                v61 = *(char **)v60;
              }
              *(_QWORD *)v59 = v61;
              v63 = v60 + 8;
              *(_QWORD *)(v59 + 8) = *((_QWORD *)v60 + 1);
              *(_QWORD *)v60 = v62;
              *((_DWORD *)v60 + 3) = 0;
            }
            v11 = v92;
            *v63 = 0;
          }
          v8 = a4;
LABEL_67:
          if (v95[0] != &v96)
            free(v95[0]);
          *(_QWORD *)v23 = a2;
          *(_QWORD *)(v23 + 8) = v11;
          *(_QWORD *)(v23 + 16) = v8;
          *(_DWORD *)(v23 + 24) = v7;
          v67 = *(unsigned int *)(v23 + 40);
          if (v67 >= *(_DWORD *)(v23 + 44))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v23 + 32, v23 + 48, v67 + 1, 8);
            LODWORD(v67) = *(_DWORD *)(v23 + 40);
          }
          *(_QWORD *)(*(_QWORD *)(v23 + 32) + 8 * v67) = v6;
          ++*(_DWORD *)(v23 + 40);
          return;
        }
      }
      *(_DWORD *)(v32 + 40) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v34, v32 + 48, v35, 8);
LABEL_24:
      v37 = 0;
      goto LABEL_25;
    }
    v28 = *(void **)(v24 - 144);
    if (v28 != (void *)(v24 - 128))
    {
      *v26 = v28;
      v86 = *(_DWORD *)(v24 - 132);
      *(_DWORD *)(v24 + 40) = v27;
      *(_DWORD *)(v24 + 44) = v86;
      *(_QWORD *)(v24 - 144) = v24 - 128;
      *(_DWORD *)(v24 - 132) = 0;
      goto LABEL_18;
    }
    if (v27 >= 0x11)
    {
      *(_DWORD *)(v24 + 40) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v24 + 32, v24 + 48, v27, 8);
      v29 = *(unsigned int *)(v24 - 136);
      if (!(_DWORD)v29)
        goto LABEL_17;
      v28 = *(void **)(v24 - 144);
      v25 = *v26;
    }
    else
    {
      v29 = *(unsigned int *)(v24 - 136);
    }
    memcpy(v25, v28, 8 * v29);
LABEL_17:
    *(_DWORD *)(v24 + 40) = v27;
LABEL_18:
    *(_DWORD *)(v24 - 136) = 0;
    goto LABEL_19;
  }
  v91 = (unsigned int *)(v14 + 32);
  v50 = *(unsigned int *)(v14 + 40);
  if (v50 >= *(_DWORD *)(v14 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v91, v14 + 48, v50 + 1, 8);
    LODWORD(v50) = *(_DWORD *)(v14 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(v14 + 32) + 8 * v50) = v6;
  ++*(_DWORD *)(v14 + 40);
  if (*(_QWORD *)v14 <= a2)
  {
    v51 = *(_QWORD *)(v14 + 8);
    if (v51 >= v11)
      return;
  }
  else
  {
    *(_QWORD *)v14 = a2;
    *(_QWORD *)(v14 + 16) = v8;
    *(_DWORD *)(v14 + 24) = v7;
    v51 = *(_QWORD *)(v14 + 8);
  }
  if (v11 > v51)
  {
    *(_QWORD *)(v14 + 8) = v11;
    v68 = (_QWORD *)(v14 + 176);
    if (v14 + 176 != *(_QWORD *)a1 + 176 * *(unsigned int *)(a1 + 8))
    {
LABEL_76:
      if (v11 < *v68)
        return;
      sub_1C4DFE610(v91, *(_BYTE **)(v14 + 208), (_BYTE *)(*(_QWORD *)(v14 + 208) + 8 * *(unsigned int *)(v14 + 216)));
      v69 = *(_QWORD *)(v14 + 184);
      if (v69 > *(_QWORD *)(v14 + 8))
        *(_QWORD *)(v14 + 8) = v69;
      v70 = *(_QWORD *)a1;
      v71 = *(_DWORD *)(a1 + 8);
      v72 = *(_QWORD *)a1 + 176 * v71;
      if (v14 + 352 == v72)
        goto LABEL_98;
      v73 = (_OWORD *)(v14 + 400);
      v74 = v14 + 176;
      while (1)
      {
        *(v73 - 14) = *(v73 - 3);
        *(_OWORD *)((char *)v73 - 212) = *(_OWORD *)((char *)v73 - 36);
        v75 = (_OWORD *)*((_QWORD *)v73 - 2);
        if (v73 != v75)
        {
          v82 = (char *)*((_QWORD *)v73 - 24);
          if (v73 - 11 != (_OWORD *)v82)
          {
            free(v82);
            v75 = (_OWORD *)*((_QWORD *)v73 - 2);
          }
          *((_QWORD *)v73 - 24) = v75;
          v78 = (_DWORD *)(v74 + 216);
          *((_QWORD *)v73 - 23) = *((_QWORD *)v73 - 1);
          *((_QWORD *)v73 - 2) = v73;
          *((_DWORD *)v73 - 1) = 0;
          goto LABEL_89;
        }
        v76 = (void **)(v73 - 12);
        v78 = (_DWORD *)v73 - 2;
        v77 = *((unsigned int *)v73 - 2);
        v79 = *((unsigned int *)v73 - 46);
        if (v79 >= v77)
        {
          if ((_DWORD)v77)
            memmove(*v76, v75, 8 * v77);
          goto LABEL_88;
        }
        if (*((_DWORD *)v73 - 45) < v77)
          break;
        if (!(_DWORD)v79)
          goto LABEL_85;
        memmove(*v76, v75, 8 * v79);
LABEL_86:
        v80 = *v78;
        if (v79 != v80)
          memcpy((void *)(*((_QWORD *)v73 - 24) + 8 * v79), (const void *)(*((_QWORD *)v73 - 2) + 8 * v79), 8 * v80 - 8 * v79);
LABEL_88:
        *((_DWORD *)v73 - 46) = v77;
LABEL_89:
        *v78 = 0;
        v74 += 176;
        v81 = (char *)(v73 + 8);
        v73 += 11;
        if (v81 == (char *)v72)
        {
          v71 = *(_DWORD *)(a1 + 8);
          v70 = *(_QWORD *)a1;
          v11 = v92;
LABEL_98:
          v83 = v71 - 1;
          *(_DWORD *)(a1 + 8) = v83;
          v84 = v70 + 176 * v83;
          v85 = *(void **)(v84 + 32);
          if (v85 != (void *)(v84 + 48))
          {
            free(v85);
            v70 = *(_QWORD *)a1;
            v83 = *(_DWORD *)(a1 + 8);
          }
          if (v68 == (_QWORD *)(v70 + 176 * v83))
            return;
          goto LABEL_76;
        }
      }
      *((_DWORD *)v73 - 46) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v76, (uint64_t)(v73 - 11), v77, 8);
LABEL_85:
      v79 = 0;
      goto LABEL_86;
    }
  }
}

char *sub_1C5BC9FBC(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  unint64_t v20;
  BOOL v21;
  char *v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  char *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 < *(_DWORD *)(a1 + 12))
    return (char *)a2;
  v6 = v3 + 1;
  v7 = *(_QWORD *)a1 + 176 * v3;
  v9 = *(_QWORD *)a1 <= a2 && v7 > a2;
  if (v9)
    v10 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a2 - *(_QWORD *)a1) >> 4);
  else
    v10 = -1;
  v30 = 0;
  v11 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, v6, 176, &v30);
  v12 = *(char **)a1;
  v13 = *(_DWORD *)(a1 + 8);
  if (!v13)
    goto LABEL_36;
  v29 = v10;
  v14 = 0;
  v15 = 176 * v13;
  do
  {
    v16 = &v11[v14];
    v17 = &v12[v14];
    v18 = *(_OWORD *)&v12[v14];
    *(_OWORD *)(v16 + 12) = *(_OWORD *)&v12[v14 + 12];
    *(_OWORD *)v16 = v18;
    v19 = &v11[v14 + 48];
    *(_QWORD *)&v11[v14 + 32] = v19;
    *((_QWORD *)v16 + 5) = 0x1000000000;
    v20 = *(unsigned int *)&v12[v14 + 40];
    if ((_DWORD)v20)
      v21 = v17 == v16;
    else
      v21 = 1;
    if (!v21)
    {
      v22 = (char *)*((_QWORD *)v17 + 4);
      if (v17 + 48 != v22)
      {
        *((_QWORD *)v16 + 4) = v22;
        v24 = *(_DWORD *)&v12[v14 + 44];
        *((_DWORD *)v16 + 10) = v20;
        *((_DWORD *)v16 + 11) = v24;
        *((_QWORD *)v17 + 4) = v17 + 48;
        *(_DWORD *)&v12[v14 + 44] = 0;
        goto LABEL_23;
      }
      if (v20 >= 0x11)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v11[v14 + 32], (uint64_t)&v11[v14 + 48], v20, 8);
        v23 = *((unsigned int *)v17 + 10);
        if (!(_DWORD)v23)
          goto LABEL_22;
        v22 = (char *)*((_QWORD *)v17 + 4);
        v19 = *(char **)&v11[v14 + 32];
      }
      else
      {
        v23 = *(unsigned int *)&v12[v14 + 40];
      }
      memcpy(v19, v22, 8 * v23);
LABEL_22:
      *((_DWORD *)v16 + 10) = v20;
LABEL_23:
      *((_DWORD *)v17 + 10) = 0;
    }
    v14 += 176;
  }
  while (v15 != v14);
  v12 = *(char **)a1;
  v25 = *(_DWORD *)(a1 + 8);
  if (v25)
  {
    v26 = 176 * v25;
    v10 = v29;
    do
    {
      v27 = *(char **)&v12[v26 - 144];
      if (&v12[v26 - 128] != v27)
        free(v27);
      v26 -= 176;
    }
    while (v26);
    v12 = *(char **)a1;
  }
  else
  {
    v10 = v29;
  }
LABEL_36:
  v28 = v30;
  if (v12 != (char *)(a1 + 16))
    free(v12);
  *(_QWORD *)a1 = v11;
  *(_DWORD *)(a1 + 12) = v28;
  if (v9)
    return &v11[176 * v10];
  return (char *)a2;
}

void sub_1C5BCA1D4()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5BCA1E8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E8196A18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C5BCA220(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8196A18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C5BCA240(uint64_t a1)
{
  _QWORD *WalkerImpl;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  WalkerImpl = llvm::MemorySSA::getWalkerImpl(*(llvm::MemorySSA **)(*(_QWORD *)(a1 + 8) + 32));
  v3 = WalkerImpl[1];
  v4 = *(_DWORD *)(v3 + 40);
  if (v4)
  {
    v5 = **(_QWORD **)(a1 + 16);
    v6 = *(_QWORD *)(v3 + 24);
    v7 = v4 - 1;
    v8 = ((v5 >> 4) ^ (v5 >> 9)) & (v4 - 1);
    v9 = *(_QWORD *)(v6 + 16 * v8);
    if (v5 == v9)
    {
LABEL_6:
      v12 = *(_QWORD *)(v6 + 16 * v8 + 8);
      goto LABEL_8;
    }
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v8 + v10++;
      v8 = v11 & v7;
      v9 = *(_QWORD *)(v6 + 16 * v8);
      if (v5 == v9)
        goto LABEL_6;
    }
  }
  v12 = 0;
LABEL_8:
  v13 = (*(uint64_t (**)(_QWORD *, uint64_t))(*WalkerImpl + 16))(WalkerImpl, v12);
  if (v13)
    v14 = *(unsigned __int8 *)(v13 + 16) - 27 >= 0xFFFFFFFE;
  else
    v14 = 0;
  if (!v14)
    return 0;
  v15 = *(_QWORD *)(v13 + 72);
  if (!v15)
    return 0;
  if (*(_BYTE *)(v15 + 16) == 84)
    return *(_QWORD *)(v13 + 72);
  return 0;
}

void sub_1C5BCA318()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5BCA32C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8196A60;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5BCA360(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8196A60;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C5BCA37C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_1C5BCA384()
{
  __n128 v1;
  int v2;
  int v3;
  char v4;
  char *v5;

  v4 = 0;
  v5 = &v4;
  v2 = 1;
  v3 = 1;
  v1.n128_u64[0] = (unint64_t)"Enable memcpyopt even when libcalls are disabled";
  v1.n128_u64[1] = 48;
  sub_1C617D830((llvm::cl::Option *)&unk_1ED821FA0, "enable-memcpyopt-without-libcalls", &v5, &v3, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED821FA0, &dword_1C475E000);
}

uint64_t sub_1C5BCA408(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v2);
  v3 = operator new();
  *(_QWORD *)v3 = "Merge contiguous icmps into a memcmp";
  *(_QWORD *)(v3 + 8) = 36;
  *(_QWORD *)(v3 + 16) = "mergeicmps";
  *(_QWORD *)(v3 + 24) = 10;
  *(_QWORD *)(v3 + 32) = &unk_1ED822070;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5BCCF20;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5BCA4AC(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED822070;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8196AA8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED822078);
  if (v3 != -1)
  {
    v7[0] = sub_1C5BCA408;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED822078, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *llvm::MergeICmpsPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t ResultImpl;
  uint64_t v8;
  uint64_t CachedResultImpl;
  uint64_t v10;
  char v11;

  v6 = (uint64_t *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetLibraryAnalysis::Key, a1) + 8);
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetIRAnalysis::Key, a1);
  v8 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AAManager::Key, a1) + 8;
  CachedResultImpl = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(a2, (uint64_t)&llvm::DominatorTreeAnalysis::Key, a1);
  if (CachedResultImpl)
    v10 = CachedResultImpl + 8;
  else
    v10 = 0;
  v11 = sub_1C5BCA67C(a1, v6, *(_QWORD *)(ResultImpl + 8), v8, v10);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if ((v11 & 1) != 0)
    return sub_1C4DDB144(a3, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
  else
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C5BCA67C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t j, uint64_t a5)
{
  uint64_t v9;
  _BOOL8 v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  llvm::PHINode *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  llvm::BasicBlock *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD **v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v47;
  int v48;
  uint64_t v49;
  llvm::APInt *v50;
  unsigned int v51;
  uint64_t v52;
  _QWORD **v53;
  __n128 v54;
  unsigned __int32 v55;
  unsigned __int32 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  llvm::LLVMContext *v64;
  uint64_t v65;
  _QWORD **v66;
  char *v67;
  uint64_t i;
  void *v69;
  int v70;
  llvm::Value **v71;
  llvm::Value **v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v82;
  _BYTE *v83;
  unsigned int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  int v116;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t SinglePredecessor;
  int v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  llvm::LLVMContext ***v134;
  llvm::Value *v135;
  uint64_t *v136;
  uint64_t ****v137;
  uint64_t ****v138;
  uint64_t v139;
  llvm::LLVMContext ***v140;
  uint64_t ****v141;
  uint64_t ***v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t ****v147;
  uint64_t ***v148;
  int v149;
  int v150;
  int v151;
  uint64_t ****v152;
  uint64_t ****v153;
  uint64_t ***v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t ***v160;
  int v161;
  int v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t ***v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t ****v170;
  uint64_t ***v171;
  int v172;
  int v173;
  uint64_t **v174;
  char *v175;
  uint64_t ***v176;
  uint64_t **v177;
  uint64_t ***v178;
  size_t v179;
  char *v180;
  size_t v181;
  uint64_t v182;
  uint64_t ****v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t ***v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t ***v193;
  int v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t ****v201;
  uint64_t ***v202;
  int v203;
  int v204;
  uint64_t ***v205;
  size_t v206;
  char *v207;
  size_t v208;
  llvm::LLVMContext **v209;
  uint64_t v210;
  unsigned int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  llvm::Instruction *v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  unsigned __int8 **v222;
  int v223;
  unsigned __int8 *v224;
  unsigned __int8 *v225;
  uint64_t ****v226;
  llvm::Instruction *v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  unsigned __int8 **v232;
  int v233;
  unsigned __int8 *v234;
  unsigned __int8 *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t ****v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t **v241;
  uint64_t v242;
  uint64_t **v243;
  uint64_t v244;
  int64x2_t *v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  char v249;
  char v250;
  char *v251;
  char *v252;
  llvm::Value *v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  uint64_t v257;
  char v258;
  char v259;
  char *v260;
  char *v261;
  llvm::Value *v262;
  uint64_t v263;
  _QWORD *v264;
  uint64_t v265;
  llvm::Value *v266;
  llvm::PHINode *v267;
  llvm::BasicBlock *v268;
  llvm::BasicBlock *v269;
  _DWORD *v270;
  _DWORD *v271;
  uint64_t v272;
  llvm::Value *v273;
  _QWORD *v274;
  unsigned __int8 *v275;
  char *v276;
  char *v277;
  unsigned __int8 **v278;
  int v279;
  unsigned __int8 *v280;
  unsigned __int8 *v281;
  uint64_t v282;
  llvm::ValueHandleBase *v283;
  char *v284;
  char *v285;
  llvm::Value *v286;
  uint64_t v287;
  _QWORD *v288;
  uint64_t v289;
  char *v290;
  char *v291;
  unsigned __int8 **v292;
  int v293;
  unsigned __int8 *v294;
  unsigned __int8 *v295;
  unsigned __int8 *v296;
  uint64_t *v297;
  char *v298;
  char *v299;
  unsigned __int8 **v300;
  int v301;
  unsigned __int8 *v302;
  unsigned __int8 *v303;
  unsigned __int8 *v304;
  char *v305;
  char *v306;
  unsigned __int8 **v307;
  int v308;
  unsigned __int8 *v309;
  unsigned __int8 *v310;
  unsigned __int8 *v311;
  int *v312;
  int v313;
  llvm::DataLayout *v314;
  _QWORD *IntPtrType;
  const llvm::APInt *v316;
  uint64_t v317;
  llvm::ConstantInt *v318;
  unsigned int v319;
  unint64_t v320;
  llvm::ValueHandleBase *v321;
  const llvm::APInt *v322;
  uint64_t v323;
  llvm::ConstantInt *v324;
  llvm::ValueHandleBase *v325;
  llvm::ConstantInt *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unsigned int v330;
  BOOL v331;
  BOOL v332;
  uint64_t v333;
  unsigned int v334;
  BOOL v335;
  unsigned int v337;
  BOOL v338;
  _QWORD *v340;
  _QWORD *v341;
  unsigned __int8 *v342;
  llvm::User *v343;
  uint64_t v344;
  llvm::Value *v345;
  unsigned int v347;
  uint64_t *v348;
  uint64_t *v349;
  uint64_t *v350;
  uint64_t v351;
  llvm::BasicBlock **v352;
  uint64_t v353;
  llvm::BasicBlock *v354;
  void **v355;
  const void **v356;
  const void **v357;
  uint64_t *v358;
  uint64_t *v359;
  uint64_t v360;
  uint64_t *v361;
  unint64_t v362;
  unint64_t v363;
  uint64_t v364;
  char *v365;
  uint64_t *v366;
  uint64_t *v367;
  uint64_t *v368;
  __int128 v369;
  void **v370;
  uint64_t v371;
  void *v372;
  BOOL v373;
  uint64_t v374;
  void *v375;
  uint64_t DomTree;
  unint64_t v377;
  uint64_t v378;
  char v379;
  llvm::Value *v381;
  uint64_t v382;
  unsigned __int32 v383;
  uint64_t v384;
  void *v385;
  unint64_t v386;
  _BYTE *v387;
  unsigned __int32 v388;
  uint64_t v389;
  llvm::LLVMContext *v390;
  unsigned int v391;
  llvm::LLVMContext *v392;
  unsigned int v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t *v396;
  uint64_t *v397;
  _QWORD *__p;
  int64x2_t v399;
  uint64_t v400;
  int v401;
  uint64_t *v402;
  uint64_t *v403;
  uint64_t *v404;
  uint64_t *v405;
  uint64_t ****v406;
  uint64_t v407;
  uint64_t *v408;
  llvm::PHINode *v409;
  void *v410;
  uint64_t v411;
  llvm::LLVMContext *v412;
  llvm::LLVMContext *v413;
  _QWORD **v414;
  llvm::LLVMContext ***v415;
  int v416;
  uint64_t v417;
  uint64_t v418;
  int v419;
  llvm::Value **v420;
  llvm::Value **v421;
  uint64_t v422;
  _QWORD v423[3];
  void *v424;
  void *v425;
  uint64_t v426;
  _QWORD v427[33];
  uint64_t v428;
  uint64_t v429;
  char v430;
  _BYTE *v431;
  void *v432;
  uint64_t v433;
  int v434;
  _BYTE v435[64];
  _QWORD v436[3];
  __int16 v437;
  void *__s1;
  _BYTE v439[24];
  int64x2_t v440;
  int64x2_t v441;
  int64x2_t v442;
  __int128 *v443;
  __int128 v444;
  uint64_t v445;
  uint64_t v446;
  void *v447;
  __int128 v448;
  unsigned __int32 v449;
  uint64_t v450;
  unsigned int v451;
  __int128 v452;
  char v453;
  uint64_t v454;
  int64x2_t v455;
  int64x2_t v456;
  int64x2_t v457;
  int64x2_t v458;
  void *v459[2];
  int64x2_t v460;
  int64x2_t v461;
  int64x2_t v462;
  int64x2_t v463;
  __int128 *v464;
  __int128 v465;
  unsigned __int32 v466;
  uint64_t v467;
  unsigned int v468;
  __int128 v469;
  unsigned __int32 v470;
  uint64_t v471;
  unsigned int v472;
  __int128 v473;
  _BYTE v474[56];
  int64x2_t v475;
  uint64_t v476;

  v476 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 112);
  if (v9)
    v10 = (*(_BYTE *)(v9 + 17) & 4) != 0 || *(char *)(v9 + 13) < 0;
  else
    v10 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, _BOOL8, uint64_t))(*(_QWORD *)a3 + 560))(&v424, a3, v10, 1);
  v11 = (int)v424;
  if (v425 != v427)
    free(v425);
  if (v11 && (*(_BYTE *)(a2[1] + 40) & 2) == 0 && (*(_BYTE *)(*a2 + 80) & 0xC) != 0)
  {
    v397 = a2;
    v12 = &v426;
    v424 = &v426;
    v425 = (void *)0x1000000000;
    v427[32] = 0;
    v427[31] = 0;
    v428 = a5;
    v429 = 0;
    v430 = 0;
    v431 = v435;
    v432 = v435;
    v433 = 8;
    v434 = 0;
    v13 = a1 + 72;
    memset(v436, 0, sizeof(v436));
    v437 = 0;
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    if (v14 != a1 + 72)
    {
      v15 = 0;
      v16 = &v439[8];
      v399 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v400 = a1 + 72;
      while (1)
      {
        v17 = v14 - 24;
        if (!v14)
          v17 = 0;
        v18 = *(_QWORD *)(v17 + 48);
        v19 = (unsigned __int8 *)(v18 - 24);
        if (!v18)
          v19 = 0;
        v20 = v19[16];
        if (v20 == 83)
          v21 = (llvm::PHINode *)v19;
        else
          v21 = 0;
        if (!v18 || v20 != 83)
          goto LABEL_41;
        v22 = *((_DWORD *)v21 + 5);
        if ((v22 & 0x7FFFFFE) != 0)
        {
          v23 = v22 & 0x7FFFFFF;
          if ((v22 & 0x7FFFFFF) != 0)
            break;
        }
LABEL_39:
        LODWORD(v26) = 0;
LABEL_40:
        v15 |= v26;
LABEL_41:
        v14 = *(_QWORD *)(v14 + 8);
        if (v14 == v13)
          goto LABEL_638;
      }
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 32 * v23;
      v28 = (char *)v21 - 32 * v23;
      do
      {
        v29 = v28;
        if ((v22 & 0x40000000) != 0)
          v29 = (char *)*((_QWORD *)v21 - 1);
        if (*(_BYTE *)(*(_QWORD *)&v29[v25] + 16) != 16)
        {
          if (v26)
            goto LABEL_39;
          if ((v22 & 0x40000000) != 0)
          {
            v32 = *((_QWORD *)v21 - 1);
            v33 = *(_QWORD *)(v32 + v25);
            if (*(_BYTE *)(v33 + 16) != 81)
              goto LABEL_39;
            v26 = *(llvm::BasicBlock **)(v33 + 40);
            v31 = (char *)(v32 + 32 * *((unsigned int *)v21 + 15));
          }
          else
          {
            v30 = *(_QWORD *)&v28[v25];
            if (*(_BYTE *)(v30 + 16) != 81)
              goto LABEL_39;
            v26 = *(llvm::BasicBlock **)(v30 + 40);
            v31 = &v28[32 * *((unsigned int *)v21 + 15)];
          }
          if (v26 != *(llvm::BasicBlock **)&v31[v24])
            goto LABEL_39;
        }
        v25 += 32;
        v24 += 8;
      }
      while (v27 != v25);
      if (!v26)
        goto LABEL_40;
      v401 = v15;
      if (llvm::BasicBlock::getSingleSuccessor(v26) != *((_QWORD *)v21 + 5))
      {
        LODWORD(v26) = 0;
LABEL_576:
        v15 = v401;
        v13 = v400;
        goto LABEL_40;
      }
      v396 = v12;
      v34 = *((_DWORD *)v21 + 5) & 0x7FFFFFF;
      __p = operator new(8 * v34);
      bzero(__p, 8 * v34);
      if (v34 >= 2)
      {
        v124 = v34;
        while ((*((_WORD *)v26 + 9) & 0x7FFF) == 0)
        {
          __p[v124 - 1] = v26;
          SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v26);
          v26 = (llvm::BasicBlock *)SinglePredecessor;
          if (!SinglePredecessor)
            goto LABEL_241;
          v126 = *((_DWORD *)v21 + 5);
          v127 = v126 & 0x7FFFFFF;
          if ((v126 & 0x7FFFFFF) == 0)
            break;
          v128 = (char *)v21 - 32 * v127;
          v129 = 32 * *((unsigned int *)v21 + 15);
          while (1)
          {
            v130 = v128;
            if ((v126 & 0x40000000) != 0)
              v130 = (char *)*((_QWORD *)v21 - 1);
            if (*(_QWORD *)&v130[v129] == SinglePredecessor)
              break;
            v129 += 8;
            if (!--v127)
              goto LABEL_240;
          }
          v332 = v124-- < 3;
          if (v332)
            goto LABEL_44;
        }
LABEL_240:
        LODWORD(v26) = 0;
LABEL_241:
        v12 = v396;
        goto LABEL_575;
      }
LABEL_44:
      v387 = v16;
      *__p = v26;
      v414 = (_QWORD **)&__p[v34];
      v420 = 0;
      v421 = 0;
      v422 = 0;
      v416 = 1;
      v417 = 0;
      v418 = 0;
      v35 = (_QWORD **)__p;
      v419 = 0;
      v12 = v396;
      v409 = v21;
      v384 = j;
      while (1)
      {
        v36 = *v35;
        v37 = *((_DWORD *)v21 + 5);
        v38 = v37 & 0x7FFFFFF;
        if ((v37 & 0x7FFFFFF) != 0)
        {
          v39 = 0;
          while (1)
          {
            v40 = (char *)v21 - 32 * v38;
            if ((v37 & 0x40000000) != 0)
              v40 = (char *)*((_QWORD *)v21 - 1);
            if (*(_QWORD **)&v40[32 * *((unsigned int *)v21 + 15) + 8 * v39] == v36)
              break;
            if (v38 == ++v39)
              goto LABEL_51;
          }
        }
        else
        {
LABEL_51:
          LODWORD(v39) = -1;
        }
        if ((v37 & 0x40000000) != 0)
          v41 = (char *)*((_QWORD *)v21 - 1);
        else
          v41 = (char *)v21 - 32 * v38;
        v42 = (_QWORD *)v36[5];
        if (v42 == v36 + 5)
          goto LABEL_244;
        v43 = v42 ? (uint64_t)(v42 - 3) : 0;
        v44 = *(unsigned __int8 *)(v43 + 16) - 40;
        v45 = v44 >= 0xFFFFFFF5 ? v43 : 0;
        if (!v42)
          goto LABEL_244;
        if (*(_BYTE *)(v45 + 16) != 30 || v44 < 0xFFFFFFF5)
          goto LABEL_244;
        v47 = *(_QWORD *)&v41[32 * v39];
        if ((*(_DWORD *)(v45 + 20) & 0x7FFFFFF) == 1)
        {
          v48 = 32;
        }
        else
        {
          v49 = *((_QWORD *)v409 + 5);
          v50 = (llvm::APInt *)(v47 + 24);
          v51 = *(_DWORD *)(v47 + 32);
          if (v51 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase(v50) != v51)
            {
LABEL_629:
              v12 = v396;
              goto LABEL_243;
            }
          }
          else if (*(_QWORD *)v50)
          {
            goto LABEL_629;
          }
          v47 = *(_QWORD *)(v45 - 96);
          v48 = *(_QWORD *)(v45 - 64) == v49 ? 32 : 33;
          v12 = v396;
        }
        if (!v47 || *(_BYTE *)(v47 + 16) != 81)
          goto LABEL_243;
        v52 = *(_QWORD *)(v47 + 8);
        if (!v52 || *(_QWORD *)(v52 + 8) || v48 != (*(_WORD *)(v47 + 18) & 0x3F))
        {
          v395 &= 0xFFFFFFFFFFFFFF00;
LABEL_243:
          v21 = v409;
          goto LABEL_244;
        }
        v53 = v35;
        v54.n128_f64[0] = sub_1C5BCD484((uint64_t)v459, *(llvm::Instruction **)(v47 - 64), &v416);
        v55 = v460.i32[0];
        if (v460.i32[0])
          break;
        v63 = 0;
        v395 &= 0xFFFFFFFFFFFFFF00;
LABEL_102:
        v21 = v409;
        if (v461.i32[0] >= 0x41u && v460.i64[1])
          MEMORY[0x1CAA32F9C](v460.i64[1], 0x1000C8000313F17, v54);
        if (!v63)
          goto LABEL_244;
        v65 = 0;
        v459[0] = v390;
        v459[1] = v392;
        v460.i64[0] = v394;
        v460.i64[1] = v45;
        *(_QWORD *)v474 = 1;
        *(int64x2_t *)&v474[8] = v399;
        *(int64x2_t *)&v474[24] = v399;
        *(int64x2_t *)&v474[40] = v399;
        v475 = v399;
        do
          sub_1C628FD24((uint64_t)v474, &v459[v65++], (uint64_t)v423);
        while (v65 != 4);
        if (v395)
        {
          v423[0] = v395;
          sub_1C631FEF0((uint64_t)v459, (uint64_t)v474, v423);
        }
        v66 = v53;
        if (v385)
        {
          v423[0] = v385;
          sub_1C631FEF0((uint64_t)v459, (uint64_t)v474, v423);
        }
        v454 = 1;
        v455 = v399;
        v456 = v399;
        v457 = v399;
        v458 = v399;
        sub_1C631FFB0((uint64_t)&v454, v474);
        v459[0] = v36;
        v459[1] = (void *)1;
        v460 = v399;
        v461 = v399;
        v462 = v399;
        v463 = v399;
        sub_1C629018C((unsigned int *)&v459[1], (unsigned int *)&v454);
        LOBYTE(v464) = 0;
        HIDWORD(v464) = 0;
        *(_QWORD *)&v465 = v395;
        *((_QWORD *)&v465 + 1) = v390;
        v466 = v383;
        v468 = v391;
        v467 = v382;
        *(_QWORD *)&v469 = v385;
        *((_QWORD *)&v469 + 1) = v392;
        v470 = v388;
        v472 = v393;
        v471 = v389;
        *(_QWORD *)&v473 = v386;
        *((_QWORD *)&v473 + 1) = v394;
        __s1 = v459[0];
        *(_QWORD *)v439 = 1;
        *(int64x2_t *)&v439[8] = v399;
        v440 = v399;
        v441 = v399;
        v442 = v399;
        sub_1C629018C((unsigned int *)v439, (unsigned int *)&v459[1]);
        v444 = v465;
        LODWORD(v445) = v466;
        LODWORD(v447) = v468;
        v443 = v464;
        v446 = v467;
        v448 = v469;
        v449 = v470;
        v451 = v472;
        v450 = v471;
        v468 = 0;
        v472 = 0;
        v452 = v473;
        v453 = 1;
        if (((uint64_t)v459[1] & 1) == 0)
          MEMORY[0x1CAA32FB4](v460.i64[0], 8);
        if ((v454 & 1) == 0)
          MEMORY[0x1CAA32FB4](v455.i64[0], 8);
        if ((v474[0] & 1) == 0)
          MEMORY[0x1CAA32FB4](*(_QWORD *)&v474[8], 8);
        if (!v453)
          goto LABEL_628;
        v67 = (char *)__s1 + 40;
        for (i = *((_QWORD *)__s1 + 6); ; i = *(_QWORD *)(i + 8))
        {
          if ((char *)i == v67)
          {
            v70 = 0;
            v71 = v420;
            v72 = v421;
LABEL_126:
            HIDWORD(v443) = -373475417 * ((unint64_t)((char *)v72 - (char *)v71) >> 3);
            sub_1C5BCD778((void **)&v420, (uint64_t *)&__s1);
            goto LABEL_127;
          }
          v69 = (void *)(i - 24);
          if (!i)
            v69 = 0;
          v459[0] = v69;
          *(_QWORD *)v474 = 0;
          if ((sub_1C61A6880((uint64_t)v439, v459, v474) & 1) == 0)
            break;
        }
        v71 = v420;
        if (v420 != v421)
        {
          v70 = 1;
          goto LABEL_127;
        }
        v73 = (char *)__s1 + 40;
        v74 = (char *)*((_QWORD *)__s1 + 6);
        if (v74 == (char *)__s1 + 40)
        {
          v72 = v420;
LABEL_213:
          LOBYTE(v443) = 1;
          v70 = 3;
          v21 = v409;
          goto LABEL_126;
        }
        while (2)
        {
          if (v74)
            v75 = (uint64_t)(v74 - 24);
          else
            v75 = 0;
          v459[0] = (void *)v75;
          *(_QWORD *)v474 = 0;
          if ((sub_1C61A6880((uint64_t)v439, v459, v474) & 1) != 0)
            goto LABEL_167;
          v76 = *(unsigned __int8 *)(v75 + 16) - 33;
          if (v76 > 0x37)
            goto LABEL_151;
          if (((1 << (*(_BYTE *)(v75 + 16) - 33)) & 0x8000000000041) != 0)
          {
            v85 = *(_QWORD *)(v75 + 64);
            if (!v85 || (*(_BYTE *)(v85 + 17) & 0x30) == 0)
            {
              v86 = *(_DWORD *)(v75 + 20);
              if (v86 < 0)
              {
                v110 = v75 - 32 * (v86 & 0x7FFFFFF);
                v113 = *(_QWORD *)(v110 - 8);
                v111 = v110 - 8;
                v112 = v113;
                if (v113)
                {
                  v114 = -v112;
                  do
                  {
                    v115 = *(_DWORD *)(*(_QWORD *)(v111 + v114) + 8);
                    v332 = v115 > 7;
                    v116 = (1 << v115) & 0x83;
                    if (v332 || v116 == 0)
                      goto LABEL_176;
                    v114 += 16;
                  }
                  while (v114);
                }
              }
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v75, 45) & 1) == 0
                && (llvm::CallBase::hasFnAttrOnCalledFunction(v75, 44) & 1) == 0)
              {
                goto LABEL_176;
              }
            }
LABEL_151:
            v77 = *(_DWORD *)(v75 + 20);
            if ((v77 & 0x40000000) != 0)
            {
              v79 = *(uint64_t **)(v75 - 8);
              v78 = v77 & 0x7FFFFFF;
            }
            else
            {
              v78 = v77 & 0x7FFFFFF;
              v79 = (uint64_t *)(v75 - 32 * v78);
            }
            if (v78)
            {
              v80 = 32 * v78;
              while (1)
              {
                if (*v79 && *(unsigned __int8 *)(*v79 + 16) >= 0x1Cu)
                {
                  v82 = sub_1C62ABE2C((uint64_t)v439, *v79);
                  v83 = &v439[8];
                  if ((v439[0] & 1) != 0)
                  {
                    v84 = 8;
                  }
                  else
                  {
                    v83 = *(_BYTE **)&v439[8];
                    v84 = *(_DWORD *)&v439[16];
                  }
                  if (&v83[8 * v84] != (_BYTE *)v82)
                    break;
                }
                v79 += 4;
                v80 -= 32;
                if (!v80)
                  goto LABEL_167;
              }
LABEL_224:
              v70 = 3;
              v21 = v409;
              goto LABEL_127;
            }
LABEL_167:
            v74 = (char *)*((_QWORD *)v74 + 1);
            if (v74 == v73)
            {
              v71 = v420;
              v72 = v421;
              goto LABEL_213;
            }
            continue;
          }
          break;
        }
        if (v76 == 27)
        {
          if ((*(_WORD *)(v75 + 18) & 0x301) == 0)
            goto LABEL_151;
        }
        else if (((1 << (*(_BYTE *)(v75 + 16) - 33)) & 0x808001D0000010) == 0)
        {
          goto LABEL_151;
        }
LABEL_176:
        v87 = *((_QWORD *)&v444 + 1);
        v88 = *(_QWORD *)(v75 + 40);
        v89 = *(_QWORD *)(*((_QWORD *)&v444 + 1) + 40);
        if (v88 == v89)
        {
          v90 = j;
          v91 = *(__int16 *)(v88 + 18);
          if ((v91 & 0x80000000) == 0)
          {
            v104 = *(_QWORD *)(v88 + 48);
            if (v104 != v88 + 40)
            {
              v105 = 0;
              do
              {
                v106 = v104 - 24;
                if (!v104)
                  v106 = 0;
                *(_DWORD *)(v106 + 56) = v105++;
                v104 = *(_QWORD *)(v104 + 8);
              }
              while (v104 != v88 + 40);
            }
            *(_WORD *)(v88 + 18) = v91 | 0x8000;
          }
          if (*(_DWORD *)(v75 + 56) < *(_DWORD *)(v87 + 56))
            goto LABEL_183;
        }
        v92 = *(_QWORD *)(v87 - 32);
        sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(v89 + 56) + 40) + 272, *(_QWORD *)v87);
        v95 = v94 == 1 ? -2 : (unint64_t)(v93 + 7) >> 3;
        llvm::Instruction::getAAMetadata((uint64_t ***)v87, &v474[16]);
        *(_QWORD *)v474 = v92;
        *(_QWORD *)&v474[8] = v95;
        v460 = *(int64x2_t *)&v474[16];
        v461 = *(int64x2_t *)&v474[32];
        *(_OWORD *)v459 = *(_OWORD *)v474;
        v462.i8[0] = 1;
        v90 = j;
        if ((sub_1C4D90C64(j, v75, (__int128 *)v459) & 2) == 0)
        {
LABEL_183:
          v96 = *((_QWORD *)&v448 + 1);
          v97 = *(_QWORD *)(v75 + 40);
          v98 = *(_QWORD *)(*((_QWORD *)&v448 + 1) + 40);
          if (v97 != v98)
            goto LABEL_187;
          v99 = *(__int16 *)(v97 + 18);
          if ((v99 & 0x80000000) == 0)
          {
            v107 = *(_QWORD *)(v97 + 48);
            if (v107 != v97 + 40)
            {
              v108 = 0;
              do
              {
                v109 = v107 - 24;
                if (!v107)
                  v109 = 0;
                *(_DWORD *)(v109 + 56) = v108++;
                v107 = *(_QWORD *)(v107 + 8);
              }
              while (v107 != v97 + 40);
            }
            *(_WORD *)(v97 + 18) = v99 | 0x8000;
          }
          if (*(_DWORD *)(v75 + 56) < *(_DWORD *)(v96 + 56))
          {
            j = v90;
            v12 = v396;
            v66 = v53;
          }
          else
          {
LABEL_187:
            v100 = *(_QWORD *)(v96 - 32);
            sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(v98 + 56) + 40) + 272, *(_QWORD *)v96);
            if (v102 == 1)
              v103 = -2;
            else
              v103 = (unint64_t)(v101 + 7) >> 3;
            llvm::Instruction::getAAMetadata((uint64_t ***)v96, &v474[16]);
            *(_QWORD *)v474 = v100;
            *(_QWORD *)&v474[8] = v103;
            v460 = *(int64x2_t *)&v474[16];
            v461 = *(int64x2_t *)&v474[32];
            *(_OWORD *)v459 = *(_OWORD *)v474;
            v462.i8[0] = 1;
            j = v90;
            v12 = v396;
            v66 = v53;
            if ((sub_1C4D90C64(v90, v75, (__int128 *)v459) & 2) != 0)
              goto LABEL_224;
          }
          goto LABEL_151;
        }
        v70 = 3;
        v12 = v396;
        v21 = v409;
        v66 = v53;
LABEL_127:
        if (v453)
        {
          if (v451 >= 0x41 && v450)
            MEMORY[0x1CAA32F9C](v450, 0x1000C8000313F17);
          if (v447 >= 0x41 && v446)
            MEMORY[0x1CAA32F9C](v446, 0x1000C8000313F17);
          if ((v439[0] & 1) == 0)
            MEMORY[0x1CAA32FB4](*(_QWORD *)&v439[8], 8);
        }
        if (v70 != 3 && v70)
          goto LABEL_628;
        v391 = 0;
        v393 = 0;
        v35 = v66 + 1;
        if (v35 == v414)
        {
          if (v420 != v421)
          {
            v381 = *v420;
            sub_1C5BCDAE0((uint64_t)v420, (unint64_t)v421, 126 - 2 * __clz(0xD37A6F4DE9BD37A7 * (v421 - v420)), 1);
            v356 = (const void **)v420;
            v357 = (const void **)v421;
            if (v420 != v421)
            {
              v358 = 0;
              v132 = 0;
              v131 = 0;
              v359 = 0;
              while (1)
              {
                v405 = v131;
                if (v358)
                {
                  v360 = v358[1];
                  if (*(_DWORD *)(v360 - 80) == *((_DWORD *)v356 + 26)
                    && *(_DWORD *)(v360 - 40) == *((_DWORD *)v356 + 36))
                  {
                    *(_DWORD *)v439 = *(_DWORD *)(v360 - 64);
                    v403 = v132;
                    if (*(_DWORD *)v439 > 0x40u)
                    {
                      __s1 = (void *)operator new[]();
                      memcpy(__s1, *(const void **)(v360 - 72), (((unint64_t)*(unsigned int *)v439 + 63) >> 3) & 0x3FFFFFF8);
                    }
                    else
                    {
                      __s1 = *(void **)(v360 - 72);
                    }
                    llvm::APInt::operator+=((uint64_t)&__s1, (uint64_t)(*(_DWORD *)(v360 - 16) + (*(int *)(v360 - 16) < 0 ? 7 : 0)) >> 3);
                    v371 = *(unsigned int *)v439;
                    v372 = __s1;
                    *(_DWORD *)v439 = 0;
                    if (v371 > 0x40)
                    {
                      if (!memcmp(__s1, v356[14], ((unint64_t)(v371 + 63) >> 3) & 0x3FFFFFF8))
                        goto LABEL_610;
                      v373 = 0;
                      v131 = v405;
                    }
                    else
                    {
                      if (__s1 != v356[14])
                      {
                        v373 = 0;
                        v131 = v405;
                        goto LABEL_623;
                      }
LABEL_610:
                      LODWORD(v459[1]) = *(_DWORD *)(v360 - 24);
                      if (LODWORD(v459[1]) > 0x40)
                      {
                        v459[0] = (void *)operator new[]();
                        memcpy(v459[0], *(const void **)(v360 - 32), (((unint64_t)LODWORD(v459[1]) + 63) >> 3) & 0x3FFFFFF8);
                      }
                      else
                      {
                        v459[0] = *(void **)(v360 - 32);
                      }
                      llvm::APInt::operator+=((uint64_t)v459, (uint64_t)(*(_DWORD *)(v360 - 16) + (*(int *)(v360 - 16) < 0 ? 7 : 0)) >> 3);
                      v374 = LODWORD(v459[1]);
                      v375 = v459[0];
                      LODWORD(v459[1]) = 0;
                      if (v374 <= 0x40)
                      {
                        v373 = v459[0] == v356[19];
                        goto LABEL_619;
                      }
                      v373 = memcmp(v459[0], v356[19], ((unint64_t)(v374 + 63) >> 3) & 0x3FFFFFF8) == 0;
                      if (v375 && (MEMORY[0x1CAA32F9C](v375, 0x1000C8000313F17), LODWORD(v459[1]) >= 0x41))
                      {
                        v131 = v405;
                        if (v459[0])
                          MEMORY[0x1CAA32F9C](v459[0], 0x1000C8000313F17);
                      }
                      else
                      {
LABEL_619:
                        v131 = v405;
                      }
                      if (v371 < 0x41)
                        goto LABEL_623;
                    }
                    if (v372)
                      MEMORY[0x1CAA32F9C](v372, 0x1000C8000313F17);
LABEL_623:
                    if (*(_DWORD *)v439 >= 0x41u && __s1)
                      MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
                    v132 = v403;
                    if (v373)
                      goto LABEL_602;
                    goto LABEL_586;
                  }
                  v131 = v405;
                }
LABEL_586:
                if (v131 >= v359)
                {
                  v361 = v132;
                  v362 = 0xAAAAAAAAAAAAAAABLL * (v131 - v132);
                  v363 = v362 + 1;
                  if (v362 + 1 > 0xAAAAAAAAAAAAAAALL)
                    abort();
                  if (0x5555555555555556 * (v359 - v361) > v363)
                    v363 = 0x5555555555555556 * (v359 - v361);
                  if (0xAAAAAAAAAAAAAAABLL * (v359 - v361) >= 0x555555555555555)
                    v363 = 0xAAAAAAAAAAAAAAALL;
                  if (v363 > 0xAAAAAAAAAAAAAAALL)
                    sub_1C4764EE4();
                  v364 = 3 * v363;
                  v365 = (char *)operator new(24 * v363);
                  v366 = (uint64_t *)&v365[24 * v362];
                  v366[1] = 0;
                  v366[2] = 0;
                  *v366 = 0;
                  v367 = v405;
                  v368 = v366;
                  if (v405 != v361)
                  {
                    do
                    {
                      *(v368 - 3) = 0;
                      *(v368 - 2) = 0;
                      v368 -= 3;
                      v368[2] = 0;
                      v369 = *(_OWORD *)(v367 - 3);
                      v367 -= 3;
                      *(_OWORD *)v368 = v369;
                      v368[2] = v367[2];
                      *v367 = 0;
                      v367[1] = 0;
                      v367[2] = 0;
                    }
                    while (v367 != v361);
                    v370 = (void **)v405;
                    do
                      v370 = sub_1C5BCD3C8(v370 - 3);
                    while (v370 != (void **)v361);
                  }
                  v359 = (uint64_t *)&v365[8 * v364];
                  v131 = v366 + 3;
                  if (v361)
                    operator delete(v361);
                  v132 = v368;
                }
                else
                {
                  *v131 = 0;
                  v131[1] = 0;
                  v131[2] = 0;
                  v131 += 3;
                }
                v358 = v131 - 3;
LABEL_602:
                sub_1C5BCD778((void **)v358, (uint64_t *)v356);
                v356 += 23;
                if (v356 == v357)
                  goto LABEL_631;
              }
            }
            v131 = 0;
            v132 = 0;
LABEL_631:
            v377 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v131 - v132));
            if (v131 == v132)
              v378 = 0;
            else
              v378 = v377;
            sub_1C5BD5740(v132, v131, v378, 1);
            v391 = 0;
            v393 = 0;
            v12 = v396;
            v21 = v409;
LABEL_245:
            MEMORY[0x1CAA32FB4](v417, 8);
            sub_1C5BCD3C8((void **)&v420);
            v133 = v132;
            if (v132 == v131)
            {
LABEL_248:
              LODWORD(v26) = 0;
              v16 = v387;
              goto LABEL_571;
            }
            while (0xD37A6F4DE9BD37A7 * ((v133[1] - *v133) >> 3) < 2)
            {
              v133 += 3;
              if (v133 == v131)
                goto LABEL_248;
            }
            v134 = (llvm::LLVMContext ***)*((_QWORD *)v21 + 5);
            v135 = v381;
            v136 = v131;
            v402 = v132;
            v404 = v131;
            while (2)
            {
              v138 = (uint64_t ****)*(v136 - 3);
              v137 = (uint64_t ****)*(v136 - 2);
              v139 = ((char *)v137 - (char *)v138) / 184;
              v411 = v139;
              v413 = **v134;
              __s1 = &v439[16];
              *(_OWORD *)v439 = xmmword_1C6612EE0;
              v140 = v134;
              v141 = v138;
              v407 = (char *)v137 - (char *)v138;
              v408 = v136 - 3;
              v406 = v137;
              if ((char *)v137 - (char *)v138 == 184)
              {
                v142 = *v138;
                if ((*((_BYTE *)*v138 + 23) & 0x10) != 0)
                {
                  v143 = ***v142;
                  v144 = *(_QWORD *)(v143 + 152);
                  v145 = *(unsigned int *)(v143 + 168);
                  if (!(_DWORD)v145)
                    goto LABEL_283;
                  LODWORD(v146) = (v145 - 1) & ((v142 >> 4) ^ (v142 >> 9));
                  v147 = (uint64_t ****)(v144 + 16 * v146);
                  v148 = *v147;
                  if (*v147 != v142)
                  {
                    v149 = 1;
                    while (v148 != (uint64_t ***)-4096)
                    {
                      v150 = v146 + v149++;
                      v146 = v150 & (v145 - 1);
                      v148 = *(uint64_t ****)(v144 + 16 * v146);
                      if (v148 == v142)
                      {
                        v147 = (uint64_t ****)(v144 + 16 * v146);
                        goto LABEL_284;
                      }
                    }
LABEL_283:
                    v147 = (uint64_t ****)(v144 + 16 * v145);
                  }
LABEL_284:
                  v176 = v147[1];
                  v177 = *v176;
                  v175 = (char *)(v176 + 2);
                  v174 = v177;
                }
                else
                {
                  v174 = 0;
                  v175 = &byte_1C871356D;
                }
LABEL_322:
                v440.i64[1] = (uint64_t)v175;
                v441.i64[0] = (uint64_t)v174;
                v461.i16[0] = 261;
                v459[0] = v175;
                v459[1] = v174;
                v415 = v140;
                v209 = v140[7];
                v210 = operator new();
                *(_QWORD *)v210 = *(_QWORD *)v413 + 1600;
                *(_QWORD *)(v210 + 8) = 0;
                v211 = *(_DWORD *)(v210 + 20) & 0xC0000000;
                *(_QWORD *)(v210 + 24) = 0;
                v212 = v210 + 24;
                *(_DWORD *)(v210 + 16) = 22;
                *(_DWORD *)(v210 + 20) = v211;
                *(_QWORD *)(v210 + 32) = 0;
                *(_QWORD *)(v210 + 40) = v210 + 40;
                *(_QWORD *)(v210 + 48) = v210 + 40;
                *(_QWORD *)(v210 + 56) = 0;
                if (v209)
                {
                  v213 = (uint64_t)(v209 + 9);
                  if (v135)
                    v214 = (uint64_t *)((char *)v135 + 24);
                  else
                    v214 = (uint64_t *)(v209 + 9);
                  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v213, (_QWORD *)v210);
                  v215 = *v214;
                  *(_QWORD *)(v210 + 24) = *v214;
                  *(_QWORD *)(v210 + 32) = v214;
                  *(_QWORD *)(v215 + 8) = v212;
                  *v214 = v212;
                }
                llvm::Value::setName((uint64_t ***)v210, (uint64_t)v459);
                if (__s1 != &v439[16])
                  free(__s1);
                v216 = **(_QWORD **)v210;
                __s1 = &v439[8];
                *(_QWORD *)v439 = 0x200000000;
                v442.i64[0] = v216;
                v442.i64[1] = (uint64_t)&v447;
                v443 = &v448;
                *(_QWORD *)&v444 = 0;
                DWORD2(v444) = 0;
                WORD6(v444) = 512;
                BYTE14(v444) = 7;
                v445 = 0;
                v446 = 0;
                v447 = &unk_1E8167888;
                *(_QWORD *)&v448 = &unk_1E8167A08;
                v441.i64[0] = v210;
                v441.i64[1] = v210 + 40;
                v217 = (llvm::Instruction *)v141[11];
                if (v217)
                {
                  llvm::Instruction::clone(v217);
                  v219 = v218;
                  v461.i16[0] = 257;
                  (*(void (**)(__int128 *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v443 + 16))(v443, v218, v459, v441.i64[0], v441.i64[1]);
                  if (*(_DWORD *)v439)
                  {
                    v220 = (char *)__s1;
                    v221 = (char *)__s1 + 16 * *(unsigned int *)v439;
                    v222 = (unsigned __int8 **)(v219 + 48);
                    do
                    {
                      v223 = *(_DWORD *)v220;
                      v224 = (unsigned __int8 *)*((_QWORD *)v220 + 1);
                      if (v224)
                      {
                        if (!v223)
                        {
                          *(_QWORD *)v474 = *((_QWORD *)v220 + 1);
                          llvm::MetadataTracking::track((uint64_t)v474, v224, 2);
LABEL_342:
                          if (v474 == (_BYTE *)v222)
                          {
                            if (*(_QWORD *)v474)
                              llvm::MetadataTracking::untrack((uint64_t)v474, *(unsigned __int8 **)v474);
                          }
                          else
                          {
                            if (*v222)
                              llvm::MetadataTracking::untrack(v219 + 48, *v222);
                            v225 = *(unsigned __int8 **)v474;
                            *v222 = *(unsigned __int8 **)v474;
                            if (v225)
                              llvm::MetadataTracking::retrack((uint64_t)v474, v225, v219 + 48);
                          }
                          goto LABEL_339;
                        }
                      }
                      else
                      {
                        if (!*v222 && (*(_BYTE *)(v219 + 23) & 0x20) == 0)
                          goto LABEL_339;
                        if (!v223)
                        {
                          *(_QWORD *)v474 = 0;
                          goto LABEL_342;
                        }
                      }
                      llvm::Value::setMetadata((llvm::Value *)v219, v223, (llvm::MDNode *)v224);
LABEL_339:
                      v220 += 16;
                    }
                    while (v220 != v221);
                  }
                  v226 = v141;
                  v139 = v411;
                }
                else
                {
                  v226 = v141;
                  v219 = (uint64_t)*(v141[12] - 4);
                }
                v227 = (llvm::Instruction *)v226[16];
                if (v227)
                {
                  llvm::Instruction::clone(v227);
                  v229 = v228;
                  v461.i16[0] = 257;
                  (*(void (**)(__int128 *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v443 + 16))(v443, v228, v459, v441.i64[0], v441.i64[1]);
                  if (*(_DWORD *)v439)
                  {
                    v230 = (char *)__s1;
                    v231 = (char *)__s1 + 16 * *(unsigned int *)v439;
                    v232 = (unsigned __int8 **)(v229 + 48);
                    do
                    {
                      v233 = *(_DWORD *)v230;
                      v234 = (unsigned __int8 *)*((_QWORD *)v230 + 1);
                      if (v234)
                      {
                        if (!v233)
                        {
                          *(_QWORD *)v474 = *((_QWORD *)v230 + 1);
                          llvm::MetadataTracking::track((uint64_t)v474, v234, 2);
LABEL_364:
                          if (v474 == (_BYTE *)v232)
                          {
                            if (*(_QWORD *)v474)
                              llvm::MetadataTracking::untrack((uint64_t)v474, *(unsigned __int8 **)v474);
                          }
                          else
                          {
                            if (*v232)
                              llvm::MetadataTracking::untrack(v229 + 48, *v232);
                            v235 = *(unsigned __int8 **)v474;
                            *v232 = *(unsigned __int8 **)v474;
                            if (v235)
                              llvm::MetadataTracking::retrack((uint64_t)v474, v235, v229 + 48);
                          }
                          goto LABEL_361;
                        }
                      }
                      else
                      {
                        if (!*v232 && (*(_BYTE *)(v229 + 23) & 0x20) == 0)
                          goto LABEL_361;
                        if (!v233)
                        {
                          *(_QWORD *)v474 = 0;
                          goto LABEL_364;
                        }
                      }
                      llvm::Value::setMetadata((llvm::Value *)v229, v233, (llvm::MDNode *)v234);
LABEL_361:
                      v230 += 16;
                    }
                    while (v230 != v231);
                  }
                  v226 = v141;
                  v139 = v411;
                }
                else
                {
                  v229 = (uint64_t)*(v226[17] - 4);
                }
                if (v406 == v226)
                {
                  if (v407 == 184)
                    goto LABEL_397;
                  v239 = 0;
                }
                else
                {
                  v236 = 184 * v139;
                  v237 = 184 * v139;
                  v238 = v226;
                  while (!*((_BYTE *)v238 + 80))
                  {
                    v238 += 23;
                    v237 -= 184;
                    if (!v237)
                      goto LABEL_396;
                  }
                  v459[0] = &v460;
                  v459[1] = (void *)0x400000000;
                  v240 = (uint64_t)(*v238 + 5);
                  v241 = (*v238)[6];
                  if (v241 != (uint64_t **)v240)
                  {
                    v242 = (uint64_t)(v238 + 1);
                    do
                    {
                      if (v241)
                        v243 = (uint64_t)(v241 - 3);
                      else
                        v243 = 0;
                      *(_QWORD *)v474 = v243;
                      v454 = 0;
                      if ((sub_1C61A6880(v242, v474, &v454) & 1) == 0)
                      {
                        v244 = LODWORD(v459[1]);
                        if (LODWORD(v459[1]) >= (unint64_t)HIDWORD(v459[1]))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v459, (uint64_t)&v460, LODWORD(v459[1]) + 1, 8);
                          v244 = LODWORD(v459[1]);
                        }
                        *((_QWORD *)v459[0] + v244) = v243;
                        ++LODWORD(v459[1]);
                      }
                      v241 = (uint64_t **)v241[1];
                    }
                    while (v241 != (uint64_t **)v240);
                    v245 = (int64x2_t *)v459[0];
                    if (LODWORD(v459[1]))
                    {
                      v246 = 8 * LODWORD(v459[1]);
                      v247 = (char *)v459[0] - 8;
                      do
                      {
                        llvm::Instruction::moveBefore(*(_QWORD **)&v247[v246], v210, *(uint64_t **)(v210 + 48));
                        v246 -= 8;
                      }
                      while (v246);
                      v245 = (int64x2_t *)v459[0];
                    }
                    v226 = v141;
                    if (v245 != &v460)
                    {
                      free(v245);
                      v226 = v141;
                    }
                  }
LABEL_396:
                  if (v407 == 184)
                  {
LABEL_397:
                    v248 = (uint64_t)*v226[12];
                    *(_WORD *)&v474[32] = 257;
                    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v441.i64[0] + 56) + 40) + 272, v248);
                    v250 = v249;
                    v251 = (char *)operator new(0x60uLL);
                    v252 = v251;
                    v253 = (llvm::Value *)(v251 + 32);
                    *((_QWORD *)v251 + 2) = 0;
                    *((_QWORD *)v251 + 3) = v251 + 32;
                    v461.i16[0] = 257;
                    *((_QWORD *)v251 + 4) = v248;
                    *((_QWORD *)v251 + 5) = 0;
                    *((_WORD *)v251 + 24) = 60;
                    *((_DWORD *)v251 + 13) = 1;
                    *(_OWORD *)(v251 + 56) = 0u;
                    *(_OWORD *)(v251 + 72) = 0u;
                    *((_DWORD *)v251 + 22) = 0;
                    *(_QWORD *)v251 = v219;
                    *((_QWORD *)v251 + 1) = 0;
                    if (v219)
                    {
                      v256 = *(_QWORD *)(v219 + 8);
                      v255 = (_QWORD *)(v219 + 8);
                      v254 = v256;
                      *((_QWORD *)v251 + 1) = v256;
                      if (v256)
                        *(_QWORD *)(v254 + 16) = v251 + 8;
                      *((_QWORD *)v251 + 2) = v255;
                      *v255 = v251;
                    }
                    *((_WORD *)v251 + 25) = 2 * (v250 & 0x3F);
                    v251[92] = 1;
                    llvm::Value::setName((uint64_t ***)v251 + 4, (uint64_t)v459);
                    (*(void (**)(__int128 *, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v443 + 16))(v443, v253, v474, v441.i64[0], v441.i64[1]);
                    if (!*(_DWORD *)v439)
                    {
LABEL_402:
                      v257 = (uint64_t)*v141[17];
                      *(_WORD *)&v474[32] = 257;
                      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v441.i64[0] + 56) + 40) + 272, v257);
                      v259 = v258;
                      v260 = (char *)operator new(0x60uLL);
                      v261 = v260;
                      v262 = (llvm::Value *)(v260 + 32);
                      *((_QWORD *)v260 + 2) = 0;
                      *((_QWORD *)v260 + 3) = v260 + 32;
                      v461.i16[0] = 257;
                      *((_QWORD *)v260 + 4) = v257;
                      *((_QWORD *)v260 + 5) = 0;
                      *((_WORD *)v260 + 24) = 60;
                      *((_DWORD *)v260 + 13) = 1;
                      *(_OWORD *)(v260 + 56) = 0u;
                      *(_OWORD *)(v260 + 72) = 0u;
                      *((_DWORD *)v260 + 22) = 0;
                      *(_QWORD *)v260 = v229;
                      *((_QWORD *)v260 + 1) = 0;
                      if (v229)
                      {
                        v265 = *(_QWORD *)(v229 + 8);
                        v264 = (_QWORD *)(v229 + 8);
                        v263 = v265;
                        *((_QWORD *)v260 + 1) = v265;
                        if (v265)
                          *(_QWORD *)(v263 + 16) = v260 + 8;
                        *((_QWORD *)v260 + 2) = v264;
                        *v264 = v260;
                      }
                      *((_WORD *)v260 + 25) = 2 * (v259 & 0x3F);
                      v260[92] = 1;
                      llvm::Value::setName((uint64_t ***)v260 + 4, (uint64_t)v459);
                      (*(void (**)(__int128 *, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v443 + 16))(v443, v262, v474, v441.i64[0], v441.i64[1]);
                      if (!*(_DWORD *)v439)
                      {
LABEL_407:
                        v461.i16[0] = 257;
                        v266 = (llvm::Value *)sub_1C4774B48((uint64_t)&__s1, 32, (uint64_t)v253, (uint64_t)v262, (uint64_t)v459);
                        v267 = v409;
                        v268 = (llvm::BasicBlock *)v415;
                        goto LABEL_408;
                      }
                      v305 = (char *)__s1;
                      v306 = (char *)__s1 + 16 * *(unsigned int *)v439;
                      v307 = (unsigned __int8 **)(v261 + 80);
                      while (2)
                      {
                        v308 = *(_DWORD *)v305;
                        v309 = (unsigned __int8 *)*((_QWORD *)v305 + 1);
                        if (v309)
                        {
                          if (v308)
                            goto LABEL_473;
                          v454 = *((_QWORD *)v305 + 1);
                          llvm::MetadataTracking::track((uint64_t)&v454, v309, 2);
                          v310 = *v307;
LABEL_477:
                          if (v310)
                            llvm::MetadataTracking::untrack((uint64_t)(v261 + 80), v310);
                          v311 = (unsigned __int8 *)v454;
                          *v307 = (unsigned __int8 *)v454;
                          if (v311)
                            llvm::MetadataTracking::retrack((uint64_t)&v454, v311, (uint64_t)(v261 + 80));
                        }
                        else
                        {
                          v310 = *v307;
                          if (*v307 || (v261[55] & 0x20) != 0)
                          {
                            if (!v308)
                            {
                              v454 = 0;
                              goto LABEL_477;
                            }
LABEL_473:
                            llvm::Value::setMetadata(v262, *(_DWORD *)v305, (llvm::MDNode *)v309);
                          }
                        }
                        v305 += 16;
                        if (v305 == v306)
                          goto LABEL_407;
                        continue;
                      }
                    }
                    v298 = (char *)__s1;
                    v299 = (char *)__s1 + 16 * *(unsigned int *)v439;
                    v300 = (unsigned __int8 **)(v252 + 80);
                    while (2)
                    {
                      v301 = *(_DWORD *)v298;
                      v302 = (unsigned __int8 *)*((_QWORD *)v298 + 1);
                      if (v302)
                      {
                        if (v301)
                          goto LABEL_458;
                        v454 = *((_QWORD *)v298 + 1);
                        llvm::MetadataTracking::track((uint64_t)&v454, v302, 2);
                        v303 = *v300;
LABEL_462:
                        if (v303)
                          llvm::MetadataTracking::untrack((uint64_t)(v252 + 80), v303);
                        v304 = (unsigned __int8 *)v454;
                        *v300 = (unsigned __int8 *)v454;
                        if (v304)
                          llvm::MetadataTracking::retrack((uint64_t)&v454, v304, (uint64_t)(v252 + 80));
                      }
                      else
                      {
                        v303 = *v300;
                        if (*v300 || (v252[55] & 0x20) != 0)
                        {
                          if (!v301)
                          {
                            v454 = 0;
                            goto LABEL_462;
                          }
LABEL_458:
                          llvm::Value::setMetadata(v253, *(_DWORD *)v298, (llvm::MDNode *)v302);
                        }
                      }
                      v298 += 16;
                      if (v298 == v299)
                        goto LABEL_402;
                      continue;
                    }
                  }
                  v239 = 0;
                  v312 = (int *)(v226 + 21);
                  do
                  {
                    v313 = *v312;
                    v312 += 46;
                    v239 += v313;
                    v236 -= 184;
                  }
                  while (v236);
                }
                v267 = v409;
                v314 = (llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v409 + 5) + 56) + 40) + 272);
                IntPtrType = llvm::DataLayout::getIntPtrType(v314, v413, 0);
                v317 = v239 >> 3;
                v318 = (llvm::ConstantInt *)*IntPtrType;
                v319 = *((_DWORD *)IntPtrType + 2);
                LODWORD(v459[1]) = v319 >> 8;
                if (v319 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)v459, v317, 0);
                }
                else
                {
                  if (v319 <= 0xFF)
                    v320 = 0;
                  else
                    v320 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v319);
                  v459[0] = (void *)(v320 & v317);
                }
                v321 = llvm::ConstantInt::get(v318, (llvm::LLVMContext *)v459, v316);
                if (LODWORD(v459[1]) >= 0x41 && v459[0])
                  MEMORY[0x1CAA32F9C](v459[0], 0x1000C8000313F17);
                v323 = llvm::emitMemCmp((llvm *)v219, (llvm *)v229, (uint64_t)v321, (uint64_t)&__s1, v314, v397);
                v324 = *(llvm::ConstantInt **)(*(_QWORD *)v413 + 1960);
                LODWORD(v459[1]) = *(_DWORD *)(*(_QWORD *)v413 + 1968) >> 8;
                if (LODWORD(v459[1]) > 0x40)
                  llvm::APInt::initSlowCase((llvm::APInt *)v459, 0, 0);
                else
                  v459[0] = 0;
                v268 = (llvm::BasicBlock *)v415;
                v325 = llvm::ConstantInt::get(v324, (llvm::LLVMContext *)v459, v322);
                if (LODWORD(v459[1]) >= 0x41 && v459[0])
                  MEMORY[0x1CAA32F9C](v459[0], 0x1000C8000313F17);
                v461.i16[0] = 257;
                v266 = (llvm::Value *)sub_1C4774B48((uint64_t)&__s1, 32, v323, (uint64_t)v325, (uint64_t)v459);
LABEL_408:
                v269 = (llvm::BasicBlock *)*((_QWORD *)v267 + 5);
                if (v269 != v268)
                {
                  v270 = operator new(0xA0uLL);
                  v271 = v270;
                  v272 = 0;
                  v273 = (llvm::Value *)(v270 + 24);
                  v270[29] = v270[29] & 0x38000000 | 3;
                  do
                  {
                    v274 = &v270[v272];
                    *v274 = 0;
                    v274[1] = 0;
                    v274[2] = 0;
                    v274[3] = v273;
                    v272 += 8;
                  }
                  while (v272 != 24);
                  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v270 + 24), v268, v269, v266, 0);
                  v461.i16[0] = 257;
                  (*(void (**)(__int128 *, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v443 + 16))(v443, v273, v459, v441.i64[0], v441.i64[1]);
                  if (*(_DWORD *)v439)
                  {
                    v276 = (char *)__s1;
                    v277 = (char *)__s1 + 16 * *(unsigned int *)v439;
                    v278 = (unsigned __int8 **)(v271 + 36);
                    do
                    {
                      v279 = *(_DWORD *)v276;
                      v275 = (unsigned __int8 *)*((_QWORD *)v276 + 1);
                      if (v275)
                      {
                        if (!v279)
                        {
                          *(_QWORD *)v474 = *((_QWORD *)v276 + 1);
                          llvm::MetadataTracking::track((uint64_t)v474, v275, 2);
                          v280 = *v278;
                          if (!*v278)
                          {
LABEL_424:
                            v281 = *(unsigned __int8 **)v474;
                            *v278 = *(unsigned __int8 **)v474;
                            if (v281)
                              llvm::MetadataTracking::retrack((uint64_t)v474, v281, (uint64_t)(v271 + 36));
                            goto LABEL_421;
                          }
LABEL_418:
                          llvm::MetadataTracking::untrack((uint64_t)(v271 + 36), v280);
                          goto LABEL_424;
                        }
                      }
                      else
                      {
                        v280 = *v278;
                        if (!*v278 && (*((_BYTE *)v271 + 119) & 0x20) == 0)
                          goto LABEL_421;
                        if (!v279)
                        {
                          *(_QWORD *)v474 = 0;
                          if (!v280)
                            goto LABEL_424;
                          goto LABEL_418;
                        }
                      }
                      llvm::Value::setMetadata(v273, *(_DWORD *)v276, (llvm::MDNode *)v275);
LABEL_421:
                      v276 += 16;
                    }
                    while (v276 != v277);
                  }
                  v282 = *(_QWORD *)v413;
                  v283 = *(llvm::ValueHandleBase **)(*(_QWORD *)v413 + 1568);
                  if (!v283)
                  {
                    v326 = *(llvm::ConstantInt **)(v282 + 1888);
                    LODWORD(v459[1]) = *(_DWORD *)(v282 + 1896) >> 8;
                    if (LODWORD(v459[1]) > 0x40)
                      llvm::APInt::initSlowCase((llvm::APInt *)v459, 0, 0);
                    else
                      v459[0] = 0;
                    v283 = llvm::ConstantInt::get(v326, (llvm::LLVMContext *)v459, (const llvm::APInt *)v275);
                    if (LODWORD(v459[1]) >= 0x41 && v459[0])
                      MEMORY[0x1CAA32F9C](v459[0], 0x1000C8000313F17);
                    *(_QWORD *)(v282 + 1568) = v283;
                  }
                  sub_1C477667C(v409, (uint64_t)v283, v210);
                  v459[0] = (void *)v210;
                  v459[1] = (void *)((unint64_t)v415 & 0xFFFFFFFFFFFFFFFBLL);
                  v460.i64[0] = v210;
                  v460.i64[1] = (unint64_t)v269 & 0xFFFFFFFFFFFFFFFBLL;
                  llvm::DomTreeUpdater::applyUpdates((uint64_t)&v424, (unint64_t *)v459, 2);
LABEL_447:
                  v136 = v408;
                  v297 = v402;
                  if (__s1 != &v439[8])
                    free(__s1);
                  v135 = (llvm::Value *)v210;
                  v134 = (llvm::LLVMContext ***)v210;
                  if (v408 != v402)
                    continue;
                  v327 = *((_QWORD *)v381 + 1);
                  for (j = v384; v327; v297 = v402)
                  {
                    v328 = v327;
                    while (1)
                    {
                      v329 = *(_QWORD *)(v328 + 24);
                      v330 = *(unsigned __int8 *)(v329 + 16);
                      v331 = v329 && v330 >= 0x1C;
                      v332 = !v331 || v330 - 29 > 0xA;
                      if (!v332)
                        break;
                      v328 = *(_QWORD *)(v328 + 8);
                      if (!v328)
                        goto LABEL_546;
                    }
                    v333 = *(_QWORD *)(v327 + 24);
                    v334 = *(unsigned __int8 *)(v333 + 16);
                    if (v333)
                      v335 = v334 >= 0x1C;
                    else
                      v335 = 0;
                    if (!v335 || v334 - 29 >= 0xB)
                    {
                      do
                      {
                        v327 = *(_QWORD *)(v327 + 8);
                        v333 = *(_QWORD *)(v327 + 24);
                        v337 = *(unsigned __int8 *)(v333 + 16);
                        if (v333)
                          v338 = v337 >= 0x1C;
                        else
                          v338 = 0;
                      }
                      while (!v338 || v337 - 29 > 0xA);
                    }
                    v340 = *(_QWORD **)(v333 + 40);
                    v341 = (_QWORD *)v340[5];
                    if (v341 == v340 + 5)
                    {
                      v343 = 0;
                    }
                    else
                    {
                      if (v341)
                        v342 = (unsigned __int8 *)(v341 - 3);
                      else
                        v342 = 0;
                      if (v342[16] - 29 >= 0xB)
                        v343 = 0;
                      else
                        v343 = (llvm::User *)v342;
                    }
                    llvm::User::replaceUsesOfWith(v343, v381, (llvm::Value *)v210);
                    __s1 = v340;
                    *(_QWORD *)v439 = (unint64_t)v381 | 4;
                    *(_QWORD *)&v439[8] = v340;
                    *(_QWORD *)&v439[16] = v210 & 0xFFFFFFFFFFFFFFFBLL;
                    llvm::DomTreeUpdater::applyUpdates((uint64_t)&v424, (unint64_t *)&__s1, 2);
                    v327 = *((_QWORD *)v381 + 1);
                  }
LABEL_546:
                  v344 = *(_QWORD *)(*((_QWORD *)v381 + 7) + 80);
                  if (v344)
                    v345 = (llvm::Value *)(v344 - 24);
                  else
                    v345 = 0;
                  if (v345 == v381 && v428 != 0)
                  {
                    DomTree = llvm::DomTreeUpdater::getDomTree((llvm::DomTreeUpdater *)&v424);
                    llvm::DominatorTreeBase<llvm::BasicBlock,false>::setNewRoot(DomTree, v210);
                    __s1 = (void *)v210;
                    *(_QWORD *)v439 = (unint64_t)v381 | 4;
                    llvm::DomTreeUpdater::applyUpdates((uint64_t)&v424, (unint64_t *)&__s1, 1);
                  }
                  v347 = 0;
                  __s1 = v387;
                  *(_QWORD *)v439 = 0x1000000000;
                  v348 = v297;
                  do
                  {
                    v349 = (uint64_t *)*v348;
                    v350 = (uint64_t *)v348[1];
                    while (v349 != v350)
                    {
                      v351 = *v349;
                      if (v347 >= *(_DWORD *)&v439[4])
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v387, v347 + 1, 8);
                        v347 = *(_DWORD *)v439;
                      }
                      *((_QWORD *)__s1 + v347) = v351;
                      v347 = ++*(_DWORD *)v439;
                      v349 += 23;
                    }
                    v348 += 3;
                  }
                  while (v348 != v404);
                  v352 = (llvm::BasicBlock **)__s1;
                  v459[0] = &v460;
                  v459[1] = (void *)0x400000000;
                  llvm::detachDeadBlocks(__s1, (llvm::Type *)v347, (uint64_t)v459, 0);
                  llvm::DomTreeUpdater::applyUpdates((uint64_t)&v424, (unint64_t *)v459[0], LODWORD(v459[1]));
                  if (v347)
                  {
                    v353 = 8 * v347;
                    do
                    {
                      v354 = *v352++;
                      llvm::DomTreeUpdater::deleteBB((llvm::DomTreeUpdater *)&v424, v354);
                      v353 -= 8;
                    }
                    while (v353);
                  }
                  v16 = v387;
                  if (v459[0] != &v460)
                    free(v459[0]);
                  v12 = v396;
                  v132 = v402;
                  v355 = (void **)v404;
                  do
                    v355 = sub_1C5BCD3C8(v355 - 3);
                  while (v355 != (void **)v402);
                  if (__s1 != v387)
                    free(__s1);
                  LODWORD(v26) = 1;
                  v131 = v402;
LABEL_571:
                  if (v132)
                  {
                    while (v131 != v132)
                    {
                      v131 -= 3;
                      sub_1C5BCD3C8((void **)v131);
                    }
                    operator delete(v132);
                  }
LABEL_575:
                  operator delete(__p);
                  goto LABEL_576;
                }
                v284 = (char *)operator new(0x60uLL);
                v285 = v284;
                *((_DWORD *)v284 + 13) = *((_DWORD *)v284 + 13) & 0x38000000 | 1;
                *(_QWORD *)v284 = 0;
                *((_QWORD *)v284 + 2) = 0;
                *((_QWORD *)v284 + 1) = 0;
                *((_QWORD *)v284 + 4) = ***(_QWORD ***)v268 + 1576;
                v286 = (llvm::Value *)(v284 + 32);
                *((_QWORD *)v284 + 3) = v284 + 32;
                *((_QWORD *)v284 + 5) = 0;
                v284[48] = 30;
                v284[49] = 0;
                *((_WORD *)v284 + 25) = 0;
                *((_DWORD *)v284 + 13) = 1;
                *(_OWORD *)(v284 + 56) = 0u;
                *(_OWORD *)(v284 + 72) = 0u;
                *((_DWORD *)v284 + 22) = 0;
                *(_QWORD *)v284 = v268;
                v289 = *((_QWORD *)v268 + 1);
                v288 = (_QWORD *)((char *)v268 + 8);
                v287 = v289;
                *((_QWORD *)v284 + 1) = v289;
                if (v289)
                  *(_QWORD *)(v287 + 16) = v284 + 8;
                *((_QWORD *)v284 + 2) = v288;
                *v288 = v284;
                v461.i16[0] = 257;
                (*(void (**)(__int128 *, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v443 + 16))(v443, v286, v459, v441.i64[0], v441.i64[1]);
                if (!*(_DWORD *)v439)
                {
LABEL_446:
                  sub_1C477667C(v409, (uint64_t)v266, v210);
                  v459[0] = (void *)v210;
                  v459[1] = (void *)((unint64_t)v415 & 0xFFFFFFFFFFFFFFFBLL);
                  llvm::DomTreeUpdater::applyUpdates((uint64_t)&v424, (unint64_t *)v459, 1);
                  goto LABEL_447;
                }
                v290 = (char *)__s1;
                v291 = (char *)__s1 + 16 * *(unsigned int *)v439;
                v292 = (unsigned __int8 **)(v285 + 80);
                while (2)
                {
                  v293 = *(_DWORD *)v290;
                  v294 = (unsigned __int8 *)*((_QWORD *)v290 + 1);
                  if (v294)
                  {
                    if (v293)
                      goto LABEL_438;
                    *(_QWORD *)v474 = *((_QWORD *)v290 + 1);
                    llvm::MetadataTracking::track((uint64_t)v474, v294, 2);
                    v295 = *v292;
LABEL_442:
                    if (v295)
                      llvm::MetadataTracking::untrack((uint64_t)(v285 + 80), v295);
                    v296 = *(unsigned __int8 **)v474;
                    *v292 = *(unsigned __int8 **)v474;
                    if (v296)
                      llvm::MetadataTracking::retrack((uint64_t)v474, v296, (uint64_t)(v285 + 80));
                  }
                  else
                  {
                    v295 = *v292;
                    if (*v292 || (v285[55] & 0x20) != 0)
                    {
                      if (!v293)
                      {
                        *(_QWORD *)v474 = 0;
                        goto LABEL_442;
                      }
LABEL_438:
                      llvm::Value::setMetadata(v286, *(_DWORD *)v290, (llvm::MDNode *)v294);
                    }
                  }
                  v290 += 16;
                  if (v290 == v291)
                    goto LABEL_446;
                  continue;
                }
              }
              break;
            }
            if (v137 == v138)
              goto LABEL_282;
            v151 = 0;
            v152 = &v138[23 * v139];
            v153 = v138;
            while (2)
            {
              v154 = *v153;
              if ((*((_BYTE *)*v153 + 23) & 0x10) != 0)
              {
                v155 = ***v154;
                v156 = *(_QWORD *)(v155 + 152);
                v157 = *(unsigned int *)(v155 + 168);
                if (!(_DWORD)v157)
                  goto LABEL_267;
                LODWORD(v158) = (v157 - 1) & ((v154 >> 4) ^ (v154 >> 9));
                v159 = v156 + 16 * v158;
                v160 = *(uint64_t ****)v159;
                if (*(uint64_t ****)v159 != v154)
                {
                  v161 = 1;
                  while (v160 != (uint64_t ***)-4096)
                  {
                    v162 = v158 + v161++;
                    v158 = v162 & (v157 - 1);
                    v160 = *(uint64_t ****)(v156 + 16 * v158);
                    if (v160 == v154)
                    {
                      v159 = v156 + 16 * v158;
                      goto LABEL_268;
                    }
                  }
LABEL_267:
                  v159 = v156 + 16 * v157;
                }
LABEL_268:
                v163 = **(_QWORD **)(v159 + 8);
              }
              else
              {
                LODWORD(v163) = 0;
              }
              v151 += v163;
              v153 += 23;
              if (v153 == v152)
              {
                if (v151)
                {
                  v164 = v139 + v151 - 1;
                  if (v164 >= 0x11)
                    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__s1, &v439[16], v164, 1);
                  v165 = *v141;
                  if ((*((_BYTE *)*v141 + 23) & 0x10) != 0)
                  {
                    v166 = ***v165;
                    v167 = *(_QWORD *)(v166 + 152);
                    v168 = *(unsigned int *)(v166 + 168);
                    if (!(_DWORD)v168)
                      goto LABEL_285;
                    LODWORD(v169) = (v168 - 1) & ((v165 >> 4) ^ (v165 >> 9));
                    v170 = (uint64_t ****)(v167 + 16 * v169);
                    v171 = *v170;
                    if (*v170 != v165)
                    {
                      v172 = 1;
                      while (v171 != (uint64_t ***)-4096)
                      {
                        v173 = v169 + v172++;
                        v169 = v173 & (v168 - 1);
                        v171 = *(uint64_t ****)(v167 + 16 * v169);
                        if (v171 == v165)
                        {
                          v170 = (uint64_t ****)(v167 + 16 * v169);
                          goto LABEL_286;
                        }
                      }
LABEL_285:
                      v170 = (uint64_t ****)(v167 + 16 * v168);
                    }
LABEL_286:
                    v178 = v170[1];
                    v181 = (size_t)*v178;
                    v180 = (char *)(v178 + 2);
                    v179 = v181;
                  }
                  else
                  {
                    v179 = 0;
                    v180 = &byte_1C871356D;
                  }
                  v182 = *(_QWORD *)v439;
                  if (*(_QWORD *)&v439[8] < *(_QWORD *)v439 + v179)
                  {
                    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__s1, &v439[16], *(_QWORD *)v439 + v179, 1);
                    v182 = *(_QWORD *)v439;
                    if (v179)
                    {
LABEL_289:
                      memcpy((char *)__s1 + v182, v180, v179);
                      v182 = *(_QWORD *)v439;
                    }
                  }
                  else if (v179)
                  {
                    goto LABEL_289;
                  }
                  v174 = (uint64_t **)(v182 + v179);
                  *(_QWORD *)v439 = v174;
                  if ((int)v139 < 2)
                  {
LABEL_321:
                    v175 = (char *)__s1;
                    v139 = v411;
                    goto LABEL_322;
                  }
                  v183 = v141;
                  v184 = v139;
                  v185 = 1;
                  while (2)
                  {
                    v186 = v183[23 * v185];
                    if ((*((_BYTE *)v186 + 23) & 0x10) != 0)
                    {
                      v187 = ***v186;
                      v188 = *(_QWORD *)(v187 + 152);
                      v189 = *(unsigned int *)(v187 + 168);
                      v190 = v186 >> 4;
                      if (!(_DWORD)v189)
                        goto LABEL_299;
                      LODWORD(v191) = (v189 - 1) & (v190 ^ (v186 >> 9));
                      v192 = v188 + 16 * v191;
                      v193 = *(uint64_t ****)v192;
                      if (*(uint64_t ****)v192 != v186)
                      {
                        v194 = 1;
                        while (v193 != (uint64_t ***)-4096)
                        {
                          v195 = v191 + v194++;
                          v191 = v195 & (v189 - 1);
                          v193 = *(uint64_t ****)(v188 + 16 * v191);
                          if (v193 == v186)
                          {
                            v192 = v188 + 16 * v191;
                            goto LABEL_300;
                          }
                        }
LABEL_299:
                        v192 = v188 + 16 * v189;
                      }
LABEL_300:
                      if (**(_QWORD **)(v192 + 8))
                      {
                        if (*(_QWORD *)&v439[8] < (unint64_t)v174 + 1)
                        {
                          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__s1, &v439[16], (unint64_t)v174 + 1, 1);
                          v174 = *(uint64_t ***)v439;
                        }
                        *((_BYTE *)v174 + (_QWORD)__s1) = 43;
                        v196 = ++*(_QWORD *)v439;
                        if ((*((_BYTE *)v186 + 23) & 0x10) != 0)
                        {
                          v197 = ***v186;
                          v198 = *(_QWORD *)(v197 + 152);
                          v199 = *(unsigned int *)(v197 + 168);
                          if (!(_DWORD)v199)
                            goto LABEL_310;
                          LODWORD(v200) = (v199 - 1) & (v190 ^ (v186 >> 9));
                          v201 = (uint64_t ****)(v198 + 16 * v200);
                          v202 = *v201;
                          if (*v201 != v186)
                          {
                            v203 = 1;
                            while (v202 != (uint64_t ***)-4096)
                            {
                              v204 = v200 + v203++;
                              v200 = v204 & (v199 - 1);
                              v202 = *(uint64_t ****)(v198 + 16 * v200);
                              if (v202 == v186)
                              {
                                v201 = (uint64_t ****)(v198 + 16 * v200);
                                goto LABEL_311;
                              }
                            }
LABEL_310:
                            v201 = (uint64_t ****)(v198 + 16 * v199);
                          }
LABEL_311:
                          v205 = v201[1];
                          v208 = (size_t)*v205;
                          v207 = (char *)(v205 + 2);
                          v206 = v208;
                        }
                        else
                        {
                          v206 = 0;
                          v207 = &byte_1C871356D;
                        }
                        if (*(_QWORD *)&v439[8] < v206 + v196)
                        {
                          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__s1, &v439[16], v206 + v196, 1);
                          v196 = *(_QWORD *)v439;
                          if (v206)
                          {
LABEL_314:
                            memcpy((char *)__s1 + v196, v207, v206);
                            v196 = *(_QWORD *)v439;
                          }
                        }
                        else if (v206)
                        {
                          goto LABEL_314;
                        }
                        v174 = (uint64_t **)(v196 + v206);
                        *(_QWORD *)v439 = v174;
                        v183 = v141;
                      }
                    }
                    if (++v185 == v184)
                      goto LABEL_321;
                    continue;
                  }
                }
LABEL_282:
                v174 = 0;
                v175 = "";
                goto LABEL_322;
              }
              continue;
            }
          }
LABEL_628:
          v391 = 0;
          v393 = 0;
LABEL_244:
          v131 = 0;
          v132 = 0;
          goto LABEL_245;
        }
      }
      v54.n128_f64[0] = sub_1C5BCD484((uint64_t)v474, *(llvm::Instruction **)(v47 - 32), &v416);
      v56 = *(_DWORD *)&v474[16];
      if (!*(_DWORD *)&v474[16])
      {
        v395 &= 0xFFFFFFFFFFFFFF00;
        if (*(_DWORD *)&v474[32] < 0x41u)
        {
          v63 = 0;
          v55 = v388;
          v47 = v394;
        }
        else
        {
          if (*(_QWORD *)&v474[24])
            MEMORY[0x1CAA32F9C](*(_QWORD *)&v474[24], 0x1000C8000313F17, v54.n128_f64[0]);
          v63 = 0;
          v55 = v388;
          v47 = v394;
        }
        goto LABEL_101;
      }
      v57 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 40) + 56) + 40) + 272;
      v385 = v459[0];
      v392 = (llvm::LLVMContext *)v459[1];
      v393 = v461.i32[0];
      v389 = v460.i64[1];
      v461.i32[0] = 0;
      v410 = *(void **)v474;
      v412 = *(llvm::LLVMContext **)&v474[8];
      v58 = *(unsigned int *)&v474[32];
      v59 = *(_QWORD *)&v474[24];
      *(_DWORD *)&v474[32] = 0;
      sub_1C4768AD0(v57, **(_QWORD **)(v47 - 64));
      v62 = v61;
      if ((_DWORD)v60 == 1)
      v386 = v386 & 0xFFFFFFFF00000000 | v62;
      if (v56 == v55)
      {
        if (v58 > 0x40)
        {
          v118 = v393 - 1;
          v119 = v389;
          if (v393 >= 0x41)
            v119 = *(_QWORD *)(v389 + 8 * (v118 >> 6));
          v120 = *(_QWORD *)(v59 + 8 * ((v58 - 1) >> 6)) & (1 << (v58 - 1));
          if ((v120 != 0) == ((v119 & (1 << v118)) != 0))
          {
            v121 = ((unint64_t)(v58 + 63) >> 3) & 0x3FFFFFF8;
            while (v121)
            {
              v122 = *(_QWORD *)(v59 - 8 + v121);
              v123 = *(_QWORD *)(v389 - 8 + v121);
              v121 -= 8;
              if (v122 != v123)
              {
                if (v122 <= v123)
                  goto LABEL_96;
                goto LABEL_89;
              }
            }
            goto LABEL_89;
          }
          if (!v120)
          {
LABEL_89:
            v63 = 1;
            v383 = v55;
            v395 = (unint64_t)v385;
LABEL_99:
            v64 = v392;
            v382 = v389;
            v391 = v393;
            v385 = v410;
            v392 = v412;
            v389 = v59;
            v390 = v64;
            v393 = v58;
            goto LABEL_100;
          }
        }
        else if (v59 << -(char)v58 >> -(char)v58 >= v389 << -(char)v58 >> -(char)v58)
        {
          goto LABEL_89;
        }
      }
      else if (v56 >= v55)
      {
        v63 = 1;
        v383 = v55;
        v395 = (unint64_t)v385;
        v55 = v56;
        goto LABEL_99;
      }
LABEL_96:
      v63 = 1;
      v383 = v56;
      v395 = (unint64_t)v410;
      v390 = v412;
      v382 = v59;
      v391 = v58;
LABEL_100:
      j = v384;
      v12 = v396;
LABEL_101:
      v394 = v47;
      v388 = v55;
      goto LABEL_102;
    }
    LOBYTE(v15) = 0;
LABEL_638:
    v379 = v15;
    llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)&v424);
    __s1 = v436;
    sub_1C50B10F0((void ***)&__s1);
    if (v432 != v431)
      free(v432);
    if (v424 != v12)
      free(v424);
  }
  else
  {
    v379 = 0;
  }
  return v379 & 1;
}

uint64_t sub_1C5BCCF20()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5BCA4AC(v0);
}

void sub_1C5BCCF4C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5BCCF70(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1C5BCCFEC(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  char **v5;
  char *v6;
  _QWORD *v7;
  uint64_t *v8;
  void **v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char ***v19;
  uint64_t AnalysisPass;
  uint64_t v21;
  char **v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void **v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30[2];
  int v31;
  uint64_t v32[2];
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  void *__src;
  unsigned int v39;
  _QWORD v40[2];
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
    return 0;
  v5 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != llvm::TargetLibraryInfoWrapperPass::ID);
  v7 = (_QWORD *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v30[0] = 0;
  v30[1] = 0;
  v31 = 0;
  v32[0] = 0;
  v32[1] = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  llvm::TargetLibraryAnalysis::run((uint64_t)(v7 + 4), (uint64_t)a2, (uint64_t)&v37);
  v7[30] = v37;
  v8 = v7 + 30;
  if (*((_BYTE *)v7 + 320))
  {
    if (v8 == &v37)
    {
LABEL_18:
      *((_DWORD *)v7 + 78) = v45;
      goto LABEL_19;
    }
    v9 = (void **)(v7 + 31);
    v10 = v39;
    v11 = *((unsigned int *)v7 + 64);
    if (v11 >= v39)
    {
      if (v39)
        memmove(*v9, __src, 8 * v39);
      goto LABEL_17;
    }
    if (*((_DWORD *)v7 + 65) < v39)
    {
      *((_DWORD *)v7 + 64) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v7 + 31), (uint64_t)(v7 + 33), v10, 8);
    }
    else if ((_DWORD)v11)
    {
      memmove(*v9, __src, 8 * v11);
      goto LABEL_15;
    }
    v11 = 0;
LABEL_15:
    if (v11 != v39)
      memcpy((char *)*v9 + 8 * v11, (char *)__src + 8 * v11, 8 * v39 - 8 * v11);
LABEL_17:
    *((_DWORD *)v7 + 64) = v10;
    goto LABEL_18;
  }
  v26 = v7 + 33;
  v7[31] = v7 + 33;
  v27 = (void **)(v7 + 31);
  v7[32] = 0x600000000;
  v28 = v39;
  if (v39 && v27 != &__src)
  {
    if (v39 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v7 + 31), (uint64_t)(v7 + 33), v39, 8);
      v29 = v39;
      if (!v39)
      {
LABEL_45:
        *((_DWORD *)v7 + 64) = v28;
        goto LABEL_46;
      }
      v26 = *v27;
    }
    else
    {
      v29 = v39;
    }
    memcpy(v26, __src, 8 * v29);
    goto LABEL_45;
  }
LABEL_46:
  *((_DWORD *)v7 + 78) = v45;
  *((_BYTE *)v7 + 320) = 1;
LABEL_19:
  if (__src != v40)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v32);
  sub_1C4D8B52C(v30);
  v12 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v13 = *v12;
    v12 += 2;
  }
  while (v13 != llvm::TargetTransformInfoWrapperPass::ID);
  v14 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v12 - 1) + 96))(*(v12 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v37 = 0;
  __src = 0;
  v39 = 0;
  v40[0] = 0;
  v40[1] = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v15 = *(_QWORD *)(v14 + 56);
  if (!v15)
  {
    sub_1C485C2F0();
    goto LABEL_48;
  }
  v7 = v40;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, const llvm::Function *))(*(_QWORD *)v15 + 48))(v30, v15, a2);
  v16 = v30[0];
  if (!*(_BYTE *)(v14 + 72))
  {
    *(_QWORD *)(v14 + 64) = v30[0];
    *(_BYTE *)(v14 + 72) = 1;
    goto LABEL_27;
  }
  v30[0] = 0;
  v17 = *(_QWORD *)(v14 + 64);
  *(_QWORD *)(v14 + 64) = v16;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v30[0];
    v30[0] = 0;
    if (v18)
LABEL_48:
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
LABEL_27:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v7);
  sub_1C4D8B52C(&v37);
  v19 = (char ***)*((_QWORD *)a1 + 1);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass((llvm::PMDataManager *)v19[3], llvm::DominatorTreeWrapperPass::ID, 1);
  if (AnalysisPass)
  {
    v21 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, llvm::DominatorTreeWrapperPass::ID);
    v19 = (char ***)*((_QWORD *)a1 + 1);
  }
  else
  {
    v21 = 0;
  }
  v22 = *v19;
  do
  {
    v23 = *v22;
    v22 += 2;
  }
  while (v23 != llvm::AAResultsWrapperPass::ID);
  v24 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v22 - 1) + 96))(*(v22 - 1), llvm::AAResultsWrapperPass::ID)+ 32);
  if (v21)
    v25 = v21 + 32;
  else
    v25 = 0;
  return sub_1C5BCA67C((uint64_t)a2, v8, *(_QWORD *)(v14 + 64), v24, v25);
}

void **sub_1C5BCD3C8(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((_DWORD *)v3 - 6) >= 0x41u)
        {
          v5 = *((_QWORD *)v3 - 4);
          if (v5)
            MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
        }
        if (*((_DWORD *)v3 - 16) >= 0x41u)
        {
          v6 = *((_QWORD *)v3 - 9);
          if (v6)
            MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
        }
        if ((*(v3 - 176) & 1) == 0)
          MEMORY[0x1CAA32FB4](*((_QWORD *)v3 - 21), 8);
        v3 -= 184;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

double sub_1C5BCD484(uint64_t a1, llvm::Instruction *this, _DWORD *a3)
{
  const llvm::BasicBlock *v6;
  uint64_t v7;
  unsigned int v8;
  const llvm::DataLayout *v9;
  llvm::Instruction *v10;
  uint64_t v11;
  double result;
  int v13;
  unsigned int v14;
  void *v15;
  size_t v16;
  void *v17;
  void *v18;
  void *__src;
  unsigned int PointerTypeSizeInBits;
  uint64_t v21;
  char v22;
  uint64_t v23;

  if (!this)
    goto LABEL_21;
  if (*((_BYTE *)this + 16) != 60)
    goto LABEL_21;
  v6 = (const llvm::BasicBlock *)*((_QWORD *)this + 5);
  if (llvm::Instruction::isUsedOutsideOfBlock(this, v6) || (*((_WORD *)this + 9) & 0x381) != 0)
    goto LABEL_21;
  v7 = *((_QWORD *)this - 4);
  v8 = *(_DWORD *)(*(_QWORD *)v7 + 8);
  if ((v8 & 0xFE) == 0x12)
    v8 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v7 + 16) + 8);
  if (v8 >= 0x100
    || (v9 = (const llvm::DataLayout *)(*(_QWORD *)(*((_QWORD *)v6 + 7) + 40) + 272),
        (llvm::isDereferenceableAndAlignedPointer(*((uint64_t **)this - 4), *(_QWORD *)this, 0, v9, 0, 0, 0) & 1) == 0))
  {
LABEL_21:
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)(a1 + 32) = 1;
    return result;
  }
  PointerTypeSizeInBits = llvm::DataLayout::getPointerTypeSizeInBits((uint64_t)v9, *(_QWORD *)v7);
  if (PointerTypeSizeInBits > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
  else
    __src = 0;
  if (*(_BYTE *)(v7 + 16) == 62)
    v10 = (llvm::Instruction *)v7;
  else
    v10 = 0;
  if (!v10)
    goto LABEL_24;
  if (!llvm::Instruction::isUsedOutsideOfBlock(v10, *((const llvm::BasicBlock **)this + 5))
    && (llvm::GEPOperator::accumulateConstantOffset((uint64_t)v10, v9, (uint64_t)&__src, 0, v11) & 1) != 0)
  {
    v7 = *((_QWORD *)v10 - 4 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF));
LABEL_24:
    v23 = v7;
    sub_1C61D73E4((uint64_t)&v21, (uint64_t)(a3 + 2), &v23, a3);
    if (v22)
      ++*a3;
    v13 = *(_DWORD *)(v21 + 8);
    v14 = PointerTypeSizeInBits;
    if (PointerTypeSizeInBits > 0x40)
    {
      v16 = (((unint64_t)PointerTypeSizeInBits + 63) >> 3) & 0x3FFFFFF8;
      v17 = (void *)operator new[]();
      memcpy(v17, __src, v16);
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = this;
      *(_DWORD *)(a1 + 16) = v13;
      *(_DWORD *)(a1 + 32) = v14;
      v18 = (void *)operator new[]();
      *(_QWORD *)(a1 + 24) = v18;
      memcpy(v18, v17, v16);
      MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
    }
    else
    {
      v15 = __src;
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = this;
      *(_DWORD *)(a1 + 16) = v13;
      *(_DWORD *)(a1 + 32) = v14;
      *(_QWORD *)(a1 + 24) = v15;
    }
    goto LABEL_18;
  }
  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1;
LABEL_18:
  if (PointerTypeSizeInBits >= 0x41)
  {
    if (__src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_1C5BCD700(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    if (*(_DWORD *)(a1 + 32) >= 0x41u)
    {
      v4 = *(_QWORD *)(a1 + 24);
      if (v4)
        MEMORY[0x1CAA32F9C](v4, 0x1000C8000313F17);
    }
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
  }
  return a1;
}

void sub_1C5BCD778(void **a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  int64x2_t v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  int64x2_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  int v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int64x2_t v31;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v5 >= v4)
  {
    v11 = 0xD37A6F4DE9BD37A7 * ((v5 - (_BYTE *)*a1) >> 3);
    if (v11 + 1 > 0x1642C8590B21642)
      abort();
    v12 = 0xD37A6F4DE9BD37A7 * ((v4 - (_BYTE *)*a1) >> 3);
    v13 = 2 * v12;
    if (2 * v12 <= v11 + 1)
      v13 = v11 + 1;
    if (v12 >= 0xB21642C8590B21)
      v14 = 0x1642C8590B21642;
    else
      v14 = v13;
    if (v14)
    {
      if (v14 > 0x1642C8590B21642)
        sub_1C4764EE4();
      v15 = (char *)operator new(184 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[184 * v11];
    *(_QWORD *)v16 = *a2;
    *((_QWORD *)v16 + 1) = 1;
    v17 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    *((int64x2_t *)v16 + 1) = v17;
    *((int64x2_t *)v16 + 2) = v17;
    *((int64x2_t *)v16 + 3) = v17;
    *((int64x2_t *)v16 + 4) = v17;
    v31 = v17;
    v18 = &v15[184 * v14];
    sub_1C629018C((unsigned int *)v16 + 2, (unsigned int *)a2 + 2);
    *((_QWORD *)v16 + 10) = a2[10];
    *(_OWORD *)(v16 + 88) = *(_OWORD *)(a2 + 11);
    *((_DWORD *)v16 + 26) = *((_DWORD *)a2 + 26);
    *((_DWORD *)v16 + 30) = *((_DWORD *)a2 + 30);
    *((_QWORD *)v16 + 14) = a2[14];
    *((_DWORD *)a2 + 30) = 0;
    *((_OWORD *)v16 + 8) = *((_OWORD *)a2 + 8);
    *((_DWORD *)v16 + 36) = *((_DWORD *)a2 + 36);
    *((_DWORD *)v16 + 40) = *((_DWORD *)a2 + 40);
    *((_QWORD *)v16 + 19) = a2[19];
    *((_DWORD *)a2 + 40) = 0;
    *(_OWORD *)(v16 + 168) = *(_OWORD *)(a2 + 21);
    v10 = v16 + 184;
    v20 = (char *)*a1;
    v19 = (char *)a1[1];
    if (v19 == *a1)
    {
      *a1 = v16;
      a1[1] = v10;
      a1[2] = v18;
    }
    else
    {
      v21 = 0;
      do
      {
        v22 = &v19[v21];
        v23 = *(_QWORD *)&v19[v21 - 184];
        *(_QWORD *)&v16[v21 - 176] = 1;
        v24 = (uint64_t)&v16[v21 - 176];
        *(_QWORD *)(v24 - 8) = v23;
        *(int64x2_t *)(v24 + 8) = v31;
        *(int64x2_t *)(v24 + 24) = v31;
        *(int64x2_t *)(v24 + 40) = v31;
        *(int64x2_t *)(v24 + 56) = v31;
        sub_1C629018C((unsigned int *)v24, (unsigned int *)&v19[v21 - 176]);
        *(_QWORD *)&v16[v21 - 104] = *(_QWORD *)&v19[v21 - 104];
        v25 = *(_OWORD *)&v19[v21 - 96];
        *(_DWORD *)&v16[v21 - 80] = *(_DWORD *)&v19[v21 - 80];
        *(_OWORD *)&v16[v21 - 96] = v25;
        *(_DWORD *)&v16[v21 - 64] = *(_DWORD *)&v19[v21 - 64];
        *(_QWORD *)&v16[v21 - 72] = *(_QWORD *)&v19[v21 - 72];
        v26 = *(_OWORD *)&v19[v21 - 56];
        v27 = *(_DWORD *)&v19[v21 - 40];
        *((_DWORD *)v22 - 16) = 0;
        *(_DWORD *)&v16[v21 - 40] = v27;
        *(_OWORD *)&v16[v21 - 56] = v26;
        *(_DWORD *)&v16[v21 - 24] = *(_DWORD *)&v19[v21 - 24];
        *(_QWORD *)&v16[v21 - 32] = *(_QWORD *)&v19[v21 - 32];
        *((_DWORD *)v22 - 6) = 0;
        *(_OWORD *)&v16[v21 - 16] = *(_OWORD *)&v19[v21 - 16];
        v21 -= 184;
      }
      while (&v19[v21] != v20);
      v19 = (char *)*a1;
      v28 = (char *)a1[1];
      *a1 = &v16[v21];
      a1[1] = v10;
      a1[2] = v18;
      while (v28 != v19)
      {
        if (*((_DWORD *)v28 - 6) >= 0x41u)
        {
          v29 = *((_QWORD *)v28 - 4);
          if (v29)
            MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
        }
        if (*((_DWORD *)v28 - 16) >= 0x41u)
        {
          v30 = *((_QWORD *)v28 - 9);
          if (v30)
            MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
        }
        if ((*(v28 - 176) & 1) == 0)
          MEMORY[0x1CAA32FB4](*((_QWORD *)v28 - 21), 8);
        v28 -= 184;
      }
    }
    if (v19)
      operator delete(v19);
  }
  else
  {
    v6 = *a2;
    *((_QWORD *)v5 + 1) = 1;
    v7 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    *(_QWORD *)v5 = v6;
    *((int64x2_t *)v5 + 1) = v7;
    *((int64x2_t *)v5 + 2) = v7;
    *((int64x2_t *)v5 + 3) = v7;
    *((int64x2_t *)v5 + 4) = v7;
    sub_1C629018C((unsigned int *)v5 + 2, (unsigned int *)a2 + 2);
    *((_QWORD *)v5 + 10) = a2[10];
    v8 = *(_OWORD *)(a2 + 11);
    *((_DWORD *)v5 + 26) = *((_DWORD *)a2 + 26);
    *(_OWORD *)(v5 + 88) = v8;
    *((_DWORD *)v5 + 30) = *((_DWORD *)a2 + 30);
    *((_QWORD *)v5 + 14) = a2[14];
    *((_DWORD *)a2 + 30) = 0;
    v9 = *((_OWORD *)a2 + 8);
    *((_DWORD *)v5 + 36) = *((_DWORD *)a2 + 36);
    *((_OWORD *)v5 + 8) = v9;
    *((_DWORD *)v5 + 40) = *((_DWORD *)a2 + 40);
    *((_QWORD *)v5 + 19) = a2[19];
    *((_DWORD *)a2 + 40) = 0;
    *(_OWORD *)(v5 + 168) = *(_OWORD *)(a2 + 21);
    v10 = v5 + 184;
  }
  a1[1] = v10;
}

uint64_t sub_1C5BCDAE0(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unsigned int v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  int v82;
  BOOL v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  unsigned int v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t *v121;
  unsigned int v122;
  _QWORD *v123;
  uint64_t *v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unsigned int v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t *v172;
  unsigned int v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  BOOL v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  unint64_t v183;
  unsigned int v184;
  uint64_t *v185;
  uint64_t v186;
  unsigned int v187;
  unsigned int v188;
  _QWORD *v189;
  char v190;
  unint64_t v191;
  unsigned int v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unsigned int v203;
  uint64_t v204;
  unsigned int v205;
  uint64_t v206;
  uint64_t *v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unsigned int v211;
  uint64_t *v212;
  uint64_t v213;
  unsigned int v214;
  unsigned int v215;
  _QWORD *v216;
  char v217;
  unint64_t v218;
  unsigned int v219;
  unsigned int v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t *v234;
  BOOL v235;
  uint64_t *v236;
  uint64_t v237;
  unsigned int v238;
  unsigned int v239;
  uint64_t *v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unsigned int v249;
  uint64_t v250;
  uint64_t *v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  char v257;
  uint64_t v258;
  uint64_t *v259;
  char v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  unsigned int v265;
  uint64_t *v266;
  uint64_t v267;
  unsigned int v268;
  unsigned int v269;
  _QWORD *v270;
  unsigned int v271;
  char v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  unsigned int v277;
  uint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  unint64_t v288;
  unsigned int v289;
  uint64_t v290;
  uint64_t *v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  uint64_t v295;
  unsigned int v296;
  unsigned int v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  uint64_t v306;
  unint64_t v307;
  unint64_t v308;
  uint64_t *v309;
  unsigned int v310;
  uint64_t *v311;
  unsigned int v312;
  uint64_t *v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  _QWORD *v317;
  uint64_t v318;
  uint64_t v319;
  unsigned int v320;
  unsigned int v321;
  uint64_t v322;
  uint64_t v323;
  unsigned int v324;
  uint64_t v325;
  _QWORD *v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  unint64_t v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v339;
  unint64_t v340;
  uint64_t v341;
  unsigned int v342;
  uint64_t *v343;
  uint64_t v344;
  unsigned int v345;
  unsigned int v346;
  uint64_t v347;
  _QWORD *v348;
  unint64_t v349;
  uint64_t v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  int64_t v356;
  __int128 *v357;
  int64_t v358;
  unint64_t v359;
  int64_t v360;
  uint64_t v361;
  uint64_t v362;
  unsigned int v363;
  unsigned int v364;
  unint64_t v365;
  uint64_t *v366;
  uint64_t *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unsigned int v371;
  unsigned int v372;
  unsigned int v373;
  uint64_t *v374;
  uint64_t *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unsigned int v379;
  unsigned int v380;
  unsigned int v381;
  uint64_t *v382;
  uint64_t v383;
  unint64_t v384;
  __int128 v385;
  __int128 v386;
  __int128 *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unsigned int v391;
  unsigned int v392;
  uint64_t v393;
  uint64_t *v394;
  uint64_t *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unsigned int v399;
  unsigned int v400;
  uint64_t *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  unsigned int v405;
  unsigned int v406;
  uint64_t v407;
  unsigned int v408;
  unsigned int v409;
  uint64_t v410;
  uint64_t *v411;
  _QWORD *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  int v417;
  uint64_t v418;
  uint64_t *v419;
  uint64_t v420;
  unsigned int v421;
  unint64_t v422;
  unint64_t v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  unsigned int v427;
  uint64_t *v428;
  uint64_t v429;
  unsigned int v430;
  unint64_t v431;
  unint64_t v432;
  unint64_t v433;
  uint64_t v434;
  unsigned int v435;
  unint64_t v436;
  uint64_t v437;
  unint64_t v438;
  unint64_t v439;
  uint64_t v440;
  unint64_t v441;
  uint64_t v442;
  unint64_t v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  unsigned int v447;
  unsigned int v448;
  uint64_t v449;
  uint64_t v450;
  unint64_t v451;
  uint64_t v452;
  unint64_t v453;
  unint64_t v454;
  unint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  unint64_t v459;
  unint64_t v460;
  __int128 *v461;
  uint64_t v462;
  uint64_t v463;
  unsigned int v464;
  unsigned int v465;
  unint64_t v466;
  uint64_t *v467;
  _QWORD *v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  int v473;
  unsigned int v474;
  uint64_t v475;
  unsigned int v476;
  uint64_t v477;
  unsigned int v478;
  unint64_t v479;
  unint64_t v480;
  unint64_t v481;
  uint64_t v482;
  uint64_t v483;
  unsigned int v484;
  unsigned int v485;
  uint64_t v486;
  uint64_t v487;
  unsigned int v488;
  unint64_t v489;
  unint64_t v490;
  unint64_t v491;
  uint64_t v492;
  unsigned int v493;
  unint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  unint64_t v498;
  unint64_t v499;
  uint64_t v500;
  unint64_t v501;
  uint64_t v502;
  unint64_t v503;
  unint64_t v504;
  uint64_t v505;
  uint64_t v506;
  unsigned int v507;
  unsigned int v508;
  uint64_t v509;
  uint64_t v510;
  unint64_t v511;
  uint64_t v512;
  unint64_t v513;
  unint64_t v514;
  unint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  unint64_t v519;
  unint64_t v520;
  unint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  __int128 v525;
  uint64_t v526;
  __int128 v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  unsigned int v532;
  unsigned int v533;
  uint64_t v534;
  uint64_t *v535;
  uint64_t *v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  unsigned int v540;
  unsigned int v541;
  unsigned int v542;
  uint64_t v543;
  uint64_t *v544;
  _QWORD *v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  int v550;
  uint64_t v551;
  unsigned int v552;
  unint64_t v553;
  unint64_t v554;
  unint64_t v555;
  uint64_t v556;
  unsigned int v557;
  uint64_t v558;
  uint64_t v559;
  unsigned int v560;
  unsigned int v561;
  uint64_t v562;
  uint64_t v563;
  unint64_t v564;
  uint64_t v565;
  unint64_t v566;
  unint64_t v567;
  unint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  unint64_t v572;
  unint64_t v573;
  __int128 *v574;
  unint64_t v575;
  uint64_t v576;
  unint64_t v577;
  unsigned int v578;
  unsigned int v579;
  unint64_t v580;
  uint64_t *v581;
  uint64_t *v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  unsigned int v586;
  unsigned int v587;
  unsigned int v588;
  unint64_t v589;
  uint64_t *v590;
  _QWORD *v591;
  uint64_t v592;
  uint64_t v593;
  __int128 v594;
  uint64_t v595;
  __int128 v596;
  unint64_t v597;
  uint64_t v598;
  unsigned int v599;
  unint64_t v600;
  uint64_t *v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  unsigned int v605;
  unsigned int v606;
  unint64_t v607;
  uint64_t *v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t *v611;
  unint64_t v612;
  unint64_t v613;
  unint64_t v614;
  uint64_t v615;
  uint64_t v616;
  unsigned int v617;
  uint64_t *v618;
  uint64_t v619;
  unsigned int v620;
  unint64_t v621;
  uint64_t v622;
  unint64_t v623;
  unint64_t v624;
  uint64_t v625;
  unint64_t v626;
  uint64_t v627;
  unint64_t v628;
  unint64_t v629;
  uint64_t v630;
  unsigned int *v631;
  unsigned int v632;
  uint64_t *v633;
  uint64_t v634;
  unsigned int *v635;
  unsigned int v636;
  uint64_t *v637;
  uint64_t v638;
  unsigned int v639;
  unint64_t v640;
  unint64_t v641;
  unint64_t v642;
  uint64_t v643;
  uint64_t v644;
  unsigned int v645;
  unsigned int v646;
  uint64_t v647;
  uint64_t v648;
  unsigned int v649;
  unint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  unint64_t v654;
  unint64_t v655;
  uint64_t v656;
  unint64_t v657;
  uint64_t v658;
  unint64_t v659;
  unint64_t v660;
  unsigned int v661;
  unsigned int v662;
  uint64_t *v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  unsigned int v667;
  uint64_t *v668;
  uint64_t *v669;
  uint64_t *v670;
  unsigned int v671;
  unsigned int v672;
  uint64_t *v673;
  uint64_t *v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  unsigned int v678;
  unsigned int v679;
  unsigned int v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t *v684;
  uint64_t *v685;
  uint64_t v686;
  _QWORD *v687;
  _QWORD *v688;
  unint64_t v689;
  unsigned int v690;
  uint64_t *v691;
  uint64_t v692;
  uint64_t v693;
  unsigned int v694;
  unsigned int v695;
  uint64_t *v696;
  uint64_t v697;
  unsigned int v698;
  unint64_t v699;
  unint64_t v700;
  unint64_t v701;
  uint64_t v702;
  unsigned int v703;
  unsigned int v704;
  uint64_t v705;
  uint64_t v706;
  unsigned int v707;
  uint64_t *v708;
  uint64_t v709;
  unint64_t v710;
  unint64_t v711;
  unint64_t v712;
  uint64_t v713;
  unint64_t v714;
  uint64_t v715;
  unint64_t v716;
  unint64_t v717;
  _OWORD *v718;
  unsigned int v719;
  uint64_t v720;
  unsigned int v721;
  unint64_t v722;
  unint64_t v723;
  unint64_t v724;
  _QWORD *v725;
  uint64_t v726;
  uint64_t v727;
  unsigned int v728;
  unsigned int v729;
  uint64_t v730;
  uint64_t v731;
  unsigned int v732;
  unint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  unint64_t v737;
  unint64_t v738;
  uint64_t v739;
  unint64_t v740;
  uint64_t v741;
  unint64_t v742;
  unint64_t v743;
  uint64_t v744;
  uint64_t v745;
  unsigned int v746;
  unsigned int v747;
  uint64_t *v748;
  uint64_t *v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  unsigned int v753;
  unsigned int v754;
  unsigned int v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  unsigned int v762;
  uint64_t *v763;
  uint64_t v764;
  uint64_t v765;
  unsigned int v766;
  unsigned int v767;
  _QWORD *v768;
  uint64_t v769;
  unsigned int v770;
  unint64_t v771;
  unint64_t v772;
  unint64_t v773;
  uint64_t v774;
  unsigned int v775;
  unsigned int v776;
  uint64_t v777;
  uint64_t v778;
  unsigned int v779;
  uint64_t *v780;
  uint64_t v781;
  unint64_t v782;
  unint64_t v783;
  unint64_t v784;
  uint64_t v785;
  unint64_t v786;
  uint64_t v787;
  unint64_t v788;
  unint64_t v789;
  _OWORD *v790;
  unsigned int v791;
  uint64_t v792;
  unsigned int v793;
  unint64_t v794;
  unint64_t v795;
  unint64_t v796;
  _QWORD *v797;
  uint64_t v798;
  uint64_t v799;
  unsigned int v800;
  unsigned int v801;
  uint64_t v802;
  uint64_t v803;
  unsigned int v804;
  unint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  unint64_t v809;
  unint64_t v810;
  uint64_t v811;
  unint64_t v812;
  uint64_t v813;
  unint64_t v814;
  unint64_t v815;
  unsigned int v816;
  unsigned int v817;
  _QWORD *v818;
  uint64_t v819;
  uint64_t v820;
  unsigned int v821;
  unint64_t v822;
  unint64_t v823;
  unint64_t v824;
  uint64_t v825;
  unsigned int v826;
  _QWORD *v827;
  uint64_t v828;
  uint64_t v829;
  unsigned int v830;
  unsigned int v831;
  uint64_t v832;
  uint64_t v833;
  unint64_t v834;
  uint64_t v835;
  unint64_t v836;
  unint64_t v837;
  unint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  unint64_t v842;
  unint64_t v843;
  _QWORD *v844;
  _QWORD *v845;
  _OWORD *v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  int64x2_t v852;
  uint64_t *v853;
  __int128 *v854;
  unint64_t v855;
  unint64_t v856;
  unsigned int *v857;
  int64x2_t v859;
  unint64_t v860;
  unint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  unint64_t v865;
  uint64_t v866;
  unint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t *v870;
  int64x2_t v871;
  uint64_t *v872;
  unint64_t v873;
  uint64_t v874;
  unint64_t v875;
  uint64_t v876;
  uint64_t *v877;
  uint64_t v878;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  int64x2_t v883;
  int64x2_t v884;
  uint64_t v885;
  uint64_t v886;
  int64x2_t v887;
  int64x2_t v888;
  int64x2_t v889;
  int64x2_t v890;
  uint64_t v891;
  __int128 v892;
  int v893;
  uint64_t v894;
  unsigned int v895;
  __int128 v896;
  int v897;
  uint64_t v898;
  unsigned int v899;
  __int128 v900;
  uint64_t v901;
  uint64_t v902;
  int64x2_t v903;
  int64x2_t v904;
  int64x2_t v905;
  int64x2_t v906;
  uint64_t v907;
  __int128 v908;
  unsigned int v909;
  uint64_t v910;
  unsigned int v911;
  __int128 v912;
  unsigned int v913;
  uint64_t v914;
  unsigned int v915;
  __int128 v916;
  uint64_t v917;

  v862 = result;
  v917 = *MEMORY[0x1E0C80C00];
  v852 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
LABEL_2:
  v853 = (uint64_t *)(a2 - 184);
  v850 = a2 - 552;
  v851 = a2 - 368;
  v844 = (_QWORD *)(a2 - 32);
  v845 = (_QWORD *)(a2 - 72);
  v4 = v862;
  v860 = a2;
  while (2)
  {
    v5 = a2 - v4;
    v6 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(a2 - v4) >> 3);
    v862 = v4;
    switch(v6)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v661 = *(_DWORD *)(a2 - 80);
        v662 = *(_DWORD *)(v4 + 104);
        if (v661 == v662)
        {
          v663 = (uint64_t *)(v4 + 112);
          v664 = *(unsigned int *)(a2 - 64);
          if (v664 <= 0x40)
          {
            v665 = *v845;
            v666 = *v663;
            if ((uint64_t)(*v845 << -(char)v664) >> -(char)v664 >= *v663 << -(char)v664 >> -(char)v664)
            {
              v667 = *(_DWORD *)(v4 + 120);
              goto LABEL_1017;
            }
            return sub_1C5BD4D10((uint64_t *)v4, v853);
          }
          v665 = *v845;
          v820 = *(_QWORD *)(*v845 + 8 * ((v664 - 1) >> 6)) & (1 << (v664 - 1));
          v667 = *(_DWORD *)(v4 + 120);
          v821 = v667 - 1;
          v666 = *(_QWORD *)(v4 + 112);
          if (v667 >= 0x41)
            v663 = (uint64_t *)(v666 + 8 * (v821 >> 6));
          if ((v820 != 0) != (((unint64_t)*v663 >> v821) & 1))
          {
            a2 = v860;
            if (!v820)
              goto LABEL_1017;
            return sub_1C5BD4D10((uint64_t *)v4, v853);
          }
          v822 = ((unint64_t)(v664 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            if (!v822)
            {
              a2 = v860;
              goto LABEL_1017;
            }
            v823 = *(_QWORD *)(v665 + v822 - 8);
            v824 = *(_QWORD *)(v666 + v822 - 8);
            v822 -= 8;
          }
          while (v823 == v824);
          a2 = v860;
          if (v823 <= v824)
            return sub_1C5BD4D10((uint64_t *)v4, v853);
LABEL_1017:
          if (v667 > 0x40)
          {
            v825 = *(_QWORD *)(v666 + 8 * ((v667 - 1) >> 6)) & (1 << (v667 - 1));
            v826 = v664 - 1;
            v83 = v664 >= 0x41;
            v827 = v845;
            if (v83)
              v827 = (_QWORD *)(v665 + 8 * (v826 >> 6));
            if ((v825 != 0) == ((*v827 >> v826) & 1))
            {
              v833 = v665 - 8;
              v834 = (((unint64_t)v667 + 63) >> 3) & 0x3FFFFFF8;
              v835 = v666 - 8;
              a2 = v860;
              do
              {
                if (!v834)
                  goto LABEL_1247;
                v836 = *(_QWORD *)(v835 + v834);
                v837 = *(_QWORD *)(v833 + v834);
                v834 -= 8;
              }
              while (v836 == v837);
              if (v836 <= v837)
                return result;
            }
            else
            {
              a2 = v860;
              if (v825)
                return result;
            }
          }
          else if (v666 << -(char)v667 >> -(char)v667 < v665 << -(char)v667 >> -(char)v667)
          {
            return result;
          }
        }
        else
        {
          if (v661 < v662)
            return sub_1C5BD4D10((uint64_t *)v4, v853);
          if (v662 < v661)
            return result;
        }
LABEL_1247:
        v816 = *(_DWORD *)(a2 - 40);
        v817 = *(_DWORD *)(v4 + 144);
        if (v816 == v817)
        {
          v818 = (_QWORD *)(v4 + 152);
          v819 = *(unsigned int *)(a2 - 24);
          if (v819 > 0x40)
          {
            v828 = *(_QWORD *)(a2 - 32);
            v829 = *(_QWORD *)(v828 + 8 * ((v819 - 1) >> 6)) & (1 << (v819 - 1));
            v830 = *(_DWORD *)(v4 + 160);
            v831 = v830 - 1;
            v832 = *(_QWORD *)(v4 + 152);
            if (v830 >= 0x41)
              v818 = (_QWORD *)(v832 + 8 * (v831 >> 6));
            if ((v829 != 0) == ((*v818 >> v831) & 1))
            {
              v838 = v819 + 63;
              v839 = v832 - 8;
              v840 = (v838 >> 3) & 0x3FFFFFF8;
              v841 = v828 - 8;
              do
              {
                if (!v840)
                  return result;
                v842 = *(_QWORD *)(v841 + v840);
                v843 = *(_QWORD *)(v839 + v840);
                v840 -= 8;
              }
              while (v842 == v843);
              if (v842 > v843)
                return result;
            }
            else if (!v829)
            {
              return result;
            }
          }
          else if ((uint64_t)(*(_QWORD *)(a2 - 32) << -(char)v819) >> -(char)v819 >= (uint64_t)(*v818 << -(char)v819) >> -(char)v819)
          {
            return result;
          }
        }
        else if (v816 >= v817)
        {
          return result;
        }
        return sub_1C5BD4D10((uint64_t *)v4, v853);
      case 3:
        return sub_1C5BD3560(v4, v4 + 184, (uint64_t)v853);
      case 4:
        return sub_1C5BD4F9C(v4, v4 + 184, v4 + 368, (uint64_t)v853);
      case 5:
        return sub_1C5BD2B34(v4, v4 + 184, v4 + 368, v4 + 552, (uint64_t)v853);
      default:
        if (v5 <= 4415)
        {
          if ((a4 & 1) != 0)
          {
            if (v4 == a2)
              return result;
            v668 = (uint64_t *)(v4 + 184);
            if (v4 + 184 == a2)
              return result;
            v883 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
            v669 = (uint64_t *)v4;
            while (1)
            {
              v670 = v669;
              v669 = v668;
              v671 = *((_DWORD *)v670 + 72);
              v672 = *((_DWORD *)v670 + 26);
              if (v671 == v672)
              {
                v673 = v670 + 37;
                v674 = v670 + 14;
                v675 = *((unsigned int *)v670 + 76);
                if (v675 > 0x40)
                {
                  v676 = v670[37];
                  v720 = *(_QWORD *)(v676 + 8 * ((v675 - 1) >> 6)) & (1 << (v675 - 1));
                  v678 = *((_DWORD *)v670 + 30);
                  v721 = v678 - 1;
                  v677 = v670[14];
                  if (v678 >= 0x41)
                    v674 = (uint64_t *)(v677 + 8 * (v721 >> 6));
                  if ((v720 != 0) == (((unint64_t)*v674 >> v721) & 1))
                  {
                    v722 = ((unint64_t)(v675 + 63) >> 3) & 0x3FFFFFF8;
                    do
                    {
                      if (!v722)
                        goto LABEL_1031;
                      v723 = *(_QWORD *)(v676 + v722 - 8);
                      v724 = *(_QWORD *)(v677 + v722 - 8);
                      v722 -= 8;
                    }
                    while (v723 == v724);
                    if (v723 <= v724)
                      goto LABEL_1039;
LABEL_1031:
                    if (v678 > 0x40)
                    {
                      v731 = *(_QWORD *)(v677 + 8 * ((v678 - 1) >> 6)) & (1 << (v678 - 1));
                      v732 = v675 - 1;
                      if (v675 >= 0x41)
                        v673 = (uint64_t *)(v676 + 8 * (v732 >> 6));
                      if ((v731 != 0) == (((unint64_t)*v673 >> v732) & 1))
                      {
                        v739 = v676 - 8;
                        v740 = (((unint64_t)v678 + 63) >> 3) & 0x3FFFFFF8;
                        v741 = v677 - 8;
                        do
                        {
                          if (!v740)
                            goto LABEL_1036;
                          v742 = *(_QWORD *)(v741 + v740);
                          v743 = *(_QWORD *)(v739 + v740);
                          v740 -= 8;
                        }
                        while (v742 == v743);
                        if (v742 <= v743)
                          goto LABEL_1103;
                      }
                      else if (v731)
                      {
                        goto LABEL_1103;
                      }
                    }
                    else if (v677 << -(char)v678 >> -(char)v678 < v676 << -(char)v678 >> -(char)v678)
                    {
                      goto LABEL_1103;
                    }
LABEL_1036:
                    v679 = *((_DWORD *)v670 + 82);
                    v680 = *((_DWORD *)v670 + 36);
                    if (v679 == v680)
                    {
                      v681 = *((unsigned int *)v670 + 86);
                      if (v681 > 0x40)
                      {
                        v725 = v670 + 19;
                        v726 = v670[42];
                        v727 = *(_QWORD *)(v726 + 8 * ((v681 - 1) >> 6)) & (1 << (v681
                                                                                                  - 1));
                        v728 = *((_DWORD *)v670 + 40);
                        v729 = v728 - 1;
                        v730 = v670[19];
                        if (v728 >= 0x41)
                          v725 = (_QWORD *)(v730 + 8 * (v729 >> 6));
                        if ((v727 != 0) == ((*v725 >> v729) & 1))
                        {
                          v733 = v681 + 63;
                          v734 = v730 - 8;
                          v735 = (v733 >> 3) & 0x3FFFFFF8;
                          v736 = v726 - 8;
                          do
                          {
                            if (!v735)
                              goto LABEL_1103;
                            v737 = *(_QWORD *)(v736 + v735);
                            v738 = *(_QWORD *)(v734 + v735);
                            v735 -= 8;
                          }
                          while (v737 == v738);
                          if (v737 > v738)
                            goto LABEL_1103;
                        }
                        else if (!v727)
                        {
                          goto LABEL_1103;
                        }
                      }
                      else if (v670[42] << -(char)v681 >> -(char)v681 >= v670[19] << -(char)v681 >> -(char)v681)
                      {
                        goto LABEL_1103;
                      }
                    }
                    else if (v679 >= v680)
                    {
                      goto LABEL_1103;
                    }
                    goto LABEL_1039;
                  }
                  if (!v720)
                    goto LABEL_1031;
                }
                else
                {
                  v676 = *v673;
                  v677 = *v674;
                  if (*v673 << -(char)v675 >> -(char)v675 >= *v674 << -(char)v675 >> -(char)v675)
                  {
                    v678 = *((_DWORD *)v670 + 30);
                    goto LABEL_1031;
                  }
                }
              }
              else if (v671 >= v672)
              {
                if (v672 < v671)
                  goto LABEL_1103;
                goto LABEL_1036;
              }
LABEL_1039:
              v901 = *v669;
              v902 = 1;
              v903 = v883;
              v904 = v883;
              v905 = v883;
              v906 = v883;
              sub_1C629018C((unsigned int *)&v902, (unsigned int *)v670 + 48);
              v682 = v670[33];
              v908 = *((_OWORD *)v670 + 17);
              v909 = *((_DWORD *)v670 + 72);
              v911 = *((_DWORD *)v670 + 76);
              v683 = v670[37];
              v907 = v682;
              v910 = v683;
              *((_DWORD *)v670 + 76) = 0;
              v912 = *(_OWORD *)(v670 + 39);
              v913 = *((_DWORD *)v670 + 82);
              v915 = *((_DWORD *)v670 + 86);
              v914 = v670[42];
              *((_DWORD *)v670 + 86) = 0;
              v684 = v669;
              v916 = *((_OWORD *)v670 + 22);
              while (1)
              {
                do
                {
                  while (1)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v685 = v684;
                        v684 = v670;
                        *v685 = *v670;
                        v686 = (uint64_t)(v670 + 1);
                        sub_1C6290124((uint64_t)(v685 + 1), (unsigned int *)v670 + 2);
                        v685[10] = v670[10];
                        v687 = v670 + 11;
                        sub_1C5BCD700((uint64_t)(v685 + 11), (uint64_t)(v670 + 11));
                        v688 = v670 + 16;
                        sub_1C5BCD700((uint64_t)(v685 + 16), (uint64_t)(v670 + 16));
                        *(_OWORD *)(v685 + 21) = *(_OWORD *)(v670 + 21);
                        v689 = v4;
                        if (v684 == (uint64_t *)v4)
                          goto LABEL_1086;
                        v670 = v684 - 23;
                        v690 = *((_DWORD *)v684 - 20);
                        if (v909 == v690)
                          break;
                        if (v909 >= v690)
                        {
                          if (v690 < v909)
                            goto LABEL_1085;
                          goto LABEL_1050;
                        }
                      }
                      v691 = v684 - 9;
                      if (v911 > 0x40)
                        break;
                      v692 = v910;
                      v693 = *v691;
                      if (v910 << -(char)v911 >> -(char)v911 >= *v691 << -(char)v911 >> -(char)v911)
                      {
                        v694 = *((_DWORD *)v684 - 16);
                        goto LABEL_1045;
                      }
                    }
                    v692 = v910;
                    v697 = *(_QWORD *)(v910 + 8 * ((v911 - 1) >> 6)) & (1 << (v911 - 1));
                    v694 = *((_DWORD *)v684 - 16);
                    v698 = v694 - 1;
                    v693 = *(v684 - 9);
                    if (v694 >= 0x41)
                      v691 = (uint64_t *)(v693 + 8 * (v698 >> 6));
                    if ((v697 != 0) == (((unint64_t)*v691 >> v698) & 1))
                      break;
                    if (!v697)
                      goto LABEL_1045;
                  }
                  v699 = (((unint64_t)v911 + 63) >> 3) & 0x3FFFFFF8;
                  do
                  {
                    if (!v699)
                      goto LABEL_1045;
                    v700 = *(_QWORD *)(v910 + v699 - 8);
                    v701 = *(_QWORD *)(v693 + v699 - 8);
                    v699 -= 8;
                  }
                  while (v700 == v701);
                }
                while (v700 <= v701);
LABEL_1045:
                if (v694 <= 0x40)
                {
                  if (v693 << -(char)v694 >> -(char)v694 < v692 << -(char)v694 >> -(char)v694)
                    break;
                  goto LABEL_1050;
                }
                v706 = *(_QWORD *)(v693 + 8 * ((v694 - 1) >> 6)) & (1 << (v694 - 1));
                v707 = v911 - 1;
                v708 = &v910;
                if (v911 >= 0x41)
                  v708 = (uint64_t *)(v692 + 8 * (v707 >> 6));
                if ((v706 != 0) != (((unint64_t)*v708 >> v707) & 1))
                {
                  if (v706)
                    break;
                  goto LABEL_1050;
                }
                v713 = v692 - 8;
                v714 = (((unint64_t)v694 + 63) >> 3) & 0x3FFFFFF8;
                v715 = v693 - 8;
                do
                {
                  if (!v714)
                    goto LABEL_1050;
                  v716 = *(_QWORD *)(v715 + v714);
                  v717 = *(_QWORD *)(v713 + v714);
                  v714 -= 8;
                }
                while (v716 == v717);
                if (v716 <= v717)
                  break;
LABEL_1050:
                v695 = *((_DWORD *)v684 - 10);
                if (v913 == v695)
                {
                  v696 = v684 - 4;
                  if (v915 > 0x40)
                  {
                    v702 = *(_QWORD *)(v914 + 8 * ((v915 - 1) >> 6)) & (1 << (v915 - 1));
                    v703 = *((_DWORD *)v684 - 6);
                    v704 = v703 - 1;
                    v705 = *(v684 - 4);
                    if (v703 >= 0x41)
                      v696 = (uint64_t *)(v705 + 8 * (v704 >> 6));
                    if ((v702 != 0) == (((unint64_t)*v696 >> v704) & 1))
                    {
                      v709 = v705 - 8;
                      v710 = (((unint64_t)v915 + 63) >> 3) & 0x3FFFFFF8;
                      do
                      {
                        if (!v710)
                          goto LABEL_1085;
                        v711 = *(_QWORD *)(v914 - 8 + v710);
                        v712 = *(_QWORD *)(v709 + v710);
                        v710 -= 8;
                      }
                      while (v711 == v712);
                      if (v711 > v712)
                        break;
                    }
                    else if (!v702)
                    {
                      break;
                    }
                  }
                  else if (v914 << -(uint64_t)v915 >> -(uint64_t)v915 >= *v696 << -(uint64_t)v915 >> -(uint64_t)v915)
                  {
                    break;
                  }
                }
                else if (v913 >= v695)
                {
                  break;
                }
              }
LABEL_1085:
              v689 = (unint64_t)v684;
LABEL_1086:
              v718 = v684 + 21;
              *(_QWORD *)v689 = v901;
              result = sub_1C6290124(v686, (unsigned int *)&v902);
              *(_QWORD *)(v689 + 80) = v907;
              if ((uint64_t *)v689 == &v901)
              {
                v719 = v915;
                *v718 = v916;
                if (v719 >= 0x41)
                {
                  result = v914;
                  if (v914)
                    result = MEMORY[0x1CAA32F9C](v914, 0x1000C8000313F17);
                }
              }
              else
              {
                *v687 = v908;
                *(_QWORD *)(v689 + 96) = *((_QWORD *)&v908 + 1);
                *(_DWORD *)(v689 + 104) = v909;
                if (*(_DWORD *)(v689 + 120) >= 0x41u)
                {
                  result = *(_QWORD *)(v689 + 112);
                  if (result)
                    result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                }
                *(_QWORD *)(v689 + 112) = v910;
                *(_DWORD *)(v689 + 120) = v911;
                v911 = 0;
                *v688 = v912;
                *(_QWORD *)(v689 + 136) = *((_QWORD *)&v912 + 1);
                *(_DWORD *)(v689 + 144) = v913;
                if (*(_DWORD *)(v689 + 160) >= 0x41u)
                {
                  result = *(_QWORD *)(v689 + 152);
                  if (result)
                    result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                }
                *(_QWORD *)(v689 + 152) = v914;
                *(_DWORD *)(v689 + 160) = v915;
                v915 = 0;
                *v718 = v916;
              }
              if (v911 >= 0x41)
              {
                result = v910;
                if (v910)
                  result = MEMORY[0x1CAA32F9C](v910, 0x1000C8000313F17);
              }
              if ((v902 & 1) == 0)
                result = MEMORY[0x1CAA32FB4](v903.i64[0], 8);
LABEL_1103:
              v668 = v669 + 23;
              if (v669 + 23 == (uint64_t *)v860)
                return result;
            }
          }
          if (v4 == a2)
            return result;
          v744 = v4 + 184;
          if (v4 + 184 == a2)
            return result;
          v884 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
          while (1)
          {
            v745 = v862;
            v862 = v744;
            v746 = *(_DWORD *)(v745 + 288);
            v747 = *(_DWORD *)(v745 + 104);
            if (v746 != v747)
            {
              if (v746 < v747)
                goto LABEL_1152;
              if (v747 < v746)
                goto LABEL_1214;
              goto LABEL_1149;
            }
            v748 = (uint64_t *)(v745 + 296);
            v749 = (uint64_t *)(v745 + 112);
            v750 = *(unsigned int *)(v745 + 304);
            if (v750 > 0x40)
            {
              v751 = *(_QWORD *)(v745 + 296);
              v792 = *(_QWORD *)(v751 + 8 * ((v750 - 1) >> 6)) & (1 << (v750 - 1));
              v753 = *(_DWORD *)(v745 + 120);
              v793 = v753 - 1;
              v752 = *(_QWORD *)(v745 + 112);
              if (v753 >= 0x41)
                v749 = (uint64_t *)(v752 + 8 * (v793 >> 6));
              if ((v792 != 0) == (((unint64_t)*v749 >> v793) & 1))
              {
                v794 = ((unint64_t)(v750 + 63) >> 3) & 0x3FFFFFF8;
                do
                {
                  if (!v794)
                    goto LABEL_1144;
                  v795 = *(_QWORD *)(v751 + v794 - 8);
                  v796 = *(_QWORD *)(v752 + v794 - 8);
                  v794 -= 8;
                }
                while (v795 == v796);
                if (v795 > v796)
                  goto LABEL_1144;
LABEL_1152:
                v757 = v862;
                v901 = *(_QWORD *)v862;
                v902 = 1;
                v903 = v884;
                v904 = v884;
                v905 = v884;
                v906 = v884;
                sub_1C629018C((unsigned int *)&v902, (unsigned int *)(v745 + 192));
                v758 = *(_QWORD *)(v745 + 264);
                v908 = *(_OWORD *)(v745 + 272);
                v909 = *(_DWORD *)(v745 + 288);
                v911 = *(_DWORD *)(v745 + 304);
                v759 = *(_QWORD *)(v745 + 296);
                v907 = v758;
                v910 = v759;
                *(_DWORD *)(v745 + 304) = 0;
                v912 = *(_OWORD *)(v745 + 312);
                v913 = *(_DWORD *)(v745 + 328);
                v915 = *(_DWORD *)(v745 + 344);
                v914 = *(_QWORD *)(v745 + 336);
                *(_DWORD *)(v745 + 344) = 0;
                v916 = *(_OWORD *)(v745 + 352);
                while (1)
                {
                  v760 = v757;
                  v757 = v745;
                  *(_QWORD *)v760 = *(_QWORD *)v745;
                  v761 = v745 + 8;
                  sub_1C6290124(v760 + 8, (unsigned int *)(v745 + 8));
                  *(_QWORD *)(v760 + 80) = *(_QWORD *)(v745 + 80);
                  sub_1C5BCD700(v760 + 88, v745 + 88);
                  sub_1C5BCD700(v760 + 128, v745 + 128);
                  *(_OWORD *)(v760 + 168) = *(_OWORD *)(v745 + 168);
                  v745 -= 184;
                  v762 = *(_DWORD *)(v757 - 80);
                  if (v909 == v762)
                  {
                    v763 = (uint64_t *)(v757 - 72);
                    if (v911 > 0x40)
                    {
                      v764 = v910;
                      v769 = *(_QWORD *)(v910 + 8 * ((v911 - 1) >> 6)) & (1 << (v911 - 1));
                      v766 = *(_DWORD *)(v757 - 64);
                      v770 = v766 - 1;
                      v765 = *(_QWORD *)(v757 - 72);
                      if (v766 >= 0x41)
                        v763 = (uint64_t *)(v765 + 8 * (v770 >> 6));
                      if ((v769 != 0) == (((unint64_t)*v763 >> v770) & 1))
                      {
                        v771 = (((unint64_t)v911 + 63) >> 3) & 0x3FFFFFF8;
                        do
                        {
                          if (!v771)
                            goto LABEL_1157;
                          v772 = *(_QWORD *)(v910 + v771 - 8);
                          v773 = *(_QWORD *)(v765 + v771 - 8);
                          v771 -= 8;
                        }
                        while (v772 == v773);
                        if (v772 <= v773)
                          continue;
                      }
                      else if (v769)
                      {
                        continue;
                      }
                    }
                    else
                    {
                      v764 = v910;
                      v765 = *v763;
                      if (v910 << -(char)v911 >> -(char)v911 < *v763 << -(char)v911 >> -(char)v911)
                        continue;
                      v766 = *(_DWORD *)(v757 - 64);
                    }
LABEL_1157:
                    if (v766 > 0x40)
                    {
                      v778 = *(_QWORD *)(v765 + 8 * ((v766 - 1) >> 6)) & (1 << (v766 - 1));
                      v779 = v911 - 1;
                      v780 = &v910;
                      if (v911 >= 0x41)
                        v780 = (uint64_t *)(v764 + 8 * (v779 >> 6));
                      if ((v778 != 0) == (((unint64_t)*v780 >> v779) & 1))
                      {
                        v785 = v764 - 8;
                        v786 = (((unint64_t)v766 + 63) >> 3) & 0x3FFFFFF8;
                        v787 = v765 - 8;
                        do
                        {
                          if (!v786)
                            goto LABEL_1162;
                          v788 = *(_QWORD *)(v787 + v786);
                          v789 = *(_QWORD *)(v785 + v786);
                          v786 -= 8;
                        }
                        while (v788 == v789);
                        if (v788 <= v789)
                        {
LABEL_1197:
                          v790 = (_OWORD *)(v757 + 168);
                          *(_QWORD *)v757 = v901;
                          result = sub_1C6290124(v761, (unsigned int *)&v902);
                          *(_QWORD *)(v757 + 80) = v907;
                          if ((uint64_t *)v757 == &v901)
                          {
                            v791 = v915;
                            *v790 = v916;
                            if (v791 >= 0x41)
                            {
                              result = v914;
                              if (v914)
                                result = MEMORY[0x1CAA32F9C](v914, 0x1000C8000313F17);
                            }
                          }
                          else
                          {
                            *(_OWORD *)(v757 + 88) = v908;
                            *(_DWORD *)(v757 + 104) = v909;
                            if (*(_DWORD *)(v757 + 120) >= 0x41u)
                            {
                              result = *(_QWORD *)(v757 + 112);
                              if (result)
                                result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                            }
                            *(_QWORD *)(v757 + 112) = v910;
                            *(_DWORD *)(v757 + 120) = v911;
                            v911 = 0;
                            *(_OWORD *)(v757 + 128) = v912;
                            *(_DWORD *)(v757 + 144) = v913;
                            if (*(_DWORD *)(v757 + 160) >= 0x41u)
                            {
                              result = *(_QWORD *)(v757 + 152);
                              if (result)
                                result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                            }
                            *(_QWORD *)(v757 + 152) = v914;
                            *(_DWORD *)(v757 + 160) = v915;
                            v915 = 0;
                            *v790 = v916;
                          }
                          if (v911 >= 0x41)
                          {
                            result = v910;
                            if (v910)
                              result = MEMORY[0x1CAA32F9C](v910, 0x1000C8000313F17);
                          }
                          if ((v902 & 1) == 0)
                            result = MEMORY[0x1CAA32FB4](v903.i64[0], 8);
                          goto LABEL_1214;
                        }
                      }
                      else if (v778)
                      {
                        goto LABEL_1197;
                      }
                    }
                    else if (v765 << -(char)v766 >> -(char)v766 < v764 << -(char)v766 >> -(char)v766)
                    {
                      goto LABEL_1197;
                    }
                  }
                  else
                  {
                    if (v909 < v762)
                      continue;
                    if (v762 < v909)
                      goto LABEL_1197;
                  }
LABEL_1162:
                  v767 = *(_DWORD *)(v757 - 40);
                  if (v913 == v767)
                  {
                    v768 = (_QWORD *)(v757 - 32);
                    if (v915 > 0x40)
                    {
                      v774 = *(_QWORD *)(v914 + 8 * ((v915 - 1) >> 6)) & (1 << (v915 - 1));
                      v775 = *(_DWORD *)(v757 - 24);
                      v776 = v775 - 1;
                      v777 = *(_QWORD *)(v757 - 32);
                      if (v775 >= 0x41)
                        v768 = (_QWORD *)(v777 + 8 * (v776 >> 6));
                      if ((v774 != 0) == ((*v768 >> v776) & 1))
                      {
                        v781 = v777 - 8;
                        v782 = (((unint64_t)v915 + 63) >> 3) & 0x3FFFFFF8;
                        do
                        {
                          if (!v782)
                            goto LABEL_1197;
                          v783 = *(_QWORD *)(v914 - 8 + v782);
                          v784 = *(_QWORD *)(v781 + v782);
                          v782 -= 8;
                        }
                        while (v783 == v784);
                        if (v783 > v784)
                          goto LABEL_1197;
                      }
                      else if (!v774)
                      {
                        goto LABEL_1197;
                      }
                    }
                    else if (v914 << -(uint64_t)v915 >> -(uint64_t)v915 >= (uint64_t)(*v768 << -(uint64_t)v915) >> -(uint64_t)v915)
                    {
                      goto LABEL_1197;
                    }
                  }
                  else if (v913 >= v767)
                  {
                    goto LABEL_1197;
                  }
                }
              }
              if (v792)
                goto LABEL_1152;
            }
            else
            {
              v751 = *v748;
              v752 = *v749;
              if (*v748 << -(char)v750 >> -(char)v750 < *v749 << -(char)v750 >> -(char)v750)
                goto LABEL_1152;
              v753 = *(_DWORD *)(v745 + 120);
            }
LABEL_1144:
            if (v753 > 0x40)
            {
              v803 = *(_QWORD *)(v752 + 8 * ((v753 - 1) >> 6)) & (1 << (v753 - 1));
              v804 = v750 - 1;
              if (v750 >= 0x41)
                v748 = (uint64_t *)(v751 + 8 * (v804 >> 6));
              if ((v803 != 0) == (((unint64_t)*v748 >> v804) & 1))
              {
                v811 = v751 - 8;
                v812 = (((unint64_t)v753 + 63) >> 3) & 0x3FFFFFF8;
                v813 = v752 - 8;
                do
                {
                  if (!v812)
                    goto LABEL_1149;
                  v814 = *(_QWORD *)(v813 + v812);
                  v815 = *(_QWORD *)(v811 + v812);
                  v812 -= 8;
                }
                while (v814 == v815);
                if (v814 <= v815)
                  goto LABEL_1214;
              }
              else if (v803)
              {
                goto LABEL_1214;
              }
            }
            else if (v752 << -(char)v753 >> -(char)v753 < v751 << -(char)v753 >> -(char)v753)
            {
              goto LABEL_1214;
            }
LABEL_1149:
            v754 = *(_DWORD *)(v745 + 328);
            v755 = *(_DWORD *)(v745 + 144);
            if (v754 == v755)
            {
              v756 = *(unsigned int *)(v745 + 344);
              if (v756 > 0x40)
              {
                v797 = (_QWORD *)(v745 + 152);
                v798 = *(_QWORD *)(v745 + 336);
                v799 = *(_QWORD *)(v798 + 8 * ((v756 - 1) >> 6)) & (1 << (v756 - 1));
                v800 = *(_DWORD *)(v745 + 160);
                v801 = v800 - 1;
                v802 = *(_QWORD *)(v745 + 152);
                if (v800 >= 0x41)
                  v797 = (_QWORD *)(v802 + 8 * (v801 >> 6));
                if ((v799 != 0) == ((*v797 >> v801) & 1))
                {
                  v805 = v756 + 63;
                  v806 = v802 - 8;
                  v807 = (v805 >> 3) & 0x3FFFFFF8;
                  v808 = v798 - 8;
                  do
                  {
                    if (!v807)
                      goto LABEL_1214;
                    v809 = *(_QWORD *)(v808 + v807);
                    v810 = *(_QWORD *)(v806 + v807);
                    v807 -= 8;
                  }
                  while (v809 == v810);
                  if (v809 <= v810)
                    goto LABEL_1152;
                }
                else if (v799)
                {
                  goto LABEL_1152;
                }
              }
              else if ((uint64_t)(*(_QWORD *)(v745 + 336) << -(char)v756) >> -(char)v756 < (uint64_t)(*(_QWORD *)(v745 + 152) << -(char)v756) >> -(char)v756)
              {
                goto LABEL_1152;
              }
            }
            else if (v754 < v755)
            {
              goto LABEL_1152;
            }
LABEL_1214:
            v744 = v862 + 184;
            if (v862 + 184 == v860)
              return result;
          }
        }
        if (!a3)
        {
          if (v4 == a2)
            return result;
          v356 = (unint64_t)(v6 - 2) >> 1;
          v357 = &v916;
          v871 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
          v358 = v356;
          v359 = v4;
          while (1)
          {
            v360 = v358;
            if (v356 < v358)
              goto LABEL_754;
            v361 = (2 * v358) | 1;
            v362 = v359 + 184 * v361;
            if (2 * v358 + 2 >= v6)
              goto LABEL_616;
            v363 = *(_DWORD *)(v359 + 184 * v361 + 104);
            v364 = *(_DWORD *)(v362 + 288);
            if (v363 == v364)
            {
              v365 = v359 + 184 * v361;
              v366 = (uint64_t *)(v365 + 112);
              v367 = (uint64_t *)(v362 + 296);
              v368 = *(unsigned int *)(v365 + 120);
              if (v368 > 0x40)
              {
                v369 = *v366;
                v477 = *(_QWORD *)(*v366 + 8 * ((v368 - 1) >> 6)) & (1 << (v368 - 1));
                v371 = *(_DWORD *)(v362 + 304);
                v478 = v371 - 1;
                v370 = *(_QWORD *)(v362 + 296);
                if (v371 >= 0x41)
                  v367 = (uint64_t *)(v370 + 8 * (v478 >> 6));
                if ((v477 != 0) == (((unint64_t)*v367 >> v478) & 1))
                {
                  v489 = ((unint64_t)(v368 + 63) >> 3) & 0x3FFFFFF8;
                  do
                  {
                    if (!v489)
                      goto LABEL_611;
                    v490 = *(_QWORD *)(v369 + v489 - 8);
                    v491 = *(_QWORD *)(v370 + v489 - 8);
                    v489 -= 8;
                  }
                  while (v490 == v491);
                  if (v490 <= v491)
                  {
LABEL_615:
                    v362 += 184;
                    v361 = 2 * v358 + 2;
                    goto LABEL_616;
                  }
                }
                else if (v477)
                {
                  goto LABEL_615;
                }
              }
              else
              {
                v369 = *v366;
                v370 = *v367;
                if (*v366 << -(char)v368 >> -(char)v368 < *v367 << -(char)v368 >> -(char)v368)
                  goto LABEL_615;
                v371 = *(_DWORD *)(v362 + 304);
              }
LABEL_611:
              if (v371 > 0x40)
              {
                v492 = *(_QWORD *)(v370 + 8 * ((v371 - 1) >> 6)) & (1 << (v371 - 1));
                v493 = v368 - 1;
                if (v368 >= 0x41)
                  v366 = (uint64_t *)(v369 + 8 * (v493 >> 6));
                if ((v492 != 0) == (((unint64_t)*v366 >> v493) & 1))
                {
                  v510 = v369 - 8;
                  v511 = (((unint64_t)v371 + 63) >> 3) & 0x3FFFFFF8;
                  v512 = v370 - 8;
                  do
                  {
                    if (!v511)
                      goto LABEL_739;
                    v513 = *(_QWORD *)(v512 + v511);
                    v514 = *(_QWORD *)(v510 + v511);
                    v511 -= 8;
                  }
                  while (v513 == v514);
                  if (v513 <= v514)
                    goto LABEL_616;
                }
                else if (v492)
                {
                  goto LABEL_616;
                }
              }
              else if (v370 << -(char)v371 >> -(char)v371 < v369 << -(char)v371 >> -(char)v371)
              {
                goto LABEL_616;
              }
            }
            else
            {
              if (v363 < v364)
                goto LABEL_615;
              if (v364 < v363)
                goto LABEL_616;
            }
LABEL_739:
            v464 = *(_DWORD *)(v359 + 184 * v361 + 144);
            v465 = *(_DWORD *)(v362 + 328);
            if (v464 == v465)
            {
              v466 = v359 + 184 * v361;
              v467 = (uint64_t *)(v466 + 152);
              v468 = (_QWORD *)(v362 + 336);
              v469 = *(unsigned int *)(v466 + 160);
              if (v469 > 0x40)
              {
                v505 = *v467;
                v506 = *(_QWORD *)(v505 + 8 * ((v469 - 1) >> 6)) & (1 << (v469 - 1));
                v507 = *(_DWORD *)(v362 + 344);
                v508 = v507 - 1;
                v509 = *(_QWORD *)(v362 + 336);
                if (v507 >= 0x41)
                  v468 = (_QWORD *)(v509 + 8 * (v508 >> 6));
                if ((v506 != 0) == ((*v468 >> v508) & 1))
                {
                  v515 = v469 + 63;
                  v516 = v509 - 8;
                  v517 = (v515 >> 3) & 0x3FFFFFF8;
                  v518 = v505 - 8;
                  do
                  {
                    if (!v517)
                      goto LABEL_616;
                    v519 = *(_QWORD *)(v518 + v517);
                    v520 = *(_QWORD *)(v516 + v517);
                    v517 -= 8;
                  }
                  while (v519 == v520);
                  if (v519 > v520)
                    v473 = 1;
                  else
                    v473 = -1;
                }
                else if (v506)
                {
                  v473 = -1;
                }
                else
                {
                  v473 = 1;
                }
              }
              else
              {
                v470 = -v469;
                v471 = *v467 << v470 >> v470;
                v472 = (uint64_t)(*v468 << v470) >> v470;
                v81 = v471 < v472;
                v473 = v471 > v472;
                if (v81)
                  v473 = -1;
              }
              if (v473 < 0)
                goto LABEL_615;
            }
            else if (v464 < v465)
            {
              goto LABEL_615;
            }
LABEL_616:
            v372 = *(_DWORD *)(v362 + 104);
            v373 = *(_DWORD *)(v359 + 184 * v360 + 104);
            if (v372 != v373)
            {
              if (v372 < v373)
                goto LABEL_754;
              if (v373 < v372)
                goto LABEL_628;
              goto LABEL_625;
            }
            v374 = (uint64_t *)(v362 + 112);
            v375 = (uint64_t *)(v359 + 184 * v360 + 112);
            v376 = *(unsigned int *)(v362 + 120);
            if (v376 > 0x40)
            {
              v377 = *v374;
              v475 = *(_QWORD *)(*v374 + 8 * ((v376 - 1) >> 6)) & (1 << (v376 - 1));
              v379 = *(_DWORD *)(v359 + 184 * v360 + 120);
              v476 = v379 - 1;
              v378 = *v375;
              if (v379 >= 0x41)
                v375 = (uint64_t *)(*v375 + 8 * (v476 >> 6));
              if ((v475 != 0) == (((unint64_t)*v375 >> v476) & 1))
              {
                v479 = ((unint64_t)(v376 + 63) >> 3) & 0x3FFFFFF8;
                do
                {
                  if (!v479)
                    goto LABEL_620;
                  v480 = *(_QWORD *)(v377 + v479 - 8);
                  v481 = *(_QWORD *)(v378 + v479 - 8);
                  v479 -= 8;
                }
                while (v480 == v481);
                if (v480 <= v481)
                  goto LABEL_754;
              }
              else if (v475)
              {
                goto LABEL_754;
              }
            }
            else
            {
              v377 = *v374;
              v378 = *v375;
              if (*v374 << -(char)v376 >> -(char)v376 < *v375 << -(char)v376 >> -(char)v376)
                goto LABEL_754;
              v379 = *(_DWORD *)(v359 + 184 * v360 + 120);
            }
LABEL_620:
            if (v379 <= 0x40)
            {
              if (v378 << -(char)v379 >> -(char)v379 < v377 << -(char)v379 >> -(char)v379)
                goto LABEL_628;
LABEL_625:
              v380 = *(_DWORD *)(v362 + 144);
              v381 = *(_DWORD *)(v359 + 184 * v360 + 144);
              if (v380 == v381)
              {
                v382 = (uint64_t *)(v359 + 184 * v360 + 152);
                v383 = *(unsigned int *)(v362 + 160);
                if (v383 > 0x40)
                {
                  v482 = *(_QWORD *)(v362 + 152);
                  v483 = *(_QWORD *)(v482 + 8 * ((v383 - 1) >> 6)) & (1 << (v383 - 1));
                  v484 = *(_DWORD *)(v359 + 184 * v360 + 160);
                  v485 = v484 - 1;
                  v486 = *v382;
                  if (v484 >= 0x41)
                    v382 = (uint64_t *)(*v382 + 8 * (v485 >> 6));
                  if ((v483 != 0) == (((unint64_t)*v382 >> v485) & 1))
                  {
                    v494 = v383 + 63;
                    v495 = v486 - 8;
                    v496 = (v494 >> 3) & 0x3FFFFFF8;
                    v497 = v482 - 8;
                    do
                    {
                      if (!v496)
                        goto LABEL_628;
                      v498 = *(_QWORD *)(v497 + v496);
                      v499 = *(_QWORD *)(v495 + v496);
                      v496 -= 8;
                    }
                    while (v498 == v499);
                    if (v498 <= v499)
                      goto LABEL_754;
                  }
                  else if (v483)
                  {
                    goto LABEL_754;
                  }
                }
                else if ((uint64_t)(*(_QWORD *)(v362 + 152) << -(char)v383) >> -(char)v383 < *v382 << -(char)v383 >> -(char)v383)
                {
                  goto LABEL_754;
                }
              }
              else if (v380 < v381)
              {
                goto LABEL_754;
              }
              goto LABEL_628;
            }
            v487 = *(_QWORD *)(v378 + 8 * ((v379 - 1) >> 6)) & (1 << (v379 - 1));
            v488 = v376 - 1;
            if (v376 >= 0x41)
              v374 = (uint64_t *)(v377 + 8 * (v488 >> 6));
            if ((v487 != 0) != (((unint64_t)*v374 >> v488) & 1))
            {
              if (v487)
                goto LABEL_628;
              goto LABEL_625;
            }
            v500 = v377 - 8;
            v501 = (((unint64_t)v379 + 63) >> 3) & 0x3FFFFFF8;
            v502 = v378 - 8;
            do
            {
              if (!v501)
                goto LABEL_625;
              v503 = *(_QWORD *)(v502 + v501);
              v504 = *(_QWORD *)(v500 + v501);
              v501 -= 8;
            }
            while (v503 == v504);
            if (v503 > v504)
              goto LABEL_625;
LABEL_628:
            v384 = v359 + 184 * v360;
            v901 = *(_QWORD *)v384;
            v902 = 1;
            v903 = v871;
            v904 = v871;
            v905 = v871;
            v906 = v871;
            sub_1C629018C((unsigned int *)&v902, (unsigned int *)(v384 + 8));
            v907 = *(_QWORD *)(v384 + 80);
            v385 = *(_OWORD *)(v384 + 88);
            v909 = *(_DWORD *)(v384 + 104);
            v908 = v385;
            v911 = *(_DWORD *)(v384 + 120);
            v910 = *(_QWORD *)(v384 + 112);
            *(_DWORD *)(v384 + 120) = 0;
            v386 = *(_OWORD *)(v384 + 128);
            v913 = *(_DWORD *)(v384 + 144);
            v912 = v386;
            v915 = *(_DWORD *)(v384 + 160);
            v914 = *(_QWORD *)(v384 + 152);
            *(_DWORD *)(v384 + 160) = 0;
            v387 = v357;
            *v357 = *(_OWORD *)(v384 + 168);
            while (1)
            {
              v388 = v362;
              *(_QWORD *)v384 = *(_QWORD *)v362;
              v389 = v362 + 8;
              sub_1C6290124(v384 + 8, (unsigned int *)(v362 + 8));
              *(_QWORD *)(v384 + 80) = *(_QWORD *)(v362 + 80);
              sub_1C5BCD700(v384 + 88, v362 + 88);
              sub_1C5BCD700(v384 + 128, v362 + 128);
              *(_OWORD *)(v384 + 168) = *(_OWORD *)(v362 + 168);
              if (v356 < v361)
                break;
              v390 = (2 * v361) | 1;
              v362 = v862 + 184 * v390;
              if (2 * v361 + 2 < v6)
              {
                v391 = *(_DWORD *)(v862 + 184 * v390 + 104);
                v392 = *(_DWORD *)(v362 + 288);
                if (v391 != v392)
                {
                  if (v391 >= v392)
                  {
                    if (v392 < v391)
                      goto LABEL_640;
LABEL_656:
                    v408 = *(_DWORD *)(v862 + 184 * v390 + 144);
                    v409 = *(_DWORD *)(v362 + 328);
                    if (v408 == v409)
                    {
                      v410 = v862 + 184 * v390;
                      v411 = (uint64_t *)(v410 + 152);
                      v412 = (_QWORD *)(v362 + 336);
                      v413 = *(unsigned int *)(v410 + 160);
                      if (v413 > 0x40)
                      {
                        v445 = *v411;
                        v446 = *(_QWORD *)(v445 + 8 * ((v413 - 1) >> 6)) & (1 << (v413
                                                                                                  - 1));
                        v447 = *(_DWORD *)(v362 + 344);
                        v448 = v447 - 1;
                        v449 = *(_QWORD *)(v362 + 336);
                        if (v447 >= 0x41)
                          v412 = (_QWORD *)(v449 + 8 * (v448 >> 6));
                        if ((v446 != 0) == ((*v412 >> v448) & 1))
                        {
                          v455 = v413 + 63;
                          v456 = v449 - 8;
                          v457 = (v455 >> 3) & 0x3FFFFFF8;
                          v458 = v445 - 8;
                          do
                          {
                            if (!v457)
                              goto LABEL_640;
                            v459 = *(_QWORD *)(v458 + v457);
                            v460 = *(_QWORD *)(v456 + v457);
                            v457 -= 8;
                          }
                          while (v459 == v460);
                          if (v459 > v460)
                            v417 = 1;
                          else
                            v417 = -1;
                        }
                        else if (v446)
                        {
                          v417 = -1;
                        }
                        else
                        {
                          v417 = 1;
                        }
                      }
                      else
                      {
                        v414 = -v413;
                        v415 = *v411 << v414 >> v414;
                        v416 = (uint64_t)(*v412 << v414) >> v414;
                        v81 = v415 < v416;
                        v417 = v415 > v416;
                        if (v81)
                          v417 = -1;
                      }
                      if ((v417 & 0x80000000) == 0)
                        goto LABEL_640;
                    }
                    else if (v408 >= v409)
                    {
                      goto LABEL_640;
                    }
                  }
LABEL_639:
                  v362 += 184;
                  v390 = 2 * v361 + 2;
                  goto LABEL_640;
                }
                v393 = v862 + 184 * v390;
                v394 = (uint64_t *)(v393 + 112);
                v395 = (uint64_t *)(v362 + 296);
                v396 = *(unsigned int *)(v393 + 120);
                if (v396 > 0x40)
                {
                  v397 = *v394;
                  v420 = *(_QWORD *)(*v394 + 8 * ((v396 - 1) >> 6)) & (1 << (v396 - 1));
                  v399 = *(_DWORD *)(v362 + 304);
                  v421 = v399 - 1;
                  v398 = *(_QWORD *)(v362 + 296);
                  if (v399 >= 0x41)
                    v395 = (uint64_t *)(v398 + 8 * (v421 >> 6));
                  if ((v420 != 0) == (((unint64_t)*v395 >> v421) & 1))
                  {
                    v431 = ((unint64_t)(v396 + 63) >> 3) & 0x3FFFFFF8;
                    do
                    {
                      if (!v431)
                        goto LABEL_635;
                      v432 = *(_QWORD *)(v397 + v431 - 8);
                      v433 = *(_QWORD *)(v398 + v431 - 8);
                      v431 -= 8;
                    }
                    while (v432 == v433);
                    if (v432 <= v433)
                      goto LABEL_639;
                  }
                  else if (v420)
                  {
                    goto LABEL_639;
                  }
                }
                else
                {
                  v397 = *v394;
                  v398 = *v395;
                  if (*v394 << -(char)v396 >> -(char)v396 < *v395 << -(char)v396 >> -(char)v396)
                    goto LABEL_639;
                  v399 = *(_DWORD *)(v362 + 304);
                }
LABEL_635:
                if (v399 > 0x40)
                {
                  v434 = *(_QWORD *)(v398 + 8 * ((v399 - 1) >> 6)) & (1 << (v399 - 1));
                  v435 = v396 - 1;
                  if (v396 >= 0x41)
                    v394 = (uint64_t *)(v397 + 8 * (v435 >> 6));
                  if ((v434 != 0) == (((unint64_t)*v394 >> v435) & 1))
                  {
                    v450 = v397 - 8;
                    v451 = (((unint64_t)v399 + 63) >> 3) & 0x3FFFFFF8;
                    v452 = v398 - 8;
                    do
                    {
                      if (!v451)
                        goto LABEL_656;
                      v453 = *(_QWORD *)(v452 + v451);
                      v454 = *(_QWORD *)(v450 + v451);
                      v451 -= 8;
                    }
                    while (v453 == v454);
                    if (v453 <= v454)
                      goto LABEL_640;
                  }
                  else if (v434)
                  {
                    goto LABEL_640;
                  }
                  goto LABEL_656;
                }
                if (v398 << -(char)v399 >> -(char)v399 >= v397 << -(char)v399 >> -(char)v399)
                  goto LABEL_656;
              }
LABEL_640:
              v400 = *(_DWORD *)(v362 + 104);
              if (v400 == v909)
              {
                v401 = (uint64_t *)(v362 + 112);
                v402 = *(unsigned int *)(v362 + 120);
                if (v402 > 0x40)
                {
                  v403 = *v401;
                  v418 = *(_QWORD *)(*v401 + 8 * ((v402 - 1) >> 6)) & (1 << (v402 - 1));
                  v405 = v911;
                  v404 = v910;
                  v419 = (uint64_t *)(v910 + 8 * ((v911 - 1) >> 6));
                  if (v911 < 0x41)
                    v419 = &v910;
                  if ((v418 != 0) == (((unint64_t)*v419 >> (v911 - 1)) & 1))
                  {
                    v422 = ((unint64_t)(v402 + 63) >> 3) & 0x3FFFFFF8;
                    do
                    {
                      if (!v422)
                        goto LABEL_644;
                      v423 = *(_QWORD *)(v403 + v422 - 8);
                      v424 = *(_QWORD *)(v910 + v422 - 8);
                      v422 -= 8;
                    }
                    while (v423 == v424);
                    if (v423 <= v424)
                      break;
                  }
                  else if (v418)
                  {
                    break;
                  }
                }
                else
                {
                  v403 = *v401;
                  v404 = v910;
                  if (*v401 << -(char)v402 >> -(char)v402 < v910 << -(char)v402 >> -(char)v402)
                    break;
                  v405 = v911;
                }
LABEL_644:
                if (v405 > 0x40)
                {
                  v429 = *(_QWORD *)(v404 + 8 * ((v405 - 1) >> 6)) & (1 << (v405 - 1));
                  v430 = v402 - 1;
                  if (v402 >= 0x41)
                    v401 = (uint64_t *)(v403 + 8 * (v430 >> 6));
                  if ((v429 != 0) == (((unint64_t)*v401 >> v430) & 1))
                  {
                    v440 = v403 - 8;
                    v441 = (((unint64_t)v405 + 63) >> 3) & 0x3FFFFFF8;
                    v442 = v404 - 8;
                    do
                    {
                      if (!v441)
                        goto LABEL_649;
                      v443 = *(_QWORD *)(v442 + v441);
                      v444 = *(_QWORD *)(v440 + v441);
                      v441 -= 8;
                    }
                    while (v443 == v444);
                    v384 = v388;
                    v361 = v390;
                    if (v443 > v444)
                      goto LABEL_649;
                  }
                  else
                  {
                    v384 = v388;
                    v361 = v390;
                    if (!v429)
                    {
LABEL_649:
                      v406 = *(_DWORD *)(v362 + 144);
                      if (v406 == v913)
                      {
                        v407 = *(unsigned int *)(v362 + 160);
                        if (v407 > 0x40)
                        {
                          v425 = *(_QWORD *)(v362 + 152);
                          v426 = *(_QWORD *)(v425 + 8 * ((v407 - 1) >> 6)) & (1 << (v407 - 1));
                          v427 = v915 - 1;
                          v428 = &v914;
                          if (v915 >= 0x41)
                            v428 = (uint64_t *)(v914 + 8 * (v427 >> 6));
                          if ((v426 != 0) == (((unint64_t)*v428 >> v427) & 1))
                          {
                            v436 = ((unint64_t)(v407 + 63) >> 3) & 0x3FFFFFF8;
                            v437 = v425 - 8;
                            while (2)
                            {
                              if (v436)
                              {
                                v438 = *(_QWORD *)(v437 + v436);
                                v439 = *(_QWORD *)(v914 - 8 + v436);
                                v436 -= 8;
                                if (v438 == v439)
                                  continue;
                                v384 = v388;
                                v361 = v390;
                                if (v438 <= v439)
                                  goto LABEL_728;
                              }
                              else
                              {
                                v384 = v388;
                                v361 = v390;
                              }
                              break;
                            }
                          }
                          else
                          {
                            v384 = v388;
                            v361 = v390;
                            if (v426)
                              break;
                          }
                        }
                        else
                        {
                          v384 = v388;
                          v361 = v390;
                          if ((uint64_t)(*(_QWORD *)(v362 + 152) << -(char)v407) >> -(char)v407 < v914 << -(char)v407 >> -(char)v407)
                            break;
                        }
                      }
                      else
                      {
                        v384 = v388;
                        v361 = v390;
                        if (v406 < v913)
                          break;
                      }
                    }
                  }
                }
                else
                {
                  v384 = v388;
                  v361 = v390;
                  if (v404 << -(char)v405 >> -(char)v405 >= v403 << -(char)v405 >> -(char)v405)
                    goto LABEL_649;
                }
              }
              else
              {
                if (v400 < v909)
                  break;
                v384 = v388;
                v361 = v390;
                if (v909 >= v400)
                  goto LABEL_649;
              }
            }
LABEL_728:
            v461 = (__int128 *)(v388 + 168);
            *(_QWORD *)v388 = v901;
            sub_1C6290124(v389, (unsigned int *)&v902);
            *(_QWORD *)(v388 + 80) = v907;
            if ((uint64_t *)v388 == &v901)
            {
              v474 = v915;
              v357 = v387;
              *v461 = *v387;
              if (v474 >= 0x41 && v914)
                MEMORY[0x1CAA32F9C](v914, 0x1000C8000313F17);
            }
            else
            {
              *(_OWORD *)(v388 + 88) = v908;
              *(_DWORD *)(v388 + 104) = v909;
              v357 = v387;
              if (*(_DWORD *)(v388 + 120) >= 0x41u)
              {
                v462 = *(_QWORD *)(v388 + 112);
                if (v462)
                  MEMORY[0x1CAA32F9C](v462, 0x1000C8000313F17);
              }
              *(_QWORD *)(v388 + 112) = v910;
              *(_DWORD *)(v388 + 120) = v911;
              v911 = 0;
              *(_OWORD *)(v388 + 128) = v912;
              *(_DWORD *)(v388 + 144) = v913;
              if (*(_DWORD *)(v388 + 160) >= 0x41u)
              {
                v463 = *(_QWORD *)(v388 + 152);
                if (v463)
                  MEMORY[0x1CAA32F9C](v463, 0x1000C8000313F17);
              }
              *(_QWORD *)(v388 + 152) = v914;
              *(_DWORD *)(v388 + 160) = v915;
              v915 = 0;
              *v461 = *v387;
            }
            v359 = v862;
            if (v911 >= 0x41 && v910)
              MEMORY[0x1CAA32F9C](v910, 0x1000C8000313F17);
            if ((v902 & 1) == 0)
              MEMORY[0x1CAA32FB4](v903.i64[0], 8);
LABEL_754:
            v358 = v360 - 1;
            if (!v360)
            {
              v856 = v359 + 88;
              v857 = (unsigned int *)(v359 + 8);
              v854 = (__int128 *)(v359 + 168);
              v855 = v359 + 128;
              v859 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
              v521 = v860;
              while (1)
              {
                v861 = v521;
                v522 = v862;
                v885 = *(_QWORD *)v862;
                v886 = 1;
                v887 = v859;
                v888 = v859;
                v889 = v859;
                v890 = v859;
                sub_1C629018C((unsigned int *)&v886, v857);
                v523 = 0;
                v524 = *(_QWORD *)(v862 + 80);
                v525 = *(_OWORD *)v856;
                v893 = *(_DWORD *)(v856 + 16);
                v892 = v525;
                v895 = *(_DWORD *)(v862 + 120);
                v526 = *(_QWORD *)(v862 + 112);
                v891 = v524;
                v894 = v526;
                *(_DWORD *)(v862 + 120) = 0;
                v527 = *(_OWORD *)v855;
                v897 = *(_DWORD *)(v855 + 16);
                v896 = v527;
                v899 = *(_DWORD *)(v862 + 160);
                v898 = *(_QWORD *)(v862 + 152);
                *(_DWORD *)(v862 + 160) = 0;
                v900 = *v854;
                do
                {
                  v528 = v522;
                  v529 = v523 + 1;
                  v522 += 184 * (v523 + 1);
                  v530 = 2 * v523;
                  v523 = (2 * v523) | 1;
                  v531 = v530 + 2;
                  if (v531 >= v6)
                    goto LABEL_831;
                  v532 = *(_DWORD *)(v528 + 184 * v529 + 104);
                  v533 = *(_DWORD *)(v522 + 288);
                  if (v532 == v533)
                  {
                    v534 = v528 + 184 * v529;
                    v535 = (uint64_t *)(v534 + 112);
                    v536 = (uint64_t *)(v522 + 296);
                    v537 = *(unsigned int *)(v534 + 120);
                    if (v537 > 0x40)
                    {
                      v538 = *v535;
                      v551 = *(_QWORD *)(*v535 + 8 * ((v537 - 1) >> 6)) & (1 << (v537
                                                                                                 - 1));
                      v540 = *(_DWORD *)(v522 + 304);
                      v552 = v540 - 1;
                      v539 = *(_QWORD *)(v522 + 296);
                      if (v540 >= 0x41)
                        v536 = (uint64_t *)(v539 + 8 * (v552 >> 6));
                      if ((v551 != 0) == (((unint64_t)*v536 >> v552) & 1))
                      {
                        v553 = ((unint64_t)(v537 + 63) >> 3) & 0x3FFFFFF8;
                        do
                        {
                          if (!v553)
                            goto LABEL_826;
                          v554 = *(_QWORD *)(v538 + v553 - 8);
                          v555 = *(_QWORD *)(v539 + v553 - 8);
                          v553 -= 8;
                        }
                        while (v554 == v555);
                        if (v554 <= v555)
                        {
LABEL_830:
                          v522 += 184;
                          v523 = v531;
                          goto LABEL_831;
                        }
                      }
                      else if (v551)
                      {
                        goto LABEL_830;
                      }
                    }
                    else
                    {
                      v538 = *v535;
                      v539 = *v536;
                      if (*v535 << -(char)v537 >> -(char)v537 < *v536 << -(char)v537 >> -(char)v537)
                        goto LABEL_830;
                      v540 = *(_DWORD *)(v522 + 304);
                    }
LABEL_826:
                    if (v540 > 0x40)
                    {
                      v556 = *(_QWORD *)(v539 + 8 * ((v540 - 1) >> 6)) & (1 << (v540 - 1));
                      v557 = v537 - 1;
                      if (v537 >= 0x41)
                        v535 = (uint64_t *)(v538 + 8 * (v557 >> 6));
                      if ((v556 != 0) == (((unint64_t)*v535 >> v557) & 1))
                      {
                        v563 = v538 - 8;
                        v564 = (((unint64_t)v540 + 63) >> 3) & 0x3FFFFFF8;
                        v565 = v539 - 8;
                        do
                        {
                          if (!v564)
                            goto LABEL_834;
                          v566 = *(_QWORD *)(v565 + v564);
                          v567 = *(_QWORD *)(v563 + v564);
                          v564 -= 8;
                        }
                        while (v566 == v567);
                        if (v566 <= v567)
                          goto LABEL_831;
                      }
                      else if (v556)
                      {
                        goto LABEL_831;
                      }
                    }
                    else if (v539 << -(char)v540 >> -(char)v540 < v538 << -(char)v540 >> -(char)v540)
                    {
                      goto LABEL_831;
                    }
                  }
                  else
                  {
                    if (v532 < v533)
                      goto LABEL_830;
                    if (v533 < v532)
                      goto LABEL_831;
                  }
LABEL_834:
                  v541 = *(_DWORD *)(v528 + 184 * v529 + 144);
                  v542 = *(_DWORD *)(v522 + 328);
                  if (v541 == v542)
                  {
                    v543 = v528 + 184 * v529;
                    v544 = (uint64_t *)(v543 + 152);
                    v545 = (_QWORD *)(v522 + 336);
                    v546 = *(unsigned int *)(v543 + 160);
                    if (v546 > 0x40)
                    {
                      v558 = *v544;
                      v559 = *(_QWORD *)(v558 + 8 * ((v546 - 1) >> 6)) & (1 << (v546
                                                                                                - 1));
                      v560 = *(_DWORD *)(v522 + 344);
                      v561 = v560 - 1;
                      v562 = *(_QWORD *)(v522 + 336);
                      if (v560 >= 0x41)
                        v545 = (_QWORD *)(v562 + 8 * (v561 >> 6));
                      if ((v559 != 0) == ((*v545 >> v561) & 1))
                      {
                        v568 = v546 + 63;
                        v569 = v562 - 8;
                        v570 = (v568 >> 3) & 0x3FFFFFF8;
                        v571 = v558 - 8;
                        do
                        {
                          if (!v570)
                            goto LABEL_831;
                          v572 = *(_QWORD *)(v571 + v570);
                          v573 = *(_QWORD *)(v569 + v570);
                          v570 -= 8;
                        }
                        while (v572 == v573);
                        if (v572 > v573)
                          v550 = 1;
                        else
                          v550 = -1;
                      }
                      else if (v559)
                      {
                        v550 = -1;
                      }
                      else
                      {
                        v550 = 1;
                      }
                    }
                    else
                    {
                      v547 = -v546;
                      v548 = *v544 << v547 >> v547;
                      v549 = (uint64_t)(*v545 << v547) >> v547;
                      v81 = v548 < v549;
                      v550 = v548 > v549;
                      if (v81)
                        v550 = -1;
                    }
                    if (v550 < 0)
                      goto LABEL_830;
                  }
                  else if (v541 < v542)
                  {
                    goto LABEL_830;
                  }
LABEL_831:
                  *(_QWORD *)v528 = *(_QWORD *)v522;
                  sub_1C6290124(v528 + 8, (unsigned int *)(v522 + 8));
                  *(_QWORD *)(v528 + 80) = *(_QWORD *)(v522 + 80);
                  sub_1C5BCD700(v528 + 88, v522 + 88);
                  sub_1C5BCD700(v528 + 128, v522 + 128);
                  *(_OWORD *)(v528 + 168) = *(_OWORD *)(v522 + 168);
                }
                while (v523 <= (uint64_t)((unint64_t)(v6 - 2) >> 1));
                v574 = (__int128 *)(v522 + 168);
                if (v522 == v861 - 184)
                {
                  *(_QWORD *)v522 = v885;
                  result = sub_1C6290124(v522 + 8, (unsigned int *)&v886);
                  *(_QWORD *)(v522 + 80) = v891;
                  if ((uint64_t *)v522 != &v885)
                  {
                    *(_OWORD *)(v522 + 88) = v892;
                    *(_DWORD *)(v522 + 104) = v893;
                    if (*(_DWORD *)(v522 + 120) >= 0x41u)
                    {
                      result = *(_QWORD *)(v522 + 112);
                      if (result)
                        result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                    }
                    *(_QWORD *)(v522 + 112) = v894;
                    *(_DWORD *)(v522 + 120) = v895;
                    v895 = 0;
                    *(_OWORD *)(v522 + 128) = v896;
                    *(_DWORD *)(v522 + 144) = v897;
                    if (*(_DWORD *)(v522 + 160) >= 0x41u)
                    {
                      result = *(_QWORD *)(v522 + 152);
                      if (result)
                        result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                    }
                    *(_QWORD *)(v522 + 152) = v898;
                    *(_DWORD *)(v522 + 160) = v899;
                    v899 = 0;
                  }
                  *v574 = v900;
                  goto LABEL_971;
                }
                *(_QWORD *)v522 = *(_QWORD *)(v861 - 184);
                sub_1C6290124(v522 + 8, (unsigned int *)(v861 - 176));
                *(_QWORD *)(v522 + 80) = *(_QWORD *)(v861 - 104);
                sub_1C5BCD700(v522 + 88, v861 - 96);
                sub_1C5BCD700(v522 + 128, v861 - 56);
                *v574 = *(_OWORD *)(v861 - 16);
                *(_QWORD *)(v861 - 184) = v885;
                result = sub_1C6290124(v861 - 176, (unsigned int *)&v886);
                v575 = v861;
                *(_QWORD *)(v861 - 104) = v891;
                if ((__int128 *)(v861 - 96) != &v892)
                {
                  *(_OWORD *)(v861 - 96) = v892;
                  *(_DWORD *)(v861 - 80) = v893;
                  if (*(_DWORD *)(v861 - 64) >= 0x41u)
                  {
                    result = *(_QWORD *)(v861 - 72);
                    if (result)
                    {
                      result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                      v575 = v861;
                    }
                  }
                  *(_QWORD *)(v575 - 72) = v894;
                  *(_DWORD *)(v575 - 64) = v895;
                  v895 = 0;
                }
                if ((__int128 *)(v861 - 56) != &v896)
                {
                  *(_OWORD *)(v575 - 56) = v896;
                  *(_DWORD *)(v575 - 40) = v897;
                  if (*(_DWORD *)(v575 - 24) >= 0x41u)
                  {
                    result = *(_QWORD *)(v575 - 32);
                    if (result)
                    {
                      result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                      v575 = v861;
                    }
                  }
                  *(_QWORD *)(v575 - 32) = v898;
                  *(_DWORD *)(v575 - 24) = v899;
                  v899 = 0;
                }
                *(_OWORD *)(v575 - 16) = v900;
                v576 = v522 + 184 - v862;
                if (v576 < 185)
                  goto LABEL_971;
                v577 = (v576 / 0xB8uLL - 2) >> 1;
                v578 = *(_DWORD *)(v862 + 184 * v577 + 104);
                v579 = *(_DWORD *)(v522 + 104);
                if (v578 == v579)
                {
                  v580 = v862 + 184 * v577;
                  v581 = (uint64_t *)(v580 + 112);
                  v582 = (uint64_t *)(v522 + 112);
                  v583 = *(unsigned int *)(v580 + 120);
                  if (v583 <= 0x40)
                  {
                    v584 = *v581;
                    v585 = *v582;
                    if (*v581 << -(char)v583 >> -(char)v583 >= *v582 << -(char)v583 >> -(char)v583)
                    {
                      v586 = *(_DWORD *)(v522 + 120);
                      goto LABEL_900;
                    }
LABEL_908:
                    v901 = *(_QWORD *)v522;
                    v902 = 1;
                    v903 = v859;
                    v904 = v859;
                    v905 = v859;
                    v906 = v859;
                    sub_1C629018C((unsigned int *)&v902, (unsigned int *)(v522 + 8));
                    v593 = *(_QWORD *)(v522 + 80);
                    v594 = *(_OWORD *)(v522 + 88);
                    v909 = *(_DWORD *)(v522 + 104);
                    v908 = v594;
                    v911 = *(_DWORD *)(v522 + 120);
                    v595 = *(_QWORD *)(v522 + 112);
                    v907 = v593;
                    v910 = v595;
                    *(_DWORD *)(v522 + 120) = 0;
                    v596 = *(_OWORD *)(v522 + 128);
                    v913 = *(_DWORD *)(v522 + 144);
                    v912 = v596;
                    v915 = *(_DWORD *)(v522 + 160);
                    v914 = *(_QWORD *)(v522 + 152);
                    *(_DWORD *)(v522 + 160) = 0;
                    v916 = *v574;
                    while (1)
                    {
                      v597 = v577;
                      v598 = v522;
                      v522 = v862 + 184 * v597;
                      *(_QWORD *)v598 = *(_QWORD *)v522;
                      sub_1C6290124(v598 + 8, (unsigned int *)(v522 + 8));
                      *(_QWORD *)(v598 + 80) = *(_QWORD *)(v522 + 80);
                      sub_1C5BCD700(v598 + 88, v522 + 88);
                      sub_1C5BCD700(v598 + 128, v522 + 128);
                      *(_OWORD *)(v598 + 168) = *(_OWORD *)(v522 + 168);
                      if (!v597)
                      {
LABEL_954:
                        *(_QWORD *)v522 = v901;
                        result = sub_1C6290124(v522 + 8, (unsigned int *)&v902);
                        *(_QWORD *)(v522 + 80) = v907;
                        if ((uint64_t *)v522 != &v901)
                        {
                          *(_OWORD *)(v522 + 88) = v908;
                          v630 = v862 + 184 * v597;
                          v632 = *(_DWORD *)(v630 + 120);
                          v631 = (unsigned int *)(v630 + 120);
                          *(v631 - 4) = v909;
                          v633 = (uint64_t *)(v631 - 2);
                          if (v632 >= 0x41)
                          {
                            result = *v633;
                            if (*v633)
                              result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                          }
                          *v633 = v910;
                          *v631 = v911;
                          v911 = 0;
                          *(_OWORD *)(v522 + 128) = v912;
                          v634 = v862 + 184 * v597;
                          v636 = *(_DWORD *)(v634 + 160);
                          v635 = (unsigned int *)(v634 + 160);
                          *(v635 - 4) = v913;
                          v637 = (uint64_t *)(v635 - 2);
                          if (v636 >= 0x41)
                          {
                            result = *v637;
                            if (*v637)
                              result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
                          }
                          *v637 = v914;
                          *v635 = v915;
                          v915 = 0;
                        }
                        *(_OWORD *)(v522 + 168) = v916;
                        if (v915 >= 0x41)
                        {
                          result = v914;
                          if (v914)
                            result = MEMORY[0x1CAA32F9C](v914, 0x1000C8000313F17);
                        }
                        if (v911 >= 0x41)
                        {
                          result = v910;
                          if (v910)
                            result = MEMORY[0x1CAA32F9C](v910, 0x1000C8000313F17);
                        }
                        if ((v902 & 1) == 0)
                          result = MEMORY[0x1CAA32FB4](v903.i64[0], 8);
                        goto LABEL_971;
                      }
                      v577 = (v597 - 1) >> 1;
                      v599 = *(_DWORD *)(v862 + 184 * v577 + 104);
                      if (v599 == v909)
                      {
                        v600 = v862 + 184 * v577;
                        v601 = (uint64_t *)(v600 + 112);
                        v602 = *(unsigned int *)(v600 + 120);
                        if (v602 > 0x40)
                        {
                          v603 = *v601;
                          v610 = *(_QWORD *)(*v601 + 8 * ((v602 - 1) >> 6)) & (1 << (v602 - 1));
                          v605 = v911;
                          v604 = v910;
                          v611 = (uint64_t *)(v910 + 8 * ((v911 - 1) >> 6));
                          if (v911 < 0x41)
                            v611 = &v910;
                          if ((v610 != 0) == (((unint64_t)*v611 >> (v911 - 1)) & 1))
                          {
                            v612 = ((unint64_t)(v602 + 63) >> 3) & 0x3FFFFFF8;
                            do
                            {
                              if (!v612)
                                goto LABEL_914;
                              v613 = *(_QWORD *)(v603 + v612 - 8);
                              v614 = *(_QWORD *)(v910 + v612 - 8);
                              v612 -= 8;
                            }
                            while (v613 == v614);
                            if (v613 <= v614)
                              continue;
                          }
                          else if (v610)
                          {
                            continue;
                          }
                        }
                        else
                        {
                          v603 = *v601;
                          v604 = v910;
                          if (*v601 << -(char)v602 >> -(char)v602 < v910 << -(char)v602 >> -(char)v602)
                            continue;
                          v605 = v911;
                        }
LABEL_914:
                        if (v605 > 0x40)
                        {
                          v619 = *(_QWORD *)(v604 + 8 * ((v605 - 1) >> 6)) & (1 << (v605 - 1));
                          v620 = v602 - 1;
                          if (v602 >= 0x41)
                            v601 = (uint64_t *)(v603 + 8 * (v620 >> 6));
                          if ((v619 != 0) == (((unint64_t)*v601 >> v620) & 1))
                          {
                            v625 = v603 - 8;
                            v626 = (((unint64_t)v605 + 63) >> 3) & 0x3FFFFFF8;
                            v627 = v604 - 8;
                            do
                            {
                              if (!v626)
                                goto LABEL_919;
                              v628 = *(_QWORD *)(v627 + v626);
                              v629 = *(_QWORD *)(v625 + v626);
                              v626 -= 8;
                            }
                            while (v628 == v629);
                            if (v628 <= v629)
                              goto LABEL_954;
                          }
                          else if (v619)
                          {
                            goto LABEL_954;
                          }
                        }
                        else if (v604 << -(char)v605 >> -(char)v605 < v603 << -(char)v605 >> -(char)v605)
                        {
                          goto LABEL_954;
                        }
                      }
                      else
                      {
                        if (v599 < v909)
                          continue;
                        if (v909 < v599)
                          goto LABEL_954;
                      }
LABEL_919:
                      v606 = *(_DWORD *)(v862 + 184 * v577 + 144);
                      if (v606 == v913)
                      {
                        v607 = v862 + 184 * v577;
                        v608 = (uint64_t *)(v607 + 152);
                        v609 = *(unsigned int *)(v607 + 160);
                        if (v609 > 0x40)
                        {
                          v615 = *v608;
                          v616 = *(_QWORD *)(v615 + 8 * ((v609 - 1) >> 6)) & (1 << (v609 - 1));
                          v617 = v915 - 1;
                          v618 = &v914;
                          if (v915 >= 0x41)
                            v618 = (uint64_t *)(v914 + 8 * (v617 >> 6));
                          if ((v616 != 0) == (((unint64_t)*v618 >> v617) & 1))
                          {
                            v621 = ((unint64_t)(v609 + 63) >> 3) & 0x3FFFFFF8;
                            v622 = v615 - 8;
                            do
                            {
                              if (!v621)
                                goto LABEL_954;
                              v623 = *(_QWORD *)(v622 + v621);
                              v624 = *(_QWORD *)(v914 - 8 + v621);
                              v621 -= 8;
                            }
                            while (v623 == v624);
                            if (v623 > v624)
                              goto LABEL_954;
                          }
                          else if (!v616)
                          {
                            goto LABEL_954;
                          }
                        }
                        else if (*v608 << -(char)v609 >> -(char)v609 >= v914 << -(char)v609 >> -(char)v609)
                        {
                          goto LABEL_954;
                        }
                      }
                      else if (v606 >= v913)
                      {
                        goto LABEL_954;
                      }
                    }
                  }
                  v584 = *v581;
                  v638 = *(_QWORD *)(*v581 + 8 * ((v583 - 1) >> 6)) & (1 << (v583 - 1));
                  v586 = *(_DWORD *)(v522 + 120);
                  v639 = v586 - 1;
                  v585 = *(_QWORD *)(v522 + 112);
                  if (v586 >= 0x41)
                    v582 = (uint64_t *)(v585 + 8 * (v639 >> 6));
                  if ((v638 != 0) == (((unint64_t)*v582 >> v639) & 1))
                  {
                    v640 = ((unint64_t)(v583 + 63) >> 3) & 0x3FFFFFF8;
                    do
                    {
                      if (!v640)
                        goto LABEL_900;
                      v641 = *(_QWORD *)(v584 + v640 - 8);
                      v642 = *(_QWORD *)(v585 + v640 - 8);
                      v640 -= 8;
                    }
                    while (v641 == v642);
                    if (v641 <= v642)
                      goto LABEL_908;
                  }
                  else if (v638)
                  {
                    goto LABEL_908;
                  }
LABEL_900:
                  if (v586 > 0x40)
                  {
                    v648 = *(_QWORD *)(v585 + 8 * ((v586 - 1) >> 6)) & (1 << (v586 - 1));
                    v649 = v583 - 1;
                    if (v583 >= 0x41)
                      v581 = (uint64_t *)(v584 + 8 * (v649 >> 6));
                    if ((v648 != 0) == (((unint64_t)*v581 >> v649) & 1))
                    {
                      v656 = v584 - 8;
                      v657 = (((unint64_t)v586 + 63) >> 3) & 0x3FFFFFF8;
                      v658 = v585 - 8;
                      do
                      {
                        if (!v657)
                          goto LABEL_905;
                        v659 = *(_QWORD *)(v658 + v657);
                        v660 = *(_QWORD *)(v656 + v657);
                        v657 -= 8;
                      }
                      while (v659 == v660);
                      if (v659 > v660)
                        goto LABEL_905;
                    }
                    else if (!v648)
                    {
LABEL_905:
                      v587 = *(_DWORD *)(v862 + 184 * v577 + 144);
                      v588 = *(_DWORD *)(v522 + 144);
                      if (v587 == v588)
                      {
                        v589 = v862 + 184 * v577;
                        v590 = (uint64_t *)(v589 + 152);
                        v591 = (_QWORD *)(v522 + 152);
                        v592 = *(unsigned int *)(v589 + 160);
                        if (v592 > 0x40)
                        {
                          v643 = *v590;
                          v644 = *(_QWORD *)(v643 + 8 * ((v592 - 1) >> 6)) & (1 << (v592 - 1));
                          v645 = *(_DWORD *)(v522 + 160);
                          v646 = v645 - 1;
                          v647 = *(_QWORD *)(v522 + 152);
                          if (v645 >= 0x41)
                            v591 = (_QWORD *)(v647 + 8 * (v646 >> 6));
                          if ((v644 != 0) == ((*v591 >> v646) & 1))
                          {
                            v650 = v592 + 63;
                            v651 = v647 - 8;
                            v652 = (v650 >> 3) & 0x3FFFFFF8;
                            v653 = v643 - 8;
                            do
                            {
                              if (!v652)
                                goto LABEL_971;
                              v654 = *(_QWORD *)(v653 + v652);
                              v655 = *(_QWORD *)(v651 + v652);
                              v652 -= 8;
                            }
                            while (v654 == v655);
                            if (v654 <= v655)
                              goto LABEL_908;
                          }
                          else if (v644)
                          {
                            goto LABEL_908;
                          }
                        }
                        else if (*v590 << -(char)v592 >> -(char)v592 < (uint64_t)(*v591 << -(char)v592) >> -(char)v592)
                        {
                          goto LABEL_908;
                        }
                      }
                      else if (v587 < v588)
                      {
                        goto LABEL_908;
                      }
                    }
                  }
                  else if (v585 << -(char)v586 >> -(char)v586 >= v584 << -(char)v586 >> -(char)v586)
                  {
                    goto LABEL_905;
                  }
                }
                else
                {
                  if (v578 < v579)
                    goto LABEL_908;
                  if (v579 >= v578)
                    goto LABEL_905;
                }
LABEL_971:
                if (v899 >= 0x41)
                {
                  result = v898;
                  if (v898)
                    result = MEMORY[0x1CAA32F9C](v898, 0x1000C8000313F17);
                }
                if (v895 >= 0x41)
                {
                  result = v894;
                  if (v894)
                    result = MEMORY[0x1CAA32F9C](v894, 0x1000C8000313F17);
                }
                if ((v886 & 1) == 0)
                  result = MEMORY[0x1CAA32FB4](v887.i64[0], 8);
                v521 = v861 - 184;
                v81 = v6-- <= 2;
                if (v81)
                  return result;
              }
            }
          }
        }
        v7 = (unint64_t)v6 >> 1;
        v8 = (uint64_t *)(v4 + 184 * ((unint64_t)v6 >> 1));
        if ((unint64_t)v5 < 0x5C01)
        {
          sub_1C5BD3560((uint64_t)v8, v4, (uint64_t)v853);
        }
        else
        {
          sub_1C5BD3560(v4, (uint64_t)v8, (uint64_t)v853);
          v9 = 184 * v7;
          sub_1C5BD3560(v4 + 184, v9 + v4 - 184, v851);
          sub_1C5BD3560(v4 + 368, v4 + 184 + v9, v850);
          sub_1C5BD3560(v9 + v4 - 184, (uint64_t)v8, v4 + 184 + v9);
          sub_1C5BD4D10((uint64_t *)v4, v8);
        }
        v10 = v4;
        --a3;
        if ((a4 & 1) != 0)
          goto LABEL_30;
        v11 = *(_DWORD *)(v4 - 80);
        v12 = *(_DWORD *)(v4 + 104);
        if (v11 != v12)
        {
          if (v11 < v12)
            goto LABEL_30;
          if (v12 < v11)
            goto LABEL_22;
          goto LABEL_19;
        }
        v13 = (uint64_t *)(v4 - 72);
        v14 = (uint64_t *)(v4 + 112);
        v15 = *(unsigned int *)(v4 - 64);
        if (v15 <= 0x40)
        {
          v16 = *v13;
          v17 = *v14;
          if (*v13 << -(char)v15 >> -(char)v15 < *v14 << -(char)v15 >> -(char)v15)
            goto LABEL_30;
          v18 = *(_DWORD *)(v4 + 120);
          goto LABEL_14;
        }
        v16 = *(_QWORD *)(v4 - 72);
        v204 = *(_QWORD *)(v16 + 8 * ((v15 - 1) >> 6)) & (1 << (v15 - 1));
        v18 = *(_DWORD *)(v4 + 120);
        v205 = v18 - 1;
        v17 = *(_QWORD *)(v4 + 112);
        if (v18 >= 0x41)
          v14 = (uint64_t *)(v17 + 8 * (v205 >> 6));
        if ((v204 != 0) != (((unint64_t)*v14 >> v205) & 1))
        {
          if (v204)
            goto LABEL_30;
LABEL_14:
          if (v18 > 0x40)
          {
            v323 = *(_QWORD *)(v17 + 8 * ((v18 - 1) >> 6)) & (1 << (v18 - 1));
            v324 = v15 - 1;
            if (v15 >= 0x41)
              v13 = (uint64_t *)(v16 + 8 * (v324 >> 6));
            if ((v323 != 0) == (((unint64_t)*v13 >> v324) & 1))
            {
              v333 = v16 - 8;
              v334 = (((unint64_t)v18 + 63) >> 3) & 0x3FFFFFF8;
              v335 = v17 - 8;
              do
              {
                if (!v334)
                  goto LABEL_19;
                v336 = *(_QWORD *)(v335 + v334);
                v337 = *(_QWORD *)(v333 + v334);
                v334 -= 8;
              }
              while (v336 == v337);
              if (v336 <= v337)
                goto LABEL_22;
            }
            else if (v323)
            {
              goto LABEL_22;
            }
          }
          else if (v17 << -(char)v18 >> -(char)v18 < v16 << -(char)v18 >> -(char)v18)
          {
            goto LABEL_22;
          }
LABEL_19:
          v19 = *(_DWORD *)(v4 - 40);
          v20 = *(_DWORD *)(v4 + 144);
          if (v19 == v20)
          {
            v21 = *(unsigned int *)(v4 - 24);
            if (v21 > 0x40)
            {
              v317 = (_QWORD *)(v4 + 152);
              v318 = *(_QWORD *)(v4 - 32);
              v319 = *(_QWORD *)(v318 + 8 * ((v21 - 1) >> 6)) & (1 << (v21 - 1));
              v320 = *(_DWORD *)(v4 + 160);
              v321 = v320 - 1;
              v322 = *(_QWORD *)(v4 + 152);
              if (v320 >= 0x41)
                v317 = (_QWORD *)(v322 + 8 * (v321 >> 6));
              if ((v319 != 0) == ((*v317 >> v321) & 1))
              {
                v327 = v21 + 63;
                v328 = v322 - 8;
                v329 = (v327 >> 3) & 0x3FFFFFF8;
                v330 = v318 - 8;
                do
                {
                  if (!v329)
                    goto LABEL_22;
                  v331 = *(_QWORD *)(v330 + v329);
                  v332 = *(_QWORD *)(v328 + v329);
                  v329 -= 8;
                }
                while (v331 == v332);
                if (v331 <= v332)
                  goto LABEL_30;
              }
              else if (v319)
              {
                goto LABEL_30;
              }
            }
            else if ((uint64_t)(*(_QWORD *)(v4 - 32) << -(char)v21) >> -(char)v21 < (uint64_t)(*(_QWORD *)(v4 + 152) << -(char)v21) >> -(char)v21)
            {
              goto LABEL_30;
            }
          }
          else if (v19 < v20)
          {
            goto LABEL_30;
          }
LABEL_22:
          v901 = *(_QWORD *)v4;
          v902 = 1;
          v903 = v852;
          v904 = v852;
          v905 = v852;
          v906 = v852;
          sub_1C629018C((unsigned int *)&v902, (unsigned int *)(v4 + 8));
          v22 = *(_QWORD *)(v4 + 80);
          v23 = *(_OWORD *)(v4 + 88);
          v909 = *(_DWORD *)(v4 + 104);
          v908 = v23;
          v911 = *(_DWORD *)(v4 + 120);
          v24 = *(_QWORD *)(v4 + 112);
          v907 = v22;
          v910 = v24;
          *(_DWORD *)(v4 + 120) = 0;
          v25 = *(_OWORD *)(v4 + 128);
          v913 = *(_DWORD *)(v4 + 144);
          v912 = v25;
          v915 = *(_DWORD *)(v4 + 160);
          v26 = *(_QWORD *)(v4 + 152);
          v914 = v26;
          *(_DWORD *)(v4 + 160) = 0;
          v916 = *(_OWORD *)(v4 + 168);
          v27 = *(_DWORD *)(v860 - 80);
          v848 = v4 + 8;
          if (v909 == v27)
          {
            if (v911 > 0x40)
            {
              v325 = *(_QWORD *)(v24 + 8 * ((v911 - 1) >> 6)) & (1 << (v911 - 1));
              v29 = *(_DWORD *)(v860 - 64);
              v28 = *(_QWORD *)(v860 - 72);
              v326 = (_QWORD *)(v28 + 8 * ((v29 - 1) >> 6));
              if (v29 < 0x41)
                v326 = v845;
              if ((v325 != 0) == ((*v326 >> (v29 - 1)) & 1))
              {
                v338 = (((unint64_t)v911 + 63) >> 3) & 0x3FFFFFF8;
                do
                {
                  if (!v338)
                    goto LABEL_26;
                  v339 = *(_QWORD *)(v24 - 8 + v338);
                  v340 = *(_QWORD *)(v28 + v338 - 8);
                  v338 -= 8;
                }
                while (v339 == v340);
                if (v339 > v340)
                  goto LABEL_26;
              }
              else if (!v325)
              {
                goto LABEL_26;
              }
            }
            else
            {
              v28 = *v845;
              if (v24 << -(char)v911 >> -(char)v911 >= (uint64_t)(*v845 << -(char)v911) >> -(char)v911)
              {
                v29 = *(_DWORD *)(v860 - 64);
LABEL_26:
                if (v29 <= 0x40)
                {
                  if (v28 << -(char)v29 >> -(char)v29 < v24 << -(char)v29 >> -(char)v29)
                    goto LABEL_340;
                  goto LABEL_330;
                }
                v341 = *(_QWORD *)(v28 + 8 * ((v29 - 1) >> 6)) & (1 << (v29 - 1));
                v342 = v911 - 1;
                if (v911 >= 0x41)
                  v343 = (uint64_t *)(v24 + 8 * (v342 >> 6));
                else
                  v343 = &v910;
                if ((v341 != 0) != (((unint64_t)*v343 >> v342) & 1))
                {
                  if (v341)
                    goto LABEL_340;
LABEL_330:
                  v203 = *(_DWORD *)(v860 - 40);
                  if (v913 == v203)
                  {
                    if (v915 > 0x40)
                    {
                      v344 = *(_QWORD *)(v26 + 8 * ((v915 - 1) >> 6)) & (1 << (v915 - 1));
                      v345 = *(_DWORD *)(v860 - 24);
                      v346 = v345 - 1;
                      v347 = *(_QWORD *)(v860 - 32);
                      v83 = v345 >= 0x41;
                      v348 = v844;
                      if (v83)
                        v348 = (_QWORD *)(v347 + 8 * (v346 >> 6));
                      if ((v344 != 0) == ((*v348 >> v346) & 1))
                      {
                        v353 = (((unint64_t)v915 + 63) >> 3) & 0x3FFFFFF8;
                        do
                        {
                          if (!v353)
                            goto LABEL_340;
                          v354 = *(_QWORD *)(v26 - 8 + v353);
                          v355 = *(_QWORD *)(v347 - 8 + v353);
                          v353 -= 8;
                        }
                        while (v354 == v355);
                        if (v354 > v355)
                          goto LABEL_340;
                      }
                      else if (!v344)
                      {
                        goto LABEL_340;
                      }
                    }
                    else if (v26 << -(uint64_t)v915 >> -(uint64_t)v915 >= (uint64_t)(*v844 << -(uint64_t)v915) >> -(uint64_t)v915)
                    {
                      goto LABEL_340;
                    }
                  }
                  else if (v913 >= v203)
                  {
                    goto LABEL_340;
                  }
                  goto LABEL_283;
                }
                v349 = (((unint64_t)v29 + 63) >> 3) & 0x3FFFFFF8;
                v350 = v28 - 8;
                do
                {
                  if (!v349)
                    goto LABEL_330;
                  v351 = *(_QWORD *)(v350 + v349);
                  v352 = *(_QWORD *)(v24 - 8 + v349);
                  v349 -= 8;
                }
                while (v351 == v352);
                if (v351 > v352)
                  goto LABEL_330;
LABEL_340:
                v4 += 184;
                if (v10 + 184 >= v860)
                  goto LABEL_389;
                v206 = 1 << (v911 - 1);
                if (v911 >= 0x41)
                  v207 = (uint64_t *)(v24 + 8 * ((v911 - 1) >> 6));
                else
                  v207 = &v910;
                v208 = v24 - 8;
                v209 = v10;
                while (1)
                {
                  v210 = v209;
                  v209 = v4;
                  v211 = *(_DWORD *)(v210 + 288);
                  if (v909 == v211)
                  {
                    v212 = (uint64_t *)(v210 + 296);
                    if (v911 > 0x40)
                    {
                      v866 = *(_QWORD *)(v24 + 8 * ((v911 - 1) >> 6)) & v206;
                      v214 = *(_DWORD *)(v210 + 304);
                      v213 = *(_QWORD *)(v210 + 296);
                      if (v214 >= 0x41)
                        v212 = (uint64_t *)(v213 + 8 * ((v214 - 1) >> 6));
                      v217 = (v866 != 0) ^ ((unint64_t)*v212 >> (v214 - 1));
                      v218 = (((unint64_t)v911 + 63) >> 3) & 0x3FFFFFF8;
                      if ((v217 & 1) != 0)
                      {
                        if (v866)
                          goto LABEL_388;
                      }
                      else
                      {
                        while (v218)
                        {
                          v875 = *(_QWORD *)(v208 + v218);
                          v867 = *(_QWORD *)(v213 + v218 - 8);
                          v218 -= 8;
                          if (v875 != v867)
                          {
                            if (v875 <= v867)
                              goto LABEL_388;
                            break;
                          }
                        }
                      }
                    }
                    else
                    {
                      v213 = *v212;
                      if (v24 << -(uint64_t)v911 >> -(uint64_t)v911 < *v212 << (64 - v911) >> (64 - v911))
                        goto LABEL_388;
                      v214 = *(_DWORD *)(v210 + 304);
                    }
                    if (v214 > 0x40)
                    {
                      v881 = *(_QWORD *)(v213 + 8 * ((v214 - 1) >> 6)) & (1 << (v214 - 1));
                      if ((v881 != 0) == ((*v207 & v206) != 0))
                      {
                        v226 = (((unint64_t)v214 + 63) >> 3) & 0x3FFFFFF8;
                        v227 = v213 - 8;
                        while (v226)
                        {
                          v228 = *(_QWORD *)(v227 + v226);
                          v229 = *(_QWORD *)(v208 + v226);
                          v226 -= 8;
                          if (v228 != v229)
                          {
                            if (v228 <= v229)
                              goto LABEL_359;
                            break;
                          }
                        }
                      }
                      else if (v881)
                      {
                        goto LABEL_359;
                      }
                    }
                    else if (v213 << -(char)v214 >> -(char)v214 < v24 << -(char)v214 >> -(char)v214)
                    {
                      goto LABEL_359;
                    }
                  }
                  else
                  {
                    if (v909 < v211)
                      goto LABEL_388;
                    if (v211 < v909)
                      goto LABEL_359;
                  }
                  v215 = *(_DWORD *)(v210 + 328);
                  if (v913 == v215)
                  {
                    v216 = (_QWORD *)(v210 + 336);
                    if (v915 > 0x40)
                    {
                      v876 = *(_QWORD *)(v26 + 8 * ((v915 - 1) >> 6)) & (1 << (v915 - 1));
                      v219 = *(_DWORD *)(v210 + 344);
                      v220 = v219 - 1;
                      v221 = *(_QWORD *)(v210 + 336);
                      if (v219 >= 0x41)
                        v216 = (_QWORD *)(v221 + 8 * (v220 >> 6));
                      if ((((v876 != 0) ^ (*v216 >> v220)) & 1) != 0)
                      {
                        if (v876)
                        {
LABEL_388:
                          v4 = v209;
                          goto LABEL_389;
                        }
                      }
                      else
                      {
                        v222 = v221 - 8;
                        v223 = (((unint64_t)v915 + 63) >> 3) & 0x3FFFFFF8;
                        while (v223)
                        {
                          v224 = *(_QWORD *)(v26 - 8 + v223);
                          v225 = *(_QWORD *)(v222 + v223);
                          v223 -= 8;
                          if (v224 != v225)
                          {
                            if (v224 <= v225)
                              goto LABEL_388;
                            break;
                          }
                        }
                      }
                    }
                    else if (v26 << -(uint64_t)v915 >> -(uint64_t)v915 < (uint64_t)(*v216 << (64 - v915)) >> (64 - v915))
                    {
                      goto LABEL_388;
                    }
                  }
                  else if (v913 < v215)
                  {
                    goto LABEL_388;
                  }
LABEL_359:
                  v4 = v209 + 184;
                  if (v209 + 184 >= v860)
                    goto LABEL_389;
                }
              }
            }
          }
          else if (v909 >= v27)
          {
            if (v27 < v909)
              goto LABEL_340;
            goto LABEL_330;
          }
LABEL_283:
          v180 = 1 << (v911 - 1);
          if (v911 >= 0x41)
            v181 = (uint64_t *)(v24 + 8 * ((v911 - 1) >> 6));
          else
            v181 = &v910;
          v182 = v24 - 8;
          do
          {
            while (1)
            {
              while (1)
              {
                while (1)
                {
                  while (1)
                  {
                    while (1)
                    {
LABEL_287:
                      while (1)
                      {
                        v183 = v4;
                        v4 += 184;
                        v184 = *(_DWORD *)(v183 + 288);
                        if (v909 == v184)
                          break;
                        if (v909 < v184)
                          goto LABEL_389;
                        if (v184 >= v909)
                          goto LABEL_296;
                      }
                      v185 = (uint64_t *)(v183 + 296);
                      if (v911 > 0x40)
                      {
                        v864 = *(_QWORD *)(v24 + 8 * ((v911 - 1) >> 6)) & v180;
                        v187 = *(_DWORD *)(v183 + 304);
                        v186 = *(_QWORD *)(v183 + 296);
                        if (v187 >= 0x41)
                          v185 = (uint64_t *)(v186 + 8 * ((v187 - 1) >> 6));
                        v190 = (v864 != 0) ^ ((unint64_t)*v185 >> (v187 - 1));
                        v191 = (((unint64_t)v911 + 63) >> 3) & 0x3FFFFFF8;
                        if ((v190 & 1) != 0)
                        {
                          if (v864)
                            goto LABEL_389;
                        }
                        else
                        {
                          while (v191)
                          {
                            v873 = *(_QWORD *)(v182 + v191);
                            v865 = *(_QWORD *)(v186 + v191 - 8);
                            v191 -= 8;
                            if (v873 != v865)
                            {
                              if (v873 <= v865)
                                goto LABEL_389;
                              break;
                            }
                          }
                        }
                      }
                      else
                      {
                        v186 = *v185;
                        if (v24 << -(uint64_t)v911 >> -(uint64_t)v911 < *v185 << (64 - v911) >> (64 - v911))
                          goto LABEL_389;
                        v187 = *(_DWORD *)(v183 + 304);
                      }
                      if (v187 > 0x40)
                        break;
                      if (v186 << -(char)v187 >> -(char)v187 >= v24 << -(char)v187 >> -(char)v187)
                        goto LABEL_296;
                    }
                    v880 = *(_QWORD *)(v186 + 8 * ((v187 - 1) >> 6)) & (1 << (v187 - 1));
                    if ((v880 != 0) == ((*v181 & v180) != 0))
                      break;
                    if (!v880)
                      goto LABEL_296;
                  }
                  v199 = (((unint64_t)v187 + 63) >> 3) & 0x3FFFFFF8;
                  v200 = v186 - 8;
                  while (v199)
                  {
                    v201 = *(_QWORD *)(v200 + v199);
                    v202 = *(_QWORD *)(v182 + v199);
                    v199 -= 8;
                    if (v201 != v202)
                    {
                      if (v201 <= v202)
                        goto LABEL_287;
                      break;
                    }
                  }
LABEL_296:
                  v188 = *(_DWORD *)(v183 + 328);
                  if (v913 == v188)
                    break;
                  if (v913 < v188)
                    goto LABEL_389;
                }
                v189 = (_QWORD *)(v183 + 336);
                if (v915 > 0x40)
                  break;
                if (v26 << -(uint64_t)v915 >> -(uint64_t)v915 < (uint64_t)(*v189 << (64 - v915)) >> (64 - v915))
                  goto LABEL_389;
              }
              v874 = *(_QWORD *)(v26 + 8 * ((v915 - 1) >> 6)) & (1 << (v915 - 1));
              v192 = *(_DWORD *)(v183 + 344);
              v193 = v192 - 1;
              v194 = *(_QWORD *)(v183 + 336);
              if (v192 >= 0x41)
                v189 = (_QWORD *)(v194 + 8 * (v193 >> 6));
              if ((((v874 != 0) ^ (*v189 >> v193)) & 1) != 0)
                break;
              v195 = v194 - 8;
              v196 = (((unint64_t)v915 + 63) >> 3) & 0x3FFFFFF8;
              while (v196)
              {
                v197 = *(_QWORD *)(v26 - 8 + v196);
                v198 = *(_QWORD *)(v195 + v196);
                v196 -= 8;
                if (v197 != v198)
                {
                  if (v197 <= v198)
                    goto LABEL_389;
                  goto LABEL_287;
                }
              }
            }
          }
          while (!v874);
LABEL_389:
          v230 = (uint64_t *)v860;
          if (v4 >= v860)
            goto LABEL_522;
          v231 = 1 << (v911 - 1);
          if (v911 >= 0x41)
            v232 = (uint64_t *)(v24 + 8 * ((v911 - 1) >> 6));
          else
            v232 = &v910;
          v233 = v24 - 8;
          v230 = (uint64_t *)v860;
          while (2)
          {
            v234 = v230;
            v230 -= 23;
            v235 = v909 >= v27;
            if (v909 != v27)
              goto LABEL_404;
            v236 = v234 - 9;
            if (v911 <= 0x40)
            {
              v237 = *v236;
              if (v24 << -(uint64_t)v911 >> -(uint64_t)v911 >= *v236 << (64 - v911) >> (64 - v911))
              {
                v238 = *((_DWORD *)v234 - 16);
                goto LABEL_398;
              }
LABEL_405:
              v27 = *((_DWORD *)v234 - 66);
              continue;
            }
            break;
          }
          v868 = *(_QWORD *)(v24 + 8 * ((v911 - 1) >> 6)) & v231;
          v238 = *((_DWORD *)v234 - 16);
          v237 = *(v234 - 9);
          v240 = (uint64_t *)(v237 + 8 * ((v238 - 1) >> 6));
          if (v238 < 0x41)
            v240 = v234 - 9;
          v241 = (((unint64_t)v911 + 63) >> 3) & 0x3FFFFFF8;
          if ((((v868 != 0) ^ ((unint64_t)*v240 >> (v238 - 1))) & 1) != 0)
          {
            if (v868)
              goto LABEL_405;
          }
          else
          {
            while (v241)
            {
              v242 = *(_QWORD *)(v233 + v241);
              v243 = *(_QWORD *)(v237 + v241 - 8);
              v241 -= 8;
              if (v242 != v243)
              {
                if (v242 <= v243)
                  goto LABEL_405;
                break;
              }
            }
          }
LABEL_398:
          if (v238 > 0x40)
          {
            v244 = *(_QWORD *)(v237 + 8 * ((v238 - 1) >> 6)) & (1 << (v238 - 1));
            if ((v244 != 0) == ((*v232 & v231) != 0))
            {
              v245 = (((unint64_t)v238 + 63) >> 3) & 0x3FFFFFF8;
              v246 = v237 - 8;
              while (v245)
              {
                v247 = *(_QWORD *)(v246 + v245);
                v248 = *(_QWORD *)(v233 + v245);
                v245 -= 8;
                if (v247 != v248)
                {
                  if (v247 <= v248)
                    goto LABEL_522;
                  break;
                }
              }
            }
            else if (v244)
            {
              goto LABEL_522;
            }
          }
          else if (v237 << -(char)v238 >> -(char)v238 < v24 << -(char)v238 >> -(char)v238)
          {
            goto LABEL_522;
          }
          v239 = *((_DWORD *)v234 - 10);
          v235 = v913 >= v239;
          if (v913 != v239)
          {
LABEL_404:
            if (v235)
              goto LABEL_522;
            goto LABEL_405;
          }
          if (v915 <= 0x40)
          {
            if (v26 << -(uint64_t)v915 >> -(uint64_t)v915 >= *(v234 - 4) << (64 - v915) >> (64 - v915))
              goto LABEL_522;
            goto LABEL_405;
          }
          v877 = v232;
          v869 = *(_QWORD *)(v26 + 8 * ((v915 - 1) >> 6)) & (1 << (v915 - 1));
          v249 = *((_DWORD *)v234 - 6);
          v250 = *(v234 - 4);
          v251 = (uint64_t *)(v250 + 8 * ((v249 - 1) >> 6));
          if (v249 < 0x41)
            v251 = v234 - 4;
          if ((((v869 != 0) ^ ((unint64_t)*v251 >> (v249 - 1))) & 1) != 0)
          {
            v232 = v877;
            if (!v869)
              goto LABEL_522;
            goto LABEL_405;
          }
          v252 = (((unint64_t)v915 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            if (!v252)
              goto LABEL_522;
            v253 = *(_QWORD *)(v26 - 8 + v252);
            v254 = *(_QWORD *)(v250 - 8 + v252);
            v252 -= 8;
          }
          while (v253 == v254);
          v232 = v877;
          if (v253 <= v254)
            goto LABEL_405;
LABEL_522:
          if (v4 < (unint64_t)v230)
          {
            sub_1C5BD4D10((uint64_t *)v4, v230);
            v255 = (_QWORD *)(v910 + 8 * ((v911 - 1) >> 6));
            v256 = 1 << (v911 - 1);
            v257 = 64 - v911;
            v258 = v910 << -(uint64_t)v911 >> -(uint64_t)v911;
            if (v911 >= 0x41)
              v259 = (uint64_t *)(v910 + 8 * ((v911 - 1) >> 6));
            else
              v259 = &v910;
            v870 = v259;
            v882 = (v915 - 1) >> 6;
            v878 = 1 << (v915 - 1);
            v260 = 64 - v915;
            v261 = v914 << -(uint64_t)v915 >> -(uint64_t)v915;
            v262 = v910 - 8;
            v263 = v914 - 8;
            while (1)
            {
              while (1)
              {
LABEL_438:
                while (1)
                {
                  v264 = v4;
                  v4 += 184;
                  v265 = *(_DWORD *)(v264 + 288);
                  if (v909 == v265)
                    break;
                  if (v909 < v265)
                    goto LABEL_510;
                  if (v265 >= v909)
                    goto LABEL_447;
                }
                v266 = (uint64_t *)(v264 + 296);
                if (v911 > 0x40)
                {
                  v268 = *(_DWORD *)(v264 + 304);
                  v271 = v268 - 1;
                  v267 = *(_QWORD *)(v264 + 296);
                  if (v268 >= 0x41)
                    v266 = (uint64_t *)(v267 + 8 * (v271 >> 6));
                  v272 = ((*v255 & v256) != 0) ^ ((unint64_t)*v266 >> v271);
                  v273 = (((unint64_t)v911 + 63) >> 3) & 0x3FFFFFF8;
                  if ((v272 & 1) != 0)
                  {
                    if ((*v255 & v256) != 0)
                      goto LABEL_510;
                  }
                  else
                  {
                    do
                    {
                      if (!v273)
                        goto LABEL_442;
                      v274 = *(_QWORD *)(v262 + v273);
                      v275 = *(_QWORD *)(v267 + v273 - 8);
                      v273 -= 8;
                    }
                    while (v274 == v275);
                    if (v274 <= v275)
                      goto LABEL_510;
                  }
                }
                else
                {
                  v267 = *v266;
                  if (v258 < *v266 << v257 >> v257)
                    goto LABEL_510;
                  v268 = *(_DWORD *)(v264 + 304);
                }
LABEL_442:
                if (v268 > 0x40)
                  break;
                if (v267 << -(char)v268 >> -(char)v268 >= v910 << -(char)v268 >> -(char)v268)
                  goto LABEL_447;
              }
              v280 = *(_QWORD *)(v267 + 8 * ((v268 - 1) >> 6)) & (1 << (v268 - 1));
              if ((v280 != 0) == ((*v870 & v256) != 0))
              {
                v285 = (((unint64_t)v268 + 63) >> 3) & 0x3FFFFFF8;
                v286 = v267 - 8;
                do
                {
                  if (!v285)
                    goto LABEL_447;
                  v287 = *(_QWORD *)(v286 + v285);
                  v288 = *(_QWORD *)(v262 + v285);
                  v285 -= 8;
                }
                while (v287 == v288);
                if (v287 > v288)
                  goto LABEL_447;
              }
              else if (!v280)
              {
LABEL_447:
                v269 = *(_DWORD *)(v264 + 328);
                if (v913 == v269)
                {
                  v270 = (_QWORD *)(v264 + 336);
                  if (v915 > 0x40)
                  {
                    v276 = *(_QWORD *)(v914 + 8 * v882) & v878;
                    v277 = *(_DWORD *)(v264 + 344);
                    v278 = *(_QWORD *)(v264 + 336);
                    v279 = (_QWORD *)(v278 + 8 * ((v277 - 1) >> 6));
                    if (v277 < 0x41)
                      v279 = v270;
                    if ((((v276 != 0) ^ (*v279 >> (v277 - 1))) & 1) != 0)
                    {
                      if (v276)
                      {
                        while (1)
                        {
                          while (1)
                          {
LABEL_510:
                            while (1)
                            {
                              v309 = v230;
                              v230 -= 23;
                              v310 = *((_DWORD *)v309 - 20);
                              if (v909 == v310)
                                break;
                              if (v909 >= v310)
                              {
                                if (v310 < v909)
                                  goto LABEL_522;
                                goto LABEL_519;
                              }
                            }
                            v311 = v309 - 9;
                            if (v911 <= 0x40)
                              break;
                            v289 = *((_DWORD *)v309 - 16);
                            v290 = *(v309 - 9);
                            v291 = (uint64_t *)(v290 + 8 * ((v289 - 1) >> 6));
                            if (v289 < 0x41)
                              v291 = v309 - 9;
                            v292 = (((unint64_t)v911 + 63) >> 3) & 0x3FFFFFF8;
                            if (((((*v255 & v256) != 0) ^ ((unint64_t)*v291 >> (v289 - 1))) & 1) != 0)
                            {
                              if ((*v255 & v256) == 0)
                                goto LABEL_514;
                            }
                            else
                            {
                              while (v292)
                              {
                                v293 = *(_QWORD *)(v262 + v292);
                                v294 = *(_QWORD *)(v290 + v292 - 8);
                                v292 -= 8;
                                if (v293 != v294)
                                {
                                  if (v293 <= v294)
                                    goto LABEL_510;
                                  break;
                                }
                              }
LABEL_514:
                              if (v289 > 0x40)
                              {
                                v300 = *(_QWORD *)(v290 + 8 * ((v289 - 1) >> 6)) & (1 << (v289 - 1));
                                if ((v300 != 0) == ((*v870 & v256) != 0))
                                {
                                  v305 = (((unint64_t)v289 + 63) >> 3) & 0x3FFFFFF8;
                                  v306 = v290 - 8;
                                  while (v305)
                                  {
                                    v307 = *(_QWORD *)(v306 + v305);
                                    v308 = *(_QWORD *)(v262 + v305);
                                    v305 -= 8;
                                    if (v307 != v308)
                                    {
                                      if (v307 <= v308)
                                        goto LABEL_522;
                                      break;
                                    }
                                  }
                                }
                                else if (v300)
                                {
                                  goto LABEL_522;
                                }
                              }
                              else if (v290 << -(char)v289 >> -(char)v289 < v910 << -(char)v289 >> -(char)v289)
                              {
                                goto LABEL_522;
                              }
LABEL_519:
                              v312 = *((_DWORD *)v309 - 10);
                              if (v913 == v312)
                              {
                                v313 = v309 - 4;
                                if (v915 > 0x40)
                                {
                                  v295 = *(_QWORD *)(v914 + 8 * v882) & v878;
                                  v296 = *((_DWORD *)v309 - 6);
                                  v297 = v296 - 1;
                                  v298 = *(v309 - 4);
                                  if (v296 >= 0x41)
                                    v299 = (uint64_t *)(v298 + 8 * (v297 >> 6));
                                  else
                                    v299 = v313;
                                  if ((((v295 != 0) ^ ((unint64_t)*v299 >> v297)) & 1) == 0)
                                  {
                                    v301 = v298 - 8;
                                    v302 = (((unint64_t)v915 + 63) >> 3) & 0x3FFFFFF8;
                                    while (v302)
                                    {
                                      v303 = *(_QWORD *)(v263 + v302);
                                      v304 = *(_QWORD *)(v301 + v302);
                                      v302 -= 8;
                                      if (v303 != v304)
                                      {
                                        if (v303 <= v304)
                                          goto LABEL_510;
                                        goto LABEL_522;
                                      }
                                    }
                                    goto LABEL_522;
                                  }
                                  if (!v295)
                                    goto LABEL_522;
                                }
                                else if (v261 >= *v313 << v260 >> v260)
                                {
                                  goto LABEL_522;
                                }
                              }
                              else if (v913 >= v312)
                              {
                                goto LABEL_522;
                              }
                            }
                          }
                          v290 = *v311;
                          if (v258 >= *v311 << v257 >> v257)
                          {
                            v289 = *((_DWORD *)v309 - 16);
                            goto LABEL_514;
                          }
                        }
                      }
                    }
                    else
                    {
                      v281 = v278 - 8;
                      v282 = (((unint64_t)v915 + 63) >> 3) & 0x3FFFFFF8;
                      do
                      {
                        if (!v282)
                          goto LABEL_438;
                        v283 = *(_QWORD *)(v263 + v282);
                        v284 = *(_QWORD *)(v281 + v282);
                        v282 -= 8;
                      }
                      while (v283 == v284);
                      if (v283 <= v284)
                        goto LABEL_510;
                    }
                  }
                  else if (v261 < (uint64_t)(*v270 << v260) >> v260)
                  {
                    goto LABEL_510;
                  }
                }
                else if (v913 < v269)
                {
                  goto LABEL_510;
                }
              }
            }
          }
          if (v4 - 184 != v862)
          {
            *(_QWORD *)v862 = *(_QWORD *)(v4 - 184);
            sub_1C6290124(v848, (unsigned int *)(v4 - 176));
            *(_QWORD *)(v862 + 80) = *(_QWORD *)(v4 - 104);
            sub_1C5BCD700(v862 + 88, v4 - 96);
            sub_1C5BCD700(v862 + 128, v4 - 56);
            *(_OWORD *)(v862 + 168) = *(_OWORD *)(v4 - 16);
          }
          *(_QWORD *)(v4 - 184) = v901;
          result = sub_1C6290124(v4 - 176, (unsigned int *)&v902);
          *(_QWORD *)(v4 - 104) = v907;
          if ((__int128 *)(v4 - 96) != &v908)
          {
            *(_OWORD *)(v4 - 96) = v908;
            *(_DWORD *)(v4 - 80) = v909;
            if (*(_DWORD *)(v4 - 64) >= 0x41u)
            {
              result = *(_QWORD *)(v4 - 72);
              if (result)
                result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
            }
            *(_QWORD *)(v4 - 72) = v910;
            *(_DWORD *)(v4 - 64) = v911;
            v911 = 0;
          }
          if ((__int128 *)(v4 - 56) != &v912)
          {
            *(_OWORD *)(v4 - 56) = v912;
            *(_DWORD *)(v4 - 40) = v913;
            if (*(_DWORD *)(v4 - 24) >= 0x41u)
            {
              result = *(_QWORD *)(v4 - 32);
              if (result)
                result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
            }
            *(_QWORD *)(v4 - 32) = v914;
            *(_DWORD *)(v4 - 24) = v915;
            v915 = 0;
          }
          *(_OWORD *)(v4 - 16) = v916;
          if (v915 >= 0x41)
          {
            result = v914;
            if (v914)
              result = MEMORY[0x1CAA32F9C](v914, 0x1000C8000313F17);
          }
          if (v911 >= 0x41)
          {
            result = v910;
            if (v910)
              result = MEMORY[0x1CAA32F9C](v910, 0x1000C8000313F17);
          }
          if ((v902 & 1) == 0)
            result = MEMORY[0x1CAA32FB4](v903.i64[0], 8);
          a4 = 0;
          a2 = v860;
          continue;
        }
        v314 = ((unint64_t)(v15 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          if (!v314)
            goto LABEL_14;
          v315 = *(_QWORD *)(v16 + v314 - 8);
          v316 = *(_QWORD *)(v17 + v314 - 8);
          v314 -= 8;
        }
        while (v315 == v316);
        if (v315 > v316)
          goto LABEL_14;
LABEL_30:
        v901 = *(_QWORD *)v4;
        v902 = 1;
        v903 = v852;
        v904 = v852;
        v905 = v852;
        v906 = v852;
        v863 = v4 + 8;
        sub_1C629018C((unsigned int *)&v902, (unsigned int *)(v4 + 8));
        v30 = *(_QWORD *)(v4 + 80);
        v31 = *(_OWORD *)(v4 + 88);
        v909 = *(_DWORD *)(v4 + 104);
        v908 = v31;
        v911 = *(_DWORD *)(v4 + 120);
        v32 = *(_QWORD *)(v4 + 112);
        v907 = v30;
        v910 = v32;
        *(_DWORD *)(v4 + 120) = 0;
        v847 = v4 + 128;
        v849 = v4 + 88;
        v33 = *(_OWORD *)(v4 + 128);
        v913 = *(_DWORD *)(v4 + 144);
        v912 = v33;
        v915 = *(_DWORD *)(v4 + 160);
        v34 = *(_QWORD *)(v4 + 152);
        v914 = v34;
        *(_DWORD *)(v4 + 160) = 0;
        v846 = (_OWORD *)(v4 + 168);
        v35 = v911 - 1;
        v36 = (_QWORD *)(v32 + 8 * ((v911 - 1) >> 6));
        if (v911 >= 0x41)
          v37 = (uint64_t *)(v32 + 8 * (v35 >> 6));
        else
          v37 = &v910;
        v38 = 1 << v35;
        v39 = 64 - v911;
        v40 = v32 << -(char)v911 >> -(char)v911;
        v41 = v915 - 1;
        v916 = *(_OWORD *)(v4 + 168);
        v42 = &v914;
        if (v915 >= 0x41)
          v42 = (uint64_t *)(v34 + 8 * (v41 >> 6));
        v43 = 1 << v41;
        v44 = v32 - 8;
        v45 = v34 - 8;
        v46 = v4;
        while (1)
        {
          while (1)
          {
            while (1)
            {
LABEL_36:
              v47 = v46;
              v46 += 184;
              v48 = *(_DWORD *)(v47 + 288);
              if (v48 == v909)
              {
                v49 = (uint64_t *)(v47 + 296);
                v50 = *(unsigned int *)(v47 + 304);
                if (v50 > 0x40)
                {
                  v51 = *v49;
                  v54 = *(_QWORD *)(*v49 + 8 * ((v50 - 1) >> 6)) & (1 << (v50 - 1));
                  if ((v54 != 0) == ((v38 & *v37) != 0))
                  {
                    v55 = ((unint64_t)(v50 + 63) >> 3) & 0x3FFFFFF8;
                    while (v55)
                    {
                      v56 = *(_QWORD *)(v51 + v55 - 8);
                      v57 = *(_QWORD *)(v44 + v55);
                      v55 -= 8;
                      if (v56 != v57)
                      {
                        if (v56 <= v57)
                          goto LABEL_36;
                        break;
                      }
                    }
                  }
                  else if (v54)
                  {
                    continue;
                  }
                }
                else
                {
                  v51 = *v49;
                  if (*v49 << -(char)v50 >> -(char)v50 < v32 << -(char)v50 >> -(char)v50)
                    continue;
                }
                if (v911 > 0x40)
                {
                  v60 = v50 - 1;
                  if (v50 >= 0x41)
                    v49 = (uint64_t *)(v51 + 8 * (v60 >> 6));
                  if (((((*v36 & v38) != 0) ^ ((unint64_t)*v49 >> v60)) & 1) != 0)
                  {
                    if ((*v36 & v38) != 0)
                      goto LABEL_75;
                  }
                  else
                  {
                    v65 = v51 - 8;
                    v66 = (((unint64_t)v911 + 63) >> 3) & 0x3FFFFFF8;
                    while (v66)
                    {
                      v67 = *(_QWORD *)(v44 + v66);
                      v68 = *(_QWORD *)(v65 + v66);
                      v66 -= 8;
                      if (v67 != v68)
                      {
                        if (v67 > v68)
                          break;
                        goto LABEL_75;
                      }
                    }
                  }
                }
                else if (v40 < v51 << v39 >> v39)
                {
                  goto LABEL_75;
                }
              }
              else
              {
                if (v48 < v909)
                  continue;
                if (v909 < v48)
                  goto LABEL_75;
              }
              v52 = *(_DWORD *)(v47 + 328);
              if (v52 == v913)
                break;
              if (v52 >= v913)
                goto LABEL_75;
            }
            v53 = *(unsigned int *)(v47 + 344);
            if (v53 > 0x40)
              break;
            if ((uint64_t)(*(_QWORD *)(v47 + 336) << -(char)v53) >> -(char)v53 >= v34 << -(char)v53 >> -(char)v53)
              goto LABEL_75;
          }
          v58 = *(_QWORD *)(v47 + 336);
          v59 = *(_QWORD *)(v58 + 8 * ((v53 - 1) >> 6)) & (1 << (v53 - 1));
          if ((v59 != 0) == ((v43 & *v42) != 0))
            break;
          if (!v59)
            goto LABEL_75;
        }
        v61 = ((unint64_t)(v53 + 63) >> 3) & 0x3FFFFFF8;
        v62 = v58 - 8;
        while (v61)
        {
          v63 = *(_QWORD *)(v62 + v61);
          v64 = *(_QWORD *)(v45 + v61);
          v61 -= 8;
          if (v63 != v64)
          {
            if (v63 <= v64)
              goto LABEL_36;
            break;
          }
        }
LABEL_75:
        if (v47 == v862)
        {
          v69 = (uint64_t *)v860;
          if (v46 >= v860)
            goto LABEL_171;
          v70 = v860;
          while (1)
          {
            v69 = (uint64_t *)(v70 - 184);
            v71 = *(_DWORD *)(v70 - 80);
            if (v71 == v909)
            {
              v72 = (uint64_t *)(v70 - 184);
              v73 = (uint64_t *)(v70 - 72);
              v74 = *(unsigned int *)(v70 - 64);
              if (v74 > 0x40)
              {
                v75 = *v73;
                v84 = *(_QWORD *)(*v73 + 8 * ((v74 - 1) >> 6)) & (1 << (v74 - 1));
                if ((v84 != 0) == ((v38 & *v37) != 0))
                {
                  v85 = ((unint64_t)(v74 + 63) >> 3) & 0x3FFFFFF8;
                  while (v85)
                  {
                    v86 = *(_QWORD *)(v75 + v85 - 8);
                    v87 = *(_QWORD *)(v44 + v85);
                    v85 -= 8;
                    if (v86 != v87)
                    {
                      if (v86 <= v87)
                        goto LABEL_170;
                      break;
                    }
                  }
                }
                else if (v84)
                {
                  goto LABEL_171;
                }
              }
              else
              {
                v75 = *v73;
                if (*v73 << -(char)v74 >> -(char)v74 < v32 << -(char)v74 >> -(char)v74)
                  goto LABEL_170;
              }
              if (v911 > 0x40)
              {
                v90 = v74 - 1;
                if (v74 >= 0x41)
                  v73 = (uint64_t *)(v75 + 8 * (v90 >> 6));
                if (((((*v36 & v38) != 0) ^ ((unint64_t)*v73 >> v90)) & 1) != 0)
                {
                  v69 = (uint64_t *)(v70 - 184);
                  if ((*v36 & v38) != 0)
                    goto LABEL_92;
                }
                else
                {
                  v95 = v75 - 8;
                  v96 = (((unint64_t)v911 + 63) >> 3) & 0x3FFFFFF8;
                  v69 = (uint64_t *)(v70 - 184);
                  while (v96)
                  {
                    v97 = *(_QWORD *)(v44 + v96);
                    v98 = *(_QWORD *)(v95 + v96);
                    v96 -= 8;
                    if (v97 != v98)
                    {
                      if (v97 <= v98)
                        goto LABEL_92;
                      break;
                    }
                  }
                }
              }
              else if (v40 < v75 << v39 >> v39)
              {
                goto LABEL_92;
              }
            }
            else
            {
              if (v71 < v909)
                goto LABEL_171;
              if (v909 < v71)
                goto LABEL_92;
            }
            v76 = *(_DWORD *)(v70 - 40);
            if (v76 == v913)
            {
              v77 = *(unsigned int *)(v70 - 24);
              if (v77 > 0x40)
              {
                v88 = *(_QWORD *)(v70 - 32);
                v89 = *(_QWORD *)(v88 + 8 * ((v77 - 1) >> 6)) & (1 << (v77 - 1));
                if ((v89 != 0) == ((v43 & *v42) != 0))
                {
                  v91 = ((unint64_t)(v77 + 63) >> 3) & 0x3FFFFFF8;
                  v92 = v88 - 8;
                  do
                  {
                    if (!v91)
                    {
                      v82 = 0;
                      goto LABEL_91;
                    }
                    v93 = *(_QWORD *)(v92 + v91);
                    v94 = *(_QWORD *)(v45 + v91);
                    v91 -= 8;
                  }
                  while (v93 == v94);
                  if (v93 > v94)
                    v82 = 1;
                  else
                    v82 = -1;
                }
                else if (v89)
                {
                  v82 = -1;
                }
                else
                {
                  v82 = 1;
                }
              }
              else
              {
                v78 = -v77;
                v79 = (uint64_t)(*(_QWORD *)(v70 - 32) << v78) >> v78;
                v80 = v34 << v78 >> v78;
                v81 = v79 < v80;
                v82 = v79 > v80;
                if (v81)
                  v82 = -1;
              }
LABEL_91:
              if (v82 < 0)
                goto LABEL_171;
LABEL_92:
              v70 = (unint64_t)v69;
              if (v46 >= (unint64_t)v69)
                goto LABEL_171;
              continue;
            }
            v83 = v76 < v913 || v46 >= (unint64_t)v69;
            v70 = (unint64_t)v69;
            if (v83)
              goto LABEL_171;
          }
        }
        v69 = (uint64_t *)v860;
LABEL_130:
        while (2)
        {
          while (2)
          {
            v99 = v69;
            v69 -= 23;
            v100 = *((_DWORD *)v99 - 20);
            if (v100 != v909)
            {
              if (v100 < v909)
                goto LABEL_171;
              if (v909 < v100)
                continue;
              goto LABEL_138;
            }
            break;
          }
          v72 = v69;
          v101 = v99 - 9;
          v102 = *((unsigned int *)v99 - 16);
          if (v102 > 0x40)
          {
            v103 = *v101;
            v106 = *(_QWORD *)(*v101 + 8 * ((v102 - 1) >> 6)) & (1 << (v102 - 1));
            if ((v106 != 0) == ((v38 & *v37) != 0))
            {
              v107 = ((unint64_t)(v102 + 63) >> 3) & 0x3FFFFFF8;
              while (v107)
              {
                v108 = *(_QWORD *)(v103 + v107 - 8);
                v109 = *(_QWORD *)(v44 + v107);
                v107 -= 8;
                if (v108 != v109)
                {
                  if (v108 <= v109)
                    goto LABEL_170;
                  goto LABEL_133;
                }
              }
            }
            else if (v106)
            {
              goto LABEL_171;
            }
            goto LABEL_133;
          }
          v103 = *v101;
          if (*v101 << -(char)v102 >> -(char)v102 >= v32 << -(char)v102 >> -(char)v102)
          {
LABEL_133:
            if (v911 > 0x40)
            {
              v112 = v102 - 1;
              if (v102 >= 0x41)
                v101 = (uint64_t *)(v103 + 8 * (v112 >> 6));
              if (((((*v36 & v38) != 0) ^ ((unint64_t)*v101 >> v112)) & 1) != 0)
              {
                if ((*v36 & v38) != 0)
                  continue;
              }
              else
              {
                v117 = v103 - 8;
                v118 = (((unint64_t)v911 + 63) >> 3) & 0x3FFFFFF8;
                while (v118)
                {
                  v119 = *(_QWORD *)(v44 + v118);
                  v120 = *(_QWORD *)(v117 + v118);
                  v118 -= 8;
                  if (v119 != v120)
                  {
                    if (v119 <= v120)
                      goto LABEL_130;
                    break;
                  }
                }
              }
            }
            else if (v40 < v103 << v39 >> v39)
            {
              continue;
            }
LABEL_138:
            v104 = *((_DWORD *)v99 - 10);
            if (v104 == v913)
            {
              v105 = *((unsigned int *)v99 - 6);
              if (v105 > 0x40)
              {
                v110 = *(v99 - 4);
                v111 = *(_QWORD *)(v110 + 8 * ((v105 - 1) >> 6)) & (1 << (v105 - 1));
                if ((v111 != 0) == ((v43 & *v42) != 0))
                {
                  v113 = ((unint64_t)(v105 + 63) >> 3) & 0x3FFFFFF8;
                  v114 = v110 - 8;
                  while (v113)
                  {
                    v115 = *(_QWORD *)(v114 + v113);
                    v116 = *(_QWORD *)(v45 + v113);
                    v113 -= 8;
                    if (v115 != v116)
                    {
                      if (v115 <= v116)
                        goto LABEL_171;
                      goto LABEL_130;
                    }
                  }
                }
                else if (v111)
                {
                  goto LABEL_171;
                }
              }
              else if (*(v99 - 4) << -(char)v105 >> -(char)v105 < v34 << -(char)v105 >> -(char)v105)
              {
                goto LABEL_171;
              }
            }
            else if (v104 < v913)
            {
              goto LABEL_171;
            }
            continue;
          }
          break;
        }
LABEL_170:
        v69 = v72;
LABEL_171:
        v872 = v69;
        v4 = v46;
        if (v46 >= (unint64_t)v69)
          goto LABEL_258;
        v121 = v69;
        while (2)
        {
          sub_1C5BD4D10((uint64_t *)v4, v121);
          v122 = v911 - 1;
          v123 = (_QWORD *)(v910 + 8 * ((v911 - 1) >> 6));
          if (v911 >= 0x41)
            v124 = (uint64_t *)(v910 + 8 * (v122 >> 6));
          else
            v124 = &v910;
          v125 = 1 << v122;
          v126 = 64 - v911;
          v127 = v910 << -(char)v911 >> -(char)v911;
          v128 = v915 - 1;
          v129 = &v914;
          if (v915 >= 0x41)
            v129 = (uint64_t *)(v914 + 8 * (v128 >> 6));
          v130 = 1 << v128;
          v131 = v910 - 8;
          v132 = v914 - 8;
          do
          {
            while (1)
            {
              while (1)
              {
                while (1)
                {
LABEL_179:
                  v133 = v4;
                  v4 += 184;
                  v134 = *(_DWORD *)(v133 + 288);
                  if (v134 == v909)
                  {
                    v135 = (uint64_t *)(v133 + 296);
                    v136 = *(unsigned int *)(v133 + 304);
                    if (v136 > 0x40)
                    {
                      v137 = *v135;
                      v140 = *(_QWORD *)(*v135 + 8 * ((v136 - 1) >> 6)) & (1 << (v136
                                                                                                 - 1));
                      if ((v140 != 0) == ((v125 & *v124) != 0))
                      {
                        v141 = ((unint64_t)(v136 + 63) >> 3) & 0x3FFFFFF8;
                        while (v141)
                        {
                          v142 = *(_QWORD *)(v137 + v141 - 8);
                          v143 = *(_QWORD *)(v131 + v141);
                          v141 -= 8;
                          if (v142 != v143)
                          {
                            if (v142 <= v143)
                              goto LABEL_179;
                            break;
                          }
                        }
                      }
                      else if (v140)
                      {
                        continue;
                      }
                    }
                    else
                    {
                      v137 = *v135;
                      if (*v135 << -(char)v136 >> -(char)v136 < v910 << -(char)v136 >> -(char)v136)
                        continue;
                    }
                    if (v911 > 0x40)
                    {
                      v146 = v136 - 1;
                      if (v136 >= 0x41)
                        v135 = (uint64_t *)(v137 + 8 * (v146 >> 6));
                      if (((((*v123 & v125) != 0) ^ ((unint64_t)*v135 >> v146)) & 1) != 0)
                      {
                        if ((*v123 & v125) != 0)
                          goto LABEL_246;
                      }
                      else
                      {
                        v151 = v137 - 8;
                        v152 = (((unint64_t)v911 + 63) >> 3) & 0x3FFFFFF8;
                        while (v152)
                        {
                          v153 = *(_QWORD *)(v131 + v152);
                          v154 = *(_QWORD *)(v151 + v152);
                          v152 -= 8;
                          if (v153 != v154)
                          {
                            if (v153 <= v154)
                              goto LABEL_246;
                            break;
                          }
                        }
                      }
                    }
                    else if (v127 < v137 << v126 >> v126)
                    {
                      goto LABEL_246;
                    }
                  }
                  else
                  {
                    if (v134 < v909)
                      continue;
                    if (v909 < v134)
                      goto LABEL_246;
                  }
                  v138 = *(_DWORD *)(v133 + 328);
                  if (v138 == v913)
                    break;
                  if (v138 >= v913)
                    goto LABEL_246;
                }
                v139 = *(unsigned int *)(v133 + 344);
                if (v139 > 0x40)
                  break;
                if ((uint64_t)(*(_QWORD *)(v133 + 336) << -(char)v139) >> -(char)v139 >= v914 << -(char)v139 >> -(char)v139)
                  goto LABEL_246;
              }
              v144 = *(_QWORD *)(v133 + 336);
              v145 = *(_QWORD *)(v144 + 8 * ((v139 - 1) >> 6)) & (1 << (v139 - 1));
              if ((v145 != 0) == ((v130 & *v129) != 0))
                break;
              if (!v145)
                goto LABEL_246;
            }
            v147 = ((unint64_t)(v139 + 63) >> 3) & 0x3FFFFFF8;
            v148 = v144 - 8;
            do
            {
              if (!v147)
                goto LABEL_246;
              v149 = *(_QWORD *)(v148 + v147);
              v150 = *(_QWORD *)(v132 + v147);
              v147 -= 8;
            }
            while (v149 == v150);
          }
          while (v149 <= v150);
LABEL_246:
          while (2)
          {
            while (2)
            {
              while (2)
              {
                while (2)
                {
                  while (1)
                  {
                    v172 = v121;
                    v121 -= 23;
                    v173 = *((_DWORD *)v172 - 20);
                    if (v173 == v909)
                      break;
                    if (v173 < v909)
                      goto LABEL_257;
                    if (v909 >= v173)
                      goto LABEL_254;
                  }
                  v163 = v172 - 9;
                  v174 = *((unsigned int *)v172 - 16);
                  if (v174 > 0x40)
                  {
                    v155 = *v163;
                    v156 = *(_QWORD *)(*v163 + 8 * ((v174 - 1) >> 6)) & (1 << (v174
                                                                                               - 1));
                    if ((v156 != 0) == ((v125 & *v124) != 0))
                    {
                      v157 = ((unint64_t)(v174 + 63) >> 3) & 0x3FFFFFF8;
                      while (v157)
                      {
                        v158 = *(_QWORD *)(v155 + v157 - 8);
                        v159 = *(_QWORD *)(v131 + v157);
                        v157 -= 8;
                        if (v158 != v159)
                        {
                          if (v158 <= v159)
                            goto LABEL_257;
                          break;
                        }
                      }
                    }
                    else if (v156)
                    {
                      goto LABEL_257;
                    }
                  }
                  else
                  {
                    v155 = *v163;
                    if (*v163 << -(char)v174 >> -(char)v174 < v910 << -(char)v174 >> -(char)v174)
                      goto LABEL_257;
                  }
                  if (v911 > 0x40)
                  {
                    v162 = v174 - 1;
                    if (v174 >= 0x41)
                      v163 = (uint64_t *)(v155 + 8 * (v162 >> 6));
                    if (((((*v123 & v125) != 0) ^ ((unint64_t)*v163 >> v162)) & 1) != 0)
                    {
                      if ((*v123 & v125) != 0)
                        continue;
                    }
                    else
                    {
                      v168 = v155 - 8;
                      v169 = (((unint64_t)v911 + 63) >> 3) & 0x3FFFFFF8;
                      while (v169)
                      {
                        v170 = *(_QWORD *)(v131 + v169);
                        v171 = *(_QWORD *)(v168 + v169);
                        v169 -= 8;
                        if (v170 != v171)
                        {
                          if (v170 > v171)
                            goto LABEL_254;
                          goto LABEL_246;
                        }
                      }
                    }
                  }
                  else if (v127 < v155 << v126 >> v126)
                  {
                    continue;
                  }
                  break;
                }
LABEL_254:
                v175 = *((_DWORD *)v172 - 10);
                if (v175 != v913)
                {
                  if (v175 < v913)
                    goto LABEL_257;
                  continue;
                }
                break;
              }
              v176 = *((unsigned int *)v172 - 6);
              if (v176 > 0x40)
              {
                v160 = *(v172 - 4);
                v161 = *(_QWORD *)(v160 + 8 * ((v176 - 1) >> 6)) & (1 << (v176 - 1));
                if ((v161 != 0) == ((v130 & *v129) != 0))
                {
                  v164 = ((unint64_t)(v176 + 63) >> 3) & 0x3FFFFFF8;
                  v165 = v160 - 8;
                  while (v164)
                  {
                    v166 = *(_QWORD *)(v165 + v164);
                    v167 = *(_QWORD *)(v132 + v164);
                    v164 -= 8;
                    if (v166 != v167)
                    {
                      if (v166 <= v167)
                        goto LABEL_257;
                      goto LABEL_246;
                    }
                  }
                }
                else if (v161)
                {
                  goto LABEL_257;
                }
                continue;
              }
              break;
            }
            if (*(v172 - 4) << -(char)v176 >> -(char)v176 >= v914 << -(char)v176 >> -(char)v176)
              continue;
            break;
          }
LABEL_257:
          if (v4 < (unint64_t)v121)
            continue;
          break;
        }
LABEL_258:
        if (v4 - 184 != v862)
        {
          *(_QWORD *)v862 = *(_QWORD *)(v4 - 184);
          sub_1C6290124(v863, (unsigned int *)(v4 - 176));
          *(_QWORD *)(v862 + 80) = *(_QWORD *)(v4 - 104);
          sub_1C5BCD700(v849, v4 - 96);
          sub_1C5BCD700(v847, v4 - 56);
          *v846 = *(_OWORD *)(v4 - 16);
        }
        *(_QWORD *)(v4 - 184) = v901;
        sub_1C6290124(v4 - 176, (unsigned int *)&v902);
        *(_QWORD *)(v4 - 104) = v907;
        if ((__int128 *)(v4 - 96) != &v908)
        {
          *(_OWORD *)(v4 - 96) = v908;
          *(_DWORD *)(v4 - 80) = v909;
          if (*(_DWORD *)(v4 - 64) >= 0x41u)
          {
            v177 = *(_QWORD *)(v4 - 72);
            if (v177)
              MEMORY[0x1CAA32F9C](v177, 0x1000C8000313F17);
          }
          *(_QWORD *)(v4 - 72) = v910;
          *(_DWORD *)(v4 - 64) = v911;
          v911 = 0;
        }
        if ((__int128 *)(v4 - 56) != &v912)
        {
          *(_OWORD *)(v4 - 56) = v912;
          *(_DWORD *)(v4 - 40) = v913;
          if (*(_DWORD *)(v4 - 24) >= 0x41u)
          {
            v178 = *(_QWORD *)(v4 - 32);
            if (v178)
              MEMORY[0x1CAA32F9C](v178, 0x1000C8000313F17);
          }
          *(_QWORD *)(v4 - 32) = v914;
          *(_DWORD *)(v4 - 24) = v915;
          v915 = 0;
        }
        *(_OWORD *)(v4 - 16) = v916;
        if (v915 >= 0x41 && v914)
          MEMORY[0x1CAA32F9C](v914, 0x1000C8000313F17);
        if (v911 >= 0x41 && v910)
          MEMORY[0x1CAA32F9C](v910, 0x1000C8000313F17);
        if ((v902 & 1) == 0)
          MEMORY[0x1CAA32FB4](v903.i64[0], 8);
        if (v46 < (unint64_t)v872)
        {
LABEL_281:
          result = sub_1C5BCDAE0(v862, v4 - 184, a3, a4 & 1);
          a2 = v860;
          a4 = 0;
          continue;
        }
        v179 = sub_1C5BD41D8(v862, v4 - 184);
        result = sub_1C5BD41D8(v4, v860);
        if (!(_DWORD)result)
        {
          a2 = v860;
          if (v179)
            continue;
          goto LABEL_281;
        }
        a2 = v4 - 184;
        if (!v179)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_1C5BD2B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  _QWORD *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  _QWORD *v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  _QWORD *v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;

  result = sub_1C5BD4F9C(a1, a2, a3, a4);
  v11 = *(_DWORD *)(a5 + 104);
  v12 = *(_DWORD *)(a4 + 104);
  if (v11 == v12)
  {
    v13 = (uint64_t *)(a5 + 112);
    v14 = (uint64_t *)(a4 + 112);
    v15 = *(unsigned int *)(a5 + 120);
    if (v15 > 0x40)
    {
      v16 = *v13;
      v59 = *(_QWORD *)(*v13 + 8 * ((v15 - 1) >> 6)) & (1 << (v15 - 1));
      v18 = *(_DWORD *)(a4 + 120);
      v60 = v18 - 1;
      v17 = *(_QWORD *)(a4 + 112);
      if (v18 >= 0x41)
        v14 = (uint64_t *)(v17 + 8 * (v60 >> 6));
      if ((v59 != 0) == (((unint64_t)*v14 >> v60) & 1))
      {
        v67 = ((unint64_t)(v15 + 63) >> 3) & 0x3FFFFFF8;
        while (v67)
        {
          v68 = *(_QWORD *)(v16 + v67 - 8);
          v69 = *(_QWORD *)(v17 + v67 - 8);
          v67 -= 8;
          if (v68 != v69)
          {
            if (v68 <= v69)
              goto LABEL_9;
            break;
          }
        }
      }
      else if (v59)
      {
        goto LABEL_9;
      }
    }
    else
    {
      v16 = *v13;
      v17 = *v14;
      if (*v13 << -(char)v15 >> -(char)v15 < *v14 << -(char)v15 >> -(char)v15)
        goto LABEL_9;
      v18 = *(_DWORD *)(a4 + 120);
    }
    if (v18 > 0x40)
    {
      v73 = *(_QWORD *)(v17 + 8 * ((v18 - 1) >> 6)) & (1 << (v18 - 1));
      v74 = v15 - 1;
      if (v15 >= 0x41)
        v13 = (uint64_t *)(v16 + 8 * (v74 >> 6));
      if ((v73 != 0) == (((unint64_t)*v13 >> v74) & 1))
      {
        v97 = v16 - 8;
        v98 = (((unint64_t)v18 + 63) >> 3) & 0x3FFFFFF8;
        v99 = v17 - 8;
        while (v98)
        {
          v100 = *(_QWORD *)(v99 + v98);
          v101 = *(_QWORD *)(v97 + v98);
          v98 -= 8;
          if (v100 != v101)
          {
            if (v100 <= v101)
              return result;
            break;
          }
        }
      }
      else if (v73)
      {
        return result;
      }
    }
    else if (v17 << -(char)v18 >> -(char)v18 < v16 << -(char)v18 >> -(char)v18)
    {
      return result;
    }
  }
  else
  {
    if (v11 < v12)
      goto LABEL_9;
    if (v12 < v11)
      return result;
  }
  v43 = *(_DWORD *)(a5 + 144);
  v44 = *(_DWORD *)(a4 + 144);
  if (v43 == v44)
  {
    v45 = (_QWORD *)(a4 + 152);
    v46 = *(unsigned int *)(a5 + 160);
    if (v46 > 0x40)
    {
      v80 = *(_QWORD *)(a5 + 152);
      v81 = *(_QWORD *)(v80 + 8 * ((v46 - 1) >> 6)) & (1 << (v46 - 1));
      v82 = *(_DWORD *)(a4 + 160);
      v83 = v82 - 1;
      v84 = *(_QWORD *)(a4 + 152);
      if (v82 >= 0x41)
        v45 = (_QWORD *)(v84 + 8 * (v83 >> 6));
      if ((v81 != 0) == ((*v45 >> v83) & 1))
      {
        v117 = v46 + 63;
        v118 = v84 - 8;
        v119 = (v117 >> 3) & 0x3FFFFFF8;
        v120 = v80 - 8;
        while (v119)
        {
          v121 = *(_QWORD *)(v120 + v119);
          v122 = *(_QWORD *)(v118 + v119);
          v119 -= 8;
          if (v121 != v122)
          {
            if (v121 <= v122)
              goto LABEL_9;
            return result;
          }
        }
        return result;
      }
      if (!v81)
        return result;
    }
    else if ((uint64_t)(*(_QWORD *)(a5 + 152) << -(char)v46) >> -(char)v46 >= (uint64_t)(*v45 << -(char)v46) >> -(char)v46)
    {
      return result;
    }
  }
  else if (v43 >= v44)
  {
    return result;
  }
LABEL_9:
  result = sub_1C5BD4D10((uint64_t *)a4, (uint64_t *)a5);
  v19 = *(_DWORD *)(a4 + 104);
  v20 = *(_DWORD *)(a3 + 104);
  if (v19 == v20)
  {
    v21 = (uint64_t *)(a4 + 112);
    v22 = (uint64_t *)(a3 + 112);
    v23 = *(unsigned int *)(a4 + 120);
    if (v23 > 0x40)
    {
      v24 = *v21;
      v61 = *(_QWORD *)(*v21 + 8 * ((v23 - 1) >> 6)) & (1 << (v23 - 1));
      v26 = *(_DWORD *)(a3 + 120);
      v62 = v26 - 1;
      v25 = *(_QWORD *)(a3 + 112);
      if (v26 >= 0x41)
        v22 = (uint64_t *)(v25 + 8 * (v62 >> 6));
      if ((v61 != 0) == (((unint64_t)*v22 >> v62) & 1))
      {
        v70 = ((unint64_t)(v23 + 63) >> 3) & 0x3FFFFFF8;
        while (v70)
        {
          v71 = *(_QWORD *)(v24 + v70 - 8);
          v72 = *(_QWORD *)(v25 + v70 - 8);
          v70 -= 8;
          if (v71 != v72)
          {
            if (v71 <= v72)
              goto LABEL_17;
            break;
          }
        }
      }
      else if (v61)
      {
        goto LABEL_17;
      }
    }
    else
    {
      v24 = *v21;
      v25 = *v22;
      if (*v21 << -(char)v23 >> -(char)v23 < *v22 << -(char)v23 >> -(char)v23)
        goto LABEL_17;
      v26 = *(_DWORD *)(a3 + 120);
    }
    if (v26 > 0x40)
    {
      v78 = *(_QWORD *)(v25 + 8 * ((v26 - 1) >> 6)) & (1 << (v26 - 1));
      v79 = v23 - 1;
      if (v23 >= 0x41)
        v21 = (uint64_t *)(v24 + 8 * (v79 >> 6));
      if ((v78 != 0) == (((unint64_t)*v21 >> v79) & 1))
      {
        v107 = v24 - 8;
        v108 = (((unint64_t)v26 + 63) >> 3) & 0x3FFFFFF8;
        v109 = v25 - 8;
        while (v108)
        {
          v110 = *(_QWORD *)(v109 + v108);
          v111 = *(_QWORD *)(v107 + v108);
          v108 -= 8;
          if (v110 != v111)
          {
            if (v110 <= v111)
              return result;
            break;
          }
        }
      }
      else if (v78)
      {
        return result;
      }
    }
    else if (v25 << -(char)v26 >> -(char)v26 < v24 << -(char)v26 >> -(char)v26)
    {
      return result;
    }
  }
  else
  {
    if (v19 < v20)
      goto LABEL_17;
    if (v20 < v19)
      return result;
  }
  v47 = *(_DWORD *)(a4 + 144);
  v48 = *(_DWORD *)(a3 + 144);
  if (v47 == v48)
  {
    v49 = (_QWORD *)(a3 + 152);
    v50 = *(unsigned int *)(a4 + 160);
    if (v50 > 0x40)
    {
      v90 = *(_QWORD *)(a4 + 152);
      v91 = *(_QWORD *)(v90 + 8 * ((v50 - 1) >> 6)) & (1 << (v50 - 1));
      v92 = *(_DWORD *)(a3 + 160);
      v93 = v92 - 1;
      v94 = *(_QWORD *)(a3 + 152);
      if (v92 >= 0x41)
        v49 = (_QWORD *)(v94 + 8 * (v93 >> 6));
      if ((v91 != 0) == ((*v49 >> v93) & 1))
      {
        v128 = v50 + 63;
        v129 = v94 - 8;
        v130 = (v128 >> 3) & 0x3FFFFFF8;
        v131 = v90 - 8;
        while (v130)
        {
          v132 = *(_QWORD *)(v131 + v130);
          v133 = *(_QWORD *)(v129 + v130);
          v130 -= 8;
          if (v132 != v133)
          {
            if (v132 <= v133)
              goto LABEL_17;
            return result;
          }
        }
        return result;
      }
      if (!v91)
        return result;
    }
    else if ((uint64_t)(*(_QWORD *)(a4 + 152) << -(char)v50) >> -(char)v50 >= (uint64_t)(*v49 << -(char)v50) >> -(char)v50)
    {
      return result;
    }
  }
  else if (v47 >= v48)
  {
    return result;
  }
LABEL_17:
  result = sub_1C5BD4D10((uint64_t *)a3, (uint64_t *)a4);
  v27 = *(_DWORD *)(a3 + 104);
  v28 = *(_DWORD *)(a2 + 104);
  if (v27 == v28)
  {
    v29 = (uint64_t *)(a3 + 112);
    v30 = (uint64_t *)(a2 + 112);
    v31 = *(unsigned int *)(a3 + 120);
    if (v31 > 0x40)
    {
      v32 = *v29;
      v63 = *(_QWORD *)(*v29 + 8 * ((v31 - 1) >> 6)) & (1 << (v31 - 1));
      v34 = *(_DWORD *)(a2 + 120);
      v64 = v34 - 1;
      v33 = *(_QWORD *)(a2 + 112);
      if (v34 >= 0x41)
        v30 = (uint64_t *)(v33 + 8 * (v64 >> 6));
      if ((v63 != 0) == (((unint64_t)*v30 >> v64) & 1))
      {
        v75 = ((unint64_t)(v31 + 63) >> 3) & 0x3FFFFFF8;
        while (v75)
        {
          v76 = *(_QWORD *)(v32 + v75 - 8);
          v77 = *(_QWORD *)(v33 + v75 - 8);
          v75 -= 8;
          if (v76 != v77)
          {
            if (v76 <= v77)
              goto LABEL_25;
            break;
          }
        }
      }
      else if (v63)
      {
        goto LABEL_25;
      }
    }
    else
    {
      v32 = *v29;
      v33 = *v30;
      if (*v29 << -(char)v31 >> -(char)v31 < *v30 << -(char)v31 >> -(char)v31)
        goto LABEL_25;
      v34 = *(_DWORD *)(a2 + 120);
    }
    if (v34 > 0x40)
    {
      v88 = *(_QWORD *)(v33 + 8 * ((v34 - 1) >> 6)) & (1 << (v34 - 1));
      v89 = v31 - 1;
      if (v31 >= 0x41)
        v29 = (uint64_t *)(v32 + 8 * (v89 >> 6));
      if ((v88 != 0) == (((unint64_t)*v29 >> v89) & 1))
      {
        v123 = v32 - 8;
        v124 = (((unint64_t)v34 + 63) >> 3) & 0x3FFFFFF8;
        v125 = v33 - 8;
        while (v124)
        {
          v126 = *(_QWORD *)(v125 + v124);
          v127 = *(_QWORD *)(v123 + v124);
          v124 -= 8;
          if (v126 != v127)
          {
            if (v126 <= v127)
              return result;
            break;
          }
        }
      }
      else if (v88)
      {
        return result;
      }
    }
    else if (v33 << -(char)v34 >> -(char)v34 < v32 << -(char)v34 >> -(char)v34)
    {
      return result;
    }
  }
  else
  {
    if (v27 < v28)
      goto LABEL_25;
    if (v28 < v27)
      return result;
  }
  v51 = *(_DWORD *)(a3 + 144);
  v52 = *(_DWORD *)(a2 + 144);
  if (v51 == v52)
  {
    v53 = (_QWORD *)(a2 + 152);
    v54 = *(unsigned int *)(a3 + 160);
    if (v54 > 0x40)
    {
      v102 = *(_QWORD *)(a3 + 152);
      v103 = *(_QWORD *)(v102 + 8 * ((v54 - 1) >> 6)) & (1 << (v54 - 1));
      v104 = *(_DWORD *)(a2 + 160);
      v105 = v104 - 1;
      v106 = *(_QWORD *)(a2 + 152);
      if (v104 >= 0x41)
        v53 = (_QWORD *)(v106 + 8 * (v105 >> 6));
      if ((v103 != 0) == ((*v53 >> v105) & 1))
      {
        v139 = v54 + 63;
        v140 = v106 - 8;
        v141 = (v139 >> 3) & 0x3FFFFFF8;
        v142 = v102 - 8;
        while (v141)
        {
          v143 = *(_QWORD *)(v142 + v141);
          v144 = *(_QWORD *)(v140 + v141);
          v141 -= 8;
          if (v143 != v144)
          {
            if (v143 <= v144)
              goto LABEL_25;
            return result;
          }
        }
        return result;
      }
      if (!v103)
        return result;
    }
    else if ((uint64_t)(*(_QWORD *)(a3 + 152) << -(char)v54) >> -(char)v54 >= (uint64_t)(*v53 << -(char)v54) >> -(char)v54)
    {
      return result;
    }
  }
  else if (v51 >= v52)
  {
    return result;
  }
LABEL_25:
  result = sub_1C5BD4D10((uint64_t *)a2, (uint64_t *)a3);
  v35 = *(_DWORD *)(a2 + 104);
  v36 = *(_DWORD *)(a1 + 104);
  if (v35 == v36)
  {
    v37 = (uint64_t *)(a2 + 112);
    v38 = (uint64_t *)(a1 + 112);
    v39 = *(unsigned int *)(a2 + 120);
    if (v39 > 0x40)
    {
      v40 = *v37;
      v65 = *(_QWORD *)(*v37 + 8 * ((v39 - 1) >> 6)) & (1 << (v39 - 1));
      v42 = *(_DWORD *)(a1 + 120);
      v66 = v42 - 1;
      v41 = *(_QWORD *)(a1 + 112);
      if (v42 >= 0x41)
        v38 = (uint64_t *)(v41 + 8 * (v66 >> 6));
      if ((v65 != 0) == (((unint64_t)*v38 >> v66) & 1))
      {
        v85 = ((unint64_t)(v39 + 63) >> 3) & 0x3FFFFFF8;
        while (v85)
        {
          v86 = *(_QWORD *)(v40 + v85 - 8);
          v87 = *(_QWORD *)(v41 + v85 - 8);
          v85 -= 8;
          if (v86 != v87)
          {
            if (v86 <= v87)
              return sub_1C5BD4D10((uint64_t *)a1, (uint64_t *)a2);
            break;
          }
        }
      }
      else if (v65)
      {
        return sub_1C5BD4D10((uint64_t *)a1, (uint64_t *)a2);
      }
    }
    else
    {
      v40 = *v37;
      v41 = *v38;
      if (*v37 << -(char)v39 >> -(char)v39 < *v38 << -(char)v39 >> -(char)v39)
        return sub_1C5BD4D10((uint64_t *)a1, (uint64_t *)a2);
      v42 = *(_DWORD *)(a1 + 120);
    }
    if (v42 > 0x40)
    {
      v95 = *(_QWORD *)(v41 + 8 * ((v42 - 1) >> 6)) & (1 << (v42 - 1));
      v96 = v39 - 1;
      if (v39 >= 0x41)
        v37 = (uint64_t *)(v40 + 8 * (v96 >> 6));
      if ((v95 != 0) == (((unint64_t)*v37 >> v96) & 1))
      {
        v134 = v40 - 8;
        v135 = (((unint64_t)v42 + 63) >> 3) & 0x3FFFFFF8;
        v136 = v41 - 8;
        while (v135)
        {
          v137 = *(_QWORD *)(v136 + v135);
          v138 = *(_QWORD *)(v134 + v135);
          v135 -= 8;
          if (v137 != v138)
          {
            if (v137 <= v138)
              return result;
            break;
          }
        }
      }
      else if (v95)
      {
        return result;
      }
    }
    else if (v41 << -(char)v42 >> -(char)v42 < v40 << -(char)v42 >> -(char)v42)
    {
      return result;
    }
  }
  else
  {
    if (v35 < v36)
      return sub_1C5BD4D10((uint64_t *)a1, (uint64_t *)a2);
    if (v36 < v35)
      return result;
  }
  v55 = *(_DWORD *)(a2 + 144);
  v56 = *(_DWORD *)(a1 + 144);
  if (v55 == v56)
  {
    v57 = (_QWORD *)(a1 + 152);
    v58 = *(unsigned int *)(a2 + 160);
    if (v58 <= 0x40)
    {
      if ((uint64_t)(*(_QWORD *)(a2 + 152) << -(char)v58) >> -(char)v58 >= (uint64_t)(*v57 << -(char)v58) >> -(char)v58)
        return result;
      return sub_1C5BD4D10((uint64_t *)a1, (uint64_t *)a2);
    }
    v112 = *(_QWORD *)(a2 + 152);
    v113 = *(_QWORD *)(v112 + 8 * ((v58 - 1) >> 6)) & (1 << (v58 - 1));
    v114 = *(_DWORD *)(a1 + 160);
    v115 = v114 - 1;
    v116 = *(_QWORD *)(a1 + 152);
    if (v114 >= 0x41)
      v57 = (_QWORD *)(v116 + 8 * (v115 >> 6));
    if ((v113 != 0) == ((*v57 >> v115) & 1))
    {
      v145 = v58 + 63;
      v146 = v116 - 8;
      v147 = (v145 >> 3) & 0x3FFFFFF8;
      v148 = v112 - 8;
      while (v147)
      {
        v149 = *(_QWORD *)(v148 + v147);
        v150 = *(_QWORD *)(v146 + v147);
        v147 -= 8;
        if (v149 != v150)
        {
          if (v149 <= v150)
            return sub_1C5BD4D10((uint64_t *)a1, (uint64_t *)a2);
          return result;
        }
      }
    }
    else if (v113)
    {
      return sub_1C5BD4D10((uint64_t *)a1, (uint64_t *)a2);
    }
  }
  else if (v55 < v56)
  {
    return sub_1C5BD4D10((uint64_t *)a1, (uint64_t *)a2);
  }
  return result;
}

uint64_t sub_1C5BD3560(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t *v45;
  unsigned int v46;
  unsigned int v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;

  v5 = result;
  v6 = *(_DWORD *)(a2 + 104);
  v7 = *(_DWORD *)(result + 104);
  if (v6 == v7)
  {
    v8 = (uint64_t *)(a2 + 112);
    v9 = (uint64_t *)(result + 112);
    v10 = *(unsigned int *)(a2 + 120);
    if (v10 > 0x40)
    {
      v11 = *v8;
      v66 = *(_QWORD *)(*v8 + 8 * ((v10 - 1) >> 6)) & (1 << (v10 - 1));
      v13 = *(_DWORD *)(result + 120);
      v67 = v13 - 1;
      v12 = *(_QWORD *)(result + 112);
      result = v12 + 8 * ((v13 - 1) >> 6);
      if (v13 >= 0x41)
        v9 = (uint64_t *)(v12 + 8 * (v67 >> 6));
      if ((v66 != 0) == (((unint64_t)*v9 >> v67) & 1))
      {
        v70 = ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8;
        while (v70)
        {
          v71 = *(_QWORD *)(v11 + v70 - 8);
          v72 = *(_QWORD *)(v12 + v70 - 8);
          v70 -= 8;
          if (v71 != v72)
          {
            if (v71 <= v72)
              goto LABEL_9;
            break;
          }
        }
      }
      else if (v66)
      {
        goto LABEL_9;
      }
    }
    else
    {
      v11 = *v8;
      v12 = *v9;
      if (*v8 << -(char)v10 >> -(char)v10 < *v9 << -(char)v10 >> -(char)v10)
        goto LABEL_9;
      v13 = *(_DWORD *)(result + 120);
    }
    if (v13 > 0x40)
    {
      v78 = *(_QWORD *)(v12 + 8 * ((v13 - 1) >> 6)) & (1 << (v13 - 1));
      v79 = v10 - 1;
      if (v10 >= 0x41)
        v8 = (uint64_t *)(v11 + 8 * (v79 >> 6));
      if ((v78 != 0) == (((unint64_t)*v8 >> v79) & 1))
      {
        v99 = v11 - 8;
        v100 = (((unint64_t)v13 + 63) >> 3) & 0x3FFFFFF8;
        v101 = v12 - 8;
        while (v100)
        {
          v102 = *(_QWORD *)(v101 + v100);
          v103 = *(_QWORD *)(v99 + v100);
          v100 -= 8;
          if (v102 != v103)
          {
            if (v102 <= v103)
              goto LABEL_29;
            break;
          }
        }
      }
      else if (v78)
      {
        goto LABEL_29;
      }
    }
    else if (v12 << -(char)v13 >> -(char)v13 < v11 << -(char)v13 >> -(char)v13)
    {
      goto LABEL_29;
    }
  }
  else
  {
    if (v6 < v7)
      goto LABEL_9;
    if (v7 < v6)
      goto LABEL_29;
  }
  v22 = *(_DWORD *)(a2 + 144);
  v23 = *(_DWORD *)(v5 + 144);
  if (v22 != v23)
  {
    if (v22 >= v23)
      goto LABEL_29;
    goto LABEL_9;
  }
  v24 = (_QWORD *)(v5 + 152);
  v25 = *(unsigned int *)(a2 + 160);
  if (v25 <= 0x40)
  {
    if ((uint64_t)(*(_QWORD *)(a2 + 152) << -(char)v25) >> -(char)v25 >= (uint64_t)(*v24 << -(char)v25) >> -(char)v25)
      goto LABEL_29;
LABEL_9:
    v14 = *(_DWORD *)(a3 + 104);
    if (v14 == v6)
    {
      v15 = (uint64_t *)(a3 + 112);
      v16 = (uint64_t *)(a2 + 112);
      v17 = *(unsigned int *)(a3 + 120);
      if (v17 > 0x40)
      {
        v18 = *v15;
        v68 = *(_QWORD *)(*v15 + 8 * ((v17 - 1) >> 6)) & (1 << (v17 - 1));
        v20 = *(_DWORD *)(a2 + 120);
        v69 = v20 - 1;
        v19 = *(_QWORD *)(a2 + 112);
        if (v20 >= 0x41)
          v16 = (uint64_t *)(v19 + 8 * (v69 >> 6));
        if ((v68 != 0) == (((unint64_t)*v16 >> v69) & 1))
        {
          v75 = ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8;
          while (v75)
          {
            v76 = *(_QWORD *)(v18 + v75 - 8);
            v77 = *(_QWORD *)(v19 + v75 - 8);
            v75 -= 8;
            if (v76 != v77)
            {
              if (v76 <= v77)
                goto LABEL_17;
              break;
            }
          }
        }
        else if (v68)
        {
          goto LABEL_17;
        }
      }
      else
      {
        v18 = *v15;
        v19 = *v16;
        if (*v15 << -(char)v17 >> -(char)v17 < *v16 << -(char)v17 >> -(char)v17)
          goto LABEL_17;
        v20 = *(_DWORD *)(a2 + 120);
      }
      if (v20 > 0x40)
      {
        v84 = *(_QWORD *)(v19 + 8 * ((v20 - 1) >> 6)) & (1 << (v20 - 1));
        v85 = v17 - 1;
        if (v17 >= 0x41)
          v15 = (uint64_t *)(v18 + 8 * (v85 >> 6));
        if ((v84 != 0) == (((unint64_t)*v15 >> v85) & 1))
        {
          v112 = v18 - 8;
          v113 = (((unint64_t)v20 + 63) >> 3) & 0x3FFFFFF8;
          v114 = v19 - 8;
          while (v113)
          {
            v115 = *(_QWORD *)(v114 + v113);
            v116 = *(_QWORD *)(v112 + v113);
            v113 -= 8;
            if (v115 != v116)
            {
              if (v115 <= v116)
                goto LABEL_52;
              break;
            }
          }
        }
        else if (v84)
        {
          goto LABEL_52;
        }
      }
      else if (v19 << -(char)v20 >> -(char)v20 < v18 << -(char)v20 >> -(char)v20)
      {
        goto LABEL_52;
      }
    }
    else
    {
      if (v14 < v6)
        goto LABEL_17;
      if (v6 < v14)
        goto LABEL_52;
    }
    v26 = *(_DWORD *)(a3 + 144);
    v27 = *(_DWORD *)(a2 + 144);
    if (v26 != v27)
    {
      if (v26 >= v27)
        goto LABEL_52;
      goto LABEL_17;
    }
    v28 = (_QWORD *)(a2 + 152);
    v29 = *(unsigned int *)(a3 + 160);
    if (v29 <= 0x40)
    {
      if ((uint64_t)(*(_QWORD *)(a3 + 152) << -(char)v29) >> -(char)v29 >= (uint64_t)(*v28 << -(char)v29) >> -(char)v29)
        goto LABEL_52;
LABEL_17:
      v21 = (uint64_t *)v5;
LABEL_61:
      v45 = (uint64_t *)a3;
      return sub_1C5BD4D10(v21, v45);
    }
    v91 = *(_QWORD *)(a3 + 152);
    v92 = *(_QWORD *)(v91 + 8 * ((v29 - 1) >> 6)) & (1 << (v29 - 1));
    v93 = *(_DWORD *)(a2 + 160);
    v94 = v93 - 1;
    v95 = *(_QWORD *)(a2 + 152);
    if (v93 >= 0x41)
      v28 = (_QWORD *)(v95 + 8 * (v94 >> 6));
    if ((v92 != 0) != ((*v28 >> v94) & 1))
    {
      if (!v92)
        goto LABEL_52;
      goto LABEL_17;
    }
    v132 = v29 + 63;
    v133 = v95 - 8;
    v134 = (v132 >> 3) & 0x3FFFFFF8;
    v135 = v91 - 8;
    while (v134)
    {
      v136 = *(_QWORD *)(v135 + v134);
      v137 = *(_QWORD *)(v133 + v134);
      v134 -= 8;
      if (v136 != v137)
      {
        if (v136 <= v137)
          goto LABEL_17;
        break;
      }
    }
LABEL_52:
    result = sub_1C5BD4D10((uint64_t *)v5, (uint64_t *)a2);
    v50 = *(_DWORD *)(a3 + 104);
    v51 = *(_DWORD *)(a2 + 104);
    if (v50 == v51)
    {
      v52 = (uint64_t *)(a3 + 112);
      v53 = (uint64_t *)(a2 + 112);
      v54 = *(unsigned int *)(a3 + 120);
      if (v54 > 0x40)
      {
        v55 = *v52;
        v82 = *(_QWORD *)(*v52 + 8 * ((v54 - 1) >> 6)) & (1 << (v54 - 1));
        v57 = *(_DWORD *)(a2 + 120);
        v83 = v57 - 1;
        v56 = *(_QWORD *)(a2 + 112);
        if (v57 >= 0x41)
          v53 = (uint64_t *)(v56 + 8 * (v83 >> 6));
        if ((v82 != 0) == (((unint64_t)*v53 >> v83) & 1))
        {
          v107 = ((unint64_t)(v54 + 63) >> 3) & 0x3FFFFFF8;
          while (v107)
          {
            v108 = *(_QWORD *)(v55 + v107 - 8);
            v109 = *(_QWORD *)(v56 + v107 - 8);
            v107 -= 8;
            if (v108 != v109)
            {
              if (v108 <= v109)
                goto LABEL_60;
              break;
            }
          }
        }
        else if (v82)
        {
          goto LABEL_60;
        }
LABEL_56:
        if (v57 > 0x40)
        {
          v125 = *(_QWORD *)(v56 + 8 * ((v57 - 1) >> 6)) & (1 << (v57 - 1));
          v126 = v54 - 1;
          if (v54 >= 0x41)
            v52 = (uint64_t *)(v55 + 8 * (v126 >> 6));
          if ((v125 != 0) == (((unint64_t)*v52 >> v126) & 1))
          {
            v158 = v55 - 8;
            v159 = (((unint64_t)v57 + 63) >> 3) & 0x3FFFFFF8;
            v160 = v56 - 8;
            while (v159)
            {
              v161 = *(_QWORD *)(v160 + v159);
              v162 = *(_QWORD *)(v158 + v159);
              v159 -= 8;
              if (v161 != v162)
              {
                if (v161 <= v162)
                  return result;
                break;
              }
            }
          }
          else if (v125)
          {
            return result;
          }
        }
        else if (v56 << -(char)v57 >> -(char)v57 < v55 << -(char)v57 >> -(char)v57)
        {
          return result;
        }
LABEL_69:
        v62 = *(_DWORD *)(a3 + 144);
        v63 = *(_DWORD *)(a2 + 144);
        if (v62 == v63)
        {
          v64 = (_QWORD *)(a2 + 152);
          v65 = *(unsigned int *)(a3 + 160);
          if (v65 > 0x40)
          {
            v143 = *(_QWORD *)(a3 + 152);
            v144 = *(_QWORD *)(v143 + 8 * ((v65 - 1) >> 6)) & (1 << (v65 - 1));
            v145 = *(_DWORD *)(a2 + 160);
            v146 = v145 - 1;
            v147 = *(_QWORD *)(a2 + 152);
            if (v145 >= 0x41)
              v64 = (_QWORD *)(v147 + 8 * (v146 >> 6));
            if ((v144 != 0) == ((*v64 >> v146) & 1))
            {
              v175 = v65 + 63;
              v176 = v147 - 8;
              v177 = (v175 >> 3) & 0x3FFFFFF8;
              v178 = v143 - 8;
              while (v177)
              {
                v179 = *(_QWORD *)(v178 + v177);
                v180 = *(_QWORD *)(v176 + v177);
                v177 -= 8;
                if (v179 != v180)
                {
                  if (v179 <= v180)
                    goto LABEL_60;
                  return result;
                }
              }
              return result;
            }
            if (!v144)
              return result;
          }
          else if ((uint64_t)(*(_QWORD *)(a3 + 152) << -(char)v65) >> -(char)v65 >= (uint64_t)(*v64 << -(char)v65) >> -(char)v65)
          {
            return result;
          }
        }
        else if (v62 >= v63)
        {
          return result;
        }
        goto LABEL_60;
      }
      v55 = *v52;
      v56 = *v53;
      if (*v52 << -(char)v54 >> -(char)v54 >= *v53 << -(char)v54 >> -(char)v54)
      {
        v57 = *(_DWORD *)(a2 + 120);
        goto LABEL_56;
      }
    }
    else if (v50 >= v51)
    {
      if (v51 < v50)
        return result;
      goto LABEL_69;
    }
LABEL_60:
    v21 = (uint64_t *)a2;
    goto LABEL_61;
  }
  v86 = *(_QWORD *)(a2 + 152);
  v87 = *(_QWORD *)(v86 + 8 * ((v25 - 1) >> 6)) & (1 << (v25 - 1));
  v88 = *(_DWORD *)(v5 + 160);
  v89 = v88 - 1;
  v90 = *(_QWORD *)(v5 + 152);
  if (v88 >= 0x41)
    v24 = (_QWORD *)(v90 + 8 * (v89 >> 6));
  if ((v87 != 0) != ((*v24 >> v89) & 1))
  {
    if (!v87)
      goto LABEL_29;
    goto LABEL_9;
  }
  v117 = v25 + 63;
  v118 = v90 - 8;
  v119 = (v117 >> 3) & 0x3FFFFFF8;
  v120 = v86 - 8;
  while (v119)
  {
    v121 = *(_QWORD *)(v120 + v119);
    v122 = *(_QWORD *)(v118 + v119);
    v119 -= 8;
    if (v121 != v122)
    {
      if (v121 <= v122)
        goto LABEL_9;
      break;
    }
  }
LABEL_29:
  v30 = *(_DWORD *)(a3 + 104);
  if (v30 == v6)
  {
    v31 = (uint64_t *)(a3 + 112);
    v32 = (uint64_t *)(a2 + 112);
    v33 = *(unsigned int *)(a3 + 120);
    if (v33 > 0x40)
    {
      v34 = *v31;
      v73 = *(_QWORD *)(*v31 + 8 * ((v33 - 1) >> 6)) & (1 << (v33 - 1));
      v36 = *(_DWORD *)(a2 + 120);
      v74 = v36 - 1;
      v35 = *(_QWORD *)(a2 + 112);
      if (v36 >= 0x41)
        v32 = (uint64_t *)(v35 + 8 * (v74 >> 6));
      if ((v73 != 0) == (((unint64_t)*v32 >> v74) & 1))
      {
        v96 = ((unint64_t)(v33 + 63) >> 3) & 0x3FFFFFF8;
        while (v96)
        {
          v97 = *(_QWORD *)(v34 + v96 - 8);
          v98 = *(_QWORD *)(v35 + v96 - 8);
          v96 -= 8;
          if (v97 != v98)
          {
            if (v97 <= v98)
              goto LABEL_37;
            break;
          }
        }
      }
      else if (v73)
      {
        goto LABEL_37;
      }
    }
    else
    {
      v34 = *v31;
      v35 = *v32;
      if (*v31 << -(char)v33 >> -(char)v33 < *v32 << -(char)v33 >> -(char)v33)
        goto LABEL_37;
      v36 = *(_DWORD *)(a2 + 120);
    }
    if (v36 > 0x40)
    {
      v110 = *(_QWORD *)(v35 + 8 * ((v36 - 1) >> 6)) & (1 << (v36 - 1));
      v111 = v33 - 1;
      if (v33 >= 0x41)
        v31 = (uint64_t *)(v34 + 8 * (v111 >> 6));
      if ((v110 != 0) == (((unint64_t)*v31 >> v111) & 1))
      {
        v148 = v34 - 8;
        v149 = (((unint64_t)v36 + 63) >> 3) & 0x3FFFFFF8;
        v150 = v35 - 8;
        while (v149)
        {
          v151 = *(_QWORD *)(v150 + v149);
          v152 = *(_QWORD *)(v148 + v149);
          v149 -= 8;
          if (v151 != v152)
          {
            if (v151 <= v152)
              return result;
            break;
          }
        }
      }
      else if (v110)
      {
        return result;
      }
    }
    else if (v35 << -(char)v36 >> -(char)v36 < v34 << -(char)v36 >> -(char)v36)
    {
      return result;
    }
  }
  else
  {
    if (v30 < v6)
      goto LABEL_37;
    if (v6 < v30)
      return result;
  }
  v46 = *(_DWORD *)(a3 + 144);
  v47 = *(_DWORD *)(a2 + 144);
  if (v46 == v47)
  {
    v48 = (_QWORD *)(a2 + 152);
    v49 = *(unsigned int *)(a3 + 160);
    if (v49 > 0x40)
    {
      v127 = *(_QWORD *)(a3 + 152);
      v128 = *(_QWORD *)(v127 + 8 * ((v49 - 1) >> 6)) & (1 << (v49 - 1));
      v129 = *(_DWORD *)(a2 + 160);
      v130 = v129 - 1;
      v131 = *(_QWORD *)(a2 + 152);
      if (v129 >= 0x41)
        v48 = (_QWORD *)(v131 + 8 * (v130 >> 6));
      if ((v128 != 0) == ((*v48 >> v130) & 1))
      {
        v163 = v49 + 63;
        v164 = v131 - 8;
        v165 = (v163 >> 3) & 0x3FFFFFF8;
        v166 = v127 - 8;
        while (v165)
        {
          v167 = *(_QWORD *)(v166 + v165);
          v168 = *(_QWORD *)(v164 + v165);
          v165 -= 8;
          if (v167 != v168)
          {
            if (v167 <= v168)
              goto LABEL_37;
            return result;
          }
        }
        return result;
      }
      if (!v128)
        return result;
    }
    else if ((uint64_t)(*(_QWORD *)(a3 + 152) << -(char)v49) >> -(char)v49 >= (uint64_t)(*v48 << -(char)v49) >> -(char)v49)
    {
      return result;
    }
  }
  else if (v46 >= v47)
  {
    return result;
  }
LABEL_37:
  result = sub_1C5BD4D10((uint64_t *)a2, (uint64_t *)a3);
  v37 = *(_DWORD *)(a2 + 104);
  v38 = *(_DWORD *)(v5 + 104);
  if (v37 == v38)
  {
    v39 = (uint64_t *)(a2 + 112);
    v40 = (uint64_t *)(v5 + 112);
    v41 = *(unsigned int *)(a2 + 120);
    if (v41 > 0x40)
    {
      v42 = *v39;
      v80 = *(_QWORD *)(*v39 + 8 * ((v41 - 1) >> 6)) & (1 << (v41 - 1));
      v44 = *(_DWORD *)(v5 + 120);
      v81 = v44 - 1;
      v43 = *(_QWORD *)(v5 + 112);
      if (v44 >= 0x41)
        v40 = (uint64_t *)(v43 + 8 * (v81 >> 6));
      if ((v80 != 0) == (((unint64_t)*v40 >> v81) & 1))
      {
        v104 = ((unint64_t)(v41 + 63) >> 3) & 0x3FFFFFF8;
        while (v104)
        {
          v105 = *(_QWORD *)(v42 + v104 - 8);
          v106 = *(_QWORD *)(v43 + v104 - 8);
          v104 -= 8;
          if (v105 != v106)
          {
            if (v105 <= v106)
              goto LABEL_45;
            break;
          }
        }
      }
      else if (v80)
      {
        goto LABEL_45;
      }
    }
    else
    {
      v42 = *v39;
      v43 = *v40;
      if (*v39 << -(char)v41 >> -(char)v41 < *v40 << -(char)v41 >> -(char)v41)
        goto LABEL_45;
      v44 = *(_DWORD *)(v5 + 120);
    }
    if (v44 > 0x40)
    {
      v123 = *(_QWORD *)(v43 + 8 * ((v44 - 1) >> 6)) & (1 << (v44 - 1));
      v124 = v41 - 1;
      if (v41 >= 0x41)
        v39 = (uint64_t *)(v42 + 8 * (v124 >> 6));
      if ((v123 != 0) == (((unint64_t)*v39 >> v124) & 1))
      {
        v153 = v42 - 8;
        v154 = (((unint64_t)v44 + 63) >> 3) & 0x3FFFFFF8;
        v155 = v43 - 8;
        while (v154)
        {
          v156 = *(_QWORD *)(v155 + v154);
          v157 = *(_QWORD *)(v153 + v154);
          v154 -= 8;
          if (v156 != v157)
          {
            if (v156 <= v157)
              return result;
            break;
          }
        }
      }
      else if (v123)
      {
        return result;
      }
    }
    else if (v43 << -(char)v44 >> -(char)v44 < v42 << -(char)v44 >> -(char)v44)
    {
      return result;
    }
  }
  else
  {
    if (v37 < v38)
      goto LABEL_45;
    if (v38 < v37)
      return result;
  }
  v58 = *(_DWORD *)(a2 + 144);
  v59 = *(_DWORD *)(v5 + 144);
  if (v58 != v59)
  {
    if (v58 >= v59)
      return result;
LABEL_45:
    v21 = (uint64_t *)v5;
    v45 = (uint64_t *)a2;
    return sub_1C5BD4D10(v21, v45);
  }
  v60 = (_QWORD *)(v5 + 152);
  v61 = *(unsigned int *)(a2 + 160);
  if (v61 <= 0x40)
  {
    if ((uint64_t)(*(_QWORD *)(a2 + 152) << -(char)v61) >> -(char)v61 >= (uint64_t)(*v60 << -(char)v61) >> -(char)v61)
      return result;
    goto LABEL_45;
  }
  v138 = *(_QWORD *)(a2 + 152);
  v139 = *(_QWORD *)(v138 + 8 * ((v61 - 1) >> 6)) & (1 << (v61 - 1));
  v140 = *(_DWORD *)(v5 + 160);
  v141 = v140 - 1;
  v142 = *(_QWORD *)(v5 + 152);
  if (v140 >= 0x41)
    v60 = (_QWORD *)(v142 + 8 * (v141 >> 6));
  if ((v139 != 0) == ((*v60 >> v141) & 1))
  {
    v169 = v61 + 63;
    v170 = v142 - 8;
    v171 = (v169 >> 3) & 0x3FFFFFF8;
    v172 = v138 - 8;
    while (v171)
    {
      v173 = *(_QWORD *)(v172 + v171);
      v174 = *(_QWORD *)(v170 + v171);
      v171 -= 8;
      if (v173 != v174)
      {
        if (v173 <= v174)
          goto LABEL_45;
        return result;
      }
    }
  }
  else if (v139)
  {
    goto LABEL_45;
  }
  return result;
}

BOOL sub_1C5BD41D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  _QWORD *v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unsigned int v95;
  unsigned int v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  int64x2_t v123;
  uint64_t v124;
  uint64_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  uint64_t v130;
  __int128 v131;
  unsigned int v132;
  uint64_t v133;
  unsigned int v134;
  __int128 v135;
  unsigned int v136;
  uint64_t v137;
  unsigned int v138;
  __int128 v139;
  uint64_t v140;

  v2 = a2;
  v140 = *MEMORY[0x1E0C80C00];
  v4 = 0xD37A6F4DE9BD37A7 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(_DWORD *)(a2 - 80);
      v7 = *(_DWORD *)(a1 + 104);
      if (v6 == v7)
      {
        v8 = (uint64_t *)(a2 - 72);
        v9 = (uint64_t *)(a1 + 112);
        v10 = *(unsigned int *)(a2 - 64);
        if (v10 > 0x40)
        {
          v11 = *v8;
          v99 = *(_QWORD *)(*v8 + 8 * ((v10 - 1) >> 6)) & (1 << (v10 - 1));
          v13 = *(_DWORD *)(a1 + 120);
          v100 = v13 - 1;
          v12 = *(_QWORD *)(a1 + 112);
          if (v13 >= 0x41)
            v9 = (uint64_t *)(v12 + 8 * (v100 >> 6));
          if ((v99 != 0) == (((unint64_t)*v9 >> v100) & 1))
          {
            v101 = ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8;
            do
            {
              if (!v101)
                goto LABEL_6;
              v102 = *(_QWORD *)(v11 + v101 - 8);
              v103 = *(_QWORD *)(v12 + v101 - 8);
              v101 -= 8;
            }
            while (v102 == v103);
            if (v102 <= v103)
              goto LABEL_126;
          }
          else if (v99)
          {
            goto LABEL_126;
          }
        }
        else
        {
          v11 = *v8;
          v12 = *v9;
          if (*v8 << -(char)v10 >> -(char)v10 < *v9 << -(char)v10 >> -(char)v10)
            goto LABEL_126;
          v13 = *(_DWORD *)(a1 + 120);
        }
LABEL_6:
        if (v13 > 0x40)
        {
          v104 = *(_QWORD *)(v12 + 8 * ((v13 - 1) >> 6)) & (1 << (v13 - 1));
          v105 = v10 - 1;
          if (v10 >= 0x41)
            v8 = (uint64_t *)(v11 + 8 * (v105 >> 6));
          if ((v104 != 0) == (((unint64_t)*v8 >> v105) & 1))
          {
            v111 = v11 - 8;
            v112 = (((unint64_t)v13 + 63) >> 3) & 0x3FFFFFF8;
            v113 = v12 - 8;
            do
            {
              if (!v112)
                goto LABEL_130;
              v114 = *(_QWORD *)(v113 + v112);
              v115 = *(_QWORD *)(v111 + v112);
              v112 -= 8;
            }
            while (v114 == v115);
            if (v114 <= v115)
              return 1;
          }
          else if (v104)
          {
            return 1;
          }
        }
        else if (v12 << -(char)v13 >> -(char)v13 < v11 << -(char)v13 >> -(char)v13)
        {
          return 1;
        }
LABEL_130:
        v95 = *(_DWORD *)(a2 - 40);
        v96 = *(_DWORD *)(a1 + 144);
        if (v95 == v96)
        {
          v97 = (_QWORD *)(a1 + 152);
          v98 = *(unsigned int *)(a2 - 24);
          if (v98 > 0x40)
          {
            v106 = *(_QWORD *)(a2 - 32);
            v107 = *(_QWORD *)(v106 + 8 * ((v98 - 1) >> 6)) & (1 << (v98 - 1));
            v108 = *(_DWORD *)(a1 + 160);
            v109 = v108 - 1;
            v110 = *(_QWORD *)(a1 + 152);
            if (v108 >= 0x41)
              v97 = (_QWORD *)(v110 + 8 * (v109 >> 6));
            if ((v107 != 0) == ((*v97 >> v109) & 1))
            {
              v116 = v98 + 63;
              v117 = v110 - 8;
              v118 = (v116 >> 3) & 0x3FFFFFF8;
              v119 = v106 - 8;
              do
              {
                if (!v118)
                  return 1;
                v120 = *(_QWORD *)(v119 + v118);
                v121 = *(_QWORD *)(v117 + v118);
                v118 -= 8;
              }
              while (v120 == v121);
              if (v120 > v121)
                return 1;
            }
            else if (!v107)
            {
              return 1;
            }
          }
          else if ((uint64_t)(*(_QWORD *)(a2 - 32) << -(char)v98) >> -(char)v98 >= (uint64_t)(*v97 << -(char)v98) >> -(char)v98)
          {
            return 1;
          }
        }
        else if (v95 >= v96)
        {
          return 1;
        }
LABEL_126:
        sub_1C5BD4D10((uint64_t *)a1, (uint64_t *)(a2 - 184));
        return 1;
      }
      if (v6 < v7)
        goto LABEL_126;
      if (v7 >= v6)
        goto LABEL_130;
      return result;
    case 3uLL:
      sub_1C5BD3560(a1, a1 + 184, a2 - 184);
      return 1;
    case 4uLL:
      sub_1C5BD4F9C(a1, a1 + 184, a1 + 368, a2 - 184);
      return 1;
    case 5uLL:
      sub_1C5BD2B34(a1, a1 + 184, a1 + 368, a1 + 552, a2 - 184);
      return 1;
    default:
      v14 = a1 + 368;
      sub_1C5BD3560(a1, a1 + 184, a1 + 368);
      v15 = a1 + 552;
      if (a1 + 552 == v2)
        return 1;
      v16 = 0;
      v17 = (unsigned int *)&v125;
      v123 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v122 = v2;
      while (1)
      {
        v18 = *(_DWORD *)(v15 + 104);
        v19 = *(_DWORD *)(v14 + 104);
        if (v18 == v19)
        {
          v20 = (uint64_t *)(v15 + 112);
          v21 = (uint64_t *)(v14 + 112);
          v22 = *(unsigned int *)(v15 + 120);
          if (v22 > 0x40)
          {
            v23 = *v20;
            v72 = *(_QWORD *)(*v20 + 8 * ((v22 - 1) >> 6)) & (1 << (v22 - 1));
            v25 = *(_DWORD *)(v14 + 120);
            v73 = v25 - 1;
            v24 = *(_QWORD *)(v14 + 112);
            if (v25 >= 0x41)
              v21 = (uint64_t *)(v24 + 8 * (v73 >> 6));
            if ((v72 != 0) == (((unint64_t)*v21 >> v73) & 1))
            {
              v74 = ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8;
              do
              {
                if (!v74)
                  goto LABEL_15;
                v75 = *(_QWORD *)(v23 + v74 - 8);
                v76 = *(_QWORD *)(v24 + v74 - 8);
                v74 -= 8;
              }
              while (v75 == v76);
              if (v75 <= v76)
                goto LABEL_23;
            }
            else if (v72)
            {
              goto LABEL_23;
            }
          }
          else
          {
            v23 = *v20;
            v24 = *v21;
            if (*v20 << -(char)v22 >> -(char)v22 < *v21 << -(char)v22 >> -(char)v22)
              goto LABEL_23;
            v25 = *(_DWORD *)(v14 + 120);
          }
LABEL_15:
          if (v25 > 0x40)
          {
            v82 = *(_QWORD *)(v24 + 8 * ((v25 - 1) >> 6)) & (1 << (v25 - 1));
            v83 = v22 - 1;
            if (v22 >= 0x41)
              v20 = (uint64_t *)(v23 + 8 * (v83 >> 6));
            if ((v82 != 0) == (((unint64_t)*v20 >> v83) & 1))
            {
              v90 = v23 - 8;
              v91 = (((unint64_t)v25 + 63) >> 3) & 0x3FFFFFF8;
              v92 = v24 - 8;
              while (v91)
              {
                v93 = *(_QWORD *)(v92 + v91);
                v94 = *(_QWORD *)(v90 + v91);
                v91 -= 8;
                if (v93 != v94)
                {
                  if (v93 <= v94)
                    goto LABEL_89;
                  break;
                }
              }
            }
            else if (v82)
            {
              goto LABEL_89;
            }
          }
          else if (v24 << -(char)v25 >> -(char)v25 < v23 << -(char)v25 >> -(char)v25)
          {
            goto LABEL_89;
          }
        }
        else
        {
          if (v18 < v19)
            goto LABEL_23;
          if (v19 < v18)
            goto LABEL_89;
        }
        v26 = *(_DWORD *)(v15 + 144);
        v27 = *(_DWORD *)(v14 + 144);
        if (v26 != v27)
        {
          if (v26 >= v27)
            goto LABEL_89;
          goto LABEL_23;
        }
        v28 = (_QWORD *)(v14 + 152);
        v29 = *(unsigned int *)(v15 + 160);
        if (v29 <= 0x40)
        {
          if ((uint64_t)(*(_QWORD *)(v15 + 152) << -(char)v29) >> -(char)v29 >= (uint64_t)(*v28 << -(char)v29) >> -(char)v29)
            goto LABEL_89;
          goto LABEL_23;
        }
        v77 = *(_QWORD *)(v15 + 152);
        v78 = *(_QWORD *)(v77 + 8 * ((v29 - 1) >> 6)) & (1 << (v29 - 1));
        v79 = *(_DWORD *)(v14 + 160);
        v80 = v79 - 1;
        v81 = *(_QWORD *)(v14 + 152);
        if (v79 >= 0x41)
          v28 = (_QWORD *)(v81 + 8 * (v80 >> 6));
        if ((v78 != 0) != ((*v28 >> v80) & 1))
          break;
        v84 = v29 + 63;
        v85 = v81 - 8;
        v86 = (v84 >> 3) & 0x3FFFFFF8;
        v87 = v77 - 8;
        do
        {
          if (!v86)
            goto LABEL_89;
          v88 = *(_QWORD *)(v87 + v86);
          v89 = *(_QWORD *)(v85 + v86);
          v86 -= 8;
        }
        while (v88 == v89);
        if (v88 <= v89)
          goto LABEL_23;
LABEL_89:
        v14 = v15;
        v15 += 184;
        if (v15 == v2)
          return 1;
      }
      if (!v78)
        goto LABEL_89;
LABEL_23:
      v124 = *(_QWORD *)v15;
      v125 = 1;
      v126 = v123;
      v127 = v123;
      v128 = v123;
      v129 = v123;
      v30 = v17;
      sub_1C629018C(v17, (unsigned int *)(v15 + 8));
      v31 = *(_QWORD *)(v15 + 80);
      v131 = *(_OWORD *)(v15 + 88);
      v132 = *(_DWORD *)(v15 + 104);
      v134 = *(_DWORD *)(v15 + 120);
      v32 = *(_QWORD *)(v15 + 112);
      v130 = v31;
      v133 = v32;
      *(_DWORD *)(v15 + 120) = 0;
      v135 = *(_OWORD *)(v15 + 128);
      v136 = *(_DWORD *)(v15 + 144);
      v138 = *(_DWORD *)(v15 + 160);
      v137 = *(_QWORD *)(v15 + 152);
      *(_DWORD *)(v15 + 160) = 0;
      v33 = v15;
      v139 = *(_OWORD *)(v15 + 168);
      break;
  }
  while (1)
  {
    while (1)
    {
      while (1)
      {
LABEL_24:
        v34 = v33;
        v33 = v14;
        *(_QWORD *)v34 = *(_QWORD *)v14;
        v35 = v14 + 8;
        sub_1C6290124(v34 + 8, (unsigned int *)(v14 + 8));
        *(_QWORD *)(v34 + 80) = *(_QWORD *)(v14 + 80);
        v36 = (_QWORD *)(v14 + 88);
        sub_1C5BCD700(v34 + 88, v14 + 88);
        v37 = (_QWORD *)(v14 + 128);
        sub_1C5BCD700(v34 + 128, v14 + 128);
        *(_OWORD *)(v34 + 168) = *(_OWORD *)(v14 + 168);
        if (v14 == a1)
        {
          v66 = a1;
LABEL_70:
          v67 = (_OWORD *)(v33 + 168);
          *(_QWORD *)v66 = v124;
          v68 = v35;
          v17 = v30;
          sub_1C6290124(v68, v30);
          *(_QWORD *)(v66 + 80) = v130;
          if ((uint64_t *)v66 == &v124)
          {
            v71 = v138;
            v2 = v122;
            *v67 = v139;
            if (v71 >= 0x41 && v137)
              MEMORY[0x1CAA32F9C](v137, 0x1000C8000313F17);
          }
          else
          {
            *v36 = v131;
            *(_QWORD *)(v66 + 96) = *((_QWORD *)&v131 + 1);
            *(_DWORD *)(v66 + 104) = v132;
            v2 = v122;
            if (*(_DWORD *)(v66 + 120) >= 0x41u)
            {
              v69 = *(_QWORD *)(v66 + 112);
              if (v69)
                MEMORY[0x1CAA32F9C](v69, 0x1000C8000313F17);
            }
            *(_QWORD *)(v66 + 112) = v133;
            *(_DWORD *)(v66 + 120) = v134;
            v134 = 0;
            *v37 = v135;
            *(_QWORD *)(v66 + 136) = *((_QWORD *)&v135 + 1);
            *(_DWORD *)(v66 + 144) = v136;
            if (*(_DWORD *)(v66 + 160) >= 0x41u)
            {
              v70 = *(_QWORD *)(v66 + 152);
              if (v70)
                MEMORY[0x1CAA32F9C](v70, 0x1000C8000313F17);
            }
            *(_QWORD *)(v66 + 152) = v137;
            *(_DWORD *)(v66 + 160) = v138;
            v138 = 0;
            *v67 = v139;
          }
          if (v134 >= 0x41 && v133)
            MEMORY[0x1CAA32F9C](v133, 0x1000C8000313F17);
          if ((v125 & 1) == 0)
            MEMORY[0x1CAA32FB4](v126.i64[0], 8);
          if (++v16 == 8)
            return v15 + 184 == v2;
          goto LABEL_89;
        }
        v14 -= 184;
        v38 = *(_DWORD *)(v33 - 80);
        if (v132 == v38)
          break;
        if (v132 >= v38)
        {
          if (v38 < v132)
            goto LABEL_69;
LABEL_34:
          v43 = *(_DWORD *)(v33 - 40);
          if (v136 == v43)
          {
            v44 = (_QWORD *)(v33 - 32);
            if (v138 > 0x40)
            {
              v50 = *(_QWORD *)(v137 + 8 * ((v138 - 1) >> 6)) & (1 << (v138 - 1));
              v51 = *(_DWORD *)(v33 - 24);
              v52 = v51 - 1;
              v53 = *(_QWORD *)(v33 - 32);
              if (v51 >= 0x41)
                v44 = (_QWORD *)(v53 + 8 * (v52 >> 6));
              if ((v50 != 0) == ((*v44 >> v52) & 1))
              {
                v57 = v53 - 8;
                v58 = (((unint64_t)v138 + 63) >> 3) & 0x3FFFFFF8;
                while (v58)
                {
                  v59 = *(_QWORD *)(v137 - 8 + v58);
                  v60 = *(_QWORD *)(v57 + v58);
                  v58 -= 8;
                  if (v59 != v60)
                  {
                    if (v59 <= v60)
                      goto LABEL_24;
                    break;
                  }
                }
LABEL_69:
                v66 = v33;
                goto LABEL_70;
              }
              if (!v50)
                goto LABEL_69;
            }
            else if (v137 << -(uint64_t)v138 >> -(uint64_t)v138 >= (uint64_t)(*v44 << -(uint64_t)v138) >> -(uint64_t)v138)
            {
              goto LABEL_69;
            }
          }
          else if (v136 >= v43)
          {
            goto LABEL_69;
          }
        }
      }
      v39 = (uint64_t *)(v33 - 72);
      if (v134 > 0x40)
        break;
      v40 = v133;
      v41 = *v39;
      if (v133 << -(char)v134 >> -(char)v134 >= *v39 << -(char)v134 >> -(char)v134)
      {
        v42 = *(_DWORD *)(v33 - 64);
        goto LABEL_29;
      }
    }
    v40 = v133;
    v45 = *(_QWORD *)(v133 + 8 * ((v134 - 1) >> 6)) & (1 << (v134 - 1));
    v42 = *(_DWORD *)(v33 - 64);
    v46 = v42 - 1;
    v41 = *(_QWORD *)(v33 - 72);
    if (v42 >= 0x41)
      v39 = (uint64_t *)(v41 + 8 * (v46 >> 6));
    if ((v45 != 0) == (((unint64_t)*v39 >> v46) & 1))
    {
      v47 = (((unint64_t)v134 + 63) >> 3) & 0x3FFFFFF8;
      while (v47)
      {
        v48 = *(_QWORD *)(v133 + v47 - 8);
        v49 = *(_QWORD *)(v41 + v47 - 8);
        v47 -= 8;
        if (v48 != v49)
        {
          if (v48 <= v49)
            goto LABEL_24;
          break;
        }
      }
LABEL_29:
      if (v42 > 0x40)
      {
        v54 = *(_QWORD *)(v41 + 8 * ((v42 - 1) >> 6)) & (1 << (v42 - 1));
        v55 = v134 - 1;
        v56 = &v133;
        if (v134 >= 0x41)
          v56 = (uint64_t *)(v40 + 8 * (v55 >> 6));
        if ((v54 != 0) == (((unint64_t)*v56 >> v55) & 1))
        {
          v61 = v40 - 8;
          v62 = (((unint64_t)v42 + 63) >> 3) & 0x3FFFFFF8;
          v63 = v41 - 8;
          while (v62)
          {
            v64 = *(_QWORD *)(v63 + v62);
            v65 = *(_QWORD *)(v61 + v62);
            v62 -= 8;
            if (v64 != v65)
            {
              if (v64 > v65)
                goto LABEL_34;
              goto LABEL_69;
            }
          }
        }
        else if (v54)
        {
          goto LABEL_69;
        }
      }
      else if (v41 << -(char)v42 >> -(char)v42 < v40 << -(char)v42 >> -(char)v42)
      {
        goto LABEL_69;
      }
      goto LABEL_34;
    }
    if (!v45)
      goto LABEL_29;
  }
}

uint64_t sub_1C5BD4D10(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  _OWORD *v6;
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  v10 = 1;
  v11 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v12 = v11;
  v13 = v11;
  v14 = v11;
  v4 = (uint64_t)(a1 + 1);
  sub_1C629018C((unsigned int *)&v10, (unsigned int *)a1 + 2);
  v15 = a1[10];
  v16 = *(_OWORD *)(a1 + 11);
  v17 = *((_DWORD *)a1 + 26);
  v19 = *((_DWORD *)a1 + 30);
  v18 = a1[14];
  *((_DWORD *)a1 + 30) = 0;
  v20 = *((_OWORD *)a1 + 8);
  v21 = *((_DWORD *)a1 + 36);
  v23 = *((_DWORD *)a1 + 40);
  v22 = a1[19];
  *((_DWORD *)a1 + 40) = 0;
  v5 = *(_OWORD *)(a1 + 21);
  *a1 = *a2;
  v24 = v5;
  sub_1C6290124(v4, (unsigned int *)a2 + 2);
  a1[10] = a2[10];
  sub_1C5BCD700((uint64_t)(a1 + 11), (uint64_t)(a2 + 11));
  sub_1C5BCD700((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
  v6 = a2 + 21;
  *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 21);
  *a2 = v9;
  result = sub_1C6290124((uint64_t)(a2 + 1), (unsigned int *)&v10);
  a2[10] = v15;
  if (&v9 == a2)
  {
    v8 = v23;
    *v6 = v24;
    if (v8 >= 0x41)
    {
      result = v22;
      if (v22)
        result = MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
    }
  }
  else
  {
    *(_OWORD *)(a2 + 11) = v16;
    *((_DWORD *)a2 + 26) = v17;
    if (*((_DWORD *)a2 + 30) >= 0x41u)
    {
      result = a2[14];
      if (result)
        result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
    }
    a2[14] = v18;
    *((_DWORD *)a2 + 30) = v19;
    v19 = 0;
    *((_OWORD *)a2 + 8) = v20;
    *((_DWORD *)a2 + 36) = v21;
    if (*((_DWORD *)a2 + 40) >= 0x41u)
    {
      result = a2[19];
      if (result)
        result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
    }
    a2[19] = v22;
    *((_DWORD *)a2 + 40) = v23;
    v23 = 0;
    *v6 = v24;
  }
  if (v19 >= 0x41)
  {
    result = v18;
    if (v18)
      result = MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
  }
  if ((v10 & 1) == 0)
    return MEMORY[0x1CAA32FB4](v11.i64[0], 8);
  return result;
}

uint64_t sub_1C5BD4F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;

  result = sub_1C5BD3560(a1, a2, a3);
  v9 = *(_DWORD *)(a4 + 104);
  v10 = *(_DWORD *)(a3 + 104);
  if (v9 == v10)
  {
    v11 = (uint64_t *)(a4 + 112);
    v12 = (uint64_t *)(a3 + 112);
    v13 = *(unsigned int *)(a4 + 120);
    if (v13 > 0x40)
    {
      v14 = *v11;
      v45 = *(_QWORD *)(*v11 + 8 * ((v13 - 1) >> 6)) & (1 << (v13 - 1));
      v16 = *(_DWORD *)(a3 + 120);
      v46 = v16 - 1;
      v15 = *(_QWORD *)(a3 + 112);
      if (v16 >= 0x41)
        v12 = (uint64_t *)(v15 + 8 * (v46 >> 6));
      if ((v45 != 0) == (((unint64_t)*v12 >> v46) & 1))
      {
        v51 = ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8;
        while (v51)
        {
          v52 = *(_QWORD *)(v14 + v51 - 8);
          v53 = *(_QWORD *)(v15 + v51 - 8);
          v51 -= 8;
          if (v52 != v53)
          {
            if (v52 <= v53)
              goto LABEL_9;
            break;
          }
        }
      }
      else if (v45)
      {
        goto LABEL_9;
      }
    }
    else
    {
      v14 = *v11;
      v15 = *v12;
      if (*v11 << -(char)v13 >> -(char)v13 < *v12 << -(char)v13 >> -(char)v13)
        goto LABEL_9;
      v16 = *(_DWORD *)(a3 + 120);
    }
    if (v16 > 0x40)
    {
      v57 = *(_QWORD *)(v15 + 8 * ((v16 - 1) >> 6)) & (1 << (v16 - 1));
      v58 = v13 - 1;
      if (v13 >= 0x41)
        v11 = (uint64_t *)(v14 + 8 * (v58 >> 6));
      if ((v57 != 0) == (((unint64_t)*v11 >> v58) & 1))
      {
        v76 = v14 - 8;
        v77 = (((unint64_t)v16 + 63) >> 3) & 0x3FFFFFF8;
        v78 = v15 - 8;
        while (v77)
        {
          v79 = *(_QWORD *)(v78 + v77);
          v80 = *(_QWORD *)(v76 + v77);
          v77 -= 8;
          if (v79 != v80)
          {
            if (v79 <= v80)
              return result;
            break;
          }
        }
      }
      else if (v57)
      {
        return result;
      }
    }
    else if (v15 << -(char)v16 >> -(char)v16 < v14 << -(char)v16 >> -(char)v16)
    {
      return result;
    }
  }
  else
  {
    if (v9 < v10)
      goto LABEL_9;
    if (v10 < v9)
      return result;
  }
  v33 = *(_DWORD *)(a4 + 144);
  v34 = *(_DWORD *)(a3 + 144);
  if (v33 == v34)
  {
    v35 = (_QWORD *)(a3 + 152);
    v36 = *(unsigned int *)(a4 + 160);
    if (v36 > 0x40)
    {
      v64 = *(_QWORD *)(a4 + 152);
      v65 = *(_QWORD *)(v64 + 8 * ((v36 - 1) >> 6)) & (1 << (v36 - 1));
      v66 = *(_DWORD *)(a3 + 160);
      v67 = v66 - 1;
      v68 = *(_QWORD *)(a3 + 152);
      if (v66 >= 0x41)
        v35 = (_QWORD *)(v68 + 8 * (v67 >> 6));
      if ((v65 != 0) == ((*v35 >> v67) & 1))
      {
        v91 = v36 + 63;
        v92 = v68 - 8;
        v93 = (v91 >> 3) & 0x3FFFFFF8;
        v94 = v64 - 8;
        while (v93)
        {
          v95 = *(_QWORD *)(v94 + v93);
          v96 = *(_QWORD *)(v92 + v93);
          v93 -= 8;
          if (v95 != v96)
          {
            if (v95 <= v96)
              goto LABEL_9;
            return result;
          }
        }
        return result;
      }
      if (!v65)
        return result;
    }
    else if ((uint64_t)(*(_QWORD *)(a4 + 152) << -(char)v36) >> -(char)v36 >= (uint64_t)(*v35 << -(char)v36) >> -(char)v36)
    {
      return result;
    }
  }
  else if (v33 >= v34)
  {
    return result;
  }
LABEL_9:
  result = sub_1C5BD4D10((uint64_t *)a3, (uint64_t *)a4);
  v17 = *(_DWORD *)(a3 + 104);
  v18 = *(_DWORD *)(a2 + 104);
  if (v17 == v18)
  {
    v19 = (uint64_t *)(a3 + 112);
    v20 = (uint64_t *)(a2 + 112);
    v21 = *(unsigned int *)(a3 + 120);
    if (v21 > 0x40)
    {
      v22 = *v19;
      v47 = *(_QWORD *)(*v19 + 8 * ((v21 - 1) >> 6)) & (1 << (v21 - 1));
      v24 = *(_DWORD *)(a2 + 120);
      v48 = v24 - 1;
      v23 = *(_QWORD *)(a2 + 112);
      if (v24 >= 0x41)
        v20 = (uint64_t *)(v23 + 8 * (v48 >> 6));
      if ((v47 != 0) == (((unint64_t)*v20 >> v48) & 1))
      {
        v54 = ((unint64_t)(v21 + 63) >> 3) & 0x3FFFFFF8;
        while (v54)
        {
          v55 = *(_QWORD *)(v22 + v54 - 8);
          v56 = *(_QWORD *)(v23 + v54 - 8);
          v54 -= 8;
          if (v55 != v56)
          {
            if (v55 <= v56)
              goto LABEL_17;
            break;
          }
        }
      }
      else if (v47)
      {
        goto LABEL_17;
      }
    }
    else
    {
      v22 = *v19;
      v23 = *v20;
      if (*v19 << -(char)v21 >> -(char)v21 < *v20 << -(char)v21 >> -(char)v21)
        goto LABEL_17;
      v24 = *(_DWORD *)(a2 + 120);
    }
    if (v24 > 0x40)
    {
      v62 = *(_QWORD *)(v23 + 8 * ((v24 - 1) >> 6)) & (1 << (v24 - 1));
      v63 = v21 - 1;
      if (v21 >= 0x41)
        v19 = (uint64_t *)(v22 + 8 * (v63 >> 6));
      if ((v62 != 0) == (((unint64_t)*v19 >> v63) & 1))
      {
        v86 = v22 - 8;
        v87 = (((unint64_t)v24 + 63) >> 3) & 0x3FFFFFF8;
        v88 = v23 - 8;
        while (v87)
        {
          v89 = *(_QWORD *)(v88 + v87);
          v90 = *(_QWORD *)(v86 + v87);
          v87 -= 8;
          if (v89 != v90)
          {
            if (v89 <= v90)
              return result;
            break;
          }
        }
      }
      else if (v62)
      {
        return result;
      }
    }
    else if (v23 << -(char)v24 >> -(char)v24 < v22 << -(char)v24 >> -(char)v24)
    {
      return result;
    }
  }
  else
  {
    if (v17 < v18)
      goto LABEL_17;
    if (v18 < v17)
      return result;
  }
  v37 = *(_DWORD *)(a3 + 144);
  v38 = *(_DWORD *)(a2 + 144);
  if (v37 == v38)
  {
    v39 = (_QWORD *)(a2 + 152);
    v40 = *(unsigned int *)(a3 + 160);
    if (v40 > 0x40)
    {
      v71 = *(_QWORD *)(a3 + 152);
      v72 = *(_QWORD *)(v71 + 8 * ((v40 - 1) >> 6)) & (1 << (v40 - 1));
      v73 = *(_DWORD *)(a2 + 160);
      v74 = v73 - 1;
      v75 = *(_QWORD *)(a2 + 152);
      if (v73 >= 0x41)
        v39 = (_QWORD *)(v75 + 8 * (v74 >> 6));
      if ((v72 != 0) == ((*v39 >> v74) & 1))
      {
        v102 = v40 + 63;
        v103 = v75 - 8;
        v104 = (v102 >> 3) & 0x3FFFFFF8;
        v105 = v71 - 8;
        while (v104)
        {
          v106 = *(_QWORD *)(v105 + v104);
          v107 = *(_QWORD *)(v103 + v104);
          v104 -= 8;
          if (v106 != v107)
          {
            if (v106 <= v107)
              goto LABEL_17;
            return result;
          }
        }
        return result;
      }
      if (!v72)
        return result;
    }
    else if ((uint64_t)(*(_QWORD *)(a3 + 152) << -(char)v40) >> -(char)v40 >= (uint64_t)(*v39 << -(char)v40) >> -(char)v40)
    {
      return result;
    }
  }
  else if (v37 >= v38)
  {
    return result;
  }
LABEL_17:
  result = sub_1C5BD4D10((uint64_t *)a2, (uint64_t *)a3);
  v25 = *(_DWORD *)(a2 + 104);
  v26 = *(_DWORD *)(a1 + 104);
  if (v25 == v26)
  {
    v27 = (uint64_t *)(a2 + 112);
    v28 = (uint64_t *)(a1 + 112);
    v29 = *(unsigned int *)(a2 + 120);
    if (v29 > 0x40)
    {
      v30 = *v27;
      v49 = *(_QWORD *)(*v27 + 8 * ((v29 - 1) >> 6)) & (1 << (v29 - 1));
      v32 = *(_DWORD *)(a1 + 120);
      v50 = v32 - 1;
      v31 = *(_QWORD *)(a1 + 112);
      if (v32 >= 0x41)
        v28 = (uint64_t *)(v31 + 8 * (v50 >> 6));
      if ((v49 != 0) == (((unint64_t)*v28 >> v50) & 1))
      {
        v59 = ((unint64_t)(v29 + 63) >> 3) & 0x3FFFFFF8;
        while (v59)
        {
          v60 = *(_QWORD *)(v30 + v59 - 8);
          v61 = *(_QWORD *)(v31 + v59 - 8);
          v59 -= 8;
          if (v60 != v61)
          {
            if (v60 <= v61)
              return sub_1C5BD4D10((uint64_t *)a1, (uint64_t *)a2);
            break;
          }
        }
      }
      else if (v49)
      {
        return sub_1C5BD4D10((uint64_t *)a1, (uint64_t *)a2);
      }
    }
    else
    {
      v30 = *v27;
      v31 = *v28;
      if (*v27 << -(char)v29 >> -(char)v29 < *v28 << -(char)v29 >> -(char)v29)
        return sub_1C5BD4D10((uint64_t *)a1, (uint64_t *)a2);
      v32 = *(_DWORD *)(a1 + 120);
    }
    if (v32 > 0x40)
    {
      v69 = *(_QWORD *)(v31 + 8 * ((v32 - 1) >> 6)) & (1 << (v32 - 1));
      v70 = v29 - 1;
      if (v29 >= 0x41)
        v27 = (uint64_t *)(v30 + 8 * (v70 >> 6));
      if ((v69 != 0) == (((unint64_t)*v27 >> v70) & 1))
      {
        v97 = v30 - 8;
        v98 = (((unint64_t)v32 + 63) >> 3) & 0x3FFFFFF8;
        v99 = v31 - 8;
        while (v98)
        {
          v100 = *(_QWORD *)(v99 + v98);
          v101 = *(_QWORD *)(v97 + v98);
          v98 -= 8;
          if (v100 != v101)
          {
            if (v100 <= v101)
              return result;
            break;
          }
        }
      }
      else if (v69)
      {
        return result;
      }
    }
    else if (v31 << -(char)v32 >> -(char)v32 < v30 << -(char)v32 >> -(char)v32)
    {
      return result;
    }
  }
  else
  {
    if (v25 < v26)
      return sub_1C5BD4D10((uint64_t *)a1, (uint64_t *)a2);
    if (v26 < v25)
      return result;
  }
  v41 = *(_DWORD *)(a2 + 144);
  v42 = *(_DWORD *)(a1 + 144);
  if (v41 == v42)
  {
    v43 = (_QWORD *)(a1 + 152);
    v44 = *(unsigned int *)(a2 + 160);
    if (v44 <= 0x40)
    {
      if ((uint64_t)(*(_QWORD *)(a2 + 152) << -(char)v44) >> -(char)v44 >= (uint64_t)(*v43 << -(char)v44) >> -(char)v44)
        return result;
      return sub_1C5BD4D10((uint64_t *)a1, (uint64_t *)a2);
    }
    v81 = *(_QWORD *)(a2 + 152);
    v82 = *(_QWORD *)(v81 + 8 * ((v44 - 1) >> 6)) & (1 << (v44 - 1));
    v83 = *(_DWORD *)(a1 + 160);
    v84 = v83 - 1;
    v85 = *(_QWORD *)(a1 + 152);
    if (v83 >= 0x41)
      v43 = (_QWORD *)(v85 + 8 * (v84 >> 6));
    if ((v82 != 0) == ((*v43 >> v84) & 1))
    {
      v108 = v44 + 63;
      v109 = v85 - 8;
      v110 = (v108 >> 3) & 0x3FFFFFF8;
      v111 = v81 - 8;
      while (v110)
      {
        v112 = *(_QWORD *)(v111 + v110);
        v113 = *(_QWORD *)(v109 + v110);
        v110 -= 8;
        if (v112 != v113)
        {
          if (v112 <= v113)
            return sub_1C5BD4D10((uint64_t *)a1, (uint64_t *)a2);
          return result;
        }
      }
    }
    else if (v82)
    {
      return sub_1C5BD4D10((uint64_t *)a1, (uint64_t *)a2);
    }
  }
  else if (v41 < v42)
  {
    return sub_1C5BD4D10((uint64_t *)a1, (uint64_t *)a2);
  }
  return result;
}

uint64_t *sub_1C5BD5740(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t *v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  int64_t v137;
  int64_t v138;
  int64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t *v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  unsigned int v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t *v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  unsigned int v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int v210;
  uint64_t v211;
  uint64_t *v212;
  __int128 v213;
  uint64_t v214;
  __int128 v215;
  uint64_t v216;

  v7 = result;
LABEL_2:
  v212 = a2 - 3;
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * (a2 - v8);
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v110 = *(a2 - 3);
        v111 = *(a2 - 2);
        v112 = -1;
        if (v110 != v111)
        {
          v113 = *(a2 - 3);
          do
          {
            if (*(_DWORD *)(v113 + 84) < v112)
              v112 = *(_DWORD *)(v113 + 84);
            v113 += 184;
          }
          while (v113 != v111);
        }
        v114 = *v7;
        v115 = v7[1];
        v116 = -1;
        if (*v7 != v115)
        {
          v117 = *v7;
          do
          {
            if (*(_DWORD *)(v117 + 84) < v116)
              v116 = *(_DWORD *)(v117 + 84);
            v117 += 184;
          }
          while (v117 != v115);
        }
        if (v112 < v116)
        {
          *v7 = v110;
          *(a2 - 3) = v114;
          v118 = v7[1];
          v7[1] = *(a2 - 2);
          *(a2 - 2) = v118;
          v119 = v7[2];
          v7[2] = *(a2 - 1);
          *(a2 - 1) = v119;
        }
        return result;
      case 3:
        return sub_1C5BD6BFC(v7, v7 + 3, v212);
      case 4:
        return sub_1C5BD7154(v7, v7 + 3, v7 + 6, v212);
      case 5:
        return sub_1C5BD699C(v7, v7 + 3, v7 + 6, v7 + 9, v212);
      default:
        if (v9 <= 575)
        {
          if ((a4 & 1) != 0)
          {
            if (v7 != a2)
            {
              v120 = v7 + 3;
              if (v7 + 3 != a2)
              {
                v121 = v7;
                do
                {
                  v122 = v120;
                  v123 = v121[4];
                  v124 = -1;
                  if (v121[3] != v123)
                  {
                    v125 = v121[3];
                    do
                    {
                      if (*(_DWORD *)(v125 + 84) < v124)
                        v124 = *(_DWORD *)(v125 + 84);
                      v125 += 184;
                    }
                    while (v125 != v123);
                  }
                  v126 = *v121;
                  v127 = -1;
                  while (v126 != v121[1])
                  {
                    if (*(_DWORD *)(v126 + 84) < v127)
                      v127 = *(_DWORD *)(v126 + 84);
                    v126 += 184;
                  }
                  if (v124 < v127)
                  {
                    *(_QWORD *)&v215 = v121[3];
                    *((_QWORD *)&v215 + 1) = v123;
                    v216 = v121[5];
                    v121[4] = 0;
                    v121[5] = 0;
                    *v120 = 0;
                    v128 = *v121;
                    while (1)
                    {
                      v129 = v120;
                      v120 = v121;
                      v130 = v121[1];
                      *v129 = v128;
                      v129[1] = v130;
                      v129[2] = v120[2];
                      *v120 = 0;
                      v120[1] = 0;
                      v120[2] = 0;
                      v131 = *((_QWORD *)&v215 + 1);
                      if (v120 == v7)
                        break;
                      v132 = -1;
                      if ((_QWORD)v215 != *((_QWORD *)&v215 + 1))
                      {
                        v133 = v215;
                        do
                        {
                          if (*(_DWORD *)(v133 + 84) < v132)
                            v132 = *(_DWORD *)(v133 + 84);
                          v133 += 184;
                        }
                        while (v133 != *((_QWORD *)&v215 + 1));
                      }
                      v128 = *(v120 - 3);
                      v134 = *(v120 - 2);
                      v135 = -1;
                      if (v128 != v134)
                      {
                        v136 = *(v120 - 3);
                        do
                        {
                          if (*(_DWORD *)(v136 + 84) < v135)
                            v135 = *(_DWORD *)(v136 + 84);
                          v136 += 184;
                        }
                        while (v136 != v134);
                      }
                      v121 = v120 - 3;
                      if (v132 >= v135)
                        goto LABEL_275;
                    }
                    v120 = v7;
LABEL_275:
                    *v120 = v215;
                    v120[1] = v131;
                    v120[2] = v216;
                    v215 = 0uLL;
                    v216 = 0;
                    result = (uint64_t *)sub_1C5BCD3C8((void **)&v215);
                  }
                  v120 = v122 + 3;
                  v121 = v122;
                }
                while (v122 + 3 != a2);
              }
            }
          }
          else if (v7 != a2)
          {
            v196 = v7 + 3;
            while (v196 != a2)
            {
              v197 = v196;
              v198 = v7[4];
              v199 = -1;
              if (v7[3] != v198)
              {
                v200 = v7[3];
                do
                {
                  if (*(_DWORD *)(v200 + 84) < v199)
                    v199 = *(_DWORD *)(v200 + 84);
                  v200 += 184;
                }
                while (v200 != v198);
              }
              v201 = *v7;
              v202 = -1;
              while (v201 != v7[1])
              {
                if (*(_DWORD *)(v201 + 84) < v202)
                  v202 = *(_DWORD *)(v201 + 84);
                v201 += 184;
              }
              if (v199 < v202)
              {
                *(_QWORD *)&v215 = v7[3];
                *((_QWORD *)&v215 + 1) = v198;
                v216 = v7[5];
                v7[4] = 0;
                v7[5] = 0;
                *v196 = 0;
                v203 = *v7;
                do
                {
                  v204 = v196;
                  v196 = v7;
                  v205 = v7[1];
                  *v204 = v203;
                  v204[1] = v205;
                  v204[2] = v7[2];
                  *v7 = 0;
                  v7[1] = 0;
                  v7[2] = 0;
                  v206 = *((_QWORD *)&v215 + 1);
                  v207 = -1;
                  if ((_QWORD)v215 != *((_QWORD *)&v215 + 1))
                  {
                    v208 = v215;
                    do
                    {
                      if (*(_DWORD *)(v208 + 84) < v207)
                        v207 = *(_DWORD *)(v208 + 84);
                      v208 += 184;
                    }
                    while (v208 != *((_QWORD *)&v215 + 1));
                  }
                  v203 = *(v7 - 3);
                  v209 = *(v7 - 2);
                  v210 = -1;
                  if (v203 != v209)
                  {
                    v211 = *(v7 - 3);
                    do
                    {
                      if (*(_DWORD *)(v211 + 84) < v210)
                        v210 = *(_DWORD *)(v211 + 84);
                      v211 += 184;
                    }
                    while (v211 != v209);
                  }
                  v7 -= 3;
                }
                while (v207 < v210);
                *v196 = v215;
                v196[1] = v206;
                v196[2] = v216;
                v215 = 0uLL;
                v216 = 0;
                result = (uint64_t *)sub_1C5BCD3C8((void **)&v215);
              }
              v196 = v197 + 3;
              v7 = v197;
            }
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v137 = (unint64_t)(v10 - 2) >> 1;
            v138 = v137;
            do
            {
              v139 = v138;
              if (v137 >= v138)
              {
                v140 = (2 * v138) | 1;
                v141 = &v7[3 * v140];
                if (2 * v139 + 2 < v10)
                {
                  v142 = *v141;
                  v143 = -1;
                  while (v142 != v7[3 * v140 + 1])
                  {
                    if (*(_DWORD *)(v142 + 84) < v143)
                      v143 = *(_DWORD *)(v142 + 84);
                    v142 += 184;
                  }
                  v144 = v141[3];
                  v145 = -1;
                  while (v144 != v141[4])
                  {
                    if (*(_DWORD *)(v144 + 84) < v145)
                      v145 = *(_DWORD *)(v144 + 84);
                    v144 += 184;
                  }
                  if (v143 < v145)
                  {
                    v141 += 3;
                    v140 = 2 * v139 + 2;
                  }
                }
                v146 = *v141;
                v147 = -1;
                while (v146 != v141[1])
                {
                  if (*(_DWORD *)(v146 + 84) < v147)
                    v147 = *(_DWORD *)(v146 + 84);
                  v146 += 184;
                }
                v148 = &v7[3 * v139];
                v149 = v148[1];
                v150 = -1;
                if (*v148 != v149)
                {
                  v151 = *v148;
                  do
                  {
                    if (*(_DWORD *)(v151 + 84) < v150)
                      v150 = *(_DWORD *)(v151 + 84);
                    v151 += 184;
                  }
                  while (v151 != v149);
                }
                if (v147 >= v150)
                {
                  *(_QWORD *)&v215 = *v148;
                  *((_QWORD *)&v215 + 1) = v149;
                  v216 = v7[3 * v139 + 2];
                  *v148 = 0;
                  v148[1] = 0;
                  v148[2] = 0;
                  v153 = *v141;
                  v152 = v141[1];
                  while (1)
                  {
                    v154 = v141;
                    *v148 = v153;
                    v148[1] = v152;
                    v148[2] = v141[2];
                    *v141 = 0;
                    v141[1] = 0;
                    v141[2] = 0;
                    if (v137 < v140)
                      break;
                    v155 = (2 * v140) | 1;
                    v141 = &v7[3 * v155];
                    v140 = 2 * v140 + 2;
                    if (v140 >= v10)
                    {
                      v140 = v155;
                    }
                    else
                    {
                      v156 = *v141;
                      v157 = -1;
                      while (v156 != v7[3 * v155 + 1])
                      {
                        if (*(_DWORD *)(v156 + 84) < v157)
                          v157 = *(_DWORD *)(v156 + 84);
                        v156 += 184;
                      }
                      v158 = v141[3];
                      v159 = -1;
                      while (v158 != v141[4])
                      {
                        if (*(_DWORD *)(v158 + 84) < v159)
                          v159 = *(_DWORD *)(v158 + 84);
                        v158 += 184;
                      }
                      if (v157 >= v159)
                        v140 = v155;
                      else
                        v141 += 3;
                    }
                    v153 = *v141;
                    v152 = v141[1];
                    v160 = -1;
                    if (*v141 != v152)
                    {
                      v161 = *v141;
                      do
                      {
                        if (*(_DWORD *)(v161 + 84) < v160)
                          v160 = *(_DWORD *)(v161 + 84);
                        v161 += 184;
                      }
                      while (v161 != v152);
                    }
                    v162 = *((_QWORD *)&v215 + 1);
                    v163 = v215;
                    v164 = -1;
                    if ((_QWORD)v215 != *((_QWORD *)&v215 + 1))
                    {
                      v165 = v215;
                      do
                      {
                        if (*(_DWORD *)(v165 + 84) < v164)
                          v164 = *(_DWORD *)(v165 + 84);
                        v165 += 184;
                      }
                      while (v165 != *((_QWORD *)&v215 + 1));
                    }
                    v148 = v154;
                    if (v160 < v164)
                      goto LABEL_335;
                  }
                  v162 = *((_QWORD *)&v215 + 1);
                  v163 = v215;
LABEL_335:
                  *v154 = v163;
                  v154[1] = v162;
                  v154[2] = v216;
                  v215 = 0uLL;
                  v216 = 0;
                  sub_1C5BCD3C8((void **)&v215);
                }
              }
              v138 = v139 - 1;
            }
            while (v139);
            do
            {
              v166 = 0;
              v167 = a2;
              v213 = 0uLL;
              v214 = 0;
              v213 = *(_OWORD *)v7;
              v214 = v7[2];
              *v7 = 0;
              v7[1] = 0;
              v7[2] = 0;
              v168 = v7;
              do
              {
                v169 = v166 + 1;
                v170 = (char *)&v168[3 * v166 + 3];
                v171 = (2 * v166) | 1;
                v172 = 2 * v166 + 2;
                if (v172 < v10)
                {
                  v173 = *(_QWORD *)v170;
                  v174 = v168[3 * v169 + 1];
                  v175 = -1;
                  while (v173 != v174)
                  {
                    if (*(_DWORD *)(v173 + 84) < v175)
                      v175 = *(_DWORD *)(v173 + 84);
                    v173 += 184;
                  }
                  v176 = *((_QWORD *)v170 + 3);
                  v177 = -1;
                  while (v176 != *((_QWORD *)v170 + 4))
                  {
                    if (*(_DWORD *)(v176 + 84) < v177)
                      v177 = *(_DWORD *)(v176 + 84);
                    v176 += 184;
                  }
                  if (v175 < v177)
                  {
                    v170 += 24;
                    v171 = v172;
                  }
                }
                *(_OWORD *)v168 = *(_OWORD *)v170;
                v168[2] = *((_QWORD *)v170 + 2);
                *(_QWORD *)v170 = 0;
                *((_QWORD *)v170 + 1) = 0;
                *((_QWORD *)v170 + 2) = 0;
                v168 = (uint64_t *)v170;
                v166 = v171;
              }
              while (v171 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              a2 -= 3;
              if (v170 == (char *)(v167 - 3))
              {
                *(_OWORD *)v170 = v213;
                *((_QWORD *)v170 + 2) = v214;
                v213 = 0uLL;
                v214 = 0;
              }
              else
              {
                *(_OWORD *)v170 = *(_OWORD *)(v167 - 3);
                *((_QWORD *)v170 + 2) = *(v167 - 1);
                *a2 = 0;
                *(v167 - 2) = 0;
                *(v167 - 1) = 0;
                *(_OWORD *)(v167 - 3) = v213;
                *(v167 - 1) = v214;
                v213 = 0uLL;
                v214 = 0;
                v178 = v170 - (char *)v7 + 24;
                if (v178 >= 25)
                {
                  v179 = (v178 / 0x18uLL - 2) >> 1;
                  v180 = &v7[3 * v179];
                  v181 = *v180;
                  v182 = -1;
                  while (v181 != v180[1])
                  {
                    if (*(_DWORD *)(v181 + 84) < v182)
                      v182 = *(_DWORD *)(v181 + 84);
                    v181 += 184;
                  }
                  v183 = *(_QWORD *)v170;
                  v184 = -1;
                  while (v183 != *((_QWORD *)v170 + 1))
                  {
                    if (*(_DWORD *)(v183 + 84) < v184)
                      v184 = *(_DWORD *)(v183 + 84);
                    v183 += 184;
                  }
                  if (v182 < v184)
                  {
                    v215 = 0uLL;
                    v216 = 0;
                    v215 = *(_OWORD *)v170;
                    v216 = *((_QWORD *)v170 + 2);
                    *(_QWORD *)v170 = 0;
                    *((_QWORD *)v170 + 1) = 0;
                    *((_QWORD *)v170 + 2) = 0;
                    v185 = *v180;
                    while (1)
                    {
                      v186 = v180;
                      v187 = v180[1];
                      *(_QWORD *)v170 = v185;
                      *((_QWORD *)v170 + 1) = v187;
                      *((_QWORD *)v170 + 2) = v186[2];
                      *v186 = 0;
                      v186[1] = 0;
                      v186[2] = 0;
                      if (!v179)
                        break;
                      v179 = (v179 - 1) >> 1;
                      v180 = &v7[3 * v179];
                      v185 = *v180;
                      v188 = v180[1];
                      v189 = -1;
                      if (*v180 != v188)
                      {
                        v190 = *v180;
                        do
                        {
                          if (*(_DWORD *)(v190 + 84) < v189)
                            v189 = *(_DWORD *)(v190 + 84);
                          v190 += 184;
                        }
                        while (v190 != v188);
                      }
                      v191 = *((_QWORD *)&v215 + 1);
                      v192 = v215;
                      v193 = -1;
                      if ((_QWORD)v215 != *((_QWORD *)&v215 + 1))
                      {
                        v194 = v215;
                        do
                        {
                          if (*(_DWORD *)(v194 + 84) < v193)
                            v193 = *(_DWORD *)(v194 + 84);
                          v194 += 184;
                        }
                        while (v194 != *((_QWORD *)&v215 + 1));
                      }
                      v170 = (char *)v186;
                      if (v189 >= v193)
                        goto LABEL_381;
                    }
                    v191 = *((_QWORD *)&v215 + 1);
                    v192 = v215;
LABEL_381:
                    *v186 = v192;
                    v186[1] = v191;
                    v186[2] = v216;
                    v215 = 0uLL;
                    v216 = 0;
                    sub_1C5BCD3C8((void **)&v215);
                  }
                }
              }
              result = (uint64_t *)sub_1C5BCD3C8((void **)&v213);
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v7[3 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0xC01)
        {
          sub_1C5BD6BFC(v12, v7, v212);
        }
        else
        {
          sub_1C5BD6BFC(v7, v12, v212);
          v13 = 3 * v11;
          v14 = &v7[v13];
          sub_1C5BD6BFC(v7 + 3, v14 - 3, a2 - 6);
          sub_1C5BD6BFC(v7 + 6, &v7[v13 + 3], a2 - 9);
          sub_1C5BD6BFC(v14 - 3, v12, &v7[v13 + 3]);
          v15 = *(_OWORD *)v7;
          *(_OWORD *)v7 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v15;
          v16 = v7[2];
          v7[2] = v14[2];
          v14[2] = v16;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v17 = *(v7 - 3);
          v18 = -1;
          while (v17 != *(v7 - 2))
          {
            if (*(_DWORD *)(v17 + 84) < v18)
              v18 = *(_DWORD *)(v17 + 84);
            v17 += 184;
          }
          v19 = *v7;
          v20 = -1;
          while (v19 != v7[1])
          {
            if (*(_DWORD *)(v19 + 84) < v20)
              v20 = *(_DWORD *)(v19 + 84);
            v19 += 184;
          }
          if (v18 >= v20)
          {
            v215 = 0uLL;
            v216 = 0;
            v215 = *(_OWORD *)v7;
            v216 = v7[2];
            *v7 = 0;
            v7[1] = 0;
            v7[2] = 0;
            v67 = *((_QWORD *)&v215 + 1);
            v66 = v215;
            v68 = -1;
            if ((_QWORD)v215 != *((_QWORD *)&v215 + 1))
            {
              v69 = v215;
              do
              {
                if (*(_DWORD *)(v69 + 84) < v68)
                  v68 = *(_DWORD *)(v69 + 84);
                v69 += 184;
              }
              while (v69 != *((_QWORD *)&v215 + 1));
            }
            v70 = *(a2 - 3);
            v71 = -1;
            while (v70 != *(a2 - 2))
            {
              if (*(_DWORD *)(v70 + 84) < v71)
                v71 = *(_DWORD *)(v70 + 84);
              v70 += 184;
            }
            v72 = v7;
            if (v68 >= v71)
            {
              do
              {
                v8 = v72 + 3;
                if (v72 + 3 >= a2)
                  break;
                v77 = -1;
                if ((_QWORD)v215 != *((_QWORD *)&v215 + 1))
                {
                  v78 = v215;
                  do
                  {
                    if (*(_DWORD *)(v78 + 84) < v77)
                      v77 = *(_DWORD *)(v78 + 84);
                    v78 += 184;
                  }
                  while (v78 != *((_QWORD *)&v215 + 1));
                }
                v80 = v72[3];
                v79 = v72[4];
                v81 = -1;
                while (v80 != v79)
                {
                  if (*(_DWORD *)(v80 + 84) < v81)
                    v81 = *(_DWORD *)(v80 + 84);
                  v80 += 184;
                }
                v72 = v8;
              }
              while (v77 >= v81);
            }
            else
            {
              v8 = v7;
              do
              {
                v73 = -1;
                if ((_QWORD)v215 != *((_QWORD *)&v215 + 1))
                {
                  v74 = v215;
                  do
                  {
                    if (*(_DWORD *)(v74 + 84) < v73)
                      v73 = *(_DWORD *)(v74 + 84);
                    v74 += 184;
                  }
                  while (v74 != *((_QWORD *)&v215 + 1));
                }
                v75 = v8[3];
                v76 = -1;
                while (v75 != v8[4])
                {
                  if (*(_DWORD *)(v75 + 84) < v76)
                    v76 = *(_DWORD *)(v75 + 84);
                  v75 += 184;
                }
                v8 += 3;
              }
              while (v73 >= v76);
            }
            v82 = a2;
            if (v8 < a2)
            {
              v82 = a2;
              do
              {
                v83 = -1;
                if ((_QWORD)v215 != *((_QWORD *)&v215 + 1))
                {
                  v84 = v215;
                  do
                  {
                    if (*(_DWORD *)(v84 + 84) < v83)
                      v83 = *(_DWORD *)(v84 + 84);
                    v84 += 184;
                  }
                  while (v84 != *((_QWORD *)&v215 + 1));
                }
                v85 = *(v82 - 3);
                v86 = -1;
                while (v85 != *(v82 - 2))
                {
                  if (*(_DWORD *)(v85 + 84) < v86)
                    v86 = *(_DWORD *)(v85 + 84);
                  v85 += 184;
                }
                v82 -= 3;
              }
              while (v83 < v86);
            }
            if (v8 >= v82)
            {
              v101 = 0;
            }
            else
            {
              v87 = *v8;
              v88 = *v82;
              do
              {
                *v8 = v88;
                *v82 = v87;
                v89 = v8[1];
                v8[1] = v82[1];
                v82[1] = v89;
                v90 = v8[2];
                v8[2] = v82[2];
                v82[2] = v90;
                v67 = *((_QWORD *)&v215 + 1);
                v66 = v215;
                do
                {
                  v91 = -1;
                  if ((_QWORD)v215 != *((_QWORD *)&v215 + 1))
                  {
                    v92 = v215;
                    do
                    {
                      if (*(_DWORD *)(v92 + 84) < v91)
                        v91 = *(_DWORD *)(v92 + 84);
                      v92 += 184;
                    }
                    while (v92 != *((_QWORD *)&v215 + 1));
                  }
                  v87 = v8[3];
                  v93 = v8[4];
                  v94 = -1;
                  if (v87 != v93)
                  {
                    v95 = v8[3];
                    do
                    {
                      if (*(_DWORD *)(v95 + 84) < v94)
                        v94 = *(_DWORD *)(v95 + 84);
                      v95 += 184;
                    }
                    while (v95 != v93);
                  }
                  v8 += 3;
                }
                while (v91 >= v94);
                do
                {
                  v96 = -1;
                  if ((_QWORD)v215 != *((_QWORD *)&v215 + 1))
                  {
                    v97 = v215;
                    do
                    {
                      if (*(_DWORD *)(v97 + 84) < v96)
                        v96 = *(_DWORD *)(v97 + 84);
                      v97 += 184;
                    }
                    while (v97 != *((_QWORD *)&v215 + 1));
                  }
                  v88 = *(v82 - 3);
                  v98 = *(v82 - 2);
                  v99 = -1;
                  if (v88 != v98)
                  {
                    v100 = *(v82 - 3);
                    do
                    {
                      if (*(_DWORD *)(v100 + 84) < v99)
                        v99 = *(_DWORD *)(v100 + 84);
                      v100 += 184;
                    }
                    while (v100 != v98);
                  }
                  v82 -= 3;
                }
                while (v96 < v99);
              }
              while (v8 < v82);
              v101 = *v7;
            }
            if (v8 - 3 == v7)
            {
              if (!v101)
                goto LABEL_226;
              v106 = *(v8 - 2);
              v107 = (void *)v101;
              if (v106 != v101)
              {
                do
                {
                  if (*(_DWORD *)(v106 - 24) >= 0x41u)
                  {
                    v108 = *(_QWORD *)(v106 - 32);
                    if (v108)
                      MEMORY[0x1CAA32F9C](v108, 0x1000C8000313F17);
                  }
                  if (*(_DWORD *)(v106 - 64) >= 0x41u)
                  {
                    v109 = *(_QWORD *)(v106 - 72);
                    if (v109)
                      MEMORY[0x1CAA32F9C](v109, 0x1000C8000313F17);
                  }
                  if ((*(_BYTE *)(v106 - 176) & 1) == 0)
                    MEMORY[0x1CAA32FB4](*(_QWORD *)(v106 - 168), 8);
                  v106 -= 184;
                }
                while (v106 != v101);
                v107 = (void *)*v7;
              }
              *(v8 - 2) = v101;
              operator delete(v107);
            }
            else
            {
              if (v101)
              {
                v102 = v7[1];
                v103 = (void *)v101;
                if (v102 != v101)
                {
                  do
                  {
                    if (*(_DWORD *)(v102 - 24) >= 0x41u)
                    {
                      v104 = *(_QWORD *)(v102 - 32);
                      if (v104)
                        MEMORY[0x1CAA32F9C](v104, 0x1000C8000313F17);
                    }
                    if (*(_DWORD *)(v102 - 64) >= 0x41u)
                    {
                      v105 = *(_QWORD *)(v102 - 72);
                      if (v105)
                        MEMORY[0x1CAA32F9C](v105, 0x1000C8000313F17);
                    }
                    if ((*(_BYTE *)(v102 - 176) & 1) == 0)
                      MEMORY[0x1CAA32FB4](*(_QWORD *)(v102 - 168), 8);
                    v102 -= 184;
                  }
                  while (v102 != v101);
                  v103 = (void *)*v7;
                }
                v7[1] = v101;
                operator delete(v103);
                *v7 = 0;
                v7[1] = 0;
                v7[2] = 0;
              }
              *(_OWORD *)v7 = *(_OWORD *)(v8 - 3);
              v7[2] = *(v8 - 1);
            }
            *(v8 - 3) = 0;
            *(v8 - 2) = 0;
            *(v8 - 1) = 0;
            v67 = *((_QWORD *)&v215 + 1);
            v66 = v215;
LABEL_226:
            *(v8 - 3) = v66;
            *(v8 - 2) = v67;
            *(v8 - 1) = v216;
            v215 = 0uLL;
            v216 = 0;
            result = (uint64_t *)sub_1C5BCD3C8((void **)&v215);
            a4 = 0;
            continue;
          }
        }
        v215 = 0uLL;
        v216 = 0;
        v215 = *(_OWORD *)v7;
        v216 = v7[2];
        *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        v22 = *((_QWORD *)&v215 + 1);
        v21 = v215;
        v23 = v7;
        do
        {
          v24 = v23;
          v25 = v23[3];
          v26 = v23[4];
          v23 += 3;
          v27 = -1;
          if (v25 != v26)
          {
            v28 = v25;
            do
            {
              if (*(_DWORD *)(v28 + 84) < v27)
                v27 = *(_DWORD *)(v28 + 84);
              v28 += 184;
            }
            while (v28 != v26);
          }
          v29 = -1;
          if ((_QWORD)v215 != *((_QWORD *)&v215 + 1))
          {
            v30 = v215;
            do
            {
              if (*(_DWORD *)(v30 + 84) < v29)
                v29 = *(_DWORD *)(v30 + 84);
              v30 += 184;
            }
            while (v30 != *((_QWORD *)&v215 + 1));
          }
        }
        while (v27 < v29);
        v31 = a2;
        if (v24 == v7)
        {
          v31 = a2;
          do
          {
            if (v23 >= v31)
              break;
            v37 = *(v31 - 3);
            v38 = *(v31 - 2);
            v31 -= 3;
            v39 = -1;
            while (v37 != v38)
            {
              if (*(_DWORD *)(v37 + 84) < v39)
                v39 = *(_DWORD *)(v37 + 84);
              v37 += 184;
            }
            v40 = -1;
            if ((_QWORD)v215 != *((_QWORD *)&v215 + 1))
            {
              v41 = v215;
              do
              {
                if (*(_DWORD *)(v41 + 84) < v40)
                  v40 = *(_DWORD *)(v41 + 84);
                v41 += 184;
              }
              while (v41 != *((_QWORD *)&v215 + 1));
            }
          }
          while (v39 >= v40);
        }
        else
        {
          do
          {
            v32 = *(v31 - 3);
            v33 = *(v31 - 2);
            v31 -= 3;
            v34 = -1;
            while (v32 != v33)
            {
              if (*(_DWORD *)(v32 + 84) < v34)
                v34 = *(_DWORD *)(v32 + 84);
              v32 += 184;
            }
            v35 = -1;
            if ((_QWORD)v215 != *((_QWORD *)&v215 + 1))
            {
              v36 = v215;
              do
              {
                if (*(_DWORD *)(v36 + 84) < v35)
                  v35 = *(_DWORD *)(v36 + 84);
                v36 += 184;
              }
              while (v36 != *((_QWORD *)&v215 + 1));
            }
          }
          while (v34 >= v35);
        }
        if (v23 >= v31)
        {
          v56 = 0;
          v8 = v23;
        }
        else
        {
          v42 = *v31;
          v8 = v23;
          v43 = v31;
          do
          {
            *v8 = v42;
            *v43 = v25;
            v44 = v8[1];
            v8[1] = v43[1];
            v43[1] = v44;
            v45 = v8[2];
            v8[2] = v43[2];
            v43[2] = v45;
            v22 = *((_QWORD *)&v215 + 1);
            v21 = v215;
            do
            {
              v25 = v8[3];
              v46 = v8[4];
              v8 += 3;
              v47 = -1;
              if (v25 != v46)
              {
                v48 = v25;
                do
                {
                  if (*(_DWORD *)(v48 + 84) < v47)
                    v47 = *(_DWORD *)(v48 + 84);
                  v48 += 184;
                }
                while (v48 != v46);
              }
              v49 = -1;
              if ((_QWORD)v215 != *((_QWORD *)&v215 + 1))
              {
                v50 = v215;
                do
                {
                  if (*(_DWORD *)(v50 + 84) < v49)
                    v49 = *(_DWORD *)(v50 + 84);
                  v50 += 184;
                }
                while (v50 != *((_QWORD *)&v215 + 1));
              }
            }
            while (v47 < v49);
            do
            {
              v42 = *(v43 - 3);
              v51 = *(v43 - 2);
              v43 -= 3;
              v52 = -1;
              if (v42 != v51)
              {
                v53 = v42;
                do
                {
                  if (*(_DWORD *)(v53 + 84) < v52)
                    v52 = *(_DWORD *)(v53 + 84);
                  v53 += 184;
                }
                while (v53 != v51);
              }
              v54 = -1;
              if ((_QWORD)v215 != *((_QWORD *)&v215 + 1))
              {
                v55 = v215;
                do
                {
                  if (*(_DWORD *)(v55 + 84) < v54)
                    v54 = *(_DWORD *)(v55 + 84);
                  v55 += 184;
                }
                while (v55 != *((_QWORD *)&v215 + 1));
              }
            }
            while (v52 >= v54);
          }
          while (v8 < v43);
          v56 = *v7;
        }
        if (v8 - 3 != v7)
        {
          if (v56)
          {
            v57 = v7[1];
            v58 = (void *)v56;
            if (v57 != v56)
            {
              do
              {
                if (*(_DWORD *)(v57 - 24) >= 0x41u)
                {
                  v59 = *(_QWORD *)(v57 - 32);
                  if (v59)
                    MEMORY[0x1CAA32F9C](v59, 0x1000C8000313F17);
                }
                if (*(_DWORD *)(v57 - 64) >= 0x41u)
                {
                  v60 = *(_QWORD *)(v57 - 72);
                  if (v60)
                    MEMORY[0x1CAA32F9C](v60, 0x1000C8000313F17);
                }
                if ((*(_BYTE *)(v57 - 176) & 1) == 0)
                  MEMORY[0x1CAA32FB4](*(_QWORD *)(v57 - 168), 8);
                v57 -= 184;
              }
              while (v57 != v56);
              v58 = (void *)*v7;
            }
            v7[1] = v56;
            operator delete(v58);
            *v7 = 0;
            v7[1] = 0;
            v7[2] = 0;
          }
          *(_OWORD *)v7 = *(_OWORD *)(v8 - 3);
          v7[2] = *(v8 - 1);
          goto LABEL_115;
        }
        if (v56)
        {
          v61 = *(v8 - 2);
          v62 = (void *)v56;
          if (v61 != v56)
          {
            do
            {
              if (*(_DWORD *)(v61 - 24) >= 0x41u)
              {
                v63 = *(_QWORD *)(v61 - 32);
                if (v63)
                  MEMORY[0x1CAA32F9C](v63, 0x1000C8000313F17);
              }
              if (*(_DWORD *)(v61 - 64) >= 0x41u)
              {
                v64 = *(_QWORD *)(v61 - 72);
                if (v64)
                  MEMORY[0x1CAA32F9C](v64, 0x1000C8000313F17);
              }
              if ((*(_BYTE *)(v61 - 176) & 1) == 0)
                MEMORY[0x1CAA32FB4](*(_QWORD *)(v61 - 168), 8);
              v61 -= 184;
            }
            while (v61 != v56);
            v62 = (void *)*v7;
          }
          *(v8 - 2) = v56;
          operator delete(v62);
LABEL_115:
          *(v8 - 3) = 0;
          *(v8 - 2) = 0;
          *(v8 - 1) = 0;
          v22 = *((_QWORD *)&v215 + 1);
          v21 = v215;
        }
        *(v8 - 3) = v21;
        *(v8 - 2) = v22;
        *(v8 - 1) = v216;
        v215 = 0uLL;
        v216 = 0;
        sub_1C5BCD3C8((void **)&v215);
        if (v23 < v31)
        {
LABEL_119:
          result = (uint64_t *)sub_1C5BD5740(v7, v8 - 3, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v65 = sub_1C5BD6E94(v7, v8 - 3);
        result = (uint64_t *)sub_1C5BD6E94(v8, a2);
        if (!(_DWORD)result)
        {
          if (v65)
            continue;
          goto LABEL_119;
        }
        a2 = v8 - 3;
        if (!v65)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C5BD699C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  result = sub_1C5BD7154(a1, a2, a3, a4);
  v11 = a5[1];
  v12 = -1;
  if (*a5 != v11)
  {
    v13 = *a5;
    do
    {
      if (*(_DWORD *)(v13 + 84) < v12)
        v12 = *(_DWORD *)(v13 + 84);
      v13 += 184;
    }
    while (v13 != v11);
  }
  v14 = *a4;
  v15 = a4[1];
  v16 = -1;
  if (*a4 != v15)
  {
    v17 = *a4;
    do
    {
      if (*(_DWORD *)(v17 + 84) < v16)
        v16 = *(_DWORD *)(v17 + 84);
      v17 += 184;
    }
    while (v17 != v15);
  }
  if (v12 < v16)
  {
    *a4 = *a5;
    *a5 = v14;
    v18 = a4[1];
    a4[1] = a5[1];
    a5[1] = v18;
    v19 = a4[2];
    a4[2] = a5[2];
    a5[2] = v19;
    v20 = a4[1];
    v21 = -1;
    if (*a4 != v20)
    {
      v22 = *a4;
      do
      {
        if (*(_DWORD *)(v22 + 84) < v21)
          v21 = *(_DWORD *)(v22 + 84);
        v22 += 184;
      }
      while (v22 != v20);
    }
    v23 = *a3;
    v24 = a3[1];
    v25 = -1;
    if (*a3 != v24)
    {
      v26 = *a3;
      do
      {
        if (*(_DWORD *)(v26 + 84) < v25)
          v25 = *(_DWORD *)(v26 + 84);
        v26 += 184;
      }
      while (v26 != v24);
    }
    if (v21 < v25)
    {
      *a3 = *a4;
      *a4 = v23;
      v27 = a3[1];
      a3[1] = a4[1];
      a4[1] = v27;
      v28 = a3[2];
      a3[2] = a4[2];
      a4[2] = v28;
      v29 = a3[1];
      v30 = -1;
      if (*a3 != v29)
      {
        v31 = *a3;
        do
        {
          if (*(_DWORD *)(v31 + 84) < v30)
            v30 = *(_DWORD *)(v31 + 84);
          v31 += 184;
        }
        while (v31 != v29);
      }
      v32 = *a2;
      v33 = a2[1];
      v34 = -1;
      if (*a2 != v33)
      {
        v35 = *a2;
        do
        {
          if (*(_DWORD *)(v35 + 84) < v34)
            v34 = *(_DWORD *)(v35 + 84);
          v35 += 184;
        }
        while (v35 != v33);
      }
      if (v30 < v34)
      {
        *a2 = *a3;
        *a3 = v32;
        v36 = a2[1];
        a2[1] = a3[1];
        a3[1] = v36;
        v37 = a2[2];
        a2[2] = a3[2];
        a3[2] = v37;
        v38 = a2[1];
        v39 = -1;
        if (*a2 != v38)
        {
          v40 = *a2;
          do
          {
            if (*(_DWORD *)(v40 + 84) < v39)
              v39 = *(_DWORD *)(v40 + 84);
            v40 += 184;
          }
          while (v40 != v38);
        }
        v41 = *a1;
        v42 = a1[1];
        v43 = -1;
        if (*a1 != v42)
        {
          v44 = *a1;
          do
          {
            if (*(_DWORD *)(v44 + 84) < v43)
              v43 = *(_DWORD *)(v44 + 84);
            v44 += 184;
          }
          while (v44 != v42);
        }
        if (v39 < v43)
        {
          *a1 = *a2;
          *a2 = v41;
          v45 = a1[1];
          a1[1] = a2[1];
          a2[1] = v45;
          v46 = a1[2];
          a1[2] = a2[2];
          a2[2] = v46;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1C5BD6BFC(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;

  v3 = *a2;
  v4 = a2[1];
  v5 = -1;
  if (*a2 != v4)
  {
    v6 = *a2;
    do
    {
      if (*(_DWORD *)(v6 + 84) < v5)
        v5 = *(_DWORD *)(v6 + 84);
      v6 += 184;
    }
    while (v6 != v4);
  }
  v8 = *result;
  v7 = result[1];
  v9 = -1;
  if (*result != v7)
  {
    v10 = *result;
    do
    {
      if (*(_DWORD *)(v10 + 84) < v9)
        v9 = *(_DWORD *)(v10 + 84);
      v10 += 184;
    }
    while (v10 != v7);
  }
  v11 = *a3;
  v12 = a3[1];
  if (v5 >= v9)
  {
    v19 = -1;
    if (v11 != v12)
    {
      v20 = *a3;
      do
      {
        if (*(_DWORD *)(v20 + 84) < v19)
          v19 = *(_DWORD *)(v20 + 84);
        v20 += 184;
      }
      while (v20 != v12);
    }
    v21 = -1;
    if (v3 != v4)
    {
      v22 = *a2;
      do
      {
        if (*(_DWORD *)(v22 + 84) < v21)
          v21 = *(_DWORD *)(v22 + 84);
        v22 += 184;
      }
      while (v22 != v4);
    }
    if (v19 < v21)
    {
      *a2 = v11;
      *a3 = v3;
      v23 = a2[1];
      a2[1] = a3[1];
      a3[1] = v23;
      v25 = a2 + 2;
      v24 = a2[2];
      a2[2] = a3[2];
      a3[2] = v24;
      v26 = a2[1];
      v27 = -1;
      if (*a2 != v26)
      {
        v28 = *a2;
        do
        {
          if (*(_DWORD *)(v28 + 84) < v27)
            v27 = *(_DWORD *)(v28 + 84);
          v28 += 184;
        }
        while (v28 != v26);
      }
      v29 = *result;
      v30 = result[1];
      v31 = -1;
      if (*result != v30)
      {
        v32 = *result;
        do
        {
          if (*(_DWORD *)(v32 + 84) < v31)
            v31 = *(_DWORD *)(v32 + 84);
          v32 += 184;
        }
        while (v32 != v30);
      }
      if (v27 < v31)
      {
        *result = *a2;
        *a2 = v29;
        v33 = result[1];
        result[1] = a2[1];
        a2[1] = v33;
        v17 = result + 2;
LABEL_60:
        v43 = *v17;
        *v17 = *v25;
        *v25 = v43;
      }
    }
  }
  else
  {
    v13 = -1;
    if (v11 != v12)
    {
      v14 = *a3;
      do
      {
        if (*(_DWORD *)(v14 + 84) < v13)
          v13 = *(_DWORD *)(v14 + 84);
        v14 += 184;
      }
      while (v14 != v12);
    }
    v15 = -1;
    if (v3 != v4)
    {
      v16 = *a2;
      do
      {
        if (*(_DWORD *)(v16 + 84) < v15)
          v15 = *(_DWORD *)(v16 + 84);
        v16 += 184;
      }
      while (v16 != v4);
    }
    if (v13 < v15)
    {
      v17 = result + 2;
      *result = v11;
      *a3 = v8;
      v18 = result[1];
      result[1] = a3[1];
LABEL_59:
      a3[1] = v18;
      v25 = a3 + 2;
      goto LABEL_60;
    }
    *result = v3;
    *a2 = v8;
    v34 = result[1];
    result[1] = a2[1];
    a2[1] = v34;
    v17 = a2 + 2;
    v35 = result[2];
    result[2] = a2[2];
    a2[2] = v35;
    v36 = a3[1];
    v37 = -1;
    if (*a3 != v36)
    {
      v38 = *a3;
      do
      {
        if (*(_DWORD *)(v38 + 84) < v37)
          v37 = *(_DWORD *)(v38 + 84);
        v38 += 184;
      }
      while (v38 != v36);
    }
    v39 = *a2;
    v40 = a2[1];
    v41 = -1;
    if (*a2 != v40)
    {
      v42 = *a2;
      do
      {
        if (*(_DWORD *)(v42 + 84) < v41)
          v41 = *(_DWORD *)(v42 + 84);
        v42 += 184;
      }
      while (v42 != v40);
    }
    if (v37 < v41)
    {
      *a2 = *a3;
      *a3 = v39;
      v18 = a2[1];
      a2[1] = a3[1];
      goto LABEL_59;
    }
  }
  return result;
}

BOOL sub_1C5BD6E94(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  int v18;
  _DWORD *v19;
  unsigned int v20;
  _DWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  _DWORD *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(a2 - 3);
      v7 = *(a2 - 2);
      v8 = -1;
      if (v6 != v7)
      {
        v9 = *(a2 - 3);
        do
        {
          if (*(_DWORD *)(v9 + 84) < v8)
            v8 = *(_DWORD *)(v9 + 84);
          v9 += 184;
        }
        while (v9 != v7);
      }
      v10 = *a1;
      v11 = a1[1];
      v12 = -1;
      if (*a1 != v11)
      {
        v13 = *a1;
        do
        {
          if (*(_DWORD *)(v13 + 84) < v12)
            v12 = *(_DWORD *)(v13 + 84);
          v13 += 184;
        }
        while (v13 != v11);
      }
      if (v8 < v12)
      {
        *a1 = v6;
        *(a2 - 3) = v10;
        v14 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v14;
        v15 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v15;
      }
      return 1;
    case 3uLL:
      sub_1C5BD6BFC(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      sub_1C5BD7154(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_1C5BD699C(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v16 = a1 + 6;
      sub_1C5BD6BFC(a1, a1 + 3, a1 + 6);
      v17 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v18 = 0;
      break;
  }
  while (1)
  {
    v19 = (_DWORD *)v17[1];
    v20 = -1;
    if ((_DWORD *)*v17 != v19)
    {
      v21 = (_DWORD *)*v17;
      do
      {
        if (v21[21] < v20)
          v20 = v21[21];
        v21 += 46;
      }
      while (v21 != v19);
    }
    v22 = *v16;
    v23 = -1;
    while (v22 != v16[1])
    {
      if (*(_DWORD *)(v22 + 84) < v23)
        v23 = *(_DWORD *)(v22 + 84);
      v22 += 184;
    }
    if (v20 < v23)
    {
      v33 = (_DWORD *)*v17;
      v34 = v19;
      v35 = v17[2];
      *v17 = 0;
      v17[1] = 0;
      v17[2] = 0;
      v24 = *v16;
      v25 = v17;
      while (1)
      {
        v26 = v16[1];
        *v25 = v24;
        v25[1] = v26;
        v25[2] = v16[2];
        *v16 = 0;
        v16[1] = 0;
        v16[2] = 0;
        v27 = (uint64_t)v34;
        if (v16 == a1)
          break;
        v25 = v16;
        v28 = -1;
        if (v33 != v34)
        {
          v29 = v33;
          do
          {
            if (v29[21] < v28)
              v28 = v29[21];
            v29 += 46;
          }
          while (v29 != v34);
        }
        v24 = *(v16 - 3);
        v30 = *(v16 - 2);
        v31 = -1;
        if (v24 != v30)
        {
          v32 = *(v16 - 3);
          do
          {
            if (*(_DWORD *)(v32 + 84) < v31)
              v31 = *(_DWORD *)(v32 + 84);
            v32 += 184;
          }
          while (v32 != v30);
        }
        v16 -= 3;
        if (v28 >= v31)
          goto LABEL_42;
      }
      v25 = a1;
LABEL_42:
      *v25 = (uint64_t)v33;
      v25[1] = v27;
      v25[2] = v35;
      v33 = 0;
      v34 = 0;
      v35 = 0;
      ++v18;
      sub_1C5BCD3C8((void **)&v33);
      if (v18 == 8)
        return v17 + 3 == a2;
    }
    v16 = v17;
    v17 += 3;
    if (v17 == a2)
      return 1;
  }
}

uint64_t *sub_1C5BD7154(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  result = sub_1C5BD6BFC(a1, a2, a3);
  v9 = a4[1];
  v10 = -1;
  if (*a4 != v9)
  {
    v11 = *a4;
    do
    {
      if (*(_DWORD *)(v11 + 84) < v10)
        v10 = *(_DWORD *)(v11 + 84);
      v11 += 184;
    }
    while (v11 != v9);
  }
  v12 = *a3;
  v13 = a3[1];
  v14 = -1;
  if (*a3 != v13)
  {
    v15 = *a3;
    do
    {
      if (*(_DWORD *)(v15 + 84) < v14)
        v14 = *(_DWORD *)(v15 + 84);
      v15 += 184;
    }
    while (v15 != v13);
  }
  if (v10 < v14)
  {
    *a3 = *a4;
    *a4 = v12;
    v16 = a3[1];
    a3[1] = a4[1];
    a4[1] = v16;
    v17 = a3[2];
    a3[2] = a4[2];
    a4[2] = v17;
    v18 = a3[1];
    v19 = -1;
    if (*a3 != v18)
    {
      v20 = *a3;
      do
      {
        if (*(_DWORD *)(v20 + 84) < v19)
          v19 = *(_DWORD *)(v20 + 84);
        v20 += 184;
      }
      while (v20 != v18);
    }
    v21 = *a2;
    v22 = a2[1];
    v23 = -1;
    if (*a2 != v22)
    {
      v24 = *a2;
      do
      {
        if (*(_DWORD *)(v24 + 84) < v23)
          v23 = *(_DWORD *)(v24 + 84);
        v24 += 184;
      }
      while (v24 != v22);
    }
    if (v19 < v23)
    {
      *a2 = *a3;
      *a3 = v21;
      v25 = a2[1];
      a2[1] = a3[1];
      a3[1] = v25;
      v26 = a2[2];
      a2[2] = a3[2];
      a3[2] = v26;
      v27 = a2[1];
      v28 = -1;
      if (*a2 != v27)
      {
        v29 = *a2;
        do
        {
          if (*(_DWORD *)(v29 + 84) < v28)
            v28 = *(_DWORD *)(v29 + 84);
          v29 += 184;
        }
        while (v29 != v27);
      }
      v30 = *a1;
      v31 = a1[1];
      v32 = -1;
      if (*a1 != v31)
      {
        v33 = *a1;
        do
        {
          if (*(_DWORD *)(v33 + 84) < v32)
            v32 = *(_DWORD *)(v33 + 84);
          v33 += 184;
        }
        while (v33 != v31);
      }
      if (v28 < v32)
      {
        *a1 = *a2;
        *a2 = v30;
        v34 = a1[1];
        a1[1] = a2[1];
        a2[1] = v34;
        v35 = a1[2];
        a1[2] = a2[2];
        a2[2] = v35;
      }
    }
  }
  return result;
}

uint64_t sub_1C5BD7320(uint64_t a1, char a2)
{
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED822080;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8196B48;
  *(_BYTE *)(a1 + 28) = a2;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED822088);
  if (v4 != -1)
  {
    v8[0] = sub_1C5BD73EC;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED822088, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5BD73EC(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeAAResultsWrapperPassPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "MergedLoadStoreMotion";
  *(_QWORD *)(v3 + 8) = 21;
  *(_QWORD *)(v3 + 16) = "mldst-motion";
  *(_QWORD *)(v3 + 24) = 12;
  *(_QWORD *)(v3 + 32) = &unk_1ED822080;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5BD8300;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t llvm::MergedLoadStoreMotionPass::run@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v7;
  uint64_t ResultImpl;
  uint64_t result;
  uint64_t v10;
  int v11;
  char v12;

  v7 = *a1;
  v10 = 0;
  v11 = 250;
  v12 = v7;
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::AAManager::Key, a2);
  result = sub_1C5BD7560((uint64_t)&v10, a2, ResultImpl + 8);
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  if ((result & 1) == 0)
    return (uint64_t)sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  if (!*a1)
    return (uint64_t)sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::CFGAnalyses::SetKey);
  return result;
}

uint64_t sub_1C5BD7560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int v13;
  llvm::BasicBlock *v15;
  llvm::BasicBlock *v16;
  uint64_t SingleSuccessor;
  uint64_t v18;
  BOOL v19;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  llvm::BasicBlock *v24;
  uint64_t **v25;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  llvm::BasicBlock **v29;
  llvm::BasicBlock **v30;
  llvm::BasicBlock *v31;
  llvm::BasicBlock *v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD **v40;
  _QWORD *v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  int v45;
  __int16 v46;
  _QWORD *v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  llvm::Instruction *v72;
  uint64_t v73;
  uint64_t i;
  uint64_t v75;
  unsigned int v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  llvm::Value *v82;
  uint64_t v83;
  uint64_t v84;
  __int16 v85;
  uint64_t **v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t ***v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t ****v96;
  uint64_t ***v97;
  int v98;
  int v99;
  uint64_t ***v100;
  uint64_t **v101;
  char *v102;
  uint64_t **v103;
  uint64_t v104;
  uint64_t *v105;
  _QWORD *v106;
  _QWORD *v107;
  llvm::Value *v108;
  uint64_t *v109;
  uint64_t *v110;
  char *v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  llvm::Value *v116;
  uint64_t v117;
  uint64_t v118;
  llvm::ValueAsMetadata *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  llvm::ValueSymbolTable *v129;
  uint64_t v130;
  llvm::ValueSymbolTable *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  llvm::ValueSymbolTable *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  llvm::BasicBlock *v146;
  llvm::BasicBlock *v147;
  uint64_t **v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t *v153;
  int v154;
  int v155;
  unsigned __int8 *v156;
  _QWORD *v157;
  int v158;
  llvm::Value *v159;
  llvm::Value *v160;
  int v161;
  __int128 v163[3];
  __int128 v164[3];
  __int128 v165;
  _OWORD v166[2];
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  __int128 v173;
  uint64_t v174;
  uint64_t *v175;
  __int128 v176;
  uint64_t v177;
  uint64_t *v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;

  v182 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = a3;
  v3 = a2 + 72;
  v4 = *(_QWORD *)(a2 + 80);
  if (v4 != a2 + 72)
  {
    v5 = 0;
    v6 = &v171;
    v7 = &v174;
    v8 = &v168;
    v9 = &v177;
    while (1)
    {
      v11 = (_QWORD *)(v4 + 16);
      v10 = *(_QWORD **)(v4 + 16);
      v4 = *(_QWORD *)(v4 + 8);
      if (v10 == v11)
        goto LABEL_209;
      v12 = v10 - 3;
      if (!v10)
        v12 = 0;
      v13 = *((unsigned __int8 *)v12 + 16) - 40;
      if (v13 < 0xFFFFFFF5)
        v12 = 0;
      if (!v10)
        goto LABEL_209;
      if (*((_BYTE *)v12 + 16) != 30 || v13 < 0xFFFFFFF5)
        goto LABEL_209;
      if ((*((_DWORD *)v12 + 5) & 0x7FFFFFF) != 3)
        goto LABEL_209;
      v15 = (llvm::BasicBlock *)*(v12 - 4);
      v16 = (llvm::BasicBlock *)*(v12 - 8);
      if (!llvm::BasicBlock::getSinglePredecessor(v15) || !llvm::BasicBlock::getSinglePredecessor(v16))
        goto LABEL_209;
      SingleSuccessor = llvm::BasicBlock::getSingleSuccessor(v15);
      v18 = llvm::BasicBlock::getSingleSuccessor(v16);
      v19 = !SingleSuccessor || v18 == 0;
      if (v19 || SingleSuccessor != v18)
        goto LABEL_209;
      v21 = (_QWORD *)*v11;
      if ((_QWORD *)*v11 == v11)
      {
        v22 = 0;
      }
      else
      {
        if (v21)
          v22 = v21 - 3;
        else
          v22 = 0;
        if (*((unsigned __int8 *)v22 + 16) - 29 >= 0xB)
          v22 = 0;
      }
      v23 = *((unsigned __int8 *)v22 + 16);
      if (v23 != 30)
        __asm { BR              X10 }
      v24 = (llvm::BasicBlock *)llvm::BasicBlock::getSingleSuccessor((llvm::BasicBlock *)*(v22 - 4));
      v25 = (uint64_t **)v24;
      v26 = (_QWORD *)*v11;
      if ((_QWORD *)*v11 == v11)
      {
        v27 = 0;
      }
      else
      {
        if (v26)
          v27 = v26 - 3;
        else
          v27 = 0;
        if (*((unsigned __int8 *)v27 + 16) - 29 >= 0xB)
          v27 = 0;
      }
      v28 = *((unsigned __int8 *)v27 + 16);
      if (v28 != 30)
        __asm { BR              X10 }
      v29 = (llvm::BasicBlock **)(v27 - 4);
      v30 = (llvm::BasicBlock **)(v27 - 8);
      v31 = *v29;
      v32 = *v30;
      if (*v29 == *v30 || !*(_BYTE *)(a1 + 12) && llvm::BasicBlock::hasNPredecessorsOrMore(v24, 3))
      {
        v33 = 0;
        goto LABEL_208;
      }
      llvm::BasicBlock::instructionsWithoutDebug(v32, 1, (uint64_t)&v173);
      v170 = v173;
      if (v175)
      {
        if (v175 == v7)
        {
          v172 = (uint64_t)v6;
          (*(void (**)(uint64_t *, uint64_t *))(v174 + 24))(v7, v6);
        }
        else
        {
          v172 = (*(uint64_t (**)(void))(*v175 + 16))();
        }
      }
      else
      {
        v172 = 0;
      }
      v167 = v176;
      if (v178)
      {
        if (v178 == v9)
        {
          v169 = (uint64_t)v8;
          (*(void (**)(uint64_t *, uint64_t *))(v177 + 24))(v9, v8);
        }
        else
        {
          v169 = (*(uint64_t (**)(void))(*v178 + 16))();
        }
      }
      else
      {
        v169 = 0;
      }
      v158 = sub_1C534FAE4(&v170, &v167);
      v34 = (_QWORD *)v169;
      if ((uint64_t *)v169 == v8)
      {
        v34 = v8;
        v35 = 4;
      }
      else
      {
        if (!v169)
          goto LABEL_62;
        v35 = 5;
      }
      (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_62:
      v36 = (_QWORD *)v172;
      if ((uint64_t *)v172 == v6)
      {
        v36 = v6;
        v37 = 4;
      }
      else
      {
        if (!v172)
          goto LABEL_67;
        v37 = 5;
      }
      (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_67:
      v150 = v9;
      v151 = v8;
      v152 = v7;
      v153 = v6;
      v154 = v5;
      v39 = (_QWORD *)((char *)v31 + 40);
      v38 = (_QWORD *)*((_QWORD *)v31 + 5);
      if (v38 != (_QWORD *)((char *)v31 + 40))
      {
        v146 = v32;
        v147 = v31;
        v155 = 0;
        v161 = 0;
        v40 = (_QWORD **)((char *)v32 + 40);
        v148 = v25;
        v149 = (uint64_t)v25;
        v157 = (_QWORD *)((char *)v31 + 40);
        while (1)
        {
          v41 = v38;
          v19 = v38 == 0;
          v42 = v38 - 3;
          v38 = (_QWORD *)*v38;
          if (v19)
            v42 = 0;
          v43 = *((unsigned __int8 *)v42 + 16);
          if (v43 == 61)
            v44 = (uint64_t)v42;
          else
            v44 = 0;
          if (!v41 || v43 != 61)
            goto LABEL_119;
          v45 = *(unsigned __int8 *)(v44 + 16);
          if (v45 == 60 || v45 == 61)
          {
            v46 = *(_WORD *)(v44 + 18);
            if ((v46 & 0x380) != 0 || (v46 & 1) != 0)
              goto LABEL_119;
          }
          else if ((v45 - 63) < 3 || (*(_WORD *)(v44 + 18) & 1) != 0)
          {
            goto LABEL_119;
          }
          if (++v161 * v158 >= *(_DWORD *)(a1 + 8))
            goto LABEL_202;
          v47 = *v40;
          if (*v40 != v40)
          {
            v159 = *(llvm::Value **)(v44 + 40);
            while (1)
            {
              v48 = v47 - 3;
              if (!v47)
                v48 = 0;
              v49 = *((unsigned __int8 *)v48 + 16);
              v50 = v49 == 61 ? (uint64_t)v48 : 0;
              if (v47 && v49 == 61)
              {
                v51 = *(_QWORD *)(v44 - 32);
                sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 40) + 56) + 40) + 272, **(_QWORD **)(v44 - 64));
                v54 = v53 == 1 ? -2 : (unint64_t)(v52 + 7) >> 3;
                llvm::Instruction::getAAMetadata((uint64_t ***)v44, &v180);
                *(_QWORD *)&v179 = v51;
                *((_QWORD *)&v179 + 1) = v54;
                v55 = *(_QWORD *)(v50 - 32);
                sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 40) + 56) + 40) + 272, **(_QWORD **)(v50 - 64));
                v58 = v57 == 1 ? -2 : (unint64_t)(v56 + 7) >> 3;
                llvm::Instruction::getAAMetadata((uint64_t ***)v50, v166);
                *(_QWORD *)&v165 = v55;
                *((_QWORD *)&v165 + 1) = v58;
                if (llvm::AAResults::alias(*(_QWORD *)a1, (uint64_t)&v179, (uint64_t)&v165) == 3)
                {
                  if (llvm::Instruction::isSameOperationAs((llvm::Instruction *)v44, (const llvm::Instruction *)v50, 0))
                  {
                    v59 = *(_QWORD *)(v50 + 32);
                    v60 = !v59 || v59 == *(_QWORD *)(v50 + 40) + 40;
                    v61 = v60 ? 0 : v59 - 24;
                    v62 = *v40 ? (uint64_t)(*v40 - 3) : 0;
                    v164[0] = v165;
                    v164[1] = v166[0];
                    v164[2] = v166[1];
                    if ((sub_1C5BD832C((uint64_t *)a1, v61, v62, v164) & 1) == 0)
                    {
                      v63 = *(_QWORD *)(v44 + 32);
                      v64 = !v63 || v63 == *(_QWORD *)(v44 + 40) + 40;
                      v65 = v64 ? 0 : v63 - 24;
                      v66 = *((_QWORD *)v159 + 5);
                      v67 = v66 ? v66 - 24 : 0;
                      v163[0] = v179;
                      v163[1] = v180;
                      v163[2] = v181;
                      if (!sub_1C5BD832C((uint64_t *)a1, v65, v67, v163))
                        break;
                    }
                  }
                }
              }
              v47 = (_QWORD *)*v47;
              if (v47 == v40)
                goto LABEL_118;
            }
            if (*(unsigned __int8 *)(*(_QWORD *)(v44 - 32) + 16) <= 0x1Bu)
              v68 = 0;
            else
              v68 = *(_QWORD *)(v44 - 32);
            if (*(unsigned __int8 *)(*(_QWORD *)(v50 - 32) + 16) <= 0x1Bu)
              v69 = 0;
            else
              v69 = *(_QWORD *)(v50 - 32);
            if (!v68)
              goto LABEL_202;
            if (!v69)
              goto LABEL_202;
            if (!llvm::Instruction::isIdenticalToWhenDefined((llvm::Instruction *)v68, (const llvm::Instruction *)v69))goto LABEL_202;
            if ((*(unsigned __int8 *)(v69 + 17) ^ *(unsigned __int8 *)(v68 + 17)) > 1)
              goto LABEL_202;
            v70 = *(_QWORD *)(v68 + 8);
            if (!v70)
              goto LABEL_202;
            if (*(_QWORD *)(v70 + 8))
              goto LABEL_202;
            if (*(_QWORD *)(v68 + 40) != *(_QWORD *)(v44 + 40))
              goto LABEL_202;
            v71 = *(_QWORD *)(v69 + 8);
            if (!v71)
              goto LABEL_202;
            if (*(_QWORD *)(v71 + 8))
              goto LABEL_202;
            if (*(_QWORD *)(v69 + 40) != *(_QWORD *)(v50 + 40))
              goto LABEL_202;
            if (*(_BYTE *)(v68 + 16) != 62)
              goto LABEL_202;
            v39 = v157;
            if ((uint64_t **)v149 == v148)
            {
              v149 = (uint64_t)v148;
              if (llvm::BasicBlock::hasNPredecessorsOrMore((llvm::BasicBlock *)v148, 3))
              {
                *(_QWORD *)&v179 = v147;
                *((_QWORD *)&v179 + 1) = v146;
                v149 = sub_1C5EBE3AC(v148, (uint64_t *)&v179, 2, ".sink.split", 0, 0, 0, 0, 0);
                if (!v149)
                  goto LABEL_202;
              }
            }
            if (*(unsigned __int8 *)(*(_QWORD *)(v44 - 32) + 16) <= 0x1Bu)
              v72 = 0;
            else
              v72 = *(llvm::Instruction **)(v44 - 32);
            v73 = v149 + 40;
            for (i = *(_QWORD *)(v149 + 48); i != v73; i = *(_QWORD *)(i + 8))
            {
              v75 = i - 24;
              if (!i)
                v75 = 0;
              if (*(_BYTE *)(v75 + 16) != 83)
              {
                v76 = *(unsigned __int8 *)(i - 8) - 38;
                v77 = v76 > 0x38;
                v78 = (1 << v76) & 0x100060000000001;
                if (v77 || v78 == 0)
                  v73 = i;
                else
                  v73 = *(_QWORD *)(i + 8);
                break;
              }
            }
            v156 = *(unsigned __int8 **)(v50 - 32);
            v145 = v156[16];
            llvm::Instruction::andIRFlags(v44, v50);
            llvm::Instruction::dropUnknownNonDebugMetadata((_QWORD **)v44, 0, 0);
            llvm::Instruction::clone((llvm::Instruction *)v44);
            v81 = v80;
            llvm::Instruction::clone(v72);
            v160 = v82;
            if (v73)
              v83 = v73 - 24;
            else
              v83 = 0;
            v84 = *(_QWORD *)(v83 + 40);
            *(_QWORD *)(v81 + 40) = v84;
            v85 = *(_WORD *)(v84 + 18) & 0x7FFF;
            *(_WORD *)(v84 + 18) = v85;
            if ((*(_BYTE *)(v81 + 23) & 0x10) != 0)
            {
              v128 = *(_QWORD *)(v84 + 56);
              if (v128)
              {
                v129 = *(llvm::ValueSymbolTable **)(v128 + 104);
                if (v129)
                {
                  llvm::ValueSymbolTable::reinsertValue(v129, (llvm::Value *)v81);
                  v84 = *(_QWORD *)(v81 + 40);
                  v85 = *(_WORD *)(v84 + 18);
                }
              }
            }
            v87 = *(_QWORD *)(v83 + 24);
            v86 = (uint64_t **)(v83 + 24);
            v144 = v81;
            *(_QWORD *)(v81 + 24) = v87;
            *(_QWORD *)(v81 + 32) = v86;
            v88 = (uint64_t *)(v81 + 24);
            *(_QWORD *)(v87 + 8) = v88;
            *v86 = v88;
            *((_QWORD *)v160 + 5) = v84;
            *(_WORD *)(v84 + 18) = v85 & 0x7FFF;
            if ((*((_BYTE *)v160 + 23) & 0x10) != 0)
            {
              v130 = *(_QWORD *)(v84 + 56);
              if (v130)
              {
                v131 = *(llvm::ValueSymbolTable **)(v130 + 104);
                if (v131)
                  llvm::ValueSymbolTable::reinsertValue(v131, v160);
              }
            }
            v89 = *v88;
            *((_QWORD *)v160 + 3) = *v88;
            *((_QWORD *)v160 + 4) = v88;
            *(_QWORD *)(v89 + 8) = (char *)v160 + 24;
            *v88 = (uint64_t)v160 + 24;
            v90 = *(uint64_t **)(v44 - 64);
            v91 = *(uint64_t ****)(v50 - 64);
            if (v90 != (uint64_t *)v91)
            {
              v143 = *(_QWORD *)(v50 - 64);
              if ((*((_BYTE *)v91 + 23) & 0x10) != 0)
              {
                v92 = ***v91;
                v93 = *(_QWORD *)(v92 + 152);
                v94 = *(unsigned int *)(v92 + 168);
                if (!(_DWORD)v94)
                  goto LABEL_172;
                LODWORD(v95) = (v94 - 1) & ((v91 >> 4) ^ (v91 >> 9));
                v96 = (uint64_t ****)(v93 + 16 * v95);
                v97 = *v96;
                if (*v96 != v91)
                {
                  v98 = 1;
                  while (v97 != (uint64_t ***)-4096)
                  {
                    v99 = v95 + v98++;
                    v95 = v99 & (v94 - 1);
                    v97 = *(uint64_t ****)(v93 + 16 * v95);
                    if (v97 == v91)
                    {
                      v96 = (uint64_t ****)(v93 + 16 * v95);
                      goto LABEL_173;
                    }
                  }
LABEL_172:
                  v96 = (uint64_t ****)(v93 + 16 * v94);
                }
LABEL_173:
                v100 = v96[1];
                v103 = *v100;
                v102 = (char *)(v100 + 2);
                v101 = v103;
              }
              else
              {
                v101 = 0;
                v102 = &byte_1C871356D;
              }
              v142 = *(_QWORD *)(v44 - 64);
              v104 = *v90;
              LOWORD(v181) = 773;
              *(_QWORD *)&v179 = v102;
              *((_QWORD *)&v179 + 1) = v101;
              *(_QWORD *)&v180 = ".sink";
              v105 = *(uint64_t **)(v149 + 48);
              v106 = operator new(0x48uLL);
              v107 = v106;
              v106[1] = v104;
              v108 = (llvm::Value *)(v106 + 1);
              v109 = v105;
              *v106 = 0;
              v106[2] = 0;
              v110 = v106 + 2;
              v106[3] = 0x4000000000000053;
              *((_OWORD *)v106 + 2) = 0u;
              v111 = (char *)(v106 + 4);
              *((_OWORD *)v106 + 3) = 0u;
              *((_DWORD *)v106 + 16) = 0;
              if (v109)
              {
                v132 = v109[2];
                v106[6] = v132;
                *(_WORD *)(v132 + 18) &= ~0x8000u;
                if ((*((_BYTE *)v106 + 31) & 0x10) != 0)
                {
                  v134 = *(_QWORD *)(v132 + 56);
                  if (v134)
                  {
                    v135 = *(llvm::ValueSymbolTable **)(v134 + 104);
                    if (v135)
                    {
                      v141 = v107;
                      llvm::ValueSymbolTable::reinsertValue(v135, v108);
                      v107 = v141;
                    }
                  }
                }
                v133 = *v109;
                v107[4] = *v109;
                v107[5] = v109;
                *(_QWORD *)(v133 + 8) = v111;
                *v109 = (uint64_t)v111;
              }
              *((_DWORD *)v107 + 17) = 2;
              v112 = v107;
              llvm::Value::setName((uint64_t ***)v108, (uint64_t)&v179);
              v113 = *((unsigned int *)v112 + 17);
              v114 = operator new(40 * v113);
              *v112 = v114;
              if ((_DWORD)v113)
              {
                v115 = &v114[4 * v113];
                do
                {
                  *v114 = 0;
                  v114[1] = 0;
                  v114[2] = 0;
                  v114[3] = v108;
                  v114 += 4;
                }
                while (v114 != v115);
              }
              llvm::Instruction::applyMergedLocation(v108, *(const llvm::DILocation **)(v44 + 48), *(const llvm::DILocation **)(v50 + 48));
              sub_1C477667C(v108, v142, *(_QWORD *)(v44 + 40));
              v116 = v108;
              sub_1C477667C(v108, v143, *(_QWORD *)(v50 + 40));
              v39 = v157;
              if (*(_QWORD *)(v144 - 64))
              {
                **(_QWORD **)(v144 - 48) = *(_QWORD *)(v144 - 56);
                v117 = *(_QWORD *)(v144 - 56);
                if (v117)
                  *(_QWORD *)(v117 + 16) = *(_QWORD *)(v144 - 48);
              }
              *(_QWORD *)(v144 - 64) = v116;
              v118 = *v110;
              *(_QWORD *)(v144 - 56) = *v110;
              if (v118)
                *(_QWORD *)(v118 + 16) = v144 - 56;
              *(_QWORD *)(v144 - 48) = v110;
              *v110 = v144 - 64;
            }
            if (v145 <= 0x1B)
              v119 = 0;
            else
              v119 = (llvm::ValueAsMetadata *)v156;
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v44 + 40) + 40, (uint64_t ***)v44);
            v120 = *(_QWORD *)(v44 + 24);
            v121 = *(_QWORD **)(v44 + 32);
            *v121 = v120;
            *(_QWORD *)(v120 + 8) = v121;
            *(_QWORD *)(v44 + 24) = 0;
            *(_QWORD *)(v44 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v44);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v50 + 40) + 40, (uint64_t ***)v50);
            v122 = *(_QWORD *)(v50 + 24);
            v123 = *(_QWORD **)(v50 + 32);
            *v123 = v122;
            *(_QWORD *)(v122 + 8) = v123;
            *(_QWORD *)(v50 + 24) = 0;
            *(_QWORD *)(v50 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v50);
            v155 = 1;
            llvm::Value::doRAUW(v72, v160, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v72 + 5) + 40, (uint64_t ***)v72);
            v124 = *((_QWORD *)v72 + 3);
            v125 = (_QWORD *)*((_QWORD *)v72 + 4);
            *v125 = v124;
            *(_QWORD *)(v124 + 8) = v125;
            *((_QWORD *)v72 + 3) = 0;
            *((_QWORD *)v72 + 4) = 0;
            llvm::Value::deleteValue(v72);
            llvm::Value::doRAUW(v119, v160, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v119 + 5) + 40, (uint64_t ***)v119);
            v126 = *((_QWORD *)v119 + 3);
            v127 = (_QWORD *)*((_QWORD *)v119 + 4);
            *v127 = v126;
            *(_QWORD *)(v126 + 8) = v127;
            *((_QWORD *)v119 + 3) = 0;
            *((_QWORD *)v119 + 4) = 0;
            llvm::Value::deleteValue(v119);
            v38 = (_QWORD *)*v39;
            goto LABEL_119;
          }
LABEL_118:
          v39 = v157;
LABEL_119:
          if (v38 == v39)
            goto LABEL_202;
        }
      }
      v155 = 0;
LABEL_202:
      v136 = v178;
      v9 = v150;
      if (v178 == v150)
      {
        v136 = v150;
        v137 = 4;
        v5 = v154;
        v33 = v155;
        v7 = v152;
        v6 = v153;
        v8 = v151;
      }
      else
      {
        v5 = v154;
        v33 = v155;
        v7 = v152;
        v6 = v153;
        v8 = v151;
        if (!v178)
          goto LABEL_205;
        v137 = 5;
      }
      (*(void (**)(void))(*v136 + 8 * v137))();
LABEL_205:
      v138 = v175;
      if (v175 == v7)
      {
        v138 = v7;
        v139 = 4;
      }
      else
      {
        if (!v175)
          goto LABEL_208;
        v139 = 5;
      }
      (*(void (**)(void))(*v138 + 8 * v139))();
LABEL_208:
      v5 |= v33;
LABEL_209:
      if (v4 == v3)
        return v5 & 1;
    }
  }
  LOBYTE(v5) = 0;
  return v5 & 1;
}

void sub_1C5BD81FC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5BD8220(uint64_t a1, llvm::AnalysisUsage *this)
{
  if (!*(_BYTE *)(a1 + 28))
    llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::AAResultsWrapperPass::ID);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
}

uint64_t sub_1C5BD8270(uint64_t a1, const llvm::Function *a2)
{
  char v5;
  char **v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;

  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, a2) & 1) != 0)
    return 0;
  v5 = *(_BYTE *)(a1 + 28);
  v9 = 0;
  v10 = 250;
  v11 = v5;
  v6 = **(char ****)(a1 + 8);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != llvm::AAResultsWrapperPass::ID);
  v8 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), llvm::AAResultsWrapperPass::ID);
  return sub_1C5BD7560((uint64_t)&v9, (uint64_t)a2, *(_QWORD *)(v8 + 32));
}

uint64_t sub_1C5BD8300()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5BD7320(v0, 0);
}

uint64_t sub_1C5BD832C(uint64_t *a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v8;
  uint64_t v9;
  llvm::Instruction *v10;

  if (a2 == a3)
    return llvm::AAResults::canInstructionRangeModRef(*a1, a2, a3, a4, 7);
  v8 = a3 + 24;
  v9 = a2 + 24;
  while (1)
  {
    v10 = v9 ? (llvm::Instruction *)(v9 - 24) : 0;
    if ((llvm::Instruction::mayThrow(v10) & 1) != 0)
      break;
    v9 = *(_QWORD *)(v9 + 8);
    if (v9 == v8)
      return llvm::AAResults::canInstructionRangeModRef(*a1, a2, a3, a4, 7);
  }
  return 1;
}

uint64_t sub_1C5BD83C0(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v2);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Nary reassociation";
  *(_QWORD *)(v3 + 8) = 18;
  *(_QWORD *)(v3 + 16) = "nary-reassociate";
  *(_QWORD *)(v3 + 24) = 16;
  *(_QWORD *)(v3 + 32) = &unk_1ED822090;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5BD9578;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5BD8474(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED822090;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8196BE8;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED822098);
  if (v3 != -1)
  {
    v7[0] = sub_1C5BD83C0;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED822098, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *llvm::NaryReassociatePass::run@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ResultImpl;
  llvm::Function *v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;

  v8 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::AssumptionAnalysis::Key, a2) + 8;
  v9 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::DominatorTreeAnalysis::Key, a2) + 8;
  v10 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::ScalarEvolutionAnalysis::Key, a2) + 8;
  v11 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::TargetLibraryAnalysis::Key, a2) + 8;
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::TargetIRAnalysis::Key, a2);
  v14 = 0;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = ResultImpl + 8;
  v15 = *(_QWORD *)(a2 + 40) + 272;
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 8) = v15;
  do
  {
    v16 = v14;
    v17 = llvm::NaryReassociatePass::doOneIteration((char **)a1, v13);
    v14 = 1;
  }
  while ((v17 & 1) != 0);
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  if ((v16 & 1) == 0)
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::CFGAnalyses::SetKey);
  return sub_1C4DDB144(a4, (uint64_t)&llvm::ScalarEvolutionAnalysis::Key);
}

uint64_t llvm::NaryReassociatePass::runImpl(uint64_t a1, llvm::Function *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v8;
  uint64_t v9;
  char v10;
  char v11;

  v8 = 0;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  *(_QWORD *)(a1 + 40) = a7;
  v9 = *((_QWORD *)a2 + 5) + 272;
  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = v9;
  do
  {
    v10 = v8;
    v11 = llvm::NaryReassociatePass::doOneIteration((char **)a1, a2);
    v8 = 1;
  }
  while ((v11 & 1) != 0);
  return v10 & 1;
}

uint64_t llvm::NaryReassociatePass::doOneIteration(char **this, llvm::Function *a2)
{
  char *v3;
  _BYTE *v4;
  const void *v5;
  void *v6;
  unsigned int v7;
  unsigned int v8;
  _BYTE *v9;
  const void *v10;
  void *v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  llvm::Instruction *v23;
  unsigned __int8 *v24;
  unsigned int *v25;
  _QWORD *v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  int32x2_t ****v35;
  int32x2_t *v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int32x2_t *****v41;
  int32x2_t ****v42;
  int v43;
  int v44;
  unint64_t v45;
  _QWORD *v46;
  int v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  int32x2_t ****v54;
  int32x2_t *v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  int32x2_t *****v60;
  int32x2_t ****v61;
  int v62;
  int v63;
  char *v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  llvm::SCEV *SCEVIter;
  unsigned int *v73;
  _QWORD *v74;
  unsigned int v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  int32x2_t ****v82;
  int32x2_t *v83;
  unint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  int32x2_t *****v88;
  int32x2_t ****v89;
  int v90;
  int v91;
  unsigned int *v92;
  _QWORD *v93;
  unsigned int v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v99;
  uint64_t *v100;
  unint64_t v101;
  int32x2_t ****v102;
  int32x2_t *v103;
  unint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  int32x2_t *****v108;
  int32x2_t ****v109;
  int v110;
  int v111;
  uint64_t *v112;
  void (**v113)(void);
  unsigned int v115;
  unsigned int v116;
  llvm::SCEV *v117;
  uint64_t v118;
  unint64_t *v119;
  int32x2_t ****v120;
  llvm::SCEV *v121;
  _BYTE *v122;
  _BYTE *v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  _BYTE v127[64];
  char *v128;
  char *v129;
  uint64_t v130;
  _BYTE *v131;
  _BYTE *v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  _BYTE v136[64];
  void *__p;
  char *v138;
  uint64_t v139;
  void *v140;
  void *v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  void *v145;
  _BYTE *v146;
  void *v147;
  void *v148;
  unsigned int v149;
  unsigned int v150;
  int v151;
  void *v152;
  _BYTE *v153;
  _QWORD v154[3];
  _QWORD *v155;
  char *v156;
  uint64_t v157;
  _QWORD v158[50];

  v158[48] = *MEMORY[0x1E0C80C00];
  v3 = (char *)(this + 6);
  sub_1C63202C4(this + 6);
  v156 = (char *)v158;
  v157 = 0x1000000000;
  sub_1C6320368((uint64_t)(this + 2), &v140);
  v4 = v136;
  v131 = v136;
  v5 = v141;
  if (v141 == v140)
  {
    v132 = v136;
    v6 = v141;
  }
  else
  {
    v115 = v142;
    v4 = malloc_type_malloc(8 * v142, 0x4065EBACuLL);
    if (!v4)
    {
      if (v115)
        goto LABEL_176;
      v4 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v4)
        goto LABEL_176;
    }
    v132 = v4;
    v6 = v140;
    v5 = v141;
  }
  v7 = v143;
  v133 = v142;
  if (v5 == v6)
    v8 = v143;
  else
    v8 = v142;
  if (v8)
  {
    memmove(v4, v5, 8 * v8);
    v7 = v143;
  }
  v134 = v7;
  v135 = v144;
  v138 = 0;
  v139 = 0;
  __p = 0;
  sub_1C4D6CDA0(&__p, v145, v146, 0xAAAAAAAAAAAAAAABLL * ((v146 - (_BYTE *)v145) >> 3));
  v9 = v127;
  v122 = v127;
  v10 = v148;
  if (v148 != v147)
  {
    v116 = v149;
    v9 = malloc_type_malloc(8 * v149, 0x4065EBACuLL);
    if (v9 || !v116 && (v9 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v123 = v9;
      v11 = v147;
      v10 = v148;
      goto LABEL_10;
    }
LABEL_176:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v123 = v127;
  v11 = v148;
LABEL_10:
  v12 = v150;
  v124 = v149;
  if (v10 == v11)
    v13 = v150;
  else
    v13 = v149;
  if (v13)
  {
    memmove(v9, v10, 8 * v13);
    v12 = v150;
  }
  v125 = v12;
  v126 = v151;
  v129 = 0;
  v130 = 0;
  v128 = 0;
  sub_1C4D6CDA0(&v128, v152, v153, 0xAAAAAAAAAAAAAAABLL * ((v153 - (_BYTE *)v152) >> 3));
  v14 = 0;
LABEL_16:
  if (v138 - (_BYTE *)__p != v129 - v128)
  {
LABEL_30:
    v20 = **((_QWORD **)v138 - 3);
    v21 = v20 + 40;
    for (i = *(_QWORD *)(v20 + 48); ; i = *(_QWORD *)(i + 8))
    {
      if (i == v21)
      {
        sub_1C632106C((char *)&v131);
        goto LABEL_16;
      }
      if (i)
        v23 = (llvm::Instruction *)(i - 24);
      else
        v23 = 0;
      v121 = 0;
      v24 = llvm::NaryReassociatePass::tryReassociate((llvm::NaryReassociatePass *)this, v23, &v121);
      if (!v24)
      {
        if (v121)
        {
          v25 = (unsigned int *)sub_1C6321158((uint64_t)v3, (uint64_t *)&v121);
          v118 = 6;
          v119 = 0;
          v120 = (int32x2_t ****)v23;
          if (v23 != (llvm::Instruction *)-8192 && v23 != (llvm::Instruction *)-4096 && v23)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v118);
          v26 = (_QWORD *)sub_1C5087E70(v25 + 2, (unint64_t)&v118, 1);
          v27 = v25[4];
          v28 = (unint64_t *)(*((_QWORD *)v25 + 1) + 24 * v27);
          *v28 = 6;
          v28[1] = 0;
          v29 = (unint64_t)(v28 + 1);
          v30 = v26[2];
          v28[2] = v30;
          if (v30 != -8192 && v30 != -4096 && v30 != 0)
          {
            v32 = *v26 & 0xFFFFFFFFFFFFFFF8;
            v28[1] = *(_QWORD *)v32;
            *(_QWORD *)v32 = v28;
            *v28 = v32 | 6;
            v33 = (uint64_t *)v28[1];
            if (v33)
              *v33 = *v33 & 7 | v29;
          }
          v25[4] = v27 + 1;
          if (v120 != (int32x2_t ****)-8192 && v120 != (int32x2_t ****)-4096 && v120)
          {
            v34 = v118 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v118 & 0xFFFFFFFFFFFFFFF8) = v119;
            if (v119)
            {
              *v119 = *v119 & 7 | v34;
            }
            else
            {
              v35 = v120;
              v36 = ***v120;
              v37 = (unint64_t)v36[303];
              if (v37 <= v34)
              {
                v38 = v36[305].u32[0];
                if (v37 + 16 * v38 > v34)
                {
                  v39 = v38 - 1;
                  LODWORD(v40) = v39 & ((v120 >> 4) ^ (v120 >> 9));
                  v41 = (int32x2_t *****)(v37 + 16 * v40);
                  v42 = *v41;
                  if (v120 == *v41)
                  {
LABEL_59:
                    *v41 = (int32x2_t ****)-8192;
                    v36[304] = vadd_s32(v36[304], (int32x2_t)0x1FFFFFFFFLL);
                    v35 = v120;
                  }
                  else
                  {
                    v43 = 1;
                    while (v42 != (int32x2_t ****)-4096)
                    {
                      v44 = v40 + v43++;
                      v40 = v44 & v39;
                      v42 = *(int32x2_t *****)(v37 + 16 * v40);
                      if (v120 == v42)
                      {
                        v41 = (int32x2_t *****)(v37 + 16 * v40);
                        goto LABEL_59;
                      }
                    }
                  }
                  *((_BYTE *)v35 + 17) &= ~1u;
                }
              }
            }
          }
        }
        continue;
      }
      v45 = (unint64_t)v24;
      llvm::Value::doRAUW(v23, (llvm::Value *)v24, (llvm::Value *)1);
      v118 = 6;
      v119 = 0;
      v120 = (int32x2_t ****)v23;
      if (v23 != (llvm::Instruction *)-8192 && v23 != (llvm::Instruction *)-4096 && v23)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v118);
      v46 = (_QWORD *)sub_1C5087E70((unsigned int *)&v156, (unint64_t)&v118, 1);
      v47 = v157;
      v48 = &v156[24 * v157];
      *(_QWORD *)v48 = 6;
      *((_QWORD *)v48 + 1) = 0;
      v49 = (unint64_t)(v48 + 8);
      v50 = v46[2];
      *((_QWORD *)v48 + 2) = v50;
      if (v50 != -8192 && v50 != -4096)
      {
        if (v50)
        {
          v51 = *v46 & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)v48 + 1) = *(_QWORD *)v51;
          *(_QWORD *)v51 = v48;
          *(_QWORD *)v48 = v51 | 6;
          v52 = (uint64_t *)*((_QWORD *)v48 + 1);
          if (v52)
            *v52 = *v52 & 7 | v49;
        }
      }
      LODWORD(v157) = v47 + 1;
      if (v120 != (int32x2_t ****)-8192 && v120 != (int32x2_t ****)-4096 && v120)
      {
        v53 = v118 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v118 & 0xFFFFFFFFFFFFFFF8) = v119;
        if (v119)
        {
          *v119 = *v119 & 7 | v53;
        }
        else
        {
          v54 = v120;
          v55 = ***v120;
          v56 = (unint64_t)v55[303];
          if (v56 <= v53)
          {
            v57 = v55[305].u32[0];
            if (v56 + 16 * v57 > v53)
            {
              v58 = v57 - 1;
              LODWORD(v59) = v58 & ((v120 >> 4) ^ (v120 >> 9));
              v60 = (int32x2_t *****)(v56 + 16 * v59);
              v61 = *v60;
              if (v120 == *v60)
              {
LABEL_81:
                *v60 = (int32x2_t ****)-8192;
                v55[304] = vadd_s32(v55[304], (int32x2_t)0x1FFFFFFFFLL);
                v54 = v120;
              }
              else
              {
                v62 = 1;
                while (v61 != (int32x2_t ****)-4096)
                {
                  v63 = v59 + v62++;
                  v59 = v63 & v58;
                  v61 = *(int32x2_t *****)(v56 + 16 * v59);
                  if (v120 == v61)
                  {
                    v60 = (int32x2_t *****)(v56 + 16 * v59);
                    goto LABEL_81;
                  }
                }
              }
              *((_BYTE *)v54 + 17) &= ~1u;
            }
          }
        }
      }
      v64 = this[3];
      v65 = *((_QWORD *)v64 + 13);
      v66 = *((_DWORD *)v64 + 30);
      if (v66)
      {
        v67 = (v66 - 1) & ((v45 >> 4) ^ (v45 >> 9));
        v68 = v65 + 48 * v67;
        v69 = *(_QWORD *)(v68 + 24);
        if (v69 == v45)
          goto LABEL_91;
        v70 = 1;
        while (v69 != -4096)
        {
          v71 = v67 + v70++;
          v67 = v71 & (v66 - 1);
          v68 = v65 + 48 * v67;
          v69 = *(_QWORD *)(v68 + 24);
          if (v69 == v45)
            goto LABEL_91;
        }
      }
      v68 = v65 + 48 * v66;
LABEL_91:
      if (v68 == v65 + 48 * v66 || (SCEVIter = *(llvm::SCEV **)(v68 + 40)) == 0)
        SCEVIter = (llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v64, v45);
      v117 = SCEVIter;
      v73 = (unsigned int *)sub_1C6321158((uint64_t)v3, (uint64_t *)&v117);
      v118 = 6;
      v119 = 0;
      v120 = (int32x2_t ****)v45;
      if (v45 != -8192 && v45 != -4096)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v118);
      v74 = (_QWORD *)sub_1C5087E70(v73 + 2, (unint64_t)&v118, 1);
      v75 = v73[4];
      v76 = (unint64_t *)(*((_QWORD *)v73 + 1) + 24 * v75);
      *v76 = 6;
      v76[1] = 0;
      v77 = (unint64_t)(v76 + 1);
      v78 = v74[2];
      v76[2] = v78;
      if (v78 != -8192 && v78 != -4096)
      {
        if (v78)
        {
          v79 = *v74 & 0xFFFFFFFFFFFFFFF8;
          v76[1] = *(_QWORD *)v79;
          *(_QWORD *)v79 = v76;
          *v76 = v79 | 6;
          v80 = (uint64_t *)v76[1];
          if (v80)
            *v80 = *v80 & 7 | v77;
        }
      }
      v73[4] = v75 + 1;
      if (v120 != (int32x2_t ****)-8192 && v120 != (int32x2_t ****)-4096 && v120)
      {
        v81 = v118 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v118 & 0xFFFFFFFFFFFFFFF8) = v119;
        if (v119)
        {
          *v119 = *v119 & 7 | v81;
        }
        else
        {
          v82 = v120;
          v83 = ***v120;
          v84 = (unint64_t)v83[303];
          if (v84 <= v81)
          {
            v85 = v83[305].u32[0];
            if (v84 + 16 * v85 > v81)
            {
              v86 = v85 - 1;
              LODWORD(v87) = v86 & ((v120 >> 4) ^ (v120 >> 9));
              v88 = (int32x2_t *****)(v84 + 16 * v87);
              v89 = *v88;
              if (v120 == *v88)
              {
LABEL_113:
                *v88 = (int32x2_t ****)-8192;
                v83[304] = vadd_s32(v83[304], (int32x2_t)0x1FFFFFFFFLL);
                v82 = v120;
              }
              else
              {
                v90 = 1;
                while (v89 != (int32x2_t ****)-4096)
                {
                  v91 = v87 + v90++;
                  v87 = v91 & v86;
                  v89 = *(int32x2_t *****)(v84 + 16 * v87);
                  if (v120 == v89)
                  {
                    v88 = (int32x2_t *****)(v84 + 16 * v87);
                    goto LABEL_113;
                  }
                }
              }
              *((_BYTE *)v82 + 17) &= ~1u;
            }
          }
        }
      }
      if (SCEVIter != v121)
      {
        v92 = (unsigned int *)sub_1C6321158((uint64_t)v3, (uint64_t *)&v121);
        v118 = 6;
        v119 = 0;
        v120 = (int32x2_t ****)v45;
        if (v45 != -8192 && v45 != -4096)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v118);
        v93 = (_QWORD *)sub_1C5087E70(v92 + 2, (unint64_t)&v118, 1);
        v94 = v92[4];
        v95 = (unint64_t *)(*((_QWORD *)v92 + 1) + 24 * v94);
        *v95 = 6;
        v95[1] = 0;
        v96 = (unint64_t)(v95 + 1);
        v97 = v93[2];
        v95[2] = v97;
        if (v97 != -8192 && v97 != -4096 && v97 != 0)
        {
          v99 = *v93 & 0xFFFFFFFFFFFFFFF8;
          v95[1] = *(_QWORD *)v99;
          *(_QWORD *)v99 = v95;
          *v95 = v99 | 6;
          v100 = (uint64_t *)v95[1];
          if (v100)
            *v100 = *v100 & 7 | v96;
        }
        v92[4] = v94 + 1;
        if (v120 != (int32x2_t ****)-8192 && v120 != (int32x2_t ****)-4096 && v120)
        {
          v101 = v118 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v118 & 0xFFFFFFFFFFFFFFF8) = v119;
          if (v119)
          {
            *v119 = *v119 & 7 | v101;
          }
          else
          {
            v102 = v120;
            v103 = ***v120;
            v104 = (unint64_t)v103[303];
            if (v104 <= v101)
            {
              v105 = v103[305].u32[0];
              if (v104 + 16 * v105 > v101)
              {
                v106 = v105 - 1;
                LODWORD(v107) = v106 & ((v120 >> 4) ^ (v120 >> 9));
                v108 = (int32x2_t *****)(v104 + 16 * v107);
                v109 = *v108;
                if (v120 == *v108)
                {
LABEL_140:
                  *v108 = (int32x2_t ****)-8192;
                  v103[304] = vadd_s32(v103[304], (int32x2_t)0x1FFFFFFFFLL);
                  v102 = v120;
                }
                else
                {
                  v110 = 1;
                  while (v109 != (int32x2_t ****)-4096)
                  {
                    v111 = v107 + v110++;
                    v107 = v111 & v106;
                    v109 = *(int32x2_t *****)(v104 + 16 * v107);
                    if (v120 == v109)
                    {
                      v108 = (int32x2_t *****)(v104 + 16 * v107);
                      goto LABEL_140;
                    }
                  }
                }
                *((_BYTE *)v102 + 17) &= ~1u;
              }
            }
          }
        }
      }
      v14 = 1;
    }
  }
  if (__p != v138)
  {
    v15 = v128 + 8;
    v16 = (char *)__p + 8;
    do
    {
      v17 = v16 - 8;
      if (*((_QWORD *)v16 - 1) != *((_QWORD *)v15 - 1))
        goto LABEL_30;
      v18 = v15[8];
      if (v16[8])
        v19 = v18 == 0;
      else
        v19 = 1;
      if (v19)
      {
        if ((v16[8] == 0) == (v18 != 0))
          goto LABEL_30;
      }
      else if (*(_QWORD *)v16 != *(_QWORD *)v15)
      {
        goto LABEL_30;
      }
      v15 += 24;
      v16 += 24;
    }
    while (v17 + 24 != v138);
  }
  if (v128)
  {
    v129 = v128;
    operator delete(v128);
  }
  if (v123 != v122)
    free(v123);
  if (__p)
  {
    v138 = (char *)__p;
    operator delete(__p);
  }
  if (v132 != v131)
    free(v132);
  if (v152)
  {
    v153 = v152;
    operator delete(v152);
  }
  if (v148 != v147)
    free(v148);
  if (v145)
  {
    v146 = v145;
    operator delete(v145);
  }
  if (v141 != v140)
    free(v141);
  v112 = (uint64_t *)this[4];
  v154[0] = &off_1E8196C88;
  v154[1] = this;
  v155 = v154;
  llvm::RecursivelyDeleteTriviallyDeadInstructionsPermissive((unsigned int *)&v156, v112, 0, v154);
  if (v155 == v154)
  {
    v113 = (void (**)(void))(v154[0] + 32);
    goto LABEL_165;
  }
  if (v155)
  {
    v113 = (void (**)(void))(*v155 + 40);
LABEL_165:
    (*v113)();
  }
  sub_1C50880D4(&v156);
  return v14 & 1;
}

uint64_t ***llvm::NaryReassociatePass::tryReassociateGEPAtIndex(const llvm::Value **this, llvm::GetElementPtrInst *a2, unsigned int a3, llvm::Type *a4)
{
  llvm **v8;
  int v9;
  llvm ***v10;
  int v11;
  uint64_t ***result;
  uint64_t v13;
  unsigned int v14;
  int v15;
  llvm::Value **v16;
  llvm::Value *v17;
  llvm::Value *v18;

  v8 = (llvm **)*((_QWORD *)a2 + 4 * a3 + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 4);
  v9 = *((unsigned __int8 *)v8 + 16);
  if (v8 && v9 == 68)
  {
    v10 = (llvm ***)(v8 - 4);
LABEL_4:
    v8 = *v10;
    goto LABEL_7;
  }
  if (v8)
  {
    if (v9 == 67)
    {
      v10 = (llvm ***)(v8 - 4);
      if (llvm::isKnownNonNegative(*(v8 - 4), this[1], 0, (uint64_t)*this, a2, this[2], (const llvm::DominatorTree *)1))goto LABEL_4;
    }
  }
LABEL_7:
  v11 = *((unsigned __int8 *)v8 + 16);
  if (v11 == 5)
  {
    if (*((_WORD *)v8 + 9) == 13)
      goto LABEL_13;
    return 0;
  }
  if (v11 != 41)
    return 0;
LABEL_13:
  v13 = (uint64_t)this[1];
  v14 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if ((v14 & 0xFE) == 0x12)
    v14 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
  if (*(_DWORD *)(llvm::DataLayout::getPointerAlignElem(this[1], v14 >> 8) + 4) > *((_DWORD *)*v8 + 2) >> 8
    && llvm::computeOverflowForSignedAdd(v8, v13, (uint64_t)*this, (uint64_t)a2, (uint64_t)this[2]) != 3)
  {
    return 0;
  }
  v15 = *((_DWORD *)v8 + 5);
  if ((v15 & 0x40000000) != 0)
    v16 = (llvm::Value **)*(v8 - 1);
  else
    v16 = &v8[-4 * (v15 & 0x7FFFFFF)];
  v17 = *v16;
  v18 = v16[4];
  result = llvm::NaryReassociatePass::tryReassociateGEPAtIndex((llvm::NaryReassociatePass *)this, a2, a3, *v16, v18, a4);
  if (!result)
  {
    if (v17 != v18)
      return llvm::NaryReassociatePass::tryReassociateGEPAtIndex((llvm::NaryReassociatePass *)this, a2, a3, v18, v17, a4);
    return 0;
  }
  return result;
}

BOOL llvm::NaryReassociatePass::requiresSignExtension(llvm::NaryReassociatePass *this, llvm::Value *a2, llvm::GetElementPtrInst *a3)
{
  llvm::DataLayout *v3;
  unsigned int v4;

  v3 = (llvm::DataLayout *)*((_QWORD *)this + 1);
  v4 = *(_DWORD *)(*(_QWORD *)a3 + 8);
  if ((v4 & 0xFE) == 0x12)
    v4 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a3 + 16) + 8);
  return *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(v3, v4 >> 8) + 4) > *(_DWORD *)(*(_QWORD *)a2 + 8) >> 8;
}

uint64_t llvm::NaryReassociatePass::findClosestMatchingDominator(llvm::NaryReassociatePass *this, const llvm::SCEV *a2, llvm::Instruction *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  int32x2_t *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v28;

  v28 = 0;
  v5 = sub_1C61A4EFC(*((_QWORD *)this + 6), *((_DWORD *)this + 16), (uint64_t)a2, &v28);
  v6 = 0;
  v7 = v28;
  if (v5)
    v8 = v28 == *((_QWORD *)this + 6) + 72 * *((unsigned int *)this + 16);
  else
    v8 = 1;
  if (!v8)
  {
    v9 = *(_DWORD *)(v28 + 16);
    while (v9)
    {
      v10 = *(_QWORD *)(v7 + 8);
      v11 = v10 + 24 * v9;
      v6 = *(_QWORD *)(v11 - 8);
      if (v6)
      {
        if (llvm::DominatorTree::dominates(*((llvm::DominatorTree **)this + 2), *(const llvm::Value **)(v11 - 8), a3))
          return v6;
        v9 = *(_DWORD *)(v7 + 16);
        v10 = *(_QWORD *)(v7 + 8);
      }
      *(_DWORD *)(v7 + 16) = --v9;
      v12 = (_QWORD *)(v10 + 24 * v9);
      v13 = v12[2];
      if (v13 != -8192 && v13 != -4096 && v13 != 0)
      {
        v15 = *v12 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v15 = v12[1];
        v16 = (unint64_t *)v12[1];
        if (v16)
        {
          *v16 = *v16 & 7 | v15;
        }
        else
        {
          v17 = v12[2];
          v18 = ***(int32x2_t ****)v17;
          v19 = (unint64_t)v18[303];
          if (v19 <= v15)
          {
            v20 = v18[305].u32[0];
            if (v19 + 16 * v20 > v15)
            {
              v21 = v20 - 1;
              LODWORD(v22) = (v20 - 1) & ((v17 >> 4) ^ (v17 >> 9));
              v23 = (uint64_t *)(v19 + 16 * v22);
              v24 = *v23;
              if (v17 == *v23)
              {
LABEL_25:
                *v23 = -8192;
                v18[304] = vadd_s32(v18[304], (int32x2_t)0x1FFFFFFFFLL);
                v17 = v12[2];
              }
              else
              {
                v25 = 1;
                while (v24 != -4096)
                {
                  v26 = v22 + v25++;
                  v22 = v26 & v21;
                  v24 = *(_QWORD *)(v19 + 16 * v22);
                  if (v17 == v24)
                  {
                    v23 = (uint64_t *)(v19 + 16 * v22);
                    goto LABEL_25;
                  }
                }
              }
              *(_BYTE *)(v17 + 17) &= ~1u;
              v9 = *(_DWORD *)(v7 + 16);
            }
          }
        }
      }
    }
    return 0;
  }
  return v6;
}

uint64_t sub_1C5BD9578()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5BD8474(v0);
}

void sub_1C5BD95A0(uint64_t *a1)
{
  *a1 = (uint64_t)&off_1E8196BE8;
  sub_1C5A55620(a1 + 10);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C5BD95D0(uint64_t *a1)
{
  *a1 = (uint64_t)&off_1E8196BE8;
  sub_1C5A55620(a1 + 10);
  llvm::Pass::~Pass((llvm::Pass *)a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5BD9614()
{
  return 0;
}

void sub_1C5BD961C(uint64_t a1, llvm::AnalysisUsage *a2)
{
  uint64_t v3;

  v3 = (uint64_t)a2 + 112;
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, v3, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, v3, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C5BD96F0(uint64_t a1, const llvm::Function *a2)
{
  unint64_t v2;
  char v5;
  char **v6;
  char *v7;
  llvm::AssumptionCacheTracker *v8;
  uint64_t AssumptionCache;
  char **v10;
  char *v11;
  uint64_t *v12;
  char **v13;
  char *v14;
  uint64_t v15;
  char **v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  uint64_t *v25;
  char **v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::Function *v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v38;
  void *v39;
  void **v40;
  uint64_t v41;
  uint64_t v42[2];
  int v43;
  uint64_t v44[2];
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  void *__src;
  unsigned int v51;
  _QWORD v52[2];
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, a2) & 1) != 0)
  {
    v5 = 0;
    return v5 & 1;
  }
  v6 = **(char ****)(a1 + 8);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != llvm::AssumptionCacheTracker::ID);
  v8 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = llvm::AssumptionCacheTracker::getAssumptionCache(v8, a2);
  v10 = **(char ****)(a1 + 8);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != llvm::DominatorTreeWrapperPass::ID);
  v12 = (uint64_t *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), llvm::DominatorTreeWrapperPass::ID);
  v13 = **(char ****)(a1 + 8);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != llvm::ScalarEvolutionWrapperPass::ID);
  v15 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v16 = **(char ****)(a1 + 8);
  do
  {
    v17 = *v16;
    v16 += 2;
  }
  while (v17 != llvm::TargetLibraryInfoWrapperPass::ID);
  v18 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v16 - 1) + 96))(*(v16 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v42[0] = 0;
  v42[1] = 0;
  v43 = 0;
  v44[0] = 0;
  v44[1] = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  llvm::TargetLibraryAnalysis::run(v18 + 32, (uint64_t)a2, (uint64_t)&v49);
  *(_QWORD *)(v18 + 240) = v49;
  v19 = (uint64_t *)(v18 + 240);
  if (*(_BYTE *)(v18 + 320))
  {
    if (v19 == &v49)
    {
LABEL_24:
      *(_DWORD *)(v18 + 312) = v57;
      goto LABEL_25;
    }
    v20 = v12;
    v21 = v15;
    v22 = AssumptionCache;
    v23 = (void **)(v18 + 248);
    v2 = v51;
    v24 = *(unsigned int *)(v18 + 256);
    if (v24 >= v51)
    {
      if (v51)
        memmove(*v23, __src, 8 * v51);
      goto LABEL_23;
    }
    if (*(_DWORD *)(v18 + 260) < v51)
    {
      *(_DWORD *)(v18 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v18 + 248, v18 + 264, v2, 8);
    }
    else if ((_DWORD)v24)
    {
      memmove(*v23, __src, 8 * v24);
      goto LABEL_21;
    }
    v24 = 0;
LABEL_21:
    if (v24 != v51)
      memcpy((char *)*v23 + 8 * v24, (char *)__src + 8 * v24, 8 * v51 - 8 * v24);
LABEL_23:
    *(_DWORD *)(v18 + 256) = v2;
    AssumptionCache = v22;
    v15 = v21;
    v12 = v20;
    v19 = (uint64_t *)(v18 + 240);
    goto LABEL_24;
  }
  v38 = AssumptionCache;
  v39 = (void *)(v18 + 264);
  *(_QWORD *)(v18 + 248) = v18 + 264;
  v40 = (void **)(v18 + 248);
  *(_QWORD *)(v18 + 256) = 0x600000000;
  v2 = v51;
  if (v51 && v40 != &__src)
  {
    if (v51 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v18 + 248, v18 + 264, v51, 8);
      v41 = v51;
      if (!v51)
      {
LABEL_44:
        *(_DWORD *)(v18 + 256) = v2;
        goto LABEL_45;
      }
      v39 = *v40;
    }
    else
    {
      v41 = v51;
    }
    memcpy(v39, __src, 8 * v41);
    goto LABEL_44;
  }
LABEL_45:
  *(_DWORD *)(v18 + 312) = v57;
  *(_BYTE *)(v18 + 320) = 1;
  AssumptionCache = v38;
LABEL_25:
  v25 = v12 + 4;
  if (__src != v52)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v44);
  sub_1C4D8B52C(v42);
  v26 = **(char ****)(a1 + 8);
  do
  {
    v27 = *v26;
    v26 += 2;
  }
  while (v27 != llvm::TargetTransformInfoWrapperPass::ID);
  v28 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v26 - 1) + 96))(*(v26 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v49 = 0;
  __src = 0;
  v51 = 0;
  v52[0] = 0;
  v52[1] = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v29 = *(_QWORD *)(v28 + 56);
  if (v29)
  {
    v12 = v52;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, const llvm::Function *))(*(_QWORD *)v29 + 48))(v42, v29, a2);
    v2 = v28 + 64;
    v30 = v42[0];
    if (!*(_BYTE *)(v28 + 72))
    {
      *(_QWORD *)(v28 + 64) = v42[0];
      *(_BYTE *)(v28 + 72) = 1;
      goto LABEL_33;
    }
    v42[0] = 0;
    v31 = *(_QWORD *)v2;
    *(_QWORD *)v2 = v30;
    if (!v31)
      goto LABEL_33;
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v42[0];
    v42[0] = 0;
    if (!v32)
      goto LABEL_33;
  }
  else
  {
    sub_1C485C2F0();
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
LABEL_33:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v12);
  sub_1C4D8B52C(&v49);
  v34 = 0;
  *(_QWORD *)(a1 + 32) = AssumptionCache;
  v35 = a1 + 32;
  *(_QWORD *)(v35 + 16) = v25;
  *(_QWORD *)(v35 + 24) = v15;
  *(_QWORD *)(v35 + 32) = v19;
  *(_QWORD *)(v35 + 40) = v2;
  *(_QWORD *)(v35 + 8) = *((_QWORD *)a2 + 5) + 272;
  do
  {
    v5 = v34;
    v36 = llvm::NaryReassociatePass::doOneIteration((char **)v35, v33);
    v34 = 1;
  }
  while ((v36 & 1) != 0);
  return v5 & 1;
}

char **sub_1C5BD9B68(char **result)
{
  char **v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = result;
  v2 = *((unsigned int *)result + 4);
  v3 = *((_DWORD *)result + 2);
  if ((_DWORD)v2)
  {
    v4 = 72 * v2;
    result = (char **)(*result + 8);
    do
    {
      if (((unint64_t)*(result - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        result = sub_1C56E89BC(result);
      result += 9;
      v4 -= 72;
    }
    while (v4);
  }
  v5 = 1 << (33 - __clz(v3 - 1));
  if (v5 <= 64)
    v5 = 64;
  if (v3)
    v6 = v5;
  else
    v6 = 0;
  if ((_DWORD)v6 == *((_DWORD *)v1 + 4))
  {
    v1[1] = 0;
    if ((_DWORD)v6)
    {
      v7 = *v1;
      v8 = 72 * v6;
      do
      {
        *(_QWORD *)v7 = -4096;
        v7 += 72;
        v8 -= 72;
      }
      while (v8);
    }
  }
  else
  {
    result = (char **)MEMORY[0x1CAA32FB4](*v1, 8);
    if ((_DWORD)v6)
    {
      v9 = (4 * (int)v6 / 3u + 1) | ((unint64_t)(4 * (int)v6 / 3u + 1) >> 1);
      v10 = v9 | (v9 >> 2) | ((v9 | (v9 >> 2)) >> 4);
      LODWORD(v10) = (((v10 | (v10 >> 8)) >> 16) | v10 | (v10 >> 8)) + 1;
      *((_DWORD *)v1 + 4) = v10;
      result = (char **)operator new(72 * v10, (std::align_val_t)8uLL);
      *v1 = (char *)result;
      v1[1] = 0;
      v11 = *((unsigned int *)v1 + 4);
      if ((_DWORD)v11)
      {
        v12 = 72 * v11;
        do
        {
          *result = (char *)-4096;
          result += 9;
          v12 -= 72;
        }
        while (v12);
      }
    }
    else
    {
      *v1 = 0;
      v1[1] = 0;
      *((_DWORD *)v1 + 4) = 0;
    }
  }
  return result;
}

_QWORD *sub_1C5BD9CB0(uint64_t a1, int a2)
{
  int v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(72 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6321280((char **)a1, (uint64_t)v4, (uint64_t)&v4[72 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 72 * v10;
    do
    {
      *result = -4096;
      result += 9;
      v11 -= 72;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5BD9D74(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  int32x2_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v29;
  _QWORD *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  int32x2_t *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  int v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v51;
  _QWORD *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  int32x2_t *v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  int v64;
  int v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v75;
  uint64_t *v76;
  int v77;
  char *v78;
  uint64_t v79;
  unint64_t v81;
  unint64_t *v82;
  uint64_t v83;
  int32x2_t *v84;
  unint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  int v91;
  int v92;
  char *i;
  uint64_t v94;
  unint64_t v96;
  unint64_t *v97;
  uint64_t v98;
  int32x2_t *v99;
  unint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  int v106;
  int v107;
  unsigned int v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v113;
  unint64_t *v114;
  uint64_t v115;
  int32x2_t *v116;
  unint64_t v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  int v123;
  int v124;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      sub_1C62F9B54((char **)a1, (char **)a2);
      return a1;
    }
    v5 = *(unsigned int *)(a2 + 8);
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= v5)
    {
      v23 = *(char **)a1;
      if ((_DWORD)v5)
      {
        v24 = &v4[24 * v5];
        do
        {
          v25 = *((_QWORD *)v23 + 2);
          v26 = *((_QWORD *)v4 + 2);
          if (v25 != v26)
          {
            v27 = v25 == -4096 || v25 == 0;
            if (!v27 && v25 != -8192)
            {
              v32 = *(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v32 = *((_QWORD *)v23 + 1);
              v33 = (unint64_t *)*((_QWORD *)v23 + 1);
              if (v33)
              {
                *v33 = *v33 & 7 | v32;
              }
              else
              {
                v34 = *((_QWORD *)v23 + 2);
                v35 = ***(int32x2_t ****)v34;
                v36 = (unint64_t)v35[303];
                if (v36 <= v32)
                {
                  v37 = v35[305].u32[0];
                  if (v36 + 16 * v37 > v32)
                  {
                    v38 = v37 - 1;
                    LODWORD(v39) = v38 & ((v34 >> 4) ^ (v34 >> 9));
                    v40 = (uint64_t *)(v36 + 16 * v39);
                    v41 = *v40;
                    if (v34 == *v40)
                    {
LABEL_52:
                      *v40 = -8192;
                      v35[304] = vadd_s32(v35[304], (int32x2_t)0x1FFFFFFFFLL);
                      v34 = *((_QWORD *)v23 + 2);
                    }
                    else
                    {
                      v42 = 1;
                      while (v41 != -4096)
                      {
                        v43 = v39 + v42++;
                        v39 = v43 & v38;
                        v41 = *(_QWORD *)(v36 + 16 * v39);
                        if (v34 == v41)
                        {
                          v40 = (uint64_t *)(v36 + 16 * v39);
                          goto LABEL_52;
                        }
                      }
                    }
                    *(_BYTE *)(v34 + 17) &= ~1u;
                  }
                }
              }
              v26 = *((_QWORD *)v4 + 2);
            }
            *((_QWORD *)v23 + 2) = v26;
            if (v26 != -4096 && v26 != -8192 && v26 != 0)
            {
              v29 = *(_QWORD *)v4;
              v30 = (_QWORD *)(*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8);
              *((_QWORD *)v23 + 1) = *v30;
              *v30 = v23;
              *(_QWORD *)v23 = v29 & 0xFFFFFFFFFFFFFFF8 | *(_QWORD *)v23 & 7;
              v31 = (unint64_t *)*((_QWORD *)v23 + 1);
              if (v31)
                *v31 = *v31 & 7 | (unint64_t)(v23 + 8);
            }
          }
          v4 += 24;
          v23 += 24;
        }
        while (v4 != v24);
        LODWORD(v6) = *(_DWORD *)(a1 + 8);
        v44 = v23;
        v23 = *(char **)a1;
      }
      else
      {
        v44 = *(char **)a1;
      }
      for (i = &v23[24 * v6]; i != v44; i -= 24)
      {
        v94 = *((_QWORD *)i - 1);
        if (v94 != -8192 && v94 != -4096 && v94 != 0)
        {
          v96 = *((_QWORD *)i - 3) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v96 = *((_QWORD *)i - 2);
          v97 = (unint64_t *)*((_QWORD *)i - 2);
          if (v97)
          {
            *v97 = *v97 & 7 | v96;
          }
          else
          {
            v98 = *((_QWORD *)i - 1);
            v99 = ***(int32x2_t ****)v98;
            v100 = (unint64_t)v99[303];
            if (v100 <= v96)
            {
              v101 = v99[305].u32[0];
              if (v100 + 16 * v101 > v96)
              {
                v102 = v101 - 1;
                LODWORD(v103) = v102 & ((v98 >> 4) ^ (v98 >> 9));
                v104 = (uint64_t *)(v100 + 16 * v103);
                v105 = *v104;
                if (v98 == *v104)
                {
LABEL_138:
                  *v104 = -8192;
                  v99[304] = vadd_s32(v99[304], (int32x2_t)0x1FFFFFFFFLL);
                  v98 = *((_QWORD *)i - 1);
                }
                else
                {
                  v106 = 1;
                  while (v105 != -4096)
                  {
                    v107 = v103 + v106++;
                    v103 = v107 & v102;
                    v105 = *(_QWORD *)(v100 + 16 * v103);
                    if (v98 == v105)
                    {
                      v104 = (uint64_t *)(v100 + 16 * v103);
                      goto LABEL_138;
                    }
                  }
                }
                *(_BYTE *)(v98 + 17) &= ~1u;
              }
            }
          }
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
      v108 = *(_DWORD *)(a2 + 8);
      if (v108)
      {
        v109 = *(char **)a2;
        v110 = *(_QWORD *)a2 + 24 * v108;
        do
        {
          v111 = *(_QWORD *)(v110 - 8);
          if (v111 != -8192 && v111 != -4096 && v111 != 0)
          {
            v113 = *(_QWORD *)(v110 - 24) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v113 = *(_QWORD *)(v110 - 16);
            v114 = *(unint64_t **)(v110 - 16);
            if (v114)
            {
              *v114 = *v114 & 7 | v113;
            }
            else
            {
              v115 = *(_QWORD *)(v110 - 8);
              v116 = ***(int32x2_t ****)v115;
              v117 = (unint64_t)v116[303];
              if (v117 <= v113)
              {
                v118 = v116[305].u32[0];
                if (v117 + 16 * v118 > v113)
                {
                  v119 = v118 - 1;
                  LODWORD(v120) = v119 & ((v115 >> 4) ^ (v115 >> 9));
                  v121 = (uint64_t *)(v117 + 16 * v120);
                  v122 = *v121;
                  if (v115 == *v121)
                  {
LABEL_159:
                    *v121 = -8192;
                    v116[304] = vadd_s32(v116[304], (int32x2_t)0x1FFFFFFFFLL);
                    v115 = *(_QWORD *)(v110 - 8);
                  }
                  else
                  {
                    v123 = 1;
                    while (v122 != -4096)
                    {
                      v124 = v120 + v123++;
                      v120 = v124 & v119;
                      v122 = *(_QWORD *)(v117 + 16 * v120);
                      if (v115 == v122)
                      {
                        v121 = (uint64_t *)(v117 + 16 * v120);
                        goto LABEL_159;
                      }
                    }
                  }
                  *(_BYTE *)(v115 + 17) &= ~1u;
                }
              }
            }
          }
          v110 -= 24;
        }
        while ((char *)v110 != v109);
      }
      goto LABEL_162;
    }
    if (*(_DWORD *)(a1 + 12) >= v5)
    {
      if ((_DWORD)v6)
      {
        v45 = &v4[24 * v6];
        v46 = *(char **)a1;
        do
        {
          v47 = *((_QWORD *)v46 + 2);
          v48 = *((_QWORD *)v4 + 2);
          if (v47 != v48)
          {
            v49 = v47 == -4096 || v47 == 0;
            if (!v49 && v47 != -8192)
            {
              v54 = *(_QWORD *)v46 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v54 = *((_QWORD *)v46 + 1);
              v55 = (unint64_t *)*((_QWORD *)v46 + 1);
              if (v55)
              {
                *v55 = *v55 & 7 | v54;
              }
              else
              {
                v56 = *((_QWORD *)v46 + 2);
                v57 = ***(int32x2_t ****)v56;
                v58 = (unint64_t)v57[303];
                if (v58 <= v54)
                {
                  v59 = v57[305].u32[0];
                  if (v58 + 16 * v59 > v54)
                  {
                    v60 = v59 - 1;
                    LODWORD(v61) = v60 & ((v56 >> 4) ^ (v56 >> 9));
                    v62 = (uint64_t *)(v58 + 16 * v61);
                    v63 = *v62;
                    if (v56 == *v62)
                    {
LABEL_82:
                      *v62 = -8192;
                      v57[304] = vadd_s32(v57[304], (int32x2_t)0x1FFFFFFFFLL);
                      v56 = *((_QWORD *)v46 + 2);
                    }
                    else
                    {
                      v64 = 1;
                      while (v63 != -4096)
                      {
                        v65 = v61 + v64++;
                        v61 = v65 & v60;
                        v63 = *(_QWORD *)(v58 + 16 * v61);
                        if (v56 == v63)
                        {
                          v62 = (uint64_t *)(v58 + 16 * v61);
                          goto LABEL_82;
                        }
                      }
                    }
                    *(_BYTE *)(v56 + 17) &= ~1u;
                  }
                }
              }
              v48 = *((_QWORD *)v4 + 2);
            }
            *((_QWORD *)v46 + 2) = v48;
            if (v48 != -4096 && v48 != -8192 && v48 != 0)
            {
              v51 = *(_QWORD *)v4;
              v52 = (_QWORD *)(*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8);
              *((_QWORD *)v46 + 1) = *v52;
              *v52 = v46;
              *(_QWORD *)v46 = v51 & 0xFFFFFFFFFFFFFFF8 | *(_QWORD *)v46 & 7;
              v53 = (unint64_t *)*((_QWORD *)v46 + 1);
              if (v53)
                *v53 = *v53 & 7 | (unint64_t)(v46 + 8);
            }
          }
          v4 += 24;
          v46 += 24;
        }
        while (v4 != v45);
        goto LABEL_88;
      }
    }
    else
    {
      if ((_DWORD)v6)
      {
        v7 = *(char **)a1;
        v8 = *(_QWORD *)a1 + 24 * v6;
        do
        {
          v9 = *(_QWORD *)(v8 - 8);
          if (v9 != -8192 && v9 != -4096 && v9 != 0)
          {
            v11 = *(_QWORD *)(v8 - 24) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v11 = *(_QWORD *)(v8 - 16);
            v12 = *(unint64_t **)(v8 - 16);
            if (v12)
            {
              *v12 = *v12 & 7 | v11;
            }
            else
            {
              v13 = *(_QWORD *)(v8 - 8);
              v14 = ***(int32x2_t ****)v13;
              v15 = (unint64_t)v14[303];
              if (v15 <= v11)
              {
                v16 = v14[305].u32[0];
                if (v15 + 16 * v16 > v11)
                {
                  v17 = v16 - 1;
                  LODWORD(v18) = v17 & ((v13 >> 4) ^ (v13 >> 9));
                  v19 = (uint64_t *)(v15 + 16 * v18);
                  v20 = *v19;
                  if (v13 == *v19)
                  {
LABEL_23:
                    *v19 = -8192;
                    v14[304] = vadd_s32(v14[304], (int32x2_t)0x1FFFFFFFFLL);
                    v13 = *(_QWORD *)(v8 - 8);
                  }
                  else
                  {
                    v21 = 1;
                    while (v20 != -4096)
                    {
                      v22 = v18 + v21++;
                      v18 = v22 & v17;
                      v20 = *(_QWORD *)(v15 + 16 * v18);
                      if (v13 == v20)
                      {
                        v19 = (uint64_t *)(v15 + 16 * v18);
                        goto LABEL_23;
                      }
                    }
                  }
                  *(_BYTE *)(v13 + 17) &= ~1u;
                }
              }
            }
          }
          v8 -= 24;
        }
        while ((char *)v8 != v7);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1C5087ED8((unsigned int *)a1, v5);
    }
    v6 = 0;
LABEL_88:
    v66 = *(char **)a2;
    v67 = *(unsigned int *)(a2 + 8);
    if (v6 != v67)
    {
      v68 = *(char **)a1;
      v69 = 24 * v6;
      v70 = *(_QWORD *)a1 + 8;
      v71 = 24 * v67;
      do
      {
        v72 = (unint64_t *)&v68[v69];
        *v72 = 6;
        v72[1] = 0;
        v73 = *(_QWORD *)&v66[v69 + 16];
        v72[2] = v73;
        if (v73 != -8192 && v73 != -4096 && v73 != 0)
        {
          v75 = *(_QWORD *)&v66[v69] & 0xFFFFFFFFFFFFFFF8;
          v72[1] = *(_QWORD *)v75;
          *(_QWORD *)v75 = v72;
          *v72 = v75 | 6;
          v76 = (uint64_t *)v72[1];
          if (v76)
            *v76 = *v76 & 7 | (v69 + v70);
        }
        v68 += 24;
        v66 += 24;
        v70 += 24;
        v71 -= 24;
      }
      while (v69 != v71);
      v66 = *(char **)a2;
    }
    *(_DWORD *)(a1 + 8) = v5;
    v77 = *(_DWORD *)(a2 + 8);
    if (v77)
    {
      v78 = &v66[24 * v77];
      do
      {
        v79 = *((_QWORD *)v78 - 1);
        if (v79 != -8192 && v79 != -4096 && v79 != 0)
        {
          v81 = *((_QWORD *)v78 - 3) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v81 = *((_QWORD *)v78 - 2);
          v82 = (unint64_t *)*((_QWORD *)v78 - 2);
          if (v82)
          {
            *v82 = *v82 & 7 | v81;
          }
          else
          {
            v83 = *((_QWORD *)v78 - 1);
            v84 = ***(int32x2_t ****)v83;
            v85 = (unint64_t)v84[303];
            if (v85 <= v81)
            {
              v86 = v84[305].u32[0];
              if (v85 + 16 * v86 > v81)
              {
                v87 = v86 - 1;
                LODWORD(v88) = v87 & ((v83 >> 4) ^ (v83 >> 9));
                v89 = (uint64_t *)(v85 + 16 * v88);
                v90 = *v89;
                if (v83 == *v89)
                {
LABEL_117:
                  *v89 = -8192;
                  v84[304] = vadd_s32(v84[304], (int32x2_t)0x1FFFFFFFFLL);
                  v83 = *((_QWORD *)v78 - 1);
                }
                else
                {
                  v91 = 1;
                  while (v90 != -4096)
                  {
                    v92 = v88 + v91++;
                    v88 = v92 & v87;
                    v90 = *(_QWORD *)(v85 + 16 * v88);
                    if (v83 == v90)
                    {
                      v89 = (uint64_t *)(v85 + 16 * v88);
                      goto LABEL_117;
                    }
                  }
                }
                *(_BYTE *)(v83 + 17) &= ~1u;
              }
            }
          }
        }
        v78 -= 24;
      }
      while (v78 != v66);
    }
LABEL_162:
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

void sub_1C5BDA5C0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5BDA5D4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8196C88;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5BDA608(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8196C88;
  a2[1] = v2;
  return result;
}

void sub_1C5BDA624(uint64_t a1, llvm::Value **a2)
{
  llvm::ScalarEvolution::forgetValue(*(int32x2_t **)(*(_QWORD *)(a1 + 8) + 24), *a2);
}

uint64_t sub_1C5BDA634(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(unsigned __int8 *)(a2 + 16);
  if (v3 == 41)
  {
    v4 = *(_QWORD *)(a2 - 64);
    if (v4 && (**a1 = v4, (v5 = *(_QWORD *)(a2 - 32)) != 0))
    {
      *a1[1] = v5;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (v3 == 5)
    {
      if (*(_WORD *)(a2 + 18) == 13)
      {
        v2 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        if (v2)
        {
          **a1 = v2;
          v2 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
          if (v2)
          {
            *a1[1] = v2;
            LOBYTE(v2) = 1;
          }
        }
      }
      else
      {
        LOBYTE(v2) = 0;
      }
    }
    return (v3 == 5) & v2;
  }
}

uint64_t sub_1C5BDA6D8(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(unsigned __int8 *)(a2 + 16);
  if (v3 == 45)
  {
    v4 = *(_QWORD *)(a2 - 64);
    if (v4 && (**a1 = v4, (v5 = *(_QWORD *)(a2 - 32)) != 0))
    {
      *a1[1] = v5;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (v3 == 5)
    {
      if (*(_WORD *)(a2 + 18) == 17)
      {
        v2 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        if (v2)
        {
          **a1 = v2;
          v2 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
          if (v2)
          {
            *a1[1] = v2;
            LOBYTE(v2) = 1;
          }
        }
      }
      else
      {
        LOBYTE(v2) = 0;
      }
    }
    return (v3 == 5) & v2;
  }
}

void llvm::GVNExpression::Expression::~Expression(llvm::GVNExpression::Expression *this)
{
  JUMPOUT(0x1CAA32FC0);
}

BOOL llvm::GVNExpression::LoadExpression::equals(llvm::GVNExpression::LoadExpression *this, const llvm::GVNExpression::Expression *a2)
{
  _BOOL8 result;

  if ((*((_DWORD *)a2 + 2) - 11) > 1)
    return 0;
  result = sub_1C5B1C404((uint64_t)this, (uint64_t)a2);
  if ((_DWORD)result)
    return *((_QWORD *)this + 6) == *((_QWORD *)a2 + 6);
  return result;
}

BOOL llvm::GVNExpression::StoreExpression::equals(llvm::GVNExpression::StoreExpression *this, const llvm::GVNExpression::Expression *a2)
{
  _BOOL8 result;

  if ((*((_DWORD *)a2 + 2) - 11) <= 1)
  {
    result = sub_1C5B1C404((uint64_t)this, (uint64_t)a2);
    if (!result)
      return result;
    if (*((_QWORD *)this + 6) == *((_QWORD *)a2 + 6)
      && (*((_DWORD *)a2 + 2) != 12 || *((_QWORD *)this + 8) == *((_QWORD *)a2 + 8)))
    {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1C5BDA86C(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  uint64_t v5;

  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeMemorySSAWrapperPassPass(a1, v2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v3);
  llvm::initializeGlobalsAAWrapperPassPass(a1, v4);
  v5 = operator new();
  *(_QWORD *)v5 = "Global Value Numbering";
  *(_QWORD *)(v5 + 8) = 22;
  *(_QWORD *)(v5 + 16) = "newgvn";
  *(_QWORD *)(v5 + 24) = 6;
  *(_QWORD *)(v5 + 32) = &unk_1ED8220A0;
  *(_WORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 42) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = sub_1C5BE009C;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v5, 1);
  return v5;
}

uint64_t sub_1C5BDA928(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED8220A0;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8196E98;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(qword_1ED8220B0);
  if (v3 != -1)
  {
    v7[0] = sub_1C5BDA86C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(qword_1ED8220B0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *llvm::NewGVNPass::run@<X0>(llvm::Function *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  llvm::AssumptionCache *v6;
  llvm::DominatorTree *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ResultImpl;
  _BYTE v12[2608];
  uint64_t v13;

  v3 = a2;
  v13 = *MEMORY[0x1E0C80C00];
  v6 = (llvm::AssumptionCache *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AssumptionAnalysis::Key, (uint64_t)a1)+ 8);
  v7 = (llvm::DominatorTree *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(v3, &llvm::DominatorTreeAnalysis::Key, (uint64_t)a1)+ 8);
  v8 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v3, &llvm::TargetLibraryAnalysis::Key, (uint64_t)a1) + 8;
  v9 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v3, &llvm::AAManager::Key, (uint64_t)a1) + 8;
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(v3, &llvm::MemorySSAAnalysis::Key, (uint64_t)a1);
  sub_1C5BDAB60((uint64_t)v12, a1, v7, v6, v8, v9, *(_QWORD *)(ResultImpl + 8), *((_QWORD *)a1 + 5) + 272);
  LOBYTE(v3) = sub_1C5BDADFC((uint64_t)v12);
  sub_1C5BDFD84((uint64_t)v12);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if ((v3 & 1) != 0)
    return sub_1C4DDB144(a3, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
  else
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C5BDAB60(uint64_t a1, llvm::Function *a2, llvm::DominatorTree *a3, llvm::AssumptionCache *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  llvm::PredicateInfo *v14;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = a6;
  *(_QWORD *)(a1 + 32) = a7;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = a8;
  v14 = (llvm::PredicateInfo *)operator new();
  *(_QWORD *)(a1 + 64) = llvm::PredicateInfo::PredicateInfo(v14, a2, a3, a4);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = a1 + 104;
  *(_QWORD *)(a1 + 96) = 0x400000000;
  *(_QWORD *)(a1 + 136) = a1 + 152;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 160) = 1;
  *(_QWORD *)(a1 + 168) = a1 + 184;
  *(_QWORD *)(a1 + 176) = 0x800000000;
  *(_DWORD *)(a1 + 248) = 1;
  *(_QWORD *)(a1 + 256) = a1 + 288;
  *(_QWORD *)(a1 + 264) = a1 + 288;
  *(_QWORD *)(a1 + 272) = 8;
  *(_DWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_DWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = a1 + 392;
  *(_QWORD *)(a1 + 384) = 0x800000000;
  *(_QWORD *)(a1 + 456) = a1 + 472;
  *(_QWORD *)(a1 + 472) = a1 + 504;
  *(_QWORD *)(a1 + 480) = a1 + 504;
  *(_QWORD *)(a1 + 488) = 8;
  *(_DWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 464) = 0x800000001;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_DWORD *)(a1 + 1256) = 0;
  *(_QWORD *)(a1 + 1264) = a8;
  *(_QWORD *)(a1 + 1272) = a5;
  *(_QWORD *)(a1 + 1280) = a3;
  *(_QWORD *)(a1 + 1288) = a4;
  *(_QWORD *)(a1 + 1296) = 0;
  *(_WORD *)(a1 + 1304) = 0;
  *(_DWORD *)(a1 + 1312) = 0;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_DWORD *)(a1 + 1336) = 0;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_DWORD *)(a1 + 1376) = 0;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_DWORD *)(a1 + 1400) = 0;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_DWORD *)(a1 + 1424) = 0;
  *(_QWORD *)(a1 + 1432) = a1 + 1464;
  *(_QWORD *)(a1 + 1440) = a1 + 1464;
  *(_QWORD *)(a1 + 1448) = 8;
  *(_DWORD *)(a1 + 1456) = 0;
  *(_QWORD *)(a1 + 1864) = 0;
  *(_DWORD *)(a1 + 1544) = 0;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_DWORD *)(a1 + 1568) = 0;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_DWORD *)(a1 + 1592) = 0;
  *(_OWORD *)(a1 + 1576) = 0u;
  *(_DWORD *)(a1 + 1616) = 0;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_DWORD *)(a1 + 1640) = 0;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_DWORD *)(a1 + 1664) = 0;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_DWORD *)(a1 + 1688) = 0;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_DWORD *)(a1 + 1712) = 0;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_DWORD *)(a1 + 1736) = 0;
  *(_OWORD *)(a1 + 1720) = 0u;
  *(_DWORD *)(a1 + 1760) = 0;
  *(_OWORD *)(a1 + 1744) = 0u;
  *(_DWORD *)(a1 + 1784) = 0;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_DWORD *)(a1 + 1808) = 0;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_DWORD *)(a1 + 1832) = 0;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_DWORD *)(a1 + 1856) = 0;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_QWORD *)(a1 + 1872) = a1 + 1904;
  *(_QWORD *)(a1 + 1880) = a1 + 1904;
  *(_QWORD *)(a1 + 1888) = 8;
  *(_DWORD *)(a1 + 1896) = 0;
  *(_DWORD *)(a1 + 1984) = 0;
  *(_OWORD *)(a1 + 1968) = 0u;
  *(_QWORD *)(a1 + 1992) = a1 + 2024;
  *(_QWORD *)(a1 + 2000) = a1 + 2024;
  *(_QWORD *)(a1 + 2008) = 8;
  *(_DWORD *)(a1 + 2016) = 0;
  *(_QWORD *)(a1 + 2088) = a1 + 2104;
  *(_QWORD *)(a1 + 2096) = 0x600000000;
  *(_DWORD *)(a1 + 2152) = 0;
  *(_DWORD *)(a1 + 2176) = 0;
  *(_OWORD *)(a1 + 2160) = 0u;
  *(_DWORD *)(a1 + 2200) = 0;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_DWORD *)(a1 + 2224) = 0;
  *(_OWORD *)(a1 + 2208) = 0u;
  *(_QWORD *)(a1 + 2232) = a1 + 2248;
  *(_QWORD *)(a1 + 2240) = 0x2000000000;
  *(_QWORD *)(a1 + 2504) = a1 + 2536;
  *(_QWORD *)(a1 + 2512) = a1 + 2536;
  *(_QWORD *)(a1 + 2520) = 8;
  *(_DWORD *)(a1 + 2528) = 0;
  *(_QWORD *)(a1 + 2600) = 0;
  return a1;
}

uint64_t sub_1C5BDADFC(uint64_t a1)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  int v25;
  void *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  const void *v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE *v47;
  void *v48;
  void *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  int v56;
  BOOL v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  _QWORD *v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *i;
  uint64_t v72;
  uint64_t v73;
  int v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  const void *v82;
  void *v83;
  unsigned int v84;
  unsigned int v85;
  _BYTE *v86;
  void *v87;
  void *v88;
  unsigned int v89;
  unsigned int v90;
  char *v91;
  char *v92;
  char *v93;
  int v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t j;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t k;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  BOOL v117;
  int v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  BOOL v125;
  uint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char v131;
  _QWORD *v132;
  uint64_t v133;
  unsigned int v134;
  _QWORD *v135;
  unsigned int v136;
  unint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  unint64_t v141;
  unint64_t v142;
  unsigned int v143;
  uint64_t v144;
  void *v145;
  int v146;
  unint64_t v147;
  unint64_t v148;
  unsigned int v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  llvm::Value *v157;
  uint64_t v158;
  uint64_t v159;
  void **v160;
  void **v161;
  void *v162;
  _QWORD *v163;
  _QWORD *v164;
  unsigned int v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  BOOL v170;
  uint64_t v171;
  int v172;
  unint64_t v173;
  int v174;
  int v175;
  uint64_t v176;
  char *v177;
  unint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  BOOL v183;
  BOOL v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  char *v193;
  char *v194;
  char *v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  int v203;
  unint64_t v204;
  char *v205;
  int v206;
  char v207;
  _QWORD *v208;
  void *v209;
  unint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  unint64_t v216;
  unint64_t v217;
  unsigned int v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  unsigned int v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  int v234;
  int v235;
  _QWORD *v236;
  int v237;
  unsigned int v238;
  uint64_t v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  int v245;
  unsigned int v246;
  uint64_t v247;
  int v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  const llvm::BasicBlock *v252;
  const llvm::BasicBlock *v253;
  llvm::Type *v254;
  llvm::Instruction *v255;
  llvm::Instruction *v256;
  int v257;
  uint64_t v258;
  char *v259;
  char *v260;
  char v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  uint64_t v267;
  char **v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  llvm::BasicBlock *v272;
  uint64_t *v273;
  uint64_t v274;
  uint64_t v275;
  llvm::BasicBlock *v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char **v284;
  uint64_t v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  unsigned int v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  int v293;
  int v294;
  int v295;
  char *v296;
  int v297;
  uint64_t v298;
  unsigned int v299;
  uint64_t v300;
  llvm::Instruction **v301;
  llvm::Instruction *v302;
  int v303;
  int v304;
  int v305;
  _QWORD *v306;
  _QWORD *v307;
  unsigned int v308;
  _QWORD *v309;
  int v310;
  uint64_t v311;
  unsigned int v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  int v316;
  unsigned int v317;
  uint64_t v318;
  uint64_t v319;
  _QWORD *v320;
  int v321;
  uint64_t *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t *v325;
  char *v326;
  uint64_t v327;
  unint64_t *v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t *v334;
  uint64_t v335;
  _QWORD *v336;
  unint64_t *v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t *v340;
  unint64_t v341;
  int v342;
  unsigned int v343;
  void *v344;
  uint64_t *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t *v348;
  unint64_t *v349;
  uint64_t v350;
  unint64_t *v351;
  unint64_t v352;
  unint64_t v353;
  uint64_t v354;
  llvm::BasicBlock *v355;
  uint64_t *v356;
  uint64_t v357;
  uint64_t v358;
  _QWORD *v359;
  unsigned int v360;
  unsigned int v361;
  uint64_t *v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t *v366;
  uint64_t v367;
  llvm::UndefValue *v368;
  int v369;
  _QWORD *v370;
  char *v371;
  _QWORD *v372;
  uint64_t v373;
  _QWORD *v374;
  _QWORD *v375;
  int v376;
  uint64_t v377;
  unsigned int v378;
  uint64_t v379;
  uint64_t v380;
  int v381;
  int v382;
  int v383;
  char *v384;
  uint64_t v385;
  unint64_t *v386;
  unint64_t v387;
  uint64_t m;
  uint64_t v389;
  BOOL v390;
  uint64_t *v391;
  uint64_t *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t *v397;
  uint64_t v398;
  uint64_t v399;
  int v400;
  uint64_t v401;
  _QWORD *v402;
  int v403;
  uint64_t v404;
  unsigned int v405;
  uint64_t v406;
  uint64_t v407;
  int v408;
  int v409;
  unsigned int v410;
  unsigned int v411;
  uint64_t v412;
  uint64_t v413;
  void *v414;
  void **v415;
  _QWORD *v416;
  void **v417;
  void *v418;
  uint64_t v419;
  uint64_t v420;
  llvm::SmallPtrSetImplBase *v421;
  llvm::SmallPtrSetImplBase *v422;
  uint64_t v423;
  void *v424;
  uint64_t v425;
  uint64_t v426;
  void *v427;
  int v428;
  uint64_t v429;
  void *v430;
  int v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  _QWORD **v435;
  int v436;
  uint64_t v437;
  llvm::Type *v438;
  _QWORD *v439;
  _QWORD *v440;
  _QWORD *v441;
  _QWORD *v442;
  _QWORD *v443;
  int v444;
  int v445;
  llvm::SmallPtrSetImplBase *v446;
  uint64_t v447;
  _BYTE *v448;
  char v449;
  uint64_t v450;
  uint64_t v451;
  int v452;
  unsigned __int8 *v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  unint64_t *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t *v464;
  uint64_t v465;
  unsigned int *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t *v469;
  _QWORD *v470;
  uint64_t v471;
  uint64_t v472;
  unint64_t *v473;
  unint64_t v474;
  unint64_t *v475;
  uint64_t v476;
  unsigned __int8 *v477;
  void **v478;
  unint64_t *v479;
  unint64_t v480;
  __int128 *v481;
  __int128 *v482;
  _QWORD *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t *v490;
  uint64_t v491;
  int v492;
  int v493;
  llvm::PoisonValue **v494;
  uint64_t v495;
  int v496;
  uint64_t v497;
  unsigned int v498;
  uint64_t v499;
  uint64_t v500;
  int v501;
  int v502;
  int v503;
  unint64_t v504;
  uint64_t v505;
  int v506;
  uint64_t v507;
  BOOL v508;
  _QWORD *v509;
  uint64_t v510;
  uint64_t v511;
  int v512;
  uint64_t v513;
  uint64_t v514;
  int v515;
  uint64_t v516;
  unsigned int v517;
  uint64_t v518;
  uint64_t v519;
  int v520;
  int v521;
  int v522;
  _QWORD *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t *v529;
  uint64_t v530;
  int v531;
  int v532;
  uint64_t v533;
  unsigned int v534;
  unsigned int v535;
  char *v536;
  unint64_t *v537;
  unint64_t v538;
  uint64_t v539;
  uint64_t v540;
  signed int *v541;
  signed int *v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  _QWORD *v546;
  uint64_t v547;
  llvm::Instruction **v548;
  llvm::Instruction *v549;
  int v550;
  uint64_t v551;
  llvm::ValueSymbolTable *v552;
  signed int v553;
  signed int v554;
  uint64_t v555;
  uint64_t v556;
  unint64_t v557;
  BOOL v558;
  int v559;
  char *v560;
  int v561;
  signed int *v562;
  int v563;
  _QWORD *v564;
  uint64_t v565;
  uint64_t v566;
  _QWORD *v567;
  int v568;
  uint64_t v569;
  uint64_t v570;
  llvm *v571;
  uint64_t v572;
  llvm::Value *v573;
  uint64_t v574;
  llvm::Instruction *v575;
  uint64_t v576;
  _QWORD *v577;
  uint64_t v578;
  uint64_t v579;
  int v580;
  llvm::Instruction **v581;
  llvm::Instruction *v582;
  llvm::Instruction **v583;
  int v584;
  BOOL v585;
  int v586;
  _QWORD *v587;
  uint64_t *v588;
  _QWORD *v589;
  int v590;
  uint64_t *v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t *v594;
  unint64_t *v595;
  uint64_t v596;
  unint64_t *v597;
  unint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t *v604;
  _QWORD *v605;
  uint64_t v606;
  _QWORD *v607;
  uint64_t v608;
  uint64_t v609;
  unint64_t *v610;
  unint64_t v611;
  uint64_t v612;
  uint64_t v613;
  unsigned int *v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t *v617;
  _QWORD *v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t *v625;
  uint64_t v626;
  int v627;
  int v628;
  uint64_t v629;
  unsigned int v630;
  unsigned int v631;
  uint64_t v632;
  int v633;
  uint64_t v634;
  unsigned int v635;
  uint64_t v636;
  uint64_t v637;
  int v638;
  int v639;
  int v640;
  char *v641;
  unint64_t *v642;
  unint64_t v643;
  uint64_t v644;
  char *v645;
  char *v646;
  signed int v647;
  unint64_t v648;
  char *v649;
  int v650;
  signed int *v651;
  int v652;
  _QWORD *v653;
  uint64_t v654;
  uint64_t v655;
  llvm::Type *v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  unint64_t *v661;
  unint64_t *v662;
  unint64_t v663;
  llvm::Value *v664;
  uint64_t v665;
  _QWORD *v666;
  unint64_t *v667;
  unint64_t v668;
  char v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  _QWORD *v673;
  llvm::Type *v674;
  llvm::DominatorTree *v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  _QWORD *v679;
  uint64_t ****v680;
  uint64_t ***v681;
  uint64_t **v682;
  llvm::Value *v683;
  uint64_t **v684;
  uint64_t *v685;
  llvm::PoisonValue *v686;
  _DWORD *v687;
  llvm::StoreInst *v688;
  llvm::Type *v689;
  llvm::Constant *v690;
  llvm::Type *v691;
  llvm::Value **NullValue;
  _QWORD *v693;
  unsigned __int8 *v694;
  llvm::Instruction *v695;
  uint64_t v696;
  _QWORD *v697;
  uint64_t v698;
  uint64_t v699;
  unint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  _QWORD *v704;
  void *v705;
  void *v706;
  uint64_t *v707;
  uint64_t v708;
  uint64_t *v709;
  uint64_t v710;
  unsigned int v711;
  char *v712;
  char *v713;
  uint64_t v714;
  int v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  _QWORD **v719;
  uint64_t v720;
  llvm::Value *v721;
  int v722;
  uint64_t v723;
  _QWORD *v724;
  int v725;
  int v726;
  uint64_t v727;
  _QWORD *v728;
  uint64_t v729;
  int v730;
  uint64_t v731;
  _QWORD *v732;
  int v733;
  int v734;
  uint64_t v735;
  _QWORD *v736;
  uint64_t v737;
  void *v738;
  void *v739;
  void *v740;
  int v741;
  uint64_t v742;
  _QWORD *v743;
  int v744;
  int v745;
  uint64_t v746;
  _QWORD *v747;
  uint64_t v748;
  _QWORD *v750;
  unsigned int v751;
  unsigned int v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  unint64_t v756;
  unint64_t v757;
  _QWORD *v758;
  uint64_t v759;
  uint64_t v760;
  unint64_t v761;
  unint64_t v762;
  _QWORD *v763;
  uint64_t v764;
  uint64_t v765;
  unint64_t v766;
  unint64_t v767;
  _QWORD *v768;
  uint64_t v769;
  uint64_t v770;
  int v771;
  unsigned int v772;
  int v773;
  unsigned int v774;
  uint64_t v775;
  unsigned int v776;
  unsigned int v777;
  int v778;
  unsigned int v779;
  void *v780;
  unsigned int v781;
  int v782;
  unsigned int v783;
  void *v784;
  unsigned int v785;
  int v786;
  unsigned int v787;
  void *v788;
  int v789;
  int v790;
  uint64_t v791;
  unsigned int v792;
  unsigned int v793;
  uint64_t v794;
  llvm::Instruction *v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t *v798;
  uint64_t v799;
  _DWORD *v800;
  _QWORD *v801;
  uint64_t *v802;
  uint64_t *v803;
  uint64_t v804;
  uint64_t v805;
  char v806;
  uint64_t v807;
  uint64_t *v808;
  uint64_t v809;
  _DWORD *v810;
  unint64_t v811;
  int v812;
  void *v813;
  uint64_t v814;
  uint64_t v815;
  _QWORD *v816;
  llvm::SmallPtrSetImplBase *v817;
  llvm::SmallPtrSetImplBase *v818;
  llvm::SmallPtrSetImplBase *v819;
  llvm::Value *v820;
  _QWORD *v821;
  _DWORD *v822;
  _QWORD *v823;
  uint64_t v824;
  uint64_t v825;
  void *v826;
  char *v827;
  uint64_t v828;
  unint64_t v829[3];
  _BYTE *v830;
  _BYTE *v831;
  uint64_t v832;
  int v833;
  _BYTE v834[16];
  char *v835;
  char *v836;
  uint64_t v837;
  uint64_t v838;
  _WORD v839[16];
  llvm::BasicBlock *v840;
  llvm::Instruction *v841;
  _QWORD v842[2];
  uint64_t *v843;
  char v844[8];
  void *v845;
  llvm::Instruction *v846;
  _QWORD *v847;
  void *v848;
  uint64_t v849;
  int v850;
  _BYTE v851[64];
  void *v852;
  uint64_t v853;
  _DWORD v854[8];
  void *v855;
  uint64_t v856;
  _QWORD v857[4];
  void *__base[2];
  __int128 v859;
  _OWORD v860[3];
  void *v861;
  uint64_t v862;
  void *v863;
  char *v864;
  uint64_t v865;
  void *v866[2];
  __int128 v867;
  _BYTE v868[48];
  void *p_p;
  uint64_t v870;
  void *__p;
  _BYTE *v872;
  uint64_t v873;
  void *v874[12];
  void *v875;
  _BYTE *v876;
  void *v877;
  void *v878;
  unsigned int v879;
  unsigned int v880;
  unsigned int v881;
  void *v882;
  _BYTE *v883;
  uint64_t v884;

  v884 = *MEMORY[0x1E0C80C00];
  LODWORD(v874[0]) = dword_1ED8220A4;
  if (!atomic_load(qword_1ED836B40))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B40, (void *(*)(void))sub_1C6387C7C, (void (*)(void *))sub_1C6387CC8);
  if (!*((_BYTE *)sub_1C4D9B074(qword_1ED836B40[0], v874) + 32))
    goto LABEL_10;
  v3 = dword_1ED8220A4;
  if (!atomic_load(qword_1ED836B40))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B40, (void *(*)(void))sub_1C6387C7C, (void (*)(void *))sub_1C6387CC8);
  v5 = *(_QWORD *)qword_1ED836B40[0];
  v6 = *(unsigned int *)(qword_1ED836B40[0] + 16);
  if ((_DWORD)v6)
  {
    v8 = ((_DWORD)v6 - 1) & (37 * v3);
    v7 = (int *)(v5 + (v8 << 6));
    v9 = *v7;
    if (*v7 == v3)
      goto LABEL_9;
    v789 = 1;
    while (v9 != -1)
    {
      v790 = v8 + v789++;
      v8 = v790 & (v6 - 1);
      v9 = *(_DWORD *)(v5 + ((unint64_t)v8 << 6));
      if (v9 == v3)
      {
        v7 = (int *)(v5 + (v8 << 6));
        goto LABEL_9;
      }
    }
  }
  v7 = (int *)(v5 + (v6 << 6));
LABEL_9:
  *(_QWORD *)(a1 + 2600) = *((_QWORD *)v7 + 1);
LABEL_10:
  *(_DWORD *)(a1 + 1312) = *(_QWORD *)(*(_QWORD *)a1 + 96);
  *(_QWORD *)(a1 + 40) = llvm::MemorySSA::getWalkerImpl(*(llvm::MemorySSA **)(a1 + 32));
  v804 = a1 + 72;
  v10 = (_QWORD *)sub_1C484358C(a1 + 72, 24, 3);
  v10[1] = 0xFFFFFFFD00000003;
  v10[2] = 0;
  *v10 = &off_1E8196F38;
  *(_QWORD *)(a1 + 1864) = v10;
  v11 = (_QWORD *)(a1 + 2232);
  v12 = *(unsigned int *)(a1 + 2240);
  v823 = (_QWORD *)(a1 + 2232);
  if (v12 >= *(_DWORD *)(a1 + 2244))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v11, a1 + 2248, v12 + 1, 8);
    *(_QWORD *)(*(_QWORD *)(a1 + 2232) + 8 * *(unsigned int *)(a1 + 2240)) = 0;
    LODWORD(v12) = *(_DWORD *)(a1 + 2240);
  }
  else
  {
    *(_QWORD *)(*v11 + 8 * v12) = 0;
  }
  *(_DWORD *)(a1 + 2240) = v12 + 1;
  v874[0] = *(void **)a1;
  v827 = 0;
  v828 = 0;
  v826 = 0;
  sub_1C5643D14((char **)&v826, (uint64_t)v874);
  v14 = (char *)v826;
  v13 = v827;
  if (v827 == v826)
    goto LABEL_39;
  v15 = 0;
  do
  {
    v17 = *((_QWORD *)v13 - 1);
    v13 -= 8;
    v16 = v17;
    v18 = *(_QWORD *)(a1 + 8);
    v19 = *(_QWORD *)(v18 + 24);
    v20 = *(unsigned int *)(v18 + 40);
    if ((_DWORD)v20)
    {
      LODWORD(v21) = ((v16 >> 4) ^ (v16 >> 9)) & (v20 - 1);
      v22 = (uint64_t *)(v19 + 16 * v21);
      v23 = *v22;
      if (v16 == *v22)
        goto LABEL_21;
      v24 = 1;
      while (v23 != -4096)
      {
        v25 = v21 + v24++;
        v21 = v25 & (v20 - 1);
        v23 = *(_QWORD *)(v19 + 16 * v21);
        if (v16 == v23)
        {
          v22 = (uint64_t *)(v19 + 16 * v21);
          goto LABEL_21;
        }
      }
    }
    v22 = (uint64_t *)(v19 + 16 * v20);
LABEL_21:
    if (v22 == (uint64_t *)(v19 + 16 * v20))
      v26 = 0;
    else
      v26 = (void *)v22[1];
    v874[0] = v26;
    *((_DWORD *)sub_1C6144C70(a1 + 1320, (uint64_t *)v874) + 2) = ++v15;
  }
  while (v13 != v14);
  v28 = (char *)v826;
  v27 = v827;
  if (v827 != v826)
  {
    while (1)
    {
      v30 = *((_QWORD *)v27 - 1);
      v27 -= 8;
      v29 = v30;
      v31 = *(_QWORD *)(a1 + 8);
      v32 = *(_QWORD *)(v31 + 24);
      v33 = *(unsigned int *)(v31 + 40);
      if (!(_DWORD)v33)
        goto LABEL_32;
      LODWORD(v34) = ((v29 >> 4) ^ (v29 >> 9)) & (v33 - 1);
      v35 = (uint64_t *)(v32 + 16 * v34);
      v36 = *v35;
      if (v29 != *v35)
        break;
LABEL_33:
      if (v35 == (uint64_t *)(v32 + 16 * v33))
        v39 = 0;
      else
        v39 = v35[1];
      v40 = *(unsigned int *)(v39 + 32);
      if (v40 >= 2)
      {
        v41 = *(_QWORD *)(v39 + 24);
        v874[0] = (void *)a1;
        sub_1C5BE052C(v41, (uint64_t *)(v41 + 8 * v40), v874, 126 - 2 * __clz(v40), 1);
      }
      if (v27 == v28)
        goto LABEL_39;
    }
    v37 = 1;
    while (v36 != -4096)
    {
      v38 = v34 + v37++;
      v34 = v38 & (v33 - 1);
      v36 = *(_QWORD *)(v32 + 16 * v34);
      if (v29 == v36)
      {
        v35 = (uint64_t *)(v32 + 16 * v34);
        goto LABEL_33;
      }
    }
LABEL_32:
    v35 = (uint64_t *)(v32 + 16 * v33);
    goto LABEL_33;
  }
LABEL_39:
  v809 = a1 + 8;
  __base[0] = *(void **)(*(_QWORD *)(a1 + 8) + 48);
  sub_1C4EA1748((uint64_t *)__base, (uint64_t)v874);
  v42 = v860;
  __base[0] = v860;
  v43 = v874[1];
  if (v874[1] == v874[0])
  {
    __base[1] = v860;
    v44 = v874[1];
  }
  else
  {
    v771 = (int)v874[2];
    v42 = malloc_type_malloc(8 * LODWORD(v874[2]), 0x4065EBACuLL);
    if (!v42)
    {
      if (v771)
        goto LABEL_1274;
      v42 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v42)
        goto LABEL_1274;
    }
    __base[1] = v42;
    v44 = v874[0];
    v43 = v874[1];
  }
  v45 = HIDWORD(v874[2]);
  LODWORD(v859) = v874[2];
  if (v43 == v44)
    v46 = HIDWORD(v874[2]);
  else
    v46 = v874[2];
  if (v46)
  {
    memmove(v42, v43, 8 * v46);
    v45 = HIDWORD(v874[2]);
  }
  *(_QWORD *)((char *)&v859 + 4) = __PAIR64__(v874[3], v45);
  v865 = 0;
  v863 = 0;
  v864 = 0;
  sub_1C4D6CDA0(&v863, v875, v876, 0xAAAAAAAAAAAAAAABLL * ((v876 - (_BYTE *)v875) >> 3));
  v47 = v868;
  v866[0] = v868;
  v48 = v878;
  if (v878 == v877)
  {
    v866[1] = v868;
    v49 = v878;
  }
  else
  {
    v772 = v879;
    v47 = malloc_type_malloc(8 * v879, 0x4065EBACuLL);
    if (!v47)
    {
      if (v772)
        goto LABEL_1274;
      v47 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v47)
        goto LABEL_1274;
    }
    v866[1] = v47;
    v49 = v877;
    v48 = v878;
  }
  v50 = v880;
  LODWORD(v867) = v879;
  if (v48 == v49)
    v51 = v880;
  else
    v51 = v879;
  if (v51)
  {
    memmove(v47, v48, 8 * v51);
    v50 = v880;
  }
  *(_QWORD *)((char *)&v867 + 4) = __PAIR64__(v881, v50);
  v873 = 0;
  __p = 0;
  v872 = 0;
  sub_1C4D6CDA0(&__p, v882, v883, 0xAAAAAAAAAAAAAAABLL * ((v883 - (_BYTE *)v882) >> 3));
  v822 = (_DWORD *)(a1 + 2208);
  v810 = (_DWORD *)(a1 + 1696);
  v817 = (llvm::SmallPtrSetImplBase *)(a1 + 2504);
  v803 = (uint64_t *)(a1 + 2160);
  v52 = 1;
  while (2)
  {
    if (v864 - (_BYTE *)v863 != v872 - (_BYTE *)__p)
    {
LABEL_68:
      v58 = (_QWORD *)**((_QWORD **)v864 - 3);
      v847 = v58;
      v59 = *(_QWORD *)(a1 + 32);
      v60 = *(_DWORD *)(v59 + 40);
      v61 = v52;
      if (v60)
      {
        v62 = *(_QWORD *)(v59 + 24);
        v63 = v60 - 1;
        v64 = (v60 - 1) & ((v58 >> 4) ^ (v58 >> 9));
        v65 = *(_QWORD **)(v62 + 16 * v64);
        if (v58 == v65)
        {
LABEL_73:
          v68 = v62 + 16 * v64;
          v69 = *(_QWORD *)(v68 + 8);
          v61 = v52;
          if (v69)
          {
            v835 = *(char **)(v68 + 8);
            *((_DWORD *)sub_1C504CE94((uint64_t)v822, (uint64_t *)&v835) + 2) = v52;
            v70 = *(unsigned int *)(a1 + 2240);
            if (v70 >= *(_DWORD *)(a1 + 2244))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v823, a1 + 2248, v70 + 1, 8);
              *(_QWORD *)(*(_QWORD *)(a1 + 2232) + 8 * *(unsigned int *)(a1 + 2240)) = v69;
              LODWORD(v70) = *(_DWORD *)(a1 + 2240);
            }
            else
            {
              *(_QWORD *)(*v823 + 8 * v70) = v69;
            }
            v61 = (v52 + 1);
            *(_DWORD *)(a1 + 2240) = v70 + 1;
          }
        }
        else
        {
          v66 = 1;
          while (v65 != (_QWORD *)-4096)
          {
            v67 = v64 + v66++;
            v64 = v67 & v63;
            v65 = *(_QWORD **)(v62 + 16 * v64);
            if (v58 == v65)
              goto LABEL_73;
          }
          v61 = v52;
        }
      }
      for (i = (_QWORD *)v58[6]; i != v58 + 5; i = (_QWORD *)i[1])
      {
        if (i)
          v72 = (uint64_t)(i - 3);
        else
          v72 = 0;
        if (*(_QWORD *)(v72 + 8) || !llvm::wouldInstructionBeTriviallyDead(v72, *(uint64_t **)(a1 + 16)))
        {
          if (*(_BYTE *)(v72 + 16) == 83)
          {
            v75 = sub_1C6322644((uint64_t)v810, (uint64_t *)&v847);
            sub_1C4DB3420(v75 + 1, v61);
          }
          v835 = (char *)v72;
          *((_DWORD *)sub_1C504CE94((uint64_t)v822, (uint64_t *)&v835) + 2) = v61;
          v73 = *(unsigned int *)(a1 + 2240);
          if (v73 >= *(_DWORD *)(a1 + 2244))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v823, a1 + 2248, v73 + 1, 8);
            *(_QWORD *)(*(_QWORD *)(a1 + 2232) + 8 * *(unsigned int *)(a1 + 2240)) = v72;
            v74 = *(_DWORD *)(a1 + 2240) + 1;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 2232) + 8 * v73) = v72;
            v74 = v73 + 1;
          }
          *(_DWORD *)(a1 + 2240) = v74;
          v61 = (v61 + 1);
        }
        else
        {
          v835 = (char *)v72;
          *((_DWORD *)sub_1C504CE94((uint64_t)v822, (uint64_t *)&v835) + 2) = 0;
          sub_1C4774094(v817, v72);
        }
      }
      v835 = (char *)v58;
      v836 = (char *)(v52 | (unint64_t)(v61 << 32));
      sub_1C6322878((uint64_t)&v847, (uint64_t)v803, &v835, &v836);
      sub_1C4E1FD70((llvm::SmallPtrSetImplBase *)__base);
      v52 = v61;
      continue;
    }
    break;
  }
  if (v863 != v864)
  {
    v53 = (char *)__p + 8;
    v54 = (char *)v863 + 8;
    do
    {
      v55 = v54 - 8;
      if (*((_QWORD *)v54 - 1) != *((_QWORD *)v53 - 1))
        goto LABEL_68;
      v56 = v53[8];
      if (v54[8])
        v57 = v56 == 0;
      else
        v57 = 1;
      if (v57)
      {
        if ((v54[8] == 0) == (v56 != 0))
          goto LABEL_68;
      }
      else if (*(_QWORD *)v54 != *(_QWORD *)v53)
      {
        goto LABEL_68;
      }
      v53 += 24;
      v54 += 24;
    }
    while (v55 + 24 != v864);
  }
  if (__p)
  {
    v872 = __p;
    operator delete(__p);
  }
  if (v866[1] != v866[0])
    free(v866[1]);
  if (v863)
  {
    v864 = (char *)v863;
    operator delete(v863);
  }
  if (__base[1] != __base[0])
    free(__base[1]);
  if (v882)
  {
    v883 = v882;
    operator delete(v882);
  }
  if (v878 != v877)
    free(v878);
  if (v875)
  {
    v876 = v875;
    operator delete(v875);
  }
  if (v874[1] != v874[0])
    free(v874[1]);
  v76 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 1376) = 0;
  v77 = sub_1C5BE17A0(a1, 0, 0);
  *(_QWORD *)(a1 + 1344) = v77;
  v78 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v77 + 40) = *(_QWORD *)(v78 + 96);
  v79 = *(_QWORD *)(v78 + 96);
  v80 = sub_1C5BE17A0(a1, 0, 0);
  *(_QWORD *)(v80 + 40) = v79;
  v874[0] = *(void **)(*(_QWORD *)(a1 + 32) + 96);
  v816 = (_QWORD *)(a1 + 1768);
  *sub_1C5BE190C(a1 + 1768, (uint64_t *)v874) = v80;
  sub_1C61907A0(v809, (uint64_t)v874);
  v81 = v860;
  __base[0] = v860;
  v82 = v874[1];
  if (v874[1] == v874[0])
  {
    __base[1] = v860;
    v83 = v874[1];
    goto LABEL_113;
  }
  v773 = (int)v874[2];
  v81 = malloc_type_malloc(8 * LODWORD(v874[2]), 0x4065EBACuLL);
  if (!v81 && (v773 || (v81 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_1274:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  __base[1] = v81;
  v83 = v874[0];
  v82 = v874[1];
LABEL_113:
  v84 = HIDWORD(v874[2]);
  LODWORD(v859) = v874[2];
  if (v82 == v83)
    v85 = HIDWORD(v874[2]);
  else
    v85 = v874[2];
  if (v85)
  {
    memmove(v81, v82, 8 * v85);
    v84 = HIDWORD(v874[2]);
  }
  *(_QWORD *)((char *)&v859 + 4) = __PAIR64__(v874[3], v84);
  v865 = 0;
  v863 = 0;
  v864 = 0;
  sub_1C4D6CDA0(&v863, v875, v876, 0xAAAAAAAAAAAAAAABLL * ((v876 - (_BYTE *)v875) >> 3));
  v86 = v868;
  v866[0] = v868;
  v87 = v878;
  if (v878 == v877)
  {
    v866[1] = v868;
    v88 = v878;
  }
  else
  {
    v774 = v879;
    v86 = malloc_type_malloc(8 * v879, 0x4065EBACuLL);
    if (!v86)
    {
      if (v774)
        goto LABEL_1274;
      v86 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v86)
        goto LABEL_1274;
    }
    v866[1] = v86;
    v88 = v877;
    v87 = v878;
  }
  v89 = v880;
  LODWORD(v867) = v879;
  if (v87 == v88)
    v90 = v880;
  else
    v90 = v879;
  if (v90)
  {
    memmove(v86, v87, 8 * v90);
    v89 = v880;
  }
  *(_QWORD *)((char *)&v867 + 4) = __PAIR64__(v881, v89);
  v873 = 0;
  __p = 0;
  v872 = 0;
  sub_1C4D6CDA0(&__p, v882, v883, 0xAAAAAAAAAAAAAAABLL * ((v883 - (_BYTE *)v882) >> 3));
  v815 = a1 + 1792;
  v818 = (llvm::SmallPtrSetImplBase *)(a1 + 1432);
  v821 = (_QWORD *)(a1 + 1384);
LABEL_126:
  if (v864 - (_BYTE *)v863 != v872 - (_BYTE *)__p)
  {
LABEL_140:
    v96 = **((_QWORD **)v864 - 3);
    v97 = *(_QWORD *)(a1 + 32);
    v98 = *(_QWORD *)(v97 + 72);
    v99 = *(unsigned int *)(v97 + 88);
    if ((_DWORD)v99)
    {
      LODWORD(v100) = ((v96 >> 4) ^ (v96 >> 9)) & (v99 - 1);
      v101 = (uint64_t *)(v98 + 16 * v100);
      v102 = *v101;
      if (v96 != *v101)
      {
        v103 = 1;
        do
        {
          if (v102 == -4096)
            goto LABEL_146;
          v104 = v100 + v103++;
          v100 = v104 & (v99 - 1);
          v102 = *(_QWORD *)(v98 + 16 * v100);
        }
        while (v96 != v102);
        v101 = (uint64_t *)(v98 + 16 * v100);
      }
    }
    else
    {
LABEL_146:
      v101 = (uint64_t *)(v98 + 16 * v99);
    }
    if (v101 != (uint64_t *)(v98 + 16 * v99))
    {
      v105 = v101[1];
      if (v105)
      {
        for (j = *(_QWORD *)(v105 + 8); j != v105; j = *(_QWORD *)(j + 8))
        {
          if (j)
            v107 = j - 48;
          else
            v107 = 0;
          v108 = *(_QWORD *)(a1 + 1344);
          v847 = (_QWORD *)v107;
          *sub_1C5BE190C((uint64_t)v816, (uint64_t *)&v847) = v108;
          if (j && *(_BYTE *)(v107 + 16) == 26)
          {
            if (*(_BYTE *)(*(_QWORD *)(v107 + 72) + 16) == 61)
              ++*(_DWORD *)(*(_QWORD *)(a1 + 1344) + 168);
          }
          else
          {
            sub_1C4774094((llvm::SmallPtrSetImplBase *)(*(_QWORD *)(a1 + 1344) + 120), v107);
            v847 = (_QWORD *)v107;
            LODWORD(v848) = 1;
            v835 = 0;
            if ((sub_1C49F21C0(*(_QWORD *)(a1 + 1792), *(_DWORD *)(a1 + 1808), v107, &v835) & 1) == 0)
            {
              v109 = sub_1C5BE19E4(v815, (uint64_t *)&v847, v835);
              *v109 = v107;
              *((_DWORD *)v109 + 2) = 1;
            }
          }
        }
      }
    }
    v110 = v96 + 40;
    for (k = *(_QWORD *)(v96 + 48); ; k = *(_QWORD *)(k + 8))
    {
      if (k == v110)
      {
        sub_1C4E1FD70((llvm::SmallPtrSetImplBase *)__base);
        goto LABEL_126;
      }
      if (k)
        v112 = k - 24;
      else
        v112 = 0;
      v113 = *(unsigned __int8 *)(v112 + 16);
      if (v113 == 83)
      {
        v114 = *(_QWORD *)(v112 + 8);
        if (!v114)
          goto LABEL_191;
        do
        {
          v115 = *(_QWORD *)(v114 + 24);
          v116 = *(unsigned __int8 *)(v115 + 16);
          if (v115)
            v117 = v116 >= 0x1C;
          else
            v117 = 0;
          if (v117)
          {
            v118 = *(_DWORD *)(a1 + 2224);
            if (v118)
            {
              v119 = *(_QWORD *)(a1 + 2208);
              v120 = v118 - 1;
              v121 = (v118 - 1) & ((v115 >> 4) ^ (v115 >> 9));
              v122 = *(_QWORD *)(v119 + 16 * v121);
              if (v115 == v122)
              {
LABEL_178:
                if (*(_DWORD *)(v119 + 16 * v121 + 8))
                  v125 = byte_1ED8221F8 == 0;
                else
                  v125 = 1;
                if (!v125 && (v116 == 60 || v116 == 85 || v116 - 41 < 0x12 || v116 - 81 <= 1))
                  sub_1C4774094(v818, v115);
              }
              else
              {
                v123 = 1;
                while (v122 != -4096)
                {
                  v124 = v121 + v123++;
                  v121 = v124 & v120;
                  v122 = *(_QWORD *)(v119 + 16 * v121);
                  if (v115 == v122)
                    goto LABEL_178;
                }
              }
            }
          }
          v114 = *(_QWORD *)(v114 + 8);
        }
        while (v114);
        v113 = *(unsigned __int8 *)(v112 + 16);
      }
      if ((v113 - 29) > 0xA || *(_BYTE *)(*(_QWORD *)v112 + 8) != 7)
      {
LABEL_191:
        sub_1C4774094((llvm::SmallPtrSetImplBase *)(*(_QWORD *)(a1 + 1344) + 56), v112);
        v126 = *(_QWORD *)(a1 + 1344);
        v847 = (_QWORD *)v112;
        *sub_1C5306090((uint64_t)v821, (uint64_t *)&v847) = v126;
        continue;
      }
    }
  }
  if (v863 != v864)
  {
    v91 = (char *)__p + 8;
    v92 = (char *)v863 + 8;
    do
    {
      v93 = v92 - 8;
      if (*((_QWORD *)v92 - 1) != *((_QWORD *)v91 - 1))
        goto LABEL_140;
      v94 = v91[8];
      if (v92[8])
        v95 = v94 == 0;
      else
        v95 = 1;
      if (v95)
      {
        if ((v92[8] == 0) == (v94 != 0))
          goto LABEL_140;
      }
      else if (*(_QWORD *)v92 != *(_QWORD *)v91)
      {
        goto LABEL_140;
      }
      v91 += 24;
      v92 += 24;
    }
    while (v93 + 24 != v864);
  }
  if (__p)
  {
    v872 = __p;
    operator delete(__p);
  }
  if (v866[1] != v866[0])
    free(v866[1]);
  if (v863)
  {
    v864 = (char *)v863;
    operator delete(v863);
  }
  if (__base[1] != __base[0])
    free(__base[1]);
  if (v882)
  {
    v883 = v882;
    operator delete(v882);
  }
  if (v878 != v877)
    free(v878);
  if (v875)
  {
    v876 = v875;
    operator delete(v875);
  }
  if (v874[1] != v874[0])
    free(v874[1]);
  if ((*(_WORD *)(v76 + 18) & 1) == 0)
  {
    v127 = *(char **)(v76 + 88);
    goto LABEL_212;
  }
  llvm::Function::BuildLazyArguments((llvm::Function *)v76);
  v127 = *(char **)(v76 + 88);
  if ((*(_WORD *)(v76 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)v76);
    v128 = *(char **)(v76 + 88);
  }
  else
  {
LABEL_212:
    v128 = v127;
  }
  v129 = &v128[40 * *(_QWORD *)(v76 + 96)];
  while (v127 != v129)
  {
    __base[0] = v127;
    v130 = sub_1C5BE17A0(a1, (uint64_t)v127, 0);
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(v130 + 56), (uint64_t)v127);
    v874[0] = 0;
    v131 = sub_1C49F21C0(*(_QWORD *)(a1 + 1384), *(_DWORD *)(a1 + 1400), (uint64_t)v127, v874);
    v132 = v874[0];
    if ((v131 & 1) == 0)
    {
      v132 = sub_1C5305ED0((uint64_t)v821, (uint64_t *)__base, (_QWORD *)v874[0]);
      *v132 = v127;
      v132[1] = 0;
    }
    v132[1] = v130;
    v127 += 40;
  }
  v133 = *(unsigned int *)(a1 + 2096);
  if ((*(_DWORD *)(a1 + 2152) & 0x3F) != 0)
  {
    v775 = *(_QWORD *)(a1 + 2088) + 8 * v133;
    *(_QWORD *)(v775 - 8) &= ~(-1 << (*(_DWORD *)(a1 + 2152) & 0x3F));
  }
  v134 = v133;
  v135 = (_QWORD *)(a1 + 2088);
  *(_DWORD *)(a1 + 2152) = v52;
  v136 = v52 + 63;
  if ((_DWORD)v133 == (v52 + 63) >> 6)
    goto LABEL_1262;
  v137 = v136 >> 6;
  if (v133 > v137)
  {
    *(_DWORD *)(a1 + 2096) = v137;
    v134 = v136 >> 6;
LABEL_1262:
    LOBYTE(v139) = v52;
    goto LABEL_227;
  }
  v138 = v133;
  if (v137 > *(_DWORD *)(a1 + 2100))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 2088, a1 + 2104, v137, 8);
    v138 = *(unsigned int *)(a1 + 2096);
    v134 = *(_DWORD *)(a1 + 2096);
  }
  if (v137 != v133)
    bzero((void *)(*v135 + 8 * v138), 8 * (v137 - v133));
  v134 += v137 - v133;
  *(_DWORD *)(a1 + 2096) = v134;
  v139 = *(_DWORD *)(a1 + 2152);
LABEL_227:
  v140 = v139 & 0x3F;
  if (v140)
    *(_QWORD *)(*v135 + 8 * v134 - 8) &= ~(-1 << v140);
  v801 = (_QWORD *)(a1 + 1840);
  if ((_DWORD)v52)
  {
    v141 = (4 * (int)v52 / 3u + 1) | ((unint64_t)(4 * (int)v52 / 3u + 1) >> 1);
    v142 = v141 | (v141 >> 2) | ((v141 | (v141 >> 2)) >> 4);
    v143 = ((v142 | (v142 >> 8)) >> 16) | v142 | (v142 >> 8);
    v800 = (_DWORD *)(a1 + 1856);
    if (*(_DWORD *)(a1 + 1856) <= v143)
      sub_1C5BE1BD0((uint64_t)v801, v143 + 1);
  }
  else
  {
    v800 = (_DWORD *)(a1 + 1856);
  }
  v144 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  if (v144)
    v145 = (void *)(v144 - 24);
  else
    v145 = 0;
  v874[0] = v145;
  __base[0] = 0;
  v146 = sub_1C61252B8(v803, v874, __base);
  v147 = 0;
  if (v146)
    v147 = *((_QWORD *)__base[0] + 1);
  v148 = HIDWORD(v147);
  if ((_DWORD)v147 != HIDWORD(v147))
  {
    v149 = v147 >> 6;
    if (v147 >> 6 == HIDWORD(v147) >> 6)
    {
      v150 = (1 << SBYTE4(v147)) + (-1 << v147);
      v151 = (_QWORD *)(*v135 + 8 * v149);
      goto LABEL_241;
    }
    v750 = (_QWORD *)*v135;
    *(_QWORD *)(*v135 + 8 * v149) |= -1 << v147;
    v751 = (v147 + 63) & 0xFFFFFFC0;
    if (v751 + 64 <= HIDWORD(v147))
    {
      do
      {
        v750[v751 >> 6] = -1;
        v752 = v751 + 64;
        v776 = v751 + 128;
        v751 += 64;
      }
      while (v776 <= v148);
    }
    else
    {
      v752 = (v147 + 63) & 0xFFFFFFC0;
    }
    if (v752 < v148)
    {
      v150 = ~(-1 << v148);
      v151 = &v750[v752 >> 6];
LABEL_241:
      *v151 |= v150;
    }
  }
  v152 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  if (v152)
    v153 = v152 - 24;
  else
    v153 = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 1992), v153);
  v154 = sub_1C476B7EC(a1 + 2088);
  v814 = a1 + 1992;
  if (v154 != -1)
  {
    v155 = sub_1C5BE1F10(a1, *(_QWORD *)(*(_QWORD *)(a1 + 2232) + 8 * v154));
    v156 = *(unsigned int *)(a1 + 2096);
    if ((_DWORD)v156)
    {
      v162 = (void *)v155;
      v163 = *(_QWORD **)(a1 + 2088);
      v164 = &v163[v156];
      v798 = (uint64_t *)(a1 + 1672);
      v797 = a1 + 1552;
      while (1)
      {
        while (!*v163)
        {
          if (++v163 == v164)
            goto LABEL_247;
        }
        v165 = sub_1C476B7EC(a1 + 2088);
LABEL_255:
        v166 = v165;
        if (!v165)
        {
          *(_QWORD *)*v135 &= ~1uLL;
          goto LABEL_645;
        }
        if (v165 != -1)
          break;
        v163 = *(_QWORD **)(a1 + 2088);
        v412 = *(unsigned int *)(a1 + 2096);
        v164 = &v163[v412];
        if (!(_DWORD)v412)
          goto LABEL_247;
      }
      v167 = *(_QWORD *)(*(_QWORD *)(a1 + 2232) + 8 * v165);
      v168 = sub_1C5BE1F10(a1, v167);
      if ((void *)v168 != v162)
      {
        v209 = (void *)v168;
        v210 = v166;
        v211 = sub_1C477672C(v814, v168);
        v212 = *(_QWORD *)(a1 + 2000);
        v213 = 2008;
        if (v212 == *(_QWORD *)(a1 + 1992))
          v213 = 2012;
        v214 = *(unsigned int *)(a1 + v213);
        v874[0] = v209;
        __base[0] = 0;
        v215 = sub_1C61252B8(v803, v874, __base);
        v216 = 0;
        if (v215)
          v216 = *((_QWORD *)__base[0] + 1);
        if (v211 == (_QWORD *)(v212 + 8 * v214))
        {
          v217 = HIDWORD(v216);
          LODWORD(v166) = v210;
          if ((_DWORD)v216 == HIDWORD(v216))
          {
            v162 = v209;
            goto LABEL_645;
          }
          v218 = v216 >> 6;
          if (v216 >> 6 == HIDWORD(v216) >> 6)
          {
            v219 = ~((1 << SBYTE4(v216)) + (-1 << v216));
            v220 = (_QWORD *)(*v135 + 8 * v218);
            goto LABEL_331;
          }
          v359 = (_QWORD *)*v135;
          *(_QWORD *)(*v135 + 8 * v218) &= ~(-1 << v216);
          v360 = (v216 + 63) & 0xFFFFFFC0;
          if (v360 + 64 <= v217)
          {
            do
            {
              v359[v360 >> 6] = 0;
              v361 = v360 + 64;
              v411 = v360 + 128;
              v360 += 64;
            }
            while (v411 <= v217);
          }
          else
          {
            v361 = v360;
          }
          if (v361 < v217)
          {
            v219 = -1 << v217;
            v220 = &v359[v361 >> 6];
LABEL_331:
            *v220 &= v219;
          }
          v162 = v209;
          goto LABEL_645;
        }
        v162 = v209;
        v166 = v210;
      }
      *(_QWORD *)(*v135 + ((v166 >> 3) & 0x1FFFFFF8)) &= ~(1 << v166);
      v169 = *(unsigned __int8 *)(v167 + 16);
      if (v167)
        v170 = v169 == 27;
      else
        v170 = 0;
      if (v170)
      {
        v835 = (char *)v167;
        v855 = *(void **)(v167 + 64);
        v174 = *(_DWORD *)(v167 + 20);
        v175 = v166;
        if ((v174 & 0x40000000) != 0)
        {
          v177 = *(char **)(v167 - 8);
          v176 = v174 & 0x7FFFFFF;
        }
        else
        {
          v176 = v174 & 0x7FFFFFF;
          v177 = (char *)(v167 - 32 * v176);
        }
        v194 = &v177[32 * v176];
        v874[0] = v177;
        v874[1] = v194;
        v874[2] = &v835;
        v874[3] = (void *)a1;
        v874[4] = &v855;
        sub_1C5BE229C((uint64_t)v874);
        __base[0] = v194;
        __base[1] = v194;
        *(_QWORD *)&v859 = &v835;
        *((_QWORD *)&v859 + 1) = a1;
        *(_QWORD *)&v860[0] = &v855;
        sub_1C5BE229C((uint64_t)__base);
        v195 = (char *)v874[0];
        *(_OWORD *)v866 = *(_OWORD *)&v874[1];
        v867 = *(_OWORD *)&v874[3];
        v196 = __base[0];
        if (v874[0] == __base[0])
        {
          if (sub_1C5BE1F80(a1, (uint64_t)v835, *(_QWORD *)(a1 + 1344)))
            goto LABEL_319;
        }
        else
        {
          *(_OWORD *)&v874[1] = *(_OWORD *)v866;
          *(_OWORD *)&v874[3] = v867;
          v874[5] = (void *)a1;
          v197 = *(_QWORD *)v874[0];
          __base[0] = 0;
          sub_1C49F21C0(*(_QWORD *)(a1 + 1768), *(_DWORD *)(a1 + 1784), v197, __base);
          v198 = *(_QWORD *)(*((_QWORD *)__base[0] + 1) + 40);
          v874[0] = v195 + 32;
          sub_1C5BE229C((uint64_t)v874);
          *(_OWORD *)__base = *(_OWORD *)v874;
          v859 = *(_OWORD *)&v874[2];
          v860[0] = *(_OWORD *)&v874[4];
          while (1)
          {
            v199 = (char *)__base[0];
            if (__base[0] == v196)
              break;
            v200 = *(_QWORD *)__base[0];
            v847 = 0;
            sub_1C49F21C0(*(_QWORD *)(*((_QWORD *)&v860[0] + 1) + 1768), *(_DWORD *)(*((_QWORD *)&v860[0] + 1) + 1784), v200, &v847);
            if (v198 != *(_QWORD *)(v847[1] + 40))
            {
              v202 = sub_1C5BE2234(a1, (uint64_t)v835);
              v203 = 3;
              goto LABEL_312;
            }
            __base[0] = v199 + 32;
            sub_1C5BE229C((uint64_t)__base);
          }
          v847 = 0;
          v201 = sub_1C49F21C0(*(_QWORD *)(a1 + 1768), *(_DWORD *)(a1 + 1784), v198, &v847);
          v202 = 0;
          if (v201)
            v202 = v847[1];
          v203 = 2;
LABEL_312:
          v205 = v835;
          v847 = 0;
          if (sub_1C49F21C0(*(_QWORD *)(a1 + 1792), *(_DWORD *)(a1 + 1808), (uint64_t)v835, &v847))
            v206 = *((_DWORD *)v847 + 2);
          else
            v206 = 0;
          v847 = 0;
          v207 = sub_1C49F21C0(*(_QWORD *)(a1 + 1792), *(_DWORD *)(a1 + 1808), (uint64_t)v835, &v847);
          v208 = v847;
          if ((v207 & 1) == 0)
          {
            v208 = sub_1C5BE19E4(v815, (uint64_t *)&v835, v847);
            *v208 = v835;
            *((_DWORD *)v208 + 2) = 0;
            v205 = v835;
          }
          *((_DWORD *)v208 + 2) = v203;
          if ((sub_1C5BE1F80(a1, (uint64_t)v205, v202) & 1) != 0 || v206 != v203)
LABEL_319:
            sub_1C5BE20B0(a1, (uint64_t)v835);
        }
        LODWORD(v166) = v175;
        goto LABEL_645;
      }
      if (v169 <= 0x1B)
        v171 = 0;
      else
        v171 = v167;
      v172 = *(unsigned __int8 *)(v171 + 16);
      if ((v172 - 29) < 0xB)
      {
        if (*(_BYTE *)(*(_QWORD *)v171 + 8) != 7)
        {
          v173 = sub_1C484358C(v804, 32, 3);
          *(_DWORD *)(v173 + 8) = 4;
          *(_QWORD *)v173 = &off_1E8196FF8;
          *(_QWORD *)(v173 + 16) = 0;
          *(_QWORD *)(v173 + 24) = v171;
          *(_DWORD *)(v173 + 12) = *(unsigned __int8 *)(v171 + 16) - 28;
          sub_1C5BE3E10(a1, v171, v173);
          v172 = *(unsigned __int8 *)(v171 + 16);
        }
        __asm { BR              X10 }
      }
      v830 = v834;
      v831 = v834;
      v832 = 2;
      v833 = 0;
      sub_1C5BE2870(v829, a1, v171);
      v178 = v829[0];
      sub_1C5BE3D90((_QWORD *)a1, (uint64_t)v829, v171);
      if (!v178)
      {
        v178 = sub_1C484358C(v804, 32, 3);
        *(_DWORD *)(v178 + 8) = 4;
        *(_QWORD *)v178 = &off_1E8196FF8;
        *(_QWORD *)(v178 + 16) = 0;
        *(_QWORD *)(v178 + 24) = v171;
        *(_DWORD *)(v178 + 12) = *(unsigned __int8 *)(v171 + 16) - 28;
        goto LABEL_361;
      }
      v813 = v162;
      if ((*(_DWORD *)(v178 + 8) - 1) < 2)
        goto LABEL_310;
      v179 = sub_1C477672C((uint64_t)v818, v171);
      v180 = *(_QWORD *)(a1 + 1440);
      v181 = 1448;
      if (v180 == *(_QWORD *)(a1 + 1432))
        v181 = 1452;
      if (v179 == (_QWORD *)(v180 + 8 * *(unsigned int *)(a1 + v181)))
      {
LABEL_310:
        v204 = v178;
        goto LABEL_359;
      }
      if (!byte_1ED8221F8)
        goto LABEL_363;
      v182 = *(unsigned __int8 *)(v171 + 16);
      if (v182 != 60)
      {
        v183 = v182 != 85 && (v182 - 41) >= 0x12;
        v184 = v183 && (v182 - 81) > 1;
        if (v184)
          goto LABEL_363;
      }
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v830, v171);
      if (!v185 || !sub_1C5BE70C8(a1, v171))
        goto LABEL_363;
      __base[0] = v860;
      __base[1] = v860;
      *(_QWORD *)&v859 = 8;
      DWORD2(v859) = 0;
      v186 = sub_1C5BE26EC(a1, v171);
      v187 = v186;
      if (v186)
      {
        v188 = *(_BYTE *)(v186 + 16) == 25 ? v186 : 0;
        v189 = (uint64_t *)(v188 ? v188 - 32 : v186 - 64);
        v190 = *v189;
        if (*(_BYTE *)(v190 + 16) != 27 && *(_QWORD *)(v190 + 64) == *(_QWORD *)(v171 + 40))
        {
          v204 = 0;
          goto LABEL_356;
        }
      }
      v874[0] = &v874[4];
      v874[1] = &v874[4];
      v874[2] = (void *)16;
      LODWORD(v874[3]) = 0;
      v191 = *(_DWORD *)(v171 + 20);
      if ((v191 & 0x40000000) != 0)
      {
        v193 = *(char **)(v171 - 8);
        v192 = v191 & 0x7FFFFFF;
      }
      else
      {
        v192 = v191 & 0x7FFFFFF;
        v193 = (char *)(v171 - 32 * v192);
      }
      v852 = v854;
      v853 = 0x400000000;
      sub_1C5BC269C((uint64_t)&v852, v193, &v193[32 * v192]);
      if (!(_DWORD)v853)
      {
        v204 = 0;
        goto LABEL_352;
      }
      v807 = v187;
      v811 = v178;
      v812 = v166;
      v221 = 0;
      v222 = 0;
      v223 = (uint64_t *)v852;
      v224 = 8 * v853;
      do
      {
        v225 = *v223;
        if (*(_BYTE *)(*v223 + 16) == 83
          || (v866[0] = 0, (sub_1C6144BDC(*(_QWORD *)(a1 + 1576), *(_DWORD *)(a1 + 1592), v225, v866) & 1) != 0)
          && (v225 = *((_QWORD *)v866[0] + 1)) != 0)
        {
          v226 = sub_1C5BE1F10(a1, v225);
          if (v221)
          {
            if (v221 != v226)
              goto LABEL_350;
          }
          else
          {
            v221 = v226;
          }
          if ((*(_DWORD *)(v225 + 20) & 0x7FFFFFF) == 1)
            v222 = 0;
          else
            v222 = v225;
        }
        ++v223;
        v224 -= 8;
      }
      while (v224);
      if (!v222)
      {
LABEL_350:
        v204 = 0;
        LODWORD(v166) = v812;
        v178 = v811;
        goto LABEL_352;
      }
      v866[0] = &v867;
      v866[1] = (void *)0x400000000;
      v847 = v851;
      v848 = v851;
      v849 = 4;
      v850 = 0;
      v840 = 0;
      v796 = v222;
      v840 = (llvm::BasicBlock *)sub_1C5BE1F10(a1, v222);
      v236 = sub_1C6322644((uint64_t)v810, (uint64_t *)&v840);
      v237 = *(_DWORD *)(a1 + 2224);
      v238 = v171 >> 4;
      if (v237)
      {
        v239 = *(_QWORD *)(a1 + 2208);
        v240 = v237 - 1;
        v241 = (v237 - 1) & (v238 ^ (v171 >> 9));
        v242 = *(_QWORD *)(v239 + 16 * v241);
        if (v171 == v242)
        {
          v244 = v807;
LABEL_386:
          v246 = *(_DWORD *)(v239 + 16 * v241 + 8);
        }
        else
        {
          v243 = 1;
          v244 = v807;
          while (v242 != -4096)
          {
            v245 = v241 + v243++;
            v241 = v245 & v240;
            v242 = *(_QWORD *)(v239 + 16 * v241);
            if (v171 == v242)
              goto LABEL_386;
          }
          v246 = 0;
        }
      }
      else
      {
        v246 = 0;
        v244 = v807;
      }
      sub_1C5202668(v236 + 1, v246);
      v247 = v222;
      v248 = *(_DWORD *)(v222 + 20);
      v249 = v248 & 0x7FFFFFF;
      v793 = v171 >> 4;
      if ((v248 & 0x7FFFFFF) == 0)
      {
LABEL_556:
        if (v848 == v847)
          v345 = (uint64_t *)((char *)&v849 + 4);
        else
          v345 = &v849;
        v346 = *(unsigned int *)v345;
        if ((_DWORD)v346)
        {
          v347 = 8 * v346;
          v348 = (uint64_t *)v848;
          while ((unint64_t)*v348 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v348;
            v347 -= 8;
            if (!v347)
              goto LABEL_571;
          }
        }
        else
        {
          v348 = (uint64_t *)v848;
        }
        v349 = (unint64_t *)((char *)v848 + 8 * v346);
        if (v348 != (uint64_t *)v349)
        {
          v350 = *v348;
LABEL_567:
          sub_1C5BE7D5C((_QWORD *)a1, v350, v171);
          v351 = (unint64_t *)(v348 + 1);
          while (v351 != v349)
          {
            v352 = *v351++;
            v350 = v352;
            if (v352 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v348 = (uint64_t *)(v351 - 1);
              goto LABEL_567;
            }
          }
        }
LABEL_571:
        v835 = (char *)a1;
        v353 = 126 - 2 * __clz(LODWORD(v866[1]));
        if (LODWORD(v866[1]))
          v354 = v353;
        else
          v354 = 0;
        sub_1C5BE5714((uint64_t)v866[0], (uint64_t *)v866[0] + 2 * LODWORD(v866[1]), &v835, v354, 1);
        v355 = v840;
        v204 = sub_1C5BE499C(a1, (_QWORD **)v866[0], LODWORD(v866[1]), (llvm::UndefValue **)v171, (uint64_t)v840);
        if ((*(_DWORD *)(v204 + 8) - 1) < 2)
        {
          if (LODWORD(v866[1]))
          {
            v356 = (uint64_t *)v866[0];
            v357 = 16 * LODWORD(v866[1]);
            do
            {
              v358 = *v356;
              v356 += 2;
              sub_1C5BE7D5C((_QWORD *)a1, v358, v171);
              v357 -= 16;
            }
            while (v357);
          }
          goto LABEL_578;
        }
        v835 = 0;
        if ((sub_1C6144BDC(*(_QWORD *)(a1 + 1576), *(_DWORD *)(a1 + 1592), v171, &v835) & 1) != 0
          && (v367 = *((_QWORD *)v835 + 1)) != 0)
        {
          v835 = (char *)*((_QWORD *)v835 + 1);
          sub_1C6180A54(v797, (uint64_t *)&v835)[1] = v355;
          if (LODWORD(v866[1]))
          {
            v395 = v367;
            v396 = 0;
            v397 = (uint64_t *)v866[0];
            v808 = (uint64_t *)((char *)v866[0] + 16 * LODWORD(v866[1]));
            do
            {
              v398 = v397[1];
              v399 = v396;
              sub_1C6125834(v395, v396, *v397);
              v400 = *(_DWORD *)(v395 + 20);
              if ((v400 & 0x40000000) != 0)
                v401 = *(_QWORD *)(v395 - 8);
              else
                v401 = v395 - 32 * (v400 & 0x7FFFFFF);
              *(_QWORD *)(v401 + 32 * *(unsigned int *)(v395 + 60) + 8 * v399) = v398;
              v396 = v399 + 1;
              v397 += 2;
            }
            while (v397 != v808);
          }
        }
        else
        {
          v368 = *(llvm::UndefValue **)v171;
          v369 = *(_DWORD *)(v796 + 20) & 0x7FFFFFF;
          v835 = "phiofops";
          v839[0] = 259;
          v370 = operator new(0x48uLL);
          v370[1] = v368;
          v371 = (char *)(v370 + 1);
          *v370 = 0;
          v370[2] = 0;
          v370[3] = 0x4000000000000053;
          *((_OWORD *)v370 + 2) = 0u;
          *((_OWORD *)v370 + 3) = 0u;
          *((_DWORD *)v370 + 16) = 0;
          *((_DWORD *)v370 + 17) = v369;
          v372 = v370;
          llvm::Value::setName((uint64_t ***)v370 + 1, (uint64_t)&v835);
          v373 = *((unsigned int *)v372 + 17);
          v374 = operator new(40 * v373);
          *v372 = v374;
          if ((_DWORD)v373)
          {
            v375 = &v374[4 * v373];
            do
            {
              *v374 = 0;
              v374[1] = 0;
              v374[2] = 0;
              v374[3] = v371;
              v374 += 4;
            }
            while (v374 != v375);
          }
          v376 = *(_DWORD *)(a1 + 2224);
          if (!v376)
            goto LABEL_616;
          v377 = *(_QWORD *)(a1 + 2208);
          v378 = v376 - 1;
          v379 = (v376 - 1) & (v793 ^ (v171 >> 9));
          v380 = *(_QWORD *)(v377 + 16 * v379);
          if (v171 == v380)
          {
LABEL_608:
            v383 = *(_DWORD *)(v377 + 16 * v379 + 8);
          }
          else
          {
            v381 = 1;
            while (v380 != -4096)
            {
              v382 = v379 + v381++;
              v379 = v382 & v378;
              v380 = *(_QWORD *)(v377 + 16 * v379);
              if (v171 == v380)
                goto LABEL_608;
            }
LABEL_616:
            v383 = 0;
          }
          v835 = v371;
          *((_DWORD *)sub_1C504CE94((uint64_t)v822, (uint64_t *)&v835) + 2) = v383;
          v855 = v371;
          sub_1C627F8FC((uint64_t)v798, &v855, (uint64_t)&v835);
          v835 = v371;
          sub_1C6180A54(v797, (uint64_t *)&v835)[1] = v355;
          v835 = (char *)v171;
          sub_1C6180A54(a1 + 1576, (uint64_t *)&v835)[1] = v371;
          for (m = *(_QWORD *)(v171 + 8); m; m = *(_QWORD *)(m + 8))
          {
            v389 = *(_QWORD *)(m + 24);
            if (v389)
              v390 = *(unsigned __int8 *)(v389 + 16) >= 0x1Cu;
            else
              v390 = 0;
            if (v390)
              sub_1C4774094(v818, v389);
          }
          if (LODWORD(v866[1]))
          {
            v391 = (uint64_t *)v866[0];
            v392 = (uint64_t *)((char *)v866[0] + 16 * LODWORD(v866[1]));
            do
            {
              v393 = *v391;
              v394 = v391[1];
              v391 += 2;
              sub_1C477667C((llvm::PHINode *)v371, v393, v394);
            }
            while (v391 != v392);
          }
        }
        v402 = sub_1C6322644((uint64_t)v810, (uint64_t *)&v840);
        v403 = *(_DWORD *)(a1 + 2224);
        if (v403)
        {
          v404 = *(_QWORD *)(a1 + 2208);
          v405 = v403 - 1;
          v406 = (v403 - 1) & (v793 ^ (v171 >> 9));
          v407 = *(_QWORD *)(v404 + 16 * v406);
          LODWORD(v166) = v812;
          v178 = v811;
          if (v171 == v407)
          {
LABEL_642:
            v410 = *(_DWORD *)(v404 + 16 * v406 + 8);
          }
          else
          {
            v408 = 1;
            while (v407 != -4096)
            {
              v409 = v406 + v408++;
              v406 = v409 & v405;
              v407 = *(_QWORD *)(v404 + 16 * v406);
              if (v171 == v407)
                goto LABEL_642;
            }
            v410 = 0;
          }
        }
        else
        {
          v410 = 0;
          LODWORD(v166) = v812;
          v178 = v811;
        }
        sub_1C4DB3420(v402 + 1, v410);
        goto LABEL_579;
      }
      v250 = 0;
      v792 = v238 ^ (v171 >> 9);
      while (1)
      {
        if ((v248 & 0x40000000) != 0)
          v251 = *(_QWORD *)(v247 - 8);
        else
          v251 = v247 - 32 * v249;
        v794 = v250;
        v252 = *(const llvm::BasicBlock **)(v251 + 32 * *(unsigned int *)(v247 + 60) + 8 * v250);
        v835 = (char *)v839;
        v836 = (char *)v839;
        v837 = 4;
        LODWORD(v838) = 0;
        v253 = v252;
        v855 = v252;
        v856 = (uint64_t)v840;
        v841 = 0;
        if (sub_1C5B554C8((uint64_t *)(a1 + 1968), &v855, &v841))
        {
          llvm::Instruction::clone((llvm::Instruction *)v171);
          v256 = v255;
          if (v244)
          {
            v841 = v255;
            v842[0] = v244;
            sub_1C6187718((uint64_t)&v855, a1 + 1648, (uint64_t *)&v841, v842);
          }
          if (v874[1] == v874[0])
          {
LABEL_396:
            LODWORD(v874[3]) = 0;
            HIDWORD(v874[2]) = 0;
          }
          else
          {
            if (LODWORD(v874[2]) < 0x21
              || (4 * (HIDWORD(v874[2]) - LODWORD(v874[3]))) >= LODWORD(v874[2]))
            {
              memset(v874[1], 255, 8 * LODWORD(v874[2]));
              goto LABEL_396;
            }
            free(v874[1]);
            v342 = 1 << (33 - __clz(HIDWORD(v874[2]) - LODWORD(v874[3]) - 1));
            v184 = (HIDWORD(v874[2]) - LODWORD(v874[3])) > 0x10;
            LODWORD(v874[3]) = 0;
            if (v184)
              v343 = v342;
            else
              v343 = 32;
            v874[2] = (void *)v343;
            v344 = malloc_type_malloc(8 * v343, 0x4065EBACuLL);
            if (!v344)
              goto LABEL_1274;
            v874[1] = v344;
            memset(v344, 255, 8 * LODWORD(v874[2]));
          }
          v257 = *((_DWORD *)v256 + 5);
          v795 = v256;
          if ((v257 & 0x40000000) != 0)
          {
            v259 = (char *)*((_QWORD *)v256 - 1);
            v258 = v257 & 0x7FFFFFF;
          }
          else
          {
            v258 = v257 & 0x7FFFFFF;
            v259 = (char *)v256 - 32 * v258;
          }
          if (v258)
          {
            v260 = &v259[32 * v258];
            v261 = 1;
            while (1)
            {
              v262 = *(_QWORD *)v259;
              if (*(_BYTE *)(*(_QWORD *)v259 + 16) == 83)
              {
                v263 = *(_QWORD *)v259;
                v264 = llvm::Value::DoPHITranslation(*(_QWORD *)v259, v840, v253);
                v265 = v259 + 8;
                **((_QWORD **)v259 + 2) = *((_QWORD *)v259 + 1);
                v266 = *((_QWORD *)v259 + 1);
                if (v266)
                  *(_QWORD *)(v266 + 16) = *((_QWORD *)v259 + 2);
                *(_QWORD *)v259 = v264;
                v267 = v263;
                if (v264)
                {
                  v270 = *(_QWORD *)(v264 + 8);
                  v268 = (char **)(v264 + 8);
                  v269 = v270;
                  *v265 = v270;
                  if (v270)
                    *(_QWORD *)(v269 + 16) = v265;
                  *((_QWORD *)v259 + 2) = v268;
                  *v268 = v259;
                  v271 = *(_QWORD *)v259;
                }
                else
                {
                  v271 = 0;
                }
                if (v271 == v263 || v271 == v171)
                  goto LABEL_414;
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v835, v271);
              }
              else
              {
                v855 = 0;
                v263 = v262;
                if ((sub_1C6144BDC(*(_QWORD *)(a1 + 1576), *(_DWORD *)(a1 + 1592), v262, &v855) & 1) != 0)
                {
                  v275 = *((_QWORD *)v855 + 1);
                  v267 = v263;
                  if (v275)
                  {
                    v276 = (llvm::BasicBlock *)sub_1C5BE1F10(a1, *((_QWORD *)v855 + 1));
                    v267 = v263;
                    if (v276 == v840)
                    {
                      v277 = *(_DWORD *)(v275 + 20);
                      v278 = v277 & 0x7FFFFFF;
                      if ((v277 & 0x7FFFFFF) != 0)
                      {
                        v279 = 0;
                        while (1)
                        {
                          v280 = v275 - 32 * v278;
                          if ((v277 & 0x40000000) != 0)
                            v280 = *(_QWORD *)(v275 - 8);
                          if (*(const llvm::BasicBlock **)(v280 + 32 * *(unsigned int *)(v275 + 60) + 8 * v279) == v253)
                            break;
                          if (v278 == ++v279)
                            goto LABEL_433;
                        }
                      }
                      else
                      {
LABEL_433:
                        LODWORD(v279) = -1;
                      }
                      if ((v277 & 0x40000000) != 0)
                        v281 = *(_QWORD *)(v275 - 8);
                      else
                        v281 = v275 - 32 * v278;
                      v282 = *(_QWORD *)(v281 + 32 * v279);
                      if (*(_QWORD *)v259)
                      {
                        **((_QWORD **)v259 + 2) = *((_QWORD *)v259 + 1);
                        v283 = *((_QWORD *)v259 + 1);
                        if (v283)
                          *(_QWORD *)(v283 + 16) = *((_QWORD *)v259 + 2);
                      }
                      *(_QWORD *)v259 = v282;
                      if (v282)
                      {
                        v286 = *(_QWORD *)(v282 + 8);
                        v284 = (char **)(v282 + 8);
                        v285 = v286;
                        *((_QWORD *)v259 + 1) = v286;
                        if (v286)
                          *(_QWORD *)(v285 + 16) = v259 + 8;
                        *((_QWORD *)v259 + 2) = v284;
                        *v284 = v259;
                      }
                    }
                  }
                  goto LABEL_414;
                }
              }
              v267 = v263;
LABEL_414:
              if ((v261 & 1) != 0)
              {
                if (*(_QWORD *)v259 == v267)
                {
                  v272 = v840;
                  v855 = v857;
                  v856 = 0x400000000;
                  v273 = (uint64_t *)v267;
                  if (sub_1C5BE7DB4(a1, v267, (uint64_t)v840, (llvm::SmallPtrSetImplBase *)v874, (uint64_t)&v855))
                  {
                    while ((_DWORD)v856)
                    {
                      v274 = *((_QWORD *)v855 + v856 - 1);
                      LODWORD(v856) = v856 - 1;
                      if (!sub_1C5BE7DB4(a1, v274, (uint64_t)v272, (llvm::SmallPtrSetImplBase *)v874, (uint64_t)&v855))
                        goto LABEL_423;
                    }
                    v843 = v273;
                    v261 = 1;
                    v844[0] = 1;
                    sub_1C5AE97FC(a1 + 1528, &v843, v844, (uint64_t)&v841);
                  }
                  else
                  {
LABEL_423:
                    v261 = 0;
                  }
                  if (v855 != v857)
                    free(v855);
                  v259 += 32;
                  if (v259 == v260)
                  {
                    if ((v261 & 1) != 0)
                      break;
LABEL_552:
                    llvm::Value::deleteValue(v795);
LABEL_553:
                    if (v836 != v835)
                      free(v836);
                    v204 = 0;
LABEL_578:
                    LODWORD(v166) = v812;
                    v178 = v811;
LABEL_579:
                    if (v848 != v847)
                      free(v848);
                    if (v866[0] != &v867)
                      free(v866[0]);
LABEL_352:
                    if (v852 != v854)
                      free(v852);
                    if (v874[1] != v874[0])
                      free(v874[1]);
LABEL_356:
                    if (__base[1] != __base[0])
                      free(__base[1]);
                    if (v204)
                    {
LABEL_359:
                      v178 = v204;
                      goto LABEL_360;
                    }
LABEL_363:
                    v874[0] = 0;
                    if ((sub_1C6144BDC(*(_QWORD *)(a1 + 1576), *(_DWORD *)(a1 + 1592), v171, v874) & 1) != 0)
                    {
                      v227 = *((_QWORD *)v874[0] + 1);
                      v162 = v813;
                      if (v227)
                      {
                        v228 = *(_DWORD *)(a1 + 2224);
                        if (v228)
                        {
                          v229 = *(_QWORD *)(a1 + 2208);
                          v230 = v228 - 1;
                          LODWORD(v231) = (v228 - 1) & ((v227 >> 4) ^ (v227 >> 9));
                          v232 = (uint64_t *)(v229 + 16 * v231);
                          v233 = *v232;
                          if (v227 == *v232)
                          {
LABEL_371:
                            *v232 = -8192;
                            *(int32x2_t *)(a1 + 2216) = vadd_s32(*(int32x2_t *)(a1 + 2216), (int32x2_t)0x1FFFFFFFFLL);
                          }
                          else
                          {
                            v234 = 1;
                            while (v233 != -4096)
                            {
                              v235 = v231 + v234++;
                              v231 = v235 & v230;
                              v233 = *(_QWORD *)(v229 + 16 * v231);
                              if (v227 == v233)
                              {
                                v232 = (uint64_t *)(v229 + 16 * v231);
                                goto LABEL_371;
                              }
                            }
                          }
                        }
                        v874[0] = 0;
                        if (sub_1C6144BDC(*(_QWORD *)(a1 + 1552), *(_DWORD *)(a1 + 1568), v227, v874))
                        {
                          *(_QWORD *)v874[0] = -8192;
                          *(int32x2_t *)(a1 + 1560) = vadd_s32(*(int32x2_t *)(a1 + 1560), (int32x2_t)0x1FFFFFFFFLL);
                        }
                        v874[0] = 0;
                        if (sub_1C6144BDC(*(_QWORD *)(a1 + 1576), *(_DWORD *)(a1 + 1592), v171, v874))
                        {
                          *(_QWORD *)v874[0] = -8192;
                          *(int32x2_t *)(a1 + 1584) = vadd_s32(*(int32x2_t *)(a1 + 1584), (int32x2_t)0x1FFFFFFFFLL);
                        }
                      }
                    }
                    else
                    {
LABEL_360:
                      v162 = v813;
                    }
LABEL_361:
                    sub_1C5BE3E10(a1, v171, v178);
                    if (v831 != v830)
                      free(v831);
LABEL_645:
                    v165 = sub_1C476BA0C((_QWORD *)(a1 + 2088), (int)v166 + 1, *(_DWORD *)(a1 + 2152), 1u);
                    goto LABEL_255;
                  }
                }
                else
                {
                  v259 += 32;
                  v261 = 1;
                  if (v259 == v260)
                    break;
                }
              }
              else
              {
                v261 = 0;
                v259 += 32;
                if (v259 == v260)
                  goto LABEL_552;
              }
            }
          }
          v846 = v795;
          v287 = *(_DWORD *)(a1 + 2224);
          if (v287)
          {
            v288 = *(_QWORD *)(a1 + 2208);
            v289 = v287 - 1;
            v290 = (v287 - 1) & v792;
            v291 = *(_QWORD *)(v288 + 16 * v290);
            v292 = v807;
            if (v171 == v291)
            {
LABEL_460:
              v295 = *(_DWORD *)(v288 + 16 * v290 + 8);
            }
            else
            {
              v293 = 1;
              while (v291 != -4096)
              {
                v294 = v290 + v293++;
                v290 = v294 & v289;
                v291 = *(_QWORD *)(v288 + 16 * v290);
                if (v171 == v291)
                  goto LABEL_460;
              }
              v295 = 0;
            }
          }
          else
          {
            v295 = 0;
            v292 = v807;
          }
          sub_1C61DB390((uint64_t)v798, &v846, (uint64_t)&v855);
          v841 = v846;
          v842[0] = v253;
          sub_1C6187718((uint64_t)&v855, v797, (uint64_t *)&v841, v842);
          v841 = v846;
          LODWORD(v842[0]) = v295;
          sub_1C6322E08((uint64_t)&v855, (uint64_t)v822, (uint64_t *)&v841, v842);
          sub_1C5BE2870((unint64_t *)&v855, a1, (uint64_t)v846);
          v296 = (char *)v855;
          v845 = v855;
          sub_1C5BE3D90((_QWORD *)a1, (uint64_t)&v855, v171);
          v297 = *(_DWORD *)(a1 + 2224);
          if (v297)
          {
            v298 = *(_QWORD *)(a1 + 2208);
            v299 = v297 - 1;
            LODWORD(v300) = ((v846 >> 4) ^ (v846 >> 9)) & (v297 - 1);
            v301 = (llvm::Instruction **)(v298 + 16 * v300);
            v302 = *v301;
            if (v846 == *v301)
            {
LABEL_467:
              *v301 = (llvm::Instruction *)-8192;
              *(int32x2_t *)(a1 + 2216) = vadd_s32(*(int32x2_t *)(a1 + 2216), (int32x2_t)0x1FFFFFFFFLL);
            }
            else
            {
              v303 = 1;
              while (v302 != (llvm::Instruction *)-4096)
              {
                v304 = v300 + v303++;
                v300 = v304 & v299;
                v302 = *(llvm::Instruction **)(v298 + 16 * v300);
                if (v846 == v302)
                {
                  v301 = (llvm::Instruction **)(v298 + 16 * v300);
                  goto LABEL_467;
                }
              }
            }
          }
          v841 = 0;
          if (sub_1C61DB414(v798, &v846, &v841))
          {
            *(_QWORD *)v841 = -8192;
            *(int32x2_t *)(a1 + 1680) = vadd_s32(*(int32x2_t *)(a1 + 1680), (int32x2_t)0x1FFFFFFFFLL);
          }
          v841 = 0;
          if (sub_1C6144BDC(*(_QWORD *)(a1 + 1552), *(_DWORD *)(a1 + 1568), (uint64_t)v846, &v841))
          {
            *(_QWORD *)v841 = -8192;
            *(int32x2_t *)(a1 + 1560) = vadd_s32(*(int32x2_t *)(a1 + 1560), (int32x2_t)0x1FFFFFFFFLL);
          }
          if (v292)
          {
            v841 = 0;
            if (sub_1C6144BDC(*(_QWORD *)(a1 + 1648), *(_DWORD *)(a1 + 1664), (uint64_t)v846, &v841))
            {
              *(_QWORD *)v841 = -8192;
              *(int32x2_t *)(a1 + 1656) = vadd_s32(*(int32x2_t *)(a1 + 1656), (int32x2_t)0x1FFFFFFFFLL);
            }
          }
          if (!v296)
            goto LABEL_589;
          v305 = *((_DWORD *)v296 + 2);
          if (v305 == 2)
          {
            v306 = v296 + 24;
            v307 = (_QWORD *)*((_QWORD *)v296 + 3);
            if (*((unsigned __int8 *)v307 + 16) < 0x16u)
              goto LABEL_480;
            v318 = *(_QWORD *)(a1 + 8);
            v319 = sub_1C5BE1F10(a1, *((_QWORD *)v296 + 3));
            if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v318, v319, (uint64_t)v253))
              goto LABEL_477;
            v305 = *((_DWORD *)v296 + 2);
          }
          else if (v305 == 1)
          {
            v306 = v296 + 24;
LABEL_477:
            v307 = (_QWORD *)*v306;
            if (!*v306)
              goto LABEL_588;
LABEL_480:
            v308 = *((unsigned __int8 *)v307 + 16);
LABEL_481:
            if (v308 == 61)
            {
              v307 = (_QWORD *)*(v307 - 8);
              llvm::Value::deleteValue(v795);
              if (!v307)
                goto LABEL_590;
              goto LABEL_501;
            }
LABEL_500:
            llvm::Value::deleteValue(v795);
LABEL_501:
            if (v836 == v835)
              v322 = (uint64_t *)((char *)&v837 + 4);
            else
              v322 = &v837;
            v323 = *(unsigned int *)v322;
            if ((_DWORD)v323)
            {
              v324 = 8 * v323;
              v325 = (uint64_t *)v836;
              while ((unint64_t)*v325 >= 0xFFFFFFFFFFFFFFFELL)
              {
                ++v325;
                v324 -= 8;
                if (!v324)
                  goto LABEL_525;
              }
            }
            else
            {
              v325 = (uint64_t *)v836;
            }
            v326 = &v836[8 * v323];
            if (v325 != (uint64_t *)v326)
            {
              v327 = *v325;
LABEL_512:
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v847, v327);
              v328 = (unint64_t *)(v325 + 1);
              while (v328 != (unint64_t *)v326)
              {
                v329 = *v328++;
                v327 = v329;
                if (v329 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v325 = (uint64_t *)(v328 - 1);
                  goto LABEL_512;
                }
              }
            }
            goto LABEL_525;
          }
          if (v305 == 3)
          {
            v320 = *(_QWORD **)(a1 + 1344);
          }
          else if (v305 == 2)
          {
            v320 = (_QWORD *)sub_1C5BE5544(*(_QWORD *)(a1 + 1384), *(_DWORD *)(a1 + 1400), *((_QWORD *)v296 + 3));
          }
          else
          {
            v841 = (llvm::Instruction *)v296;
            v843 = 0;
            v321 = sub_1C5BE1E10(*(_QWORD *)(a1 + 1840), *(_DWORD *)(a1 + 1856), (uint64_t *)&v841, &v843);
            v320 = 0;
            if (v321)
              v320 = (_QWORD *)v843[1];
          }
          if (!v320)
            goto LABEL_588;
          v307 = (_QWORD *)v320[1];
          if (*((unsigned __int8 *)v307 + 16) >= 0x16u)
          {
            v330 = v320[8];
            v331 = 72;
            if (v330 == v320[7])
              v331 = 76;
            v332 = *(unsigned int *)((char *)v320 + v331);
            if ((_DWORD)v332)
            {
              v333 = 8 * v332;
              v334 = (unint64_t *)v320[8];
              while (*v334 >= 0xFFFFFFFFFFFFFFFELL)
              {
                ++v334;
                v333 -= 8;
                if (!v333)
                  goto LABEL_588;
              }
            }
            else
            {
              v334 = (unint64_t *)v320[8];
            }
            v337 = (unint64_t *)(v330 + 8 * v332);
            if (v334 == v337)
            {
LABEL_588:
              v362 = sub_1C6322EA0(a1 + 1624, (uint64_t *)&v845);
              sub_1C4774094((llvm::SmallPtrSetImplBase *)(v362 + 1), v171);
LABEL_589:
              llvm::Value::deleteValue(v795);
LABEL_590:
              if (v836 == v835)
                v363 = (uint64_t *)((char *)&v837 + 4);
              else
                v363 = &v837;
              v364 = *(unsigned int *)v363;
              if ((_DWORD)v364)
              {
                v365 = 8 * v364;
                v366 = (uint64_t *)v836;
                while ((unint64_t)*v366 >= 0xFFFFFFFFFFFFFFFELL)
                {
                  ++v366;
                  v365 -= 8;
                  if (!v365)
                    goto LABEL_553;
                }
              }
              else
              {
                v366 = (uint64_t *)v836;
              }
              v384 = &v836[8 * v364];
              if (v366 != (uint64_t *)v384)
              {
                v385 = *v366;
LABEL_612:
                sub_1C5BE7D5C((_QWORD *)a1, v385, v171);
                v386 = (unint64_t *)(v366 + 1);
                while (v386 != (unint64_t *)v384)
                {
                  v387 = *v386++;
                  v385 = v387;
                  if (v387 <= 0xFFFFFFFFFFFFFFFDLL)
                  {
                    v366 = (uint64_t *)(v386 - 1);
                    goto LABEL_612;
                  }
                }
              }
              goto LABEL_553;
            }
            v307 = (_QWORD *)*v334;
            while (1)
            {
              v308 = *((unsigned __int8 *)v307 + 16);
              v338 = v308 <= 0x1B ? 0 : (uint64_t)v307;
              if (v338 != v171)
              {
                if (!v338)
                  goto LABEL_481;
                v791 = *(_QWORD *)(a1 + 8);
                v339 = sub_1C5BE1F10(a1, v338);
                if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v791, v339, (uint64_t)v253))
                  goto LABEL_480;
              }
              v340 = v334 + 1;
              do
              {
                if (v340 == v337)
                  goto LABEL_588;
                v341 = *v340++;
                v307 = (_QWORD *)v341;
              }
              while (v341 > 0xFFFFFFFFFFFFFFFDLL);
              v334 = v340 - 1;
            }
          }
          goto LABEL_500;
        }
        v307 = llvm::PoisonValue::get(*(llvm::PoisonValue **)v171, v254);
        v309 = sub_1C6322644((uint64_t)v810, (uint64_t *)&v840);
        v310 = *(_DWORD *)(a1 + 2224);
        if (!v310)
          goto LABEL_523;
        v311 = *(_QWORD *)(a1 + 2208);
        v312 = v310 - 1;
        v313 = (v310 - 1) & v792;
        v314 = *(_QWORD *)(v311 + 16 * v313);
        if (v171 != v314)
          break;
LABEL_489:
        v317 = *(_DWORD *)(v311 + 16 * v313 + 8);
LABEL_524:
        sub_1C4DB3420(v309 + 1, v317);
LABEL_525:
        v335 = LODWORD(v866[1]);
        if (LODWORD(v866[1]) >= (unint64_t)HIDWORD(v866[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v866, (uint64_t)&v867, LODWORD(v866[1]) + 1, 16);
          v335 = LODWORD(v866[1]);
        }
        v336 = (char *)v866[0] + 16 * v335;
        *v336 = v307;
        v336[1] = v253;
        ++LODWORD(v866[1]);
        if (v836 != v835)
          free(v836);
        v250 = v794 + 1;
        v247 = v796;
        v248 = *(_DWORD *)(v796 + 20);
        v249 = v248 & 0x7FFFFFF;
        v244 = v807;
        if (v794 + 1 >= v249)
          goto LABEL_556;
      }
      v315 = 1;
      while (v314 != -4096)
      {
        v316 = v313 + v315++;
        v313 = v316 & v312;
        v314 = *(_QWORD *)(v311 + 16 * v313);
        if (v171 == v314)
          goto LABEL_489;
      }
LABEL_523:
      v317 = 0;
      goto LABEL_524;
    }
  }
LABEL_247:
  llvm::DominatorTreeBase<llvm::BasicBlock,false>::updateDFSNumbers(*(_QWORD *)(a1 + 8));
  v853 = 0;
  v852 = 0;
  v854[0] = 0;
  v158 = *(_QWORD *)(a1 + 1968);
  v159 = *(unsigned int *)(a1 + 1984);
  v160 = (void **)(v158 + 16 * v159);
  if (*(_DWORD *)(a1 + 1976))
  {
    if ((_DWORD)v159)
    {
      v413 = 16 * v159;
      v161 = *(void ***)(a1 + 1968);
      while (1)
      {
        v414 = v161[1];
        if ((*v161 != (void *)-4096 || v414 != (void *)-4096)
          && (*v161 != (void *)-8192 || v414 != (void *)-8192))
        {
          break;
        }
        v161 += 2;
        v413 -= 16;
        if (!v413)
          goto LABEL_656;
      }
    }
    else
    {
      v161 = *(void ***)(a1 + 1968);
    }
  }
  else
  {
LABEL_656:
    v161 = (void **)(v158 + 16 * v159);
  }
  v415 = (void **)(v158 + 16 * v159);
LABEL_658:
  while (v161 != v415)
  {
    v874[0] = v161[1];
    v416 = sub_1C61D35F0((uint64_t)&v852, (uint64_t *)v874);
    ++*((_DWORD *)v416 + 2);
    v417 = v161 + 2;
    v161 = v160;
    if (v417 != v160)
    {
      v161 = v417;
      while (1)
      {
        v418 = v161[1];
        if ((*v161 != (void *)-4096 || v418 != (void *)-4096)
          && (*v161 != (void *)-8192 || v418 != (void *)-8192))
        {
          break;
        }
        v161 += 2;
        if (v161 == v160)
        {
          v161 = v160;
          goto LABEL_658;
        }
      }
    }
  }
  v419 = *(_QWORD *)(a1 + 1696);
  v420 = *(unsigned int *)(a1 + 1712);
  v421 = (llvm::SmallPtrSetImplBase *)(v419 + 40 * v420);
  if (*(_DWORD *)(a1 + 1704))
  {
    if ((_DWORD)v420)
    {
      v423 = 40 * v420;
      v422 = *(llvm::SmallPtrSetImplBase **)(a1 + 1696);
      while ((*(_QWORD *)v422 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v422 = (llvm::SmallPtrSetImplBase *)((char *)v422 + 40);
        v423 -= 40;
        if (!v423)
          goto LABEL_673;
      }
    }
    else
    {
      v422 = *(llvm::SmallPtrSetImplBase **)(a1 + 1696);
    }
  }
  else
  {
LABEL_673:
    v422 = (llvm::SmallPtrSetImplBase *)(v419 + 40 * v420);
  }
  v819 = (llvm::SmallPtrSetImplBase *)(v419 + 40 * v420);
  if (v422 == v819)
    goto LABEL_718;
  while (2)
  {
    v424 = (void *)*((_QWORD *)v422 + 2);
    v874[1] = (char *)v422 + 8;
    v874[2] = v424;
    v874[4] = 0;
    v874[3] = (void *)0xFFFFFFFF00000000;
    LOBYTE(v874[0]) = 0;
    sub_1C511F4E8((uint64_t)v874);
    v425 = *((_QWORD *)v422 + 2);
    __base[1] = (char *)v422 + 8;
    *(_QWORD *)&v859 = v425;
    *(_QWORD *)&v860[0] = 0;
    *((_QWORD *)&v859 + 1) = 0xFFFFFFFF00000000;
    LOBYTE(__base[0]) = 1;
    sub_1C511F4E8((uint64_t)__base);
    while (2)
    {
      if ((!LOBYTE(v874[0]) || !LOBYTE(__base[0]))
        && (LOBYTE(v874[0]) != LOBYTE(__base[0]) || DWORD2(v859) != LODWORD(v874[3])))
      {
        v426 = *(_QWORD *)(*v823 + 8 * LODWORD(v874[3]));
        if (!v426 || *(_BYTE *)(v426 + 16) != 83)
        {
          v866[0] = 0;
          if ((sub_1C6144BDC(*(_QWORD *)(a1 + 1576), *(_DWORD *)(a1 + 1592), v426, v866) & 1) == 0)
            goto LABEL_703;
          v426 = *((_QWORD *)v866[0] + 1);
          if (!v426)
            goto LABEL_703;
        }
        v427 = *(void **)v422;
        v428 = v854[0];
        if (v854[0])
        {
          v429 = ((v427 >> 4) ^ (v427 >> 9)) & (v854[0] - 1);
          v430 = (void *)*((_QWORD *)v852 + 2 * v429);
          if (v427 == v430)
          {
LABEL_684:
            v428 = *((_DWORD *)v852 + 4 * v429 + 2);
          }
          else
          {
            v444 = 1;
            while (v430 != (void *)-4096)
            {
              v445 = v429 + v444++;
              v429 = v445 & (v854[0] - 1);
              v430 = (void *)*((_QWORD *)v852 + 2 * v429);
              if (v427 == v430)
                goto LABEL_684;
            }
            v428 = 0;
          }
        }
        v431 = *(_DWORD *)(v426 + 20);
        v432 = v431 & 0x7FFFFFF;
        if (v428 == (v431 & 0x7FFFFFF))
          goto LABEL_703;
        if ((v431 & 0x40000000) != 0)
        {
          v433 = *(_QWORD *)(v426 - 8);
          if ((v431 & 0x7FFFFFF) == 0)
          {
LABEL_703:
            ++LODWORD(v874[3]);
            v874[4] = (void *)((unint64_t)v874[4] >> 1);
            sub_1C511F56C((uint64_t)v874);
            continue;
          }
        }
        else
        {
          v432 = v432;
          v433 = v426 - 32 * v432;
          if (!(_DWORD)v432)
            goto LABEL_703;
        }
        v434 = 32 * v432;
        v435 = (_QWORD **)(v433 + 8);
        do
        {
          v436 = *(_DWORD *)(v426 + 20);
          if ((v436 & 0x40000000) != 0)
            v437 = *(_QWORD *)(v426 - 8);
          else
            v437 = v426 - 32 * (v436 & 0x7FFFFFF);
          v866[0] = *(void **)(v437
                             + 32 * *(unsigned int *)(v426 + 60)
                             + 8 * ((unint64_t)(v433 - v437) >> 5));
          v866[1] = v427;
          v847 = 0;
          if ((sub_1C5B554C8((uint64_t *)(a1 + 1968), v866, &v847) & 1) == 0)
          {
            v439 = v435 - 1;
            v440 = llvm::PoisonValue::get(*(llvm::PoisonValue **)v426, v438);
            if (*(v435 - 1))
            {
              *v435[1] = *v435;
              if (*v435)
                (*v435)[2] = v435[1];
            }
            *v439 = v440;
            if (v440)
            {
              v443 = (_QWORD *)v440[1];
              v441 = v440 + 1;
              v442 = v443;
              *v435 = v443;
              if (v443)
                v442[2] = v435;
              v435[1] = v441;
              *v441 = v439;
            }
          }
          v435 += 4;
          v433 += 32;
          v434 -= 32;
        }
        while (v434);
        goto LABEL_703;
      }
      break;
    }
    v446 = (llvm::SmallPtrSetImplBase *)((char *)v422 + 40);
    v422 = v421;
    if (v446 != v421)
    {
      v422 = v446;
      while ((*(_QWORD *)v422 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v422 = (llvm::SmallPtrSetImplBase *)((char *)v422 + 40);
        if (v422 == v421)
        {
          v422 = v421;
          break;
        }
      }
    }
    if (v422 != v819)
      continue;
    break;
  }
LABEL_718:
  v830 = 0;
  v831 = 0;
  LODWORD(v832) = 0;
  v447 = *(_QWORD *)(a1 + 1360);
  v824 = *(_QWORD *)(a1 + 1352);
  if (v447 == v824)
  {
    v448 = 0;
    v449 = 0;
    goto LABEL_1058;
  }
  v806 = 0;
  v802 = (uint64_t *)(a1 + 1672);
  while (2)
  {
    v451 = *(_QWORD *)(v447 - 8);
    v447 -= 8;
    v450 = v451;
    v874[0] = &v874[2];
    v874[1] = (void *)0x800000000;
    v847 = v851;
    v848 = v851;
    v849 = 8;
    v850 = 0;
    v452 = *(_DWORD *)(v451 + 76) - *(_DWORD *)(v451 + 80);
    if (v452)
    {
      if (v450 == *(_QWORD *)(a1 + 1344))
      {
        v460 = *(_QWORD *)(v450 + 64);
        v461 = 72;
        if (v460 == *(_QWORD *)(v450 + 56))
          v461 = 76;
        v462 = *(unsigned int *)(v450 + v461);
        if ((_DWORD)v462)
        {
          v463 = 8 * v462;
          v464 = *(uint64_t **)(v450 + 64);
          while ((unint64_t)*v464 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v464;
            v463 -= 8;
            if (!v463)
              goto LABEL_1050;
          }
        }
        else
        {
          v464 = *(uint64_t **)(v450 + 64);
        }
        v470 = (_QWORD *)(v460 + 8 * v462);
        if (v464 != v470)
        {
          v471 = *v464;
LABEL_752:
          __base[0] = 0;
          if ((sub_1C6144BDC(*(_QWORD *)(a1 + 1408), *(_DWORD *)(a1 + 1424), v471, __base) & 1) != 0)
          {
            v472 = *((_QWORD *)__base[0] + 1);
            if (v472)
            {
              if (*(_DWORD *)(v472 + 8) == 3)
                sub_1C4774094(v817, v471);
            }
          }
          v473 = (unint64_t *)(v464 + 1);
          while (v473 != v470)
          {
            v474 = *v473++;
            v471 = v474;
            if (v474 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v464 = (uint64_t *)(v473 - 1);
              goto LABEL_752;
            }
          }
        }
      }
      else
      {
        v453 = *(unsigned __int8 **)(v450 + 32);
        if (!v453)
          v453 = *(unsigned __int8 **)(v450 + 8);
        if (v453[16] <= 0x15u)
        {
          __base[0] = v860;
          __base[1] = v860;
          *(_QWORD *)&v859 = 4;
          v454 = *(_QWORD *)(v450 + 56);
          DWORD2(v859) = 0;
          v455 = *(_QWORD *)(v450 + 64);
          v57 = v455 == v454;
          v456 = 72;
          if (v57)
            v456 = 76;
          v457 = *(unsigned int *)(v450 + v456);
          if ((_DWORD)v457)
          {
            v458 = 8 * v457;
            v459 = *(unint64_t **)(v450 + 64);
            while (*v459 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v459;
              v458 -= 8;
              if (!v458)
                goto LABEL_773;
            }
          }
          else
          {
            v459 = *(unint64_t **)(v450 + 64);
          }
          v475 = (unint64_t *)(v455 + 8 * v457);
          if (v459 != v475)
          {
            v476 = v447;
            v477 = (unsigned __int8 *)*v459;
LABEL_763:
            if (v477 == v453 || v477[16] < 0x1Cu || *(_BYTE *)(*(_QWORD *)v477 + 8) == 7)
            {
              v478 = __base;
            }
            else
            {
              llvm::patchReplacementInstruction((llvm *)v477, (llvm::Instruction *)v453, v157);
              v806 = 1;
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v477, (llvm::Value *)v453, (llvm::Value *)1);
              v478 = (void **)(a1 + 2504);
            }
            sub_1C4774094((llvm::SmallPtrSetImplBase *)v478, (uint64_t)v477);
            v479 = v459 + 1;
            while (v479 != v475)
            {
              v480 = *v479++;
              v477 = (unsigned __int8 *)v480;
              if (v480 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                v459 = v479 - 1;
                goto LABEL_763;
              }
            }
            v447 = v476;
          }
LABEL_773:
          llvm::SmallPtrSetImplBase::swap((uint64_t *)(v450 + 56), (uint64_t **)__base);
          v481 = (__int128 *)__base[1];
          v482 = (__int128 *)__base[0];
          goto LABEL_950;
        }
        if (v452 != 1
          || sub_1C6144BDC(*(_QWORD *)(a1 + 1576), *(_DWORD *)(a1 + 1592), (uint64_t)v453, __base))
        {
          v866[0] = &v867;
          v866[1] = (void *)0x800000000;
          p_p = &__p;
          v870 = 0x800000000;
          __base[0] = &v859;
          __base[1] = (void *)0x800000000;
          v465 = *(_QWORD *)(v450 + 64);
          if (v465 == *(_QWORD *)(v450 + 56))
            v466 = (unsigned int *)(v450 + 76);
          else
            v466 = (unsigned int *)(v450 + 72);
          v467 = *v466;
          if ((_DWORD)v467)
          {
            v468 = 8 * v467;
            v469 = *(uint64_t **)(v450 + 64);
            while ((unint64_t)*v469 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v469;
              v468 -= 8;
              if (!v468)
                goto LABEL_947;
            }
          }
          else
          {
            v469 = *(uint64_t **)(v450 + 64);
          }
          v483 = (_QWORD *)(v465 + 8 * v467);
          if (v469 == v483)
            goto LABEL_947;
          v484 = *v469;
          v805 = v447;
LABEL_777:
          v485 = sub_1C5BE1F10(a1, v484);
          LODWORD(v856) = 0;
          v857[0] = 0;
          v857[1] = 0;
          v486 = *(_QWORD *)(a1 + 8);
          v487 = *(_QWORD *)(v486 + 24);
          v488 = *(unsigned int *)(v486 + 40);
          if ((_DWORD)v488)
          {
            LODWORD(v489) = (v488 - 1) & ((v485 >> 4) ^ (v485 >> 9));
            v490 = (uint64_t *)(v487 + 16 * v489);
            v491 = *v490;
            if (v485 != *v490)
            {
              v492 = 1;
              do
              {
                if (v491 == -4096)
                  goto LABEL_783;
                v493 = v489 + v492++;
                v489 = v493 & (v488 - 1);
                v491 = *(_QWORD *)(v487 + 16 * v489);
              }
              while (v485 != v491);
              v490 = (uint64_t *)(v487 + 16 * v489);
            }
          }
          else
          {
LABEL_783:
            v490 = (uint64_t *)(v487 + 16 * v488);
          }
          v855 = *(void **)(v490[1] + 72);
          if (v484 && *(_BYTE *)(v484 + 16) == 61)
          {
            v494 = sub_1C5BE5298(a1, *(_QWORD *)(v484 - 64));
            if (*((unsigned __int8 *)v494 + 16) > 0x15u)
              v495 = v857[0] & 3 | *(_QWORD *)(v484 - 64) | 4;
            else
              v495 = v857[0] & 7 | (unint64_t)v494;
          }
          else
          {
            v495 = v484;
          }
          v857[0] = v495;
          v496 = *(_DWORD *)(a1 + 2224);
          if (v496)
          {
            v497 = *(_QWORD *)(a1 + 2208);
            v498 = v496 - 1;
            v499 = (v496 - 1) & ((v484 >> 4) ^ (v484 >> 9));
            v500 = *(_QWORD *)(v497 + 16 * v499);
            if (v484 != v500)
            {
              v501 = 1;
              while (v500 != -4096)
              {
                v502 = v499 + v501++;
                v499 = v502 & v498;
                v500 = *(_QWORD *)(v497 + 16 * v499);
                if (v484 == v500)
                  goto LABEL_795;
              }
              goto LABEL_796;
            }
LABEL_795:
            v503 = *(_DWORD *)(v497 + 16 * v499 + 8);
          }
          else
          {
LABEL_796:
            v503 = 0;
          }
          LODWORD(v856) = v503;
          sub_1C47E9C18((uint64_t)__base, (unint64_t)&v855);
          v835 = 0;
          if ((sub_1C6144BDC(*(_QWORD *)(a1 + 1576), *(_DWORD *)(a1 + 1592), v484, &v835) & 1) != 0)
          {
            v504 = *((_QWORD *)v835 + 1);
            if (v504)
            {
              v835 = 0;
              if ((sub_1C6144BDC(*(_QWORD *)(a1 + 1408), *(_DWORD *)(a1 + 1424), v484, &v835) & 1) != 0)
              {
                v539 = *((_QWORD *)v835 + 1);
                if (v539)
                {
                  if (*(_DWORD *)(v539 + 8) == 8)
                  {
                    v857[0] = v857[0] & 3 | v504;
                    LODWORD(v856) = 0;
                    sub_1C47E9C18((uint64_t)__base, (unint64_t)&v855);
                  }
                }
              }
            }
          }
          v505 = *(_QWORD *)(v484 + 8);
          if (!v505)
            goto LABEL_838;
          v506 = 0;
          while (2)
          {
            v507 = *(_QWORD *)(v505 + 24);
            if (v507)
              v508 = *(unsigned __int8 *)(v507 + 16) >= 0x1Cu;
            else
              v508 = 0;
            if (v508)
            {
              v509 = sub_1C477672C((uint64_t)v817, *(_QWORD *)(v505 + 24));
              v510 = *(_QWORD *)(a1 + 2512);
              v511 = 2520;
              if (v510 == *(_QWORD *)(a1 + 2504))
                v511 = 2524;
              if (v509 == (_QWORD *)(v510 + 8 * *(unsigned int *)(a1 + v511)))
              {
                if (*(_BYTE *)(v507 + 16) == 83)
                {
                  v512 = *(_DWORD *)(v507 + 20);
                  v513 = (v512 & 0x40000000) != 0 ? *(_QWORD *)(v507 - 8) : v507 - 32 * (v512 & 0x7FFFFFF);
                  v514 = *(_QWORD *)(v513
                                   + 32 * *(unsigned int *)(v507 + 60)
                                   + 8 * ((unint64_t)(v505 - v513) >> 5));
                  v522 = *(_DWORD *)(a1 + 2216) + 1;
                }
                else
                {
                  v514 = sub_1C5BE1F10(a1, v507);
                  v515 = *(_DWORD *)(a1 + 2224);
                  if (v515)
                  {
                    v516 = *(_QWORD *)(a1 + 2208);
                    v517 = v515 - 1;
                    v518 = (v515 - 1) & ((v507 >> 4) ^ (v507 >> 9));
                    v519 = *(_QWORD *)(v516 + 16 * v518);
                    if (v507 == v519)
                    {
LABEL_817:
                      v522 = *(_DWORD *)(v516 + 16 * v518 + 8);
                      goto LABEL_821;
                    }
                    v520 = 1;
                    while (v519 != -4096)
                    {
                      v521 = v518 + v520++;
                      v518 = v521 & v517;
                      v519 = *(_QWORD *)(v516 + 16 * v518);
                      if (v507 == v519)
                        goto LABEL_817;
                    }
                  }
                  v522 = 0;
                }
LABEL_821:
                v523 = sub_1C477672C(v814, v514);
                v524 = *(_QWORD *)(a1 + 2000);
                v525 = 2008;
                if (v524 == *(_QWORD *)(a1 + 1992))
                  v525 = 2012;
                if (v523 != (_QWORD *)(v524 + 8 * *(unsigned int *)(a1 + v525)))
                {
                  v526 = *(_QWORD *)(*(_QWORD *)v809 + 24);
                  v527 = *(unsigned int *)(*(_QWORD *)v809 + 40);
                  if (!(_DWORD)v527)
                    goto LABEL_830;
                  LODWORD(v528) = (v527 - 1) & ((v514 >> 4) ^ (v514 >> 9));
                  v529 = (uint64_t *)(v526 + 16 * v528);
                  v530 = *v529;
                  if (v514 != *v529)
                  {
                    v531 = 1;
                    while (v530 != -4096)
                    {
                      v532 = v528 + v531++;
                      v528 = v532 & (v527 - 1);
                      v530 = *(_QWORD *)(v526 + 16 * v528);
                      if (v514 == v530)
                      {
                        v529 = (uint64_t *)(v526 + 16 * v528);
                        goto LABEL_831;
                      }
                    }
LABEL_830:
                    v529 = (uint64_t *)(v526 + 16 * v527);
                  }
LABEL_831:
                  v533 = v529[1];
                  v535 = *(_DWORD *)(v533 + 72);
                  v534 = *(_DWORD *)(v533 + 76);
                  ++v506;
                  if (LODWORD(__base[1]) >= HIDWORD(__base[1]))
                  {
                    v835 = (char *)__PAIR64__(v534, v535);
                    LODWORD(v836) = v522;
                    v837 = 0;
                    v838 = v505;
                    sub_1C47E9C18((uint64_t)__base, (unint64_t)&v835);
                  }
                  else
                  {
                    v536 = (char *)__base[0] + 32 * LODWORD(__base[1]);
                    *(_DWORD *)v536 = v535;
                    *((_DWORD *)v536 + 1) = v534;
                    *((_DWORD *)v536 + 2) = v522;
                    *((_QWORD *)v536 + 2) = 0;
                    *((_QWORD *)v536 + 3) = v505;
                    ++LODWORD(__base[1]);
                  }
                }
              }
            }
            v505 = *(_QWORD *)(v505 + 8);
            if (!v505)
            {
              if (v506)
              {
                v835 = (char *)v484;
                *((_DWORD *)sub_1C504CE94((uint64_t)&v830, (uint64_t *)&v835) + 2) = v506;
LABEL_839:
                v537 = (unint64_t *)(v469 + 1);
                while (v537 != v483)
                {
                  v538 = *v537++;
                  v484 = v538;
                  if (v538 <= 0xFFFFFFFFFFFFFFFDLL)
                  {
                    v469 = (uint64_t *)(v537 - 1);
                    goto LABEL_777;
                  }
                }
                v540 = LODWORD(__base[1]);
                v541 = (signed int *)__base[0];
                if (LODWORD(__base[1]) >= 2)
                {
                  qsort(__base[0], LODWORD(__base[1]), 0x20uLL, (int (__cdecl *)(const void *, const void *))sub_1C5BE86C4);
                  v541 = (signed int *)__base[0];
                  v540 = LODWORD(__base[1]);
                }
                v542 = &v541[8 * v540];
                if (!v540)
                {
LABEL_944:
                  if (v541 != (signed int *)&v859)
                    free(v541);
                  v447 = v805;
LABEL_947:
                  if (p_p != &__p)
                    free(p_p);
                  v481 = (__int128 *)v866[0];
                  v482 = &v867;
LABEL_950:
                  if (v481 != v482)
                    free(v481);
                  break;
                }
                while (2)
                {
                  v554 = *v541;
                  v553 = v541[1];
                  v556 = *((_QWORD *)v541 + 2);
                  v555 = *((_QWORD *)v541 + 3);
                  v557 = v556 & 0xFFFFFFFFFFFFFFF8;
                  if ((v556 & 0xFFFFFFFFFFFFFFF8) != 0)
                  {
                    if (*(_BYTE *)(*(_QWORD *)v557 + 8) != 7)
                    {
                      if (*(unsigned __int8 *)(v557 + 16) >= 0x1Cu)
                      {
                        v835 = (char *)(v556 & 0xFFFFFFFFFFFFFFF8);
                        v855 = 0;
                        if (sub_1C61DB414(v802, &v835, &v855))
                        {
                          v855 = (void *)(v556 & 0xFFFFFFFFFFFFFFF8);
                          v835 = 0;
                          if (sub_1C61DB414(v802, &v855, &v835))
                          {
                            *(_QWORD *)v835 = -8192;
                            *(int32x2_t *)(a1 + 1680) = vadd_s32(*(int32x2_t *)(a1 + 1680), (int32x2_t)0x1FFFFFFFFLL);
                          }
                          v543 = *(_QWORD *)(sub_1C5BE1F10(a1, v556 & 0xFFFFFFFFFFFFFFF8) + 48);
                          if (v543)
                            v544 = v543 - 24;
                          else
                            v544 = 0;
                          v545 = *(_QWORD *)(v544 + 40);
                          *(_QWORD *)(v557 + 40) = v545;
                          *(_WORD *)(v545 + 18) &= ~0x8000u;
                          if ((*(_BYTE *)(v557 + 23) & 0x10) != 0)
                          {
                            v551 = *(_QWORD *)(v545 + 56);
                            if (v551)
                            {
                              v552 = *(llvm::ValueSymbolTable **)(v551 + 104);
                              if (v552)
                              {
                                v799 = v544;
                                llvm::ValueSymbolTable::reinsertValue(v552, (llvm::Value *)(v556 & 0xFFFFFFFFFFFFFFF8));
                                v544 = v799;
                              }
                            }
                          }
                          v547 = *(_QWORD *)(v544 + 24);
                          v546 = (_QWORD *)(v544 + 24);
                          *(_QWORD *)(v557 + 24) = v547;
                          *(_QWORD *)(v557 + 32) = v546;
                          *(_QWORD *)(v547 + 8) = v557 + 24;
                          *v546 = v557 + 24;
                        }
                      }
                      break;
                    }
LABEL_942:
                    v541 += 8;
                    if (v541 == v542)
                    {
                      v541 = (signed int *)__base[0];
                      goto LABEL_944;
                    }
                    continue;
                  }
                  break;
                }
                if (v557)
                  v558 = v870 == 0;
                else
                  v558 = 0;
                v559 = v558;
                if ((_DWORD)v870)
                {
                  v560 = (char *)p_p + 8 * v870;
                  if (*((_DWORD *)v560 - 2) > v554 || ((*((_DWORD *)v560 - 1) >= v553) & ~v559) == 0)
                  {
                    v561 = v870 - 1;
                    v562 = (signed int *)(v560 - 4);
                    v563 = LODWORD(v866[1]) - 1;
                    while (*(v562 - 1) > v554 || *v562 < v553)
                    {
                      LODWORD(v870) = v561;
                      LODWORD(v866[1]) = v563;
                      --v561;
                      v562 -= 2;
                      --v563;
                      if (v561 == -1)
                        goto LABEL_882;
                    }
                  }
                  if (v557)
                  {
LABEL_886:
                    if (*((_QWORD *)v866[0] + LODWORD(v866[1]) - 1) != v557
                      && (v556 & 4) == 0
                      && *(unsigned __int8 *)(v557 + 16) >= 0x1Cu)
                    {
                      sub_1C4774094(v817, v556 & 0xFFFFFFFFFFFFFFF8);
                    }
                    goto LABEL_942;
                  }
                }
                else
                {
LABEL_882:
                  if (v557)
                  {
                    sub_1C5BE8638((uint64_t)v866, v556 & 0xFFFFFFFFFFFFFFF8, v554, v553);
                    if (!(_DWORD)v870)
                      goto LABEL_942;
                    goto LABEL_886;
                  }
                }
                v564 = sub_1C477672C((uint64_t)v817, *(_QWORD *)(v555 + 24));
                v565 = *(_QWORD *)(a1 + 2512);
                v566 = 2520;
                if (v565 == *(_QWORD *)(a1 + 2504))
                  v566 = 2524;
                if (v564 != (_QWORD *)(v565 + 8 * *(unsigned int *)(a1 + v566)))
                {
                  v835 = *(char **)v555;
                  v567 = sub_1C504CE94((uint64_t)&v830, (uint64_t *)&v835);
                  v568 = *((_DWORD *)v567 + 2) - 1;
                  *((_DWORD *)v567 + 2) = v568;
                  if (!v568)
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v847, *(_QWORD *)v555);
                }
                if (!(_DWORD)v870)
                  goto LABEL_942;
                v841 = 0;
                v569 = *((_QWORD *)v866[0] + LODWORD(v866[1]) - 1);
                v841 = (llvm::Instruction *)v569;
                if (*(_BYTE *)(v569 + 16) == 84
                  && (v570 = *(_QWORD *)(v569 - 32)) != 0
                  && !*(_BYTE *)(v570 + 16)
                  && *(_QWORD *)(v570 + 24) == *(_QWORD *)(v569 + 72)
                  && (*(_BYTE *)(v570 + 33) & 0x20) != 0)
                {
                  if (*(_DWORD *)(v570 + 36) == 281)
                  {
                    v549 = *(llvm::Instruction **)(v569 - 32 * (*(_DWORD *)(v569 + 20) & 0x7FFFFFF));
                    v841 = v549;
                    v550 = 1;
                  }
                  else
                  {
                    v550 = 0;
                    v549 = (llvm::Instruction *)v569;
                  }
                }
                else
                {
                  v550 = 0;
                  v549 = (llvm::Instruction *)v569;
                  v569 = 0;
                }
                v571 = *(llvm **)v555;
                if (*(llvm::Instruction **)v555 == v549)
                  goto LABEL_942;
                v572 = *(_QWORD *)(a1 + 64) + 24;
                v835 = *(char **)v555;
                v855 = 0;
                if ((sub_1C4926528(v572, &v835, &v855) & 1) != 0)
                {
                  v574 = *((_QWORD *)v855 + 1);
                  v575 = v841;
                  if (v574 && v841 == *(llvm::Instruction **)(v574 + 32))
                  {
LABEL_909:
                    if (*(_QWORD *)v555)
                    {
                      **(_QWORD **)(v555 + 16) = *(_QWORD *)(v555 + 8);
                      v576 = *(_QWORD *)(v555 + 8);
                      if (v576)
                        *(_QWORD *)(v576 + 16) = *(_QWORD *)(v555 + 16);
                    }
                    *(_QWORD *)v555 = v575;
                    if (v575)
                    {
                      v579 = *((_QWORD *)v575 + 1);
                      v577 = (_QWORD *)((char *)v575 + 8);
                      v578 = v579;
                      *(_QWORD *)(v555 + 8) = v579;
                      if (v579)
                        *(_QWORD *)(v578 + 16) = v555 + 8;
                      *(_QWORD *)(v555 + 16) = v577;
                      *v577 = v555;
                    }
                    if ((_DWORD)v832)
                    {
                      v580 = ((v841 >> 4) ^ (v841 >> 9)) & (v832 - 1);
                      v581 = (llvm::Instruction **)&v830[16 * v580];
                      v582 = *v581;
                      if (v841 != *v581)
                      {
                        v583 = 0;
                        v584 = 1;
                        while (v582 != (llvm::Instruction *)-4096)
                        {
                          if (v583)
                            v585 = 0;
                          else
                            v585 = v582 == (llvm::Instruction *)-8192;
                          if (v585)
                            v583 = v581;
                          v586 = v580 + v584++;
                          v580 = v586 & (v832 - 1);
                          v581 = (llvm::Instruction **)&v830[16 * v580];
                          v582 = *v581;
                          if (v841 == *v581)
                            goto LABEL_931;
                        }
                        if (v583)
                          v548 = v583;
                        else
                          v548 = v581;
LABEL_930:
                        v581 = (llvm::Instruction **)sub_1C504A120((uint64_t)&v830, (uint64_t)&v841, (uint64_t *)&v841, v548);
                        *v581 = v841;
                        *((_DWORD *)v581 + 2) = 0;
                      }
LABEL_931:
                      if (!*((_DWORD *)v581 + 2) && *((unsigned __int8 *)v841 + 16) >= 0x1Cu)
                      {
                        v587 = sub_1C477672C((uint64_t)&v847, (uint64_t)v841);
                        v588 = v848 == v847 ? (uint64_t *)((char *)&v849 + 4) : &v849;
                        if (v587 != (_QWORD *)((char *)v848 + 8 * *(unsigned int *)v588))
                        {
                          *v587 = -2;
                          ++v850;
                        }
                      }
                      if (v550)
                      {
                        v835 = (char *)v569;
                        v589 = sub_1C504CE94((uint64_t)&v830, (uint64_t *)&v835);
                        v590 = *((_DWORD *)v589 + 2) - 1;
                        *((_DWORD *)v589 + 2) = v590;
                        if (!v590)
                          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v847, v569);
                      }
                      ++*((_DWORD *)v581 + 2);
                      v806 = 1;
                      goto LABEL_942;
                    }
                    v548 = 0;
                    goto LABEL_930;
                  }
                }
                else
                {
                  v575 = v841;
                }
                llvm::patchReplacementInstruction(v571, v575, v573);
                v575 = v841;
                goto LABEL_909;
              }
LABEL_838:
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v847, v484);
              goto LABEL_839;
            }
            continue;
          }
        }
        if (v848 == v847)
          v591 = (uint64_t *)((char *)&v849 + 4);
        else
          v591 = &v849;
        v592 = *(unsigned int *)v591;
        if ((_DWORD)v592)
        {
          v593 = 8 * v592;
          v594 = (uint64_t *)v848;
          while ((unint64_t)*v594 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v594;
            v593 -= 8;
            if (!v593)
              goto LABEL_969;
          }
        }
        else
        {
          v594 = (uint64_t *)v848;
        }
        v595 = (unint64_t *)((char *)v848 + 8 * v592);
        if (v594 != (uint64_t *)v595)
        {
          v596 = *v594;
LABEL_963:
          if (llvm::wouldInstructionBeTriviallyDead(v596, 0))
            sub_1C4774094(v817, v596);
          v597 = (unint64_t *)(v594 + 1);
          while (v597 != v595)
          {
            v598 = *v597++;
            v596 = v598;
            if (v598 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v594 = (uint64_t *)(v597 - 1);
              goto LABEL_963;
            }
          }
        }
LABEL_969:
        v866[0] = v868;
        v866[1] = v868;
        *(_QWORD *)&v867 = 4;
        v599 = *(_QWORD *)(v450 + 56);
        DWORD2(v867) = 0;
        v600 = *(_QWORD *)(v450 + 64);
        v57 = v600 == v599;
        v601 = 72;
        if (v57)
          v601 = 76;
        v602 = *(unsigned int *)(v450 + v601);
        if ((_DWORD)v602)
        {
          v603 = 8 * v602;
          v604 = *(uint64_t **)(v450 + 64);
          while ((unint64_t)*v604 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v604;
            v603 -= 8;
            if (!v603)
              goto LABEL_988;
          }
        }
        else
        {
          v604 = *(uint64_t **)(v450 + 64);
        }
        v605 = (_QWORD *)(v600 + 8 * v602);
        if (v604 != v605)
        {
          v606 = *v604;
LABEL_979:
          if (*(unsigned __int8 *)(v606 + 16) < 0x1Cu)
            goto LABEL_983;
          v607 = sub_1C477672C((uint64_t)v817, v606);
          v608 = *(_QWORD *)(a1 + 2512);
          v609 = 2520;
          if (v608 == *(_QWORD *)(a1 + 2504))
            v609 = 2524;
          if (v607 == (_QWORD *)(v608 + 8 * *(unsigned int *)(a1 + v609)))
LABEL_983:
            sub_1C4774094((llvm::SmallPtrSetImplBase *)v866, v606);
          v610 = (unint64_t *)(v604 + 1);
          while (v610 != v605)
          {
            v611 = *v610++;
            v606 = v611;
            if (v611 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v604 = (uint64_t *)(v610 - 1);
              goto LABEL_979;
            }
          }
        }
LABEL_988:
        llvm::SmallPtrSetImplBase::swap((uint64_t *)(v450 + 56), (uint64_t **)v866);
        if (*(_DWORD *)(v450 + 168))
        {
          v612 = v447;
          v613 = *(_QWORD *)(v450 + 64);
          if (v613 == *(_QWORD *)(v450 + 56))
            v614 = (unsigned int *)(v450 + 76);
          else
            v614 = (unsigned int *)(v450 + 72);
          v615 = *v614;
          if ((_DWORD)v615)
          {
            v616 = 8 * v615;
            v617 = *(uint64_t **)(v450 + 64);
            while ((unint64_t)*v617 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v617;
              v616 -= 8;
              if (!v616)
                goto LABEL_1025;
            }
          }
          else
          {
            v617 = *(uint64_t **)(v450 + 64);
          }
          v618 = (_QWORD *)(v613 + 8 * v615);
          if (v617 != v618)
          {
            v619 = *v617;
LABEL_1000:
            if ((*(_BYTE *)(v619 + 16) & 0xFE) == 0x3C)
            {
              v620 = sub_1C5BE1F10(a1, v619);
              v621 = *(_QWORD *)(a1 + 8);
              v622 = *(_QWORD *)(v621 + 24);
              v623 = *(unsigned int *)(v621 + 40);
              if (!(_DWORD)v623)
                goto LABEL_1007;
              LODWORD(v624) = ((v620 >> 4) ^ (v620 >> 9)) & (v623 - 1);
              v625 = (uint64_t *)(v622 + 16 * v624);
              v626 = *v625;
              if (v620 != *v625)
              {
                v627 = 1;
                while (v626 != -4096)
                {
                  v628 = v624 + v627++;
                  v624 = v628 & (v623 - 1);
                  v626 = *(_QWORD *)(v622 + 16 * v624);
                  if (v620 == v626)
                  {
                    v625 = (uint64_t *)(v622 + 16 * v624);
                    goto LABEL_1008;
                  }
                }
LABEL_1007:
                v625 = (uint64_t *)(v622 + 16 * v623);
              }
LABEL_1008:
              v629 = v625[1];
              v631 = *(_DWORD *)(v629 + 72);
              v630 = *(_DWORD *)(v629 + 76);
              if (*(unsigned __int8 *)(v619 + 16) <= 0x1Bu)
                v632 = 0;
              else
                v632 = v619;
              v633 = *(_DWORD *)(a1 + 2224);
              if (v633)
              {
                v634 = *(_QWORD *)(a1 + 2208);
                v635 = v633 - 1;
                v636 = ((v632 >> 4) ^ (v632 >> 9)) & (v633 - 1);
                v637 = *(_QWORD *)(v634 + 16 * v636);
                if (v632 != v637)
                {
                  v638 = 1;
                  while (v637 != -4096)
                  {
                    v639 = v636 + v638++;
                    v636 = v639 & v635;
                    v637 = *(_QWORD *)(v634 + 16 * v636);
                    if (v632 == v637)
                      goto LABEL_1016;
                  }
                  goto LABEL_1017;
                }
LABEL_1016:
                v640 = *(_DWORD *)(v634 + 16 * v636 + 8);
              }
              else
              {
LABEL_1017:
                v640 = 0;
              }
              if (LODWORD(v874[1]) >= HIDWORD(v874[1]))
              {
                __base[0] = (void *)__PAIR64__(v630, v631);
                LODWORD(__base[1]) = v640;
                v859 = (unint64_t)v619;
                sub_1C47E9C18((uint64_t)v874, (unint64_t)__base);
              }
              else
              {
                v641 = (char *)v874[0] + 32 * LODWORD(v874[1]);
                *(_DWORD *)v641 = v631;
                *((_DWORD *)v641 + 1) = v630;
                *((_DWORD *)v641 + 2) = v640;
                *((_QWORD *)v641 + 2) = v619;
                *((_QWORD *)v641 + 3) = 0;
                ++LODWORD(v874[1]);
              }
            }
            v642 = (unint64_t *)(v617 + 1);
            while (v642 != v618)
            {
              v643 = *v642++;
              v619 = v643;
              if (v643 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                v617 = (uint64_t *)(v642 - 1);
                goto LABEL_1000;
              }
            }
          }
LABEL_1025:
          v644 = LODWORD(v874[1]);
          if (LODWORD(v874[1]) >= 2)
          {
            qsort(v874[0], LODWORD(v874[1]), 0x20uLL, (int (__cdecl *)(const void *, const void *))sub_1C5BE86C4);
            v644 = LODWORD(v874[1]);
          }
          __base[0] = &v859;
          __base[1] = (void *)0x800000000;
          v861 = &v863;
          v862 = 0x800000000;
          v447 = v612;
          if (v644)
          {
            v645 = (char *)v874[0];
            v646 = (char *)v874[0] + 32 * v644;
            do
            {
              v157 = (llvm::Value *)*(unsigned int *)v645;
              v647 = *((_DWORD *)v645 + 1);
              v648 = *((_QWORD *)v645 + 2) & 0xFFFFFFFFFFFFFFF8;
              if ((_DWORD)v862)
              {
                v649 = (char *)v861 + 8 * v862;
                if (*((_DWORD *)v649 - 2) > (int)v157 || *((_DWORD *)v649 - 1) < v647)
                {
                  v650 = v862 - 1;
                  v651 = (signed int *)(v649 - 4);
                  v652 = LODWORD(__base[1]) - 1;
                  while (*(v651 - 1) > (int)v157 || *v651 < v647)
                  {
                    LODWORD(v862) = v650;
                    LODWORD(__base[1]) = v652;
                    --v650;
                    v651 -= 2;
                    --v652;
                    if (v650 == -1)
                      goto LABEL_1036;
                  }
                }
                if (*(_BYTE *)(v648 + 16) != 60)
                {
                  sub_1C4774094(v817, v648);
                  v653 = sub_1C477672C(v450 + 56, v648);
                  v654 = *(_QWORD *)(v450 + 64);
                  v655 = 72;
                  if (v654 == *(_QWORD *)(v450 + 56))
                    v655 = 76;
                  if (v653 != (_QWORD *)(v654 + 8 * *(unsigned int *)(v450 + v655)))
                  {
                    *v653 = -2;
                    ++*(_DWORD *)(v450 + 80);
                  }
                }
              }
              else
              {
LABEL_1036:
                sub_1C5BE8638((uint64_t)__base, v648, v157, v647);
              }
              v645 += 32;
            }
            while (v645 != v646);
            if (v861 != &v863)
              free(v861);
          }
          if (__base[0] != &v859)
            free(__base[0]);
        }
        if (v866[1] != v866[0])
          free(v866[1]);
      }
    }
LABEL_1050:
    if (v848 != v847)
      free(v848);
    if (v874[0] != &v874[2])
      free(v874[0]);
    if (v447 != v824)
      continue;
    break;
  }
  v448 = v830;
  v449 = v806;
LABEL_1058:
  MEMORY[0x1CAA32FB4](v448, 8);
  MEMORY[0x1CAA32FB4](v852, 8);
  v657 = *(_QWORD *)(a1 + 2512);
  v658 = 2520;
  if (v657 == *(_QWORD *)(a1 + 2504))
    v658 = 2524;
  v659 = *(unsigned int *)(a1 + v658);
  if ((_DWORD)v659)
  {
    v660 = 8 * v659;
    v661 = *(unint64_t **)(a1 + 2512);
    while (*v661 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v661;
      v660 -= 8;
      if (!v660)
        goto LABEL_1074;
    }
  }
  else
  {
    v661 = *(unint64_t **)(a1 + 2512);
  }
  v662 = (unint64_t *)(v657 + 8 * v659);
  if (v661 != v662)
  {
    v663 = *v661;
LABEL_1068:
    if (*(_QWORD *)(v663 + 8))
    {
      v664 = (llvm::Value *)llvm::PoisonValue::get(*(llvm::PoisonValue **)v663, v656);
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v663, v664, (llvm::Value *)1);
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v663 + 40) + 40, (uint64_t ***)v663);
    v665 = *(_QWORD *)(v663 + 24);
    v666 = *(_QWORD **)(v663 + 32);
    *v666 = v665;
    *(_QWORD *)(v665 + 8) = v666;
    *(_QWORD *)(v663 + 24) = 0;
    *(_QWORD *)(v663 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v663);
    v667 = v661 + 1;
    while (v667 != v662)
    {
      v668 = *v667++;
      v663 = v668;
      if (v668 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v661 = v667 - 1;
        goto LABEL_1068;
      }
    }
  }
LABEL_1074:
  v669 = v449 | (*(_DWORD *)(a1 + 2524) != *(_DWORD *)(a1 + 2528));
  v670 = *(_QWORD *)a1 + 72;
  v671 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  if (v671 != v670)
  {
    while (1)
    {
      v672 = v671 ? v671 - 24 : 0;
      v673 = sub_1C477672C(v814, v672);
      v676 = *(_QWORD *)(a1 + 2000);
      v677 = v676 == *(_QWORD *)(a1 + 1992) ? 2012 : 2008;
      if (v673 == (_QWORD *)(v676 + 8 * *(unsigned int *)(a1 + v677)))
        break;
      v671 = *(_QWORD *)(v671 + 8);
      if (v671 == v670)
        goto LABEL_1113;
    }
    if (v671 != v670)
    {
LABEL_1085:
      if (v671)
        v678 = v671 - 24;
      else
        v678 = 0;
      v825 = v678;
      v680 = *(uint64_t *****)(v678 + 40);
      v679 = (_QWORD *)(v678 + 40);
      v681 = *v680;
      if (*v680 != v679)
      {
        do
        {
          v682 = *v681;
          if (*(v681 - 2))
          {
            v683 = (llvm::Value *)llvm::PoisonValue::get((llvm::PoisonValue *)*(v681 - 3), v674);
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)(v681 - 3), v683, (llvm::Value *)1);
          }
          if (*((_BYTE *)v681 - 8) != 94)
          {
            llvm::salvageKnowledge((llvm *)(v681 - 3), *(char ***)(a1 + 48), 0, v675);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v681[2] + 5), v681 - 3);
            v684 = *v681;
            v685 = (uint64_t *)v681[1];
            *v685 = (uint64_t)*v681;
            v684[1] = v685;
            *v681 = 0;
            v681[1] = 0;
            llvm::Value::deleteValue((llvm::Value *)(v681 - 3));
          }
          v681 = (uint64_t ***)v682;
        }
        while (v682 != v679);
      }
      v686 = ***(llvm::PoisonValue ****)v825;
      v687 = operator new(0x80uLL);
      v687[21] = v687[21] & 0x38000000 | 2;
      v688 = (llvm::StoreInst *)(v687 + 16);
      *(_QWORD *)v687 = 0;
      *((_QWORD *)v687 + 1) = 0;
      *((_QWORD *)v687 + 2) = 0;
      *((_QWORD *)v687 + 3) = v687 + 16;
      *((_QWORD *)v687 + 4) = 0;
      *((_QWORD *)v687 + 5) = 0;
      *((_QWORD *)v687 + 6) = 0;
      *((_QWORD *)v687 + 7) = v687 + 16;
      v686 = (llvm::PoisonValue *)((char *)v686 + 1912);
      v820 = (llvm::Value *)llvm::PoisonValue::get(v686, v689);
      v690 = (llvm::Constant *)llvm::PointerType::get(v686, 0);
      NullValue = llvm::Constant::getNullValue(v690, v691);
      v693 = *(_QWORD **)(v825 + 40);
      if (v693 == v679)
      {
        v695 = 0;
      }
      else
      {
        if (v693)
          v694 = (unsigned __int8 *)(v693 - 3);
        else
          v694 = 0;
        if (v694[16] - 29 >= 0xB)
          v695 = 0;
        else
          v695 = (llvm::Instruction *)v694;
      }
      llvm::StoreInst::StoreInst(v688, v820, (llvm::Value *)NullValue, 0, v695);
      while (1)
      {
        v671 = *(_QWORD *)(v671 + 8);
        if (v671 == v670)
          break;
        if (v671)
          v696 = v671 - 24;
        else
          v696 = 0;
        v697 = sub_1C477672C(v814, v696);
        v698 = *(_QWORD *)(a1 + 2000);
        if (v698 == *(_QWORD *)(a1 + 1992))
          v699 = 2012;
        else
          v699 = 2008;
        if (v697 == (_QWORD *)(v698 + 8 * *(unsigned int *)(a1 + v699)))
          goto LABEL_1085;
      }
      v669 = 1;
    }
  }
LABEL_1113:
  v700 = *(_QWORD *)(a1 + 1360) - *(_QWORD *)(a1 + 1352);
  if ((v700 & 0x7FFFFFFF8) != 0)
  {
    v701 = 0;
    v702 = (v700 >> 3);
    do
    {
      v703 = *(_QWORD *)(a1 + 1352);
      v704 = *(_QWORD **)(v703 + 8 * v701);
      if (v704)
      {
        v705 = (void *)v704[16];
        if (v705 != (void *)v704[15])
          free(v705);
        v706 = (void *)v704[8];
        if (v706 != (void *)v704[7])
          free(v706);
        MEMORY[0x1CAA32FC0](v704, 0x10E0C40BCBF079FLL);
        v703 = *(_QWORD *)(a1 + 1352);
      }
      *(_QWORD *)(v703 + 8 * v701++) = 0;
    }
    while (v702 != v701);
  }
  v707 = *(uint64_t **)(a1 + 1672);
  v708 = *(unsigned int *)(a1 + 1688);
  v709 = &v707[v708];
  if (*(_DWORD *)(a1 + 1680))
  {
    if ((_DWORD)v708)
    {
      v710 = 8 * v708;
      while ((*v707 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v707;
        v710 -= 8;
        if (!v710)
          goto LABEL_1127;
      }
    }
  }
  else
  {
LABEL_1127:
    v707 = v709;
  }
  v874[0] = &v874[2];
  v874[1] = (void *)0x800000000;
  sub_1C619D148((unsigned int *)v874, v707, v709, v709);
  sub_1C619D588((_DWORD *)(a1 + 1672));
  v711 = v874[1];
  if (!LODWORD(v874[1]))
    goto LABEL_1142;
  v712 = (char *)v874[0];
  v713 = (char *)v874[0] + 8 * LODWORD(v874[1]);
  while (2)
  {
    v714 = *(_QWORD *)v712;
    v715 = *(_DWORD *)(*(_QWORD *)v712 + 20);
    if ((v715 & 0x40000000) != 0)
    {
      v717 = *(_QWORD *)(v714 - 8);
      v716 = v715 & 0x7FFFFFF;
      if (v716)
        goto LABEL_1132;
    }
    else
    {
      v716 = v715 & 0x7FFFFFF;
      v717 = v714 - 32 * v716;
      if (v716)
      {
LABEL_1132:
        v718 = 32 * v716;
        v719 = (_QWORD **)(v717 + 16);
        do
        {
          if (*(v719 - 2))
          {
            **v719 = *(v719 - 1);
            v720 = (uint64_t)*(v719 - 1);
            if (v720)
              *(_QWORD *)(v720 + 16) = *v719;
          }
          *(v719 - 2) = 0;
          v719 += 4;
          v718 -= 32;
        }
        while (v718);
      }
    }
    v712 += 8;
    if (v712 != v713)
      continue;
    break;
  }
  do
  {
    v721 = (llvm::Value *)*((_QWORD *)v874[0] + v711 - 1);
    LODWORD(v874[1]) = v711 - 1;
    llvm::Value::deleteValue(v721);
    v711 = v874[1];
  }
  while (LODWORD(v874[1]));
LABEL_1142:
  v722 = *(_DWORD *)(a1 + 1392);
  if (v722)
  {
    v723 = *(unsigned int *)(a1 + 1400);
    if (v723 <= 4 * v722 || v723 < 0x41)
      goto LABEL_1155;
    v724 = (_QWORD *)*v821;
    v725 = 1 << (33 - __clz(v722 - 1));
    if (v725 <= 64)
      v726 = 64;
    else
      v726 = v725;
    if (v726 == (_DWORD)v723)
    {
      *(_QWORD *)(a1 + 1392) = 0;
      v727 = 16 * v723;
      do
      {
        *v724 = -4096;
        v724 += 2;
        v727 -= 16;
      }
      while (v727);
    }
    else
    {
      MEMORY[0x1CAA32FB4](v724, 8);
      v756 = (4 * v726 / 3u + 1) | ((unint64_t)(4 * v726 / 3u + 1) >> 1);
      v757 = v756 | (v756 >> 2) | ((v756 | (v756 >> 2)) >> 4);
      LODWORD(v757) = (((v757 | (v757 >> 8)) >> 16) | v757 | (v757 >> 8)) + 1;
      *(_DWORD *)(a1 + 1400) = v757;
      v758 = operator new(16 * v757, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 1384) = v758;
      *(_QWORD *)(a1 + 1392) = 0;
      v759 = *(unsigned int *)(a1 + 1400);
      if ((_DWORD)v759)
      {
        v760 = 16 * v759;
        do
        {
          *v758 = -4096;
          v758 += 2;
          v760 -= 16;
        }
        while (v760);
      }
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 1396))
      goto LABEL_1159;
    LODWORD(v723) = *(_DWORD *)(a1 + 1400);
    if (v723 > 0x40)
    {
      MEMORY[0x1CAA32FB4](*v821, 8);
      *v821 = 0;
      *(_QWORD *)(a1 + 1392) = 0;
      *(_DWORD *)(a1 + 1400) = 0;
      goto LABEL_1159;
    }
LABEL_1155:
    if ((_DWORD)v723)
    {
      v728 = (_QWORD *)*v821;
      v729 = 16 * v723;
      do
      {
        *v728 = -4096;
        v728 += 2;
        v729 -= 16;
      }
      while (v729);
    }
    *(_QWORD *)(a1 + 1392) = 0;
  }
LABEL_1159:
  *(_DWORD *)(a1 + 176) = 0;
  sub_1C4926A50(v804);
  *(_QWORD *)(a1 + 1360) = *(_QWORD *)(a1 + 1352);
  v730 = *(_DWORD *)(a1 + 1848);
  if (v730)
  {
    v731 = *v800;
    if (v731 <= 4 * v730 || v731 < 0x41)
      goto LABEL_1172;
    v732 = (_QWORD *)*v801;
    v733 = 1 << (33 - __clz(v730 - 1));
    if (v733 <= 64)
      v734 = 64;
    else
      v734 = v733;
    if (v734 == (_DWORD)v731)
    {
      *(_QWORD *)(a1 + 1848) = 0;
      v735 = 16 * v731;
      do
      {
        *v732 = -8;
        v732 += 2;
        v735 -= 16;
      }
      while (v735);
    }
    else
    {
      MEMORY[0x1CAA32FB4](v732, 8);
      v761 = (4 * v734 / 3u + 1) | ((unint64_t)(4 * v734 / 3u + 1) >> 1);
      v762 = v761 | (v761 >> 2) | ((v761 | (v761 >> 2)) >> 4);
      LODWORD(v762) = (((v762 | (v762 >> 8)) >> 16) | v762 | (v762 >> 8)) + 1;
      *(_DWORD *)(a1 + 1856) = v762;
      v763 = operator new(16 * v762, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 1840) = v763;
      *(_QWORD *)(a1 + 1848) = 0;
      v764 = *(unsigned int *)(a1 + 1856);
      if ((_DWORD)v764)
      {
        v765 = 16 * v764;
        do
        {
          *v763 = -8;
          v763 += 2;
          v765 -= 16;
        }
        while (v765);
      }
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 1852))
      goto LABEL_1176;
    LODWORD(v731) = *v800;
    if (*v800 > 0x40u)
    {
      MEMORY[0x1CAA32FB4](*v801, 8);
      *v800 = 0;
      *v801 = 0;
      *(_QWORD *)(a1 + 1848) = 0;
      goto LABEL_1176;
    }
LABEL_1172:
    if ((_DWORD)v731)
    {
      v736 = (_QWORD *)*v801;
      v737 = 16 * v731;
      do
      {
        *v736 = -8;
        v736 += 2;
        v737 -= 16;
      }
      while (v737);
    }
    *(_QWORD *)(a1 + 1848) = 0;
  }
LABEL_1176:
  sub_1C61446F0((unsigned int *)(a1 + 1408));
  sub_1C61446F0((unsigned int *)(a1 + 1576));
  sub_1C63233B4((unsigned int *)(a1 + 1600));
  sub_1C6323460((unsigned int *)(a1 + 1624));
  sub_1C61446F0((unsigned int *)(a1 + 1552));
  sub_1C61446F0((unsigned int *)(a1 + 1648));
  v738 = *(void **)(a1 + 1440);
  if (v738 == *(void **)(a1 + 1432))
  {
LABEL_1177:
    *(_QWORD *)(a1 + 1452) = 0;
    goto LABEL_1178;
  }
  v753 = *(unsigned int *)(a1 + 1448);
  if (v753 < 0x21 || 4 * (*(_DWORD *)(a1 + 1452) - *(_DWORD *)(a1 + 1456)) >= v753)
  {
    memset(v738, 255, 8 * v753);
    goto LABEL_1177;
  }
  free(v738);
  v777 = *(_DWORD *)(a1 + 1452) - *(_DWORD *)(a1 + 1456);
  v778 = 1 << (33 - __clz(v777 - 1));
  if (v777 <= 0x10)
    v779 = 32;
  else
    v779 = v778;
  *(_DWORD *)(a1 + 1448) = v779;
  *(_QWORD *)(a1 + 1452) = 0;
  v780 = malloc_type_malloc(8 * v779, 0x4065EBACuLL);
  if (!v780)
    goto LABEL_1274;
  *(_QWORD *)(a1 + 1440) = v780;
  memset(v780, 255, 8 * *(unsigned int *)(a1 + 1448));
LABEL_1178:
  sub_1C61446F0((unsigned int *)(a1 + 1528));
  v739 = *(void **)(a1 + 2000);
  if (v739 == *(void **)(a1 + 1992))
  {
LABEL_1179:
    *(_QWORD *)(a1 + 2012) = 0;
    goto LABEL_1180;
  }
  v754 = *(unsigned int *)(a1 + 2008);
  if (v754 < 0x21 || 4 * (*(_DWORD *)(a1 + 2012) - *(_DWORD *)(a1 + 2016)) >= v754)
  {
    memset(v739, 255, 8 * v754);
    goto LABEL_1179;
  }
  free(v739);
  v781 = *(_DWORD *)(a1 + 2012) - *(_DWORD *)(a1 + 2016);
  v782 = 1 << (33 - __clz(v781 - 1));
  v783 = v781 <= 0x10 ? 32 : v782;
  *(_DWORD *)(a1 + 2008) = v783;
  *(_QWORD *)(a1 + 2012) = 0;
  v784 = malloc_type_malloc(8 * v783, 0x4065EBACuLL);
  if (!v784)
    goto LABEL_1274;
  *(_QWORD *)(a1 + 2000) = v784;
  memset(v784, 255, 8 * *(unsigned int *)(a1 + 2008));
LABEL_1180:
  sub_1C63236DC(a1 + 1968);
  sub_1C4ECAD30(v822);
  v740 = *(void **)(a1 + 2512);
  if (v740 == *(void **)(a1 + 2504))
  {
LABEL_1181:
    *(_QWORD *)(a1 + 2524) = 0;
    goto LABEL_1182;
  }
  v755 = *(unsigned int *)(a1 + 2520);
  if (v755 < 0x21 || 4 * (*(_DWORD *)(a1 + 2524) - *(_DWORD *)(a1 + 2528)) >= v755)
  {
    memset(v740, 255, 8 * v755);
    goto LABEL_1181;
  }
  free(v740);
  v785 = *(_DWORD *)(a1 + 2524) - *(_DWORD *)(a1 + 2528);
  v786 = 1 << (33 - __clz(v785 - 1));
  v787 = v785 <= 0x10 ? 32 : v786;
  *(_DWORD *)(a1 + 2520) = v787;
  *(_QWORD *)(a1 + 2524) = 0;
  v788 = malloc_type_malloc(8 * v787, 0x4065EBACuLL);
  if (!v788)
    goto LABEL_1274;
  *(_QWORD *)(a1 + 2512) = v788;
  memset(v788, 255, 8 * *(unsigned int *)(a1 + 2520));
LABEL_1182:
  *(_DWORD *)(a1 + 2240) = 0;
  sub_1C61446F0((unsigned int *)v803);
  *(_DWORD *)(a1 + 2152) = 0;
  *(_DWORD *)(a1 + 2096) = 0;
  v741 = *(_DWORD *)(a1 + 1776);
  if (v741)
  {
    v742 = *(unsigned int *)(a1 + 1784);
    if (v742 <= 4 * v741 || v742 < 0x41)
      goto LABEL_1195;
    v743 = (_QWORD *)*v816;
    v744 = 1 << (33 - __clz(v741 - 1));
    if (v744 <= 64)
      v745 = 64;
    else
      v745 = v744;
    if (v745 == (_DWORD)v742)
    {
      *(_QWORD *)(a1 + 1776) = 0;
      v746 = 16 * v742;
      do
      {
        *v743 = -4096;
        v743 += 2;
        v746 -= 16;
      }
      while (v746);
    }
    else
    {
      MEMORY[0x1CAA32FB4](v743, 8);
      v766 = (4 * v745 / 3u + 1) | ((unint64_t)(4 * v745 / 3u + 1) >> 1);
      v767 = v766 | (v766 >> 2) | ((v766 | (v766 >> 2)) >> 4);
      LODWORD(v767) = (((v767 | (v767 >> 8)) >> 16) | v767 | (v767 >> 8)) + 1;
      *(_DWORD *)(a1 + 1784) = v767;
      v768 = operator new(16 * v767, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 1768) = v768;
      *(_QWORD *)(a1 + 1776) = 0;
      v769 = *(unsigned int *)(a1 + 1784);
      if ((_DWORD)v769)
      {
        v770 = 16 * v769;
        do
        {
          *v768 = -4096;
          v768 += 2;
          v770 -= 16;
        }
        while (v770);
      }
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 1780))
      goto LABEL_1199;
    LODWORD(v742) = *(_DWORD *)(a1 + 1784);
    if (v742 > 0x40)
    {
      MEMORY[0x1CAA32FB4](*v816, 8);
      *v816 = 0;
      *(_QWORD *)(a1 + 1776) = 0;
      *(_DWORD *)(a1 + 1784) = 0;
      goto LABEL_1199;
    }
LABEL_1195:
    if ((_DWORD)v742)
    {
      v747 = (_QWORD *)*v816;
      v748 = 16 * v742;
      do
      {
        *v747 = -4096;
        v747 += 2;
        v748 -= 16;
      }
      while (v748);
    }
    *(_QWORD *)(a1 + 1776) = 0;
  }
LABEL_1199:
  sub_1C63233B4((unsigned int *)(a1 + 1720));
  sub_1C63233B4((unsigned int *)(a1 + 1744));
  sub_1C632351C(v810);
  sub_1C61446F0((unsigned int *)(a1 + 2184));
  if (v874[0] != &v874[2])
    free(v874[0]);
  if (v826)
  {
    v827 = (char *)v826;
    operator delete(v826);
  }
  return v669 & 1;
}

uint64_t sub_1C5BDFD84(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  llvm::PredicateInfo *v12;

  v2 = *(void **)(a1 + 2512);
  if (v2 != *(void **)(a1 + 2504))
    free(v2);
  v3 = *(void **)(a1 + 2232);
  if (v3 != (void *)(a1 + 2248))
    free(v3);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 2208), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 2184), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 2160), 8);
  v4 = *(void **)(a1 + 2088);
  if (v4 != (void *)(a1 + 2104))
    free(v4);
  v5 = *(void **)(a1 + 2000);
  if (v5 != *(void **)(a1 + 1992))
    free(v5);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1968), 8);
  v6 = *(void **)(a1 + 1880);
  if (v6 != *(void **)(a1 + 1872))
    free(v6);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1840), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1816), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1792), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1768), 8);
  sub_1C6323608((unsigned int *)(a1 + 1744));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1744), 8);
  sub_1C6323608((unsigned int *)(a1 + 1720));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1720), 8);
  sub_1C632374C((_DWORD *)(a1 + 1696));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1696), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1672), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1648), 8);
  sub_1C632366C((unsigned int *)(a1 + 1624));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1624), 8);
  sub_1C6323608((unsigned int *)(a1 + 1600));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1600), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1576), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1552), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1528), 8);
  v7 = *(void **)(a1 + 1440);
  if (v7 != *(void **)(a1 + 1432))
    free(v7);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1408), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1384), 8);
  v8 = *(void **)(a1 + 1352);
  if (v8)
  {
    *(_QWORD *)(a1 + 1360) = v8;
    operator delete(v8);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1320), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1240), 8);
  sub_1C63237E8((char **)(a1 + 456));
  v9 = *(void **)(a1 + 376);
  if (v9 != (void *)(a1 + 392))
    free(v9);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 352), 8);
  v10 = *(void **)(a1 + 264);
  if (v10 != *(void **)(a1 + 256))
    free(v10);
  v11 = *(void **)(a1 + 168);
  if (v11 != (void *)(a1 + 184))
    free(v11);
  sub_1C4926AE8(a1 + 72);
  v12 = *(llvm::PredicateInfo **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v12)
  {
    llvm::PredicateInfo::~PredicateInfo(v12);
    MEMORY[0x1CAA32FC0]();
  }
  return a1;
}

BOOL sub_1C5BDFFD4(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_1C5B1C404(a1, a2);
  if (result)
    return *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48);
  return result;
}

BOOL sub_1C5BE000C(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;

  result = sub_1C5B1C404(a1, a2);
  if (result)
  {
    v5 = *(unsigned int *)(a1 + 52);
    return (_DWORD)v5 == *(_DWORD *)(a2 + 52)
        && memcmp(*(const void **)(a1 + 56), *(const void **)(a2 + 56), 4 * v5) == 0;
  }
  return result;
}

BOOL sub_1C5BE0064(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_1C5B1C404(a1, a2);
  if (result)
    return *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48);
  return result;
}

uint64_t sub_1C5BE009C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5BDA928(v0);
}

void sub_1C5BE00C8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5BE00EC(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
}

uint64_t sub_1C5BE0198(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  uint64_t v4;
  char **v5;
  char *v6;
  uint64_t v7;
  char **v8;
  char *v9;
  llvm::AssumptionCacheTracker *v10;
  llvm::AssumptionCache *AssumptionCache;
  char **v12;
  char *v13;
  uint64_t v14;
  void **v15;
  unint64_t v16;
  uint64_t v17;
  llvm::DominatorTree *v18;
  char **v19;
  char *v20;
  uint64_t v21;
  void **v22;
  void *v23;
  uint64_t v24;
  void *v26;
  void **v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30[2];
  int v31;
  uint64_t v32[2];
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  void *__src;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
    return 0;
  v5 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != llvm::DominatorTreeWrapperPass::ID);
  v7 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), llvm::DominatorTreeWrapperPass::ID);
  v8 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != llvm::AssumptionCacheTracker::ID);
  v10 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = (llvm::AssumptionCache *)llvm::AssumptionCacheTracker::getAssumptionCache(v10, a2);
  v12 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v13 = *v12;
    v12 += 2;
  }
  while (v13 != llvm::TargetLibraryInfoWrapperPass::ID);
  v14 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v12 - 1) + 96))(*(v12 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v30[0] = 0;
  v30[1] = 0;
  v31 = 0;
  v32[0] = 0;
  v32[1] = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  llvm::TargetLibraryAnalysis::run(v14 + 32, (uint64_t)a2, (uint64_t)&v37);
  *(_QWORD *)(v14 + 240) = v37;
  if (!*(_BYTE *)(v14 + 320))
  {
    v26 = (void *)(v14 + 264);
    *(_QWORD *)(v14 + 248) = v14 + 264;
    v27 = (void **)(v14 + 248);
    *(_QWORD *)(v14 + 256) = 0x600000000;
    v28 = v39;
    if (!v39 || v27 == &__src)
      goto LABEL_39;
    if (v39 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v14 + 248, v14 + 264, v39, 8);
      v29 = v39;
      if (!v39)
      {
LABEL_38:
        *(_DWORD *)(v14 + 256) = v28;
LABEL_39:
        *(_DWORD *)(v14 + 312) = v41;
        *(_BYTE *)(v14 + 320) = 1;
        goto LABEL_23;
      }
      v26 = *v27;
    }
    else
    {
      v29 = v39;
    }
    memcpy(v26, __src, 8 * v29);
    goto LABEL_38;
  }
  if ((uint64_t *)(v14 + 240) != &v37)
  {
    v15 = (void **)(v14 + 248);
    v16 = v39;
    v17 = *(unsigned int *)(v14 + 256);
    if (v17 >= v39)
    {
      if (v39)
        memmove(*v15, __src, 8 * v39);
      goto LABEL_21;
    }
    if (*(_DWORD *)(v14 + 260) < v39)
    {
      *(_DWORD *)(v14 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v14 + 248, v14 + 264, v16, 8);
    }
    else if ((_DWORD)v17)
    {
      memmove(*v15, __src, 8 * v17);
      goto LABEL_19;
    }
    v17 = 0;
LABEL_19:
    if (v17 != v39)
      memcpy((char *)*v15 + 8 * v17, (char *)__src + 8 * v17, 8 * v39 - 8 * v17);
LABEL_21:
    *(_DWORD *)(v14 + 256) = v16;
  }
  *(_DWORD *)(v14 + 312) = v41;
LABEL_23:
  v18 = (llvm::DominatorTree *)(v7 + 32);
  if (__src != &v40)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v32);
  sub_1C4D8B52C(v30);
  v19 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v20 = *v19;
    v19 += 2;
  }
  while (v20 != llvm::AAResultsWrapperPass::ID);
  v21 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v19 - 1) + 96))(*(v19 - 1), llvm::AAResultsWrapperPass::ID)+ 32);
  v22 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v23 = *v22;
    v22 += 2;
  }
  while (v23 != &llvm::MemorySSAWrapperPass::ID);
  v24 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v22 - 1) + 96))(*(v22 - 1), &llvm::MemorySSAWrapperPass::ID);
  sub_1C5BDAB60((uint64_t)&v37, a2, v18, AssumptionCache, v14 + 240, v21, *(_QWORD *)(v24 + 32), *((_QWORD *)a2 + 5) + 272);
  v4 = sub_1C5BDADFC((uint64_t)&v37);
  sub_1C5BDFD84((uint64_t)&v37);
  return v4;
}

uint64_t sub_1C5BE052C(uint64_t result, uint64_t *a2, _QWORD *a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t *v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t *v63;
  BOOL v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  unsigned int v76;
  uint64_t *v77;
  int64_t v78;
  int64_t v79;
  int64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;

  v8 = (uint64_t *)result;
LABEL_2:
  v138 = a2 - 1;
  v9 = v8;
  while (2)
  {
    v10 = v9;
    v11 = (char *)a2 - (char *)v9;
    v12 = a2 - v9;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v134 = *(a2 - 1);
        v146 = *v9;
        v147 = v134;
        v135 = *a3 + 1320;
        v136 = *((_DWORD *)sub_1C6144C70(v135, &v147) + 2);
        result = (uint64_t)sub_1C6144C70(v135, &v146);
        if (v136 < *(_DWORD *)(result + 8))
        {
          v137 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v137;
        }
        return result;
      case 3uLL:
        return (uint64_t)sub_1C5BE11C0(v9, v9 + 1, v138, a3);
      case 4uLL:
        return (uint64_t)sub_1C5BE15A0(v9, v9 + 1, v9 + 2, v138, a3);
      case 5uLL:
        return (uint64_t)sub_1C5BE1034(v9, v9 + 1, v9 + 2, v9 + 3, v138, a3);
      default:
        v145 = v9;
        if (v11 <= 191)
        {
          v63 = v9 + 1;
          v65 = v9 == a2 || v63 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v65)
            {
              v66 = 0;
              v67 = v9;
              do
              {
                v69 = *v67;
                v68 = v67[1];
                v67 = v63;
                v146 = v69;
                v147 = v68;
                v70 = *a3 + 1320;
                v71 = *((_DWORD *)sub_1C6144C70(v70, &v147) + 2);
                result = (uint64_t)sub_1C6144C70(v70, &v146);
                if (v71 < *(_DWORD *)(result + 8))
                {
                  v72 = *v67;
                  v73 = v66;
                  while (1)
                  {
                    *(uint64_t *)((char *)v10 + v73 + 8) = *(uint64_t *)((char *)v10 + v73);
                    if (!v73)
                      break;
                    v146 = *(uint64_t *)((char *)v10 + v73 - 8);
                    v147 = v72;
                    v74 = *a3 + 1320;
                    v75 = a2;
                    v76 = *((_DWORD *)sub_1C6144C70(v74, &v147) + 2);
                    result = (uint64_t)sub_1C6144C70(v74, &v146);
                    v73 -= 8;
                    v99 = v76 >= *(_DWORD *)(result + 8);
                    a2 = v75;
                    v10 = v9;
                    if (v99)
                    {
                      v77 = (uint64_t *)((char *)v9 + v73 + 8);
                      goto LABEL_71;
                    }
                  }
                  v77 = v10;
LABEL_71:
                  *v77 = v72;
                }
                v63 = v67 + 1;
                v66 += 8;
              }
              while (v67 + 1 != a2);
            }
          }
          else if (!v65)
          {
            do
            {
              v125 = *v10;
              v124 = v10[1];
              v10 = v63;
              v146 = v125;
              v147 = v124;
              v126 = *a3 + 1320;
              v127 = *((_DWORD *)sub_1C6144C70(v126, &v147) + 2);
              result = (uint64_t)sub_1C6144C70(v126, &v146);
              if (v127 < *(_DWORD *)(result + 8))
              {
                v128 = *v10;
                v129 = v10;
                do
                {
                  v130 = v129;
                  v131 = *--v129;
                  *v130 = v131;
                  v146 = *(v130 - 2);
                  v147 = v128;
                  v132 = *a3 + 1320;
                  v133 = *((_DWORD *)sub_1C6144C70(v132, &v147) + 2);
                  result = (uint64_t)sub_1C6144C70(v132, &v146);
                }
                while (v133 < *(_DWORD *)(result + 8));
                *v129 = v128;
              }
              v63 = v10 + 1;
            }
            while (v10 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v78 = (v12 - 2) >> 1;
            v79 = v78;
            v140 = a2;
            do
            {
              v80 = v79;
              if (v78 >= v79)
              {
                v81 = (2 * v79) | 1;
                v82 = &v145[v81];
                if (2 * v79 + 2 < (uint64_t)v12)
                {
                  v83 = *v82;
                  v146 = v82[1];
                  v147 = v83;
                  v84 = *a3 + 1320;
                  v85 = *((_DWORD *)sub_1C6144C70(v84, &v147) + 2);
                  if (v85 < *((_DWORD *)sub_1C6144C70(v84, &v146) + 2))
                  {
                    ++v82;
                    v81 = 2 * v80 + 2;
                  }
                }
                v86 = &v145[v80];
                v87 = v82;
                v88 = *v82;
                v146 = *v86;
                v147 = v88;
                v89 = *a3 + 1320;
                v90 = *((_DWORD *)sub_1C6144C70(v89, &v147) + 2);
                result = (uint64_t)sub_1C6144C70(v89, &v146);
                v99 = v90 >= *(_DWORD *)(result + 8);
                a2 = v140;
                if (v99)
                {
                  v143 = *v86;
                  do
                  {
                    v91 = v87;
                    *v86 = *v87;
                    if (v78 < v81)
                      break;
                    v92 = 2 * v81;
                    v81 = (2 * v81) | 1;
                    v87 = &v145[v81];
                    v93 = v92 + 2;
                    if (v92 + 2 < (uint64_t)v12)
                    {
                      v94 = *v87;
                      v95 = &v145[v81];
                      v96 = v87[1];
                      ++v87;
                      v146 = v96;
                      v147 = v94;
                      v97 = *a3 + 1320;
                      v139 = v81;
                      v98 = *((_DWORD *)sub_1C6144C70(v97, &v147) + 2);
                      v99 = v98 >= *((_DWORD *)sub_1C6144C70(v97, &v146) + 2);
                      v81 = v139;
                      if (v99)
                        v87 = v95;
                      if (!v99)
                        v81 = v93;
                    }
                    v100 = *v87;
                    v146 = v143;
                    v147 = v100;
                    v101 = *a3 + 1320;
                    v102 = *((_DWORD *)sub_1C6144C70(v101, &v147) + 2);
                    result = (uint64_t)sub_1C6144C70(v101, &v146);
                    v86 = v91;
                    v99 = v102 >= *(_DWORD *)(result + 8);
                    a2 = v140;
                  }
                  while (v99);
                  *v91 = v143;
                }
              }
              v79 = v80 - 1;
            }
            while (v80);
            v103 = v145;
            do
            {
              v104 = 0;
              v141 = a2;
              v144 = *v103;
              v105 = v103;
              do
              {
                v106 = &v105[v104 + 1];
                v107 = (2 * v104) | 1;
                v108 = 2 * v104 + 2;
                if (v108 < (uint64_t)v12)
                {
                  v109 = *v106;
                  v146 = v106[1];
                  v147 = v109;
                  v110 = *a3 + 1320;
                  v111 = *((_DWORD *)sub_1C6144C70(v110, &v147) + 2);
                  result = (uint64_t)sub_1C6144C70(v110, &v146);
                  v103 = v145;
                  if (v111 < *(_DWORD *)(result + 8))
                  {
                    ++v106;
                    v107 = v108;
                  }
                }
                *v105 = *v106;
                v105 = v106;
                v104 = v107;
              }
              while (v107 <= (uint64_t)((v12 - 2) >> 1));
              a2 = v141 - 1;
              if (v106 == v141 - 1)
              {
                *v106 = v144;
              }
              else
              {
                *v106 = *a2;
                *a2 = v144;
                v112 = (char *)v106 - (char *)v103 + 8;
                if (v112 >= 9)
                {
                  v113 = (((unint64_t)v112 >> 3) - 2) >> 1;
                  v114 = &v103[v113];
                  v115 = *v114;
                  v146 = *v106;
                  v147 = v115;
                  v116 = *a3 + 1320;
                  v117 = *((_DWORD *)sub_1C6144C70(v116, &v147) + 2);
                  result = (uint64_t)sub_1C6144C70(v116, &v146);
                  v103 = v145;
                  if (v117 < *(_DWORD *)(result + 8))
                  {
                    v118 = *v106;
                    do
                    {
                      v119 = v114;
                      *v106 = *v114;
                      if (!v113)
                        break;
                      v113 = (v113 - 1) >> 1;
                      v114 = &v103[v113];
                      v120 = *v114;
                      v146 = v118;
                      v147 = v120;
                      v121 = *a3 + 1320;
                      v122 = *((_DWORD *)sub_1C6144C70(v121, &v147) + 2);
                      result = (uint64_t)sub_1C6144C70(v121, &v146);
                      v106 = v119;
                      v103 = v145;
                    }
                    while (v122 < *(_DWORD *)(result + 8));
                    *v119 = v118;
                  }
                }
              }
            }
            while ((uint64_t)v12-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v9[v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          sub_1C5BE11C0(&v10[v12 >> 1], v10, v138, a3);
        }
        else
        {
          sub_1C5BE11C0(v10, &v10[v12 >> 1], v138, a3);
          sub_1C5BE11C0(v10 + 1, v14 - 1, a2 - 2, a3);
          sub_1C5BE11C0(v10 + 2, &v10[v13 + 1], a2 - 3, a3);
          sub_1C5BE11C0(v14 - 1, &v10[v12 >> 1], &v10[v13 + 1], a3);
          v15 = *v10;
          *v10 = *v14;
          *v14 = v15;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v39 = *(v10 - 1);
          v146 = *v10;
          v147 = v39;
          v40 = *a3 + 1320;
          v41 = *((_DWORD *)sub_1C6144C70(v40, &v147) + 2);
          if (v41 >= *((_DWORD *)sub_1C6144C70(v40, &v146) + 2))
          {
            v42 = *v10;
            v146 = *v138;
            v147 = v42;
            v43 = *a3 + 1320;
            v44 = *((_DWORD *)sub_1C6144C70(v43, &v147) + 2);
            result = (uint64_t)sub_1C6144C70(v43, &v146);
            if (v44 >= *(_DWORD *)(result + 8))
            {
              v60 = v10 + 1;
              do
              {
                v9 = v60;
                if (v60 >= a2)
                  break;
                ++v60;
                v146 = *v9;
                v147 = v42;
                v61 = *a3 + 1320;
                v62 = *((_DWORD *)sub_1C6144C70(v61, &v147) + 2);
                result = (uint64_t)sub_1C6144C70(v61, &v146);
              }
              while (v62 >= *(_DWORD *)(result + 8));
            }
            else
            {
              v9 = v10;
              do
              {
                v45 = v9[1];
                ++v9;
                v146 = v45;
                v147 = v42;
                v46 = *a3 + 1320;
                v47 = *((_DWORD *)sub_1C6144C70(v46, &v147) + 2);
                result = (uint64_t)sub_1C6144C70(v46, &v146);
              }
              while (v47 >= *(_DWORD *)(result + 8));
            }
            v48 = a2;
            if (v9 < a2)
            {
              v48 = a2;
              do
              {
                v49 = *--v48;
                v146 = v49;
                v147 = v42;
                v50 = *a3 + 1320;
                v51 = *((_DWORD *)sub_1C6144C70(v50, &v147) + 2);
                result = (uint64_t)sub_1C6144C70(v50, &v146);
              }
              while (v51 < *(_DWORD *)(result + 8));
            }
            while (v9 < v48)
            {
              v52 = *v9;
              *v9 = *v48;
              *v48 = v52;
              do
              {
                v53 = v9[1];
                ++v9;
                v146 = v53;
                v147 = v42;
                v54 = *a3 + 1320;
                v55 = *((_DWORD *)sub_1C6144C70(v54, &v147) + 2);
              }
              while (v55 >= *((_DWORD *)sub_1C6144C70(v54, &v146) + 2));
              do
              {
                v56 = *--v48;
                v146 = v56;
                v147 = v42;
                v57 = *a3 + 1320;
                v58 = *((_DWORD *)sub_1C6144C70(v57, &v147) + 2);
                result = (uint64_t)sub_1C6144C70(v57, &v146);
              }
              while (v58 < *(_DWORD *)(result + 8));
            }
            v59 = v9 - 1;
            if (v9 - 1 != v145)
              *v145 = *v59;
            a5 = 0;
            *v59 = v42;
            continue;
          }
        }
        v16 = 0;
        v17 = *v10;
        do
        {
          v18 = v10[v16 + 1];
          v146 = v17;
          v147 = v18;
          v19 = *a3 + 1320;
          v20 = *((_DWORD *)sub_1C6144C70(v19, &v147) + 2);
          ++v16;
        }
        while (v20 < *((_DWORD *)sub_1C6144C70(v19, &v146) + 2));
        v21 = &v10[v16];
        v22 = a2;
        if (v16 == 1)
        {
          v22 = a2;
          do
          {
            if (v21 >= v22)
              break;
            v36 = *--v22;
            v146 = v17;
            v147 = v36;
            v37 = *a3 + 1320;
            v38 = *((_DWORD *)sub_1C6144C70(v37, &v147) + 2);
          }
          while (v38 >= *((_DWORD *)sub_1C6144C70(v37, &v146) + 2));
        }
        else
        {
          do
          {
            v23 = *--v22;
            v146 = v17;
            v147 = v23;
            v24 = *a3 + 1320;
            v25 = *((_DWORD *)sub_1C6144C70(v24, &v147) + 2);
          }
          while (v25 >= *((_DWORD *)sub_1C6144C70(v24, &v146) + 2));
        }
        v9 = v21;
        if (v21 < v22)
        {
          v26 = v22;
          do
          {
            v27 = *v9;
            *v9 = *v26;
            *v26 = v27;
            do
            {
              v28 = v9[1];
              ++v9;
              v146 = v17;
              v147 = v28;
              v29 = *a3 + 1320;
              v30 = *((_DWORD *)sub_1C6144C70(v29, &v147) + 2);
            }
            while (v30 < *((_DWORD *)sub_1C6144C70(v29, &v146) + 2));
            do
            {
              v31 = *--v26;
              v146 = v17;
              v147 = v31;
              v32 = *a3 + 1320;
              v33 = *((_DWORD *)sub_1C6144C70(v32, &v147) + 2);
            }
            while (v33 >= *((_DWORD *)sub_1C6144C70(v32, &v146) + 2));
          }
          while (v9 < v26);
        }
        v34 = v9 - 1;
        v8 = v145;
        if (v9 - 1 != v145)
          *v145 = *v34;
        *v34 = v17;
        if (v21 < v22)
        {
LABEL_25:
          result = sub_1C5BE052C(v145, v9 - 1, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v35 = sub_1C5BE1374(v145, v9 - 1, a3);
        result = sub_1C5BE1374(v9, a2, a3);
        if (!(_DWORD)result)
        {
          if (v35)
            continue;
          goto LABEL_25;
        }
        a2 = v9 - 1;
        if (!v35)
          goto LABEL_2;
        return result;
    }
  }
}

_QWORD *sub_1C5BE1034(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  sub_1C5BE15A0(a1, a2, a3, a4, a6);
  v12 = *a5;
  v29 = *a4;
  v30 = v12;
  v13 = *a6 + 1320;
  v14 = *((_DWORD *)sub_1C6144C70(v13, &v30) + 2);
  result = sub_1C6144C70(v13, &v29);
  if (v14 < *((_DWORD *)result + 2))
  {
    v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    v17 = *a4;
    v29 = *a3;
    v30 = v17;
    v18 = *a6 + 1320;
    v19 = *((_DWORD *)sub_1C6144C70(v18, &v30) + 2);
    result = sub_1C6144C70(v18, &v29);
    if (v19 < *((_DWORD *)result + 2))
    {
      v20 = *a3;
      *a3 = *a4;
      *a4 = v20;
      v21 = *a3;
      v29 = *a2;
      v30 = v21;
      v22 = *a6 + 1320;
      v23 = *((_DWORD *)sub_1C6144C70(v22, &v30) + 2);
      result = sub_1C6144C70(v22, &v29);
      if (v23 < *((_DWORD *)result + 2))
      {
        v24 = *a2;
        *a2 = *a3;
        *a3 = v24;
        v25 = *a2;
        v29 = *a1;
        v30 = v25;
        v26 = *a6 + 1320;
        v27 = *((_DWORD *)sub_1C6144C70(v26, &v30) + 2);
        result = sub_1C6144C70(v26, &v29);
        if (v27 < *((_DWORD *)result + 2))
        {
          v28 = *a1;
          *a1 = *a2;
          *a2 = v28;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1C5BE11C0(uint64_t *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v8 = *a2;
  v27 = *a1;
  v28 = v8;
  v9 = *a4 + 1320;
  v10 = *((_DWORD *)sub_1C6144C70(v9, &v28) + 2);
  v11 = sub_1C6144C70(v9, &v27);
  v12 = *a3;
  if (v10 >= *((_DWORD *)v11 + 2))
  {
    v27 = *a2;
    v28 = v12;
    v17 = *a4 + 1320;
    v18 = *((_DWORD *)sub_1C6144C70(v17, &v28) + 2);
    result = sub_1C6144C70(v17, &v27);
    if (v18 < *((_DWORD *)result + 2))
    {
      v22 = *a2;
      *a2 = *a3;
      *a3 = v22;
      v23 = *a2;
      v27 = *a1;
      v28 = v23;
      v24 = *a4 + 1320;
      v25 = *((_DWORD *)sub_1C6144C70(v24, &v28) + 2);
      result = sub_1C6144C70(v24, &v27);
      if (v25 < *((_DWORD *)result + 2))
      {
        v26 = *a1;
        *a1 = *a2;
        *a2 = v26;
      }
    }
  }
  else
  {
    v27 = *a2;
    v28 = v12;
    v13 = *a4 + 1320;
    v14 = *((_DWORD *)sub_1C6144C70(v13, &v28) + 2);
    result = sub_1C6144C70(v13, &v27);
    v16 = *a1;
    if (v14 < *((_DWORD *)result + 2))
    {
      *a1 = *a3;
LABEL_4:
      *a3 = v16;
      return result;
    }
    *a1 = *a2;
    *a2 = v16;
    v19 = *a3;
    v27 = v16;
    v28 = v19;
    v20 = *a4 + 1320;
    v21 = *((_DWORD *)sub_1C6144C70(v20, &v28) + 2);
    result = sub_1C6144C70(v20, &v27);
    if (v21 < *((_DWORD *)result + 2))
    {
      v16 = *a2;
      *a2 = *a3;
      goto LABEL_4;
    }
  }
  return result;
}

BOOL sub_1C5BE1374(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v20 = *(a2 - 1);
      v24 = *a1;
      v25 = v20;
      v21 = *a3 + 1320;
      v22 = *((_DWORD *)sub_1C6144C70(v21, &v25) + 2);
      if (v22 < *((_DWORD *)sub_1C6144C70(v21, &v24) + 2))
      {
        v23 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v23;
      }
      return 1;
    case 3:
      sub_1C5BE11C0(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C5BE15A0(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1C5BE1034(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C5BE11C0(a1, a1 + 1, a1 + 2, a3);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v24 = *v8;
    v25 = v12;
    v13 = *a3 + 1320;
    v14 = *((_DWORD *)sub_1C6144C70(v13, &v25) + 2);
    if (v14 < *((_DWORD *)sub_1C6144C70(v13, &v24) + 2))
    {
      v15 = *v9;
      v16 = v10;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v16 + 24) = *(uint64_t *)((char *)a1 + v16 + 16);
        if (v16 == -16)
          break;
        v24 = *(uint64_t *)((char *)a1 + v16 + 8);
        v25 = v15;
        v17 = *a3 + 1320;
        v18 = *((_DWORD *)sub_1C6144C70(v17, &v25) + 2);
        v16 -= 8;
        if (v18 >= *((_DWORD *)sub_1C6144C70(v17, &v24) + 2))
        {
          v19 = (uint64_t *)((char *)a1 + v16 + 24);
          goto LABEL_11;
        }
      }
      v19 = a1;
LABEL_11:
      *v19 = v15;
      if (++v11 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v10 += 8;
    result = 1;
    if (++v9 == a2)
      return result;
  }
}

_QWORD *sub_1C5BE15A0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_1C5BE11C0(a1, a2, a3, a5);
  v10 = *a4;
  v23 = *a3;
  v24 = v10;
  v11 = *a5 + 1320;
  v12 = *((_DWORD *)sub_1C6144C70(v11, &v24) + 2);
  result = sub_1C6144C70(v11, &v23);
  if (v12 < *((_DWORD *)result + 2))
  {
    v14 = *a3;
    *a3 = *a4;
    *a4 = v14;
    v15 = *a3;
    v23 = *a2;
    v24 = v15;
    v16 = *a5 + 1320;
    v17 = *((_DWORD *)sub_1C6144C70(v16, &v24) + 2);
    result = sub_1C6144C70(v16, &v23);
    if (v17 < *((_DWORD *)result + 2))
    {
      v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      v19 = *a2;
      v23 = *a1;
      v24 = v19;
      v20 = *a5 + 1320;
      v21 = *((_DWORD *)sub_1C6144C70(v20, &v24) + 2);
      result = sub_1C6144C70(v20, &v23);
      if (v21 < *((_DWORD *)result + 2))
      {
        v22 = *a1;
        *a1 = *a2;
        *a2 = v22;
      }
    }
  }
  return result;
}

_QWORD *sub_1C5BE16DC(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6322768((uint64_t *)a1, v4, &v4[5 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 40 * v10;
    do
    {
      *result = -4096;
      result += 5;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5BE17A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;

  v6 = operator new();
  v7 = v6;
  v8 = *(_DWORD *)(a1 + 1376);
  *(_DWORD *)(a1 + 1376) = v8 + 1;
  *(_DWORD *)v6 = v8;
  *(_QWORD *)(v6 + 8) = a2;
  *(_QWORD *)(v6 + 16) = 0;
  *(_DWORD *)(v6 + 24) = -1;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = a3;
  *(_QWORD *)(v6 + 56) = v6 + 88;
  *(_QWORD *)(v6 + 64) = v6 + 88;
  *(_QWORD *)(v6 + 72) = 4;
  *(_DWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 120) = v6 + 152;
  *(_QWORD *)(v6 + 128) = v6 + 152;
  *(_QWORD *)(v6 + 136) = 2;
  *(_DWORD *)(v6 + 144) = 0;
  *(_DWORD *)(v6 + 168) = 0;
  v9 = *(uint64_t **)(a1 + 1360);
  v10 = *(_QWORD *)(a1 + 1368);
  if ((unint64_t)v9 >= v10)
  {
    v12 = *(_QWORD **)(a1 + 1352);
    v13 = v9 - v12;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      abort();
    v15 = v10 - (_QWORD)v12;
    if (v15 >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 61)
        sub_1C4764EE4();
      v17 = (char *)operator new(8 * v16);
    }
    else
    {
      v17 = 0;
    }
    v18 = (uint64_t *)&v17[8 * v13];
    *v18 = v7;
    v11 = v18 + 1;
    if (v9 != v12)
    {
      do
      {
        v19 = *--v9;
        *--v18 = v19;
      }
      while (v9 != v12);
      v9 = *(uint64_t **)(a1 + 1352);
    }
    *(_QWORD *)(a1 + 1352) = v18;
    *(_QWORD *)(a1 + 1360) = v11;
    *(_QWORD *)(a1 + 1368) = &v17[8 * v16];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v9 = v6;
    v11 = v9 + 1;
  }
  *(_QWORD *)(a1 + 1360) = v11;
  return v7;
}

uint64_t *sub_1C5BE190C(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *v5;
  int v6;
  unsigned int v7;
  uint64_t *v9;

  v9 = 0;
  v4 = sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  v5 = v9;
  if ((v4 & 1) != 0)
    return v5 + 1;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_1C5139AAC(a1, v7);
    v9 = 0;
    sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    v5 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*v5 != -4096)
    --*(_DWORD *)(a1 + 12);
  *v5 = *a2;
  v5[1] = 0;
  return v5 + 1;
}

_QWORD *sub_1C5BE19E4(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C5BE1A94(a1, v6);
  v8 = 0;
  sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C5BE1A94(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = (_DWORD *)(v4 + 8);
      do
      {
        v14 = *((_QWORD *)v13 - 1);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v18 = 0;
          sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = v14;
          *((_DWORD *)v15 + 2) = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 4;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 16 * v16;
    do
    {
      *result = -4096;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

_QWORD *sub_1C5BE1BD0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -8;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = (uint64_t *)v4;
      do
      {
        if (*v13 != -8 && *v13 != 0x7FFFFFFF0)
        {
          v18 = 0;
          sub_1C5BE1E10(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v13, &v18);
          v15 = v18;
          *v18 = *v13;
          v15[1] = v13[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 16 * v16;
    do
    {
      *result = -8;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

uint64_t sub_1C5BE1D14(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;

  if (a1 == a2)
    return 1;
  result = 0;
  if (a2 != -8 && a1 != -8 && a1 != 0x7FFFFFFF0 && a2 != 0x7FFFFFFF0)
  {
    v5 = *(_QWORD *)(a1 + 16);
    if (!(_DWORD)v5)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
      *(_QWORD *)(a1 + 16) = v5;
    }
    v6 = *(_QWORD *)(a2 + 16);
    if (!(_DWORD)v6)
    {
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      *(_QWORD *)(a2 + 16) = v6;
    }
    if (v5 != v6)
      return 0;
    v7 = *(_DWORD *)(a1 + 12);
    if (v7 != *(_DWORD *)(a2 + 12))
      return 0;
    if (v7 > 0xFFFFFFFD)
      return 1;
    v8 = *(_DWORD *)(a1 + 8);
    if ((v8 - 11) < 2 || v8 == *(_DWORD *)(a2 + 8))
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a2);
    else
      return 0;
  }
  return result;
}

uint64_t sub_1C5BE1E10(uint64_t a1, int a2, uint64_t *a3, uint64_t **a4)
{
  uint64_t v7;
  _QWORD *v8;
  int v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t result;
  uint64_t *v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;

  if (a2)
  {
    v7 = a1;
    v8 = (_QWORD *)*a3;
    LODWORD(a1) = *(_DWORD *)(*a3 + 16);
    if (!(_DWORD)a1)
    {
      a1 = (*(uint64_t (**)(uint64_t))(*v8 + 32))(*a3);
      v8[2] = a1;
      v8 = (_QWORD *)*a3;
    }
    v9 = a2 - 1;
    v10 = (a2 - 1) & a1;
    v11 = (uint64_t *)(v7 + 16 * v10);
    if ((sub_1C5BE1D14((uint64_t)v8, *v11) & 1) != 0)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      while (*v11 != -8)
      {
        if (v13)
          v15 = 0;
        else
          v15 = *v11 == 0x7FFFFFFF0;
        if (v15)
          v13 = v11;
        v16 = v14 + 1;
        v10 = (v10 + v14) & v9;
        v11 = (uint64_t *)(v7 + 16 * v10);
        v17 = sub_1C5BE1D14(*a3, *v11);
        result = 1;
        v14 = v16;
        if (v17)
          goto LABEL_7;
      }
      result = 0;
      if (v13)
        v11 = v13;
    }
  }
  else
  {
    v11 = 0;
    result = 0;
  }
LABEL_7:
  *a4 = v11;
  return result;
}

uint64_t sub_1C5BE1F10(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v2 >= 0x1C)
  {
    result = *(_QWORD *)(a2 + 40);
    if (!result)
    {
      v7 = 0;
      v5 = sub_1C6144BDC(*(_QWORD *)(a1 + 1552), *(_DWORD *)(a1 + 1568), a2, &v7);
      result = 0;
      if (v5)
        return *(_QWORD *)(v7 + 8);
    }
  }
  else
  {
    if (v2 == 27)
      v6 = a2;
    else
      v6 = 0;
    return *(_QWORD *)(v6 + 64);
  }
  return result;
}

uint64_t sub_1C5BE1F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v14 = 0;
  v6 = sub_1C49F21C0(*(_QWORD *)(a1 + 1768), *(_DWORD *)(a1 + 1784), a2, &v14);
  v7 = v14;
  if (v6)
    v8 = v14 == *(_QWORD *)(a1 + 1768) + 16 * *(unsigned int *)(a1 + 1784);
  else
    v8 = 1;
  if (v8)
    return 0;
  v9 = *(_QWORD *)(v14 + 8);
  if (v9 == a3)
    return 0;
  if (a2 && *(_BYTE *)(a2 + 16) == 27)
  {
    v10 = sub_1C477672C(v9 + 120, a2);
    v11 = *(_QWORD *)(v9 + 128);
    v12 = 136;
    if (v11 == *(_QWORD *)(v9 + 120))
      v12 = 140;
    if (v10 != (_QWORD *)(v11 + 8 * *(unsigned int *)(v9 + v12)))
    {
      *v10 = -2;
      ++*(_DWORD *)(v9 + 144);
    }
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(a3 + 120), a2);
    if (*(_QWORD *)(v9 + 40) == a2)
    {
      if (*(_DWORD *)(v9 + 168) || *(_DWORD *)(v9 + 140) != *(_DWORD *)(v9 + 144))
      {
        *(_QWORD *)(v9 + 40) = sub_1C5BE2388(a1, v9);
        sub_1C5BE2628(a1, v9);
      }
      else
      {
        *(_QWORD *)(v9 + 40) = 0;
      }
    }
  }
  *(_QWORD *)(v7 + 8) = a3;
  return 1;
}

int32x2_t sub_1C5BE20B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int32x2_t result;
  _QWORD *v9;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;

  if (*(_BYTE *)(a2 + 16) != 25)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(a1 + 2088);
      do
      {
        v6 = sub_1C5BE2798(a1, *(_QWORD *)(v4 + 24));
        *(_QWORD *)(v5 + 8 * (v6 >> 6)) |= 1 << v6;
        v4 = *(_QWORD *)(v4 + 8);
      }
      while (v4);
    }
    v23 = 0;
    v7 = sub_1C61A45F4(*(_QWORD *)(a1 + 1744), *(_DWORD *)(a1 + 1760), a2, &v23);
    v9 = v23;
    if (v7 && v23 != (_QWORD *)(*(_QWORD *)(a1 + 1744) + 56 * *(unsigned int *)(a1 + 1760)))
    {
      v12 = (char *)v23[1];
      v11 = (char *)v23[2];
      v13 = 24;
      if (v11 == v12)
        v13 = 28;
      v14 = *(unsigned int *)((char *)v23 + v13);
      v15 = (uint64_t *)v23[2];
      if ((_DWORD)v14)
      {
        v16 = 8 * v14;
        v15 = (uint64_t *)v23[2];
        while ((unint64_t)*v15 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v15;
          v16 -= 8;
          if (!v16)
            goto LABEL_23;
        }
      }
      v17 = &v11[8 * v14];
      if (v15 != (uint64_t *)v17)
      {
        v18 = *(_QWORD *)(a1 + 2088);
        v19 = *v15;
LABEL_19:
        v20 = sub_1C5BE2798(a1, v19);
        *(_QWORD *)(v18 + 8 * (v20 >> 6)) |= 1 << v20;
        v21 = (unint64_t *)(v15 + 1);
        while (v21 != (unint64_t *)v17)
        {
          v22 = *v21++;
          v19 = v22;
          if (v22 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v15 = (uint64_t *)(v21 - 1);
            goto LABEL_19;
          }
        }
      }
LABEL_23:
      if (v11 != v12)
        free(v11);
      *v9 = -8192;
      result = vadd_s32(*(int32x2_t *)(a1 + 1752), (int32x2_t)0x1FFFFFFFFLL);
      *(int32x2_t *)(a1 + 1752) = result;
    }
  }
  return result;
}

uint64_t sub_1C5BE2234(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  sub_1C49F21C0(*(_QWORD *)(a1 + 1768), *(_DWORD *)(a1 + 1784), a2, &v5);
  result = *(_QWORD *)(v5 + 8);
  if (*(_QWORD *)(result + 40) != a2)
  {
    result = sub_1C5BE17A0(a1, 0, 0);
    *(_QWORD *)(result + 40) = a2;
  }
  return result;
}

uint64_t sub_1C5BE229C(uint64_t result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  uint64_t v13;

  v1 = *(uint64_t **)result;
  v2 = *(uint64_t **)(result + 8);
  if (*(uint64_t **)result != v2)
  {
    v3 = result;
    do
    {
      v4 = *v1;
      v5 = *(uint64_t **)(v3 + 16);
      v6 = *v5;
      if (*v1 != *v5)
      {
        v7 = *(_QWORD *)(v3 + 24);
        v13 = 0;
        result = sub_1C49F21C0(*(_QWORD *)(v7 + 1768), *(_DWORD *)(v7 + 1784), v4, &v13);
        v8 = 0;
        if ((_DWORD)result)
          v8 = *(_QWORD *)(v13 + 8);
        if (v8 != *(_QWORD *)(v7 + 1344))
        {
          v9 = *(_DWORD *)(v6 + 20);
          if ((v9 & 0x40000000) != 0)
            v10 = *(_QWORD *)(v6 - 8);
          else
            v10 = v6 - 32 * (v9 & 0x7FFFFFF);
          v11 = **(_QWORD **)(v3 + 32);
          v12[0] = *(_QWORD *)(v10
                             + 32 * *(unsigned int *)(v6 + 76)
                             + 8 * (((unint64_t)v1 - v10) >> 5));
          v12[1] = v11;
          v13 = 0;
          result = sub_1C5B554C8((uint64_t *)(v7 + 1968), v12, &v13);
          if ((result & 1) != 0)
            return result;
          v1 = *(uint64_t **)v3;
          v2 = *(uint64_t **)(v3 + 8);
        }
      }
      v1 += 4;
      *(_QWORD *)v3 = v1;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_1C5BE2388(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t *v35;
  unint64_t v36;

  if (*(_DWORD *)(a2 + 168))
  {
    v3 = *(_QWORD *)(a2 + 16);
    if (v3 && *(_BYTE *)(v3 + 16) == 61)
    {
      v4 = *(_QWORD *)(a2 + 16);
      return sub_1C5BE26EC(a1, v4);
    }
    v5 = *(_QWORD *)(a2 + 64);
    if (v5 == *(_QWORD *)(a2 + 56))
      v6 = (unsigned int *)(a2 + 76);
    else
      v6 = (unsigned int *)(a2 + 72);
    v7 = *v6;
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      v9 = *(unint64_t **)(a2 + 64);
      while (*v9 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v9;
        v8 -= 8;
        if (!v8)
          goto LABEL_62;
      }
    }
    else
    {
      v9 = *(unint64_t **)(a2 + 64);
    }
    v17 = (unint64_t *)(v5 + 8 * v7);
    if (v9 == v17)
      goto LABEL_62;
    v18 = *v9;
LABEL_30:
    if (*(_BYTE *)(v18 + 16) != 61)
    {
      while (1)
      {
        if (++v9 == v17)
          goto LABEL_62;
        v18 = *v9;
        if (*v9 < 0xFFFFFFFFFFFFFFFELL)
          goto LABEL_30;
      }
    }
    if (v9 == v17)
    {
LABEL_62:
      v4 = 0;
      return sub_1C5BE26EC(a1, v4);
    }
    v4 = 0;
    v24 = *(_QWORD *)(a1 + 2208);
    v25 = *(_DWORD *)(a1 + 2224);
    v26 = v25 - 1;
    v27 = -1;
LABEL_44:
    if (v25)
    {
      v28 = ((v18 >> 4) ^ (v18 >> 9)) & v26;
      v29 = *(_QWORD *)(v24 + 16 * v28);
      if (v18 == v29)
      {
LABEL_49:
        v32 = *(_DWORD *)(v24 + 16 * v28 + 8);
        goto LABEL_51;
      }
      v30 = 1;
      while (v29 != -4096)
      {
        v31 = v28 + v30++;
        v28 = v31 & v26;
        v29 = *(_QWORD *)(v24 + 16 * v28);
        if (v18 == v29)
          goto LABEL_49;
      }
    }
    v32 = 0;
LABEL_51:
    if (v32 < v27)
    {
      v4 = v18;
      v27 = v32;
    }
    v33 = v9 + 1;
    v34 = v9 + 2;
    while (v33 != v17)
    {
      v35 = v34;
      v36 = *v33++;
      v18 = v36;
      ++v34;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v9 = v33 - 1;
        if (*(_BYTE *)(v18 + 16) == 61)
          goto LABEL_44;
        while (v35 != v17)
        {
          v18 = *v35;
          if (*v35 < 0xFFFFFFFFFFFFFFFELL && *(_BYTE *)(v18 + 16) == 61)
          {
            v9 = v35;
            goto LABEL_44;
          }
          ++v35;
        }
        return sub_1C5BE26EC(a1, v4);
      }
    }
    return sub_1C5BE26EC(a1, v4);
  }
  v10 = *(uint64_t **)(a2 + 128);
  v11 = 136;
  if (v10 == *(uint64_t **)(a2 + 120))
    v11 = 140;
  v12 = *(unsigned int *)(a2 + v11);
  v13 = &v10[v12];
  if (*(_DWORD *)(a2 + 140) - *(_DWORD *)(a2 + 144) == 1)
  {
    if ((_DWORD)v12)
    {
      v14 = 8 * v12;
      while ((unint64_t)*v10 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v10;
        v14 -= 8;
        if (!v14)
        {
          v10 = v13;
          return *v10;
        }
      }
    }
    return *v10;
  }
  else
  {
    if ((_DWORD)v12)
    {
      v16 = 8 * v12;
      while ((unint64_t)*v10 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v10;
        v16 -= 8;
        if (!v16)
          return 0;
      }
    }
    if (v10 == v13)
    {
      return 0;
    }
    else
    {
      v15 = 0;
      v19 = *v10;
      v20 = -1;
LABEL_36:
      v21 = sub_1C5BE2798(a1, v19);
      if (v21 < v20)
      {
        v15 = v19;
        v20 = v21;
      }
      v22 = (unint64_t *)(v10 + 1);
      while (v22 != (unint64_t *)v13)
      {
        v23 = *v22++;
        v19 = v23;
        if (v23 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v10 = (uint64_t *)(v22 - 1);
          goto LABEL_36;
        }
      }
    }
  }
  return v15;
}

uint64_t sub_1C5BE2628(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v2 = result;
  v3 = *(_QWORD *)(a2 + 128);
  v4 = 136;
  if (v3 == *(_QWORD *)(a2 + 120))
    v4 = 140;
  v5 = *(unsigned int *)(a2 + v4);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    for (i = *(uint64_t **)(a2 + 128); (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v6 -= 8;
      if (!v6)
        return result;
    }
  }
  else
  {
    i = *(uint64_t **)(a2 + 128);
  }
  v8 = (_QWORD *)(v3 + 8 * v5);
  if (i != v8)
  {
    v9 = *(_QWORD *)(result + 2088);
    v10 = *i;
LABEL_11:
    result = sub_1C5BE2798(v2, v10);
    *(_QWORD *)(v9 + 8 * (result >> 6)) |= 1 << result;
    v11 = (unint64_t *)(i + 1);
    while (v11 != v8)
    {
      v12 = *v11++;
      v10 = v12;
      if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        i = (uint64_t *)(v11 - 1);
        goto LABEL_11;
      }
    }
  }
  return result;
}

uint64_t sub_1C5BE26EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(v2 + 40);
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v5 = v3 - 1;
    v6 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v7 = *(_QWORD *)(v4 + 16 * v6);
    if (v7 == a2)
    {
LABEL_6:
      v10 = *(_QWORD *)(v4 + 16 * v6 + 8);
      if (v10)
        return v10;
    }
    else
    {
      v8 = 1;
      while (v7 != -4096)
      {
        v9 = v6 + v8++;
        v6 = v9 & v5;
        v7 = *(_QWORD *)(v4 + 16 * v6);
        if (v7 == a2)
          goto LABEL_6;
      }
    }
  }
  v13 = 0;
  v11 = sub_1C6144BDC(*(_QWORD *)(a1 + 1648), *(_DWORD *)(a1 + 1664), a2, &v13);
  v10 = 0;
  if (v11)
    return *(_QWORD *)(v13 + 8);
  return v10;
}

uint64_t sub_1C5BE2798(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  if (*(unsigned __int8 *)(a2 + 16) - 25 > 1)
  {
    v11 = *(_DWORD *)(a1 + 2224);
    if (v11)
    {
      v12 = *(_QWORD *)(a1 + 2208);
      v13 = v11 - 1;
      v14 = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v15 = *(_QWORD *)(v12 + 16 * v14);
      if (v15 != a2)
      {
        v16 = 1;
        while (v15 != -4096)
        {
          v17 = v14 + v16++;
          v14 = v17 & v13;
          v15 = *(_QWORD *)(v12 + 16 * v14);
          if (v15 == a2)
            goto LABEL_13;
        }
        return 0;
      }
LABEL_13:
      v10 = v12 + 16 * v14;
      return *(unsigned int *)(v10 + 8);
    }
  }
  else
  {
    v2 = *(_DWORD *)(a1 + 2224);
    if (v2)
    {
      v3 = *(_QWORD *)(a2 + 72);
      v4 = *(_QWORD *)(a1 + 2208);
      v5 = v2 - 1;
      v6 = ((v3 >> 4) ^ (v3 >> 9)) & (v2 - 1);
      v7 = *(_QWORD *)(v4 + 16 * v6);
      if (v3 != v7)
      {
        v8 = 1;
        while (v7 != -4096)
        {
          v9 = v6 + v8++;
          v6 = v9 & v5;
          v7 = *(_QWORD *)(v4 + 16 * v6);
          if (v3 == v7)
            goto LABEL_7;
        }
        return 0;
      }
LABEL_7:
      v10 = v4 + 16 * v6;
      return *(unsigned int *)(v10 + 8);
    }
  }
  return 0;
}

void sub_1C5BE2870(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v7;
  unint64_t v8;
  int v9;
  uint64_t (**v10)();
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  llvm::PoisonValue **v22;
  llvm::PoisonValue **v23;
  __int16 v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  int v61;
  unsigned int v62;
  unint64_t v63;
  uint64_t v64;
  int *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  _OWORD *v69;
  uint64_t *v70;
  uint64_t v71;
  unint64_t v72;
  llvm::PoisonValue **v73;
  llvm::PoisonValue **v74;
  llvm::PoisonValue **v75;
  llvm::Type *v76;
  llvm::Value ***v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  int v81;
  __int16 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  _QWORD **v89;
  uint64_t v90;
  uint64_t v91;
  llvm::Type *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  _QWORD *v98;
  const llvm::DataLayout *v99;
  uint64_t v100;
  uint64_t v101;
  llvm::UndefValue *v102;
  int v103;
  int v104;
  uint64_t v105;
  llvm::Constant *v106;
  llvm::PoisonValue **v107;
  const llvm::DataLayout *v108;
  void *ConstantStoreValueForLoad;
  _QWORD *v111;
  int v112;
  uint64_t v113;
  llvm::Constant *v114;
  unsigned __int8 *v115;
  const llvm::DataLayout *v116;
  llvm::UndefValue *ConstantMemInstValueForLoad;
  unsigned int v119;
  llvm::UndefValue *v120;
  llvm::Type *v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  int v126;
  llvm::Value ***v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  llvm::UndefValue *InitialValueOfAllocation;
  llvm::UndefValue *v133;
  llvm::Value ***v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  unsigned int v138;
  unsigned int v139;
  BOOL v140;
  uint64_t v141;
  llvm::PoisonValue **v142;
  uint64_t v143;
  uint64_t v144;
  llvm::PoisonValue **v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  llvm::Type *v151;
  const llvm::APInt *v152;
  uint64_t v153;
  llvm::Value **True;
  int v155;
  uint64_t v156;
  void **v157;
  unsigned int v158;
  llvm::Value **False;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  BOOL v170;
  llvm::PoisonValue **v172;
  llvm::PoisonValue **v173;
  __int16 v174;
  unsigned int v175;
  unsigned int v176;
  llvm::Type *v177;
  const llvm::APInt *v178;
  uint64_t v179;
  BOOL v180;
  int v182;
  llvm::Value **v183;
  llvm::Value **v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  llvm::Type *v188;
  const llvm::APInt *v189;
  uint64_t v190;
  unsigned int v191;
  int v192;
  uint64_t (**v193)();
  uint64_t v194;
  uint64_t v195;
  llvm::PoisonValue **v196;
  llvm::PoisonValue **v197;
  _QWORD *v198;
  unsigned int v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  llvm::PoisonValue **v203;
  BOOL v204;
  int v205;
  unint64_t v206;
  int v207;
  uint64_t (**v208)();
  llvm::PoisonValue *v209;
  uint64_t v210;
  int v211;
  llvm::PoisonValue **v212;
  uint64_t v213;
  llvm::PoisonValue **v214;
  int v215;
  uint64_t v216;
  llvm::PoisonValue **v217;
  uint64_t *v218;
  uint64_t v219;
  __int128 v220;
  __int128 v221;
  void *v222;
  uint64_t v223;
  _OWORD v224[3];
  uint64_t v225;

  v4 = a3;
  v225 = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned __int8 *)(a3 + 16);
  if (a3 && v7 <= 0x14)
  {
LABEL_3:
    v8 = sub_1C484358C(a2 + 72, 32, 3);
    v3 = v8;
    v9 = 1;
    v10 = &off_1E8196F78;
LABEL_4:
    *(_DWORD *)(v8 + 8) = v9;
    *(_QWORD *)v8 = v10;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = v4;
    v11 = *(unsigned __int8 *)(v4 + 16);
    goto LABEL_5;
  }
  switch(*(_BYTE *)(a3 + 16))
  {
    case 3:
    case 0x15:
      v8 = sub_1C484358C(a2 + 72, 32, 3);
      v3 = v8;
      v9 = 2;
      v10 = &off_1E8196FB8;
      goto LABEL_4;
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3E:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x55:
    case 0x59:
    case 0x5A:
      sub_1C5BE4F08(a1, a2, a3);
      return;
    case 0x3C:
      if ((*(_WORD *)(a3 + 18) & 0x381) != 0)
      {
        v3 = 0;
        goto LABEL_6;
      }
      v75 = sub_1C5BE5298(a2, *(_QWORD *)(a3 - 32));
      if (*((unsigned __int8 *)v75 + 16) - 11 <= 1)
      {
        v77 = *(llvm::Value ****)v4;
LABEL_142:
        ConstantStoreValueForLoad = llvm::PoisonValue::get((llvm::PoisonValue *)v77, v76);
        goto LABEL_168;
      }
      v92 = (llvm::Type *)v75;
      v93 = sub_1C5BE26EC(a2, v4);
      v94 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 40) + 16))(*(_QWORD *)(a2 + 40), v93);
      v95 = v94;
      if (*(_QWORD *)(*(_QWORD *)(a2 + 32) + 96) == v94)
        goto LABEL_176;
      if (!v94 || *(_BYTE *)(v94 + 16) != 26)
        goto LABEL_176;
      v97 = *(_QWORD *)(v94 + 72);
      v98 = sub_1C477672C(a2 + 1992, *(_QWORD *)(v97 + 40));
      v100 = *(_QWORD *)(a2 + 2000);
      v101 = 2008;
      if (v100 == *(_QWORD *)(a2 + 1992))
        v101 = 2012;
      v102 = *(llvm::UndefValue **)v4;
      if (v98 == (_QWORD *)(v100 + 8 * *(unsigned int *)(a2 + v101)))
      {
        v77 = *(llvm::Value ****)v4;
        goto LABEL_142;
      }
      v103 = *(unsigned __int8 *)(v97 + 16);
      if (v103 != 60)
      {
        if (v103 == 61)
        {
          v104 = *(unsigned __int8 *)(v4 + 16);
          if ((v104 - 60) >= 2)
          {
            if ((v104 - 63) < 3)
            {
LABEL_129:
              if ((*(_WORD *)(v97 + 18) & 0x380) == 0)
                goto LABEL_176;
            }
          }
          else if ((*(_WORD *)(v4 + 18) & 0x380) != 0)
          {
            goto LABEL_129;
          }
          if (**(llvm::UndefValue ***)(v97 - 64) == v102)
            goto LABEL_176;
          v105 = llvm::VNCoercion::analyzeLoadFromClobberingStore(*(llvm::Value ****)v4, v92, (llvm::Value *)v97, *(llvm::StoreInst **)(a2 + 56), v99);
          if ((v105 & 0x80000000) == 0)
          {
            v106 = (llvm::Constant *)v105;
            v107 = sub_1C5BE5298(a2, *(_QWORD *)(v97 - 64));
            if (v107 && *((unsigned __int8 *)v107 + 16) <= 0x14u)
            {
              ConstantStoreValueForLoad = llvm::VNCoercion::getConstantStoreValueForLoad(v107, v106, (uint64_t)v102, *(llvm::Type **)(a2 + 56), v108);
LABEL_168:
              v4 = (uint64_t)ConstantStoreValueForLoad;
              goto LABEL_3;
            }
          }
LABEL_157:
          if (sub_1C5BE5298(a2, v97) != (llvm::PoisonValue **)v92)
          {
            v122 = *(_QWORD *)(a2 + 24);
            v222 = v92;
            v223 = 1;
            memset(v224, 0, 32);
            v218 = (uint64_t *)v97;
            v219 = 1;
            v220 = 0u;
            v221 = 0u;
            if (llvm::AAResults::alias(v122, (uint64_t)&v222, (uint64_t)&v218) != 3)
              goto LABEL_176;
          }
          v123 = *(unsigned __int8 *)(v97 + 16);
          if (v123 == 84)
          {
            v124 = *(_QWORD *)(v97 - 32);
            if (!v124
              || *(_BYTE *)(v124 + 16)
              || *(_QWORD *)(v124 + 24) != *(_QWORD *)(v97 + 72)
              || (*(_BYTE *)(v124 + 33) & 0x20) == 0)
            {
              goto LABEL_172;
            }
            if (*(_DWORD *)(v124 + 36) != 168)
              goto LABEL_176;
          }
          else if (v123 != 59)
          {
LABEL_172:
            if (byte_1ED82E438)
              v126 = 59;
            else
              v126 = 63;
            sub_1C4EBF808(v97, v126, *(uint64_t **)(a2 + 16), &v222);
            if (BYTE8(v224[0]))
            {
              InitialValueOfAllocation = llvm::getInitialValueOfAllocation(v97, *(uint64_t **)(a2 + 16), v102);
              if (InitialValueOfAllocation)
              {
                v133 = InitialValueOfAllocation;
                v8 = sub_1C484358C(a2 + 72, 32, 3);
                v3 = v8;
                *(_DWORD *)(v8 + 8) = 1;
                *(_QWORD *)v8 = &off_1E8196F78;
                *(_QWORD *)(v8 + 16) = 0;
                *(_QWORD *)(v8 + 24) = v133;
                v11 = *((unsigned __int8 *)v133 + 16);
LABEL_5:
                *(_DWORD *)(v8 + 12) = v11;
LABEL_6:
                a1[2] = 0;
                *a1 = v3;
LABEL_7:
                a1[1] = 0;
                return;
              }
            }
LABEL_176:
            v127 = *(llvm::Value ****)v4;
            v3 = sub_1C484358C(a2 + 72, 64, 3);
            v222 = 0;
            sub_1C49F21C0(*(_QWORD *)(a2 + 1768), *(_DWORD *)(a2 + 1784), v95, &v222);
            v128 = *(_QWORD *)(*((_QWORD *)v222 + 1) + 40);
            *(_QWORD *)(v3 + 16) = 0;
            *(_QWORD *)(v3 + 24) = 0;
            *(_QWORD *)(v3 + 32) = 1;
            *(_QWORD *)(v3 + 40) = 0;
            *(_QWORD *)(v3 + 48) = v128;
            *(_QWORD *)v3 = &off_1E8196D90;
            *(_QWORD *)(v3 + 8) = 0xFFFFFFFD0000000BLL;
            *(_QWORD *)(v3 + 56) = v4;
            v129 = sub_1C6317048((uint64_t *)(a2 + 168), 0, a2 + 72);
            *(_QWORD *)(v3 + 24) = v129;
            *(_QWORD *)(v3 + 40) = v127;
            *(_DWORD *)(v3 + 12) = 0;
            v130 = *(unsigned int *)(v3 + 36);
            *(_DWORD *)(v3 + 36) = v130 + 1;
            v129[v130] = v92;
            if (*(_QWORD *)(v3 + 48) != v95)
            {
              v222 = *(void **)(v3 + 48);
              v131 = sub_1C61BE588(a2 + 1744, (uint64_t *)&v222);
              sub_1C4774094((llvm::SmallPtrSetImplBase *)(v131 + 1), v93);
            }
            goto LABEL_6;
          }
          ConstantStoreValueForLoad = llvm::UndefValue::get(v102, v121);
          goto LABEL_168;
        }
        if (!sub_1C4DE85D0(v97))
          goto LABEL_157;
        v119 = llvm::VNCoercion::analyzeLoadFromClobberingMemInst((uint64_t)v102, (uint64_t *)v92, v97, *(llvm::DataLayout **)(a2 + 56));
        if ((v119 & 0x80000000) != 0)
          goto LABEL_157;
        ConstantMemInstValueForLoad = llvm::VNCoercion::getConstantMemInstValueForLoad(v97, v119, v102, *(llvm::Type **)(a2 + 56));
        if (!ConstantMemInstValueForLoad)
          goto LABEL_157;
LABEL_156:
        v120 = ConstantMemInstValueForLoad;
        v8 = sub_1C484358C(a2 + 72, 32, 3);
        v3 = v8;
        *(_DWORD *)(v8 + 8) = 1;
        *(_QWORD *)v8 = &off_1E8196F78;
        *(_QWORD *)(v8 + 16) = 0;
        *(_QWORD *)(v8 + 24) = v120;
        v11 = *((unsigned __int8 *)v120 + 16);
        goto LABEL_5;
      }
      v112 = *(unsigned __int8 *)(v4 + 16);
      if ((v112 - 60) >= 2)
      {
        if ((v112 - 63) >= 3)
          goto LABEL_146;
      }
      else if ((*(_WORD *)(v4 + 18) & 0x380) == 0)
      {
        goto LABEL_146;
      }
      if ((*(_WORD *)(v97 + 18) & 0x380) == 0)
        goto LABEL_176;
LABEL_146:
      v113 = llvm::VNCoercion::analyzeLoadFromClobberingLoad(*(llvm::Value ****)v4, v92, (llvm::Value *)v97, *(llvm::LoadInst **)(a2 + 56), v99);
      if ((v113 & 0x80000000) != 0)
        goto LABEL_157;
      v114 = (llvm::Constant *)v113;
      v115 = (unsigned __int8 *)sub_1C5BE5298(a2, v97);
      if (!v115 || v115[16] > 0x14u)
        goto LABEL_157;
      ConstantMemInstValueForLoad = llvm::VNCoercion::getConstantLoadValueForLoad((llvm::VNCoercion *)v115, v114, (uint64_t)v102, *(llvm::Type **)(a2 + 56), v116);
      if (!ConstantMemInstValueForLoad)
        goto LABEL_157;
      goto LABEL_156;
    case 0x3D:
      v46 = sub_1C5BE26EC(a2, a3);
      v47 = v46;
      if (*(_BYTE *)(v46 + 16) == 25)
        v48 = v46;
      else
        v48 = 0;
      v49 = (_QWORD *)(v46 - 64);
      if (v48)
        v50 = (uint64_t *)(v48 - 32);
      else
        v50 = (uint64_t *)(v46 - 64);
      if (byte_1ED822138)
        v51 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 40) + 16))(*(_QWORD *)(a2 + 40), v46);
      else
        v51 = *v50;
      v222 = 0;
      sub_1C49F21C0(*(_QWORD *)(a2 + 1768), *(_DWORD *)(a2 + 1784), v51, &v222);
      v78 = *(_QWORD *)(*((_QWORD *)v222 + 1) + 40);
      if (*(_BYTE *)(v47 + 16) == 25)
        v79 = v47;
      else
        v79 = 0;
      if (v79)
        v80 = (_QWORD *)(v79 - 32);
      else
        v80 = v49;
      if (v78 != *v80)
      {
        v222 = *(void **)(*((_QWORD *)v222 + 1) + 40);
        v111 = sub_1C61BE588(a2 + 1744, (uint64_t *)&v222);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)(v111 + 1), v47);
      }
      if (v78 == v47)
        v78 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 96);
      v81 = *(unsigned __int8 *)(v4 + 16);
      if (v81 == 60 || v81 == 61)
      {
        v82 = *(_WORD *)(v4 + 18);
        if ((v82 & 0x380) != 0 || (v82 & 1) != 0)
          goto LABEL_111;
      }
      else if ((v81 - 63) < 3 || (*(_WORD *)(v4 + 18) & 1) != 0)
      {
        goto LABEL_111;
      }
      v3 = sub_1C5BE7C8C(a2, v4, v78);
      v222 = (void *)v3;
      v218 = 0;
      if ((sub_1C5BE1E10(*(_QWORD *)(a2 + 1840), *(_DWORD *)(a2 + 1856), (uint64_t *)&v222, &v218) & 1) != 0)
      {
        v83 = v218[1];
        if (v83)
        {
          if (*(_QWORD *)(v83 + 32) == *(_QWORD *)(v3 + 64))
            goto LABEL_6;
        }
      }
      v84 = *(_QWORD *)(v3 + 64);
      if (v84
        && *(_BYTE *)(v84 + 16) == 60
        && sub_1C5BE5298(a2, *(_QWORD *)(v84 - 32)) == **(llvm::PoisonValue ****)(v3 + 24))
      {
        v85 = sub_1C5BE26EC(a2, v84);
        v86 = *(_BYTE *)(v85 + 16) == 25 ? v85 : 0;
        v87 = (uint64_t *)(v86 ? v86 - 32 : v85 - 64);
        v88 = *v87;
        v222 = 0;
        sub_1C49F21C0(*(_QWORD *)(a2 + 1768), *(_DWORD *)(a2 + 1784), v88, &v222);
        if (*(_QWORD *)(*((_QWORD *)v222 + 1) + 40) == v78)
          goto LABEL_6;
      }
      sub_1C5BE55A8(*(_QWORD **)(v3 + 24), *(_DWORD *)(v3 + 32), a2 + 168);
LABEL_111:
      v3 = sub_1C5BE7C8C(a2, v4, v47);
      goto LABEL_6;
    case 0x51:
    case 0x52:
      v22 = sub_1C5BE5298(a2, *(_QWORD *)(a3 - 64));
      v23 = sub_1C5BE5298(a2, *(_QWORD *)(v4 - 32));
      v24 = *(_WORD *)(v4 + 18);
      v25 = sub_1C5BE5474(a2, (uint64_t)v22);
      v26 = sub_1C5BE5474(a2, (uint64_t)v23);
      v27 = v24 & 0x3F;
      if (v26 < v25 || v23 < v22 && v25 >= v26)
        __asm { BR              X9 }
      v73 = v23;
      v74 = v22;
      v149 = *(_QWORD *)(a2 + 64) + 24;
      v222 = (void *)v4;
      v218 = 0;
      v150 = sub_1C4926528(v149, &v222, &v218);
      if ((v150 & 1) != 0)
      {
        v153 = v218[1];
        if (v153)
        {
          if (*(_DWORD *)(v153 + 24) == 1)
          {
            True = llvm::ConstantInt::getTrue(*(uint64_t ***)v4, v151, v152);
            v72 = sub_1C484358C(a2 + 72, 32, 3);
            *(_DWORD *)(v72 + 8) = 1;
LABEL_244:
            *(_QWORD *)v72 = &off_1E8196F78;
            *(_QWORD *)(v72 + 16) = 0;
            *(_QWORD *)(v72 + 24) = True;
            v182 = *((unsigned __int8 *)True + 16);
            goto LABEL_245;
          }
        }
      }
      if (v22 != v73)
        goto LABEL_197;
      v158 = *(_WORD *)(v4 + 18) & 0x3F;
      if (v158 > 0x29)
        goto LABEL_197;
      if (((1 << v158) & 0x2A90000AA00) != 0)
      {
        False = llvm::ConstantInt::getTrue(*(uint64_t ***)v4, v151, v152);
LABEL_243:
        True = False;
        v72 = sub_1C484358C(a2 + 72, 32, 3);
        *(_DWORD *)(v72 + 8) = 1;
        goto LABEL_244;
      }
      if (((1 << v158) & 0x15600000055) != 0)
      {
        False = llvm::ConstantInt::getFalse(*(uint64_t ***)v4, v151, v152);
        goto LABEL_243;
      }
LABEL_197:
      v155 = *(_DWORD *)(v4 + 20);
      v214 = v73;
      if ((v155 & 0x40000000) != 0)
      {
        v157 = *(void ***)(v4 - 8);
        v156 = v155 & 0x7FFFFFF;
      }
      else
      {
        v156 = v155 & 0x7FFFFFF;
        v157 = (void **)(v4 - 32 * v156);
      }
      if (!v156)
      {
LABEL_240:
        sub_1C5BE4F08(a1, a2, v4);
        return;
      }
      v160 = 0;
      v161 = 32 * v156;
      v210 = v27;
      v211 = v27;
      v212 = v74;
      while (2)
      {
        v162 = *(_QWORD *)(a2 + 64) + 24;
        v222 = *v157;
        v218 = 0;
        if ((sub_1C4926528(v162, &v222, &v218) & 1) == 0)
          goto LABEL_239;
        v163 = v218[1];
        if (!v163)
          goto LABEL_239;
        if (*(_DWORD *)(v163 + 24) || v163 == v160)
          goto LABEL_239;
        v165 = *(_QWORD *)(a2 + 8);
        v166 = *(_QWORD *)(v163 + 64);
        v167 = sub_1C5BE1F10(a2, v4);
        if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v165, v166, v167))
          goto LABEL_238;
        v168 = *(_QWORD *)(v163 + 48);
        v169 = *(unsigned __int8 *)(v168 + 16);
        v170 = v168 && v169 >= 0x1C;
        if (!v170 || v169 - 83 < 0xFFFFFFFE)
          goto LABEL_238;
        v172 = sub_1C5BE5298(a2, *(_QWORD *)(v168 - 64));
        v173 = sub_1C5BE5298(a2, *(_QWORD *)(v168 - 32));
        v174 = *(_WORD *)(v168 + 18);
        v175 = sub_1C5BE5474(a2, (uint64_t)v172);
        v176 = sub_1C5BE5474(a2, (uint64_t)v173);
        v179 = v174 & 0x3F;
        if (v176 < v175 || (v173 < v172 ? (v180 = v175 >= v176) : (v180 = 0), v180))
          __asm { BR              X9 }
        if (v172 != v212 || v173 != v214)
          goto LABEL_238;
        if (!*(_BYTE *)(v163 + 72))
        {
          if ((_DWORD)v179 == v211)
            break;
          if ((_DWORD)v179 == dword_1C866A6C0[v210])
          {
LABEL_247:
            v183 = llvm::ConstantInt::getTrue(*(uint64_t ***)v4, v177, v178);
            goto LABEL_249;
          }
          goto LABEL_238;
        }
        if (llvm::CmpInst::isImpliedTrueByMatchingCmp(v179, v211))
          goto LABEL_247;
        if (!llvm::CmpInst::isImpliedFalseByMatchingCmp(v179, v211))
        {
LABEL_238:
          v160 = v163;
LABEL_239:
          v157 += 4;
          v161 -= 32;
          if (!v161)
            goto LABEL_240;
          continue;
        }
        break;
      }
      v183 = llvm::ConstantInt::getFalse(*(uint64_t ***)v4, v177, v178);
LABEL_249:
      v184 = v183;
      v185 = sub_1C484358C(a2 + 72, 32, 3);
      *(_DWORD *)(v185 + 8) = 1;
      *(_QWORD *)v185 = &off_1E8196F78;
      *(_QWORD *)(v185 + 16) = 0;
      *(_QWORD *)(v185 + 24) = v184;
      *(_DWORD *)(v185 + 12) = *((unsigned __int8 *)v184 + 16);
      *a1 = v185;
      a1[1] = 0;
      a1[2] = v163;
      return;
    case 0x53:
      v222 = v224;
      v223 = 0x300000000;
      v52 = *(_DWORD *)(a3 + 20);
      v53 = v52 & 0x7FFFFFF;
      if ((v52 & 0x7FFFFFF) != 0)
      {
        v54 = 0;
        LODWORD(v55) = 0;
        v56 = 0;
        do
        {
          if ((v52 & 0x40000000) != 0)
            v57 = *(_QWORD *)(v4 - 8);
          else
            v57 = v4 - 32 * v53;
          v58 = *(_QWORD *)(v57 + v54);
          v59 = *(_QWORD *)(v57 + 32 * *(unsigned int *)(v4 + 60) + 8 * v56);
          if (v55 >= HIDWORD(v223))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v222, (uint64_t)v224, v55 + 1, 16);
            LODWORD(v55) = v223;
          }
          v60 = (char *)v222 + 16 * v55;
          *v60 = v58;
          v60[1] = v59;
          v55 = (v223 + 1);
          LODWORD(v223) = v223 + 1;
          ++v56;
          v52 = *(_DWORD *)(v4 + 20);
          v53 = v52 & 0x7FFFFFF;
          v54 += 32;
        }
        while (v56 < v53);
        v69 = v222;
        v70 = (uint64_t *)((char *)v222 + 16 * v55);
        v218 = (uint64_t *)a2;
        if ((_DWORD)v55)
        {
          v71 = 126 - 2 * __clz(v55);
          goto LABEL_114;
        }
      }
      else
      {
        v218 = (uint64_t *)a2;
        v70 = (uint64_t *)v224;
        v69 = v224;
      }
      v71 = 0;
LABEL_114:
      sub_1C5BE5714((uint64_t)v69, v70, &v218, v71, 1);
      v89 = (_QWORD **)v222;
      v90 = v223;
      v91 = sub_1C5BE1F10(a2, v4);
      v3 = sub_1C5BE499C(a2, v89, v90, (llvm::UndefValue **)v4, v91);
      if (v222 != v224)
        free(v222);
      goto LABEL_6;
    case 0x54:
      v28 = *(_QWORD *)(a3 - 32);
      if (v28)
      {
        if (!*(_BYTE *)(v28 + 16)
          && *(_QWORD *)(v28 + 24) == *(_QWORD *)(a3 + 72)
          && (*(_BYTE *)(v28 + 33) & 0x20) != 0)
        {
          LODWORD(v218) = 0;
          if (llvm::AttributeList::hasAttrSomewhere((uint64_t *)(a3 + 64), 46, (int *)&v218)
            || !*(_BYTE *)(v28 + 16)
            && (v222 = *(void **)(v28 + 112), llvm::AttributeList::hasAttrSomewhere((uint64_t *)&v222, 46, (int *)&v218)))
          {
            v186 = *(_QWORD *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) + 32 * ((_DWORD)v218 - 1));
            if (v186)
            {
              if (*(_DWORD *)(v28 + 36) != 281)
                goto LABEL_259;
              v187 = *(_QWORD *)(a2 + 64) + 24;
              v222 = (void *)v4;
              v218 = 0;
              if ((sub_1C4926528(v187, &v222, &v218) & 1) == 0)
                goto LABEL_259;
              v190 = v218[1];
              if (!v190)
                goto LABEL_259;
              llvm::PredicateBase::getConstraint((llvm::Value **)v218[1], v188, v189, (uint64_t)&v218);
              if (!(_BYTE)v220)
                goto LABEL_259;
              v215 = (int)v218;
              v194 = *(_QWORD *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF));
              v195 = v219;
              v196 = sub_1C5BE5298(a2, v194);
              v213 = v195;
              v197 = sub_1C5BE5298(a2, v195);
              v222 = 0;
              if ((sub_1C6144BDC(*(_QWORD *)(a2 + 2184), *(_DWORD *)(a2 + 2200), v4, &v222) & 1) != 0)
                v198 = v222;
              else
                v198 = (_QWORD *)(*(_QWORD *)(a2 + 2184) + 16 * *(unsigned int *)(a2 + 2200));
              v199 = sub_1C5BE5474(a2, (uint64_t)v196);
              v200 = sub_1C5BE5474(a2, (uint64_t)v197);
              if (v200 >= v199)
              {
                v201 = *(_QWORD *)(a2 + 2184);
                v202 = *(unsigned int *)(a2 + 2200);
                if (v197 >= v196 || v199 < v200)
                {
                  if (v198 != (_QWORD *)(v201 + 16 * v202))
                  {
                    v203 = (llvm::PoisonValue **)v198[1];
                    if (v203)
                    {
                      if (v203 == v197)
                        goto LABEL_274;
                      v198[1] = 0;
                    }
                  }
                  v197 = v196;
                  v213 = v194;
LABEL_281:
                  if (v215 == 1)
                  {
                    if (*((_BYTE *)v197 + 16) == 17)
                    {
                      v209 = v197[4] == (llvm::PoisonValue *)&unk_1C866F1C0 ? v197[5] : (llvm::PoisonValue *)(v197 + 3);
                      if ((*((_BYTE *)v209 + 28) & 7) != 3)
                      {
                        v206 = sub_1C484358C(a2 + 72, 32, 3);
                        *(_DWORD *)(v206 + 8) = 1;
                        *(_QWORD *)(v206 + 16) = 0;
                        v208 = &off_1E8196F78;
LABEL_303:
                        *(_QWORD *)v206 = v208;
                        *(_QWORD *)(v206 + 24) = v197;
                        *(_DWORD *)(v206 + 12) = *((unsigned __int8 *)v197 + 16);
                        *a1 = v206;
                        a1[1] = v213;
                        a1[2] = v190;
                        return;
                      }
                    }
                  }
                  else if (v215 == 32)
                  {
                    if (v197)
                      v204 = *((unsigned __int8 *)v197 + 16) > 0x14u;
                    else
                      v204 = 1;
                    v205 = v204;
                    v206 = sub_1C484358C(a2 + 72, 32, 3);
                    if (v205)
                      v207 = 2;
                    else
                      v207 = 1;
                    *(_DWORD *)(v206 + 8) = v207;
                    if (v205)
                      v208 = &off_1E8196FB8;
                    else
                      v208 = &off_1E8196F78;
                    *(_QWORD *)(v206 + 16) = 0;
                    goto LABEL_303;
                  }
LABEL_259:
                  v191 = *(unsigned __int8 *)(v186 + 16);
                  v72 = sub_1C484358C(a2 + 72, 32, 3);
                  if (v191 <= 0x14)
                    v192 = 1;
                  else
                    v192 = 2;
                  v193 = &off_1E8196F78;
                  if (v191 > 0x14)
                    v193 = &off_1E8196FB8;
                  *(_DWORD *)(v72 + 8) = v192;
                  *(_QWORD *)v72 = v193;
                  *(_QWORD *)(v72 + 16) = 0;
                  *(_QWORD *)(v72 + 24) = v186;
                  v182 = *(unsigned __int8 *)(v186 + 16);
LABEL_245:
                  *(_DWORD *)(v72 + 12) = v182;
                  goto LABEL_246;
                }
              }
              else
              {
                v201 = *(_QWORD *)(a2 + 2184);
                LODWORD(v202) = *(_DWORD *)(a2 + 2200);
              }
              if (v198 == (_QWORD *)(v201 + 16 * v202))
              {
                v216 = v4;
                v217 = v197;
                sub_1C6187718((uint64_t)&v222, a2 + 2184, &v216, &v217);
              }
              else
              {
                v198[1] = v197;
              }
LABEL_274:
              if (((1 << v215) & 0x3FC00003C3CLL) != 0)
                goto LABEL_259;
              goto LABEL_281;
            }
          }
        }
      }
      v29 = *(_QWORD *)(a2 + 24);
      v30 = *(_QWORD **)(v29 + 8);
      v31 = *(_QWORD **)(v29 + 16);
      if (v30 == v31)
        goto LABEL_50;
      v32 = 63;
      do
      {
        v32 &= (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v30 + 48))(*v30, v4);
        if (v32 == 4)
          goto LABEL_78;
        ++v30;
      }
      while (v30 != v31);
      v33 = *(_QWORD *)(a2 + 24);
      v34 = *(_QWORD **)(v33 + 8);
      v35 = *(_QWORD **)(v33 + 16);
      if (v34 == v35)
        goto LABEL_50;
      v36 = 63;
      do
      {
        v36 &= (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v34 + 48))(*v34, v4);
        if (v36 == 4)
          goto LABEL_43;
        ++v34;
      }
      while (v34 != v35);
      if ((v36 & 2) != 0)
      {
LABEL_50:
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
        return;
      }
LABEL_43:
      v37 = *(_QWORD *)(a2 + 32);
      v38 = *(_DWORD *)(v37 + 40);
      if (!v38)
        goto LABEL_78;
      v39 = *(_QWORD *)(v37 + 24);
      v40 = v38 - 1;
      v41 = (v38 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      v42 = *(_QWORD *)(v39 + 16 * v41);
      if (v42 == v4)
      {
LABEL_48:
        if (*(_QWORD *)(v39 + 16 * v41 + 8))
        {
          v45 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 40) + 16))(*(_QWORD *)(a2 + 40));
LABEL_79:
          v72 = sub_1C5BE7C08(a2, v4, v45);
LABEL_246:
          a1[2] = 0;
          *a1 = v72;
          goto LABEL_7;
        }
      }
      else
      {
        v43 = 1;
        while (v42 != -4096)
        {
          v44 = v41 + v43++;
          v41 = v44 & v40;
          v42 = *(_QWORD *)(v39 + 16 * v41);
          if (v42 == v4)
            goto LABEL_48;
        }
      }
LABEL_78:
      v45 = *(_QWORD *)(*(_QWORD *)(a2 + 1344) + 40);
      goto LABEL_79;
    case 0x5C:
    case 0x5D:
      if (a3
        && v7 == 92
        && (v3 = *(_QWORD *)(a3 - 32), v12 = sub_1C4E8FD48(v3), v3)
        && v12
        && *(_DWORD *)(v4 + 72) == 1
        && !**(_DWORD **)(v4 + 64))
      {
        v125 = 13;
        if (((1 << (*(_BYTE *)(*(_QWORD *)(v3 - 32) + 36) - 6)) & 0xC000000003) == 0)
        {
          if (((1 << (*(_BYTE *)(*(_QWORD *)(v3 - 32) + 36) - 6)) & 0x6000000600000) != 0)
            v125 = 15;
          else
            v125 = 17;
        }
        v134 = *(llvm::Value ****)v4;
        v135 = (unint64_t *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF));
        v136 = *v135;
        v137 = v135[4];
        v3 = sub_1C484358C(a2 + 72, 48, 3);
        *(_QWORD *)(v3 + 16) = 0;
        *(_QWORD *)(v3 + 24) = 0;
        *(_QWORD *)v3 = &off_1E8196D10;
        *(_QWORD *)(v3 + 32) = 2;
        *(_QWORD *)(v3 + 40) = v134;
        *(_DWORD *)(v3 + 8) = 6;
        *(_DWORD *)(v3 + 12) = v125;
        *(_QWORD *)(v3 + 24) = sub_1C6317048((uint64_t *)(a2 + 168), 1u, a2 + 72);
        if ((v125 == 17 || v125 == 13)
          && ((v138 = sub_1C5BE5474(a2, v136), v139 = sub_1C5BE5474(a2, v137), v139 < v138)
           || (v138 >= v139 ? (v140 = v137 >= v136) : (v140 = 1), !v140)))
        {
          v141 = v137;
        }
        else
        {
          v141 = v136;
          v136 = v137;
        }
        v142 = sub_1C5BE5298(a2, v141);
        v143 = *(_QWORD *)(v3 + 24);
        v144 = *(unsigned int *)(v3 + 36);
        *(_DWORD *)(v3 + 36) = v144 + 1;
        *(_QWORD *)(v143 + 8 * v144) = v142;
        v145 = sub_1C5BE5298(a2, v136);
        v146 = *(_QWORD *)(v3 + 24);
        v147 = *(unsigned int *)(v3 + 36);
        *(_DWORD *)(v3 + 36) = v147 + 1;
        *(_QWORD *)(v146 + 8 * v147) = v145;
        v148 = sub_1C4E6D628(v125);
        sub_1C5BE52F8((unint64_t *)&v222, a2, v3, v4, v148);
        if (v222)
        {
          sub_1C5BE3D90((_QWORD *)a2, (uint64_t)&v222, v4);
          v3 = (uint64_t)v222;
        }
      }
      else
      {
        v13 = *(unsigned __int8 *)(v4 + 16);
        if (v4 && v13 == 93)
        {
          v3 = sub_1C484358C(a2 + 72, 64, 3);
          v14 = *(_DWORD *)(v4 + 20) & 0x7FFFFFF;
          v15 = *(_DWORD *)(v4 + 72);
          *(_QWORD *)(v3 + 8) = 0xFFFFFFFD00000007;
          *(_QWORD *)(v3 + 16) = 0;
          *(_QWORD *)(v3 + 24) = 0;
          *(_DWORD *)(v3 + 32) = v14;
          *(_DWORD *)(v3 + 36) = 0;
          *(_QWORD *)(v3 + 40) = 0;
          *(_QWORD *)v3 = &off_1E8196E10;
          *(_QWORD *)(v3 + 48) = v15;
          *(_QWORD *)(v3 + 56) = 0;
          sub_1C5BE5618(a2, v4, v3);
          v16 = sub_1C484358C(a2 + 72, 4 * *(unsigned int *)(v3 + 48), 2);
          *(_QWORD *)(v3 + 56) = v16;
          v17 = *(unsigned int *)(v4 + 72);
          if ((_DWORD)v17)
          {
            v18 = *(int **)(v4 + 64);
            v19 = 4 * v17;
            do
            {
              v20 = *v18++;
              v21 = *(unsigned int *)(v3 + 52);
              *(_DWORD *)(v3 + 52) = v21 + 1;
              *(_DWORD *)(v16 + 4 * v21) = v20;
              v19 -= 4;
            }
            while (v19);
          }
        }
        else if (v4)
        {
          if (v13 == 92)
          {
            v3 = sub_1C484358C(a2 + 72, 64, 3);
            v61 = *(_DWORD *)(v4 + 20) & 0x7FFFFFF;
            v62 = *(_DWORD *)(v4 + 72);
            *(_QWORD *)(v3 + 8) = 0xFFFFFFFD00000007;
            *(_QWORD *)(v3 + 16) = 0;
            *(_QWORD *)(v3 + 24) = 0;
            *(_DWORD *)(v3 + 32) = v61;
            *(_DWORD *)(v3 + 36) = 0;
            *(_QWORD *)(v3 + 40) = 0;
            *(_QWORD *)v3 = &off_1E8196E10;
            *(_QWORD *)(v3 + 48) = v62;
            *(_QWORD *)(v3 + 56) = 0;
            sub_1C5BE5618(a2, v4, v3);
            v63 = sub_1C484358C(a2 + 72, 4 * *(unsigned int *)(v3 + 48), 2);
            *(_QWORD *)(v3 + 56) = v63;
            v64 = *(unsigned int *)(v4 + 72);
            if ((_DWORD)v64)
            {
              v65 = *(int **)(v4 + 64);
              v66 = 4 * v64;
              do
              {
                v67 = *v65++;
                v68 = *(unsigned int *)(v3 + 52);
                *(_DWORD *)(v3 + 52) = v68 + 1;
                *(_DWORD *)(v63 + 4 * v68) = v67;
                v66 -= 4;
              }
              while (v66);
            }
          }
        }
      }
      goto LABEL_6;
    default:
      goto LABEL_50;
  }
}

_QWORD *sub_1C5BE3D90(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = result;
  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
    v7 = v6 == a3;
  else
    v7 = 1;
  if (!v7)
    result = sub_1C5BE7D5C(result, v6, a3);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *(_QWORD *)(a2 + 16);
  if (v8 && *(_DWORD *)(v8 + 24) <= 1u)
  {
    v9 = sub_1C61BE588((uint64_t)(v5 + 215), (uint64_t *)(v8 + 48));
    result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(v9 + 1), a3);
  }
  *(_QWORD *)(a2 + 16) = 0;
  return result;
}

_QWORD *sub_1C5BE3E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t *v41;
  unint64_t *v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unsigned int v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  int v60;
  uint64_t *v61;
  BOOL v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  uint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  unsigned int v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  unsigned int v92;
  int v93;
  uint64_t *v94;
  BOOL v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  uint64_t v101;
  unint64_t *v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  unsigned int v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t *v121;
  uint64_t v122;
  unint64_t *v123;
  uint64_t v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  unsigned int v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t *v138;
  _QWORD *result;
  uint64_t *v140[2];
  uint64_t *v141;

  v6 = *(_QWORD *)(a1 + 1384);
  v7 = *(_DWORD *)(a1 + 1400);
  v8 = sub_1C5BE5544(v6, v7, a2);
  v9 = *(_DWORD *)(a3 + 8);
  if (a3 && v9 == 2)
  {
    v10 = sub_1C5BE5544(v6, v7, *(_QWORD *)(a3 + 24));
    if (v10)
      goto LABEL_20;
  }
  else if (v9 == 3)
  {
    v10 = *(_QWORD *)(a1 + 1344);
    if (v10)
      goto LABEL_20;
  }
  v140[0] = (uint64_t *)a3;
  v140[1] = 0;
  v141 = 0;
  v11 = sub_1C5BE1E10(*(_QWORD *)(a1 + 1840), *(_DWORD *)(a1 + 1856), (uint64_t *)v140, &v141);
  v12 = v141;
  if ((v11 & 1) != 0)
  {
    v10 = v141[1];
    goto LABEL_20;
  }
  v13 = *(_DWORD *)(a1 + 1848);
  v14 = *(_DWORD *)(a1 + 1856);
  if (4 * v13 + 4 >= 3 * v14)
  {
    v14 *= 2;
    goto LABEL_210;
  }
  if (v14 + ~v13 - *(_DWORD *)(a1 + 1852) <= v14 >> 3)
  {
LABEL_210:
    sub_1C5BE1BD0(a1 + 1840, v14);
    v141 = 0;
    sub_1C5BE1E10(*(_QWORD *)(a1 + 1840), *(_DWORD *)(a1 + 1856), (uint64_t *)v140, &v141);
    v12 = v141;
  }
  ++*(_DWORD *)(a1 + 1848);
  if (*v12 != -8)
    --*(_DWORD *)(a1 + 1852);
  *v12 = a3;
  v12[1] = 0;
  v15 = sub_1C5BE17A0(a1, 0, a3);
  v10 = v15;
  v12[1] = v15;
  v16 = *(_DWORD *)(a3 + 8);
  if (a3 && v16 == 1)
  {
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(a3 + 24);
  }
  else if (a3 && v16 == 12)
  {
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(a3 + 56);
    *(_QWORD *)(v15 + 32) = *(_QWORD *)(a3 + 64);
  }
  else
  {
    *(_QWORD *)(v15 + 8) = a2;
  }
LABEL_20:
  v17 = sub_1C477672C(a1 + 1872, a2);
  v18 = *(_QWORD *)(a1 + 1880);
  v19 = 1888;
  if (v18 == *(_QWORD *)(a1 + 1872))
    v19 = 1892;
  if (v17 == (_QWORD *)(v18 + 8 * *(unsigned int *)(a1 + v19)))
  {
    if (v8 == v10)
      goto LABEL_208;
  }
  else
  {
    *v17 = -2;
    ++*(_DWORD *)(a1 + 1896);
    if (v8 == v10)
      goto LABEL_132;
  }
  if (*(_QWORD *)(v8 + 16) == a2)
  {
    *(_QWORD *)(v8 + 16) = 0;
    *(_DWORD *)(v8 + 24) = -1;
  }
  v20 = sub_1C477672C(v8 + 56, a2);
  v21 = *(_QWORD *)(v8 + 64);
  v22 = 72;
  if (v21 == *(_QWORD *)(v8 + 56))
    v22 = 76;
  if (v20 != (_QWORD *)(v21 + 8 * *(unsigned int *)(v8 + v22)))
  {
    *v20 = -2;
    ++*(_DWORD *)(v8 + 80);
  }
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(v10 + 56), a2);
  if (*(_QWORD *)(v10 + 8) != a2)
  {
    v23 = *(_DWORD *)(a1 + 2224);
    if (v23)
    {
      v24 = *(_QWORD *)(a1 + 2208);
      v25 = v23 - 1;
      v26 = (v23 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v27 = *(_QWORD *)(v24 + 16 * v26);
      if (v27 == a2)
      {
LABEL_38:
        v30 = *(_DWORD *)(v24 + 16 * v26 + 8);
        goto LABEL_40;
      }
      v28 = 1;
      while (v27 != -4096)
      {
        v29 = v26 + v28++;
        v26 = v29 & v25;
        v27 = *(_QWORD *)(v24 + 16 * v26);
        if (v27 == a2)
          goto LABEL_38;
      }
    }
    v30 = 0;
LABEL_40:
    if (*(_DWORD *)(v10 + 24) > v30)
    {
      *(_QWORD *)(v10 + 16) = a2;
      *(_DWORD *)(v10 + 24) = v30;
    }
  }
  if (*(_BYTE *)(a2 + 16) == 61)
  {
    --*(_DWORD *)(v8 + 168);
    LODWORD(v31) = *(_DWORD *)(v10 + 168);
    if (!(_DWORD)v31)
    {
      v31 = *(_QWORD *)(v10 + 32);
      if (v31)
      {
        LODWORD(v31) = 0;
      }
      else if (a3 && *(_DWORD *)(a3 + 8) == 12)
      {
        *(_QWORD *)(v10 + 32) = *(_QWORD *)(a3 + 64);
        sub_1C5BE8258((_QWORD *)a1, v10);
        *(_QWORD *)(v10 + 8) = a2;
        LODWORD(v31) = *(_DWORD *)(v10 + 168);
      }
    }
    *(_DWORD *)(v10 + 168) = v31 + 1;
  }
  v32 = sub_1C5BE26EC(a1, a2);
  if (v32)
  {
    v33 = v32;
    if (*(_BYTE *)(v32 + 16) == 26)
    {
      if (!*(_QWORD *)(v10 + 40))
      {
        *(_QWORD *)(v10 + 40) = v32;
        sub_1C5BE2628(a1, v10);
      }
      sub_1C5BE1F80(a1, v33, v10);
      if (*(_QWORD *)(v8 + 40) == v33)
      {
        if (*(_DWORD *)(v8 + 168) || *(_DWORD *)(v8 + 140) != *(_DWORD *)(v8 + 144))
        {
          *(_QWORD *)(v8 + 40) = sub_1C5BE2388(a1, v8);
          sub_1C5BE2628(a1, v8);
        }
        else
        {
          *(_QWORD *)(v8 + 40) = 0;
        }
      }
    }
  }
  v140[0] = (uint64_t *)a2;
  *sub_1C5306090(a1 + 1384, (uint64_t *)v140) = v10;
  v34 = *(_DWORD *)(v8 + 76);
  v35 = v34 - *(_DWORD *)(v8 + 80);
  if (v35 || *(_QWORD *)(a1 + 1344) == v8)
  {
    if (*(_QWORD *)(v8 + 8) != a2)
      goto LABEL_105;
    if (!*(_DWORD *)(v8 + 168) && *(_QWORD *)(v8 + 32))
      *(_QWORD *)(v8 + 32) = 0;
    if (v35 == 1 || *(_QWORD *)(a1 + 1344) == v8)
    {
      v55 = *(unint64_t **)(v8 + 64);
      v56 = 72;
      if (v55 == *(unint64_t **)(v8 + 56))
        v56 = 76;
      v57 = *(unsigned int *)(v8 + v56);
      if ((_DWORD)v57)
      {
        v58 = 8 * v57;
        v59 = &v55[v57];
        while (*v55 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v55;
          v58 -= 8;
          if (!v58)
          {
            v55 = v59;
            break;
          }
        }
      }
      v36 = *v55;
      goto LABEL_104;
    }
    v36 = *(_QWORD *)(v8 + 16);
    if (!v36)
    {
      v37 = *(_QWORD *)(v8 + 64);
      if (v37 == *(_QWORD *)(v8 + 56))
        v38 = v34;
      else
        v38 = *(unsigned int *)(v8 + 72);
      if ((_DWORD)v38)
      {
        v39 = 8 * v38;
        v40 = *(unint64_t **)(v8 + 64);
        while (*v40 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v40;
          v39 -= 8;
          if (!v39)
            goto LABEL_103;
        }
      }
      else
      {
        v40 = *(unint64_t **)(v8 + 64);
      }
      v42 = (unint64_t *)(v37 + 8 * v38);
      if (v40 != v42)
      {
        v36 = 0;
        v43 = *(_QWORD *)(a1 + 2208);
        v44 = *(_DWORD *)(a1 + 2224);
        v45 = v44 - 1;
        v46 = *v40;
        v47 = -1;
        if (v44)
        {
LABEL_82:
          v48 = ((v46 >> 4) ^ (v46 >> 9)) & v45;
          v49 = *(_QWORD *)(v43 + 16 * v48);
          if (v46 == v49)
          {
LABEL_86:
            v52 = *(_DWORD *)(v43 + 16 * v48 + 8);
            goto LABEL_88;
          }
          v50 = 1;
          while (v49 != -4096)
          {
            v51 = v48 + v50++;
            v48 = v51 & v45;
            v49 = *(_QWORD *)(v43 + 16 * v48);
            if (v46 == v49)
              goto LABEL_86;
          }
        }
LABEL_87:
        v52 = 0;
LABEL_88:
        if (v52 < v47)
        {
          v36 = v46;
          v47 = v52;
        }
        v53 = v40 + 1;
        while (v53 != v42)
        {
          v54 = *v53++;
          v46 = v54;
          if (v54 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v40 = v53 - 1;
            if (v44)
              goto LABEL_82;
            goto LABEL_87;
          }
        }
        goto LABEL_104;
      }
LABEL_103:
      v36 = 0;
    }
LABEL_104:
    *(_QWORD *)(v8 + 8) = v36;
    *(_QWORD *)(v8 + 16) = 0;
    *(_DWORD *)(v8 + 24) = -1;
    sub_1C5BE8258((_QWORD *)a1, v8);
    goto LABEL_105;
  }
  if (*(_QWORD *)(v8 + 48))
  {
    v140[0] = *(uint64_t **)(v8 + 48);
    v41 = sub_1C5BE8184(a1 + 1840, v140);
    if ((uint64_t *)(*(_QWORD *)(a1 + 1840) + 16 * *(unsigned int *)(a1 + 1856)) != v41)
    {
      *v41 = 0x7FFFFFFF0;
      *(int32x2_t *)(a1 + 1848) = vadd_s32(*(int32x2_t *)(a1 + 1848), (int32x2_t)0x1FFFFFFFFLL);
    }
  }
LABEL_105:
  v141 = (uint64_t *)a3;
  v140[0] = 0;
  v60 = sub_1C6322F20(*(_QWORD *)(a1 + 1624), *(_DWORD *)(a1 + 1640), (uint64_t *)&v141, v140);
  v61 = v140[0];
  if (v60)
    v62 = v140[0] == (uint64_t *)(*(_QWORD *)(a1 + 1624) + 56 * *(unsigned int *)(a1 + 1640));
  else
    v62 = 1;
  if (v62)
    goto LABEL_132;
  v64 = v140[0][1];
  v63 = (char *)v140[0][2];
  v65 = 24;
  if (v63 == (char *)v64)
    v65 = 28;
  v66 = *(unsigned int *)((char *)v140[0] + v65);
  v67 = (unint64_t *)v140[0][2];
  if ((_DWORD)v66)
  {
    v68 = 8 * v66;
    v67 = (unint64_t *)v140[0][2];
    while (*v67 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v67;
      v68 -= 8;
      if (!v68)
        goto LABEL_129;
    }
  }
  v69 = (unint64_t *)&v63[8 * v66];
  if (v67 != v69)
  {
    v70 = *(_QWORD *)(a1 + 2208);
    v71 = *(_DWORD *)(a1 + 2224);
    v72 = v71 - 1;
    v73 = *(_QWORD *)(a1 + 2088);
    v74 = *v67;
    if (v71)
    {
LABEL_118:
      v75 = ((v74 >> 4) ^ (v74 >> 9)) & v72;
      v76 = *(_QWORD *)(v70 + 16 * v75);
      if (v74 == v76)
      {
LABEL_122:
        v79 = *(_DWORD *)(v70 + 16 * v75 + 8);
        goto LABEL_124;
      }
      v77 = 1;
      while (v76 != -4096)
      {
        v78 = v75 + v77++;
        v75 = v78 & v72;
        v76 = *(_QWORD *)(v70 + 16 * v75);
        if (v74 == v76)
          goto LABEL_122;
      }
    }
LABEL_123:
    v79 = 0;
LABEL_124:
    *(_QWORD *)(v73 + 8 * (v79 >> 6)) |= 1 << v79;
    v80 = v67 + 1;
    while (v80 != v69)
    {
      v81 = *v80++;
      v74 = v81;
      if (v81 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v67 = v80 - 1;
        if (v71)
          goto LABEL_118;
        goto LABEL_123;
      }
    }
  }
LABEL_129:
  if (v63 != (char *)v64)
    free(v63);
  *v61 = 0x7FFFFFFF0;
  *(int32x2_t *)(a1 + 1632) = vadd_s32(*(int32x2_t *)(a1 + 1632), (int32x2_t)0x1FFFFFFFFLL);
LABEL_132:
  v82 = *(_QWORD *)(a2 + 8);
  if (v82)
  {
    v83 = *(_QWORD *)(a1 + 2208);
    v84 = *(_DWORD *)(a1 + 2224);
    v85 = v84 - 1;
    v86 = *(_QWORD *)(a1 + 2088);
    while (1)
    {
      if (!v84)
        goto LABEL_140;
      v87 = *(_QWORD *)(v82 + 24);
      v88 = ((v87 >> 4) ^ (v87 >> 9)) & v85;
      v89 = *(_QWORD *)(v83 + 16 * v88);
      if (v87 != v89)
        break;
LABEL_139:
      v92 = *(_DWORD *)(v83 + 16 * v88 + 8);
LABEL_141:
      *(_QWORD *)(v86 + 8 * (v92 >> 6)) |= 1 << v92;
      v82 = *(_QWORD *)(v82 + 8);
      if (!v82)
        goto LABEL_142;
    }
    v90 = 1;
    while (v89 != -4096)
    {
      v91 = v88 + v90++;
      v88 = v91 & v85;
      v89 = *(_QWORD *)(v83 + 16 * v88);
      if (v87 == v89)
        goto LABEL_139;
    }
LABEL_140:
    v92 = 0;
    goto LABEL_141;
  }
LABEL_142:
  v140[0] = 0;
  v93 = sub_1C61A45F4(*(_QWORD *)(a1 + 1600), *(_DWORD *)(a1 + 1616), a2, v140);
  v94 = v140[0];
  if (v93)
    v95 = v140[0] == (uint64_t *)(*(_QWORD *)(a1 + 1600) + 56 * *(unsigned int *)(a1 + 1616));
  else
    v95 = 1;
  if (!v95)
  {
    v97 = v140[0][1];
    v96 = (char *)v140[0][2];
    v98 = 24;
    if (v96 == (char *)v97)
      v98 = 28;
    v99 = *(unsigned int *)((char *)v140[0] + v98);
    v100 = (unint64_t *)v140[0][2];
    if ((_DWORD)v99)
    {
      v101 = 8 * v99;
      v100 = (unint64_t *)v140[0][2];
      while (*v100 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v100;
        v101 -= 8;
        if (!v101)
          goto LABEL_166;
      }
    }
    v102 = (unint64_t *)&v96[8 * v99];
    if (v100 == v102)
      goto LABEL_166;
    v103 = *(_QWORD *)(a1 + 2208);
    v104 = *(_DWORD *)(a1 + 2224);
    v105 = v104 - 1;
    v106 = *(_QWORD *)(a1 + 2088);
    v107 = *v100;
    if (v104)
    {
LABEL_155:
      v108 = ((v107 >> 4) ^ (v107 >> 9)) & v105;
      v109 = *(_QWORD *)(v103 + 16 * v108);
      if (v107 == v109)
      {
LABEL_159:
        v112 = *(_DWORD *)(v103 + 16 * v108 + 8);
        goto LABEL_161;
      }
      v110 = 1;
      while (v109 != -4096)
      {
        v111 = v108 + v110++;
        v108 = v111 & v105;
        v109 = *(_QWORD *)(v103 + 16 * v108);
        if (v107 == v109)
          goto LABEL_159;
      }
    }
LABEL_160:
    v112 = 0;
LABEL_161:
    *(_QWORD *)(v106 + 8 * (v112 >> 6)) |= 1 << v112;
    v113 = v100 + 1;
    while (v113 != v102)
    {
      v114 = *v113++;
      v107 = v114;
      if (v114 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v100 = v113 - 1;
        if (v104)
          goto LABEL_155;
        goto LABEL_160;
      }
    }
LABEL_166:
    if (v96 != (char *)v97)
      free(v96);
    *v94 = -8192;
    *(int32x2_t *)(a1 + 1608) = vadd_s32(*(int32x2_t *)(a1 + 1608), (int32x2_t)0x1FFFFFFFFLL);
  }
  v115 = sub_1C5BE26EC(a1, a2);
  if (v115)
    sub_1C5BE20B0(a1, v115);
  if (*(unsigned __int8 *)(a2 + 16) - 83 < 0xFFFFFFFE)
    goto LABEL_197;
  v140[0] = 0;
  if (!sub_1C61A45F4(*(_QWORD *)(a1 + 1720), *(_DWORD *)(a1 + 1736), a2, v140))
    goto LABEL_197;
  v116 = v140[0];
  if (v140[0] == (uint64_t *)(*(_QWORD *)(a1 + 1720) + 56 * *(unsigned int *)(a1 + 1736)))
    goto LABEL_197;
  v118 = v140[0][1];
  v117 = (char *)v140[0][2];
  v119 = 24;
  if (v117 == (char *)v118)
    v119 = 28;
  v120 = *(unsigned int *)((char *)v140[0] + v119);
  v121 = (unint64_t *)v140[0][2];
  if ((_DWORD)v120)
  {
    v122 = 8 * v120;
    v121 = (unint64_t *)v140[0][2];
    while (*v121 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v121;
      v122 -= 8;
      if (!v122)
        goto LABEL_194;
    }
  }
  v123 = (unint64_t *)&v117[8 * v120];
  if (v121 != v123)
  {
    v124 = *(_QWORD *)(a1 + 2208);
    v125 = *(_DWORD *)(a1 + 2224);
    v126 = v125 - 1;
    v127 = *(_QWORD *)(a1 + 2088);
    v128 = *v121;
    if (v125)
    {
LABEL_183:
      v129 = ((v128 >> 4) ^ (v128 >> 9)) & v126;
      v130 = *(_QWORD *)(v124 + 16 * v129);
      if (v128 == v130)
      {
LABEL_187:
        v133 = *(_DWORD *)(v124 + 16 * v129 + 8);
        goto LABEL_189;
      }
      v131 = 1;
      while (v130 != -4096)
      {
        v132 = v129 + v131++;
        v129 = v132 & v126;
        v130 = *(_QWORD *)(v124 + 16 * v129);
        if (v128 == v130)
          goto LABEL_187;
      }
    }
LABEL_188:
    v133 = 0;
LABEL_189:
    *(_QWORD *)(v127 + 8 * (v133 >> 6)) |= 1 << v133;
    v134 = v121 + 1;
    while (v134 != v123)
    {
      v135 = *v134++;
      v128 = v135;
      if (v135 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v121 = v134 - 1;
        if (v125)
          goto LABEL_183;
        goto LABEL_188;
      }
    }
  }
LABEL_194:
  if (v117 != (char *)v118)
    free(v117);
  *v116 = -8192;
  *(int32x2_t *)(a1 + 1728) = vadd_s32(*(int32x2_t *)(a1 + 1728), (int32x2_t)0x1FFFFFFFFLL);
LABEL_197:
  if (v8 != v10 && *(_BYTE *)(a2 + 16) == 61)
  {
    v140[0] = 0;
    if ((sub_1C6144BDC(*(_QWORD *)(a1 + 1408), *(_DWORD *)(a1 + 1424), a2, v140) & 1) != 0)
    {
      v136 = v140[0][1];
      if (v136)
      {
        if (*(_DWORD *)(v136 + 8) == 12)
        {
          v137 = *(_DWORD *)(a3 + 12);
          if (v137 != *(_DWORD *)(v136 + 12)
            || v137 <= 0xFFFFFFFD
            && ((*(_DWORD *)(a3 + 8) - 11) > 1
             || ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, v140[0][1]) & 1) == 0))
          {
            v140[0] = (uint64_t *)v136;
            v138 = sub_1C5BE8184(a1 + 1840, v140);
            if ((uint64_t *)(*(_QWORD *)(a1 + 1840) + 16 * *(unsigned int *)(a1 + 1856)) != v138)
            {
              *v138 = 0x7FFFFFFF0;
              *(int32x2_t *)(a1 + 1848) = vadd_s32(*(int32x2_t *)(a1 + 1848), (int32x2_t)0x1FFFFFFFFLL);
            }
          }
        }
      }
    }
  }
LABEL_208:
  v140[0] = (uint64_t *)a2;
  result = sub_1C6180A54(a1 + 1408, (uint64_t *)v140);
  result[1] = a3;
  return result;
}

unint64_t sub_1C5BE499C(uint64_t a1, _QWORD **a2, uint64_t a3, llvm::UndefValue **a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  llvm::Type *v15;
  uint64_t *v16;
  uint64_t v17;
  llvm::PoisonValue **v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  int v34;
  unsigned __int8 *v35;
  unint64_t v36;
  int v37;
  uint64_t v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  const llvm::Value *v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  llvm::UndefValue **v52;
  int v53;
  int v54;
  unsigned int v55;
  BOOL v56;
  int v57;
  int v58;
  uint64_t (**v59)();
  uint64_t v60;
  unsigned int *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *i;
  unint64_t *v65;
  const llvm::Value *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  _OWORD v72[3];
  char *v73;
  uint64_t v74;
  llvm::UndefValue **v75;
  uint64_t *v76[7];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  char *v80;

  v71 = 0;
  v70 = 1;
  v74 = a5;
  v75 = a4;
  v10 = a1 + 72;
  v11 = sub_1C484358C(a1 + 72, 56, 3);
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = a3;
  *(_QWORD *)v11 = &off_1E8196E58;
  *(_QWORD *)(v11 + 8) = 0xFFFFFFFD00000008;
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 48) = a5;
  v12 = 64 - __clz(a3 - 1);
  if ((_DWORD)a3)
    v13 = v12;
  else
    v13 = 0;
  v69 = a1 + 168;
  *(_QWORD *)(v11 + 24) = sub_1C6317048((uint64_t *)(a1 + 168), v13, v10);
  *(_QWORD *)(v11 + 40) = **a2;
  *(_DWORD *)(v11 + 12) = 55;
  v14 = (uint64_t *)&a2[2 * a3];
  *(_QWORD *)&v77 = a2;
  *((_QWORD *)&v77 + 1) = v14;
  *(_QWORD *)&v78 = &v75;
  *((_QWORD *)&v78 + 1) = a1;
  *(_QWORD *)&v79 = &v74;
  *((_QWORD *)&v79 + 1) = &v70;
  v80 = &v71;
  sub_1C5BE737C((uint64_t **)&v77);
  v76[0] = v14;
  v76[1] = v14;
  v76[2] = (uint64_t *)&v75;
  v76[3] = (uint64_t *)a1;
  v76[4] = &v74;
  v76[5] = (uint64_t *)&v70;
  v76[6] = (uint64_t *)&v71;
  sub_1C5BE737C(v76);
  v72[0] = v77;
  v72[1] = v78;
  v72[2] = v79;
  v73 = v80;
  v16 = v76[0];
  while (1)
  {
    v17 = *(_QWORD *)&v72[0];
    if (*(uint64_t **)&v72[0] == v16)
      break;
    v18 = sub_1C5BE5298(a1, **(_QWORD **)&v72[0]);
    v19 = *(_QWORD *)(v11 + 24);
    v20 = *(unsigned int *)(v11 + 36);
    *(_DWORD *)(v11 + 36) = v20 + 1;
    *(_QWORD *)(v19 + 8 * v20) = v18;
    *(_QWORD *)&v72[0] = v17 + 16;
    sub_1C5BE737C((uint64_t **)v72);
  }
  v21 = *(_QWORD **)(v11 + 24);
  v22 = *(unsigned int *)(v11 + 36);
  if ((_DWORD)v22)
  {
    v23 = 0;
    v24 = 0;
    v25 = 8 * v22;
    v26 = *(uint64_t **)(v11 + 24);
    do
    {
      v27 = *(unsigned __int8 *)(*v26 + 16);
      if (v27 == 12)
      {
        v23 = 1;
      }
      else
      {
        if ((v27 - 11) > 1)
          goto LABEL_16;
        v24 = 1;
      }
      ++v26;
      v25 -= 8;
    }
    while (v25);
    goto LABEL_24;
  }
  v24 = 0;
  v23 = 0;
  v26 = *(uint64_t **)(v11 + 24);
LABEL_16:
  v28 = &v21[v22];
  if (v26 == v28)
  {
LABEL_24:
    if (v24)
    {
      v32 = (unsigned __int8 *)llvm::UndefValue::get(*a4, v15);
    }
    else
    {
      if (!v23)
      {
        sub_1C5BE55A8(v21, *(_DWORD *)(v11 + 32), v69);
        return *(_QWORD *)(a1 + 1864);
      }
      v32 = (unsigned __int8 *)llvm::PoisonValue::get(*a4, v15);
    }
    v35 = v32;
    v36 = sub_1C484358C(v10, 32, 3);
    v11 = v36;
    *(_DWORD *)(v36 + 8) = 1;
    *(_QWORD *)v36 = &off_1E8196F78;
    *(_QWORD *)(v36 + 16) = 0;
    *(_QWORD *)(v36 + 24) = v35;
    v37 = v35[16];
    goto LABEL_40;
  }
  v29 = v26 + 1;
  v30 = *v26;
  while (v29 != v28)
  {
    v31 = *(unsigned __int8 *)(*v29 + 16);
    if (v31 == 12)
    {
      v23 = 1;
    }
    else
    {
      if ((v31 - 11) > 1)
        break;
      v24 = 1;
    }
    ++v29;
  }
  v33 = *v26;
LABEL_27:
  if (v30 == v33)
  {
    while (++v26 != v28)
    {
      v33 = *v26;
      v34 = *(unsigned __int8 *)(*v26 + 16);
      if (v34 == 12)
      {
        v23 = 1;
      }
      else
      {
        if ((v34 - 11) > 1)
        {
          if (v26 != v28)
            goto LABEL_27;
          break;
        }
        v24 = 1;
      }
    }
    if (v24)
    {
      if ((sub_1C4F8BE80((uint64_t ***)v30, *(_QWORD *)(a1 + 48), 0, *(_QWORD *)(a1 + 8), 0, 1) & 1) == 0)
        return v11;
    }
    else if (!v23)
    {
LABEL_54:
      if (*(unsigned __int8 *)(v30 + 16) < 0x1Cu)
        goto LABEL_70;
      v43 = *(_DWORD *)(a1 + 2224);
      if (!v43)
        goto LABEL_70;
      v44 = *(_QWORD *)(a1 + 2208);
      v45 = v43 - 1;
      v46 = v45 & ((v30 >> 4) ^ (v30 >> 9));
      v47 = *(_QWORD *)(v44 + 16 * v46);
      if (v30 == v47)
      {
LABEL_60:
        v50 = *(_DWORD *)(v44 + 16 * v46 + 8);
      }
      else
      {
        v48 = 1;
        while (v47 != -4096)
        {
          v49 = v46 + v48++;
          v46 = v49 & v45;
          v47 = *(_QWORD *)(v44 + 16 * v46);
          if (v30 == v47)
            goto LABEL_60;
        }
        v50 = 0;
      }
      v51 = v45 & ((a4 >> 4) ^ (a4 >> 9));
      v52 = *(llvm::UndefValue ***)(v44 + 16 * v51);
      if (v52 == a4)
      {
LABEL_67:
        v55 = *(_DWORD *)(v44 + 16 * v51 + 8);
      }
      else
      {
        v53 = 1;
        while (v52 != (llvm::UndefValue **)-4096)
        {
          v54 = v51 + v53++;
          v51 = v54 & v45;
          v52 = *(llvm::UndefValue ***)(v44 + 16 * v51);
          if (v52 == a4)
            goto LABEL_67;
        }
        v55 = 0;
      }
      if (v50 <= v55)
      {
LABEL_70:
        sub_1C5BE55A8(*(_QWORD **)(v11 + 24), *(_DWORD *)(v11 + 32), v69);
        if (v30)
          v56 = *(unsigned __int8 *)(v30 + 16) > 0x14u;
        else
          v56 = 1;
        v57 = v56;
        v36 = sub_1C484358C(v10, 32, 3);
        v11 = v36;
        if (v57)
          v58 = 2;
        else
          v58 = 1;
        v59 = &off_1E8196F78;
        if (v57)
          v59 = &off_1E8196FB8;
        *(_DWORD *)(v36 + 8) = v58;
        *(_QWORD *)v36 = v59;
        *(_QWORD *)(v36 + 16) = 0;
        *(_QWORD *)(v36 + 24) = v30;
        v37 = *(unsigned __int8 *)(v30 + 16);
LABEL_40:
        *(_DWORD *)(v36 + 12) = v37;
        return v11;
      }
      return v11;
    }
    if (v71 && !v70 && *(unsigned __int8 *)(v30 + 16) - 11 >= 2 && !sub_1C5BE70C8(a1, (uint64_t)a4))
      return v11;
    if (v30 && *(unsigned __int8 *)(v30 + 16) >= 0x1Cu)
    {
      v39 = sub_1C5BE5544(*(_QWORD *)(a1 + 1384), *(_DWORD *)(a1 + 1400), v30);
      if (!v39)
        return v11;
      v40 = (_QWORD *)v39;
      v41 = *(unsigned __int8 **)(v39 + 8);
      if (v41[16] >= 0x16u
        && !llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(a1 + 8), (const llvm::Value *)v41, (const llvm::Instruction *)a4))
      {
        v42 = (const llvm::Value *)v40[2];
        if (!v42
          || !llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(a1 + 8), v42, (const llvm::Instruction *)a4))
        {
          v60 = v40[8];
          if (v60 == v40[7])
            v61 = (unsigned int *)v40 + 19;
          else
            v61 = (unsigned int *)(v40 + 9);
          v62 = *v61;
          if ((_DWORD)v62)
          {
            v63 = 8 * v62;
            for (i = (unint64_t *)v40[8]; *i >= 0xFFFFFFFFFFFFFFFELL; ++i)
            {
              v63 -= 8;
              if (!v63)
                return v11;
            }
          }
          else
          {
            i = (unint64_t *)v40[8];
          }
          v65 = (unint64_t *)(v60 + 8 * v62);
          if (i == v65)
            return v11;
          v66 = (const llvm::Value *)*i;
LABEL_93:
          if ((const llvm::Value *)v40[1] == v66
            || !llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(a1 + 8), v66, (const llvm::Instruction *)a4))
          {
            v67 = i + 1;
            while (v67 != v65)
            {
              v68 = *v67++;
              v66 = (const llvm::Value *)v68;
              if (v68 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                i = v67 - 1;
                goto LABEL_93;
              }
            }
            return v11;
          }
        }
      }
    }
    goto LABEL_54;
  }
  return v11;
}

void sub_1C5BE4F08(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unsigned int v7;
  int v8;
  const llvm::DataLayout *v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned __int8 **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::Type **v35;
  llvm *v36;
  void *v37;
  uint64_t v38;
  _QWORD v39[9];

  v39[8] = *MEMORY[0x1E0C80C00];
  v6 = sub_1C484358C(a2 + 72, 48, 3);
  v7 = *(_DWORD *)(a3 + 20) & 0x7FFFFFF;
  *(_QWORD *)(v6 + 8) = 0xFFFFFFFD00000006;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)v6 = &off_1E8196D10;
  *(_QWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 40) = 0;
  v8 = sub_1C5BE5618(a2, a3, v6);
  if (llvm::Instruction::isCommutative((llvm::Instruction *)a3))
  {
    v10 = *(uint64_t **)(v6 + 24);
    v11 = *v10;
    v12 = v10[1];
    v13 = sub_1C5BE5474(a2, *v10);
    v14 = sub_1C5BE5474(a2, v12);
    if (v14 < v13 || (v12 < v11 ? (v15 = v13 >= v14) : (v15 = 0), v15))
    {
      *v10 = v12;
      v10[1] = v11;
    }
  }
  v16 = *(unsigned __int8 *)(a3 + 16);
  if ((v16 - 83) >= 0xFFFFFFFE)
  {
    v22 = *(_WORD *)(a3 + 18) & 0x3FLL;
    v23 = *(uint64_t **)(v6 + 24);
    v24 = (unsigned __int8 *)*v23;
    v25 = (unsigned __int8 *)v23[1];
    v26 = sub_1C5BE5474(a2, *v23);
    v27 = sub_1C5BE5474(a2, (uint64_t)v25);
    if (v27 < v26 || (v25 < v24 ? (v28 = v26 >= v27) : (v28 = 0), v28))
    {
      *v23 = (uint64_t)v25;
      v23[1] = (uint64_t)v24;
      v22 = dword_1C866A768[v22];
      v29 = *(unsigned __int8 ***)(v6 + 24);
      v24 = *v29;
      v25 = v29[1];
    }
    *(_DWORD *)(v6 + 12) = v22 | ((v16 << 8) - 7168);
    v21 = (uint64_t)sub_1C4E6D894(v22, v24, v25, a2 + 1264, 3);
    goto LABEL_29;
  }
  if (v16 == 85)
  {
    v17 = *(uint64_t **)(v6 + 24);
    v18 = v17[1];
    v19 = v17[2];
    if (*(unsigned __int8 *)(*v17 + 16) >= 0x15u)
    {
      v20 = v18 == v19;
      v19 = v17[1];
      if (!v20)
        goto LABEL_30;
    }
    v21 = (uint64_t)sub_1C4E6A420(*v17, v18, v19, a2 + 1264, 3);
LABEL_29:
    sub_1C5BE52F8(a1, a2, v6, a3, v21);
    if (*a1)
      return;
    goto LABEL_30;
  }
  if ((v16 - 41) <= 0x11)
  {
    v21 = sub_1C4E6D628(*(_DWORD *)(v6 + 12));
    goto LABEL_29;
  }
  if ((v16 - 79) >= 0xFFFFFFF3)
  {
    v21 = (uint64_t)sub_1C4E6C1BC((llvm *)(v16 - 28), **(_QWORD **)(v6 + 24), *(llvm::Constant **)a3, (llvm::Type **)(a2 + 1264), v9);
    goto LABEL_29;
  }
  if (v16 == 62)
  {
    v21 = (uint64_t)sub_1C4E6B244(*(llvm::GetElementPtrInst **)(a3 + 64), **(unsigned __int8 ***)(v6 + 24), (llvm::Value *)(*(_QWORD *)(v6 + 24) + 8), (8 * *(unsigned int *)(v6 + 36) - 8) >> 3, (*(unsigned __int8 *)(a3 + 17) >> 1) & 1, a2 + 1264);
    goto LABEL_29;
  }
  if (!v8)
  {
LABEL_30:
    a1[1] = 0;
    a1[2] = 0;
    *a1 = v6;
    return;
  }
  v37 = v39;
  v38 = 0x800000000;
  v30 = *(unsigned int *)(v6 + 36);
  if ((_DWORD)v30)
  {
    LODWORD(v31) = 0;
    v32 = *(uint64_t **)(v6 + 24);
    v33 = 8 * v30;
    do
    {
      v34 = *v32;
      if (v31 >= HIDWORD(v38))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, (uint64_t)v39, v31 + 1, 8);
        *((_QWORD *)v37 + v38) = v34;
        LODWORD(v31) = v38;
      }
      else
      {
        *((_QWORD *)v37 + v31) = v34;
      }
      v31 = (v31 + 1);
      LODWORD(v38) = v31;
      ++v32;
      v33 -= 8;
    }
    while (v33);
    v35 = (llvm::Type **)v37;
    v16 = *(unsigned __int8 *)(a3 + 16);
  }
  else
  {
    v31 = 0;
    v35 = (llvm::Type **)v39;
  }
  v36 = sub_1C4DECDA4((int **)a3, (llvm *)(v16 - 28), v35, v31, *(__int32 ***)(a2 + 56), *(llvm::DSOLocalEquivalent ***)(a2 + 16));
  if (!v36 || (sub_1C5BE52F8(a1, a2, v6, a3, (uint64_t)v36), !*a1))
  {
    if (v37 != v39)
      free(v37);
    goto LABEL_30;
  }
  if (v37 != v39)
    free(v37);
}

llvm::PoisonValue **sub_1C5BE5298(uint64_t a1, uint64_t a2)
{
  llvm::PoisonValue **v2;
  uint64_t v4;
  llvm::Type *v5;

  v2 = (llvm::PoisonValue **)a2;
  v4 = sub_1C5BE5544(*(_QWORD *)(a1 + 1384), *(_DWORD *)(a1 + 1400), a2);
  if (!v4)
    return v2;
  if (v4 != *(_QWORD *)(a1 + 1344))
  {
    v2 = *(llvm::PoisonValue ***)(v4 + 32);
    if (!v2)
      return *(llvm::PoisonValue ***)(v4 + 8);
    return v2;
  }
  return (llvm::PoisonValue **)llvm::PoisonValue::get(*v2, v5);
}

void sub_1C5BE52F8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v9;
  unint64_t v10;
  int v11;
  uint64_t (**v12)();
  int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unsigned int v19;
  unint64_t v20;
  int v21;
  uint64_t (**v22)();

  if (a5)
  {
    v9 = *(unsigned __int8 *)(a5 + 16);
    if (v9 <= 0x14)
    {
      sub_1C5BE55A8(*(_QWORD **)(a3 + 24), *(_DWORD *)(a3 + 32), a2 + 168);
      v10 = sub_1C484358C(a2 + 72, 32, 3);
      v11 = 1;
      v12 = &off_1E8196F78;
      goto LABEL_6;
    }
    if (v9 == 21)
    {
      sub_1C5BE55A8(*(_QWORD **)(a3 + 24), *(_DWORD *)(a3 + 32), a2 + 168);
      v10 = sub_1C484358C(a2 + 72, 32, 3);
      v11 = 2;
      v12 = &off_1E8196FB8;
LABEL_6:
      *(_QWORD *)v10 = v12;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = a5;
      v13 = *(unsigned __int8 *)(a5 + 16);
      *(_DWORD *)(v10 + 8) = v11;
      *(_DWORD *)(v10 + 12) = v13;
      a1[1] = 0;
      a1[2] = 0;
      *a1 = v10;
      return;
    }
    v15 = sub_1C5BE5544(*(_QWORD *)(a2 + 1384), *(_DWORD *)(a2 + 1400), a5);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)(v15 + 8);
      if (v17)
        v18 = v17 == a4;
      else
        v18 = 1;
      if (!v18)
      {
        v19 = *(unsigned __int8 *)(v17 + 16);
        v20 = sub_1C484358C(a2 + 72, 32, 3);
        if (v19 <= 0x14)
          v21 = 1;
        else
          v21 = 2;
        v22 = &off_1E8196F78;
        if (v19 > 0x14)
          v22 = &off_1E8196FB8;
        *(_DWORD *)(v20 + 8) = v21;
        *(_QWORD *)v20 = v22;
        *(_QWORD *)(v20 + 16) = 0;
        *(_QWORD *)(v20 + 24) = v17;
        *(_DWORD *)(v20 + 12) = *(unsigned __int8 *)(v17 + 16);
        *a1 = v20;
        goto LABEL_23;
      }
      if (*(_QWORD *)(v15 + 48))
      {
        sub_1C5BE55A8(*(_QWORD **)(a3 + 24), *(_DWORD *)(a3 + 32), a2 + 168);
        *a1 = *(_QWORD *)(v16 + 48);
LABEL_23:
        a1[1] = a5;
        goto LABEL_16;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
LABEL_16:
  a1[2] = 0;
}

uint64_t sub_1C5BE5474(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 == 5)
    return 3;
  if (v2 == 12)
    return 1;
  if (v2 - 11 < 2)
    return 2;
  if (v2 < 0x15)
    return 0;
  if (v2 == 21)
    return (*(_DWORD *)(a2 + 32) + 4);
  v4 = *(_DWORD *)(a1 + 2224);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 2208);
    v6 = v4 - 1;
    v7 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v8 = *(_QWORD *)(v5 + 16 * v7);
    if (v8 == a2)
    {
LABEL_16:
      v11 = *(_DWORD *)(v5 + 16 * v7 + 8);
      if (v11)
        return (v11 + *(_DWORD *)(a1 + 1312) + 5);
    }
    else
    {
      v9 = 1;
      while (v8 != -4096)
      {
        v10 = v7 + v9++;
        v7 = v10 & v6;
        v8 = *(_QWORD *)(v5 + 16 * v7);
        if (v8 == a2)
          goto LABEL_16;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_1C5BE5544(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;

  if (a2)
  {
    v3 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v4 = *(_QWORD *)(a1 + 16 * v3);
    if (v4 == a3)
      return *(_QWORD *)(a1 + 16 * v3 + 8);
    v6 = 1;
    while (v4 != -4096)
    {
      v7 = v3 + v6++;
      v3 = v7 & (a2 - 1);
      v4 = *(_QWORD *)(a1 + 16 * v3);
      if (v4 == a3)
        return *(_QWORD *)(a1 + 16 * v3 + 8);
    }
  }
  return 0;
}

void sub_1C5BE55A8(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v5 = 64 - __clz(a2 - 1);
  if (a2)
    v6 = v5;
  else
    v6 = 0;
  if (*(_DWORD *)(a3 + 8) <= v6)
    sub_1C6154790(a3, v6 + 1);
  v7 = *(_QWORD *)a3;
  *a1 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v6);
  *(_QWORD *)(v7 + 8 * v6) = a1;
}

uint64_t sub_1C5BE5618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _BOOL8 v17;
  llvm::PoisonValue **v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 != 62 || a2 == 0)
    v8 = 0;
  else
    v8 = 64;
  *(_QWORD *)(a3 + 40) = *(_QWORD *)(a2 + v8);
  *(_DWORD *)(a3 + 12) = v6 - 28;
  v9 = (uint64_t *)(a1 + 168);
  v10 = *(unsigned int *)(a3 + 32);
  v11 = 64 - __clz(v10 - 1);
  if ((_DWORD)v10)
    v12 = v11;
  else
    v12 = 0;
  *(_QWORD *)(a3 + 24) = sub_1C6317048(v9, v12, a1 + 72);
  v13 = *(_DWORD *)(a2 + 20);
  if ((v13 & 0x40000000) == 0)
  {
    v14 = v13 & 0x7FFFFFF;
    v15 = (uint64_t *)(a2 - 32 * v14);
    if (v14)
      goto LABEL_12;
    return 1;
  }
  v15 = *(uint64_t **)(a2 - 8);
  v14 = v13 & 0x7FFFFFF;
  if (!v14)
    return 1;
LABEL_12:
  v16 = 32 * v14;
  LOBYTE(v17) = 1;
  do
  {
    v18 = sub_1C5BE5298(a1, *v15);
    v17 = v17 && *((unsigned __int8 *)v18 + 16) < 0x15u;
    v19 = *(_QWORD *)(a3 + 24);
    v20 = *(unsigned int *)(a3 + 36);
    *(_DWORD *)(a3 + 36) = v20 + 1;
    *(_QWORD *)(v19 + 8 * v20) = v18;
    v15 += 4;
    v16 -= 32;
  }
  while (v16);
  return v17;
}

uint64_t sub_1C5BE5714(uint64_t result, uint64_t *a2, _QWORD *a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  BOOL v39;
  uint64_t *v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t *v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t *v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t *v74;
  uint64_t *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t *v79;
  BOOL v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t *v100;
  int64_t v101;
  int64_t v102;
  int64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t *v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t *v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t *v141;
  unsigned int v142;
  uint64_t v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  unsigned int v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t *v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t *v178;
  uint64_t *v179;
  unsigned int v180;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;

  v8 = (uint64_t *)result;
LABEL_2:
  v178 = a2 - 4;
  v179 = a2 - 2;
  v177 = a2 - 6;
  v9 = v8;
  v187 = a2;
  while (2)
  {
    v8 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = ((char *)a2 - (char *)v9) >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v170 = (uint64_t *)(*a3 + 2160);
        v171 = *(a2 - 1);
        v189 = 0;
        v190 = v171;
        if (sub_1C61252B8(v170, &v190, &v189))
          v172 = *(_DWORD *)(v189 + 8);
        else
          v172 = 0;
        v173 = v9[1];
        v189 = 0;
        v190 = v173;
        result = sub_1C61252B8(v170, &v190, &v189);
        if ((_DWORD)result)
          v174 = *(_DWORD *)(v189 + 8);
        else
          v174 = 0;
        if (v172 < v174)
        {
          v175 = *v9;
          *v9 = *(a2 - 2);
          *(a2 - 2) = v175;
          v176 = v9[1];
          v9[1] = *(a2 - 1);
          *(a2 - 1) = v176;
        }
        return result;
      case 3uLL:
        return sub_1C5BE6924(v9, v9 + 2, v179, a3);
      case 4uLL:
        return sub_1C5BE6ED8(v9, v9 + 2, v9 + 4, v179, a3);
      case 5uLL:
        return sub_1C5BE66A8(v9, v9 + 2, v9 + 4, v9 + 6, v179, a3);
      default:
        if (v10 <= 383)
        {
          v79 = v9 + 2;
          v81 = v9 == a2 || v79 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v81)
            {
              v82 = 0;
              v83 = v9;
              do
              {
                v84 = v79;
                v85 = (uint64_t *)(*a3 + 2160);
                v86 = v83[3];
                v189 = 0;
                v190 = v86;
                if (sub_1C61252B8(v85, &v190, &v189))
                  v87 = *(_DWORD *)(v189 + 8);
                else
                  v87 = 0;
                v88 = v83[1];
                v189 = 0;
                v190 = v88;
                result = sub_1C61252B8(v85, &v190, &v189);
                if ((_DWORD)result)
                  v89 = *(_DWORD *)(v189 + 8);
                else
                  v89 = 0;
                if (v87 < v89)
                {
                  v90 = a2;
                  v91 = *v84;
                  v92 = v83[3];
                  v93 = v82;
                  while (1)
                  {
                    v94 = (char *)v8 + v93;
                    v95 = *(uint64_t *)((char *)v8 + v93 + 8);
                    *((_QWORD *)v94 + 2) = *(uint64_t *)((char *)v8 + v93);
                    *((_QWORD *)v94 + 3) = v95;
                    if (!v93)
                      break;
                    v96 = (uint64_t *)(*a3 + 2160);
                    v189 = 0;
                    v190 = v92;
                    if (sub_1C61252B8(v96, &v190, &v189))
                      v97 = *(_DWORD *)(v189 + 8);
                    else
                      v97 = 0;
                    v98 = *(uint64_t *)((char *)v8 + v93 - 8);
                    v189 = 0;
                    v190 = v98;
                    result = sub_1C61252B8(v96, &v190, &v189);
                    if ((_DWORD)result)
                      v99 = *(_DWORD *)(v189 + 8);
                    else
                      v99 = 0;
                    v93 -= 16;
                    if (v97 >= v99)
                    {
                      v100 = (uint64_t *)((char *)v8 + v93 + 16);
                      goto LABEL_155;
                    }
                  }
                  v100 = v8;
LABEL_155:
                  *v100 = v91;
                  v100[1] = v92;
                  a2 = v90;
                }
                v79 = v84 + 2;
                v82 += 16;
                v83 = v84;
              }
              while (v84 + 2 != a2);
            }
          }
          else if (!v81)
          {
            v129 = v9 + 3;
            do
            {
              v130 = v79;
              v131 = (uint64_t *)(*a3 + 2160);
              v132 = v8[3];
              v189 = 0;
              v190 = v132;
              if (sub_1C61252B8(v131, &v190, &v189))
                v133 = *(_DWORD *)(v189 + 8);
              else
                v133 = 0;
              v134 = v8[1];
              v189 = 0;
              v190 = v134;
              result = sub_1C61252B8(v131, &v190, &v189);
              if ((_DWORD)result)
                v135 = *(_DWORD *)(v189 + 8);
              else
                v135 = 0;
              if (v133 < v135)
              {
                v136 = a2;
                v137 = *v130;
                v138 = v8[3];
                v139 = v129;
                do
                {
                  v140 = *(v139 - 2);
                  *(v139 - 1) = *(v139 - 3);
                  *v139 = v140;
                  v141 = (uint64_t *)(*a3 + 2160);
                  v189 = 0;
                  v190 = v138;
                  if (sub_1C61252B8(v141, &v190, &v189))
                    v142 = *(_DWORD *)(v189 + 8);
                  else
                    v142 = 0;
                  v143 = *(v139 - 4);
                  v189 = 0;
                  v190 = v143;
                  result = sub_1C61252B8(v141, &v190, &v189);
                  if ((_DWORD)result)
                    v144 = *(_DWORD *)(v189 + 8);
                  else
                    v144 = 0;
                  v139 -= 2;
                }
                while (v142 < v144);
                *(v139 - 1) = v137;
                *v139 = v138;
                a2 = v136;
              }
              v79 = v130 + 2;
              v129 += 2;
              v8 = v130;
            }
            while (v130 + 2 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v101 = (v11 - 2) >> 1;
            v102 = v101;
            do
            {
              v103 = v102;
              if (v101 >= v102)
              {
                v104 = (2 * v102) | 1;
                v105 = &v8[2 * v104];
                if (2 * v102 + 2 < (uint64_t)v11)
                {
                  v106 = (uint64_t *)(*a3 + 2160);
                  v107 = v105[1];
                  v189 = 0;
                  v190 = v107;
                  v108 = sub_1C61252B8(v106, &v190, &v189) ? *(_DWORD *)(v189 + 8) : 0;
                  v109 = v105[3];
                  v189 = 0;
                  v190 = v109;
                  v110 = sub_1C61252B8(v106, &v190, &v189) ? *(_DWORD *)(v189 + 8) : 0;
                  v105 += 2 * (v108 < v110);
                  if (v108 < v110)
                    v104 = 2 * v103 + 2;
                }
                v111 = (uint64_t *)(*a3 + 2160);
                v112 = v105[1];
                v189 = 0;
                v190 = v112;
                if (sub_1C61252B8(v111, &v190, &v189))
                  v113 = *(_DWORD *)(v189 + 8);
                else
                  v113 = 0;
                v114 = &v8[2 * v103];
                v116 = v114[1];
                v115 = v114 + 1;
                v189 = 0;
                v190 = v116;
                result = sub_1C61252B8(v111, &v190, &v189);
                if ((_DWORD)result)
                  v117 = *(_DWORD *)(v189 + 8);
                else
                  v117 = 0;
                v38 = v113 >= v117;
                a2 = v187;
                if (v38)
                {
                  v118 = &v8[2 * v103];
                  v182 = *v118;
                  v185 = *v115;
                  do
                  {
                    v119 = v105;
                    *v118 = *v105;
                    v118[1] = v105[1];
                    if (v101 < v104)
                      break;
                    v120 = (2 * v104) | 1;
                    v105 = &v8[2 * v120];
                    v104 = 2 * v104 + 2;
                    if (v104 >= (uint64_t)v11)
                    {
                      v104 = v120;
                    }
                    else
                    {
                      v121 = (uint64_t *)(*a3 + 2160);
                      v122 = v105[1];
                      v189 = 0;
                      v190 = v122;
                      if (sub_1C61252B8(v121, &v190, &v189))
                        v180 = *(_DWORD *)(v189 + 8);
                      else
                        v180 = 0;
                      v123 = v105[3];
                      v189 = 0;
                      v190 = v123;
                      if (sub_1C61252B8(v121, &v190, &v189))
                        v124 = *(_DWORD *)(v189 + 8);
                      else
                        v124 = 0;
                      v105 += 2 * (v180 < v124);
                      if (v180 >= v124)
                        v104 = v120;
                    }
                    v125 = (uint64_t *)(*a3 + 2160);
                    v126 = v105[1];
                    v189 = 0;
                    v190 = v126;
                    v127 = sub_1C61252B8(v125, &v190, &v189) ? *(_DWORD *)(v189 + 8) : 0;
                    v189 = 0;
                    v190 = v185;
                    result = sub_1C61252B8(v125, &v190, &v189);
                    v128 = (_DWORD)result ? *(_DWORD *)(v189 + 8) : 0;
                    v118 = v119;
                  }
                  while (v127 >= v128);
                  a2 = v187;
                  *v119 = v182;
                  v119[1] = v185;
                }
              }
              v102 = v103 - 1;
            }
            while (v103);
            do
            {
              v156 = 0;
              v186 = *v8;
              v183 = v8[1];
              v157 = v8;
              do
              {
                v150 = &v157[2 * v156 + 2];
                v158 = (2 * v156) | 1;
                v159 = 2 * v156 + 2;
                if (v159 < (uint64_t)v11)
                {
                  v160 = (uint64_t *)(*a3 + 2160);
                  v161 = v150[1];
                  v189 = 0;
                  v190 = v161;
                  v162 = sub_1C61252B8(v160, &v190, &v189) ? *(_DWORD *)(v189 + 8) : 0;
                  v163 = v150[3];
                  v189 = 0;
                  v190 = v163;
                  result = sub_1C61252B8(v160, &v190, &v189);
                  v164 = (_DWORD)result ? *(_DWORD *)(v189 + 8) : 0;
                  v150 += 2 * (v162 < v164);
                  if (v162 < v164)
                    v158 = v159;
                }
                *v157 = *v150;
                v157[1] = v150[1];
                v157 = v150;
                v156 = v158;
              }
              while (v158 <= (uint64_t)((v11 - 2) >> 1));
              v165 = a2 - 2;
              if (v150 == a2 - 2)
              {
                *v150 = v186;
                v150[1] = v183;
              }
              else
              {
                *v150 = *(a2 - 2);
                v150[1] = *(a2 - 1);
                *(a2 - 2) = v186;
                *(a2 - 1) = v183;
                v166 = (char *)v150 - (char *)v8 + 16;
                if (v166 >= 17)
                {
                  v151 = (((unint64_t)v166 >> 4) - 2) >> 1;
                  v167 = v8[2 * v151 + 1];
                  v168 = (uint64_t *)(*a3 + 2160);
                  v189 = 0;
                  v190 = v167;
                  v145 = sub_1C61252B8(v168, &v190, &v189) ? *(_DWORD *)(v189 + 8) : 0;
                  v146 = v150[1];
                  v189 = 0;
                  v190 = v146;
                  result = sub_1C61252B8(v168, &v190, &v189);
                  v147 = (_DWORD)result ? *(_DWORD *)(v189 + 8) : 0;
                  if (v145 < v147)
                  {
                    v148 = v150[1];
                    v188 = *v150;
                    do
                    {
                      v149 = v150;
                      v150 = &v8[2 * v151];
                      *v149 = *v150;
                      v149[1] = v150[1];
                      if (!v151)
                        break;
                      v151 = (v151 - 1) >> 1;
                      v152 = v8[2 * v151 + 1];
                      v153 = (uint64_t *)(*a3 + 2160);
                      v189 = 0;
                      v190 = v152;
                      v154 = sub_1C61252B8(v153, &v190, &v189) ? *(_DWORD *)(v189 + 8) : 0;
                      v189 = 0;
                      v190 = v148;
                      result = sub_1C61252B8(v153, &v190, &v189);
                      v155 = (_DWORD)result ? *(_DWORD *)(v189 + 8) : 0;
                    }
                    while (v154 < v155);
                    *v150 = v188;
                    v150[1] = v148;
                  }
                }
              }
              a2 = v165;
            }
            while ((uint64_t)v11-- > 2);
          }
          return result;
        }
        v12 = v11 >> 1;
        v13 = &v9[2 * (v11 >> 1)];
        if ((unint64_t)v10 < 0x801)
        {
          sub_1C5BE6924(&v8[2 * (v11 >> 1)], v8, v179, a3);
        }
        else
        {
          sub_1C5BE6924(v8, &v8[2 * (v11 >> 1)], v179, a3);
          sub_1C5BE6924(v8 + 2, v13 - 2, v178, a3);
          sub_1C5BE6924(v8 + 4, &v8[2 * v12 + 2], v177, a3);
          sub_1C5BE6924(v13 - 2, &v8[2 * (v11 >> 1)], &v8[2 * v12 + 2], a3);
          v14 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v13;
          *(_OWORD *)v13 = v14;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v44 = (uint64_t *)(*a3 + 2160);
          v45 = *(v8 - 1);
          v189 = 0;
          v190 = v45;
          v46 = sub_1C61252B8(v44, &v190, &v189) ? *(_DWORD *)(v189 + 8) : 0;
          v47 = v8[1];
          v189 = 0;
          v190 = v47;
          v48 = sub_1C61252B8(v44, &v190, &v189) ? *(_DWORD *)(v189 + 8) : 0;
          if (v46 >= v48)
          {
            v50 = *v8;
            v49 = v8[1];
            v51 = (uint64_t *)(*a3 + 2160);
            v189 = 0;
            v190 = v49;
            if (sub_1C61252B8(v51, &v190, &v189))
              v52 = *(_DWORD *)(v189 + 8);
            else
              v52 = 0;
            v53 = *(a2 - 1);
            v189 = 0;
            v190 = v53;
            result = sub_1C61252B8(v51, &v190, &v189);
            if ((_DWORD)result)
              v54 = *(_DWORD *)(v189 + 8);
            else
              v54 = 0;
            if (v52 >= v54)
            {
              v74 = v8 + 2;
              do
              {
                v9 = v74;
                if (v74 >= a2)
                  break;
                v75 = (uint64_t *)(*a3 + 2160);
                v189 = 0;
                v190 = v49;
                v76 = sub_1C61252B8(v75, &v190, &v189) ? *(_DWORD *)(v189 + 8) : 0;
                v77 = v9[1];
                v189 = 0;
                v190 = v77;
                result = sub_1C61252B8(v75, &v190, &v189);
                v78 = (_DWORD)result ? *(_DWORD *)(v189 + 8) : 0;
                v74 = v9 + 2;
              }
              while (v76 >= v78);
            }
            else
            {
              v9 = v8;
              do
              {
                v55 = (uint64_t *)(*a3 + 2160);
                v189 = 0;
                v190 = v49;
                if (sub_1C61252B8(v55, &v190, &v189))
                  v56 = *(_DWORD *)(v189 + 8);
                else
                  v56 = 0;
                v57 = v9[3];
                v189 = 0;
                v190 = v57;
                result = sub_1C61252B8(v55, &v190, &v189);
                if ((_DWORD)result)
                  v58 = *(_DWORD *)(v189 + 8);
                else
                  v58 = 0;
                v9 += 2;
              }
              while (v56 >= v58);
            }
            v59 = a2;
            if (v9 < a2)
            {
              v59 = a2;
              do
              {
                v60 = (uint64_t *)(*a3 + 2160);
                v189 = 0;
                v190 = v49;
                if (sub_1C61252B8(v60, &v190, &v189))
                  v61 = *(_DWORD *)(v189 + 8);
                else
                  v61 = 0;
                v62 = *(v59 - 1);
                v189 = 0;
                v190 = v62;
                result = sub_1C61252B8(v60, &v190, &v189);
                if ((_DWORD)result)
                  v63 = *(_DWORD *)(v189 + 8);
                else
                  v63 = 0;
                v59 -= 2;
              }
              while (v61 < v63);
            }
            while (v9 < v59)
            {
              v64 = *v9;
              *v9 = *v59;
              *v59 = v64;
              v65 = v9[1];
              v9[1] = v59[1];
              v59[1] = v65;
              do
              {
                v66 = (uint64_t *)(*a3 + 2160);
                v189 = 0;
                v190 = v49;
                if (sub_1C61252B8(v66, &v190, &v189))
                  v67 = *(_DWORD *)(v189 + 8);
                else
                  v67 = 0;
                v68 = v9[3];
                v189 = 0;
                v190 = v68;
                if (sub_1C61252B8(v66, &v190, &v189))
                  v69 = *(_DWORD *)(v189 + 8);
                else
                  v69 = 0;
                v9 += 2;
              }
              while (v67 >= v69);
              do
              {
                v70 = (uint64_t *)(*a3 + 2160);
                v189 = 0;
                v190 = v49;
                if (sub_1C61252B8(v70, &v190, &v189))
                  v71 = *(_DWORD *)(v189 + 8);
                else
                  v71 = 0;
                v72 = *(v59 - 1);
                v189 = 0;
                v190 = v72;
                result = sub_1C61252B8(v70, &v190, &v189);
                if ((_DWORD)result)
                  v73 = *(_DWORD *)(v189 + 8);
                else
                  v73 = 0;
                v59 -= 2;
              }
              while (v71 < v73);
            }
            if (v9 - 2 != v8)
            {
              *v8 = *(v9 - 2);
              v8[1] = *(v9 - 1);
            }
            a5 = 0;
            *(v9 - 2) = v50;
            *(v9 - 1) = v49;
            continue;
          }
        }
        v15 = 0;
        v16 = v8[1];
        v184 = *v8;
        do
        {
          v17 = (uint64_t *)(*a3 + 2160);
          v18 = v8[v15 + 3];
          v189 = 0;
          v190 = v18;
          if (sub_1C61252B8(v17, &v190, &v189))
            v19 = *(_DWORD *)(v189 + 8);
          else
            v19 = 0;
          v189 = 0;
          v190 = v16;
          if (sub_1C61252B8(v17, &v190, &v189))
            v20 = *(_DWORD *)(v189 + 8);
          else
            v20 = 0;
          v15 += 2;
        }
        while (v19 < v20);
        v21 = &v8[v15];
        if (v15 == 2)
        {
          a2 = v187;
          do
          {
            if (v21 >= a2)
              break;
            v40 = (uint64_t *)(*a3 + 2160);
            v41 = *(a2 - 1);
            v189 = 0;
            v190 = v41;
            v42 = sub_1C61252B8(v40, &v190, &v189) ? *(_DWORD *)(v189 + 8) : 0;
            v189 = 0;
            v190 = v16;
            v43 = sub_1C61252B8(v40, &v190, &v189) ? *(_DWORD *)(v189 + 8) : 0;
            a2 -= 2;
          }
          while (v42 >= v43);
        }
        else
        {
          do
          {
            v22 = (uint64_t *)(*a3 + 2160);
            v23 = *(a2 - 1);
            v189 = 0;
            v190 = v23;
            if (sub_1C61252B8(v22, &v190, &v189))
              v24 = *(_DWORD *)(v189 + 8);
            else
              v24 = 0;
            v189 = 0;
            v190 = v16;
            if (sub_1C61252B8(v22, &v190, &v189))
              v25 = *(_DWORD *)(v189 + 8);
            else
              v25 = 0;
            a2 -= 2;
          }
          while (v24 >= v25);
        }
        v26 = a4;
        v9 = v21;
        if (v21 < a2)
        {
          v27 = a2;
          do
          {
            v28 = *v9;
            *v9 = *v27;
            *v27 = v28;
            v29 = v9[1];
            v9[1] = v27[1];
            v27[1] = v29;
            do
            {
              v30 = (uint64_t *)(*a3 + 2160);
              v31 = v9[3];
              v189 = 0;
              v190 = v31;
              if (sub_1C61252B8(v30, &v190, &v189))
                v32 = *(_DWORD *)(v189 + 8);
              else
                v32 = 0;
              v189 = 0;
              v190 = v16;
              if (sub_1C61252B8(v30, &v190, &v189))
                v33 = *(_DWORD *)(v189 + 8);
              else
                v33 = 0;
              v9 += 2;
            }
            while (v32 < v33);
            do
            {
              v34 = (uint64_t *)(*a3 + 2160);
              v35 = *(v27 - 1);
              v189 = 0;
              v190 = v35;
              if (sub_1C61252B8(v34, &v190, &v189))
                v36 = *(_DWORD *)(v189 + 8);
              else
                v36 = 0;
              v189 = 0;
              v190 = v16;
              if (sub_1C61252B8(v34, &v190, &v189))
                v37 = *(_DWORD *)(v189 + 8);
              else
                v37 = 0;
              v27 -= 2;
            }
            while (v36 >= v37);
          }
          while (v9 < v27);
        }
        if (v9 - 2 != v8)
        {
          *v8 = *(v9 - 2);
          v8[1] = *(v9 - 1);
        }
        *(v9 - 2) = v184;
        *(v9 - 1) = v16;
        v38 = v21 >= a2;
        a2 = v187;
        a4 = v26;
        if (!v38)
        {
LABEL_50:
          result = sub_1C5BE5714(v8, v9 - 2, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v39 = sub_1C5BE6C0C(v8, v9 - 2, a3);
        result = sub_1C5BE6C0C(v9, v187, a3);
        if (!(_DWORD)result)
        {
          if (v39)
            continue;
          goto LABEL_50;
        }
        a2 = v9 - 2;
        if (!v39)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_1C5BE66A8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  sub_1C5BE6ED8(a1, a2, a3, a4, a6);
  v12 = (uint64_t *)(*a6 + 2160);
  v13 = a5[1];
  v41 = 0;
  v42 = v13;
  if (sub_1C61252B8(v12, &v42, &v41))
    v14 = *(_DWORD *)(v41 + 8);
  else
    v14 = 0;
  v15 = a4[1];
  v41 = 0;
  v42 = v15;
  result = sub_1C61252B8(v12, &v42, &v41);
  if ((_DWORD)result)
    v17 = *(_DWORD *)(v41 + 8);
  else
    v17 = 0;
  if (v14 < v17)
  {
    v18 = *a4;
    *a4 = *a5;
    *a5 = v18;
    v19 = a4[1];
    a4[1] = a5[1];
    a5[1] = v19;
    v20 = (uint64_t *)(*a6 + 2160);
    v21 = a4[1];
    v41 = 0;
    v42 = v21;
    v22 = sub_1C61252B8(v20, &v42, &v41) ? *(_DWORD *)(v41 + 8) : 0;
    v23 = a3[1];
    v41 = 0;
    v42 = v23;
    result = sub_1C61252B8(v20, &v42, &v41);
    v24 = (_DWORD)result ? *(_DWORD *)(v41 + 8) : 0;
    if (v22 < v24)
    {
      v25 = *a3;
      *a3 = *a4;
      *a4 = v25;
      v26 = a3[1];
      a3[1] = a4[1];
      a4[1] = v26;
      v27 = (uint64_t *)(*a6 + 2160);
      v28 = a3[1];
      v41 = 0;
      v42 = v28;
      v29 = sub_1C61252B8(v27, &v42, &v41) ? *(_DWORD *)(v41 + 8) : 0;
      v30 = a2[1];
      v41 = 0;
      v42 = v30;
      result = sub_1C61252B8(v27, &v42, &v41);
      v31 = (_DWORD)result ? *(_DWORD *)(v41 + 8) : 0;
      if (v29 < v31)
      {
        v32 = *a2;
        *a2 = *a3;
        *a3 = v32;
        v33 = a2[1];
        a2[1] = a3[1];
        a3[1] = v33;
        v34 = (uint64_t *)(*a6 + 2160);
        v35 = a2[1];
        v41 = 0;
        v42 = v35;
        if (sub_1C61252B8(v34, &v42, &v41))
          v36 = *(_DWORD *)(v41 + 8);
        else
          v36 = 0;
        v37 = a1[1];
        v41 = 0;
        v42 = v37;
        result = sub_1C61252B8(v34, &v42, &v41);
        if ((_DWORD)result)
          v38 = *(_DWORD *)(v41 + 8);
        else
          v38 = 0;
        if (v36 < v38)
        {
          v39 = *a1;
          *a1 = *a2;
          *a2 = v39;
          v40 = a1[1];
          a1[1] = a2[1];
          a2[1] = v40;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C5BE6924(uint64_t *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t result;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v9 = a2 + 1;
  v8 = a2[1];
  v10 = (uint64_t *)(*a4 + 2160);
  v41 = 0;
  v42 = v8;
  if (sub_1C61252B8(v10, &v42, &v41))
    v11 = *(_DWORD *)(v41 + 8);
  else
    v11 = 0;
  v13 = a1 + 1;
  v12 = a1[1];
  v41 = 0;
  v42 = v12;
  if (sub_1C61252B8(v10, &v42, &v41))
    v14 = *(_DWORD *)(v41 + 8);
  else
    v14 = 0;
  v15 = (uint64_t *)(*a4 + 2160);
  v16 = a3[1];
  if (v11 >= v14)
  {
    v41 = 0;
    v42 = v16;
    if (sub_1C61252B8(v15, &v42, &v41))
      v18 = *(_DWORD *)(v41 + 8);
    else
      v18 = 0;
    v22 = *v9;
    v41 = 0;
    v42 = v22;
    result = sub_1C61252B8(v15, &v42, &v41);
    if ((_DWORD)result)
      v23 = *(_DWORD *)(v41 + 8);
    else
      v23 = 0;
    if (v18 < v23)
    {
      v30 = *a2;
      *a2 = *a3;
      *a3 = v30;
      v31 = a2[1];
      a2[1] = a3[1];
      a3[1] = v31;
      v32 = (uint64_t *)(*a4 + 2160);
      v33 = a2[1];
      v41 = 0;
      v42 = v33;
      v34 = sub_1C61252B8(v32, &v42, &v41) ? *(_DWORD *)(v41 + 8) : 0;
      v37 = *v13;
      v41 = 0;
      v42 = v37;
      result = sub_1C61252B8(v32, &v42, &v41);
      v38 = (_DWORD)result ? *(_DWORD *)(v41 + 8) : 0;
      if (v34 < v38)
      {
        v40 = *a1;
        *a1 = *a2;
        *a2 = v40;
        goto LABEL_22;
      }
    }
  }
  else
  {
    v41 = 0;
    v42 = v16;
    if (sub_1C61252B8(v15, &v42, &v41))
      v17 = *(_DWORD *)(v41 + 8);
    else
      v17 = 0;
    v19 = *v9;
    v41 = 0;
    v42 = v19;
    result = sub_1C61252B8(v15, &v42, &v41);
    if ((_DWORD)result)
      v21 = *(_DWORD *)(v41 + 8);
    else
      v21 = 0;
    v24 = *a1;
    if (v17 < v21)
    {
      *a1 = *a3;
      *a3 = v24;
LABEL_21:
      v9 = a3 + 1;
LABEL_22:
      v25 = *v13;
      *v13 = *v9;
      *v9 = v25;
      return result;
    }
    *a1 = *a2;
    *a2 = v24;
    v26 = a1[1];
    a1[1] = a2[1];
    a2[1] = v26;
    v27 = (uint64_t *)(*a4 + 2160);
    v28 = a3[1];
    v41 = 0;
    v42 = v28;
    if (sub_1C61252B8(v27, &v42, &v41))
      v29 = *(_DWORD *)(v41 + 8);
    else
      v29 = 0;
    v35 = *v9;
    v41 = 0;
    v42 = v35;
    result = sub_1C61252B8(v27, &v42, &v41);
    if ((_DWORD)result)
      v36 = *(_DWORD *)(v41 + 8);
    else
      v36 = 0;
    if (v29 < v36)
    {
      v39 = *a2;
      *a2 = *a3;
      *a3 = v39;
      v13 = v9;
      goto LABEL_21;
    }
  }
  return result;
}

BOOL sub_1C5BE6C0C(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v26 = (uint64_t *)(*a3 + 2160);
      v27 = *(a2 - 1);
      v34 = 0;
      v35 = v27;
      if (sub_1C61252B8(v26, &v35, &v34))
        v28 = *(_DWORD *)(v34 + 8);
      else
        v28 = 0;
      v29 = a1[1];
      v34 = 0;
      v35 = v29;
      if (sub_1C61252B8(v26, &v35, &v34))
        v30 = *(_DWORD *)(v34 + 8);
      else
        v30 = 0;
      if (v28 < v30)
      {
        v31 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v31;
        v32 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v32;
      }
      return 1;
    case 3:
      sub_1C5BE6924(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      sub_1C5BE6ED8(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      sub_1C5BE66A8(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v8 = a1 + 4;
      sub_1C5BE6924(a1, a1 + 2, a1 + 4, a3);
      v9 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = (uint64_t *)(*a3 + 2160);
    v13 = v9[1];
    v34 = 0;
    v35 = v13;
    v14 = sub_1C61252B8(v12, &v35, &v34) ? *(_DWORD *)(v34 + 8) : 0;
    v15 = v8[1];
    v34 = 0;
    v35 = v15;
    v16 = sub_1C61252B8(v12, &v35, &v34) ? *(_DWORD *)(v34 + 8) : 0;
    if (v14 < v16)
    {
      v17 = v9[1];
      v33 = *v9;
      v18 = v10;
      while (1)
      {
        v19 = (char *)a1 + v18;
        v20 = *(uint64_t *)((char *)a1 + v18 + 40);
        *((_QWORD *)v19 + 6) = *(uint64_t *)((char *)a1 + v18 + 32);
        *((_QWORD *)v19 + 7) = v20;
        if (v18 == -32)
          break;
        v21 = (uint64_t *)(*a3 + 2160);
        v34 = 0;
        v35 = v17;
        if (sub_1C61252B8(v21, &v35, &v34))
          v22 = *(_DWORD *)(v34 + 8);
        else
          v22 = 0;
        v23 = *(uint64_t *)((char *)a1 + v18 + 24);
        v34 = 0;
        v35 = v23;
        if (sub_1C61252B8(v21, &v35, &v34))
          v24 = *(_DWORD *)(v34 + 8);
        else
          v24 = 0;
        v18 -= 16;
        if (v22 >= v24)
        {
          v25 = (uint64_t *)((char *)a1 + v18 + 48);
          goto LABEL_23;
        }
      }
      v25 = a1;
LABEL_23:
      *v25 = v33;
      v25[1] = v17;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    result = 1;
    v9 += 2;
    if (v9 == a2)
      return result;
  }
}

uint64_t sub_1C5BE6ED8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t result;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  sub_1C5BE6924(a1, a2, a3, a5);
  v10 = (uint64_t *)(*a5 + 2160);
  v11 = a4[1];
  v32 = 0;
  v33 = v11;
  if (sub_1C61252B8(v10, &v33, &v32))
    v12 = *(_DWORD *)(v32 + 8);
  else
    v12 = 0;
  v13 = a3[1];
  v32 = 0;
  v33 = v13;
  result = sub_1C61252B8(v10, &v33, &v32);
  if ((_DWORD)result)
    v15 = *(_DWORD *)(v32 + 8);
  else
    v15 = 0;
  if (v12 < v15)
  {
    v16 = *a3;
    *a3 = *a4;
    *a4 = v16;
    v17 = a3[1];
    a3[1] = a4[1];
    a4[1] = v17;
    v18 = (uint64_t *)(*a5 + 2160);
    v19 = a3[1];
    v32 = 0;
    v33 = v19;
    v20 = sub_1C61252B8(v18, &v33, &v32) ? *(_DWORD *)(v32 + 8) : 0;
    v21 = a2[1];
    v32 = 0;
    v33 = v21;
    result = sub_1C61252B8(v18, &v33, &v32);
    v22 = (_DWORD)result ? *(_DWORD *)(v32 + 8) : 0;
    if (v20 < v22)
    {
      v23 = *a2;
      *a2 = *a3;
      *a3 = v23;
      v24 = a2[1];
      a2[1] = a3[1];
      a3[1] = v24;
      v25 = (uint64_t *)(*a5 + 2160);
      v26 = a2[1];
      v32 = 0;
      v33 = v26;
      if (sub_1C61252B8(v25, &v33, &v32))
        v27 = *(_DWORD *)(v32 + 8);
      else
        v27 = 0;
      v28 = a1[1];
      v32 = 0;
      v33 = v28;
      result = sub_1C61252B8(v25, &v33, &v32);
      if ((_DWORD)result)
        v29 = *(_DWORD *)(v32 + 8);
      else
        v29 = 0;
      if (v27 < v29)
      {
        v30 = *a1;
        *a1 = *a2;
        *a2 = v30;
        v31 = a1[1];
        a1[1] = a2[1];
        a2[1] = v31;
      }
    }
  }
  return result;
}

BOOL sub_1C5BE70C8(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t *v25;
  uint64_t *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *i;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD v46[3];
  uint64_t v47;
  int v48;

  v46[0] = 0;
  if ((sub_1C49F21C0(*(_QWORD *)(a1 + 1816), *(_DWORD *)(a1 + 1832), a2, v46) & 1) != 0)
  {
    v4 = *(_DWORD *)(v46[0] + 8);
    if (v4)
      return v4 != 2;
  }
  v5 = *(_DWORD *)(a1 + 368);
  v6 = a2 >> 4;
  if (v5)
  {
    v7 = *(_QWORD *)(a1 + 352);
    v8 = v5 - 1;
    v9 = (v5 - 1) & (v6 ^ (a2 >> 9));
    v10 = *(_QWORD *)(v7 + 16 * v9);
    if (v10 == a2)
    {
LABEL_8:
      if (*(_DWORD *)(v7 + 16 * v9 + 8))
        goto LABEL_10;
    }
    else
    {
      v11 = 1;
      while (v10 != -4096)
      {
        v12 = v9 + v11++;
        v9 = v12 & v8;
        v10 = *(_QWORD *)(v7 + 16 * v9);
        if (v10 == a2)
          goto LABEL_8;
      }
    }
  }
  sub_1C5BE7764((int *)(a1 + 248), a2);
LABEL_10:
  v13 = a1 + 1816;
  v14 = *(_DWORD *)(a1 + 1256);
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 1240);
    v16 = v14 - 1;
    v17 = (v14 - 1) & (v6 ^ (a2 >> 9));
    v18 = *(_QWORD *)(v15 + 16 * v17);
    if (v18 == a2)
    {
LABEL_15:
      v21 = *(_DWORD *)(v15 + 16 * v17 + 8);
      goto LABEL_17;
    }
    v19 = 1;
    while (v18 != -4096)
    {
      v20 = v17 + v19++;
      v17 = v20 & v16;
      v18 = *(_QWORD *)(v15 + 16 * v17);
      if (v18 == a2)
        goto LABEL_15;
    }
  }
  v21 = 0;
LABEL_17:
  v22 = *(_QWORD *)(a1 + 456) + 96 * v21;
  v24 = (unsigned int *)(v22 + 20);
  LODWORD(v23) = *(_DWORD *)(v22 + 20);
  if ((_DWORD)v23 - *(_DWORD *)(v22 + 24) == 1)
  {
    v47 = a2;
    v48 = 1;
    sub_1C5BE765C((uint64_t)v46, v13, (uint64_t)&v47);
    v4 = 0;
    return v4 != 2;
  }
  v26 = *(uint64_t **)v22;
  v25 = *(uint64_t **)(v22 + 8);
  v29 = *(_DWORD *)(v22 + 16);
  v28 = (unsigned int *)(v22 + 16);
  v27 = v29;
  if (v25 == v26)
    v23 = v23;
  else
    v23 = v27;
  v30 = v25;
  if ((_DWORD)v23)
  {
    v31 = 8 * v23;
    v30 = v25;
    while ((unint64_t)*v30 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v30;
      v31 -= 8;
      if (!v31)
        goto LABEL_36;
    }
  }
  v32 = &v25[v23];
  if (v30 != v32)
  {
    v33 = *v30;
LABEL_29:
    if (*(_BYTE *)(v33 + 16) != 83)
    {
      v34 = sub_1C5BE7600(v33);
      if (!v34 || *(_BYTE *)(v34 + 16) != 83)
      {
        v4 = 2;
        goto LABEL_37;
      }
    }
    v35 = (unint64_t *)(v30 + 1);
    while (v35 != (unint64_t *)v32)
    {
      v36 = *v35++;
      v33 = v36;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v30 = (uint64_t *)(v35 - 1);
        goto LABEL_29;
      }
    }
  }
LABEL_36:
  v4 = 1;
LABEL_37:
  if (v25 == v26)
    v37 = v24;
  else
    v37 = v28;
  v38 = *v37;
  if ((_DWORD)v38)
  {
    v39 = 8 * v38;
    for (i = (unint64_t *)v25; *i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v39 -= 8;
      if (!v39)
        return v4 != 2;
    }
  }
  else
  {
    i = (unint64_t *)v25;
  }
  v41 = (unint64_t *)&v25[v38];
  if (i != v41)
  {
    v42 = *i;
    if (*i)
    {
LABEL_48:
      if (*(_BYTE *)(v42 + 16) == 83)
      {
        v47 = v42;
        v48 = v4;
        sub_1C5BE765C((uint64_t)v46, v13, (uint64_t)&v47);
      }
    }
LABEL_50:
    v43 = i + 1;
    while (v43 != v41)
    {
      v44 = *v43++;
      v42 = v44;
      if (v44 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        i = v43 - 1;
        if (v42)
          goto LABEL_48;
        goto LABEL_50;
      }
    }
  }
  return v4 != 2;
}

uint64_t **sub_1C5BE737C(uint64_t **result)
{
  uint64_t *v1;
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  char v9;
  BOOL *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  _QWORD v34[2];
  uint64_t v35;

  v1 = *result;
  if (*result != result[1])
  {
    v2 = result;
    while (1)
    {
      v3 = v1[1];
      v4 = (uint64_t)v2[3];
      v5 = *v2[2];
      if (!v5
        || *(_BYTE *)(v5 + 16) != 83
        || (result = (uint64_t **)*v1, *v1 != v5)
        && (result = (uint64_t **)sub_1C5BE7600((uint64_t)result), result != (uint64_t **)v5))
      {
        v6 = *v2[4];
        v34[0] = v3;
        v34[1] = v6;
        v35 = 0;
        result = (uint64_t **)sub_1C5B554C8((uint64_t *)(v4 + 1968), v34, &v35);
        if ((_DWORD)result)
        {
          v7 = *v1;
          result = (uint64_t **)sub_1C5BE5544(*(_QWORD *)(v4 + 1384), *(_DWORD *)(v4 + 1400), *v1);
          if (result != *(uint64_t ***)(v4 + 1344))
            break;
        }
      }
LABEL_15:
      v13 = v2[1];
      v1 = *v2 + 2;
      *v2 = v1;
      if (v1 == v13)
        return result;
    }
    v8 = v2[5];
    v9 = *(_BYTE *)v8;
    if (*(_BYTE *)v8)
      v9 = *(unsigned __int8 *)(v7 + 16) < 0x15u;
    *(_BYTE *)v8 = v9;
    v10 = (BOOL *)v2[6];
    if (*v10 || (v11 = *v2[4], v3 == v11))
    {
      v12 = 1;
      goto LABEL_14;
    }
    v14 = *(_QWORD *)(v4 + 8);
    v15 = *(_QWORD *)(v14 + 24);
    v16 = *(unsigned int *)(v14 + 40);
    if ((_DWORD)v16)
    {
      LODWORD(v17) = (v16 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      v18 = (uint64_t *)(v15 + 16 * v17);
      v19 = *v18;
      if (v3 == *v18)
        goto LABEL_24;
      v20 = 1;
      while (v19 != -4096)
      {
        v21 = v17 + v20++;
        v17 = v21 & (v16 - 1);
        v19 = *(_QWORD *)(v15 + 16 * v17);
        if (v3 == v19)
        {
          v18 = (uint64_t *)(v15 + 16 * v17);
          goto LABEL_24;
        }
      }
    }
    v18 = (uint64_t *)(v15 + 16 * v16);
LABEL_24:
    if (v18 == (uint64_t *)(v15 + 16 * v16))
      v22 = 0;
    else
      v22 = v18[1];
    v34[0] = 0;
    if (sub_1C6144BDC(*(_QWORD *)(v4 + 1320), *(_DWORD *)(v4 + 1336), v22, v34))
      v23 = *(_DWORD *)(v34[0] + 8);
    else
      v23 = 0;
    v24 = *(_QWORD *)(v4 + 8);
    v25 = *(_QWORD *)(v24 + 24);
    v26 = *(unsigned int *)(v24 + 40);
    if ((_DWORD)v26)
    {
      LODWORD(v27) = (v26 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      v28 = (uint64_t *)(v25 + 16 * v27);
      v29 = *v28;
      if (v11 == *v28)
      {
LABEL_37:
        if (v28 == (uint64_t *)(v25 + 16 * v26))
          v32 = 0;
        else
          v32 = v28[1];
        v34[0] = 0;
        if (sub_1C6144BDC(*(_QWORD *)(v4 + 1320), *(_DWORD *)(v4 + 1336), v32, v34))
          v33 = *(_DWORD *)(v34[0] + 8);
        else
          v33 = 0;
        v12 = v23 >= v33;
        v10 = (BOOL *)v2[6];
LABEL_14:
        *v10 = v12;
        result = (uint64_t **)sub_1C5BE5298(v4, *v1);
        if (result != (uint64_t **)*v2[2])
          return result;
        goto LABEL_15;
      }
      v30 = 1;
      while (v29 != -4096)
      {
        v31 = v27 + v30++;
        v27 = v31 & (v26 - 1);
        v29 = *(_QWORD *)(v25 + 16 * v27);
        if (v11 == v29)
        {
          v28 = (uint64_t *)(v25 + 16 * v27);
          goto LABEL_37;
        }
      }
    }
    v28 = (uint64_t *)(v25 + 16 * v26);
    goto LABEL_37;
  }
  return result;
}

uint64_t sub_1C5BE7600(uint64_t a1)
{
  uint64_t v1;

  if (*(_BYTE *)(a1 + 16) == 84
    && (v1 = *(_QWORD *)(a1 - 32)) != 0
    && !*(_BYTE *)(v1 + 16)
    && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
    && (*(_BYTE *)(v1 + 33) & 0x20) != 0
    && *(_DWORD *)(v1 + 36) == 281)
  {
    return *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1C5BE765C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  result = sub_1C49F21C0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *(_QWORD *)a3, &v12);
  v7 = v12;
  if ((result & 1) != 0)
  {
    v8 = 0;
    goto LABEL_8;
  }
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_DWORD *)(a2 + 16);
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
    goto LABEL_10;
  }
  if (v10 + ~v9 - *(_DWORD *)(a2 + 12) <= v10 >> 3)
  {
LABEL_10:
    sub_1C5BE1A94(a2, v10);
    v12 = 0;
    result = sub_1C49F21C0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *(_QWORD *)a3, &v12);
    v7 = v12;
  }
  ++*(_DWORD *)(a2 + 8);
  if (*(_QWORD *)v7 != -4096)
    --*(_DWORD *)(a2 + 12);
  *(_QWORD *)v7 = *(_QWORD *)a3;
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(a3 + 8);
  v8 = 1;
LABEL_8:
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

_DWORD *sub_1C5BE7764(int *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  _DWORD *result;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  llvm::SmallPtrSetImplBase *v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  _QWORD *v64;
  int v65;
  BOOL v66;
  unsigned int v67;
  _QWORD *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;

  v4 = *a1 + 1;
  *a1 = v4;
  v5 = (uint64_t)(a1 + 26);
  v71 = a2;
  result = sub_1C504CE94((uint64_t)(a1 + 26), &v71);
  result[2] = v4;
  v7 = *(_DWORD *)(a2 + 20);
  if ((v7 & 0x40000000) != 0)
  {
    v9 = *(uint64_t **)(a2 - 8);
    v8 = v7 & 0x7FFFFFF;
  }
  else
  {
    v8 = v7 & 0x7FFFFFF;
    v9 = (uint64_t *)(a2 - 32 * v8);
  }
  v69 = *a1;
  v70 = a2 >> 4;
  if (v8)
  {
    v10 = &v9[4 * v8];
    do
    {
      v11 = *v9;
      if (*v9)
        v12 = *(unsigned __int8 *)(*v9 + 16) >= 0x1Cu;
      else
        v12 = 0;
      if (!v12)
        goto LABEL_40;
      v13 = a1[30];
      if (v13)
      {
        v14 = *((_QWORD *)a1 + 13);
        v15 = v13 - 1;
        v16 = (v13 - 1) & ((v11 >> 4) ^ (v11 >> 9));
        v17 = *(_QWORD *)(v14 + 16 * v16);
        if (v11 == v17)
        {
LABEL_16:
          if (*(_DWORD *)(v14 + 16 * v16 + 8))
            goto LABEL_18;
        }
        else
        {
          v18 = 1;
          while (v17 != -4096)
          {
            v19 = v16 + v18++;
            v16 = v19 & v15;
            v17 = *(_QWORD *)(v14 + 16 * v16);
            if (v11 == v17)
              goto LABEL_16;
          }
        }
      }
      sub_1C5BE7764(a1);
      v11 = *v9;
LABEL_18:
      result = sub_1C477672C((uint64_t)(a1 + 2), v11);
      v20 = *((_QWORD *)a1 + 2);
      if (v20 == *((_QWORD *)a1 + 1))
        v21 = 7;
      else
        v21 = 6;
      if (result != (_DWORD *)(v20 + 8 * a1[v21]))
        goto LABEL_40;
      v22 = a1[30];
      if (!v22)
      {
        v29 = 0;
LABEL_35:
        v34 = 0;
        goto LABEL_36;
      }
      v23 = *((_QWORD *)a1 + 13);
      v24 = v22 - 1;
      v25 = v24 & (v70 ^ (a2 >> 9));
      v26 = *(_QWORD *)(v23 + 16 * v25);
      if (v26 == a2)
      {
LABEL_27:
        v29 = *(_DWORD *)(v23 + 16 * v25 + 8);
      }
      else
      {
        v27 = 1;
        while (v26 != -4096)
        {
          v28 = v25 + v27++;
          v25 = v28 & v24;
          v26 = *(_QWORD *)(v23 + 16 * v25);
          if (v26 == a2)
            goto LABEL_27;
        }
        v29 = 0;
      }
      v30 = ((*v9 >> 4) ^ (*v9 >> 9)) & v24;
      v31 = *(_QWORD *)(v23 + 16 * v30);
      if (*v9 != v31)
      {
        v32 = 1;
        while (v31 != -4096)
        {
          v33 = v30 + v32++;
          v30 = v33 & v24;
          v31 = *(_QWORD *)(v23 + 16 * v30);
          if (*v9 == v31)
            goto LABEL_33;
        }
        goto LABEL_35;
      }
LABEL_33:
      v34 = *(_DWORD *)(v23 + 16 * v30 + 8);
LABEL_36:
      if (v34 >= v29)
        v35 = v29;
      else
        v35 = v34;
      v71 = a2;
      result = sub_1C504CE94(v5, &v71);
      result[2] = v35;
LABEL_40:
      v9 += 4;
    }
    while (v9 != v10);
  }
  v36 = a1[30];
  if (v36)
  {
    v37 = *((_QWORD *)a1 + 13);
    v38 = v36 - 1;
    v39 = (v36 - 1) & (v70 ^ (a2 >> 9));
    v40 = *(_QWORD *)(v37 + 16 * v39);
    if (v40 == a2)
    {
      v42 = v69;
LABEL_49:
      v44 = *(_DWORD *)(v37 + 16 * v39 + 8);
    }
    else
    {
      v41 = 1;
      v42 = v69;
      while (v40 != -4096)
      {
        v43 = v39 + v41++;
        v39 = v43 & v38;
        v40 = *(_QWORD *)(v37 + 16 * v39);
        if (v40 == a2)
          goto LABEL_49;
      }
      v44 = 0;
    }
  }
  else
  {
    v44 = 0;
    v42 = v69;
  }
  if (v44 == v42)
  {
    v46 = a1[54];
    sub_1C6322C30((uint64_t)(a1 + 52), v46 + 1);
    v47 = (llvm::SmallPtrSetImplBase *)(*((_QWORD *)a1 + 26) + 96 * a1[54] - 96);
    sub_1C4774094(v47, a2);
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 2), a2);
    v71 = a2;
    result = sub_1C504CE94((uint64_t)(a1 + 248), &v71);
    result[2] = v46;
    v48 = a1[34];
    if (!v48)
      return result;
    while (1)
    {
      v49 = *((_QWORD *)a1 + 16) + 8 * v48;
      v50 = a1[30];
      if (v50)
      {
        v51 = *(_QWORD *)(v49 - 8);
        v52 = *((_QWORD *)a1 + 13);
        v53 = v50 - 1;
        v54 = ((v51 >> 4) ^ (v51 >> 9)) & (v50 - 1);
        v55 = *(_QWORD *)(v52 + 16 * v54);
        if (v51 == v55)
        {
LABEL_61:
          v58 = *(_DWORD *)(v52 + 16 * v54 + 8);
          goto LABEL_63;
        }
        v56 = 1;
        while (v55 != -4096)
        {
          v57 = v54 + v56++;
          v54 = v57 & v53;
          v55 = *(_QWORD *)(v52 + 16 * v54);
          if (v51 == v55)
            goto LABEL_61;
        }
      }
      v58 = 0;
LABEL_63:
      if (v58 < v42)
        return result;
      v71 = 0;
      v71 = *(_QWORD *)(v49 - 8);
      sub_1C4774094(v47, v71);
      sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 2), v71);
      v59 = a1[252];
      if (!v59)
      {
        v68 = 0;
LABEL_78:
        result = sub_1C504A120((uint64_t)(a1 + 248), (uint64_t)&v71, &v71, v68);
        *(_QWORD *)result = v71;
        result[2] = 0;
        goto LABEL_79;
      }
      v60 = *((_QWORD *)a1 + 124);
      v61 = v59 - 1;
      v62 = ((v71 >> 4) ^ (v71 >> 9)) & v61;
      result = (_DWORD *)(v60 + 16 * v62);
      v63 = *(_QWORD *)result;
      if (v71 != *(_QWORD *)result)
      {
        v64 = 0;
        v65 = 1;
        while (v63 != -4096)
        {
          if (v64)
            v66 = 0;
          else
            v66 = v63 == -8192;
          if (v66)
            v64 = result;
          v67 = v62 + v65++;
          v62 = v67 & v61;
          result = (_DWORD *)(v60 + 16 * v62);
          v63 = *(_QWORD *)result;
          if (v71 == *(_QWORD *)result)
            goto LABEL_79;
        }
        if (v64)
          v68 = v64;
        else
          v68 = result;
        goto LABEL_78;
      }
LABEL_79:
      result[2] = v46;
      v48 = a1[34] - 1;
      a1[34] = v48;
      if (!v48)
        return result;
    }
  }
  v45 = a1[34];
  if (v45 >= a1[35])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 32), (uint64_t)(a1 + 36), v45 + 1, 8);
    LODWORD(v45) = a1[34];
  }
  *(_QWORD *)(*((_QWORD *)a1 + 16) + 8 * v45) = a2;
  ++a1[34];
  return result;
}

unint64_t sub_1C5BE7C08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  int v7;

  v6 = sub_1C484358C(a1 + 72, 64, 3);
  v7 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  *(_QWORD *)(v6 + 8) = 0xFFFFFFFD0000000ALL;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_DWORD *)(v6 + 32) = v7;
  *(_DWORD *)(v6 + 36) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = a3;
  *(_QWORD *)v6 = &off_1E8196D50;
  *(_QWORD *)(v6 + 56) = a2;
  sub_1C5BE5618(a1, a2, v6);
  return v6;
}

unint64_t sub_1C5BE7C8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::PoisonValue **v6;
  unint64_t v7;
  llvm::PoisonValue **v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1C5BE5298(a1, *(_QWORD *)(a2 - 64));
  v7 = sub_1C484358C(a1 + 72, 72, 3);
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 48) = a3;
  *(_QWORD *)(v7 + 32) = 2;
  *(_QWORD *)v7 = &off_1E8196DD0;
  *(_QWORD *)(v7 + 8) = 0xFFFFFFFD0000000CLL;
  *(_QWORD *)(v7 + 56) = a2;
  *(_QWORD *)(v7 + 64) = v6;
  *(_QWORD *)(v7 + 24) = sub_1C6317048((uint64_t *)(a1 + 168), 1u, a1 + 72);
  *(_QWORD *)(v7 + 40) = **(_QWORD **)(a2 - 64);
  *(_DWORD *)(v7 + 12) = 0;
  v8 = sub_1C5BE5298(a1, *(_QWORD *)(a2 - 32));
  v9 = *(_QWORD *)(v7 + 24);
  v10 = *(unsigned int *)(v7 + 36);
  *(_DWORD *)(v7 + 36) = v10 + 1;
  *(_QWORD *)(v9 + 8 * v10) = v8;
  return v7;
}

_QWORD *sub_1C5BE7D5C(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;

  v5 = a2;
  if (*(unsigned __int8 *)(a2 + 16) >= 0x1Cu)
  {
    v4 = sub_1C61BE588((uint64_t)(result + 200), &v5);
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)(v4 + 1), a3);
  }
  return result;
}

BOOL sub_1C5BE7DB4(uint64_t a1, uint64_t a2, uint64_t a3, llvm::SmallPtrSetImplBase *a4, uint64_t a5)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  __int32 v26[6];
  uint64_t v27;
  char v28[8];

  if (*(unsigned __int8 *)(a2 + 16) < 0x1Cu)
    return 1;
  v10 = (uint64_t *)(a1 + 1528);
  v27 = a2;
  *(_QWORD *)v26 = 0;
  if (!sub_1C5AE988C((uint64_t *)(a1 + 1528), &v27, v26)
    || *(_QWORD *)v26 == *(_QWORD *)(a1 + 1528) + 16 * *(unsigned int *)(a1 + 1544))
  {
    v12 = *(_QWORD *)(a1 + 8);
    v13 = sub_1C5BE1F10(a1, a2);
    if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(v12, v13, a3))
    {
      v27 = a2;
      v11 = 1;
      v28[0] = 1;
      sub_1C5AE97FC((uint64_t)v10, &v27, v28, (uint64_t)v26);
      return v11;
    }
    v14 = *(unsigned __int8 *)(a2 + 16);
    if (v14 == 83)
    {
      if (sub_1C5BE1F10(a1, a2) == a3)
      {
LABEL_31:
        v27 = a2;
        v28[0] = 0;
        sub_1C5AE97FC((uint64_t)v10, &v27, v28, (uint64_t)v26);
        return 0;
      }
      v14 = *(unsigned __int8 *)(a2 + 16);
    }
    v15 = (v14 - 33);
    if (v15 > 0x37)
      goto LABEL_14;
    if (((1 << v15) & 0x8000000000041) != 0)
    {
      v24 = *(_QWORD *)(a2 + 64);
      if (v24 && ((*(_BYTE *)(v24 + 20) & 4) != 0 || (*(_BYTE *)(v24 + 17) & 0x10) != 0)
        || ((v26[0] = 7, !sub_1C53E4BBC(a2, v26, 1uLL))
         || (v25 = *(_QWORD *)(a2 - 32)) != 0
         && !*(_BYTE *)(v25 + 16)
         && *(_QWORD *)(v25 + 24) == *(_QWORD *)(a2 + 72)
         && *(_DWORD *)(v25 + 36) == 7)
        && ((llvm::CallBase::hasFnAttrOnCalledFunction(a2, 66) & 1) != 0
         || llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44)))
      {
LABEL_14:
        v16 = *(_DWORD *)(a2 + 20);
        if ((v16 & 0x40000000) != 0)
        {
          v18 = *(uint64_t **)(a2 - 8);
          v17 = v16 & 0x7FFFFFF;
          if (!v17)
            return 1;
        }
        else
        {
          v17 = v16 & 0x7FFFFFF;
          v18 = (uint64_t *)(a2 - 32 * v17);
          if (!v17)
            return 1;
        }
        v19 = 32 * v17;
        do
        {
          v20 = *v18;
          if (*(unsigned __int8 *)(*v18 + 16) >= 0x1Cu)
          {
            v27 = a2;
            *(_QWORD *)v26 = 0;
            if (!sub_1C5AE988C(v10, &v27, v26)
              || *(_QWORD *)v26 == *(_QWORD *)(a1 + 1528) + 16 * *(unsigned int *)(a1 + 1544))
            {
              sub_1C4774094(a4, v20);
              if (v21)
              {
                v22 = *(unsigned int *)(a5 + 8);
                if (v22 >= *(unsigned int *)(a5 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v22 + 1, 8);
                  v22 = *(unsigned int *)(a5 + 8);
                }
                *(_QWORD *)(*(_QWORD *)a5 + 8 * v22) = v20;
                ++*(_DWORD *)(a5 + 8);
              }
            }
            else if (!*(_BYTE *)(*(_QWORD *)v26 + 8))
            {
              goto LABEL_31;
            }
          }
          v18 += 4;
          v19 -= 32;
        }
        while (v19);
        return 1;
      }
    }
    else if (((1 << v15) & 0x808001C8000010) == 0 && (v15 != 28 || (*(_WORD *)(a2 + 18) & 0x301) == 0))
    {
      goto LABEL_14;
    }
    return 0;
  }
  return *(_BYTE *)(*(_QWORD *)v26 + 8) != 0;
}

_QWORD *sub_1C5BE80C0(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(56 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63230D4(a1, v4, &v4[7 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 56 * v10;
    do
    {
      *result = -8;
      result += 7;
      v11 -= 56;
    }
    while (v11);
  }
  return result;
}

uint64_t *sub_1C5BE8184(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  unsigned int v8;
  int i;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v13;
  uint64_t v14;

  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    v5 = a1;
    v6 = (_QWORD *)*a2;
    LODWORD(a1) = *(_DWORD *)(*a2 + 16);
    if (!(_DWORD)a1)
    {
      a1 = (*(uint64_t (**)(_QWORD))(*v6 + 32))(*a2);
      v6[2] = a1;
    }
    v7 = v3 - 1;
    v8 = v7 & a1;
    for (i = 1; ; ++i)
    {
      v10 = (uint64_t *)(v2 + 16 * v8);
      v11 = *v10;
      if (*v10 != -8 && v11 != 0x7FFFFFFF0)
      {
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2) & 1) != 0)
          return v10;
        v11 = *v10;
      }
      if (v11 == -8)
        break;
      v13 = v8 + i;
      v8 = v13 & v7;
    }
    v2 = *(_QWORD *)v5;
    v14 = *(unsigned int *)(v5 + 16);
  }
  else
  {
    v14 = 0;
  }
  return (uint64_t *)(v2 + 16 * v14);
}

_QWORD *sub_1C5BE8258(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  unint64_t *v18;
  unint64_t v19;

  v2 = result;
  v3 = *(_QWORD *)(a2 + 64);
  v4 = 72;
  if (v3 == *(_QWORD *)(a2 + 56))
    v4 = 76;
  v5 = *(unsigned int *)(a2 + v4);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    for (i = *(uint64_t **)(a2 + 64); (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v6 -= 8;
      if (!v6)
        return result;
    }
  }
  else
  {
    i = *(uint64_t **)(a2 + 64);
  }
  v8 = (_QWORD *)(v3 + 8 * v5);
  if (i != v8)
  {
    v9 = *i;
    if (!*i)
      goto LABEL_20;
LABEL_11:
    if (*(unsigned __int8 *)(v9 + 16) < 0x1Cu)
    {
LABEL_20:
      result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(v2 + 234), v9);
      v18 = (unint64_t *)(i + 1);
      while (v18 != v8)
      {
        v19 = *v18++;
        v9 = v19;
        if (v19 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          i = (uint64_t *)(v18 - 1);
          if (v9)
            goto LABEL_11;
          goto LABEL_20;
        }
      }
      return result;
    }
    v10 = *((_DWORD *)v2 + 556);
    if (v10)
    {
      v11 = v2[276];
      v12 = v10 - 1;
      v13 = (v10 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      v14 = *(_QWORD *)(v11 + 16 * v13);
      if (v9 == v14)
      {
LABEL_17:
        v17 = *(_DWORD *)(v11 + 16 * v13 + 8);
LABEL_19:
        *(_QWORD *)(v2[261] + 8 * (v17 >> 6)) |= 1 << v17;
        goto LABEL_20;
      }
      v15 = 1;
      while (v14 != -4096)
      {
        v16 = v13 + v15++;
        v13 = v16 & v12;
        v14 = *(_QWORD *)(v11 + 16 * v13);
        if (v9 == v14)
          goto LABEL_17;
      }
    }
    v17 = 0;
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_1C5BE8398(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  char v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;

  v41 = a3;
  v32 = a2;
  v33 = (_QWORD *)a3;
  result = sub_1C5B55444((uint64_t)(a1 + 246), &v32, (uint64_t)v37);
  if (!(_BYTE)v38)
    return result;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 249), a3);
  if (v6)
  {
    v37[0] = a3;
    v32 = 0;
    result = sub_1C61252B8(a1 + 270, v37, &v32);
    v23 = 0;
    if ((_DWORD)result)
      v23 = *(_QWORD *)(v32 + 8);
    v24 = HIDWORD(v23);
    if ((_DWORD)v23 != HIDWORD(v23))
    {
      v25 = v23 >> 6;
      if (v23 >> 6 == HIDWORD(v23) >> 6)
      {
        v26 = (1 << SBYTE4(v23)) + (-1 << v23);
        v27 = (_QWORD *)(a1[261] + 8 * v25);
      }
      else
      {
        v28 = a1[261];
        *(_QWORD *)(v28 + 8 * v25) |= -1 << v23;
        v29 = (v23 + 63) & 0xFFFFFFC0;
        if (v29 + 64 <= HIDWORD(v23))
        {
          do
          {
            *(_QWORD *)(v28 + 8 * (v29 >> 6)) = -1;
            v30 = v29 + 64;
            v31 = v29 + 128;
            v29 += 64;
          }
          while (v31 <= v24);
        }
        else
        {
          v30 = (v23 + 63) & 0xFFFFFFC0;
        }
        if (v30 >= v24)
          return result;
        v26 = ~(-1 << v24);
        v27 = (_QWORD *)(v28 + 8 * (v30 >> 6));
      }
      *v27 |= v26;
    }
  }
  else
  {
    v7 = a1[4];
    v8 = *(_DWORD *)(v7 + 40);
    if (v8)
    {
      v9 = *(_QWORD *)(v7 + 24);
      v10 = v8 - 1;
      v11 = (v8 - 1) & ((a3 >> 4) ^ (a3 >> 9));
      v12 = *(_QWORD *)(v9 + 16 * v11);
      if (v12 == a3)
      {
LABEL_9:
        v15 = *(_QWORD *)(v9 + 16 * v11 + 8);
        if (v15)
        {
          v16 = sub_1C5BE2798((uint64_t)a1, v15);
          *(_QWORD *)(a1[261] + 8 * (v16 >> 6)) |= 1 << v16;
        }
      }
      else
      {
        v13 = 1;
        while (v12 != -4096)
        {
          v14 = v11 + v13++;
          v11 = v14 & v10;
          v12 = *(_QWORD *)(v9 + 16 * v11);
          if (v12 == a3)
            goto LABEL_9;
        }
      }
    }
    v17 = sub_1C6322644((uint64_t)(a1 + 212), &v41);
    v18 = v17[2];
    v37[1] = v17 + 1;
    v38 = v18;
    v40 = 0;
    v39 = 0xFFFFFFFF00000000;
    LOBYTE(v37[0]) = 0;
    sub_1C511F4E8((uint64_t)v37);
    v19 = v17[2];
    v33 = v17 + 1;
    v34 = v19;
    v36 = 0;
    v35 = 0xFFFFFFFF00000000;
    LOBYTE(v32) = 1;
    result = sub_1C511F4E8((uint64_t)&v32);
    v20 = LOBYTE(v37[0]);
    v21 = v32;
    if (!LOBYTE(v37[0]) || !(_BYTE)v32)
    {
      while (1)
      {
        v22 = v39;
        if (v20 == v21 && (_DWORD)v35 == (_DWORD)v39)
          break;
        *(_QWORD *)(a1[261] + (((unint64_t)v39 >> 3) & 0x1FFFFFF8)) |= 1 << v39;
        LODWORD(v39) = v22 + 1;
        v40 >>= 1;
        result = sub_1C511F56C((uint64_t)v37);
        v20 = LOBYTE(v37[0]);
        v21 = v32;
        if (LOBYTE(v37[0]))
        {
          if ((_BYTE)v32)
            break;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C5BE8638(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v7;
  unsigned int v9;

  v9 = a4;
  v7 = *(unsigned int *)(a1 + 8);
  if (v7 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v7 + 1, 8);
    *(_QWORD *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 8)) = a2;
    LODWORD(v7) = *(_DWORD *)(a1 + 8);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7) = a2;
  }
  *(_DWORD *)(a1 + 8) = v7 + 1;
  return sub_1C61DFF7C(a1 + 80, a3, &v9);
}

uint64_t sub_1C5BE86C4(uint64_t a1, uint64_t a2)
{
  if (sub_1C5BE8700(a1, a2))
    return 0xFFFFFFFFLL;
  else
    return sub_1C5BE8700(a2, a1);
}

BOOL sub_1C5BE8700(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_DWORD *)a1 < *(_DWORD *)a2)
    return 1;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
    return 0;
  v2 = *(_DWORD *)(a1 + 4);
  v3 = *(_DWORD *)(a2 + 4);
  if (v2 < v3)
    return 1;
  if (v3 < v2)
    return 0;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a2 + 8);
  if (v4 < v5)
    return 1;
  if (v5 < v4)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a2 + 16);
  if (v6 < v7)
    return 1;
  if (v7 < v6)
    return 0;
  return *(_QWORD *)(a1 + 24) < *(_QWORD *)(a2 + 24);
}

void sub_1C5BE8784(unsigned int *a1)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a1[2];
  sub_1C6323608(a1);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if ((_DWORD)v4 == a1[4])
  {
    *((_QWORD *)a1 + 1) = 0;
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD **)a1;
      v6 = 56 * v4;
      do
      {
        *v5 = -4096;
        v5 += 7;
        v6 -= 56;
      }
      while (v6);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if ((_DWORD)v4)
    {
      v7 = (4 * (int)v4 / 3u + 1) | ((unint64_t)(4 * (int)v4 / 3u + 1) >> 1);
      v8 = v7 | (v7 >> 2) | ((v7 | (v7 >> 2)) >> 4);
      LODWORD(v8) = (((v8 | (v8 >> 8)) >> 16) | v8 | (v8 >> 8)) + 1;
      a1[4] = v8;
      v9 = operator new(56 * v8, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v9;
      *((_QWORD *)a1 + 1) = 0;
      v10 = a1[4];
      if ((_DWORD)v10)
      {
        v11 = 56 * v10;
        do
        {
          *v9 = -4096;
          v9 += 7;
          v11 -= 56;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *((_QWORD *)a1 + 1) = 0;
      a1[4] = 0;
    }
  }
}

void sub_1C5BE8890(unsigned int *a1)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a1[2];
  sub_1C632366C(a1);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if ((_DWORD)v4 == a1[4])
  {
    *((_QWORD *)a1 + 1) = 0;
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD **)a1;
      v6 = 56 * v4;
      do
      {
        *v5 = -8;
        v5 += 7;
        v6 -= 56;
      }
      while (v6);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if ((_DWORD)v4)
    {
      v7 = (4 * (int)v4 / 3u + 1) | ((unint64_t)(4 * (int)v4 / 3u + 1) >> 1);
      v8 = v7 | (v7 >> 2) | ((v7 | (v7 >> 2)) >> 4);
      LODWORD(v8) = (((v8 | (v8 >> 8)) >> 16) | v8 | (v8 >> 8)) + 1;
      a1[4] = v8;
      v9 = operator new(56 * v8, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v9;
      *((_QWORD *)a1 + 1) = 0;
      v10 = a1[4];
      if ((_DWORD)v10)
      {
        v11 = 56 * v10;
        do
        {
          *v9 = -8;
          v9 += 7;
          v11 -= 56;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *((_QWORD *)a1 + 1) = 0;
      a1[4] = 0;
    }
  }
}

_QWORD *sub_1C5BE899C(_DWORD *a1)
{
  int v2;
  _QWORD *result;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a1[2];
  result = sub_1C632374C(a1);
  v4 = 1 << (33 - __clz(v2 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v2)
    v5 = v4;
  else
    v5 = 0;
  if ((_DWORD)v5 == a1[4])
  {
    *((_QWORD *)a1 + 1) = 0;
    if ((_DWORD)v5)
    {
      v6 = *(_QWORD **)a1;
      v7 = 40 * v5;
      do
      {
        *v6 = -4096;
        v6 += 5;
        v7 -= 40;
      }
      while (v7);
    }
  }
  else
  {
    result = (_QWORD *)MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if ((_DWORD)v5)
    {
      v8 = (4 * (int)v5 / 3u + 1) | ((unint64_t)(4 * (int)v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      a1[4] = v9;
      result = operator new(40 * v9, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = result;
      *((_QWORD *)a1 + 1) = 0;
      v10 = a1[4];
      if ((_DWORD)v10)
      {
        v11 = 40 * v10;
        do
        {
          *result = -4096;
          result += 5;
          v11 -= 40;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *((_QWORD *)a1 + 1) = 0;
      a1[4] = 0;
    }
  }
  return result;
}

unint64_t sub_1C5BE8AA8(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v7;
  unint64_t v8;
  _OWORD v11[4];
  _OWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = a2;
  v3 = a1;
  v15 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  v4 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v5 = &unk_1ED7EA000;
  if ((v4 & 1) == 0)
  {
    v7 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v5 = &unk_1ED7EA000;
    v3 = a1;
    v2 = a2;
    if (v7)
    {
      v8 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v8 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v8;
      __cxa_guard_release(&qword_1ED7EAC88);
      v5 = (_QWORD *)&unk_1ED7EA000;
      v3 = a1;
      v2 = a2;
    }
  }
  v14 = v5[400];
  return sub_1C4E37B28((char *)v11, 0, v11, (char *)v12, v3, v2);
}

uint64_t sub_1C5BE8B9C()
{
  int v1;
  char v2;
  char *v3;

  dword_1ED8220A4 = sub_1C4D9A2C4("newgvn-vn", 9uLL, "Controls which instructions are value numbered", 0x2EuLL);
  dword_1ED8220A8 = sub_1C4D9A2C4("newgvn-phi", 0xAuLL, "Controls which instructions we create phi of ops for", 0x34uLL);
  v2 = 0;
  v3 = &v2;
  v1 = 1;
  sub_1C61BCD3C((uint64_t)&qword_1ED8220B0[1], "enable-store-refinement", &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED8220B0[1], &dword_1C475E000);
  v2 = 1;
  v3 = &v2;
  v1 = 1;
  sub_1C61BCD3C((uint64_t)&unk_1ED822178, "enable-phi-of-ops", &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED822178, &dword_1C475E000);
}

_QWORD *llvm::PartiallyInlineLibCallsPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t CachedResultImpl;
  uint64_t v9;
  char v10;

  v6 = (uint64_t *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetLibraryAnalysis::Key, a1) + 8);
  v7 = (_QWORD *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetIRAnalysis::Key, a1) + 8);
  CachedResultImpl = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(a2, (uint64_t)&llvm::DominatorTreeAnalysis::Key, a1);
  if (CachedResultImpl)
    v9 = CachedResultImpl + 8;
  else
    v9 = 0;
  v10 = sub_1C5BE8D88(a1, v6, v7, v9);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if ((v10 & 1) != 0)
    return sub_1C4DDB144(a3, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
  else
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C5BE8D88(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *i;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t ***v17;
  _BYTE *v18;
  uint64_t v19;
  int hasFnAttrOnCalledFunction;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ****v27;
  uint64_t ***v28;
  int v29;
  int v30;
  uint64_t ***v31;
  char *v32;
  size_t v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  int v47;
  BOOL v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  const llvm::APInt *v52;
  uint64_t v53;
  llvm::Value *v54;
  uint64_t v55;
  void **v56;
  BOOL v57;
  uint64_t *v58;
  char *v59;
  _QWORD *v60;
  unsigned __int8 *v61;
  llvm::Instruction *v62;
  uint64_t ***Successor;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  int v71;
  int v72;
  _QWORD *v73;
  uint64_t v74;
  unsigned __int8 *v75;
  uint64_t v76;
  uint64_t ***v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 **v80;
  unsigned __int8 **v81;
  void **v82;
  void **v83;
  unsigned __int8 **v84;
  int v85;
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  llvm::Type *v90;
  uint64_t v91;
  uint64_t *v92;
  llvm::APFloatBase *v93;
  uint64_t *v94;
  uint64_t FCmpHelper;
  uint64_t *v96;
  uint64_t v97;
  uint64_t **v98;
  uint64_t v99;
  uint64_t v100;
  llvm::ConstantInt *v101;
  unsigned int v102;
  char v103;
  uint64_t v105;
  llvm::PHINode *v106;
  llvm::ConstantFP **v107;
  _QWORD *v108;
  uint64_t *v109;
  unsigned int v110;
  uint64_t v111;
  unsigned __int8 *v112;
  uint64_t v113;
  const char *v114;
  __int16 v115;
  unsigned __int8 *v116;
  void *v117[2];
  _QWORD v118[38];
  void *v119;
  uint64_t v120;
  unsigned __int8 v121;
  void **v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v111 = a4;
  LOBYTE(v117[0]) = 0;
  v121 = 0;
  if (a4)
  {
    LOBYTE(v122) = 1;
    sub_1C61DDBE0((uint64_t)v117, &v111, (char *)&v122);
  }
  v7 = a1 + 72;
  v8 = *(_QWORD *)(a1 + 80);
  if (v8 != a1 + 72)
  {
    v108 = a3;
    v109 = a2;
    v9 = 0;
    while (1)
    {
      v10 = v8 - 24;
      v48 = v8 == 0;
      v8 = *(_QWORD *)(v8 + 8);
      v11 = v48 ? 0 : v10;
      v12 = (_QWORD *)(v11 + 40);
      for (i = *(_QWORD **)(v11 + 48); ; i = (_QWORD *)i[1])
      {
        if (i == v12)
          goto LABEL_137;
        v14 = i - 3;
        if (!i)
          v14 = 0;
        v15 = *((unsigned __int8 *)v14 + 16);
        v16 = v15 == 84 ? (uint64_t)v14 : 0;
        if (i)
        {
          if (v15 == 84)
          {
            v17 = *(uint64_t ****)(v16 - 32);
            if (v17)
            {
              if (!*((_BYTE *)v17 + 16) && v17[3] == *(uint64_t ***)(v16 + 72))
                break;
            }
          }
        }
LABEL_20:
        ;
      }
      v19 = v16 + 64;
      v18 = *(_BYTE **)(v16 + 64);
      if (!v18 || (v18[14] & 0x10) == 0)
      {
        hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction(v16, 20);
        v18 = *(_BYTE **)(v16 + 64);
        if (!hasFnAttrOnCalledFunction)
          goto LABEL_28;
        if (!v18)
          break;
      }
      if ((v18[12] & 0x10) == 0)
        break;
LABEL_29:
      if ((v18[19] & 0x20) != 0)
        goto LABEL_20;
LABEL_30:
      v21 = llvm::CallBase::hasFnAttrOnCalledFunction(v16, 61);
      if ((v21 & 1) != 0)
        goto LABEL_20;
      if ((*(_WORD *)(v16 + 18) & 3) == 2)
        goto LABEL_20;
      v110 = 0;
      v22 = *((_DWORD *)v17 + 8);
      if ((v22 & 0xFu) - 7 < 2 || (v22 & 0x2000) != 0)
        goto LABEL_20;
      if ((*((_BYTE *)v17 + 23) & 0x10) == 0)
      {
        v33 = 0;
        v32 = &byte_1C871356D;
        goto LABEL_43;
      }
      v23 = ***v17;
      v24 = *(_QWORD *)(v23 + 152);
      v25 = *(unsigned int *)(v23 + 168);
      if (!(_DWORD)v25)
        goto LABEL_41;
      LODWORD(v26) = (v25 - 1) & ((v17 >> 4) ^ (v17 >> 9));
      v27 = (uint64_t ****)(v24 + 16 * v26);
      v28 = *v27;
      if (*v27 != v17)
      {
        v29 = 1;
        while (v28 != (uint64_t ***)-4096)
        {
          v30 = v26 + v29++;
          v26 = v30 & (v25 - 1);
          v28 = *(uint64_t ****)(v24 + 16 * v26);
          if (v28 == v17)
          {
            v27 = (uint64_t ****)(v24 + 16 * v26);
            goto LABEL_42;
          }
        }
LABEL_41:
        v27 = (uint64_t ****)(v24 + 16 * v25);
      }
LABEL_42:
      v31 = v27[1];
      v34 = (size_t)*v31;
      v32 = (char *)(v31 + 2);
      v33 = v34;
LABEL_43:
      v35 = *v109;
      if (!llvm::TargetLibraryInfoImpl::getLibFunc(v21, v32, v33, &v110))
        goto LABEL_20;
      v36 = (uint64_t)v17[3];
      v37 = v110;
      if (!llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc(v35, v36, v110))
        goto LABEL_20;
      if (((*(_QWORD *)(v109[1] + 8 * (v37 >> 6)) >> v37) & 1) != 0)
        goto LABEL_20;
      if ((v37 - 393) > 1)
        goto LABEL_20;
      if (((3 << (2 * (v37 & 3))) & *(unsigned __int8 *)(*v109 + (v37 >> 2))) == 0)
        goto LABEL_20;
      if (!(*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)*v108 + 616))(*v108, *(_QWORD *)v16))
        goto LABEL_20;
      v38 = v121;
      if (*(_QWORD *)v19)
      {
        if ((*(_BYTE *)(*(_QWORD *)v19 + 17) & 0x30) != 0)
          goto LABEL_20;
      }
      v39 = *(_DWORD *)(v16 + 20);
      if ((v39 & 0x80000000) == 0
        || (v40 = v16 - 32 * (v39 & 0x7FFFFFF), v43 = *(_QWORD *)(v40 - 8), v41 = v40 - 8, (v42 = v43) == 0))
      {
LABEL_52:
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v16, 45) & 1) == 0
          && (llvm::CallBase::hasFnAttrOnCalledFunction(v16, 44) & 1) == 0)
        {
          goto LABEL_64;
        }
        goto LABEL_20;
      }
      v44 = -v42;
      while (1)
      {
        v45 = *(_DWORD *)(*(_QWORD *)(v41 + v44) + 8);
        v46 = v45 > 7;
        v47 = (1 << v45) & 0x83;
        v48 = v46 || v47 == 0;
        if (v48)
          break;
        v44 += 16;
        if (!v44)
          goto LABEL_52;
      }
LABEL_64:
      v107 = *(llvm::ConstantFP ***)v16;
      v49 = *(_QWORD *)(v16 + 32);
      if (v49)
        v50 = v49 == *(_QWORD *)(v16 + 40) + 40;
      else
        v50 = 1;
      if (v50)
        v51 = 0;
      else
        v51 = v49 - 24;
      sub_1C4773D54((uint64_t)&v122, v51, 0, 0, 0);
      v53 = *v127;
      v54 = *(llvm::Value **)(*v127 + 1560);
      if (!v54)
      {
        v101 = *(llvm::ConstantInt **)(v53 + 1888);
        v102 = *(_DWORD *)(v53 + 1896);
        LODWORD(v113) = v102 >> 8;
        if (v102 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v112, 1, 0);
        }
        else
        {
          if (v102 <= 0xFF)
            v103 = 0;
          else
            v103 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v102);
          v112 = (unsigned __int8 *)(v103 & 1);
        }
        v54 = llvm::ConstantInt::get(v101, (llvm::LLVMContext *)&v112, v52);
        if (v113 >= 0x41 && v112)
          MEMORY[0x1CAA32F9C](v112, 0x1000C8000313F17);
        *(_QWORD *)(v53 + 1560) = v54;
      }
      v55 = *(_QWORD *)(v16 + 32);
      if (v38)
        v56 = v117;
      else
        v56 = 0;
      if (v55)
        v57 = v55 == *(_QWORD *)(v16 + 40) + 40;
      else
        v57 = 1;
      if (v57)
        v58 = 0;
      else
        v58 = (uint64_t *)(v55 - 24);
      v59 = sub_1C5EBFBC0(v54, v58, 0, 0, (uint64_t)v56, 0, 0, 0);
      v60 = (_QWORD *)*v12;
      if ((_QWORD *)*v12 == v12)
      {
        v62 = 0;
      }
      else
      {
        if (v60)
          v61 = (unsigned __int8 *)(v60 - 3);
        else
          v61 = 0;
        if (v61[16] - 29 >= 0xB)
          v62 = 0;
        else
          v62 = (llvm::Instruction *)v61;
      }
      llvm::BranchInst::swapSuccessors(v62);
      Successor = (uint64_t ***)llvm::Instruction::getSuccessor((llvm::Instruction *)v59, 0);
      v64 = (uint64_t)Successor;
      if ((*(_BYTE *)(v11 + 23) & 0x10) != 0)
      {
        v65 = ***(_QWORD ***)v11;
        v66 = *(_QWORD *)(v65 + 152);
        v67 = *(unsigned int *)(v65 + 168);
        if (!(_DWORD)v67)
          goto LABEL_95;
        LODWORD(v68) = (v67 - 1) & ((v11 >> 4) ^ (v11 >> 9));
        v69 = (uint64_t *)(v66 + 16 * v68);
        v70 = *v69;
        if (*v69 != v11)
        {
          v71 = 1;
          while (v70 != -4096)
          {
            v72 = v68 + v71++;
            v68 = v72 & (v67 - 1);
            v70 = *(_QWORD *)(v66 + 16 * v68);
            if (v70 == v11)
            {
              v69 = (uint64_t *)(v66 + 16 * v68);
              goto LABEL_96;
            }
          }
LABEL_95:
          v69 = (uint64_t *)(v66 + 16 * v67);
        }
LABEL_96:
        v73 = (_QWORD *)v69[1];
        v76 = *v73;
        v75 = (unsigned __int8 *)(v73 + 2);
        v74 = v76;
      }
      else
      {
        v74 = 0;
        v75 = (unsigned __int8 *)&byte_1C871356D;
      }
      v115 = 773;
      v112 = v75;
      v113 = v74;
      v114 = ".split";
      llvm::Value::setName(Successor, (uint64_t)&v112);
      sub_1C4D8AE2C((uint64_t)&v122, v64, *(_QWORD *)(v64 + 48));
      v115 = 257;
      v106 = (llvm::PHINode *)sub_1C4867E94((uint64_t)&v122, (uint64_t)v107, 2, (uint64_t)&v112);
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v16, v106, (llvm::Value *)1);
      v77 = (uint64_t ***)*((_QWORD *)v59 + 5);
      v112 = "call.sqrt";
      v115 = 259;
      v105 = (uint64_t)v77;
      llvm::Value::setName(v77, (uint64_t)&v112);
      v125 = *((_QWORD *)v59 + 5);
      v126 = v59 + 24;
      v78 = (unsigned __int8 *)*((_QWORD *)v59 + 6);
      v112 = v78;
      if (v78)
      {
        llvm::MetadataTracking::track((uint64_t)&v112, v78, 2);
        v79 = v112;
      }
      else
      {
        v79 = 0;
      }
      sub_1C4774EF4((uint64_t)&v122, 0, (uint64_t)v79);
      if (v112)
        llvm::MetadataTracking::untrack((uint64_t)&v112, v112);
      llvm::Instruction::clone((llvm::Instruction *)v16);
      v81 = v80;
      v115 = 257;
      (*(void (**)(uint64_t, unsigned __int8 **, unsigned __int8 **, uint64_t, char *))(*(_QWORD *)v128 + 16))(v128, v80, &v112, v125, v126);
      if (v123)
      {
        v82 = v122;
        v83 = &v122[2 * v123];
        v84 = v81 + 6;
        do
        {
          v85 = *(_DWORD *)v82;
          v86 = (unsigned __int8 *)v82[1];
          if (v86)
          {
            if (!v85)
            {
              v116 = (unsigned __int8 *)v82[1];
              llvm::MetadataTracking::track((uint64_t)&v116, v86, 2);
LABEL_113:
              if (&v116 == v84)
              {
                if (v116)
                  llvm::MetadataTracking::untrack((uint64_t)&v116, v116);
              }
              else
              {
                if (*v84)
                  llvm::MetadataTracking::untrack((uint64_t)(v81 + 6), *v84);
                v87 = v116;
                *v84 = v116;
                if (v87)
                  llvm::MetadataTracking::retrack((uint64_t)&v116, v87, (uint64_t)(v81 + 6));
              }
              goto LABEL_110;
            }
          }
          else
          {
            if (!*v84 && (*((_BYTE *)v81 + 23) & 0x20) == 0)
              goto LABEL_110;
            if (!v85)
            {
              v116 = 0;
              goto LABEL_113;
            }
          }
          llvm::Value::setMetadata((llvm::Value *)v81, v85, (llvm::MDNode *)v86);
LABEL_110:
          v82 += 2;
        }
        while (v82 != v83);
      }
      *(_QWORD *)(v16 + 64) = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(v16 + 64), **(uint64_t ***)v16, -1, 66);
      *(_QWORD *)(v16 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v16 + 64), **(uint64_t ***)v16, -1, 44);
      v125 = *((_QWORD *)v62 + 5);
      v126 = (char *)v62 + 24;
      v88 = (unsigned __int8 *)*((_QWORD *)v62 + 6);
      v112 = v88;
      if (v88)
      {
        llvm::MetadataTracking::track((uint64_t)&v112, v88, 2);
        v89 = v112;
      }
      else
      {
        v89 = 0;
      }
      sub_1C4774EF4((uint64_t)&v122, 0, (uint64_t)v89);
      if (v112)
        llvm::MetadataTracking::untrack((uint64_t)&v112, v112);
      if ((*(unsigned int (**)(_QWORD, llvm::ConstantFP **))(*(_QWORD *)*v108 + 624))(*v108, v107))
      {
        v115 = 257;
        v91 = 7;
        v92 = (uint64_t *)v16;
        v93 = (llvm::APFloatBase *)v16;
      }
      else
      {
        v94 = *(uint64_t **)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF));
        v93 = llvm::ConstantFP::get(v107, v90, 0.0);
        v115 = 257;
        v91 = 3;
        v92 = v94;
      }
      FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)&v122, v91, v92, (uint64_t)v93, (uint64_t)&v112, 0, 0);
      v96 = (uint64_t *)((char *)v62 - 96);
      if (*((_QWORD *)v62 - 12))
      {
        **((_QWORD **)v62 - 10) = *((_QWORD *)v62 - 11);
        v97 = *((_QWORD *)v62 - 11);
        if (v97)
          *(_QWORD *)(v97 + 16) = *((_QWORD *)v62 - 10);
      }
      *v96 = FCmpHelper;
      if (FCmpHelper)
      {
        v100 = *(_QWORD *)(FCmpHelper + 8);
        v98 = (uint64_t **)(FCmpHelper + 8);
        v99 = v100;
        *((_QWORD *)v62 - 11) = v100;
        if (v100)
          *(_QWORD *)(v99 + 16) = (char *)v62 - 88;
        *((_QWORD *)v62 - 10) = v98;
        *v98 = v96;
      }
      sub_1C477667C(v106, v16, v11);
      sub_1C477667C(v106, (uint64_t)v81, v105);
      if (v122 != (void **)&v124)
        free(v122);
      v8 = v64 + 24;
      v9 = 1;
LABEL_137:
      if (v8 == v7)
        goto LABEL_153;
    }
    if (!llvm::CallBase::hasFnAttrOnCalledFunction(v16, 4))
      goto LABEL_20;
    v18 = *(_BYTE **)v19;
LABEL_28:
    if (!v18)
      goto LABEL_30;
    goto LABEL_29;
  }
  v9 = 0;
LABEL_153:
  if (v121)
  {
    llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)v117);
    v122 = (void **)&v120;
    sub_1C50B10F0(&v122);
    if (v119 != (void *)v118[37])
      free(v119);
    if (v117[0] != v118)
      free(v117[0]);
  }
  return v9 & 1;
}

uint64_t sub_1C5BE96C4(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetLibraryInfoWrapperPassPass(a1);
  llvm::initializeDominatorTreeWrapperPassPass(a1);
  llvm::initializeTargetTransformInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Partially inline calls to library functions";
  *(_QWORD *)(v2 + 8) = 43;
  *(_QWORD *)(v2 + 16) = "partially-inline-libcalls";
  *(_QWORD *)(v2 + 24) = 25;
  *(_QWORD *)(v2 + 32) = &unk_1ED822240;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5BE9830;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5BE9768(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED822240;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8197038;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED822248);
  if (v3 != -1)
  {
    v7[0] = sub_1C5BE96C4;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED822248, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5BE9830()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5BE9768(v0);
}

void sub_1C5BE985C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5BE9880(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1C5BE98D0(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  char **v5;
  char *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  void **v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AnalysisPass;
  uint64_t v21;
  void *v22;
  void **v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26[2];
  int v27;
  uint64_t v28[2];
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  void *__src;
  unsigned int v35;
  _QWORD v36[2];
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
    return 0;
  v5 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != llvm::TargetLibraryInfoWrapperPass::ID);
  v7 = (_QWORD *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v8 = v28;
  v26[0] = 0;
  v26[1] = 0;
  v27 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  llvm::TargetLibraryAnalysis::run((uint64_t)(v7 + 4), (uint64_t)a2, (uint64_t)&v33);
  v7[30] = v33;
  v9 = v7 + 30;
  if (*((_BYTE *)v7 + 320))
  {
    if (v9 == &v33)
    {
LABEL_18:
      *((_DWORD *)v7 + 78) = v41;
      goto LABEL_19;
    }
    v10 = (void **)(v7 + 31);
    v11 = v35;
    v12 = *((unsigned int *)v7 + 64);
    if (v12 >= v35)
    {
      if (v35)
        memmove(*v10, __src, 8 * v35);
      goto LABEL_17;
    }
    if (*((_DWORD *)v7 + 65) < v35)
    {
      *((_DWORD *)v7 + 64) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v7 + 31), (uint64_t)(v7 + 33), v11, 8);
    }
    else if ((_DWORD)v12)
    {
      memmove(*v10, __src, 8 * v12);
      goto LABEL_15;
    }
    v12 = 0;
LABEL_15:
    if (v12 != v35)
      memcpy((char *)*v10 + 8 * v12, (char *)__src + 8 * v12, 8 * v35 - 8 * v12);
LABEL_17:
    *((_DWORD *)v7 + 64) = v11;
    goto LABEL_18;
  }
  v22 = v7 + 33;
  v7[31] = v7 + 33;
  v23 = (void **)(v7 + 31);
  v7[32] = 0x600000000;
  v24 = v35;
  if (v35 && v23 != &__src)
  {
    if (v35 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v7 + 31), (uint64_t)(v7 + 33), v35, 8);
      v25 = v35;
      if (!v35)
      {
LABEL_42:
        *((_DWORD *)v7 + 64) = v24;
        goto LABEL_43;
      }
      v22 = *v23;
    }
    else
    {
      v25 = v35;
    }
    memcpy(v22, __src, 8 * v25);
    goto LABEL_42;
  }
LABEL_43:
  *((_DWORD *)v7 + 78) = v41;
  *((_BYTE *)v7 + 320) = 1;
LABEL_19:
  if (__src != v36)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v28);
  sub_1C4D8B52C(v26);
  v13 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != llvm::TargetTransformInfoWrapperPass::ID);
  v15 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v33 = 0;
  __src = 0;
  v35 = 0;
  v36[0] = 0;
  v36[1] = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v16 = *(_QWORD *)(v15 + 56);
  if (!v16)
  {
    sub_1C485C2F0();
LABEL_45:
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    goto LABEL_27;
  }
  v7 = v36;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, const llvm::Function *))(*(_QWORD *)v16 + 48))(v26, v16, a2);
  v8 = (uint64_t *)(v15 + 64);
  v17 = v26[0];
  if (*(_BYTE *)(v15 + 72))
  {
    v26[0] = 0;
    v18 = *v8;
    *v8 = v17;
    if (!v18)
      goto LABEL_27;
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = v26[0];
    v26[0] = 0;
    if (!v19)
      goto LABEL_27;
    goto LABEL_45;
  }
  *(_QWORD *)(v15 + 64) = v26[0];
  *(_BYTE *)(v15 + 72) = 1;
LABEL_27:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v7);
  sub_1C4D8B52C(&v33);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)a1 + 1) + 24), llvm::DominatorTreeWrapperPass::ID, 1);
  if (AnalysisPass)
    AnalysisPass = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, llvm::DominatorTreeWrapperPass::ID);
  if (AnalysisPass)
    v21 = AnalysisPass + 32;
  else
    v21 = 0;
  return sub_1C5BE8D88((uint64_t)a2, v9, v8, v21);
}

uint64_t sub_1C5BE9C6C()
{
  uint64_t result;

  result = sub_1C4D9A2C4("partially-inline-libcalls-transform", 0x23uLL, "Controls transformations in partially-inline-libcalls", 0x35uLL);
  dword_1ED822238 = result;
  return result;
}

uint64_t llvm::createPlaceSafepointsPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5BE9CC8(v1);
}

uint64_t sub_1C5BE9CC8(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED822250;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81970D8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED822260);
  if (v3 != -1)
  {
    v7[0] = sub_1C5BE9E34;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED822260, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5BE9D90(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeScalarEvolutionWrapperPassPass(a1, a2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Place Backedge Safepoints";
  *(_QWORD *)(v3 + 8) = 25;
  *(_QWORD *)(v3 + 16) = "place-backedge-safepoints-impl";
  *(_QWORD *)(v3 + 24) = 30;
  *(_QWORD *)(v3 + 32) = &unk_1ED822251;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5BEFBC0;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5BE9E34(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Place Safepoints";
  *(_QWORD *)(v2 + 8) = 16;
  *(_QWORD *)(v2 + 16) = "place-safepoints";
  *(_QWORD *)(v2 + 24) = 16;
  *(_QWORD *)(v2 + 32) = &unk_1ED822250;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5BEFBEC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void sub_1C5BE9EC4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5BE9EE8(uint64_t a1, uint64_t a2)
{
  return sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
}

uint64_t sub_1C5BE9EF8(uint64_t a1, llvm::Function *a2)
{
  BOOL v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Function *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  _QWORD *GC;
  char v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  int v30;
  int *v31;
  int v32;
  char **v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  llvm::MemorySSAUpdater *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  llvm::BasicBlock *UniqueSuccessor;
  uint64_t v48;
  unsigned int v49;
  BOOL v50;
  int v51;
  unsigned int v53;
  char *v54;
  llvm::Instruction **v55;
  llvm::Instruction *v56;
  uint64_t v57;
  uint64_t v58;
  llvm::Value *v59;
  llvm::Type ***v60;
  char *v61;
  uint64_t ***v62;
  char **v63;
  uint64_t *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t *v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  size_t v112;
  char *v113;
  char v114;
  uint64_t v115;
  char *v116;
  uint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  const llvm::Twine *v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  unsigned int v135;
  llvm::BasicBlock **v136;
  llvm::BasicBlock **v137;
  llvm::BasicBlock *v138;
  llvm *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  llvm::Instruction **v148;
  char *__dst;
  char *__p;
  uint64_t *__pa;
  char *v152;
  char *v153;
  uint64_t v154;
  __int16 v155;
  uint64_t v156[2];
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD v161[2];
  int v162;
  char *v163;
  int32x2_t *v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  _BYTE v169[128];
  void *v170[2];
  uint64_t v171;
  uint64_t v172[2];
  int v173;
  uint64_t v174;
  llvm::Function *v175;
  char v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  llvm::BasicBlock **v181;
  llvm::BasicBlock **v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  _BYTE v186[32];
  char *v187[2];
  uint64_t v188;
  void *v189;
  uint64_t v190;
  _BYTE v191[72];
  uint64_t v192;

  v192 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)a2 + 16))
  {
    if (*((_BYTE *)a2 + 16) == 3)
    {
      v4 = (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0;
      goto LABEL_7;
    }
LABEL_5:
    v5 = 0;
    goto LABEL_10;
  }
  if (*((llvm::Function **)a2 + 9) != (llvm::Function *)((char *)a2 + 72))
    goto LABEL_5;
  v4 = (*((_BYTE *)a2 + 34) & 0x80) == 0;
LABEL_7:
  v5 = v4;
LABEL_10:
  v6 = 0;
  if ((v5 & 1) != 0 || *((llvm::Function **)a2 + 9) == (llvm::Function *)((char *)a2 + 72))
    return v6;
  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    v7 = ***(_QWORD ***)a2;
    v8 = *(_QWORD *)(v7 + 152);
    v9 = *(unsigned int *)(v7 + 168);
    if ((_DWORD)v9)
    {
      LODWORD(v10) = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v11 = v8 + 16 * v10;
      v12 = *(llvm::Function **)v11;
      if (*(llvm::Function **)v11 == a2)
      {
LABEL_20:
        v15 = *(_QWORD *)(v11 + 8);
        if (*(_QWORD *)v15 == 17)
        {
          v16 = *(_QWORD *)(v15 + 16);
          v17 = *(_QWORD *)(v15 + 24);
          v18 = *(unsigned __int8 *)(v15 + 32);
          v19 = v16 == 0x70656661732E6367 && v17 == 0x6C6F705F746E696FLL;
          if (v19 && v18 == 108)
            return 0;
        }
        goto LABEL_28;
      }
      v13 = 1;
      while (v12 != (llvm::Function *)-4096)
      {
        v14 = v10 + v13++;
        v10 = v14 & (v9 - 1);
        v12 = *(llvm::Function **)(v8 + 16 * v10);
        if (v12 == a2)
        {
          v11 = v8 + 16 * v10;
          goto LABEL_20;
        }
      }
    }
    v11 = v8 + 16 * v9;
    goto LABEL_20;
  }
LABEL_28:
  if ((*((_WORD *)a2 + 9) & 0x4000) == 0)
    return 0;
  GC = llvm::LLVMContext::getGC(**(llvm::LLVMContext ***)a2, a2);
  v22 = *((_BYTE *)GC + 23);
  v23 = v22;
  v24 = v22 & 0x7F;
  if (v23 < 0)
    v24 = GC[1];
  if (v24 == 7)
  {
    if (v23 >= 0)
      v31 = (int *)GC;
    else
      v31 = (int *)*GC;
    v32 = *v31;
    v28 = *(int *)((char *)v31 + 3);
    v29 = v32 == 1701998435;
    v30 = 1919705957;
    goto LABEL_44;
  }
  if (v24 != 18)
    return 0;
  if (v23 >= 0)
    v25 = GC;
  else
    v25 = (uint64_t *)*GC;
  v26 = *v25;
  v27 = v25[1];
  v28 = *((unsigned __int16 *)v25 + 8);
  v29 = v26 == 0x696F706574617473 && v27 == 0x706D6178652D746ELL;
  v30 = 25964;
LABEL_44:
  if (!v29 || v28 != v30)
    return 0;
  v35 = **(char ****)(a1 + 8);
  do
  {
    v36 = *v35;
    v35 += 2;
  }
  while (v36 != llvm::TargetLibraryInfoWrapperPass::ID);
  v37 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v35 - 1) + 96))(*(v35 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v38 = (uint64_t *)sub_1C4D914E8(v37, (uint64_t)a2);
  v6 = llvm::removeUnreachableBlocks(a2, 0, 0, v39);
  v170[0] = &v171;
  v170[1] = (void *)0x100000000;
  v177 = 0;
  v172[0] = 0;
  v172[1] = 0;
  v173 = 0;
  v176 = 0;
  v174 = 0;
  v175 = a2;
  sub_1C53BA620((uint64_t)v170, 0);
  v167 = v169;
  v168 = 0x1000000000;
  if (!byte_1ED8226A8)
  {
    llvm::legacy::FunctionPassManager::FunctionPassManager((llvm::legacy::FunctionPassManager *)&v163, *((llvm::Module **)a2 + 5));
    v114 = byte_1ED8225E8 == 0;
    v115 = operator new();
    sub_1C5BEAD08(v115, v114);
    llvm::PMTopLevelManager::schedulePass(v164 + 52, (const void **)v115);
    llvm::legacy::FunctionPassManager::run((llvm::legacy::FunctionPassManagerImpl **)&v163, (llvm::Module **)a2);
    v175 = a2;
    sub_1C53BA620((uint64_t)v170, 0);
    v116 = *(char **)(v115 + 32);
    v117 = *(uint64_t **)(v115 + 40);
    v118 = 126 - 2 * __clz(((char *)v117 - v116) >> 3);
    if (v117 == (uint64_t *)v116)
      v119 = 0;
    else
      v119 = v118;
    sub_1C5BEB770(v116, v117, v119, 1);
    v122 = *(uint64_t **)(v115 + 32);
    v121 = *(uint64_t **)(v115 + 40);
    v123 = v122;
    if (v122 == v121)
    {
LABEL_194:
      if (v123 != v121)
      {
        v127 = v123 + 2;
        if (v123 + 2 != v121)
        {
          v128 = *v123;
          do
          {
            v129 = v128;
            v128 = *v127;
            if (v129 != *v127)
            {
              v123[1] = v128;
              ++v123;
            }
            ++v127;
          }
          while (v127 != v121);
          v122 = *(uint64_t **)(v115 + 32);
          v121 = *(uint64_t **)(v115 + 40);
        }
        if (v123 + 1 != v121)
        {
          v121 = v123 + 1;
          *(_QWORD *)(v115 + 40) = v123 + 1;
        }
      }
    }
    else
    {
      v124 = v122 + 1;
      while (v124 != v121)
      {
        v125 = *(v124 - 1);
        v126 = *v124++;
        if (v125 == v126)
        {
          v123 = v124 - 2;
          goto LABEL_194;
        }
      }
    }
    if (v122 != v121)
    {
      __pa = v121;
      do
      {
        v130 = *v122;
        if (byte_1ED822468)
        {
          v131 = 0;
          v132 = 0;
          v178 = 0;
          v179 = 0;
          v180 = 0;
          v182 = 0;
          v183 = 0;
          v133 = v130 - 64;
          v181 = 0;
          while (1)
          {
            v134 = *(unsigned __int8 *)(v130 + 16);
            if (v134 != 30)
              __asm { BR              X11 }
            v135 = (*(_DWORD *)(v130 + 20) & 0x7FFFFFF) == 3 ? 2 : 1;
            if (v132 >= v135)
              break;
            v156[0] = 0;
            v156[0] = *(_QWORD *)(v130 - 32 - 32 * v132);
            if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)v170, v156[0], *(_QWORD *)(v130 + 40)))
            {
              sub_1C5ACED14((uint64_t)&v178, v156);
            }
            ++v132;
            v131 += 2;
            v133 += 32;
          }
          v156[0] = 0;
          v156[1] = 0;
          v157 = 0;
          v159 = 0;
          v160 = 0;
          v158 = 0;
          v136 = v181;
          v137 = v182;
          while (v136 != v137)
          {
            v138 = *v136;
            v139 = *(llvm **)(v130 + 40);
            v155 = 257;
            v140 = llvm::SplitEdge(v139, v138, (llvm::BasicBlock *)v170, 0, 0, (llvm::MemorySSAUpdater *)&v152, v120);
            v141 = *(_QWORD *)(v140 + 40);
            if (v141 == v140 + 40)
            {
              v143 = 0;
            }
            else
            {
              if (v141)
                v142 = v141 - 24;
              else
                v142 = 0;
              if (*(unsigned __int8 *)(v142 + 16) - 29 >= 0xB)
                v143 = 0;
              else
                v143 = v142;
            }
            v144 = v168;
            if (v168 >= (unint64_t)HIDWORD(v168))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v167, (uint64_t)v169, v168 + 1, 8);
              v144 = v168;
            }
            *((_QWORD *)v167 + v144) = v143;
            LODWORD(v168) = v168 + 1;
            ++v136;
          }
          sub_1C5408A20(v156);
          sub_1C5408A20(&v178);
          v121 = __pa;
        }
        else
        {
          v145 = v168;
          if (v168 >= (unint64_t)HIDWORD(v168))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v167, (uint64_t)v169, v168 + 1, 8);
            v145 = v168;
          }
          *((_QWORD *)v167 + v145) = v130;
          LODWORD(v168) = v168 + 1;
        }
        ++v122;
      }
      while (v122 != v121);
      v6 = 1;
    }
    v163 = (char *)&off_1E8168290;
    if (v164)
      (*(void (**)(int32x2_t *))(*(_QWORD *)v164 + 8))(v164);
  }
  if (byte_1ED822528)
  {
    v40 = v168;
    if (!(_DWORD)v168)
      goto LABEL_182;
LABEL_85:
    v54 = 0;
    v55 = (llvm::Instruction **)v167;
    v147 = 0;
    __p = 0;
    v146 = (char *)v167 + 8 * v40;
    while (1)
    {
      v148 = v55;
      __dst = v54;
      v56 = *v55;
      v57 = *((_QWORD *)*v55 + 5);
      v58 = sub_1C4FB7E80(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v57 + 56) + 40) + 112), "gc.safepoint_poll", 0x11uLL);
      v59 = (llvm::Value *)v58;
      if (!v58)
        goto LABEL_87;
      if (*(_BYTE *)(v58 + 16))
        break;
      v60 = *(llvm::Type ****)(v58 + 24);
LABEL_88:
      LOWORD(v182) = 257;
      v61 = (char *)operator new(0x70uLL);
      *((_DWORD *)v61 + 13) = *((_DWORD *)v61 + 13) & 0x38000000 | 1;
      *(_QWORD *)v61 = 0;
      *((_QWORD *)v61 + 1) = 0;
      *((_QWORD *)v61 + 2) = 0;
      *((_QWORD *)v61 + 3) = v61 + 32;
      v62 = (uint64_t ***)llvm::CallInst::CallInst((llvm::CallInst *)(v61 + 32), v60, v59, (const llvm::Twine *)&v178, v56);
      v63 = (char **)(v61 + 56);
      v66 = *(char **)(v57 + 48);
      v64 = (uint64_t *)(v57 + 48);
      v65 = v66;
      if (v61 + 56 == v66)
        v67 = v61 + 56;
      else
        v67 = *v63;
      v68 = *((_QWORD *)v61 + 8);
      v178 = 0;
      v179 = 0;
      v182 = 0;
      v183 = 0;
      v181 = 0;
      v184 = v186;
      v185 = 0x400000000;
      v187[0] = (char *)&v188;
      v187[1] = (char *)0x800000000;
      v189 = v191;
      v190 = 0x800000000;
      v191[64] = 1;
      llvm::InlineFunction(v62, (uint64_t)&v178, 0, 1, 0);
      v163 = 0;
      v164 = 0;
      v165 = 0;
      v162 = 0;
      v161[0] = 0;
      v161[1] = 0;
      v69 = (uint64_t *)(v67 + 8);
      if (v63 == (char **)v65)
        v69 = v64;
      v70 = *v69;
      if (v70)
        v71 = v70 - 24;
      else
        v71 = 0;
      if (v68)
        v72 = v68 - 24;
      else
        v72 = 0;
      v152 = 0;
      v153 = 0;
      v154 = 0;
      v166 = *(_QWORD *)(v71 + 40);
      sub_1C6187FB8(v161, &v166, (uint64_t)v156);
      v73 = v71;
      while (1)
      {
        sub_1C5BEF78C(v73, v72, &v163, v161, &v152);
        if (v152 == v153)
          break;
        v74 = *((_QWORD *)v153 - 1);
        v153 -= 8;
        v75 = *(_QWORD *)(v74 + 48);
        if (v75)
          v73 = v75 - 24;
        else
          v73 = 0;
      }
      if (v152)
        operator delete(v152);
      v76 = (uint64_t *)v163;
      v77 = (uint64_t *)v164;
      if (v163 == (char *)v164)
      {
        v79 = 0;
        v78 = 0;
      }
      else
      {
        v78 = 0;
        v79 = 0;
        v80 = 0;
        do
        {
          v81 = *v76;
          if (sub_1C5BEB6DC(*v76, v38))
          {
            if (v79 >= v80)
            {
              v82 = v79 - v78;
              v83 = v82 + 1;
              if ((unint64_t)(v82 + 1) >> 61)
                goto LABEL_237;
              if (((char *)v80 - (char *)v78) >> 2 > v83)
                v83 = ((char *)v80 - (char *)v78) >> 2;
              if ((unint64_t)((char *)v80 - (char *)v78) >= 0x7FFFFFFFFFFFFFF8)
                v84 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v84 = v83;
              if (v84)
              {
                if (v84 >> 61)
                  goto LABEL_238;
                v85 = (char *)operator new(8 * v84);
              }
              else
              {
                v85 = 0;
              }
              v86 = (uint64_t *)&v85[8 * v82];
              *v86 = v81;
              v87 = v86 + 1;
              while (v79 != v78)
              {
                v88 = *--v79;
                *--v86 = v88;
              }
              v80 = (uint64_t *)&v85[8 * v84];
              if (v78)
                operator delete(v78);
              v79 = v87;
              v78 = v86;
            }
            else
            {
              *v79++ = v81;
            }
          }
          ++v76;
        }
        while (v76 != v77);
        v76 = (uint64_t *)v163;
      }
      MEMORY[0x1CAA32FB4](v161[0], 8);
      if (v76)
        operator delete(v76);
      if (v189 != v191)
        free(v189);
      sub_1C52768FC(v187);
      v54 = __dst;
      if (v184 != v186)
        free(v184);
      v89 = (char *)v79 - (char *)v78;
      if ((char *)v79 - (char *)v78 < 1)
        goto LABEL_173;
      v90 = v89 >> 3;
      v91 = __dst - __p;
      v92 = &__p[(__dst - __p) & 0xFFFFFFFFFFFFFFF8];
      if (v89 >> 3 > (v147 - __dst) >> 3)
      {
        v93 = v91 >> 3;
        v94 = v90 + (v91 >> 3);
        if (v94 >> 61)
LABEL_237:
          abort();
        if ((v147 - __p) >> 2 > v94)
          v94 = (v147 - __p) >> 2;
        if ((unint64_t)(v147 - __p) >= 0x7FFFFFFFFFFFFFF8)
          v95 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v95 = v94;
        if (v95)
        {
          if (v95 >> 61)
LABEL_238:
            sub_1C4764EE4();
          v96 = (char *)operator new(8 * v95);
        }
        else
        {
          v96 = 0;
        }
        v105 = &v96[8 * v93];
        v106 = &v105[8 * v90];
        v107 = 8 * v90;
        v108 = v105;
        v109 = v78;
        do
        {
          v110 = *v109++;
          *(_QWORD *)v108 = v110;
          v108 += 8;
          v107 -= 8;
        }
        while (v107);
        if ((unint64_t)v91 >= 8)
        {
          v111 = 8 * v93;
          do
          {
            *(_QWORD *)&v96[v111 - 8] = *(_QWORD *)&__p[v111 - 8];
            v111 -= 8;
          }
          while (v111);
          v105 = v96;
        }
        v112 = __dst - &__p[(__dst - __p) & 0xFFFFFFFFFFFFFFF8];
        if (v112)
        {
          v113 = v106;
          memmove(v106, &__p[(__dst - __p) & 0xFFFFFFFFFFFFFFF8], v112);
          v106 = v113;
        }
        v147 = &v96[8 * v95];
        v54 = &v106[v112];
        if (__p)
          operator delete(__p);
        __p = v105;
        goto LABEL_173;
      }
      v97 = (__dst - v92) >> 3;
      if (v97 >= v90)
      {
        v98 = &v78[v90];
        v100 = __dst;
LABEL_153:
        v101 = &v100[-8 * v90];
        v102 = v100;
        while (v101 < __dst)
        {
          v103 = *(_QWORD *)v101;
          v101 += 8;
          *(_QWORD *)v102 = v103;
          v102 += 8;
        }
        v104 = &v92[8 * v90];
        if (v100 != v104)
          memmove(&v100[-8 * ((v100 - v104) >> 3)], v92, v100 - v104);
        if (v98 != v78)
          memmove(v92, v78, (char *)v98 - (char *)v78);
        v54 = v102;
        goto LABEL_173;
      }
      v98 = &v78[v97];
      v99 = (char *)((char *)v79 - (char *)v98);
      if (v79 != v98)
        memmove(__dst, &v78[v97], (char *)v79 - (char *)v98);
      v100 = &v99[(_QWORD)__dst];
      if (__dst - v92 >= 1)
        goto LABEL_153;
      v54 = &v99[(_QWORD)__dst];
LABEL_173:
      if (v78)
        operator delete(v78);
      v55 = v148 + 1;
      if (v148 + 1 == (llvm::Instruction **)v146)
      {
        if (__p)
          operator delete(__p);
        goto LABEL_182;
      }
    }
    v59 = 0;
LABEL_87:
    v60 = 0;
    goto LABEL_88;
  }
  v41 = *((_QWORD *)a2 + 10);
  if (v41)
    v42 = v41 - 24;
  else
    v42 = 0;
  v43 = (uint64_t *)(v42 + 48);
  while (1)
  {
    v44 = *v43;
    if (v44)
      v45 = v44 - 24;
    else
      v45 = 0;
    v46 = *(unsigned __int8 *)(v45 + 16);
    if ((v46 - 29) <= 0xA)
    {
      UniqueSuccessor = (llvm::BasicBlock *)llvm::BasicBlock::getUniqueSuccessor(*(llvm::BasicBlock **)(v45 + 40));
      if (!UniqueSuccessor || !llvm::BasicBlock::getUniquePredecessor(UniqueSuccessor))
        goto LABEL_82;
      v46 = *(unsigned __int8 *)(v45 + 16);
    }
    if (v46 == 84)
      break;
    if (v46 == 33 || v46 == 39)
      goto LABEL_82;
    if ((v46 - 29) > 0xA)
LABEL_81:
      v43 = (uint64_t *)(v45 + 32);
    else
      v43 = (uint64_t *)(llvm::BasicBlock::getUniqueSuccessor(*(llvm::BasicBlock **)(v45 + 40)) + 48);
  }
  v48 = *(_QWORD *)(v45 - 32);
  if (v48
    && !*(_BYTE *)(v48 + 16)
    && *(_QWORD *)(v48 + 24) == *(_QWORD *)(v45 + 72)
    && (*(_BYTE *)(v48 + 33) & 0x20) != 0)
  {
    v49 = *(_DWORD *)(v48 + 36) - 124;
    v50 = v49 > 4;
    v51 = (1 << v49) & 0x19;
    if (v50 || v51 == 0)
      goto LABEL_81;
  }
LABEL_82:
  v53 = v168;
  if (v168 >= HIDWORD(v168))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v167, (uint64_t)v169, v168 + 1, 8);
    v53 = v168;
  }
  *((_QWORD *)v167 + v53) = v45;
  v40 = v168 + 1;
  LODWORD(v168) = v40;
  v6 = 1;
  if (v40)
    goto LABEL_85;
LABEL_182:
  if (v167 != v169)
    free(v167);
  sub_1C4DC4E38(v172);
  if (v170[0] != &v171)
    free(v170[0]);
  return v6;
}

uint64_t sub_1C5BEAD08(uint64_t a1, char a2)
{
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED822251;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8197178;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = a2;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED822258);
  if (v4 != -1)
  {
    v8[0] = sub_1C5BE9D90;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED822258, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void sub_1C5BEADE4(llvm::Pass *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E8197178;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  llvm::Pass::~Pass(this);
}

void sub_1C5BEAE20(llvm::Pass *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E8197178;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5BEAE70(uint64_t a1, uint64_t a2)
{
  void *result;

  sub_1C4771E64(a2, a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  result = sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  *(_BYTE *)(a2 + 160) = 1;
  return result;
}

uint64_t sub_1C5BEAEE0(uint64_t a1, uint64_t a2)
{
  char **v4;
  char *v5;
  char **v6;
  char *v7;
  char **v8;
  char *v9;
  char **v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;

  v4 = **(char ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::ScalarEvolutionWrapperPass::ID);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v6 = **(char ****)(a1 + 8);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != llvm::DominatorTreeWrapperPass::ID);
  *(_QWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), llvm::DominatorTreeWrapperPass::ID)+ 32;
  v8 = **(char ****)(a1 + 8);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != llvm::LoopInfoWrapperPass::ID);
  *(_QWORD *)(a1 + 80) = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), llvm::LoopInfoWrapperPass::ID)+ 32;
  v10 = **(char ****)(a1 + 8);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != llvm::TargetLibraryInfoWrapperPass::ID);
  v12 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  *(_QWORD *)(a1 + 88) = sub_1C4D914E8(v12, a2);
  v13 = *(_QWORD *)(a1 + 80);
  v14 = *(uint64_t **)(v13 + 24);
  v15 = *(uint64_t **)(v13 + 32);
  while (v14 != v15)
  {
    v16 = *v14++;
    sub_1C5BEB020(a1, v16);
  }
  return 0;
}

void sub_1C5BEB020(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::ScalarEvolution *v11;
  uint64_t BackedgeTakenCount;
  uint64_t RangeRef;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  int v29;
  int64_t v30;
  BOOL v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t ExitCount;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  int64_t v42;
  unint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t i;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t *v63;
  void *v64;
  unsigned int v65;
  void *v66;
  unsigned int v67;
  unint64_t v68;
  unsigned int v69;
  void *v70;
  uint64_t v71;
  _QWORD v72[18];

  v72[16] = *MEMORY[0x1E0C80C00];
  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(uint64_t **)(a2 + 16);
  while (v3 != v4)
  {
    v5 = *v3++;
    sub_1C5BEB020(a1, v5);
  }
  v61 = **(_QWORD **)(a2 + 32);
  v70 = v72;
  v71 = 0x1000000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatches((_QWORD **)a2, (uint64_t)&v70);
  v6 = (uint64_t *)v70;
  if (!(_DWORD)v71)
    goto LABEL_110;
  v63 = (uint64_t *)((char *)v70 + 8 * v71);
  do
  {
    v7 = *v6;
    if (byte_1ED8222E8)
      goto LABEL_7;
    v11 = *(llvm::ScalarEvolution **)(a1 + 64);
    BackedgeTakenCount = llvm::ScalarEvolution::getBackedgeTakenCount(v11, (const llvm::Loop *)a2, 1);
    if (*(_WORD *)(BackedgeTakenCount + 24) == 15)
      goto LABEL_75;
    RangeRef = llvm::ScalarEvolution::getRangeRef((uint64_t)v11, BackedgeTakenCount, 0, 0);
    v14 = RangeRef;
    v65 = *(_DWORD *)(RangeRef + 8);
    if (v65 > 0x40)
    {
      v64 = (void *)operator new[]();
      memcpy(v64, *(const void **)v14, (((unint64_t)v65 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v64 = *(void **)RangeRef;
    }
    v67 = *(_DWORD *)(v14 + 24);
    if (v67 > 0x40)
    {
      v66 = (void *)operator new[]();
      memcpy(v66, *(const void **)(v14 + 16), (((unint64_t)v67 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v66 = *(void **)(v14 + 16);
    }
    llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)&v64, (llvm::APInt *)&v68);
    v15 = dword_1ED8223A8;
    v16 = v69;
    if (v69 > 0x40)
    {
      v29 = 0;
      v30 = ((unint64_t)v69 + 63) >> 6;
      while (1)
      {
        v31 = v30-- < 1;
        if (v31)
          break;
        v32 = *(_QWORD *)(v68 + 8 * v30);
        v29 += __clz(v32);
        if (v32)
        {
          v33 = v69 | 0xFFFFFFC0;
          if ((v69 & 0x3F) == 0)
            v33 = 0;
          v17 = v29 + v33;
LABEL_51:
          MEMORY[0x1CAA32F9C](v68, 0x1000C8000313F17);
          goto LABEL_52;
        }
      }
      v34 = v69 | 0xFFFFFFC0;
      if ((v69 & 0x3F) == 0)
        v34 = 0;
      v17 = v29 + v34;
      if (v68)
        goto LABEL_51;
    }
    else
    {
      v17 = v69 + __clz(v68) - 64;
    }
LABEL_52:
    if (v67 >= 0x41 && v66)
      MEMORY[0x1CAA32F9C](v66, 0x1000C8000313F17);
    if (v65 >= 0x41 && v64)
      MEMORY[0x1CAA32F9C](v64, 0x1000C8000313F17);
    if (v16 - v17 > v15)
    {
LABEL_75:
      if (!llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isLoopExiting(a2, v7))
        goto LABEL_117;
      ExitCount = llvm::ScalarEvolution::getExitCount(v11, (const llvm::Loop *)a2, v7, 0);
      if (*(_WORD *)(ExitCount + 24) == 15)
        goto LABEL_117;
      v36 = llvm::ScalarEvolution::getRangeRef((uint64_t)v11, ExitCount, 0, 0);
      v37 = v36;
      v65 = *(_DWORD *)(v36 + 8);
      if (v65 > 0x40)
      {
        v64 = (void *)operator new[]();
        memcpy(v64, *(const void **)v37, (((unint64_t)v65 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v64 = *(void **)v36;
      }
      v67 = *(_DWORD *)(v37 + 24);
      if (v67 > 0x40)
      {
        v66 = (void *)operator new[]();
        memcpy(v66, *(const void **)(v37 + 16), (((unint64_t)v67 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v66 = *(void **)(v37 + 16);
      }
      llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)&v64, (llvm::APInt *)&v68);
      v38 = dword_1ED8223A8;
      v39 = v69;
      if (v69 > 0x40)
      {
        v41 = 0;
        v42 = ((unint64_t)v69 + 63) >> 6;
        while (1)
        {
          v31 = v42-- < 1;
          if (v31)
            break;
          v43 = *(_QWORD *)(v68 + 8 * v42);
          v41 += __clz(v43);
          if (v43)
          {
            v44 = v69 | 0xFFFFFFC0;
            if ((v69 & 0x3F) == 0)
              v44 = 0;
            v40 = v41 + v44;
LABEL_72:
            MEMORY[0x1CAA32F9C](v68, 0x1000C8000313F17);
            goto LABEL_73;
          }
        }
        v45 = v69 | 0xFFFFFFC0;
        if ((v69 & 0x3F) == 0)
          v45 = 0;
        v40 = v41 + v45;
        if (v68)
          goto LABEL_72;
      }
      else
      {
        v40 = v69 + __clz(v68) - 64;
      }
LABEL_73:
      if (v67 >= 0x41 && v66)
        MEMORY[0x1CAA32F9C](v66, 0x1000C8000313F17);
      if (v65 >= 0x41 && v64)
        MEMORY[0x1CAA32F9C](v64, 0x1000C8000313F17);
      if (v39 - v40 > v38)
      {
LABEL_117:
        if (*(_BYTE *)(a1 + 56))
        {
          v46 = *(_QWORD *)(a1 + 72);
          v47 = *(uint64_t **)(a1 + 88);
          v48 = v7;
          while (2)
          {
            for (i = *(_QWORD *)(v48 + 48); i != v48 + 40; i = *(_QWORD *)(i + 8))
            {
              if (i)
                v50 = i - 24;
              else
                v50 = 0;
              v51 = *(unsigned __int8 *)(v50 + 16) - 33;
              v31 = v51 > 0x33;
              v52 = (1 << v51) & 0x8000000000041;
              v53 = v31 || v52 == 0;
              if (!v53 && sub_1C5BEB6DC(i - 24, v47))
                goto LABEL_40;
            }
            if (v48 == v61)
              break;
            v54 = *(_QWORD *)(v46 + 24);
            v55 = *(unsigned int *)(v46 + 40);
            if ((_DWORD)v55)
            {
              LODWORD(v56) = (v55 - 1) & ((v48 >> 4) ^ (v48 >> 9));
              v57 = (uint64_t *)(v54 + 16 * v56);
              v58 = *v57;
              if (v48 != *v57)
              {
                v59 = 1;
                while (v58 != -4096)
                {
                  v60 = v56 + v59++;
                  v56 = v60 & (v55 - 1);
                  v58 = *(_QWORD *)(v54 + 16 * v56);
                  if (v48 == v58)
                  {
                    v57 = (uint64_t *)(v54 + 16 * v56);
                    goto LABEL_97;
                  }
                }
                goto LABEL_96;
              }
            }
            else
            {
LABEL_96:
              v57 = (uint64_t *)(v54 + 16 * v55);
            }
LABEL_97:
            v48 = **(_QWORD **)(v57[1] + 8);
            continue;
          }
        }
LABEL_7:
        v8 = *(_QWORD *)(v7 + 40);
        if (v8 == v7 + 40)
        {
          v10 = 0;
        }
        else
        {
          if (v8)
            v9 = v8 - 24;
          else
            v9 = 0;
          if (*(unsigned __int8 *)(v9 + 16) - 29 >= 0xB)
            v10 = 0;
          else
            v10 = v9;
        }
        v19 = *(_QWORD **)(a1 + 40);
        v18 = *(_QWORD *)(a1 + 48);
        if ((unint64_t)v19 >= v18)
        {
          v21 = *(_QWORD **)(a1 + 32);
          v22 = v19 - v21;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
            abort();
          v24 = v18 - (_QWORD)v21;
          if (v24 >> 2 > v23)
            v23 = v24 >> 2;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v25 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          if (v25)
          {
            if (v25 >> 61)
              sub_1C4764EE4();
            v26 = (char *)operator new(8 * v25);
          }
          else
          {
            v26 = 0;
          }
          v27 = &v26[8 * v22];
          *(_QWORD *)v27 = v10;
          v20 = v27 + 8;
          if (v19 != v21)
          {
            do
            {
              v28 = *--v19;
              *((_QWORD *)v27 - 1) = v28;
              v27 -= 8;
            }
            while (v19 != v21);
            v19 = *(_QWORD **)(a1 + 32);
          }
          *(_QWORD *)(a1 + 32) = v27;
          *(_QWORD *)(a1 + 40) = v20;
          *(_QWORD *)(a1 + 48) = &v26[8 * v25];
          if (v19)
            operator delete(v19);
        }
        else
        {
          *v19 = v10;
          v20 = v19 + 1;
        }
        *(_QWORD *)(a1 + 40) = v20;
      }
    }
LABEL_40:
    ++v6;
  }
  while (v6 != v63);
  v6 = (uint64_t *)v70;
LABEL_110:
  if (v6 != v72)
    free(v6);
}

BOOL sub_1C5BEB6DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if (llvm::callsGCLeafFunction(a1, a2))
    return 0;
  v3 = *(_QWORD *)(a1 - 32);
  if (!a1 || *(_BYTE *)(a1 + 16) != 84)
  {
    if (!v3 || *(_BYTE *)(v3 + 16))
      goto LABEL_11;
    goto LABEL_9;
  }
  if (*(_BYTE *)(v3 + 16) == 24)
    return 0;
  if (!*(_BYTE *)(v3 + 16))
  {
LABEL_9:
    if (*(_QWORD *)(v3 + 24) == *(_QWORD *)(a1 + 72) && *(_DWORD *)(v3 + 36) == 124)
      return 0;
  }
LABEL_11:
  if (sub_1C4E9AE24(a1))
    return 0;
  return !sub_1C5458950(a1);
}

char *sub_1C5BEB770(char *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ***v14;
  int v15;
  uint64_t ***v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ****v21;
  uint64_t ***v22;
  int v23;
  int v24;
  uint64_t ***v25;
  char *v26;
  size_t v27;
  size_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t ****v35;
  uint64_t ***v36;
  int v37;
  int v38;
  uint64_t ***v39;
  char *v40;
  size_t v41;
  size_t v42;
  size_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t ****v49;
  uint64_t ***v50;
  int v51;
  int v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t ***v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t ****v63;
  uint64_t ***v64;
  int v65;
  int v66;
  uint64_t ***v67;
  char *v68;
  size_t v69;
  size_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t ****v75;
  uint64_t ***v76;
  int v77;
  int v78;
  uint64_t ***v79;
  char *v80;
  size_t v81;
  size_t v82;
  size_t v83;
  int v84;
  int v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t ***v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t ****v93;
  uint64_t ***v94;
  int v95;
  int v96;
  uint64_t ***v97;
  char *v98;
  size_t v99;
  size_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t ****v105;
  uint64_t ***v106;
  int v107;
  int v108;
  uint64_t ***v109;
  char *v110;
  size_t v111;
  size_t v112;
  size_t v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t ***v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t ****v122;
  uint64_t ***v123;
  int v124;
  int v125;
  uint64_t ***v126;
  char *v127;
  size_t v128;
  size_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t ****v134;
  uint64_t ***v135;
  int v136;
  int v137;
  uint64_t ***v138;
  char *v139;
  size_t v140;
  size_t v141;
  size_t v142;
  int v143;
  int v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t ***v147;
  int v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t ***v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t ****v156;
  uint64_t ***v157;
  int v158;
  int v159;
  uint64_t ***v160;
  char *v161;
  size_t v162;
  size_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t ****v168;
  uint64_t ***v169;
  int v170;
  int v171;
  uint64_t ***v172;
  char *v173;
  size_t v174;
  size_t v175;
  size_t v176;
  int v177;
  int v178;
  size_t v179;
  char *v180;
  size_t v181;
  char *v182;
  uint64_t v183;
  uint64_t ***v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t ****v189;
  uint64_t ***v190;
  int v191;
  int v192;
  uint64_t ***v193;
  size_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t ****v199;
  uint64_t ***v200;
  int v201;
  int v202;
  uint64_t ***v203;
  size_t v204;
  size_t v205;
  int v206;
  int v207;
  uint64_t *v208;
  BOOL v209;
  uint64_t ***v210;
  size_t v211;
  size_t v212;
  uint64_t ***v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t ****v218;
  uint64_t ***v219;
  int v220;
  int v221;
  uint64_t ***v222;
  char *v223;
  size_t v224;
  size_t v225;
  size_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t ****v231;
  uint64_t ***v232;
  int v233;
  int v234;
  uint64_t ***v235;
  size_t v236;
  size_t v237;
  uint64_t ***v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t ****v243;
  uint64_t ***v244;
  int v245;
  int v246;
  uint64_t ***v247;
  char *v248;
  size_t v249;
  size_t v250;
  size_t v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t ****v257;
  uint64_t ***v258;
  int v259;
  int v260;
  uint64_t ***v261;
  size_t v262;
  size_t v263;
  uint64_t v264;
  uint64_t ***v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t ****v270;
  uint64_t ***v271;
  int v272;
  int v273;
  uint64_t ***v274;
  char *v275;
  size_t v276;
  size_t v277;
  size_t v278;
  int v279;
  uint64_t *v280;
  unsigned int v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t ****v286;
  uint64_t ***v287;
  int v288;
  int v289;
  uint64_t ***v290;
  size_t v291;
  size_t v292;
  uint64_t v293;
  uint64_t ***v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t ****v299;
  uint64_t ***v300;
  int v301;
  int v302;
  uint64_t ***v303;
  char *v304;
  size_t v305;
  size_t v306;
  size_t v307;
  int v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t ***v313;
  int v314;
  unsigned int v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t ****v321;
  uint64_t ***v322;
  int v323;
  int v324;
  uint64_t ***v325;
  char *v326;
  size_t v327;
  size_t v328;
  uint64_t ***v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t ****v334;
  uint64_t ***v335;
  int v336;
  int v337;
  uint64_t ***v338;
  char *v339;
  size_t v340;
  size_t v341;
  size_t v342;
  int v343;
  int v344;
  size_t v345;
  size_t v346;
  char *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t ****v353;
  uint64_t ***v354;
  int v355;
  int v356;
  uint64_t ***v357;
  size_t v358;
  uint64_t ***v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t ****v364;
  uint64_t ***v365;
  int v366;
  int v367;
  uint64_t ***v368;
  size_t v369;
  size_t v370;
  int v371;
  uint64_t *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t ***v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t ****v380;
  uint64_t ***v381;
  int v382;
  int v383;
  uint64_t *v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t ***v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t ****v393;
  uint64_t ***v394;
  int v395;
  int v396;
  uint64_t *v397;
  BOOL v399;
  uint64_t *v400;
  uint64_t *v401;
  uint64_t v402;
  uint64_t ***v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t ****v408;
  uint64_t ***v409;
  int v410;
  int v411;
  uint64_t ***v412;
  unint64_t v413;
  unint64_t v414;
  uint64_t v415;
  uint64_t ***v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t ****v421;
  uint64_t ***v422;
  int v423;
  int v424;
  uint64_t ***v425;
  char *v426;
  unint64_t v427;
  unint64_t v428;
  size_t v429;
  uint64_t *v430;
  uint64_t ***v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t ****v436;
  uint64_t ***v437;
  int v438;
  int v439;
  uint64_t ***v440;
  unint64_t v441;
  unint64_t v442;
  uint64_t ***v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t ****v448;
  uint64_t ***v449;
  int v450;
  int v451;
  uint64_t ***v452;
  char *v453;
  unint64_t v454;
  unint64_t v455;
  size_t v456;
  int v457;
  int64_t v458;
  int64_t v459;
  uint64_t v460;
  uint64_t *v461;
  uint64_t *v462;
  uint64_t ***v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t ****v468;
  uint64_t ***v469;
  int v470;
  int v471;
  uint64_t ***v472;
  char *v473;
  size_t v474;
  size_t v475;
  uint64_t ***v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t ****v481;
  uint64_t ***v482;
  int v483;
  int v484;
  uint64_t ***v485;
  char *v486;
  size_t v487;
  size_t v488;
  size_t v489;
  int v490;
  int v491;
  uint64_t *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t ***v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t ****v500;
  uint64_t ***v501;
  int v502;
  int v503;
  uint64_t ***v504;
  size_t v505;
  size_t v506;
  uint64_t ***v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t ****v512;
  uint64_t ***v513;
  int v514;
  int v515;
  uint64_t ***v516;
  char *v517;
  size_t v518;
  size_t v519;
  size_t v520;
  BOOL v521;
  uint64_t *v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t ***v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t ****v530;
  uint64_t ***v531;
  int v532;
  int v533;
  uint64_t ***v534;
  char *v535;
  unint64_t v536;
  unint64_t v537;
  uint64_t v538;
  uint64_t ***v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t ****v544;
  uint64_t ***v545;
  int v546;
  int v547;
  uint64_t ***v548;
  char *v549;
  unint64_t v550;
  unint64_t v551;
  size_t v552;
  int v553;
  int v554;
  uint64_t ***v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t ****v560;
  uint64_t ***v561;
  int v562;
  int v563;
  uint64_t ***v564;
  unint64_t v565;
  unint64_t v566;
  uint64_t ***v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t ****v572;
  uint64_t ***v573;
  int v574;
  int v575;
  uint64_t ***v576;
  char *v577;
  unint64_t v578;
  unint64_t v579;
  size_t v580;
  int v581;
  uint64_t *v582;
  uint64_t *v583;
  uint64_t v584;
  uint64_t *v585;
  uint64_t *v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t ***v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t ****v594;
  uint64_t ***v595;
  int v596;
  int v597;
  uint64_t ***v598;
  size_t v599;
  size_t v600;
  uint64_t ***v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t ****v606;
  uint64_t ***v607;
  int v608;
  int v609;
  uint64_t ***v610;
  char *v611;
  size_t v612;
  size_t v613;
  size_t v614;
  int v615;
  uint64_t v616;
  unint64_t v617;
  uint64_t *v618;
  uint64_t v619;
  uint64_t ***v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t ****v625;
  uint64_t ***v626;
  int v627;
  int v628;
  uint64_t ***v629;
  size_t v630;
  size_t v631;
  uint64_t v632;
  uint64_t ***v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t ****v638;
  uint64_t ***v639;
  int v640;
  int v641;
  uint64_t ***v642;
  char *v643;
  size_t v644;
  size_t v645;
  size_t v646;
  uint64_t *v647;
  uint64_t ***v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t ****v653;
  uint64_t ***v654;
  int v655;
  int v656;
  uint64_t ***v657;
  unint64_t v658;
  unint64_t v659;
  uint64_t ***v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t ****v665;
  uint64_t ***v666;
  int v667;
  int v668;
  uint64_t ***v669;
  char *v670;
  unint64_t v671;
  unint64_t v672;
  size_t v673;
  int v674;
  BOOL v675;
  uint64_t *v676;
  uint64_t v677;
  uint64_t ***v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t ****v683;
  uint64_t ***v684;
  int v685;
  int v686;
  uint64_t ***v687;
  size_t v688;
  size_t v689;
  uint64_t v690;
  uint64_t ***v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t ****v696;
  uint64_t ***v697;
  int v698;
  int v699;
  uint64_t ***v700;
  char *v701;
  size_t v702;
  size_t v703;
  size_t v704;
  uint64_t *v705;
  uint64_t ***v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t ****v711;
  uint64_t ***v712;
  int v713;
  int v714;
  uint64_t ***v715;
  size_t v716;
  size_t v717;
  uint64_t ***v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t ****v723;
  uint64_t ***v724;
  int v725;
  int v726;
  uint64_t ***v727;
  char *v728;
  size_t v729;
  size_t v730;
  size_t v731;
  int v732;
  uint64_t ***v733;
  size_t v734;
  size_t v735;
  uint64_t ***v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t ****v741;
  uint64_t ***v742;
  int v743;
  int v744;
  uint64_t ***v745;
  size_t v746;
  size_t v747;
  uint64_t ***v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t ****v753;
  uint64_t ***v754;
  int v755;
  int v756;
  uint64_t ***v757;
  char *v758;
  size_t v759;
  size_t v760;
  size_t v761;
  uint64_t ***v762;
  char *v763;
  size_t v764;
  size_t v765;
  size_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t ***v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t ****v774;
  uint64_t ***v775;
  int v776;
  int v777;
  uint64_t ***v778;
  size_t v779;
  size_t v780;
  uint64_t ***v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t ****v786;
  uint64_t ***v787;
  int v788;
  int v789;
  uint64_t ***v790;
  char *v791;
  size_t v792;
  size_t v793;
  size_t v794;
  uint64_t v795;
  uint64_t ***v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t ****v801;
  uint64_t ***v802;
  int v803;
  int v804;
  uint64_t ***v805;
  size_t v806;
  size_t v807;
  uint64_t ***v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t ****v813;
  uint64_t ***v814;
  int v815;
  int v816;
  uint64_t ***v817;
  char *v818;
  size_t v819;
  size_t v820;
  size_t v821;
  uint64_t v822;
  uint64_t ***v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t ****v828;
  uint64_t ***v829;
  int v830;
  int v831;
  uint64_t ***v832;
  size_t v833;
  size_t v834;
  uint64_t ***v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t ****v840;
  uint64_t ***v841;
  int v842;
  int v843;
  uint64_t ***v844;
  char *v845;
  size_t v846;
  size_t v847;
  size_t v848;
  uint64_t *v849;
  uint64_t *v850;
  uint64_t *v851;
  uint64_t *v853;
  uint64_t v854;
  uint64_t *v855;
  uint64_t *v856;
  uint64_t v857;
  int64_t v858;
  uint64_t v859;

  v5 = (uint64_t *)result;
LABEL_2:
  v850 = a2 - 2;
  v851 = a2 - 1;
  v855 = a2;
  v849 = a2 - 3;
  v6 = v5;
  while (2)
  {
    v7 = v6;
    v8 = (char *)v855 - (char *)v6;
    v9 = v855 - v6;
    switch(v9)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v373 = *(v855 - 1);
        v374 = *v7;
        v375 = *(uint64_t ****)(v373 + 40);
        if ((*((_BYTE *)v375 + 23) & 0x10) != 0)
        {
          v376 = ***v375;
          v377 = *(_QWORD *)(v376 + 152);
          v378 = *(unsigned int *)(v376 + 168);
          if ((_DWORD)v378)
          {
            LODWORD(v379) = (v378 - 1) & ((v375 >> 4) ^ (v375 >> 9));
            v380 = (uint64_t ****)(v377 + 16 * v379);
            v381 = *v380;
            if (*v380 != v375)
            {
              v382 = 1;
              do
              {
                if (v381 == (uint64_t ***)-4096)
                  goto LABEL_799;
                v383 = v379 + v382++;
                v379 = v383 & (v378 - 1);
                v381 = *(uint64_t ****)(v377 + 16 * v379);
              }
              while (v381 != v375);
              v380 = (uint64_t ****)(v377 + 16 * v379);
            }
          }
          else
          {
LABEL_799:
            v380 = (uint64_t ****)(v377 + 16 * v378);
          }
          v733 = v380[1];
          v735 = (size_t)*v733;
          result = (char *)(v733 + 2);
          v734 = v735;
          goto LABEL_801;
        }
        v734 = 0;
        result = &byte_1C871356D;
LABEL_801:
        v736 = *(uint64_t ****)(v374 + 40);
        if ((*((_BYTE *)v736 + 23) & 0x10) != 0)
        {
          v737 = ***v736;
          v738 = *(_QWORD *)(v737 + 152);
          v739 = *(unsigned int *)(v737 + 168);
          if ((_DWORD)v739)
          {
            LODWORD(v740) = (v739 - 1) & ((v736 >> 4) ^ (v736 >> 9));
            v741 = (uint64_t ****)(v738 + 16 * v740);
            v742 = *v741;
            if (*v741 != v736)
            {
              v743 = 1;
              do
              {
                if (v742 == (uint64_t ***)-4096)
                  goto LABEL_817;
                v744 = v740 + v743++;
                v740 = v744 & (v739 - 1);
                v742 = *(uint64_t ****)(v738 + 16 * v740);
              }
              while (v742 != v736);
              v741 = (uint64_t ****)(v738 + 16 * v740);
            }
          }
          else
          {
LABEL_817:
            v741 = (uint64_t ****)(v738 + 16 * v739);
          }
          v757 = v741[1];
          v760 = (size_t)*v757;
          v758 = (char *)(v757 + 2);
          v759 = v760;
          goto LABEL_819;
        }
        v759 = 0;
        v758 = &byte_1C871356D;
LABEL_819:
        if (v759 >= v734)
          v761 = v734;
        else
          v761 = v759;
        if (v761 && (result = (char *)memcmp(result, v758, v761), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v734 >= v759)
        {
          return result;
        }
        *v7 = v373;
        *(v855 - 1) = v374;
        return result;
      case 3:
        return sub_1C5BEE218(v7, v7 + 1, v851);
      case 4:
        return sub_1C5BEF34C(v7, v7 + 1, v7 + 2, v851);
      case 5:
        v384 = v7 + 2;
        v385 = v7 + 3;
        sub_1C5BEF34C(v7, v7 + 1, v7 + 2, v7 + 3);
        v386 = *(v855 - 1);
        v387 = v7[3];
        v388 = *(uint64_t ****)(v386 + 40);
        if ((*((_BYTE *)v388 + 23) & 0x10) != 0)
        {
          v389 = ***v388;
          v390 = *(_QWORD *)(v389 + 152);
          v391 = *(unsigned int *)(v389 + 168);
          if ((_DWORD)v391)
          {
            LODWORD(v392) = (v391 - 1) & ((v388 >> 4) ^ (v388 >> 9));
            v393 = (uint64_t ****)(v390 + 16 * v392);
            v394 = *v393;
            if (*v393 != v388)
            {
              v395 = 1;
              do
              {
                if (v394 == (uint64_t ***)-4096)
                  goto LABEL_808;
                v396 = v392 + v395++;
                v392 = v396 & (v391 - 1);
                v394 = *(uint64_t ****)(v390 + 16 * v392);
              }
              while (v394 != v388);
              v393 = (uint64_t ****)(v390 + 16 * v392);
            }
          }
          else
          {
LABEL_808:
            v393 = (uint64_t ****)(v390 + 16 * v391);
          }
          v745 = v393[1];
          v747 = (size_t)*v745;
          result = (char *)(v745 + 2);
          v746 = v747;
          goto LABEL_810;
        }
        v746 = 0;
        result = &byte_1C871356D;
LABEL_810:
        v748 = *(uint64_t ****)(v387 + 40);
        if ((*((_BYTE *)v748 + 23) & 0x10) != 0)
        {
          v749 = ***v748;
          v750 = *(_QWORD *)(v749 + 152);
          v751 = *(unsigned int *)(v749 + 168);
          if ((_DWORD)v751)
          {
            LODWORD(v752) = (v751 - 1) & ((v748 >> 4) ^ (v748 >> 9));
            v753 = (uint64_t ****)(v750 + 16 * v752);
            v754 = *v753;
            if (*v753 != v748)
            {
              v755 = 1;
              do
              {
                if (v754 == (uint64_t ***)-4096)
                  goto LABEL_828;
                v756 = v752 + v755++;
                v752 = v756 & (v751 - 1);
                v754 = *(uint64_t ****)(v750 + 16 * v752);
              }
              while (v754 != v748);
              v753 = (uint64_t ****)(v750 + 16 * v752);
            }
          }
          else
          {
LABEL_828:
            v753 = (uint64_t ****)(v750 + 16 * v751);
          }
          v762 = v753[1];
          v765 = (size_t)*v762;
          v763 = (char *)(v762 + 2);
          v764 = v765;
          goto LABEL_830;
        }
        v764 = 0;
        v763 = &byte_1C871356D;
LABEL_830:
        if (v764 >= v746)
          v766 = v746;
        else
          v766 = v764;
        if (v766 && (result = (char *)memcmp(result, v763, v766), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v746 >= v764)
        {
          return result;
        }
        *v385 = v386;
        *(v855 - 1) = v387;
        v767 = *v385;
        v768 = *v384;
        v769 = *(uint64_t ****)(*v385 + 40);
        if ((*((_BYTE *)v769 + 23) & 0x10) != 0)
        {
          v770 = ***v769;
          v771 = *(_QWORD *)(v770 + 152);
          v772 = *(unsigned int *)(v770 + 168);
          if ((_DWORD)v772)
          {
            LODWORD(v773) = (v772 - 1) & ((v769 >> 4) ^ (v769 >> 9));
            v774 = (uint64_t ****)(v771 + 16 * v773);
            v775 = *v774;
            if (*v774 != v769)
            {
              v776 = 1;
              do
              {
                if (v775 == (uint64_t ***)-4096)
                  goto LABEL_845;
                v777 = v773 + v776++;
                v773 = v777 & (v772 - 1);
                v775 = *(uint64_t ****)(v771 + 16 * v773);
              }
              while (v775 != v769);
              v774 = (uint64_t ****)(v771 + 16 * v773);
            }
          }
          else
          {
LABEL_845:
            v774 = (uint64_t ****)(v771 + 16 * v772);
          }
          v778 = v774[1];
          v780 = (size_t)*v778;
          result = (char *)(v778 + 2);
          v779 = v780;
          goto LABEL_847;
        }
        v779 = 0;
        result = &byte_1C871356D;
LABEL_847:
        v781 = *(uint64_t ****)(v768 + 40);
        if ((*((_BYTE *)v781 + 23) & 0x10) != 0)
        {
          v782 = ***v781;
          v783 = *(_QWORD *)(v782 + 152);
          v784 = *(unsigned int *)(v782 + 168);
          if ((_DWORD)v784)
          {
            LODWORD(v785) = (v784 - 1) & ((v781 >> 4) ^ (v781 >> 9));
            v786 = (uint64_t ****)(v783 + 16 * v785);
            v787 = *v786;
            if (*v786 != v781)
            {
              v788 = 1;
              do
              {
                if (v787 == (uint64_t ***)-4096)
                  goto LABEL_854;
                v789 = v785 + v788++;
                v785 = v789 & (v784 - 1);
                v787 = *(uint64_t ****)(v783 + 16 * v785);
              }
              while (v787 != v781);
              v786 = (uint64_t ****)(v783 + 16 * v785);
            }
          }
          else
          {
LABEL_854:
            v786 = (uint64_t ****)(v783 + 16 * v784);
          }
          v790 = v786[1];
          v793 = (size_t)*v790;
          v791 = (char *)(v790 + 2);
          v792 = v793;
          goto LABEL_856;
        }
        v792 = 0;
        v791 = &byte_1C871356D;
LABEL_856:
        if (v792 >= v779)
          v794 = v779;
        else
          v794 = v792;
        if (v794 && (result = (char *)memcmp(result, v791, v794), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v779 >= v792)
        {
          return result;
        }
        *v384 = v767;
        *v385 = v768;
        v795 = v7[1];
        v796 = *(uint64_t ****)(v767 + 40);
        if ((*((_BYTE *)v796 + 23) & 0x10) != 0)
        {
          v797 = ***v796;
          v798 = *(_QWORD *)(v797 + 152);
          v799 = *(unsigned int *)(v797 + 168);
          if ((_DWORD)v799)
          {
            LODWORD(v800) = (v799 - 1) & ((v796 >> 4) ^ (v796 >> 9));
            v801 = (uint64_t ****)(v798 + 16 * v800);
            v802 = *v801;
            if (*v801 != v796)
            {
              v803 = 1;
              do
              {
                if (v802 == (uint64_t ***)-4096)
                  goto LABEL_871;
                v804 = v800 + v803++;
                v800 = v804 & (v799 - 1);
                v802 = *(uint64_t ****)(v798 + 16 * v800);
              }
              while (v802 != v796);
              v801 = (uint64_t ****)(v798 + 16 * v800);
            }
          }
          else
          {
LABEL_871:
            v801 = (uint64_t ****)(v798 + 16 * v799);
          }
          v805 = v801[1];
          v807 = (size_t)*v805;
          result = (char *)(v805 + 2);
          v806 = v807;
          goto LABEL_873;
        }
        v806 = 0;
        result = &byte_1C871356D;
LABEL_873:
        v808 = *(uint64_t ****)(v795 + 40);
        if ((*((_BYTE *)v808 + 23) & 0x10) != 0)
        {
          v809 = ***v808;
          v810 = *(_QWORD *)(v809 + 152);
          v811 = *(unsigned int *)(v809 + 168);
          if ((_DWORD)v811)
          {
            LODWORD(v812) = (v811 - 1) & ((v808 >> 4) ^ (v808 >> 9));
            v813 = (uint64_t ****)(v810 + 16 * v812);
            v814 = *v813;
            if (*v813 != v808)
            {
              v815 = 1;
              do
              {
                if (v814 == (uint64_t ***)-4096)
                  goto LABEL_880;
                v816 = v812 + v815++;
                v812 = v816 & (v811 - 1);
                v814 = *(uint64_t ****)(v810 + 16 * v812);
              }
              while (v814 != v808);
              v813 = (uint64_t ****)(v810 + 16 * v812);
            }
          }
          else
          {
LABEL_880:
            v813 = (uint64_t ****)(v810 + 16 * v811);
          }
          v817 = v813[1];
          v820 = (size_t)*v817;
          v818 = (char *)(v817 + 2);
          v819 = v820;
          goto LABEL_882;
        }
        v819 = 0;
        v818 = &byte_1C871356D;
LABEL_882:
        if (v819 >= v806)
          v821 = v806;
        else
          v821 = v819;
        if (v821 && (result = (char *)memcmp(result, v818, v821), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v806 >= v819)
        {
          return result;
        }
        v7[1] = v767;
        v7[2] = v795;
        v822 = *v7;
        v823 = *(uint64_t ****)(v767 + 40);
        if ((*((_BYTE *)v823 + 23) & 0x10) != 0)
        {
          v824 = ***v823;
          v825 = *(_QWORD *)(v824 + 152);
          v826 = *(unsigned int *)(v824 + 168);
          if ((_DWORD)v826)
          {
            LODWORD(v827) = (v826 - 1) & ((v823 >> 4) ^ (v823 >> 9));
            v828 = (uint64_t ****)(v825 + 16 * v827);
            v829 = *v828;
            if (*v828 != v823)
            {
              v830 = 1;
              do
              {
                if (v829 == (uint64_t ***)-4096)
                  goto LABEL_901;
                v831 = v827 + v830++;
                v827 = v831 & (v826 - 1);
                v829 = *(uint64_t ****)(v825 + 16 * v827);
              }
              while (v829 != v823);
              v828 = (uint64_t ****)(v825 + 16 * v827);
            }
          }
          else
          {
LABEL_901:
            v828 = (uint64_t ****)(v825 + 16 * v826);
          }
          v832 = v828[1];
          v834 = (size_t)*v832;
          result = (char *)(v832 + 2);
          v833 = v834;
          goto LABEL_903;
        }
        v833 = 0;
        result = &byte_1C871356D;
LABEL_903:
        v835 = *(uint64_t ****)(v822 + 40);
        if ((*((_BYTE *)v835 + 23) & 0x10) != 0)
        {
          v836 = ***v835;
          v837 = *(_QWORD *)(v836 + 152);
          v838 = *(unsigned int *)(v836 + 168);
          if ((_DWORD)v838)
          {
            LODWORD(v839) = (v838 - 1) & ((v835 >> 4) ^ (v835 >> 9));
            v840 = (uint64_t ****)(v837 + 16 * v839);
            v841 = *v840;
            if (*v840 != v835)
            {
              v842 = 1;
              do
              {
                if (v841 == (uint64_t ***)-4096)
                  goto LABEL_910;
                v843 = v839 + v842++;
                v839 = v843 & (v838 - 1);
                v841 = *(uint64_t ****)(v837 + 16 * v839);
              }
              while (v841 != v835);
              v840 = (uint64_t ****)(v837 + 16 * v839);
            }
          }
          else
          {
LABEL_910:
            v840 = (uint64_t ****)(v837 + 16 * v838);
          }
          v844 = v840[1];
          v847 = (size_t)*v844;
          v845 = (char *)(v844 + 2);
          v846 = v847;
          goto LABEL_912;
        }
        v846 = 0;
        v845 = &byte_1C871356D;
LABEL_912:
        if (v846 >= v833)
          v848 = v833;
        else
          v848 = v846;
        if (v848 && (result = (char *)memcmp(result, v845, v848), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v833 >= v846)
        {
          return result;
        }
        *v7 = v767;
        v7[1] = v822;
        return result;
      default:
        v856 = v7;
        if (v8 <= 191)
        {
          v397 = v7 + 1;
          v399 = v7 == v855 || v397 == v855;
          if ((a4 & 1) != 0)
          {
            if (v399)
              return result;
            v400 = v7;
            while (1)
            {
              v401 = v400;
              v400 = v397;
              v402 = v401[1];
              v403 = *(uint64_t ****)(v402 + 40);
              if ((*((_BYTE *)v403 + 23) & 0x10) != 0)
              {
                v404 = ***v403;
                v405 = *(_QWORD *)(v404 + 152);
                v406 = *(unsigned int *)(v404 + 168);
                if ((_DWORD)v406)
                {
                  LODWORD(v407) = (v406 - 1) & ((v403 >> 4) ^ (v403 >> 9));
                  v408 = (uint64_t ****)(v405 + 16 * v407);
                  v409 = *v408;
                  if (*v408 != v403)
                  {
                    v410 = 1;
                    do
                    {
                      if (v409 == (uint64_t ***)-4096)
                        goto LABEL_436;
                      v411 = v407 + v410++;
                      v407 = v411 & (v406 - 1);
                      v409 = *(uint64_t ****)(v405 + 16 * v407);
                    }
                    while (v409 != v403);
                    v408 = (uint64_t ****)(v405 + 16 * v407);
                  }
                }
                else
                {
LABEL_436:
                  v408 = (uint64_t ****)(v405 + 16 * v406);
                }
                v412 = v408[1];
                v414 = (unint64_t)*v412;
                result = (char *)(v412 + 2);
                v413 = v414;
              }
              else
              {
                v413 = 0;
                result = &byte_1C871356D;
              }
              v415 = *v401;
              v416 = *(uint64_t ****)(*v401 + 40);
              if ((*((_BYTE *)v416 + 23) & 0x10) != 0)
              {
                v417 = ***v416;
                v418 = *(_QWORD *)(v417 + 152);
                v419 = *(unsigned int *)(v417 + 168);
                if ((_DWORD)v419)
                {
                  LODWORD(v420) = (v419 - 1) & ((v416 >> 4) ^ (v416 >> 9));
                  v421 = (uint64_t ****)(v418 + 16 * v420);
                  v422 = *v421;
                  if (*v421 != v416)
                  {
                    v423 = 1;
                    do
                    {
                      if (v422 == (uint64_t ***)-4096)
                        goto LABEL_445;
                      v424 = v420 + v423++;
                      v420 = v424 & (v419 - 1);
                      v422 = *(uint64_t ****)(v418 + 16 * v420);
                    }
                    while (v422 != v416);
                    v421 = (uint64_t ****)(v418 + 16 * v420);
                  }
                }
                else
                {
LABEL_445:
                  v421 = (uint64_t ****)(v418 + 16 * v419);
                }
                v425 = v421[1];
                v428 = (unint64_t)*v425;
                v426 = (char *)(v425 + 2);
                v427 = v428;
              }
              else
              {
                v427 = 0;
                v426 = &byte_1C871356D;
              }
              v429 = v427 >= v413 ? v413 : v427;
              if (v429 && (result = (char *)memcmp(result, v426, v429), (_DWORD)result))
              {
                if ((result & 0x80000000) == 0)
                  goto LABEL_490;
              }
              else if (v413 >= v427)
              {
                goto LABEL_490;
              }
              v430 = v400;
              while (1)
              {
                *v430 = v415;
                if (v401 == v7)
                {
                  v430 = v7;
                  goto LABEL_489;
                }
                v430 = v401;
                v431 = *(uint64_t ****)(v402 + 40);
                if ((*((_BYTE *)v431 + 23) & 0x10) != 0)
                {
                  v432 = ***v431;
                  v433 = *(_QWORD *)(v432 + 152);
                  v434 = *(unsigned int *)(v432 + 168);
                  if ((_DWORD)v434)
                  {
                    LODWORD(v435) = (v434 - 1) & ((v431 >> 4) ^ (v431 >> 9));
                    v436 = (uint64_t ****)(v433 + 16 * v435);
                    v437 = *v436;
                    if (*v436 != v431)
                    {
                      v438 = 1;
                      do
                      {
                        if (v437 == (uint64_t ***)-4096)
                          goto LABEL_464;
                        v439 = v435 + v438++;
                        v435 = v439 & (v434 - 1);
                        v437 = *(uint64_t ****)(v433 + 16 * v435);
                      }
                      while (v437 != v431);
                      v436 = (uint64_t ****)(v433 + 16 * v435);
                    }
                  }
                  else
                  {
LABEL_464:
                    v436 = (uint64_t ****)(v433 + 16 * v434);
                  }
                  v440 = v436[1];
                  v442 = (unint64_t)*v440;
                  result = (char *)(v440 + 2);
                  v441 = v442;
                }
                else
                {
                  v441 = 0;
                  result = &byte_1C871356D;
                }
                --v401;
                v415 = *(v430 - 1);
                v443 = *(uint64_t ****)(v415 + 40);
                if ((*((_BYTE *)v443 + 23) & 0x10) != 0)
                {
                  v444 = ***v443;
                  v445 = *(_QWORD *)(v444 + 152);
                  v446 = *(unsigned int *)(v444 + 168);
                  if ((_DWORD)v446)
                  {
                    LODWORD(v447) = (v446 - 1) & ((v443 >> 4) ^ (v443 >> 9));
                    v448 = (uint64_t ****)(v445 + 16 * v447);
                    v449 = *v448;
                    if (*v448 != v443)
                    {
                      v450 = 1;
                      do
                      {
                        if (v449 == (uint64_t ***)-4096)
                          goto LABEL_473;
                        v451 = v447 + v450++;
                        v447 = v451 & (v446 - 1);
                        v449 = *(uint64_t ****)(v445 + 16 * v447);
                      }
                      while (v449 != v443);
                      v448 = (uint64_t ****)(v445 + 16 * v447);
                    }
                  }
                  else
                  {
LABEL_473:
                    v448 = (uint64_t ****)(v445 + 16 * v446);
                  }
                  v452 = v448[1];
                  v455 = (unint64_t)*v452;
                  v453 = (char *)(v452 + 2);
                  v454 = v455;
                }
                else
                {
                  v454 = 0;
                  v453 = &byte_1C871356D;
                }
                v456 = v454 >= v441 ? v441 : v454;
                if (!v456)
                  break;
                result = (char *)memcmp(result, v453, v456);
                if (!(_DWORD)result)
                  break;
                v457 = ((int)result >> 31) | 1;
LABEL_483:
                v7 = v856;
                if (v457 != -1)
                  goto LABEL_489;
              }
              if (v441 < v454)
                break;
              v7 = v856;
LABEL_489:
              *v430 = v402;
LABEL_490:
              v397 = v400 + 1;
              if (v400 + 1 == v855)
                return result;
            }
            v457 = -1;
            goto LABEL_483;
          }
          if (v399)
            return result;
          while (1)
          {
            v676 = v7;
            v7 = v397;
            v677 = v676[1];
            v678 = *(uint64_t ****)(v677 + 40);
            if ((*((_BYTE *)v678 + 23) & 0x10) != 0)
            {
              v679 = ***v678;
              v680 = *(_QWORD *)(v679 + 152);
              v681 = *(unsigned int *)(v679 + 168);
              if ((_DWORD)v681)
              {
                LODWORD(v682) = (v681 - 1) & ((v678 >> 4) ^ (v678 >> 9));
                v683 = (uint64_t ****)(v680 + 16 * v682);
                v684 = *v683;
                if (*v683 != v678)
                {
                  v685 = 1;
                  do
                  {
                    if (v684 == (uint64_t ***)-4096)
                      goto LABEL_744;
                    v686 = v682 + v685++;
                    v682 = v686 & (v681 - 1);
                    v684 = *(uint64_t ****)(v680 + 16 * v682);
                  }
                  while (v684 != v678);
                  v683 = (uint64_t ****)(v680 + 16 * v682);
                }
              }
              else
              {
LABEL_744:
                v683 = (uint64_t ****)(v680 + 16 * v681);
              }
              v687 = v683[1];
              v689 = (size_t)*v687;
              result = (char *)(v687 + 2);
              v688 = v689;
            }
            else
            {
              v688 = 0;
              result = &byte_1C871356D;
            }
            v690 = *v676;
            v691 = *(uint64_t ****)(*v676 + 40);
            if ((*((_BYTE *)v691 + 23) & 0x10) != 0)
            {
              v692 = ***v691;
              v693 = *(_QWORD *)(v692 + 152);
              v694 = *(unsigned int *)(v692 + 168);
              if ((_DWORD)v694)
              {
                LODWORD(v695) = (v694 - 1) & ((v691 >> 4) ^ (v691 >> 9));
                v696 = (uint64_t ****)(v693 + 16 * v695);
                v697 = *v696;
                if (*v696 != v691)
                {
                  v698 = 1;
                  do
                  {
                    if (v697 == (uint64_t ***)-4096)
                      goto LABEL_753;
                    v699 = v695 + v698++;
                    v695 = v699 & (v694 - 1);
                    v697 = *(uint64_t ****)(v693 + 16 * v695);
                  }
                  while (v697 != v691);
                  v696 = (uint64_t ****)(v693 + 16 * v695);
                }
              }
              else
              {
LABEL_753:
                v696 = (uint64_t ****)(v693 + 16 * v694);
              }
              v700 = v696[1];
              v703 = (size_t)*v700;
              v701 = (char *)(v700 + 2);
              v702 = v703;
            }
            else
            {
              v702 = 0;
              v701 = &byte_1C871356D;
            }
            if (v702 >= v688)
              v704 = v688;
            else
              v704 = v702;
            if (v704 && (result = (char *)memcmp(result, v701, v704), (_DWORD)result))
            {
              if ((result & 0x80000000) == 0)
                goto LABEL_795;
            }
            else if (v688 >= v702)
            {
              goto LABEL_795;
            }
            v705 = v7;
            do
            {
              *v705 = v690;
              v705 = v676;
              v706 = *(uint64_t ****)(v677 + 40);
              if ((*((_BYTE *)v706 + 23) & 0x10) != 0)
              {
                v707 = ***v706;
                v708 = *(_QWORD *)(v707 + 152);
                v709 = *(unsigned int *)(v707 + 168);
                if ((_DWORD)v709)
                {
                  LODWORD(v710) = (v709 - 1) & ((v706 >> 4) ^ (v706 >> 9));
                  v711 = (uint64_t ****)(v708 + 16 * v710);
                  v712 = *v711;
                  if (*v711 != v706)
                  {
                    v713 = 1;
                    do
                    {
                      if (v712 == (uint64_t ***)-4096)
                        goto LABEL_771;
                      v714 = v710 + v713++;
                      v710 = v714 & (v709 - 1);
                      v712 = *(uint64_t ****)(v708 + 16 * v710);
                    }
                    while (v712 != v706);
                    v711 = (uint64_t ****)(v708 + 16 * v710);
                  }
                }
                else
                {
LABEL_771:
                  v711 = (uint64_t ****)(v708 + 16 * v709);
                }
                v715 = v711[1];
                v717 = (size_t)*v715;
                result = (char *)(v715 + 2);
                v716 = v717;
              }
              else
              {
                v716 = 0;
                result = &byte_1C871356D;
              }
              --v676;
              v690 = *(v705 - 1);
              v718 = *(uint64_t ****)(v690 + 40);
              if ((*((_BYTE *)v718 + 23) & 0x10) != 0)
              {
                v719 = ***v718;
                v720 = *(_QWORD *)(v719 + 152);
                v721 = *(unsigned int *)(v719 + 168);
                if ((_DWORD)v721)
                {
                  LODWORD(v722) = (v721 - 1) & ((v718 >> 4) ^ (v718 >> 9));
                  v723 = (uint64_t ****)(v720 + 16 * v722);
                  v724 = *v723;
                  if (*v723 != v718)
                  {
                    v725 = 1;
                    do
                    {
                      if (v724 == (uint64_t ***)-4096)
                        goto LABEL_780;
                      v726 = v722 + v725++;
                      v722 = v726 & (v721 - 1);
                      v724 = *(uint64_t ****)(v720 + 16 * v722);
                    }
                    while (v724 != v718);
                    v723 = (uint64_t ****)(v720 + 16 * v722);
                  }
                }
                else
                {
LABEL_780:
                  v723 = (uint64_t ****)(v720 + 16 * v721);
                }
                v727 = v723[1];
                v730 = (size_t)*v727;
                v728 = (char *)(v727 + 2);
                v729 = v730;
              }
              else
              {
                v729 = 0;
                v728 = &byte_1C871356D;
              }
              if (v729 >= v716)
                v731 = v716;
              else
                v731 = v729;
              if (v731 && (result = (char *)memcmp(result, v728, v731), (_DWORD)result))
              {
                v732 = ((int)result >> 31) | 1;
              }
              else
              {
                if (v716 >= v729)
                  break;
                v732 = -1;
              }
            }
            while (v732 == -1);
            *v705 = v677;
LABEL_795:
            v397 = v7 + 1;
            if (v7 + 1 == v855)
              return result;
          }
        }
        if (!a3)
        {
          if (v7 == v855)
            return result;
          v458 = (unint64_t)(v9 - 2) >> 1;
          v858 = v458;
          while (1)
          {
            v459 = v458;
            if (v858 >= v458)
            {
              v460 = (2 * v458) | 1;
              v461 = &v7[v460];
              v462 = v461;
              if (2 * v458 + 2 < v9)
              {
                v463 = *(uint64_t ****)(*v461 + 40);
                if ((*((_BYTE *)v463 + 23) & 0x10) != 0)
                {
                  v464 = ***v463;
                  v465 = *(_QWORD *)(v464 + 152);
                  v466 = *(unsigned int *)(v464 + 168);
                  if ((_DWORD)v466)
                  {
                    LODWORD(v467) = (v466 - 1) & ((v463 >> 4) ^ (v463 >> 9));
                    v468 = (uint64_t ****)(v465 + 16 * v467);
                    v469 = *v468;
                    if (*v468 != v463)
                    {
                      v470 = 1;
                      do
                      {
                        if (v469 == (uint64_t ***)-4096)
                          goto LABEL_505;
                        v471 = v467 + v470++;
                        v467 = v471 & (v466 - 1);
                        v469 = *(uint64_t ****)(v465 + 16 * v467);
                      }
                      while (v469 != v463);
                      v468 = (uint64_t ****)(v465 + 16 * v467);
                    }
                  }
                  else
                  {
LABEL_505:
                    v468 = (uint64_t ****)(v465 + 16 * v466);
                  }
                  v472 = v468[1];
                  v475 = (size_t)*v472;
                  v473 = (char *)(v472 + 2);
                  v474 = v475;
                }
                else
                {
                  v474 = 0;
                  v473 = &byte_1C871356D;
                }
                v462 = v461 + 1;
                v476 = *(uint64_t ****)(v461[1] + 40);
                if ((*((_BYTE *)v476 + 23) & 0x10) != 0)
                {
                  v477 = ***v476;
                  v478 = *(_QWORD *)(v477 + 152);
                  v479 = *(unsigned int *)(v477 + 168);
                  if ((_DWORD)v479)
                  {
                    LODWORD(v480) = (v479 - 1) & ((v476 >> 4) ^ (v476 >> 9));
                    v481 = (uint64_t ****)(v478 + 16 * v480);
                    v482 = *v481;
                    if (*v481 != v476)
                    {
                      v483 = 1;
                      do
                      {
                        if (v482 == (uint64_t ***)-4096)
                          goto LABEL_514;
                        v484 = v480 + v483++;
                        v480 = v484 & (v479 - 1);
                        v482 = *(uint64_t ****)(v478 + 16 * v480);
                      }
                      while (v482 != v476);
                      v481 = (uint64_t ****)(v478 + 16 * v480);
                    }
                  }
                  else
                  {
LABEL_514:
                    v481 = (uint64_t ****)(v478 + 16 * v479);
                  }
                  v485 = v481[1];
                  v488 = (size_t)*v485;
                  v486 = (char *)(v485 + 2);
                  v487 = v488;
                }
                else
                {
                  v487 = 0;
                  v486 = &byte_1C871356D;
                }
                if (v487 >= v474)
                  v489 = v474;
                else
                  v489 = v487;
                if (v489 && (v490 = memcmp(v473, v486, v489)) != 0)
                {
                  v491 = (v490 >> 31) | 1;
                }
                else
                {
                  if (v474 < v487)
                    v491 = -1;
                  else
                    v491 = 1;
                  if (v474 == v487)
                    v491 = 0;
                }
                v7 = v856;
                if (v491 == -1)
                  v460 = 2 * v459 + 2;
                else
                  v462 = v461;
              }
              v492 = &v7[v459];
              v493 = *v462;
              v494 = *v492;
              v495 = *(uint64_t ****)(*v462 + 40);
              if ((*((_BYTE *)v495 + 23) & 0x10) != 0)
              {
                v496 = ***v495;
                v497 = *(_QWORD *)(v496 + 152);
                v498 = *(unsigned int *)(v496 + 168);
                if ((_DWORD)v498)
                {
                  LODWORD(v499) = (v498 - 1) & ((v495 >> 4) ^ (v495 >> 9));
                  v500 = (uint64_t ****)(v497 + 16 * v499);
                  v501 = *v500;
                  if (*v500 != v495)
                  {
                    v502 = 1;
                    do
                    {
                      if (v501 == (uint64_t ***)-4096)
                        goto LABEL_537;
                      v503 = v499 + v502++;
                      v499 = v503 & (v498 - 1);
                      v501 = *(uint64_t ****)(v497 + 16 * v499);
                    }
                    while (v501 != v495);
                    v500 = (uint64_t ****)(v497 + 16 * v499);
                  }
                }
                else
                {
LABEL_537:
                  v500 = (uint64_t ****)(v497 + 16 * v498);
                }
                v504 = v500[1];
                v506 = (size_t)*v504;
                result = (char *)(v504 + 2);
                v505 = v506;
              }
              else
              {
                v505 = 0;
                result = &byte_1C871356D;
              }
              v507 = *(uint64_t ****)(v494 + 40);
              if ((*((_BYTE *)v507 + 23) & 0x10) != 0)
              {
                v508 = ***v507;
                v509 = *(_QWORD *)(v508 + 152);
                v510 = *(unsigned int *)(v508 + 168);
                if ((_DWORD)v510)
                {
                  LODWORD(v511) = (v510 - 1) & ((v507 >> 4) ^ (v507 >> 9));
                  v512 = (uint64_t ****)(v509 + 16 * v511);
                  v513 = *v512;
                  if (*v512 != v507)
                  {
                    v514 = 1;
                    do
                    {
                      if (v513 == (uint64_t ***)-4096)
                        goto LABEL_546;
                      v515 = v511 + v514++;
                      v511 = v515 & (v510 - 1);
                      v513 = *(uint64_t ****)(v509 + 16 * v511);
                    }
                    while (v513 != v507);
                    v512 = (uint64_t ****)(v509 + 16 * v511);
                  }
                }
                else
                {
LABEL_546:
                  v512 = (uint64_t ****)(v509 + 16 * v510);
                }
                v516 = v512[1];
                v519 = (size_t)*v516;
                v517 = (char *)(v516 + 2);
                v518 = v519;
              }
              else
              {
                v518 = 0;
                v517 = &byte_1C871356D;
              }
              if (v518 >= v505)
                v520 = v505;
              else
                v520 = v518;
              if (v520 && (result = (char *)memcmp(result, v517, v520), (_DWORD)result))
              {
                v7 = v856;
                if ((result & 0x80000000) == 0)
                  goto LABEL_557;
              }
              else
              {
                v521 = v505 >= v518;
                v7 = v856;
                if (v521)
                {
                  do
                  {
LABEL_557:
                    v522 = v462;
                    *v492 = v493;
                    if (v858 < v460)
                      break;
                    v523 = (2 * v460) | 1;
                    v462 = &v856[v523];
                    v524 = 2 * v460 + 2;
                    if (v524 >= v9)
                    {
                      v460 = (2 * v460) | 1;
                    }
                    else
                    {
                      v525 = *(uint64_t ****)(*v462 + 40);
                      if ((*((_BYTE *)v525 + 23) & 0x10) != 0)
                      {
                        v526 = ***v525;
                        v527 = *(_QWORD *)(v526 + 152);
                        v528 = *(unsigned int *)(v526 + 168);
                        if ((_DWORD)v528)
                        {
                          LODWORD(v529) = (v528 - 1) & ((v525 >> 4) ^ (v525 >> 9));
                          v530 = (uint64_t ****)(v527 + 16 * v529);
                          v531 = *v530;
                          if (*v530 != v525)
                          {
                            v532 = 1;
                            do
                            {
                              if (v531 == (uint64_t ***)-4096)
                                goto LABEL_567;
                              v533 = v529 + v532++;
                              v529 = v533 & (v528 - 1);
                              v531 = *(uint64_t ****)(v527 + 16 * v529);
                            }
                            while (v531 != v525);
                            v530 = (uint64_t ****)(v527 + 16 * v529);
                          }
                        }
                        else
                        {
LABEL_567:
                          v530 = (uint64_t ****)(v527 + 16 * v528);
                        }
                        v534 = v530[1];
                        v537 = (unint64_t)*v534;
                        v535 = (char *)(v534 + 2);
                        v536 = v537;
                      }
                      else
                      {
                        v536 = 0;
                        v535 = &byte_1C871356D;
                      }
                      v538 = v462[1];
                      ++v462;
                      v539 = *(uint64_t ****)(v538 + 40);
                      if ((*((_BYTE *)v539 + 23) & 0x10) != 0)
                      {
                        v540 = ***v539;
                        v541 = *(_QWORD *)(v540 + 152);
                        v542 = *(unsigned int *)(v540 + 168);
                        if ((_DWORD)v542)
                        {
                          LODWORD(v543) = (v542 - 1) & ((v539 >> 4) ^ (v539 >> 9));
                          v544 = (uint64_t ****)(v541 + 16 * v543);
                          v545 = *v544;
                          if (*v544 != v539)
                          {
                            v546 = 1;
                            do
                            {
                              if (v545 == (uint64_t ***)-4096)
                                goto LABEL_576;
                              v547 = v543 + v546++;
                              v543 = v547 & (v542 - 1);
                              v545 = *(uint64_t ****)(v541 + 16 * v543);
                            }
                            while (v545 != v539);
                            v544 = (uint64_t ****)(v541 + 16 * v543);
                          }
                        }
                        else
                        {
LABEL_576:
                          v544 = (uint64_t ****)(v541 + 16 * v542);
                        }
                        v548 = v544[1];
                        v551 = (unint64_t)*v548;
                        v549 = (char *)(v548 + 2);
                        v550 = v551;
                      }
                      else
                      {
                        v550 = 0;
                        v549 = &byte_1C871356D;
                      }
                      v552 = v550 >= v536 ? v536 : v550;
                      if (v552 && (v553 = memcmp(v535, v549, v552)) != 0)
                      {
                        v554 = (v553 >> 31) | 1;
                      }
                      else
                      {
                        if (v536 < v550)
                          v554 = -1;
                        else
                          v554 = 1;
                        if (v536 == v550)
                          v554 = 0;
                      }
                      if (v554 == -1)
                      {
                        v460 = v524;
                      }
                      else
                      {
                        v462 = &v856[v523];
                        v460 = v523;
                      }
                    }
                    v493 = *v462;
                    v555 = *(uint64_t ****)(*v462 + 40);
                    if ((*((_BYTE *)v555 + 23) & 0x10) != 0)
                    {
                      v556 = ***v555;
                      v557 = *(_QWORD *)(v556 + 152);
                      v558 = *(unsigned int *)(v556 + 168);
                      if ((_DWORD)v558)
                      {
                        LODWORD(v559) = (v558 - 1) & ((v555 >> 4) ^ (v555 >> 9));
                        v560 = (uint64_t ****)(v557 + 16 * v559);
                        v561 = *v560;
                        if (*v560 != v555)
                        {
                          v562 = 1;
                          do
                          {
                            if (v561 == (uint64_t ***)-4096)
                              goto LABEL_599;
                            v563 = v559 + v562++;
                            v559 = v563 & (v558 - 1);
                            v561 = *(uint64_t ****)(v557 + 16 * v559);
                          }
                          while (v561 != v555);
                          v560 = (uint64_t ****)(v557 + 16 * v559);
                        }
                      }
                      else
                      {
LABEL_599:
                        v560 = (uint64_t ****)(v557 + 16 * v558);
                      }
                      v564 = v560[1];
                      v566 = (unint64_t)*v564;
                      result = (char *)(v564 + 2);
                      v565 = v566;
                    }
                    else
                    {
                      v565 = 0;
                      result = &byte_1C871356D;
                    }
                    v567 = *(uint64_t ****)(v494 + 40);
                    if ((*((_BYTE *)v567 + 23) & 0x10) != 0)
                    {
                      v568 = ***v567;
                      v569 = *(_QWORD *)(v568 + 152);
                      v570 = *(unsigned int *)(v568 + 168);
                      if ((_DWORD)v570)
                      {
                        LODWORD(v571) = (v570 - 1) & ((v567 >> 4) ^ (v567 >> 9));
                        v572 = (uint64_t ****)(v569 + 16 * v571);
                        v573 = *v572;
                        if (*v572 != v567)
                        {
                          v574 = 1;
                          do
                          {
                            if (v573 == (uint64_t ***)-4096)
                              goto LABEL_608;
                            v575 = v571 + v574++;
                            v571 = v575 & (v570 - 1);
                            v573 = *(uint64_t ****)(v569 + 16 * v571);
                          }
                          while (v573 != v567);
                          v572 = (uint64_t ****)(v569 + 16 * v571);
                        }
                      }
                      else
                      {
LABEL_608:
                        v572 = (uint64_t ****)(v569 + 16 * v570);
                      }
                      v576 = v572[1];
                      v579 = (unint64_t)*v576;
                      v577 = (char *)(v576 + 2);
                      v578 = v579;
                    }
                    else
                    {
                      v578 = 0;
                      v577 = &byte_1C871356D;
                    }
                    v580 = v578 >= v565 ? v565 : v578;
                    if (v580 && (result = (char *)memcmp(result, v577, v580), (_DWORD)result))
                    {
                      v581 = ((int)result >> 31) | 1;
                    }
                    else if (v565 == v578)
                    {
                      v581 = 0;
                    }
                    else
                    {
                      if (v565 < v578)
                        break;
                      v581 = 1;
                    }
                    v492 = v522;
                  }
                  while (v581 != -1);
                  *v522 = v494;
                  v7 = v856;
                }
              }
            }
            v458 = v459 - 1;
            if (!v459)
            {
              v582 = v855;
              while (1)
              {
                v583 = v582;
                v584 = 0;
                v859 = *v7;
                v585 = v7;
                do
                {
                  v586 = &v585[v584 + 1];
                  v587 = (2 * v584) | 1;
                  v588 = 2 * v584 + 2;
                  if (v588 < v9)
                  {
                    v589 = *(uint64_t ****)(*v586 + 40);
                    if ((*((_BYTE *)v589 + 23) & 0x10) != 0)
                    {
                      v590 = ***v589;
                      v591 = *(_QWORD *)(v590 + 152);
                      v592 = *(unsigned int *)(v590 + 168);
                      if ((_DWORD)v592)
                      {
                        LODWORD(v593) = (v592 - 1) & ((v589 >> 4) ^ (v589 >> 9));
                        v594 = (uint64_t ****)(v591 + 16 * v593);
                        v595 = *v594;
                        if (*v594 != v589)
                        {
                          v596 = 1;
                          do
                          {
                            if (v595 == (uint64_t ***)-4096)
                              goto LABEL_642;
                            v597 = v593 + v596++;
                            v593 = v597 & (v592 - 1);
                            v595 = *(uint64_t ****)(v591 + 16 * v593);
                          }
                          while (v595 != v589);
                          v594 = (uint64_t ****)(v591 + 16 * v593);
                        }
                      }
                      else
                      {
LABEL_642:
                        v594 = (uint64_t ****)(v591 + 16 * v592);
                      }
                      v598 = v594[1];
                      v600 = (size_t)*v598;
                      result = (char *)(v598 + 2);
                      v599 = v600;
                    }
                    else
                    {
                      v599 = 0;
                      result = &byte_1C871356D;
                    }
                    v601 = *(uint64_t ****)(v586[1] + 40);
                    if ((*((_BYTE *)v601 + 23) & 0x10) != 0)
                    {
                      v602 = ***v601;
                      v603 = *(_QWORD *)(v602 + 152);
                      v604 = *(unsigned int *)(v602 + 168);
                      if ((_DWORD)v604)
                      {
                        LODWORD(v605) = (v604 - 1) & ((v601 >> 4) ^ (v601 >> 9));
                        v606 = (uint64_t ****)(v603 + 16 * v605);
                        v607 = *v606;
                        if (*v606 != v601)
                        {
                          v608 = 1;
                          do
                          {
                            if (v607 == (uint64_t ***)-4096)
                              goto LABEL_651;
                            v609 = v605 + v608++;
                            v605 = v609 & (v604 - 1);
                            v607 = *(uint64_t ****)(v603 + 16 * v605);
                          }
                          while (v607 != v601);
                          v606 = (uint64_t ****)(v603 + 16 * v605);
                        }
                      }
                      else
                      {
LABEL_651:
                        v606 = (uint64_t ****)(v603 + 16 * v604);
                      }
                      v610 = v606[1];
                      v613 = (size_t)*v610;
                      v611 = (char *)(v610 + 2);
                      v612 = v613;
                    }
                    else
                    {
                      v612 = 0;
                      v611 = &byte_1C871356D;
                    }
                    if (v612 >= v599)
                      v614 = v599;
                    else
                      v614 = v612;
                    if (v614 && (result = (char *)memcmp(result, v611, v614), (_DWORD)result))
                    {
                      v615 = ((int)result >> 31) | 1;
                    }
                    else
                    {
                      if (v599 < v612)
                        v615 = -1;
                      else
                        v615 = 1;
                      if (v599 == v612)
                        v615 = 0;
                    }
                    if (v615 == -1)
                    {
                      ++v586;
                      v587 = v588;
                    }
                  }
                  *v585 = *v586;
                  v585 = v586;
                  v584 = v587;
                }
                while (v587 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
                --v582;
                if (v586 == v583 - 1)
                {
                  *v586 = v859;
                }
                else
                {
                  *v586 = *v582;
                  *v582 = v859;
                  v616 = (char *)v586 - (char *)v856 + 8;
                  if (v616 >= 9)
                  {
                    v617 = (((unint64_t)v616 >> 3) - 2) >> 1;
                    v618 = &v856[v617];
                    v619 = *v618;
                    v620 = *(uint64_t ****)(*v618 + 40);
                    if ((*((_BYTE *)v620 + 23) & 0x10) != 0)
                    {
                      v621 = ***v620;
                      v622 = *(_QWORD *)(v621 + 152);
                      v623 = *(unsigned int *)(v621 + 168);
                      if ((_DWORD)v623)
                      {
                        LODWORD(v624) = (v623 - 1) & ((v620 >> 4) ^ (v620 >> 9));
                        v625 = (uint64_t ****)(v622 + 16 * v624);
                        v626 = *v625;
                        if (*v625 != v620)
                        {
                          v627 = 1;
                          do
                          {
                            if (v626 == (uint64_t ***)-4096)
                              goto LABEL_680;
                            v628 = v624 + v627++;
                            v624 = v628 & (v623 - 1);
                            v626 = *(uint64_t ****)(v622 + 16 * v624);
                          }
                          while (v626 != v620);
                          v625 = (uint64_t ****)(v622 + 16 * v624);
                        }
                      }
                      else
                      {
LABEL_680:
                        v625 = (uint64_t ****)(v622 + 16 * v623);
                      }
                      v629 = v625[1];
                      v631 = (size_t)*v629;
                      result = (char *)(v629 + 2);
                      v630 = v631;
                    }
                    else
                    {
                      v630 = 0;
                      result = &byte_1C871356D;
                    }
                    v632 = *v586;
                    v633 = *(uint64_t ****)(*v586 + 40);
                    if ((*((_BYTE *)v633 + 23) & 0x10) != 0)
                    {
                      v634 = ***v633;
                      v635 = *(_QWORD *)(v634 + 152);
                      v636 = *(unsigned int *)(v634 + 168);
                      if ((_DWORD)v636)
                      {
                        LODWORD(v637) = (v636 - 1) & ((v633 >> 4) ^ (v633 >> 9));
                        v638 = (uint64_t ****)(v635 + 16 * v637);
                        v639 = *v638;
                        if (*v638 != v633)
                        {
                          v640 = 1;
                          do
                          {
                            if (v639 == (uint64_t ***)-4096)
                              goto LABEL_689;
                            v641 = v637 + v640++;
                            v637 = v641 & (v636 - 1);
                            v639 = *(uint64_t ****)(v635 + 16 * v637);
                          }
                          while (v639 != v633);
                          v638 = (uint64_t ****)(v635 + 16 * v637);
                        }
                      }
                      else
                      {
LABEL_689:
                        v638 = (uint64_t ****)(v635 + 16 * v636);
                      }
                      v642 = v638[1];
                      v645 = (size_t)*v642;
                      v643 = (char *)(v642 + 2);
                      v644 = v645;
                    }
                    else
                    {
                      v644 = 0;
                      v643 = &byte_1C871356D;
                    }
                    if (v644 >= v630)
                      v646 = v630;
                    else
                      v646 = v644;
                    if (v646 && (result = (char *)memcmp(result, v643, v646), (_DWORD)result))
                    {
                      if ((result & 0x80000000) != 0)
                      {
                        do
                        {
LABEL_699:
                          v647 = v618;
                          *v586 = v619;
                          if (!v617)
                            break;
                          v617 = (v617 - 1) >> 1;
                          v618 = &v856[v617];
                          v619 = *v618;
                          v648 = *(uint64_t ****)(*v618 + 40);
                          if ((*((_BYTE *)v648 + 23) & 0x10) != 0)
                          {
                            v649 = ***v648;
                            v650 = *(_QWORD *)(v649 + 152);
                            v651 = *(unsigned int *)(v649 + 168);
                            if ((_DWORD)v651)
                            {
                              LODWORD(v652) = (v651 - 1) & ((v648 >> 4) ^ (v648 >> 9));
                              v653 = (uint64_t ****)(v650 + 16 * v652);
                              v654 = *v653;
                              if (*v653 != v648)
                              {
                                v655 = 1;
                                do
                                {
                                  if (v654 == (uint64_t ***)-4096)
                                    goto LABEL_707;
                                  v656 = v652 + v655++;
                                  v652 = v656 & (v651 - 1);
                                  v654 = *(uint64_t ****)(v650 + 16 * v652);
                                }
                                while (v654 != v648);
                                v653 = (uint64_t ****)(v650 + 16 * v652);
                              }
                            }
                            else
                            {
LABEL_707:
                              v653 = (uint64_t ****)(v650 + 16 * v651);
                            }
                            v657 = v653[1];
                            v659 = (unint64_t)*v657;
                            result = (char *)(v657 + 2);
                            v658 = v659;
                          }
                          else
                          {
                            v658 = 0;
                            result = &byte_1C871356D;
                          }
                          v660 = *(uint64_t ****)(v632 + 40);
                          if ((*((_BYTE *)v660 + 23) & 0x10) != 0)
                          {
                            v661 = ***v660;
                            v662 = *(_QWORD *)(v661 + 152);
                            v663 = *(unsigned int *)(v661 + 168);
                            if ((_DWORD)v663)
                            {
                              LODWORD(v664) = (v663 - 1) & ((v660 >> 4) ^ (v660 >> 9));
                              v665 = (uint64_t ****)(v662 + 16 * v664);
                              v666 = *v665;
                              if (*v665 != v660)
                              {
                                v667 = 1;
                                do
                                {
                                  if (v666 == (uint64_t ***)-4096)
                                    goto LABEL_716;
                                  v668 = v664 + v667++;
                                  v664 = v668 & (v663 - 1);
                                  v666 = *(uint64_t ****)(v662 + 16 * v664);
                                }
                                while (v666 != v660);
                                v665 = (uint64_t ****)(v662 + 16 * v664);
                              }
                            }
                            else
                            {
LABEL_716:
                              v665 = (uint64_t ****)(v662 + 16 * v663);
                            }
                            v669 = v665[1];
                            v672 = (unint64_t)*v669;
                            v670 = (char *)(v669 + 2);
                            v671 = v672;
                          }
                          else
                          {
                            v671 = 0;
                            v670 = &byte_1C871356D;
                          }
                          v673 = v671 >= v658 ? v658 : v671;
                          if (v673 && (result = (char *)memcmp(result, v670, v673), (_DWORD)result))
                          {
                            v674 = ((int)result >> 31) | 1;
                          }
                          else
                          {
                            if (v658 >= v671)
                              break;
                            v674 = -1;
                          }
                          v586 = v647;
                        }
                        while (v674 == -1);
                        *v647 = v632;
                      }
                    }
                    else if (v630 < v644)
                    {
                      goto LABEL_699;
                    }
                  }
                }
                v675 = v9-- <= 2;
                v7 = v856;
                if (v675)
                  return result;
              }
            }
          }
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = &v7[(unint64_t)v9 >> 1];
        if ((unint64_t)v8 < 0x401)
        {
          sub_1C5BEE218(v11, v7, v851);
        }
        else
        {
          sub_1C5BEE218(v7, v11, v851);
          sub_1C5BEE218(v7 + 1, v11 - 1, v850);
          sub_1C5BEE218(v7 + 2, &v7[v10 + 1], v849);
          sub_1C5BEE218(v11 - 1, v11, &v7[v10 + 1]);
          v12 = *v7;
          *v7 = *v11;
          *v11 = v12;
        }
        v13 = *v7;
        v854 = a3 - 1;
        v857 = *v7;
        if ((a4 & 1) == 0)
        {
          v16 = *(uint64_t ****)(*(v7 - 1) + 40);
          if ((*((_BYTE *)v16 + 23) & 0x10) != 0)
          {
            v17 = ***v16;
            v18 = *(_QWORD *)(v17 + 152);
            v19 = *(unsigned int *)(v17 + 168);
            if ((_DWORD)v19)
            {
              LODWORD(v20) = (v19 - 1) & ((v16 >> 4) ^ (v16 >> 9));
              v21 = (uint64_t ****)(v18 + 16 * v20);
              v22 = *v21;
              if (*v21 == v16)
              {
LABEL_19:
                v25 = v21[1];
                v28 = (size_t)*v25;
                v26 = (char *)(v25 + 2);
                v27 = v28;
                goto LABEL_20;
              }
              v23 = 1;
              while (v22 != (uint64_t ***)-4096)
              {
                v24 = v20 + v23++;
                v20 = v24 & (v19 - 1);
                v22 = *(uint64_t ****)(v18 + 16 * v20);
                if (v22 == v16)
                {
                  v21 = (uint64_t ****)(v18 + 16 * v20);
                  goto LABEL_19;
                }
              }
            }
            v21 = (uint64_t ****)(v18 + 16 * v19);
            goto LABEL_19;
          }
          v27 = 0;
          v26 = &byte_1C871356D;
LABEL_20:
          v14 = *(uint64_t ****)(v13 + 40);
          v29 = *((_DWORD *)v14 + 5);
          v30 = v14 >> 4;
          if ((v29 & 0x10000000) != 0)
          {
            v31 = ***v14;
            v32 = *(_QWORD *)(v31 + 152);
            v33 = *(unsigned int *)(v31 + 168);
            if ((_DWORD)v33)
            {
              LODWORD(v34) = (v33 - 1) & (v30 ^ (v14 >> 9));
              v35 = (uint64_t ****)(v32 + 16 * v34);
              v36 = *v35;
              if (*v35 == v14)
              {
LABEL_28:
                v39 = v35[1];
                v42 = (size_t)*v39;
                v40 = (char *)(v39 + 2);
                v41 = v42;
                goto LABEL_29;
              }
              v37 = 1;
              while (v36 != (uint64_t ***)-4096)
              {
                v38 = v34 + v37++;
                v34 = v38 & (v33 - 1);
                v36 = *(uint64_t ****)(v32 + 16 * v34);
                if (v36 == v14)
                {
                  v35 = (uint64_t ****)(v32 + 16 * v34);
                  goto LABEL_28;
                }
              }
            }
            v35 = (uint64_t ****)(v32 + 16 * v33);
            goto LABEL_28;
          }
          v41 = 0;
          v40 = &byte_1C871356D;
LABEL_29:
          v15 = v29 & 0x10000000;
          if (v41 >= v27)
            v43 = v27;
          else
            v43 = v41;
          if (v43 && (v44 = memcmp(v26, v40, v43)) != 0)
          {
            if (v44 < 0)
              goto LABEL_43;
          }
          else if (v27 < v41)
          {
            goto LABEL_43;
          }
          if (v15)
          {
            v45 = ***v14;
            v46 = *(_QWORD *)(v45 + 152);
            v47 = *(unsigned int *)(v45 + 168);
            if (!(_DWORD)v47)
              goto LABEL_211;
            LODWORD(v48) = (v47 - 1) & (v30 ^ (v14 >> 9));
            v49 = (uint64_t ****)(v46 + 16 * v48);
            v50 = *v49;
            if (*v49 != v14)
            {
              v51 = 1;
              while (v50 != (uint64_t ***)-4096)
              {
                v52 = v48 + v51++;
                v48 = v52 & (v47 - 1);
                v50 = *(uint64_t ****)(v46 + 16 * v48);
                if (v50 == v14)
                {
                  v49 = (uint64_t ****)(v46 + 16 * v48);
                  goto LABEL_212;
                }
              }
LABEL_211:
              v49 = (uint64_t ****)(v46 + 16 * v47);
            }
LABEL_212:
            v210 = v49[1];
            v212 = (size_t)*v210;
            result = (char *)(v210 + 2);
            v211 = v212;
            goto LABEL_213;
          }
          v211 = 0;
          result = &byte_1C871356D;
LABEL_213:
          v213 = *(uint64_t ****)(*v851 + 40);
          if ((*((_BYTE *)v213 + 23) & 0x10) != 0)
          {
            v214 = ***v213;
            v215 = *(_QWORD *)(v214 + 152);
            v216 = *(unsigned int *)(v214 + 168);
            if ((_DWORD)v216)
            {
              LODWORD(v217) = (v216 - 1) & ((v213 >> 4) ^ (v213 >> 9));
              v218 = (uint64_t ****)(v215 + 16 * v217);
              v219 = *v218;
              if (*v218 == v213)
              {
LABEL_221:
                v222 = v218[1];
                v225 = (size_t)*v222;
                v223 = (char *)(v222 + 2);
                v224 = v225;
                goto LABEL_222;
              }
              v220 = 1;
              while (v219 != (uint64_t ***)-4096)
              {
                v221 = v217 + v220++;
                v217 = v221 & (v216 - 1);
                v219 = *(uint64_t ****)(v215 + 16 * v217);
                if (v219 == v213)
                {
                  v218 = (uint64_t ****)(v215 + 16 * v217);
                  goto LABEL_221;
                }
              }
            }
            v218 = (uint64_t ****)(v215 + 16 * v216);
            goto LABEL_221;
          }
          v224 = 0;
          v223 = &byte_1C871356D;
LABEL_222:
          if (v224 >= v211)
            v226 = v211;
          else
            v226 = v224;
          if (v226)
          {
            result = (char *)memcmp(result, v223, v226);
            if ((_DWORD)result)
            {
              if ((result & 0x80000000) == 0)
                goto LABEL_228;
              goto LABEL_263;
            }
          }
          if (v211 >= v224)
          {
LABEL_228:
            v6 = v7;
            while (1)
            {
              if (++v6 >= v855)
                goto LABEL_296;
              if (v15)
                break;
              v236 = 0;
              result = &byte_1C871356D;
LABEL_239:
              v238 = *(uint64_t ****)(*v6 + 40);
              if ((*((_BYTE *)v238 + 23) & 0x10) == 0)
              {
                v249 = 0;
                v248 = &byte_1C871356D;
                goto LABEL_248;
              }
              v239 = ***v238;
              v240 = *(_QWORD *)(v239 + 152);
              v241 = *(unsigned int *)(v239 + 168);
              if (!(_DWORD)v241)
                goto LABEL_246;
              LODWORD(v242) = (v241 - 1) & ((v238 >> 4) ^ (v238 >> 9));
              v243 = (uint64_t ****)(v240 + 16 * v242);
              v244 = *v243;
              if (*v243 != v238)
              {
                v245 = 1;
                while (v244 != (uint64_t ***)-4096)
                {
                  v246 = v242 + v245++;
                  v242 = v246 & (v241 - 1);
                  v244 = *(uint64_t ****)(v240 + 16 * v242);
                  if (v244 == v238)
                  {
                    v243 = (uint64_t ****)(v240 + 16 * v242);
                    goto LABEL_247;
                  }
                }
LABEL_246:
                v243 = (uint64_t ****)(v240 + 16 * v241);
              }
LABEL_247:
              v247 = v243[1];
              v250 = (size_t)*v247;
              v248 = (char *)(v247 + 2);
              v249 = v250;
LABEL_248:
              if (v249 >= v236)
                v251 = v236;
              else
                v251 = v249;
              if (v251 && (result = (char *)memcmp(result, v248, v251), (_DWORD)result))
              {
                v252 = ((int)result >> 31) | 1;
              }
              else if (v236 == v249)
              {
                v252 = 0;
              }
              else
              {
                if (v236 < v249)
                  goto LABEL_296;
                v252 = 1;
              }
              if (v252 == -1)
                goto LABEL_296;
            }
            v227 = ***v14;
            v228 = *(_QWORD *)(v227 + 152);
            v229 = *(unsigned int *)(v227 + 168);
            if ((_DWORD)v229)
            {
              LODWORD(v230) = (v229 - 1) & (v30 ^ (v14 >> 9));
              v231 = (uint64_t ****)(v228 + 16 * v230);
              v232 = *v231;
              if (*v231 != v14)
              {
                v233 = 1;
                while (v232 != (uint64_t ***)-4096)
                {
                  v234 = v230 + v233++;
                  v230 = v234 & (v229 - 1);
                  v232 = *(uint64_t ****)(v228 + 16 * v230);
                  if (v232 == v14)
                  {
                    v231 = (uint64_t ****)(v228 + 16 * v230);
                    goto LABEL_238;
                  }
                }
                goto LABEL_237;
              }
            }
            else
            {
LABEL_237:
              v231 = (uint64_t ****)(v228 + 16 * v229);
            }
LABEL_238:
            v235 = v231[1];
            v237 = (size_t)*v235;
            result = (char *)(v235 + 2);
            v236 = v237;
            goto LABEL_239;
          }
LABEL_263:
          v6 = v7;
          do
          {
            if (v15)
            {
              v253 = ***v14;
              v254 = *(_QWORD *)(v253 + 152);
              v255 = *(unsigned int *)(v253 + 168);
              if ((_DWORD)v255)
              {
                LODWORD(v256) = (v255 - 1) & (v30 ^ (v14 >> 9));
                v257 = (uint64_t ****)(v254 + 16 * v256);
                v258 = *v257;
                if (*v257 == v14)
                {
LABEL_272:
                  v261 = v257[1];
                  v263 = (size_t)*v261;
                  result = (char *)(v261 + 2);
                  v262 = v263;
                  goto LABEL_273;
                }
                v259 = 1;
                while (v258 != (uint64_t ***)-4096)
                {
                  v260 = v256 + v259++;
                  v256 = v260 & (v255 - 1);
                  v258 = *(uint64_t ****)(v254 + 16 * v256);
                  if (v258 == v14)
                  {
                    v257 = (uint64_t ****)(v254 + 16 * v256);
                    goto LABEL_272;
                  }
                }
              }
              v257 = (uint64_t ****)(v254 + 16 * v255);
              goto LABEL_272;
            }
            v262 = 0;
            result = &byte_1C871356D;
LABEL_273:
            v264 = v6[1];
            ++v6;
            v265 = *(uint64_t ****)(v264 + 40);
            if ((*((_BYTE *)v265 + 23) & 0x10) != 0)
            {
              v266 = ***v265;
              v267 = *(_QWORD *)(v266 + 152);
              v268 = *(unsigned int *)(v266 + 168);
              if ((_DWORD)v268)
              {
                LODWORD(v269) = (v268 - 1) & ((v265 >> 4) ^ (v265 >> 9));
                v270 = (uint64_t ****)(v267 + 16 * v269);
                v271 = *v270;
                if (*v270 == v265)
                {
LABEL_281:
                  v274 = v270[1];
                  v277 = (size_t)*v274;
                  v275 = (char *)(v274 + 2);
                  v276 = v277;
                  goto LABEL_282;
                }
                v272 = 1;
                while (v271 != (uint64_t ***)-4096)
                {
                  v273 = v269 + v272++;
                  v269 = v273 & (v268 - 1);
                  v271 = *(uint64_t ****)(v267 + 16 * v269);
                  if (v271 == v265)
                  {
                    v270 = (uint64_t ****)(v267 + 16 * v269);
                    goto LABEL_281;
                  }
                }
              }
              v270 = (uint64_t ****)(v267 + 16 * v268);
              goto LABEL_281;
            }
            v276 = 0;
            v275 = &byte_1C871356D;
LABEL_282:
            if (v276 >= v262)
              v278 = v262;
            else
              v278 = v276;
            if (v278 && (result = (char *)memcmp(result, v275, v278), (_DWORD)result))
            {
              v279 = ((int)result >> 31) | 1;
            }
            else if (v262 == v276)
            {
              v279 = 0;
            }
            else
            {
              if (v262 < v276)
                break;
              v279 = 1;
            }
          }
          while (v279 != -1);
LABEL_296:
          v280 = v855;
          if (v6 < v855)
          {
            v281 = v30 ^ (v14 >> 9);
            v280 = v855;
            while (!v15)
            {
              v291 = 0;
              result = &byte_1C871356D;
LABEL_307:
              v293 = *--v280;
              v294 = *(uint64_t ****)(v293 + 40);
              if ((*((_BYTE *)v294 + 23) & 0x10) == 0)
              {
                v305 = 0;
                v304 = &byte_1C871356D;
                goto LABEL_316;
              }
              v295 = ***v294;
              v296 = *(_QWORD *)(v295 + 152);
              v297 = *(unsigned int *)(v295 + 168);
              if (!(_DWORD)v297)
                goto LABEL_314;
              LODWORD(v298) = (v297 - 1) & ((v294 >> 4) ^ (v294 >> 9));
              v299 = (uint64_t ****)(v296 + 16 * v298);
              v300 = *v299;
              if (*v299 != v294)
              {
                v301 = 1;
                while (v300 != (uint64_t ***)-4096)
                {
                  v302 = v298 + v301++;
                  v298 = v302 & (v297 - 1);
                  v300 = *(uint64_t ****)(v296 + 16 * v298);
                  if (v300 == v294)
                  {
                    v299 = (uint64_t ****)(v296 + 16 * v298);
                    goto LABEL_315;
                  }
                }
LABEL_314:
                v299 = (uint64_t ****)(v296 + 16 * v297);
              }
LABEL_315:
              v303 = v299[1];
              v306 = (size_t)*v303;
              v304 = (char *)(v303 + 2);
              v305 = v306;
LABEL_316:
              if (v305 >= v291)
                v307 = v291;
              else
                v307 = v305;
              if (v307 && (result = (char *)memcmp(result, v304, v307), (_DWORD)result))
              {
                v308 = ((int)result >> 31) | 1;
              }
              else
              {
                if (v291 >= v305)
                  goto LABEL_328;
                v308 = -1;
              }
              if (v308 != -1)
                goto LABEL_328;
            }
            v282 = ***v14;
            v283 = *(_QWORD *)(v282 + 152);
            v284 = *(unsigned int *)(v282 + 168);
            if ((_DWORD)v284)
            {
              LODWORD(v285) = (v284 - 1) & v281;
              v286 = (uint64_t ****)(v283 + 16 * v285);
              v287 = *v286;
              if (*v286 != v14)
              {
                v288 = 1;
                while (v287 != (uint64_t ***)-4096)
                {
                  v289 = v285 + v288++;
                  v285 = v289 & (v284 - 1);
                  v287 = *(uint64_t ****)(v283 + 16 * v285);
                  if (v287 == v14)
                  {
                    v286 = (uint64_t ****)(v283 + 16 * v285);
                    goto LABEL_306;
                  }
                }
                goto LABEL_305;
              }
            }
            else
            {
LABEL_305:
              v286 = (uint64_t ****)(v283 + 16 * v284);
            }
LABEL_306:
            v290 = v286[1];
            v292 = (size_t)*v290;
            result = (char *)(v290 + 2);
            v291 = v292;
            goto LABEL_307;
          }
LABEL_328:
          if (v6 >= v280)
          {
            v311 = v857;
            goto LABEL_395;
          }
          v309 = *v6;
          v310 = *v280;
          v311 = v857;
          while (2)
          {
            *v6 = v310;
            *v280 = v309;
            v312 = v311;
            v313 = *(uint64_t ****)(v311 + 40);
            v314 = *((_DWORD *)v313 + 5);
            v315 = (v313 >> 4) ^ (v313 >> 9);
            while (2)
            {
              v316 = v6[1];
              ++v6;
              v309 = v316;
              if ((v314 & 0x10000000) != 0)
              {
                v317 = ***v313;
                v318 = *(_QWORD *)(v317 + 152);
                v319 = *(unsigned int *)(v317 + 168);
                if (!(_DWORD)v319)
                  goto LABEL_338;
                LODWORD(v320) = (v319 - 1) & v315;
                v321 = (uint64_t ****)(v318 + 16 * v320);
                v322 = *v321;
                if (*v321 != v313)
                {
                  v323 = 1;
                  while (v322 != (uint64_t ***)-4096)
                  {
                    v324 = v320 + v323++;
                    v320 = v324 & (v319 - 1);
                    v322 = *(uint64_t ****)(v318 + 16 * v320);
                    if (v322 == v313)
                    {
                      v321 = (uint64_t ****)(v318 + 16 * v320);
                      goto LABEL_339;
                    }
                  }
LABEL_338:
                  v321 = (uint64_t ****)(v318 + 16 * v319);
                }
LABEL_339:
                v325 = v321[1];
                v328 = (size_t)*v325;
                v326 = (char *)(v325 + 2);
                v327 = v328;
              }
              else
              {
                v327 = 0;
                v326 = &byte_1C871356D;
              }
              v329 = *(uint64_t ****)(v309 + 40);
              if ((*((_BYTE *)v329 + 23) & 0x10) != 0)
              {
                v330 = ***v329;
                v331 = *(_QWORD *)(v330 + 152);
                v332 = *(unsigned int *)(v330 + 168);
                if (!(_DWORD)v332)
                  goto LABEL_347;
                LODWORD(v333) = (v332 - 1) & ((v329 >> 4) ^ (v329 >> 9));
                v334 = (uint64_t ****)(v331 + 16 * v333);
                v335 = *v334;
                if (*v334 != v329)
                {
                  v336 = 1;
                  while (v335 != (uint64_t ***)-4096)
                  {
                    v337 = v333 + v336++;
                    v333 = v337 & (v332 - 1);
                    v335 = *(uint64_t ****)(v331 + 16 * v333);
                    if (v335 == v329)
                    {
                      v334 = (uint64_t ****)(v331 + 16 * v333);
                      goto LABEL_348;
                    }
                  }
LABEL_347:
                  v334 = (uint64_t ****)(v331 + 16 * v332);
                }
LABEL_348:
                v338 = v334[1];
                v341 = (size_t)*v338;
                v339 = (char *)(v338 + 2);
                v340 = v341;
              }
              else
              {
                v340 = 0;
                v339 = &byte_1C871356D;
              }
              if (v340 >= v327)
                v342 = v327;
              else
                v342 = v340;
              if (v342 && (v343 = memcmp(v326, v339, v342)) != 0)
              {
                v344 = (v343 >> 31) | 1;
              }
              else if (v327 == v340)
              {
                v344 = 0;
              }
              else
              {
                if (v327 < v340)
                  break;
                v344 = 1;
              }
              if (v344 != -1)
                continue;
              break;
            }
            while (2)
            {
              v348 = *--v280;
              v310 = v348;
              if ((v314 & 0x10000000) != 0)
              {
                v349 = ***v313;
                v350 = *(_QWORD *)(v349 + 152);
                v351 = *(unsigned int *)(v349 + 168);
                if (!(_DWORD)v351)
                  goto LABEL_372;
                LODWORD(v352) = (v351 - 1) & v315;
                v353 = (uint64_t ****)(v350 + 16 * v352);
                v354 = *v353;
                if (*v353 != v313)
                {
                  v355 = 1;
                  while (v354 != (uint64_t ***)-4096)
                  {
                    v356 = v352 + v355++;
                    v352 = v356 & (v351 - 1);
                    v354 = *(uint64_t ****)(v350 + 16 * v352);
                    if (v354 == v313)
                    {
                      v353 = (uint64_t ****)(v350 + 16 * v352);
                      goto LABEL_373;
                    }
                  }
LABEL_372:
                  v353 = (uint64_t ****)(v350 + 16 * v351);
                }
LABEL_373:
                v357 = v353[1];
                v358 = (size_t)*v357;
                result = (char *)(v357 + 2);
                v345 = v358;
              }
              else
              {
                v345 = 0;
                result = &byte_1C871356D;
              }
              v359 = *(uint64_t ****)(v310 + 40);
              if ((*((_BYTE *)v359 + 23) & 0x10) != 0)
              {
                v360 = ***v359;
                v361 = *(_QWORD *)(v360 + 152);
                v362 = *(unsigned int *)(v360 + 168);
                if (!(_DWORD)v362)
                  goto LABEL_381;
                LODWORD(v363) = (v362 - 1) & ((v359 >> 4) ^ (v359 >> 9));
                v364 = (uint64_t ****)(v361 + 16 * v363);
                v365 = *v364;
                if (*v364 != v359)
                {
                  v366 = 1;
                  while (v365 != (uint64_t ***)-4096)
                  {
                    v367 = v363 + v366++;
                    v363 = v367 & (v362 - 1);
                    v365 = *(uint64_t ****)(v361 + 16 * v363);
                    if (v365 == v359)
                    {
                      v364 = (uint64_t ****)(v361 + 16 * v363);
                      goto LABEL_382;
                    }
                  }
LABEL_381:
                  v364 = (uint64_t ****)(v361 + 16 * v362);
                }
LABEL_382:
                v368 = v364[1];
                v369 = (size_t)*v368;
                v347 = (char *)(v368 + 2);
                v346 = v369;
              }
              else
              {
                v346 = 0;
                v347 = &byte_1C871356D;
              }
              if (v346 >= v345)
                v370 = v345;
              else
                v370 = v346;
              if (v370 && (result = (char *)memcmp(result, v347, v370), (_DWORD)result))
              {
                v371 = ((int)result >> 31) | 1;
              }
              else
              {
                if (v345 >= v346)
                  break;
                v371 = -1;
              }
              if (v371 == -1)
                continue;
              break;
            }
            v311 = v312;
            if (v6 < v280)
              continue;
            break;
          }
LABEL_395:
          v372 = v6 - 1;
          if (v6 - 1 != v856)
            *v856 = *v372;
          a4 = 0;
          *v372 = v311;
          a3 = v854;
          continue;
        }
        v14 = *(uint64_t ****)(v13 + 40);
        v15 = *((_DWORD *)v14 + 5) & 0x10000000;
LABEL_43:
        v53 = (v14 >> 4) ^ (v14 >> 9);
        v54 = v7;
        while (2)
        {
          v55 = v54;
          v57 = v54[1];
          ++v54;
          v56 = v57;
          v58 = *(uint64_t ****)(v57 + 40);
          if ((*((_BYTE *)v58 + 23) & 0x10) == 0)
          {
            v69 = 0;
            v68 = &byte_1C871356D;
            if (v15)
              goto LABEL_53;
LABEL_72:
            v81 = 0;
            v80 = &byte_1C871356D;
            goto LABEL_61;
          }
          v59 = ***v58;
          v60 = *(_QWORD *)(v59 + 152);
          v61 = *(unsigned int *)(v59 + 168);
          if (!(_DWORD)v61)
            goto LABEL_51;
          LODWORD(v62) = (v61 - 1) & ((v58 >> 4) ^ (v58 >> 9));
          v63 = (uint64_t ****)(v60 + 16 * v62);
          v64 = *v63;
          if (*v63 != v58)
          {
            v65 = 1;
            while (v64 != (uint64_t ***)-4096)
            {
              v66 = v62 + v65++;
              v62 = v66 & (v61 - 1);
              v64 = *(uint64_t ****)(v60 + 16 * v62);
              if (v64 == v58)
              {
                v63 = (uint64_t ****)(v60 + 16 * v62);
                goto LABEL_52;
              }
            }
LABEL_51:
            v63 = (uint64_t ****)(v60 + 16 * v61);
          }
LABEL_52:
          v67 = v63[1];
          v70 = (size_t)*v67;
          v68 = (char *)(v67 + 2);
          v69 = v70;
          if (!v15)
            goto LABEL_72;
LABEL_53:
          v71 = ***v14;
          v72 = *(_QWORD *)(v71 + 152);
          v73 = *(unsigned int *)(v71 + 168);
          if (!(_DWORD)v73)
            goto LABEL_59;
          LODWORD(v74) = (v73 - 1) & v53;
          v75 = (uint64_t ****)(v72 + 16 * v74);
          v76 = *v75;
          if (*v75 != v14)
          {
            v77 = 1;
            while (v76 != (uint64_t ***)-4096)
            {
              v78 = v74 + v77++;
              v74 = v78 & (v73 - 1);
              v76 = *(uint64_t ****)(v72 + 16 * v74);
              if (v76 == v14)
              {
                v75 = (uint64_t ****)(v72 + 16 * v74);
                goto LABEL_60;
              }
            }
LABEL_59:
            v75 = (uint64_t ****)(v72 + 16 * v73);
          }
LABEL_60:
          v79 = v75[1];
          v82 = (size_t)*v79;
          v80 = (char *)(v79 + 2);
          v81 = v82;
LABEL_61:
          if (v81 >= v69)
            v83 = v69;
          else
            v83 = v81;
          if (v83 && (v84 = memcmp(v68, v80, v83)) != 0)
          {
            v85 = (v84 >> 31) | 1;
          }
          else
          {
            if (v69 >= v81)
              break;
            v85 = -1;
          }
          if (v85 == -1)
            continue;
          break;
        }
        v86 = v855;
        if (v55 != v856)
        {
          while (2)
          {
            v87 = *--v86;
            v88 = *(uint64_t ****)(v87 + 40);
            if ((*((_BYTE *)v88 + 23) & 0x10) != 0)
            {
              v89 = ***v88;
              v90 = *(_QWORD *)(v89 + 152);
              v91 = *(unsigned int *)(v89 + 168);
              if (!(_DWORD)v91)
                goto LABEL_81;
              LODWORD(v92) = (v91 - 1) & ((v88 >> 4) ^ (v88 >> 9));
              v93 = (uint64_t ****)(v90 + 16 * v92);
              v94 = *v93;
              if (*v93 != v88)
              {
                v95 = 1;
                while (v94 != (uint64_t ***)-4096)
                {
                  v96 = v92 + v95++;
                  v92 = v96 & (v91 - 1);
                  v94 = *(uint64_t ****)(v90 + 16 * v92);
                  if (v94 == v88)
                  {
                    v93 = (uint64_t ****)(v90 + 16 * v92);
                    goto LABEL_82;
                  }
                }
LABEL_81:
                v93 = (uint64_t ****)(v90 + 16 * v91);
              }
LABEL_82:
              v97 = v93[1];
              v100 = (size_t)*v97;
              v98 = (char *)(v97 + 2);
              v99 = v100;
              if (v15)
              {
LABEL_83:
                v101 = ***v14;
                v102 = *(_QWORD *)(v101 + 152);
                v103 = *(unsigned int *)(v101 + 168);
                if (!(_DWORD)v103)
                  goto LABEL_89;
                LODWORD(v104) = (v103 - 1) & v53;
                v105 = (uint64_t ****)(v102 + 16 * v104);
                v106 = *v105;
                if (*v105 != v14)
                {
                  v107 = 1;
                  while (v106 != (uint64_t ***)-4096)
                  {
                    v108 = v104 + v107++;
                    v104 = v108 & (v103 - 1);
                    v106 = *(uint64_t ****)(v102 + 16 * v104);
                    if (v106 == v14)
                    {
                      v105 = (uint64_t ****)(v102 + 16 * v104);
                      goto LABEL_90;
                    }
                  }
LABEL_89:
                  v105 = (uint64_t ****)(v102 + 16 * v103);
                }
LABEL_90:
                v109 = v105[1];
                v112 = (size_t)*v109;
                v110 = (char *)(v109 + 2);
                v111 = v112;
LABEL_91:
                if (v111 >= v99)
                  v113 = v99;
                else
                  v113 = v111;
                if (v113 && (v114 = memcmp(v98, v110, v113)) != 0)
                {
                  v115 = (v114 >> 31) | 1;
                }
                else if (v99 == v111)
                {
                  v115 = 0;
                }
                else
                {
                  if (v99 < v111)
                    goto LABEL_138;
                  v115 = 1;
                }
                if (v115 == -1)
                  goto LABEL_138;
                continue;
              }
            }
            else
            {
              v99 = 0;
              v98 = &byte_1C871356D;
              if (v15)
                goto LABEL_83;
            }
            break;
          }
          v111 = 0;
          v110 = &byte_1C871356D;
          goto LABEL_91;
        }
        v86 = v855;
        while (2)
        {
          if (v54 < v86)
          {
            v116 = *--v86;
            v117 = *(uint64_t ****)(v116 + 40);
            if ((*((_BYTE *)v117 + 23) & 0x10) != 0)
            {
              v118 = ***v117;
              v119 = *(_QWORD *)(v118 + 152);
              v120 = *(unsigned int *)(v118 + 168);
              if (!(_DWORD)v120)
                goto LABEL_114;
              LODWORD(v121) = (v120 - 1) & ((v117 >> 4) ^ (v117 >> 9));
              v122 = (uint64_t ****)(v119 + 16 * v121);
              v123 = *v122;
              if (*v122 != v117)
              {
                v124 = 1;
                while (v123 != (uint64_t ***)-4096)
                {
                  v125 = v121 + v124++;
                  v121 = v125 & (v120 - 1);
                  v123 = *(uint64_t ****)(v119 + 16 * v121);
                  if (v123 == v117)
                  {
                    v122 = (uint64_t ****)(v119 + 16 * v121);
                    goto LABEL_115;
                  }
                }
LABEL_114:
                v122 = (uint64_t ****)(v119 + 16 * v120);
              }
LABEL_115:
              v126 = v122[1];
              v129 = (size_t)*v126;
              v127 = (char *)(v126 + 2);
              v128 = v129;
              if (v15)
              {
LABEL_116:
                v130 = ***v14;
                v131 = *(_QWORD *)(v130 + 152);
                v132 = *(unsigned int *)(v130 + 168);
                if (!(_DWORD)v132)
                  goto LABEL_122;
                LODWORD(v133) = (v132 - 1) & v53;
                v134 = (uint64_t ****)(v131 + 16 * v133);
                v135 = *v134;
                if (*v134 != v14)
                {
                  v136 = 1;
                  while (v135 != (uint64_t ***)-4096)
                  {
                    v137 = v133 + v136++;
                    v133 = v137 & (v132 - 1);
                    v135 = *(uint64_t ****)(v131 + 16 * v133);
                    if (v135 == v14)
                    {
                      v134 = (uint64_t ****)(v131 + 16 * v133);
                      goto LABEL_123;
                    }
                  }
LABEL_122:
                  v134 = (uint64_t ****)(v131 + 16 * v132);
                }
LABEL_123:
                v138 = v134[1];
                v141 = (size_t)*v138;
                v139 = (char *)(v138 + 2);
                v140 = v141;
LABEL_124:
                if (v140 >= v128)
                  v142 = v128;
                else
                  v142 = v140;
                if (v142 && (v143 = memcmp(v127, v139, v142)) != 0)
                {
                  v144 = (v143 >> 31) | 1;
                }
                else if (v128 == v140)
                {
                  v144 = 0;
                }
                else
                {
                  if (v128 < v140)
                    break;
                  v144 = 1;
                }
                if (v144 == -1)
                  break;
                continue;
              }
            }
            else
            {
              v128 = 0;
              v127 = &byte_1C871356D;
              if (v15)
                goto LABEL_116;
            }
            v140 = 0;
            v139 = &byte_1C871356D;
            goto LABEL_124;
          }
          break;
        }
LABEL_138:
        v853 = v86;
        if (v54 >= v86)
        {
          v6 = v54;
          goto LABEL_203;
        }
        v145 = v86;
        v146 = *v86;
        v6 = v54;
        while (2)
        {
          *v6 = v146;
          *v145 = v56;
          v147 = *(uint64_t ****)(v857 + 40);
          v148 = *((_DWORD *)v147 + 5);
          v149 = (v147 >> 4) ^ (v147 >> 9);
          while (2)
          {
            v150 = v6[1];
            ++v6;
            v56 = v150;
            v151 = *(uint64_t ****)(v150 + 40);
            if ((*((_BYTE *)v151 + 23) & 0x10) == 0)
            {
              v162 = 0;
              v161 = &byte_1C871356D;
              if ((v148 & 0x10000000) != 0)
                goto LABEL_150;
LABEL_169:
              v174 = 0;
              v173 = &byte_1C871356D;
              goto LABEL_158;
            }
            v152 = ***v151;
            v153 = *(_QWORD *)(v152 + 152);
            v154 = *(unsigned int *)(v152 + 168);
            if (!(_DWORD)v154)
              goto LABEL_148;
            LODWORD(v155) = (v154 - 1) & ((v151 >> 4) ^ (v151 >> 9));
            v156 = (uint64_t ****)(v153 + 16 * v155);
            v157 = *v156;
            if (*v156 != v151)
            {
              v158 = 1;
              while (v157 != (uint64_t ***)-4096)
              {
                v159 = v155 + v158++;
                v155 = v159 & (v154 - 1);
                v157 = *(uint64_t ****)(v153 + 16 * v155);
                if (v157 == v151)
                {
                  v156 = (uint64_t ****)(v153 + 16 * v155);
                  goto LABEL_149;
                }
              }
LABEL_148:
              v156 = (uint64_t ****)(v153 + 16 * v154);
            }
LABEL_149:
            v160 = v156[1];
            v163 = (size_t)*v160;
            v161 = (char *)(v160 + 2);
            v162 = v163;
            if ((v148 & 0x10000000) == 0)
              goto LABEL_169;
LABEL_150:
            v164 = ***v147;
            v165 = *(_QWORD *)(v164 + 152);
            v166 = *(unsigned int *)(v164 + 168);
            if (!(_DWORD)v166)
              goto LABEL_156;
            LODWORD(v167) = (v166 - 1) & v149;
            v168 = (uint64_t ****)(v165 + 16 * v167);
            v169 = *v168;
            if (*v168 != v147)
            {
              v170 = 1;
              while (v169 != (uint64_t ***)-4096)
              {
                v171 = v167 + v170++;
                v167 = v171 & (v166 - 1);
                v169 = *(uint64_t ****)(v165 + 16 * v167);
                if (v169 == v147)
                {
                  v168 = (uint64_t ****)(v165 + 16 * v167);
                  goto LABEL_157;
                }
              }
LABEL_156:
              v168 = (uint64_t ****)(v165 + 16 * v166);
            }
LABEL_157:
            v172 = v168[1];
            v175 = (size_t)*v172;
            v173 = (char *)(v172 + 2);
            v174 = v175;
LABEL_158:
            if (v174 >= v162)
              v176 = v162;
            else
              v176 = v174;
            if (v176 && (v177 = memcmp(v161, v173, v176)) != 0)
            {
              v178 = (v177 >> 31) | 1;
            }
            else
            {
              if (v162 >= v174)
                break;
              v178 = -1;
            }
            if (v178 == -1)
              continue;
            break;
          }
          while (2)
          {
            v183 = *--v145;
            v146 = v183;
            v184 = *(uint64_t ****)(v183 + 40);
            if ((*((_BYTE *)v184 + 23) & 0x10) == 0)
            {
              v179 = 0;
              v180 = &byte_1C871356D;
              if ((v148 & 0x10000000) != 0)
                goto LABEL_181;
LABEL_171:
              v181 = 0;
              v182 = &byte_1C871356D;
              goto LABEL_189;
            }
            v185 = ***v184;
            v186 = *(_QWORD *)(v185 + 152);
            v187 = *(unsigned int *)(v185 + 168);
            if (!(_DWORD)v187)
              goto LABEL_179;
            LODWORD(v188) = (v187 - 1) & ((v184 >> 4) ^ (v184 >> 9));
            v189 = (uint64_t ****)(v186 + 16 * v188);
            v190 = *v189;
            if (*v189 != v184)
            {
              v191 = 1;
              while (v190 != (uint64_t ***)-4096)
              {
                v192 = v188 + v191++;
                v188 = v192 & (v187 - 1);
                v190 = *(uint64_t ****)(v186 + 16 * v188);
                if (v190 == v184)
                {
                  v189 = (uint64_t ****)(v186 + 16 * v188);
                  goto LABEL_180;
                }
              }
LABEL_179:
              v189 = (uint64_t ****)(v186 + 16 * v187);
            }
LABEL_180:
            v193 = v189[1];
            v194 = (size_t)*v193;
            v180 = (char *)(v193 + 2);
            v179 = v194;
            if ((v148 & 0x10000000) == 0)
              goto LABEL_171;
LABEL_181:
            v195 = ***v147;
            v196 = *(_QWORD *)(v195 + 152);
            v197 = *(unsigned int *)(v195 + 168);
            if (!(_DWORD)v197)
              goto LABEL_187;
            LODWORD(v198) = (v197 - 1) & v149;
            v199 = (uint64_t ****)(v196 + 16 * v198);
            v200 = *v199;
            if (*v199 != v147)
            {
              v201 = 1;
              while (v200 != (uint64_t ***)-4096)
              {
                v202 = v198 + v201++;
                v198 = v202 & (v197 - 1);
                v200 = *(uint64_t ****)(v196 + 16 * v198);
                if (v200 == v147)
                {
                  v199 = (uint64_t ****)(v196 + 16 * v198);
                  goto LABEL_188;
                }
              }
LABEL_187:
              v199 = (uint64_t ****)(v196 + 16 * v197);
            }
LABEL_188:
            v203 = v199[1];
            v204 = (size_t)*v203;
            v182 = (char *)(v203 + 2);
            v181 = v204;
LABEL_189:
            if (v181 >= v179)
              v205 = v179;
            else
              v205 = v181;
            if (v205 && (v206 = memcmp(v180, v182, v205)) != 0)
            {
              v207 = (v206 >> 31) | 1;
            }
            else if (v179 == v181)
            {
              v207 = 0;
            }
            else
            {
              if (v179 < v181)
                break;
              v207 = 1;
            }
            if (v207 != -1)
              continue;
            break;
          }
          if (v6 < v145)
            continue;
          break;
        }
LABEL_203:
        v208 = v6 - 1;
        v5 = v856;
        if (v6 - 1 != v856)
          *v856 = *v208;
        *v208 = v857;
        a3 = v854;
        if (v54 < v853)
        {
LABEL_208:
          result = (char *)sub_1C5BEB770(v856, v6 - 1, v854, a4 & 1);
          a4 = 0;
          continue;
        }
        v209 = sub_1C5BEE8D8(v856, v6 - 1);
        result = (char *)sub_1C5BEE8D8(v6, v855);
        if (!(_DWORD)result)
        {
          if (v209)
            continue;
          goto LABEL_208;
        }
        a2 = v6 - 1;
        if (!v209)
          goto LABEL_2;
        return result;
    }
  }
}

char *sub_1C5BEE218(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ***v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ****v15;
  uint64_t ***v16;
  int v17;
  int v18;
  uint64_t ***v19;
  char *v20;
  size_t v21;
  size_t v22;
  uint64_t ***v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ****v28;
  uint64_t ***v29;
  int v30;
  int v31;
  uint64_t ***v32;
  char *v33;
  size_t v34;
  size_t v35;
  size_t v36;
  int v37;
  uint64_t v38;
  uint64_t ***v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t ****v44;
  uint64_t ***v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t ***v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t ****v54;
  uint64_t ***v55;
  int v56;
  int v57;
  uint64_t ***v58;
  char *result;
  size_t v60;
  size_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t ****v66;
  uint64_t ***v67;
  int v68;
  int v69;
  uint64_t ***v70;
  char *v71;
  size_t v72;
  size_t v73;
  size_t v74;
  uint64_t ***v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t ****v80;
  uint64_t ***v81;
  int v82;
  int v83;
  uint64_t ***v84;
  size_t v85;
  size_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t ****v91;
  uint64_t ***v92;
  int v93;
  int v94;
  uint64_t ***v95;
  char *v96;
  size_t v97;
  size_t v98;
  size_t v99;
  uint64_t ***v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t ****v105;
  uint64_t ***v106;
  int v107;
  int v108;
  uint64_t ***v109;
  size_t v110;
  size_t v111;
  uint64_t ***v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t ****v117;
  uint64_t ***v118;
  int v119;
  int v120;
  uint64_t ***v121;
  size_t v122;
  size_t v123;
  uint64_t ***v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t ****v129;
  uint64_t ***v130;
  int v131;
  int v132;
  uint64_t ***v133;
  char *v134;
  size_t v135;
  size_t v136;
  size_t v137;
  uint64_t ***v138;
  char *v139;
  size_t v140;
  size_t v141;
  size_t v142;

  v4 = a2;
  v5 = a1;
  v6 = *a2;
  v7 = *a1;
  v8 = *(uint64_t ****)(*a2 + 40);
  v9 = *((_DWORD *)v8 + 5);
  v10 = v8 >> 4;
  if ((v9 & 0x10000000) != 0)
  {
    v11 = ***v8;
    v12 = *(_QWORD *)(v11 + 152);
    v13 = *(unsigned int *)(v11 + 168);
    if ((_DWORD)v13)
    {
      LODWORD(v14) = (v13 - 1) & (v10 ^ (v8 >> 9));
      v15 = (uint64_t ****)(v12 + 16 * v14);
      v16 = *v15;
      if (*v15 == v8)
      {
LABEL_9:
        v19 = v15[1];
        v22 = (size_t)*v19;
        v20 = (char *)(v19 + 2);
        v21 = v22;
        goto LABEL_10;
      }
      v17 = 1;
      while (v16 != (uint64_t ***)-4096)
      {
        v18 = v14 + v17++;
        v14 = v18 & (v13 - 1);
        v16 = *(uint64_t ****)(v12 + 16 * v14);
        if (v16 == v8)
        {
          v15 = (uint64_t ****)(v12 + 16 * v14);
          goto LABEL_9;
        }
      }
    }
    v15 = (uint64_t ****)(v12 + 16 * v13);
    goto LABEL_9;
  }
  v21 = 0;
  v20 = &byte_1C871356D;
LABEL_10:
  v23 = *(uint64_t ****)(v7 + 40);
  if ((*((_BYTE *)v23 + 23) & 0x10) != 0)
  {
    v24 = ***v23;
    v25 = *(_QWORD *)(v24 + 152);
    v26 = *(unsigned int *)(v24 + 168);
    if ((_DWORD)v26)
    {
      LODWORD(v27) = (v26 - 1) & ((v23 >> 4) ^ (v23 >> 9));
      v28 = (uint64_t ****)(v25 + 16 * v27);
      v29 = *v28;
      if (*v28 == v23)
      {
LABEL_18:
        v32 = v28[1];
        v35 = (size_t)*v32;
        v33 = (char *)(v32 + 2);
        v34 = v35;
        goto LABEL_19;
      }
      v30 = 1;
      while (v29 != (uint64_t ***)-4096)
      {
        v31 = v27 + v30++;
        v27 = v31 & (v26 - 1);
        v29 = *(uint64_t ****)(v25 + 16 * v27);
        if (v29 == v23)
        {
          v28 = (uint64_t ****)(v25 + 16 * v27);
          goto LABEL_18;
        }
      }
    }
    v28 = (uint64_t ****)(v25 + 16 * v26);
    goto LABEL_18;
  }
  v34 = 0;
  v33 = &byte_1C871356D;
LABEL_19:
  if (v34 >= v21)
    v36 = v21;
  else
    v36 = v34;
  if (v36)
  {
    v37 = memcmp(v20, v33, v36);
    if (v37)
    {
      if ((v37 & 0x80000000) == 0)
        goto LABEL_25;
LABEL_33:
      v48 = *a3;
      v49 = *(uint64_t ****)(*a3 + 40);
      if ((*((_BYTE *)v49 + 23) & 0x10) == 0)
      {
        v85 = 0;
        result = &byte_1C871356D;
        if ((v9 & 0x10000000) != 0)
        {
LABEL_67:
          v87 = ***v8;
          v88 = *(_QWORD *)(v87 + 152);
          v89 = *(unsigned int *)(v87 + 168);
          if ((_DWORD)v89)
          {
            LODWORD(v90) = (v89 - 1) & (v10 ^ (v8 >> 9));
            v91 = (uint64_t ****)(v88 + 16 * v90);
            v92 = *v91;
            if (*v91 == v8)
            {
LABEL_74:
              v95 = v91[1];
              v98 = (size_t)*v95;
              v96 = (char *)(v95 + 2);
              v97 = v98;
              goto LABEL_75;
            }
            v93 = 1;
            while (v92 != (uint64_t ***)-4096)
            {
              v94 = v90 + v93++;
              v90 = v94 & (v89 - 1);
              v92 = *(uint64_t ****)(v88 + 16 * v90);
              if (v92 == v8)
              {
                v91 = (uint64_t ****)(v88 + 16 * v90);
                goto LABEL_74;
              }
            }
          }
          v91 = (uint64_t ****)(v88 + 16 * v89);
          goto LABEL_74;
        }
LABEL_135:
        v97 = 0;
        v96 = &byte_1C871356D;
LABEL_75:
        if (v97 >= v85)
          v99 = v85;
        else
          v99 = v97;
        if (v99 && (result = (char *)memcmp(result, v96, v99), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            goto LABEL_81;
        }
        else if (v85 >= v97)
        {
LABEL_81:
          *v5 = v6;
          *v4 = v7;
          v48 = *a3;
          v100 = *(uint64_t ****)(*a3 + 40);
          if ((*((_BYTE *)v100 + 23) & 0x10) == 0)
          {
            v122 = 0;
            result = &byte_1C871356D;
LABEL_101:
            v124 = *(uint64_t ****)(v7 + 40);
            if ((*((_BYTE *)v124 + 23) & 0x10) == 0)
            {
              v140 = 0;
              v139 = &byte_1C871356D;
              goto LABEL_120;
            }
            v125 = ***v124;
            v126 = *(_QWORD *)(v125 + 152);
            v127 = *(unsigned int *)(v125 + 168);
            if ((_DWORD)v127)
            {
              LODWORD(v128) = (v127 - 1) & ((v124 >> 4) ^ (v124 >> 9));
              v129 = (uint64_t ****)(v126 + 16 * v128);
              v130 = *v129;
              if (*v129 == v124)
              {
LABEL_119:
                v138 = v129[1];
                v141 = (size_t)*v138;
                v139 = (char *)(v138 + 2);
                v140 = v141;
LABEL_120:
                if (v140 >= v122)
                  v142 = v122;
                else
                  v142 = v140;
                if (v142)
                {
                  result = (char *)memcmp(result, v139, v142);
                  if ((_DWORD)result)
                  {
                    v5 = v4;
                    v4 = a3;
                    goto LABEL_126;
                  }
                }
                v5 = v4;
                v4 = a3;
                if (v122 >= v140)
                  return result;
LABEL_116:
                *v5 = v48;
                *v4 = v7;
                return result;
              }
              v131 = 1;
              while (v130 != (uint64_t ***)-4096)
              {
                v132 = v128 + v131++;
                v128 = v132 & (v127 - 1);
                v130 = *(uint64_t ****)(v126 + 16 * v128);
                if (v130 == v124)
                {
                  v129 = (uint64_t ****)(v126 + 16 * v128);
                  goto LABEL_119;
                }
              }
            }
            v129 = (uint64_t ****)(v126 + 16 * v127);
            goto LABEL_119;
          }
          v101 = ***v100;
          v102 = *(_QWORD *)(v101 + 152);
          v103 = *(unsigned int *)(v101 + 168);
          if ((_DWORD)v103)
          {
            LODWORD(v104) = (v103 - 1) & ((v100 >> 4) ^ (v100 >> 9));
            v105 = (uint64_t ****)(v102 + 16 * v104);
            v106 = *v105;
            if (*v105 == v100)
            {
LABEL_100:
              v121 = v105[1];
              v123 = (size_t)*v121;
              result = (char *)(v121 + 2);
              v122 = v123;
              goto LABEL_101;
            }
            v107 = 1;
            while (v106 != (uint64_t ***)-4096)
            {
              v108 = v104 + v107++;
              v104 = v108 & (v103 - 1);
              v106 = *(uint64_t ****)(v102 + 16 * v104);
              if (v106 == v100)
              {
                v105 = (uint64_t ****)(v102 + 16 * v104);
                goto LABEL_100;
              }
            }
          }
          v105 = (uint64_t ****)(v102 + 16 * v103);
          goto LABEL_100;
        }
        v4 = a3;
        goto LABEL_116;
      }
      v50 = ***v49;
      v51 = *(_QWORD *)(v50 + 152);
      v52 = *(unsigned int *)(v50 + 168);
      if ((_DWORD)v52)
      {
        LODWORD(v53) = (v52 - 1) & ((v49 >> 4) ^ (v49 >> 9));
        v54 = (uint64_t ****)(v51 + 16 * v53);
        v55 = *v54;
        if (*v54 == v49)
          goto LABEL_66;
        v56 = 1;
        while (v55 != (uint64_t ***)-4096)
        {
          v57 = v53 + v56++;
          v53 = v57 & (v52 - 1);
          v55 = *(uint64_t ****)(v51 + 16 * v53);
          if (v55 == v49)
          {
            v54 = (uint64_t ****)(v51 + 16 * v53);
            goto LABEL_66;
          }
        }
      }
      v54 = (uint64_t ****)(v51 + 16 * v52);
LABEL_66:
      v84 = v54[1];
      v86 = (size_t)*v84;
      result = (char *)(v84 + 2);
      v85 = v86;
      if ((v9 & 0x10000000) != 0)
        goto LABEL_67;
      goto LABEL_135;
    }
  }
  if (v21 < v34)
    goto LABEL_33;
LABEL_25:
  v38 = *a3;
  v39 = *(uint64_t ****)(*a3 + 40);
  if ((*((_BYTE *)v39 + 23) & 0x10) != 0)
  {
    v40 = ***v39;
    v41 = *(_QWORD *)(v40 + 152);
    v42 = *(unsigned int *)(v40 + 168);
    if ((_DWORD)v42)
    {
      LODWORD(v43) = (v42 - 1) & ((v39 >> 4) ^ (v39 >> 9));
      v44 = (uint64_t ****)(v41 + 16 * v43);
      v45 = *v44;
      if (*v44 == v39)
        goto LABEL_41;
      v46 = 1;
      while (v45 != (uint64_t ***)-4096)
      {
        v47 = v43 + v46++;
        v43 = v47 & (v42 - 1);
        v45 = *(uint64_t ****)(v41 + 16 * v43);
        if (v45 == v39)
        {
          v44 = (uint64_t ****)(v41 + 16 * v43);
          goto LABEL_41;
        }
      }
    }
    v44 = (uint64_t ****)(v41 + 16 * v42);
LABEL_41:
    v58 = v44[1];
    v61 = (size_t)*v58;
    result = (char *)(v58 + 2);
    v60 = v61;
    if ((v9 & 0x10000000) != 0)
      goto LABEL_42;
    goto LABEL_133;
  }
  v60 = 0;
  result = &byte_1C871356D;
  if ((v9 & 0x10000000) != 0)
  {
LABEL_42:
    v62 = ***v8;
    v63 = *(_QWORD *)(v62 + 152);
    v64 = *(unsigned int *)(v62 + 168);
    if ((_DWORD)v64)
    {
      LODWORD(v65) = (v64 - 1) & (v10 ^ (v8 >> 9));
      v66 = (uint64_t ****)(v63 + 16 * v65);
      v67 = *v66;
      if (*v66 == v8)
      {
LABEL_49:
        v70 = v66[1];
        v73 = (size_t)*v70;
        v71 = (char *)(v70 + 2);
        v72 = v73;
        goto LABEL_50;
      }
      v68 = 1;
      while (v67 != (uint64_t ***)-4096)
      {
        v69 = v65 + v68++;
        v65 = v69 & (v64 - 1);
        v67 = *(uint64_t ****)(v63 + 16 * v65);
        if (v67 == v8)
        {
          v66 = (uint64_t ****)(v63 + 16 * v65);
          goto LABEL_49;
        }
      }
    }
    v66 = (uint64_t ****)(v63 + 16 * v64);
    goto LABEL_49;
  }
LABEL_133:
  v72 = 0;
  v71 = &byte_1C871356D;
LABEL_50:
  if (v72 >= v60)
    v74 = v60;
  else
    v74 = v72;
  if (v74 && (result = (char *)memcmp(result, v71, v74), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v60 >= v72)
  {
    return result;
  }
  *v4 = v38;
  *a3 = v6;
  v48 = *v4;
  v7 = *v5;
  v75 = *(uint64_t ****)(*v4 + 40);
  if ((*((_BYTE *)v75 + 23) & 0x10) != 0)
  {
    v76 = ***v75;
    v77 = *(_QWORD *)(v76 + 152);
    v78 = *(unsigned int *)(v76 + 168);
    if ((_DWORD)v78)
    {
      LODWORD(v79) = (v78 - 1) & ((v75 >> 4) ^ (v75 >> 9));
      v80 = (uint64_t ****)(v77 + 16 * v79);
      v81 = *v80;
      if (*v80 == v75)
      {
LABEL_91:
        v109 = v80[1];
        v111 = (size_t)*v109;
        result = (char *)(v109 + 2);
        v110 = v111;
        goto LABEL_92;
      }
      v82 = 1;
      while (v81 != (uint64_t ***)-4096)
      {
        v83 = v79 + v82++;
        v79 = v83 & (v78 - 1);
        v81 = *(uint64_t ****)(v77 + 16 * v79);
        if (v81 == v75)
        {
          v80 = (uint64_t ****)(v77 + 16 * v79);
          goto LABEL_91;
        }
      }
    }
    v80 = (uint64_t ****)(v77 + 16 * v78);
    goto LABEL_91;
  }
  v110 = 0;
  result = &byte_1C871356D;
LABEL_92:
  v112 = *(uint64_t ****)(v7 + 40);
  if ((*((_BYTE *)v112 + 23) & 0x10) != 0)
  {
    v113 = ***v112;
    v114 = *(_QWORD *)(v113 + 152);
    v115 = *(unsigned int *)(v113 + 168);
    if ((_DWORD)v115)
    {
      LODWORD(v116) = (v115 - 1) & ((v112 >> 4) ^ (v112 >> 9));
      v117 = (uint64_t ****)(v114 + 16 * v116);
      v118 = *v117;
      if (*v117 == v112)
      {
LABEL_109:
        v133 = v117[1];
        v136 = (size_t)*v133;
        v134 = (char *)(v133 + 2);
        v135 = v136;
        goto LABEL_110;
      }
      v119 = 1;
      while (v118 != (uint64_t ***)-4096)
      {
        v120 = v116 + v119++;
        v116 = v120 & (v115 - 1);
        v118 = *(uint64_t ****)(v114 + 16 * v116);
        if (v118 == v112)
        {
          v117 = (uint64_t ****)(v114 + 16 * v116);
          goto LABEL_109;
        }
      }
    }
    v117 = (uint64_t ****)(v114 + 16 * v115);
    goto LABEL_109;
  }
  v135 = 0;
  v134 = &byte_1C871356D;
LABEL_110:
  if (v135 >= v110)
    v137 = v110;
  else
    v137 = v135;
  if (!v137 || (result = (char *)memcmp(result, v134, v137), !(_DWORD)result))
  {
    if (v110 >= v135)
      return result;
    goto LABEL_116;
  }
LABEL_126:
  if ((result & 0x80000000) != 0)
    goto LABEL_116;
  return result;
}

BOOL sub_1C5BEE8D8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t ***v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ****v13;
  uint64_t ***v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t ***v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ****v26;
  uint64_t ***v27;
  int v28;
  int v29;
  uint64_t ***v30;
  char *v31;
  size_t v32;
  size_t v33;
  uint64_t v34;
  uint64_t ***v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t ****v40;
  uint64_t ***v41;
  int v42;
  int v43;
  uint64_t ***v44;
  char *v45;
  size_t v46;
  size_t v47;
  size_t v48;
  int v49;
  uint64_t *v50;
  uint64_t ***v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t ****v56;
  uint64_t ***v57;
  int v58;
  int v59;
  uint64_t ***v60;
  char *v61;
  size_t v62;
  size_t v63;
  uint64_t ***v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t ****v69;
  uint64_t ***v70;
  int v71;
  int v72;
  uint64_t ***v73;
  char *v74;
  size_t v75;
  size_t v76;
  size_t v77;
  int v78;
  int v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t ***v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t ****v89;
  uint64_t ***v90;
  int v91;
  int v92;
  uint64_t ***v93;
  char *v94;
  size_t v95;
  size_t v96;
  uint64_t ***v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t ****v102;
  uint64_t ***v103;
  int v104;
  int v105;
  uint64_t ***v106;
  char *v107;
  size_t v108;
  size_t v109;
  uint64_t ***v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t ****v115;
  uint64_t ***v116;
  int v117;
  int v118;
  uint64_t ***v119;
  char *v120;
  size_t v121;
  size_t v122;
  size_t v123;
  int v124;
  uint64_t ***v125;
  char *v126;
  size_t v127;
  size_t v128;
  size_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t ***v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t ****v138;
  uint64_t ***v139;
  int v140;
  int v141;
  uint64_t ***v142;
  char *v143;
  size_t v144;
  size_t v145;
  uint64_t ***v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t ****v151;
  uint64_t ***v152;
  int v153;
  int v154;
  uint64_t ***v155;
  char *v156;
  size_t v157;
  size_t v158;
  size_t v159;
  int v160;
  uint64_t v161;
  uint64_t ***v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t ****v167;
  uint64_t ***v168;
  int v169;
  int v170;
  uint64_t ***v171;
  char *v172;
  size_t v173;
  size_t v174;
  uint64_t ***v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t ****v180;
  uint64_t ***v181;
  int v182;
  int v183;
  uint64_t ***v184;
  char *v185;
  size_t v186;
  size_t v187;
  size_t v188;
  int v189;
  uint64_t v190;
  uint64_t ***v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t ****v196;
  uint64_t ***v197;
  int v198;
  int v199;
  uint64_t ***v200;
  char *v201;
  size_t v202;
  size_t v203;
  uint64_t ***v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t ****v209;
  uint64_t ***v210;
  int v211;
  int v212;
  uint64_t ***v213;
  char *v214;
  size_t v215;
  size_t v216;
  size_t v217;
  int v218;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = *(uint64_t ****)(v6 + 40);
      if ((*((_BYTE *)v8 + 23) & 0x10) != 0)
      {
        v9 = ***v8;
        v10 = *(_QWORD *)(v9 + 152);
        v11 = *(unsigned int *)(v9 + 168);
        if ((_DWORD)v11)
        {
          LODWORD(v12) = (v11 - 1) & ((v8 >> 4) ^ (v8 >> 9));
          v13 = (uint64_t ****)(v10 + 16 * v12);
          v14 = *v13;
          if (*v13 != v8)
          {
            v15 = 1;
            do
            {
              if (v14 == (uint64_t ***)-4096)
                goto LABEL_85;
              v16 = v12 + v15++;
              v12 = v16 & (v11 - 1);
              v14 = *(uint64_t ****)(v10 + 16 * v12);
            }
            while (v14 != v8);
            v13 = (uint64_t ****)(v10 + 16 * v12);
          }
        }
        else
        {
LABEL_85:
          v13 = (uint64_t ****)(v10 + 16 * v11);
        }
        v93 = v13[1];
        v96 = (size_t)*v93;
        v94 = (char *)(v93 + 2);
        v95 = v96;
      }
      else
      {
        v95 = 0;
        v94 = &byte_1C871356D;
      }
      v97 = *(uint64_t ****)(v7 + 40);
      if ((*((_BYTE *)v97 + 23) & 0x10) != 0)
      {
        v98 = ***v97;
        v99 = *(_QWORD *)(v98 + 152);
        v100 = *(unsigned int *)(v98 + 168);
        if ((_DWORD)v100)
        {
          LODWORD(v101) = (v100 - 1) & ((v97 >> 4) ^ (v97 >> 9));
          v102 = (uint64_t ****)(v99 + 16 * v101);
          v103 = *v102;
          if (*v102 != v97)
          {
            v104 = 1;
            do
            {
              if (v103 == (uint64_t ***)-4096)
                goto LABEL_103;
              v105 = v101 + v104++;
              v101 = v105 & (v100 - 1);
              v103 = *(uint64_t ****)(v99 + 16 * v101);
            }
            while (v103 != v97);
            v102 = (uint64_t ****)(v99 + 16 * v101);
          }
        }
        else
        {
LABEL_103:
          v102 = (uint64_t ****)(v99 + 16 * v100);
        }
        v119 = v102[1];
        v122 = (size_t)*v119;
        v120 = (char *)(v119 + 2);
        v121 = v122;
      }
      else
      {
        v121 = 0;
        v120 = &byte_1C871356D;
      }
      if (v121 >= v95)
        v123 = v95;
      else
        v123 = v121;
      if (v123 && (v124 = memcmp(v94, v120, v123)) != 0)
      {
        if ((v124 & 0x80000000) == 0)
          return 1;
      }
      else if (v95 >= v121)
      {
        return 1;
      }
      *a1 = v6;
      *(a2 - 1) = v7;
      return 1;
    case 3:
      sub_1C5BEE218(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C5BEF34C(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v80 = a1 + 2;
      v81 = a1 + 3;
      sub_1C5BEF34C(a1, a1 + 1, a1 + 2, a1 + 3);
      v82 = *(a2 - 1);
      v83 = a1[3];
      v84 = *(uint64_t ****)(v82 + 40);
      if ((*((_BYTE *)v84 + 23) & 0x10) != 0)
      {
        v85 = ***v84;
        v86 = *(_QWORD *)(v85 + 152);
        v87 = *(unsigned int *)(v85 + 168);
        if ((_DWORD)v87)
        {
          LODWORD(v88) = (v87 - 1) & ((v84 >> 4) ^ (v84 >> 9));
          v89 = (uint64_t ****)(v86 + 16 * v88);
          v90 = *v89;
          if (*v89 != v84)
          {
            v91 = 1;
            do
            {
              if (v90 == (uint64_t ***)-4096)
                goto LABEL_94;
              v92 = v88 + v91++;
              v88 = v92 & (v87 - 1);
              v90 = *(uint64_t ****)(v86 + 16 * v88);
            }
            while (v90 != v84);
            v89 = (uint64_t ****)(v86 + 16 * v88);
          }
        }
        else
        {
LABEL_94:
          v89 = (uint64_t ****)(v86 + 16 * v87);
        }
        v106 = v89[1];
        v109 = (size_t)*v106;
        v107 = (char *)(v106 + 2);
        v108 = v109;
        goto LABEL_96;
      }
      v108 = 0;
      v107 = &byte_1C871356D;
LABEL_96:
      v110 = *(uint64_t ****)(v83 + 40);
      if ((*((_BYTE *)v110 + 23) & 0x10) != 0)
      {
        v111 = ***v110;
        v112 = *(_QWORD *)(v111 + 152);
        v113 = *(unsigned int *)(v111 + 168);
        if ((_DWORD)v113)
        {
          LODWORD(v114) = (v113 - 1) & ((v110 >> 4) ^ (v110 >> 9));
          v115 = (uint64_t ****)(v112 + 16 * v114);
          v116 = *v115;
          if (*v115 != v110)
          {
            v117 = 1;
            do
            {
              if (v116 == (uint64_t ***)-4096)
                goto LABEL_114;
              v118 = v114 + v117++;
              v114 = v118 & (v113 - 1);
              v116 = *(uint64_t ****)(v112 + 16 * v114);
            }
            while (v116 != v110);
            v115 = (uint64_t ****)(v112 + 16 * v114);
          }
        }
        else
        {
LABEL_114:
          v115 = (uint64_t ****)(v112 + 16 * v113);
        }
        v125 = v115[1];
        v128 = (size_t)*v125;
        v126 = (char *)(v125 + 2);
        v127 = v128;
        goto LABEL_116;
      }
      v127 = 0;
      v126 = &byte_1C871356D;
LABEL_116:
      if (v127 >= v108)
        v129 = v108;
      else
        v129 = v127;
      if (v129 && (v130 = memcmp(v107, v126, v129)) != 0)
      {
        if ((v130 & 0x80000000) == 0)
          return 1;
      }
      else if (v108 >= v127)
      {
        return 1;
      }
      *v81 = v82;
      *(a2 - 1) = v83;
      v131 = *v81;
      v132 = *v80;
      v133 = *(uint64_t ****)(*v81 + 40);
      if ((*((_BYTE *)v133 + 23) & 0x10) != 0)
      {
        v134 = ***v133;
        v135 = *(_QWORD *)(v134 + 152);
        v136 = *(unsigned int *)(v134 + 168);
        if ((_DWORD)v136)
        {
          LODWORD(v137) = (v136 - 1) & ((v133 >> 4) ^ (v133 >> 9));
          v138 = (uint64_t ****)(v135 + 16 * v137);
          v139 = *v138;
          if (*v138 != v133)
          {
            v140 = 1;
            do
            {
              if (v139 == (uint64_t ***)-4096)
                goto LABEL_131;
              v141 = v137 + v140++;
              v137 = v141 & (v136 - 1);
              v139 = *(uint64_t ****)(v135 + 16 * v137);
            }
            while (v139 != v133);
            v138 = (uint64_t ****)(v135 + 16 * v137);
          }
        }
        else
        {
LABEL_131:
          v138 = (uint64_t ****)(v135 + 16 * v136);
        }
        v142 = v138[1];
        v145 = (size_t)*v142;
        v143 = (char *)(v142 + 2);
        v144 = v145;
        goto LABEL_133;
      }
      v144 = 0;
      v143 = &byte_1C871356D;
LABEL_133:
      v146 = *(uint64_t ****)(v132 + 40);
      if ((*((_BYTE *)v146 + 23) & 0x10) != 0)
      {
        v147 = ***v146;
        v148 = *(_QWORD *)(v147 + 152);
        v149 = *(unsigned int *)(v147 + 168);
        if ((_DWORD)v149)
        {
          LODWORD(v150) = (v149 - 1) & ((v146 >> 4) ^ (v146 >> 9));
          v151 = (uint64_t ****)(v148 + 16 * v150);
          v152 = *v151;
          if (*v151 != v146)
          {
            v153 = 1;
            do
            {
              if (v152 == (uint64_t ***)-4096)
                goto LABEL_140;
              v154 = v150 + v153++;
              v150 = v154 & (v149 - 1);
              v152 = *(uint64_t ****)(v148 + 16 * v150);
            }
            while (v152 != v146);
            v151 = (uint64_t ****)(v148 + 16 * v150);
          }
        }
        else
        {
LABEL_140:
          v151 = (uint64_t ****)(v148 + 16 * v149);
        }
        v155 = v151[1];
        v158 = (size_t)*v155;
        v156 = (char *)(v155 + 2);
        v157 = v158;
        goto LABEL_142;
      }
      v157 = 0;
      v156 = &byte_1C871356D;
LABEL_142:
      if (v157 >= v144)
        v159 = v144;
      else
        v159 = v157;
      if (v159 && (v160 = memcmp(v143, v156, v159)) != 0)
      {
        if ((v160 & 0x80000000) == 0)
          return 1;
      }
      else if (v144 >= v157)
      {
        return 1;
      }
      *v80 = v131;
      *v81 = v132;
      v161 = a1[1];
      v162 = *(uint64_t ****)(v131 + 40);
      if ((*((_BYTE *)v162 + 23) & 0x10) != 0)
      {
        v163 = ***v162;
        v164 = *(_QWORD *)(v163 + 152);
        v165 = *(unsigned int *)(v163 + 168);
        if ((_DWORD)v165)
        {
          LODWORD(v166) = (v165 - 1) & ((v162 >> 4) ^ (v162 >> 9));
          v167 = (uint64_t ****)(v164 + 16 * v166);
          v168 = *v167;
          if (*v167 != v162)
          {
            v169 = 1;
            do
            {
              if (v168 == (uint64_t ***)-4096)
                goto LABEL_157;
              v170 = v166 + v169++;
              v166 = v170 & (v165 - 1);
              v168 = *(uint64_t ****)(v164 + 16 * v166);
            }
            while (v168 != v162);
            v167 = (uint64_t ****)(v164 + 16 * v166);
          }
        }
        else
        {
LABEL_157:
          v167 = (uint64_t ****)(v164 + 16 * v165);
        }
        v171 = v167[1];
        v174 = (size_t)*v171;
        v172 = (char *)(v171 + 2);
        v173 = v174;
        goto LABEL_159;
      }
      v173 = 0;
      v172 = &byte_1C871356D;
LABEL_159:
      v175 = *(uint64_t ****)(v161 + 40);
      if ((*((_BYTE *)v175 + 23) & 0x10) != 0)
      {
        v176 = ***v175;
        v177 = *(_QWORD *)(v176 + 152);
        v178 = *(unsigned int *)(v176 + 168);
        if ((_DWORD)v178)
        {
          LODWORD(v179) = (v178 - 1) & ((v175 >> 4) ^ (v175 >> 9));
          v180 = (uint64_t ****)(v177 + 16 * v179);
          v181 = *v180;
          if (*v180 != v175)
          {
            v182 = 1;
            do
            {
              if (v181 == (uint64_t ***)-4096)
                goto LABEL_166;
              v183 = v179 + v182++;
              v179 = v183 & (v178 - 1);
              v181 = *(uint64_t ****)(v177 + 16 * v179);
            }
            while (v181 != v175);
            v180 = (uint64_t ****)(v177 + 16 * v179);
          }
        }
        else
        {
LABEL_166:
          v180 = (uint64_t ****)(v177 + 16 * v178);
        }
        v184 = v180[1];
        v187 = (size_t)*v184;
        v185 = (char *)(v184 + 2);
        v186 = v187;
        goto LABEL_168;
      }
      v186 = 0;
      v185 = &byte_1C871356D;
LABEL_168:
      if (v186 >= v173)
        v188 = v173;
      else
        v188 = v186;
      if (v188 && (v189 = memcmp(v172, v185, v188)) != 0)
      {
        if ((v189 & 0x80000000) == 0)
          return 1;
      }
      else if (v173 >= v186)
      {
        return 1;
      }
      a1[1] = v131;
      a1[2] = v161;
      v190 = *a1;
      v191 = *(uint64_t ****)(v131 + 40);
      if ((*((_BYTE *)v191 + 23) & 0x10) != 0)
      {
        v192 = ***v191;
        v193 = *(_QWORD *)(v192 + 152);
        v194 = *(unsigned int *)(v192 + 168);
        if ((_DWORD)v194)
        {
          LODWORD(v195) = (v194 - 1) & ((v191 >> 4) ^ (v191 >> 9));
          v196 = (uint64_t ****)(v193 + 16 * v195);
          v197 = *v196;
          if (*v196 != v191)
          {
            v198 = 1;
            do
            {
              if (v197 == (uint64_t ***)-4096)
                goto LABEL_187;
              v199 = v195 + v198++;
              v195 = v199 & (v194 - 1);
              v197 = *(uint64_t ****)(v193 + 16 * v195);
            }
            while (v197 != v191);
            v196 = (uint64_t ****)(v193 + 16 * v195);
          }
        }
        else
        {
LABEL_187:
          v196 = (uint64_t ****)(v193 + 16 * v194);
        }
        v200 = v196[1];
        v203 = (size_t)*v200;
        v201 = (char *)(v200 + 2);
        v202 = v203;
        goto LABEL_189;
      }
      v202 = 0;
      v201 = &byte_1C871356D;
LABEL_189:
      v204 = *(uint64_t ****)(v190 + 40);
      if ((*((_BYTE *)v204 + 23) & 0x10) != 0)
      {
        v205 = ***v204;
        v206 = *(_QWORD *)(v205 + 152);
        v207 = *(unsigned int *)(v205 + 168);
        if ((_DWORD)v207)
        {
          LODWORD(v208) = (v207 - 1) & ((v204 >> 4) ^ (v204 >> 9));
          v209 = (uint64_t ****)(v206 + 16 * v208);
          v210 = *v209;
          if (*v209 != v204)
          {
            v211 = 1;
            do
            {
              if (v210 == (uint64_t ***)-4096)
                goto LABEL_196;
              v212 = v208 + v211++;
              v208 = v212 & (v207 - 1);
              v210 = *(uint64_t ****)(v206 + 16 * v208);
            }
            while (v210 != v204);
            v209 = (uint64_t ****)(v206 + 16 * v208);
          }
        }
        else
        {
LABEL_196:
          v209 = (uint64_t ****)(v206 + 16 * v207);
        }
        v213 = v209[1];
        v216 = (size_t)*v213;
        v214 = (char *)(v213 + 2);
        v215 = v216;
        goto LABEL_198;
      }
      v215 = 0;
      v214 = &byte_1C871356D;
LABEL_198:
      if (v215 >= v202)
        v217 = v202;
      else
        v217 = v215;
      if (v217 && (v218 = memcmp(v201, v214, v217)) != 0)
      {
        if ((v218 & 0x80000000) == 0)
          return 1;
      }
      else if (v202 >= v215)
      {
        return 1;
      }
      *a1 = v131;
      a1[1] = v190;
      return 1;
    default:
      v17 = a1 + 2;
      sub_1C5BEE218(a1, a1 + 1, a1 + 2);
      v18 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v19 = 0;
      break;
  }
  do
  {
    v20 = *v18;
    v21 = *(uint64_t ****)(*v18 + 40);
    if ((*((_BYTE *)v21 + 23) & 0x10) != 0)
    {
      v22 = ***v21;
      v23 = *(_QWORD *)(v22 + 152);
      v24 = *(unsigned int *)(v22 + 168);
      if ((_DWORD)v24)
      {
        LODWORD(v25) = (v24 - 1) & ((v21 >> 4) ^ (v21 >> 9));
        v26 = (uint64_t ****)(v23 + 16 * v25);
        v27 = *v26;
        if (*v26 == v21)
        {
LABEL_19:
          v30 = v26[1];
          v33 = (size_t)*v30;
          v31 = (char *)(v30 + 2);
          v32 = v33;
          goto LABEL_20;
        }
        v28 = 1;
        while (v27 != (uint64_t ***)-4096)
        {
          v29 = v25 + v28++;
          v25 = v29 & (v24 - 1);
          v27 = *(uint64_t ****)(v23 + 16 * v25);
          if (v27 == v21)
          {
            v26 = (uint64_t ****)(v23 + 16 * v25);
            goto LABEL_19;
          }
        }
      }
      v26 = (uint64_t ****)(v23 + 16 * v24);
      goto LABEL_19;
    }
    v32 = 0;
    v31 = &byte_1C871356D;
LABEL_20:
    v34 = *v17;
    v35 = *(uint64_t ****)(*v17 + 40);
    if ((*((_BYTE *)v35 + 23) & 0x10) == 0)
    {
      v46 = 0;
      v45 = &byte_1C871356D;
      goto LABEL_29;
    }
    v36 = ***v35;
    v37 = *(_QWORD *)(v36 + 152);
    v38 = *(unsigned int *)(v36 + 168);
    if (!(_DWORD)v38)
      goto LABEL_27;
    LODWORD(v39) = (v38 - 1) & ((v35 >> 4) ^ (v35 >> 9));
    v40 = (uint64_t ****)(v37 + 16 * v39);
    v41 = *v40;
    if (*v40 != v35)
    {
      v42 = 1;
      while (v41 != (uint64_t ***)-4096)
      {
        v43 = v39 + v42++;
        v39 = v43 & (v38 - 1);
        v41 = *(uint64_t ****)(v37 + 16 * v39);
        if (v41 == v35)
        {
          v40 = (uint64_t ****)(v37 + 16 * v39);
          goto LABEL_28;
        }
      }
LABEL_27:
      v40 = (uint64_t ****)(v37 + 16 * v38);
    }
LABEL_28:
    v44 = v40[1];
    v47 = (size_t)*v44;
    v45 = (char *)(v44 + 2);
    v46 = v47;
LABEL_29:
    if (v46 >= v32)
      v48 = v32;
    else
      v48 = v46;
    if (v48 && (v49 = memcmp(v31, v45, v48)) != 0)
    {
      if ((v49 & 0x80000000) == 0)
        goto LABEL_71;
    }
    else if (v32 >= v46)
    {
      goto LABEL_71;
    }
    v50 = v18;
    while (1)
    {
      *v50 = v34;
      if (v17 == a1)
        break;
      v50 = v17;
      v51 = *(uint64_t ****)(v20 + 40);
      if ((*((_BYTE *)v51 + 23) & 0x10) != 0)
      {
        v52 = ***v51;
        v53 = *(_QWORD *)(v52 + 152);
        v54 = *(unsigned int *)(v52 + 168);
        if (!(_DWORD)v54)
          goto LABEL_46;
        LODWORD(v55) = (v54 - 1) & ((v51 >> 4) ^ (v51 >> 9));
        v56 = (uint64_t ****)(v53 + 16 * v55);
        v57 = *v56;
        if (*v56 != v51)
        {
          v58 = 1;
          while (v57 != (uint64_t ***)-4096)
          {
            v59 = v55 + v58++;
            v55 = v59 & (v54 - 1);
            v57 = *(uint64_t ****)(v53 + 16 * v55);
            if (v57 == v51)
            {
              v56 = (uint64_t ****)(v53 + 16 * v55);
              goto LABEL_47;
            }
          }
LABEL_46:
          v56 = (uint64_t ****)(v53 + 16 * v54);
        }
LABEL_47:
        v60 = v56[1];
        v63 = (size_t)*v60;
        v61 = (char *)(v60 + 2);
        v62 = v63;
        goto LABEL_48;
      }
      v62 = 0;
      v61 = &byte_1C871356D;
LABEL_48:
      --v17;
      v34 = *(v50 - 1);
      v64 = *(uint64_t ****)(v34 + 40);
      if ((*((_BYTE *)v64 + 23) & 0x10) == 0)
      {
        v75 = 0;
        v74 = &byte_1C871356D;
        goto LABEL_57;
      }
      v65 = ***v64;
      v66 = *(_QWORD *)(v65 + 152);
      v67 = *(unsigned int *)(v65 + 168);
      if (!(_DWORD)v67)
        goto LABEL_55;
      LODWORD(v68) = (v67 - 1) & ((v64 >> 4) ^ (v64 >> 9));
      v69 = (uint64_t ****)(v66 + 16 * v68);
      v70 = *v69;
      if (*v69 != v64)
      {
        v71 = 1;
        while (v70 != (uint64_t ***)-4096)
        {
          v72 = v68 + v71++;
          v68 = v72 & (v67 - 1);
          v70 = *(uint64_t ****)(v66 + 16 * v68);
          if (v70 == v64)
          {
            v69 = (uint64_t ****)(v66 + 16 * v68);
            goto LABEL_56;
          }
        }
LABEL_55:
        v69 = (uint64_t ****)(v66 + 16 * v67);
      }
LABEL_56:
      v73 = v69[1];
      v76 = (size_t)*v73;
      v74 = (char *)(v73 + 2);
      v75 = v76;
LABEL_57:
      if (v75 >= v62)
        v77 = v62;
      else
        v77 = v75;
      if (v77 && (v78 = memcmp(v61, v74, v77)) != 0)
      {
        v79 = (v78 >> 31) | 1;
      }
      else
      {
        if (v62 >= v75)
          goto LABEL_70;
        v79 = -1;
      }
      if (v79 != -1)
        goto LABEL_70;
    }
    v50 = a1;
LABEL_70:
    *v50 = v20;
    if (++v19 == 8)
      return v18 + 1 == a2;
LABEL_71:
    v17 = v18++;
  }
  while (v18 != a2);
  return 1;
}

char *sub_1C5BEF34C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t ***v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ****v15;
  uint64_t ***v16;
  int v17;
  int v18;
  uint64_t ***v19;
  char *result;
  size_t v21;
  size_t v22;
  uint64_t ***v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ****v28;
  uint64_t ***v29;
  int v30;
  int v31;
  uint64_t ***v32;
  char *v33;
  size_t v34;
  size_t v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t ***v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t ****v44;
  uint64_t ***v45;
  int v46;
  int v47;
  uint64_t ***v48;
  size_t v49;
  size_t v50;
  uint64_t ***v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t ****v56;
  uint64_t ***v57;
  int v58;
  int v59;
  uint64_t ***v60;
  char *v61;
  size_t v62;
  size_t v63;
  size_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t ***v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t ****v72;
  uint64_t ***v73;
  int v74;
  int v75;
  uint64_t ***v76;
  size_t v77;
  size_t v78;
  uint64_t ***v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t ****v84;
  uint64_t ***v85;
  int v86;
  int v87;
  uint64_t ***v88;
  char *v89;
  size_t v90;
  size_t v91;
  size_t v92;

  sub_1C5BEE218(a1, a2, a3);
  v8 = *a4;
  v9 = *a3;
  v10 = *(uint64_t ****)(*a4 + 40);
  if ((*((_BYTE *)v10 + 23) & 0x10) != 0)
  {
    v11 = ***v10;
    v12 = *(_QWORD *)(v11 + 152);
    v13 = *(unsigned int *)(v11 + 168);
    if ((_DWORD)v13)
    {
      LODWORD(v14) = (v13 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      v15 = (uint64_t ****)(v12 + 16 * v14);
      v16 = *v15;
      if (*v15 == v10)
      {
LABEL_9:
        v19 = v15[1];
        v22 = (size_t)*v19;
        result = (char *)(v19 + 2);
        v21 = v22;
        goto LABEL_10;
      }
      v17 = 1;
      while (v16 != (uint64_t ***)-4096)
      {
        v18 = v14 + v17++;
        v14 = v18 & (v13 - 1);
        v16 = *(uint64_t ****)(v12 + 16 * v14);
        if (v16 == v10)
        {
          v15 = (uint64_t ****)(v12 + 16 * v14);
          goto LABEL_9;
        }
      }
    }
    v15 = (uint64_t ****)(v12 + 16 * v13);
    goto LABEL_9;
  }
  v21 = 0;
  result = &byte_1C871356D;
LABEL_10:
  v23 = *(uint64_t ****)(v9 + 40);
  if ((*((_BYTE *)v23 + 23) & 0x10) != 0)
  {
    v24 = ***v23;
    v25 = *(_QWORD *)(v24 + 152);
    v26 = *(unsigned int *)(v24 + 168);
    if ((_DWORD)v26)
    {
      LODWORD(v27) = (v26 - 1) & ((v23 >> 4) ^ (v23 >> 9));
      v28 = (uint64_t ****)(v25 + 16 * v27);
      v29 = *v28;
      if (*v28 == v23)
      {
LABEL_18:
        v32 = v28[1];
        v35 = (size_t)*v32;
        v33 = (char *)(v32 + 2);
        v34 = v35;
        goto LABEL_19;
      }
      v30 = 1;
      while (v29 != (uint64_t ***)-4096)
      {
        v31 = v27 + v30++;
        v27 = v31 & (v26 - 1);
        v29 = *(uint64_t ****)(v25 + 16 * v27);
        if (v29 == v23)
        {
          v28 = (uint64_t ****)(v25 + 16 * v27);
          goto LABEL_18;
        }
      }
    }
    v28 = (uint64_t ****)(v25 + 16 * v26);
    goto LABEL_18;
  }
  v34 = 0;
  v33 = &byte_1C871356D;
LABEL_19:
  if (v34 >= v21)
    v36 = v21;
  else
    v36 = v34;
  if (v36 && (result = (char *)memcmp(result, v33, v36), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v21 >= v34)
  {
    return result;
  }
  *a3 = v8;
  *a4 = v9;
  v37 = *a3;
  v38 = *a2;
  v39 = *(uint64_t ****)(*a3 + 40);
  if ((*((_BYTE *)v39 + 23) & 0x10) != 0)
  {
    v40 = ***v39;
    v41 = *(_QWORD *)(v40 + 152);
    v42 = *(unsigned int *)(v40 + 168);
    if ((_DWORD)v42)
    {
      LODWORD(v43) = (v42 - 1) & ((v39 >> 4) ^ (v39 >> 9));
      v44 = (uint64_t ****)(v41 + 16 * v43);
      v45 = *v44;
      if (*v44 == v39)
      {
LABEL_35:
        v48 = v44[1];
        v50 = (size_t)*v48;
        result = (char *)(v48 + 2);
        v49 = v50;
        goto LABEL_36;
      }
      v46 = 1;
      while (v45 != (uint64_t ***)-4096)
      {
        v47 = v43 + v46++;
        v43 = v47 & (v42 - 1);
        v45 = *(uint64_t ****)(v41 + 16 * v43);
        if (v45 == v39)
        {
          v44 = (uint64_t ****)(v41 + 16 * v43);
          goto LABEL_35;
        }
      }
    }
    v44 = (uint64_t ****)(v41 + 16 * v42);
    goto LABEL_35;
  }
  v49 = 0;
  result = &byte_1C871356D;
LABEL_36:
  v51 = *(uint64_t ****)(v38 + 40);
  if ((*((_BYTE *)v51 + 23) & 0x10) != 0)
  {
    v52 = ***v51;
    v53 = *(_QWORD *)(v52 + 152);
    v54 = *(unsigned int *)(v52 + 168);
    if ((_DWORD)v54)
    {
      LODWORD(v55) = (v54 - 1) & ((v51 >> 4) ^ (v51 >> 9));
      v56 = (uint64_t ****)(v53 + 16 * v55);
      v57 = *v56;
      if (*v56 == v51)
      {
LABEL_44:
        v60 = v56[1];
        v63 = (size_t)*v60;
        v61 = (char *)(v60 + 2);
        v62 = v63;
        goto LABEL_45;
      }
      v58 = 1;
      while (v57 != (uint64_t ***)-4096)
      {
        v59 = v55 + v58++;
        v55 = v59 & (v54 - 1);
        v57 = *(uint64_t ****)(v53 + 16 * v55);
        if (v57 == v51)
        {
          v56 = (uint64_t ****)(v53 + 16 * v55);
          goto LABEL_44;
        }
      }
    }
    v56 = (uint64_t ****)(v53 + 16 * v54);
    goto LABEL_44;
  }
  v62 = 0;
  v61 = &byte_1C871356D;
LABEL_45:
  if (v62 >= v49)
    v64 = v49;
  else
    v64 = v62;
  if (v64 && (result = (char *)memcmp(result, v61, v64), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v49 >= v62)
  {
    return result;
  }
  *a2 = v37;
  *a3 = v38;
  v65 = *a2;
  v66 = *a1;
  v67 = *(uint64_t ****)(*a2 + 40);
  if ((*((_BYTE *)v67 + 23) & 0x10) != 0)
  {
    v68 = ***v67;
    v69 = *(_QWORD *)(v68 + 152);
    v70 = *(unsigned int *)(v68 + 168);
    if ((_DWORD)v70)
    {
      LODWORD(v71) = (v70 - 1) & ((v67 >> 4) ^ (v67 >> 9));
      v72 = (uint64_t ****)(v69 + 16 * v71);
      v73 = *v72;
      if (*v72 == v67)
      {
LABEL_61:
        v76 = v72[1];
        v78 = (size_t)*v76;
        result = (char *)(v76 + 2);
        v77 = v78;
        goto LABEL_62;
      }
      v74 = 1;
      while (v73 != (uint64_t ***)-4096)
      {
        v75 = v71 + v74++;
        v71 = v75 & (v70 - 1);
        v73 = *(uint64_t ****)(v69 + 16 * v71);
        if (v73 == v67)
        {
          v72 = (uint64_t ****)(v69 + 16 * v71);
          goto LABEL_61;
        }
      }
    }
    v72 = (uint64_t ****)(v69 + 16 * v70);
    goto LABEL_61;
  }
  v77 = 0;
  result = &byte_1C871356D;
LABEL_62:
  v79 = *(uint64_t ****)(v66 + 40);
  if ((*((_BYTE *)v79 + 23) & 0x10) != 0)
  {
    v80 = ***v79;
    v81 = *(_QWORD *)(v80 + 152);
    v82 = *(unsigned int *)(v80 + 168);
    if ((_DWORD)v82)
    {
      LODWORD(v83) = (v82 - 1) & ((v79 >> 4) ^ (v79 >> 9));
      v84 = (uint64_t ****)(v81 + 16 * v83);
      v85 = *v84;
      if (*v84 == v79)
      {
LABEL_70:
        v88 = v84[1];
        v91 = (size_t)*v88;
        v89 = (char *)(v88 + 2);
        v90 = v91;
        goto LABEL_71;
      }
      v86 = 1;
      while (v85 != (uint64_t ***)-4096)
      {
        v87 = v83 + v86++;
        v83 = v87 & (v82 - 1);
        v85 = *(uint64_t ****)(v81 + 16 * v83);
        if (v85 == v79)
        {
          v84 = (uint64_t ****)(v81 + 16 * v83);
          goto LABEL_70;
        }
      }
    }
    v84 = (uint64_t ****)(v81 + 16 * v82);
    goto LABEL_70;
  }
  v90 = 0;
  v89 = &byte_1C871356D;
LABEL_71:
  if (v90 >= v77)
    v92 = v77;
  else
    v92 = v90;
  if (v92 && (result = (char *)memcmp(result, v89, v92), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v77 >= v90)
  {
    return result;
  }
  *a1 = v65;
  *a2 = v66;
  return result;
}

void sub_1C5BEF78C(uint64_t a1, uint64_t a2, char **a3, _DWORD *a4, char **a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v9;
  char **v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[31];

  if (a1)
    v5 = a1 + 24;
  else
    v5 = 0;
  v6 = a2 + 24;
  if (!a2)
    v6 = 0;
  v49 = v6;
  v50 = *(_QWORD *)(a1 + 40) + 40;
  if (v5 != v50 && v5 != v6)
  {
    v9 = a4;
    v10 = a3;
    do
    {
      if (v5)
        v11 = v5 - 24;
      else
        v11 = 0;
      v12 = *(unsigned __int8 *)(v11 + 16);
      if (v12 == 84)
        v13 = v11;
      else
        v13 = 0;
      if (v5 && v12 == 84)
      {
        v15 = v10[1];
        v14 = (unint64_t)v10[2];
        if ((unint64_t)v15 >= v14)
        {
          v17 = *v10;
          v18 = (v15 - *v10) >> 3;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 61)
LABEL_87:
            abort();
          v20 = v14 - (_QWORD)v17;
          if (v20 >> 2 > v19)
            v19 = v20 >> 2;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
          {
            if (v21 >> 61)
LABEL_88:
              sub_1C4764EE4();
            v22 = (char *)operator new(8 * v21);
          }
          else
          {
            v22 = 0;
          }
          v23 = &v22[8 * v18];
          *(_QWORD *)v23 = v13;
          v16 = v23 + 8;
          if (v15 == v17)
          {
            v25 = a3;
          }
          else
          {
            do
            {
              v24 = *((_QWORD *)v15 - 1);
              v15 -= 8;
              *((_QWORD *)v23 - 1) = v24;
              v23 -= 8;
            }
            while (v15 != v17);
            v25 = a3;
            v15 = *a3;
          }
          *v25 = v23;
          v25[1] = v16;
          v25[2] = &v22[8 * v21];
          v9 = a4;
          v10 = v25;
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_QWORD *)v15 = v13;
          v16 = v15 + 8;
        }
        v10[1] = v16;
        v12 = *(unsigned __int8 *)(v11 + 16);
      }
      if ((v12 - 29) <= 0xA)
      {
        v26 = *(_QWORD *)(v11 + 40);
        v27 = *(_QWORD *)(v26 + 40);
        if (v27 != v26 + 40)
        {
          if (v27)
            v28 = v27 - 24;
          else
            v28 = 0;
          v29 = *(unsigned __int8 *)(v28 + 16);
          v30 = v29 - 29;
          if (v29 != 30)
          {
            v31 = 2;
            switch(v30)
            {
              case 1:
                __break(1u);
                return;
              case 2:
                v31 = (*(_DWORD *)(v28 + 20) >> 1) & 0x3FFFFFF;
                goto LABEL_81;
              case 3:
              case 9:
                v31 = (*(_DWORD *)(v28 + 20) & 0x7FFFFFF) - 1;
                goto LABEL_81;
              case 4:
                goto LABEL_48;
              case 7:
                v31 = *(_WORD *)(v28 + 18) & 1;
                goto LABEL_81;
              case 8:
                v31 = 1;
                goto LABEL_48;
              case 10:
                v31 = *(_DWORD *)(v28 + 80) + 1;
LABEL_81:
                if (!v31)
                  goto LABEL_74;
                goto LABEL_48;
              default:
                goto LABEL_74;
            }
          }
          if ((*(_DWORD *)(v28 + 20) & 0x7FFFFFF) == 3)
            v31 = 2;
          else
            v31 = 1;
LABEL_48:
          v32 = 0;
          v33 = v31;
          do
          {
            v51 = 0;
            v34 = *(unsigned __int8 *)(v28 + 16);
            if (v34 != 30)
              __asm { BR              X9 }
            v51 = *(_QWORD *)(v28 - 32 - 32 * v32);
            sub_1C6187FB8(v9, &v51, (uint64_t)v52);
            if (v52[16])
            {
              v36 = a5[1];
              v35 = (unint64_t)a5[2];
              if ((unint64_t)v36 >= v35)
              {
                v38 = *a5;
                v39 = (v36 - *a5) >> 3;
                v40 = v39 + 1;
                if ((unint64_t)(v39 + 1) >> 61)
                  goto LABEL_87;
                v41 = v35 - (_QWORD)v38;
                if (v41 >> 2 > v40)
                  v40 = v41 >> 2;
                if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
                  v42 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v42 = v40;
                if (v42)
                {
                  if (v42 >> 61)
                    goto LABEL_88;
                  v43 = (char *)operator new(8 * v42);
                }
                else
                {
                  v43 = 0;
                }
                v44 = &v43[8 * v39];
                *(_QWORD *)v44 = v51;
                v37 = v44 + 8;
                if (v36 != v38)
                {
                  do
                  {
                    v45 = *((_QWORD *)v36 - 1);
                    v36 -= 8;
                    *((_QWORD *)v44 - 1) = v45;
                    v44 -= 8;
                  }
                  while (v36 != v38);
                  v36 = *a5;
                }
                *a5 = v44;
                a5[1] = v37;
                a5[2] = &v43[8 * v42];
                v10 = a3;
                if (v36)
                  operator delete(v36);
                v9 = a4;
              }
              else
              {
                *(_QWORD *)v36 = v51;
                v37 = v36 + 8;
              }
              a5[1] = v37;
            }
            ++v32;
          }
          while (v32 != v33);
        }
      }
LABEL_74:
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != v50 && v5 != v49);
  }
}

uint64_t sub_1C5BEFBC0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5BEAD08(v0, 0);
}

uint64_t sub_1C5BEFBEC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5BE9CC8(v0);
}

uint64_t sub_1C5BEFC14()
{
  int v1;
  int *v2;
  int v3;

  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C617ACEC((uint64_t)&unk_1ED822268, "spp-all-backedges", &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED822268, &dword_1C475E000);
  v3 = 1;
  v1 = 32;
  v2 = &v1;
  sub_1C63239A0(&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED822328, &dword_1C475E000);
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C6323A6C(&v3, (char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED8223E8, &dword_1C475E000);
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C6323B40(&v3, (char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED8224A8, &dword_1C475E000);
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C6323C14(&v3, (char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED822568, &dword_1C475E000);
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C617ACEC((uint64_t)&unk_1ED822628, "spp-no-backedge", &v3, (_BYTE **)&v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED822628, &dword_1C475E000);
}

llvm::reassociate::XorOpnd *llvm::reassociate::XorOpnd::XorOpnd(llvm::reassociate::XorOpnd *this, llvm::Value *a2)
{
  void **v4;
  unsigned int v5;
  int v6;
  llvm::Value *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  llvm::Type *v14;
  BOOL v15;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  *((_QWORD *)this + 2) = 0;
  v4 = (void **)((char *)this + 16);
  *((_DWORD *)this + 6) = 1;
  *(_QWORD *)this = a2;
  v5 = *((unsigned __int8 *)a2 + 16);
  *((_DWORD *)this + 8) = 0;
  if (!a2 || v5 < 0x1C || (v5 & 0xFE) != 0x38)
    goto LABEL_17;
  v6 = *((_DWORD *)a2 + 5);
  v7 = (v6 & 0x40000000) != 0 ? (llvm::Value *)*((_QWORD *)a2 - 1) : (llvm::Value *)((char *)a2 - 32 * (v6 & 0x7FFFFFF));
  v8 = *(unsigned __int8 **)v7;
  v9 = (unsigned __int8 *)*((_QWORD *)v7 + 4);
  v19 = 0;
  v20 = 0;
  v18 = &v20;
  v10 = sub_1C4D89F84((uint64_t)&v18, v8);
  v11 = v10 ? v9 : v8;
  v12 = v10 ? v8 : v9;
  v18 = &v20;
  v19 = 0;
  if (sub_1C4D89F84((uint64_t)&v18, v12))
  {
    v13 = v20;
    if (*((_DWORD *)this + 6) > 0x40u || *(_DWORD *)(v20 + 8) > 0x40u)
    {
      if (v4 != (void **)v20)
      {
        llvm::APInt::reallocate((uint64_t)v4, *(_DWORD *)(v20 + 8));
        v17 = *((unsigned int *)this + 6);
        if (v17 <= 0x40)
          *v4 = *(void **)v13;
        else
          memcpy(*v4, *(const void **)v13, ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
    else
    {
      *((_QWORD *)this + 2) = *(_QWORD *)v20;
      *((_DWORD *)this + 6) = *(_DWORD *)(v13 + 8);
    }
    *((_QWORD *)this + 1) = v11;
    v15 = *((_BYTE *)a2 + 16) == 57;
  }
  else
  {
LABEL_17:
    *((_QWORD *)this + 1) = a2;
    v14 = *(llvm::Type **)a2;
    if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
      v14 = (llvm::Type *)**((_QWORD **)v14 + 2);
    LODWORD(v19) = llvm::Type::getPrimitiveSizeInBits(v14);
    if (v19 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v18, 0, 0);
    else
      v18 = 0;
    if (*((_DWORD *)this + 6) >= 0x41u && *v4)
      MEMORY[0x1CAA32F9C](*v4, 0x1000C8000313F17);
    *((_QWORD *)this + 2) = v18;
    *((_DWORD *)this + 6) = v19;
    v15 = 1;
  }
  *((_BYTE *)this + 36) = v15;
  return this;
}

BOOL IsRelaxed(llvm::Instruction *a1)
{
  return (~*((unsigned __int8 *)a1 + 17) & 0xF2) == 0;
}

void llvm::ReassociatePass::BuildRankMap(uint64_t a1, llvm::Function *this, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t i;
  llvm *v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  BOOL v36;
  unsigned int v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  BOOL v47;
  unsigned int v48;
  _QWORD *v49;
  llvm *v50;
  uint64_t v51;

  if ((*((_WORD *)this + 9) & 1) == 0)
  {
    v6 = *((_QWORD *)this + 11);
LABEL_3:
    v7 = v6;
    goto LABEL_4;
  }
  llvm::Function::BuildLazyArguments(this);
  v6 = *((_QWORD *)this + 11);
  if ((*((_WORD *)this + 9) & 1) == 0)
    goto LABEL_3;
  llvm::Function::BuildLazyArguments(this);
  v7 = *((_QWORD *)this + 11);
LABEL_4:
  v8 = v7 + 40 * *((_QWORD *)this + 12);
  if (v6 != v8)
  {
    v9 = 2;
    while (1)
    {
      v51 = v6;
      v39 = *(_DWORD *)(a1 + 40);
      if (!v39)
        break;
      v40 = *(_QWORD *)(a1 + 24);
      v41 = v39 - 1;
      v42 = v41 & ((v6 >> 4) ^ (v6 >> 9));
      v43 = (_QWORD *)(v40 + 16 * v42);
      v44 = *v43;
      if (v6 != *v43)
      {
        v45 = 0;
        v46 = 1;
        while (v44 != -4096)
        {
          if (v45)
            v47 = 0;
          else
            v47 = v44 == -8192;
          if (v47)
            v45 = v43;
          v48 = v42 + v46++;
          v42 = v48 & v41;
          v43 = (_QWORD *)(v40 + 16 * v42);
          v44 = *v43;
          if (v6 == *v43)
            goto LABEL_65;
        }
        if (v45)
          v49 = v45;
        else
          v49 = v43;
        goto LABEL_64;
      }
LABEL_65:
      *((_DWORD *)v43 + 2) = ++v9;
      v6 += 40;
      if (v6 == v8)
        goto LABEL_6;
    }
    v49 = 0;
LABEL_64:
    v43 = sub_1C509B474(a1 + 24, (uint64_t)&v51, &v51, v49);
    *v43 = v51;
    *((_DWORD *)v43 + 2) = 0;
    goto LABEL_65;
  }
  v9 = 2;
LABEL_6:
  v11 = *a3;
  v10 = a3[1];
  if (v10 != *a3)
  {
LABEL_7:
    v13 = *(_QWORD *)(v10 - 8);
    v10 -= 8;
    v12 = v13;
    v51 = v13;
    v14 = *(_DWORD *)(a1 + 16);
    if (v14)
    {
      v15 = v14 - 1;
      v16 = ((v12 >> 4) ^ (v12 >> 9)) & v15;
      v17 = (_QWORD *)(*(_QWORD *)a1 + 16 * v16);
      v18 = *v17;
      if (v12 == *v17)
      {
LABEL_9:
        v19 = ++v9 << 16;
        *((_DWORD *)v17 + 2) = v9 << 16;
        v20 = v12 + 40;
        for (i = *(_QWORD *)(v12 + 48); ; i = *(_QWORD *)(i + 8))
        {
          if (i == v20)
          {
            if (v10 == v11)
              return;
            goto LABEL_7;
          }
          v22 = i ? (llvm *)(i - 24) : 0;
          if (llvm::mayHaveNonDefUseDependency(v22, this))
            break;
LABEL_15:
          ;
        }
        v50 = v22;
        v23 = *(_DWORD *)(a1 + 40);
        if (v23)
        {
          v24 = *(_QWORD *)(a1 + 24);
          v25 = v23 - 1;
          v26 = v25 & ((v22 >> 4) ^ (v22 >> 9));
          v27 = (_QWORD *)(v24 + 16 * v26);
          v28 = *v27;
          if (v22 == (llvm *)*v27)
          {
LABEL_31:
            *((_DWORD *)v27 + 2) = ++v19;
            goto LABEL_15;
          }
          v29 = 0;
          v30 = 1;
          while (v28 != -4096)
          {
            if (v29)
              v31 = 0;
            else
              v31 = v28 == -8192;
            if (v31)
              v29 = v27;
            v32 = v26 + v30++;
            v26 = v32 & v25;
            v27 = (_QWORD *)(v24 + 16 * v26);
            v28 = *v27;
            if (v22 == (llvm *)*v27)
              goto LABEL_31;
          }
          if (v29)
            v33 = v29;
          else
            v33 = v27;
        }
        else
        {
          v33 = 0;
        }
        v27 = sub_1C509B474(a1 + 24, (uint64_t)&v50, (uint64_t *)&v50, v33);
        *v27 = v50;
        *((_DWORD *)v27 + 2) = 0;
        goto LABEL_31;
      }
      v34 = 0;
      v35 = 1;
      while (v18 != -4096)
      {
        if (v34)
          v36 = 0;
        else
          v36 = v18 == -8192;
        if (v36)
          v34 = v17;
        v37 = v16 + v35++;
        v16 = v37 & v15;
        v17 = (_QWORD *)(*(_QWORD *)a1 + 16 * v16);
        v18 = *v17;
        if (v12 == *v17)
          goto LABEL_9;
      }
      if (v34)
        v38 = v34;
      else
        v38 = v17;
    }
    else
    {
      v38 = 0;
    }
    v17 = sub_1C4DE3FA0(a1, (uint64_t)&v51, &v51, v38);
    *v17 = v51;
    *((_DWORD *)v17 + 2) = 0;
    v12 = v51;
    goto LABEL_9;
  }
}

uint64_t llvm::ReassociatePass::getRank(llvm::ReassociatePass *this, llvm::Value *a2)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  llvm::Value **v10;
  llvm::Value *v11;
  llvm::Value **v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  unsigned int v20;
  llvm::Value **v21;
  llvm::Value *v22;
  llvm::Value **v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  llvm::Value **v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  llvm::Value **v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char *v47;
  unsigned int Rank;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  llvm::Value **v55;
  llvm::Value *v56;
  llvm::Value **v57;
  int v58;
  BOOL v59;
  unsigned int v60;
  llvm::Value **v61;
  _BYTE v63[2];
  llvm::Value *v64;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (!a2 || v4 <= 0x1B)
  {
    if (v4 != 21)
      return 0;
    v17 = (char *)this + 24;
    v16 = *((_QWORD *)this + 3);
    v64 = a2;
    v18 = *((_DWORD *)this + 10);
    if (v18)
    {
      v19 = v18 - 1;
      v20 = v19 & ((a2 >> 4) ^ (a2 >> 9));
      v21 = (llvm::Value **)(v16 + 16 * v20);
      v22 = *v21;
      if (*v21 == a2)
        return *((unsigned int *)v21 + 2);
      v23 = 0;
      v24 = 1;
      while (v22 != (llvm::Value *)-4096)
      {
        if (v23)
          v25 = 0;
        else
          v25 = v22 == (llvm::Value *)-8192;
        if (v25)
          v23 = v21;
        v26 = v20 + v24++;
        v20 = v26 & v19;
        v21 = (llvm::Value **)(v16 + 16 * v20);
        v22 = *v21;
        if (*v21 == a2)
          return *((unsigned int *)v21 + 2);
      }
      if (v23)
        v39 = v23;
      else
        v39 = v21;
    }
    else
    {
      v39 = 0;
    }
    v21 = (llvm::Value **)sub_1C509B474((uint64_t)v17, (uint64_t)&v64, (uint64_t *)&v64, v39);
    *v21 = v64;
    *((_DWORD *)v21 + 2) = 0;
    return *((unsigned int *)v21 + 2);
  }
  v5 = *((_QWORD *)this + 3);
  v64 = a2;
  v6 = *((_DWORD *)this + 10);
  v7 = a2 >> 4;
  if (v6)
  {
    v8 = v6 - 1;
    v9 = v8 & (v7 ^ (a2 >> 9));
    v10 = (llvm::Value **)(v5 + 16 * v9);
    v11 = *v10;
    if (*v10 == a2)
      goto LABEL_31;
    v12 = 0;
    v13 = 1;
    while (v11 != (llvm::Value *)-4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == (llvm::Value *)-8192;
      if (v14)
        v12 = v10;
      v15 = v9 + v13++;
      v9 = v15 & v8;
      v10 = (llvm::Value **)(v5 + 16 * v9);
      v11 = *v10;
      if (*v10 == a2)
        goto LABEL_31;
    }
    if (v12)
      v28 = v12;
    else
      v28 = v10;
  }
  else
  {
    v28 = 0;
  }
  v10 = (llvm::Value **)sub_1C509B474((uint64_t)this + 24, (uint64_t)&v64, (uint64_t *)&v64, v28);
  *v10 = v64;
  *((_DWORD *)v10 + 2) = 0;
LABEL_31:
  v27 = *((unsigned int *)v10 + 2);
  if (!(_DWORD)v27)
  {
    v29 = *((_QWORD *)a2 + 5);
    v64 = (llvm::Value *)v29;
    v30 = *((_DWORD *)this + 4);
    if (v30)
    {
      v31 = v30 - 1;
      v32 = ((v29 >> 4) ^ (v29 >> 9)) & v31;
      v33 = (_QWORD *)(*(_QWORD *)this + 16 * v32);
      v34 = *v33;
      if (v29 == *v33)
        goto LABEL_52;
      v35 = 0;
      v36 = 1;
      while (v34 != -4096)
      {
        if (v35)
          v37 = 0;
        else
          v37 = v34 == -8192;
        if (v37)
          v35 = v33;
        v38 = v32 + v36++;
        v32 = v38 & v31;
        v33 = (_QWORD *)(*(_QWORD *)this + 16 * v32);
        v34 = *v33;
        if (v29 == *v33)
          goto LABEL_52;
      }
      if (v35)
        v40 = v35;
      else
        v40 = v33;
    }
    else
    {
      v40 = 0;
    }
    v33 = sub_1C4DE3FA0((uint64_t)this, (uint64_t)&v64, (uint64_t *)&v64, v40);
    *v33 = v64;
    *((_DWORD *)v33 + 2) = 0;
LABEL_52:
    v41 = *((_DWORD *)v33 + 2);
    v42 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
    if ((_DWORD)v42)
      v43 = v41 == 0;
    else
      v43 = 1;
    if (v43)
    {
      v27 = 0;
    }
    else
    {
      v44 = 0;
      LODWORD(v27) = 0;
      v45 = 32 * v42 - 32;
      do
      {
        v46 = *((_DWORD *)a2 + 5);
        if ((v46 & 0x40000000) != 0)
          v47 = (char *)*((_QWORD *)a2 - 1);
        else
          v47 = (char *)a2 - 32 * (v46 & 0x7FFFFFF);
        Rank = llvm::ReassociatePass::getRank(this, *(llvm::Value **)&v47[v44]);
        if (v27 <= Rank)
          v27 = Rank;
        else
          v27 = v27;
        if (v45 == v44)
          break;
        v44 += 32;
      }
      while ((_DWORD)v27 != v41);
    }
    v49 = *((unsigned __int8 *)a2 + 16);
    if (v49 == 5)
    {
      if (*((_WORD *)a2 + 9) == 30
        && (sub_1C4D9EED4((uint64_t)&v64 + 1, ((llvm::Constant **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4])|| (sub_1C4D9EED4((uint64_t)&v64 + 1, *((llvm::Constant **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))) & 1) != 0))
      {
LABEL_81:
        v64 = a2;
        v51 = *((_DWORD *)this + 10);
        if (v51)
        {
          v52 = *((_QWORD *)this + 3);
          v53 = v51 - 1;
          v54 = v53 & (v7 ^ (a2 >> 9));
          v55 = (llvm::Value **)(v52 + 16 * v54);
          v56 = *v55;
          if (*v55 == a2)
          {
LABEL_96:
            *((_DWORD *)v55 + 2) = v27;
            return v27;
          }
          v57 = 0;
          v58 = 1;
          while (v56 != (llvm::Value *)-4096)
          {
            if (v57)
              v59 = 0;
            else
              v59 = v56 == (llvm::Value *)-8192;
            if (v59)
              v57 = v55;
            v60 = v54 + v58++;
            v54 = v60 & v53;
            v55 = (llvm::Value **)(v52 + 16 * v54);
            v56 = *v55;
            if (*v55 == a2)
              goto LABEL_96;
          }
          if (v57)
            v61 = v57;
          else
            v61 = v55;
        }
        else
        {
          v61 = 0;
        }
        v55 = (llvm::Value **)sub_1C509B474((uint64_t)this + 24, (uint64_t)&v64, (uint64_t *)&v64, v61);
        *v55 = v64;
        *((_DWORD *)v55 + 2) = 0;
        goto LABEL_96;
      }
    }
    else if (v49 == 58
           && ((sub_1C4D9ED34((uint64_t)&v64 + 1, *((llvm::Constant **)a2 - 4)) & 1) != 0
            || (sub_1C4D9ED34((uint64_t)&v64 + 1, *((llvm::Constant **)a2 - 8)) & 1) != 0))
    {
      goto LABEL_81;
    }
    v50 = *((unsigned __int8 *)a2 + 16);
    if (v50 == 5)
    {
      if (*((_WORD *)a2 + 9) == 15
        && (sub_1C4E71060((uint64_t)v63, *((llvm::Constant **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))) & 1) != 0)
      {
        goto LABEL_81;
      }
    }
    else if (v50 == 43 && (sub_1C4D8AC3C((uint64_t)v63, *((llvm::Constant **)a2 - 8)) & 1) != 0)
    {
      goto LABEL_81;
    }
    v27 = v27 + !sub_1C5BFC8AC((uint64_t)a2);
    goto LABEL_81;
  }
  return v27;
}

llvm::ReassociatePass *llvm::ReassociatePass::canonicalizeOperands(llvm::ReassociatePass *this, llvm::Instruction *a2)
{
  llvm::ReassociatePass *v3;
  int v4;
  char *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned int Rank;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = this;
  v4 = *((_DWORD *)a2 + 5);
  if ((v4 & 0x40000000) != 0)
    v5 = (char *)*((_QWORD *)a2 - 1);
  else
    v5 = (char *)a2 - 32 * (v4 & 0x7FFFFFF);
  v6 = *(unsigned __int8 **)v5;
  v7 = (unsigned __int8 *)*((_QWORD *)v5 + 4);
  if (*(unsigned __int8 **)v5 != v7 && v7[16] >= 0x15u)
  {
    if (v6[16] < 0x15u
      || (Rank = llvm::ReassociatePass::getRank(this, (llvm::Value *)v7),
          this = (llvm::ReassociatePass *)llvm::ReassociatePass::getRank(v3, (llvm::Value *)v6),
          Rank < this))
    {
      this = (llvm::ReassociatePass *)llvm::Instruction::isCommutative(a2);
      if ((_DWORD)this)
      {
        v9 = *((_QWORD *)a2 - 8);
        v10 = *((_QWORD *)a2 - 4);
        if (v9 != v10)
        {
          v11 = *((_QWORD *)a2 - 3);
          *((_QWORD *)a2 - 8) = v10;
          *((_QWORD *)a2 - 4) = v9;
          v12 = *(_OWORD *)((char *)a2 - 56);
          v13 = (_QWORD *)*((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 7) = v11;
          *((_QWORD *)a2 - 6) = v13;
          *(_OWORD *)((char *)a2 - 24) = v12;
          *v13 = (char *)a2 - 64;
          v14 = *((_QWORD *)a2 - 7);
          if (v14)
            *(_QWORD *)(v14 + 16) = (char *)a2 - 56;
          **((_QWORD **)a2 - 2) = (char *)a2 - 32;
          v15 = *((_QWORD *)a2 - 3);
          if (v15)
            *(_QWORD *)(v15 + 16) = (char *)a2 - 24;
        }
      }
    }
  }
  return this;
}

void llvm::ReassociatePass::RewriteExprTree(uint64_t a1, llvm::UndefValue **this, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Instruction *v8;
  unsigned int v9;
  llvm::Instruction *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  llvm::Instruction *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  llvm::Type *v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  char v55;
  llvm::Type *v56;
  llvm::DbgVariableIntrinsic **v57;
  uint64_t v58;
  char *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t **v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  int v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  uint64_t *v71;
  void *v72;
  uint64_t *v73;
  int v74;
  BOOL v75;
  unsigned int v76;
  uint64_t *v77;
  uint64_t v78;
  char *v79;
  uint64_t *v80;
  unsigned int v81;
  uint64_t v82;
  char *v83;
  uint64_t *v84;
  unsigned int v85;
  llvm::UndefValue *v86;
  llvm::Value *v87;
  unsigned int v88;
  uint64_t v89;
  llvm::DbgVariableIntrinsic *v90;
  llvm::UndefValue *v91;
  int v92;
  char *v94;
  char *v95;
  uint64_t v96;
  int v97;
  _BYTE v98[64];
  void *v99;
  uint64_t v100;
  _WORD v101[12];
  void *v102;
  uint64_t v103;
  _QWORD v104[10];

  v104[8] = *MEMORY[0x1E0C80C00];
  v102 = v104;
  v103 = 0x800000000;
  v92 = *((unsigned __int8 *)this + 16) - 28;
  v94 = v98;
  v95 = v98;
  v96 = 8;
  v97 = 0;
  v5 = *(unsigned int *)(a3 + 8);
  if (!(_DWORD)v5)
    goto LABEL_29;
  v6 = 0;
  v7 = 16 * v5;
  do
  {
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v94, *(_QWORD *)(*(_QWORD *)a3 + v6 + 8));
    v6 += 16;
  }
  while (v7 != v6);
  if (*(_DWORD *)(a3 + 8) == 2)
  {
    v8 = 0;
    v9 = 0;
    v10 = (llvm::Instruction *)this;
  }
  else
  {
LABEL_29:
    v8 = 0;
    v25 = 2;
    v26 = (llvm::Instruction *)this;
    do
    {
      v27 = *(_QWORD *)(*(_QWORD *)a3 + 16 * (v25 - 2) + 8);
      v28 = (_QWORD *)((char *)v26 - 32);
      v29 = *((_QWORD *)v26 - 4);
      v30 = (uint64_t *)((char *)v26 - 64);
      if (v27 != v29)
      {
        if (v27 == *v30)
        {
          if (llvm::Instruction::isCommutative(v26))
          {
            v31 = *((_QWORD *)v26 - 3);
            *((_QWORD *)v26 - 8) = v29;
            *((_QWORD *)v26 - 4) = v27;
            v32 = *(_OWORD *)((char *)v26 - 56);
            v33 = (uint64_t **)*((_QWORD *)v26 - 2);
            *((_QWORD *)v26 - 7) = v31;
            *((_QWORD *)v26 - 6) = v33;
            *(_OWORD *)((char *)v26 - 24) = v32;
            *v33 = v30;
            v34 = *((_QWORD *)v26 - 7);
            if (v34)
              *(_QWORD *)(v34 + 16) = (char *)v26 - 56;
            **((_QWORD **)v26 - 2) = v28;
            v35 = *((_QWORD *)v26 - 3);
            if (v35)
              *(_QWORD *)(v35 + 16) = (char *)v26 - 24;
          }
        }
        else
        {
          v36 = sub_1C5BF0FB0(*((_QWORD *)v26 - 4), v92);
          if (v36)
          {
            v58 = v36;
            v59 = (char *)sub_1C477672C((uint64_t)&v94, v36);
            v60 = v95 == v94 ? (uint64_t *)((char *)&v96 + 4) : &v96;
            if (v59 == &v95[8 * *(unsigned int *)v60])
            {
              v61 = v103;
              if (v103 >= (unint64_t)HIDWORD(v103))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, (uint64_t)v104, v103 + 1, 8);
                v61 = v103;
              }
              *((_QWORD *)v102 + v61) = v58;
              LODWORD(v103) = v103 + 1;
            }
          }
          if (*v28)
          {
            **((_QWORD **)v26 - 2) = *((_QWORD *)v26 - 3);
            v37 = *((_QWORD *)v26 - 3);
            if (v37)
              *(_QWORD *)(v37 + 16) = *((_QWORD *)v26 - 2);
          }
          *v28 = v27;
          v8 = v26;
          if (v27)
          {
            v40 = *(_QWORD *)(v27 + 8);
            v39 = (_QWORD *)(v27 + 8);
            v38 = v40;
            *((_QWORD *)v26 - 3) = v40;
            if (v40)
              *(_QWORD *)(v38 + 16) = (char *)v26 - 24;
            *((_QWORD *)v26 - 2) = v39;
            *v39 = v28;
            v8 = v26;
          }
        }
        *(_BYTE *)(a1 + 552) = 1;
      }
      v41 = sub_1C5BF0FB0(*v30, v92);
      if (!v41
        || ((v10 = (llvm::Instruction *)v41, v43 = (char *)sub_1C477672C((uint64_t)&v94, v41), v95 != v94)
          ? (v44 = &v96)
          : (v44 = (uint64_t *)((char *)&v96 + 4)),
            v43 != &v95[8 * *(unsigned int *)v44]))
      {
        if ((_DWORD)v103)
        {
          v10 = (llvm::Instruction *)*((_QWORD *)v102 + v103 - 1);
          LODWORD(v103) = v103 - 1;
        }
        else
        {
          v86 = llvm::UndefValue::get(*this, v42);
          v101[8] = 257;
          v87 = llvm::BinaryOperator::Create(v92, v86, (uint64_t)v86, (uint64_t)&v99, (uint64_t)this);
          v10 = v87;
          if ((*(_DWORD *)(*(_QWORD *)v87 + 8) & 0xFE) == 0x12)
            v88 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v87 + 16) + 8);
          else
            v88 = *(_DWORD *)(*(_QWORD *)v87 + 8);
          if (v88 <= 6)
            *((_BYTE *)v87 + 17) |= *((_BYTE *)this + 17) & 0xFE;
        }
        if (*v30)
        {
          **((_QWORD **)v26 - 6) = *((_QWORD *)v26 - 7);
          v62 = *((_QWORD *)v26 - 7);
          if (v62)
            *(_QWORD *)(v62 + 16) = *((_QWORD *)v26 - 6);
        }
        *v30 = (uint64_t)v10;
        if (v10)
        {
          v63 = (uint64_t **)((char *)v10 + 8);
          v64 = *((_QWORD *)v10 + 1);
          *((_QWORD *)v26 - 7) = v64;
          if (v64)
            *(_QWORD *)(v64 + 16) = (char *)v26 - 56;
          *((_QWORD *)v26 - 6) = v63;
          *v63 = v30;
        }
        *(_BYTE *)(a1 + 552) = 1;
        v8 = v26;
      }
      ++v25;
      v26 = v10;
    }
    while (v25 != *(_DWORD *)(a3 + 8));
    v9 = v25 - 2;
  }
  v11 = *(_QWORD *)(*(_QWORD *)a3 + 16 * v9 + 8);
  v13 = (_QWORD *)((char *)v10 - 64);
  v12 = *((_QWORD *)v10 - 8);
  v14 = *(_QWORD *)(*(_QWORD *)a3 + 16 * (v9 + 1) + 8);
  v16 = (_QWORD *)((char *)v10 - 32);
  v15 = *((_QWORD *)v10 - 4);
  if (v11 == v12 && v14 == v15)
  {
LABEL_22:
    v10 = v8;
    if (!v8)
      goto LABEL_23;
    goto LABEL_72;
  }
  if (v11 == v15 && v14 == v12)
  {
    if (llvm::Instruction::isCommutative(v10) && v14 != v11)
    {
      v19 = *((_QWORD *)v10 - 3);
      *((_QWORD *)v10 - 8) = v11;
      *((_QWORD *)v10 - 4) = v14;
      v20 = *(_OWORD *)((char *)v10 - 56);
      v21 = (_QWORD *)*((_QWORD *)v10 - 2);
      *((_QWORD *)v10 - 7) = v19;
      *((_QWORD *)v10 - 6) = v21;
      *(_OWORD *)((char *)v10 - 24) = v20;
      *v21 = v13;
      v22 = *((_QWORD *)v10 - 7);
      if (v22)
        *(_QWORD *)(v22 + 16) = (char *)v10 - 56;
      **((_QWORD **)v10 - 2) = v16;
      v23 = *((_QWORD *)v10 - 3);
      if (v23)
        *(_QWORD *)(v23 + 16) = (char *)v10 - 24;
    }
    *(_BYTE *)(a1 + 552) = 1;
    goto LABEL_22;
  }
  if (v11 != v12)
  {
    v45 = sub_1C5BF0FB0(v12, v92);
    if (v45)
    {
      v78 = v45;
      v79 = (char *)sub_1C477672C((uint64_t)&v94, v45);
      v80 = v95 == v94 ? (uint64_t *)((char *)&v96 + 4) : &v96;
      if (v79 == &v95[8 * *(unsigned int *)v80])
      {
        v81 = v103;
        if (v103 >= HIDWORD(v103))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, (uint64_t)v104, v103 + 1, 8);
          v81 = v103;
        }
        *((_QWORD *)v102 + v81) = v78;
        LODWORD(v103) = v103 + 1;
      }
    }
    if (*v13)
    {
      **((_QWORD **)v10 - 6) = *((_QWORD *)v10 - 7);
      v46 = *((_QWORD *)v10 - 7);
      if (v46)
        *(_QWORD *)(v46 + 16) = *((_QWORD *)v10 - 6);
    }
    *v13 = v11;
    if (v11)
    {
      v49 = *(_QWORD *)(v11 + 8);
      v48 = (_QWORD *)(v11 + 8);
      v47 = v49;
      *((_QWORD *)v10 - 7) = v49;
      if (v49)
        *(_QWORD *)(v47 + 16) = (char *)v10 - 56;
      *((_QWORD *)v10 - 6) = v48;
      *v48 = v13;
    }
  }
  if (v14 != v15)
  {
    v50 = sub_1C5BF0FB0(v15, v92);
    if (v50)
    {
      v82 = v50;
      v83 = (char *)sub_1C477672C((uint64_t)&v94, v50);
      v84 = v95 == v94 ? (uint64_t *)((char *)&v96 + 4) : &v96;
      if (v83 == &v95[8 * *(unsigned int *)v84])
      {
        v85 = v103;
        if (v103 >= HIDWORD(v103))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, (uint64_t)v104, v103 + 1, 8);
          v85 = v103;
        }
        *((_QWORD *)v102 + v85) = v82;
        LODWORD(v103) = v103 + 1;
      }
    }
    if (*v16)
    {
      **((_QWORD **)v10 - 2) = *((_QWORD *)v10 - 3);
      v51 = *((_QWORD *)v10 - 3);
      if (v51)
        *(_QWORD *)(v51 + 16) = *((_QWORD *)v10 - 2);
    }
    *v16 = v14;
    if (v14)
    {
      v54 = *(_QWORD *)(v14 + 8);
      v53 = (_QWORD *)(v14 + 8);
      v52 = v54;
      *((_QWORD *)v10 - 3) = v54;
      if (v54)
        *(_QWORD *)(v52 + 16) = (char *)v10 - 24;
      *((_QWORD *)v10 - 2) = v53;
      *v53 = v16;
    }
  }
  *(_BYTE *)(a1 + 552) = 1;
LABEL_72:
  while (1)
  {
    v55 = sub_1C4774A9C((uint64_t)this)
        ? *((_BYTE *)this + 17) & 0xFE | *((_BYTE *)v10 + 17) & 1
        : *((_BYTE *)v10 + 17) & 1;
    *((_BYTE *)v10 + 17) = v55;
    if (v10 == (llvm::Instruction *)this)
      break;
    v99 = v101;
    v100 = 0x100000000;
    llvm::findDbgUsers((uint64_t)&v99, (uint64_t)v10);
    v57 = (llvm::DbgVariableIntrinsic **)v99;
    if ((_DWORD)v100)
    {
      v89 = 8 * v100;
      do
      {
        v90 = *v57++;
        v91 = llvm::UndefValue::get(*(llvm::UndefValue **)v10, v56);
        llvm::DbgVariableIntrinsic::replaceVariableLocationOp(v90, v10, v91);
        v89 -= 8;
      }
      while (v89);
      v57 = (llvm::DbgVariableIntrinsic **)v99;
    }
    if (v57 != (llvm::DbgVariableIntrinsic **)v101)
      free(v57);
    llvm::Instruction::moveBefore(v10, (llvm::Instruction *)this);
    v10 = *(llvm::Instruction **)(*((_QWORD *)v10 + 1) + 24);
  }
LABEL_23:
  v24 = v103;
  if ((_DWORD)v103)
  {
    v65 = 0;
    while (1)
    {
      v66 = (void *)*((_QWORD *)v102 + v65);
      v99 = v66;
      v67 = *(_DWORD *)(a1 + 64);
      if (!v67)
        break;
      v68 = *(_QWORD *)(a1 + 48);
      v69 = v67 - 1;
      v70 = ((v66 >> 4) ^ (v66 >> 9)) & v69;
      v71 = (uint64_t *)(v68 + 8 * v70);
      v72 = (void *)*v71;
      if (v66 != (void *)*v71)
      {
        v73 = 0;
        v74 = 1;
        while (v72 != (void *)-4096)
        {
          if (v73)
            v75 = 0;
          else
            v75 = v72 == (void *)-8192;
          if (v75)
            v73 = v71;
          v76 = v70 + v74++;
          v70 = v76 & v69;
          v71 = (uint64_t *)(v68 + 8 * v70);
          v72 = (void *)*v71;
          if (v66 == (void *)*v71)
            goto LABEL_112;
        }
        if (v73)
          v77 = v73;
        else
          v77 = v71;
        goto LABEL_111;
      }
LABEL_112:
      if (++v65 == v24)
        goto LABEL_24;
    }
    v77 = 0;
LABEL_111:
    *sub_1C5BFCD34(a1 + 48, (uint64_t *)&v99, v77) = (uint64_t)v66;
    sub_1C5BFC974(a1 + 72, &v99);
    goto LABEL_112;
  }
LABEL_24:
  if (v95 != v94)
    free(v95);
  if (v102 != v104)
    free(v102);
}

uint64_t sub_1C5BF0FB0(uint64_t a1, int a2)
{
  uint64_t result;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;

  result = 0;
  if (a1)
  {
    v4 = *(unsigned __int8 *)(a1 + 16);
    v5 = v4 >= 0x1C;
    v6 = v4 - 28;
    if (v5)
    {
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        return 0;
      v8 = !*(_QWORD *)(v7 + 8) && v6 == a2;
      if (!v8 || sub_1C4774A9C(a1) && (~*(unsigned __int8 *)(a1 + 17) & 0xF2) != 0)
        return 0;
      else
        return a1;
    }
  }
  return result;
}

uint64_t *llvm::ReassociatePass::RemoveFactorFromExpression(llvm::ReassociatePass *this, llvm::Value *a2, const void **a3)
{
  unsigned __int8 *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  llvm::Value *v10;
  const void **v11;
  uint64_t v12;
  const void **v13;
  char *v14;
  unsigned int Rank;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v30;
  char v31;
  int v32;
  _BOOL4 v34;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  llvm::detail::DoubleAPFloat *v43;
  int v44;
  size_t v45;
  int v46;
  char *v47;
  int v48;
  char *v49;
  unint64_t v50;
  unsigned int v51;
  void *v52;
  uint64_t v53;
  BOOL v54;
  int v55;
  uint64_t *v56;
  char v57;
  int v58;
  uint64_t v59;
  int v60;
  char *v61;
  char *v62;
  int v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unsigned int v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  int v73;
  BOOL v74;
  unsigned int v75;
  uint64_t *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char v82;
  llvm::UndefValue **v83;
  void *__s2;
  unsigned int v85;
  const char *v86;
  uint64_t v87;
  uint64_t *v88;
  int v89;
  char v90;
  __int16 v91;
  void *v92;
  uint64_t v93;
  _BYTE v94[128];
  void *v95;
  uint64_t v96;
  _QWORD v97[26];

  v97[24] = *MEMORY[0x1E0C80C00];
  v5 = (unsigned __int8 *)sub_1C5BF17BC((uint64_t)a2, 17, 18);
  if (!v5)
    return 0;
  v95 = v97;
  v96 = 0x800000000;
  v83 = (llvm::UndefValue **)v5;
  *((_BYTE *)this + 552) |= sub_1C5BF1830(v5, (uint64_t)&v95);
  v92 = v94;
  v93 = 0x800000000;
  v6 = v96;
  if (v96 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, (uint64_t)v94, v96, 16);
    v6 = v96;
  }
  if (v6)
  {
    v7 = 0;
    v8 = v6;
    do
    {
      v9 = (char *)v95 + 24 * v7;
      v10 = *(llvm::Value **)v9;
      v11 = (const void **)(v9 + 8);
      v12 = *((unsigned int *)v9 + 4);
      if (v12 > 0x40)
      {
        v13 = (const void **)operator new[]();
        memcpy(v13, *v11, ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8);
        v14 = (char *)*v13;
      }
      else
      {
        v13 = (const void **)*v11;
        v14 = (char *)*v11;
      }
      Rank = llvm::ReassociatePass::getRank(this, v10);
      v16 = v93;
      v17 = (unint64_t)&v14[v93];
      if (v17 > HIDWORD(v93))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, (uint64_t)v94, v17, 16);
        v16 = v93;
        if (v14)
        {
LABEL_11:
          v18 = (char *)v92 + 16 * v16;
          v19 = v14;
          do
          {
            *v18 = Rank;
            v18[1] = v10;
            v18 += 2;
            --v19;
          }
          while (v19);
          LODWORD(v16) = v93;
        }
      }
      else if (v14)
      {
        goto LABEL_11;
      }
      LODWORD(v93) = v16 + (_DWORD)v14;
      if (v12 >= 0x41 && v13)
        MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
      ++v7;
    }
    while (v7 != v8);
  }
  v20 = v93;
  if (!(_DWORD)v93)
  {
LABEL_100:
    llvm::ReassociatePass::RewriteExprTree((uint64_t)this, v83, (uint64_t)&v92);
    v56 = 0;
    goto LABEL_130;
  }
  v21 = 0;
  v82 = 0;
  v22 = (void **)(a3 + 4);
  while (1)
  {
    v23 = (char *)v92 + 16 * v21;
    v24 = v23[1];
    if ((const void **)v24 == a3)
    {
      v60 = v93;
      v61 = (char *)v92 + 16 * v93;
      if (v61 != (char *)(v23 + 2))
      {
        memmove(v23, v23 + 2, v61 - (char *)(v23 + 2));
        v60 = v93;
      }
      v59 = (uint64_t)v83;
      v57 = v82;
      v58 = v60 - 1;
      LODWORD(v93) = v58;
      goto LABEL_107;
    }
    v25 = *((unsigned __int8 *)a3 + 16);
    if (!a3 || v25 != 16)
      break;
    if (v24)
      v26 = *(_BYTE *)(v24 + 16) == 16;
    else
      v26 = 0;
    if (v26)
    {
      v27 = *(_DWORD *)(v24 + 32);
      v85 = v27;
      if (v27 <= 0x40)
      {
        v28 = *(_QWORD *)(v24 + 24);
        goto LABEL_73;
      }
      v28 = operator new[]();
      __s2 = (void *)v28;
      v27 = v85;
      memcpy((void *)v28, *(const void **)(v24 + 24), (((unint64_t)v85 + 63) >> 3) & 0x3FFFFFF8);
      if (v27 > 0x40)
      {
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&__s2);
      }
      else
      {
LABEL_73:
        v50 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v27;
        if (!v27)
          v50 = 0;
        __s2 = (void *)(v50 & ~v28);
      }
      llvm::APInt::operator++((uint64_t)&__s2);
      v51 = v85;
      v52 = __s2;
      v85 = 0;
      v53 = *(unsigned int *)v22;
      if (v53 > 0x40)
        v54 = memcmp(a3[3], __s2, ((unint64_t)(v53 + 63) >> 3) & 0x3FFFFFF8) == 0;
      else
        v54 = a3[3] == __s2;
      v55 = v54;
      if (v51 >= 0x41)
      {
        if (v52)
        {
          MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
          if (v85 >= 0x41)
          {
            if (__s2)
              MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
          }
        }
      }
      if (v55)
      {
        v62 = (char *)v92 + 16 * v21;
        v63 = v93;
        v64 = (char *)v92 + 16 * v93;
        if (v64 != v62 + 16)
        {
          memmove(v62, v62 + 16, v64 - (v62 + 16));
          v63 = v93;
        }
        v59 = (uint64_t)v83;
        v58 = v63 - 1;
        LODWORD(v93) = v58;
        v57 = 1;
        goto LABEL_107;
      }
    }
LABEL_88:
    if (++v21 == v20)
      goto LABEL_98;
  }
  if (!a3 || v25 != 17)
    goto LABEL_88;
  if (!v24 || *(_BYTE *)(v24 + 16) != 17)
    goto LABEL_88;
  v30 = *(_QWORD *)(v24 + 32);
  if ((_UNKNOWN *)v30 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v87, (const llvm::detail::DoubleAPFloat *)(v24 + 32));
  }
  else
  {
    v87 = *(_QWORD *)(v24 + 32);
    if ((*(_DWORD *)(v30 + 8) + 64) >= 0x80)
      v88 = (uint64_t *)operator new[]();
    v31 = *(_BYTE *)(v24 + 52);
    v32 = v31 & 7;
    v90 = v90 & 0xF0 | v31 & 0xF;
    v89 = *(_DWORD *)(v24 + 48);
    v34 = (v31 & 6) != 0 && v32 != 3;
    if (v32 == 1 || v34)
    {
      v36 = *(unsigned int *)(v87 + 8);
      v37 = (uint64_t *)&v88;
      if ((v36 - 64) <= 0xFFFFFF7F)
        v37 = v88;
      v40 = *(uint64_t **)(v24 + 40);
      v39 = (uint64_t *)(v24 + 40);
      v38 = v40;
      if ((*(_DWORD *)(*(v39 - 1) + 8) - 64) >= 0xFFFFFF80)
        v38 = v39;
      if (v36 <= 0xFFFFFFBF)
      {
        v41 = (unint64_t)(v36 + 64) >> 6;
        do
        {
          v42 = *v38++;
          *v37++ = v42;
          --v41;
        }
        while (v41);
      }
    }
  }
  if ((_UNKNOWN *)v87 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v87);
  else
    v90 ^= 8u;
  v43 = (llvm::detail::DoubleAPFloat *)(a3 + 4);
  if (*v22 == &unk_1C866F1C0)
    v44 = llvm::detail::DoubleAPFloat::compare(v43, (const llvm::detail::DoubleAPFloat *)&v87);
  else
    llvm::detail::IEEEFloat::compare(v43, (const llvm::detail::IEEEFloat *)&v87);
  v46 = v44;
  if (v44 == 1)
  {
    v47 = (char *)v92 + 16 * v21;
    v48 = v93;
    v49 = (char *)v92 + 16 * v93;
    v45 = v49 - (v47 + 16);
    if (v49 != v47 + 16)
    {
      memmove(v47, v47 + 16, v45);
      v48 = v93;
    }
    LODWORD(v93) = v48 - 1;
    v82 = 1;
  }
  if ((_UNKNOWN *)v87 == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v88);
  }
  else if ((*(_DWORD *)(v87 + 8) - 64) <= 0xFFFFFF7F && v88)
  {
    MEMORY[0x1CAA32F9C](v88, 0x1000C8000313F17, v45);
  }
  if (v46 != 1)
    goto LABEL_88;
LABEL_98:
  v57 = v82;
  if ((v82 & 1) == 0)
    goto LABEL_100;
  v58 = v93;
  v59 = (uint64_t)v83;
LABEL_107:
  v65 = *(_QWORD *)(v59 + 32);
  if (v58 == 1)
  {
    v66 = *((_QWORD *)this + 6);
    v86 = (const char *)v59;
    v67 = *((_DWORD *)this + 16);
    if (!v67)
    {
      v76 = 0;
      goto LABEL_124;
    }
    v68 = v67 - 1;
    v69 = v68 & ((v59 >> 4) ^ (v59 >> 9));
    v70 = (uint64_t *)(v66 + 8 * v69);
    v71 = *v70;
    if (v59 != *v70)
    {
      v72 = 0;
      v73 = 1;
      while (v71 != -4096)
      {
        if (v72)
          v74 = 0;
        else
          v74 = v71 == -8192;
        if (v74)
          v72 = v70;
        v75 = v69 + v73++;
        v69 = v75 & v68;
        v70 = (uint64_t *)(v66 + 8 * v69);
        v71 = *v70;
        if (v59 == *v70)
          goto LABEL_125;
      }
      if (v72)
        v76 = v72;
      else
        v76 = v70;
LABEL_124:
      *sub_1C5BFCD34((uint64_t)this + 48, (uint64_t *)&v86, v76) = v59;
      sub_1C5BFC974((uint64_t)this + 72, &v86);
    }
LABEL_125:
    v56 = (uint64_t *)*((_QWORD *)v92 + 1);
    if ((v57 & 1) != 0)
    {
LABEL_126:
      v86 = "neg";
      v91 = 259;
      if (v65)
        v77 = v65 - 24;
      else
        v77 = 0;
      v56 = (uint64_t *)sub_1C5BF2B34(v56, (llvm::Type *)&v86, v77, v59);
    }
  }
  else
  {
    llvm::ReassociatePass::RewriteExprTree((uint64_t)this, (llvm::UndefValue **)v59, (uint64_t)&v92);
    v56 = (uint64_t *)v59;
    if ((v57 & 1) != 0)
      goto LABEL_126;
  }
LABEL_130:
  if (v92 != v94)
    free(v92);
  v78 = (char *)v95;
  if ((_DWORD)v96)
  {
    v79 = 24 * v96;
    do
    {
      if (*(_DWORD *)&v78[v79 - 8] >= 0x41u)
      {
        v80 = *(_QWORD *)&v78[v79 - 16];
        if (v80)
          MEMORY[0x1CAA32F9C](v80, 0x1000C8000313F17);
      }
      v79 -= 24;
    }
    while (v79);
    v78 = (char *)v95;
  }
  if (v78 != (char *)v97)
    free(v78);
  return v56;
}

uint64_t sub_1C5BF17BC(uint64_t a1, int a2, int a3)
{
  uint64_t result;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  uint64_t v8;
  BOOL v9;

  result = 0;
  if (a1)
  {
    v5 = *(unsigned __int8 *)(a1 + 16);
    v6 = v5 >= 0x1C;
    v7 = v5 - 28;
    if (v6)
    {
      v8 = *(_QWORD *)(a1 + 8);
      if (!v8 || *(_QWORD *)(v8 + 8))
        return 0;
      v9 = v7 == a2 || v7 == a3;
      if (!v9 || sub_1C4774A9C(a1) && (~*(unsigned __int8 *)(a1 + 17) & 0xF2) != 0)
        return 0;
      else
        return a1;
    }
  }
  return result;
}

uint64_t sub_1C5BF1830(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int32 PrimitiveSizeInBits;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  __int32 v9;
  unint64_t v10;
  llvm::Type *v11;
  char *v12;
  unsigned int v13;
  int v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  llvm::ConstantFP **v18;
  char *v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  int v27;
  llvm::ConstantFP *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 **v31;
  char *v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  void **p_src;
  uint64_t v38;
  unsigned int v39;
  int v40;
  unsigned __int8 **v41;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  void **v52;
  uint64_t *v53;
  int v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned __int8 **v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  void **v65;
  int v66;
  void **v67;
  uint64_t v68;
  void **v69;
  uint64_t v70;
  unsigned int v71;
  unint64_t v72;
  unsigned int v73;
  unsigned __int8 **v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  llvm::Type **v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  _BOOL4 v92;
  llvm::Type *v93;
  size_t v94;
  void **v95;
  char v96;
  int v97;
  unint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  int v106;
  BOOL v107;
  unsigned int v108;
  uint64_t *v109;
  void **v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  char *v115;
  void **v116;
  char *v117;
  void **v118;
  unsigned __int8 **v119;
  unsigned __int8 **v120;
  uint64_t v121;
  _BOOL8 v122;
  char *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  _BOOL4 v127;
  _BOOL4 v128;
  uint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  _BOOL4 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  unsigned __int8 **v141;
  uint64_t v142;
  int v143;
  unsigned __int8 **v144;
  BOOL v145;
  uint64_t v146;
  unsigned __int8 *v147;
  int v148;
  int64_t v149;
  unint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unsigned __int8 ***v155;
  uint64_t v156;
  unint64_t v157;
  BOOL v158;
  char *v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *Zero;
  unint64_t v168;
  unsigned __int32 v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unsigned int v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  char v177;
  int v178;
  void **v179;
  void **v180;
  void **v181;
  unint64_t *v182;
  int v183;
  unint64_t v184;
  llvm::ConstantFP **v185;
  size_t v186;
  uint64_t v187;
  unsigned __int8 **v188;
  void *v189;
  unsigned int v190;
  void *__src;
  unsigned int v192;
  uint64_t v193;
  uint64_t v194;
  int32x2_t v195;
  unsigned int v196;
  char *v197;
  unsigned int v198;
  void *v199;
  uint64_t v200;
  _DWORD v201[16];
  void *v202;
  uint64_t v203;
  _QWORD v204[26];

  v204[24] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a1;
  if ((*(_DWORD *)(v4 + 8) & 0xFE) == 0x12)
    v4 = **(_QWORD **)(v4 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v4);
  if ((_DWORD)v6 == 1)
  {
    v169 = PrimitiveSizeInBits;
    PrimitiveSizeInBits = v169;
  }
  v178 = a1[16];
  v202 = v204;
  v203 = 0x800000000;
  v195.i32[0] = PrimitiveSizeInBits;
  v173 = PrimitiveSizeInBits;
  if (PrimitiveSizeInBits > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v194, 1, 0);
    v9 = v195.i32[0];
    v8 = v194;
  }
  else
  {
    if (PrimitiveSizeInBits)
      v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
    else
      LOBYTE(v7) = 0;
    v8 = v7 & 1;
    v194 = v8;
    v9 = PrimitiveSizeInBits;
  }
  v201[0] = v9;
  v199 = a1;
  v200 = v8;
  v10 = sub_1C5BFB0CC((uint64_t)&v202, (unint64_t)&v199);
  v12 = (char *)v202 + 24 * v203;
  *(_QWORD *)v12 = *(_QWORD *)v10;
  *((_DWORD *)v12 + 4) = *(_DWORD *)(v10 + 16);
  *((_QWORD *)v12 + 1) = *(_QWORD *)(v10 + 8);
  *(_DWORD *)(v10 + 16) = 0;
  v13 = v203 + 1;
  LODWORD(v203) = v203 + 1;
  if (v201[0] >= 0x41u && v200)
  {
    MEMORY[0x1CAA32F9C](v200, 0x1000C8000313F17);
    v13 = v203;
  }
  v194 = 0;
  v195 = 0;
  v196 = 0;
  v199 = v201;
  v200 = 0x800000000;
  if (v13)
  {
    v176 = a2;
    v14 = v178 - 28;
    v177 = 0;
    do
    {
      v15 = v202;
      v16 = (char *)v202 + 24 * v13;
      v17 = *((unsigned int *)v16 - 2);
      v18 = (llvm::ConstantFP **)*((_QWORD *)v16 - 3);
      v19 = (char *)*((_QWORD *)v16 - 2);
      *((_DWORD *)v16 - 2) = 0;
      v20 = v13 - 1;
      LODWORD(v203) = v20;
      if (LODWORD(v15[3 * v20 + 2]) >= 0x41)
      {
        v21 = v15[3 * v20 + 1];
        if (v21)
          MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
      }
      v22 = *((_DWORD *)v18 + 5);
      v23 = v22 & 0x7FFFFFF;
      v185 = v18;
      if ((v22 & 0x7FFFFFF) != 0)
      {
        v24 = 0;
        v25 = (unint64_t)(v17 + 63) >> 3;
        v26 = v25 & 0x3FFFFFF8;
        v184 = (unint64_t)(v17 + 63) >> 6;
        v27 = v17 | 0xFFFFFFC0;
        if ((v17 & 0x3F) == 0)
          v27 = 0;
        v183 = v27;
        v186 = v25 & 0x3FFFFFF8;
        while (1)
        {
          v28 = (v22 & 0x40000000) != 0 ? *(v18 - 1) : (llvm::ConstantFP *)&v18[-4 * v23];
          v29 = *((_QWORD *)v28 + 4 * v24);
          v193 = v29;
          v192 = v17;
          if (v17 > 0x40)
          {
            v32 = (char *)operator new[]();
            memcpy(v32, v19, v26);
            __src = v32;
            v34 = sub_1C5BF0FB0(v29, v14);
            if (v34)
            {
              v31 = (unsigned __int8 **)v34;
              v33 = (void *)operator new[]();
              memcpy(v33, v32, v26);
              goto LABEL_29;
            }
            p_src = (void **)v32;
          }
          else
          {
            __src = v19;
            v30 = sub_1C5BF0FB0(v29, v14);
            if (v30)
            {
              v31 = (unsigned __int8 **)v30;
              v32 = v19;
              v33 = v19;
LABEL_29:
              v190 = v17;
              v188 = v31;
              v189 = v33;
              v35 = sub_1C5BFB0CC((uint64_t)&v202, (unint64_t)&v188);
              v36 = (char *)v202 + 24 * v203;
              *(_QWORD *)v36 = *(_QWORD *)v35;
              *((_DWORD *)v36 + 4) = *(_DWORD *)(v35 + 16);
              *((_QWORD *)v36 + 1) = *(_QWORD *)(v35 + 8);
              *(_DWORD *)(v35 + 16) = 0;
              LODWORD(v203) = v203 + 1;
              if (v190 >= 0x41 && v189)
                MEMORY[0x1CAA32F9C](v189, 0x1000C8000313F17);
              goto LABEL_174;
            }
            p_src = &__src;
            v32 = v19;
          }
          v188 = 0;
          v38 = v194;
          v39 = v196;
          v40 = sub_1C4E580F4(v194, v196, v29, &v188);
          v41 = v188;
          if (v40 && v188 != (unsigned __int8 **)(v38 + 24 * v39))
            break;
          v43 = *(_QWORD *)(v29 + 8);
          if (!v43 || *(_QWORD *)(v43 + 8))
          {
            v44 = v200;
            v14 = v178 - 28;
            if (v200 >= (unint64_t)HIDWORD(v200))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, (uint64_t)v201, v200 + 1, 8);
              v44 = v200;
            }
            *((_QWORD *)v199 + v44) = v29;
            LODWORD(v200) = v200 + 1;
            if (v39)
            {
              v45 = (v39 - 1) & ((v29 >> 4) ^ (v29 >> 9));
              v46 = (uint64_t *)(v38 + 24 * v45);
              v47 = *v46;
              if (v29 != *v46)
              {
                v48 = 0;
                v49 = 1;
                while (v47 != -4096)
                {
                  if (v48)
                    v50 = 0;
                  else
                    v50 = v47 == -8192;
                  if (v50)
                    v48 = v46;
                  v51 = v45 + v49++;
                  v45 = v51 & (v39 - 1);
                  v46 = (uint64_t *)(v38 + 24 * v45);
                  v47 = *v46;
                  if (v29 == *v46)
                    goto LABEL_78;
                }
                if (v48)
                  v53 = v48;
                else
                  v53 = v46;
LABEL_77:
                v46 = sub_1C5BFB1B4((uint64_t)&v194, &v193, v53);
                *((_DWORD *)v46 + 4) = 1;
                *v46 = v29;
                v46[1] = 0;
              }
LABEL_78:
              if (*((_DWORD *)v46 + 4) > 0x40u || v17 > 0x40)
              {
                v69 = (void **)(v46 + 1);
                llvm::APInt::reallocate((uint64_t)(v46 + 1), v17);
                v70 = *((unsigned int *)v46 + 4);
                v26 = v186;
                v32 = (char *)__src;
                if (v70 <= 0x40)
                  *v69 = __src;
                else
                  memcpy(*v69, __src, ((unint64_t)(v70 + 63) >> 3) & 0x3FFFFFF8);
                goto LABEL_174;
              }
              v46[1] = (uint64_t)v32;
              *((_DWORD *)v46 + 4) = v17;
              goto LABEL_165;
            }
            v53 = 0;
            goto LABEL_77;
          }
          v71 = v17;
          v14 = v178 - 28;
LABEL_135:
          v100 = *(unsigned __int8 *)(v29 + 16);
          if (v100 >= 0x1C)
          {
            if (v178 == 46)
              goto LABEL_141;
            if (v178 == 45)
            {
              if (v100 == 43 && (sub_1C4D8AC3C((uint64_t)&v188, *(llvm::Constant **)(v29 - 64)) & 1) != 0)
              {
LABEL_142:
                v188 = sub_1C5BF8AB0((unsigned __int8 *)v29, v11);
                v190 = v71;
                if (v71 > 0x40)
                {
                  v189 = (void *)operator new[]();
                  memcpy(v189, v32, (((unint64_t)v190 + 63) >> 3) & 0x3FFFFFF8);
                }
                else
                {
                  v189 = v32;
                }
                v18 = v185;
                v26 = v186;
                v112 = sub_1C5BFB0CC((uint64_t)&v202, (unint64_t)&v188);
                v113 = (char *)v202 + 24 * v203;
                *(_QWORD *)v113 = *(_QWORD *)v112;
                *((_DWORD *)v113 + 4) = *(_DWORD *)(v112 + 16);
                *((_QWORD *)v113 + 1) = *(_QWORD *)(v112 + 8);
                *(_DWORD *)(v112 + 16) = 0;
                LODWORD(v203) = v203 + 1;
                if (v190 >= 0x41 && v189)
                  MEMORY[0x1CAA32F9C](v189, 0x1000C8000313F17);
                v177 = 1;
                goto LABEL_174;
              }
              if (v14 == 18)
              {
LABEL_141:
                if (sub_1C5BFC8AC(v29))
                  goto LABEL_142;
              }
            }
          }
          v101 = v200;
          if (v200 >= (unint64_t)HIDWORD(v200))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, (uint64_t)v201, v200 + 1, 8);
            v101 = v200;
          }
          *((_QWORD *)v199 + v101) = v29;
          LODWORD(v200) = v200 + 1;
          if (v39)
          {
            v102 = ((v29 >> 4) ^ (v29 >> 9)) & (v39 - 1);
            v103 = (uint64_t *)(v38 + 24 * v102);
            v104 = *v103;
            if (v29 == *v103)
              goto LABEL_162;
            v105 = 0;
            v106 = 1;
            while (v104 != -4096)
            {
              if (v105)
                v107 = 0;
              else
                v107 = v104 == -8192;
              if (v107)
                v105 = v103;
              v108 = v102 + v106++;
              v102 = v108 & (v39 - 1);
              v103 = (uint64_t *)(v38 + 24 * v102);
              v104 = *v103;
              if (v29 == *v103)
                goto LABEL_162;
            }
            if (v105)
              v109 = v105;
            else
              v109 = v103;
          }
          else
          {
            v109 = 0;
          }
          v103 = sub_1C5BFB1B4((uint64_t)&v194, &v193, v109);
          *((_DWORD *)v103 + 4) = 1;
          *v103 = v29;
          v103[1] = 0;
LABEL_162:
          if (*((_DWORD *)v103 + 4) > 0x40u || v71 > 0x40)
          {
            v110 = (void **)(v103 + 1);
            llvm::APInt::reallocate((uint64_t)(v103 + 1), v71);
            v111 = *((unsigned int *)v103 + 4);
            v26 = v186;
            v32 = (char *)__src;
            if (v111 <= 0x40)
              *v110 = __src;
            else
              memcpy(*v110, __src, ((unint64_t)(v111 + 63) >> 3) & 0x3FFFFFF8);
            v18 = v185;
LABEL_174:
            if (v192 >= 0x41 && v32 != 0)
              MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
            goto LABEL_179;
          }
          v103[1] = (uint64_t)v32;
          *((_DWORD *)v103 + 4) = v71;
          v18 = v185;
LABEL_165:
          v26 = v186;
LABEL_179:
          ++v24;
          v22 = *((_DWORD *)v18 + 5);
          v23 = v22 & 0x7FFFFFF;
          if (v24 >= v23)
            goto LABEL_206;
        }
        v52 = (void **)(v188 + 1);
        if (v17 >= 0x41)
        {
          v54 = 0;
          v55 = v184;
          do
          {
            v56 = v55-- < 1;
            if (v56)
              break;
            v57 = *(_QWORD *)&v32[8 * v55];
            v54 += __clz(v57);
          }
          while (!v57);
          if (v54 + v183 == (_DWORD)v17)
            goto LABEL_122;
        }
        else if (!v32)
        {
          goto LABEL_122;
        }
        v58 = *((unsigned int *)v188 + 4);
        if (v58 > 0x40)
        {
          v181 = p_src;
          v59 = v17;
          v60 = v39;
          v61 = v188;
          v62 = *((unsigned int *)v188 + 4);
          v63 = v38;
          v64 = v19;
          v65 = (void **)(v188 + 1);
          v66 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v188 + 1));
          v52 = v65;
          v19 = v64;
          v38 = v63;
          v58 = v62;
          v41 = v61;
          v39 = v60;
          v17 = v59;
          p_src = v181;
          if (v66 == (_DWORD)v58)
            goto LABEL_69;
        }
        else if (!*v52)
        {
          if (v17 <= 0x40)
          {
            v188[1] = (unsigned __int8 *)v32;
            *((_DWORD *)v41 + 4) = v17;
LABEL_121:
            v18 = v185;
LABEL_122:
            v14 = v178 - 28;
LABEL_123:
            v99 = *(_QWORD *)(v29 + 8);
            if (!v99 || *(_QWORD *)(v99 + 8))
            {
              v26 = v186;
              goto LABEL_174;
            }
            v71 = *((_DWORD *)v41 + 4);
            if (v17 > 0x40 || v71 > 0x40)
            {
              v180 = v52;
              llvm::APInt::reallocate((uint64_t)&__src, v71);
              v71 = v192;
              if (v192 <= 0x40)
              {
                v32 = (char *)*v180;
                __src = *v180;
              }
              else
              {
                v32 = (char *)__src;
                memcpy(__src, *v180, (((unint64_t)v192 + 63) >> 3) & 0x3FFFFFF8);
              }
              if (*((_DWORD *)v41 + 4) >= 0x41u && *v180)
                MEMORY[0x1CAA32F9C](*v180, 0x1000C8000313F17);
            }
            else
            {
              v32 = (char *)*v52;
              __src = *v52;
              v192 = v71;
            }
            *v41 = (unsigned __int8 *)-8192;
            v195 = vadd_s32(v195, (int32x2_t)0x1FFFFFFFFLL);
            goto LABEL_135;
          }
LABEL_69:
          v67 = v52;
          llvm::APInt::reallocate((uint64_t)v52, v17);
          v68 = *((unsigned int *)v41 + 4);
          if (v68 <= 0x40)
            *v67 = v32;
          else
            memcpy(*v67, v32, ((unint64_t)(v68 + 63) >> 3) & 0x3FFFFFF8);
          v18 = v185;
          v52 = v67;
          v14 = v178 - 28;
          goto LABEL_123;
        }
        if (((v178 - 28) & 0xFFFFFFFE) == 0x1C)
          goto LABEL_121;
        if (v178 == 58)
        {
          if (v58 > 0x40)
          {
            *(_QWORD *)*v52 = 0;
            v94 = (((v58 + 63) >> 3) - 8) & 0xFFFFFFF8;
            v95 = v52;
            bzero((char *)*v52 + 8, v94);
            v52 = v95;
          }
          else
          {
            *v52 = 0;
          }
          goto LABEL_121;
        }
        if ((v178 - 41) <= 1)
        {
          if (v58 >= 0x41)
          {
            v121 = 0;
            v122 = 0;
            v123 = (char *)*v52;
            v124 = (v58 + 63) >> 6;
            do
            {
              v125 = *(_QWORD *)&v123[v121];
              v126 = *(_QWORD *)&v32[v121] + v125;
              v127 = v126 < v125;
              v128 = v126 + 1 <= v125;
              if (v122)
              {
                ++v126;
                v122 = v128;
              }
              else
              {
                v122 = v127;
              }
              *(_QWORD *)&v123[v121] = v126;
              v121 += 8;
            }
            while (8 * v124 != v121);
            *((_QWORD *)*v52 + (v124 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v58;
            goto LABEL_121;
          }
          v72 = (unint64_t)&v32[(_QWORD)*v52];
LABEL_118:
          v98 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v58;
          if (!(_DWORD)v58)
            v98 = 0;
          *v52 = (void *)(v98 & v72);
          goto LABEL_121;
        }
        if (v58 < 4)
        {
          if ((_DWORD)v58 == 3)
            v96 = -2;
          else
            v96 = -1;
          v97 = 1 << (v96 + v58);
          LODWORD(v72) = v97 + *(_DWORD *)p_src + *(_DWORD *)v52;
          do
            v72 = (v72 - v97);
          while (v72 >= v97 + (int)v58);
          goto LABEL_118;
        }
        v73 = v58 - 2;
        LODWORD(v189) = v58;
        v179 = v52;
        if (v58 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v188, 0, 0);
          v76 = v189;
          v75 = 1 << v73;
          if (v189 > 0x40)
          {
            v172 = v58;
            v119 = v188;
            v188[v73 >> 6] = (unsigned __int8 *)((unint64_t)v188[v73 >> 6] | v75);
            v198 = v76;
            v175 = v76;
            v197 = (char *)operator new[]();
            v182 = (unint64_t *)v119;
            v120 = v119;
            v58 = v172;
            memcpy(v197, v120, (((unint64_t)v198 + 63) >> 3) & 0x3FFFFFF8);
            goto LABEL_91;
          }
          v74 = v188;
        }
        else
        {
          v74 = 0;
          v188 = 0;
          v75 = 1 << v73;
          v76 = v58;
        }
        v175 = v76;
        v198 = v76;
        v182 = (unint64_t *)((unint64_t)v74 | v75);
        v197 = (char *)((unint64_t)v74 | v75);
LABEL_91:
        v14 = v178 - 28;
        llvm::APInt::operator+=((uint64_t)&v197, v58);
        v77 = v198;
        v78 = v197;
        v198 = 0;
        v79 = *((unsigned int *)v41 + 4);
        if (v79 >= 0x41)
        {
          v129 = 0;
          v130 = (unint64_t *)*v179;
          v131 = (unint64_t)(v79 + 63) >> 6;
          v132 = (uint64_t *)v32;
          v133 = v131;
          do
          {
            v134 = *v132++;
            v135 = v134 + *v130;
            v11 = (llvm::Type *)(v135 + 1);
            v136 = v135 + 1 <= *v130;
            if (v129)
            {
              ++v135;
              v129 = v136;
            }
            else
            {
              v129 = v135 < *v130;
            }
            *v130++ = v135;
            --v133;
          }
          while (v133);
          v52 = v179;
          *((_QWORD *)*v179 + (v131 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v79;
          v18 = v185;
          v14 = v178 - 28;
        }
        else
        {
          v52 = v179;
          if ((_DWORD)v79)
            v80 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v79;
          else
            v80 = 0;
          *v179 = (void *)(v80 & (unint64_t)&v32[(_QWORD)*v179]);
          v18 = v185;
        }
        while (1)
        {
          while (1)
          {
            v81 = *((unsigned int *)v41 + 4);
            if (v81 <= 0x40)
              break;
            v83 = (llvm::Type **)*v52;
            v84 = (unint64_t)(v81 + 63) >> 6;
            v85 = 8 * v84;
            while (v85)
            {
              v86 = *(_QWORD *)((char *)*v52 + v85 - 8);
              v87 = *(_QWORD *)&v78[v85 - 8];
              v85 -= 8;
              if (v86 != v87)
              {
                if (v86 <= v87)
                  goto LABEL_181;
                break;
              }
            }
            v88 = 0;
            v89 = v182;
            v90 = (unint64_t)(v81 + 63) >> 6;
            do
            {
              v91 = *v89++;
              v11 = (llvm::Type *)((char *)*v83 - v91);
              v92 = (unint64_t)*v83 < v91;
              v93 = (llvm::Type *)((char *)*v83 + ~v91);
              if (v88)
              {
                v88 = v93 >= *v83;
              }
              else
              {
                v93 = v11;
                v88 = v92;
              }
              *v83++ = v93;
              --v90;
            }
            while (v90);
            *((_QWORD *)*v52 + (v84 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v81;
          }
          if (*v52 < v78)
            break;
          if ((_DWORD)v81)
            v82 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v81;
          else
            v82 = 0;
          *v52 = (void *)(v82 & ((_BYTE *)*v52 - (_BYTE *)v182));
        }
LABEL_181:
        v174 = v38;
        if (v77 >= 0x41 && v78)
        {
          v115 = v19;
          v116 = v52;
          MEMORY[0x1CAA32F9C](v78, 0x1000C8000313F17);
          v52 = v116;
          v19 = v115;
          v38 = v174;
        }
        if (v175 >= 0x41 && v182)
        {
          v117 = v19;
          v118 = v52;
          MEMORY[0x1CAA32F9C](v182, 0x1000C8000313F17);
          v52 = v118;
          v19 = v117;
          v38 = v174;
        }
        goto LABEL_123;
      }
LABEL_206:
      if (v17 >= 0x41 && v19)
        MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
      v13 = v203;
    }
    while ((_DWORD)v203);
    v137 = v200;
    if ((_DWORD)v200)
    {
      v138 = 0;
      v139 = v194;
      v140 = v196;
      v141 = (unsigned __int8 **)(v194 + 24 * v196);
      a2 = v176;
      v187 = v200;
      while (1)
      {
        v142 = *((_QWORD *)v199 + v138);
        v188 = 0;
        v143 = sub_1C4E580F4(v139, v140, v142, &v188);
        v144 = v188;
        if (v143)
          v145 = v188 == v141;
        else
          v145 = 1;
        if (v145)
          goto LABEL_238;
        v146 = *((unsigned int *)v188 + 4);
        if (v146 > 0x40)
          break;
        v147 = v188[1];
        if (v147)
          goto LABEL_218;
LABEL_238:
        if (++v138 == v137)
          goto LABEL_246;
      }
      v147 = (unsigned __int8 *)operator new[]();
      a2 = v176;
      memcpy(v147, v144[1], ((unint64_t)(v146 + 63) >> 3) & 0x3FFFFFF8);
      v148 = 0;
      v149 = (unint64_t)(v146 + 63) >> 6;
      v137 = v187;
      do
      {
        v56 = v149-- < 1;
        if (v56)
          break;
        v150 = *(_QWORD *)&v147[8 * v149];
        v148 += __clz(v150);
      }
      while (!v150);
      v151 = v146 | 0xFFFFFFC0;
      if ((v146 & 0x3F) == 0)
        v151 = 0;
      if (v148 + v151 == (_DWORD)v146)
      {
LABEL_237:
        MEMORY[0x1CAA32F9C](v147, 0x1000C8000313F17);
        goto LABEL_238;
      }
      v152 = *((unsigned int *)v144 + 4);
      if (v152 <= 0x40)
      {
LABEL_218:
        v144[1] = 0;
      }
      else
      {
        *(_QWORD *)v144[1] = 0;
        bzero(v144[1] + 8, (((unint64_t)(v152 + 63) >> 3) - 8) & 0xFFFFFFF8);
      }
      v188 = (unsigned __int8 **)v142;
      v190 = v146;
      if (v146 > 0x40)
      {
        v189 = (void *)operator new[]();
        memcpy(v189, v147, (((unint64_t)v190 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v189 = v147;
      }
      v153 = *(unsigned int *)(a2 + 8);
      v154 = *(_QWORD *)a2;
      if (v153 >= *(_DWORD *)(a2 + 12))
      {
        v157 = v153 + 1;
        v158 = v154 + 24 * v153 > (unint64_t)&v188;
        if (v154 <= (unint64_t)&v188 && v158)
        {
          v159 = (char *)&v188 - v154;
          sub_1C5BFB480(a2, v157);
          v154 = *(_QWORD *)a2;
          v155 = (unsigned __int8 ***)&v159[*(_QWORD *)a2];
          goto LABEL_232;
        }
        sub_1C5BFB480(a2, v157);
        v154 = *(_QWORD *)a2;
      }
      v155 = &v188;
LABEL_232:
      v156 = v154 + 24 * *(unsigned int *)(a2 + 8);
      *(_QWORD *)v156 = *v155;
      *(_DWORD *)(v156 + 16) = *((_DWORD *)v155 + 4);
      *(_QWORD *)(v156 + 8) = v155[1];
      *((_DWORD *)v155 + 4) = 0;
      ++*(_DWORD *)(a2 + 8);
      if (v190 >= 0x41 && v189)
        MEMORY[0x1CAA32F9C](v189, 0x1000C8000313F17);
      if (v146 < 0x41 || !v147)
        goto LABEL_238;
      goto LABEL_237;
    }
    a2 = v176;
LABEL_246:
    v160 = v177;
  }
  else
  {
    v185 = (llvm::ConstantFP **)a1;
    v160 = 0;
  }
  if (!*(_DWORD *)(a2 + 8))
  {
    Zero = 0;
    switch(v178)
    {
      case ')':
        goto LABEL_267;
      case '*':
        Zero = (char *)llvm::ConstantFP::getZero(*v185, (llvm::Type *)1);
        break;
      case '+':
      case ',':
        break;
      case '-':
        Zero = (char *)llvm::ConstantInt::get(*v185, 1, 0);
        break;
      case '.':
        Zero = (char *)llvm::ConstantFP::get((llvm::ConstantFP **)*v185, v11, 1.0);
        break;
      default:
        if (v178 == 56)
        {
          Zero = (char *)llvm::Constant::getAllOnesValue(*v185, v11);
        }
        else if ((v178 - 57) <= 1)
        {
LABEL_267:
          Zero = (char *)llvm::Constant::getNullValue(*v185, v11);
        }
        break;
    }
    v197 = Zero;
    LODWORD(v189) = v173;
    if (v173 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v188, 1, 0);
    }
    else
    {
      if (v173)
        v168 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v173;
      else
        LOBYTE(v168) = 0;
      v188 = (unsigned __int8 **)(v168 & 1);
    }
    sub_1C6323D70(a2, &v197, (uint64_t)&v188);
    if (v189 >= 0x41 && v188)
      MEMORY[0x1CAA32F9C](v188, 0x1000C8000313F17);
  }
  if (v199 != v201)
    free(v199);
  v161 = v194;
  if (v196)
  {
    v162 = 24 * v196;
    v163 = v194 + 8;
    do
    {
      v164 = *(_QWORD *)(v163 - 8);
      if (v164 != -4096 && v164 != -8192 && *(_DWORD *)(v163 + 8) >= 0x41u && *(_QWORD *)v163)
        MEMORY[0x1CAA32F9C](*(_QWORD *)v163, 0x1000C8000313F17);
      v163 += 24;
      v162 -= 24;
    }
    while (v162);
  }
  MEMORY[0x1CAA32FB4](v161, 8);
  v165 = (char *)v202;
  if ((_DWORD)v203)
  {
    v170 = 24 * v203;
    do
    {
      if (*(_DWORD *)&v165[v170 - 8] >= 0x41u)
      {
        v171 = *(_QWORD *)&v165[v170 - 16];
        if (v171)
          MEMORY[0x1CAA32F9C](v171, 0x1000C8000313F17);
      }
      v170 -= 24;
    }
    while (v170);
    v165 = (char *)v202;
  }
  if (v165 != (char *)v204)
    free(v165);
  return v160 & 1;
}

llvm::Value *sub_1C5BF2B34(uint64_t *a1, llvm::Type *a2, uint64_t a3, uint64_t a4)
{
  int v5;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  if ((*(_DWORD *)(*a1 + 8) & 0xFE) == 0x12)
    v5 = *(unsigned __int8 *)(**(_QWORD **)(*a1 + 16) + 8);
  else
    v5 = *(_DWORD *)(*a1 + 8);
  if (v5 == 13)
    return llvm::BinaryOperator::CreateNeg(a1, a2, a3);
  v7 = *(unsigned __int8 *)(a4 + 16);
  v8 = llvm::UnaryOperator::Create(12, a1, (uint64_t)a2, a3);
  v9 = v8;
  if (a4)
  {
    if (v7 >= 0x1C)
      llvm::Instruction::copyIRFlags(v8, a4, 1);
  }
  return (llvm::Value *)v9;
}

uint64_t llvm::ReassociatePass::CombineXorOpnd(llvm::ReassociatePass *this, llvm::Instruction *a2, llvm::reassociate::XorOpnd *a3, const void **a4, llvm::Value **a5)
{
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Value *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  uint64_t *v34;
  void *v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;

  if (!*((_BYTE *)a3 + 36))
    return 0;
  v10 = (const void **)((char *)a3 + 16);
  v11 = *((unsigned int *)a3 + 6);
  if (v11 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::reassociate::XorOpnd *)((char *)a3 + 16)) == (_DWORD)v11)
      return 0;
  }
  else if (!*v10)
  {
    return 0;
  }
  v12 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  if (!v12 || *(_QWORD *)(v12 + 8))
    return 0;
  if (v11 > 0x40)
  {
    if (!memcmp(*v10, *a4, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8))
    {
      v14 = (llvm::Value *)*((_QWORD *)a3 + 1);
      v36 = v11;
      v35 = (void *)operator new[]();
      memcpy(v35, *((const void **)a3 + 2), ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v35);
      LODWORD(v11) = v36;
      v16 = (unint64_t)v35;
      goto LABEL_16;
    }
    return 0;
  }
  if (*v10 != *a4)
    return 0;
  v14 = (llvm::Value *)*((_QWORD *)a3 + 1);
  v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
  if (!(_DWORD)v11)
    v15 = 0;
  v16 = v15 & ~(unint64_t)*v10;
LABEL_16:
  v38 = v11;
  v37 = v16;
  v36 = 0;
  *a5 = sub_1C5BF2E8C((uint64_t)a2, v14, (llvm::Type *)&v37);
  if (v38 >= 0x41 && v37)
    MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
  if (v36 >= 0x41 && v16)
    MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
  v17 = *((unsigned int *)a4 + 2);
  if (v17 > 0x40)
  {
    v18 = *a4;
    v19 = (uint64_t *)*v10;
    v20 = (unint64_t)(v17 + 63) >> 6;
    do
    {
      v21 = *v19++;
      *v18++ ^= v21;
      --v20;
    }
    while (v20);
  }
  else
  {
    *a4 = (const void *)((unint64_t)*a4 ^ (unint64_t)*v10);
  }
  v22 = *(_QWORD *)a3;
  if (v22)
    v23 = *(unsigned __int8 *)(v22 + 16) >= 0x1Cu;
  else
    v23 = 0;
  if (!v23)
    return 1;
  v24 = *((_QWORD *)this + 6);
  v37 = v22;
  v25 = *((_DWORD *)this + 16);
  if (!v25)
  {
    v34 = 0;
LABEL_45:
    *sub_1C5BFCD34((uint64_t)this + 48, &v37, v34) = v22;
    sub_1C5BFC974((uint64_t)this + 72, &v37);
    return 1;
  }
  v26 = v25 - 1;
  v27 = v26 & ((v22 >> 4) ^ (v22 >> 9));
  v28 = (uint64_t *)(v24 + 8 * v27);
  v29 = *v28;
  if (v22 != *v28)
  {
    v30 = 0;
    v31 = 1;
    while (v29 != -4096)
    {
      if (v30)
        v32 = 0;
      else
        v32 = v29 == -8192;
      if (v32)
        v30 = v28;
      v33 = v27 + v31++;
      v27 = v33 & v26;
      v28 = (uint64_t *)(v24 + 8 * v27);
      v29 = *v28;
      if (v22 == *v28)
        return 1;
    }
    if (v30)
      v34 = v30;
    else
      v34 = v28;
    goto LABEL_45;
  }
  return 1;
}

llvm::Value *sub_1C5BF2E8C(uint64_t a1, llvm::Value *a2, llvm::Type *a3)
{
  unsigned int v6;
  BOOL v7;
  llvm::Value **v8;
  unsigned __int8 *v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  unsigned __int8 *v13;
  const char *v14;
  __int16 v15;

  v6 = *((_DWORD *)a3 + 2);
  if (v6 <= 0x40)
  {
    if (*(_QWORD *)a3)
    {
      if (v6)
        v7 = *(_QWORD *)a3 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
      else
        v7 = 1;
      if (v7)
        return a2;
      goto LABEL_11;
    }
    return 0;
  }
  if (llvm::APInt::countLeadingZerosSlowCase(a3) == v6)
    return 0;
  if (llvm::APInt::countTrailingOnesSlowCase(a3) == v6)
    return a2;
LABEL_11:
  v8 = llvm::ConstantInt::get(*(llvm::ConstantInt ***)a2, a3, a3);
  v14 = "and.ra";
  v15 = 259;
  a2 = llvm::BinaryOperator::Create(28, a2, (uint64_t)v8, (uint64_t)&v14, a1);
  v9 = *(unsigned __int8 **)(a1 + 48);
  v13 = v9;
  if (v9)
    llvm::MetadataTracking::track((uint64_t)&v13, v9, 2);
  v10 = (unsigned __int8 **)((char *)a2 + 48);
  if (&v13 == (unsigned __int8 **)((char *)a2 + 48))
  {
    if (v13)
      llvm::MetadataTracking::untrack((uint64_t)&v13, v13);
  }
  else
  {
    if (*v10)
      llvm::MetadataTracking::untrack((uint64_t)a2 + 48, *v10);
    v11 = v13;
    *v10 = v13;
    if (v11)
      llvm::MetadataTracking::retrack((uint64_t)&v13, v11, (uint64_t)a2 + 48);
  }
  return a2;
}

uint64_t llvm::ReassociatePass::CombineXorOpnd(llvm::ReassociatePass *this, llvm::Instruction *a2, llvm::reassociate::XorOpnd *a3, llvm::Value **a4, llvm::APInt *a5, llvm::Value **a6)
{
  llvm::Value *v6;
  uint64_t result;
  llvm::reassociate::XorOpnd *v10;
  llvm::ReassociatePass *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  llvm::reassociate::XorOpnd *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  int v30;
  BOOL v31;
  unint64_t v32;
  int v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  int v39;
  unint64_t v40;
  int v41;
  unsigned int v42;
  BOOL v43;
  uint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unsigned int v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  int v69;
  BOOL v70;
  unsigned int v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unsigned int v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  int v81;
  BOOL v82;
  unsigned int v83;
  uint64_t *v84;
  unsigned int v86;
  unsigned int v87;
  void *v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;

  v6 = (llvm::Value *)*((_QWORD *)a3 + 1);
  if (v6 != a4[1])
    return 0;
  v10 = (llvm::reassociate::XorOpnd *)a4;
  v13 = this;
  v14 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  v15 = 1;
  if (v14)
  {
    if (*(_QWORD *)(v14 + 8))
      v15 = 1;
    else
      v15 = 2;
  }
  v16 = *((_QWORD *)*a4 + 1);
  if (v16)
    LODWORD(v16) = *(_QWORD *)(v16 + 8) == 0;
  v17 = v15 + v16;
  if ((*((_BYTE *)a3 + 36) != 0) != (*((_BYTE *)a4 + 36) != 0))
  {
    if (*((_BYTE *)a4 + 36))
      v18 = (llvm::reassociate::XorOpnd *)a4;
    else
      v18 = a3;
    if (*((_BYTE *)a4 + 36))
      v10 = a3;
    v19 = *((unsigned int *)v18 + 6);
    v89 = v19;
    if (v19 > 0x40)
    {
      v88 = (void *)operator new[]();
      memcpy(v88, *((const void **)v18 + 2), ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v88);
      v19 = v89;
      v22 = (uint64_t)v88;
      v89 = 0;
      if (v19 > 0x40)
      {
        v36 = 0;
        v37 = *((_QWORD *)v10 + 2);
        v38 = (unint64_t)(v19 + 63) >> 6;
        do
        {
          *(_QWORD *)(v22 + v36) ^= *(_QWORD *)(v37 + v36);
          v36 += 8;
        }
        while (8 * v38 != v36);
        v39 = 0;
        v91 = v19;
        v90 = v22;
        do
        {
          v31 = v38-- < 1;
          if (v31)
            break;
          v40 = *(_QWORD *)(v22 + 8 * v38);
          v39 += __clz(v40);
        }
        while (!v40);
        v41 = v19 | 0xFFFFFFC0;
        if ((v19 & 0x3F) == 0)
          v41 = 0;
        if (v39 + v41 == (_DWORD)v19
          || llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v90) == (_DWORD)v19)
        {
          goto LABEL_66;
        }
        goto LABEL_52;
      }
    }
    else
    {
      v20 = ~*((_QWORD *)v18 + 2);
      v21 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
      if (!(_DWORD)v19)
        v21 = 0;
      v22 = v21 & v20;
      v88 = (void *)(v21 & v20);
      v89 = 0;
    }
    v22 ^= *((_QWORD *)v10 + 2);
    v91 = v19;
    v90 = v22;
    if (!(_DWORD)v19 || !v22 || v22 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v19)
      goto LABEL_66;
LABEL_52:
    v87 = v17;
    v42 = *((_DWORD *)a5 + 2);
    if (v42 > 0x40)
      v43 = llvm::APInt::countLeadingZerosSlowCase(a5) == v42;
    else
      v43 = *(_QWORD *)a5 == 0;
    v48 = v43;
    if (!v48 || v87 >= 2)
    {
LABEL_66:
      *a6 = sub_1C5BF2E8C((uint64_t)a2, v6, (llvm::Type *)&v90);
      v50 = *((unsigned int *)a5 + 2);
      if (v50 > 0x40)
      {
        v51 = *(_QWORD **)a5;
        v52 = (uint64_t *)*((_QWORD *)v18 + 2);
        v53 = (unint64_t)(v50 + 63) >> 6;
        do
        {
          v54 = *v52++;
          *v51++ ^= v54;
          --v53;
        }
        while (v53);
      }
      else
      {
        *(_QWORD *)a5 ^= *((_QWORD *)v18 + 2);
      }
      if (v91 >= 0x41 && v90)
        MEMORY[0x1CAA32F9C](v90, 0x1000C8000313F17);
      goto LABEL_90;
    }
    if (v19 >= 0x41 && v22)
    {
      v49 = (char *)v22;
LABEL_81:
      MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
      return 0;
    }
    return 0;
  }
  if (!*((_BYTE *)a3 + 36))
  {
    v25 = *((unsigned int *)a3 + 6);
    if (v25 > 0x40)
    {
      v26 = (void *)operator new[]();
      memcpy(v26, *((const void **)a3 + 2), ((unint64_t)(v25 + 63) >> 3) & 0x3FFFFFF8);
      v44 = (uint64_t *)*((_QWORD *)v10 + 2);
      v45 = (unint64_t)(v25 + 63) >> 6;
      v46 = v26;
      do
      {
        v47 = *v44++;
        *v46++ ^= v47;
        --v45;
      }
      while (v45);
    }
    else
    {
      v26 = (void *)((unint64_t)a4[2] ^ *((_QWORD *)a3 + 2));
    }
    v91 = v25;
    v90 = (uint64_t)v26;
    *a6 = sub_1C5BF2E8C((uint64_t)a2, v6, (llvm::Type *)&v90);
    goto LABEL_86;
  }
  v86 = v15 + v16;
  v23 = *((unsigned int *)a3 + 6);
  if (v23 >= 0x41)
  {
    v24 = (char *)operator new[]();
    memcpy(v24, *((const void **)a3 + 2), ((unint64_t)(v23 + 63) >> 3) & 0x3FFFFFF8);
    v27 = 0;
    v28 = *((_QWORD *)v10 + 2);
    v29 = (unint64_t)(v23 + 63) >> 6;
    do
    {
      *(_QWORD *)&v24[v27] ^= *(_QWORD *)(v28 + v27);
      v27 += 8;
    }
    while (8 * v29 != v27);
    v30 = 0;
    v91 = v23;
    v90 = (uint64_t)v24;
    v13 = this;
    do
    {
      v31 = v29-- < 1;
      if (v31)
        break;
      v32 = *(_QWORD *)&v24[8 * v29];
      v30 += __clz(v32);
    }
    while (!v32);
    v33 = v23 | 0xFFFFFFC0;
    if ((v23 & 0x3F) == 0)
      v33 = 0;
    if (v30 + v33 == (_DWORD)v23
      || llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v90) == (_DWORD)v23)
    {
      goto LABEL_82;
    }
LABEL_41:
    v34 = *((_DWORD *)a5 + 2);
    if (v34 > 0x40)
      v35 = llvm::APInt::countLeadingZerosSlowCase(a5) == v34;
    else
      v35 = *(_QWORD *)a5 == 0;
    v55 = v35;
    if (v55 && v86 < 2)
    {
      if (v23 >= 0x41)
      {
        v49 = v24;
        goto LABEL_81;
      }
      return 0;
    }
    goto LABEL_82;
  }
  v24 = (char *)((unint64_t)a4[2] ^ *((_QWORD *)a3 + 2));
  v91 = *((_DWORD *)a3 + 6);
  v90 = (uint64_t)v24;
  if ((_DWORD)v23 && v24 && v24 != (char *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v23))
    goto LABEL_41;
LABEL_82:
  *a6 = sub_1C5BF2E8C((uint64_t)a2, v6, (llvm::Type *)&v90);
  v56 = *((unsigned int *)a5 + 2);
  if (v56 > 0x40)
  {
    v57 = *(_QWORD **)a5;
    v58 = (uint64_t *)v90;
    v59 = (unint64_t)(v56 + 63) >> 6;
    do
    {
      v60 = *v58++;
      *v57++ ^= v60;
      --v59;
    }
    while (v59);
  }
  else
  {
    *(_QWORD *)a5 ^= v90;
  }
LABEL_86:
  if (v91 >= 0x41 && v90)
    MEMORY[0x1CAA32F9C](v90, 0x1000C8000313F17);
  v18 = a3;
LABEL_90:
  v61 = *(_QWORD *)v18;
  if (*(_QWORD *)v18 && *(unsigned __int8 *)(v61 + 16) >= 0x1Cu)
  {
    v62 = *((_QWORD *)v13 + 6);
    v90 = *(_QWORD *)v18;
    v63 = *((_DWORD *)v13 + 16);
    if (!v63)
    {
      v72 = 0;
LABEL_106:
      *sub_1C5BFCD34((uint64_t)v13 + 48, &v90, v72) = v61;
      sub_1C5BFC974((uint64_t)v13 + 72, &v90);
      goto LABEL_107;
    }
    v64 = v63 - 1;
    v65 = v64 & ((v61 >> 4) ^ (v61 >> 9));
    v66 = (uint64_t *)(v62 + 8 * v65);
    v67 = *v66;
    if (v61 != *v66)
    {
      v68 = 0;
      v69 = 1;
      while (v67 != -4096)
      {
        if (v68)
          v70 = 0;
        else
          v70 = v67 == -8192;
        if (v70)
          v68 = v66;
        v71 = v65 + v69++;
        v65 = v71 & v64;
        v66 = (uint64_t *)(v62 + 8 * v65);
        v67 = *v66;
        if (v61 == *v66)
          goto LABEL_107;
      }
      if (v68)
        v72 = v68;
      else
        v72 = v66;
      goto LABEL_106;
    }
  }
LABEL_107:
  v73 = *(_QWORD *)v10;
  result = 1;
  if (v73 && *(unsigned __int8 *)(v73 + 16) >= 0x1Cu)
  {
    v74 = *((_QWORD *)v13 + 6);
    v90 = v73;
    v75 = *((_DWORD *)v13 + 16);
    if (v75)
    {
      v76 = v75 - 1;
      v77 = v76 & ((v73 >> 4) ^ (v73 >> 9));
      v78 = (uint64_t *)(v74 + 8 * v77);
      v79 = *v78;
      if (v73 == *v78)
        return 1;
      v80 = 0;
      v81 = 1;
      while (v79 != -4096)
      {
        if (v80)
          v82 = 0;
        else
          v82 = v79 == -8192;
        if (v82)
          v80 = v78;
        v83 = v77 + v81++;
        v77 = v83 & v76;
        v78 = (uint64_t *)(v74 + 8 * v77);
        v79 = *v78;
        if (v73 == *v78)
          return 1;
      }
      if (v80)
        v84 = v80;
      else
        v84 = v78;
    }
    else
    {
      v84 = 0;
    }
    *sub_1C5BFCD34((uint64_t)v13 + 48, &v90, v84) = v73;
    sub_1C5BFC974((uint64_t)v13 + 72, &v90);
    return 1;
  }
  return result;
}

llvm::Value **llvm::ReassociatePass::OptimizeXor(llvm::ReassociatePass *a1, llvm::Instruction *a2, _DWORD *a3)
{
  llvm::Value **v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Value *v11;
  llvm::Value **v12;
  char *v13;
  llvm::ReassociatePass *v14;
  int v15;
  char *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  char *v20;
  int v21;
  _QWORD *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  void *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  unint64_t v34;
  char *v35;
  const std::nothrow_t *v36;
  unint64_t v37;
  uint64_t *v38;
  BOOL v39;
  const llvm::APInt *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int64_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  char *v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  int v67;
  int64_t v68;
  unint64_t v69;
  unsigned int v70;
  llvm::Value **v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  llvm::ConstantInt **v75;
  llvm::Instruction *v76;
  llvm::Value *v77[2];
  uint64_t v78;
  unsigned int v79;
  int Rank;
  char v81;
  llvm::Value *v82;
  unint64_t v83;
  unsigned int PrimitiveSizeInBits;
  void *v85;
  uint64_t v86;
  _BYTE v87[64];
  void *v88;
  uint64_t v89;
  _QWORD v90[42];

  v90[40] = *MEMORY[0x1E0C80C00];
  v6 = sub_1C5BF3EAC(30, (uint64_t)a3);
  if (v6)
    return v6;
  v76 = a2;
  v7 = a3[2];
  if (v7 == 1)
    return 0;
  v88 = v90;
  v89 = 0x800000000;
  v85 = v87;
  v86 = 0x800000000;
  v8 = **(_QWORD **)(*(_QWORD *)a3 + 8);
  v75 = (llvm::ConstantInt **)v8;
  if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12)
    v8 = **(_QWORD **)(v8 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v8);
  if (PrimitiveSizeInBits > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v83, 0, 0);
    v7 = a3[2];
    if (v7)
    {
LABEL_8:
      v9 = 0;
      v10 = v7;
      do
      {
        v11 = *(llvm::Value **)(*(_QWORD *)a3 + 16 * v9 + 8);
        v82 = 0;
        v77[0] = (llvm::Value *)&v82;
        v77[1] = 0;
        if (sub_1C4D89F84((uint64_t)v77, (unsigned __int8 *)v11))
        {
          if (PrimitiveSizeInBits > 0x40)
          {
            v22 = (_QWORD *)v83;
            v23 = *(uint64_t **)v82;
            v24 = ((unint64_t)PrimitiveSizeInBits + 63) >> 6;
            do
            {
              v25 = *v23++;
              *v22++ ^= v25;
              --v24;
            }
            while (v24);
          }
          else
          {
            v83 ^= *(_QWORD *)v82;
          }
        }
        else
        {
          v12 = v77;
          llvm::reassociate::XorOpnd::XorOpnd((llvm::reassociate::XorOpnd *)v77, v11);
          Rank = llvm::ReassociatePass::getRank(a1, v77[1]);
          v13 = (char *)v88;
          if (v89 >= HIDWORD(v89))
          {
            v26 = v89 + 1;
            if (v88 <= v77 && (char *)v88 + 40 * v89 > (char *)v77)
            {
              v14 = a1;
              v27 = (char *)v77 - (_BYTE *)v88;
              sub_1C5BFCFDC((uint64_t)&v88, v26);
              v13 = (char *)v88;
              v12 = (llvm::Value **)((char *)v88 + v27);
            }
            else
            {
              v14 = a1;
              sub_1C5BFCFDC((uint64_t)&v88, v26);
              v12 = v77;
              v13 = (char *)v88;
            }
          }
          else
          {
            v14 = a1;
          }
          v15 = v89;
          v16 = &v13[40 * v89];
          *(_OWORD *)v16 = *(_OWORD *)v12;
          v17 = *((_DWORD *)v12 + 6);
          *((_DWORD *)v16 + 6) = v17;
          v18 = (unsigned int *)(v16 + 24);
          v19 = v18 - 2;
          if (v17 > 0x40)
          {
            v28 = (void *)operator new[]();
            *(_QWORD *)v19 = v28;
            memcpy(v28, v12[2], (((unint64_t)*v18 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            *(_QWORD *)v19 = v12[2];
          }
          v20 = &v13[40 * v15];
          v21 = *((_DWORD *)v12 + 8);
          v20[36] = *((_BYTE *)v12 + 36);
          *((_DWORD *)v20 + 8) = v21;
          LODWORD(v89) = v89 + 1;
          a1 = v14;
          if (v79 >= 0x41 && v78)
            MEMORY[0x1CAA32F9C](v78, 0x1000C8000313F17);
        }
        ++v9;
      }
      while (v9 != v10);
    }
  }
  else
  {
    v83 = 0;
    if (v7)
      goto LABEL_8;
  }
  v29 = v86;
  if ((_DWORD)v89)
  {
    v30 = 0;
    v31 = 40 * v89;
    do
    {
      v32 = (char *)v88;
      if (v29 >= HIDWORD(v86))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, (uint64_t)v87, v29 + 1, 8);
        v29 = v86;
      }
      *((_QWORD *)v85 + v29) = &v32[v30];
      v29 = v86 + 1;
      LODWORD(v86) = v86 + 1;
      v30 += 40;
    }
    while (v31 != v30);
  }
  v33 = (char *)v85;
  v34 = v29;
  v35 = (char *)v85 + 8 * v29;
  if (v29 < 0x81)
  {
LABEL_39:
    sub_1C5BFD0E8(v33, v35, v34, 0, 0);
  }
  else
  {
    v36 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v37 = v29;
    while (1)
    {
      v38 = (uint64_t *)operator new(8 * v37, v36);
      if (v38)
        break;
      v39 = v37 > 1;
      v37 >>= 1;
      if (!v39)
        goto LABEL_39;
    }
    v41 = v38;
    sub_1C5BFD0E8(v33, v35, v34, v38, v37);
    operator delete(v41);
  }
  v42 = v89;
  if (!(_DWORD)v89)
  {
LABEL_80:
    v6 = 0;
    goto LABEL_81;
  }
  v43 = 0;
  v44 = 0;
  v45 = 0;
  do
  {
    v46 = *((_QWORD *)v85 + v43);
    v82 = 0;
    if (PrimitiveSizeInBits > 0x40)
    {
      v47 = 0;
      v48 = ((unint64_t)PrimitiveSizeInBits + 63) >> 6;
      do
      {
        v39 = v48-- < 1;
        if (v39)
          break;
        v49 = *(_QWORD *)(v83 + 8 * v48);
        v47 += __clz(v49);
      }
      while (!v49);
      v50 = PrimitiveSizeInBits | 0xFFFFFFC0;
      if ((PrimitiveSizeInBits & 0x3F) == 0)
        v50 = 0;
      if (v47 + v50 == PrimitiveSizeInBits)
        goto LABEL_58;
    }
    else if (!v83)
    {
      goto LABEL_58;
    }
    if (llvm::ReassociatePass::CombineXorOpnd(a1, v76, (llvm::reassociate::XorOpnd *)v46, (const void **)&v83, &v82))
    {
      if (!v82)
      {
        *(_QWORD *)v46 = 0;
        *(_QWORD *)(v46 + 8) = 0;
        v44 = 1;
LABEL_67:
        v46 = v45;
        goto LABEL_68;
      }
      llvm::reassociate::XorOpnd::XorOpnd((llvm::reassociate::XorOpnd *)v77, v82);
      *(_OWORD *)v46 = *(_OWORD *)v77;
      if (*(_DWORD *)(v46 + 24) >= 0x41u)
      {
        v51 = *(_QWORD *)(v46 + 16);
        if (v51)
          MEMORY[0x1CAA32F9C](v51, 0x1000C8000313F17);
      }
      *(_QWORD *)(v46 + 16) = v78;
      *(_DWORD *)(v46 + 24) = v79;
      v52 = Rank;
      *(_BYTE *)(v46 + 36) = v81;
      *(_DWORD *)(v46 + 32) = v52;
      v44 = 1;
    }
LABEL_58:
    if (v45 && *(_QWORD *)(v46 + 8) == *(_QWORD *)(v45 + 8))
    {
      if (!llvm::ReassociatePass::CombineXorOpnd(a1, v76, (llvm::reassociate::XorOpnd *)v46, (llvm::Value **)v45, (llvm::APInt *)&v83, &v82))goto LABEL_67;
      *(_QWORD *)v45 = 0;
      *(_QWORD *)(v45 + 8) = 0;
      if (v82)
      {
        llvm::reassociate::XorOpnd::XorOpnd((llvm::reassociate::XorOpnd *)v77, v82);
        *(_OWORD *)v46 = *(_OWORD *)v77;
        if (*(_DWORD *)(v46 + 24) >= 0x41u)
        {
          v53 = *(_QWORD *)(v46 + 16);
          if (v53)
            MEMORY[0x1CAA32F9C](v53, 0x1000C8000313F17);
        }
        *(_QWORD *)(v46 + 16) = v78;
        *(_DWORD *)(v46 + 24) = v79;
        v54 = Rank;
        *(_BYTE *)(v46 + 36) = v81;
        *(_DWORD *)(v46 + 32) = v54;
        v44 = 1;
      }
      else
      {
        *(_QWORD *)v46 = 0;
        *(_QWORD *)(v46 + 8) = 0;
        v44 = 1;
        v46 = 0;
      }
    }
LABEL_68:
    ++v43;
    v45 = v46;
  }
  while (v43 != v42);
  if ((v44 & 1) == 0)
    goto LABEL_80;
  a3[2] = 0;
  if ((_DWORD)v89)
  {
    v55 = 0;
    v56 = 0;
    v57 = 40 * v89;
    do
    {
      v58 = (char *)v88;
      if (*(_QWORD *)((char *)v88 + v55 + 8))
      {
        v59 = llvm::ReassociatePass::getRank(a1, *(llvm::Value **)((char *)v88 + v55));
        v60 = *(_QWORD *)&v58[v55];
        v61 = a3[2];
        if (v61 >= a3[3])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, (uint64_t)(a3 + 4), v61 + 1, 16);
          v61 = a3[2];
        }
        v43 = v43 & 0xFFFFFFFF00000000 | v59;
        v62 = (unint64_t *)(*(_QWORD *)a3 + 16 * v61);
        *v62 = v43;
        v62[1] = v60;
        v56 = a3[2] + 1;
        a3[2] = v56;
      }
      v55 += 40;
    }
    while (v57 != v55);
  }
  else
  {
    v56 = 0;
  }
  if (PrimitiveSizeInBits > 0x40)
  {
    v67 = 0;
    v68 = ((unint64_t)PrimitiveSizeInBits + 63) >> 6;
    do
    {
      v39 = v68-- < 1;
      if (v39)
        break;
      v69 = *(_QWORD *)(v83 + 8 * v68);
      v67 += __clz(v69);
    }
    while (!v69);
    v70 = PrimitiveSizeInBits | 0xFFFFFFC0;
    if ((PrimitiveSizeInBits & 0x3F) == 0)
      v70 = 0;
    if (v67 + v70 != PrimitiveSizeInBits)
      goto LABEL_106;
  }
  else
  {
    if (!v83)
      goto LABEL_109;
LABEL_106:
    v71 = llvm::ConstantInt::get(v75, (llvm::Type *)&v83, v40);
    v72 = llvm::ReassociatePass::getRank(a1, (llvm::Value *)v71);
    v73 = a3[2];
    if (v73 >= a3[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, (uint64_t)(a3 + 4), v73 + 1, 16);
      LODWORD(v73) = a3[2];
    }
    v74 = (_QWORD *)(*(_QWORD *)a3 + 16 * v73);
    *v74 = v72;
    v74[1] = v71;
    v56 = a3[2] + 1;
    a3[2] = v56;
  }
LABEL_109:
  if (v56)
  {
    if (v56 == 1)
      v6 = *(llvm::Value ***)(*(_QWORD *)a3 + 8);
    else
      v6 = 0;
  }
  else
  {
    v6 = llvm::ConstantInt::get(v75, (llvm::Type *)&v83, v40);
  }
LABEL_81:
  if (PrimitiveSizeInBits >= 0x41 && v83)
    MEMORY[0x1CAA32F9C](v83, 0x1000C8000313F17);
  if (v85 != v87)
    free(v85);
  v63 = (char *)v88;
  if ((_DWORD)v89)
  {
    v64 = 40 * v89;
    do
    {
      if (*(_DWORD *)&v63[v64 - 16] >= 0x41u)
      {
        v65 = *(_QWORD *)&v63[v64 - 24];
        if (v65)
          MEMORY[0x1CAA32F9C](v65, 0x1000C8000313F17);
      }
      v64 -= 40;
    }
    while (v64);
    v63 = (char *)v88;
  }
  if (v63 != (char *)v90)
    free(v63);
  return v6;
}

llvm::Value **sub_1C5BF3EAC(int a1, uint64_t a2)
{
  int v2;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  llvm::Type *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  int v13;
  char *v14;
  int64_t v15;
  llvm::Constant **v17;
  llvm::Instruction **v18;
  llvm::Instruction *v19;

  v2 = *(_DWORD *)(a2 + 8);
  if (!v2)
    return 0;
  v5 = 0;
  v6 = a1 & 0xFFFFFFFE;
  while (1)
  {
    v19 = 0;
    v7 = *(_QWORD *)(*(_QWORD *)a2 + 16 * v5 + 8);
    v18 = &v19;
    if (sub_1C4D9EC28(&v18, 30, v7) && sub_1C5BF5294(a2, v5, v19) != (_DWORD)v5)
    {
      if (a1 == 29)
        return (llvm::Value **)llvm::Constant::getAllOnesValue(*(llvm::Constant **)v19, v8);
      if (a1 == 28)
      {
        v17 = (llvm::Constant **)v19;
        return llvm::Constant::getNullValue(*v17, v8);
      }
    }
    v9 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v9 != (_DWORD)v5 + 1)
    {
      v10 = *(_QWORD *)a2;
      v11 = (_QWORD *)(*(_QWORD *)a2 + 16 * v5);
      if (*(_QWORD *)(*(_QWORD *)a2 + 16 * (v5 + 1) + 8) == v11[1])
        break;
    }
    v5 = (v5 + 1);
LABEL_10:
    if ((_DWORD)v5 == v2)
      return 0;
  }
  if (v6 == 28)
  {
    v12 = (char *)(v10 + 16 * v9);
    if (v12 != (char *)(v11 + 2))
    {
      memmove((void *)(*(_QWORD *)a2 + 16 * v5), v11 + 2, v12 - (char *)(v11 + 2));
      LODWORD(v9) = *(_DWORD *)(a2 + 8);
    }
    LODWORD(v9) = v9 - 1;
    v13 = -1;
LABEL_20:
    *(_DWORD *)(a2 + 8) = v9;
    v2 += v13;
    goto LABEL_10;
  }
  if (v2 != 2)
  {
    v14 = (char *)(v10 + 16 * v9);
    v15 = v14 - (char *)(v11 + 4);
    if (v14 != (char *)(v11 + 4))
    {
      memmove((void *)(*(_QWORD *)a2 + 16 * v5), v11 + 4, v14 - (char *)(v11 + 4));
      v10 = *(_QWORD *)a2;
    }
    v9 = ((unint64_t)v11 + v15 - v10) >> 4;
    v13 = -2;
    goto LABEL_20;
  }
  v17 = *(llvm::Constant ***)(v10 + 8);
  return llvm::Constant::getNullValue(*v17, v8);
}

llvm::Value **llvm::ReassociatePass::OptimizeAdd(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  llvm::Type *v17;
  int v18;
  unsigned int v19;
  char *v20;
  void *v21;
  char *v22;
  llvm::ConstantInt *v23;
  int v24;
  void *v25;
  llvm::Value *v26;
  llvm::Value *v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t *v32;
  llvm::Value *v33;
  uint64_t *v34;
  int v35;
  BOOL v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  llvm::Type *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  llvm::Type *v51;
  llvm::Value *AllOnesValue;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const llvm::APFloat *v61;
  char v62;
  llvm::APFloatBase *v63;
  unsigned int v64;
  llvm::Instruction **v65;
  llvm::APFloatBase *v66;
  llvm::Instruction **v67;
  int v68;
  BOOL v69;
  unsigned int v70;
  llvm::Instruction **v71;
  int v72;
  int v73;
  unint64_t **v74;
  unsigned int v75;
  unsigned int v76;
  unint64_t v77;
  llvm::ConstantInt *v78;
  uint64_t v79;
  char v80;
  int v81;
  _BOOL4 v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  llvm::APFloatBase *v90;
  unsigned int v91;
  llvm::Instruction **v92;
  llvm::APFloatBase *v93;
  llvm::Instruction **v94;
  int v95;
  BOOL v96;
  unsigned int v97;
  unint64_t v98;
  const llvm::APInt *v99;
  char v100;
  llvm::APFloatBase *v101;
  unsigned int v102;
  llvm::Instruction **v103;
  llvm::APFloatBase *v104;
  llvm::Instruction **v105;
  int v106;
  BOOL v107;
  unsigned int v108;
  llvm::Instruction **v109;
  int v110;
  llvm::Instruction **v111;
  int v112;
  int v113;
  char *v115;
  _QWORD *v116;
  char *v117;
  uint64_t ***v118;
  char v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t *v125;
  unsigned int v126;
  uint64_t *v127;
  unsigned int v128;
  uint64_t v129;
  _QWORD *v130;
  int v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  int32x2_t *v139;
  unint64_t v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  llvm::Value *v151;
  llvm::Value *v152;
  int v153;
  uint64_t v154;
  int v155;
  unsigned int v156;
  uint64_t *v157;
  llvm::Value *v158;
  uint64_t *v159;
  int v160;
  BOOL v161;
  unsigned int v162;
  uint64_t *v163;
  llvm::Value *v164;
  int v165;
  uint64_t v166;
  int v167;
  unsigned int v168;
  uint64_t *v169;
  llvm::Value *v170;
  uint64_t *v171;
  int v172;
  BOOL v173;
  unsigned int v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  llvm::Instruction *v184;
  unsigned int v185;
  llvm::APFloatBase *v186;
  llvm::Instruction **v187;
  uint64_t v188;
  int v189;
  __int128 v190;
  uint64_t v191;
  int v192;
  _WORD v193[40];
  llvm::Instruction *v194;
  uint64_t v195;
  uint64_t *v196;
  int v197;
  char v198;
  __int128 v199;
  _QWORD v200[2];
  __int16 v201;
  uint64_t v202;

  v202 = *MEMORY[0x1E0C80C00];
  v5 = a3[2];
  if (!(_DWORD)v5)
  {
    v27 = 0;
    v187 = 0;
    v188 = 0;
    v189 = 0;
    goto LABEL_289;
  }
  v7 = 0;
  v179 = a1 + 48;
  v180 = a1 + 72;
  do
  {
    v8 = *(_QWORD *)a3;
    v9 = *(_QWORD *)(*(_QWORD *)a3 + 16 * v7 + 8);
    v10 = a3[2];
    if (v10 != (_DWORD)v7 + 1 && *(_QWORD *)(v8 + 16 * (v7 + 1) + 8) == v9)
    {
      v18 = 1;
      do
      {
        v19 = v18;
        v20 = (char *)(v8 + 16 * v7);
        v21 = v20 + 16;
        v22 = (char *)(v8 + 16 * v10);
        if (v22 != v20 + 16)
        {
          memmove(v20, v21, v22 - (v20 + 16));
          v10 = a3[2];
        }
        a3[2] = --v10;
        if (v10 == (_DWORD)v7)
          break;
        v8 = *(_QWORD *)a3;
        v18 = v19 + 1;
      }
      while (*(_QWORD *)(*(_QWORD *)a3 + 16 * v7 + 8) == v9);
      v23 = *(llvm::ConstantInt **)v9;
      if ((*(_DWORD *)(*(_QWORD *)v9 + 8) & 0xFE) == 0x12)
        v24 = *(unsigned __int8 *)(**((_QWORD **)v23 + 2) + 8);
      else
        v24 = *(_DWORD *)(*(_QWORD *)v9 + 8);
      if (v24 == 13)
        v25 = llvm::ConstantInt::get(v23, v19, 0);
      else
        v25 = llvm::ConstantFP::get((llvm::ConstantFP **)v23, (llvm::Type *)v21, (double)v19);
      *(_QWORD *)&v190 = "factor";
      v193[0] = 259;
      v26 = sub_1C5BF520C((_QWORD *)v9, (uint64_t)v25, (uint64_t)&v190, a2, a2);
      v27 = v26;
      *(_QWORD *)&v190 = v26;
      v28 = *(_DWORD *)(a1 + 64);
      if (v28)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v30 = v28 - 1;
        v31 = v30 & ((v26 >> 4) ^ (v26 >> 9));
        v32 = (uint64_t *)(v29 + 8 * v31);
        v33 = (llvm::Value *)*v32;
        if (v26 == (llvm::Value *)*v32)
        {
LABEL_49:
          if (!a3[2])
            return (llvm::Value **)v27;
          v39 = *(_QWORD *)a3;
          v4 = v4 & 0xFFFFFFFF00000000 | llvm::ReassociatePass::getRank((llvm::ReassociatePass *)a1, v27);
          *(_QWORD *)&v190 = v4;
          *((_QWORD *)&v190 + 1) = v27;
          sub_1C5398E8C(a3, v39, &v190);
          LODWORD(v7) = v7 - 1;
          v14 = a3[2];
          goto LABEL_79;
        }
        v34 = 0;
        v35 = 1;
        while (v33 != (llvm::Value *)-4096)
        {
          if (v34)
            v36 = 0;
          else
            v36 = v33 == (llvm::Value *)-8192;
          if (v36)
            v34 = v32;
          v37 = v31 + v35++;
          v31 = v37 & v30;
          v32 = (uint64_t *)(v29 + 8 * v31);
          v33 = (llvm::Value *)*v32;
          if (v26 == (llvm::Value *)*v32)
            goto LABEL_49;
        }
        if (v34)
          v38 = v34;
        else
          v38 = v32;
      }
      else
      {
        v38 = 0;
      }
      *sub_1C5BFCD34(v179, (uint64_t *)&v190, v38) = (uint64_t)v26;
      sub_1C5BFC974(v180, &v190);
      goto LABEL_49;
    }
    v194 = 0;
    *((_QWORD *)&v190 + 1) = &v194;
    v11 = *(unsigned __int8 *)(v9 + 16);
    if (v11 == 5)
    {
      if (*(_WORD *)(v9 + 18) == 15)
      {
        if (sub_1C4E71060((uint64_t)&v190, *(llvm::Constant **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF))))
        {
          v12 = *(_QWORD *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 32);
          if (v12)
          {
LABEL_13:
            **((_QWORD **)&v190 + 1) = v12;
            goto LABEL_16;
          }
        }
      }
    }
    else if (v11 == 43)
    {
      if (sub_1C4D8AC3C((uint64_t)&v190, *(llvm::Constant **)(v9 - 64)))
      {
        v12 = *(_QWORD *)(v9 - 32);
        if (v12)
          goto LABEL_13;
      }
    }
    *(_QWORD *)&v199 = &v194;
    if ((sub_1C4D9EC28((_QWORD **)&v199, 30, v9) & 1) == 0)
    {
      v187 = &v194;
      if (!sub_1C4E7B6EC(&v187, v9))
      {
LABEL_17:
        v14 = v5;
        goto LABEL_79;
      }
    }
LABEL_16:
    v13 = sub_1C5BF5294((uint64_t)a3, v7, v194);
    if (v13 == (_DWORD)v7)
      goto LABEL_17;
    v15 = v13;
    if (a3[2] == 2)
    {
      v16 = *(unsigned __int8 *)(v9 + 16);
      if (v16 == 5)
      {
        if (*(_WORD *)(v9 + 18) == 15
          && (sub_1C4E71060((uint64_t)&v190, *(llvm::Constant **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF))) & 1) != 0)
        {
          return llvm::Constant::getNullValue(*(llvm::Constant **)v194, v17);
        }
      }
      else if (v16 == 43 && (sub_1C4D8AC3C((uint64_t)&v190, *(llvm::Constant **)(v9 - 64)) & 1) != 0)
      {
        return llvm::Constant::getNullValue(*(llvm::Constant **)v194, v17);
      }
      if (sub_1C578ED28((uint64_t)&v199, v9))
        return llvm::Constant::getNullValue(*(llvm::Constant **)v194, v17);
      if (a3[2] == 2)
      {
        v40 = *(unsigned __int8 *)(v9 + 16);
        if (v40 == 5)
        {
          if (*(_WORD *)(v9 + 18) == 30
            && (sub_1C4D9EED4((uint64_t)&v190 + 1, *(llvm::Constant **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 32))|| sub_1C4D9EED4((uint64_t)&v190 + 1, *(llvm::Constant **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF)))))
          {
            return (llvm::Value **)llvm::Constant::getAllOnesValue(*(llvm::Constant **)v194, v41);
          }
        }
        else if (v40 == 58
               && ((sub_1C4D9ED34((uint64_t)&v190 + 1, *(llvm::Constant **)(v9 - 32)) & 1) != 0
                || (sub_1C4D9ED34((uint64_t)&v190 + 1, *(llvm::Constant **)(v9 - 64)) & 1) != 0))
        {
          return (llvm::Value **)llvm::Constant::getAllOnesValue(*(llvm::Constant **)v194, v41);
        }
      }
    }
    v42 = *(_QWORD *)a3;
    v43 = *(_QWORD *)a3 + 16 * v7;
    v44 = a3[2];
    v45 = *(_QWORD *)a3 + 16 * v44;
    if (v45 != v43 + 16)
    {
      memmove((void *)v43, (const void *)(v43 + 16), v45 - (v43 + 16));
      LODWORD(v44) = a3[2];
      v42 = *(_QWORD *)a3;
    }
    v46 = v44 - 1;
    a3[2] = v46;
    if (v7 < v15)
      v47 = 0;
    else
      v47 = -1;
    v48 = v42 + 16 * ((__PAIR64__(v15, v7) - v15) >> 32);
    v49 = v42 + 16 * v46;
    if (v49 != v48 + 16)
    {
      memmove((void *)v48, (const void *)(v48 + 16), v49 - (v48 + 16));
      v46 = a3[2];
    }
    a3[2] = v46 - 1;
    LODWORD(v7) = v7 + v47 - 1;
    v14 = (v5 - 2);
    v50 = *(unsigned __int8 *)(v9 + 16);
    if (v50 == 5)
    {
      if (*(_WORD *)(v9 + 18) == 30
        && (sub_1C4D9EED4((uint64_t)&v190 + 1, *(llvm::Constant **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 32))|| sub_1C4D9EED4((uint64_t)&v190 + 1, *(llvm::Constant **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF)))))
      {
LABEL_78:
        AllOnesValue = llvm::Constant::getAllOnesValue(*(llvm::Constant **)v194, v51);
        v53 = *(_QWORD *)a3 + 16 * a3[2];
        v3 = v3 & 0xFFFFFFFF00000000 | llvm::ReassociatePass::getRank((llvm::ReassociatePass *)a1, AllOnesValue);
        *(_QWORD *)&v190 = v3;
        *((_QWORD *)&v190 + 1) = AllOnesValue;
        sub_1C5398E8C(a3, v53, &v190);
        v14 = (v5 - 1);
      }
    }
    else if (v50 == 58
           && ((sub_1C4D9ED34((uint64_t)&v190 + 1, *(llvm::Constant **)(v9 - 32)) & 1) != 0
            || (sub_1C4D9ED34((uint64_t)&v190 + 1, *(llvm::Constant **)(v9 - 64)) & 1) != 0))
    {
      goto LABEL_78;
    }
LABEL_79:
    v7 = (v7 + 1);
    v5 = v14;
  }
  while ((_DWORD)v7 != (_DWORD)v14);
  v54 = a3[2];
  v187 = 0;
  v188 = 0;
  v189 = 0;
  if (!(_DWORD)v54)
    goto LABEL_288;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v181 = v54;
  while (2)
  {
    v58 = sub_1C5BF17BC(*(_QWORD *)(*(_QWORD *)a3 + 16 * v55 + 8), 17, 18);
    if (!v58)
      goto LABEL_202;
    *(_QWORD *)&v199 = v200;
    *((_QWORD *)&v199 + 1) = 0x800000000;
    sub_1C5BF5404(v58, (uint64_t)&v199);
    *(_QWORD *)&v190 = v193;
    *((_QWORD *)&v190 + 1) = v193;
    v191 = 8;
    v192 = 0;
    v59 = DWORD2(v199);
    if (!DWORD2(v199))
      goto LABEL_200;
    v60 = 0;
    while (2)
    {
      v186 = 0;
      v186 = *(llvm::APFloatBase **)(v199 + 8 * v60);
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v190, (uint64_t)v186);
      if (!v62)
        goto LABEL_188;
      if (!v189)
      {
        v71 = 0;
        goto LABEL_102;
      }
      v63 = v186;
      v64 = ((v186 >> 4) ^ (v186 >> 9)) & (v189 - 1);
      v65 = &v187[2 * v64];
      v66 = *v65;
      if (v186 != *v65)
      {
        v67 = 0;
        v68 = 1;
        while (v66 != (llvm::APFloatBase *)-4096)
        {
          if (v67)
            v69 = 0;
          else
            v69 = v66 == (llvm::APFloatBase *)-8192;
          if (v69)
            v67 = v65;
          v70 = v64 + v68++;
          v64 = v70 & (v189 - 1);
          v65 = &v187[2 * v64];
          v66 = *v65;
          if (v186 == *v65)
            goto LABEL_103;
        }
        if (v67)
          v71 = v67;
        else
          v71 = v65;
LABEL_102:
        v65 = (llvm::Instruction **)sub_1C4E38190((uint64_t)&v187, (uint64_t)&v186, (uint64_t *)&v186, v71);
        *v65 = v186;
        *((_DWORD *)v65 + 2) = 0;
        v63 = v186;
      }
LABEL_103:
      v72 = *((_DWORD *)v65 + 2);
      *((_DWORD *)v65 + 2) = v72 + 1;
      if (v72 + 1 > v57)
      {
        v57 = v72 + 1;
        v56 = (uint64_t)v63;
      }
      v73 = *((unsigned __int8 *)v63 + 16);
      if (!v63 || v73 != 16)
      {
        if (!v63 || v73 != 17)
          goto LABEL_188;
        v79 = *((_QWORD *)v63 + 4);
        if ((_UNKNOWN *)v79 == &unk_1C866F1C0)
        {
          if ((*(_BYTE *)(*((_QWORD *)v63 + 5) + 28) & 8) == 0)
            goto LABEL_188;
          llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v195, (llvm::APFloatBase *)((char *)v63 + 32));
        }
        else
        {
          v80 = *((_BYTE *)v63 + 52);
          if ((v80 & 8) == 0)
            goto LABEL_188;
          v195 = *((_QWORD *)v63 + 4);
          if ((*(_DWORD *)(v79 + 8) + 64) >= 0x80)
          {
            v196 = (uint64_t *)operator new[]();
            v80 = *((_BYTE *)v63 + 52);
          }
          v81 = v80 & 7;
          v198 = v198 & 0xF0 | v80 & 0xF;
          v197 = *((_DWORD *)v63 + 12);
          v83 = (v80 & 6) != 0 && v81 != 3;
          if (v81 == 1 || v83)
          {
            v84 = *(unsigned int *)(v195 + 8);
            v85 = (uint64_t *)&v196;
            if ((v84 - 64) <= 0xFFFFFF7F)
              v85 = v196;
            v86 = (uint64_t *)((char *)v63 + 40);
            if ((*(_DWORD *)(*((_QWORD *)v63 + 4) + 8) - 64) < 0xFFFFFF80)
              v86 = (uint64_t *)*((_QWORD *)v63 + 5);
            if (v84 <= 0xFFFFFFBF)
            {
              v87 = (unint64_t)(v84 + 64) >> 6;
              do
              {
                v88 = *v86++;
                *v85++ = v88;
                --v87;
              }
              while (v87);
            }
          }
        }
        if ((_UNKNOWN *)v195 == &unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v195);
        else
          v198 ^= 8u;
        v186 = llvm::ConstantFP::get(**(llvm::ConstantFP ***)v63, (llvm::LLVMContext *)&v194, v61);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v190, (uint64_t)v186);
        if (!v89)
          goto LABEL_186;
        if (v189)
        {
          v90 = v186;
          v91 = ((v186 >> 4) ^ (v186 >> 9)) & (v189 - 1);
          v92 = &v187[2 * v91];
          v93 = *v92;
          if (v186 == *v92)
            goto LABEL_184;
          v94 = 0;
          v95 = 1;
          while (v93 != (llvm::APFloatBase *)-4096)
          {
            if (v94)
              v96 = 0;
            else
              v96 = v93 == (llvm::APFloatBase *)-8192;
            if (v96)
              v94 = v92;
            v97 = v91 + v95++;
            v91 = v97 & (v189 - 1);
            v92 = &v187[2 * v91];
            v93 = *v92;
            if (v186 == *v92)
              goto LABEL_184;
          }
          if (v94)
            v111 = v94;
          else
            v111 = v92;
        }
        else
        {
          v111 = 0;
        }
        v92 = (llvm::Instruction **)sub_1C4E38190((uint64_t)&v187, (uint64_t)&v186, (uint64_t *)&v186, v111);
        *v92 = v186;
        *((_DWORD *)v92 + 2) = 0;
        v90 = v186;
LABEL_184:
        v112 = *((_DWORD *)v92 + 2);
        *((_DWORD *)v92 + 2) = v112 + 1;
        if (v112 + 1 > v57)
        {
          v57 = v112 + 1;
          v56 = (uint64_t)v90;
        }
LABEL_186:
        if ((_UNKNOWN *)v195 == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v196);
        }
        else if ((*(_DWORD *)(v195 + 8) - 64) <= 0xFFFFFF7F && v196)
        {
          MEMORY[0x1CAA32F9C](v196, 0x1000C8000313F17);
        }
        goto LABEL_188;
      }
      v74 = (unint64_t **)((char *)v63 + 24);
      v75 = *((_DWORD *)v63 + 8);
      v76 = v75 - 1;
      if (v75 <= 0x40)
      {
        v77 = (unint64_t)*v74;
        if ((((unint64_t)*v74 >> v76) & 1) != 0 && v77 != 1 << v76)
        {
          v78 = **(llvm::ConstantInt ***)v63;
          v185 = *((_DWORD *)v63 + 8);
          goto LABEL_149;
        }
        goto LABEL_188;
      }
      if ((((*v74)[v76 >> 6] >> v76) & 1) != 0 && llvm::APInt::countTrailingZerosSlowCase(v74) != v76)
      {
        v78 = **(llvm::ConstantInt ***)v63;
        v185 = v75;
        v77 = operator new[]();
        v184 = (llvm::Instruction *)v77;
        v75 = v185;
        memcpy((void *)v77, *((const void **)v63 + 3), (((unint64_t)v185 + 63) >> 3) & 0x3FFFFFF8);
        if (v75 > 0x40)
        {
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v184);
        }
        else
        {
LABEL_149:
          v98 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v75;
          if (!v75)
            v98 = 0;
          v184 = (llvm::Instruction *)(v98 & ~v77);
        }
        llvm::APInt::operator++((uint64_t)&v184);
        LODWORD(v195) = v185;
        v194 = v184;
        v185 = 0;
        v186 = llvm::ConstantInt::get(v78, (llvm::LLVMContext *)&v194, v99);
        if (v195 >= 0x41 && v194)
          MEMORY[0x1CAA32F9C](v194, 0x1000C8000313F17);
        if (v185 >= 0x41 && v184)
          MEMORY[0x1CAA32F9C](v184, 0x1000C8000313F17);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v190, (uint64_t)v186);
        if (v100)
        {
          if (v189)
          {
            v101 = v186;
            v102 = ((v186 >> 4) ^ (v186 >> 9)) & (v189 - 1);
            v103 = &v187[2 * v102];
            v104 = *v103;
            if (v186 != *v103)
            {
              v105 = 0;
              v106 = 1;
              while (v104 != (llvm::APFloatBase *)-4096)
              {
                if (v105)
                  v107 = 0;
                else
                  v107 = v104 == (llvm::APFloatBase *)-8192;
                if (v107)
                  v105 = v103;
                v108 = v102 + v106++;
                v102 = v108 & (v189 - 1);
                v103 = &v187[2 * v102];
                v104 = *v103;
                if (v186 == *v103)
                  goto LABEL_175;
              }
              if (v105)
                v109 = v105;
              else
                v109 = v103;
LABEL_174:
              v103 = (llvm::Instruction **)sub_1C4E38190((uint64_t)&v187, (uint64_t)&v186, (uint64_t *)&v186, v109);
              *v103 = v186;
              *((_DWORD *)v103 + 2) = 0;
              v101 = v186;
            }
LABEL_175:
            v110 = *((_DWORD *)v103 + 2);
            *((_DWORD *)v103 + 2) = v110 + 1;
            if (v110 + 1 > v57)
            {
              v57 = v110 + 1;
              v56 = (uint64_t)v101;
            }
            goto LABEL_188;
          }
          v109 = 0;
          goto LABEL_174;
        }
      }
LABEL_188:
      if (++v60 != v59)
        continue;
      break;
    }
    if (*((_QWORD *)&v190 + 1) != (_QWORD)v190)
      free(*((void **)&v190 + 1));
    v54 = v181;
LABEL_200:
    if ((_QWORD *)v199 != v200)
      free((void *)v199);
LABEL_202:
    if (++v55 != v54)
      continue;
    break;
  }
  if (v57 <= 1)
    goto LABEL_288;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v113 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
  else
    v113 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  v193[0] = 257;
  if (v113 == 13)
  {
    v115 = (char *)operator new(0x80uLL);
    *(_QWORD *)v115 = 0;
    *((_QWORD *)v115 + 2) = 0;
    *((_QWORD *)v115 + 1) = 0;
    v116 = v115 + 8;
    *((_QWORD *)v115 + 5) = 0;
    *((_QWORD *)v115 + 6) = 0;
    *((_QWORD *)v115 + 4) = 0;
    v117 = v115 + 32;
    *((_QWORD *)v115 + 8) = *(_QWORD *)v56;
    v118 = (uint64_t ***)(v115 + 64);
    *((_QWORD *)v115 + 3) = v115 + 64;
    *((_QWORD *)v115 + 7) = v115 + 64;
    *((_QWORD *)v115 + 9) = 0;
    v119 = 41;
  }
  else
  {
    v115 = (char *)operator new(0x80uLL);
    *(_QWORD *)v115 = 0;
    *((_QWORD *)v115 + 2) = 0;
    *((_QWORD *)v115 + 1) = 0;
    v116 = v115 + 8;
    *((_QWORD *)v115 + 5) = 0;
    *((_QWORD *)v115 + 6) = 0;
    *((_QWORD *)v115 + 4) = 0;
    v117 = v115 + 32;
    *((_QWORD *)v115 + 8) = *(_QWORD *)v56;
    v118 = (uint64_t ***)(v115 + 64);
    *((_QWORD *)v115 + 3) = v115 + 64;
    *((_QWORD *)v115 + 7) = v115 + 64;
    *((_QWORD *)v115 + 9) = 0;
    v119 = 42;
  }
  v115[80] = v119;
  v115[81] = 0;
  *((_WORD *)v115 + 41) = 0;
  *((_DWORD *)v115 + 21) = 2;
  *((_DWORD *)v115 + 30) = 0;
  *(_OWORD *)(v115 + 104) = 0u;
  *(_OWORD *)(v115 + 88) = 0u;
  *(_QWORD *)v115 = v56;
  v120 = (_QWORD *)(v56 + 8);
  v121 = *(_QWORD *)(v56 + 8);
  *v116 = v121;
  if (v121)
    *(_QWORD *)(v121 + 16) = v116;
  *((_QWORD *)v115 + 2) = v120;
  *v120 = v115;
  if (*((_QWORD *)v115 + 4))
  {
    **((_QWORD **)v115 + 6) = *((_QWORD *)v115 + 5);
    v178 = *((_QWORD *)v115 + 5);
    if (v178)
      *(_QWORD *)(v178 + 16) = *((_QWORD *)v115 + 6);
  }
  *((_QWORD *)v115 + 4) = v56;
  v122 = *(_QWORD *)(v56 + 8);
  *((_QWORD *)v115 + 5) = v122;
  if (v122)
    *(_QWORD *)(v122 + 16) = v115 + 40;
  *((_QWORD *)v115 + 6) = v120;
  *v120 = v117;
  llvm::Value::setName(v118, (uint64_t)&v190);
  *(_QWORD *)&v190 = &v191;
  *((_QWORD *)&v190 + 1) = 0x400000000;
  if (a3[2])
  {
    v123 = 0;
    v124 = 0;
    do
    {
      if (sub_1C5BF17BC(*(_QWORD *)(*(_QWORD *)a3 + 16 * v123 + 8), 17, 18))
      {
        v125 = llvm::ReassociatePass::RemoveFactorFromExpression((llvm::ReassociatePass *)a1, *(llvm::Value **)(*(_QWORD *)a3 + 16 * v123 + 8), (const void **)v56);
        v126 = a3[2];
        if (v125)
        {
          v127 = v125;
          v128 = v124;
          LODWORD(v129) = a3[2];
          if (v126 != v124)
          {
            do
            {
              v129 = (v129 - 1);
              if (*(_QWORD *)(*(_QWORD *)a3 + 16 * v129 + 8) == *(_QWORD *)(*(_QWORD *)a3
                                                                                           + 16 * v123
                                                                                           + 8))
              {
                v199 = 6uLL;
                v200[0] = v127;
                if (v127 != (uint64_t *)-8192 && v127 != (uint64_t *)-4096)
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v199);
                v130 = (_QWORD *)sub_1C5087E70((unsigned int *)&v190, (unint64_t)&v199, 1);
                v131 = DWORD2(v190);
                v132 = (unint64_t *)(v190 + 24 * DWORD2(v190));
                *v132 = 6;
                v132[1] = 0;
                v133 = (unint64_t)(v132 + 1);
                v134 = v130[2];
                v132[2] = v134;
                if (v134 != -8192 && v134 != -4096)
                {
                  if (v134)
                  {
                    v135 = *v130 & 0xFFFFFFFFFFFFFFF8;
                    v132[1] = *(_QWORD *)v135;
                    *(_QWORD *)v135 = v132;
                    *v132 = v135 | 6;
                    v136 = (uint64_t *)v132[1];
                    if (v136)
                      *v136 = *v136 & 7 | v133;
                  }
                }
                DWORD2(v190) = v131 + 1;
                if (v200[0] != -8192 && v200[0] != -4096 && v200[0])
                {
                  v137 = v199 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)(v199 & 0xFFFFFFFFFFFFFFF8) = *((_QWORD *)&v199 + 1);
                  if (*((_QWORD *)&v199 + 1))
                  {
                    **((_QWORD **)&v199 + 1) = **((_QWORD **)&v199 + 1) & 7 | v137;
                  }
                  else
                  {
                    v138 = v200[0];
                    v139 = ***(int32x2_t ****)v200[0];
                    v140 = (unint64_t)v139[303];
                    if (v140 <= v137)
                    {
                      v141 = v139[305].u32[0];
                      if (v140 + 16 * v141 > v137)
                      {
                        v142 = v141 - 1;
                        LODWORD(v143) = v142 & ((LODWORD(v200[0]) >> 4) ^ (LODWORD(v200[0]) >> 9));
                        v144 = (uint64_t *)(v140 + 16 * v143);
                        v145 = *v144;
                        if (v200[0] == *v144)
                        {
LABEL_242:
                          *v144 = -8192;
                          v139[304] = vadd_s32(v139[304], (int32x2_t)0x1FFFFFFFFLL);
                          v138 = v200[0];
                        }
                        else
                        {
                          v146 = 1;
                          while (v145 != -4096)
                          {
                            v147 = v143 + v146++;
                            v143 = v147 & v142;
                            v145 = *(_QWORD *)(v140 + 16 * v143);
                            if (v200[0] == v145)
                            {
                              v144 = (uint64_t *)(v140 + 16 * v143);
                              goto LABEL_242;
                            }
                          }
                        }
                        *(_BYTE *)(v138 + 17) &= ~1u;
                      }
                    }
                  }
                }
                v148 = *(_QWORD *)a3 + 16 * v129;
                v149 = a3[2];
                v150 = *(_QWORD *)a3 + 16 * v149;
                if (v150 != v148 + 16)
                {
                  memmove((void *)v148, (const void *)(v148 + 16), v150 - (v148 + 16));
                  LODWORD(v149) = a3[2];
                }
                v126 = v149 - 1;
                a3[2] = v126;
              }
              v128 = v126;
            }
            while ((_DWORD)v129 != v124);
          }
          --v124;
          v126 = v128;
        }
      }
      else
      {
        v126 = a3[2];
      }
      v123 = v124 + 1;
      v124 = v123;
    }
    while (v126 != (_DWORD)v123);
  }
  llvm::Value::deleteValue((llvm::Value *)v118);
  v151 = sub_1C5BF54A4(a2, &v190);
  v152 = v151;
  if (v151 && *((unsigned __int8 *)v151 + 16) >= 0x1Cu)
  {
    *(_QWORD *)&v199 = v151;
    v153 = *(_DWORD *)(a1 + 64);
    if (!v153)
    {
      v163 = 0;
      goto LABEL_270;
    }
    v154 = *(_QWORD *)(a1 + 48);
    v155 = v153 - 1;
    v156 = v155 & ((v151 >> 4) ^ (v151 >> 9));
    v157 = (uint64_t *)(v154 + 8 * v156);
    v158 = (llvm::Value *)*v157;
    if (v151 != (llvm::Value *)*v157)
    {
      v159 = 0;
      v160 = 1;
      while (v158 != (llvm::Value *)-4096)
      {
        if (v159)
          v161 = 0;
        else
          v161 = v158 == (llvm::Value *)-8192;
        if (v161)
          v159 = v157;
        v162 = v156 + v160++;
        v156 = v162 & v155;
        v157 = (uint64_t *)(v154 + 8 * v156);
        v158 = (llvm::Value *)*v157;
        if (v151 == (llvm::Value *)*v157)
          goto LABEL_271;
      }
      if (v159)
        v163 = v159;
      else
        v163 = v157;
LABEL_270:
      *sub_1C5BFCD34(v179, (uint64_t *)&v199, v163) = (uint64_t)v151;
      sub_1C5BFC974(v180, &v199);
    }
  }
LABEL_271:
  *(_QWORD *)&v199 = "reass.mul";
  v201 = 259;
  v164 = sub_1C5BF520C(v152, v56, (uint64_t)&v199, a2, a2);
  v27 = v164;
  *(_QWORD *)&v199 = v164;
  v165 = *(_DWORD *)(a1 + 64);
  if (!v165)
  {
    v175 = 0;
    goto LABEL_285;
  }
  v166 = *(_QWORD *)(a1 + 48);
  v167 = v165 - 1;
  v168 = v167 & ((v164 >> 4) ^ (v164 >> 9));
  v169 = (uint64_t *)(v166 + 8 * v168);
  v170 = (llvm::Value *)*v169;
  if (v164 != (llvm::Value *)*v169)
  {
    v171 = 0;
    v172 = 1;
    while (v170 != (llvm::Value *)-4096)
    {
      if (v171)
        v173 = 0;
      else
        v173 = v170 == (llvm::Value *)-8192;
      if (v173)
        v171 = v169;
      v174 = v168 + v172++;
      v168 = v174 & v167;
      v169 = (uint64_t *)(v166 + 8 * v168);
      v170 = (llvm::Value *)*v169;
      if (v164 == (llvm::Value *)*v169)
        goto LABEL_286;
    }
    if (v171)
      v175 = v171;
    else
      v175 = v169;
LABEL_285:
    *sub_1C5BFCD34(v179, (uint64_t *)&v199, v175) = (uint64_t)v164;
    sub_1C5BFC974(v180, &v199);
  }
LABEL_286:
  if (a3[2])
  {
    v176 = *(_QWORD *)a3;
    *(_QWORD *)&v199 = llvm::ReassociatePass::getRank((llvm::ReassociatePass *)a1, v27);
    *((_QWORD *)&v199 + 1) = v27;
    sub_1C5398E8C(a3, v176, &v199);
    sub_1C5B78D64((char **)&v190);
LABEL_288:
    v27 = 0;
  }
  else
  {
    sub_1C5B78D64((char **)&v190);
  }
LABEL_289:
  MEMORY[0x1CAA32FB4](v187, 8);
  return (llvm::Value **)v27;
}

llvm::Value *sub_1C5BF520C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;
  llvm::Value *result;

  if ((*(_DWORD *)(*a1 + 8) & 0xFE) == 0x12)
    v6 = *(unsigned __int8 *)(**(_QWORD **)(*a1 + 16) + 8);
  else
    v6 = *(_DWORD *)(*a1 + 8);
  if (v6 == 13)
    return llvm::BinaryOperator::Create(17, a1, a2, a3, a4);
  result = llvm::BinaryOperator::Create(18, a1, a2, a3, a4);
  *((_BYTE *)result + 17) |= *(_BYTE *)(a5 + 17) & 0xFE;
  return result;
}

uint64_t sub_1C5BF5294(uint64_t a1, uint64_t a2, llvm::Instruction *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  BOOL v15;

  v6 = *(_DWORD *)(*(_QWORD *)a1 + 16 * a2);
  v7 = *(_DWORD *)(a1 + 8);
  v8 = (a2 + 1);
  if ((_DWORD)v8 != v7)
  {
    while (*(_DWORD *)(*(_QWORD *)a1 + 16 * v8) == v6)
    {
      v9 = *(unsigned __int8 **)(*(_QWORD *)a1 + 16 * v8 + 8);
      if (v9 == (unsigned __int8 *)a3)
        return v8;
      v10 = v9 && v9[16] >= 0x1Cu;
      if (v10
        && a3
        && *((unsigned __int8 *)a3 + 16) >= 0x1Cu
        && llvm::Instruction::isIdenticalToWhenDefined(*(llvm::Instruction **)(*(_QWORD *)a1 + 16 * v8 + 8), a3)&& (*((unsigned __int8 *)a3 + 17) ^ v9[17]) < 2)
      {
        return v8;
      }
      v8 = (v8 + 1);
      if (v7 == (_DWORD)v8)
        break;
    }
  }
  if (!(_DWORD)a2)
    return 0;
  v11 = a2;
  while (1)
  {
    v12 = v11 - 1;
    v13 = (v11 - 1);
    if (*(_DWORD *)(*(_QWORD *)a1 + 16 * v13) != v6)
      return a2;
    v14 = *(unsigned __int8 **)(*(_QWORD *)a1 + 16 * v13 + 8);
    if (v14 == (unsigned __int8 *)a3)
      return (v11 - 1);
    v15 = v14 && v14[16] >= 0x1Cu;
    if (v15
      && a3
      && *((unsigned __int8 *)a3 + 16) >= 0x1Cu
      && llvm::Instruction::isIdenticalToWhenDefined(*(llvm::Instruction **)(*(_QWORD *)a1 + 16 * v13 + 8), a3)&& (*((unsigned __int8 *)a3 + 17) ^ v14[17]) < 2)
    {
      break;
    }
    v11 = v12;
    if (!(_DWORD)v12)
      return a2;
  }
  return v12;
}

uint64_t sub_1C5BF5404(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v3 = a1;
  result = sub_1C5BF17BC(a1, 17, 18);
  if (result)
  {
    v5 = result;
    do
    {
      sub_1C5BF5404(*(_QWORD *)(v5 - 32), a2);
      v3 = *(_QWORD *)(v5 - 64);
      result = sub_1C5BF17BC(v3, 17, 18);
      v5 = result;
    }
    while (result);
  }
  v6 = *(unsigned int *)(a2 + 8);
  if (v6 >= *(_DWORD *)(a2 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v6) = v3;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

llvm::Value *sub_1C5BF54A4(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  int32x2_t ****v7;
  unint64_t v8;
  unint64_t *v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  int32x2_t *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  _QWORD *v27;
  unint64_t v28;
  int32x2_t ****v29;
  int32x2_t *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int32x2_t *****v35;
  int32x2_t ****v36;
  int v37;
  int v38;
  uint64_t v39;
  unint64_t *v40;
  int32x2_t ****v41;
  __int16 v42;

  v2 = a2[2];
  if (v2 == 1)
    return *(llvm::Value **)(*(_QWORD *)a2 + 16);
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)a2 + 24 * v2;
  v39 = 6;
  v40 = 0;
  v7 = *(int32x2_t *****)(v6 - 8);
  v41 = v7;
  if (v7 && v7 != (int32x2_t ****)-8192 && v7 != (int32x2_t ****)-4096)
  {
    v8 = *(_QWORD *)(v6 - 24) & 0xFFFFFFFFFFFFFFF8;
    v40 = *(unint64_t **)v8;
    v9 = v40;
    *(_QWORD *)v8 = &v39;
    v39 = v8 | 6;
    if (v9)
      *v9 = *v9 & 7 | (unint64_t)&v40;
    v5 = *(_QWORD *)a2;
  }
  v10 = v2 - 1;
  a2[2] = v10;
  v11 = (_QWORD *)(v5 + 24 * v10);
  v12 = v11[2];
  if (v12 && v12 != -8192 && v12 != -4096)
  {
    v13 = *v11 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v13 = v11[1];
    v14 = (unint64_t *)v11[1];
    if (v14)
    {
      *v14 = *v14 & 7 | v13;
    }
    else
    {
      v15 = v11[2];
      v16 = ***(int32x2_t ****)v15;
      v17 = (unint64_t)v16[303];
      if (v17 <= v13)
      {
        v18 = v16[305].u32[0];
        if (v17 + 16 * v18 > v13)
        {
          v19 = v18 - 1;
          LODWORD(v20) = v19 & ((v15 >> 4) ^ (v15 >> 9));
          v21 = (uint64_t *)(v17 + 16 * v20);
          v22 = *v21;
          if (v15 == *v21)
          {
LABEL_20:
            *v21 = -8192;
            v16[304] = vadd_s32(v16[304], (int32x2_t)0x1FFFFFFFFLL);
            v15 = v11[2];
          }
          else
          {
            v23 = 1;
            while (v22 != -4096)
            {
              v24 = v20 + v23++;
              v20 = v24 & v19;
              v22 = *(_QWORD *)(v17 + 16 * v20);
              if (v15 == v22)
              {
                v21 = (uint64_t *)(v17 + 16 * v20);
                goto LABEL_20;
              }
            }
          }
          *(_BYTE *)(v15 + 17) &= ~1u;
        }
      }
    }
  }
  v25 = (uint64_t)v41;
  if (v41 != (int32x2_t ****)-8192 && v41 != (int32x2_t ****)-4096 && v41 != 0)
  {
    v28 = v39 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF8) = v40;
    if (v40)
    {
      *v40 = *v40 & 7 | v28;
    }
    else
    {
      v29 = v41;
      v30 = ***v41;
      v31 = (unint64_t)v30[303];
      if (v31 <= v28)
      {
        v32 = v30[305].u32[0];
        if (v31 + 16 * v32 > v28)
        {
          v33 = v32 - 1;
          LODWORD(v34) = v33 & ((v41 >> 4) ^ (v41 >> 9));
          v35 = (int32x2_t *****)(v31 + 16 * v34);
          v36 = *v35;
          if (v41 == *v35)
          {
LABEL_39:
            *v35 = (int32x2_t ****)-8192;
            v30[304] = vadd_s32(v30[304], (int32x2_t)0x1FFFFFFFFLL);
            v29 = v41;
          }
          else
          {
            v37 = 1;
            while (v36 != (int32x2_t ****)-4096)
            {
              v38 = v34 + v37++;
              v34 = v38 & v33;
              v36 = *(int32x2_t *****)(v31 + 16 * v34);
              if (v41 == v36)
              {
                v35 = (int32x2_t *****)(v31 + 16 * v34);
                goto LABEL_39;
              }
            }
          }
          *((_BYTE *)v29 + 17) &= ~1u;
        }
      }
    }
  }
  v27 = (_QWORD *)sub_1C5BF54A4(a1);
  v39 = (uint64_t)"reass.add";
  v42 = 259;
  return sub_1C5BFB4F0(v27, v25, (uint64_t)&v39, a1, a1);
}

uint64_t *llvm::ReassociatePass::buildMinimalMultiplyDAG(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v54;
  void *v55;
  uint64_t v56;
  _QWORD v57[4];
  void *v58;
  uint64_t v59;
  _QWORD v60[6];

  v60[4] = *MEMORY[0x1E0C80C00];
  v58 = v60;
  v59 = 0x400000000;
  v4 = *(unsigned int *)(a3 + 8);
  if (v4 >= 2)
  {
    v5 = 0;
    v51 = a1 + 48;
    v50 = a1 + 72;
    v6 = 1;
    while (1)
    {
      v7 = *(_QWORD *)a3;
      v8 = *(_DWORD *)(*(_QWORD *)a3 + 16 * v6 + 8);
      if (!v8)
      {
LABEL_36:
        LODWORD(v4) = *(_DWORD *)(a3 + 8);
        goto LABEL_37;
      }
      if (v8 == *(_DWORD *)(v7 + 16 * v5 + 8))
        break;
LABEL_33:
      v5 = v6++;
      if (v6 >= v4)
        goto LABEL_36;
    }
    v9 = v6;
    v10 = v5;
    v55 = v57;
    v11 = 16 * v5;
    v57[0] = *(_QWORD *)(v7 + v11);
    v56 = 0x400000001;
    if (v4 <= v6 + 1)
      ++v6;
    else
      v6 = v4;
    v12 = 16 * v9;
    v13 = 1;
    v14 = 1;
    while (1)
    {
      v15 = *(_QWORD *)(v7 + v12);
      if (v14 >= HIDWORD(v56))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, (uint64_t)v57, v14 + 1, 8);
        v14 = v56;
      }
      *((_QWORD *)v55 + v14) = v15;
      v14 = v56 + 1;
      LODWORD(v56) = v56 + 1;
      if (v9 + v13 >= v4)
        break;
      v7 = *(_QWORD *)a3;
      v16 = *(_DWORD *)(*(_QWORD *)a3 + v12 + 24);
      ++v13;
      v12 += 16;
      if (v16 != *(_DWORD *)(*(_QWORD *)a3 + 16 * v10 + 8))
      {
        v6 = v9 + v13 - 1;
        break;
      }
    }
    v17 = sub_1C5BF5BD8(a2, (uint64_t)&v55);
    *(_QWORD *)(*(_QWORD *)a3 + v11) = v17;
    if (v17 && *((unsigned __int8 *)v17 + 16) >= 0x1Cu)
    {
      v54 = v17;
      v18 = *(_DWORD *)(a1 + 64);
      if (v18)
      {
        v19 = *(_QWORD *)(a1 + 48);
        v20 = v18 - 1;
        v21 = v20 & ((v17 >> 4) ^ (v17 >> 9));
        v22 = (uint64_t *)(v19 + 8 * v21);
        v23 = (uint64_t *)*v22;
        if (v17 == (uint64_t *)*v22)
          goto LABEL_31;
        v24 = 0;
        v25 = 1;
        while (v23 != (uint64_t *)-4096)
        {
          if (v24)
            v26 = 0;
          else
            v26 = v23 == (uint64_t *)-8192;
          if (v26)
            v24 = v22;
          v27 = v21 + v25++;
          v21 = v27 & v20;
          v22 = (uint64_t *)(v19 + 8 * v21);
          v23 = (uint64_t *)*v22;
          if (v17 == (uint64_t *)*v22)
            goto LABEL_31;
        }
        if (v24)
          v28 = v24;
        else
          v28 = v22;
      }
      else
      {
        v28 = 0;
      }
      *sub_1C5BFCD34(v51, (uint64_t *)&v54, v28) = (uint64_t)v17;
      sub_1C5BFC974(v50, &v54);
    }
LABEL_31:
    if (v55 != v57)
      free(v55);
    goto LABEL_33;
  }
LABEL_37:
  v29 = *(_QWORD *)a3;
  v30 = *(_QWORD *)a3 + 16 * v4;
  v31 = *(_QWORD *)a3;
  if ((_DWORD)v4)
  {
    v32 = 0;
    while (16 * v4 - 16 != v32)
    {
      v33 = *(_DWORD *)(v29 + v32 + 8);
      v34 = *(_DWORD *)(v29 + v32 + 24);
      v32 += 16;
      if (v33 == v34)
      {
        v31 = v29 + v32 - 16;
        goto LABEL_42;
      }
    }
  }
  else
  {
LABEL_42:
    if (v31 != v30)
    {
      v35 = v31 + 32;
      if (v31 + 32 != v30)
      {
        do
        {
          if (*(_DWORD *)(v31 + 8) != *(_DWORD *)(v35 + 8))
          {
            v36 = *(_DWORD *)(v35 + 8);
            *(_QWORD *)(v31 + 16) = *(_QWORD *)v35;
            v31 += 16;
            *(_DWORD *)(v31 + 8) = v36;
          }
          v35 += 16;
        }
        while (v35 != v30);
        v29 = *(_QWORD *)a3;
      }
      v30 = v31 + 16;
    }
  }
  v37 = v30 - v29;
  *(_DWORD *)(a3 + 8) = v37 >> 4;
  if ((v37 >> 4))
  {
    v38 = 0;
    v39 = v37 & 0xFFFFFFFF0;
    do
    {
      v40 = *(_DWORD *)(v29 + v38 + 8);
      if ((v40 & 1) != 0)
      {
        v41 = *(_QWORD *)(v29 + v38);
        v42 = v59;
        if (v59 >= (unint64_t)HIDWORD(v59))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, (uint64_t)v60, v59 + 1, 8);
          v42 = v59;
        }
        *((_QWORD *)v58 + v42) = v41;
        LODWORD(v59) = v59 + 1;
        v29 = *(_QWORD *)a3;
        v40 = *(_DWORD *)(*(_QWORD *)a3 + v38 + 8);
      }
      *(_DWORD *)(v29 + v38 + 8) = v40 >> 1;
      v38 += 16;
    }
    while (v39 != v38);
  }
  if (*(_DWORD *)(v29 + 8))
  {
    v43 = llvm::ReassociatePass::buildMinimalMultiplyDAG(a1, a2, a3);
    v44 = v59;
    if (v59 >= HIDWORD(v59))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, (uint64_t)v60, v59 + 1, 8);
      v44 = v59;
    }
    *((_QWORD *)v58 + v44) = v43;
    v45 = (v59 + 1);
    LODWORD(v59) = v45;
    if (v45 >= HIDWORD(v59))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, (uint64_t)v60, v45 + 1, 8);
      LODWORD(v45) = v59;
    }
    *((_QWORD *)v58 + v45) = v43;
    v46 = v59 + 1;
    LODWORD(v59) = v59 + 1;
  }
  else
  {
    v46 = v59;
  }
  if (v46 == 1)
  {
    v47 = v58;
    v48 = *(uint64_t **)v58;
  }
  else
  {
    v48 = sub_1C5BF5BD8(a2, (uint64_t)&v58);
    v47 = v58;
  }
  if (v47 != v60)
    free(v47);
  return v48;
}

uint64_t *sub_1C5BF5BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[32];
  __int16 v12;

  v3 = *(unsigned int *)(a2 + 8);
  v4 = *(uint64_t **)(*(_QWORD *)a2 + 8 * v3 - 8);
  v5 = v3 - 1;
  if (v5)
  {
    *(_DWORD *)(a2 + 8) = v5;
    do
    {
      if ((*(_DWORD *)(*v4 + 8) & 0xFE) == 0x12)
        v7 = *(unsigned __int8 *)(**(_QWORD **)(*v4 + 16) + 8);
      else
        v7 = *(_DWORD *)(*v4 + 8);
      v8 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v5 - 8);
      *(_DWORD *)(a2 + 8) = v5 - 1;
      v12 = 257;
      if (v7 == 13)
        v9 = sub_1C4EC4040(a1, (uint64_t)v4, v8, (uint64_t)v11, 0, 0);
      else
        v9 = sub_1C4772428(a1, v4, v8, (uint64_t)v11, 0);
      v4 = (uint64_t *)v9;
      v5 = *(_DWORD *)(a2 + 8);
    }
    while (v5);
  }
  return v4;
}

uint64_t *llvm::ReassociatePass::OptimizeMul(llvm::ReassociatePass *a1, uint64_t a2, unsigned int *a3, __n128 a4)
{
  unint64_t v4;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  __n128 *v31;
  unint64_t v32;
  __n128 *v33;
  const std::nothrow_t *v34;
  unint64_t v35;
  __n128 *v36;
  BOOL v37;
  __n128 *v38;
  BOOL v39;
  int v40;
  unsigned int Rank;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int *v45;
  _DWORD *v46;
  unsigned int v47;
  __int128 v48;
  void *v49[2];
  _DWORD v50[30];
  void *v51;
  uint64_t v52;
  _QWORD v53[10];

  v53[8] = *MEMORY[0x1E0C80C00];
  LODWORD(v4) = a3[2];
  if (v4 < 4)
    return 0;
  v8 = 0;
  v51 = v53;
  a4.n128_u64[0] = 0x400000000;
  v52 = 0x400000000;
  v9 = *(_QWORD *)a3;
  v10 = 1;
  do
  {
    v11 = 0;
    if (v4 <= v10 + 1)
      v12 = v10 + 1;
    else
      v12 = v4;
    v13 = v12 + 1;
    v14 = v12 + 1 - v10;
    v15 = v12 - v10;
    while (*(_QWORD *)(v9 + 16 * (v10 + v11) + 8) == *(_QWORD *)(v9 + 16 * (v10 - 1) + 8))
    {
      if (v15 == ++v11)
        goto LABEL_11;
    }
    v14 = v11 + 1;
    v13 = v11 + 1 + v10;
LABEL_11:
    if (v14 <= 1)
      v16 = 0;
    else
      v16 = v14;
    v8 += v16;
    v10 = v13;
  }
  while (v13 < v4);
  if (v8 < 4)
    return 0;
  v17 = 1;
  do
  {
    v18 = 0;
    v19 = *(_QWORD *)(v9 + 16 * (v17 - 1) + 8);
    if (v4 <= v17 + 1)
      v20 = v17 + 1;
    else
      v20 = v4;
    v21 = v20 - v17 + 1;
    while (*(_QWORD *)(v9 + 16 * (v17 + v18) + 8) == v19)
    {
      if (v20 - v17 == ++v18)
        goto LABEL_25;
    }
    v21 = v18 + 1;
    v20 = v17 + v18;
LABEL_25:
    if (v21 != 1)
    {
      v22 = v52;
      if (v52 >= (unint64_t)HIDWORD(v52))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, (uint64_t)v53, v52 + 1, 16);
        v22 = v52;
      }
      v23 = v21 & 0xFFFFFFFE;
      v20 -= v23;
      v24 = (char *)v51 + 16 * v22;
      *v24 = v19;
      v24[1] = v23;
      LODWORD(v52) = v52 + 1;
      v9 = *(_QWORD *)a3;
      v25 = *(_QWORD *)a3 + 16 * v20;
      v26 = (const void *)(v25 + 16 * v23);
      v27 = *(_QWORD *)a3 + 16 * a3[2];
      v28 = v27 - (_QWORD)v26;
      if ((const void *)v27 != v26)
      {
        memmove((void *)(*(_QWORD *)a3 + 16 * v20), v26, v27 - (_QWORD)v26);
        v9 = *(_QWORD *)a3;
      }
      v4 = (unint64_t)(v25 + v28 - v9) >> 4;
      a3[2] = v4;
    }
    v17 = v20 + 1;
  }
  while (v4 > v20 + 1);
  v31 = (__n128 *)v51;
  v32 = v52;
  v33 = (__n128 *)((char *)v51 + 16 * v52);
  if (v52 < 0x81)
  {
LABEL_39:
    sub_1C5BFB578(v31, v33, v32, 0, 0, a4);
  }
  else
  {
    v34 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v35 = v52;
    while (1)
    {
      v36 = (__n128 *)operator new(16 * v35, v34);
      if (v36)
        break;
      v37 = v35 > 1;
      v35 >>= 1;
      if (!v37)
        goto LABEL_39;
    }
    v38 = v36;
    sub_1C5BFB578(v31, v33, v32, v36, v35, a4);
    operator delete(v38);
  }
  sub_1C4773D54((uint64_t)v49, a2, 0, 0, 0);
  v39 = sub_1C4774A9C(a2);
  if (a2 && v39)
  {
    v40 = *(unsigned __int8 *)(a2 + 17) >> 1;
    if (v40 == 127)
      v40 = -1;
    v50[20] = v40;
  }
  v29 = llvm::ReassociatePass::buildMinimalMultiplyDAG((uint64_t)a1, (uint64_t)v49, (uint64_t)&v51);
  if (a3[2])
  {
    Rank = llvm::ReassociatePass::getRank(a1, (llvm::Value *)v29);
    v42 = *(_QWORD *)a3;
    v43 = a3[2];
    if ((_DWORD)v43)
    {
      do
      {
        v44 = v43 >> 1;
        v45 = (unsigned int *)(v42 + 16 * (v43 >> 1));
        v47 = *v45;
        v46 = v45 + 4;
        v43 += ~(v43 >> 1);
        if (v47 > Rank)
          v42 = (uint64_t)v46;
        else
          v43 = v44;
      }
      while (v43);
    }
    *(_QWORD *)&v48 = Rank;
    *((_QWORD *)&v48 + 1) = v29;
    sub_1C5398E8C(a3, v42, &v48);
    v29 = 0;
  }
  if (v49[0] != v50)
    free(v49[0]);
  if (v51 != v53)
    free(v51);
  return v29;
}

unsigned __int8 *llvm::ReassociatePass::OptimizeExpression(llvm::ReassociatePass *a1, llvm::Type *a2, unsigned int *a3, llvm::Constant *a4, __n128 a5)
{
  unsigned __int8 *v6;
  uint64_t v8;
  unsigned int v9;
  llvm::Constant *v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Constant *Zero;
  llvm::Constant *v16;
  llvm::Constant *NullValue;
  unint64_t v18;
  _QWORD *v19;
  void *v20;
  BOOL v21;
  unsigned __int8 v23[2];
  __int16 v24;
  _QWORD *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _QWORD v30[3];

  v6 = (unsigned __int8 *)a2;
  v30[2] = *MEMORY[0x1E0C80C00];
  v8 = (uint64_t)(a3 + 4);
  v9 = a3[2];
  while (1)
  {
    if (!v9)
      return 0;
    v10 = 0;
    v11 = v6[16];
    while (1)
    {
      v12 = *(unsigned __int8 **)(*(_QWORD *)a3 + 16 * v9 - 8);
      if (v12[16] > 0x14u)
        break;
      a3[2] = --v9;
      if (v10)
      {
        v13 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)(v11 - 28), (llvm::Constant *)v12, v10, a4);
        if (!v13)
        {
          a2 = *(llvm::Type **)v12;
          if (*(_QWORD *)v12)
          {
            v30[0] = v12;
            v30[1] = v10;
            v14 = **(_QWORD **)a2 + 1512;
            v23[0] = v11 - 28;
            v23[1] = 0;
            v24 = 0;
            v25 = v30;
            v26 = 2;
            v27 = 0u;
            v28 = 0u;
            v29 = 0;
            v13 = sub_1C537D4FC(v14, (uint64_t)a2, v23);
          }
          else
          {
            v13 = 0;
          }
        }
        v9 = a3[2];
        v12 = (unsigned __int8 *)v13;
      }
      v10 = (llvm::Constant *)v12;
      if (!v9)
        return v12;
    }
    if (v10)
      break;
LABEL_33:
    if (v9 == 1)
      return *(unsigned __int8 **)(*(_QWORD *)a3 + 8);
    if (v11 > 55)
    {
      if ((v11 - 56) >= 2)
      {
        if (v11 == 58)
        {
          v20 = llvm::ReassociatePass::OptimizeXor(a1, (llvm::Instruction *)v6, a3);
          if (v20)
            return (unsigned __int8 *)v20;
        }
      }
      else
      {
        v20 = sub_1C5BF3EAC(v11 - 28, (uint64_t)a3);
        if (v20)
          return (unsigned __int8 *)v20;
      }
    }
    else if ((v11 - 41) < 2)
    {
      v20 = llvm::ReassociatePass::OptimizeAdd((uint64_t)a1, (uint64_t)v6, a3);
      if (v20)
        return (unsigned __int8 *)v20;
    }
    else if ((v11 - 45) < 2)
    {
      v20 = llvm::ReassociatePass::OptimizeMul(a1, (uint64_t)v6, a3, a5);
      if (v20)
        return (unsigned __int8 *)v20;
    }
    v21 = a3[2] == v9;
    v9 = a3[2];
    if (v21)
      return 0;
  }
  Zero = 0;
  switch(v11)
  {
    case ')':
      goto LABEL_18;
    case '*':
      Zero = llvm::ConstantFP::getZero(*(llvm::ConstantFP **)v6, (llvm::Type *)1);
      break;
    case '+':
    case ',':
      break;
    case '-':
      Zero = (llvm::Constant *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v6, 1, 0);
      break;
    case '.':
      Zero = llvm::ConstantFP::get(*(llvm::ConstantFP ***)v6, a2, 1.0);
      break;
    default:
      if (v11 == 56)
      {
        Zero = llvm::Constant::getAllOnesValue(*(llvm::Constant **)v6, a2);
      }
      else if ((v11 - 57) <= 1)
      {
LABEL_18:
        Zero = (llvm::Constant *)llvm::Constant::getNullValue(*(llvm::Constant **)v6, a2);
      }
      break;
  }
  if (v10 == Zero)
  {
    v9 = a3[2];
    goto LABEL_33;
  }
  v16 = *(llvm::Constant **)v6;
  if (v11 == 56 || v11 == 45)
  {
    NullValue = (llvm::Constant *)llvm::Constant::getNullValue(v16, a2);
  }
  else if (v11 == 57)
  {
    NullValue = llvm::Constant::getAllOnesValue(v16, a2);
  }
  else
  {
    NullValue = 0;
  }
  if (v10 != NullValue)
  {
    v18 = a3[2];
    if (v18 >= a3[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, v8, v18 + 1, 16);
      v18 = a3[2];
    }
    v19 = (_QWORD *)(*(_QWORD *)a3 + 16 * v18);
    *v19 = 0;
    v19[1] = v10;
    v9 = a3[2] + 1;
    a3[2] = v9;
    goto LABEL_33;
  }
  return (unsigned __int8 *)v10;
}

void llvm::ReassociatePass::RecursivelyEraseDeadInsts(int32x2_t *a1, uint64_t a2, int32x2_t *a3)
{
  int v6;
  unint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  __int32 v15;
  unsigned int v16;
  int32x2_t v17;
  __int32 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int v23;
  __int32 v24;
  int32x2_t v25;
  __int32 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  int v31;
  char *v32;
  uint64_t v33;
  __int32 v34;
  int32x2_t v35;
  __int32 v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  int v41;
  int32x2_t *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  void **v47;
  void **v48;
  uint64_t v49;
  BOOL v50;
  __int32 v51;
  __int32 v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  int v57;
  BOOL v58;
  unsigned int v59;
  uint64_t *v60;
  void *v61;
  uint64_t v62;
  _BYTE v63[32];
  void *v64;
  uint64_t v65;
  _QWORD v66[2];

  v66[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a2 + 20);
  if ((v6 & 0x40000000) != 0)
  {
    v8 = *(uint64_t **)(a2 - 8);
    v7 = v6 & 0x7FFFFFF;
  }
  else
  {
    v7 = v6 & 0x7FFFFFF;
    v8 = (uint64_t *)(a2 - 32 * v7);
  }
  v61 = v63;
  v62 = 0x400000000;
  if (v7 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, (uint64_t)v63, v7, 8);
    v9 = v62;
    v11 = v61;
    v10 = v62;
  }
  else
  {
    v9 = 0;
    if (!v7)
      goto LABEL_9;
    v10 = 0;
    v11 = v63;
  }
  v12 = 32 * v7;
  v13 = &v11[8 * v10];
  do
  {
    v14 = *v8;
    v8 += 4;
    *v13++ = v14;
    v12 -= 32;
  }
  while (v12);
LABEL_9:
  LODWORD(v62) = v9 + v7;
  v15 = a1[5].i32[0];
  v16 = a2 >> 4;
  if (v15)
  {
    v17 = a1[3];
    v18 = v15 - 1;
    LODWORD(v19) = (v15 - 1) & (v16 ^ (a2 >> 9));
    v20 = (uint64_t *)(*(_QWORD *)&v17 + 16 * v19);
    v21 = *v20;
    if (*v20 == a2)
    {
LABEL_15:
      *v20 = -8192;
      a1[4] = vadd_s32(a1[4], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v22 = 1;
      while (v21 != -4096)
      {
        v23 = v19 + v22++;
        v19 = v23 & v18;
        v21 = *(_QWORD *)(*(_QWORD *)&v17 + 16 * v19);
        if (v21 == a2)
        {
          v20 = (uint64_t *)(*(_QWORD *)&v17 + 16 * v19);
          goto LABEL_15;
        }
      }
    }
  }
  v64 = (void *)a2;
  v24 = a3[2].i32[0];
  if (v24)
  {
    v25 = *a3;
    v26 = v24 - 1;
    LODWORD(v27) = (v24 - 1) & (v16 ^ (a2 >> 9));
    v28 = (uint64_t *)(*(_QWORD *)a3 + 8 * v27);
    v29 = *v28;
    if (*v28 == a2)
    {
LABEL_22:
      *v28 = -8192;
      a3[1] = vadd_s32(a3[1], (int32x2_t)0x1FFFFFFFFLL);
      v32 = (char *)sub_1C5BFD9A8(&a3[3], (uint64_t *)&v64);
      sub_1C5BFDB5C((uint64_t)&a3[3], v32, v33);
    }
    else
    {
      v30 = 1;
      while (v29 != -4096)
      {
        v31 = v27 + v30++;
        v27 = v31 & v26;
        v29 = *(_QWORD *)(*(_QWORD *)&v25 + 8 * v27);
        if (v29 == a2)
        {
          v28 = (uint64_t *)(*(_QWORD *)&v25 + 8 * v27);
          goto LABEL_22;
        }
      }
    }
  }
  v64 = (void *)a2;
  v34 = a1[8].i32[0];
  if (v34)
  {
    v35 = a1[6];
    v36 = v34 - 1;
    LODWORD(v37) = (v34 - 1) & (v16 ^ (a2 >> 9));
    v38 = (uint64_t *)(*(_QWORD *)&v35 + 8 * v37);
    v39 = *v38;
    if (*v38 == a2)
    {
LABEL_29:
      *v38 = -8192;
      a1[7] = vadd_s32(a1[7], (int32x2_t)0x1FFFFFFFFLL);
      v42 = a1 + 9;
      v43 = (char *)sub_1C5BFD9A8(v42, (uint64_t *)&v64);
      sub_1C5BFDB5C((uint64_t)v42, v43, v44);
    }
    else
    {
      v40 = 1;
      while (v39 != -4096)
      {
        v41 = v37 + v40++;
        v37 = v41 & v36;
        v39 = *(_QWORD *)(*(_QWORD *)&v35 + 8 * v37);
        if (v39 == a2)
        {
          v38 = (uint64_t *)(*(_QWORD *)&v35 + 8 * v37);
          goto LABEL_29;
        }
      }
    }
  }
  v64 = v66;
  v65 = 0x100000000;
  llvm::findDbgUsers((uint64_t)&v64, a2);
  llvm::salvageDebugInfoForDbgValues((llvm::CastInst *)a2, (uint64_t *)v64, v65);
  if (v64 != v66)
    free(v64);
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(a2 + 40) + 40, (uint64_t ***)a2);
  v45 = *(_QWORD *)(a2 + 24);
  v46 = *(_QWORD **)(a2 + 32);
  *v46 = v45;
  *(_QWORD *)(v45 + 8) = v46;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)a2);
  v47 = (void **)v61;
  if ((_DWORD)v62)
  {
    v48 = (void **)((char *)v61 + 8 * v62);
    while (1)
    {
      v49 = (uint64_t)*v47;
      if (*v47)
        v50 = *((unsigned __int8 *)*v47 + 16) >= 0x1Cu;
      else
        v50 = 0;
      if (!v50 || *(_QWORD *)(v49 + 8))
        goto LABEL_40;
      v64 = *v47;
      v51 = a3[2].i32[0];
      if (!v51)
        break;
      v52 = v51 - 1;
      v53 = v52 & ((v49 >> 4) ^ (v49 >> 9));
      v54 = (uint64_t *)(*(_QWORD *)a3 + 8 * v53);
      v55 = *v54;
      if (v49 != *v54)
      {
        v56 = 0;
        v57 = 1;
        while (v55 != -4096)
        {
          if (v56)
            v58 = 0;
          else
            v58 = v55 == -8192;
          if (v58)
            v56 = v54;
          v59 = v53 + v57++;
          v53 = v59 & v52;
          v54 = (uint64_t *)(*(_QWORD *)a3 + 8 * v53);
          v55 = *v54;
          if (v49 == *v54)
            goto LABEL_40;
        }
        if (v56)
          v60 = v56;
        else
          v60 = v54;
        goto LABEL_56;
      }
LABEL_40:
      if (++v47 == v48)
      {
        v47 = (void **)v61;
        goto LABEL_58;
      }
    }
    v60 = 0;
LABEL_56:
    *sub_1C5BFCD34((uint64_t)a3, (uint64_t *)&v64, v60) = v49;
    sub_1C5BFC974((uint64_t)&a3[3], &v64);
    goto LABEL_40;
  }
LABEL_58:
  if (v47 != (void **)v63)
    free(v47);
}

void llvm::ReassociatePass::EraseInst(int32x2_t *this, llvm::Instruction *a2)
{
  int v4;
  unint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __int32 v13;
  unsigned int v14;
  int32x2_t v15;
  __int32 v16;
  uint64_t v17;
  llvm::Instruction **v18;
  llvm::Instruction *v19;
  int v20;
  int v21;
  int32x2_t v22;
  __int32 v23;
  __int32 v24;
  uint64_t v25;
  llvm::Instruction **v26;
  llvm::Instruction *v27;
  int v28;
  int v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  char v40;
  int32x2_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  int v48;
  __int32 v49;
  int32x2_t v50;
  unsigned int v51;
  __int32 v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  int v57;
  BOOL v58;
  unsigned int v59;
  uint64_t *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  _BYTE v68[64];
  void *v69;
  uint64_t v70;
  _QWORD v71[10];

  v71[8] = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)a2 + 5);
  if ((v4 & 0x40000000) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 - 1);
    v5 = v4 & 0x7FFFFFF;
  }
  else
  {
    v5 = v4 & 0x7FFFFFF;
    v6 = (uint64_t *)((char *)a2 - 32 * v5);
  }
  v69 = v71;
  v70 = 0x800000000;
  if (v5 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, (uint64_t)v71, v5, 8);
    v7 = v70;
    v9 = v69;
    v8 = v70;
LABEL_7:
    v10 = 32 * v5;
    v11 = &v9[v8];
    do
    {
      v12 = *v6;
      v6 += 4;
      *v11++ = v12;
      v10 -= 32;
    }
    while (v10);
    goto LABEL_9;
  }
  v7 = 0;
  if (v5)
  {
    v8 = 0;
    v9 = v71;
    goto LABEL_7;
  }
LABEL_9:
  LODWORD(v70) = v7 + v5;
  v13 = this[5].i32[0];
  v14 = a2 >> 4;
  if (v13)
  {
    v15 = this[3];
    v16 = v13 - 1;
    LODWORD(v17) = (v13 - 1) & (v14 ^ (a2 >> 9));
    v18 = (llvm::Instruction **)(*(_QWORD *)&v15 + 16 * v17);
    v19 = *v18;
    if (*v18 == a2)
    {
LABEL_15:
      *v18 = (llvm::Instruction *)-8192;
      this[4] = vadd_s32(this[4], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v20 = 1;
      while (v19 != (llvm::Instruction *)-4096)
      {
        v21 = v17 + v20++;
        v17 = v21 & v16;
        v19 = *(llvm::Instruction **)(*(_QWORD *)&v15 + 16 * v17);
        if (v19 == a2)
        {
          v18 = (llvm::Instruction **)(*(_QWORD *)&v15 + 16 * v17);
          goto LABEL_15;
        }
      }
    }
  }
  v22 = this[6];
  v64 = a2;
  v23 = this[8].i32[0];
  if (v23)
  {
    v24 = v23 - 1;
    LODWORD(v25) = v24 & (v14 ^ (a2 >> 9));
    v26 = (llvm::Instruction **)(*(_QWORD *)&v22 + 8 * v25);
    v27 = *v26;
    if (*v26 == a2)
    {
LABEL_22:
      *v26 = (llvm::Instruction *)-8192;
      this[7] = vadd_s32(this[7], (int32x2_t)0x1FFFFFFFFLL);
      v30 = (char *)sub_1C5BFD9A8(&this[9], (uint64_t *)&v64);
      sub_1C5BFDB5C((uint64_t)&this[9], v30, v31);
    }
    else
    {
      v28 = 1;
      while (v27 != (llvm::Instruction *)-4096)
      {
        v29 = v25 + v28++;
        v25 = v29 & v24;
        v27 = *(llvm::Instruction **)(*(_QWORD *)&v22 + 8 * v25);
        if (v27 == a2)
        {
          v26 = (llvm::Instruction **)(*(_QWORD *)&v22 + 8 * v25);
          goto LABEL_22;
        }
      }
    }
  }
  v64 = &v66;
  v65 = 0x100000000;
  llvm::findDbgUsers((uint64_t)&v64, (uint64_t)a2);
  llvm::salvageDebugInfoForDbgValues(a2, (uint64_t *)v64, v65);
  if (v64 != &v66)
    free(v64);
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)a2 + 5) + 40, (uint64_t ***)a2);
  v32 = *((_QWORD *)a2 + 3);
  v33 = (_QWORD *)*((_QWORD *)a2 + 4);
  *v33 = v32;
  *(_QWORD *)(v32 + 8) = v33;
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  llvm::Value::deleteValue(a2);
  v64 = v68;
  v65 = (uint64_t)v68;
  v66 = 8;
  v67 = 0;
  v34 = v70;
  if (!(_DWORD)v70)
  {
    this[69].i8[0] = 1;
    goto LABEL_66;
  }
  v35 = 0;
  do
  {
    v36 = *((_QWORD *)v69 + v35);
    v37 = *(unsigned __int8 *)(v36 + 16);
    if (v36)
      v38 = v37 >= 0x1C;
    else
      v38 = 0;
    if (!v38)
      goto LABEL_60;
    while (1)
    {
      v39 = *(_QWORD *)(v36 + 8);
      if (!v39)
        break;
      if (*(_QWORD *)(v39 + 8))
        break;
      if (*(unsigned __int8 *)(*(_QWORD *)(v39 + 24) + 16) != v37)
        break;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v64, v36);
      if (!v40)
        break;
      v36 = *(_QWORD *)(*(_QWORD *)(v36 + 8) + 24);
    }
    v41 = this[3];
    v42 = this[5].u32[0];
    v43 = v36 >> 4;
    if (!(_DWORD)v42)
      goto LABEL_43;
    LODWORD(v44) = (v43 ^ (v36 >> 9)) & (v42 - 1);
    v45 = (uint64_t *)(*(_QWORD *)&v41 + 16 * v44);
    v46 = *v45;
    if (v36 != *v45)
    {
      v47 = 1;
      while (v46 != -4096)
      {
        v48 = v44 + v47++;
        v44 = v48 & (v42 - 1);
        v46 = *(_QWORD *)(*(_QWORD *)&v41 + 16 * v44);
        if (v36 == v46)
        {
          v45 = (uint64_t *)(*(_QWORD *)&v41 + 16 * v44);
          goto LABEL_44;
        }
      }
LABEL_43:
      v45 = (uint64_t *)(*(_QWORD *)&v41 + 16 * v42);
    }
LABEL_44:
    if (v45 == (uint64_t *)(*(_QWORD *)&v41 + 16 * v42))
      goto LABEL_60;
    v63 = v36;
    v49 = this[8].i32[0];
    if (v49)
    {
      v50 = this[6];
      v51 = v43 ^ (v36 >> 9);
      v52 = v49 - 1;
      v53 = (v49 - 1) & v51;
      v54 = (uint64_t *)(*(_QWORD *)&v50 + 8 * v53);
      v55 = *v54;
      if (v36 == *v54)
        goto LABEL_60;
      v56 = 0;
      v57 = 1;
      while (v55 != -4096)
      {
        if (v56)
          v58 = 0;
        else
          v58 = v55 == -8192;
        if (v58)
          v56 = v54;
        v59 = v53 + v57++;
        v53 = v59 & v52;
        v54 = (uint64_t *)(*(_QWORD *)&v50 + 8 * v53);
        v55 = *v54;
        if (v36 == *v54)
          goto LABEL_60;
      }
      if (v56)
        v60 = v56;
      else
        v60 = v54;
    }
    else
    {
      v60 = 0;
    }
    *sub_1C5BFCD34((uint64_t)&this[6], &v63, v60) = v36;
    sub_1C5BFC974((uint64_t)&this[9], &v63);
LABEL_60:
    ++v35;
  }
  while (v35 != v34);
  v62 = v64;
  v61 = (void *)v65;
  this[69].i8[0] = 1;
  if (v61 != v62)
    free(v61);
LABEL_66:
  if (v69 != v71)
    free(v69);
}

llvm::Instruction *llvm::ReassociatePass::canonicalizeNegFPConstantsForOp(llvm::ReassociatePass *this, llvm::Instruction *a2, llvm::Instruction *a3, llvm::Value *a4)
{
  uint64_t v8;
  int v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  unsigned __int8 **v14;
  unsigned __int8 *v15;
  const llvm::APFloat *v16;
  llvm::ConstantFP **v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  _BOOL4 v23;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  llvm::Value **v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  llvm::Value *v38;
  llvm::Value *v39;
  int v40;
  uint64_t v41;
  unsigned __int8 *v42;
  const llvm::APFloat *v43;
  llvm::ConstantFP **v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  int v48;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  llvm::Value **v59;
  int v60;
  uint64_t v61;
  llvm::Value ***v62;
  uint64_t v63;
  llvm::Value ****v64;
  llvm::Value *v65;
  llvm::Value *v66;
  llvm::ConstantFP **v67;
  uint64_t v68;
  uint64_t v69;
  llvm::ConstantFP **v70;
  uint64_t v71;
  uint64_t v72;
  llvm::ConstantFP **v73;
  llvm::ConstantFP **v74;
  llvm::Value *v75;
  unsigned __int8 *v76;
  uint64_t v77;
  int v78;
  int v79;
  unsigned int v80;
  uint64_t *v81;
  llvm::Instruction *v82;
  uint64_t *v83;
  int v84;
  BOOL v85;
  unsigned int v86;
  uint64_t *v87;
  llvm::ConstantFP **v89;
  llvm::ConstantFP **v90;
  int v91;
  llvm::Instruction *v92;
  uint64_t v93[4];
  __int16 v94;
  void *v95;
  _DWORD *v96;
  uint64_t v97;
  int v98;
  char v99;
  _DWORD *v100;
  uint64_t v101;
  int v102;
  char v103;
  _DWORD *v104;
  uint64_t v105;
  int v106;
  char v107;
  char *v108;
  uint64_t v109;
  _QWORD v110[6];

  v110[4] = *MEMORY[0x1E0C80C00];
  v108 = (char *)v110;
  v109 = 0x400000000;
  sub_1C5BF73B0((uint64_t)a3, (uint64_t)&v108);
  v8 = v109;
  if (!(_DWORD)v109)
    goto LABEL_5;
  v9 = *((unsigned __int8 *)a2 + 16);
  if ((v109 & 1) != 0 && v9 != 44)
  {
    if ((sub_1C5BF758C((uint64_t)a2) & 1) != 0)
    {
LABEL_5:
      a2 = 0;
      goto LABEL_141;
    }
    v8 = v109;
    if (!(_DWORD)v109)
      goto LABEL_141;
  }
  v91 = v9;
  v92 = a2;
  v10 = v108;
  v11 = &v108[8 * v8];
  do
  {
    v12 = *(_QWORD *)v10;
    v93[0] = 0;
    v13 = *(_DWORD *)(v12 + 20);
    if ((v13 & 0x40000000) != 0)
      v14 = *(unsigned __int8 ***)(v12 - 8);
    else
      v14 = (unsigned __int8 **)(v12 - 32 * (v13 & 0x7FFFFFF));
    v15 = *v14;
    v95 = v93;
    v96 = 0;
    if (!sub_1C4E7A604((uint64_t)&v95, v15))
      goto LABEL_50;
    v17 = *(llvm::ConstantFP ***)v12;
    v18 = v93[0];
    v19 = *(_QWORD *)(v93[0] + 8);
    if ((_UNKNOWN *)v19 == &unk_1C866F1C0)
    {
      v67 = *(llvm::ConstantFP ***)v12;
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v104, (const llvm::detail::DoubleAPFloat *)(v93[0] + 8));
      v17 = v67;
    }
    else
    {
      v104 = *(_DWORD **)(v93[0] + 8);
      if ((*(_DWORD *)(v19 + 8) + 64) >= 0x80)
      {
        v89 = v17;
        v68 = operator new[]();
        v17 = v89;
        v105 = v68;
      }
      v107 = v107 & 0xF7 | *(_BYTE *)(v18 + 28) & 8;
      v20 = *(_BYTE *)(v18 + 28);
      v21 = v20 & 7;
      v107 = v107 & 0xF8 | v20 & 7;
      v106 = *(_DWORD *)(v18 + 24);
      v23 = (v20 & 6) != 0 && v21 != 3;
      if (v21 == 1 || v23)
      {
        v25 = v104[2];
        v26 = &v105;
        if ((v25 - 64) <= 0xFFFFFF7F)
          v26 = (uint64_t *)v105;
        v29 = *(uint64_t **)(v18 + 16);
        v28 = (uint64_t *)(v18 + 16);
        v27 = v29;
        if ((*(_DWORD *)(*(v28 - 1) + 8) - 64) >= 0xFFFFFF80)
          v27 = v28;
        if (v25 <= 0xFFFFFFBF)
        {
          v30 = (unint64_t)(v25 + 64) >> 6;
          do
          {
            v31 = *v27++;
            *v26++ = v31;
            --v30;
          }
          while (v30);
        }
      }
    }
    v32 = v104;
    if (v104 == (_DWORD *)&unk_1C866F1C0)
    {
      if ((*(_BYTE *)(v105 + 28) & 8) == 0
        || (v73 = v17,
            llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v104),
            v17 = v73,
            v32 = v104,
            v104 == (_DWORD *)&unk_1C866F1C0))
      {
        v69 = v105;
        v105 = 0;
        v96 = &unk_1C866F1C0;
        v97 = v69;
        goto LABEL_36;
      }
    }
    else if ((v107 & 8) != 0)
    {
      v107 ^= 8u;
    }
    v96 = v32;
    v97 = v105;
    v98 = v106;
    v99 = v99 & 0xF0 | v107 & 0xF;
LABEL_36:
    v104 = &unk_1C866F210;
    v33 = llvm::ConstantFP::get(v17, (llvm::Type *)&v95, v16);
    v34 = *(_DWORD *)(v12 + 20);
    if ((v34 & 0x40000000) != 0)
      v35 = *(_QWORD *)(v12 - 8);
    else
      v35 = v12 - 32 * (v34 & 0x7FFFFFF);
    if (*(_QWORD *)v35)
    {
      **(_QWORD **)(v35 + 16) = *(_QWORD *)(v35 + 8);
      v36 = *(_QWORD *)(v35 + 8);
      if (v36)
        *(_QWORD *)(v36 + 16) = *(_QWORD *)(v35 + 16);
    }
    *(_QWORD *)v35 = v33;
    if (v33)
    {
      v39 = v33[1];
      v37 = v33 + 1;
      v38 = v39;
      *(_QWORD *)(v35 + 8) = v39;
      if (v39)
        *((_QWORD *)v38 + 2) = v35 + 8;
      *(_QWORD *)(v35 + 16) = v37;
      *v37 = v35;
    }
    if (v96 == (_DWORD *)&unk_1C866F1C0)
    {
      sub_1C4773C74(&v97);
    }
    else if ((v96[2] - 64) <= 0xFFFFFF7F && v97)
    {
      MEMORY[0x1CAA32F9C](v97, 0x1000C8000313F17);
    }
    if (v104 == (_DWORD *)&unk_1C866F1C0)
    {
      sub_1C4773C74(&v105);
    }
    else if ((v104[2] - 64) <= 0xFFFFFF7F && v105)
    {
      MEMORY[0x1CAA32F9C](v105, 0x1000C8000313F17);
    }
    *((_BYTE *)this + 552) = 1;
LABEL_50:
    v40 = *(_DWORD *)(v12 + 20);
    if ((v40 & 0x40000000) != 0)
      v41 = *(_QWORD *)(v12 - 8);
    else
      v41 = v12 - 32 * (v40 & 0x7FFFFFF);
    v42 = *(unsigned __int8 **)(v41 + 32);
    v95 = v93;
    v96 = 0;
    if (!sub_1C4E7A604((uint64_t)&v95, v42))
      goto LABEL_90;
    v44 = *(llvm::ConstantFP ***)v12;
    v45 = v93[0];
    v46 = *(_QWORD *)(v93[0] + 8);
    if ((_UNKNOWN *)v46 == &unk_1C866F1C0)
    {
      v70 = *(llvm::ConstantFP ***)v12;
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v100, (const llvm::detail::DoubleAPFloat *)(v93[0] + 8));
      v44 = v70;
    }
    else
    {
      v100 = *(_DWORD **)(v93[0] + 8);
      if ((*(_DWORD *)(v46 + 8) + 64) >= 0x80)
      {
        v90 = v44;
        v71 = operator new[]();
        v44 = v90;
        v101 = v71;
      }
      v103 = v103 & 0xF7 | *(_BYTE *)(v45 + 28) & 8;
      v47 = *(_BYTE *)(v45 + 28);
      v48 = v47 & 7;
      v103 = v103 & 0xF8 | v47 & 7;
      v102 = *(_DWORD *)(v45 + 24);
      v50 = (v47 & 6) != 0 && v48 != 3;
      if (v48 == 1 || v50)
      {
        v51 = v100[2];
        v52 = &v101;
        if ((v51 - 64) <= 0xFFFFFF7F)
          v52 = (uint64_t *)v101;
        v55 = *(uint64_t **)(v45 + 16);
        v54 = (uint64_t *)(v45 + 16);
        v53 = v55;
        if ((*(_DWORD *)(*(v54 - 1) + 8) - 64) >= 0xFFFFFF80)
          v53 = v54;
        if (v51 <= 0xFFFFFFBF)
        {
          v56 = (unint64_t)(v51 + 64) >> 6;
          do
          {
            v57 = *v53++;
            *v52++ = v57;
            --v56;
          }
          while (v56);
        }
      }
    }
    v58 = v100;
    if (v100 == (_DWORD *)&unk_1C866F1C0)
    {
      if ((*(_BYTE *)(v101 + 28) & 8) == 0
        || (v74 = v44,
            llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v100),
            v44 = v74,
            v58 = v100,
            v100 == (_DWORD *)&unk_1C866F1C0))
      {
        v72 = v101;
        v101 = 0;
        v96 = &unk_1C866F1C0;
        v97 = v72;
        goto LABEL_76;
      }
    }
    else if ((v103 & 8) != 0)
    {
      v103 ^= 8u;
    }
    v96 = v58;
    v97 = v101;
    v98 = v102;
    v99 = v99 & 0xF0 | v103 & 0xF;
LABEL_76:
    v100 = &unk_1C866F210;
    v59 = llvm::ConstantFP::get(v44, (llvm::Type *)&v95, v43);
    v60 = *(_DWORD *)(v12 + 20);
    if ((v60 & 0x40000000) != 0)
      v61 = *(_QWORD *)(v12 - 8);
    else
      v61 = v12 - 32 * (v60 & 0x7FFFFFF);
    v62 = (llvm::Value ***)(v61 + 32);
    if (*(_QWORD *)(v61 + 32))
    {
      **(_QWORD **)(v61 + 48) = *(_QWORD *)(v61 + 40);
      v63 = *(_QWORD *)(v61 + 40);
      if (v63)
        *(_QWORD *)(v63 + 16) = *(_QWORD *)(v61 + 48);
    }
    *v62 = v59;
    if (v59)
    {
      v66 = v59[1];
      v64 = (llvm::Value ****)(v59 + 1);
      v65 = v66;
      *(_QWORD *)(v61 + 40) = v66;
      if (v66)
        *((_QWORD *)v65 + 2) = v61 + 40;
      *(_QWORD *)(v61 + 48) = v64;
      *v64 = v62;
    }
    if (v96 == (_DWORD *)&unk_1C866F1C0)
    {
      sub_1C4773C74(&v97);
    }
    else if ((v96[2] - 64) <= 0xFFFFFF7F && v97)
    {
      MEMORY[0x1CAA32F9C](v97, 0x1000C8000313F17);
    }
    if (v100 == (_DWORD *)&unk_1C866F1C0)
    {
      sub_1C4773C74(&v101);
    }
    else if ((v100[2] - 64) <= 0xFFFFFF7F && v101)
    {
      MEMORY[0x1CAA32F9C](v101, 0x1000C8000313F17);
    }
    *((_BYTE *)this + 552) = 1;
LABEL_90:
    v10 += 8;
  }
  while (v10 != v11);
  if ((v109 & 1) == 0)
  {
    a2 = v92;
    goto LABEL_141;
  }
  sub_1C4773D54((uint64_t)&v95, (uint64_t)v92, 0, 0, 0);
  v94 = 257;
  if (v91 == 44)
    v75 = (llvm::Value *)sub_1C579E980((uint64_t)&v95, (uint64_t *)a4, (uint64_t)a3, (uint64_t)v92, (uint64_t)v93);
  else
    v75 = (llvm::Value *)sub_1C4867680((uint64_t)&v95, (uint64_t *)a4, (uint64_t)a3, (uint64_t)v92, (uint64_t)v93);
  v76 = (unsigned __int8 *)v75;
  llvm::Value::doRAUW(v92, v75, (llvm::Value *)1);
  v77 = *((_QWORD *)this + 6);
  v93[0] = (uint64_t)v92;
  v78 = *((_DWORD *)this + 16);
  if (!v78)
  {
    v87 = 0;
    goto LABEL_135;
  }
  v79 = v78 - 1;
  v80 = v79 & ((v92 >> 4) ^ (v92 >> 9));
  v81 = (uint64_t *)(v77 + 8 * v80);
  v82 = (llvm::Instruction *)*v81;
  if ((llvm::Instruction *)*v81 != v92)
  {
    v83 = 0;
    v84 = 1;
    while (v82 != (llvm::Instruction *)-4096)
    {
      if (v83)
        v85 = 0;
      else
        v85 = v82 == (llvm::Instruction *)-8192;
      if (v85)
        v83 = v81;
      v86 = v80 + v84++;
      v80 = v86 & v79;
      v81 = (uint64_t *)(v77 + 8 * v80);
      v82 = (llvm::Instruction *)*v81;
      if ((llvm::Instruction *)*v81 == v92)
        goto LABEL_136;
    }
    if (v83)
      v87 = v83;
    else
      v87 = v81;
LABEL_135:
    *sub_1C5BFCD34((uint64_t)this + 48, v93, v87) = (uint64_t)v92;
    sub_1C5BFC974((uint64_t)this + 72, v93);
  }
LABEL_136:
  if (v76[16] <= 0x1Bu)
    a2 = 0;
  else
    a2 = (llvm::Instruction *)v76;
  if (v95 != &v97)
    free(v95);
LABEL_141:
  if (v108 != (char *)v110)
    free(v108);
  return a2;
}

uint64_t sub_1C5BF73B0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v6;
  _QWORD *v7;
  int v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  uint64_t **v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(_QWORD *)(result + 8);
  if (!v2)
    return result;
  if (*(_QWORD *)(v2 + 8))
    return result;
  v3 = result;
  v4 = *(unsigned __int8 *)(result + 16);
  if (v4 < 0x1C)
    return result;
  v25 = 0;
  if (v4 == 49)
  {
    v8 = *(_DWORD *)(result + 20);
    if ((v8 & 0x40000000) != 0)
      v9 = *(unsigned __int8 ***)(result - 8);
    else
      v9 = (unsigned __int8 **)(result - 32 * (v8 & 0x7FFFFFF));
    v12 = *v9;
    if ((*v9)[16] >= 0x15u || v9[4][16] >= 0x15u)
    {
      v23 = &v25;
      v24 = 0;
      if (sub_1C4E7A604((uint64_t)&v23, v12))
      {
        v13 = v25;
        if (*(_UNKNOWN **)(v25 + 8) == &unk_1C866F1C0)
          v13 = *(_QWORD *)(v25 + 16);
        if ((*(_BYTE *)(v13 + 28) & 8) != 0)
        {
LABEL_28:
          v17 = *(unsigned int *)(a2 + 8);
          if (v17 >= *(_DWORD *)(a2 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v17 + 1, 8);
            LODWORD(v17) = *(_DWORD *)(a2 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v17) = v3;
          ++*(_DWORD *)(a2 + 8);
LABEL_31:
          v18 = *(_DWORD *)(v3 + 20);
          if ((v18 & 0x40000000) != 0)
            v19 = *(_QWORD **)(v3 - 8);
          else
            v19 = (_QWORD *)(v3 - 32 * (v18 & 0x7FFFFFF));
          sub_1C5BF73B0(*v19, a2);
          v20 = *(_DWORD *)(v3 + 20);
          if ((v20 & 0x40000000) != 0)
            v21 = *(_QWORD *)(v3 - 8);
          else
            v21 = v3 - 32 * (v20 & 0x7FFFFFF);
          return sub_1C5BF73B0(*(_QWORD *)(v21 + 32), a2);
        }
      }
      v14 = *(_DWORD *)(v3 + 20);
      if ((v14 & 0x40000000) != 0)
        v15 = *(_QWORD *)(v3 - 8);
      else
        v15 = v3 - 32 * (v14 & 0x7FFFFFF);
      v10 = *(unsigned __int8 **)(v15 + 32);
      v22[0] = &v25;
      v22[1] = 0;
      v11 = (uint64_t **)v22;
LABEL_24:
      if (!sub_1C4E7A604((uint64_t)v11, v10))
        goto LABEL_31;
      v16 = v25;
      if (*(_UNKNOWN **)(v25 + 8) == &unk_1C866F1C0)
        v16 = *(_QWORD *)(v25 + 16);
      if ((*(_BYTE *)(v16 + 28) & 8) == 0)
        goto LABEL_31;
      goto LABEL_28;
    }
  }
  else if (v4 == 46)
  {
    v6 = *(_DWORD *)(result + 20);
    v7 = (v6 & 0x40000000) != 0 ? *(_QWORD **)(result - 8) : (_QWORD *)(result - 32 * (v6 & 0x7FFFFFF));
    if (*(unsigned __int8 *)(*v7 + 16) >= 0x15u)
    {
      v10 = (unsigned __int8 *)v7[4];
      v23 = &v25;
      v24 = 0;
      v11 = &v23;
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t sub_1C5BF758C(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t *v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[2];

  v2 = *(unsigned __int8 *)(a1 + 16);
  if (v2 == 5)
  {
    if (*(_WORD *)(a1 + 18) == 15
      && (sub_1C4E71060((uint64_t)v12, *(llvm::Constant **)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF))) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v2 == 43 && (sub_1C4D8AC3C((uint64_t)v12, *(llvm::Constant **)(a1 - 64)) & 1) != 0)
  {
    return 0;
  }
  if (sub_1C5BFC8AC(a1))
    return 0;
  v3 = *(_DWORD *)(a1 + 20);
  v4 = (v3 & 0x40000000) != 0 ? *(uint64_t **)(a1 - 8) : (uint64_t *)(a1 - 32 * (v3 & 0x7FFFFFF));
  if (*(unsigned __int8 *)(v4[4] + 16) - 11 < 2)
    return 0;
  v6 = *v4;
  if (!sub_1C5BF17BC(*v4, 13, 14) && !sub_1C5BF17BC(v6, 15, 16))
  {
    v7 = *(_DWORD *)(a1 + 20);
    v8 = (v7 & 0x40000000) != 0 ? *(_QWORD *)(a1 - 8) : a1 - 32 * (v7 & 0x7FFFFFF);
    v9 = *(_QWORD *)(v8 + 32);
    if (!sub_1C5BF17BC(v9, 13, 14) && !sub_1C5BF17BC(v9, 15, 16))
    {
      v10 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(v10 + 8))
        return 0;
      v11 = *(_QWORD *)(v10 + 24);
      if (!sub_1C5BF17BC(v11, 13, 14) && !sub_1C5BF17BC(v11, 15, 16))
        return 0;
    }
  }
  return 1;
}

llvm::Instruction *llvm::ReassociatePass::canonicalizeNegFPConstants(llvm::ReassociatePass *this, llvm::Instruction *a2)
{
  llvm::Instruction *v2;
  int v4;
  llvm::Value *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  llvm::Instruction *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Value *v13;
  _QWORD *v14;
  uint64_t v15;
  llvm::Instruction *v16;
  llvm::Value *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  llvm::Instruction *v22;

  v2 = a2;
  v4 = *((unsigned __int8 *)a2 + 16);
  if (v4 == 5)
  {
    if (*((_WORD *)a2 + 9) != 14)
      goto LABEL_23;
    v8 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
    v5 = *(llvm::Value **)v8;
    if (!*(_QWORD *)v8)
      goto LABEL_23;
    v6 = *((_QWORD *)v8 + 4);
    v9 = *(_QWORD *)(v6 + 8);
    if (!v9 || *(_QWORD *)(v9 + 8) || *(unsigned __int8 *)(v6 + 16) < 0x1Cu)
      goto LABEL_23;
    goto LABEL_13;
  }
  if (v4 != 42)
    goto LABEL_16;
  v5 = (llvm::Value *)*((_QWORD *)a2 - 8);
  if (v5)
  {
    v6 = *((_QWORD *)a2 - 4);
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      if (!*(_QWORD *)(v7 + 8) && *(unsigned __int8 *)(v6 + 16) >= 0x1Cu)
      {
LABEL_13:
        v10 = llvm::ReassociatePass::canonicalizeNegFPConstantsForOp(this, a2, (llvm::Instruction *)v6, v5);
        if (v10)
          v2 = v10;
        v4 = *((unsigned __int8 *)v2 + 16);
LABEL_16:
        if (v4 != 5)
        {
          if (v4 != 42)
            goto LABEL_31;
          goto LABEL_18;
        }
LABEL_23:
        if (*((_WORD *)v2 + 9) != 14)
          goto LABEL_35;
        v14 = (_QWORD *)((char *)v2 - 32 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
        v11 = *v14;
        v15 = *(_QWORD *)(*v14 + 8);
        if (!v15)
          goto LABEL_35;
        if (*(_QWORD *)(v15 + 8))
          goto LABEL_35;
        if (*(unsigned __int8 *)(v11 + 16) < 0x1Cu)
          goto LABEL_35;
        v13 = (llvm::Value *)v14[4];
        if (!v13)
          goto LABEL_35;
        goto LABEL_28;
      }
    }
  }
LABEL_18:
  v11 = *((_QWORD *)v2 - 8);
  v12 = *(_QWORD *)(v11 + 8);
  if (!v12)
    return v2;
  if (*(_QWORD *)(v12 + 8))
    return v2;
  if (*(unsigned __int8 *)(v11 + 16) < 0x1Cu)
    return v2;
  v13 = (llvm::Value *)*((_QWORD *)v2 - 4);
  if (!v13)
    return v2;
LABEL_28:
  v16 = llvm::ReassociatePass::canonicalizeNegFPConstantsForOp(this, v2, (llvm::Instruction *)v11, v13);
  if (v16)
    v2 = v16;
  v4 = *((unsigned __int8 *)v2 + 16);
LABEL_31:
  if (v4 == 5)
  {
LABEL_35:
    if (*((_WORD *)v2 + 9) != 16)
      return v2;
    v19 = (char *)v2 - 32 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF);
    v17 = *(llvm::Value **)v19;
    if (!*(_QWORD *)v19)
      return v2;
    v18 = *((_QWORD *)v19 + 4);
    goto LABEL_38;
  }
  if (v4 != 44)
    return v2;
  v17 = (llvm::Value *)*((_QWORD *)v2 - 8);
  if (!v17)
    return v2;
  v18 = *((_QWORD *)v2 - 4);
LABEL_38:
  v20 = *(_QWORD *)(v18 + 8);
  if (v20)
  {
    if (!*(_QWORD *)(v20 + 8) && *(unsigned __int8 *)(v18 + 16) >= 0x1Cu)
    {
      v22 = llvm::ReassociatePass::canonicalizeNegFPConstantsForOp(this, v2, (llvm::Instruction *)v18, v17);
      if (v22)
        return v22;
    }
  }
  return v2;
}

void llvm::ReassociatePass::OptimizeInst(llvm::ReassociatePass *this, llvm::Instruction *a2)
{
  int v2;
  int v6;
  uint64_t *v7;
  llvm::Value **v8;
  int v9;
  char *v10;
  uint64_t v11;
  llvm::Value *v12;
  int v13;
  unsigned __int8 **v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned int Rank;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  llvm::Instruction *v25;
  uint64_t v26;
  int v27;
  unsigned __int8 v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  char v40;
  int v41;
  _DWORD *v42;
  llvm::ValueHandleBase *Shl;
  int v44;
  _QWORD **v45;
  _QWORD *v46;
  llvm::Type *v47;
  llvm::UndefValue *v48;
  int v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  unsigned __int8 **v56;
  unsigned __int8 *v57;
  char v58;
  unsigned int v59;
  llvm::APInt *v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  int v64;
  unsigned int v65;
  llvm::Instruction **v66;
  llvm::Instruction *v67;
  uint64_t *v68;
  int v69;
  BOOL v70;
  unsigned int v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t *v78;
  int v79;
  uint64_t *v80;
  uint64_t v81;
  unsigned int v82;
  BOOL v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  char v88;
  int v89;
  int v90;
  llvm **v91;
  int v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  llvm::Value *v96;
  unsigned __int8 *v97;
  unsigned __int8 **v98;
  unsigned __int8 *v99;
  uint64_t v100;
  int v101;
  int v102;
  unsigned int v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t *v106;
  int v107;
  BOOL v108;
  unsigned int v109;
  uint64_t *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  llvm::Type *v114;
  char *v115;
  unsigned __int8 **v116;
  int v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t *v123;
  int v124;
  BOOL v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  llvm::Type *v129;
  int v130;
  uint64_t v131;
  int v132;
  unsigned int v133;
  uint64_t v134;
  int v135;
  BOOL v136;
  unsigned int v137;
  int v138;
  uint64_t v139;
  uint64_t *v140;
  char *v141;
  int v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  int v148;
  int v149;
  unsigned int v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t *v153;
  int v154;
  BOOL v155;
  unsigned int v156;
  uint64_t *v157;
  int v158;
  uint64_t v159;
  llvm::Type *v160;
  uint64_t v161;
  unsigned __int8 *v162;
  uint64_t v163;
  unsigned int v164;
  BOOL v165;
  int v167;
  uint64_t v168;
  int v169;
  unsigned int v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t *v173;
  int v174;
  BOOL v175;
  unsigned int v176;
  uint64_t *v177;
  uint64_t v178;
  int v179;
  int v180;
  unsigned int v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t *v184;
  int v185;
  BOOL v186;
  unsigned int v187;
  llvm::Type *v188;
  uint64_t v189;
  unsigned __int8 *v190;
  uint64_t v191;
  unsigned int v192;
  BOOL v193;
  int v195;
  uint64_t v196;
  int v197;
  unsigned int v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t *v201;
  int v202;
  BOOL v203;
  unsigned int v204;
  uint64_t *v205;
  uint64_t v206;
  int v207;
  int v208;
  unsigned int v209;
  uint64_t v210;
  int v211;
  BOOL v212;
  unsigned int v213;
  uint64_t *v214;
  __int128 v215;
  uint64_t v216;
  int v217;
  _WORD v218[36];
  void *v219;
  uint64_t v220;
  _QWORD v221[9];

  v221[8] = *MEMORY[0x1E0C80C00];
  v2 = *((unsigned __int8 *)a2 + 16);
  if (v2 != 40 && (v2 - 41) > 0x11)
    return;
  if (v2 == 53)
  {
    v6 = *((_DWORD *)a2 + 5);
    v7 = (v6 & 0x40000000) != 0 ? (uint64_t *)*((_QWORD *)a2 - 1) : (uint64_t *)((char *)a2 - 32 * (v6 & 0x7FFFFFF));
    if (*(_BYTE *)(v7[4] + 16) == 16
      && (sub_1C5BF0FB0(*v7, 17)
       || (v11 = *((_QWORD *)a2 + 1)) != 0
       && !*(_QWORD *)(v11 + 8)
       && (sub_1C5BF0FB0(*(_QWORD *)(v11 + 24), 17) || sub_1C5BF0FB0(*(_QWORD *)(*((_QWORD *)a2 + 1) + 24), 13))))
    {
      v8 = llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, 1, 0);
      v9 = *((_DWORD *)a2 + 5);
      if ((v9 & 0x40000000) != 0)
        v10 = (char *)*((_QWORD *)a2 - 1);
      else
        v10 = (char *)a2 - 32 * (v9 & 0x7FFFFFF);
      v42 = (_DWORD *)*((_QWORD *)v10 + 4);
      Shl = llvm::ConstantExpr::getShl((llvm::ConstantExpr *)v8, (llvm::Constant *)v42, 0, 0);
      v44 = *((_DWORD *)a2 + 5);
      if ((v44 & 0x40000000) != 0)
        v45 = (_QWORD **)*((_QWORD *)a2 - 1);
      else
        v45 = (_QWORD **)((char *)a2 - 32 * (v44 & 0x7FFFFFF));
      v46 = *v45;
      v218[0] = 257;
      v12 = llvm::BinaryOperator::Create(17, v46, (uint64_t)Shl, (uint64_t)&v215, (uint64_t)a2);
      v48 = llvm::UndefValue::get(*(llvm::UndefValue **)a2, v47);
      v49 = *((_DWORD *)a2 + 5);
      if ((v49 & 0x40000000) != 0)
        v50 = (char *)*((_QWORD *)a2 - 1);
      else
        v50 = (char *)a2 - 32 * (v49 & 0x7FFFFFF);
      if (*(_QWORD *)v50)
      {
        **((_QWORD **)v50 + 2) = *((_QWORD *)v50 + 1);
        v51 = *((_QWORD *)v50 + 1);
        if (v51)
          *(_QWORD *)(v51 + 16) = *((_QWORD *)v50 + 2);
      }
      *(_QWORD *)v50 = v48;
      if (v48)
      {
        v54 = *((_QWORD *)v48 + 1);
        v52 = (_QWORD *)((char *)v48 + 8);
        v53 = v54;
        *((_QWORD *)v50 + 1) = v54;
        if (v54)
          *(_QWORD *)(v53 + 16) = v50 + 8;
        *((_QWORD *)v50 + 2) = v52;
        *v52 = v50;
      }
      llvm::Value::takeName(v12, a2);
      llvm::Value::doRAUW(a2, v12, (llvm::Value *)1);
      v55 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
      *(_QWORD *)&v215 = v55;
      if (v55)
        llvm::MetadataTracking::track((uint64_t)&v215, v55, 2);
      v56 = (unsigned __int8 **)((char *)v12 + 48);
      if (&v215 == (__int128 *)((char *)v12 + 48))
      {
        if ((_QWORD)v215)
          llvm::MetadataTracking::untrack((uint64_t)&v215, (unsigned __int8 *)v215);
      }
      else
      {
        if (*v56)
          llvm::MetadataTracking::untrack((uint64_t)v12 + 48, *v56);
        v57 = (unsigned __int8 *)v215;
        *v56 = (unsigned __int8 *)v215;
        if (v57)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v215, v57, (uint64_t)v12 + 48);
          *(_QWORD *)&v215 = 0;
        }
      }
      v58 = *((_BYTE *)a2 + 17) & 2;
      if ((*((_BYTE *)a2 + 17) & 4) != 0)
      {
        if ((*((_BYTE *)a2 + 17) & 2) != 0)
          goto LABEL_85;
        v59 = *(_DWORD *)(*(_QWORD *)a2 + 8);
        v60 = (llvm::APInt *)(v42 + 6);
        v61 = v42[8];
        if (v61 >= 0x41)
        {
          if (v61 - llvm::APInt::countLeadingZerosSlowCase(v60) > 0x40)
            goto LABEL_86;
          v60 = *(llvm::APInt **)v60;
        }
        if (*(_QWORD *)v60 < (unint64_t)((v59 >> 8) - 1))
LABEL_85:
          *((_BYTE *)v12 + 17) |= 4u;
      }
LABEL_86:
      *((_BYTE *)v12 + 17) = *((_BYTE *)v12 + 17) & 0xFD | v58;
      v62 = *((_QWORD *)this + 6);
      *(_QWORD *)&v215 = a2;
      v63 = *((_DWORD *)this + 16);
      if (v63)
      {
        v64 = v63 - 1;
        v65 = v64 & ((a2 >> 4) ^ (a2 >> 9));
        v66 = (llvm::Instruction **)(v62 + 8 * v65);
        v67 = *v66;
        if (*v66 == a2)
        {
LABEL_101:
          *((_BYTE *)this + 552) = 1;
          goto LABEL_16;
        }
        v68 = 0;
        v69 = 1;
        while (v67 != (llvm::Instruction *)-4096)
        {
          if (v68)
            v70 = 0;
          else
            v70 = v67 == (llvm::Instruction *)-8192;
          if (v70)
            v68 = (uint64_t *)v66;
          v71 = v65 + v69++;
          v65 = v71 & v64;
          v66 = (llvm::Instruction **)(v62 + 8 * v65);
          v67 = *v66;
          if (*v66 == a2)
            goto LABEL_101;
        }
        if (v68)
          v72 = v68;
        else
          v72 = (uint64_t *)v66;
      }
      else
      {
        v72 = 0;
      }
      *sub_1C5BFCD34((uint64_t)this + 48, (uint64_t *)&v215, v72) = (uint64_t)a2;
      sub_1C5BFC974((uint64_t)this + 72, &v215);
      goto LABEL_101;
    }
  }
  v12 = a2;
LABEL_16:
  if (llvm::Instruction::isCommutative(v12))
  {
    v13 = *((_DWORD *)v12 + 5);
    v14 = (v13 & 0x40000000) != 0
        ? (unsigned __int8 **)*((_QWORD *)v12 - 1)
        : (unsigned __int8 **)((char *)v12 - 32 * (v13 & 0x7FFFFFF));
    v15 = *v14;
    v16 = v14[4];
    if (*v14 != v16 && v16[16] >= 0x15u)
    {
      if (v15[16] < 0x15u
        || (Rank = llvm::ReassociatePass::getRank(this, (llvm::Value *)v16),
            Rank < llvm::ReassociatePass::getRank(this, (llvm::Value *)v15)))
      {
        if (llvm::Instruction::isCommutative(v12))
        {
          v18 = *((_QWORD *)v12 - 8);
          v19 = *((_QWORD *)v12 - 4);
          if (v18 != v19)
          {
            v20 = *((_QWORD *)v12 - 3);
            *((_QWORD *)v12 - 8) = v19;
            *((_QWORD *)v12 - 4) = v18;
            v21 = *(_OWORD *)((char *)v12 - 56);
            v22 = (_QWORD *)*((_QWORD *)v12 - 2);
            *((_QWORD *)v12 - 7) = v20;
            *((_QWORD *)v12 - 6) = v22;
            *(_OWORD *)((char *)v12 - 24) = v21;
            *v22 = (char *)v12 - 64;
            v23 = *((_QWORD *)v12 - 7);
            if (v23)
              *(_QWORD *)(v23 + 16) = (char *)v12 - 56;
            **((_QWORD **)v12 - 2) = (char *)v12 - 32;
            v24 = *((_QWORD *)v12 - 3);
            if (v24)
              *(_QWORD *)(v24 + 16) = (char *)v12 - 24;
          }
        }
      }
    }
  }
  v25 = llvm::ReassociatePass::canonicalizeNegFPConstants(this, v12);
  if (v25)
    v26 = (uint64_t)v25;
  else
    v26 = (uint64_t)v12;
  v27 = *(_DWORD *)(*(_QWORD *)v26 + 8);
  v28 = v27;
  if ((v27 & 0xFE) == 0x12)
    v28 = *(_BYTE *)(**(_QWORD **)(*(_QWORD *)v26 + 16) + 8);
  if (v28 > 6u)
  {
    if (v27 == 269)
      return;
  }
  else if (v27 == 269 || (*(_BYTE *)(v26 + 17) & 0xF2) != 0xF2)
  {
    return;
  }
  if (*(_BYTE *)(v26 + 16) != 57)
    goto LABEL_183;
  v29 = *(_DWORD *)(v26 + 20);
  if ((v29 & 0x40000000) == 0)
  {
    v30 = v29 & 0x7FFFFFF;
    v31 = (uint64_t *)(v26 - 32 * v30);
    if (!v30)
      goto LABEL_49;
LABEL_44:
    v32 = &v31[4 * v30];
    v33 = xmmword_1C866A880;
    do
    {
      v34 = 0;
      v35 = *v31;
      v215 = v33;
      do
      {
        if (sub_1C5BF0FB0(v35, *(_DWORD *)((char *)&v215 + v34)))
          goto LABEL_54;
        v34 += 4;
      }
      while (v34 != 16);
      v31 += 4;
      v33 = xmmword_1C866A880;
    }
    while (v31 != v32);
    goto LABEL_49;
  }
  v31 = *(uint64_t **)(v26 - 8);
  v30 = v29 & 0x7FFFFFF;
  if (v30)
    goto LABEL_44;
LABEL_49:
  v36 = *(_QWORD *)(v26 + 8);
  if (!*(_QWORD *)(v36 + 8))
  {
    v37 = 0;
    v38 = *(_QWORD *)(v36 + 24);
    v215 = xmmword_1C866A880;
    while (!sub_1C5BF0FB0(v38, *(_DWORD *)((char *)&v215 + v37)))
    {
      v37 += 4;
      if (v37 == 16)
        goto LABEL_183;
    }
LABEL_54:
    v39 = 0;
    v220 = 0x800000000;
    *(_QWORD *)&v215 = v218;
    *((_QWORD *)&v215 + 1) = v218;
    v219 = v221;
    v216 = 8;
    v217 = 0;
    if (v26 && *(unsigned __int8 *)(v26 + 16) >= 0x1Cu)
    {
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v215, v26);
      if (v40)
      {
        v41 = v220;
        if (v220 < HIDWORD(v220))
        {
          *((_QWORD *)v219 + v220) = v26;
LABEL_111:
          LODWORD(v220) = v41 + 1;
          goto LABEL_112;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, (uint64_t)v221, v220 + 1, 8);
        *((_QWORD *)v219 + v220) = v26;
      }
      else
      {
LABEL_112:
        while (2)
        {
          while (1)
          {
            v73 = v220;
            do
            {
              v39 = v73 == 0;
              if (!v73)
                goto LABEL_148;
              v74 = *((_QWORD *)v219 + --v73);
              LODWORD(v220) = v73;
              v75 = *(unsigned __int8 *)(v74 + 16);
            }
            while (v75 == 60);
            if (v75 == 53 || v75 == 67)
              break;
            if (v75 != 57)
              goto LABEL_148;
            v76 = *(_DWORD *)(v74 + 20);
            if ((v76 & 0x40000000) != 0)
            {
              v78 = *(uint64_t **)(v74 - 8);
              v77 = v76 & 0x7FFFFFF;
            }
            else
            {
              v77 = v76 & 0x7FFFFFF;
              v78 = (uint64_t *)(v74 - 32 * v77);
            }
            if (v77)
            {
              v85 = 32 * v77;
              while (1)
              {
                v86 = *v78;
                if (!*v78 || *(unsigned __int8 *)(*v78 + 16) < 0x1Cu)
                  goto LABEL_147;
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v215, *v78);
                if (v88)
                {
                  v89 = v220;
                  if (v220 >= HIDWORD(v220))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, (uint64_t)v221, v220 + 1, 8);
                    *((_QWORD *)v219 + v220) = v86;
                    v89 = v220;
                  }
                  else
                  {
                    *((_QWORD *)v219 + v220) = v86;
                  }
                  LODWORD(v220) = v89 + 1;
                }
                v78 += 4;
                v85 -= 32;
                if (!v85)
                  goto LABEL_112;
              }
            }
          }
          v79 = *(_DWORD *)(v74 + 20);
          if ((v79 & 0x40000000) != 0)
            v80 = *(uint64_t **)(v74 - 8);
          else
            v80 = (uint64_t *)(v74 - 32 * (v79 & 0x7FFFFFF));
          v81 = *v80;
          v82 = *(unsigned __int8 *)(*v80 + 16);
          if (v81)
            v83 = v82 >= 0x1C;
          else
            v83 = 0;
          if (!v83)
          {
LABEL_147:
            v39 = 0;
            goto LABEL_148;
          }
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v215, v81);
          if (!v84)
            continue;
          break;
        }
        v41 = v220;
        if (v220 < HIDWORD(v220))
        {
          *((_QWORD *)v219 + v220) = v81;
          goto LABEL_111;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, (uint64_t)v221, v220 + 1, 8);
        *((_QWORD *)v219 + v220) = v81;
      }
      v41 = v220;
      goto LABEL_111;
    }
LABEL_148:
    if (*((_QWORD *)&v215 + 1) != (_QWORD)v215)
      free(*((void **)&v215 + 1));
    if (v219 != v221)
      free(v219);
    if (!v39)
    {
      v90 = *(_DWORD *)(v26 + 20);
      v91 = (v90 & 0x40000000) != 0 ? *(llvm ***)(v26 - 8) : (llvm **)(v26 - 32 * (v90 & 0x7FFFFFF));
      if (llvm::haveNoCommonBitsSet(*v91, v91[4], (void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 40) + 56) + 40) + 272), 0, (llvm::AssumptionCache *)v26, 0, (const llvm::DominatorTree *)1))
      {
        v92 = *(_DWORD *)(v26 + 20);
        if ((v92 & 0x40000000) != 0)
          v93 = *(_QWORD *)(v26 - 8);
        else
          v93 = v26 - 32 * (v92 & 0x7FFFFFF);
        v94 = *(_QWORD **)v93;
        v95 = *(_QWORD *)(v93 + 32);
        v218[0] = 257;
        v96 = sub_1C5BFB4F0(v94, v95, (uint64_t)&v215, v26, v26);
        *((_BYTE *)v96 + 17) |= 6u;
        llvm::Value::takeName(v96, (llvm::Value *)v26);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v26, v96, (llvm::Value *)1);
        v97 = *(unsigned __int8 **)(v26 + 48);
        *(_QWORD *)&v215 = v97;
        if (v97)
          llvm::MetadataTracking::track((uint64_t)&v215, v97, 2);
        v98 = (unsigned __int8 **)((char *)v96 + 48);
        if (&v215 == (__int128 *)((char *)v96 + 48))
        {
          if ((_QWORD)v215)
            llvm::MetadataTracking::untrack((uint64_t)&v215, (unsigned __int8 *)v215);
        }
        else
        {
          if (*v98)
            llvm::MetadataTracking::untrack((uint64_t)v96 + 48, *v98);
          v99 = (unsigned __int8 *)v215;
          *v98 = (unsigned __int8 *)v215;
          if (v99)
            llvm::MetadataTracking::retrack((uint64_t)&v215, v99, (uint64_t)v96 + 48);
        }
        v100 = *((_QWORD *)this + 6);
        *(_QWORD *)&v215 = v26;
        v101 = *((_DWORD *)this + 16);
        if (v101)
        {
          v102 = v101 - 1;
          v103 = v102 & ((v26 >> 4) ^ (v26 >> 9));
          v104 = (uint64_t *)(v100 + 8 * v103);
          v105 = *v104;
          if (v26 == *v104)
          {
LABEL_182:
            *((_BYTE *)this + 552) = 1;
            v26 = (uint64_t)v96;
            goto LABEL_183;
          }
          v106 = 0;
          v107 = 1;
          while (v105 != -4096)
          {
            if (v106)
              v108 = 0;
            else
              v108 = v105 == -8192;
            if (v108)
              v106 = v104;
            v109 = v103 + v107++;
            v103 = v109 & v102;
            v104 = (uint64_t *)(v100 + 8 * v103);
            v105 = *v104;
            if (v26 == *v104)
              goto LABEL_182;
          }
          if (v106)
            v110 = v106;
          else
            v110 = v104;
        }
        else
        {
          v110 = 0;
        }
        *sub_1C5BFCD34((uint64_t)this + 48, (uint64_t *)&v215, v110) = v26;
        sub_1C5BFC974((uint64_t)this + 72, &v215);
        goto LABEL_182;
      }
    }
  }
LABEL_183:
  v111 = *(unsigned __int8 *)(v26 + 16);
  if (v111 == 40 || v111 == 44)
  {
    if (sub_1C5BF758C(v26))
    {
      v115 = (char *)this + 48;
      v116 = sub_1C5BF88D4(v26, (uint64_t)this + 48, v127, v128, v129);
      *(_QWORD *)&v215 = v26;
      v130 = *((_DWORD *)this + 16);
      if (v130)
      {
        v131 = *((_QWORD *)this + 6);
        v132 = v130 - 1;
        v133 = v132 & ((v26 >> 4) ^ (v26 >> 9));
        v121 = (uint64_t *)(v131 + 8 * v133);
        v134 = *v121;
        if (v26 != *v121)
        {
          v123 = 0;
          v135 = 1;
          while (v134 != -4096)
          {
            if (v123)
              v136 = 0;
            else
              v136 = v134 == -8192;
            if (v136)
              v123 = v121;
            v137 = v133 + v135++;
            v133 = v137 & v132;
            v121 = (uint64_t *)(v131 + 8 * v133);
            v134 = *v121;
            if (v26 == *v121)
              goto LABEL_219;
          }
          goto LABEL_214;
        }
LABEL_219:
        *((_BYTE *)this + 552) = 1;
        v26 = (uint64_t)v116;
        goto LABEL_220;
      }
LABEL_356:
      v140 = 0;
LABEL_217:
      v141 = v115;
LABEL_218:
      *sub_1C5BFCD34((uint64_t)v141, (uint64_t *)&v215, v140) = v26;
      sub_1C5BFC974((uint64_t)this + 72, &v215);
      goto LABEL_219;
    }
    if (!sub_1C5BFC8AC(v26))
      goto LABEL_220;
    v138 = *(_DWORD *)(v26 + 20);
    if (*(unsigned __int8 *)(v26 + 16) - 41 > 0x11)
    {
      v157 = (v138 & 0x40000000) != 0 ? *(uint64_t **)(v26 - 8) : (uint64_t *)(v26 - 32 * (v138 & 0x7FFFFFF));
    }
    else
    {
      v139 = (v138 & 0x40000000) != 0 ? *(_QWORD *)(v26 - 8) : v26 - 32 * (v138 & 0x7FFFFFF);
      v157 = (uint64_t *)(v139 + 32);
    }
    if (!sub_1C5BF0FB0(*v157, 18))
      goto LABEL_220;
    v161 = *(_QWORD *)(v26 + 8);
    if (v161)
    {
      if (!*(_QWORD *)(v161 + 8) && sub_1C5BF0FB0(*(_QWORD *)(v161 + 24), 18))
        goto LABEL_220;
    }
    v116 = sub_1C5BF8AB0((unsigned __int8 *)v26, v160);
    v162 = v116[1];
    if (!v162)
    {
LABEL_288:
      v141 = (char *)this + 48;
      v178 = *((_QWORD *)this + 6);
      *(_QWORD *)&v215 = v26;
      v179 = *((_DWORD *)this + 16);
      if (v179)
      {
        v180 = v179 - 1;
        v181 = v180 & ((v26 >> 4) ^ (v26 >> 9));
        v182 = (uint64_t *)(v178 + 8 * v181);
        v183 = *v182;
        if (v26 == *v182)
          goto LABEL_219;
        v184 = 0;
        v185 = 1;
        while (v183 != -4096)
        {
          if (v184)
            v186 = 0;
          else
            v186 = v183 == -8192;
          if (v186)
            v184 = v182;
          v187 = v181 + v185++;
          v181 = v187 & v180;
          v182 = (uint64_t *)(v178 + 8 * v181);
          v183 = *v182;
          if (v26 == *v182)
            goto LABEL_219;
        }
        goto LABEL_343;
      }
LABEL_358:
      v140 = 0;
      goto LABEL_218;
    }
    while (1)
    {
      v163 = *((_QWORD *)v162 + 3);
      v164 = *(unsigned __int8 *)(v163 + 16);
      if (v163)
        v165 = v164 >= 0x1C;
      else
        v165 = 0;
      if (!v165 || v164 - 59 < 0xFFFFFFEE)
        goto LABEL_285;
      *(_QWORD *)&v215 = *((_QWORD *)v162 + 3);
      v167 = *((_DWORD *)this + 16);
      if (!v167)
        break;
      v168 = *((_QWORD *)this + 6);
      v169 = v167 - 1;
      v170 = v169 & ((v163 >> 4) ^ (v163 >> 9));
      v171 = (uint64_t *)(v168 + 8 * v170);
      v172 = *v171;
      if (v163 != *v171)
      {
        v173 = 0;
        v174 = 1;
        while (v172 != -4096)
        {
          if (v173)
            v175 = 0;
          else
            v175 = v172 == -8192;
          if (v175)
            v173 = v171;
          v176 = v170 + v174++;
          v170 = v176 & v169;
          v171 = (uint64_t *)(v168 + 8 * v170);
          v172 = *v171;
          if (v163 == *v171)
            goto LABEL_285;
        }
        if (v173)
          v177 = v173;
        else
          v177 = v171;
        goto LABEL_284;
      }
LABEL_285:
      v162 = (unsigned __int8 *)*((_QWORD *)v162 + 1);
      if (!v162)
        goto LABEL_288;
    }
    v177 = 0;
LABEL_284:
    *sub_1C5BFCD34((uint64_t)this + 48, (uint64_t *)&v215, v177) = v163;
    sub_1C5BFC974((uint64_t)this + 72, &v215);
    goto LABEL_285;
  }
  if (v111 != 43)
    goto LABEL_220;
  if (sub_1C5BF758C(v26))
  {
    v115 = (char *)this + 48;
    v116 = sub_1C5BF88D4(v26, (uint64_t)this + 48, v112, v113, v114);
    *(_QWORD *)&v215 = v26;
    v117 = *((_DWORD *)this + 16);
    if (v117)
    {
      v118 = *((_QWORD *)this + 6);
      v119 = v117 - 1;
      v120 = v119 & ((v26 >> 4) ^ (v26 >> 9));
      v121 = (uint64_t *)(v118 + 8 * v120);
      v122 = *v121;
      if (v26 != *v121)
      {
        v123 = 0;
        v124 = 1;
        while (v122 != -4096)
        {
          if (v123)
            v125 = 0;
          else
            v125 = v122 == -8192;
          if (v125)
            v123 = v121;
          v126 = v120 + v124++;
          v120 = v126 & v119;
          v121 = (uint64_t *)(v118 + 8 * v120);
          v122 = *v121;
          if (v26 == *v121)
            goto LABEL_219;
        }
LABEL_214:
        if (v123)
          v140 = v123;
        else
          v140 = v121;
        goto LABEL_217;
      }
      goto LABEL_219;
    }
    goto LABEL_356;
  }
  v144 = *(unsigned __int8 *)(v26 + 16);
  if (v144 == 5)
  {
    if (*(_WORD *)(v26 + 18) != 15
      || !sub_1C4E71060((uint64_t)&v215, *(llvm::Constant **)(v26 - 32 * (*(_DWORD *)(v26 + 20) & 0x7FFFFFF))))
    {
      goto LABEL_220;
    }
  }
  else if (v144 != 43 || (sub_1C4D8AC3C((uint64_t)&v215, *(llvm::Constant **)(v26 - 64)) & 1) == 0)
  {
    goto LABEL_220;
  }
  v158 = *(_DWORD *)(v26 + 20);
  if ((v158 & 0x40000000) != 0)
    v159 = *(_QWORD *)(v26 - 8);
  else
    v159 = v26 - 32 * (v158 & 0x7FFFFFF);
  if (sub_1C5BF0FB0(*(_QWORD *)(v159 + 32), 17))
  {
    v189 = *(_QWORD *)(v26 + 8);
    if (!v189 || *(_QWORD *)(v189 + 8) || !sub_1C5BF0FB0(*(_QWORD *)(v189 + 24), 17))
    {
      v116 = sub_1C5BF8AB0((unsigned __int8 *)v26, v188);
      v190 = v116[1];
      if (v190)
      {
        while (1)
        {
          v191 = *((_QWORD *)v190 + 3);
          v192 = *(unsigned __int8 *)(v191 + 16);
          if (v191)
            v193 = v192 >= 0x1C;
          else
            v193 = 0;
          if (!v193 || v192 - 59 < 0xFFFFFFEE)
            goto LABEL_329;
          *(_QWORD *)&v215 = *((_QWORD *)v190 + 3);
          v195 = *((_DWORD *)this + 16);
          if (!v195)
            break;
          v196 = *((_QWORD *)this + 6);
          v197 = v195 - 1;
          v198 = v197 & ((v191 >> 4) ^ (v191 >> 9));
          v199 = (uint64_t *)(v196 + 8 * v198);
          v200 = *v199;
          if (v191 != *v199)
          {
            v201 = 0;
            v202 = 1;
            while (v200 != -4096)
            {
              if (v201)
                v203 = 0;
              else
                v203 = v200 == -8192;
              if (v203)
                v201 = v199;
              v204 = v198 + v202++;
              v198 = v204 & v197;
              v199 = (uint64_t *)(v196 + 8 * v198);
              v200 = *v199;
              if (v191 == *v199)
                goto LABEL_329;
            }
            if (v201)
              v205 = v201;
            else
              v205 = v199;
            goto LABEL_328;
          }
LABEL_329:
          v190 = (unsigned __int8 *)*((_QWORD *)v190 + 1);
          if (!v190)
            goto LABEL_332;
        }
        v205 = 0;
LABEL_328:
        *sub_1C5BFCD34((uint64_t)this + 48, (uint64_t *)&v215, v205) = v191;
        sub_1C5BFC974((uint64_t)this + 72, &v215);
        goto LABEL_329;
      }
LABEL_332:
      v141 = (char *)this + 48;
      v206 = *((_QWORD *)this + 6);
      *(_QWORD *)&v215 = v26;
      v207 = *((_DWORD *)this + 16);
      if (v207)
      {
        v208 = v207 - 1;
        v209 = v208 & ((v26 >> 4) ^ (v26 >> 9));
        v182 = (uint64_t *)(v206 + 8 * v209);
        v210 = *v182;
        if (v26 == *v182)
          goto LABEL_219;
        v184 = 0;
        v211 = 1;
        while (v210 != -4096)
        {
          if (v184)
            v212 = 0;
          else
            v212 = v210 == -8192;
          if (v212)
            v184 = v182;
          v213 = v209 + v211++;
          v209 = v213 & v208;
          v182 = (uint64_t *)(v206 + 8 * v209);
          v210 = *v182;
          if (v26 == *v182)
            goto LABEL_219;
        }
LABEL_343:
        if (v184)
          v140 = v184;
        else
          v140 = v182;
        goto LABEL_218;
      }
      goto LABEL_358;
    }
  }
LABEL_220:
  v142 = *(unsigned __int8 *)(v26 + 16);
  switch(*(_BYTE *)(v26 + 16))
  {
    case ')':
    case '-':
      goto LABEL_222;
    case '*':
    case '.':
      if ((~*(unsigned __int8 *)(v26 + 17) & 0x12) == 0)
        goto LABEL_222;
      return;
    case '+':
    case ',':
      return;
    default:
      if ((v142 - 56) >= 3)
        return;
LABEL_222:
      v143 = *(_QWORD *)(v26 + 8);
      if (!v143 || *(_QWORD *)(v143 + 8))
        goto LABEL_224;
      v145 = *(_QWORD *)(v143 + 24);
      v146 = *(unsigned __int8 *)(v145 + 16);
      if (v146 != v142)
      {
        if (v142 == 42)
        {
          if (v146 == 44)
            return;
        }
        else if (v142 == 41 && v146 == 43)
        {
          return;
        }
LABEL_224:
        llvm::ReassociatePass::ReassociateExpression(this, (llvm::BinaryOperator *)v26);
        return;
      }
      if (v145 != v26 && *(_QWORD *)(v26 + 40) == *(_QWORD *)(v145 + 40))
      {
        v147 = *((_QWORD *)this + 6);
        *(_QWORD *)&v215 = v145;
        v148 = *((_DWORD *)this + 16);
        if (!v148)
        {
          v214 = 0;
LABEL_353:
          *sub_1C5BFCD34((uint64_t)this + 48, (uint64_t *)&v215, v214) = v145;
          sub_1C5BFC974((uint64_t)this + 72, &v215);
          return;
        }
        v149 = v148 - 1;
        v150 = v149 & ((v145 >> 4) ^ (v145 >> 9));
        v151 = (uint64_t *)(v147 + 8 * v150);
        v152 = *v151;
        if (v145 != *v151)
        {
          v153 = 0;
          v154 = 1;
          while (v152 != -4096)
          {
            if (v153)
              v155 = 0;
            else
              v155 = v152 == -8192;
            if (v155)
              v153 = v151;
            v156 = v150 + v154++;
            v150 = v156 & v149;
            v151 = (uint64_t *)(v147 + 8 * v150);
            v152 = *v151;
            if (v145 == *v151)
              return;
          }
          if (v153)
            v214 = v153;
          else
            v214 = v151;
          goto LABEL_353;
        }
      }
      break;
  }
}

unsigned __int8 **sub_1C5BF88D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Type *a5)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD **v10;
  _QWORD *v11;
  unsigned __int8 **v12;
  llvm::Type *v13;
  llvm::Value **NullValue;
  llvm::Type *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  llvm::Value *v20;
  llvm::Value *v21;
  llvm::Value **v22;
  int v23;
  uint64_t v24;
  llvm::Value ***v25;
  uint64_t v26;
  llvm::Value ****v27;
  llvm::Value *v28;
  llvm::Value *v29;
  unsigned __int8 *v30;
  unsigned __int8 **v31;
  unsigned __int8 *v32;
  unsigned __int8 *v34;
  char v35[32];
  __int16 v36;

  v6 = *(_DWORD *)(a1 + 20);
  if ((v6 & 0x40000000) != 0)
    v7 = *(_QWORD *)(a1 - 8);
  else
    v7 = a1 - 32 * (v6 & 0x7FFFFFF);
  v8 = sub_1C5BFBF78(*(uint64_t ****)(v7 + 32), (llvm::Type *)a1, a2, a4, a5);
  v9 = *(_DWORD *)(a1 + 20);
  if ((v9 & 0x40000000) != 0)
    v10 = *(_QWORD ***)(a1 - 8);
  else
    v10 = (_QWORD **)(a1 - 32 * (v9 & 0x7FFFFFF));
  v11 = *v10;
  v36 = 257;
  v12 = (unsigned __int8 **)sub_1C5BFB4F0(v11, v8, (uint64_t)v35, a1, a1);
  NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)a1, v13);
  v16 = *(_DWORD *)(a1 + 20);
  if ((v16 & 0x40000000) != 0)
    v17 = *(_QWORD *)(a1 - 8);
  else
    v17 = a1 - 32 * (v16 & 0x7FFFFFF);
  if (*(_QWORD *)v17)
  {
    **(_QWORD **)(v17 + 16) = *(_QWORD *)(v17 + 8);
    v18 = *(_QWORD *)(v17 + 8);
    if (v18)
      *(_QWORD *)(v18 + 16) = *(_QWORD *)(v17 + 16);
  }
  *(_QWORD *)v17 = NullValue;
  if (NullValue)
  {
    v21 = NullValue[1];
    v19 = (uint64_t *)(NullValue + 1);
    v20 = v21;
    *(_QWORD *)(v17 + 8) = v21;
    if (v21)
      *((_QWORD *)v20 + 2) = v17 + 8;
    *(_QWORD *)(v17 + 16) = v19;
    *v19 = v17;
  }
  v22 = llvm::Constant::getNullValue(*(llvm::Constant **)a1, v15);
  v23 = *(_DWORD *)(a1 + 20);
  if ((v23 & 0x40000000) != 0)
    v24 = *(_QWORD *)(a1 - 8);
  else
    v24 = a1 - 32 * (v23 & 0x7FFFFFF);
  v25 = (llvm::Value ***)(v24 + 32);
  if (*(_QWORD *)(v24 + 32))
  {
    **(_QWORD **)(v24 + 48) = *(_QWORD *)(v24 + 40);
    v26 = *(_QWORD *)(v24 + 40);
    if (v26)
      *(_QWORD *)(v26 + 16) = *(_QWORD *)(v24 + 48);
  }
  *v25 = v22;
  if (v22)
  {
    v29 = v22[1];
    v27 = (llvm::Value ****)(v22 + 1);
    v28 = v29;
    *(_QWORD *)(v24 + 40) = v29;
    if (v29)
      *((_QWORD *)v28 + 2) = v24 + 40;
    *(_QWORD *)(v24 + 48) = v27;
    *v27 = v25;
  }
  llvm::Value::takeName((llvm::Value *)v12, (llvm::Value *)a1);
  llvm::Value::doRAUW((llvm::ValueAsMetadata *)a1, (llvm::Value *)v12, (llvm::Value *)1);
  v30 = *(unsigned __int8 **)(a1 + 48);
  v34 = v30;
  if (v30)
    llvm::MetadataTracking::track((uint64_t)&v34, v30, 2);
  v31 = v12 + 6;
  if (&v34 == v12 + 6)
  {
    if (v34)
      llvm::MetadataTracking::untrack((uint64_t)&v34, v34);
  }
  else
  {
    if (*v31)
      llvm::MetadataTracking::untrack((uint64_t)(v12 + 6), *v31);
    v32 = v34;
    *v31 = v34;
    if (v32)
      llvm::MetadataTracking::retrack((uint64_t)&v34, v32, (uint64_t)(v12 + 6));
  }
  return v12;
}

unsigned __int8 **sub_1C5BF8AB0(unsigned __int8 *a1, llvm::Type *a2)
{
  llvm::Constant *v3;
  int v4;
  int v5;
  llvm::ValueHandleBase *AllOnesValue;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  _BOOL8 v10;
  _QWORD *v11;
  unsigned __int8 **v12;
  llvm::Type *v13;
  llvm::Value **NullValue;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 **v19;
  llvm::Value *v20;
  llvm::Value *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 **v24;
  unsigned __int8 *v25;
  unsigned __int8 *v27;
  char v28[32];
  __int16 v29;

  v3 = *(llvm::Constant **)a1;
  if ((*(_DWORD *)(*(_QWORD *)a1 + 8) & 0xFE) == 0x12)
    v4 = *(unsigned __int8 *)(**((_QWORD **)v3 + 2) + 8);
  else
    v4 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  v5 = a1[16];
  if (v4 == 13)
    AllOnesValue = llvm::Constant::getAllOnesValue(*(llvm::Constant **)a1, a2);
  else
    AllOnesValue = llvm::ConstantFP::get(*(llvm::ConstantFP ***)a1, a2, -1.0);
  v7 = (uint64_t)AllOnesValue;
  v8 = *((_DWORD *)a1 + 5);
  if ((v8 & 0x40000000) != 0)
    v9 = (unsigned __int8 *)*((_QWORD *)a1 - 1);
  else
    v9 = &a1[-32 * (v8 & 0x7FFFFFF)];
  v10 = (v5 - 41) < 0x12;
  v11 = *(_QWORD **)&v9[32 * v10];
  v29 = 257;
  v12 = (unsigned __int8 **)sub_1C5BF520C(v11, v7, (uint64_t)v28, (uint64_t)a1, (uint64_t)a1);
  NullValue = llvm::Constant::getNullValue(v3, v13);
  v15 = *((_DWORD *)a1 + 5);
  if ((v15 & 0x40000000) != 0)
    v16 = (unsigned __int8 *)*((_QWORD *)a1 - 1);
  else
    v16 = &a1[-32 * (v15 & 0x7FFFFFF)];
  v17 = &v16[32 * v10];
  if (*(_QWORD *)v17)
  {
    **((_QWORD **)v17 + 2) = *((_QWORD *)v17 + 1);
    v18 = *((_QWORD *)v17 + 1);
    if (v18)
      *(_QWORD *)(v18 + 16) = *((_QWORD *)v17 + 2);
  }
  *(_QWORD *)v17 = NullValue;
  if (NullValue)
  {
    v21 = NullValue[1];
    v19 = (unsigned __int8 **)(NullValue + 1);
    v20 = v21;
    v22 = &v16[32 * v10];
    *((_QWORD *)v22 + 1) = v21;
    if (v21)
      *((_QWORD *)v20 + 2) = v22 + 8;
    *((_QWORD *)v22 + 2) = v19;
    *v19 = v17;
  }
  llvm::Value::takeName((llvm::Value *)v12, (llvm::Value *)a1);
  llvm::Value::doRAUW((llvm::ValueAsMetadata *)a1, (llvm::Value *)v12, (llvm::Value *)1);
  v23 = (unsigned __int8 *)*((_QWORD *)a1 + 6);
  v27 = v23;
  if (v23)
    llvm::MetadataTracking::track((uint64_t)&v27, v23, 2);
  v24 = v12 + 6;
  if (&v27 == v12 + 6)
  {
    if (v27)
      llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
  }
  else
  {
    if (*v24)
      llvm::MetadataTracking::untrack((uint64_t)(v12 + 6), *v24);
    v25 = v27;
    *v24 = v27;
    if (v25)
      llvm::MetadataTracking::retrack((uint64_t)&v27, v25, (uint64_t)(v12 + 6));
  }
  return v12;
}

void llvm::ReassociatePass::ReassociateExpression(llvm::ReassociatePass *this, llvm::BinaryOperator *a2)
{
  __n128 v4;
  unsigned int v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned int Rank;
  llvm::Value *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned int v16;
  __n128 *v17;
  unint64_t v18;
  __n128 *v19;
  const std::nothrow_t *v20;
  unint64_t v21;
  __n128 *v22;
  BOOL v23;
  llvm::Constant *v24;
  __n128 v25;
  __n128 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 **v30;
  unsigned __int8 *v31;
  char *v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  llvm::BinaryOperator **v37;
  llvm::BinaryOperator *v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  llvm::BinaryOperator *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned __int8 **v48;
  unsigned __int8 *v49;
  uint64_t v50;
  int v51;
  int v52;
  unsigned int v53;
  llvm::BinaryOperator *v54;
  int v55;
  BOOL v56;
  unsigned int v57;
  uint64_t *v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  int v84;
  unsigned int v85;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  __int128 *v90;
  char *v91;
  int v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  void *v101;
  int v102;
  char *v103;
  uint64_t v104;
  unsigned int v105;
  llvm::APInt *v106;
  uint64_t v107;
  int v108;
  void *v109;
  __int128 v110;
  uint64_t v111;
  _DWORD *v112;
  __int128 v113;
  uint64_t *v114;
  __int128 v115;
  unsigned __int8 *v116;
  unsigned __int8 *v117;
  _QWORD v118[2];
  int v119;
  char v120;
  void *v121;
  uint64_t v122;
  _BYTE v123[128];
  void *v124;
  uint64_t v125;
  _BYTE v126[192];
  __int128 v127;
  uint64_t v128;
  int v129;
  char v130;
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  v124 = v126;
  v125 = 0x800000000;
  *((_BYTE *)this + 552) |= sub_1C5BF1830((unsigned __int8 *)a2, (uint64_t)&v124);
  v121 = v123;
  v122 = 0x800000000;
  v5 = v125;
  if (v125 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, (uint64_t)v123, v125, 16);
    v5 = v125;
  }
  if (v5)
  {
    v6 = (char *)v124;
    v7 = (char *)v124 + 24 * v5;
    while (1)
    {
      v8 = v6 + 8;
      if (*((_DWORD *)v6 + 4) >= 0x41u)
        v8 = (_QWORD *)*v8;
      v9 = (_QWORD *)*v8;
      Rank = llvm::ReassociatePass::getRank(this, *(llvm::Value **)v6);
      v11 = *(llvm::Value **)v6;
      v12 = v122;
      v13 = (unint64_t)v9 + v122;
      if (v13 > HIDWORD(v122))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, (uint64_t)v123, v13, 16);
        v12 = v122;
        if (v9)
        {
LABEL_9:
          v14 = (char *)v121 + 16 * v12;
          v15 = v9;
          do
          {
            *v14 = Rank;
            v14[1] = v11;
            v14 += 2;
            v15 = (_QWORD *)((char *)v15 - 1);
          }
          while (v15);
          LODWORD(v12) = v122;
        }
      }
      else if (v9)
      {
        goto LABEL_9;
      }
      v16 = v12 + (_DWORD)v9;
      LODWORD(v122) = v16;
      v6 += 24;
      if (v6 == v7)
        goto LABEL_17;
    }
  }
  v16 = v122;
LABEL_17:
  v17 = (__n128 *)v121;
  v18 = v16;
  v19 = (__n128 *)((char *)v121 + 16 * v16);
  if (v16 < 0x81)
  {
LABEL_21:
    sub_1C5BFDFC4(v17, v19, v18, 0, 0, v4);
  }
  else
  {
    v20 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v21 = v16;
    while (1)
    {
      v22 = (__n128 *)operator new(16 * v21, v20);
      if (v22)
        break;
      v23 = v21 > 1;
      v21 >>= 1;
      if (!v23)
        goto LABEL_21;
    }
    v26 = v22;
    sub_1C5BFDFC4(v17, v19, v18, v22, v21, v4);
    operator delete(v26);
  }
  v27 = llvm::ReassociatePass::OptimizeExpression(this, a2, (unsigned int *)&v121, v24, v25);
  if (v27)
  {
    v28 = v27;
    if (v27 == (unsigned __int8 *)a2)
      goto LABEL_122;
    llvm::Value::doRAUW(a2, (llvm::Value *)v27, (llvm::Value *)1);
    if (v28[16] >= 0x1Cu)
    {
      v29 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
      if (v29)
      {
        v117 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
        llvm::MetadataTracking::track((uint64_t)&v117, v29, 2);
        v30 = (unsigned __int8 **)(v28 + 48);
        if (&v117 == v30)
        {
          if (v117)
            llvm::MetadataTracking::untrack((uint64_t)&v117, v117);
        }
        else
        {
          if (*v30)
            llvm::MetadataTracking::untrack((uint64_t)v30, *v30);
          v31 = v117;
          *v30 = v117;
          if (v31)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v117, v31, (uint64_t)v30);
            v117 = 0;
          }
        }
      }
    }
    v32 = (char *)this + 48;
    v33 = *((_QWORD *)this + 6);
    *(_QWORD *)&v127 = a2;
    v34 = *((_DWORD *)this + 16);
    if (v34)
    {
      v35 = v34 - 1;
      v36 = v35 & ((a2 >> 4) ^ (a2 >> 9));
      v37 = (llvm::BinaryOperator **)(v33 + 8 * v36);
      v38 = *v37;
      if (*v37 == a2)
        goto LABEL_122;
      v39 = 0;
      v40 = 1;
      while (v38 != (llvm::BinaryOperator *)-4096)
      {
        if (v39)
          v41 = 0;
        else
          v41 = v38 == (llvm::BinaryOperator *)-8192;
        if (v41)
          v39 = (uint64_t *)v37;
        v42 = v36 + v40++;
        v36 = v42 & v35;
        v37 = (llvm::BinaryOperator **)(v33 + 8 * v36);
        v38 = *v37;
        if (*v37 == a2)
          goto LABEL_122;
      }
LABEL_67:
      if (v39)
        v58 = v39;
      else
        v58 = (uint64_t *)v37;
      goto LABEL_70;
    }
    goto LABEL_151;
  }
  v43 = *((_QWORD *)a2 + 1);
  if (!v43 || *(_QWORD *)(v43 + 8))
    goto LABEL_45;
  v100 = *((unsigned __int8 *)a2 + 16);
  if (v100 == 46)
  {
    if (*(_BYTE *)(*(_QWORD *)(v43 + 24) + 16) != 42)
      goto LABEL_45;
    v107 = *((_QWORD *)v121 + 2 * v122 - 1);
    if (*(_BYTE *)(v107 + 16) != 17)
      goto LABEL_45;
    DWORD2(v127) = 64;
    *(_QWORD *)&v127 = 0xBFF0000000000000;
    llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)v118, (const llvm::APInt **)&v127);
    *((_QWORD *)&v127 + 1) = v118[0];
    v128 = v118[1];
    v129 = v119;
    v130 = v120 & 0xF;
    llvm::APFloat::convert((uint64_t)&v127, *(void **)(v107 + 32), 1, v118);
    v108 = sub_1C47ECB98(v107 + 24, (uint64_t)&v127);
    if (*((_UNKNOWN **)&v127 + 1) == &unk_1C866F1C0)
    {
      sub_1C4773C74(&v128);
    }
    else if ((*(_DWORD *)(*((_QWORD *)&v127 + 1) + 8) - 64) <= 0xFFFFFF7F && v128)
    {
      MEMORY[0x1CAA32F9C](v128, 0x1000C8000313F17);
    }
    if (!v108)
      goto LABEL_45;
    v109 = v121;
    v110 = *((_OWORD *)v121 + v122 - 1);
    LODWORD(v122) = v122 - 1;
    v127 = v110;
    goto LABEL_150;
  }
  if (v100 != 45)
    goto LABEL_45;
  if (*(_BYTE *)(*(_QWORD *)(v43 + 24) + 16) != 41)
    goto LABEL_45;
  v101 = v121;
  v102 = v122;
  v103 = (char *)v121 + 16 * v122;
  v104 = *((_QWORD *)v103 - 1);
  if (*(_BYTE *)(v104 + 16) != 16)
    goto LABEL_45;
  v105 = *(_DWORD *)(v104 + 32);
  if (!v105)
    goto LABEL_149;
  v106 = (llvm::APInt *)(v104 + 24);
  if (v105 > 0x40)
  {
    if (llvm::APInt::countTrailingOnesSlowCase(v106) != v105)
      goto LABEL_45;
LABEL_149:
    v111 = *((_QWORD *)v103 - 2);
    LODWORD(v122) = v102 - 1;
    *(_QWORD *)&v127 = v111;
    *((_QWORD *)&v127 + 1) = v104;
    v109 = v101;
LABEL_150:
    sub_1C5398E8C((unsigned int *)&v121, (uint64_t)v109, &v127);
    goto LABEL_45;
  }
  if (*(_QWORD *)v106 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v105)
    goto LABEL_149;
LABEL_45:
  v44 = v122;
  if ((_DWORD)v122 == 1)
  {
    v45 = (llvm::BinaryOperator *)*((_QWORD *)v121 + 1);
    if (v45 == a2)
      goto LABEL_122;
    llvm::Value::doRAUW(a2, v45, (llvm::Value *)1);
    v46 = *((_QWORD *)v121 + 1);
    if (v46 && *(unsigned __int8 *)(v46 + 16) >= 0x1Cu)
    {
      v47 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
      v116 = v47;
      if (v47)
        llvm::MetadataTracking::track((uint64_t)&v116, v47, 2);
      v48 = (unsigned __int8 **)(v46 + 48);
      if (&v116 == (unsigned __int8 **)(v46 + 48))
      {
        if (v116)
          llvm::MetadataTracking::untrack((uint64_t)&v116, v116);
      }
      else
      {
        if (*v48)
          llvm::MetadataTracking::untrack(v46 + 48, *v48);
        v49 = v116;
        *v48 = v116;
        if (v49)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v116, v49, v46 + 48);
          v116 = 0;
        }
      }
    }
    v32 = (char *)this + 48;
    v50 = *((_QWORD *)this + 6);
    *(_QWORD *)&v127 = a2;
    v51 = *((_DWORD *)this + 16);
    if (v51)
    {
      v52 = v51 - 1;
      v53 = v52 & ((a2 >> 4) ^ (a2 >> 9));
      v37 = (llvm::BinaryOperator **)(v50 + 8 * v53);
      v54 = *v37;
      if (*v37 == a2)
        goto LABEL_122;
      v39 = 0;
      v55 = 1;
      while (v54 != (llvm::BinaryOperator *)-4096)
      {
        if (v39)
          v56 = 0;
        else
          v56 = v54 == (llvm::BinaryOperator *)-8192;
        if (v56)
          v39 = (uint64_t *)v37;
        v57 = v53 + v55++;
        v53 = v57 & v52;
        v37 = (llvm::BinaryOperator **)(v50 + 8 * v53);
        v54 = *v37;
        if (*v37 == a2)
          goto LABEL_122;
      }
      goto LABEL_67;
    }
LABEL_151:
    v58 = 0;
LABEL_70:
    *sub_1C5BFCD34((uint64_t)v32, (uint64_t *)&v127, v58) = (uint64_t)a2;
    sub_1C5BFC974((uint64_t)this + 72, &v127);
    goto LABEL_122;
  }
  if ((v122 - 3) > 7)
    goto LABEL_121;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v63 = (char *)v121;
  v64 = (char *)this + 24 * *((unsigned __int8 *)a2 + 16) - 984;
  v114 = (uint64_t *)(v64 + 120);
  v112 = v64 + 136;
  v65 = 1;
  v66 = 1;
  do
  {
    if (v59 + 1 < (unint64_t)v122)
    {
      v67 = (char *)v121 + 16 * v59;
      v68 = *((_QWORD *)v67 + 1);
      v69 = *v114;
      v70 = *v112 - 1;
      v71 = *(_DWORD *)v67;
      v72 = v65;
      while (1)
      {
        v73 = *((_QWORD *)v121 + 2 * v72 + 1);
        if (v73 >= v68)
          v74 = *((_QWORD *)v121 + 2 * v72 + 1);
        else
          v74 = v68;
        if (v73 >= v68)
          v75 = v68;
        else
          v75 = *((_QWORD *)v121 + 2 * v72 + 1);
        if (!*v112)
          goto LABEL_102;
        v76 = ((v74 >> 4) ^ (v74 >> 9) | ((unint64_t)((v75 >> 4) ^ (v75 >> 9)) << 32))
            + ~((unint64_t)((v74 >> 4) ^ (v74 >> 9)) << 32);
        v77 = (v76 ^ (v76 >> 22)) + ~((v76 ^ (v76 >> 22)) << 13);
        v78 = (9 * (v77 ^ (v77 >> 8))) ^ ((9 * (v77 ^ (v77 >> 8))) >> 15);
        v79 = v70 & (((v78 + ~(v78 << 27)) >> 31) ^ (v78 + ~((_DWORD)v78 << 27)));
        v80 = (uint64_t *)(v69 + 72 * v79);
        v81 = *v80;
        v82 = v80[1];
        if (v75 != *v80 || v74 != v82)
          break;
LABEL_94:
        if (v80 == (uint64_t *)(*v114 + 72 * *v112) || !v80[4] || !v80[7])
          goto LABEL_102;
        v87 = *((unsigned int *)v80 + 16);
        if (v71 <= *((_DWORD *)v121 + 4 * v72))
          v88 = *((_DWORD *)v121 + 4 * v72);
        else
          v88 = v71;
        if (v87 <= v66)
          goto LABEL_105;
LABEL_107:
        v62 = v59;
        v61 = v72;
        v60 = v88;
        v66 = v87;
LABEL_108:
        if ((_DWORD)v122 == (_DWORD)++v72)
          goto LABEL_109;
      }
      v84 = 1;
      while (v81 != -4096 || v82 != -4096)
      {
        v85 = v79 + v84++;
        v79 = v85 & v70;
        v80 = (uint64_t *)(v69 + 72 * (v85 & v70));
        v81 = *v80;
        v82 = v80[1];
        if (v75 == *v80 && v74 == v82)
          goto LABEL_94;
      }
LABEL_102:
      LODWORD(v87) = 0;
      if (v71 <= *((_DWORD *)v121 + 4 * v72))
        v88 = *((_DWORD *)v121 + 4 * v72);
      else
        v88 = v71;
LABEL_105:
      if ((_DWORD)v87 != (_DWORD)v66)
        goto LABEL_108;
      v87 = v66;
      if (v88 >= v60)
        goto LABEL_108;
      goto LABEL_107;
    }
LABEL_109:
    ++v65;
    v41 = v59++ == v122 - 2;
  }
  while (!v41);
  if (v66 > 1)
  {
    v89 = v62;
    v90 = (__int128 *)((char *)v121 + 16 * v61);
    v113 = *((_OWORD *)v121 + v62);
    v115 = *v90;
    v91 = (char *)v121 + 16 * v122;
    if (v91 != (char *)(v90 + 1))
    {
      memmove(v90, v90 + 1, v91 - (char *)(v90 + 1));
      v44 = v122;
      v63 = (char *)v121;
    }
    v92 = v44 - 1;
    LODWORD(v122) = v92;
    v93 = &v63[16 * v89];
    v94 = &v63[16 * v92];
    if (v94 != v93 + 16)
    {
      memmove(v93, v93 + 16, v94 - (v93 + 16));
      v92 = v122;
    }
    v95 = (v92 - 1);
    LODWORD(v122) = v95;
    if (v95 >= HIDWORD(v122))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, (uint64_t)v123, v95 + 1, 16);
      LODWORD(v95) = v122;
    }
    *((_OWORD *)v121 + v95) = v113;
    v96 = (v122 + 1);
    LODWORD(v122) = v96;
    if (v96 >= HIDWORD(v122))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, (uint64_t)v123, v96 + 1, 16);
      LODWORD(v96) = v122;
    }
    *((_OWORD *)v121 + v96) = v115;
    LODWORD(v122) = v122 + 1;
  }
LABEL_121:
  llvm::ReassociatePass::RewriteExprTree((uint64_t)this, (llvm::UndefValue **)a2, (uint64_t)&v121);
LABEL_122:
  if (v121 != v123)
    free(v121);
  v97 = (char *)v124;
  if ((_DWORD)v125)
  {
    v98 = 24 * v125;
    do
    {
      if (*(_DWORD *)&v97[v98 - 8] >= 0x41u)
      {
        v99 = *(_QWORD *)&v97[v98 - 16];
        if (v99)
          MEMORY[0x1CAA32F9C](v99, 0x1000C8000313F17);
      }
      v98 -= 24;
    }
    while (v98);
    v97 = (char *)v124;
  }
  if (v97 != v126)
    free(v97);
}

void llvm::ReassociatePass::BuildPairMap(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  int32x2_t ****v38;
  uint64_t *v39;
  uint64_t **v40;
  uint64_t **v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t **v48;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v63;
  int v64;
  BOOL v65;
  unsigned int v67;
  int v69;
  uint64_t *v70;
  char *v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t **v75;
  uint64_t **v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  _OWORD *v80;
  unint64_t *v81;
  unint64_t v82;
  int32x2_t ****v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t *v86;
  int32x2_t ****v87;
  unint64_t v88;
  unint64_t v89;
  int32x2_t ****v90;
  int32x2_t *v91;
  unint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  int32x2_t *****v96;
  int32x2_t ****v97;
  int v98;
  int v99;
  unint64_t v100;
  int32x2_t ****v101;
  int32x2_t *v102;
  unint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  int32x2_t *****v107;
  int32x2_t ****v108;
  int v109;
  int v110;
  unint64_t v111;
  int32x2_t ****v112;
  int32x2_t *v113;
  unint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  int32x2_t *****v118;
  int32x2_t ****v119;
  int v120;
  int v121;
  unint64_t v122;
  int32x2_t ****v123;
  int32x2_t *v124;
  unint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  int32x2_t *****v129;
  int32x2_t ****v130;
  int v131;
  int v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t **v135;
  uint64_t **v136;
  unint64_t v137;
  uint64_t *v138;
  unsigned int v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  int v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v149;
  int v150;
  BOOL v151;
  unsigned int v153;
  unsigned int v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t *v163;
  int v165;
  BOOL v166;
  unsigned int v168;
  uint64_t v170;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  _DWORD *v177;
  uint64_t *v178;
  unsigned int *v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t *v182;
  int32x2_t ****v183;
  uint64_t v184;
  unint64_t *v185;
  int32x2_t ****v186;
  int v187;
  int32x2_t ****v188;
  uint64_t *v189;
  uint64_t v190;
  unint64_t *v191;
  int32x2_t ****v192;
  uint64_t v193;
  unint64_t *v194;
  int32x2_t ****v195;
  int v196;
  void *v197;
  uint64_t v198;
  _BYTE v199[512];
  uint64_t **v200;
  uint64_t *v201;
  uint64_t v202;
  void *v203;
  uint64_t v204;
  _BYTE v205[64];
  _QWORD *v206;
  unsigned int v207;
  unsigned int v208;
  _QWORD v209[10];

  v209[8] = *MEMORY[0x1E0C80C00];
  v2 = a2[1];
  v170 = *a2;
  if (v2 != *a2)
  {
    while (1)
    {
      v3 = *(_QWORD *)(v2 - 8);
      v172 = v2 - 8;
      v4 = v3 + 40;
      v5 = *(_QWORD *)(v3 + 48);
      if (v5 != v3 + 40)
        break;
LABEL_288:
      v2 = v172;
      if (v172 == v170)
        return;
    }
    v173 = v3 + 40;
    while (1)
    {
      if (v5)
        v6 = v5 - 24;
      else
        v6 = 0;
      v7 = *(unsigned __int8 *)(v6 + 16);
      switch(*(_BYTE *)(v6 + 16))
      {
        case ')':
        case '-':
          goto LABEL_9;
        case '*':
        case '.':
          if ((~*(unsigned __int8 *)(v6 + 17) & 0x12) == 0)
            goto LABEL_9;
          goto LABEL_287;
        case '+':
        case ',':
          goto LABEL_287;
        default:
          if ((v7 - 56) >= 3)
            goto LABEL_287;
LABEL_9:
          v8 = *(_QWORD *)(v6 + 8);
          if (v8 && !*(_QWORD *)(v8 + 8) && *(unsigned __int8 *)(*(_QWORD *)(v8 + 24) + 16) == v7)
            goto LABEL_287;
          v9 = *(_DWORD *)(v6 + 20);
          if ((v9 & 0x40000000) != 0)
            v10 = *(uint64_t **)(v6 - 8);
          else
            v10 = (uint64_t *)(v6 - 32 * (v9 & 0x7FFFFFF));
          v11 = 0;
          v12 = *v10;
          v13 = v10[4];
          v206 = v209;
          v208 = 8;
          v209[0] = v12;
          v209[1] = v13;
          v203 = v205;
          v204 = 0x800000000;
          v14 = 2;
          v174 = v5;
          break;
      }
      while (1)
      {
        v15 = v206;
        v16 = v206[v14 - 1];
        v17 = v14 - 1;
        v207 = v14 - 1;
        v18 = *(unsigned __int8 *)(v16 + 16);
        if (v16 && v18 >= 0x1C && v18 == *(unsigned __int8 *)(v6 + 16))
        {
          v20 = *(_QWORD *)(v16 + 8);
          if (v20)
          {
            if (!*(_QWORD *)(v20 + 8))
              break;
          }
        }
        if (v11 >= HIDWORD(v204))
        {
          v26 = v5;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v203, (uint64_t)v205, v11 + 1, 8);
          v5 = v26;
          v11 = v204;
        }
        *((_QWORD *)v203 + v11) = v16;
        v11 = v204 + 1;
        LODWORD(v204) = v204 + 1;
        v14 = v207;
        if (!v207)
          goto LABEL_46;
LABEL_29:
        if (v11 >= 0xB)
          goto LABEL_46;
      }
      v21 = *(_DWORD *)(v16 + 20);
      if ((v21 & 0x40000000) != 0)
        v22 = *(uint64_t **)(v16 - 8);
      else
        v22 = (uint64_t *)(v16 - 32 * (v21 & 0x7FFFFFF));
      v23 = *v22;
      if (*v22 != v16)
      {
        if (v17 >= v208)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v209, v14, 8);
          v5 = v174;
          v15 = v206;
          v17 = v207;
        }
        v15[v17] = v23;
        v17 = ++v207;
        v21 = *(_DWORD *)(v16 + 20);
      }
      if ((v21 & 0x40000000) != 0)
        v24 = *(_QWORD *)(v16 - 8);
      else
        v24 = v16 - 32 * (v21 & 0x7FFFFFF);
      v25 = *(_QWORD *)(v24 + 32);
      if (v25 != v16)
      {
        if (v17 >= v208)
        {
          v27 = v5;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v209, v17 + 1, 8);
          v5 = v27;
          v17 = v207;
        }
        v206[v17] = v25;
        v17 = ++v207;
      }
      v11 = v204;
      v14 = v17;
      if (v17)
        goto LABEL_29;
LABEL_46:
      if (v11 > 0xA)
        goto LABEL_282;
      v28 = 0;
      v29 = *(unsigned __int8 *)(v6 + 16);
      v197 = v199;
      v198 = 0x2000000000;
      v201 = 0;
      v202 = 0;
      v200 = &v201;
      if (v11 != 1)
        break;
LABEL_280:
      sub_1C6143384(v28);
      if (v197 != v199)
        free(v197);
LABEL_282:
      if (v203 != v205)
        free(v203);
      if (v206 != v209)
        free(v206);
      v4 = v173;
      v5 = v174;
LABEL_287:
      v5 = *(_QWORD *)(v5 + 8);
      if (v5 == v4)
        goto LABEL_288;
    }
    LODWORD(v30) = 0;
    v31 = a1 + 24 * (v29 - 41);
    v179 = (unsigned int *)(v31 + 136);
    v180 = 0;
    v32 = (_DWORD *)(v31 + 128);
    v177 = (_DWORD *)(v31 + 132);
    v178 = (uint64_t *)(v31 + 120);
    v33 = 1;
    while (1)
    {
      v30 = (v30 + 1);
      if (v11 <= v30)
      {
        v133 = v11;
        goto LABEL_278;
      }
      v176 = v30;
      v175 = v33;
      v34 = v33;
      do
      {
        v35 = *((_QWORD *)v203 + v180);
        v36 = *((_QWORD *)v203 + v34);
        if (v36 >= v35)
          v37 = (uint64_t *)*((_QWORD *)v203 + v34);
        else
          v37 = (uint64_t *)*((_QWORD *)v203 + v180);
        if (v36 >= v35)
          v38 = (int32x2_t ****)*((_QWORD *)v203 + v180);
        else
          v38 = (int32x2_t ****)*((_QWORD *)v203 + v34);
        if (v202)
        {
          v39 = v201;
          v40 = &v201;
          v41 = &v201;
          if (v201)
          {
            while (1)
            {
              while (1)
              {
                v41 = (uint64_t **)v39;
                v42 = v39[4];
                if (v42 <= (unint64_t)v38)
                  break;
LABEL_60:
                v39 = *v41;
                v40 = v41;
                if (!*v41)
                  goto LABEL_67;
              }
              if (v42 >= (unint64_t)v38)
              {
                v43 = v41[5];
                if (v43 > v37)
                  goto LABEL_60;
                if (v43 >= v37)
                  goto LABEL_212;
              }
              v39 = v41[1];
              if (!v39)
              {
                v40 = v41 + 1;
                break;
              }
            }
          }
LABEL_67:
          v44 = (uint64_t *)operator new(0x30uLL);
          v44[4] = (uint64_t)v38;
          v44[5] = (uint64_t)v37;
          *v44 = 0;
          v44[1] = 0;
          v44[2] = (uint64_t)v41;
          *v40 = v44;
          if (*v200)
          {
            v200 = (uint64_t **)*v200;
            v44 = *v40;
          }
          goto LABEL_69;
        }
        v45 = (char *)v197;
        v46 = v198;
        if ((_DWORD)v198)
        {
          v47 = 16 * v198;
          v48 = (uint64_t **)((char *)v197 + 8);
          while (*(v48 - 1) != (uint64_t *)v38 || *v48 != v37)
          {
            v48 += 2;
            v47 -= 16;
            if (!v47)
              goto LABEL_79;
          }
          if (v47)
            goto LABEL_212;
LABEL_79:
          if (v198 >= 0x20)
          {
            while (1)
            {
              v70 = v201;
              v71 = (char *)v197 + 16 * v46;
              v74 = *((_QWORD *)v71 - 2);
              v73 = v71 - 16;
              v72 = v74;
              v75 = &v201;
              v76 = &v201;
              if (v201)
                break;
LABEL_133:
              v80 = operator new(0x30uLL);
              v80[2] = *(_OWORD *)v73;
              *(_QWORD *)v80 = 0;
              *((_QWORD *)v80 + 1) = 0;
              *((_QWORD *)v80 + 2) = v76;
              *v75 = (uint64_t *)v80;
              if (*v200)
              {
                v200 = (uint64_t **)*v200;
                v80 = *v75;
              }
              sub_1C4768E74(v201, (uint64_t *)v80);
              ++v202;
              LODWORD(v46) = v198;
LABEL_136:
              LODWORD(v46) = v46 - 1;
              LODWORD(v198) = v46;
              if (!(_DWORD)v46)
              {
                v134 = v201;
                v135 = &v201;
                v136 = &v201;
                if (!v201)
                {
LABEL_225:
                  v44 = (uint64_t *)operator new(0x30uLL);
                  v44[4] = (uint64_t)v38;
                  v44[5] = (uint64_t)v37;
                  *v44 = 0;
                  v44[1] = 0;
                  v44[2] = (uint64_t)v136;
                  *v135 = v44;
                  if (*v200)
                  {
                    v200 = (uint64_t **)*v200;
                    v44 = *v135;
                  }
LABEL_69:
                  sub_1C4768E74(v201, v44);
                  ++v202;
                  goto LABEL_83;
                }
                while (2)
                {
                  while (1)
                  {
                    v136 = (uint64_t **)v134;
                    v137 = v134[4];
                    if (v137 > (unint64_t)v38)
                      break;
                    if (v137 >= (unint64_t)v38)
                    {
                      v138 = v136[5];
                      if (v138 > v37)
                        break;
                      if (v138 >= v37)
                        goto LABEL_83;
                    }
                    v134 = v136[1];
                    if (!v134)
                    {
                      v135 = v136 + 1;
                      goto LABEL_225;
                    }
                  }
                  v134 = *v136;
                  v135 = v136;
                  if (!*v136)
                    goto LABEL_225;
                  continue;
                }
              }
            }
            v77 = *((_QWORD *)v73 + 1);
            while (2)
            {
              while (1)
              {
                v76 = (uint64_t **)v70;
                v78 = v70[4];
                if (v78 > v72)
                  break;
                if (v78 >= v72)
                {
                  v79 = v76[5];
                  if ((unint64_t)v79 > v77)
                    break;
                  if ((unint64_t)v79 >= v77)
                    goto LABEL_136;
                }
                v70 = v76[1];
                if (!v70)
                {
                  v75 = v76 + 1;
                  goto LABEL_133;
                }
              }
              v70 = *v76;
              v75 = v76;
              if (!*v76)
                goto LABEL_133;
              continue;
            }
          }
        }
        if (v198 >= HIDWORD(v198))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v197, (uint64_t)v199, v198 + 1, 16);
          v45 = (char *)v197;
          v46 = v198;
        }
        v50 = &v45[16 * v46];
        *(_QWORD *)v50 = v38;
        *((_QWORD *)v50 + 1) = v37;
        LODWORD(v198) = v198 + 1;
LABEL_83:
        v181 = 4;
        v182 = 0;
        v183 = v38;
        if (v38 != (int32x2_t ****)-8192 && v38 != (int32x2_t ****)-4096 && v38)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v181);
        v184 = 4;
        v185 = 0;
        v186 = (int32x2_t ****)v37;
        if (v37 != (uint64_t *)-8192 && v37 != (uint64_t *)-4096 && v37)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v184);
        v187 = 1;
        v188 = v38;
        v189 = v37;
        v190 = 4;
        v191 = 0;
        v192 = v183;
        if (v183 != (int32x2_t ****)-8192 && v183 != (int32x2_t ****)-4096)
        {
          if (v183)
          {
            v51 = v181 & 0xFFFFFFFFFFFFFFF8;
            v191 = *(unint64_t **)(v181 & 0xFFFFFFFFFFFFFFF8);
            *(_QWORD *)v51 = &v190;
            v190 = v51 | 4;
            if (v191)
              *v191 = *v191 & 7 | (unint64_t)&v191;
          }
        }
        v193 = 4;
        v194 = 0;
        v195 = v186;
        if (v186 != (int32x2_t ****)-8192 && v186 != (int32x2_t ****)-4096)
        {
          if (v186)
          {
            v52 = v184 & 0xFFFFFFFFFFFFFFF8;
            v194 = *(unint64_t **)(v184 & 0xFFFFFFFFFFFFFFF8);
            *(_QWORD *)v52 = &v193;
            v193 = v52 | 4;
            if (v194)
              *v194 = *v194 & 7 | (unint64_t)&v194;
          }
        }
        v196 = 1;
        v53 = *v179;
        if (!*v179)
        {
          v59 = 0;
          goto LABEL_140;
        }
        v54 = ((v189 >> 4) ^ (v189 >> 9) | ((unint64_t)((v188 >> 4) ^ (v188 >> 9)) << 32))
            + ~((unint64_t)((v189 >> 4) ^ (v189 >> 9)) << 32);
        v55 = (v54 ^ (v54 >> 22)) + ~((v54 ^ (v54 >> 22)) << 13);
        v56 = (9 * (v55 ^ (v55 >> 8))) ^ ((9 * (v55 ^ (v55 >> 8))) >> 15);
        v57 = v53 - 1;
        v58 = (v53 - 1) & (((v56 + ~(v56 << 27)) >> 31) ^ (v56 + ~((_DWORD)v56 << 27)));
        v59 = *v178 + 72 * v58;
        v60 = *(_QWORD *)v59;
        v61 = *(uint64_t **)(v59 + 8);
        if (v188 != *(int32x2_t *****)v59 || v189 != v61)
        {
          v63 = 0;
          v64 = 1;
          while (v60 != -4096 || v61 != (uint64_t *)-4096)
          {
            if (v63)
              v65 = 0;
            else
              v65 = v61 == (uint64_t *)-8192;
            if (v65 && v60 == -8192)
              v63 = v59;
            v67 = v58 + v64++;
            v58 = v67 & v57;
            v59 = *v178 + 72 * (v67 & v57);
            v60 = *(_QWORD *)v59;
            v61 = *(uint64_t **)(v59 + 8);
            if (v188 == *(int32x2_t *****)v59 && v189 == v61)
              goto LABEL_122;
          }
          if (v63)
            v59 = v63;
LABEL_140:
          if (4 * *v32 + 4 >= 3 * v53)
          {
            sub_1C5BFE904(v178, 2 * v53);
            v139 = *v179;
            if (*v179)
            {
              v140 = ((v189 >> 4) ^ (v189 >> 9) | ((unint64_t)((v188 >> 4) ^ (v188 >> 9)) << 32))
                   + ~((unint64_t)((v189 >> 4) ^ (v189 >> 9)) << 32);
              v141 = (v140 ^ (v140 >> 22)) + ~((v140 ^ (v140 >> 22)) << 13);
              v142 = (9 * (v141 ^ (v141 >> 8))) ^ ((9 * (v141 ^ (v141 >> 8))) >> 15);
              v143 = ((v142 + ~(v142 << 27)) >> 31) ^ (v142 + ~((_DWORD)v142 << 27));
              v144 = v139 - 1;
              v145 = (v139 - 1) & v143;
              v59 = *v178 + 72 * v145;
              v146 = *(_QWORD *)v59;
              v147 = *(uint64_t **)(v59 + 8);
              if (v188 == *(int32x2_t *****)v59 && v189 == v147)
                goto LABEL_142;
              v149 = 0;
              v150 = 1;
              while (v146 != -4096 || v147 != (uint64_t *)-4096)
              {
                if (v149)
                  v151 = 0;
                else
                  v151 = v147 == (uint64_t *)-8192;
                if (v151 && v146 == -8192)
                  v149 = v59;
                v153 = v145 + v150++;
                v145 = v153 & v144;
                v59 = *v178 + 72 * (v153 & v144);
                v146 = *(_QWORD *)v59;
                v147 = *(uint64_t **)(v59 + 8);
                if (v188 == *(int32x2_t *****)v59 && v189 == v147)
                  goto LABEL_142;
              }
              goto LABEL_273;
            }
          }
          else
          {
            if (v53 + ~*v32 - *v177 > v53 >> 3)
              goto LABEL_142;
            sub_1C5BFE904(v178, v53);
            v155 = *v179;
            if (*v179)
            {
              v156 = ((v189 >> 4) ^ (v189 >> 9) | ((unint64_t)((v188 >> 4) ^ (v188 >> 9)) << 32))
                   + ~((unint64_t)((v189 >> 4) ^ (v189 >> 9)) << 32);
              v157 = (v156 ^ (v156 >> 22)) + ~((v156 ^ (v156 >> 22)) << 13);
              v158 = (9 * (v157 ^ (v157 >> 8))) ^ ((9 * (v157 ^ (v157 >> 8))) >> 15);
              v159 = ((v158 + ~(v158 << 27)) >> 31) ^ (v158 + ~((_DWORD)v158 << 27));
              v160 = v155 - 1;
              v161 = (v155 - 1) & v159;
              v59 = *v178 + 72 * v161;
              v162 = *(_QWORD *)v59;
              v163 = *(uint64_t **)(v59 + 8);
              if (*(int32x2_t *****)v59 == v188 && v163 == v189)
                goto LABEL_142;
              v149 = 0;
              v165 = 1;
              while (v162 != -4096 || v163 != (uint64_t *)-4096)
              {
                if (v149)
                  v166 = 0;
                else
                  v166 = v163 == (uint64_t *)-8192;
                if (v166 && v162 == -8192)
                  v149 = v59;
                v168 = v161 + v165++;
                v161 = v168 & v160;
                v59 = *v178 + 72 * (v168 & v160);
                v162 = *(_QWORD *)v59;
                v163 = *(uint64_t **)(v59 + 8);
                if (*(int32x2_t *****)v59 == v188 && v163 == v189)
                  goto LABEL_142;
              }
LABEL_273:
              if (v149)
                v59 = v149;
              goto LABEL_142;
            }
          }
          v59 = 0;
LABEL_142:
          ++*v32;
          if (*(_QWORD *)v59 != -4096 || *(_QWORD *)(v59 + 8) != -4096)
            --*v177;
          *(_QWORD *)v59 = v188;
          *(_QWORD *)(v59 + 8) = v189;
          *(_QWORD *)(v59 + 16) = 4;
          v81 = (unint64_t *)(v59 + 16);
          *(_QWORD *)(v59 + 24) = 0;
          v82 = v59 + 24;
          v83 = v192;
          *(_QWORD *)(v59 + 32) = v192;
          if (v83 != (int32x2_t ****)-8192 && v83 != (int32x2_t ****)-4096)
          {
            if (v83)
            {
              v84 = v190 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v82 = *(_QWORD *)(v190 & 0xFFFFFFFFFFFFFFF8);
              *(_QWORD *)v84 = v81;
              *v81 = v84 | 4;
              if (*(_QWORD *)v82)
                **(_QWORD **)v82 = **(_QWORD **)v82 & 7 | v82;
            }
          }
          *(_QWORD *)(v59 + 48) = 0;
          v85 = v59 + 48;
          *(_QWORD *)(v59 + 40) = 4;
          v86 = (unint64_t *)(v59 + 40);
          v87 = v195;
          *(_QWORD *)(v59 + 56) = v195;
          if (v87 != (int32x2_t ****)-8192 && v87 != (int32x2_t ****)-4096)
          {
            if (v87)
            {
              v88 = v193 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v85 = *(_QWORD *)(v193 & 0xFFFFFFFFFFFFFFF8);
              *(_QWORD *)v88 = v86;
              *v86 = v88 | 4;
              if (*(_QWORD *)v85)
                **(_QWORD **)v85 = **(_QWORD **)v85 & 7 | v85;
            }
          }
          v69 = 0;
          *(_DWORD *)(v59 + 64) = v196;
          goto LABEL_155;
        }
LABEL_122:
        v69 = 1;
LABEL_155:
        if (v195 && v195 != (int32x2_t ****)-8192 && v195 != (int32x2_t ****)-4096)
        {
          v89 = v193 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v193 & 0xFFFFFFFFFFFFFFF8) = v194;
          if (v194)
          {
            *v194 = *v194 & 7 | v89;
          }
          else
          {
            v90 = v195;
            v91 = ***v195;
            v92 = (unint64_t)v91[303];
            if (v92 <= v89)
            {
              v93 = v91[305].u32[0];
              if (v92 + 16 * v93 > v89)
              {
                v94 = v93 - 1;
                LODWORD(v95) = v94 & ((v195 >> 4) ^ (v195 >> 9));
                v96 = (int32x2_t *****)(v92 + 16 * v95);
                v97 = *v96;
                if (v195 == *v96)
                {
LABEL_166:
                  *v96 = (int32x2_t ****)-8192;
                  v91[304] = vadd_s32(v91[304], (int32x2_t)0x1FFFFFFFFLL);
                  v90 = v195;
                }
                else
                {
                  v98 = 1;
                  while (v97 != (int32x2_t ****)-4096)
                  {
                    v99 = v95 + v98++;
                    v95 = v99 & v94;
                    v97 = *(int32x2_t *****)(v92 + 16 * v95);
                    if (v195 == v97)
                    {
                      v96 = (int32x2_t *****)(v92 + 16 * v95);
                      goto LABEL_166;
                    }
                  }
                }
                *((_BYTE *)v90 + 17) &= ~1u;
              }
            }
          }
        }
        if (v192 && v192 != (int32x2_t ****)-8192 && v192 != (int32x2_t ****)-4096)
        {
          v100 = v190 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v190 & 0xFFFFFFFFFFFFFFF8) = v191;
          if (v191)
          {
            *v191 = *v191 & 7 | v100;
          }
          else
          {
            v101 = v192;
            v102 = ***v192;
            v103 = (unint64_t)v102[303];
            if (v103 <= v100)
            {
              v104 = v102[305].u32[0];
              if (v103 + 16 * v104 > v100)
              {
                v105 = v104 - 1;
                LODWORD(v106) = v105 & ((v192 >> 4) ^ (v192 >> 9));
                v107 = (int32x2_t *****)(v103 + 16 * v106);
                v108 = *v107;
                if (v192 == *v107)
                {
LABEL_180:
                  *v107 = (int32x2_t ****)-8192;
                  v102[304] = vadd_s32(v102[304], (int32x2_t)0x1FFFFFFFFLL);
                  v101 = v192;
                }
                else
                {
                  v109 = 1;
                  while (v108 != (int32x2_t ****)-4096)
                  {
                    v110 = v106 + v109++;
                    v106 = v110 & v105;
                    v108 = *(int32x2_t *****)(v103 + 16 * v106);
                    if (v192 == v108)
                    {
                      v107 = (int32x2_t *****)(v103 + 16 * v106);
                      goto LABEL_180;
                    }
                  }
                }
                *((_BYTE *)v101 + 17) &= ~1u;
              }
            }
          }
        }
        if (v186 && v186 != (int32x2_t ****)-8192 && v186 != (int32x2_t ****)-4096)
        {
          v111 = v184 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v184 & 0xFFFFFFFFFFFFFFF8) = v185;
          if (v185)
          {
            *v185 = *v185 & 7 | v111;
          }
          else
          {
            v112 = v186;
            v113 = ***v186;
            v114 = (unint64_t)v113[303];
            if (v114 <= v111)
            {
              v115 = v113[305].u32[0];
              if (v114 + 16 * v115 > v111)
              {
                v116 = v115 - 1;
                LODWORD(v117) = v116 & ((v186 >> 4) ^ (v186 >> 9));
                v118 = (int32x2_t *****)(v114 + 16 * v117);
                v119 = *v118;
                if (v186 == *v118)
                {
LABEL_194:
                  *v118 = (int32x2_t ****)-8192;
                  v113[304] = vadd_s32(v113[304], (int32x2_t)0x1FFFFFFFFLL);
                  v112 = v186;
                }
                else
                {
                  v120 = 1;
                  while (v119 != (int32x2_t ****)-4096)
                  {
                    v121 = v117 + v120++;
                    v117 = v121 & v116;
                    v119 = *(int32x2_t *****)(v114 + 16 * v117);
                    if (v186 == v119)
                    {
                      v118 = (int32x2_t *****)(v114 + 16 * v117);
                      goto LABEL_194;
                    }
                  }
                }
                *((_BYTE *)v112 + 17) &= ~1u;
              }
            }
          }
        }
        if (!v183 || v183 == (int32x2_t ****)-8192 || v183 == (int32x2_t ****)-4096)
        {
LABEL_210:
          if (!v69)
            goto LABEL_212;
LABEL_211:
          ++*(_DWORD *)(v59 + 64);
          goto LABEL_212;
        }
        v122 = v181 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v181 & 0xFFFFFFFFFFFFFFF8) = v182;
        if (!v182)
        {
          v123 = v183;
          v124 = ***v183;
          v125 = (unint64_t)v124[303];
          if (v125 <= v122)
          {
            v126 = v124[305].u32[0];
            if (v125 + 16 * v126 > v122)
            {
              v127 = v126 - 1;
              LODWORD(v128) = v127 & ((v183 >> 4) ^ (v183 >> 9));
              v129 = (int32x2_t *****)(v125 + 16 * v128);
              v130 = *v129;
              if (v183 == *v129)
              {
LABEL_208:
                *v129 = (int32x2_t ****)-8192;
                v124[304] = vadd_s32(v124[304], (int32x2_t)0x1FFFFFFFFLL);
                v123 = v183;
              }
              else
              {
                v131 = 1;
                while (v130 != (int32x2_t ****)-4096)
                {
                  v132 = v128 + v131++;
                  v128 = v132 & v127;
                  v130 = *(int32x2_t *****)(v125 + 16 * v128);
                  if (v183 == v130)
                  {
                    v129 = (int32x2_t *****)(v125 + 16 * v128);
                    goto LABEL_208;
                  }
                }
              }
              *((_BYTE *)v123 + 17) &= ~1u;
            }
          }
          goto LABEL_210;
        }
        *v182 = *v182 & 7 | v122;
        if (v69)
          goto LABEL_211;
LABEL_212:
        ++v34;
        v133 = v204;
      }
      while (v34 < v204);
      v11 = v204;
      v30 = v176;
      v33 = v175;
LABEL_278:
      ++v33;
      v180 = v30;
      if (v133 - 1 <= (unint64_t)v30)
      {
        v28 = v201;
        goto LABEL_280;
      }
    }
  }
}

void llvm::ReassociatePass::run(int32x2_t *a1@<X0>, llvm::Function *a2@<X1>, uint64_t a3@<X8>)
{
  int32x2_t *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Instruction *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int32x2_t v15;
  int32x2_t v16;
  char *v17;
  uint64_t *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int32x2_t v25;
  int32x2_t v26;
  char *v27;
  uint64_t v28;
  llvm::Instruction *v29;
  _QWORD *v30;
  __int32 v31;
  int32x2_t v32;
  __int32 v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  int64x2_t *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _OWORD *v80;
  uint64_t v81;
  uint64_t v82;
  int64x2_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t *v88;
  uint64_t v89;
  int32x2_t *v90;
  unint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t *v101;
  uint64_t v102;
  int32x2_t *v103;
  unint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  uint64_t v113;
  unint64_t v114;
  int64x2_t v116;
  int32x2_t v117;
  int32x2_t v118;
  unsigned int v119;
  __int128 __p;
  __int128 v121;
  __int128 v122;
  void *v123;
  char *v124;
  uint64_t v125;
  void *v126;
  __int128 v127;
  __int128 v128;
  char *v129;

  v117 = (int32x2_t)a2;
  v124 = 0;
  v125 = 0;
  v123 = 0;
  sub_1C5643D14((char **)&v123, (uint64_t)&v117);
  llvm::ReassociatePass::BuildRankMap((uint64_t)a1, a2, (uint64_t *)&v123);
  llvm::ReassociatePass::BuildPairMap((uint64_t)a1, (uint64_t *)&v123);
  v5 = a1 + 69;
  a1[69].i8[0] = 0;
  v7 = (char *)v123;
  v6 = v124;
  if (v124 != v123)
  {
    while (1)
    {
      v8 = *((_QWORD *)v6 - 1);
      v6 -= 8;
      v9 = v8 + 40;
      v10 = *(_QWORD *)(v8 + 48);
      while (v10 != v9)
      {
        if (v10)
          v11 = (llvm::Instruction *)(v10 - 24);
        else
          v11 = 0;
        if (*((_QWORD *)v11 + 1) || !llvm::wouldInstructionBeTriviallyDead((uint64_t)v11, 0))
        {
          llvm::ReassociatePass::OptimizeInst((llvm::ReassociatePass *)a1, v11);
          v10 = *(_QWORD *)(v10 + 8);
        }
        else
        {
          v10 = *(_QWORD *)(v10 + 8);
          llvm::ReassociatePass::EraseInst(a1, v11);
        }
      }
      v117 = 0;
      v118 = 0;
      v119 = 0;
      MEMORY[0x1CAA32FB4](0, 8);
      v12 = a1[8].u32[0];
      v119 = v12;
      if ((_DWORD)v12)
      {
        v117 = (int32x2_t)operator new(8 * v12, (std::align_val_t)8uLL);
        v118 = a1[7];
        if (v119)
        {
          v13 = 0;
          v14 = 8 * v119;
          do
          {
            *(_QWORD *)(*(_QWORD *)&v117 + v13) = *(_QWORD *)(*(_QWORD *)&a1[6] + v13);
            v13 += 8;
          }
          while (v14 != v13);
        }
      }
      else
      {
        v117 = 0;
        v118 = 0;
      }
      v121 = 0u;
      v122 = 0u;
      __p = 0u;
      v15 = a1[13];
      v16 = a1[10];
      v17 = (char *)(*(_QWORD *)&v16 + 8 * (*(_QWORD *)&v15 >> 9));
      if (*(_QWORD *)&a1[11] == *(_QWORD *)&v16)
      {
        v18 = 0;
        v21 = 0;
        v20 = (char *)(*(_QWORD *)&v16 + 8 * ((*(_QWORD *)&a1[14] + *(_QWORD *)&v15) >> 9));
      }
      else
      {
        v18 = (uint64_t *)(*(_QWORD *)v17 + 8 * (*(_QWORD *)&a1[13] & 0x1FFLL));
        v19 = *(_QWORD *)&a1[14] + *(_QWORD *)&v15;
        v20 = (char *)(*(_QWORD *)&v16 + 8 * (v19 >> 9));
        v21 = *(_QWORD *)v20 + 8 * (v19 & 0x1FF);
      }
      if ((uint64_t *)v21 == v18)
        goto LABEL_21;
      v22 = ((v21 - *(_QWORD *)v20) >> 3) + ((v20 - v17) << 6);
      v23 = (uint64_t)v18 - *(_QWORD *)v17;
      v24 = v22 - (v23 >> 3);
      if (v22 == v23 >> 3)
        goto LABEL_21;
      v40 = ((v24 + 1) & 0x1FF) != 0 ? ((unint64_t)(v24 + 1) >> 9) + 1 : (unint64_t)(v24 + 1) >> 9;
      if (v40)
      {
        v129 = (char *)&v121 + 8;
        *(_QWORD *)&v127 = operator new(8 * v40);
        *((_QWORD *)&v127 + 1) = v127;
        *(_QWORD *)&v128 = v127;
        *((_QWORD *)&v128 + 1) = v127 + 8 * v40;
        v41 = -(uint64_t)v40;
        do
        {
          v126 = operator new(0x1000uLL);
          sub_1C61A2C78((uint64_t)&v127, &v126);
        }
        while (!__CFADD__(v41++, 1));
        v43 = (_QWORD *)*((_QWORD *)&__p + 1);
        v44 = (_QWORD *)v121;
        while (v44 != v43)
        {
          sub_1C61A2DAC((const void **)&v127, --v44);
          v43 = (_QWORD *)*((_QWORD *)&__p + 1);
        }
        v45 = (void *)__p;
        v46 = *((_QWORD *)&v127 + 1);
        __p = v127;
        v121 = v128;
        if (v45)
        {
          operator delete(v45);
          v46 = *((_QWORD *)&__p + 1);
          v47 = v121;
        }
        else
        {
          v47 = v128;
        }
        v48 = *((_QWORD *)&v122 + 1);
        v49 = (uint64_t *)(v46 + 8 * ((*((_QWORD *)&v122 + 1) + (_QWORD)v122) >> 9));
        v50 = v47 == v46 ? 0 : *v49 + 8 * ((WORD4(v122) + (_WORD)v122) & 0x1FF);
      }
      else
      {
        v50 = 0;
        v48 = 0;
        v49 = 0;
      }
      v51 = *v49;
      v52 = v24 + ((v50 - *v49) >> 3);
      if (v52 < 1)
      {
        v70 = 511 - v52;
        LOWORD(v52) = ~(511 - v52);
        v53 = &v49[-(v70 >> 9)];
      }
      else
      {
        v53 = &v49[(unint64_t)v52 >> 9];
      }
      v54 = *v53 + 8 * (v52 & 0x1FF);
      if (v50 != v54)
        break;
      while (v48)
      {
LABEL_71:
        v60 = v48 - 1;
        v61 = *((_QWORD *)&__p + 1);
        v62 = v48 - 1 + v122;
        v63 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&__p + 1) + ((v62 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v62 & 0x1FF));
        if (v119)
        {
          LODWORD(v64) = ((v63 >> 4) ^ (v63 >> 9)) & (v119 - 1);
          v65 = (uint64_t *)(*(_QWORD *)&v117 + 8 * v64);
          v66 = *v65;
          if (v63 == *v65)
          {
LABEL_77:
            *v65 = -8192;
            v118 = vadd_s32(v118, (int32x2_t)0x1FFFFFFFFLL);
          }
          else
          {
            v67 = 1;
            while (v66 != -4096)
            {
              v68 = v64 + v67++;
              v64 = v68 & (v119 - 1);
              v66 = *(_QWORD *)(*(_QWORD *)&v117 + 8 * v64);
              if (v63 == v66)
              {
                v65 = (uint64_t *)(*(_QWORD *)&v117 + 8 * v64);
                goto LABEL_77;
              }
            }
          }
        }
        *((_QWORD *)&v122 + 1) = v60;
        if ((_QWORD)v121 == v61)
          v69 = 0;
        else
          v69 = (((_QWORD)v121 - v61) << 6) - 1;
        if (v69 - v62 >= 0x400)
        {
          operator delete(*(void **)(v121 - 8));
          *(_QWORD *)&v121 = v121 - 8;
        }
        if (!*(_QWORD *)(v63 + 8) && llvm::wouldInstructionBeTriviallyDead(v63, 0))
        {
          llvm::ReassociatePass::RecursivelyEraseDeadInsts(a1, v63, &v117);
          a1[69].i8[0] = 1;
        }
        v48 = *((_QWORD *)&v122 + 1);
      }
LABEL_21:
      while (a1[14])
      {
        v25 = a1[10];
        v26 = a1[11];
        v27 = (char *)(*(_QWORD *)&v25 + 8 * (*(_QWORD *)&a1[13] >> 9));
        v28 = *(_QWORD *)&a1[13] & 0x1FFLL;
        v29 = *(llvm::Instruction **)(*(_QWORD *)v27 + 8 * v28);
        if (*(_QWORD *)&v26 == *(_QWORD *)&v25)
          v30 = 0;
        else
          v30 = (_QWORD *)(*(_QWORD *)v27 + 8 * v28);
        v31 = a1[8].i32[0];
        if (v31)
        {
          v32 = a1[6];
          v33 = v31 - 1;
          LODWORD(v34) = ((*v30 >> 4) ^ (*v30 >> 9)) & (v31 - 1);
          v35 = (uint64_t *)(*(_QWORD *)&v32 + 8 * v34);
          v36 = *v35;
          if (*v30 == *v35)
          {
LABEL_31:
            *v35 = -8192;
            a1[7] = vadd_s32(a1[7], (int32x2_t)0x1FFFFFFFFLL);
          }
          else
          {
            v37 = 1;
            while (v36 != -4096)
            {
              v38 = v34 + v37++;
              v34 = v38 & v33;
              v36 = *(_QWORD *)(*(_QWORD *)&v32 + 8 * v34);
              if (*v30 == v36)
              {
                v35 = (uint64_t *)(*(_QWORD *)&v32 + 8 * v34);
                goto LABEL_31;
              }
            }
          }
        }
        if (*(_QWORD *)&v26 == *(_QWORD *)&v25)
          v39 = 0;
        else
          v39 = *(_QWORD *)v27 + 8 * v28;
        if (v30 != (_QWORD *)v39)
        {
          v113 = (uint64_t)v30 - *(_QWORD *)v27;
          v114 = v113 >> 3;
          v30 = (_QWORD *)v39;
          if (v113 >> 3 != (v39 - *(_QWORD *)v27) >> 3)
          {
            if (v113 < 1)
            {
              v27 -= 8 * ((511 - v114) >> 9);
              v30 = (_QWORD *)(*(_QWORD *)v27 + 8 * (~(511 - (_WORD)v114) & 0x1FF));
            }
            else
            {
              v27 += 8 * (v114 >> 9);
              v30 = (_QWORD *)(*(_QWORD *)v27 + (v113 & 0xFF8));
            }
          }
        }
        sub_1C5BFDB5C((uint64_t)&a1[9], v27, (uint64_t)v30);
        if (*((_QWORD *)v29 + 1) || !llvm::wouldInstructionBeTriviallyDead((uint64_t)v29, 0))
          llvm::ReassociatePass::OptimizeInst((llvm::ReassociatePass *)a1, v29);
        else
          llvm::ReassociatePass::EraseInst(a1, v29);
      }
      sub_1C484143C((uint64_t)&__p);
      MEMORY[0x1CAA32FB4](*(_QWORD *)&v117, 8);
      if (v6 == v7)
        goto LABEL_93;
    }
    do
    {
      v55 = (_QWORD *)(v51 + 4096);
      if (v49 == v53)
        v55 = (_QWORD *)v54;
      if ((_QWORD *)v50 == v55)
      {
        v55 = (_QWORD *)v50;
      }
      else
      {
        v56 = (_QWORD *)v50;
        do
        {
          v57 = *v18++;
          *v56++ = v57;
          if ((uint64_t *)((char *)v18 - *(_QWORD *)v17) == (uint64_t *)4096)
          {
            v58 = (uint64_t *)*((_QWORD *)v17 + 1);
            v17 += 8;
            v18 = v58;
          }
        }
        while (v56 != v55);
      }
      v48 += ((uint64_t)v55 - v50) >> 3;
      if (v49 == v53)
        break;
      v59 = v49[1];
      ++v49;
      v51 = v59;
      v50 = v59;
    }
    while (v59 != v54);
    *((_QWORD *)&v122 + 1) = v48;
    if (!v48)
      goto LABEL_21;
    goto LABEL_71;
  }
LABEL_93:
  sub_1C4ECAD30(a1);
  sub_1C5015F50(&a1[3]);
  v71 = (uint64_t)&a1[15];
  v116 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    v72 = *(_DWORD *)(v71 + 8);
    if (v72 || *(_DWORD *)(v71 + 12))
    {
      v73 = *(_DWORD *)(v71 + 16);
      if (v73 <= 4 * v72 || v73 < 0x41)
      {
        if (v73)
        {
          v83 = *(int64x2_t **)v71;
          v84 = *(_QWORD *)v71 + 72 * v73;
          do
          {
            v85 = v83->i64[1];
            if (v83->i64[0] != -4096 || v85 != -4096)
            {
              if (v83->i64[0] != -8192 || v85 != -8192)
              {
                v86 = v83[3].i64[1];
                if (v86 && v86 != -8192 && v86 != -4096)
                {
                  v87 = v83[2].i64[1] & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v87 = v83[3].i64[0];
                  v88 = (unint64_t *)v83[3].i64[0];
                  if (v88)
                  {
                    *v88 = *v88 & 7 | v87;
                  }
                  else
                  {
                    v89 = v83[3].i64[1];
                    v90 = ***(int32x2_t ****)v89;
                    v91 = (unint64_t)v90[303];
                    if (v91 <= v87)
                    {
                      v92 = v90[305].u32[0];
                      if (v91 + 16 * v92 > v87)
                      {
                        v93 = v92 - 1;
                        LODWORD(v94) = v93 & ((v89 >> 4) ^ (v89 >> 9));
                        v95 = (uint64_t *)(v91 + 16 * v94);
                        v96 = *v95;
                        if (v89 == *v95)
                        {
LABEL_134:
                          *v95 = -8192;
                          v90[304] = vadd_s32(v90[304], (int32x2_t)0x1FFFFFFFFLL);
                          v89 = v83[3].i64[1];
                        }
                        else
                        {
                          v97 = 1;
                          while (v96 != -4096)
                          {
                            v98 = v94 + v97++;
                            v94 = v98 & v93;
                            v96 = *(_QWORD *)(v91 + 16 * v94);
                            if (v89 == v96)
                            {
                              v95 = (uint64_t *)(v91 + 16 * v94);
                              goto LABEL_134;
                            }
                          }
                        }
                        *(_BYTE *)(v89 + 17) &= ~1u;
                      }
                    }
                  }
                }
                v99 = v83[2].i64[0];
                if (v99 && v99 != -8192 && v99 != -4096)
                {
                  v100 = v83[1].i64[0] & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v100 = v83[1].i64[1];
                  v101 = (unint64_t *)v83[1].i64[1];
                  if (v101)
                  {
                    *v101 = *v101 & 7 | v100;
                  }
                  else
                  {
                    v102 = v83[2].i64[0];
                    v103 = ***(int32x2_t ****)v102;
                    v104 = (unint64_t)v103[303];
                    if (v104 <= v100)
                    {
                      v105 = v103[305].u32[0];
                      if (v104 + 16 * v105 > v100)
                      {
                        v106 = v105 - 1;
                        LODWORD(v107) = v106 & ((v102 >> 4) ^ (v102 >> 9));
                        v108 = (uint64_t *)(v104 + 16 * v107);
                        v109 = *v108;
                        if (v102 == *v108)
                        {
LABEL_148:
                          *v108 = -8192;
                          v103[304] = vadd_s32(v103[304], (int32x2_t)0x1FFFFFFFFLL);
                          v102 = v83[2].i64[0];
                        }
                        else
                        {
                          v110 = 1;
                          while (v109 != -4096)
                          {
                            v111 = v107 + v110++;
                            v107 = v111 & v106;
                            v109 = *(_QWORD *)(v104 + 16 * v107);
                            if (v102 == v109)
                            {
                              v108 = (uint64_t *)(v104 + 16 * v107);
                              goto LABEL_148;
                            }
                          }
                        }
                        *(_BYTE *)(v102 + 17) &= ~1u;
                      }
                    }
                  }
                }
              }
              v83->i64[0] = -4096;
              v83->i64[1] = -4096;
            }
            v83 = (int64x2_t *)((char *)v83 + 72);
          }
          while (v83 != (int64x2_t *)v84);
        }
        *(_QWORD *)(v71 + 8) = 0;
      }
      else
      {
        sub_1C5A556F4(v71);
        v74 = 1 << (33 - __clz(v72 - 1));
        if (v74 <= 64)
          v74 = 64;
        if (v72)
          v75 = v74;
        else
          v75 = 0;
        if ((_DWORD)v75 == *(_DWORD *)(v71 + 16))
        {
          *(_QWORD *)(v71 + 8) = 0;
          if ((_DWORD)v75)
          {
            v76 = *(int64x2_t **)v71;
            v77 = 72 * v75;
            do
            {
              *v76 = v116;
              v76 = (int64x2_t *)((char *)v76 + 72);
              v77 -= 72;
            }
            while (v77);
          }
        }
        else
        {
          MEMORY[0x1CAA32FB4](*(_QWORD *)v71, 8);
          if ((_DWORD)v75)
          {
            v78 = (4 * (int)v75 / 3u + 1) | ((unint64_t)(4 * (int)v75 / 3u + 1) >> 1) | (((4 * (int)v75 / 3u + 1) | ((unint64_t)(4 * (int)v75 / 3u + 1) >> 1)) >> 2);
            v79 = v78 | (v78 >> 4) | ((v78 | (v78 >> 4)) >> 8);
            LODWORD(v79) = ((v79 >> 16) | v79) + 1;
            *(_DWORD *)(v71 + 16) = v79;
            v80 = operator new(72 * v79, (std::align_val_t)8uLL);
            *(_QWORD *)v71 = v80;
            *(_QWORD *)(v71 + 8) = 0;
            v81 = *(unsigned int *)(v71 + 16);
            if ((_DWORD)v81)
            {
              v82 = 72 * v81;
              do
              {
                *v80 = v116;
                v80 = (_OWORD *)((char *)v80 + 72);
                v82 -= 72;
              }
              while (v82);
            }
          }
          else
          {
            *(_QWORD *)v71 = 0;
            *(_QWORD *)(v71 + 8) = 0;
            *(_DWORD *)(v71 + 16) = 0;
          }
        }
      }
    }
    v71 += 24;
  }
  while ((int32x2_t *)v71 != v5);
  v112 = v5->u8[0];
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if (v112)
    sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::CFGAnalyses::SetKey);
  else
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  if (v123)
  {
    v124 = (char *)v123;
    operator delete(v123);
  }
}

uint64_t sub_1C5BFAF30(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Reassociate expressions";
  *(_QWORD *)(v2 + 8) = 23;
  *(_QWORD *)(v2 + 16) = "reassociate";
  *(_QWORD *)(v2 + 24) = 11;
  *(_QWORD *)(v2 + 32) = &unk_1ED8226E8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5BFC6B4;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5BFAFC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v7;
  _QWORD *v8;
  _QWORD v9[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED8226E8;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8197218;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  v2 = 152;
  *(_OWORD *)(a1 + 136) = 0u;
  do
  {
    v3 = a1 + v2;
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_DWORD *)(v3 + 16) = 0;
    v2 += 24;
  }
  while (v2 != 584);
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v7 = qword_1ED830BC0[0];
  v5 = atomic_load(&qword_1ED8226F0);
  if (v5 != -1)
  {
    v9[0] = sub_1C5BFAF30;
    v9[1] = &v7;
    v8 = v9;
    std::__call_once(&qword_1ED8226F0, &v8, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

unint64_t sub_1C5BFB0CC(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 24 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C6323DB8(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C6323DB8(a1, v5);
    }
  }
  return a2;
}

uint64_t sub_1C5BFB134(uint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(result + 24 * v5);
    v7 = *v6;
    if (*v6 != a3)
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(result + 24 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_7;
      }
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_7:
  *a4 = v6;
  return result;
}

uint64_t *sub_1C5BFB1B4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  BOOL v14;
  unsigned int v15;
  uint64_t *v16;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    sub_1C5BFB2E8((uint64_t *)a1, 2 * v6);
    v7 = *a2;
    v8 = *(_DWORD *)(a1 + 16) - 1;
    v9 = ((*a2 >> 4) ^ (*a2 >> 9)) & v8;
    a3 = (uint64_t *)(*(_QWORD *)a1 + 24 * v9);
    v10 = *a3;
    if (*a2 == *a3)
      goto LABEL_10;
    v11 = 0;
    v12 = 1;
    while (v10 != -4096)
    {
      if (v11)
        v14 = 0;
      else
        v14 = v10 == -8192;
      if (v14)
        v11 = a3;
      v15 = v9 + v12++;
      v9 = v15 & v8;
      a3 = (uint64_t *)(*(_QWORD *)a1 + 24 * v9);
      v10 = *a3;
      if (v7 == *a3)
        goto LABEL_10;
    }
    if (v11)
      a3 = v11;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
    sub_1C5BFB2E8((uint64_t *)a1, v6);
    v16 = 0;
    sub_1C5BFB134(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v16);
    a3 = v16;
  }
  v7 = *a3;
LABEL_10:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C5BFB2E8(uint64_t *a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *((_DWORD *)a1 + 4);
  v4 = (uint64_t *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = -4096;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
    if (v3)
    {
      v12 = v4;
      do
      {
        v13 = *v12;
        if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v14 = *((_DWORD *)a1 + 4) - 1;
          v15 = v14 & ((v13 >> 4) ^ (v13 >> 9));
          v16 = *a1 + 24 * v15;
          v17 = *(_QWORD *)v16;
          if (v13 != *(_QWORD *)v16)
          {
            v18 = 0;
            v19 = 1;
            while (v17 != -4096)
            {
              if (v18)
                v20 = 0;
              else
                v20 = v17 == -8192;
              if (v20)
                v18 = v16;
              v21 = v15 + v19++;
              v15 = v21 & v14;
              v16 = *a1 + 24 * (v21 & v14);
              v17 = *(_QWORD *)v16;
              if (v13 == *(_QWORD *)v16)
                goto LABEL_23;
            }
            if (v18)
              v16 = v18;
          }
LABEL_23:
          *(_QWORD *)v16 = v13;
          *(_DWORD *)(v16 + 16) = *((_DWORD *)v12 + 4);
          *(_QWORD *)(v16 + 8) = v12[1];
          *((_DWORD *)v12 + 4) = 0;
          ++*((_DWORD *)a1 + 2);
        }
        v12 += 3;
      }
      while (v12 != &v4[3 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v22 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v22)
  {
    v23 = 24 * v22;
    do
    {
      *result = -4096;
      result += 3;
      v23 -= 24;
    }
    while (v23);
  }
  return result;
}

void sub_1C5BFB480(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 24, &v5);
  sub_1C4EF7514(a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

llvm::Value *sub_1C5BFB4F0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;
  llvm::Value *result;

  if ((*(_DWORD *)(*a1 + 8) & 0xFE) == 0x12)
    v6 = *(unsigned __int8 *)(**(_QWORD **)(*a1 + 16) + 8);
  else
    v6 = *(_DWORD *)(*a1 + 8);
  if (v6 == 13)
    return llvm::BinaryOperator::Create(13, a1, a2, a3, a4);
  result = llvm::BinaryOperator::Create(14, a1, a2, a3, a4);
  *((_BYTE *)result + 17) |= *(_BYTE *)(a5 + 17) & 0xFE;
  return result;
}

void sub_1C5BFB578(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5, __n128 a6)
{
  __n128 *v7;
  unsigned __int32 v8;
  __n128 *v10;
  uint64_t v11;
  __n128 *v12;
  unsigned __int32 v13;
  unsigned __int32 v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __n128 *v20;
  unint64_t v21;
  __n128 *v22;
  unint64_t v23;
  __n128 v24;
  __n128 *v25;
  __n128 *v26;
  __n128 *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __n128 *v31;
  unint64_t v32;
  uint64_t v33;
  __n128 *v34;
  unint64_t v35;
  __n128 v36;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      if (a2[-1].n128_u32[2] > a1->n128_u32[2])
      {
        v36 = *a1;
        v8 = a2[-1].n128_u32[2];
        a1->n128_u64[0] = a2[-1].n128_u64[0];
        a1->n128_u32[2] = v8;
        a2[-1].n128_u64[0] = v36.n128_u64[0];
        a2[-1].n128_u32[2] = v36.n128_u32[2];
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v20 = a4;
      v21 = a3 >> 1;
      v22 = &a1[a3 >> 1];
      v23 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v24 = sub_1C5BFB7F8(a1, v22, v23, a4, a6);
        v25 = &v20[v21];
        sub_1C5BFB7F8(&v7[a3 >> 1], a2, a3 - (a3 >> 1), v25, v24);
        v26 = &v20[a3];
        v27 = v25;
        while (v27 != v26)
        {
          if (v27->n128_u32[2] <= v20->n128_u32[2])
          {
            v29 = v20->n128_u64[0];
            v7->n128_u32[2] = v20->n128_u32[2];
            v7->n128_u64[0] = v29;
            ++v20;
          }
          else
          {
            v28 = v27->n128_u64[0];
            v7->n128_u32[2] = v27->n128_u32[2];
            v7->n128_u64[0] = v28;
            ++v27;
          }
          ++v7;
          if (v20 == v25)
          {
            if (v27 != v26)
            {
              v30 = 0;
              do
              {
                v31 = &v7[v30];
                v32 = v27[v30].n128_u64[0];
                v31->n128_u32[2] = v27[v30].n128_u32[2];
                v31->n128_u64[0] = v32;
                ++v30;
              }
              while (&v27[v30] != v26);
            }
            return;
          }
        }
        if (v20 != v25)
        {
          v33 = 0;
          do
          {
            v34 = &v7[v33];
            v35 = v20[v33].n128_u64[0];
            v34->n128_u32[2] = v20[v33].n128_u32[2];
            v34->n128_u64[0] = v35;
            ++v33;
          }
          while (&v20[v33] != v25);
        }
      }
      else
      {
        sub_1C5BFB578(a1, v22, v23, a4, a5);
        sub_1C5BFB578(&v7[a3 >> 1], a2, a3 - (a3 >> 1), v20, a5);
        sub_1C5BFBA08((char *)v7, (char *)&v7[a3 >> 1], (char *)a2, a3 >> 1, a3 - (a3 >> 1), (char *)v20, a5);
      }
    }
    else if (a1 != a2)
    {
      v10 = a1 + 1;
      if (&a1[1] != a2)
      {
        v11 = 0;
        v12 = a1;
        do
        {
          v13 = v12[1].n128_u32[2];
          v14 = v12->n128_u32[2];
          v12 = v10;
          if (v13 > v14)
          {
            v15 = v10->n128_u64[0];
            v16 = v11;
            while (1)
            {
              v17 = (char *)a1 + v16;
              *((_QWORD *)v17 + 2) = *(unint64_t *)((char *)a1->n128_u64 + v16);
              *((_DWORD *)v17 + 6) = *(unsigned __int32 *)((char *)&a1->n128_u32[2] + v16);
              if (!v16)
                break;
              v16 -= 16;
              if (v13 <= *((_DWORD *)v17 - 2))
              {
                v18 = (uint64_t)&a1[1] + v16;
                goto LABEL_15;
              }
            }
            v18 = (uint64_t)a1;
LABEL_15:
            *(_QWORD *)v18 = v15;
            *(_DWORD *)(v18 + 8) = v13;
          }
          v10 = v12 + 1;
          v11 += 16;
        }
        while (&v12[1] != a2);
      }
    }
  }
}

__n128 sub_1C5BFB7F8(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, __n128 result)
{
  __n128 *v5;
  __n128 *v8;
  __n128 *v9;
  __n128 *v10;
  uint64_t v11;
  __n128 *v12;
  __n128 *v13;
  __n128 *v14;
  __n128 *v15;
  uint64_t v16;
  unint64_t v17;
  __n128 *v18;
  __n128 *v19;
  __n128 v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;

  if (a3)
  {
    v5 = a4;
    v8 = a1;
    if (a3 == 2)
    {
      v9 = a2 - 1;
      if (a2[-1].n128_u32[2] <= a1->n128_u32[2])
      {
        *a4 = *a1;
        result = *v9;
      }
      else
      {
        *a4 = *v9;
        result = *a1;
      }
      a4[1] = result;
    }
    else if (a3 == 1)
    {
      result = *a1;
      *a4 = *a1;
    }
    else if ((uint64_t)a3 > 8)
    {
      v18 = &a1[a3 >> 1];
      sub_1C5BFB578(a1, v18, a3 >> 1, a4, a3 >> 1);
      sub_1C5BFB578(&v8[a3 >> 1], a2, a3 - (a3 >> 1), &v5[a3 >> 1], a3 - (a3 >> 1));
      v19 = &v8[a3 >> 1];
      while (v19 != a2)
      {
        if (v19->n128_u32[2] <= v8->n128_u32[2])
        {
          v21 = *v8++;
          result = v21;
        }
        else
        {
          v20 = *v19++;
          result = v20;
        }
        *v5++ = result;
        if (v8 == v18)
        {
          if (v19 != a2)
          {
            v22 = 0;
            do
            {
              result = v19[v22];
              v5[v22++] = result;
            }
            while (&v19[v22] != a2);
          }
          return result;
        }
      }
      if (v8 != v18)
      {
        v23 = 0;
        do
        {
          result = v8[v23];
          v5[v23++] = result;
        }
        while (&v8[v23] != v18);
      }
    }
    else if (a1 != a2)
    {
      result = *a1;
      *a4 = *a1;
      v10 = a1 + 1;
      if (&a1[1] != a2)
      {
        v11 = 0;
        v12 = a4;
        do
        {
          v13 = v10;
          v14 = v12 + 1;
          if (v8[1].n128_u32[2] <= v12->n128_u32[2])
          {
            result = *v10;
            *v14 = *v10;
          }
          else
          {
            result = *v12;
            *v14 = *v12;
            v15 = a4;
            if (v12 != a4)
            {
              v16 = v11;
              while (1)
              {
                v15 = (__n128 *)((char *)a4 + v16);
                if (v8[1].n128_u32[2] <= *(unsigned __int32 *)((char *)&a4->n128_u32[-2] + v16))
                  break;
                v15->n128_u64[0] = v15[-1].n128_u64[0];
                v15->n128_u32[2] = v15[-1].n128_u32[2];
                v16 -= 16;
                if (!v16)
                {
                  v15 = a4;
                  break;
                }
              }
            }
            v17 = v13->n128_u64[0];
            v15->n128_u32[2] = v13->n128_u32[2];
            v15->n128_u64[0] = v17;
          }
          v10 = v13 + 1;
          v11 += 16;
          v12 = v14;
          v8 = v13;
        }
        while (&v13[1] != a2);
      }
    }
  }
  return result;
}

char *sub_1C5BFBA08(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  unsigned int v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  unsigned int v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  __int128 v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  unsigned int v64;
  unsigned int v65;
  BOOL v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;

  if (a5)
  {
    v7 = a5;
    while (a4 > a7 && v7 > a7)
    {
      if (!a4)
        return result;
      v9 = 0;
      v10 = -a4;
      while (1)
      {
        v11 = &result[v9];
        if (*((_DWORD *)a2 + 2) > *(_DWORD *)&result[v9 + 8])
          break;
        v9 += 16;
        if (__CFADD__(v10++, 1))
          return result;
      }
      v13 = -v10;
      if (-v10 >= v7)
      {
        if (v10 == -1)
        {
          v73 = &result[v9];
          v85 = *(_OWORD *)v73;
          v74 = *(_QWORD *)a2;
          *((_DWORD *)v73 + 2) = *((_DWORD *)a2 + 2);
          *(_QWORD *)v73 = v74;
          *((_DWORD *)a2 + 2) = DWORD2(v85);
          *(_QWORD *)a2 = v85;
          return result;
        }
        if (v10 > 0)
          v13 = 1 - v10;
        v23 = v13 >> 1;
        v17 = &result[16 * (v13 >> 1) + v9];
        v16 = a3;
        if (a3 != a2)
        {
          v24 = (a3 - a2) >> 4;
          v16 = a2;
          do
          {
            v25 = v24 >> 1;
            v26 = &v16[16 * (v24 >> 1)];
            v27 = *((_DWORD *)v26 + 2);
            v28 = v26 + 16;
            v24 += ~(v24 >> 1);
            if (v27 > *((_DWORD *)v17 + 2))
              v16 = v28;
            else
              v24 = v25;
          }
          while (v24);
        }
        v15 = (v16 - a2) >> 4;
      }
      else
      {
        if (v7 >= 0)
          v14 = v7;
        else
          v14 = v7 + 1;
        v15 = v14 >> 1;
        v16 = &a2[16 * (v14 >> 1)];
        v17 = a2;
        if (v11 != a2)
        {
          v18 = (a2 - result - v9) >> 4;
          v17 = &result[v9];
          do
          {
            v19 = v18 >> 1;
            v20 = &v17[16 * (v18 >> 1)];
            v21 = *((_DWORD *)v20 + 2);
            v22 = v20 + 16;
            v18 += ~(v18 >> 1);
            if (*((_DWORD *)v16 + 2) > v21)
              v18 = v19;
            else
              v17 = v22;
          }
          while (v18);
        }
        v23 = (v17 - result - v9) >> 4;
      }
      v29 = v16;
      if (v17 != a2)
      {
        v29 = v17;
        if (a2 != v16)
        {
          if (v17 + 16 == a2)
          {
            v83 = *(_OWORD *)v17;
            v35 = v16 - a2;
            v78 = v23;
            v80 = a3;
            v36 = a6;
            v37 = v15;
            v38 = a7;
            memmove(v17, a2, v16 - a2 - 4);
            a7 = v38;
            v23 = v78;
            a3 = v80;
            v15 = v37;
            a6 = v36;
            v29 = &v17[v35];
            *(_QWORD *)v29 = v83;
            *((_DWORD *)v29 + 2) = DWORD2(v83);
          }
          else if (a2 + 16 == v16)
          {
            v29 = v17 + 16;
            v84 = *((_OWORD *)v16 - 1);
            if (v16 - 16 != v17)
            {
              v79 = v23;
              v81 = a3;
              v39 = a6;
              v40 = v15;
              v41 = a7;
              memmove(v17 + 16, v17, v16 - 16 - v17 - 4);
              a7 = v41;
              v23 = v79;
              a3 = v81;
              v15 = v40;
              a6 = v39;
            }
            *((_DWORD *)v17 + 2) = DWORD2(v84);
            *(_QWORD *)v17 = v84;
          }
          else
          {
            v30 = (a2 - v17) >> 4;
            if (v30 == (v16 - a2) >> 4)
            {
              v31 = 0;
              do
              {
                v32 = &a2[v31];
                v33 = &v17[v31];
                v82 = *(_OWORD *)&v17[v31];
                v34 = *(_QWORD *)&a2[v31];
                *((_DWORD *)v33 + 2) = *(_DWORD *)&a2[v31 + 8];
                *(_QWORD *)v33 = v34;
                *((_DWORD *)v32 + 2) = DWORD2(v82);
                *(_QWORD *)v32 = v82;
                if (&v17[v31 + 16] == a2)
                  break;
                v31 += 16;
              }
              while (v32 + 16 != v16);
              v29 = a2;
            }
            else
            {
              v42 = (v16 - a2) >> 4;
              v43 = (a2 - v17) >> 4;
              do
              {
                v44 = v43;
                v43 = v42;
                v42 = v44 % v42;
              }
              while (v42);
              if (v43)
              {
                v45 = &v17[16 * v43];
                do
                {
                  v46 = *((_OWORD *)v45 - 1);
                  v45 -= 16;
                  v47 = &v45[16 * v30];
                  v48 = v45;
                  do
                  {
                    v49 = v48;
                    v48 = v47;
                    v50 = *(_QWORD *)v47;
                    *((_DWORD *)v49 + 2) = *((_DWORD *)v48 + 2);
                    *(_QWORD *)v49 = v50;
                    v47 = &v17[16 * (v30 - ((v16 - v48) >> 4))];
                    if (v30 < (v16 - v48) >> 4)
                      v47 = &v48[16 * v30];
                  }
                  while (v47 != v45);
                  *((_DWORD *)v48 + 2) = DWORD2(v46);
                  *(_QWORD *)v48 = v46;
                }
                while (v45 != v17);
              }
              v29 = &v17[16 * ((v16 - a2) >> 4)];
            }
          }
        }
      }
      a4 = -(v23 + v10);
      v51 = v7 - v15;
      if (v23 + v15 >= v7 - (v23 + v15) - v10)
      {
        v56 = -(v23 + v10);
        v57 = v15;
        v58 = v51;
        v59 = a6;
        v60 = a7;
        sub_1C5BFBA08(v29, v16, a3, v56, v58);
        a7 = v60;
        a6 = v59;
        v16 = v17;
        v51 = v57;
        a4 = v23;
        a3 = v29;
      }
      else
      {
        v52 = a3;
        v53 = v23;
        v54 = a6;
        v55 = a7;
        sub_1C5BFBA08(v11, v17, v29, v53, v15);
        a7 = v55;
        a3 = v52;
        a6 = v54;
        v11 = v29;
      }
      v7 = v51;
      result = v11;
      a2 = v16;
      if (!v51)
        return result;
    }
    if (a4 <= v7)
    {
      if (result != a2)
      {
        v69 = 0;
        do
        {
          *(_OWORD *)&a6[v69] = *(_OWORD *)&result[v69];
          v69 += 16;
        }
        while (&result[v69] != a2);
        if (v69)
        {
          v70 = a6;
          while (a2 != a3)
          {
            if (*((_DWORD *)a2 + 2) <= *((_DWORD *)v70 + 2))
            {
              v72 = *(_QWORD *)v70;
              *((_DWORD *)result + 2) = *((_DWORD *)v70 + 2);
              *(_QWORD *)result = v72;
              v70 += 16;
            }
            else
            {
              v71 = *(_QWORD *)a2;
              *((_DWORD *)result + 2) = *((_DWORD *)a2 + 2);
              *(_QWORD *)result = v71;
              a2 += 16;
            }
            result += 16;
            if (&a6[v69] == v70)
              return result;
          }
          return (char *)memmove(result, v70, a6 - v70 + v69 - 4);
        }
      }
    }
    else if (a2 != a3)
    {
      v61 = 0;
      do
      {
        *(_OWORD *)&a6[v61] = *(_OWORD *)&a2[v61];
        v61 += 16;
      }
      while (&a2[v61] != a3);
      if (v61)
      {
        v62 = &a6[v61];
        v63 = a3 - 16;
        while (a2 != result)
        {
          v64 = *((_DWORD *)v62 - 2);
          v65 = *((_DWORD *)a2 - 2);
          v66 = v64 > v65;
          if (v64 <= v65)
            v67 = v62 - 16;
          else
            v67 = a2 - 16;
          if (v66)
            a2 -= 16;
          else
            v62 -= 16;
          v68 = *(_QWORD *)v67;
          *((_DWORD *)v63 + 2) = *((_DWORD *)v67 + 2);
          *(_QWORD *)v63 = v68;
          v63 -= 16;
          if (v62 == a6)
            return result;
        }
        if (v62 != a6)
        {
          v75 = 0;
          do
          {
            v76 = &v63[v75];
            v77 = *(_QWORD *)&v62[v75 - 16];
            *((_DWORD *)v76 + 2) = *(_DWORD *)&v62[v75 - 8];
            *(_QWORD *)v76 = v77;
            v75 -= 16;
          }
          while (&v62[v75] != a6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C5BFBF78(uint64_t ***a1, llvm::Type *a2, uint64_t a3, uint64_t a4, llvm::Type *a5)
{
  llvm::Constant *v8;
  llvm::Value **NullValue;
  llvm::Constant *v10;
  llvm::ValueHandleBase *v11;
  llvm::Value *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  llvm::ValueHandleBase **v32;
  llvm::ValueHandleBase *v33;
  int v34;
  int v35;
  uint64_t **v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  llvm::Constant **v43;
  int v44;
  llvm::Constant **v45;
  llvm::ValueHandleBase *v46;
  char *v47;
  uint64_t **v48;
  _QWORD *v49;
  int v50;
  int v51;
  unsigned int v52;
  uint64_t *v53;
  llvm::Value *v54;
  uint64_t *v55;
  int v56;
  BOOL v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  int v68;
  llvm::Instruction *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t ****v75;
  uint64_t ***v76;
  int v77;
  int v78;
  uint64_t ***v79;
  char *v80;
  uint64_t **v81;
  uint64_t **v82;
  llvm::Value *v83;
  int v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  int v88;
  BOOL v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  int v95;
  BOOL v96;
  unsigned int v97;
  uint64_t *v98;
  void *v99;
  uint64_t **v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  _QWORD v105[3];

  v105[2] = *MEMORY[0x1E0C80C00];
  if (a1 && *((unsigned __int8 *)a1 + 16) <= 0x14u)
  {
    v8 = (llvm::Constant *)*a1;
    if (((_DWORD)(*a1)[1] & 0xFE) == 0x12)
    {
      if (*(unsigned __int8 *)(**((_QWORD **)v8 + 2) + 8) >= 7u)
        goto LABEL_5;
    }
    else if (*((_DWORD *)*a1 + 2) > 6u)
    {
LABEL_5:
      NullValue = llvm::Constant::getNullValue(v8, a2);
      v11 = llvm::ConstantFoldBinaryInstruction((llvm *)0xF, (llvm::Constant *)NullValue, (llvm::Constant *)a1, v10);
      if (!v11)
      {
        v12 = *NullValue;
        if (*NullValue)
        {
          v105[0] = NullValue;
          v105[1] = a1;
          v13 = **(_QWORD **)v12 + 1512;
          LODWORD(v99) = 15;
          v100 = (uint64_t **)v105;
          v101 = 2;
          v102 = 0u;
          v103 = 0u;
          v104 = 0;
          return sub_1C537D4FC(v13, (uint64_t)v12, (unsigned __int8 *)&v99);
        }
        else
        {
          return 0;
        }
      }
      return (uint64_t)v11;
    }
    return llvm::ConstantExpr::get((llvm::ConstantExpr *)0xC, (unsigned __int8 *)a1, 0, 0, a5);
  }
  v14 = sub_1C5BF17BC((uint64_t)a1, 13, 14);
  if (v14)
  {
    v11 = (llvm::ValueHandleBase *)v14;
    v15 = (uint64_t *)(v14 - 64);
    v16 = sub_1C5BFBF78(*(_QWORD *)(v14 - 64), a2, a3);
    if (*v15)
    {
      **((_QWORD **)v11 - 6) = *((_QWORD *)v11 - 7);
      v17 = *((_QWORD *)v11 - 7);
      if (v17)
        *(_QWORD *)(v17 + 16) = *((_QWORD *)v11 - 6);
    }
    *v15 = v16;
    if (v16)
    {
      v20 = *(_QWORD *)(v16 + 8);
      v18 = (uint64_t **)(v16 + 8);
      v19 = v20;
      *((_QWORD *)v11 - 7) = v20;
      if (v20)
        *(_QWORD *)(v19 + 16) = (char *)v11 - 56;
      *((_QWORD *)v11 - 6) = v18;
      *v18 = v15;
    }
    v21 = (uint64_t *)((char *)v11 - 32);
    v22 = sub_1C5BFBF78(*((_QWORD *)v11 - 4), a2, a3);
    if (*((_QWORD *)v11 - 4))
    {
      **((_QWORD **)v11 - 2) = *((_QWORD *)v11 - 3);
      v23 = *((_QWORD *)v11 - 3);
      if (v23)
        *(_QWORD *)(v23 + 16) = *((_QWORD *)v11 - 2);
    }
    *v21 = v22;
    if (v22)
    {
      v26 = *(_QWORD *)(v22 + 8);
      v24 = (uint64_t **)(v22 + 8);
      v25 = v26;
      *((_QWORD *)v11 - 3) = v26;
      if (v26)
        *(_QWORD *)(v25 + 16) = (char *)v11 - 24;
      *((_QWORD *)v11 - 2) = v24;
      *v24 = v21;
    }
    if (*((_BYTE *)v11 + 16) == 41)
      *((_BYTE *)v11 + 17) &= 0xF9u;
    llvm::Instruction::moveBefore(v11, a2);
    v27 = v11 >> 4;
    if ((*((_BYTE *)v11 + 23) & 0x10) == 0)
    {
      v48 = 0;
      v47 = &byte_1C871356D;
LABEL_63:
      WORD4(v102) = 773;
      v99 = v47;
      v100 = (uint64_t **)v48;
      v101 = (uint64_t)".neg";
      llvm::Value::setName((uint64_t ***)v11, (uint64_t)&v99);
      v99 = v11;
      v50 = *(_DWORD *)(a3 + 16);
      if (v50)
      {
        v51 = v50 - 1;
        v52 = v51 & (v27 ^ (v11 >> 9));
        v53 = (uint64_t *)(*(_QWORD *)a3 + 8 * v52);
        v54 = (llvm::Value *)*v53;
        if (v11 != (llvm::ValueHandleBase *)*v53)
        {
          v55 = 0;
          v56 = 1;
          while (v54 != (llvm::Value *)-4096)
          {
            if (v55)
              v57 = 0;
            else
              v57 = v54 == (llvm::Value *)-8192;
            if (v57)
              v55 = v53;
            v58 = v52 + v56++;
            v52 = v58 & v51;
            v53 = (uint64_t *)(*(_QWORD *)a3 + 8 * v52);
            v54 = (llvm::Value *)*v53;
            if (v11 == (llvm::ValueHandleBase *)*v53)
              return (uint64_t)v11;
          }
          goto LABEL_135;
        }
        return (uint64_t)v11;
      }
      goto LABEL_142;
    }
    v28 = ***(_QWORD ***)v11;
    v29 = *(_QWORD *)(v28 + 152);
    v30 = *(unsigned int *)(v28 + 168);
    if ((_DWORD)v30)
    {
      LODWORD(v31) = (v30 - 1) & (v27 ^ (v11 >> 9));
      v32 = (llvm::ValueHandleBase **)(v29 + 16 * v31);
      v33 = *v32;
      if (*v32 == v11)
      {
LABEL_62:
        v46 = v32[1];
        v49 = *(_QWORD **)v46;
        v47 = (char *)v46 + 16;
        v48 = v49;
        goto LABEL_63;
      }
      v34 = 1;
      while (v33 != (llvm::ValueHandleBase *)-4096)
      {
        v35 = v31 + v34++;
        v31 = v35 & (v30 - 1);
        v33 = *(llvm::ValueHandleBase **)(v29 + 16 * v31);
        if (v33 == v11)
        {
          v32 = (llvm::ValueHandleBase **)(v29 + 16 * v31);
          goto LABEL_62;
        }
      }
    }
    v32 = (llvm::ValueHandleBase **)(v29 + 16 * v30);
    goto LABEL_62;
  }
  v37 = a1[1];
  if (!v37)
    goto LABEL_103;
  while (1)
  {
    v11 = (llvm::ValueHandleBase *)v37[3];
    v38 = *((unsigned __int8 *)v11 + 16);
    if (v38 == 5)
    {
      if (*((_WORD *)v11 + 9) == 15
        && (sub_1C4E71060((uint64_t)&v99, *((llvm::Constant **)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF))) & 1) != 0)
      {
        goto LABEL_46;
      }
    }
    else if (v38 == 43 && (sub_1C4D8AC3C((uint64_t)&v99, *((llvm::Constant **)v11 - 8)) & 1) != 0)
    {
      goto LABEL_46;
    }
    if (sub_1C4774A9C((uint64_t)v11))
      break;
LABEL_47:
    v37 = (uint64_t **)v37[1];
    if (!v37)
      goto LABEL_103;
  }
  v39 = *((unsigned __int8 *)v11 + 16);
  if (v39 > 0x1B)
    v40 = v39 - 28;
  else
    v40 = *((unsigned __int16 *)v11 + 9);
  if (v40 != 12)
  {
    if (v40 != 16)
      goto LABEL_47;
    if ((*((_BYTE *)v11 + 17) & 0x10) != 0)
    {
      v44 = *((_DWORD *)v11 + 5);
      if ((v44 & 0x40000000) != 0)
        v45 = (llvm::Constant **)*((_QWORD *)v11 - 1);
      else
        v45 = (llvm::Constant **)((char *)v11 - 32 * (v44 & 0x7FFFFFF));
      if (!sub_1C4E5C310((uint64_t)v105, *v45))
        goto LABEL_47;
    }
    else
    {
      v42 = *((_DWORD *)v11 + 5);
      if ((v42 & 0x40000000) != 0)
        v43 = (llvm::Constant **)*((_QWORD *)v11 - 1);
      else
        v43 = (llvm::Constant **)((char *)v11 - 32 * (v42 & 0x7FFFFFF));
      if (!sub_1C4E5C46C((uint64_t)v105, *v43))
        goto LABEL_47;
    }
  }
LABEL_46:
  v41 = *(_QWORD *)(*((_QWORD *)v11 + 5) + 56);
  if (v41 != *(_QWORD *)(*((_QWORD *)a2 + 5) + 56))
    goto LABEL_47;
  if (!a1 || (v59 = *((unsigned __int8 *)a1 + 16), v59 < 0x1C))
  {
    v61 = *(_QWORD *)(v41 + 80);
    if (v61)
      v62 = v61 - 24;
    else
      v62 = 0;
    v63 = *(_QWORD *)(v62 + 48);
    goto LABEL_98;
  }
  if (v59 == 33)
    v60 = (uint64_t *)(*(a1 - 12) + 6);
  else
    v60 = (uint64_t *)(a1 + 4);
  v63 = *v60;
  v64 = v63 - 24;
  if (!v63)
    v64 = 0;
  v65 = *(_QWORD *)(v64 + 40) + 40;
  if (v63 != v65)
  {
    v66 = 0;
    while (1)
    {
      v67 = v63 - 24;
      if (!v63)
        v67 = 0;
      v68 = *(unsigned __int8 *)(v67 + 16);
      if ((v68 - 38) > 0x38 || ((1 << (v68 - 38)) & 0x100260000000001) == 0)
        break;
      if (v68 == 38)
        v66 = 1;
      v63 = *(_QWORD *)(v63 + 8);
      if (v63 == v65)
      {
        v63 = v65;
        break;
      }
    }
    if ((v66 & 1) != 0)
    {
LABEL_103:
      if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
      {
        v81 = 0;
        v80 = &byte_1C871356D;
LABEL_112:
        WORD4(v102) = 773;
        v99 = v80;
        v100 = v81;
        v101 = (uint64_t)".neg";
        v83 = sub_1C5BF2B34((uint64_t *)a1, (llvm::Type *)&v99, (uint64_t)a2, (uint64_t)a2);
        v11 = v83;
        v99 = v83;
        v84 = *(_DWORD *)(a3 + 16);
        if (v84)
        {
          v85 = v84 - 1;
          v86 = v85 & ((v83 >> 4) ^ (v83 >> 9));
          v53 = (uint64_t *)(*(_QWORD *)a3 + 8 * v86);
          v87 = *v53;
          if (v83 != (llvm::Value *)*v53)
          {
            v55 = 0;
            v88 = 1;
            while (v87 != -4096)
            {
              if (v55)
                v89 = 0;
              else
                v89 = v87 == -8192;
              if (v89)
                v55 = v53;
              v90 = v86 + v88++;
              v86 = v90 & v85;
              v53 = (uint64_t *)(*(_QWORD *)a3 + 8 * v86);
              v87 = *v53;
              if (v83 == (llvm::Value *)*v53)
                return (uint64_t)v11;
            }
            goto LABEL_135;
          }
          return (uint64_t)v11;
        }
LABEL_142:
        v98 = 0;
        goto LABEL_138;
      }
      v71 = ***a1;
      v72 = *(_QWORD *)(v71 + 152);
      v73 = *(unsigned int *)(v71 + 168);
      if ((_DWORD)v73)
      {
        LODWORD(v74) = (v73 - 1) & ((a1 >> 4) ^ (a1 >> 9));
        v75 = (uint64_t ****)(v72 + 16 * v74);
        v76 = *v75;
        if (*v75 == a1)
        {
LABEL_111:
          v79 = v75[1];
          v82 = *v79;
          v80 = (char *)(v79 + 2);
          v81 = v82;
          goto LABEL_112;
        }
        v77 = 1;
        while (v76 != (uint64_t ***)-4096)
        {
          v78 = v74 + v77++;
          v74 = v78 & (v73 - 1);
          v76 = *(uint64_t ****)(v72 + 16 * v74);
          if (v76 == a1)
          {
            v75 = (uint64_t ****)(v72 + 16 * v74);
            goto LABEL_111;
          }
        }
      }
      v75 = (uint64_t ****)(v72 + 16 * v73);
      goto LABEL_111;
    }
  }
LABEL_98:
  if (v63)
    v70 = (llvm::Instruction *)(v63 - 24);
  else
    v70 = 0;
  llvm::Instruction::moveBefore(v11, v70);
  if (*((_BYTE *)v11 + 16) == 43)
    *((_BYTE *)v11 + 17) &= 0xF9u;
  else
    llvm::Instruction::andIRFlags((uint64_t)v11, (uint64_t)a2);
  v99 = v11;
  v91 = *(_DWORD *)(a3 + 16);
  if (!v91)
    goto LABEL_142;
  v92 = v91 - 1;
  v93 = v92 & ((v11 >> 4) ^ (v11 >> 9));
  v53 = (uint64_t *)(*(_QWORD *)a3 + 8 * v93);
  v94 = *v53;
  if (v11 != (llvm::ValueHandleBase *)*v53)
  {
    v55 = 0;
    v95 = 1;
    while (v94 != -4096)
    {
      if (v55)
        v96 = 0;
      else
        v96 = v94 == -8192;
      if (v96)
        v55 = v53;
      v97 = v93 + v95++;
      v93 = v97 & v92;
      v53 = (uint64_t *)(*(_QWORD *)a3 + 8 * v93);
      v94 = *v53;
      if (v11 == (llvm::ValueHandleBase *)*v53)
        return (uint64_t)v11;
    }
LABEL_135:
    if (v55)
      v98 = v55;
    else
      v98 = v53;
LABEL_138:
    *sub_1C5BFCD34(a3, (uint64_t *)&v99, v98) = (uint64_t)v11;
    sub_1C5BFC974(a3 + 24, &v99);
  }
  return (uint64_t)v11;
}

uint64_t sub_1C5BFC6B4()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5BFAFC0(v0);
}

void sub_1C5BFC6DC(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E8197218;
  sub_1C5A55684((_QWORD *)a1 + 4);
  llvm::Pass::~Pass(a1);
}

void sub_1C5BFC70C(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E8197218;
  sub_1C5A55684((_QWORD *)a1 + 4);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5BFC750(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::BasicAAWrapperPass::ID);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
}

BOOL sub_1C5BFC7B0(int32x2_t *a1, const llvm::Function *a2)
{
  _BOOL8 v4;
  char *v5;
  _BYTE *v6;
  char *v8;
  char *v9;
  _BYTE v10[40];
  void *v11;
  int v12;
  int v13;
  uint64_t v14[2];
  int v15;
  uint64_t v16[2];
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, a2) & 1) != 0)
    return 0;
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  llvm::ReassociatePass::run(a1 + 4, a2, (uint64_t)&v8);
  if (v12 == v13)
  {
    v5 = (char *)sub_1C477672C((uint64_t)&v8, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
    if (v9 == v8)
      v6 = &v10[4];
    else
      v6 = v10;
    v4 = v5 == &v9[8 * *(unsigned int *)v6];
  }
  else
  {
    v4 = 1;
  }
  if (v11 != *(void **)&v10[32])
    free(v11);
  if (v9 != v8)
    free(v9);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v16);
  sub_1C4D8B52C(v14);
  return v4;
}

BOOL sub_1C5BFC8AC(uint64_t a1)
{
  _BOOL4 v2;
  _BOOL8 result;
  unsigned int v4;
  unsigned int v5;
  int v6;
  llvm::Constant **v7;
  int v8;
  llvm::Constant **v9;
  char v10;
  char v11;

  v2 = sub_1C4774A9C(a1);
  result = 0;
  if (!a1 || !v2)
    return result;
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 > 0x1B)
    v5 = v4 - 28;
  else
    v5 = *(unsigned __int16 *)(a1 + 18);
  if (v5 == 12)
    return 1;
  if (v5 != 16)
    return 0;
  if ((*(_BYTE *)(a1 + 17) & 0x10) != 0)
  {
    v8 = *(_DWORD *)(a1 + 20);
    if ((v8 & 0x40000000) != 0)
      v9 = *(llvm::Constant ***)(a1 - 8);
    else
      v9 = (llvm::Constant **)(a1 - 32 * (v8 & 0x7FFFFFF));
    return sub_1C4E5C310((uint64_t)&v11, *v9);
  }
  v6 = *(_DWORD *)(a1 + 20);
  if ((v6 & 0x40000000) != 0)
    v7 = *(llvm::Constant ***)(a1 - 8);
  else
    v7 = (llvm::Constant **)(a1 - 32 * (v6 & 0x7FFFFFF));
  result = sub_1C4E5C46C((uint64_t)&v10, *v7);
  if (result)
    return 1;
  return result;
}

void sub_1C5BFC974(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *i;
  char *v27;
  __int128 v28;
  unint64_t v29;
  char *v30;
  char *v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  size_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  v6 = v5 - v4;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = ((v5 - v4) << 6) - 1;
  v9 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x200)
    {
      v22 = *(char **)(a1 + 24);
      v23 = (uint64_t)&v22[-*(_QWORD *)a1];
      if (v6 < v23)
      {
        if (v22 != v5)
        {
          *(_QWORD *)&v57 = operator new(0x1000uLL);
          sub_1C61A2C78(a1, &v57);
          goto LABEL_35;
        }
        *(_QWORD *)&v57 = operator new(0x1000uLL);
        sub_1C61A2DAC((const void **)a1, &v57);
        v37 = *(_QWORD **)(a1 + 8);
        v38 = *(char **)(a1 + 16);
        v41 = *v37;
        v39 = (char *)(v37 + 1);
        v40 = v41;
        *(_QWORD *)(a1 + 8) = v39;
        if (v38 == *(char **)(a1 + 24))
        {
          v42 = *(char **)a1;
          if ((unint64_t)v39 <= *(_QWORD *)a1)
          {
            if (v38 == v42)
              v49 = 1;
            else
              v49 = (v38 - v42) >> 2;
            if (v49 >> 61)
              goto LABEL_57;
            v50 = (char *)operator new(8 * v49);
            v51 = &v50[8 * (v49 >> 2)];
            v52 = v38 - v39;
            v32 = v38 == v39;
            v38 = v51;
            if (!v32)
            {
              v38 = &v51[v52 & 0xFFFFFFFFFFFFFFF8];
              v53 = 8 * (v52 >> 3);
              v54 = &v50[8 * (v49 >> 2)];
              do
              {
                v55 = *(_QWORD *)v39;
                v39 += 8;
                *(_QWORD *)v54 = v55;
                v54 += 8;
                v53 -= 8;
              }
              while (v53);
            }
            *(_QWORD *)a1 = v50;
            *(_QWORD *)(a1 + 8) = v51;
            *(_QWORD *)(a1 + 16) = v38;
            *(_QWORD *)(a1 + 24) = &v50[8 * v49];
            if (v42)
            {
              operator delete(v42);
              v38 = *(char **)(a1 + 16);
            }
          }
          else
          {
            v43 = (uint64_t)&v39[-*(_QWORD *)a1] >> 3;
            if (v43 >= -1)
              v44 = v43 + 1;
            else
              v44 = v43 + 2;
            v45 = -(v44 >> 1);
            v46 = v44 >> 1;
            v47 = &v39[-8 * v46];
            v48 = v38 - v39;
            if (v48)
            {
              memmove(&v39[-8 * v46], v39, v48);
              v39 = *(char **)(a1 + 8);
            }
            v38 = &v47[v48];
            *(_QWORD *)(a1 + 8) = &v39[8 * v45];
            *(_QWORD *)(a1 + 16) = v38;
          }
        }
        *(_QWORD *)v38 = v40;
        goto LABEL_34;
      }
      v24 = v23 >> 2;
      if (v22 == *(char **)a1)
        v25 = 1;
      else
        v25 = v24;
      v59 = a1 + 24;
      if (!(v25 >> 61))
      {
        *(_QWORD *)&v57 = operator new(8 * v25);
        *((_QWORD *)&v57 + 1) = v57 + v6;
        *(_QWORD *)&v58 = v57 + v6;
        *((_QWORD *)&v58 + 1) = v57 + 8 * v25;
        v56 = operator new(0x1000uLL);
        sub_1C61A2C78((uint64_t)&v57, &v56);
        for (i = *(_QWORD **)(a1 + 16); i != *(_QWORD **)(a1 + 8); sub_1C61A2DAC((const void **)&v57, i))
          --i;
        v27 = *(char **)a1;
        v28 = v58;
        *(_OWORD *)a1 = v57;
        *(_OWORD *)(a1 + 16) = v28;
        if (v27)
          operator delete(v27);
        goto LABEL_35;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v9 - 512;
      v13 = *(_QWORD *)v4;
      v11 = v4 + 8;
      v12 = v13;
      *(_QWORD *)(a1 + 8) = v11;
      if (v5 != *(char **)(a1 + 24))
      {
LABEL_33:
        *(_QWORD *)v5 = v12;
LABEL_34:
        *(_QWORD *)(a1 + 16) += 8;
LABEL_35:
        v4 = *(char **)(a1 + 8);
        v8 = *(_QWORD *)(a1 + 40);
        v10 = *(_QWORD *)(a1 + 32) + v8;
        goto LABEL_36;
      }
      v14 = *(char **)a1;
      if ((unint64_t)v11 > *(_QWORD *)a1)
      {
        v15 = (uint64_t)&v11[-*(_QWORD *)a1] >> 3;
        if (v15 >= -1)
          v16 = v15 + 1;
        else
          v16 = v15 + 2;
        v17 = -(v16 >> 1);
        v18 = v16 >> 1;
        v19 = &v11[-8 * v18];
        v20 = v5 - v11;
        if (v5 != v11)
        {
          memmove(&v11[-8 * v18], v11, v5 - v11);
          v5 = *(char **)(a1 + 8);
        }
        v21 = &v5[8 * v17];
        v5 = &v19[v20];
        *(_QWORD *)(a1 + 8) = v21;
        *(_QWORD *)(a1 + 16) = &v19[v20];
        goto LABEL_33;
      }
      if (v5 == v14)
        v29 = 1;
      else
        v29 = (v5 - v14) >> 2;
      if (!(v29 >> 61))
      {
        v30 = (char *)operator new(8 * v29);
        v31 = &v30[8 * (v29 >> 2)];
        v33 = v5 - v11;
        v32 = v5 == v11;
        v5 = v31;
        if (!v32)
        {
          v5 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
          v34 = 8 * (v33 >> 3);
          v35 = &v30[8 * (v29 >> 2)];
          do
          {
            v36 = *(_QWORD *)v11;
            v11 += 8;
            *(_QWORD *)v35 = v36;
            v35 += 8;
            v34 -= 8;
          }
          while (v34);
        }
        *(_QWORD *)a1 = v30;
        *(_QWORD *)(a1 + 8) = v31;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = &v30[8 * v29];
        if (v14)
        {
          operator delete(v14);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_33;
      }
    }
LABEL_57:
    sub_1C4764EE4();
  }
LABEL_36:
  *(_QWORD *)(*(_QWORD *)&v4[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  *(_QWORD *)(a1 + 40) = v8 + 1;
}

uint64_t sub_1C5BFCCB8(uint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(result + 8 * v5);
    v7 = *v6;
    if (*v6 != a3)
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(result + 8 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_14;
      }
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_14:
  *a4 = v6;
  return result;
}

uint64_t *sub_1C5BFCD34(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t *v16;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    sub_1C5BFCE64(a1, 2 * v6);
    v16 = 0;
    sub_1C5BFCCB8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v16);
    a3 = v16;
    goto LABEL_3;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
LABEL_3:
    v7 = *a3;
    goto LABEL_4;
  }
  sub_1C5BFCE64(a1, v6);
  v7 = *a2;
  v9 = *(_DWORD *)(a1 + 16) - 1;
  v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
  a3 = (uint64_t *)(*(_QWORD *)a1 + 8 * v10);
  v11 = *a3;
  if (*a2 != *a3)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -8192;
      if (v14)
        v12 = a3;
      v15 = v10 + v13++;
      v10 = v15 & v9;
      a3 = (uint64_t *)(*(_QWORD *)a1 + 8 * v10);
      v11 = *a3;
      if (v7 == *a3)
        goto LABEL_4;
    }
    if (v12)
      a3 = v12;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C5BFCE64(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      v12 = result;
      do
      {
        *v12++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v13 = 0;
      v14 = v10 - 1;
      v15 = v4;
      do
      {
        v16 = *v15;
        if (*v15 != -8192 && v16 != -4096)
        {
          v17 = ((v16 >> 4) ^ (v16 >> 9)) & v14;
          v18 = &result[v17];
          v19 = *v18;
          if (v16 != *v18)
          {
            v20 = 0;
            v21 = 1;
            while (v19 != -4096)
            {
              if (v20)
                v22 = 0;
              else
                v22 = v19 == -8192;
              if (v22)
                v20 = v18;
              v23 = v17 + v21++;
              v17 = v23 & v14;
              v18 = &result[v23 & v14];
              v19 = *v18;
              if (v16 == *v18)
                goto LABEL_26;
            }
            if (v20)
              v18 = v20;
          }
LABEL_26:
          *v18 = v16;
          *(_DWORD *)(a1 + 8) = ++v13;
        }
        ++v15;
      }
      while (v15 != &v4[v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v24 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v24)
  {
    v25 = 8 * v24;
    do
    {
      *result++ = -4096;
      v25 -= 8;
    }
    while (v25);
  }
  return result;
}

void sub_1C5BFCFDC(uint64_t a1, unint64_t a2)
{
  _DWORD *v3;
  char *v4;
  int v5;
  char *v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;

  v14 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 40, &v14);
  v4 = *(char **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    v6 = &v4[40 * v5];
    v7 = v3;
    do
    {
      *(_OWORD *)v7 = *(_OWORD *)v4;
      v7[6] = *((_DWORD *)v4 + 6);
      *((_QWORD *)v7 + 2) = *((_QWORD *)v4 + 2);
      *((_DWORD *)v4 + 6) = 0;
      v8 = *((_DWORD *)v4 + 8);
      *((_BYTE *)v7 + 36) = v4[36];
      v7[8] = v8;
      v4 += 40;
      v7 += 10;
    }
    while (v4 != v6);
    v4 = *(char **)a1;
    v9 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v9)
    {
      v10 = 40 * v9;
      do
      {
        if (*(_DWORD *)&v4[v10 - 16] >= 0x41u)
        {
          v12 = *(_QWORD *)&v4[v10 - 24];
          if (v12)
          {
            v13 = v4;
            MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
            v4 = v13;
          }
        }
        v10 -= 40;
      }
      while (v10);
      v4 = *(char **)a1;
    }
  }
  v11 = v14;
  if (v4 != (char *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v11;
}

char *sub_1C5BFD0E8(char *result, char *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t *v24;
  char *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t v35;

  if (a3 >= 2)
  {
    v6 = result;
    if (a3 == 2)
    {
      v7 = *((_QWORD *)a2 - 1);
      v8 = *(_QWORD *)result;
      if (*(_DWORD *)(v7 + 32) < *(_DWORD *)(*(_QWORD *)result + 32))
      {
        *(_QWORD *)result = v7;
        *((_QWORD *)a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v20 = (char *)a4;
      v21 = a3 >> 1;
      v22 = &result[8 * (a3 >> 1)];
      v23 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1C5BFD31C((uint64_t)result, v22, v23, a4);
        v24 = (uint64_t *)&v20[8 * v21];
        result = (char *)sub_1C5BFD31C((uint64_t)&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v24);
        v25 = &v20[8 * a3];
        v26 = v24;
        while (v26 != (uint64_t *)v25)
        {
          v27 = v26;
          v28 = *v26;
          v29 = *(_QWORD *)v20;
          v30 = *(_DWORD *)(v28 + 32);
          v31 = *(_DWORD *)(*(_QWORD *)v20 + 32);
          if (v30 < v31)
            v29 = v28;
          v20 += 8 * (v30 >= v31);
          v26 = &v27[v30 < v31];
          *(_QWORD *)v6 = v29;
          v6 += 8;
          if (v20 == (char *)v24)
          {
            if (v26 != (uint64_t *)v25)
            {
              v32 = 0;
              if (v30 < v31)
                v33 = 1;
              else
                v33 = 2;
              v34 = &v27[v33 & 1];
              do
              {
                *(_QWORD *)&v6[v32 * 8] = v34[v32];
                ++v32;
              }
              while (&v34[v32] != (uint64_t *)v25);
            }
            return result;
          }
        }
        if (v20 != (char *)v24)
        {
          v35 = 0;
          do
          {
            *(_QWORD *)&v6[v35] = *(_QWORD *)&v20[v35];
            v35 += 8;
          }
          while (&v20[v35] != (char *)v24);
        }
      }
      else
      {
        sub_1C5BFD0E8(result, v22, v23, a4, a5);
        sub_1C5BFD0E8(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v20, a5);
        return sub_1C5BFD514(v6, &v6[8 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v20, a5);
      }
    }
    else if (result != a2)
    {
      v10 = result + 8;
      if (result + 8 != a2)
      {
        v11 = 8;
        v12 = result;
        do
        {
          v14 = *(_QWORD *)v12;
          v13 = *((_QWORD *)v12 + 1);
          v12 = v10;
          v15 = *(_DWORD *)(v13 + 32);
          if (v15 < *(_DWORD *)(v14 + 32))
          {
            v16 = v11;
            while (1)
            {
              *(_QWORD *)&result[v16] = v14;
              v17 = v16 - 8;
              if (v16 == 8)
                break;
              v14 = *(_QWORD *)&result[v16 - 16];
              v16 -= 8;
              if (v15 >= *(_DWORD *)(v14 + 32))
              {
                v18 = &result[v17];
                goto LABEL_15;
              }
            }
            v18 = result;
LABEL_15:
            *(_QWORD *)v18 = v13;
          }
          v10 = v12 + 8;
          v11 += 8;
        }
        while (v12 + 8 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1C5BFD31C(uint64_t result, _QWORD *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  if (a3)
  {
    v4 = a4;
    v6 = result;
    if (a3 == 1)
    {
LABEL_8:
      *v4 = *(_QWORD *)v6;
      return result;
    }
    if (a3 == 2)
    {
      v8 = *(a2 - 1);
      v9 = *(_DWORD *)(v8 + 32);
      v10 = *(_DWORD *)(*(_QWORD *)result + 32);
      if (v9 >= v10)
        v8 = *(_QWORD *)result;
      *a4 = v8;
      v4 = a4 + 1;
      if (v9 >= v10)
        v6 = (uint64_t)(a2 - 1);
      goto LABEL_8;
    }
    if ((uint64_t)a3 > 8)
    {
      v20 = result + 8 * (a3 >> 1);
      sub_1C5BFD0E8(result, v20, a3 >> 1, a4, a3 >> 1);
      result = sub_1C5BFD0E8(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v21 = (_QWORD *)(v6 + 8 * (a3 >> 1));
      while (v21 != a2)
      {
        v22 = v21;
        v23 = *v21;
        v24 = *(_QWORD *)v6;
        v25 = *(_DWORD *)(v23 + 32);
        v26 = *(_DWORD *)(*(_QWORD *)v6 + 32);
        if (v25 < v26)
          v24 = v23;
        v21 = &v22[v25 < v26];
        v6 += 8 * (v25 >= v26);
        *v4++ = v24;
        if (v6 == v20)
        {
          if (v21 != a2)
          {
            v27 = 0;
            v28 = &v22[v25 < v26];
            do
            {
              v4[v27] = v28[v27];
              ++v27;
            }
            while (&v28[v27] != a2);
          }
          return result;
        }
      }
      if (v6 != v20)
      {
        v29 = 0;
        do
        {
          v4[v29] = *(_QWORD *)(v6 + v29 * 8);
          ++v29;
        }
        while (v6 + v29 * 8 != v20);
      }
    }
    else if ((_QWORD *)result != a2)
    {
      v11 = result + 8;
      *a4 = *(_QWORD *)result;
      if ((_QWORD *)(result + 8) != a2)
      {
        v12 = 0;
        v13 = a4;
        v14 = a4;
        do
        {
          v16 = *v14++;
          v15 = v16;
          if (*(_DWORD *)(*(_QWORD *)v11 + 32) >= *(_DWORD *)(v16 + 32))
          {
            *v14 = *(_QWORD *)v11;
          }
          else
          {
            v13[1] = v15;
            v17 = a4;
            if (v13 != a4)
            {
              v18 = v12;
              while (1)
              {
                v17 = (uint64_t *)((char *)a4 + v18);
                v19 = *(uint64_t *)((char *)a4 + v18 - 8);
                if (*(_DWORD *)(*(_QWORD *)v11 + 32) >= *(_DWORD *)(v19 + 32))
                  break;
                *v17 = v19;
                v18 -= 8;
                if (!v18)
                {
                  v17 = a4;
                  break;
                }
              }
            }
            *v17 = *(_QWORD *)v11;
          }
          v11 += 8;
          v12 += 8;
          v13 = v14;
        }
        while ((_QWORD *)v11 != a2);
      }
    }
  }
  return result;
}

char *sub_1C5BFD514(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v8;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  BOOL v47;
  char v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  BOOL v65;
  _BOOL4 v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;

  if (a5)
  {
    v8 = a5;
    v11 = result;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4)
        return result;
      while (1)
      {
        v12 = *(_QWORD *)v11;
        if (*(_DWORD *)(*(_QWORD *)a2 + 32) < *(_DWORD *)(*(_QWORD *)v11 + 32))
          break;
        v11 += 8;
        if (!--a4)
          return result;
      }
      if (a4 >= v8)
      {
        if (a4 == 1)
        {
          *(_QWORD *)v11 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v12;
          return result;
        }
        if (a4 >= 0)
          v23 = a4;
        else
          v23 = a4 + 1;
        v22 = v23 >> 1;
        v16 = &v11[8 * (v23 >> 1)];
        v15 = a3;
        if (a3 != a2)
        {
          v24 = (a3 - a2) >> 3;
          v15 = a2;
          do
          {
            v25 = v24 >> 1;
            v26 = &v15[8 * (v24 >> 1)];
            v28 = *(_QWORD *)v26;
            v27 = v26 + 8;
            v24 += ~(v24 >> 1);
            if (*(_DWORD *)(v28 + 32) < *(_DWORD *)(*(_QWORD *)v16 + 32))
              v15 = v27;
            else
              v24 = v25;
          }
          while (v24);
        }
        v14 = (v15 - a2) >> 3;
      }
      else
      {
        if (v8 >= 0)
          v13 = v8;
        else
          v13 = v8 + 1;
        v14 = v13 >> 1;
        v15 = &a2[8 * (v13 >> 1)];
        v16 = a2;
        if (v11 != a2)
        {
          v17 = (a2 - v11) >> 3;
          v16 = v11;
          do
          {
            v18 = v17 >> 1;
            v19 = &v16[8 * (v17 >> 1)];
            v21 = *(_QWORD *)v19;
            v20 = v19 + 8;
            v17 += ~(v17 >> 1);
            if (*(_DWORD *)(*(_QWORD *)v15 + 32) < *(_DWORD *)(v21 + 32))
              v17 = v18;
            else
              v16 = v20;
          }
          while (v17);
        }
        v22 = (v16 - v11) >> 3;
      }
      v29 = v15;
      if (v16 != a2)
      {
        v29 = v16;
        if (a2 != v15)
        {
          if (v16 + 8 == a2)
          {
            v69 = *(_QWORD *)v16;
            v71 = a3;
            v36 = v15 - a2;
            v73 = a6;
            memmove(v16, a2, v15 - a2);
            a3 = v71;
            a6 = v73;
            v29 = &v16[v36];
            *(_QWORD *)v29 = v69;
          }
          else if (a2 + 8 == v15)
          {
            v37 = *((_QWORD *)v15 - 1);
            v29 = v16 + 8;
            if (v15 - 8 != v16)
            {
              v72 = a3;
              v74 = a6;
              v70 = *((_QWORD *)v15 - 1);
              memmove(v16 + 8, v16, v15 - 8 - v16);
              v37 = v70;
              a3 = v72;
              a6 = v74;
            }
            *(_QWORD *)v16 = v37;
          }
          else
          {
            v30 = (a2 - v16) >> 3;
            if (v30 == (v15 - a2) >> 3)
            {
              v31 = 0;
              do
              {
                v32 = *(_QWORD *)&v16[v31];
                *(_QWORD *)&v16[v31] = *(_QWORD *)&a2[v31];
                v33 = (uint64_t)&v16[v31 + 8];
                *(_QWORD *)&a2[v31] = v32;
                v34 = (uint64_t)&a2[v31 + 8];
                v31 += 8;
              }
              while ((char *)v33 != a2 && v34 != (_QWORD)v15);
              v29 = a2;
            }
            else
            {
              v38 = (v15 - a2) >> 3;
              v39 = (a2 - v16) >> 3;
              do
              {
                v40 = v39;
                v39 = v38;
                v38 = v40 % v38;
              }
              while (v38);
              if (v39)
              {
                v41 = &v16[8 * v39];
                do
                {
                  v43 = *((_QWORD *)v41 - 1);
                  v41 -= 8;
                  v42 = v43;
                  v44 = &v41[8 * v30];
                  v45 = v41;
                  do
                  {
                    v46 = v45;
                    v45 = v44;
                    *(_QWORD *)v46 = *(_QWORD *)v44;
                    v47 = __OFSUB__(v30, (v15 - v44) >> 3);
                    v49 = v30 - ((v15 - v44) >> 3);
                    v48 = (v49 < 0) ^ v47;
                    v44 = &v16[8 * v49];
                    if (v48)
                      v44 = &v45[8 * v30];
                  }
                  while (v44 != v41);
                  *(_QWORD *)v45 = v42;
                }
                while (v41 != v16);
              }
              v29 = &v16[8 * ((v15 - a2) >> 3)];
            }
          }
        }
      }
      a4 -= v22;
      v8 -= v14;
      if (v22 + v14 >= a4 + v8)
      {
        v54 = v8;
        v55 = a6;
        result = (char *)sub_1C5BFD514(v29, v15, a3, a4, v54, a6, a7);
        a6 = v55;
        v15 = v16;
        v8 = v14;
        a4 = v22;
        a3 = v29;
      }
      else
      {
        v50 = v11;
        v51 = v16;
        v52 = a6;
        v53 = a3;
        result = (char *)sub_1C5BFD514(v50, v51, v29, v22, v14, a6, a7);
        a3 = v53;
        a6 = v52;
        v11 = v29;
      }
      a2 = v15;
      if (!v8)
        return result;
    }
    if (a4 <= v8)
    {
      if (v11 != a2)
      {
        v60 = 0;
        do
        {
          *(_QWORD *)&a6[v60] = *(_QWORD *)&v11[v60];
          v60 += 8;
        }
        while (&v11[v60] != a2);
        if (v60)
        {
          v61 = a6;
          while (a2 != a3)
          {
            v62 = *(_QWORD *)a2;
            v63 = *(_DWORD *)(*(_QWORD *)a2 + 32);
            v64 = *(_DWORD *)(*(_QWORD *)v61 + 32);
            v65 = v63 >= v64;
            v66 = v63 < v64;
            v67 = v65;
            if (v65)
              v62 = *(_QWORD *)v61;
            v61 += 8 * v67;
            a2 += 8 * v66;
            *(_QWORD *)v11 = v62;
            v11 += 8;
            if (&a6[v60] == v61)
              return result;
          }
          return (char *)memmove(v11, v61, a6 - v61 + v60);
        }
      }
    }
    else if (a2 != a3)
    {
      v56 = 0;
      do
      {
        *(_QWORD *)&a6[v56] = *(_QWORD *)&a2[v56];
        v56 += 8;
      }
      while (&a2[v56] != a3);
      if (v56)
      {
        v57 = &a6[v56];
        v58 = a3 - 8;
        while (a2 != v11)
        {
          v59 = *((_QWORD *)v57 - 1);
          if (*(_DWORD *)(v59 + 32) >= *(_DWORD *)(*((_QWORD *)a2 - 1) + 32))
          {
            v57 -= 8;
          }
          else
          {
            v59 = *((_QWORD *)a2 - 1);
            a2 -= 8;
          }
          *(_QWORD *)v58 = v59;
          v58 -= 8;
          if (v57 == a6)
            return result;
        }
        if (v57 != a6)
        {
          v68 = 0;
          do
          {
            *(_QWORD *)&v58[v68] = *(_QWORD *)&v57[v68 - 8];
            v68 -= 8;
          }
          while (&v57[v68] != a6);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1C5BFD9A8(_QWORD *a1, uint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = a1[4];
  v4 = v3 >> 9;
  v5 = a1[1];
  v6 = (_QWORD *)(v5 + 8 * (v3 >> 9));
  if (a1[2] != v5)
  {
    v7 = *(_QWORD *)(v5 + 8 * v4);
    v8 = (_QWORD *)(v7 + 8 * (a1[4] & 0x1FFLL));
    v9 = a1[5] + v3;
    result = (_QWORD *)(v5 + 8 * (v9 >> 9));
    v11 = *result + 8 * (v9 & 0x1FF);
    if (v4 != v9 >> 9)
      goto LABEL_13;
    if (v8 == (_QWORD *)v11)
      goto LABEL_27;
    v12 = *a2;
    while (*v8 != v12)
    {
      if (++v8 == (_QWORD *)v11)
        goto LABEL_10;
    }
    v11 = (uint64_t)v8;
    if (!v5)
      return 0;
LABEL_11:
    v8 = (_QWORD *)v11;
LABEL_27:
    result = v6;
    if ((_QWORD *)(*v6 + 4096) != v8)
      return result;
    return ++v6;
  }
  v13 = a1[5] + v3;
  if (v4 == v13 >> 9)
  {
    v11 = 0;
LABEL_10:
    if (!v5)
      return 0;
    goto LABEL_11;
  }
  v8 = 0;
  v11 = 0;
  result = (_QWORD *)(v5 + 8 * (v13 >> 9));
  v7 = *v6;
  do
  {
LABEL_13:
    if (*v8 == *a2)
      return v6;
    ++v8;
  }
  while (v8 != (_QWORD *)(v7 + 4096));
  v14 = v6 + 1;
  if (v6 + 1 != result)
  {
LABEL_16:
    v15 = 0;
    v16 = v6;
    v6 = v14;
    while (*(_QWORD *)(v16[1] + v15) != *a2)
    {
      v15 += 8;
      if (v15 == 4096)
      {
        ++v14;
        if (v6 + 1 != result)
          goto LABEL_16;
        goto LABEL_20;
      }
    }
    return v6;
  }
LABEL_20:
  v17 = (_QWORD *)*result;
  if (*result != v11)
  {
    v18 = 0;
    v19 = *a2;
    do
    {
      if (*v17 == v19)
        break;
      ++v18;
      ++v17;
    }
    while (v17 != (_QWORD *)v11);
    if (v18 == 512)
    {
      v6 += 2;
      return v6;
    }
  }
  return result;
}

void sub_1C5BFDB5C(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  char *v12;
  char **v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  char **v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64x2_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t **v46;
  uint64_t v47;
  char **v48;
  char *v49;
  uint64_t **v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  char **v54;
  char *v55;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = (char **)(v5 + 8 * (v4 >> 9));
  if (v6 == v5)
    v8 = 0;
  else
    v8 = (uint64_t)&(*v7)[8 * (*(_QWORD *)(a1 + 32) & 0x1FFLL)];
  if (a3 == v8)
  {
    v10 = *v7;
    v12 = (char *)v8;
    v13 = (char **)(v5 + 8 * (v4 >> 9));
  }
  else
  {
    v9 = ((a3 - *(_QWORD *)a2) >> 3) + ((a2 - (char *)v7) << 6);
    v10 = *v7;
    v11 = v9 - ((v8 - (uint64_t)*v7) >> 3);
    v12 = (char *)v8;
    v13 = (char **)(v5 + 8 * (v4 >> 9));
    if (v9 != (v8 - (uint64_t)*v7) >> 3)
    {
      if (v9 < 1)
      {
        v14 = 511 - v9;
        LOWORD(v9) = ~(511 - v9);
        v13 = &v7[-(v14 >> 9)];
      }
      else
      {
        v13 = &v7[(unint64_t)v9 >> 9];
      }
      v10 = *v13;
      v12 = &(*v13)[8 * (v9 & 0x1FF)];
      v15 = *(_QWORD *)(a1 + 40);
      if (v11 > (unint64_t)(v15 - 1) >> 1)
      {
        v16 = (v12 - v10) >> 3;
        if (v12 - v10 < -7)
        {
          v25 = v16 > 510;
          v38 = 510 - v16;
          v39 = 1021 - v16;
          if (!v25)
            v39 = v38;
          v18 = &v13[-(v39 >> 9)];
          v19 = *v18;
          v40 = v38 & 0x1FF;
          v41 = -v38;
          v29 = v41 < 0;
          v42 = v41 & 0x1FF;
          if (v29)
            v43 = v40;
          else
            v43 = -v42;
          v20 = 511 - v43;
        }
        else
        {
          v17 = v16 + 1;
          v18 = &v13[(unint64_t)(v16 + 1) >> 9];
          v19 = *v18;
          v20 = v17 & 0x1FF;
        }
        v44 = (uint64_t *)&v19[8 * v20];
        v45 = v15 + v4;
        v46 = (uint64_t **)(v5 + 8 * (v45 >> 9));
        if (v6 == v5)
          v47 = 0;
        else
          v47 = (uint64_t)&(*v46)[v45 & 0x1FF];
        if (v18 == (char **)v46)
        {
          v52 = (uint64_t *)v47;
          v48 = v13;
          v49 = v12;
        }
        else
        {
          sub_1C5BFDF48(&v53, v44, (uint64_t *)v19 + 512, v13, v12);
          v48 = v54;
          v49 = v55;
          v50 = (uint64_t **)(v18 + 1);
          while (v50 != v46)
          {
            v51 = *v50++;
            sub_1C5BFDF48(&v53, v51, v51 + 512, v48, v49);
            v48 = v54;
            v49 = v55;
          }
          v44 = *v46;
          v52 = (uint64_t *)v47;
        }
        sub_1C5BFDF48(&v53, v44, v52, v48, v49);
        --*(_QWORD *)(a1 + 40);
        sub_1C5BFDE68((_QWORD *)a1);
        return;
      }
    }
  }
  v21 = (v12 - v10) >> 3;
  if (v12 - v10 < -7)
  {
    v25 = v21 > 510;
    v26 = 510 - v21;
    v27 = 1021 - v21;
    if (!v25)
      v27 = v26;
    v23 = (uint64_t *)&v13[-(v27 >> 9)];
    v28 = v26 & 0x1FF;
    v30 = -v26;
    v29 = v30 < 0;
    v31 = v30 & 0x1FF;
    if (v29)
      v32 = v28;
    else
      v32 = -v31;
    v24 = *v23 + 8 * (511 - v32);
  }
  else
  {
    v22 = v21 + 1;
    v23 = (uint64_t *)&v13[v22 >> 9];
    v24 = *v23 + 8 * (v22 & 0x1FF);
  }
  if (v7 == v13)
  {
    v36 = v8;
    v35 = (uint64_t)v12;
  }
  else
  {
    sub_1C5BFDEC4(&v53, (uint64_t)v10, (uint64_t)v12, v23, v24);
    v23 = (uint64_t *)v54;
    v24 = (uint64_t)v55;
    v33 = (uint64_t *)(v13 - 1);
    while (v33 != (uint64_t *)v7)
    {
      v34 = *v33--;
      sub_1C5BFDEC4(&v53, v34, v34 + 4096, v23, v24);
      v23 = (uint64_t *)v54;
      v24 = (uint64_t)v55;
    }
    v35 = (uint64_t)(*v7 + 4096);
    v36 = v8;
  }
  sub_1C5BFDEC4(&v53, v36, v35, v23, v24);
  v37 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1C85FB4A0);
  *(int64x2_t *)(a1 + 32) = v37;
  if (v37.i64[0] >= 0x400uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 512;
  }
}

void sub_1C5BFDE68(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v1 = a1[2];
  if (v1 == v2)
    v3 = 0;
  else
    v3 = ((v1 - v2) << 6) - 1;
  if ((unint64_t)(v3 - (a1[5] + a1[4])) >= 0x400)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
}

_QWORD *sub_1C5BFDEC4(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a2 == a3)
  {
    a3 = a2;
  }
  else
  {
    v5 = *a4;
    v6 = a3;
    while (1)
    {
      v7 = a5 - v5;
      if ((v6 - a2) >> 3 >= v7 >> 3)
        v8 = v7 >> 3;
      else
        v8 = (v6 - a2) >> 3;
      if (v8)
      {
        v9 = -8 * v8;
        v10 = (uint64_t *)(v6 - 8);
        do
        {
          v11 = *v10--;
          *(_QWORD *)(a5 - 8) = v11;
          a5 -= 8;
          v9 += 8;
        }
        while (v9);
      }
      v6 -= 8 * v8;
      if (v6 == a2)
        break;
      v12 = *--a4;
      v5 = v12;
      a5 = v12 + 4096;
    }
    if (*a4 + 4096 == a5)
    {
      v13 = a4[1];
      ++a4;
      a5 = v13;
    }
  }
  *result = a3;
  result[1] = a4;
  result[2] = a5;
  return result;
}

uint64_t **sub_1C5BFDF48(uint64_t **result, uint64_t *a2, uint64_t *a3, char **a4, char *a5)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  if (a2 != a3)
  {
    v5 = *a4;
    while (1)
    {
      v6 = v5 - a5 + 4096;
      if (a3 - a2 >= v6 >> 3)
        v7 = v6 >> 3;
      else
        v7 = a3 - a2;
      if (v7)
      {
        v8 = 8 * v7;
        v9 = &a2[v7];
        do
        {
          v10 = *a2++;
          *(_QWORD *)a5 = v10;
          a5 += 8;
          v8 -= 8;
        }
        while (v8);
        a2 = v9;
      }
      if (a2 == a3)
        break;
      v11 = a4[1];
      ++a4;
      v5 = v11;
      a5 = v11;
    }
    if (*a4 + 4096 == a5)
    {
      v12 = a4[1];
      ++a4;
      a5 = v12;
    }
  }
  *result = a3;
  result[1] = (uint64_t *)a4;
  result[2] = (uint64_t *)a5;
  return result;
}

void sub_1C5BFDFC4(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5, __n128 a6)
{
  char *v7;
  __n128 *v8;
  __n128 v9;
  __n128 *v11;
  uint64_t v12;
  __n128 *v13;
  __n128 *v14;
  unsigned __int32 v15;
  uint64_t v16;
  unsigned __int32 v17;
  uint64_t v18;
  __n128 *v20;
  unint64_t v21;
  __n128 *v22;
  unint64_t v23;
  __n128 v24;
  __n128 *v25;
  __n128 *v26;
  __n128 *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int32 v34;

  if (a3 >= 2)
  {
    v7 = (char *)a1;
    if (a3 == 2)
    {
      v8 = a2 - 1;
      if (a2[-1].n128_u32[0] > a1->n128_u32[0])
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v20 = a4;
      v21 = a3 >> 1;
      v22 = &a1[a3 >> 1];
      v23 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v24 = sub_1C5BFE244(a1, v22, v23, a4, a6);
        v25 = &v20[v21];
        sub_1C5BFE244((__n128 *)&v7[16 * (a3 >> 1)], a2, a3 - (a3 >> 1), v25, v24);
        v26 = &v20[a3];
        v27 = v25;
        while (v27 != v26)
        {
          if (v27->n128_u32[0] <= v20->n128_u32[0])
          {
            v30 = (__int128)*v20++;
            v29 = v30;
          }
          else
          {
            v28 = (__int128)*v27++;
            v29 = v28;
          }
          *(_OWORD *)v7 = v29;
          v7 += 16;
          if (v20 == v25)
          {
            if (v27 != v26)
            {
              v31 = 0;
              do
              {
                *(__n128 *)&v7[v31 * 16] = v27[v31];
                ++v31;
              }
              while (&v27[v31] != v26);
            }
            return;
          }
        }
        if (v20 != v25)
        {
          v32 = 0;
          do
          {
            *(__n128 *)&v7[v32 * 16] = v20[v32];
            ++v32;
          }
          while (&v20[v32] != v25);
        }
      }
      else
      {
        sub_1C5BFDFC4(a1, v22, v23, a4, a5);
        sub_1C5BFDFC4(&v7[16 * (a3 >> 1)], a2, a3 - (a3 >> 1), v20, a5);
        sub_1C5BFE42C(v7, &v7[16 * (a3 >> 1)], (char *)a2, a3 >> 1, a3 - (a3 >> 1), v20, a5);
      }
    }
    else if (a1 != a2)
    {
      v11 = a1 + 1;
      if (&a1[1] != a2)
      {
        v12 = 0;
        v13 = a1;
        do
        {
          v14 = v11;
          v15 = v13[1].n128_u32[0];
          if (v15 > v13->n128_u32[0])
          {
            v33 = *(uint64_t *)((char *)v13[1].n128_i64 + 4);
            v34 = v13[1].n128_u32[3];
            v16 = v12;
            while (1)
            {
              *(__n128 *)((char *)a1 + v16 + 16) = *(__n128 *)((char *)a1 + v16);
              if (!v16)
                break;
              v17 = *(unsigned __int32 *)((char *)a1[-1].n128_u32 + v16);
              v16 -= 16;
              if (v15 <= v17)
              {
                v18 = (uint64_t)&a1[1] + v16;
                goto LABEL_15;
              }
            }
            v18 = (uint64_t)a1;
LABEL_15:
            *(_DWORD *)v18 = v15;
            *(_QWORD *)(v18 + 4) = v33;
            *(_DWORD *)(v18 + 12) = v34;
          }
          v11 = v14 + 1;
          v12 += 16;
          v13 = v14;
        }
        while (&v14[1] != a2);
      }
    }
  }
}

__n128 sub_1C5BFE244(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, __n128 result)
{
  __n128 *v5;
  __n128 *v8;
  __n128 *v9;
  __n128 *v10;
  uint64_t v11;
  __n128 *v12;
  __n128 *v13;
  unsigned __int32 v14;
  __n128 *v15;
  uint64_t v16;
  __n128 v17;
  __n128 *v18;
  __n128 *v19;
  __n128 v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;

  if (a3)
  {
    v5 = a4;
    v8 = a1;
    if (a3 == 2)
    {
      v9 = a2 - 1;
      if (a2[-1].n128_u32[0] <= a1->n128_u32[0])
      {
        *a4 = *a1;
        result = *v9;
      }
      else
      {
        *a4 = *v9;
        result = *a1;
      }
      a4[1] = result;
    }
    else if (a3 == 1)
    {
      result = *a1;
      *a4 = *a1;
    }
    else if ((uint64_t)a3 > 8)
    {
      v18 = &a1[a3 >> 1];
      sub_1C5BFDFC4(a1, v18, a3 >> 1, a4, a3 >> 1);
      sub_1C5BFDFC4(&v8[a3 >> 1], a2, a3 - (a3 >> 1), &v5[a3 >> 1], a3 - (a3 >> 1));
      v19 = &v8[a3 >> 1];
      while (v19 != a2)
      {
        if (v19->n128_u32[0] <= v8->n128_u32[0])
        {
          v21 = *v8++;
          result = v21;
        }
        else
        {
          v20 = *v19++;
          result = v20;
        }
        *v5++ = result;
        if (v8 == v18)
        {
          if (v19 != a2)
          {
            v22 = 0;
            do
            {
              result = v19[v22];
              v5[v22++] = result;
            }
            while (&v19[v22] != a2);
          }
          return result;
        }
      }
      if (v8 != v18)
      {
        v23 = 0;
        do
        {
          result = v8[v23];
          v5[v23++] = result;
        }
        while (&v8[v23] != v18);
      }
    }
    else if (a1 != a2)
    {
      result = *a1;
      *a4 = *a1;
      v10 = a1 + 1;
      if (&a1[1] != a2)
      {
        v11 = 0;
        v12 = a4;
        do
        {
          v13 = v12;
          v14 = v12->n128_u32[0];
          v15 = ++v12;
          if (v10->n128_u32[0] > v14)
          {
            *v12 = *v13;
            v15 = a4;
            if (v13 != a4)
            {
              v16 = v11;
              while (1)
              {
                v15 = (__n128 *)((char *)a4 + v16);
                if (v10->n128_u32[0] <= *(unsigned __int32 *)((char *)a4[-1].n128_u32 + v16))
                  break;
                *v15 = *(__n128 *)((char *)a4 + v16 - 16);
                v16 -= 16;
                if (!v16)
                {
                  v15 = a4;
                  break;
                }
              }
            }
          }
          v17 = *v10++;
          result.n128_u64[0] = v17.n128_u64[0];
          *v15 = v17;
          v11 += 16;
        }
        while (v10 != a2);
      }
    }
  }
  return result;
}

char *sub_1C5BFE42C(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, _OWORD *a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  unsigned int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  __int128 v46;
  char *v47;
  char *v48;
  char *v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _OWORD *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  char *v60;
  uint64_t v61;
  _OWORD *v62;
  char *v63;
  unsigned int v64;
  unsigned int v65;
  char v66;
  char *v67;
  unint64_t v68;
  __int128 *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  _OWORD *v74;
  _OWORD *v75;
  char *v76;
  char *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;

  if (a5)
  {
    v8 = a5;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4)
        return result;
      v11 = 0;
      v12 = -a4;
      while (*(_DWORD *)a2 <= *(_DWORD *)&result[v11])
      {
        v11 += 16;
        if (__CFADD__(v12++, 1))
          return result;
      }
      v14 = -v12;
      v15 = &result[v11];
      if (-v12 >= v8)
      {
        if (v12 == -1)
        {
          v81 = *(_OWORD *)&result[v11];
          *(_OWORD *)&result[v11] = *(_OWORD *)a2;
          *(_OWORD *)a2 = v81;
          return result;
        }
        if (v12 > 0)
          v14 = 1 - v12;
        v25 = v14 >> 1;
        v19 = &result[16 * (v14 >> 1) + v11];
        v18 = a3;
        if (a3 != a2)
        {
          v26 = (a3 - a2) >> 4;
          v18 = a2;
          do
          {
            v27 = v26 >> 1;
            v28 = &v18[16 * (v26 >> 1)];
            v30 = *(_DWORD *)v28;
            v29 = v28 + 16;
            v26 += ~(v26 >> 1);
            if (v30 > *(_DWORD *)v19)
              v18 = v29;
            else
              v26 = v27;
          }
          while (v26);
        }
        v17 = (v18 - a2) >> 4;
      }
      else
      {
        if (v8 >= 0)
          v16 = v8;
        else
          v16 = v8 + 1;
        v17 = v16 >> 1;
        v18 = &a2[16 * (v16 >> 1)];
        v19 = a2;
        if (v15 != a2)
        {
          v20 = (a2 - result - v11) >> 4;
          v19 = &result[v11];
          do
          {
            v21 = v20 >> 1;
            v22 = &v19[16 * (v20 >> 1)];
            v24 = *(_DWORD *)v22;
            v23 = v22 + 16;
            v20 += ~(v20 >> 1);
            if (*(_DWORD *)v18 > v24)
              v20 = v21;
            else
              v19 = v23;
          }
          while (v20);
        }
        v25 = (v19 - result - v11) >> 4;
      }
      v31 = v18;
      if (v19 != a2)
      {
        v31 = v19;
        if (a2 != v18)
        {
          if (v19 + 16 == a2)
          {
            v79 = *(_OWORD *)v19;
            v37 = v18 - a2;
            v74 = a6;
            v76 = &result[v11];
            v38 = a3;
            v39 = v17;
            memmove(v19, a2, v18 - a2);
            v17 = v39;
            a6 = v74;
            v15 = v76;
            a3 = v38;
            v31 = &v19[v37];
            *(_OWORD *)v31 = v79;
          }
          else if (a2 + 16 == v18)
          {
            v31 = v19 + 16;
            v80 = *((_OWORD *)v18 - 1);
            if (v18 - 16 != v19)
            {
              v75 = a6;
              v77 = &result[v11];
              v40 = a3;
              v41 = v17;
              memmove(v19 + 16, v19, v18 - 16 - v19);
              v17 = v41;
              a6 = v75;
              v15 = v77;
              a3 = v40;
            }
            *(_OWORD *)v19 = v80;
          }
          else
          {
            v32 = (a2 - v19) >> 4;
            if (v32 == (v18 - a2) >> 4)
            {
              v33 = 0;
              do
              {
                v78 = *(_OWORD *)&v19[v33];
                *(_OWORD *)&v19[v33] = *(_OWORD *)&a2[v33];
                v34 = (uint64_t)&v19[v33 + 16];
                *(_OWORD *)&a2[v33] = v78;
                v35 = (uint64_t)&a2[v33 + 16];
                v33 += 16;
              }
              while ((char *)v34 != a2 && v35 != (_QWORD)v18);
              v31 = a2;
            }
            else
            {
              v42 = (v18 - a2) >> 4;
              v43 = (a2 - v19) >> 4;
              do
              {
                v44 = v43;
                v43 = v42;
                v42 = v44 % v42;
              }
              while (v42);
              if (v43)
              {
                v45 = &v19[16 * v43];
                do
                {
                  v46 = *((_OWORD *)v45 - 1);
                  v45 -= 16;
                  v47 = &v45[16 * v32];
                  v48 = v45;
                  do
                  {
                    v49 = v48;
                    v48 = v47;
                    *(_OWORD *)v49 = *(_OWORD *)v47;
                    v50 = __OFSUB__(v32, (v18 - v47) >> 4);
                    v51 = v32 - ((v18 - v47) >> 4);
                    v66 = (v51 < 0) ^ v50;
                    v47 = &v19[16 * v51];
                    if (v66)
                      v47 = &v48[16 * v32];
                  }
                  while (v47 != v45);
                  *(_OWORD *)v48 = v46;
                }
                while (v45 != v19);
              }
              v31 = &v19[16 * ((v18 - a2) >> 4)];
            }
          }
        }
      }
      a4 = -(v25 + v12);
      v52 = v8 - v17;
      if (v25 + v17 >= v8 - (v25 + v17) - v12)
      {
        v56 = -(v25 + v12);
        v57 = v17;
        v58 = v8 - v17;
        v59 = a6;
        v60 = v15;
        sub_1C5BFE42C(v31, v18, a3, v56, v58, a6, a7);
        result = v60;
        a6 = v59;
        v18 = v19;
        v52 = v57;
        a4 = v25;
        a3 = v31;
      }
      else
      {
        v53 = v19;
        v54 = a6;
        v55 = a3;
        sub_1C5BFE42C(v15, v53, v31, v25, v17, a6, a7);
        a3 = v55;
        a6 = v54;
        result = v31;
      }
      v8 = v52;
      a2 = v18;
      if (!v52)
        return result;
    }
    if (a4 <= v8)
    {
      if (result != a2)
      {
        v68 = 0;
        do
        {
          a6[v68 / 0x10] = *(_OWORD *)&result[v68];
          v68 += 16;
        }
        while (&result[v68] != a2);
        if (v68)
        {
          v69 = a6;
          while (a2 != a3)
          {
            if (*(_DWORD *)a2 <= *(_DWORD *)v69)
            {
              v72 = *v69++;
              v71 = v72;
            }
            else
            {
              v70 = *(_OWORD *)a2;
              a2 += 16;
              v71 = v70;
            }
            *(_OWORD *)result = v71;
            result += 16;
            if (&a6[v68 / 0x10] == v69)
              return result;
          }
          return (char *)memmove(result, v69, (char *)a6 - (char *)v69 + v68);
        }
      }
    }
    else if (a2 != a3)
    {
      v61 = 0;
      do
      {
        a6[v61] = *(_OWORD *)&a2[v61 * 16];
        ++v61;
      }
      while (&a2[v61 * 16] != a3);
      if (v61 * 16)
      {
        v62 = &a6[v61];
        v63 = a3 - 16;
        while (a2 != result)
        {
          v64 = *((_DWORD *)v62 - 4);
          v65 = *((_DWORD *)a2 - 4);
          v66 = v64 > v65;
          if (v64 <= v65)
            v67 = (char *)(v62 - 1);
          else
            v67 = a2 - 16;
          if (v66)
            a2 -= 16;
          else
            --v62;
          *(_OWORD *)v63 = *(_OWORD *)v67;
          v63 -= 16;
          if (v62 == a6)
            return result;
        }
        if (v62 != a6)
        {
          v73 = 0;
          do
          {
            *(_OWORD *)&v63[v73 * 16] = v62[v73 - 1];
            --v73;
          }
          while (&v62[v73] != a6);
        }
      }
    }
  }
  return result;
}

_OWORD *sub_1C5BFE904(uint64_t *a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  int v27;
  BOOL v28;
  unsigned int v30;
  uint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t v44;
  int32x2_t *v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  uint64_t v57;
  int32x2_t *v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int64x2_t v69;

  v3 = *((_DWORD *)a1 + 4);
  v4 = (uint64_t *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(72 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 72 * v10;
      v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *result = v12;
        result = (_OWORD *)((char *)result + 72);
        v11 -= 72;
      }
      while (v11);
    }
    if (v3)
    {
      v13 = v4;
      do
      {
        v14 = *v13;
        v15 = v13[1];
        if ((*v13 != -4096 || v15 != -4096) && (v14 != -8192 || v15 != -8192))
        {
          v16 = ((v15 >> 4) ^ (v15 >> 9) | ((unint64_t)((v14 >> 4) ^ (v14 >> 9)) << 32))
              + ~((unint64_t)((v15 >> 4) ^ (v15 >> 9)) << 32);
          v17 = (v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13);
          v18 = (9 * (v17 ^ (v17 >> 8))) ^ ((9 * (v17 ^ (v17 >> 8))) >> 15);
          v19 = ((v18 + ~(v18 << 27)) >> 31) ^ (v18 + ~((_DWORD)v18 << 27));
          v20 = *((_DWORD *)a1 + 4) - 1;
          v21 = v20 & v19;
          v22 = *a1 + 72 * v21;
          v23 = *(_QWORD *)v22;
          v24 = *(_QWORD *)(v22 + 8);
          if (v14 != *(_QWORD *)v22 || v15 != v24)
          {
            v26 = 0;
            v27 = 1;
            while (v23 != -4096 || v24 != -4096)
            {
              if (v26)
                v28 = 0;
              else
                v28 = v24 == -8192;
              if (v28 && v23 == -8192)
                v26 = v22;
              v30 = v21 + v27++;
              v21 = v30 & v20;
              v22 = *a1 + 72 * (v30 & v20);
              v23 = *(_QWORD *)v22;
              v24 = *(_QWORD *)(v22 + 8);
              if (v14 == *(_QWORD *)v22 && v15 == v24)
                goto LABEL_37;
            }
            if (v26)
              v22 = v26;
          }
LABEL_37:
          *(_QWORD *)v22 = v14;
          v32 = v13[1];
          *(_QWORD *)(v22 + 24) = 0;
          v33 = v22 + 24;
          *(_QWORD *)(v22 + 8) = v32;
          *(_QWORD *)(v22 + 16) = 4;
          v34 = (unint64_t *)(v22 + 16);
          v35 = v13[4];
          *(_QWORD *)(v22 + 32) = v35;
          if (v35 != -8192 && v35 != -4096)
          {
            if (v35)
            {
              v36 = v13[2] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v33 = *(_QWORD *)v36;
              *(_QWORD *)v36 = v34;
              *v34 = v36 | 4;
              if (*(_QWORD *)v33)
                **(_QWORD **)v33 = **(_QWORD **)v33 & 7 | v33;
            }
          }
          *(_QWORD *)(v22 + 48) = 0;
          v37 = v22 + 48;
          *(_QWORD *)(v22 + 40) = 4;
          v38 = (unint64_t *)(v22 + 40);
          v39 = v13[7];
          *(_QWORD *)(v22 + 56) = v39;
          if (v39 != -8192 && v39 != -4096)
          {
            if (v39)
            {
              v40 = v13[5] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v37 = *(_QWORD *)v40;
              *(_QWORD *)v40 = v38;
              *v38 = v40 | 4;
              if (*(_QWORD *)v37)
                **(_QWORD **)v37 = **(_QWORD **)v37 & 7 | v37;
            }
          }
          *(_DWORD *)(v22 + 64) = *((_DWORD *)v13 + 16);
          ++*((_DWORD *)a1 + 2);
          v41 = v13[7];
          if (v41 && v41 != -8192 && v41 != -4096)
          {
            v42 = v13[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v42 = v13[6];
            v43 = (unint64_t *)v13[6];
            if (v43)
            {
              *v43 = *v43 & 7 | v42;
            }
            else
            {
              v44 = v13[7];
              v45 = ***(int32x2_t ****)v44;
              v46 = (unint64_t)v45[303];
              if (v46 <= v42)
              {
                v47 = v45[305].u32[0];
                if (v46 + 16 * v47 > v42)
                {
                  v48 = v47 - 1;
                  LODWORD(v49) = v48 & ((v44 >> 4) ^ (v44 >> 9));
                  v50 = (uint64_t *)(v46 + 16 * v49);
                  v51 = *v50;
                  if (v44 != *v50)
                  {
                    v52 = 1;
                    do
                    {
                      if (v51 == -4096)
                        goto LABEL_59;
                      v53 = v49 + v52++;
                      v49 = v53 & v48;
                      v51 = *(_QWORD *)(v46 + 16 * v49);
                    }
                    while (v44 != v51);
                    v50 = (uint64_t *)(v46 + 16 * v49);
                  }
                  *v50 = -8192;
                  v45[304] = vadd_s32(v45[304], (int32x2_t)0x1FFFFFFFFLL);
                  v44 = v13[7];
LABEL_59:
                  *(_BYTE *)(v44 + 17) &= ~1u;
                }
              }
            }
          }
          v54 = v13[4];
          if (v54 && v54 != -8192 && v54 != -4096)
          {
            v55 = v13[2] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v55 = v13[3];
            v56 = (unint64_t *)v13[3];
            if (v56)
            {
              *v56 = *v56 & 7 | v55;
            }
            else
            {
              v57 = v13[4];
              v58 = ***(int32x2_t ****)v57;
              v59 = (unint64_t)v58[303];
              if (v59 <= v55)
              {
                v60 = v58[305].u32[0];
                if (v59 + 16 * v60 > v55)
                {
                  v61 = v60 - 1;
                  LODWORD(v62) = v61 & ((v57 >> 4) ^ (v57 >> 9));
                  v63 = (uint64_t *)(v59 + 16 * v62);
                  v64 = *v63;
                  if (v57 != *v63)
                  {
                    v65 = 1;
                    do
                    {
                      if (v64 == -4096)
                        goto LABEL_73;
                      v66 = v62 + v65++;
                      v62 = v66 & v61;
                      v64 = *(_QWORD *)(v59 + 16 * v62);
                    }
                    while (v57 != v64);
                    v63 = (uint64_t *)(v59 + 16 * v62);
                  }
                  *v63 = -8192;
                  v58[304] = vadd_s32(v58[304], (int32x2_t)0x1FFFFFFFFLL);
                  v57 = v13[4];
LABEL_73:
                  *(_BYTE *)(v57 + 17) &= ~1u;
                }
              }
            }
          }
        }
        v13 += 9;
      }
      while (v13 != &v4[9 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v67 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v67)
  {
    v68 = 72 * v67;
    v69 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *result = v69;
      result = (_OWORD *)((char *)result + 72);
      v68 -= 72;
    }
    while (v68);
  }
  return result;
}

_QWORD *llvm::RegToMemPass::run@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  _QWORD v7[4];
  int v8;
  char v9;

  v7[0] = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, (uint64_t)a1) + 8;
  v7[1] = 0;
  v7[2] = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::LoopAnalysis::Key, (uint64_t)a1) + 8;
  v7[3] = 0;
  v8 = 0;
  v9 = 1;
  llvm::SplitAllCriticalEdges((uint64_t)a1, (uint64_t)v7);
  sub_1C5BFEE60(a1);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  sub_1C4DDB144(a3, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
  return sub_1C4DDB144(a3, (uint64_t)&llvm::LoopAnalysis::Key);
}

const char **sub_1C5BFEE60(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  llvm::PHINode *v8;
  llvm::Type *v9;
  llvm::Value **NullValue;
  uint64_t v11;
  const char **result;
  llvm::Instruction *v13;
  llvm::Instruction *v14;
  _QWORD *v15;
  _QWORD *i;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  const char **v20;
  const char *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  const char *v28;
  const char *v29;
  const char **v30;
  _QWORD *v31;
  const char **v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  const char *v42;
  const char **v43;
  const char *v44;
  const char **v45;
  uint64_t v46;
  __int16 v47;

  v2 = a1[10];
  if (v2)
    v3 = v2 - 24;
  else
    v3 = 0;
  v4 = (uint64_t *)(v3 + 48);
  do
  {
    v5 = *v4;
    if (v5)
      v6 = v5 - 24;
    else
      v6 = 0;
    v4 = (uint64_t *)(v5 + 8);
  }
  while (*(_BYTE *)(v6 + 16) == 59);
  v7 = operator new(0x60uLL);
  v8 = (llvm::PHINode *)(v7 + 8);
  v7[13] = v7[13] & 0x38000000 | 1;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *((_QWORD *)v7 + 3) = v7 + 8;
  NullValue = llvm::Constant::getNullValue((llvm::Constant *)(**(_QWORD **)*a1 + 1960), v9);
  v11 = **(_QWORD **)*a1 + 1960;
  v44 = "reg2mem alloca point";
  v47 = 259;
  result = (const char **)llvm::BitCastInst::BitCastInst((uint64_t)v8, (uint64_t)NullValue, v11, (uint64_t)&v44, v6);
  v44 = (const char *)&v44;
  v45 = &v44;
  v46 = 0;
  v15 = a1 + 9;
  for (i = (_QWORD *)a1[10]; i != v15; i = (_QWORD *)i[1])
  {
    v17 = i - 3;
    if (!i)
      v17 = 0;
    v18 = (_QWORD *)v17[6];
    if (v18 != v17 + 5)
    {
      v19 = 0;
      v20 = &v44;
      while (1)
      {
        if (v18)
          v21 = (const char *)(v18 - 3);
        else
          v21 = 0;
        v22 = *((_QWORD *)v21 + 5);
        if (v21[16] != 59 || v22 != v3)
        {
          v24 = *((_QWORD *)v21 + 1);
          if (v24)
          {
            while (1)
            {
              v25 = *(_QWORD *)(v24 + 24);
              if (*(_QWORD *)(v25 + 40) != v22 || *(_BYTE *)(v25 + 16) == 83)
                break;
              v24 = *(_QWORD *)(v24 + 8);
              if (!v24)
                goto LABEL_29;
            }
            result = (const char **)operator new(0x18uLL);
            result[1] = (const char *)v20;
            result[2] = v21;
            *result = (const char *)&v44;
            *v20 = (const char *)result;
            ++v19;
            v20 = result;
            v45 = result;
            v46 = v19;
          }
        }
LABEL_29:
        v18 = (_QWORD *)v18[1];
        v26 = i - 3;
        if (!i)
          v26 = 0;
        if (v18 == v26 + 5)
          break;
LABEL_36:
        if (i == v15)
          goto LABEL_37;
      }
      while (1)
      {
        i = (_QWORD *)i[1];
        if (i == v15)
          break;
        v27 = i - 3;
        if (!i)
          v27 = 0;
        v18 = (_QWORD *)v27[6];
        if (v18 != v27 + 5)
          goto LABEL_36;
      }
LABEL_37:
      if (v20 != &v44)
      {
        do
        {
          result = (const char **)llvm::DemoteRegToStack((llvm *)v20[2], 0, (uint64_t)v8, v14);
          v20 = (const char **)v20[1];
        }
        while (v20 != &v44);
        v19 = v46;
      }
      if (v19)
      {
        v28 = v44;
        result = v45;
        v29 = *v45;
        *((_QWORD *)v29 + 1) = *((_QWORD *)v44 + 1);
        **((_QWORD **)v28 + 1) = v29;
        v46 = 0;
        if (result != &v44)
        {
          do
          {
            v30 = (const char **)result[1];
            operator delete(result);
            result = v30;
          }
          while (v30 != &v44);
        }
      }
      break;
    }
  }
  v31 = (_QWORD *)a1[10];
  v32 = v45;
  if (v31 != v15)
  {
    v33 = v46;
    do
    {
      v34 = v31 - 3;
      if (!v31)
        v34 = 0;
      if ((_QWORD *)v34[5] != v34 + 5)
      {
        v35 = v34[6];
        v36 = v35 - 24;
        v37 = v35 ? v35 - 24 : 0;
        if (v35 && *(_BYTE *)(v37 + 16) == 83)
        {
          do
          {
            v38 = (char *)v32;
            result = (const char **)operator new(0x18uLL);
            v32 = result;
            result[1] = v38;
            result[2] = (const char *)v36;
            *result = (const char *)&v44;
            *(_QWORD *)v38 = result;
            v39 = *(_QWORD *)(v36 + 32);
            ++v33;
            v36 = v39 - 24;
            if (v39)
              v40 = v39 - 24;
            else
              v40 = 0;
          }
          while (v39 && *(_BYTE *)(v40 + 16) == 83);
          v45 = result;
          v46 = v33;
        }
      }
      v31 = (_QWORD *)v31[1];
    }
    while (v31 != v15);
  }
  while (v32 != &v44)
  {
    result = (const char **)llvm::DemotePHIToStack((llvm *)v32[2], v8, v13);
    v32 = (const char **)v32[1];
  }
  if (v46)
  {
    v41 = v44;
    result = v45;
    v42 = *v45;
    *((_QWORD *)v42 + 1) = *((_QWORD *)v44 + 1);
    **((_QWORD **)v41 + 1) = v42;
    v46 = 0;
    if (result != &v44)
    {
      do
      {
        v43 = (const char **)result[1];
        operator delete(result);
        result = v43;
      }
      while (v43 != &v44);
    }
  }
  return result;
}

uint64_t sub_1C5BFF1C4(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeBreakCriticalEdgesPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "Demote all values to stack slots";
  *(_QWORD *)(v3 + 8) = 32;
  *(_QWORD *)(v3 + 16) = "reg2mem";
  *(_QWORD *)(v3 + 24) = 7;
  *(_QWORD *)(v3 + 32) = &unk_1ED8226F8;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5BFF320;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5BFF258(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED8226F8;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81972C0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED822700);
  if (v3 != -1)
  {
    v7[0] = sub_1C5BFF1C4;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED822700, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5BFF320()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5BFF258(v0);
}

void sub_1C5BFF34C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5BFF370(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&unk_1EF8F7638);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&unk_1EF8F7638);
}

uint64_t sub_1C5BFF3AC(llvm::FunctionPass *a1, llvm::Function *a2)
{
  if (*((_BYTE *)a2 + 16))
  {
    if (*((_BYTE *)a2 + 16) == 3 && (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
      return 0;
  }
  else if (*((llvm::Function **)a2 + 9) == (llvm::Function *)((char *)a2 + 72) && (*((_BYTE *)a2 + 34) & 0x80) == 0)
  {
    return 0;
  }
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
    return 0;
  sub_1C5BFEE60(a2);
  return 1;
}

_QWORD *llvm::RewriteStatepointsForGC::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t ResultImpl;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::MemorySSAUpdater *v11;
  uint64_t v12;

  ResultImpl = llvm::AnalysisManager<llvm::Module>::getResultImpl(a2, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, a1);
  v6 = *(_QWORD *)(a1 + 32);
  if (v6 == a1 + 24)
    goto LABEL_19;
  v7 = 0;
  v8 = *(_QWORD *)(ResultImpl + 8);
  do
  {
    if (v6)
      v9 = v6 - 56;
    else
      v9 = 0;
    if (v6 && *(_BYTE *)(v9 + 16) == 3)
    {
      if ((*(_DWORD *)(v9 + 20) & 0x7FFFFFF) == 0)
        goto LABEL_16;
    }
    else if (!*(_BYTE *)(v9 + 16) && *(_QWORD *)(v9 + 72) == v9 + 72 && (*(_BYTE *)(v9 + 34) & 0x80) == 0)
    {
      goto LABEL_16;
    }
    if (*(_QWORD *)(v9 + 72) != v9 + 72 && sub_1C5BFF5FC((llvm::Function *)v9))
    {
      v10 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v8, &llvm::DominatorTreeAnalysis::Key, v9) + 8;
      v11 = (llvm::MemorySSAUpdater *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(v8, &llvm::TargetIRAnalysis::Key, v9)+ 8);
      v12 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v8, &llvm::TargetLibraryAnalysis::Key, v9);
      v7 |= llvm::RewriteStatepointsForGC::runOnFunction(v12, (llvm *)v9, v10, v11, (uint64_t *)(v12 + 8));
    }
LABEL_16:
    v6 = *(_QWORD *)(v6 + 8);
  }
  while (v6 != a1 + 24);
  if ((v7 & 1) != 0)
  {
    sub_1C5C00258(a1);
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_DWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 48) = a3 + 80;
    *(_QWORD *)(a3 + 56) = a3 + 80;
    *(_QWORD *)(a3 + 64) = 2;
    *(_DWORD *)(a3 + 72) = 0;
    sub_1C4DDB144(a3, (uint64_t)&llvm::TargetIRAnalysis::Key);
    return sub_1C4DDB144(a3, (uint64_t)&llvm::TargetLibraryAnalysis::Key);
  }
LABEL_19:
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

BOOL sub_1C5BFF5FC(llvm::Function *a1)
{
  _QWORD *GC;
  char v2;
  BOOL v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  int v12;

  if ((*((_WORD *)a1 + 9) & 0x4000) == 0)
    return 0;
  GC = llvm::LLVMContext::getGC(**(llvm::LLVMContext ***)a1, a1);
  v2 = *((_BYTE *)GC + 23);
  v3 = v2 < 0;
  v4 = (_QWORD *)*GC;
  if (v2 >= 0)
    v4 = GC;
  v5 = v2 & 0x7F;
  if (v3)
    v5 = GC[1];
  if (v5 != 7)
  {
    if (v5 == 18)
    {
      v6 = *v4;
      v7 = v4[1];
      v8 = *((unsigned __int16 *)v4 + 8);
      v9 = v6 == 0x696F706574617473 && v7 == 0x706D6178652D746ELL;
      v10 = 25964;
      return v9 && v8 == v10;
    }
    return 0;
  }
  v12 = *(_DWORD *)v4;
  v8 = *(_DWORD *)((char *)v4 + 3);
  v9 = v12 == 1701998435;
  v10 = 1919705957;
  return v9 && v8 == v10;
}

uint64_t llvm::RewriteStatepointsForGC::runOnFunction(uint64_t a1, llvm *a2, uint64_t a3, llvm::MemorySSAUpdater *a4, uint64_t *a5)
{
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v27;
  llvm *v28;
  llvm::MemoryDependenceResults *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  llvm::ConstantAggregateZero **v37;
  uint64_t ***v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  _QWORD *v42;
  unsigned int v43;
  int v44;
  unint64_t v45;
  unsigned __int8 *v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  llvm::Value *v49;
  uint64_t v50;
  _QWORD *v51;
  _DWORD *v52;
  int v53;
  _DWORD *v54;
  _DWORD *v55;
  int v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  _QWORD *i;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  llvm::Type *v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v78;
  int v79;
  uint64_t ****v80;
  uint64_t ***v81;
  uint64_t VectorSplat;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  _DWORD *v91;
  uint64_t v92;
  uint64_t v93;
  llvm::DataLayout *v94;
  void *v95[2];
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *__p[2];
  char v101;
  _QWORD v102[4];
  __int16 v103;
  llvm::Value *v104;
  void *v105;
  uint64_t v106;
  _BYTE v107[512];
  void *v108;
  uint64_t v109;
  _BYTE v110[512];
  void *v111[2];
  _QWORD v112[36];
  char v113;
  _BYTE *v114;
  void *v115;
  uint64_t v116;
  int v117;
  _BYTE v118[64];
  _QWORD v119[3];
  __int16 v120;
  void *v121[2];
  _BYTE v122[120];
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v111[0] = v112;
  v111[1] = (void *)0x1000000000;
  v112[33] = 0;
  v112[32] = 0;
  v112[34] = a3;
  v112[35] = 0;
  v113 = 1;
  v114 = v118;
  v115 = v118;
  v116 = 8;
  v117 = 0;
  memset(v119, 0, sizeof(v119));
  v120 = 0;
  v9 = llvm::removeUnreachableBlocks(a2, (llvm::Function *)v111, 0, a4);
  llvm::DomTreeUpdater::getDomTree((llvm::DomTreeUpdater *)v111);
  v108 = v110;
  v109 = 0x4000000000;
  v105 = v107;
  v106 = 0x4000000000;
  v10 = (_QWORD *)((char *)a2 + 72);
  v11 = (_QWORD *)*((_QWORD *)a2 + 10);
  if (v11 == (_QWORD *)((char *)a2 + 72))
    goto LABEL_50;
  v93 = (uint64_t)a2;
  while (1)
  {
    v12 = v11 - 3;
    if (!v11)
      v12 = 0;
    v13 = (_QWORD *)v12[6];
    if (v13 != v12 + 5)
      break;
    v11 = (_QWORD *)v11[1];
    if (v11 == v10)
      goto LABEL_50;
  }
  v92 = (uint64_t)a4;
  while (1)
  {
    if (v13)
      v14 = (uint64_t)(v13 - 3);
    else
      v14 = 0;
    v15 = *(unsigned __int8 *)(v14 + 16) - 33;
    v16 = v15 > 0x33;
    v17 = (1 << v15) & 0x8000000000041;
    if (!v16 && v17 != 0)
    {
      v19 = *(_QWORD *)(v14 - 32);
      if ((!v19
         || *(_BYTE *)(v19 + 16)
         || *(_QWORD *)(v19 + 24) != *(_QWORD *)(v14 + 72)
         || *(_DWORD *)(v19 + 36) != 124)
        && !llvm::callsGCLeafFunction(v14, a5))
      {
        if (byte_1ED822B58 || (sub_1C5062CEC(v14, 0, (uint64_t)v121), v122[8]))
        {
          v25 = v109;
          if (v109 >= (unint64_t)HIDWORD(v109))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, (uint64_t)v110, v109 + 1, 8);
            v25 = v109;
          }
          *((_QWORD *)v108 + v25) = v14;
          LODWORD(v109) = v109 + 1;
        }
      }
    }
    v20 = *(unsigned __int8 *)(v14 + 16);
    if (v20 != 84)
      v14 = 0;
    if (v13)
    {
      if (v20 == 84)
      {
        v21 = *(_QWORD *)(v14 - 32);
        if (v21)
        {
          if (!*(_BYTE *)(v21 + 16)
            && (*(_QWORD *)(v21 + 24) == *(_QWORD *)(v14 + 72) && *(_DWORD *)(v21 + 36) == 120
             || *(_QWORD *)(v21 + 24) == *(_QWORD *)(v14 + 72) && *(_DWORD *)(v21 + 36) == 121))
          {
            v22 = v106;
            if (v106 >= HIDWORD(v106))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v105, (uint64_t)v107, v106 + 1, 8);
              *((_QWORD *)v105 + v106) = v14;
              v22 = v106;
            }
            else
            {
              *((_QWORD *)v105 + v106) = v14;
            }
            LODWORD(v106) = v22 + 1;
          }
        }
      }
    }
    v13 = (_QWORD *)v13[1];
    v23 = v11 - 3;
    if (!v11)
      v23 = 0;
    if (v13 == v23 + 5)
      break;
LABEL_40:
    if (v11 == v10)
      goto LABEL_49;
  }
  while (1)
  {
    v11 = (_QWORD *)v11[1];
    if (v11 == v10)
      break;
    v24 = v11 - 3;
    if (!v11)
      v24 = 0;
    v13 = (_QWORD *)v24[6];
    if (v13 != v24 + 5)
      goto LABEL_40;
  }
LABEL_49:
  if (!(v109 | v106))
    goto LABEL_50;
  v27 = *(_QWORD **)(v93 + 80);
  if (v27 == v10)
    goto LABEL_67;
  do
  {
    if (v27)
      v28 = (llvm *)(v27 - 3);
    else
      v28 = 0;
    if (llvm::BasicBlock::getUniquePredecessor(v28))
      v9 |= llvm::FoldSingleEntryPHINodes(v28, 0, v29);
    v27 = (_QWORD *)v27[1];
  }
  while (v27 != v10);
  v30 = *(_QWORD **)(v93 + 80);
  if (v30 == v10)
    goto LABEL_67;
  do
  {
    if (v30)
      v57 = v30 - 3;
    else
      v57 = 0;
    v58 = (_QWORD *)v57[5];
    if (v58 != v57 + 5)
    {
      v59 = v58 ? (uint64_t)(v58 - 3) : 0;
      v60 = *(unsigned __int8 *)(v59 + 16) - 40;
      v61 = v60 >= 0xFFFFFFF5 ? v59 : 0;
      if (v58)
      {
        if (*(_BYTE *)(v61 + 16) == 30 && v60 >= 0xFFFFFFF5 && (*(_DWORD *)(v61 + 20) & 0x7FFFFFF) == 3)
        {
          v63 = *(_QWORD *)(v61 - 96);
          if (*(_BYTE *)(v63 + 16) == 81)
          {
            v64 = *(_QWORD *)(v63 + 8);
            if (v64)
            {
              if (!*(_QWORD *)(v64 + 8))
              {
                llvm::Instruction::moveBefore((llvm::Instruction *)v63, (llvm::Instruction *)v61);
                LOBYTE(v9) = 1;
              }
            }
          }
        }
      }
    }
    v30 = (_QWORD *)v30[1];
  }
  while (v30 != v10);
  for (i = *(_QWORD **)(v93 + 80); ; i = (_QWORD *)i[1])
  {
    if (i == v10)
      goto LABEL_67;
    v66 = i - 3;
    if (!i)
      v66 = 0;
    v67 = (_QWORD *)v66[6];
    if (v67 != v66 + 5)
      break;
  }
  while (1)
  {
    if (v67)
      v68 = (uint64_t)(v67 - 3);
    else
      v68 = 0;
    if (*(_BYTE *)(v68 + 16) != 62)
      goto LABEL_195;
    v69 = *(_DWORD *)(v68 + 20);
    v70 = v69 & 0x7FFFFFF;
    if ((v69 & 0x7FFFFFF) != 0)
    {
      v71 = 0;
      v72 = 0;
      do
      {
        v73 = v68 - 32 * v70;
        if ((v69 & 0x40000000) != 0)
          v73 = *(_QWORD *)(v68 - 8);
        v74 = **(_QWORD **)(v73 + v71);
        if (v74)
          v75 = (*(_DWORD *)(v74 + 8) & 0xFE) == 18;
        else
          v75 = 0;
        if (v75)
          v72 = (llvm::Type *)*(unsigned int *)(v74 + 32);
        v71 += 32;
      }
      while (32 * v70 != v71);
      if ((v69 & 0x40000000) == 0)
      {
LABEL_173:
        v76 = v68 - 32 * v70;
        goto LABEL_176;
      }
    }
    else
    {
      v72 = 0;
      if ((v69 & 0x40000000) == 0)
        goto LABEL_173;
    }
    v76 = *(_QWORD *)(v68 - 8);
LABEL_176:
    if ((*(_DWORD *)(**(_QWORD **)v76 + 8) & 0xFE) != 0x12 && v72 != 0)
    {
      v78 = sub_1C4773D54((uint64_t)v121, v68, 0, 0, 0);
      v79 = *(_DWORD *)(v68 + 20);
      if ((v79 & 0x40000000) != 0)
        v80 = *(uint64_t *****)(v68 - 8);
      else
        v80 = (uint64_t ****)(v68 - 32 * (v79 & 0x7FFFFFF));
      v81 = *v80;
      LOWORD(v98) = 257;
      VectorSplat = llvm::IRBuilderBase::CreateVectorSplat(v78, v72, v81, (uint64_t)v95);
      v83 = *(_DWORD *)(v68 + 20);
      if ((v83 & 0x40000000) != 0)
        v84 = *(_QWORD *)(v68 - 8);
      else
        v84 = v68 - 32 * (v83 & 0x7FFFFFF);
      if (*(_QWORD *)v84)
      {
        **(_QWORD **)(v84 + 16) = *(_QWORD *)(v84 + 8);
        v85 = *(_QWORD *)(v84 + 8);
        if (v85)
          *(_QWORD *)(v85 + 16) = *(_QWORD *)(v84 + 16);
      }
      *(_QWORD *)v84 = VectorSplat;
      if (VectorSplat)
      {
        v88 = *(_QWORD *)(VectorSplat + 8);
        v86 = (uint64_t *)(VectorSplat + 8);
        v87 = v88;
        *(_QWORD *)(v84 + 8) = v88;
        if (v88)
          *(_QWORD *)(v87 + 16) = v84 + 8;
        *(_QWORD *)(v84 + 16) = v86;
        *v86 = v84;
      }
      if (v121[0] != v122)
        free(v121[0]);
      LOBYTE(v9) = 1;
    }
LABEL_195:
    v67 = (_QWORD *)v67[1];
    v89 = i - 3;
    if (!i)
      v89 = 0;
    if (v67 == v89 + 5)
      break;
LABEL_202:
    if (i == v10)
      goto LABEL_67;
  }
  while (1)
  {
    i = (_QWORD *)i[1];
    if (i == v10)
      break;
    v90 = i - 3;
    if (!i)
      v90 = 0;
    v67 = (_QWORD *)v90[6];
    if (v67 != v90 + 5)
      goto LABEL_202;
  }
LABEL_67:
  v95[0] = 0;
  v95[1] = 0;
  v96 = 0;
  v98 = 0;
  v99 = 0;
  v97 = 0;
  if (!(_DWORD)v106)
    goto LABEL_154;
  v31 = **(_QWORD ***)v93;
  v94 = (llvm::DataLayout *)(*(_QWORD *)(v93 + 40) + 272);
  v32 = 8 * v106;
  v33 = (uint64_t *)v105;
  while (2)
  {
    v34 = *v33;
    v35 = *(_QWORD *)(*v33 - 32);
    if (v35 && !*(_BYTE *)(v35 + 16) && *(_QWORD *)(v35 + 24) == *(_QWORD *)(v34 + 72))
      v36 = *(_DWORD *)(v35 + 36);
    else
      v36 = 0;
    v37 = *(llvm::ConstantAggregateZero ***)(v34 - 32 * (*(_DWORD *)(v34 + 20) & 0x7FFFFFF));
    v38 = (uint64_t ***)sub_1C5C0658C(v37, v95);
    if (v36 == 120)
    {
      v104 = 0;
      sub_1C4773D54((uint64_t)v121, v34, 0, 0, 0);
      v39 = *(_QWORD *)v34;
      sub_1C5C073CC(__p, v38, (uint64_t)".cast", 5, "", 0);
      v103 = 260;
      v102[0] = __p;
      v40 = sub_1C4773E38((uint64_t *)v121, 49, (unsigned __int8 *)v38, v39, (uint64_t)v102);
      if (v101 < 0)
        operator delete(__p[0]);
      if (v121[0] != v122)
        free(v121[0]);
      v104 = (llvm::Value *)v40;
      if (v40 != (unsigned __int8 *)v38)
      {
        *(_QWORD *)sub_1C62A8A44((uint64_t)v95, (uint64_t *)&v104) = v38;
        v38 = (uint64_t ***)v104;
      }
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v34, (llvm::Value *)v38, (llvm::Value *)1);
      if ((*((_BYTE *)v104 + 23) & 0x10) == 0)
        llvm::Value::takeName(v104, (llvm::Value *)v34);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v34 + 40) + 40, (uint64_t ***)v34);
      v41 = *(_QWORD *)(v34 + 24);
      v42 = *(_QWORD **)(v34 + 32);
      *v42 = v41;
      *(_QWORD *)(v41 + 8) = v42;
      *(_QWORD *)(v34 + 24) = 0;
      *(_QWORD *)(v34 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v34);
      goto LABEL_107;
    }
    v43 = *((_DWORD *)*v37 + 2);
    if ((v43 & 0xFE) == 0x12)
      v43 = *(_DWORD *)(**((_QWORD **)*v37 + 2) + 8);
    v44 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(v94, v43 >> 8) + 4);
    sub_1C4773D54((uint64_t)v121, v34, 0, 0, 0);
    LODWORD(v102[0]) = v44;
    if (v44 <= 63)
    {
      if (v44 > 31)
      {
        if (v44 == 32)
        {
          v45 = *v31 + 1960;
          goto LABEL_93;
        }
        goto LABEL_120;
      }
      switch(v44)
      {
        case 16:
          v45 = *v31 + 1936;
          break;
        case 8:
          v45 = *v31 + 1912;
          break;
        case 1:
          v45 = *v31 + 1888;
          break;
        default:
          goto LABEL_120;
      }
    }
    else
    {
      if (v44 == 64)
      {
        v45 = *v31 + 1984;
        goto LABEL_93;
      }
      if (v44 == 128)
      {
        v45 = *v31 + 2008;
        goto LABEL_93;
      }
LABEL_120:
      v52 = sub_1C5270984(*v31 + 2168, v102);
      v45 = *((_QWORD *)v52 + 1);
      if (!v45)
      {
        v91 = v52;
        v45 = sub_1C484358C(*v31 + 2040, 24, 3);
        v53 = v102[0];
        *(_QWORD *)v45 = v31;
        *(_QWORD *)(v45 + 16) = 0;
        *(_DWORD *)(v45 + 8) = (v53 << 8) | 0xD;
        *(_DWORD *)(v45 + 12) = 0;
        *((_QWORD *)v91 + 1) = v45;
      }
    }
LABEL_93:
    sub_1C5C073CC(__p, v38, (uint64_t)".int", 4, "", 0);
    v103 = 260;
    v102[0] = __p;
    v46 = sub_1C4773E38((uint64_t *)v121, 47, (unsigned __int8 *)v38, v45, (uint64_t)v102);
    if (v101 < 0)
      operator delete(__p[0]);
    LODWORD(v102[0]) = v44;
    if (v44 <= 63)
    {
      if (v44 <= 31)
      {
        switch(v44)
        {
          case 16:
            v47 = (_QWORD *)(*v31 + 1936);
            goto LABEL_103;
          case 8:
            v47 = (_QWORD *)(*v31 + 1912);
            goto LABEL_103;
          case 1:
            v47 = (_QWORD *)(*v31 + 1888);
            goto LABEL_103;
        }
      }
      else if (v44 == 32)
      {
        v47 = (_QWORD *)(*v31 + 1960);
        goto LABEL_103;
      }
LABEL_124:
      v54 = sub_1C5270984(*v31 + 2168, v102);
      v47 = (_QWORD *)*((_QWORD *)v54 + 1);
      if (!v47)
      {
        v55 = v54;
        v47 = (_QWORD *)sub_1C484358C(*v31 + 2040, 24, 3);
        v56 = v102[0];
        *v47 = v31;
        v47[2] = 0;
        v47[1] = (v56 << 8) | 0xDu;
        *((_QWORD *)v55 + 1) = v47;
      }
      goto LABEL_103;
    }
    if (v44 != 64)
    {
      if (v44 == 128)
      {
        v47 = (_QWORD *)(*v31 + 2008);
        goto LABEL_103;
      }
      goto LABEL_124;
    }
    v47 = (_QWORD *)(*v31 + 1984);
LABEL_103:
    sub_1C5C073CC(__p, (uint64_t ***)v37, (uint64_t)".int", 4, "", 0);
    v103 = 260;
    v102[0] = __p;
    v48 = sub_1C4773E38((uint64_t *)v121, 47, (unsigned __int8 *)v37, (uint64_t)v47, (uint64_t)v102);
    if (v101 < 0)
      operator delete(__p[0]);
    v103 = 257;
    v49 = (llvm::Value *)sub_1C47733F8((uint64_t)v121, (uint64_t)v48, (uint64_t)v46, (uint64_t)v102, 0, 0);
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v34, v49, (llvm::Value *)1);
    llvm::Value::takeName(v49, (llvm::Value *)v34);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v34 + 40) + 40, (uint64_t ***)v34);
    v50 = *(_QWORD *)(v34 + 24);
    v51 = *(_QWORD **)(v34 + 32);
    *v51 = v50;
    *(_QWORD *)(v50 + 8) = v51;
    *(_QWORD *)(v34 + 24) = 0;
    *(_QWORD *)(v34 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v34);
    if (v121[0] != v122)
      free(v121[0]);
LABEL_107:
    ++v33;
    v32 -= 8;
    if (v32)
      continue;
    break;
  }
  LOBYTE(v9) = 1;
LABEL_154:
  if ((_DWORD)v109)
    LOBYTE(v9) = v9 | sub_1C5C00F74(v93, a3, v92, (uint64_t)&v108);
  sub_1C6176BF8(v95);
LABEL_50:
  if (v105 != v107)
    free(v105);
  if (v108 != v110)
    free(v108);
  llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)v111);
  v108 = v119;
  sub_1C50B10F0((void ***)&v108);
  if (v115 != v114)
    free(v115);
  if (v111[0] != v112)
    free(v111[0]);
  return v9 & 1;
}

void sub_1C5C00258(uint64_t a1)
{
  uint64_t v1;
  uint64_t ***v3;
  llvm::LLVMContext *v4;
  llvm::Type *v5;
  int *v6;
  int *v7;
  int *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t j;
  uint64_t v20;
  uint64_t v21;
  llvm::MDNode *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ***v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t ***v33;
  uint64_t ***v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD *v43;
  int v44;
  BOOL v45;
  unsigned int v46;
  uint64_t v47;
  llvm::MDNode **v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  BOOL v52;
  uint64_t v53;
  int v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t **v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  llvm::UndefValue *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  _BYTE v83[32];
  uint64_t v84;
  void *v85[2];
  _QWORD **v86;
  _QWORD *v87[13];

  v87[11] = *(_QWORD **)MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v80 = a1 + 24;
  if (v1 == a1 + 24)
    return;
  do
  {
    if (v1)
      v3 = (uint64_t ***)(v1 - 56);
    else
      v3 = 0;
    v4 = (llvm::LLVMContext *)*((unsigned int *)v3 + 9);
    if ((_DWORD)v4)
    {
      v3[14] = (uint64_t **)llvm::Intrinsic::getAttributes((llvm::Intrinsic *)**v3, v4);
      goto LABEL_25;
    }
    v87[0] = 0;
    v87[1] = 0;
    v86 = v87;
    *(_OWORD *)v85 = xmmword_1C866A8A0;
    if ((*((_BYTE *)v3 + 18) & 1) == 0)
    {
      v6 = (int *)v3[11];
LABEL_9:
      v7 = v6;
      goto LABEL_10;
    }
    llvm::Function::BuildLazyArguments((llvm::Function *)v3);
    v6 = (int *)v3[11];
    if ((*((_WORD *)v3 + 9) & 1) == 0)
      goto LABEL_9;
    llvm::Function::BuildLazyArguments((llvm::Function *)v3);
    v7 = (int *)v3[11];
LABEL_10:
    v8 = &v7[10 * (_QWORD)v3[12]];
    while (v6 != v8)
    {
      if (*(_BYTE *)(*(_QWORD *)v6 + 8) == 15)
        llvm::Function::removeParamAttrs((uint64_t)v3, v6[8], (uint64_t)v85);
      v6 += 10;
    }
    if (*(_BYTE *)(*v3[3][2] + 8) == 15)
    {
      v10 = (uint64_t *)(v3 + 14);
      v9 = v3[14];
      if (v9 && *((_DWORD *)v9 + 2) >= 2u)
        v11 = v9[6];
      else
        v11 = 0;
      v12 = **v3;
      *(_QWORD *)v83 = v11;
      v13 = llvm::AttributeSet::removeAttributes((uint64_t *)v83, v12, (uint64_t)v85);
      if (v11 == (uint64_t *)v13)
        v14 = *v10;
      else
        v14 = llvm::AttributeList::setAttributesAtIndex(v3 + 14, v12, 0, v13);
      *v10 = v14;
    }
    for (i = 0; i != 8; ++i)
      v3[14] = (uint64_t **)llvm::AttributeList::removeAttributeAtIndex((uint64_t *)v3 + 14, **v3, -1, dword_1C866A8FC[i]);
    sub_1C5010E9C((uint64_t)&v86, v87[0]);
LABEL_25:
    v1 = *(_QWORD *)(v1 + 8);
  }
  while (v1 != v80);
  v16 = *(_QWORD *)(a1 + 32);
  if (v16 == v80)
    return;
  while (2)
  {
    v17 = v16 - 56;
    if (!v16)
      v17 = 0;
    v18 = v17 + 72;
    if (*(_QWORD *)(v17 + 72) == v17 + 72)
      goto LABEL_130;
    v81 = **(uint64_t ***)v17;
    v85[0] = &v86;
    v85[1] = (void *)0xC00000000;
    for (j = *(_QWORD *)(v17 + 80); ; j = *(_QWORD *)(j + 8))
    {
      if (j == v18)
        goto LABEL_130;
      v20 = j - 24;
      if (!j)
        v20 = 0;
      v21 = *(_QWORD *)(v20 + 48);
      if (v21 != v20 + 40)
        break;
    }
    while (2)
    {
      v33 = (uint64_t ***)(v21 - 24);
      if (v21)
        v34 = (uint64_t ***)(v21 - 24);
      else
        v34 = 0;
      if (*((_BYTE *)v34 + 16) == 84)
      {
        v35 = (uint64_t)*(v34 - 4);
        if (v35)
        {
          if (!*(_BYTE *)(v35 + 16)
            && *(uint64_t ***)(v35 + 24) == v34[9]
            && (*(_BYTE *)(v35 + 33) & 0x20) != 0
            && *(_DWORD *)(*(_QWORD *)(v21 - 56) + 36) == 164)
          {
            v36 = LODWORD(v85[1]);
            if (LODWORD(v85[1]) >= (unint64_t)HIDWORD(v85[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v85, (uint64_t)&v86, LODWORD(v85[1]) + 1, 8);
              v36 = LODWORD(v85[1]);
            }
            *((_QWORD *)v85[0] + v36) = v33;
            ++LODWORD(v85[1]);
            goto LABEL_116;
          }
        }
      }
      if ((*((_BYTE *)v34 + 23) & 0x20) != 0)
      {
        v37 = ***v34;
        *(_QWORD *)v83 = v34;
        v38 = *(_DWORD *)(v37 + 2496);
        if (!v38)
        {
          v23 = 0;
          goto LABEL_49;
        }
        v39 = *(_QWORD *)(v37 + 2480);
        v40 = v38 - 1;
        v41 = v40 & ((v34 >> 4) ^ (v34 >> 9));
        v24 = (_QWORD *)(v39 + 40 * v41);
        v42 = *v24;
        if ((uint64_t ***)*v24 != v34)
        {
          v43 = 0;
          v44 = 1;
          while (v42 != -4096)
          {
            if (v43)
              v45 = 0;
            else
              v45 = v42 == -8192;
            if (v45)
              v43 = v24;
            v46 = v41 + v44++;
            v41 = v46 & v40;
            v24 = (_QWORD *)(v39 + 40 * v41);
            v42 = *v24;
            if ((uint64_t ***)*v24 == v34)
              goto LABEL_81;
          }
          if (v43)
            v23 = v43;
          else
            v23 = v24;
LABEL_49:
          v24 = sub_1C541AB24(v37 + 2480, (uint64_t)v83, (uint64_t *)v83, v23);
          v25 = *(_QWORD *)v83;
          v24[4] = 0;
          v24[3] = 0;
          *v24 = v25;
          v24[1] = v24 + 3;
          v24[2] = 0x100000000;
        }
LABEL_81:
        v47 = *((unsigned int *)v24 + 4);
        if ((_DWORD)v47)
        {
          v48 = (llvm::MDNode **)(v24[1] + 8);
          v49 = 16 * v47;
          while (*((_DWORD *)v48 - 2) != 1)
          {
            v48 += 2;
            v49 -= 16;
            if (!v49)
              goto LABEL_85;
          }
          if (*v48)
          {
            v22 = llvm::MDBuilder::createMutableTBAAAccessTag(&v81, *v48);
            if (v22 || v34[6] || (*((_BYTE *)v34 + 23) & 0x20) != 0)
              llvm::Value::setMetadata((llvm::Value *)v34, 1, v22);
          }
        }
      }
LABEL_85:
      v50 = *((unsigned __int8 *)v34 + 16);
      if ((v50 & 0xFE) == 0x3C)
      {
        *(_OWORD *)v83 = xmmword_1C866A91C;
        *(_OWORD *)&v83[12] = *(__int128 *)((char *)&xmmword_1C866A91C + 12);
        llvm::Instruction::dropUnknownNonDebugMetadata(v34, (unsigned int *)v83, 7);
        v50 = *((unsigned __int8 *)v34 + 16);
      }
      *(_QWORD *)&v83[24] = 0;
      v84 = 0;
      *(_QWORD *)&v83[16] = &v83[24];
      *(_OWORD *)v83 = xmmword_1C866A8A0;
      v51 = v50 - 33;
      v52 = v51 > 0x33;
      v53 = (1 << v51) & 0x8000000000041;
      if (!v52 && v53 != 0)
      {
        v55 = *(unsigned __int8 *)(v21 - 8);
        if (v55 == 84)
        {
          v28 = 0;
        }
        else if (v55 == 39)
        {
          v28 = (*(_DWORD *)(v21 + 56) + 1);
        }
        else
        {
          v28 = 2;
        }
        v56 = *(_DWORD *)(v21 - 4);
        if (v56 < 0 && (v29 = &v33[-4 * (v56 & 0x7FFFFFF)], v30 = (uint64_t)*(v29 - 1), (v30 & 0xFFFFFFFF0) != 0))
        {
          v31 = -(uint64_t)(v56 & 0x7FFFFFF);
          v32 = (*((_DWORD *)v29 - 3) - *(_DWORD *)((char *)v29 - v30));
        }
        else
        {
          v32 = 0;
          v31 = -(uint64_t)(v56 & 0x7FFFFFF);
        }
        v57 = -32 * v28 - 32 * v32 - 32 * v31 - 32;
        if ((v57 & 0x1FFFFFFFE0) != 0)
        {
          v58 = 0;
          v59 = (uint64_t *)(v21 + 40);
          v60 = (v57 >> 5);
          do
          {
            v61 = *((unsigned __int8 *)*(&v33[4 * v58++])[-4 * (*(_DWORD *)(v21 - 4) & 0x7FFFFFF)] + 8);
            if (v61 == 15)
            {
              v62 = *v59;
              if (*v59 && (v58 + 1) < *(_DWORD *)(v62 + 8))
                v63 = *(_QWORD *)(v62 + 8 * (v58 + 1) + 40);
              else
                v63 = 0;
              v64 = **v33;
              v82 = v63;
              v65 = llvm::AttributeSet::removeAttributes(&v82, v64, (uint64_t)v83);
              if (v63 == v65)
                v66 = *v59;
              else
                v66 = llvm::AttributeList::setAttributesAtIndex((_QWORD *)(v21 + 40), v64, v58, v65);
              *v59 = v66;
            }
          }
          while (v58 != v60);
        }
        v67 = *v33;
        if (*((_BYTE *)*v33 + 8) == 15)
        {
          v69 = (uint64_t *)(v21 + 40);
          v68 = *(_QWORD *)(v21 + 40);
          if (v68 && *(_DWORD *)(v68 + 8) >= 2u)
            v26 = *(_QWORD *)(v68 + 48);
          else
            v26 = 0;
          v70 = *v67;
          v82 = v26;
          v71 = llvm::AttributeSet::removeAttributes(&v82, v70, (uint64_t)v83);
          if (v26 == v71)
            v27 = *v69;
          else
            v27 = llvm::AttributeList::setAttributesAtIndex((_QWORD *)(v21 + 40), v70, 0, v71);
          *v69 = v27;
        }
      }
      sub_1C5010E9C((uint64_t)&v83[16], *(_QWORD **)&v83[24]);
LABEL_116:
      v21 = *(_QWORD *)(v21 + 8);
      v72 = j - 24;
      if (!j)
        v72 = 0;
      if (v21 != v72 + 40)
      {
LABEL_123:
        if (j == v18)
          goto LABEL_124;
        continue;
      }
      break;
    }
    while (1)
    {
      j = *(_QWORD *)(j + 8);
      if (j == v18)
        break;
      v73 = j - 24;
      if (!j)
        v73 = 0;
      v21 = *(_QWORD *)(v73 + 48);
      if (v21 != v73 + 40)
        goto LABEL_123;
    }
LABEL_124:
    v74 = (uint64_t *)v85[0];
    if (LODWORD(v85[1]))
    {
      v75 = 8 * LODWORD(v85[1]);
      do
      {
        v76 = *v74++;
        v77 = llvm::UndefValue::get(*(llvm::UndefValue **)v76, v5);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v76, v77, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v76 + 40) + 40, (uint64_t ***)v76);
        v78 = *(_QWORD *)(v76 + 24);
        v79 = *(_QWORD **)(v76 + 32);
        *v79 = v78;
        *(_QWORD *)(v78 + 8) = v79;
        *(_QWORD *)(v76 + 24) = 0;
        *(_QWORD *)(v76 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v76);
        v75 -= 8;
      }
      while (v75);
      v74 = (uint64_t *)v85[0];
    }
    if (v74 != (uint64_t *)&v86)
      free(v74);
LABEL_130:
    v16 = *(_QWORD *)(v16 + 8);
    if (v16 != v80)
      continue;
    break;
  }
}

uint64_t llvm::createRewriteStatepointsForGCLegacyPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5C009F4(v1);
}

uint64_t sub_1C5C009F4(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED822709;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E8197360;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(qword_1ED822710);
  if (v3 != -1)
  {
    v7[0] = sub_1C5C00ABC;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(qword_1ED822710, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5C00ABC(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeDominatorTreeWrapperPassPass(a1);
  llvm::initializeTargetTransformInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Make relocations explicit at statepoints";
  *(_QWORD *)(v2 + 8) = 40;
  *(_QWORD *)(v2 + 16) = "rewrite-statepoints-for-gc";
  *(_QWORD *)(v2 + 24) = 26;
  *(_QWORD *)(v2 + 32) = &unk_1ED822709;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5C06564;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

llvm *sub_1C5C00B58(uint64_t a1)
{
  llvm *v2;
  llvm::raw_ostream *v3;
  int v4;
  char *v5;
  const char *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t ***v9;
  void *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ****v18;
  uint64_t ***v19;
  int v20;
  int v21;
  uint64_t ***v22;
  size_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t ***v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ****v31;
  uint64_t ***v32;
  int v33;
  int v34;
  size_t *v35;
  const void *v36;
  size_t v37;
  size_t v38;
  llvm::raw_ostream *v39;
  llvm *result;
  _BYTE *v41;
  char v42;

  v2 = llvm::dbgs((llvm *)a1);
  v3 = v2;
  v4 = *(_DWORD *)(a1 + 8);
  if (v4 == 2)
  {
    v5 = (char *)*((_QWORD *)v2 + 4);
    if (*((char **)v2 + 3) == v5)
    {
      v6 = "C";
      goto LABEL_10;
    }
    v42 = 67;
  }
  else if (v4 == 1)
  {
    v5 = (char *)*((_QWORD *)v2 + 4);
    if (*((char **)v2 + 3) == v5)
    {
      v6 = "B";
      goto LABEL_10;
    }
    v42 = 66;
  }
  else
  {
    if (v4)
      goto LABEL_11;
    v5 = (char *)*((_QWORD *)v2 + 4);
    if (*((char **)v2 + 3) == v5)
    {
      v6 = "U";
LABEL_10:
      llvm::raw_ostream::write(v2, v6, 1uLL);
      goto LABEL_11;
    }
    v42 = 85;
  }
  *v5 = v42;
  ++*((_QWORD *)v2 + 4);
LABEL_11:
  v7 = (_DWORD *)*((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 3) - (_QWORD)v7 > 6uLL)
  {
    *(_DWORD *)((char *)v7 + 3) = 543519585;
    *v7 = 1633822752;
    *((_QWORD *)v3 + 4) += 7;
  }
  else
  {
    v3 = llvm::raw_ostream::write(v3, " (base ", 7uLL);
  }
  llvm::write_hex(v3, *(_QWORD *)(a1 + 16), 3, 0, 0);
  v8 = *((_QWORD *)v3 + 4);
  if ((unint64_t)(*((_QWORD *)v3 + 3) - v8) > 2)
  {
    *(_BYTE *)(v8 + 2) = 32;
    *(_WORD *)v8 = 11552;
    *((_QWORD *)v3 + 4) += 3;
  }
  else
  {
    v3 = llvm::raw_ostream::write(v3, " - ", 3uLL);
  }
  v9 = *(uint64_t ****)(a1 + 16);
  if (v9)
  {
    if ((*((_BYTE *)v9 + 23) & 0x10) == 0)
      goto LABEL_30;
    v14 = ***v9;
    v15 = *(_QWORD *)(v14 + 152);
    v16 = *(unsigned int *)(v14 + 168);
    if ((_DWORD)v16)
    {
      LODWORD(v17) = (v16 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      v18 = (uint64_t ****)(v15 + 16 * v17);
      v19 = *v18;
      if (*v18 == v9)
        goto LABEL_26;
      v20 = 1;
      while (v19 != (uint64_t ***)-4096)
      {
        v21 = v17 + v20++;
        v17 = v21 & (v16 - 1);
        v19 = *(uint64_t ****)(v15 + 16 * v17);
        if (v19 == v9)
        {
          v18 = (uint64_t ****)(v15 + 16 * v17);
          goto LABEL_26;
        }
      }
    }
    v18 = (uint64_t ****)(v15 + 16 * v16);
LABEL_26:
    v22 = v18[1];
    v23 = (size_t)*v22;
    v12 = (const char *)(v22 + 2);
    v13 = v23;
    v11 = (_QWORD *)((char *)v3 + 32);
    v10 = (void *)*((_QWORD *)v3 + 4);
    if (v23 <= *((_QWORD *)v3 + 3) - (_QWORD)v10)
    {
      if (!v13)
        goto LABEL_30;
      goto LABEL_29;
    }
LABEL_27:
    v3 = llvm::raw_ostream::write(v3, v12, v13);
    goto LABEL_30;
  }
  v11 = (_QWORD *)((char *)v3 + 32);
  v10 = (void *)*((_QWORD *)v3 + 4);
  v12 = "nullptr";
  v13 = 7;
  if (*((_QWORD *)v3 + 3) - (_QWORD)v10 <= 6uLL)
    goto LABEL_27;
LABEL_29:
  memcpy(v10, v12, v13);
  *v11 += v13;
LABEL_30:
  v24 = (_BYTE *)*((_QWORD *)v3 + 4);
  if (*((_BYTE **)v3 + 3) == v24)
  {
    v3 = llvm::raw_ostream::write(v3, ")", 1uLL);
    v25 = *((_QWORD *)v3 + 4);
  }
  else
  {
    *v24 = 41;
    v25 = *((_QWORD *)v3 + 4) + 1;
    *((_QWORD *)v3 + 4) = v25;
  }
  if ((unint64_t)(*((_QWORD *)v3 + 3) - v25) > 5)
  {
    *(_WORD *)(v25 + 4) = 8224;
    *(_DWORD *)v25 = 1919903264;
    *((_QWORD *)v3 + 4) += 6;
  }
  else
  {
    v3 = llvm::raw_ostream::write(v3, " for  ", 6uLL);
  }
  v26 = *(uint64_t ****)a1;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 23) & 0x10) == 0)
  {
    v39 = (llvm::raw_ostream *)*((_QWORD *)v3 + 4);
    goto LABEL_46;
  }
  v27 = ***v26;
  v28 = *(_QWORD *)(v27 + 152);
  v29 = *(unsigned int *)(v27 + 168);
  if ((_DWORD)v29)
  {
    LODWORD(v30) = (v29 - 1) & ((v26 >> 4) ^ (v26 >> 9));
    v31 = (uint64_t ****)(v28 + 16 * v30);
    v32 = *v31;
    if (*v31 == v26)
      goto LABEL_42;
    v33 = 1;
    while (v32 != (uint64_t ***)-4096)
    {
      v34 = v30 + v33++;
      v30 = v34 & (v29 - 1);
      v32 = *(uint64_t ****)(v28 + 16 * v30);
      if (v32 == v26)
      {
        v31 = (uint64_t ****)(v28 + 16 * v30);
        goto LABEL_42;
      }
    }
  }
  v31 = (uint64_t ****)(v28 + 16 * v29);
LABEL_42:
  v35 = (size_t *)v31[1];
  v38 = *v35;
  v36 = v35 + 2;
  v37 = v38;
  v39 = (llvm::raw_ostream *)*((_QWORD *)v3 + 4);
  if (v38 <= *((_QWORD *)v3 + 3) - (_QWORD)v39)
  {
    if (v37)
    {
      memcpy(v39, v36, v37);
      v39 = (llvm::raw_ostream *)(*((_QWORD *)v3 + 4) + v37);
      *((_QWORD *)v3 + 4) = v39;
    }
  }
  else
  {
    v3 = llvm::raw_ostream::write(v3, (const char *)v36, v37);
    v39 = (llvm::raw_ostream *)*((_QWORD *)v3 + 4);
  }
LABEL_46:
  if (*((llvm::raw_ostream **)v3 + 3) == v39)
  {
    v39 = llvm::raw_ostream::write(v3, ":", 1uLL);
  }
  else
  {
    *(_BYTE *)v39 = 58;
    ++*((_QWORD *)v3 + 4);
  }
  result = llvm::dbgs(v39);
  v41 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v41 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v41 + 1;
  *v41 = 10;
  return result;
}

unint64_t sub_1C5C00F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;
  uint64_t *v6;
  void **v7;
  void **v8;
  uint64_t *v9;
  llvm::Value *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  llvm *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  int64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  void **v36;
  void **v37;
  void *v38;
  llvm::ConstantAggregateZero **v39;
  llvm::raw_ostream *v40;
  void *v41;
  llvm::Value **v42;
  llvm::Value **i;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  void **v48;
  void **v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t j;
  uint64_t v57;
  uint64_t *v58;
  llvm::Value **v59;
  uint64_t v60;
  llvm *v61;
  llvm::raw_ostream *v62;
  void *v63;
  llvm::Value **v64;
  llvm::Value **k;
  char *v66;
  char *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  llvm::Value **v76;
  uint64_t v77;
  uint64_t *v78;
  _QWORD *v79;
  size_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  _QWORD *v90;
  char *v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  const void **v95;
  char *v96;
  unint64_t v97;
  unsigned int *v98;
  unsigned int v99;
  unint64_t v100;
  _BYTE *v101;
  _QWORD *v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  llvm::Value **v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t n;
  uint64_t v114;
  llvm::Instruction *v115;
  llvm::Value *v116;
  llvm::Instruction **v117;
  uint64_t v118;
  BOOL v119;
  uint64_t v120;
  uint64_t *v121;
  llvm::Instruction *v122;
  llvm::Value *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  llvm::Instruction **v131;
  llvm::Instruction *v132;
  int v133;
  int v134;
  llvm::Instruction *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  llvm::User *v139;
  llvm::Value *v140;
  llvm::Value *v141;
  uint64_t v142;
  llvm::ValueSymbolTable *v143;
  unsigned int v144;
  BOOL v145;
  uint64_t v146;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t ii;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  llvm::Value *v156;
  char *v157;
  llvm::Value **v158;
  _QWORD *v159;
  llvm::Value **v160;
  _QWORD *v161;
  uint64_t v162;
  llvm::Instruction *v163;
  llvm::Value *v164;
  llvm::Instruction **v165;
  uint64_t v166;
  uint64_t *v167;
  llvm::Instruction *v168;
  llvm::Value *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  llvm::Instruction **v177;
  llvm::Instruction *v178;
  int v179;
  int v180;
  llvm::Instruction *v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  llvm::User *v185;
  llvm::Value *v186;
  llvm::Value *v187;
  uint64_t v188;
  llvm::ValueSymbolTable *v189;
  llvm::Instruction *v190;
  llvm::Value *v191;
  llvm::Instruction **v192;
  uint64_t v193;
  uint64_t *v194;
  llvm::Instruction *v195;
  llvm::Value *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  llvm::Instruction **v204;
  llvm::Instruction *v205;
  int v206;
  int v207;
  llvm::Instruction *v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  llvm::User *v212;
  llvm::Value *v213;
  llvm::Value *v214;
  uint64_t v215;
  llvm::ValueSymbolTable *v216;
  int v217;
  int v218;
  void **v219;
  uint64_t v220;
  void *v221;
  llvm::Value *v222;
  _QWORD *v223;
  uint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  char *v229;
  unint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  _QWORD *v233;
  unsigned int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  llvm *v239;
  llvm *v240;
  llvm::raw_ostream *v241;
  void *v242;
  uint64_t ***v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t ****v248;
  uint64_t ***v249;
  int v250;
  int v251;
  _OWORD *v252;
  llvm::Value **v253;
  llvm::Value **v254;
  llvm::Value *v255;
  llvm *v256;
  llvm::raw_ostream *v257;
  _BYTE *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  llvm::Value **v263;
  llvm::Value *v264;
  int v265;
  int v266;
  size_t *v267;
  const void *v268;
  size_t v269;
  size_t v270;
  _BYTE *v271;
  _BYTE *v272;
  size_t *v273;
  const void *v274;
  size_t v275;
  size_t v276;
  llvm::raw_ostream *v277;
  llvm *v278;
  llvm::raw_ostream *v279;
  uint64_t v280;
  _BYTE *v281;
  uint64_t v282;
  uint64_t *v283;
  llvm::Value *v284;
  _QWORD *v285;
  llvm::PointerType **v286;
  _DWORD *v287;
  char *v288;
  llvm::PointerType *v289;
  llvm::Type *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t i3;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _QWORD *v298;
  _QWORD *v299;
  uint64_t v300;
  uint64_t v301;
  llvm::PointerType **v302;
  unsigned int v303;
  llvm::PointerType **v304;
  int v305;
  unsigned int v306;
  _DWORD *v307;
  char *v308;
  llvm::PointerType *v309;
  llvm::Type *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t i4;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  llvm::PointerType *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  llvm::Value *v323;
  llvm::Value *v324;
  _DWORD *v325;
  uint64_t v326;
  BOOL v327;
  llvm::Instruction *v328;
  uint64_t v329;
  uint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  unsigned int v333;
  uint64_t v334;
  _QWORD *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t i5;
  uint64_t v339;
  uint64_t v340;
  BOOL v341;
  llvm::Instruction *v342;
  llvm::ConstantPointerNull ***v343;
  uint64_t v344;
  llvm::ConstantPointerNull **v345;
  llvm::Value *v346;
  _DWORD *v347;
  unsigned int v348;
  uint64_t v349;
  llvm::Instruction *v351;
  llvm::ConstantPointerNull ***v352;
  uint64_t v353;
  llvm::ConstantPointerNull **v354;
  llvm::Value *v355;
  _DWORD *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t i6;
  uint64_t v360;
  unsigned int v361;
  uint64_t v362;
  llvm::Instruction *v364;
  llvm::ConstantPointerNull ***v365;
  uint64_t v366;
  llvm::ConstantPointerNull **v367;
  llvm::Value *v368;
  _DWORD *v369;
  uint64_t *v370;
  uint64_t v371;
  void *v372;
  uint64_t **v373;
  uint64_t v374;
  uint64_t *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  char *v380;
  uint64_t v381;
  uint64_t v382;
  char *v383;
  char *v384;
  char *v385;
  uint64_t v386;
  char *v387;
  void *v388;
  int v389;
  llvm::raw_ostream *v390;
  uint64_t v391;
  llvm::Value *v392;
  llvm::raw_ostream *v393;
  llvm *v394;
  llvm::raw_ostream *v395;
  uint64_t v396;
  llvm::Value *v397;
  llvm::raw_ostream *v398;
  llvm *v399;
  _BYTE *v400;
  llvm::Value *v401;
  llvm::Value *v402;
  llvm::raw_ostream *v403;
  uint64_t v404;
  llvm::raw_ostream *v405;
  llvm *v406;
  llvm::raw_ostream *v407;
  uint64_t v408;
  llvm::raw_ostream *v409;
  llvm *v410;
  _BYTE *v411;
  unint64_t v412;
  unint64_t v413;
  uint64_t v414;
  char *v415;
  uint64_t *v416;
  uint64_t *v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  int v425;
  int v426;
  uint64_t v427;
  _QWORD *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  int v433;
  _QWORD *v434;
  uint64_t v435;
  uint64_t v436;
  char v437;
  char v438;
  char v439;
  int v440;
  unsigned int v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  int v445;
  uint64_t v446;
  unsigned __int8 v447;
  unint64_t v448;
  unsigned int v449;
  int jj;
  unsigned int v451;
  uint64_t v452;
  _QWORD *v453;
  unint64_t v455;
  char v456;
  int v457;
  uint64_t v458;
  uint64_t v459;
  int v460;
  uint64_t v461;
  unsigned __int8 v462;
  unint64_t v463;
  unsigned int v464;
  int mm;
  unsigned int v466;
  uint64_t v467;
  _QWORD *v468;
  uint64_t v470;
  int v471;
  uint64_t v472;
  unsigned __int8 v473;
  unint64_t v474;
  unsigned int v475;
  int v476;
  unsigned int v477;
  uint64_t v478;
  _QWORD *v479;
  BOOL v480;
  uint64_t v481;
  uint64_t v482;
  int v483;
  uint64_t v484;
  unsigned __int8 v485;
  unint64_t v486;
  unsigned int v487;
  int kk;
  unsigned int v489;
  _QWORD *v490;
  uint64_t v492;
  uint64_t v493;
  unsigned int v494;
  unsigned int v495;
  int v496;
  unsigned int v497;
  int v498;
  llvm::PointerType *inserted;
  llvm::ValueHandleBase *v500;
  int v501;
  unsigned int v502;
  uint64_t **v503;
  uint64_t v504;
  uint64_t v505;
  unsigned __int8 *v506;
  unsigned __int8 *v507;
  uint64_t v508;
  uint64_t v509;
  unsigned __int8 *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t *v520;
  uint64_t v521;
  unsigned int v522;
  uint64_t **v523;
  uint64_t v524;
  uint64_t v525;
  unint64_t result;
  llvm::PointerType *v527;
  _QWORD *v528;
  uint64_t v529;
  char *v530;
  uint64_t *v531;
  llvm::PointerType *v532;
  llvm::ValueHandleBase *v533;
  size_t v534;
  llvm::ValueHandleBase *v535;
  uint64_t v536;
  __int16 v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  BOOL v541;
  uint64_t v542;
  unsigned __int8 *v543;
  uint64_t v544;
  BOOL v545;
  uint64_t v546;
  unsigned __int8 *v547;
  unsigned __int8 *v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  unsigned __int8 *v555;
  unsigned __int8 **v556;
  unsigned int v557;
  uint64_t v558;
  uint64_t v560;
  uint64_t v561;
  unsigned __int8 *v562;
  unsigned __int8 *v563;
  unsigned __int8 *v564;
  uint64_t nn;
  uint64_t v566;
  uint64_t v567;
  unint64_t v568;
  unint64_t v569;
  unint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t i1;
  uint64_t v576;
  unsigned int v577;
  uint64_t v578;
  uint64_t v580;
  uint64_t v581;
  unsigned __int8 *v582;
  llvm::LLVMContext **v583;
  unint64_t v584;
  unint64_t v585;
  char *v586;
  unint64_t v587;
  unint64_t v588;
  char *v589;
  char *v590;
  char *i2;
  __int128 v592;
  char *v593;
  char *v594;
  __int128 v595;
  unsigned int v596;
  uint64_t v597;
  const char *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t *v603;
  uint64_t v604;
  int v605;
  int v606;
  _QWORD *v607;
  uint64_t v608;
  uint64_t GCResult;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  unint64_t v613;
  unint64_t v614;
  char *v615;
  char *v616;
  char *v617;
  char *v618;
  __int128 v619;
  unint64_t v620;
  uint64_t v621;
  uint64_t v622;
  unsigned int v623;
  unsigned int v624;
  uint64_t v625;
  BOOL v626;
  int v627;
  unint64_t v628;
  int v629;
  unint64_t v630;
  unsigned int v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t m;
  uint64_t v638;
  uint64_t v639;
  int v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  int v644;
  uint64_t v645;
  uint64_t v646;
  char v647;
  void **v648;
  unsigned int v649;
  uint64_t v650;
  uint64_t *v651;
  uint64_t v652;
  uint64_t v653;
  int v654;
  BOOL v655;
  uint64_t v656;
  int v657;
  uint64_t v658;
  unsigned int v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t CastContextHint;
  uint64_t v664;
  int v665;
  BOOL v666;
  unint64_t v667;
  unint64_t v668;
  const char **v669;
  unsigned __int8 *v670;
  uint64_t v671;
  void **v672;
  void *v673;
  int v674;
  _BYTE *v675;
  uint64_t v676;
  __int128 v677;
  void **v678;
  void **v679;
  unint64_t v680;
  unint64_t v681;
  unint64_t v682;
  char *v683;
  char *v684;
  void *v685;
  void **v686;
  unint64_t v687;
  _BYTE *v689;
  uint64_t v690;
  char *v691;
  uint64_t v692;
  void **v693;
  char *v694;
  char *v695;
  unsigned int v696;
  BOOL v697;
  void **v698;
  uint64_t v699;
  __int128 v700;
  void **v701;
  void **v702;
  int v703;
  uint64_t *v704;
  uint64_t v705;
  char v706;
  void *v707;
  uint64_t v708;
  _BYTE *v709;
  int v710;
  void **v711;
  void **v712;
  void *v713;
  void **v714;
  char *v715;
  uint64_t v716;
  char *v717;
  void *v718;
  uint64_t v719;
  _QWORD *v720;
  uint64_t v721;
  uint64_t *v722;
  uint64_t *v723;
  unint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t *v729;
  unint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t *v733;
  uint64_t v734;
  uint64_t v735;
  unint64_t v736;
  unint64_t v737;
  uint64_t *v738;
  _DWORD *v739;
  int v740;
  unint64_t v741;
  uint64_t v742;
  unint64_t v743;
  _DWORD *v744;
  _DWORD *v745;
  uint64_t v746;
  uint64_t v747;
  int v748;
  _DWORD *v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  _DWORD *v754;
  llvm::Value *v755;
  uint64_t v756;
  char *v757;
  llvm::Value *v758;
  _QWORD *v759;
  char v760;
  char *v761;
  uint64_t v762;
  _QWORD *v763;
  uint64_t v764;
  unsigned int v765;
  _QWORD *v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  _QWORD *v774;
  uint64_t v775;
  uint64_t *v776;
  uint64_t v777;
  llvm::ValueSymbolTable *v778;
  uint64_t v779;
  uint64_t v780;
  llvm::Value *v781;
  llvm::Value *v782;
  llvm::ValueAsMetadata *v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  llvm::UnreachableInst *v788;
  uint64_t v789;
  _QWORD *v790;
  uint64_t v791;
  _QWORD *v792;
  char *v793;
  char *v794;
  _BYTE *v795;
  _QWORD *v796;
  uint64_t v797;
  uint64_t *v798;
  char v799;
  void *v800;
  uint64_t v801;
  char v802;
  unsigned int v803;
  unsigned int v804;
  char v805;
  char *v806;
  llvm::Value **v807;
  uint64_t v808;
  uint64_t v809;
  unsigned int v810;
  unint64_t v811;
  char v812;
  char __dst;
  char *v814;
  uint64_t v815;
  char *v816;
  uint64_t *v817;
  uint64_t v818;
  uint64_t *v819;
  uint64_t *v820;
  char *v821;
  uint64_t *v822;
  void *v823;
  _QWORD *v824;
  uint64_t v825;
  uint64_t v826;
  llvm::Value *v827;
  llvm::Value *v828;
  llvm::Value *v829;
  llvm::Value *v830;
  llvm::Value *v831;
  llvm::Value *v832;
  llvm::Value *v833;
  llvm::Value *v834;
  llvm::Value *v835;
  llvm::Value *v836;
  _QWORD v837[2];
  int v838;
  _QWORD *v839;
  char *v840;
  _QWORD *v841;
  _QWORD v842[2];
  int v843;
  void *v844;
  void **v845;
  void **v846;
  _QWORD v847[2];
  int v848;
  llvm::Value **v849;
  llvm::Value **v850;
  uint64_t v851;
  __int128 v852;
  char v853;
  _BYTE v854[7];
  __int128 v855;
  char v856;
  _BYTE v857[7];
  __int128 v858;
  char v859;
  _BYTE v860[7];
  __int128 v861;
  char v862;
  _BYTE v863[7];
  unsigned __int8 *v864[4];
  unsigned int v865;
  char v866;
  uint64_t v867;
  char v868;
  _BYTE v869[7];
  _BYTE v870[7];
  void *v871;
  uint64_t v872;
  const char *v873;
  void *v874;
  llvm::Value **v875;
  __int128 v876;
  int v877;
  void *v878;
  uint64_t v879;
  _BYTE v880[7168];
  void *v881;
  uint64_t v882;
  _BYTE v883[512];
  __int128 v884;
  unsigned int v885;
  char v886;
  __int16 v887;
  _QWORD v888[2];
  _QWORD v889[2];
  __int128 v890;
  _BYTE v891[16];
  __int16 v892;
  __int128 __src;
  _BYTE v894[16];
  __int16 v895;
  uint64_t v896;
  uint64_t v897;
  void *v898[2];
  _BYTE v899[100];
  __int128 v900;
  _BYTE v901[32];
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v8 = v7;
  v9 = v6;
  v832 = v10;
  v818 = v4;
  v905 = *MEMORY[0x1E0C80C00];
  v11 = *((unsigned int *)v6 + 2);
  v819 = v6;
  v800 = v5;
  if (!(_DWORD)v11)
  {
    v881 = v883;
    v882 = 0x4000000000;
LABEL_9:
    v18 = 0;
    HIDWORD(v879) = 64;
    memset(v899, 0, 96);
    *(_OWORD *)v898 = 0u;
    v878 = v880;
    goto LABEL_10;
  }
  v12 = (uint64_t)v5;
  v13 = (uint64_t *)*v6;
  v14 = 8 * v11;
  do
  {
    v15 = *v13;
    if (*v13 && *(_BYTE *)(v15 + 16) == 33)
    {
      sub_1C5C08054(*(llvm::BasicBlock **)(v15 - 96), *(_QWORD *)(v15 + 40), v12);
      sub_1C5C08054(*(llvm::BasicBlock **)(v15 - 64), *(_QWORD *)(v15 + 40), v12);
    }
    ++v13;
    v14 -= 8;
  }
  while (v14);
  v16 = (uint64_t *)*v9;
  v17 = *((unsigned int *)v9 + 2);
  v881 = v883;
  v882 = 0x4000000000;
  if (!(_DWORD)v17)
    goto LABEL_9;
  v370 = &v16[v17];
  do
  {
    v371 = *v16;
    v878 = v880;
    v879 = 0x4000000000;
    sub_1C5062CEC(v371, 0, (uint64_t)v898);
    if (v899[8])
      v372 = v898[1];
    else
      v372 = 0;
    if (v899[8])
      v373 = (uint64_t **)v898[0];
    else
      v373 = 0;
    if (v372)
    {
      v374 = 32 * (_QWORD)v372;
      do
      {
        v375 = *v373;
        v376 = **v373;
        if (v376 && *(_DWORD *)(v376 + 8) == 271
          || (*(_DWORD *)(v376 + 8) & 0xFE) == 0x12
          && (v378 = *(_QWORD *)(v376 + 24)) != 0
          && *(_DWORD *)(v378 + 8) == 271)
        {
          v377 = v879;
          if (v879 >= (unint64_t)HIDWORD(v879))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v878, (uint64_t)v880, v879 + 1, 8);
            v377 = v879;
          }
          *((_QWORD *)v878 + v377) = v375;
          LODWORD(v879) = v879 + 1;
        }
        v373 += 4;
        v374 -= 32;
      }
      while (v374);
    }
    sub_1C5C080C4(v371, (uint64_t *)v878, v879, (uint64_t)&v881);
    if (v878 != v880)
      free(v878);
    ++v16;
  }
  while (v16 != v370);
  v9 = v819;
  v379 = *((unsigned int *)v819 + 2);
  v18 = v379;
  memset(v899, 0, 96);
  *(_OWORD *)v898 = 0u;
  v878 = v880;
  v879 = 0x4000000000;
  if (v379 < 0x41)
  {
    if ((_DWORD)v379)
    {
      v795 = v880;
      do
      {
        *(_QWORD *)v795 = 0;
        *((_QWORD *)v795 + 1) = 0;
        *((_DWORD *)v795 + 4) = 0;
        sub_1C4DFE328((uint64_t)v795, (uint64_t)v898);
        *((_QWORD *)v795 + 4) = 0;
        *((_QWORD *)v795 + 5) = 0;
        *((_QWORD *)v795 + 3) = 0;
        sub_1C4DFE394((_QWORD *)v795 + 3, *(const void **)&v899[8], *(uint64_t *)&v899[16], (uint64_t)(*(_QWORD *)&v899[16] - *(_QWORD *)&v899[8]) >> 3);
        *((_OWORD *)v795 + 3) = *(_OWORD *)&v899[32];
        *((_QWORD *)v795 + 9) = 0;
        *((_DWORD *)v795 + 20) = 0;
        *((_QWORD *)v795 + 8) = 0;
        sub_1C5C085DC((uint64_t *)v795 + 8, (uint64_t)&v899[48]);
        *((_QWORD *)v795 + 11) = 0;
        *((_QWORD *)v795 + 12) = 0;
        v796 = v795 + 88;
        v796[2] = 0;
        sub_1C4EECB34(v796, *(_BYTE **)&v899[72], *(_BYTE **)&v899[80], (uint64_t)(*(_QWORD *)&v899[80] - *(_QWORD *)&v899[72]) >> 4);
        v795 = v796 + 3;
        --v379;
      }
      while (v379);
    }
  }
  else
  {
    v871 = 0;
    v380 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v878, v379, 112, (unint64_t *)&v871);
    v381 = 0;
    v382 = 112 * v379;
    do
    {
      v383 = &v380[v381];
      *(_QWORD *)v383 = 0;
      *((_QWORD *)v383 + 1) = 0;
      *((_DWORD *)v383 + 4) = 0;
      sub_1C4DFE328((uint64_t)&v380[v381], (uint64_t)v898);
      *((_QWORD *)v383 + 4) = 0;
      *((_QWORD *)v383 + 5) = 0;
      *((_QWORD *)v383 + 3) = 0;
      sub_1C4DFE394(&v380[v381 + 24], *(const void **)&v899[8], *(uint64_t *)&v899[16], (uint64_t)(*(_QWORD *)&v899[16] - *(_QWORD *)&v899[8]) >> 3);
      *((_OWORD *)v383 + 3) = *(_OWORD *)&v899[32];
      *((_QWORD *)v383 + 9) = 0;
      *((_DWORD *)v383 + 20) = 0;
      *((_QWORD *)v383 + 8) = 0;
      sub_1C5C085DC((uint64_t *)&v380[v381 + 64], (uint64_t)&v899[48]);
      *((_QWORD *)v383 + 11) = 0;
      *((_QWORD *)v383 + 12) = 0;
      v384 = &v380[v381 + 88];
      *((_QWORD *)v384 + 2) = 0;
      sub_1C4EECB34(v384, *(_BYTE **)&v899[72], *(_BYTE **)&v899[80], (uint64_t)(*(_QWORD *)&v899[80] - *(_QWORD *)&v899[72]) >> 4);
      v381 += 112;
    }
    while (v382 != v381);
    v385 = (char *)v878;
    v9 = v819;
    if ((_DWORD)v879)
    {
      v386 = 112 * v879;
      do
      {
        v387 = &v385[v386];
        sub_1C6176BF8(&v385[v386 - 48]);
        v388 = *(void **)&v385[v386 - 88];
        if (v388)
        {
          *((_QWORD *)v387 - 10) = v388;
          operator delete(v388);
        }
        MEMORY[0x1CAA32FB4](*((_QWORD *)v387 - 14), 8);
        v386 -= 112;
      }
      while (v386);
      v385 = (char *)v878;
    }
    v389 = (int)v871;
    if (v385 != v880)
      free(v385);
    v878 = v380;
    HIDWORD(v879) = v389;
  }
LABEL_10:
  LODWORD(v879) = v18;
  sub_1C6176BF8(&v899[48]);
  if (*(_QWORD *)&v899[8])
  {
    *(_QWORD *)&v899[16] = *(_QWORD *)&v899[8];
    operator delete(*(void **)&v899[8]);
  }
  MEMORY[0x1CAA32FB4](v898[0], 8);
  v823 = v878;
  v827 = (llvm::Value *)*v9;
  v19 = v879;
  v898[1] = 0;
  v898[0] = 0;
  *(_DWORD *)v899 = 0;
  memset(&v899[8], 0, 44);
  memset(&v899[56], 0, 44);
  v900 = 0u;
  memset(v901, 0, 28);
  v904 = 0;
  v902 = 0;
  v903 = 0;
  sub_1C5C0863C(v818, (uint64_t)v898);
  if ((_DWORD)v19)
  {
    v236 = 0;
    while (1)
    {
      v237 = *((_QWORD *)v827 + v236);
      v872 = 0;
      v871 = 0;
      LODWORD(v873) = 0;
      v875 = 0;
      *(_QWORD *)&v876 = 0;
      v874 = 0;
      v238 = v237;
      v239 = (llvm *)sub_1C5C09440(v237, (uint64_t)v898, &v871);
      if (byte_1ED822798)
      {
        v239 = llvm::dbgs(v239);
        v252 = (_OWORD *)*((_QWORD *)v239 + 4);
        if (*((_QWORD *)v239 + 3) - (_QWORD)v252 > 0xFuLL)
        {
          *v252 = *(_OWORD *)"Live Variables:\n";
          *((_QWORD *)v239 + 4) += 16;
        }
        else
        {
          v239 = llvm::raw_ostream::write(v239, "Live Variables:\n", 0x10uLL);
        }
        v253 = (llvm::Value **)v874;
        v254 = v875;
        while (v253 != v254)
        {
          v255 = *v253;
          v256 = llvm::dbgs(v239);
          v257 = v256;
          v258 = (_BYTE *)*((_QWORD *)v256 + 4);
          if (*((_BYTE **)v256 + 3) == v258)
          {
            v257 = llvm::raw_ostream::write(v256, " ", 1uLL);
          }
          else
          {
            *v258 = 32;
            ++*((_QWORD *)v256 + 4);
          }
          if ((*((_BYTE *)v255 + 23) & 0x10) != 0)
          {
            v259 = ***(_QWORD ***)v255;
            v260 = *(_QWORD *)(v259 + 152);
            v261 = *(unsigned int *)(v259 + 168);
            if (!(_DWORD)v261)
              goto LABEL_269;
            LODWORD(v262) = (v261 - 1) & ((v255 >> 4) ^ (v255 >> 9));
            v263 = (llvm::Value **)(v260 + 16 * v262);
            v264 = *v263;
            if (*v263 != v255)
            {
              v265 = 1;
              while (v264 != (llvm::Value *)-4096)
              {
                v266 = v262 + v265++;
                v262 = v266 & (v261 - 1);
                v264 = *(llvm::Value **)(v260 + 16 * v262);
                if (v264 == v255)
                {
                  v263 = (llvm::Value **)(v260 + 16 * v262);
                  goto LABEL_270;
                }
              }
LABEL_269:
              v263 = (llvm::Value **)(v260 + 16 * v261);
            }
LABEL_270:
            v267 = (size_t *)v263[1];
            v270 = *v267;
            v268 = v267 + 2;
            v269 = v270;
            v271 = (_BYTE *)*((_QWORD *)v257 + 4);
            if (v270 <= *((_QWORD *)v257 + 3) - (_QWORD)v271)
            {
              if (v269)
              {
                memcpy(v271, v268, v269);
                v271 = (_BYTE *)(*((_QWORD *)v257 + 4) + v269);
                *((_QWORD *)v257 + 4) = v271;
              }
            }
            else
            {
              v257 = llvm::raw_ostream::write(v257, (const char *)v268, v269);
              v271 = (_BYTE *)*((_QWORD *)v257 + 4);
            }
          }
          else
          {
            v271 = (_BYTE *)*((_QWORD *)v257 + 4);
          }
          if (*((_BYTE **)v257 + 3) == v271)
          {
            v257 = llvm::raw_ostream::write(v257, " ", 1uLL);
          }
          else
          {
            *v271 = 32;
            ++*((_QWORD *)v257 + 4);
          }
          llvm::Value::print(v255, v257, 0);
          v272 = (_BYTE *)*((_QWORD *)v257 + 4);
          if (*((_BYTE **)v257 + 3) == v272)
          {
            v239 = llvm::raw_ostream::write(v257, "\n", 1uLL);
          }
          else
          {
            *v272 = 10;
            ++*((_QWORD *)v257 + 4);
          }
          ++v253;
          continue;
        }
      }
      if (byte_1ED822858)
        break;
LABEL_294:
      sub_1C629C76C((uint64_t)v823 + 112 * v236, (uint64_t)&v871);
      if (v874)
      {
        v875 = (llvm::Value **)v874;
        operator delete(v874);
      }
      MEMORY[0x1CAA32FB4](v871, 8);
      if (++v236 == v19)
        goto LABEL_13;
    }
    v240 = llvm::dbgs(v239);
    v241 = v240;
    v242 = (void *)*((_QWORD *)v240 + 4);
    if (*((_QWORD *)v240 + 3) - (_QWORD)v242 > 0xEuLL)
    {
      qmemcpy(v242, "Safepoint For: ", 15);
      *((_QWORD *)v240 + 4) += 15;
    }
    else
    {
      v241 = llvm::raw_ostream::write(v240, "Safepoint For: ", 0xFuLL);
    }
    v243 = *(uint64_t ****)(v238 - 32);
    if ((*((_BYTE *)v243 + 23) & 0x10) == 0)
    {
      v277 = (llvm::raw_ostream *)*((_QWORD *)v241 + 4);
LABEL_288:
      if (*((llvm::raw_ostream **)v241 + 3) == v277)
      {
        v277 = llvm::raw_ostream::write(v241, "\n", 1uLL);
      }
      else
      {
        *(_BYTE *)v277 = 10;
        ++*((_QWORD *)v241 + 4);
      }
      v278 = llvm::dbgs(v277);
      v279 = v278;
      v280 = *((_QWORD *)v278 + 4);
      if ((unint64_t)(*((_QWORD *)v278 + 3) - v280) > 0x13)
      {
        *(_DWORD *)(v280 + 16) = 540701541;
        *(_OWORD *)v280 = *(_OWORD *)"Number live values: ";
        *((_QWORD *)v278 + 4) += 20;
      }
      else
      {
        v279 = llvm::raw_ostream::write(v278, "Number live values: ", 0x14uLL);
      }
      sub_1C5E21910(v279, ((char *)v875 - (_BYTE *)v874) >> 3, 0, 0, 0);
      v281 = (_BYTE *)*((_QWORD *)v279 + 4);
      if (*((_BYTE **)v279 + 3) == v281)
      {
        llvm::raw_ostream::write(v279, "\n", 1uLL);
      }
      else
      {
        *v281 = 10;
        ++*((_QWORD *)v279 + 4);
      }
      goto LABEL_294;
    }
    v244 = ***v243;
    v245 = *(_QWORD *)(v244 + 152);
    v246 = *(unsigned int *)(v244 + 168);
    if ((_DWORD)v246)
    {
      LODWORD(v247) = (v246 - 1) & ((v243 >> 4) ^ (v243 >> 9));
      v248 = (uint64_t ****)(v245 + 16 * v247);
      v249 = *v248;
      if (*v248 == v243)
        goto LABEL_284;
      v250 = 1;
      while (v249 != (uint64_t ***)-4096)
      {
        v251 = v247 + v250++;
        v247 = v251 & (v246 - 1);
        v249 = *(uint64_t ****)(v245 + 16 * v247);
        if (v249 == v243)
        {
          v248 = (uint64_t ****)(v245 + 16 * v247);
          goto LABEL_284;
        }
      }
    }
    v248 = (uint64_t ****)(v245 + 16 * v246);
LABEL_284:
    v273 = (size_t *)v248[1];
    v276 = *v273;
    v274 = v273 + 2;
    v275 = v276;
    v277 = (llvm::raw_ostream *)*((_QWORD *)v241 + 4);
    if (v276 <= *((_QWORD *)v241 + 3) - (_QWORD)v277)
    {
      if (v275)
      {
        memcpy(v277, v274, v275);
        v277 = (llvm::raw_ostream *)(*((_QWORD *)v241 + 4) + v275);
        *((_QWORD *)v241 + 4) = v277;
      }
    }
    else
    {
      v241 = llvm::raw_ostream::write(v241, (const char *)v274, v275);
      v277 = (llvm::raw_ostream *)*((_QWORD *)v241 + 4);
    }
    goto LABEL_288;
  }
LABEL_13:
  sub_1C6324510((uint64_t)&v901[8]);
  sub_1C6324510((uint64_t)&v899[80]);
  sub_1C6324510((uint64_t)&v899[32]);
  v20 = (llvm *)sub_1C6324510((uint64_t)v898);
  v847[0] = 0;
  v847[1] = 0;
  v848 = 0;
  v850 = 0;
  v851 = 0;
  v849 = 0;
  if ((_DWORD)v879)
  {
    v21 = 0;
    do
    {
      v22 = (char *)v878 + 112 * v21;
      v23 = *(_QWORD *)(*v819 + 8 * v21);
      v898[1] = 0;
      v898[0] = 0;
      *(_DWORD *)v899 = 0;
      sub_1C4DFE328((uint64_t)v898, (uint64_t)v22);
      memset(&v899[8], 0, 24);
      v25 = (_BYTE *)*((_QWORD *)v22 + 3);
      v24 = (_BYTE *)*((_QWORD *)v22 + 4);
      v26 = v24 - v25;
      if (v24 != v25)
      {
        if (v26 < 0)
          goto LABEL_1178;
        *(_QWORD *)&v899[8] = operator new(v24 - v25);
        *(_QWORD *)&v899[16] = *(_QWORD *)&v899[8];
        v27 = *(_QWORD *)&v899[8] + 8 * (v26 >> 3);
        *(_QWORD *)&v899[24] = v27;
        memmove(*(void **)&v899[8], v25, v26);
        *(_QWORD *)&v899[16] = v27;
      }
      sub_1C5062CEC(v23, 0, (uint64_t)&v871);
      if ((_BYTE)v874 && v872)
      {
        v28 = (char *)v871;
        v29 = (char *)v871 + 32 * v872;
        do
        {
          *(_QWORD *)&__src = 0;
          v30 = *(_QWORD *)v28;
          *(_QWORD *)&__src = *(_QWORD *)v28;
          if (*(_DWORD *)v899)
          {
            v31 = ((v30 >> 4) ^ (v30 >> 9)) & (*(_DWORD *)v899 - 1);
            v32 = *((_QWORD *)v898[0] + v31);
            if (v30 == v32)
            {
LABEL_23:
              sub_1C6324178((uint64_t)v898, &__src);
              v33 = __src;
              *(_QWORD *)sub_1C62A8A44((uint64_t)v847, (uint64_t *)&__src) = v33;
            }
            else
            {
              v34 = 1;
              while (v32 != -4096)
              {
                v35 = v31 + v34++;
                v31 = v35 & (*(_DWORD *)v899 - 1);
                v32 = *((_QWORD *)v898[0] + v31);
                if (v30 == v32)
                  goto LABEL_23;
              }
            }
          }
          v28 += 32;
        }
        while (v28 != v29);
      }
      v36 = *(void ***)&v899[8];
      v37 = *(void ***)&v899[16];
      if (*(_QWORD *)&v899[8] != *(_QWORD *)&v899[16])
      {
        do
        {
          v871 = 0;
          v38 = *v36++;
          v871 = v38;
          v39 = sub_1C5C0658C((llvm::ConstantAggregateZero **)v38, v8);
          *(_QWORD *)sub_1C62A8A44((uint64_t)v847, (uint64_t *)&v871) = v39;
        }
        while (v36 != v37);
        v36 = *(void ***)&v899[8];
      }
      if (v36)
      {
        *(_QWORD *)&v899[16] = v36;
        operator delete(v36);
      }
      v20 = (llvm *)MEMORY[0x1CAA32FB4](v898[0], 8);
      ++v21;
    }
    while (v21 < v879);
  }
  if (byte_1ED822918)
  {
    v40 = (llvm::raw_ostream *)llvm::errs(v20);
    v41 = (void *)*((_QWORD *)v40 + 4);
    if (*((_QWORD *)v40 + 3) - (_QWORD)v41 > 0x1CuLL)
    {
      qmemcpy(v41, "Base Pairs (w/o Relocation):\n", 29);
      *((_QWORD *)v40 + 4) += 29;
    }
    else
    {
      v40 = llvm::raw_ostream::write(v40, "Base Pairs (w/o Relocation):\n", 0x1DuLL);
    }
    v42 = v849;
    for (i = v850; v42 != i; v42 += 2)
    {
      v390 = (llvm::raw_ostream *)llvm::errs(v40);
      v391 = *((_QWORD *)v390 + 4);
      if ((unint64_t)(*((_QWORD *)v390 + 3) - v391) > 8)
      {
        *(_BYTE *)(v391 + 8) = 32;
        *(_QWORD *)v391 = *(_QWORD *)" derived ";
        *((_QWORD *)v390 + 4) += 9;
      }
      else
      {
        v390 = llvm::raw_ostream::write(v390, " derived ", 9uLL);
      }
      v392 = *v42;
      v393 = (llvm::raw_ostream *)llvm::errs(v390);
      v394 = (llvm *)llvm::Value::printAsOperand(v392, v393, 0, 0);
      v395 = (llvm::raw_ostream *)llvm::errs(v394);
      v396 = *((_QWORD *)v395 + 4);
      if ((unint64_t)(*((_QWORD *)v395 + 3) - v396) > 5)
      {
        *(_WORD *)(v396 + 4) = 8293;
        *(_DWORD *)v396 = 1935761952;
        *((_QWORD *)v395 + 4) += 6;
      }
      else
      {
        v395 = llvm::raw_ostream::write(v395, " base ", 6uLL);
      }
      v397 = v42[1];
      v398 = (llvm::raw_ostream *)llvm::errs(v395);
      v399 = (llvm *)llvm::Value::printAsOperand(v397, v398, 0, 0);
      v40 = (llvm::raw_ostream *)llvm::errs(v399);
      v400 = (_BYTE *)*((_QWORD *)v40 + 4);
      if (*((_BYTE **)v40 + 3) == v400)
      {
        v40 = llvm::raw_ostream::write(v40, "\n", 1uLL);
      }
      else
      {
        *v400 = 10;
        ++*((_QWORD *)v40 + 4);
      }
    }
  }
  v44 = v879;
  v45 = v879 + (unint64_t)v882;
  if (v45 > HIDWORD(v882))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v881, (uint64_t)v883, v45, 8);
    v44 = v879;
  }
  if ((_DWORD)v44)
  {
    v46 = 0;
    do
    {
      v47 = (char *)v878 + 112 * v46;
      v898[0] = v899;
      v898[1] = (void *)0x8000000000;
      v48 = (void **)*((_QWORD *)v47 + 3);
      v49 = (void **)*((_QWORD *)v47 + 4);
      if (v48 == v49)
      {
        v50 = 0;
        v51 = (uint64_t *)v899;
      }
      else
      {
        do
        {
          v871 = 0;
          v871 = *v48;
          v52 = *(_QWORD *)sub_1C62A8A44((uint64_t)v847, (uint64_t *)&v871);
          v53 = LODWORD(v898[1]);
          if (LODWORD(v898[1]) >= (unint64_t)HIDWORD(v898[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v898, (uint64_t)v899, LODWORD(v898[1]) + 1, 8);
            v53 = LODWORD(v898[1]);
          }
          *((_QWORD *)v898[0] + v53) = v52;
          v50 = ++LODWORD(v898[1]);
          ++v48;
        }
        while (v48 != v49);
        v51 = (uint64_t *)v898[0];
      }
      sub_1C5C080C4(*(_QWORD *)(*v819 + 8 * v46), v51, v50, (uint64_t)&v881);
      if (v898[0] != v899)
        free(v898[0]);
      ++v46;
      v44 = v879;
    }
    while (v46 < v879);
  }
  v54 = *v819;
  v55 = v878;
  v898[1] = 0;
  v898[0] = 0;
  *(_DWORD *)v899 = 0;
  memset(&v899[8], 0, 44);
  memset(&v899[56], 0, 44);
  v900 = 0u;
  memset(v901, 0, 28);
  v904 = 0;
  v902 = 0;
  v903 = 0;
  sub_1C5C0863C(v818, (uint64_t)v898);
  if (v44)
  {
    for (j = 0; j != v44; ++j)
    {
      v57 = *(_QWORD *)(v54 + 8 * j);
      v872 = 0;
      v871 = 0;
      LODWORD(v873) = 0;
      v875 = 0;
      *(_QWORD *)&v876 = 0;
      v874 = 0;
      sub_1C5C09440(v57, (uint64_t)v898, &v871);
      v58 = (uint64_t *)v874;
      v59 = v875;
      while (v58 != (uint64_t *)v59)
      {
        v60 = *v58++;
        *(_QWORD *)&__src = v60;
        *((_QWORD *)&__src + 1) = v60;
        sub_1C6324554((uint64_t)v847, &__src);
      }
      sub_1C629C76C((uint64_t)v55 + 112 * j, (uint64_t)&v871);
      if (v874)
      {
        v875 = (llvm::Value **)v874;
        operator delete(v874);
      }
      MEMORY[0x1CAA32FB4](v871, 8);
    }
  }
  sub_1C6324510((uint64_t)&v901[8]);
  sub_1C6324510((uint64_t)&v899[80]);
  sub_1C6324510((uint64_t)&v899[32]);
  v61 = (llvm *)sub_1C6324510((uint64_t)v898);
  if (byte_1ED822918)
  {
    v62 = (llvm::raw_ostream *)llvm::errs(v61);
    v63 = (void *)*((_QWORD *)v62 + 4);
    if (*((_QWORD *)v62 + 3) - (_QWORD)v63 > 0x1AuLL)
    {
      qmemcpy(v63, "Base Pairs: (w/Relocation)\n", 27);
      *((_QWORD *)v62 + 4) += 27;
    }
    else
    {
      v62 = llvm::raw_ostream::write(v62, "Base Pairs: (w/Relocation)\n", 0x1BuLL);
    }
    v64 = v849;
    for (k = v850; v64 != k; v64 += 2)
    {
      v402 = *v64;
      v401 = v64[1];
      v403 = (llvm::raw_ostream *)llvm::errs(v62);
      v404 = *((_QWORD *)v403 + 4);
      if ((unint64_t)(*((_QWORD *)v403 + 3) - v404) > 8)
      {
        *(_BYTE *)(v404 + 8) = 32;
        *(_QWORD *)v404 = *(_QWORD *)" derived ";
        *((_QWORD *)v403 + 4) += 9;
      }
      else
      {
        v403 = llvm::raw_ostream::write(v403, " derived ", 9uLL);
      }
      v405 = (llvm::raw_ostream *)llvm::errs(v403);
      v406 = (llvm *)llvm::Value::printAsOperand(v402, v405, 0, 0);
      v407 = (llvm::raw_ostream *)llvm::errs(v406);
      v408 = *((_QWORD *)v407 + 4);
      if ((unint64_t)(*((_QWORD *)v407 + 3) - v408) > 5)
      {
        *(_WORD *)(v408 + 4) = 8293;
        *(_DWORD *)v408 = 1935761952;
        *((_QWORD *)v407 + 4) += 6;
      }
      else
      {
        v407 = llvm::raw_ostream::write(v407, " base ", 6uLL);
      }
      v409 = (llvm::raw_ostream *)llvm::errs(v407);
      v410 = (llvm *)llvm::Value::printAsOperand(v401, v409, 0, 0);
      v62 = (llvm::raw_ostream *)llvm::errs(v410);
      v411 = (_BYTE *)*((_QWORD *)v62 + 4);
      if (*((_BYTE **)v62 + 3) == v411)
      {
        v62 = llvm::raw_ostream::write(v62, "\n", 1uLL);
      }
      else
      {
        *v411 = 10;
        ++*((_QWORD *)v62 + 4);
      }
    }
  }
  if ((_DWORD)v879)
  {
    v66 = (char *)v878;
    v67 = (char *)v878 + 112 * v879;
    do
    {
      v68 = (_QWORD *)*((_QWORD *)v66 + 3);
      v69 = (_QWORD *)*((_QWORD *)v66 + 4);
      v898[0] = v847;
      v898[1] = v66;
      if (v68 != v69)
      {
        while (1)
        {
          v70 = v68 + 1;
          if (sub_1C5C096BC((uint64_t *)v898, v68))
            break;
          ++v68;
          if (v70 == v69)
          {
            v68 = v69;
            goto LABEL_75;
          }
        }
        while (v70 != v69)
        {
          if (!sub_1C5C096BC((uint64_t *)v898, v70))
            *v68++ = *v70;
          ++v70;
        }
      }
LABEL_75:
      if (v68 != *((_QWORD **)v66 + 4))
        *((_QWORD *)v66 + 4) = v68;
      v66 += 112;
    }
    while (v66 != v67);
  }
  if ((_DWORD)v882)
  {
    v71 = (uint64_t *)v881;
    v72 = 8 * v882;
    do
    {
      v73 = *v71++;
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v73 + 40) + 40, (uint64_t ***)v73);
      v74 = *(_QWORD *)(v73 + 24);
      v75 = *(_QWORD **)(v73 + 32);
      *v75 = v74;
      *(_QWORD *)(v74 + 8) = v75;
      *(_QWORD *)(v73 + 24) = 0;
      *(_QWORD *)(v73 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v73);
      v72 -= 8;
    }
    while (v72);
  }
  LODWORD(v882) = 0;
  v842[0] = 0;
  v842[1] = 0;
  v843 = 0;
  v845 = 0;
  v846 = 0;
  v844 = 0;
  v837[0] = 0;
  v837[1] = 0;
  v838 = 0;
  sub_1C4DFEB14((uint64_t)v837, (uint64_t)v847);
  v839 = 0;
  v840 = 0;
  v841 = 0;
  v76 = v849;
  v77 = (char *)v850 - (char *)v849;
  v78 = v819;
  if (v850 == v849)
    goto LABEL_84;
  if (v77 < 0)
    goto LABEL_1178;
  v79 = operator new((char *)v850 - (char *)v849);
  v839 = v79;
  v840 = (char *)v79;
  v841 = &v79[2 * (v77 >> 4)];
  v80 = v77 & 0xFFFFFFFFFFFFFFF0;
  memcpy(v79, v76, v80);
  v824 = (_QWORD *)((char *)v79 + v80);
  v840 = (char *)v79 + v80;
  if (!v80)
    goto LABEL_84;
  do
  {
    v622 = *v79;
    v621 = v79[1];
    v864[0] = (unsigned __int8 *)v622;
    if (v622 == v621)
      goto LABEL_869;
    v623 = 0;
    *(_QWORD *)&__src = v894;
    *((_QWORD *)&__src + 1) = 0x300000000;
    while (1)
    {
      v624 = *(unsigned __int8 *)(v622 + 16);
      if (v622 && v624 == 62)
      {
        if (v623 >= HIDWORD(__src))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v894, v623 + 1, 8);
          v623 = DWORD2(__src);
        }
        *(_QWORD *)(__src + 8 * v623) = v622;
        v623 = ++DWORD2(__src);
        v625 = -(uint64_t)(*(_DWORD *)(v622 + 20) & 0x7FFFFFF);
        goto LABEL_865;
      }
      if (!v622)
        break;
      v626 = v624 >= 0x1C && v624 - 79 >= 0xFFFFFFF3;
      if (!v626)
        break;
      llvm::CastInst::isNoopCast((llvm::CastInst *)v622, (const llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v622 + 40) + 56) + 40) + 272));
      v623 = DWORD2(__src);
      if (!v627)
        break;
      if (DWORD2(__src) >= HIDWORD(__src))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v894, DWORD2(__src) + 1, 8);
        v623 = DWORD2(__src);
      }
      *(_QWORD *)(__src + 8 * v623) = v622;
      v623 = ++DWORD2(__src);
      v625 = -1;
LABEL_865:
      v622 = *(_QWORD *)(v622 + 32 * v625);
    }
    if (v623 - 11 < 0xFFFFFFF6)
      goto LABEL_867;
    if (v622 != *(_QWORD *)sub_1C62A8A44((uint64_t)v837, (uint64_t *)v864))
    {
      if (*(_BYTE *)(v622 + 16) == 83)
        v633 = v622;
      else
        v633 = 0;
      v634 = sub_1C62A8A44((uint64_t)v837, (uint64_t *)v864);
      if (*(_BYTE *)(*(_QWORD *)v634 + 16) == 83)
        v635 = *(_QWORD *)v634;
      else
        v635 = 0;
      if (!v633)
        goto LABEL_867;
      if (!v635)
        goto LABEL_867;
      v636 = *(_DWORD *)(v633 + 20) & 0x7FFFFFF;
      if ((_DWORD)v636 != (*(_DWORD *)(v635 + 20) & 0x7FFFFFF) || *(_QWORD *)(v633 + 40) != *(_QWORD *)(v635 + 40))
        goto LABEL_867;
      v898[0] = (void *)1;
      for (m = 1; m != 17; m += 2)
        v898[m] = (void *)-4096;
      if ((_DWORD)v636)
      {
        v638 = 0;
        v639 = 0;
        do
        {
          v640 = *(_DWORD *)(v633 + 20);
          if ((v640 & 0x40000000) != 0)
            v641 = *(_QWORD *)(v633 - 8);
          else
            v641 = v633 - 32 * (v640 & 0x7FFFFFF);
          v642 = *(_QWORD *)(v641 + 32 * *(unsigned int *)(v633 + 60) + v639);
          v871 = *(void **)(v641 + v638);
          sub_1C632464C(v898, (uint64_t *)&v871)[1] = v642;
          v639 += 8;
          v638 += 32;
        }
        while (8 * v636 != v639);
        v643 = 0;
        v644 = *(_DWORD *)(v635 + 20);
        v78 = v819;
        do
        {
          if ((v644 & 0x40000000) != 0)
            v645 = *(_QWORD *)(v635 - 8);
          else
            v645 = v635 - 32 * (v644 & 0x7FFFFFF);
          v646 = sub_1C63245F0((uint64_t)v898, *(_QWORD *)(v645 + 32 * v643));
          v647 = (char)v898[0];
          v648 = &v898[1];
          if (((uint64_t)v898[0] & 1) == 0)
            v648 = (void **)v898[1];
          v649 = *(_DWORD *)v899;
          if (((uint64_t)v898[0] & 1) != 0)
            v649 = 8;
          if (&v648[2 * v649] == (void **)v646
            || ((v644 = *(_DWORD *)(v635 + 20), (v644 & 0x40000000) != 0)
              ? (v650 = *(_QWORD *)(v635 - 8))
              : (v650 = v635 - 32 * (v644 & 0x7FFFFFF)),
                *(_QWORD *)(v646 + 8) != *(_QWORD *)(v650 + 32 * *(unsigned int *)(v635 + 60) + 8 * v643)))
          {
            if (((uint64_t)v898[0] & 1) == 0)
              MEMORY[0x1CAA32FB4]();
            goto LABEL_867;
          }
          ++v643;
        }
        while (v643 != v636);
      }
      else
      {
        v647 = (char)v898[0];
      }
      if ((v647 & 1) == 0)
        MEMORY[0x1CAA32FB4](v898[1], 8);
    }
    if (!DWORD2(__src))
    {
      v628 = 0;
      v629 = 0;
      v630 = 0;
      v631 = 0;
      v871 = &v873;
      HIDWORD(v872) = 3;
      LOBYTE(v632) = 1;
      goto LABEL_936;
    }
    v629 = 0;
    v630 = 0;
    v651 = (uint64_t *)__src;
    v652 = __src + 8 * DWORD2(__src);
    while (2)
    {
      v653 = *v651;
      v654 = *(unsigned __int8 *)(*v651 + 16);
      if (*v651)
        v655 = (v654 - 79) >= 0xFFFFFFF3;
      else
        v655 = 0;
      if (v655)
      {
        v660 = **(_QWORD **)(v653 - 32);
        v661 = (v654 - 28);
        v662 = *(_QWORD *)v653;
        CastContextHint = llvm::TargetTransformInfo::getCastContextHint(*v651);
        v664 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)v832 + 840))(*(_QWORD *)v832, v661, v662, v660, CastContextHint, 3, v653);
        if (v665 == 1)
          v629 = 1;
        v666 = __OFADD__(v630, v664);
        v667 = v630 + v664;
        v668 = ((uint64_t)(v630 + v664) >> 63) ^ 0x8000000000000000;
        goto LABEL_928;
      }
      if (v654 != 62)
        v653 = 0;
      v656 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)v832 + 976))(*(_QWORD *)v832, *(_QWORD *)(v653 + 64), 0, 0);
      if (v657 == 1)
        v629 = 1;
      if (__OFADD__(v630, v656))
        v630 = ((uint64_t)(v630 + v656) >> 63) ^ 0x8000000000000000;
      else
        v630 += v656;
      v658 = *(_DWORD *)(v653 + 20) & 0x7FFFFFF;
      if ((_DWORD)v658 != 1)
      {
        v659 = 1;
        while (*(_BYTE *)(*(_QWORD *)(v653 - 32 * v658 + 32 * v659) + 16) == 16)
        {
          if ((_DWORD)v658 == ++v659)
            goto LABEL_931;
        }
        v666 = __OFADD__(v630, 2);
        v667 = v630 + 2;
        v668 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_928:
        if (v666)
          v630 = v668;
        else
          v630 = v667;
      }
LABEL_931:
      if (++v651 != (uint64_t *)v652)
        continue;
      break;
    }
    v628 = DWORD2(__src);
    v871 = &v873;
    v872 = 0x300000000;
    *((_QWORD *)&v876 + 1) = 0;
    v877 = 0;
    if (DWORD2(__src))
    {
      v632 = DWORD2(__src);
      v669 = &v873;
      if (DWORD2(__src) < 4)
        goto LABEL_934;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v871, (uint64_t)&v873, DWORD2(__src), 8);
      v632 = DWORD2(__src);
      if (DWORD2(__src))
      {
        v669 = (const char **)v871;
LABEL_934:
        memcpy(v669, (const void *)__src, 8 * v632);
        LOBYTE(v632) = 0;
      }
      v631 = v628;
    }
    else
    {
      v628 = 0;
      v631 = 0;
      LOBYTE(v632) = 1;
    }
LABEL_936:
    LODWORD(v872) = v631;
    *(_QWORD *)&v876 = v622;
    *((_QWORD *)&v876 + 1) = v630;
    v877 = v629;
    v670 = v864[0];
    v898[0] = v864[0];
    v78 = v819;
    v898[1] = &v899[8];
    *(_QWORD *)v899 = 0x300000000;
    if ((v632 & 1) == 0)
    {
      if (v631 >= 4)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v898[1], (uint64_t)&v899[8], v628, 8);
        v628 = v872;
        if ((_DWORD)v872)
LABEL_939:
          memcpy(v898[1], v871, 8 * v628);
      }
      else if (v628)
      {
        goto LABEL_939;
      }
      *(_DWORD *)v899 = v631;
      v670 = (unsigned __int8 *)v898[0];
    }
    *(_OWORD *)&v899[32] = v876;
    *(_DWORD *)&v899[48] = v877;
    *(_QWORD *)&v884 = v670;
    DWORD2(v884) = 0;
    sub_1C6245320((uint64_t)v842, (uint64_t *)&v884, (_DWORD *)&v884 + 2, (uint64_t)&v890);
    if (!v891[0])
      goto LABEL_997;
    v671 = v890;
    v672 = v845;
    if (v845 < v846)
    {
      *v845 = v898[0];
      v673 = v672 + 3;
      v672[1] = v672 + 3;
      v672[2] = (void *)0x300000000;
      if (v672 != v898)
      {
        v674 = *(_DWORD *)v899;
        if (*(_DWORD *)v899)
        {
          if (v898[1] == &v899[8])
          {
            if (*(_DWORD *)v899 < 4u)
            {
              v675 = &v899[8];
              v676 = *(unsigned int *)v899;
              goto LABEL_948;
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v672 + 1), (uint64_t)(v672 + 3), *(unsigned int *)v899, 8);
            v676 = *(unsigned int *)v899;
            if (*(_DWORD *)v899)
            {
              v675 = v898[1];
              v673 = v672[1];
LABEL_948:
              memcpy(v673, v675, 8 * v676);
            }
            *((_DWORD *)v672 + 4) = v674;
          }
          else
          {
            v672[1] = v898[1];
            *((_DWORD *)v672 + 4) = v674;
            *((_DWORD *)v672 + 5) = *(_DWORD *)&v899[4];
            v898[1] = &v899[8];
            *(_DWORD *)&v899[4] = 0;
          }
          *(_DWORD *)v899 = 0;
        }
      }
      v677 = *(_OWORD *)&v899[32];
      *((_DWORD *)v672 + 16) = *(_DWORD *)&v899[48];
      *((_OWORD *)v672 + 3) = v677;
      v678 = v672 + 9;
      goto LABEL_996;
    }
    v679 = (void **)v844;
    v680 = 0x8E38E38E38E38E39 * (((char *)v845 - (_BYTE *)v844) >> 3);
    v681 = v680 + 1;
    if (v680 + 1 > 0x38E38E38E38E38ELL)
      goto LABEL_1178;
    if (0x1C71C71C71C71C72 * (((char *)v846 - (_BYTE *)v844) >> 3) > v681)
      v681 = 0x1C71C71C71C71C72 * (((char *)v846 - (_BYTE *)v844) >> 3);
    if (0x8E38E38E38E38E39 * (((char *)v846 - (_BYTE *)v844) >> 3) >= 0x1C71C71C71C71C7)
      v682 = 0x38E38E38E38E38ELL;
    else
      v682 = v681;
    v809 = v890;
    if (v682)
    {
      if (v682 > 0x38E38E38E38E38ELL)
        goto LABEL_1179;
      v683 = (char *)operator new(72 * v682);
    }
    else
    {
      v683 = 0;
    }
    v684 = &v683[72 * v680];
    *(void **)v684 = v898[0];
    v685 = v684 + 24;
    *((_QWORD *)v684 + 1) = v684 + 24;
    v686 = (void **)(v684 + 8);
    *((_QWORD *)v684 + 2) = 0x300000000;
    v687 = *(unsigned int *)v899;
    if (v684 + 8 != (char *)&v898[1] && *(_DWORD *)v899 != 0)
    {
      if (v898[1] == &v899[8])
      {
        if (*(_DWORD *)v899 < 4u)
        {
          v689 = &v899[8];
          v690 = *(unsigned int *)v899;
          goto LABEL_969;
        }
        *((_DWORD *)v684 + 4) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v684 + 8), (uint64_t)(v684 + 24), v687, 8);
        v690 = *(unsigned int *)v899;
        if (*(_DWORD *)v899)
        {
          v689 = v898[1];
          v685 = *v686;
LABEL_969:
          memcpy(v685, v689, 8 * v690);
        }
        *((_DWORD *)v684 + 4) = v687;
        v679 = (void **)v844;
        v672 = v845;
      }
      else
      {
        *v686 = v898[1];
        v703 = *(_DWORD *)&v899[4];
        *((_DWORD *)v684 + 4) = v687;
        *((_DWORD *)v684 + 5) = v703;
        v898[1] = &v899[8];
        *(_DWORD *)&v899[4] = 0;
      }
      *(_DWORD *)v899 = 0;
    }
    v691 = &v683[72 * v680];
    *((_OWORD *)v691 + 3) = *(_OWORD *)&v899[32];
    *((_DWORD *)v691 + 16) = *(_DWORD *)&v899[48];
    v678 = (void **)(v684 + 72);
    if (v672 == v679)
    {
      v844 = &v683[72 * v680];
      v845 = (void **)(v684 + 72);
      v846 = (void **)&v683[72 * v682];
      v78 = v819;
LABEL_1002:
      v671 = v809;
      if (v679)
        goto LABEL_995;
      goto LABEL_996;
    }
    v806 = &v683[72 * v682];
    v692 = 0;
    while (2)
    {
      v693 = &v672[v692];
      v694 = &v684[v692 * 8];
      *((_QWORD *)v694 - 9) = v672[v692 - 9];
      v695 = &v684[v692 * 8 - 48];
      *(_QWORD *)&v684[v692 * 8 - 64] = v695;
      *((_QWORD *)v694 - 7) = 0x300000000;
      v696 = v672[v692 - 7];
      if (v696)
        v697 = v694 == (char *)v693;
      else
        v697 = 1;
      if (!v697)
      {
        v698 = (void **)*(v693 - 8);
        if (v693 - 6 == v698)
        {
          if (v696 < 4)
          {
            v699 = LODWORD(v672[v692 - 7]);
            goto LABEL_981;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v684[v692 * 8 - 64], (uint64_t)&v684[v692 * 8 - 48], LODWORD(v672[v692 - 7]), 8);
          v699 = *((unsigned int *)v693 - 14);
          if ((_DWORD)v699)
          {
            v698 = (void **)*(v693 - 8);
            v695 = *(char **)&v684[v692 * 8 - 64];
LABEL_981:
            memcpy(v695, v698, 8 * v699);
          }
          *((_DWORD *)v694 - 14) = v696;
        }
        else
        {
          *((_QWORD *)v694 - 8) = v698;
          *((_DWORD *)v694 - 14) = v696;
          *((_DWORD *)v694 - 13) = *((_DWORD *)&v672[v692 - 6] - 1);
          *(v693 - 8) = v693 - 6;
          *((_DWORD *)&v672[v692 - 6] - 1) = 0;
        }
        *((_DWORD *)v693 - 14) = 0;
      }
      v700 = *(_OWORD *)(v693 - 3);
      *((_DWORD *)v694 - 2) = *((_DWORD *)v693 - 2);
      *(_OWORD *)(v694 - 24) = v700;
      v692 -= 9;
      if (&v672[v692] != v679)
        continue;
      break;
    }
    v679 = (void **)v844;
    v701 = v845;
    v844 = &v684[v692 * 8];
    v845 = (void **)(v684 + 72);
    v846 = (void **)v806;
    v78 = v819;
    if (v701 == v679)
      goto LABEL_1002;
    v671 = v809;
    do
    {
      v702 = (void **)*(v701 - 8);
      if (v701 - 6 != v702)
        free(v702);
      v701 -= 9;
    }
    while (v701 != v679);
    if (v679)
LABEL_995:
      operator delete(v679);
LABEL_996:
    v845 = v678;
    *(_DWORD *)(v671 + 8) = 954437177 * ((unint64_t)((char *)v678 - (_BYTE *)v844) >> 3) - 1;
LABEL_997:
    if (v898[1] != &v899[8])
      free(v898[1]);
    if (v871 != &v873)
      free(v871);
LABEL_867:
    if ((_BYTE *)__src != v894)
      free((void *)__src);
LABEL_869:
    v79 += 2;
  }
  while (v79 != v824);
LABEL_84:
  sub_1C6176BF8(v837);
  if (!(_DWORD)v879)
  {
LABEL_236:
    v222 = 0;
    *((_DWORD *)v78 + 2) = 0;
    v223 = &unk_1C85F9000;
    goto LABEL_237;
  }
  v81 = 0;
  do
  {
    v82 = *(_QWORD *)(*v78 + 8 * v81);
    v83 = (char *)v878 + 112 * v81;
    v898[0] = v899;
    v898[1] = (void *)0x2000000000;
    v85 = (uint64_t *)*((_QWORD *)v83 + 3);
    v84 = (uint64_t *)*((_QWORD *)v83 + 4);
    if (v85 == v84)
      goto LABEL_234;
    v814 = (char *)v878 + 112 * v81 + 64;
    v816 = (char *)v878 + 112 * v81;
    v820 = (uint64_t *)*((_QWORD *)v83 + 4);
    v825 = v82;
    do
    {
      *(_QWORD *)&v884 = 0;
      v86 = *v85;
      *(_QWORD *)&v884 = *v85;
      if (!v843)
        goto LABEL_97;
      v87 = ((v86 >> 4) ^ (v86 >> 9)) & (v843 - 1);
      v88 = *(_QWORD *)(v842[0] + 16 * v87);
      if (v86 == v88)
      {
LABEL_90:
        if ((_DWORD)v87 != v843)
        {
          v89 = *(_DWORD *)(v842[0] + 16 * v87 + 8);
          v90 = v844;
          if ((char *)v844 + 72 * v89 != (char *)v845)
          {
            v91 = (char *)v844 + 72 * v89;
            v890 = *(_OWORD *)(v91 + 56);
            if (*(_BYTE *)(v82 + 16) == 33)
            {
              v871 = (void *)2;
              LODWORD(v872) = 0;
              sub_1C4848B64((uint64_t)&v890, (uint64_t)&v871);
              v84 = v820;
              v82 = v825;
            }
            v92 = (uint64_t)v890 >= dword_1ED8229D8;
            if (DWORD2(v890))
              v92 = (DWORD2(v890) & 0x80000000) == 0;
            if (!v92)
            {
              v93 = v884;
              v94 = LODWORD(v898[1]);
              if (LODWORD(v898[1]) >= (unint64_t)HIDWORD(v898[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v898, (uint64_t)v899, LODWORD(v898[1]) + 1, 8);
                v82 = v825;
                v94 = LODWORD(v898[1]);
              }
              v95 = (const void **)(v91 + 8);
              *((_QWORD *)v898[0] + v94) = v93;
              ++LODWORD(v898[1]);
              *(_QWORD *)&__src = v894;
              *((_QWORD *)&__src + 1) = 0x300000000;
              v96 = (char *)&v90[9 * v89];
              v99 = *((_DWORD *)v96 + 4);
              v98 = (unsigned int *)(v96 + 16);
              v97 = v99;
              if (v99 && &__src != (__int128 *)v95)
              {
                v100 = v97;
                v101 = v894;
                if (v97 < 4
                  || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v894, v97, 8),
                      v100 = *v98,
                      v101 = (_BYTE *)__src,
                      (_DWORD)v100))
                {
                  memcpy(v101, *v95, 8 * v100);
                  v101 = (_BYTE *)__src;
                }
                DWORD2(__src) = v97;
                v102 = &v101[8 * v97 - 8];
                v82 = v825;
                if (v101 < (_BYTE *)v102)
                {
                  v103 = v101 + 8;
                  do
                  {
                    v104 = *((_QWORD *)v103 - 1);
                    *((_QWORD *)v103 - 1) = *v102;
                    *v102-- = v104;
                    v626 = v103 >= (_BYTE *)v102;
                    v103 += 8;
                  }
                  while (!v626);
                }
              }
              v811 = v81;
              if (*(_BYTE *)(v82 + 16) == 84)
              {
                v105 = *(_QWORD *)(v82 + 32);
                v106 = *(_QWORD *)(v82 + 40);
                v833 = (llvm::Value *)v90[9 * v89 + 6];
                v107 = (llvm::Value **)sub_1C62A8A44((uint64_t)v847, (uint64_t *)&v884);
                if (!DWORD2(__src))
                {
                  v108 = 0;
LABEL_112:
                  v109 = v884;
                  v871 = v108;
                  v110 = (uint64_t)v814;
LABEL_173:
                  *(_QWORD *)sub_1C6324830(v110, (uint64_t *)&v871) = v109;
                  v81 = v811;
                  v78 = v819;
                  if ((_BYTE *)__src != v894)
                    free((void *)__src);
                  v84 = v820;
                  v82 = v825;
                  goto LABEL_97;
                }
                v108 = 0;
                v115 = 0;
                v116 = *v107;
                v117 = (llvm::Instruction **)__src;
                v118 = __src + 8 * DWORD2(__src);
                if (v105)
                  v119 = v105 == v106 + 40;
                else
                  v119 = 1;
                if (v119)
                  v120 = 0;
                else
                  v120 = v105 - 24;
                v121 = (uint64_t *)(v120 + 24);
                while (2)
                {
                  v122 = v115;
                  v123 = (llvm::Value *)v108;
                  v115 = *v117;
                  llvm::Instruction::clone(*v117);
                  v108 = (_QWORD *)v124;
                  v125 = *(_QWORD *)(v120 + 40);
                  *(_QWORD *)(v124 + 40) = v125;
                  *(_WORD *)(v125 + 18) &= ~0x8000u;
                  if ((*(_BYTE *)(v124 + 23) & 0x10) != 0)
                  {
                    v142 = *(_QWORD *)(v125 + 56);
                    if (v142)
                    {
                      v143 = *(llvm::ValueSymbolTable **)(v142 + 104);
                      if (v143)
                        llvm::ValueSymbolTable::reinsertValue(v143, (llvm::Value *)v108);
                    }
                  }
                  v126 = *v121;
                  v108[3] = *v121;
                  v108[4] = v121;
                  *(_QWORD *)(v126 + 8) = v108 + 3;
                  *v121 = (uint64_t)(v108 + 3);
                  if ((*((_BYTE *)v115 + 23) & 0x10) != 0)
                  {
                    v127 = ***(_QWORD ***)v115;
                    v128 = *(_QWORD *)(v127 + 152);
                    v129 = *(unsigned int *)(v127 + 168);
                    if (!(_DWORD)v129)
                      goto LABEL_134;
                    LODWORD(v130) = (v129 - 1) & ((v115 >> 4) ^ (v115 >> 9));
                    v131 = (llvm::Instruction **)(v128 + 16 * v130);
                    v132 = *v131;
                    if (*v131 != v115)
                    {
                      v133 = 1;
                      while (v132 != (llvm::Instruction *)-4096)
                      {
                        v134 = v130 + v133++;
                        v130 = v134 & (v129 - 1);
                        v132 = *(llvm::Instruction **)(v128 + 16 * v130);
                        if (v132 == v115)
                        {
                          v131 = (llvm::Instruction **)(v128 + 16 * v130);
                          goto LABEL_135;
                        }
                      }
LABEL_134:
                      v131 = (llvm::Instruction **)(v128 + 16 * v129);
                    }
LABEL_135:
                    v135 = v131[1];
                    v138 = *(_QWORD *)v135;
                    v137 = (char *)v135 + 16;
                    v136 = v138;
                  }
                  else
                  {
                    v136 = 0;
                    v137 = &byte_1C871356D;
                  }
                  LOWORD(v875) = 773;
                  v871 = v137;
                  v872 = v136;
                  v873 = ".remat";
                  llvm::Value::setName((uint64_t ***)v108, (uint64_t)&v871);
                  if (v123)
                  {
                    v139 = (llvm::User *)v108;
                    v140 = v122;
                    v141 = v123;
                    goto LABEL_140;
                  }
                  if (v833 != v116)
                  {
                    v139 = (llvm::User *)v108;
                    v140 = v833;
                    v141 = v116;
LABEL_140:
                    llvm::User::replaceUsesOfWith(v139, v140, v141);
                  }
                  if (++v117 == (llvm::Instruction **)v118)
                    goto LABEL_112;
                  continue;
                }
              }
              v111 = *(_QWORD *)(v82 - 96);
              v112 = v111 + 40;
              for (n = *(_QWORD *)(v111 + 48); n != v112; n = *(_QWORD *)(n + 8))
              {
                v114 = n - 24;
                if (!n)
                  v114 = 0;
                if (*(_BYTE *)(v114 + 16) != 83)
                {
                  v144 = *(unsigned __int8 *)(n - 8) - 38;
                  v145 = v144 > 0x38;
                  v146 = (1 << v144) & 0x100060000000001;
                  if (v145 || v146 == 0)
                    v112 = n;
                  else
                    v112 = *(_QWORD *)(n + 8);
                  break;
                }
              }
              if (v112)
                v148 = v112 - 24;
              else
                v148 = 0;
              v149 = *(_QWORD *)(v82 - 64);
              v150 = v149 + 40;
              for (ii = *(_QWORD *)(v149 + 48); ii != v150; ii = *(_QWORD *)(ii + 8))
              {
                v152 = ii - 24;
                if (!ii)
                  v152 = 0;
                if (*(_BYTE *)(v152 + 16) != 83)
                {
                  v153 = *(unsigned __int8 *)(ii - 8) - 38;
                  v145 = v153 > 0x38;
                  v154 = (1 << v153) & 0x100060000000001;
                  if (v145 || v154 == 0)
                    v150 = ii;
                  else
                    v150 = *(_QWORD *)(ii + 8);
                  break;
                }
              }
              if (v150)
                v156 = (llvm::Value *)(v150 - 24);
              else
                v156 = 0;
              v157 = (char *)&v90[9 * v89];
              v828 = (llvm::Value *)*((_QWORD *)v157 + 6);
              v834 = v156;
              v807 = (llvm::Value **)(v157 + 48);
              v158 = (llvm::Value **)sub_1C62A8A44((uint64_t)v847, (uint64_t *)&v884);
              v159 = 0;
              if (!DWORD2(__src))
              {
LABEL_170:
                v829 = *v807;
                v160 = (llvm::Value **)sub_1C62A8A44((uint64_t)v847, (uint64_t *)&v884);
                if (!DWORD2(__src))
                {
                  v161 = 0;
LABEL_172:
                  v162 = v884;
                  v871 = v159;
                  *(_QWORD *)sub_1C6324830((uint64_t)v814, (uint64_t *)&v871) = v162;
                  v109 = v884;
                  v871 = v161;
                  v110 = (uint64_t)v814;
                  goto LABEL_173;
                }
                v161 = 0;
                v190 = 0;
                v191 = *v160;
                v192 = (llvm::Instruction **)__src;
                v193 = __src + 8 * DWORD2(__src);
                v194 = (uint64_t *)((char *)v834 + 24);
                while (2)
                {
                  v195 = v190;
                  v196 = (llvm::Value *)v161;
                  v190 = *v192;
                  llvm::Instruction::clone(*v192);
                  v161 = (_QWORD *)v197;
                  v198 = *((_QWORD *)v834 + 5);
                  *(_QWORD *)(v197 + 40) = v198;
                  *(_WORD *)(v198 + 18) &= ~0x8000u;
                  if ((*(_BYTE *)(v197 + 23) & 0x10) != 0)
                  {
                    v215 = *(_QWORD *)(v198 + 56);
                    if (v215)
                    {
                      v216 = *(llvm::ValueSymbolTable **)(v215 + 104);
                      if (v216)
                        llvm::ValueSymbolTable::reinsertValue(v216, (llvm::Value *)v161);
                    }
                  }
                  v199 = *v194;
                  v161[3] = *v194;
                  v161[4] = v194;
                  *(_QWORD *)(v199 + 8) = v161 + 3;
                  *v194 = (uint64_t)(v161 + 3);
                  if ((*((_BYTE *)v190 + 23) & 0x10) != 0)
                  {
                    v200 = ***(_QWORD ***)v190;
                    v201 = *(_QWORD *)(v200 + 152);
                    v202 = *(unsigned int *)(v200 + 168);
                    if (!(_DWORD)v202)
                      goto LABEL_207;
                    LODWORD(v203) = (v202 - 1) & ((v190 >> 4) ^ (v190 >> 9));
                    v204 = (llvm::Instruction **)(v201 + 16 * v203);
                    v205 = *v204;
                    if (*v204 != v190)
                    {
                      v206 = 1;
                      while (v205 != (llvm::Instruction *)-4096)
                      {
                        v207 = v203 + v206++;
                        v203 = v207 & (v202 - 1);
                        v205 = *(llvm::Instruction **)(v201 + 16 * v203);
                        if (v205 == v190)
                        {
                          v204 = (llvm::Instruction **)(v201 + 16 * v203);
                          goto LABEL_208;
                        }
                      }
LABEL_207:
                      v204 = (llvm::Instruction **)(v201 + 16 * v202);
                    }
LABEL_208:
                    v208 = v204[1];
                    v211 = *(_QWORD *)v208;
                    v210 = (char *)v208 + 16;
                    v209 = v211;
                  }
                  else
                  {
                    v209 = 0;
                    v210 = &byte_1C871356D;
                  }
                  LOWORD(v875) = 773;
                  v871 = v210;
                  v872 = v209;
                  v873 = ".remat";
                  llvm::Value::setName((uint64_t ***)v161, (uint64_t)&v871);
                  if (v196)
                  {
                    v212 = (llvm::User *)v161;
                    v213 = v195;
                    v214 = v196;
                    goto LABEL_213;
                  }
                  if (v829 != v191)
                  {
                    v212 = (llvm::User *)v161;
                    v213 = v829;
                    v214 = v191;
LABEL_213:
                    llvm::User::replaceUsesOfWith(v212, v213, v214);
                  }
                  if (++v192 == (llvm::Instruction **)v193)
                    goto LABEL_172;
                  continue;
                }
              }
              v159 = 0;
              v163 = 0;
              v164 = *v158;
              v165 = (llvm::Instruction **)__src;
              v166 = __src + 8 * DWORD2(__src);
              v167 = (uint64_t *)(v148 + 24);
              while (2)
              {
                v168 = v163;
                v169 = (llvm::Value *)v159;
                v163 = *v165;
                llvm::Instruction::clone(*v165);
                v159 = (_QWORD *)v170;
                v171 = *(_QWORD *)(v148 + 40);
                *(_QWORD *)(v170 + 40) = v171;
                *(_WORD *)(v171 + 18) &= ~0x8000u;
                if ((*(_BYTE *)(v170 + 23) & 0x10) != 0)
                {
                  v188 = *(_QWORD *)(v171 + 56);
                  if (v188)
                  {
                    v189 = *(llvm::ValueSymbolTable **)(v188 + 104);
                    if (v189)
                      llvm::ValueSymbolTable::reinsertValue(v189, (llvm::Value *)v159);
                  }
                }
                v172 = *v167;
                v159[3] = *v167;
                v159[4] = v167;
                *(_QWORD *)(v172 + 8) = v159 + 3;
                *v167 = (uint64_t)(v159 + 3);
                if ((*((_BYTE *)v163 + 23) & 0x10) != 0)
                {
                  v173 = ***(_QWORD ***)v163;
                  v174 = *(_QWORD *)(v173 + 152);
                  v175 = *(unsigned int *)(v173 + 168);
                  if (!(_DWORD)v175)
                    goto LABEL_185;
                  LODWORD(v176) = (v175 - 1) & ((v163 >> 4) ^ (v163 >> 9));
                  v177 = (llvm::Instruction **)(v174 + 16 * v176);
                  v178 = *v177;
                  if (*v177 != v163)
                  {
                    v179 = 1;
                    while (v178 != (llvm::Instruction *)-4096)
                    {
                      v180 = v176 + v179++;
                      v176 = v180 & (v175 - 1);
                      v178 = *(llvm::Instruction **)(v174 + 16 * v176);
                      if (v178 == v163)
                      {
                        v177 = (llvm::Instruction **)(v174 + 16 * v176);
                        goto LABEL_186;
                      }
                    }
LABEL_185:
                    v177 = (llvm::Instruction **)(v174 + 16 * v175);
                  }
LABEL_186:
                  v181 = v177[1];
                  v184 = *(_QWORD *)v181;
                  v183 = (char *)v181 + 16;
                  v182 = v184;
                }
                else
                {
                  v182 = 0;
                  v183 = &byte_1C871356D;
                }
                LOWORD(v875) = 773;
                v871 = v183;
                v872 = v182;
                v873 = ".remat";
                llvm::Value::setName((uint64_t ***)v159, (uint64_t)&v871);
                if (v169)
                {
                  v185 = (llvm::User *)v159;
                  v186 = v168;
                  v187 = v169;
                  goto LABEL_191;
                }
                if (v828 != v164)
                {
                  v185 = (llvm::User *)v159;
                  v186 = v828;
                  v187 = v164;
LABEL_191:
                  llvm::User::replaceUsesOfWith(v185, v186, v187);
                }
                if (++v165 == (llvm::Instruction **)v166)
                  goto LABEL_170;
                continue;
              }
            }
          }
        }
      }
      else
      {
        v217 = 1;
        while (v88 != -4096)
        {
          v218 = v87 + v217++;
          v87 = v218 & (v843 - 1);
          v88 = *(_QWORD *)(v842[0] + 16 * v87);
          if (v86 == v88)
            goto LABEL_90;
        }
      }
LABEL_97:
      ++v85;
    }
    while (v85 != v84);
    v219 = (void **)v898[0];
    if (LODWORD(v898[1]))
    {
      v220 = 8 * LODWORD(v898[1]);
      do
      {
        v871 = 0;
        v221 = *v219++;
        v871 = v221;
        sub_1C6324178((uint64_t)v816, &v871);
        v220 -= 8;
      }
      while (v220);
      v219 = (void **)v898[0];
    }
    if (v219 != (void **)v899)
      free(v219);
LABEL_234:
    ++v81;
  }
  while (v81 < v879);
  if (!(_DWORD)v879)
    goto LABEL_236;
  v412 = 0;
  v222 = 0;
  v413 = 0;
  v821 = 0;
  do
  {
    v414 = *(_QWORD *)(*v78 + 8 * v412);
    v830 = (llvm::Value *)v878;
    v415 = (char *)v878 + 112 * v412;
    v898[0] = v899;
    v898[1] = (void *)0x4000000000;
    v871 = &v873;
    v872 = 0x4000000000;
    v417 = (uint64_t *)*((_QWORD *)v415 + 3);
    v416 = (uint64_t *)*((_QWORD *)v415 + 4);
    v418 = (char *)v416 - (char *)v417;
    if ((unint64_t)((char *)v416 - (char *)v417) < 0x201)
    {
      v419 = 64;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v871, (uint64_t)&v873, v418 >> 3, 8);
      v417 = (uint64_t *)*((_QWORD *)v415 + 3);
      v416 = (uint64_t *)*((_QWORD *)v415 + 4);
      v419 = HIDWORD(v898[1]);
      v418 = (char *)v416 - (char *)v417;
    }
    if (v418 >> 3 > v419)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v898, (uint64_t)v899, v418 >> 3, 8);
      v417 = (uint64_t *)*((_QWORD *)v415 + 3);
      v416 = (uint64_t *)*((_QWORD *)v415 + 4);
    }
    while (v417 != v416)
    {
      v420 = *v417;
      v421 = v872;
      if (v872 >= (unint64_t)HIDWORD(v872))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v871, (uint64_t)&v873, v872 + 1, 8);
        v421 = v872;
      }
      *((_QWORD *)v871 + v421) = v420;
      LODWORD(v872) = v872 + 1;
      v422 = *(_QWORD *)(sub_1C63248EC((uint64_t)v847, v420) + 8);
      v423 = LODWORD(v898[1]);
      if (LODWORD(v898[1]) >= (unint64_t)HIDWORD(v898[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v898, (uint64_t)v899, LODWORD(v898[1]) + 1, 8);
        v423 = LODWORD(v898[1]);
      }
      *((_QWORD *)v898[0] + v423) = v422;
      ++LODWORD(v898[1]);
      ++v417;
    }
    sub_1C4773D54((uint64_t)&__src, v414, 0, 0, 0);
    v424 = 0;
    v815 = v872;
    v817 = (uint64_t *)v871;
    v425 = *(_DWORD *)(v414 + 20);
    v426 = *(unsigned __int8 *)(v414 + 16);
    v836 = v222;
    if (v426 != 84)
    {
      if (v426 == 39)
        v424 = (*(_DWORD *)(v414 + 80) + 1);
      else
        v424 = 2;
    }
    v427 = v425 & 0x7FFFFFF;
    v428 = (_QWORD *)(v414 - 32 * v427);
    if (v425 < 0 && (v571 = *(v428 - 1), (v571 & 0xFFFFFFFF0) != 0))
      v429 = (*((_DWORD *)v428 - 3) - *(_DWORD *)((char *)v428 - v571));
    else
      v429 = 0;
    v430 = v414 - 32 * v424 - 32 * v429 - 32;
    *(_QWORD *)&v890 = v891;
    *((_QWORD *)&v890 + 1) = 0x800000000;
    v431 = v430 - (_QWORD)v428;
    if ((unint64_t)(v430 - (_QWORD)v428) >= 0x101)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v890, (uint64_t)v891, v431 >> 5, 8);
      v432 = DWORD2(v890);
      v433 = DWORD2(v890);
    }
    else
    {
      v432 = 0;
      v433 = 0;
    }
    if (v428 != (_QWORD *)v430)
    {
      v434 = (_QWORD *)(v890 + 8 * v432);
      v435 = 32 * v427 - 32 * v424 - 32 * v429 - 32;
      do
      {
        v436 = *v428;
        v428 += 4;
        *v434++ = v436;
        v435 -= 32;
      }
      while (v435);
    }
    DWORD2(v890) = v433 + ((unint64_t)v431 >> 5);
    sub_1C5062CEC(v414, 0, (uint64_t)&v884);
    if (v886)
    {
      v437 = v884;
      v889[0] = *(_QWORD *)((char *)&v884 + 1);
      *(_QWORD *)((char *)v889 + 7) = *((_QWORD *)&v884 + 1);
      v438 = 1;
    }
    else
    {
      v437 = 0;
      v438 = 0;
    }
    sub_1C5062CEC(v414, 2, (uint64_t)&v884);
    if (v886)
    {
      v439 = v884;
      v888[0] = *(_QWORD *)((char *)&v884 + 1);
      *(_QWORD *)((char *)v888 + 7) = *((_QWORD *)&v884 + 1);
      v440 = 1;
    }
    else
    {
      v439 = 0;
      v440 = 0;
    }
    llvm::parseStatepointDirectivesFromAttrs(*(_QWORD *)(v414 + 64), &v865);
    if (v866)
      v441 = v865;
    else
      v441 = 0;
    v810 = v441;
    v442 = 2882400000;
    if (v868)
      v442 = v867;
    v808 = v442;
    v443 = *(_QWORD *)(v414 + 64);
    __dst = v438;
    v812 = v437;
    if (v443)
    {
      if (*(_DWORD *)(v443 + 8))
      {
        v444 = *(_QWORD *)(v443 + 40);
        if (v444)
        {
          v445 = *(_DWORD *)(v444 + 40);
          if (v445)
          {
            v446 = *(_QWORD *)(v444 + 24);
            v447 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
            if ((v447 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
            {
              v568 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v568 = 0xFF51AFD7ED558CCDLL;
              qword_1ED7EAC80 = v568;
              __cxa_guard_release(&qword_1ED7EAC88);
            }
            v448 = 0x9DDFEA08EB382D69
                 * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xD285B0CDD5A6F0B9)) ^ ((0x9DDFEA08EB382D69
                                                                                        * (qword_1ED7EAC80 ^ 0xD285B0CDD5A6F0B9)) >> 47) ^ 0xBDE99DB9A5C995DDLL);
            v449 = (-348639895 * ((v448 >> 47) ^ v448)) ^ 0x65776F6C;
            for (jj = 1; ; ++jj)
            {
              v451 = v449 & (v445 - 1);
              v452 = v446 + 24 * v451;
              v453 = *(_QWORD **)v452;
              if (*(_QWORD *)v452 == -1)
              {
                if ("deopt-lowering" == (char *)-1)
                  goto LABEL_539;
              }
              else if (v453 == (_QWORD *)-2)
              {
                if ("deopt-lowering" == (char *)-2)
                  goto LABEL_539;
              }
              else if (*(_QWORD *)(v452 + 8) == 14
                     && *v453 == 0x6F6C2D74706F6564
                     && *(_QWORD *)((char *)v453 + 6) == 0x676E697265776F6CLL)
              {
                goto LABEL_539;
              }
              if (v453 == (_QWORD *)-1)
                break;
              v449 = jj + v451;
            }
          }
        }
      }
    }
    if (!llvm::CallBase::hasFnAttrOnCalledFunction(v414, "deopt-lowering", 0xEuLL))
    {
LABEL_601:
      v497 = v440;
      goto LABEL_602;
    }
LABEL_539:
    v455 = v412;
    v456 = v439;
    v457 = v440;
    v458 = *(_QWORD *)(v414 + 64);
    if (!v458 || !*(_DWORD *)(v458 + 8) || (v459 = *(_QWORD *)(v458 + 40)) == 0 || (v460 = *(_DWORD *)(v459 + 40)) == 0)
    {
LABEL_577:
      v481 = *(_QWORD *)(*(_QWORD *)(v414 - 32) + 112);
      if (v481)
      {
        v440 = v457;
        if (*(_DWORD *)(v481 + 8))
        {
          v482 = *(_QWORD *)(v481 + 40);
          v439 = v456;
          if (v482)
          {
            v483 = *(_DWORD *)(v482 + 40);
            v412 = v455;
            if (v483)
            {
              v484 = *(_QWORD *)(v482 + 24);
              v485 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
              if ((v485 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
              {
                v570 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override)
                  v570 = 0xFF51AFD7ED558CCDLL;
                qword_1ED7EAC80 = v570;
                __cxa_guard_release(&qword_1ED7EAC88);
              }
              v486 = 0x9DDFEA08EB382D69
                   * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xD285B0CDD5A6F0B9)) ^ ((0x9DDFEA08EB382D69
                                                                                          * (qword_1ED7EAC80 ^ 0xD285B0CDD5A6F0B9)) >> 47) ^ 0xBDE99DB9A5C995DDLL);
              v487 = (-348639895 * ((v486 >> 47) ^ v486)) ^ 0x65776F6C;
              for (kk = 1; ; ++kk)
              {
                v489 = v487 & (v483 - 1);
                v478 = v484 + 24 * v489;
                v490 = *(_QWORD **)v478;
                if (*(_QWORD *)v478 == -1)
                {
                  if ("deopt-lowering" == (char *)-1)
                    goto LABEL_596;
                }
                else if (v490 == (_QWORD *)-2)
                {
                  if ("deopt-lowering" == (char *)-2)
                    goto LABEL_596;
                }
                else if (*(_QWORD *)(v478 + 8) == 14
                       && *v490 == 0x6F6C2D74706F6564
                       && *(_QWORD *)((char *)v490 + 6) == 0x676E697265776F6CLL)
                {
                  goto LABEL_596;
                }
                if (v490 == (_QWORD *)-1)
                  goto LABEL_601;
                v487 = kk + v489;
              }
            }
LABEL_644:
            v497 = v440;
            goto LABEL_602;
          }
LABEL_718:
          v497 = v440;
LABEL_639:
          v412 = v455;
          goto LABEL_602;
        }
LABEL_843:
        v497 = v440;
      }
      else
      {
        LOBYTE(v440) = v457;
        v497 = v457;
      }
      v439 = v456;
      goto LABEL_639;
    }
    v461 = *(_QWORD *)(v459 + 24);
    v462 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v462 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
    {
      v569 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v569 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v569;
      __cxa_guard_release(&qword_1ED7EAC88);
    }
    v463 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xD285B0CDD5A6F0B9)) ^ ((0x9DDFEA08EB382D69
                                                                                * (qword_1ED7EAC80 ^ 0xD285B0CDD5A6F0B9)) >> 47) ^ 0xBDE99DB9A5C995DDLL);
    v464 = (-348639895 * ((v463 >> 47) ^ v463)) ^ 0x65776F6C;
    for (mm = 1; ; ++mm)
    {
      v466 = v464 & (v460 - 1);
      v467 = v461 + 24 * v466;
      v468 = *(_QWORD **)v467;
      if (*(_QWORD *)v467 == -1)
      {
        if ("deopt-lowering" == (char *)-1)
          goto LABEL_558;
        goto LABEL_547;
      }
      if (v468 != (_QWORD *)-2)
        break;
      if ("deopt-lowering" == (char *)-2)
        goto LABEL_558;
LABEL_547:
      if (v468 == (_QWORD *)-1)
        goto LABEL_577;
      v464 = mm + v466;
    }
    if (*(_QWORD *)(v467 + 8) != 14)
      goto LABEL_547;
    if (*v468 != 0x6F6C2D74706F6564 || *(_QWORD *)((char *)v468 + 6) != 0x676E697265776F6CLL)
      goto LABEL_547;
LABEL_558:
    v440 = v457;
    if (!*(_DWORD *)(v458 + 8))
      goto LABEL_843;
    v470 = *(_QWORD *)(v458 + 40);
    v439 = v456;
    if (!v470)
      goto LABEL_718;
    v471 = *(_DWORD *)(v470 + 40);
    v412 = v455;
    if (!v471)
      goto LABEL_644;
    v472 = *(_QWORD *)(v470 + 24);
    v473 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v473 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
    {
      v620 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v620 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v620;
      __cxa_guard_release(&qword_1ED7EAC88);
    }
    v474 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xD285B0CDD5A6F0B9)) ^ ((0x9DDFEA08EB382D69
                                                                                * (qword_1ED7EAC80 ^ 0xD285B0CDD5A6F0B9)) >> 47) ^ 0xBDE99DB9A5C995DDLL);
    v475 = (-348639895 * ((v474 >> 47) ^ v474)) ^ 0x65776F6C;
    v476 = 1;
    while (2)
    {
      v477 = v475 & (v471 - 1);
      v478 = v472 + 24 * v477;
      v479 = *(_QWORD **)v478;
      if (*(_QWORD *)v478 == -1)
      {
        if ("deopt-lowering" == (char *)-1)
          break;
        goto LABEL_565;
      }
      if (v479 == (_QWORD *)-2)
      {
        if ("deopt-lowering" == (char *)-2)
          break;
        goto LABEL_565;
      }
      if (*(_QWORD *)(v478 + 8) != 14
        || (*v479 == 0x6F6C2D74706F6564 ? (v480 = *(_QWORD *)((char *)v479 + 6) == 0x676E697265776F6CLL) : (v480 = 0),
            !v480))
      {
LABEL_565:
        if (v479 == (_QWORD *)-1)
          goto LABEL_601;
        v475 = v476 + v477;
        ++v476;
        continue;
      }
      break;
    }
LABEL_596:
    v492 = *(_QWORD *)(v478 + 16);
    if (!v492 || *(_DWORD *)(v492 + 16) != 7)
      goto LABEL_601;
    v493 = v492 + *(unsigned int *)(v492 + 12);
    v494 = bswap32(*(_DWORD *)(v493 + 25));
    v495 = 1818850917;
    if (v494 == 1818850917 && (v494 = bswap32(*(_DWORD *)(v493 + 28)), v495 = 1697474926, v494 == 1697474926))
    {
      v496 = 0;
    }
    else if (v494 < v495)
    {
      v496 = -1;
    }
    else
    {
      v496 = 1;
    }
    if (v496)
      v497 = v440;
    else
      v497 = v440 | 2;
LABEL_602:
    v498 = 0;
    inserted = *(llvm::PointerType **)(v414 + 72);
    v500 = *(llvm::ValueHandleBase **)(v414 - 32);
    if (v500 && !*((_BYTE *)v500 + 16))
    {
      v805 = v440;
      v501 = *((_DWORD *)v500 + 9);
      if (v501 == 198 || v501 == 195)
      {
        v804 = v497;
        v802 = v439;
        v506 = **(unsigned __int8 ***)v414;
        v864[0] = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v414 + 40) + 56) + 40) + 272);
        v864[1] = (unsigned __int8 *)v847;
        v864[2] = (unsigned __int8 *)&__src;
        v864[3] = v506;
        v507 = sub_1C5C098CC((uint64_t)v864, *(unsigned __int8 **)v890);
        v509 = v508;
        v510 = sub_1C5C098CC((uint64_t)v864, *(unsigned __int8 **)(v890 + 8));
        v512 = v511;
        v513 = v890;
        v514 = *(_QWORD *)(v890 + 16);
        v801 = *(_QWORD *)(v890 + 24);
        DWORD2(v890) = 0;
        if (HIDWORD(v890))
        {
          v515 = 0;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v890, (uint64_t)v891, 1uLL, 8);
          v513 = v890;
          v515 = DWORD2(v890);
        }
        *(_QWORD *)(v513 + 8 * v515) = v507;
        v516 = (DWORD2(v890) + 1);
        DWORD2(v890) = v516;
        if (v516 >= HIDWORD(v890))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v890, (uint64_t)v891, v516 + 1, 8);
          LODWORD(v516) = DWORD2(v890);
        }
        *(_QWORD *)(v890 + 8 * v516) = v509;
        v517 = (DWORD2(v890) + 1);
        DWORD2(v890) = v517;
        if (v517 >= HIDWORD(v890))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v890, (uint64_t)v891, v517 + 1, 8);
          LODWORD(v517) = DWORD2(v890);
        }
        *(_QWORD *)(v890 + 8 * v517) = v510;
        v518 = (DWORD2(v890) + 1);
        DWORD2(v890) = v518;
        if (v518 >= HIDWORD(v890))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v890, (uint64_t)v891, v518 + 1, 8);
          LODWORD(v518) = DWORD2(v890);
        }
        *(_QWORD *)(v890 + 8 * v518) = v512;
        v519 = (DWORD2(v890) + 1);
        DWORD2(v890) = v519;
        if (v519 >= HIDWORD(v890))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v890, (uint64_t)v891, v519 + 1, 8);
          LODWORD(v519) = DWORD2(v890);
        }
        *(_QWORD *)(v890 + 8 * v519) = v514;
        v520 = (uint64_t *)&v885;
        *(_QWORD *)&v884 = &v885;
        *((_QWORD *)&v884 + 1) = 0x800000000;
        v626 = __CFADD__(DWORD2(v890), 1);
        v521 = ++DWORD2(v890);
        v522 = 0;
        if (!v626)
        {
          v523 = (uint64_t **)v890;
          v524 = 8 * v521;
          do
          {
            v525 = **v523;
            if (v522 >= HIDWORD(v884))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v884, (uint64_t)&v885, v522 + 1, 8);
              v522 = DWORD2(v884);
            }
            *(_QWORD *)(v884 + 8 * v522) = v525;
            v522 = ++DWORD2(v884);
            ++v523;
            v524 -= 8;
          }
          while (v524);
          v520 = (uint64_t *)v884;
        }
        result = llvm::FunctionType::get((uint64_t **)(***(_QWORD ***)v500 + 1576), v520, v522, 0);
        v527 = (llvm::PointerType *)result;
        v528 = (_QWORD *)(v801 + 24);
        v497 = v804;
        if (*(_DWORD *)(v801 + 32) >= 0x41u)
          v528 = (_QWORD *)*v528;
        v529 = *v528 - 1;
        if (v501 == 195)
        {
          LOBYTE(v440) = v805;
          v530 = "__llvm_memcpy_element_unordered_atomic_safepoint_1";
          switch(v529)
          {
            case 0:
              goto LABEL_651;
            case 1:
              v530 = "__llvm_memcpy_element_unordered_atomic_safepoint_2";
              goto LABEL_651;
            case 2:
            case 4:
            case 5:
            case 6:
              goto LABEL_1180;
            case 3:
              v530 = "__llvm_memcpy_element_unordered_atomic_safepoint_4";
              goto LABEL_651;
            case 7:
              v530 = "__llvm_memcpy_element_unordered_atomic_safepoint_8";
              goto LABEL_651;
            default:
              v530 = "__llvm_memcpy_element_unordered_atomic_safepoint_16";
              goto LABEL_651;
          }
        }
        LOBYTE(v440) = v805;
        v530 = "__llvm_memmove_element_unordered_atomic_safepoint_1";
        switch(v529)
        {
          case 0:
            goto LABEL_651;
          case 1:
            v530 = "__llvm_memmove_element_unordered_atomic_safepoint_2";
            goto LABEL_651;
          case 2:
          case 4:
          case 5:
          case 6:
LABEL_1180:
            __break(1u);
            return result;
          case 3:
            v530 = "__llvm_memmove_element_unordered_atomic_safepoint_4";
            goto LABEL_651;
          case 7:
            v530 = "__llvm_memmove_element_unordered_atomic_safepoint_8";
            goto LABEL_651;
          default:
            v530 = "__llvm_memmove_element_unordered_atomic_safepoint_16";
LABEL_651:
            v534 = strlen(v530);
            inserted = llvm::Module::getOrInsertFunction(*((_QWORD *)v500 + 5), (unsigned __int8 *)v530, v534, v527, 0);
            v500 = v535;
            if ((unsigned int *)v884 != &v885)
              free((void *)v884);
            v498 = 0;
            v439 = v802;
            break;
        }
      }
      else if (v501 == 119)
      {
        v803 = v497;
        *(_QWORD *)&v884 = &v885;
        *((_QWORD *)&v884 + 1) = 0x800000000;
        if (DWORD2(v890))
        {
          v502 = 0;
          v503 = (uint64_t **)v890;
          v504 = 8 * DWORD2(v890);
          do
          {
            v505 = **v503;
            if (v502 >= HIDWORD(v884))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v884, (uint64_t)&v885, v502 + 1, 8);
              v502 = DWORD2(v884);
            }
            *(_QWORD *)(v884 + 8 * v502) = v505;
            v502 = ++DWORD2(v884);
            ++v503;
            v504 -= 8;
          }
          while (v504);
          v531 = (uint64_t *)v884;
        }
        else
        {
          v502 = 0;
          v531 = (uint64_t *)&v885;
        }
        v532 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(***(_QWORD ***)v500 + 1576), v531, v502, 0);
        inserted = llvm::Module::getOrInsertFunction(*((_QWORD *)v500 + 5), "__llvm_deoptimize", 0x11uLL, v532, 0);
        v500 = v533;
        LOBYTE(v440) = v805;
        if ((unsigned int *)v884 != &v885)
          free((void *)v884);
        v498 = 1;
        v497 = v803;
      }
      else
      {
        v498 = 0;
        LOBYTE(v440) = v805;
      }
    }
    if (v414 && *(_BYTE *)(v414 + 16) == 84)
    {
      LOBYTE(v861) = v439;
      *(_QWORD *)((char *)&v861 + 1) = v888[0];
      *((_QWORD *)&v861 + 1) = *(_QWORD *)((char *)v888 + 7);
      v862 = v440;
      *(_DWORD *)v863 = *(_DWORD *)v869;
      *(_DWORD *)&v863[3] = *(_DWORD *)&v869[3];
      LOBYTE(v858) = v812;
      *((_QWORD *)&v858 + 1) = *(_QWORD *)((char *)v889 + 7);
      *(_QWORD *)((char *)&v858 + 1) = v889[0];
      v859 = __dst;
      *(_DWORD *)v860 = *(_DWORD *)v870;
      *(_DWORD *)&v860[3] = *(_DWORD *)&v870[3];
      *(_QWORD *)&v884 = "safepoint_token";
      v887 = 259;
      v536 = llvm::IRBuilderBase::CreateGCStatepointCall((uint64_t)&__src, v808, (const llvm::APInt *)v810, (uint64_t)inserted, v500, v497, (char *)v890, DWORD2(v890), &v861, &v858, v817, v815, (uint64_t)&v884);
      v537 = *(_WORD *)(v536 + 18) & 0xFFFC | *(_WORD *)(v414 + 18) & 3;
      *(_WORD *)(v536 + 18) = v537;
      *(_WORD *)(v536 + 18) = *(_WORD *)(v414 + 18) & 0xFFC | v537 & 0xF003;
      v538 = sub_1C5C09C38(**(llvm::LLVMContext ***)v414, *(_QWORD *)(v414 + 64), *(_QWORD *)(v536 + 64));
      v539 = 0;
      *(_QWORD *)(v536 + 64) = v538;
      v540 = *(_QWORD *)(v414 + 32);
      if (v540)
        v541 = v540 == *(_QWORD *)(v414 + 40) + 40;
      else
        v541 = 1;
      if (v541)
        v542 = 0;
      else
        v542 = v540 - 24;
      v896 = *(_QWORD *)(v542 + 40);
      v897 = v542 + 24;
      v543 = *(unsigned __int8 **)(v542 + 48);
      *(_QWORD *)&v884 = v543;
      if (v543)
      {
        llvm::MetadataTracking::track((uint64_t)&v884, v543, 2);
        v539 = v884;
      }
      sub_1C4774EF4((uint64_t)&__src, 0, v539);
      v78 = v819;
      if ((_QWORD)v884)
        llvm::MetadataTracking::untrack((uint64_t)&v884, (unsigned __int8 *)v884);
      v544 = *(_QWORD *)(v414 + 32);
      if (v544)
        v545 = v544 == *(_QWORD *)(v414 + 40) + 40;
      else
        v545 = 1;
      if (v545)
        v546 = 0;
      else
        v546 = v544 - 24;
      v547 = *(unsigned __int8 **)(v546 + 48);
      v864[0] = v547;
      if (v547)
      {
        llvm::MetadataTracking::track((uint64_t)v864, v547, 2);
        v548 = v864[0];
      }
      else
      {
        v548 = 0;
      }
      sub_1C4774EF4((uint64_t)&__src, 0, (uint64_t)v548);
      v555 = v864[0];
      if (v864[0])
      {
        v556 = v864;
        goto LABEL_685;
      }
    }
    else
    {
      v549 = *(_QWORD *)(v414 - 96);
      v550 = *(_QWORD *)(v414 - 64);
      LOBYTE(v855) = v439;
      *(_QWORD *)((char *)&v855 + 1) = v888[0];
      *((_QWORD *)&v855 + 1) = *(_QWORD *)((char *)v888 + 7);
      v856 = v440;
      *(_DWORD *)v857 = *(_DWORD *)v869;
      *(_DWORD *)&v857[3] = *(_DWORD *)&v869[3];
      LOBYTE(v852) = v812;
      *((_QWORD *)&v852 + 1) = *(_QWORD *)((char *)v889 + 7);
      *(_QWORD *)((char *)&v852 + 1) = v889[0];
      v853 = __dst;
      *(_DWORD *)v854 = *(_DWORD *)v870;
      *(_DWORD *)&v854[3] = *(_DWORD *)&v870[3];
      *(_QWORD *)&v884 = "statepoint_token";
      v887 = 259;
      v536 = (uint64_t)llvm::IRBuilderBase::CreateGCStatepointInvoke((uint64_t)&__src, v808, (const llvm::APInt *)v810, (uint64_t)inserted, v500, v549, v550, v497, (char *)v890, DWORD2(v890), &v855, &v852, v817, v815, (uint64_t)&v884);
      *(_WORD *)(v536 + 18) = *(_WORD *)(v536 + 18) & 0xF003 | *(_WORD *)(v414 + 18) & 0xFFC;
      *(_QWORD *)(v536 + 64) = sub_1C5C09C38(**(llvm::LLVMContext ***)v414, *(_QWORD *)(v414 + 64), *(_QWORD *)(v536 + 64));
      v551 = *(_QWORD *)(v414 - 64);
      v552 = v551 + 40;
      v553 = *(_QWORD *)(v551 + 48);
      if (v553 == v551 + 40)
      {
        v553 = v551 + 40;
        v78 = v819;
      }
      else
      {
        v78 = v819;
        while (1)
        {
          v554 = v553 - 24;
          if (!v553)
            v554 = 0;
          if (*(_BYTE *)(v554 + 16) != 83)
            break;
          v553 = *(_QWORD *)(v553 + 8);
          if (v553 == v552)
          {
            v553 = v551 + 40;
            goto LABEL_691;
          }
        }
        v557 = *(unsigned __int8 *)(v553 - 8) - 38;
        v145 = v557 > 0x38;
        v558 = (1 << v557) & 0x100060000000001;
        if (!v145 && v558 != 0)
          v553 = *(_QWORD *)(v553 + 8);
      }
LABEL_691:
      v560 = 0;
      if (v553)
        v561 = v553 - 24;
      else
        v561 = 0;
      v896 = *(_QWORD *)(v561 + 40);
      v897 = v561 + 24;
      v562 = *(unsigned __int8 **)(v561 + 48);
      *(_QWORD *)&v884 = v562;
      if (v562)
      {
        llvm::MetadataTracking::track((uint64_t)&v884, v562, 2);
        v560 = v884;
      }
      sub_1C4774EF4((uint64_t)&__src, 0, v560);
      if ((_QWORD)v884)
        llvm::MetadataTracking::untrack((uint64_t)&v884, (unsigned __int8 *)v884);
      v563 = *(unsigned __int8 **)(v414 + 48);
      v864[0] = v563;
      if (v563)
      {
        llvm::MetadataTracking::track((uint64_t)v864, v563, 2);
        v564 = v864[0];
      }
      else
      {
        v564 = 0;
      }
      sub_1C4774EF4((uint64_t)&__src, 0, (uint64_t)v564);
      if (v864[0])
        llvm::MetadataTracking::untrack((uint64_t)v864, v864[0]);
      for (nn = *(_QWORD *)(v551 + 48); nn != v552; nn = *(_QWORD *)(nn + 8))
      {
        v566 = nn - 24;
        if (nn)
          v567 = nn - 24;
        else
          v567 = 0;
        if (*(_BYTE *)(v567 + 16) != 83)
          goto LABEL_736;
      }
      v566 = 0;
LABEL_736:
      if (*(_BYTE *)(v566 + 16) == 94)
        v572 = v566;
      else
        v572 = 0;
      *((_QWORD *)v830 + 14 * v412 + 7) = v572;
      sub_1C5C09DB8((uint64_t)v871, v872, (const llvm::APInt *)v898[0], LODWORD(v898[1]), v572, (uint64_t)&__src);
      v573 = *(_QWORD *)(v414 - 96);
      v574 = v573 + 40;
      for (i1 = *(_QWORD *)(v573 + 48); i1 != v574; i1 = *(_QWORD *)(i1 + 8))
      {
        v576 = i1 - 24;
        if (!i1)
          v576 = 0;
        if (*(_BYTE *)(v576 + 16) != 83)
        {
          v577 = *(unsigned __int8 *)(i1 - 8) - 38;
          v145 = v577 > 0x38;
          v578 = (1 << v577) & 0x100060000000001;
          if (v145 || v578 == 0)
            v574 = i1;
          else
            v574 = *(_QWORD *)(i1 + 8);
          break;
        }
      }
      v580 = 0;
      if (v574)
        v581 = v574 - 24;
      else
        v581 = 0;
      v896 = *(_QWORD *)(v581 + 40);
      v897 = v581 + 24;
      v582 = *(unsigned __int8 **)(v581 + 48);
      *(_QWORD *)&v884 = v582;
      if (v582)
      {
        llvm::MetadataTracking::track((uint64_t)&v884, v582, 2);
        v580 = v884;
      }
      sub_1C4774EF4((uint64_t)&__src, 0, v580);
      v555 = (unsigned __int8 *)v884;
      if ((_QWORD)v884)
      {
        v556 = (unsigned __int8 **)&v884;
LABEL_685:
        llvm::MetadataTracking::untrack((uint64_t)v556, v555);
      }
    }
    if (!v498)
    {
      *(_QWORD *)&v884 = "statepoint_token";
      v887 = 259;
      llvm::Value::setName((uint64_t ***)v536, (uint64_t)&v884);
      v583 = *(llvm::LLVMContext ***)v414;
      if (*(_BYTE *)(*(_QWORD *)v414 + 8) == 7 || !*(_QWORD *)(v414 + 8))
      {
        if (v413 < (unint64_t)v821)
        {
          *(_QWORD *)v413 = v414;
          *(_QWORD *)(v413 + 8) = 0;
          *(_BYTE *)(v413 + 16) = 0;
          v413 += 24;
          v222 = v836;
          goto LABEL_795;
        }
        v587 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v413 - (_QWORD)v836) >> 3) + 1;
        if (v587 <= 0xAAAAAAAAAAAAAAALL)
        {
          if (0x5555555555555556 * ((v821 - (char *)v836) >> 3) > v587)
            v587 = 0x5555555555555556 * ((v821 - (char *)v836) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v821 - (char *)v836) >> 3) >= 0x555555555555555)
            v588 = 0xAAAAAAAAAAAAAAALL;
          else
            v588 = v587;
          if (v588)
          {
            if (v588 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_1179;
            v589 = (char *)operator new(24 * v588);
          }
          else
          {
            v589 = 0;
          }
          v593 = &v589[8 * ((uint64_t)(v413 - (_QWORD)v836) >> 3)];
          *(_QWORD *)v593 = v414;
          *((_QWORD *)v593 + 1) = 0;
          v593[16] = 0;
          if ((llvm::Value *)v413 == v836)
          {
            v222 = (llvm::Value *)&v589[8 * ((uint64_t)(v413 - (_QWORD)v836) >> 3)];
          }
          else
          {
            v594 = &v589[8 * ((uint64_t)(v413 - (_QWORD)v836) >> 3)];
            do
            {
              v222 = (llvm::Value *)(v594 - 24);
              v595 = *(_OWORD *)(v413 - 24);
              *((_QWORD *)v594 - 1) = *(_QWORD *)(v413 - 8);
              *(_OWORD *)(v594 - 24) = v595;
              v413 -= 24;
              v594 -= 24;
            }
            while ((llvm::Value *)v413 != v836);
          }
          v821 = &v589[24 * v588];
          v413 = (unint64_t)(v593 + 24);
          if (v836)
            operator delete(v836);
          goto LABEL_795;
        }
        goto LABEL_1178;
      }
      if ((*(_BYTE *)(v414 + 23) & 0x10) == 0)
      {
        v597 = 0;
        v598 = "";
        goto LABEL_817;
      }
      v599 = *(_QWORD *)*v583;
      v600 = *(_QWORD *)(v599 + 152);
      v601 = *(unsigned int *)(v599 + 168);
      if ((_DWORD)v601)
      {
        LODWORD(v602) = (v601 - 1) & ((v414 >> 4) ^ (v414 >> 9));
        v603 = (uint64_t *)(v600 + 16 * v602);
        v604 = *v603;
        if (*v603 != v414)
        {
          v605 = 1;
          while (v604 != -4096)
          {
            v606 = v602 + v605++;
            v602 = v606 & (v601 - 1);
            v604 = *(_QWORD *)(v600 + 16 * v602);
            if (v604 == v414)
            {
              v603 = (uint64_t *)(v600 + 16 * v602);
              goto LABEL_816;
            }
          }
          goto LABEL_815;
        }
      }
      else
      {
LABEL_815:
        v603 = (uint64_t *)(v600 + 16 * v601);
      }
LABEL_816:
      v607 = (_QWORD *)v603[1];
      v608 = *v607;
      v598 = (const char *)(v607 + 2);
      v597 = v608;
LABEL_817:
      v887 = 261;
      *(_QWORD *)&v884 = v598;
      *((_QWORD *)&v884 + 1) = v597;
      GCResult = llvm::IRBuilderBase::CreateGCResult((llvm::IRBuilderBase *)&__src, (llvm::Instruction *)v536, (llvm::Type *)v583, (const llvm::Twine *)&v884);
      v610 = GCResult;
      v611 = *(_QWORD *)(v414 + 64);
      if (v611)
      {
        v222 = v836;
        if (*(_DWORD *)(v611 + 8) >= 2u)
          v612 = *(_QWORD *)(v611 + 48);
        else
          v612 = 0;
      }
      else
      {
        v612 = 0;
        v222 = v836;
      }
      *(_QWORD *)(GCResult + 64) = llvm::AttributeList::get(**(uint64_t ***)GCResult, 0, v612);
      if (v413 < (unint64_t)v821)
      {
        *(_QWORD *)v413 = v414;
        *(_QWORD *)(v413 + 8) = v610;
        *(_BYTE *)(v413 + 16) = 0;
        v413 += 24;
        goto LABEL_795;
      }
      v613 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v413 - (_QWORD)v222) >> 3) + 1;
      if (v613 <= 0xAAAAAAAAAAAAAAALL)
      {
        if (0x5555555555555556 * ((v821 - (char *)v222) >> 3) > v613)
          v613 = 0x5555555555555556 * ((v821 - (char *)v222) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v821 - (char *)v222) >> 3) >= 0x555555555555555)
          v614 = 0xAAAAAAAAAAAAAAALL;
        else
          v614 = v613;
        if (v614)
        {
          if (v614 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_1179;
          v615 = (char *)operator new(24 * v614);
        }
        else
        {
          v615 = 0;
        }
        v616 = &v615[8 * ((uint64_t)(v413 - (_QWORD)v222) >> 3)];
        *(_QWORD *)v616 = v414;
        *((_QWORD *)v616 + 1) = v610;
        v616[16] = 0;
        if ((llvm::Value *)v413 == v222)
        {
          v618 = &v615[8 * ((uint64_t)(v413 - (_QWORD)v222) >> 3)];
        }
        else
        {
          v617 = &v615[8 * ((uint64_t)(v413 - (_QWORD)v222) >> 3)];
          do
          {
            v618 = v617 - 24;
            v619 = *(_OWORD *)(v413 - 24);
            *((_QWORD *)v617 - 1) = *(_QWORD *)(v413 - 8);
            *(_OWORD *)(v617 - 24) = v619;
            v413 -= 24;
            v617 -= 24;
          }
          while ((llvm::Value *)v413 != v222);
        }
        v821 = &v615[24 * v614];
        v413 = (unint64_t)(v616 + 24);
        if (v222)
          operator delete(v222);
        v222 = (llvm::Value *)v618;
        goto LABEL_795;
      }
LABEL_1178:
      abort();
    }
    if (v413 < (unint64_t)v821)
    {
      *(_QWORD *)v413 = v414;
      *(_QWORD *)(v413 + 8) = 0;
      *(_BYTE *)(v413 + 16) = 1;
      v413 += 24;
      v222 = v836;
      goto LABEL_795;
    }
    v584 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v413 - (_QWORD)v836) >> 3) + 1;
    if (v584 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_1178;
    if (0x5555555555555556 * ((v821 - (char *)v836) >> 3) > v584)
      v584 = 0x5555555555555556 * ((v821 - (char *)v836) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v821 - (char *)v836) >> 3) >= 0x555555555555555)
      v585 = 0xAAAAAAAAAAAAAAALL;
    else
      v585 = v584;
    if (v585)
    {
      if (v585 <= 0xAAAAAAAAAAAAAAALL)
      {
        v586 = (char *)operator new(24 * v585);
        goto LABEL_782;
      }
LABEL_1179:
      sub_1C4764EE4();
    }
    v586 = 0;
LABEL_782:
    v590 = &v586[8 * ((uint64_t)(v413 - (_QWORD)v836) >> 3)];
    *(_QWORD *)v590 = v414;
    *((_QWORD *)v590 + 1) = 0;
    v590[16] = 1;
    for (i2 = v590; (llvm::Value *)v413 != v836; v413 -= 24)
    {
      v592 = *(_OWORD *)(v413 - 24);
      *((_QWORD *)i2 - 1) = *(_QWORD *)(v413 - 8);
      *(_OWORD *)(i2 - 24) = v592;
      i2 -= 24;
    }
    v821 = &v586[24 * v585];
    v413 = (unint64_t)(v590 + 24);
    if (v836)
      operator delete(v836);
    v222 = (llvm::Value *)i2;
LABEL_795:
    *((_QWORD *)v830 + 14 * v412 + 6) = v536;
    sub_1C5C09DB8((uint64_t)v871, v872, (const llvm::APInt *)v898[0], LODWORD(v898[1]), v536, (uint64_t)&__src);
    if ((_BYTE *)v890 != v891)
      free((void *)v890);
    if ((_BYTE *)__src != v894)
      free((void *)__src);
    if (v871 != &v873)
      free(v871);
    if (v898[0] != v899)
      free(v898[0]);
    ++v412;
    v596 = v879;
  }
  while (v412 < v879);
  *((_DWORD *)v78 + 2) = 0;
  v223 = (_QWORD *)&unk_1C85F9000;
  if (v222 != (llvm::Value *)v413)
  {
    v781 = v222;
    do
    {
      v783 = *(llvm::ValueAsMetadata **)v781;
      v782 = (llvm::Value *)*((_QWORD *)v781 + 1);
      *(_QWORD *)v781 = 0;
      *((_QWORD *)v781 + 1) = 0;
      if (v782)
        llvm::Value::doRAUW(v783, v782, (llvm::Value *)1);
      if (*((_BYTE *)v781 + 16))
      {
        v784 = *((_QWORD *)v783 + 5);
        v785 = *(_QWORD *)(v784 + 40);
        if (v785 == v784 + 40)
        {
          v787 = 0;
        }
        else
        {
          if (v785)
            v786 = v785 - 24;
          else
            v786 = 0;
          if (*(unsigned __int8 *)(v786 + 16) - 29 >= 0xB)
            v787 = 0;
          else
            v787 = v786;
        }
        v788 = (llvm::UnreachableInst *)operator new(0x40uLL);
        *((_DWORD *)v788 + 5) &= 0x38000000u;
        llvm::UnreachableInst::UnreachableInst(v788, **(llvm::LLVMContext ***)v787, (llvm::Instruction *)v787);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v787 + 40) + 40, (uint64_t ***)v787);
        v789 = *(_QWORD *)(v787 + 24);
        v790 = *(_QWORD **)(v787 + 32);
        *v790 = v789;
        *(_QWORD *)(v789 + 8) = v790;
        *(_QWORD *)(v787 + 24) = 0;
        *(_QWORD *)(v787 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v787);
      }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v783 + 5) + 40, (uint64_t ***)v783);
      v791 = *((_QWORD *)v783 + 3);
      v792 = (_QWORD *)*((_QWORD *)v783 + 4);
      *v792 = v791;
      *(_QWORD *)(v791 + 8) = v792;
      *((_QWORD *)v783 + 3) = 0;
      *((_QWORD *)v783 + 4) = 0;
      llvm::Value::deleteValue(v783);
      v781 = (llvm::Value *)((char *)v781 + 24);
    }
    while (v781 != (llvm::Value *)v413);
    v596 = v879;
  }
  if (v596)
  {
    v793 = (char *)v878;
    v794 = (char *)v878 + 112 * v596;
    do
    {
      sub_1C619D588(v793);
      *((_QWORD *)v793 + 4) = *((_QWORD *)v793 + 3);
      v793 += 112;
    }
    while (v793 != v794);
  }
LABEL_237:
  sub_1C5015F50(v847);
  v850 = v849;
  v224 = (uint64_t *)&v873;
  v871 = &v873;
  v872 = v223[437];
  if (!(_DWORD)v879)
    goto LABEL_241;
  v225 = 0;
  v226 = 48;
  do
  {
    v227 = *(_QWORD *)((char *)v878 + v226);
    v228 = (char *)sub_1C63249D0(v227);
    v229 = (char *)sub_1C6324A18(v227);
    sub_1C53DBCCC((unsigned int *)&v871, (uint64_t)v871 + 8 * v872, v228, v229);
    ++v225;
    v226 += 112;
  }
  while (v225 < v879);
  v224 = (uint64_t *)v871;
  v898[0] = &v899[16];
  v898[1] = &v899[16];
  *(_QWORD *)v899 = 8;
  *(_DWORD *)&v899[8] = 0;
  if ((_DWORD)v872)
  {
    v704 = (uint64_t *)((char *)v871 + 8 * v872);
    v705 = 8 * v872 - 8;
    while (1)
    {
      sub_1C4774094((llvm::SmallPtrSetImplBase *)v898, *v224);
      if (!v706)
        break;
      ++v224;
      v705 -= 8;
      if (v224 == v704)
      {
        v707 = v898[1];
        v224 = v704;
        goto LABEL_1174;
      }
    }
    if (v224 + 1 == v704)
    {
      v707 = v898[1];
    }
    else
    {
      v797 = 1;
      v798 = v224;
      do
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)v898, v224[v797]);
        if (v799)
          *v798++ = v224[v797];
        ++v797;
        v705 -= 8;
      }
      while (v705);
      v707 = v898[1];
      v224 = v798;
    }
LABEL_1174:
    v231 = v871;
    v230 = (unint64_t)((char *)v224 - (_BYTE *)v871) >> 3;
    LODWORD(v872) = v230;
    if (v707 != v898[0])
    {
      free(v707);
      LODWORD(v230) = v872;
      v231 = v871;
    }
  }
  else
  {
LABEL_241:
    LODWORD(v230) = 0;
    LODWORD(v872) = 0;
    v231 = v224;
  }
  v835 = v222;
  v232 = v230;
  v233 = v878;
  v234 = v879;
  v884 = 0uLL;
  v885 = 0;
  v898[0] = v899;
  v898[1] = (void *)0xC800000000;
  if (v230 < 0xC9)
  {
    v235 = *(_QWORD *)(v818 + 40) + 272;
    if ((_DWORD)v230)
      goto LABEL_308;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v898, (uint64_t)v899, v230, 8);
    v235 = *(_QWORD *)(v818 + 40) + 272;
LABEL_308:
    v285 = &v231[v232];
    do
    {
      *(_QWORD *)&v890 = *v231;
      v286 = (llvm::PointerType **)v890;
      v287 = operator new(0x68uLL);
      v288 = (char *)(v287 + 8);
      v287[13] = v287[13] & 0x38000000 | 1;
      *(_QWORD *)v287 = 0;
      *((_QWORD *)v287 + 1) = 0;
      *((_QWORD *)v287 + 2) = 0;
      *((_QWORD *)v287 + 3) = v287 + 8;
      v289 = *v286;
      v290 = (llvm::Type *)*(unsigned int *)(v235 + 4);
      v895 = 257;
      v291 = *(_QWORD *)(v818 + 80);
      v292 = v291 - 24;
      if (!v291)
        v292 = 0;
      v293 = v292 + 40;
      for (i3 = *(_QWORD *)(v292 + 48); i3 != v293; i3 = *(_QWORD *)(i3 + 8))
      {
        v295 = i3 - 24;
        if (i3)
          v296 = i3 - 24;
        else
          v296 = 0;
        if (*(_BYTE *)(v296 + 16) != 83)
          goto LABEL_319;
      }
      v295 = 0;
LABEL_319:
      llvm::AllocaInst::AllocaInst((uint64_t)(v287 + 8), v289, v290, 0, (uint64_t)&__src, v295);
      sub_1C4E58FC4((uint64_t *)&v884, &v890)[1] = v288;
      v297 = LODWORD(v898[1]);
      if (LODWORD(v898[1]) >= (unint64_t)HIDWORD(v898[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v898, (uint64_t)v899, LODWORD(v898[1]) + 1, 8);
        v297 = LODWORD(v898[1]);
      }
      *((_QWORD *)v898[0] + v297) = v288;
      ++LODWORD(v898[1]);
      ++v231;
    }
    while (v231 != v285);
  }
  v826 = v235;
  if (!v234)
    goto LABEL_306;
  v298 = &v233[14 * v234];
  v299 = v233;
  while (2)
  {
    v300 = v299[11];
    v301 = v299[12];
    while (2)
    {
      if (v300 != v301)
      {
        v302 = *(llvm::PointerType ***)(v300 + 8);
        if (v885)
        {
          v303 = ((v302 >> 4) ^ (v302 >> 9)) & (v885 - 1);
          v304 = *(llvm::PointerType ***)(v884 + 16 * v303);
          if (v302 == v304)
          {
LABEL_328:
            v300 += 16;
            continue;
          }
          v305 = 1;
          while (v304 != (llvm::PointerType **)-4096)
          {
            v306 = v303 + v305++;
            v303 = v306 & (v885 - 1);
            v304 = *(llvm::PointerType ***)(v884 + 16 * v303);
            if (v302 == v304)
              goto LABEL_328;
          }
        }
        *(_QWORD *)&v890 = *(_QWORD *)(v300 + 8);
        v307 = operator new(0x68uLL);
        v308 = (char *)(v307 + 8);
        v307[13] = v307[13] & 0x38000000 | 1;
        *(_QWORD *)v307 = 0;
        *((_QWORD *)v307 + 1) = 0;
        *((_QWORD *)v307 + 2) = 0;
        *((_QWORD *)v307 + 3) = v307 + 8;
        v309 = *v302;
        v310 = (llvm::Type *)*(unsigned int *)(v826 + 4);
        v895 = 257;
        v311 = *(_QWORD *)(v818 + 80);
        v312 = v311 - 24;
        if (!v311)
          v312 = 0;
        v313 = v312 + 40;
        for (i4 = *(_QWORD *)(v312 + 48); i4 != v313; i4 = *(_QWORD *)(i4 + 8))
        {
          v315 = i4 - 24;
          if (i4)
            v316 = i4 - 24;
          else
            v316 = 0;
          if (*(_BYTE *)(v316 + 16) != 83)
            goto LABEL_343;
        }
        v315 = 0;
LABEL_343:
        llvm::AllocaInst::AllocaInst((uint64_t)(v307 + 8), v309, v310, 0, (uint64_t)&__src, v315);
        sub_1C4E58FC4((uint64_t *)&v884, &v890)[1] = v308;
        v317 = LODWORD(v898[1]);
        if (LODWORD(v898[1]) >= (unint64_t)HIDWORD(v898[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v898, (uint64_t)v899, LODWORD(v898[1]) + 1, 8);
          v317 = LODWORD(v898[1]);
        }
        *((_QWORD *)v898[0] + v317) = v308;
        ++LODWORD(v898[1]);
        goto LABEL_328;
      }
      break;
    }
    v299 += 14;
    if (v299 != v298)
      continue;
    break;
  }
  do
  {
    v318 = v233[6];
    sub_1C5C0A180(*(_QWORD *)(v318 + 8), 0, (uint64_t *)&v884);
    if (*(_BYTE *)(v318 + 16) == 33)
      sub_1C5C0A180(*(_QWORD *)(v233[7] + 8), 0, (uint64_t *)&v884);
    v320 = v233[11];
    v321 = v233[12];
    while (v320 != v321)
    {
      v323 = *(llvm::Value **)v320;
      v322 = *(_QWORD *)(v320 + 8);
      v320 += 16;
      *(_QWORD *)&__src = v322;
      v324 = (llvm::Value *)sub_1C4E58FC4((uint64_t *)&v884, &__src)[1];
      v325 = operator new(0x80uLL);
      v325[21] = v325[21] & 0x38000000 | 2;
      *(_QWORD *)v325 = 0;
      *((_QWORD *)v325 + 1) = 0;
      *((_QWORD *)v325 + 2) = 0;
      *((_QWORD *)v325 + 3) = v325 + 16;
      *((_QWORD *)v325 + 4) = 0;
      *((_QWORD *)v325 + 5) = 0;
      *((_QWORD *)v325 + 6) = 0;
      *((_QWORD *)v325 + 7) = v325 + 16;
      v326 = *((_QWORD *)v323 + 4);
      if (v326)
        v327 = v326 == *((_QWORD *)v323 + 5) + 40;
      else
        v327 = 1;
      if (v327)
        v328 = 0;
      else
        v328 = (llvm::Instruction *)(v326 - 24);
      llvm::StoreInst::StoreInst((llvm::StoreInst *)(v325 + 16), v323, v324, 0, v328);
    }
    if (byte_1ED822708)
    {
      *(_QWORD *)&__src = v894;
      *((_QWORD *)&__src + 1) = 0x4000000000;
      v329 = v884 + 16 * v885;
      if (DWORD2(v884))
      {
        if (v885)
        {
          v330 = 16 * v885;
          v331 = (_QWORD *)v884;
          while ((*v331 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v331 += 2;
            v330 -= 16;
            if (!v330)
              goto LABEL_364;
          }
        }
        else
        {
          v331 = (_QWORD *)v884;
        }
      }
      else
      {
LABEL_364:
        v331 = (_QWORD *)(v884 + 16 * v885);
      }
      v332 = v884 + 16 * v885;
      if (v331 == (_QWORD *)v332)
      {
        v333 = 0;
      }
      else
      {
        v333 = 0;
        do
        {
          v334 = v331[1];
          if (v333 >= HIDWORD(__src))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v894, v333 + 1, 8);
            v333 = DWORD2(__src);
          }
          *(_QWORD *)(__src + 8 * v333) = v334;
          v333 = ++DWORD2(__src);
          v335 = v331 + 2;
          v331 = (_QWORD *)v329;
          if (v335 != (_QWORD *)v329)
          {
            v331 = v335;
            while ((*v331 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v331 += 2;
              if (v331 == (_QWORD *)v329)
              {
                v331 = (_QWORD *)v329;
                break;
              }
            }
          }
        }
        while (v331 != (_QWORD *)v332);
      }
      if (v318 && *(_BYTE *)(v318 + 16) == 33)
      {
        v336 = *(_QWORD *)(v318 - 96);
        v337 = v336 + 40;
        for (i5 = *(_QWORD *)(v336 + 48); i5 != v337; i5 = *(_QWORD *)(i5 + 8))
        {
          v339 = i5 - 24;
          if (!i5)
            v339 = 0;
          if (*(_BYTE *)(v339 + 16) != 83)
          {
            v348 = *(unsigned __int8 *)(i5 - 8) - 38;
            v145 = v348 > 0x38;
            v349 = (1 << v348) & 0x100060000000001;
            if (v145 || v349 == 0)
              v337 = i5;
            else
              v337 = *(_QWORD *)(i5 + 8);
            break;
          }
        }
        if (v337)
          v351 = (llvm::Instruction *)(v337 - 24);
        else
          v351 = 0;
        if (v333)
        {
          v352 = (llvm::ConstantPointerNull ***)__src;
          v353 = 8 * v333;
          do
          {
            v354 = *v352++;
            v355 = (llvm::Value *)llvm::ConstantPointerNull::get(v354[8], v319);
            v356 = operator new(0x80uLL);
            v356[21] = v356[21] & 0x38000000 | 2;
            *(_QWORD *)v356 = 0;
            *((_QWORD *)v356 + 1) = 0;
            *((_QWORD *)v356 + 2) = 0;
            *((_QWORD *)v356 + 3) = v356 + 16;
            *((_QWORD *)v356 + 4) = 0;
            *((_QWORD *)v356 + 5) = 0;
            *((_QWORD *)v356 + 6) = 0;
            *((_QWORD *)v356 + 7) = v356 + 16;
            llvm::StoreInst::StoreInst((llvm::StoreInst *)(v356 + 16), v355, (llvm::Value *)v354, 0, v351);
            v353 -= 8;
          }
          while (v353);
        }
        v357 = *(_QWORD *)(v318 - 64);
        v358 = v357 + 40;
        for (i6 = *(_QWORD *)(v357 + 48); i6 != v358; i6 = *(_QWORD *)(i6 + 8))
        {
          v360 = i6 - 24;
          if (!i6)
            v360 = 0;
          if (*(_BYTE *)(v360 + 16) != 83)
          {
            v361 = *(unsigned __int8 *)(i6 - 8) - 38;
            v145 = v361 > 0x38;
            v362 = (1 << v361) & 0x100060000000001;
            if (v145 || v362 == 0)
              v358 = i6;
            else
              v358 = *(_QWORD *)(i6 + 8);
            break;
          }
        }
        if (v358)
          v364 = (llvm::Instruction *)(v358 - 24);
        else
          v364 = 0;
        if (DWORD2(__src))
        {
          v365 = (llvm::ConstantPointerNull ***)__src;
          v366 = 8 * DWORD2(__src);
          do
          {
            v367 = *v365++;
            v368 = (llvm::Value *)llvm::ConstantPointerNull::get(v367[8], v319);
            v369 = operator new(0x80uLL);
            v369[21] = v369[21] & 0x38000000 | 2;
            *(_QWORD *)v369 = 0;
            *((_QWORD *)v369 + 1) = 0;
            *((_QWORD *)v369 + 2) = 0;
            *((_QWORD *)v369 + 3) = v369 + 16;
            *((_QWORD *)v369 + 4) = 0;
            *((_QWORD *)v369 + 5) = 0;
            *((_QWORD *)v369 + 6) = 0;
            *((_QWORD *)v369 + 7) = v369 + 16;
            llvm::StoreInst::StoreInst((llvm::StoreInst *)(v369 + 16), v368, (llvm::Value *)v367, 0, v364);
            v366 -= 8;
          }
          while (v366);
        }
      }
      else
      {
        v340 = *(_QWORD *)(v318 + 32);
        if (v340)
          v341 = v340 == *(_QWORD *)(v318 + 40) + 40;
        else
          v341 = 1;
        if (v341)
          v342 = 0;
        else
          v342 = (llvm::Instruction *)(v340 - 24);
        if (v333)
        {
          v343 = (llvm::ConstantPointerNull ***)__src;
          v344 = 8 * v333;
          do
          {
            v345 = *v343++;
            v346 = (llvm::Value *)llvm::ConstantPointerNull::get(v345[8], v319);
            v347 = operator new(0x80uLL);
            v347[21] = v347[21] & 0x38000000 | 2;
            *(_QWORD *)v347 = 0;
            *((_QWORD *)v347 + 1) = 0;
            *((_QWORD *)v347 + 2) = 0;
            *((_QWORD *)v347 + 3) = v347 + 16;
            *((_QWORD *)v347 + 4) = 0;
            *((_QWORD *)v347 + 5) = 0;
            *((_QWORD *)v347 + 6) = 0;
            *((_QWORD *)v347 + 7) = v347 + 16;
            llvm::StoreInst::StoreInst((llvm::StoreInst *)(v347 + 16), v346, (llvm::Value *)v345, 0, v342);
            v344 -= 8;
          }
          while (v344);
        }
      }
      if ((_BYTE *)__src != v894)
        free((void *)__src);
    }
    MEMORY[0x1CAA32FB4](0, 8);
    v233 += 14;
  }
  while (v233 != v298);
LABEL_306:
  v282 = v884 + 16 * v885;
  if (DWORD2(v884))
  {
    v284 = v835;
    if (v885)
    {
      v708 = 16 * v885;
      v283 = (uint64_t *)v884;
      while ((*v283 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v283 += 2;
        v708 -= 16;
        if (!v708)
        {
          v283 = (uint64_t *)(v884 + 16 * v885);
          break;
        }
      }
    }
    else
    {
      v283 = (uint64_t *)v884;
    }
  }
  else
  {
    v283 = (uint64_t *)(v884 + 16 * v885);
    v284 = v835;
  }
  v822 = (uint64_t *)(v884 + 16 * v885);
  while (v283 != v822)
  {
    v719 = *v283;
    v720 = (_QWORD *)v283[1];
    *(_QWORD *)&__src = v894;
    *((_QWORD *)&__src + 1) = 0x1400000000;
    v721 = *(_QWORD *)(v719 + 8);
    v722 = (uint64_t *)v894;
    v723 = (uint64_t *)v894;
    if (v721)
    {
      LODWORD(v724) = 0;
      v725 = *(_QWORD *)(v719 + 8);
      do
      {
        v724 = (v724 + 1);
        v725 = *(_QWORD *)(v725 + 8);
      }
      while (v725);
      if (v724 >= 0x15)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v894, v724, 8);
        v721 = *(_QWORD *)(v719 + 8);
      }
      for (; v721; v721 = *(_QWORD *)(v721 + 8))
      {
        v726 = *(_QWORD *)(v721 + 24);
        if (*(_BYTE *)(v726 + 16) != 5)
        {
          v727 = DWORD2(__src);
          if (DWORD2(__src) >= (unint64_t)HIDWORD(__src))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v894, DWORD2(__src) + 1, 8);
            v727 = DWORD2(__src);
          }
          *(_QWORD *)(__src + 8 * v727) = v726;
          ++DWORD2(__src);
        }
      }
      v728 = DWORD2(__src);
      v722 = (uint64_t *)__src;
      if (DWORD2(__src) >= 2)
      {
        qsort((void *)__src, DWORD2(__src), 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C6324A64);
        v728 = DWORD2(__src);
        v722 = (uint64_t *)__src;
      }
      v723 = &v722[v728];
      v729 = v722;
      if (v728)
      {
        v730 = 0;
        while (8 * v728 - 8 != v730)
        {
          v732 = v722[v730 / 8];
          v731 = v722[v730 / 8 + 1];
          v730 += 8;
          if (v732 == v731)
          {
            v729 = &v722[v730 / 8 - 1];
            goto LABEL_1073;
          }
        }
      }
      else
      {
LABEL_1073:
        if (v729 != v723)
        {
          v733 = v729 + 2;
          if (v729 + 2 != v723)
          {
            v734 = *v729;
            do
            {
              v735 = v734;
              v734 = *v733;
              if (v735 != *v733)
              {
                v729[1] = v734;
                ++v729;
              }
              ++v733;
            }
            while (v733 != v723);
          }
          v723 = v729 + 1;
        }
      }
    }
    v831 = (llvm::Value *)(v719 + 8);
    v736 = (char *)v723 - (char *)v722;
    v737 = (unint64_t)((char *)v723 - (char *)v722) >> 3;
    DWORD2(__src) = v737;
    if ((v736 >> 3))
    {
      v738 = &v722[v737];
      do
      {
        v739 = (_DWORD *)*v722;
        if (*(_BYTE *)(*v722 + 16) == 83)
        {
          v740 = v739[5];
          v741 = v740 & 0x7FFFFFF;
          if ((v740 & 0x7FFFFFF) != 0)
          {
            v742 = 0;
            v743 = 0;
            do
            {
              if ((v740 & 0x40000000) != 0)
                v744 = (_DWORD *)*((_QWORD *)v739 - 1);
              else
                v744 = &v739[-8 * v741];
              if (v719 == *(_QWORD *)&v744[v742])
              {
                v745 = operator new(0x60uLL);
                v746 = (uint64_t)(v745 + 8);
                v745[13] = v745[13] & 0x38000000 | 1;
                *(_QWORD *)v745 = 0;
                *((_QWORD *)v745 + 1) = 0;
                *((_QWORD *)v745 + 2) = 0;
                *((_QWORD *)v745 + 3) = v745 + 8;
                v747 = v720[8];
                v892 = 257;
                v748 = v739[5];
                if ((v748 & 0x40000000) != 0)
                  v749 = (_DWORD *)*((_QWORD *)v739 - 1);
                else
                  v749 = &v739[-8 * (v748 & 0x7FFFFFF)];
                v750 = *(_QWORD *)&v749[8 * v739[15] + 2 * v743];
                v751 = *(_QWORD *)(v750 + 40);
                if (v751 == v750 + 40)
                {
                  v752 = 0;
                }
                else
                {
                  if (v751)
                    v753 = v751 - 24;
                  else
                    v753 = 0;
                  if (*(unsigned __int8 *)(v753 + 16) - 29 >= 0xB)
                    v752 = 0;
                  else
                    v752 = v753;
                }
                llvm::LoadInst::LoadInst((uint64_t)(v745 + 8), v747, (uint64_t)v720, (uint64_t)&v890, 0, v752);
                sub_1C6125834((uint64_t)v739, v743, v746);
                v740 = v739[5];
              }
              ++v743;
              v741 = v740 & 0x7FFFFFF;
              v742 += 8;
            }
            while (v743 < v741);
          }
        }
        else
        {
          v754 = operator new(0x60uLL);
          v755 = (llvm::Value *)(v754 + 8);
          v754[13] = v754[13] & 0x38000000 | 1;
          *(_QWORD *)v754 = 0;
          *((_QWORD *)v754 + 1) = 0;
          *((_QWORD *)v754 + 2) = 0;
          *((_QWORD *)v754 + 3) = v754 + 8;
          v756 = v720[8];
          v892 = 257;
          llvm::LoadInst::LoadInst((uint64_t)(v754 + 8), v756, (uint64_t)v720, (uint64_t)&v890, 0, (uint64_t)v739);
          llvm::User::replaceUsesOfWith((llvm::User *)v739, (llvm::Value *)v719, v755);
        }
        ++v722;
      }
      while (v722 != v738);
    }
    v757 = (char *)operator new(0x80uLL);
    v758 = (llvm::Value *)(v757 + 64);
    *((_DWORD *)v757 + 21) = *((_DWORD *)v757 + 21) & 0x38000000 | 2;
    *(_QWORD *)v757 = 0;
    *((_QWORD *)v757 + 1) = 0;
    *((_QWORD *)v757 + 2) = 0;
    *((_QWORD *)v757 + 3) = v757 + 64;
    *((_QWORD *)v757 + 4) = 0;
    v759 = v757 + 32;
    *((_QWORD *)v757 + 5) = 0;
    *((_QWORD *)v757 + 6) = 0;
    *((_QWORD *)v757 + 7) = v757 + 64;
    llvm::DataLayout::getAlignment(v826, *(_QWORD *)v719);
    *((_QWORD *)v757 + 8) = ***(_QWORD ***)v719 + 1576;
    *((_QWORD *)v757 + 9) = 0;
    v757[80] = 61;
    v757[81] = 0;
    *((_WORD *)v757 + 41) = 0;
    *((_DWORD *)v757 + 21) = *((_DWORD *)v757 + 21) & 0xC0000000 | 2;
    *(_OWORD *)(v757 + 88) = 0u;
    v761 = v757 + 88;
    *((_DWORD *)v757 + 30) = 0;
    *(_OWORD *)(v757 + 104) = 0u;
    if (*(_QWORD *)v757)
    {
      **((_QWORD **)v757 + 2) = *((_QWORD *)v757 + 1);
      v779 = *((_QWORD *)v757 + 1);
      if (v779)
        *(_QWORD *)(v779 + 16) = *((_QWORD *)v757 + 2);
    }
    *(_QWORD *)v757 = v719;
    v762 = *(_QWORD *)(v719 + 8);
    *((_QWORD *)v757 + 1) = v762;
    if (v762)
      *(_QWORD *)(v762 + 16) = v757 + 8;
    *((_QWORD *)v757 + 2) = v831;
    *(_QWORD *)v831 = v757;
    if (*((_QWORD *)v757 + 4))
    {
      **((_QWORD **)v757 + 6) = *((_QWORD *)v757 + 5);
      v780 = *((_QWORD *)v757 + 5);
      if (v780)
        *(_QWORD *)(v780 + 16) = *((_QWORD *)v757 + 6);
    }
    *v759 = v720;
    if (v720)
    {
      v763 = v720 + 1;
      v764 = v720[1];
      *((_QWORD *)v757 + 5) = v764;
      if (v764)
        *(_QWORD *)(v764 + 16) = v757 + 40;
      *((_QWORD *)v757 + 6) = v763;
      *v763 = v759;
    }
    *((_WORD *)v757 + 41) = 2 * (v760 & 0x3F);
    v757[124] = 1;
    v765 = *(unsigned __int8 *)(v719 + 16);
    if (v765 >= 0x1C)
    {
      if (v765 == 33)
      {
        v768 = *(_QWORD *)(v719 - 96);
        v769 = v768 + 40;
        v770 = *(_QWORD *)(v768 + 48);
        v284 = v835;
        if (v770 == v769)
        {
LABEL_1122:
          v771 = 0;
        }
        else
        {
          while (1)
          {
            v771 = v770 - 24;
            v772 = v770 ? v770 - 24 : 0;
            if (*(_BYTE *)(v772 + 16) != 83)
              break;
            v770 = *(_QWORD *)(v770 + 8);
            if (v770 == v769)
              goto LABEL_1122;
          }
        }
        v773 = *(_QWORD *)(v771 + 40);
        *((_QWORD *)v757 + 13) = v773;
        *(_WORD *)(v773 + 18) &= ~0x8000u;
        if ((v757[87] & 0x10) != 0)
        {
          v777 = *(_QWORD *)(v773 + 56);
          if (v777)
          {
            v778 = *(llvm::ValueSymbolTable **)(v777 + 104);
            if (v778)
              llvm::ValueSymbolTable::reinsertValue(v778, v758);
          }
        }
        v775 = *(_QWORD *)(v771 + 24);
        v774 = (_QWORD *)(v771 + 24);
        *((_QWORD *)v757 + 11) = v775;
        *((_QWORD *)v757 + 12) = v774;
        *(_QWORD *)(v775 + 8) = v761;
        *v774 = v761;
        goto LABEL_1127;
      }
      v766 = (_QWORD *)(*(_QWORD *)(v719 + 40) + 40);
      v767 = v719 + 24;
    }
    else
    {
      v766 = (_QWORD *)(v720[5] + 40);
      v767 = (uint64_t)(v720 + 3);
    }
    sub_1C53DF664(v766, v767, (uint64_t)v758);
    v284 = v835;
LABEL_1127:
    if ((_BYTE *)__src != v894)
      free((void *)__src);
    v776 = v283 + 2;
    v283 = (uint64_t *)v282;
    if (v776 != (uint64_t *)v282)
    {
      v283 = v776;
      while ((*v283 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v283 += 2;
        if (v283 == (uint64_t *)v282)
        {
          v283 = (uint64_t *)v282;
          break;
        }
      }
    }
  }
  v709 = v898[0];
  if (LODWORD(v898[1]))
  {
    llvm::PromoteMemToReg(v898[0], LODWORD(v898[1]), v800, 0);
    v709 = v898[0];
  }
  if (v709 != v899)
    free(v709);
  MEMORY[0x1CAA32FB4](v884, 8);
  v710 = v879;
  if (v871 != &v873)
    free(v871);
  if (v284)
    operator delete(v284);
  v711 = (void **)v844;
  if (v844)
  {
    v712 = v845;
    v713 = v844;
    if (v845 != v844)
    {
      do
      {
        v714 = (void **)*(v712 - 8);
        if (v712 - 6 != v714)
          free(v714);
        v712 -= 9;
      }
      while (v712 != v711);
      v713 = v844;
    }
    v845 = v711;
    operator delete(v713);
  }
  MEMORY[0x1CAA32FB4](v842[0], 8);
  sub_1C6176BF8(v847);
  v715 = (char *)v878;
  if ((_DWORD)v879)
  {
    v716 = 112 * v879;
    do
    {
      v717 = &v715[v716];
      sub_1C6176BF8(&v715[v716 - 48]);
      v718 = *(void **)&v715[v716 - 88];
      if (v718)
      {
        *((_QWORD *)v717 - 10) = v718;
        operator delete(v718);
      }
      MEMORY[0x1CAA32FB4](*((_QWORD *)v717 - 14), 8);
      v716 -= 112;
    }
    while (v716);
    v715 = (char *)v878;
  }
  if (v715 != v880)
    free(v715);
  if (v881 != v883)
    free(v881);
  return v710 != 0;
}

