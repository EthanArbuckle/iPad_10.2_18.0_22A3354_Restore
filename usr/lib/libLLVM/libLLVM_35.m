uint64_t sub_1C562EF94(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v7 = a2;
  v8 = 0;
  v3 = sub_1C562F3B4(a1, &v7, &v8);
  v4 = a1 + 8;
  if (v3)
    return v8;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v5 = 8;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v5;
}

uint64_t sub_1C562F010(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_17;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_14:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_14;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_17:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C562F0B8(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 8;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1C562F178((uint64_t)a1, v7);
  v9 = 0;
  sub_1C562F010((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C562F178(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[17];

  v14[16] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C562F2F0(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C562F2F0(a1, v14, v9);
}

uint64_t sub_1C562F2F0(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 136);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C562F010((uint64_t)v5, a2, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1C562F3B4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_15;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_12:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_12;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_15:
  *a3 = v7;
  return result;
}

uint64_t sub_1C562F45C()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Unroll the loops to sample-rate";
  v1.n128_u64[1] = 31;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED8080E0, "unroll-samplerate", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8080E0, &dword_1C475E000);
  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Version 2 of the color loop";
  v1.n128_u64[1] = 27;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED8081A0, "colorloop-v2", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8081A0, &dword_1C475E000);
  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Version 2 of the color loop, unrolled";
  v1.n128_u64[1] = 37;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED808260, "colorloop-v2-unroll", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED808260, &dword_1C475E000);
  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Always unroll the color loop";
  v1.n128_u64[1] = 28;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED808320, "unroll-colorloop", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED808320, &dword_1C475E000);
  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Make the unroll heuristic always return false";
  v1.n128_u64[1] = 45;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED8083E0, "multirate-unroll-force-no", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8083E0, &dword_1C475E000);
  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Sample mask produced by pixinfo can be directly used by lldsmp";
  v1.n128_u64[1] = 62;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED8084A0, "direct-smpmsk", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8084A0, &dword_1C475E000);
  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Force 8xMSAA codepath";
  v1.n128_u64[1] = 21;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED808560, "multirate-force-8xmsaa", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED808560, &dword_1C475E000);
}

uint64_t sub_1C562F6BC(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Optimize GPU fence instructions";
  *(_QWORD *)(v2 + 8) = 31;
  *(_QWORD *)(v2 + 16) = "optimize-fences";
  *(_QWORD *)(v2 + 24) = 15;
  *(_QWORD *)(v2 + 32) = &unk_1ED808620;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C562F814;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C562F74C(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED808620;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81719B8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED808628);
  if (v3 != -1)
  {
    v7[0] = sub_1C562F6BC;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED808628, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C562F814()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C562F74C(v0);
}

void sub_1C562F840(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C562F864()
{
  return "GPU fence optimizer";
}

void sub_1C562F874(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
}

uint64_t sub_1C562F87C(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t NamedMetadata;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int v8;
  char *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t Declaration;
  uint64_t v27;
  char *v28;
  uint64_t i;
  uint64_t v30;
  _QWORD *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t **v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  char *v39;
  unsigned __int8 *v40[4];
  __int16 v41;
  uint64_t v42[2];
  void *v43[2];
  _WORD v44[16];
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  void **v48;
  void **v49;
  uint64_t v50;
  int v51;
  __int16 v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  char *v58;
  uint64_t v59;
  _QWORD v60[10];

  v60[8] = *MEMORY[0x1E0C80C00];
  v3 = *(uint64_t **)(a2 + 40);
  v43[0] = "agx.max_work_group_size";
  v44[8] = 259;
  NamedMetadata = llvm::Module::getNamedMetadata((uint64_t)v3, (uint64_t)v43);
  if (NamedMetadata)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(***(_QWORD ***)(NamedMetadata + 48)
                               - 8 * *(unsigned int *)(***(_QWORD ***)(NamedMetadata + 48) + 8))
                   + 128);
    v6 = (unsigned int *)(v5 + 24);
    if (*(_DWORD *)(v5 + 32) >= 0x41u)
      v6 = *(unsigned int **)v6;
    v7 = *v6 | 0x100000000;
  }
  else
  {
    v7 = 0;
  }
  if (v7 < 0x21)
    v8 = HIDWORD(v7);
  else
    v8 = 0;
  v9 = (char *)v60;
  v58 = (char *)v60;
  v59 = 0x800000000;
  v10 = *(_QWORD *)(a2 + 80);
  if (v10 == a2 + 72)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      v12 = v10 - 24;
      if (!v10)
        v12 = 0;
      v13 = v12 + 40;
      v14 = *(_QWORD *)(v12 + 48);
      if (v14 != v12 + 40)
      {
        v15 = 0;
        do
        {
          if (v14)
            v16 = v14 - 24;
          else
            v16 = 0;
          if (*(_BYTE *)(v16 + 16) == 84)
          {
            v17 = *(_QWORD *)(v16 - 32);
            if (v17)
            {
              if (!*(_BYTE *)(v17 + 16)
                && *(_QWORD *)(v17 + 24) == *(_QWORD *)(v16 + 72)
                && (*(_BYTE *)(v17 + 33) & 0x20) != 0)
              {
                v18 = *(_DWORD *)(*(_QWORD *)(v14 - 56) + 36);
                if (v18 == 2668)
                  v19 = v8;
                else
                  v19 = 0;
                if (v19 == 1)
                {
                  v20 = v59;
                  if (v59 >= (unint64_t)HIDWORD(v59))
                  {
                    v39 = v9;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, (uint64_t)v9, v59 + 1, 8);
                    v9 = v39;
                    v20 = v59;
                  }
                  *(_QWORD *)&v58[8 * v20] = v14 - 24;
                  LODWORD(v59) = v59 + 1;
                }
                else if ((v18 - 1282) < 0x190
                       || (v18 - 2824) < 0xC
                       || (v18 - 1682) < 0x8C)
                {
                  v15 = 0;
                }
                else if (v18 == 2663)
                {
                  if (v15)
                  {
                    v21 = v9;
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v15 + 40) + 40, (uint64_t ***)v15);
                    v22 = *(_QWORD *)(v15 + 24);
                    v23 = *(_QWORD **)(v15 + 32);
                    *v23 = v22;
                    *(_QWORD *)(v22 + 8) = v23;
                    *(_QWORD *)(v15 + 24) = 0;
                    *(_QWORD *)(v15 + 32) = 0;
                    llvm::Value::deleteValue((llvm::Value *)v15);
                    v9 = v21;
                    v11 = 1;
                  }
                  v15 = v14 - 24;
                }
              }
            }
          }
          v14 = *(_QWORD *)(v14 + 8);
        }
        while (v14 != v13);
      }
      v10 = *(_QWORD *)(v10 + 8);
    }
    while (v10 != a2 + 72);
    if ((_DWORD)v59)
    {
      v24 = v9;
      v25 = *v3;
      v43[0] = v44;
      v43[1] = (void *)0x200000000;
      v47 = v25;
      v48 = &v56;
      v49 = &v57;
      v50 = 0;
      v51 = 0;
      v52 = 512;
      v53 = 7;
      v45 = 0;
      v46 = 0;
      v54 = 0;
      v55 = 0;
      v56 = &unk_1E8167888;
      v57 = &unk_1E8167A08;
      Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(a2 + 40), 2622, 0, 0);
      if ((_DWORD)v59)
      {
        v27 = Declaration;
        v28 = v58;
        for (i = 8 * v59; i; i -= 8)
        {
          v30 = *(_QWORD *)v28;
          v31 = (_QWORD *)(*(_QWORD *)v28 + 24);
          v45 = *(_QWORD *)(*(_QWORD *)v28 + 40);
          v46 = v31;
          v32 = *(unsigned __int8 **)(v30 + 48);
          v40[0] = v32;
          if (v32)
          {
            llvm::MetadataTracking::track((uint64_t)v40, v32, 2);
            v33 = v40[0];
          }
          else
          {
            v33 = 0;
          }
          sub_1C4774EF4((uint64_t)v43, 0, (uint64_t)v33);
          if (v40[0])
          {
            llvm::MetadataTracking::untrack((uint64_t)v40, v40[0]);
            if (!v27)
            {
LABEL_51:
              v34 = 0;
              goto LABEL_52;
            }
          }
          else if (!v27)
          {
            goto LABEL_51;
          }
          v34 = *(uint64_t ***)(v27 + 24);
LABEL_52:
          v35 = (uint64_t *)(v30 - 32 * (*(_DWORD *)(v30 + 20) & 0x7FFFFFF));
          v42[0] = *v35;
          v42[1] = v35[4];
          v41 = 257;
          sub_1C4774778((uint64_t *)v43, v34, v27, v42, 2, (uint64_t)v40, 0);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v30 + 40) + 40, (uint64_t ***)v30);
          v36 = *(_QWORD *)(v30 + 24);
          v37 = *(_QWORD **)(v30 + 32);
          *v37 = v36;
          *(_QWORD *)(v36 + 8) = v37;
          *v31 = 0;
          v31[1] = 0;
          llvm::Value::deleteValue((llvm::Value *)v30);
          v28 += 8;
        }
      }
      v9 = v24;
      if (v43[0] != v44)
      {
        free(v43[0]);
        v9 = v24;
      }
      v11 = 1;
    }
  }
  if (v58 != v9)
    free(v58);
  return v11 & 1;
}

uint64_t sub_1C562FC84(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeFunctionGroupInfoWrapperPassPass(a1);
  llvm::initializeDominatorTreeWrapperPassPass(a1);
  llvm::initializePostDominatorTreeWrapperPassPass(a1);
  llvm::initializeLoopInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Optimize movmsk";
  *(_QWORD *)(v2 + 8) = 15;
  *(_QWORD *)(v2 + 16) = "optimize-movmsk";
  *(_QWORD *)(v2 + 24) = 15;
  *(_QWORD *)(v2 + 32) = &unk_1ED808630;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C562FDF4;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C562FD2C(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED808630;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8171A58;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED808638);
  if (v3 != -1)
  {
    v7[0] = sub_1C562FC84;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED808638, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C562FDF4()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C562FD2C(v0);
}

void sub_1C562FE20(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C562FE44(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)llvm::LoopInfoWrapperPass::ID);
}

uint64_t sub_1C562FEC0(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  void **v5;
  void *v6;
  uint64_t v7;
  llvm::MemorySSAUpdater *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t *v29;
  int v30;
  int v31;
  uint64_t **v32;
  uint64_t *v33;
  unsigned int v34;
  uint64_t **v35;
  uint64_t *v36;
  int v37;
  int v38;
  uint64_t *v39;
  BOOL v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t *v43;
  uint64_t *v44;
  BOOL v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t **v51;
  uint64_t *v52;
  int v53;
  int v54;
  uint64_t *v55;
  void *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  _QWORD *v61;
  llvm::LLVMContext *v62;
  llvm::ReturnInst *v63;
  llvm *v64;
  int v65;
  void **v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t j;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void **v78;
  void *v79;
  uint64_t v80;
  char **v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  _QWORD *v92;
  unsigned int v93;
  uint64_t v94;
  int v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  _QWORD *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t UniquePredecessor;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  int v120;
  int v121;
  uint64_t *v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t *v125;
  uint64_t v126;
  int v127;
  int v128;
  uint64_t v129;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  int v140;
  int v141;
  uint64_t v142;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  _QWORD *v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  int v163;
  int v164;
  uint64_t *v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t *v168;
  uint64_t v169;
  int v170;
  int v171;
  uint64_t v172;
  unsigned int v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  int v184;
  int v185;
  uint64_t *v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t *v189;
  uint64_t v190;
  int v191;
  int v192;
  uint64_t v193;
  unsigned int v195;
  unsigned int v196;
  uint64_t v197;
  void **v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  int v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int v223;
  BOOL v224;
  int v225;
  llvm::BasicBlock *v227;
  uint64_t v228;
  uint64_t UniqueSuccessor;
  llvm::BasicBlock *v230;
  uint64_t v231;
  char v232;
  uint64_t *v233;
  uint64_t v234;
  uint64_t v235;
  llvm::BasicBlock *v236;
  uint64_t v237;
  uint64_t v238;
  llvm::BasicBlock *v239;
  uint64_t v240;
  char v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  const llvm::APInt *v245;
  uint64_t *v246;
  llvm::ConstantInt *v247;
  llvm::ValueHandleBase *v248;
  llvm::BasicBlock *v249;
  BOOL v250;
  uint64_t *v251;
  uint64_t v252;
  llvm::Value *Select;
  llvm::DomTreeUpdater *v254;
  uint64_t v255;
  llvm::Value **v256;
  uint64_t v257;
  llvm::Value ***v258;
  uint64_t v259;
  uint64_t v260;
  llvm::DomTreeUpdater *v261;
  char *v262;
  char *v263;
  char v264;
  char *v265;
  _QWORD *v266;
  _QWORD *v267;
  _QWORD *v268;
  _QWORD *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _BOOL4 v273;
  _QWORD *v274;
  _QWORD *v275;
  unsigned int v276;
  unsigned int v277;
  uint64_t v278;
  uint64_t v279;
  llvm::APInt *v281;
  uint64_t v282;
  int v283;
  uint64_t v284;
  _QWORD *v285;
  _QWORD *v286;
  _QWORD *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unsigned int v291;
  int v292;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _QWORD *k;
  uint64_t v299;
  _QWORD *v300;
  unsigned __int8 *v301;
  uint64_t v302;
  unsigned __int8 *v303;
  uint64_t v304;
  uint64_t v305;
  llvm::DomTreeUpdater *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t *v309;
  uint64_t v310;
  _QWORD *v311;
  _QWORD *v312;
  uint64_t v313;
  uint64_t **v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  llvm::DomTreeUpdater *v318;
  _QWORD *v319;
  int v320;
  char *v321;
  uint64_t v322;
  uint64_t v323;
  _QWORD *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t *v328;
  unsigned int v329;
  uint64_t v330;
  uint64_t v331;
  llvm::APInt **v333;
  llvm *v334;
  unsigned int v335;
  _BYTE v336[32];
  __int16 v337;
  std::string v338;
  void *__dst;
  uint64_t v340;
  _BYTE v341[32];
  void *v342;
  uint64_t v343;
  _WORD v344[16];
  void *v345[2];
  _QWORD v346[2];
  __int16 v347;
  uint64_t v348;
  uint64_t v349;

  v349 = *MEMORY[0x1E0C80C00];
  v2 = ((*(unsigned __int16 *)(a2 + 18) >> 4) & 0x3FF) - 101;
  if (v2 > 3 || v2 == 1)
  {
    LOBYTE(v65) = 0;
    return v65 & 1;
  }
  v5 = **(void ****)(a1 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::PostDominatorTreeWrapperPass::ID);
  v7 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::PostDominatorTreeWrapperPass::ID);
  v334 = (llvm *)a2;
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v9 + 24;
  v11 = *(_QWORD *)(v9 + 32);
  if (v11 == v9 + 24)
    goto LABEL_92;
  v12 = v7;
  v13 = 0;
  v330 = v7 + 32;
  do
  {
    v14 = v11 - 56;
    if (!v11)
      v14 = 0;
    if ((*(_BYTE *)(v14 + 33) & 0x20) != 0 && *(_DWORD *)(v14 + 36) == 2470)
    {
      for (i = *(_QWORD *)(v14 + 8); i; i = *(_QWORD *)(i + 8))
      {
        v19 = *(_QWORD *)(i + 24);
        if (*(_BYTE *)(v19 + 16) != 84)
          continue;
        v20 = *(_QWORD *)(v19 - 32);
        if (!v20)
          continue;
        if (*(_BYTE *)(v20 + 16))
          continue;
        if (*(_QWORD *)(v20 + 24) != *(_QWORD *)(v19 + 72))
          continue;
        if ((*(_BYTE *)(v20 + 33) & 0x20) == 0)
          continue;
        v21 = *(uint64_t **)(v19 + 40);
        if ((llvm *)v21[7] != v334)
          continue;
        v22 = *((_QWORD *)v334 + 10);
        v23 = v22 ? v22 - 24 : 0;
        if (!sub_1C56318CC(*(_QWORD *)(i + 24)))
          continue;
        v24 = *(_QWORD *)(v12 + 80);
        v25 = *(unsigned int *)(v12 + 96);
        v26 = v21 >> 4;
        if ((_DWORD)v25)
        {
          LODWORD(v27) = (v25 - 1) & (v26 ^ (v21 >> 9));
          v28 = (uint64_t **)(v24 + 16 * v27);
          v29 = *v28;
          if (v21 == *v28)
            goto LABEL_36;
          v30 = 1;
          while (v29 != (uint64_t *)-4096)
          {
            v31 = v27 + v30++;
            v27 = v31 & (v25 - 1);
            v29 = *(uint64_t **)(v24 + 16 * v27);
            if (v21 == v29)
            {
              v28 = (uint64_t **)(v24 + 16 * v27);
              goto LABEL_36;
            }
          }
        }
        v28 = (uint64_t **)(v24 + 16 * v25);
LABEL_36:
        v32 = (uint64_t **)(v24 + 16 * v25);
        if (v28 == v32)
          v33 = 0;
        else
          v33 = v28[1];
        v18 = v21;
        if (!(_DWORD)v25)
          goto LABEL_61;
        v34 = v25 - 1;
        LODWORD(v25) = (v25 - 1) & ((v23 >> 4) ^ (v23 >> 9));
        v35 = (uint64_t **)(v24 + 16 * v25);
        v36 = *v35;
        if ((uint64_t *)v23 != *v35)
        {
          v37 = 1;
          while (v36 != (uint64_t *)-4096)
          {
            v38 = v25 + v37++;
            v25 = v38 & v34;
            v36 = *(uint64_t **)(v24 + 16 * v25);
            if ((uint64_t *)v23 == v36)
            {
              v35 = (uint64_t **)(v24 + 16 * v25);
              goto LABEL_45;
            }
          }
          v18 = v21;
          goto LABEL_61;
        }
LABEL_45:
        v18 = v21;
        if (v35 == v32)
          goto LABEL_61;
        v39 = v35[1];
        v40 = v39 == v33 || v39 == 0;
        v18 = v21;
        if (v40)
          goto LABEL_61;
        if (v33)
        {
          v18 = v21;
          if ((uint64_t *)v39[1] == v33)
            goto LABEL_61;
          if ((uint64_t *)v33[1] != v39)
          {
            v41 = *((_DWORD *)v33 + 4);
            if (v41 < *((_DWORD *)v39 + 4))
            {
              if (*(_BYTE *)(v12 + 120))
              {
                if (*((_DWORD *)v39 + 18) >= *((_DWORD *)v33 + 18))
                {
                  v18 = v21;
                  if (*((_DWORD *)v39 + 19) <= *((_DWORD *)v33 + 19))
                    goto LABEL_61;
                }
              }
              else
              {
                v42 = *(_DWORD *)(v12 + 124) + 1;
                *(_DWORD *)(v12 + 124) = v42;
                if (v42 <= 0x20)
                {
                  do
                  {
                    v43 = v39;
                    v39 = (uint64_t *)v39[1];
                  }
                  while (v39 && *((_DWORD *)v39 + 4) >= v41);
                  v18 = v21;
                  if (v43 != v33)
                    continue;
LABEL_61:
                  v44 = *(uint64_t **)(v19 + 32);
                  if (v44)
                    v45 = v44 == v18 + 5;
                  else
                    v45 = 1;
                  if (v45)
                    v46 = 0;
                  else
                    v46 = v44 - 3;
                  if ((*((_BYTE *)v21 + 23) & 0x10) != 0)
                  {
                    v47 = **(_QWORD **)*v21;
                    v48 = *(_QWORD *)(v47 + 152);
                    v49 = *(unsigned int *)(v47 + 168);
                    if (!(_DWORD)v49)
                      goto LABEL_77;
                    LODWORD(v50) = (v49 - 1) & (v26 ^ (v21 >> 9));
                    v51 = (uint64_t **)(v48 + 16 * v50);
                    v52 = *v51;
                    if (*v51 != v21)
                    {
                      v53 = 1;
                      while (v52 != (uint64_t *)-4096)
                      {
                        v54 = v50 + v53++;
                        v50 = v54 & (v49 - 1);
                        v52 = *(uint64_t **)(v48 + 16 * v50);
                        if (v52 == v21)
                        {
                          v51 = (uint64_t **)(v48 + 16 * v50);
                          goto LABEL_78;
                        }
                      }
LABEL_77:
                      v51 = (uint64_t **)(v48 + 16 * v49);
                    }
LABEL_78:
                    v55 = v51[1];
                    v56 = (void *)*v55;
                    v17 = (char *)(v55 + 2);
                    v16 = v56;
                  }
                  else
                  {
                    v16 = 0;
                    v17 = &byte_1C871356D;
                  }
                  v347 = 773;
                  v345[0] = v17;
                  v345[1] = v16;
                  v346[0] = ".after";
                  llvm::BasicBlock::splitBasicBlock(v21, v46 + 3, (uint64_t)v345, 0);
                  v57 = (uint64_t *)v21[5];
                  if (v57 == v21 + 5)
                  {
                    v58 = 0;
                  }
                  else
                  {
                    if (v57)
                      v59 = v57 - 3;
                    else
                      v59 = 0;
                    if (*((unsigned __int8 *)v59 + 16) - 29 >= 0xB)
                      v58 = 0;
                    else
                      v58 = v59;
                  }
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v58[5] + 40, (uint64_t ***)v58);
                  v60 = v58[3];
                  v61 = (_QWORD *)v58[4];
                  *v61 = v60;
                  *(_QWORD *)(v60 + 8) = v61;
                  v58[3] = 0;
                  v58[4] = 0;
                  llvm::Value::deleteValue((llvm::Value *)v58);
                  v62 = (llvm::LLVMContext *)**((_QWORD **)v334 + 5);
                  v63 = (llvm::ReturnInst *)operator new(0x40uLL);
                  *((_DWORD *)v63 + 5) &= 0x38000000u;
                  llvm::ReturnInst::ReturnInst(v63, v62, (llvm::BasicBlock *)v21);
                  v13 = 1;
                  continue;
                }
                llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers(v330);
                if (*((_DWORD *)v39 + 18) >= *((_DWORD *)v33 + 18) && *((_DWORD *)v39 + 19) <= *((_DWORD *)v33 + 19))
                {
                  v18 = *(uint64_t **)(v19 + 40);
                  goto LABEL_61;
                }
              }
            }
          }
        }
      }
    }
    v11 = *(_QWORD *)(v11 + 8);
  }
  while (v11 != v10);
  if ((v13 & 1) == 0)
  {
LABEL_92:
    v65 = 0;
    v64 = v334;
    goto LABEL_93;
  }
  v64 = v334;
  llvm::removeUnreachableBlocks(v334, 0, 0, v8);
  v65 = 1;
LABEL_93:
  v66 = **(void ****)(a1 + 8);
  do
  {
    v67 = *v66;
    v66 += 2;
  }
  while (v67 != &llvm::FunctionGroupInfoWrapperPass::ID);
  v68 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v66 - 1) + 96))(*(v66 - 1), &llvm::FunctionGroupInfoWrapperPass::ID)+ 32);
  __dst = v341;
  v340 = 0x400000000;
  v69 = *((_QWORD *)v64 + 5);
  v70 = v69 + 24;
  for (j = *(_QWORD *)(v69 + 32); ; j = *(_QWORD *)(j + 8))
  {
    if (j == v70)
      goto LABEL_488;
    v72 = j - 56;
    if (!j)
      v72 = 0;
    if ((*(_BYTE *)(v72 + 33) & 0x20) != 0 && *(_DWORD *)(v72 + 36) == 2470)
      break;
  }
  v73 = *(_QWORD *)(v72 + 8);
  if (!v73)
    goto LABEL_488;
  do
  {
    v74 = *(_QWORD *)(v73 + 24);
    if (*(_BYTE *)(v74 + 16) == 84)
    {
      v75 = *(_QWORD *)(v74 - 32);
      if (v75)
      {
        if (!*(_BYTE *)(v75 + 16)
          && *(_QWORD *)(v75 + 24) == *(_QWORD *)(v74 + 72)
          && (*(_BYTE *)(v75 + 33) & 0x20) != 0)
        {
          if (*(llvm **)(*(_QWORD *)(v74 + 40) + 56) == v64)
          {
            v77 = v340;
            if (v340 >= (unint64_t)HIDWORD(v340))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v341, v340 + 1, 8);
              v77 = v340;
            }
            *((_QWORD *)__dst + v77) = v74;
            LODWORD(v340) = v340 + 1;
          }
          else
          {
            v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 24))(v68);
            if ((llvm *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 560))(v76) == v64)
              goto LABEL_488;
          }
        }
      }
    }
    v73 = *(_QWORD *)(v73 + 8);
  }
  while (v73);
  if (!(_DWORD)v340)
    goto LABEL_488;
  v78 = **(void ****)(a1 + 8);
  do
  {
    v79 = *v78;
    v78 += 2;
  }
  while (v79 != &llvm::PostDominatorTreeWrapperPass::ID);
  v80 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v78 - 1) + 96))(*(v78 - 1), &llvm::PostDominatorTreeWrapperPass::ID);
  v81 = **(char ****)(a1 + 8);
  do
  {
    v82 = *v81;
    v81 += 2;
  }
  while (v82 != llvm::LoopInfoWrapperPass::ID);
  v83 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v81 - 1) + 96))(*(v81 - 1), llvm::LoopInfoWrapperPass::ID);
  v84 = *((_QWORD *)v334 + 10);
  if (v84)
    v85 = v84 - 24;
  else
    v85 = 0;
  v342 = v344;
  v343 = 0x400000000;
  if (!(_DWORD)v340)
    goto LABEL_296;
  v86 = 0;
  v87 = v83;
  v325 = v80 + 32;
  v326 = v83 + 32;
  v88 = (uint64_t *)__dst;
  v327 = 0;
  v328 = (uint64_t *)((char *)__dst + 8 * v340);
  v331 = v85;
  v329 = (v85 >> 4) ^ (v85 >> 9);
  do
  {
    v89 = v86;
    v86 = *v88;
    v90 = *(_QWORD *)(*v88 - 32 * (*(_DWORD *)(*v88 + 20) & 0x7FFFFFF));
    if (v90)
      v91 = *(_BYTE *)(v90 + 16) == 16;
    else
      v91 = 0;
    if (v91)
    {
      v92 = (_QWORD *)(v90 + 24);
      v93 = *(_DWORD *)(v90 + 32);
      if (v93 < 0x41)
        goto LABEL_134;
      if (v93 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v90 + 24)) <= 0x40)
      {
        v92 = (_QWORD *)*v92;
LABEL_134:
        if (*v92 != 1)
          goto LABEL_152;
        if (v327 || !sub_1C5E9D8F8(v86))
          goto LABEL_366;
        v94 = *(_QWORD *)(v86 + 40);
        v95 = *(_DWORD *)(v87 + 48);
        v96 = v94 >> 4;
        if (v95)
        {
          v97 = *(_QWORD *)(v87 + 32);
          v98 = v95 - 1;
          v99 = (v96 ^ (v94 >> 9)) & (v95 - 1);
          v100 = *(_QWORD *)(v97 + 16 * v99);
          if (v94 == v100)
          {
LABEL_142:
            v103 = *(_QWORD **)(v97 + 16 * v99 + 8);
            if (v103)
            {
              v104 = 0;
              do
              {
                v103 = (_QWORD *)*v103;
                --v104;
              }
              while (v103);
              if (v104)
                goto LABEL_366;
            }
          }
          else
          {
            v101 = 1;
            while (v100 != -4096)
            {
              v102 = v99 + v101++;
              v99 = v102 & v98;
              v100 = *(_QWORD *)(v97 + 16 * v99);
              if (v94 == v100)
                goto LABEL_142;
            }
          }
        }
        v105 = *(_QWORD *)(v80 + 80);
        v106 = *(unsigned int *)(v80 + 96);
        if ((_DWORD)v106)
        {
          LODWORD(v107) = (v106 - 1) & (v96 ^ (v94 >> 9));
          v108 = (uint64_t *)(v105 + 16 * v107);
          v109 = *v108;
          if (v94 == *v108)
          {
LABEL_186:
            v134 = (uint64_t *)(v105 + 16 * v106);
            if (v108 == v134)
              v135 = 0;
            else
              v135 = v108[1];
            if (!(_DWORD)v106)
              goto LABEL_210;
            v136 = v106 - 1;
            LODWORD(v137) = v136 & v329;
            v138 = (uint64_t *)(v105 + 16 * (v136 & v329));
            v139 = *v138;
            if (v331 != *v138)
            {
              v140 = 1;
              do
              {
                if (v139 == -4096)
                  goto LABEL_210;
                v141 = v137 + v140++;
                v137 = v141 & v136;
                v139 = *(_QWORD *)(v105 + 16 * v137);
              }
              while (v331 != v139);
              v138 = (uint64_t *)(v105 + 16 * v137);
            }
            if (v138 == v134)
              goto LABEL_210;
            v142 = v138[1];
            if (v142 == v135 || v142 == 0)
              goto LABEL_210;
            if (!v135)
              goto LABEL_367;
            if (*(_QWORD *)(v142 + 8) == v135)
            {
LABEL_210:
              v327 = v86;
LABEL_229:
              v86 = v89;
              goto LABEL_265;
            }
            if (*(_QWORD *)(v135 + 8) == v142)
              goto LABEL_366;
            v144 = *(_DWORD *)(v135 + 16);
            if (v144 >= *(_DWORD *)(v142 + 16))
              goto LABEL_366;
            if (*(_BYTE *)(v80 + 120))
            {
              if (*(_DWORD *)(v142 + 72) < *(_DWORD *)(v135 + 72))
                goto LABEL_366;
LABEL_212:
              v327 = v86;
              v86 = v89;
              if (*(_DWORD *)(v142 + 76) > *(_DWORD *)(v135 + 76))
                goto LABEL_366;
              goto LABEL_265;
            }
            v145 = *(_DWORD *)(v80 + 124) + 1;
            *(_DWORD *)(v80 + 124) = v145;
            if (v145 > 0x20)
            {
              llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers(v325);
              if (*(_DWORD *)(v142 + 72) < *(_DWORD *)(v135 + 72))
              {
                LOBYTE(v135) = 0;
                goto LABEL_367;
              }
              goto LABEL_212;
            }
            do
            {
              v146 = v142;
              v142 = *(_QWORD *)(v142 + 8);
            }
            while (v142 && *(_DWORD *)(v142 + 16) >= v144);
            v327 = v86;
            v86 = v89;
            if (v146 != v135)
              goto LABEL_366;
            goto LABEL_265;
          }
          v110 = 1;
          while (v109 != -4096)
          {
            v111 = v107 + v110++;
            v107 = v111 & (v106 - 1);
            v109 = *(_QWORD *)(v105 + 16 * v107);
            if (v94 == v109)
            {
              v108 = (uint64_t *)(v105 + 16 * v107);
              goto LABEL_186;
            }
          }
        }
        v108 = (uint64_t *)(v105 + 16 * v106);
        goto LABEL_186;
      }
    }
LABEL_152:
    if (!sub_1C56318CC(v86) || !sub_1C5631958(v86))
      goto LABEL_366;
    UniquePredecessor = llvm::BasicBlock::getUniquePredecessor(*(llvm::BasicBlock **)(v86 + 40));
    v113 = UniquePredecessor;
    v114 = *(_QWORD *)(v80 + 80);
    v115 = *(unsigned int *)(v80 + 96);
    v116 = UniquePredecessor >> 4;
    if ((_DWORD)v115)
    {
      LODWORD(v117) = (v116 ^ (UniquePredecessor >> 9)) & (v115 - 1);
      v118 = (uint64_t *)(v114 + 16 * v117);
      v119 = *v118;
      if (UniquePredecessor == *v118)
        goto LABEL_161;
      v120 = 1;
      while (v119 != -4096)
      {
        v121 = v117 + v120++;
        v117 = v121 & (v115 - 1);
        v119 = *(_QWORD *)(v114 + 16 * v117);
        if (UniquePredecessor == v119)
        {
          v118 = (uint64_t *)(v114 + 16 * v117);
          goto LABEL_161;
        }
      }
    }
    v118 = (uint64_t *)(v114 + 16 * v115);
LABEL_161:
    v122 = (uint64_t *)(v114 + 16 * v115);
    if (v118 == v122)
    {
      v123 = 0;
      if (!(_DWORD)v115)
        goto LABEL_217;
    }
    else
    {
      v123 = v118[1];
      if (!(_DWORD)v115)
        goto LABEL_217;
    }
    v124 = v115 - 1;
    LODWORD(v115) = (v115 - 1) & v329;
    v125 = (uint64_t *)(v114 + 16 * v115);
    v126 = *v125;
    if (v331 != *v125)
    {
      v127 = 1;
      while (v126 != -4096)
      {
        v128 = v115 + v127++;
        v115 = v128 & v124;
        v126 = *(_QWORD *)(v114 + 16 * v115);
        if (v331 == v126)
        {
          v125 = (uint64_t *)(v114 + 16 * v115);
          goto LABEL_170;
        }
      }
      goto LABEL_217;
    }
LABEL_170:
    if (v125 != v122)
    {
      v129 = v125[1];
      if (v129 != v123 && v129 != 0)
      {
        if (!v123)
          goto LABEL_226;
        if (*(_QWORD *)(v129 + 8) != v123)
        {
          if (*(_QWORD *)(v123 + 8) == v129)
            goto LABEL_226;
          v131 = *(_DWORD *)(v123 + 16);
          if (v131 >= *(_DWORD *)(v129 + 16))
            goto LABEL_226;
          if (*(_BYTE *)(v80 + 120))
            goto LABEL_215;
          v132 = *(_DWORD *)(v80 + 124) + 1;
          *(_DWORD *)(v80 + 124) = v132;
          if (v132 > 0x20)
          {
            llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers(v325);
LABEL_215:
            if (*(_DWORD *)(v129 + 72) < *(_DWORD *)(v123 + 72) || *(_DWORD *)(v129 + 76) > *(_DWORD *)(v123 + 76))
              goto LABEL_226;
            goto LABEL_217;
          }
          do
          {
            v133 = v129;
            v129 = *(_QWORD *)(v129 + 8);
          }
          while (v129 && *(_DWORD *)(v129 + 16) >= v131);
          if (v133 != v123)
          {
LABEL_226:
            v156 = v343;
            if (v343 >= (unint64_t)HIDWORD(v343))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v342, (uint64_t)v344, v343 + 1, 8);
              v156 = v343;
            }
            *((_QWORD *)v342 + v156) = v86;
            LODWORD(v343) = v343 + 1;
            goto LABEL_229;
          }
        }
      }
    }
LABEL_217:
    v147 = *(_DWORD *)(v87 + 48);
    if (v147)
    {
      v148 = *(_QWORD *)(v87 + 32);
      v149 = v147 - 1;
      v150 = (v147 - 1) & (v116 ^ (v113 >> 9));
      v151 = *(_QWORD *)(v148 + 16 * v150);
      if (v113 == v151)
      {
LABEL_222:
        v154 = *(_QWORD **)(v148 + 16 * v150 + 8);
        if (v154)
        {
          v155 = 0;
          do
          {
            v154 = (_QWORD *)*v154;
            --v155;
          }
          while (v154);
          if (v155)
            goto LABEL_226;
        }
      }
      else
      {
        v152 = 1;
        while (v151 != -4096)
        {
          v153 = v150 + v152++;
          v150 = v153 & v149;
          v151 = *(_QWORD *)(v148 + 16 * v150);
          if (v113 == v151)
            goto LABEL_222;
        }
      }
    }
    if (!v89)
      goto LABEL_265;
    v157 = llvm::BasicBlock::getUniquePredecessor(*(llvm::BasicBlock **)(v89 + 40));
    v158 = *(_QWORD *)(v80 + 80);
    v159 = *(unsigned int *)(v80 + 96);
    if ((_DWORD)v159)
    {
      LODWORD(v160) = (v159 - 1) & (v116 ^ (v113 >> 9));
      v161 = (uint64_t *)(v158 + 16 * v160);
      v162 = *v161;
      if (v113 == *v161)
        goto LABEL_238;
      v163 = 1;
      while (v162 != -4096)
      {
        v164 = v160 + v163++;
        v160 = v164 & (v159 - 1);
        v162 = *(_QWORD *)(v158 + 16 * v160);
        if (v113 == v162)
        {
          v161 = (uint64_t *)(v158 + 16 * v160);
          goto LABEL_238;
        }
      }
    }
    v161 = (uint64_t *)(v158 + 16 * v159);
LABEL_238:
    v165 = (uint64_t *)(v158 + 16 * v159);
    if (v161 == v165)
      v166 = 0;
    else
      v166 = v161[1];
    if (!(_DWORD)v159)
      goto LABEL_265;
    v167 = v159 - 1;
    LODWORD(v159) = ((v157 >> 4) ^ (v157 >> 9)) & (v159 - 1);
    v168 = (uint64_t *)(v158 + 16 * v159);
    v169 = *v168;
    if (v157 != *v168)
    {
      v170 = 1;
      while (v169 != -4096)
      {
        v171 = v159 + v170++;
        v159 = v171 & v167;
        v169 = *(_QWORD *)(v158 + 16 * v159);
        if (v157 == v169)
        {
          v168 = (uint64_t *)(v158 + 16 * v159);
          goto LABEL_247;
        }
      }
      goto LABEL_265;
    }
LABEL_247:
    if (v168 != v165)
    {
      v172 = v168[1];
      if (v172 != v166 && v172 != 0)
      {
        if (!v166)
          goto LABEL_229;
        if (*(_QWORD *)(v172 + 8) != v166)
        {
          if (*(_QWORD *)(v166 + 8) == v172)
            goto LABEL_229;
          v174 = *(_DWORD *)(v166 + 16);
          if (v174 >= *(_DWORD *)(v172 + 16))
            goto LABEL_229;
          if (*(_BYTE *)(v80 + 120))
            goto LABEL_263;
          v175 = *(_DWORD *)(v80 + 124) + 1;
          *(_DWORD *)(v80 + 124) = v175;
          if (v175 > 0x20)
          {
            llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers(v325);
LABEL_263:
            if (*(_DWORD *)(v172 + 72) < *(_DWORD *)(v166 + 72) || *(_DWORD *)(v172 + 76) > *(_DWORD *)(v166 + 76))
              goto LABEL_229;
            goto LABEL_265;
          }
          do
          {
            v176 = v172;
            v172 = *(_QWORD *)(v172 + 8);
          }
          while (v172 && *(_DWORD *)(v172 + 16) >= v174);
          if (v176 != v166)
            goto LABEL_229;
        }
      }
    }
LABEL_265:
    ++v88;
  }
  while (v88 != v328);
  LOBYTE(v135) = 0;
  if (!v86)
    goto LABEL_367;
  v177 = v327;
  if (!v327)
    goto LABEL_367;
  v178 = *(_QWORD *)(v80 + 80);
  v179 = *(unsigned int *)(v80 + 96);
  if (!(_DWORD)v179)
    goto LABEL_277;
  v180 = *(_QWORD *)(v327 + 40);
  LODWORD(v181) = ((v180 >> 4) ^ (v180 >> 9)) & (v179 - 1);
  v182 = (uint64_t *)(v178 + 16 * v181);
  v183 = *v182;
  if (v180 != *v182)
  {
    v184 = 1;
    while (v183 != -4096)
    {
      v185 = v181 + v184++;
      v181 = v185 & (v179 - 1);
      v183 = *(_QWORD *)(v178 + 16 * v181);
      if (v180 == v183)
      {
        v182 = (uint64_t *)(v178 + 16 * v181);
        goto LABEL_278;
      }
    }
LABEL_277:
    v182 = (uint64_t *)(v178 + 16 * v179);
  }
LABEL_278:
  v186 = (uint64_t *)(v178 + 16 * v179);
  if (v182 == v186)
    v135 = 0;
  else
    v135 = v182[1];
  if (!(_DWORD)v179)
    goto LABEL_305;
  v187 = *(_QWORD *)(v86 + 40);
  v188 = v179 - 1;
  LODWORD(v179) = ((v187 >> 4) ^ (v187 >> 9)) & (v179 - 1);
  v189 = (uint64_t *)(v178 + 16 * v179);
  v190 = *v189;
  if (v187 != *v189)
  {
    v191 = 1;
    do
    {
      if (v190 == -4096)
        goto LABEL_305;
      v192 = v179 + v191++;
      v179 = v192 & v188;
      v190 = *(_QWORD *)(v178 + 16 * v179);
    }
    while (v187 != v190);
    v189 = (uint64_t *)(v178 + 16 * v179);
  }
  if (v189 == v186)
    goto LABEL_305;
  v193 = v189[1];
  if (v193 == v135 || v193 == 0)
    goto LABEL_305;
  if (!v135)
    goto LABEL_367;
  if (*(_QWORD *)(v193 + 8) == v135)
    goto LABEL_305;
  if (*(_QWORD *)(v135 + 8) == v193)
    goto LABEL_296;
  v195 = *(_DWORD *)(v135 + 16);
  if (v195 >= *(_DWORD *)(v193 + 16))
    goto LABEL_296;
  if (*(_BYTE *)(v80 + 120))
  {
    if (*(_DWORD *)(v193 + 72) < *(_DWORD *)(v135 + 72) || *(_DWORD *)(v193 + 76) > *(_DWORD *)(v135 + 76))
      goto LABEL_296;
    goto LABEL_305;
  }
  v196 = *(_DWORD *)(v80 + 124) + 1;
  *(_DWORD *)(v80 + 124) = v196;
  if (v196 > 0x20)
  {
    llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers(v325);
    if (*(_DWORD *)(v193 + 72) < *(_DWORD *)(v135 + 72))
      goto LABEL_296;
    v177 = v327;
    if (*(_DWORD *)(v193 + 76) > *(_DWORD *)(v135 + 76))
      goto LABEL_296;
LABEL_305:
    v198 = **(void ****)(a1 + 8);
    do
    {
      v199 = *v198;
      v198 += 2;
    }
    while (v199 != &llvm::DominatorTreeWrapperPass::ID);
    v200 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v198 - 1) + 96))(*(v198 - 1), &llvm::DominatorTreeWrapperPass::ID);
    if ((_DWORD)v343)
    {
      v201 = v200 + 32;
      v202 = (uint64_t *)v342;
      v203 = 8 * v343;
      while ((llvm::isPotentiallyReachable(*v202, v86, 0, v201, v326) & 1) != 0)
      {
        ++v202;
        v203 -= 8;
        if (!v203)
          goto LABEL_311;
      }
      goto LABEL_366;
    }
LABEL_311:
    v204 = *((_QWORD *)v334 + 5);
    if (*(char *)(v204 + 239) < 0)
      sub_1C47EBC30(&v338, *(void **)(v204 + 216), *(_QWORD *)(v204 + 224));
    else
      v338 = *(std::string *)(v204 + 216);
    if (std::string::compare(&v338, 0, 4uLL, "agx1") && std::string::compare(&v338, 0, 4uLL, "agx2"))
      std::string::compare(&v338, 0, 4uLL, "agx3");
    if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v338.__r_.__value_.__l.__data_);
    v205 = *(_QWORD *)(v177 + 40);
    v206 = v205 + 40;
    v207 = *(_QWORD *)(v205 + 48);
    if (v207 == v205 + 40)
    {
LABEL_363:
      v227 = *(llvm::BasicBlock **)(v86 + 40);
      v228 = llvm::BasicBlock::getUniquePredecessor(v227);
      UniqueSuccessor = llvm::BasicBlock::getUniqueSuccessor(v227);
      v230 = (llvm::BasicBlock *)UniqueSuccessor;
      if (*(_QWORD *)(UniqueSuccessor + 40) == UniqueSuccessor + 40
        || (v231 = *(_QWORD *)(UniqueSuccessor + 48)) == 0
        || *(_BYTE *)(v231 - 8) != 83)
      {
        v295 = *(_QWORD *)(v228 + 40);
        if (v295 == v228 + 40)
        {
          v296 = 0;
        }
        else
        {
          if (v295)
            v296 = v295 - 24;
          else
            v296 = 0;
          if (*(unsigned __int8 *)(v296 + 16) - 29 >= 0xB)
            v296 = 0;
        }
        if (*(_BYTE *)(v296 + 16) == 30)
          v297 = v296;
        else
          v297 = 0;
        for (k = (_QWORD *)*((_QWORD *)v227 + 6); k != (_QWORD *)((char *)v227 + 40); k = (_QWORD *)k[1])
        {
          v299 = (uint64_t)(k - 3);
          if (k)
            v300 = k - 3;
          else
            v300 = 0;
          if (*((_BYTE *)v300 + 16) != 83)
            goto LABEL_513;
        }
        v299 = 0;
LABEL_513:
        sub_1C4773D54((uint64_t)v345, v299, 0, 0, 0);
        v301 = *(unsigned __int8 **)(v297 - 96);
        if (*(llvm::BasicBlock **)(v297 - 32) != v230 || *(llvm::BasicBlock **)(v297 - 64) != v227)
        {
          v337 = 257;
          v301 = (unsigned __int8 *)sub_1C506EAA0((uint64_t)v345, (uint64_t)v301, (uint64_t)v336);
        }
        v302 = *(_QWORD *)v348 + 1936;
        v337 = 257;
        v303 = sub_1C4773E38((uint64_t *)v345, 39, v301, v302, (uint64_t)v336);
        v304 = *(_QWORD *)(v86 - 32 * (*(_DWORD *)(v86 + 20) & 0x7FFFFFF));
        v337 = 257;
        v305 = sub_1C4773594((uint64_t)v345, v303, v304, (uint64_t)v336);
        v307 = *(_DWORD *)(v86 + 20) & 0x7FFFFFF;
        v308 = -v307;
        v309 = (uint64_t *)(v86 - 32 * v307);
        if (*v309)
        {
          v310 = v86 + 32 * v308;
          v312 = *(_QWORD **)(v310 + 16);
          v311 = (_QWORD *)(v310 + 16);
          *v312 = *(v311 - 1);
          v313 = *(v311 - 1);
          if (v313)
            *(_QWORD *)(v313 + 16) = *v311;
        }
        *v309 = v305;
        if (v305)
        {
          v316 = *(_QWORD *)(v305 + 8);
          v314 = (uint64_t **)(v305 + 8);
          v315 = v316;
          v317 = v86 + 32 * v308;
          *(_QWORD *)(v317 + 8) = v316;
          if (v316)
            *(_QWORD *)(v315 + 16) = v317 + 8;
          *(_QWORD *)(v317 + 16) = v314;
          *v314 = v309;
        }
        llvm::MergeBasicBlockIntoOnlyPred((unint64_t)v227, 0, v306);
        if (llvm::BasicBlock::hasNPredecessors(v230, 1))
          llvm::MergeBasicBlockIntoOnlyPred((unint64_t)v230, 0, v318);
        v319 = __dst;
        v320 = v340;
        v321 = (char *)__dst + 8 * v340;
        if ((_DWORD)v340)
        {
          v322 = 8 * v340;
          while (*v319 != v327)
          {
            ++v319;
            v322 -= 8;
            if (!v322)
            {
              v319 = (char *)__dst + 8 * v340;
              break;
            }
          }
        }
        if (v321 != (char *)(v319 + 1))
        {
          memmove(v319, v319 + 1, v321 - (char *)(v319 + 1));
          v320 = v340;
        }
        LODWORD(v340) = v320 - 1;
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v327 + 40) + 40, (uint64_t ***)v327);
        v323 = *(_QWORD *)(v327 + 24);
        v324 = *(_QWORD **)(v327 + 32);
        *v324 = v323;
        *(_QWORD *)(v323 + 8) = v324;
        *(_QWORD *)(v327 + 24) = 0;
        *(_QWORD *)(v327 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v327);
        if (v345[0] != v346)
          free(v345[0]);
        LOBYTE(v135) = 1;
        goto LABEL_367;
      }
LABEL_366:
      LOBYTE(v135) = 0;
      goto LABEL_367;
    }
    while (1)
    {
      if (v207)
        v208 = v207 - 24;
      else
        v208 = 0;
      if (v208 == v327)
        goto LABEL_363;
      v209 = *(unsigned __int8 *)(v208 + 16) - 33;
      if (v209 > 0x37)
        break;
      if (((1 << (*(_BYTE *)(v208 + 16) - 33)) & 0x8000000000041) != 0)
      {
        v211 = *(_QWORD *)(v208 + 64);
        if (v211 && (*(_BYTE *)(v211 + 17) & 0x30) != 0)
          break;
        v212 = *(_DWORD *)(v208 + 20);
        if (v212 < 0)
        {
          v218 = v208 - 32 * (v212 & 0x7FFFFFF);
          v221 = *(_QWORD *)(v218 - 8);
          v219 = v218 - 8;
          v220 = v221;
          if (v221)
          {
            v222 = -v220;
            while (1)
            {
              v223 = *(_DWORD *)(*(_QWORD *)(v219 + v222) + 8);
              v224 = v223 > 7;
              v225 = (1 << v223) & 0x83;
              if (v224 || v225 == 0)
                break;
              v222 += 16;
              if (!v222)
                goto LABEL_331;
            }
            v210 = 1;
            goto LABEL_334;
          }
        }
LABEL_331:
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v208, 45) & 1) != 0)
          break;
        v210 = llvm::CallBase::hasFnAttrOnCalledFunction(v208, 44) ^ 1;
      }
      else if (v209 == 27)
      {
        v210 = (*(_WORD *)(v208 + 18) & 0x301) != 0;
      }
      else
      {
        v210 = ((1 << (*(_BYTE *)(v208 + 16) - 33)) & 0x808001D0000010) != 0;
      }
LABEL_334:
      v213 = *(unsigned __int8 *)(v208 + 16);
      if (v213 == 84)
        v214 = v208;
      else
        v214 = 0;
      if (!v207 || v213 != 84)
        goto LABEL_347;
      v215 = *(_QWORD *)(v214 - 32);
      if (!v215
        || *(_BYTE *)(v215 + 16)
        || *(_QWORD *)(v215 + 24) != *(_QWORD *)(v214 + 72)
        || (*(_BYTE *)(v215 + 33) & 0x20) == 0)
      {
        goto LABEL_366;
      }
      if (((v216 = *(_DWORD *)(*(_QWORD *)(v208 - 32) + 36), (v217 = *(_QWORD *)(v214 + 64)) != 0)
         && (*(_BYTE *)(v217 + 12) & 0x40) != 0
         || llvm::CallBase::hasFnAttrOnCalledFunction(v214, 6))
        && (v216 - 1282) >= 0x190
        && (v216 - 2824) >= 0xC)
      {
        if (((sub_1C5EAC4B0(v216) ^ 1 | v210) & 1) != 0)
          goto LABEL_366;
      }
      else
      {
LABEL_347:
        if ((v210 & 1) != 0)
          goto LABEL_366;
      }
      v207 = *(_QWORD *)(v207 + 8);
      if (v207 == v206)
        goto LABEL_363;
    }
    v210 = 0;
    goto LABEL_334;
  }
  do
  {
    v197 = v193;
    v193 = *(_QWORD *)(v193 + 8);
  }
  while (v193 && *(_DWORD *)(v193 + 16) >= v195);
  if (v197 == v135)
    goto LABEL_305;
LABEL_296:
  LOBYTE(v135) = 0;
LABEL_367:
  if (v342 != v344)
    free(v342);
  v232 = v65 | v135;
  if (((*((unsigned __int16 *)v334 + 9) >> 4) & 0x3FFu) - 103 >= 2 && (_DWORD)v340)
  {
    v233 = (uint64_t *)__dst;
    v234 = 8 * v340;
    do
    {
      v235 = *v233;
      if (sub_1C5631958(*v233)
        && ((v236 = *(llvm::BasicBlock **)(v235 + 40),
             v237 = llvm::BasicBlock::getUniquePredecessor(v236),
             v238 = llvm::BasicBlock::getUniqueSuccessor(v236),
             v239 = (llvm::BasicBlock *)v238,
             *(_QWORD *)(v238 + 40) == v238 + 40)
         || (v240 = *(_QWORD *)(v238 + 48)) == 0
         || *(_BYTE *)(v240 - 8) != 83))
      {
        v242 = *(_QWORD *)(v237 + 40);
        if (v242 == v237 + 40)
        {
          v243 = 0;
        }
        else
        {
          if (v242)
            v243 = v242 - 24;
          else
            v243 = 0;
          if (*(unsigned __int8 *)(v243 + 16) - 29 >= 0xB)
            v243 = 0;
        }
        if (*(_BYTE *)(v243 + 16) == 30)
          v244 = v243;
        else
          v244 = 0;
        sub_1C4773D54((uint64_t)v345, v235, 0, 0, 0);
        v246 = *(uint64_t **)(v235 - 32 * (*(_DWORD *)(v235 + 20) & 0x7FFFFFF) + 32);
        v247 = *(llvm::ConstantInt **)(*(_QWORD *)v348 + 1936);
        LODWORD(v343) = *(_DWORD *)(*(_QWORD *)v348 + 1944) >> 8;
        if (v343 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v342, 0, 0);
        else
          v342 = 0;
        v248 = llvm::ConstantInt::get(v247, (llvm::LLVMContext *)&v342, v245);
        if (v343 >= 0x41 && v342)
          MEMORY[0x1CAA32F9C](v342, 0x1000C8000313F17);
        if (*(llvm::BasicBlock **)(v244 - 32) == v239)
        {
          v249 = *(llvm::BasicBlock **)(v244 - 64);
          v250 = v249 == v236;
          if (v249 == v236)
            v251 = (uint64_t *)v248;
          else
            v251 = v246;
          if (v250)
            v248 = (llvm::ValueHandleBase *)v246;
          v246 = v251;
        }
        v252 = *(_QWORD *)(v244 - 96);
        v344[8] = 257;
        Select = llvm::IRBuilderBase::CreateSelect((uint64_t *)v345, v252, v246, (uint64_t)v248, (uint64_t)&v342, 0);
        v255 = v235 - 32 * (*(_DWORD *)(v235 + 20) & 0x7FFFFFF);
        v256 = (llvm::Value **)(v255 + 32);
        if (*(_QWORD *)(v255 + 32))
        {
          **(_QWORD **)(v255 + 48) = *(_QWORD *)(v255 + 40);
          v257 = *(_QWORD *)(v255 + 40);
          if (v257)
            *(_QWORD *)(v257 + 16) = *(_QWORD *)(v255 + 48);
        }
        *v256 = Select;
        if (Select)
        {
          v260 = *((_QWORD *)Select + 1);
          v258 = (llvm::Value ***)((char *)Select + 8);
          v259 = v260;
          *(_QWORD *)(v255 + 40) = v260;
          if (v260)
            *(_QWORD *)(v259 + 16) = v255 + 40;
          *(_QWORD *)(v255 + 48) = v258;
          *v258 = v256;
        }
        llvm::MergeBasicBlockIntoOnlyPred((unint64_t)v236, 0, v254);
        if (llvm::BasicBlock::hasNPredecessors(v239, 1))
          llvm::MergeBasicBlockIntoOnlyPred((unint64_t)v239, 0, v261);
        if (v345[0] != v346)
          free(v345[0]);
        v241 = 1;
      }
      else
      {
        v241 = 0;
      }
      v232 |= v241;
      ++v233;
      v234 -= 8;
    }
    while (v234);
  }
  if (v65)
  {
    v262 = (char *)v334 + 72;
    v263 = (char *)*((_QWORD *)v334 + 10);
    if (v263 == (char *)v334 + 72)
    {
      v264 = 0;
      goto LABEL_487;
    }
    v264 = 0;
    while (1)
    {
      if (v263)
        v265 = v263 - 24;
      else
        v265 = 0;
      v268 = (_QWORD *)*((_QWORD *)v265 + 5);
      v267 = v265 + 40;
      v266 = v268;
      if (v268 == v267)
      {
        v269 = 0;
      }
      else
      {
        v269 = v266 - 3;
        if (!v266)
          v269 = 0;
        if (*((unsigned __int8 *)v269 + 16) - 29 >= 0xB)
          v269 = 0;
      }
      if (*(_QWORD **)(v269[5] + 48) == v269 + 3)
        goto LABEL_434;
      v270 = v269[3];
      if (!v270)
        goto LABEL_434;
      if (*(_BYTE *)(v270 - 8) != 84)
        goto LABEL_434;
      v271 = *(_QWORD *)(v270 - 56);
      if (!v271 || *(_BYTE *)(v271 + 16) || *(_QWORD *)(v271 + 24) != *(_QWORD *)(v270 + 48))
        goto LABEL_434;
      v272 = (*(_DWORD *)(v271 + 32) & 0x2000) != 0 ? v270 - 24 : 0;
      if (*((_BYTE *)v269 + 16) != 29)
        goto LABEL_434;
      if ((*(_DWORD *)(v271 + 32) & 0x2000) == 0)
        goto LABEL_434;
      v273 = sub_1C56318CC(v272);
      if (v266 == v267 || !v273)
        goto LABEL_434;
      while (1)
      {
        v274 = v266 - 3;
        v275 = (_QWORD *)*v266;
        if (v266 - 3 == (_QWORD *)v272)
          goto LABEL_474;
        v276 = *((unsigned __int8 *)v266 - 8);
        if (v276 <= 0x3B)
        {
          if (v276 == 37)
            goto LABEL_434;
          if (v276 != 33 && v276 != 39)
            goto LABEL_474;
          goto LABEL_461;
        }
        v277 = v276 - 60;
        if (v277 > 0x1C)
          goto LABEL_474;
        if (v277 == 24)
          break;
        if (((1 << v277) & 0x1010003A) != 0 || !v277 && (*((_WORD *)v266 - 3) & 0x301) != 0)
          goto LABEL_434;
LABEL_474:
        v266 = v275;
        if (v275 == v267)
          goto LABEL_434;
      }
      v278 = *(v266 - 7);
      if (v278
        && !*(_BYTE *)(v278 + 16)
        && *(_QWORD *)(v278 + 24) == v266[6]
        && (*(_BYTE *)(v278 + 33) & 0x20) != 0
        && *(_DWORD *)(v278 + 36) == 2470)
      {
        v279 = v274[-4 * (*((_DWORD *)v266 - 1) & 0x7FFFFFF)];
        if (v279 && *(_BYTE *)(v279 + 16) == 16)
        {
          v281 = (llvm::APInt *)(v279 + 24);
          v335 = *(_DWORD *)(v279 + 32);
          if (v335 >= 0x41)
          {
            v333 = (llvm::APInt **)(v279 + 24);
            if (v335 - llvm::APInt::countLeadingZerosSlowCase(v281) > 0x40)
              goto LABEL_461;
            v281 = *v333;
          }
          if (!*(_QWORD *)v281)
          {
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v266[2] + 40, (uint64_t ***)v266 - 3);
            v284 = *v266;
            v285 = (_QWORD *)v266[1];
            *v285 = *v266;
            *(_QWORD *)(v284 + 8) = v285;
            *v266 = 0;
            v266[1] = 0;
            llvm::Value::deleteValue((llvm::Value *)(v266 - 3));
            v264 = 1;
            goto LABEL_474;
          }
        }
      }
LABEL_461:
      v282 = v266[5];
      if (v282 && (*(_BYTE *)(v282 + 17) & 0x30) != 0)
        goto LABEL_474;
      v283 = *((_DWORD *)v266 - 1);
      if ((v283 & 0x80000000) == 0
        || (v286 = &v274[-4 * (v283 & 0x7FFFFFF)], v289 = *(v286 - 1), v287 = v286 - 1, (v288 = v289) == 0))
      {
LABEL_464:
        if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)(v266 - 3), 45) & 1) == 0
          && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)(v266 - 3), 44))
        {
          goto LABEL_434;
        }
        goto LABEL_474;
      }
      v290 = -v288;
      while (1)
      {
        v291 = *(_DWORD *)(*(_QWORD *)((char *)v287 + v290) + 8);
        v224 = v291 > 7;
        v292 = (1 << v291) & 0x83;
        if (v224 || v292 == 0)
          break;
        v290 += 16;
        if (!v290)
          goto LABEL_464;
      }
LABEL_434:
      v263 = (char *)*((_QWORD *)v263 + 1);
      if (v263 == v262)
      {
LABEL_487:
        LOBYTE(v65) = v232 | v264;
        goto LABEL_488;
      }
    }
  }
  LOBYTE(v65) = v232;
LABEL_488:
  if (__dst != v341)
    free(__dst);
  return v65 & 1;
}

BOOL sub_1C56318CC(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  _QWORD *v4;
  unsigned int v5;

  v1 = *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
  if (v1)
    v2 = *(_BYTE *)(v1 + 16) == 16;
  else
    v2 = 0;
  if (!v2)
    return 0;
  v4 = (_QWORD *)(v1 + 24);
  v5 = *(_DWORD *)(v1 + 32);
  if (v5 >= 0x41)
  {
    if (v5 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v1 + 24)) > 0x40)
      return 0;
    v4 = (_QWORD *)*v4;
  }
  if (*v4)
    return 0;
  return sub_1C5E9D8F8(a1);
}

BOOL sub_1C5631958(uint64_t a1)
{
  llvm::BasicBlock *v2;
  uint64_t UniquePredecessor;
  uint64_t UniqueSuccessor;
  BOOL v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  unsigned int v9;
  llvm::BasicBlock *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _BOOL4 v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];
  _QWORD *v46;
  _BYTE v47[16];
  _BYTE v48[24];
  _BYTE *v49;
  _BYTE v50[16];
  _BYTE v51[24];
  _BYTE *v52;
  __int128 v53;
  _BYTE v54[24];
  _BYTE *v55;
  __int128 v56;
  _BYTE v57[24];
  _BYTE *v58;
  __int128 v59;
  _BYTE v60[24];
  _BYTE *v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v2 = *(llvm::BasicBlock **)(a1 + 40);
  UniquePredecessor = llvm::BasicBlock::getUniquePredecessor(v2);
  UniqueSuccessor = llvm::BasicBlock::getUniqueSuccessor(v2);
  if (UniquePredecessor)
    v5 = UniqueSuccessor == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  v6 = *(_QWORD *)(UniquePredecessor + 40);
  if (v6 == UniquePredecessor + 40)
    return 0;
  v7 = 0;
  v8 = v6 - 24;
  if (!v6)
    v8 = 0;
  v9 = *(unsigned __int8 *)(v8 + 16) - 40;
  if (v9 < 0xFFFFFFF5)
    v8 = 0;
  if (v6)
  {
    if (*(_BYTE *)(v8 + 16) == 30 && v9 >= 0xFFFFFFF5)
    {
      if ((*(_DWORD *)(v8 + 20) & 0x7FFFFFF) != 3)
        return 0;
      v11 = *(llvm::BasicBlock **)(v8 - 32);
      if ((v11 != v2 || *(_QWORD *)(v8 - 64) != UniqueSuccessor)
        && (v11 != (llvm::BasicBlock *)UniqueSuccessor || *(llvm::BasicBlock **)(v8 - 64) != v2))
      {
        return 0;
      }
      v12 = -1;
      v13 = (_QWORD *)((char *)v2 + 40);
      do
      {
        v13 = (_QWORD *)v13[1];
        ++v12;
      }
      while (v13 != (_QWORD *)((char *)v2 + 40));
      if (v12 < 2)
        return 0;
      llvm::BasicBlock::instructionsWithoutDebug(v2, 1, (uint64_t)&v53);
      v59 = v53;
      v15 = v60;
      if (v55)
      {
        if (v55 == v54)
        {
          v61 = v60;
          (*(void (**)(void))(*(_QWORD *)v55 + 24))();
        }
        else
        {
          v61 = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v55 + 16))();
        }
      }
      else
      {
        v61 = 0;
      }
      v16 = v58;
      if (v58 == v57)
      {
        v17 = 4;
        v16 = v57;
      }
      else
      {
        if (!v58)
        {
LABEL_34:
          v18 = v55;
          if (v55 == v54)
          {
            v19 = 4;
            v18 = v54;
          }
          else
          {
            if (!v55)
            {
LABEL_37:
              v20 = 0;
              if ((_QWORD)v59)
                v21 = v59 - 24;
              else
                v21 = 0;
              if (*(_BYTE *)(v21 + 16) == 84)
              {
                v22 = *(_QWORD *)(v21 - 32);
                if (v22 && !*(_BYTE *)(v22 + 16) && *(_QWORD *)(v22 + 24) == *(_QWORD *)(v21 + 72))
                {
                  if ((*(_BYTE *)(v22 + 33) & 0x20) != 0)
                    v20 = v21;
                  else
                    v20 = 0;
                }
                else
                {
                  v20 = 0;
                }
              }
              sub_1C5631E6C(&v59, (uint64_t)v50);
              v23 = v52;
              if (v52 == v51)
              {
                v24 = 4;
                v23 = v51;
              }
              else
              {
                if (!v52)
                  goto LABEL_50;
                v24 = 5;
              }
              (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_50:
              v25 = v59 - 24;
              if ((_QWORD)v59)
                v26 = v59 - 24;
              else
                v26 = 0;
              if (*(_BYTE *)(v26 + 16) != 84
                || (v27 = *(_QWORD *)(v26 - 32)) == 0
                || *(_BYTE *)(v27 + 16)
                || *(_QWORD *)(v27 + 24) != *(_QWORD *)(v26 + 72)
                || (*(_BYTE *)(v27 + 33) & 0x20) == 0)
              {
                v28 = 0;
                v25 = v20;
                goto LABEL_59;
              }
              sub_1C5631E6C(&v59, (uint64_t)v47);
              v42 = v49;
              if (v49 == v48)
              {
                v43 = 4;
                v42 = v48;
              }
              else
              {
                if (!v49)
                {
LABEL_110:
                  v28 = v20;
LABEL_59:
                  llvm::BasicBlock::instructionsWithoutDebug(v2, 1, (uint64_t)&v53);
                  v44 = v56;
                  if (v58)
                  {
                    if (v58 == v57)
                    {
                      v46 = v45;
                      (*(void (**)(void))(*(_QWORD *)v58 + 24))();
                      v29 = v46;
                    }
                    else
                    {
                      v29 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v58 + 16))();
                      v46 = v29;
                    }
                    v30 = (_QWORD)v59 == v44;
                    if (v29 == v45)
                    {
                      (*(void (**)(_QWORD *))(v45[0] + 32))(v45);
                    }
                    else if (v29)
                    {
                      (*(void (**)(_QWORD *))(*v29 + 40))(v29);
                    }
                  }
                  else
                  {
                    v46 = 0;
                    v30 = (_QWORD)v59 == (_QWORD)v56;
                  }
                  v31 = v58;
                  if (v58 == v57)
                  {
                    v32 = 4;
                    v31 = v57;
                  }
                  else
                  {
                    if (!v58)
                    {
LABEL_71:
                      v33 = v55;
                      if (v55 == v54)
                      {
                        v34 = 4;
                        v33 = v54;
                      }
                      else
                      {
                        if (!v55)
                        {
LABEL_74:
                          v35 = v59 - 24;
                          if ((_QWORD)v59)
                            v36 = v30;
                          else
                            v36 = 1;
                          if (v36)
                            v37 = 0;
                          else
                            v37 = v59 - 24;
                          if (v28)
                          {
                            v7 = 0;
                            if (*(_DWORD *)(*(_QWORD *)(v28 - 32) + 36) != 1268 || v25 != a1)
                              goto LABEL_97;
                          }
                          else if (v25 != a1)
                          {
                            v7 = 0;
                            goto LABEL_97;
                          }
                          if (!(_QWORD)v59)
                            v35 = 0;
                          v38 = *(_QWORD *)(v35 + 40);
                          v39 = *(_QWORD *)(v38 + 40);
                          if (v39 == v38 + 40)
                          {
                            v40 = 0;
                          }
                          else
                          {
                            if (v39)
                              v40 = v39 - 24;
                            else
                              v40 = 0;
                            if (*(unsigned __int8 *)(v40 + 16) - 29 >= 0xB)
                              v40 = 0;
                          }
                          v7 = v40 == v37;
LABEL_97:
                          if (v61 == v60)
                          {
                            v41 = 4;
                          }
                          else
                          {
                            if (!v61)
                              return v7;
                            v41 = 5;
                            v15 = v61;
                          }
                          (*(void (**)(_QWORD *))(*v15 + 8 * v41))(v15);
                          return v7;
                        }
                        v34 = 5;
                      }
                      (*(void (**)(void))(*v33 + 8 * v34))();
                      goto LABEL_74;
                    }
                    v32 = 5;
                  }
                  (*(void (**)(void))(*v31 + 8 * v32))();
                  goto LABEL_71;
                }
                v43 = 5;
              }
              (*(void (**)(void))(*v42 + 8 * v43))();
              goto LABEL_110;
            }
            v19 = 5;
          }
          (*(void (**)(void))(*v18 + 8 * v19))();
          goto LABEL_37;
        }
        v17 = 5;
      }
      (*(void (**)(void))(*v16 + 8 * v17))();
      goto LABEL_34;
    }
  }
  return v7;
}

uint64_t sub_1C5631E6C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  v3 = a2 + 16;
  result = a1[5];
  if (result)
  {
    if ((_QWORD *)result == a1 + 2)
    {
      *(_QWORD *)(a2 + 40) = v3;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v3);
      *(_QWORD *)(a2 + 40) = result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 40) = 0;
  }
  do
  {
    v5 = a1[1];
    v6 = *(_QWORD *)(*a1 + 8);
    *a1 = v6;
    if (v6 == v5)
      break;
    v7 = a1[5];
    if (!v7)
    {
      sub_1C485C2F0();
      return sub_1C5631F14(v10);
    }
    if (v6)
      v8 = v6 - 24;
    else
      v8 = 0;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, v8);
  }
  while ((result & 1) == 0);
  return result;
}

uint64_t sub_1C5631F14(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeFunctionGroupInfoWrapperPassPass(a1);
  llvm::initializeLoopInfoWrapperPassPass(a1);
  llvm::initializePostDominatorTreeWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Optimize lowering of switches";
  *(_QWORD *)(v2 + 8) = 29;
  *(_QWORD *)(v2 + 16) = "gpu-optimize-switches";
  *(_QWORD *)(v2 + 24) = 21;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F3020;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5631FB8;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5631FB8()
{
  uint64_t v0;
  void (**v2)(void);
  void (**v3)(void);
  _QWORD *v4;
  void (**v5)(_QWORD *);
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  v12 = 0;
  v10 = 0;
  v8 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = &unk_1EF8F3020;
  *(_DWORD *)(v0 + 24) = 2;
  *(_QWORD *)v0 = &off_1E8171AF8;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 88) = 0;
  *(_QWORD *)(v0 + 120) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  sub_1C627FA0C(qword_1ED830BC0[0]);
  if (v8 == &v7)
  {
    v2 = (void (**)(void))(v7 + 32);
  }
  else
  {
    if (!v8)
      goto LABEL_8;
    v2 = (void (**)(void))(*v8 + 40);
  }
  (*v2)();
LABEL_8:
  if (v10 == &v9)
  {
    v3 = (void (**)(void))(v9 + 32);
  }
  else
  {
    if (!v10)
      goto LABEL_13;
    v3 = (void (**)(void))(*v10 + 40);
  }
  (*v3)();
LABEL_13:
  v4 = v12;
  if (v12 == v11)
  {
    v5 = (void (**)(_QWORD *))(v11[0] + 32);
    v4 = v11;
    goto LABEL_17;
  }
  if (v12)
  {
    v5 = (void (**)(_QWORD *))(*v12 + 40);
LABEL_17:
    (*v5)(v4);
  }
  return v0;
}

void sub_1C5632134(llvm::Pass *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  llvm::Pass *v5;
  uint64_t v6;
  llvm::Pass *v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E8171AF8;
  v2 = (char *)this + 96;
  v3 = (char *)*((_QWORD *)this + 15);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (llvm::Pass *)*((_QWORD *)this + 11);
  if (v5 == (llvm::Pass *)((char *)this + 64))
  {
    v6 = 4;
    v5 = (llvm::Pass *)((char *)this + 64);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  v7 = (llvm::Pass *)*((_QWORD *)this + 7);
  if (v7 == (llvm::Pass *)((char *)this + 32))
  {
    v8 = 4;
    v7 = (llvm::Pass *)((char *)this + 32);
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
  }
  llvm::Pass::~Pass(this);
}

void sub_1C56321F0(llvm::Pass *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  llvm::Pass *v5;
  uint64_t v6;
  llvm::Pass *v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E8171AF8;
  v2 = (char *)this + 96;
  v3 = (char *)*((_QWORD *)this + 15);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (llvm::Pass *)*((_QWORD *)this + 11);
  if (v5 == (llvm::Pass *)((char *)this + 64))
  {
    v6 = 4;
    v5 = (llvm::Pass *)((char *)this + 64);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  v7 = (llvm::Pass *)*((_QWORD *)this + 7);
  if (v7 == (llvm::Pass *)((char *)this + 32))
  {
    v8 = 4;
    v7 = (llvm::Pass *)((char *)this + 32);
  }
  else
  {
    if (!v7)
    {
LABEL_16:
      llvm::Pass::~Pass(this);
      JUMPOUT(0x1CAA32FC0);
    }
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
  goto LABEL_16;
}

void *sub_1C56322C0(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
}

BOOL sub_1C5632324(uint64_t a1, uint64_t *a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  char **v7;
  char *v8;
  uint64_t v9;
  void **v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 result;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  llvm::MemorySSAUpdater *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t i;
  int v52;
  int v53;
  unsigned int j;
  llvm::BasicBlock *v55;
  uint64_t v56;
  int *v57;
  int *v58;
  _QWORD *v59;
  unsigned int v60;
  int *v61;
  int *v62;
  int *v63;
  uint64_t NearestCommonDominator;
  uint64_t v65;
  int *v66;
  int *v67;
  _QWORD *v68;
  unsigned int v69;
  int *v70;
  int *v71;
  int *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t *v79;
  uint64_t v80;
  llvm::Instruction *v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  uint64_t Successor;
  uint64_t v86;
  char v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  int v91;
  uint64_t *v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  unint64_t *v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  char *v106;
  char *v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  BOOL v118;
  unint64_t *v120;
  unint64_t v121;
  unsigned int v122;
  BOOL v123;
  char *v125;
  int v126;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t k;
  uint64_t v136;
  unsigned int v137;
  BOOL v138;
  char *v140;
  uint64_t *v141;
  _BOOL4 v142;
  uint64_t v143;
  unsigned int v144;
  BOOL v145;
  _QWORD *v147;
  _QWORD *v148;
  uint64_t v149;
  unsigned int v150;
  _QWORD *v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  BOOL v157;
  uint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  int v165;
  unsigned int n;
  int v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t *v171;
  int v173;
  unsigned int ii;
  int v175;
  _QWORD *v176;
  char *v177;
  uint64_t *v178;
  uint64_t v179;
  llvm::ValueSymbolTable *v180;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t v183;
  char *v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  int v190;
  unsigned int m;
  uint64_t v192;
  uint64_t *v193;
  unint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t *v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD **v206;
  unsigned int v207;
  _QWORD *v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t *v211;
  _QWORD *v212;
  char *v213;
  char *v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  llvm::Value *v218;
  _QWORD *v219;
  _QWORD *v220;
  _QWORD *v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  _QWORD *v226;
  char *v227;
  uint64_t *v228;
  char *v229;
  uint64_t *v230;
  uint64_t v231;
  _QWORD *v232;
  unsigned int v233;
  int v234;
  uint64_t v235;
  char *v236;
  int v237;
  llvm::BlockAddress **v238;
  uint64_t ***v239;
  _QWORD *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int v246;
  uint64_t *v247;
  uint64_t **v248;
  uint64_t **v249;
  uint64_t *v250;
  uint64_t *v251;
  unsigned int v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int v260;
  uint64_t v261;
  uint64_t **v262;
  uint64_t *v263;
  uint64_t *v264;
  unsigned __int8 *v265;
  uint64_t v266;
  unsigned __int8 *v267;
  uint64_t v268;
  unsigned __int8 *v269;
  unsigned int v270;
  char *v271;
  unsigned __int8 **v272;
  unsigned __int8 **v273;
  llvm::IndirectBrInst *v274;
  llvm::BasicBlock **v275;
  uint64_t v276;
  llvm::BasicBlock *v277;
  uint64_t v278;
  int v279;
  _QWORD ****v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t v283;
  int v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char *v289;
  uint64_t *v290;
  uint64_t v291;
  llvm::Type *v292;
  _QWORD *v293;
  unsigned int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unsigned int v299;
  uint64_t v300;
  llvm::APFloatBase *v301;
  uint64_t FCmpHelper;
  llvm::BasicBlock *v303;
  unsigned __int8 *v304;
  uint64_t v305;
  unsigned __int8 *v306;
  uint64_t v307;
  llvm::BasicBlock *v308;
  uint64_t *v309;
  unsigned __int8 *v310;
  uint64_t v311;
  unsigned __int8 *v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  char *v321;
  uint64_t *v322;
  _QWORD *v323;
  unsigned int v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  llvm::BasicBlock *v332;
  unsigned __int8 *v333;
  uint64_t v334;
  unsigned __int8 *v335;
  uint64_t v336;
  llvm::BasicBlock *v337;
  uint64_t *v338;
  unsigned __int8 *v339;
  unsigned __int8 *v340;
  uint64_t v341;
  unsigned __int8 *v342;
  uint64_t v343;
  _QWORD ***v344;
  char *v345;
  unsigned __int8 **v346;
  unsigned __int8 **v347;
  unsigned __int8 **v348;
  uint64_t v349;
  uint64_t v350;
  int v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  char *v355;
  uint64_t *v356;
  int v357;
  uint64_t v358;
  uint64_t v359;
  _QWORD *v360;
  char *v361;
  char *v362;
  unsigned __int8 **v363;
  int v364;
  unsigned __int8 *v365;
  unsigned __int8 *v366;
  unsigned __int8 *v367;
  _QWORD *v368;
  int *v369;
  uint64_t *v370;
  char *v371;
  char v372;
  _QWORD *v373;
  _QWORD *v374;
  _QWORD *v375;
  uint64_t v376;
  int v377;
  _QWORD *v378;
  uint64_t v379;
  unsigned __int8 *Select;
  uint64_t *v381;
  _QWORD *v382;
  uint64_t v383;
  char *v384;
  char v385;
  char v386;
  llvm::BasicBlock *v387;
  llvm::BasicBlock *v388;
  llvm::BlockAddress **v389;
  uint64_t v390;
  uint64_t v391;
  _QWORD *v392;
  char *v393;
  char *v394;
  uint64_t v395;
  int v396;
  _BYTE v397[128];
  char *v398;
  char *v399;
  uint64_t v400;
  int v401;
  uint64_t v402;
  _QWORD *v403;
  _BYTE *v404;
  void *v405;
  uint64_t v406;
  int v407;
  _BYTE v408[256];
  _QWORD v409[4];
  __int16 v410;
  void *v411;
  uint64_t v412;
  _QWORD v413[2];
  __int16 v414;
  void *v415[2];
  uint64_t v416;
  int v417;
  _BYTE v418[64];
  void *v419;
  void *v420;
  uint64_t v421;
  int v422;
  _WORD v423[8];
  llvm::BasicBlock *v424;
  _QWORD **v425;
  uint64_t *v426;
  void **v427;
  _QWORD *v428;
  uint64_t v429;
  int v430;
  __int16 v431;
  char v432;
  uint64_t v433;
  uint64_t v434;
  void *v435;
  _QWORD v436[4];
  llvm::BasicBlock *v437[89];
  void *v438;
  uint64_t v439;
  _BYTE v440[80];
  uint64_t v441;
  _QWORD *v442;
  unsigned int v443;
  void *v444;
  uint64_t v445;
  _QWORD v446[34];

  v446[32] = *MEMORY[0x1E0C80C00];
  v4 = **(void ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::PostDominatorTreeWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::PostDominatorTreeWrapperPass::ID);
  v7 = **(char ****)(a1 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != llvm::LoopInfoWrapperPass::ID);
  v9 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::LoopInfoWrapperPass::ID);
  v10 = **(void ****)(a1 + 8);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != &llvm::FunctionGroupInfoWrapperPass::ID);
  v12 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), &llvm::FunctionGroupInfoWrapperPass::ID)+ 32);
  v13 = *(_QWORD *)(a1 + 88);
  if (v13)
    v14 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 48))(v13, a2);
  else
    v14 = 0;
  v15 = *(_QWORD *)(a1 + 56);
  if (v15)
    LODWORD(v15) = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v15 + 48))(v15, a2);
  if ((v14 | v15) == 1)
  {
    v16 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 24))(v12, a2);
    if (sub_1C5EAC778(v12, v16, a2[5]) >= 4)
    {
      v17 = a2[5];
      v18 = v17 + 24;
      v19 = *(_QWORD *)(v17 + 32);
      if (v19 == v18)
        goto LABEL_30;
      v20 = 0;
      while (1)
      {
        v21 = v19 - 56;
        if (v19)
        {
          if (*(_BYTE *)(v19 - 40) == 3)
          {
            if ((*(_DWORD *)(v19 - 36) & 0x7FFFFFF) != 0)
              goto LABEL_24;
            goto LABEL_26;
          }
        }
        else
        {
          v21 = 0;
        }
        if (*(_BYTE *)(v21 + 16) || *(_QWORD *)(v21 + 72) != v21 + 72 || (*(_BYTE *)(v21 + 34) & 0x80) != 0)
        {
LABEL_24:
          if ((*(_WORD *)(v21 + 18) & 0x3FF0) != 0x640)
            ++v20;
        }
LABEL_26:
        v19 = *(_QWORD *)(v19 + 8);
        if (v19 == v18)
        {
          if (v20 > 1)
            return 0;
LABEL_30:
          v404 = v408;
          v405 = v408;
          v406 = 32;
          v407 = 0;
          v24 = v446;
          v444 = v446;
          v445 = 0x2000000000;
          v25 = (uint64_t)(a2 + 9);
          v26 = (uint64_t *)a2[10];
          if (v26 == a2 + 9)
            goto LABEL_568;
          v385 = v14;
          v27 = 0;
          v390 = v6 + 32;
          do
          {
            if (v26)
              v28 = v26 - 3;
            else
              v28 = 0;
            if (v27 >= HIDWORD(v445))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v444, (uint64_t)v446, v27 + 1, 8);
              v27 = v445;
            }
            *((_QWORD *)v444 + v27) = v28;
            v27 = v445 + 1;
            LODWORD(v445) = v445 + 1;
            v26 = (uint64_t *)v26[1];
          }
          while (v26 != (uint64_t *)v25);
          if (!v27)
            goto LABEL_568;
          v386 = 0;
          v29 = (uint64_t *)v444;
          v30 = (uint64_t *)((char *)v444 + 8 * v27);
          v31 = (char *)&v402;
          while (1)
          {
            v32 = *v29;
            v33 = sub_1C477672C((uint64_t)&v404, *v29);
            v35 = v405 == v404 ? (uint64_t *)((char *)&v406 + 4) : &v406;
            if (v33 == (_QWORD *)((char *)v405 + 8 * *(unsigned int *)v35))
            {
              v36 = *(_QWORD *)(v32 + 40);
              if (v36 != v32 + 40)
              {
                v37 = v36 ? v36 - 24 : 0;
                v38 = *(unsigned __int8 *)(v37 + 16) - 40;
                v39 = v38 >= 0xFFFFFFF5 ? v37 : 0;
                if (v36)
                {
                  if (*(_BYTE *)(v39 + 16) == 31 && v38 >= 0xFFFFFFF5)
                  {
                    v41 = *(_DWORD *)(v39 + 20);
                    if ((v41 & 0x7FFFFFEu) >= 6)
                      break;
                  }
                }
              }
            }
LABEL_58:
            if (++v29 == v30)
            {
              if ((v386 & 1) != 0)
              {
                llvm::removeUnreachableBlocks((llvm *)a2, 0, 0, v34);
                v22 = 1;
LABEL_569:
                if (v444 != v24)
                  free(v444);
                if (v405 != v404)
                  free(v405);
                return v22;
              }
LABEL_568:
              v22 = 0;
              goto LABEL_569;
            }
          }
          v42 = *(_DWORD *)(v9 + 48);
          if (v42)
          {
            v43 = *(_QWORD *)(v39 + 40);
            v44 = *(_QWORD *)(v9 + 32);
            v45 = v42 - 1;
            v46 = ((v43 >> 4) ^ (v43 >> 9)) & (v42 - 1);
            v47 = *(_QWORD *)(v44 + 16 * v46);
            if (v43 != v47)
            {
              v48 = 1;
              while (v47 != -4096)
              {
                v49 = v46 + v48++;
                v46 = v49 & v45;
                v47 = *(_QWORD *)(v44 + 16 * v46);
                if (v43 == v47)
                  goto LABEL_65;
              }
              goto LABEL_66;
            }
LABEL_65:
            v374 = *(_QWORD **)(v44 + 16 * v46 + 8);
          }
          else
          {
LABEL_66:
            v374 = 0;
          }
          v403 = 0;
          if ((v41 & 0x40000000) != 0)
            v50 = *(_QWORD *)(v39 - 8);
          else
            v50 = v39 - 32 * (v41 & 0x7FFFFFF);
          v403 = *(_QWORD **)(v50 + 32);
          v398 = v31;
          v399 = v31;
          v400 = 16;
          v401 = 0;
          v441 = 1;
          for (i = 8; i != 264; i += 16)
            *(uint64_t *)((char *)&v441 + i) = -4096;
          v384 = v31;
          v52 = *(unsigned __int8 *)(v39 + 16);
          v381 = v30;
          v382 = v24;
          if (v52 != 30)
            __asm { BR              X9 }
          if ((*(_DWORD *)(v39 + 20) & 0x7FFFFFF) == 3)
            v53 = 2;
          else
            v53 = 1;
          for (j = 0; j != v53; ++j)
          {
            v437[0] = 0;
            v437[0] = (llvm::BasicBlock *)llvm::Instruction::getSuccessor((llvm::Instruction *)v39, j);
            if (llvm::BasicBlock::getFirstNonPHIOrDbg(v437[0], 1)[16] != 35)
            {
              v55 = v437[0];
              sub_1C6280CD8(&v441, v437)[1] = v55;
            }
          }
          v383 = v9;
          v56 = *((_QWORD *)sub_1C6280C00((int *)&v441) + 1);
          v403 = (_QWORD *)v56;
          v57 = sub_1C6280C00((int *)&v441);
          v59 = &v442;
          if ((v441 & 1) == 0)
            v59 = v442;
          v60 = v443;
          if ((v441 & 1) != 0)
            v60 = 16;
          v61 = (int *)&v59[2 * v60];
          if (v61 != v57)
          {
            v62 = v57;
            v63 = v58;
            while (1)
            {
              NearestCommonDominator = llvm::DominatorTreeBase<llvm::BasicBlock,true>::findNearestCommonDominator(v390, v56, *((_QWORD *)v62 + 1));
              v403 = (_QWORD *)NearestCommonDominator;
              if (!NearestCommonDominator)
                break;
              v56 = NearestCommonDominator;
              while (1)
              {
                v62 += 4;
                if (v62 == v63)
                  break;
                if ((*(_QWORD *)v62 | 0x1000) != 0xFFFFFFFFFFFFF000)
                  goto LABEL_94;
              }
              v62 = v63;
LABEL_94:
              if (v62 == v61)
                goto LABEL_95;
            }
            v24 = v382;
            v9 = v383;
            v30 = v381;
            v31 = v384;
            goto LABEL_191;
          }
LABEL_95:
          v31 = v384;
          if (v56)
          {
            v9 = v383;
            if (sub_1C56346C4(v56, v374, *(_QWORD *)(v383 + 32), *(_DWORD *)(v383 + 48)))
            {
              v370 = a2;
              v438 = v440;
              v439 = 0xA00000000;
              v65 = 1;
              v437[0] = (llvm::BasicBlock *)1;
              do
              {
                v437[v65] = (llvm::BasicBlock *)-4096;
                v65 += 11;
              }
              while (v65 != 89);
              v393 = v397;
              v394 = v397;
              v395 = 16;
              v396 = 0;
              v66 = sub_1C6280C00((int *)&v441);
              v68 = &v442;
              if ((v441 & 1) == 0)
                v68 = v442;
              v69 = v443;
              if ((v441 & 1) != 0)
                v69 = 16;
              v70 = (int *)&v68[2 * v69];
              if (v70 == v66)
              {
                v372 = 1;
              }
              else
              {
                v71 = v66;
                v72 = v67;
                v372 = 1;
                v369 = (int *)&v68[2 * v69];
                do
                {
                  *(_OWORD *)v415 = *(_OWORD *)v71;
                  v411 = v415[1];
                  if (v415[1] == v403)
                  {
                    if ((v385 & 1) == 0)
                      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v393, (uint64_t)v415[1]);
                    goto LABEL_108;
                  }
                  v419 = v423;
                  v420 = v423;
                  v421 = 16;
                  v422 = 0;
                  v371 = (char *)v415[1];
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v419, (uint64_t)v415[1]);
                  v73 = v439;
                  if (v439 >= (unint64_t)HIDWORD(v439))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v438, (uint64_t)v440, v439 + 1, 8);
                    v73 = v439;
                  }
                  *((_QWORD *)v438 + v73) = v371;
                  LODWORD(v439) = v439 + 1;
                  v74 = sub_1C6280F70(v437, (uint64_t *)&v411);
                  v75 = v74;
                  v76 = *((unsigned int *)v74 + 4);
                  if (v76 >= *((unsigned int *)v74 + 5))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v74 + 1), (uint64_t)(v74 + 3), v76 + 1, 8);
                    v76 = *((unsigned int *)v75 + 4);
                  }
                  *(_QWORD *)(v75[1] + 8 * v76) = v371;
                  ++*((_DWORD *)v75 + 4);
                  while ((_DWORD)v439)
                  {
                    v77 = *((_QWORD *)v438 + v439 - 1);
                    LODWORD(v439) = v439 - 1;
                    v78 = (char *)sub_1C477672C((uint64_t)&v398, v77);
                    if (v399 == v398)
                      v79 = (uint64_t *)((char *)&v400 + 4);
                    else
                      v79 = &v400;
                    if (v78 != &v399[8 * *(unsigned int *)v79])
                      goto LABEL_165;
                    result = sub_1C56346C4(v77, v374, *(_QWORD *)(v383 + 32), *(_DWORD *)(v383 + 48));
                    if (!result)
                      goto LABEL_165;
                    v80 = *(_QWORD *)(v77 + 40);
                    if (v80 != v77 + 40)
                    {
                      v81 = (llvm::Instruction *)(v80 - 24);
                      if (v80)
                        v82 = v80 - 24;
                      else
                        v82 = 0;
                      if (*(_BYTE *)(v82 + 16) != 30)
                      {
                        v377 = 2;
                        switch(*(_BYTE *)(v82 + 16))
                        {
                          case 0x1E:
                            __break(1u);
                            return result;
                          case 0x1F:
                            v91 = (*(_DWORD *)(v82 + 20) >> 1) & 0x3FFFFFF;
                            goto LABEL_146;
                          case 0x20:
                          case 0x26:
                            v91 = (*(_DWORD *)(v82 + 20) & 0x7FFFFFF) - 1;
                            goto LABEL_146;
                          case 0x21:
                            goto LABEL_134;
                          case 0x24:
                            v91 = *(_WORD *)(v82 + 18) & 1;
                            goto LABEL_146;
                          case 0x25:
                            v83 = 1;
                            goto LABEL_133;
                          case 0x27:
                            v91 = *(_DWORD *)(v82 + 80) + 1;
LABEL_146:
                            v377 = v91;
                            if (!v91)
                              continue;
                            goto LABEL_134;
                          default:
                            continue;
                        }
                      }
                      if ((*(_DWORD *)(v82 + 20) & 0x7FFFFFF) == 3)
                        v83 = 2;
                      else
                        v83 = 1;
LABEL_133:
                      v377 = v83;
LABEL_134:
                      v84 = 0;
                      do
                      {
                        Successor = llvm::Instruction::getSuccessor(v81, v84);
                        if ((_QWORD *)Successor != v403)
                        {
                          v86 = Successor;
                          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v419, Successor);
                          if (v87)
                          {
                            v88 = v439;
                            if (v439 >= (unint64_t)HIDWORD(v439))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v438, (uint64_t)v440, v439 + 1, 8);
                              v88 = v439;
                            }
                            *((_QWORD *)v438 + v88) = v86;
                            LODWORD(v439) = v439 + 1;
                            v89 = sub_1C6280F70(v437, (uint64_t *)&v415[1]);
                            v90 = *((unsigned int *)v89 + 4);
                            if (v90 >= *((unsigned int *)v89 + 5))
                            {
                              v368 = v89;
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v89 + 1), (uint64_t)(v89 + 3), v90 + 1, 8);
                              v89 = v368;
                              v90 = *((unsigned int *)v368 + 4);
                            }
                            *(_QWORD *)(v89[1] + 8 * v90) = v86;
                            ++*((_DWORD *)v89 + 4);
                          }
                        }
                        ++v84;
                      }
                      while (v377 != v84);
                    }
                  }
                  if ((v372 & 1) == 0)
                  {
LABEL_165:
                    v372 = 0;
                    v97 = 10;
                    goto LABEL_182;
                  }
                  LODWORD(v439) = 0;
                  v70 = v369;
                  if ((v385 & 1) == 0)
                  {
                    v92 = (uint64_t *)(v371 + 40);
                    v93 = -1;
                    v94 = (uint64_t *)(v371 + 40);
                    do
                    {
                      v94 = (uint64_t *)v94[1];
                      ++v93;
                    }
                    while (v94 != v92);
                    if (v93 <= 0x1D)
                    {
                      v95 = *v92;
                      if (v95)
                        v96 = v95 - 24;
                      else
                        v96 = 0;
                      if (*(unsigned __int8 *)(v96 + 16) - 29 >= 0xB)
                        v96 = 0;
                      if (*(_BYTE *)(v96 + 16) == 30 && (*(_DWORD *)(v96 + 20) & 0x7FFFFFF) == 1)
                      {
                        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v393, (uint64_t)v371);
                        v97 = 11;
                        v372 = 1;
                        goto LABEL_183;
                      }
                    }
                  }
                  v98 = v420 == v419 ? (uint64_t *)((char *)&v421 + 4) : &v421;
                  v99 = *(unsigned int *)v98;
                  if ((_DWORD)v99)
                  {
                    v100 = 8 * v99;
                    v101 = (uint64_t *)v420;
                    while ((unint64_t)*v101 >= 0xFFFFFFFFFFFFFFFELL)
                    {
                      ++v101;
                      v100 -= 8;
                      if (!v100)
                        goto LABEL_181;
                    }
                  }
                  else
                  {
                    v101 = (uint64_t *)v420;
                  }
                  v102 = (unint64_t *)((char *)v420 + 8 * v99);
                  if (v101 != (uint64_t *)v102)
                  {
                    v103 = *v101;
LABEL_177:
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v398, v103);
                    v104 = (unint64_t *)(v101 + 1);
                    while (v104 != v102)
                    {
                      v105 = *v104++;
                      v103 = v105;
                      if (v105 <= 0xFFFFFFFFFFFFFFFDLL)
                      {
                        v101 = (uint64_t *)(v104 - 1);
                        goto LABEL_177;
                      }
                    }
                  }
LABEL_181:
                  v97 = 0;
                  v372 = 1;
LABEL_182:
                  v70 = v369;
LABEL_183:
                  if (v420 != v419)
                    free(v420);
                  if (v97 != 11 && v97)
                    break;
LABEL_108:
                  while (1)
                  {
                    v71 += 4;
                    if (v71 == v72)
                      break;
                    if ((*(_QWORD *)v71 | 0x1000) != 0xFFFFFFFFFFFFF000)
                      goto LABEL_112;
                  }
                  v71 = v72;
LABEL_112:
                  ;
                }
                while (v71 != v70);
              }
              v107 = v398;
              v106 = v399;
              v108 = HIDWORD(v400);
              v109 = v400;
              if (v399 == v398)
                v110 = HIDWORD(v400);
              else
                v110 = v400;
              v111 = v399;
              a2 = v370;
              v9 = v383;
              if ((_DWORD)v110)
              {
                v112 = 0;
                while (*(_QWORD *)&v399[v112] >= 0xFFFFFFFFFFFFFFFELL)
                {
                  v112 += 8;
                  if (8 * v110 == v112)
                    goto LABEL_236;
                }
                v111 = &v399[v112];
              }
              v113 = &v399[8 * v110];
              if (v111 != v113)
              {
                v114 = *(_QWORD *)v111;
                while (1)
                {
                  v115 = *(_QWORD *)(v114 + 8);
                  if (v115)
                  {
                    while (1)
                    {
                      v116 = *(_QWORD *)(v115 + 24);
                      v117 = *(unsigned __int8 *)(v116 + 16);
                      v118 = v116 && v117 >= 0x1C;
                      if (v118 && v117 - 29 <= 0xA)
                        break;
                      v115 = *(_QWORD *)(v115 + 8);
                      if (!v115)
                        goto LABEL_217;
                    }
LABEL_230:
                    v125 = (char *)sub_1C477672C((uint64_t)&v398, *(_QWORD *)(v116 + 40));
                    v107 = v398;
                    v106 = v399;
                    v108 = HIDWORD(v400);
                    v109 = v400;
                    if (v399 == v398)
                      v126 = HIDWORD(v400);
                    else
                      v126 = v400;
                    if (v125 == &v399[8 * v126] && *(_QWORD *)(*(_QWORD *)(v115 + 24) + 40) != v32)
                      goto LABEL_544;
                    while (1)
                    {
                      v115 = *(_QWORD *)(v115 + 8);
                      if (!v115)
                        break;
                      v116 = *(_QWORD *)(v115 + 24);
                      v122 = *(unsigned __int8 *)(v116 + 16);
                      if (v116)
                        v123 = v122 >= 0x1C;
                      else
                        v123 = 0;
                      if (v123 && v122 - 29 < 0xB)
                        goto LABEL_230;
                    }
                  }
LABEL_217:
                  if ((v372 & 1) == 0)
                    goto LABEL_544;
                  v120 = (unint64_t *)(v111 + 8);
                  v31 = v384;
                  do
                  {
                    if (v120 == (unint64_t *)v113)
                      goto LABEL_237;
                    v121 = *v120++;
                    v114 = v121;
                  }
                  while (v121 > 0xFFFFFFFFFFFFFFFDLL);
                  v111 = (char *)(v120 - 1);
                }
              }
LABEL_236:
              v31 = v384;
LABEL_237:
              v30 = v381;
              v24 = v382;
              if ((v372 & 1) == 0)
                goto LABEL_545;
              if ((HIDWORD(v395) - v396) > 2 || HIDWORD(v395) - v396 >= v441 >> 2)
                goto LABEL_545;
              if (v106 == v107)
                v128 = v108;
              else
                v128 = v109;
              v129 = (uint64_t *)v106;
              if ((_DWORD)v128)
              {
                v130 = 8 * v128;
                v129 = (uint64_t *)v106;
                while ((unint64_t)*v129 >= 0xFFFFFFFFFFFFFFFELL)
                {
                  ++v129;
                  v130 -= 8;
                  if (!v130)
                    goto LABEL_256;
                }
              }
              v131 = &v106[8 * v128];
              if (v129 != (uint64_t *)v131)
              {
                v132 = *v129;
LABEL_252:
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v404, v132);
                v133 = (unint64_t *)(v129 + 1);
                while (v133 != (unint64_t *)v131)
                {
                  v134 = *v133++;
                  v132 = v134;
                  if (v134 <= 0xFFFFFFFFFFFFFFFDLL)
                  {
                    v129 = (uint64_t *)(v133 - 1);
                    goto LABEL_252;
                  }
                }
              }
LABEL_256:
              for (k = v403[1]; k; k = *(_QWORD *)(k + 8))
              {
                v136 = *(_QWORD *)(k + 24);
                v137 = *(unsigned __int8 *)(v136 + 16);
                if (v136)
                  v138 = v137 >= 0x1C;
                else
                  v138 = 0;
                if (v138 && v137 - 29 < 0xB)
                  break;
              }
              do
              {
                if (!k)
                {
                  sub_1C5634748(&v441, &v403);
                  v392 = v403;
                  goto LABEL_364;
                }
                v140 = (char *)sub_1C477672C((uint64_t)&v398, *(_QWORD *)(*(_QWORD *)(k + 24) + 40));
                if (v399 == v398)
                  v141 = (uint64_t *)((char *)&v400 + 4);
                else
                  v141 = &v400;
                v142 = v140 == &v399[8 * *(unsigned int *)v141] && *(_QWORD *)(*(_QWORD *)(k + 24) + 40) != v32;
                do
                {
                  k = *(_QWORD *)(k + 8);
                  if (!k)
                    break;
                  v143 = *(_QWORD *)(k + 24);
                  v144 = *(unsigned __int8 *)(v143 + 16);
                  v145 = v143 && v144 >= 0x1C;
                }
                while (!v145 || v144 - 29 > 0xA);
              }
              while (!v142);
              sub_1C5634748(&v441, &v403);
              v147 = v403;
              v392 = v403;
              v148 = *(_QWORD **)*v370;
              v419 = "switch_pdom";
              v423[0] = 259;
              v149 = operator new();
              *(_QWORD *)v149 = *v148 + 1600;
              *(_QWORD *)(v149 + 8) = 0;
              v150 = *(_DWORD *)(v149 + 20) & 0xC0000000;
              *(_DWORD *)(v149 + 16) = 22;
              *(_DWORD *)(v149 + 20) = v150;
              *(_QWORD *)(v149 + 24) = 0;
              v151 = (_QWORD *)(v149 + 24);
              *(_QWORD *)(v149 + 32) = 0;
              *(_QWORD *)(v149 + 40) = v149 + 40;
              v375 = (_QWORD *)(v149 + 40);
              *(_QWORD *)(v149 + 48) = v149 + 40;
              *(_QWORD *)(v149 + 56) = 0;
              if (v147)
                v152 = v147 + 3;
              else
                v152 = (uint64_t *)v25;
              llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v25, (_QWORD *)v149);
              v153 = *v152;
              *(_QWORD *)(v149 + 32) = v152;
              *v151 = v153;
              *(_QWORD *)(v153 + 8) = v151;
              *v152 = (uint64_t)v151;
              v387 = (llvm::BasicBlock *)v149;
              llvm::Value::setName((uint64_t ***)v149, (uint64_t)&v419);
              v154 = 0;
              if (v403[1])
              {
                v154 = v403[1];
                do
                {
                  v155 = *(_QWORD *)(v154 + 24);
                  v156 = *(unsigned __int8 *)(v155 + 16);
                  if (v155)
                    v157 = v156 >= 0x1C;
                  else
                    v157 = 0;
                  if (v157 && v156 - 29 < 0xB)
                    break;
                  v154 = *(_QWORD *)(v154 + 8);
                }
                while (v154);
              }
              v415[0] = &v416;
              v415[1] = (void *)0x800000000;
              sub_1C4DBBCC0((unsigned int *)v415, v154, 0);
              if (LODWORD(v415[1]))
              {
                v181 = (uint64_t *)v415[0];
                v182 = (uint64_t *)((char *)v415[0] + 8 * LODWORD(v415[1]));
                do
                {
                  v183 = *v181;
                  v184 = (char *)sub_1C477672C((uint64_t)&v398, *v181);
                  if (v399 == v398)
                    v185 = (uint64_t *)((char *)&v400 + 4);
                  else
                    v185 = &v400;
                  if (v184 != &v399[8 * *(unsigned int *)v185])
                  {
                    v186 = *(_QWORD *)(v183 + 40);
                    if (v186 == v183 + 40)
                    {
                      v188 = 0;
                    }
                    else
                    {
                      if (v186)
                        v187 = v186 - 24;
                      else
                        v187 = 0;
                      if (*(unsigned __int8 *)(v187 + 16) - 29 >= 0xB)
                        v188 = 0;
                      else
                        v188 = v187;
                    }
                    v189 = *(unsigned __int8 *)(v188 + 16);
                    if (v189 != 30)
                      __asm { BR              X9 }
                    if ((*(_DWORD *)(v188 + 20) & 0x7FFFFFF) == 3)
                      v190 = 2;
                    else
                      v190 = 1;
                    for (m = 0; m != v190; ++m)
                    {
                      v192 = llvm::Instruction::getSuccessor((llvm::Instruction *)v188, m);
                      if ((_QWORD *)v192 == v403)
                        llvm::Instruction::setSuccessor((llvm::Instruction *)v188, m, v387);
                    }
                  }
                  ++v181;
                }
                while (v181 != v182);
              }
              v159 = (uint64_t)v403;
              v160 = (_QWORD *)v403[6];
              v373 = v403 + 5;
              if (v160 != v403 + 5)
              {
                do
                {
                  if (v160)
                    v161 = v160 - 3;
                  else
                    v161 = 0;
                  if (*((_BYTE *)v161 + 16) != 83)
                    break;
                  v378 = v160;
                  llvm::Instruction::clone((llvm::Instruction *)v161);
                  v163 = v162;
                  *(_QWORD *)(v162 + 40) = v387;
                  *((_WORD *)v387 + 9) &= ~0x8000u;
                  if ((*(_BYTE *)(v162 + 23) & 0x10) != 0)
                  {
                    v179 = *((_QWORD *)v387 + 7);
                    if (v179)
                    {
                      v180 = *(llvm::ValueSymbolTable **)(v179 + 104);
                      if (v180)
                        llvm::ValueSymbolTable::reinsertValue(v180, (llvm::Value *)v163);
                    }
                  }
                  v164 = (_QWORD *)*v375;
                  *(_QWORD *)(v163 + 24) = *v375;
                  *(_QWORD *)(v163 + 32) = v375;
                  v164[1] = v163 + 24;
                  *v375 = v163 + 24;
                  v165 = *(_DWORD *)(v163 + 20) & 0x7FFFFFF;
                  if (v165)
                  {
                    for (n = 0; n != v165; ++n)
                    {
                      v167 = *(_DWORD *)(v163 + 20);
                      if ((v167 & 0x40000000) != 0)
                        v168 = *(_QWORD *)(v163 - 8);
                      else
                        v168 = v163 - 32 * (v167 & 0x7FFFFFF);
                      v169 = *(_QWORD *)(v168 + 32 * *(unsigned int *)(v163 + 60) + 8 * n);
                      v170 = (char *)sub_1C477672C((uint64_t)&v398, v169);
                      if (v399 == v398)
                        v171 = (uint64_t *)((char *)&v400 + 4);
                      else
                        v171 = &v400;
                      if (v169 != v32 && v170 == &v399[8 * *(unsigned int *)v171])
                      {
                        llvm::PHINode::removeIncomingValue((llvm::PHINode *)v163, n, 1);
                        --v165;
                        --n;
                      }
                    }
                  }
                  v173 = *((_DWORD *)v161 + 5) & 0x7FFFFFF;
                  if (v173)
                  {
                    for (ii = 0; ii != v173; ++ii)
                    {
                      v175 = *((_DWORD *)v161 + 5);
                      if ((v175 & 0x40000000) != 0)
                        v176 = (_QWORD *)*(v161 - 1);
                      else
                        v176 = &v161[-4 * (v175 & 0x7FFFFFF)];
                      v177 = (char *)sub_1C477672C((uint64_t)&v398, v176[4 * *((unsigned int *)v161 + 15) + ii]);
                      if (v399 == v398)
                        v178 = (uint64_t *)((char *)&v400 + 4);
                      else
                        v178 = &v400;
                      if (v177 != &v399[8 * *(unsigned int *)v178])
                      {
                        llvm::PHINode::removeIncomingValue((llvm::PHINode *)v161, ii, 1);
                        --v173;
                        --ii;
                      }
                    }
                  }
                  sub_1C477667C((llvm::PHINode *)v161, v163, (uint64_t)v387);
                  v160 = (_QWORD *)v378[1];
                }
                while (v160 != v373);
                v159 = (uint64_t)v403;
              }
              v193 = **(uint64_t ***)v387;
              v419 = &v421;
              v420 = (void *)0x200000000;
              v426 = v193;
              v427 = &v435;
              v428 = v436;
              v429 = 0;
              v430 = 0;
              v431 = 512;
              v432 = 7;
              v433 = 0;
              v434 = 0;
              v435 = &unk_1E8167888;
              v436[0] = &unk_1E8167A08;
              v424 = v387;
              v425 = (_QWORD **)v375;
              sub_1C4867DC8((uint64_t *)&v419, v159);
              v403 = v387;
              if (v419 != &v421)
                free(v419);
              if (v415[0] != &v416)
                free(v415[0]);
LABEL_364:
              v415[0] = v418;
              v415[1] = v418;
              v416 = 8;
              v417 = 0;
              v194 = ((unint64_t)*(unsigned int *)(v39 + 20) >> 1) & 0x3FFFFFF;
              if (!(_DWORD)v194)
              {
LABEL_365:
                v195 = *(_DWORD *)(v39 + 20);
                if ((v195 & 0x40000000) != 0)
                  v196 = *(_QWORD *)(v39 - 8);
                else
                  v196 = v39 - 32 * (v195 & 0x7FFFFFF);
                v231 = sub_1C6280C78((uint64_t)&v441, *(_QWORD *)(v196 + 32));
                v232 = &v442;
                if ((v441 & 1) == 0)
                  v232 = v442;
                v233 = v443;
                if ((v441 & 1) != 0)
                  v233 = 16;
                if (&v232[2 * v233] == (_QWORD *)v231)
                {
                  v234 = HIDWORD(v395);
                  goto LABEL_425;
                }
                v235 = v231;
                v236 = (char *)sub_1C477672C((uint64_t)&v393, *(_QWORD *)(v231 + 8));
                v234 = HIDWORD(v395);
                if (v394 == v393)
                  v237 = HIDWORD(v395);
                else
                  v237 = v395;
                if (v236 == &v394[8 * v237])
                {
                  v238 = *(llvm::BlockAddress ***)(v235 + 8);
                  v411 = v413;
                  v412 = 0xA00000000;
                  v389 = v238;
                  if (v238)
                  {
                    v413[0] = v238;
                    LODWORD(v412) = 1;
                  }
                  else
                  {
                    v389 = 0;
                  }
                }
                else
                {
LABEL_425:
                  v389 = 0;
                  v411 = v413;
                  v412 = 0xA00000000;
                }
                if (v234 == v396)
                {
                  v239 = *(uint64_t ****)(v39 + 40);
                }
                else
                {
                  v240 = *(_QWORD **)*v370;
                  v419 = "indirectbr_bb";
                  v423[0] = 259;
                  v241 = *(_QWORD *)(v39 + 40);
                  if (v241)
                    v242 = v241 + 24;
                  else
                    v242 = 0;
                  v243 = *(_QWORD *)(v242 + 8);
                  v244 = operator new();
                  v239 = (uint64_t ***)v244;
                  if (v243)
                    v245 = v243 - 24;
                  else
                    v245 = 0;
                  *(_QWORD *)v244 = *v240 + 1600;
                  *(_QWORD *)(v244 + 8) = 0;
                  v246 = *(_DWORD *)(v244 + 20) & 0xC0000000;
                  *(_DWORD *)(v244 + 16) = 22;
                  *(_DWORD *)(v244 + 20) = v246;
                  *(_QWORD *)(v244 + 24) = 0;
                  v247 = (uint64_t *)(v244 + 24);
                  *(_QWORD *)(v244 + 32) = 0;
                  *(_QWORD *)(v244 + 40) = v244 + 40;
                  *(_QWORD *)(v244 + 48) = v244 + 40;
                  *(_QWORD *)(v244 + 56) = 0;
                  v248 = (uint64_t **)(v245 + 24);
                  if (v243)
                    v249 = v248;
                  else
                    v249 = (uint64_t **)v25;
                  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v25, (_QWORD *)v244);
                  v250 = *v249;
                  v239[4] = v249;
                  *v247 = (uint64_t)v250;
                  v250[1] = (uint64_t)v247;
                  *v249 = v247;
                  llvm::Value::setName(v239, (uint64_t)&v419);
                }
                v251 = **v239;
                v419 = &v421;
                v420 = (void *)0x200000000;
                v426 = v251;
                v427 = &v435;
                v428 = v436;
                v429 = 0;
                v430 = 0;
                v431 = 512;
                v432 = 7;
                v433 = 0;
                v434 = 0;
                v435 = &unk_1E8167888;
                v436[0] = &unk_1E8167A08;
                v376 = (uint64_t)v239;
                v424 = (llvm::BasicBlock *)v239;
                v425 = v239 + 5;
                v252 = *(_DWORD *)(v39 + 20);
                v253 = (v252 >> 1) & 0x3FFFFFF;
                v254 = (v253 - 1);
                if (v253 == 1)
                  goto LABEL_451;
                v255 = 0;
                v256 = 0;
                v257 = 2 * v254;
                do
                {
                  v258 = v39 - 32 * (v252 & 0x7FFFFFF);
                  if ((v252 & 0x40000000) != 0)
                    v258 = *(_QWORD *)(v39 - 8);
                  v259 = *(_QWORD *)(v258 + 32 * (((_DWORD)v255 + 2) & 0xFFFFFFFE));
                  v260 = *(_DWORD *)(v259 + 32);
                  if (v260 > 0x40)
                    v261 = **(_QWORD **)(v259 + 24);
                  else
                    v261 = (uint64_t)(*(_QWORD *)(v259 + 24) << -(char)v260) >> -(char)v260;
                  if (v261 < 0)
                    v261 = -v261;
                  if (v261 > v256)
                    v256 = v261;
                  v255 += 2;
                }
                while (v257 != v255);
                if (v256 >> 24)
                {
                  v314 = 0;
                  Select = 0;
                  do
                  {
                    v315 = *(_DWORD *)(v39 + 20);
                    if ((v315 & 0x40000000) != 0)
                      v316 = *(_QWORD *)(v39 - 8);
                    else
                      v316 = v39 - 32 * (v315 & 0x7FFFFFF);
                    v317 = *(_QWORD *)(v316 + 32 * (((_DWORD)v314 + 2) & 0xFFFFFFFE));
                    v318 = (v314 + 3);
                    if (v314 == 0x1FFFFFFFCLL)
                      v318 = 1;
                    v319 = *(_QWORD *)(v316 + 32 * v318);
                    v320 = sub_1C6280C78((uint64_t)&v441, v319);
                    v321 = (char *)sub_1C477672C((uint64_t)&v393, v319);
                    if (v394 == v393)
                      v322 = (uint64_t *)((char *)&v395 + 4);
                    else
                      v322 = &v395;
                    if (v321 == &v394[8 * *(unsigned int *)v322])
                    {
                      v323 = &v442;
                      if ((v441 & 1) == 0)
                        v323 = v442;
                      v324 = v443;
                      if ((v441 & 1) != 0)
                        v324 = 16;
                      if (&v323[2 * v324] != (_QWORD *)v320)
                      {
                        v325 = *(_QWORD *)(v320 + 8);
                        v326 = v412;
                        if (v412 >= (unint64_t)HIDWORD(v412))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v411, (uint64_t)v413, v412 + 1, 8);
                          v326 = v412;
                        }
                        *((_QWORD *)v411 + v326) = v325;
                        v327 = (v412 + 1);
                        LODWORD(v412) = v412 + 1;
                        if (v389)
                        {
                          v328 = *(_DWORD *)(v39 + 20);
                          if ((v328 & 0x40000000) != 0)
                            v329 = *(uint64_t **)(v39 - 8);
                          else
                            v329 = (uint64_t *)(v39 - 32 * (v328 & 0x7FFFFFF));
                          v330 = *v329;
                          v409[0] = "sw_cond";
                          v410 = 259;
                          v331 = sub_1C4774B48((uint64_t)&v419, 32, v330, v317, (uint64_t)v409);
                          v333 = (unsigned __int8 *)llvm::BlockAddress::get(*(llvm::BlockAddress **)(*(_QWORD *)(v320 + 8) + 56), *(llvm::Function **)(v320 + 8), v332);
                          v334 = *v426 + 1984;
                          v409[0] = "ptr_cast";
                          v410 = 259;
                          v335 = sub_1C4773E38((uint64_t *)&v419, 47, v333, v334, (uint64_t)v409);
                          v336 = *v426 + 1960;
                          v409[0] = "ptr_trunc";
                          v410 = 259;
                          v338 = (uint64_t *)sub_1C4773E38((uint64_t *)&v419, 38, v335, v336, (uint64_t)v409);
                          v339 = Select;
                          if (!Select)
                          {
                            v340 = (unsigned __int8 *)llvm::BlockAddress::get(v389[7], (llvm::Function *)v389, v337);
                            v341 = *v426 + 1984;
                            v409[0] = "ptr_cast";
                            v410 = 259;
                            v342 = sub_1C4773E38((uint64_t *)&v419, 47, v340, v341, (uint64_t)v409);
                            v343 = *v426 + 1960;
                            v409[0] = "ptr_trunc";
                            v410 = 259;
                            v339 = sub_1C4773E38((uint64_t *)&v419, 38, v342, v343, (uint64_t)v409);
                          }
                          v410 = 257;
                          Select = (unsigned __int8 *)llvm::IRBuilderBase::CreateSelect((uint64_t *)&v419, v331, v338, (uint64_t)v339, (uint64_t)v409, 0);
                        }
                        else
                        {
                          v389 = *(llvm::BlockAddress ***)(v320 + 8);
                          if (v327 >= HIDWORD(v412))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v411, (uint64_t)v413, v327 + 1, 8);
                            LODWORD(v327) = v412;
                          }
                          *((_QWORD *)v411 + v327) = v389;
                          LODWORD(v412) = v412 + 1;
                        }
                      }
                    }
                    v314 += 2;
                  }
                  while (v257 != v314);
                }
                else
                {
LABEL_451:
                  if ((v252 & 0x40000000) != 0)
                    v262 = *(uint64_t ***)(v39 - 8);
                  else
                    v262 = (uint64_t **)(v39 - 32 * (v252 & 0x7FFFFFF));
                  v263 = *v262;
                  v264 = (uint64_t *)(*v251 + 1624);
                  v410 = 257;
                  v265 = sub_1C4773B3C((uint64_t)&v419, v263, v264, (uint64_t)v409);
                  if (((*(_DWORD *)(v39 + 20) >> 1) & 0x3FFFFFF) == 1)
                  {
                    Select = 0;
                  }
                  else
                  {
                    v281 = (uint64_t *)v265;
                    v282 = 0;
                    Select = 0;
                    v283 = 2 * (((*(_DWORD *)(v39 + 20) >> 1) & 0x3FFFFFFu) - 1);
                    do
                    {
                      v284 = *(_DWORD *)(v39 + 20);
                      if ((v284 & 0x40000000) != 0)
                        v285 = *(_QWORD *)(v39 - 8);
                      else
                        v285 = v39 - 32 * (v284 & 0x7FFFFFF);
                      v286 = *(_QWORD *)(v285 + 32 * (((_DWORD)v282 + 2) & 0xFFFFFFFE));
                      v287 = (v282 + 3);
                      if (v282 == 0x1FFFFFFFCLL)
                        v287 = 1;
                      v288 = *(_QWORD *)(v285 + 32 * v287);
                      v289 = (char *)sub_1C477672C((uint64_t)&v393, v288);
                      if (v394 == v393)
                        v290 = (uint64_t *)((char *)&v395 + 4);
                      else
                        v290 = &v395;
                      if (v289 == &v394[8 * *(unsigned int *)v290])
                      {
                        v291 = sub_1C6280C78((uint64_t)&v441, v288);
                        v293 = &v442;
                        if ((v441 & 1) == 0)
                          v293 = v442;
                        v294 = v443;
                        if ((v441 & 1) != 0)
                          v294 = 16;
                        if (&v293[2 * v294] != (_QWORD *)v291)
                        {
                          v295 = v291;
                          v296 = *(_QWORD *)(v291 + 8);
                          v297 = v412;
                          if (v412 >= (unint64_t)HIDWORD(v412))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v411, (uint64_t)v413, v412 + 1, 8);
                            v297 = v412;
                          }
                          *((_QWORD *)v411 + v297) = v296;
                          v298 = (v412 + 1);
                          LODWORD(v412) = v412 + 1;
                          if (v389)
                          {
                            v299 = *(_DWORD *)(v286 + 32);
                            if (v299 > 0x40)
                              v300 = **(_QWORD **)(v286 + 24);
                            else
                              v300 = (uint64_t)(*(_QWORD *)(v286 + 24) << -(char)v299) >> -(char)v299;
                            v301 = llvm::ConstantFP::get((llvm::ConstantFP **)(*v426 + 1624), v292, (double)v300);
                            v409[0] = "sw_cond";
                            v410 = 259;
                            FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)&v419, 1, v281, (uint64_t)v301, (uint64_t)v409, 0, 0);
                            v304 = (unsigned __int8 *)llvm::BlockAddress::get(*(llvm::BlockAddress **)(*(_QWORD *)(v295 + 8) + 56), *(llvm::Function **)(v295 + 8), v303);
                            v305 = *v426 + 1984;
                            v409[0] = "ptr_cast";
                            v410 = 259;
                            v306 = sub_1C4773E38((uint64_t *)&v419, 47, v304, v305, (uint64_t)v409);
                            v307 = *v426 + 1960;
                            v409[0] = "ptr_trunc";
                            v410 = 259;
                            v309 = (uint64_t *)sub_1C4773E38((uint64_t *)&v419, 38, v306, v307, (uint64_t)v409);
                            if (!Select)
                            {
                              v310 = (unsigned __int8 *)llvm::BlockAddress::get(v389[7], (llvm::Function *)v389, v308);
                              v311 = *v426 + 1984;
                              v409[0] = "ptr_cast";
                              v410 = 259;
                              v312 = sub_1C4773E38((uint64_t *)&v419, 47, v310, v311, (uint64_t)v409);
                              v313 = *v426 + 1960;
                              v409[0] = "ptr_trunc";
                              v410 = 259;
                              Select = sub_1C4773E38((uint64_t *)&v419, 38, v312, v313, (uint64_t)v409);
                            }
                            v410 = 257;
                            Select = (unsigned __int8 *)llvm::IRBuilderBase::CreateSelect((uint64_t *)&v419, FCmpHelper, v309, (uint64_t)Select, (uint64_t)v409, 0);
                          }
                          else
                          {
                            v389 = *(llvm::BlockAddress ***)(v295 + 8);
                            if (v298 >= HIDWORD(v412))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v411, (uint64_t)v413, v298 + 1, 8);
                              LODWORD(v298) = v412;
                            }
                            *((_QWORD *)v411 + v298) = v389;
                            LODWORD(v412) = v412 + 1;
                          }
                        }
                      }
                      v282 += 2;
                    }
                    while (v283 != v282);
                  }
                }
                v266 = *v426 + 1984;
                v410 = 257;
                v267 = sub_1C4773E38((uint64_t *)&v419, 39, Select, v266, (uint64_t)v409);
                v268 = llvm::PointerType::get((llvm::PointerType *)(*v426 + 1912), 0);
                v410 = 257;
                v269 = sub_1C4773E38((uint64_t *)&v419, 48, v267, v268, (uint64_t)v409);
                v270 = v441 >> 1;
                v271 = (char *)operator new(0x48uLL);
                v272 = (unsigned __int8 **)(v271 + 8);
                *((_DWORD *)v271 + 7) = *((_DWORD *)v271 + 7) & 0x38000000 | 0x40000000;
                *(_QWORD *)v271 = 0;
                llvm::IndirectBrInst::IndirectBrInst((llvm::IndirectBrInst *)(v271 + 8), (llvm::Value *)v269, v270, 0);
                v410 = 257;
                v273 = sub_1C5391E84((uint64_t *)&v419, v272, (uint64_t)v409);
                if ((_DWORD)v412)
                {
                  v274 = (llvm::IndirectBrInst *)v273;
                  v275 = (llvm::BasicBlock **)v411;
                  v276 = 8 * v412;
                  do
                  {
                    v277 = *v275++;
                    llvm::IndirectBrInst::addDestination(v274, v277);
                    v276 -= 8;
                  }
                  while (v276);
                }
                if (HIDWORD(v395) != v396)
                {
                  v278 = *(_QWORD *)(v39 + 40) + 40;
                  v424 = *(llvm::BasicBlock **)(v39 + 40);
                  v425 = (_QWORD **)v278;
                  v279 = *(_DWORD *)(v39 + 20);
                  v280 = (v279 & 0x40000000) != 0
                       ? *(_QWORD *****)(v39 - 8)
                       : (_QWORD ****)(v39 - 32 * (v279 & 0x7FFFFFF));
                  v344 = *v280;
                  v345 = (char *)operator new(0x48uLL);
                  *(_QWORD *)v345 = 0;
                  *((_QWORD *)v345 + 1) = ***v344 + 1576;
                  *((_QWORD *)v345 + 2) = 0;
                  v346 = (unsigned __int8 **)(v345 + 8);
                  v345[24] = 31;
                  v345[25] = 0;
                  *((_WORD *)v345 + 13) = 0;
                  *((_DWORD *)v345 + 7) = 0x40000000;
                  *((_OWORD *)v345 + 2) = 0u;
                  *((_OWORD *)v345 + 3) = 0u;
                  *((_DWORD *)v345 + 16) = 0;
                  llvm::SwitchInst::init((uint64_t)(v345 + 8), (uint64_t)v344, v376, 0x16u);
                  v410 = 257;
                  v347 = sub_1C4867F8C((uint64_t *)&v419, v346, (uint64_t)v409);
                  if (((*(_DWORD *)(v39 + 20) >> 1) & 0x3FFFFFF) != 1)
                  {
                    v348 = v347;
                    v349 = 0;
                    v350 = 2 * (((*(_DWORD *)(v39 + 20) >> 1) & 0x3FFFFFFu) - 1);
                    do
                    {
                      v351 = *(_DWORD *)(v39 + 20);
                      if ((v351 & 0x40000000) != 0)
                        v352 = *(_QWORD *)(v39 - 8);
                      else
                        v352 = v39 - 32 * (v351 & 0x7FFFFFF);
                      v353 = (v349 + 3);
                      if (v349 == 0x1FFFFFFFCLL)
                        v353 = 1;
                      v354 = 32 * v353;
                      v355 = (char *)sub_1C477672C((uint64_t)&v393, *(_QWORD *)(v352 + 32 * v353));
                      if (v394 == v393)
                        v356 = (uint64_t *)((char *)&v395 + 4);
                      else
                        v356 = &v395;
                      if (v355 != &v394[8 * *(unsigned int *)v356])
                      {
                        v357 = *(_DWORD *)(v39 + 20);
                        if ((v357 & 0x40000000) != 0)
                          v358 = *(_QWORD *)(v39 - 8);
                        else
                          v358 = v39 - 32 * (v357 & 0x7FFFFFF);
                        llvm::SwitchInst::addCase(v348, *(llvm::ConstantInt **)(v358 + 32 * (((_DWORD)v349 + 2) & 0xFFFFFFFE)), *(llvm::BasicBlock **)(v358 + v354));
                      }
                      v349 += 2;
                    }
                    while (v350 != v349);
                  }
                }
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v39 + 40) + 40, (uint64_t ***)v39);
                v359 = *(_QWORD *)(v39 + 24);
                v360 = *(_QWORD **)(v39 + 32);
                *v360 = v359;
                *(_QWORD *)(v359 + 8) = v360;
                *(_QWORD *)(v39 + 24) = 0;
                *(_QWORD *)(v39 + 32) = 0;
                llvm::Value::deleteValue((llvm::Value *)v39);
                if (v419 != &v421)
                  free(v419);
                if (v411 != v413)
                  free(v411);
                if (v415[1] != v415[0])
                  free(v415[1]);
                v386 = 1;
                a2 = v370;
                v9 = v383;
LABEL_544:
                v30 = v381;
                v24 = v382;
                v31 = v384;
LABEL_545:
                if (v394 != v393)
                  free(v394);
                sub_1C6281258((uint64_t)v437);
                if (v438 != v440)
                  free(v438);
LABEL_191:
                if ((v441 & 1) == 0)
                  MEMORY[0x1CAA32FB4](v442, 8);
                if (v399 != v398)
                  free(v399);
                goto LABEL_58;
              }
              v197 = 0;
              v198 = v194 << 6;
              while (1)
              {
                v391 = 0;
                v199 = *(_DWORD *)(v39 + 20);
                v200 = (v199 & 0x40000000) != 0 ? *(_QWORD *)(v39 - 8) : v39 - 32 * (v199 & 0x7FFFFFF);
                v201 = *(_QWORD *)(v200 + v197 + 32);
                v391 = v201;
                v202 = sub_1C477672C((uint64_t)v415, v201);
                v203 = v415[1] == v415[0] ? (uint64_t *)((char *)&v416 + 4) : &v416;
                if (v202 == (_QWORD *)((char *)v415[1] + 8 * *(unsigned int *)v203))
                {
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)v415, v201);
                  if (!*((_DWORD *)sub_1C6280F70(v437, &v391) + 4) && (_QWORD *)v201 == v392)
                    break;
                }
                v197 += 64;
                if (v198 == v197)
                  goto LABEL_365;
              }
              v204 = *(_QWORD **)*v370;
              v419 = "switch_prepdom";
              v423[0] = 259;
              v205 = v403;
              v206 = (_QWORD **)operator new();
              *v206 = (_QWORD *)(*v204 + 1600);
              v206[1] = 0;
              v207 = *((_DWORD *)v206 + 5) & 0xC0000000;
              *((_DWORD *)v206 + 4) = 22;
              *((_DWORD *)v206 + 5) = v207;
              v206[3] = 0;
              v208 = v206 + 3;
              v206[4] = 0;
              v206[5] = v206 + 5;
              v206[6] = v206 + 5;
              v206[7] = 0;
              if (v205)
                v209 = v205 + 3;
              else
                v209 = (_QWORD *)v25;
              llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v25, v206);
              v210 = *v209;
              v206[4] = v209;
              *v208 = v210;
              *(_QWORD *)(v210 + 8) = v208;
              *v209 = v208;
              llvm::Value::setName((uint64_t ***)v206, (uint64_t)&v419);
              v211 = (uint64_t *)**v206;
              v419 = &v421;
              v420 = (void *)0x200000000;
              v426 = v211;
              v427 = &v435;
              v428 = v436;
              v429 = 0;
              v430 = 0;
              v431 = 512;
              v432 = 7;
              v433 = 0;
              v434 = 0;
              v435 = &unk_1E8167888;
              v436[0] = &unk_1E8167A08;
              v379 = (uint64_t)v206;
              v424 = (llvm::BasicBlock *)v206;
              v425 = v206 + 5;
              v212 = v403;
              v213 = (char *)operator new(0x60uLL);
              v214 = v213;
              *((_DWORD *)v213 + 13) = *((_DWORD *)v213 + 13) & 0x38000000 | 1;
              *(_QWORD *)v213 = 0;
              *((_QWORD *)v213 + 2) = 0;
              *((_QWORD *)v213 + 1) = 0;
              *((_QWORD *)v213 + 4) = **(_QWORD **)*v212 + 1576;
              v388 = (llvm::BasicBlock *)(v213 + 32);
              *((_QWORD *)v213 + 3) = v213 + 32;
              *((_QWORD *)v213 + 5) = 0;
              v213[48] = 30;
              v213[49] = 0;
              *((_WORD *)v213 + 25) = 0;
              *((_DWORD *)v213 + 13) = 1;
              *(_OWORD *)(v213 + 56) = 0u;
              *(_OWORD *)(v213 + 72) = 0u;
              *((_DWORD *)v213 + 22) = 0;
              *(_QWORD *)v213 = v212;
              v217 = v212[1];
              v216 = v212 + 1;
              v215 = v217;
              *((_QWORD *)v213 + 1) = v217;
              if (v217)
                *(_QWORD *)(v215 + 16) = v213 + 8;
              *((_QWORD *)v213 + 2) = v216;
              *v216 = v213;
              v414 = 257;
              v218 = (llvm::Value *)(v213 + 32);
              (*(void (**)(_QWORD *, llvm::BasicBlock *, void **, llvm::BasicBlock *, _QWORD **))(*v428 + 16))(v428, v388, &v411, v424, v425);
              if (!(_DWORD)v420)
              {
LABEL_385:
                v219 = v403 + 5;
                v220 = (_QWORD *)v403[6];
                if (v220 != v403 + 5)
                {
                  do
                  {
                    v221 = v220 - 3;
                    if (!v220)
                      v221 = 0;
                    if (*((_BYTE *)v221 + 16) != 83)
                      break;
                    v222 = *((_DWORD *)v221 + 5);
                    v223 = v222 & 0x7FFFFFF;
                    if ((v222 & 0x7FFFFFF) != 0)
                    {
                      v224 = 0;
                      while (1)
                      {
                        v225 = &v221[-4 * v223];
                        if ((v222 & 0x40000000) != 0)
                          v225 = (_QWORD *)*(v221 - 1);
                        if (v225[4 * *((unsigned int *)v221 + 15) + v224] == v32)
                          break;
                        if (v223 == ++v224)
                          goto LABEL_395;
                      }
                    }
                    else
                    {
LABEL_395:
                      LODWORD(v224) = -1;
                    }
                    v226 = (v222 & 0x40000000) != 0 ? (_QWORD *)*(v221 - 1) : &v221[-4 * v223];
                    v226[4 * *((unsigned int *)v221 + 15) + v224] = v379;
                    v220 = (_QWORD *)v220[1];
                  }
                  while (v220 != v219);
                }
                sub_1C6280CD8(&v441, &v392)[1] = v379;
                v227 = (char *)sub_1C477672C((uint64_t)&v393, (uint64_t)v392);
                if (v394 == v393)
                  v228 = (uint64_t *)((char *)&v395 + 4);
                else
                  v228 = &v395;
                if (v227 != &v394[8 * *(unsigned int *)v228])
                {
                  v229 = (char *)sub_1C477672C((uint64_t)&v393, (uint64_t)v392);
                  if (v394 == v393)
                    v230 = (uint64_t *)((char *)&v395 + 4);
                  else
                    v230 = &v395;
                  if (v229 != &v394[8 * *(unsigned int *)v230])
                  {
                    *(_QWORD *)v229 = -2;
                    ++v396;
                  }
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v393, v379);
                }
                if (v419 != &v421)
                  free(v419);
                goto LABEL_365;
              }
              v361 = (char *)v419;
              v362 = (char *)v419 + 16 * v420;
              v363 = (unsigned __int8 **)(v214 + 80);
              while (2)
              {
                v364 = *(_DWORD *)v361;
                v365 = (unsigned __int8 *)*((_QWORD *)v361 + 1);
                if (v365)
                {
                  if (v364)
                    goto LABEL_557;
                  v409[0] = *((_QWORD *)v361 + 1);
                  llvm::MetadataTracking::track((uint64_t)v409, v365, 2);
                  v366 = *v363;
LABEL_561:
                  if (v366)
                    llvm::MetadataTracking::untrack((uint64_t)(v214 + 80), v366);
                  v367 = (unsigned __int8 *)v409[0];
                  *v363 = (unsigned __int8 *)v409[0];
                  if (v367)
                    llvm::MetadataTracking::retrack((uint64_t)v409, v367, (uint64_t)(v214 + 80));
                  v218 = v388;
                }
                else
                {
                  v366 = *v363;
                  if (*v363 || (v214[55] & 0x20) != 0)
                  {
                    if (!v364)
                    {
                      v409[0] = 0;
                      goto LABEL_561;
                    }
LABEL_557:
                    llvm::Value::setMetadata(v218, *(_DWORD *)v361, (llvm::MDNode *)v365);
                  }
                }
                v361 += 16;
                if (v361 == v362)
                  goto LABEL_385;
                continue;
              }
            }
          }
          else
          {
            v9 = v383;
          }
          v30 = v381;
          v24 = v382;
          goto LABEL_191;
        }
      }
    }
  }
  return 0;
}

BOOL sub_1C56346C4(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  _QWORD *v8;
  _BOOL8 result;

  if (a4)
  {
    v4 = (a4 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    v5 = *(_QWORD *)(a3 + 16 * v4);
    if (v5 == a1)
    {
LABEL_6:
      v8 = *(_QWORD **)(a3 + 16 * v4 + 8);
      goto LABEL_8;
    }
    v6 = 1;
    while (v5 != -4096)
    {
      v7 = v4 + v6++;
      v4 = v7 & (a4 - 1);
      v5 = *(_QWORD *)(a3 + 16 * v4);
      if (v5 == a1)
        goto LABEL_6;
    }
  }
  v8 = 0;
LABEL_8:
  result = 1;
  if (a2)
  {
    while (v8 != a2)
    {
      result = v8 != 0;
      if (!v8)
        break;
      v8 = (_QWORD *)*v8;
    }
  }
  return result;
}

uint64_t sub_1C5634748(_DWORD *a1, _QWORD *a2)
{
  uint64_t result;
  int v4;
  _QWORD *v5;

  v5 = 0;
  result = sub_1C6280D38((uint64_t)a1, a2, &v5);
  if ((_DWORD)result)
  {
    *v5 = -8192;
    v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

uint64_t sub_1C5634798(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[33];

  v14[32] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C6280EA4(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 256);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C6280EA4(a1, v14, v9);
}

void sub_1C563491C(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[704];
  uint64_t v21;

  v2 = a2;
  v21 = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_DWORD *)(a1 + 16);
    if (v2 > 8)
    {
      *(_QWORD *)(a1 + 8) = operator new(88 * v2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C6281150(a1, v7, v7 + 88 * v8);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = 0;
  v10 = v20;
  do
  {
    v11 = a1 + v9;
    v12 = *(_QWORD *)(a1 + v9 + 8);
    if ((v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_22;
    v13 = v10 + 24;
    *((_QWORD *)v10 + 1) = v10 + 24;
    *(_QWORD *)v10 = v12;
    *((_QWORD *)v10 + 2) = 0x800000000;
    v14 = *(unsigned int *)(v11 + 24);
    v15 = *(void **)(v11 + 16);
    if ((_DWORD)v14)
      v16 = a1 + v9 + 8 == (_QWORD)v10;
    else
      v16 = 1;
    if (!v16)
    {
      v17 = a1 + v9;
      v18 = a1 + v9 + 32;
      if ((void *)v18 != v15)
      {
        *((_QWORD *)v10 + 1) = v15;
        *((_DWORD *)v10 + 4) = v14;
        *((_DWORD *)v10 + 5) = *(_DWORD *)(v17 + 28);
        *(_QWORD *)(v11 + 16) = v18;
        *(_DWORD *)(v17 + 28) = 0;
        v15 = (void *)(a1 + v9 + 32);
        goto LABEL_19;
      }
      if (v14 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v10 + 8), (uint64_t)(v10 + 24), v14, 8);
        v19 = *(unsigned int *)(v11 + 24);
        if (!(_DWORD)v19)
          goto LABEL_18;
        v15 = *(void **)(v11 + 16);
        v13 = (void *)*((_QWORD *)v10 + 1);
      }
      else
      {
        v19 = *(unsigned int *)(v11 + 24);
      }
      memcpy(v13, v15, 8 * v19);
LABEL_18:
      *((_DWORD *)v10 + 4) = v14;
      v15 = *(void **)(v11 + 16);
LABEL_19:
      *(_DWORD *)(v11 + 24) = 0;
    }
    v10 += 88;
    if ((void *)(a1 + v9 + 32) != v15)
      free(v15);
LABEL_22:
    v9 += 88;
  }
  while (v9 != 704);
  if (v2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = operator new(88 * v2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v2;
  }
  sub_1C6281150(a1, (uint64_t)v20, (uint64_t)v10);
}

uint64_t sub_1C5634B90(uint64_t a1, llvm::DataLayout *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;

  v5 = *(unsigned __int8 *)(a1 + 16);
  if ((v5 - 66) < 0xD)
    return 0x100000000;
  if (v5 == 62)
  {
    v11 = 64;
    v10 = 0;
    if (llvm::GEPOperator::accumulateConstantOffset(a1, a2, (uint64_t)&v10, 0, a5))
    {
      if (v11 > 0x40)
      {
        LODWORD(v7) = *v10;
        MEMORY[0x1CAA32F9C]();
      }
      else
      {
        v7 = (uint64_t)((_QWORD)v10 << -(uint64_t)v11) >> -(uint64_t)v11;
      }
      v8 = v7;
      v9 = 0x100000000;
      return v9 | v8;
    }
    if (v11 >= 0x41 && v10)
      MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
  }
  v8 = 0;
  v9 = 0;
  return v9 | v8;
}

uint64_t sub_1C5634C64(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  char **v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v3 = *(_DWORD *)(a2 + 20);
  v4 = (uint64_t *)(a2 - 32 * (v3 & 0x7FFFFFF));
  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 84)
  {
    v6 = 0;
  }
  else if (v5 == 39)
  {
    v6 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    v6 = 2;
  }
  if (v3 < 0 && (v30 = *(v4 - 1), (v30 & 0xFFFFFFFF0) != 0))
    v7 = (*((_DWORD *)v4 - 3) - *(_DWORD *)((char *)v4 - v30));
  else
    v7 = 0;
  v8 = a2 - 32 * v6 - 32 * v7 - 32;
  if (v4 == (uint64_t *)v8)
    return 1;
  while (1)
  {
    v9 = *v4;
    v10 = *(unsigned __int8 *)(*v4 + 16);
    if (*v4 && v10 == 23)
      break;
    if (v9)
      v12 = v10 >= 0x1C;
    else
      v12 = 0;
    if (v12)
    {
      v13 = *(_QWORD *)(a1 + 304);
      if ((*(_BYTE *)(v13 + 784) & 1) != 0)
      {
        v15 = v13 + 792;
        v14 = 32;
      }
      else
      {
        v14 = *(_DWORD *)(v13 + 800);
        if (!v14)
          return 0;
        v15 = *(_QWORD *)(v13 + 792);
      }
      v21 = v14 - 1;
      v22 = v21 & ((v9 >> 4) ^ (v9 >> 9));
      v23 = *(_QWORD *)(v15 + 8 * v22);
      if (v9 != v23)
      {
        v24 = 1;
        while (v23 != -4096)
        {
          v25 = v22 + v24++;
          v22 = v25 & v21;
          v23 = *(_QWORD *)(v15 + 8 * v22);
          if (v9 == v23)
            goto LABEL_35;
        }
        return 0;
      }
LABEL_35:
      v26 = sub_1C477672C(v13 + 1856, v9);
      v27 = *(_QWORD *)(v13 + 1864);
      if (v27 == *(_QWORD *)(v13 + 1856))
        v28 = 1876;
      else
        v28 = 1872;
      if (v26 != (_QWORD *)(v27 + 8 * *(unsigned int *)(v13 + v28)))
        return 0;
    }
LABEL_39:
    v4 += 4;
    if (v4 == (uint64_t *)v8)
      return 1;
  }
  v16 = *(unsigned __int8 **)(v9 + 24);
  v17 = *v16;
  if (v17 != 32)
  {
    if ((v17 - 3) >= 0xFEu)
    {
      if ((sub_1C5635078(a1, *v16, *((_QWORD *)v16 + 16)) & 1) == 0)
        return 0;
    }
    else if ((v17 - 35) >= 0xE1u && !sub_1C5634F3C(a1, (uint64_t)v16))
    {
      return 0;
    }
    goto LABEL_39;
  }
  v18 = *((unsigned int *)v16 + 8);
  if (!(_DWORD)v18)
    goto LABEL_39;
  v19 = (char **)*((_QWORD *)v16 + 3);
  v20 = 8 * v18;
  while ((sub_1C5635078(a1, **v19, *((_QWORD *)*v19 + 16)) & 1) != 0)
  {
    ++v19;
    v20 -= 8;
    if (!v20)
      goto LABEL_39;
  }
  return 0;
}

uint64_t sub_1C5634E68(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  __int128 v6;
  uint64_t v7;
  int v8;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;

  v13 = *a2;
  v14 = 0;
  sub_1C6281EE8((uint64_t)&v11, a1, &v13, &v14);
  v4 = v11;
  v5 = (_QWORD *)(a1 + 72);
  if (!v12)
    return *v5 + 16 * *(unsigned int *)(v11 + 8);
  v6 = *(_OWORD *)a2;
  v7 = *(unsigned int *)(a1 + 80);
  if (v7 >= *(_DWORD *)(a1 + 84))
  {
    v10 = *(_OWORD *)a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v5, a1 + 88, v7 + 1, 16);
    v6 = v10;
    LODWORD(v7) = *(_DWORD *)(a1 + 80);
  }
  *(_OWORD *)(*(_QWORD *)(a1 + 72) + 16 * v7) = v6;
  v8 = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = v8 + 1;
  *(_DWORD *)(v4 + 8) = v8;
  return *(_QWORD *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 80) - 16;
}

BOOL sub_1C5634F3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;

  v16 = a2;
  v17 = 0;
  sub_1C6281EE8((uint64_t)&v14, a1, &v16, &v17);
  v4 = v14;
  v5 = (_QWORD *)(a1 + 72);
  if (!v15)
    return *(_BYTE *)(*v5 + 16 * *(unsigned int *)(v14 + 8) + 8) != 0;
  v6 = *(unsigned int *)(a1 + 80);
  if (v6 >= *(_DWORD *)(a1 + 84))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v5, a1 + 88, v6 + 1, 16);
    LODWORD(v6) = *(_DWORD *)(a1 + 80);
  }
  v7 = (uint64_t *)(*(_QWORD *)(a1 + 72) + 16 * v6);
  result = 1;
  *v7 = a2;
  v7[1] = 1;
  LODWORD(v7) = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = (_DWORD)v7 + 1;
  *(_DWORD *)(v4 + 8) = (_DWORD)v7;
  v9 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 80);
    v11 = -8 * v9;
    while (1)
    {
      v12 = *(unsigned __int8 **)(a2 + v11);
      if (v12)
      {
        v13 = *v12;
        if ((v13 - 3) >= 0xFEu)
        {
          if ((sub_1C5635078(a1, *v12, *((_QWORD *)v12 + 16)) & 1) == 0)
            goto LABEL_15;
        }
        else if ((v13 - 4) <= 0x1E && (sub_1C5634F3C(a1) & 1) == 0)
        {
LABEL_15:
          result = 0;
          *(_BYTE *)(v10 - 8) = 0;
          return result;
        }
      }
      v11 += 8;
      if (!v11)
        return 1;
    }
  }
  return result;
}

uint64_t sub_1C5635078(uint64_t a1, char a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  BOOL v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 != 2)
    return 1;
  v3 = *(unsigned __int8 *)(a3 + 16);
  if (!a3 || v3 < 0x1C)
  {
    if (!a3 || v3 != 22)
    {
      if (a3)
        v8 = v3 == 21;
      else
        v8 = 0;
      return !v8;
    }
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 304);
  if ((*(_BYTE *)(v4 + 784) & 1) != 0)
  {
    v6 = v4 + 792;
    v5 = 32;
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(v4 + 800);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v4 + 792);
LABEL_18:
  v9 = v5 - 1;
  v10 = v9 & ((a3 >> 4) ^ (a3 >> 9));
  v11 = *(_QWORD *)(v6 + 8 * v10);
  if (v11 != a3)
  {
    v12 = 1;
    while (v11 != -4096)
    {
      v13 = v10 + v12++;
      v10 = v13 & v9;
      v11 = *(_QWORD *)(v6 + 8 * v10);
      if (v11 == a3)
        goto LABEL_22;
    }
    return 0;
  }
LABEL_22:
  v14 = sub_1C477672C(v4 + 1856, a3);
  v15 = *(_QWORD *)(v4 + 1864);
  v16 = 1872;
  if (v15 == *(_QWORD *)(v4 + 1856))
    v16 = 1876;
  return v14 == (_QWORD *)(v15 + 8 * *(unsigned int *)(v4 + v16));
}

uint64_t sub_1C5635170(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializePostDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeFunctionGroupInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeGPUFunctionCallInfoWrapperPass(a1, v2);
  v3 = operator new();
  *(_QWORD *)v3 = "Generation of constant programs";
  *(_QWORD *)(v3 + 8) = 31;
  *(_QWORD *)(v3 + 16) = "constant-programs";
  *(_QWORD *)(v3 + 24) = 17;
  *(_QWORD *)(v3 + 32) = &unk_1ED808648;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C56356FC;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5635224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char a12)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  int64x2_t v42;
  unint64_t v44;
  unint64_t v46;
  _QWORD *v47;
  _QWORD v48[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED808648;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E8171B98;
  v19 = *(_QWORD *)(a2 + 24);
  if (v19)
  {
    if (v19 == a2)
    {
      *(_QWORD *)(a1 + 56) = a1 + 32;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1 + 32);
    }
    else
    {
      *(_QWORD *)(a1 + 56) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 56) = 0;
  }
  v20 = *(_QWORD *)(a3 + 24);
  if (v20)
  {
    if (v20 == a3)
    {
      *(_QWORD *)(a1 + 88) = a1 + 64;
      (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 88) = 0;
  }
  v21 = *(_QWORD *)(a4 + 24);
  if (v21)
  {
    if (v21 == a4)
    {
      *(_QWORD *)(a1 + 120) = a1 + 96;
      (*(void (**)(_QWORD))(**(_QWORD **)(a4 + 24) + 24))(*(_QWORD *)(a4 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 120) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 120) = 0;
  }
  v22 = *(_QWORD *)(a5 + 24);
  if (v22)
  {
    if (v22 == a5)
    {
      *(_QWORD *)(a1 + 152) = a1 + 128;
      (*(void (**)(_QWORD))(**(_QWORD **)(a5 + 24) + 24))(*(_QWORD *)(a5 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 152) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 152) = 0;
  }
  v23 = *(_QWORD *)(a6 + 24);
  if (v23)
  {
    if (v23 == a6)
    {
      *(_QWORD *)(a1 + 184) = a1 + 160;
      (*(void (**)(_QWORD))(**(_QWORD **)(a6 + 24) + 24))(*(_QWORD *)(a6 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 184) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 184) = 0;
  }
  v24 = *(_QWORD *)(a7 + 24);
  if (v24)
  {
    if (v24 == a7)
    {
      *(_QWORD *)(a1 + 216) = a1 + 192;
      (*(void (**)(_QWORD))(**(_QWORD **)(a7 + 24) + 24))(*(_QWORD *)(a7 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 216) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 216) = 0;
  }
  v25 = *(_QWORD *)(a8 + 24);
  if (v25)
  {
    if (v25 == a8)
    {
      *(_QWORD *)(a1 + 248) = a1 + 224;
      (*(void (**)(_QWORD))(**(_QWORD **)(a8 + 24) + 24))(*(_QWORD *)(a8 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 248) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 248) = 0;
  }
  v26 = *(_QWORD *)(a9 + 24);
  if (v26)
  {
    if (v26 == a9)
    {
      *(_QWORD *)(a1 + 280) = a1 + 256;
      (*(void (**)(_QWORD))(**(_QWORD **)(a9 + 24) + 24))(*(_QWORD *)(a9 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 280) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 280) = 0;
  }
  v27 = *(_QWORD *)(a10 + 24);
  if (v27)
  {
    if (v27 == a10)
    {
      *(_QWORD *)(a1 + 312) = a1 + 288;
      (*(void (**)(_QWORD))(**(_QWORD **)(a10 + 24) + 24))(*(_QWORD *)(a10 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 312) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 312) = 0;
  }
  *(_BYTE *)(a1 + 327) = a11;
  v28 = dword_1ED808AA8;
  if (dword_1ED808AA8 != 1)
  {
    if (dword_1ED808AA8 == 2)
      v28 = 0;
    else
      v28 = a12;
  }
  *(_BYTE *)(a1 + 329) = v28;
  *(_DWORD *)(a1 + 360) = 128;
  v29 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  *(_QWORD *)(a1 + 344) = v29;
  *(_QWORD *)(a1 + 352) = 0;
  v30 = *(unsigned int *)(a1 + 360);
  if ((_DWORD)v30)
  {
    v31 = v30 << 6;
    v32 = v29 + 16;
    do
    {
      *v32 = 0;
      v32[1] = -4096;
      *(v32 - 2) = &unk_1E814DA10;
      *(v32 - 1) = 2;
      v32[2] = 0;
      v32 += 8;
      v31 -= 64;
    }
    while (v31);
  }
  *(_BYTE *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 424) = 128;
  v33 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  *(_QWORD *)(a1 + 408) = v33;
  *(_QWORD *)(a1 + 416) = 0;
  v34 = *(unsigned int *)(a1 + 424);
  if ((_DWORD)v34)
  {
    v35 = v34 << 6;
    v36 = v33 + 16;
    do
    {
      *v36 = 0;
      v36[1] = -4096;
      *(v36 - 2) = &unk_1E814DA10;
      *(v36 - 1) = 2;
      v36[2] = 0;
      v36 += 8;
      v35 -= 64;
    }
    while (v35);
  }
  *(_BYTE *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 488) = 128;
  v37 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  *(_QWORD *)(a1 + 472) = v37;
  *(_QWORD *)(a1 + 480) = 0;
  v38 = *(unsigned int *)(a1 + 488);
  if ((_DWORD)v38)
  {
    v39 = v38 << 6;
    v40 = v37 + 16;
    do
    {
      *v40 = 0;
      v40[1] = -4096;
      *(v40 - 2) = &unk_1E814DA10;
      *(v40 - 1) = 2;
      v40[2] = 0;
      v40 += 8;
      v39 -= 64;
    }
    while (v39);
  }
  *(_BYTE *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 536) = 1;
  v41 = 544;
  v42 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)(a1 + v41) = v42;
    v41 += 16;
  }
  while (v41 != 800);
  *(_QWORD *)(a1 + 800) = a1 + 816;
  *(_QWORD *)(a1 + 808) = 0x2000000000;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_DWORD *)(a1 + 1088) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v46 = qword_1ED830BC0[0];
  v44 = atomic_load(&qword_1ED808650);
  if (v44 != -1)
  {
    v48[0] = sub_1C5635170;
    v48[1] = &v46;
    v47 = v48;
    std::__call_once(&qword_1ED808650, &v47, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C56356FC()
{
  uint64_t v0;
  void (**v1)(void);
  void (**v2)(void);
  void (**v3)(void);
  void (**v4)(void);
  void (**v5)(void);
  _QWORD *v6;
  void (**v7)(_QWORD *);
  _QWORD *v8;
  void (**v9)(_QWORD *);
  _QWORD *v10;
  void (**v11)(_QWORD *);
  _QWORD *v12;
  void (**v13)(_QWORD *);
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[3];
  _QWORD *v20;
  _QWORD v21[3];
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  _QWORD v25[3];
  _QWORD *v26;
  _QWORD v27[3];
  _QWORD *v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  v32 = 0;
  v30 = 0;
  v28 = 0;
  v26 = 0;
  v24 = 0;
  v22 = 0;
  v20 = 0;
  v18 = 0;
  v16 = 0;
  sub_1C5635224(v0, (uint64_t)v31, (uint64_t)v29, (uint64_t)v27, (uint64_t)v25, (uint64_t)v23, (uint64_t)v21, (uint64_t)v19, (uint64_t)v17, (uint64_t)v15, 0, 1);
  if (v16 == v15)
  {
    v1 = (void (**)(void))(v15[0] + 32);
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v1 = (void (**)(void))(*v16 + 40);
  }
  (*v1)();
LABEL_6:
  if (v18 == v17)
  {
    v2 = (void (**)(void))(v17[0] + 32);
  }
  else
  {
    if (!v18)
      goto LABEL_11;
    v2 = (void (**)(void))(*v18 + 40);
  }
  (*v2)();
LABEL_11:
  if (v20 == v19)
  {
    v3 = (void (**)(void))(v19[0] + 32);
  }
  else
  {
    if (!v20)
      goto LABEL_16;
    v3 = (void (**)(void))(*v20 + 40);
  }
  (*v3)();
LABEL_16:
  if (v22 == v21)
  {
    v4 = (void (**)(void))(v21[0] + 32);
  }
  else
  {
    if (!v22)
      goto LABEL_21;
    v4 = (void (**)(void))(*v22 + 40);
  }
  (*v4)();
LABEL_21:
  if (v24 == v23)
  {
    v5 = (void (**)(void))(v23[0] + 32);
  }
  else
  {
    if (!v24)
      goto LABEL_26;
    v5 = (void (**)(void))(*v24 + 40);
  }
  (*v5)();
LABEL_26:
  v6 = v26;
  if (v26 == v25)
  {
    v7 = (void (**)(_QWORD *))(v25[0] + 32);
    v6 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_31;
    v7 = (void (**)(_QWORD *))(*v26 + 40);
  }
  (*v7)(v6);
LABEL_31:
  v8 = v28;
  if (v28 == v27)
  {
    v9 = (void (**)(_QWORD *))(v27[0] + 32);
    v8 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_36;
    v9 = (void (**)(_QWORD *))(*v28 + 40);
  }
  (*v9)(v8);
LABEL_36:
  v10 = v30;
  if (v30 == v29)
  {
    v11 = (void (**)(_QWORD *))(v29[0] + 32);
    v10 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_41;
    v11 = (void (**)(_QWORD *))(*v30 + 40);
  }
  (*v11)(v10);
LABEL_41:
  v12 = v32;
  if (v32 == v31)
  {
    v13 = (void (**)(_QWORD *))(v31[0] + 32);
    v12 = v31;
    goto LABEL_45;
  }
  if (v32)
  {
    v13 = (void (**)(_QWORD *))(*v32 + 40);
LABEL_45:
    (*v13)(v12);
  }
  return v0;
}

void sub_1C5635998(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  int32x2_t *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  int32x2_t *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  int32x2_t *v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  int32x2_t *v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  int32x2_t *v71;
  unint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  int v78;
  int v79;
  unint64_t v81;
  unint64_t *v82;
  uint64_t v83;
  int32x2_t *v84;
  unint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  int v91;
  int v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;

  *(_QWORD *)a1 = &off_1E8171B98;
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1072), 8);
  v2 = *(void **)(a1 + 800);
  if (v2 != (void *)(a1 + 816))
    free(v2);
  if ((*(_BYTE *)(a1 + 536) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 544), 8);
  if (*(_BYTE *)(a1 + 520))
  {
    sub_1C4E43068(a1 + 496);
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 496), 8);
    *(_BYTE *)(a1 + 520) = 0;
  }
  v3 = *(unsigned int *)(a1 + 488);
  v4 = *(_QWORD **)(a1 + 472);
  if ((_DWORD)v3)
  {
    v5 = &v4[8 * v3];
    do
    {
      v6 = v4[3];
      if ((v6 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v7 = v4[7];
        if (v7)
        {
          if (v7 != -8192 && v7 != -4096)
          {
            v8 = v4[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v8 = v4[6];
            v9 = (unint64_t *)v4[6];
            if (v9)
            {
              *v9 = *v9 & 7 | v8;
            }
            else
            {
              v10 = v4[7];
              v11 = ***(int32x2_t ****)v10;
              v12 = (unint64_t)v11[303];
              if (v12 <= v8)
              {
                v13 = v11[305].u32[0];
                if (v12 + 16 * v13 > v8)
                {
                  v14 = v13 - 1;
                  LODWORD(v15) = v14 & ((v10 >> 4) ^ (v10 >> 9));
                  v16 = (uint64_t *)(v12 + 16 * v15);
                  v17 = *v16;
                  if (v10 == *v16)
                  {
LABEL_21:
                    *v16 = -8192;
                    v11[304] = vadd_s32(v11[304], (int32x2_t)0x1FFFFFFFFLL);
                    v10 = v4[7];
                  }
                  else
                  {
                    v18 = 1;
                    while (v17 != -4096)
                    {
                      v19 = v15 + v18++;
                      v15 = v19 & v14;
                      v17 = *(_QWORD *)(v12 + 16 * v15);
                      if (v10 == v17)
                      {
                        v16 = (uint64_t *)(v12 + 16 * v15);
                        goto LABEL_21;
                      }
                    }
                  }
                  *(_BYTE *)(v10 + 17) &= ~1u;
                }
              }
            }
            v6 = v4[3];
          }
        }
      }
      if (v6 != -4096 && v6 != -8192 && v6 != 0)
      {
        v21 = v4[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v21 = v4[2];
        v22 = (unint64_t *)v4[2];
        if (v22)
        {
          *v22 = *v22 & 7 | v21;
        }
        else
        {
          v23 = v4[3];
          v24 = ***(int32x2_t ****)v23;
          v25 = (unint64_t)v24[303];
          if (v25 <= v21)
          {
            v26 = v24[305].u32[0];
            if (v25 + 16 * v26 > v21)
            {
              v27 = v26 - 1;
              LODWORD(v28) = v27 & ((v23 >> 4) ^ (v23 >> 9));
              v29 = (uint64_t *)(v25 + 16 * v28);
              v30 = *v29;
              if (v23 == *v29)
              {
LABEL_40:
                *v29 = -8192;
                v24[304] = vadd_s32(v24[304], (int32x2_t)0x1FFFFFFFFLL);
                v23 = v4[3];
              }
              else
              {
                v31 = 1;
                while (v30 != -4096)
                {
                  v32 = v28 + v31++;
                  v28 = v32 & v27;
                  v30 = *(_QWORD *)(v25 + 16 * v28);
                  if (v23 == v30)
                  {
                    v29 = (uint64_t *)(v25 + 16 * v28);
                    goto LABEL_40;
                  }
                }
              }
              *(_BYTE *)(v23 + 17) &= ~1u;
            }
          }
        }
      }
      v4 += 8;
    }
    while (v4 != v5);
    v4 = *(_QWORD **)(a1 + 472);
  }
  MEMORY[0x1CAA32FB4](v4, 8);
  if (*(_BYTE *)(a1 + 456))
  {
    sub_1C4E43068(a1 + 432);
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 432), 8);
    *(_BYTE *)(a1 + 456) = 0;
  }
  v33 = *(unsigned int *)(a1 + 424);
  v34 = *(_QWORD **)(a1 + 408);
  if ((_DWORD)v33)
  {
    v35 = &v34[8 * v33];
    do
    {
      v36 = v34[3];
      if ((v36 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v37 = v34[7];
        if (v37)
        {
          if (v37 != -8192 && v37 != -4096)
          {
            v38 = v34[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v38 = v34[6];
            v39 = (unint64_t *)v34[6];
            if (v39)
            {
              *v39 = *v39 & 7 | v38;
            }
            else
            {
              v40 = v34[7];
              v41 = ***(int32x2_t ****)v40;
              v42 = (unint64_t)v41[303];
              if (v42 <= v38)
              {
                v43 = v41[305].u32[0];
                if (v42 + 16 * v43 > v38)
                {
                  v44 = v43 - 1;
                  LODWORD(v45) = v44 & ((v40 >> 4) ^ (v40 >> 9));
                  v46 = (uint64_t *)(v42 + 16 * v45);
                  v47 = *v46;
                  if (v40 == *v46)
                  {
LABEL_59:
                    *v46 = -8192;
                    v41[304] = vadd_s32(v41[304], (int32x2_t)0x1FFFFFFFFLL);
                    v40 = v34[7];
                  }
                  else
                  {
                    v48 = 1;
                    while (v47 != -4096)
                    {
                      v49 = v45 + v48++;
                      v45 = v49 & v44;
                      v47 = *(_QWORD *)(v42 + 16 * v45);
                      if (v40 == v47)
                      {
                        v46 = (uint64_t *)(v42 + 16 * v45);
                        goto LABEL_59;
                      }
                    }
                  }
                  *(_BYTE *)(v40 + 17) &= ~1u;
                }
              }
            }
            v36 = v34[3];
          }
        }
      }
      if (v36 != -4096 && v36 != -8192 && v36 != 0)
      {
        v51 = v34[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v51 = v34[2];
        v52 = (unint64_t *)v34[2];
        if (v52)
        {
          *v52 = *v52 & 7 | v51;
        }
        else
        {
          v53 = v34[3];
          v54 = ***(int32x2_t ****)v53;
          v55 = (unint64_t)v54[303];
          if (v55 <= v51)
          {
            v56 = v54[305].u32[0];
            if (v55 + 16 * v56 > v51)
            {
              v57 = v56 - 1;
              LODWORD(v58) = v57 & ((v53 >> 4) ^ (v53 >> 9));
              v59 = (uint64_t *)(v55 + 16 * v58);
              v60 = *v59;
              if (v53 == *v59)
              {
LABEL_78:
                *v59 = -8192;
                v54[304] = vadd_s32(v54[304], (int32x2_t)0x1FFFFFFFFLL);
                v53 = v34[3];
              }
              else
              {
                v61 = 1;
                while (v60 != -4096)
                {
                  v62 = v58 + v61++;
                  v58 = v62 & v57;
                  v60 = *(_QWORD *)(v55 + 16 * v58);
                  if (v53 == v60)
                  {
                    v59 = (uint64_t *)(v55 + 16 * v58);
                    goto LABEL_78;
                  }
                }
              }
              *(_BYTE *)(v53 + 17) &= ~1u;
            }
          }
        }
      }
      v34 += 8;
    }
    while (v34 != v35);
    v34 = *(_QWORD **)(a1 + 408);
  }
  MEMORY[0x1CAA32FB4](v34, 8);
  if (*(_BYTE *)(a1 + 392))
  {
    sub_1C4E43068(a1 + 368);
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 368), 8);
    *(_BYTE *)(a1 + 392) = 0;
  }
  v63 = *(unsigned int *)(a1 + 360);
  v64 = *(_QWORD **)(a1 + 344);
  if ((_DWORD)v63)
  {
    v65 = &v64[8 * v63];
    do
    {
      v66 = v64[3];
      if ((v66 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v67 = v64[7];
        if (v67)
        {
          if (v67 != -8192 && v67 != -4096)
          {
            v68 = v64[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v68 = v64[6];
            v69 = (unint64_t *)v64[6];
            if (v69)
            {
              *v69 = *v69 & 7 | v68;
            }
            else
            {
              v70 = v64[7];
              v71 = ***(int32x2_t ****)v70;
              v72 = (unint64_t)v71[303];
              if (v72 <= v68)
              {
                v73 = v71[305].u32[0];
                if (v72 + 16 * v73 > v68)
                {
                  v74 = v73 - 1;
                  LODWORD(v75) = v74 & ((v70 >> 4) ^ (v70 >> 9));
                  v76 = (uint64_t *)(v72 + 16 * v75);
                  v77 = *v76;
                  if (v70 == *v76)
                  {
LABEL_97:
                    *v76 = -8192;
                    v71[304] = vadd_s32(v71[304], (int32x2_t)0x1FFFFFFFFLL);
                    v70 = v64[7];
                  }
                  else
                  {
                    v78 = 1;
                    while (v77 != -4096)
                    {
                      v79 = v75 + v78++;
                      v75 = v79 & v74;
                      v77 = *(_QWORD *)(v72 + 16 * v75);
                      if (v70 == v77)
                      {
                        v76 = (uint64_t *)(v72 + 16 * v75);
                        goto LABEL_97;
                      }
                    }
                  }
                  *(_BYTE *)(v70 + 17) &= ~1u;
                }
              }
            }
            v66 = v64[3];
          }
        }
      }
      if (v66 != -4096 && v66 != -8192 && v66 != 0)
      {
        v81 = v64[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v81 = v64[2];
        v82 = (unint64_t *)v64[2];
        if (v82)
        {
          *v82 = *v82 & 7 | v81;
        }
        else
        {
          v83 = v64[3];
          v84 = ***(int32x2_t ****)v83;
          v85 = (unint64_t)v84[303];
          if (v85 <= v81)
          {
            v86 = v84[305].u32[0];
            if (v85 + 16 * v86 > v81)
            {
              v87 = v86 - 1;
              LODWORD(v88) = v87 & ((v83 >> 4) ^ (v83 >> 9));
              v89 = (uint64_t *)(v85 + 16 * v88);
              v90 = *v89;
              if (v83 == *v89)
              {
LABEL_116:
                *v89 = -8192;
                v84[304] = vadd_s32(v84[304], (int32x2_t)0x1FFFFFFFFLL);
                v83 = v64[3];
              }
              else
              {
                v91 = 1;
                while (v90 != -4096)
                {
                  v92 = v88 + v91++;
                  v88 = v92 & v87;
                  v90 = *(_QWORD *)(v85 + 16 * v88);
                  if (v83 == v90)
                  {
                    v89 = (uint64_t *)(v85 + 16 * v88);
                    goto LABEL_116;
                  }
                }
              }
              *(_BYTE *)(v83 + 17) &= ~1u;
            }
          }
        }
      }
      v64 += 8;
    }
    while (v64 != v65);
    v64 = *(_QWORD **)(a1 + 344);
  }
  MEMORY[0x1CAA32FB4](v64, 8);
  v93 = *(_QWORD **)(a1 + 312);
  if (v93 == (_QWORD *)(a1 + 288))
  {
    v94 = 4;
    v93 = (_QWORD *)(a1 + 288);
  }
  else
  {
    if (!v93)
      goto LABEL_124;
    v94 = 5;
  }
  (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_124:
  v95 = *(_QWORD **)(a1 + 280);
  if (v95 == (_QWORD *)(a1 + 256))
  {
    v96 = 4;
    v95 = (_QWORD *)(a1 + 256);
  }
  else
  {
    if (!v95)
      goto LABEL_129;
    v96 = 5;
  }
  (*(void (**)(void))(*v95 + 8 * v96))();
LABEL_129:
  v97 = *(_QWORD **)(a1 + 248);
  if (v97 == (_QWORD *)(a1 + 224))
  {
    v98 = 4;
    v97 = (_QWORD *)(a1 + 224);
  }
  else
  {
    if (!v97)
      goto LABEL_134;
    v98 = 5;
  }
  (*(void (**)(void))(*v97 + 8 * v98))();
LABEL_134:
  v99 = *(_QWORD **)(a1 + 216);
  if (v99 == (_QWORD *)(a1 + 192))
  {
    v100 = 4;
    v99 = (_QWORD *)(a1 + 192);
  }
  else
  {
    if (!v99)
      goto LABEL_139;
    v100 = 5;
  }
  (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_139:
  v101 = *(_QWORD **)(a1 + 184);
  if (v101 == (_QWORD *)(a1 + 160))
  {
    v102 = 4;
    v101 = (_QWORD *)(a1 + 160);
  }
  else
  {
    if (!v101)
      goto LABEL_144;
    v102 = 5;
  }
  (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_144:
  v103 = *(_QWORD **)(a1 + 152);
  if (v103 == (_QWORD *)(a1 + 128))
  {
    v104 = 4;
    v103 = (_QWORD *)(a1 + 128);
  }
  else
  {
    if (!v103)
      goto LABEL_149;
    v104 = 5;
  }
  (*(void (**)(void))(*v103 + 8 * v104))();
LABEL_149:
  v105 = *(_QWORD **)(a1 + 120);
  if (v105 == (_QWORD *)(a1 + 96))
  {
    v106 = 4;
    v105 = (_QWORD *)(a1 + 96);
  }
  else
  {
    if (!v105)
      goto LABEL_154;
    v106 = 5;
  }
  (*(void (**)(void))(*v105 + 8 * v106))();
LABEL_154:
  v107 = *(_QWORD **)(a1 + 88);
  if (v107 == (_QWORD *)(a1 + 64))
  {
    v108 = 4;
    v107 = (_QWORD *)(a1 + 64);
  }
  else
  {
    if (!v107)
      goto LABEL_159;
    v108 = 5;
  }
  (*(void (**)(void))(*v107 + 8 * v108))();
LABEL_159:
  v109 = *(_QWORD **)(a1 + 56);
  if (v109 == (_QWORD *)(a1 + 32))
  {
    v110 = 4;
    v109 = (_QWORD *)(a1 + 32);
    goto LABEL_163;
  }
  if (v109)
  {
    v110 = 5;
LABEL_163:
    (*(void (**)(void))(*v109 + 8 * v110))();
  }
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C5636200(uint64_t a1)
{
  sub_1C5635998(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5636224()
{
  return "Generation of constant programs";
}

void *sub_1C5636234(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::GPUFunctionCallInfoWrapper::ID);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::GPUFunctionCallInfoWrapper::ID);
}

uint64_t sub_1C56362F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  void **v18;
  void *v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  uint64_t j;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  _QWORD *v30;
  int v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  _QWORD *v39;
  unsigned int v40;
  int v41;
  _QWORD *v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  BOOL v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  int v60;
  uint64_t v61;
  int v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v73;
  uint64_t v74;
  uint64_t NamedMetadata;
  uint64_t v76;
  _QWORD *v77;
  BOOL v78;
  unsigned __int8 v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t *v82;
  void **v83;
  void **v84;
  unsigned int v85;
  _QWORD *v86;
  int v87;
  _QWORD *v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  int v94;
  void **v95;
  void *v96;
  uint64_t v97;
  unint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  BOOL v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t *v115;
  uint64_t v116;
  unsigned int v117;
  unint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  char v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  BOOL v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  int v166;
  uint64_t v167;
  _QWORD *v169;
  unint64_t v170;
  int32x2_t ****v171;
  int32x2_t *v172;
  unint64_t v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  int32x2_t *****v177;
  int32x2_t ****v178;
  int v179;
  int v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t *v183;
  uint64_t v184;
  int32x2_t *v185;
  unint64_t v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  int v192;
  int v193;
  uint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t ***v200;
  uint64_t ***v201;
  uint64_t ***v202;
  uint64_t ***v203;
  uint64_t *v204;
  uint64_t **v205;
  uint64_t **v206;
  uint64_t *v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  int v214;
  unsigned int v215;
  uint64_t ****v216;
  uint64_t ***v217;
  uint64_t ****v218;
  int v219;
  BOOL v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t k;
  uint64_t ***v229;
  uint64_t **v230;
  uint64_t **v231;
  uint64_t **v232;
  uint64_t *v233;
  uint64_t v234;
  void *v235;
  unsigned __int8 **v236;
  unsigned __int8 *v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  int v241;
  unsigned int v242;
  _QWORD *v243;
  uint64_t v244;
  _QWORD *v245;
  int v246;
  BOOL v247;
  unsigned int v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  int v252;
  uint64_t v253;
  _BOOL4 v254;
  uint64_t v255;
  unint64_t v256;
  unsigned int v257;
  unint64_t m;
  uint64_t Impl;
  uint64_t v260;
  _QWORD *v261;
  unsigned __int8 *v262;
  _QWORD *v263;
  _QWORD *v264;
  uint64_t v265;
  size_t v266;
  unsigned __int8 *v267;
  unsigned int *v268;
  _QWORD *v269;
  unsigned __int8 *v270;
  _QWORD *v271;
  unsigned int *v272;
  uint64_t v273;
  uint64_t v274;
  _QWORD *v275;
  uint64_t v276;
  int v277;
  uint64_t *v278;
  llvm::MDNode *v279;
  _QWORD *v280;
  void *v281;
  _QWORD *v282;
  size_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t *v287;
  uint64_t v288;
  _QWORD *v289;
  _QWORD *v290;
  uint64_t v291;
  uint64_t **v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t **v297;
  llvm::DataLayout *v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t *v305;
  llvm::GlobalValue **v306;
  llvm::GlobalValue **v307;
  llvm::GlobalValue *v308;
  uint64_t v309;
  unsigned int v310;
  uint64_t v311;
  char *v312;
  _QWORD *v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  unsigned int v317;
  BOOL v319;
  char *AsInstruction;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  unsigned int v325;
  uint64_t v326;
  unsigned int v327;
  uint64_t *v328;
  const char *v329;
  uint64_t v330;
  uint64_t v331;
  unsigned int v332;
  unsigned int v333;
  unsigned int v334;
  _QWORD *v335;
  uint64_t v336;
  uint64_t v337;
  unsigned int v338;
  uint64_t v339;
  char *v340;
  _QWORD *v341;
  unsigned int v342;
  uint64_t v343;
  BOOL v344;
  uint64_t n;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  int v356;
  unsigned __int8 v357;
  void *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  void *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t Declaration;
  const llvm::APInt *v367;
  uint64_t v368;
  uint64_t **v369;
  uint64_t v370;
  llvm::ConstantInt *v371;
  unsigned int v372;
  unint64_t v373;
  llvm::ValueHandleBase *v374;
  uint64_t ***v375;
  uint64_t **v376;
  uint64_t *v377;
  unsigned int v378;
  const char *v379;
  int v380;
  unint64_t v381;
  char *v382;
  char v383;
  char v384;
  __int128 v385;
  void **v386;
  uint64_t v387;
  size_t v388;
  void **v389;
  unsigned __int8 *v390;
  uint64_t v391;
  size_t v392;
  void **v393;
  void **v394;
  unsigned __int8 *v395;
  llvm::PointerType *v396;
  size_t v397;
  void **v398;
  void **v399;
  char v400;
  char v401;
  char *v402;
  char *v403;
  llvm::Value *v404;
  uint64_t v405;
  _QWORD *v406;
  uint64_t v407;
  uint64_t **v408;
  uint64_t v409;
  uint64_t **v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t *v414;
  char *v415;
  char *v416;
  unsigned __int8 **v417;
  int v418;
  unsigned __int8 *v419;
  unsigned __int8 *v420;
  unsigned __int8 *v421;
  uint64_t v422;
  uint64_t ii;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  int v429;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  unsigned int v435;
  _DWORD *v436;
  int v437;
  uint64_t v438;
  _DWORD *v439;
  int v440;
  BOOL v441;
  unsigned int v442;
  _DWORD *v443;
  _DWORD *v444;
  uint64_t ****v445;
  uint64_t ***v446;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t *v455;
  int v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t ***v459;
  uint64_t **v460;
  int v461[2];
  uint64_t ***v462;
  int v463;
  uint64_t v464;
  uint64_t v465;
  _BYTE *v466;
  _BYTE *v467;
  uint64_t v468;
  int v469;
  _BYTE v470[128];
  void *v471[2];
  char v472;
  void *__dst[2];
  void *v474;
  unsigned int v475;
  _QWORD v476[2];
  int v477;
  unsigned __int8 *v478;
  uint64_t v479;
  _QWORD *v480;
  unsigned int v481;
  _QWORD v482[65];
  void *v483;
  uint64_t v484;
  _BYTE v485[32];
  void *v486;
  uint64_t v487;
  _BYTE v488[128];
  void *__p;
  void *v490;
  uint64_t v491;
  _QWORD *v492;
  _QWORD *v493;
  _QWORD *v494;
  _QWORD *v495;
  _QWORD *v496;
  uint64_t v497;
  void *v498[2];
  uint64_t v499;
  __int16 v500;
  void *v501;
  uint64_t v502;
  unint64_t *v503;
  int32x2_t ****v504;
  char *v505;
  char v506;
  uint64_t v507;
  int v508;
  void **v509;
  void *v510;
  uint64_t v511;
  _BYTE v512[64];
  void *v513;
  void *v514;
  uint64_t v515;
  int v516;
  _WORD v517[8];
  uint64_t v518;
  uint64_t v519;
  uint64_t *v520;
  void **v521;
  void **v522;
  uint64_t v523;
  int v524;
  __int16 v525;
  char v526;
  uint64_t v527;
  uint64_t v528;
  void *v529;
  void *v530;
  void *v531[2];
  _BYTE v532[48];
  int v533;
  uint64_t v534;

  v534 = *MEMORY[0x1E0C80C00];
  v2 = a2 + 24;
  v3 = *(_QWORD *)(a2 + 32);
  if (v3 == a2 + 24)
  {
    LOBYTE(v54) = 0;
  }
  else
  {
    v5 = a1;
    if (v3)
      v6 = v3 - 56;
    else
      v6 = 0;
    v7 = *(_QWORD *)(a1 + 120);
    v8 = v7 && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, v6) & 1) != 0
      || byte_1ED8087A8 != 0;
    *(_BYTE *)(v5 + 320) = v8;
    v9 = *(_QWORD *)(v5 + 88);
    v10 = v9 && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 48))(v9, v6) & 1) != 0
       || byte_1ED808928 != 0;
    *(_BYTE *)(v5 + 321) = v10;
    v11 = *(_QWORD *)(v5 + 152);
    if (v11)
      LOBYTE(v11) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 48))(v11, v6);
    *(_BYTE *)(v5 + 322) = v11;
    v12 = *(_QWORD *)(v5 + 184);
    if (v12)
      LOBYTE(v12) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v12, v6);
    *(_BYTE *)(v5 + 323) = v12;
    v13 = *(_QWORD *)(v5 + 216);
    v14 = v13 && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 48))(v13, v6) & 1) != 0
       || byte_1ED808868 != 0;
    *(_BYTE *)(v5 + 324) = v14;
    v15 = *(_QWORD *)(v5 + 248);
    v16 = v15 && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 48))(v15, v6) & 1) != 0
       || byte_1ED808868 != 0;
    *(_BYTE *)(v5 + 325) = v16;
    v17 = *(_QWORD *)(v5 + 280);
    if (v17)
      LOBYTE(v17) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 48))(v17, v6);
    *(_BYTE *)(v5 + 326) = v17;
    *(_BYTE *)(v5 + 328) = 0;
    v18 = **(void ****)(v5 + 8);
    do
    {
      v19 = *v18;
      v18 += 2;
    }
    while (v19 != &llvm::FunctionGroupInfoWrapperPass::ID);
    v20 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v18 - 1) + 96))(*(v18 - 1), &llvm::FunctionGroupInfoWrapperPass::ID)+ 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, a2);
    v482[0] = 1;
    for (i = 1; i != 65; i += 4)
      v482[i] = -4096;
    sub_1C5EA5D84(a2, (uint64_t)v482);
    sub_1C5EA50FC(a2);
    if ((v22 & 0x1000000000000) != 0)
      *(_BYTE *)(v5 + 328) = 1;
    v454 = v20;
    v479 = 1;
    for (j = 8; j != 264; j += 16)
      *(uint64_t *)((char *)&v479 + j) = -4096;
    v24 = *(_QWORD *)(a2 + 32);
    if (v24 != v2)
    {
      while (1)
      {
        v25 = v24 ? v24 - 56 : 0;
        v26 = v479;
        v27 = v479 & 1;
        v28 = v25 >> 4;
        if ((v479 & 1) != 0)
        {
          v29 = 16;
          v30 = &v480;
        }
        else
        {
          v29 = v481;
          if (!v481)
          {
            v39 = 0;
            v40 = 0;
            goto LABEL_59;
          }
          v30 = v480;
        }
        v31 = v29 - 1;
        v32 = v31 & (v28 ^ (v25 >> 9));
        v33 = &v30[2 * v32];
        v34 = *v33;
        if (v25 != *v33)
          break;
LABEL_65:
        v24 = *(_QWORD *)(v24 + 8);
        if (v24 == v2)
          goto LABEL_86;
      }
      v35 = 0;
      v36 = 1;
      while (v34 != -4096)
      {
        if (v35)
          v37 = 0;
        else
          v37 = v34 == -8192;
        if (v37)
          v35 = v33;
        v38 = v32 + v36++;
        v32 = v38 & v31;
        v33 = &v30[2 * v32];
        v34 = *v33;
        if (v25 == *v33)
          goto LABEL_65;
      }
      if (v35)
        v39 = v35;
      else
        v39 = v33;
      if ((v479 & 1) != 0)
        v40 = 16;
      else
        v40 = v481;
LABEL_59:
      if (4 * (v479 >> 1) + 4 < 3 * v40)
      {
        if (v40 + ~(v479 >> 1) - HIDWORD(v479) <= v40 >> 3)
        {
          sub_1C485C064((uint64_t)&v479, v40);
          __p = 0;
          sub_1C5638D48((uint64_t)&v479, v25, &__p);
          v39 = __p;
          v26 = v479;
          v27 = v479 & 1;
        }
        goto LABEL_62;
      }
      sub_1C485C064((uint64_t)&v479, 2 * v40);
      v26 = v479;
      if ((v479 & 1) != 0)
      {
        v41 = 16;
        v42 = &v480;
      }
      else
      {
        v41 = v481;
        if (!v481)
        {
          v27 = 0;
          v39 = 0;
LABEL_62:
          LODWORD(v479) = (v26 & 0xFFFFFFFE | v27) + 2;
          if (*v39 != -4096)
            --HIDWORD(v479);
          *v39 = v25;
          v39[1] = v24;
          goto LABEL_65;
        }
        v42 = v480;
      }
      v27 = v479 & 1;
      v43 = v41 - 1;
      v44 = (v41 - 1) & (v28 ^ (v25 >> 9));
      v39 = &v42[2 * v44];
      v45 = *v39;
      if (v25 != *v39)
      {
        v46 = 0;
        v47 = 1;
        while (v45 != -4096)
        {
          if (v46)
            v48 = 0;
          else
            v48 = v45 == -8192;
          if (v48)
            v46 = v39;
          v49 = v44 + v47++;
          v44 = v49 & v43;
          v39 = &v42[2 * (v49 & v43)];
          v45 = *v39;
          if (v25 == *v39)
            goto LABEL_62;
        }
        if (v46)
          v39 = v46;
      }
      goto LABEL_62;
    }
LABEL_86:
    v50 = v20;
    v51 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 48))(v20);
    v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 56))(v50);
    if (v51 != (uint64_t *)v52)
    {
      v53 = (uint64_t *)v52;
      v54 = 0;
      v452 = v5 + 408;
      v453 = v5 + 344;
      v449 = v5 + 432;
      v450 = v5 + 368;
      v457 = v5 + 472;
      v448 = v5 + 496;
      v458 = v5 + 536;
      v464 = v5;
      v451 = v52;
      while (1)
      {
        v55 = *v51;
        v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v51 + 560))(*v51);
        if (v56)
        {
          v57 = v56;
          v58 = *(_QWORD *)(v5 + 56);
          if (!v58 || (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 48))(v58, v57))
            break;
        }
        v60 = 0;
LABEL_714:
        v54 |= v60;
        if (++v51 == v53)
          goto LABEL_749;
      }
      v455 = v51;
      v456 = v54;
      v59 = *(_QWORD **)(v57 + 40);
      *(_QWORD *)(v5 + 336) = 0;
      sub_1C55B6B84(v453);
      if (*(_BYTE *)(v5 + 392))
      {
        sub_1C4E43068(v450);
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v5 + 368), 8);
        *(_BYTE *)(v5 + 392) = 0;
      }
      sub_1C55B6B84(v452);
      if (*(_BYTE *)(v5 + 456))
      {
        sub_1C4E43068(v449);
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v5 + 432), 8);
        *(_BYTE *)(v5 + 456) = 0;
      }
      sub_1C55B6B84(v457);
      if (*(_BYTE *)(v5 + 520))
      {
        sub_1C4E43068(v448);
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v5 + 496), 8);
        *(_BYTE *)(v5 + 520) = 0;
      }
      v465 = v55;
      if (*(_BYTE *)(v5 + 329))
      {
        v486 = v488;
        v487 = 0x1000000000;
      }
      else
      {
        v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 336))(v55);
        v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
        v486 = v488;
        v487 = 0x1000000000;
        v63 = v59 + 3;
        v64 = (_QWORD *)v59[4];
        v65 = v59 + 1;
        v66 = (_QWORD *)v59[2];
        v67 = v59 + 5;
        v68 = v59[6];
        v69 = v59 + 7;
        v70 = (_QWORD *)v59[8];
        __p = v64;
        v490 = v66;
        v491 = v68;
        v492 = v70;
        v493 = v59 + 3;
        v494 = v59 + 1;
        v495 = v59 + 5;
        v496 = v59 + 7;
        while (v64 != v63
             || v66 != v65
             || (_QWORD *)v68 != v67
             || v70 != v69
             || v493 != v63
             || v494 != v65
             || v495 != v67
             || v496 != v69)
        {
          v71 = (_QWORD *)sub_1C52C3168((uint64_t)&__p);
          if ((*(_DWORD *)(*v71 + 8) & 0xFFFFFF00) == 0x4000 && v71[1] != 0)
          {
            v73 = v71;
            if ((*(unsigned int (**)(uint64_t, _QWORD *))(*(_QWORD *)v465 + 408))(v465, v71))
            {
              (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v465 + 400))(v465, v73);
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v61 + 16))(v61) == v62)
              {
                v74 = v487;
                if (v487 >= (unint64_t)HIDWORD(v487))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v486, (uint64_t)v488, v487 + 1, 8);
                  v74 = v487;
                }
                *((_QWORD *)v486 + v74) = v73;
                LODWORD(v487) = v487 + 1;
              }
            }
          }
          sub_1C52C300C((uint64_t)&__p);
          v64 = __p;
          v66 = v490;
          v68 = v491;
          v70 = v492;
        }
        v5 = v464;
        v55 = v465;
        v50 = v454;
      }
      v466 = v470;
      v467 = v470;
      v468 = 16;
      v469 = 0;
      v517[0] = 260;
      v513 = v59 + 27;
      llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)&v513);
      if ((_DWORD)v492 == 29)
      {
        v501 = "agx.may_be_called_from_intersection_function";
        LOWORD(v505) = 259;
        NamedMetadata = llvm::Module::getNamedMetadata((uint64_t)v59, (uint64_t)&v501);
        if (NamedMetadata)
        {
          v76 = *(_QWORD *)(*(_QWORD *)(***(_QWORD ***)(NamedMetadata + 48)
                                      - 8 * *(unsigned int *)(***(_QWORD ***)(NamedMetadata + 48) + 8))
                          + 128);
          v77 = (_QWORD *)(v76 + 24);
          if (*(_DWORD *)(v76 + 32) >= 0x41u)
            v77 = (_QWORD *)*v77;
          v78 = *v77 != 0;
        }
        else
        {
          v78 = 0;
        }
        if (SHIBYTE(v491) < 0)
        {
          operator delete(__p);
          if (v78)
            goto LABEL_158;
        }
        else if (v78)
        {
          goto LABEL_158;
        }
        v79 = atomic_load((unsigned __int8 *)&qword_1ED808658);
        if ((v79 & 1) == 0 && __cxa_guard_acquire(&qword_1ED808658))
          __cxa_guard_release(&qword_1ED808658);
        v501 = &v503;
        v502 = 0x300000000;
        v513 = v517;
        v514 = v517;
        v515 = 1;
        v516 = 0;
        v80 = 8;
        __p = (void *)1;
        do
        {
          *(void **)((char *)&__p + v80) = (void *)-4096;
          v80 += 56;
        }
        while (v80 != 232);
        LODWORD(v531[0]) = 0;
        if (sub_1C5EAD2F0((llvm::Module *)v59, v50, (uint64_t)&v501, (llvm::SmallPtrSetImplBase *)&v513, (int *)&__p, v531))
        {
          v81 = sub_1C477672C((uint64_t)&v513, v55);
          v82 = v514 == v513 ? (uint64_t *)((char *)&v515 + 4) : &v515;
          if (v81 != (_QWORD *)((char *)v514 + 8 * *(unsigned int *)v82) && (_DWORD)v502)
          {
            v83 = (void **)v501;
            v84 = (void **)((char *)v501 + 8 * v502);
            v85 = (v57 >> 4) ^ (v57 >> 9);
            while (1)
            {
              v510 = 0;
              v510 = *v83;
              v86 = sub_1C563A038(&__p, &v510);
              if ((v86[1] & 1) != 0)
                break;
              v87 = *((_DWORD *)v86 + 6);
              if (v87)
              {
                v88 = (_QWORD *)v86[2];
                goto LABEL_145;
              }
LABEL_147:
              if (++v83 == v84)
                goto LABEL_154;
            }
            v88 = v86 + 2;
            v87 = 1;
LABEL_145:
            v89 = v87 - 1;
            v90 = v89 & v85;
            v91 = v88[v89 & v85];
            if (v91 == v57)
            {
LABEL_146:
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v466, (uint64_t)v510);
            }
            else
            {
              v92 = 1;
              while (v91 != -4096)
              {
                v93 = v90 + v92++;
                v90 = v93 & v89;
                v91 = v88[v90];
                if (v91 == v57)
                  goto LABEL_146;
              }
            }
            goto LABEL_147;
          }
        }
LABEL_154:
        sub_1C55DB034((uint64_t)&__p);
        if (v514 != v513)
          free(v514);
        if (v501 != &v503)
          free(v501);
      }
      else if (SHIBYTE(v491) < 0)
      {
        operator delete(__p);
      }
LABEL_158:
      sub_1C5EAC778(v50, v55, (uint64_t)v59);
      v94 = sub_1C5638DE0(v5, v57, (uint64_t)v482, v55);
      v60 = v94;
      if (!*(_QWORD *)(v5 + 336))
      {
        v54 = v456;
        v51 = v455;
        v53 = (uint64_t *)v451;
LABEL_710:
        if (v467 != v466)
          free(v467);
        if (v486 != v488)
          free(v486);
        goto LABEL_714;
      }
      v483 = v485;
      v484 = 0x400000000;
      v463 = v94;
      if (byte_1ED808CE8 && (*(_DWORD *)(v5 + 352) || *(_DWORD *)(v5 + 416)))
      {
        v95 = **(void ****)(v5 + 8);
        do
        {
          v96 = *v95;
          v95 += 2;
        }
        while (v96 != &llvm::GPUFunctionCallInfoWrapper::ID);
        v97 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v95 - 1) + 96))(*(v95 - 1), &llvm::GPUFunctionCallInfoWrapper::ID)+ 32);
        v98 = (unint64_t *)&v493;
        __p = &v493;
        v490 = &v493;
        v491 = 16;
        LODWORD(v492) = 0;
        v99 = *(_QWORD *)(v57 + 40);
        v100 = v99 + 24;
        v101 = *(_QWORD *)(v99 + 32);
        if (v101 != v99 + 24)
        {
          while (1)
          {
            if (v101)
              v102 = v101 - 56;
            else
              v102 = 0;
            if (v101 && *(_BYTE *)(v102 + 16) == 3)
            {
              v103 = (*(_DWORD *)(v102 + 20) & 0x7FFFFFF) == 0;
            }
            else
            {
              if (*(_BYTE *)(v102 + 16) || *(_QWORD *)(v102 + 72) != v102 + 72)
              {
                v104 = 0;
                goto LABEL_177;
              }
              v103 = (*(_BYTE *)(v102 + 34) & 0x80) == 0;
            }
            v104 = v103;
LABEL_177:
            if (v102 == v57)
              goto LABEL_202;
            if ((v104 & 1) != 0)
              goto LABEL_202;
            if (v102 == *(_QWORD *)(v5 + 336))
              goto LABEL_202;
            v105 = *(_QWORD *)(v102 + 8);
            if (!v105)
              goto LABEL_202;
            do
            {
              v106 = *(_QWORD *)(v105 + 24);
              v107 = *(unsigned __int8 *)(v106 + 16);
              if (v106)
                v108 = v107 >= 0x1C;
              else
                v108 = 0;
              if (v108)
              {
                if (v107 == 33)
                {
                  v109 = v106 & 0xFFFFFFFFFFFFFFFBLL;
                  if ((v109 & 4) == 0)
                    goto LABEL_196;
                }
                else
                {
                  if (v107 != 84)
                    goto LABEL_196;
                  v109 = v106 | 4;
                  if ((v109 & 4) == 0)
                    goto LABEL_196;
                }
                v110 = *(_QWORD *)(*(_QWORD *)((v109 & 0xFFFFFFFFFFFFFFF8) + 40) + 56);
                if (v110 != v102 && v110 != v57)
                  goto LABEL_202;
              }
LABEL_196:
              v105 = *(_QWORD *)(v105 + 8);
            }
            while (v105);
            v112 = sub_1C477672C(v97 + 48, v102);
            v113 = *(_QWORD *)(v97 + 56);
            v114 = 64;
            if (v113 == *(_QWORD *)(v97 + 48))
              v114 = 68;
            if (v112 == (_QWORD *)(v113 + 8 * *(unsigned int *)(v97 + v114)) && !sub_1C5651698(v97, v102))
            {
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&__p, v102);
            }
            else
            {
              sub_1C477672C(v97 + 48, v102);
              sub_1C5651698(v97, v102);
            }
LABEL_202:
            v101 = *(_QWORD *)(v101 + 8);
            if (v101 == v100)
            {
              v98 = (unint64_t *)v490;
              v115 = (unint64_t *)__p;
              LODWORD(v116) = HIDWORD(v491);
              v117 = v491;
              goto LABEL_208;
            }
          }
        }
        LODWORD(v116) = 0;
        v117 = 16;
        v115 = (unint64_t *)&v493;
LABEL_208:
        if (v98 == v115)
          v116 = v116;
        else
          v116 = v117;
        v118 = v98;
        v119 = v465;
        if ((_DWORD)v116)
        {
          v120 = 0;
          while (v98[v120] >= 0xFFFFFFFFFFFFFFFELL)
          {
            if (v116 == ++v120)
              goto LABEL_342;
          }
          v118 = &v98[v120];
        }
        v121 = &v98[v116];
        if (v118 != v121)
        {
          v122 = *v118;
LABEL_219:
          if ((*(_WORD *)(v122 + 18) & 1) != 0)
            llvm::Function::BuildLazyArguments((llvm::Function *)v122);
          if (*(_QWORD *)(v122 + 96))
          {
            v123 = 0;
            v124 = 0;
            v125 = 0;
            v126 = *(_QWORD *)(v122 + 88);
            while (1)
            {
              v127 = *(_QWORD *)(v122 + 8);
              if (!v127)
              {
                v128 = 0;
                goto LABEL_250;
              }
              v128 = 0;
              v129 = 1;
              do
              {
                v130 = *(_QWORD *)(v127 + 24);
                v131 = *(unsigned __int8 *)(v130 + 16);
                if (v131 <= 0x1B)
                  v132 = 0;
                else
                  v132 = *(_QWORD *)(v127 + 24);
                if (v130)
                  v133 = v131 >= 0x1C;
                else
                  v133 = 0;
                if (v133)
                {
                  if (v131 == 33)
                  {
                    v134 = v130 & 0xFFFFFFFFFFFFFFFBLL;
                    if ((v134 & 4) == 0)
                      goto LABEL_246;
                  }
                  else
                  {
                    if (v131 != 84)
                      goto LABEL_246;
                    v134 = v130 | 4;
                    if ((v134 & 4) == 0)
                      goto LABEL_246;
                  }
                  v135 = *(_QWORD *)(*(_QWORD *)(v132 + 40) + 56);
                  v136 = *(_QWORD *)((v134 & 0xFFFFFFFFFFFFFFF8)
                                   - 32 * (*(_DWORD *)((v134 & 0xFFFFFFFFFFFFFFF8) + 20) & 0x7FFFFFF)
                                   + 32 * v123);
                  if (v135 == v122)
                  {
                    if (v136 != v126)
                      goto LABEL_318;
                  }
                  else
                  {
                    if (*(unsigned __int8 *)(v136 + 16) <= 0x1Bu)
                      v136 = 0;
                    if (v128)
                      v129 &= v128 == v136;
                    else
                      v128 = v136;
                  }
                }
LABEL_246:
                v127 = *(_QWORD *)(v127 + 8);
              }
              while (v127);
              if ((v129 & 1) == 0)
                goto LABEL_318;
LABEL_250:
              v137 = *(_QWORD *)(v5 + 344);
              v138 = *(unsigned int *)(v5 + 360);
              v139 = v128 >> 4;
              if (!(_DWORD)v138)
              {
LABEL_258:
                v145 = v137 + (v138 << 6);
LABEL_259:
                v146 = v137 + (v138 << 6);
                if (v145 == v146)
                  goto LABEL_267;
                if ((_DWORD)v138)
                {
                  v140 = v138 - 1;
                  v141 = (v139 ^ (v128 >> 9)) & ((_DWORD)v138 - 1);
LABEL_262:
                  LODWORD(v147) = v141;
                  v148 = v137 + (v141 << 6);
                  v149 = *(_QWORD *)(v148 + 24);
                  if (v128 != v149)
                  {
                    v150 = 1;
                    while (v149 != -4096)
                    {
                      v151 = v147 + v150++;
                      v147 = v151 & v140;
                      v148 = v137 + (v147 << 6);
                      v149 = *(_QWORD *)(v148 + 24);
                      if (v128 == v149)
                        goto LABEL_269;
                    }
                    goto LABEL_268;
                  }
                }
                else
                {
LABEL_268:
                  v148 = v146;
                }
LABEL_269:
                v152 = *(_QWORD *)(v148 + 56);
                goto LABEL_270;
              }
              v140 = v138 - 1;
              v141 = (v139 ^ (v128 >> 9)) & ((_DWORD)v138 - 1);
              v142 = *(_QWORD *)(v137 + (v141 << 6) + 24);
              if (v128 != v142)
              {
                v143 = 1;
                while (v142 != -4096)
                {
                  v144 = v141 + v143++;
                  v141 = v144 & v140;
                  v145 = v137 + (v141 << 6);
                  v142 = *(_QWORD *)(v145 + 24);
                  if (v128 == v142)
                    goto LABEL_259;
                }
                goto LABEL_258;
              }
              if ((_DWORD)v141 != (_DWORD)v138)
              {
                v146 = v137 + (v138 << 6);
                goto LABEL_262;
              }
LABEL_267:
              v152 = 0;
LABEL_270:
              v153 = *(_QWORD *)(v5 + 408);
              v154 = *(unsigned int *)(v5 + 424);
              if (!(_DWORD)v154)
              {
LABEL_278:
                v160 = v153 + (v154 << 6);
LABEL_279:
                v161 = v153 + (v154 << 6);
                if (v160 == v161)
                  goto LABEL_289;
                if ((_DWORD)v154)
                {
                  v155 = v154 - 1;
                  v156 = ((_DWORD)v154 - 1) & (v139 ^ (v128 >> 9));
LABEL_282:
                  LODWORD(v162) = v156;
                  v163 = v153 + (v156 << 6);
                  v164 = *(_QWORD *)(v163 + 24);
                  if (v128 != v164)
                  {
                    v165 = 1;
                    while (v164 != -4096)
                    {
                      v166 = v162 + v165++;
                      v162 = v166 & v155;
                      v163 = v153 + (v162 << 6);
                      v164 = *(_QWORD *)(v163 + 24);
                      if (v128 == v164)
                        goto LABEL_288;
                    }
                    goto LABEL_287;
                  }
                }
                else
                {
LABEL_287:
                  v163 = v161;
                }
LABEL_288:
                v152 = *(_QWORD *)(v163 + 56);
                goto LABEL_289;
              }
              v155 = v154 - 1;
              v156 = ((_DWORD)v154 - 1) & (v139 ^ (v128 >> 9));
              v157 = *(_QWORD *)(v153 + (v156 << 6) + 24);
              if (v128 != v157)
              {
                v158 = 1;
                while (v157 != -4096)
                {
                  v159 = v156 + v158++;
                  v156 = v159 & v155;
                  v160 = v153 + (v156 << 6);
                  v157 = *(_QWORD *)(v160 + 24);
                  if (v128 == v157)
                    goto LABEL_279;
                }
                goto LABEL_278;
              }
              if ((_DWORD)v156 != (_DWORD)v154)
              {
                v161 = v153 + (v154 << 6);
                goto LABEL_282;
              }
LABEL_289:
              if (!v152)
                goto LABEL_318;
              if ((*(_WORD *)(v122 + 18) & 1) != 0)
                llvm::Function::BuildLazyArguments((llvm::Function *)v122);
              v167 = *(_QWORD *)(v122 + 88) + 40 * v123;
              v502 = 2;
              v503 = 0;
              v504 = (int32x2_t ****)v167;
              if (v167 != -8192 && v167 != -4096 && v167 != 0)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v502);
              v501 = &unk_1E814DA10;
              v505 = (char *)v457;
              v169 = sub_1C52E2ED8(v457, &v501);
              if (v504 != (int32x2_t ****)-8192 && v504 != (int32x2_t ****)-4096 && v504)
              {
                v170 = v502 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)(v502 & 0xFFFFFFFFFFFFFFF8) = v503;
                if (v503)
                {
                  *v503 = *v503 & 7 | v170;
                }
                else
                {
                  v171 = v504;
                  v172 = ***v504;
                  v173 = (unint64_t)v172[303];
                  if (v173 <= v170)
                  {
                    v174 = v172[305].u32[0];
                    if (v173 + 16 * v174 > v170)
                    {
                      v175 = v174 - 1;
                      LODWORD(v176) = v175 & ((v504 >> 4) ^ (v504 >> 9));
                      v177 = (int32x2_t *****)(v173 + 16 * v176);
                      v178 = *v177;
                      if (v504 == *v177)
                      {
LABEL_309:
                        *v177 = (int32x2_t ****)-8192;
                        v172[304] = vadd_s32(v172[304], (int32x2_t)0x1FFFFFFFFLL);
                        v171 = v504;
                      }
                      else
                      {
                        v179 = 1;
                        while (v178 != (int32x2_t ****)-4096)
                        {
                          v180 = v176 + v179++;
                          v176 = v180 & v175;
                          v178 = *(int32x2_t *****)(v173 + 16 * v176);
                          if (v504 == v178)
                          {
                            v177 = (int32x2_t *****)(v173 + 16 * v176);
                            goto LABEL_309;
                          }
                        }
                      }
                      *((_BYTE *)v171 + 17) &= ~1u;
                    }
                  }
                }
              }
              v181 = v169[7];
              if (v181 == v152)
              {
LABEL_317:
                v124 = 1;
                goto LABEL_318;
              }
              if (v181 && v181 != -8192 && v181 != -4096)
              {
                v182 = v169[5] & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v182 = v169[6];
                v183 = (unint64_t *)v169[6];
                if (v183)
                {
                  *v183 = *v183 & 7 | v182;
                }
                else
                {
                  v184 = v169[7];
                  v185 = ***(int32x2_t ****)v184;
                  v186 = (unint64_t)v185[303];
                  if (v186 <= v182)
                  {
                    v187 = v185[305].u32[0];
                    if (v186 + 16 * v187 > v182)
                    {
                      v188 = v187 - 1;
                      LODWORD(v189) = v188 & ((v184 >> 4) ^ (v184 >> 9));
                      v190 = (uint64_t *)(v186 + 16 * v189);
                      v191 = *v190;
                      if (v184 == *v190)
                      {
LABEL_330:
                        *v190 = -8192;
                        v185[304] = vadd_s32(v185[304], (int32x2_t)0x1FFFFFFFFLL);
                        v184 = v169[7];
                      }
                      else
                      {
                        v192 = 1;
                        while (v191 != -4096)
                        {
                          v193 = v189 + v192++;
                          v189 = v193 & v188;
                          v191 = *(_QWORD *)(v186 + 16 * v189);
                          if (v184 == v191)
                          {
                            v190 = (uint64_t *)(v186 + 16 * v189);
                            goto LABEL_330;
                          }
                        }
                      }
                      *(_BYTE *)(v184 + 17) &= ~1u;
                    }
                  }
                }
              }
              v169[7] = v152;
              v124 = 1;
              if (v152 != -8192 && v152 != -4096)
              {
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v169 + 5));
                goto LABEL_317;
              }
LABEL_318:
              v126 += 40;
              v123 = ++v125;
              if (*(_QWORD *)(v122 + 96) <= (unint64_t)v125)
              {
                v50 = v454;
                v119 = v465;
                if ((v124 & 1) != 0)
                {
                  v194 = v484;
                  if (v484 >= (unint64_t)HIDWORD(v484))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v483, (uint64_t)v485, v484 + 1, 8);
                    v194 = v484;
                  }
                  *((_QWORD *)v483 + v194) = v122;
                  LODWORD(v484) = v484 + 1;
                }
                break;
              }
            }
          }
          v195 = v118 + 1;
          while (v195 != v121)
          {
            v196 = *v195++;
            v122 = v196;
            if (v196 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v118 = v195 - 1;
              goto LABEL_219;
            }
          }
          v98 = (unint64_t *)v490;
          v115 = (unint64_t *)__p;
        }
LABEL_342:
        if (v98 != v115)
          free(v98);
        if ((_DWORD)v484)
        {
          v197 = (uint64_t *)v483;
          v198 = 8 * v484;
          do
          {
            v199 = *v197;
            if (!sub_1C5EAC778(v50, v119, (uint64_t)v59))
              break;
            v463 |= sub_1C5638DE0(v5, v199, (uint64_t)v482, v119);
            ++v197;
            v198 -= 8;
          }
          while (v198);
        }
      }
      v200 = *(uint64_t ****)(v5 + 336);
      v201 = v200 + 9;
      v202 = (uint64_t ***)v200[9];
      if (v202 != v200 + 9)
      {
        do
        {
          if (v202)
            v203 = v202 - 3;
          else
            v203 = 0;
          v206 = v203[5];
          v204 = (uint64_t *)(v203 + 5);
          v205 = v206;
          v207 = *v206;
          if (*v206 != v204)
          {
            do
            {
              if (v207)
                v210 = (uint64_t)(v207 - 3);
              else
                v210 = 0;
              if (!*(_QWORD *)(v210 + 8) && llvm::wouldInstructionBeTriviallyDead(v210, 0))
              {
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v210 + 40) + 40, (uint64_t ***)v210);
                v208 = *(_QWORD *)(v210 + 24);
                v209 = *(_QWORD **)(v210 + 32);
                *v209 = v208;
                *(_QWORD *)(v208 + 8) = v209;
                *(_QWORD *)(v210 + 24) = 0;
                *(_QWORD *)(v210 + 32) = 0;
                llvm::Value::deleteValue((llvm::Value *)v210);
              }
              v207 = (uint64_t *)v205;
              v37 = v205 == (uint64_t **)v204;
              v205 = (uint64_t **)*v205;
            }
            while (!v37);
          }
          v202 = (uint64_t ***)*v202;
        }
        while (v202 != v201);
        v200 = *(uint64_t ****)(v5 + 336);
      }
      if ((*((_BYTE *)v200 + 23) & 0x20) == 0)
        goto LABEL_479;
      v211 = ***v200;
      __p = v200;
      v212 = *(_DWORD *)(v211 + 2496);
      if (v212)
      {
        v213 = *(_QWORD *)(v211 + 2480);
        v214 = v212 - 1;
        v215 = v214 & ((v200 >> 4) ^ (v200 >> 9));
        v216 = (uint64_t ****)(v213 + 40 * v215);
        v217 = *v216;
        if (*v216 == v200)
        {
LABEL_375:
          v222 = *((unsigned int *)v216 + 4);
          if ((_DWORD)v222)
          {
            v223 = (uint64_t *)(v216[1] + 1);
            v224 = 16 * v222;
            while (*((_DWORD *)v223 - 2))
            {
              v223 += 2;
              v224 -= 16;
              if (!v224)
                goto LABEL_479;
            }
            v225 = *v223;
            if (*v223)
            {
              llvm::DIBuilder::DIBuilder((uint64_t)&__p, v200[5], 0, *(_QWORD *)(v225 - 8 * *(unsigned int *)(v225 + 8) + 40));
              v226 = *(_QWORD *)(v225 + 16);
              v227 = (uint64_t *)(v226 & 0xFFFFFFFFFFFFFFF8);
              if ((v226 & 4) != 0)
                v227 = (uint64_t *)*v227;
              v501 = (void *)1;
              for (k = 8; k != 72; k += 16)
                *(void **)((char *)&v501 + k) = (void *)-4096;
              v229 = v200 + 9;
              v230 = v200[10];
              v459 = v200 + 9;
              while (2)
              {
                if (v230 != (uint64_t **)v229)
                {
                  v231 = v230 - 3;
                  *(_QWORD *)v461 = v230;
                  if (!v230)
                    v231 = 0;
                  v232 = v231 + 5;
                  v233 = v231[6];
LABEL_390:
                  if (v233 == (uint64_t *)v232)
                  {
                    v229 = v459;
                    v230 = *(uint64_t ***)(*(_QWORD *)v461 + 8);
                    continue;
                  }
                  if (v233)
                    v234 = (uint64_t)(v233 - 3);
                  else
                    v234 = 0;
                  v236 = (unsigned __int8 **)(v234 + 48);
                  v235 = *(void **)(v234 + 48);
                  v513 = v235;
                  if (v235)
                  {
                    llvm::MetadataTracking::track((uint64_t)&v513, (unsigned __int8 *)v235, 2);
                    if (v513)
                    {
                      llvm::DebugLoc::get((unsigned __int8 *)*((unsigned int *)v513 + 1), 0, 0, *((unsigned __int16 *)v513 + 1), v225, (unsigned __int8 **)&v510);
                      if (v513)
                        llvm::MetadataTracking::untrack((uint64_t)&v513, (unsigned __int8 *)v513);
                      v513 = v510;
                      if (v510)
                      {
                        llvm::MetadataTracking::retrack((uint64_t)&v510, (unsigned __int8 *)v510, (uint64_t)&v513);
                        v531[0] = v513;
                        if (v513)
                          llvm::MetadataTracking::track((uint64_t)v531, (unsigned __int8 *)v513, 2);
                      }
                      else
                      {
                        v531[0] = 0;
                      }
                      if (v531 == (void **)v236)
                      {
                        if (v531[0])
                          llvm::MetadataTracking::untrack((uint64_t)v531, (unsigned __int8 *)v531[0]);
                      }
                      else
                      {
                        if (*v236)
                          llvm::MetadataTracking::untrack(v234 + 48, *v236);
                        v237 = (unsigned __int8 *)v531[0];
                        *v236 = (unsigned __int8 *)v531[0];
                        if (v237)
                        {
                          llvm::MetadataTracking::retrack((uint64_t)v531, v237, v234 + 48);
                          v531[0] = 0;
                        }
                      }
                      if (v513)
                        llvm::MetadataTracking::untrack((uint64_t)&v513, (unsigned __int8 *)v513);
                    }
                  }
                  if ((*(_BYTE *)(v234 + 23) & 0x20) != 0)
                  {
                    v238 = ***(_QWORD ***)v234;
                    v513 = (void *)v234;
                    v239 = *(_DWORD *)(v238 + 2496);
                    if (!v239)
                    {
                      v280 = 0;
                      goto LABEL_459;
                    }
                    v240 = *(_QWORD *)(v238 + 2480);
                    v241 = v239 - 1;
                    v242 = v241 & ((v234 >> 4) ^ (v234 >> 9));
                    v243 = (_QWORD *)(v240 + 40 * v242);
                    v244 = *v243;
                    if (*v243 != v234)
                    {
                      v245 = 0;
                      v246 = 1;
                      while (v244 != -4096)
                      {
                        if (v245)
                          v247 = 0;
                        else
                          v247 = v244 == -8192;
                        if (v247)
                          v245 = v243;
                        v248 = v242 + v246++;
                        v242 = v248 & v241;
                        v243 = (_QWORD *)(v240 + 40 * v242);
                        v244 = *v243;
                        if (*v243 == v234)
                          goto LABEL_418;
                      }
                      if (v245)
                        v280 = v245;
                      else
                        v280 = v243;
LABEL_459:
                      v243 = sub_1C541AB24(v238 + 2480, (uint64_t)&v513, (uint64_t *)&v513, v280);
                      v281 = v513;
                      v243[4] = 0;
                      v243[3] = 0;
                      *v243 = v281;
                      v243[1] = v243 + 3;
                      v243[2] = 0x100000000;
                    }
LABEL_418:
                    v249 = *((unsigned int *)v243 + 4);
                    if ((_DWORD)v249)
                    {
                      v250 = (_QWORD *)(v243[1] + 8);
                      v251 = 16 * v249;
                      while (*((_DWORD *)v250 - 2) != 18)
                      {
                        v250 += 2;
                        v251 -= 16;
                        if (!v251)
                          goto LABEL_422;
                      }
                      v255 = *v250;
                      if (*v250)
                      {
                        v513 = &v515;
                        v514 = (void *)0x400000000;
                        v256 = *(unsigned int *)(v255 + 8);
                        if (v256 < 2)
                        {
                          v257 = 0;
                          v278 = &v515;
                        }
                        else
                        {
                          v257 = 0;
                          for (m = 1; m < v256; ++m)
                          {
                            Impl = *(_QWORD *)(v255 - 8 * v256 + 8 * m);
                            if (Impl && *(_BYTE *)Impl == 5)
                            {
                              Impl = llvm::DILocation::getImpl(v227, *(_DWORD *)(Impl + 4), *(unsigned __int16 *)(Impl + 2), v225, 0, 0, 0, 1);
                              v257 = v514;
                            }
                            if (v257 >= HIDWORD(v514))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v513, (uint64_t)&v515, v257 + 1, 8);
                              v257 = v514;
                            }
                            *((_QWORD *)v513 + v257) = Impl;
                            v257 = (_DWORD)v514 + 1;
                            LODWORD(v514) = (_DWORD)v514 + 1;
                            v256 = *(unsigned int *)(v255 + 8);
                          }
                          v278 = (uint64_t *)v513;
                        }
                        v279 = (llvm::MDNode *)llvm::MDTuple::getImpl(v227, v278, v257, 0, 1);
                        if (v279 || *v236 || (*(_BYTE *)(v234 + 23) & 0x20) != 0)
                          llvm::Value::setMetadata((llvm::Value *)v234, 18, v279);
                        if (v513 != &v515)
                          free(v513);
                      }
                    }
                  }
LABEL_422:
                  v252 = sub_1C53923FC(v234);
                  if (v252)
                    v253 = v234;
                  else
                    v253 = 0;
                  if (v233 && v252)
                  {
                    v260 = *(_QWORD *)(*(_QWORD *)(v253 - 32 * (*(_DWORD *)(v253 + 20) & 0x7FFFFFF) + 32) + 24);
                    v513 = (void *)v260;
                    v261 = sub_1C6281BA0(&v501, &v513);
                    v262 = (unsigned __int8 *)v261[1];
                    if (!v262)
                    {
                      v263 = v261;
                      v264 = (_QWORD *)(v260 - 8 * *(unsigned int *)(v260 + 8));
                      v265 = v264[1];
                      if (v265)
                      {
                        v282 = *(_QWORD **)(v265 + 8);
                        v283 = *v282;
                        v267 = (unsigned __int8 *)(v282 + 3);
                        v266 = v283;
                      }
                      else
                      {
                        v266 = 0;
                        v267 = 0;
                      }
                      v262 = sub_1C5393B20((uint64_t *)v490, (uint64_t)&v497, (unsigned __int8 *)v225, v267, v266, 0, v264[2], *(_DWORD *)(v260 + 24), v264[3], 0, 0, *(_DWORD *)(v260 + 28), 0);
                      v263[1] = v262;
                    }
                    sub_1C6281B64(v253, (uint64_t)v262);
                  }
                  v254 = sub_1C5392454(v234);
                  if (v233 && v254)
                  {
                    v268 = *(unsigned int **)(*(_QWORD *)(v234 - 32 * (*(_DWORD *)(v234 + 20) & 0x7FFFFFF)) + 24);
                    v513 = v268;
                    v269 = sub_1C6281BA0(&v501, &v513);
                    v270 = (unsigned __int8 *)v269[1];
                    if (!v270)
                    {
                      v271 = v269;
                      v272 = &v268[-2 * v268[2]];
                      v273 = *((_QWORD *)v272 + 1);
                      if (v273)
                      {
                        v274 = *(_QWORD *)(v273 + 8);
                        v275 = *(_QWORD **)v274;
                        v276 = *((_QWORD *)v272 + 2);
                        v277 = v268[6];
                        if (*(_QWORD *)v274)
                          v275 = llvm::MDString::get(v227, (unsigned __int8 *)(v274 + 24), (size_t)v275);
                      }
                      else
                      {
                        v275 = 0;
                        v276 = *((_QWORD *)v272 + 2);
                        v277 = v268[6];
                      }
                      v270 = (unsigned __int8 *)llvm::DILabel::getImpl(v227, v225, (uint64_t)v275, v276, v277, 0, 1);
                      v271[1] = v270;
                    }
                    v284 = llvm::MetadataAsValue::get(v227, v270);
                    v285 = *(_DWORD *)(v234 + 20) & 0x7FFFFFF;
                    v286 = -v285;
                    v287 = (uint64_t *)(v234 - 32 * v285);
                    if (*v287)
                    {
                      v288 = v234 + 32 * v286;
                      v290 = *(_QWORD **)(v288 + 16);
                      v289 = (_QWORD *)(v288 + 16);
                      *v290 = *(v289 - 1);
                      v291 = *(v289 - 1);
                      if (v291)
                        *(_QWORD *)(v291 + 16) = *v289;
                    }
                    *v287 = v284;
                    if (v284)
                    {
                      v294 = *(_QWORD *)(v284 + 8);
                      v292 = (uint64_t **)(v284 + 8);
                      v293 = v294;
                      v295 = v234 + 32 * v286;
                      *(_QWORD *)(v295 + 8) = v294;
                      if (v294)
                        *(_QWORD *)(v293 + 16) = v295 + 8;
                      *(_QWORD *)(v295 + 16) = v292;
                      *v292 = v287;
                    }
                  }
                  v233 = (uint64_t *)v233[1];
                  goto LABEL_390;
                }
                break;
              }
              if ((v501 & 1) == 0)
                MEMORY[0x1CAA32FB4](v502, 8);
              sub_1C50F023C((uint64_t)&__p);
              v5 = v464;
            }
          }
LABEL_479:
          v296 = *(_QWORD *)(v5 + 336);
          if (!(_DWORD)v487)
          {
            v50 = v454;
            v51 = v455;
            v54 = v456;
            v53 = (uint64_t *)v451;
            v347 = v465;
            goto LABEL_677;
          }
          v297 = *(uint64_t ***)(v296 + 40);
          v298 = (llvm::DataLayout *)(v297 + 34);
          __p = &v491;
          v490 = (void *)0x1000000000;
          v299 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v465 + 336))(v465);
          v300 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v299 + 8))(v299);
          v301 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v299 + 56))(v299, v300);
          LODWORD(v299) = ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v299 + 48))(v299, v300) >> 1)
                        * v301;
          v531[0] = v532;
          v531[1] = (void *)0x600000000;
          sub_1C4765AA4((char *)v531, (v299 + 63) >> 6, 0);
          v533 = v299;
          v305 = *v297;
          v513 = &v515;
          v514 = (void *)0x200000000;
          v520 = v305;
          v521 = &v529;
          v522 = &v530;
          v523 = 0;
          v524 = 0;
          v525 = 512;
          v526 = 7;
          v518 = 0;
          v519 = 0;
          v527 = 0;
          v528 = 0;
          v529 = &unk_1E8167888;
          v530 = &unk_1E8167A08;
          v510 = v512;
          v511 = 0x800000000;
          if (!(_DWORD)v487)
            goto LABEL_539;
          v306 = (llvm::GlobalValue **)v486;
          v307 = (llvm::GlobalValue **)((char *)v486 + 8 * v487);
          do
          {
            v308 = *v306;
            v501 = &v503;
            v502 = 0x800000000;
            v309 = *((_QWORD *)v308 + 1);
            if (v309)
            {
              v310 = 0;
              do
              {
                v311 = *(_QWORD *)(v309 + 24);
                if (v310 >= HIDWORD(v502))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v501, (uint64_t)&v503, v310 + 1, 16);
                  v313 = (char *)v501 + 16 * v502;
                  *v313 = v311;
                  v313[1] = 0;
                  v310 = v502;
                }
                else
                {
                  v312 = (char *)v501 + 16 * v310;
                  *(_QWORD *)v312 = v311;
                  *((_DWORD *)v312 + 2) = 0;
                }
                LODWORD(v502) = ++v310;
                v309 = *(_QWORD *)(v309 + 8);
              }
              while (v309);
              while (1)
              {
                while (1)
                {
                  if (!v310)
                    goto LABEL_523;
                  v314 = (char *)v501 + 16 * v310;
                  v315 = *((_QWORD *)v314 - 2);
                  v316 = *((_QWORD *)v314 - 1);
                  LODWORD(v502) = v310 - 1;
                  v317 = *(unsigned __int8 *)(v315 + 16);
                  if (v315 && v317 >= 0x1C)
                    break;
                  if (v315)
                    v319 = v317 == 5;
                  else
                    v319 = 0;
                  if (!v319)
                  {
LABEL_511:
                    v336 = v511;
                    if (v511 >= (unint64_t)HIDWORD(v511))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v510, (uint64_t)v512, v511 + 1, 8);
                      v336 = v511;
                    }
                    *((_QWORD *)v510 + v336) = v315;
                    LODWORD(v511) = v511 + 1;
                    goto LABEL_514;
                  }
                  AsInstruction = llvm::ConstantExpr::getAsInstruction((llvm::ConstantExpr *)v315, 0);
                  v324 = sub_1C5634B90((uint64_t)AsInstruction, v298, v321, v322, v323);
                  llvm::Value::deleteValue((llvm::Value *)AsInstruction);
LABEL_510:
                  if (!HIDWORD(v324))
                    goto LABEL_511;
                  v337 = *(_QWORD *)(v315 + 8);
                  if (!v337)
                    goto LABEL_514;
                  v338 = v324 + v316;
                  v310 = v502;
                  do
                  {
                    v339 = *(_QWORD *)(v337 + 24);
                    if (v310 >= HIDWORD(v502))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v501, (uint64_t)&v503, v310 + 1, 16);
                      v341 = (char *)v501 + 16 * v502;
                      *v341 = v339;
                      v341[1] = v338;
                      v310 = v502;
                    }
                    else
                    {
                      v340 = (char *)v501 + 16 * v310;
                      *(_QWORD *)v340 = v339;
                      *((_DWORD *)v340 + 2) = v338;
                    }
                    LODWORD(v502) = ++v310;
                    v337 = *(_QWORD *)(v337 + 8);
                  }
                  while (v337);
                }
                if (*(_QWORD *)(*(_QWORD *)(v315 + 40) + 56) != v296)
                  goto LABEL_514;
                if (v317 != 60)
                {
                  v324 = sub_1C5634B90(v315, v298, v302, v303, v304);
                  goto LABEL_510;
                }
                v325 = sub_1C5EAB3E0(v308, (int)v316, v465, 0);
                v326 = v490;
                if (v490 >= (unint64_t)HIDWORD(v490))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, (uint64_t)&v491, v490 + 1, 16);
                  v326 = v490;
                }
                v327 = v325;
                v328 = (uint64_t *)((char *)__p + 16 * v326);
                *v328 = v315;
                v328[1] = v325;
                LODWORD(v490) = (_DWORD)v490 + 1;
                sub_1C4768AD0((uint64_t)v298, *(_QWORD *)v315);
                v331 = v330;
                if ((_DWORD)v329 == 1)
                v332 = v327 >> 1;
                v333 = v327 + ((unint64_t)(v331 + 7) >> 3) + 1;
                if (v327 >> 1 < v333 >> 1)
                {
                  v334 = v333 >> 1;
                  v335 = v531[0];
                  do
                  {
                    v335[v332 >> 6] |= 1 << v332;
                    ++v332;
                  }
                  while (v334 != v332);
                }
LABEL_514:
                v310 = v502;
              }
            }
LABEL_523:
            if (v501 != &v503)
              free(v501);
            ++v306;
          }
          while (v306 != v307);
          v342 = v511;
          v5 = v464;
          while (v342)
          {
            v343 = *((_QWORD *)v510 + --v342);
            LODWORD(v511) = v342;
            if (v343)
              v344 = *(unsigned __int8 *)(v343 + 16) >= 0x1Cu;
            else
              v344 = 0;
            if (v344)
            {
              if (*(_QWORD *)(*(_QWORD *)(v343 + 40) + 56) == v296)
                llvm::report_fatal_error((llvm *)"Unsupported instruction in uniform function", (const char *)1);
            }
            else
            {
              for (n = *(_QWORD *)(v343 + 8); n; n = *(_QWORD *)(n + 8))
              {
                v346 = *(_QWORD *)(n + 24);
                if (v342 >= HIDWORD(v511))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v510, (uint64_t)v512, v342 + 1, 8);
                  v342 = v511;
                }
                *((_QWORD *)v510 + v342) = v346;
                v342 = v511 + 1;
                LODWORD(v511) = v511 + 1;
              }
            }
          }
LABEL_539:
          v347 = v465;
          if (!(_DWORD)v490)
          {
LABEL_668:
            v50 = v454;
            if (v510 != v512)
              free(v510);
            v54 = v456;
            v51 = v455;
            v53 = (uint64_t *)v451;
            if (v513 != &v515)
              free(v513);
            if (v531[0] != v532)
              free(v531[0]);
            if (__p != &v491)
              free(__p);
            v296 = *(_QWORD *)(v5 + 336);
LABEL_677:
            v422 = v296 + 72;
            for (ii = *(_QWORD *)(v296 + 80); ii != v422; ii = *(_QWORD *)(ii + 8))
            {
              v424 = ii - 24;
              if (!ii)
                v424 = 0;
              v425 = v424 + 40;
              v426 = *(_QWORD *)(v424 + 48);
              if (v426 != v425)
              {
                while (1)
                {
                  v427 = v426 ? v426 - 24 : 0;
                  if (*(_BYTE *)(v427 + 16) == 84)
                  {
                    v428 = *(_QWORD *)(v427 - 32);
                    if (!v428
                      || *(_BYTE *)(v428 + 16)
                      || *(_QWORD *)(v428 + 24) != *(_QWORD *)(v427 + 72)
                      || (*(_BYTE *)(v428 + 33) & 0x20) == 0)
                    {
                      v429 = (*(unsigned __int16 *)(v428 + 18) >> 4) & 0x3FF;
                      if (!v429)
                        break;
                      if (v429 == 255 || v429 == 8)
                        break;
                    }
                  }
                  v426 = *(_QWORD *)(v426 + 8);
                  v431 = ii - 24;
                  if (!ii)
                    v431 = 0;
                  v432 = v431 + 40;
                  while (v426 == v432)
                  {
                    ii = *(_QWORD *)(ii + 8);
                    if (ii == v422)
                      goto LABEL_707;
                    v433 = ii - 24;
                    if (!ii)
                      v433 = 0;
                    v432 = v433 + 40;
                    v426 = *(_QWORD *)(v433 + 48);
                  }
                  if (ii == v422)
                    goto LABEL_707;
                }
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v347 + 368))(v347, 1);
                break;
              }
            }
LABEL_707:
            if (v483 != v485)
              free(v483);
            v60 = v463;
            goto LABEL_710;
          }
          v476[1] = 0;
          v476[0] = 0;
          v477 = 0;
          if (!v533)
            goto LABEL_550;
          v348 = 0;
          v349 = (uint64_t *)v531[0];
          v350 = (v533 - 1) & 0xFFFFFFC0;
          while (1)
          {
            v352 = *v349++;
            v351 = v352;
            v353 = v350 + v348 ? -1 : 0xFFFFFFFFFFFFFFFFLL >> -(char)v533;
            v354 = v353 & v351;
            if (v354)
              break;
            v348 -= 64;
            if (v350 + v348 == -64)
              goto LABEL_550;
          }
          v355 = __clz(__rbit64(v354));
          if ((_DWORD)v355 + 1 == (_DWORD)v348)
          {
LABEL_550:
            LOWORD(v356) = 0;
LABEL_551:
            v357 = atomic_load((unsigned __int8 *)&qword_1ED808660);
            if ((v357 & 1) == 0 && __cxa_guard_acquire(&qword_1ED808660))
              __cxa_guard_release(&qword_1ED808660);
            v358 = 0;
            v359 = *(_QWORD *)(v296 + 80);
            if (v359)
              v360 = v359 - 24;
            else
              v360 = 0;
            v361 = *(_QWORD *)(v360 + 48);
            if (v361)
              v362 = v361 - 24;
            else
              v362 = 0;
            v518 = *(_QWORD *)(v362 + 40);
            v519 = v362 + 24;
            v363 = *(void **)(v362 + 48);
            v501 = v363;
            if (v363)
            {
              llvm::MetadataTracking::track((uint64_t)&v501, (unsigned __int8 *)v363, 2);
              v358 = v501;
            }
            sub_1C4774EF4((uint64_t)&v513, 0, (uint64_t)v358);
            if (v501)
              llvm::MetadataTracking::untrack((uint64_t)&v501, (unsigned __int8 *)v501);
            v364 = *(_QWORD *)(v296 + 80);
            if (v364)
              v365 = v364 - 24;
            else
              v365 = 0;
            Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(v365 + 56) + 40), 2755, 0, 0);
            v368 = Declaration;
            if (Declaration)
              v369 = *(uint64_t ***)(Declaration + 24);
            else
              v369 = 0;
            v370 = (unsigned __int16)v356;
            v371 = *(llvm::ConstantInt **)(*v520 + 1936);
            v372 = *(_DWORD *)(*v520 + 1944);
            LODWORD(v502) = v372 >> 8;
            if (v372 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v501, v370, 0);
            }
            else
            {
              if (v372 <= 0xFF)
                v373 = 0;
              else
                v373 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v372);
              v501 = (void *)(v373 & v370);
            }
            v374 = llvm::ConstantInt::get(v371, (llvm::LLVMContext *)&v501, v367);
            if (v502 >= 0x41 && v501)
              MEMORY[0x1CAA32F9C](v501, 0x1000C8000313F17);
            v498[0] = v374;
            LOWORD(v505) = 257;
            v375 = (uint64_t ***)sub_1C4774778((uint64_t *)&v513, v369, v368, (uint64_t *)v498, 1, (uint64_t)&v501, 0);
            v501 = "gather_buffer_stk";
            LOWORD(v505) = 259;
            v462 = v375;
            llvm::Value::setName(v375, (uint64_t)&v501);
            if ((_DWORD)v490)
            {
              v376 = (uint64_t **)__p;
              v460 = (uint64_t **)((char *)__p + 16 * v490);
              do
              {
                v377 = *v376;
                v378 = *((_DWORD *)v376 + 2);
                sub_1C4768AD0((uint64_t)v298, **v376);
                if ((_DWORD)v379 == 1)
                v475 = v378 >> 1;
                v380 = sub_1C476BFEC((uint64_t)v476, &v475)[1];
                v381 = v475;
                v498[1] = 0;
                v498[0] = 0;
                v499 = 0;
                LODWORD(v502) = 0;
                v506 = 0;
                v507 = 0;
                v501 = &unk_1E81A7208;
                v509 = v498;
                v508 = 0;
                v504 = 0;
                v505 = 0;
                v503 = 0;
                llvm::raw_ostream::write((llvm::raw_ostream *)&v501, 117);
                sub_1C5E21910((llvm::raw_ostream *)&v501, v381 >> 1, 0, 0, 0);
                v382 = v505;
                if ((v381 & 1) != 0)
                {
                  if (v505 < (char *)v504)
                  {
                    ++v505;
                    v383 = 104;
                    goto LABEL_583;
                  }
                  v384 = 104;
                }
                else
                {
                  if (v505 < (char *)v504)
                  {
                    ++v505;
                    v383 = 108;
LABEL_583:
                    *v382 = v383;
                    goto LABEL_587;
                  }
                  v384 = 108;
                }
                llvm::raw_ostream::write((llvm::raw_ostream *)&v501, v384);
LABEL_587:
                if (*((char *)v509 + 23) < 0)
                {
                  sub_1C47EBC30(__dst, *v509, (unint64_t)v509[1]);
                }
                else
                {
                  v385 = *(_OWORD *)v509;
                  v474 = v509[2];
                  *(_OWORD *)__dst = v385;
                }
                v501 = off_1E81A6E70;
                if (v508 == 1 && v503)
                  MEMORY[0x1CAA32F9C](v503, 0x1000C8077774924);
                v386 = v498;
                if (SHIBYTE(v499) < 0)
                  operator delete(v498[0]);
                sub_1C4D8AE2C((uint64_t)&v513, v377[5], (uint64_t)(v377 + 3));
                v387 = *v520;
                if (SHIBYTE(v474) >= 0)
                  v388 = HIBYTE(v474) & 0x7F;
                else
                  v388 = (size_t)__dst[1];
                sub_1C484371C((uint64_t)v498, v388 + 5);
                if (v499 < 0)
                  v386 = (void **)v498[0];
                if (v388)
                {
                  if (SHIBYTE(v474) >= 0)
                    v389 = __dst;
                  else
                    v389 = (void **)__dst[0];
                  memmove(v386, v389, v388);
                }
                strcpy((char *)v386 + v388, "_addr");
                LOWORD(v505) = 260;
                v501 = v498;
                v390 = (unsigned __int8 *)sub_1C48678B0((uint64_t *)&v513, (llvm::GetElementPtrInst *)(v387 + 1912), v462, v380 + (v378 & 1), (uint64_t)&v501);
                if (SHIBYTE(v499) < 0)
                  operator delete(v498[0]);
                v391 = llvm::PointerType::get((llvm::PointerType *)*v377, (llvm::Type *)(*(_DWORD *)(*(_QWORD *)v390 + 8) >> 8));
                if (SHIBYTE(v474) >= 0)
                  v392 = HIBYTE(v474) & 0x7F;
                else
                  v392 = (size_t)__dst[1];
                sub_1C484371C((uint64_t)v498, v392 + 11);
                if (v499 >= 0)
                  v393 = v498;
                else
                  v393 = (void **)v498[0];
                if (v392)
                {
                  if (SHIBYTE(v474) >= 0)
                    v394 = __dst;
                  else
                    v394 = (void **)__dst[0];
                  memmove(v393, v394, v392);
                }
                strcpy((char *)v393 + v392, "_typed_addr");
                LOWORD(v505) = 260;
                v501 = v498;
                v395 = sub_1C4773E38((uint64_t *)&v513, 49, v390, v391, (uint64_t)&v501);
                if (SHIBYTE(v499) < 0)
                  operator delete(v498[0]);
                v396 = (llvm::PointerType *)*v377;
                if (SHIBYTE(v474) >= 0)
                  v397 = HIBYTE(v474) & 0x7F;
                else
                  v397 = (size_t)__dst[1];
                sub_1C484371C((uint64_t)v471, v397 + 6);
                if (v472 >= 0)
                  v398 = v471;
                else
                  v398 = (void **)v471[0];
                if (v397)
                {
                  if (SHIBYTE(v474) >= 0)
                    v399 = __dst;
                  else
                    v399 = (void **)__dst[0];
                  memmove(v398, v399, v397);
                }
                strcpy((char *)v398 + v397, "_value");
                v500 = 260;
                v498[0] = v471;
                llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v518 + 56) + 40) + 272, (uint64_t)v396);
                v401 = v400;
                v402 = (char *)operator new(0x60uLL);
                v403 = v402;
                v404 = (llvm::Value *)(v402 + 32);
                *((_QWORD *)v402 + 2) = 0;
                *((_QWORD *)v402 + 3) = v402 + 32;
                LOWORD(v505) = 257;
                *((_QWORD *)v402 + 4) = v396;
                *((_QWORD *)v402 + 5) = 0;
                *((_WORD *)v402 + 24) = 60;
                *((_DWORD *)v402 + 13) = 1;
                *(_OWORD *)(v402 + 56) = 0u;
                *(_OWORD *)(v402 + 72) = 0u;
                *((_DWORD *)v402 + 22) = 0;
                *(_QWORD *)v402 = v395;
                *((_QWORD *)v402 + 1) = 0;
                if (v395)
                {
                  v407 = *((_QWORD *)v395 + 1);
                  v406 = v395 + 8;
                  v405 = v407;
                  *((_QWORD *)v402 + 1) = v407;
                  if (v407)
                    *(_QWORD *)(v405 + 16) = v402 + 8;
                  *((_QWORD *)v402 + 2) = v406;
                  *v406 = v402;
                }
                *((_WORD *)v402 + 25) = 2 * (v401 & 0x3F);
                v402[92] = 1;
                llvm::Value::setName((uint64_t ***)v402 + 4, (uint64_t)&v501);
                (*((void (**)(void **, llvm::Value *, void **, uint64_t, uint64_t))*v522 + 2))(v522, v404, v498, v518, v519);
                if ((_DWORD)v514)
                {
                  v415 = (char *)v513;
                  v416 = (char *)v513 + 16 * v514;
                  v417 = (unsigned __int8 **)(v403 + 80);
                  do
                  {
                    v418 = *(_DWORD *)v415;
                    v419 = (unsigned __int8 *)*((_QWORD *)v415 + 1);
                    if (v419)
                    {
                      if (!v418)
                      {
                        v478 = (unsigned __int8 *)*((_QWORD *)v415 + 1);
                        llvm::MetadataTracking::track((uint64_t)&v478, v419, 2);
                        v420 = *v417;
                        goto LABEL_660;
                      }
                    }
                    else
                    {
                      v420 = *v417;
                      if (!*v417 && (v403[55] & 0x20) == 0)
                        goto LABEL_657;
                      if (!v418)
                      {
                        v478 = 0;
LABEL_660:
                        if (v420)
                          llvm::MetadataTracking::untrack((uint64_t)(v403 + 80), v420);
                        v421 = v478;
                        *v417 = v478;
                        if (v421)
                          llvm::MetadataTracking::retrack((uint64_t)&v478, v421, (uint64_t)(v403 + 80));
                        goto LABEL_657;
                      }
                    }
                    llvm::Value::setMetadata(v404, *(_DWORD *)v415, (llvm::MDNode *)v419);
LABEL_657:
                    v415 += 16;
                  }
                  while (v415 != v416);
                }
                if (v472 < 0)
                  operator delete(v471[0]);
                v347 = v465;
                if (sub_1C5645B98(v458, (uint64_t)v377))
                {
                  v408 = *(uint64_t ***)(v464 + 800);
                  v409 = *(unsigned int *)(v464 + 808);
                  v410 = &v408[v409];
                  if ((_DWORD)v409)
                  {
                    v411 = 8 * v409;
                    while (*v408 != v377)
                    {
                      ++v408;
                      v411 -= 8;
                      if (!v411)
                      {
                        v408 = v410;
                        break;
                      }
                    }
                  }
                  if (v410 == v408 + 1)
                  {
                    v412 = v464;
                  }
                  else
                  {
                    memmove(v408, v408 + 1, (char *)v410 - (char *)(v408 + 1));
                    v412 = v464;
                    LODWORD(v409) = *(_DWORD *)(v464 + 808);
                  }
                  *(_DWORD *)(v412 + 808) = v409 - 1;
                }
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v377, v404, (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v377[5] + 40, (uint64_t ***)v377);
                v413 = v377[3];
                v414 = (uint64_t *)v377[4];
                *v414 = v413;
                *(_QWORD *)(v413 + 8) = v414;
                v377[3] = 0;
                v377[4] = 0;
                llvm::Value::deleteValue((llvm::Value *)v377);
                if (SHIBYTE(v474) < 0)
                  operator delete(__dst[0]);
                v376 += 2;
                v5 = v464;
              }
              while (v376 != v460);
            }
            MEMORY[0x1CAA32FB4](v476[0], 4);
            goto LABEL_668;
          }
          v356 = 0;
          v434 = v355 - v348;
          while (1)
          {
            LODWORD(v501) = v434;
            if (!v477)
              break;
            v435 = (v477 - 1) & (37 * v434);
            v436 = (_DWORD *)(v476[0] + 8 * v435);
            v437 = *v436;
            v438 = v434;
            if ((_DWORD)v434 != *v436)
            {
              v439 = 0;
              v440 = 1;
              while (v437 != -1)
              {
                if (v439)
                  v441 = 0;
                else
                  v441 = v437 == -2;
                if (v441)
                  v439 = v436;
                v442 = v435 + v440++;
                v435 = v442 & (v477 - 1);
                v436 = (_DWORD *)(v476[0] + 8 * v435);
                v437 = *v436;
                if ((_DWORD)v434 == *v436)
                {
                  v438 = v434;
                  goto LABEL_732;
                }
              }
              if (v439)
                v443 = v439;
              else
                v443 = v436;
              goto LABEL_731;
            }
LABEL_732:
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v465 + 608))(v465, v438);
            v356 += 2;
            v434 = sub_1C476BA0C(v531, (int)v434 + 1, v533, 1u);
            if ((_DWORD)v434 == -1)
              goto LABEL_551;
          }
          v443 = 0;
LABEL_731:
          v444 = sub_1C476C0AC((uint64_t)v476, (uint64_t)&v501, &v501, v443);
          *v444 = (_DWORD)v501;
          v444[1] = v356;
          v438 = v501;
          goto LABEL_732;
        }
        v218 = 0;
        v219 = 1;
        while (v217 != (uint64_t ***)-4096)
        {
          if (v218)
            v220 = 0;
          else
            v220 = v217 == (uint64_t ***)-8192;
          if (v220)
            v218 = v216;
          v221 = v215 + v219++;
          v215 = v221 & v214;
          v216 = (uint64_t ****)(v213 + 40 * v215);
          v217 = *v216;
          if (*v216 == v200)
            goto LABEL_375;
        }
        if (v218)
          v445 = v218;
        else
          v445 = v216;
      }
      else
      {
        v445 = 0;
      }
      v216 = (uint64_t ****)sub_1C541AB24(v211 + 2480, (uint64_t)&__p, (uint64_t *)&__p, v445);
      v446 = (uint64_t ***)__p;
      v216[4] = 0;
      v216[3] = 0;
      *v216 = v446;
      v216[1] = (uint64_t ***)(v216 + 3);
      v216[2] = (uint64_t ***)0x100000000;
      goto LABEL_375;
    }
    LOBYTE(v54) = 0;
LABEL_749:
    if ((v479 & 1) == 0)
      MEMORY[0x1CAA32FB4](v480, 8);
    if ((v482[0] & 1) == 0)
      MEMORY[0x1CAA32FB4](v482[1], 8);
  }
  return v54 & 1;
}

uint64_t sub_1C5638D48(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;

  v3 = result + 8;
  if ((*(_BYTE *)result & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      v7 = 0;
      goto LABEL_15;
    }
    v3 = *(_QWORD *)(result + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_15;
    }
    if (v9)
      v7 = v9;
  }
LABEL_15:
  *a3 = v7;
  return result;
}

uint64_t sub_1C5638DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  llvm::Loop *v26;
  unint64_t **v27;
  uint64_t v28;
  _BOOL4 v29;
  const llvm::DataLayout *v30;
  uint64_t v31;
  llvm **v32;
  llvm **v33;
  int v34;
  llvm *v35;
  llvm::ScalarEvolution *v36;
  char v37;
  void *v38;
  int v39;
  unsigned int v40;
  BOOL v41;
  int v42;
  BOOL v44;
  char *v45;
  uint64_t (*v46)(llvm::Instruction *, uint64_t, int *, int, int, int, int, uint64_t, uint64_t *, uint64_t, char);
  void (**v47)(void);
  uint8x8_t v48;
  uint64_t v49;
  uint64_t m;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t n;
  _QWORD *v61;
  unsigned int *v62;
  unsigned __int8 *Impl;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  char v80;
  uint64_t v81;
  int64x2_t v82;
  uint64_t v83;
  int64x2_t v84;
  int v85;
  uint64_t v86;
  int64x2_t v87;
  uint64_t v88;
  int64x2_t v89;
  uint64_t v90;
  int64x2_t v91;
  int v92;
  uint64_t v93;
  int v94;
  unsigned int v95;
  char v96;
  uint64_t *v97;
  char *v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  unsigned int v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  int v107;
  BOOL v108;
  unsigned int v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char v124;
  unsigned int v125;
  uint64_t v126;
  void **v127;
  uint64_t v128;
  _QWORD *v129;
  char v130;
  unsigned int v131;
  uint64_t v132;
  void **v133;
  uint64_t v134;
  int v136;
  unsigned int v137;
  void *v138;
  int v139;
  unsigned int v140;
  void *v141;
  uint64_t v142;
  int v143;
  int16x8_t v144;
  int v145;
  _QWORD *v146;
  int v147;
  uint64_t v148;
  void **v149;
  _BOOL4 v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t (*v157)(llvm::Instruction *, uint64_t, int *, int, int, int, int, uint64_t, uint64_t *, uint64_t, char);
  int v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  BOOL v163;
  void *__p[2];
  _BYTE v165[7];
  char v166;
  int v167;
  unsigned int v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  _BYTE v174[256];
  uint64_t v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  _BYTE v179[256];
  _BYTE *v180;
  void *v181;
  uint64_t v182;
  int v183;
  _BYTE v184[256];
  __int128 v185;
  int v186;
  __int128 v187;
  unsigned int v188;
  __int128 v189;
  int v190;
  int v191;
  _BYTE *v192;
  void *v193;
  uint64_t v194;
  int v195;
  _BYTE v196[128];
  uint64_t v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  _BYTE v201[128];
  uint64_t v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  _BYTE v206[256];
  _BYTE *v207;
  void *v208;
  uint64_t v209;
  int v210;
  _BYTE v211[64];
  _BYTE *v212;
  void *v213;
  _BYTE v214[12];
  _BYTE v215[128];
  _BYTE *v216;
  void *__b;
  _BYTE v218[12];
  _BYTE v219[128];
  void *v220;
  uint64_t v221;
  _BYTE v222[256];
  uint64_t v223;
  void *v224[32];
  void *v225;
  uint64_t v226;
  _BYTE v227[256];
  void *v228;
  uint64_t v229;
  _BYTE v230[128];
  void *v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  llvm::Loop *v235;
  int32x2_t *v236;
  uint64_t *v237;
  uint64_t v238;
  int v239;
  int v240;
  int v241;
  __int16 v242;
  unsigned __int32 v243;
  char v244;
  char v245;
  BOOL v246;
  char v247;
  char v248;
  _QWORD v249[3];
  _QWORD *v250;
  void *v251;
  unsigned int v252;
  unsigned int v253;
  _WORD v254[256];
  void *v255;
  void *v256;
  _BYTE v257[280];
  void *v258;
  void *v259;
  void *v260;
  void *v261;
  uint64_t v262;
  uint64_t *v263;
  _BYTE v264[24];
  _BYTE *v265;
  uint64_t v266;
  _QWORD *v267;
  unsigned int v268;
  __int16 v269;
  uint64_t v270;
  _QWORD *v271;
  unsigned int v272;
  uint64_t v273;
  void *v274;
  uint64_t v275;
  _BYTE v276[320];
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v6 = v5;
  v8 = v7;
  v142 = v9;
  v153 = v10;
  v151 = v11;
  v13 = v12;
  v14 = v4;
  v279 = *MEMORY[0x1E0C80C00];
  v15 = *(_QWORD *)(v12 + 40);
  sub_1C5E9DFC8(v12, (llvm::BinaryOperator *)1);
  v269 = 260;
  v266 = v15 + 216;
  llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)&v266);
  v143 = v167;
  if (v166 < 0)
    operator delete(__p[0]);
  v16 = (*(uint64_t (**)(_QWORD, uint64_t, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v14 + 8) + 24) + 32))(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 24), v14, &llvm::DominatorTreeWrapperPass::ID, v13);
  v17 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v16 + 96))(v16, &llvm::DominatorTreeWrapperPass::ID);
  v18 = (*(uint64_t (**)(_QWORD, uint64_t, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v14 + 8) + 24) + 32))(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 24), v14, &llvm::PostDominatorTreeWrapperPass::ID, v13);
  v19 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v18 + 96))(v18, &llvm::PostDominatorTreeWrapperPass::ID);
  v20 = (*(uint64_t (**)(_QWORD, uint64_t, char *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v14 + 8) + 24) + 32))(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 24), v14, llvm::LoopInfoWrapperPass::ID, v13);
  v21 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v20 + 96))(v20, llvm::LoopInfoWrapperPass::ID);
  v22 = v21;
  v266 = 1;
  for (i = 8; i != 1672; i += 104)
    *(uint64_t *)((char *)&v266 + i) = -4096;
  v270 = 1;
  for (j = 1680; j != 3344; j += 104)
    *(uint64_t *)((char *)&v266 + j) = -4096;
  v148 = v19 + 32;
  v273 = v19 + 32;
  v274 = v276;
  v275 = 0xA00000000;
  v277 = 1;
  for (k = 3696; k != 3824; k += 16)
    *(uint64_t *)((char *)&v266 + k) = -4096;
  v26 = (llvm::Loop *)(v17 + 32);
  v27 = (unint64_t **)(v21 + 32);
  v147 = v8;
  v146 = v6;
  v29 = *(_BYTE *)(v14 + 320)
     && *(_DWORD *)(v19 + 40) == 1
     && (v28 = *(_QWORD *)(v19 + 104)) != 0
     && *(_DWORD *)(v28 + 32) == 1
     && !sub_1C5EA9CF8(v13, v21 + 32);
  v30 = (const llvm::DataLayout *)(v15 + 272);
  v150 = v29;
  if (v29 || byte_1ED8086E8)
  {
    v31 = v13;
    v33 = *(llvm ***)(v22 + 56);
    v32 = *(llvm ***)(v22 + 64);
    if (v33 != v32)
    {
      v34 = 0;
      do
      {
        v35 = *v33++;
        v34 |= llvm::simplifyLoop(v35, v26, v27, 0, 0, 0, 0);
        llvm::formLCSSARecursively(v35, v26, (const llvm::DominatorTree *)v27, 0, v36);
      }
      while (v33 != v32);
      if ((v34 & 1) != 0)
      {
        *(_QWORD *)(v19 + 112) = v31;
        sub_1C53BA93C(v148, 0);
      }
    }
    LOBYTE(v29) = v150;
    if (v150)
    {
      v152 = &v266;
      v13 = v31;
      sub_1C560B350((uint64_t)&v266, v31);
    }
    else
    {
      v152 = 0;
      v13 = v31;
    }
    v30 = (const llvm::DataLayout *)(v15 + 272);
  }
  else
  {
    v152 = 0;
  }
  v37 = sub_1C5EA4468(v15);
  v38 = (void *)(*(_QWORD *)(v13 + 40) + 216);
  v254[8] = 260;
  v251 = v38;
  llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)&v251);
  v39 = v167;
  if (v166 < 0)
    operator delete(__p[0]);
  v40 = *(unsigned __int16 *)(v13 + 18);
  v157 = sub_1C563A680;
  v41 = v39 == 29;
  v42 = (v40 >> 4) & 0x3FF;
  LOBYTE(v158) = v29;
  v44 = v42 == 101 || v42 == 108;
  BYTE1(v158) = *(_BYTE *)(v14 + 321);
  BYTE2(v158) = v37;
  HIBYTE(v158) = v44;
  *(_QWORD *)&v159 = v152;
  *((_QWORD *)&v159 + 1) = v14 + 472;
  v160 = 0;
  v161 = 0;
  v162 = 0;
  sub_1C4DFEB14((uint64_t)&v160, v14 + 1072);
  v163 = v41;
  v45 = (char *)operator new(0x48uLL);
  v46 = v157;
  *(_QWORD *)v45 = &off_1E8171C38;
  *((_QWORD *)v45 + 1) = v46;
  *((_DWORD *)v45 + 4) = v158;
  *(_OWORD *)(v45 + 24) = v159;
  *((_QWORD *)v45 + 5) = v160;
  *((_QWORD *)v45 + 6) = v161;
  v160 = 0;
  v161 = 0;
  *((_DWORD *)v45 + 14) = v162;
  v162 = 0;
  v45[64] = v41;
  v250 = v45;
  llvm::DivergenceTracker::DivergenceTracker((uint64_t)&v251, (llvm::Function *)v13, (uint64_t)v26, v148, v30, v151, (uint64_t)v249, 1, 0);
  if (v250 == v249)
  {
    v47 = (void (**)(void))(v249[0] + 32);
    goto LABEL_39;
  }
  if (v250)
  {
    v47 = (void (**)(void))(*v250 + 40);
LABEL_39:
    (*v47)();
  }
  MEMORY[0x1CAA32FB4](v160, 8);
  v49 = v13 + 72;
  for (m = *(_QWORD *)(v13 + 80); m != v49; m = *(_QWORD *)(m + 8))
  {
    v51 = m - 24;
    if (!m)
      v51 = 0;
    v52 = *(_QWORD *)(v51 + 48);
    if (v52 != v51 + 40)
    {
      v53 = &v255;
      while (1)
      {
        if (v52)
          v54 = v52 - 24;
        else
          v54 = 0;
        if (*(_BYTE *)(v54 + 16) == 84)
        {
          v55 = *(_QWORD *)(v54 - 32);
          if (v55)
          {
            if (!*(_BYTE *)(v55 + 16)
              && *(_QWORD *)(v55 + 24) == *(_QWORD *)(v54 + 72)
              && (*(_BYTE *)(v55 + 33) & 0x20) != 0)
            {
              v145 = *(_DWORD *)(*(_QWORD *)(v52 - 56) + 36);
              v149 = v53;
              v56 = sub_1C47860D0(v145);
              v53 = v149;
              if (v56)
              {
                llvm::SampleInfo::SampleInfo((uint64_t)__p, v145, 1);
                v57 = v52 - 24 - 32 * (*(_DWORD *)(v52 - 4) & 0x7FFFFFF);
                v58 = *(_QWORD *)(v57 + 32 * v169);
                if (v58)
                  v59 = *(unsigned __int8 *)(v58 + 16) > 0x1Bu;
                else
                  v59 = 0;
                if (v59 || (v58 = *(_QWORD *)(v57 + 32 * v168), *(unsigned __int8 *)(v58 + 16) > 0x1Bu))
                {
                  for (n = (uint64_t)v149; ; n = (uint64_t)v149)
                  {
                    v61 = sub_1C477672C(n, v58);
                    v62 = (unsigned int *)(v256 == v255 ? &v257[4] : v257);
                    v53 = v149;
                    if (v61 != (_QWORD *)((char *)v256 + 8 * *v62))
                      break;
                    Impl = (unsigned __int8 *)llvm::MDTuple::getImpl(**(uint64_t ***)v54, 0, 0, 0, 1);
                    llvm::Instruction::setMetadata(v58, "agx.uniform", 0xBuLL, Impl);
                    v53 = v149;
                    if (*(unsigned __int8 *)(v58 + 16) - 66 > 0xC)
                      break;
                    v64 = *(_DWORD *)(v58 + 20);
                    if ((v64 & 0x40000000) != 0)
                    {
                      v58 = **(_QWORD **)(v58 - 8);
                      if (*(unsigned __int8 *)(v58 + 16) < 0x1Cu)
                        break;
                    }
                    else
                    {
                      v58 = *(_QWORD *)(v58 - 32 * (v64 & 0x7FFFFFF));
                      if (*(unsigned __int8 *)(v58 + 16) <= 0x1Bu)
                        break;
                    }
                  }
                }
                else
                {
                  v53 = v149;
                }
              }
            }
          }
        }
        v52 = *(_QWORD *)(v52 + 8);
        v65 = m - 24;
        if (!m)
          v65 = 0;
        if (v52 == v65 + 40)
          break;
LABEL_80:
        if (m == v49)
          goto LABEL_81;
      }
      while (1)
      {
        m = *(_QWORD *)(m + 8);
        if (m == v49)
          goto LABEL_81;
        v66 = m - 24;
        if (!m)
          v66 = 0;
        v52 = *(_QWORD *)(v66 + 48);
        if (v52 != v66 + 40)
          goto LABEL_80;
      }
    }
  }
LABEL_81:
  v67 = v146[1];
  if (v67 == *v146)
    v68 = (unsigned int *)v146 + 5;
  else
    v68 = (unsigned int *)(v146 + 2);
  v69 = *v68;
  if ((_DWORD)v69)
  {
    v70 = 8 * v69;
    v71 = (uint64_t *)v146[1];
    while ((unint64_t)*v71 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v71;
      v70 -= 8;
      if (!v70)
        goto LABEL_98;
    }
  }
  else
  {
    v71 = (uint64_t *)v146[1];
  }
  v72 = (_QWORD *)(v67 + 8 * v69);
  if (v71 != v72)
  {
    v73 = *v71;
LABEL_92:
    v74 = v252;
    if (v252 >= (unint64_t)v253)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v251, (uint64_t)v254, v252 + 1, 8);
      v74 = v252;
    }
    *((_QWORD *)v251 + v74) = v73;
    ++v252;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v255, v73);
    llvm::DivergenceTracker::propagateDivergence((char *)&v251, (uint64_t)&v251);
    v75 = (unint64_t *)(v71 + 1);
    while (v75 != v72)
    {
      v76 = *v75++;
      v73 = v76;
      if (v76 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v71 = (uint64_t *)(v75 - 1);
        goto LABEL_92;
      }
    }
  }
LABEL_98:
  v77 = *(_QWORD *)(v14 + 312);
  if (v77)
    v78 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v77 + 48))(v77, v13);
  else
    v78 = 0;
  v48.i32[0] = *(_DWORD *)(v14 + 321);
  v144 = (int16x8_t)vmovl_u8(v48);
  v79 = *(_BYTE *)(v14 + 325);
  v80 = *(_BYTE *)(v14 + 328);
  __p[0] = v165;
  __p[1] = (void *)0x2000000000;
  v170 = 1;
  v81 = 99;
  v82 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&__p[v81] = v82;
    v81 += 2;
  }
  while (v81 != 131);
  v172 = v174;
  v173 = 0x2000000000;
  v175 = 1;
  v83 = 166;
  v84 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&__p[v83] = v84;
    v83 += 2;
  }
  while (v83 != 198);
  v177 = v179;
  v178 = 0x2000000000;
  v180 = v184;
  v181 = v184;
  v182 = 32;
  v183 = 0;
  v185 = 0u;
  v186 = 0;
  v187 = 0u;
  v188 = 0;
  v85 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v153 + 456))(v153);
  v189 = 0u;
  v190 = 0;
  v191 = v85;
  v192 = v196;
  v193 = v196;
  v194 = 16;
  v195 = 0;
  v197 = 1;
  v86 = 299;
  v87 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&__p[v86] = v87;
    v86 += 2;
  }
  while (v86 != 315);
  v199 = v201;
  v200 = 0x1000000000;
  v202 = 1;
  v88 = 334;
  v89 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&__p[v88] = v89;
    v88 += 2;
  }
  while (v88 != 366);
  v90 = 0;
  v204 = v206;
  v205 = 0x2000000000;
  v207 = v211;
  v208 = v211;
  v209 = 8;
  v210 = 0;
  v212 = v215;
  v213 = v215;
  *(_QWORD *)v214 = 16;
  *(_DWORD *)&v214[8] = 0;
  v216 = v219;
  __b = v219;
  *(_QWORD *)v218 = 16;
  *(_DWORD *)&v218[8] = 0;
  v91 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v220 = v222;
  v221 = 0x2000000000;
  v223 = 1;
  do
  {
    *(int64x2_t *)&v224[v90] = v91;
    v90 += 2;
  }
  while (v90 != 32);
  v225 = v227;
  v226 = 0x2000000000;
  v228 = v230;
  v229 = 0x2000000000;
  v155 = v263;
  v231 = 0;
  v233 = 0;
  v232 = 0;
  sub_1C5643D14((char **)&v231, (uint64_t)&v155);
  v234 = v151;
  v235 = v26;
  v236 = (int32x2_t *)v27;
  v237 = v152;
  v238 = v153;
  v239 = 0;
  v240 = v147;
  v241 = 0;
  v242 = 0;
  v243 = vmovn_s16(v144).u32[0];
  v244 = v79;
  v245 = v78;
  v246 = v41;
  v247 = v80;
  v248 = sub_1C5EA4468(v263[5]);
  sub_1C563C584((uint64_t)__p, (unsigned int *)&v251, v153);
  if (__b == v216)
    goto LABEL_112;
  if (*(_DWORD *)v218 < 0x21u || (4 * (*(_DWORD *)&v218[4] - *(_DWORD *)&v218[8])) >= *(_DWORD *)v218)
  {
    memset(__b, 255, 8 * *(unsigned int *)v218);
LABEL_112:
    *(_QWORD *)&v218[4] = 0;
    goto LABEL_113;
  }
  free(__b);
  v136 = 1 << (33 - __clz(*(_DWORD *)&v218[4] - *(_DWORD *)&v218[8] - 1));
  if ((*(_DWORD *)&v218[4] - *(_DWORD *)&v218[8]) <= 0x10)
    v137 = 32;
  else
    v137 = v136;
  *(_DWORD *)v218 = v137;
  *(_QWORD *)&v218[4] = 0;
  v138 = malloc_type_malloc(8 * v137, 0x4065EBACuLL);
  if (!v138)
    goto LABEL_266;
  __b = v138;
  memset(v138, 255, 8 * *(unsigned int *)v218);
LABEL_113:
  if (v213 != v212)
  {
    if (*(_DWORD *)v214 < 0x21u || (4 * (*(_DWORD *)&v214[4] - *(_DWORD *)&v214[8])) >= *(_DWORD *)v214)
    {
      memset(v213, 255, 8 * *(unsigned int *)v214);
      goto LABEL_114;
    }
    free(v213);
    v139 = 1 << (33 - __clz(*(_DWORD *)&v214[4] - *(_DWORD *)&v214[8] - 1));
    if ((*(_DWORD *)&v214[4] - *(_DWORD *)&v214[8]) <= 0x10)
      v140 = 32;
    else
      v140 = v139;
    *(_DWORD *)v214 = v140;
    *(_QWORD *)&v214[4] = 0;
    v141 = malloc_type_malloc(8 * v140, 0x4065EBACuLL);
    if (v141)
    {
      v213 = v141;
      memset(v141, 255, 8 * *(unsigned int *)v214);
      goto LABEL_115;
    }
LABEL_266:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
LABEL_114:
  *(_QWORD *)&v214[4] = 0;
LABEL_115:
  if ((_BYTE)v242 || v143 == 29)
  {
    v96 = *(_BYTE *)(v14 + 326);
    v156 = *(_QWORD *)(v14 + 336);
    sub_1C5648EBC(&v155, (_QWORD *)v13, (uint64_t)__p, v153, (uint64_t)v152, v142, v14 + 344, v14 + 408, v14 + 472, v96);
    if (!*(_QWORD *)(v14 + 336))
      *(_QWORD *)(v14 + 336) = v156;
    if (v150 || byte_1ED8086E8)
    {
      sub_1C563AAFC((uint64_t *)v204, v205, (uint64_t)v26, (uint64_t *)v27, (uint64_t **)v13);
      sub_1C563ACB0((uint64_t)v235, v236);
    }
    if (!(_DWORD)v205)
    {
LABEL_152:
      v93 = 1;
      goto LABEL_153;
    }
    v97 = (uint64_t *)v204;
    v98 = (char *)v204 + 8 * v205;
    while (1)
    {
      v154 = 0;
      v99 = *v97;
      v154 = *v97;
      if ((*(_BYTE *)(v14 + 536) & 1) != 0)
      {
        v100 = 32;
        v101 = v14 + 544;
      }
      else
      {
        v100 = *(_DWORD *)(v14 + 552);
        if (!v100)
        {
          v110 = 0;
LABEL_145:
          v111 = sub_1C5646E98(v14 + 536, (uint64_t)&v154, &v154, v110);
          *v111 = v154;
          v112 = v154;
          v113 = *(unsigned int *)(v14 + 808);
          if (v113 >= *(unsigned int *)(v14 + 812))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v14 + 800, v14 + 816, v113 + 1, 8);
            v113 = *(unsigned int *)(v14 + 808);
          }
          *(_QWORD *)(*(_QWORD *)(v14 + 800) + 8 * v113) = v112;
          ++*(_DWORD *)(v14 + 808);
          goto LABEL_148;
        }
        v101 = *(_QWORD *)(v14 + 544);
      }
      v102 = v100 - 1;
      v103 = v102 & ((v99 >> 4) ^ (v99 >> 9));
      v104 = (_QWORD *)(v101 + 8 * v103);
      v105 = *v104;
      if (v99 != *v104)
      {
        v106 = 0;
        v107 = 1;
        while (v105 != -4096)
        {
          if (v106)
            v108 = 0;
          else
            v108 = v105 == -8192;
          if (v108)
            v106 = v104;
          v109 = v103 + v107++;
          v103 = v109 & v102;
          v104 = (_QWORD *)(v101 + 8 * v103);
          v105 = *v104;
          if (v99 == *v104)
            goto LABEL_148;
        }
        if (v106)
          v110 = v106;
        else
          v110 = v104;
        goto LABEL_145;
      }
LABEL_148:
      if (++v97 == (uint64_t *)v98)
        goto LABEL_152;
    }
  }
  v92 = HIBYTE(v242);
  v93 = HIBYTE(v242) != 0;
  if (v150 || byte_1ED8086E8)
  {
    v94 = sub_1C563AAFC((uint64_t *)v204, v205, (uint64_t)v26, (uint64_t *)v27, (uint64_t **)v13);
    v95 = v94 | sub_1C563ACB0((uint64_t)v235, v236);
    if (v92)
      v93 = 1;
    else
      v93 = v95;
  }
LABEL_153:
  if (v231)
  {
    v232 = v231;
    operator delete(v231);
  }
  v114 = &v271;
  if (v228 != v230)
    free(v228);
  if (v225 != v227)
    free(v225);
  if ((v223 & 1) == 0)
    MEMORY[0x1CAA32FB4](v224[0], 8);
  if (v220 != v222)
    free(v220);
  if (__b != v216)
    free(__b);
  if (v213 != v212)
    free(v213);
  if (v208 != v207)
    free(v208);
  if (v204 != v206)
    free(v204);
  if ((v202 & 1) == 0)
    MEMORY[0x1CAA32FB4](v203, 8);
  if (v199 != v201)
    free(v199);
  if ((v197 & 1) == 0)
    MEMORY[0x1CAA32FB4](v198, 8);
  if (v193 != v192)
    free(v193);
  MEMORY[0x1CAA32FB4](v189, 8);
  v115 = v187;
  if (v188)
  {
    v116 = 32 * v188;
    v117 = (_QWORD *)(v187 + 24);
    do
    {
      if ((*(v117 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v118 = (_QWORD *)*(v117 - 2);
        if (v117 != v118)
          free(v118);
      }
      v117 += 4;
      v116 -= 32;
    }
    while (v116);
    v115 = v187;
  }
  MEMORY[0x1CAA32FB4](v115, 8);
  MEMORY[0x1CAA32FB4](v185, 8);
  if (v181 != v180)
    free(v181);
  if (v177 != v179)
    free(v177);
  if ((v175 & 1) == 0)
    MEMORY[0x1CAA32FB4](v176, 8);
  if (v172 != v174)
    free(v172);
  if ((v170 & 1) == 0)
    MEMORY[0x1CAA32FB4](v171, 8);
  if (__p[0] != v165)
    free(__p[0]);
  v119 = v265;
  if (v265 == v264)
  {
    v120 = 4;
    v119 = v264;
  }
  else
  {
    if (!v265)
      goto LABEL_203;
    v120 = 5;
  }
  (*(void (**)(void))(*v119 + 8 * v120))();
LABEL_203:
  if (v261 != &v262)
    free(v261);
  if (v260 != v259)
    free(v260);
  if (v258 != *(void **)&v257[272])
    free(v258);
  if (v256 != v255)
    free(v256);
  if (v251 != v254)
    free(v251);
  if ((v277 & 1) == 0)
    MEMORY[0x1CAA32FB4](v278, 8);
  v121 = (char *)v274;
  if ((_DWORD)v275)
  {
    v122 = 32 * v275;
    do
    {
      v123 = *(char **)&v121[v122 - 24];
      if (&v121[v122 - 8] != v123)
        free(v123);
      v122 -= 32;
    }
    while (v122);
    v121 = (char *)v274;
  }
  if (v121 != v276)
    free(v121);
  v124 = v270;
  if ((v270 & 1) != 0)
  {
    v125 = 16;
  }
  else
  {
    v125 = v272;
    if (!v272)
      goto LABEL_232;
    v114 = v271;
  }
  v126 = 104 * v125;
  v127 = (void **)(v114 + 2);
  do
  {
    v128 = (uint64_t)*(v127 - 2);
    if (v128 != -4096 && v128 != -8192 && *v127 != *(v127 - 1))
      free(*v127);
    v127 += 13;
    v126 -= 104;
  }
  while (v126);
  v124 = v270;
LABEL_232:
  v129 = &v267;
  if ((v124 & 1) == 0)
    MEMORY[0x1CAA32FB4](v271, 8);
  v130 = v266;
  if ((v266 & 1) != 0)
  {
    v131 = 16;
  }
  else
  {
    v131 = v268;
    if (!v268)
      goto LABEL_243;
    v129 = v267;
  }
  v132 = 104 * v131;
  v133 = (void **)(v129 + 2);
  do
  {
    v134 = (uint64_t)*(v133 - 2);
    if (v134 != -4096 && v134 != -8192 && *v133 != *(v133 - 1))
      free(*v133);
    v133 += 13;
    v132 -= 104;
  }
  while (v132);
  v130 = v266;
LABEL_243:
  if ((v130 & 1) == 0)
    MEMORY[0x1CAA32FB4](v267, 8);
  return v93;
}

_QWORD *sub_1C563A038(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C563A0C4((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C563A178(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    v5[1] = 1;
    v5[2] = -4096;
    v5[4] = v5 + 6;
    *((_DWORD *)v5 + 11) = 1;
  }
  return v5;
}

uint64_t sub_1C563A0C4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 56 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 56 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_8;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C563A178(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1C563A238((uint64_t)a1, v7);
  v9 = 0;
  sub_1C563A0C4((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

void sub_1C563A238(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _BYTE v14[224];
  uint64_t v15;

  v2 = a2;
  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_DWORD *)(a1 + 16);
    if (v2 > 4)
    {
      *(_QWORD *)(a1 + 8) = operator new(56 * v2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C563A460(a1, v7, v7 + 56 * v8);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = 0;
  v10 = v14;
  do
  {
    v11 = a1 + v9;
    v12 = *(_QWORD *)(a1 + v9 + 8);
    if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v10 = v12;
      *((_QWORD *)v10 + 1) = 1;
      *((_QWORD *)v10 + 2) = -4096;
      sub_1C563A5AC((unsigned int *)v10 + 2, (unsigned int *)(v11 + 16));
      *((_QWORD *)v10 + 4) = v10 + 48;
      *((_QWORD *)v10 + 5) = 0x100000000;
      if (*(_DWORD *)(v11 + 48))
        sub_1C4E41EEC((uint64_t)(v10 + 32), a1 + v9 + 40);
      v13 = *(void **)(a1 + v9 + 40);
      if ((void *)(a1 + v9 + 56) != v13)
        free(v13);
      v10 += 56;
      if ((*(_BYTE *)(v11 + 16) & 1) == 0)
        MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + v9 + 24), 8);
    }
    v9 += 56;
  }
  while (v9 != 224);
  if (v2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = operator new(56 * v2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v2;
  }
  sub_1C563A460(a1, (uint64_t)v14, (uint64_t)v10);
}

void sub_1C563A460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned int *v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;

  v4 = a2;
  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(a1 + 8);
    v9 = (_QWORD *)(a1 + 232);
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if (!v7)
      goto LABEL_5;
    v8 = *(_QWORD **)(a1 + 8);
    v9 = &v8[7 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 7;
  }
  while (v8 != v9);
LABEL_5:
  if (a2 != a3)
  {
    do
    {
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v13 = 0;
        sub_1C563A0C4(a1, (_QWORD *)v4, &v13);
        v10 = v13;
        *(_QWORD *)v13 = *(_QWORD *)v4;
        *((_QWORD *)v10 + 1) = 1;
        *((_QWORD *)v10 + 2) = -4096;
        sub_1C563A5AC(v10 + 2, (unsigned int *)(v4 + 8));
        *((_QWORD *)v10 + 4) = v10 + 12;
        v11 = (uint64_t)(v10 + 8);
        *(_QWORD *)(v11 + 8) = 0x100000000;
        if (*(_DWORD *)(v4 + 40))
          sub_1C4E41EEC(v11, v4 + 32);
        *(_DWORD *)a1 += 2;
        v12 = *(void **)(v4 + 32);
        if ((void *)(v4 + 48) != v12)
          free(v12);
        if ((*(_BYTE *)(v4 + 8) & 1) == 0)
          MEMORY[0x1CAA32FB4](*(_QWORD *)(v4 + 16), 8);
      }
      v4 += 56;
    }
    while (v4 != a3);
  }
}

unsigned int *sub_1C563A5AC(unsigned int *result, unsigned int *a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  unsigned int *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a2;
  *a2 = *result & 0xFFFFFFFE | *a2 & 1;
  v3 = result[1];
  *result = v2 & 0xFFFFFFFE | *result & 1;
  result[1] = a2[1];
  a2[1] = v3;
  v4 = *a2;
  if ((*result & 1) != 0)
  {
    if ((v4 & 1) == 0)
    {
      v5 = a2;
LABEL_4:
      v6 = *(_OWORD *)(v5 + 2);
      *v5 = v4 | 1;
      *((_QWORD *)v5 + 1) = *((_QWORD *)result + 1);
      *result &= ~1u;
      *(_OWORD *)(result + 2) = v6;
      return result;
    }
    v8 = *((_QWORD *)result + 1);
    *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v8;
  }
  else
  {
    if ((v4 & 1) != 0)
    {
      v4 = *result;
      v5 = result;
      result = a2;
      goto LABEL_4;
    }
    v7 = *((_QWORD *)result + 1);
    *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v7;
    LODWORD(v7) = result[4];
    result[4] = a2[4];
    a2[4] = v7;
  }
  return result;
}

uint64_t sub_1C563A680(llvm::Instruction *this, uint64_t a2, int *a3, int a4, int a5, int a6, int a7, uint64_t a8, uint64_t *a9, uint64_t a10, char a11)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Instruction *v17;
  int v18;
  int v19;
  uint64_t result;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  int v44;
  int32x2_t v46[2];
  int v47;
  uint64_t v48;

  if (!*((_DWORD *)a9 + 2))
    goto LABEL_11;
  v13 = *a9;
  v14 = *((unsigned int *)a9 + 4);
  if ((_DWORD)v14)
  {
    v15 = ((_DWORD)v14 - 1) & ((this >> 4) ^ (this >> 9));
    v16 = v13 + (v15 << 6);
    v17 = *(llvm::Instruction **)(v16 + 24);
    if (v17 == this)
      goto LABEL_9;
    v18 = 1;
    while (v17 != (llvm::Instruction *)-4096)
    {
      v19 = v15 + v18++;
      v15 = v19 & (v14 - 1);
      v16 = v13 + (v15 << 6);
      v17 = *(llvm::Instruction **)(v16 + 24);
      if (v17 == this)
        goto LABEL_9;
    }
  }
  v16 = v13 + (v14 << 6);
LABEL_9:
  if (v16 != v13 + (v14 << 6))
    return 0;
LABEL_11:
  v21 = *((unsigned __int8 *)this + 16);
  if (!this || v21 < 0x1C)
  {
    result = 1;
    if (this && v21 <= 3)
    {
      v24 = *(_DWORD *)(*(_QWORD *)this + 8) >> 8;
      return v24 != 64 && v24 != 2;
    }
    return result;
  }
  if (v21 == 60)
  {
    v26 = *((unsigned __int16 *)this + 9);
    if ((v26 & 1) != 0)
      return 1;
    v27 = (v26 >> 7) & 7;
    result = 1;
    if (v27 != 4 && v27 != 7)
    {
      v28 = **((_QWORD **)this - 4);
      v29 = *(_DWORD *)(v28 + 8);
      if ((v29 & 0xFE) == 0x12)
        v29 = *(_DWORD *)(**(_QWORD **)(v28 + 16) + 8);
      v30 = v29 >> 8;
      if (a5)
      {
        if (v30 == 64)
          return 0;
        v31 = v30 - 3;
        result = v31 < 0xFFFFFFFE;
        if (v31 < 0xFFFFFFFE || (a4 & 1) != 0)
          return result;
      }
      else
      {
        if (v30 == 64)
          return 0;
        if (v30 != 2)
          return result;
      }
      return !sub_1C563BD30((uint64_t)this, a2, a3, a8, a6, 0);
    }
  }
  else
  {
    if (v21 == 84)
    {
      v22 = *((_QWORD *)this - 4);
      if (v22 && !*(_BYTE *)(v22 + 16) && *(_QWORD *)(v22 + 24) == *((_QWORD *)this + 9))
      {
        if ((*(_BYTE *)(v22 + 33) & 0x20) != 0)
        {
          if (sub_1C563BD30((uint64_t)this, a2, a3, a8, a6, 0))
            return sub_1C5E9DC10(*(_DWORD *)(*((_QWORD *)this - 4) + 36));
          return 1;
        }
        if ((a11 & 1) != 0)
        {
          v48 = *((_QWORD *)this - 4);
          v46[0] = 0;
          if (!sub_1C49D52C0((uint64_t *)a10, &v48, v46)
            || *(_QWORD *)v46 == *(_QWORD *)a10 + 16 * *(unsigned int *)(a10 + 16))
          {
            v46[0] = 0;
            v46[1] = 0;
            v47 = 0;
            v35 = sub_1C563C260(v22, a10, v46);
            MEMORY[0x1CAA32FB4](*(_QWORD *)v46, 8);
            if (v35)
              return 1;
          }
          else if (*(_BYTE *)(*(_QWORD *)v46 + 8))
          {
            return 1;
          }
        }
      }
      else if ((a11 & 1) != 0)
      {
        return 1;
      }
      v21 = *((unsigned __int8 *)this + 16);
    }
    if (v21 <= 58)
    {
      if (v21 != 33)
      {
        if (v21 == 37)
          return 1;
        if (v21 != 39)
          goto LABEL_24;
      }
LABEL_73:
      v33 = *((_QWORD *)this + 8);
      if (v33 && (*(_BYTE *)(v33 + 17) & 0x30) != 0)
        goto LABEL_24;
      v34 = *((_DWORD *)this + 5);
      if (v34 < 0)
      {
        v37 = (char *)this - 32 * (v34 & 0x7FFFFFF);
        v40 = *((_QWORD *)v37 - 1);
        v38 = v37 - 8;
        v39 = v40;
        if (v40)
        {
          v41 = -v39;
          do
          {
            v42 = *(_DWORD *)(*(_QWORD *)&v38[v41] + 8);
            v43 = v42 > 7;
            v44 = (1 << v42) & 0x83;
            if (v43 || v44 == 0)
              return 1;
            v41 += 16;
          }
          while (v41);
        }
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 45) & 1) != 0
        || llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44))
      {
LABEL_24:
        if ((llvm::Instruction::mayThrow(this) & 1) == 0 && llvm::Instruction::willReturn(this))
        {
          result = 0;
          v23 = *((unsigned __int8 *)this + 16) - 33;
          if (v23 > 0x37)
            return result;
          if (((1 << (*((_BYTE *)this + 16) - 33)) & 0x8000000000041) != 0)
          {
            v32 = *((_QWORD *)this + 8);
            if (v32 && ((*(_BYTE *)(v32 + 20) & 4) != 0 || (*(_BYTE *)(v32 + 17) & 0x10) != 0))
              return 0;
            v46[0].i32[0] = 7;
            if ((!sub_1C53E4BBC((uint64_t)this, (__int32 *)v46, 1uLL)
               || (v36 = *((_QWORD *)this - 4)) != 0
               && !*(_BYTE *)(v36 + 16)
               && *(_QWORD *)(v36 + 24) == *((_QWORD *)this + 9)
               && *(_DWORD *)(v36 + 36) == 7)
              && ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 66) & 1) != 0
               || (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44) & 1) != 0))
            {
              return 0;
            }
          }
          else if (((1 << (*((_BYTE *)this + 16) - 33)) & 0x808001C8000010) == 0)
          {
            if (v23 != 28)
              return result;
            if ((*((_WORD *)this + 9) & 0x301) == 0)
              return 0;
          }
        }
      }
      return 1;
    }
    result = 1;
    switch(v21)
    {
      case ';':
        return result;
      case '<':
        if ((*((_WORD *)this + 9) & 0x301) != 0)
          return 1;
        goto LABEL_24;
      case '=':
      case '?':
      case '@':
      case 'A':
        return 1;
      case '>':
        goto LABEL_24;
      default:
        switch(v21)
        {
          case 'P':
          case 'X':
            return 1;
          case 'S':
            result = a4 ^ 1u;
            break;
          case 'T':
            goto LABEL_73;
          default:
            goto LABEL_24;
        }
        break;
    }
  }
  return result;
}

uint64_t sub_1C563AAFC(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t *a4, uint64_t **a5)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v15[2];
  _QWORD v16[10];
  int v17;
  __int16 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[33];

  v26[32] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v9 = 0;
  v24 = v26;
  v25 = 0x2000000000;
  v10 = 8 * a2;
  do
  {
    v11 = *a1;
    if (*(uint64_t ***)(*(_QWORD *)(*a1 + 40) + 56) == a5)
    {
      if (v9 >= HIDWORD(v25))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, (uint64_t)v26, v9 + 1, 8);
        v9 = v25;
      }
      *((_QWORD *)v24 + v9) = v11;
      v9 = v25 + 1;
      LODWORD(v25) = v25 + 1;
    }
    ++a1;
    v10 -= 8;
  }
  while (v10);
  v12 = **a5;
  v15[0] = v16;
  v15[1] = (void *)0x200000000;
  v16[6] = v12;
  v16[7] = &v22;
  v16[8] = &v23;
  v16[9] = 0;
  v17 = 0;
  v18 = 512;
  v19 = 7;
  v16[4] = 0;
  v16[5] = 0;
  v20 = 0;
  v21 = 0;
  v22 = &unk_1E8167888;
  v23 = &unk_1E8167A08;
  v13 = llvm::formLCSSAForInstructions((uint64_t)&v24, a3, a4, 0, (llvm::IRBuilderBase *)v15, 0);
  if (v15[0] != v16)
    free(v15[0]);
  if (v24 != v26)
    free(v24);
  return v13;
}

uint64_t sub_1C563ACB0(uint64_t a1, int32x2_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  void (**v5)(void);
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD *v14;
  char *v15;
  uint64_t *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t j;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v37;
  uint64_t v38;
  llvm::BasicBlock **v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  BOOL v55;
  int v56;
  _QWORD *v58;
  uint64_t v59;
  uint64_t **v60;
  unsigned int v61;
  _QWORD **v62;
  uint64_t *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  llvm::Value *v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  unsigned __int8 **v72;
  int v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  uint64_t v77;
  uint64_t *v78;
  char *v79;
  _QWORD *v80;
  unint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  _BOOL4 v84;
  _QWORD *v85;
  unsigned int v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  char v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  char *i;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int32 v106;
  int32x2_t v107;
  __int32 v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  _QWORD *v113;
  uint64_t *v114;
  llvm::BasicBlock *v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  BOOL v119;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  BOOL v125;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t m;
  uint64_t v138;
  int v139;
  _DWORD *v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _DWORD *v146;
  _DWORD *v147;
  _DWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  int v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  _QWORD **v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t *v158;
  int v159;
  uint64_t *v160;
  char *v161;
  uint64_t *v162;
  int64x2_t v163;
  uint64_t v164;
  char *k;
  uint64_t *v167;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  int v173;
  _BYTE v174[71];
  char v175;
  uint64_t v176;
  _QWORD v177[2];
  char v178;
  _QWORD v179[3];
  _QWORD *v180;
  void *v181;
  uint64_t v182;
  _BYTE v183[128];
  uint64_t v184;
  int64x2_t v185;
  int64x2_t v186;
  void *v187;
  uint64_t v188;
  _BYTE v189[32];
  void *v190;
  void *v191;
  uint64_t v192;
  int v193;
  _WORD v194[8];
  uint64_t **v195;
  _QWORD **v196;
  uint64_t v197;
  void **v198;
  void **v199;
  uint64_t v200;
  int v201;
  __int16 v202;
  char v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  void *v207;
  uint64_t *v208;
  uint64_t v209;
  _QWORD v210[6];

  v210[4] = *MEMORY[0x1E0C80C00];
  v170 = v174;
  v171 = v174;
  v172 = 8;
  v173 = 0;
  v2 = (uint64_t *)v183;
  v182 = 0x1000000000;
  v3 = (uint64_t *)a2[3];
  v4 = (uint64_t *)a2[4];
  v179[0] = &off_1E8171D58;
  v179[1] = &v181;
  v180 = v179;
  v181 = v183;
  sub_1C55AF96C(v3, v4, (uint64_t)v179);
  if (v180 == v179)
  {
    v5 = (void (**)(void))(v179[0] + 32);
    goto LABEL_5;
  }
  if (v180)
  {
    v5 = (void (**)(void))(*v180 + 40);
LABEL_5:
    (*v5)();
  }
  v6 = (uint64_t *)v181;
  v7 = v182;
  if ((_DWORD)v182)
  {
    v8 = (char *)v181 + 8 * v182 - 8;
    if (v181 < v8)
    {
      v9 = (char *)v181 + 8;
      do
      {
        v10 = *((_QWORD *)v9 - 1);
        *((_QWORD *)v9 - 1) = *(_QWORD *)v8;
        *(_QWORD *)v8 = v10;
        v8 -= 8;
        v87 = v9 >= v8;
        v9 += 8;
      }
      while (!v87);
      v6 = (uint64_t *)v181;
    }
  }
  v11 = 0;
  if ((_DWORD)v7)
  {
    v12 = &v6[v7];
    v13 = v210;
    v163 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    while (1)
    {
      v14 = (_QWORD *)*v6;
      v15 = (char *)sub_1C477672C((uint64_t)&v170, *v6);
      if (v171 == v170)
        v16 = (uint64_t *)((char *)&v172 + 4);
      else
        v16 = &v172;
      if (v15 != &v171[8 * *(unsigned int *)v16])
        goto LABEL_300;
      v208 = v13;
      v209 = 0x400000000;
      if (!llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::hasDedicatedExits(v14))
        goto LABEL_296;
      sub_1C4EAEA40(v14, (uint64_t)&v208);
      result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v14);
      if (!result)
        goto LABEL_26;
      v18 = *(_QWORD *)(result + 40);
      if (v18 == result + 40)
        goto LABEL_26;
      if (v18)
        v19 = v18 - 24;
      else
        v19 = 0;
      if (*(_BYTE *)(v19 + 16) != 30)
      {
        v20 = 0;
        switch(*(_BYTE *)(v19 + 16))
        {
          case 0x1D:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
            goto LABEL_31;
          case 0x1E:
            __break(1u);
            return result;
          case 0x1F:
            v21 = (*(_DWORD *)(v19 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_29;
          case 0x20:
            v21 = (*(_DWORD *)(v19 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_29;
          case 0x27:
            v21 = *(_DWORD *)(v19 + 80) + 1;
LABEL_29:
            if (v21 == 1)
              goto LABEL_30;
            goto LABEL_26;
          default:
            goto LABEL_26;
        }
      }
      if ((*(_DWORD *)(v19 + 20) & 0x7FFFFFF) == 3)
LABEL_26:
        v20 = 0;
      else
LABEL_30:
        v20 = result;
LABEL_31:
      if (!(_DWORD)v209)
      {
LABEL_296:
        v84 = 0;
        goto LABEL_297;
      }
      v164 = (uint64_t)v14;
      if ((_DWORD)v209 == 1)
      {
        v77 = *v208;
      }
      else
      {
        v77 = 0;
        v78 = v208;
        v79 = (char *)v208;
        do
        {
          v80 = (_QWORD *)(*(_QWORD *)v79 + 40);
          v81 = -1;
          v82 = v80;
          do
          {
            v82 = (_QWORD *)v82[1];
            ++v81;
          }
          while (v82 != v80);
          if (v81 > 1)
            goto LABEL_296;
          v83 = (_QWORD *)*v80;
          if ((_QWORD *)*v80 == v80)
            goto LABEL_296;
          v84 = 0;
          v85 = v83 - 3;
          if (!v83)
            v85 = 0;
          v86 = *((unsigned __int8 *)v85 + 16) - 40;
          if (v86 < 0xFFFFFFF5)
            v85 = 0;
          if (!v83)
            goto LABEL_297;
          v87 = *((_BYTE *)v85 + 16) == 30 && v86 >= 0xFFFFFFF5;
          if (!v87)
            goto LABEL_297;
          if ((*((_DWORD *)v85 + 5) & 0x7FFFFFF) != 1)
            goto LABEL_296;
          v88 = *(v85 - 4);
          if (v77)
          {
            if (v77 != v88)
              goto LABEL_296;
          }
          else
          {
            v77 = v88;
          }
          v79 += 8;
        }
        while (v79 != (char *)&v208[v209]);
        v190 = v194;
        v191 = v194;
        v192 = 4;
        v89 = 8 * v209;
        v193 = 0;
        do
        {
          v90 = *v78++;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v190, v90);
          v89 -= 8;
        }
        while (v89);
        v91 = *(_QWORD *)(v77 + 48);
        if (v91 == v77 + 40)
        {
LABEL_183:
          v94 = 1;
        }
        else
        {
          while (1)
          {
            v92 = v91 - 24;
            if (!v91)
              v92 = 0;
            v93 = *(unsigned __int8 *)(v92 + 16);
            if (v93 != 83)
              v92 = 0;
            v94 = 1;
            if (!v91 || v93 != 83)
              break;
            if ((_DWORD)v209)
            {
              v95 = 0;
              v96 = *(_DWORD *)(v92 + 20);
              v97 = v96 & 0x7FFFFFF;
              for (i = (char *)v208; i != (char *)&v208[v209]; i += 8)
              {
                v99 = *(_QWORD *)i;
                if (v95)
                {
                  if ((_DWORD)v97)
                  {
                    v100 = 0;
                    while (1)
                    {
                      v101 = v92 - 32 * (v96 & 0x7FFFFFF);
                      if ((v96 & 0x40000000) != 0)
                        v101 = *(_QWORD *)(v92 - 8);
                      if (*(_QWORD *)(v101 + 32 * *(unsigned int *)(v92 + 60) + 8 * v100) == v99)
                        break;
                      if (v97 == ++v100)
                        goto LABEL_166;
                    }
                  }
                  else
                  {
LABEL_166:
                    LODWORD(v100) = -1;
                  }
                  v102 = v92 - 32 * (v96 & 0x7FFFFFF);
                  if ((v96 & 0x40000000) != 0)
                    v102 = *(_QWORD *)(v92 - 8);
                  if (v95 != *(_QWORD *)(v102 + 32 * v100))
                  {
                    v94 = 0;
                    goto LABEL_293;
                  }
                }
                else
                {
                  if ((_DWORD)v97)
                  {
                    v103 = 0;
                    while (1)
                    {
                      v104 = v92 - 32 * (v96 & 0x7FFFFFF);
                      if ((v96 & 0x40000000) != 0)
                        v104 = *(_QWORD *)(v92 - 8);
                      if (*(_QWORD *)(v104 + 32 * *(unsigned int *)(v92 + 60) + 8 * v103) == v99)
                        break;
                      if (v97 == ++v103)
                        goto LABEL_177;
                    }
                  }
                  else
                  {
LABEL_177:
                    LODWORD(v103) = -1;
                  }
                  v105 = v92 - 32 * (v96 & 0x7FFFFFF);
                  if ((v96 & 0x40000000) != 0)
                    v105 = *(_QWORD *)(v92 - 8);
                  v95 = *(_QWORD *)(v105 + 32 * v103);
                }
              }
            }
            v91 = *(_QWORD *)(v91 + 8);
            if (v91 == v77 + 40)
              goto LABEL_183;
          }
        }
LABEL_293:
        if (v191 != v190)
          free(v191);
        if ((v94 & 1) == 0)
          goto LABEL_296;
      }
      if (!v77)
        goto LABEL_296;
      v169 = v77;
      v175 = 0;
      if ((_DWORD)v209 == 1)
      {
        v22 = *(_QWORD *)(v77 + 48);
        for (j = v22; j != v77 + 40; j = *(_QWORD *)(j + 8))
        {
          v24 = j - 24;
          if (!j)
            v24 = 0;
          if (*(_BYTE *)(v24 + 16) != 83)
            break;
          if (*(_QWORD *)(v24 + 8))
            goto LABEL_296;
        }
        v25 = v22 - 24;
        if (v22)
          v26 = v22 - 24;
        else
          v26 = 0;
        if (v22 && *(_BYTE *)(v26 + 16) == 83)
        {
          v27 = (_QWORD *)(v20 + 40);
          do
          {
            v28 = *(_DWORD *)(v25 + 20);
            if ((v28 & 0x40000000) != 0)
            {
              v30 = *(uint64_t **)(v25 - 8);
              v29 = v28 & 0x7FFFFFF;
            }
            else
            {
              v29 = v28 & 0x7FFFFFF;
              v30 = (uint64_t *)(v25 - 32 * v29);
            }
            v31 = *v30;
            if (v29 >= 2)
            {
              v32 = 32 * v29;
              v33 = 32;
              v34 = v25 - 32 * v29;
              while (1)
              {
                v35 = v34;
                if ((v28 & 0x40000000) != 0)
                  v35 = *(_QWORD *)(v25 - 8);
                if (v31 != *(_QWORD *)(v35 + v33))
                  break;
                v33 += 32;
                if (v32 == v33)
                  goto LABEL_58;
              }
LABEL_185:
              v84 = v175 != 0;
              goto LABEL_297;
            }
LABEL_58:
            if (*(unsigned __int8 *)(v31 + 16) >= 0x1Cu && v31 != 0)
            {
              v37 = (_QWORD *)*v27;
              if ((_QWORD *)*v27 == v27)
              {
                v39 = 0;
              }
              else
              {
                v38 = v37 ? (uint64_t)(v37 - 3) : 0;
                v39 = *(unsigned __int8 *)(v38 + 16) - 29 >= 0xB ? 0 : (llvm::BasicBlock **)v38;
              }
              if (!llvm::Loop::makeLoopInvariant(v164, v31, &v175, v39, 0))
                goto LABEL_185;
            }
            v22 = *(_QWORD *)(v22 + 8);
            v25 = v22 - 24;
            if (!v22)
              v25 = 0;
            v40 = *(unsigned __int8 *)(v25 + 16);
            if (v40 != 83)
              v25 = 0;
          }
          while (v22 && v40 == 83);
        }
      }
      v160 = v12;
      v159 = v11;
      v41 = *(_QWORD *)(v164 + 32);
      v42 = *(_QWORD *)(v164 + 40);
      if (v42 == v41)
        break;
      while (1)
      {
        v43 = *(_QWORD *)v41 + 40;
        v44 = *(_QWORD *)(*(_QWORD *)v41 + 48);
LABEL_79:
        if (v44 != v43)
          break;
        v41 += 8;
        if (v41 == v42)
          goto LABEL_107;
      }
      if (v44)
        v45 = v44 - 24;
      else
        v45 = 0;
      v46 = *(unsigned __int8 *)(v45 + 16) - 33;
      if (v46 > 0x37)
        goto LABEL_87;
      if (((1 << (*(_BYTE *)(v45 + 16) - 33)) & 0x808001D0000010) != 0)
        goto LABEL_184;
      if (((1 << (*(_BYTE *)(v45 + 16) - 33)) & 0x8000000000041) == 0)
      {
        if (v46 == 27 && (*(_WORD *)(v45 + 18) & 0x301) != 0)
          goto LABEL_184;
        goto LABEL_87;
      }
      v47 = *(_QWORD *)(v45 + 64);
      if (v47 && (*(_BYTE *)(v47 + 17) & 0x30) != 0)
        goto LABEL_87;
      v48 = *(_DWORD *)(v45 + 20);
      if ((v48 & 0x80000000) == 0
        || (v49 = v45 - 32 * (v48 & 0x7FFFFFF), v52 = *(_QWORD *)(v49 - 8), v50 = v49 - 8, (v51 = v52) == 0))
      {
LABEL_93:
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v45, 45) & 1) == 0
          && !llvm::CallBase::hasFnAttrOnCalledFunction(v45, 44))
        {
          goto LABEL_184;
        }
LABEL_87:
        if ((llvm::Instruction::mayThrow((llvm::Instruction *)v45) & 1) != 0
          || (llvm::Instruction::willReturn((llvm::Instruction *)v45) & 1) == 0)
        {
          goto LABEL_184;
        }
        v44 = *(_QWORD *)(v44 + 8);
        goto LABEL_79;
      }
      v53 = -v51;
      while (1)
      {
        v54 = *(_DWORD *)(*(_QWORD *)(v50 + v53) + 8);
        v55 = v54 > 7;
        v56 = (1 << v54) & 0x83;
        if (v55 || v56 == 0)
          break;
        v53 += 16;
        if (!v53)
          goto LABEL_93;
      }
LABEL_184:
      v84 = v175 != 0;
      v11 = v159;
      v12 = v160;
LABEL_297:
      if (v208 != v13)
        free(v208);
      v11 |= v84;
LABEL_300:
      if (++v6 == v12)
      {
        v6 = (uint64_t *)v181;
        goto LABEL_304;
      }
    }
LABEL_107:
    v12 = v160;
    if (v209 >= 2)
    {
      v162 = v13;
      v157 = v6;
      v158 = v2;
      v58 = ***(_QWORD ****)(*v208 + 56);
      v190 = "unique_exit";
      v194[0] = 259;
      v59 = *(_QWORD *)(*v208 + 56);
      v60 = (uint64_t **)operator new();
      *v60 = (uint64_t *)(*v58 + 1600);
      v60[1] = 0;
      v61 = *((_DWORD *)v60 + 5) & 0xC0000000;
      v60[3] = 0;
      v62 = v60 + 3;
      *((_DWORD *)v60 + 4) = 22;
      *((_DWORD *)v60 + 5) = v61;
      v60[4] = 0;
      v60[5] = (uint64_t *)(v60 + 5);
      v60[6] = (uint64_t *)(v60 + 5);
      v60[7] = 0;
      if (v59)
      {
        llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v59 + 72, v60);
        v63 = *(uint64_t **)(v59 + 72);
        v60[3] = v63;
        v60[4] = (uint64_t *)(v59 + 72);
        v63[1] = (uint64_t)v62;
        *(_QWORD *)(v59 + 72) = v62;
      }
      llvm::Value::setName((uint64_t ***)v60, (uint64_t)&v190);
      v64 = **v60;
      v190 = &v192;
      v191 = (void *)0x200000000;
      v197 = v64;
      v198 = &v206;
      v199 = &v207;
      v200 = 0;
      v201 = 0;
      v202 = 512;
      v203 = 7;
      v204 = 0;
      v205 = 0;
      v206 = &unk_1E8167888;
      v207 = &unk_1E8167A08;
      v195 = v60;
      v196 = v60 + 5;
      v65 = (char *)operator new(0x60uLL);
      v66 = v65;
      *((_DWORD *)v65 + 13) = *((_DWORD *)v65 + 13) & 0x38000000 | 1;
      *(_QWORD *)v65 = 0;
      *((_QWORD *)v65 + 2) = 0;
      *((_QWORD *)v65 + 1) = 0;
      *((_QWORD *)v65 + 4) = ***(_QWORD ***)v77 + 1576;
      v67 = (llvm::Value *)(v65 + 32);
      *((_QWORD *)v65 + 3) = v65 + 32;
      *((_QWORD *)v65 + 5) = 0;
      v65[48] = 30;
      v65[49] = 0;
      *((_WORD *)v65 + 25) = 0;
      *((_DWORD *)v65 + 13) = 1;
      *(_OWORD *)(v65 + 56) = 0u;
      *(_OWORD *)(v65 + 72) = 0u;
      *((_DWORD *)v65 + 22) = 0;
      *(_QWORD *)v65 = v77;
      v68 = (_QWORD *)(v77 + 8);
      v69 = *(_QWORD *)(v77 + 8);
      *((_QWORD *)v65 + 1) = v69;
      if (v69)
        *(_QWORD *)(v69 + 16) = v65 + 8;
      *((_QWORD *)v65 + 2) = v68;
      *v68 = v65;
      v186.i16[4] = 257;
      (*((void (**)(void **, llvm::Value *, uint64_t *, uint64_t **, _QWORD **))*v199 + 2))(v199, v67, &v184, v195, v196);
      if ((_DWORD)v191)
      {
        v70 = (char *)v190;
        v71 = (char *)v190 + 16 * v191;
        v72 = (unsigned __int8 **)(v66 + 80);
        do
        {
          v73 = *(_DWORD *)v70;
          v74 = (unsigned __int8 *)*((_QWORD *)v70 + 1);
          if (v74)
          {
            if (!v73)
            {
              v177[0] = *((_QWORD *)v70 + 1);
              llvm::MetadataTracking::track((uint64_t)v177, v74, 2);
              v75 = *v72;
              goto LABEL_124;
            }
          }
          else
          {
            v75 = *v72;
            if (!*v72 && (v66[55] & 0x20) == 0)
              goto LABEL_121;
            if (!v73)
            {
              v177[0] = 0;
LABEL_124:
              if (v75)
                llvm::MetadataTracking::untrack((uint64_t)(v66 + 80), v75);
              v76 = (unsigned __int8 *)v177[0];
              *v72 = (unsigned __int8 *)v177[0];
              if (v76)
                llvm::MetadataTracking::retrack((uint64_t)v177, v76, (uint64_t)(v66 + 80));
              goto LABEL_121;
            }
          }
          llvm::Value::setMetadata(v67, *(_DWORD *)v70, (llvm::MDNode *)v74);
LABEL_121:
          v70 += 16;
        }
        while (v70 != v71);
      }
      v106 = a2[2].i32[0];
      v13 = v162;
      if (v106)
      {
        v107 = *a2;
        v108 = v106 - 1;
        v109 = (v106 - 1) & ((v169 >> 4) ^ (v169 >> 9));
        v110 = *(_QWORD *)(*(_QWORD *)a2 + 16 * v109);
        if (v169 == v110)
        {
LABEL_191:
          v113 = *(_QWORD **)(*(_QWORD *)&v107 + 16 * v109 + 8);
          if (v113)
            llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v113, (uint64_t)v60, (uint64_t)a2);
        }
        else
        {
          v111 = 1;
          while (v110 != -4096)
          {
            v112 = v109 + v111++;
            v109 = v112 & v108;
            v110 = *(_QWORD *)(*(_QWORD *)&v107 + 16 * v109);
            if (v169 == v110)
              goto LABEL_191;
          }
        }
      }
      if ((_DWORD)v209)
      {
        v114 = v208;
        v161 = (char *)&v208[v209];
        while (1)
        {
          v115 = (llvm::BasicBlock *)*v114;
          v116 = *(_QWORD *)(*v114 + 8);
          for (k = (char *)v114; v116; v116 = *(_QWORD *)(v116 + 8))
          {
            v117 = *(_QWORD *)(v116 + 24);
            v118 = *(unsigned __int8 *)(v117 + 16);
            if (v117)
              v119 = v118 >= 0x1C;
            else
              v119 = 0;
            if (v119 && v118 - 29 < 0xB)
              break;
          }
          v184 = 1;
          v185 = v163;
          v186 = v163;
          v187 = v189;
          v188 = 0x400000000;
          if (v116)
          {
            v121 = *(_QWORD *)(v116 + 24);
LABEL_207:
            v176 = *(_QWORD *)(v121 + 40);
            sub_1C6281AA4((uint64_t)v177, (uint64_t)&v184, &v176);
            if (v178)
            {
              v122 = *(_QWORD *)(*(_QWORD *)(v116 + 24) + 40);
              v123 = v188;
              if (v188 >= (unint64_t)HIDWORD(v188))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v187, (uint64_t)v189, v188 + 1, 8);
                v123 = v188;
              }
              *((_QWORD *)v187 + v123) = v122;
              LODWORD(v188) = v188 + 1;
            }
            while (1)
            {
              v116 = *(_QWORD *)(v116 + 8);
              if (!v116)
                break;
              v121 = *(_QWORD *)(v116 + 24);
              v124 = *(unsigned __int8 *)(v121 + 16);
              if (v121)
                v125 = v124 >= 0x1C;
              else
                v125 = 0;
              if (v125 && v124 - 29 < 0xB)
                goto LABEL_207;
            }
            if (!(_DWORD)v188)
              goto LABEL_269;
            v127 = (uint64_t *)v187;
            v167 = (uint64_t *)((char *)v187 + 8 * v188);
LABEL_222:
            v128 = *v127;
            v129 = *(_QWORD *)(*v127 + 40);
            if (v129 == *v127 + 40)
            {
              v131 = 0;
            }
            else
            {
              if (v129)
                v130 = v129 - 24;
              else
                v130 = 0;
              if (*(unsigned __int8 *)(v130 + 16) - 29 >= 0xB)
                v131 = 0;
              else
                v131 = v130;
            }
            v132 = *(unsigned __int8 *)(v131 + 16);
            if (v132 != 30)
              __asm { BR              X10 }
            if ((*(_DWORD *)(v131 + 20) & 0x7FFFFFF) == 3)
              v133 = 2;
            else
              v133 = 1;
            v134 = 0;
            v135 = v133;
            while (1)
            {
              v136 = *(unsigned __int8 *)(v131 + 16);
              if (v136 != 30)
                __asm { BR              X9 }
              if (*(llvm::BasicBlock **)(v131 - 32 - 32 * v134) == v115)
                break;
LABEL_237:
              if (++v134 == v135)
              {
                if (++v127 == v167)
                  goto LABEL_269;
                goto LABEL_222;
              }
            }
            sub_1C53BAD9C(a1, 0, v128, (uint64_t)v60);
            llvm::Instruction::setSuccessor((llvm::Instruction *)v131, v134, (llvm::BasicBlock *)v60);
            sub_1C53BB778(a1, 0, v128, (uint64_t)v115);
            for (m = *(_QWORD *)(v169 + 48); ; m = *(_QWORD *)(m + 8))
            {
              if (m == v169 + 40)
                goto LABEL_237;
              v138 = m - 24;
              if (!m)
                v138 = 0;
              v139 = *(unsigned __int8 *)(v138 + 16);
              v140 = v139 == 83 ? (_DWORD *)v138 : 0;
              if (!m || v139 != 83)
                goto LABEL_237;
              v141 = v140[5];
              v142 = v141 & 0x7FFFFFF;
              if ((v141 & 0x7FFFFFF) != 0)
              {
                v143 = 0;
                v144 = v141 & 0x7FFFFFF;
                v145 = 8 * v140[15];
                while (1)
                {
                  v146 = &v140[-8 * v142];
                  if ((v141 & 0x40000000) != 0)
                    v146 = (_DWORD *)*((_QWORD *)v140 - 1);
                  if (*(llvm::BasicBlock **)&v146[2 * v143 + v145] == v115)
                    break;
                  if (v142 == ++v143)
                  {
                    LODWORD(v143) = -1;
                    goto LABEL_255;
                  }
                }
                do
                {
LABEL_255:
                  v147 = &v140[-8 * v142];
                  if ((v141 & 0x40000000) != 0)
                    v147 = (_DWORD *)*((_QWORD *)v140 - 1);
                  if (*(uint64_t ***)&v147[v145] == v60)
                  {
                    llvm::PHINode::removeIncomingValue((llvm::PHINode *)v140, v143, 1);
                    goto LABEL_265;
                  }
                  v145 += 2;
                  --v144;
                }
                while (v144);
                if ((v141 & 0x40000000) != 0)
                  goto LABEL_262;
              }
              else
              {
                LODWORD(v143) = -1;
                if ((v141 & 0x40000000) != 0)
                {
LABEL_262:
                  v148 = (_DWORD *)*((_QWORD *)v140 - 1);
                  goto LABEL_263;
                }
              }
              v148 = &v140[-8 * v142];
LABEL_263:
              *(_QWORD *)&v148[8 * v140[15] + 2 * v143] = v60;
LABEL_265:
              ;
            }
          }
LABEL_269:
          llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::removeBlock(a2, (uint64_t)v115);
          v149 = (_QWORD *)*((_QWORD *)v115 + 6);
          if (v149 != (_QWORD *)((char *)v115 + 40))
            break;
LABEL_284:
          llvm::BasicBlock::eraseFromParent(v115);
          if (v187 != v189)
            free(v187);
          v13 = v162;
          if ((v184 & 1) == 0)
            MEMORY[0x1CAA32FB4](v185.i64[0], 8);
          v114 = (uint64_t *)(k + 8);
          if (k + 8 == v161)
            goto LABEL_289;
        }
        while (1)
        {
          if (v149)
            v150 = v149 - 3;
          else
            v150 = 0;
          v151 = *((_DWORD *)v150 + 5);
          if ((v151 & 0x40000000) != 0)
          {
            v153 = (_QWORD *)*(v150 - 1);
            v152 = v151 & 0x7FFFFFF;
            if (v152)
            {
LABEL_275:
              v154 = 32 * v152;
              v155 = (_QWORD **)(v153 + 2);
              do
              {
                if (*(v155 - 2))
                {
                  **v155 = *(v155 - 1);
                  v156 = (uint64_t)*(v155 - 1);
                  if (v156)
                    *(_QWORD *)(v156 + 16) = *v155;
                }
                *(v155 - 2) = 0;
                v155 += 4;
                v154 -= 32;
              }
              while (v154);
            }
          }
          else
          {
            v152 = v151 & 0x7FFFFFF;
            v153 = &v150[-4 * v152];
            if (v152)
              goto LABEL_275;
          }
          v149 = (_QWORD *)v149[1];
          if (v149 == (_QWORD *)((char *)v115 + 40))
            goto LABEL_284;
        }
      }
LABEL_289:
      if (v190 != &v192)
        free(v190);
      v6 = v157;
      v2 = v158;
      v12 = v160;
    }
    sub_1C5EA750C(v164, (llvm::SmallPtrSetImplBase *)&v170, a1, 0, a2);
    v84 = v175 != 0;
    v11 = v159;
    goto LABEL_297;
  }
LABEL_304:
  if (v6 != v2)
    free(v6);
  if (v171 != v170)
    free(v171);
  return v11 & 1;
}

BOOL sub_1C563BD30(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unint64_t v29;
  llvm::BasicBlock *v31;
  uint64_t v32;
  llvm::BasicBlock *v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  uint64_t v46;
  __int32 v47;

  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 80);
  if (v7)
    v8 = v7 - 24;
  else
    v8 = 0;
  if (v8 == v6)
    return 1;
  v15 = *(unsigned __int8 *)(a1 + 16);
  v16 = v15 != 84;
  if (v15 == 84)
  {
    v19 = *(_QWORD *)(a1 - 32);
    if (!v19
      || *(_BYTE *)(v19 + 16)
      || *(_QWORD *)(v19 + 24) != *(_QWORD *)(a1 + 72)
      || (*(_BYTE *)(v19 + 33) & 0x20) == 0)
    {
      v17 = 0;
      v16 = 1;
      goto LABEL_17;
    }
    v37 = *(_QWORD *)(a1 + 64);
    if (v37 && (*(_BYTE *)(v37 + 12) & 0x40) != 0 || (llvm::CallBase::hasFnAttrOnCalledFunction(a1, 6) & 1) != 0)
      return 0;
    if ((sub_1C5E9DACC(a1, 22) & 1) != 0)
      return 1;
    v15 = *(unsigned __int8 *)(a1 + 16);
    v17 = a1;
  }
  else
  {
    v17 = 0;
  }
  v18 = (v15 - 33);
  if (v18 > 0x37)
  {
LABEL_22:
    v22 = *(unsigned __int8 *)(a1 + 16) - 33;
    if (v22 <= 0x37)
    {
      if (((1 << (*(_BYTE *)(a1 + 16) - 33)) & 0x8000000000041) != 0)
      {
        v24 = *(_QWORD *)(a1 + 64);
        if (v24 && ((*(_BYTE *)(v24 + 20) & 4) != 0 || (*(_BYTE *)(v24 + 17) & 0x10) != 0))
          return 1;
        v47 = 7;
        if ((!sub_1C53E4BBC(a1, &v47, 1uLL)
           || (v46 = *(_QWORD *)(a1 - 32)) != 0
           && !*(_BYTE *)(v46 + 16)
           && *(_QWORD *)(v46 + 24) == *(_QWORD *)(a1 + 72)
           && *(_DWORD *)(v46 + 36) == 7)
          && ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, 66) & 1) != 0
           || (llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44) & 1) != 0))
        {
          return 1;
        }
      }
      else if (((1 << (*(_BYTE *)(a1 + 16) - 33)) & 0x808001C8000010) == 0
             && (v22 != 28 || (*(_WORD *)(a1 + 18) & 0x301) == 0))
      {
        return 1;
      }
      if (v16)
      {
        if (*(_BYTE *)(a1 + 16) != 60)
          return 0;
        if ((sub_1C5EA56B4(a1, a2, a3, 0) & 1) == 0)
        {
          if (!a5)
            goto LABEL_44;
          v25 = **(_QWORD **)(a1 - 32);
          v26 = *(_DWORD *)(v25 + 8);
          if ((v26 & 0xFE) == 0x12)
            v26 = *(_DWORD *)(**(_QWORD **)(v25 + 16) + 8);
          v27 = (v26 >> 8) - 1;
          v28 = v27 > 0x3F;
          v29 = (1 << v27) & 0x8000000000000003;
          if (v28 || v29 == 0)
          {
LABEL_44:
            if (!a4)
              return 0;
            v31 = *(llvm::BasicBlock **)(a1 + 40);
            if (!a6 || (sub_1C563C104(v31) & 1) == 0)
            {
              v32 = a4;
              v33 = v31;
              goto LABEL_56;
            }
          }
        }
      }
      else if ((!a5 || *(_DWORD *)(*(_QWORD *)(v17 - 32) + 36) != 2785) && (sub_1C5E9DACC(v17, 20) & 1) == 0)
      {
        return 0;
      }
    }
    return 1;
  }
  if (((1 << v18) & 0x808001D0000010) != 0)
    goto LABEL_53;
  if (v18 == 27)
  {
    if ((*(_WORD *)(a1 + 18) & 0x301) != 0)
      goto LABEL_53;
    goto LABEL_22;
  }
  if (((1 << v18) & 0x8000000000041) == 0)
    goto LABEL_22;
LABEL_17:
  v20 = *(_QWORD *)(a1 + 64);
  if (v20 && (*(_BYTE *)(v20 + 17) & 0x30) != 0)
    goto LABEL_22;
  v21 = *(_DWORD *)(a1 + 20);
  if (v21 < 0)
  {
    v38 = a1 - 32 * (v21 & 0x7FFFFFF);
    v41 = *(_QWORD *)(v38 - 8);
    v39 = v38 - 8;
    v40 = v41;
    if (v41)
    {
      v42 = -v40;
      do
      {
        v43 = *(_DWORD *)(*(_QWORD *)(v39 + v42) + 8);
        v28 = v43 > 7;
        v44 = (1 << v43) & 0x83;
        if (v28 || v44 == 0)
          goto LABEL_53;
        v42 += 16;
      }
      while (v42);
    }
  }
  if ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, 45) & 1) != 0
    || (llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44) & 1) != 0)
  {
    goto LABEL_22;
  }
LABEL_53:
  if (!a4 || *(_BYTE *)(a1 + 16) != 61)
    return 0;
  v33 = *(llvm::BasicBlock **)(a1 + 40);
  v32 = a4;
LABEL_56:
  v34 = sub_1C560DA80(v32, v33);
  v35 = *(_QWORD *)(a4 + 3352) + 32 * v34;
  v36 = *(_DWORD *)(v35 + 16);
  if (!v36)
    return 1;
  if (v36 == 1)
    return (**(_DWORD **)(v35 + 8) & 0xFFFFFF) == v34;
  return 0;
}

uint64_t sub_1C563C104(llvm::BasicBlock *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  BOOL v11;
  uint64_t v13;
  uint64_t v14;

  result = llvm::BasicBlock::getSinglePredecessor(a1);
  if (!result)
    return result;
  v3 = *(_QWORD *)(result + 40);
  if (v3 == result + 40)
    return 0;
  result = 0;
  if (v3)
    v4 = v3 - 24;
  else
    v4 = 0;
  v5 = *(unsigned __int8 *)(v4 + 16) - 40;
  if (v5 >= 0xFFFFFFF5)
    v6 = v4;
  else
    v6 = 0;
  if (v3)
  {
    if (*(_BYTE *)(v6 + 16) == 30 && v5 >= 0xFFFFFFF5)
    {
      if ((*(_DWORD *)(v6 + 20) & 0x7FFFFFF) != 3)
        return 0;
      v8 = *(_QWORD *)(v6 - 96);
      v9 = *(unsigned __int8 *)(v8 + 16);
      v10 = v9 != 81 || v8 == 0;
      v11 = !v10 && v9 >= 0x1C;
      if (!v11 || v9 - 83 < 0xFFFFFFFE)
        return 0;
      v13 = *(_QWORD *)(v8 - 64);
      if (!v13)
        return 0;
      result = *(_QWORD *)(v8 - 32);
      if (!result)
        return result;
      v14 = *(_WORD *)(v8 + 18) & 0x3FLL;
      if (sub_1C563C214(result))
      {
        LODWORD(v14) = dword_1C865FC7C[v14];
        goto LABEL_32;
      }
      if (sub_1C563C214(v13))
      {
LABEL_32:
        if (*(llvm::BasicBlock **)(v6 - 64) == a1)
        {
          LODWORD(v14) = dword_1C865FD24[(__int16)v14];
        }
        else if (*(llvm::BasicBlock **)(v6 - 32) != a1)
        {
          return 0;
        }
        return (_DWORD)v14 == 37;
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_1C563C214(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 2365;
}

BOOL sub_1C563C260(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;

  v18 = a1;
  v19[0] = 0;
  v20 = a1;
  if (sub_1C49D52C0((uint64_t *)a2, &v20, v19)
    && v19[0] != *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16))
  {
    return *(_BYTE *)(v19[0] + 8) != 0;
  }
  sub_1C6187FB8(a3, &v18, (uint64_t)v19);
  v6 = v18 + 72;
  v7 = *(_QWORD *)(v18 + 80);
LABEL_5:
  if (v7 != v6)
  {
    v8 = v7 - 24;
    if (!v7)
      v8 = 0;
    v9 = v8 + 40;
    for (i = *(_QWORD *)(v8 + 48); ; i = *(_QWORD *)(i + 8))
    {
      if (i == v9)
      {
        v7 = *(_QWORD *)(v7 + 8);
        goto LABEL_5;
      }
      if (i)
        v11 = i - 24;
      else
        v11 = 0;
      v12 = *(unsigned __int8 *)(v11 + 16);
      if (v12 == 84)
        v13 = v11;
      else
        v13 = 0;
      if (i && v12 == 84)
      {
        v14 = *(_QWORD *)(v13 - 32);
        if (!v14)
          goto LABEL_31;
        if (*(_BYTE *)(v14 + 16))
          goto LABEL_31;
        if (*(_QWORD *)(v14 + 24) != *(_QWORD *)(v13 + 72))
          goto LABEL_31;
        v19[0] = *(_QWORD *)(v13 - 32);
        v20 = 0;
        if ((sub_1C4A06ED8((uint64_t)a3, v19, &v20) & 1) == 0)
        {
          if (sub_1C563C260(v14, a2, a3))
            goto LABEL_31;
        }
      }
      else if (i && v12 == 60)
      {
        v15 = **(_QWORD **)(v11 - 32);
        v16 = *(_DWORD *)(v15 + 8);
        if ((v16 & 0xFE) == 0x12)
          v16 = *(_DWORD *)(**(_QWORD **)(v15 + 16) + 8);
        if ((v16 & 0xFFFFFF00) == 0x4000)
        {
LABEL_31:
          v19[0] = 0;
          if (sub_1C4A06ED8((uint64_t)a3, &v18, v19))
          {
            *(_QWORD *)v19[0] = -8192;
            a3[1] = vadd_s32(a3[1], (int32x2_t)0x1FFFFFFFFLL);
          }
          v5 = 1;
          LOBYTE(v20) = 1;
          sub_1C49D5230(a2, &v18, &v20, (uint64_t)v19);
          return v5;
        }
      }
    }
  }
  v19[0] = 0;
  if (sub_1C4A06ED8((uint64_t)a3, &v18, v19))
  {
    *(_QWORD *)v19[0] = -8192;
    a3[1] = vadd_s32(a3[1], (int32x2_t)0x1FFFFFFFFLL);
  }
  LOBYTE(v20) = 0;
  sub_1C49D5230(a2, &v18, &v20, (uint64_t)v19);
  return 0;
}

char *sub_1C563C498(uint64_t a1)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)operator new(0x48uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = &off_1E8171C38;
  *((_QWORD *)v2 + 1) = v3;
  *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((_QWORD *)v2 + 6) = 0;
  *((_DWORD *)v2 + 14) = 0;
  *((_QWORD *)v2 + 5) = 0;
  sub_1C4DFEB14((uint64_t)(v2 + 40), a1 + 40);
  v2[64] = *(_BYTE *)(a1 + 64);
  return v2;
}

void sub_1C563C500(_QWORD *a1)
{
  MEMORY[0x1CAA32FB4](a1[5], 8);
  operator delete(a1);
}

uint64_t sub_1C563C52C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  char v5;

  v5 = *(_BYTE *)(a1 + 64);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, char))(a1 + 8))(*a2, a3, a4, *(unsigned __int8 *)(a1 + 16), *(unsigned __int8 *)(a1 + 17), *(unsigned __int8 *)(a1 + 18), *(unsigned __int8 *)(a1 + 19), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), a1 + 40, v5);
}

void sub_1C563C584(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  int64x2_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unsigned int v21;
  uint64_t v22;
  llvm::SmallPtrSetImplBase *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t i;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  char v41;
  int v42;
  uint64_t *v43;
  BOOL v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *j;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unsigned int *v68;
  char v69;
  unint64_t v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unsigned int *v87;
  uint64_t v88;
  uint64_t k;
  uint64_t v90;
  uint64_t *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  _QWORD *v100;
  _QWORD *v101;
  char v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  llvm::SmallPtrSetImplBase *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t *v110;
  uint64_t *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  unint64_t v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  llvm::SmallPtrSetImplBase *v148;
  llvm::SmallPtrSetImplBase *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  unsigned int *v171;
  uint64_t *v172;
  int v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  int v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  char v190;
  uint64_t v191;
  uint64_t v192;
  llvm *v193;
  int v194;
  llvm *UnderlyingObject;
  unsigned int v196;
  llvm *v197;
  int v198;
  unsigned int v199;
  int v200;
  uint64_t v201;
  int v202;
  unsigned int v203;
  _QWORD *v204;
  uint64_t v205;
  _QWORD *v206;
  int v207;
  BOOL v208;
  unsigned int v209;
  _QWORD *v210;
  _QWORD *v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t *v215;
  int v216;
  uint64_t v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  int v222;
  int v223;
  uint64_t v224;
  int v225;
  unsigned int v226;
  _QWORD *v227;
  uint64_t v228;
  _QWORD *v229;
  int v230;
  BOOL v231;
  unsigned int v232;
  _QWORD *v233;
  _QWORD *v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  int v239;
  unsigned int v240;
  uint64_t v241;
  int v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t *v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  char v250;
  uint64_t v251;
  uint64_t v252;
  llvm::SmallPtrSetImplBase *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t ii;
  uint64_t v257;
  int v258;
  uint64_t v259;
  _BOOL4 v260;
  uint64_t v261;
  int v262;
  int v263;
  _BOOL4 v265;
  int v266;
  llvm::SmallPtrSetImplBase *v267;
  int v268;
  unsigned int v269;
  uint64_t v270;
  int v271;
  unsigned int v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  unsigned int *v286;
  uint64_t v287;
  void (**v288)(void);
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unsigned int v297;
  int v298;
  char v300;
  uint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  _QWORD *v304;
  uint64_t v305;
  unsigned int *v306;
  uint64_t v307;
  void (**v308)(void);
  unint64_t v309;
  int v311;
  unsigned int v312;
  void *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t jj;
  _QWORD *v317;
  _QWORD *v318;
  llvm::SmallPtrSetImplBase *v319;
  _QWORD *v320;
  uint64_t v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  _BYTE *v325;
  unsigned __int8 *v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  uint64_t v330;
  _QWORD *v331;
  _QWORD *v332;
  uint64_t v333;
  char *v334;
  char *v335;
  unsigned int *v336;
  _QWORD *v337;
  BOOL v338;
  _QWORD *v339;
  uint64_t v340;
  uint64_t v341;
  _QWORD *v342;
  _QWORD *v343;
  uint64_t v344;
  char *v345;
  _QWORD *v346;
  int v348;
  _QWORD *v349;
  uint64_t v350;
  unsigned int *v351;
  int v352;
  uint64_t *v353;
  uint64_t v354;
  uint64_t v355;
  _QWORD *v356;
  uint64_t v357;
  unsigned int *v358;
  _QWORD *v359;
  uint64_t v360;
  unsigned int *v361;
  _BOOL4 v362;
  _QWORD *v363;
  uint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  _QWORD *v367;
  uint64_t v368;
  uint64_t v369;
  _QWORD *v370;
  int v371;
  _BOOL4 v372;
  int v373;
  int v374;
  int v375;
  _BOOL4 v376;
  _QWORD *v377;
  unsigned int v378;
  int v379;
  int v380;
  int v381;
  uint64_t v382;
  char *v383;
  unsigned int v384;
  uint64_t v385;
  unsigned int v386;
  _QWORD *v387;
  uint64_t Declaration;
  int v389;
  uint64_t v390;
  uint64_t v391;
  _QWORD *v392;
  uint64_t v393;
  unsigned int *v394;
  _QWORD *v395;
  uint64_t v396;
  unsigned int *v397;
  _QWORD *v398;
  uint64_t v399;
  uint64_t v400;
  _QWORD *v401;
  _QWORD *v402;
  uint64_t v403;
  uint64_t v404;
  _BOOL4 v405;
  _QWORD *v406;
  int v407;
  _BOOL4 v408;
  int v409;
  int v410;
  uint64_t v411;
  _QWORD *v412;
  uint64_t v413;
  unsigned int *v414;
  _QWORD *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t *v419;
  uint64_t v420;
  _QWORD *v421;
  uint64_t v422;
  unsigned int *v423;
  uint64_t v424;
  BOOL v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  llvm::ConstantFP **v429;
  llvm::Type *v430;
  uint64_t *v431;
  llvm::Type *v432;
  llvm::APFloatBase *v433;
  llvm::Value *Select;
  llvm::Value *FCmpHelper;
  int v436;
  char *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t *v440;
  uint64_t **v441;
  unsigned __int8 *v442;
  _QWORD *v443;
  uint64_t *v444;
  uint64_t v445;
  uint64_t *v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  _QWORD *v450;
  uint64_t v451;
  unsigned __int8 *v452;
  uint64_t v453;
  unsigned int v454;
  uint64_t v455;
  _QWORD *v456;
  uint64_t v457;
  unsigned __int8 *v458;
  llvm::Value *v459;
  unsigned int v460;
  unsigned int v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t *v465;
  uint64_t *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t *v469;
  int v470;
  uint64_t v471;
  unsigned int v472;
  uint64_t v473;
  uint64_t v474;
  int v475;
  int v476;
  uint64_t v477;
  uint64_t kk;
  uint64_t v479;
  _QWORD *v480;
  uint64_t v481;
  unsigned int *v482;
  uint64_t v483;
  uint64_t v484;
  int v485;
  _BYTE *v486;
  unsigned int v487;
  _QWORD *v488;
  uint64_t v489;
  unsigned int *v490;
  _QWORD *v491;
  uint64_t v492;
  unsigned int *v493;
  _QWORD *v494;
  uint64_t v495;
  uint64_t v496;
  int v497;
  _QWORD *v498;
  int v499;
  unsigned int v500;
  _QWORD *v501;
  uint64_t v502;
  _QWORD *v503;
  int v504;
  BOOL v505;
  unsigned int v506;
  _QWORD *v507;
  _QWORD *v508;
  uint64_t v509;
  uint64_t v510;
  int v511;
  uint64_t v512;
  int v513;
  BOOL v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t *v518;
  _QWORD *v519;
  uint64_t v520;
  unsigned int *v521;
  _QWORD *v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t **v525;
  uint64_t *v526;
  uint64_t *v527;
  uint64_t v528;
  int v529;
  uint64_t **v530;
  unsigned __int8 *v531;
  int v532;
  uint64_t **v533;
  uint64_t v534;
  unsigned __int8 *v535;
  uint64_t v536;
  char v537;
  char *v538;
  char *v539;
  unsigned __int8 *v540;
  uint64_t v541;
  _QWORD *v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t *v546;
  uint64_t v547;
  llvm::GetElementPtrInst *v548;
  unsigned __int8 *v549;
  void *v550;
  llvm::Instruction *v551;
  int v552;
  uint64_t v553;
  int v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  unint64_t v558;
  int v559;
  _QWORD *v560;
  int v561;
  unsigned int v562;
  _QWORD *v563;
  uint64_t v564;
  _QWORD *v565;
  int v566;
  BOOL v567;
  unsigned int v568;
  _QWORD *v569;
  _QWORD *v570;
  uint64_t v571;
  uint64_t v572;
  unsigned __int8 *v573;
  int v574;
  uint64_t **v575;
  uint64_t v576;
  uint64_t v577;
  char v578;
  char *v579;
  uint64_t *v580;
  char *v581;
  uint64_t *v582;
  uint64_t v583;
  _QWORD *v584;
  uint64_t v585;
  llvm::GetElementPtrInst *v586;
  char *v587;
  char *v588;
  unsigned __int8 **v589;
  int v590;
  unsigned __int8 *v591;
  unsigned __int8 *v592;
  unsigned __int8 *v593;
  uint64_t *v594;
  uint64_t v595;
  int v596;
  uint64_t **v597;
  uint64_t v598;
  unsigned __int8 *v599;
  uint64_t ***v600;
  uint64_t v601;
  unsigned __int8 *v602;
  const llvm::APInt *v603;
  uint64_t v604;
  _QWORD *v605;
  _QWORD *v606;
  uint64_t v607;
  _QWORD *v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  llvm::ConstantInt *v613;
  unsigned int v614;
  unint64_t v615;
  unsigned __int8 *v616;
  uint64_t v617;
  unsigned __int8 *v618;
  uint64_t v619;
  _QWORD *v620;
  _QWORD *v621;
  uint64_t v622;
  _QWORD *v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  char *v629;
  char *v630;
  unsigned __int8 **v631;
  int v632;
  unsigned __int8 *v633;
  unsigned __int8 *v634;
  unsigned __int8 *v635;
  uint64_t *v636;
  llvm::PointerType *v637;
  char *v638;
  uint64_t ***v639;
  const llvm::APInt *v640;
  uint64_t v641;
  int v642;
  uint64_t v643;
  int v644;
  unsigned int v645;
  uint64_t ****v646;
  uint64_t ***v647;
  int v648;
  uint64_t *v649;
  uint64_t v650;
  llvm::ConstantInt *v651;
  unint64_t v652;
  unint64_t v653;
  llvm::Value *v654;
  llvm::ValueHandleBase *v655;
  llvm::MDNode *Impl;
  int MDKindID;
  uint64_t v658;
  uint64_t v659;
  uint64_t **v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  const llvm::APInt *v664;
  llvm::ConstantInt *v665;
  unsigned int v666;
  unint64_t v667;
  llvm::ValueHandleBase *v668;
  uint64_t v669;
  int v670;
  _QWORD *v671;
  int v672;
  unsigned int v673;
  _QWORD *v674;
  uint64_t v675;
  _QWORD *v676;
  int v677;
  BOOL v678;
  unsigned int v679;
  _QWORD *v680;
  _QWORD *v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t ****v684;
  int v685;
  BOOL v686;
  unsigned int v687;
  uint64_t v688;
  uint64_t v689;
  unint64_t v690;
  unint64_t v691;
  int v692;
  unsigned int v693;
  _QWORD *v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  __int128 *v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  __int128 v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t ****v707;
  uint64_t ***v708;
  uint64_t *v709;
  uint64_t v710;
  uint64_t v711;
  void (**v712)(void);
  uint64_t *v713;
  uint64_t v714;
  uint64_t mm;
  uint64_t v716;
  int v717;
  _QWORD *v718;
  uint64_t v719;
  uint64_t v720;
  const char *v721;
  char v722;
  char v723;
  int32x2_t *v724;
  _BYTE *v725;
  char *v726;
  char *v727;
  int32x2_t v728;
  uint64_t v729;
  uint64_t v730;
  int v731;
  int32x2_t v732;
  int v733;
  unsigned int v734;
  _QWORD *v735;
  uint64_t v736;
  _QWORD *v737;
  int v738;
  BOOL v739;
  unsigned int v740;
  _QWORD *v741;
  uint64_t v742;
  unint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  int v748;
  int v750;
  uint64_t v751;
  uint64_t *v752;
  unint64_t v753;
  unsigned __int8 v754;
  uint64_t v755;
  unsigned int v756;
  unint64_t v757;
  uint8x8_t v758;
  unint64_t v759;
  uint64_t **v760;
  uint64_t *v761;
  unint64_t v762;
  uint64_t *v763;
  _QWORD *v764;
  uint64_t *v765;
  llvm::Instruction *v766;
  uint64_t v767;
  uint64_t v768;
  _DWORD *v769;
  float v770;
  _BOOL8 v771;
  unint64_t v772;
  unint64_t v773;
  int8x8_t prime;
  void *v775;
  void *v776;
  uint64_t v777;
  uint64_t **v778;
  unint64_t v779;
  uint8x8_t v780;
  unint64_t v781;
  uint8x8_t v782;
  uint64_t v783;
  uint64_t *i5;
  unint64_t v785;
  uint64_t *v786;
  _QWORD *v787;
  uint8x8_t v788;
  unint64_t v789;
  uint64_t v790;
  uint64_t **v791;
  uint64_t *v792;
  int v793;
  uint64_t *v794;
  unint64_t v795;
  unint64_t v796;
  _BOOL4 v797;
  unint64_t v798;
  unint64_t v799;
  void *v800;
  llvm::Instruction *v801;
  uint64_t v802;
  _QWORD *v803;
  llvm::Instruction *v804;
  uint64_t v805;
  uint64_t v806;
  char *v807;
  uint64_t NearestCommonDominator;
  llvm::Instruction *v809;
  uint64_t v810;
  _QWORD *v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  llvm::Instruction *v815;
  uint64_t v816;
  _QWORD *v817;
  uint64_t v818;
  char *v819;
  uint64_t *v820;
  int v821;
  uint64_t v822;
  uint64_t v823;
  unsigned int v824;
  uint64_t v825;
  uint64_t *v826;
  uint64_t v827;
  int v828;
  int v829;
  _QWORD *v830;
  llvm::Instruction **v831;
  uint64_t v832;
  llvm::Instruction **v833;
  uint64_t v834;
  int v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  int v839;
  int v840;
  _QWORD *v841;
  uint64_t v842;
  uint64_t v843;
  int v844;
  int v845;
  _QWORD *v846;
  int v847;
  int32x2_t *v848;
  int v849;
  unsigned int v850;
  llvm::Instruction **v851;
  llvm::Instruction *v852;
  llvm::Instruction **v853;
  int v854;
  BOOL v855;
  unsigned int v856;
  llvm::Instruction **v857;
  _QWORD *v858;
  llvm::Instruction *v859;
  unint64_t v860;
  uint64_t v861;
  uint64_t v862;
  int v863;
  _QWORD *v864;
  unsigned int v865;
  int v866;
  unsigned int v867;
  uint64_t v868;
  int v869;
  unsigned int v870;
  _QWORD *v871;
  uint64_t *v872;
  int v873;
  int32x2_t v874;
  int v875;
  unsigned int v876;
  _QWORD *v877;
  uint64_t v878;
  _QWORD *v879;
  int v880;
  BOOL v881;
  unsigned int v882;
  _QWORD *v883;
  _QWORD *v884;
  uint64_t v885;
  unint64_t v886;
  llvm::Instruction *v887;
  int32x2_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t *v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  unint64_t v899;
  char *v900;
  int v901;
  char *v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  int v906;
  int v907;
  uint64_t v908;
  llvm::ValueSymbolTable *v909;
  uint64_t v910;
  llvm::ValueSymbolTable *v911;
  unint64_t v912;
  uint64_t *v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t *v916;
  llvm::DataLayout *v917;
  unint64_t *v918;
  uint64_t v919;
  unint64_t *v920;
  unint64_t v921;
  _QWORD *v922;
  _QWORD *v923;
  void *v924;
  int v925;
  uint64_t *v926;
  uint64_t *v927;
  uint64_t v928;
  uint64_t nn;
  uint64_t v930;
  _QWORD *v931;
  uint64_t v932;
  unsigned int *v933;
  uint64_t v934;
  uint64_t *v935;
  uint64_t v936;
  int v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t i1;
  uint64_t v944;
  uint64_t v945;
  unsigned int v946;
  uint64_t v947;
  _QWORD *v948;
  unsigned int v949;
  char *v950;
  uint64_t v951;
  uint64_t v952;
  char v953;
  uint64_t v954;
  int v955;
  llvm::Type *v956;
  unint64_t v957;
  uint64_t v958;
  uint64_t v959;
  _QWORD *v960;
  const char *v961;
  unint64_t PrimitiveSizeInBits;
  uint64_t v963;
  unint64_t v964;
  char *v965;
  uint64_t v966;
  uint64_t v967;
  __int128 v968;
  unint64_t v969;
  BOOL v970;
  unint64_t *v971;
  char *v972;
  unint64_t *v973;
  uint64_t v974;
  uint64_t v975;
  unint64_t v976;
  unint64_t v977;
  uint64_t v978;
  int8x8_t v979;
  unsigned int v980;
  int v981;
  int v982;
  uint64_t v983;
  __int32 v984;
  unsigned int v985;
  uint64_t *v986;
  uint64_t v987;
  char v988;
  _QWORD *v989;
  int v990;
  llvm::Type **v991;
  uint64_t v992;
  int v993;
  llvm::Type *v995;
  uint8x8_t v996;
  int v997;
  int v998;
  llvm::Type *v999;
  uint64_t v1000;
  uint64_t v1001;
  unsigned int v1002;
  uint64_t v1003;
  int v1004;
  unsigned int v1005;
  uint64_t v1006;
  BOOL v1007;
  uint64_t v1008;
  BOOL v1009;
  _QWORD *v1010;
  uint8x8_t v1011;
  int v1012;
  uint64_t v1013;
  uint64_t *v1014;
  char *v1015;
  uint64_t v1016;
  _QWORD *v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  _QWORD *v1021;
  int v1022;
  uint64_t v1023;
  unsigned int v1024;
  uint64_t v1025;
  int v1026;
  unsigned int v1027;
  uint64_t v1028;
  int v1029;
  uint64_t v1030;
  uint64_t *v1031;
  uint64_t v1032;
  _QWORD *v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  int v1040;
  BOOL v1041;
  _BOOL4 v1042;
  uint64_t *v1044;
  uint64_t v1045;
  uint64_t *v1046;
  uint64_t v1047;
  _QWORD *v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t i2;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t *v1054;
  uint64_t v1055;
  uint64_t v1056;
  _BYTE *v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t i3;
  void *v1063;
  int v1064;
  _QWORD *v1065;
  unsigned int v1066;
  int v1067;
  unsigned int v1068;
  void *v1069;
  int v1070;
  unsigned int v1071;
  int v1072;
  uint64_t v1073;
  int v1074;
  unsigned int v1075;
  _QWORD *v1076;
  void *v1077;
  _QWORD *v1078;
  int v1079;
  BOOL v1080;
  unsigned int v1081;
  _QWORD *v1082;
  void **v1083;
  void *v1084;
  unint64_t v1085;
  uint64_t v1086;
  _QWORD *v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  _QWORD *v1093;
  uint64_t v1094;
  _QWORD *v1095;
  uint64_t v1096;
  uint64_t v1097;
  _QWORD *v1098;
  uint64_t v1099;
  uint64_t v1100;
  _QWORD *v1101;
  uint64_t v1102;
  uint64_t v1103;
  _QWORD *v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t *v1108;
  uint64_t *v1109;
  _BYTE *v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  void *v1114;
  int v1115;
  uint64_t v1116;
  int v1117;
  unsigned int v1118;
  _QWORD *v1119;
  void *v1120;
  _QWORD *v1121;
  int v1122;
  BOOL v1123;
  unsigned int v1124;
  _QWORD *v1125;
  void **v1126;
  void *v1127;
  unint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t **v1132;
  uint64_t **v1133;
  uint64_t v1134;
  uint64_t *v1135;
  unsigned int v1136;
  int v1137;
  uint64_t *v1138;
  int v1139;
  uint64_t v1140;
  int v1141;
  unsigned int v1142;
  uint64_t *v1143;
  int v1144;
  unsigned int v1145;
  uint64_t v1146;
  int v1147;
  uint64_t *v1148;
  uint64_t v1149;
  uint64_t *v1150;
  uint64_t v1151;
  uint64_t v1152;
  unsigned int v1153;
  uint64_t v1154;
  int v1155;
  uint64_t v1156;
  int v1157;
  unsigned int v1158;
  uint64_t v1159;
  int v1160;
  unsigned int v1161;
  uint64_t v1162;
  uint64_t i4;
  uint64_t v1164;
  int v1165;
  uint64_t v1166;
  int v1167;
  unsigned int v1168;
  uint64_t v1169;
  int v1170;
  unsigned int v1171;
  _QWORD *v1172;
  uint64_t *v1173;
  uint64_t v1174;
  uint64_t *v1175;
  uint64_t v1176;
  uint64_t *v1177;
  uint64_t v1178;
  uint64_t v1179;
  unint64_t *v1180;
  uint64_t v1181;
  unint64_t v1182;
  llvm::SmallPtrSetImplBase *v1183;
  uint64_t v1184;
  uint64_t n;
  uint64_t v1186;
  _QWORD *v1187;
  uint64_t v1188;
  uint64_t v1189;
  unint64_t v1190;
  unint64_t *v1191;
  unint64_t v1192;
  uint64_t v1193;
  uint64_t *v1194;
  uint64_t v1195;
  uint64_t *v1196;
  BOOL v1197;
  uint64_t v1198;
  uint64_t v1199;
  int v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  int v1204;
  uint64_t v1205;
  int v1206;
  unsigned int v1207;
  uint64_t v1208;
  int v1209;
  unsigned int v1210;
  _QWORD *v1211;
  uint64_t *v1212;
  uint64_t v1213;
  uint64_t *v1214;
  uint64_t v1215;
  uint64_t *v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t *v1219;
  uint64_t *v1220;
  uint64_t v1221;
  int v1222;
  uint64_t v1223;
  int v1224;
  unsigned int v1225;
  _QWORD *v1226;
  uint64_t v1227;
  _QWORD *v1228;
  int v1229;
  BOOL v1230;
  unsigned int v1231;
  _QWORD *v1232;
  _QWORD *v1233;
  uint64_t v1234;
  unint64_t v1235;
  void *v1237;
  uint64_t *v1238;
  uint64_t v1239;
  unsigned __int8 **v1240;
  unsigned __int8 *v1241;
  int v1242;
  uint64_t v1243;
  int v1244;
  unsigned int v1245;
  unsigned __int8 *v1246;
  int v1247;
  unsigned int v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  int v1252;
  uint64_t v1253;
  BOOL v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  unsigned __int8 **v1258;
  int v1259;
  uint64_t v1260;
  llvm::Instruction *v1261;
  uint64_t **v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  unsigned int v1266;
  uint64_t v1267;
  uint64_t *v1268;
  uint64_t *v1269;
  uint64_t v1270;
  uint64_t v1271;
  const llvm::APInt *v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t *v1280;
  _QWORD *v1281;
  uint64_t v1282;
  uint64_t v1283;
  llvm::ConstantInt *v1284;
  unint64_t v1285;
  unint64_t v1286;
  llvm::ValueHandleBase *v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t *v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t *v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t *v1300;
  _QWORD *v1301;
  int v1302;
  uint64_t v1303;
  uint64_t v1304;
  int v1305;
  unsigned int v1306;
  _QWORD *v1307;
  uint64_t v1308;
  _QWORD *v1309;
  int v1310;
  BOOL v1311;
  unsigned int v1312;
  _QWORD *v1313;
  uint64_t v1314;
  unint64_t v1315;
  uint64_t v1316;
  int v1317;
  uint64_t v1318;
  int v1319;
  unsigned int v1320;
  _QWORD *v1321;
  uint64_t v1322;
  _QWORD *v1323;
  int v1324;
  BOOL v1325;
  unsigned int v1326;
  _QWORD *v1327;
  _QWORD *v1328;
  uint64_t v1329;
  unint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  int v1333;
  uint64_t v1334;
  int v1335;
  uint64_t v1336;
  uint64_t *v1337;
  uint64_t v1338;
  int v1339;
  int v1340;
  uint64_t v1341;
  _QWORD *v1342;
  uint64_t v1343;
  _QWORD *v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  int v1349;
  unsigned int v1350;
  void *v1351;
  int v1352;
  unsigned int v1353;
  void *v1354;
  int v1355;
  unsigned int v1356;
  void *v1357;
  unsigned int v1358;
  int v1359;
  unsigned int v1360;
  void *v1361;
  _QWORD *v1362;
  unsigned int v1363;
  uint64_t v1364;
  int v1365;
  _BOOL4 v1366;
  uint64_t ***v1367;
  _BOOL4 v1368;
  llvm::PointerType *v1369;
  uint64_t ***v1370;
  unint64_t v1371;
  uint64_t v1372;
  int v1373;
  int v1374;
  uint64_t v1375;
  __int128 v1376;
  char v1377;
  _BOOL4 v1378;
  _BOOL4 v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t *v1384;
  uint64_t v1385;
  char v1386;
  char v1387;
  unsigned __int8 *v1388;
  uint64_t *v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  unsigned __int8 *v1394;
  unsigned __int8 *v1395;
  uint64_t v1396;
  llvm::SmallPtrSetImplBase *v1397;
  llvm::SmallPtrSetImplBase *v1398;
  uint64_t v1399;
  _QWORD *v1400;
  _QWORD *v1401;
  uint64_t v1402;
  uint64_t v1403;
  _QWORD *v1404;
  _BOOL4 v1405;
  uint64_t v1406;
  int32x2_t *v1407;
  uint64_t v1408;
  uint64_t v1409;
  _QWORD *v1410;
  int v1411;
  uint64_t *v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  _QWORD *v1417;
  uint64_t v1418;
  uint64_t v1419;
  _QWORD *v1420;
  _BOOL4 v1421;
  int v1422;
  uint64_t *v1423;
  int32x2_t *v1424;
  uint64_t v1425;
  int v1426;
  llvm::SmallPtrSetImplBase *v1427;
  llvm::SmallPtrSetImplBase *v1428;
  llvm::SmallPtrSetImplBase *v1429;
  llvm::SmallPtrSetImplBase *v1430;
  _BYTE *v1431;
  uint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  llvm::SmallPtrSetImplBase *v1436;
  int32x2_t *v1437;
  uint64_t v1438;
  uint64_t v1439;
  unint64_t *v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t *v1443;
  uint64_t v1444;
  uint64_t v1445;
  _QWORD **v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  int v1450;
  unint64_t *v1451;
  uint64_t v1452;
  llvm::SmallPtrSetImplBase *v1453;
  llvm::SmallPtrSetImplBase *v1454;
  llvm::SmallPtrSetImplBase *v1455;
  unsigned __int8 *v1456;
  llvm::SmallPtrSetImplBase *v1457;
  llvm::SmallPtrSetImplBase *v1458;
  llvm::SmallPtrSetImplBase *m;
  llvm::SmallPtrSetImplBase *v1460;
  uint64_t v1461;
  _QWORD *v1462;
  uint64_t v1463;
  int v1464;
  uint64_t v1465;
  llvm::Instruction *v1466;
  uint64_t v1467;
  int v1468;
  __int16 v1469;
  uint64_t v1470[2];
  void *v1471[2];
  uint64_t v1472;
  int v1473;
  unsigned int v1474;
  unsigned int v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t *v1480;
  uint64_t v1481;
  uint64_t v1482;
  int v1483;
  _WORD v1484[64];
  uint64_t v1485;
  _QWORD *v1486;
  int v1487;
  uint64_t *v1488;
  uint64_t v1489;
  _BYTE v1490[256];
  unsigned __int8 *v1491;
  unsigned __int8 *v1492;
  unsigned __int8 *v1493;
  llvm::ValueHandleBase *v1494;
  __int128 v1495;
  __int128 v1496;
  int *v1497;
  uint64_t v1498;
  unsigned int v1499;
  int v1500;
  unsigned int v1501;
  __int128 v1502;
  _DWORD v1503[2];
  __int128 *v1504;
  __int16 v1505;
  uint64_t (**v1506)();
  uint64_t v1507;
  uint64_t v1508;
  uint64_t **v1509;
  __int16 v1510;
  uint64_t v1511;

  v4 = a2;
  v5 = a1;
  v1511 = *MEMORY[0x1E0C80C00];
  v1372 = a1 + 2244;
  v6 = (_BYTE *)(a1 + 4645);
  v1380 = *((_QWORD *)a2 + 160);
  v7 = *(_QWORD *)(v1380 + 40);
  v1485 = 1;
  v8 = 8;
  v9 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)((char *)&v1485 + v8) = v9;
    v8 += 16;
  }
  while (v8 != 264);
  v1488 = (uint64_t *)v1490;
  v1489 = 0x2000000000;
  if (dword_1ED8089E8 == -1)
    v10 = (*(_DWORD *)(a1 + 4636) >> 1) & 0x7FFFFFFC;
  else
    v10 = dword_1ED8089E8;
  v11 = ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 440))(a3) + 7) & 0xFFFFFFF8;
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  v13 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 64))(v12) + 4);
  if (v13 >= 256)
    v13 = 256;
  v14 = __OFSUB__(v13, v11);
  v15 = v13 - v11;
  if (v15 < 0 != v14)
    ++v15;
  v1373 = v15;
  v1374 = v10;
  if (v10 >= 1)
  {
    v1441 = v7 + 272;
    v16 = *(_QWORD *)(v5 + 4616);
    v17 = &unk_1C640E000;
    v1461 = (uint64_t)v4;
    v1463 = v5;
    v1431 = v6;
    if (!v16)
    {
      v153 = *(_QWORD *)(v1380 + 40);
      goto LABEL_225;
    }
    *(_QWORD *)&v1495 = &v1496;
    *((_QWORD *)&v1495 + 1) = 0x1000000000;
    v1471[0] = &v1474;
    v1471[1] = &v1474;
    v1472 = 16;
    v1473 = 0;
    v18 = *(_QWORD *)(v5 + 4608);
    v19 = *(char **)(v18 + 24);
    v20 = *(char **)(v18 + 32);
    v1480 = &v1482;
    v1481 = 0x800000000;
    sub_1C499C3FC((unsigned int *)&v1480, v19, v20);
    v21 = v1481;
    if ((_DWORD)v1481)
    {
      v22 = (uint64_t)(v4 + 132);
      v1453 = (llvm::SmallPtrSetImplBase *)(v5 + 3200);
      v1408 = v5 + 3632;
      v1414 = v5 + 3616;
      v23 = (llvm::SmallPtrSetImplBase *)(v5 + 3296);
      do
      {
        v24 = v1480[v21 - 1];
        LODWORD(v1481) = v21 - 1;
        v1442 = v24;
        v25 = **(_QWORD ***)(v24 + 32);
        v26 = *(_QWORD *)(v1463 + 4616);
        v27 = sub_1C560DA80(v26, v25);
        v28 = *(_QWORD *)(v26 + 3352);
        v5 = v1463;
        v29 = v28 + 32 * v27;
        v30 = *(unsigned int *)(v29 + 16);
        if ((_DWORD)v30)
        {
          v31 = *(_DWORD **)(v29 + 8);
          for (i = 4 * v30; i; i -= 4)
          {
            v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 4616) + 3352) + 32 * (*v31 & 0xFFFFFF));
            v34 = *(_QWORD *)(v33 + 40);
            if (v34 != v33 + 40)
            {
              v35 = v34 == 0;
              if (v34)
                v36 = v34 - 24;
              else
                v36 = 0;
              v37 = *(unsigned __int8 *)(v36 + 16) - 40;
              v38 = __CFADD__(v37, 11);
              if (v37 < 0xFFFFFFF5)
                v36 = 0;
              v39 = *(unsigned __int8 *)(v36 + 16);
              if (!v38)
                v35 = 1;
              if (v39 == 30 && !v35)
              {
                v40 = *(_QWORD *)(v36 - 96);
                goto LABEL_35;
              }
              v41 = v39 != 31 || v35;
              if ((v41 & 1) == 0)
              {
                v42 = *(_DWORD *)(v36 + 20);
                if ((v42 & 0x40000000) != 0)
                  v43 = *(uint64_t **)(v36 - 8);
                else
                  v43 = (uint64_t *)(v36 - 32 * (v42 & 0x7FFFFFF));
                v40 = *v43;
LABEL_35:
                if (v40)
                  v44 = *(unsigned __int8 *)(v40 + 16) >= 0x1Cu;
                else
                  v44 = 0;
                if (v44)
                {
                  v45 = DWORD2(v1495);
                  if (DWORD2(v1495) >= (unint64_t)HIDWORD(v1495))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1495, (uint64_t)&v1496, DWORD2(v1495) + 1, 8);
                    v45 = DWORD2(v1495);
                  }
                  *(_QWORD *)(v1495 + 8 * v45) = v40;
                  ++DWORD2(v1495);
                }
              }
            }
            ++v31;
          }
        }
        if (v6[2])
        {
          v46 = 0;
        }
        else
        {
          v47 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::hasDedicatedExits((_QWORD *)v1442) ^ 1;
          if ((v47 & 1) == 0)
          {
            *(_QWORD *)&v1502 = v1503;
            *((_QWORD *)&v1502 + 1) = 0x400000000;
            sub_1C4EAEA40((_QWORD *)v1442, (uint64_t)&v1502);
            if (DWORD2(v1502) == 1)
            {
              v48 = *(_QWORD *)v1502 + 40;
              v49 = *(_QWORD *)(*(_QWORD *)v1502 + 48);
              if (v49 != v48)
              {
                do
                {
                  v50 = v49 ? v49 - 24 : 0;
                  if (*(_BYTE *)(v50 + 16) != 83)
                    break;
                  v51 = sub_1C477672C(v22, v50);
                  v52 = *(_QWORD *)(v1461 + 536);
                  if (v52 == *(_QWORD *)(v1461 + 528))
                    v53 = (unsigned int *)(v1461 + 548);
                  else
                    v53 = (unsigned int *)(v1461 + 544);
                  if (v51 != (_QWORD *)(v52 + 8 * *v53))
                  {
                    sub_1C4774094(v1453, v1442);
                    break;
                  }
                  v49 = *(_QWORD *)(v49 + 8);
                }
                while (v49 != v48);
LABEL_85:
                v46 = v47;
                goto LABEL_86;
              }
            }
            else if (DWORD2(v1502))
            {
              v54 = 0;
              v55 = (_QWORD *)v1502;
              while (1)
              {
                v57 = (_QWORD *)(*v55 + 40);
                v56 = (_QWORD *)*v57;
                if ((_QWORD *)*v57 == v57)
                {
                  v58 = 0;
                }
                else
                {
                  if (v56)
                    v58 = v56 - 3;
                  else
                    v58 = 0;
                  if (*((unsigned __int8 *)v58 + 16) - 29 >= 0xB)
                    v58 = 0;
                }
                v59 = *((unsigned __int8 *)v58 + 16);
                if (v59 != 30)
                  __asm { BR              X15 }
                v60 = 2;
                v61 = *v55 + 40;
                do
                {
                  v61 = *(_QWORD *)(v61 + 8);
                  --v60;
                }
                while ((_QWORD *)v61 != v57);
                if (v60 && (*((_DWORD *)v58 + 5) & 0x7FFFFFF) == 3)
                  break;
                v62 = *(v58 - 4);
                if (v54)
                {
                  v208 = v54 == v62;
                  v62 = v54;
                  if (!v208)
                    break;
                }
                ++v55;
                v54 = v62;
                if (v55 == (_QWORD *)(v1502 + 8 * DWORD2(v1502)))
                  goto LABEL_85;
              }
              v46 = 1;
              goto LABEL_86;
            }
            v46 = 0;
LABEL_86:
            if ((_DWORD *)v1502 != v1503)
              free((void *)v1502);
            goto LABEL_88;
          }
          v46 = 1;
        }
LABEL_88:
        v63 = v25 + 5;
        for (j = (_QWORD *)v25[6]; j != v63; j = (_QWORD *)j[1])
        {
          v65 = j ? (uint64_t)(j - 3) : 0;
          if (*(_BYTE *)(v65 + 16) != 83)
            break;
          v66 = sub_1C477672C(v22, v65);
          v67 = *(_QWORD *)(v1461 + 536);
          if (v67 == *(_QWORD *)(v1461 + 528))
            v68 = (unsigned int *)(v1461 + 548);
          else
            v68 = (unsigned int *)(v1461 + 544);
          if (v66 != (_QWORD *)(v67 + 8 * *v68))
          {
            if (!v6[2])
              sub_1C4774094(v1453, v1442);
            continue;
          }
          sub_1C4774094((llvm::SmallPtrSetImplBase *)v1471, v65);
          if (v69)
          {
            v70 = *(unsigned int *)(v5 + 3624);
            if (v70 >= *(unsigned int *)(v5 + 3628))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v1414, v1408, v70 + 1, 8);
              v70 = *(unsigned int *)(v5 + 3624);
            }
            *(_QWORD *)(*(_QWORD *)(v5 + 3616) + 8 * v70) = v65;
            v71 = *(_DWORD *)(v5 + 3624);
            v38 = __CFADD__(v71, 1);
            v72 = v71 + 1;
            *(_DWORD *)(v5 + 3624) = v72;
            if (!v38)
            {
              do
              {
                v73 = v5;
                v74 = *(_QWORD *)(*(_QWORD *)(v5 + 3616) + 8 * v72 - 8);
                *(_DWORD *)(v73 + 3624) = v72 - 1;
                v75 = *(uint64_t **)(v73 + 4608);
                v76 = *((_DWORD *)v75 + 4);
                if (v76)
                {
                  v77 = *(_QWORD *)(v74 + 40);
                  v78 = *v75;
                  v79 = v76 - 1;
                  v80 = ((v77 >> 4) ^ (v77 >> 9)) & (v76 - 1);
                  v81 = *(_QWORD *)(v78 + 16 * v80);
                  if (v77 == v81)
                  {
LABEL_111:
                    v84 = *(_QWORD *)(v78 + 16 * v80 + 8);
                    goto LABEL_113;
                  }
                  v82 = 1;
                  while (v81 != -4096)
                  {
                    v83 = v80 + v82++;
                    v80 = v83 & v79;
                    v81 = *(_QWORD *)(v78 + 16 * v80);
                    if (v77 == v81)
                      goto LABEL_111;
                  }
                }
                v84 = 0;
LABEL_113:
                sub_1C4774094(v23, v74);
                v85 = sub_1C477672C(v22, v74);
                v86 = *(_QWORD *)(v1461 + 536);
                if (v86 == *(_QWORD *)(v1461 + 528))
                  v87 = (unsigned int *)(v1461 + 548);
                else
                  v87 = (unsigned int *)(v1461 + 544);
                if (v85 == (_QWORD *)(v86 + 8 * *v87))
                {
                  if (*(unsigned __int8 *)(v74 + 16) - 29 >= 0xB)
                  {
                    if (v46)
                    {
                      sub_1C4774094(v1453, v84);
                    }
                    else
                    {
                      for (k = *(_QWORD *)(v74 + 8); k; k = *(_QWORD *)(k + 8))
                      {
                        v90 = *(_QWORD *)(k + 24);
                        if (*(unsigned __int8 *)(v90 + 16) >= 0x1Cu)
                        {
                          v91 = *(uint64_t **)(v1463 + 4608);
                          v92 = *((_DWORD *)v91 + 4);
                          if (v92)
                          {
                            v93 = *(_QWORD *)(v90 + 40);
                            v94 = *v91;
                            v95 = v92 - 1;
                            v96 = ((v93 >> 4) ^ (v93 >> 9)) & (v92 - 1);
                            v97 = *(_QWORD *)(v94 + 16 * v96);
                            if (v93 == v97)
                            {
LABEL_134:
                              v100 = *(_QWORD **)(v94 + 16 * v96 + 8);
                              if (v100)
                              {
                                if ((_QWORD *)v84 == v100)
                                {
LABEL_142:
                                  sub_1C4774094((llvm::SmallPtrSetImplBase *)v1471, *(_QWORD *)(k + 24));
                                  if (v102)
                                  {
                                    v103 = *(unsigned int *)(v1463 + 3624);
                                    if (v103 >= *(unsigned int *)(v1463 + 3628))
                                    {
                                      llvm::SmallVectorBase<unsigned int>::grow_pod(v1414, v1408, v103 + 1, 8);
                                      v103 = *(unsigned int *)(v1463 + 3624);
                                    }
                                    v104 = v1463;
                                    *(_QWORD *)(*(_QWORD *)(v1463 + 3616) + 8 * v103) = v90;
                                    ++*(_DWORD *)(v104 + 3624);
                                  }
                                }
                                else
                                {
                                  v101 = (_QWORD *)v84;
                                  while (v101)
                                  {
                                    v101 = (_QWORD *)*v101;
                                    if (v101 == v100)
                                      goto LABEL_142;
                                  }
                                  while (v100)
                                  {
                                    v100 = (_QWORD *)*v100;
                                    if (v100 == (_QWORD *)v84)
                                      goto LABEL_142;
                                  }
                                }
                              }
                            }
                            else
                            {
                              v98 = 1;
                              while (v97 != -4096)
                              {
                                v99 = v96 + v98++;
                                v96 = v99 & v95;
                                v97 = *(_QWORD *)(v94 + 16 * v96);
                                if (v93 == v97)
                                  goto LABEL_134;
                              }
                            }
                          }
                        }
                      }
                    }
                    goto LABEL_123;
                  }
                }
                else if (!v6[2])
                {
                  sub_1C4774094(v1453, v84);
                }
                v88 = DWORD2(v1495);
                if (DWORD2(v1495) >= (unint64_t)HIDWORD(v1495))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1495, (uint64_t)&v1496, DWORD2(v1495) + 1, 8);
                  v88 = DWORD2(v1495);
                }
                *(_QWORD *)(v1495 + 8 * v88) = v74;
                ++DWORD2(v1495);
LABEL_123:
                v5 = v1463;
                v72 = *(_DWORD *)(v1463 + 3624);
              }
              while (v72);
            }
          }
        }
        sub_1C499C3FC((unsigned int *)&v1480, *(char **)(v1442 + 8), *(char **)(v1442 + 16));
        v21 = v1481;
      }
      while ((_DWORD)v1481);
    }
    if (v1471[1] != v1471[0])
    {
      if (v1472 >= 0x21 && 4 * (HIDWORD(v1472) - v1473) < v1472)
      {
        free(v1471[1]);
        v1349 = 1 << (33 - __clz(HIDWORD(v1472) - v1473 - 1));
        v1197 = (HIDWORD(v1472) - v1473) > 0x10;
        v1473 = 0;
        if (v1197)
          v1350 = v1349;
        else
          v1350 = 32;
        v1472 = v1350;
        v1351 = malloc_type_malloc(8 * v1350, 0x4065EBACuLL);
        if (!v1351)
          goto LABEL_2080;
        v1471[1] = v1351;
        memset(v1351, 255, 8 * v1472);
        goto LABEL_151;
      }
      memset(v1471[1], 255, 8 * v1472);
    }
    v1473 = 0;
    HIDWORD(v1472) = 0;
LABEL_151:
    if (DWORD2(v1495))
    {
      v105 = (uint64_t *)v1495;
      v1443 = (uint64_t *)(v1495 + 8 * DWORD2(v1495));
      v1433 = v5 + 3616;
      v1415 = v5 + 3632;
      v106 = v5 + 3296;
      v107 = (llvm::SmallPtrSetImplBase *)(v5 + 3456);
      while (1)
      {
        v108 = *v105;
        v109 = sub_1C477672C((uint64_t)v1471, *v105);
        v110 = v1471[1] == v1471[0] ? (uint64_t *)((char *)&v1472 + 4) : &v1472;
        if (v109 == (_QWORD *)((char *)v1471[1] + 8 * *(unsigned int *)v110))
        {
          v111 = *(uint64_t **)(v5 + 4608);
          v112 = *((_DWORD *)v111 + 4);
          if (v112)
          {
            v113 = *(_QWORD *)(v108 + 40);
            v114 = *v111;
            v115 = v112 - 1;
            v116 = ((v113 >> 4) ^ (v113 >> 9)) & (v112 - 1);
            v117 = *(_QWORD *)(v114 + 16 * v116);
            if (v113 != v117)
            {
              v118 = 1;
              while (v117 != -4096)
              {
                v119 = v116 + v118++;
                v116 = v119 & v115;
                v117 = *(_QWORD *)(v114 + 16 * v116);
                if (v113 == v117)
                  goto LABEL_164;
              }
              goto LABEL_157;
            }
LABEL_164:
            v1454 = *(llvm::SmallPtrSetImplBase **)(v114 + 16 * v116 + 8);
            if (v1454)
            {
              v120 = *(unsigned int *)(v5 + 3624);
              if (v120 >= *(unsigned int *)(v5 + 3628))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v1433, v1415, v120 + 1, 8);
                v120 = *(unsigned int *)(v5 + 3624);
              }
              *(_QWORD *)(*(_QWORD *)(v5 + 3616) + 8 * v120) = v108;
              v121 = *(_DWORD *)(v5 + 3624);
              v38 = __CFADD__(v121, 1);
              v122 = v121 + 1;
              *(_DWORD *)(v5 + 3624) = v122;
              if (!v38)
                break;
            }
          }
        }
LABEL_157:
        if (++v105 == v1443)
          goto LABEL_207;
      }
      while (1)
      {
        v123 = *(_QWORD *)(*(_QWORD *)(v5 + 3616) + 8 * v122 - 8);
        *(_DWORD *)(v5 + 3624) = v122 - 1;
        v124 = sub_1C477672C(v106, v123);
        v125 = *(_QWORD *)(v5 + 3304);
        if (v125 == *(_QWORD *)(v5 + 3296))
          v126 = 3316;
        else
          v126 = 3312;
        if (v124 != (_QWORD *)(v125 + 8 * *(unsigned int *)(v5 + v126)))
          sub_1C4774094(v107, v123);
        v127 = *(_DWORD *)(v123 + 20);
        if ((v127 & 0x40000000) != 0)
        {
          v129 = *(uint64_t **)(v123 - 8);
          v128 = v127 & 0x7FFFFFF;
          if (v128)
          {
LABEL_177:
            v130 = &v129[4 * v128];
            do
            {
              v131 = *v129;
              if (*(unsigned __int8 *)(*v129 + 16) >= 0x1Cu)
              {
                v132 = sub_1C477672C(v106, *v129);
                v133 = *(_QWORD *)(v1463 + 3304);
                v134 = v133 == *(_QWORD *)(v1463 + 3296) ? 3316 : 3312;
                if (v132 != (_QWORD *)(v133 + 8 * *(unsigned int *)(v1463 + v134)))
                {
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)v1471, v131);
                  if (v135)
                  {
                    v136 = sub_1C477672C((uint64_t)v107, v131);
                    v137 = *(_QWORD *)(v1463 + 3464);
                    v138 = 3472;
                    if (v137 == *(_QWORD *)(v1463 + 3456))
                      v138 = 3476;
                    if (v136 == (_QWORD *)(v137 + 8 * *(unsigned int *)(v1463 + v138)))
                    {
                      v139 = *(uint64_t **)(v1463 + 4608);
                      v140 = *((_DWORD *)v139 + 4);
                      if (v140)
                      {
                        v141 = *(_QWORD *)(v131 + 40);
                        v142 = *v139;
                        v143 = v140 - 1;
                        v144 = ((v141 >> 4) ^ (v141 >> 9)) & (v140 - 1);
                        v145 = *(_QWORD *)(v142 + 16 * v144);
                        if (v141 == v145)
                        {
LABEL_194:
                          v148 = *(llvm::SmallPtrSetImplBase **)(v142 + 16 * v144 + 8);
                          if (v148)
                          {
                            if (v1454 == v148)
                            {
LABEL_202:
                              v150 = *(unsigned int *)(v1463 + 3624);
                              if (v150 >= *(unsigned int *)(v1463 + 3628))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod(v1433, v1415, v150 + 1, 8);
                                v150 = *(unsigned int *)(v1463 + 3624);
                              }
                              v151 = v1463;
                              *(_QWORD *)(*(_QWORD *)(v1463 + 3616) + 8 * v150) = v131;
                              ++*(_DWORD *)(v151 + 3624);
                            }
                            else
                            {
                              v149 = v1454;
                              while (v149)
                              {
                                v149 = *(llvm::SmallPtrSetImplBase **)v149;
                                if (v149 == v148)
                                  goto LABEL_202;
                              }
                              while (v148)
                              {
                                v148 = *(llvm::SmallPtrSetImplBase **)v148;
                                if (v148 == v1454)
                                  goto LABEL_202;
                              }
                            }
                          }
                        }
                        else
                        {
                          v146 = 1;
                          while (v145 != -4096)
                          {
                            v147 = v144 + v146++;
                            v144 = v147 & v143;
                            v145 = *(_QWORD *)(v142 + 16 * v144);
                            if (v141 == v145)
                              goto LABEL_194;
                          }
                        }
                      }
                    }
                  }
                }
              }
              v129 += 4;
            }
            while (v129 != v130);
          }
        }
        else
        {
          v128 = v127 & 0x7FFFFFF;
          v129 = (uint64_t *)(v123 - 32 * v128);
          if (v128)
            goto LABEL_177;
        }
        v5 = v1463;
        v122 = *(_DWORD *)(v1463 + 3624);
        if (!v122)
          goto LABEL_157;
      }
    }
LABEL_207:
    if (v1480 != &v1482)
      free(v1480);
    if (v1471[1] != v1471[0])
      free(v1471[1]);
    v17 = &unk_1C640E000;
    if ((__int128 *)v1495 != &v1496)
      free((void *)v1495);
    v152 = v1380;
    if (!v6[2])
    {
      v155 = *(_QWORD *)(v1463 + 3208);
      v156 = 3216;
      if (v155 == *(_QWORD *)(v1463 + 3200))
        v156 = 3220;
      v157 = *(unsigned int *)(v1463 + v156);
      if ((_DWORD)v157)
      {
        v158 = 8 * v157;
        v159 = *(unint64_t **)(v1463 + 3208);
        while (*v159 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v159;
          v158 -= 8;
          if (!v158)
            goto LABEL_214;
        }
      }
      else
      {
        v159 = *(unint64_t **)(v1463 + 3208);
      }
      v1180 = (unint64_t *)(v155 + 8 * v157);
      if (v159 != v1180)
      {
        v1440 = v1180;
        v1181 = v1463 + 3296;
        v1451 = v159;
        v1182 = *v159;
LABEL_1759:
        v1183 = *(llvm::SmallPtrSetImplBase **)(v1182 + 32);
        for (m = *(llvm::SmallPtrSetImplBase **)(v1182 + 40);
              v1183 != m;
              v1183 = (llvm::SmallPtrSetImplBase *)((char *)v1183 + 8))
        {
          v1184 = *(_QWORD *)v1183 + 40;
          for (n = *(_QWORD *)(*(_QWORD *)v1183 + 48); n != v1184; n = *(_QWORD *)(n + 8))
          {
            if (n)
              v1186 = n - 24;
            else
              v1186 = 0;
            v1187 = sub_1C477672C(v1181, v1186);
            v1188 = *(_QWORD *)(v1463 + 3304);
            if (v1188 == *(_QWORD *)(v1463 + 3296))
              v1189 = 3316;
            else
              v1189 = 3312;
            if (v1187 != (_QWORD *)(v1188 + 8 * *(unsigned int *)(v1463 + v1189))
              || *(_BYTE *)(v1186 + 16) == 83
              || !sub_1C563BD30(v1186, v1441, *(int **)(v1463 + 4592), *(_QWORD *)(v1463 + 4616), v6[9], 0))
            {
              v1190 = *(unsigned int *)(v1461 + 8);
              if (v1190 >= *(unsigned int *)(v1461 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v1461, v1461 + 16, v1190 + 1, 8);
                v1190 = *(unsigned int *)(v1461 + 8);
              }
              *(_QWORD *)(*(_QWORD *)v1461 + 8 * v1190) = v1186;
              ++*(_DWORD *)(v1461 + 8);
              sub_1C4774094((llvm::SmallPtrSetImplBase *)(v1461 + 528), v1186);
              llvm::DivergenceTracker::propagateDivergence((char *)v1461, v1461);
              v6 = v1431;
            }
          }
        }
        v1191 = v1451 + 1;
        v152 = v1380;
        v17 = (_QWORD *)&unk_1C640E000;
        while (v1191 != v1440)
        {
          v1192 = *v1191++;
          v1182 = v1192;
          if (v1192 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v1451 = v1191 - 1;
            goto LABEL_1759;
          }
        }
      }
    }
LABEL_214:
    v5 = v1463;
    v153 = *(_QWORD *)(v152 + 40);
    if (*(_QWORD *)(v1463 + 4616))
    {
      v154 = v6[1];
      goto LABEL_227;
    }
    v4 = (unsigned int *)v1461;
LABEL_225:
    if (!v6[1])
      goto LABEL_508;
    v154 = 1;
LABEL_227:
    *(_QWORD *)&v1495 = &v1497;
    *((_QWORD *)&v1495 + 1) = &v1497;
    *(_QWORD *)&v1496 = v17[215];
    DWORD2(v1496) = 0;
    v1455 = (llvm::SmallPtrSetImplBase *)(v5 + 3888);
    if (v154)
    {
      v1466 = 0;
      v1467 = 0;
      v1468 = 0;
      v1471[0] = &v1472;
      v1471[1] = (void *)0xA00000000;
      v1492 = 0;
      v1491 = 0;
      LODWORD(v1493) = 0;
      sub_1C5EA6408(v153, (uint64_t)&v1466, (uint64_t)v1471, (uint64_t)&v1491);
      v1426 = v1467;
      v1480 = &v1482;
      v1481 = 0x1000000000;
      v1444 = *(_QWORD *)(v5 + 4576);
      v1434 = *(_QWORD *)(v5 + 4568);
      v160 = v1461;
      if (v1444 != v1434)
      {
        v1403 = v1463 + 4152;
        v1409 = v1463 + 3896;
        v1399 = v1463 + 4168;
        while (1)
        {
          v161 = *(_QWORD *)(v1444 - 8);
          v1444 -= 8;
          v162 = *(_QWORD *)(v161 + 48);
          if (v162 != v161 + 40)
            break;
LABEL_369:
          if (v1444 == v1434)
            goto LABEL_370;
        }
        v163 = (v161 >> 4) ^ (v161 >> 9);
        while (1)
        {
          if (v162)
            v164 = v162 - 24;
          else
            v164 = 0;
          v165 = *(unsigned __int8 *)(v164 + 16);
          if (v162 && v165 == 61)
          {
            v166 = **(_QWORD **)(v164 - 32);
            v167 = *(_DWORD *)(v166 + 8);
            if ((v167 & 0xFE) == 0x12)
            {
              v168 = *(_QWORD *)(v166 + 16);
              goto LABEL_239;
            }
            goto LABEL_240;
          }
          if (v165 == 84)
          {
            v188 = *(_QWORD *)(v164 - 32);
            if (!v188
              || *(_BYTE *)(v188 + 16)
              || *(_QWORD *)(v188 + 24) != *(_QWORD *)(v164 + 72)
              || (*(_BYTE *)(v188 + 33) & 0x20) == 0)
            {
              goto LABEL_348;
            }
            v189 = *(_DWORD *)(*(_QWORD *)(v162 - 56) + 36);
            v190 = 1;
            if (v189 - 2630 >= 0x20 && v189 != 2144)
            {
              if (v189 - 2838 > 2)
                goto LABEL_348;
              v190 = 0;
            }
            if (v189 - 2376 >= 0x20)
            {
              if (v189 == 2144)
              {
                v191 = 0;
              }
              else
              {
                if (v189 - 2784 < 3)
                  v190 = 1;
                v245 = 3;
                if (v189 - 2784 < 3)
                  v245 = 0;
                v38 = v189 >= 0xB16;
                v191 = 0xFFFFFFFFLL;
                if (v38)
                  v191 = 0;
                if ((v190 & 1) != 0)
                  v191 = v245;
              }
            }
            else
            {
              v191 = 2;
            }
            v168 = *(_QWORD *)(v162 - 24 - 32 * (*(_DWORD *)(v162 - 4) & 0x7FFFFFF) + 32 * v191);
LABEL_239:
            v167 = *(_DWORD *)(*(_QWORD *)v168 + 8);
LABEL_240:
            if ((v167 & 0xFFFFFF00) == 0x100)
            {
              v169 = sub_1C477672C(v1461 + 528, v164);
              v170 = *(_QWORD *)(v160 + 536);
              if (v170 == *(_QWORD *)(v160 + 528))
                v171 = (unsigned int *)(v160 + 548);
              else
                v171 = (unsigned int *)(v160 + 544);
              if (v169 != (_QWORD *)(v170 + 8 * *v171))
                break;
              v172 = *(uint64_t **)(v1463 + 4608);
              v173 = *((_DWORD *)v172 + 4);
              if (v173)
              {
                v174 = *v172;
                v175 = v173 - 1;
                v176 = (v173 - 1) & v163;
                v177 = *(_QWORD *)(v174 + 16 * v176);
                if (v161 == v177)
                {
LABEL_250:
                  if (*(_QWORD *)(v174 + 16 * v176 + 8) && (_DWORD)v1481)
                  {
                    v180 = v1480;
                    v181 = &v1480[v1481];
                    do
                    {
                      v182 = *v180;
                      if (sub_1C5645B98((uint64_t)v1455, *v180))
                      {
                        v183 = *(_QWORD **)(v1463 + 4152);
                        v184 = *(unsigned int *)(v1463 + 4160);
                        v185 = &v183[v184];
                        if ((_DWORD)v184)
                        {
                          v186 = 8 * v184;
                          while (*v183 != v182)
                          {
                            ++v183;
                            v186 -= 8;
                            if (!v186)
                            {
                              v183 = v185;
                              break;
                            }
                          }
                        }
                        if (v185 == v183 + 1)
                        {
                          v187 = v1463;
                        }
                        else
                        {
                          memmove(v183, v183 + 1, (char *)v185 - (char *)(v183 + 1));
                          v187 = v1463;
                          LODWORD(v184) = *(_DWORD *)(v1463 + 4160);
                        }
                        *(_DWORD *)(v187 + 4160) = v184 - 1;
                      }
                      ++v180;
                      v160 = v1461;
                    }
                    while (v180 != v181);
                  }
                }
                else
                {
                  v178 = 1;
                  while (v177 != -4096)
                  {
                    v179 = v176 + v178++;
                    v176 = v179 & v175;
                    v177 = *(_QWORD *)(v174 + 16 * v176);
                    if (v161 == v177)
                      goto LABEL_250;
                  }
                }
              }
            }
            goto LABEL_348;
          }
          if (v165 == 60)
            v192 = v164;
          else
            v192 = 0;
          if (!v162 || v165 != 60)
            goto LABEL_348;
          v193 = *(llvm **)(v192 - 32);
          v194 = *(_DWORD *)(*(_QWORD *)v193 + 8);
          if ((v194 & 0xFE) == 0x12)
            v194 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v193 + 16) + 8);
          if ((v194 & 0xFFFFFF00) != 0x100 || (*(_WORD *)(v192 + 18) & 1) != 0)
            goto LABEL_348;
          if (v1426)
          {
            if (*((_BYTE *)v193 + 16) != 3)
            {
              UnderlyingObject = llvm::getUnderlyingObject(v193, (const llvm::Value *)6);
              if (!UnderlyingObject)
                goto LABEL_348;
              if (*((_BYTE *)UnderlyingObject + 16) != 60)
                goto LABEL_348;
              v193 = llvm::getUnderlyingObject(*((llvm **)UnderlyingObject - 4), (const llvm::Value *)6);
              if (!v193 || *((_BYTE *)v193 + 16) != 3)
                goto LABEL_348;
            }
            if (v1468)
            {
              v196 = ((v193 >> 4) ^ (v193 >> 9)) & (v1468 - 1);
              v197 = (llvm *)*((_QWORD *)v1466 + 8 * (unint64_t)v196);
              if (v193 == v197)
                goto LABEL_348;
              v198 = 1;
              while (v197 != (llvm *)-4096)
              {
                v199 = v196 + v198++;
                v196 = v199 & (v1468 - 1);
                v197 = (llvm *)*((_QWORD *)v1466 + 8 * (unint64_t)v196);
                if (v193 == v197)
                  goto LABEL_348;
              }
            }
            v1470[0] = v192;
            if ((*(_BYTE *)v1455 & 1) != 0)
            {
              v223 = 32;
              v224 = v1409;
LABEL_323:
              v225 = v223 - 1;
              v226 = v225 & ((v192 >> 4) ^ (v192 >> 9));
              v227 = (_QWORD *)(v224 + 8 * v226);
              v228 = *v227;
              if (v192 != *v227)
              {
                v229 = 0;
                v230 = 1;
                while (v228 != -4096)
                {
                  if (v229)
                    v231 = 0;
                  else
                    v231 = v228 == -8192;
                  if (v231)
                    v229 = v227;
                  v232 = v226 + v230++;
                  v226 = v232 & v225;
                  v227 = (_QWORD *)(v224 + 8 * v226);
                  v228 = *v227;
                  if (v192 == *v227)
                    goto LABEL_339;
                }
                if (v229)
                  v233 = v229;
                else
                  v233 = v227;
                goto LABEL_336;
              }
            }
            else
            {
              v223 = *(_DWORD *)(v1463 + 3904);
              if (v223)
              {
                v224 = *(_QWORD *)(v1463 + 3896);
                goto LABEL_323;
              }
              v233 = 0;
LABEL_336:
              v234 = sub_1C5646E98((uint64_t)v1455, (uint64_t)v1470, v1470, v233);
              *v234 = v1470[0];
              v235 = v1470[0];
              v236 = *(unsigned int *)(v1463 + 4160);
              if (v236 >= *(unsigned int *)(v1463 + 4164))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v1403, v1399, v236 + 1, 8);
                v236 = *(unsigned int *)(v1463 + 4160);
              }
              v237 = v1463;
              *(_QWORD *)(*(_QWORD *)(v1463 + 4152) + 8 * v236) = v235;
              ++*(_DWORD *)(v237 + 4160);
            }
LABEL_339:
            v238 = *(uint64_t **)(v1463 + 4608);
            v239 = *((_DWORD *)v238 + 4);
            if (v239)
            {
              v217 = *v238;
              v240 = v239 - 1;
              v219 = (v239 - 1) & v163;
              v241 = *(_QWORD *)(v217 + 16 * v219);
              if (v161 != v241)
              {
                v242 = 1;
                while (v241 != -4096)
                {
                  v243 = v219 + v242++;
                  v219 = v243 & v240;
                  v241 = *(_QWORD *)(v217 + 16 * v219);
                  if (v161 == v241)
                    goto LABEL_344;
                }
                goto LABEL_348;
              }
              goto LABEL_344;
            }
            goto LABEL_348;
          }
          v1470[0] = v192;
          if ((*(_BYTE *)v1455 & 1) != 0)
          {
            v200 = 32;
            v201 = v1409;
          }
          else
          {
            v200 = *(_DWORD *)(v1463 + 3904);
            if (!v200)
            {
              v210 = 0;
              goto LABEL_311;
            }
            v201 = *(_QWORD *)(v1463 + 3896);
          }
          v202 = v200 - 1;
          v203 = v202 & ((v192 >> 4) ^ (v192 >> 9));
          v204 = (_QWORD *)(v201 + 8 * v203);
          v205 = *v204;
          if (v192 == *v204)
            goto LABEL_314;
          v206 = 0;
          v207 = 1;
          while (v205 != -4096)
          {
            if (v206)
              v208 = 0;
            else
              v208 = v205 == -8192;
            if (v208)
              v206 = v204;
            v209 = v203 + v207++;
            v203 = v209 & v202;
            v204 = (_QWORD *)(v201 + 8 * v203);
            v205 = *v204;
            if (v192 == *v204)
              goto LABEL_314;
          }
          if (v206)
            v210 = v206;
          else
            v210 = v204;
LABEL_311:
          v211 = sub_1C5646E98((uint64_t)v1455, (uint64_t)v1470, v1470, v210);
          *v211 = v1470[0];
          v212 = v1470[0];
          v213 = *(unsigned int *)(v1463 + 4160);
          if (v213 >= *(unsigned int *)(v1463 + 4164))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v1403, v1399, v213 + 1, 8);
            v213 = *(unsigned int *)(v1463 + 4160);
          }
          v214 = v1463;
          *(_QWORD *)(*(_QWORD *)(v1463 + 4152) + 8 * v213) = v212;
          ++*(_DWORD *)(v214 + 4160);
LABEL_314:
          v215 = *(uint64_t **)(v1463 + 4608);
          v216 = *((_DWORD *)v215 + 4);
          if (v216)
          {
            v217 = *v215;
            v218 = v216 - 1;
            v219 = (v216 - 1) & v163;
            v220 = *(_QWORD *)(v217 + 16 * v219);
            if (v161 != v220)
            {
              v221 = 1;
              while (v220 != -4096)
              {
                v222 = v219 + v221++;
                v219 = v222 & v218;
                v220 = *(_QWORD *)(v217 + 16 * v219);
                if (v161 == v220)
                  goto LABEL_344;
              }
              goto LABEL_348;
            }
LABEL_344:
            if (*(_QWORD *)(v217 + 16 * v219 + 8))
            {
              v244 = v1481;
              if (v1481 >= (unint64_t)HIDWORD(v1481))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1480, (uint64_t)&v1482, v1481 + 1, 8);
                v244 = v1481;
              }
              v1480[v244] = v192;
              LODWORD(v1481) = v1481 + 1;
            }
          }
LABEL_348:
          v162 = *(_QWORD *)(v162 + 8);
          if (v162 == v161 + 40)
            goto LABEL_369;
        }
      }
LABEL_370:
      if (v1480 != &v1482)
        free(v1480);
      MEMORY[0x1CAA32FB4](v1491, 4);
      v246 = (uint64_t *)v1471[0];
      v5 = v1463;
      v6 = v1431;
      if (LODWORD(v1471[1]))
      {
        v247 = 16 * LODWORD(v1471[1]);
        v248 = (char *)v1471[0] - 16;
        do
        {
          sub_1C4914448((void ***)&v248[v247]);
          v247 -= 16;
        }
        while (v247);
        v246 = (uint64_t *)v1471[0];
      }
      if (v246 != &v1472)
        free(v246);
      sub_1C495C918((uint64_t)&v1466);
      MEMORY[0x1CAA32FB4](v1466, 8);
    }
    v1471[0] = &v1472;
    v1471[1] = (void *)0x2000000000;
    v249 = *(_QWORD *)(v5 + 4576);
    v1435 = *(_QWORD *)(v5 + 4568);
    if (v249 == v1435)
      goto LABEL_503;
    v250 = 0;
    v251 = v1461;
    v252 = v1463;
    v1427 = (llvm::SmallPtrSetImplBase *)(v1463 + 3896);
    v1416 = v1461 + 16;
    v253 = (llvm::SmallPtrSetImplBase *)(v1461 + 528);
    do
    {
      v254 = *(_QWORD *)(v249 - 8);
      v1445 = v249 - 8;
      v255 = v254 + 40;
      for (ii = *(_QWORD *)(v254 + 48); ii != v255; ii = *(_QWORD *)(ii + 8))
      {
        if (ii)
          v257 = ii - 24;
        else
          v257 = 0;
        if (!v6[1])
          goto LABEL_440;
        v258 = *(unsigned __int8 *)(v257 + 16);
        if (v258 == 60)
          v259 = v257;
        else
          v259 = 0;
        v260 = v258 == 60 && ii != 0;
        if (!v260)
        {
          v265 = 1;
          v251 = v1461;
          goto LABEL_420;
        }
        v261 = **(_QWORD **)(v259 - 32);
        v262 = *(_DWORD *)(v261 + 8);
        if ((v262 & 0xFE) == 0x12)
          v262 = *(_DWORD *)(**(_QWORD **)(v261 + 16) + 8);
        if ((v262 & 0xFFFFFF00) != 0x100)
        {
          LOBYTE(v260) = 0;
          v265 = 1;
LABEL_414:
          v251 = v1461;
LABEL_415:
          if ((*(_WORD *)(v257 + 18) & 0x301) != 0)
            goto LABEL_430;
          goto LABEL_438;
        }
        v263 = (*(unsigned __int16 *)(v259 + 18) >> 7) & 7;
        v265 = v263 == 4 || v263 == 7;
        if ((*(_BYTE *)v1455 & 1) != 0)
        {
          v266 = 32;
          v267 = v1427;
          goto LABEL_409;
        }
        v266 = *(_DWORD *)(v1463 + 3904);
        if (v266)
        {
          v267 = *(llvm::SmallPtrSetImplBase **)(v1463 + 3896);
LABEL_409:
          v268 = v266 - 1;
          v269 = v268 & ((v259 >> 4) ^ (v259 >> 9));
          v270 = *((_QWORD *)v267 + v269);
          if (v259 == v270)
          {
LABEL_413:
            LOBYTE(v260) = 0;
            goto LABEL_414;
          }
          v271 = 1;
          while (v270 != -4096)
          {
            v272 = v269 + v271++;
            v269 = v272 & v268;
            v270 = *((_QWORD *)v267 + v269);
            if (v259 == v270)
              goto LABEL_413;
          }
        }
        v273 = *(unsigned int *)(v1461 + 8);
        if (v273 >= *(unsigned int *)(v1461 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v1461, v1416, v273 + 1, 8);
          v273 = *(unsigned int *)(v1461 + 8);
          v6 = v1431;
        }
        *(_QWORD *)(*(_QWORD *)v1461 + 8 * v273) = v259;
        ++*(_DWORD *)(v1461 + 8);
        v274 = v259;
        v251 = v1461;
        sub_1C4774094(v253, v274);
        llvm::DivergenceTracker::propagateDivergence((char *)v251, v251);
        v258 = *(unsigned __int8 *)(v257 + 16);
LABEL_420:
        v275 = (v258 - 33);
        if (v275 > 0x37)
          goto LABEL_438;
        if (((1 << v275) & 0x8000000000041) != 0)
        {
          v276 = *(_QWORD *)(v257 + 64);
          if (!v276 || (*(_BYTE *)(v276 + 17) & 0x30) == 0)
          {
            v277 = *(_DWORD *)(v257 + 20);
            if (v277 < 0)
            {
              v292 = v257 - 32 * (v277 & 0x7FFFFFF);
              v295 = *(_QWORD *)(v292 - 8);
              v293 = v292 - 8;
              v294 = v295;
              if (v295)
              {
                v296 = -v294;
                while (1)
                {
                  v297 = *(_DWORD *)(*(_QWORD *)(v293 + v296) + 8);
                  v1197 = v297 > 7;
                  v298 = (1 << v297) & 0x83;
                  if (v1197 || v298 == 0)
                    break;
                  v296 += 16;
                  v251 = v1461;
                  v6 = v1431;
                  if (!v296)
                    goto LABEL_428;
                }
                v251 = v1461;
                v6 = v1431;
LABEL_430:
                if (sub_1C5EA7E14(v257) && v265)
                {
                  v252 = v1463;
                  v278 = *(unsigned int *)(v1463 + 4160);
                  if ((_DWORD)v278)
                  {
                    v279 = *(uint64_t **)(v1463 + 4152);
                    v280 = 8 * v278;
                    do
                    {
                      v281 = *v279;
                      v282 = *(unsigned int *)(v251 + 8);
                      if (v282 >= *(unsigned int *)(v251 + 12))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod(v251, v1416, v282 + 1, 8);
                        v282 = *(unsigned int *)(v251 + 8);
                      }
                      *(_QWORD *)(*(_QWORD *)v251 + 8 * v282) = v281;
                      ++*(_DWORD *)(v251 + 8);
                      sub_1C4774094(v253, v281);
                      llvm::DivergenceTracker::propagateDivergence((char *)v251, v251);
                      ++v279;
                      v280 -= 8;
                    }
                    while (v280);
                  }
                  sub_1C56485E0(v1455);
                  *(_DWORD *)(v252 + 4160) = 0;
                  goto LABEL_456;
                }
                goto LABEL_438;
              }
            }
LABEL_428:
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v257, 45) & 1) == 0
              && (llvm::CallBase::hasFnAttrOnCalledFunction(v257, 44) & 1) == 0)
            {
              goto LABEL_430;
            }
          }
        }
        else
        {
          if (((1 << v275) & 0x808001D0000010) != 0)
            goto LABEL_430;
          if (v275 == 27)
            goto LABEL_415;
        }
LABEL_438:
        v252 = v1463;
        if (v260)
        {
          v250 = 1;
          continue;
        }
LABEL_440:
        v283 = *(_QWORD *)(v252 + 4616);
        if (!v283
          || *(_BYTE *)(v257 + 16) != 83
          && sub_1C563BD30(v257, v1441, *(int **)(v252 + 4592), v283, v6[9], 0))
        {
          continue;
        }
        v284 = sub_1C477672C((uint64_t)v253, v257);
        v285 = *(_QWORD *)(v251 + 536);
        v286 = (unsigned int *)(v285 == *(_QWORD *)(v251 + 528) ? v251 + 548 : v251 + 544);
        if (v284 != (_QWORD *)(v285 + 8 * *v286))
          continue;
        *(_QWORD *)&v1502 = &off_1E8171C80;
        *((_QWORD *)&v1502 + 1) = &v1495;
        v1504 = &v1502;
        v287 = sub_1C56456CC(v252, v257, v251, v1441, &v1502, 0);
        if (v1504 == &v1502)
        {
          v288 = (void (**)(void))(v1502 + 32);
          goto LABEL_451;
        }
        if (v1504)
        {
          v288 = (void (**)(void))(*(_QWORD *)v1504 + 40);
LABEL_451:
          (*v288)();
        }
        if (v287)
        {
          v289 = *(unsigned int *)(v1461 + 8);
          if (v289 >= *(unsigned int *)(v1461 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v1461, v1416, v289 + 1, 8);
            v289 = *(unsigned int *)(v1461 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v1461 + 8 * v289) = v287;
          ++*(_DWORD *)(v1461 + 8);
          v290 = v287;
          v251 = v1461;
          sub_1C4774094(v253, v290);
          llvm::DivergenceTracker::propagateDivergence((char *)v251, v251);
LABEL_456:
          v250 = 1;
          continue;
        }
        v291 = LODWORD(v1471[1]);
        if (LODWORD(v1471[1]) >= (unint64_t)HIDWORD(v1471[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1471, (uint64_t)&v1472, LODWORD(v1471[1]) + 1, 8);
          v291 = LODWORD(v1471[1]);
        }
        v251 = v1461;
        *((_QWORD *)v1471[0] + v291) = v257;
        ++LODWORD(v1471[1]);
      }
      v249 = v1445;
    }
    while (v1445 != v1435);
    if ((v250 & 1) == 0)
      goto LABEL_503;
    while (2)
    {
      if (*((_QWORD *)&v1495 + 1) == (_QWORD)v1495)
      {
LABEL_473:
        *(_QWORD *)((char *)&v1496 + 4) = 0;
      }
      else
      {
        if (v1496 < 0x21 || 4 * (DWORD1(v1496) - DWORD2(v1496)) >= v1496)
        {
          memset(*((void **)&v1495 + 1), 255, 8 * v1496);
          goto LABEL_473;
        }
        free(*((void **)&v1495 + 1));
        v311 = 1 << (33 - __clz(DWORD1(v1496) - DWORD2(v1496) - 1));
        v1197 = (DWORD1(v1496) - DWORD2(v1496)) > 0x10;
        DWORD2(v1496) = 0;
        if (v1197)
          v312 = v311;
        else
          v312 = 32;
        *(_QWORD *)&v1496 = v312;
        v313 = malloc_type_malloc(8 * v312, 0x4065EBACuLL);
        if (!v313)
          goto LABEL_2080;
        *((_QWORD *)&v1495 + 1) = v313;
        memset(v313, 255, 8 * v1496);
      }
      if (!LODWORD(v1471[1]))
        break;
      v300 = 0;
      v301 = (uint64_t *)v1471[0];
      v302 = 8 * LODWORD(v1471[1]);
      while (2)
      {
        v303 = *v301;
        v304 = sub_1C477672C((uint64_t)v253, *v301);
        v305 = *(_QWORD *)(v1461 + 536);
        if (v305 == *(_QWORD *)(v1461 + 528))
          v306 = (unsigned int *)(v1461 + 548);
        else
          v306 = (unsigned int *)(v1461 + 544);
        if (v304 == (_QWORD *)(v305 + 8 * *v306))
        {
          v1506 = &off_1E8171CC8;
          v1507 = (uint64_t)&v1495;
          v1509 = (uint64_t **)&v1506;
          v307 = sub_1C56456CC(v1463, v303, v1461, v1441, &v1506, 0);
          if (v1509 == (uint64_t **)&v1506)
          {
            v308 = (void (**)(void))(v1506 + 4);
            v6 = v1431;
LABEL_484:
            (*v308)();
          }
          else
          {
            v6 = v1431;
            if (v1509)
            {
              v308 = (void (**)(void))(*v1509 + 5);
              goto LABEL_484;
            }
          }
          if (v307)
          {
            v309 = *(unsigned int *)(v1461 + 8);
            if (v309 >= *(unsigned int *)(v1461 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v1461, v1416, v309 + 1, 8);
              v309 = *(unsigned int *)(v1461 + 8);
            }
            *(_QWORD *)(*(_QWORD *)v1461 + 8 * v309) = v307;
            ++*(_DWORD *)(v1461 + 8);
            sub_1C4774094(v253, v307);
            llvm::DivergenceTracker::propagateDivergence((char *)v1461, v1461);
            v300 = 1;
          }
        }
        ++v301;
        v302 -= 8;
        if (v302)
          continue;
        break;
      }
      if ((v300 & 1) != 0)
        continue;
      break;
    }
LABEL_503:
    if (v1471[0] != &v1472)
      free(v1471[0]);
    sub_1C56485E0(v1455);
    v5 = v1463;
    *(_DWORD *)(v1463 + 4160) = 0;
    if (*((_QWORD *)&v1495 + 1) != (_QWORD)v1495)
      free(*((void **)&v1495 + 1));
    v4 = (unsigned int *)v1461;
    v17 = &unk_1C640E000;
LABEL_508:
    v314 = *(_QWORD *)(v5 + 4576);
    v1381 = *(_QWORD *)(v5 + 4568);
    if (v314 == v1381)
    {
      v1480 = (uint64_t *)v1484;
      v1481 = (uint64_t)v1484;
      v1482 = v17[215];
      v1483 = 0;
    }
    else
    {
      v1428 = (llvm::SmallPtrSetImplBase *)(v5 + 3456);
      v1436 = (llvm::SmallPtrSetImplBase *)(v4 + 132);
      v1397 = (llvm::SmallPtrSetImplBase *)(v5 + 3296);
      do
      {
        v315 = *(_QWORD *)(v314 - 8);
        v1384 = *(uint64_t **)(*((_QWORD *)v4 + 160) + 40);
        v1391 = v314 - 8;
        *(_QWORD *)&v1495 = 1;
        for (jj = 8; jj != 136; jj += 16)
          *(_QWORD *)((char *)&v1495 + jj) = -4096;
        v317 = (_QWORD *)(v315 + 40);
        v318 = *(_QWORD **)(v315 + 48);
        v319 = v1436;
        if (v318 != (_QWORD *)(v315 + 40))
        {
          v1417 = (_QWORD *)(v315 + 40);
          do
          {
            v320 = (_QWORD *)v318[1];
            if (v318)
              v321 = (uint64_t)(v318 - 3);
            else
              v321 = 0;
            if ((*(_DWORD *)(*(_QWORD *)v321 + 8) & 0xFE) == 0x12)
              goto LABEL_700;
            v1446 = (_QWORD **)v318[1];
            v1456 = (unsigned __int8 *)v321;
            if (*(_BYTE *)(v321 + 16) == 49)
            {
              v322 = *(_DWORD *)(v321 + 20);
              if ((v322 & 0x40000000) != 0)
              {
                v327 = *(_QWORD *)(v321 - 8);
                if (*(_BYTE *)(*(_QWORD *)(v327 + 32) + 16) == 17)
                  goto LABEL_547;
                v325 = v6;
                v326 = *(unsigned __int8 **)v327;
                v1506 = 0;
                v324 = *(_QWORD *)(*(_QWORD *)(v321 - 8) + 32);
              }
              else
              {
                v323 = v321 - 32 * (v322 & 0x7FFFFFF);
                v324 = *(_QWORD *)(v323 + 32);
                if (*(_BYTE *)(v324 + 16) == 17)
                  goto LABEL_547;
                v325 = v6;
                v326 = *(unsigned __int8 **)v323;
              }
              v1506 = (uint64_t (**)())v324;
              v328 = sub_1C477672C((uint64_t)v1428, (uint64_t)v326);
              v329 = *(_QWORD *)(v1463 + 3464);
              v330 = 3472;
              if (v329 == *(_QWORD *)(v1463 + 3456))
                v330 = 3476;
              v331 = (_QWORD *)(v329 + 8 * *(unsigned int *)(v1463 + v330));
              v332 = sub_1C477672C((uint64_t)v319, (uint64_t)v326);
              v333 = *((_QWORD *)v4 + 67);
              v334 = (char *)(v4 + 137);
              v335 = (char *)(v4 + 136);
              if (v333 == *((_QWORD *)v4 + 66))
                v336 = v4 + 137;
              else
                v336 = v4 + 136;
              v337 = (_QWORD *)(v333 + 8 * *v336);
              v1400 = v328;
              v1404 = v337;
              v1420 = v331;
              v1410 = v332;
              v338 = v328 == v331 && v332 == v337;
              v6 = v325;
              if (!v338)
              {
                v339 = sub_1C477672C((uint64_t)v1428, (uint64_t)v1506);
                v340 = *(_QWORD *)(v1463 + 3464);
                v341 = 3472;
                if (v340 == *(_QWORD *)(v1463 + 3456))
                  v341 = 3476;
                v342 = (_QWORD *)(v340 + 8 * *(unsigned int *)(v1463 + v341));
                v6 = v1431;
                v343 = sub_1C477672C((uint64_t)v319, (uint64_t)v1506);
                v344 = *(_QWORD *)(v1461 + 536);
                v345 = v344 == *(_QWORD *)(v1461 + 528) ? v334 : v335;
                v346 = (_QWORD *)(v344 + 8 * *(unsigned int *)v345);
                v208 = v339 == v342;
                v320 = v1446;
                if (v208 && v343 == v346)
                {
                  v348 = v1456[17] >> 1;
                  if (v348 == 127)
                    LOBYTE(v348) = -1;
                  if ((v348 & 0x10) != 0)
                  {
                    v1377 = v348;
                    sub_1C4773D54((uint64_t)v1471, (uint64_t)v1456, 0, 0, 0);
                    v382 = sub_1C562EF94((uint64_t)&v1495, (uint64_t)v1506);
                    v383 = (char *)*((_QWORD *)&v1495 + 1);
                    if ((v1495 & 1) != 0)
                    {
                      v383 = (char *)&v1495 + 8;
                      v384 = 8;
                    }
                    else
                    {
                      v384 = v1496;
                    }
                    if (&v383[16 * v384] == (char *)v382)
                    {
                      v1480 = (uint64_t *)(*(_QWORD *)v1478 + 1672);
                      Declaration = llvm::Intrinsic::getDeclaration(v1384, 253, (uint64_t *)&v1480, 1);
                      v387 = v1400;
                      if (*(_BYTE *)(*(_QWORD *)v1456 + 8))
                      {
                        v386 = 1;
                      }
                      else
                      {
                        v440 = (uint64_t *)(*(_QWORD *)v1478 + 1672);
                        v1484[0] = 257;
                        v1506 = (uint64_t (**)())sub_1C47721A0((uint64_t)v1471, (uint64_t *)v1506, v440, (uint64_t)&v1480);
                        v320 = v1446;
                        if (*((unsigned __int8 *)v1506 + 16) <= 0x1Bu)
                          v386 = 1;
                        else
                          v386 = 2;
                      }
                      if (Declaration)
                        v441 = *(uint64_t ***)(Declaration + 24);
                      else
                        v441 = 0;
                      v1484[0] = 257;
                      v442 = (unsigned __int8 *)sub_1C4774778((uint64_t *)v1471, v441, Declaration, (uint64_t *)&v1506, 1, (uint64_t)&v1480, 0);
                      v385 = (uint64_t)v442;
                      v442[17] |= 2 * v1377;
                      if (v442[16] > 0x1Bu)
                        ++v386;
                      v1480 = (uint64_t *)v1506;
                      v1481 = (uint64_t)v442;
                      *(_QWORD *)&v1502 = 0;
                      if ((sub_1C562F010((uint64_t)&v1495, &v1480, &v1502) & 1) == 0)
                      {
                        v443 = sub_1C562F0B8(&v1495, (uint64_t)&v1480, &v1480, (_QWORD *)v1502);
                        *v443 = v1480;
                        v443[1] = v1481;
                      }
                    }
                    else
                    {
                      v385 = *(_QWORD *)(v382 + 8);
                      v386 = 1;
                      v387 = v1400;
                    }
                    if (!*(_BYTE *)(*(_QWORD *)v1456 + 8))
                    {
                      v444 = (uint64_t *)(*(_QWORD *)v1478 + 1672);
                      v1484[0] = 257;
                      v326 = sub_1C47721A0((uint64_t)v1471, (uint64_t *)v326, v444, (uint64_t)&v1480);
                      if (v1410 != v1404)
                        sub_1C4774094(v319, (uint64_t)v326);
                      if (v387 != v1420)
                      {
                        sub_1C4774094(v1428, (uint64_t)v326);
                        sub_1C4774094(v1397, (uint64_t)v326);
                      }
                      if (v326[16] > 0x1Bu)
                        ++v386;
                    }
                    v1484[0] = 257;
                    v445 = sub_1C4772428((uint64_t)v1471, (uint64_t *)v326, v385, (uint64_t)&v1480, 0);
                    if (v1410 != v1404)
                      sub_1C4774094(v319, v445);
                    v4 = (unsigned int *)v1461;
                    if (v387 != v1420)
                    {
                      sub_1C4774094(v1428, v445);
                      sub_1C4774094(v1397, v445);
                    }
                    *(_BYTE *)(v445 + 17) |= 2 * v1377;
                    if (!*(_BYTE *)(*(_QWORD *)v1456 + 8))
                    {
                      v446 = (uint64_t *)(*(_QWORD *)v1478 + 1624);
                      v1484[0] = 257;
                      v445 = (uint64_t)sub_1C4773A70((uint64_t)v1471, (uint64_t *)v445, v446, (uint64_t)&v1480);
                      sub_1C4774094(v319, v445);
                      if (v387 != v1420)
                      {
                        sub_1C4774094(v1428, v445);
                        sub_1C4774094(v1397, v445);
                      }
                      if (*(unsigned __int8 *)(v445 + 16) > 0x1Bu)
                        ++v386;
                    }
                    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v1456, (llvm::Value *)v445, (llvm::Value *)1);
                    sub_1C5646024(v1463, (uint64_t)v1456, v1461);
                    if (v1471[0] != &v1472)
                      free(v1471[0]);
                    v447 = v386;
                    do
                    {
                      v320 = (_QWORD *)*v320;
                      --v447;
                    }
                    while (v447);
                    goto LABEL_700;
                  }
                }
              }
              v321 = (uint64_t)v1456;
            }
LABEL_547:
            LOBYTE(v1502) = 0;
            if (!sub_1C56461FC(v321, &v1502))
              goto LABEL_627;
            v349 = sub_1C477672C((uint64_t)v319, (uint64_t)v1456);
            v350 = *(_QWORD *)(v1461 + 536);
            v351 = (unsigned int *)(v350 == *(_QWORD *)(v1461 + 528) ? v1461 + 548 : v1461 + 544);
            if (v349 == (_QWORD *)(v350 + 8 * *v351))
              goto LABEL_627;
            v352 = *((_DWORD *)v1456 + 5);
            v353 = (v352 & 0x40000000) != 0
                 ? (uint64_t *)*((_QWORD *)v1456 - 1)
                 : (uint64_t *)&v1456[-32 * (v352 & 0x7FFFFFF)];
            v354 = *v353;
            v355 = v353[4];
            v356 = sub_1C477672C((uint64_t)v319, *v353);
            v357 = *(_QWORD *)(v1461 + 536);
            v358 = (unsigned int *)(v357 == *(_QWORD *)(v1461 + 528) ? v1461 + 548 : v1461 + 544);
            v1421 = v356 != (_QWORD *)(v357 + 8 * *v358);
            v359 = sub_1C477672C((uint64_t)v319, v355);
            v360 = *(_QWORD *)(v1461 + 536);
            v361 = (unsigned int *)(v360 == *(_QWORD *)(v1461 + 528) ? v1461 + 548 : v1461 + 544);
            v362 = v359 != (_QWORD *)(v360 + 8 * *v361);
            v363 = sub_1C477672C((uint64_t)v1428, v354);
            v364 = *(_QWORD *)(v1463 + 3464);
            v365 = v364 == *(_QWORD *)(v1463 + 3456) ? 3476 : 3472;
            v366 = (_QWORD *)(v364 + 8 * *(unsigned int *)(v1463 + v365));
            v319 = v1436;
            v367 = sub_1C477672C((uint64_t)v1428, v355);
            v368 = *(_QWORD *)(v1463 + 3464);
            v369 = v368 == *(_QWORD *)(v1463 + 3456) ? 3476 : 3472;
            v370 = (_QWORD *)(v368 + 8 * *(unsigned int *)(v1463 + v369));
            v371 = v363 != v366 || v1421;
            v372 = v367 != v370;
            v373 = v367 != v370 || v362;
            v6 = v1431;
            v317 = v1417;
            if (v371 == v373)
              goto LABEL_627;
            v374 = v1502;
            if (v373)
              v375 = 0;
            else
              v375 = v1502;
            if (v373)
            {
              v376 = v372;
            }
            else
            {
              v374 = 0;
              v376 = v363 != v366;
            }
            if (v373)
            {
              v377 = (_QWORD *)v354;
            }
            else
            {
              v362 = v1421;
              v377 = (_QWORD *)v355;
            }
            if (v373)
              v354 = v355;
            if (!v354)
              goto LABEL_627;
            v378 = *(unsigned __int8 *)(v354 + 16);
            if (v378 < 0x1C)
              goto LABEL_627;
            if (v378 - 59 < 0xFFFFFFEE)
              goto LABEL_627;
            if (*(_QWORD *)(v354 + 40) != *((_QWORD *)v1456 + 5))
              goto LABEL_627;
            v1422 = v374;
            v1411 = v375;
            if (!sub_1C56461FC(v354, &v1502))
              goto LABEL_627;
            v379 = v1502;
            v380 = *(unsigned __int8 *)(v354 + 16);
            if ((_BYTE)v1502 || v380 != v1456[16])
            {
              if ((v380 - 41) > 3 || v1456[16] - 41 > 3)
                goto LABEL_627;
              v1366 = v362;
              v1368 = v376;
              v389 = *(_BYTE *)(*(_QWORD *)v1456 + 8) == 13 ? 13 : 14;
              v1363 = v389;
              v381 = *(_BYTE *)(*(_QWORD *)v1456 + 8) == 13 ? 15 : 16;
            }
            else
            {
              v1366 = v362;
              v1368 = v376;
              v381 = v380 - 28;
              v1363 = v381;
            }
            LODWORD(v1371) = v381;
            v390 = *(_QWORD *)(v354 - 64);
            v391 = *(_QWORD *)(v354 - 32);
            v392 = sub_1C477672C((uint64_t)v1436, v390);
            v393 = *(_QWORD *)(v1461 + 536);
            if (v393 == *(_QWORD *)(v1461 + 528))
              v394 = (unsigned int *)(v1461 + 548);
            else
              v394 = (unsigned int *)(v1461 + 544);
            v1405 = v392 != (_QWORD *)(v393 + 8 * *v394);
            v395 = sub_1C477672C((uint64_t)v1436, v391);
            v396 = *(_QWORD *)(v1461 + 536);
            if (v396 == *(_QWORD *)(v1461 + 528))
              v397 = (unsigned int *)(v1461 + 548);
            else
              v397 = (unsigned int *)(v1461 + 544);
            v1378 = v395 != (_QWORD *)(v396 + 8 * *v397);
            v1364 = v390;
            v398 = sub_1C477672C((uint64_t)v1428, v390);
            v399 = *(_QWORD *)(v1463 + 3464);
            v400 = 3472;
            if (v399 == *(_QWORD *)(v1463 + 3456))
              v400 = 3476;
            v401 = (_QWORD *)(v399 + 8 * *(unsigned int *)(v1463 + v400));
            v1401 = (_QWORD *)v391;
            v402 = sub_1C477672C((uint64_t)v1428, v391);
            v403 = *(_QWORD *)(v1463 + 3464);
            v404 = 3472;
            if (v403 == *(_QWORD *)(v1463 + 3456))
              v404 = 3476;
            v405 = v1422 != v379;
            v406 = (_QWORD *)(v403 + 8 * *(unsigned int *)(v1463 + v404));
            v407 = v398 != v401 || v1405;
            v208 = v402 == v406;
            v408 = v402 != v406;
            v409 = !v208 || v1378;
            v6 = v1431;
            v317 = v1417;
            if (v407 == v409)
            {
LABEL_627:
              v411 = (uint64_t)v1456;
              v4 = (unsigned int *)v1461;
              v320 = v1446;
LABEL_628:
              if (*(_DWORD *)(*(_QWORD *)v411 + 8) == 269 && *(_BYTE *)(v411 + 16) != 83)
              {
                v412 = sub_1C477672C((uint64_t)v319, v411);
                v413 = *((_QWORD *)v4 + 67);
                v414 = v413 == *((_QWORD *)v4 + 66) ? v4 + 137 : v4 + 136;
                if (v412 == (_QWORD *)(v413 + 8 * *v414))
                {
                  v415 = sub_1C477672C((uint64_t)v1397, v411);
                  v416 = *(_QWORD *)(v1463 + 3304);
                  v417 = 3312;
                  if (v416 == *(_QWORD *)(v1463 + 3296))
                    v417 = 3316;
                  if (v415 == (_QWORD *)(v416 + 8 * *(unsigned int *)(v1463 + v417)))
                  {
                    if (*(unsigned __int8 *)(v411 + 16) - 83 < 0xFFFFFFFE
                      || ((v424 = *(_QWORD *)(v411 - 64), *(_DWORD *)(*(_QWORD *)v424 + 8) != 269)
                        ? (v425 = *(_DWORD *)(*(_QWORD *)v424 + 8) == 0)
                        : (v425 = 1),
                          !v425
                       && ((v426 = *(_QWORD *)(v411 - 32), *(unsigned __int8 *)(v424 + 16) < 0x15u)
                        || (v448 = *(_QWORD *)(v424 + 8)) != 0 && !*(_QWORD *)(v448 + 8))
                       && (*(unsigned __int8 *)(v426 + 16) < 0x15u
                        || (v427 = *(_QWORD *)(v426 + 8)) != 0 && !*(_QWORD *)(v427 + 8))))
                    {
                      v419 = (uint64_t *)(v411 + 8);
                      v418 = *(_QWORD *)(v411 + 8);
                      if (v418)
                      {
                        while (1)
                        {
                          v420 = *(_QWORD *)(v418 + 24);
                          v421 = sub_1C477672C((uint64_t)v319, v420);
                          v422 = *((_QWORD *)v4 + 67);
                          v423 = v422 == *((_QWORD *)v4 + 66) ? v4 + 137 : v4 + 136;
                          if (v421 != (_QWORD *)(v422 + 8 * *v423) || *(_BYTE *)(v420 + 16) == 30)
                            break;
                          v418 = *(_QWORD *)(v418 + 8);
                          if (!v418)
                          {
                            v320 = v1446;
                            goto LABEL_700;
                          }
                        }
                        *v6 = 1;
                        if (v1446)
                          v428 = (uint64_t)(v1446 - 3);
                        else
                          v428 = 0;
                        sub_1C4773D54((uint64_t)v1471, v428, 0, 0, 0);
                        v429 = (llvm::ConstantFP **)(***(_QWORD ***)v411 + 1624);
                        v431 = (uint64_t *)llvm::ConstantFP::get(v429, v430, 0.0);
                        v433 = llvm::ConstantFP::get(v429, v432, 1.0);
                        v1484[0] = 257;
                        Select = llvm::IRBuilderBase::CreateSelect((uint64_t *)v1471, v411, v431, (uint64_t)v433, (uint64_t)&v1480, 0);
                        v1484[0] = 257;
                        FCmpHelper = (llvm::Value *)llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)v1471, 1, (uint64_t *)Select, (uint64_t)v431, (uint64_t)&v1480, 0, 0);
                        llvm::Instruction::copyIRFlags((uint64_t)FCmpHelper, v411, 1);
                        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v411, FCmpHelper, (llvm::Value *)1);
                        v436 = *((_DWORD *)Select + 5);
                        if ((v436 & 0x40000000) != 0)
                          v437 = (char *)*((_QWORD *)Select - 1);
                        else
                          v437 = (char *)Select - 32 * (v436 & 0x7FFFFFF);
                        v317 = v1417;
                        if (*(_QWORD *)v437)
                        {
                          **((_QWORD **)v437 + 2) = *((_QWORD *)v437 + 1);
                          v438 = *((_QWORD *)v437 + 1);
                          if (v438)
                            *(_QWORD *)(v438 + 16) = *((_QWORD *)v437 + 2);
                        }
                        *(_QWORD *)v437 = v411;
                        if (v318)
                        {
                          v439 = *v419;
                          *((_QWORD *)v437 + 1) = *v419;
                          if (v439)
                            *(_QWORD *)(v439 + 16) = v437 + 8;
                          *((_QWORD *)v437 + 2) = v419;
                          *v419 = (uint64_t)v437;
                        }
                        if (v1471[0] != &v1472)
                          free(v1471[0]);
                        v320 = (_QWORD *)**v1446;
                      }
                    }
                  }
                }
              }
              goto LABEL_700;
            }
            *v1431 = 1;
            if (v409)
            {
              v1362 = v1401;
              v1401 = (_QWORD *)v1364;
              v1405 = v1378;
              v1379 = v408;
              v410 = v1422;
              v1422 = v405;
            }
            else
            {
              v1379 = v398 != v401;
              v1362 = (_QWORD *)v1364;
              v410 = v1422 != v379;
            }
            v411 = (uint64_t)v1456;
            v4 = (unsigned int *)v1461;
            sub_1C4773D54((uint64_t)v1471, (uint64_t)v1456, 0, 0, 0);
            v1365 = v410;
            if (v1411 == v410)
            {
              v1484[0] = 257;
              v449 = v1363;
            }
            else
            {
              if (v1411)
              {
                v1484[0] = 257;
                v449 = v1371;
                v450 = v1401;
                v451 = (uint64_t)v377;
                goto LABEL_712;
              }
              v1484[0] = 257;
              v449 = v1371;
            }
            v450 = v377;
            v451 = (uint64_t)v1401;
LABEL_712:
            v452 = sub_1C4773860((uint64_t)v1471, v449, v450, v451, (uint64_t)&v1480, 0);
            v453 = (uint64_t)v452;
            v454 = v452[16];
            if (v452 && v454 >= 0x1C && v454 - 59 >= 0xFFFFFFEE)
            {
              llvm::Instruction::copyIRFlags((uint64_t)v452, (uint64_t)v1456, 1);
              llvm::Instruction::andIRFlags(v453, v354);
            }
            if (v1411 && v1365)
            {
              v1484[0] = 257;
              v455 = v1371;
              v456 = v1362;
              v457 = v453;
            }
            else
            {
              v1484[0] = 257;
              if (v1422)
                v455 = v1371;
              else
                v455 = v1363;
              v456 = (_QWORD *)v453;
              v457 = (uint64_t)v1362;
            }
            v458 = sub_1C4773860((uint64_t)v1471, v455, v456, v457, (uint64_t)&v1480, 0);
            v459 = (llvm::Value *)v458;
            v460 = v458[16];
            if (v454 <= 0x1B)
              v461 = 1;
            else
              v461 = 2;
            if (v460 >= 0x1C)
              v462 = v461;
            else
              v462 = v454 > 0x1B;
            if (v458 && v460 >= 0x1C && v460 - 59 >= 0xFFFFFFEE)
            {
              llvm::Instruction::copyIRFlags((uint64_t)v458, (uint64_t)v1456, 1);
              llvm::Instruction::andIRFlags((uint64_t)v459, v354);
            }
            if (v1366 || v1405)
              sub_1C4774094(v1436, (uint64_t)v459);
            if (v1368 || v1379)
            {
              sub_1C4774094(v1397, (uint64_t)v459);
              sub_1C4774094(v1428, (uint64_t)v459);
            }
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v1456, v459, (llvm::Value *)1);
            sub_1C5646024(v1463, (uint64_t)v1456, v1461);
            if (!*(_QWORD *)(v354 + 8))
              sub_1C5646024(v1463, v354, v1461);
            if (v1471[0] != &v1472)
              free(v1471[0]);
            v320 = v1446;
            if (!(_DWORD)v462)
              goto LABEL_628;
            do
            {
              v320 = (_QWORD *)*v320;
              --v462;
            }
            while (v462);
LABEL_700:
            v318 = v320;
          }
          while (v320 != v317);
        }
        if ((v1495 & 1) == 0)
          MEMORY[0x1CAA32FB4](*((_QWORD *)&v1495 + 1), 8);
        v314 = v1391;
        v5 = v1463;
      }
      while (v1391 != v1381);
      v463 = *(_QWORD *)(v1463 + 4576);
      v464 = *(_QWORD *)(v1463 + 4568);
      v1480 = (uint64_t *)v1484;
      v1481 = (uint64_t)v1484;
      v1482 = 16;
      v1483 = 0;
      if (v463 != v464)
      {
        v465 = &v1472;
        v466 = (uint64_t *)&v1496;
        v1447 = v1463 + 2168;
        v1406 = v1463 + 2192;
        while (1)
        {
          v468 = *(_QWORD *)(v463 - 8);
          v463 -= 8;
          v467 = v468;
          v469 = *(uint64_t **)(v5 + 4608);
          v470 = *((_DWORD *)v469 + 4);
          if (!v470)
            goto LABEL_756;
          v471 = *v469;
          v472 = v470 - 1;
          v473 = ((v467 >> 4) ^ (v467 >> 9)) & (v470 - 1);
          v474 = *(_QWORD *)(v471 + 16 * v473);
          if (v467 != v474)
            break;
LABEL_755:
          v1457 = *(llvm::SmallPtrSetImplBase **)(v471 + 16 * v473 + 8);
LABEL_757:
          v477 = v467 + 40;
          for (kk = *(_QWORD *)(v467 + 48); kk != v477; kk = *(_QWORD *)(kk + 8))
          {
            v479 = kk ? kk - 24 : 0;
            v1465 = v479;
            if (*(unsigned __int8 *)(v479 + 16) - 29 < 0xB)
              break;
            v480 = sub_1C477672C((uint64_t)v1436, v479);
            v481 = *((_QWORD *)v4 + 67);
            if (v481 == *((_QWORD *)v4 + 66))
              v482 = v4 + 137;
            else
              v482 = v4 + 136;
            if (v480 != (_QWORD *)(v481 + 8 * *v482))
            {
              if (!v6[5])
                goto LABEL_776;
              v483 = v1465;
              if (*(_BYTE *)(v1465 + 16) != 84
                || (v484 = *(_QWORD *)(v1465 - 32)) == 0
                || *(_BYTE *)(v484 + 16)
                || *(_QWORD *)(v484 + 24) != *(_QWORD *)(v1465 + 72)
                || (*(_BYTE *)(v484 + 33) & 0x20) == 0
                || (v485 = *(_DWORD *)(v484 + 36), !sub_1C47860D0(v485)) && (v485 - 1682) > 0x8B)
              {
LABEL_775:
                v4 = (unsigned int *)v1461;
                goto LABEL_776;
              }
              llvm::SampleInfo::SampleInfo((uint64_t)v1471, v485, 1);
              v511 = *(_DWORD *)(v483 + 20);
              v512 = *(_QWORD *)(v483 - 32 * (v511 & 0x7FFFFFF) + 32 * v1475);
              v513 = *(unsigned __int8 *)(v512 + 16);
              if (v512)
                v514 = v513 == 5;
              else
                v514 = 0;
              if (v514)
              {
                if (*(_WORD *)(v512 + 18) != 48
                  || llvm::Constant::isAllOnesValue(*(llvm::Constant **)(v512
                                                                       - 32 * (*(_DWORD *)(v512 + 20) & 0x7FFFFFF))))
                {
                  goto LABEL_775;
                }
                v511 = *(_DWORD *)(v483 + 20);
              }
              else if (v513 != 76)
              {
                goto LABEL_775;
              }
              v1418 = v464;
              v1423 = v465;
              v1412 = v466;
              if ((v511 & 0x40000000) != 0)
              {
                v515 = *(_QWORD *)(v483 - 8);
                if (!v515)
                  goto LABEL_837;
              }
              else
              {
                v515 = v483 - 32 * (v511 & 0x7FFFFFF);
                if (!v515)
                  goto LABEL_837;
              }
              v516 = v1474;
              v517 = v1475;
              v518 = (uint64_t *)(v515 + 32 * v1475);
              v519 = sub_1C477672C((uint64_t)v1436, *v518);
              v520 = *(_QWORD *)(v1461 + 536);
              if (v520 == *(_QWORD *)(v1461 + 528))
                v521 = (unsigned int *)(v1461 + 548);
              else
                v521 = (unsigned int *)(v1461 + 544);
              if (v519 != (_QWORD *)(v520 + 8 * *v521))
                goto LABEL_837;
              v1385 = v516;
              v1392 = v515;
              v1382 = v517;
              v522 = sub_1C477672C((uint64_t)v1428, *v518);
              v523 = *(_QWORD *)(v1463 + 3464);
              v524 = 3472;
              if (v523 == *(_QWORD *)(v1463 + 3456))
                v524 = 3476;
              if (v522 != (_QWORD *)(v523 + 8 * *(unsigned int *)(v1463 + v524)))
              {
LABEL_837:
                v4 = (unsigned int *)v1461;
                v464 = v1418;
                v465 = v1423;
                v466 = v1412;
                goto LABEL_776;
              }
              v525 = (uint64_t **)(v515 + 32 * v516);
              v526 = v518;
              v1375 = v463;
              *(_QWORD *)&v1376 = v525;
              *((_QWORD *)&v1376 + 1) = v518;
              if (!v6[4])
              {
LABEL_839:
                v527 = *v525;
                v528 = **v525;
                if (!v528 || *(_BYTE *)(v528 + 8) != 15 || *(_QWORD *)(v528 + 24))
                {
                  v529 = *((_DWORD *)v527 + 5);
                  if ((v529 & 0x40000000) != 0)
                    v530 = (uint64_t **)*(v527 - 1);
                  else
                    v530 = (uint64_t **)&v527[-4 * (v529 & 0x7FFFFFF)];
                  v531 = (unsigned __int8 *)*v526;
                  v532 = *(_DWORD *)(*v526 + 20);
                  if ((v532 & 0x40000000) != 0)
                    v533 = (uint64_t **)*((_QWORD *)v531 - 1);
                  else
                    v533 = (uint64_t **)&v531[-32 * (v532 & 0x7FFFFFF)];
                  v534 = **v530;
                  v1393 = **v533;
                  sub_1C4773D54((uint64_t)v1471, v483, 0, 0, 0);
                  LOWORD(v1497) = 257;
                  v535 = sub_1C4773E38((uint64_t *)v1471, 49, (unsigned __int8 *)v527, v534, (uint64_t)&v1495);
                  LOWORD(v1497) = 257;
                  v1394 = sub_1C4773E38((uint64_t *)v1471, 47, v531, v1393, (uint64_t)&v1495);
                  v536 = **(_QWORD **)(*(_QWORD *)v535 + 16);
                  v1505 = 257;
                  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v1476 + 56) + 40) + 272, v536);
                  v1386 = v537;
                  v538 = (char *)operator new(0x60uLL);
                  v539 = v538;
                  *((_QWORD *)v538 + 1) = 0;
                  v540 = (unsigned __int8 *)(v538 + 32);
                  *((_QWORD *)v538 + 2) = 0;
                  *((_QWORD *)v538 + 3) = v538 + 32;
                  LOWORD(v1497) = 257;
                  *((_QWORD *)v538 + 4) = v536;
                  *((_QWORD *)v538 + 5) = 0;
                  *((_WORD *)v538 + 24) = 60;
                  *((_DWORD *)v538 + 13) = 1;
                  *(_OWORD *)(v538 + 56) = 0u;
                  *(_OWORD *)(v538 + 72) = 0u;
                  *((_DWORD *)v538 + 22) = 0;
                  *(_QWORD *)v538 = v535;
                  v543 = *((_QWORD *)v535 + 1);
                  v542 = v535 + 8;
                  v541 = v543;
                  *((_QWORD *)v538 + 1) = v543;
                  if (v543)
                    *(_QWORD *)(v541 + 16) = v538 + 8;
                  *((_QWORD *)v538 + 2) = v542;
                  *v542 = v538;
                  *((_WORD *)v538 + 25) = 2 * (v1386 & 0x3F);
                  v538[92] = 1;
                  llvm::Value::setName((uint64_t ***)v538 + 4, (uint64_t)&v1495);
                  (*(void (**)(uint64_t, unsigned __int8 *, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v1479 + 16))(v1479, v540, &v1502, v1476, v1477);
                  if (!LODWORD(v1471[1]))
                  {
LABEL_851:
                    v544 = *(_QWORD *)v540;
                    v545 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v1478 + 1912), (llvm::Type *)(*(_DWORD *)(*(_QWORD *)v540 + 8) >> 8));
                    LOWORD(v1497) = 257;
                    v546 = (uint64_t *)sub_1C4773E38((uint64_t *)v1471, 49, v540, v545, (uint64_t)&v1495);
                    v547 = *v546;
                    if ((*(_DWORD *)(*v546 + 8) & 0xFE) == 0x12)
                      v547 = **(_QWORD **)(v547 + 16);
                    v464 = v1418;
                    v465 = v1423;
                    v466 = v1412;
                    v548 = **(llvm::GetElementPtrInst ***)(v547 + 16);
                    LOWORD(v1497) = 257;
                    v549 = (unsigned __int8 *)sub_1C5098FF4((uint64_t *)v1471, v548, v546, (uint64_t)v1394, (uint64_t)&v1495);
                    LOWORD(v1497) = 257;
                    v550 = sub_1C4773E38((uint64_t *)v1471, 49, v549, v544, (uint64_t)&v1495);
                    if (v1471[0] != v1423)
                      free(v1471[0]);
                    goto LABEL_855;
                  }
                  v587 = (char *)v1471[0];
                  v588 = (char *)v1471[0] + 16 * LODWORD(v1471[1]);
                  v589 = (unsigned __int8 **)(v539 + 80);
                  while (2)
                  {
                    v590 = *(_DWORD *)v587;
                    v591 = (unsigned __int8 *)*((_QWORD *)v587 + 1);
                    if (v591)
                    {
                      if (v590)
                        goto LABEL_899;
                      v1388 = v540;
                      v1506 = (uint64_t (**)())*((_QWORD *)v587 + 1);
                      llvm::MetadataTracking::track((uint64_t)&v1506, v591, 2);
                      v592 = *v589;
LABEL_903:
                      if (v592)
                        llvm::MetadataTracking::untrack((uint64_t)(v539 + 80), v592);
                      v593 = (unsigned __int8 *)v1506;
                      *v589 = (unsigned __int8 *)v1506;
                      if (v593)
                        llvm::MetadataTracking::retrack((uint64_t)&v1506, v593, (uint64_t)(v539 + 80));
                      v6 = v1431;
                      v540 = v1388;
                    }
                    else
                    {
                      v592 = *v589;
                      if (*v589 || (v539[55] & 0x20) != 0)
                      {
                        if (!v590)
                        {
                          v1388 = v540;
                          v1506 = 0;
                          goto LABEL_903;
                        }
LABEL_899:
                        llvm::Value::setMetadata((llvm::Value *)v540, *(_DWORD *)v587, (llvm::MDNode *)v591);
                      }
                    }
                    v587 += 16;
                    if (v587 == v588)
                      goto LABEL_851;
                    continue;
                  }
                }
                v573 = (unsigned __int8 *)*v526;
                v574 = *(_DWORD *)(*v526 + 20);
                if ((v574 & 0x40000000) != 0)
                  v575 = (uint64_t **)*((_QWORD *)v573 - 1);
                else
                  v575 = (uint64_t **)&v573[-32 * (v574 & 0x7FFFFFF)];
                v576 = **v575;
                sub_1C4773D54((uint64_t)v1471, v483, 0, 0, 0);
                LOWORD(v1497) = 257;
                v1395 = sub_1C4773E38((uint64_t *)v1471, 47, v573, v576, (uint64_t)&v1495);
                v577 = v527[3];
                v1505 = 257;
                llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v1476 + 56) + 40) + 272, v577);
                v1387 = v578;
                v579 = (char *)operator new(0x60uLL);
                v580 = v527;
                v581 = v579;
                *((_QWORD *)v579 + 1) = 0;
                v582 = (uint64_t *)(v579 + 32);
                *((_QWORD *)v579 + 2) = 0;
                *((_QWORD *)v579 + 3) = v579 + 32;
                LOWORD(v1497) = 257;
                *((_QWORD *)v579 + 4) = v577;
                *((_QWORD *)v579 + 5) = 0;
                *((_WORD *)v579 + 24) = 60;
                *((_DWORD *)v579 + 13) = 1;
                *(_OWORD *)(v579 + 56) = 0u;
                *(_OWORD *)(v579 + 72) = 0u;
                *((_DWORD *)v579 + 22) = 0;
                *(_QWORD *)v579 = v580;
                v585 = v580[1];
                v584 = v580 + 1;
                v583 = v585;
                *((_QWORD *)v579 + 1) = v585;
                if (v585)
                  *(_QWORD *)(v583 + 16) = v579 + 8;
                *((_QWORD *)v579 + 2) = v584;
                *v584 = v579;
                *((_WORD *)v579 + 25) = 2 * (v1387 & 0x3F);
                v579[92] = 1;
                llvm::Value::setName((uint64_t ***)v579 + 4, (uint64_t)&v1495);
                (*(void (**)(uint64_t, uint64_t *, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v1479 + 16))(v1479, v582, &v1502, v1476, v1477);
                if (!LODWORD(v1471[1]))
                {
LABEL_889:
                  v586 = (llvm::GetElementPtrInst *)(*(_QWORD *)v1478 + 1912);
                  LOWORD(v1497) = 257;
                  v550 = sub_1C5098FF4((uint64_t *)v1471, v586, v582, (uint64_t)v1395, (uint64_t)&v1495);
                  v465 = v1423;
                  if (v1471[0] != v1423)
                    free(v1471[0]);
                  v466 = v1412;
                  v464 = v1418;
LABEL_855:
                  *v6 = 1;
                  v1495 = v1376;
                  *(_QWORD *)&v1496 = v550;
                  *(_OWORD *)v1471 = v1376;
                  v1472 = (uint64_t)v550;
                  v1466 = 0;
                  if ((sub_1C4DCDF60(*(_QWORD *)(v1463 + 2144), *(_DWORD *)(v1463 + 2160), v483, &v1466) & 1) == 0)
                  {
                    v551 = v1466;
                    v1506 = (uint64_t (**)())v1466;
                    v552 = *(_DWORD *)(v1463 + 2152);
                    v553 = *(unsigned int *)(v1463 + 2160);
                    if (4 * v552 + 4 >= (3 * v553))
                    {
                      v554 = 2 * v553;
                    }
                    else
                    {
                      v554 = *(_DWORD *)(v1463 + 2160);
                      if ((int)v553 + ~v552 - *(_DWORD *)(v1463 + 2156) > v553 >> 3)
                        goto LABEL_858;
                    }
                    v688 = v1463;
                    v689 = *(_QWORD *)(v1463 + 2144);
                    v690 = (v554 - 1) | ((unint64_t)(v554 - 1) >> 1);
                    v691 = v690 | (v690 >> 2) | ((v690 | (v690 >> 2)) >> 4);
                    v692 = ((v691 | (v691 >> 8)) >> 16) | v691 | (v691 >> 8);
                    if ((v692 + 1) > 0x40)
                      v693 = v692 + 1;
                    else
                      v693 = 64;
                    *(_DWORD *)(v1463 + 2160) = v693;
                    v694 = operator new(32 * v693, (std::align_val_t)8uLL);
                    *(_QWORD *)(v688 + 2144) = v694;
                    if (v689)
                    {
                      v695 = v1463;
                      *(_QWORD *)(v1463 + 2152) = 0;
                      v696 = *(unsigned int *)(v695 + 2160);
                      if ((_DWORD)v696)
                      {
                        v697 = 32 * v696;
                        do
                        {
                          *v694 = -4096;
                          v694 += 4;
                          v697 -= 32;
                        }
                        while (v697);
                      }
                      if ((_DWORD)v553)
                      {
                        v698 = (__int128 *)(v689 + 8);
                        v699 = 32 * v553;
                        do
                        {
                          v700 = *((_QWORD *)v698 - 1);
                          if ((v700 | 0x1000) != 0xFFFFFFFFFFFFF000)
                          {
                            *(_QWORD *)&v1502 = 0;
                            v701 = v1463;
                            sub_1C4DCDF60(*(_QWORD *)(v1463 + 2144), *(_DWORD *)(v1463 + 2160), v700, &v1502);
                            v702 = v1502;
                            *(_QWORD *)v1502 = v700;
                            v703 = *v698;
                            *(_QWORD *)(v702 + 24) = *((_QWORD *)v698 + 2);
                            *(_OWORD *)(v702 + 8) = v703;
                            ++*(_DWORD *)(v701 + 2152);
                          }
                          v698 += 2;
                          v699 -= 32;
                        }
                        while (v699);
                      }
                      MEMORY[0x1CAA32FB4](v689, 8);
                      v694 = *(_QWORD **)(v1463 + 2144);
                      LODWORD(v704) = *(_DWORD *)(v1463 + 2160);
                    }
                    else
                    {
                      v705 = v1463;
                      *(_QWORD *)(v1463 + 2152) = 0;
                      v704 = *(unsigned int *)(v705 + 2160);
                      if ((_DWORD)v704)
                      {
                        v706 = 0;
                        do
                        {
                          v694[v706] = -4096;
                          v706 += 4;
                        }
                        while (4 * v704 != v706);
                      }
                    }
                    sub_1C4DCDF60((uint64_t)v694, v704, v483, &v1506);
                    v552 = *(_DWORD *)(v1463 + 2152);
                    v551 = (llvm::Instruction *)v1506;
                    v6 = v1431;
                    v464 = v1418;
                    v465 = v1423;
                    v466 = v1412;
LABEL_858:
                    v555 = v1463;
                    *(_DWORD *)(v1463 + 2152) = v552 + 1;
                    if (*(_QWORD *)v551 != -4096)
                      --*(_DWORD *)(v555 + 2156);
                    *(_QWORD *)v551 = v483;
                    *(_OWORD *)((char *)v551 + 8) = *(_OWORD *)v1471;
                    *((_QWORD *)v551 + 3) = v1472;
                  }
                  sub_1C56469C8(v1447, v466);
                  v557 = v556;
                  v558 = *(unsigned int *)(v556 + 16);
                  v463 = v1375;
                  if (v558 >= *(unsigned int *)(v556 + 20))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v556 + 8, v556 + 24, v558 + 1, 8);
                    v558 = *(unsigned int *)(v557 + 16);
                  }
                  *(_QWORD *)(*(_QWORD *)(v557 + 8) + 8 * v558) = v483;
                  ++*(_DWORD *)(v557 + 16);
                  if ((v1485 & 1) != 0)
                  {
                    v559 = 32;
                    v560 = &v1486;
                    v4 = (unsigned int *)v1461;
LABEL_866:
                    v561 = v559 - 1;
                    v562 = ((v1496 >> 4) ^ (v1496 >> 9)) & v561;
                    v563 = &v560[v562];
                    v564 = *v563;
                    if ((_QWORD)v1496 != *v563)
                    {
                      v565 = 0;
                      v566 = 1;
                      while (v564 != -4096)
                      {
                        if (v565)
                          v567 = 0;
                        else
                          v567 = v564 == -8192;
                        if (v567)
                          v565 = v563;
                        v568 = v562 + v566++;
                        v562 = v568 & v561;
                        v563 = &v560[v562];
                        v564 = *v563;
                        if ((_QWORD)v1496 == *v563)
                          goto LABEL_776;
                      }
                      if (v565)
                        v569 = v565;
                      else
                        v569 = v563;
                      goto LABEL_879;
                    }
                  }
                  else
                  {
                    v559 = v1487;
                    v4 = (unsigned int *)v1461;
                    if (v1487)
                    {
                      v560 = v1486;
                      goto LABEL_866;
                    }
                    v569 = 0;
LABEL_879:
                    v570 = sub_1C5646E98((uint64_t)&v1485, (uint64_t)v466, v466, v569);
                    *v570 = v1496;
                    v571 = v1496;
                    v572 = v1489;
                    if (v1489 >= (unint64_t)HIDWORD(v1489))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1488, (uint64_t)v1490, v1489 + 1, 8);
                      v572 = v1489;
                    }
                    v1488[v572] = v571;
                    LODWORD(v1489) = v1489 + 1;
                  }
LABEL_776:
                  if (v1457 || !v1465 || *(_BYTE *)(v1465 + 16) != 60)
                    continue;
                  v486 = *(_BYTE **)(v1465 - 32);
                  v487 = *(_DWORD *)(*(_QWORD *)v486 + 8);
                  if ((v487 & 0xFE) == 0x12)
                    v487 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v486 + 16) + 8);
                  if ((v487 >> 8) - 3 < 0xFFFFFFFE || !sub_1C563C104(*(llvm::BasicBlock **)(v1465 + 40)))
                    continue;
                  if (v486[16] == 62)
                  {
                    v488 = sub_1C477672C((uint64_t)v1436, (uint64_t)v486);
                    v489 = *((_QWORD *)v4 + 67);
                    v490 = v489 == *((_QWORD *)v4 + 66) ? v4 + 137 : v4 + 136;
                    if (v488 != (_QWORD *)(v489 + 8 * *v490))
                      continue;
                  }
                  v491 = sub_1C477672C((uint64_t)v1436, (uint64_t)v486);
                  v492 = *((_QWORD *)v4 + 67);
                  v493 = v492 == *((_QWORD *)v4 + 66) ? v4 + 137 : v4 + 136;
                  if (v491 != (_QWORD *)(v492 + 8 * *v493))
                    continue;
                  goto LABEL_792;
                }
                v629 = (char *)v1471[0];
                v630 = (char *)v1471[0] + 16 * LODWORD(v1471[1]);
                v631 = (unsigned __int8 **)(v581 + 80);
                while (2)
                {
                  v632 = *(_DWORD *)v629;
                  v633 = (unsigned __int8 *)*((_QWORD *)v629 + 1);
                  if (v633)
                  {
                    if (v632)
                      goto LABEL_951;
                    v1389 = v582;
                    v1506 = (uint64_t (**)())*((_QWORD *)v629 + 1);
                    llvm::MetadataTracking::track((uint64_t)&v1506, v633, 2);
                    v634 = *v631;
LABEL_955:
                    if (v634)
                      llvm::MetadataTracking::untrack((uint64_t)(v581 + 80), v634);
                    v635 = (unsigned __int8 *)v1506;
                    *v631 = (unsigned __int8 *)v1506;
                    if (v635)
                      llvm::MetadataTracking::retrack((uint64_t)&v1506, v635, (uint64_t)(v581 + 80));
                    v6 = v1431;
                    v582 = v1389;
                  }
                  else
                  {
                    v634 = *v631;
                    if (*v631 || (v581[55] & 0x20) != 0)
                    {
                      if (!v632)
                      {
                        v1389 = v582;
                        v1506 = 0;
                        goto LABEL_955;
                      }
LABEL_951:
                      llvm::Value::setMetadata((llvm::Value *)v582, *(_DWORD *)v629, (llvm::MDNode *)v633);
                    }
                  }
                  v629 += 16;
                  if (v629 == v630)
                    goto LABEL_889;
                  continue;
                }
              }
              v594 = *v525;
              v595 = **v525;
              if (!v595 || *(_BYTE *)(v595 + 8) != 15 || *(_QWORD *)(v595 + 24))
              {
                v596 = *((_DWORD *)v594 + 5);
                if ((v596 & 0x40000000) != 0)
                  v597 = (uint64_t **)*(v594 - 1);
                else
                  v597 = (uint64_t **)&v594[-4 * (v596 & 0x7FFFFFF)];
                v594 = *v597;
              }
              v598 = *(_QWORD *)(v1463 + 4624);
              v599 = (unsigned __int8 *)*v518;
              v1470[0] = (uint64_t)v594;
              v1470[1] = (uint64_t)v599;
              sub_1C4773D54((uint64_t)v1471, v483, 0, 0, 0);
              *(_QWORD *)&v1495 = 0;
              if (sub_1C6200DDC(*(_QWORD *)(v1463 + 2192), *(_DWORD *)(v1463 + 2208), (uint64_t)v594, (uint64_t)v599, &v1495)&& (_QWORD)v1495 != *(_QWORD *)(v1463 + 2192) + 24 * *(unsigned int *)(v1463 + 2208))
              {
                v600 = *(uint64_t ****)(v1495 + 16);
                goto LABEL_918;
              }
              v628 = *(unsigned int *)(v1463 + 2200);
              if (v628 >= *(_DWORD *)(v1463 + 2216))
              {
                v526 = (uint64_t *)*((_QWORD *)&v1376 + 1);
                v525 = (uint64_t **)v1376;
                if (v1471[0] != v1423)
                {
                  free(v1471[0]);
                  v526 = (uint64_t *)*((_QWORD *)&v1376 + 1);
                  v525 = (uint64_t **)v1376;
                }
                goto LABEL_839;
              }
              v636 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v483 + 40) + 56) + 40);
              llvm::ArrayType::get((llvm::ArrayType *)(*(_QWORD *)*v636 + 1672), (llvm::Type *)6);
              v1369 = v637;
              v638 = (char *)operator new(0x78uLL);
              *((_DWORD *)v638 + 13) = *((_DWORD *)v638 + 13) & 0x38000000 | 1;
              v600 = (uint64_t ***)(v638 + 32);
              *(_QWORD *)v638 = 0;
              *((_QWORD *)v638 + 1) = 0;
              *((_QWORD *)v638 + 2) = 0;
              *((_QWORD *)v638 + 3) = v638 + 32;
              *(_QWORD *)&v1495 = "agc.cprog.ts.dma.";
              v1371 = v1371 & 0xFFFFFFFF00000000 | v628;
              *(_QWORD *)&v1496 = v1371;
              LOWORD(v1497) = 2051;
              llvm::GlobalVariable::GlobalVariable((uint64_t)(v638 + 32), (uint64_t)v636, v1369, 1, 0, 0, (uint64_t)&v1495, 0, 0, 64, 0);
              v1367 = (uint64_t ***)llvm::UniqueStringSaver::save(***((_QWORD ***)v638 + 4) + 2136, "image_state", 0xBuLL);
              v1370 = v639;
              v641 = ***((_QWORD ***)v638 + 4);
              *(_QWORD *)&v1495 = v638 + 32;
              v642 = *(_DWORD *)(v641 + 2520);
              if (v642)
              {
                v643 = *(_QWORD *)(v641 + 2504);
                v644 = v642 - 1;
                v645 = v644 & ((v600 >> 4) ^ (v600 >> 9));
                v646 = (uint64_t ****)(v643 + 24 * v645);
                v647 = *v646;
                if (*v646 == v600)
                  goto LABEL_962;
                v684 = 0;
                v685 = 1;
                while (v647 != (uint64_t ***)-4096)
                {
                  if (v684)
                    v686 = 0;
                  else
                    v686 = v647 == (uint64_t ***)-8192;
                  if (v686)
                    v684 = v646;
                  v687 = v645 + v685++;
                  v645 = v687 & v644;
                  v646 = (uint64_t ****)(v643 + 24 * v645);
                  v647 = *v646;
                  if (*v646 == v600)
                    goto LABEL_962;
                }
                if (v684)
                  v707 = v684;
                else
                  v707 = v646;
              }
              else
              {
                v707 = 0;
              }
              v646 = (uint64_t ****)sub_1C53D65B8(v641 + 2504, (uint64_t)&v1495, (uint64_t *)&v1495, v707);
              v708 = (uint64_t ***)v1495;
              v646[1] = 0;
              v646[2] = 0;
              *v646 = v708;
LABEL_962:
              v646[1] = v1367;
              v646[2] = v1370;
              if (v1370)
                v648 = 4456448;
              else
                v648 = 0x40000;
              *((_DWORD *)v638 + 16) = v648 | *((_DWORD *)v638 + 16) & 0xFF80FFFF;
              v649 = (uint64_t *)*v636;
              v650 = *(_QWORD *)*v636;
              v651 = *(llvm::ConstantInt **)(v650 + 1960);
              v652 = *(unsigned int *)(v650 + 1968);
              DWORD2(v1495) = v652 >> 8;
              if (v652 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v1495, v628, 0);
              }
              else
              {
                if (v652 <= 0xFF)
                  v653 = 0;
                else
                  v653 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v652);
                *(_QWORD *)&v1495 = v653 & v628;
              }
              v655 = llvm::ConstantInt::get(v651, (llvm::LLVMContext *)&v1495, v640);
              if (DWORD2(v1495) >= 0x41 && (_QWORD)v1495)
                MEMORY[0x1CAA32F9C](v1495, 0x1000C8000313F17);
              *(_QWORD *)&v1502 = llvm::ValueAsMetadata::get(v655, v654);
              Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(v649, &v1502, 1, 0, 1);
              MDKindID = llvm::LLVMContext::getMDKindID(**v600, "agx.ts.dma", 0xAuLL);
              llvm::Value::addMetadata((llvm::Value *)v600, MDKindID, Impl);
              (*(void (**)(uint64_t, _QWORD, uint64_t ***))(*(_QWORD *)v598 + 144))(v598, 0, v600);
              (*(void (**)(uint64_t, uint64_t ***, uint64_t *, _QWORD))(*(_QWORD *)v598 + 496))(v598, v600, v636 + 34, 0);
              v658 = llvm::Intrinsic::getDeclaration(v636, 2149, 0, 0);
              v659 = v658;
              v660 = 0;
              if (v658)
                v660 = *(uint64_t ***)(v658 + 24);
              if ((*(_WORD *)(v658 + 18) & 1) != 0)
                llvm::Function::BuildLazyArguments((llvm::Function *)v658);
              v661 = **(_QWORD **)(v659 + 88);
              LOWORD(v1497) = 257;
              v1491 = sub_1C4773E38((uint64_t *)v1471, 49, (unsigned __int8 *)v600, v661, (uint64_t)&v1495);
              if ((*(_WORD *)(v659 + 18) & 1) != 0)
                llvm::Function::BuildLazyArguments((llvm::Function *)v659);
              v662 = *(_QWORD *)(*(_QWORD *)(v659 + 88) + 40);
              v1505 = 257;
              v1492 = sub_1C4773E38((uint64_t *)v1471, 49, (unsigned __int8 *)v594, v662, (uint64_t)&v1502);
              v663 = *(_QWORD *)v1478 + 1960;
              v1510 = 257;
              v1493 = sub_1C4773E38((uint64_t *)v1471, 47, v599, v663, (uint64_t)&v1506);
              v665 = *(llvm::ConstantInt **)(*(_QWORD *)v1478 + 1936);
              v666 = *(_DWORD *)(*(_QWORD *)v1478 + 1944);
              LODWORD(v1467) = v666 >> 8;
              if (v666 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v1466, 1, 0);
              }
              else
              {
                if (v666 <= 0xFF)
                  LOBYTE(v667) = 0;
                else
                  v667 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v666);
                v1466 = (llvm::Instruction *)(v667 & 1);
              }
              v668 = llvm::ConstantInt::get(v665, (llvm::LLVMContext *)&v1466, v664);
              if (v1467 >= 0x41 && v1466)
                MEMORY[0x1CAA32F9C](v1466, 0x1000C8000313F17);
              v1494 = v668;
              v1469 = 257;
              v669 = sub_1C4774778((uint64_t *)v1471, v660, v659, (uint64_t *)&v1491, 4, (uint64_t)&v1466, 0);
              *(_QWORD *)&v1495 = v669;
              if ((v1485 & 1) != 0)
              {
                v670 = 32;
                v671 = &v1486;
LABEL_985:
                v672 = v670 - 1;
                v673 = v672 & ((v669 >> 4) ^ (v669 >> 9));
                v674 = &v671[v673];
                v675 = *v674;
                if (v669 != *v674)
                {
                  v676 = 0;
                  v677 = 1;
                  while (v675 != -4096)
                  {
                    if (v676)
                      v678 = 0;
                    else
                      v678 = v675 == -8192;
                    if (v678)
                      v676 = v674;
                    v679 = v673 + v677++;
                    v673 = v679 & v672;
                    v674 = &v671[v673];
                    v675 = *v674;
                    if (v669 == *v674)
                      goto LABEL_1001;
                  }
                  if (v676)
                    v680 = v676;
                  else
                    v680 = v674;
                  goto LABEL_998;
                }
              }
              else
              {
                v670 = v1487;
                if (v1487)
                {
                  v671 = v1486;
                  goto LABEL_985;
                }
                v680 = 0;
LABEL_998:
                v681 = sub_1C5646E98((uint64_t)&v1485, (uint64_t)&v1495, &v1495, v680);
                *v681 = v1495;
                v682 = v1495;
                v683 = v1489;
                if (v1489 >= (unint64_t)HIDWORD(v1489))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1488, (uint64_t)v1490, v1489 + 1, 8);
                  v683 = v1489;
                }
                v1488[v683] = v682;
                LODWORD(v1489) = v1489 + 1;
              }
LABEL_1001:
              sub_1C6281A38(v1406, v1470)[2] = v600;
              v6 = v1431;
LABEL_918:
              v601 = **(_QWORD **)v1376;
              LOWORD(v1497) = 257;
              v602 = sub_1C4773E38((uint64_t *)v1471, 49, (unsigned __int8 *)v600, v601, (uint64_t)&v1495);
              if (*(_QWORD *)v1376)
              {
                v604 = v1392 + 32 * v1385;
                v606 = *(_QWORD **)(v604 + 16);
                v605 = (_QWORD *)(v604 + 16);
                *v606 = *(v605 - 1);
                v607 = *(v605 - 1);
                if (v607)
                  *(_QWORD *)(v607 + 16) = *v605;
              }
              *(_QWORD *)v1376 = v602;
              v4 = (unsigned int *)v1461;
              if (v602)
              {
                v610 = *((_QWORD *)v602 + 1);
                v608 = v602 + 8;
                v609 = v610;
                v611 = v1392 + 32 * v1385;
                *(_QWORD *)(v611 + 8) = v610;
                v612 = v611 + 8;
                if (v610)
                  *(_QWORD *)(v609 + 16) = v612;
                *(_QWORD *)(v1392 + 32 * v1385 + 16) = v608;
                *v608 = v1376;
              }
              v613 = *(llvm::ConstantInt **)(*(_QWORD *)v1478 + 1984);
              v614 = *(_DWORD *)(*(_QWORD *)v1478 + 1992);
              DWORD2(v1495) = v614 >> 8;
              if (v614 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v1495, -1, 0);
              }
              else
              {
                if (v614 <= 0xFF)
                  v615 = 0;
                else
                  v615 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v614);
                *(_QWORD *)&v1495 = v615;
              }
              v463 = v1375;
              v616 = (unsigned __int8 *)llvm::ConstantInt::get(v613, (llvm::LLVMContext *)&v1495, v603);
              if (DWORD2(v1495) >= 0x41 && (_QWORD)v1495)
                MEMORY[0x1CAA32F9C](v1495, 0x1000C8000313F17);
              v617 = *(_QWORD *)v599;
              LOWORD(v1497) = 257;
              v618 = sub_1C4773E38((uint64_t *)v1471, 48, v616, v617, (uint64_t)&v1495);
              if (**((_QWORD **)&v1376 + 1))
              {
                v619 = v1392 + 32 * v1382;
                v621 = *(_QWORD **)(v619 + 16);
                v620 = (_QWORD *)(v619 + 16);
                *v621 = *(v620 - 1);
                v622 = *(v620 - 1);
                if (v622)
                  *(_QWORD *)(v622 + 16) = *v620;
              }
              **((_QWORD **)&v1376 + 1) = v618;
              v465 = v1423;
              v466 = v1412;
              if (v618)
              {
                v625 = *((_QWORD *)v618 + 1);
                v623 = v618 + 8;
                v624 = v625;
                v626 = v1392 + 32 * v1382;
                *(_QWORD *)(v626 + 8) = v625;
                v627 = v626 + 8;
                if (v625)
                  *(_QWORD *)(v624 + 16) = v627;
                *(_QWORD *)(v1392 + 32 * v1382 + 16) = v623;
                *v623 = *((_QWORD *)&v1376 + 1);
              }
              if (v1471[0] != v1423)
                free(v1471[0]);
              *v6 = 1;
              v464 = v1418;
              goto LABEL_776;
            }
LABEL_792:
            if (sub_1C56462AC(v1463, v1465, v1441, &v1480))
            {
              v494 = sub_1C477672C((uint64_t)v1397, v1465);
              v495 = *(_QWORD *)(v1463 + 3304);
              v496 = 3312;
              if (v495 == *(_QWORD *)(v1463 + 3296))
                v496 = 3316;
              if (v494 == (_QWORD *)(v495 + 8 * *(unsigned int *)(v1463 + v496)))
              {
                if ((v1485 & 1) != 0)
                {
                  v497 = 32;
                  v498 = &v1486;
                }
                else
                {
                  v497 = v1487;
                  if (!v1487)
                  {
                    v507 = 0;
LABEL_812:
                    v508 = sub_1C5646E98((uint64_t)&v1485, (uint64_t)&v1465, &v1465, v507);
                    *v508 = v1465;
                    v509 = v1465;
                    v510 = v1489;
                    if (v1489 >= (unint64_t)HIDWORD(v1489))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1488, (uint64_t)v1490, v1489 + 1, 8);
                      v510 = v1489;
                    }
                    v1488[v510] = v509;
                    LODWORD(v1489) = v1489 + 1;
                    continue;
                  }
                  v498 = v1486;
                }
                v499 = v497 - 1;
                v500 = ((v1465 >> 4) ^ (v1465 >> 9)) & v499;
                v501 = &v498[v500];
                v502 = *v501;
                if (v1465 == *v501)
                  continue;
                v503 = 0;
                v504 = 1;
                while (v502 != -4096)
                {
                  if (v503)
                    v505 = 0;
                  else
                    v505 = v502 == -8192;
                  if (v505)
                    v503 = v501;
                  v506 = v500 + v504++;
                  v500 = v506 & v499;
                  v501 = &v498[v500];
                  v502 = *v501;
                  if (v1465 == *v501)
                    goto LABEL_815;
                }
                if (v503)
                  v507 = v503;
                else
                  v507 = v501;
                goto LABEL_812;
              }
            }
LABEL_815:
            ;
          }
          v5 = v1463;
          if (v463 == v464)
            goto LABEL_1051;
        }
        v475 = 1;
        while (v474 != -4096)
        {
          v476 = v473 + v475++;
          v473 = v476 & v472;
          v474 = *(_QWORD *)(v471 + 16 * v473);
          if (v467 == v474)
            goto LABEL_755;
        }
LABEL_756:
        v1457 = 0;
        goto LABEL_757;
      }
    }
LABEL_1051:
    if (!(_DWORD)v1489)
      goto LABEL_2050;
    v1458 = (llvm::SmallPtrSetImplBase *)(v5 + 1856);
    v1471[0] = &v1472;
    v1471[1] = (void *)0x2000000000;
    sub_1C486AF08((unsigned int *)v1471, v1488, &v1488[v1489]);
    if (LODWORD(v1471[1]))
    {
      v709 = (uint64_t *)v1471[0];
      v710 = 8 * LODWORD(v1471[1]);
      while (1)
      {
        v711 = *v709;
        *(_QWORD *)&v1495 = &off_1E8171D10;
        *((_QWORD *)&v1495 + 1) = &v1485;
        *((_QWORD *)&v1496 + 1) = &v1495;
        sub_1C56456CC(v5, v711, v1461, v1441, &v1495, (llvm::SmallPtrSetImplBase *)(v5 + 2224));
        if (*((__int128 **)&v1496 + 1) == &v1495)
          break;
        if (*((_QWORD *)&v1496 + 1))
        {
          v712 = (void (**)(void))(**((_QWORD **)&v1496 + 1) + 40);
LABEL_1058:
          (*v712)();
        }
        ++v709;
        v710 -= 8;
        if (!v710)
          goto LABEL_1060;
      }
      v712 = (void (**)(void))(v1495 + 32);
      goto LABEL_1058;
    }
LABEL_1060:
    if ((_DWORD)v1489)
    {
      v713 = v1488;
      v714 = v1463 + 3456;
      for (mm = 8 * v1489; mm; mm -= 8)
      {
        v716 = *v713;
        v717 = *(unsigned __int8 *)(*v713 + 16);
        if ((v717 - 29) >= 0xB && !sub_1C5646CB4(*(_QWORD *)v716))
        {
          v718 = sub_1C477672C(v714, v716);
          v719 = *(_QWORD *)(v1463 + 3464);
          if (v719 == *(_QWORD *)(v1463 + 3456))
            v720 = 3476;
          else
            v720 = 3472;
          if (v718 == (_QWORD *)(v719 + 8 * *(unsigned int *)(v1463 + v720)))
          {
            if (*(_BYTE *)(*(_QWORD *)v716 + 8) != 13)
              goto LABEL_1073;
            sub_1C4768AD0(v1441, *(_QWORD *)v716);
            v723 = v722;
            if ((_DWORD)v721 == 1)
            if ((v723 & 7) == 0)
              goto LABEL_1073;
            goto LABEL_1072;
          }
          v717 = *(unsigned __int8 *)(v716 + 16);
        }
        if (v717 == 30 && (*(_DWORD *)(v716 + 20) & 0x7FFFFFF) == 3)
          sub_1C4774094(v1458, *(_QWORD *)(v716 - 96));
LABEL_1072:
        sub_1C4774094(v1458, v716);
LABEL_1073:
        ++v713;
      }
    }
    if (v1471[0] != &v1472)
      free(v1471[0]);
    v1471[0] = &v1474;
    v1471[1] = &v1474;
    v1472 = 16;
    v1473 = 0;
    v724 = (int32x2_t *)v1463;
    v725 = (_BYTE *)(v1463 + 3888);
    if ((_DWORD)v1489)
    {
      v726 = (char *)v1488;
      v727 = (char *)&v1488[v1489];
      v728 = (int32x2_t)(v1463 + 3896);
      v729 = v1463 + 4152;
      v730 = v1463 + 4168;
      do
      {
        if ((*v725 & 1) != 0)
        {
          v731 = 32;
          v732 = v728;
        }
        else
        {
          v731 = v724[488].i32[0];
          if (!v731)
          {
            v741 = 0;
LABEL_1100:
            *sub_1C5646E98((uint64_t)v725, (uint64_t)v726, v726, v741) = *(_QWORD *)v726;
            v742 = *(_QWORD *)v726;
            v743 = *(unsigned int *)(v1463 + 4160);
            if (v743 >= *(unsigned int *)(v1463 + 4164))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v729, v730, v743 + 1, 8);
              v743 = *(unsigned int *)(v1463 + 4160);
            }
            v744 = v1463;
            *(_QWORD *)(*(_QWORD *)(v1463 + 4152) + 8 * v743) = v742;
            v724 = (int32x2_t *)v744;
            ++*(_DWORD *)(v744 + 4160);
            goto LABEL_1103;
          }
          v732 = v724[487];
        }
        v733 = v731 - 1;
        v734 = ((*(_QWORD *)v726 >> 4) ^ (*(_QWORD *)v726 >> 9)) & v733;
        v735 = (_QWORD *)(*(_QWORD *)&v732 + 8 * v734);
        v736 = *v735;
        if (*(_QWORD *)v726 != *v735)
        {
          v737 = 0;
          v738 = 1;
          while (v736 != -4096)
          {
            if (v737)
              v739 = 0;
            else
              v739 = v736 == -8192;
            if (v739)
              v737 = v735;
            v740 = v734 + v738++;
            v734 = v740 & v733;
            v735 = (_QWORD *)(*(_QWORD *)&v732 + 8 * v734);
            v736 = *v735;
            if (*(_QWORD *)v726 == *v735)
              goto LABEL_1103;
          }
          if (v737)
            v741 = v737;
          else
            v741 = v735;
          goto LABEL_1100;
        }
LABEL_1103:
        v726 += 8;
      }
      while (v726 != v727);
    }
    v1496 = 0u;
    v1495 = 0u;
    LODWORD(v1497) = 1065353216;
    v745 = v724[520].u32[0];
    v746 = v1461;
    if (!(_DWORD)v745)
      goto LABEL_1384;
    v1419 = (uint64_t)&v724[519];
    v1437 = v724 + 333;
    v1402 = (uint64_t)&v724[366];
    v1407 = v724 + 334;
    v1398 = (llvm::SmallPtrSetImplBase *)&v724[368];
    v1424 = v724 + 487;
    v1413 = (uint64_t)&v724[521];
    v1429 = (llvm::SmallPtrSetImplBase *)&v724[271];
    while (1)
    {
      v747 = *(_QWORD *)(*(_QWORD *)&v724[519] + 8 * v745 - 8);
      sub_1C5645B98((uint64_t)v725, v747);
      --v724[520].i32[0];
      v748 = *(unsigned __int8 *)(v747 + 16);
      if (v748 == 83 || (v748 - 29) < 0xB)
        goto LABEL_1233;
      v750 = *(_DWORD *)(v747 + 20);
      if ((v750 & 0x40000000) != 0)
      {
        v752 = *(uint64_t **)(v747 - 8);
        v751 = v750 & 0x7FFFFFF;
      }
      else
      {
        v751 = v750 & 0x7FFFFFF;
        v752 = (uint64_t *)(v747 - 32 * v751);
      }
      v753 = sub_1C564700C(v752, &v752[4 * v751]);
      DWORD2(v1502) = 0;
      *(_QWORD *)&v1502 = 0;
      v754 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
      if ((v754 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
      {
        v912 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v912 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v912;
        __cxa_guard_release(&qword_1ED7EAC88);
      }
      LODWORD(v1502) = v748 - 28;
      *(_QWORD *)((char *)&v1502 + 4) = v753;
      v755 = __ROR8__(v753 + 12, 12);
      v756 = (-348639895
            * ((-348639895
              * (v755 ^ (((0x9DDFEA08EB382D69 * ((unint64_t)v1502 ^ qword_1ED7EAC80 ^ v755)) >> 32) >> 15) ^ (-348639895 * ((v748 - 28) ^ qword_1ED7EAC80 ^ v755)))) ^ (((0x9DDFEA08EB382D69 * (v755 ^ ((0x9DDFEA08EB382D69 * ((unint64_t)v1502 ^ qword_1ED7EAC80 ^ v755)) >> 47) ^ (0x9DDFEA08EB382D69 * ((unint64_t)v1502 ^ qword_1ED7EAC80 ^ v755)))) >> 32) >> 15))) ^ v753;
      v757 = *((_QWORD *)&v1495 + 1);
      if (!*((_QWORD *)&v1495 + 1))
        break;
      v758 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v1495 + 8));
      v758.i16[0] = vaddlv_u8(v758);
      if (v758.u32[0] <= 1uLL)
      {
        v759 = v756 & (unint64_t)(*((_QWORD *)&v1495 + 1) + 0xFFFFFFFFLL);
      }
      else
      {
        v759 = v756;
        if (*((_QWORD *)&v1495 + 1) <= (unint64_t)v756)
          v759 = (unint64_t)v756 % *((_QWORD *)&v1495 + 1);
      }
      v760 = *(uint64_t ***)(v1495 + 8 * v759);
      if (!v760)
        break;
      v761 = *v760;
      if (!*v760)
        break;
      while (1)
      {
        v762 = v761[1];
        if (v762 == v756)
          break;
        if (v758.u32[0] <= 1uLL)
        {
          v762 &= *((_QWORD *)&v1495 + 1) - 1;
        }
        else if (v762 >= *((_QWORD *)&v1495 + 1))
        {
          v762 %= *((_QWORD *)&v1495 + 1);
        }
        if (v762 != v759)
          goto LABEL_1149;
LABEL_1129:
        v761 = (uint64_t *)*v761;
        if (!v761)
          goto LABEL_1149;
      }
      if (*((_DWORD *)v761 + 4) != v756)
        goto LABEL_1129;
      v763 = v761;
      do
        v763 = (uint64_t *)*v763;
      while (v763 && *((_DWORD *)v763 + 4) == v756);
      if (v761 == v763)
        break;
      while (1)
      {
        v1466 = (llvm::Instruction *)v761[3];
        v764 = sub_1C477672C((uint64_t)v1471, (uint64_t)v1466);
        v765 = v1471[1] == v1471[0] ? (uint64_t *)((char *)&v1472 + 4) : &v1472;
        if (v764 == (_QWORD *)((char *)v1471[1] + 8 * *(unsigned int *)v765))
        {
          v766 = v1466;
          if (llvm::Instruction::isIdenticalToWhenDefined(v1466, (const llvm::Instruction *)v747))
          {
            if ((*(unsigned __int8 *)(v747 + 17) ^ *((unsigned __int8 *)v766 + 17)) <= 1)
            {
              v767 = *((_QWORD *)v1466 + 5);
              v768 = v1463;
              if (llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(v1463 + 4600), (const llvm::Value *)v747, v1466))
              {
                v801 = v1466;
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v1466 + 5) + 40, (uint64_t ***)v1466);
                v802 = *((_QWORD *)v801 + 3);
                v803 = (_QWORD *)*((_QWORD *)v801 + 4);
                *v803 = v802;
                *(_QWORD *)(v802 + 8) = v803;
                *((_QWORD *)v801 + 3) = 0;
                *((_QWORD *)v801 + 4) = 0;
                v804 = v1466;
                v805 = *(_QWORD *)(v747 + 40);
                *((_QWORD *)v1466 + 5) = v805;
                *(_WORD *)(v805 + 18) &= ~0x8000u;
                if ((*((_BYTE *)v804 + 23) & 0x10) != 0)
                {
                  v908 = *(_QWORD *)(v805 + 56);
                  if (v908)
                  {
                    v909 = *(llvm::ValueSymbolTable **)(v908 + 104);
                    if (v909)
                      llvm::ValueSymbolTable::reinsertValue(v909, v804);
                  }
                }
                v806 = *(_QWORD *)(v747 + 24);
                *((_QWORD *)v804 + 3) = v806;
                *((_QWORD *)v804 + 4) = v747 + 24;
                v807 = (char *)v804 + 24;
                *(_QWORD *)(v806 + 8) = v807;
                *(_QWORD *)(v747 + 24) = v807;
                goto LABEL_1249;
              }
              if (llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(v768 + 4600), v1466, (const llvm::Instruction *)v747))
              {
                goto LABEL_1250;
              }
              if (sub_1C563BD30(v747, v1441, *(int **)(v768 + 4592), *(_QWORD *)(v768 + 4616), v6[9], 0))
              {
                break;
              }
            }
          }
        }
        v761 = (uint64_t *)*v761;
        if (v761 == v763)
        {
          v757 = *((_QWORD *)&v1495 + 1);
          goto LABEL_1149;
        }
      }
      NearestCommonDominator = llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator(*(_QWORD *)(v1463 + 4600), *((_QWORD *)v1466 + 5), *(_QWORD *)(v747 + 40));
      v809 = v1466;
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v1466 + 5) + 40, (uint64_t ***)v1466);
      v810 = *((_QWORD *)v809 + 3);
      v811 = (_QWORD *)*((_QWORD *)v809 + 4);
      *v811 = v810;
      *(_QWORD *)(v810 + 8) = v811;
      *((_QWORD *)v809 + 3) = 0;
      *((_QWORD *)v809 + 4) = 0;
      v812 = *(_QWORD *)(NearestCommonDominator + 40);
      if (v812 == NearestCommonDominator + 40)
      {
        v814 = 0;
      }
      else
      {
        if (v812)
          v813 = v812 - 24;
        else
          v813 = 0;
        if (*(unsigned __int8 *)(v813 + 16) - 29 >= 0xB)
          v814 = 0;
        else
          v814 = v813;
      }
      v815 = v1466;
      v816 = *(_QWORD *)(v814 + 40);
      *((_QWORD *)v1466 + 5) = v816;
      *(_WORD *)(v816 + 18) &= ~0x8000u;
      if ((*((_BYTE *)v815 + 23) & 0x10) != 0)
      {
        v910 = *(_QWORD *)(v816 + 56);
        if (v910)
        {
          v911 = *(llvm::ValueSymbolTable **)(v910 + 104);
          if (v911)
            llvm::ValueSymbolTable::reinsertValue(v911, v815);
        }
      }
      v818 = *(_QWORD *)(v814 + 24);
      v817 = (_QWORD *)(v814 + 24);
      *((_QWORD *)v815 + 3) = v818;
      *((_QWORD *)v815 + 4) = v817;
      v819 = (char *)v815 + 24;
      *(_QWORD *)(v818 + 8) = v819;
      *v817 = v819;
LABEL_1249:
      v768 = v1463;
LABEL_1250:
      v820 = *(uint64_t **)(v768 + 4608);
      v821 = *((_DWORD *)v820 + 4);
      v724 = (int32x2_t *)v768;
      v746 = v1461;
      if (v821)
      {
        v822 = *((_QWORD *)v1466 + 5);
        v823 = *v820;
        v824 = v821 - 1;
        LODWORD(v825) = ((v822 >> 4) ^ (v822 >> 9)) & v824;
        v826 = (uint64_t *)(v823 + 16 * v825);
        v827 = *v826;
        if (v822 != *v826)
        {
          v828 = 1;
          while (v827 != -4096)
          {
            v829 = v825 + v828++;
            v825 = v829 & v824;
            v827 = *(_QWORD *)(v823 + 16 * v825);
            if (v822 == v827)
            {
              v830 = *(_QWORD **)(v823 + 16 * v825 + 8);
              if (v830)
                goto LABEL_1266;
              goto LABEL_1256;
            }
          }
          goto LABEL_1256;
        }
        v830 = (_QWORD *)v826[1];
        if (!v830)
          goto LABEL_1256;
LABEL_1266:
        v836 = *(_QWORD *)(v747 + 40);
        v837 = ((v836 >> 4) ^ (v836 >> 9)) & v824;
        v838 = *(_QWORD *)(v823 + 16 * v837);
        if (v836 == v838)
        {
LABEL_1270:
          v841 = *(_QWORD **)(v823 + 16 * v837 + 8);
          goto LABEL_1272;
        }
        v839 = 1;
        while (v838 != -4096)
        {
          v840 = v837 + v839++;
          v837 = v840 & v824;
          v838 = *(_QWORD *)(v823 + 16 * v837);
          if (v836 == v838)
            goto LABEL_1270;
        }
        v841 = 0;
LABEL_1272:
        while (v841 != v830)
        {
          if (!v841)
          {
LABEL_1285:
            if ((v1437->i8[0] & 1) != 0)
            {
              v847 = 32;
              v848 = v1407;
LABEL_1288:
              v849 = v847 - 1;
              v850 = v849 & ((v1466 >> 4) ^ (v1466 >> 9));
              v851 = (llvm::Instruction **)&v848[v850];
              v852 = *v851;
              if (v1466 == *v851)
                goto LABEL_1305;
              v853 = 0;
              v854 = 1;
              while (v852 != (llvm::Instruction *)-4096)
              {
                if (v853)
                  v855 = 0;
                else
                  v855 = v852 == (llvm::Instruction *)-8192;
                if (v855)
                  v853 = v851;
                v856 = v850 + v854++;
                v850 = v856 & v849;
                v851 = (llvm::Instruction **)&v848[v850];
                v852 = *v851;
                if (v1466 == *v851)
                  goto LABEL_1305;
              }
              if (v853)
                v857 = v853;
              else
                v857 = v851;
            }
            else
            {
              v847 = *(_DWORD *)(v768 + 2680);
              if (v847)
              {
                v848 = *(int32x2_t **)(v768 + 2672);
                goto LABEL_1288;
              }
              v857 = 0;
            }
            v858 = sub_1C5646E98((uint64_t)v1437, (uint64_t)&v1466, &v1466, v857);
            *v858 = v1466;
            v859 = v1466;
            v860 = v724[367].u32[0];
            if (v860 >= v724[367].u32[1])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v1402, (uint64_t)v1398, v860 + 1, 8);
              v860 = v724[367].u32[0];
            }
            *(_QWORD *)(*(_QWORD *)&v724[366] + 8 * v860) = v859;
            v835 = v724[367].i32[0] + 1;
            goto LABEL_1304;
          }
          v841 = (_QWORD *)*v841;
        }
        if (v767 != v822)
        {
          v842 = v824 & ((v767 >> 4) ^ (v767 >> 9));
          v843 = *(_QWORD *)(v823 + 16 * v842);
          if (v767 == v843)
          {
LABEL_1280:
            v846 = *(_QWORD **)(v823 + 16 * v842 + 8);
            goto LABEL_1282;
          }
          v844 = 1;
          while (v843 != -4096)
          {
            v845 = v842 + v844++;
            v842 = v845 & v824;
            v843 = *(_QWORD *)(v823 + 16 * v842);
            if (v767 == v843)
              goto LABEL_1280;
          }
          v846 = 0;
LABEL_1282:
          while (v846 != v830)
          {
            if (!v846)
              goto LABEL_1285;
            v846 = (_QWORD *)*v846;
          }
        }
      }
      else
      {
LABEL_1256:
        if (sub_1C5645B98((uint64_t)v1437, (uint64_t)v1466))
        {
          v831 = *(llvm::Instruction ***)(v768 + 2928);
          v832 = *(unsigned int *)(v768 + 2936);
          v833 = &v831[v832];
          if ((_DWORD)v832)
          {
            v834 = 8 * v832;
            while (*v831 != v1466)
            {
              ++v831;
              v834 -= 8;
              if (!v834)
              {
                v831 = v833;
                break;
              }
            }
          }
          if (v833 != v831 + 1)
          {
            memmove(v831, v831 + 1, (char *)v833 - (char *)(v831 + 1));
            LODWORD(v832) = *(_DWORD *)(v768 + 2936);
          }
          v835 = v832 - 1;
LABEL_1304:
          v724[367].i32[0] = v835;
        }
      }
LABEL_1305:
      v861 = *(_QWORD *)(v747 + 8);
      if (v861)
      {
        while (2)
        {
          v862 = *(_QWORD *)(v861 + 24);
          if ((v1485 & 1) == 0)
          {
            v863 = v1487;
            if (v1487)
            {
              v864 = v1486;
              goto LABEL_1310;
            }
LABEL_1337:
            v861 = *(_QWORD *)(v861 + 8);
            if (!v861)
              goto LABEL_1341;
            continue;
          }
          break;
        }
        v863 = 32;
        v864 = &v1486;
LABEL_1310:
        v865 = (v862 >> 4) ^ (v862 >> 9);
        v866 = v863 - 1;
        v867 = v866 & v865;
        v868 = v864[v866 & v865];
        if (v862 != v868)
        {
          v869 = 1;
          while (v868 != -4096)
          {
            v870 = v867 + v869++;
            v867 = v870 & v866;
            v868 = v864[v867];
            if (v862 == v868)
              goto LABEL_1314;
          }
          goto LABEL_1337;
        }
LABEL_1314:
        v871 = sub_1C477672C((uint64_t)v1471, *(_QWORD *)(v861 + 24));
        if (v1471[1] == v1471[0])
          v872 = (uint64_t *)((char *)&v1472 + 4);
        else
          v872 = &v1472;
        if (v871 != (_QWORD *)((char *)v1471[1] + 8 * *(unsigned int *)v872))
          goto LABEL_1337;
        *(_QWORD *)&v1502 = v862;
        if ((*v725 & 1) != 0)
        {
          v873 = 32;
          v874 = (int32x2_t)v1424;
LABEL_1321:
          v875 = v873 - 1;
          v876 = v875 & v865;
          v877 = (_QWORD *)(*(_QWORD *)&v874 + 8 * (v875 & v865));
          v878 = *v877;
          if (v862 == *v877)
            goto LABEL_1337;
          v879 = 0;
          v880 = 1;
          while (v878 != -4096)
          {
            if (v879)
              v881 = 0;
            else
              v881 = v878 == -8192;
            if (v881)
              v879 = v877;
            v882 = v876 + v880++;
            v876 = v882 & v875;
            v877 = (_QWORD *)(*(_QWORD *)&v874 + 8 * v876);
            v878 = *v877;
            if (v862 == *v877)
              goto LABEL_1337;
          }
          if (v879)
            v883 = v879;
          else
            v883 = v877;
        }
        else
        {
          v873 = v724[488].i32[0];
          if (v873)
          {
            v874 = v724[487];
            goto LABEL_1321;
          }
          v883 = 0;
        }
        v884 = sub_1C5646E98((uint64_t)v725, (uint64_t)&v1502, &v1502, v883);
        *v884 = v1502;
        v885 = v1502;
        v886 = v724[520].u32[0];
        if (v886 >= v724[520].u32[1])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v1419, v1413, v886 + 1, 8);
          v886 = v724[520].u32[0];
        }
        *(_QWORD *)(*(_QWORD *)&v724[519] + 8 * v886) = v885;
        ++v724[520].i32[0];
        goto LABEL_1337;
      }
LABEL_1341:
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v747, v1466, (llvm::Value *)1);
      v887 = v1466;
      v1506 = (uint64_t (**)())v1466;
      v888 = v724[271];
      v889 = v724[273].u32[0];
      if ((_DWORD)v889)
      {
        v904 = ((_DWORD)v889 - 1) & ((v747 >> 4) ^ (v747 >> 9));
        v890 = *(_QWORD *)&v888 + 32 * v904;
        v905 = *(_QWORD *)v890;
        if (v747 != *(_QWORD *)v890)
        {
          v906 = 1;
          while (v905 != -4096)
          {
            v907 = v904 + v906++;
            v904 = v907 & (v889 - 1);
            v905 = *(_QWORD *)(*(_QWORD *)&v888 + 32 * v904);
            if (v747 == v905)
            {
              v890 = *(_QWORD *)&v888 + 32 * v904;
              goto LABEL_1343;
            }
          }
          goto LABEL_1342;
        }
      }
      else
      {
LABEL_1342:
        v890 = *(_QWORD *)&v888 + 32 * v889;
      }
LABEL_1343:
      if (v890 != *(_QWORD *)&v888 + 32 * v889)
      {
        sub_1C56469C8((uint64_t)v1429, (uint64_t *)&v1506);
        v892 = *(uint64_t **)(v890 + 8);
        v893 = *(unsigned int *)(v890 + 16);
        if ((_DWORD)v893)
        {
          v894 = v891;
          v1390 = v891 + 8;
          v1396 = v890;
          v1383 = v891 + 24;
          v895 = 8 * v893;
          do
          {
            v896 = *v892;
            *(_QWORD *)&v1502 = 0;
            v897 = v1463;
            if ((sub_1C4DCDF60(*(_QWORD *)(v1463 + 2144), *(_DWORD *)(v1463 + 2160), v896, &v1502) & 1) != 0)
              v898 = v1502;
            else
              v898 = *(_QWORD *)(v897 + 2144) + 32 * *(unsigned int *)(v897 + 2160);
            *(_QWORD *)(v898 + 24) = v887;
            v899 = *(unsigned int *)(v894 + 16);
            v6 = v1431;
            if (v899 >= *(unsigned int *)(v894 + 20))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v1390, v1383, v899 + 1, 8);
              v899 = *(unsigned int *)(v894 + 16);
            }
            *(_QWORD *)(*(_QWORD *)(v894 + 8) + 8 * v899) = v896;
            ++*(_DWORD *)(v894 + 16);
            ++v892;
            v895 -= 8;
          }
          while (v895);
          v890 = v1396;
          v892 = *(uint64_t **)(v1396 + 8);
          v724 = (int32x2_t *)v1463;
        }
        v746 = v1461;
        if (v892 != (uint64_t *)(v890 + 24))
          free(v892);
        *(_QWORD *)v890 = -8192;
        v724[272] = vadd_s32(v724[272], (int32x2_t)0x1FFFFFFFFLL);
      }
      if (sub_1C5645B98((uint64_t)&v1485, v747))
      {
        v900 = (char *)v1488;
        v901 = v1489;
        v902 = (char *)&v1488[v1489];
        if ((_DWORD)v1489)
        {
          v903 = 8 * v1489;
          while (*(_QWORD *)v900 != v747)
          {
            v900 += 8;
            v903 -= 8;
            if (!v903)
            {
              v900 = (char *)&v1488[v1489];
              break;
            }
          }
        }
        if (v902 != v900 + 8)
        {
          memmove(v900, v900 + 8, v902 - (v900 + 8));
          v901 = v1489;
        }
        LODWORD(v1489) = v901 - 1;
      }
      sub_1C4774094((llvm::SmallPtrSetImplBase *)v1471, v747);
LABEL_1233:
      v745 = v724[520].u32[0];
      if (!(_DWORD)v745)
      {
LABEL_1384:
        if (v1471[1] == v1471[0])
          v913 = (uint64_t *)((char *)&v1472 + 4);
        else
          v913 = &v1472;
        v914 = *(unsigned int *)v913;
        if ((_DWORD)v914)
        {
          v915 = 8 * v914;
          v916 = (uint64_t *)v1471[1];
          v917 = (llvm::DataLayout *)v1441;
          while ((unint64_t)*v916 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v916;
            v915 -= 8;
            if (!v915)
              goto LABEL_1399;
          }
        }
        else
        {
          v916 = (uint64_t *)v1471[1];
          v917 = (llvm::DataLayout *)v1441;
        }
        v918 = (unint64_t *)((char *)v1471[1] + 8 * v914);
        if (v916 != (uint64_t *)v918)
        {
          v919 = *v916;
LABEL_1395:
          sub_1C5646024((uint64_t)v724, v919, v746);
          v920 = (unint64_t *)(v916 + 1);
          while (v920 != v918)
          {
            v921 = *v920++;
            v919 = v921;
            if (v921 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v916 = (uint64_t *)(v920 - 1);
              goto LABEL_1395;
            }
          }
        }
LABEL_1399:
        v922 = (_QWORD *)v1496;
        if ((_QWORD)v1496)
        {
          do
          {
            v923 = (_QWORD *)*v922;
            operator delete(v922);
            v922 = v923;
          }
          while (v923);
        }
        v924 = (void *)v1495;
        *(_QWORD *)&v1495 = 0;
        if (v924)
          operator delete(v924);
        if (v1471[1] != v1471[0])
          free(v1471[1]);
        v1471[0] = &v1472;
        v1471[1] = (void *)0x1000000000;
        v925 = v1489;
        if ((_DWORD)v1489)
        {
          v926 = v1488;
          v927 = &v1488[v1489];
          do
          {
            v928 = *v926;
            if (sub_1C5EA5854(*v926, (uint64_t)v917, *(int **)&v724[574], 1))
            {
              for (nn = *(_QWORD *)(v928 + 8); nn; nn = *(_QWORD *)(nn + 8))
              {
                v930 = *(_QWORD *)(nn + 24);
                if (v930 && *(_BYTE *)(v930 + 16) == 89)
                {
                  v931 = sub_1C477672C(v746 + 528, *(_QWORD *)(nn + 24));
                  v932 = *(_QWORD *)(v746 + 536);
                  v933 = (unsigned int *)(v932 == *(_QWORD *)(v746 + 528) ? v746 + 548 : v746 + 544);
                  if (v931 == (_QWORD *)(v932 + 8 * *v933))
                  {
                    v934 = LODWORD(v1471[1]);
                    if (LODWORD(v1471[1]) >= (unint64_t)HIDWORD(v1471[1]))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1471, (uint64_t)&v1472, LODWORD(v1471[1]) + 1, 8);
                      v934 = LODWORD(v1471[1]);
                    }
                    *((_QWORD *)v1471[0] + v934) = v930;
                    ++LODWORD(v1471[1]);
                  }
                }
              }
            }
            ++v926;
          }
          while (v926 != v927);
          v935 = (uint64_t *)v1471[0];
          v925 = (int)v1471[1];
        }
        else
        {
          v935 = &v1472;
        }
        sub_1C5644C6C(&v1485, v935, &v935[v925]);
        if (v1471[0] != &v1472)
          free(v1471[0]);
        v1471[0] = &v1472;
        v1471[1] = (void *)0xA00000000;
        v936 = (uint64_t)v724[574];
        v937 = *(_DWORD *)v936;
        if (*(_DWORD *)v936 <= 1u)
        {
          if (v937)
          {
            v1178 = v936 + 8;
            v1179 = 16;
          }
          else
          {
            v1178 = *(_QWORD *)(v936 + 8);
            v1179 = *(unsigned int *)(v936 + 16);
          }
          v940 = v1178 + 32 * v1179;
          v939 = v940;
          goto LABEL_1432;
        }
        if ((v937 & 1) != 0)
        {
          v938 = v936 + 8;
          v939 = v936 + 520;
LABEL_1427:
          v937 = *(_DWORD *)v936 & 1;
          v940 = v938;
          while (*(_QWORD *)v940 == -4096 || *(_QWORD *)v940 == -8192)
          {
            v940 += 32;
            if (v940 == v939)
            {
              v940 = v939;
              break;
            }
          }
LABEL_1432:
          if (v937)
          {
            v938 = v936 + 8;
            v936 = 16;
            goto LABEL_1436;
          }
          v938 = *(_QWORD *)(v936 + 8);
          LODWORD(v936) = *(_DWORD *)(v936 + 16);
        }
        else
        {
          v938 = *(_QWORD *)(v936 + 8);
          v1348 = *(unsigned int *)(v936 + 16);
          if ((_DWORD)v1348)
          {
            v939 = v938 + 32 * v1348;
            goto LABEL_1427;
          }
          LODWORD(v936) = 0;
          v939 = v938;
          v940 = v938;
        }
        v936 = v936;
LABEL_1436:
        v1448 = v938 + 32 * v936;
        if (v940 != v1448)
        {
          v1432 = v1463 + 16;
          v941 = v1380;
          do
          {
            v942 = *(_QWORD *)v940;
            for (i1 = *(_QWORD *)(*(_QWORD *)v940 + 8); i1; i1 = *(_QWORD *)(i1 + 8))
            {
              v944 = *(_QWORD *)(i1 + 24);
              if (v944)
              {
                if (*(_BYTE *)(v944 + 16) == 60 && *(_QWORD *)(*(_QWORD *)(v944 + 40) + 56) == v941)
                {
                  v945 = *(_QWORD *)(v944 + 8);
                  if (v945)
                  {
                    v946 = v1471[1];
                    do
                    {
                      v947 = *(_QWORD *)(v945 + 24);
                      if (v946 >= HIDWORD(v1471[1]))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1471, (uint64_t)&v1472, v946 + 1, 16);
                        v941 = v1380;
                        v946 = v1471[1];
                      }
                      v948 = (char *)v1471[0] + 16 * v946;
                      *v948 = v947;
                      v948[1] = 0;
                      v946 = ++LODWORD(v1471[1]);
                      v945 = *(_QWORD *)(v945 + 8);
                    }
                    while (v945);
                  }
                }
              }
            }
            *(_QWORD *)&v1495 = &v1497;
            *((_QWORD *)&v1495 + 1) = &v1497;
            *(_QWORD *)&v1496 = 16;
            DWORD2(v1496) = 0;
            v949 = v1471[1];
            if (LODWORD(v1471[1]))
            {
              while (1)
              {
                v950 = (char *)v1471[0] + 16 * v949;
                v952 = *((_QWORD *)v950 - 2);
                v951 = *((_QWORD *)v950 - 1);
                LODWORD(v1471[1]) = v949 - 1;
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1495, v952);
                if (v953)
                {
                  if (v952 && *(_BYTE *)(v952 + 16) == 62)
                  {
                    v954 = sub_1C5EA708C(v952, v917);
                    if ((v954 & 0xFFFF00000000) != 0)
                      v955 = 0;
                    else
                      v955 = v954;
                    if ((v954 & 0xFFFF00000000) != 0)
                      goto LABEL_1474;
                    LODWORD(v951) = v955 + v951;
                  }
                  else if (sub_1C5EA5854(v952, (uint64_t)v917, *(int **)(v1463 + 4592), 1))
                  {
                    v956 = *(llvm::Type **)v952;
                    if (sub_1C5646CB4(*(_QWORD *)v952))
                    {
                      LODWORD(v957) = llvm::DataLayout::getPointerTypeSizeInBits((uint64_t)v917, (uint64_t)v956) >> 3;
                    }
                    else
                    {
                      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v956);
                      if ((_DWORD)v961 == 1)
                      v957 = PrimitiveSizeInBits >> 3;
                    }
                    *(_QWORD *)&v1502 = v942;
                    *((_QWORD *)&v1502 + 1) = v952;
                    v1503[0] = v951;
                    v1503[1] = v957;
                    v963 = *(unsigned int *)(v1463 + 8);
                    v964 = *(_QWORD *)v1463;
                    if (v963 >= *(_DWORD *)(v1463 + 12))
                    {
                      v969 = v963 + 1;
                      v970 = v964 + 24 * v963 > (unint64_t)&v1502;
                      if (v964 > (unint64_t)&v1502 || !v970)
                      {
                        v971 = (unint64_t *)v1463;
                        llvm::SmallVectorBase<unsigned int>::grow_pod(v1463, v1432, v969, 24);
                        v964 = *v971;
                        goto LABEL_1472;
                      }
                      v972 = (char *)&v1503[-4] - v964;
                      v973 = (unint64_t *)v1463;
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v1463, v1432, v969, 24);
                      v964 = *v973;
                      v965 = &v972[*v973];
                    }
                    else
                    {
LABEL_1472:
                      v965 = (char *)&v1502;
                    }
                    v966 = v1463;
                    v967 = v964 + 24 * *(unsigned int *)(v1463 + 8);
                    v968 = *(_OWORD *)v965;
                    *(_QWORD *)(v967 + 16) = *((_QWORD *)v965 + 2);
                    *(_OWORD *)v967 = v968;
                    ++*(_DWORD *)(v966 + 8);
                    goto LABEL_1474;
                  }
                  v958 = *(_QWORD *)(v952 + 8);
                  if (v958)
                  {
                    v949 = v1471[1];
                    do
                    {
                      v959 = *(_QWORD *)(v958 + 24);
                      if (v949 >= HIDWORD(v1471[1]))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1471, (uint64_t)&v1472, v949 + 1, 16);
                        v949 = v1471[1];
                      }
                      v960 = (char *)v1471[0] + 16 * v949;
                      *v960 = v959;
                      v960[1] = v951;
                      v949 = ++LODWORD(v1471[1]);
                      v958 = *(_QWORD *)(v958 + 8);
                    }
                    while (v958);
                    goto LABEL_1475;
                  }
                }
LABEL_1474:
                v949 = v1471[1];
LABEL_1475:
                if (!v949)
                {
                  if (*((_QWORD *)&v1495 + 1) != (_QWORD)v1495)
                    free(*((void **)&v1495 + 1));
                  break;
                }
              }
            }
            v974 = v940 + 32;
            v940 = v939;
            if (v974 != v939)
            {
              v940 = v974;
              while ((*(_QWORD *)v940 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v940 += 32;
                if (v940 == v939)
                {
                  v940 = v939;
                  break;
                }
              }
            }
            v941 = v1380;
          }
          while (v940 != v1448);
          if (v1471[0] != &v1472)
            free(v1471[0]);
        }
        v975 = v1463;
        v976 = *(unsigned int *)(v1463 + 8);
        v977 = 126 - 2 * __clz(v976);
        if ((_DWORD)v976)
          v978 = v977;
        else
          v978 = 0;
        sub_1C56474D0(*(_QWORD *)v1463, *(_QWORD *)v1463 + 24 * v976, v978, 1);
        LODWORD(v1465) = 0;
        v980 = *(_DWORD *)(v975 + 8);
        if (v980)
        {
          v981 = 0;
          v982 = 0;
          v983 = 0;
          v984 = 0;
          v985 = 0;
          v986 = *(uint64_t **)v975;
          v987 = *(_QWORD *)v975 + 24 * v980;
          v988 = v1485 | (v1487 != 0);
          if ((v1485 & 1) != 0)
            v989 = &v1486;
          else
            v989 = v1486;
          if ((v1485 & 1) != 0)
            v990 = 31;
          else
            v990 = v1487 - 1;
          v1449 = *(_QWORD *)v975 + 24 * v980;
          while (1)
          {
            v992 = *v986;
            v991 = (llvm::Type **)v986[1];
            v993 = *((_DWORD *)v986 + 4);
            if (v983 != *v986 || v981 != v993)
            {
              v995 = *v991;
              if ((*((_DWORD *)*v991 + 2) & 0xFE) == 0x12)
                v995 = (llvm::Type *)**((_QWORD **)v995 + 2);
              v979.i32[0] = v984;
              v996 = (uint8x8_t)vcnt_s8(v979);
              v996.i16[0] = vaddlv_u8(v996);
              v997 = v982 + ((v996.i32[0] * v985) >> 4);
              v998 = llvm::Type::getPrimitiveSizeInBits(v995);
              v982 = v997;
              v984 = 0;
              v985 = (v998 + 15) >> 4;
              v983 = v992;
              v981 = v993;
              v987 = v1449;
            }
            v999 = v991[1];
            if (v999)
              break;
            LODWORD(v1006) = 0;
LABEL_1532:
            v984 |= v1006;
            v986 += 3;
            if (v986 == (uint64_t *)v987)
              goto LABEL_1535;
          }
          v1000 = 0;
          while (2)
          {
            v1001 = *((_QWORD *)v999 + 3);
            if ((v988 & 1) != 0)
            {
              v1002 = ((v1001 >> 4) ^ (v1001 >> 9)) & v990;
              v1003 = v989[v1002];
              if (v1001 != v1003)
              {
                v1004 = 1;
                while (v1003 != -4096)
                {
                  v1005 = v1002 + v1004++;
                  v1002 = v1005 & v990;
                  v1003 = v989[v1002];
                  if (v1001 == v1003)
                    goto LABEL_1516;
                }
                goto LABEL_1517;
              }
LABEL_1516:
              v1006 = v1000;
            }
            else
            {
LABEL_1517:
              v1007 = *(_BYTE *)(v1001 + 16) != 89 || v1001 == 0;
              v1006 = ~(-1 << (*((_DWORD *)v986 + 5) >> 4));
              if (!v1007)
              {
                v1008 = *(_QWORD *)(v1001 - 32);
                v1009 = v1008 && *(_BYTE *)(v1008 + 16) == 16;
                v1006 = ~(-1 << (*((_DWORD *)v986 + 5) >> 4));
                if (v1009)
                {
                  v1010 = (_QWORD *)(v1008 + 24);
                  if (*(_DWORD *)(v1008 + 32) >= 0x41u)
                    v1010 = (_QWORD *)*v1010;
                  v1006 = (1 << *(_DWORD *)v1010) | v1000;
                }
              }
            }
            v999 = (llvm::Type *)*((_QWORD *)v999 + 1);
            v1000 = v1006;
            if (!v999)
              goto LABEL_1532;
            continue;
          }
        }
        v985 = 0;
        v984 = 0;
        v982 = 0;
LABEL_1535:
        v1450 = (v1373 >> 1) & ~(v1373 >> 31);
        v979.i32[0] = v984;
        v1011 = (uint8x8_t)vcnt_s8(v979);
        v1011.i16[0] = vaddlv_u8(v1011);
        LODWORD(v1465) = v982 + ((v1011.i32[0] * v985) >> 4);
        v1464 = 0;
        while (2)
        {
          v1012 = v1489;
          if (!(_DWORD)v1489)
          {
            v1471[0] = &v1472;
            v1471[1] = (void *)0x1000000000;
            v1054 = &v1472;
            v1045 = v1463;
            goto LABEL_1606;
          }
          v1013 = 0;
          v1014 = v1488;
          v1015 = (char *)&v1488[v1489];
          while (2)
          {
            v1016 = *v1014;
            v1017 = sub_1C477672C((uint64_t)v1458, *v1014);
            v1018 = *(_QWORD *)(v1463 + 1864);
            if (v1018 == *(_QWORD *)(v1463 + 1856))
              v1019 = 1876;
            else
              v1019 = 1872;
            if (v1017 == (_QWORD *)(v1018 + 8 * *(unsigned int *)(v1463 + v1019)))
            {
              v1020 = *(_QWORD *)(v1016 + 8);
              if (v1020)
              {
                v1021 = v1486;
                v1022 = v1487 - 1;
                if ((v1485 & 1) != 0)
                {
                  v1021 = &v1486;
                  v1022 = 31;
                  goto LABEL_1546;
                }
                if (v1487)
                {
LABEL_1546:
                  while (1)
                  {
                    v1023 = *(_QWORD *)(v1020 + 24);
                    v1024 = ((v1023 >> 4) ^ (v1023 >> 9)) & v1022;
                    v1025 = v1021[v1024];
                    if (v1023 != v1025)
                      break;
LABEL_1550:
                    v1020 = *(_QWORD *)(v1020 + 8);
                    if (!v1020)
                      goto LABEL_1570;
                  }
                  v1026 = 1;
                  while (v1025 != -4096)
                  {
                    v1027 = v1024 + v1026++;
                    v1024 = v1027 & v1022;
                    v1025 = v1021[v1024];
                    if (v1023 == v1025)
                      goto LABEL_1550;
                  }
                }
                if ((sub_1C56462AC(v1463, v1016, (uint64_t)v917, &v1480) & 1) == 0)
                {
                  v1028 = v1013;
                  v1029 = *(_DWORD *)(v1016 + 20);
                  if ((v1029 & 0x40000000) != 0)
                  {
                    v1031 = *(uint64_t **)(v1016 - 8);
                    v1030 = v1029 & 0x7FFFFFF;
                    if (!v1030)
                      goto LABEL_1568;
                  }
                  else
                  {
                    v1030 = v1029 & 0x7FFFFFF;
                    v1031 = (uint64_t *)(v1016 - 32 * v1030);
                    if (!v1030)
                    {
LABEL_1568:
                      sub_1C4774094(v1458, v1016);
                      v1013 = 1;
                      goto LABEL_1570;
                    }
                  }
                  v1032 = 32 * v1030;
                  while (1)
                  {
                    if (*v1031 && *(unsigned __int8 *)(*v1031 + 16) >= 0x1Cu)
                    {
                      v1034 = sub_1C477672C((uint64_t)v1458, *v1031);
                      v1035 = *(_QWORD *)(v1463 + 1864);
                      v1036 = v1035 == *(_QWORD *)(v1463 + 1856) ? 1876 : 1872;
                      if (v1034 == (_QWORD *)(v1035 + 8 * *(unsigned int *)(v1463 + v1036)))
                        break;
                    }
                    v1031 += 4;
                    v1032 -= 32;
                    if (!v1032)
                      goto LABEL_1568;
                  }
                  v1013 = v1028;
                }
              }
LABEL_1570:
              v1037 = *(_QWORD *)v1016;
              if (*(_BYTE *)(*(_QWORD *)v1016 + 8) == 16)
              {
                v1038 = *(unsigned int *)(v1037 + 12);
                if ((_DWORD)v1038)
                {
                  v1039 = *(_QWORD *)(v1037 + 16);
                  while (1)
                  {
                    v1040 = *(_DWORD *)(*(_QWORD *)v1039 + 8) >> 8;
                    v1041 = v1040 == 32 || v1040 == 64;
                    v1042 = v1041;
                    if (*(_DWORD *)(*(_QWORD *)v1039 + 8) != 13 || !v1042)
                      break;
                    v1039 += 8;
                    if (!--v1038)
                      goto LABEL_1586;
                  }
                  sub_1C4774094(v1458, v1016);
                  v1013 = 1;
                }
              }
            }
LABEL_1586:
            if (++v1014 != (uint64_t *)v1015)
              continue;
            break;
          }
          if ((v1013 & 1) != 0)
            continue;
          break;
        }
        v1044 = v1488;
        v1012 = v1489;
        v1471[0] = &v1472;
        v1471[1] = (void *)0x1000000000;
        v1045 = v1463;
        if ((_DWORD)v1489)
        {
          v1046 = &v1488[v1489];
          do
          {
            v1047 = *v1044;
            if (*(_BYTE *)(*v1044 + 16) == 62)
            {
              v1048 = sub_1C477672C((uint64_t)v1458, *v1044);
              v1049 = *(_QWORD *)(v1045 + 1864);
              v1050 = v1049 == *(_QWORD *)(v1045 + 1856) ? 1876 : 1872;
              if (v1048 == (_QWORD *)(v1049 + 8 * *(unsigned int *)(v1045 + v1050)))
              {
                for (i2 = *(_QWORD *)(v1047 + 8); i2; i2 = *(_QWORD *)(i2 + 8))
                {
                  v1052 = *(_QWORD *)(i2 + 24);
                  if (sub_1C5EA5854(v1052, (uint64_t)v917, *(int **)(v1045 + 4592), 1))
                  {
                    v1053 = LODWORD(v1471[1]);
                    if (LODWORD(v1471[1]) >= (unint64_t)HIDWORD(v1471[1]))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1471, (uint64_t)&v1472, LODWORD(v1471[1]) + 1, 8);
                      v1053 = LODWORD(v1471[1]);
                    }
                    *((_QWORD *)v1471[0] + v1053) = v1052;
                    ++LODWORD(v1471[1]);
                  }
                }
              }
            }
            ++v1044;
          }
          while (v1044 != v1046);
          v1054 = (uint64_t *)v1471[0];
          v1012 = (int)v1471[1];
        }
        else
        {
          v1054 = &v1472;
        }
LABEL_1606:
        sub_1C5644C6C(&v1485, v1054, &v1054[v1012]);
        if (v1471[0] != &v1472)
          free(v1471[0]);
        v1055 = *(_QWORD *)(v1045 + 4576);
        v1056 = *(_QWORD *)(v1045 + 4568);
        if (v1055 != v1056)
        {
          v1057 = (_BYTE *)(v1463 + 784);
          v1058 = v1463 + 792;
          v1059 = v1463 + 1048;
          v1438 = v1463 + 1064;
          do
          {
            v1060 = *(_QWORD *)(v1055 - 8);
            v1055 -= 8;
            v1061 = v1060 + 40;
            for (i3 = *(_QWORD *)(v1060 + 48); i3 != v1061; i3 = *(_QWORD *)(i3 + 8))
            {
              v1063 = (void *)(i3 - 24);
              if (!i3)
                v1063 = 0;
              if ((v1485 & 1) != 0)
              {
                v1064 = 32;
                v1065 = &v1486;
              }
              else
              {
                v1064 = v1487;
                if (!v1487)
                  continue;
                v1065 = v1486;
              }
              v1066 = (v1063 >> 4) ^ (v1063 >> 9);
              v1067 = v1064 - 1;
              v1068 = v1067 & v1066;
              v1069 = (void *)v1065[v1067 & v1066];
              if (v1063 == v1069)
              {
LABEL_1622:
                v1471[0] = v1063;
                if ((*v1057 & 1) != 0)
                {
                  v1072 = 32;
                  v1073 = v1058;
LABEL_1625:
                  v1074 = v1072 - 1;
                  v1075 = v1074 & v1066;
                  v1076 = (_QWORD *)(v1073 + 8 * v1075);
                  v1077 = (void *)*v1076;
                  if (v1063 == (void *)*v1076)
                    continue;
                  v1078 = 0;
                  v1079 = 1;
                  while (v1077 != (void *)-4096)
                  {
                    if (v1078)
                      v1080 = 0;
                    else
                      v1080 = v1077 == (void *)-8192;
                    if (v1080)
                      v1078 = v1076;
                    v1081 = v1075 + v1079++;
                    v1075 = v1081 & v1074;
                    v1076 = (_QWORD *)(v1073 + 8 * v1075);
                    v1077 = (void *)*v1076;
                    if (v1063 == (void *)*v1076)
                      goto LABEL_1641;
                  }
                  if (v1078)
                    v1082 = v1078;
                  else
                    v1082 = v1076;
                }
                else
                {
                  v1072 = *(_DWORD *)(v1463 + 800);
                  if (v1072)
                  {
                    v1073 = *(_QWORD *)(v1463 + 792);
                    goto LABEL_1625;
                  }
                  v1082 = 0;
                }
                v1083 = (void **)sub_1C5646E98((uint64_t)v1057, (uint64_t)v1471, v1471, v1082);
                *v1083 = v1471[0];
                v1084 = v1471[0];
                v1085 = *(unsigned int *)(v1463 + 1056);
                if (v1085 >= *(unsigned int *)(v1463 + 1060))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v1059, v1438, v1085 + 1, 8);
                  v1085 = *(unsigned int *)(v1463 + 1056);
                }
                v1086 = v1463;
                *(_QWORD *)(*(_QWORD *)(v1463 + 1048) + 8 * v1085) = v1084;
                ++*(_DWORD *)(v1086 + 1056);
                continue;
              }
              v1070 = 1;
              while (v1069 != (void *)-4096)
              {
                v1071 = v1068 + v1070++;
                v1068 = v1071 & v1067;
                v1069 = (void *)v1065[v1068];
                if (v1063 == v1069)
                  goto LABEL_1622;
              }
LABEL_1641:
              ;
            }
          }
          while (v1055 != v1056);
        }
        sub_1C56485E0(&v1485);
        LODWORD(v1489) = 0;
        v1087 = (_QWORD *)(v1463 + 784);
        v1088 = *(unsigned int *)(v1463 + 1056);
        if ((_DWORD)v1088)
        {
          v1089 = v1463 + 3456;
          v1090 = v1463 + 3296;
          v1091 = 8 * v1088;
          v1092 = *(_QWORD *)(v1463 + 1048) - 8;
          v1093 = (_QWORD *)v1463;
          do
          {
            v1094 = *(_QWORD *)(v1092 + v1091);
            v1095 = sub_1C477672C((uint64_t)v1458, v1094);
            v1096 = v1093[233];
            if (v1096 == v1093[232])
              v1097 = 1876;
            else
              v1097 = 1872;
            if (v1095 == (_QWORD *)(v1096 + 8 * *(unsigned int *)((char *)v1093 + v1097)))
            {
              v1104 = sub_1C477672C(v1090, v1094);
              v1105 = v1093[413];
              v1106 = 3316;
              if (v1105 != v1093[412])
                v1106 = 3312;
              if (v1104 != (_QWORD *)(v1105 + 8 * *(unsigned int *)((char *)v1093 + v1106))
                && (sub_1C5644DB8(v1463, *(_QWORD *)(v1094 + 8), (uint64_t)v1087, v1458, 0) & 1) == 0)
              {
                sub_1C4774094(v1458, v1094);
              }
            }
            else if (*(unsigned __int8 *)(v1094 + 16) - 29 >= 0xB)
            {
              v1098 = sub_1C477672C(v1089, v1094);
              v1099 = *(_QWORD *)(v1463 + 3464);
              v1100 = 3472;
              if (v1099 == *(_QWORD *)(v1463 + 3456))
                v1100 = 3476;
              if (v1098 == (_QWORD *)(v1099 + 8 * *(unsigned int *)(v1463 + v1100))
                && sub_1C5644DB8(v1463, *(_QWORD *)(v1094 + 8), (uint64_t)v1087, v1458, 0))
              {
                v1101 = sub_1C477672C((uint64_t)v1458, v1094);
                v1102 = *(_QWORD *)(v1463 + 1864);
                v1103 = v1102 == *(_QWORD *)(v1463 + 1856) ? 1876 : 1872;
                if (v1101 != (_QWORD *)(v1102 + 8 * *(unsigned int *)(v1463 + v1103)))
                {
                  *v1101 = -2;
                  ++*(_DWORD *)(v1463 + 1880);
                }
              }
            }
            v1091 -= 8;
          }
          while (v1091);
          v1107 = *(unsigned int *)(v1463 + 1056);
          if ((_DWORD)v1107)
          {
            v1108 = *(uint64_t **)(v1463 + 1048);
            v1109 = &v1108[v1107];
            v1110 = (_BYTE *)(v1463 + 1320);
            v1111 = v1463 + 1328;
            v1112 = v1463 + 1584;
            v1113 = v1463 + 1600;
            do
            {
              v1114 = (void *)*v1108;
              if (sub_1C5644F68(v1463, *v1108, (uint64_t)v1087, v1458, 0))
              {
                v1471[0] = v1114;
                if ((*v1110 & 1) != 0)
                {
                  v1115 = 32;
                  v1116 = v1111;
                }
                else
                {
                  v1115 = *(_DWORD *)(v1463 + 1336);
                  if (!v1115)
                  {
                    v1125 = 0;
LABEL_1687:
                    v1126 = (void **)sub_1C4993C28((uint64_t)v1110, (uint64_t)v1471, v1471, v1125);
                    *v1126 = v1471[0];
                    v1127 = v1471[0];
                    v1128 = *(unsigned int *)(v1463 + 1592);
                    if (v1128 >= *(unsigned int *)(v1463 + 1596))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v1112, v1113, v1128 + 1, 8);
                      v1128 = *(unsigned int *)(v1463 + 1592);
                    }
                    v1129 = v1463;
                    *(_QWORD *)(*(_QWORD *)(v1463 + 1584) + 8 * v1128) = v1127;
                    ++*(_DWORD *)(v1129 + 1592);
                    goto LABEL_1690;
                  }
                  v1116 = *(_QWORD *)(v1463 + 1328);
                }
                v1117 = v1115 - 1;
                v1118 = v1117 & ((v1114 >> 4) ^ (v1114 >> 9));
                v1119 = (_QWORD *)(v1116 + 8 * v1118);
                v1120 = (void *)*v1119;
                if (v1114 != (void *)*v1119)
                {
                  v1121 = 0;
                  v1122 = 1;
                  while (v1120 != (void *)-4096)
                  {
                    if (v1121)
                      v1123 = 0;
                    else
                      v1123 = v1120 == (void *)-8192;
                    if (v1123)
                      v1121 = v1119;
                    v1124 = v1118 + v1122++;
                    v1118 = v1124 & v1117;
                    v1119 = (_QWORD *)(v1116 + 8 * v1118);
                    v1120 = (void *)*v1119;
                    if (v1114 == (void *)*v1119)
                      goto LABEL_1690;
                  }
                  if (v1121)
                    v1125 = v1121;
                  else
                    v1125 = v1119;
                  goto LABEL_1687;
                }
              }
LABEL_1690:
              ++v1108;
            }
            while (v1108 != v1109);
          }
        }
        v1130 = v1463;
        v1439 = v1463 + 1584;
        v1131 = *(unsigned int *)(v1463 + 1592);
        if ((_DWORD)v1131)
        {
          v1132 = *(uint64_t ***)(v1463 + 1584);
          v1133 = &v1132[v1131];
          v1134 = v1461;
          do
          {
            v1135 = *v1132;
            v1136 = 8 * sub_1C5645068(**v1132, v1441) + 15;
            v1137 = v1465 + (v1136 >> 4);
            LODWORD(v1465) = v1137;
            if (*((unsigned __int8 *)v1135 + 16) <= 0x1Bu)
              v1138 = 0;
            else
              v1138 = v1135;
            v1139 = *(_DWORD *)(v1130 + 2184);
            if (v1139)
            {
              v1140 = *(_QWORD *)(v1130 + 2168);
              v1141 = v1139 - 1;
              v1142 = ((v1138 >> 4) ^ (v1138 >> 9)) & v1141;
              v1143 = *(uint64_t **)(v1140 + 32 * v1142);
              if (v1138 == v1143)
              {
LABEL_1705:
                v1464 += v1136 >> 4;
              }
              else
              {
                v1144 = 1;
                while (v1143 != (uint64_t *)-4096)
                {
                  v1145 = v1142 + v1144++;
                  v1142 = v1145 & v1141;
                  v1143 = *(uint64_t **)(v1140 + 32 * v1142);
                  if (v1138 == v1143)
                    goto LABEL_1705;
                }
              }
            }
            ++v1132;
          }
          while (v1132 != v1133);
        }
        else
        {
          v1137 = v1465;
          v1134 = v1461;
        }
        v1462 = (_QWORD *)(v1130 + 1320);
        v1471[0] = &v1474;
        v1471[1] = &v1474;
        v1472 = 32;
        v1473 = 0;
        v1146 = v1380;
        if (v1137 <= v1374)
        {
          v1147 = v1464;
          if (v1464 <= v1450)
          {
LABEL_1864:
            *(_DWORD *)(v1130 + 4640) = 2 * v1374;
            if (v1137 > v1374 || v1147 > v1450)
            {
              sub_1C56485E0(v1087);
              *(_DWORD *)(v1130 + 1056) = 0;
              sub_1C5648834(v1462);
              *(_DWORD *)(v1130 + 1592) = 0;
              v1237 = *(void **)(v1130 + 2232);
              if (v1237 == *(void **)(v1130 + 2224))
              {
LABEL_1869:
                *(_QWORD *)(v1130 + 2244) = 0;
                goto LABEL_2048;
              }
              v1347 = *(unsigned int *)(v1130 + 2240);
              if (v1347 < 0x21
                || 4 * (*(_DWORD *)(v1130 + 2244) - *(_DWORD *)(v1130 + 2248)) >= v1347)
              {
                memset(v1237, 255, 8 * v1347);
                goto LABEL_1869;
              }
              free(v1237);
              v1358 = *(_DWORD *)(v1130 + 2244) - *(_DWORD *)(v1130 + 2248);
              v1359 = 1 << (33 - __clz(v1358 - 1));
              if (v1358 <= 0x10)
                v1360 = 32;
              else
                v1360 = v1359;
              *(_DWORD *)(v1130 + 2240) = v1360;
              *(_QWORD *)v1372 = 0;
              v1361 = malloc_type_malloc(8 * v1360, 0x4065EBACuLL);
              if (v1361)
              {
                *(_QWORD *)(v1130 + 2232) = v1361;
                memset(v1361, 255, 8 * *(unsigned int *)(v1130 + 2240));
                goto LABEL_2048;
              }
LABEL_2080:
              llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
            }
            if (!*(_DWORD *)(v1130 + 1056)
              || (*(_BYTE *)(v1372 + 2400) = 1, !byte_1ED808B68)
              || !*(_BYTE *)(v1372 + 2408)
              || (v1238 = *(uint64_t **)(v1146 + 40),
                  *(_QWORD *)&v1502 = v1503,
                  *((_QWORD *)&v1502 + 1) = 0x400000000,
                  v1239 = *(unsigned int *)(v1130 + 1592),
                  !(_DWORD)v1239))
            {
LABEL_2048:
              if (v1471[1] != v1471[0])
                free(v1471[1]);
LABEL_2050:
              if ((uint64_t *)v1481 != v1480)
                free((void *)v1481);
              goto LABEL_2052;
            }
            v1240 = *(unsigned __int8 ***)(v1130 + 1584);
            v1425 = v1130 + 1048;
            v1452 = v1130 + 1328;
            v1460 = (llvm::SmallPtrSetImplBase *)&v1240[v1239];
            v1430 = (llvm::SmallPtrSetImplBase *)v1238;
            while (1)
            {
              v1241 = *v1240;
              v1491 = *v1240;
              if ((*(_BYTE *)v1462 & 1) != 0)
                break;
              v1242 = *(_DWORD *)(v1130 + 1336);
              if (v1242)
              {
                v1243 = *(_QWORD *)(v1130 + 1328);
                goto LABEL_1879;
              }
LABEL_1970:
              if (++v1240 == (unsigned __int8 **)v1460)
              {
                v1295 = (uint64_t *)v1502;
                if (!DWORD2(v1502))
                {
LABEL_2046:
                  if (v1295 != (uint64_t *)v1503)
                    free(v1295);
                  goto LABEL_2048;
                }
                v1296 = v1130;
                v1297 = v1130 + 1600;
                v1298 = v1296 + 792;
                v1299 = v1296 + 1064;
                v1300 = (uint64_t *)(v1502 + 16 * DWORD2(v1502));
                while (2)
                {
                  v1301 = v1295 + 1;
                  if ((*(_BYTE *)v1462 & 1) != 0)
                  {
                    v1302 = 32;
                    v1303 = v1452;
LABEL_1977:
                    v1304 = *v1301;
                    v1305 = v1302 - 1;
                    v1306 = ((*v1301 >> 4) ^ (*v1301 >> 9)) & v1305;
                    v1307 = (_QWORD *)(v1303 + 8 * v1306);
                    v1308 = *v1307;
                    if (*v1301 != *v1307)
                    {
                      v1309 = 0;
                      v1310 = 1;
                      while (v1308 != -4096)
                      {
                        if (v1309)
                          v1311 = 0;
                        else
                          v1311 = v1308 == -8192;
                        if (v1311)
                          v1309 = v1307;
                        v1312 = v1306 + v1310++;
                        v1306 = v1312 & v1305;
                        v1307 = (_QWORD *)(v1303 + 8 * v1306);
                        v1308 = *v1307;
                        if (v1304 == *v1307)
                          goto LABEL_1993;
                      }
                      if (v1309)
                        v1313 = v1309;
                      else
                        v1313 = v1307;
                      goto LABEL_1990;
                    }
                  }
                  else
                  {
                    v1302 = *(_DWORD *)(v1463 + 1336);
                    if (v1302)
                    {
                      v1303 = *(_QWORD *)(v1463 + 1328);
                      goto LABEL_1977;
                    }
                    v1313 = 0;
LABEL_1990:
                    *sub_1C4993C28((uint64_t)v1462, (uint64_t)(v1295 + 1), v1295 + 1, v1313) = *v1301;
                    v1314 = *v1301;
                    v1315 = *(unsigned int *)(v1463 + 1592);
                    if (v1315 >= *(unsigned int *)(v1463 + 1596))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v1439, v1297, v1315 + 1, 8);
                      v1315 = *(unsigned int *)(v1463 + 1592);
                    }
                    v1316 = v1463;
                    *(_QWORD *)(*(_QWORD *)(v1463 + 1584) + 8 * v1315) = v1314;
                    ++*(_DWORD *)(v1316 + 1592);
                    v1304 = *v1301;
                  }
LABEL_1993:
                  if (*(unsigned __int8 *)(v1304 + 16) <= 0x1Bu)
                    v1304 = 0;
                  *(_QWORD *)&v1495 = v1304;
                  if ((*(_BYTE *)v1087 & 1) != 0)
                  {
                    v1317 = 32;
                    v1318 = v1298;
LABEL_1998:
                    v1319 = v1317 - 1;
                    v1320 = v1319 & ((v1304 >> 4) ^ (v1304 >> 9));
                    v1321 = (_QWORD *)(v1318 + 8 * v1320);
                    v1322 = *v1321;
                    if (v1304 != *v1321)
                    {
                      v1323 = 0;
                      v1324 = 1;
                      while (v1322 != -4096)
                      {
                        if (v1323)
                          v1325 = 0;
                        else
                          v1325 = v1322 == -8192;
                        if (v1325)
                          v1323 = v1321;
                        v1326 = v1320 + v1324++;
                        v1320 = v1326 & v1319;
                        v1321 = (_QWORD *)(v1318 + 8 * v1320);
                        v1322 = *v1321;
                        if (v1304 == *v1321)
                          goto LABEL_2014;
                      }
                      if (v1323)
                        v1327 = v1323;
                      else
                        v1327 = v1321;
                      goto LABEL_2011;
                    }
                  }
                  else
                  {
                    v1317 = *(_DWORD *)(v1463 + 800);
                    if (v1317)
                    {
                      v1318 = *(_QWORD *)(v1463 + 792);
                      goto LABEL_1998;
                    }
                    v1327 = 0;
LABEL_2011:
                    v1328 = sub_1C5646E98((uint64_t)v1087, (uint64_t)&v1495, &v1495, v1327);
                    *v1328 = v1495;
                    v1329 = v1495;
                    v1330 = *(unsigned int *)(v1463 + 1056);
                    if (v1330 >= *(unsigned int *)(v1463 + 1060))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v1425, v1299, v1330 + 1, 8);
                      v1330 = *(unsigned int *)(v1463 + 1056);
                    }
                    v1331 = v1463;
                    *(_QWORD *)(*(_QWORD *)(v1463 + 1048) + 8 * v1330) = v1329;
                    ++*(_DWORD *)(v1331 + 1056);
                  }
LABEL_2014:
                  v1332 = *v1295;
                  if ((*(_BYTE *)v1462 & 1) == 0)
                  {
                    v1333 = *(_DWORD *)(v1463 + 1336);
                    if (v1333)
                    {
                      v1334 = *(_QWORD *)(v1463 + 1328);
LABEL_2018:
                      v1335 = v1333 - 1;
                      LODWORD(v1336) = (v1333 - 1) & ((v1332 >> 4) ^ (v1332 >> 9));
                      v1337 = (uint64_t *)(v1334 + 8 * v1336);
                      v1338 = *v1337;
                      if (*v1337 == v1332)
                      {
LABEL_2023:
                        *v1337 = -8192;
                        v1341 = v1463;
                        *(_DWORD *)(v1463 + 1320) -= 2;
                        ++*(_DWORD *)(v1341 + 1324);
                        v1342 = *(_QWORD **)(v1341 + 1584);
                        v1343 = *(unsigned int *)(v1341 + 1592);
                        v1344 = &v1342[v1343];
                        if ((_DWORD)v1343)
                        {
                          v1345 = 8 * v1343;
                          while (*v1342 != *v1295)
                          {
                            ++v1342;
                            v1345 -= 8;
                            if (!v1345)
                            {
                              v1342 = v1344;
                              break;
                            }
                          }
                        }
                        if (v1344 == v1342 + 1)
                        {
                          v1346 = v1463;
                        }
                        else
                        {
                          memmove(v1342, v1342 + 1, (char *)v1344 - (char *)(v1342 + 1));
                          v1346 = v1463;
                          LODWORD(v1343) = *(_DWORD *)(v1463 + 1592);
                        }
                        *(_DWORD *)(v1346 + 1592) = v1343 - 1;
                      }
                      else
                      {
                        v1339 = 1;
                        while (v1338 != -4096)
                        {
                          v1340 = v1336 + v1339++;
                          v1336 = v1340 & v1335;
                          v1338 = *(_QWORD *)(v1334 + 8 * v1336);
                          if (v1338 == v1332)
                          {
                            v1337 = (uint64_t *)(v1334 + 8 * v1336);
                            goto LABEL_2023;
                          }
                        }
                      }
                    }
                    v1295 += 2;
                    if (v1295 == v1300)
                    {
                      v1295 = (uint64_t *)v1502;
                      goto LABEL_2046;
                    }
                    continue;
                  }
                  break;
                }
                v1333 = 32;
                v1334 = v1452;
                goto LABEL_2018;
              }
            }
            v1242 = 32;
            v1243 = v1452;
LABEL_1879:
            v1244 = v1242 - 1;
            v1245 = v1244 & ((v1241 >> 4) ^ (v1241 >> 9));
            v1246 = *(unsigned __int8 **)(v1243 + 8 * v1245);
            if (v1241 == v1246)
            {
LABEL_1883:
              v1249 = *((_QWORD *)v1241 + 1);
              if (v1249)
              {
                while (1)
                {
                  v1250 = *(_QWORD *)(v1249 + 24);
                  if (!v1250)
                    break;
                  if (*(_BYTE *)(v1250 + 16) != 84)
                    break;
                  v1251 = *(_QWORD *)(v1250 - 32);
                  if (!v1251)
                    break;
                  if (*(_BYTE *)(v1251 + 16))
                    break;
                  if (*(_QWORD *)(v1251 + 24) != *(_QWORD *)(v1250 + 72))
                    break;
                  if ((*(_BYTE *)(v1251 + 33) & 0x20) == 0)
                    break;
                  v1252 = *(_DWORD *)(v1251 + 36);
                  if (!sub_1C47860D0(v1252))
                    break;
                  llvm::SampleInfo::SampleInfo((uint64_t)&v1495, v1252, 1);
                  v1253 = *(_QWORD *)(v1250 - 32 * (*(_DWORD *)(v1250 + 20) & 0x7FFFFFF) + 32 * v1498);
                  v1254 = v1253 && *(_BYTE *)(v1253 + 16) == 5;
                  if (v1254
                    && *(_WORD *)(v1253 + 18) == 48
                    && llvm::Constant::isAllOnesValue(*(llvm::Constant **)(v1253
                                                                         - 32 * (*(_DWORD *)(v1253 + 20) & 0x7FFFFFF))))
                  {
                    break;
                  }
                  if (*(_BYTE *)(v1250 + 16) == 84
                    && (v1255 = *(_QWORD *)(v1250 - 32)) != 0
                    && !*(_BYTE *)(v1255 + 16)
                    && *(_QWORD *)(v1255 + 24) == *(_QWORD *)(v1250 + 72))
                  {
                    if ((*(_BYTE *)(v1255 + 33) & 0x20) == 0)
                      v1250 = 0;
                  }
                  else
                  {
                    v1250 = 0;
                  }
                  llvm::SampleInfo::SampleInfo((uint64_t)&v1495, *(_DWORD *)(*(_QWORD *)(v1250 - 32) + 36), 1);
                  if (v1500 != -1 || v1499 == -1 && v1501 == -1)
                    break;
                  v1256 = v1499 == -1 ? v1501 : v1499;
                  v1257 = *(_DWORD *)(v1250 + 20) & 0x7FFFFFF;
                  v1258 = (unsigned __int8 **)(v1250 - 32 * v1257);
                  if (v1258[4 * v1256] != v1241)
                    break;
                  if ((_DWORD)v1257)
                  {
                    while (!v1256 || *v1258 != v1241)
                    {
                      --v1256;
                      v1258 += 4;
                      if (!--v1257)
                        goto LABEL_1914;
                    }
                    goto LABEL_1970;
                  }
LABEL_1914:
                  v1249 = *(_QWORD *)(v1249 + 8);
                  if (!v1249)
                  {
                    v1241 = v1491;
                    goto LABEL_1919;
                  }
                }
              }
              else
              {
LABEL_1919:
                v1470[0] = 0;
                v1466 = (llvm::Instruction *)v1241;
                if (*(_BYTE *)(*(_QWORD *)v1241 + 8))
                  v1259 = 2805;
                else
                  v1259 = 2804;
                v1260 = llvm::Intrinsic::getDeclaration(v1238, v1259, 0, 0);
                v1261 = v1466;
                if (*((unsigned __int8 *)v1466 + 16) <= 0x1Bu)
                  v1261 = 0;
                sub_1C4D8ADA0((uint64_t)&v1495, *((uint64_t ***)v1261 + 5), *((_QWORD *)v1261 + 4), 0, 0, 0);
                if (v1260)
                  v1262 = *(uint64_t ***)(v1260 + 24);
                else
                  v1262 = 0;
                v1510 = 257;
                v1263 = sub_1C4774778((uint64_t *)&v1495, v1262, v1260, (uint64_t *)&v1466, 1, (uint64_t)&v1506, 0);
                if ((__int128 *)v1495 != &v1496)
                  free((void *)v1495);
                v1470[0] = v1263;
                sub_1C6211B60((uint64_t)&v1502, (uint64_t *)&v1491, v1470);
                v1264 = v1470[0];
                v1506 = (uint64_t (**)())&v1508;
                v1507 = 0x400000000;
                v1265 = *((_QWORD *)v1491 + 1);
                if (v1265)
                {
                  v1266 = 0;
                  do
                  {
                    v1267 = *(_QWORD *)(v1265 + 24);
                    if ((*(_DWORD *)(*(_QWORD *)(v1267 - 32) + 36) & 0xFFFFFFFE) != 0xAF4)
                    {
                      if (v1266 >= HIDWORD(v1507))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1506, (uint64_t)&v1508, v1266 + 1, 8);
                        v1266 = v1507;
                      }
                      v1506[v1266] = (uint64_t (*)())v1267;
                      v1266 = v1507 + 1;
                      LODWORD(v1507) = v1507 + 1;
                    }
                    v1265 = *(_QWORD *)(v1265 + 8);
                  }
                  while (v1265);
                  v1268 = (uint64_t *)v1506;
                  if (v1266)
                  {
                    v1269 = (uint64_t *)(v1264 + 8);
                    v1270 = 8 * v1266;
                    do
                    {
                      v1271 = *v1268;
                      llvm::SampleInfo::SampleInfo((uint64_t)&v1495, *(_DWORD *)(*(_QWORD *)(*v1268 - 32) + 36), 1);
                      v1273 = HIDWORD(v1496);
                      if (v1499 == -1)
                        v1274 = v1501;
                      else
                        v1274 = v1499;
                      v1275 = v1271 - 32 * (*(_DWORD *)(v1271 + 20) & 0x7FFFFFF);
                      v1276 = v1275 + 32 * v1274;
                      if (*(_QWORD *)v1276)
                      {
                        **(_QWORD **)(v1276 + 16) = *(_QWORD *)(v1276 + 8);
                        v1277 = *(_QWORD *)(v1276 + 8);
                        if (v1277)
                          *(_QWORD *)(v1277 + 16) = *(_QWORD *)(v1276 + 16);
                      }
                      *(_QWORD *)v1276 = v1264;
                      if (v1264)
                      {
                        v1278 = *v1269;
                        v1279 = v1275 + 32 * v1274;
                        *(_QWORD *)(v1279 + 8) = *v1269;
                        if (v1278)
                          *(_QWORD *)(v1278 + 16) = v1279 + 8;
                        *(_QWORD *)(v1279 + 16) = v1269;
                        *v1269 = v1276;
                      }
                      v1280 = *(uint64_t **)(v1271 - 32 * (*(_DWORD *)(v1271 + 20) & 0x7FFFFFF) + 32 * v1273);
                      v1281 = v1280 + 3;
                      if (*((_DWORD *)v1280 + 8) >= 0x41u)
                        v1281 = (_QWORD *)*v1281;
                      v1282 = *v1280;
                      v1283 = *v1281 & 0xFFFFFFF7 | 8;
                      v1284 = *(llvm::ConstantInt **)v1282;
                      v1285 = *(unsigned int *)(v1282 + 8);
                      LODWORD(v1467) = v1285 >> 8;
                      if (v1285 >> 8 > 0x40)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v1466, v1283, 0);
                      }
                      else
                      {
                        if (v1285 <= 0xFF)
                          v1286 = 0;
                        else
                          v1286 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v1285);
                        v1466 = (llvm::Instruction *)(v1286 & v1283);
                      }
                      v1287 = llvm::ConstantInt::get(v1284, (llvm::LLVMContext *)&v1466, v1272);
                      if (v1467 >= 0x41 && v1466)
                        MEMORY[0x1CAA32F9C](v1466, 0x1000C8000313F17);
                      v1288 = v1271 - 32 * (*(_DWORD *)(v1271 + 20) & 0x7FFFFFF);
                      v1289 = v1288 + 32 * v1273;
                      if (*(_QWORD *)v1289)
                      {
                        **(_QWORD **)(v1289 + 16) = *(_QWORD *)(v1289 + 8);
                        v1290 = *(_QWORD *)(v1289 + 8);
                        if (v1290)
                          *(_QWORD *)(v1290 + 16) = *(_QWORD *)(v1289 + 16);
                      }
                      *(_QWORD *)v1289 = v1287;
                      if (v1287)
                      {
                        v1293 = *((_QWORD *)v1287 + 1);
                        v1292 = (uint64_t *)((char *)v1287 + 8);
                        v1291 = v1293;
                        v1294 = v1288 + 32 * v1273;
                        *(_QWORD *)(v1294 + 8) = v1293;
                        if (v1293)
                          *(_QWORD *)(v1291 + 16) = v1294 + 8;
                        *(_QWORD *)(v1294 + 16) = v1292;
                        *v1292 = v1289;
                      }
                      ++v1268;
                      v1270 -= 8;
                    }
                    while (v1270);
                    v1268 = (uint64_t *)v1506;
                    v1130 = v1463;
                    v1238 = (uint64_t *)v1430;
                  }
                  if (v1268 != &v1508)
                    free(v1268);
                }
              }
            }
            else
            {
              v1247 = 1;
              while (v1246 != (unsigned __int8 *)-4096)
              {
                v1248 = v1245 + v1247++;
                v1245 = v1248 & v1244;
                v1246 = *(unsigned __int8 **)(v1243 + 8 * v1245);
                if (v1241 == v1246)
                  goto LABEL_1883;
              }
            }
            goto LABEL_1970;
          }
        }
        *(_QWORD *)&v1495 = v1130;
        *((_QWORD *)&v1495 + 1) = v1471;
        *(_QWORD *)&v1496 = &v1465;
        *((_QWORD *)&v1496 + 1) = v1441;
        v1497 = &v1464;
        v1498 = v1134;
        v1148 = *(uint64_t **)(v1130 + 1048);
        v1149 = *(unsigned int *)(v1130 + 1056);
        if (!(_DWORD)v1149)
          goto LABEL_1787;
        v1150 = &v1148[v1149];
        while (2)
        {
          if (v1464 > v1450)
          {
            v1152 = *--v1150;
            v1151 = v1152;
            v1153 = *(unsigned __int8 *)(v1152 + 16);
            if (v1153 <= 0x1B)
              v1154 = 0;
            else
              v1154 = v1151;
            v1155 = *(_DWORD *)(v1130 + 2184);
            if (!v1155)
              goto LABEL_1716;
            v1156 = *(_QWORD *)(v1130 + 2168);
            v1157 = v1155 - 1;
            v1158 = ((v1154 >> 4) ^ (v1154 >> 9)) & v1157;
            v1159 = *(_QWORD *)(v1156 + 32 * v1158);
            if (v1154 != v1159)
            {
              v1160 = 1;
              while (v1159 != -4096)
              {
                v1161 = v1158 + v1160++;
                v1158 = v1161 & v1157;
                v1159 = *(_QWORD *)(v1156 + 32 * v1158);
                if (v1154 == v1159)
                  goto LABEL_1722;
              }
              goto LABEL_1716;
            }
LABEL_1722:
            if (v1153 == 84)
            {
              v1162 = *(_QWORD *)(v1151 - 32);
              if (!v1162
                || *(_BYTE *)(v1162 + 16)
                || *(_QWORD *)(v1162 + 24) != *(_QWORD *)(v1151 + 72)
                || (*(_BYTE *)(v1162 + 33) & 0x20) == 0
                || *(_DWORD *)(v1162 + 36) != 2149)
              {
LABEL_1730:
                for (i4 = *(_QWORD *)(v1151 + 8); i4; i4 = *(_QWORD *)(i4 + 8))
                {
                  if (*(unsigned __int8 *)(*(_QWORD *)(i4 + 24) + 16) <= 0x1Bu)
                    v1164 = 0;
                  else
                    v1164 = *(_QWORD *)(i4 + 24);
                  if ((*(_BYTE *)v1087 & 1) != 0)
                  {
                    v1165 = 32;
                    v1166 = v1130 + 792;
                  }
                  else
                  {
                    v1165 = *(_DWORD *)(v1130 + 800);
                    if (!v1165)
                      continue;
                    v1166 = *(_QWORD *)(v1130 + 792);
                  }
                  v1167 = v1165 - 1;
                  v1168 = v1167 & ((v1164 >> 4) ^ (v1164 >> 9));
                  v1169 = *(_QWORD *)(v1166 + 8 * v1168);
                  if (v1164 == v1169)
                  {
LABEL_1742:
                    v1172 = sub_1C477672C((uint64_t)v1471, v1164);
                    if (v1471[1] == v1471[0])
                      v1173 = (uint64_t *)((char *)&v1472 + 4);
                    else
                      v1173 = &v1472;
                    if (v1172 == (_QWORD *)((char *)v1471[1] + 8 * *(unsigned int *)v1173))
                      goto LABEL_1716;
                  }
                  else
                  {
                    v1170 = 1;
                    while (v1169 != -4096)
                    {
                      v1171 = v1168 + v1170++;
                      v1168 = v1171 & v1167;
                      v1169 = *(_QWORD *)(v1166 + 8 * v1168);
                      if (v1164 == v1169)
                        goto LABEL_1742;
                    }
                  }
                }
                sub_1C56450B8((uint64_t)&v1495, v1151);
              }
            }
            else if (v1153 - 29 >= 0xB)
            {
              goto LABEL_1730;
            }
LABEL_1716:
            if (v1150 == v1148)
              break;
            continue;
          }
          break;
        }
        v1148 = *(uint64_t **)(v1130 + 1048);
        v1174 = *(unsigned int *)(v1130 + 1056);
        *(_QWORD *)&v1502 = v1471;
        *((_QWORD *)&v1502 + 1) = v1087;
        if ((_DWORD)v1174)
        {
          v1175 = &v1148[v1174];
          v1176 = 8 * v1174 - 8;
          while (1)
          {
            v1177 = v1148 + 1;
            if (sub_1C56487C0((uint64_t *)&v1502, v1148))
              break;
            v1176 -= 8;
            ++v1148;
            if (v1176 == -8)
            {
              v1148 = v1175;
              goto LABEL_1787;
            }
          }
          for (; v1176; v1176 -= 8)
          {
            if (!sub_1C56487C0((uint64_t *)&v1502, v1177))
              *v1148++ = *v1177;
            ++v1177;
          }
        }
LABEL_1787:
        v1193 = *(_QWORD *)(v1130 + 1048);
        if (v1148 != (uint64_t *)(v1193 + 8 * *(unsigned int *)(v1130 + 1056)))
          *(_DWORD *)(v1130 + 1056) = ((unint64_t)v1148 - v1193) >> 3;
        if (v1471[1] == v1471[0])
        {
LABEL_1790:
          v1473 = 0;
          HIDWORD(v1472) = 0;
          goto LABEL_1791;
        }
        if (v1472 < 0x21 || 4 * (HIDWORD(v1472) - v1473) >= v1472)
        {
          memset(v1471[1], 255, 8 * v1472);
          goto LABEL_1790;
        }
        free(v1471[1]);
        v1352 = 1 << (33 - __clz(HIDWORD(v1472) - v1473 - 1));
        v1197 = (HIDWORD(v1472) - v1473) > 0x10;
        v1473 = 0;
        if (v1197)
          v1353 = v1352;
        else
          v1353 = 32;
        v1472 = v1353;
        v1354 = malloc_type_malloc(8 * v1353, 0x4065EBACuLL);
        if (!v1354)
          goto LABEL_2080;
        v1471[1] = v1354;
        memset(v1354, 255, 8 * v1472);
LABEL_1791:
        v1194 = *(uint64_t **)(v1130 + 1048);
        v1195 = *(unsigned int *)(v1130 + 1056);
        if (!(_DWORD)v1195)
        {
LABEL_1833:
          v1217 = *(_QWORD *)(v1130 + 1048);
          if (v1194 != (uint64_t *)(v1217 + 8 * *(unsigned int *)(v1130 + 1056)))
            *(_DWORD *)(v1130 + 1056) = ((unint64_t)v1194 - v1217) >> 3;
          if (v1471[1] != v1471[0])
          {
            if (v1472 >= 0x21 && 4 * (HIDWORD(v1472) - v1473) < v1472)
            {
              free(v1471[1]);
              v1355 = 1 << (33 - __clz(HIDWORD(v1472) - v1473 - 1));
              v1197 = (HIDWORD(v1472) - v1473) > 0x10;
              v1473 = 0;
              if (v1197)
                v1356 = v1355;
              else
                v1356 = 32;
              v1472 = v1356;
              v1357 = malloc_type_malloc(8 * v1356, 0x4065EBACuLL);
              if (!v1357)
                goto LABEL_2080;
              v1471[1] = v1357;
              memset(v1357, 255, 8 * v1472);
              goto LABEL_1837;
            }
            memset(v1471[1], 255, 8 * v1472);
          }
          v1473 = 0;
          HIDWORD(v1472) = 0;
LABEL_1837:
          sub_1C5648834(v1462);
          *(_DWORD *)(v1130 + 1592) = 0;
          v1218 = *(unsigned int *)(v1130 + 1056);
          if ((_DWORD)v1218)
          {
            v1219 = *(uint64_t **)(v1130 + 1048);
            v1220 = &v1219[v1218];
            do
            {
              v1221 = *v1219;
              if (sub_1C5644F68(v1130, *v1219, (uint64_t)v1087, v1458, 0))
              {
                *(_QWORD *)&v1502 = v1221;
                if ((*(_BYTE *)v1462 & 1) != 0)
                {
                  v1222 = 32;
                  v1223 = v1130 + 1328;
                }
                else
                {
                  v1222 = *(_DWORD *)(v1130 + 1336);
                  if (!v1222)
                  {
                    v1232 = 0;
LABEL_1857:
                    v1233 = sub_1C4993C28((uint64_t)v1462, (uint64_t)&v1502, &v1502, v1232);
                    *v1233 = v1502;
                    v1234 = v1502;
                    v1235 = *(unsigned int *)(v1130 + 1592);
                    if (v1235 >= *(unsigned int *)(v1130 + 1596))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v1439, v1130 + 1600, v1235 + 1, 8);
                      v1235 = *(unsigned int *)(v1130 + 1592);
                    }
                    *(_QWORD *)(*(_QWORD *)(v1130 + 1584) + 8 * v1235) = v1234;
                    ++*(_DWORD *)(v1130 + 1592);
                    goto LABEL_1860;
                  }
                  v1223 = *(_QWORD *)(v1130 + 1328);
                }
                v1224 = v1222 - 1;
                v1225 = v1224 & ((v1221 >> 4) ^ (v1221 >> 9));
                v1226 = (_QWORD *)(v1223 + 8 * v1225);
                v1227 = *v1226;
                if (v1221 != *v1226)
                {
                  v1228 = 0;
                  v1229 = 1;
                  while (v1227 != -4096)
                  {
                    if (v1228)
                      v1230 = 0;
                    else
                      v1230 = v1227 == -8192;
                    if (v1230)
                      v1228 = v1226;
                    v1231 = v1225 + v1229++;
                    v1225 = v1231 & v1224;
                    v1226 = (_QWORD *)(v1223 + 8 * v1225);
                    v1227 = *v1226;
                    if (v1221 == *v1226)
                      goto LABEL_1860;
                  }
                  if (v1228)
                    v1232 = v1228;
                  else
                    v1232 = v1226;
                  goto LABEL_1857;
                }
              }
LABEL_1860:
              ++v1219;
            }
            while (v1219 != v1220);
          }
          v1137 = v1465;
          v1147 = v1464;
          v1146 = v1380;
          goto LABEL_1864;
        }
        v1196 = &v1194[v1195];
        while (2)
        {
          v1197 = (int)v1465 <= v1374 && v1464 <= v1450;
          if (!v1197)
          {
            v1199 = *--v1196;
            v1198 = v1199;
            v1200 = *(unsigned __int8 *)(v1199 + 16);
            if (v1200 == 84)
            {
              v1201 = *(_QWORD *)(v1198 - 32);
              if (v1201
                && !*(_BYTE *)(v1201 + 16)
                && *(_QWORD *)(v1201 + 24) == *(_QWORD *)(v1198 + 72)
                && (*(_BYTE *)(v1201 + 33) & 0x20) != 0
                && *(_DWORD *)(v1201 + 36) == 2149)
              {
                goto LABEL_1823;
              }
LABEL_1805:
              v1202 = *(_QWORD *)(v1198 + 8);
              if (v1202)
              {
                while (2)
                {
                  if (*(unsigned __int8 *)(*(_QWORD *)(v1202 + 24) + 16) <= 0x1Bu)
                    v1203 = 0;
                  else
                    v1203 = *(_QWORD *)(v1202 + 24);
                  if ((*(_BYTE *)v1087 & 1) == 0)
                  {
                    v1204 = *(_DWORD *)(v1130 + 800);
                    if (v1204)
                    {
                      v1205 = *(_QWORD *)(v1130 + 792);
LABEL_1813:
                      v1206 = v1204 - 1;
                      v1207 = v1206 & ((v1203 >> 4) ^ (v1203 >> 9));
                      v1208 = *(_QWORD *)(v1205 + 8 * v1207);
                      if (v1203 == v1208)
                      {
LABEL_1817:
                        v1211 = sub_1C477672C((uint64_t)v1471, v1203);
                        if (v1471[1] == v1471[0])
                          v1212 = (uint64_t *)((char *)&v1472 + 4);
                        else
                          v1212 = &v1472;
                        if (v1211 == (_QWORD *)((char *)v1471[1] + 8 * *(unsigned int *)v1212))
                          goto LABEL_1823;
                      }
                      else
                      {
                        v1209 = 1;
                        while (v1208 != -4096)
                        {
                          v1210 = v1207 + v1209++;
                          v1207 = v1210 & v1206;
                          v1208 = *(_QWORD *)(v1205 + 8 * v1207);
                          if (v1203 == v1208)
                            goto LABEL_1817;
                        }
                      }
                    }
                    v1202 = *(_QWORD *)(v1202 + 8);
                    if (!v1202)
                      goto LABEL_1822;
                    continue;
                  }
                  break;
                }
                v1204 = 32;
                v1205 = v1130 + 792;
                goto LABEL_1813;
              }
LABEL_1822:
              sub_1C56450B8((uint64_t)&v1495, v1198);
            }
            else if ((v1200 - 29) >= 0xB)
            {
              goto LABEL_1805;
            }
LABEL_1823:
            if (v1196 != v1194)
              continue;
          }
          break;
        }
        v1194 = *(uint64_t **)(v1130 + 1048);
        v1213 = *(unsigned int *)(v1130 + 1056);
        *(_QWORD *)&v1502 = v1471;
        *((_QWORD *)&v1502 + 1) = v1087;
        if ((_DWORD)v1213)
        {
          v1214 = &v1194[v1213];
          v1215 = 8 * v1213 - 8;
          while (1)
          {
            v1216 = v1194 + 1;
            if (sub_1C56487C0((uint64_t *)&v1502, v1194))
              break;
            v1215 -= 8;
            ++v1194;
            if (v1215 == -8)
            {
              v1194 = v1214;
              goto LABEL_1833;
            }
          }
          for (; v1215; v1215 -= 8)
          {
            if (!sub_1C56487C0((uint64_t *)&v1502, v1216))
              *v1194++ = *v1216;
            ++v1216;
          }
        }
        goto LABEL_1833;
      }
    }
LABEL_1149:
    v769 = operator new(0x20uLL);
    v769[4] = v756;
    *((_QWORD *)v769 + 3) = v747;
    *(_QWORD *)v769 = 0;
    *((_QWORD *)v769 + 1) = v756;
    v770 = (float)(unint64_t)(*((_QWORD *)&v1496 + 1) + 1);
    if (!v757 || (float)(*(float *)&v1497 * (float)v757) < v770)
    {
      v771 = (v757 & (v757 - 1)) != 0;
      if (v757 < 3)
        v771 = 1;
      v772 = v771 | (2 * v757);
      v773 = vcvtps_u32_f32(v770 / *(float *)&v1497);
      if (v772 <= v773)
        prime = (int8x8_t)v773;
      else
        prime = (int8x8_t)v772;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        v757 = *((_QWORD *)&v1495 + 1);
      }
      if (*(_QWORD *)&prime > v757)
        goto LABEL_2085;
      if (*(_QWORD *)&prime >= v757)
        goto LABEL_1191;
      v781 = vcvtps_u32_f32((float)*((unint64_t *)&v1496 + 1) / *(float *)&v1497);
      if (v757 < 3 || (v782 = (uint8x8_t)vcnt_s8((int8x8_t)v757), v782.i16[0] = vaddlv_u8(v782), v782.u32[0] > 1uLL))
      {
        v781 = std::__next_prime(v781);
      }
      else
      {
        v783 = 1 << -(char)__clz(v781 - 1);
        if (v781 >= 2)
          v781 = v783;
      }
      if (*(_QWORD *)&prime <= v781)
        prime = (int8x8_t)v781;
      if (*(_QWORD *)&prime >= v757)
      {
        v757 = *((_QWORD *)&v1495 + 1);
        goto LABEL_1191;
      }
      if (prime)
      {
LABEL_2085:
        if (*(_QWORD *)&prime >> 61)
          sub_1C4764EE4();
        v775 = operator new(8 * *(_QWORD *)&prime);
        v776 = (void *)v1495;
        *(_QWORD *)&v1495 = v775;
        if (v776)
          operator delete(v776);
        v777 = 0;
        *((int8x8_t *)&v1495 + 1) = prime;
        do
          *(_QWORD *)(v1495 + 8 * v777++) = 0;
        while (*(_QWORD *)&prime != v777);
        v778 = (uint64_t **)v1496;
        if ((_QWORD)v1496)
        {
          v779 = *(_QWORD *)(v1496 + 8);
          v780 = (uint8x8_t)vcnt_s8(prime);
          v780.i16[0] = vaddlv_u8(v780);
          if (v780.u32[0] > 1uLL)
          {
            if (v779 >= *(_QWORD *)&prime)
              v779 %= *(_QWORD *)&prime;
          }
          else
          {
            v779 &= *(_QWORD *)&prime - 1;
          }
          *(_QWORD *)(v1495 + 8 * v779) = &v1496;
          for (i5 = *v778; *v778; i5 = *v778)
          {
            v785 = i5[1];
            if (v780.u32[0] > 1uLL)
            {
              if (v785 >= *(_QWORD *)&prime)
                v785 %= *(_QWORD *)&prime;
            }
            else
            {
              v785 &= *(_QWORD *)&prime - 1;
            }
            if (v785 == v779)
            {
              v778 = (uint64_t **)i5;
            }
            else
            {
              v786 = i5;
              if (*(_QWORD *)(v1495 + 8 * v785))
              {
                do
                {
                  v787 = v786;
                  v786 = (uint64_t *)*v786;
                }
                while (v786 && *((_DWORD *)i5 + 4) == *((_DWORD *)v786 + 4));
                *v778 = v786;
                *v787 = **(_QWORD **)(v1495 + 8 * v785);
                **(_QWORD **)(v1495 + 8 * v785) = i5;
              }
              else
              {
                *(_QWORD *)(v1495 + 8 * v785) = v778;
                v778 = (uint64_t **)i5;
                v779 = v785;
              }
            }
          }
        }
        v757 = (unint64_t)prime;
      }
      else
      {
        v800 = (void *)v1495;
        *(_QWORD *)&v1495 = 0;
        if (v800)
          operator delete(v800);
        v757 = 0;
        *((_QWORD *)&v1495 + 1) = 0;
      }
    }
LABEL_1191:
    v788 = (uint8x8_t)vcnt_s8((int8x8_t)v757);
    v788.i16[0] = vaddlv_u8(v788);
    if (v788.u32[0] > 1uLL)
    {
      v789 = v756;
      v746 = v1461;
      v724 = (int32x2_t *)v1463;
      if (v757 <= v756)
        v789 = v756 % v757;
    }
    else
    {
      v789 = ((_DWORD)v757 - 1) & v756;
      v746 = v1461;
      v724 = (int32x2_t *)v1463;
    }
    v790 = v1495;
    v791 = *(uint64_t ***)(v1495 + 8 * v789);
    if (v791)
    {
      v792 = *v791;
      if (*v791)
      {
        v793 = 0;
        do
        {
          v794 = v792;
          v795 = v792[1];
          if (v788.u32[0] > 1uLL)
          {
            v796 = v795;
            if (v795 >= v757)
              v796 = v795 % v757;
          }
          else
          {
            v796 = v795 & (v757 - 1);
          }
          if (v796 != v789)
            break;
          v797 = v795 == v756 && *((_DWORD *)v794 + 4) == v769[4];
          if ((v793 & !v797) == 1)
            break;
          v793 |= v797;
          v792 = (uint64_t *)*v794;
          v791 = (uint64_t **)v794;
        }
        while (*v794);
      }
    }
    v798 = *((_QWORD *)v769 + 1);
    if (v788.u32[0] <= 1uLL)
    {
      v798 &= v757 - 1;
      if (!v791)
      {
LABEL_1212:
        *(_QWORD *)v769 = v1496;
        *(_QWORD *)&v1496 = v769;
        *(_QWORD *)(v790 + 8 * v798) = &v1496;
        if (!*(_QWORD *)v769)
        {
LABEL_1232:
          ++*((_QWORD *)&v1496 + 1);
          goto LABEL_1233;
        }
        v799 = *(_QWORD *)(*(_QWORD *)v769 + 8);
        if (v788.u32[0] <= 1uLL)
        {
          v799 &= v757 - 1;
        }
        else if (v799 >= v757)
        {
          v799 %= v757;
        }
LABEL_1231:
        *(_QWORD *)(v1495 + 8 * v799) = v769;
        goto LABEL_1232;
      }
    }
    else
    {
      if (v798 >= v757)
        v798 %= v757;
      if (!v791)
        goto LABEL_1212;
    }
    *(_QWORD *)v769 = *v791;
    *v791 = (uint64_t *)v769;
    if (!*(_QWORD *)v769)
      goto LABEL_1232;
    v799 = *(_QWORD *)(*(_QWORD *)v769 + 8);
    if (v788.u32[0] <= 1uLL)
    {
      v799 &= v757 - 1;
    }
    else if (v799 >= v757)
    {
      v799 %= v757;
    }
    if (v799 == v798)
      goto LABEL_1232;
    goto LABEL_1231;
  }
LABEL_2052:
  if (v1488 != (uint64_t *)v1490)
    free(v1488);
  if ((v1485 & 1) == 0)
    MEMORY[0x1CAA32FB4](v1486, 8);
}

_QWORD *sub_1C5643C94(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  _QWORD *result;
  int v5;
  _QWORD *v6;

  if (a2 <= 0x20)
  {
    *a1 = 1;
  }
  else
  {
    *(_DWORD *)a1 &= ~1u;
    v3 = a2;
    result = operator new(8 * a2, (std::align_val_t)8uLL);
    a1[1] = result;
    a1[2] = v3;
    v5 = *(_DWORD *)a1;
    *a1 = *(_DWORD *)a1 & 1;
    if ((v5 & 1) == 0)
    {
      v6 = &result[v3];
      goto LABEL_4;
    }
  }
  result = a1 + 1;
  v6 = a1 + 33;
  do
LABEL_4:
    *result++ = -4096;
  while (result != v6);
  return result;
}

void sub_1C5643D14(char **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  _OWORD v8[4];
  void *v9[2];
  _OWORD v10[12];
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[25];

  v15[24] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  if (v3)
    v4 = v3 - 24;
  else
    v4 = 0;
  sub_1C5616900((uint64_t)&v12, v4);
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  v9[0] = 0;
  memset(v8, 0, sizeof(v8));
  v5 = (char *)v8 + 8;
  v6 = (char *)v8 + 8;
  v7 = 8;
  v9[1] = (char *)v10 + 8;
  DWORD1(v10[0]) = 8;
  sub_1C5643E58((uint64_t)&v12, (uint64_t)&v5, a1);
  if (v9[1] != (char *)v10 + 8)
    free(v9[1]);
  if (v6 != v5)
    free(v6);
  if (v14 != v15)
    free(v14);
  if (v13 != v12)
    free(v13);
}

uint64_t sub_1C5643E58(uint64_t a1, uint64_t a2, char **a3)
{
  _BYTE *v6;
  const void *v7;
  const void *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  _BYTE *v13;
  const void *v14;
  const void *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  _BYTE v29[64];
  void *v30[2];
  _BYTE v31[192];
  _BYTE *v32;
  _BYTE *v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  _BYTE v37[64];
  void *v38[2];
  _BYTE v39[192];
  void *v40;
  void *v41;
  void *v42;
  _QWORD v43[26];

  v43[25] = *MEMORY[0x1E0C80C00];
  v6 = v37;
  v32 = v37;
  v7 = *(const void **)(a1 + 8);
  if (v7 == *(const void **)a1)
  {
    v33 = v37;
    v8 = v7;
  }
  else
  {
    v22 = *(unsigned int *)(a1 + 16);
    v6 = malloc_type_malloc(8 * v22, 0x4065EBACuLL);
    if (!v6)
    {
      if ((_DWORD)v22)
        goto LABEL_41;
      v6 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v6)
        goto LABEL_41;
    }
    v33 = v6;
    v8 = *(const void **)a1;
    v7 = *(const void **)(a1 + 8);
  }
  v10 = *(_DWORD *)(a1 + 16);
  v9 = *(_DWORD *)(a1 + 20);
  v34 = v10;
  if (v7 == v8)
    v11 = v9;
  else
    v11 = v10;
  if (v11)
  {
    memmove(v6, v7, 8 * v11);
    v9 = *(_DWORD *)(a1 + 20);
  }
  v12 = *(_DWORD *)(a1 + 24);
  v35 = v9;
  v36 = v12;
  v38[0] = v39;
  v38[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    sub_1C4DB22B8((uint64_t)v38, (uint64_t *)(a1 + 96));
  v13 = v29;
  v24 = v29;
  v14 = *(const void **)(a2 + 8);
  if (v14 == *(const void **)a2)
  {
    v25 = v29;
    v15 = v14;
    goto LABEL_12;
  }
  v23 = *(unsigned int *)(a2 + 16);
  v13 = malloc_type_malloc(8 * v23, 0x4065EBACuLL);
  if (!v13 && ((_DWORD)v23 || (v13 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_41:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v25 = v13;
  v15 = *(const void **)a2;
  v14 = *(const void **)(a2 + 8);
LABEL_12:
  v17 = *(_DWORD *)(a2 + 16);
  v16 = *(_DWORD *)(a2 + 20);
  v26 = v17;
  if (v14 == v15)
    v18 = v16;
  else
    v18 = v17;
  if (v18)
  {
    memmove(v13, v14, 8 * v18);
    v16 = *(_DWORD *)(a2 + 20);
  }
  v19 = *(_DWORD *)(a2 + 24);
  v27 = v16;
  v28 = v19;
  v30[0] = v31;
  v30[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104))
    sub_1C4DB22B8((uint64_t)v30, (uint64_t *)(a2 + 96));
  sub_1C56440C0((uint64_t)&v32, (uint64_t)&v24, a3, (uint64_t)&v40);
  v20 = v43[24];
  if (v42 != v43)
    free(v42);
  if (v41 != v40)
    free(v41);
  if (v30[0] != v31)
    free(v30[0]);
  if (v25 != v24)
    free(v25);
  if (v38[0] != v39)
    free(v38[0]);
  if (v33 != v32)
    free(v33);
  return v20;
}

void sub_1C56440C0(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  const void *v8;
  const void *v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  _BYTE v19[64];
  void *v20[2];
  _BYTE v21[192];
  _BYTE *v22;
  _BYTE *v23;
  int v24;
  int v25;
  int v26;
  _BYTE v27[64];
  void *v28[2];
  _QWORD v29[25];

  v29[24] = *MEMORY[0x1E0C80C00];
  v22 = v27;
  v9 = *(const void **)a1;
  v8 = *(const void **)(a1 + 8);
  if (v8 == *(const void **)a1)
  {
    v23 = v27;
    v10 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v10)
      memmove(v27, v8, 8 * v10);
  }
  else
  {
    v23 = *(_BYTE **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    LODWORD(v10) = *(_DWORD *)(a1 + 20);
  }
  v24 = *(_DWORD *)(a1 + 16);
  v25 = v10;
  v26 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  v28[0] = v29;
  v28[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    sub_1C4DB2150((uint64_t)v28, (uint64_t *)(a1 + 96));
  v14 = v19;
  v12 = *(const void **)a2;
  v11 = *(const void **)(a2 + 8);
  if (v11 == *(const void **)a2)
  {
    v15 = v19;
    v13 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v13)
      memmove(v19, v11, 8 * v13);
  }
  else
  {
    v15 = *(_BYTE **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v12;
    LODWORD(v13) = *(_DWORD *)(a2 + 20);
  }
  v16 = *(_DWORD *)(a2 + 16);
  v17 = v13;
  v18 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  v20[0] = v21;
  v20[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104))
    sub_1C4DB2150((uint64_t)v20, (uint64_t *)(a2 + 96));
  sub_1C564428C((uint64_t)&v22, (uint64_t)&v14, a3, a4);
  if (v20[0] != v21)
    free(v20[0]);
  if (v15 != v14)
    free(v15);
  if (v28[0] != v29)
    free(v28[0]);
  if (v23 != v22)
    free(v23);
}

void sub_1C564428C(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  const void *v8;
  const void *v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  _BYTE v19[64];
  void *v20[2];
  _BYTE v21[192];
  _BYTE *v22;
  _BYTE *v23;
  int v24;
  int v25;
  int v26;
  _BYTE v27[64];
  void *v28[2];
  _QWORD v29[25];

  v29[24] = *MEMORY[0x1E0C80C00];
  v22 = v27;
  v9 = *(const void **)a1;
  v8 = *(const void **)(a1 + 8);
  if (v8 == *(const void **)a1)
  {
    v23 = v27;
    v10 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v10)
      memmove(v27, v8, 8 * v10);
  }
  else
  {
    v23 = *(_BYTE **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    LODWORD(v10) = *(_DWORD *)(a1 + 20);
  }
  v24 = *(_DWORD *)(a1 + 16);
  v25 = v10;
  v26 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  v28[0] = v29;
  v28[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    sub_1C4DB2150((uint64_t)v28, (uint64_t *)(a1 + 96));
  v14 = v19;
  v12 = *(const void **)a2;
  v11 = *(const void **)(a2 + 8);
  if (v11 == *(const void **)a2)
  {
    v15 = v19;
    v13 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v13)
      memmove(v19, v11, 8 * v13);
  }
  else
  {
    v15 = *(_BYTE **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v12;
    LODWORD(v13) = *(_DWORD *)(a2 + 20);
  }
  v16 = *(_DWORD *)(a2 + 16);
  v17 = v13;
  v18 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  v20[0] = v21;
  v20[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104))
    sub_1C4DB2150((uint64_t)v20, (uint64_t *)(a2 + 96));
  sub_1C5644458((uint64_t)&v22, (uint64_t)&v14, a3, a4);
  if (v20[0] != v21)
    free(v20[0]);
  if (v15 != v14)
    free(v15);
  if (v28[0] != v29)
    free(v28[0]);
  if (v23 != v22)
    free(v23);
}

void sub_1C5644458(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE *v8;
  const void *v9;
  const void *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  const void *v15;
  const void *v16;
  uint64_t v17;
  int v18;
  int v19;
  const void *v20;
  const void *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  int v28;
  int v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  int v33;
  int v34;
  int v35;
  _BYTE v36[64];
  void *v37[2];
  _BYTE v38[192];
  _BYTE *v39;
  _BYTE *v40;
  int v41;
  int v42;
  int v43;
  _BYTE v44[64];
  void *v45[2];
  _BYTE v46[192];
  void *v47;
  void *v48;
  uint64_t v49;
  int v50;
  void *v51;
  int v52;
  uint64_t v53;
  _BYTE *v54;
  void *v55;
  int v56;
  int v57;
  int v58;
  _BYTE v59[64];
  void *v60[2];
  _BYTE v61[192];
  _BYTE *v62;
  void *v63;
  int v64;
  int v65;
  int v66;
  _BYTE v67[64];
  void *v68[2];
  _BYTE v69[192];
  void *v70;
  void *v71;
  uint64_t v72;
  int v73;
  void *v74;
  int v75;
  _QWORD v76[25];
  _BYTE *v77;
  void *v78;
  int v79;
  int v80;
  int v81;
  _BYTE v82[64];
  void *v83[2];
  _BYTE v84[192];
  _BYTE *v85;
  void *v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  _BYTE v90[64];
  void *v91[2];
  _BYTE v92[192];
  void *v93;
  void *__src;
  uint64_t v95;
  int v96;
  void *v97;
  int v98;
  uint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  int v103;
  void *v104;
  int v105;
  _QWORD v106[25];

  v106[24] = *MEMORY[0x1E0C80C00];
  v8 = v90;
  v85 = v90;
  v9 = *(const void **)(a1 + 8);
  if (v9 == *(const void **)a1)
  {
    v86 = v90;
    v10 = v9;
  }
  else
  {
    v30 = *(unsigned int *)(a1 + 16);
    v8 = malloc_type_malloc(8 * v30, 0x4065EBACuLL);
    if (!v8 && ((_DWORD)v30 || (v8 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v86 = v8;
    v10 = *(const void **)a1;
    v9 = *(const void **)(a1 + 8);
  }
  v12 = *(_DWORD *)(a1 + 16);
  v11 = *(_DWORD *)(a1 + 20);
  v87 = v12;
  if (v9 == v10)
    v13 = v11;
  else
    v13 = v12;
  if (v13)
  {
    memmove(v8, v9, 8 * v13);
    v11 = *(_DWORD *)(a1 + 20);
  }
  v14 = *(_DWORD *)(a1 + 24);
  v88 = v11;
  v89 = v14;
  v91[0] = v92;
  v91[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    sub_1C4DB22B8((uint64_t)v91, (uint64_t *)(a1 + 96));
  v77 = v82;
  v16 = *(const void **)a2;
  v15 = *(const void **)(a2 + 8);
  if (v15 == *(const void **)a2)
  {
    v78 = v82;
    v17 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v17)
      memmove(v82, v15, 8 * v17);
  }
  else
  {
    v78 = *(void **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v16;
    LODWORD(v17) = *(_DWORD *)(a2 + 20);
  }
  v79 = *(_DWORD *)(a2 + 16);
  v80 = v17;
  v81 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  v83[0] = v84;
  v83[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104))
    sub_1C4DB2150((uint64_t)v83, (uint64_t *)(a2 + 96));
  sub_1C4DC2C10((uint64_t)&v85, (uint64_t)&v77, (uint64_t)&v93);
  if (v83[0] != v84)
    free(v83[0]);
  if (v78 != v77)
    free(v78);
  if (v91[0] != v92)
    free(v91[0]);
  if (v86 != v85)
    free(v86);
  v62 = v67;
  if (__src == v93)
  {
    v63 = v67;
    v18 = HIDWORD(v95);
    if (HIDWORD(v95))
      memmove(v67, __src, 8 * HIDWORD(v95));
  }
  else
  {
    v63 = __src;
    __src = v93;
    v18 = HIDWORD(v95);
  }
  v64 = v95;
  v65 = v18;
  v66 = v96;
  v95 = 8;
  v96 = 0;
  v68[0] = v69;
  v68[1] = (void *)0x800000000;
  if (v98)
    sub_1C4DB2150((uint64_t)v68, (uint64_t *)&v97);
  v54 = v59;
  if (v101 == v100)
  {
    v55 = v59;
    v19 = HIDWORD(v102);
    if (HIDWORD(v102))
      memmove(v59, v101, 8 * HIDWORD(v102));
  }
  else
  {
    v55 = v101;
    v101 = v100;
    v19 = HIDWORD(v102);
  }
  v56 = v102;
  v57 = v19;
  v58 = v103;
  v102 = 8;
  v103 = 0;
  v60[0] = v61;
  v60[1] = (void *)0x800000000;
  if (v105)
    sub_1C4DB2150((uint64_t)v60, (uint64_t *)&v104);
  sub_1C5644A58((llvm::SmallPtrSetImplBase *)&v62, (uint64_t)&v54, a3, (uint64_t)&v70);
  if (v60[0] != v61)
    free(v60[0]);
  if (v55 != v54)
    free(v55);
  if (v68[0] != v69)
    free(v68[0]);
  if (v63 != v62)
    free(v63);
  v39 = v44;
  v21 = *(const void **)a1;
  v20 = *(const void **)(a1 + 8);
  if (v20 == *(const void **)a1)
  {
    v40 = v44;
    v22 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v22)
      memmove(v44, v20, 8 * v22);
  }
  else
  {
    v40 = *(_BYTE **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v21;
    LODWORD(v22) = *(_DWORD *)(a1 + 20);
  }
  v41 = *(_DWORD *)(a1 + 16);
  v42 = v22;
  v43 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  v45[0] = v46;
  v45[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    sub_1C4DB2150((uint64_t)v45, (uint64_t *)(a1 + 96));
  v31 = v36;
  if (v71 == v70)
  {
    v32 = v36;
    v23 = HIDWORD(v72);
    if (HIDWORD(v72))
      memmove(v36, v71, 8 * HIDWORD(v72));
  }
  else
  {
    v32 = v71;
    v71 = v70;
    v23 = HIDWORD(v72);
  }
  v33 = v72;
  v34 = v23;
  v35 = v73;
  v72 = 8;
  v73 = 0;
  v37[0] = v38;
  v37[1] = (void *)0x800000000;
  if (v75)
    sub_1C4DB2150((uint64_t)v37, (uint64_t *)&v74);
  sub_1C4DC3408((uint64_t)&v39, (uint64_t)&v31, &v47);
  v24 = v76[24];
  v25 = (void *)(a4 + 32);
  *(_QWORD *)a4 = a4 + 32;
  v26 = v48;
  v27 = v47;
  if (v48 == v47)
  {
    *(_QWORD *)(a4 + 8) = v25;
    v28 = HIDWORD(v49);
    if (HIDWORD(v49))
      memmove(v25, v26, 8 * HIDWORD(v49));
  }
  else
  {
    *(_QWORD *)(a4 + 8) = v48;
    v48 = v27;
    v28 = HIDWORD(v49);
  }
  *(_QWORD *)(a4 + 96) = a4 + 112;
  v29 = v50;
  *(_DWORD *)(a4 + 16) = v49;
  *(_DWORD *)(a4 + 20) = v28;
  *(_DWORD *)(a4 + 24) = v29;
  v49 = 8;
  v50 = 0;
  *(_QWORD *)(a4 + 104) = 0x800000000;
  if (v52)
    sub_1C4DB2150(a4 + 96, (uint64_t *)&v51);
  *(_QWORD *)(a4 + 304) = v24;
  if (v51 != &v53)
    free(v51);
  if (v48 != v47)
    free(v48);
  if (v37[0] != v38)
    free(v37[0]);
  if (v32 != v31)
    free(v32);
  if (v45[0] != v46)
    free(v45[0]);
  if (v40 != v39)
    free(v40);
  if (v74 != v76)
    free(v74);
  if (v71 != v70)
    free(v71);
  if (v104 != v106)
    free(v104);
  if (v101 != v100)
    free(v101);
  if (v97 != &v99)
    free(v97);
  if (__src != v93)
    free(__src);
}

uint64_t sub_1C5644A58@<X0>(llvm::SmallPtrSetImplBase *this@<X1>, uint64_t a2@<X2>, char **a3@<X3>, uint64_t a4@<X8>)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t *v30;

  v30 = (uint64_t *)((char *)this + 96);
  while (1)
  {
    v8 = *((_DWORD *)this + 26);
    v9 = *((_QWORD *)this + 12);
    if (v8 != *(_DWORD *)(a2 + 104))
      goto LABEL_12;
    if (!v8)
      break;
    v10 = *(_QWORD *)(a2 + 96);
    v11 = *((_QWORD *)this + 12);
    while (*(_QWORD *)v11 == *(_QWORD *)v10 && *(_DWORD *)(v11 + 16) == *(_DWORD *)(v10 + 16))
    {
      v11 += 24;
      v10 += 24;
      if (v11 == v9 + 24 * v8)
        goto LABEL_31;
    }
LABEL_12:
    v13 = v9 + 24 * v8;
    v15 = a3[1];
    v14 = (unint64_t)a3[2];
    if ((unint64_t)v15 >= v14)
    {
      v17 = *a3;
      v18 = (v15 - *a3) >> 3;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 61)
        abort();
      v20 = v14 - (_QWORD)v17;
      if (v20 >> 2 > v19)
        v19 = v20 >> 2;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        if (v21 >> 61)
          sub_1C4764EE4();
        v22 = (char *)operator new(8 * v21);
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[8 * v18];
      *(_QWORD *)v23 = *(_QWORD *)(v13 - 24);
      v16 = v23 + 8;
      if (v15 != v17)
      {
        do
        {
          v24 = *((_QWORD *)v15 - 1);
          v15 -= 8;
          *((_QWORD *)v23 - 1) = v24;
          v23 -= 8;
        }
        while (v15 != v17);
        v15 = *a3;
      }
      *a3 = v23;
      a3[1] = v16;
      a3[2] = &v22[8 * v21];
      if (v15)
      {
        operator delete(v15);
        v8 = *((_DWORD *)this + 26);
      }
    }
    else
    {
      *(_QWORD *)v15 = *(_QWORD *)(v13 - 24);
      v16 = v15 + 8;
    }
    a3[1] = v16;
    *((_DWORD *)this + 26) = v8 - 1;
    if (v8 != 1)
      sub_1C56169E8((__int128 *)this);
  }
LABEL_31:
  v25 = (void *)(a4 + 32);
  *(_QWORD *)a4 = a4 + 32;
  v27 = *(_QWORD *)this;
  v26 = (const void *)*((_QWORD *)this + 1);
  if (v26 == *(const void **)this)
  {
    *(_QWORD *)(a4 + 8) = v25;
    v28 = *((unsigned int *)this + 5);
    if ((_DWORD)v28)
      memmove(v25, v26, 8 * v28);
  }
  else
  {
    *(_QWORD *)(a4 + 8) = v26;
    *((_QWORD *)this + 1) = v27;
    LODWORD(v28) = *((_DWORD *)this + 5);
  }
  *(_QWORD *)(a4 + 96) = a4 + 112;
  result = a4 + 96;
  *(_DWORD *)(a4 + 16) = *((_DWORD *)this + 4);
  *(_DWORD *)(a4 + 20) = v28;
  *(_DWORD *)(a4 + 24) = *((_DWORD *)this + 6);
  *((_QWORD *)this + 2) = 8;
  *((_DWORD *)this + 6) = 0;
  *(_QWORD *)(a4 + 104) = 0x800000000;
  if (v8)
    result = sub_1C4DB2150(result, v30);
  *(_QWORD *)(a4 + 304) = a3;
  return result;
}

_QWORD *sub_1C5644C6C(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t)result;
    v6 = result + 1;
    v7 = (uint64_t)(result + 33);
    do
    {
      if ((*(_BYTE *)v5 & 1) != 0)
      {
        v8 = 32;
        v9 = v6;
      }
      else
      {
        v8 = *(_DWORD *)(v5 + 16);
        if (!v8)
        {
          v18 = 0;
LABEL_19:
          result = sub_1C5646E98(v5, (uint64_t)v4, v4, v18);
          *result = *v4;
          v19 = *v4;
          v20 = *(unsigned int *)(v5 + 272);
          if (v20 >= *(unsigned int *)(v5 + 276))
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod(v7, v5 + 280, v20 + 1, 8);
            v20 = *(unsigned int *)(v5 + 272);
          }
          *(_QWORD *)(*(_QWORD *)(v5 + 264) + 8 * v20) = v19;
          ++*(_DWORD *)(v5 + 272);
          goto LABEL_22;
        }
        v9 = *(_QWORD **)(v5 + 8);
      }
      v10 = v8 - 1;
      v11 = ((*v4 >> 4) ^ (*v4 >> 9)) & v10;
      v12 = &v9[v11];
      v13 = *v12;
      if (*v4 != *v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = &v9[v11];
          v13 = *v12;
          if (*v4 == *v12)
            goto LABEL_22;
        }
        if (v14)
          v18 = v14;
        else
          v18 = v12;
        goto LABEL_19;
      }
LABEL_22:
      ++v4;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t sub_1C5644DB8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v30;

  if (!a2)
    return 1;
  v8 = a2;
  v10 = a3 + 8;
  while (1)
  {
    v11 = *(_QWORD *)(v8 + 24);
    if (v11)
      v12 = *(unsigned __int8 *)(v11 + 16) >= 0x1Cu;
    else
      v12 = 0;
    if (!v12)
      goto LABEL_7;
    v30 = 0;
    if (sub_1C4DCDF60(*(_QWORD *)(a1 + 2144), *(_DWORD *)(a1 + 2160), v11, &v30))
    {
      v13 = v30;
      v14 = *(_QWORD *)(a1 + 2144);
      v15 = *(unsigned int *)(a1 + 2160);
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 2144);
      v15 = *(unsigned int *)(a1 + 2160);
      v13 = v14 + 32 * v15;
    }
    if (v13 != v14 + 32 * v15 && (*(_QWORD *)(v13 + 8) == v8 || *(_QWORD *)(v13 + 16) == v8))
      goto LABEL_7;
    if ((*(_BYTE *)a3 & 1) != 0)
    {
      v16 = 32;
      v17 = v10;
    }
    else
    {
      v16 = *(_DWORD *)(a3 + 16);
      if (!v16)
        return 0;
      v17 = *(_QWORD *)(a3 + 8);
    }
    v18 = v16 - 1;
    v19 = v18 & ((v11 >> 4) ^ (v11 >> 9));
    v20 = *(_QWORD *)(v17 + 8 * v19);
    if (v11 != v20)
      break;
LABEL_23:
    if (a5)
    {
      v23 = sub_1C477672C((uint64_t)a5, v11);
      v24 = a5[1];
      v25 = v24 == *a5 ? 20 : 16;
      if (v23 != (_QWORD *)(v24 + 8 * *(unsigned int *)((char *)a5 + v25)))
        return 0;
    }
    v26 = sub_1C477672C((uint64_t)a4, v11);
    v27 = a4[1];
    v28 = v27 == *a4 ? (unsigned int *)((char *)a4 + 20) : (unsigned int *)(a4 + 2);
    if (v26 != (_QWORD *)(v27 + 8 * *v28))
      return 0;
LABEL_7:
    v8 = *(_QWORD *)(v8 + 8);
    if (!v8)
      return 1;
  }
  v21 = 1;
  while (v20 != -4096)
  {
    v22 = v19 + v21++;
    v19 = v22 & v18;
    v20 = *(_QWORD *)(v17 + 8 * v19);
    if (v11 == v20)
      goto LABEL_23;
  }
  return 0;
}

uint64_t sub_1C5644F68(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;

  if (*(unsigned __int8 *)(a2 + 16) <= 0x1Bu)
    v10 = 0;
  else
    v10 = a2;
  v11 = *(_DWORD *)(a1 + 2184);
  if (v11)
  {
    v16 = *(_QWORD *)(a1 + 2168);
    v17 = v11 - 1;
    v18 = ((v10 >> 4) ^ (v10 >> 9)) & v17;
    v19 = *(_QWORD *)(v16 + 32 * v18);
    if (v10 == v19)
      return 1;
    v20 = 1;
    result = 1;
    while (v19 != -4096)
    {
      v21 = v18 + v20++;
      v18 = v21 & v17;
      v19 = *(_QWORD *)(v16 + 32 * v18);
      if (v10 == v19)
        return result;
    }
  }
  v12 = sub_1C477672C((uint64_t)a4, a2);
  v13 = a4[1];
  if (v13 == *a4)
    v14 = (unsigned int *)a4 + 5;
  else
    v14 = (unsigned int *)(a4 + 2);
  if (v12 == (_QWORD *)(v13 + 8 * *v14))
    return sub_1C5644DB8(a1, *(_QWORD *)(a2 + 8), a3, a4, a5) ^ 1;
  else
    return 0;
}

uint64_t sub_1C5645068(uint64_t a1, uint64_t a2)
{
  if (a1 && (*(_DWORD *)(a1 + 8) & 0xFE) == 0x12)
    return *(_DWORD *)(a1 + 32) * sub_1C5648740(*(_QWORD *)(a1 + 24), a2);
  else
    return sub_1C5648740(a1, a2);
}

void sub_1C56450B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  int v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  int v68;
  char *v70;
  char *v71;
  uint64_t v72;
  int v73;
  _BYTE v74[64];
  _QWORD *v75;
  void *v76;
  uint64_t v77;
  _QWORD v78[4];

  v78[2] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 2168);
  v5 = *(unsigned int *)(*(_QWORD *)a1 + 2184);
  if ((_DWORD)v5)
  {
    v54 = v5 - 1;
    v6 = (uint64_t *)(v4 + 32 * (((_DWORD)v5 - 1) & ((a2 >> 4) ^ (a2 >> 9))));
    v55 = *v6;
    if (*v6 == a2)
      goto LABEL_3;
    v56 = 1;
    LODWORD(v57) = v54 & ((a2 >> 4) ^ (a2 >> 9));
    while (v55 != -4096)
    {
      v58 = v57 + v56++;
      v57 = v58 & v54;
      v55 = *(_QWORD *)(v4 + 32 * v57);
      if (v55 == a2)
      {
        v6 = (uint64_t *)(v4 + 32 * v57);
        goto LABEL_3;
      }
    }
  }
  v6 = (uint64_t *)(v4 + 32 * v5);
LABEL_3:
  v7 = *(_QWORD **)(a1 + 8);
  v76 = v78;
  v77 = 0x200000000;
  if (v6 != (uint64_t *)(v4 + 32 * v5))
  {
    v8 = *((unsigned int *)v6 + 4);
    if ((_DWORD)v8)
    {
      v9 = (uint64_t *)v6[1];
      v10 = &v9[v8];
      do
      {
        v11 = *v9;
        v70 = 0;
        if (sub_1C4DCDF60(*(_QWORD *)(v3 + 2144), *(_DWORD *)(v3 + 2160), v11, &v70))
          v12 = (uint64_t)v70;
        else
          v12 = *(_QWORD *)(v3 + 2144) + 32 * *(unsigned int *)(v3 + 2160);
        v13 = (uint64_t **)(v12 + 8);
        v14 = (uint64_t **)(v12 + 24);
        do
        {
          v15 = **v13;
          if (v15)
            v16 = *(unsigned __int8 *)(v15 + 16) >= 0x1Cu;
          else
            v16 = 0;
          if (v16)
          {
            if ((*(_BYTE *)(v3 + 784) & 1) != 0)
            {
              v17 = 32;
              v18 = v3 + 792;
            }
            else
            {
              v17 = *(_DWORD *)(v3 + 800);
              if (!v17)
                goto LABEL_14;
              v18 = *(_QWORD *)(v3 + 792);
            }
            v19 = v17 - 1;
            v20 = v19 & ((v15 >> 4) ^ (v15 >> 9));
            v21 = *(_QWORD *)(v18 + 8 * v20);
            if (v15 == v21)
            {
LABEL_24:
              v24 = sub_1C477672C((uint64_t)v7, **v13);
              v25 = v7[1];
              if (v25 == *v7)
                v26 = (unsigned int *)v7 + 5;
              else
                v26 = (unsigned int *)(v7 + 2);
              if (v24 == (_QWORD *)(v25 + 8 * *v26))
              {
                v27 = v77;
                if (v77 >= (unint64_t)HIDWORD(v77))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, (uint64_t)v78, v77 + 1, 8);
                  v27 = v77;
                }
                *((_QWORD *)v76 + v27) = v15;
                LODWORD(v77) = v77 + 1;
              }
            }
            else
            {
              v22 = 1;
              while (v21 != -4096)
              {
                v23 = v20 + v22++;
                v20 = v23 & v19;
                v21 = *(_QWORD *)(v18 + 8 * v20);
                if (v15 == v21)
                  goto LABEL_24;
              }
            }
          }
LABEL_14:
          ++v13;
        }
        while (v13 != v14);
        ++v9;
      }
      while (v9 != v10);
    }
  }
  if (*(_QWORD *)(a2 + 8) || (llvm::wouldInstructionBeTriviallyDead(a2, 0) & 1) == 0)
  {
    v28 = *(_DWORD *)(a2 + 20);
    if ((v28 & 0x40000000) != 0)
    {
      v30 = *(_QWORD *)(a2 - 8);
      v29 = v28 & 0x7FFFFFF;
      if (!v29)
      {
LABEL_47:
        v68 = 0;
        goto LABEL_48;
      }
    }
    else
    {
      v29 = v28 & 0x7FFFFFF;
      v30 = a2 - 32 * v29;
      if (!v29)
        goto LABEL_47;
    }
    v31 = 32 * v29;
    do
    {
      v32 = *(_QWORD *)v30;
      if (*(_QWORD *)v30)
        v33 = *(unsigned __int8 *)(*(_QWORD *)v30 + 16) >= 0x1Cu;
      else
        v33 = 0;
      if (v33)
      {
        v34 = v77;
        if (v77 >= (unint64_t)HIDWORD(v77))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, (uint64_t)v78, v77 + 1, 8);
          v34 = v77;
        }
        *((_QWORD *)v76 + v34) = v32;
        LODWORD(v77) = v77 + 1;
      }
      v30 += 32;
      v31 -= 32;
    }
    while (v31);
    goto LABEL_47;
  }
  v68 = 1;
LABEL_48:
  v70 = v74;
  v71 = v74;
  v72 = 8;
  v73 = 0;
  if ((_DWORD)v77)
  {
    v35 = (uint64_t *)v76;
    v36 = 8 * v77;
    do
    {
      v37 = (uint64_t *)*v35;
      v38 = (char *)sub_1C477672C((uint64_t)&v70, *v35);
      if (v71 == v70)
        v39 = (uint64_t *)((char *)&v72 + 4);
      else
        v39 = &v72;
      if (v38 == &v71[8 * *(unsigned int *)v39]
        && (sub_1C5644F68(v3, (uint64_t)v37, v3 + 784, (_QWORD *)(v3 + 1856), *(_QWORD **)(a1 + 8)) & 1) == 0)
      {
        v40 = sub_1C477672C(v3 + 1856, (uint64_t)v37);
        v41 = *(_QWORD *)(v3 + 1864);
        v42 = v41 == *(_QWORD *)(v3 + 1856) ? 1876 : 1872;
        if (v40 == (_QWORD *)(v41 + 8 * *(unsigned int *)(v3 + v42)))
        {
          **(_DWORD **)(a1 + 16) += (8 * sub_1C5645068(*v37, *(_QWORD *)(a1 + 24)) + 15) >> 4;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v70, (uint64_t)v37);
        }
      }
      ++v35;
      v36 -= 8;
    }
    while (v36);
  }
  sub_1C4774094(*(llvm::SmallPtrSetImplBase **)(a1 + 8), a2);
  if ((sub_1C5644F68(v3, a2, v3 + 784, (_QWORD *)(v3 + 1856), *(_QWORD **)(a1 + 8)) & 1) != 0)
  {
    v43 = 8 * sub_1C5645068(*(_QWORD *)a2, *(_QWORD *)(a1 + 24)) + 15;
    **(_DWORD **)(a1 + 16) -= v43 >> 4;
    if (*(unsigned __int8 *)(a2 + 16) <= 0x1Bu)
      v44 = 0;
    else
      v44 = a2;
    v45 = *(_QWORD *)(v3 + 2168);
    v46 = *(_DWORD *)(v3 + 2184);
    if (!v46)
    {
      v47 = 0;
LABEL_69:
      v48 = v68;
LABEL_70:
      v49 = (uint64_t *)(v45 + 32 * v47);
      goto LABEL_71;
    }
    v63 = v46 - 1;
    v64 = ((v44 >> 4) ^ (v44 >> 9)) & v63;
    v65 = *(_QWORD *)(v45 + 32 * v64);
    if (v44 == v65)
    {
LABEL_104:
      **(_DWORD **)(a1 + 32) -= v43 >> 4;
    }
    else
    {
      v66 = 1;
      while (v65 != -4096)
      {
        v67 = v64 + v66++;
        v64 = v67 & v63;
        v65 = *(_QWORD *)(v45 + 32 * (v67 & v63));
        if (v44 == v65)
          goto LABEL_104;
      }
    }
  }
  else
  {
    v45 = *(_QWORD *)(v3 + 2168);
  }
  v47 = *(_DWORD *)(v3 + 2184);
  if (!v47)
    goto LABEL_69;
  v59 = (v47 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v49 = (uint64_t *)(v45 + 32 * v59);
  v60 = *v49;
  v48 = v68;
  if (*v49 != a2)
  {
    v61 = 1;
    while (v60 != -4096)
    {
      v62 = v59 + v61++;
      v59 = v62 & (v47 - 1);
      v60 = *(_QWORD *)(v45 + 32 * v59);
      if (v60 == a2)
      {
        v49 = (uint64_t *)(v45 + 32 * v59);
        goto LABEL_71;
      }
    }
    goto LABEL_70;
  }
LABEL_71:
  if (v49 != (uint64_t *)(v45 + 32 * v47))
  {
    v50 = (uint64_t *)v49[1];
    v51 = *((unsigned int *)v49 + 4);
    if ((_DWORD)v51)
    {
      v52 = 8 * v51;
      do
      {
        v53 = *v50;
        v75 = 0;
        if (sub_1C4DCDF60(*(_QWORD *)(v3 + 2144), *(_DWORD *)(v3 + 2160), v53, &v75))
        {
          *v75 = -8192;
          *(int32x2_t *)(v3 + 2152) = vadd_s32(*(int32x2_t *)(v3 + 2152), (int32x2_t)0x1FFFFFFFFLL);
        }
        ++v50;
        v52 -= 8;
      }
      while (v52);
      v50 = (uint64_t *)v49[1];
    }
    if (v50 != v49 + 3)
      free(v50);
    *v49 = -8192;
    *(int32x2_t *)(v3 + 2176) = vadd_s32(*(int32x2_t *)(v3 + 2176), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v48)
    sub_1C5646024(v3, a2, *(_QWORD *)(a1 + 40));
  if (v71 != v70)
    free(v71);
  if (v76 != v78)
    free(v76);
}

uint64_t sub_1C56456CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, llvm::SmallPtrSetImplBase *a6)
{
  uint64_t v10;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int *v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  void (**v47)(void);
  int v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unsigned int *v54;
  BOOL v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60[3];
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  llvm::SmallPtrSetImplBase *v64;
  uint64_t v65;
  _QWORD v66[3];
  _QWORD *v67;
  uint64_t v68;

  v10 = a2;
  v68 = *MEMORY[0x1E0C80C00];
  v12 = a3 + 528;
  v13 = sub_1C477672C(a3 + 528, a2);
  v14 = *(_QWORD *)(a3 + 536);
  if (v14 == *(_QWORD *)(a3 + 528))
    v15 = (unsigned int *)(a3 + 548);
  else
    v15 = (unsigned int *)(a3 + 544);
  if (v13 != (_QWORD *)(v14 + 8 * *v15)
    && !sub_1C563BD30(v10, a4, *(int **)(a1 + 4592), *(_QWORD *)(a1 + 4616), *(unsigned __int8 *)(a1 + 4654), 1))
  {
    return v10;
  }
  v59 = a1 + 3616;
  v16 = *(unsigned int *)(a1 + 3624);
  if (v16 >= *(_DWORD *)(a1 + 3628))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v59, a1 + 3632, v16 + 1, 8);
    LODWORD(v16) = *(_DWORD *)(a1 + 3624);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 3616) + 8 * v16) = v10;
  v17 = *(_DWORD *)(a1 + 3624);
  v55 = __CFADD__(v17, 1);
  v18 = v17 + 1;
  if (v55)
  {
LABEL_10:
    v10 = 0;
    goto LABEL_11;
  }
  v58 = a4;
  while (1)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 3616) + 8 * v18 - 8);
    *(_DWORD *)(a1 + 3624) = v18 - 1;
    if (*(_BYTE *)(v10 + 16) != 83)
    {
      v20 = *(int **)(a1 + 4592);
      v21 = *(_QWORD *)(a1 + 4616);
      v22 = *(unsigned __int8 *)(a1 + 4654);
      v23 = sub_1C477672C(v12, v10);
      v24 = *(_QWORD *)(a3 + 536);
      v25 = (unsigned int *)(v24 == *(_QWORD *)(a3 + 528) ? a3 + 548 : a3 + 544);
      if (sub_1C563BD30(v10, v58, v20, v21, v22, v23 != (_QWORD *)(v24 + 8 * *v25)))
        goto LABEL_59;
    }
    v26 = (_QWORD *)a5[3];
    if (v26)
    {
      if (v26 == a5)
      {
        v67 = v66;
        (*(void (**)(_QWORD *, _QWORD *))(*a5 + 24))(a5, v66);
      }
      else
      {
        v67 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v26 + 16))(v26);
      }
    }
    else
    {
      v67 = 0;
    }
    if (!*(_QWORD *)(a1 + 4616))
      goto LABEL_52;
    v61 = v66;
    v62 = a3;
    v63 = a1 + 3616;
    v64 = a6;
    if (a6)
      sub_1C4774094(a6, *(_QWORD *)(v10 + 40));
    v60[0] = a1;
    v60[1] = (uint64_t)&v64;
    v60[2] = (uint64_t)&v61;
    if (*(_BYTE *)(v10 + 16) != 83)
    {
      v32 = sub_1C5645C28(v60, *(void **)(v10 + 40));
      goto LABEL_53;
    }
    v27 = *(_DWORD *)(v10 + 20);
    if ((v27 & 0x40000000) != 0)
    {
      v29 = *(_QWORD *)(v10 - 8);
      v30 = *(unsigned int *)(v10 + 60);
      v31 = v29 + 32 * v30;
      v28 = v27 & 0x7FFFFFF;
    }
    else
    {
      v28 = v27 & 0x7FFFFFF;
      v29 = v10 - 32 * v28;
      v30 = *(unsigned int *)(v10 + 60);
      v31 = v29 + 32 * v30;
    }
    v33 = v29 + 32 * v30 + 8 * v28;
    if (v31 != v33)
    {
      v34 = v31 + 8;
      while (1)
      {
        v35 = *(_QWORD *)(v34 - 8);
        v36 = *(_QWORD *)(v35 + 40);
        if (v36 == v35 + 40)
        {
          v38 = 0;
        }
        else
        {
          if (v36)
            v37 = v36 - 24;
          else
            v37 = 0;
          if (*(unsigned __int8 *)(v37 + 16) - 29 >= 0xB)
            v38 = 0;
          else
            v38 = v37;
        }
        v39 = v62;
        v40 = sub_1C477672C(v62 + 528, v38);
        v41 = *(_QWORD *)(v39 + 536);
        v42 = 544;
        if (v41 == *(_QWORD *)(v39 + 528))
          v42 = 548;
        if (v40 != (_QWORD *)(v41 + 8 * *(unsigned int *)(v39 + v42)))
          break;
        v65 = v38;
        v43 = v61[3];
        if (!v43)
LABEL_82:
          sub_1C485C2F0();
        if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v43 + 48))(v43, &v65))
        {
          v44 = v63;
          v45 = *(unsigned int *)(v63 + 8);
          if (v45 >= *(unsigned int *)(v63 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v63, v63 + 16, v45 + 1, 8);
            v45 = *(unsigned int *)(v44 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v44 + 8 * v45) = v38;
          ++*(_DWORD *)(v44 + 8);
        }
        v46 = sub_1C5645C28(v60, *(void **)(v34 - 8));
        v32 = v46;
        if (v34 != v33)
        {
          v34 += 8;
          if ((v46 & 1) != 0)
            continue;
        }
        goto LABEL_53;
      }
LABEL_52:
      v32 = 0;
      goto LABEL_53;
    }
    v32 = 1;
LABEL_53:
    if (v67 == v66)
    {
      v47 = (void (**)(void))(v66[0] + 32);
    }
    else
    {
      if (!v67)
        goto LABEL_58;
      v47 = (void (**)(void))(*v67 + 40);
    }
    (*v47)();
LABEL_58:
    if (!v32)
      goto LABEL_11;
LABEL_59:
    v48 = *(_DWORD *)(v10 + 20);
    if ((v48 & 0x40000000) != 0)
      break;
    v49 = v48 & 0x7FFFFFF;
    v50 = (uint64_t *)(v10 - 32 * v49);
    if (v49)
      goto LABEL_63;
LABEL_79:
    v18 = *(_DWORD *)(a1 + 3624);
    if (!v18)
      goto LABEL_10;
  }
  v50 = *(uint64_t **)(v10 - 8);
  v49 = v48 & 0x7FFFFFF;
  if (!v49)
    goto LABEL_79;
LABEL_63:
  v51 = 32 * v49;
  while (1)
  {
    v52 = sub_1C477672C(v12, *v50);
    v53 = *(_QWORD *)(a3 + 536);
    v54 = (unsigned int *)(v53 == *(_QWORD *)(a3 + 528) ? a3 + 548 : a3 + 544);
    v10 = *v50;
    if (v52 != (_QWORD *)(v53 + 8 * *v54))
      break;
    if (v10)
      v55 = *(unsigned __int8 *)(v10 + 16) >= 0x1Cu;
    else
      v55 = 0;
    if (v55)
    {
      v61 = (_QWORD *)*v50;
      v56 = a5[3];
      if (!v56)
        goto LABEL_82;
      if ((*(unsigned int (**)(uint64_t, _QWORD **))(*(_QWORD *)v56 + 48))(v56, &v61))
      {
        v57 = *(unsigned int *)(a1 + 3624);
        if (v57 >= *(unsigned int *)(a1 + 3628))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v59, a1 + 3632, v57 + 1, 8);
          v57 = *(unsigned int *)(a1 + 3624);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 3616) + 8 * v57) = v10;
        ++*(_DWORD *)(a1 + 3624);
      }
    }
    v50 += 4;
    v51 -= 32;
    if (!v51)
      goto LABEL_79;
  }
LABEL_11:
  *(_DWORD *)(a1 + 3624) = 0;
  return v10;
}

uint64_t sub_1C5645B98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;

  v2 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v3 = 32;
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 16);
    if (!v3)
      return 0;
    v2 = *(_QWORD *)(a1 + 8);
  }
  v4 = v3 - 1;
  LODWORD(v5) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v6 = (uint64_t *)(v2 + 8 * v5);
  v7 = *v6;
  if (*v6 == a2)
  {
LABEL_9:
    *v6 = -8192;
    v10 = *(_DWORD *)(a1 + 4) + 1;
    *(_DWORD *)a1 -= 2;
    *(_DWORD *)(a1 + 4) = v10;
    return 1;
  }
  v8 = 1;
  while (v7 != -4096)
  {
    v9 = v5 + v8++;
    v5 = v9 & v4;
    v7 = *(_QWORD *)(v2 + 8 * v5);
    if (v7 == a2)
    {
      v6 = (uint64_t *)(v2 + 8 * v5);
      goto LABEL_9;
    }
  }
  return 0;
}

uint64_t sub_1C5645C28(uint64_t *a1, void *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::SmallPtrSetImplBase *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v34;
  void *v35[2];
  _BYTE v36[64];
  _QWORD **v37;
  _QWORD *v38[3];

  v38[2] = *(_QWORD **)MEMORY[0x1E0C80C00];
  v3 = *a1;
  v35[0] = v36;
  v35[1] = (void *)0x1000000000;
  v38[0] = 0;
  v38[1] = 0;
  v37 = v38;
  v4 = sub_1C560DA80(*(_QWORD *)(v3 + 4616), a2);
  v5 = *(unsigned int *)(v3 + 4432);
  if (v5 >= *(_DWORD *)(v3 + 4436))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 4424, v3 + 4440, v5 + 1, 4);
    LODWORD(v5) = *(_DWORD *)(v3 + 4432);
  }
  *(_DWORD *)(*(_QWORD *)(v3 + 4424) + 4 * v5) = v4;
  v6 = *(_DWORD *)(v3 + 4432);
  v7 = __CFADD__(v6, 1);
  v8 = v6 + 1;
  *(_DWORD *)(v3 + 4432) = v8;
  if (v7)
  {
    v9 = 1;
    goto LABEL_36;
  }
  v10 = 1;
  while (1)
  {
    v11 = *(unsigned int *)(*(_QWORD *)(v3 + 4424) + 4 * v8 - 4);
    *(_DWORD *)(v3 + 4432) = v8 - 1;
    v12 = *(_QWORD *)(*(_QWORD *)(v3 + 4616) + 3352);
    v13 = *(_QWORD *)(v12 + 32 * v11);
    v14 = *(llvm::SmallPtrSetImplBase **)a1[1];
    if (v14)
      sub_1C4774094(v14, *(_QWORD *)(v12 + 32 * v11));
    if ((v10 & 1) != 0)
      goto LABEL_26;
    v15 = *(_QWORD *)(v13 + 40);
    if (v15 == v13 + 40)
    {
      v17 = 0;
    }
    else
    {
      v16 = v15 ? v15 - 24 : 0;
      v17 = *(unsigned __int8 *)(v16 + 16) - 29 >= 0xB ? 0 : v16;
    }
    v18 = (uint64_t *)a1[2];
    v19 = v18[1];
    v20 = sub_1C477672C(v19 + 528, v17);
    v21 = *(_QWORD *)(v19 + 536);
    v22 = v21 == *(_QWORD *)(v19 + 528) ? 548 : 544;
    if (v20 != (_QWORD *)(v21 + 8 * *(unsigned int *)(v19 + v22)))
      break;
    v23 = *v18;
    v34 = v17;
    v24 = *(_QWORD *)(v23 + 24);
    if (!v24)
      sub_1C485C2F0();
    if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v24 + 48))(v24, &v34))
    {
      v25 = v18[2];
      v26 = *(unsigned int *)(v25 + 8);
      if (v26 >= *(unsigned int *)(v25 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v25, v25 + 16, v26 + 1, 8);
        v26 = *(unsigned int *)(v25 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v25 + 8 * v26) = v17;
      ++*(_DWORD *)(v25 + 8);
    }
LABEL_26:
    v27 = v12 + 32 * v11;
    v28 = *(unsigned int *)(v27 + 16);
    if ((_DWORD)v28)
    {
      v29 = *(int **)(v27 + 8);
      v30 = 4 * v28;
      do
      {
        LODWORD(v34) = *v29 & 0xFFFFFF;
        if ((sub_1C48302EC((uint64_t)v35, (unsigned int *)&v34) & 0x100000000) != 0)
        {
          v31 = *v29;
          v32 = *(unsigned int *)(v3 + 4432);
          if (v32 >= *(unsigned int *)(v3 + 4436))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 4424, v3 + 4440, v32 + 1, 4);
            v32 = *(unsigned int *)(v3 + 4432);
          }
          *(_DWORD *)(*(_QWORD *)(v3 + 4424) + 4 * v32) = v31 & 0xFFFFFF;
          ++*(_DWORD *)(v3 + 4432);
        }
        ++v29;
        v30 -= 4;
      }
      while (v30);
    }
    v10 = 0;
    v8 = *(_DWORD *)(v3 + 4432);
    if (!v8)
    {
      v9 = 1;
      goto LABEL_36;
    }
  }
  v9 = 0;
LABEL_36:
  *(_DWORD *)(v3 + 4432) = 0;
  sub_1C47655E8((uint64_t)&v37, v38[0]);
  if (v35[0] != v36)
    free(v35[0]);
  return v9;
}

void sub_1C5645F10()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5645F24(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8171C80;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5645F58(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8171C80;
  a2[1] = v2;
  return result;
}

BOOL sub_1C5645F74(uint64_t a1, uint64_t *a2)
{
  char v2;

  sub_1C4774094(*(llvm::SmallPtrSetImplBase **)(a1 + 8), *a2);
  return v2 != 0;
}

void sub_1C5645F9C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5645FB0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8171CC8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5645FE4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8171CC8;
  a2[1] = v2;
  return result;
}

BOOL sub_1C5646000(uint64_t a1, uint64_t *a2)
{
  char v2;

  sub_1C4774094(*(llvm::SmallPtrSetImplBase **)(a1 + 8), *a2);
  return v2 != 0;
}

void sub_1C5646024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v6 = sub_1C477672C(a3 + 528, a2);
  v7 = *(_QWORD *)(a3 + 536);
  if (v7 == *(_QWORD *)(a3 + 528))
    v8 = (unsigned int *)(a3 + 548);
  else
    v8 = (unsigned int *)(a3 + 544);
  if (v6 != (_QWORD *)(v7 + 8 * *v8))
  {
    *v6 = -2;
    ++*(_DWORD *)(a3 + 552);
  }
  v9 = sub_1C477672C(a1 + 3456, a2);
  v10 = *(_QWORD *)(a1 + 3464);
  v11 = 3472;
  if (v10 == *(_QWORD *)(a1 + 3456))
    v11 = 3476;
  if (v9 != (_QWORD *)(v10 + 8 * *(unsigned int *)(a1 + v11)))
  {
    *v9 = -2;
    ++*(_DWORD *)(a1 + 3480);
  }
  v12 = sub_1C477672C(a1 + 3296, a2);
  v13 = *(_QWORD *)(a1 + 3304);
  v14 = 3312;
  if (v13 == *(_QWORD *)(a1 + 3296))
    v14 = 3316;
  if (v12 != (_QWORD *)(v13 + 8 * *(unsigned int *)(a1 + v14)))
  {
    *v12 = -2;
    ++*(_DWORD *)(a1 + 3320);
  }
  v15 = sub_1C477672C(a1 + 1856, a2);
  v16 = *(_QWORD *)(a1 + 1864);
  v17 = 1872;
  if (v16 == *(_QWORD *)(a1 + 1856))
    v17 = 1876;
  if (v15 != (_QWORD *)(v16 + 8 * *(unsigned int *)(a1 + v17)))
  {
    *v15 = -2;
    ++*(_DWORD *)(a1 + 1880);
  }
  if (sub_1C5645B98(a1 + 2664, a2))
  {
    v18 = *(_QWORD **)(a1 + 2928);
    v19 = *(unsigned int *)(a1 + 2936);
    v20 = &v18[v19];
    if ((_DWORD)v19)
    {
      v21 = 8 * v19;
      while (*v18 != a2)
      {
        ++v18;
        v21 -= 8;
        if (!v21)
        {
          v18 = v20;
          break;
        }
      }
    }
    if (v20 != v18 + 1)
    {
      memmove(v18, v18 + 1, (char *)v20 - (char *)(v18 + 1));
      LODWORD(v19) = *(_DWORD *)(a1 + 2936);
    }
    *(_DWORD *)(a1 + 2936) = v19 - 1;
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(a2 + 40) + 40, (uint64_t ***)a2);
  v22 = *(_QWORD *)(a2 + 24);
  v23 = *(_QWORD **)(a2 + 32);
  *v23 = v22;
  *(_QWORD *)(v22 + 8) = v23;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)a2);
  *(_BYTE *)(a1 + 4645) = 1;
}

uint64_t sub_1C56461FC(uint64_t a1, _BYTE *a2)
{
  int v2;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;

  *a2 = 0;
  v2 = *(unsigned __int8 *)(a1 + 16);
  result = 1;
  switch(v2)
  {
    case ')':
    case '-':
    case '8':
    case '9':
    case ':':
      return result;
    case '*':
    case '.':
      if ((~*(unsigned __int8 *)(a1 + 17) & 0x12) != 0)
      {
        if (v2 == 43)
          goto LABEL_9;
        if (v2 != 44)
          goto LABEL_8;
        goto LABEL_5;
      }
      return result;
    case '+':
      goto LABEL_9;
    case ',':
LABEL_5:
      v6 = &v7;
      v7 = 0;
      if (sub_1C4E7B6EC(&v6, a1) && v7 || (*(_BYTE *)(a1 + 17) & 2) == 0)
        goto LABEL_8;
LABEL_9:
      result = 1;
      *a2 = 1;
      break;
    default:
LABEL_8:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_1C56462AC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  char v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t j;
  uint64_t i;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  int v41;
  _BOOL4 v42;
  BOOL v43;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t k;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  _BYTE v60[32];
  void *v61;
  uint64_t v62;
  _BYTE v63[32];
  void *v64;
  uint64_t v65;
  _QWORD v66[3];
  unsigned int v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (byte_1ED808C28)
    return 1;
  if (*(_BYTE *)(a2 + 16) == 66
    && (sub_1C5EA5854(*(_QWORD *)(a2 - 32), a3, *(int **)(a1 + 4592), 1) & 1) != 0)
  {
    return 0;
  }
  if (!*(_BYTE *)(a1 + 4648))
    goto LABEL_88;
  v9 = sub_1C477672C((uint64_t)a4, a2);
  v10 = a4[1];
  v11 = v10 == *a4 ? (unsigned int *)((char *)a4 + 20) : (unsigned int *)(a4 + 2);
  if (v9 != (_QWORD *)(v10 + 8 * *v11))
    return 0;
  if (*(_BYTE *)(a2 + 16) != 60)
    goto LABEL_88;
  v12 = **(_QWORD **)(a2 - 32);
  v13 = *(_DWORD *)(v12 + 8);
  if ((v13 & 0xFE) == 0x12)
    v13 = *(_DWORD *)(**(_QWORD **)(v12 + 16) + 8);
  if ((v13 & 0xFFFFFF00) == 0x4000)
    goto LABEL_88;
  v61 = v63;
  v62 = 0x400000000;
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = 0;
    do
    {
      if (v15 >= HIDWORD(v62))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, (uint64_t)v63, v15 + 1, 8);
        v15 = v62;
      }
      *((_QWORD *)v61 + v15) = v14;
      v15 = v62 + 1;
      LODWORD(v62) = v62 + 1;
      v14 = *(_QWORD *)(v14 + 8);
    }
    while (v14);
  }
  v16 = 0;
  v58 = v60;
  v59 = 0x400000000;
  while ((_DWORD)v62)
  {
    v17 = (_QWORD *)*((_QWORD *)v61 + v62 - 1);
    v18 = v62 - 1;
    LODWORD(v62) = v62 - 1;
    v19 = v17[3];
    v20 = *(unsigned __int8 *)(v19 + 16);
    if (v20 >= 0x1C && v20 - 66 <= 0xC)
    {
      for (i = *(_QWORD *)(v19 + 8); i; i = *(_QWORD *)(i + 8))
      {
        if (v18 >= HIDWORD(v62))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, (uint64_t)v63, v18 + 1, 8);
          v18 = v62;
        }
        *((_QWORD *)v61 + v18) = i;
        v18 = v62 + 1;
        LODWORD(v62) = v62 + 1;
      }
LABEL_64:
      v34 = v59;
      if (v59 >= (unint64_t)HIDWORD(v59))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, (uint64_t)v60, v59 + 1, 8);
        v34 = v59;
      }
      *((_QWORD *)v58 + v34) = v19;
      LODWORD(v59) = v59 + 1;
      v30 = 2;
      goto LABEL_67;
    }
    if (v20 >= 0x1C && v20 - 41 <= 0x11)
    {
      if (v20 != 56)
        goto LABEL_82;
      v23 = *(_QWORD *)(v19 - 32);
      if (*(_BYTE *)(v23 + 16) != 16)
        goto LABEL_82;
      v24 = (_QWORD *)(v23 + 24);
      if (*(_DWORD *)(v23 + 32) >= 0x41u)
        v24 = (_QWORD *)*v24;
      v25 = (_QWORD *)*v24;
      if (*v24 == 0xFFFFFFFFLL || v25 == (_QWORD *)0xFFFF)
      {
        for (j = *(_QWORD *)(v19 + 8); j; j = *(_QWORD *)(j + 8))
        {
          if (v18 >= HIDWORD(v62))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, (uint64_t)v63, v18 + 1, 8);
            v18 = v62;
          }
          *((_QWORD *)v61 + v18) = j;
          v18 = v62 + 1;
          LODWORD(v62) = v62 + 1;
        }
        v29 = v59;
        if (v59 >= (unint64_t)HIDWORD(v59))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, (uint64_t)v60, v59 + 1, 8);
          v29 = v59;
        }
        v31 = 0;
        *((_QWORD *)v58 + v29) = v19;
        LODWORD(v59) = v59 + 1;
        v30 = 2;
      }
      else
      {
        v30 = 0;
        v31 = 1;
      }
      if (v25 != (_QWORD *)0xFFFFFFFFLL && v25 != (_QWORD *)0xFFFF)
        goto LABEL_82;
      if (!v31)
        goto LABEL_67;
      v20 = *(unsigned __int8 *)(v19 + 16);
    }
    if (v20 != 84)
    {
      if (v20 != 89)
        goto LABEL_82;
      v32 = *(_QWORD *)(v19 + 8);
      if (v32)
      {
        v33 = v62;
        do
        {
          if (v33 >= HIDWORD(v62))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, (uint64_t)v63, v33 + 1, 8);
            v33 = v62;
          }
          *((_QWORD *)v61 + v33) = v32;
          v33 = v62 + 1;
          LODWORD(v62) = v62 + 1;
          v32 = *(_QWORD *)(v32 + 8);
        }
        while (v32);
      }
      goto LABEL_64;
    }
    v35 = *(_QWORD *)(v19 - 32);
    if (!v35)
      goto LABEL_82;
    if (*(_BYTE *)(v35 + 16))
      goto LABEL_82;
    if (*(_QWORD *)(v35 + 24) != *(_QWORD *)(v19 + 72))
      goto LABEL_82;
    if ((*(_BYTE *)(v35 + 33) & 0x20) == 0)
      goto LABEL_82;
    v36 = *(_DWORD *)(v35 + 36);
    if (!sub_1C47860D0(v36) && (v36 - 1682) > 0x8B)
      goto LABEL_82;
    v16 = 1;
    llvm::SampleInfo::SampleInfo((uint64_t)&v64, v36, 1);
    if (*(_QWORD *)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF) + 32 * v67) != *v17)
      goto LABEL_82;
    v30 = 2;
LABEL_67:
    if (v30 != 2)
      goto LABEL_82;
  }
  if ((v16 & 1) == 0)
  {
LABEL_82:
    v40 = 0;
    goto LABEL_83;
  }
  if ((_DWORD)v59)
  {
    v37 = (uint64_t *)v58;
    v38 = 8 * v59;
    do
    {
      v39 = *v37++;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, v39);
      v38 -= 8;
    }
    while (v38);
  }
  v40 = 1;
LABEL_83:
  if (v58 != v60)
    free(v58);
  if (v61 != v63)
    free(v61);
  if ((v40 & 1) != 0)
    return 0;
LABEL_88:
  v41 = *(unsigned __int8 *)(a1 + 4653);
  v42 = sub_1C5EA484C(a2, *(unsigned __int8 *)(a1 + 4651));
  v43 = v41 == 0;
  if (v41)
    v4 = v42;
  else
    v4 = 0;
  if (!v43 || !v42)
    return v4;
  v4 = 1;
  if (!sub_1C5EA5854(a2, a3, *(int **)(a1 + 4592), 1))
    return v4;
  v45 = *(_QWORD *)(a2 - 32);
  v46 = *(unsigned __int8 *)(v45 + 16);
  if (v46 == 5)
    return 0;
  do
  {
    if (v46 != 77)
      break;
    v45 = *(_QWORD *)(v45 - 32);
    v46 = *(unsigned __int8 *)(v45 + 16);
  }
  while (v45);
  if ((v46 | 2) != 0x3E)
    return 1;
  v64 = v66;
  v65 = 0x1000000000;
  if (v46 == 60)
  {
    v47 = v45;
    goto LABEL_105;
  }
  if (v46 != 62)
  {
LABEL_126:
    v4 = 0;
    goto LABEL_128;
  }
  v47 = *(_QWORD *)(v45 - 32 * (*(_DWORD *)(v45 + 20) & 0x7FFFFFF));
  if (*(_BYTE *)(v47 + 16) == 60)
  {
LABEL_105:
    v49 = *(_QWORD *)(v47 + 8);
    if (v49)
    {
      v48 = 0;
      do
      {
        v50 = *(_QWORD *)(v49 + 24);
        if (v48 >= HIDWORD(v65))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, (uint64_t)v66, v48 + 1, 8);
          v48 = v65;
        }
        *((_QWORD *)v64 + v48) = v50;
        v48 = v65 + 1;
        LODWORD(v65) = v65 + 1;
        v49 = *(_QWORD *)(v49 + 8);
      }
      while (v49);
      goto LABEL_112;
    }
    goto LABEL_126;
  }
  v66[0] = v45;
  v48 = 1;
  while (1)
  {
    v52 = *((_QWORD *)v64 + --v48);
    LODWORD(v65) = v48;
    v53 = *(unsigned __int8 *)(v52 + 16);
    if (v52)
    {
      if (v53 == 62)
        break;
    }
    if (v53 == 77)
      goto LABEL_121;
LABEL_112:
    if (!v48)
      goto LABEL_126;
  }
  v54 = *(_DWORD *)(v52 + 20) & 0x7FFFFFF;
  if ((_DWORD)v54 == 1)
  {
LABEL_121:
    for (k = *(_QWORD *)(v52 + 8); k; k = *(_QWORD *)(k + 8))
    {
      v57 = *(_QWORD *)(k + 24);
      if (v48 >= HIDWORD(v65))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, (uint64_t)v66, v48 + 1, 8);
        v48 = v65;
      }
      *((_QWORD *)v64 + v48) = v57;
      v48 = v65 + 1;
      LODWORD(v65) = v65 + 1;
    }
    goto LABEL_112;
  }
  v55 = 1;
  while (*(_BYTE *)(*(_QWORD *)(v52 - 32 * v54 + 32 * v55) + 16) == 16)
  {
    if ((_DWORD)v54 == ++v55)
      goto LABEL_121;
  }
  v4 = 1;
LABEL_128:
  if (v64 != v66)
    free(v64);
  return v4;
}

double sub_1C56469C8(uint64_t a1, uint64_t *a2)
{
  char v4;
  double result;
  uint64_t *v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;

  v9 = 0;
  v4 = sub_1C4A96148(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  v6 = v9;
  if ((v4 & 1) != 0)
    return result;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_9:
    sub_1C5646AB4(a1, v8);
    v9 = 0;
    sub_1C4A96148(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    v6 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*v6 != -4096)
    --*(_DWORD *)(a1 + 12);
  *v6 = *a2;
  v6[1] = (uint64_t)(v6 + 3);
  *(_QWORD *)&result = 0x100000000;
  v6[2] = 0x100000000;
  return result;
}

_QWORD *sub_1C5646AB4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    if (!(_DWORD)v3)
LABEL_31:
      JUMPOUT(0x1CAA32FB4);
    v12 = 32 * v3;
    v13 = v4;
    while (1)
    {
      v14 = *(_QWORD *)v13;
      if ((*(_QWORD *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        break;
LABEL_21:
      v13 += 32;
      v12 -= 32;
      if (!v12)
        goto LABEL_31;
    }
    v23 = 0;
    sub_1C4A96148(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v23);
    v15 = v23;
    *v23 = *(_QWORD *)v13;
    v16 = v15 + 3;
    v15[1] = v15 + 3;
    v15[2] = 0x100000000;
    v17 = *(void **)(v13 + 8);
    if ((_QWORD *)v13 == v15 || (v18 = *(unsigned int *)(v13 + 16), !(_DWORD)v18))
    {
LABEL_19:
      ++*(_DWORD *)(a1 + 8);
      if ((void *)(v13 + 24) != v17)
        free(v17);
      goto LABEL_21;
    }
    if ((void *)(v13 + 24) != v17)
    {
      v15[1] = v17;
      v20 = *(_DWORD *)(v13 + 20);
      *((_DWORD *)v15 + 4) = v18;
      *((_DWORD *)v15 + 5) = v20;
      *(_QWORD *)(v13 + 8) = v13 + 24;
      *(_DWORD *)(v13 + 20) = 0;
      v17 = (void *)(v13 + 24);
      goto LABEL_18;
    }
    if (v18 >= 2)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v15 + 1), (uint64_t)(v15 + 3), v18, 8);
      v19 = *(unsigned int *)(v13 + 16);
      if (!(_DWORD)v19)
        goto LABEL_17;
      v17 = *(void **)(v13 + 8);
      v16 = (void *)v15[1];
    }
    else
    {
      v19 = *(unsigned int *)(v13 + 16);
    }
    memcpy(v16, v17, 8 * v19);
LABEL_17:
    *((_DWORD *)v15 + 4) = v18;
    v17 = *(void **)(v13 + 8);
LABEL_18:
    *(_DWORD *)(v13 + 16) = 0;
    goto LABEL_19;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v21 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v21)
  {
    v22 = 32 * v21;
    do
    {
      *result = -4096;
      result += 4;
      v22 -= 32;
    }
    while (v22);
  }
  return result;
}

BOOL sub_1C5646CB4(uint64_t a1)
{
  _BOOL8 result;
  int v3;
  unsigned int v4;

  result = 0;
  if (a1)
  {
    v3 = *(_DWORD *)(a1 + 8);
    if (v3 == 15)
    {
      if ((v3 & 0xFE) == 0x12)
        v4 = *(_DWORD *)(**(_QWORD **)(a1 + 16) + 8) & 0xFFFFFF00;
      else
        v4 = v3 & 0xFFFFFF00;
      return v4 == 512 || v4 == 0x4000;
    }
  }
  return result;
}

void sub_1C5646D14()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5646D28(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8171D10;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5646D5C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8171D10;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C5646D78(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *a2;
  v19 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = v3 + 8;
  if ((*(_BYTE *)v3 & 1) != 0)
  {
    v5 = 32;
  }
  else
  {
    v5 = *(_DWORD *)(v3 + 16);
    if (!v5)
    {
      v15 = 0;
      goto LABEL_17;
    }
    v4 = *(_QWORD *)(v3 + 8);
  }
  v6 = v5 - 1;
  v7 = v6 & ((v2 >> 4) ^ (v2 >> 9));
  v8 = (_QWORD *)(v4 + 8 * v7);
  v9 = *v8;
  if (v2 == *v8)
    return 0;
  v10 = 0;
  v11 = 1;
  while (v9 != -4096)
  {
    if (v10)
      v12 = 0;
    else
      v12 = v9 == -8192;
    if (v12)
      v10 = v8;
    v13 = v7 + v11++;
    v7 = v13 & v6;
    v8 = (_QWORD *)(v4 + 8 * v7);
    v9 = *v8;
    if (v2 == *v8)
      return 0;
  }
  if (v10)
    v15 = v10;
  else
    v15 = v8;
LABEL_17:
  v16 = sub_1C5646E98(*(_QWORD *)(a1 + 8), (uint64_t)&v19, &v19, v15);
  *v16 = v19;
  v17 = v19;
  v18 = *(unsigned int *)(v3 + 272);
  if (v18 >= *(_DWORD *)(v3 + 276))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 264, v3 + 280, v18 + 1, 8);
    LODWORD(v18) = *(_DWORD *)(v3 + 272);
  }
  *(_QWORD *)(*(_QWORD *)(v3 + 264) + 8 * v18) = v17;
  ++*(_DWORD *)(v3 + 272);
  return 1;
}

_QWORD *sub_1C5646E98(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _QWORD *v20;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 32;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1C4993D9C(a1, 2 * v8);
    v11 = a1 + 8;
    v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v12 = 32;
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      v11 = *(_QWORD *)(a1 + 8);
    }
    v9 = *(_DWORD *)a1 & 1;
    v13 = v12 - 1;
    v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (_QWORD *)(v11 + 8 * v14);
    v15 = *a4;
    if (*a3 != *a4)
    {
      v16 = 0;
      v17 = 1;
      while (v15 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v15 == -8192;
        if (v18)
          v16 = a4;
        v19 = v14 + v17++;
        v14 = v19 & v13;
        a4 = (_QWORD *)(v11 + 8 * v14);
        v15 = *a4;
        if (*a3 == *a4)
          goto LABEL_7;
      }
      if (v16)
        a4 = v16;
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1C4993D9C(a1, v8);
      v20 = 0;
      sub_1C4993B80(a1, a3, &v20);
      a4 = v20;
      v6 = *(_DWORD *)a1;
    }
    v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

unint64_t sub_1C564700C(uint64_t *a1, uint64_t *a2)
{
  unsigned __int8 v4;
  unint64_t v5;
  unint64_t i;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BOOL4 v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v41 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v41 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v41;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v5 = qword_1ED7EAC80;
  if (a1 == a2)
  {
    v7 = 0;
    return sub_1C49CE808(&v45, v7, v5);
  }
  else
  {
    for (i = 0; i <= 0x38; i += 8)
    {
      v7 = i + 8;
      v8 = *a1;
      a1 += 4;
      *(uint64_t *)((char *)&v45 + i) = v8;
      if (a1 == a2)
        return sub_1C49CE808(&v45, v7, v5);
    }
    v10 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v5 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    v11 = __ROR8__(v5 ^ 0xB492B66FBE98F273, 49);
    v12 = v5 ^ (v5 >> 47);
    v13 = v5 ^ (((0x9DDFEA08EB382D69 * (v12 ^ (0xB492B66FBE98F273 * v5))) ^ v5) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                            * (v12 ^ (0xB492B66FBE98F273 * v5)));
    v14 = v11 + v5 + v46;
    v15 = v50 + v11 - 0x4B6D499041670D8DLL * __ROR8__(v51 + v5 - 0x4B6D499041670D8DLL * v5, 42);
    v16 = v45 - 0x6D8ED9027DD26057 * v5;
    v17 = v12 + v16;
    v18 = v16 + v46 + v47;
    v19 = __ROR8__(v18, 44) + v16;
    v20 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v13) ^ ((0x9DDFEA08EB382D69 * v13) >> 47));
    v21 = (0xB492B66FBE98F273 * __ROR8__(v14, 37)) ^ v20;
    v22 = __ROR8__(v12 - 0x622015F714C7D297 * (v10 ^ (v10 >> 47)), 33);
    v23 = v19 + __ROR8__(v21 + v17 + v48, 21);
    v24 = 0xB492B66FBE98F273 * v22;
    v25 = v18 + v48;
    v26 = v20 + v49 - 0x4B6D499041670D8DLL * v22;
    v27 = __ROR8__(v50 + v51 + v26, 44) + v26 + __ROR8__(v15 + v47 + v52 + v26, 21);
    v28 = v50 + v51 + v26 + v52;
    v29 = 64;
    if (a1 != a2)
    {
      v30 = v21;
      do
      {
        v31 = a1 + 4;
        v44 = v25;
        v45 = *a1;
        v43 = v30;
        if (a1 + 4 == a2)
        {
          v42 = 1;
          v40 = 8;
        }
        else
        {
          v46 = a1[4];
          v31 = a1 + 8;
          if (a1 + 8 == a2)
          {
            v42 = 1;
            v40 = 16;
          }
          else
          {
            v47 = a1[8];
            v31 = a1 + 12;
            if (a1 + 12 == a2)
            {
              v42 = 1;
              v40 = 24;
            }
            else
            {
              v48 = a1[12];
              v31 = a1 + 16;
              if (a1 + 16 == a2)
              {
                v42 = 1;
                v40 = 32;
              }
              else
              {
                v49 = a1[16];
                v31 = a1 + 20;
                if (a1 + 20 == a2)
                {
                  v42 = 1;
                  v40 = 40;
                }
                else
                {
                  v50 = a1[20];
                  v31 = a1 + 24;
                  if (a1 + 24 == a2)
                  {
                    v42 = 1;
                    v40 = 48;
                  }
                  else
                  {
                    v51 = a1[24];
                    v31 = a1 + 28;
                    if (a1 + 28 != a2)
                    {
                      v52 = a1[28];
                      a1 += 32;
                      v42 = a1 == a2;
                      v40 = 64;
                      goto LABEL_20;
                    }
                    v42 = 1;
                    v40 = 56;
                  }
                }
              }
            }
          }
        }
        a1 = v31;
LABEL_20:
        if ((v40 & 0x38) != 0)
          sub_1C4E37E60(&v45, (_BYTE *)&v45 + v40, &v53);
        v32 = v15 + v24 + v44 + v46;
        v15 = v50 + v44 - 0x4B6D499041670D8DLL * __ROR8__(v23 + v15 + v51, 42);
        v33 = v45 - 0x4B6D499041670D8DLL * v23;
        v34 = v33 + v46 + v47;
        v21 = (0xB492B66FBE98F273 * __ROR8__(v32, 37)) ^ v27;
        v23 = __ROR8__(v34, 44) + v33 + __ROR8__(v21 + v28 + v33 + v48, 21);
        v24 = 0xB492B66FBE98F273 * __ROR8__(v28 + v43, 33);
        v35 = v24 + v27 + v49;
        v25 = v34 + v48;
        v27 = __ROR8__(v50 + v51 + v35, 44) + v35 + __ROR8__(v15 + v47 + v35 + v52, 21);
        v28 = v50 + v51 + v35 + v52;
        v29 += v40;
        v30 = v21;
      }
      while (!v42);
    }
    v36 = 0x9DDFEA08EB382D69
        * (v28 ^ ((0x9DDFEA08EB382D69 * (v25 ^ v28)) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ v28)));
    v37 = v21 - 0x4B6D499041670D8DLL * (v15 ^ (v15 >> 47)) - 0x622015F714C7D297 * (v36 ^ (v36 >> 47));
    v38 = 0x9DDFEA08EB382D69
        * (v27 ^ ((0x9DDFEA08EB382D69 * (v23 ^ v27)) >> 47) ^ (0x9DDFEA08EB382D69 * (v23 ^ v27)));
    v39 = v24 - 0x4B6D499041670D8DLL * (v29 ^ (v29 >> 47)) - 0x622015F714C7D297 * (v38 ^ (v38 >> 47));
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69
           * (v39 ^ ((0x9DDFEA08EB382D69 * (v37 ^ v39)) >> 47) ^ (0x9DDFEA08EB382D69 * (v37 ^ v39)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v37 ^ v39)) >> 47) ^ (0x9DDFEA08EB382D69 * (v37 ^ v39)))) >> 47));
  }
}

void sub_1C56474D0(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t *v8;
  unint64_t i;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t k;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  unint64_t v32;
  BOOL v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  BOOL v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t j;
  unint64_t v43;
  uint64_t v44;
  int v45;
  __int128 v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  BOOL v50;
  __int128 v51;
  __int128 *v52;
  unint64_t v53;
  __int128 v54;
  __int128 *v55;
  __int128 *v56;
  __int128 *v57;
  __int128 *v58;
  unint64_t v59;
  unint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  unint64_t v68;
  uint64_t v69;
  BOOL v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int64_t v83;
  int64_t v84;
  int64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unsigned int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  __int128 v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unsigned int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  __int128 v122;
  uint64_t v124;
  unint64_t v125;
  unsigned int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  unint64_t v130;
  BOOL v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;

__int128 *sub_1C5648018(__int128 *result, unint64_t *a2, __int128 *a3)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;

  v3 = *a2;
  if (*a2 < *(_QWORD *)result || *a2 == *(_QWORD *)result && *((_DWORD *)a2 + 4) < *((_DWORD *)result + 4))
  {
    if (*(_QWORD *)a3 < v3 || *(_QWORD *)a3 == v3 && *((_DWORD *)a3 + 4) < *((_DWORD *)a2 + 4))
    {
      v4 = *((_QWORD *)result + 2);
      v5 = *result;
      v6 = *((_QWORD *)a3 + 2);
      *result = *a3;
      *((_QWORD *)result + 2) = v6;
    }
    else
    {
      v13 = *((_QWORD *)result + 2);
      v14 = *result;
      v15 = a2[2];
      *result = *(_OWORD *)a2;
      *((_QWORD *)result + 2) = v15;
      *(_OWORD *)a2 = v14;
      a2[2] = v13;
      if (*(_QWORD *)a3 >= *a2 && (*(_QWORD *)a3 != *a2 || *((_DWORD *)a3 + 4) >= *((_DWORD *)a2 + 4)))
        return result;
      v4 = a2[2];
      v5 = *(_OWORD *)a2;
      v16 = *((_QWORD *)a3 + 2);
      *(_OWORD *)a2 = *a3;
      a2[2] = v16;
    }
    *a3 = v5;
    *((_QWORD *)a3 + 2) = v4;
    return result;
  }
  if (*(_QWORD *)a3 < v3 || *(_QWORD *)a3 == v3 && *((_DWORD *)a3 + 4) < *((_DWORD *)a2 + 4))
  {
    v7 = a2[2];
    v8 = *(_OWORD *)a2;
    v9 = *((_QWORD *)a3 + 2);
    *(_OWORD *)a2 = *a3;
    a2[2] = v9;
    *a3 = v8;
    *((_QWORD *)a3 + 2) = v7;
    if (*a2 < *(_QWORD *)result || *a2 == *(_QWORD *)result && *((_DWORD *)a2 + 4) < *((_DWORD *)result + 4))
    {
      v10 = *((_QWORD *)result + 2);
      v11 = *result;
      v12 = a2[2];
      *result = *(_OWORD *)a2;
      *((_QWORD *)result + 2) = v12;
      *(_OWORD *)a2 = v11;
      a2[2] = v10;
    }
  }
  return result;
}

BOOL sub_1C564817C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 *v22;
  __int128 *v23;
  __int128 *v24;
  __int128 *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__int128 *)(a2 - 24);
      v7 = *(_QWORD *)(a2 - 24);
      if (v7 < *(_QWORD *)a1 || v7 == *(_QWORD *)a1 && *(_DWORD *)(a2 - 8) < *(_DWORD *)(a1 + 16))
      {
        v8 = *(_QWORD *)(a1 + 16);
        v9 = *(_OWORD *)a1;
        v10 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(_QWORD *)(a1 + 16) = v10;
        *v6 = v9;
        *(_QWORD *)(a2 - 8) = v8;
      }
      return result;
    case 3uLL:
      sub_1C5648018((__int128 *)a1, (unint64_t *)(a1 + 24), (__int128 *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_1C56484CC(a1, (unint64_t *)(a1 + 24), a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      v22 = (__int128 *)(a1 + 24);
      v23 = (__int128 *)(a1 + 48);
      v24 = (__int128 *)(a1 + 72);
      sub_1C56484CC(a1, (unint64_t *)(a1 + 24), a1 + 48, a1 + 72);
      v25 = (__int128 *)(a2 - 24);
      v26 = *(_QWORD *)(a2 - 24);
      v27 = *(_QWORD *)(a1 + 72);
      if (v26 < v27 || v26 == v27 && *(_DWORD *)(a2 - 8) < *(_DWORD *)(a1 + 88))
      {
        v28 = *(_QWORD *)(a1 + 88);
        v29 = *v24;
        v30 = *(_QWORD *)(a2 - 8);
        *v24 = *v25;
        *(_QWORD *)(a1 + 88) = v30;
        *v25 = v29;
        *(_QWORD *)(a2 - 8) = v28;
        if (*(_QWORD *)v24 < *(_QWORD *)v23
          || *(_QWORD *)v24 == *(_QWORD *)v23 && *(_DWORD *)(a1 + 88) < *(_DWORD *)(a1 + 64))
        {
          v31 = *(_QWORD *)(a1 + 64);
          v32 = *v23;
          *v23 = *v24;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
          *v24 = v32;
          *(_QWORD *)(a1 + 88) = v31;
          if (*(_QWORD *)v23 < *(_QWORD *)v22
            || *(_QWORD *)v23 == *(_QWORD *)v22 && *(_DWORD *)(a1 + 64) < *(_DWORD *)(a1 + 40))
          {
            v33 = *(_QWORD *)(a1 + 40);
            v34 = *v22;
            *v22 = *v23;
            *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
            *v23 = v34;
            *(_QWORD *)(a1 + 64) = v33;
            v35 = *(_QWORD *)(a1 + 24);
            if (v35 < *(_QWORD *)a1 || v35 == *(_QWORD *)a1 && *(_DWORD *)(a1 + 40) < *(_DWORD *)(a1 + 16))
            {
              v36 = *(_QWORD *)(a1 + 16);
              v37 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v22;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
              *v22 = v37;
              *(_QWORD *)(a1 + 40) = v36;
            }
          }
        }
      }
      return 1;
    default:
      v11 = a1 + 48;
      sub_1C5648018((__int128 *)a1, (unint64_t *)(a1 + 24), (__int128 *)(a1 + 48));
      v12 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  do
  {
    v15 = *(_QWORD *)v12;
    if (*(_QWORD *)v12 >= *(_QWORD *)v11)
    {
      if (*(_QWORD *)v12 != *(_QWORD *)v11)
        goto LABEL_21;
      v16 = *(_DWORD *)(v12 + 16);
      if (v16 >= *(_DWORD *)(v11 + 16))
        goto LABEL_21;
    }
    else
    {
      v16 = *(_DWORD *)(v12 + 16);
    }
    v17 = *(_QWORD *)(v12 + 8);
    v18 = *(_DWORD *)(v12 + 20);
    *(_OWORD *)v12 = *(_OWORD *)v11;
    *(_QWORD *)(v12 + 16) = *(_QWORD *)(v11 + 16);
    v19 = a1;
    if (v11 != a1)
    {
      v20 = v13;
      while (1)
      {
        v21 = *(_QWORD *)(a1 + v20 + 24);
        if (v15 >= v21)
        {
          if (v15 != v21)
          {
            v19 = a1 + v20 + 48;
            goto LABEL_20;
          }
          if (v16 >= *(_DWORD *)(a1 + v20 + 40))
            break;
        }
        v11 -= 24;
        *(_OWORD *)(a1 + v20 + 48) = *(_OWORD *)(a1 + v20 + 24);
        *(_QWORD *)(a1 + v20 + 64) = *(_QWORD *)(a1 + v20 + 40);
        v20 -= 24;
        if (v20 == -48)
        {
          v19 = a1;
          goto LABEL_20;
        }
      }
      v19 = v11;
    }
LABEL_20:
    *(_QWORD *)v19 = v15;
    *(_QWORD *)(v19 + 8) = v17;
    *(_DWORD *)(v19 + 16) = v16;
    *(_DWORD *)(v19 + 20) = v18;
    if (++v14 == 8)
      return v12 + 24 == a2;
LABEL_21:
    v11 = v12;
    v13 += 24;
    v12 += 24;
  }
  while (v12 != a2);
  return 1;
}

__n128 sub_1C56484CC(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  sub_1C5648018((__int128 *)a1, a2, (__int128 *)a3);
  if (*(_QWORD *)a4 < *(_QWORD *)a3 || *(_QWORD *)a4 == *(_QWORD *)a3 && *(_DWORD *)(a4 + 16) < *(_DWORD *)(a3 + 16))
  {
    v9 = *(_QWORD *)(a3 + 16);
    result = *(__n128 *)a3;
    v10 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v10;
    *(__n128 *)a4 = result;
    *(_QWORD *)(a4 + 16) = v9;
    if (*(_QWORD *)a3 < *a2 || *(_QWORD *)a3 == *a2 && *(_DWORD *)(a3 + 16) < *((_DWORD *)a2 + 4))
    {
      v11 = a2[2];
      result = *(__n128 *)a2;
      v12 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v12;
      *(__n128 *)a3 = result;
      *(_QWORD *)(a3 + 16) = v11;
      if (*a2 < *(_QWORD *)a1 || *a2 == *(_QWORD *)a1 && *((_DWORD *)a2 + 4) < *(_DWORD *)(a1 + 16))
      {
        v13 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v14 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        a2[2] = v13;
      }
    }
  }
  return result;
}

_QWORD *sub_1C56485E0(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v1 = result;
  v2 = *(_DWORD *)result;
  if (*(_DWORD *)result <= 1u && !*((_DWORD *)result + 1))
    return result;
  if ((v2 & 1) != 0)
  {
    v3 = result + 1;
    v4 = result + 33;
    goto LABEL_6;
  }
  v6 = *((unsigned int *)result + 4);
  if (((2 * v2) & 0xFFFFFFFC) >= v6 || v6 < 0x41)
  {
    if (!(_DWORD)v6)
    {
      v5 = 0;
LABEL_8:
      *(_DWORD *)result = v5;
      *((_DWORD *)result + 1) = 0;
      return result;
    }
    v3 = (_QWORD *)result[1];
    v4 = &v3[v6];
    do
LABEL_6:
      *v3++ = -4096;
    while (v3 != v4);
    v5 = *(_DWORD *)result & 1;
    goto LABEL_8;
  }
  v7 = 1 << (33 - __clz((v2 >> 1) - 1));
  if (v2 >= 2)
    v8 = v7;
  else
    v8 = 0;
  if ((_DWORD)v8 != (_DWORD)v6)
  {
    v9 = result + 1;
    result = (_QWORD *)MEMORY[0x1CAA32FB4](result[1], 8);
    if (v8 <= 0x20)
    {
      *v1 = 1;
    }
    else
    {
      *(_DWORD *)v1 &= ~1u;
      result = operator new(8 * v8, (std::align_val_t)8uLL);
      v1[1] = result;
      v1[2] = v8;
      v10 = *(_DWORD *)v1;
      *v1 = *(_DWORD *)v1 & 1;
      if ((v10 & 1) == 0)
      {
        v11 = &result[v8];
        v9 = result;
        goto LABEL_18;
      }
    }
    v11 = v1 + 33;
    do
LABEL_18:
      *v9++ = -4096;
    while (v9 != v11);
    return result;
  }
  *result = 0;
  if (v2 >= 2)
  {
    v12 = (_QWORD *)result[1];
    v13 = 8 * v6;
    do
    {
      *v12++ = -4096;
      v13 -= 8;
    }
    while (v13);
  }
  return result;
}

uint64_t sub_1C5648740(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  unint64_t v8;
  uint64_t v10;

  if (a1 && (*(_DWORD *)(a1 + 8) & 0xFE) == 0x12)
  {
    v4 = *(_QWORD *)(a1 + 24);
    v5 = a2;
  }
  else
  {
    v5 = a2;
    v4 = a1;
  }
  sub_1C4768AD0(v5, v4);
  if ((_DWORD)v7 == 1)
  {
    v10 = v6;
    v6 = v10;
  }
  v8 = (unint64_t)(v6 + 7) >> 3;
  if (v8 <= 2)
    return 2;
  else
    return v8;
}

BOOL sub_1C56487C0(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = (_QWORD *)*a1;
  v5 = sub_1C477672C(*a1, *a2);
  v6 = v5;
  v7 = v4[1];
  v8 = 16;
  if (v7 == *v4)
    v8 = 20;
  v9 = (_QWORD *)(v7 + 8 * *(unsigned int *)((char *)v4 + v8));
  if (v5 != v9)
    sub_1C5645B98(a1[1], *a2);
  return v6 != v9;
}

_QWORD *sub_1C5648834(_QWORD *result)
{
  int v1;
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;

  v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if ((v1 & 1) != 0)
    {
      v2 = result + 1;
      v3 = result + 33;
    }
    else
    {
      v5 = *((unsigned int *)result + 4);
      if (((2 * v1) & 0xFFFFFFFC) < v5 && v5 >= 0x41)
        return sub_1C56488B0(result);
      if (!(_DWORD)v5)
      {
        v4 = 0;
LABEL_6:
        *(_DWORD *)result = v4;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      v2 = (_QWORD *)result[1];
      v3 = &v2[v5];
    }
    do
      *v2++ = -4096;
    while (v2 != v3);
    v4 = *(_DWORD *)result & 1;
    goto LABEL_6;
  }
  return result;
}

_QWORD *sub_1C56488B0(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  int v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = 1 << (33 - __clz((*(_DWORD *)result >> 1) - 1));
  if (*(_DWORD *)result >= 2u)
    v4 = v3;
  else
    v4 = 0;
  if ((v2 & 1) != 0 && v4 < 0x21)
  {
    v6 = result + 33;
    *result = 1;
    v5 = result + 1;
    do
LABEL_13:
      *v5++ = -4096;
    while (v5 != v6);
    return result;
  }
  if ((v2 & 1) != 0)
    return sub_1C5643C94(v1, v4);
  if (v4 != *((_DWORD *)result + 4))
  {
    MEMORY[0x1CAA32FB4](result[1], 8);
    return sub_1C5643C94(v1, v4);
  }
  *result = 0;
  if (v2 >= 2)
  {
    v5 = (_QWORD *)result[1];
    v6 = &v5[v4];
    goto LABEL_13;
  }
  return result;
}

void sub_1C564896C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5648980(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8171D58;
  result[1] = v3;
  return result;
}

uint64_t sub_1C56489B4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8171D58;
  a2[1] = v2;
  return result;
}

_QWORD *sub_1C56489D0(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  v3 = result[1];
  v4 = *(unsigned int *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(result[1], v3 + 16, v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = v2;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

uint64_t sub_1C5648A2C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_5;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_5;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C5648ADC(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _QWORD *v20;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 4;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1C5648C50(a1, 2 * v8);
    v11 = a1 + 8;
    v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v12 = 4;
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      v11 = *(_QWORD *)(a1 + 8);
    }
    v9 = *(_DWORD *)a1 & 1;
    v13 = v12 - 1;
    v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (_QWORD *)(v11 + 8 * v14);
    v15 = *a4;
    if (*a3 != *a4)
    {
      v16 = 0;
      v17 = 1;
      while (v15 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v15 == -8192;
        if (v18)
          v16 = a4;
        v19 = v14 + v17++;
        v14 = v19 & v13;
        a4 = (_QWORD *)(v11 + 8 * v14);
        v15 = *a4;
        if (*a3 == *a4)
          goto LABEL_7;
      }
      if (v16)
        a4 = v16;
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1C5648C50(a1, v8);
      v20 = 0;
      sub_1C5648A2C(a1, a3, &v20);
      a4 = v20;
      v6 = *(_DWORD *)a1;
    }
    v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

int *sub_1C5648C50(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5648DB8((int *)a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 40; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C5648DB8((int *)a1, v14, v8);
}

int *sub_1C5648DB8(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int *v9;
  int v10;
  unsigned int v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 10;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = (_QWORD *)*((_QWORD *)result + 1);
    v6 = &v5[v4];
  }
  do
    *v5++ = -4096;
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v8 = 4;
        v9 = result + 2;
      }
      else
      {
        v9 = (int *)*((_QWORD *)result + 1);
        v8 = result[4];
      }
      v10 = v8 - 1;
      v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v12 = &v9[2 * v11];
      v13 = *(_QWORD *)v12;
      if (v7 != *(_QWORD *)v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = &v9[2 * (v17 & v10)];
          v13 = *(_QWORD *)v12;
          if (v7 == *(_QWORD *)v12)
            goto LABEL_10;
        }
        if (v14)
          v12 = v14;
      }
LABEL_10:
      *(_QWORD *)v12 = v7;
      *result += 2;
    }
    ++a2;
  }
  return result;
}

void sub_1C5648EBC(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t **v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v20;
  int v21;
  uint64_t ***v22;
  llvm::PointerType *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ****v29;
  uint64_t ***v30;
  int v31;
  int v32;
  uint64_t ***v33;
  char *v34;
  uint64_t **v35;
  uint64_t **v36;
  const char *v37;
  char *v38;
  llvm::DISubprogram *v39;
  uint64_t **v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t ****v45;
  uint64_t ***v46;
  uint64_t *v47;
  llvm::ValueSymbolTable *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  uint64_t ****v56;
  uint64_t ***v57;
  uint64_t ****v58;
  int v59;
  BOOL v60;
  unsigned int v61;
  uint64_t v62;
  llvm::DIBuilder **v63;
  uint64_t v64;
  unsigned int *ArtificialSubprogram;
  llvm::MDNode *ArtificialType;
  uint64_t v67;
  uint64_t i;
  _QWORD *v69;
  uint64_t v70;
  unsigned int v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  _QWORD *v76;
  uint64_t ***v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unsigned int *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  int v94;
  int v95;
  _QWORD *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t *v100;
  _QWORD *v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  unsigned int v110;
  _QWORD *v111;
  uint64_t ***v112;
  char *v113;
  char *v114;
  llvm::Value *v115;
  uint64_t **v116;
  _QWORD *v117;
  uint64_t **v118;
  uint64_t v119;
  uint64_t v120;
  unsigned __int8 **v121;
  int v122;
  unsigned __int8 *v123;
  unsigned __int8 *v124;
  unsigned __int8 *v125;
  uint64_t v126;
  _QWORD *v127;
  unint64_t v128;
  unsigned int v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t **v135;
  unint64_t v136;
  uint64_t **v137;
  const std::nothrow_t *v138;
  unint64_t v139;
  uint64_t **v140;
  BOOL v141;
  uint64_t **v142;
  _QWORD *v143;
  char *v144;
  unint64_t v145;
  char *v146;
  const std::nothrow_t *v147;
  unint64_t v148;
  char *v149;
  char *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  int v156;
  unsigned int v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  int v161;
  BOOL v162;
  unsigned int v163;
  _QWORD *v164;
  _QWORD *v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t ***v168;
  uint64_t *v169;
  _QWORD *v170;
  uint64_t j;
  uint64_t v172;
  uint64_t v173;
  uint64_t k;
  uint64_t v175;
  uint64_t m;
  int v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t *v183;
  uint64_t v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  BOOL v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  int v192;
  int v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  const llvm::APInt *v202;
  llvm::ConstantInt *v203;
  llvm::ValueHandleBase *v204;
  int v205;
  unint64_t v206;
  void *v207;
  uint64_t Impl;
  size_t v209;
  const llvm::APInt *v210;
  llvm::Value *v211;
  llvm::ValueHandleBase *v212;
  llvm::Value *v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  __int128 v217;
  int v218;
  char *v219;
  int v220;
  unsigned int v221;
  char *v222;
  uint64_t v223;
  char *v224;
  int v225;
  BOOL v226;
  unsigned int v227;
  char *v228;
  uint64_t v229;
  int v230;
  unsigned int v231;
  uint64_t v232;
  int v233;
  unsigned int v234;
  unint64_t v235;
  int v236;
  int64_t v237;
  unint64_t v238;
  int v239;
  char *v240;
  int v241;
  int64_t v242;
  unint64_t v243;
  unsigned int v244;
  int v245;
  unsigned int v246;
  uint64_t **v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t *v250;
  int v251;
  char *v252;
  int v253;
  unsigned int v254;
  char *v255;
  uint64_t v256;
  char *v257;
  int v258;
  BOOL v259;
  unsigned int v260;
  char *v261;
  unint64_t v262;
  llvm::PointerType *v263;
  llvm::PointerType *v264;
  char *v265;
  char *v266;
  char *v267;
  char *v268;
  char *v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  int v273;
  unsigned int v274;
  char **v275;
  char *v276;
  uint64_t v277;
  const llvm::APInt *v278;
  uint64_t n;
  uint64_t v280;
  uint64_t *v281;
  llvm::ValueHandleBase *v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  unsigned int *v286;
  _QWORD *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  _QWORD *v291;
  unint64_t v292;
  int32x2_t ****v293;
  int32x2_t *v294;
  unint64_t v295;
  uint64_t v296;
  unsigned int v297;
  uint64_t v298;
  int32x2_t *****v299;
  int32x2_t ****v300;
  int v301;
  int v302;
  uint64_t v303;
  uint64_t v304;
  _QWORD *v305;
  uint64_t *v306;
  uint64_t *v307;
  uint64_t v308;
  llvm::ValueSymbolTable *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t *v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t v319;
  llvm::Type *v320;
  uint64_t v321;
  _QWORD *v322;
  uint64_t v323;
  uint64_t v324;
  llvm::UndefValue *v325;
  uint64_t v326;
  llvm::ValueSymbolTable *v327;
  uint64_t v328;
  uint64_t v329;
  int v330;
  uint64_t v331;
  unsigned int v332;
  int v333;
  unsigned int v334;
  uint64_t v335;
  int v336;
  unsigned int v337;
  char *v338;
  int v339;
  uint64_t v340;
  char *v341;
  int v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  int v346;
  _QWORD *v347;
  int v348;
  uint64_t v349;
  int v350;
  uint64_t *v351;
  uint64_t v352;
  int v353;
  int v354;
  _QWORD *v355;
  unsigned int v356;
  uint64_t v357;
  unsigned int v358;
  uint64_t *v359;
  unint64_t v360;
  unint64_t *v361;
  uint64_t v362;
  int32x2_t *v363;
  unint64_t v364;
  uint64_t v365;
  unsigned int v366;
  uint64_t v367;
  uint64_t *v368;
  uint64_t v369;
  int v370;
  int v371;
  uint64_t v372;
  uint64_t v373;
  llvm::ValueSymbolTable *v374;
  uint64_t v375;
  llvm::ValueSymbolTable *v376;
  uint64_t v377;
  uint64_t v378;
  llvm::ConstantInt *v379;
  uint64_t v380;
  llvm::ValueHandleBase *v381;
  const llvm::APInt *v382;
  uint64_t v383;
  uint64_t **ii;
  uint64_t *v385;
  _QWORD *v386;
  int v387;
  uint64_t v388;
  int v389;
  uint64_t v390;
  uint64_t **v391;
  uint64_t *v392;
  int v393;
  int v394;
  _QWORD *v395;
  unsigned int v396;
  uint64_t v397;
  uint64_t *v398;
  llvm::ConstantInt *v399;
  llvm::ValueHandleBase *v400;
  uint64_t v401;
  llvm::ValueHandleBase **v402;
  uint64_t *v403;
  uint64_t v404;
  BOOL v405;
  const char *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  int v410;
  int v411;
  unint64_t v412;
  llvm::ConstantInt *v413;
  unsigned int v414;
  unint64_t v415;
  llvm::ValueHandleBase *v416;
  uint64_t *v417;
  uint64_t v418;
  const char *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t **v424;
  uint64_t v425;
  uint64_t **v426;
  unsigned int v427;
  llvm::ConstantInt *v428;
  llvm::ValueHandleBase *v429;
  unsigned int v430;
  llvm::ValueHandleBase **v431;
  unsigned int v432;
  __int128 *v433;
  char *v434;
  unsigned int jj;
  __int128 v436;
  int v437;
  uint64_t v438;
  _QWORD *v439;
  int v440;
  uint64_t v441;
  int v442;
  uint64_t *v443;
  uint64_t v444;
  int v445;
  int v446;
  uint64_t *v447;
  _QWORD *v448;
  int v449;
  uint64_t v450;
  int v451;
  uint64_t v452;
  uint64_t **v453;
  uint64_t *v454;
  int v455;
  int v456;
  unsigned int v457;
  unsigned int v458;
  uint64_t v459;
  llvm::ConstantInt *v460;
  llvm::ValueHandleBase *v461;
  uint64_t *v462;
  llvm::UndefValue *v463;
  llvm::Type *v464;
  const llvm::APInt *v465;
  llvm::UndefValue *v466;
  llvm::ConstantInt *v467;
  llvm::ValueHandleBase *v468;
  const llvm::APInt *v469;
  unsigned __int8 *v470;
  llvm::ConstantInt *v471;
  unsigned int v472;
  char v473;
  llvm::ValueHandleBase *v474;
  unsigned __int8 *v475;
  uint64_t v476;
  uint64_t *v477;
  char **v478;
  int v479;
  BOOL v480;
  unsigned int v481;
  _BYTE *v482;
  uint64_t *v483;
  _QWORD *v484;
  int v485;
  uint64_t v486;
  int v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t *v493;
  uint64_t *v494;
  uint64_t *v495;
  unint64_t **v496;
  uint64_t v497;
  uint64_t v498;
  void *v499;
  int v500;
  char *v501;
  int v502;
  unsigned int v503;
  char *v504;
  void *v505;
  char *v506;
  int v507;
  BOOL v508;
  unsigned int v509;
  char *v510;
  uint64_t v511;
  const llvm::APInt *v512;
  uint64_t v513;
  BOOL v514;
  uint64_t v515;
  llvm::PointerType *v516;
  uint64_t v517;
  uint64_t *v518;
  uint64_t v519;
  uint64_t v520;
  _QWORD *v521;
  uint64_t v522;
  uint64_t *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t *v526;
  uint64_t v527;
  llvm::ConstantInt *v528;
  unint64_t **v529;
  const llvm::APInt *v530;
  llvm::ValueHandleBase *v531;
  llvm::ConstantInt *v532;
  unsigned int v533;
  unint64_t v534;
  llvm::ValueHandleBase *v535;
  llvm::GetElementPtrInst *v536;
  uint64_t **v537;
  uint64_t v538;
  _QWORD *v539;
  int v540;
  int v541;
  uint64_t v542;
  uint64_t v543;
  unint64_t v544;
  unint64_t v545;
  _QWORD *v546;
  uint64_t v547;
  uint64_t v548;
  int v549;
  void *v550;
  void *v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  void *v556;
  char *v557;
  unint64_t **v558;
  uint64_t *v559;
  uint64_t *v560;
  unint64_t v561;
  int v562;
  BOOL v563;
  unint64_t v564;
  int v565;
  int v566;
  _QWORD *v567;
  unint64_t v568;
  uint64_t v569;
  unsigned int v570;
  uint64_t v571;
  unsigned __int8 *v572;
  uint64_t v573;
  char *v574;
  uint64_t v575;
  uint64_t v576;
  unint64_t v577;
  uint64_t v578;
  int v579;
  uint64_t v580;
  uint64_t kk;
  unsigned __int8 *v582;
  const llvm::APInt *v583;
  unsigned __int8 *v584;
  llvm::ConstantInt *v585;
  unsigned int v586;
  unint64_t v587;
  llvm::ValueHandleBase *v588;
  llvm::MDNode *v589;
  unint64_t *v590;
  unint64_t v591;
  unint64_t *v592;
  unint64_t v593;
  unint64_t *v594;
  uint64_t v595;
  uint64_t v596;
  unint64_t v597;
  _QWORD *v598;
  unint64_t v599;
  int32x2_t ****v600;
  int32x2_t *v601;
  unint64_t v602;
  uint64_t v603;
  unsigned int v604;
  uint64_t v605;
  int32x2_t *****v606;
  int32x2_t ****v607;
  int v608;
  int v609;
  unint64_t *v610;
  unint64_t v611;
  unint64_t *v612;
  uint64_t v613;
  int32x2_t *v614;
  unint64_t v615;
  uint64_t v616;
  unsigned int v617;
  uint64_t v618;
  uint64_t *v619;
  uint64_t v620;
  int v621;
  int v622;
  _DWORD *v623;
  _DWORD *v624;
  int v625;
  uint64_t v626;
  uint64_t *v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  llvm::ValueSymbolTable *v633;
  uint64_t v634;
  char *v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  int v640;
  uint64_t v641;
  uint64_t mm;
  int v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  int v651;
  int v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  _QWORD *v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  llvm::Type *v662;
  uint64_t v663;
  int v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  _QWORD *v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t nn;
  uint64_t v672;
  int v673;
  uint64_t v674;
  uint64_t v675;
  void *v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  llvm::UndefValue *v680;
  _QWORD *v681;
  llvm::LLVMContext *v682;
  llvm::LLVMContext *v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  _QWORD *v687;
  unsigned int v688;
  uint64_t *v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  void *v694;
  int v695;
  int v696;
  uint64_t *v697;
  uint64_t v698;
  _QWORD *v699;
  unsigned int v700;
  uint64_t v701;
  uint64_t v702;
  char *v703;
  char *v704;
  llvm::Value *v705;
  _QWORD *v706;
  uint64_t v707;
  unsigned __int8 *v708;
  char *v709;
  char *v710;
  unsigned __int8 **v711;
  int v712;
  unsigned __int8 *v713;
  uint64_t v714;
  uint64_t v715;
  int v716;
  uint64_t v717;
  uint64_t v718;
  void *v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  llvm::UndefValue *v723;
  uint64_t v724;
  char **v726;
  uint64_t v727;
  int v728;
  uint64_t v729;
  uint64_t **v730;
  uint64_t *v731;
  int v732;
  int v733;
  unsigned int v734;
  uint64_t v735;
  uint64_t ****v736;
  uint64_t ***v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  void *v742;
  unsigned int v743;
  int v744;
  unsigned int v745;
  void *v746;
  int v747;
  int v748;
  int v749;
  unsigned int v750;
  _QWORD *v751;
  uint64_t v752;
  unint64_t v753;
  unint64_t v754;
  _QWORD *v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  _QWORD *v759;
  uint64_t v760;
  uint64_t v762;
  unsigned int v763;
  unsigned int v764;
  uint64_t v767;
  llvm::ValueHandleBase *v768;
  uint64_t v769;
  uint64_t v770;
  llvm::LLVMContext *v771[2];
  uint64_t v772;
  unsigned int v773;
  llvm::ValueHandleBase *v774;
  unint64_t **v775;
  uint64_t *v777;
  uint64_t *v778;
  int v779;
  _QWORD **v780;
  uint64_t v781;
  char *v782;
  _QWORD v785[2];
  _QWORD v786[4];
  _QWORD v787[4];
  uint64_t ***v788;
  _QWORD *v789;
  uint64_t v790;
  unsigned int v791;
  void *v792;
  uint64_t v793;
  _BYTE v794[256];
  uint64_t v795;
  _QWORD *v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  char v800;
  void *v801;
  uint64_t v802;
  _BYTE v803[64];
  uint64_t v804;
  uint64_t v805;
  void *v806;
  uint64_t v807;
  _QWORD v808[9];
  uint64_t v809;
  _QWORD *v810;
  unsigned int v811;
  uint64_t v812;
  _QWORD *v813;
  unsigned int v814;
  _QWORD v815[9];
  __int128 v816;
  __int128 v817;
  uint64_t v818;
  __int128 v819;
  __int128 v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  void *v825[2];
  _BYTE v826[32];
  uint64_t v827;
  uint64_t v828;
  _QWORD *v829;
  void **v830;
  void **v831;
  uint64_t v832;
  int v833;
  __int16 v834;
  char v835;
  uint64_t v836;
  uint64_t v837;
  void *v838;
  void *v839;
  void *v840;
  uint64_t v841;
  _BYTE v842[32];
  uint64_t *v843;
  _QWORD **v844;
  uint64_t *v845;
  void **v846;
  void **v847;
  uint64_t v848;
  int v849;
  __int16 v850;
  char v851;
  uint64_t v852;
  uint64_t v853;
  void *v854;
  void *v855;
  void *v856;
  uint64_t v857;
  _BYTE v858[128];
  uint64_t v859;
  _QWORD *v860;
  unsigned int v861;
  uint64_t v862;
  uint64_t v863[3];
  __int16 v864;
  void *v865;
  uint64_t v866;
  _BYTE v867[16];
  __int16 v868;
  void *__src;
  uint64_t v870;
  unint64_t *v871;
  int32x2_t ****v872;
  uint64_t v873;
  uint64_t *v874;
  uint64_t v875;

  v10 = a1;
  v875 = *MEMORY[0x1E0C80C00];
  v789 = a2;
  v760 = a2[5];
  v11 = v760 + 272;
  v12 = a1[1];
  v781 = v760 + 272;
  if (v12)
  {
    v13 = v12 + 9;
    while (1)
    {
      v13 = (uint64_t *)*v13;
      if (v13 == v12 + 9)
        break;
      if (v13)
        v14 = v13 - 3;
      else
        v14 = 0;
      v15 = (uint64_t *)v14[5];
      if (v15 == v14 + 5)
      {
        v17 = 0;
      }
      else
      {
        if (v15)
          v16 = (uint64_t)(v15 - 3);
        else
          v16 = 0;
        if (*(unsigned __int8 *)(v16 + 16) - 29 >= 0xB)
          v17 = 0;
        else
          v17 = v16;
      }
      if (*(_BYTE *)(v17 + 16) == 29)
        goto LABEL_58;
    }
    v17 = 0;
    goto LABEL_58;
  }
  v20 = *(_DWORD *)(a3 + 2244);
  v21 = *(_DWORD *)(a3 + 2248);
  v22 = (uint64_t ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 560))(a4);
  v23 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(***v22 + 1576), 0, 0, 0);
  v24 = v22 >> 4;
  if ((*((_BYTE *)v22 + 23) & 0x10) != 0)
  {
    v25 = ***v22;
    v26 = *(_QWORD *)(v25 + 152);
    v27 = *(unsigned int *)(v25 + 168);
    if ((_DWORD)v27)
    {
      LODWORD(v28) = (v27 - 1) & (v24 ^ (v22 >> 9));
      v29 = (uint64_t ****)(v26 + 16 * v28);
      v30 = *v29;
      if (*v29 == v22)
      {
LABEL_26:
        v33 = v29[1];
        v36 = *v33;
        v34 = (char *)(v33 + 2);
        v35 = v36;
        goto LABEL_27;
      }
      v31 = 1;
      while (v30 != (uint64_t ***)-4096)
      {
        v32 = v28 + v31++;
        v28 = v32 & (v27 - 1);
        v30 = *(uint64_t ****)(v26 + 16 * v28);
        if (v30 == v22)
        {
          v29 = (uint64_t ****)(v26 + 16 * v28);
          goto LABEL_26;
        }
      }
    }
    v29 = (uint64_t ****)(v26 + 16 * v27);
    goto LABEL_26;
  }
  v35 = 0;
  v34 = &byte_1C871356D;
LABEL_27:
  LOWORD(v818) = 773;
  *(_QWORD *)&v816 = v34;
  *((_QWORD *)&v816 + 1) = v35;
  *(_QWORD *)&v817 = ".constant_program";
  v37 = "";
  if (v20 != v21)
    v37 = ".cfg";
  if (*v37)
  {
    *(_QWORD *)&v819 = &v816;
    *(_QWORD *)&v820 = v37;
    LOWORD(v821) = 770;
  }
  else
  {
    v819 = v816;
    v820 = v817;
    v821 = v818;
  }
  v38 = (char *)operator new(0x80uLL);
  v12 = (uint64_t *)(v38 + 8);
  *((_DWORD *)v38 + 7) = *((_DWORD *)v38 + 7) & 0x38000000 | 0x40000000;
  *(_QWORD *)v38 = 0;
  llvm::Function::Function((uint64_t *)v38 + 1, v23, 0, (llvm::Type *)0xFFFFFFFFLL, (uint64_t)&v819, 0);
  *((_WORD *)v38 + 13) = *((_WORD *)v38 + 13) & 0xC00F | 0x640;
  v40 = v22[5];
  if ((*(_DWORD *)a6 & 1) != 0)
  {
    v41 = 16;
    v42 = a6 + 8;
  }
  else
  {
    v42 = *(_QWORD *)(a6 + 8);
    v41 = *(_DWORD *)(a6 + 16);
    if (!v41)
    {
      v758 = 0;
LABEL_1066:
      v45 = (uint64_t ****)(v42 + 16 * v758);
      v10 = a1;
      v11 = v760 + 272;
      goto LABEL_36;
    }
  }
  v43 = v41 - 1;
  LODWORD(v44) = (v41 - 1) & (v24 ^ (v22 >> 9));
  v45 = (uint64_t ****)(v42 + 16 * v44);
  v46 = *v45;
  if (*v45 != v22)
  {
    v747 = 1;
    while (v46 != (uint64_t ***)-4096)
    {
      v748 = v44 + v747++;
      v44 = v748 & v43;
      v46 = *(uint64_t ****)(v42 + 16 * v44);
      if (v46 == v22)
      {
        v45 = (uint64_t ****)(v42 + 16 * v44);
        goto LABEL_36;
      }
    }
    if ((*(_DWORD *)a6 & 1) != 0)
    {
      v758 = 16;
      v42 = a6 + 8;
    }
    else
    {
      v42 = *(_QWORD *)(a6 + 8);
      v758 = *(unsigned int *)(a6 + 16);
    }
    goto LABEL_1066;
  }
LABEL_36:
  v47 = (uint64_t *)v45[1];
  *((_QWORD *)v38 + 6) = v40;
  if ((v38[31] & 0x10) != 0)
  {
    v48 = (llvm::ValueSymbolTable *)v40[14];
    if (v48)
      llvm::ValueSymbolTable::reinsertValue(v48, (llvm::Value *)v12);
  }
  v49 = *v47;
  *((_QWORD *)v38 + 8) = *v47;
  *((_QWORD *)v38 + 9) = v47;
  v50 = v38 + 64;
  *(_QWORD *)(v49 + 8) = v50;
  *v47 = (uint64_t)v50;
  if ((*((_BYTE *)v22 + 23) & 0x20) != 0)
  {
    v51 = ***v22;
    *(_QWORD *)&v819 = v22;
    v52 = *(_DWORD *)(v51 + 2496);
    if (v52)
    {
      v53 = *(_QWORD *)(v51 + 2480);
      v54 = v52 - 1;
      v55 = v54 & (v24 ^ (v22 >> 9));
      v56 = (uint64_t ****)(v53 + 40 * v55);
      v57 = *v56;
      if (*v56 == v22)
        goto LABEL_50;
      v58 = 0;
      v59 = 1;
      while (v57 != (uint64_t ***)-4096)
      {
        if (v58)
          v60 = 0;
        else
          v60 = v57 == (uint64_t ***)-8192;
        if (v60)
          v58 = v56;
        v61 = v55 + v59++;
        v55 = v61 & v54;
        v56 = (uint64_t ****)(v53 + 40 * v55);
        v57 = *v56;
        if (*v56 == v22)
          goto LABEL_50;
      }
      if (v58)
        v736 = v58;
      else
        v736 = v56;
    }
    else
    {
      v736 = 0;
    }
    v56 = (uint64_t ****)sub_1C541AB24(v51 + 2480, (uint64_t)&v819, (uint64_t *)&v819, v736);
    v737 = (uint64_t ***)v819;
    v56[3] = 0;
    v56[4] = 0;
    *v56 = v737;
    v56[1] = (uint64_t ***)(v56 + 3);
    v56[2] = (uint64_t ***)0x100000000;
LABEL_50:
    v62 = *((unsigned int *)v56 + 4);
    if ((_DWORD)v62)
    {
      v63 = (llvm::DIBuilder **)(v56[1] + 1);
      v64 = 16 * v62;
      while (*((_DWORD *)v63 - 2))
      {
        v63 += 2;
        v64 -= 16;
        if (!v64)
          goto LABEL_57;
      }
      if (*v63)
      {
        ArtificialSubprogram = (unsigned int *)llvm::DIBuilder::createArtificialSubprogram(*v63, v39);
        ArtificialType = llvm::DIBuilder::createArtificialType(*(llvm::MDNode **)&ArtificialSubprogram[-2 * ArtificialSubprogram[2] + 8]);
        *((_BYTE *)ArtificialType + 52) = -48;
        llvm::MDNode::replaceOperandWith((llvm::MDNode *)ArtificialSubprogram, 4, ArtificialType);
        llvm::Value::setMetadata((llvm::Value *)v12, 0, (llvm::MDNode *)ArtificialSubprogram);
      }
    }
  }
LABEL_57:
  v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 32))(a4);
  (*(void (**)(uint64_t, uint64_t *, uint64_t ***))(*(_QWORD *)v67 + 32))(v67, v12, v22);
  v17 = 0;
  v10[1] = v12;
LABEL_58:
  v788 = 0;
  v859 = 1;
  for (i = 8; i != 136; i += 16)
    *(uint64_t *)((char *)&v859 + i) = -4096;
  v856 = v858;
  v857 = 0x800000000;
  if (*(_DWORD *)(a3 + 2244) == *(_DWORD *)(a3 + 2248))
  {
    v69 = *(_QWORD **)*v12;
    *(_QWORD *)&v819 = "entry";
    LOWORD(v821) = 259;
    v70 = operator new();
    *(_QWORD *)v70 = *v69 + 1600;
    *(_QWORD *)(v70 + 8) = 0;
    v71 = *(_DWORD *)(v70 + 20) & 0xC0000000;
    *(_DWORD *)(v70 + 16) = 22;
    *(_DWORD *)(v70 + 20) = v71;
    *(_QWORD *)(v70 + 24) = 0;
    *(_QWORD *)(v70 + 32) = 0;
    *(_QWORD *)(v70 + 40) = v70 + 40;
    *(_QWORD *)(v70 + 48) = v70 + 40;
    *(_QWORD *)(v70 + 56) = 0;
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v12 + 9), (_QWORD *)v70);
    v72 = (_QWORD *)v12[9];
    *(_QWORD *)(v70 + 32) = v12 + 9;
    *(_QWORD *)(v70 + 24) = v72;
    v72[1] = v70 + 24;
    v12[9] = v70 + 24;
    llvm::Value::setName((uint64_t ***)v70, (uint64_t)&v819);
    v788 = (uint64_t ***)v70;
    v73 = v789[10];
    if (v73)
      v74 = v73 - 24;
    else
      v74 = 0;
    *(_QWORD *)&v816 = v74;
    *(_QWORD *)&v819 = 0;
    v75 = sub_1C483DE40((uint64_t)&v859, &v816, &v819);
    v76 = (_QWORD *)v819;
    if ((v75 & 1) == 0)
    {
      v76 = sub_1C564D77C(&v859, (uint64_t)&v816, &v816, (_QWORD *)v819);
      *v76 = v816;
      v76[1] = 0;
    }
    v76[1] = v70;
    v77 = v788;
    v78 = v789[10];
    if (v78)
      v79 = v78 - 24;
    else
      v79 = 0;
    v80 = v857;
    if (v857 >= HIDWORD(v857))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v856, (uint64_t)v858, v857 + 1, 16);
      v80 = v857;
    }
    v81 = (char *)v856 + 16 * v80;
    *v81 = v79;
    v81[1] = v77;
    LODWORD(v857) = v857 + 1;
    v780 = v788;
    if (v17)
      goto LABEL_95;
    goto LABEL_114;
  }
  v82 = *(_QWORD *)(a3 + 4576);
  v83 = *(_QWORD *)(a3 + 4568);
  if (v82 == v83)
    goto LABEL_94;
  do
  {
    *(_QWORD *)&v816 = 0;
    v84 = *(_QWORD *)(v82 - 8);
    v82 -= 8;
    *(_QWORD *)&v816 = v84;
    v85 = sub_1C477672C(a3 + 2224, v84);
    v86 = *(_QWORD *)(a3 + 2232);
    if (v86 == *(_QWORD *)(a3 + 2224))
      v87 = (unsigned int *)(a3 + 2244);
    else
      v87 = (unsigned int *)(a3 + 2240);
    if (v85 == (_QWORD *)(v86 + 8 * *v87))
      continue;
    if ((*(_BYTE *)(v816 + 23) & 0x10) == 0)
    {
      v97 = 0;
      v98 = &byte_1C871356D;
      goto LABEL_87;
    }
    v88 = ***(_QWORD ***)v816;
    v89 = *(_QWORD *)(v88 + 152);
    v90 = *(unsigned int *)(v88 + 168);
    if (!(_DWORD)v90)
      goto LABEL_85;
    LODWORD(v91) = (v90 - 1) & ((v816 >> 4) ^ (v816 >> 9));
    v92 = (uint64_t *)(v89 + 16 * v91);
    v93 = *v92;
    if (*v92 != (_QWORD)v816)
    {
      v94 = 1;
      while (v93 != -4096)
      {
        v95 = v91 + v94++;
        v91 = v95 & (v90 - 1);
        v93 = *(_QWORD *)(v89 + 16 * v91);
        if (v93 == (_QWORD)v816)
        {
          v92 = (uint64_t *)(v89 + 16 * v91);
          goto LABEL_86;
        }
      }
LABEL_85:
      v92 = (uint64_t *)(v89 + 16 * v90);
    }
LABEL_86:
    v96 = (_QWORD *)v92[1];
    v99 = *v96;
    v98 = (char *)(v96 + 2);
    v97 = v99;
LABEL_87:
    v100 = v10[1];
    v101 = *(_QWORD **)*v100;
    LOWORD(v821) = 773;
    *(_QWORD *)&v819 = v98;
    *((_QWORD *)&v819 + 1) = v97;
    *(_QWORD *)&v820 = ".cprog";
    v102 = operator new();
    *(_QWORD *)v102 = *v101 + 1600;
    *(_QWORD *)(v102 + 8) = 0;
    v103 = *(_DWORD *)(v102 + 20) & 0xC0000000;
    *(_DWORD *)(v102 + 16) = 22;
    *(_DWORD *)(v102 + 20) = v103;
    *(_QWORD *)(v102 + 24) = 0;
    *(_QWORD *)(v102 + 32) = 0;
    *(_QWORD *)(v102 + 40) = v102 + 40;
    *(_QWORD *)(v102 + 48) = v102 + 40;
    *(_QWORD *)(v102 + 56) = 0;
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v100 + 9), (_QWORD *)v102);
    v104 = v100[9];
    *(_QWORD *)(v102 + 32) = v100 + 9;
    *(_QWORD *)(v102 + 24) = v104;
    *(_QWORD *)(v104 + 8) = v102 + 24;
    v100[9] = v102 + 24;
    llvm::Value::setName((uint64_t ***)v102, (uint64_t)&v819);
    sub_1C564D720(&v859, &v816)[1] = v102;
    v105 = v816;
    v106 = v857;
    if (v857 >= (unint64_t)HIDWORD(v857))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v856, (uint64_t)v858, v857 + 1, 16);
      v106 = v857;
    }
    v107 = (char *)v856 + 16 * v106;
    *v107 = v105;
    v107[1] = v102;
    LODWORD(v857) = v857 + 1;
    v10 = a1;
    if (!v788)
      v788 = (uint64_t ***)v102;
  }
  while (v82 != v83);
  v12 = v10[1];
  v11 = v760 + 272;
LABEL_94:
  v108 = *(_QWORD **)*v12;
  *(_QWORD *)&v819 = "return.cprog";
  LOWORD(v821) = 259;
  v109 = operator new();
  *(_QWORD *)v109 = *v108 + 1600;
  *(_QWORD *)(v109 + 8) = 0;
  v110 = *(_DWORD *)(v109 + 20) & 0xC0000000;
  *(_DWORD *)(v109 + 16) = 22;
  *(_DWORD *)(v109 + 20) = v110;
  *(_QWORD *)(v109 + 24) = 0;
  *(_QWORD *)(v109 + 32) = 0;
  *(_QWORD *)(v109 + 40) = v109 + 40;
  *(_QWORD *)(v109 + 48) = v109 + 40;
  *(_QWORD *)(v109 + 56) = 0;
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v12 + 9), (_QWORD *)v109);
  v111 = (_QWORD *)v12[9];
  *(_QWORD *)(v109 + 32) = v12 + 9;
  *(_QWORD *)(v109 + 24) = v111;
  v111[1] = v109 + 24;
  v12[9] = v109 + 24;
  v780 = (_QWORD **)v109;
  llvm::Value::setName((uint64_t ***)v109, (uint64_t)&v819);
  if (v17)
  {
LABEL_95:
    sub_1C4773D54((uint64_t)&v819, v17, 0, 0, 0);
    v112 = v788;
    v113 = (char *)operator new(0x60uLL);
    v114 = v113;
    *((_DWORD *)v113 + 13) = *((_DWORD *)v113 + 13) & 0x38000000 | 1;
    *(_QWORD *)v113 = 0;
    *((_QWORD *)v113 + 1) = 0;
    *((_QWORD *)v113 + 2) = 0;
    *((_QWORD *)v113 + 4) = ***v112 + 1576;
    v115 = (llvm::Value *)(v113 + 32);
    *((_QWORD *)v113 + 3) = v113 + 32;
    *((_QWORD *)v113 + 5) = 0;
    v113[48] = 30;
    v113[49] = 0;
    *((_WORD *)v113 + 25) = 0;
    *((_DWORD *)v113 + 13) = 1;
    *(_OWORD *)(v113 + 56) = 0u;
    *(_OWORD *)(v113 + 72) = 0u;
    *((_DWORD *)v113 + 22) = 0;
    *(_QWORD *)v113 = v112;
    v118 = v112[1];
    v117 = v112 + 1;
    v116 = v118;
    *((_QWORD *)v113 + 1) = v118;
    if (v118)
      v116[2] = (uint64_t *)(v113 + 8);
    *((_QWORD *)v113 + 2) = v117;
    *v117 = v113;
    LOWORD(v818) = 257;
    (*(void (**)(uint64_t, llvm::Value *, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v824 + 16))(v824, v115, &v816, v822, v823);
    if (!DWORD2(v819))
    {
LABEL_112:
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v17 + 40) + 40, (uint64_t ***)v17);
      v126 = *(_QWORD *)(v17 + 24);
      v127 = *(_QWORD **)(v17 + 32);
      *v127 = v126;
      *(_QWORD *)(v126 + 8) = v127;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v17);
      if ((__int128 *)v819 != &v820)
        free((void *)v819);
      goto LABEL_114;
    }
    v119 = v819;
    v120 = v819 + 16 * DWORD2(v819);
    v121 = (unsigned __int8 **)(v114 + 80);
    while (2)
    {
      v122 = *(_DWORD *)v119;
      v123 = *(unsigned __int8 **)(v119 + 8);
      if (v123)
      {
        if (v122)
          goto LABEL_106;
        v795 = *(_QWORD *)(v119 + 8);
        llvm::MetadataTracking::track((uint64_t)&v795, v123, 2);
        v124 = *v121;
        if (*v121)
LABEL_104:
          llvm::MetadataTracking::untrack((uint64_t)(v114 + 80), v124);
LABEL_110:
        v125 = (unsigned __int8 *)v795;
        *v121 = (unsigned __int8 *)v795;
        if (v125)
          llvm::MetadataTracking::retrack((uint64_t)&v795, v125, (uint64_t)(v114 + 80));
      }
      else
      {
        v124 = *v121;
        if (*v121 || (v114[55] & 0x20) != 0)
        {
          if (!v122)
          {
            v795 = 0;
            if (v124)
              goto LABEL_104;
            goto LABEL_110;
          }
LABEL_106:
          llvm::Value::setMetadata(v115, *(_DWORD *)v119, (llvm::MDNode *)v123);
        }
      }
      v119 += 16;
      if (v119 == v120)
        goto LABEL_112;
      continue;
    }
  }
LABEL_114:
  if (*(_BYTE *)(a3 + 4652))
  {
    *(_QWORD *)&v819 = &v820;
    *((_QWORD *)&v819 + 1) = 0x2000000000;
    v128 = *(unsigned int *)(a3 + 1592);
    if (v128 < 0x21)
    {
      v129 = 0;
      if (!(_DWORD)v128)
      {
LABEL_126:
        v135 = (uint64_t **)v819;
        v136 = v129;
        v137 = (uint64_t **)(v819 + 8 * v129);
        *(_QWORD *)&v816 = v11;
        if (v129 < 0x81)
        {
LABEL_130:
          sub_1C564DA78(v135, v137, (uint64_t *)&v816, v136, 0, 0);
        }
        else
        {
          v138 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
          v139 = v129;
          while (1)
          {
            v140 = (uint64_t **)operator new(8 * v139, v138);
            if (v140)
              break;
            v141 = v139 > 1;
            v139 >>= 1;
            if (!v141)
              goto LABEL_130;
          }
          v142 = v140;
          sub_1C564DA78(v135, v137, (uint64_t *)&v816, v136, v140, v139);
          operator delete(v142);
        }
        v143 = (_QWORD *)(a3 + 1320);
        v144 = (char *)v819;
        v145 = DWORD2(v819);
        v146 = (char *)(v819 + 8 * DWORD2(v819));
        if (DWORD2(v819) < 0x81)
        {
LABEL_136:
          sub_1C564E46C(v144, v146, v145, 0, 0);
        }
        else
        {
          v147 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
          v148 = DWORD2(v819);
          while (1)
          {
            v149 = (char *)operator new(8 * v148, v147);
            if (v149)
              break;
            v141 = v148 > 1;
            v148 >>= 1;
            if (!v141)
              goto LABEL_136;
          }
          v150 = v149;
          sub_1C564E46C(v144, v146, v145, v149, v148);
          operator delete(v150);
        }
        sub_1C5648834(v143);
        *(_DWORD *)(a3 + 1592) = 0;
        v151 = (uint64_t *)v819;
        if (DWORD2(v819))
        {
          v152 = v819 + 8 * DWORD2(v819);
          while (1)
          {
            v153 = *v151;
            *(_QWORD *)&v816 = *v151;
            if ((*(_BYTE *)v143 & 1) != 0)
            {
              v154 = 32;
              v155 = a3 + 1328;
            }
            else
            {
              v154 = *(_DWORD *)(a3 + 1336);
              if (!v154)
              {
                v164 = 0;
LABEL_157:
                v165 = sub_1C4993C28((uint64_t)v143, (uint64_t)&v816, &v816, v164);
                *v165 = v816;
                v166 = *v151;
                v167 = *(unsigned int *)(a3 + 1592);
                if (v167 >= *(unsigned int *)(a3 + 1596))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 1584, a3 + 1600, v167 + 1, 8);
                  v167 = *(unsigned int *)(a3 + 1592);
                }
                *(_QWORD *)(*(_QWORD *)(a3 + 1584) + 8 * v167) = v166;
                ++*(_DWORD *)(a3 + 1592);
                goto LABEL_160;
              }
              v155 = *(_QWORD *)(a3 + 1328);
            }
            v156 = v154 - 1;
            v157 = v156 & ((v153 >> 4) ^ (v153 >> 9));
            v158 = (_QWORD *)(v155 + 8 * v157);
            v159 = *v158;
            if (v153 != *v158)
            {
              v160 = 0;
              v161 = 1;
              while (v159 != -4096)
              {
                if (v160)
                  v162 = 0;
                else
                  v162 = v159 == -8192;
                if (v162)
                  v160 = v158;
                v163 = v157 + v161++;
                v157 = v163 & v156;
                v158 = (_QWORD *)(v155 + 8 * v157);
                v159 = *v158;
                if (v153 == *v158)
                  goto LABEL_160;
              }
              if (v160)
                v164 = v160;
              else
                v164 = v158;
              goto LABEL_157;
            }
LABEL_160:
            if (++v151 == (uint64_t *)v152)
            {
              v151 = (uint64_t *)v819;
              break;
            }
          }
        }
        if (v151 != (uint64_t *)&v820)
          free(v151);
        goto LABEL_165;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v819, (uint64_t)&v820, v128, 8);
      LODWORD(v128) = *(_DWORD *)(a3 + 1592);
      v129 = DWORD2(v819);
      if (!(_DWORD)v128)
        goto LABEL_126;
    }
    v130 = *(uint64_t **)(a3 + 1584);
    v131 = 8 * v128;
    do
    {
      v132 = *v130;
      v133 = *(unsigned __int8 *)(*v130 + 16);
      if (v129 >= HIDWORD(v819))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v819, (uint64_t)&v820, v129 + 1, 8);
        v129 = DWORD2(v819);
      }
      if (v133 <= 0x1B)
        v134 = 0;
      else
        v134 = v132;
      *(_QWORD *)(v819 + 8 * v129) = v134;
      v129 = ++DWORD2(v819);
      ++v130;
      v131 -= 8;
    }
    while (v131);
    goto LABEL_126;
  }
LABEL_165:
  v168 = v788;
  v169 = **v788;
  v840 = v842;
  v841 = 0x200000000;
  v845 = v169;
  v846 = &v854;
  v847 = &v855;
  v848 = 0;
  v849 = 0;
  v850 = 512;
  v851 = 7;
  v853 = 0;
  v852 = 0;
  v854 = &unk_1E8167888;
  v855 = &unk_1E8167A08;
  v843 = (uint64_t *)v788;
  v844 = v788 + 5;
  v170 = *(_QWORD **)*v789;
  v825[0] = v826;
  v825[1] = (void *)0x200000000;
  v829 = v170;
  v830 = &v838;
  v831 = &v839;
  v832 = 0;
  v833 = 0;
  v834 = 512;
  v835 = 7;
  v828 = 0;
  v827 = 0;
  v837 = 0;
  v836 = 0;
  v838 = &unk_1E8167888;
  v839 = &unk_1E8167A08;
  *(_QWORD *)&v819 = &v820;
  *((_QWORD *)&v819 + 1) = 0x2000000000;
  *(_QWORD *)&v816 = 1;
  for (j = 8; j != 520; j += 16)
    *(_QWORD *)((char *)&v816 + j) = -4096;
  v815[0] = 1;
  v172 = 1;
  v173 = a3;
  do
  {
    v815[v172] = -4096;
    v172 += 2;
  }
  while (v172 != 9);
  v812 = 1;
  for (k = 8; k != 72; k += 16)
    *(uint64_t *)((char *)&v812 + k) = -4096;
  if (a5)
    v762 = *(_QWORD *)(a5 + 3344);
  else
    v762 = 0;
  v175 = *(_QWORD *)(a3 + 4600);
  v809 = 1;
  for (m = 8; m != 72; m += 16)
    *(uint64_t *)((char *)&v809 + m) = -4096;
  v177 = 0;
  v178 = 0;
  v179 = 0;
  v180 = 0;
  v787[0] = v175;
  v787[1] = v815;
  v787[2] = &v859;
  v787[3] = v168;
  v786[0] = &v788;
  v786[1] = a3;
  v786[2] = &v859;
  v786[3] = v787;
  v759 = (_QWORD *)(a3 + 2168);
  v862 = 0x200000004;
  LODWORD(v863[0]) = 1;
  v773 = 1;
  do
  {
    v181 = *(unsigned int *)(v173 + 1592);
    v767 = v180;
    if ((_DWORD)v181)
    {
      v182 = *((_DWORD *)&v863[-1] + v180);
      v183 = *(uint64_t **)(v173 + 1584);
      v777 = &v183[v181];
      while (1)
      {
        v790 = 0;
        v790 = *v183;
        v184 = *(_QWORD *)v790;
        v185 = (8 * sub_1C5645068(*(_QWORD *)v790, v781) + 15) >> 4;
        v186 = 8 * sub_1C5648740(v184, v781) + 15;
        v187 = v186 >> 4;
        if (*(_BYTE *)(a3 + 4652))
          v188 = v187 == 4;
        else
          v188 = 0;
        if (v188)
        {
          if (v182 == 4)
          {
            v189 = v790;
            v190 = *(unsigned __int8 *)(v790 + 16);
            v194 = 4;
            goto LABEL_193;
          }
          goto LABEL_215;
        }
        v189 = v790;
        v190 = *(unsigned __int8 *)(v790 + 16);
        if (v190 <= 0x1B)
          v191 = 0;
        else
          v191 = v790;
        v192 = *(_DWORD *)(v173 + 2184);
        if (!v192)
          goto LABEL_187;
        v229 = *(_QWORD *)(v173 + 2168);
        v230 = v192 - 1;
        v231 = ((v191 >> 4) ^ (v191 >> 9)) & v230;
        v232 = *(_QWORD *)(v229 + 32 * v231);
        if (v191 != v232)
          break;
        v193 = 4;
LABEL_188:
        if (v182 == v193)
        {
          v194 = v182;
          if (*(_BYTE *)(a3 + 4652))
          {
LABEL_193:
            if (v190 <= 0x1B)
              v196 = 0;
            else
              v196 = v189;
            v197 = sub_1C564D410(v786, v196);
            v195 = v197;
            v198 = 2 * (v179 & 1);
            if (v197 == v178)
              v198 = 0;
            else
              v179 = 0;
            v177 += v198;
            v189 = v790;
            if (v187 == 1)
            {
              v179 += v185;
              __src = (void *)v790;
              v870 = v197;
              sub_1C565034C((uint64_t)&v795, (uint64_t)&v809, (uint64_t *)&__src, &v870);
              v189 = v790;
            }
          }
          else
          {
            v194 = v182;
            v195 = v178;
          }
          v199 = v773;
          if (v773 <= v194)
            v199 = v194;
          v773 = v199;
          if ((*(unsigned __int8 *)(*(_QWORD *)v189 + 8) | 2) == 0xF)
          {
            v173 = a3;
            if (*(unsigned __int8 *)(v189 + 16) < 0x1Cu || (v200 = v189, !*(_QWORD *)(v189 + 40)))
              v200 = 0;
            v201 = *(_QWORD *)(a3 + 4600);
            v795 = v760 + 272;
            v796 = 0;
            v797 = v200;
            v798 = v201;
            v799 = 0;
            v800 = 1;
            sub_1C4F83784(v189, 0, &v795, &__src);
            if (v870 > 0x40)
            {
              v236 = 0;
              v237 = ((unint64_t)v870 + 63) >> 6;
              do
              {
                v141 = v237-- < 1;
                if (v141)
                  break;
                v238 = *((_QWORD *)__src + v237);
                v236 += __clz(v238);
              }
              while (!v238);
              v239 = v870 | 0xFFFFFFC0;
              if ((v870 & 0x3F) == 0)
                v239 = 0;
              if (v236 + v239 != (_DWORD)v870)
                goto LABEL_211;
LABEL_209:
              if (v872 > 0x40)
              {
                v241 = 0;
                v242 = ((unint64_t)v872 + 63) >> 6;
                do
                {
                  v141 = v242-- < 1;
                  if (v141)
                    break;
                  v243 = v871[v242];
                  v241 += __clz(v243);
                }
                while (!v243);
                v244 = v872 | 0xFFFFFFC0;
                if ((v872 & 0x3F) == 0)
                  v244 = 0;
                v173 = a3;
                if (v241 + v244 != (_DWORD)v872)
                  goto LABEL_211;
                Impl = 0;
                if (v871)
                  goto LABEL_226;
              }
              else
              {
                if (v871)
                  goto LABEL_211;
                Impl = 0;
              }
            }
            else
            {
              if (!__src)
                goto LABEL_209;
LABEL_211:
              v203 = **(llvm::ConstantInt ***)v189;
              v204 = llvm::ConstantInt::get(v203, (llvm::LLVMContext *)&v871, v202);
              v205 = v870;
              LODWORD(v866) = v870;
              if (v870 > 0x40)
              {
                v209 = (((unint64_t)v870 + 63) >> 3) & 0x3FFFFFF8;
                v865 = (void *)operator new[]();
                memcpy(v865, __src, v209);
                llvm::APInt::flipAllBitsSlowCase((uint64_t)&v865);
                v205 = v866;
                v207 = v865;
              }
              else
              {
                v206 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v870;
                if (!(_DWORD)v870)
                  v206 = 0;
                v207 = (void *)(v206 & ~(unint64_t)__src);
                v865 = v207;
              }
              LODWORD(v793) = v205;
              v792 = v207;
              LODWORD(v866) = 0;
              llvm::APInt::operator+=((uint64_t)&v792, 1uLL);
              LODWORD(v796) = v793;
              v795 = (uint64_t)v792;
              LODWORD(v793) = 0;
              v212 = llvm::ConstantInt::get(v203, (llvm::LLVMContext *)&v795, v210);
              if (v796 >= 0x41 && v795)
                MEMORY[0x1CAA32F9C](v795, 0x1000C8000313F17);
              if (v793 >= 0x41 && v792)
                MEMORY[0x1CAA32F9C](v792, 0x1000C8000313F17);
              v795 = (uint64_t)llvm::ValueAsMetadata::get(v204, v211);
              v796 = llvm::ValueAsMetadata::get(v212, v213);
              Impl = llvm::MDTuple::getImpl((uint64_t *)v203, &v795, 2, 0, 1);
              if (v872 >= 0x41 && v871)
LABEL_226:
                MEMORY[0x1CAA32F9C]();
            }
            if (v870 >= 0x41 && __src)
              MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
            v189 = v790;
          }
          else
          {
            Impl = 0;
            v173 = a3;
          }
          v795 = v189;
          LODWORD(v796) = v177;
          v797 = Impl;
          v214 = v819;
          if (DWORD2(v819) >= HIDWORD(v819))
          {
            v235 = DWORD2(v819) + 1;
            if ((unint64_t)v819 <= (unint64_t)&v795
              && (unint64_t)v819 + 24 * DWORD2(v819) > (unint64_t)&v795)
            {
              v240 = (char *)&v795 - v819;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v819, (uint64_t)&v820, v235, 24);
              v214 = v819;
              v215 = (uint64_t *)&v240[v819];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v819, (uint64_t)&v820, v235, 24);
              v215 = &v795;
              v214 = v819;
            }
          }
          else
          {
            v215 = &v795;
          }
          v216 = v214 + 24 * DWORD2(v819);
          v217 = *(_OWORD *)v215;
          *(_QWORD *)(v216 + 16) = v215[2];
          *(_OWORD *)v216 = v217;
          ++DWORD2(v819);
          if ((v816 & 1) != 0)
          {
            v218 = 32;
            v219 = (char *)&v816 + 8;
LABEL_236:
            v220 = v218 - 1;
            v221 = ((v790 >> 4) ^ (v790 >> 9)) & v220;
            v222 = &v219[16 * v221];
            v223 = *(_QWORD *)v222;
            if (v790 != *(_QWORD *)v222)
            {
              v224 = 0;
              v225 = 1;
              while (v223 != -4096)
              {
                if (v224)
                  v226 = 0;
                else
                  v226 = v223 == -8192;
                if (v226)
                  v224 = v222;
                v227 = v221 + v225++;
                v221 = v227 & v220;
                v222 = &v219[16 * v221];
                v223 = *(_QWORD *)v222;
                if (v790 == *(_QWORD *)v222)
                  goto LABEL_250;
              }
              if (v224)
                v228 = v224;
              else
                v228 = v222;
              goto LABEL_249;
            }
          }
          else
          {
            v218 = v817;
            if ((_DWORD)v817)
            {
              v219 = (char *)*((_QWORD *)&v816 + 1);
              goto LABEL_236;
            }
            v228 = 0;
LABEL_249:
            v222 = (char *)sub_1C5650774((uint64_t)&v816, (uint64_t)&v790, &v790, v228);
            *(_QWORD *)v222 = v790;
            *((_DWORD *)v222 + 2) = 0;
          }
LABEL_250:
          *((_DWORD *)v222 + 2) = v177;
          v177 += 2 * v185;
          goto LABEL_251;
        }
LABEL_215:
        v195 = v178;
LABEL_251:
        ++v183;
        v178 = v195;
        if (v183 == v777)
          goto LABEL_282;
      }
      v233 = 1;
      while (v232 != -4096)
      {
        v234 = v231 + v233++;
        v231 = v234 & v230;
        v232 = *(_QWORD *)(v229 + 32 * v231);
        v193 = 4;
        if (v191 == v232)
          goto LABEL_188;
      }
LABEL_187:
      v193 = 2 - ((v186 >> 4) & 1);
      goto LABEL_188;
    }
    v195 = v178;
LABEL_282:
    v180 = v767 + 1;
    v178 = v195;
  }
  while (v767 != 2);
  if (*(_BYTE *)(a3 + 4652))
    v245 = 2 * (v179 & 1);
  else
    v245 = 0;
  v246 = v245 + v177;
  v763 = *(_DWORD *)(v173 + 4640);
  v764 = v245 + v177;
  v247 = a1;
  if (v245 + v177 > v763)
  {
    if (DWORD2(v819))
    {
      v246 = 0;
      v248 = v819;
      v249 = v819 + 24 * DWORD2(v819);
      while (1)
      {
        v795 = 0;
        v250 = *(uint64_t **)v248;
        v795 = *(_QWORD *)v248;
        *(_DWORD *)(v248 + 8) = v246;
        if ((v816 & 1) != 0)
        {
          v251 = 32;
          v252 = (char *)&v816 + 8;
        }
        else
        {
          v251 = v817;
          if (!(_DWORD)v817)
          {
            v261 = 0;
LABEL_306:
            v255 = (char *)sub_1C5650774((uint64_t)&v816, (uint64_t)&v795, &v795, v261);
            *(_QWORD *)v255 = v795;
            *((_DWORD *)v255 + 2) = 0;
            v250 = (uint64_t *)v795;
            goto LABEL_307;
          }
          v252 = (char *)*((_QWORD *)&v816 + 1);
        }
        v253 = v251 - 1;
        v254 = v253 & ((v250 >> 4) ^ (v250 >> 9));
        v255 = &v252[16 * v254];
        v256 = *(_QWORD *)v255;
        if (v250 != *(uint64_t **)v255)
        {
          v257 = 0;
          v258 = 1;
          while (v256 != -4096)
          {
            if (v257)
              v259 = 0;
            else
              v259 = v256 == -8192;
            if (v259)
              v257 = v255;
            v260 = v254 + v258++;
            v254 = v260 & v253;
            v255 = &v252[16 * v254];
            v256 = *(_QWORD *)v255;
            if (v250 == *(uint64_t **)v255)
              goto LABEL_307;
          }
          if (v257)
            v261 = v257;
          else
            v261 = v255;
          goto LABEL_306;
        }
LABEL_307:
        *((_DWORD *)v255 + 2) = v246;
        v246 += (sub_1C5645068(*v250, v781) + 1) & 0x1FFFFFFE;
        v248 += 24;
        if (v248 == v249)
          goto LABEL_311;
      }
    }
    v246 = 0;
  }
LABEL_311:
  if (a10)
    v262 = (v246 & 0xFFFFFFFC) + 8;
  else
    v262 = v246;
  llvm::ArrayType::get((llvm::ArrayType *)(**(_QWORD **)*v789 + 1912), (llvm::Type *)v262);
  v264 = v263;
  v265 = (char *)operator new(0x78uLL);
  *((_DWORD *)v265 + 13) = *((_DWORD *)v265 + 13) & 0x38000000 | 1;
  v266 = v265 + 32;
  *(_QWORD *)v265 = 0;
  *((_QWORD *)v265 + 1) = 0;
  *((_QWORD *)v265 + 2) = 0;
  *((_QWORD *)v265 + 3) = v265 + 32;
  v795 = (uint64_t)"computed_constants";
  LOWORD(v799) = 259;
  llvm::GlobalVariable::GlobalVariable((uint64_t)(v265 + 32), v760, v264, 1, 0, 0, (uint64_t)&v795, 0, 0, 0x100000040, 0);
  *a1 = (uint64_t *)(v265 + 32);
  v267 = llvm::UniqueStringSaver::save(***((_QWORD ***)v265 + 4) + 2136, "thread_invariant", 0x10uLL);
  v269 = v268;
  v270 = ***((_QWORD ***)v265 + 4);
  v795 = (uint64_t)(v265 + 32);
  v271 = *(_DWORD *)(v270 + 2520);
  if (v271)
  {
    v272 = *(_QWORD *)(v270 + 2504);
    v273 = v271 - 1;
    v274 = v273 & ((v266 >> 4) ^ (v266 >> 9));
    v275 = (char **)(v272 + 24 * v274);
    v276 = *v275;
    if (*v275 == v266)
      goto LABEL_316;
    v478 = 0;
    v479 = 1;
    while (v276 != (char *)-4096)
    {
      if (v478)
        v480 = 0;
      else
        v480 = v276 == (char *)-8192;
      if (v480)
        v478 = v275;
      v481 = v274 + v479++;
      v274 = v481 & v273;
      v275 = (char **)(v272 + 24 * v274);
      v276 = *v275;
      if (*v275 == v266)
        goto LABEL_316;
    }
    if (v478)
      v726 = v478;
    else
      v726 = v275;
  }
  else
  {
    v726 = 0;
  }
  v275 = (char **)sub_1C53D65B8(v270 + 2504, (uint64_t)&v795, &v795, v726);
  v727 = v795;
  v275[1] = 0;
  v275[2] = 0;
  *v275 = (char *)v727;
LABEL_316:
  v275[1] = v267;
  v275[2] = v269;
  *((_DWORD *)v265 + 16) = *((_DWORD *)v265 + 16) & 0xFFBFFFFF | ((v269 != 0) << 22);
  *((_DWORD *)*a1 + 8) = (*a1)[4] & 0xFFC0FFFF | (((2031616 - (__clz(2 * v773) << 16)) & 0xFF0000) + 0x10000);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a4 + 144))(a4, 7, *a1);
  v277 = 8;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a4 + 496))(a4, *a1, v781, 8);
  v785[0] = &v789;
  v785[1] = a9;
  v795 = 1;
  do
  {
    *(uint64_t *)((char *)&v795 + v277) = -4096;
    v277 += 16;
  }
  while (v277 != 72);
  v801 = v803;
  v802 = 0x400000000;
  v804 = 1;
  for (n = 160; n != 224; n += 16)
    *(uint64_t *)((char *)&v795 + n) = -4096;
  v806 = v808;
  v807 = 0x400000000;
  v808[8] = v173;
  v792 = v794;
  v793 = 0x1000000000;
  v280 = *(unsigned int *)(v173 + 1056);
  if ((_DWORD)v280)
  {
    v281 = *(uint64_t **)(a3 + 1048);
    v282 = (llvm::ValueHandleBase *)&v281[v280];
    v768 = v282;
    while (1)
    {
      v283 = *v281;
      v284 = sub_1C477672C(a3 + 1856, *v281);
      v285 = *(_QWORD *)(a3 + 1864);
      v286 = (unsigned int *)(v285 == *(_QWORD *)(a3 + 1856) ? a3 + 1876 : a3 + 1872);
      v287 = (_QWORD *)(v285 + 8 * *v286);
      v288 = sub_1C564D410(v786, v283);
      if (v284 == v287)
        break;
      llvm::Instruction::clone((llvm::Instruction *)v283);
      v290 = v289;
      v870 = 2;
      v871 = 0;
      v872 = (int32x2_t ****)v283;
      if (v283 != -8192 && v283 != -4096 && v283)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v870);
      __src = &unk_1E814DA10;
      v873 = a7;
      v291 = sub_1C52E2ED8(a7, &__src);
      if (v872 != (int32x2_t ****)-8192 && v872 != (int32x2_t ****)-4096 && v872)
      {
        v292 = v870 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v870 & 0xFFFFFFFFFFFFFFF8) = v871;
        if (v871)
        {
          *v871 = *v871 & 7 | v292;
        }
        else
        {
          v293 = v872;
          v294 = ***v872;
          v295 = (unint64_t)v294[303];
          if (v295 <= v292)
          {
            v296 = v294[305].u32[0];
            if (v295 + 16 * v296 > v292)
            {
              v297 = v296 - 1;
              LODWORD(v298) = v297 & ((v872 >> 4) ^ (v872 >> 9));
              v299 = (int32x2_t *****)(v295 + 16 * v298);
              v300 = *v299;
              if (v872 == *v299)
              {
LABEL_341:
                *v299 = (int32x2_t ****)-8192;
                v294[304] = vadd_s32(v294[304], (int32x2_t)0x1FFFFFFFFLL);
                v293 = v872;
              }
              else
              {
                v301 = 1;
                while (v300 != (int32x2_t ****)-4096)
                {
                  v302 = v298 + v301++;
                  v298 = v302 & v297;
                  v300 = *(int32x2_t *****)(v295 + 16 * v298);
                  if (v872 == v300)
                  {
                    v299 = (int32x2_t *****)(v295 + 16 * v298);
                    goto LABEL_341;
                  }
                }
              }
              *((_BYTE *)v293 + 17) &= ~1u;
            }
          }
        }
      }
      v310 = v291[7];
      if (v310 != v290)
      {
        if (v310 && v310 != -8192 && v310 != -4096)
        {
          v360 = v291[5] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v360 = v291[6];
          v361 = (unint64_t *)v291[6];
          if (v361)
          {
            *v361 = *v361 & 7 | v360;
          }
          else
          {
            v362 = v291[7];
            v363 = ***(int32x2_t ****)v362;
            v364 = (unint64_t)v363[303];
            if (v364 <= v360)
            {
              v365 = v363[305].u32[0];
              if (v364 + 16 * v365 > v360)
              {
                v366 = v365 - 1;
                LODWORD(v367) = v366 & ((v362 >> 4) ^ (v362 >> 9));
                v368 = (uint64_t *)(v364 + 16 * v367);
                v369 = *v368;
                if (v362 == *v368)
                {
LABEL_432:
                  *v368 = -8192;
                  v363[304] = vadd_s32(v363[304], (int32x2_t)0x1FFFFFFFFLL);
                  v362 = v291[7];
                }
                else
                {
                  v370 = 1;
                  while (v369 != -4096)
                  {
                    v371 = v367 + v370++;
                    v367 = v371 & v366;
                    v369 = *(_QWORD *)(v364 + 16 * v367);
                    if (v362 == v369)
                    {
                      v368 = (uint64_t *)(v364 + 16 * v367);
                      goto LABEL_432;
                    }
                  }
                }
                *(_BYTE *)(v362 + 17) &= ~1u;
              }
            }
          }
        }
        v291[7] = v290;
        if (v290 != -8192 && v290 != -4096 && v290)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v291 + 5));
      }
      if (*(unsigned __int8 *)(v283 + 16) - 29 >= 0xB)
      {
        sub_1C564D5B4(v785, v290);
        if (*(_BYTE *)(v290 + 16) == 83)
        {
          v313 = *(uint64_t **)(v288 + 48);
          *(_QWORD *)(v290 + 40) = v288;
          *(_WORD *)(v288 + 18) &= ~0x8000u;
          if ((*(_BYTE *)(v290 + 23) & 0x10) != 0)
          {
            v373 = *(_QWORD *)(v288 + 56);
            if (v373)
            {
              v374 = *(llvm::ValueSymbolTable **)(v373 + 104);
              if (v374)
                llvm::ValueSymbolTable::reinsertValue(v374, (llvm::Value *)v290);
            }
          }
          v314 = *v313;
          *(_QWORD *)(v290 + 24) = *v313;
          *(_QWORD *)(v290 + 32) = v313;
          v315 = v290 + 24;
          *(_QWORD *)(v314 + 8) = v315;
          *v313 = v315;
        }
        else
        {
          *(_QWORD *)(v290 + 40) = v288;
          *(_WORD *)(v288 + 18) &= ~0x8000u;
          if ((*(_BYTE *)(v290 + 23) & 0x10) != 0)
          {
            v375 = *(_QWORD *)(v288 + 56);
            if (v375)
            {
              v376 = *(llvm::ValueSymbolTable **)(v375 + 104);
              if (v376)
                llvm::ValueSymbolTable::reinsertValue(v376, (llvm::Value *)v290);
            }
          }
          v328 = *(_QWORD *)(v288 + 40);
          *(_QWORD *)(v290 + 24) = v328;
          *(_QWORD *)(v290 + 32) = v288 + 40;
          v329 = v290 + 24;
          *(_QWORD *)(v328 + 8) = v329;
          *(_QWORD *)(v288 + 40) = v329;
        }
      }
      else
      {
        v311 = v793;
        if (v793 >= (unint64_t)HIDWORD(v793))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v792, (uint64_t)v794, v793 + 1, 16);
          v311 = v793;
        }
        v312 = (uint64_t *)((char *)v792 + 16 * v311);
        *v312 = v290;
        v312[1] = v288;
        LODWORD(v793) = v793 + 1;
      }
LABEL_378:
      if ((*(_BYTE *)(a3 + 1320) & 1) != 0)
      {
        v330 = 32;
        v331 = a3 + 1328;
LABEL_382:
        v332 = (v283 >> 4) ^ (v283 >> 9);
        v333 = v330 - 1;
        v334 = v333 & v332;
        v335 = *(_QWORD *)(v331 + 8 * (v333 & v332));
        if (v283 != v335)
        {
          v336 = 1;
          while (v335 != -4096)
          {
            v337 = v334 + v336++;
            v334 = v337 & v333;
            v335 = *(_QWORD *)(v331 + 8 * v334);
            if (v283 == v335)
              goto LABEL_386;
          }
          goto LABEL_420;
        }
LABEL_386:
        v843 = (uint64_t *)v288;
        v844 = (_QWORD **)(v288 + 40);
        if ((v816 & 1) != 0)
        {
          v339 = 32;
          v338 = (char *)&v816 + 8;
        }
        else
        {
          v338 = (char *)*((_QWORD *)&v816 + 1);
          v339 = v817;
          if (!(_DWORD)v817)
          {
            v340 = 0;
            goto LABEL_389;
          }
        }
        v342 = v339 - 1;
        LODWORD(v343) = (v339 - 1) & v332;
        v341 = &v338[16 * v343];
        v344 = *(_QWORD *)v341;
        if (*(_QWORD *)v341 != v283)
        {
          v345 = 1;
          while (v344 != -4096)
          {
            v346 = v343 + v345++;
            v343 = v346 & v342;
            v344 = *(_QWORD *)&v338[16 * v343];
            if (v344 == v283)
            {
              v341 = &v338[16 * v343];
              goto LABEL_396;
            }
          }
          if ((v816 & 1) != 0)
          {
            v338 = (char *)&v816 + 8;
            v340 = 32;
          }
          else
          {
            v338 = (char *)*((_QWORD *)&v816 + 1);
            v340 = v817;
          }
LABEL_389:
          v341 = &v338[16 * v340];
          v247 = a1;
          v282 = v768;
        }
LABEL_396:
        if (*(_BYTE *)(a3 + 4652))
        {
          if ((v809 & 1) != 0)
          {
            v348 = 4;
            v347 = &v810;
          }
          else
          {
            v347 = v810;
            v348 = v811;
            if (!v811)
            {
              v349 = 0;
              goto LABEL_409;
            }
          }
          v350 = v348 - 1;
          LODWORD(v349) = v350 & v332;
          v351 = &v347[2 * v349];
          v352 = *v351;
          if (*v351 != v283)
          {
            v353 = 1;
            while (v352 != -4096)
            {
              v354 = v349 + v353++;
              v349 = v354 & v350;
              v352 = v347[2 * v349];
              if (v352 == v283)
                goto LABEL_409;
            }
            if ((v809 & 1) != 0)
            {
              v347 = &v810;
              v349 = 4;
            }
            else
            {
              v347 = v810;
              v349 = v811;
            }
LABEL_409:
            v351 = &v347[2 * v349];
          }
          v355 = v810;
          if ((v809 & 1) != 0)
            v355 = &v810;
          v356 = v811;
          if ((v809 & 1) != 0)
            v356 = 4;
          if (&v355[2 * v356] != v351)
            goto LABEL_420;
        }
        v357 = *(_QWORD *)v283;
        if (*(_BYTE *)(*(_QWORD *)v283 + 8) == 16)
        {
          v358 = *((_DWORD *)v341 + 2);
          LODWORD(v865) = 0;
          if (*(_DWORD *)(v357 + 12))
          {
            do
            {
              LOWORD(v873) = 257;
              v359 = (uint64_t *)sub_1C506DBC4((uint64_t)&v840, (uint64_t *)v283, (unsigned int *)&v865, 1, (uint64_t)&__src);
              sub_1C5650B74(v359, *v247, (uint64_t)&v840, v781, v358);
              v358 += (sub_1C5645068(*v359, v781) + 1) & 0x1FFFFFFE;
              LODWORD(v865) = (_DWORD)v865 + 1;
            }
            while (*(_DWORD *)(v357 + 12) > v865);
          }
          v282 = v768;
        }
        else
        {
          sub_1C5650B74((uint64_t *)v283, *v247, (uint64_t)&v840, v781, *((_DWORD *)v341 + 2));
        }
        goto LABEL_420;
      }
      v330 = *(_DWORD *)(a3 + 1336);
      if (v330)
      {
        v331 = *(_QWORD *)(a3 + 1328);
        goto LABEL_382;
      }
LABEL_420:
      if (++v281 == (uint64_t *)v282)
        goto LABEL_447;
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v283 + 40) + 40, (uint64_t ***)v283);
    v304 = v283 + 24;
    v303 = *(_QWORD *)(v283 + 24);
    v305 = *(_QWORD **)(v283 + 32);
    *v305 = v303;
    *(_QWORD *)(v303 + 8) = v305;
    *(_QWORD *)(v283 + 32) = 0;
    *(_QWORD *)(v283 + 24) = 0;
    sub_1C564D5B4(v785, v283);
    v306 = (uint64_t *)(v288 + 40);
    if (*(_BYTE *)(v283 + 16) == 83)
    {
      v307 = *(uint64_t **)(v288 + 48);
      *(_QWORD *)(v283 + 40) = v288;
      *(_WORD *)(v288 + 18) &= ~0x8000u;
      if ((*(_BYTE *)(v283 + 23) & 0x10) == 0)
        goto LABEL_363;
      v308 = *(_QWORD *)(v288 + 56);
      if (!v308)
        goto LABEL_363;
      v309 = *(llvm::ValueSymbolTable **)(v308 + 104);
      if (!v309)
        goto LABEL_363;
    }
    else
    {
      *(_QWORD *)(v283 + 40) = v288;
      *(_WORD *)(v288 + 18) &= ~0x8000u;
      v307 = (uint64_t *)(v288 + 40);
      if ((*(_BYTE *)(v283 + 23) & 0x10) == 0)
        goto LABEL_363;
      v372 = *(_QWORD *)(v288 + 56);
      v307 = (uint64_t *)(v288 + 40);
      if (!v372)
        goto LABEL_363;
      v309 = *(llvm::ValueSymbolTable **)(v372 + 104);
      v307 = (uint64_t *)(v288 + 40);
      if (!v309)
        goto LABEL_363;
    }
    llvm::ValueSymbolTable::reinsertValue(v309, (llvm::Value *)v283);
LABEL_363:
    v316 = *v307;
    *(_QWORD *)(v283 + 24) = *v307;
    *(_QWORD *)(v283 + 32) = v307;
    *(_QWORD *)(v316 + 8) = v304;
    *v307 = v304;
    __src = &v871;
    v870 = 0x200000000;
    llvm::findDbgValues((uint64_t)&__src, v283);
    v317 = (uint64_t *)__src;
    if ((_DWORD)v870)
    {
      v318 = 8 * v870;
      do
      {
        v319 = *v317;
        if (sub_1C6281308((uint64_t)&v795, *v317))
        {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v319 + 40) + 40, (uint64_t ***)v319);
          v321 = *(_QWORD *)(v319 + 24);
          v322 = *(_QWORD **)(v319 + 32);
          v323 = v319 + 24;
          *v322 = v321;
          *(_QWORD *)(v321 + 8) = v322;
          *(_QWORD *)(v319 + 24) = 0;
          *(_QWORD *)(v319 + 32) = 0;
          *(_QWORD *)(v319 + 40) = v288;
          *(_WORD *)(v288 + 18) &= ~0x8000u;
          if ((*(_BYTE *)(v319 + 23) & 0x10) != 0)
          {
            v326 = *(_QWORD *)(v288 + 56);
            if (v326)
            {
              v327 = *(llvm::ValueSymbolTable **)(v326 + 104);
              if (v327)
                llvm::ValueSymbolTable::reinsertValue(v327, (llvm::Value *)v319);
            }
          }
          v324 = *v306;
          *(_QWORD *)(v319 + 24) = *v306;
          *(_QWORD *)(v319 + 32) = v306;
          *(_QWORD *)(v324 + 8) = v323;
          *v306 = v323;
        }
        else
        {
          v325 = llvm::UndefValue::get(*(llvm::UndefValue **)v283, v320);
          llvm::DbgVariableIntrinsic::replaceVariableLocationOp((llvm::DbgVariableIntrinsic *)v319, (llvm::Value *)v283, v325);
        }
        ++v317;
        v318 -= 8;
      }
      while (v318);
      v317 = (uint64_t *)__src;
      v247 = a1;
      v282 = v768;
    }
    if (v317 != (uint64_t *)&v871)
      free(v317);
    goto LABEL_378;
  }
LABEL_447:
  v377 = a3;
  if (!*(_BYTE *)(a3 + 4652))
    goto LABEL_611;
  v378 = *v845;
  __src = &v871;
  v870 = 0x1000000000;
  v379 = *(llvm::ConstantInt **)(v378 + 1936);
  v770 = v378;
  LODWORD(v866) = *(_DWORD *)(v378 + 1944) >> 8;
  if (v866 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v865, 0, 0);
  else
    v865 = 0;
  v380 = v760 + 272;
  v774 = (llvm::ValueHandleBase *)(v770 + 1936);
  v381 = llvm::ConstantInt::get(v379, (llvm::LLVMContext *)&v865, v278);
  if (v866 >= 0x41 && v865)
    MEMORY[0x1CAA32F9C](v865, 0x1000C8000313F17);
  v862 = (uint64_t)v381;
  v863[0] = 0;
  sub_1C565034C((uint64_t)&v865, (uint64_t)&v809, &v862, v863);
  if (*(_DWORD *)(a3 + 1592))
  {
    v383 = 0;
    for (ii = *(uint64_t ***)(a3 + 1584);
          ii != (uint64_t **)(*(_QWORD *)(v377 + 1584) + 8 * *(unsigned int *)(v377 + 1592));
          ++ii)
    {
      v385 = *ii;
      if ((v809 & 1) != 0)
      {
        v387 = 4;
        v386 = &v810;
      }
      else
      {
        v386 = v810;
        v387 = v811;
        if (!v811)
        {
          v388 = 0;
          goto LABEL_465;
        }
      }
      v389 = v387 - 1;
      LODWORD(v390) = (v387 - 1) & ((v385 >> 4) ^ (v385 >> 9));
      v391 = (uint64_t **)&v386[2 * v390];
      v392 = *v391;
      if (*v391 == v385)
        goto LABEL_466;
      v393 = 1;
      while (v392 != (uint64_t *)-4096)
      {
        v394 = v390 + v393++;
        v390 = v394 & v389;
        v392 = (uint64_t *)v386[2 * v390];
        if (v392 == v385)
        {
          v391 = (uint64_t **)&v386[2 * v390];
          goto LABEL_466;
        }
      }
      if ((v809 & 1) != 0)
      {
        v386 = &v810;
        v388 = 4;
      }
      else
      {
        v386 = v810;
        v388 = v811;
      }
LABEL_465:
      v391 = (uint64_t **)&v386[2 * v388];
LABEL_466:
      if ((v809 & 1) != 0)
        v395 = &v810;
      else
        v395 = v810;
      v396 = v811;
      if ((v809 & 1) != 0)
        v396 = 4;
      if (&v395[2 * v396] == v391)
        goto LABEL_519;
      v398 = *v391;
      v397 = (uint64_t)v391[1];
      if (v383 != v397)
      {
        if (v764 <= v763 && (v870 & 1) != 0)
        {
          v399 = *(llvm::ConstantInt **)(*v845 + 1936);
          LODWORD(v866) = *(_DWORD *)(*v845 + 1944) >> 8;
          if (v866 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v865, 0, 0);
          else
            v865 = 0;
          v400 = llvm::ConstantInt::get(v399, (llvm::LLVMContext *)&v865, v382);
          if (v866 >= 0x41 && v865)
            MEMORY[0x1CAA32F9C](v865, 0x1000C8000313F17);
          v401 = v870;
          if (v870 >= (unint64_t)HIDWORD(v870))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v871, v870 + 1, 16);
            v401 = v870;
          }
          v402 = (llvm::ValueHandleBase **)((char *)__src + 16 * v401);
          *v402 = v400;
          v402[1] = 0;
          LODWORD(v870) = v870 + 1;
        }
        v843 = (uint64_t *)v397;
        v844 = (_QWORD **)(v397 + 40);
        v383 = v397;
      }
      v403 = (uint64_t *)*((unsigned int *)sub_1C5651150((uint64_t)&v816, (uint64_t)v398) + 2);
      v404 = *v398;
      if (*v398)
        v405 = (*(_DWORD *)(*v398 + 8) & 0xFE) == 18;
      else
        v405 = 0;
      if (!v405)
      {
        sub_1C4768AD0(v781, *v398);
        v408 = v407;
        if ((_DWORD)v406 == 1)
        if (((v408 + 7) & 0xFFFFFFFFFFFFFFF8) <= 8)
        {
          v868 = 257;
          v409 = 39;
          goto LABEL_514;
        }
        if (*(unsigned __int8 *)(v770 + 1944) != *(unsigned __int8 *)(v404 + 8))
        {
          v868 = 257;
          v409 = 49;
LABEL_514:
          v398 = (uint64_t *)sub_1C4773E38((uint64_t *)&v840, v409, (unsigned __int8 *)v398, (uint64_t)v774, (uint64_t)&v865);
        }
        v425 = v870;
        if (v870 >= (unint64_t)HIDWORD(v870))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v871, v870 + 1, 16);
          v425 = v870;
        }
        v426 = (uint64_t **)((char *)__src + 16 * v425);
        *v426 = v398;
        v426[1] = v403;
        LODWORD(v870) = v870 + 1;
        v862 = (uint64_t)v398;
        v863[0] = v383;
        sub_1C565034C((uint64_t)&v865, (uint64_t)&v809, &v862, v863);
        goto LABEL_518;
      }
      v410 = sub_1C5648740(*(_QWORD *)(v404 + 24), v781);
      if (*(_DWORD *)(v404 + 32))
      {
        v411 = v410;
        v412 = 0;
        while (1)
        {
          v413 = *(llvm::ConstantInt **)(*v845 + 1960);
          v414 = *(_DWORD *)(*v845 + 1968);
          LODWORD(v866) = v414 >> 8;
          if (v414 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v865, v412, 0);
          }
          else
          {
            if (v414 <= 0xFF)
              v415 = 0;
            else
              v415 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v414);
            v865 = (void *)(v415 & v412);
          }
          v416 = llvm::ConstantInt::get(v413, (llvm::LLVMContext *)&v865, v382);
          if (v866 >= 0x41 && v865)
            MEMORY[0x1CAA32F9C](v865, 0x1000C8000313F17);
          v868 = 257;
          v417 = (uint64_t *)sub_1C4772EE0((uint64_t *)&v840, (uint64_t)v398, (uint64_t)v416, (uint64_t)&v865);
          v418 = *v417;
          sub_1C4768AD0(v781, *v417);
          v421 = v420;
          if ((_DWORD)v419 == 1)
          if (((v421 + 7) & 0xFFFFFFFFFFFFFFF8) <= 8)
            break;
          if (*(unsigned __int8 *)(v770 + 1944) != *(unsigned __int8 *)(v418 + 8))
          {
            v868 = 257;
            v422 = 49;
            goto LABEL_504;
          }
LABEL_505:
          v423 = v870;
          if (v870 >= (unint64_t)HIDWORD(v870))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v871, v870 + 1, 16);
            v423 = v870;
          }
          v424 = (uint64_t **)((char *)__src + 16 * v423);
          *v424 = v417;
          v424[1] = (uint64_t *)v403;
          LODWORD(v870) = v870 + 1;
          v862 = (uint64_t)v417;
          v863[0] = v383;
          sub_1C565034C((uint64_t)&v865, (uint64_t)&v809, &v862, v863);
          ++v412;
          LODWORD(v403) = (_DWORD)v403 + v411;
          if (v412 >= *(unsigned int *)(v404 + 32))
          {
            v377 = a3;
            goto LABEL_519;
          }
        }
        v868 = 257;
        v422 = 39;
LABEL_504:
        v417 = (uint64_t *)sub_1C4773E38((uint64_t *)&v840, v422, (unsigned __int8 *)v417, (uint64_t)v774, (uint64_t)&v865);
        goto LABEL_505;
      }
LABEL_518:
      v377 = a3;
LABEL_519:
      v380 = v760 + 272;
    }
  }
  v427 = v870;
  if (v764 <= v763 && (v870 & 1) != 0)
  {
    v428 = *(llvm::ConstantInt **)(*v845 + 1936);
    LODWORD(v866) = *(_DWORD *)(*v845 + 1944) >> 8;
    if (v866 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v865, 0, 0);
    else
      v865 = 0;
    v429 = llvm::ConstantInt::get(v428, (llvm::LLVMContext *)&v865, v382);
    if (v866 >= 0x41 && v865)
      MEMORY[0x1CAA32F9C](v865, 0x1000C8000313F17);
    v430 = v870;
    if (v870 >= HIDWORD(v870))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v871, v870 + 1, 16);
      v430 = v870;
    }
    v431 = (llvm::ValueHandleBase **)((char *)__src + 16 * v430);
    *v431 = v429;
    v431[1] = 0;
    v427 = v870 + 1;
    LODWORD(v870) = v870 + 1;
  }
  v865 = v867;
  v866 = 0x200000000;
  if (!v427)
    goto LABEL_609;
  v432 = 0;
  v433 = (__int128 *)__src;
  v434 = (char *)__src + 16 * v427;
  for (jj = 2; ; jj = HIDWORD(v866))
  {
    v436 = *v433;
    if (v432 >= jj)
    {
      *(_OWORD *)v771 = *v433;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v865, (uint64_t)v867, v432 + 1, 16);
      v436 = *(_OWORD *)v771;
      v432 = v866;
    }
    *((_OWORD *)v865 + v432) = v436;
    v437 = v866;
    v432 = v866 + 1;
    LODWORD(v866) = v432;
    if (v432 != 2)
      break;
    v438 = *(_QWORD *)v865;
    if ((v809 & 1) != 0)
    {
      v440 = 4;
      v439 = &v810;
    }
    else
    {
      v439 = v810;
      v440 = v811;
      if (!v811)
      {
        v441 = 0;
        goto LABEL_551;
      }
    }
    v442 = v440 - 1;
    LODWORD(v441) = (v440 - 1) & ((v438 >> 4) ^ (v438 >> 9));
    v443 = &v439[2 * v441];
    v444 = *v443;
    if (*v443 == v438)
      goto LABEL_552;
    v445 = 1;
    while (v444 != -4096)
    {
      v446 = v441 + v445++;
      v441 = v446 & v442;
      v444 = v439[2 * v441];
      if (v444 == v438)
        goto LABEL_551;
    }
    if ((v809 & 1) != 0)
    {
      v439 = &v810;
      v441 = 4;
    }
    else
    {
      v439 = v810;
      v441 = v811;
    }
LABEL_551:
    v443 = &v439[2 * v441];
LABEL_552:
    v447 = (uint64_t *)*((_QWORD *)v865 + 2);
    if ((v809 & 1) != 0)
    {
      v449 = 4;
      v448 = &v810;
    }
    else
    {
      v448 = v810;
      v449 = v811;
      if (!v811)
      {
        v450 = 0;
LABEL_564:
        v453 = (uint64_t **)&v448[2 * v450];
        goto LABEL_565;
      }
    }
    v451 = v449 - 1;
    LODWORD(v452) = (v449 - 1) & ((v447 >> 4) ^ (v447 >> 9));
    v453 = (uint64_t **)&v448[2 * v452];
    v454 = *v453;
    if (*v453 != v447)
    {
      v455 = 1;
      while (v454 != (uint64_t *)-4096)
      {
        v456 = v452 + v455++;
        v452 = v456 & v451;
        v454 = (uint64_t *)v448[2 * v452];
        if (v454 == v447)
        {
          v453 = (uint64_t **)&v448[2 * v452];
          goto LABEL_565;
        }
      }
      if ((v809 & 1) != 0)
      {
        v448 = &v810;
        v450 = 4;
      }
      else
      {
        v448 = v810;
        v450 = v811;
      }
      goto LABEL_564;
    }
LABEL_565:
    v457 = *((_DWORD *)v865 + 2);
    v458 = *((_DWORD *)v865 + 6);
    v459 = v443[1] + 40;
    v843 = (uint64_t *)v443[1];
    v844 = (_QWORD **)v459;
    v460 = *(llvm::ConstantInt **)(*v845 + 1936);
    LODWORD(v863[0]) = *(_DWORD *)(*v845 + 1944) >> 8;
    if (LODWORD(v863[0]) > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v862, 0, 0);
    else
      v862 = 0;
    v461 = llvm::ConstantInt::get(v460, (llvm::LLVMContext *)&v862, v382);
    if (LODWORD(v863[0]) >= 0x41 && v862)
      MEMORY[0x1CAA32F9C](v862, 0x1000C8000313F17);
    if (v447 == (uint64_t *)v461 || (uint64_t *)v443[1] == v453[1])
    {
      llvm::FixedVectorType::get(v774, (llvm::Type *)2);
      v466 = llvm::UndefValue::get(v463, v464);
      v864 = 257;
      v467 = *(llvm::ConstantInt **)(*v845 + 1984);
      v791 = *(_DWORD *)(*v845 + 1992) >> 8;
      if (v791 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v790, 0, 0);
      else
        v790 = 0;
      v468 = llvm::ConstantInt::get(v467, (llvm::LLVMContext *)&v790, v465);
      if (v791 >= 0x41 && v790)
        MEMORY[0x1CAA32F9C](v790, 0x1000C8000313F17);
      v470 = sub_1C4773154((uint64_t *)&v840, (uint64_t)v466, v438, (uint64_t)v468, (uint64_t)&v862);
      v864 = 257;
      v471 = *(llvm::ConstantInt **)(*v845 + 1984);
      v472 = *(_DWORD *)(*v845 + 1992);
      v791 = v472 >> 8;
      v377 = a3;
      if (v472 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v790, 1, 0);
      }
      else
      {
        if (v472 <= 0xFF)
          v473 = 0;
        else
          v473 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v472);
        v790 = v473 & 1;
      }
      v474 = llvm::ConstantInt::get(v471, (llvm::LLVMContext *)&v790, v469);
      if (v791 >= 0x41 && v790)
        MEMORY[0x1CAA32F9C](v790, 0x1000C8000313F17);
      v475 = sub_1C4773154((uint64_t *)&v840, (uint64_t)v470, (uint64_t)v447, (uint64_t)v474, (uint64_t)&v862);
      v476 = *v845 + 1960;
      v864 = 257;
      v477 = (uint64_t *)sub_1C4773E38((uint64_t *)&v840, 49, v475, v476, (uint64_t)&v862);
      v380 = v760 + 272;
      sub_1C5650D20(v477, *a1, (const llvm::APInt *)&v840, v781, v457);
    }
    else
    {
      v462 = (uint64_t *)v438;
      v380 = v760 + 272;
      sub_1C5650D20(v462, *a1, (const llvm::APInt *)&v840, v781, v457);
      v843 = v453[1];
      v844 = (_QWORD **)(v843 + 5);
      sub_1C5650D20(v447, *a1, (const llvm::APInt *)&v840, v781, v458);
      v377 = a3;
    }
    LODWORD(v866) = 0;
    if (++v433 == (__int128 *)v434)
    {
      v482 = v865;
      goto LABEL_607;
    }
    v432 = 0;
LABEL_583:
    ;
  }
  if (++v433 != (__int128 *)v434)
    goto LABEL_583;
  v482 = v865;
  if (v437)
    goto LABEL_607;
  v483 = *(uint64_t **)v865;
  if ((v809 & 1) != 0)
  {
    v485 = 4;
    v484 = &v810;
  }
  else
  {
    v484 = v810;
    v485 = v811;
    if (!v811)
    {
      v486 = 0;
      goto LABEL_1015;
    }
  }
  v728 = v485 - 1;
  LODWORD(v729) = (v485 - 1) & ((v483 >> 4) ^ (v483 >> 9));
  v730 = (uint64_t **)&v484[2 * v729];
  v731 = *v730;
  if (*v730 != v483)
  {
    v732 = 1;
    while (v731 != (uint64_t *)-4096)
    {
      v733 = v729 + v732++;
      v729 = v733 & v728;
      v731 = (uint64_t *)v484[2 * v729];
      if (v731 == v483)
      {
        v730 = (uint64_t **)&v484[2 * v729];
        goto LABEL_1016;
      }
    }
    if ((v809 & 1) != 0)
    {
      v486 = 4;
      v484 = &v810;
    }
    else
    {
      v484 = v810;
      v486 = v811;
    }
LABEL_1015:
    v730 = (uint64_t **)&v484[2 * v486];
  }
LABEL_1016:
  v734 = *((_DWORD *)v865 + 2);
  v735 = (uint64_t)(v730[1] + 5);
  v843 = v730[1];
  v844 = (_QWORD **)v735;
  sub_1C5650D20(v483, *a1, (const llvm::APInt *)&v840, v380, v734);
  v482 = v865;
LABEL_607:
  if (v482 != v867)
    free(v482);
LABEL_609:
  if (__src != &v871)
    free(__src);
LABEL_611:
  v487 = *(_DWORD *)(v377 + 2152);
  v488 = *(_QWORD *)(v377 + 2144);
  v489 = *(unsigned int *)(v377 + 2160);
  v490 = (uint64_t *)(v488 + 32 * v489);
  if (v487)
  {
    v491 = v760 + 272;
    if ((_DWORD)v489)
    {
      v492 = 32 * v489;
      v493 = *(uint64_t **)(v377 + 2144);
      while ((*v493 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v493 += 4;
        v492 -= 32;
        if (!v492)
        {
          v493 = (uint64_t *)(v488 + 32 * v489);
          break;
        }
      }
    }
    else
    {
      v493 = *(uint64_t **)(v377 + 2144);
    }
  }
  else
  {
    v493 = (uint64_t *)(v488 + 32 * v489);
    v491 = v760 + 272;
  }
  v494 = (uint64_t *)(v488 + 32 * v489);
  if (v493 == v494)
    goto LABEL_686;
  v495 = *a1;
  v496 = &v871;
  v778 = (uint64_t *)(v488 + 32 * v489);
  while (2)
  {
    v498 = v493[1];
    v497 = v493[2];
    v499 = (void *)v493[3];
    __src = v499;
    if ((v816 & 1) != 0)
    {
      v500 = 32;
      v501 = (char *)&v816 + 8;
LABEL_625:
      v502 = v500 - 1;
      v503 = v502 & ((v499 >> 4) ^ (v499 >> 9));
      v504 = &v501[16 * v503];
      v505 = *(void **)v504;
      if (v499 != *(void **)v504)
      {
        v506 = 0;
        v507 = 1;
        while (v505 != (void *)-4096)
        {
          if (v506)
            v508 = 0;
          else
            v508 = v505 == (void *)-8192;
          if (v508)
            v506 = v504;
          v509 = v503 + v507++;
          v503 = v509 & v502;
          v504 = &v501[16 * v503];
          v505 = *(void **)v504;
          if (v499 == *(void **)v504)
            goto LABEL_639;
        }
        if (v506)
          v510 = v506;
        else
          v510 = v504;
        goto LABEL_638;
      }
    }
    else
    {
      v500 = v817;
      if ((_DWORD)v817)
      {
        v501 = (char *)*((_QWORD *)&v816 + 1);
        goto LABEL_625;
      }
      v510 = 0;
LABEL_638:
      v504 = (char *)sub_1C5650774((uint64_t)&v816, (uint64_t)&__src, &__src, v510);
      *(_QWORD *)v504 = __src;
      *((_DWORD *)v504 + 2) = 0;
    }
LABEL_639:
    v511 = *((unsigned int *)v504 + 2);
    sub_1C4773D54((uint64_t)&__src, *v493, 0, 0, 0);
    v513 = **(_QWORD **)v498;
    if (v513)
      v514 = *(_BYTE *)(v513 + 8) == 15;
    else
      v514 = 0;
    if (v514 && !*(_QWORD *)(v513 + 24))
    {
      v527 = *v874;
      v528 = *(llvm::ConstantInt **)(*v874 + 1984);
      LODWORD(v866) = *(_DWORD *)(*v874 + 1992) >> 8;
      v529 = v496;
      if (v866 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v865, 0, 0);
      else
        v865 = 0;
      v531 = llvm::ConstantInt::get(v528, (llvm::LLVMContext *)&v865, v512);
      if (v866 >= 0x41 && v865)
        MEMORY[0x1CAA32F9C](v865, 0x1000C8000313F17);
      v532 = *(llvm::ConstantInt **)(v527 + 1984);
      v533 = *(_DWORD *)(v527 + 1992);
      LODWORD(v866) = v533 >> 8;
      if (v533 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v865, v511, 0);
      }
      else
      {
        if (v533 <= 0xFF)
          v534 = 0;
        else
          v534 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v533);
        v865 = (void *)(v534 & v511);
      }
      v377 = a3;
      v535 = llvm::ConstantInt::get(v532, (llvm::LLVMContext *)&v865, v530);
      if (v866 >= 0x41 && v865)
        MEMORY[0x1CAA32F9C](v865, 0x1000C8000313F17);
      v536 = (llvm::GetElementPtrInst *)v495[3];
      v862 = (uint64_t)v531;
      v863[0] = (uint64_t)v535;
      v865 = "new_gep";
      v868 = 259;
      v515 = sub_1C509D7B0((uint64_t *)&__src, v536, v495, (llvm::Value *)&v862, 2, (uint64_t)&v865);
      v496 = v529;
      v494 = v778;
    }
    else
    {
      v515 = (uint64_t)sub_1C5651210(**(llvm::PointerType ***)(v513 + 16), v495, (const llvm::APInt *)v511, (uint64_t)&__src);
    }
    if (*(_QWORD *)v498)
    {
      **(_QWORD **)(v498 + 16) = *(_QWORD *)(v498 + 8);
      v517 = *(_QWORD *)(v498 + 8);
      if (v517)
        *(_QWORD *)(v517 + 16) = *(_QWORD *)(v498 + 16);
    }
    *(_QWORD *)v498 = v515;
    if (v515)
    {
      v520 = *(_QWORD *)(v515 + 8);
      v518 = (uint64_t *)(v515 + 8);
      v519 = v520;
      *(_QWORD *)(v498 + 8) = v520;
      if (v520)
        *(_QWORD *)(v519 + 16) = v498 + 8;
      *(_QWORD *)(v498 + 16) = v518;
      *v518 = v498;
    }
    v521 = llvm::ConstantPointerNull::get(**(llvm::ConstantPointerNull ***)v497, v516);
    if (*(_QWORD *)v497)
    {
      **(_QWORD **)(v497 + 16) = *(_QWORD *)(v497 + 8);
      v522 = *(_QWORD *)(v497 + 8);
      if (v522)
        *(_QWORD *)(v522 + 16) = *(_QWORD *)(v497 + 16);
    }
    *(_QWORD *)v497 = v521;
    if (v521)
    {
      v525 = v521[1];
      v523 = v521 + 1;
      v524 = v525;
      *(_QWORD *)(v497 + 8) = v525;
      if (v525)
        *(_QWORD *)(v524 + 16) = v497 + 8;
      *(_QWORD *)(v497 + 16) = v523;
      *v523 = v497;
    }
    if (__src != v496)
      free(__src);
    v526 = v493 + 4;
    v493 = v490;
    v491 = v760 + 272;
    if (v526 != v490)
    {
      v493 = v526;
      while ((*v493 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v493 += 4;
        if (v493 == v490)
        {
          v493 = v490;
          break;
        }
      }
    }
    if (v493 != v494)
      continue;
    break;
  }
  v487 = *(_DWORD *)(v377 + 2152);
LABEL_686:
  v537 = a1;
  if (v487 | *(_DWORD *)(v377 + 2156))
  {
    v538 = *(unsigned int *)(v377 + 2160);
    v539 = *(_QWORD **)(v377 + 2144);
    if (v538 <= 4 * v487 || v538 < 0x41)
    {
      if ((_DWORD)v538)
      {
        v543 = 32 * v538;
        do
        {
          *v539 = -4096;
          v539 += 4;
          v543 -= 32;
        }
        while (v543);
      }
      *(_QWORD *)(v377 + 2152) = 0;
    }
    else if (v487)
    {
      v540 = 1 << (33 - __clz(v487 - 1));
      if (v540 <= 64)
        v541 = 64;
      else
        v541 = v540;
      if (v541 == (_DWORD)v538)
      {
        *(_QWORD *)(v377 + 2152) = 0;
        v542 = 32 * v538;
        do
        {
          *v539 = -4096;
          v539 += 4;
          v542 -= 32;
        }
        while (v542);
      }
      else
      {
        MEMORY[0x1CAA32FB4](v539, 8);
        v544 = (4 * v541 / 3u + 1) | ((unint64_t)(4 * v541 / 3u + 1) >> 1);
        v545 = v544 | (v544 >> 2) | ((v544 | (v544 >> 2)) >> 4);
        LODWORD(v545) = (((v545 | (v545 >> 8)) >> 16) | v545 | (v545 >> 8)) + 1;
        *(_DWORD *)(v377 + 2160) = v545;
        v546 = operator new(32 * v545, (std::align_val_t)8uLL);
        *(_QWORD *)(v377 + 2144) = v546;
        *(_QWORD *)(v377 + 2152) = 0;
        v547 = *(unsigned int *)(v377 + 2160);
        if ((_DWORD)v547)
        {
          v548 = 32 * v547;
          do
          {
            *v546 = -4096;
            v546 += 4;
            v548 -= 32;
          }
          while (v548);
        }
      }
    }
    else
    {
      MEMORY[0x1CAA32FB4](v539, 8);
      *(_QWORD *)(v377 + 2144) = 0;
      *(_QWORD *)(v377 + 2152) = 0;
      *(_DWORD *)(v377 + 2160) = 0;
    }
  }
  v549 = *(_DWORD *)(v377 + 2176);
  if (*(_QWORD *)(v377 + 2176))
  {
    v738 = *(unsigned int *)(v377 + 2184);
    if (v738 > 4 * v549 && v738 >= 0x41)
    {
      sub_1C56513DC((uint64_t)v759);
      if (v549)
      {
        v749 = 1 << (33 - __clz(v549 - 1));
        if (v749 <= 64)
          v750 = 64;
        else
          v750 = v749;
        if (v750 == *(_DWORD *)(v377 + 2184))
        {
          *(_QWORD *)(v377 + 2176) = 0;
          v751 = *(_QWORD **)(v377 + 2168);
          v752 = 32 * v750;
          do
          {
            *v751 = -4096;
            v751 += 4;
            v752 -= 32;
          }
          while (v752);
        }
        else
        {
          MEMORY[0x1CAA32FB4](*(_QWORD *)(v377 + 2168), 8);
          v753 = (4 * v750 / 3 + 1) | ((unint64_t)(4 * v750 / 3 + 1) >> 1);
          v754 = v753 | (v753 >> 2) | ((v753 | (v753 >> 2)) >> 4);
          LODWORD(v754) = (((v754 | (v754 >> 8)) >> 16) | v754 | (v754 >> 8)) + 1;
          *(_DWORD *)(v377 + 2184) = v754;
          v755 = operator new(32 * v754, (std::align_val_t)8uLL);
          *(_QWORD *)(v377 + 2168) = v755;
          *(_QWORD *)(v377 + 2176) = 0;
          v756 = *(unsigned int *)(v377 + 2184);
          if ((_DWORD)v756)
          {
            v757 = 32 * v756;
            do
            {
              *v755 = -4096;
              v755 += 4;
              v757 -= 32;
            }
            while (v757);
          }
        }
        goto LABEL_706;
      }
      if (*(_DWORD *)(v377 + 2184))
      {
        MEMORY[0x1CAA32FB4](*v759, 8);
        *v759 = 0;
        *(_QWORD *)(a3 + 2176) = 0;
        *(_DWORD *)(a3 + 2184) = 0;
        goto LABEL_706;
      }
    }
    else if ((_DWORD)v738)
    {
      v739 = *v759 + 24;
      v740 = 32 * v738;
      do
      {
        v741 = *(_QWORD *)(v739 - 24);
        if (v741 != -4096)
        {
          if (v741 != -8192)
          {
            v742 = *(void **)(v739 - 16);
            if ((void *)v739 != v742)
              free(v742);
          }
          *(_QWORD *)(v739 - 24) = -4096;
        }
        v739 += 32;
        v740 -= 32;
      }
      while (v740);
    }
    *(_QWORD *)(v377 + 2176) = 0;
  }
LABEL_706:
  v550 = *(void **)(v377 + 1864);
  if (v550 == *(void **)(v377 + 1856))
  {
LABEL_707:
    *(_QWORD *)(v377 + 1876) = 0;
  }
  else
  {
    v724 = *(unsigned int *)(v377 + 1872);
    if (v724 < 0x21 || 4 * (*(_DWORD *)(v377 + 1876) - *(_DWORD *)(v377 + 1880)) >= v724)
    {
      memset(v550, 255, 8 * v724);
      goto LABEL_707;
    }
    free(v550);
    v743 = *(_DWORD *)(v377 + 1876) - *(_DWORD *)(v377 + 1880);
    v744 = 1 << (33 - __clz(v743 - 1));
    if (v743 <= 0x10)
      v745 = 32;
    else
      v745 = v744;
    *(_DWORD *)(v377 + 1872) = v745;
    *(_QWORD *)(a3 + 1876) = 0;
    v746 = malloc_type_malloc(8 * v745, 0x4065EBACuLL);
    if (!v746)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    *(_QWORD *)(v377 + 1864) = v746;
    memset(v746, 255, 8 * *(unsigned int *)(v377 + 1872));
  }
  v551 = 0;
  v552 = v789[10];
  if (v552)
    v553 = v552 - 24;
  else
    v553 = 0;
  v554 = *(_QWORD *)(v553 + 48);
  if (v554)
    v555 = v554 - 24;
  else
    v555 = 0;
  v827 = *(_QWORD *)(v555 + 40);
  v828 = v555 + 24;
  v556 = *(void **)(v555 + 48);
  __src = v556;
  if (v556)
  {
    llvm::MetadataTracking::track((uint64_t)&__src, (unsigned __int8 *)v556, 2);
    v551 = __src;
  }
  sub_1C4774EF4((uint64_t)v825, 0, (uint64_t)v551);
  v557 = (char *)__src;
  if (__src)
    llvm::MetadataTracking::untrack((uint64_t)&__src, (unsigned __int8 *)__src);
  if (DWORD2(v819))
  {
    v558 = (unint64_t **)v819;
    v769 = v819 + 24 * DWORD2(v819);
    do
    {
      v559 = *v537;
      v560 = v537[1];
      v561 = **v558;
      v562 = *(unsigned __int8 *)(v561 + 8);
      v563 = v562 == 13 || v558[2] == 0;
      v564 = **v558;
      if (v563)
        goto LABEL_735;
      sub_1C4768AD0(v491, **v558);
      v566 = v565;
      if ((_DWORD)v557 == 1)
      v567 = v829;
      LODWORD(__src) = v566;
      if (v566 <= 63)
      {
        if (v566 <= 31)
        {
          switch(v566)
          {
            case 16:
              v564 = *v829 + 1936;
              break;
            case 8:
              v564 = *v829 + 1912;
              break;
            case 1:
              v564 = *v829 + 1888;
              break;
            default:
LABEL_826:
              v623 = sub_1C5270984(*v829 + 2168, &__src);
              v564 = *((_QWORD *)v623 + 1);
              if (!v564)
              {
                v624 = v623;
                v564 = sub_1C484358C(*v567 + 2040, 24, 3);
                v625 = (int)__src;
                *(_QWORD *)v564 = v567;
                *(_QWORD *)(v564 + 16) = 0;
                *(_QWORD *)(v564 + 8) = (v625 << 8) | 0xDu;
                *((_QWORD *)v624 + 1) = v564;
              }
              break;
          }
        }
        else
        {
          if (v566 != 32)
            goto LABEL_826;
          v564 = *v829 + 1960;
        }
      }
      else if (v566 == 64)
      {
        v564 = *v829 + 1984;
      }
      else
      {
        if (v566 != 128)
          goto LABEL_826;
        v564 = *v829 + 2008;
      }
      v562 = *(unsigned __int8 *)(v564 + 8);
LABEL_735:
      v568 = *((unsigned int *)v558 + 2);
      v775 = v558;
      v772 = v561;
      if (v562 == 16)
      {
        v569 = (uint64_t)llvm::UndefValue::get((llvm::UndefValue *)v564, (llvm::Type *)v557);
        LODWORD(v865) = 0;
        if (*(_DWORD *)(v564 + 12))
        {
          v570 = 0;
          do
          {
            v571 = *(_QWORD *)(*(_QWORD *)(v564 + 16) + 8 * v570);
            v572 = sub_1C565143C(v571, v559, (uint64_t)v825, v491, (const llvm::APInt *)v568);
            LOWORD(v873) = 257;
            v569 = sub_1C506D788((uint64_t)v825, v569, (uint64_t)v572, &v865, 1, (uint64_t)&__src);
            v568 = ((sub_1C5645068(v571, v491) + 1) & 0x1FFFFFFE) + v568;
            v570 = (_DWORD)v865 + 1;
            LODWORD(v865) = v570;
          }
          while (*(_DWORD *)(v564 + 12) > v570);
        }
      }
      else if ((v562 & 0xFE) == 0x12)
      {
        v573 = *(_QWORD *)(v564 + 24);
        sub_1C4768AD0(v491, v573);
        v576 = v575;
        if ((_DWORD)v574 == 1)
        v577 = (unint64_t)(v576 + 7) >> 3;
        v578 = *(unsigned int *)(v564 + 32);
        v569 = (uint64_t)llvm::UndefValue::get((llvm::UndefValue *)v564, (llvm::Type *)v574);
        if (v577 <= 2)
          v579 = 2;
        else
          v579 = v577;
        v779 = v579;
        if ((_DWORD)v578)
        {
          v580 = v578;
          for (kk = 0; kk != v580; ++kk)
          {
            v582 = sub_1C565143C(v573, v559, (uint64_t)v825, v491, (const llvm::APInt *)v568);
            LOWORD(v873) = 257;
            v584 = sub_1C4773E38((uint64_t *)v825, 38, v582, v573, (uint64_t)&__src);
            v585 = *(llvm::ConstantInt **)(*v829 + 1960);
            v586 = *(_DWORD *)(*v829 + 1968);
            LODWORD(v870) = v586 >> 8;
            if (v586 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&__src, kk, 0);
            }
            else
            {
              if (v586 <= 0xFF)
                v587 = 0;
              else
                v587 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v586);
              __src = (void *)(v587 & kk);
            }
            v588 = llvm::ConstantInt::get(v585, (llvm::LLVMContext *)&__src, v583);
            if (v870 >= 0x41 && __src)
              MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
            LOWORD(v873) = 257;
            v569 = (uint64_t)sub_1C4773154((uint64_t *)v825, v569, (uint64_t)v584, (uint64_t)v588, (uint64_t)&__src);
            v568 = (v568 + v779);
            v491 = v760 + 272;
          }
        }
      }
      else
      {
        v569 = (uint64_t)sub_1C565143C(v564, v559, (uint64_t)v825, v491, (const llvm::APInt *)v568);
      }
      if (v569)
      {
        if (*(_BYTE *)(v569 + 16) == 60)
        {
          v589 = (llvm::MDNode *)v775[2];
          if (v589 || *(_QWORD *)(v569 + 48) || (*(_BYTE *)(v569 + 23) & 0x20) != 0)
            llvm::Value::setMetadata((llvm::Value *)v569, 4, v589);
        }
      }
      if (v772 != v564)
      {
        __src = "rangedLdToOrigLd";
        LOWORD(v873) = 259;
        v569 = (uint64_t)sub_1C506D6A8((uint64_t *)v825, (unsigned __int8 *)v569, v772, (uint64_t)&__src);
      }
      v590 = *v775;
      v591 = (*v775)[1];
      v537 = a1;
      if (v591)
      {
        v592 = (unint64_t *)(v569 + 8);
        do
        {
          v593 = v591;
          v594 = (unint64_t *)(v591 + 8);
          v591 = *(_QWORD *)(v591 + 8);
          v595 = *(_QWORD *)(v594[2] + 40);
          if (v595 && *(uint64_t **)(v595 + 56) != v560)
          {
            if (*(_QWORD *)v593)
            {
              **(_QWORD **)(v593 + 16) = v591;
              v596 = *(_QWORD *)(v593 + 8);
              if (v596)
                *(_QWORD *)(v596 + 16) = *(_QWORD *)(v593 + 16);
            }
            *(_QWORD *)v593 = v569;
            if (v569)
            {
              v597 = *v592;
              *v594 = *v592;
              if (v597)
                *(_QWORD *)(v597 + 16) = v594;
              *(_QWORD *)(v593 + 16) = v592;
              *v592 = v593;
            }
          }
        }
        while (v591);
        v590 = *v775;
      }
      v870 = 2;
      v871 = 0;
      v872 = (int32x2_t ****)v569;
      if (v569 != -8192 && v569 != -4096 && v569)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v870);
      __src = &unk_1E814DA10;
      v873 = a8;
      v598 = sub_1C52E2ED8(a8, &__src);
      v377 = a3;
      if (v872 != (int32x2_t ****)-8192 && v872 != (int32x2_t ****)-4096 && v872)
      {
        v599 = v870 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v870 & 0xFFFFFFFFFFFFFFF8) = v871;
        if (v871)
        {
          *v871 = *v871 & 7 | v599;
        }
        else
        {
          v600 = v872;
          v601 = ***v872;
          v602 = (unint64_t)v601[303];
          if (v602 <= v599)
          {
            v603 = v601[305].u32[0];
            if (v602 + 16 * v603 > v599)
            {
              v604 = v603 - 1;
              LODWORD(v605) = v604 & ((v872 >> 4) ^ (v872 >> 9));
              v606 = (int32x2_t *****)(v602 + 16 * v605);
              v607 = *v606;
              if (v872 == *v606)
              {
LABEL_796:
                *v606 = (int32x2_t ****)-8192;
                v601[304] = vadd_s32(v601[304], (int32x2_t)0x1FFFFFFFFLL);
                v600 = v872;
              }
              else
              {
                v608 = 1;
                while (v607 != (int32x2_t ****)-4096)
                {
                  v609 = v605 + v608++;
                  v605 = v609 & v604;
                  v607 = *(int32x2_t *****)(v602 + 16 * v605);
                  if (v872 == v607)
                  {
                    v606 = (int32x2_t *****)(v602 + 16 * v605);
                    goto LABEL_796;
                  }
                }
              }
              *((_BYTE *)v600 + 17) &= ~1u;
            }
          }
        }
      }
      v610 = (unint64_t *)v598[7];
      if (v610 != v590)
      {
        if (v610 && v610 != (unint64_t *)-8192 && v610 != (unint64_t *)-4096)
        {
          v611 = v598[5] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v611 = v598[6];
          v612 = (unint64_t *)v598[6];
          if (v612)
          {
            *v612 = *v612 & 7 | v611;
          }
          else
          {
            v613 = v598[7];
            v614 = ***(int32x2_t ****)v613;
            v615 = (unint64_t)v614[303];
            if (v615 <= v611)
            {
              v616 = v614[305].u32[0];
              if (v615 + 16 * v616 > v611)
              {
                v617 = v616 - 1;
                LODWORD(v618) = v617 & ((v613 >> 4) ^ (v613 >> 9));
                v619 = (uint64_t *)(v615 + 16 * v618);
                v620 = *v619;
                if (v613 == *v619)
                {
LABEL_817:
                  *v619 = -8192;
                  v614[304] = vadd_s32(v614[304], (int32x2_t)0x1FFFFFFFFLL);
                  v613 = v598[7];
                }
                else
                {
                  v621 = 1;
                  while (v620 != -4096)
                  {
                    v622 = v618 + v621++;
                    v618 = v622 & v617;
                    v620 = *(_QWORD *)(v615 + 16 * v618);
                    if (v613 == v620)
                    {
                      v619 = (uint64_t *)(v615 + 16 * v618);
                      goto LABEL_817;
                    }
                  }
                }
                *(_BYTE *)(v613 + 17) &= ~1u;
              }
            }
          }
        }
        v598[7] = v590;
        if (v590 != (unint64_t *)-8192 && v590 != (unint64_t *)-4096 && v590)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v598 + 5));
      }
      v558 = v775 + 3;
    }
    while (v775 + 3 != (unint64_t **)v769);
  }
  if ((_DWORD)v793)
  {
    v626 = 16 * v793;
    v627 = (uint64_t *)((char *)v792 + 8);
    do
    {
      v628 = *(v627 - 1);
      v629 = *v627;
      *(_QWORD *)(v628 + 40) = *v627;
      *(_WORD *)(v629 + 18) &= ~0x8000u;
      if ((*(_BYTE *)(v628 + 23) & 0x10) != 0)
      {
        v632 = *(_QWORD *)(v629 + 56);
        if (v632)
        {
          v633 = *(llvm::ValueSymbolTable **)(v632 + 104);
          if (v633)
            llvm::ValueSymbolTable::reinsertValue(v633, (llvm::Value *)v628);
        }
      }
      v630 = *(_QWORD *)(v629 + 40);
      *(_QWORD *)(v628 + 24) = v630;
      *(_QWORD *)(v628 + 32) = v629 + 40;
      v631 = v628 + 24;
      *(_QWORD *)(v630 + 8) = v631;
      *(_QWORD *)(v629 + 40) = v631;
      v627 += 2;
      v626 -= 16;
    }
    while (v626);
  }
  v634 = a7;
  if ((*(_DWORD *)(a7 + 8) || *(_DWORD *)(v377 + 2244) != *(_DWORD *)(v377 + 2248)) && (_DWORD)v857)
  {
    v635 = (char *)v856;
    v782 = (char *)v856 + 16 * v857;
    while (1)
    {
      v636 = *((_QWORD *)v635 + 1);
      v637 = v636 + 40;
      v638 = *(_QWORD *)(v636 + 48);
      if (v638 != v636 + 40)
      {
        while (1)
        {
          if (v638)
            v639 = v638 - 24;
          else
            v639 = 0;
          if (*(unsigned __int8 *)(v639 + 16) - 29 >= 0xB)
          {
            v681 = (_QWORD *)operator new();
            *(_DWORD *)v681 = 7;
            v681[1] = 0;
            *((_DWORD *)v681 + 4) = 0;
            v681[5] = v634;
            v681[3] = v681 + 5;
            v681[6] = 0;
            v681[4] = 0x200000001;
            v681[9] = v681 + 11;
            v681[10] = 0x400000000;
            v681[23] = v681 + 25;
            v681[24] = 0x100000000;
            v681[27] = v681 + 29;
            v681[28] = 0x1000000000;
            v865 = v681;
            __src = v681;
            sub_1C5FD706C((uint64_t)v681, (uint64_t ***)v639);
            sub_1C5FD3718((uint64_t *)&__src, v682);
            llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v865, v683);
          }
          else
          {
            v640 = *(_DWORD *)(v639 + 20);
            v641 = v640 & 0x7FFFFFF;
            if ((v640 & 0x7FFFFFF) != 0)
            {
              for (mm = 0; mm != v641; ++mm)
              {
                v643 = *(_DWORD *)(v639 + 20);
                if ((v643 & 0x40000000) != 0)
                  v644 = *(_QWORD *)(v639 - 8);
                else
                  v644 = v639 - 32 * (v643 & 0x7FFFFFF);
                v645 = *(_QWORD *)(v644 + 32 * mm);
                v646 = *(unsigned int *)(v634 + 16);
                if ((_DWORD)v646)
                {
                  v647 = *(_QWORD *)v634;
                  v648 = ((v645 >> 4) ^ (v645 >> 9)) & ((_DWORD)v646 - 1);
                  v649 = *(_QWORD *)v634 + (v648 << 6);
                  v650 = *(_QWORD *)(v649 + 24);
                  if (v645 == v650)
                  {
LABEL_855:
                    if (v649 != v647 + (v646 << 6))
                    {
                      if ((v643 & 0x40000000) != 0)
                        v653 = *(_QWORD *)(v639 - 8);
                      else
                        v653 = v639 - 32 * (v643 & 0x7FFFFFF);
                      v654 = *(_QWORD *)(v649 + 56);
                      v655 = v653 + 32 * mm;
                      if (*(_QWORD *)v655)
                      {
                        **(_QWORD **)(v655 + 16) = *(_QWORD *)(v655 + 8);
                        v656 = *(_QWORD *)(v655 + 8);
                        if (v656)
                          *(_QWORD *)(v656 + 16) = *(_QWORD *)(v655 + 16);
                      }
                      *(_QWORD *)v655 = v654;
                      if (v654)
                      {
                        v659 = *(_QWORD *)(v654 + 8);
                        v657 = (_QWORD *)(v654 + 8);
                        v658 = v659;
                        v660 = v653 + 32 * mm;
                        *(_QWORD *)(v660 + 8) = v659;
                        if (v659)
                          *(_QWORD *)(v658 + 16) = v660 + 8;
                        *(_QWORD *)(v660 + 16) = v657;
                        *v657 = v655;
                      }
                      goto LABEL_895;
                    }
                  }
                  else
                  {
                    v651 = 1;
                    while (v650 != -4096)
                    {
                      v652 = v648 + v651++;
                      v648 = v652 & (v646 - 1);
                      v649 = v647 + (v648 << 6);
                      v650 = *(_QWORD *)(v649 + 24);
                      if (v645 == v650)
                        goto LABEL_855;
                    }
                  }
                }
                if (*(_BYTE *)(v645 + 16) == 22)
                {
                  v661 = sub_1C5EA72C0(*(_QWORD *)(a3 + 4616), (uint64_t)&v859, v645, 0xFFFFFFFF);
                  if (v661)
                    v663 = v661;
                  else
                    v663 = (uint64_t)v780;
                  v664 = *(_DWORD *)(v639 + 20);
                  if ((v664 & 0x40000000) != 0)
                    v665 = *(_QWORD *)(v639 - 8);
                  else
                    v665 = v639 - 32 * (v664 & 0x7FFFFFF);
                  v666 = v665 + 32 * mm;
                  if (*(_QWORD *)v666)
                  {
                    **(_QWORD **)(v666 + 16) = *(_QWORD *)(v666 + 8);
                    v667 = *(_QWORD *)(v666 + 8);
                    if (v667)
                      *(_QWORD *)(v667 + 16) = *(_QWORD *)(v666 + 16);
                  }
                  *(_QWORD *)v666 = v663;
                  if (v663)
                  {
                    v668 = (_QWORD *)(v663 + 8);
                    v669 = *(_QWORD *)(v663 + 8);
                    v670 = v665 + 32 * mm;
                    *(_QWORD *)(v670 + 8) = v669;
                    if (v669)
                      *(_QWORD *)(v669 + 16) = v670 + 8;
                    *(_QWORD *)(v670 + 16) = v668;
                    *v668 = v666;
                  }
                  for (nn = *(_QWORD *)(v663 + 48); nn != v663 + 40; nn = *(_QWORD *)(nn + 8))
                  {
                    v672 = nn ? nn - 24 : 0;
                    if (*(_BYTE *)(v672 + 16) != 83)
                      break;
                    v673 = *(_DWORD *)(v672 + 20);
                    v674 = v673 & 0x7FFFFFF;
                    if ((v673 & 0x7FFFFFF) == 0)
                    {
LABEL_891:
                      v680 = llvm::UndefValue::get(*(llvm::UndefValue **)v672, v662);
                      sub_1C477667C((llvm::PHINode *)v672, (uint64_t)v680, v663);
                      continue;
                    }
                    v675 = 0;
                    v676 = *(void **)v635;
                    v677 = 8 * v674;
                    v678 = v672 - 32 * v674;
                    while ((v673 & 0x40000000) == 0)
                    {
                      v679 = *(unsigned int *)(v672 + 60);
                      if (*(void **)(v678 + 32 * v679 + v675) == v676)
                        goto LABEL_893;
LABEL_890:
                      v675 += 8;
                      if (v677 == v675)
                        goto LABEL_891;
                    }
                    v679 = *(unsigned int *)(v672 + 60);
                    if (*(void **)(*(_QWORD *)(v672 - 8) + 32 * v679 + v675) != v676)
                      goto LABEL_890;
                    v678 = *(_QWORD *)(v672 - 8);
LABEL_893:
                    *(_QWORD *)(v678 + 32 * v679 + v675) = *((_QWORD *)v635 + 1);
                  }
                }
LABEL_895:
                v634 = a7;
              }
            }
          }
          v638 = *(_QWORD *)(v638 + 8);
          if (v638 == v637)
          {
            v636 = *((_QWORD *)v635 + 1);
            break;
          }
        }
      }
      if ((_QWORD **)v636 != v780)
      {
        v684 = *(_QWORD *)(v636 + 40);
        if (v684 == v636 + 40)
          break;
        v685 = v684 - 24;
        if (!v684)
          v685 = 0;
        if (*(unsigned __int8 *)(v685 + 16) - 29 >= 0xB)
          break;
      }
LABEL_907:
      v635 += 16;
      v634 = a7;
      if (v635 == v782)
        goto LABEL_967;
    }
    __src = *(void **)v635;
    v686 = sub_1C564FE20((uint64_t)&v812, (uint64_t)__src);
    v687 = &v813;
    if ((v812 & 1) == 0)
      v687 = v813;
    v688 = v814;
    if ((v812 & 1) != 0)
      v688 = 4;
    if (&v687[2 * v688] != (_QWORD *)v686)
    {
      v689 = (uint64_t *)(v686 + 8);
      goto LABEL_931;
    }
    v690 = *(_QWORD *)(v762 + 48);
    v691 = *(unsigned int *)(v762 + 64);
    if ((_DWORD)v691)
    {
      LODWORD(v692) = ((__src >> 4) ^ (__src >> 9)) & (v691 - 1);
      v693 = v690 + 16 * v692;
      v694 = *(void **)v693;
      if (__src != *(void **)v693)
      {
        v695 = 1;
        do
        {
          if (v694 == (void *)-4096)
            goto LABEL_921;
          v696 = v692 + v695++;
          v692 = v696 & (v691 - 1);
          v694 = *(void **)(v690 + 16 * v692);
        }
        while (__src != v694);
        v693 = v690 + 16 * v692;
      }
    }
    else
    {
LABEL_921:
      v693 = v690 + 16 * v691;
    }
    v697 = *(uint64_t **)(v693 + 8);
    do
    {
      v697 = (uint64_t *)v697[1];
      if (!v697)
      {
        v702 = (uint64_t)v780;
        goto LABEL_932;
      }
      v698 = sub_1C564FCF4((uint64_t)&v859, *v697);
      if ((v859 & 1) != 0)
        v699 = &v860;
      else
        v699 = v860;
      v700 = v861;
      if ((v859 & 1) != 0)
        v700 = 8;
    }
    while (&v699[2 * v700] == (_QWORD *)v698);
    v689 = (uint64_t *)(v698 + 8);
    v701 = *(_QWORD *)(v698 + 8);
    sub_1C564FF4C(&v812, &__src)[1] = v701;
LABEL_931:
    v702 = *v689;
LABEL_932:
    v843 = (uint64_t *)*((_QWORD *)v635 + 1);
    v844 = (_QWORD **)(v843 + 5);
    v703 = (char *)operator new(0x60uLL);
    v704 = v703;
    *((_DWORD *)v703 + 13) = *((_DWORD *)v703 + 13) & 0x38000000 | 1;
    *(_QWORD *)v703 = 0;
    *((_QWORD *)v703 + 2) = 0;
    *((_QWORD *)v703 + 1) = 0;
    *((_QWORD *)v703 + 4) = ***(_QWORD ***)v702 + 1576;
    v705 = (llvm::Value *)(v703 + 32);
    *((_QWORD *)v703 + 3) = v703 + 32;
    *((_QWORD *)v703 + 5) = 0;
    v703[48] = 30;
    v703[49] = 0;
    *((_WORD *)v703 + 25) = 0;
    *((_DWORD *)v703 + 13) = 1;
    *(_OWORD *)(v703 + 56) = 0u;
    *(_OWORD *)(v703 + 72) = 0u;
    *((_DWORD *)v703 + 22) = 0;
    *(_QWORD *)v703 = v702;
    v706 = (_QWORD *)(v702 + 8);
    v707 = *(_QWORD *)(v702 + 8);
    *((_QWORD *)v703 + 1) = v707;
    if (v707)
      *(_QWORD *)(v707 + 16) = v703 + 8;
    *((_QWORD *)v703 + 2) = v706;
    *v706 = v703;
    LOWORD(v873) = 257;
    (*((void (**)(void **, llvm::Value *, void **, uint64_t *, _QWORD **))*v847 + 2))(v847, v705, &__src, v843, v844);
    if ((_DWORD)v841)
    {
      v709 = (char *)v840;
      v710 = (char *)v840 + 16 * v841;
      v711 = (unsigned __int8 **)(v704 + 80);
      do
      {
        v712 = *(_DWORD *)v709;
        v713 = (unsigned __int8 *)*((_QWORD *)v709 + 1);
        if (v713)
        {
          if (!v712)
          {
            v865 = (void *)*((_QWORD *)v709 + 1);
            llvm::MetadataTracking::track((uint64_t)&v865, v713, 2);
            v708 = *v711;
            if (!*v711)
            {
LABEL_947:
              v708 = (unsigned __int8 *)v865;
              *v711 = (unsigned __int8 *)v865;
              if (v708)
                llvm::MetadataTracking::retrack((uint64_t)&v865, v708, (uint64_t)(v704 + 80));
              goto LABEL_944;
            }
LABEL_941:
            llvm::MetadataTracking::untrack((uint64_t)(v704 + 80), v708);
            goto LABEL_947;
          }
        }
        else
        {
          v708 = *v711;
          if (!*v711 && (v704[55] & 0x20) == 0)
            goto LABEL_944;
          if (!v712)
          {
            v865 = 0;
            if (!v708)
              goto LABEL_947;
            goto LABEL_941;
          }
        }
        llvm::Value::setMetadata(v705, *(_DWORD *)v709, (llvm::MDNode *)v713);
LABEL_944:
        v709 += 16;
      }
      while (v709 != v710);
    }
    v714 = *(_QWORD *)(v702 + 48);
LABEL_950:
    if (v714 == v702 + 40)
      goto LABEL_907;
    v715 = v714 ? v714 - 24 : 0;
    if (*(_BYTE *)(v715 + 16) != 83)
      goto LABEL_907;
    v716 = *(_DWORD *)(v715 + 20);
    v717 = v716 & 0x7FFFFFF;
    if ((v716 & 0x7FFFFFF) == 0)
    {
LABEL_962:
      v723 = llvm::UndefValue::get(*(llvm::UndefValue **)v715, (llvm::Type *)v708);
      sub_1C477667C((llvm::PHINode *)v715, (uint64_t)v723, v702);
      goto LABEL_965;
    }
    v718 = 0;
    v719 = *(void **)v635;
    v720 = 8 * v717;
    v721 = v715 - 32 * v717;
    while (1)
    {
      if ((v716 & 0x40000000) != 0)
      {
        v722 = *(unsigned int *)(v715 + 60);
        if (*(void **)(*(_QWORD *)(v715 - 8) + 32 * v722 + v718) == v719)
        {
          v721 = *(_QWORD *)(v715 - 8);
LABEL_964:
          *(_QWORD *)(v721 + 32 * v722 + v718) = *((_QWORD *)v635 + 1);
LABEL_965:
          v714 = *(_QWORD *)(v714 + 8);
          goto LABEL_950;
        }
      }
      else
      {
        v722 = *(unsigned int *)(v715 + 60);
        if (*(void **)(v721 + 32 * v722 + v718) == v719)
          goto LABEL_964;
      }
      v718 += 8;
      if (v720 == v718)
        goto LABEL_962;
    }
  }
LABEL_967:
  v843 = (uint64_t *)v780;
  v844 = v780 + 5;
  LLVMBuildRetVoid_0((uint64_t *)&v840);
  if (v792 != v794)
    free(v792);
  if (v806 != v808)
    free(v806);
  if ((v804 & 1) == 0)
    MEMORY[0x1CAA32FB4](v805, 8);
  if (v801 != v803)
    free(v801);
  if ((v795 & 1) == 0)
    MEMORY[0x1CAA32FB4](v796, 8);
  if ((v809 & 1) == 0)
    MEMORY[0x1CAA32FB4](v810, 8);
  if ((v812 & 1) == 0)
    MEMORY[0x1CAA32FB4](v813, 8);
  if ((v815[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v815[1], 8);
  if ((v816 & 1) == 0)
    MEMORY[0x1CAA32FB4](*((_QWORD *)&v816 + 1), 8);
  if ((__int128 *)v819 != &v820)
    free((void *)v819);
  if (v825[0] != v826)
    free(v825[0]);
  if (v840 != v842)
    free(v840);
  if (v856 != v858)
    free(v856);
  if ((v859 & 1) == 0)
    MEMORY[0x1CAA32FB4](v860, 8);
}

uint64_t sub_1C564D410(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (*(_DWORD *)(a1[1] + 2244) == *(_DWORD *)(a1[1] + 2248))
    return *(_QWORD *)*a1;
  v4 = *(_QWORD *)(a2 + 40);
  v5 = sub_1C564FCF4(a1[2], v4);
  v6 = a1[2];
  v7 = v6 + 8;
  if ((*(_BYTE *)v6 & 1) != 0)
  {
    v8 = 8;
  }
  else
  {
    v7 = *(_QWORD *)(v6 + 8);
    v8 = *(unsigned int *)(v6 + 16);
  }
  if (v7 + 16 * v8 != v5)
    return *(_QWORD *)(v5 + 8);
  v9 = (uint64_t *)a1[3];
  v28 = v4;
  v10 = sub_1C564FE20(v9[1], v4);
  v11 = v9[1];
  v12 = v11 + 8;
  if ((*(_BYTE *)v11 & 1) != 0)
  {
    v13 = 4;
  }
  else
  {
    v12 = *(_QWORD *)(v11 + 8);
    v13 = *(unsigned int *)(v11 + 16);
  }
  if (v12 + 16 * v13 == v10)
  {
    v15 = *(_QWORD *)(*v9 + 24);
    v16 = *(unsigned int *)(*v9 + 40);
    if ((_DWORD)v16)
    {
      LODWORD(v17) = (v16 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      v18 = (uint64_t *)(v15 + 16 * v17);
      v19 = *v18;
      if (v4 == *v18)
        goto LABEL_20;
      v20 = 1;
      while (v19 != -4096)
      {
        v21 = v17 + v20++;
        v17 = v21 & (v16 - 1);
        v19 = *(_QWORD *)(v15 + 16 * v17);
        if (v4 == v19)
        {
          v18 = (uint64_t *)(v15 + 16 * v17);
          goto LABEL_20;
        }
      }
    }
    v18 = (uint64_t *)(v15 + 16 * v16);
LABEL_20:
    v22 = (uint64_t *)v18[1];
    while (1)
    {
      v22 = (uint64_t *)v22[1];
      if (!v22)
        break;
      v23 = sub_1C564FCF4(v9[2], *v22);
      v24 = v9[2];
      v25 = v24 + 8;
      if ((*(_BYTE *)v24 & 1) != 0)
      {
        v26 = 8;
      }
      else
      {
        v25 = *(_QWORD *)(v24 + 8);
        v26 = *(unsigned int *)(v24 + 16);
      }
      if (v25 + 16 * v26 != v23)
      {
        v14 = (uint64_t *)(v23 + 8);
        v27 = *(_QWORD *)(v23 + 8);
        sub_1C564FF4C((_DWORD *)v9[1], &v28)[1] = v27;
        return *v14;
      }
    }
    v14 = v9 + 3;
    return *v14;
  }
  v14 = (uint64_t *)(v10 + 8);
  return *v14;
}

_QWORD *sub_1C564D5B4(_QWORD *result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t v27;

  if (*(_QWORD *)(*(_QWORD *)*result + 96) && *(_DWORD *)(result[1] + 8))
  {
    v2 = *(_DWORD *)(a2 + 20);
    if ((v2 & 0x40000000) != 0)
    {
      v4 = *(uint64_t **)(a2 - 8);
      v3 = v2 & 0x7FFFFFF;
      if (!v3)
        return result;
    }
    else
    {
      v3 = v2 & 0x7FFFFFF;
      v4 = (uint64_t *)(a2 - 32 * v3);
      if (!v3)
        return result;
    }
    v5 = &v4[4 * v3];
    while (1)
    {
      v6 = *v4;
      v7 = (uint64_t *)result[1];
      v8 = *v7;
      v9 = *((unsigned int *)v7 + 4);
      v10 = *v4 >> 4;
      if (!(_DWORD)v9)
        goto LABEL_16;
      v11 = v9 - 1;
      v12 = (v10 ^ (v6 >> 9)) & ((_DWORD)v9 - 1);
      v13 = *(_QWORD *)(v8 + (v12 << 6) + 24);
      if (v6 != v13)
        break;
      if ((_DWORD)v12 != (_DWORD)v9)
      {
        v17 = v8 + (v9 << 6);
        goto LABEL_20;
      }
LABEL_33:
      v4 += 4;
      if (v4 == v5)
        return result;
    }
    v14 = 1;
    while (v13 != -4096)
    {
      v15 = v12 + v14++;
      v12 = v15 & v11;
      v16 = v8 + (v12 << 6);
      v13 = *(_QWORD *)(v16 + 24);
      if (v6 == v13)
        goto LABEL_17;
    }
LABEL_16:
    v16 = v8 + (v9 << 6);
LABEL_17:
    v17 = v8 + (v9 << 6);
    if (v16 == v17)
      goto LABEL_33;
    if ((_DWORD)v9)
    {
      v11 = v9 - 1;
      v12 = (v10 ^ (v6 >> 9)) & ((_DWORD)v9 - 1);
LABEL_20:
      LODWORD(v18) = v12;
      v19 = v8 + (v12 << 6);
      v20 = *(_QWORD *)(v19 + 24);
      if (v6 == v20)
      {
LABEL_26:
        v23 = *(_QWORD *)(v19 + 56);
        if (v6)
        {
          *(_QWORD *)v4[2] = v4[1];
          v24 = v4[1];
          if (v24)
            *(_QWORD *)(v24 + 16) = v4[2];
        }
        *v4 = v23;
        if (v23)
        {
          v27 = *(_QWORD *)(v23 + 8);
          v26 = (uint64_t **)(v23 + 8);
          v25 = v27;
          v4[1] = v27;
          if (v27)
            *(_QWORD *)(v25 + 16) = v4 + 1;
          v4[2] = (uint64_t)v26;
          *v26 = v4;
        }
        goto LABEL_33;
      }
      v21 = 1;
      while (v20 != -4096)
      {
        v22 = v18 + v21++;
        v18 = v22 & v11;
        v19 = v8 + (v18 << 6);
        v20 = *(_QWORD *)(v19 + 24);
        if (v6 == v20)
          goto LABEL_26;
      }
    }
    v19 = v17;
    goto LABEL_26;
  }
  return result;
}

_QWORD *sub_1C564D720(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C483DE40((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C564D77C(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C564D77C(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 8;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1C564D83C((uint64_t)a1, v7);
  v9 = 0;
  sub_1C483DE40((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C564D83C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[17];

  v14[16] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C564D9B4(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C564D9B4(a1, v14, v9);
}

uint64_t sub_1C564D9B4(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 136);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C483DE40((uint64_t)v5, a2, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t **sub_1C564DA78(uint64_t **result, uint64_t **a2, uint64_t *a3, unint64_t a4, uint64_t **a5, uint64_t a6)
{
  uint64_t **v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t **v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t **v23;
  uint64_t **v25;
  unint64_t v26;
  uint64_t **v27;
  unint64_t v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t **v32;
  uint64_t *v33;
  unsigned int v34;
  uint64_t **v35;
  uint64_t v36;
  char v37;
  uint64_t **v38;
  uint64_t v39;

  if (a4 >= 2)
  {
    v8 = result;
    if (a4 == 2)
    {
      v9 = *result;
      v10 = sub_1C5648740(**(a2 - 1), *a3);
      result = (uint64_t **)sub_1C5648740(*v9, *a3);
      if (v10 < result)
      {
        v11 = *v8;
        *v8 = *(a2 - 1);
        *(a2 - 1) = v11;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v25 = a5;
      v26 = a4 >> 1;
      v27 = &result[a4 >> 1];
      v28 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1C564DD34(result, v27, a3, v28, a5);
        v29 = &v25[v26];
        result = sub_1C564DD34(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v29);
        v30 = &v25[a4];
        v31 = v29;
        while (v31 != v30)
        {
          v32 = v31;
          v33 = *v25;
          v34 = sub_1C5648740(**v31, *a3);
          result = (uint64_t **)sub_1C5648740(*v33, *a3);
          if (v34 < result)
            v35 = v32;
          else
            v35 = v25;
          v25 += v34 >= result;
          v31 = &v32[v34 < result];
          *v8++ = *v35;
          if (v25 == v29)
          {
            if (v31 != v30)
            {
              v36 = 0;
              if (v34 < result)
                v37 = 1;
              else
                v37 = 2;
              v38 = &v32[v37 & 1];
              do
              {
                v8[v36] = v38[v36];
                ++v36;
              }
              while (&v38[v36] != v30);
            }
            return result;
          }
        }
        if (v25 != v29)
        {
          v39 = 0;
          do
          {
            v8[v39] = v25[v39];
            ++v39;
          }
          while (&v25[v39] != v29);
        }
      }
      else
      {
        sub_1C564DA78(result, v27, a3, v28, a5, a6);
        sub_1C564DA78(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v25, a6);
        return sub_1C564DF9C(v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), v25, a6);
      }
    }
    else if (result != a2)
    {
      v13 = result + 1;
      if (result + 1 != a2)
      {
        v14 = 0;
        v15 = result;
        do
        {
          v17 = *v15;
          v16 = v15[1];
          v15 = v13;
          v18 = sub_1C5648740(*v16, *a3);
          result = (uint64_t **)sub_1C5648740(*v17, *a3);
          if (v18 < result)
          {
            v19 = *v15;
            v20 = v14;
            while (1)
            {
              *(uint64_t **)((char *)v8 + v20 + 8) = *(uint64_t **)((char *)v8 + v20);
              if (!v20)
                break;
              v21 = *(uint64_t **)((char *)v8 + v20 - 8);
              v22 = sub_1C5648740(*v19, *a3);
              result = (uint64_t **)sub_1C5648740(*v21, *a3);
              v20 -= 8;
              if (v22 >= result)
              {
                v23 = (uint64_t **)((char *)v8 + v20 + 8);
                goto LABEL_15;
              }
            }
            v23 = v8;
LABEL_15:
            *v23 = v19;
          }
          v13 = v15 + 1;
          v14 += 8;
        }
        while (v15 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t **sub_1C564DD34(uint64_t **result, uint64_t **a2, uint64_t *a3, unint64_t a4, uint64_t **a5)
{
  uint64_t **v5;
  uint64_t **v7;
  uint64_t **v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t **v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t **v32;
  uint64_t v33;

  if (a4)
  {
    v5 = a5;
    v7 = result;
    if (a4 == 1)
    {
LABEL_9:
      *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      v10 = a2 - 1;
      v11 = *result;
      v12 = sub_1C5648740(**(a2 - 1), *a3);
      result = (uint64_t **)sub_1C5648740(*v11, *a3);
      if (v12 >= result)
        v13 = v7;
      else
        v13 = v10;
      *v5++ = *v13;
      if (v12 >= result)
        v7 = v10;
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      v25 = &result[a4 >> 1];
      sub_1C564DA78(result, v25, a3, a4 >> 1, a5, a4 >> 1);
      result = (uint64_t **)sub_1C564DA78(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v26 = &v7[a4 >> 1];
      while (v26 != a2)
      {
        v27 = v26;
        v28 = *v7;
        v29 = sub_1C5648740(**v26, *a3);
        result = (uint64_t **)sub_1C5648740(*v28, *a3);
        if (v29 >= result)
          v30 = v7;
        else
          v30 = v27;
        v26 = &v27[v29 < result];
        v7 += v29 >= result;
        *v5++ = *v30;
        if (v7 == v25)
        {
          if (v26 != a2)
          {
            v31 = 0;
            v32 = &v27[v29 < result];
            do
            {
              v5[v31] = v32[v31];
              ++v31;
            }
            while (&v32[v31] != a2);
          }
          return result;
        }
      }
      if (v7 != v25)
      {
        v33 = 0;
        do
        {
          v5[v33] = v7[v33];
          ++v33;
        }
        while (&v7[v33] != v25);
      }
    }
    else if (result != a2)
    {
      v14 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        v15 = 0;
        v16 = a5;
        do
        {
          v17 = v16;
          v18 = *v16++;
          v19 = sub_1C5648740(**v14, *a3);
          result = (uint64_t **)sub_1C5648740(*v18, *a3);
          v20 = v16;
          if (v19 < result)
          {
            v17[1] = *v17;
            v20 = v5;
            if (v17 != v5)
            {
              v21 = v15;
              while (1)
              {
                v20 = (uint64_t **)((char *)v5 + v21);
                v22 = *(uint64_t **)((char *)v5 + v21 - 8);
                v23 = sub_1C5648740(**v14, *a3);
                result = (uint64_t **)sub_1C5648740(*v22, *a3);
                if (v23 >= result)
                  break;
                *v20 = *(v20 - 1);
                v21 -= 8;
                if (!v21)
                {
                  v20 = v5;
                  break;
                }
              }
            }
          }
          v24 = *v14++;
          *v20 = v24;
          v15 += 8;
        }
        while (v14 != a2);
      }
    }
  }
  return result;
}

uint64_t **sub_1C564DF9C(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t **a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t **v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t **v20;
  unint64_t v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t **v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t **v45;
  uint64_t **v46;
  uint64_t **v47;
  uint64_t **v48;
  uint64_t *v49;
  unsigned int v50;
  uint64_t **v51;
  uint64_t v52;
  uint64_t **v53;
  uint64_t *v54;
  unsigned int v55;
  uint64_t **v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t **v62;
  uint64_t **v63;
  uint64_t **v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t **v68;
  uint64_t *v69;

  if (!a6)
    return result;
  v10 = a6;
  v15 = result;
  while (a5 > a8 && v10 > a8)
  {
    if (!a5)
      return result;
    while (1)
    {
      v16 = *v15;
      v17 = sub_1C5648740(**a2, *a4);
      result = (uint64_t **)sub_1C5648740(*v16, *a4);
      if (v17 < result)
        break;
      ++v15;
      if (!--a5)
        return result;
    }
    v68 = a3;
    v69 = a4;
    if (a5 >= v10)
    {
      if (a5 == 1)
      {
        v57 = *v15;
        *v15 = *a2;
        *a2 = v57;
        return result;
      }
      if (a5 >= 0)
        v27 = a5;
      else
        v27 = a5 + 1;
      v21 = v27 >> 1;
      v26 = a2;
      a2 = &v15[v27 >> 1];
      v19 = a3 - v26;
      if (a3 == v26)
      {
        v20 = a3;
        goto LABEL_36;
      }
      v60 = v27 >> 1;
      v61 = a8;
      v64 = a7;
      v65 = v10;
      v28 = *a4;
      v63 = v26;
      v20 = v26;
      do
      {
        v29 = v19 >> 1;
        v30 = &v20[v19 >> 1];
        v32 = *v30;
        v31 = v30 + 1;
        v33 = *a2;
        v34 = v19;
        v35 = sub_1C5648740(*v32, v28);
        v36 = sub_1C5648740(*v33, v28);
        if (v35 >= v36)
          v19 = v29;
        else
          v19 = v34 + ~(v34 >> 1);
        if (v35 < v36)
          v20 = v31;
      }
      while (v19);
      v26 = v63;
      a7 = v64;
      v19 = v20 - v63;
      v21 = v60;
      a8 = v61;
    }
    else
    {
      if (v10 >= 0)
        v18 = v10;
      else
        v18 = v10 + 1;
      v19 = v18 >> 1;
      v20 = &a2[v18 >> 1];
      v21 = a2 - v15;
      if (a2 == v15)
      {
        v15 = a2;
        goto LABEL_42;
      }
      v59 = v18 >> 1;
      v65 = v10;
      v62 = a2;
      a2 = v15;
      do
      {
        v22 = &a2[v21 >> 1];
        v24 = *v22;
        v23 = v22 + 1;
        v25 = sub_1C5648740(**v20, *a4);
        if (v25 < sub_1C5648740(*v24, *a4))
        {
          v21 >>= 1;
        }
        else
        {
          a2 = v23;
          v21 += ~(v21 >> 1);
        }
      }
      while (v21);
      v21 = a2 - v15;
      v26 = v62;
      v19 = v59;
    }
    v10 = v65;
LABEL_36:
    if (a2 != v26)
    {
      if (v26 == v20)
      {
        v20 = v26;
        a3 = a2;
      }
      else if (a2 + 1 == v26)
      {
        v66 = *a2;
        v38 = v10;
        v39 = (char *)v20 - (char *)v26;
        v40 = v19;
        memmove(a2, v26, (char *)v20 - (char *)v26);
        v19 = v40;
        a3 = (uint64_t **)((char *)a2 + v39);
        v10 = v38;
        *a3 = v66;
      }
      else
      {
        v37 = v19;
        if (v26 + 1 == v20)
        {
          v67 = v10;
          v41 = *(v20 - 1);
          a3 = a2 + 1;
          if (v20 - 1 != a2)
            memmove(a2 + 1, a2, (char *)(v20 - 1) - (char *)a2);
          *a2 = v41;
          v10 = v67;
        }
        else
        {
          a3 = (uint64_t **)sub_1C4E85DF0(a2, v26, v20);
        }
        v19 = v37;
      }
      goto LABEL_49;
    }
    a2 = v26;
LABEL_42:
    a3 = v20;
LABEL_49:
    a5 -= v21;
    v10 -= v19;
    a4 = v69;
    if ((uint64_t)(v19 + v21) >= v10 + a5)
    {
      v42 = a5;
      v43 = v19;
      result = (uint64_t **)sub_1C564DF9C(a3, v20, v68, v69, v42, v10, a7, a8);
      v20 = a2;
      v10 = v43;
      a5 = v21;
    }
    else
    {
      result = (uint64_t **)sub_1C564DF9C(v15, a2, a3, v69, v21, v19, a7, a8);
      v15 = a3;
      a3 = v68;
    }
    a2 = v20;
    if (!v10)
      return result;
  }
  if (a5 <= v10)
  {
    if (v15 != a2)
    {
      v52 = 0;
      do
      {
        a7[v52] = v15[v52];
        ++v52;
      }
      while (&v15[v52] != a2);
      if (v52 * 8)
      {
        v53 = a7;
        while (a2 != a3)
        {
          v54 = *v53;
          v55 = sub_1C5648740(**a2, *a4);
          result = (uint64_t **)sub_1C5648740(*v54, *a4);
          if (v55 < result)
            v56 = a2;
          else
            v56 = v53;
          v53 += v55 >= result;
          a2 += v55 < result;
          *v15++ = *v56;
          if (&a7[v52] == v53)
            return result;
        }
        return (uint64_t **)memmove(v15, v53, (char *)a7 - (char *)v53 + v52 * 8);
      }
    }
  }
  else if (a2 != a3)
  {
    v44 = 0;
    do
    {
      a7[v44] = a2[v44];
      ++v44;
    }
    while (&a2[v44] != a3);
    if (v44 * 8)
    {
      v45 = &a7[v44];
      v46 = a3 - 1;
      while (a2 != v15)
      {
        v47 = a2;
        v48 = a2 - 1;
        v49 = *(a2 - 1);
        v50 = sub_1C5648740(**(v45 - 1), *a4);
        result = (uint64_t **)sub_1C5648740(*v49, *a4);
        if (v50 >= result)
          v51 = v45;
        else
          v51 = v47;
        if (v50 >= result)
          a2 = v47;
        else
          a2 = v48;
        if (v50 >= result)
          --v45;
        *v46-- = *(v51 - 1);
        if (v45 == a7)
          return result;
      }
      if (v45 != a7)
      {
        v58 = 0;
        do
        {
          v46[v58] = v45[v58 - 1];
          --v58;
        }
        while (&v45[v58] != a7);
      }
    }
  }
  return result;
}

char *sub_1C564E46C(char *result, char *a2, unint64_t a3, char *a4, uint64_t a5)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ***v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ****v14;
  uint64_t ***v15;
  int v16;
  int v17;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t ***v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ****v28;
  uint64_t ***v29;
  int v30;
  int v31;
  uint64_t ***v32;
  size_t v33;
  size_t v34;
  uint64_t v35;
  uint64_t ***v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t ****v41;
  uint64_t ***v42;
  int v43;
  int v44;
  uint64_t ***v45;
  char *v46;
  size_t v47;
  size_t v48;
  size_t v49;
  char *v50;
  uint64_t ***v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t ****v56;
  uint64_t ***v57;
  int v58;
  int v59;
  uint64_t ***v60;
  size_t v61;
  size_t v62;
  uint64_t ***v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t ****v68;
  uint64_t ***v69;
  int v70;
  int v71;
  uint64_t ***v72;
  char *v73;
  size_t v74;
  size_t v75;
  size_t v76;
  int v77;
  char *v79;
  unint64_t v80;
  char *v81;
  unint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t ***v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t ****v92;
  uint64_t ***v93;
  int v94;
  int v95;
  uint64_t ***v96;
  size_t v97;
  size_t v98;
  uint64_t v99;
  uint64_t ***v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t ****v105;
  uint64_t ***v106;
  int v107;
  int v108;
  uint64_t ***v109;
  char *v110;
  size_t v111;
  size_t v112;
  size_t v113;
  uint64_t ***v114;
  size_t v115;
  size_t v116;
  uint64_t ***v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t ****v122;
  uint64_t ***v123;
  int v124;
  int v125;
  uint64_t ***v126;
  char *v127;
  size_t v128;
  size_t v129;
  size_t v130;
  uint64_t v131;
  uint64_t v132;

  if (a3 < 2)
    return result;
  v6 = result;
  if (a3 == 2)
  {
    v7 = *((_QWORD *)a2 - 1);
    v8 = *(_QWORD *)result;
    v9 = *(uint64_t ****)(v7 + 40);
    if ((*((_BYTE *)v9 + 23) & 0x10) == 0)
    {
      v115 = 0;
      result = &byte_1C871356D;
LABEL_116:
      v117 = *(uint64_t ****)(v8 + 40);
      if ((*((_BYTE *)v117 + 23) & 0x10) == 0)
      {
        v128 = 0;
        v127 = &byte_1C871356D;
LABEL_125:
        if (v128 >= v115)
          v130 = v115;
        else
          v130 = v128;
        if (v130 && (result = (char *)memcmp(result, v127, v130), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v115 >= v128)
        {
          return result;
        }
        *(_QWORD *)v6 = v7;
        *((_QWORD *)a2 - 1) = v8;
        return result;
      }
      v118 = ***v117;
      v119 = *(_QWORD *)(v118 + 152);
      v120 = *(unsigned int *)(v118 + 168);
      if ((_DWORD)v120)
      {
        LODWORD(v121) = (v120 - 1) & ((v117 >> 4) ^ (v117 >> 9));
        v122 = (uint64_t ****)(v119 + 16 * v121);
        v123 = *v122;
        if (*v122 == v117)
        {
LABEL_124:
          v126 = v122[1];
          v129 = (size_t)*v126;
          v127 = (char *)(v126 + 2);
          v128 = v129;
          goto LABEL_125;
        }
        v124 = 1;
        while (v123 != (uint64_t ***)-4096)
        {
          v125 = v121 + v124++;
          v121 = v125 & (v120 - 1);
          v123 = *(uint64_t ****)(v119 + 16 * v121);
          if (v123 == v117)
          {
            v122 = (uint64_t ****)(v119 + 16 * v121);
            goto LABEL_124;
          }
        }
      }
      v122 = (uint64_t ****)(v119 + 16 * v120);
      goto LABEL_124;
    }
    v10 = ***v9;
    v11 = *(_QWORD *)(v10 + 152);
    v12 = *(unsigned int *)(v10 + 168);
    if ((_DWORD)v12)
    {
      LODWORD(v13) = (v12 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      v14 = (uint64_t ****)(v11 + 16 * v13);
      v15 = *v14;
      if (*v14 == v9)
      {
LABEL_115:
        v114 = v14[1];
        v116 = (size_t)*v114;
        result = (char *)(v114 + 2);
        v115 = v116;
        goto LABEL_116;
      }
      v16 = 1;
      while (v15 != (uint64_t ***)-4096)
      {
        v17 = v13 + v16++;
        v13 = v17 & (v12 - 1);
        v15 = *(uint64_t ****)(v11 + 16 * v13);
        if (v15 == v9)
        {
          v14 = (uint64_t ****)(v11 + 16 * v13);
          goto LABEL_115;
        }
      }
    }
    v14 = (uint64_t ****)(v11 + 16 * v12);
    goto LABEL_115;
  }
  if ((uint64_t)a3 > 128)
  {
    v79 = a4;
    v80 = a3 >> 1;
    v81 = &result[8 * (a3 >> 1)];
    v82 = a3 >> 1;
    if ((uint64_t)a3 > a5)
    {
      sub_1C564E46C(result, v81, v82, a4, a5);
      sub_1C564E46C(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v79, a5);
      return (char *)sub_1C564F23C((uint64_t)v6, &v6[8 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v79, a5);
    }
    sub_1C564EB74(result, v81, v82, a4);
    v83 = &v79[8 * v80];
    result = sub_1C564EB74(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v83);
    v84 = &v79[8 * a3];
    v85 = v83;
    while (1)
    {
      if (v85 == v84)
      {
        if (v79 != v83)
        {
          v131 = 0;
          do
          {
            *(_QWORD *)&v6[v131] = *(_QWORD *)&v79[v131];
            v131 += 8;
          }
          while (&v79[v131] != v83);
        }
        return result;
      }
      v86 = *(_QWORD *)v85;
      v87 = *(uint64_t ****)(*(_QWORD *)v85 + 40);
      if ((*((_BYTE *)v87 + 23) & 0x10) != 0)
      {
        v88 = ***v87;
        v89 = *(_QWORD *)(v88 + 152);
        v90 = *(unsigned int *)(v88 + 168);
        if ((_DWORD)v90)
        {
          LODWORD(v91) = (v90 - 1) & ((v87 >> 4) ^ (v87 >> 9));
          v92 = (uint64_t ****)(v89 + 16 * v91);
          v93 = *v92;
          if (*v92 != v87)
          {
            v94 = 1;
            do
            {
              if (v93 == (uint64_t ***)-4096)
                goto LABEL_90;
              v95 = v91 + v94++;
              v91 = v95 & (v90 - 1);
              v93 = *(uint64_t ****)(v89 + 16 * v91);
            }
            while (v93 != v87);
            v92 = (uint64_t ****)(v89 + 16 * v91);
          }
        }
        else
        {
LABEL_90:
          v92 = (uint64_t ****)(v89 + 16 * v90);
        }
        v96 = v92[1];
        v98 = (size_t)*v96;
        result = (char *)(v96 + 2);
        v97 = v98;
      }
      else
      {
        v97 = 0;
        result = &byte_1C871356D;
      }
      v99 = *(_QWORD *)v79;
      v100 = *(uint64_t ****)(*(_QWORD *)v79 + 40);
      if ((*((_BYTE *)v100 + 23) & 0x10) != 0)
      {
        v101 = ***v100;
        v102 = *(_QWORD *)(v101 + 152);
        v103 = *(unsigned int *)(v101 + 168);
        if ((_DWORD)v103)
        {
          LODWORD(v104) = (v103 - 1) & ((v100 >> 4) ^ (v100 >> 9));
          v105 = (uint64_t ****)(v102 + 16 * v104);
          v106 = *v105;
          if (*v105 != v100)
          {
            v107 = 1;
            do
            {
              if (v106 == (uint64_t ***)-4096)
                goto LABEL_99;
              v108 = v104 + v107++;
              v104 = v108 & (v103 - 1);
              v106 = *(uint64_t ****)(v102 + 16 * v104);
            }
            while (v106 != v100);
            v105 = (uint64_t ****)(v102 + 16 * v104);
          }
        }
        else
        {
LABEL_99:
          v105 = (uint64_t ****)(v102 + 16 * v103);
        }
        v109 = v105[1];
        v112 = (size_t)*v109;
        v110 = (char *)(v109 + 2);
        v111 = v112;
      }
      else
      {
        v111 = 0;
        v110 = &byte_1C871356D;
      }
      if (v111 >= v97)
        v113 = v97;
      else
        v113 = v111;
      if (v113 && (result = (char *)memcmp(result, v110, v113), (_DWORD)result))
      {
        if ((result & 0x80000000) != 0)
          goto LABEL_109;
      }
      else if (v97 < v111)
      {
LABEL_109:
        *(_QWORD *)v6 = v86;
        v85 += 8;
        goto LABEL_110;
      }
      *(_QWORD *)v6 = v99;
      v79 += 8;
LABEL_110:
      v6 += 8;
      if (v79 == v83)
      {
        if (v85 != v84)
        {
          v132 = 0;
          do
          {
            *(_QWORD *)&v6[v132] = *(_QWORD *)&v85[v132];
            v132 += 8;
          }
          while (&v85[v132] != v84);
        }
        return result;
      }
    }
  }
  if (result == a2)
    return result;
  v19 = result + 8;
  if (result + 8 == a2)
    return result;
  v20 = result;
  do
  {
    v21 = v20;
    v20 = v19;
    v22 = *((_QWORD *)v21 + 1);
    v23 = *(uint64_t ****)(v22 + 40);
    if ((*((_BYTE *)v23 + 23) & 0x10) != 0)
    {
      v24 = ***v23;
      v25 = *(_QWORD *)(v24 + 152);
      v26 = *(unsigned int *)(v24 + 168);
      if ((_DWORD)v26)
      {
        LODWORD(v27) = (v26 - 1) & ((v23 >> 4) ^ (v23 >> 9));
        v28 = (uint64_t ****)(v25 + 16 * v27);
        v29 = *v28;
        if (*v28 == v23)
        {
LABEL_23:
          v32 = v28[1];
          v34 = (size_t)*v32;
          result = (char *)(v32 + 2);
          v33 = v34;
          goto LABEL_24;
        }
        v30 = 1;
        while (v29 != (uint64_t ***)-4096)
        {
          v31 = v27 + v30++;
          v27 = v31 & (v26 - 1);
          v29 = *(uint64_t ****)(v25 + 16 * v27);
          if (v29 == v23)
          {
            v28 = (uint64_t ****)(v25 + 16 * v27);
            goto LABEL_23;
          }
        }
      }
      v28 = (uint64_t ****)(v25 + 16 * v26);
      goto LABEL_23;
    }
    v33 = 0;
    result = &byte_1C871356D;
LABEL_24:
    v35 = *(_QWORD *)v21;
    v36 = *(uint64_t ****)(*(_QWORD *)v21 + 40);
    if ((*((_BYTE *)v36 + 23) & 0x10) == 0)
    {
      v47 = 0;
      v46 = &byte_1C871356D;
      goto LABEL_33;
    }
    v37 = ***v36;
    v38 = *(_QWORD *)(v37 + 152);
    v39 = *(unsigned int *)(v37 + 168);
    if (!(_DWORD)v39)
      goto LABEL_31;
    LODWORD(v40) = (v39 - 1) & ((v36 >> 4) ^ (v36 >> 9));
    v41 = (uint64_t ****)(v38 + 16 * v40);
    v42 = *v41;
    if (*v41 != v36)
    {
      v43 = 1;
      while (v42 != (uint64_t ***)-4096)
      {
        v44 = v40 + v43++;
        v40 = v44 & (v39 - 1);
        v42 = *(uint64_t ****)(v38 + 16 * v40);
        if (v42 == v36)
        {
          v41 = (uint64_t ****)(v38 + 16 * v40);
          goto LABEL_32;
        }
      }
LABEL_31:
      v41 = (uint64_t ****)(v38 + 16 * v39);
    }
LABEL_32:
    v45 = v41[1];
    v48 = (size_t)*v45;
    v46 = (char *)(v45 + 2);
    v47 = v48;
LABEL_33:
    if (v47 >= v33)
      v49 = v33;
    else
      v49 = v47;
    if (v49 && (result = (char *)memcmp(result, v46, v49), (_DWORD)result))
    {
      if ((result & 0x80000000) == 0)
        goto LABEL_75;
    }
    else if (v33 >= v47)
    {
      goto LABEL_75;
    }
    v50 = v20;
    while (1)
    {
      *(_QWORD *)v50 = v35;
      if (v21 == v6)
        break;
      v50 = v21;
      v51 = *(uint64_t ****)(v22 + 40);
      if ((*((_BYTE *)v51 + 23) & 0x10) != 0)
      {
        v52 = ***v51;
        v53 = *(_QWORD *)(v52 + 152);
        v54 = *(unsigned int *)(v52 + 168);
        if (!(_DWORD)v54)
          goto LABEL_50;
        LODWORD(v55) = (v54 - 1) & ((v51 >> 4) ^ (v51 >> 9));
        v56 = (uint64_t ****)(v53 + 16 * v55);
        v57 = *v56;
        if (*v56 != v51)
        {
          v58 = 1;
          while (v57 != (uint64_t ***)-4096)
          {
            v59 = v55 + v58++;
            v55 = v59 & (v54 - 1);
            v57 = *(uint64_t ****)(v53 + 16 * v55);
            if (v57 == v51)
            {
              v56 = (uint64_t ****)(v53 + 16 * v55);
              goto LABEL_51;
            }
          }
LABEL_50:
          v56 = (uint64_t ****)(v53 + 16 * v54);
        }
LABEL_51:
        v60 = v56[1];
        v62 = (size_t)*v60;
        result = (char *)(v60 + 2);
        v61 = v62;
        goto LABEL_52;
      }
      v61 = 0;
      result = &byte_1C871356D;
LABEL_52:
      v21 -= 8;
      v35 = *((_QWORD *)v50 - 1);
      v63 = *(uint64_t ****)(v35 + 40);
      if ((*((_BYTE *)v63 + 23) & 0x10) == 0)
      {
        v74 = 0;
        v73 = &byte_1C871356D;
        goto LABEL_61;
      }
      v64 = ***v63;
      v65 = *(_QWORD *)(v64 + 152);
      v66 = *(unsigned int *)(v64 + 168);
      if (!(_DWORD)v66)
        goto LABEL_59;
      LODWORD(v67) = (v66 - 1) & ((v63 >> 4) ^ (v63 >> 9));
      v68 = (uint64_t ****)(v65 + 16 * v67);
      v69 = *v68;
      if (*v68 != v63)
      {
        v70 = 1;
        while (v69 != (uint64_t ***)-4096)
        {
          v71 = v67 + v70++;
          v67 = v71 & (v66 - 1);
          v69 = *(uint64_t ****)(v65 + 16 * v67);
          if (v69 == v63)
          {
            v68 = (uint64_t ****)(v65 + 16 * v67);
            goto LABEL_60;
          }
        }
LABEL_59:
        v68 = (uint64_t ****)(v65 + 16 * v66);
      }
LABEL_60:
      v72 = v68[1];
      v75 = (size_t)*v72;
      v73 = (char *)(v72 + 2);
      v74 = v75;
LABEL_61:
      if (v74 >= v61)
        v76 = v61;
      else
        v76 = v74;
      if (v76 && (result = (char *)memcmp(result, v73, v76), (_DWORD)result))
      {
        v77 = ((int)result >> 31) | 1;
      }
      else
      {
        if (v61 >= v74)
          goto LABEL_74;
        v77 = -1;
      }
      if (v77 != -1)
        goto LABEL_74;
    }
    v50 = v6;
LABEL_74:
    *(_QWORD *)v50 = v22;
LABEL_75:
    v19 = v20 + 8;
  }
  while (v20 + 8 != a2);
  return result;
}

char *sub_1C564EB74(char *result, char *a2, unint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  char *v6;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ***v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ****v16;
  uint64_t ***v17;
  int v18;
  int v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t ***v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ****v28;
  uint64_t ***v29;
  int v30;
  int v31;
  uint64_t ***v32;
  size_t v33;
  size_t v34;
  uint64_t v35;
  uint64_t ***v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t ****v41;
  uint64_t ***v42;
  int v43;
  int v44;
  uint64_t ***v45;
  char *v46;
  size_t v47;
  size_t v48;
  size_t v49;
  _QWORD *v50;
  uint64_t ***v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t ****v56;
  uint64_t ***v57;
  int v58;
  int v59;
  uint64_t ***v60;
  size_t v61;
  size_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t ***v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t ****v70;
  uint64_t ***v71;
  int v72;
  int v73;
  uint64_t ***v74;
  char *v75;
  size_t v76;
  size_t v77;
  size_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t ***v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t ****v88;
  uint64_t ***v89;
  int v90;
  int v91;
  uint64_t ***v92;
  size_t v93;
  size_t v94;
  uint64_t v95;
  uint64_t ***v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t ****v101;
  uint64_t ***v102;
  int v103;
  int v104;
  uint64_t ***v105;
  char *v106;
  size_t v107;
  size_t v108;
  size_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t ***v112;
  size_t v113;
  size_t v114;
  uint64_t ***v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t ****v120;
  uint64_t ***v121;
  int v122;
  int v123;
  uint64_t ***v124;
  char *v125;
  size_t v126;
  size_t v127;
  size_t v128;

  if (!a3)
    return result;
  v4 = a4;
  v6 = result;
  if (a3 == 1)
  {
LABEL_139:
    *v4 = *(_QWORD *)v6;
    return result;
  }
  if (a3 == 2)
  {
    v8 = a2 - 8;
    v9 = *((_QWORD *)a2 - 1);
    v10 = *(_QWORD *)result;
    v11 = *(uint64_t ****)(v9 + 40);
    if ((*((_BYTE *)v11 + 23) & 0x10) == 0)
    {
      v113 = 0;
      result = &byte_1C871356D;
LABEL_120:
      v115 = *(uint64_t ****)(v10 + 40);
      if ((*((_BYTE *)v115 + 23) & 0x10) == 0)
      {
        v126 = 0;
        v125 = &byte_1C871356D;
LABEL_129:
        if (v126 >= v113)
          v128 = v113;
        else
          v128 = v126;
        if (v128 && (result = (char *)memcmp(result, v125, v128), (_DWORD)result))
        {
          if ((result & 0x80000000) != 0)
            goto LABEL_138;
        }
        else if (v113 < v126)
        {
LABEL_138:
          *v4++ = v9;
          goto LABEL_139;
        }
        v9 = v10;
        v6 = v8;
        goto LABEL_138;
      }
      v116 = ***v115;
      v117 = *(_QWORD *)(v116 + 152);
      v118 = *(unsigned int *)(v116 + 168);
      if ((_DWORD)v118)
      {
        LODWORD(v119) = (v118 - 1) & ((v115 >> 4) ^ (v115 >> 9));
        v120 = (uint64_t ****)(v117 + 16 * v119);
        v121 = *v120;
        if (*v120 == v115)
        {
LABEL_128:
          v124 = v120[1];
          v127 = (size_t)*v124;
          v125 = (char *)(v124 + 2);
          v126 = v127;
          goto LABEL_129;
        }
        v122 = 1;
        while (v121 != (uint64_t ***)-4096)
        {
          v123 = v119 + v122++;
          v119 = v123 & (v118 - 1);
          v121 = *(uint64_t ****)(v117 + 16 * v119);
          if (v121 == v115)
          {
            v120 = (uint64_t ****)(v117 + 16 * v119);
            goto LABEL_128;
          }
        }
      }
      v120 = (uint64_t ****)(v117 + 16 * v118);
      goto LABEL_128;
    }
    v12 = ***v11;
    v13 = *(_QWORD *)(v12 + 152);
    v14 = *(unsigned int *)(v12 + 168);
    if ((_DWORD)v14)
    {
      LODWORD(v15) = (v14 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      v16 = (uint64_t ****)(v13 + 16 * v15);
      v17 = *v16;
      if (*v16 == v11)
      {
LABEL_119:
        v112 = v16[1];
        v114 = (size_t)*v112;
        result = (char *)(v112 + 2);
        v113 = v114;
        goto LABEL_120;
      }
      v18 = 1;
      while (v17 != (uint64_t ***)-4096)
      {
        v19 = v15 + v18++;
        v15 = v19 & (v14 - 1);
        v17 = *(uint64_t ****)(v13 + 16 * v15);
        if (v17 == v11)
        {
          v16 = (uint64_t ****)(v13 + 16 * v15);
          goto LABEL_119;
        }
      }
    }
    v16 = (uint64_t ****)(v13 + 16 * v14);
    goto LABEL_119;
  }
  if ((uint64_t)a3 <= 8)
  {
    if (result == a2)
      return result;
    v20 = result + 8;
    *a4 = *(_QWORD *)result;
    if (result + 8 == a2)
      return result;
    v21 = a4;
    while (1)
    {
      v22 = v21;
      v23 = *(uint64_t ****)(*(_QWORD *)v20 + 40);
      if ((*((_BYTE *)v23 + 23) & 0x10) != 0)
        break;
      v33 = 0;
      result = &byte_1C871356D;
LABEL_24:
      ++v21;
      v35 = *v22;
      v36 = *(uint64_t ****)(*v22 + 40);
      if ((*((_BYTE *)v36 + 23) & 0x10) != 0)
      {
        v37 = ***v36;
        v38 = *(_QWORD *)(v37 + 152);
        v39 = *(unsigned int *)(v37 + 168);
        if (!(_DWORD)v39)
          goto LABEL_31;
        LODWORD(v40) = (v39 - 1) & ((v36 >> 4) ^ (v36 >> 9));
        v41 = (uint64_t ****)(v38 + 16 * v40);
        v42 = *v41;
        if (*v41 != v36)
        {
          v43 = 1;
          while (v42 != (uint64_t ***)-4096)
          {
            v44 = v40 + v43++;
            v40 = v44 & (v39 - 1);
            v42 = *(uint64_t ****)(v38 + 16 * v40);
            if (v42 == v36)
            {
              v41 = (uint64_t ****)(v38 + 16 * v40);
              goto LABEL_32;
            }
          }
LABEL_31:
          v41 = (uint64_t ****)(v38 + 16 * v39);
        }
LABEL_32:
        v45 = v41[1];
        v48 = (size_t)*v45;
        v46 = (char *)(v45 + 2);
        v47 = v48;
        goto LABEL_33;
      }
      v47 = 0;
      v46 = &byte_1C871356D;
LABEL_33:
      if (v47 >= v33)
        v49 = v33;
      else
        v49 = v47;
      if (v49 && (result = (char *)memcmp(result, v46, v49), (_DWORD)result))
      {
        v50 = v22 + 1;
        if ((result & 0x80000000) == 0)
          goto LABEL_73;
      }
      else
      {
        v50 = v22 + 1;
        if (v33 >= v47)
          goto LABEL_73;
      }
      v22[1] = v35;
      v50 = v4;
      if (v22 != v4)
      {
        while (1)
        {
          v51 = *(uint64_t ****)(*(_QWORD *)v20 + 40);
          if ((*((_BYTE *)v51 + 23) & 0x10) != 0)
            break;
          v61 = 0;
          result = &byte_1C871356D;
LABEL_51:
          v63 = v22 - 1;
          v64 = *(v22 - 1);
          v65 = *(uint64_t ****)(v64 + 40);
          if ((*((_BYTE *)v65 + 23) & 0x10) != 0)
          {
            v66 = ***v65;
            v67 = *(_QWORD *)(v66 + 152);
            v68 = *(unsigned int *)(v66 + 168);
            if (!(_DWORD)v68)
              goto LABEL_58;
            LODWORD(v69) = (v68 - 1) & ((v65 >> 4) ^ (v65 >> 9));
            v70 = (uint64_t ****)(v67 + 16 * v69);
            v71 = *v70;
            if (*v70 != v65)
            {
              v72 = 1;
              while (v71 != (uint64_t ***)-4096)
              {
                v73 = v69 + v72++;
                v69 = v73 & (v68 - 1);
                v71 = *(uint64_t ****)(v67 + 16 * v69);
                if (v71 == v65)
                {
                  v70 = (uint64_t ****)(v67 + 16 * v69);
                  goto LABEL_59;
                }
              }
LABEL_58:
              v70 = (uint64_t ****)(v67 + 16 * v68);
            }
LABEL_59:
            v74 = v70[1];
            v77 = (size_t)*v74;
            v75 = (char *)(v74 + 2);
            v76 = v77;
            goto LABEL_60;
          }
          v76 = 0;
          v75 = &byte_1C871356D;
LABEL_60:
          if (v76 >= v61)
            v78 = v61;
          else
            v78 = v76;
          if (v78 && (result = (char *)memcmp(result, v75, v78), (_DWORD)result))
          {
            if ((result & 0x80000000) == 0)
              goto LABEL_72;
          }
          else if (v61 >= v76)
          {
LABEL_72:
            v50 = v22;
            goto LABEL_73;
          }
          *v22-- = v64;
          if (v63 == v4)
          {
            v50 = v4;
            goto LABEL_73;
          }
        }
        v52 = ***v51;
        v53 = *(_QWORD *)(v52 + 152);
        v54 = *(unsigned int *)(v52 + 168);
        if ((_DWORD)v54)
        {
          LODWORD(v55) = (v54 - 1) & ((v51 >> 4) ^ (v51 >> 9));
          v56 = (uint64_t ****)(v53 + 16 * v55);
          v57 = *v56;
          if (*v56 != v51)
          {
            v58 = 1;
            while (v57 != (uint64_t ***)-4096)
            {
              v59 = v55 + v58++;
              v55 = v59 & (v54 - 1);
              v57 = *(uint64_t ****)(v53 + 16 * v55);
              if (v57 == v51)
              {
                v56 = (uint64_t ****)(v53 + 16 * v55);
                goto LABEL_50;
              }
            }
            goto LABEL_49;
          }
        }
        else
        {
LABEL_49:
          v56 = (uint64_t ****)(v53 + 16 * v54);
        }
LABEL_50:
        v60 = v56[1];
        v62 = (size_t)*v60;
        result = (char *)(v60 + 2);
        v61 = v62;
        goto LABEL_51;
      }
LABEL_73:
      v79 = *(_QWORD *)v20;
      v20 += 8;
      *v50 = v79;
      if (v20 == a2)
        return result;
    }
    v24 = ***v23;
    v25 = *(_QWORD *)(v24 + 152);
    v26 = *(unsigned int *)(v24 + 168);
    if ((_DWORD)v26)
    {
      LODWORD(v27) = (v26 - 1) & ((v23 >> 4) ^ (v23 >> 9));
      v28 = (uint64_t ****)(v25 + 16 * v27);
      v29 = *v28;
      if (*v28 == v23)
      {
LABEL_23:
        v32 = v28[1];
        v34 = (size_t)*v32;
        result = (char *)(v32 + 2);
        v33 = v34;
        goto LABEL_24;
      }
      v30 = 1;
      while (v29 != (uint64_t ***)-4096)
      {
        v31 = v27 + v30++;
        v27 = v31 & (v26 - 1);
        v29 = *(uint64_t ****)(v25 + 16 * v27);
        if (v29 == v23)
        {
          v28 = (uint64_t ****)(v25 + 16 * v27);
          goto LABEL_23;
        }
      }
    }
    v28 = (uint64_t ****)(v25 + 16 * v26);
    goto LABEL_23;
  }
  v80 = &result[8 * (a3 >> 1)];
  sub_1C564E46C(result, v80, a3 >> 1, a4, a3 >> 1);
  result = (char *)sub_1C564E46C(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
  v81 = &v6[8 * (a3 >> 1)];
  while (v81 != a2)
  {
    v82 = *(_QWORD *)v81;
    v83 = *(uint64_t ****)(*(_QWORD *)v81 + 40);
    if ((*((_BYTE *)v83 + 23) & 0x10) != 0)
    {
      v84 = ***v83;
      v85 = *(_QWORD *)(v84 + 152);
      v86 = *(unsigned int *)(v84 + 168);
      if (!(_DWORD)v86)
        goto LABEL_86;
      LODWORD(v87) = (v86 - 1) & ((v83 >> 4) ^ (v83 >> 9));
      v88 = (uint64_t ****)(v85 + 16 * v87);
      v89 = *v88;
      if (*v88 != v83)
      {
        v90 = 1;
        while (v89 != (uint64_t ***)-4096)
        {
          v91 = v87 + v90++;
          v87 = v91 & (v86 - 1);
          v89 = *(uint64_t ****)(v85 + 16 * v87);
          if (v89 == v83)
          {
            v88 = (uint64_t ****)(v85 + 16 * v87);
            goto LABEL_87;
          }
        }
LABEL_86:
        v88 = (uint64_t ****)(v85 + 16 * v86);
      }
LABEL_87:
      v92 = v88[1];
      v94 = (size_t)*v92;
      result = (char *)(v92 + 2);
      v93 = v94;
      goto LABEL_88;
    }
    v93 = 0;
    result = &byte_1C871356D;
LABEL_88:
    v95 = *(_QWORD *)v6;
    v96 = *(uint64_t ****)(*(_QWORD *)v6 + 40);
    if ((*((_BYTE *)v96 + 23) & 0x10) != 0)
    {
      v97 = ***v96;
      v98 = *(_QWORD *)(v97 + 152);
      v99 = *(unsigned int *)(v97 + 168);
      if (!(_DWORD)v99)
        goto LABEL_95;
      LODWORD(v100) = (v99 - 1) & ((v96 >> 4) ^ (v96 >> 9));
      v101 = (uint64_t ****)(v98 + 16 * v100);
      v102 = *v101;
      if (*v101 != v96)
      {
        v103 = 1;
        while (v102 != (uint64_t ***)-4096)
        {
          v104 = v100 + v103++;
          v100 = v104 & (v99 - 1);
          v102 = *(uint64_t ****)(v98 + 16 * v100);
          if (v102 == v96)
          {
            v101 = (uint64_t ****)(v98 + 16 * v100);
            goto LABEL_96;
          }
        }
LABEL_95:
        v101 = (uint64_t ****)(v98 + 16 * v99);
      }
LABEL_96:
      v105 = v101[1];
      v108 = (size_t)*v105;
      v106 = (char *)(v105 + 2);
      v107 = v108;
      goto LABEL_97;
    }
    v107 = 0;
    v106 = &byte_1C871356D;
LABEL_97:
    if (v107 >= v93)
      v109 = v93;
    else
      v109 = v107;
    if (v109 && (result = (char *)memcmp(result, v106, v109), (_DWORD)result))
    {
      if ((result & 0x80000000) != 0)
        goto LABEL_105;
    }
    else if (v93 < v107)
    {
LABEL_105:
      *v4 = v82;
      v81 += 8;
      goto LABEL_106;
    }
    *v4 = v95;
    v6 += 8;
LABEL_106:
    ++v4;
    if (v6 == v80)
    {
      if (v81 != a2)
      {
        v111 = 0;
        do
        {
          v4[v111] = *(_QWORD *)&v81[v111 * 8];
          ++v111;
        }
        while (&v81[v111 * 8] != a2);
      }
      return result;
    }
  }
  if (v6 != v80)
  {
    v110 = 0;
    do
    {
      v4[v110] = *(_QWORD *)&v6[v110 * 8];
      ++v110;
    }
    while (&v6[v110 * 8] != v80);
  }
  return result;
}

uint64_t sub_1C564F23C(uint64_t result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  char *v9;
  uint64_t v10;
  uint64_t ***v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ****v17;
  uint64_t ***v18;
  int v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t ***v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t ****v30;
  uint64_t ***v31;
  int v32;
  int v33;
  uint64_t ***v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  size_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t ***v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t ****v48;
  uint64_t ***v49;
  int v50;
  int v51;
  uint64_t ***v52;
  char *v53;
  size_t v54;
  size_t v55;
  char *v56;
  uint64_t ***v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t ****v62;
  uint64_t ***v63;
  int v64;
  int v65;
  uint64_t ***v66;
  char *v67;
  size_t v68;
  size_t v69;
  size_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t ***v74;
  unint64_t v75;
  char *v76;
  uint64_t ***v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t ****v82;
  uint64_t ***v83;
  int v84;
  int v85;
  uint64_t ***v86;
  char *v87;
  size_t v88;
  size_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t ****v94;
  uint64_t ***v95;
  int v96;
  int v97;
  uint64_t ***v98;
  char *v99;
  size_t v100;
  size_t v101;
  size_t v102;
  int v103;
  int v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  int64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t ***v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t ****v123;
  uint64_t ***v124;
  int v125;
  int v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t ***v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t ****v137;
  uint64_t ***v138;
  int v139;
  int v140;
  uint64_t ***v141;
  char *v142;
  unint64_t v143;
  unint64_t v144;
  size_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t ***v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t ****v154;
  uint64_t ***v155;
  int v156;
  int v157;
  size_t *v158;
  size_t v159;
  size_t v160;
  uint64_t v161;
  uint64_t ***v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t ****v167;
  uint64_t ***v168;
  int v169;
  int v170;
  uint64_t ***v171;
  char *v172;
  size_t v173;
  size_t v174;
  size_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v180;
  int v182;
  int v183;
  uint64_t v184;
  unint64_t v185;

  v180 = a5;
  if (!a5)
    return result;
  v9 = (char *)result;
  do
  {
    if (a4 <= a7 || v180 <= a7)
    {
      if (a4 > v180)
      {
        if (a2 == a3)
          return result;
        v115 = 0;
        do
        {
          *(_QWORD *)&a6[v115] = *(_QWORD *)&a2[v115];
          v115 += 8;
        }
        while (&a2[v115] != a3);
        if (!v115)
          return result;
        v116 = &a6[v115];
        while (1)
        {
          if (a2 == v9)
          {
            if (v116 != a6)
            {
              v176 = 0;
              do
              {
                *(_QWORD *)&a3[v176 - 8] = *(_QWORD *)&v116[v176 - 8];
                v176 -= 8;
              }
              while (&v116[v176] != a6);
            }
            return result;
          }
          v117 = *((_QWORD *)v116 - 1);
          v118 = *(uint64_t ****)(v117 + 40);
          if ((*((_BYTE *)v118 + 23) & 0x10) != 0)
          {
            v119 = ***v118;
            v120 = *(_QWORD *)(v119 + 152);
            v121 = *(unsigned int *)(v119 + 168);
            if ((_DWORD)v121)
            {
              LODWORD(v122) = (v121 - 1) & ((v118 >> 4) ^ (v118 >> 9));
              v123 = (uint64_t ****)(v120 + 16 * v122);
              v124 = *v123;
              if (*v123 != v118)
              {
                v125 = 1;
                do
                {
                  if (v124 == (uint64_t ***)-4096)
                    goto LABEL_156;
                  v126 = v122 + v125++;
                  v122 = v126 & (v121 - 1);
                  v124 = *(uint64_t ****)(v120 + 16 * v122);
                }
                while (v124 != v118);
                v123 = (uint64_t ****)(v120 + 16 * v122);
              }
            }
            else
            {
LABEL_156:
              v123 = (uint64_t ****)(v120 + 16 * v121);
            }
            v127 = (unint64_t *)v123[1];
            v129 = *v127;
            result = (uint64_t)(v127 + 2);
            v128 = v129;
          }
          else
          {
            v128 = 0;
            result = (uint64_t)&byte_1C871356D;
          }
          v130 = a2 - 8;
          v131 = *((_QWORD *)a2 - 1);
          v132 = *(uint64_t ****)(v131 + 40);
          if ((*((_BYTE *)v132 + 23) & 0x10) != 0)
          {
            v133 = ***v132;
            v134 = *(_QWORD *)(v133 + 152);
            v135 = *(unsigned int *)(v133 + 168);
            if ((_DWORD)v135)
            {
              LODWORD(v136) = (v135 - 1) & ((v132 >> 4) ^ (v132 >> 9));
              v137 = (uint64_t ****)(v134 + 16 * v136);
              v138 = *v137;
              if (*v137 != v132)
              {
                v139 = 1;
                do
                {
                  if (v138 == (uint64_t ***)-4096)
                    goto LABEL_165;
                  v140 = v136 + v139++;
                  v136 = v140 & (v135 - 1);
                  v138 = *(uint64_t ****)(v134 + 16 * v136);
                }
                while (v138 != v132);
                v137 = (uint64_t ****)(v134 + 16 * v136);
              }
            }
            else
            {
LABEL_165:
              v137 = (uint64_t ****)(v134 + 16 * v135);
            }
            v141 = v137[1];
            v144 = (unint64_t)*v141;
            v142 = (char *)(v141 + 2);
            v143 = v144;
          }
          else
          {
            v143 = 0;
            v142 = &byte_1C871356D;
          }
          v145 = v143 >= v128 ? v128 : v143;
          if (v145)
          {
            result = memcmp((const void *)result, v142, v145);
            if ((_DWORD)result)
              break;
          }
          if (v128 >= v143)
            goto LABEL_175;
LABEL_176:
          *((_QWORD *)a3 - 1) = v131;
          a3 -= 8;
          a2 = v130;
          if (v116 == a6)
            return result;
        }
        if ((result & 0x80000000) != 0)
          goto LABEL_176;
LABEL_175:
        v131 = v117;
        v130 = a2;
        v116 -= 8;
        goto LABEL_176;
      }
      if (v9 == a2)
        return result;
      v146 = 0;
      do
      {
        *(_QWORD *)&a6[v146] = *(_QWORD *)&v9[v146];
        v146 += 8;
      }
      while (&v9[v146] != a2);
      if (!v146)
        return result;
      v147 = a6;
      while (1)
      {
        if (a2 == a3)
          return (uint64_t)memmove(v9, v147, a6 - v147 + v146);
        v148 = *(_QWORD *)a2;
        v149 = *(uint64_t ****)(*(_QWORD *)a2 + 40);
        if ((*((_BYTE *)v149 + 23) & 0x10) != 0)
        {
          v150 = ***v149;
          v151 = *(_QWORD *)(v150 + 152);
          v152 = *(unsigned int *)(v150 + 168);
          if ((_DWORD)v152)
          {
            LODWORD(v153) = (v152 - 1) & ((v149 >> 4) ^ (v149 >> 9));
            v154 = (uint64_t ****)(v151 + 16 * v153);
            v155 = *v154;
            if (*v154 != v149)
            {
              v156 = 1;
              do
              {
                if (v155 == (uint64_t ***)-4096)
                  goto LABEL_193;
                v157 = v153 + v156++;
                v153 = v157 & (v152 - 1);
                v155 = *(uint64_t ****)(v151 + 16 * v153);
              }
              while (v155 != v149);
              v154 = (uint64_t ****)(v151 + 16 * v153);
            }
          }
          else
          {
LABEL_193:
            v154 = (uint64_t ****)(v151 + 16 * v152);
          }
          v158 = (size_t *)v154[1];
          v160 = *v158;
          result = (uint64_t)(v158 + 2);
          v159 = v160;
        }
        else
        {
          v159 = 0;
          result = (uint64_t)&byte_1C871356D;
        }
        v161 = *(_QWORD *)v147;
        v162 = *(uint64_t ****)(*(_QWORD *)v147 + 40);
        if ((*((_BYTE *)v162 + 23) & 0x10) != 0)
        {
          v163 = ***v162;
          v164 = *(_QWORD *)(v163 + 152);
          v165 = *(unsigned int *)(v163 + 168);
          if ((_DWORD)v165)
          {
            LODWORD(v166) = (v165 - 1) & ((v162 >> 4) ^ (v162 >> 9));
            v167 = (uint64_t ****)(v164 + 16 * v166);
            v168 = *v167;
            if (*v167 != v162)
            {
              v169 = 1;
              do
              {
                if (v168 == (uint64_t ***)-4096)
                  goto LABEL_202;
                v170 = v166 + v169++;
                v166 = v170 & (v165 - 1);
                v168 = *(uint64_t ****)(v164 + 16 * v166);
              }
              while (v168 != v162);
              v167 = (uint64_t ****)(v164 + 16 * v166);
            }
          }
          else
          {
LABEL_202:
            v167 = (uint64_t ****)(v164 + 16 * v165);
          }
          v171 = v167[1];
          v174 = (size_t)*v171;
          v172 = (char *)(v171 + 2);
          v173 = v174;
        }
        else
        {
          v173 = 0;
          v172 = &byte_1C871356D;
        }
        if (v173 >= v159)
          v175 = v159;
        else
          v175 = v173;
        if (v175 && (result = memcmp((const void *)result, v172, v175), (_DWORD)result))
        {
          if ((result & 0x80000000) != 0)
            goto LABEL_212;
        }
        else if (v159 < v173)
        {
LABEL_212:
          *(_QWORD *)v9 = v148;
          a2 += 8;
          goto LABEL_213;
        }
        *(_QWORD *)v9 = v161;
        v147 += 8;
LABEL_213:
        v9 += 8;
        if (&a6[v146] == v147)
          return result;
      }
    }
    if (!a4)
      return result;
    v10 = *(_QWORD *)a2;
    v11 = *(uint64_t ****)(*(_QWORD *)a2 + 40);
    v12 = *((_DWORD *)v11 + 5);
    while (1)
    {
      if ((v12 & 0x10000000) != 0)
      {
        v13 = ***v11;
        v14 = *(_QWORD *)(v13 + 152);
        v15 = *(unsigned int *)(v13 + 168);
        if ((_DWORD)v15)
        {
          LODWORD(v16) = (v15 - 1) & ((v11 >> 4) ^ (v11 >> 9));
          v17 = (uint64_t ****)(v14 + 16 * v16);
          v18 = *v17;
          if (*v17 == v11)
          {
LABEL_15:
            v21 = (unint64_t *)v17[1];
            v23 = *v21;
            result = (uint64_t)(v21 + 2);
            v22 = v23;
            goto LABEL_16;
          }
          v19 = 1;
          while (v18 != (uint64_t ***)-4096)
          {
            v20 = v16 + v19++;
            v16 = v20 & (v15 - 1);
            v18 = *(uint64_t ****)(v14 + 16 * v16);
            if (v18 == v11)
            {
              v17 = (uint64_t ****)(v14 + 16 * v16);
              goto LABEL_15;
            }
          }
        }
        v17 = (uint64_t ****)(v14 + 16 * v15);
        goto LABEL_15;
      }
      v22 = 0;
      result = (uint64_t)&byte_1C871356D;
LABEL_16:
      v24 = *(_QWORD *)v9;
      v25 = *(uint64_t ****)(*(_QWORD *)v9 + 40);
      if ((*((_BYTE *)v25 + 23) & 0x10) != 0)
      {
        v26 = ***v25;
        v27 = *(_QWORD *)(v26 + 152);
        v28 = *(unsigned int *)(v26 + 168);
        if ((_DWORD)v28)
        {
          LODWORD(v29) = (v28 - 1) & ((v25 >> 4) ^ (v25 >> 9));
          v30 = (uint64_t ****)(v27 + 16 * v29);
          v31 = *v30;
          if (*v30 == v25)
          {
LABEL_24:
            v34 = v30[1];
            v37 = (unint64_t)*v34;
            v35 = (char *)(v34 + 2);
            v36 = v37;
            goto LABEL_25;
          }
          v32 = 1;
          while (v31 != (uint64_t ***)-4096)
          {
            v33 = v29 + v32++;
            v29 = v33 & (v28 - 1);
            v31 = *(uint64_t ****)(v27 + 16 * v29);
            if (v31 == v25)
            {
              v30 = (uint64_t ****)(v27 + 16 * v29);
              goto LABEL_24;
            }
          }
        }
        v30 = (uint64_t ****)(v27 + 16 * v28);
        goto LABEL_24;
      }
      v36 = 0;
      v35 = &byte_1C871356D;
LABEL_25:
      v38 = v36 >= v22 ? v22 : v36;
      if (!v38)
        break;
      result = memcmp((const void *)result, v35, v38);
      if (!(_DWORD)result)
        break;
      if ((result & 0x80000000) != 0)
        goto LABEL_37;
LABEL_33:
      v9 += 8;
      if (!--a4)
        return result;
    }
    if (v22 >= v36)
      goto LABEL_33;
LABEL_37:
    v177 = a6;
    if (a4 >= v180)
    {
      if (a4 == 1)
      {
        *(_QWORD *)v9 = v10;
        *(_QWORD *)a2 = v24;
        return result;
      }
      if (a4 >= 0)
        v73 = a4;
      else
        v73 = a4 + 1;
      v42 = v73 >> 1;
      v40 = &v9[8 * (v73 >> 1)];
      v41 = a3;
      v105 = a2;
      v107 = (a3 - a2) >> 3;
      if (a3 != a2)
      {
        v41 = a2;
        v74 = *(uint64_t ****)(*(_QWORD *)v40 + 40);
        v183 = *((_DWORD *)v74 + 5);
        do
        {
          v185 = v107;
          v75 = v107 >> 1;
          v76 = &v41[8 * (v107 >> 1)];
          v77 = *(uint64_t ****)(*(_QWORD *)v76 + 40);
          if ((*((_BYTE *)v77 + 23) & 0x10) != 0)
          {
            v78 = ***v77;
            v79 = *(_QWORD *)(v78 + 152);
            v80 = *(unsigned int *)(v78 + 168);
            if ((_DWORD)v80)
            {
              LODWORD(v81) = (v80 - 1) & ((v77 >> 4) ^ (v77 >> 9));
              v82 = (uint64_t ****)(v79 + 16 * v81);
              v83 = *v82;
              if (*v82 != v77)
              {
                v84 = 1;
                do
                {
                  if (v83 == (uint64_t ***)-4096)
                    goto LABEL_92;
                  v85 = v81 + v84++;
                  v81 = v85 & (v80 - 1);
                  v83 = *(uint64_t ****)(v79 + 16 * v81);
                }
                while (v83 != v77);
                v82 = (uint64_t ****)(v79 + 16 * v81);
              }
            }
            else
            {
LABEL_92:
              v82 = (uint64_t ****)(v79 + 16 * v80);
            }
            v86 = v82[1];
            v89 = (size_t)*v86;
            v87 = (char *)(v86 + 2);
            v88 = v89;
          }
          else
          {
            v88 = 0;
            v87 = &byte_1C871356D;
          }
          if ((v183 & 0x10000000) != 0)
          {
            v90 = ***v74;
            v91 = *(_QWORD *)(v90 + 152);
            v92 = *(unsigned int *)(v90 + 168);
            if ((_DWORD)v92)
            {
              LODWORD(v93) = (v92 - 1) & ((v74 >> 4) ^ (v74 >> 9));
              v94 = (uint64_t ****)(v91 + 16 * v93);
              v95 = *v94;
              if (*v94 != v74)
              {
                v96 = 1;
                do
                {
                  if (v95 == (uint64_t ***)-4096)
                    goto LABEL_101;
                  v97 = v93 + v96++;
                  v93 = v97 & (v92 - 1);
                  v95 = *(uint64_t ****)(v91 + 16 * v93);
                }
                while (v95 != v74);
                v94 = (uint64_t ****)(v91 + 16 * v93);
              }
            }
            else
            {
LABEL_101:
              v94 = (uint64_t ****)(v91 + 16 * v92);
            }
            v98 = v94[1];
            v101 = (size_t)*v98;
            v99 = (char *)(v98 + 2);
            v100 = v101;
          }
          else
          {
            v100 = 0;
            v99 = &byte_1C871356D;
          }
          if (v100 >= v88)
            v102 = v88;
          else
            v102 = v100;
          if (v102 && (v103 = memcmp(v87, v99, v102)) != 0)
          {
            v104 = (v103 >> 31) | 1;
          }
          else
          {
            if (v88 < v100)
              v104 = -1;
            else
              v104 = 1;
            if (v88 == v100)
              v104 = 0;
          }
          if (v104 == -1)
            v107 = v185 + ~v75;
          else
            v107 = v75;
          if (v104 == -1)
            v41 = v76 + 8;
        }
        while (v107);
        v105 = a2;
        v107 = (v41 - a2) >> 3;
      }
      v106 = v180;
      goto LABEL_124;
    }
    if (v180 >= 0)
      v39 = v180;
    else
      v39 = v180 + 1;
    v40 = a2;
    v184 = v39 >> 1;
    v41 = &a2[8 * (v39 >> 1)];
    v42 = (a2 - v9) >> 3;
    if (a2 == v9)
    {
      v106 = v180;
      v9 = a2;
      v109 = &a2[8 * (v39 >> 1)];
      v107 = v39 >> 1;
      goto LABEL_137;
    }
    v43 = *(uint64_t ****)(*(_QWORD *)v41 + 40);
    v182 = *((_DWORD *)v43 + 5);
    v40 = v9;
    while (2)
    {
      if ((v182 & 0x10000000) != 0)
      {
        v44 = ***v43;
        v45 = *(_QWORD *)(v44 + 152);
        v46 = *(unsigned int *)(v44 + 168);
        if (!(_DWORD)v46)
          goto LABEL_50;
        LODWORD(v47) = (v46 - 1) & ((v43 >> 4) ^ (v43 >> 9));
        v48 = (uint64_t ****)(v45 + 16 * v47);
        v49 = *v48;
        if (*v48 != v43)
        {
          v50 = 1;
          while (v49 != (uint64_t ***)-4096)
          {
            v51 = v47 + v50++;
            v47 = v51 & (v46 - 1);
            v49 = *(uint64_t ****)(v45 + 16 * v47);
            if (v49 == v43)
            {
              v48 = (uint64_t ****)(v45 + 16 * v47);
              goto LABEL_51;
            }
          }
LABEL_50:
          v48 = (uint64_t ****)(v45 + 16 * v46);
        }
LABEL_51:
        v52 = v48[1];
        v55 = (size_t)*v52;
        v53 = (char *)(v52 + 2);
        v54 = v55;
      }
      else
      {
        v54 = 0;
        v53 = &byte_1C871356D;
      }
      v56 = &v40[8 * (v42 >> 1)];
      v57 = *(uint64_t ****)(*(_QWORD *)v56 + 40);
      if ((*((_BYTE *)v57 + 23) & 0x10) != 0)
      {
        v58 = ***v57;
        v59 = *(_QWORD *)(v58 + 152);
        v60 = *(unsigned int *)(v58 + 168);
        if (!(_DWORD)v60)
          goto LABEL_59;
        LODWORD(v61) = (v60 - 1) & ((v57 >> 4) ^ (v57 >> 9));
        v62 = (uint64_t ****)(v59 + 16 * v61);
        v63 = *v62;
        if (*v62 != v57)
        {
          v64 = 1;
          while (v63 != (uint64_t ***)-4096)
          {
            v65 = v61 + v64++;
            v61 = v65 & (v60 - 1);
            v63 = *(uint64_t ****)(v59 + 16 * v61);
            if (v63 == v57)
            {
              v62 = (uint64_t ****)(v59 + 16 * v61);
              goto LABEL_60;
            }
          }
LABEL_59:
          v62 = (uint64_t ****)(v59 + 16 * v60);
        }
LABEL_60:
        v66 = v62[1];
        v69 = (size_t)*v66;
        v67 = (char *)(v66 + 2);
        v68 = v69;
      }
      else
      {
        v68 = 0;
        v67 = &byte_1C871356D;
      }
      if (v68 >= v54)
        v70 = v54;
      else
        v70 = v68;
      if (v70 && (v71 = memcmp(v53, v67, v70)) != 0)
      {
        v72 = (v71 >> 31) | 1;
      }
      else
      {
        if (v54 < v68)
          v72 = -1;
        else
          v72 = 1;
        if (v54 == v68)
          v72 = 0;
      }
      if (v72 == -1)
      {
        v42 >>= 1;
      }
      else
      {
        v40 = v56 + 8;
        v42 += ~(v42 >> 1);
      }
      if (v42)
        continue;
      break;
    }
    v42 = (v40 - v9) >> 3;
    v106 = v180;
    v105 = a2;
    v107 = v184;
LABEL_124:
    if (v40 == v105)
    {
      v40 = v105;
      v109 = v41;
    }
    else if (v105 == v41)
    {
      v41 = v105;
      v109 = v40;
    }
    else
    {
      v108 = v107;
      if (v40 + 8 == v105)
      {
        v110 = *(_QWORD *)v40;
        v111 = v41 - v105;
        memmove(v40, v105, v41 - v105);
        v109 = &v40[v111];
        v106 = v180;
        *(_QWORD *)v109 = v110;
      }
      else if (v105 + 8 == v41)
      {
        v112 = *((_QWORD *)v41 - 1);
        v109 = v40 + 8;
        if (v41 - 8 != v40)
          memmove(v40 + 8, v40, v41 - 8 - v40);
        *(_QWORD *)v40 = v112;
        v106 = v180;
      }
      else
      {
        v109 = (char *)sub_1C4E85DF0(v40, v105, v41);
      }
      v107 = v108;
    }
LABEL_137:
    a4 -= v42;
    v113 = v106 - v107;
    if ((uint64_t)(v107 + v42) >= (uint64_t)(v113 + a4))
    {
      result = sub_1C564F23C(v109, v41, a3, a4, v113, v177, a7);
      v41 = v40;
      a4 = v42;
      a6 = v177;
      v113 = v107;
      a3 = v109;
    }
    else
    {
      v114 = v42;
      a6 = v177;
      result = sub_1C564F23C(v9, v40, v109, v114, v107, v177, a7);
      v9 = v109;
    }
    v180 = v113;
    a2 = v41;
  }
  while (v113);
  return result;
}

uint64_t sub_1C564FCF4(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v7 = a2;
  v8 = 0;
  v3 = sub_1C564FD70(a1, &v7, &v8);
  v4 = a1 + 8;
  if (v3)
    return v8;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v6 = 8;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v6 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v6;
}

uint64_t sub_1C564FD70(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_15;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_15;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_15:
  *a3 = v7;
  return result;
}

uint64_t sub_1C564FE20(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v7 = a2;
  v8 = 0;
  v3 = sub_1C564FE9C(a1, &v7, &v8);
  v4 = a1 + 8;
  if (v3)
    return v8;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v5 = 4;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v5;
}

uint64_t sub_1C564FE9C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_16;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C564FF4C(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C564FFA8((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C5650050(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_1C564FFA8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_13:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_13;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C5650050(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1C5650110((uint64_t)a1, v7);
  v9 = 0;
  sub_1C564FFA8((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C5650110(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5650288(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C5650288(a1, v14, v9);
}

uint64_t sub_1C5650288(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C564FFA8((uint64_t)v5, a2, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1C565034C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;

  v19 = 0;
  result = sub_1C4E45B90(a2, *a3, &v19);
  v9 = v19;
  v10 = *(_DWORD *)a2;
  if ((_DWORD)result)
  {
    if ((v10 & 1) != 0)
    {
      v17 = a2 + 8;
      v18 = 4;
    }
    else
    {
      v17 = *(_QWORD *)(a2 + 8);
      v18 = *(unsigned int *)(a2 + 16);
    }
    v16 = 0;
    v15 = v17 + 16 * v18;
    goto LABEL_11;
  }
  v11 = v10 >> 1;
  if ((v10 & 1) != 0)
    v12 = 4;
  else
    v12 = *(_DWORD *)(a2 + 16);
  if (4 * v11 + 4 >= 3 * v12)
  {
    v12 *= 2;
    goto LABEL_15;
  }
  if (v12 + ~v11 - *(_DWORD *)(a2 + 4) <= v12 >> 3)
  {
LABEL_15:
    sub_1C5650494(a2, v12);
    v19 = 0;
    result = sub_1C4E45B90(a2, *a3, &v19);
    v9 = v19;
  }
  *(_DWORD *)a2 += 2;
  if (*v9 != -4096)
    --*(_DWORD *)(a2 + 4);
  *v9 = *a3;
  v9[1] = *a4;
  v13 = a2 + 8;
  if ((*(_BYTE *)a2 & 1) != 0)
  {
    v14 = 4;
  }
  else
  {
    v13 = *(_QWORD *)(a2 + 8);
    v14 = *(unsigned int *)(a2 + 16);
  }
  v15 = v13 + 16 * v14;
  v16 = 1;
LABEL_11:
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v15;
  *(_BYTE *)(a1 + 16) = v16;
  return result;
}

uint64_t sub_1C5650494(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C565060C(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C565060C(a1, v14, v9);
}

uint64_t sub_1C565060C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C4E45B90((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1C56506CC(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 32;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_13:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_13;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C5650774(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _QWORD *v20;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 32;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1C56508E8(a1, 2 * v8);
    v11 = a1 + 8;
    v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v12 = 32;
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      v11 = *(_QWORD *)(a1 + 8);
    }
    v9 = *(_DWORD *)a1 & 1;
    v13 = v12 - 1;
    v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (_QWORD *)(v11 + 16 * v14);
    v15 = *a4;
    if (*a3 != *a4)
    {
      v16 = 0;
      v17 = 1;
      while (v15 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v15 == -8192;
        if (v18)
          v16 = a4;
        v19 = v14 + v17++;
        v14 = v19 & v13;
        a4 = (_QWORD *)(v11 + 16 * v14);
        v15 = *a4;
        if (*a3 == *a4)
          goto LABEL_7;
      }
      if (v16)
        a4 = v16;
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1C56508E8(a1, v8);
      v20 = 0;
      sub_1C56506CC(a1, a3, &v20);
      a4 = v20;
      v6 = *(_DWORD *)a1;
    }
    v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

int *sub_1C56508E8(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[65];

  v14[64] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x21)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x20)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5650A6C((int *)a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 512);
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C5650A6C((int *)a1, v14, v9);
}

int *sub_1C5650A6C(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 130;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = (_QWORD *)*((_QWORD *)result + 1);
    v6 = &v5[2 * v4];
  }
  do
  {
    *v5 = -4096;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v9 = 32;
        v8 = result + 2;
      }
      else
      {
        v8 = (int *)*((_QWORD *)result + 1);
        v9 = result[4];
      }
      v10 = v9 - 1;
      v11 = (v9 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v12 = (uint64_t *)&v8[4 * v11];
      v13 = *v12;
      if (v7 != *v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = (uint64_t *)&v8[4 * (v17 & v10)];
          v13 = *v12;
          if (v7 == *v12)
            goto LABEL_21;
        }
        if (v14)
          v12 = v14;
      }
LABEL_21:
      *v12 = v7;
      *((_DWORD *)v12 + 2) = *((_DWORD *)a2 + 2);
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

void sub_1C5650B74(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  unsigned int v5;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  const llvm::APInt *v14;
  int v15;
  uint64_t i;
  uint64_t v17;
  llvm::ConstantInt *v18;
  unint64_t v19;
  unint64_t v20;
  llvm::ValueHandleBase *v21;
  uint64_t *v22;
  unint64_t v23;
  unsigned int v24;
  __int16 v25;

  v5 = a5;
  v10 = *a1;
  if (*a1)
    v11 = (*(_DWORD *)(*a1 + 8) & 0xFE) == 18;
  else
    v11 = 0;
  if (v11)
  {
    v12 = *(unsigned int *)(v10 + 32);
    v13 = sub_1C5648740(*(_QWORD *)(v10 + 24), a4);
    if ((_DWORD)v12)
    {
      v15 = v13;
      for (i = 0; i != v12; ++i)
      {
        v17 = **(_QWORD **)(a3 + 64);
        v18 = *(llvm::ConstantInt **)(v17 + 1960);
        v19 = *(unsigned int *)(v17 + 1968);
        v24 = v19 >> 8;
        if (v19 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v23, i, 0);
        }
        else
        {
          if (v19 <= 0xFF)
            v20 = 0;
          else
            v20 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v19);
          v23 = v20 & i;
        }
        v21 = llvm::ConstantInt::get(v18, (llvm::LLVMContext *)&v23, v14);
        if (v24 >= 0x41 && v23)
          MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
        v25 = 257;
        v22 = (uint64_t *)sub_1C4772EE0((uint64_t *)a3, (uint64_t)a1, (uint64_t)v21, (uint64_t)&v23);
        if ((*(_DWORD *)(*v22 + 8) & 0xFE) == 0x12)
          sub_1C5650B74();
        else
          sub_1C5650D20(v22, a2, (const llvm::APInt *)a3, a4, v5);
        v5 += v15;
      }
    }
  }
  else
  {
    sub_1C5650D20(a1, a2, (const llvm::APInt *)a3, a4, a5);
  }
}

void sub_1C5650D20(uint64_t *a1, uint64_t *a2, const llvm::APInt *a3, uint64_t a4, unsigned int a5)
{
  uint64_t v10;
  llvm::GetElementPtrInst *v11;
  llvm::ConstantInt *v12;
  llvm::ValueHandleBase *v13;
  const llvm::APInt *v14;
  uint64_t v15;
  llvm::ConstantInt *v16;
  unsigned int v17;
  unint64_t v18;
  llvm::ValueHandleBase *v19;
  unsigned __int8 *v20;
  const char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  char v27;
  char v28;
  char *v29;
  char *v30;
  unsigned __int8 **v31;
  llvm::Value *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 ***v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 **v41;
  int v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  llvm::ConstantInt *v47;
  llvm::ValueHandleBase *v48;
  const char *v49;
  unsigned int v50;
  __int16 v51;
  _QWORD v52[3];

  v52[2] = *MEMORY[0x1E0C80C00];
  v10 = **((_QWORD **)a3 + 8);
  v11 = (llvm::GetElementPtrInst *)a2[3];
  v12 = *(llvm::ConstantInt **)(v10 + 1984);
  v50 = *(_DWORD *)(v10 + 1992) >> 8;
  if (v50 > 0x40)
  {
    v47 = v12;
    llvm::APInt::initSlowCase((llvm::APInt *)&v49, 0, 0);
    v12 = v47;
  }
  else
  {
    v49 = 0;
  }
  v13 = llvm::ConstantInt::get(v12, (llvm::LLVMContext *)&v49, a3);
  if (v50 >= 0x41 && v49)
  {
    v48 = v13;
    MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
    v13 = v48;
  }
  v52[0] = v13;
  v15 = a5;
  v16 = *(llvm::ConstantInt **)(v10 + 1984);
  v17 = *(_DWORD *)(v10 + 1992);
  v50 = v17 >> 8;
  if (v17 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v49, v15, 0);
  }
  else
  {
    if (v17 <= 0xFF)
      v18 = 0;
    else
      v18 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v17);
    v49 = (const char *)(v18 & v15);
  }
  v19 = llvm::ConstantInt::get(v16, (llvm::LLVMContext *)&v49, v14);
  if (v50 >= 0x41 && v49)
    MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
  v52[1] = v19;
  v49 = "new_gep";
  v51 = 259;
  v20 = (unsigned __int8 *)sub_1C509D7B0((uint64_t *)a3, v11, a2, (llvm::Value *)v52, 2, (uint64_t)&v49);
  sub_1C4768AD0(a4, *a1);
  v23 = (v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((_DWORD)v21 == 1)
  if (v23 <= 8)
  {
    v24 = **((_QWORD **)a3 + 8) + 1936;
    v51 = 257;
    a1 = (uint64_t *)sub_1C4773E38((uint64_t *)a3, 39, (unsigned __int8 *)a1, v24, (uint64_t)&v49);
  }
  v25 = llvm::PointerType::get((llvm::PointerType *)*a1, (llvm::Type *)0x40);
  v51 = 257;
  v26 = sub_1C4773E38((uint64_t *)a3, 49, v20, v25, (uint64_t)&v49);
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 6) + 56) + 40) + 272, *a1);
  v28 = v27;
  v29 = (char *)operator new(0x80uLL);
  v30 = v29;
  *((_DWORD *)v29 + 21) = *((_DWORD *)v29 + 21) & 0x38000000 | 2;
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 2) = 0;
  *((_QWORD *)v29 + 1) = 0;
  *((_QWORD *)v29 + 5) = 0;
  *((_QWORD *)v29 + 6) = 0;
  *((_QWORD *)v29 + 4) = 0;
  v31 = (unsigned __int8 **)(v29 + 32);
  *((_QWORD *)v29 + 8) = **(_QWORD **)*a1 + 1576;
  v32 = (llvm::Value *)(v29 + 64);
  *((_QWORD *)v29 + 3) = v29 + 64;
  *((_QWORD *)v29 + 7) = v29 + 64;
  *((_QWORD *)v29 + 9) = 0;
  v29[80] = 61;
  v29[81] = 0;
  *((_WORD *)v29 + 41) = 0;
  *((_DWORD *)v29 + 21) = 2;
  *(_OWORD *)(v29 + 88) = 0u;
  *(_OWORD *)(v29 + 104) = 0u;
  *((_DWORD *)v29 + 30) = 0;
  v33 = a1 + 1;
  v34 = a1[1];
  *(_QWORD *)v29 = a1;
  *((_QWORD *)v29 + 1) = v34;
  if (v34)
    *(_QWORD *)(v34 + 16) = v29 + 8;
  *((_QWORD *)v29 + 2) = v33;
  *v33 = v29;
  if (*((_QWORD *)v29 + 4))
  {
    **((_QWORD **)v29 + 6) = *((_QWORD *)v29 + 5);
    v46 = *((_QWORD *)v29 + 5);
    if (v46)
      *(_QWORD *)(v46 + 16) = *((_QWORD *)v29 + 6);
  }
  *v31 = v26;
  if (v26)
  {
    v37 = *((_QWORD *)v26 + 1);
    v36 = (unsigned __int8 ***)(v26 + 8);
    v35 = v37;
    *((_QWORD *)v29 + 5) = v37;
    if (v37)
      *(_QWORD *)(v35 + 16) = v29 + 40;
    *((_QWORD *)v29 + 6) = v36;
    *v36 = v31;
  }
  *((_WORD *)v29 + 41) = 2 * (v28 & 0x3F);
  v29[124] = 1;
  v51 = 257;
  (*(void (**)(uint64_t, llvm::Value *, const char **, uint64_t, uint64_t))(**((_QWORD **)a3 + 10) + 16))(*((_QWORD *)a3 + 10), v32, &v49, *((_QWORD *)a3 + 6), *((_QWORD *)a3 + 7));
  v38 = *((unsigned int *)a3 + 2);
  if ((_DWORD)v38)
  {
    v39 = *(_QWORD *)a3;
    v40 = *(_QWORD *)a3 + 16 * v38;
    v41 = (unsigned __int8 **)(v30 + 112);
    do
    {
      v42 = *(_DWORD *)v39;
      v43 = *(unsigned __int8 **)(v39 + 8);
      if (v43)
      {
        if (!v42)
        {
          v52[0] = *(_QWORD *)(v39 + 8);
          llvm::MetadataTracking::track((uint64_t)v52, v43, 2);
          v44 = *v41;
          goto LABEL_34;
        }
      }
      else
      {
        v44 = *v41;
        if (!*v41 && (v30[87] & 0x20) == 0)
          goto LABEL_31;
        if (!v42)
        {
          v52[0] = 0;
LABEL_34:
          if (v44)
            llvm::MetadataTracking::untrack((uint64_t)(v30 + 112), v44);
          v45 = (unsigned __int8 *)v52[0];
          *v41 = (unsigned __int8 *)v52[0];
          if (v45)
            llvm::MetadataTracking::retrack((uint64_t)v52, v45, (uint64_t)(v30 + 112));
          goto LABEL_31;
        }
      }
      llvm::Value::setMetadata(v32, *(_DWORD *)v39, (llvm::MDNode *)v43);
LABEL_31:
      v39 += 16;
    }
    while (v39 != v40);
  }
}

uint64_t *sub_1C5651150(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v9;
  int v10;
  uint64_t v11;

  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v3 = 32;
    v2 = a1 + 8;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 8);
    v3 = *(_DWORD *)(a1 + 16);
    if (!v3)
    {
      v11 = 0;
      return (uint64_t *)(v2 + 16 * v11);
    }
  }
  v4 = v3 - 1;
  LODWORD(v5) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v6 = (uint64_t *)(v2 + 16 * v5);
  v7 = *v6;
  if (*v6 != a2)
  {
    v9 = 1;
    while (v7 != -4096)
    {
      v10 = v5 + v9++;
      v5 = v10 & v4;
      v7 = *(_QWORD *)(v2 + 16 * v5);
      if (v7 == a2)
        return (uint64_t *)(v2 + 16 * v5);
    }
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v11 = 32;
      v2 = a1 + 8;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      v11 = *(unsigned int *)(a1 + 16);
    }
    return (uint64_t *)(v2 + 16 * v11);
  }
  return v6;
}

unsigned __int8 *sub_1C5651210(llvm::PointerType *a1, uint64_t *a2, const llvm::APInt *a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v8;
  llvm::ConstantInt *v9;
  const llvm::APInt *v10;
  llvm::ValueHandleBase *v11;
  uint64_t v12;
  llvm::ConstantInt *v13;
  unsigned int v14;
  unint64_t v15;
  llvm::ValueHandleBase *v16;
  llvm::GetElementPtrInst *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  const char *v21;
  unsigned int v22;
  __int16 v23;
  _QWORD v24[3];

  v5 = a3;
  v24[2] = *MEMORY[0x1E0C80C00];
  v8 = **(_QWORD **)(a4 + 64);
  v9 = *(llvm::ConstantInt **)(v8 + 1984);
  v22 = *(_DWORD *)(v8 + 1992) >> 8;
  if (v22 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v21, 0, 0);
  else
    v21 = 0;
  v11 = llvm::ConstantInt::get(v9, (llvm::LLVMContext *)&v21, a3);
  if (v22 >= 0x41 && v21)
    MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
  v12 = v5;
  v13 = *(llvm::ConstantInt **)(v8 + 1984);
  v14 = *(_DWORD *)(v8 + 1992);
  v22 = v14 >> 8;
  if (v14 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v21, v12, 0);
  }
  else
  {
    if (v14 <= 0xFF)
      v15 = 0;
    else
      v15 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v14);
    v21 = (const char *)(v15 & v12);
  }
  v16 = llvm::ConstantInt::get(v13, (llvm::LLVMContext *)&v21, v10);
  if (v22 >= 0x41 && v21)
    MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
  v17 = (llvm::GetElementPtrInst *)a2[3];
  v24[0] = v11;
  v24[1] = v16;
  v21 = "new_gep";
  v23 = 259;
  v18 = (unsigned __int8 *)sub_1C509D7B0((uint64_t *)a4, v17, a2, (llvm::Value *)v24, 2, (uint64_t)&v21);
  v19 = llvm::PointerType::get(a1, (llvm::Type *)0x40);
  v23 = 257;
  return sub_1C4773E38((uint64_t *)a4, 49, v18, v19, (uint64_t)&v21);
}

void sub_1C56513DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = 32 * v1;
    v3 = *(_QWORD *)a1 + 24;
    do
    {
      if ((*(_QWORD *)(v3 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = *(void **)(v3 - 16);
        if ((void *)v3 != v4)
          free(v4);
      }
      v3 += 32;
      v2 -= 32;
    }
    while (v2);
  }
}

unsigned __int8 *sub_1C565143C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const llvm::APInt *a5)
{
  const char *v9;
  uint64_t v10;
  unint64_t v11;
  llvm::PointerType *v12;
  unsigned __int8 *v13;
  char v14;
  char v15;
  char *v16;
  char *v17;
  llvm::Value *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Type *v23;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 **v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  _BYTE v32[32];
  __int16 v33;
  _BYTE v34[32];
  __int16 v35;
  unsigned __int8 *v36;

  sub_1C4768AD0(a4, a1);
  v11 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((_DWORD)v9 == 1)
  v12 = (llvm::PointerType *)a1;
  if (v11 <= 8)
    v12 = (llvm::PointerType *)(**(_QWORD **)(a3 + 64) + 1936);
  v13 = sub_1C5651210(v12, a2, a5, a3);
  v33 = 257;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 48) + 56) + 40) + 272, (uint64_t)v12);
  v15 = v14;
  v16 = (char *)operator new(0x60uLL);
  v17 = v16;
  v18 = (llvm::Value *)(v16 + 32);
  *((_QWORD *)v16 + 2) = 0;
  *((_QWORD *)v16 + 3) = v16 + 32;
  v35 = 257;
  *((_QWORD *)v16 + 4) = v12;
  *((_QWORD *)v16 + 5) = 0;
  *((_WORD *)v16 + 24) = 60;
  *((_DWORD *)v16 + 13) = 1;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *((_DWORD *)v16 + 22) = 0;
  *(_QWORD *)v16 = v13;
  *((_QWORD *)v16 + 1) = 0;
  if (v13)
  {
    v21 = *((_QWORD *)v13 + 1);
    v20 = v13 + 8;
    v19 = v21;
    *((_QWORD *)v16 + 1) = v21;
    if (v21)
      *(_QWORD *)(v19 + 16) = v16 + 8;
    *((_QWORD *)v16 + 2) = v20;
    *v20 = v16;
  }
  *((_WORD *)v16 + 25) = 2 * (v15 & 0x3F);
  v16[92] = 1;
  llvm::Value::setName((uint64_t ***)v16 + 4, (uint64_t)v34);
  (*(void (**)(_QWORD, llvm::Value *, _BYTE *, _QWORD, _QWORD))(**(_QWORD **)(a3 + 80) + 16))(*(_QWORD *)(a3 + 80), v18, v32, *(_QWORD *)(a3 + 48), *(_QWORD *)(a3 + 56));
  v22 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v22)
  {
    v25 = *(_QWORD *)a3;
    v26 = *(_QWORD *)a3 + 16 * v22;
    v27 = (unsigned __int8 **)(v17 + 80);
    do
    {
      v28 = *(_DWORD *)v25;
      v29 = *(unsigned __int8 **)(v25 + 8);
      if (v29)
      {
        if (!v28)
        {
          v36 = *(unsigned __int8 **)(v25 + 8);
          llvm::MetadataTracking::track((uint64_t)&v36, v29, 2);
          v30 = *v27;
          goto LABEL_26;
        }
      }
      else
      {
        v30 = *v27;
        if (!*v27 && (v17[55] & 0x20) == 0)
          goto LABEL_23;
        if (!v28)
        {
          v36 = 0;
LABEL_26:
          if (v30)
            llvm::MetadataTracking::untrack((uint64_t)(v17 + 80), v30);
          v31 = v36;
          *v27 = v36;
          if (v31)
            llvm::MetadataTracking::retrack((uint64_t)&v36, v31, (uint64_t)(v17 + 80));
          goto LABEL_23;
        }
      }
      llvm::Value::setMetadata(v18, *(_DWORD *)v25, (llvm::MDNode *)v29);
LABEL_23:
      v25 += 16;
    }
    while (v25 != v26);
  }
  v23 = (llvm::Type *)a1;
  if ((*(_DWORD *)(a1 + 8) & 0xFE) == 0x12)
    v23 = **(llvm::Type ***)(a1 + 16);
  if (llvm::Type::getPrimitiveSizeInBits(v23) <= 8)
  {
    v35 = 257;
    return sub_1C4773E38((uint64_t *)a3, 38, (unsigned __int8 *)v18, a1, (uint64_t)v34);
  }
  return (unsigned __int8 *)v18;
}

BOOL sub_1C5651698(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v9;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      return v5 != (uint64_t *)(v2 + 16 * v3) && *((_DWORD *)v5 + 2) != 0;
    v7 = 1;
    while (v6 != -4096)
    {
      v9 = v4 + v7++;
      v4 = v9 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        return v5 != (uint64_t *)(v2 + 16 * v3) && *((_DWORD *)v5 + 2) != 0;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
  return v5 != (uint64_t *)(v2 + 16 * v3) && *((_DWORD *)v5 + 2) != 0;
}

uint64_t sub_1C565171C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C6281CBC(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C6281CBC(a1, v14, v9);
}

uint64_t sub_1C5651894(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[64];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C628206C(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C628206C(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1C5651A0C()
{
  int v1;
  int *v2;
  __int128 v3;

  *(_QWORD *)&v3 = "Apply loop deletion in constant-programs";
  *((_QWORD *)&v3 + 1) = 40;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C614D990((uint64_t)&unk_1ED808668, "cprog-loop-delete", &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED808668, &dword_1C475E000);
  *(_QWORD *)&v3 = "Apply CFG hoisting in constant-programs";
  *((_QWORD *)&v3 + 1) = 39;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C6136B80((uint64_t)&unk_1ED808728, "cprog-cfg-hoist", &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED808728, &dword_1C475E000);
  *(_QWORD *)&v3 = "Apply bindless texture DMA promotion in constant-programs";
  *((_QWORD *)&v3 + 1) = 57;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C6136B80((uint64_t)&unk_1ED8087E8, "cprog-dma-bindless-tex", &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8087E8, &dword_1C475E000);
  *(_QWORD *)&v3 = "Apply GMem hoisting in constant-programs";
  *((_QWORD *)&v3 + 1) = 40;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C6136B80((uint64_t)&unk_1ED8088A8, "cprog-gmem-hoist", &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8088A8, &dword_1C475E000);
  *(_QWORD *)&v3 = "Force max frontier size in constant-programs in 16-bit units";
  *((_QWORD *)&v3 + 1) = 60;
  v1 = -1;
  v2 = &v1;
  sub_1C6281D88(&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, qword_1ED808968, &dword_1C475E000);
  *(_QWORD *)&v3 = "Can the constant programs read uniforms";
  *((_QWORD *)&v3 + 1) = 39;
  sub_1C6281E4C(&v3);
  __cxa_atexit((void (*)(void *))sub_1C506F830, qword_1ED808A28, &dword_1C475E000);
  *(_QWORD *)&v3 = "Hoist and emit format conversions for uniform LOD in AGX3";
  *((_QWORD *)&v3 + 1) = 57;
  LOBYTE(v1) = 1;
  v2 = &v1;
  sub_1C6136B80((uint64_t)&unk_1ED808AE8, "cprog-hoist-agx3-uni-lod", &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED808AE8, &dword_1C475E000);
  *(_QWORD *)&v3 = "Hoist regardless of profitability";
  *((_QWORD *)&v3 + 1) = 33;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C614D990((uint64_t)&unk_1ED808BA8, "cprog-skip-profit-check", &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED808BA8, &dword_1C475E000);
  *(_QWORD *)&v3 = "Hoist instructions from non-entry functions";
  *((_QWORD *)&v3 + 1) = 43;
  LOBYTE(v1) = 1;
  v2 = &v1;
  sub_1C6136B80((uint64_t)&unk_1ED808C68, "cprog-hoist-functions", &v3, (_BYTE **)&v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED808C68, &dword_1C475E000);
}

uint64_t sub_1C5651C98(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeGPUFunctionCallInfoWrapperPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "internalize calls";
  *(_QWORD *)(v3 + 8) = 17;
  *(_QWORD *)(v3 + 16) = "internalize-calls";
  *(_QWORD *)(v3 + 24) = 17;
  *(_QWORD *)(v3 + 32) = &unk_1ED808D28;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5651DF0;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5651D28(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED808D28;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E8171DA0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED808D30);
  if (v3 != -1)
  {
    v7[0] = sub_1C5651C98;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED808D30, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5651DF0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5651D28(v0);
}

void sub_1C5651E1C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5651E40(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::GPUFunctionCallInfoWrapper::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::GPUFunctionCallInfoWrapper::ID);
}

uint64_t sub_1C5651E7C(uint64_t a1, llvm::AGXIR *a2)
{
  void **v3;
  void *v4;
  const llvm::Module *v5;
  uint64_t v6;
  char v7;
  __n128 v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  char v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *i;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int v31;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *j;
  uint64_t *v41;
  _QWORD *v42;
  _QWORD *k;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD **v49;
  uint64_t v50;
  uint64_t *m;
  uint64_t v52;
  llvm::BasicBlock *v53;
  _QWORD *v54;
  uint64_t **v55;
  unsigned int v56;
  uint64_t *v57;
  llvm::Type *v58;
  uint64_t v59;
  llvm::UndefValue *v60;
  llvm::UndefValue *v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  uint64_t v68;
  int32x2_t *v69;
  unint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v79;
  unint64_t *v80;
  uint64_t v81;
  int32x2_t *v82;
  unint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  int v89;
  int v90;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  _QWORD v96[2];
  unsigned int v97;
  uint64_t v98[3];
  char v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  void *v103[2];
  _WORD v104[16];
  uint64_t **v105;
  _QWORD **v106;
  uint64_t v107;
  void **v108;
  void **v109;
  uint64_t v110;
  int v111;
  __int16 v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  void *v117;
  char *v118;
  uint64_t v119;
  _QWORD v120[8];

  v120[6] = *MEMORY[0x1E0C80C00];
  v3 = **(void ****)(a1 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::GPUFunctionCallInfoWrapper::ID);
  v6 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::GPUFunctionCallInfoWrapper::ID)+ 32);
  if (*(_BYTE *)(v6 + 144))
  {
    llvm::AGXIR::getShaderID(a2, v5);
    v7 = 0;
    return v7 & 1;
  }
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v118 = (char *)v120;
  v119 = 0x600000000;
  v97 = 128;
  v96[0] = operator new(0x2000uLL, (std::align_val_t)8uLL);
  v96[1] = 0;
  v9 = 0x2000;
  v10 = (_QWORD *)(v96[0] + 16);
  do
  {
    *v10 = 0;
    v10[1] = -4096;
    *(v10 - 2) = &unk_1E814DA10;
    *(v10 - 1) = 2;
    v10[2] = 0;
    v10 += 8;
    v9 -= 64;
  }
  while (v9);
  LOBYTE(v98[0]) = 0;
  v99 = 0;
  v11 = (_QWORD *)*((_QWORD *)a2 + 4);
  v92 = (_QWORD *)((char *)a2 + 24);
  if (v11 != (_QWORD *)((char *)a2 + 24))
  {
    v12 = 0;
    v93 = v6 + 48;
    v94 = v6;
    while (1)
    {
      v13 = v11 - 7;
      if (!v11)
        v13 = 0;
      v14 = v13 + 9;
      v15 = (_QWORD *)v13[10];
LABEL_12:
      if (v15 != v14)
        break;
      v11 = (_QWORD *)v11[1];
      if (v11 == v92)
        goto LABEL_59;
    }
    v16 = v15 - 3;
    if (!v15)
      v16 = 0;
    v17 = v16 + 5;
    for (i = (_QWORD *)v16[6]; ; i = (_QWORD *)i[1])
    {
      if (i == v17)
      {
        v15 = (_QWORD *)v15[1];
        goto LABEL_12;
      }
      v19 = i ? (uint64_t)(i - 3) : 0;
      if (*(_BYTE *)(v19 + 16) == 84)
      {
        v20 = *(_QWORD *)(v19 - 32);
        if (v20)
        {
          if (!*(_BYTE *)(v20 + 16) && *(_QWORD *)(v20 + 24) == *(_QWORD *)(v19 + 72))
          {
            v21 = *(_DWORD *)(v20 + 32);
            if ((v21 & 0xF) - 7 >= 2)
            {
              v22 = (v21 >> 23) & 1;
              if (*(_QWORD *)(v20 + 72) != v20 + 72)
                v22 = 1;
              if ((v21 & 0x2000) == 0 && v22)
              {
                v23 = v100;
                v24 = v102;
                if (v102)
                {
                  v25 = (v102 - 1) & ((v20 >> 4) ^ (v20 >> 9));
                  v26 = *(_QWORD *)(v100 + 16 * v25);
                  if (v20 == v26)
                  {
LABEL_32:
                    if ((_DWORD)v25 != v102)
                    {
                      sub_1C500A72C(v19, *(_QWORD *)(v100 + 16 * v25 + 8));
                      continue;
                    }
                  }
                  else
                  {
                    v35 = 1;
                    while (v26 != -4096)
                    {
                      v36 = v25 + v35++;
                      v25 = v36 & (v102 - 1);
                      v26 = *(_QWORD *)(v100 + 16 * v25);
                      if (v20 == v26)
                        goto LABEL_32;
                    }
                  }
                }
                v27 = sub_1C477672C(v93, *(_QWORD *)(v19 - 32));
                v28 = *(_QWORD *)(v94 + 56);
                v29 = 64;
                if (v28 == *(_QWORD *)(v94 + 48))
                  v29 = 68;
                if (v27 == (_QWORD *)(v28 + 8 * *(unsigned int *)(v94 + v29)) && !sub_1C5651698(v94, v20))
                  break;
              }
            }
          }
        }
      }
LABEL_25:
      ;
    }
    v30 = llvm::CloneFunction((llvm::Function *)v20, (uint64_t)v96, 0);
    *((_DWORD *)v30 + 8) = *((_DWORD *)v30 + 8) & 0xFFFFBFC0 | 0x4008;
    v103[0] = 0;
    v31 = sub_1C545B460(v23, v24, v20, v103);
    v32 = (uint64_t *)v103[0];
    if (v31)
    {
      v30 = (char *)*((_QWORD *)v103[0] + 1);
LABEL_46:
      sub_1C500A72C(v19, (uint64_t)v30);
      v34 = v119;
      if (v119 >= (unint64_t)HIDWORD(v119))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, (uint64_t)v120, v119 + 1, 8);
        v34 = v119;
      }
      *(_QWORD *)&v118[8 * v34] = v20;
      LODWORD(v119) = v119 + 1;
      v12 = 1;
      goto LABEL_25;
    }
    if (4 * (int)v101 + 4 < 3 * v24)
    {
      if (v24 + ~(_DWORD)v101 - HIDWORD(v101) > v24 >> 3)
        goto LABEL_43;
      v33 = v24;
    }
    else
    {
      v33 = 2 * v24;
    }
    sub_1C545B4F4((uint64_t)&v100, v33);
    v103[0] = 0;
    sub_1C545B460(v100, v102, v20, v103);
    v32 = (uint64_t *)v103[0];
LABEL_43:
    LODWORD(v101) = v101 + 1;
    if (*v32 != -4096)
      --HIDWORD(v101);
    *v32 = v20;
    v32[1] = (uint64_t)v30;
    goto LABEL_46;
  }
  v12 = 0;
LABEL_59:
  if (!(_DWORD)v119)
    goto LABEL_94;
  v37 = v118;
  v95 = &v118[8 * v119];
  do
  {
    v38 = *(_QWORD *)v37;
    v39 = (uint64_t *)(*(_QWORD *)v37 + 72);
    for (j = *(uint64_t **)(*(_QWORD *)v37 + 80); j != v39; j = (uint64_t *)j[1])
    {
      if (j)
        v41 = j - 3;
      else
        v41 = 0;
      v42 = v41 + 5;
      for (k = (_QWORD *)v41[6]; k != v42; k = (_QWORD *)k[1])
      {
        if (k)
          v44 = k - 3;
        else
          v44 = 0;
        v45 = *((_DWORD *)v44 + 5);
        if ((v45 & 0x40000000) != 0)
        {
          v47 = (_QWORD *)*(v44 - 1);
          v46 = v45 & 0x7FFFFFF;
          if (!v46)
            continue;
        }
        else
        {
          v46 = v45 & 0x7FFFFFF;
          v47 = &v44[-4 * v46];
          if (!v46)
            continue;
        }
        v48 = 32 * v46;
        v49 = (_QWORD **)(v47 + 2);
        do
        {
          if (*(v49 - 2))
          {
            **v49 = *(v49 - 1);
            v50 = (uint64_t)*(v49 - 1);
            if (v50)
              *(_QWORD *)(v50 + 16) = *v49;
          }
          *(v49 - 2) = 0;
          v49 += 4;
          v48 -= 32;
        }
        while (v48);
      }
    }
    for (m = (uint64_t *)*v39; m != v39; m = *(uint64_t **)(v38 + 72))
    {
      v52 = *(_QWORD *)(v38 + 80);
      if (v52)
        v53 = (llvm::BasicBlock *)(v52 - 24);
      else
        v53 = 0;
      llvm::BasicBlock::eraseFromParent(v53);
    }
    v54 = **(_QWORD ***)v38;
    v103[0] = "entry";
    v104[8] = 259;
    v55 = (uint64_t **)operator new();
    *v55 = (uint64_t *)(*v54 + 1600);
    v55[1] = 0;
    v56 = *((_DWORD *)v55 + 5) & 0xC0000000;
    *((_DWORD *)v55 + 4) = 22;
    *((_DWORD *)v55 + 5) = v56;
    v55[3] = 0;
    v55[4] = 0;
    v55[5] = (uint64_t *)(v55 + 5);
    v55[6] = (uint64_t *)(v55 + 5);
    v55[7] = 0;
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v39, v55);
    v57 = *(uint64_t **)(v38 + 72);
    v55[4] = v39;
    v55[3] = v57;
    v57[1] = (uint64_t)(v55 + 3);
    *(_QWORD *)(v38 + 72) = v55 + 3;
    llvm::Value::setName((uint64_t ***)v55, (uint64_t)v103);
    v59 = **v55;
    v103[0] = v104;
    v103[1] = (void *)0x200000000;
    v107 = v59;
    v108 = &v116;
    v109 = &v117;
    v110 = 0;
    v111 = 0;
    v112 = 512;
    v113 = 7;
    v114 = 0;
    v115 = 0;
    v116 = &unk_1E8167888;
    v117 = &unk_1E8167A08;
    v105 = v55;
    v106 = v55 + 5;
    v60 = **(llvm::UndefValue ***)(*(_QWORD *)(v38 + 24) + 16);
    if (*((_BYTE *)v60 + 8) == 7)
    {
      LLVMBuildRetVoid_0((uint64_t *)v103);
    }
    else
    {
      v61 = llvm::UndefValue::get(v60, v58);
      sub_1C538D7E4((uint64_t *)v103, v61);
    }
    if (v103[0] != v104)
      free(v103[0]);
    v37 += 8;
  }
  while (v37 != v95);
LABEL_94:
  if (v99)
  {
    sub_1C4E43068((uint64_t)v98);
    MEMORY[0x1CAA32FB4](v98[0], 8);
    v99 = 0;
  }
  v62 = (_QWORD *)v96[0];
  if (v97)
  {
    v63 = v96[0] + ((unint64_t)v97 << 6);
    v8.n128_u64[0] = 0x1FFFFFFFFLL;
    v7 = v12;
    do
    {
      v64 = v62[3];
      if ((v64 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v65 = v62[7];
        if (v65)
        {
          if (v65 != -8192 && v65 != -4096)
          {
            v66 = v62[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v66 = v62[6];
            v67 = (unint64_t *)v62[6];
            if (v67)
            {
              *v67 = *v67 & 7 | v66;
            }
            else
            {
              v68 = v62[7];
              v69 = ***(int32x2_t ****)v68;
              v70 = (unint64_t)v69[303];
              if (v70 <= v66)
              {
                v71 = v69[305].u32[0];
                if (v70 + 16 * v71 > v66)
                {
                  v72 = v71 - 1;
                  LODWORD(v73) = v72 & ((v68 >> 4) ^ (v68 >> 9));
                  v74 = (uint64_t *)(v70 + 16 * v73);
                  v75 = *v74;
                  if (v68 == *v74)
                  {
LABEL_110:
                    *v74 = -8192;
                    v69[304] = vadd_s32(v69[304], (int32x2_t)0x1FFFFFFFFLL);
                    v68 = v62[7];
                  }
                  else
                  {
                    v76 = 1;
                    while (v75 != -4096)
                    {
                      v77 = v73 + v76++;
                      v73 = v77 & v72;
                      v75 = *(_QWORD *)(v70 + 16 * v73);
                      if (v68 == v75)
                      {
                        v74 = (uint64_t *)(v70 + 16 * v73);
                        goto LABEL_110;
                      }
                    }
                  }
                  *(_BYTE *)(v68 + 17) &= ~1u;
                }
              }
            }
            v64 = v62[3];
          }
        }
      }
      if (v64 != -4096 && v64 != -8192 && v64 != 0)
      {
        v79 = v62[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v79 = v62[2];
        v80 = (unint64_t *)v62[2];
        if (v80)
        {
          *v80 = *v80 & 7 | v79;
        }
        else
        {
          v81 = v62[3];
          v82 = ***(int32x2_t ****)v81;
          v83 = (unint64_t)v82[303];
          if (v83 <= v79)
          {
            v84 = v82[305].u32[0];
            if (v83 + 16 * v84 > v79)
            {
              v85 = v84 - 1;
              LODWORD(v86) = v85 & ((v81 >> 4) ^ (v81 >> 9));
              v87 = (uint64_t *)(v83 + 16 * v86);
              v88 = *v87;
              if (v81 == *v87)
              {
LABEL_129:
                *v87 = -8192;
                v82[304] = vadd_s32(v82[304], (int32x2_t)0x1FFFFFFFFLL);
                v81 = v62[3];
              }
              else
              {
                v89 = 1;
                while (v88 != -4096)
                {
                  v90 = v86 + v89++;
                  v86 = v90 & v85;
                  v88 = *(_QWORD *)(v83 + 16 * v86);
                  if (v81 == v88)
                  {
                    v87 = (uint64_t *)(v83 + 16 * v86);
                    goto LABEL_129;
                  }
                }
              }
              *(_BYTE *)(v81 + 17) &= ~1u;
            }
          }
        }
      }
      v62 += 8;
    }
    while (v62 != (_QWORD *)v63);
    v62 = (_QWORD *)v96[0];
  }
  else
  {
    v7 = v12;
  }
  MEMORY[0x1CAA32FB4](v62, 8, v8);
  if (v118 != (char *)v120)
    free(v118);
  MEMORY[0x1CAA32FB4](v100, 8);
  return v7 & 1;
}

uint64_t sub_1C565273C(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeFunctionGroupInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v2);
  v3 = operator new();
  *(_QWORD *)v3 = "Invariant Extraction";
  *(_QWORD *)(v3 + 8) = 20;
  *(_QWORD *)(v3 + 16) = "extract-invariants";
  *(_QWORD *)(v3 + 24) = 18;
  *(_QWORD *)(v3 + 32) = &unk_1ED808D38;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C56527E0;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C56527E0()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = &unk_1ED808D38;
  *(_DWORD *)(v0 + 24) = 4;
  *(_QWORD *)v0 = &off_1E8171E40;
  *(_WORD *)(v0 + 28) = 257;
  *(_BYTE *)(v0 + 30) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED808D40);
  if (v2 != -1)
  {
    v6[0] = sub_1C565273C;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED808D40, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C56528D4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C56528F8(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
}

uint64_t sub_1C5652934(uint64_t a1, uint64_t a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  int v15;
  _BYTE v16[32];

  v4 = **(void ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::FunctionGroupInfoWrapperPass::ID);
  v6 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::FunctionGroupInfoWrapperPass::ID)+ 32);
  *(_QWORD *)(a1 + 32) = a2 + 272;
  v12 = v16;
  v13 = v16;
  v14 = 4;
  v15 = 0;
  v7 = a2 + 24;
  v8 = *(_QWORD *)(a2 + 32);
  if (v8 == v7)
    return 0;
  do
  {
    v9 = v8;
    v8 = *(_QWORD *)(v8 + 8);
    if (v9)
      v10 = v9 - 56;
    else
      v10 = 0;
    if (v9 && *(_BYTE *)(v10 + 16) == 3)
    {
      if ((*(_DWORD *)(v10 + 20) & 0x7FFFFFF) != 0)
        goto LABEL_14;
    }
    else if (*(_BYTE *)(v10 + 16) || *(_QWORD *)(v10 + 72) != v10 + 72 || (*(_BYTE *)(v10 + 34) & 0x80) != 0)
    {
LABEL_14:
      sub_1C5652A4C(a1, v10, v6, (unsigned int *)&v12);
    }
  }
  while (v8 != v7);
  if (v13 != v12)
    free(v13);
  return 0;
}

void sub_1C5652A4C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  int v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void **v22;
  int v23;
  uint64_t v24;
  int64x2_t v25;
  char v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *j;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  char v43;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  _BOOL4 v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  _BOOL4 v61;
  unsigned int v62;
  uint64_t v64;
  int v65;
  llvm::CastInst *v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  llvm::CastInst *v75;
  llvm::CastInst *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  BOOL v88;
  uint64_t v89;
  int v90;
  BOOL v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  _QWORD *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  BOOL v103;
  int v104;
  int v106;
  uint64_t v107;
  char v108;
  llvm::CastInst *v109;
  uint64_t v110;
  uint64_t v111;
  llvm::CastInst *v112;
  int v113;
  uint64_t **v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  int v124;
  char v126;
  llvm::CastInst *v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  unsigned int v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  int v142;
  unsigned int v143;
  int v144;
  unsigned int v145;
  _QWORD *v146;
  _QWORD *v147;
  int v148;
  int v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t k;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  unsigned int v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  int v169;
  unsigned int v170;
  int v171;
  unsigned int v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int v178;
  int v179;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  unsigned int v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  int v195;
  unsigned int v196;
  int v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t *v217;
  uint64_t v218;
  unsigned int v219;
  uint64_t v220;
  int v221;
  unsigned int v222;
  uint64_t *v223;
  llvm::SmallPtrSetImplBase *v224;
  char *v226;
  char *v227;
  unsigned int v228;
  _BOOL4 v229;
  char v230;
  int v231;
  _QWORD *v232;
  int v233;
  void *v234;
  void *v235;
  uint64_t v236;
  void *v237[2];
  uint64_t v238;
  __int128 v239;
  uint64_t v240;
  uint64_t v241;
  llvm::CastInst *v242;
  uint64_t v243[3];
  llvm::CastInst *v244;
  uint64_t v245;
  void **v246;
  _QWORD v247[2];
  int v248;
  uint64_t v249;
  int64x2_t v250;
  int64x2_t v251;
  int64x2_t v252;
  int64x2_t v253;
  void *v254;
  uint64_t v255;
  _BYTE v256[9];
  uint64_t *v257;
  uint64_t v258;
  unsigned int v259;
  uint64_t v260;
  int64x2_t v261;
  int64x2_t v262;
  int64x2_t v263;
  int64x2_t v264;
  void *v265;
  uint64_t v266;
  _BYTE v267[64];
  uint64_t v268;
  int64x2_t v269;
  int64x2_t v270;
  int64x2_t v271;
  int64x2_t v272;
  void *v273;
  uint64_t v274;
  _BYTE v275[64];
  uint64_t v276;
  int64x2_t v277;
  int64x2_t v278;
  int64x2_t v279;
  int64x2_t v280;
  void *v281;
  uint64_t v282;
  _BYTE v283[64];
  void *v284;
  uint64_t v285;
  _BYTE v286[32];
  char v287;
  char v288;
  __int16 v289;
  unsigned __int8 v290;
  __int128 __p;
  uint64_t v292;
  __int128 v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;

  v296 = *MEMORY[0x1E0C80C00];
  v241 = a2;
  v7 = sub_1C477672C((uint64_t)a4, a2);
  v8 = *((_QWORD *)a4 + 1);
  v224 = (llvm::SmallPtrSetImplBase *)a4;
  if (v8 == *(_QWORD *)a4)
    v9 = a4 + 5;
  else
    v9 = a4 + 4;
  if (v7 != (_QWORD *)(v8 + 8 * *v9))
    return;
  v10 = (*(unsigned __int16 *)(a2 + 18) >> 4) & 0x3FF;
  v11 = (_BYTE *)(a1 + 29);
  v12 = 1 << ((*(unsigned __int16 *)(a2 + 18) >> 4) - 100);
  if ((v12 & 0x66) == 0)
  {
    if ((v12 & 0x91) != 0)
      return;
    v11 = (_BYTE *)(a1 + 28);
  }
  if (!*v11)
    return;
  v228 = v10 - 103;
  if ((v10 - 103) > 1)
  {
    if (!*(_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3))
      return;
    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 24))(a3, a2);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 592))(v19, 100))
      return;
    v20 = 0;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 30))
      goto LABEL_32;
    v13 = *(_QWORD *)(a2 + 80);
LABEL_11:
    if (v13 == a2 + 72)
    {
LABEL_32:
      v20 = 0;
    }
    else
    {
      if (v13)
        v14 = v13 - 24;
      else
        v14 = 0;
      v15 = v14 + 40;
      for (i = *(_QWORD *)(v14 + 48); ; i = *(_QWORD *)(i + 8))
      {
        if (i == v15)
        {
          v13 = *(_QWORD *)(v13 + 8);
          goto LABEL_11;
        }
        v17 = i - 24;
        if (!i)
          v17 = 0;
        if (*(_BYTE *)(v17 + 16) == 84)
        {
          v18 = *(_QWORD *)(v17 - 32);
          if (v18)
          {
            if (!*(_BYTE *)(v18 + 16)
              && *(_QWORD *)(v18 + 24) == *(_QWORD *)(v17 + 72)
              && (*(_BYTE *)(v18 + 33) & 0x20) != 0
              && (*(_DWORD *)(*(_QWORD *)(i - 56) + 36) & 0xFFFFFFFE) == 0x7CA)
            {
              break;
            }
          }
        }
      }
      v20 = 1;
    }
    v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 24))(a3, a2);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 592))(v21, 105))
      return;
  }
  v22 = (void **)(*(_QWORD *)(a2 + 40) + 216);
  LOWORD(v249) = 260;
  v246 = v22;
  llvm::Triple::Triple((uint64_t)v237, (llvm::Twine *)&v246);
  v234 = 0;
  v235 = 0;
  v236 = 0;
  sub_1C5643D14((char **)&v234, (uint64_t)&v241);
  v23 = *(unsigned __int8 *)(a1 + 30);
  v24 = *(_QWORD *)(a1 + 32);
  v247[0] = 0;
  v247[1] = 0;
  v246 = &v234;
  v248 = 0;
  v249 = 1;
  v25 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v250 = v25;
  v251 = v25;
  v252 = v25;
  v253 = v25;
  v254 = v256;
  v255 = 0x800000000;
  v257 = 0;
  v258 = 0;
  v259 = 0;
  v260 = 1;
  v261 = v25;
  v262 = v25;
  v263 = v25;
  v264 = v25;
  if (v23)
    v26 = v20;
  else
    v26 = 0;
  v265 = v267;
  v266 = 0x800000000;
  v268 = 1;
  v269 = v25;
  v270 = v25;
  v271 = v25;
  v272 = v25;
  v273 = v275;
  v274 = 0x800000000;
  v276 = 1;
  v277 = v25;
  v278 = v25;
  v279 = v25;
  v280 = v25;
  v281 = v283;
  v282 = 0x800000000;
  v284 = v286;
  v285 = 0x400000000;
  v287 = 0;
  v288 = v26;
  v289 = 1;
  v290 = 0;
  if (SHIBYTE(v238) < 0)
  {
    sub_1C47EBC30(&__p, v237[0], (unint64_t)v237[1]);
  }
  else
  {
    __p = *(_OWORD *)v237;
    v292 = v238;
  }
  v293 = v239;
  v294 = v240;
  v295 = v24;
  v27 = v246[1];
  v226 = (char *)*v246;
  if (v27 != *v246)
  {
    v233 = 0;
    do
    {
      v28 = *(v27 - 1);
      v227 = (char *)(v27 - 1);
      v29 = v28 + 40;
      v30 = *(_QWORD *)(v28 + 48);
      v232 = (_QWORD *)(v28 + 40);
      while (v30 != v29)
      {
        v31 = v30 - 24;
        if (v30)
          v32 = v30 - 24;
        else
          v32 = 0;
        if (*(_BYTE *)(v32 + 16) != 83)
          goto LABEL_51;
        v30 = *(_QWORD *)(v30 + 8);
        v29 = v28 + 40;
      }
      v31 = 0;
LABEL_51:
      for (j = (_QWORD *)(v31 + 24); j != v232; j = (_QWORD *)j[1])
      {
        if (j)
          v34 = (uint64_t)(j - 3);
        else
          v34 = 0;
        v242 = (llvm::CastInst *)v34;
        v35 = *(_DWORD *)(v34 + 20);
        if ((v35 & 0x40000000) != 0)
        {
          v37 = *(_QWORD *)(v34 - 8);
          v36 = v35 & 0x7FFFFFF;
          if (!v36)
            goto LABEL_84;
LABEL_58:
          v38 = 0;
          v39 = 0;
          v40 = v37 + 32 * v36;
          v41 = v259 - 1;
          v42 = v248 - 1;
          v43 = 1;
          while (2)
          {
            v44 = *(_QWORD *)v37;
            v45 = *(unsigned __int8 *)(*(_QWORD *)v37 + 16);
            if (*(_QWORD *)v37)
              v46 = v45 >= 0x1C;
            else
              v46 = 0;
            if (!v46)
            {
              v47 = v45 < 0x15;
              v39 |= v47;
              v43 &= v47;
              goto LABEL_77;
            }
            if (v259)
            {
              v48 = (v44 >> 4) ^ (v44 >> 9);
              v49 = v48 & v41;
              v50 = v257[2 * (v48 & v41)];
              if (v44 == v50)
              {
LABEL_66:
                v38 = 1;
                goto LABEL_77;
              }
              v53 = 1;
              while (v50 != -4096)
              {
                v54 = v49 + v53++;
                v49 = v54 & v41;
                v50 = v257[2 * v49];
                if (v44 == v50)
                  goto LABEL_66;
              }
              if (!v248)
              {
LABEL_76:
                v43 = 0;
                goto LABEL_77;
              }
            }
            else
            {
              if (!v248)
                goto LABEL_76;
              v48 = (v44 >> 4) ^ (v44 >> 9);
            }
            v51 = v48 & v42;
            v52 = *(_QWORD *)(v247[0] + 16 * v51);
            if (v44 != v52)
            {
              v55 = 1;
              while (v52 != -4096)
              {
                v56 = v51 + v55++;
                v51 = v56 & v42;
                v52 = *(_QWORD *)(v247[0] + 16 * v51);
                if (v44 == v52)
                  goto LABEL_70;
              }
              goto LABEL_76;
            }
LABEL_70:
            v39 = 1;
LABEL_77:
            v37 += 32;
            if (v37 == v40)
              goto LABEL_85;
            continue;
          }
        }
        v36 = v35 & 0x7FFFFFF;
        v37 = v34 - 32 * v36;
        if (v36)
          goto LABEL_58;
LABEL_84:
        v39 = 0;
        v38 = 0;
        v43 = 1;
LABEL_85:
        v57 = 0;
        v58 = *(unsigned __int8 *)(v34 + 16);
        if (!j || v58 != 60)
          goto LABEL_97;
        v59 = **(_QWORD **)(v34 - 32);
        v60 = *(_DWORD *)(v59 + 8);
        if ((v60 & 0xFE) == 0x12)
          v60 = *(_DWORD *)(**(_QWORD **)(v59 + 16) + 8);
        v61 = 0;
        v62 = v60 >> 8;
        if (v62 != 2 && v62 != 64)
        {
          if (v62 != 3 || v228 >= 2)
            v57 = 0;
          else
            v57 = v34;
LABEL_97:
          v61 = v57 == 0;
          if ((v43 & v61) == 0)
            goto LABEL_130;
          v64 = (v58 - 33);
          if (v64 <= 0x37)
          {
            v65 = v290;
            if (((1 << v64) & 0x8000000000041) != 0)
            {
              v71 = *(_QWORD *)(v34 + 64);
              if (!v71 || (*(_BYTE *)(v71 + 20) & 4) == 0 && (*(_BYTE *)(v71 + 17) & 0x10) == 0)
              {
                LODWORD(v243[0]) = 7;
                if (sub_1C53E4BBC(v34, (__int32 *)v243, 1uLL))
                {
                  v117 = *(_QWORD *)(v34 - 32);
                  if (!v117
                    || *(_BYTE *)(v117 + 16)
                    || *(_QWORD *)(v117 + 24) != *(_QWORD *)(v34 + 72)
                    || *(_DWORD *)(v117 + 36) != 7)
                  {
                    goto LABEL_113;
                  }
                }
                if ((llvm::CallBase::hasFnAttrOnCalledFunction(v34, 66) & 1) == 0
                  && (llvm::CallBase::hasFnAttrOnCalledFunction(v34, 44) & 1) == 0)
                {
                  goto LABEL_113;
                }
              }
            }
            else
            {
              if (((1 << v64) & 0x808001C8000010) == 0 && (v64 != 28 || (*(_WORD *)(v34 + 18) & 0x301) == 0))
                goto LABEL_102;
LABEL_113:
              v72 = *(unsigned __int8 *)(v34 + 16);
              if (v72 != 65 && v72 != 60 || v65)
              {
LABEL_128:
                v43 = *((_BYTE *)v242 + 16) == 84;
                v61 = 1;
                goto LABEL_130;
              }
            }
          }
LABEL_102:
          v66 = v242;
          v67 = *((unsigned __int8 *)v242 + 16);
          v61 = 1;
          v68 = (v67 - 33);
          if (v68 > 0x37)
            goto LABEL_129;
          v69 = HIBYTE(v289);
          v70 = v290;
          if (((1 << (v67 - 33)) & 0x8000000000041) == 0)
          {
            if (v68 != 27)
            {
              v43 = 1;
              if (((1 << (v67 - 33)) & 0x808001D0000010) == 0)
                goto LABEL_130;
              goto LABEL_123;
            }
            if ((*((_WORD *)v242 + 9) & 0x301) != 0)
              goto LABEL_128;
LABEL_129:
            v43 = 1;
            goto LABEL_130;
          }
          v73 = *((_QWORD *)v242 + 8);
          if (v73 && (*(_BYTE *)(v73 + 17) & 0x30) != 0)
            goto LABEL_129;
          v74 = *((_DWORD *)v242 + 5);
          if (v74 < 0)
          {
            v118 = (char *)v242 - 32 * (v74 & 0x7FFFFFF);
            v121 = *((_QWORD *)v118 - 1);
            v119 = v118 - 8;
            v120 = v121;
            if (v121)
            {
              v122 = -v120;
              do
              {
                v123 = *(_DWORD *)(*(_QWORD *)&v119[v122] + 8);
                v103 = v123 > 7;
                v124 = (1 << v123) & 0x83;
                if (v103 || v124 == 0)
                  goto LABEL_123;
                v122 += 16;
              }
              while (v122);
            }
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v242, 45) & 1) == 0
            && (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v66, 44) & 1) == 0)
          {
            v67 = *((unsigned __int8 *)v66 + 16);
LABEL_123:
            if (v67 != 65 && v67 != 61 || v70 | v69)
              goto LABEL_128;
          }
          v61 = 1;
          goto LABEL_129;
        }
LABEL_130:
        v75 = 0;
        v76 = v242;
        v77 = *((unsigned __int8 *)v242 + 16);
        v78 = 1;
        v229 = v61;
        if (v77 <= 0x3B)
        {
          if (v77 == 37)
            goto LABEL_216;
          if (v77 != 33 && v77 != 39)
            goto LABEL_151;
          goto LABEL_138;
        }
        v79 = v77 - 60;
        if (v79 > 0x1C)
          goto LABEL_151;
        if (v79 != 24)
        {
          if (((1 << v79) & 0x1010003A) != 0)
            goto LABEL_216;
          if (!v79)
          {
            if ((*((_WORD *)v242 + 9) & 0x301) == 0)
            {
              v75 = 0;
              goto LABEL_151;
            }
LABEL_216:
            if (v228 <= 1)
            {
              v106 = *((unsigned __int8 *)v76 + 16);
              if (v106 != 65)
              {
                v78 = 0;
                goto LABEL_224;
              }
              v107 = *((_WORD *)v76 + 9) >> 4;
              if (v107 > 0xA)
                v78 = 1;
              else
                v78 = byte_1C865FF8C[v107];
              if (*((_QWORD *)v76 + 1))
              {
LABEL_224:
                v91 = v106 != 61;
                v231 = v233;
LABEL_225:
                if ((v43 & 1) != 0)
                {
LABEL_226:
                  if (!v91)
                  {
                    if (v229 && (v112 = v242, v113 = *((unsigned __int8 *)v242 + 16), (v113 - 73) >= 2))
                    {
                      if ((v113 - 79) >= 0xFFFFFFF3)
                      {
                        llvm::CastInst::isNoopCast(v242, (const llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v242 + 5) + 56) + 40)+ 272));
                        if ((v115 & 1) != 0)
                          goto LABEL_243;
                        v112 = v242;
                      }
                      else if (v113 == 89)
                      {
                        if (*(unsigned __int8 *)(*((_QWORD *)v242 - 4) + 16) <= 0x14u)
                          goto LABEL_243;
                      }
                      else if (v113 == 62 && (llvm::GetElementPtrInst::hasAllZeroIndices(v242) & 1) != 0)
                      {
                        goto LABEL_243;
                      }
                      if ((v38 & 1) != 0)
                      {
                        sub_1C5658018((int32x2_t *)&v246, (uint64_t)v112);
                        v112 = v242;
                      }
                      v244 = v112;
                      v245 = v78 != 0;
                      v114 = (uint64_t **)v247;
                    }
                    else
                    {
LABEL_243:
                      if ((v38 & 1) == 0)
                      {
                        v244 = v242;
                        v245 = v78;
                        sub_1C6282328((uint64_t)v243, (uint64_t)&v257, &v244, &v245);
                        sub_1C4E7C77C((uint64_t)&v276, (uint64_t *)&v242);
                        goto LABEL_319;
                      }
                      v244 = v242;
                      v245 = v78;
                      v114 = &v257;
                    }
                    sub_1C6282328((uint64_t)v243, (uint64_t)v114, &v244, &v245);
                    goto LABEL_319;
                  }
                }
LABEL_227:
                v230 = 1;
LABEL_228:
                v108 = 0;
                v287 |= v78;
                v109 = v242;
                v110 = *((unsigned __int8 *)v242 + 16) - 33;
                if (v110 <= 0x37)
                {
                  if (((1 << (*((_BYTE *)v242 + 16) - 33)) & 0x8000000000041) == 0)
                  {
                    if (((1 << (*((_BYTE *)v242 + 16) - 33)) & 0x808001C8000010) == 0)
                    {
                      if (v110 == 28)
                        v108 = (*((_WORD *)v242 + 9) & 0x301) != 0;
                      goto LABEL_278;
                    }
LABEL_263:
                    v108 = 1;
                    goto LABEL_278;
                  }
                  v111 = *((_QWORD *)v242 + 8);
                  if (!v111 || (*(_BYTE *)(v111 + 20) & 4) == 0 && (*(_BYTE *)(v111 + 17) & 0x10) == 0)
                  {
                    LODWORD(v243[0]) = 7;
                    if (sub_1C53E4BBC((uint64_t)v242, (__int32 *)v243, 1uLL))
                    {
                      v116 = *((_QWORD *)v109 - 4);
                      if (!v116 || *(_BYTE *)(v116 + 16) || *(_QWORD *)(v116 + 24) != *((_QWORD *)v109 + 9))
                      {
                        v108 = 1;
                        goto LABEL_278;
                      }
                      if (*(_DWORD *)(v116 + 36) != 7)
                        goto LABEL_263;
                    }
                    if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v109, 66) & 1) == 0)
                    {
                      v108 = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v109, 44) ^ 1;
                      goto LABEL_278;
                    }
                  }
                  v108 = 0;
                }
LABEL_278:
                v126 = 0;
                HIBYTE(v289) |= v108;
                v127 = v242;
                v128 = *((unsigned __int8 *)v242 + 16) - 33;
                if (v128 > 0x37)
                  goto LABEL_289;
                if (((1 << (*((_BYTE *)v242 + 16) - 33)) & 0x8000000000041) == 0)
                {
                  if (v128 == 27)
                  {
                    v126 = (*((_WORD *)v242 + 9) & 0x301) != 0;
                  }
                  else if (((1 << (*((_BYTE *)v242 + 16) - 33)) & 0x808001D0000010) != 0)
                  {
                    goto LABEL_282;
                  }
                  goto LABEL_289;
                }
                v129 = *((_QWORD *)v242 + 8);
                if (!v129 || (*(_BYTE *)(v129 + 17) & 0x30) == 0)
                {
                  v130 = *((_DWORD *)v242 + 5);
                  if (v130 < 0)
                  {
                    v173 = (char *)v242 - 32 * (v130 & 0x7FFFFFF);
                    v176 = *((_QWORD *)v173 - 1);
                    v174 = v173 - 8;
                    v175 = v176;
                    if (v176)
                    {
                      v177 = -v175;
                      while (1)
                      {
                        v178 = *(_DWORD *)(*(_QWORD *)&v174[v177] + 8);
                        v103 = v178 > 7;
                        v179 = (1 << v178) & 0x83;
                        if (v103 || v179 == 0)
                          break;
                        v177 += 16;
                        if (!v177)
                          goto LABEL_286;
                      }
LABEL_282:
                      v126 = 1;
LABEL_289:
                      v290 |= v126;
                      if (((v39 | v38) & 1) != 0)
                      {
                        v131 = *((_DWORD *)v242 + 5);
                        if ((v131 & 0x40000000) == 0)
                        {
                          v132 = v131 & 0x7FFFFFF;
                          v133 = (char *)v242 - 32 * v132;
                          if (!v132)
                            goto LABEL_316;
LABEL_294:
                          v134 = &v133[32 * v132];
                          do
                          {
                            v243[0] = 0;
                            v135 = *(_QWORD *)v133;
                            if (*(unsigned __int8 *)(*(_QWORD *)v133 + 16) <= 0x1Bu)
                              v136 = 0;
                            else
                              v136 = *(_QWORD *)v133;
                            v243[0] = v136;
                            if (v136)
                            {
                              if (v248)
                              {
                                v137 = v248 - 1;
                                v138 = (v248 - 1) & ((v136 >> 4) ^ (v136 >> 9));
                                v139 = *(_QWORD *)(v247[0] + 16 * v138);
                                if (v136 == v139)
                                {
LABEL_301:
                                  sub_1C4E7C77C((uint64_t)&v249, v243);
                                  v136 = v243[0];
                                }
                                else
                                {
                                  v142 = 1;
                                  while (v139 != -4096)
                                  {
                                    v143 = v138 + v142++;
                                    v138 = v143 & v137;
                                    v139 = *(_QWORD *)(v247[0] + 16 * (v143 & v137));
                                    if (v136 == v139)
                                      goto LABEL_301;
                                  }
                                }
                              }
                              else
                              {
                                v136 = v135;
                              }
                              if (v259)
                              {
                                v140 = ((v136 >> 4) ^ (v136 >> 9)) & (v259 - 1);
                                v141 = v257[2 * v140];
                                if (v136 == v141)
                                {
LABEL_305:
                                  sub_1C4E7C77C((uint64_t)&v260, v243);
                                }
                                else
                                {
                                  v144 = 1;
                                  while (v141 != -4096)
                                  {
                                    v145 = v140 + v144++;
                                    v140 = v145 & (v259 - 1);
                                    v141 = v257[2 * v140];
                                    if (v136 == v141)
                                      goto LABEL_305;
                                  }
                                }
                              }
                            }
                            v133 += 32;
                          }
                          while (v133 != v134);
                          goto LABEL_316;
                        }
                        v133 = (char *)*((_QWORD *)v242 - 1);
                        v132 = v131 & 0x7FFFFFF;
                        if (v132)
                          goto LABEL_294;
                      }
LABEL_316:
                      if ((v230 & 1) == 0)
                        LOBYTE(v289) = 0;
                      v233 |= v231;
                      goto LABEL_319;
                    }
                  }
LABEL_286:
                  if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v242, 45) & 1) == 0)
                  {
                    v126 = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v127, 44) ^ 1;
                    goto LABEL_289;
                  }
                }
                v126 = 0;
                goto LABEL_289;
              }
LABEL_239:
              v91 = 0;
              v231 = v233;
              if ((v43 & 1) != 0)
                goto LABEL_226;
              goto LABEL_227;
            }
LABEL_220:
            LOBYTE(v78) = 0;
            v230 = 1;
            v231 = v233;
            goto LABEL_228;
          }
LABEL_151:
          if ((llvm::Instruction::mayThrow(v76) & 1) != 0 || (llvm::Instruction::willReturn(v76) & 1) == 0)
            goto LABEL_216;
          v83 = *((unsigned __int8 *)v76 + 16);
          if ((v83 - 29) < 0xB)
            goto LABEL_220;
          v84 = v83 - 59;
          if (v84 <= 0x23 && ((1 << v84) & 0x801000001) != 0)
            goto LABEL_220;
          v85 = *(_QWORD *)v76;
          if (*(_QWORD *)v76)
          {
            if ((*(_DWORD *)(v85 + 8) & 0xFE) == 0x12 && *(_DWORD *)(*(_QWORD *)(v85 + 24) + 8) == 269)
              goto LABEL_220;
          }
          if (*((_BYTE *)v76 + 16) == 84
            && (v86 = *((_QWORD *)v76 - 4)) != 0
            && !*(_BYTE *)(v86 + 16)
            && *(_QWORD *)(v86 + 24) == *((_QWORD *)v76 + 9))
          {
            v92 = *(_QWORD *)(v86 + 112);
            if (v92)
              LODWORD(v92) = *(_BYTE *)(v92 + 19) & 1;
            if (((v78 | v92) & 1) != 0)
              goto LABEL_164;
          }
          else if ((v78 & 1) != 0)
          {
LABEL_164:
            v78 = 0;
            goto LABEL_239;
          }
          v78 = 0;
          v93 = *(_DWORD *)(*((_QWORD *)v75 - 4) + 36);
          if ((v93 - 1281) >= 0x191)
          {
            v230 = 1;
            v94 = v93 - 1822;
            v231 = v233;
            v91 = 0;
            switch(v94)
            {
              case 0:
              case 200:
              case 201:
              case 202:
              case 203:
              case 204:
              case 205:
              case 206:
              case 208:
              case 209:
              case 210:
              case 211:
              case 213:
              case 214:
              case 215:
              case 216:
              case 217:
              case 218:
              case 219:
              case 220:
              case 221:
              case 222:
              case 224:
              case 225:
              case 226:
              case 227:
              case 229:
              case 230:
              case 231:
              case 232:
              case 233:
              case 234:
              case 235:
              case 236:
              case 237:
              case 238:
              case 240:
              case 241:
              case 242:
              case 243:
              case 245:
              case 246:
              case 247:
              case 248:
              case 249:
              case 250:
              case 251:
              case 252:
              case 253:
              case 254:
              case 256:
              case 257:
              case 258:
              case 259:
              case 261:
              case 262:
              case 263:
                goto LABEL_225;
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 10:
              case 11:
              case 12:
              case 13:
              case 14:
              case 15:
              case 16:
              case 25:
              case 26:
              case 27:
              case 28:
              case 29:
              case 30:
              case 31:
              case 32:
              case 33:
              case 34:
              case 35:
              case 36:
              case 37:
              case 38:
              case 39:
              case 40:
              case 41:
              case 42:
              case 43:
              case 44:
              case 45:
              case 46:
              case 47:
              case 48:
              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 55:
              case 56:
              case 57:
              case 58:
              case 59:
              case 60:
              case 61:
              case 62:
              case 88:
              case 89:
              case 90:
              case 91:
              case 92:
              case 93:
              case 94:
              case 95:
              case 96:
              case 97:
              case 98:
              case 99:
              case 100:
              case 101:
              case 102:
              case 103:
              case 104:
              case 129:
              case 130:
              case 131:
              case 132:
              case 133:
              case 134:
              case 135:
              case 136:
              case 137:
              case 138:
              case 139:
              case 140:
              case 141:
              case 142:
              case 143:
              case 144:
              case 145:
              case 146:
              case 147:
              case 148:
              case 149:
              case 150:
              case 151:
              case 152:
              case 153:
              case 154:
              case 155:
              case 156:
              case 157:
              case 158:
              case 159:
              case 160:
              case 161:
              case 162:
              case 163:
              case 164:
              case 165:
              case 166:
              case 167:
              case 170:
              case 171:
              case 172:
              case 173:
              case 174:
              case 175:
              case 181:
              case 183:
              case 185:
              case 186:
              case 187:
              case 188:
              case 189:
              case 190:
              case 191:
              case 192:
              case 193:
              case 194:
              case 195:
              case 196:
              case 197:
              case 198:
              case 199:
              case 207:
              case 212:
              case 223:
              case 228:
              case 239:
              case 244:
              case 255:
              case 260:
              case 264:
              case 265:
              case 266:
              case 267:
              case 268:
              case 269:
              case 270:
              case 271:
              case 272:
              case 273:
              case 274:
              case 275:
              case 276:
              case 277:
              case 278:
              case 279:
              case 280:
              case 281:
              case 282:
              case 283:
              case 284:
              case 285:
              case 286:
              case 287:
              case 288:
              case 289:
              case 290:
              case 291:
              case 292:
              case 309:
              case 310:
                goto LABEL_228;
              case 9:
              case 63:
              case 64:
              case 65:
              case 66:
              case 67:
              case 68:
              case 69:
              case 70:
              case 71:
              case 72:
              case 73:
              case 74:
              case 75:
              case 76:
              case 77:
              case 78:
              case 79:
              case 105:
              case 106:
              case 107:
              case 108:
              case 109:
              case 110:
              case 111:
              case 112:
              case 113:
              case 114:
              case 115:
              case 116:
              case 117:
              case 118:
              case 119:
              case 120:
              case 168:
              case 169:
              case 176:
              case 177:
              case 179:
              case 184:
              case 293:
              case 294:
              case 295:
              case 296:
              case 297:
              case 298:
              case 299:
              case 300:
              case 301:
              case 302:
              case 303:
              case 304:
              case 305:
              case 306:
              case 307:
              case 308:
              case 311:
                v78 = 0;
                v90 = v233;
                goto LABEL_203;
              case 17:
              case 18:
              case 19:
              case 20:
              case 21:
              case 22:
              case 23:
              case 24:
                if (v228 > 1)
                  goto LABEL_220;
                v95 = *((_QWORD *)v75 - 4 * (*((_DWORD *)v75 + 5) & 0x7FFFFFF));
                v96 = (_QWORD *)(v95 + 24);
                if (*(_DWORD *)(v95 + 32) >= 0x41u)
                  v96 = (_QWORD *)*v96;
                v78 = *(_DWORD *)v96 == 1;
                v231 = v233;
                break;
              case 80:
              case 81:
              case 82:
              case 83:
              case 84:
              case 85:
              case 86:
              case 87:
              case 121:
              case 122:
              case 123:
              case 124:
              case 125:
              case 126:
              case 127:
              case 128:
                v230 = 1;
                v231 = v233;
                LOBYTE(v78) = v228 < 2;
                goto LABEL_228;
              case 178:
              case 180:
              case 182:
                goto LABEL_185;
              default:
                v231 = v233;
                goto LABEL_228;
            }
          }
          else
          {
            v231 = v233;
          }
          v91 = v78;
          if ((v43 & 1) != 0)
            goto LABEL_226;
          goto LABEL_227;
        }
        v80 = *((_QWORD *)v242 - 4);
        if (!v80
          || *(_BYTE *)(v80 + 16)
          || *(_QWORD *)(v80 + 24) != *((_QWORD *)v242 + 9)
          || (*(_BYTE *)(v80 + 33) & 0x20) == 0)
        {
          v75 = 0;
LABEL_138:
          v81 = *((_QWORD *)v242 + 8);
          if (!v81 || (*(_BYTE *)(v81 + 17) & 0x30) == 0)
          {
            v82 = *((_DWORD *)v242 + 5);
            if (v82 < 0)
            {
              v97 = (char *)v242 - 32 * (v82 & 0x7FFFFFF);
              v100 = *((_QWORD *)v97 - 1);
              v98 = v97 - 8;
              v99 = v100;
              if (v100)
              {
                v101 = -v99;
                do
                {
                  v102 = *(_DWORD *)(*(_QWORD *)&v98[v101] + 8);
                  v103 = v102 > 7;
                  v104 = (1 << v102) & 0x83;
                  if (v103 || v104 == 0)
                    goto LABEL_216;
                  v101 += 16;
                }
                while (v101);
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v242, 45) & 1) == 0
              && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v76, 44))
            {
              goto LABEL_216;
            }
          }
          goto LABEL_151;
        }
        v78 = 0;
        v87 = *(_DWORD *)(v80 + 36);
        if (v87 <= 1995)
        {
          v231 = 1;
          if (v87 > 1993)
            goto LABEL_227;
          if ((v87 - 1992) < 2)
            goto LABEL_186;
          if (v87 != 1838)
          {
            v75 = v242;
            if (v87 != 1989)
              goto LABEL_138;
LABEL_186:
            v78 = 1;
            v90 = 1;
LABEL_203:
            v231 = v90;
          }
          v91 = v228 > 1;
          if ((v43 & 1) != 0)
            goto LABEL_226;
          goto LABEL_227;
        }
        if (v87 > 2011)
        {
          if (v87 != 2470 && v87 != 2447)
          {
            v75 = v242;
            if (v87 == 2012)
            {
LABEL_185:
              LOBYTE(v78) = 1;
              v231 = v233;
              goto LABEL_227;
            }
            goto LABEL_138;
          }
          goto LABEL_186;
        }
        if ((v87 - 1996) >= 2)
        {
          v231 = 1;
          v75 = v242;
          v91 = v228 > 1;
          if (v87 == 2011)
            goto LABEL_225;
          goto LABEL_138;
        }
        LOBYTE(v78) = 0;
        v88 = v228 > 1;
        if (v233)
          v88 = 1;
        if ((v43 & 1) == 0)
        {
          v231 = v233;
          v230 = 0;
          goto LABEL_228;
        }
        v231 = v233;
        v230 = 0;
        if (v88)
          goto LABEL_228;
        v89 = v285;
        if (v285 >= (unint64_t)HIDWORD(v285))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v284, (uint64_t)v286, v285 + 1, 8);
          v89 = v285;
        }
        v233 = 0;
        *((_QWORD *)v284 + v89) = v76;
        LODWORD(v285) = v285 + 1;
LABEL_319:
        v146 = (_QWORD *)*v232;
        if ((_QWORD *)*v232 == v232)
          continue;
        if (v146)
          v147 = v146 - 3;
        else
          v147 = 0;
        v148 = *((unsigned __int8 *)v147 + 16);
        v149 = v148 - 29;
        if (v148 == 30)
        {
          if ((*((_DWORD *)v147 + 5) & 0x7FFFFFF) == 3)
            v150 = 2;
          else
            v150 = 1;
        }
        else
        {
          v150 = 2;
          switch(v149)
          {
            case 1:
              __break(1u);
              goto LABEL_486;
            case 2:
              v150 = (*((_DWORD *)v147 + 5) >> 1) & 0x3FFFFFF;
              break;
            case 3:
            case 9:
              v150 = (*((_DWORD *)v147 + 5) & 0x7FFFFFF) - 1;
              break;
            case 4:
              goto LABEL_327;
            case 7:
              v150 = *((_WORD *)v147 + 9) & 1;
              break;
            case 8:
              v150 = 1;
              goto LABEL_327;
            case 10:
              v150 = *((_DWORD *)v147 + 20) + 1;
              break;
            default:
              continue;
          }
          if (!v150)
            continue;
        }
LABEL_327:
        v151 = 0;
        v152 = v150;
        do
        {
          v153 = *((unsigned __int8 *)v147 + 16);
          if (v153 != 30)
            __asm { BR              X9 }
          for (k = *(_QWORD *)(v147[-4 * v151 - 4] + 48); ; k = *(_QWORD *)(k + 8))
          {
            v155 = k - 24;
            v156 = k ? k - 24 : 0;
            if (!k || *(_BYTE *)(v156 + 16) != 83)
              break;
            v157 = *(_DWORD *)(k - 4);
            v158 = v157 & 0x7FFFFFF;
            if ((v157 & 0x7FFFFFF) != 0)
            {
              v159 = 0;
              while (1)
              {
                v160 = v155 - 32 * v158;
                if ((v157 & 0x40000000) != 0)
                  v160 = *(_QWORD *)(k - 32);
                if (*(_QWORD *)(v160 + 32 * *(unsigned int *)(k + 36) + 8 * v159) == v28)
                  break;
                if (v158 == ++v159)
                  goto LABEL_341;
              }
            }
            else
            {
LABEL_341:
              LODWORD(v159) = -1;
            }
            if ((v157 & 0x40000000) != 0)
              v161 = *(_QWORD *)(k - 32);
            else
              v161 = v155 - 32 * v158;
            v162 = *(_QWORD *)(v161 + 32 * v159);
            if (*(unsigned __int8 *)(v162 + 16) <= 0x1Bu)
              v163 = 0;
            else
              v163 = v162;
            v243[0] = v163;
            if (v163)
            {
              if (v248)
              {
                v164 = v248 - 1;
                v165 = (v248 - 1) & ((v163 >> 4) ^ (v163 >> 9));
                v166 = *(_QWORD *)(v247[0] + 16 * v165);
                if (v163 == v166)
                {
LABEL_350:
                  sub_1C4E7C77C((uint64_t)&v249, v243);
                  v163 = v243[0];
                }
                else
                {
                  v169 = 1;
                  while (v166 != -4096)
                  {
                    v170 = v165 + v169++;
                    v165 = v170 & v164;
                    v166 = *(_QWORD *)(v247[0] + 16 * (v170 & v164));
                    if (v163 == v166)
                      goto LABEL_350;
                  }
                }
              }
              else
              {
                v163 = v162;
              }
              if (v259)
              {
                v167 = ((v163 >> 4) ^ (v163 >> 9)) & (v259 - 1);
                v168 = v257[2 * v167];
                if (v163 == v168)
                {
LABEL_354:
                  sub_1C4E7C77C((uint64_t)&v260, v243);
                }
                else
                {
                  v171 = 1;
                  while (v168 != -4096)
                  {
                    v172 = v167 + v171++;
                    v167 = v172 & (v259 - 1);
                    v168 = v257[2 * v167];
                    if (v163 == v168)
                      goto LABEL_354;
                  }
                }
              }
            }
          }
          ++v151;
        }
        while (v151 != v152);
      }
      v27 = v227;
    }
    while (v227 != v226);
  }
  v181 = (uint64_t *)v284;
  if ((_BYTE)v289)
  {
    if ((_DWORD)v285)
    {
      v199 = 8 * v285;
      do
      {
        sub_1C5658018((int32x2_t *)&v246, *v181);
        v200 = *v181++;
        v244 = (llvm::CastInst *)v200;
        v245 = 0;
        sub_1C6282328((uint64_t)v243, (uint64_t)v247, &v244, &v245);
        v199 -= 8;
      }
      while (v199);
    }
  }
  else if ((_DWORD)v285)
  {
    v182 = (uint64_t *)((char *)v284 + 8 * v285);
    do
    {
      v183 = *v181;
      v184 = *(_DWORD *)(*v181 + 20);
      if ((v184 & 0x40000000) != 0)
      {
        v186 = *(uint64_t **)(v183 - 8);
        v185 = v184 & 0x7FFFFFF;
      }
      else
      {
        v185 = v184 & 0x7FFFFFF;
        v186 = (uint64_t *)(v183 - 32 * v185);
      }
      v187 = &v186[4 * v185];
      if (v185)
      {
        do
        {
          v243[0] = 0;
          v188 = *v186;
          if (*(unsigned __int8 *)(*v186 + 16) <= 0x1Bu)
            v189 = 0;
          else
            v189 = *v186;
          v243[0] = v189;
          if (v189)
          {
            if (v248)
            {
              v190 = v248 - 1;
              v191 = (v248 - 1) & ((v189 >> 4) ^ (v189 >> 9));
              v192 = *(_QWORD *)(v247[0] + 16 * v191);
              if (v189 == v192)
              {
LABEL_400:
                sub_1C4E7C77C((uint64_t)&v249, v243);
                v189 = v243[0];
              }
              else
              {
                v195 = 1;
                while (v192 != -4096)
                {
                  v196 = v191 + v195++;
                  v191 = v196 & v190;
                  v192 = *(_QWORD *)(v247[0] + 16 * (v196 & v190));
                  if (v189 == v192)
                    goto LABEL_400;
                }
              }
            }
            else
            {
              v189 = v188;
            }
            if (v259)
            {
              v193 = ((v189 >> 4) ^ (v189 >> 9)) & (v259 - 1);
              v194 = v257[2 * v193];
              if (v189 == v194)
              {
LABEL_404:
                sub_1C4E7C77C((uint64_t)&v260, v243);
              }
              else
              {
                v197 = 1;
                while (v194 != -4096)
                {
                  v198 = v193 + v197++;
                  v193 = v198 & (v259 - 1);
                  v194 = v257[2 * v193];
                  if (v189 == v194)
                    goto LABEL_404;
                }
              }
            }
          }
          v186 += 4;
        }
        while (v186 != v187);
      }
      ++v181;
    }
    while (v181 != v182);
  }
  if ((_DWORD)v282)
  {
    v201 = (char *)v281;
    v202 = (char *)v281 + 8 * v282;
    do
    {
      v203 = *(_QWORD *)v201;
      v204 = *(_DWORD *)(*(_QWORD *)v201 + 20);
      if ((v204 & 0x40000000) != 0)
      {
        v206 = *(uint64_t **)(v203 - 8);
        v205 = v204 & 0x7FFFFFF;
        if (v205)
        {
LABEL_426:
          v207 = 32 * v205;
          do
          {
            v243[0] = 0;
            v208 = *v206;
            if (*(unsigned __int8 *)(*v206 + 16) <= 0x1Bu)
              v208 = 0;
            v243[0] = v208;
            if (v208)
              sub_1C4E7C77C((uint64_t)&v249, v243);
            v206 += 4;
            v207 -= 32;
          }
          while (v207);
        }
      }
      else
      {
        v205 = v204 & 0x7FFFFFF;
        v206 = (uint64_t *)(v203 - 32 * v205);
        if (v205)
          goto LABEL_426;
      }
      v201 += 8;
    }
    while (v201 != v202);
  }
  v209 = &v257[2 * v259];
  if ((_DWORD)v258)
  {
    if (v259)
    {
      v211 = 16 * v259;
      v210 = v257;
      while ((*v210 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v210 += 2;
        v211 -= 16;
        if (!v211)
          goto LABEL_439;
      }
    }
    else
    {
      v210 = v257;
    }
  }
  else
  {
LABEL_439:
    v210 = &v257[2 * v259];
  }
  v212 = &v257[2 * v259];
LABEL_441:
  while (v210 != v212)
  {
    v213 = *v210;
    v287 |= *((_BYTE *)v210 + 8);
    v214 = *(_DWORD *)(v213 + 20);
    if ((v214 & 0x40000000) != 0)
    {
      v216 = *(uint64_t **)(v213 - 8);
      v215 = v214 & 0x7FFFFFF;
    }
    else
    {
      v215 = v214 & 0x7FFFFFF;
      v216 = (uint64_t *)(v213 - 32 * v215);
    }
    v217 = &v216[4 * v215];
    if (v215)
    {
      while (1)
      {
        v243[0] = 0;
        v218 = *v216;
        if (*(unsigned __int8 *)(*v216 + 16) <= 0x1Bu)
          v218 = 0;
        v243[0] = v218;
        if (!v218)
          goto LABEL_456;
        if (!v259)
          goto LABEL_455;
        v219 = (v259 - 1) & ((v218 >> 4) ^ (v218 >> 9));
        v220 = v257[2 * v219];
        if (v218 != v220)
          break;
LABEL_456:
        v216 += 4;
        if (v216 == v217)
          goto LABEL_457;
      }
      v221 = 1;
      while (v220 != -4096)
      {
        v222 = v219 + v221++;
        v219 = v222 & (v259 - 1);
        v220 = v257[2 * v219];
        if (v218 == v220)
          goto LABEL_456;
      }
LABEL_455:
      sub_1C4E7C77C((uint64_t)&v249, v243);
      goto LABEL_456;
    }
LABEL_457:
    v223 = v210 + 2;
    v210 = v209;
    if (v223 != v209)
    {
      v210 = v223;
      while ((*v210 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v210 += 2;
        if (v210 == v209)
        {
          v210 = v209;
          goto LABEL_441;
        }
      }
    }
  }
  sub_1C61446F0((unsigned int *)&v257);
  sub_1C5654398((uint64_t)&v246, v241, a3, v228 < 2, v224);
  if (SHIBYTE(v292) < 0)
    operator delete((void *)__p);
  if (v284 != v286)
    free(v284);
  if (v281 != v283)
    free(v281);
  if ((v276 & 1) == 0)
LABEL_486:
    MEMORY[0x1CAA32FB4](v277.i64[0], 8);
  if (v273 != v275)
    free(v273);
  if ((v268 & 1) == 0)
    MEMORY[0x1CAA32FB4](v269.i64[0], 8);
  if (v265 != v267)
    free(v265);
  if ((v260 & 1) == 0)
    MEMORY[0x1CAA32FB4](v261.i64[0], 8);
  MEMORY[0x1CAA32FB4](v257, 8);
  if (v254 != v256)
    free(v254);
  if ((v249 & 1) == 0)
    MEMORY[0x1CAA32FB4](v250.i64[0], 8);
  MEMORY[0x1CAA32FB4](v247[0], 8);
  if (v234)
  {
    v235 = v234;
    operator delete(v234);
  }
  if (SHIBYTE(v238) < 0)
    operator delete(v237[0]);
}

void sub_1C5654398(uint64_t a1, uint64_t a2, uint64_t a3, int a4, llvm::SmallPtrSetImplBase *a5)
{
  uint64_t ***v7;
  llvm::ConstantInt *v8;
  _DWORD *v9;
  uint64_t v11;
  unsigned int v12;
  uint64_t **v13;
  uint64_t v14;
  llvm::Type *v15;
  const char *v16;
  int PrimitiveSizeInBits;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t **v35;
  uint64_t **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  llvm::PointerType *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t ****v50;
  uint64_t ***v51;
  int v52;
  int v53;
  uint64_t ***v54;
  char *v55;
  uint64_t **v56;
  uint64_t **v57;
  const char *v58;
  __int16 v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  llvm::PointerType *v68;
  _DWORD *v69;
  llvm::Value *v70;
  int v71;
  uint64_t v72;
  _QWORD *v73;
  llvm::UndefValue *v74;
  llvm::Type *v75;
  __int16 v76;
  __int16 v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  _QWORD *v81;
  _BYTE **v82;
  uint64_t v83;
  _BYTE *v84;
  llvm::LLVMContext *v85;
  uint64_t ***v86;
  llvm::LLVMContext **v87;
  llvm::LLVMContext **v88;
  llvm::LLVMContext *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t **v92;
  uint64_t **v93;
  uint64_t *v94;
  int v95;
  void **v96;
  int v97;
  unsigned int v98;
  uint64_t *v99;
  int v100;
  unsigned int v101;
  uint64_t v102;
  llvm::PointerType *v103;
  llvm::PointerType *v104;
  _DWORD *v105;
  llvm::Value *v106;
  llvm::Value *v107;
  llvm::Value *v108;
  llvm::Value *v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  unsigned int v114;
  llvm::Value **v115;
  llvm::Value *v116;
  uint64_t v117;
  _DWORD *v118;
  uint64_t Inst;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  _DWORD *v129;
  llvm::Instruction *v130;
  llvm::Instruction *v131;
  llvm::Value **v132;
  int v133;
  BOOL v134;
  unsigned int v135;
  llvm::Value **v136;
  llvm::Value *v137;
  llvm::Instruction *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t n;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  int v148;
  void **v149;
  int v150;
  unsigned int v151;
  void *v152;
  int v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t *v162;
  uint64_t v163;
  int32x2_t *v164;
  unint64_t v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  int v171;
  int v172;
  unint64_t v174;
  unint64_t *v175;
  uint64_t v176;
  int32x2_t *v177;
  unint64_t v178;
  uint64_t v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  int v184;
  int v185;
  llvm::Function *v186;
  char *v187;
  llvm::BasicBlock *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  llvm::ValueHandleBase *v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD *v202;
  unint64_t v204;
  _BYTE *v205;
  int32x2_t *v206;
  unint64_t v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  void **v211;
  void *v212;
  int v213;
  int v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  char *v220;
  llvm::Instruction *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t i;
  uint64_t v226;
  unsigned int v227;
  BOOL v228;
  uint64_t v229;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  _DWORD *v237;
  int v238;
  _DWORD *v239;
  _QWORD *v240;
  unint64_t v241;
  _BYTE *v242;
  int32x2_t *v243;
  unint64_t v244;
  uint64_t v245;
  unsigned int v246;
  uint64_t v247;
  void **v248;
  void *v249;
  int v250;
  int v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t Declaration;
  uint64_t v261;
  llvm::ConstantInt *v262;
  _DWORD *v263;
  uint64_t v264;
  uint64_t **v265;
  char *v266;
  llvm::Instruction *v267;
  uint64_t **v268;
  _DWORD *v269;
  uint64_t v270;
  llvm::Function *v271;
  llvm::LLVMContext *v272;
  _BOOL8 v273;
  size_t v274;
  llvm::ReturnInst *v275;
  llvm::ReturnInst *v276;
  llvm::Instruction *v277;
  llvm::Instruction *v278;
  _BYTE *v279;
  double v280;
  uint64_t v281;
  llvm::Function *v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  uint64_t v286;
  uint64_t ***v287;
  uint64_t **v288;
  unsigned int v289;
  uint64_t v290;
  uint64_t *v291;
  uint64_t **v292;
  uint64_t *v293;
  _QWORD *v294;
  uint64_t v295;
  unsigned int v296;
  uint64_t *v297;
  _QWORD *v298;
  uint64_t v299;
  unsigned int v300;
  uint64_t *v301;
  _QWORD *v302;
  uint64_t v303;
  unsigned int v304;
  uint64_t *v305;
  uint64_t *v306;
  uint64_t **v307;
  uint64_t v308;
  uint64_t **v309;
  llvm::Value *v310;
  _DWORD *v311;
  _DWORD *v312;
  uint64_t v313;
  llvm::Value *v314;
  _QWORD *v315;
  uint64_t v316;
  uint64_t v317;
  unsigned __int8 **v318;
  int v319;
  unsigned __int8 *v320;
  unsigned __int8 *v321;
  unsigned __int8 *v322;
  uint64_t **v323;
  char *v324;
  char *v325;
  llvm::Value *v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  uint64_t v330;
  unsigned __int8 **v331;
  int v332;
  unsigned __int8 *v333;
  unsigned __int8 *v334;
  unsigned __int8 *v335;
  uint64_t **v336;
  uint64_t **v337;
  uint64_t v338;
  llvm::Value *v339;
  _DWORD *v340;
  _DWORD *v341;
  uint64_t v342;
  llvm::Value *v343;
  _QWORD *v344;
  uint64_t v345;
  uint64_t v346;
  unsigned __int8 **v347;
  int v348;
  unsigned __int8 *v349;
  unsigned __int8 *v350;
  unsigned __int8 *v351;
  uint64_t **v352;
  char *v353;
  char *v354;
  llvm::Value *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unsigned __int8 **v359;
  int v360;
  unsigned __int8 *v361;
  unsigned __int8 *v362;
  unsigned __int8 *v363;
  _QWORD *v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  unint64_t *v369;
  uint64_t v370;
  int32x2_t *v371;
  unint64_t v372;
  uint64_t v373;
  unsigned int v374;
  uint64_t v375;
  uint64_t *v376;
  uint64_t v377;
  int v378;
  int v379;
  unint64_t v381;
  unint64_t *v382;
  uint64_t v383;
  int32x2_t *v384;
  unint64_t v385;
  uint64_t v386;
  unsigned int v387;
  uint64_t v388;
  uint64_t *v389;
  uint64_t v390;
  int v391;
  int v392;
  uint64_t v393;
  uint64_t v394;
  unsigned int *v395;
  uint64_t v396;
  uint64_t j;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  _QWORD *v403;
  unint64_t v404;
  uint64_t v405;
  int32x2_t *v406;
  unint64_t v407;
  uint64_t v408;
  unsigned int v409;
  uint64_t v410;
  uint64_t *v411;
  uint64_t v412;
  int v413;
  int v414;
  uint64_t v415;
  int v416;
  uint64_t v417;
  unsigned int v418;
  unsigned int v419;
  uint64_t v420;
  unsigned int v422;
  int v423;
  char *v425;
  unsigned __int8 *v426;
  llvm::Instruction *v427;
  uint64_t v428;
  void *v429;
  llvm::BasicBlock *v430;
  llvm::BasicBlock *v431;
  uint64_t v432;
  _QWORD *v433;
  uint64_t v434;
  unsigned int v435;
  _QWORD *v436;
  llvm::BasicBlock *v437;
  uint64_t v438;
  _QWORD *v439;
  uint64_t v440;
  unsigned int v441;
  uint64_t v442;
  _QWORD *v443;
  uint64_t v444;
  unsigned int v445;
  uint64_t v446;
  uint64_t ***v447;
  _QWORD *k;
  _QWORD *v449;
  _QWORD *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t *v453;
  _QWORD *m;
  _QWORD *v455;
  _QWORD *v456;
  uint64_t v457;
  uint64_t v458;
  llvm::UndefValue **v459;
  llvm::Value *v460;
  llvm::Type *v461;
  llvm::UndefValue *v462;
  char *v463;
  char *v464;
  _QWORD *v465;
  int v466;
  _QWORD *v467;
  int v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  _QWORD *v472;
  uint64_t v473;
  _QWORD **v474;
  _QWORD *v475;
  _QWORD *v476;
  char *v477;
  unsigned __int8 *v478;
  llvm::Instruction *v479;
  uint64_t **v480;
  uint64_t **v481;
  _QWORD *v482;
  llvm::Instruction *v483;
  unsigned __int8 *v484;
  _QWORD *v485;
  _QWORD *v486;
  uint64_t v487;
  uint64_t **v488;
  uint64_t v489;
  const llvm::APInt *v490;
  llvm::ConstantInt *v491;
  unsigned int v492;
  char v493;
  llvm::ValueHandleBase *v494;
  const llvm::APInt *v495;
  uint64_t v496;
  llvm::ConstantInt *v497;
  llvm::ValueHandleBase *v498;
  llvm::Value *v499;
  _DWORD *v500;
  _DWORD *v501;
  uint64_t v502;
  llvm::Value *v503;
  _QWORD *v504;
  char *v505;
  char *v506;
  llvm::Value *v507;
  _QWORD *v508;
  uint64_t v509;
  _QWORD *v510;
  llvm::Instruction *v511;
  char *v512;
  char *v513;
  unsigned __int8 **v514;
  int v515;
  unsigned __int8 *v516;
  unsigned __int8 *v517;
  unsigned __int8 *v518;
  char *v519;
  char *v520;
  unsigned __int8 **v521;
  int v522;
  unsigned __int8 *v523;
  unsigned __int8 *v524;
  unsigned __int8 *v525;
  unsigned __int8 *v526;
  const llvm::APInt *v527;
  llvm::ConstantInt *v528;
  unsigned int v529;
  char v530;
  llvm::ValueHandleBase *v531;
  const llvm::APInt *v532;
  uint64_t v533;
  llvm::ConstantInt *v534;
  llvm::ValueHandleBase *v535;
  llvm::Value *v536;
  _DWORD *v537;
  _DWORD *v538;
  uint64_t v539;
  llvm::Value *v540;
  _QWORD *v541;
  uint64_t v542;
  llvm::Instruction *v543;
  void *v544;
  int v545;
  uint64_t v546;
  void *v547;
  int v548;
  uint64_t v549;
  char *v550;
  char *v551;
  unsigned __int8 **v552;
  int v553;
  unsigned __int8 *v554;
  unsigned __int8 *v555;
  unsigned __int8 *v556;
  _QWORD *v557;
  char *v558;
  char *v559;
  int64x2_t v560;
  uint64_t v561;
  llvm::BasicBlock *v562;
  llvm::BasicBlock *v563;
  llvm::BasicBlock *v564;
  llvm::BasicBlock *v565;
  llvm::Value *v566;
  uint64_t **v567;
  llvm::BasicBlock *v568;
  llvm::BasicBlock *v569;
  uint64_t v570;
  uint64_t **v571;
  char *v572;
  uint64_t v573;
  _DWORD *v574;
  _BYTE *v575;
  _BYTE *v576;
  _BYTE *v577;
  int v578;
  llvm::Function *v579;
  llvm::Function *v580;
  uint64_t v581;
  llvm::LLVMContext ***v582;
  uint64_t v583;
  uint64_t **v584;
  llvm::ValueHandleBase *v585;
  llvm::ValueHandleBase *v586;
  llvm::ValueHandleBase *v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  unsigned int *v591;
  _DWORD *v592;
  uint64_t ***v593;
  uint64_t **v594;
  llvm::PHINode *v595;
  llvm::PHINode *v596;
  llvm::PHINode *v597;
  llvm::UndefValue *v598;
  llvm::Type **v599;
  llvm::UndefValue *v600[2];
  uint64_t v601;
  llvm::ConstantInt *v602;
  llvm::ConstantInt *v603;
  void *__p[2];
  uint64_t v605;
  __int128 v606;
  uint64_t v607;
  _QWORD v608[2];
  unsigned int v609;
  uint64_t v610[3];
  char v611;
  llvm::Instruction *v612;
  unsigned __int8 *v613;
  _BYTE v614[40];
  __int128 v615;
  __int128 v616;
  void *v617;
  uint64_t v618;
  uint64_t v619;
  int v620;
  __int16 v621;
  char v622;
  uint64_t v623;
  uint64_t v624;
  void *v625;
  void *v626;
  void *v627;
  uint64_t v628;
  _BYTE v629[256];
  uint64_t v630;
  int64x2_t v631;
  int64x2_t v632;
  void *v633;
  uint64_t v634;
  _BYTE v635[32];
  void *v636;
  uint64_t v637;
  uint64_t v638;
  __int16 v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  void *v644;
  uint64_t v645;
  unsigned int v646;
  uint64_t v647;
  __int16 v648;
  char v649;
  void *v650[5];
  __int128 __dst;
  __int128 v652;
  void *v653;
  uint64_t v654;
  _BYTE v655[240];
  void *v656;
  uint64_t v657;
  _BYTE v658[256];
  uint64_t v659;
  int64x2_t v660;
  int64x2_t v661;
  void *v662;
  uint64_t v663;
  _BYTE v664[40];
  void *v665[2];
  _BYTE v666[16];
  uint64_t *v667;
  uint64_t v668;
  _QWORD v669[7];

  v7 = (uint64_t ***)a2;
  v8 = (llvm::ConstantInt *)a1;
  v669[4] = *MEMORY[0x1E0C80C00];
  if (!a4)
  {
    v9 = (_DWORD *)(a1 + 16);
    if (!*(_DWORD *)(a1 + 16))
      return;
    v581 = a3;
    v578 = 0;
    v18 = (uint64_t *)(a1 + 8);
    v585 = *(llvm::ValueHandleBase **)(a2 + 40);
    v571 = (uint64_t **)(a2 + 40);
    goto LABEL_42;
  }
  v581 = a3;
  v11 = *(unsigned int *)(a1 + 112);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = *(uint64_t ***)(a1 + 104);
    v14 = 8 * v11;
    while (1)
    {
      sub_1C5658314(**v13, *((_DWORD *)v8 + 186));
      if (!v15)
        break;
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v15);
      if ((_DWORD)v16 == 1)
      v12 += (PrimitiveSizeInBits + 31) & 0xFFFFFFE0;
      if (v12 >= 0x620)
        break;
      ++v13;
      v14 -= 8;
      if (!v14)
        goto LABEL_29;
    }
    sub_1C61F8CBC((_QWORD *)v8 + 4);
    v19 = *((_QWORD *)v8 + 1);
    *((_DWORD *)v8 + 28) = 0;
    v20 = *((unsigned int *)v8 + 6);
    v21 = v19 + 16 * v20;
    if (*((_DWORD *)v8 + 4))
    {
      if ((_DWORD)v20)
      {
        v23 = 16 * v20;
        v22 = v19;
        while ((*(_QWORD *)v22 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v22 += 16;
          v23 -= 16;
          if (!v23)
            goto LABEL_19;
        }
      }
      else
      {
        v22 = v19;
      }
    }
    else
    {
LABEL_19:
      v22 = v19 + 16 * v20;
    }
    v24 = v19 + 16 * v20;
    if (v22 != v24)
    {
      v25 = *((unsigned __int8 *)v8 + 712);
      do
      {
        v25 |= *(_BYTE *)(v22 + 8) & 1;
        *((_BYTE *)v8 + 712) = v25;
        v26 = v22 + 16;
        v22 = v21;
        if (v26 != v21)
        {
          v22 = v26;
          while ((*(_QWORD *)v22 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v22 += 16;
            if (v22 == v21)
            {
              v22 = v21;
              break;
            }
          }
        }
      }
      while (v22 != v24);
    }
    sub_1C61446F0((unsigned int *)v8 + 2);
  }
LABEL_29:
  v9 = (_DWORD *)((char *)v8 + 16);
  v7 = (uint64_t ***)a2;
  v585 = *(llvm::ValueHandleBase **)(a2 + 40);
  v571 = (uint64_t **)(a2 + 40);
  v27 = 2;
  v28 = a2 + 72;
  do
  {
    v28 = *(_QWORD *)(v28 + 8);
    --v27;
  }
  while (v28 != a2 + 72);
  v18 = (uint64_t *)((char *)v8 + 8);
  if (v27)
    goto LABEL_39;
  v29 = *(_QWORD *)(a2 + 80);
  v30 = v29 ? v29 - 24 : 0;
  v31 = v30 + 40;
  v32 = *((unsigned int *)v8 + 4) + 2;
  v33 = v31;
  do
  {
    v33 = *(_QWORD *)(v33 + 8);
    --v32;
  }
  while (v33 != v31);
  if (v32)
  {
LABEL_39:
    v578 = 0;
  }
  else
  {
    *((_BYTE *)v8 + 713) = 0;
    v578 = 1;
  }
  v34 = *((unsigned int *)v8 + 28);
  if ((_DWORD)v34)
  {
    v574 = (_DWORD *)((char *)v8 + 16);
    v650[0] = &v650[2];
    v650[1] = (void *)0x400000000;
    v36 = (uint64_t **)*((_QWORD *)v8 + 13);
    v37 = 8 * v34;
    do
    {
      sub_1C5658314(**v36, *((_DWORD *)v8 + 186));
      v39 = v38;
      v40 = LODWORD(v650[1]);
      if (LODWORD(v650[1]) >= (unint64_t)HIDWORD(v650[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v650, (uint64_t)&v650[2], LODWORD(v650[1]) + 1, 8);
        v40 = LODWORD(v650[1]);
      }
      *((_QWORD *)v650[0] + v40) = v39;
      v41 = ++LODWORD(v650[1]);
      ++v36;
      v37 -= 8;
    }
    while (v37);
    v7 = (uint64_t ***)a2;
    if (!*((_BYTE *)v8 + 713))
      goto LABEL_55;
  }
  else
  {
    if (!*((_BYTE *)v8 + 713))
    {
LABEL_42:
      v574 = v9;
      v35 = (uint64_t **)(***v7 + 1576);
      goto LABEL_57;
    }
    v574 = (_DWORD *)((char *)v8 + 16);
    v41 = 0;
    v650[0] = &v650[2];
    v650[1] = (void *)0x400000000;
  }
  v42 = ***v7 + 1960;
  if (v41 >= HIDWORD(v650[1]))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v650, (uint64_t)&v650[2], v41 + 1, 8);
    v41 = v650[1];
  }
  *((_QWORD *)v650[0] + v41) = v42;
  v43 = (LODWORD(v650[1]) + 1);
  LODWORD(v650[1]) = v43;
  v44 = ***v7 + 1960;
  if (v43 >= HIDWORD(v650[1]))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v650, (uint64_t)&v650[2], v43 + 1, 8);
    LODWORD(v43) = v650[1];
  }
  *((_QWORD *)v650[0] + v43) = v44;
  v41 = ++LODWORD(v650[1]);
  *((_BYTE *)v8 + 712) = 1;
LABEL_55:
  v35 = (uint64_t **)llvm::StructType::get(**v7, (uint64_t)v650[0], v41, 0);
  if (v650[0] != &v650[2])
    free(v650[0]);
LABEL_57:
  v45 = (llvm::PointerType *)llvm::FunctionType::get(v35, 0, 0, 0);
  v598 = (llvm::UndefValue *)v35;
  if ((*((_BYTE *)v7 + 23) & 0x10) != 0)
  {
    v46 = ***v7;
    v47 = *(_QWORD *)(v46 + 152);
    v48 = *(unsigned int *)(v46 + 168);
    if ((_DWORD)v48)
    {
      LODWORD(v49) = (v48 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v50 = (uint64_t ****)(v47 + 16 * v49);
      v51 = *v50;
      if (*v50 == v7)
      {
LABEL_65:
        v54 = v50[1];
        v57 = *v54;
        v55 = (char *)(v54 + 2);
        v56 = v57;
        goto LABEL_66;
      }
      v52 = 1;
      while (v51 != (uint64_t ***)-4096)
      {
        v53 = v49 + v52++;
        v49 = v53 & (v48 - 1);
        v51 = *(uint64_t ****)(v47 + 16 * v49);
        if (v51 == v7)
        {
          v50 = (uint64_t ****)(v47 + 16 * v49);
          goto LABEL_65;
        }
      }
    }
    v50 = (uint64_t ****)(v47 + 16 * v48);
    goto LABEL_65;
  }
  v56 = 0;
  v55 = &byte_1C871356D;
LABEL_66:
  v58 = ".thread_invariants";
  LOWORD(v650[4]) = 773;
  if (a4)
    v58 = ".sample_invariants";
  v650[0] = v55;
  v650[1] = v56;
  v650[2] = (void *)v58;
  if (a4)
    v59 = 1680;
  else
    v59 = 1600;
  v60 = (char *)operator new(0x80uLL);
  *((_DWORD *)v60 + 7) = *((_DWORD *)v60 + 7) & 0x38000000 | 0x40000000;
  *(_QWORD *)v60 = 0;
  v579 = (llvm::Function *)(v60 + 8);
  llvm::Function::Function((uint64_t *)v60 + 1, v45, 0, (llvm::Type *)0xFFFFFFFFLL, (uint64_t)v650, (uint64_t)v585);
  *((_WORD *)v60 + 13) = *((_WORD *)v60 + 13) & 0xC00F | v59;
  v61 = **v7;
  v650[0] = "entry";
  LOWORD(v650[4]) = 259;
  v62 = operator new();
  *(_QWORD *)v62 = *v61 + 1600;
  *(_QWORD *)(v62 + 8) = 0;
  v63 = *(_DWORD *)(v62 + 20) & 0xC0000000;
  *(_DWORD *)(v62 + 16) = 22;
  *(_DWORD *)(v62 + 20) = v63;
  *(_QWORD *)(v62 + 24) = 0;
  *(_QWORD *)(v62 + 32) = 0;
  *(_QWORD *)(v62 + 40) = v62 + 40;
  v588 = v62 + 40;
  *(_QWORD *)(v62 + 48) = v62 + 40;
  *(_QWORD *)(v62 + 56) = 0;
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v60 + 80), (_QWORD *)v62);
  v64 = *((_QWORD *)v60 + 10);
  v570 = (uint64_t)(v60 + 80);
  *(_QWORD *)(v62 + 32) = v60 + 80;
  *(_QWORD *)(v62 + 24) = v64;
  *(_QWORD *)(v64 + 8) = v62 + 24;
  v572 = v60;
  *((_QWORD *)v60 + 10) = v62 + 24;
  v594 = (uint64_t **)v62;
  llvm::Value::setName((uint64_t ***)v62, (uint64_t)v650);
  v612 = 0;
  v602 = v8;
  v582 = (llvm::LLVMContext ***)v7;
  if ((a4 & 1) != 0)
  {
    v667 = v669;
    v668 = 0x400000000;
    v65 = *((unsigned int *)v8 + 28);
    if ((_DWORD)v65)
    {
      v189 = 0;
      v190 = 8 * v65;
      do
      {
        sub_1C5658314(**(_QWORD **)(*((_QWORD *)v8 + 13) + v189), *((_DWORD *)v8 + 186));
        v192 = v191;
        v65 = v668;
        if (v668 >= (unint64_t)HIDWORD(v668))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v667, (uint64_t)v669, v668 + 1, 8);
          v65 = v668;
        }
        v667[v65] = v192;
        LODWORD(v65) = v668 + 1;
        LODWORD(v668) = v668 + 1;
        v189 += 8;
      }
      while (v190 != v189);
    }
    if (*((_BYTE *)v8 + 713))
    {
      v66 = ***v7 + 1960;
      if (v65 >= HIDWORD(v668))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v667, (uint64_t)v669, v65 + 1, 8);
        LODWORD(v65) = v668;
      }
      v667[v65] = v66;
      v65 = (v668 + 1);
      LODWORD(v668) = v65;
      v67 = ***v7 + 1960;
      if (v65 >= HIDWORD(v668))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v667, (uint64_t)v669, v65 + 1, 8);
        LODWORD(v65) = v668;
      }
      v667[v65] = v67;
      LODWORD(v65) = v668 + 1;
      LODWORD(v668) = v668 + 1;
    }
    v68 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)*v7[3][2], v667, v65, 0);
    LOWORD(v650[4]) = 257;
    v69 = operator new(0x80uLL);
    v70 = (llvm::Value *)(v69 + 2);
    v69[7] = v69[7] & 0x38000000 | 0x40000000;
    v592 = v69;
    *(_QWORD *)v69 = 0;
    llvm::Function::Function((uint64_t *)v69 + 1, v68, 0, (llvm::Type *)0xFFFFFFFFLL, (uint64_t)v650, (uint64_t)v585);
    sub_1C4774094(a5, (uint64_t)v70);
    v71 = *((unsigned __int8 *)v8 + 712);
    llvm::Value::takeName(v70, (llvm::Value *)v7);
    v609 = 128;
    v608[0] = operator new(0x2000uLL, (std::align_val_t)8uLL);
    v608[1] = 0;
    v72 = 0x2000;
    v73 = (_QWORD *)(v608[0] + 16);
    do
    {
      *v73 = 0;
      v73[1] = -4096;
      *(v73 - 2) = &unk_1E814DA10;
      *(v73 - 1) = 2;
      v73[2] = 0;
      v73 += 8;
      v72 -= 64;
    }
    while (v72);
    LOBYTE(v610[0]) = 0;
    v611 = 0;
    v665[0] = v666;
    v665[1] = (void *)0x200000000;
    llvm::CloneFunctionInto((uint64_t)v70, (const llvm::Function *)v7, (uint64_t)v608, 0, (uint64_t)v665, "", 0, 0, 0);
    v74 = v70;
    if (*(uint64_t ***)v70 != *v7)
      v74 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v70, (llvm::Constant *)*v7, 0);
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v7, v74, (llvm::Value *)1);
    if (v71)
      v76 = 1664;
    else
      v76 = 1648;
    v77 = *((_WORD *)v592 + 13) & 0xC00F | v76;
    *((_WORD *)v592 + 13) = v77;
    if (*((_BYTE *)v8 + 713) || *((_DWORD *)v8 + 28))
    {
      v599 = (llvm::Type **)llvm::UndefValue::get(v598, v75);
      v77 = *((_WORD *)v592 + 13);
    }
    else
    {
      v599 = 0;
    }
    if ((v77 & 1) != 0)
      llvm::Function::BuildLazyArguments(v70);
    v580 = v70;
    v586 = (llvm::ValueHandleBase *)*((unsigned int *)v8 + 28);
    if ((_DWORD)v586)
    {
      v198 = 0;
      v199 = *((_QWORD *)v592 + 12);
      do
      {
        v200 = *(_QWORD **)(*((_QWORD *)v8 + 13) + 8 * (_QWORD)v198);
        v650[1] = (void *)2;
        v650[2] = 0;
        v650[3] = v200;
        if (v200 != (_QWORD *)-8192 && v200 != (_QWORD *)-4096 && v200 != 0)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v650[1]);
        v650[0] = &unk_1E814DA10;
        v650[4] = v608;
        v202 = sub_1C52E2ED8((uint64_t)v608, v650);
        if (v650[3] != (void *)-8192 && v650[3] != (void *)-4096 && v650[3] != 0)
        {
          v204 = (unint64_t)v650[1] & 0xFFFFFFFFFFFFFFF8;
          *(void **)((unint64_t)v650[1] & 0xFFFFFFFFFFFFFFF8) = v650[2];
          if (v650[2])
          {
            *(_QWORD *)v650[2] = *(_QWORD *)v650[2] & 7 | v204;
          }
          else
          {
            v205 = v650[3];
            v206 = ***(int32x2_t ****)v650[3];
            v207 = (unint64_t)v206[303];
            if (v207 <= v204)
            {
              v208 = v206[305].u32[0];
              if (v207 + 16 * v208 > v204)
              {
                v209 = v208 - 1;
                LODWORD(v210) = v209 & ((LODWORD(v650[3]) >> 4) ^ (LODWORD(v650[3]) >> 9));
                v211 = (void **)(v207 + 16 * v210);
                v212 = *v211;
                if (v650[3] == *v211)
                {
LABEL_259:
                  *v211 = (void *)-8192;
                  v206[304] = vadd_s32(v206[304], (int32x2_t)0x1FFFFFFFFLL);
                  v205 = v650[3];
                }
                else
                {
                  v213 = 1;
                  while (v212 != (void *)-4096)
                  {
                    v214 = v210 + v213++;
                    v210 = v214 & v209;
                    v212 = *(void **)(v207 + 16 * v210);
                    if (v650[3] == v212)
                    {
                      v211 = (void **)(v207 + 16 * v210);
                      goto LABEL_259;
                    }
                  }
                }
                v205[17] &= ~1u;
              }
            }
          }
        }
        v215 = (uint64_t *)v202[7];
        LODWORD(v644) = (_DWORD)v198;
        v216 = *v215;
        sub_1C5658314(*v215, *((_DWORD *)v8 + 186));
        v218 = v217;
        v219 = sub_1C5658D00(v215, v216, v217, v594, v588, (uint64_t **)&v612);
        v650[0] = "retval";
        LOWORD(v650[4]) = 259;
        v220 = sub_1C6282448(v599, (uint64_t)v219, &v644, 1, (uint64_t)v650, (llvm::BasicBlock *)v594);
        v221 = v612;
        v599 = (llvm::Type **)v220;
        if (!v612)
          v221 = (llvm::Instruction *)v220;
        v612 = v221;
        v222 = *((_QWORD *)v592 + 11);
        v223 = v222 - 24;
        if (!v222)
          v223 = 0;
        v224 = v223 + 40;
        for (i = *(_QWORD *)(v223 + 48); i != v224; i = *(_QWORD *)(i + 8))
        {
          v226 = i - 24;
          if (!i)
            v226 = 0;
          if (*(_BYTE *)(v226 + 16) != 83)
          {
            v227 = *(unsigned __int8 *)(i - 8) - 38;
            v228 = v227 > 0x38;
            v229 = (1 << v227) & 0x100060000000001;
            if (v228 || v229 == 0)
              v224 = i;
            else
              v224 = *(_QWORD *)(i + 8);
            break;
          }
        }
        if (v224)
          v231 = v224 - 24;
        else
          v231 = 0;
        v232 = sub_1C5658A0C(v199, v216, v218, v231);
        v233 = v200[1];
        if (v233)
        {
          v234 = v232;
          v235 = (uint64_t *)(v232 + 8);
          do
          {
            v236 = v233;
            v237 = *(_DWORD **)(v233 + 24);
            v238 = v237[5];
            if ((v238 & 0x40000000) != 0)
              v239 = (_DWORD *)*((_QWORD *)v237 - 1);
            else
              v239 = &v237[-8 * (v238 & 0x7FFFFFF)];
            v233 = *(_QWORD *)(v233 + 8);
            v650[0] = v237;
            *(_QWORD *)v614 = 0;
            if ((sub_1C61252B8(v18, v650, v614) & 1) == 0)
            {
              v650[1] = (void *)2;
              v650[2] = 0;
              v650[3] = v237;
              if (v237 != (_DWORD *)-8192 && v237 != (_DWORD *)-4096 && v237)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v650[1]);
              v650[0] = &unk_1E814DA10;
              v650[4] = v608;
              v240 = sub_1C52E2ED8((uint64_t)v608, v650);
              if (v650[3] != (void *)-8192 && v650[3] != (void *)-4096 && v650[3])
              {
                v241 = (unint64_t)v650[1] & 0xFFFFFFFFFFFFFFF8;
                *(void **)((unint64_t)v650[1] & 0xFFFFFFFFFFFFFFF8) = v650[2];
                if (v650[2])
                {
                  *(_QWORD *)v650[2] = *(_QWORD *)v650[2] & 7 | v241;
                }
                else
                {
                  v242 = v650[3];
                  v243 = ***(int32x2_t ****)v650[3];
                  v244 = (unint64_t)v243[303];
                  if (v244 <= v241)
                  {
                    v245 = v243[305].u32[0];
                    if (v244 + 16 * v245 > v241)
                    {
                      v246 = v245 - 1;
                      LODWORD(v247) = v246 & ((LODWORD(v650[3]) >> 4) ^ (LODWORD(v650[3]) >> 9));
                      v248 = (void **)(v244 + 16 * v247);
                      v249 = *v248;
                      if (v650[3] == *v248)
                      {
LABEL_302:
                        *v248 = (void *)-8192;
                        v243[304] = vadd_s32(v243[304], (int32x2_t)0x1FFFFFFFFLL);
                        v242 = v650[3];
                      }
                      else
                      {
                        v250 = 1;
                        while (v249 != (void *)-4096)
                        {
                          v251 = v247 + v250++;
                          v247 = v251 & v246;
                          v249 = *(void **)(v244 + 16 * v247);
                          if (v650[3] == v249)
                          {
                            v248 = (void **)(v244 + 16 * v247);
                            goto LABEL_302;
                          }
                        }
                      }
                      v242[17] &= ~1u;
                    }
                  }
                }
              }
              v252 = v240[7];
              v253 = *(_DWORD *)(v252 + 20);
              if ((v253 & 0x40000000) != 0)
                v254 = *(_QWORD *)(v252 - 8);
              else
                v254 = v252 - 32 * (v253 & 0x7FFFFFF);
              v255 = ((unint64_t)(v236 - (_QWORD)v239) >> 5);
              v256 = v254 + 32 * v255;
              if (*(_QWORD *)v256)
              {
                **(_QWORD **)(v256 + 16) = *(_QWORD *)(v256 + 8);
                v257 = *(_QWORD *)(v256 + 8);
                if (v257)
                  *(_QWORD *)(v257 + 16) = *(_QWORD *)(v256 + 16);
              }
              *(_QWORD *)v256 = v234;
              if (v234)
              {
                v258 = *v235;
                v259 = v254 + 32 * v255;
                *(_QWORD *)(v259 + 8) = *v235;
                if (v258)
                  *(_QWORD *)(v258 + 16) = v259 + 8;
                *(_QWORD *)(v259 + 16) = v235;
                *v235 = v256;
              }
            }
          }
          while (v233);
        }
        v198 = (llvm::ValueHandleBase *)((char *)v198 + 1);
        v199 += 40;
        v8 = v602;
      }
      while (v198 != v586);
    }
    if (*((_BYTE *)v8 + 713))
    {
      Declaration = llvm::Intrinsic::getDeclaration(*v571, 1994, 0, 0);
      v261 = *(_QWORD *)(Declaration + 24);
      v262 = *(llvm::ConstantInt **)(*(_QWORD *)(v261 + 16) + 8);
      *(_QWORD *)v614 = llvm::ConstantInt::get(v262, 0, 0);
      v650[0] = "wa";
      LOWORD(v650[4]) = 259;
      v263 = operator new(0x90uLL);
      v263[21] = v263[21] & 0x38000000 | 2;
      v264 = (uint64_t)(v263 + 16);
      *(_QWORD *)v263 = 0;
      *((_QWORD *)v263 + 1) = 0;
      *((_QWORD *)v263 + 2) = 0;
      *((_QWORD *)v263 + 3) = v263 + 16;
      *((_QWORD *)v263 + 4) = 0;
      *((_QWORD *)v263 + 5) = 0;
      *((_QWORD *)v263 + 6) = 0;
      *((_QWORD *)v263 + 7) = v263 + 16;
      if (Declaration)
        v265 = (uint64_t **)v261;
      else
        v265 = 0;
      sub_1C61DD0B0((llvm::Instruction *)(v263 + 16), v265, Declaration, (uint64_t *)v614, 1, 0, 0, (uint64_t)v650, (llvm::BasicBlock *)v594);
      LODWORD(v644) = *((_DWORD *)v8 + 28);
      v650[0] = "retval";
      LOWORD(v650[4]) = 259;
      v266 = sub_1C6282448(v599, v264, &v644, 1, (uint64_t)v650, (llvm::BasicBlock *)v594);
      v267 = v612;
      if (!v612)
        v267 = (llvm::Instruction *)v264;
      v612 = v267;
      v268 = *(uint64_t ***)(Declaration + 24);
      *(_QWORD *)v614 = llvm::ConstantInt::get(v262, 1, 0);
      v650[0] = "wa";
      LOWORD(v650[4]) = 259;
      v269 = operator new(0x90uLL);
      v269[21] = v269[21] & 0x38000000 | 2;
      v270 = (uint64_t)(v269 + 16);
      *(_QWORD *)v269 = 0;
      *((_QWORD *)v269 + 1) = 0;
      *((_QWORD *)v269 + 2) = 0;
      *((_QWORD *)v269 + 3) = v269 + 16;
      *((_QWORD *)v269 + 4) = 0;
      *((_QWORD *)v269 + 5) = 0;
      *((_QWORD *)v269 + 6) = 0;
      *((_QWORD *)v269 + 7) = v269 + 16;
      sub_1C61DD0B0((llvm::Instruction *)(v269 + 16), v268, Declaration, (uint64_t *)v614, 1, 0, 0, (uint64_t)v650, (llvm::BasicBlock *)v594);
      LODWORD(v644) = (_DWORD)v644 + 1;
      v650[0] = "retval";
      v188 = (llvm::BasicBlock *)v594;
      LOWORD(v650[4]) = 259;
      v187 = sub_1C6282448((llvm::Type **)v266, v270, &v644, 1, (uint64_t)v650, (llvm::BasicBlock *)v594);
      v186 = v580;
    }
    else
    {
      v186 = v580;
      v188 = (llvm::BasicBlock *)v594;
      v187 = (char *)v599;
    }
    v271 = (llvm::Function *)v582;
    v272 = **v582;
    v273 = v187 != 0;
    if (v187)
      v274 = 96;
    else
      v274 = 64;
    v275 = (llvm::ReturnInst *)operator new(v274);
    v276 = (llvm::ReturnInst *)((char *)v275 + 32 * v273);
    *((_DWORD *)v276 + 5) = *((_DWORD *)v276 + 5) & 0x38000000 | v273;
    if (v187)
    {
      do
      {
        *(_QWORD *)v275 = 0;
        *((_QWORD *)v275 + 1) = 0;
        *((_QWORD *)v275 + 2) = 0;
        *((_QWORD *)v275 + 3) = v276;
        v275 = (llvm::ReturnInst *)((char *)v275 + 32);
      }
      while (v275 != v276);
    }
    v277 = llvm::ReturnInst::ReturnInst(v276, v272, (llvm::Value *)v187, v188);
    v278 = v612;
    if (!v612)
      v278 = v277;
    v612 = v278;
    memset(v650, 0, sizeof(v650));
    *(_QWORD *)&__dst = &v653;
    *((_QWORD *)&__dst + 1) = &v653;
    *(_QWORD *)&v652 = 32;
    DWORD2(v652) = 0;
    v656 = v658;
    v657 = 0x2000000000;
    v659 = 1;
    v660 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v661 = v660;
    v279 = v664;
    v662 = v664;
    v663 = 0x400000000;
    if (!*v574)
    {
LABEL_333:
      v280 = sub_1C565903C((uint64_t)v650);
      v281 = v581;
      (*(void (**)(uint64_t, llvm::Function *, llvm::Function *, double))(*(_QWORD *)v581 + 40))(v581, v271, v186, v280);
      llvm::Function::eraseFromParent(v271);
      if (v578)
      {
        (*(void (**)(uint64_t, llvm::Function *, llvm::Function *))(*(_QWORD *)v581 + 40))(v581, v186, v579);
        llvm::Function::eraseFromParent(v186);
        v282 = v579;
        *((_WORD *)v572 + 13) = *((_WORD *)v572 + 13) & 0xC00F | 0x650;
        v186 = v579;
LABEL_428:
        (*(void (**)(uint64_t, llvm::Function *, llvm::Function *))(*(_QWORD *)v281 + 32))(v281, v282, v186);
        if (v662 != v279)
          free(v662);
        if ((v659 & 1) == 0)
          MEMORY[0x1CAA32FB4](v660.i64[0], 8);
        if (v656 != v658)
          free(v656);
        if (*((_QWORD *)&__dst + 1) != (_QWORD)__dst)
          free(*((void **)&__dst + 1));
        if (v665[0] != v666)
          free(v665[0]);
        if (v611)
        {
          sub_1C4E43068((uint64_t)v610);
          MEMORY[0x1CAA32FB4](v610[0], 8);
          v611 = 0;
        }
        v364 = (_QWORD *)v608[0];
        if (v609)
        {
          v365 = v608[0] + ((unint64_t)v609 << 6);
          do
          {
            v366 = v364[3];
            if ((v366 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              v367 = v364[7];
              if (v367)
              {
                if (v367 != -8192 && v367 != -4096)
                {
                  v368 = v364[5] & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v368 = v364[6];
                  v369 = (unint64_t *)v364[6];
                  if (v369)
                  {
                    *v369 = *v369 & 7 | v368;
                  }
                  else
                  {
                    v370 = v364[7];
                    v371 = ***(int32x2_t ****)v370;
                    v372 = (unint64_t)v371[303];
                    if (v372 <= v368)
                    {
                      v373 = v371[305].u32[0];
                      if (v372 + 16 * v373 > v368)
                      {
                        v374 = v373 - 1;
                        LODWORD(v375) = v374 & ((v370 >> 4) ^ (v370 >> 9));
                        v376 = (uint64_t *)(v372 + 16 * v375);
                        v377 = *v376;
                        if (v370 == *v376)
                        {
LABEL_454:
                          *v376 = -8192;
                          v371[304] = vadd_s32(v371[304], (int32x2_t)0x1FFFFFFFFLL);
                          v370 = v364[7];
                        }
                        else
                        {
                          v378 = 1;
                          while (v377 != -4096)
                          {
                            v379 = v375 + v378++;
                            v375 = v379 & v374;
                            v377 = *(_QWORD *)(v372 + 16 * v375);
                            if (v370 == v377)
                            {
                              v376 = (uint64_t *)(v372 + 16 * v375);
                              goto LABEL_454;
                            }
                          }
                        }
                        *(_BYTE *)(v370 + 17) &= ~1u;
                      }
                    }
                  }
                  v366 = v364[3];
                }
              }
            }
            if (v366 != -4096 && v366 != -8192 && v366 != 0)
            {
              v381 = v364[1] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v381 = v364[2];
              v382 = (unint64_t *)v364[2];
              if (v382)
              {
                *v382 = *v382 & 7 | v381;
              }
              else
              {
                v383 = v364[3];
                v384 = ***(int32x2_t ****)v383;
                v385 = (unint64_t)v384[303];
                if (v385 <= v381)
                {
                  v386 = v384[305].u32[0];
                  if (v385 + 16 * v386 > v381)
                  {
                    v387 = v386 - 1;
                    LODWORD(v388) = v387 & ((v383 >> 4) ^ (v383 >> 9));
                    v389 = (uint64_t *)(v385 + 16 * v388);
                    v390 = *v389;
                    if (v383 == *v389)
                    {
LABEL_473:
                      *v389 = -8192;
                      v384[304] = vadd_s32(v384[304], (int32x2_t)0x1FFFFFFFFLL);
                      v383 = v364[3];
                    }
                    else
                    {
                      v391 = 1;
                      while (v390 != -4096)
                      {
                        v392 = v388 + v391++;
                        v388 = v392 & v387;
                        v390 = *(_QWORD *)(v385 + 16 * v388);
                        if (v383 == v390)
                        {
                          v389 = (uint64_t *)(v385 + 16 * v388);
                          goto LABEL_473;
                        }
                      }
                    }
                    *(_BYTE *)(v383 + 17) &= ~1u;
                  }
                }
              }
            }
            v364 += 8;
          }
          while (v364 != (_QWORD *)v365);
          v364 = (_QWORD *)v608[0];
        }
        MEMORY[0x1CAA32FB4](v364, 8);
        if (v667 != v669)
          free(v667);
        return;
      }
      if (*((_BYTE *)v8 + 713))
      {
        v575 = v279;
        if ((*((_WORD *)v592 + 13) & 1) != 0)
          llvm::Function::BuildLazyArguments(v186);
        v583 = *((_QWORD *)v592 + 12) + 40 * *((_QWORD *)v592 + 13);
        v283 = llvm::Intrinsic::getDeclaration(*((uint64_t **)v592 + 6), 1994, 0, 0);
        v590 = llvm::Intrinsic::getDeclaration(*((uint64_t **)v592 + 6), 1996, 0, 0);
        v603 = *(llvm::ConstantInt **)(*(_QWORD *)(*(_QWORD *)(v283 + 24) + 16) + 8);
        v284 = *((_QWORD *)v592 + 11);
        v285 = (_QWORD *)**((_QWORD **)v592 + 1);
        *(_QWORD *)v614 = "entry";
        *(_WORD *)&v614[32] = 259;
        v286 = operator new();
        v287 = (uint64_t ***)v286;
        if (v284)
          v288 = (uint64_t **)(v284 - 24);
        else
          v288 = 0;
        *(_QWORD *)v286 = *v285 + 1600;
        *(_QWORD *)(v286 + 8) = 0;
        v289 = *(_DWORD *)(v286 + 20) & 0xC0000000;
        *(_DWORD *)(v286 + 16) = 22;
        *(_DWORD *)(v286 + 20) = v289;
        v290 = v286 + 40;
        *(_QWORD *)(v286 + 24) = 0;
        v291 = (uint64_t *)(v286 + 24);
        *(_QWORD *)(v286 + 32) = 0;
        *(_QWORD *)(v286 + 40) = v286 + 40;
        *(_QWORD *)(v286 + 48) = v286 + 40;
        *(_QWORD *)(v286 + 56) = 0;
        v596 = (llvm::PHINode *)v288;
        if (v284)
          v292 = v288 + 3;
        else
          v292 = (uint64_t **)(v592 + 20);
        llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v592 + 20), (_QWORD *)v286);
        v293 = *v292;
        v287[4] = v292;
        *v291 = (uint64_t)v293;
        v293[1] = (uint64_t)v291;
        *v292 = v291;
        llvm::Value::setName(v287, (uint64_t)v614);
        v294 = (_QWORD *)**((_QWORD **)v592 + 1);
        *(_QWORD *)v614 = "wa_true_bb";
        *(_WORD *)&v614[32] = 259;
        v295 = operator new();
        *(_QWORD *)v295 = *v294 + 1600;
        *(_QWORD *)(v295 + 8) = 0;
        v296 = *(_DWORD *)(v295 + 20) & 0xC0000000;
        *(_DWORD *)(v295 + 16) = 22;
        *(_DWORD *)(v295 + 20) = v296;
        *(_QWORD *)(v295 + 24) = 0;
        *(_QWORD *)(v295 + 32) = 0;
        *(_QWORD *)(v295 + 40) = v295 + 40;
        *(_QWORD *)(v295 + 48) = v295 + 40;
        *(_QWORD *)(v295 + 56) = 0;
        llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v592 + 20), (_QWORD *)v295);
        v297 = *v292;
        *(_QWORD *)(v295 + 32) = v292;
        *(_QWORD *)(v295 + 24) = v297;
        v297[1] = v295 + 24;
        *v292 = (uint64_t *)(v295 + 24);
        llvm::Value::setName((uint64_t ***)v295, (uint64_t)v614);
        v298 = (_QWORD *)**((_QWORD **)v592 + 1);
        *(_QWORD *)v614 = "wa_true_bb";
        *(_WORD *)&v614[32] = 259;
        v299 = operator new();
        *(_QWORD *)v299 = *v298 + 1600;
        *(_QWORD *)(v299 + 8) = 0;
        v300 = *(_DWORD *)(v299 + 20) & 0xC0000000;
        *(_DWORD *)(v299 + 16) = 22;
        *(_DWORD *)(v299 + 20) = v300;
        *(_QWORD *)(v299 + 24) = 0;
        *(_QWORD *)(v299 + 32) = 0;
        *(_QWORD *)(v299 + 40) = v299 + 40;
        *(_QWORD *)(v299 + 48) = v299 + 40;
        *(_QWORD *)(v299 + 56) = 0;
        llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v592 + 20), (_QWORD *)v299);
        v301 = *v292;
        *(_QWORD *)(v299 + 32) = v292;
        *(_QWORD *)(v299 + 24) = v301;
        v301[1] = v299 + 24;
        *v292 = (uint64_t *)(v299 + 24);
        llvm::Value::setName((uint64_t ***)v299, (uint64_t)v614);
        v302 = (_QWORD *)**((_QWORD **)v592 + 1);
        *(_QWORD *)v614 = "wa_false2_bb";
        *(_WORD *)&v614[32] = 259;
        v303 = operator new();
        *(_QWORD *)v303 = *v302 + 1600;
        *(_QWORD *)(v303 + 8) = 0;
        v304 = *(_DWORD *)(v303 + 20) & 0xC0000000;
        *(_DWORD *)(v303 + 16) = 22;
        *(_DWORD *)(v303 + 20) = v304;
        *(_QWORD *)(v303 + 24) = 0;
        *(_QWORD *)(v303 + 32) = 0;
        *(_QWORD *)(v303 + 40) = v303 + 40;
        *(_QWORD *)(v303 + 48) = v303 + 40;
        *(_QWORD *)(v303 + 56) = 0;
        llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v592 + 20), (_QWORD *)v303);
        v305 = *v292;
        *(_QWORD *)(v303 + 32) = v292;
        *(_QWORD *)(v303 + 24) = v305;
        v305[1] = v303 + 24;
        *v292 = (uint64_t *)(v303 + 24);
        llvm::Value::setName((uint64_t ***)v303, (uint64_t)v614);
        v306 = **v287;
        *(_QWORD *)v614 = &v614[16];
        *(_QWORD *)&v614[8] = 0x200000000;
        *((_QWORD *)&v616 + 1) = v306;
        v617 = &v625;
        v618 = (uint64_t)&v626;
        v619 = 0;
        v620 = 0;
        v621 = 512;
        v622 = 7;
        v624 = 0;
        v623 = 0;
        v625 = &unk_1E8167888;
        v626 = &unk_1E8167A08;
        *((_QWORD *)&v615 + 1) = v287;
        *(_QWORD *)&v616 = v290;
        v307 = *(uint64_t ***)(v283 + 24);
        v636 = llvm::ConstantInt::get(v603, 0, 0);
        v644 = "por0";
        v648 = 259;
        v308 = sub_1C4774778((uint64_t *)v614, v307, v283, (uint64_t *)&v636, 1, (uint64_t)&v644, 0);
        v309 = *(uint64_t ***)(v283 + 24);
        v636 = llvm::ConstantInt::get(v603, 1, 0);
        v644 = "por2";
        v648 = 259;
        v587 = (llvm::ValueHandleBase *)v283;
        v573 = sub_1C4774778((uint64_t *)v614, v309, v283, (uint64_t *)&v636, 1, (uint64_t)&v644, 0);
        v648 = 257;
        v310 = (llvm::Value *)sub_1C4774B48((uint64_t)v614, 32, v308, v583 - 80, (uint64_t)&v644);
        v311 = operator new(0xA0uLL);
        v312 = v311;
        v313 = 0;
        v314 = (llvm::Value *)(v311 + 24);
        v311[29] = v311[29] & 0x38000000 | 3;
        do
        {
          v315 = &v311[v313];
          *v315 = 0;
          v315[1] = 0;
          v315[2] = 0;
          v315[3] = v314;
          v313 += 8;
        }
        while (v313 != 24);
        llvm::BranchInst::BranchInst((llvm::BranchInst *)(v311 + 24), (llvm::BasicBlock *)v295, (llvm::BasicBlock *)v299, v310, 0);
        v648 = 257;
        (*(void (**)(uint64_t, llvm::Value *, void **, _QWORD, _QWORD))(*(_QWORD *)v618 + 16))(v618, v314, &v644, *((_QWORD *)&v615 + 1), v616);
        if (*(_DWORD *)&v614[8])
        {
          v316 = *(_QWORD *)v614;
          v317 = *(_QWORD *)v614 + 16 * *(unsigned int *)&v614[8];
          v318 = (unsigned __int8 **)(v312 + 36);
          do
          {
            v319 = *(_DWORD *)v316;
            v320 = *(unsigned __int8 **)(v316 + 8);
            if (v320)
            {
              if (!v319)
              {
                v636 = *(void **)(v316 + 8);
                llvm::MetadataTracking::track((uint64_t)&v636, v320, 2);
                v321 = *v318;
                goto LABEL_358;
              }
            }
            else
            {
              v321 = *v318;
              if (!*v318 && (*((_BYTE *)v312 + 119) & 0x20) == 0)
                goto LABEL_355;
              if (!v319)
              {
                v636 = 0;
LABEL_358:
                if (v321)
                  llvm::MetadataTracking::untrack((uint64_t)(v312 + 36), v321);
                v322 = (unsigned __int8 *)v636;
                *v318 = (unsigned __int8 *)v636;
                if (v322)
                  llvm::MetadataTracking::retrack((uint64_t)&v636, v322, (uint64_t)(v312 + 36));
                goto LABEL_355;
              }
            }
            llvm::Value::setMetadata(v314, *(_DWORD *)v316, (llvm::MDNode *)v320);
LABEL_355:
            v316 += 16;
          }
          while (v316 != v317);
        }
        *((_QWORD *)&v615 + 1) = v295;
        *(_QWORD *)&v616 = v295 + 40;
        if (v590)
          v323 = *(uint64_t ***)(v590 + 24);
        else
          v323 = 0;
        v636 = llvm::ConstantInt::get(v603, 0, 0);
        v637 = v308;
        v648 = 257;
        sub_1C4774778((uint64_t *)v614, v323, v590, (uint64_t *)&v636, 2, (uint64_t)&v644, 0);
        v324 = (char *)operator new(0x60uLL);
        v325 = v324;
        *((_DWORD *)v324 + 13) = *((_DWORD *)v324 + 13) & 0x38000000 | 1;
        *(_QWORD *)v324 = 0;
        *((_QWORD *)v324 + 2) = 0;
        *((_QWORD *)v324 + 1) = 0;
        *((_QWORD *)v324 + 4) = ***(_QWORD ***)v596 + 1576;
        v326 = (llvm::Value *)(v324 + 32);
        *((_QWORD *)v324 + 3) = v324 + 32;
        *((_QWORD *)v324 + 5) = 0;
        v324[48] = 30;
        v324[49] = 0;
        *((_WORD *)v324 + 25) = 0;
        *((_DWORD *)v324 + 13) = 1;
        *(_OWORD *)(v324 + 56) = 0u;
        *(_OWORD *)(v324 + 72) = 0u;
        *((_DWORD *)v324 + 22) = 0;
        *(_QWORD *)v324 = v596;
        v328 = (_QWORD *)((char *)v596 + 8);
        v327 = *((_QWORD *)v596 + 1);
        *((_QWORD *)v324 + 1) = v327;
        if (v327)
          *(_QWORD *)(v327 + 16) = v324 + 8;
        *((_QWORD *)v324 + 2) = v328;
        *v328 = v324;
        v648 = 257;
        (*(void (**)(uint64_t, llvm::Value *, void **, _QWORD, _QWORD))(*(_QWORD *)v618 + 16))(v618, v326, &v644, *((_QWORD *)&v615 + 1), v616);
        if (*(_DWORD *)&v614[8])
        {
          v329 = *(_QWORD *)v614;
          v330 = *(_QWORD *)v614 + 16 * *(unsigned int *)&v614[8];
          v331 = (unsigned __int8 **)(v325 + 80);
          do
          {
            v332 = *(_DWORD *)v329;
            v333 = *(unsigned __int8 **)(v329 + 8);
            if (v333)
            {
              if (!v332)
              {
                v636 = *(void **)(v329 + 8);
                llvm::MetadataTracking::track((uint64_t)&v636, v333, 2);
                v334 = *v331;
                goto LABEL_379;
              }
            }
            else
            {
              v334 = *v331;
              if (!*v331 && (v325[55] & 0x20) == 0)
                goto LABEL_376;
              if (!v332)
              {
                v636 = 0;
LABEL_379:
                if (v334)
                  llvm::MetadataTracking::untrack((uint64_t)(v325 + 80), v334);
                v335 = (unsigned __int8 *)v636;
                *v331 = (unsigned __int8 *)v636;
                if (v335)
                  llvm::MetadataTracking::retrack((uint64_t)&v636, v335, (uint64_t)(v325 + 80));
                goto LABEL_376;
              }
            }
            llvm::Value::setMetadata(v326, *(_DWORD *)v329, (llvm::MDNode *)v333);
LABEL_376:
            v329 += 16;
          }
          while (v329 != v330);
        }
        *((_QWORD *)&v615 + 1) = v299;
        *(_QWORD *)&v616 = v299 + 40;
        if (v590)
          v336 = *(uint64_t ***)(v590 + 24);
        else
          v336 = 0;
        v186 = v580;
        v636 = llvm::ConstantInt::get(v603, 1, 0);
        v637 = v573;
        v648 = 257;
        sub_1C4774778((uint64_t *)v614, v336, v590, (uint64_t *)&v636, 2, (uint64_t)&v644, 0);
        v337 = (uint64_t **)*((_QWORD *)v587 + 3);
        v636 = llvm::ConstantInt::get(v603, 0, 0);
        v644 = "por0";
        v648 = 259;
        v338 = sub_1C4774778((uint64_t *)v614, v337, (uint64_t)v587, (uint64_t *)&v636, 1, (uint64_t)&v644, 0);
        v648 = 257;
        v339 = (llvm::Value *)sub_1C4774B48((uint64_t)v614, 32, v308, v338, (uint64_t)&v644);
        v340 = operator new(0xA0uLL);
        v341 = v340;
        v342 = 0;
        v343 = (llvm::Value *)(v340 + 24);
        v340[29] = v340[29] & 0x38000000 | 3;
        do
        {
          v344 = &v340[v342];
          *v344 = 0;
          v344[1] = 0;
          v344[2] = 0;
          v344[3] = v343;
          v342 += 8;
        }
        while (v342 != 24);
        llvm::BranchInst::BranchInst((llvm::BranchInst *)(v340 + 24), v596, (llvm::BasicBlock *)v303, v339, 0);
        v648 = 257;
        (*(void (**)(uint64_t, llvm::Value *, void **, _QWORD, _QWORD))(*(_QWORD *)v618 + 16))(v618, v343, &v644, *((_QWORD *)&v615 + 1), v616);
        if (*(_DWORD *)&v614[8])
        {
          v345 = *(_QWORD *)v614;
          v346 = *(_QWORD *)v614 + 16 * *(unsigned int *)&v614[8];
          v347 = (unsigned __int8 **)(v341 + 36);
          do
          {
            v348 = *(_DWORD *)v345;
            v349 = *(unsigned __int8 **)(v345 + 8);
            if (v349)
            {
              if (!v348)
              {
                v636 = *(void **)(v345 + 8);
                llvm::MetadataTracking::track((uint64_t)&v636, v349, 2);
                v350 = *v347;
                goto LABEL_400;
              }
            }
            else
            {
              v350 = *v347;
              if (!*v347 && (*((_BYTE *)v341 + 119) & 0x20) == 0)
                goto LABEL_397;
              if (!v348)
              {
                v636 = 0;
LABEL_400:
                if (v350)
                  llvm::MetadataTracking::untrack((uint64_t)(v341 + 36), v350);
                v351 = (unsigned __int8 *)v636;
                *v347 = (unsigned __int8 *)v636;
                if (v351)
                  llvm::MetadataTracking::retrack((uint64_t)&v636, v351, (uint64_t)(v341 + 36));
                goto LABEL_397;
              }
            }
            llvm::Value::setMetadata(v343, *(_DWORD *)v345, (llvm::MDNode *)v349);
LABEL_397:
            v345 += 16;
          }
          while (v345 != v346);
        }
        *((_QWORD *)&v615 + 1) = v303;
        *(_QWORD *)&v616 = v303 + 40;
        if (v590)
          v352 = *(uint64_t ***)(v590 + 24);
        else
          v352 = 0;
        v281 = v581;
        v636 = llvm::ConstantInt::get(v603, 1, 0);
        v637 = v583 - 40;
        v648 = 257;
        sub_1C4774778((uint64_t *)v614, v352, v590, (uint64_t *)&v636, 2, (uint64_t)&v644, 0);
        v353 = (char *)operator new(0x60uLL);
        v354 = v353;
        *((_DWORD *)v353 + 13) = *((_DWORD *)v353 + 13) & 0x38000000 | 1;
        *(_QWORD *)v353 = 0;
        *((_QWORD *)v353 + 2) = 0;
        *((_QWORD *)v353 + 1) = 0;
        *((_QWORD *)v353 + 4) = ***(_QWORD ***)v596 + 1576;
        v355 = (llvm::Value *)(v353 + 32);
        *((_QWORD *)v353 + 3) = v353 + 32;
        *((_QWORD *)v353 + 5) = 0;
        v353[48] = 30;
        v353[49] = 0;
        *((_WORD *)v353 + 25) = 0;
        *((_DWORD *)v353 + 13) = 1;
        *(_OWORD *)(v353 + 56) = 0u;
        *(_OWORD *)(v353 + 72) = 0u;
        *((_DWORD *)v353 + 22) = 0;
        *(_QWORD *)v353 = v596;
        v356 = *((_QWORD *)v596 + 1);
        *((_QWORD *)v353 + 1) = v356;
        if (v356)
          *(_QWORD *)(v356 + 16) = v353 + 8;
        *((_QWORD *)v353 + 2) = v328;
        *v328 = v353;
        v648 = 257;
        (*(void (**)(uint64_t, llvm::Value *, void **, _QWORD, _QWORD))(*(_QWORD *)v618 + 16))(v618, v355, &v644, *((_QWORD *)&v615 + 1), v616);
        v357 = *(_QWORD *)v614;
        if (*(_DWORD *)&v614[8])
        {
          v358 = *(_QWORD *)v614 + 16 * *(unsigned int *)&v614[8];
          v359 = (unsigned __int8 **)(v354 + 80);
          while (1)
          {
            v360 = *(_DWORD *)v357;
            v361 = *(unsigned __int8 **)(v357 + 8);
            if (v361)
            {
              if (!v360)
              {
                v636 = *(void **)(v357 + 8);
                llvm::MetadataTracking::track((uint64_t)&v636, v361, 2);
                v362 = *v359;
                goto LABEL_421;
              }
            }
            else
            {
              v362 = *v359;
              if (!*v359 && (v354[55] & 0x20) == 0)
                goto LABEL_418;
              if (!v360)
              {
                v636 = 0;
LABEL_421:
                if (v362)
                  llvm::MetadataTracking::untrack((uint64_t)(v354 + 80), v362);
                v363 = (unsigned __int8 *)v636;
                *v359 = (unsigned __int8 *)v636;
                if (v363)
                  llvm::MetadataTracking::retrack((uint64_t)&v636, v363, (uint64_t)(v354 + 80));
                goto LABEL_418;
              }
            }
            llvm::Value::setMetadata(v355, *(_DWORD *)v357, (llvm::MDNode *)v361);
LABEL_418:
            v357 += 16;
            if (v357 == v358)
            {
              v357 = *(_QWORD *)v614;
              break;
            }
          }
        }
        v279 = v575;
        if ((_BYTE *)v357 != &v614[16])
          free((void *)v357);
      }
      (*(void (**)(uint64_t, llvm::Function *, llvm::Function *))(*(_QWORD *)v281 + 32))(v281, v186, v186);
      v282 = v579;
      goto LABEL_428;
    }
    v394 = **(_QWORD **)v8;
    v393 = *(_QWORD *)(*(_QWORD *)v8 + 8);
    v644 = &v646;
    v645 = 0x1000000000;
    sub_1C61898C0((unsigned int *)&v644, v393, v393, v394, v394);
    v395 = (unsigned int *)v644;
    if (!(_DWORD)v645)
    {
LABEL_786:
      if (v395 != &v646)
        free(v395);
      goto LABEL_333;
    }
    v561 = 0;
    v591 = (unsigned int *)((char *)v644 + 8 * v645);
    v558 = (char *)v8 + 720;
    v559 = (char *)v8 + 744;
    v560 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
LABEL_480:
    v396 = *(_QWORD *)v395 + 40;
    for (j = *(_QWORD *)(*(_QWORD *)v395 + 48); j != v396; j = *(_QWORD *)(j + 8))
    {
      v398 = j - 24;
      if (j)
        v399 = j - 24;
      else
        v399 = 0;
      if (*(_BYTE *)(v399 + 16) != 83)
        goto LABEL_488;
    }
    v398 = 0;
LABEL_488:
    v400 = v398 + 24;
    while (1)
    {
      do
      {
        if (v400 == v396)
        {
          v395 += 2;
          if (v395 == v591)
          {
            v395 = (unsigned int *)v644;
            goto LABEL_786;
          }
          goto LABEL_480;
        }
        v401 = v400 - 24;
        v134 = v400 == 0;
        v400 = *(_QWORD *)(v400 + 8);
        if (v134)
          v402 = 0;
        else
          v402 = v401;
        *(_QWORD *)v614 = v402;
        v636 = 0;
      }
      while (!sub_1C61252B8(v18, v614, &v636));
      *(_QWORD *)&v614[8] = 2;
      *(_QWORD *)&v614[16] = 0;
      *(_QWORD *)&v614[24] = v402;
      if (v402 != -8192 && v402 != -4096 && v402)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v614[8]);
      *(_QWORD *)v614 = &unk_1E814DA10;
      *(_QWORD *)&v614[32] = v608;
      v403 = sub_1C52E2ED8((uint64_t)v608, v614);
      if (*(_QWORD *)&v614[24] != -8192 && *(_QWORD *)&v614[24] != -4096 && *(_QWORD *)&v614[24])
      {
        v404 = *(_QWORD *)&v614[8] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(*(_QWORD *)&v614[8] & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)&v614[16];
        if (*(_QWORD *)&v614[16])
        {
          **(_QWORD **)&v614[16] = **(_QWORD **)&v614[16] & 7 | v404;
        }
        else
        {
          v405 = *(_QWORD *)&v614[24];
          v406 = ****(int32x2_t *****)&v614[24];
          v407 = (unint64_t)v406[303];
          if (v407 <= v404)
          {
            v408 = v406[305].u32[0];
            if (v407 + 16 * v408 > v404)
            {
              v409 = v408 - 1;
              LODWORD(v410) = v409 & ((*(_DWORD *)&v614[24] >> 4) ^ (*(_DWORD *)&v614[24] >> 9));
              v411 = (uint64_t *)(v407 + 16 * v410);
              v412 = *v411;
              if (*(_QWORD *)&v614[24] == *v411)
              {
LABEL_509:
                *v411 = -8192;
                v406[304] = vadd_s32(v406[304], (int32x2_t)0x1FFFFFFFFLL);
                v405 = *(_QWORD *)&v614[24];
              }
              else
              {
                v413 = 1;
                while (v412 != -4096)
                {
                  v414 = v410 + v413++;
                  v410 = v414 & v409;
                  v412 = *(_QWORD *)(v407 + 16 * v410);
                  if (*(_QWORD *)&v614[24] == v412)
                  {
                    v411 = (uint64_t *)(v407 + 16 * v410);
                    goto LABEL_509;
                  }
                }
              }
              *(_BYTE *)(v405 + 17) &= ~1u;
            }
          }
        }
      }
      v415 = v403[7];
      v416 = *(unsigned __int8 *)(v415 + 16);
      if (v416 == 61)
        break;
      if (v416 == 60)
      {
        v417 = **(_QWORD **)(v415 - 32);
        v418 = *(_DWORD *)(v417 + 8);
        if ((v418 & 0xFE) == 0x12)
          v418 = *(_DWORD *)(**(_QWORD **)(v417 + 16) + 8);
        v419 = (v418 >> 8) - 2;
        v228 = v419 > 0x3E;
        v420 = (1 << v419) & 0x4000000000000003;
        if (v228 || v420 == 0)
          break;
LABEL_527:
        if (v650[0] && (sub_1C5659170((uint64_t)v650, v415) & 1) == 0)
        {
          v425 = (char *)*((_QWORD *)v650[0] + 5);
          if (v425 == (char *)v650[0] + 40)
          {
            v427 = 0;
          }
          else
          {
            if (v425)
              v426 = (unsigned __int8 *)(v425 - 24);
            else
              v426 = 0;
            if (v426[16] - 29 >= 0xB)
              v427 = 0;
            else
              v427 = (llvm::Instruction *)v426;
          }
          llvm::Instruction::moveBefore((llvm::Instruction *)v415, v427);
          v428 = v657;
          if (v657 >= (unint64_t)HIDWORD(v657))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v656, (uint64_t)v658, v657 + 1, 8);
            v428 = v657;
          }
          *((_QWORD *)v656 + v428) = v415;
          LODWORD(v657) = v657 + 1;
        }
        else
        {
          llvm::Instruction::moveBefore((llvm::Instruction *)v415, v612);
          if (v650[0])
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&__dst, v415);
        }
        v186 = v580;
      }
      else
      {
LABEL_522:
        if (v416 != 65)
          goto LABEL_527;
        v422 = *(_WORD *)(v415 + 18) >> 4;
        v228 = v422 > 0xA;
        v423 = (1 << v422) & 0x7A9;
        if (!v228 && v423 != 0)
          goto LABEL_527;
        if ((sub_1C5659224((uint64_t)v650, v415) & 1) != 0)
          sub_1C565903C((uint64_t)v650);
        v567 = (uint64_t **)v650[0];
        if (v650[0])
        {
          v429 = v650[1];
          v568 = (llvm::BasicBlock *)v650[3];
          v562 = (llvm::BasicBlock *)v650[2];
          v430 = (llvm::BasicBlock *)v650[4];
          v431 = (llvm::BasicBlock *)v650[1];
        }
        else
        {
          *(_WORD *)&v614[32] = 257;
          v432 = sub_1C5EBD70C((llvm *)v594, v612, 0, 0, 0, 0, (llvm::Twine *)v614, 0);
          v433 = **(_QWORD ***)v579;
          *(_QWORD *)v614 = "atom_loop.header";
          *(_WORD *)&v614[32] = 259;
          v434 = operator new();
          *(_QWORD *)v434 = *v433 + 1600;
          *(_QWORD *)(v434 + 8) = 0;
          v435 = *(_DWORD *)(v434 + 20) & 0xC0000000;
          *(_DWORD *)(v434 + 16) = 22;
          *(_DWORD *)(v434 + 20) = v435;
          v576 = v279;
          *(_QWORD *)(v434 + 24) = 0;
          v436 = (_QWORD *)(v434 + 24);
          *(_QWORD *)(v434 + 32) = 0;
          *(_QWORD *)(v434 + 40) = v434 + 40;
          *(_QWORD *)(v434 + 48) = v434 + 40;
          *(_QWORD *)(v434 + 56) = 0;
          v564 = (llvm::BasicBlock *)v432;
          if (v432)
            v437 = (llvm::BasicBlock *)(v432 + 24);
          else
            v437 = (llvm::BasicBlock *)v570;
          llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v570, (_QWORD *)v434);
          v438 = *(_QWORD *)v437;
          *(_QWORD *)(v434 + 32) = v437;
          *v436 = v438;
          *(_QWORD *)(v438 + 8) = v436;
          *(_QWORD *)v437 = v436;
          llvm::Value::setName((uint64_t ***)v434, (uint64_t)v614);
          v439 = **(_QWORD ***)v579;
          *(_QWORD *)v614 = "atom_loop.body";
          *(_WORD *)&v614[32] = 259;
          v440 = operator new();
          *(_QWORD *)v440 = *v439 + 1600;
          *(_QWORD *)(v440 + 8) = 0;
          v441 = *(_DWORD *)(v440 + 20) & 0xC0000000;
          *(_DWORD *)(v440 + 16) = 22;
          *(_DWORD *)(v440 + 20) = v441;
          *(_QWORD *)(v440 + 24) = 0;
          *(_QWORD *)(v440 + 32) = 0;
          *(_QWORD *)(v440 + 40) = v440 + 40;
          *(_QWORD *)(v440 + 48) = v440 + 40;
          *(_QWORD *)(v440 + 56) = 0;
          llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v570, (_QWORD *)v440);
          v569 = v437;
          v442 = *(_QWORD *)v437;
          *(_QWORD *)(v440 + 32) = v437;
          *(_QWORD *)(v440 + 24) = v442;
          *(_QWORD *)(v442 + 8) = v440 + 24;
          *(_QWORD *)v437 = v440 + 24;
          v562 = (llvm::BasicBlock *)v440;
          llvm::Value::setName((uint64_t ***)v440, (uint64_t)v614);
          v271 = (llvm::Function *)v582;
          v443 = **(_QWORD ***)v579;
          *(_QWORD *)v614 = "atom_loop.latch";
          *(_WORD *)&v614[32] = 259;
          v444 = operator new();
          *(_QWORD *)v444 = *v443 + 1600;
          *(_QWORD *)(v444 + 8) = 0;
          v445 = *(_DWORD *)(v444 + 20) & 0xC0000000;
          *(_DWORD *)(v444 + 16) = 22;
          *(_DWORD *)(v444 + 20) = v445;
          *(_QWORD *)(v444 + 24) = 0;
          *(_QWORD *)(v444 + 32) = 0;
          *(_QWORD *)(v444 + 40) = v444 + 40;
          *(_QWORD *)(v444 + 48) = v444 + 40;
          *(_QWORD *)(v444 + 56) = 0;
          llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v570, (_QWORD *)v444);
          v446 = *(_QWORD *)v569;
          *(_QWORD *)(v444 + 32) = v569;
          *(_QWORD *)(v444 + 24) = v446;
          *(_QWORD *)(v446 + 8) = v444 + 24;
          *(_QWORD *)v569 = v444 + 24;
          v430 = v564;
          v568 = (llvm::BasicBlock *)v444;
          v447 = (uint64_t ***)v444;
          v279 = v576;
          llvm::Value::setName(v447, (uint64_t)v614);
          v431 = (llvm::BasicBlock *)v434;
          v429 = v650[1];
          v567 = v594;
        }
        if (v429)
        {
          for (k = (_QWORD *)*((_QWORD *)v431 + 6); k != (_QWORD *)((char *)v431 + 40); k = (_QWORD *)k[1])
          {
            v449 = k - 3;
            if (k)
              v450 = k - 3;
            else
              v450 = 0;
            if (*((_BYTE *)v450 + 16) != 83)
              goto LABEL_561;
          }
          v449 = 0;
LABEL_561:
          if (v449)
            v451 = (uint64_t)(v449 + 3);
          else
            v451 = 0;
        }
        else
        {
          v451 = (uint64_t)v431 + 40;
        }
        v563 = v431;
        v565 = v430;
        sub_1C4D8ADA0((uint64_t)&v636, (uint64_t **)v431, v451, 0, 0, 0);
        v452 = *(_QWORD *)v415;
        if (*(_QWORD *)v415 == *(_QWORD *)v642 + 1576)
        {
          v453 = 0;
        }
        else
        {
          *(_WORD *)&v614[32] = 257;
          v453 = (uint64_t *)sub_1C4867E94((uint64_t)&v636, v452, 2, (uint64_t)v614);
        }
        if (v650[1])
        {
          for (m = (_QWORD *)*((_QWORD *)v568 + 6); m != (_QWORD *)((char *)v568 + 40); m = (_QWORD *)m[1])
          {
            v455 = m - 3;
            if (m)
              v456 = m - 3;
            else
              v456 = 0;
            if (*((_BYTE *)v456 + 16) != 83)
              goto LABEL_577;
          }
          v455 = 0;
LABEL_577:
          if (v455)
            v457 = (uint64_t)(v455 + 3);
          else
            v457 = 0;
        }
        else
        {
          v457 = (uint64_t)v568 + 40;
        }
        sub_1C4D8AE2C((uint64_t)&v636, (uint64_t)v568, v457);
        if (v453)
        {
          v458 = *v453;
          *(_WORD *)&v614[32] = 257;
          v459 = (llvm::UndefValue **)v453;
          v460 = (llvm::Value *)sub_1C4867E94((uint64_t)&v636, v458, 2, (uint64_t)v614);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v415, v460, (llvm::Value *)1);
          v462 = llvm::UndefValue::get(*v459, v461);
          sub_1C477667C((llvm::PHINode *)v459, (uint64_t)v462, (uint64_t)v567);
          sub_1C477667C((llvm::PHINode *)v459, (uint64_t)v460, (uint64_t)v568);
          sub_1C477667C(v460, (uint64_t)v459, (uint64_t)v563);
          v566 = v460;
          sub_1C477667C(v460, v415, (uint64_t)v562);
        }
        else
        {
          v566 = 0;
        }
        if (v650[0])
        {
          if ((_DWORD)v663)
          {
            v463 = (char *)v662;
            v464 = (char *)v662 + 8 * v663;
            do
            {
              v465 = *(_QWORD **)v463;
              v466 = *(_DWORD *)(*(_QWORD *)v463 + 20);
              if ((v466 & 0x40000000) != 0)
                v467 = (_QWORD *)*(v465 - 1);
              else
                v467 = &v465[-4 * (v466 & 0x7FFFFFF)];
              v468 = *(_DWORD *)(v415 + 20);
              if ((v468 & 0x40000000) != 0)
              {
                v470 = *(_QWORD *)(v415 - 8);
                v469 = v468 & 0x7FFFFFF;
              }
              else
              {
                v469 = v468 & 0x7FFFFFF;
                v470 = v415 - 32 * v469;
              }
              if (v469)
              {
                v471 = v467[4];
                v472 = (_QWORD *)(v471 + 8);
                v473 = 32 * v469;
                v474 = (_QWORD **)(v470 + 8);
                do
                {
                  v475 = v474 - 1;
                  if (*(v474 - 1) == v465)
                  {
                    *v474[1] = *v474;
                    if (*v474)
                      (*v474)[2] = v474[1];
                    *v475 = v471;
                    if (v471)
                    {
                      v476 = (_QWORD *)*v472;
                      *v474 = (_QWORD *)*v472;
                      if (v476)
                        v476[2] = v474;
                      v474[1] = v472;
                      *v472 = v475;
                    }
                  }
                  v474 += 4;
                  v473 -= 32;
                }
                while (v473);
              }
              v463 += 8;
            }
            while (v463 != v464);
          }
          v477 = (char *)*((_QWORD *)v650[2] + 5);
          if (v477 == (char *)v650[2] + 40)
          {
            v479 = 0;
          }
          else
          {
            if (v477)
              v478 = (unsigned __int8 *)(v477 - 24);
            else
              v478 = 0;
            if (v478[16] - 29 >= 0xB)
              v479 = 0;
            else
              v479 = (llvm::Instruction *)v478;
          }
          llvm::Instruction::moveBefore((llvm::Instruction *)v415, v479);
          LODWORD(v657) = 0;
          v480 = v594;
          v186 = v580;
          goto LABEL_612;
        }
        v482 = v567 + 5;
        v481 = (uint64_t **)v567[5];
        if (v481 == v567 + 5)
        {
          v483 = 0;
        }
        else
        {
          if (v481)
            v484 = (unsigned __int8 *)(v481 - 3);
          else
            v484 = 0;
          if (v484[16] - 29 >= 0xB)
            v483 = 0;
          else
            v483 = (llvm::Instruction *)v484;
        }
        llvm::Instruction::setSuccessor(v483, 0, v563);
        v485 = (_QWORD *)*v482;
        if ((_QWORD *)*v482 == v482)
        {
          v486 = 0;
        }
        else
        {
          if (v485)
            v486 = v485 - 3;
          else
            v486 = 0;
          if (*((unsigned __int8 *)v486 + 16) - 29 >= 0xB)
            v486 = 0;
        }
        sub_1C4D8AE2C((uint64_t)&v636, (uint64_t)v567, (uint64_t)(v486 + 3));
        if (!v561)
        {
          if (*((char *)v8 + 743) < 0)
          {
            sub_1C47EBC30(__p, *((void **)v8 + 90), *((_QWORD *)v8 + 91));
          }
          else
          {
            *(_OWORD *)__p = *(_OWORD *)v558;
            v605 = *((_QWORD *)v558 + 2);
          }
          v606 = *(_OWORD *)v559;
          v607 = *((_QWORD *)v559 + 2);
          if (SHIBYTE(v605) < 0)
            operator delete(__p[0]);
          v487 = llvm::Intrinsic::getDeclaration(*((uint64_t **)v572 + 6), 2011, 0, 0);
          v488 = 0;
          if (v487)
            v488 = *(uint64_t ***)(v487 + 24);
          *(_WORD *)&v614[32] = 257;
          v561 = sub_1C4774778((uint64_t *)&v636, v488, v487, 0, 0, (uint64_t)v614, 0);
        }
        sub_1C4D8AE2C((uint64_t)&v636, (uint64_t)v563, (uint64_t)v563 + 40);
        v489 = *(_QWORD *)v642 + 1960;
        *(_WORD *)&v614[32] = 257;
        v597 = (llvm::PHINode *)sub_1C4867E94((uint64_t)&v636, v489, 2, (uint64_t)v614);
        v491 = *(llvm::ConstantInt **)(*(_QWORD *)v642 + 1960);
        v492 = *(_DWORD *)(*(_QWORD *)v642 + 1968);
        *(_DWORD *)&v614[8] = v492 >> 8;
        if (v492 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)v614, 1, 0);
        }
        else
        {
          if (v492 <= 0xFF)
            v493 = 0;
          else
            v493 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v492);
          *(_QWORD *)v614 = v493 & 1;
        }
        v577 = v279;
        v494 = llvm::ConstantInt::get(v491, (llvm::LLVMContext *)v614, v490);
        if (*(_DWORD *)&v614[8] >= 0x41u && *(_QWORD *)v614)
          MEMORY[0x1CAA32F9C](*(_QWORD *)v614, 0x1000C8000313F17);
        *(_WORD *)&v614[32] = 257;
        v496 = sub_1C4D89BCC((uint64_t)&v636, v597, (uint64_t)v494, (uint64_t)v614);
        v497 = *(llvm::ConstantInt **)(*(_QWORD *)v642 + 1960);
        *(_DWORD *)&v614[8] = *(_DWORD *)(*(_QWORD *)v642 + 1968) >> 8;
        if (*(_DWORD *)&v614[8] > 0x40u)
          llvm::APInt::initSlowCase((llvm::APInt *)v614, 0, 0);
        else
          *(_QWORD *)v614 = 0;
        v498 = llvm::ConstantInt::get(v497, (llvm::LLVMContext *)v614, v495);
        if (*(_DWORD *)&v614[8] >= 0x41u && *(_QWORD *)v614)
          MEMORY[0x1CAA32F9C](*(_QWORD *)v614, 0x1000C8000313F17);
        *(_WORD *)&v614[32] = 257;
        v499 = (llvm::Value *)sub_1C4774B48((uint64_t)&v636, 32, v496, (uint64_t)v498, (uint64_t)v614);
        v500 = operator new(0xA0uLL);
        v501 = v500;
        v502 = 0;
        v503 = (llvm::Value *)(v500 + 24);
        v500[29] = v500[29] & 0x38000000 | 3;
        do
        {
          v504 = &v500[v502];
          *v504 = 0;
          v504[1] = 0;
          v504[2] = 0;
          v504[3] = v503;
          v502 += 8;
        }
        while (v502 != 24);
        llvm::BranchInst::BranchInst((llvm::BranchInst *)(v500 + 24), v568, v562, v499, 0);
        *(_WORD *)&v614[32] = 257;
        (*(void (**)(uint64_t, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v643 + 16))(v643, v503, v614, v640, v641);
        if ((_DWORD)v637)
        {
          v512 = (char *)v636;
          v513 = (char *)v636 + 16 * v637;
          v514 = (unsigned __int8 **)(v501 + 36);
          do
          {
            v515 = *(_DWORD *)v512;
            v516 = (unsigned __int8 *)*((_QWORD *)v512 + 1);
            if (v516)
            {
              if (!v515)
              {
                v613 = (unsigned __int8 *)*((_QWORD *)v512 + 1);
                llvm::MetadataTracking::track((uint64_t)&v613, v516, 2);
                v517 = *v514;
                goto LABEL_669;
              }
            }
            else
            {
              v517 = *v514;
              if (!*v514 && (*((_BYTE *)v501 + 119) & 0x20) == 0)
                goto LABEL_666;
              if (!v515)
              {
                v613 = 0;
LABEL_669:
                if (v517)
                  llvm::MetadataTracking::untrack((uint64_t)(v501 + 36), v517);
                v518 = v613;
                *v514 = v613;
                if (v518)
                  llvm::MetadataTracking::retrack((uint64_t)&v613, v518, (uint64_t)(v501 + 36));
                goto LABEL_666;
              }
            }
            llvm::Value::setMetadata(v503, *(_DWORD *)v512, (llvm::MDNode *)v516);
LABEL_666:
            v512 += 16;
          }
          while (v512 != v513);
        }
        v557 = (_QWORD *)((char *)v562 + 40);
        sub_1C4D8AE2C((uint64_t)&v636, (uint64_t)v562, (uint64_t)v562 + 40);
        v505 = (char *)operator new(0x60uLL);
        v506 = v505;
        *((_DWORD *)v505 + 13) = *((_DWORD *)v505 + 13) & 0x38000000 | 1;
        *(_QWORD *)v505 = 0;
        *((_QWORD *)v505 + 2) = 0;
        *((_QWORD *)v505 + 1) = 0;
        *((_QWORD *)v505 + 4) = ***(_QWORD ***)v568 + 1576;
        v507 = (llvm::Value *)(v505 + 32);
        *((_QWORD *)v505 + 3) = v505 + 32;
        *((_QWORD *)v505 + 5) = 0;
        v505[48] = 30;
        v505[49] = 0;
        *((_WORD *)v505 + 25) = 0;
        *((_DWORD *)v505 + 13) = 1;
        *(_OWORD *)(v505 + 56) = 0u;
        *(_OWORD *)(v505 + 72) = 0u;
        *((_DWORD *)v505 + 22) = 0;
        *(_QWORD *)v505 = v568;
        v508 = (_QWORD *)((char *)v568 + 8);
        v509 = *((_QWORD *)v568 + 1);
        *((_QWORD *)v505 + 1) = v509;
        if (v509)
          *(_QWORD *)(v509 + 16) = v505 + 8;
        *((_QWORD *)v505 + 2) = v508;
        *v508 = v505;
        *(_WORD *)&v614[32] = 257;
        (*(void (**)(uint64_t, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v643 + 16))(v643, v507, v614, v640, v641);
        if ((_DWORD)v637)
        {
          v519 = (char *)v636;
          v520 = (char *)v636 + 16 * v637;
          v521 = (unsigned __int8 **)(v506 + 80);
          do
          {
            v522 = *(_DWORD *)v519;
            v523 = (unsigned __int8 *)*((_QWORD *)v519 + 1);
            if (v523)
            {
              if (!v522)
              {
                v613 = (unsigned __int8 *)*((_QWORD *)v519 + 1);
                llvm::MetadataTracking::track((uint64_t)&v613, v523, 2);
                v524 = *v521;
                goto LABEL_684;
              }
            }
            else
            {
              v524 = *v521;
              if (!*v521 && (v506[55] & 0x20) == 0)
                goto LABEL_681;
              if (!v522)
              {
                v613 = 0;
LABEL_684:
                if (v524)
                  llvm::MetadataTracking::untrack((uint64_t)(v506 + 80), v524);
                v525 = v613;
                *v521 = v613;
                if (v525)
                  llvm::MetadataTracking::retrack((uint64_t)&v613, v525, (uint64_t)(v506 + 80));
                goto LABEL_681;
              }
            }
            llvm::Value::setMetadata(v507, *(_DWORD *)v519, (llvm::MDNode *)v523);
LABEL_681:
            v519 += 16;
          }
          while (v519 != v520);
        }
        v510 = (_QWORD *)*v557;
        if ((_QWORD *)*v557 == v557)
        {
          v511 = 0;
        }
        else
        {
          if (v510)
            v526 = (unsigned __int8 *)(v510 - 3);
          else
            v526 = 0;
          if (v526[16] - 29 >= 0xB)
            v511 = 0;
          else
            v511 = (llvm::Instruction *)v526;
        }
        llvm::Instruction::moveBefore((llvm::Instruction *)v415, v511);
        sub_1C4D8AE2C((uint64_t)&v636, (uint64_t)v568, (uint64_t)v568 + 40);
        v528 = *(llvm::ConstantInt **)(*(_QWORD *)v642 + 1960);
        v529 = *(_DWORD *)(*(_QWORD *)v642 + 1968);
        *(_DWORD *)&v614[8] = v529 >> 8;
        if (v529 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)v614, 1, 0);
        }
        else
        {
          if (v529 <= 0xFF)
            v530 = 0;
          else
            v530 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v529);
          *(_QWORD *)v614 = v530 & 1;
        }
        v531 = llvm::ConstantInt::get(v528, (llvm::LLVMContext *)v614, v527);
        if (*(_DWORD *)&v614[8] >= 0x41u && *(_QWORD *)v614)
          MEMORY[0x1CAA32F9C](*(_QWORD *)v614, 0x1000C8000313F17);
        *(_WORD *)&v614[32] = 257;
        v533 = sub_1C506ED1C((uint64_t)&v636, (uint64_t)v597, (uint64_t)v531, (uint64_t)v614, 0);
        v534 = *(llvm::ConstantInt **)(*(_QWORD *)v642 + 1960);
        *(_DWORD *)&v614[8] = *(_DWORD *)(*(_QWORD *)v642 + 1968) >> 8;
        if (*(_DWORD *)&v614[8] > 0x40u)
          llvm::APInt::initSlowCase((llvm::APInt *)v614, 0, 0);
        else
          *(_QWORD *)v614 = 0;
        v535 = llvm::ConstantInt::get(v534, (llvm::LLVMContext *)v614, v532);
        if (*(_DWORD *)&v614[8] >= 0x41u && *(_QWORD *)v614)
          MEMORY[0x1CAA32F9C](*(_QWORD *)v614, 0x1000C8000313F17);
        *(_WORD *)&v614[32] = 257;
        v536 = (llvm::Value *)sub_1C4774B48((uint64_t)&v636, 32, v533, (uint64_t)v535, (uint64_t)v614);
        v537 = operator new(0xA0uLL);
        v538 = v537;
        v539 = 0;
        v540 = (llvm::Value *)(v537 + 24);
        v537[29] = v537[29] & 0x38000000 | 3;
        do
        {
          v541 = &v537[v539];
          *v541 = 0;
          v541[1] = 0;
          v541[2] = 0;
          v541[3] = v540;
          v539 += 8;
        }
        while (v539 != 24);
        llvm::BranchInst::BranchInst((llvm::BranchInst *)(v537 + 24), v565, v563, v536, 0);
        *(_WORD *)&v614[32] = 257;
        (*(void (**)(uint64_t, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v643 + 16))(v643, v540, v614, v640, v641);
        if ((_DWORD)v637)
        {
          v550 = (char *)v636;
          v551 = (char *)v636 + 16 * v637;
          v552 = (unsigned __int8 **)(v538 + 36);
          do
          {
            v553 = *(_DWORD *)v550;
            v554 = (unsigned __int8 *)*((_QWORD *)v550 + 1);
            if (v554)
            {
              if (!v553)
              {
                v613 = (unsigned __int8 *)*((_QWORD *)v550 + 1);
                llvm::MetadataTracking::track((uint64_t)&v613, v554, 2);
                v555 = *v552;
                goto LABEL_749;
              }
            }
            else
            {
              v555 = *v552;
              if (!*v552 && (*((_BYTE *)v538 + 119) & 0x20) == 0)
                goto LABEL_746;
              if (!v553)
              {
                v613 = 0;
LABEL_749:
                if (v555)
                  llvm::MetadataTracking::untrack((uint64_t)(v538 + 36), v555);
                v556 = v613;
                *v552 = v613;
                if (v556)
                  llvm::MetadataTracking::retrack((uint64_t)&v613, v556, (uint64_t)(v538 + 36));
                goto LABEL_746;
              }
            }
            llvm::Value::setMetadata(v540, *(_DWORD *)v550, (llvm::MDNode *)v554);
LABEL_746:
            v550 += 16;
          }
          while (v550 != v551);
        }
        sub_1C477667C(v597, v561, (uint64_t)v567);
        sub_1C477667C(v597, v533, (uint64_t)v568);
        v542 = *((_QWORD *)v565 + 6);
        if (v542)
          v543 = (llvm::Instruction *)(v542 - 24);
        else
          v543 = 0;
        v612 = v543;
        *(_QWORD *)v614 = v567;
        *(_QWORD *)&v614[8] = v563;
        *(_QWORD *)&v614[16] = v562;
        *(_QWORD *)&v614[24] = v568;
        *(_QWORD *)&v614[32] = v565;
        *(_QWORD *)&v615 = &v617;
        *((_QWORD *)&v615 + 1) = &v617;
        *(_QWORD *)&v616 = 32;
        DWORD2(v616) = 0;
        v627 = v629;
        v628 = 0x2000000000;
        v630 = 1;
        v631 = v560;
        v632 = v560;
        v633 = v635;
        v634 = 0x400000000;
        v650[4] = v565;
        *(_OWORD *)&v650[2] = *(_OWORD *)&v614[16];
        *(_OWORD *)v650 = *(_OWORD *)v614;
        if (*((_QWORD *)&__dst + 1) != (_QWORD)__dst)
          free(*((void **)&__dst + 1));
        v271 = (llvm::Function *)v582;
        v8 = v602;
        v186 = v580;
        if (*((_QWORD *)&v615 + 1) == (_QWORD)v615)
        {
          *((_QWORD *)&__dst + 1) = __dst;
          if (DWORD1(v616))
            memmove((void *)__dst, *((const void **)&v615 + 1), 8 * DWORD1(v616));
        }
        else
        {
          *((_QWORD *)&__dst + 1) = *((_QWORD *)&v615 + 1);
          *((_QWORD *)&v615 + 1) = v615;
        }
        *(_QWORD *)&v652 = v616;
        DWORD2(v652) = DWORD2(v616);
        *(_QWORD *)&v616 = 32;
        DWORD2(v616) = 0;
        v544 = v627;
        if (v627 != v629)
        {
          if (v656 != v658)
          {
            free(v656);
            v544 = v627;
          }
          v656 = v544;
          v657 = v628;
          v627 = v629;
          HIDWORD(v628) = 0;
          goto LABEL_756;
        }
        v545 = v628;
        v546 = v657;
        if (v657 >= v628)
        {
          if ((_DWORD)v628)
            memmove(v656, v629, 8 * v628);
          LODWORD(v657) = v545;
LABEL_756:
          v271 = (llvm::Function *)v582;
          v8 = v602;
          v186 = v580;
          goto LABEL_722;
        }
        if (HIDWORD(v657) < v628)
        {
          LODWORD(v657) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v656, (uint64_t)v658, v628, 8);
        }
        else if ((_DWORD)v657)
        {
          memmove(v656, v629, 8 * v657);
          goto LABEL_719;
        }
        v546 = 0;
LABEL_719:
        if (v546 != v628)
          memcpy((char *)v656 + 8 * v546, (char *)v627 + 8 * v546, 8 * v628 - 8 * v546);
        LODWORD(v657) = v545;
LABEL_722:
        LODWORD(v628) = 0;
        sub_1C6282584((uint64_t)&v659, (unsigned int *)&v630);
        v547 = v633;
        if (v633 == v635)
        {
          v548 = v634;
          v549 = v663;
          if (v663 < v634)
          {
            if (HIDWORD(v663) < v634)
            {
              LODWORD(v663) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v662, (uint64_t)v577, v634, 8);
            }
            else if ((_DWORD)v663)
            {
              memmove(v662, v635, 8 * v663);
              goto LABEL_727;
            }
            v549 = 0;
LABEL_727:
            if (v549 != v634)
              memcpy((char *)v662 + 8 * v549, (char *)v633 + 8 * v549, 8 * v634 - 8 * v549);
            LODWORD(v663) = v548;
            goto LABEL_730;
          }
          if ((_DWORD)v634)
            memmove(v662, v635, 8 * v634);
          LODWORD(v663) = v548;
        }
        else
        {
          if (v662 != v577)
          {
            free(v662);
            v547 = v633;
          }
          v662 = v547;
          v663 = v634;
          v633 = v635;
          HIDWORD(v634) = 0;
        }
        v271 = (llvm::Function *)v582;
        v8 = v602;
        v186 = v580;
LABEL_730:
        LODWORD(v634) = 0;
        v279 = v577;
        v480 = (uint64_t **)v565;
        if (v633 != v635)
          free(v633);
        if ((v630 & 1) == 0)
          MEMORY[0x1CAA32FB4](v631.i64[0], 8);
        if (v627 != v629)
          free(v627);
        if (*((_QWORD *)&v615 + 1) != (_QWORD)v615)
          free(*((void **)&v615 + 1));
LABEL_612:
        *(_QWORD *)v614 = v566;
        if (v566)
          sub_1C6280544((uint64_t)&v659, (uint64_t *)v614);
        if (v636 != &v638)
          free(v636);
        v594 = v480;
      }
    }
    sub_1C565903C((uint64_t)v650);
    v416 = *(unsigned __int8 *)(v415 + 16);
    goto LABEL_522;
  }
  v650[0] = (void *)1;
  *(int64x2_t *)&v650[1] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(_OWORD *)&v650[3] = *(_OWORD *)&v650[1];
  __dst = *(_OWORD *)&v650[1];
  *(_OWORD *)v600 = *(_OWORD *)&v650[1];
  v652 = *(_OWORD *)&v650[1];
  v653 = v655;
  v654 = 0x800000000;
  v78 = *((unsigned int *)v8 + 28);
  if ((_DWORD)v78)
  {
    v193 = (uint64_t *)*((_QWORD *)v8 + 13);
    v194 = &v193[v78];
    do
    {
      v195 = *v193;
      if (*(unsigned __int8 *)(*v193 + 16) >= 0x15u)
      {
        v196 = *(_QWORD *)(v195 + 8);
        if (v196)
        {
          while (1)
          {
            *(_QWORD *)v614 = *(_QWORD *)(v196 + 24);
            v644 = 0;
            if ((sub_1C61252B8(v18, v614, &v644) & 1) == 0)
              break;
            v196 = *(_QWORD *)(v196 + 8);
            if (!v196)
              goto LABEL_236;
          }
          sub_1C5658388(v195, (uint64_t)v650, v197);
        }
      }
LABEL_236:
      ++v193;
    }
    while (v193 != v194);
  }
  *(_QWORD *)v614 = 1;
  *(_OWORD *)&v614[8] = *(_OWORD *)v600;
  *(_OWORD *)&v614[24] = *(_OWORD *)v600;
  v615 = *(_OWORD *)v600;
  v616 = *(_OWORD *)v600;
  v617 = &v619;
  v618 = 0x800000000;
  v646 = 128;
  v79 = operator new(0x2000uLL, (std::align_val_t)8uLL);
  v644 = v79;
  v645 = 0;
  if (v646)
  {
    v80 = (unint64_t)v646 << 6;
    v81 = v79 + 2;
    do
    {
      *v81 = 0;
      v81[1] = -4096;
      *(v81 - 2) = &unk_1E814DA10;
      *(v81 - 1) = 2;
      v81[2] = 0;
      v81 += 8;
      v80 -= 64;
    }
    while (v80);
  }
  LOBYTE(v647) = 0;
  v649 = 0;
  if ((_DWORD)v654)
  {
    v82 = (_BYTE **)v653;
    v83 = 8 * v654;
    do
    {
      v84 = *v82++;
      sub_1C565845C(v84, (uint64_t)v594, v18, (uint64_t)v650, (uint64_t)v614, (uint64_t)&v644);
      v83 -= 8;
    }
    while (v83);
  }
  v85 = **v582;
  v86 = (uint64_t ***)operator new(0x40uLL);
  *((_DWORD *)v86 + 5) &= 0x38000000u;
  v593 = v86;
  llvm::ReturnInst::ReturnInst((llvm::ReturnInst *)v86, v85, 0, (llvm::BasicBlock *)v594);
  v87 = v582[10];
  if (v87)
    v88 = v87 - 3;
  else
    v88 = 0;
  v89 = v88[6];
  if (v89)
    v90 = (uint64_t)v89 - 24;
  else
    v90 = 0;
  v589 = v90;
  v91 = *((unsigned int *)v8 + 28);
  if ((_DWORD)v91)
  {
    v92 = (uint64_t **)*((_QWORD *)v8 + 13);
    v93 = &v92[v91];
    v584 = v93;
    while (1)
    {
      v94 = *v92;
      if (*((unsigned __int8 *)*v92 + 16) >= 0x15u)
      {
        if (((uint64_t)v650[0] & 1) != 0)
        {
          v95 = 8;
          v96 = &v650[1];
        }
        else
        {
          v95 = (int)v650[2];
          if (!LODWORD(v650[2]))
            goto LABEL_114;
          v96 = (void **)v650[1];
        }
        v97 = v95 - 1;
        v98 = v97 & ((v94 >> 4) ^ (v94 >> 9));
        v99 = (uint64_t *)v96[v98];
        if (v94 != v99)
          break;
      }
LABEL_130:
      if (++v92 == v93)
        goto LABEL_146;
    }
    v100 = 1;
    while (v99 != (uint64_t *)-4096)
    {
      v101 = v98 + v100++;
      v98 = v101 & v97;
      v99 = (uint64_t *)v96[v98];
      if (v94 == v99)
        goto LABEL_130;
    }
LABEL_114:
    v102 = *v94;
    sub_1C5658314(*v94, *((_DWORD *)v602 + 186));
    v104 = v103;
    v105 = operator new(0x78uLL);
    v105[13] = v105[13] & 0x38000000 | 1;
    v106 = (llvm::Value *)(v105 + 8);
    *(_QWORD *)v105 = 0;
    *((_QWORD *)v105 + 1) = 0;
    *((_QWORD *)v105 + 2) = 0;
    *((_QWORD *)v105 + 3) = v105 + 8;
    v636 = "thread_invariants.temp";
    v639 = 259;
    v601 = (uint64_t)v104;
    llvm::GlobalVariable::GlobalVariable((uint64_t)(v105 + 8), (uint64_t)v585, v104, 0, 0, 0, (uint64_t)&v636, 0, 0, 0x100000040, 0);
    v107 = (llvm::Value *)llvm::UniqueStringSaver::save(***((_QWORD ***)v105 + 4) + 2136, "thread_invariant", 0x10uLL);
    v109 = v108;
    v110 = ***((_QWORD ***)v105 + 4);
    v636 = v105 + 8;
    v111 = *(_DWORD *)(v110 + 2520);
    if (v111)
    {
      v112 = *(_QWORD *)(v110 + 2504);
      v113 = v111 - 1;
      v114 = v113 & ((v106 >> 4) ^ (v106 >> 9));
      v115 = (llvm::Value **)(v112 + 24 * v114);
      v116 = *v115;
      if (*v115 == v106)
      {
LABEL_116:
        v115[1] = v107;
        v115[2] = v109;
        v105[16] = v105[16] & 0xFFBFFFFF | ((v109 != 0) << 22);
        v117 = (*(uint64_t (**)(uint64_t, llvm::LLVMContext ***))(*(_QWORD *)v581 + 24))(v581, v582);
        (*(void (**)(uint64_t, uint64_t, llvm::Value *))(*(_QWORD *)v117 + 144))(v117, 7, v106);
        (*(void (**)(uint64_t, llvm::Value *, _QWORD, uint64_t))(*(_QWORD *)v117 + 496))(v117, v106, *((_QWORD *)v602 + 96), 8);
        v118 = operator new(0x60uLL);
        v118[13] = v118[13] & 0x38000000 | 1;
        *(_QWORD *)v118 = 0;
        *((_QWORD *)v118 + 1) = 0;
        *((_QWORD *)v118 + 2) = 0;
        *((_QWORD *)v118 + 3) = v118 + 8;
        v636 = "invariant";
        v639 = 259;
        Inst = llvm::LoadInst::LoadInst((uint64_t)(v118 + 8), v601, (uint64_t)v106, (uint64_t)&v636, 0, v589);
        v595 = (llvm::PHINode *)v102;
        v120 = sub_1C5658A0C(Inst, v102, v601, v589);
        v121 = v94[1];
        if (v121)
        {
          v122 = v120;
          v123 = (uint64_t *)(v120 + 8);
          do
          {
            v124 = v121;
            v125 = v121 + 8;
            v121 = *(_QWORD *)(v121 + 8);
            v636 = *(void **)(v125 + 16);
            v608[0] = 0;
            if ((sub_1C61252B8(v18, &v636, v608) & 1) == 0)
            {
              if (*(_QWORD *)v124)
              {
                **(_QWORD **)(v124 + 16) = *(_QWORD *)(v124 + 8);
                v126 = *(_QWORD *)(v124 + 8);
                if (v126)
                  *(_QWORD *)(v126 + 16) = *(_QWORD *)(v124 + 16);
              }
              *(_QWORD *)v124 = v122;
              if (v122)
              {
                v127 = *v123;
                *(_QWORD *)v125 = *v123;
                if (v127)
                  *(_QWORD *)(v127 + 16) = v125;
                *(_QWORD *)(v124 + 16) = v123;
                *v123 = v124;
              }
            }
          }
          while (v121);
        }
        v128 = sub_1C5658D00(v94, (uint64_t)v595, v601, v593[5], (uint64_t)(v593 + 3), (uint64_t **)&v612);
        v129 = operator new(0x80uLL);
        v129[21] = v129[21] & 0x38000000 | 2;
        v130 = (llvm::Instruction *)(v129 + 16);
        *(_QWORD *)v129 = 0;
        *((_QWORD *)v129 + 1) = 0;
        *((_QWORD *)v129 + 2) = 0;
        *((_QWORD *)v129 + 3) = v129 + 16;
        *((_QWORD *)v129 + 4) = 0;
        *((_QWORD *)v129 + 5) = 0;
        *((_QWORD *)v129 + 6) = 0;
        *((_QWORD *)v129 + 7) = v129 + 16;
        llvm::StoreInst::StoreInst((llvm::StoreInst *)(v129 + 16), (llvm::Value *)v128, v106, 0, (llvm::Instruction *)v593);
        v131 = v612;
        if (!v612)
          v131 = v130;
        v612 = v131;
        v93 = v584;
        goto LABEL_130;
      }
      v132 = 0;
      v133 = 1;
      while (v116 != (llvm::Value *)-4096)
      {
        if (v132)
          v134 = 0;
        else
          v134 = v116 == (llvm::Value *)-8192;
        if (v134)
          v132 = v115;
        v135 = v114 + v133++;
        v114 = v135 & v113;
        v115 = (llvm::Value **)(v112 + 24 * v114);
        v116 = *v115;
        if (*v115 == v106)
          goto LABEL_116;
      }
      if (v132)
        v136 = v132;
      else
        v136 = v115;
    }
    else
    {
      v136 = 0;
    }
    v115 = (llvm::Value **)sub_1C53D65B8(v110 + 2504, (uint64_t)&v636, (uint64_t *)&v636, v136);
    v137 = (llvm::Value *)v636;
    v115[1] = 0;
    v115[2] = 0;
    *v115 = v137;
    goto LABEL_116;
  }
LABEL_146:
  v138 = v612;
  if (!v612)
    v138 = (llvm::Instruction *)v593;
  v612 = v138;
  v140 = **(_QWORD **)v602;
  v139 = *(_QWORD *)(*(_QWORD *)v602 + 8);
LABEL_149:
  if (v139 != v140)
  {
    v141 = *(_QWORD *)(v139 - 8);
    v139 -= 8;
    v142 = v141 + 40;
    for (n = *(_QWORD *)(v141 + 48); n != v142; n = *(_QWORD *)(n + 8))
    {
      v144 = n - 24;
      if (n)
        v145 = n - 24;
      else
        v145 = 0;
      if (*(_BYTE *)(v145 + 16) != 83)
        goto LABEL_158;
    }
    v144 = 0;
LABEL_158:
    v146 = v144 + 24;
    while (1)
    {
LABEL_159:
      if (v146 == v142)
        goto LABEL_149;
      if (v146)
        v147 = (void *)(v146 - 24);
      else
        v147 = 0;
      v146 = *(_QWORD *)(v146 + 8);
      if (((uint64_t)v650[0] & 1) != 0)
      {
        v148 = 8;
        v149 = &v650[1];
      }
      else
      {
        v148 = (int)v650[2];
        if (!LODWORD(v650[2]))
          goto LABEL_172;
        v149 = (void **)v650[1];
      }
      v150 = v148 - 1;
      v151 = v150 & ((v147 >> 4) ^ (v147 >> 9));
      v152 = v149[v151];
      if (v147 != v152)
      {
        v153 = 1;
        while (v152 != (void *)-4096)
        {
          v154 = v151 + v153++;
          v151 = v154 & v150;
          v152 = v149[v151];
          if (v147 == v152)
            goto LABEL_159;
        }
LABEL_172:
        v636 = v147;
        v608[0] = 0;
        if (sub_1C61252B8(v18, &v636, v608))
          llvm::Instruction::moveBefore((llvm::Instruction *)v147, v612);
      }
    }
  }
  v155 = (*(uint64_t (**)(uint64_t, llvm::LLVMContext ***))(*(_QWORD *)v581 + 24))(v581, v582);
  v156 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v155 + 560))(v155);
  (*(void (**)(uint64_t, llvm::Function *, uint64_t))(*(_QWORD *)v581 + 32))(v581, v579, v156);
  if (v649)
  {
    sub_1C4E43068((uint64_t)&v647);
    MEMORY[0x1CAA32FB4](v647, 8);
    v649 = 0;
  }
  v157 = (char *)v644;
  if (v646)
  {
    v158 = (char *)v644 + 64 * (unint64_t)v646;
    do
    {
      v159 = *((_QWORD *)v157 + 3);
      if ((v159 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v160 = *((_QWORD *)v157 + 7);
        if (v160)
        {
          if (v160 != -8192 && v160 != -4096)
          {
            v161 = *((_QWORD *)v157 + 5) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v161 = *((_QWORD *)v157 + 6);
            v162 = (unint64_t *)*((_QWORD *)v157 + 6);
            if (v162)
            {
              *v162 = *v162 & 7 | v161;
            }
            else
            {
              v163 = *((_QWORD *)v157 + 7);
              v164 = ***(int32x2_t ****)v163;
              v165 = (unint64_t)v164[303];
              if (v165 <= v161)
              {
                v166 = v164[305].u32[0];
                if (v165 + 16 * v166 > v161)
                {
                  v167 = v166 - 1;
                  LODWORD(v168) = v167 & ((v163 >> 4) ^ (v163 >> 9));
                  v169 = (uint64_t *)(v165 + 16 * v168);
                  v170 = *v169;
                  if (v163 == *v169)
                  {
LABEL_190:
                    *v169 = -8192;
                    v164[304] = vadd_s32(v164[304], (int32x2_t)0x1FFFFFFFFLL);
                    v163 = *((_QWORD *)v157 + 7);
                  }
                  else
                  {
                    v171 = 1;
                    while (v170 != -4096)
                    {
                      v172 = v168 + v171++;
                      v168 = v172 & v167;
                      v170 = *(_QWORD *)(v165 + 16 * v168);
                      if (v163 == v170)
                      {
                        v169 = (uint64_t *)(v165 + 16 * v168);
                        goto LABEL_190;
                      }
                    }
                  }
                  *(_BYTE *)(v163 + 17) &= ~1u;
                }
              }
            }
            v159 = *((_QWORD *)v157 + 3);
          }
        }
      }
      if (v159 != -4096 && v159 != -8192 && v159 != 0)
      {
        v174 = *((_QWORD *)v157 + 1) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v174 = *((_QWORD *)v157 + 2);
        v175 = (unint64_t *)*((_QWORD *)v157 + 2);
        if (v175)
        {
          *v175 = *v175 & 7 | v174;
        }
        else
        {
          v176 = *((_QWORD *)v157 + 3);
          v177 = ***(int32x2_t ****)v176;
          v178 = (unint64_t)v177[303];
          if (v178 <= v174)
          {
            v179 = v177[305].u32[0];
            if (v178 + 16 * v179 > v174)
            {
              v180 = v179 - 1;
              LODWORD(v181) = v180 & ((v176 >> 4) ^ (v176 >> 9));
              v182 = (uint64_t *)(v178 + 16 * v181);
              v183 = *v182;
              if (v176 == *v182)
              {
LABEL_209:
                *v182 = -8192;
                v177[304] = vadd_s32(v177[304], (int32x2_t)0x1FFFFFFFFLL);
                v176 = *((_QWORD *)v157 + 3);
              }
              else
              {
                v184 = 1;
                while (v183 != -4096)
                {
                  v185 = v181 + v184++;
                  v181 = v185 & v180;
                  v183 = *(_QWORD *)(v178 + 16 * v181);
                  if (v176 == v183)
                  {
                    v182 = (uint64_t *)(v178 + 16 * v181);
                    goto LABEL_209;
                  }
                }
              }
              *(_BYTE *)(v176 + 17) &= ~1u;
            }
          }
        }
      }
      v157 += 64;
    }
    while (v157 != v158);
    v157 = (char *)v644;
  }
  MEMORY[0x1CAA32FB4](v157, 8);
  if (v617 != &v619)
    free(v617);
  if ((v614[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)&v614[8], 8);
  if (v653 != v655)
    free(v653);
  if (((uint64_t)v650[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v650[1], 8);
}

void sub_1C5658018(int32x2_t *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  unsigned int v31;
  unsigned int v32;
  _QWORD v33[4];
  void *v34;
  uint64_t v35;
  _QWORD v36[34];

  v36[32] = *MEMORY[0x1E0C80C00];
  v34 = v36;
  v35 = 0x1000000000;
  v30 = v33;
  v32 = 4;
  v33[0] = a2;
  v3 = (uint64_t *)&a1[23];
  v4 = (uint64_t)&a1[64];
  v5 = (uint64_t)&a1[26];
  v25 = (uint64_t)&a1[4];
  v6 = 1;
  do
  {
    while (1)
    {
      v7 = *((_QWORD *)v30 + --v6);
      v31 = v6;
      v8 = *(_DWORD *)(v7 + 20);
      if ((v8 & 0x40000000) != 0)
        break;
      v9 = v8 & 0x7FFFFFF;
      v10 = (uint64_t *)(v7 - 32 * v9);
      if (v9)
        goto LABEL_7;
LABEL_4:
      if (!v6)
        goto LABEL_22;
    }
    v10 = *(uint64_t **)(v7 - 8);
    v9 = v8 & 0x7FFFFFF;
    if (!v9)
      goto LABEL_4;
LABEL_7:
    v11 = 32 * v9;
    do
    {
      v26 = 0;
      v12 = *v10;
      if (*(unsigned __int8 *)(*v10 + 16) <= 0x1Bu)
        v12 = 0;
      v26 = v12;
      if (v12)
      {
        v28 = v12;
        v27[0] = 0;
        if (sub_1C61252B8(v3, &v28, v27))
        {
          v13 = v27[0];
          if (v27[0] != *(_QWORD *)&a1[23] + 16 * a1[25].u32[0])
          {
            sub_1C62823C0(v4, &v26);
            v14 = v26;
            v15 = *(unsigned __int8 *)(v13 + 8);
            v16 = v35;
            if (v35 >= (unint64_t)HIDWORD(v35))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, (uint64_t)v36, v35 + 1, 16);
              v16 = v35;
            }
            v17 = (uint64_t *)((char *)v34 + 16 * v16);
            *v17 = v14;
            v17[1] = v15;
            LODWORD(v35) = v35 + 1;
            v18 = v26;
            v19 = v31;
            if (v31 >= (unint64_t)v32)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, (uint64_t)v33, v31 + 1, 8);
              v19 = v31;
            }
            *((_QWORD *)v30 + v19) = v18;
            ++v31;
            *(_QWORD *)v13 = -8192;
            a1[24] = vadd_s32(a1[24], (int32x2_t)0x1FFFFFFFFLL);
            if (sub_1C62823C0(v5, &v26))
              sub_1C4E7C77C(v25, &v26);
          }
        }
      }
      v10 += 4;
      v11 -= 32;
    }
    while (v11);
    v6 = v31;
  }
  while (v31);
LABEL_22:
  v20 = v35;
  if ((_DWORD)v35)
  {
    v21 = (uint64_t)&a1[1];
    do
    {
      v22 = (char *)v34 + 16 * v20;
      v24 = *((_QWORD *)v22 - 2);
      v23 = *((_QWORD *)v22 - 1);
      LODWORD(v35) = v20 - 1;
      v28 = v24;
      v29 = v23 & 1;
      sub_1C6282328((uint64_t)v27, v21, &v28, &v29);
      v20 = v35;
    }
    while ((_DWORD)v35);
  }
  if (v30 != v33)
    free(v30);
  if (v34 != v36)
    free(v34);
}

uint64_t sub_1C56582C4(_DWORD *a1, _QWORD *a2)
{
  uint64_t result;
  int v4;
  _QWORD *v5;

  v5 = 0;
  result = sub_1C4E7C8C0((uint64_t)a1, a2, &v5);
  if ((_DWORD)result)
  {
    *v5 = -8192;
    v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

double sub_1C5658314(uint64_t a1, int a2)
{
  double result;

  if (*(_DWORD *)(a1 + 8) != 269
    && (a2 - 27) >= 3
    && *(_DWORD *)(a1 + 8)
    && (*(_DWORD *)(a1 + 8) & 0xFE) == 0x12
    && !*(_BYTE *)(*(_QWORD *)(a1 + 24) + 8))
  {
    return llvm::FixedVectorType::get((llvm::FixedVectorType *)(**(_QWORD **)a1 + 1672), (llvm::Type *)*(unsigned int *)(a1 + 32));
  }
  return result;
}

uint64_t sub_1C5658388@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  int v5;
  uint64_t result;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;

  v5 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v5 == 73)
  {
    result = sub_1C5658388(*(_QWORD *)(a1 - 32), a2);
    if ((_DWORD)result)
    {
      v9 = a1;
      sub_1C4E7C77C(a2, &v9);
      return 1;
    }
  }
  else
  {
    if (v5 == 60)
    {
      v7 = *(unsigned __int8 **)(a1 - 32);
      v8 = *(_DWORD *)(*(_QWORD *)v7 + 8);
      if ((v8 & 0xFE) == 0x12)
        v8 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v7 + 16) + 8);
      if ((v8 & 0xFFFFFF00) == 0x4000 && v7[16] <= 0x14u)
      {
        v9 = a1;
        sub_1C4E7C77C(a2, &v9);
        a3 = 1;
      }
      else
      {
        a3 = 0;
      }
    }
    return (v5 == 60) & a3;
  }
  return result;
}

void sub_1C565845C(_BYTE *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  _BYTE *v16;
  int v17;
  unsigned int v18;
  uint64_t ***v19;
  uint64_t ***v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  llvm::Instruction *v26;
  int v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t **v31;
  uint64_t *v32;
  _QWORD *v33;
  unint64_t v34;
  llvm::Instruction *v35;
  int32x2_t *v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  llvm::Instruction **v41;
  llvm::Instruction *v42;
  int v43;
  int v44;
  uint64_t ***v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  void *v50;
  int v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  void *v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t **v59;
  uint64_t v60;
  llvm::LLVMContext *v61;
  llvm::LLVMContext *v62;
  uint64_t v63;
  llvm::ValueSymbolTable *v64;
  unint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  int32x2_t *v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  int v75;
  int v76;
  llvm::Instruction *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  char *v81;
  llvm::Instruction *v82;
  uint64_t v83;

  if (a1 && a1[16] == 73)
    sub_1C565845C(*((_QWORD *)a1 - 4), a2, a3, a4, a5, a6);
  v77 = (llvm::Instruction *)a1;
  v12 = a5 + 8;
  if ((*(_BYTE *)a5 & 1) != 0)
  {
    v13 = 8;
  }
  else
  {
    v13 = *(_DWORD *)(a5 + 16);
    if (!v13)
      goto LABEL_13;
    v12 = *(_QWORD *)(a5 + 8);
  }
  v14 = v13 - 1;
  v15 = v14 & ((a1 >> 4) ^ (a1 >> 9));
  v16 = *(_BYTE **)(v12 + 8 * v15);
  if (v16 == a1)
    return;
  v17 = 1;
  while (v16 != (_BYTE *)-4096)
  {
    v18 = v15 + v17++;
    v15 = v18 & v14;
    v16 = *(_BYTE **)(v12 + 8 * v15);
    if (v16 == a1)
      return;
  }
LABEL_13:
  sub_1C4E7C77C(a5, (uint64_t *)&v77);
  llvm::Instruction::clone(v77);
  v20 = v19;
  if ((*((_BYTE *)v77 + 23) & 0x10) == 0)
    goto LABEL_22;
  v21 = ***(_QWORD ***)v77;
  v22 = *(_QWORD *)(v21 + 152);
  v23 = *(unsigned int *)(v21 + 168);
  if (!(_DWORD)v23)
    goto LABEL_20;
  LODWORD(v24) = (v23 - 1) & ((v77 >> 4) ^ (v77 >> 9));
  v25 = v22 + 16 * v24;
  v26 = *(llvm::Instruction **)v25;
  if (*(llvm::Instruction **)v25 != v77)
  {
    v27 = 1;
    while (v26 != (llvm::Instruction *)-4096)
    {
      v28 = v24 + v27++;
      v24 = v28 & (v23 - 1);
      v26 = *(llvm::Instruction **)(v22 + 16 * v24);
      if (v26 == v77)
      {
        v25 = v22 + 16 * v24;
        goto LABEL_21;
      }
    }
LABEL_20:
    v25 = v22 + 16 * v23;
  }
LABEL_21:
  v29 = *(uint64_t **)(v25 + 8);
  v30 = *v29;
  LOWORD(v83) = 773;
  v79 = v29 + 2;
  v80 = v30;
  v81 = ".clone";
  llvm::Value::setName(v19, (uint64_t)&v79);
LABEL_22:
  v31 = (uint64_t **)(a2 + 40);
  v20[5] = (uint64_t **)a2;
  *(_WORD *)(a2 + 18) &= ~0x8000u;
  if ((*((_BYTE *)v20 + 23) & 0x10) != 0)
  {
    v63 = *(_QWORD *)(a2 + 56);
    if (v63)
    {
      v64 = *(llvm::ValueSymbolTable **)(v63 + 104);
      if (v64)
        llvm::ValueSymbolTable::reinsertValue(v64, (llvm::Value *)v20);
    }
  }
  v32 = *v31;
  v20[3] = (uint64_t **)*v31;
  v20[4] = v31;
  v32[1] = (uint64_t)(v20 + 3);
  *v31 = (uint64_t *)(v20 + 3);
  v80 = 2;
  v81 = 0;
  v82 = v77;
  if (v77 != (llvm::Instruction *)-8192 && v77 != (llvm::Instruction *)-4096 && v77)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v80);
  v79 = &unk_1E814DA10;
  v83 = a6;
  v33 = sub_1C52E2ED8(a6, &v79);
  if (v82 != (llvm::Instruction *)-8192 && v82 != (llvm::Instruction *)-4096 && v82)
  {
    v34 = v80 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v80 & 0xFFFFFFFFFFFFFFF8) = v81;
    if (v81)
    {
      *(_QWORD *)v81 = *(_QWORD *)v81 & 7 | v34;
    }
    else
    {
      v35 = v82;
      v36 = ***(int32x2_t ****)v82;
      v37 = (unint64_t)v36[303];
      if (v37 <= v34)
      {
        v38 = v36[305].u32[0];
        if (v37 + 16 * v38 > v34)
        {
          v39 = v38 - 1;
          LODWORD(v40) = v39 & ((v82 >> 4) ^ (v82 >> 9));
          v41 = (llvm::Instruction **)(v37 + 16 * v40);
          v42 = *v41;
          if (v82 == *v41)
          {
LABEL_38:
            *v41 = (llvm::Instruction *)-8192;
            v36[304] = vadd_s32(v36[304], (int32x2_t)0x1FFFFFFFFLL);
            v35 = v82;
          }
          else
          {
            v43 = 1;
            while (v42 != (llvm::Instruction *)-4096)
            {
              v44 = v40 + v43++;
              v40 = v44 & v39;
              v42 = *(llvm::Instruction **)(v37 + 16 * v40);
              if (v82 == v42)
              {
                v41 = (llvm::Instruction **)(v37 + 16 * v40);
                goto LABEL_38;
              }
            }
          }
          *((_BYTE *)v35 + 17) &= ~1u;
        }
      }
    }
  }
  v45 = (uint64_t ***)v33[7];
  if (v45 != v20)
  {
    if (v45 && v45 != (uint64_t ***)-8192 && v45 != (uint64_t ***)-4096)
    {
      v65 = v33[5] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v65 = v33[6];
      v66 = (unint64_t *)v33[6];
      if (v66)
      {
        *v66 = *v66 & 7 | v65;
      }
      else
      {
        v67 = v33[7];
        v68 = ***(int32x2_t ****)v67;
        v69 = (unint64_t)v68[303];
        if (v69 <= v65)
        {
          v70 = v68[305].u32[0];
          if (v69 + 16 * v70 > v65)
          {
            v71 = v70 - 1;
            LODWORD(v72) = v71 & ((v67 >> 4) ^ (v67 >> 9));
            v73 = (uint64_t *)(v69 + 16 * v72);
            v74 = *v73;
            if (v67 == *v73)
            {
LABEL_81:
              *v73 = -8192;
              v68[304] = vadd_s32(v68[304], (int32x2_t)0x1FFFFFFFFLL);
              v67 = v33[7];
            }
            else
            {
              v75 = 1;
              while (v74 != -4096)
              {
                v76 = v72 + v75++;
                v72 = v76 & v71;
                v74 = *(_QWORD *)(v69 + 16 * v72);
                if (v67 == v74)
                {
                  v73 = (uint64_t *)(v69 + 16 * v72);
                  goto LABEL_81;
                }
              }
            }
            *(_BYTE *)(v67 + 17) &= ~1u;
          }
        }
      }
    }
    v33[7] = v20;
    if (v20 != (uint64_t ***)-8192 && v20 != (uint64_t ***)-4096 && v20)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v33 + 5));
  }
  v46 = *((_QWORD *)v77 + 1);
  if (v46)
  {
    v47 = v20 + 1;
    do
    {
      v48 = v46;
      v49 = (uint64_t *)(v46 + 8);
      v46 = *(_QWORD *)(v46 + 8);
      v50 = (void *)v49[2];
      v78 = 0;
      v79 = v50;
      if (sub_1C61252B8(a3, &v79, &v78))
      {
        if ((*(_BYTE *)a4 & 1) != 0)
        {
          v51 = 8;
          v52 = a4 + 8;
        }
        else
        {
          v51 = *(_DWORD *)(a4 + 16);
          if (!v51)
            goto LABEL_59;
          v52 = *(_QWORD *)(a4 + 8);
        }
        v53 = v51 - 1;
        v54 = v53 & ((v50 >> 4) ^ (v50 >> 9));
        v55 = *(void **)(v52 + 8 * v54);
        if (v50 != v55)
        {
          v56 = 1;
          while (v55 != (void *)-4096)
          {
            v57 = v54 + v56++;
            v54 = v57 & v53;
            v55 = *(void **)(v52 + 8 * v54);
            if (v50 == v55)
              goto LABEL_65;
          }
LABEL_59:
          if (*(_QWORD *)v48)
          {
            **(_QWORD **)(v48 + 16) = *(_QWORD *)(v48 + 8);
            v58 = *(_QWORD *)(v48 + 8);
            if (v58)
              *(_QWORD *)(v58 + 16) = *(_QWORD *)(v48 + 16);
          }
          *(_QWORD *)v48 = v20;
          v59 = v20[1];
          *(_QWORD *)(v48 + 8) = v59;
          if (v59)
            v59[2] = v49;
          *(_QWORD *)(v48 + 16) = v47;
          *v47 = v48;
        }
      }
LABEL_65:
      ;
    }
    while (v46);
  }
  v60 = operator new();
  *(_DWORD *)v60 = 0;
  *(_QWORD *)(v60 + 8) = 0;
  *(_DWORD *)(v60 + 16) = 0;
  *(_QWORD *)(v60 + 40) = a6;
  *(_QWORD *)(v60 + 24) = v60 + 40;
  *(_QWORD *)(v60 + 48) = 0;
  *(_QWORD *)(v60 + 32) = 0x200000001;
  *(_QWORD *)(v60 + 72) = v60 + 88;
  *(_QWORD *)(v60 + 80) = 0x400000000;
  *(_QWORD *)(v60 + 184) = v60 + 200;
  *(_QWORD *)(v60 + 192) = 0x100000000;
  *(_QWORD *)(v60 + 216) = v60 + 232;
  *(_QWORD *)(v60 + 224) = 0x1000000000;
  v78 = v60;
  v79 = (void *)v60;
  sub_1C5FD706C(v60, v20);
  sub_1C5FD3718((uint64_t *)&v79, v61);
  llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v78, v62);
}

uint64_t sub_1C5658A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  const llvm::APInt *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  llvm::ConstantInt *v13;
  unsigned int v14;
  unint64_t v15;
  llvm::ValueHandleBase *v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned __int8 *v19;
  const llvm::APInt *v20;
  llvm::Value **IntegerValue;
  _WORD *v22;
  _DWORD *v23;
  uint64_t ***v24;
  unint64_t v26;
  unsigned int v27;
  __int16 v28;
  void *v29[2];
  _WORD v30[24];
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (a2 == a3)
    return a1;
  if (a2 && (*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
  {
    sub_1C4773D54((uint64_t)v29, a4, 0, 0, 0);
    v10 = (uint64_t)llvm::UndefValue::get((llvm::UndefValue *)a2, v8);
    v11 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v11)
    {
      for (i = 0; i != v11; ++i)
      {
        v13 = *(llvm::ConstantInt **)(*(_QWORD *)v31 + 1960);
        v14 = *(_DWORD *)(*(_QWORD *)v31 + 1968);
        v27 = v14 >> 8;
        if (v14 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v26, i, 0);
        }
        else
        {
          if (v14 <= 0xFF)
            v15 = 0;
          else
            v15 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v14);
          v26 = v15 & i;
        }
        v16 = llvm::ConstantInt::get(v13, (llvm::LLVMContext *)&v26, v9);
        if (v27 >= 0x41 && v26)
          MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
        v28 = 257;
        v17 = (uint64_t *)sub_1C4772EE0((uint64_t *)v29, a1, (uint64_t)v16, (uint64_t)&v26);
        v18 = *(uint64_t **)(a2 + 24);
        v28 = 257;
        v19 = sub_1C4773A70((uint64_t)v29, v17, v18, (uint64_t)&v26);
        v28 = 257;
        v10 = (uint64_t)sub_1C4773154((uint64_t *)v29, v10, (uint64_t)v19, (uint64_t)v16, (uint64_t)&v26);
      }
    }
    v22 = v29[0];
  }
  else
  {
    if (*(_DWORD *)(a2 + 8) != 269)
    {
      v23 = operator new(0x60uLL);
      v23[13] = v23[13] & 0x38000000 | 1;
      v10 = (uint64_t)(v23 + 8);
      *(_QWORD *)v23 = 0;
      *((_QWORD *)v23 + 1) = 0;
      *((_QWORD *)v23 + 2) = 0;
      *((_QWORD *)v23 + 3) = v23 + 8;
      v29[0] = "cast";
      v30[8] = 259;
      v24 = (uint64_t ***)sub_1C4FCD80C((uint64_t)(v23 + 8), a2, 45, a1, a4);
      llvm::Value::setName(v24, (uint64_t)v29);
      return v10;
    }
    sub_1C4773D54((uint64_t)v29, a4, 0, 0, 0);
    v27 = *(_DWORD *)(a3 + 8) >> 8;
    if (v27 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v26, 0, 0);
    else
      v26 = 0;
    IntegerValue = llvm::Constant::getIntegerValue((llvm::Constant ***)a3, (llvm::Type *)&v26, v20);
    if (v27 >= 0x41 && v26)
      MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
    v28 = 257;
    v10 = sub_1C4774B48((uint64_t)v29, 33, a1, (uint64_t)IntegerValue, (uint64_t)&v26);
    v22 = v29[0];
  }
  if (v22 != v30)
    free(v22);
  return v10;
}

uint64_t *sub_1C5658D00(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t a5, uint64_t **a6)
{
  llvm::Type *v10;
  const llvm::APInt *v11;
  const llvm::APInt *v12;
  void *v13;
  uint64_t v14;
  uint64_t i;
  llvm::ConstantInt *v16;
  unsigned int v17;
  unint64_t v18;
  llvm::ValueHandleBase *v19;
  uint64_t *v20;
  uint64_t *v21;
  unsigned __int8 *v22;
  unint64_t v23;
  unint64_t v24;
  const llvm::APInt *v25;
  uint64_t *IntegerValue;
  llvm::Value **v27;
  void *Select;
  const char *v30;
  unsigned int v31;
  __int16 v32;
  void *v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (a2 == a3)
    return a1;
  sub_1C4D8ADA0((uint64_t)v33, a4, a5, 0, 0, 0);
  if (a2 && (*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
  {
    v13 = llvm::UndefValue::get((llvm::UndefValue *)a3, v10);
    v14 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v14)
    {
      for (i = 0; i != v14; ++i)
      {
        v16 = *(llvm::ConstantInt **)(*(_QWORD *)v35 + 1960);
        v17 = *(_DWORD *)(*(_QWORD *)v35 + 1968);
        v31 = v17 >> 8;
        if (v17 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v30, i, 0);
        }
        else
        {
          if (v17 <= 0xFF)
            v18 = 0;
          else
            v18 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v17);
          v30 = (const char *)(v18 & i);
        }
        v19 = llvm::ConstantInt::get(v16, (llvm::LLVMContext *)&v30, v12);
        if (v31 >= 0x41 && v30)
          MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
        v32 = 257;
        v20 = (uint64_t *)sub_1C4772EE0((uint64_t *)v33, (uint64_t)a1, (uint64_t)v19, (uint64_t)&v30);
        if (!*a6)
          *a6 = v20;
        v21 = *(uint64_t **)(a3 + 24);
        v32 = 257;
        v22 = sub_1C47721A0((uint64_t)v33, v20, v21, (uint64_t)&v30);
        v32 = 257;
        v13 = sub_1C4773154((uint64_t *)v33, (uint64_t)v13, (uint64_t)v22, (uint64_t)v19, (uint64_t)&v30);
      }
    }
  }
  else
  {
    if (*(_DWORD *)(a2 + 8) == 269)
    {
      v23 = *(unsigned int *)(a3 + 8);
      v31 = *(_DWORD *)(a3 + 8) >> 8;
      if (v23 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v30, 1, 0);
      }
      else
      {
        v24 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v23);
        if (v23 <= 0xFF)
          LOBYTE(v24) = 0;
        v30 = (const char *)(v24 & 1);
      }
      IntegerValue = (uint64_t *)llvm::Constant::getIntegerValue((llvm::Constant ***)a3, (llvm::Type *)&v30, v11);
      if (v31 >= 0x41 && v30)
        MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
      v31 = v23 >> 8;
      if (v23 >> 8 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v30, 0, 0);
      else
        v30 = 0;
      v27 = llvm::Constant::getIntegerValue((llvm::Constant ***)a3, (llvm::Type *)&v30, v25);
      if (v31 >= 0x41 && v30)
        MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
      v32 = 257;
      Select = llvm::IRBuilderBase::CreateSelect((uint64_t *)v33, (uint64_t)a1, IntegerValue, (uint64_t)v27, (uint64_t)&v30, 0);
    }
    else
    {
      v30 = "cast";
      v32 = 259;
      Select = sub_1C47721A0((uint64_t)v33, a1, (uint64_t *)a3, (uint64_t)&v30);
    }
    v13 = Select;
    if (!*a6)
      *a6 = (uint64_t *)Select;
  }
  if (v33[0] != &v34)
    free(v33[0]);
  return (uint64_t *)v13;
}

double sub_1C565903C(uint64_t a1)
{
  uint64_t v2;
  llvm::Instruction **v3;
  uint64_t v4;
  llvm::Instruction *v5;
  uint64_t v6;
  llvm::Instruction *v7;
  void *v8;
  double result;
  uint64_t v10;
  unsigned int v12;
  int v13;
  unsigned int v14;
  void *v15;

  if (*(_QWORD *)a1)
  {
    v2 = *(unsigned int *)(a1 + 336);
    if ((_DWORD)v2)
    {
      v3 = *(llvm::Instruction ***)(a1 + 328);
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
      if (v4)
        v5 = (llvm::Instruction *)(v4 - 24);
      else
        v5 = 0;
      v6 = 8 * v2;
      do
      {
        v7 = *v3++;
        llvm::Instruction::moveBefore(v7, v5);
        v6 -= 8;
      }
      while (v6);
    }
    *(_DWORD *)(a1 + 336) = 0;
    v8 = *(void **)(a1 + 48);
    if (v8 != *(void **)(a1 + 40))
    {
      v10 = *(unsigned int *)(a1 + 56);
      if (v10 >= 0x21 && 4 * (*(_DWORD *)(a1 + 60) - *(_DWORD *)(a1 + 64)) < v10)
      {
        free(v8);
        v12 = *(_DWORD *)(a1 + 60) - *(_DWORD *)(a1 + 64);
        v13 = 1 << (33 - __clz(v12 - 1));
        *(_DWORD *)(a1 + 60) = 0;
        *(_DWORD *)(a1 + 64) = 0;
        if (v12 <= 0x10)
          v14 = 32;
        else
          v14 = v13;
        *(_DWORD *)(a1 + 56) = v14;
        v15 = malloc_type_malloc(8 * v14, 0x4065EBACuLL);
        if (!v15)
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        *(_QWORD *)(a1 + 48) = v15;
        memset(v15, 255, 8 * *(unsigned int *)(a1 + 56));
        goto LABEL_10;
      }
      memset(v8, 255, 8 * v10);
    }
    *(_DWORD *)(a1 + 60) = 0;
    *(_DWORD *)(a1 + 64) = 0;
LABEL_10:
    sub_1C628250C((_QWORD *)(a1 + 600));
    *(_DWORD *)(a1 + 648) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_QWORD *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t sub_1C5659170(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0)
  {
    v6 = *(_QWORD *)(a2 - 8);
    v5 = v4 & 0x7FFFFFF;
    if (!v5)
      return sub_1C5659224(a1, a2);
  }
  else
  {
    v5 = v4 & 0x7FFFFFF;
    v6 = a2 - 32 * v5;
    if (!v5)
      return sub_1C5659224(a1, a2);
  }
  v7 = 32 * v5;
  while (1)
  {
    v8 = *(_QWORD *)v6;
    if (*(_QWORD *)v6 && *(unsigned __int8 *)(*(_QWORD *)v6 + 16) >= 0x1Cu)
    {
      v11 = 0;
      v12 = v8;
      if ((sub_1C6280980(a1 + 600, &v12, &v11) & 1) != 0)
        break;
    }
    v6 += 32;
    v7 -= 32;
    if (!v7)
      return sub_1C5659224(a1, a2);
  }
  return 1;
}

uint64_t sub_1C5659224(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;

  v3 = *(_DWORD *)(a2 + 20);
  if ((v3 & 0x40000000) != 0)
  {
    v5 = *(uint64_t **)(a2 - 8);
    v4 = v3 & 0x7FFFFFF;
    if (!v4)
      return 0;
  }
  else
  {
    v4 = v3 & 0x7FFFFFF;
    v5 = (uint64_t *)(a2 - 32 * v4);
    if (!v4)
      return 0;
  }
  v6 = 32 * v4;
  while (1)
  {
    if (*v5 && *(unsigned __int8 *)(*v5 + 16) >= 0x1Cu)
    {
      v8 = sub_1C477672C(a1 + 40, *v5);
      v9 = *(_QWORD *)(a1 + 48);
      v10 = (unsigned int *)(v9 == *(_QWORD *)(a1 + 40) ? a1 + 60 : a1 + 56);
      if (v8 != (_QWORD *)(v9 + 8 * *v10))
        break;
    }
    v5 += 4;
    v6 -= 32;
    if (!v6)
      return 0;
  }
  return 1;
}

uint64_t sub_1C56592CC(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Replace buffer content with constants";
  *(_QWORD *)(v2 + 8) = 37;
  *(_QWORD *)(v2 + 16) = "replace-buffer-with-const";
  *(_QWORD *)(v2 + 24) = 25;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F7129;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C565935C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C565935C()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8F7129;
  *(_DWORD *)(result + 24) = 4;
  *(_QWORD *)result = &off_1E8171EE0;
  return result;
}

void sub_1C56593A8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C56593CC()
{
  return "Replace buffer content with constants";
}

uint64_t sub_1C56593DC(uint64_t a1, llvm::AGXIR *a2)
{
  uint64_t ShaderID;
  unsigned int v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  size_t v7;
  std::string *v8;
  uint64_t *v9;
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  uint64_t v15;
  char v16;
  llvm *v18;
  llvm::raw_ostream *v19;
  void *v20;
  _BYTE *v21;
  uint64_t j;
  BOOL *v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  std::string::value_type *v27;
  uint64_t v28;
  uint64_t v29;
  std::string::size_type *v30;
  llvm::DataLayout *v31;
  std::string::size_type v32;
  uint64_t v33;
  llvm::Type *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unsigned int v43;
  int *v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  llvm *v52;
  llvm *v53;
  llvm::raw_ostream *v54;
  void *v55;
  _DWORD *v56;
  _DWORD *v57;
  uint64_t v58;
  unint64_t v59;
  llvm::raw_ostream *v60;
  int v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  unint64_t v65;
  unsigned __int8 *v66;
  const char *v67;
  llvm *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  const void **v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  const void *v76;
  size_t v77;
  uint64_t v79;
  uint64_t v80;
  llvm::Value **NullValue;
  int v82;
  unsigned int v83;
  uint64_t v84;
  char **v85;
  std::string *v86;
  unsigned int v87;
  char *v88;
  std::string::size_type v89;
  uint64_t i;
  unsigned int v91;
  int v92;
  const void *v93;
  std::string::size_type v94;
  char *v95;
  std::string *p_dst;
  int v97;
  std::string::size_type v98;
  uint64_t v99;
  std::string *v100;
  uint64_t v101;
  unint64_t v102;
  int v103;
  int v104;
  std::string *v105;
  std::string *v106;
  unsigned int v107;
  int *v108;
  int v109;
  int *v110;
  int v111;
  BOOL v112;
  unsigned int v113;
  unint64_t v114;
  unint64_t *v115;
  uint64_t v116;
  std::string *v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  unint64_t v121;
  BOOL v122;
  char *v123;
  std::string *v124;
  unsigned int v125;
  int v126;
  int *v127;
  int v128;
  BOOL v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  int v133;
  BOOL v134;
  unsigned int v135;
  char *v136;
  int v137;
  uint64_t v138;
  char **v139;
  int v140;
  unsigned int v141;
  _DWORD *v142;
  uint64_t v143;
  unsigned int *v144;
  uint64_t v145;
  unsigned int *v146;
  uint64_t v147;
  char **v148;
  int v149;
  std::string *v150;
  const void **v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  const void *v155;
  size_t v156;
  char v158;
  BOOL v159;
  const std::string::value_type *v160;
  std::string::size_type v161;
  std::string::size_type v162;
  int v163;
  unsigned int v164;
  uint64_t v165;
  unsigned int *v166;
  unsigned int v167;
  std::string *v168;
  std::string::size_type v169;
  unsigned int v170;
  int *v171;
  int v172;
  int v173;
  unsigned int v174;
  unint64_t v175;
  unint64_t v176;
  _DWORD *v177;
  uint64_t v178;
  unint64_t v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  std::string::size_type v183;
  char v184;
  uint64_t v185;
  void *v186;
  unsigned int *v187;
  uint64_t v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  std::string *v192;
  std::string v193;
  int v194;
  _WORD v195[36];
  std::string __p;
  std::string v197;
  int v198;
  std::string __dst;
  std::string v200;
  __int16 v201;
  uint64_t v202;
  __int128 v203;
  unsigned int v204;
  std::string v205;
  std::string v206;
  void *v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;

  v210 = *MEMORY[0x1E0C80C00];
  ShaderID = llvm::AGXIR::getShaderID(a2, a2);
  if ((ShaderID & 0xFF00000000) != 0)
  {
    v4 = ShaderID;
    v5 = atomic_load((unsigned __int8 *)&qword_1ED808D50);
    if ((v5 & 1) == 0)
    {
      ShaderID = __cxa_guard_acquire(&qword_1ED808D50);
      if ((_DWORD)ShaderID)
      {
        byte_1ED808D77 = 0;
        LOBYTE(qword_1ED808D60) = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE44D0], &qword_1ED808D60, &dword_1C475E000);
        __cxa_guard_release(&qword_1ED808D50);
      }
    }
    v6 = atomic_load((unsigned __int8 *)&qword_1ED808D58);
    if ((v6 & 1) == 0)
    {
      ShaderID = __cxa_guard_acquire(&qword_1ED808D58);
      if ((_DWORD)ShaderID)
      {
        qword_1ED808D80 = 0;
        unk_1ED808D88 = 0;
        qword_1ED808D78 = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE44D0], &qword_1ED808D78, &dword_1C475E000);
        __cxa_guard_release(&qword_1ED808D58);
      }
    }
    memset(&__p, 0, sizeof(__p));
    if (byte_1ED808E10)
    {
      v7 = 0;
      goto LABEL_37;
    }
    if (byte_1ED808D77 >= 0)
      v7 = byte_1ED808D77 & 0x7F;
    else
      v7 = qword_1ED808D68;
    if (v7)
    {
      v8 = &v206;
      sub_1C484371C((uint64_t)&v206, v7 + 23);
      if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v8 = (std::string *)v206.__r_.__value_.__r.__words[0];
      if (byte_1ED808D77 >= 0)
        v9 = &qword_1ED808D60;
      else
        v9 = (uint64_t *)qword_1ED808D60;
      memmove(v8, v9, v7);
      strcpy((char *)v8 + v7, "/bufferMappingForShader");
      std::to_string(&v200, v4);
      if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v200;
      else
        v10 = (std::string *)v200.__r_.__value_.__r.__words[0];
      if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v200.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v200.__r_.__value_.__l.__size_;
      v12 = std::string::append(&v206, (const std::string::value_type *)v10, size);
      v13 = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v193.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v193.__r_.__value_.__r.__words[2] = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      v14 = std::string::append(&v193, ".txt");
      v15 = v14->__r_.__value_.__r.__words[0];
      *(_QWORD *)&v203 = v14->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)&v203 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
      v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      if (byte_1ED808D8F < 0)
        operator delete((void *)qword_1ED808D78);
      qword_1ED808D78 = v15;
      qword_1ED808D80 = v203;
      *(uint64_t *)((char *)&qword_1ED808D80 + 7) = *(_QWORD *)((char *)&v203 + 7);
      byte_1ED808D8F = v16;
      if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v193.__r_.__value_.__l.__data_);
      if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v200.__r_.__value_.__l.__data_);
      if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v206.__r_.__value_.__l.__data_);
      v195[0] = 260;
      v193.__r_.__value_.__r.__words[0] = (std::string::size_type)&qword_1ED808D78;
      sub_1C5E1F6CC((unsigned __int8 *)&v193, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)&v206);
      if ((v206.__r_.__value_.__s.__data_[16] & 1) != 0)
      {
        v7 = v206.__r_.__value_.__r.__words[0];
        if (LODWORD(v206.__r_.__value_.__l.__data_))
        {
          v7 = 0;
          goto LABEL_31;
        }
      }
      else
      {
        std::system_category();
        v7 = v206.__r_.__value_.__r.__words[0];
      }
      std::string::operator=(&__p, (const std::string *)&qword_1ED808D60);
      std::string::append(&__p, "/buffers");
      v195[0] = 260;
      v193.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v200.__r_.__value_.__s.__data_[0] = 0;
      ShaderID = llvm::sys::fs::is_directory((llvm::sys::fs *)&v193, (const llvm::Twine *)&v200, v23);
      if (!(_DWORD)ShaderID)
      {
        if (v200.__r_.__value_.__s.__data_[0])
        {
          if (!byte_1ED808E10)
          {
            j = 1;
LABEL_47:
            v193.__r_.__value_.__r.__words[0] = (std::string::size_type)v195;
            v193.__r_.__value_.__l.__size_ = (std::string::size_type)v195;
            v193.__r_.__value_.__r.__words[2] = 8;
            v194 = 0;
            sub_1C5EA42E4((uint64_t)a2, (llvm::SmallPtrSetImplBase *)&v193, 1);
            if (HIDWORD(v193.__r_.__value_.__r.__words[2]) == v194)
              goto LABEL_166;
            if (byte_1ED808E10)
            {
              v24 = 0;
              v186 = 0;
              v25 = 0;
              v26 = 0;
              goto LABEL_50;
            }
            v86 = &v205;
            v203 = 0uLL;
            v204 = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              sub_1C47EBC30(&v205, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            else
              v205 = __p;
            (*(void (**)(size_t))(*(_QWORD *)v7 + 16))(v7);
            llvm::line_iterator::line_iterator((llvm::line_iterator *)&v200, (const llvm::MemoryBuffer *)v7, 1, 35);
            if ((_BYTE)v201)
            {
              v87 = 0;
              v88 = (char *)&v202;
              while (1)
              {
                v206.__r_.__value_.__r.__words[0] = (std::string::size_type)&v206.__r_.__value_.__r.__words[2];
                v206.__r_.__value_.__l.__size_ = 0x400000000;
                llvm::StringRef::split(v88, (uint64_t)&v206, 44, -1, 1);
                if (LODWORD(v206.__r_.__value_.__r.__words[1]) != 4)
                {
LABEL_267:
                  v137 = DWORD2(v203);
                  if (!*((_QWORD *)&v203 + 1))
                    goto LABEL_300;
                  if (v204 > 4 * DWORD2(v203) && v204 >= 0x41)
                  {
                    v138 = 152 * v204;
                    v139 = (char **)(v203 + 8);
                    do
                    {
                      if (*((_DWORD *)v139 - 2) <= 0xFFFFFFFD)
                        v139 = sub_1C5053158(v139);
                      v139 += 19;
                      v138 -= 152;
                    }
                    while (v138);
                    v140 = 1 << (33 - __clz(v137 - 1));
                    if (v140 <= 64)
                      v140 = 64;
                    if (v137)
                      v141 = v140;
                    else
                      v141 = 0;
                    if (v141 == v204)
                    {
                      *((_QWORD *)&v203 + 1) = 0;
                      if (v141)
                      {
                        v142 = (_DWORD *)v203;
                        v143 = 152 * v141;
                        do
                        {
                          *v142 = -1;
                          v142 += 38;
                          v143 -= 152;
                        }
                        while (v143);
                      }
                    }
                    else
                    {
                      MEMORY[0x1CAA32FB4](v203, 8);
                      if (v141)
                      {
                        v175 = (4 * v141 / 3 + 1) | ((unint64_t)(4 * v141 / 3 + 1) >> 1);
                        v176 = v175 | (v175 >> 2) | ((v175 | (v175 >> 2)) >> 4);
                        v204 = (((v176 | (v176 >> 8)) >> 16) | v176 | (v176 >> 8)) + 1;
                        v177 = operator new(152 * v204, (std::align_val_t)8uLL);
                        v203 = (unint64_t)v177;
                        if (v204)
                        {
                          v178 = 152 * v204;
                          do
                          {
                            *v177 = -1;
                            v177 += 38;
                            v178 -= 152;
                          }
                          while (v178);
                        }
                      }
                      else
                      {
                        v203 = 0uLL;
                        v204 = 0;
                      }
                    }
LABEL_300:
                    v150 = (std::string *)v206.__r_.__value_.__r.__words[0];
                    if ((std::string::size_type *)v206.__r_.__value_.__l.__data_ != &v206.__r_.__value_.__r.__words[2])
                      goto LABEL_358;
                    goto LABEL_359;
                  }
                  if (!v204)
                  {
LABEL_299:
                    *((_QWORD *)&v203 + 1) = 0;
                    goto LABEL_300;
                  }
                  v147 = 152 * v204;
                  v148 = (char **)(v203 + 8);
                  while (2)
                  {
                    v149 = *((_DWORD *)v148 - 2);
                    if (v149 == -2)
                    {
LABEL_297:
                      *((_DWORD *)v148 - 2) = -1;
                    }
                    else if (v149 != -1)
                    {
                      v148 = sub_1C5053158(v148);
                      goto LABEL_297;
                    }
                    v148 += 19;
                    v147 -= 152;
                    if (!v147)
                      goto LABEL_299;
                    continue;
                  }
                }
                v89 = v206.__r_.__value_.__r.__words[0];
                for (i = 8; i != 72; i += 16)
                {
                  if (!*(_QWORD *)(v206.__r_.__value_.__r.__words[0] + i))
                    goto LABEL_267;
                }
                v181 = j;
                v91 = atoi(*(const char **)v206.__r_.__value_.__l.__data_);
                if (v87 <= v91)
                  v87 = v91;
                v189 = v87;
                v92 = atoi(*(const char **)(v89 + 16));
                v93 = *(const void **)(v89 + 32);
                if (!v93)
                {
                  memset(&__dst, 0, sizeof(__dst));
                  v97 = atoi(*(const char **)(v89 + 48));
                  v98 = 0;
                  goto LABEL_191;
                }
                v94 = *(_QWORD *)(v89 + 40);
                if (v94 >= 0x7FFFFFFFFFFFFFF8)
                  abort();
                v95 = v88;
                if (v94 >= 0x17)
                {
                  v99 = (v94 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v94 | 7) != 0x17)
                    v99 = v94 | 7;
                  v100 = v86;
                  v101 = v99 + 1;
                  p_dst = (std::string *)operator new(v99 + 1);
                  v102 = v101 | 0x8000000000000000;
                  v86 = v100;
                  __dst.__r_.__value_.__l.__size_ = v94;
                  __dst.__r_.__value_.__r.__words[2] = v102;
                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
                }
                else
                {
                  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(v89 + 40);
                  p_dst = &__dst;
                  if (!v94)
                    goto LABEL_189;
                }
                memmove(p_dst, v93, v94);
LABEL_189:
                p_dst->__r_.__value_.__s.__data_[v94] = 0;
                v103 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
                v97 = atoi(*(const char **)(v206.__r_.__value_.__r.__words[0] + 48));
                if (v103 < 0)
                {
                  v98 = __dst.__r_.__value_.__l.__size_;
                  sub_1C47EBC30(&v197, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                  v198 = v97;
                  v104 = 1;
                  v88 = v95;
                  goto LABEL_193;
                }
                v98 = v103;
                v88 = v95;
LABEL_191:
                v104 = 0;
                v197 = __dst;
                v198 = v97;
LABEL_193:
                if (v98 >= 3)
                {
                  v105 = v104 ? (std::string *)__dst.__r_.__value_.__r.__words[0] : &__dst;
                  if (v105->__r_.__value_.__s.__data_[0] == 48)
                  {
                    v106 = v104 ? (std::string *)__dst.__r_.__value_.__r.__words[0] : &__dst;
                    if (v106->__r_.__value_.__s.__data_[1] == 120)
                      std::string::erase(&v197, 0, 2uLL);
                  }
                }
                if (!v204)
                {
                  v108 = 0;
                  goto LABEL_215;
                }
                v107 = (v204 - 1) & (37 * v92);
                v108 = (int *)(v203 + 152 * v107);
                v109 = *v108;
                if (v92 != *v108)
                {
                  v110 = 0;
                  v111 = 1;
                  while (v109 != -1)
                  {
                    if (v110)
                      v112 = 0;
                    else
                      v112 = v109 == -2;
                    if (v112)
                      v110 = v108;
                    v113 = v107 + v111++;
                    v107 = v113 & (v204 - 1);
                    v108 = (int *)(v203 + 152 * v107);
                    v109 = *v108;
                    if (v92 == *v108)
                      goto LABEL_220;
                  }
                  if (v110)
                    v108 = v110;
LABEL_215:
                  if (4 * DWORD2(v203) + 4 >= 3 * v204)
                  {
                    v123 = v88;
                    v124 = v86;
                    sub_1C565A914((uint64_t *)&v203, 2 * v204);
                    if (v204)
                    {
                      v125 = (v204 - 1) & (37 * v92);
                      v108 = (int *)(v203 + 152 * v125);
                      v126 = *v108;
                      if (v92 != *v108)
                      {
                        v127 = 0;
                        v128 = 1;
                        while (v126 != -1)
                        {
                          if (v127)
                            v129 = 0;
                          else
                            v129 = v126 == -2;
                          if (v129)
                            v127 = v108;
                          v130 = v125 + v128++;
                          v125 = v130 & (v204 - 1);
                          v108 = (int *)(v203 + 152 * v125);
                          v126 = *v108;
                          v86 = v124;
                          v88 = v123;
                          if (v92 == *v108)
                            goto LABEL_217;
                        }
LABEL_264:
                        if (v127)
                          v108 = v127;
                      }
LABEL_262:
                      v86 = v124;
                      v88 = v123;
                      goto LABEL_217;
                    }
                  }
                  else
                  {
                    if (v204 + ~DWORD2(v203) - HIDWORD(v203) > v204 >> 3)
                    {
LABEL_217:
                      ++DWORD2(v203);
                      if (*v108 != -1)
                        --HIDWORD(v203);
                      *v108 = v92;
                      *((_QWORD *)v108 + 1) = v108 + 6;
                      *((_QWORD *)v108 + 2) = 0x400000000;
                      goto LABEL_220;
                    }
                    v123 = v88;
                    v124 = v86;
                    sub_1C565A914((uint64_t *)&v203, v204);
                    if (v204)
                    {
                      v131 = (v204 - 1) & (37 * v92);
                      v108 = (int *)(v203 + 152 * v131);
                      v132 = *v108;
                      if (v92 != *v108)
                      {
                        v127 = 0;
                        v133 = 1;
                        while (v132 != -1)
                        {
                          if (v127)
                            v134 = 0;
                          else
                            v134 = v132 == -2;
                          if (v134)
                            v127 = v108;
                          v135 = v131 + v133++;
                          v131 = v135 & (v204 - 1);
                          v108 = (int *)(v203 + 152 * v131);
                          v132 = *v108;
                          v86 = v124;
                          v88 = v123;
                          if (v92 == *v108)
                            goto LABEL_217;
                        }
                        goto LABEL_264;
                      }
                      goto LABEL_262;
                    }
                  }
                  v108 = 0;
                  goto LABEL_262;
                }
LABEL_220:
                v115 = (unint64_t *)(v108 + 2);
                v114 = *((_QWORD *)v108 + 1);
                v116 = v108[4];
                if (v116 >= v108[5])
                {
                  v121 = v116 + 1;
                  v122 = v114 + 32 * v116 > (unint64_t)&v197;
                  if (v114 <= (unint64_t)&v197 && v122)
                  {
                    v136 = (char *)&v197 - v114;
                    sub_1C565ABC4((uint64_t)(v108 + 2), v121);
                    v114 = *v115;
                    v117 = (std::string *)&v136[*v115];
                  }
                  else
                  {
                    sub_1C565ABC4((uint64_t)(v108 + 2), v121);
                    v114 = *v115;
                    v117 = &v197;
                  }
                }
                else
                {
                  v117 = &v197;
                }
                v118 = v108[4];
                v119 = v114 + 32 * v118;
                if (SHIBYTE(v117->__r_.__value_.__r.__words[2]) < 0)
                {
                  sub_1C47EBC30((_BYTE *)v119, v117->__r_.__value_.__l.__data_, v117->__r_.__value_.__l.__size_);
                }
                else
                {
                  v120 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
                  *(_QWORD *)(v119 + 16) = *((_QWORD *)&v117->__r_.__value_.__l + 2);
                  *(_OWORD *)v119 = v120;
                }
                *(_DWORD *)(v114 + 32 * v118 + 24) = v117[1].__r_.__value_.__l.__data_;
                ++v108[4];
                if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v197.__r_.__value_.__l.__data_);
                j = v181;
                v87 = v189;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__dst.__r_.__value_.__l.__data_);
                if ((std::string::size_type *)v206.__r_.__value_.__l.__data_ != &v206.__r_.__value_.__r.__words[2])
                  free(v206.__r_.__value_.__l.__data_);
                llvm::line_iterator::advance((uint64_t)&v200);
                if (!(_BYTE)v201)
                  goto LABEL_286;
              }
            }
            v87 = 0;
LABEL_286:
            v192 = v86;
            v206.__r_.__value_.__r.__words[0] = (std::string::size_type)&v206.__r_.__value_.__r.__words[2];
            v206.__r_.__value_.__l.__size_ = 0x800000000;
            v144 = (unsigned int *)(v203 + 152 * v204);
            if (DWORD2(v203))
            {
              if (v204)
              {
                v145 = 152 * v204;
                v146 = (unsigned int *)v203;
                while (*v146 >= 0xFFFFFFFE)
                {
                  v146 += 38;
                  v145 -= 152;
                  if (!v145)
                    goto LABEL_291;
                }
              }
              else
              {
                v146 = (unsigned int *)v203;
              }
            }
            else
            {
LABEL_291:
              v146 = (unsigned int *)(v203 + 152 * v204);
            }
            v187 = (unsigned int *)(v203 + 152 * v204);
            if (v146 == v187)
              goto LABEL_359;
            v185 = 32 * v87;
            v190 = v87;
            while (1)
            {
              if (v146[4] == v87)
              {
                if (!v87)
                  goto LABEL_339;
                v151 = (const void **)*((_QWORD *)v146 + 1);
                v152 = v185;
                while (1)
                {
                  if (*((_DWORD *)v151 + 6))
                    goto LABEL_333;
                  v153 = *((unsigned __int8 *)v151 + 23);
                  v154 = (v153 & 0x80u) == 0 ? v153 & 0x7F : (unint64_t)v151[1];
                  if (v154 != 4)
                    goto LABEL_333;
                  v155 = v151;
                  if ((v153 & 0x80) != 0)
                  {
                    v155 = *v151;
                    v153 = (unint64_t)v151[1];
                  }
                  v156 = v153 >= 4 ? 4 : v153;
                  if (memcmp(v155, "null", v156) || v153 != 4)
                  {
LABEL_333:
                    if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
                      sub_1C47EBC30(&v197, v205.__r_.__value_.__l.__data_, v205.__r_.__value_.__l.__size_);
                    else
                      v197 = *v192;
                    std::string::append(&v197, "/buffer-");
                    v158 = *((_BYTE *)v151 + 23);
                    v159 = v158 < 0;
                    if (v158 >= 0)
                      v160 = (const std::string::value_type *)v151;
                    else
                      v160 = (const std::string::value_type *)*v151;
                    v161 = v158 & 0x7F;
                    if (v159)
                      v162 = (std::string::size_type)v151[1];
                    else
                      v162 = v161;
                    std::string::append(&v197, v160, v162);
                    std::string::append(&v197, ".buf");
                    v201 = 260;
                    v200.__r_.__value_.__r.__words[0] = (std::string::size_type)&v197;
                    v163 = llvm::sys::fs::access((unsigned __int8 *)&v200, 0);
                    if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v197.__r_.__value_.__l.__data_);
                    if (v163)
                      break;
                  }
                  v151 += 4;
                  v152 -= 32;
                  if (!v152)
                    goto LABEL_339;
                }
              }
              v164 = *v146;
              v165 = LODWORD(v206.__r_.__value_.__r.__words[1]);
              if (LODWORD(v206.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v206.__r_.__value_.__r.__words[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)&v206.__r_.__value_.__r.__words[2], LODWORD(v206.__r_.__value_.__r.__words[1]) + 1, 4);
                v165 = LODWORD(v206.__r_.__value_.__r.__words[1]);
              }
              *(_DWORD *)(v206.__r_.__value_.__r.__words[0] + 4 * v165) = v164;
              ++LODWORD(v206.__r_.__value_.__r.__words[1]);
LABEL_339:
              v166 = v146 + 38;
              while (v166 != v144)
              {
                v167 = *v166;
                v166 += 38;
                if (v167 <= 0xFFFFFFFD)
                {
                  v146 = v166 - 38;
                  goto LABEL_344;
                }
              }
              v146 = v144;
LABEL_344:
              v87 = v190;
              if (v146 == v187)
              {
                v168 = (std::string *)v206.__r_.__value_.__r.__words[0];
                if (LODWORD(v206.__r_.__value_.__r.__words[1]))
                {
                  v169 = v206.__r_.__value_.__r.__words[0] + 4 * LODWORD(v206.__r_.__value_.__r.__words[1]);
                  do
                  {
                    if (v204)
                    {
                      v170 = (v204 - 1) & (37 * LODWORD(v168->__r_.__value_.__l.__data_));
                      v171 = (int *)(v203 + 152 * v170);
                      v172 = *v171;
                      if (LODWORD(v168->__r_.__value_.__l.__data_) == *v171)
                      {
LABEL_349:
                        sub_1C5053158((char **)v171 + 1);
                        *v171 = -2;
                        *((int32x2_t *)&v203 + 1) = vadd_s32(*(int32x2_t *)((char *)&v203 + 8), (int32x2_t)0x1FFFFFFFFLL);
                      }
                      else
                      {
                        v173 = 1;
                        while (v172 != -1)
                        {
                          v174 = v170 + v173++;
                          v170 = v174 & (v204 - 1);
                          v171 = (int *)(v203 + 152 * v170);
                          v172 = *v171;
                          if (LODWORD(v168->__r_.__value_.__l.__data_) == *v171)
                            goto LABEL_349;
                        }
                      }
                    }
                    v168 = (std::string *)((char *)v168 + 4);
                  }
                  while (v168 != (std::string *)v169);
                  v168 = (std::string *)v206.__r_.__value_.__r.__words[0];
                }
                j = j;
                if (v168 != (std::string *)&v206.__r_.__value_.__r.__words[2])
                {
                  v150 = v168;
LABEL_358:
                  free(v150);
                }
LABEL_359:
                MEMORY[0x1CAA32FB4](0, 8);
                v26 = v203;
                v203 = 0uLL;
                v25 = v204;
                v204 = 0;
                v186 = (void *)v205.__r_.__value_.__r.__words[0];
                v24 = HIBYTE(v205.__r_.__value_.__r.__words[2]);
                *((_BYTE *)&v205.__r_.__value_.__s + 23) = 0;
                v205.__r_.__value_.__s.__data_[0] = 0;
                MEMORY[0x1CAA32FB4](0, 8);
LABEL_50:
                memset(&v206, 0, 20);
                v208 = 0;
                v209 = 0;
                v207 = 0;
                sub_1C5E9D34C((uint64_t)a2, (uint64_t)&v206);
                sub_1C5E9D674((uint64_t)a2, (uint64_t)&v206, 0);
                if (v193.__r_.__value_.__l.__size_ == v193.__r_.__value_.__r.__words[0])
                  v27 = &v193.__r_.__value_.__s.__data_[20];
                else
                  v27 = &v193.__r_.__value_.__s.__data_[16];
                v28 = *(unsigned int *)v27;
                if ((_DWORD)v28)
                {
                  v29 = 8 * v28;
                  v30 = (std::string::size_type *)v193.__r_.__value_.__l.__size_;
                  while (*v30 >= 0xFFFFFFFFFFFFFFFELL)
                  {
                    ++v30;
                    v29 -= 8;
                    if (!v29)
                      goto LABEL_156;
                  }
                }
                else
                {
                  v30 = (std::string::size_type *)v193.__r_.__value_.__l.__size_;
                }
                if (v30 != (std::string::size_type *)(v193.__r_.__value_.__l.__size_ + 8 * v28))
                {
                  v183 = v193.__r_.__value_.__l.__size_ + 8 * v28;
                  v184 = v24;
                  v188 = v26;
                  v191 = v25;
                  v182 = v25 - 1;
                  v31 = (llvm::AGXIR *)((char *)a2 + 272);
                  v32 = *v30;
LABEL_61:
                  v200.__r_.__value_.__r.__words[0] = v32;
                  v33 = sub_1C558B5F8((uint64_t *)&v206, &v200);
                  if (!v33)
                    goto LABEL_125;
                  v36 = (_QWORD *)(v33 - 8 * *(unsigned int *)(v33 + 8));
                  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v36 + 128) + 24) + 8) != 17
                    || (v37 = v36[1], *(_BYTE *)v37 == 1) && *(_BYTE *)(*(_QWORD *)(v37 + 128) + 16) == 16)
                  {
                    v38 = j;
                    v39 = v36[2];
                  }
                  else
                  {
                    v38 = j;
                    v39 = *(_QWORD *)(v37 - 8 * *(unsigned int *)(v37 + 8) + 8);
                  }
                  v40 = *(_QWORD *)(v39 + 128);
                  v41 = (_QWORD *)(v40 + 24);
                  if (*(_DWORD *)(v40 + 32) >= 0x41u)
                    v41 = (_QWORD *)*v41;
                  v42 = (_QWORD *)*v41;
                  if (!v191)
                    goto LABEL_73;
                  v43 = (37 * (_DWORD)v42) & v182;
                  v44 = (int *)(v188 + 152 * v43);
                  v45 = *v44;
                  if (*v44 == (_DWORD)v42)
                  {
                    v46 = v191;
LABEL_72:
                    if (v43 == v46)
                      goto LABEL_73;
                    v71 = v44[4];
                    if ((_DWORD)v71)
                    {
                      v72 = (const void **)*((_QWORD *)v44 + 1);
                      v73 = 32 * v71;
                      while (!*((_DWORD *)v72 + 6))
                      {
                        v74 = *((unsigned __int8 *)v72 + 23);
                        v75 = (v74 & 0x80u) == 0 ? v74 & 0x7F : (unint64_t)v72[1];
                        if (v75 != 4)
                          break;
                        v76 = v72;
                        if ((v74 & 0x80) != 0)
                        {
                          v76 = *v72;
                          v74 = (unint64_t)v72[1];
                        }
                        v77 = v74 >= 4 ? 4 : v74;
                        if (memcmp(v76, "null", v77) || v74 != 4)
                          break;
                        v72 += 4;
                        v73 -= 32;
                        if (!v73)
                          goto LABEL_147;
                      }
                      goto LABEL_73;
                    }
LABEL_147:
                    v79 = *(_QWORD *)(v32 + 8);
                    for (j = v38; v79; v79 = *(_QWORD *)(v79 + 8))
                    {
                      v80 = *(_QWORD *)(v79 + 24);
                      if (*(_BYTE *)(v80 + 16) == 60)
                      {
                        NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)v80, v34);
                        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v80, (llvm::Value *)NullValue, (llvm::Value *)1);
                      }
                    }
                    goto LABEL_125;
                  }
                  v82 = 1;
                  while (v45 != -1)
                  {
                    v83 = v43 + v82++;
                    v43 = v83 & v182;
                    v44 = (int *)(v188 + 152 * v43);
                    v45 = *v44;
                    v46 = v191;
                    if (*v44 == (_DWORD)v42)
                      goto LABEL_72;
                  }
LABEL_73:
                  v47 = *(_QWORD *)(v32 + 8);
                  j = v38;
                  if (v47)
                  {
                    v179 = v42;
                    v180 = v38;
                    while (1)
                    {
                      v48 = *(_QWORD *)(v47 + 24);
                      if (*(_BYTE *)(v48 + 16) == 60)
                      {
                        v49 = *(_QWORD *)(v48 + 8);
                        if (v49)
                          break;
                      }
LABEL_124:
                      v47 = *(_QWORD *)(v47 + 8);
                      if (!v47)
                        goto LABEL_125;
                    }
                    while (2)
                    {
                      v64 = *(_QWORD *)(v49 + 24);
                      if (*(_BYTE *)(v64 + 16) != 62)
                      {
LABEL_123:
                        v49 = *(_QWORD *)(v49 + 8);
                        if (!v49)
                          goto LABEL_124;
                        continue;
                      }
                      break;
                    }
                    LODWORD(v200.__r_.__value_.__r.__words[1]) = 64;
                    v200.__r_.__value_.__r.__words[0] = 0;
                    if (!llvm::GEPOperator::accumulateConstantOffset(v64, v31, (uint64_t)&v200, 0, v35))
                      goto LABEL_120;
                    if (LODWORD(v200.__r_.__value_.__r.__words[1]) > 0x40)
                    {
                      v65 = *(_QWORD *)v200.__r_.__value_.__l.__data_;
                      if ((*(_QWORD *)v200.__r_.__value_.__l.__data_ & 0x8000000000000000) != 0)
                        goto LABEL_120;
                    }
                    else
                    {
                      v65 = (uint64_t)(v200.__r_.__value_.__r.__words[0] << -(uint64_t)LODWORD(v200.__r_.__value_.__r.__words[1])) >> -(uint64_t)LODWORD(v200.__r_.__value_.__r.__words[1]);
                      if ((v65 & 0x8000000000000000) != 0)
                      {
LABEL_120:
                        if (LODWORD(v200.__r_.__value_.__r.__words[1]) >= 0x41 && v200.__r_.__value_.__r.__words[0])
                          MEMORY[0x1CAA32F9C](v200.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
                        goto LABEL_123;
                      }
                    }
                    v66 = *(unsigned __int8 **)(v64 + 72);
                    v50 = v66[8];
                    if (v50 > 0x11)
                      goto LABEL_81;
                    if (((1 << v50) & 0xAC7F) != 0)
                      goto LABEL_117;
                    if (((1 << v50) & 0x30000) == 0)
                    {
LABEL_81:
                      if ((v50 & 0xFE) != 0x12 && v50 != 21)
                        goto LABEL_120;
                    }
                    if (!llvm::Type::isSizedDerivedType(*(_QWORD *)(v64 + 72), 0))
                      goto LABEL_120;
                    v50 = v66[8];
LABEL_117:
                    if (v50 == 15)
                      goto LABEL_120;
                    sub_1C4768AD0((uint64_t)v31, (uint64_t)v66);
                    v68 = v52;
                    if ((_DWORD)v67 == 1)
                    {
                      if ((j & 1) != 0)
                        goto LABEL_120;
                    }
                    else if ((j & 1) != 0)
                    {
                      goto LABEL_120;
                    }
                    v53 = llvm::dbgs(v52);
                    v54 = v53;
                    v55 = (void *)*((_QWORD *)v53 + 4);
                    if (*((_QWORD *)v53 + 3) - (_QWORD)v55 > 0x22uLL)
                    {
                      qmemcpy(v55, "Found candidate address for buffer ", 35);
                      *((_QWORD *)v53 + 4) += 35;
                    }
                    else
                    {
                      v54 = llvm::raw_ostream::write(v53, "Found candidate address for buffer ", 0x23uLL);
                    }
                    sub_1C5E21910(v54, v179, 0, 0, 0);
                    v56 = (_DWORD *)*((_QWORD *)v54 + 4);
                    if (*((_QWORD *)v54 + 3) - (_QWORD)v56 > 3uLL)
                    {
                      *v56 = 544497952;
                      *((_QWORD *)v54 + 4) += 4;
                    }
                    else
                    {
                      v54 = llvm::raw_ostream::write(v54, " at ", 4uLL);
                    }
                    sub_1C5E21910(v54, v65, 0, 0, 0);
                    v57 = (_DWORD *)*((_QWORD *)v54 + 4);
                    if (*((_QWORD *)v54 + 3) - (_QWORD)v57 > 6uLL)
                    {
                      *(_DWORD *)((char *)v57 + 3) = 540697968;
                      *v57 = 1887007776;
                      *((_QWORD *)v54 + 4) += 7;
                    }
                    else
                    {
                      v54 = llvm::raw_ostream::write(v54, " type: ", 7uLL);
                    }
                    llvm::Type::print((llvm::Type *)v66, v54, 0, 0);
                    v58 = *((_QWORD *)v54 + 4);
                    if ((unint64_t)(*((_QWORD *)v54 + 3) - v58) > 0xB)
                    {
                      *(_DWORD *)(v58 + 8) = 678655081;
                      *(_QWORD *)v58 = *(_QWORD *)" sizeInBits(";
                      *((_QWORD *)v54 + 4) += 12;
                    }
                    else
                    {
                      v54 = llvm::raw_ostream::write(v54, " sizeInBits(", 0xCuLL);
                    }
                    v59 = (int)v68;
                    if ((_QWORD)v68 << 32 < (int64_t)0xFFFFFFFF00000001)
                    {
                      v59 = -(uint64_t)(int)v68;
                      v60 = v54;
                      v61 = 1;
                    }
                    else
                    {
                      v60 = v54;
                      v61 = 0;
                    }
                    sub_1C5E21910(v60, v59, 0, 0, v61);
                    v62 = *((_QWORD *)v54 + 4);
                    if ((unint64_t)(*((_QWORD *)v54 + 3) - v62) > 2)
                    {
                      *(_BYTE *)(v62 + 2) = 32;
                      *(_WORD *)v62 = 14889;
                      *((_QWORD *)v54 + 4) += 3;
                    }
                    else
                    {
                      v54 = llvm::raw_ostream::write(v54, "): ", 3uLL);
                    }
                    llvm::Value::print((llvm::Value *)v64, v54, 0);
                    v63 = (_BYTE *)*((_QWORD *)v54 + 4);
                    if ((unint64_t)v63 >= *((_QWORD *)v54 + 3))
                    {
                      llvm::raw_ostream::write(v54, 10);
                    }
                    else
                    {
                      *((_QWORD *)v54 + 4) = v63 + 1;
                      *v63 = 10;
                    }
                    j = v180;
                    goto LABEL_120;
                  }
LABEL_125:
                  v69 = v30 + 1;
                  v26 = v188;
                  v25 = v191;
                  v24 = v184;
                  while (v69 != (unint64_t *)v183)
                  {
                    v70 = *v69++;
                    v32 = v70;
                    if (v70 <= 0xFFFFFFFFFFFFFFFDLL)
                    {
                      v30 = v69 - 1;
                      goto LABEL_61;
                    }
                  }
                }
LABEL_156:
                if (v207)
                {
                  v208 = v207;
                  operator delete(v207);
                }
                MEMORY[0x1CAA32FB4](v206.__r_.__value_.__r.__words[0], 8);
                if (v24 < 0)
                  operator delete(v186);
                if (v25)
                {
                  v84 = 152 * v25;
                  v85 = (char **)(v26 + 8);
                  do
                  {
                    if (*((_DWORD *)v85 - 2) <= 0xFFFFFFFD)
                      v85 = sub_1C5053158(v85);
                    v85 += 19;
                    v84 -= 152;
                  }
                  while (v84);
                }
                MEMORY[0x1CAA32FB4](v26, 8);
LABEL_166:
                if (v193.__r_.__value_.__l.__size_ != v193.__r_.__value_.__r.__words[0])
                  free((void *)v193.__r_.__value_.__l.__size_);
                goto LABEL_31;
              }
            }
          }
LABEL_37:
          v18 = llvm::dbgs((llvm *)ShaderID);
          v19 = v18;
          v20 = (void *)*((_QWORD *)v18 + 4);
          if (*((_QWORD *)v18 + 3) - (_QWORD)v20 > 0xDuLL)
          {
            qmemcpy(v20, "Found shader: ", 14);
            *((_QWORD *)v18 + 4) += 14;
          }
          else
          {
            v19 = llvm::raw_ostream::write(v18, "Found shader: ", 0xEuLL);
          }
          sub_1C5E21910(v19, v4, 0, 0, 0);
          v21 = (_BYTE *)*((_QWORD *)v19 + 4);
          if ((unint64_t)v21 >= *((_QWORD *)v19 + 3))
          {
            llvm::raw_ostream::write(v19, 10);
            j = 0;
          }
          else
          {
            j = 0;
            *((_QWORD *)v19 + 4) = v21 + 1;
            *v21 = 10;
          }
          goto LABEL_47;
        }
      }
    }
LABEL_31:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v7)
      (*(void (**)(size_t))(*(_QWORD *)v7 + 8))(v7);
  }
  return 0;
}

_DWORD *sub_1C565A914(uint64_t *a1, int a2)
{
  unsigned int v3;
  char **v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  unsigned int v10;
  uint64_t v11;
  char **v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int *v26;
  int v27;
  uint64_t v28;
  __int128 *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;

  v3 = *((_DWORD *)a1 + 4);
  v4 = (char **)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(152 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((_DWORD *)a1 + 4);
    if (v10)
    {
      v11 = 152 * v10;
      do
      {
        *result = -1;
        result += 38;
        v11 -= 152;
      }
      while (v11);
    }
    if (!v3)
LABEL_52:
      JUMPOUT(0x1CAA32FB4);
    v12 = v4;
    while (1)
    {
      v13 = *(_DWORD *)v12;
      if (*(_DWORD *)v12 <= 0xFFFFFFFD)
        break;
LABEL_42:
      v12 += 19;
      if (v12 == &v4[19 * v3])
        goto LABEL_52;
    }
    v14 = *((_DWORD *)a1 + 4);
    if (v14)
    {
      v15 = v14 - 1;
      v16 = v15 & (37 * v13);
      v17 = *a1 + 152 * v16;
      v18 = *(_DWORD *)v17;
      if (v13 != *(_DWORD *)v17)
      {
        v19 = 0;
        v20 = 1;
        while (v18 != -1)
        {
          if (v19)
            v21 = 0;
          else
            v21 = v18 == -2;
          if (v21)
            v19 = v17;
          v22 = v16 + v20++;
          v16 = v22 & v15;
          v17 = *a1 + 152 * v16;
          v18 = *(_DWORD *)v17;
          if (v13 == *(_DWORD *)v17)
            goto LABEL_23;
        }
        if (v19)
          v17 = v19;
      }
    }
    else
    {
      v17 = 0;
    }
LABEL_23:
    v23 = v17 + 24;
    *(_QWORD *)(v17 + 8) = v17 + 24;
    *(_DWORD *)v17 = v13;
    *(_QWORD *)(v17 + 16) = 0x400000000;
    v24 = *((unsigned int *)v12 + 4);
    if ((char **)v17 == v12 || (_DWORD)v24 == 0)
    {
LABEL_41:
      ++*((_DWORD *)a1 + 2);
      sub_1C5053158(v12 + 1);
      goto LABEL_42;
    }
    v26 = (int *)v12[1];
    if (v26 != (int *)(v12 + 3))
    {
      v27 = *((_DWORD *)v12 + 5);
      *(_QWORD *)(v17 + 8) = v26;
      *(_DWORD *)(v17 + 16) = v24;
      *(_DWORD *)(v17 + 20) = v27;
      v12[1] = (char *)(v12 + 3);
      *((_DWORD *)v12 + 5) = 0;
LABEL_40:
      *((_DWORD *)v12 + 4) = 0;
      goto LABEL_41;
    }
    if (v24 <= 4)
    {
      v29 = (__int128 *)&v26[8 * v24];
    }
    else
    {
      sub_1C565ABC4(v17 + 8, *((unsigned int *)v12 + 4));
      v26 = (int *)v12[1];
      v28 = *((unsigned int *)v12 + 4);
      if (!(_DWORD)v28)
        goto LABEL_35;
      v23 = *(_QWORD *)(v17 + 8);
      v29 = (__int128 *)&v26[8 * v28];
    }
    do
    {
      v30 = *(_OWORD *)v26;
      *(_QWORD *)(v23 + 16) = *((_QWORD *)v26 + 2);
      *(_OWORD *)v23 = v30;
      *((_QWORD *)v26 + 1) = 0;
      *((_QWORD *)v26 + 2) = 0;
      *(_QWORD *)v26 = 0;
      *(_DWORD *)(v23 + 24) = v26[6];
      v26 += 8;
      v23 += 32;
    }
    while (v26 != (int *)v29);
    v26 = (int *)v12[1];
LABEL_35:
    *(_DWORD *)(v17 + 16) = v24;
    v31 = *((unsigned int *)v12 + 4);
    if ((_DWORD)v31)
    {
      v32 = 8 * v31;
      do
      {
        if (*((char *)&v26[v32 - 2] - 1) < 0)
          operator delete(*(void **)&v26[v32 - 8]);
        v32 -= 8;
      }
      while (v32 * 4);
    }
    goto LABEL_40;
  }
  a1[1] = 0;
  v33 = *((_DWORD *)a1 + 4);
  if (v33)
  {
    v34 = 152 * v33;
    do
    {
      *result = -1;
      result += 38;
      v34 -= 152;
    }
    while (v34);
  }
  return result;
}

void sub_1C565ABC4(uint64_t a1, unint64_t a2)
{
  void *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;

  v13 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 32, &v13);
  v4 = v3;
  v5 = *(char **)a1;
  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6)
  {
    v7 = &v5[32 * v6];
    v8 = v3;
    do
    {
      v9 = *(_OWORD *)v5;
      v8[2] = *((_QWORD *)v5 + 2);
      *(_OWORD *)v8 = v9;
      *((_QWORD *)v5 + 1) = 0;
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)v5 = 0;
      *((_DWORD *)v8 + 6) = *((_DWORD *)v5 + 6);
      v5 += 32;
      v8 += 4;
    }
    while (v5 != v7);
    v5 = *(char **)a1;
    v10 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        if (v5[v11 - 9] < 0)
          operator delete(*(void **)&v5[v11 - 32]);
        v11 -= 32;
      }
      while (v11);
      v5 = *(char **)a1;
    }
  }
  v12 = v13;
  if (v5 != (char *)(a1 + 16))
    free(v5);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v12;
}

uint64_t sub_1C565AC98()
{
  char v1;
  char *v2;
  __int128 v3;

  *(_QWORD *)&v3 = "List and print out all the candidates for replacement";
  *((_QWORD *)&v3 + 1) = 53;
  v1 = 0;
  v2 = &v1;
  sub_1C6282648(&v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, qword_1ED808D90, &dword_1C475E000);
}

uint64_t sub_1C565ACF4(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Scalarize";
  *(_QWORD *)(v2 + 8) = 9;
  *(_QWORD *)(v2 + 16) = "scalarize";
  *(_QWORD *)(v2 + 24) = 9;
  *(_QWORD *)(v2 + 32) = &unk_1ED808E50;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C565AEF8;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C565AD80(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _QWORD *v6;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v12;
  _QWORD *v13;
  _QWORD v14[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED808E50;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8171F80;
  *(_QWORD *)(a1 + 32) = 0;
  v6 = (_QWORD *)(a1 + 32);
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v12 = qword_1ED830BC0[0];
  v8 = atomic_load(&qword_1ED808E58);
  if (v8 != -1)
  {
    v14[0] = sub_1C565ACF4;
    v14[1] = &v12;
    v13 = v14;
    std::__call_once(&qword_1ED808E58, &v13, (void (__cdecl *)(void *))sub_1C4776838);
  }
  v9 = operator new();
  *(_DWORD *)v9 = a2;
  *(_DWORD *)(v9 + 4) = a3;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = v9 + 48;
  *(_QWORD *)(v9 + 40) = 0x400000000;
  *(_QWORD *)(v9 + 80) = v9 + 96;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 116) = 0u;
  *(_QWORD *)(v9 + 136) = v9 + 152;
  *(_QWORD *)(v9 + 144) = 0x400000000;
  v10 = dword_1ED808FA0;
  if (dword_1ED808FA0 != -1)
  {
    *(_DWORD *)v9 = dword_1ED808FA0;
    a2 = v10;
  }
  if (a2 < a3)
    *(_DWORD *)(v9 + 4) = a2;
  v14[0] = 0;
  sub_1C565B7A4(v6, v9);
  sub_1C565B7A4(v14, 0);
  return a1;
}

uint64_t sub_1C565AEF8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C565AD80(v0, 0x200u, 0x200u);
}

void sub_1C565AF28(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E8171F80;
  sub_1C565B7A4((_QWORD *)a1 + 4, 0);
  llvm::Pass::~Pass(a1);
}

void sub_1C565AF5C(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E8171F80;
  sub_1C565B7A4((_QWORD *)a1 + 4, 0);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C565AFA4(uint64_t a1, uint64_t a2)
{
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1C565AFB8(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_DWORD *)(v1 + 120);
  if (v2 || *(_DWORD *)(v1 + 124))
  {
    v3 = *(unsigned int *)(v1 + 128);
    v4 = *(_QWORD **)(v1 + 112);
    if (v3 <= 4 * v2 || v3 < 0x41)
    {
      if ((_DWORD)v3)
      {
        v8 = 24 * v3;
        do
        {
          *v4 = -4096;
          v4 += 3;
          v8 -= 24;
        }
        while (v8);
      }
      *(_QWORD *)(v1 + 120) = 0;
    }
    else if (v2)
    {
      v5 = 1 << (33 - __clz(v2 - 1));
      if (v5 <= 64)
        v6 = 64;
      else
        v6 = v5;
      if (v6 == (_DWORD)v3)
      {
        *(_QWORD *)(v1 + 120) = 0;
        v7 = 24 * v3;
        do
        {
          *v4 = -4096;
          v4 += 3;
          v7 -= 24;
        }
        while (v7);
      }
      else
      {
        MEMORY[0x1CAA32FB4](v4, 8);
        v9 = (4 * v6 / 3u + 1) | ((unint64_t)(4 * v6 / 3u + 1) >> 1);
        v10 = v9 | (v9 >> 2) | ((v9 | (v9 >> 2)) >> 4);
        LODWORD(v10) = (((v10 | (v10 >> 8)) >> 16) | v10 | (v10 >> 8)) + 1;
        *(_DWORD *)(v1 + 128) = v10;
        v11 = operator new(24 * v10, (std::align_val_t)8uLL);
        *(_QWORD *)(v1 + 112) = v11;
        *(_QWORD *)(v1 + 120) = 0;
        v12 = *(unsigned int *)(v1 + 128);
        if ((_DWORD)v12)
        {
          v13 = 24 * v12;
          do
          {
            *v11 = -4096;
            v11 += 3;
            v13 -= 24;
          }
          while (v13);
        }
      }
    }
    else
    {
      MEMORY[0x1CAA32FB4](v4, 8);
      *(_QWORD *)(v1 + 112) = 0;
      *(_QWORD *)(v1 + 120) = 0;
      *(_DWORD *)(v1 + 128) = 0;
    }
  }
  result = sub_1C4926A50(v1 + 16);
  *(_DWORD *)(v1 + 144) = 0;
  return result;
}

uint64_t sub_1C565B108(uint64_t a1, uint64_t a2)
{
  uint64_t AnalysisPass;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::MemorySSAUpdater *v9;
  int v10;
  int v11;
  uint64_t v12;
  llvm::Type *v13;
  llvm::DSOLocalEquivalent **v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int64x2_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  llvm *v25;
  uint64_t v26;
  int v27;
  void **v28;
  int v29;
  unsigned int v30;
  llvm *v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  llvm *v37;
  uint64_t v38;
  llvm::Type *v39;
  llvm::DSOLocalEquivalent **v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  int v49;
  unsigned __int8 *j;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  llvm::ValueAsMetadata *v55;
  uint64_t v56;
  uint64_t v57;
  void **k;
  void **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  llvm::ValueAsMetadata *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t *v73;
  llvm::Type *v74;
  uint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD **v85;
  uint64_t v86;
  llvm::UndefValue *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v91;
  std::string __dst;
  void *__p;
  void **v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  _QWORD v98[18];

  v98[16] = *MEMORY[0x1E0C80C00];
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), &llvm::DominatorTreeWrapperPass::ID, 1);
  if (AnalysisPass)
    v5 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::DominatorTreeWrapperPass::ID);
  else
    v5 = 0;
  if (v5)
    v6 = v5 + 32;
  else
    v6 = 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  if (*(char *)(v8 + 239) < 0)
    sub_1C47EBC30(&__dst, *(void **)(v8 + 216), *(_QWORD *)(v8 + 224));
  else
    __dst = *(std::string *)(v8 + 216);
  if (!std::string::compare(&__dst, 0, 4uLL, "agx1"))
  {
    v10 = 27;
  }
  else if (!std::string::compare(&__dst, 0, 4uLL, "agx2"))
  {
    v10 = 28;
  }
  else if (!std::string::compare(&__dst, 0, 4uLL, "agx3"))
  {
    v10 = 29;
  }
  else
  {
    v10 = 0;
  }
  *(_DWORD *)(v7 + 8) = v10;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v11 = llvm::removeUnreachableBlocks((llvm *)a2, 0, 0, v9);
  v15 = v11;
  if (v5 && v11)
  {
    *(_QWORD *)(v6 + 56) = a2;
    sub_1C53BA620(v6, 0);
  }
  v16 = *(_QWORD *)(a2 + 40);
  __p = (void *)1;
  v17 = 8;
  v18 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)((char *)&__p + v17) = v18;
    v17 += 16;
  }
  while (v17 != 136);
  v96 = v98;
  v97 = 0x1000000000;
  v19 = a2 + 72;
  for (i = *(_QWORD *)(a2 + 80); ; i = *(_QWORD *)(i + 8))
  {
    if (i == v19)
    {
      v23 = 0;
      goto LABEL_59;
    }
    v21 = i - 24;
    if (!i)
      v21 = 0;
    v22 = *(_QWORD *)(v21 + 48);
    if (v22 != v21 + 40)
      break;
  }
  v23 = 0;
  v24 = v16 + 272;
  do
  {
    if (v22)
      v25 = (llvm *)(v22 - 24);
    else
      v25 = 0;
    v22 = *(_QWORD *)(v22 + 8);
    v26 = i - 24;
    if (!i)
      v26 = 0;
    if (v22 == v26 + 40)
    {
      v34 = *(_QWORD *)(i + 8);
      i = a2 + 72;
      if (v34 != v19)
      {
        while (1)
        {
          v35 = v34 - 24;
          if (!v34)
            v35 = 0;
          v22 = *(_QWORD *)(v35 + 48);
          if (v22 != v35 + 40)
            break;
          v34 = *(_QWORD *)(v34 + 8);
          if (v34 == v19)
          {
            i = a2 + 72;
            goto LABEL_36;
          }
        }
        i = v34;
      }
    }
LABEL_36:
    if ((__p & 1) != 0)
    {
      v27 = 16;
      v28 = (void **)&v94;
    }
    else
    {
      v27 = v95;
      if (!(_DWORD)v95)
        goto LABEL_45;
      v28 = v94;
    }
    v29 = v27 - 1;
    v30 = v29 & ((v25 >> 4) ^ (v25 >> 9));
    v31 = (llvm *)v28[v30];
    if (v25 == v31)
      continue;
    v32 = 1;
    while (v31 != (llvm *)-4096)
    {
      v33 = v30 + v32++;
      v30 = v33 & v29;
      v31 = (llvm *)v28[v30];
      if (v25 == v31)
        goto LABEL_46;
    }
LABEL_45:
    v23 |= sub_1C565E868(v25, (uint64_t)&__p, v24, v12, v13, v14);
LABEL_46:
    ;
  }
  while (i != v19);
  while ((_DWORD)v97)
  {
    v36 = (char *)v96 + 8 * v97;
    v37 = (llvm *)*((_QWORD *)v36 - 1);
    sub_1C4E094A8((uint64_t)&__p, (_QWORD *)v36 - 1);
    LODWORD(v97) = v97 - 1;
    v23 |= sub_1C565E868(v37, (uint64_t)&__p, v24, v38, v39, v40);
  }
LABEL_59:
  if (v96 != v98)
    free(v96);
  if ((__p & 1) == 0)
    MEMORY[0x1CAA32FB4](v94, 8);
  v41 = v15 | v23;
  v42 = *(_QWORD *)(a2 + 96);
  if (v42)
  {
    v43 = *(_QWORD *)(a2 + 80);
    if (v43)
      v44 = v43 - 24;
    else
      v44 = 0;
    v45 = *(_QWORD *)(v44 + 48);
    if (v45)
      v46 = v45 - 24;
    else
      v46 = 0;
    sub_1C4773D54((uint64_t)&__p, v46, 0, 0, 0);
    if ((*(_WORD *)(a2 + 18) & 1) == 0)
    {
      v47 = *(unsigned __int8 **)(a2 + 88);
      goto LABEL_72;
    }
    llvm::Function::BuildLazyArguments((llvm::Function *)a2);
    v47 = *(unsigned __int8 **)(a2 + 88);
    if ((*(_WORD *)(a2 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)a2);
      v48 = *(unsigned __int8 **)(a2 + 88);
    }
    else
    {
LABEL_72:
      v48 = v47;
    }
    v49 = v41 & 1;
    for (j = &v48[40 * *(_QWORD *)(a2 + 96)]; v47 != j; v47 += 40)
    {
      if ((*(_DWORD *)(*(_QWORD *)v47 + 8) & 0xFE) == 0x12)
      {
        v51 = sub_1C565E58C(v7 + 16, (uint64_t)v47, *(_DWORD *)(*(_QWORD *)v47 + 32));
        sub_1C565B81C(v47, (uint64_t)&__p, (const llvm::APInt *)v51, 0);
      }
    }
    v52 = *(_QWORD *)(a2 + 80);
    if (v52)
      v53 = v52 - 24;
    else
      v53 = 0;
    if (v45 != v53 + 40)
    {
      do
      {
        v54 = *(_QWORD *)(v45 + 8);
        if (v45)
          v55 = (llvm::ValueAsMetadata *)(v45 - 24);
        else
          v55 = 0;
        v49 |= sub_1C565B944(v7, v55);
        v56 = *(_QWORD *)(a2 + 80);
        if (v56)
          v57 = v56 - 24;
        else
          v57 = 0;
        v45 = v54;
      }
      while (v54 != v57 + 40);
    }
    if (__p != &v95)
      free(__p);
    v41 = v49 & 1;
  }
  v91 = a2;
  v94 = 0;
  v95 = 0;
  __p = 0;
  sub_1C5643D14((char **)&__p, (uint64_t)&v91);
  v59 = (void **)__p;
  for (k = v94; k != v59; --k)
  {
    v61 = (uint64_t)*(k - 1);
    v60 = v61;
    if (v42)
    {
      v62 = *(_QWORD *)(a2 + 80);
      v63 = v62 ? v62 - 24 : 0;
      if (v60 == v63)
        continue;
    }
    v64 = v60 + 40;
    v65 = *(_QWORD *)(v60 + 48);
    if (v65 != v64)
    {
      do
      {
        v66 = *(_QWORD *)(v65 + 8);
        if (v65)
          v67 = (llvm::ValueAsMetadata *)(v65 - 24);
        else
          v67 = 0;
        v41 |= sub_1C565B944(v7, v67);
        v65 = v66;
      }
      while (v66 != v64);
    }
  }
  v68 = *(unsigned int *)(v7 + 144);
  if ((_DWORD)v68)
  {
    v69 = *(uint64_t **)(v7 + 136);
    v70 = &v69[v68];
    do
    {
      v71 = (_QWORD *)*v69;
      if ((*(_DWORD *)(*(_QWORD *)*v69 + 8) & 0xFE) == 0x12)
        v72 = *(_QWORD *)*v69;
      else
        v72 = 0;
      v73 = sub_1C565E58C(v7 + 16, *v69, *(_DWORD *)(v72 + 32));
      if (*(_DWORD *)(v72 + 32))
      {
        v75 = v73;
        v76 = 0;
        do
        {
          sub_1C565E7B4(v7, *(llvm::PHINode **)(*v75 + 8 * v76), (uint64_t)v71, (const llvm::APInt *)v76);
          ++v76;
        }
        while (v76 < *(unsigned int *)(v72 + 32));
      }
      ++v69;
    }
    while (v69 != v70);
    v77 = *(unsigned int *)(v7 + 144);
    if ((_DWORD)v77)
    {
      v78 = *(uint64_t **)(v7 + 136);
      v79 = &v78[v77];
      do
      {
        v80 = *v78;
        v81 = *(_DWORD *)(*v78 + 20);
        if ((v81 & 0x40000000) != 0)
        {
          v83 = *(_QWORD *)(v80 - 8);
          v82 = v81 & 0x7FFFFFF;
          if (v82)
          {
LABEL_117:
            v84 = 32 * v82;
            v85 = (_QWORD **)(v83 + 16);
            do
            {
              if (*(v85 - 2))
              {
                **v85 = *(v85 - 1);
                v86 = (uint64_t)*(v85 - 1);
                if (v86)
                  *(_QWORD *)(v86 + 16) = *v85;
              }
              *(v85 - 2) = 0;
              v85 += 4;
              v84 -= 32;
            }
            while (v84);
          }
        }
        else
        {
          v82 = v81 & 0x7FFFFFF;
          v83 = v80 - 32 * v82;
          if (v82)
            goto LABEL_117;
        }
        v87 = llvm::UndefValue::get(*(llvm::UndefValue **)v80, v74);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v80, v87, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v80 + 40) + 40, (uint64_t ***)v80);
        v88 = *(_QWORD *)(v80 + 24);
        v89 = *(_QWORD **)(v80 + 32);
        *v89 = v88;
        *(_QWORD *)(v88 + 8) = v89;
        *(_QWORD *)(v80 + 24) = 0;
        *(_QWORD *)(v80 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v80);
        ++v78;
      }
      while (v78 != v79);
    }
  }
  if (__p)
  {
    v94 = (void **)__p;
    operator delete(__p);
  }
  return v41 & 1;
}

_QWORD *sub_1C565B7A4(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)*result;
  *result = a2;
  if (v2)
  {
    v3 = (_QWORD *)v2[17];
    if (v3 != v2 + 19)
      free(v3);
    MEMORY[0x1CAA32FB4](v2[14], 8);
    sub_1C4926A50((uint64_t)(v2 + 2));
    sub_1C4926AE8((uint64_t)(v2 + 2));
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

unsigned __int8 *sub_1C565B81C(unsigned __int8 *result, uint64_t a2, const llvm::APInt *a3, int a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t i;
  uint64_t v10;
  llvm::ConstantInt *v11;
  unint64_t v12;
  unint64_t v13;
  llvm::ValueHandleBase *v14;
  unint64_t v15;
  unsigned int v16;
  __int16 v17;

  v4 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v4)
  {
    v7 = (uint64_t)result;
    for (i = 0; i != v4; ++i)
    {
      v10 = **(_QWORD **)(a2 + 64);
      v11 = *(llvm::ConstantInt **)(v10 + 1960);
      v12 = *(unsigned int *)(v10 + 1968);
      v16 = v12 >> 8;
      if (v12 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v15, i, 0);
      }
      else
      {
        if (v12 <= 0xFF)
          v13 = 0;
        else
          v13 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v12);
        v15 = v13 & i;
      }
      v14 = llvm::ConstantInt::get(v11, (llvm::LLVMContext *)&v15, a3);
      if (v16 >= 0x41)
      {
        if (v15)
          MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
      }
      v17 = 257;
      result = sub_1C4772EE0((uint64_t *)a2, v7, (uint64_t)v14, (uint64_t)&v15);
      *(_QWORD *)(*(_QWORD *)a3 + 8 * (a4 + i)) = result;
    }
  }
  return result;
}

uint64_t sub_1C565B944(uint64_t a1, llvm::ValueAsMetadata *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  llvm::ConstantDataSequential *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t i;
  llvm::ConstantInt **v11;
  llvm::ConstantInt *v12;
  const llvm::APInt *v13;
  uint64_t *v14;
  const llvm::APInt *j;
  llvm::Value **v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v20;
  BOOL v21;
  _QWORD *v22;
  uint64_t v23;
  llvm::Type *v24;
  _QWORD *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int PrimitiveSizeInBits;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v34;
  uint64_t v35;
  llvm::UndefValue *Select;
  const llvm::APInt *v37;
  llvm::Value **v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  llvm::Value **v42;
  uint64_t v43;
  uint64_t *v44;
  llvm::Value **v45;
  uint64_t v46;
  unsigned int v47;
  llvm::Type *v48;
  int v49;
  unsigned int v50;
  BOOL v51;
  int v52;
  llvm::Type *v53;
  _QWORD *v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  unsigned __int8 *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  unint64_t v67;
  const void *v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  int v72;
  llvm::ConstantDataSequential **v73;
  uint64_t v74;
  int v75;
  uint64_t *v76;
  llvm::Type *v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  llvm::ConstantDataSequential **v81;
  int v82;
  int v83;
  llvm::ConstantDataSequential **v84;
  llvm::UndefValue *v85;
  char *v86;
  int v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  llvm::ConstantDataSequential *v91;
  uint64_t v92;
  llvm::ConstantInt **v93;
  uint64_t v94;
  llvm::APFloatBase *ElementAsConstant;
  llvm::Value **v96;
  uint64_t v97;
  uint64_t *v98;
  llvm::UndefValue *v99;
  llvm::Value *v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  unsigned int v112;
  int v113;
  char *v114;
  const void *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  _QWORD *v120;
  uint64_t v121;
  llvm::Type *v122;
  uint64_t v123;
  unsigned int v124;
  unint64_t v125;
  uint64_t v126;
  int v127;
  unint64_t v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  uint64_t MetadataImpl;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  unsigned int v137;
  llvm::ValueAsMetadata **v138;
  llvm::ValueAsMetadata *v139;
  llvm::ValueAsMetadata **v140;
  int v141;
  BOOL v142;
  unsigned int v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD **v148;
  unsigned __int8 *v149;
  uint64_t v150;
  uint64_t v151;
  BOOL v152;
  int v153;
  unsigned __int8 *v154;
  uint64_t v155;
  unsigned __int8 *v156;
  unsigned __int8 *v157;
  uint64_t v158;
  const llvm::APInt *v159;
  unsigned __int8 *v160;
  llvm::ConstantInt *v161;
  unsigned int v162;
  unint64_t v163;
  llvm::ValueHandleBase *v164;
  _QWORD *v165;
  unsigned __int8 *v166;
  llvm::GetElementPtrInst *v167;
  uint64_t *v168;
  unsigned __int8 *v169;
  uint64_t v170;
  _QWORD *v171;
  llvm::MDNode *v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  int v176;
  unsigned int v177;
  llvm::ValueAsMetadata **v178;
  llvm::ValueAsMetadata *v179;
  llvm::ValueAsMetadata **v180;
  int v181;
  BOOL v182;
  unsigned int v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v192;
  uint64_t v193;
  uint64_t ***v194;
  unsigned int v195;
  char v196;
  char *v197;
  llvm::Type *v198;
  char *v199;
  llvm::Value *v200;
  uint64_t **v201;
  _QWORD *v202;
  uint64_t **v203;
  const llvm::APInt *v204;
  int v205;
  uint64_t m;
  llvm::ConstantInt *v207;
  unsigned int v208;
  unint64_t v209;
  llvm::ValueHandleBase *v210;
  unsigned __int8 *v211;
  void **v212;
  unsigned __int8 *v213;
  unsigned __int8 *v214;
  char *v215;
  char *v216;
  unsigned __int8 **v217;
  int v218;
  unsigned __int8 *v219;
  unsigned __int8 *v220;
  unsigned __int8 **v221;
  unsigned __int8 *v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  unsigned __int8 *v226;
  unsigned __int8 *v227;
  uint64_t v228;
  unsigned __int8 *v229;
  const llvm::APInt *v230;
  uint64_t v231;
  uint64_t v232;
  llvm::ConstantInt *v233;
  unsigned int v234;
  unint64_t v235;
  llvm::ValueHandleBase *v236;
  uint64_t v237;
  _QWORD *v238;
  int v239;
  uint64_t v240;
  uint64_t ***v241;
  unsigned int v242;
  char v243;
  char *v244;
  char *v245;
  llvm::Type *v246;
  llvm::Value *v247;
  uint64_t **v248;
  _QWORD *v249;
  uint64_t **v250;
  const llvm::APInt *v251;
  int MDKindID;
  llvm::ConstantInt *v253;
  unsigned int v254;
  char v255;
  llvm::ValueHandleBase *v256;
  llvm::Value *v257;
  char *v258;
  char *v259;
  llvm::ValueHandleBase **v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  uint64_t v264;
  llvm::ValueHandleBase ***v265;
  uint64_t v266;
  char *v267;
  char *v268;
  unsigned __int8 **v269;
  int v270;
  unsigned __int8 *v271;
  unsigned __int8 *v272;
  unsigned __int8 *v273;
  uint64_t k;
  llvm::ConstantInt *v275;
  unsigned int v276;
  unint64_t v277;
  llvm::ValueHandleBase *v278;
  unsigned __int8 *v279;
  void **v280;
  unsigned __int8 *v281;
  unsigned __int8 *v282;
  char *v283;
  char *v284;
  unsigned __int8 **v285;
  int v286;
  unsigned __int8 *v287;
  unsigned __int8 *v288;
  unsigned __int8 *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t *v293;
  uint64_t *v294;
  unint64_t v295;
  uint64_t *v296;
  uint64_t v297;
  int v298;
  _QWORD *v299;
  llvm::Value *v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  _QWORD *v305;
  _QWORD *v306;
  uint64_t v307;
  llvm::ValueSymbolTable *v308;
  llvm::ValueAsMetadata **v309;
  llvm::ValueAsMetadata *v310;
  llvm::ValueAsMetadata **v311;
  llvm::ValueAsMetadata *v312;
  char v313;
  char v314;
  char v315;
  int v316;
  uint64_t v317;
  const llvm::APInt *v318;
  uint64_t Declaration;
  uint64_t *v320;
  uint64_t *v321;
  const llvm::APInt *v322;
  unsigned int v323;
  unint64_t v324;
  uint64_t n;
  int v326;
  uint64_t v327;
  int v328;
  int v329;
  uint64_t v330;
  llvm::UndefValue *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t **v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  llvm::ValueAsMetadata *v339;
  llvm::GetElementPtrInst *v340;
  uint64_t v341;
  uint64_t *v342;
  uint64_t *v343;
  uint64_t v344;
  uint64_t ***v345;
  unsigned int v346;
  unint64_t v347;
  llvm::ValueAsMetadata *ii;
  int v349;
  uint64_t v350;
  int v351;
  int v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t **v356;
  char v357;
  uint64_t v358;
  BOOL v359;
  uint64_t v360;
  uint64_t *v361;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unsigned int v366;
  const llvm::APInt *v367;
  uint64_t *v368;
  const llvm::APInt *v369;
  uint64_t v370;
  int v371;
  uint64_t v372;
  llvm::UndefValue **v373;
  unsigned int v374;
  uint64_t jj;
  int v376;
  llvm::UndefValue **v377;
  llvm::UndefValue *v378;
  int v379;
  int v380;
  uint64_t *v381;
  uint64_t *v382;
  uint64_t v383;
  char *v384;
  _QWORD *v385;
  unsigned __int8 **v386;
  uint64_t v387;
  _QWORD *v388;
  uint64_t v389;
  uint64_t v390;
  _QWORD *v391;
  uint64_t v392;
  __int16 v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  char *v397;
  char *v398;
  unsigned __int8 **v399;
  int v400;
  unsigned __int8 *v401;
  unsigned __int8 *v402;
  uint64_t *v403;
  uint64_t v404;
  uint64_t *v405;
  uint64_t v406;
  unsigned int v407;
  char *v408;
  uint64_t v409;
  _QWORD *v410;
  _QWORD *v411;
  uint64_t v412;
  uint64_t v413;
  unsigned int v414;
  unsigned int v415;
  unsigned int v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t *v419;
  const llvm::APInt *v420;
  unsigned __int8 *v421;
  unsigned __int8 *v422;
  int v423;
  char *v424;
  unsigned __int8 **v425;
  unsigned __int8 **v426;
  unsigned __int8 **v427;
  uint64_t v428;
  llvm::MDNode *v429;
  int v430;
  unsigned int v431;
  llvm::GetElementPtrInst *v432;
  unsigned int v433;
  llvm::MDNode *v434;
  llvm::MDNode *v435;
  unsigned int v436;
  int v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  unsigned __int8 *v442;
  uint64_t *v443;
  int v445[2];
  uint64_t v446;
  uint64_t v447;
  int v448;
  int v449;
  char v450;
  int v451;
  unsigned int v452;
  unsigned int v453;
  llvm::Type *v454;
  unint64_t v455;
  unsigned int v456;
  __int16 v457;
  llvm::ValueAsMetadata *v458;
  void *v459;
  uint64_t v460;
  _QWORD v461[2];
  int *v462;
  uint64_t v463;
  unsigned __int8 **v464;
  llvm::Type **v465;
  uint64_t *v466;
  uint64_t *v467;
  char *v468;
  unsigned int *v469;
  char *v470;
  uint64_t v471;
  _WORD v472[16];
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;

  v2 = (uint64_t)a2;
  v478 = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v3 == 89)
  {
    v4 = *((_QWORD *)a2 - 4);
    v5 = (llvm::ConstantDataSequential *)*((_QWORD *)a2 - 8);
    if (v4)
      v6 = *(_BYTE *)(v4 + 16) == 16;
    else
      v6 = 0;
    if (!v6)
    {
      v7 = *(unsigned int *)(*(_QWORD *)v5 + 32);
      if (*((_BYTE *)v5 + 16) == 15)
      {
        v8 = sub_1C565E58C(a1 + 16, *((_QWORD *)a2 - 8), *(_DWORD *)(*(_QWORD *)v5 + 32));
        if ((_DWORD)v7)
        {
          v9 = v8;
          for (i = 0; i != v7; ++i)
            *(_QWORD *)(*v9 + 8 * i) = llvm::ConstantDataSequential::getElementAsConstant(v5);
        }
      }
      v11 = (llvm::ConstantInt **)*((_QWORD *)a2 - 4);
      v12 = *v11;
      sub_1C4773D54((uint64_t)&v470, (uint64_t)a2, 0, 0, 0);
      v13 = (const llvm::APInt *)(v7 - 1);
      v14 = (uint64_t *)sub_1C565EF38(a1, v5, v13);
      if (v7 > 3)
      {
        v433 = v7 >> 1;
        v436 = v7 - 1;
        v35 = (v7 >> 1) - 1;
        Select = sub_1C565EF38(a1, v5, (const llvm::APInt *)v35);
        v37 = 0;
        do
        {
          v38 = llvm::ConstantInt::get(v12, (uint64_t)v37, 0);
          LOWORD(v462) = 257;
          v39 = sub_1C4774B48((uint64_t)&v470, 32, (uint64_t)v11, (uint64_t)v38, (uint64_t)&v459);
          v40 = (uint64_t *)sub_1C565EF38(a1, v5, v37);
          LOWORD(v462) = 257;
          Select = llvm::IRBuilderBase::CreateSelect((uint64_t *)&v470, v39, v40, (uint64_t)Select, (uint64_t)&v459, 0);
          v37 = (const llvm::APInt *)((char *)v37 + 1);
        }
        while ((const llvm::APInt *)v35 != v37);
        if (v433 < v436)
        {
          v41 = v433;
          do
          {
            v42 = llvm::ConstantInt::get(v12, v41, 0);
            LOWORD(v462) = 257;
            v43 = sub_1C4774B48((uint64_t)&v470, 32, (uint64_t)v11, (uint64_t)v42, (uint64_t)&v459);
            v44 = (uint64_t *)sub_1C565EF38(a1, v5, (const llvm::APInt *)v41);
            LOWORD(v462) = 257;
            v14 = (uint64_t *)llvm::IRBuilderBase::CreateSelect((uint64_t *)&v470, v43, v44, (uint64_t)v14, (uint64_t)&v459, 0);
            ++v41;
          }
          while (v436 != (_DWORD)v41);
        }
        v45 = llvm::ConstantInt::get(v12, v35, 0);
        LOWORD(v462) = 257;
        v46 = sub_1C4774B48((uint64_t)&v470, 34, (uint64_t)v11, (uint64_t)v45, (uint64_t)&v459);
        LOWORD(v462) = 257;
        v14 = (uint64_t *)llvm::IRBuilderBase::CreateSelect((uint64_t *)&v470, v46, v14, (uint64_t)Select, (uint64_t)&v459, 0);
      }
      else if ((_DWORD)v13)
      {
        for (j = 0; j != v13; j = (const llvm::APInt *)((char *)j + 1))
        {
          v16 = llvm::ConstantInt::get(v12, (uint64_t)j, 0);
          LOWORD(v462) = 257;
          v17 = sub_1C4774B48((uint64_t)&v470, 32, (uint64_t)v11, (uint64_t)v16, (uint64_t)&v459);
          v18 = (uint64_t *)sub_1C565EF38(a1, v5, j);
          LOWORD(v462) = 257;
          v14 = (uint64_t *)llvm::IRBuilderBase::CreateSelect((uint64_t *)&v470, v17, v18, (uint64_t)v14, (uint64_t)&v459, 0);
        }
      }
      if (v470 != (char *)v472)
        free(v470);
      v23 = 1;
      llvm::Value::doRAUW(a2, (llvm::Value *)v14, (llvm::Value *)1);
      sub_1C565ECC8(a1, (uint64_t)a2);
      return v23;
    }
    if (*((unsigned __int8 *)v5 + 16) >= 0x15u)
    {
      v470 = 0;
      if (!sub_1C4E580F4(*(_QWORD *)(a1 + 112), *(_DWORD *)(a1 + 128), (uint64_t)v5, &v470)
        || v470 == (char *)(*(_QWORD *)(a1 + 112) + 24 * *(unsigned int *)(a1 + 128)))
      {
        llvm::report_fatal_error((llvm *)"Internal compiler error", (const char *)1);
      }
      v22 = (_QWORD *)(v4 + 24);
      if (*(_DWORD *)(v4 + 32) >= 0x41u)
        v22 = (_QWORD *)*v22;
      v23 = 1;
      llvm::Value::doRAUW(a2, *(llvm::Value **)(*((_QWORD *)v470 + 1) + 8 * *v22), (llvm::Value *)1);
      return v23;
    }
    return 0;
  }
  if (a2 && v3 == 61)
  {
    v458 = a2;
    v20 = **((_QWORD **)a2 - 8);
    if (v20)
      v21 = (*(_DWORD *)(v20 + 8) & 0xFE) == 18;
    else
      v21 = 0;
    if (!v21)
    {
      v2 = (uint64_t)a2;
LABEL_40:
      v34 = *(_QWORD *)v2;
      v3 = 61;
LABEL_74:
      v52 = *(_DWORD *)(v34 + 8);
      goto LABEL_75;
    }
    v24 = **(llvm::Type ***)(v20 + 16);
    v454 = v24;
    v25 = *(_QWORD **)v20;
    v26 = *(_DWORD *)a1;
    v27 = *(_DWORD *)a1 >> 5;
    v453 = v27;
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v24);
    v29 = *(_DWORD *)(v20 + 32);
    v452 = v29;
    v30 = **((_QWORD **)a2 - 4);
    v31 = *(_DWORD *)(v30 + 8);
    v2 = (uint64_t)a2;
    if ((v31 & 0xFE) == 0x12)
      v31 = *(_DWORD *)(**(_QWORD **)(v30 + 16) + 8);
    v32 = v31 >> 8;
    if (v32 == 64)
      goto LABEL_40;
    if (v32 == 3)
      v26 = *(_DWORD *)(a1 + 4);
    sub_1C4773D54((uint64_t)&v470, (uint64_t)a2, 0, 0, 0);
    if (v26 <= PrimitiveSizeInBits || v29 == 1)
    {
      v47 = 1;
      v451 = 1;
      v26 = PrimitiveSizeInBits;
    }
    else
    {
      v47 = v26 / PrimitiveSizeInBits;
      v451 = v26 / PrimitiveSizeInBits;
      llvm::FixedVectorType::get(v24, (llvm::Type *)(v26 / PrimitiveSizeInBits));
      v24 = v48;
    }
    if (PrimitiveSizeInBits == 16 && v29 % v47 > v27)
      v49 = v29 & 1;
    else
      v49 = 0;
    v50 = v29 * PrimitiveSizeInBits;
    v450 = v49;
    if (v29 == 1 || (v50 <= v26 ? (v51 = v49 == 0) : (v51 = 0), !v51))
    {
      v101 = v2;
      v102 = v47 * PrimitiveSizeInBits;
      v103 = **(_QWORD **)(v101 - 32);
      v104 = *(_DWORD *)(v103 + 8);
      if ((v104 & 0xFE) == 0x12)
        v104 = *(_DWORD *)(**(_QWORD **)(v103 + 16) + 8);
      v105 = llvm::PointerType::get(v24, (llvm::Type *)(v104 >> 8));
      v106 = 1 << ((unint64_t)*((unsigned __int16 *)a2 + 9) >> 1);
      v449 = v106;
      if (v102 >> 3 < v106)
        LODWORD(v106) = v102 >> 3;
      v448 = v106;
      v107 = *((_DWORD *)a2 + 5);
      if (*((_QWORD *)a2 + 6))
      {
        if ((v107 & 0x20000000) == 0)
          goto LABEL_180;
      }
      else if ((v107 & 0x20000000) == 0)
      {
        MetadataImpl = 0;
        v447 = 0;
LABEL_185:
        v446 = MetadataImpl;
        v149 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
        if (v149[16] == 62)
          v150 = *((_QWORD *)a2 - 4);
        else
          v150 = 0;
        if (v150)
        {
          v151 = *(_QWORD *)(v150 - 32 * (*(_DWORD *)(v150 + 20) & 0x7FFFFFF) + 32);
          if (v151)
            v152 = *(unsigned __int8 *)(v151 + 16) - 67 >= 2;
          else
            v152 = 1;
          v153 = !v152;
        }
        else
        {
          v153 = 0;
        }
        v459 = &v452;
        v460 = (uint64_t)&v451;
        v461[0] = &v470;
        v461[1] = &v448;
        v462 = &v449;
        v463 = a1;
        v464 = (unsigned __int8 **)&v458;
        v465 = &v454;
        v466 = &v447;
        v467 = &v446;
        v468 = &v450;
        v469 = &v453;
        if (v153)
        {
          v154 = *(unsigned __int8 **)(v150 - 32 * (*(_DWORD *)(v150 + 20) & 0x7FFFFFF));
          v457 = 257;
          v155 = (v50 + v26 - 1) / v26;
          v156 = sub_1C4773E38((uint64_t *)&v470, 49, v154, v105, (uint64_t)&v455);
          v157 = *(unsigned __int8 **)(v150 - 32 * (*(_DWORD *)(v150 + 20) & 0x7FFFFFF) + 32);
          v158 = *v25 + 1960;
          v457 = 257;
          v160 = sub_1C4773E38((uint64_t *)&v470, 38, v157, v158, (uint64_t)&v455);
          v161 = *(llvm::ConstantInt **)(*(_QWORD *)v475 + 1960);
          v162 = *(_DWORD *)(*(_QWORD *)v475 + 1968);
          v456 = v162 >> 8;
          if (v162 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v455, v155, 0);
          }
          else
          {
            if (v162 <= 0xFF)
              v163 = 0;
            else
              v163 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v162);
            v455 = v163 & v155;
          }
          v164 = llvm::ConstantInt::get(v161, (llvm::LLVMContext *)&v455, v159);
          if (v456 >= 0x41 && v455)
            MEMORY[0x1CAA32F9C](v455, 0x1000C8000313F17);
          v457 = 257;
          v165 = (_QWORD *)sub_1C4EC4040((uint64_t)&v470, (uint64_t)v160, (uint64_t)v164, (uint64_t)&v455, 0, 0);
          v166 = *(unsigned __int8 **)(v150 - 32 * (*(_DWORD *)(v150 + 20) & 0x7FFFFFF));
          v167 = v24;
          v168 = (uint64_t *)v156;
        }
        else
        {
          v457 = 257;
          v168 = (uint64_t *)sub_1C4773E38((uint64_t *)&v470, 49, v149, v105, (uint64_t)&v455);
          v166 = (unsigned __int8 *)*((_QWORD *)v458 - 4);
          v167 = v24;
          v165 = 0;
        }
        sub_1C565F1D4((unsigned int **)&v459, v167, v168, v166, v165);
        v169 = (unsigned __int8 *)v458;
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v458 + 5) + 40, (uint64_t ***)v458);
        v170 = *((_QWORD *)v169 + 3);
        v171 = (_QWORD *)*((_QWORD *)v169 + 4);
        *v171 = v170;
        *(_QWORD *)(v170 + 8) = v171;
        *((_QWORD *)v169 + 3) = 0;
        *((_QWORD *)v169 + 4) = 0;
        llvm::Value::deleteValue((llvm::Value *)v169);
        goto LABEL_206;
      }
      v133 = ***(_QWORD ***)a2;
      v459 = a2;
      v134 = *(_DWORD *)(v133 + 2496);
      if (v134)
      {
        v135 = *(_QWORD *)(v133 + 2480);
        v136 = v134 - 1;
        v137 = v136 & ((a2 >> 4) ^ (a2 >> 9));
        v138 = (llvm::ValueAsMetadata **)(v135 + 40 * v137);
        v139 = *v138;
        if (*v138 == a2)
          goto LABEL_175;
        v140 = 0;
        v141 = 1;
        while (v139 != (llvm::ValueAsMetadata *)-4096)
        {
          if (v140)
            v142 = 0;
          else
            v142 = v139 == (llvm::ValueAsMetadata *)-8192;
          if (v142)
            v140 = v138;
          v143 = v137 + v141++;
          v137 = v143 & v136;
          v138 = (llvm::ValueAsMetadata **)(v135 + 40 * v137);
          v139 = *v138;
          if (*v138 == a2)
            goto LABEL_175;
        }
        if (v140)
          v309 = v140;
        else
          v309 = v138;
      }
      else
      {
        v309 = 0;
      }
      v138 = (llvm::ValueAsMetadata **)sub_1C541AB24(v133 + 2480, (uint64_t)&v459, (uint64_t *)&v459, v309);
      v310 = (llvm::ValueAsMetadata *)v459;
      v138[3] = 0;
      v138[4] = 0;
      *v138 = v310;
      v138[1] = (llvm::ValueAsMetadata *)(v138 + 3);
      v138[2] = (llvm::ValueAsMetadata *)0x100000000;
LABEL_175:
      v144 = *((unsigned int *)v138 + 4);
      if ((_DWORD)v144)
      {
        v145 = (_QWORD *)((char *)v138[1] + 8);
        v146 = 16 * v144;
        while (*((_DWORD *)v145 - 2) != 1)
        {
          v147 = 0;
          v145 += 2;
          v146 -= 16;
          if (!v146)
            goto LABEL_181;
        }
        v147 = *v145;
        goto LABEL_181;
      }
LABEL_180:
      v147 = 0;
LABEL_181:
      v148 = (_QWORD **)*((_QWORD *)a2 + 6);
      v447 = v147;
      if (v148 || (*((_BYTE *)a2 + 23) & 0x20) != 0)
        MetadataImpl = llvm::Instruction::getMetadataImpl((uint64_t ***)a2, "srcloc", 6uLL);
      else
        MetadataImpl = 0;
      goto LABEL_185;
    }
    if (v470 != (char *)v472)
      free(v470);
    v3 = *(unsigned __int8 *)(v2 + 16);
  }
  v34 = *(_QWORD *)v2;
  if (!v2 || v3 != 60)
    goto LABEL_74;
  v52 = *(unsigned __int8 *)(v34 + 8);
  if (v34 && v52 == 18)
  {
    v53 = **(llvm::Type ***)(v34 + 16);
    v54 = *(_QWORD **)v34;
    v55 = llvm::Type::getPrimitiveSizeInBits(v53);
    v56 = v55;
    v57 = *(_DWORD *)(v34 + 32);
    v58 = *(unsigned __int8 **)(v2 - 32);
    v59 = *(_DWORD *)(*(_QWORD *)v58 + 8);
    if ((v59 & 0xFE) == 0x12)
      v59 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v58 + 16) + 8);
    v60 = v59 >> 8;
    if (v60 == 3)
    {
      v61 = v55;
      if ((*(_DWORD *)(a1 + 8) - 27) <= 2)
        v61 = *(_DWORD *)(a1 + 4);
    }
    else if (v60 != 64 || (v61 = v55, (*(_DWORD *)(a1 + 8) - 27) <= 2) && (v61 = v55, v58[16] >= 0x15u))
    {
      v61 = *(_DWORD *)a1;
    }
    v121 = v57 * v55;
    if (v57 != 1 && v121 <= v61)
    {
      v3 = 60;
      v2 = (uint64_t)a2;
      goto LABEL_75;
    }
    sub_1C4773D54((uint64_t)&v470, (uint64_t)a2, 0, 0, 0);
    v437 = 1;
    if (v61 <= v56 || v57 == 1)
    {
      v61 = v56;
    }
    else
    {
      v437 = v61 / v56;
      llvm::FixedVectorType::get(v53, (llvm::Type *)(v61 / v56));
      v53 = v122;
    }
    v123 = **((_QWORD **)a2 - 4);
    v124 = *(_DWORD *)(v123 + 8);
    if ((v124 & 0xFE) == 0x12)
      v124 = *(_DWORD *)(**(_QWORD **)(v123 + 16) + 8);
    v125 = (v121 + (unint64_t)v61 - 1) / v61;
    v126 = llvm::PointerType::get(v53, (llvm::Type *)(v124 >> 8));
    v127 = __clz(1 << ((unint64_t)*((unsigned __int16 *)a2 + 9) >> 1));
    v128 = (v437 * v56) >> 3;
    v430 = v127 ^ 0x3F | 0x100;
    v431 = v430;
    if (!(v128 >> (v127 ^ 0x3Fu)))
    {
      v129 = __clz(v128) ^ 0x3F | 0x100;
      if (v437 * v56 <= 7)
        v130 = 0;
      else
        v130 = v129;
      v431 = v130;
    }
    v131 = *((_DWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 6))
    {
      if ((v131 & 0x20000000) == 0)
        goto LABEL_224;
    }
    else if ((v131 & 0x20000000) == 0)
    {
      v172 = 0;
      goto LABEL_227;
    }
    v173 = ***(_QWORD ***)a2;
    v459 = a2;
    v174 = *(_DWORD *)(v173 + 2496);
    if (v174)
    {
      v175 = *(_QWORD *)(v173 + 2480);
      v176 = v174 - 1;
      v177 = v176 & ((a2 >> 4) ^ (a2 >> 9));
      v178 = (llvm::ValueAsMetadata **)(v175 + 40 * v177);
      v179 = *v178;
      if (*v178 == a2)
        goto LABEL_219;
      v180 = 0;
      v181 = 1;
      while (v179 != (llvm::ValueAsMetadata *)-4096)
      {
        if (v180)
          v182 = 0;
        else
          v182 = v179 == (llvm::ValueAsMetadata *)-8192;
        if (v182)
          v180 = v178;
        v183 = v177 + v181++;
        v177 = v183 & v176;
        v178 = (llvm::ValueAsMetadata **)(v175 + 40 * v177);
        v179 = *v178;
        if (*v178 == a2)
          goto LABEL_219;
      }
      if (v180)
        v311 = v180;
      else
        v311 = v178;
    }
    else
    {
      v311 = 0;
    }
    v178 = (llvm::ValueAsMetadata **)sub_1C541AB24(v173 + 2480, (uint64_t)&v459, (uint64_t *)&v459, v311);
    v312 = (llvm::ValueAsMetadata *)v459;
    v178[3] = 0;
    v178[4] = 0;
    *v178 = v312;
    v178[1] = (llvm::ValueAsMetadata *)(v178 + 3);
    v178[2] = (llvm::ValueAsMetadata *)0x100000000;
LABEL_219:
    v184 = *((unsigned int *)v178 + 4);
    if ((_DWORD)v184)
    {
      v185 = (_QWORD *)((char *)v178[1] + 8);
      v186 = 16 * v184;
      while (*((_DWORD *)v185 - 2) != 1)
      {
        v172 = 0;
        v185 += 2;
        v186 -= 16;
        if (!v186)
          goto LABEL_225;
      }
      v172 = (llvm::MDNode *)*v185;
LABEL_225:
      if (*((_QWORD *)a2 + 6) || (*((_BYTE *)a2 + 23) & 0x20) != 0)
      {
        v434 = (llvm::MDNode *)llvm::Instruction::getMetadataImpl((uint64_t ***)a2, "srcloc", 6uLL);
        goto LABEL_229;
      }
LABEL_227:
      v434 = 0;
LABEL_229:
      v429 = v172;
      v187 = sub_1C565E58C(a1 + 16, (uint64_t)a2, v437 * (int)v125);
      v188 = *((_QWORD *)a2 - 4);
      *(_QWORD *)v445 = v53;
      if (v188 && *(_BYTE *)(v188 + 16) == 62)
      {
        v189 = v188 - 32 * (*(_DWORD *)(v188 + 20) & 0x7FFFFFF);
        v190 = *(_QWORD *)(v189 + 32);
        if (v190 && *(unsigned __int8 *)(v190 + 16) - 67 <= 1)
        {
          v226 = *(unsigned __int8 **)v189;
          LOWORD(v462) = 257;
          v443 = (uint64_t *)sub_1C4773E38((uint64_t *)&v470, 49, v226, v126, (uint64_t)&v459);
          v227 = *(unsigned __int8 **)(v188 - 32 * (*(_DWORD *)(v188 + 20) & 0x7FFFFFF) + 32);
          v228 = *v54 + 1960;
          LOWORD(v462) = 257;
          v229 = sub_1C4773E38((uint64_t *)&v470, 38, v227, v228, (uint64_t)&v459);
          v231 = (uint64_t)v229;
          v232 = v125;
          v233 = *(llvm::ConstantInt **)(*(_QWORD *)v475 + 1960);
          v234 = *(_DWORD *)(*(_QWORD *)v475 + 1968);
          LODWORD(v460) = v234 >> 8;
          if (v234 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v459, v125, 0);
          }
          else
          {
            if (v234 <= 0xFF)
              LODWORD(v235) = 0;
            else
              v235 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v234);
            v459 = (void *)(v235 & v125);
          }
          v236 = llvm::ConstantInt::get(v233, (llvm::LLVMContext *)&v459, v230);
          if (v460 >= 0x41 && v459)
            MEMORY[0x1CAA32F9C](v459, 0x1000C8000313F17);
          LOWORD(v462) = 257;
          v237 = sub_1C4EC4040((uint64_t)&v470, v231, (uint64_t)v236, (uint64_t)&v459, 0, 0);
          if (!(_DWORD)v125)
            goto LABEL_206;
          v238 = (_QWORD *)v237;
          v239 = 0;
          v240 = 0;
          v428 = v232;
          while (1)
          {
            LOWORD(v462) = 257;
            v241 = sub_1C5098FF4((uint64_t *)&v470, v53, v443, (uint64_t)v238, (uint64_t)&v459);
            if (v240)
              v242 = v431;
            else
              v242 = v430;
            v457 = 257;
            if (v242 <= 0xFF)
            {
              llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v473 + 56) + 40) + 272, (uint64_t)v53);
              LOBYTE(v242) = v243;
            }
            v244 = (char *)operator new(0x60uLL);
            v245 = v244;
            v246 = v53;
            v247 = (llvm::Value *)(v244 + 32);
            *((_QWORD *)v244 + 2) = 0;
            *((_QWORD *)v244 + 3) = v244 + 32;
            LOWORD(v462) = 257;
            *((_QWORD *)v244 + 4) = v246;
            *((_QWORD *)v244 + 5) = 0;
            *((_WORD *)v244 + 24) = 60;
            *((_DWORD *)v244 + 13) = 1;
            *(_OWORD *)(v244 + 56) = 0u;
            *(_OWORD *)(v244 + 72) = 0u;
            *((_DWORD *)v244 + 22) = 0;
            *(_QWORD *)v244 = v241;
            *((_QWORD *)v244 + 1) = 0;
            if (v241)
            {
              v250 = v241[1];
              v249 = v241 + 1;
              v248 = v250;
              *((_QWORD *)v244 + 1) = v250;
              if (v250)
                v248[2] = (uint64_t *)(v244 + 8);
              *((_QWORD *)v244 + 2) = v249;
              *v249 = v244;
            }
            *((_WORD *)v244 + 25) = 2 * (v242 & 0x3F);
            v244[92] = 1;
            llvm::Value::setName((uint64_t ***)v244 + 4, (uint64_t)&v459);
            (*(void (**)(uint64_t, llvm::Value *, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v477 + 16))(v477, v247, &v455, v473, v474);
            if ((_DWORD)v471)
              break;
LABEL_314:
            v251 = v429;
            if (v429)
              llvm::Value::setMetadata(v247, 1, v429);
            if (v434)
            {
              MDKindID = llvm::LLVMContext::getMDKindID(**(uint64_t ***)v247, "srcloc", 6uLL);
              if (MDKindID)
              {
                llvm::Value::setMetadata(v247, MDKindID, v434);
              }
              else
              {
                v459 = v434;
                llvm::MetadataTracking::track((uint64_t)&v459, (unsigned __int8 *)v434, 2);
                v281 = (unsigned __int8 *)*((_QWORD *)v245 + 10);
                v280 = (void **)(v245 + 80);
                v279 = v281;
                if (v281)
                  llvm::MetadataTracking::untrack((uint64_t)v280, v279);
                v282 = (unsigned __int8 *)v459;
                *v280 = v459;
                if (v282)
                  llvm::MetadataTracking::retrack((uint64_t)&v459, v282, (uint64_t)v280);
              }
            }
            if (v437)
            {
              if (v437 == 1)
              {
                *(_QWORD *)(*v187 + 8 * v240) = v247;
              }
              else
              {
                for (k = 0;
                      k != v437;
                      *(_QWORD *)(*v187 + 8 * (v239 + k++)) = sub_1C4772EE0((uint64_t *)&v470, (uint64_t)v247, (uint64_t)v278, (uint64_t)&v459))
                {
                  v275 = *(llvm::ConstantInt **)(*(_QWORD *)v475 + 1960);
                  v276 = *(_DWORD *)(*(_QWORD *)v475 + 1968);
                  LODWORD(v460) = v276 >> 8;
                  if (v276 >> 8 > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v459, k, 0);
                  }
                  else
                  {
                    if (v276 <= 0xFF)
                      v277 = 0;
                    else
                      v277 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v276);
                    v459 = (void *)(v277 & k);
                  }
                  v278 = llvm::ConstantInt::get(v275, (llvm::LLVMContext *)&v459, v251);
                  if (v460 >= 0x41 && v459)
                    MEMORY[0x1CAA32F9C](v459, 0x1000C8000313F17);
                  LOWORD(v462) = 257;
                }
              }
            }
            v253 = *(llvm::ConstantInt **)(*(_QWORD *)v475 + 1960);
            v254 = *(_DWORD *)(*(_QWORD *)v475 + 1968);
            LODWORD(v460) = v254 >> 8;
            if (v254 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v459, 1, 0);
            }
            else
            {
              if (v254 <= 0xFF)
                v255 = 0;
              else
                v255 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v254);
              v459 = (void *)(v255 & 1);
            }
            v53 = *(llvm::Type **)v445;
            v256 = llvm::ConstantInt::get(v253, (llvm::LLVMContext *)&v459, v251);
            if (v460 >= 0x41 && v459)
              MEMORY[0x1CAA32F9C](v459, 0x1000C8000313F17);
            v457 = 257;
            v257 = (llvm::Value *)(*(uint64_t (**)(uint64_t, _QWORD *, llvm::ValueHandleBase *, _QWORD, _QWORD))(*(_QWORD *)v476 + 16))(v476, v238, v256, 0, 0);
            if (!v257)
            {
              LOWORD(v462) = 257;
              v258 = (char *)operator new(0x80uLL);
              v259 = v258;
              *(_QWORD *)v258 = 0;
              *((_QWORD *)v258 + 1) = 0;
              *((_QWORD *)v258 + 2) = 0;
              *((_QWORD *)v258 + 5) = 0;
              *((_QWORD *)v258 + 6) = 0;
              *((_QWORD *)v258 + 4) = 0;
              v260 = (llvm::ValueHandleBase **)(v258 + 32);
              *((_QWORD *)v258 + 8) = *v238;
              v257 = (llvm::Value *)(v258 + 64);
              *((_QWORD *)v258 + 3) = v258 + 64;
              *((_QWORD *)v258 + 7) = v258 + 64;
              *((_QWORD *)v258 + 9) = 0;
              v258[80] = 41;
              v258[81] = 0;
              *((_WORD *)v258 + 41) = 0;
              *((_DWORD *)v258 + 21) = 2;
              *((_DWORD *)v258 + 30) = 0;
              *(_OWORD *)(v258 + 104) = 0u;
              *(_OWORD *)(v258 + 88) = 0u;
              *(_QWORD *)v258 = v238;
              v263 = v238[1];
              v262 = v238 + 1;
              v261 = v263;
              *((_QWORD *)v258 + 1) = v263;
              if (v263)
                *(_QWORD *)(v261 + 16) = v258 + 8;
              *((_QWORD *)v258 + 2) = v262;
              *v262 = v258;
              if (*((_QWORD *)v258 + 4))
              {
                **((_QWORD **)v258 + 6) = *((_QWORD *)v258 + 5);
                v290 = *((_QWORD *)v258 + 5);
                if (v290)
                  *(_QWORD *)(v290 + 16) = *((_QWORD *)v258 + 6);
              }
              *v260 = v256;
              if (v256)
              {
                v266 = *((_QWORD *)v256 + 1);
                v265 = (llvm::ValueHandleBase ***)((char *)v256 + 8);
                v264 = v266;
                *((_QWORD *)v258 + 5) = v266;
                if (v266)
                  *(_QWORD *)(v264 + 16) = v258 + 40;
                *((_QWORD *)v258 + 6) = v265;
                *v265 = v260;
              }
              llvm::Value::setName((uint64_t ***)v258 + 8, (uint64_t)&v459);
              (*(void (**)(uint64_t, llvm::Value *, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v477 + 16))(v477, v257, &v455, v473, v474);
              if ((_DWORD)v471)
              {
                v267 = v470;
                v268 = &v470[16 * v471];
                v269 = (unsigned __int8 **)(v259 + 112);
                do
                {
                  v270 = *(_DWORD *)v267;
                  v271 = (unsigned __int8 *)*((_QWORD *)v267 + 1);
                  if (v271)
                  {
                    if (!v270)
                    {
                      v458 = (llvm::ValueAsMetadata *)*((_QWORD *)v267 + 1);
                      llvm::MetadataTracking::track((uint64_t)&v458, v271, 2);
                      v272 = *v269;
                      goto LABEL_348;
                    }
                  }
                  else
                  {
                    v272 = *v269;
                    if (!*v269 && (v259[87] & 0x20) == 0)
                      goto LABEL_345;
                    if (!v270)
                    {
                      v458 = 0;
LABEL_348:
                      if (v272)
                        llvm::MetadataTracking::untrack((uint64_t)(v259 + 112), v272);
                      v273 = (unsigned __int8 *)v458;
                      *v269 = (unsigned __int8 *)v458;
                      if (v273)
                        llvm::MetadataTracking::retrack((uint64_t)&v458, v273, (uint64_t)(v259 + 112));
                      goto LABEL_345;
                    }
                  }
                  llvm::Value::setMetadata(v257, *(_DWORD *)v267, (llvm::MDNode *)v271);
LABEL_345:
                  v267 += 16;
                }
                while (v267 != v268);
              }
              v53 = *(llvm::Type **)v445;
            }
            ++v240;
            v239 += v437;
            v238 = v257;
            if (v240 == v428)
              goto LABEL_206;
          }
          v283 = v470;
          v284 = &v470[16 * v471];
          v285 = (unsigned __int8 **)(v245 + 80);
          while (1)
          {
            v286 = *(_DWORD *)v283;
            v287 = (unsigned __int8 *)*((_QWORD *)v283 + 1);
            if (v287)
            {
              if (!v286)
              {
                v458 = (llvm::ValueAsMetadata *)*((_QWORD *)v283 + 1);
                llvm::MetadataTracking::track((uint64_t)&v458, v287, 2);
                v288 = *v285;
                goto LABEL_382;
              }
            }
            else
            {
              v288 = *v285;
              if (!*v285 && (v245[55] & 0x20) == 0)
                goto LABEL_379;
              if (!v286)
              {
                v458 = 0;
LABEL_382:
                if (v288)
                  llvm::MetadataTracking::untrack((uint64_t)(v245 + 80), v288);
                v289 = (unsigned __int8 *)v458;
                *v285 = (unsigned __int8 *)v458;
                if (v289)
                  llvm::MetadataTracking::retrack((uint64_t)&v458, v289, (uint64_t)(v245 + 80));
                goto LABEL_379;
              }
            }
            llvm::Value::setMetadata(v247, *(_DWORD *)v283, (llvm::MDNode *)v287);
LABEL_379:
            v283 += 16;
            if (v283 == v284)
              goto LABEL_314;
          }
        }
      }
      LOWORD(v462) = 257;
      v442 = sub_1C4773E38((uint64_t *)&v470, 49, (unsigned __int8 *)v188, v126, (uint64_t)&v459);
      if (!(_DWORD)v125)
      {
LABEL_206:
        v86 = v470;
        goto LABEL_558;
      }
      v192 = 0;
      v193 = 0;
      while (1)
      {
        LOWORD(v462) = 257;
        v194 = sub_1C4772C18((uint64_t *)&v470, v53, v442, v193, (uint64_t)&v459);
        if (v193)
          v195 = v431;
        else
          v195 = v430;
        v457 = 257;
        if (v195 <= 0xFF)
        {
          llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v473 + 56) + 40) + 272, (uint64_t)v53);
          LOBYTE(v195) = v196;
        }
        v197 = (char *)operator new(0x60uLL);
        v198 = v53;
        v199 = v197;
        v200 = (llvm::Value *)(v197 + 32);
        *((_QWORD *)v197 + 2) = 0;
        *((_QWORD *)v197 + 3) = v197 + 32;
        LOWORD(v462) = 257;
        *((_QWORD *)v197 + 4) = v198;
        *((_QWORD *)v197 + 5) = 0;
        *((_WORD *)v197 + 24) = 60;
        *((_DWORD *)v197 + 13) = 1;
        *(_OWORD *)(v197 + 56) = 0u;
        *(_OWORD *)(v197 + 72) = 0u;
        *((_DWORD *)v197 + 22) = 0;
        *(_QWORD *)v197 = v194;
        *((_QWORD *)v197 + 1) = 0;
        if (v194)
        {
          v203 = v194[1];
          v202 = v194 + 1;
          v201 = v203;
          *((_QWORD *)v197 + 1) = v203;
          if (v203)
            v201[2] = (uint64_t *)(v197 + 8);
          *((_QWORD *)v197 + 2) = v202;
          *v202 = v197;
        }
        *((_WORD *)v197 + 25) = 2 * (v195 & 0x3F);
        v197[92] = 1;
        llvm::Value::setName((uint64_t ***)v197 + 4, (uint64_t)&v459);
        (*(void (**)(uint64_t, llvm::Value *, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v477 + 16))(v477, v200, &v455, v473, v474);
        if ((_DWORD)v471)
          break;
LABEL_248:
        v204 = v429;
        if (v429)
          llvm::Value::setMetadata(v200, 1, v429);
        if (v434)
        {
          v205 = llvm::LLVMContext::getMDKindID(**(uint64_t ***)v200, "srcloc", 6uLL);
          if (v205)
          {
            llvm::Value::setMetadata(v200, v205, v434);
          }
          else
          {
            v459 = v434;
            llvm::MetadataTracking::track((uint64_t)&v459, (unsigned __int8 *)v434, 2);
            v213 = (unsigned __int8 *)*((_QWORD *)v199 + 10);
            v212 = (void **)(v199 + 80);
            v211 = v213;
            if (v213)
              llvm::MetadataTracking::untrack((uint64_t)v212, v211);
            v214 = (unsigned __int8 *)v459;
            *v212 = v459;
            if (v214)
              llvm::MetadataTracking::retrack((uint64_t)&v459, v214, (uint64_t)v212);
          }
        }
        if (v437)
        {
          if (v437 == 1)
          {
            *(_QWORD *)(*v187 + 8 * v193) = v200;
          }
          else
          {
            for (m = 0;
                  m != v437;
                  *(_QWORD *)(*v187 + 8 * (v192 + m++)) = sub_1C4772EE0((uint64_t *)&v470, (uint64_t)v200, (uint64_t)v210, (uint64_t)&v459))
            {
              v207 = *(llvm::ConstantInt **)(*(_QWORD *)v475 + 1960);
              v208 = *(_DWORD *)(*(_QWORD *)v475 + 1968);
              LODWORD(v460) = v208 >> 8;
              if (v208 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v459, m, 0);
              }
              else
              {
                if (v208 <= 0xFF)
                  v209 = 0;
                else
                  v209 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v208);
                v459 = (void *)(v209 & m);
              }
              v210 = llvm::ConstantInt::get(v207, (llvm::LLVMContext *)&v459, v204);
              if (v460 >= 0x41 && v459)
                MEMORY[0x1CAA32F9C](v459, 0x1000C8000313F17);
              LOWORD(v462) = 257;
            }
          }
        }
        ++v193;
        v192 += v437;
        v53 = *(llvm::Type **)v445;
        if (v193 == v125)
          goto LABEL_206;
      }
      v215 = v470;
      v216 = &v470[16 * v471];
      v217 = (unsigned __int8 **)(v199 + 80);
      while (1)
      {
        v218 = *(_DWORD *)v215;
        v219 = (unsigned __int8 *)*((_QWORD *)v215 + 1);
        if (v219)
        {
          if (!v218)
          {
            v458 = (llvm::ValueAsMetadata *)*((_QWORD *)v215 + 1);
            v425 = v217;
            llvm::MetadataTracking::track((uint64_t)&v458, v219, 2);
            v217 = v425;
            v220 = *v425;
            goto LABEL_285;
          }
        }
        else
        {
          v220 = *v217;
          if (!*v217 && (v199[55] & 0x20) == 0)
            goto LABEL_282;
          if (!v218)
          {
            v458 = 0;
LABEL_285:
            if (v220)
            {
              v427 = v217;
              llvm::MetadataTracking::untrack((uint64_t)v217, v220);
              v217 = v427;
            }
            v222 = (unsigned __int8 *)v458;
            *v217 = (unsigned __int8 *)v458;
            if (v222)
            {
              v426 = v217;
              llvm::MetadataTracking::retrack((uint64_t)&v458, v222, (uint64_t)v217);
              v217 = v426;
            }
            goto LABEL_282;
          }
        }
        v424 = v216;
        v221 = v217;
        llvm::Value::setMetadata(v200, *(_DWORD *)v215, (llvm::MDNode *)v219);
        v217 = v221;
        v216 = v424;
LABEL_282:
        v215 += 16;
        if (v215 == v216)
          goto LABEL_248;
      }
    }
LABEL_224:
    v172 = 0;
    goto LABEL_225;
  }
LABEL_75:
  if ((v52 & 0xFE) != 0x12)
  {
    sub_1C565ECC8(a1, v2);
    return 0;
  }
  if (v2 && v3 == 90)
  {
    v62 = *(_QWORD *)(v2 - 32);
    if (v62 && *(_BYTE *)(v62 + 16) == 16)
    {
      v63 = *(_QWORD *)(v2 - 96);
      v64 = a1 + 16;
      if (*(unsigned __int8 *)(v63 + 16) > 0x14u)
      {
        v470 = 0;
        v113 = sub_1C4E580F4(*(_QWORD *)(a1 + 112), *(_DWORD *)(a1 + 128), v63, &v470);
        v114 = v470;
        if (!v113)
          v114 = (char *)(*(_QWORD *)(a1 + 112) + 24 * *(unsigned int *)(a1 + 128));
        v115 = (const void *)*((_QWORD *)v114 + 1);
        v116 = sub_1C565E58C(v64, v2, *(_DWORD *)(v34 + 32));
        memcpy((void *)*v116, v115, 8 * v116[1]);
      }
      else
      {
        v65 = sub_1C565E58C(a1 + 16, v2, *(_DWORD *)(v34 + 32));
        if (*(_DWORD *)(v34 + 32))
        {
          v66 = v65;
          v67 = 0;
          do
          {
            *(_QWORD *)(*v66 + 8 * v67) = sub_1C565EF38(a1, *(llvm::ConstantDataSequential **)(v2 - 96), (const llvm::APInt *)v67);
            ++v67;
          }
          while (v67 < *(unsigned int *)(v34 + 32));
        }
      }
      v117 = v2;
      v118 = *(_QWORD *)(v2 - 64);
      v119 = sub_1C565E58C(v64, v117, *(_DWORD *)(*(_QWORD *)v117 + 32));
      v120 = (_QWORD *)(v62 + 24);
      if (*(_DWORD *)(v62 + 32) >= 0x41u)
        v120 = (_QWORD *)*v120;
      *(_QWORD *)(*v119 + 8 * *v120) = v118;
      return 1;
    }
    v90 = *(unsigned int *)(v34 + 32);
    if (*(_BYTE *)(*(_QWORD *)(v2 - 96) + 16) == 15)
      v91 = *(llvm::ConstantDataSequential **)(v2 - 96);
    else
      v91 = 0;
    sub_1C4773D54((uint64_t)&v470, v2, 0, 0, 0);
    if ((_DWORD)v90)
    {
      v92 = 0;
      v93 = *(llvm::ConstantInt ***)(v2 - 32);
      v94 = a1 + 16;
      do
      {
        if (v91)
        {
          ElementAsConstant = llvm::ConstantDataSequential::getElementAsConstant(v91);
          *(_QWORD *)(*sub_1C565E58C(v94, (uint64_t)v91, *(_DWORD *)(*(_QWORD *)v91 + 32)) + 8 * v92) = ElementAsConstant;
        }
        v96 = llvm::ConstantInt::get(*v93, v92, 0);
        LOWORD(v462) = 257;
        v97 = sub_1C4774B48((uint64_t)&v470, 32, (uint64_t)v93, (uint64_t)v96, (uint64_t)&v459);
        v98 = *(uint64_t **)(v2 - 64);
        v99 = sub_1C565EF38(a1, *(llvm::ConstantDataSequential **)(v2 - 96), (const llvm::APInt *)v92);
        LOWORD(v462) = 257;
        v100 = llvm::IRBuilderBase::CreateSelect((uint64_t *)&v470, v97, v98, (uint64_t)v99, (uint64_t)&v459, 0);
        *(_QWORD *)(*sub_1C565E58C(v94, v2, v90) + 8 * v92++) = v100;
      }
      while (v90 != v92);
    }
    v86 = v470;
LABEL_558:
    if (v86 == (char *)v472)
      return 1;
    goto LABEL_105;
  }
  if (v2 && v3 == 91)
  {
    v470 = (char *)v472;
    v68 = *(const void **)(v2 + 64);
    v69 = *(unsigned int *)(v2 + 72);
    v471 = 0x400000000;
    if (v69 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v470, (uint64_t)v472, v69, 4);
      v70 = v471;
      v71 = v470;
    }
    else
    {
      if (!(_DWORD)v69)
      {
        v72 = 0;
LABEL_93:
        LODWORD(v471) = v72 + v69;
        v73 = (llvm::ConstantDataSequential **)(v2 - 64);
        v74 = **(_QWORD **)(v2 - 64);
        v75 = *(_DWORD *)(v74 + 8);
        v76 = sub_1C565E58C(a1 + 16, v2, v72 + (int)v69);
        if ((_DWORD)v471)
        {
          v78 = v76;
          v79 = v2;
          v80 = 0;
          if ((v75 & 0xFE) != 0x12)
            v74 = 0;
          v81 = (llvm::ConstantDataSequential **)(v79 - 32);
          do
          {
            v82 = *(_DWORD *)&v470[4 * v80];
            if (v82 < 0)
            {
              v85 = llvm::UndefValue::get(*(llvm::UndefValue **)(v74 + 24), v77);
            }
            else
            {
              v83 = *(_DWORD *)(v74 + 32);
              if (v82 >= v83)
              {
                v84 = v81;
              }
              else
              {
                v83 = 0;
                v84 = v73;
              }
              v85 = sub_1C565EF38(a1, *v84, (const llvm::APInt *)(v82 - v83));
            }
            *(_QWORD *)(*v78 + 8 * v80++) = v85;
          }
          while (v80 < v471);
        }
        v86 = v470;
        if (v470 == (char *)v472)
          return 1;
LABEL_105:
        free(v86);
        return 1;
      }
      v70 = 0;
      v71 = (char *)v472;
    }
    memcpy(&v71[4 * v70], v68, 4 * v69);
    v72 = v471;
    goto LABEL_93;
  }
  if (!v2 || v3 != 83)
  {
    if (v3 != 84)
      goto LABEL_540;
    v109 = v2 - 32;
    v108 = *(_QWORD *)(v2 - 32);
    if (!v108)
      goto LABEL_546;
    if (*(_BYTE *)(v108 + 16) || *(_QWORD *)(v108 + 24) != *(_QWORD *)(v2 + 72) || (*(_BYTE *)(v108 + 33) & 0x20) == 0)
      goto LABEL_543;
    v110 = *(_DWORD *)(v108 + 36);
    if (v110 <= 1899)
    {
      if (v110 <= 237)
      {
        if ((v110 - 13) > 0x3F || ((1 << (v110 - 13)) & 0xC00003C000000003) == 0)
        {
          if ((v110 - 139) > 0x26)
          {
            v2 = (uint64_t)a2;
            goto LABEL_543;
          }
          v2 = (uint64_t)a2;
          if (((1 << (v110 + 117)) & 0x700000001BLL) == 0)
            goto LABEL_543;
        }
      }
      else
      {
        if (v110 > 1843)
        {
          if (v110 > 1889)
          {
            if (v110 > 1895)
            {
              v2 = (uint64_t)a2;
              if (v110 != 1896 && v110 != 1898)
                goto LABEL_543;
              goto LABEL_462;
            }
            v2 = (uint64_t)a2;
            if (v110 != 1890 && v110 != 1892)
              goto LABEL_543;
          }
          else
          {
            if ((v110 - 1844) < 3)
            {
              v111 = 0;
              v110 = 1843;
              v112 = 1;
              goto LABEL_467;
            }
            v2 = (uint64_t)a2;
            if (v110 != 1888)
              goto LABEL_543;
          }
          v111 = 0;
          v112 = 0;
          v110 = 1886;
          goto LABEL_471;
        }
        if ((v110 - 238) > 0x3A || ((1 << (v110 + 18)) & 0x400040800A08003) == 0)
        {
          if ((v110 - 1840) < 3)
          {
            v111 = 0;
            v110 = 1839;
            v112 = 1;
            goto LABEL_471;
          }
          goto LABEL_543;
        }
      }
    }
    else
    {
      if (v110 <= 2455)
      {
        if (v110 <= 1907)
        {
          if (v110 != 1900)
          {
            if (v110 == 1904 || v110 == 1906)
              goto LABEL_137;
            goto LABEL_543;
          }
LABEL_462:
          v111 = 0;
          v112 = 0;
          v110 = 1894;
          goto LABEL_471;
        }
        v315 = v110 + 119;
        if ((v110 - 1929) > 0x14)
          goto LABEL_456;
        if (((1 << v315) & 0x15) != 0)
        {
          v111 = 0;
          v112 = 0;
          v110 = 1927;
          goto LABEL_467;
        }
        if (((1 << v315) & 0x1500) != 0)
        {
          v111 = 0;
          v112 = 0;
          v110 = 1935;
          goto LABEL_467;
        }
        if (((1 << v315) & 0x150000) != 0)
        {
          v111 = 0;
          v112 = 0;
          v110 = 1943;
        }
        else
        {
LABEL_456:
          if ((v110 - 2117) > 0xC)
            goto LABEL_654;
          v316 = 1 << (v110 - 69);
          if ((v316 & 0x15) != 0)
          {
            v111 = 0;
            v112 = 0;
            v110 = 2115;
            goto LABEL_467;
          }
          if ((v316 & 0x1500) == 0)
          {
LABEL_654:
            v2 = (uint64_t)a2;
            if (v110 == 1908)
            {
LABEL_137:
              v111 = 0;
              v112 = 0;
              v110 = 1902;
LABEL_471:
              sub_1C4773D54((uint64_t)&v470, v2, 0, 0, 0);
              if ((*(_DWORD *)(*(_QWORD *)v2 + 8) & 0xFE) == 0x12)
                v317 = *(_QWORD *)v2;
              else
                v317 = 0;
              if (v111)
              {
                v318 = (const llvm::APInt *)*(unsigned int *)(v317 + 32);
                v458 = *(llvm::ValueAsMetadata **)(v317 + 24);
                Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 56) + 40), v110, (uint64_t *)&v458, 1);
                v320 = sub_1C565E58C(a1 + 16, v2, v318);
                if ((_DWORD)v318)
                {
                  v321 = v320;
                  v322 = 0;
                  v438 = v2 - 8;
                  do
                  {
                    v323 = 0;
                    v324 = 0;
                    v459 = v461;
                    v460 = 0x400000000;
                    for (n = v2; ; n += 32)
                    {
                      v326 = *(unsigned __int8 *)(v2 + 16);
                      if (v326 == 84)
                      {
                        v327 = 0;
                      }
                      else if (v326 == 39)
                      {
                        v2 = (uint64_t)a2;
                        v327 = (*((_DWORD *)a2 + 20) + 1);
                      }
                      else
                      {
                        v327 = 2;
                        v2 = (uint64_t)a2;
                      }
                      v328 = *(_DWORD *)(v2 + 20);
                      if (v328 < 0 && (v333 = v328 & 0x7FFFFFF, (*(_QWORD *)(v438 - 32 * v333) & 0xFFFFFFFF0) != 0))
                      {
                        v330 = -v333;
                        v329 = *(_DWORD *)(v2 - 32 * v333 - 12)
                             - *(_DWORD *)(v2 - 32 * v333 - *(_QWORD *)(v2 - 32 * v333 - 8));
                      }
                      else
                      {
                        v329 = 0;
                        v330 = -(uint64_t)(v328 & 0x7FFFFFF);
                      }
                      if (v324 >= ((v109
                                                 - 32 * v327
                                                 + 32 * (unint64_t)-v329
                                                 - (v2
                                                  + 32 * v330)) >> 5))
                        break;
                      v331 = sub_1C565EF38(a1, *(llvm::ConstantDataSequential **)(n + 32 * v330), v322);
                      v332 = v460;
                      if (v460 >= (unint64_t)HIDWORD(v460))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v459, (uint64_t)v461, v460 + 1, 8);
                        v332 = v460;
                      }
                      *((_QWORD *)v459 + v332) = v331;
                      v323 = v460 + 1;
                      LODWORD(v460) = v460 + 1;
                      ++v324;
                    }
                    if (Declaration)
                      v334 = *(uint64_t ***)(Declaration + 24);
                    else
                      v334 = 0;
                    v457 = 257;
                    v335 = sub_1C4774778((uint64_t *)&v470, v334, Declaration, (uint64_t *)v459, v323, (uint64_t)&v455, 0);
                    if (sub_1C4774A9C(v2))
                      *(_BYTE *)(v335 + 17) = *(_BYTE *)(v2 + 17) & 0xFE | *(_BYTE *)(v335 + 17) & 1;
                    *(_QWORD *)(*v321 + 8 * (_QWORD)v322) = v335;
                    if (v459 != v461)
                      free(v459);
                    v322 = (const llvm::APInt *)((char *)v322 + 1);
                  }
                  while (v322 != v318);
                }
                goto LABEL_536;
              }
              v336 = *(_QWORD *)(v2 + 8);
              v439 = v317;
              if (!v336
                || *(_QWORD *)(v336 + 8)
                || (v337 = *(_QWORD *)(v336 + 24), *(_BYTE *)(v337 + 16) != 84)
                || (v338 = *(_QWORD *)(v337 - 32)) == 0
                || *(_BYTE *)(v338 + 16)
                || *(_QWORD *)(v338 + 24) != *(_QWORD *)(v337 + 72)
                || (*(_BYTE *)(v338 + 33) & 0x20) == 0
                || (v357 = 0, v423 = *(_DWORD *)(v338 + 36), (v423 - 1282) >= 0x190)
                && (v423 - 2824) >= 0xC)
              {
                v339 = a2;
                v435 = (llvm::MDNode *)*((_QWORD *)a2 + 4 * v112 + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
                llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(_QWORD *)v475 + 1672), (llvm::Type *)4);
                v432 = v340;
                v341 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40), v110, 0, 0);
                v342 = sub_1C565E58C(a1 + 16, (uint64_t)a2, *(_DWORD *)(v317 + 32));
                if (!*(_DWORD *)(v317 + 32))
                  goto LABEL_536;
                v343 = v342;
                v344 = 0;
                while (1)
                {
                  LOWORD(v462) = 257;
                  v345 = sub_1C4772C18((uint64_t *)&v470, v432, v435, v344, (uint64_t)&v459);
                  v346 = 0;
                  v347 = 0;
                  v459 = v461;
                  v460 = 0x400000000;
                  for (ii = v339; ; ii = (llvm::ValueAsMetadata *)((char *)ii + 32))
                  {
                    v349 = *((unsigned __int8 *)v339 + 16);
                    if (v349 == 84)
                    {
                      v350 = 0;
                    }
                    else if (v349 == 39)
                    {
                      v339 = a2;
                      v350 = (*((_DWORD *)a2 + 20) + 1);
                    }
                    else
                    {
                      v350 = 2;
                      v339 = a2;
                    }
                    v351 = *((_DWORD *)v339 + 5);
                    if (v351 < 0 && (v355 = v351 & 0x7FFFFFF, (*((_QWORD *)a2 - 4 * v355 - 1) & 0xFFFFFFFF0) != 0))
                    {
                      v353 = -v355;
                      v352 = *((_DWORD *)v339 - 8 * v355 - 3)
                           - *(_DWORD *)((char *)v339 - *((_QWORD *)v339 - 4 * v355 - 1) + -32 * v355);
                    }
                    else
                    {
                      v352 = 0;
                      v353 = -(uint64_t)(v351 & 0x7FFFFFF);
                    }
                    if (v347 >= ((v109
                                               - 32 * v350
                                               + 32 * (unint64_t)-v352
                                               - ((unint64_t)v339
                                                + 32 * v353)) >> 5))
                      break;
                    if (v112)
                    {
                      if (v347 == 1)
                        goto LABEL_517;
                    }
                    else if (!v347)
                    {
LABEL_517:
                      if (v346 >= HIDWORD(v460))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v459, (uint64_t)v461, v346 + 1, 8);
                        v346 = v460;
                      }
                      *((_QWORD *)v459 + v346) = v345;
                      goto LABEL_524;
                    }
                    v354 = *((_QWORD *)ii + 4 * v353);
                    if (v346 >= HIDWORD(v460))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v459, (uint64_t)v461, v346 + 1, 8);
                      v346 = v460;
                    }
                    *((_QWORD *)v459 + v346) = v354;
                    v339 = a2;
LABEL_524:
                    v346 = v460 + 1;
                    LODWORD(v460) = v460 + 1;
                    ++v347;
                  }
                  if (v341)
                    v356 = *(uint64_t ***)(v341 + 24);
                  else
                    v356 = 0;
                  v457 = 257;
                  *(_QWORD *)(*v343 + 8 * v344) = sub_1C4774778((uint64_t *)&v470, v356, v341, (uint64_t *)v459, v346, (uint64_t)&v455, 0);
                  if (v459 != v461)
                    free(v459);
                  if (++v344 >= (unint64_t)*(unsigned int *)(v439 + 32))
                  {
LABEL_536:
                    v357 = 1;
                    break;
                  }
                }
              }
              if (v470 == (char *)v472)
              {
                if ((v357 & 1) != 0)
                  return 1;
              }
              else
              {
                free(v470);
                if ((v357 & 1) != 0)
                  return 1;
              }
              v2 = (uint64_t)a2;
              v3 = *((unsigned __int8 *)a2 + 16);
LABEL_540:
              if (v3 == 60)
                goto LABEL_551;
              if (v3 != 84)
                goto LABEL_547;
              v108 = *(_QWORD *)(v2 - 32);
              if (v108)
                goto LABEL_543;
LABEL_546:
              v3 = 84;
LABEL_547:
              if ((v3 - 29) < 0xB
                || v3 == 84
                || (v3 - 28) > 0x39
                || (v3 - 59) <= 6)
              {
                goto LABEL_551;
              }
              if ((v3 - 79) > 0xFFFFFFF2)
              {
                v413 = **(_QWORD **)(v2 - 32);
                if (!v413)
                  goto LABEL_551;
                if ((*(_DWORD *)(v413 + 8) & 0xFE) != 0x12)
                  goto LABEL_551;
                v414 = *(_DWORD *)(v413 + 32);
                v363 = *(_QWORD *)v2;
                v415 = *(_DWORD *)(*(_QWORD *)v2 + 32);
                if (v414 > v415 || v415 % v414)
                  goto LABEL_551;
              }
              else
              {
                v363 = *(_QWORD *)v2;
              }
              if (*(_BYTE *)(v363 + 8) == 18)
                v364 = v363;
              else
                v364 = 0;
              if (v3 == 77)
              {
                v365 = **((_QWORD **)a2 - 4);
                if (v365)
                {
                  if ((*(_DWORD *)(v365 + 8) & 0xFE) == 0x12)
                  {
                    v366 = *(_DWORD *)(v365 + 32);
                    if (v366 != *(_DWORD *)(v364 + 32))
                    {
                      v416 = *(_DWORD *)(v363 + 32) / v366;
                      llvm::FixedVectorType::get(*(llvm::FixedVectorType **)(v363 + 24), (llvm::Type *)v416);
                      v418 = v417;
                      sub_1C4773D54((uint64_t)&v470, (uint64_t)a2, 0, 0, 0);
                      v419 = sub_1C565E58C(a1 + 16, (uint64_t)a2, v416 * v366);
                      v420 = 0;
                      do
                      {
                        v421 = (unsigned __int8 *)sub_1C565EF38(a1, *((llvm::ConstantDataSequential **)a2 - 4), v420);
                        LOWORD(v462) = 257;
                        v422 = sub_1C4773E38((uint64_t *)&v470, 49, v421, v418, (uint64_t)&v459);
                        sub_1C565B81C(v422, (uint64_t)&v470, (const llvm::APInt *)v419, (_DWORD)v420 * v416);
                        v420 = (const llvm::APInt *)((_DWORD)v420 + 1);
                      }
                      while (v366 != (_DWORD)v420);
                      v86 = v470;
                      goto LABEL_558;
                    }
                  }
                }
              }
              v367 = (const llvm::APInt *)*(unsigned int *)(v364 + 32);
              v368 = sub_1C565E58C(a1 + 16, (uint64_t)a2, *(_DWORD *)(v364 + 32));
              sub_1C4773D54((uint64_t)&v470, (uint64_t)a2, 0, 0, 0);
              v459 = v461;
              HIDWORD(v460) = 4;
              if (!(_DWORD)v367)
              {
LABEL_647:
                v86 = v470;
                goto LABEL_558;
              }
              v369 = 0;
              v440 = *(_QWORD *)(v364 + 24);
              v370 = (uint64_t)a2;
              while (1)
              {
                LODWORD(v460) = 0;
                v371 = *(_DWORD *)(v370 + 20);
                if ((v371 & 0x40000000) != 0)
                {
                  v373 = *(llvm::UndefValue ***)(v370 - 8);
                  v372 = v371 & 0x7FFFFFF;
                }
                else
                {
                  v372 = v371 & 0x7FFFFFF;
                  v373 = (llvm::UndefValue **)(v370 - 32 * v372);
                }
                v374 = 0;
                if (v372)
                {
                  for (jj = 32 * v372; jj; jj -= 32)
                  {
                    if (*(_BYTE *)(v370 + 16) == 85)
                    {
                      v376 = *(_DWORD *)(v370 + 20);
                      if ((v376 & 0x40000000) != 0)
                        v377 = *(llvm::UndefValue ***)(v370 - 8);
                      else
                        v377 = (llvm::UndefValue **)(v370 - 32 * (v376 & 0x7FFFFFF));
                      v378 = *v373;
                      if (v373 == v377 && (*(_DWORD *)(*(_QWORD *)v378 + 8) & 0xFE) != 0x12)
                        goto LABEL_585;
                    }
                    else
                    {
                      v378 = *v373;
                    }
                    v378 = sub_1C565EF38(a1, v378, v369);
                    v374 = v460;
LABEL_585:
                    if (v374 >= HIDWORD(v460))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v459, (uint64_t)v461, v374 + 1, 8);
                      v374 = v460;
                    }
                    *((_QWORD *)v459 + v374) = v378;
                    v374 = v460 + 1;
                    LODWORD(v460) = v460 + 1;
                    v373 += 4;
                  }
                }
                v379 = *(unsigned __int8 *)(v370 + 16);
                if ((v379 - 83) >= 0xFFFFFFFE)
                  break;
                v380 = v379 - 28;
                v381 = (uint64_t *)v459;
                if ((v379 - 41) <= 0x11)
                {
                  v382 = *(uint64_t **)v459;
                  v383 = *((_QWORD *)v459 + 1);
                  v457 = 257;
                  v384 = (char *)operator new(0x80uLL);
                  *(_QWORD *)v384 = 0;
                  *((_QWORD *)v384 + 2) = 0;
                  *((_QWORD *)v384 + 1) = 0;
                  *((_QWORD *)v384 + 5) = 0;
                  *((_QWORD *)v384 + 6) = 0;
                  *((_QWORD *)v384 + 4) = 0;
                  v385 = v384 + 32;
                  *((_QWORD *)v384 + 8) = *v382;
                  v386 = (unsigned __int8 **)(v384 + 64);
                  *((_QWORD *)v384 + 3) = v384 + 64;
                  *((_QWORD *)v384 + 7) = v384 + 64;
                  *((_QWORD *)v384 + 9) = 0;
                  v384[80] = v380 + 28;
                  v384[81] = 0;
                  *((_WORD *)v384 + 41) = 0;
                  *((_DWORD *)v384 + 21) = 2;
                  *((_DWORD *)v384 + 30) = 0;
                  *(_OWORD *)(v384 + 104) = 0u;
                  *(_OWORD *)(v384 + 88) = 0u;
                  *(_QWORD *)v384 = v382;
                  v389 = v382[1];
                  v388 = v382 + 1;
                  v387 = v389;
                  *((_QWORD *)v384 + 1) = v389;
                  if (v389)
                    *(_QWORD *)(v387 + 16) = v384 + 8;
                  *((_QWORD *)v384 + 2) = v388;
                  *v388 = v384;
                  if (*((_QWORD *)v384 + 4))
                  {
                    **((_QWORD **)v384 + 6) = *((_QWORD *)v384 + 5);
                    v412 = *((_QWORD *)v384 + 5);
                    if (v412)
                      *(_QWORD *)(v412 + 16) = *((_QWORD *)v384 + 6);
                  }
                  *v385 = v383;
                  v370 = (uint64_t)a2;
                  if (v383)
                  {
                    v392 = *(_QWORD *)(v383 + 8);
                    v391 = (_QWORD *)(v383 + 8);
                    v390 = v392;
                    *((_QWORD *)v384 + 5) = v392;
                    if (v392)
                      *(_QWORD *)(v390 + 16) = v384 + 40;
                    *((_QWORD *)v384 + 6) = v391;
                    *v391 = v385;
                  }
                  llvm::Value::setName((uint64_t ***)v384 + 8, (uint64_t)&v455);
                  goto LABEL_601;
                }
                if (v379 == 40)
                {
                  v403 = *(uint64_t **)v459;
                  v457 = 257;
                  v396 = llvm::UnaryOperator::Create(12, v403, (uint64_t)&v455, 0);
                  goto LABEL_600;
                }
                if ((v379 - 66) <= 0xC)
                {
                  v457 = 257;
                  llvm::CastInst::Create(v379 - 28);
                  goto LABEL_600;
                }
                if ((v379 - 81) <= 1)
                {
                  v393 = 42;
                  goto LABEL_599;
                }
                if (v379 == 83)
                {
                  v407 = v374 >> 1;
                  v457 = 257;
                  v408 = (char *)operator new(0x48uLL);
                  *((_QWORD *)v408 + 1) = v440;
                  v386 = (unsigned __int8 **)(v408 + 8);
                  *(_QWORD *)v408 = 0;
                  *((_QWORD *)v408 + 2) = 0;
                  *((_QWORD *)v408 + 3) = 0x4000000000000053;
                  *((_OWORD *)v408 + 2) = 0u;
                  *((_OWORD *)v408 + 3) = 0u;
                  *((_DWORD *)v408 + 16) = 0;
                  *((_DWORD *)v408 + 17) = v407;
                  llvm::Value::setName((uint64_t ***)v408 + 1, (uint64_t)&v455);
                  v409 = *((unsigned int *)v408 + 17);
                  v410 = operator new(40 * v409);
                  *(_QWORD *)v408 = v410;
                  if ((_DWORD)v409)
                  {
                    v411 = &v410[4 * v409];
                    do
                    {
                      *v410 = 0;
                      v410[1] = 0;
                      v410[2] = 0;
                      v410[3] = v386;
                      v410 += 4;
                    }
                    while (v410 != v411);
                  }
                  v370 = (uint64_t)a2;
                  goto LABEL_601;
                }
                if (v379 != 85)
                {
                  v386 = 0;
                  goto LABEL_601;
                }
                v404 = *(_QWORD *)v459;
                v405 = (uint64_t *)*((_QWORD *)v459 + 1);
                v406 = *((_QWORD *)v459 + 2);
                v457 = 257;
                v396 = (uint64_t)sub_1C4FC8748(v404, v405, v406, (uint64_t)&v455, 0, 0);
LABEL_600:
                v386 = (unsigned __int8 **)v396;
LABEL_601:
                if (sub_1C4774A9C(v370))
                  *((_BYTE *)v386 + 17) = *(_BYTE *)(v370 + 17) & 0xFE | *((_BYTE *)v386 + 17) & 1;
                v457 = 257;
                (*(void (**)(uint64_t, unsigned __int8 **, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v477 + 16))(v477, v386, &v455, v473, v474);
                if ((_DWORD)v471)
                {
                  v397 = v470;
                  v398 = &v470[16 * v471];
                  v399 = v386 + 6;
                  do
                  {
                    v400 = *(_DWORD *)v397;
                    v401 = (unsigned __int8 *)*((_QWORD *)v397 + 1);
                    if (v401)
                    {
                      if (!v400)
                      {
                        v458 = (llvm::ValueAsMetadata *)*((_QWORD *)v397 + 1);
                        llvm::MetadataTracking::track((uint64_t)&v458, v401, 2);
LABEL_615:
                        if (&v458 == (llvm::ValueAsMetadata **)v399)
                        {
                          if (v458)
                            llvm::MetadataTracking::untrack((uint64_t)&v458, (unsigned __int8 *)v458);
                        }
                        else
                        {
                          if (*v399)
                            llvm::MetadataTracking::untrack((uint64_t)(v386 + 6), *v399);
                          v402 = (unsigned __int8 *)v458;
                          *v399 = (unsigned __int8 *)v458;
                          if (v402)
                            llvm::MetadataTracking::retrack((uint64_t)&v458, v402, (uint64_t)(v386 + 6));
                        }
                        goto LABEL_612;
                      }
                    }
                    else
                    {
                      if (!*v399 && (*((_BYTE *)v386 + 23) & 0x20) == 0)
                        goto LABEL_612;
                      if (!v400)
                      {
                        v458 = 0;
                        goto LABEL_615;
                      }
                    }
                    llvm::Value::setMetadata((llvm::Value *)v386, v400, (llvm::MDNode *)v401);
LABEL_612:
                    v397 += 16;
                  }
                  while (v397 != v398);
                }
                *(_QWORD *)(*v368 + 8 * (_QWORD)v369) = v386;
                v369 = (const llvm::APInt *)((char *)v369 + 1);
                if (v369 == v367)
                {
                  if (v459 != v461)
                    free(v459);
                  goto LABEL_647;
                }
              }
              v393 = *(_WORD *)(v370 + 18) & 0x3F;
              v380 = v379 - 28;
              v381 = (uint64_t *)v459;
LABEL_599:
              v394 = *v381;
              v395 = v381[1];
              v457 = 257;
              v396 = (uint64_t)llvm::CmpInst::Create(v380, v393, v394, v395, (uint64_t)&v455, 0);
              goto LABEL_600;
            }
LABEL_543:
            if (!*(_BYTE *)(v108 + 16)
              && *(_QWORD *)(v108 + 24) == *(_QWORD *)(v2 + 72)
              && (*(_BYTE *)(v108 + 33) & 0x20) != 0)
            {
LABEL_551:
              sub_1C565ECC8(a1, v2);
              v358 = *(_QWORD *)(v2 + 32);
              if (v358)
                v359 = v358 == *(_QWORD *)(v2 + 40) + 40;
              else
                v359 = 1;
              if (v359)
                v360 = 0;
              else
                v360 = v358 - 24;
              sub_1C4773D54((uint64_t)&v470, v360, 0, 0, 0);
              v361 = sub_1C565E58C(a1 + 16, v2, *(_DWORD *)(*(_QWORD *)v2 + 32));
              sub_1C565B81C((unsigned __int8 *)v2, (uint64_t)&v470, (const llvm::APInt *)v361, 0);
              v86 = v470;
              goto LABEL_558;
            }
            goto LABEL_546;
          }
          v111 = 0;
          v112 = 0;
          v110 = 2123;
        }
LABEL_467:
        v2 = (uint64_t)a2;
        goto LABEL_471;
      }
      v313 = v110 + 104;
      if ((v110 - 2456) > 0x3D)
        goto LABEL_672;
      if (((1 << v313) & 0x15) != 0)
      {
        v111 = 0;
        v112 = 0;
        v110 = 2454;
        goto LABEL_467;
      }
      if (((1 << v313) & 0x1500) != 0)
      {
        v111 = 0;
        v112 = 0;
        v110 = 2462;
        goto LABEL_467;
      }
      v2 = (uint64_t)a2;
      if (((1 << v313) & 0x2000000080000000) == 0)
      {
LABEL_672:
        v314 = v110 + 34;
        if ((v110 - 2526) > 0x10)
          goto LABEL_469;
        if (((1 << v314) & 0x150) != 0)
        {
          v111 = 0;
          v112 = 0;
          v110 = 2528;
          goto LABEL_467;
        }
        if (((1 << v314) & 0x15000) != 0)
        {
          v111 = 0;
          v112 = 0;
          v110 = 2536;
          goto LABEL_467;
        }
        v2 = (uint64_t)a2;
        if (v110 != 2526)
        {
LABEL_469:
          if (v110 != 2628)
            goto LABEL_543;
        }
      }
    }
    v112 = 0;
    v111 = 1;
    goto LABEL_471;
  }
  v87 = *(_DWORD *)(v2 + 20);
  if ((v87 & 0x40000000) != 0)
  {
    v89 = *(uint64_t **)(v2 - 8);
    v88 = v87 & 0x7FFFFFF;
  }
  else
  {
    v88 = v87 & 0x7FFFFFF;
    v89 = (uint64_t *)(v2 - 32 * v88);
  }
  if (v88)
  {
    v223 = 32 * v88;
    while (*(unsigned __int8 *)(*v89 + 16) < 0x15u
         || (sub_1C4E580F4(*(_QWORD *)(a1 + 112), *(_DWORD *)(a1 + 128), *v89, &v470) & 1) != 0)
    {
      v89 += 4;
      v223 -= 32;
      if (!v223)
        goto LABEL_295;
    }
    v291 = *(unsigned int *)(a1 + 144);
    if (v291 >= *(_DWORD *)(a1 + 148))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 136, a1 + 152, v291 + 1, 8);
      LODWORD(v291) = *(_DWORD *)(a1 + 144);
    }
    v224 = 0;
    v225 = (uint64_t)a2;
    *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v291) = a2;
    ++*(_DWORD *)(a1 + 144);
  }
  else
  {
LABEL_295:
    v224 = 1;
    v225 = (uint64_t)a2;
  }
  if ((*(_DWORD *)(*(_QWORD *)v225 + 8) & 0xFE) == 0x12)
    v292 = *(_QWORD *)v225;
  else
    v292 = 0;
  v293 = sub_1C565E58C(a1 + 16, v225, *(_DWORD *)(v292 + 32));
  if (!*(_DWORD *)(v292 + 32))
    return 1;
  v294 = v293;
  v295 = 0;
  v296 = (uint64_t *)(v225 + 24);
  do
  {
    v297 = *(_QWORD *)(v292 + 24);
    v298 = *(_DWORD *)(v225 + 20);
    v472[8] = 257;
    v299 = operator new(0x48uLL);
    v299[1] = v297;
    v300 = (llvm::Value *)(v299 + 1);
    *v299 = 0;
    v299[2] = 0;
    v299[3] = 0x4000000000000053;
    *((_OWORD *)v299 + 2) = 0u;
    v301 = (char *)(v299 + 4);
    *((_OWORD *)v299 + 3) = 0u;
    *((_DWORD *)v299 + 16) = 0;
    v302 = *(_QWORD *)(v225 + 40);
    v299[6] = v302;
    *(_WORD *)(v302 + 18) &= ~0x8000u;
    if ((*((_BYTE *)v299 + 31) & 0x10) != 0)
    {
      v307 = *(_QWORD *)(v302 + 56);
      if (v307)
      {
        v308 = *(llvm::ValueSymbolTable **)(v307 + 104);
        if (v308)
          llvm::ValueSymbolTable::reinsertValue(v308, v300);
      }
    }
    v303 = *v296;
    v299[4] = *v296;
    v299[5] = v296;
    *(_QWORD *)(v303 + 8) = v301;
    *v296 = (uint64_t)v301;
    *((_DWORD *)v299 + 17) = v298 & 0x7FFFFFF;
    llvm::Value::setName((uint64_t ***)v300, (uint64_t)&v470);
    v304 = *((unsigned int *)v299 + 17);
    v305 = operator new(40 * v304);
    *v299 = v305;
    if ((_DWORD)v304)
    {
      v306 = &v305[4 * v304];
      do
      {
        *v305 = 0;
        v305[1] = 0;
        v305[2] = 0;
        v305[3] = v300;
        v305 += 4;
      }
      while (v305 != v306);
    }
    v225 = (uint64_t)a2;
    if (v224)
      sub_1C565E7B4(a1, v300, (uint64_t)a2, (const llvm::APInt *)v295);
    *(_QWORD *)(*v294 + 8 * v295++) = v300;
    v23 = 1;
  }
  while (v295 < *(unsigned int *)(v292 + 32));
  return v23;
}

uint64_t *sub_1C565E58C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  uint64_t *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;

  v27 = 0;
  v6 = sub_1C4E580F4(*(_QWORD *)(a1 + 96), *(_DWORD *)(a1 + 112), a2, &v27);
  v7 = v27;
  if (v6)
    return v27 + 1;
  v28 = v27;
  v9 = *(_DWORD *)(a1 + 104);
  v10 = *(unsigned int *)(a1 + 112);
  if (4 * v9 + 4 >= (3 * v10))
  {
    v11 = 2 * v10;
    goto LABEL_10;
  }
  v11 = *(_DWORD *)(a1 + 112);
  if ((int)v10 + ~v9 - *(_DWORD *)(a1 + 108) <= v10 >> 3)
  {
LABEL_10:
    v13 = *(_QWORD *)(a1 + 96);
    v14 = (v11 - 1) | ((unint64_t)(v11 - 1) >> 1);
    v15 = v14 | (v14 >> 2) | ((v14 | (v14 >> 2)) >> 4);
    v16 = ((v15 | (v15 >> 8)) >> 16) | v15 | (v15 >> 8);
    if ((v16 + 1) > 0x40)
      v17 = v16 + 1;
    else
      v17 = 64;
    *(_DWORD *)(a1 + 112) = v17;
    v18 = operator new(24 * v17, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 96) = v18;
    if (v13)
    {
      *(_QWORD *)(a1 + 104) = 0;
      v19 = *(unsigned int *)(a1 + 112);
      if ((_DWORD)v19)
      {
        v20 = 24 * v19;
        do
        {
          *v18 = -4096;
          v18 += 3;
          v20 -= 24;
        }
        while (v20);
      }
      if ((_DWORD)v10)
      {
        v21 = (_OWORD *)(v13 + 8);
        v22 = 24 * v10;
        do
        {
          v23 = *((_QWORD *)v21 - 1);
          if ((v23 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v29 = 0;
            sub_1C4E580F4(*(_QWORD *)(a1 + 96), *(_DWORD *)(a1 + 112), v23, &v29);
            v24 = v29;
            *v29 = v23;
            *(_OWORD *)(v24 + 1) = *v21;
            ++*(_DWORD *)(a1 + 104);
          }
          v21 = (_OWORD *)((char *)v21 + 24);
          v22 -= 24;
        }
        while (v22);
      }
      MEMORY[0x1CAA32FB4](v13, 8);
      v18 = *(_QWORD **)(a1 + 96);
      LODWORD(v25) = *(_DWORD *)(a1 + 112);
    }
    else
    {
      *(_QWORD *)(a1 + 104) = 0;
      v25 = *(unsigned int *)(a1 + 112);
      if ((_DWORD)v25)
      {
        v26 = 0;
        do
        {
          v18[v26] = -4096;
          v26 += 3;
        }
        while (3 * v25 != v26);
      }
    }
    sub_1C4E580F4((uint64_t)v18, v25, a2, &v28);
    v9 = *(_DWORD *)(a1 + 104);
    v7 = v28;
  }
  *(_DWORD *)(a1 + 104) = v9 + 1;
  if (*v7 != -4096)
    --*(_DWORD *)(a1 + 108);
  *v7 = a2;
  v7[1] = 0;
  v8 = v7 + 1;
  v7[2] = 0;
  v7[1] = sub_1C484358C(a1, 8 * a3, 3);
  v7[2] = a3;
  return v8;
}

uint64_t sub_1C565E7B4(uint64_t result, llvm::PHINode *a2, uint64_t a3, const llvm::APInt *a4)
{
  int v4;
  unint64_t v5;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  llvm::UndefValue *v13;
  int v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a3 + 20);
  v5 = v4 & 0x7FFFFFF;
  if ((v4 & 0x7FFFFFF) != 0)
  {
    v9 = result;
    v10 = 0;
    v11 = 0;
    do
    {
      if ((v4 & 0x40000000) != 0)
        v12 = *(_QWORD *)(a3 - 8);
      else
        v12 = a3 - 32 * v5;
      v13 = sub_1C565EF38(v9, *(llvm::ConstantDataSequential **)(v12 + v10), a4);
      v14 = *(_DWORD *)(a3 + 20);
      if ((v14 & 0x40000000) != 0)
        v15 = *(_QWORD *)(a3 - 8);
      else
        v15 = a3 - 32 * (v14 & 0x7FFFFFF);
      result = sub_1C477667C(a2, (uint64_t)v13, *(_QWORD *)(v15 + 32 * *(unsigned int *)(a3 + 60) + 8 * v11++));
      v4 = *(_DWORD *)(a3 + 20);
      v5 = v4 & 0x7FFFFFF;
      v10 += 32;
    }
    while (v11 < v5);
  }
  return result;
}

uint64_t sub_1C565E868(llvm *this, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Type *a5, llvm::DSOLocalEquivalent **a6)
{
  int v9;
  unint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  llvm::UndefValue *v19;
  uint64_t v20;
  llvm *v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  llvm **v26;
  llvm *v27;
  llvm **v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  llvm **v32;
  _QWORD *v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  _QWORD *v53;
  void *v54;
  _QWORD *v55;
  int v56;
  BOOL v57;
  unsigned int v58;
  _QWORD *v59;
  _QWORD *v60;
  void *v61;
  unint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int16 v66;
  void *v67;
  uint64_t v68;
  _QWORD v69[9];

  v69[8] = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 1) && llvm::wouldInstructionBeTriviallyDead((uint64_t)this, 0))
  {
    v39 = *((_DWORD *)this + 5);
    v40 = v39 & 0x7FFFFFF;
    if ((v39 & 0x7FFFFFF) != 0)
    {
      v41 = 0;
      while (1)
      {
        v42 = *((_DWORD *)this + 5);
        if ((v42 & 0x40000000) != 0)
          v43 = (char *)*((_QWORD *)this - 1);
        else
          v43 = (char *)this - 32 * (v42 & 0x7FFFFFF);
        v44 = &v43[32 * v41];
        v45 = *(_QWORD *)v44;
        if (*(_QWORD *)v44)
        {
          **((_QWORD **)v44 + 2) = *((_QWORD *)v44 + 1);
          v46 = *((_QWORD *)v44 + 1);
          if (v46)
            *(_QWORD *)(v46 + 16) = *((_QWORD *)v44 + 2);
        }
        *(_QWORD *)v44 = 0;
        if ((llvm *)v45 == this || *(_QWORD *)(v45 + 8) != 0)
          goto LABEL_59;
        v48 = *(unsigned __int8 *)(v45 + 16) <= 0x1Bu ? 0 : (_QWORD *)v45;
        v67 = v48;
        if (!v48 || v48[1] || !llvm::wouldInstructionBeTriviallyDead((uint64_t)v48, 0))
          goto LABEL_59;
        if ((*(_BYTE *)a2 & 1) != 0)
        {
          v49 = 16;
          v50 = a2 + 8;
        }
        else
        {
          v49 = *(_DWORD *)(a2 + 16);
          if (!v49)
          {
            v59 = 0;
LABEL_78:
            v60 = sub_1C4E08FFC(a2, (uint64_t)&v67, &v67, v59);
            *v60 = v67;
            v61 = v67;
            v62 = *(unsigned int *)(a2 + 144);
            if (v62 >= *(unsigned int *)(a2 + 148))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 136, a2 + 152, v62 + 1, 8);
              v62 = *(unsigned int *)(a2 + 144);
            }
            *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * v62) = v61;
            ++*(_DWORD *)(a2 + 144);
            goto LABEL_59;
          }
          v50 = *(_QWORD *)(a2 + 8);
        }
        v51 = v49 - 1;
        v52 = ((v67 >> 4) ^ (v67 >> 9)) & v51;
        v53 = (_QWORD *)(v50 + 8 * v52);
        v54 = (void *)*v53;
        if (v67 != (void *)*v53)
        {
          v55 = 0;
          v56 = 1;
          while (v54 != (void *)-4096)
          {
            if (v55)
              v57 = 0;
            else
              v57 = v54 == (void *)-8192;
            if (v57)
              v55 = v53;
            v58 = v52 + v56++;
            v52 = v58 & v51;
            v53 = (_QWORD *)(v50 + 8 * v52);
            v54 = (void *)*v53;
            if (v67 == (void *)*v53)
              goto LABEL_59;
          }
          if (v55)
            v59 = v55;
          else
            v59 = v53;
          goto LABEL_78;
        }
LABEL_59:
        if (++v41 == v40)
          goto LABEL_39;
      }
    }
    goto LABEL_39;
  }
  v63 = a3;
  v64 = 0u;
  v65 = 0u;
  v66 = 257;
  v9 = *((_DWORD *)this + 5);
  if ((v9 & 0x40000000) != 0)
  {
    v11 = (uint64_t *)*((_QWORD *)this - 1);
    v10 = v9 & 0x7FFFFFF;
  }
  else
  {
    v10 = v9 & 0x7FFFFFF;
    v11 = (uint64_t *)((char *)this - 32 * v10);
  }
  v67 = v69;
  v68 = 0x800000000;
  if (v10 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, (uint64_t)v69, v10, 8);
    v12 = v68;
    v14 = v67;
    v13 = v68;
  }
  else
  {
    v12 = 0;
    if (!v10)
    {
      v18 = v69;
      goto LABEL_11;
    }
    v13 = 0;
    v14 = v69;
  }
  v15 = 32 * v10;
  v16 = &v14[v13];
  do
  {
    v17 = *v11;
    v11 += 4;
    *v16++ = v17;
    v15 -= 32;
  }
  while (v15);
  v18 = v67;
LABEL_11:
  LODWORD(v68) = v12 + v10;
  v19 = llvm::SimplifyInstructionWithOperands(this, (uint64_t)v18, (v12 + v10), (uint64_t)&v63, a5, a6);
  if (v67 == v69)
  {
    if (v19)
      goto LABEL_13;
  }
  else
  {
    free(v67);
    if (v19)
    {
LABEL_13:
      v20 = *((_QWORD *)this + 1);
      if (!v20)
      {
LABEL_38:
        llvm::Value::doRAUW(this, v19, (llvm::Value *)1);
LABEL_39:
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)this + 5) + 40, (uint64_t ***)this);
        v36 = *((_QWORD *)this + 3);
        v37 = (_QWORD *)*((_QWORD *)this + 4);
        *v37 = v36;
        *(_QWORD *)(v36 + 8) = v37;
        *((_QWORD *)this + 3) = 0;
        *((_QWORD *)this + 4) = 0;
        llvm::Value::deleteValue(this);
        return 1;
      }
      while (1)
      {
        v21 = *(llvm **)(v20 + 24);
        if (v21 != this)
        {
          v67 = *(void **)(v20 + 24);
          if ((*(_BYTE *)a2 & 1) != 0)
          {
            v22 = 16;
            v23 = a2 + 8;
          }
          else
          {
            v22 = *(_DWORD *)(a2 + 16);
            if (!v22)
            {
              v32 = 0;
LABEL_31:
              v33 = sub_1C4E08FFC(a2, (uint64_t)&v67, &v67, v32);
              *v33 = v67;
              v34 = v67;
              v35 = *(unsigned int *)(a2 + 144);
              if (v35 >= *(unsigned int *)(a2 + 148))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 136, a2 + 152, v35 + 1, 8);
                v35 = *(unsigned int *)(a2 + 144);
              }
              *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * v35) = v34;
              ++*(_DWORD *)(a2 + 144);
              goto LABEL_34;
            }
            v23 = *(_QWORD *)(a2 + 8);
          }
          v24 = v22 - 1;
          v25 = v24 & ((v21 >> 4) ^ (v21 >> 9));
          v26 = (llvm **)(v23 + 8 * v25);
          v27 = *v26;
          if (v21 != *v26)
          {
            v28 = 0;
            v29 = 1;
            while (v27 != (llvm *)-4096)
            {
              if (v28)
                v30 = 0;
              else
                v30 = v27 == (llvm *)-8192;
              if (v30)
                v28 = v26;
              v31 = v25 + v29++;
              v25 = v31 & v24;
              v26 = (llvm **)(v23 + 8 * v25);
              v27 = *v26;
              if (v21 == *v26)
                goto LABEL_34;
            }
            if (v28)
              v32 = v28;
            else
              v32 = v26;
            goto LABEL_31;
          }
        }
LABEL_34:
        v20 = *(_QWORD *)(v20 + 8);
        if (!v20)
          goto LABEL_38;
      }
    }
  }
  return 0;
}

void sub_1C565ECC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  llvm::Type *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  llvm::ConstantDataSequential *v9;
  uint64_t v10;
  BOOL v11;
  _QWORD *v12;
  unint64_t v13;
  const llvm::APInt *v14;
  llvm::UndefValue *v15;
  llvm::ConstantInt *v16;
  unsigned int v17;
  unint64_t v18;
  llvm::ValueHandleBase *v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  __int16 v31;
  void *v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = a2;
  v35 = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)v32, a2, 0, 0, 0);
  v5 = *(_DWORD *)(v2 + 20);
  v6 = v5 & 0x7FFFFFF;
  if ((v5 & 0x7FFFFFF) != 0)
  {
    v7 = 0;
    v28 = v2;
    do
    {
      if ((v5 & 0x40000000) != 0)
        v8 = *(_QWORD *)(v2 - 8);
      else
        v8 = v2 - 32 * v6;
      v9 = *(llvm::ConstantDataSequential **)(v8 + 32 * v7);
      v10 = *(_QWORD *)v9;
      if (*(_QWORD *)v9)
        v11 = (*(_DWORD *)(*(_QWORD *)v9 + 8) & 0xFE) == 18;
      else
        v11 = 0;
      if (v11 && *((unsigned __int8 *)v9 + 16) >= 0x15u)
      {
        v12 = llvm::UndefValue::get(*(llvm::UndefValue **)v9, v4);
        if (*(_DWORD *)(v10 + 32))
        {
          v13 = 0;
          do
          {
            v15 = sub_1C565EF38(a1, v9, (const llvm::APInt *)v13);
            v16 = *(llvm::ConstantInt **)(*(_QWORD *)v34 + 1960);
            v17 = *(_DWORD *)(*(_QWORD *)v34 + 1968);
            v30 = v17 >> 8;
            if (v17 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v29, v13, 0);
            }
            else
            {
              if (v17 <= 0xFF)
                v18 = 0;
              else
                v18 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v17);
              v29 = v18 & v13;
            }
            v19 = llvm::ConstantInt::get(v16, (llvm::LLVMContext *)&v29, v14);
            if (v30 >= 0x41 && v29)
              MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
            v31 = 257;
            v12 = sub_1C4773154((uint64_t *)v32, (uint64_t)v12, (uint64_t)v15, (uint64_t)v19, (uint64_t)&v29);
            ++v13;
          }
          while (v13 < *(unsigned int *)(v10 + 32));
        }
        v2 = v28;
        v20 = *(_DWORD *)(v28 + 20);
        if ((v20 & 0x40000000) != 0)
          v21 = *(_QWORD *)(v28 - 8);
        else
          v21 = v28 - 32 * (v20 & 0x7FFFFFF);
        v22 = v21 + 32 * v7;
        if (*(_QWORD *)v22)
        {
          **(_QWORD **)(v22 + 16) = *(_QWORD *)(v22 + 8);
          v23 = *(_QWORD *)(v22 + 8);
          if (v23)
            *(_QWORD *)(v23 + 16) = *(_QWORD *)(v22 + 16);
        }
        *(_QWORD *)v22 = v12;
        if (v12)
        {
          v26 = v12[1];
          v25 = v12 + 1;
          v24 = v26;
          v27 = v21 + 32 * v7;
          *(_QWORD *)(v27 + 8) = v26;
          if (v26)
            *(_QWORD *)(v24 + 16) = v27 + 8;
          *(_QWORD *)(v27 + 16) = v25;
          *v25 = v22;
        }
      }
      ++v7;
      v5 = *(_DWORD *)(v2 + 20);
      v6 = v5 & 0x7FFFFFF;
    }
    while (v7 < v6);
  }
  if (v32[0] != &v33)
    free(v32[0]);
}

llvm::UndefValue *sub_1C565EF38(uint64_t a1, llvm::ConstantDataSequential *this, const llvm::APInt *a3)
{
  llvm *v3;
  uint64_t **v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v9;
  uint64_t v10;
  llvm::ConstantInt *v11;
  unint64_t v12;
  int v13;
  llvm::Constant *v14;
  llvm::Constant *v15;
  llvm::UndefValue *ElementInstruction;
  _QWORD **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];

  v3 = this;
  v26[2] = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t ***)this;
  if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) != 0x12)
    return v3;
  v5 = a3;
  v6 = *((unsigned __int8 *)this + 16);
  if (v6 > 0x14)
  {
    v20 = 0;
    if (sub_1C4E580F4(*(_QWORD *)(a1 + 112), *(_DWORD *)(a1 + 128), (uint64_t)this, &v20))
      v9 = v20 == *(_QWORD *)(a1 + 112) + 24 * *(unsigned int *)(a1 + 128);
    else
      v9 = 1;
    if (v9)
      llvm::report_fatal_error((llvm *)"Internal compiler error", (const char *)1);
    return *(llvm::UndefValue **)(*(_QWORD *)(v20 + 8) + 8 * v5);
  }
  switch(v6)
  {
    case 0xAu:
      return (llvm::UndefValue *)*((_QWORD *)this + 4 * a3 + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
    case 0xDu:
      return (llvm::UndefValue *)llvm::Constant::getNullValue((llvm::Constant *)v4[3], this);
    case 0xFu:
      return llvm::ConstantDataSequential::getElementAsConstant(this);
  }
  if (v6 - 13 < 0xFFFFFFFE)
  {
    v10 = **v4;
    v11 = *(llvm::ConstantInt **)(v10 + 1960);
    v12 = *(unsigned int *)(v10 + 1968);
    LODWORD(v21) = v12 >> 8;
    if (v12 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v20, a3, 0);
    }
    else
    {
      if (v12 <= 0xFF)
        v13 = 0;
      else
        v13 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v12);
      v20 = v13 & a3;
    }
    v15 = llvm::ConstantInt::get(v11, (llvm::LLVMContext *)&v20, a3);
    if (v21 >= 0x41 && v20)
      MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
    ElementInstruction = llvm::ConstantFoldExtractElementInstruction(v3, v15, v14);
    if (!ElementInstruction)
    {
      v17 = *(_QWORD ***)v3;
      v18 = *(_QWORD *)(*(_QWORD *)v3 + 24);
      if (v18)
      {
        v26[0] = v3;
        v26[1] = v15;
        v19 = **v17 + 1512;
        LODWORD(v20) = 61;
        v21 = v26;
        v22 = 2;
        v23 = 0u;
        v24 = 0u;
        v25 = 0;
        return (llvm::UndefValue *)sub_1C537D4FC(v19, v18, (unsigned __int8 *)&v20);
      }
      else
      {
        return 0;
      }
    }
    return ElementInstruction;
  }
  return llvm::UndefValue::get((llvm::UndefValue *)v4[3], this);
}

void sub_1C565F1D4(unsigned int **a1, llvm::GetElementPtrInst *a2, uint64_t *a3, unsigned __int8 *a4, _QWORD *a5)
{
  uint64_t *v6;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t ***v14;
  const llvm::APInt *v15;
  uint64_t *v16;
  uint64_t ***v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  llvm::Type *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  llvm::Value *v27;
  llvm::UndefValue *v28;
  llvm::Type *v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  const llvm::APInt *v33;
  llvm::UndefValue *v34;
  unsigned int *v35;
  uint64_t v36;
  llvm::ConstantInt *v37;
  unint64_t v38;
  unint64_t v39;
  llvm::ValueHandleBase *v40;
  llvm::MDNode *v41;
  llvm::MDNode *v42;
  int MDKindID;
  unsigned int *v44;
  uint64_t v45;
  llvm::ConstantInt *v46;
  unint64_t v47;
  char v48;
  llvm::ValueHandleBase *v49;
  uint64_t v50;
  char *v51;
  llvm::ValueHandleBase **v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  llvm::ValueHandleBase ***v58;
  uint64_t v59;
  unsigned __int8 **v60;
  unsigned __int8 *v61;
  uint64_t v62;
  unsigned __int8 *v63;
  llvm::PointerType *v64;
  llvm::UndefValue *v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t *v69;
  llvm::Type *v70;
  uint64_t *v71;
  unint64_t v72;
  const llvm::APInt *v73;
  llvm::UndefValue *v74;
  unsigned int *v75;
  uint64_t v76;
  llvm::ConstantInt *v77;
  unint64_t v78;
  unint64_t v79;
  llvm::ValueHandleBase *v80;
  unint64_t v81;
  unint64_t v82;
  __int16 v83;
  llvm::Value *v84;
  uint64_t ***v85;
  llvm::MDNode *v86;
  llvm::MDNode *v87;
  int v88;
  int v89;
  uint64_t *v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  const llvm::APInt *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  llvm::ConstantInt *v99;
  unint64_t v100;
  unint64_t v101;
  llvm::ValueHandleBase *v102;
  const llvm::APInt *v103;
  _QWORD *v104;
  unsigned int *v105;
  uint64_t v106;
  uint64_t v107;
  llvm::ConstantInt *v108;
  unint64_t v109;
  unint64_t v110;
  llvm::ValueHandleBase *v111;
  uint64_t v112;
  char *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t *v122;
  llvm::GetElementPtrInst *v123;
  uint64_t ***v124;
  uint64_t *v125;
  unsigned __int8 *v126;
  uint64_t *v127;
  uint64_t ***v128;
  llvm::GetElementPtrInst *v129;
  uint64_t ***v130;
  uint64_t *v131;
  uint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  __int16 v135;
  uint64_t *v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int v139;
  llvm::PointerType *v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t *v144;
  llvm::UndefValue *v145;
  llvm::Type *v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  const llvm::APInt *v151;
  llvm::UndefValue *v152;
  unsigned int *v153;
  uint64_t v154;
  llvm::ConstantInt *v155;
  unint64_t v156;
  unint64_t v157;
  llvm::ValueHandleBase *v158;
  unint64_t v159;
  unint64_t v160;
  llvm::Value *v161;
  llvm::Value *v162;
  llvm::MDNode *v163;
  llvm::MDNode *v164;
  int v165;
  unsigned __int8 **v166;
  unsigned __int8 *v167;
  unsigned __int8 **v168;
  unsigned __int8 *v169;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unsigned __int8 *v175;
  _QWORD *v176;
  _QWORD *v177;
  unsigned __int8 *v179;
  uint64_t v180;
  _BYTE v181[32];
  __int16 v182;
  unsigned __int8 *v183;
  unsigned int v184;
  __int16 v185;

  v6 = a3;
  v180 = (uint64_t)a1[5];
  v8 = **a1;
  v9 = *a1[1];
  if (v9 <= v8)
  {
    v15 = 0;
    do
    {
      v16 = (uint64_t *)a1[2];
      v185 = 257;
      if (a5)
        v17 = sub_1C5098FF4(v16, a2, v6, (uint64_t)a5, (uint64_t)&v183);
      else
        v17 = sub_1C4772C18(v16, a2, v6, v15, (uint64_t)&v183);
      v18 = (uint64_t)v17;
      v19 = 3;
      if (!(_DWORD)v15)
        v19 = 4;
      v20 = *a1[v19];
      v21 = __clz(v20) ^ 0x3F;
      if (v20)
        v22 = v21;
      else
        v22 = 0;
      v23 = (llvm::Type *)*a1[1];
      if ((_DWORD)v23 == 1)
      {
        v24 = (_DWORD)v20 != 0;
        v25 = (uint64_t *)a1[2];
        v26 = (uint64_t *)sub_1C565EF38(v180, *(llvm::ConstantDataSequential **)(*(_QWORD *)a1[6] - 64), v15);
        v173 = v173 & 0xFFFFFFFFFFFF0000 | (v24 << 8) | v22;
        v27 = sub_1C509CCE8(v25, v26, v18, (unsigned __int16)((_WORD)v24 << 8) | (unsigned __int16)v22, 0);
      }
      else
      {
        v172 = (uint64_t)v17;
        v176 = a5;
        llvm::FixedVectorType::get(*(llvm::FixedVectorType **)a1[7], v23);
        v30 = (uint64_t *)llvm::UndefValue::get(v28, v29);
        LODWORD(v31) = *a1[1];
        if ((_DWORD)v31)
        {
          v32 = 0;
          do
          {
            v34 = sub_1C565EF38(v180, *(llvm::ConstantDataSequential **)(*(_QWORD *)a1[6] - 64), (const llvm::APInt *)(v32 + (_DWORD)v15 * v31));
            v35 = a1[2];
            v36 = **((_QWORD **)v35 + 8);
            v37 = *(llvm::ConstantInt **)(v36 + 1960);
            v38 = *(unsigned int *)(v36 + 1968);
            v184 = v38 >> 8;
            if (v38 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v183, v32, 0);
            }
            else
            {
              if (v38 <= 0xFF)
                v39 = 0;
              else
                v39 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v38);
              v183 = (unsigned __int8 *)(v39 & v32);
            }
            v40 = llvm::ConstantInt::get(v37, (llvm::LLVMContext *)&v183, v33);
            if (v184 >= 0x41 && v183)
              MEMORY[0x1CAA32F9C](v183, 0x1000C8000313F17);
            v185 = 257;
            v30 = (uint64_t *)sub_1C4773154((uint64_t *)v35, (uint64_t)v30, (uint64_t)v34, (uint64_t)v40, (uint64_t)&v183);
            ++v32;
            v31 = *a1[1];
          }
          while (v32 < v31);
        }
        v174 = v174 & 0xFFFFFFFFFFFF0000 | ((unint64_t)((_DWORD)v20 != 0) << 8) | v22;
        v27 = sub_1C509CCE8((uint64_t *)a1[2], v30, v172, (unsigned __int16)(((_DWORD)v20 != 0) << 8) | (unsigned __int16)v22, 0);
        a5 = v176;
        v6 = a3;
      }
      v41 = *(llvm::MDNode **)a1[8];
      if (v41)
        llvm::Value::setMetadata(v27, 1, v41);
      v42 = *(llvm::MDNode **)a1[9];
      if (v42)
      {
        MDKindID = llvm::LLVMContext::getMDKindID(**(uint64_t ***)v27, "srcloc", 6uLL);
        if (MDKindID)
        {
          llvm::Value::setMetadata(v27, MDKindID, v42);
        }
        else
        {
          v183 = (unsigned __int8 *)v42;
          llvm::MetadataTracking::track((uint64_t)&v183, (unsigned __int8 *)v42, 2);
          v60 = (unsigned __int8 **)((char *)v27 + 48);
          if (&v183 == v60)
          {
            if (v183)
              llvm::MetadataTracking::untrack((uint64_t)&v183, v183);
          }
          else
          {
            if (*v60)
              llvm::MetadataTracking::untrack((uint64_t)v60, *v60);
            v61 = v183;
            *v60 = v183;
            if (v61)
              llvm::MetadataTracking::retrack((uint64_t)&v183, v61, (uint64_t)v60);
          }
        }
      }
      if (a5)
      {
        v44 = a1[2];
        v45 = **((_QWORD **)v44 + 8);
        v46 = *(llvm::ConstantInt **)(v45 + 1960);
        v47 = *(unsigned int *)(v45 + 1968);
        v184 = v47 >> 8;
        if (v47 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v183, 1, 0);
        }
        else
        {
          if (v47 <= 0xFF)
            v48 = 0;
          else
            v48 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v47);
          v183 = (unsigned __int8 *)(v48 & 1);
        }
        v49 = llvm::ConstantInt::get(v46, (llvm::LLVMContext *)&v183, v41);
        if (v184 >= 0x41 && v183)
          MEMORY[0x1CAA32F9C](v183, 0x1000C8000313F17);
        v182 = 257;
        v50 = (*(uint64_t (**)(_QWORD, _QWORD *, llvm::ValueHandleBase *, _QWORD, _QWORD))(**((_QWORD **)v44 + 9) + 16))(*((_QWORD *)v44 + 9), a5, v49, 0, 0);
        if (!v50)
        {
          v185 = 257;
          v51 = (char *)operator new(0x80uLL);
          *(_QWORD *)v51 = 0;
          *((_QWORD *)v51 + 1) = 0;
          *((_QWORD *)v51 + 2) = 0;
          *((_QWORD *)v51 + 5) = 0;
          *((_QWORD *)v51 + 6) = 0;
          *((_QWORD *)v51 + 4) = 0;
          v52 = (llvm::ValueHandleBase **)(v51 + 32);
          *((_QWORD *)v51 + 8) = *a5;
          v53 = (uint64_t)(v51 + 64);
          *((_QWORD *)v51 + 3) = v51 + 64;
          *((_QWORD *)v51 + 7) = v51 + 64;
          *((_QWORD *)v51 + 9) = 0;
          v51[80] = 41;
          v51[81] = 0;
          *((_WORD *)v51 + 41) = 0;
          *((_DWORD *)v51 + 21) = 2;
          *((_DWORD *)v51 + 30) = 0;
          *(_OWORD *)(v51 + 104) = 0u;
          *(_OWORD *)(v51 + 88) = 0u;
          *(_QWORD *)v51 = a5;
          v56 = a5[1];
          v55 = a5 + 1;
          v54 = v56;
          *((_QWORD *)v51 + 1) = v56;
          if (v56)
            *(_QWORD *)(v54 + 16) = v51 + 8;
          *((_QWORD *)v51 + 2) = v55;
          *v55 = v51;
          if (*((_QWORD *)v51 + 4))
          {
            **((_QWORD **)v51 + 6) = *((_QWORD *)v51 + 5);
            v62 = *((_QWORD *)v51 + 5);
            if (v62)
              *(_QWORD *)(v62 + 16) = *((_QWORD *)v51 + 6);
          }
          *v52 = v49;
          if (v49)
          {
            v59 = *((_QWORD *)v49 + 1);
            v58 = (llvm::ValueHandleBase ***)((char *)v49 + 8);
            v57 = v59;
            *((_QWORD *)v51 + 5) = v59;
            if (v59)
              *(_QWORD *)(v57 + 16) = v51 + 40;
            *((_QWORD *)v51 + 6) = v58;
            *v58 = v52;
          }
          llvm::Value::setName((uint64_t ***)v51 + 8, (uint64_t)&v183);
          v50 = sub_1C4773754((uint64_t *)v44, v53, (uint64_t)v181);
        }
        a5 = (_QWORD *)v50;
      }
      v15 = (const llvm::APInt *)((_DWORD)v15 + 1);
      v8 = **a1;
      v9 = *a1[1];
      v10 = v8 / v9;
    }
    while (v15 < v8 / v9);
  }
  else
  {
    v10 = v8 / v9;
  }
  v11 = v8 % v9;
  if ((_DWORD)v11)
  {
    v12 = v10 * v9;
    if (*(_BYTE *)a1[10])
    {
      v13 = (uint64_t *)a1[2];
      v185 = 257;
      if (a5)
        v14 = sub_1C5098FF4(v13, a2, v6, (uint64_t)a5, (uint64_t)&v183);
      else
        v14 = sub_1C4772C18(v13, a2, v6, v8 / v9, (uint64_t)&v183);
      v63 = (unsigned __int8 *)v14;
      llvm::FixedVectorType::get(*(llvm::FixedVectorType **)a1[7], (llvm::Type *)*a1[11]);
      v65 = v64;
      v66 = **(_QWORD **)(*(_QWORD *)a1[6] - 32);
      v67 = *(_DWORD *)(v66 + 8);
      if ((v67 & 0xFE) == 0x12)
        v67 = *(_DWORD *)(**(_QWORD **)(v66 + 16) + 8);
      v177 = a5;
      v68 = llvm::PointerType::get(v64, (llvm::Type *)(v67 >> 8));
      v69 = (uint64_t *)a1[2];
      v185 = 257;
      v175 = sub_1C4773E38(v69, 49, v63, v68, (uint64_t)&v183);
      v71 = (uint64_t *)llvm::UndefValue::get(v65, v70);
      if (*a1[11])
      {
        v72 = 0;
        do
        {
          v74 = sub_1C565EF38(v180, *(llvm::ConstantDataSequential **)(*(_QWORD *)a1[6] - 64), (const llvm::APInt *)(v12 + v72));
          v75 = a1[2];
          v76 = **((_QWORD **)v75 + 8);
          v77 = *(llvm::ConstantInt **)(v76 + 1960);
          v78 = *(unsigned int *)(v76 + 1968);
          v184 = v78 >> 8;
          if (v78 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v183, v72, 0);
          }
          else
          {
            if (v78 <= 0xFF)
              v79 = 0;
            else
              v79 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v78);
            v183 = (unsigned __int8 *)(v79 & v72);
          }
          v80 = llvm::ConstantInt::get(v77, (llvm::LLVMContext *)&v183, v73);
          if (v184 >= 0x41 && v183)
            MEMORY[0x1CAA32F9C](v183, 0x1000C8000313F17);
          v185 = 257;
          v71 = (uint64_t *)sub_1C4773154((uint64_t *)v75, (uint64_t)v71, (uint64_t)v74, (uint64_t)v80, (uint64_t)&v183);
          ++v72;
        }
        while (v72 < *a1[11]);
      }
      v81 = *a1[3];
      v82 = __clz(v81) ^ 0x13F;
      if ((_DWORD)v81)
        v83 = v82;
      else
        v83 = 0;
      v84 = sub_1C509CCE8((uint64_t *)a1[2], v71, (uint64_t)v175, v83, 0);
      v85 = (uint64_t ***)v84;
      v86 = *(llvm::MDNode **)a1[8];
      if (v86)
        llvm::Value::setMetadata(v84, 1, v86);
      v87 = *(llvm::MDNode **)a1[9];
      a5 = v177;
      v6 = a3;
      if (v87)
      {
        v88 = llvm::LLVMContext::getMDKindID(**v85, "srcloc", 6uLL);
        if (v88)
        {
          llvm::Value::setMetadata((llvm::Value *)v85, v88, v87);
        }
        else
        {
          v183 = (unsigned __int8 *)v87;
          llvm::MetadataTracking::track((uint64_t)&v183, (unsigned __int8 *)v87, 2);
          v168 = (unsigned __int8 **)(v85 + 6);
          if (&v183 == v168)
          {
            if (v183)
              llvm::MetadataTracking::untrack((uint64_t)&v183, v183);
          }
          else
          {
            if (*v168)
              llvm::MetadataTracking::untrack((uint64_t)v168, *v168);
            v169 = v183;
            *v168 = v183;
            if (v169)
              llvm::MetadataTracking::retrack((uint64_t)&v183, v169, (uint64_t)v168);
          }
        }
      }
      v89 = *a1[11];
      v11 = (v11 - v89);
      v12 = (v89 + v12);
      if ((_DWORD)v11 == 1)
        goto LABEL_95;
      v125 = (uint64_t *)a1[2];
      v185 = 257;
      v126 = (unsigned __int8 *)sub_1C4772C18(v125, v65, v175, 1u, (uint64_t)&v183);
      if (v126)
      {
LABEL_131:
        llvm::FixedVectorType::get(*(llvm::FixedVectorType **)a1[7], (llvm::Type *)v11);
        v141 = **(_QWORD **)(*(_QWORD *)a1[6] - 32);
        v142 = *(_DWORD *)(v141 + 8);
        if ((v142 & 0xFE) == 0x12)
          v142 = *(_DWORD *)(**(_QWORD **)(v141 + 16) + 8);
        v143 = llvm::PointerType::get(v140, (llvm::Type *)(v142 >> 8));
        v144 = (uint64_t *)a1[2];
        v185 = 257;
        v179 = sub_1C4773E38(v144, 49, v126, v143, (uint64_t)&v183);
        llvm::FixedVectorType::get(*(llvm::FixedVectorType **)a1[7], (llvm::Type *)v11);
        v147 = (uint64_t *)llvm::UndefValue::get(v145, v146);
        if ((_DWORD)v11)
        {
          v148 = 0;
          v149 = v11;
          v150 = v12;
          do
          {
            v152 = sub_1C565EF38(v180, *(llvm::ConstantDataSequential **)(*(_QWORD *)a1[6] - 64), (const llvm::APInt *)(v150 + v148));
            v153 = a1[2];
            v154 = **((_QWORD **)v153 + 8);
            v155 = *(llvm::ConstantInt **)(v154 + 1960);
            v156 = *(unsigned int *)(v154 + 1968);
            v184 = v156 >> 8;
            if (v156 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v183, v148, 0);
            }
            else
            {
              if (v156 <= 0xFF)
                v157 = 0;
              else
                v157 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v156);
              v183 = (unsigned __int8 *)(v157 & v148);
            }
            v158 = llvm::ConstantInt::get(v155, (llvm::LLVMContext *)&v183, v151);
            if (v184 >= 0x41 && v183)
              MEMORY[0x1CAA32F9C](v183, 0x1000C8000313F17);
            v185 = 257;
            v147 = (uint64_t *)sub_1C4773154((uint64_t *)v153, (uint64_t)v147, (uint64_t)v152, (uint64_t)v158, (uint64_t)&v183);
            ++v148;
          }
          while (v149 != v148);
        }
        v136 = (uint64_t *)a1[2];
        v159 = *a1[3];
        v160 = __clz(v159) ^ 0x13F;
        if ((_DWORD)v159)
          v135 = v160;
        else
          v135 = 0;
        v132 = v147;
        v137 = (uint64_t)v179;
        goto LABEL_150;
      }
    }
    else if ((_DWORD)v11 == 1)
    {
LABEL_95:
      v90 = (uint64_t *)a1[2];
      v91 = **(_QWORD **)(*(_QWORD *)a1[6] - 32);
      v92 = *(_DWORD *)(v91 + 8);
      if ((v92 & 0xFE) == 0x12)
        v92 = *(_DWORD *)(**(_QWORD **)(v91 + 16) + 8);
      v93 = llvm::PointerType::get(*(llvm::PointerType **)a1[7], (llvm::Type *)(v92 >> 8));
      v185 = 257;
      v95 = (uint64_t *)sub_1C4773E38(v90, 49, a4, v93, (uint64_t)&v183);
      v96 = (uint64_t)a1[2];
      if (a5)
      {
        v97 = *a1[1];
        v98 = **(_QWORD **)(v96 + 64);
        v99 = *(llvm::ConstantInt **)(v98 + 1960);
        v100 = *(unsigned int *)(v98 + 1968);
        v184 = v100 >> 8;
        if (v100 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v183, v97, 0);
        }
        else
        {
          if (v100 <= 0xFF)
            v101 = 0;
          else
            v101 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v100);
          v183 = (unsigned __int8 *)(v101 & v97);
        }
        v102 = llvm::ConstantInt::get(v99, (llvm::LLVMContext *)&v183, v94);
        if (v184 >= 0x41 && v183)
          MEMORY[0x1CAA32F9C](v183, 0x1000C8000313F17);
        v185 = 257;
        v104 = (_QWORD *)sub_1C4EC4040(v96, (uint64_t)a5, (uint64_t)v102, (uint64_t)&v183, 0, 0);
        if (*(_BYTE *)a1[10])
        {
          v105 = a1[2];
          v106 = *a1[11];
          v107 = **((_QWORD **)v105 + 8);
          v108 = *(llvm::ConstantInt **)(v107 + 1960);
          v109 = *(unsigned int *)(v107 + 1968);
          v184 = v109 >> 8;
          if (v109 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v183, v106, 0);
          }
          else
          {
            if (v109 <= 0xFF)
              v110 = 0;
            else
              v110 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v109);
            v183 = (unsigned __int8 *)(v110 & v106);
          }
          v111 = llvm::ConstantInt::get(v108, (llvm::LLVMContext *)&v183, v103);
          if (v184 >= 0x41 && v183)
            MEMORY[0x1CAA32F9C](v183, 0x1000C8000313F17);
          v182 = 257;
          v112 = (*(uint64_t (**)(_QWORD, _QWORD *, llvm::ValueHandleBase *, _QWORD, _QWORD))(**((_QWORD **)v105 + 9) + 16))(*((_QWORD *)v105 + 9), v104, v111, 0, 0);
          if (!v112)
          {
            v185 = 257;
            v113 = (char *)operator new(0x80uLL);
            *((_QWORD *)v113 + 5) = 0;
            v114 = v113 + 40;
            *((_QWORD *)v113 + 6) = 0;
            *((_QWORD *)v113 + 8) = *v104;
            v115 = (uint64_t)(v113 + 64);
            *((_QWORD *)v113 + 3) = v113 + 64;
            *((_QWORD *)v113 + 7) = v113 + 64;
            *((_QWORD *)v113 + 9) = 0;
            v113[80] = 41;
            v113[81] = 0;
            *((_WORD *)v113 + 41) = 0;
            *((_DWORD *)v113 + 21) = 2;
            *(_OWORD *)(v113 + 88) = 0u;
            *(_OWORD *)(v113 + 104) = 0u;
            *((_DWORD *)v113 + 30) = 0;
            *(_QWORD *)v113 = v104;
            v118 = v104[1];
            v117 = v104 + 1;
            v116 = v118;
            *((_QWORD *)v113 + 1) = v118;
            if (v118)
              *(_QWORD *)(v116 + 16) = v113 + 8;
            *((_QWORD *)v113 + 2) = v117;
            *v117 = v113;
            *((_QWORD *)v113 + 4) = v111;
            if (v111)
            {
              v121 = *((_QWORD *)v111 + 1);
              v120 = (_QWORD *)((char *)v111 + 8);
              v119 = v121;
              *v114 = v121;
              if (v121)
                *(_QWORD *)(v119 + 16) = v114;
              *((_QWORD *)v113 + 6) = v120;
              *v120 = v113 + 32;
            }
            llvm::Value::setName((uint64_t ***)v113 + 8, (uint64_t)&v183);
            v112 = sub_1C4773754((uint64_t *)v105, v115, (uint64_t)v181);
          }
          v104 = (_QWORD *)v112;
        }
        v122 = (uint64_t *)a1[2];
        v123 = *(llvm::GetElementPtrInst **)a1[7];
        v185 = 257;
        v124 = sub_1C5098FF4(v122, v123, v95, (uint64_t)v104, (uint64_t)&v183);
      }
      else
      {
        v129 = *(llvm::GetElementPtrInst **)a1[7];
        v185 = 257;
        v124 = sub_1C4772C18((uint64_t *)v96, v129, v95, v12, (uint64_t)&v183);
      }
      v130 = v124;
      v131 = (uint64_t *)a1[2];
      v132 = (uint64_t *)sub_1C565EF38(v180, *(llvm::ConstantDataSequential **)(*(_QWORD *)a1[6] - 64), (const llvm::APInt *)v12);
      v133 = *a1[3];
      v134 = __clz(v133) ^ 0x13F;
      if ((_DWORD)v133)
        v135 = v134;
      else
        v135 = 0;
      v136 = v131;
      v137 = (uint64_t)v130;
LABEL_150:
      v161 = sub_1C509CCE8(v136, v132, v137, v135, 0);
      v162 = v161;
      v163 = *(llvm::MDNode **)a1[8];
      if (v163)
        llvm::Value::setMetadata(v161, 1, v163);
      v164 = *(llvm::MDNode **)a1[9];
      if (v164)
      {
        v165 = llvm::LLVMContext::getMDKindID(**(uint64_t ***)v162, "srcloc", 6uLL);
        if (v165)
        {
          llvm::Value::setMetadata(v162, v165, v164);
        }
        else
        {
          v183 = (unsigned __int8 *)v164;
          llvm::MetadataTracking::track((uint64_t)&v183, (unsigned __int8 *)v164, 2);
          v166 = (unsigned __int8 **)((char *)v162 + 48);
          if (&v183 == (unsigned __int8 **)((char *)v162 + 48))
          {
            if (v183)
              llvm::MetadataTracking::untrack((uint64_t)&v183, v183);
          }
          else
          {
            if (*v166)
              llvm::MetadataTracking::untrack((uint64_t)v162 + 48, *v166);
            v167 = v183;
            *v166 = v183;
            if (v167)
              llvm::MetadataTracking::retrack((uint64_t)&v183, v167, (uint64_t)v162 + 48);
          }
        }
      }
      return;
    }
    v127 = (uint64_t *)a1[2];
    if (a5)
    {
      v185 = 257;
      v128 = sub_1C5098FF4(v127, a2, v6, (uint64_t)a5, (uint64_t)&v183);
    }
    else
    {
      v138 = **a1;
      v139 = *a1[1];
      v185 = 257;
      v128 = sub_1C4772C18(v127, a2, v6, v138 / v139, (uint64_t)&v183);
    }
    v126 = (unsigned __int8 *)v128;
    goto LABEL_131;
  }
}

uint64_t sub_1C565FFEC()
{
  __n128 v1;
  int v2;
  int v3;
  int *v4;

  v1.n128_u64[0] = (unint64_t)&v4;
  v3 = 1;
  LODWORD(v4) = -1;
  sub_1C62827B0((int **)&v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED808E60, &dword_1C475E000);
  v2 = 1;
  v3 = -1;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Max architectural width of LD/ST instructions";
  v1.n128_u64[1] = 45;
  sub_1C6282884((llvm::cl::Option *)&unk_1ED808F20, "scalarize-maxldst-width", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED808F20, &dword_1C475E000);
}

uint64_t sub_1C56600B0(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "tail call flag removal";
  *(_QWORD *)(v2 + 8) = 22;
  *(_QWORD *)(v2 + 16) = "tail-call-flag-removal";
  *(_QWORD *)(v2 + 24) = 22;
  *(_QWORD *)(v2 + 32) = &unk_1ED808FE0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5660204;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C566013C(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED808FE0;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8172020;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED808FE8);
  if (v3 != -1)
  {
    v7[0] = sub_1C56600B0;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED808FE8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5660204()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C566013C(v0);
}

void sub_1C5660230(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5660254(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  _QWORD *v3;
  char v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *i;
  __int16 v8;

  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0
    || (v3 = (_QWORD *)*((_QWORD *)a2 + 10), v3 == (_QWORD *)((char *)a2 + 72)))
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      if (v3)
        v5 = v3 - 3;
      else
        v5 = 0;
      v6 = v5 + 5;
      for (i = (_QWORD *)v5[6]; i != v6; i = (_QWORD *)i[1])
      {
        if (i && *((_BYTE *)i - 8) == 84)
        {
          v8 = *((_WORD *)i - 3);
          if ((v8 & 3u) - 1 <= 1)
          {
            *((_WORD *)i - 3) = v8 & 0xFFFC;
            v4 = 1;
          }
        }
      }
      v3 = (_QWORD *)v3[1];
    }
    while (v3 != (_QWORD *)((char *)a2 + 72));
  }
  return v4 & 1;
}

uint64_t sub_1C5660304(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeLoopInfoWrapperPassPass(a1);
  llvm::initializeDominatorTreeWrapperPassPass(a1);
  llvm::initializePostDominatorTreeWrapperPassPass(a1);
  llvm::initializeFunctionGroupInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Transform the shader to enable two pass punchthrough";
  *(_QWORD *)(v2 + 8) = 52;
  *(_QWORD *)(v2 + 16) = "two-pass-punchthrough";
  *(_QWORD *)(v2 + 24) = 21;
  *(_QWORD *)(v2 + 32) = &unk_1ED808FF0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C566062C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C56603B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  unint64_t v23;
  _QWORD *v24;
  _QWORD v25[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED808FF0;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81720C0;
  *(_WORD *)(a1 + 28) = 0;
  *(_BYTE *)(a1 + 30) = 0;
  v15 = *(_QWORD *)(a2 + 24);
  if (v15)
  {
    if (v15 == a2)
    {
      *(_QWORD *)(a1 + 56) = a1 + 32;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1 + 32);
    }
    else
    {
      *(_QWORD *)(a1 + 56) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 56) = 0;
  }
  v16 = *(_QWORD *)(a3 + 24);
  if (v16)
  {
    if (v16 == a3)
    {
      *(_QWORD *)(a1 + 88) = a1 + 64;
      (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 88) = 0;
  }
  v17 = *(_QWORD *)(a4 + 24);
  if (v17)
  {
    if (v17 == a4)
    {
      *(_QWORD *)(a1 + 120) = a1 + 96;
      (*(void (**)(_QWORD))(**(_QWORD **)(a4 + 24) + 24))(*(_QWORD *)(a4 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 120) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 120) = 0;
  }
  v18 = *(_QWORD *)(a5 + 24);
  if (v18)
  {
    if (v18 == a5)
    {
      *(_QWORD *)(a1 + 152) = a1 + 128;
      (*(void (**)(_QWORD))(**(_QWORD **)(a5 + 24) + 24))(*(_QWORD *)(a5 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 152) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 152) = 0;
  }
  v19 = *(_QWORD *)(a6 + 24);
  if (v19)
  {
    if (v19 == a6)
    {
      *(_QWORD *)(a1 + 184) = a1 + 160;
      (*(void (**)(_QWORD))(**(_QWORD **)(a6 + 24) + 24))(*(_QWORD *)(a6 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 184) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 184) = 0;
  }
  *(_QWORD *)(a1 + 192) = a7;
  *(_BYTE *)(a1 + 200) = a8;
  if (dword_1ED809080 != -1)
    *(_BYTE *)(a1 + 28) = dword_1ED809080 != 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v23 = qword_1ED830BC0[0];
  v21 = atomic_load(&qword_1ED808FF8);
  if (v21 != -1)
  {
    v25[0] = sub_1C5660304;
    v25[1] = &v23;
    v24 = v25;
    std::__call_once(&qword_1ED808FF8, &v24, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C566062C()
{
  uint64_t v0;
  void (**v1)(void);
  void (**v2)(void);
  void (**v3)(void);
  _QWORD *v4;
  void (**v5)(_QWORD *);
  _QWORD *v6;
  void (**v7)(_QWORD *);
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  v18 = 0;
  v16 = 0;
  v14 = 0;
  v12 = 0;
  v10 = 0;
  sub_1C56603B0(v0, (uint64_t)v17, (uint64_t)v15, (uint64_t)v13, (uint64_t)v11, (uint64_t)v9, 1, 0);
  if (v10 == v9)
  {
    v1 = (void (**)(void))(v9[0] + 32);
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v1 = (void (**)(void))(*v10 + 40);
  }
  (*v1)();
LABEL_6:
  if (v12 == v11)
  {
    v2 = (void (**)(void))(v11[0] + 32);
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v2 = (void (**)(void))(*v12 + 40);
  }
  (*v2)();
LABEL_11:
  if (v14 == v13)
  {
    v3 = (void (**)(void))(v13[0] + 32);
  }
  else
  {
    if (!v14)
      goto LABEL_16;
    v3 = (void (**)(void))(*v14 + 40);
  }
  (*v3)();
LABEL_16:
  v4 = v16;
  if (v16 == v15)
  {
    v5 = (void (**)(_QWORD *))(v15[0] + 32);
    v4 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_21;
    v5 = (void (**)(_QWORD *))(*v16 + 40);
  }
  (*v5)(v4);
LABEL_21:
  v6 = v18;
  if (v18 == v17)
  {
    v7 = (void (**)(_QWORD *))(v17[0] + 32);
    v6 = v17;
    goto LABEL_25;
  }
  if (v18)
  {
    v7 = (void (**)(_QWORD *))(*v18 + 40);
LABEL_25:
    (*v7)(v6);
  }
  return v0;
}

void sub_1C56607D0(llvm::Pass *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  llvm::Pass *v5;
  uint64_t v6;
  llvm::Pass *v7;
  uint64_t v8;
  llvm::Pass *v9;
  uint64_t v10;
  llvm::Pass *v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E81720C0;
  v2 = (char *)this + 160;
  v3 = (char *)*((_QWORD *)this + 23);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (llvm::Pass *)*((_QWORD *)this + 19);
  if (v5 == (llvm::Pass *)((char *)this + 128))
  {
    v6 = 4;
    v5 = (llvm::Pass *)((char *)this + 128);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  v7 = (llvm::Pass *)*((_QWORD *)this + 15);
  if (v7 == (llvm::Pass *)((char *)this + 96))
  {
    v8 = 4;
    v7 = (llvm::Pass *)((char *)this + 96);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_16:
  v9 = (llvm::Pass *)*((_QWORD *)this + 11);
  if (v9 == (llvm::Pass *)((char *)this + 64))
  {
    v10 = 4;
    v9 = (llvm::Pass *)((char *)this + 64);
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_21:
  v11 = (llvm::Pass *)*((_QWORD *)this + 7);
  if (v11 == (llvm::Pass *)((char *)this + 32))
  {
    v12 = 4;
    v11 = (llvm::Pass *)((char *)this + 32);
    goto LABEL_25;
  }
  if (v11)
  {
    v12 = 5;
LABEL_25:
    (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
  }
  llvm::Pass::~Pass(this);
}

void sub_1C56608EC(llvm::Pass *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  llvm::Pass *v5;
  uint64_t v6;
  llvm::Pass *v7;
  uint64_t v8;
  llvm::Pass *v9;
  uint64_t v10;
  llvm::Pass *v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E81720C0;
  v2 = (char *)this + 160;
  v3 = (char *)*((_QWORD *)this + 23);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (llvm::Pass *)*((_QWORD *)this + 19);
  if (v5 == (llvm::Pass *)((char *)this + 128))
  {
    v6 = 4;
    v5 = (llvm::Pass *)((char *)this + 128);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  v7 = (llvm::Pass *)*((_QWORD *)this + 15);
  if (v7 == (llvm::Pass *)((char *)this + 96))
  {
    v8 = 4;
    v7 = (llvm::Pass *)((char *)this + 96);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_16:
  v9 = (llvm::Pass *)*((_QWORD *)this + 11);
  if (v9 == (llvm::Pass *)((char *)this + 64))
  {
    v10 = 4;
    v9 = (llvm::Pass *)((char *)this + 64);
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_21:
  v11 = (llvm::Pass *)*((_QWORD *)this + 7);
  if (v11 == (llvm::Pass *)((char *)this + 32))
  {
    v12 = 4;
    v11 = (llvm::Pass *)((char *)this + 32);
  }
  else
  {
    if (!v11)
    {
LABEL_26:
      llvm::Pass::~Pass(this);
      JUMPOUT(0x1CAA32FC0);
    }
    v12 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
  goto LABEL_26;
}

const char *sub_1C5660A1C()
{
  return "Two Pass Punchthrough";
}

void *sub_1C5660A2C(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
}

uint64_t sub_1C5660A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t NamedMetadata;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  void **v15;
  void *v16;
  uint64_t v17;
  void **v18;
  void *v19;
  char **v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t v32;
  uint64_t v33;
  std::string *v34;
  uint64_t v35;
  uint64_t v36;
  __int32 *v37;
  size_t v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t **v41;
  uint64_t *v42;
  uint64_t *v43;
  llvm *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  _BOOL4 v48;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  __int32 *v53;
  __int32 *v54;
  uint64_t **v55;
  uint64_t **v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 *v62;
  void *v63;
  void *v64;
  int v65;
  unsigned int v66;
  char *v67;
  void *v68;
  void *v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  _DWORD *v73;
  _DWORD *v74;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  int v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  char v89;
  uint64_t *v90;
  uint64_t v91;
  unsigned int v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t m;
  uint64_t v99;
  _QWORD *v100;
  uint64_t *v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  llvm *UnderlyingObject;
  BOOL v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  int v128;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  int v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  BOOL v145;
  _QWORD *v146;
  uint64_t v147;
  llvm::BasicBlock *v148;
  uint64_t v149;
  const llvm::APInt *v150;
  _QWORD *v151;
  _QWORD *v152;
  unsigned int v153;
  BOOL v154;
  uint64_t v155;
  uint64_t v156;
  llvm::ValueHandleBase *v157;
  llvm::ConstantInt *v158;
  unsigned int v159;
  char v160;
  llvm::ConstantInt *v161;
  uint64_t *v162;
  uint64_t v163;
  int v164;
  uint64_t *v165;
  uint64_t v166;
  int v167;
  _QWORD *v169;
  void *v170;
  unsigned int v171;
  char *v172;
  const llvm::APInt *v173;
  int *v174;
  char *v175;
  unsigned __int8 *v176;
  unsigned __int8 *v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int v183;
  _BOOL4 v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  char *v190;
  uint64_t v191;
  unint64_t v192;
  char *v193;
  char *v194;
  unsigned __int8 *v195;
  unsigned __int8 *n;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  BOOL v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  llvm::ValueHandleBase *v205;
  llvm::ConstantInt *v206;
  llvm::ConstantInt *v207;
  unsigned int v208;
  char v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t ii;
  uint64_t v215;
  _QWORD *v216;
  uint64_t *v217;
  uint64_t v218;
  unsigned int v219;
  _BOOL8 v220;
  int v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t *v224;
  char v225;
  uint64_t v226;
  char v227;
  _QWORD *v228;
  uint64_t *v229;
  unsigned int v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  BOOL v237;
  _QWORD *v238;
  uint64_t *v239;
  _QWORD *v240;
  uint64_t *v241;
  _QWORD *v242;
  void **v243;
  _QWORD *v244;
  uint64_t *v245;
  _QWORD *v246;
  uint64_t *v247;
  uint64_t v248;
  _QWORD *v250;
  uint64_t *v251;
  _QWORD *v252;
  uint64_t *v253;
  _QWORD *v254;
  void **v255;
  _QWORD *v256;
  uint64_t *v257;
  _QWORD *v258;
  uint64_t *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t jj;
  uint64_t v266;
  _QWORD *v267;
  uint64_t *v268;
  uint64_t v269;
  int v270;
  unsigned int v271;
  char *v272;
  char *v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  void (**v278)(void);
  uint64_t v279;
  BOOL v280;
  char v281;
  char v282;
  llvm::Type *v283;
  uint64_t v284;
  uint64_t v285;
  llvm::BasicBlock *v286;
  uint64_t v287;
  _QWORD *v288;
  uint64_t i1;
  uint64_t i2;
  uint64_t *v291;
  uint64_t *v292;
  uint64_t v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t *v303;
  uint64_t v304;
  unint64_t *v305;
  _BYTE *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  _QWORD *v311;
  _BYTE *v312;
  int v313;
  int v314;
  _QWORD *v315;
  void *v316;
  char *v317;
  void *v318;
  uint64_t v319;
  unsigned int v320;
  unint64_t *v321;
  unint64_t v322;
  uint64_t **v323;
  uint64_t *v324;
  uint64_t *v325;
  uint64_t v326;
  _QWORD *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t *v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  unsigned int v334;
  uint64_t v335;
  uint64_t v336;
  int v337;
  int v338;
  _QWORD *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  char *v346;
  unsigned int v347;
  unint64_t v348;
  unint64_t *v349;
  _QWORD *v350;
  uint64_t v351;
  _QWORD *v352;
  unint64_t v353;
  unint64_t *v354;
  _QWORD *v355;
  _QWORD *v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  char *v360;
  llvm::SmallPtrSetImplBase **v361;
  llvm::SmallPtrSetImplBase *v362;
  unint64_t *v363;
  _QWORD *v364;
  _QWORD *v365;
  _QWORD *v366;
  uint64_t v367;
  unint64_t v368;
  uint64_t v369;
  unint64_t v370;
  char *v371;
  llvm::SmallPtrSetImplBase **v372;
  llvm::SmallPtrSetImplBase *v373;
  _QWORD *v374;
  uint64_t *v375;
  uint64_t *v376;
  uint64_t v377;
  _QWORD *v378;
  uint64_t v379;
  uint64_t v380;
  unsigned int v381;
  uint64_t v382;
  uint64_t **v383;
  unsigned int v384;
  uint64_t **v385;
  uint64_t *v386;
  uint64_t *v387;
  uint64_t v388;
  unsigned int v389;
  uint64_t v390;
  char *v391;
  unint64_t v392;
  _QWORD *v393;
  uint64_t v394;
  uint64_t ****v395;
  uint64_t ****v396;
  uint64_t ***v397;
  uint64_t **v398;
  uint64_t **v399;
  uint64_t ***v400;
  uint64_t *v401;
  uint64_t v402;
  _QWORD *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t ***v408;
  uint64_t v409;
  uint64_t v410;
  _QWORD *v411;
  unint64_t v412;
  uint64_t v413;
  int32x2_t *v414;
  unint64_t v415;
  uint64_t v416;
  unsigned int v417;
  uint64_t v418;
  uint64_t *v419;
  uint64_t v420;
  int v421;
  int v422;
  uint64_t v423;
  uint64_t **v424;
  uint64_t **v425;
  uint64_t ***v426;
  llvm::BasicBlock *v427;
  uint64_t ***v428;
  unint64_t v429;
  unint64_t v430;
  uint64_t **v431;
  uint64_t **v432;
  uint64_t v433;
  unsigned int v434;
  uint64_t *v435;
  llvm::ValueSymbolTable *v436;
  uint64_t v437;
  llvm::ValueSymbolTable *v438;
  unint64_t v439;
  unint64_t *v440;
  uint64_t v441;
  int32x2_t *v442;
  unint64_t v443;
  uint64_t v444;
  unsigned int v445;
  uint64_t v446;
  uint64_t *v447;
  uint64_t v448;
  int v449;
  int v450;
  uint64_t v451;
  llvm::ValueSymbolTable *v452;
  char *v453;
  char *v454;
  uint64_t v455;
  _QWORD *v456;
  llvm::LLVMContext *v457;
  llvm::LLVMContext *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  int v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t *v465;
  unsigned int v466;
  int v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t *v470;
  uint64_t Declaration;
  uint64_t v472;
  char *v473;
  uint64_t **v474;
  uint64_t v475;
  char *v476;
  llvm::Value **v477;
  llvm::Value *v478;
  llvm::BasicBlock *v479;
  _DWORD *v480;
  _DWORD *v481;
  uint64_t v482;
  llvm::Value *v483;
  _QWORD *v484;
  char *v485;
  char *v486;
  unsigned __int8 **v487;
  int v488;
  unsigned __int8 *v489;
  unsigned __int8 *v490;
  unsigned __int8 *v491;
  char *v492;
  char *v493;
  char *v494;
  uint64_t v495;
  _QWORD *v496;
  char *v497;
  char *v498;
  llvm::Value *v499;
  _QWORD *v500;
  uint64_t v501;
  char *v502;
  char *v503;
  unsigned __int8 **v504;
  int v505;
  unsigned __int8 *v506;
  unsigned __int8 *v507;
  unsigned __int8 *v508;
  uint64_t v509;
  uint64_t *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  unsigned __int8 *v514;
  llvm::Instruction *v515;
  uint64_t v516;
  char *v517;
  char *v518;
  llvm::Value *v519;
  uint64_t v520;
  char *v521;
  char *v522;
  unsigned __int8 **v523;
  int v524;
  unsigned __int8 *v525;
  unsigned __int8 *v526;
  unsigned __int8 *v527;
  uint64_t v528;
  uint64_t v529;
  _QWORD *v530;
  uint64_t v531;
  uint64_t v532;
  _QWORD *v533;
  const llvm::APInt *v534;
  uint64_t v535;
  unsigned int *v536;
  uint64_t *v537;
  _QWORD *v538;
  uint64_t v539;
  unsigned int v540;
  uint64_t v541;
  int v542;
  BOOL v543;
  int v544;
  uint64_t v545;
  int v546;
  llvm::ValueHandleBase **v547;
  _QWORD *v548;
  uint64_t v549;
  llvm::ValueHandleBase *v550;
  llvm::ConstantInt *v551;
  unsigned int v552;
  char v553;
  uint64_t v554;
  uint64_t v555;
  llvm::ValueHandleBase ***v556;
  uint64_t v557;
  llvm::ConstantInt *v558;
  int v560;
  unsigned int v561;
  int v562;
  uint64_t v563;
  unsigned int v564;
  uint64_t v565;
  int v566;
  uint64_t v567;
  uint64_t v568;
  int v569;
  unsigned __int8 *v570;
  uint64_t v571;
  int v572;
  int v573;
  uint64_t v574;
  uint64_t v575;
  _QWORD *v576;
  uint64_t v577;
  _QWORD *v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t i3;
  uint64_t v582;
  int v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  _QWORD *v587;
  llvm::LLVMContext *v588;
  llvm::LLVMContext *v589;
  int v590;
  unsigned int v591;
  uint64_t v592;
  uint64_t v593;
  int v594;
  uint64_t v595;
  uint64_t *v596;
  unsigned int v597;
  _QWORD *v598;
  int v599;
  void **v600;
  unsigned __int8 *v601;
  int v602;
  void **v603;
  int v604;
  unsigned int v605;
  void **v606;
  void *v607;
  void **v608;
  int v609;
  BOOL v610;
  unsigned int v611;
  void **v612;
  unsigned __int8 *v613;
  int v614;
  unsigned int v615;
  void **v616;
  void *v617;
  void **v618;
  int v619;
  BOOL v620;
  unsigned int v621;
  void **v622;
  _QWORD *v623;
  uint64_t v624;
  unsigned int v625;
  unsigned int v626;
  void **v627;
  llvm::BasicBlock *v628;
  void **v629;
  int v630;
  BOOL v631;
  char v632;
  void **v633;
  _QWORD *v634;
  llvm::BasicBlock *v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  llvm::BasicBlock *v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  char *v645;
  char *v646;
  llvm::Value *v647;
  uint64_t v648;
  _QWORD *v649;
  uint64_t v650;
  char *v651;
  char *v652;
  unsigned __int8 **v653;
  int v654;
  unsigned __int8 *v655;
  unsigned __int8 *v656;
  unsigned __int8 *v657;
  _QWORD *v658;
  uint64_t v659;
  uint64_t v660;
  unsigned __int8 *v661;
  _QWORD *v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  _QWORD *v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  llvm::ValueSymbolTable *v672;
  uint64_t v673;
  _QWORD *v674;
  uint64_t v675;
  uint64_t v676;
  int v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  _QWORD *v684;
  char *v685;
  char *v686;
  llvm::Value *v687;
  uint64_t v688;
  _QWORD *v689;
  char *v690;
  char *v691;
  unsigned __int8 **v692;
  int v693;
  unsigned __int8 *v694;
  unsigned __int8 *v695;
  unsigned __int8 *v696;
  int v697;
  _QWORD *v698;
  uint64_t v699;
  _QWORD *v700;
  uint64_t v701;
  _QWORD *v702;
  _QWORD *v703;
  _QWORD *v704;
  uint64_t v705;
  uint64_t v706;
  _QWORD *v707;
  uint64_t v708;
  BOOL v709;
  _QWORD *v710;
  uint64_t *v711;
  int v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  _QWORD **v716;
  _QWORD *v717;
  _QWORD *v718;
  _QWORD *v719;
  llvm::BasicBlock **v720;
  llvm::BasicBlock **v721;
  char *v722;
  _QWORD *v723;
  unsigned __int8 *v724;
  llvm::BasicBlock *v725;
  char *v726;
  char *v727;
  llvm::Value *v728;
  uint64_t v729;
  _QWORD *v730;
  uint64_t v731;
  char *v732;
  char *v733;
  unsigned __int8 **v734;
  int v735;
  unsigned __int8 *v736;
  unsigned __int8 *v737;
  unsigned __int8 *v738;
  char *v739;
  char *v740;
  llvm::Value *v741;
  uint64_t v742;
  _QWORD *v743;
  char *v744;
  char *v745;
  unsigned __int8 **v746;
  int v747;
  unsigned __int8 *v748;
  unsigned __int8 *v749;
  unsigned __int8 *v750;
  uint64_t (**v751)();
  uint64_t (**v752)();
  uint64_t (*v753)();
  uint64_t (*v754)();
  unint64_t v755;
  unint64_t *v756;
  uint64_t (*v757)();
  int32x2_t *v758;
  unint64_t v759;
  uint64_t v760;
  unsigned int v761;
  uint64_t v762;
  uint64_t (**v763)();
  uint64_t (*v764)();
  int v765;
  int v766;
  unint64_t v768;
  unint64_t *v769;
  uint64_t (*v770)();
  int32x2_t *v771;
  unint64_t v772;
  uint64_t v773;
  unsigned int v774;
  uint64_t v775;
  uint64_t (**v776)();
  uint64_t (*v777)();
  int v778;
  int v779;
  uint64_t inserted;
  llvm::Value *v781;
  void *Impl;
  uint64_t v783;
  uint64_t v784;
  unsigned __int8 *v785;
  unsigned __int8 **v786;
  uint64_t ***v787;
  uint64_t **v788;
  unsigned int v789;
  uint64_t **v790;
  uint64_t **v791;
  uint64_t *i4;
  uint64_t *v793;
  uint64_t v794;
  uint64_t *v795;
  uint64_t *v796;
  uint64_t v797;
  const llvm::APInt *v798;
  uint64_t v799;
  unsigned int *v800;
  int8x8_t v801;
  int8x8_t v802;
  __int32 v803;
  int8x8_t v804;
  uint64_t v806;
  unsigned int v807;
  uint64_t v808;
  uint64_t *v809;
  unsigned int v810;
  _DWORD *v811;
  char *v812;
  uint64_t v813;
  uint64_t v814;
  int v815;
  uint64_t v816;
  BOOL v817;
  _QWORD *v818;
  unsigned int v819;
  BOOL v820;
  int v821;
  uint64_t i5;
  llvm::Type *v823;
  int PrimitiveSizeInBits;
  uint64_t v825;
  uint64_t i6;
  uint64_t v827;
  _QWORD *v828;
  uint64_t v829;
  _BOOL4 v830;
  uint64_t v831;
  int v832;
  int *v833;
  uint64_t v834;
  int v835;
  int v836;
  char v837;
  BOOL v838;
  int v839;
  uint64_t v840;
  _QWORD *v841;
  uint8x8_t v842;
  uint64_t v844;
  uint64_t v845;
  llvm::ConstantInt *v846;
  unint64_t v847;
  int v848;
  llvm::ValueHandleBase *v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t *v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t ***v857;
  uint64_t v858;
  int v859;
  char v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  llvm::Type *v864;
  llvm::DSOLocalEquivalent **v865;
  uint64_t **i7;
  uint64_t **v867;
  void **v868;
  void *v869;
  uint64_t v870;
  uint64_t v871;
  _WORD *v872;
  void *v873;
  void *v874;
  int v875;
  unsigned int v876;
  void *v877;
  void *v878;
  void *v879;
  void *v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  unsigned int v884;
  char v885;
  char v886;
  uint64_t v887;
  unsigned int v888;
  char *v889;
  uint64_t *v890;
  char *v891;
  BOOL v892;
  BOOL v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  void *v897;
  void *v898;
  unsigned __int8 *v899;
  void *v900;
  void *v901;
  void *v902;
  uint64_t *v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  void *v907;
  uint64_t *v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  char *v912;
  uint64_t v913;
  char *v914;
  char v915;
  unsigned int v916;
  _QWORD *v917;
  uint64_t v918;
  void **v919;
  uint64_t v920;
  _QWORD *v921;
  char v922;
  unsigned int v923;
  uint64_t v924;
  void **v925;
  uint64_t v926;
  uint64_t v928;
  void *v929;
  uint64_t v930;
  void *v931;
  void (**v932)(void);
  void (**v933)(void);
  char *v934;
  char *v935;
  uint64_t kk;
  unint64_t v937;
  BOOL v938;
  void (**v939)(void);
  void (**v940)(void);
  void (**v941)(void);
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t mm;
  uint64_t v946;
  uint64_t v947;
  uint64_t nn;
  uint64_t v949;
  unint64_t v950;
  int v952;
  int v953;
  unsigned int v954;
  uint64_t *v955;
  uint64_t v956;
  _QWORD *v957;
  uint64_t v958;
  llvm::BasicBlock **v959;
  uint64_t v960;
  uint64_t *v961;
  uint64_t v962;
  _QWORD *v963;
  uint64_t v964;
  int *v965;
  uint64_t v966;
  void *v967;
  void *v968;
  unsigned int v969;
  uint64_t v970;
  uint64_t *v971;
  uint64_t v972;
  _QWORD *v973;
  uint64_t v974;
  char *v975;
  uint64_t v976;
  int64x2_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  llvm::SmallPtrSetImplBase *v981;
  uint64_t v982;
  unint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  int __p;
  unint64_t __pa;
  unint64_t *__pb;
  llvm::SmallPtrSetImplBase *v990;
  llvm::SmallPtrSetImplBase *v991;
  llvm::SmallPtrSetImplBase *v992;
  uint64_t v993;
  _QWORD *v994;
  char *v995;
  uint64_t ***v996;
  _QWORD *v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t *v1000;
  uint64_t *v1001;
  uint64_t v1002;
  llvm::BasicBlock *v1003;
  llvm::BasicBlock *v1004;
  const char *v1005;
  uint64_t v1006;
  _QWORD *v1007;
  unsigned int v1008;
  __int16 v1009;
  uint64_t v1010;
  _QWORD *v1011;
  unsigned int v1012;
  uint64_t v1013;
  void *v1014;
  uint64_t v1015;
  _BYTE v1016[320];
  uint64_t v1017;
  uint64_t v1018;
  void *v1019;
  uint64_t v1020;
  _BYTE v1021[32];
  _BYTE *v1022;
  void *v1023;
  uint64_t v1024;
  int v1025;
  _BYTE v1026[128];
  _BYTE *v1027;
  void *v1028;
  uint64_t v1029;
  int v1030;
  _BYTE v1031[128];
  void *v1032;
  uint64_t v1033;
  _BYTE v1034[160];
  _BYTE *v1035;
  void *v1036;
  uint64_t v1037;
  int v1038;
  _BYTE v1039[64];
  _BYTE *v1040;
  void *v1041;
  uint64_t v1042;
  int v1043;
  _BYTE v1044[32];
  __int128 v1045;
  int v1046;
  uint64_t v1047;
  uint64_t *v1048;
  void *v1049;
  void *v1050[2];
  __int128 v1051;
  void *v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t *v1055;
  void **v1056;
  void **v1057;
  uint64_t v1058;
  void *v1059;
  uint64_t v1060;
  uint64_t v1061;
  void *v1062;
  void *v1063;
  __int128 v1064;
  uint64_t v1065;
  llvm::BasicBlock *v1066;
  __int128 v1067;
  __int128 v1068;
  uint64_t *v1069;
  uint64_t *v1070;
  void *v1071;
  uint64_t v1072;
  void *v1073;
  uint64_t v1074;
  _QWORD v1075[15];
  llvm::Type *v1076;
  void *v1077;
  void *__src;
  uint64_t v1079;
  int v1080;
  _WORD v1081[8];
  int *v1082;
  _BYTE v1083[24];
  _BYTE *v1084;
  uint64_t v1085;
  void *v1086;
  int v1087;
  uint64_t *v1088;
  void *v1089;
  void *v1090;
  unsigned int v1091;
  unsigned int v1092;
  int v1093;
  void *v1094;
  int v1095;
  uint64_t v1096;
  void *v1097;
  void *v1098;
  uint64_t v1099;
  int v1100;
  _BYTE v1101[128];
  void *v1102;
  uint64_t v1103;
  _DWORD v1104[8];
  void *v1105;
  uint64_t v1106;
  _BYTE v1107[32];
  void *v1108;
  uint64_t v1109;
  _BYTE v1110[48];
  void *v1111;
  uint64_t v1112;
  _BYTE v1113[40];
  _QWORD v1114[3];
  _QWORD *v1115;
  void *v1116;
  uint64_t v1117;
  uint64_t v1118;
  void **v1119;
  void *v1120;
  void *v1121;
  uint64_t v1122;
  int v1123;
  _BYTE v1124[16];
  llvm::BasicBlock *v1125;
  char *v1126;
  uint64_t v1127;
  void **v1128;
  void **v1129;
  uint64_t v1130;
  int v1131;
  __int16 v1132;
  char v1133;
  uint64_t v1134;
  uint64_t v1135;
  void *v1136;
  void *v1137;
  uint64_t (**v1138)();
  const char **v1139;
  uint64_t v1140;
  uint64_t (***v1141)();
  char v1142;
  void *v1143;
  uint64_t v1144;
  uint64_t v1145;
  void **v1146;
  unsigned __int8 *v1147;
  uint64_t v1148;
  uint64_t v1149;
  void **v1150;
  __int16 v1151;
  uint64_t v1152;

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v6 = v5;
  v7 = v4;
  v1152 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(v5 + 40);
  v1005 = "agx.early.fragment.tests";
  v1009 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(v8, (uint64_t)&v1005);
  if (NamedMetadata)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(***(_QWORD ***)(NamedMetadata + 48)
                                - 8 * *(unsigned int *)(***(_QWORD ***)(NamedMetadata + 48) + 8))
                    + 128);
    v11 = (_QWORD *)(v10 + 24);
    if (*(_DWORD *)(v10 + 32) >= 0x41u)
      v11 = (_QWORD *)*v11;
    if (*v11)
      return 0;
  }
  v12 = 0;
  v13 = (*(unsigned __int16 *)(v6 + 18) >> 4) & 0x3FF;
  if (v13)
    v14 = v13 == 8;
  else
    v14 = 1;
  if (!v14 && v13 != 255)
  {
    v15 = **(void ****)(v7 + 8);
    do
    {
      v16 = *v15;
      v15 += 2;
    }
    while (v16 != &llvm::PostDominatorTreeWrapperPass::ID);
    v17 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v15 - 1) + 96))(*(v15 - 1), &llvm::PostDominatorTreeWrapperPass::ID);
    v18 = **(void ****)(v7 + 8);
    do
    {
      v19 = *v18;
      v18 += 2;
    }
    while (v19 != &llvm::DominatorTreeWrapperPass::ID);
    v996 = (uint64_t ***)v6;
    (*(void (**)(_QWORD, void *))(*(_QWORD *)*(v18 - 1) + 96))(*(v18 - 1), &llvm::DominatorTreeWrapperPass::ID);
    v20 = **(char ****)(v7 + 8);
    do
    {
      v21 = *v20;
      v20 += 2;
    }
    while (v21 != llvm::LoopInfoWrapperPass::ID);
    v22 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v20 - 1) + 96))(*(v20 - 1), llvm::LoopInfoWrapperPass::ID);
    v23 = *(_QWORD *)(v7 + 56);
    if (v23)
      *(_BYTE *)(v7 + 28) |= (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 48))(v23, v6);
    v24 = *(_QWORD *)(v7 + 88);
    if (v24)
      v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 48))(v24, v6);
    else
      v25 = 1;
    v26 = *(_QWORD *)(v7 + 120);
    if (v26)
      *(_BYTE *)(v7 + 29) = (*(uint64_t (**)(uint64_t, uint64_t ***))(*(_QWORD *)v26 + 48))(v26, v996);
    v27 = *(_QWORD *)(v7 + 152);
    if (v27)
      *(_BYTE *)(v7 + 30) = (*(uint64_t (**)(uint64_t, uint64_t ***))(*(_QWORD *)v27 + 48))(v27, v996);
    if (*(_BYTE *)(v7 + 28))
      v28 = 1;
    else
      v28 = v25;
    if ((v28 & 1) != 0)
    {
      __p = *(unsigned __int8 *)(v7 + 29);
    }
    else
    {
      if (!*(_BYTE *)(v7 + 29))
        return 0;
      __p = 1;
    }
    v972 = (uint64_t)v996[5];
    BYTE1(v1005) = *(_BYTE *)(v7 + 28);
    v1006 = 1;
    for (i = 2; i != 210; i += 13)
      (&v1005)[i] = (const char *)-4096;
    v1010 = 1;
    for (j = 211; j != 419; j += 13)
      (&v1005)[j] = (const char *)-4096;
    v974 = v7;
    v982 = v17 + 32;
    v1013 = v17 + 32;
    v1014 = v1016;
    v1015 = 0xA00000000;
    v1017 = 1;
    for (k = 463; k != 479; k += 2)
      (&v1005)[k] = (const char *)-4096;
    v1019 = v1021;
    v1020 = 0x400000000;
    v1022 = v1026;
    v1023 = v1026;
    v1024 = 16;
    v1025 = 0;
    v1027 = v1031;
    v1028 = v1031;
    v1029 = 16;
    v1030 = 0;
    v1032 = v1034;
    v1033 = 0x1400000000;
    v1035 = v1039;
    v1036 = v1039;
    v1037 = 8;
    v1038 = 0;
    v1040 = v1044;
    v1041 = v1044;
    v1042 = 4;
    v1043 = 0;
    v1045 = 0u;
    v1046 = 0;
    v971 = (uint64_t *)(v22 + 32);
    v1047 = v22 + 32;
    v1048 = 0;
    sub_1C560B350((uint64_t)&v1006, (uint64_t)v996);
    v36 = 0;
    v1102 = v1104;
    v1103 = 0x400000000;
    v1105 = v1107;
    v1106 = 0x400000000;
    v1108 = v1110;
    v1109 = 0x600000000;
    v1111 = v1113;
    v1112 = 0x400000000;
    v1113[32] = BYTE1(v1005);
    if (BYTE1(v1005))
      v37 = (__int32 *)&unk_1C865FFCC;
    else
      v37 = (__int32 *)&unk_1C865FFC0;
    if (BYTE1(v1005))
      v38 = 6;
    else
      v38 = 3;
    v39 = (uint64_t)v996[5];
    while (!sub_1C5EA9FF0(v39, v37[v36], 0, 0, v32, v33, v34, v35))
    {
      if (v38 == ++v36)
        goto LABEL_88;
    }
    v40 = v996[5];
    v41 = v40 + 3;
    v42 = v40[4];
    if (v42 != (uint64_t *)(v40 + 3))
    {
      do
      {
        if (v42)
          v43 = v42 - 7;
        else
          v43 = 0;
        if ((*((_BYTE *)v43 + 33) & 0x20) == 0)
          goto LABEL_80;
        v44 = (llvm *)*((unsigned int *)v43 + 9);
        if (sub_1C47860D0(*((_DWORD *)v43 + 9)))
        {
          v45 = v1106;
          if (v1106 >= (unint64_t)HIDWORD(v1106))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1105, (uint64_t)v1107, v1106 + 1, 8);
            v45 = v1106;
          }
          v46 = v1105;
          v47 = &v1106;
        }
        else if (llvm::GetItrKind(v44))
        {
          v45 = v1109;
          if (v1109 >= (unint64_t)HIDWORD(v1109))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1108, (uint64_t)v1110, v1109 + 1, 8);
            v45 = v1109;
          }
          v46 = v1108;
          v47 = &v1109;
        }
        else
        {
          if ((sub_1C5E9D850((int)v44) & 1) == 0)
          {
            v48 = sub_1C55A9F2C((int)v44);
            if (((_DWORD)v44 - 2784) >= 3 && !v48)
            {
              v53 = wmemchr(v37, (__int32)v44, v38);
              v54 = &v37[v38];
              if (v53)
                v54 = v53;
              if (v38 == v54 - v37)
                goto LABEL_80;
              v45 = v1103;
              if (v1103 >= (unint64_t)HIDWORD(v1103))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1102, (uint64_t)v1104, v1103 + 1, 8);
                v45 = v1103;
              }
              v46 = v1102;
              v47 = &v1103;
              goto LABEL_79;
            }
            v50 = 2;
            if (!v48)
              v50 = 0;
            if ((_DWORD)v44 == 2144)
              v50 = 0;
            if ((_DWORD)v44 == 2142)
              v50 = 0;
            v51 = *(_QWORD *)(*(_QWORD *)(v43[3] + 16) + ((8 * v50) | 8));
            v52 = *(_DWORD *)(v51 + 8);
            if ((v52 & 0xFE) == 0x12)
              v52 = *(_DWORD *)(**(_QWORD **)(v51 + 16) + 8);
            if (v52 >> 8 != 65)
              goto LABEL_80;
          }
          v45 = v1112;
          if (v1112 >= (unint64_t)HIDWORD(v1112))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1111, (uint64_t)v1113, v1112 + 1, 8);
            v45 = v1112;
          }
          v46 = v1111;
          v47 = &v1112;
        }
LABEL_79:
        v46[v45] = v43;
        ++*(_DWORD *)v47;
LABEL_80:
        v42 = (uint64_t *)v42[1];
      }
      while (v42 != (uint64_t *)v41);
    }
LABEL_88:
    if (!(_DWORD)v1103)
    {
      v93 = 0;
      v57 = v974;
      goto LABEL_599;
    }
    v55 = v996[10];
    if (v55)
      v56 = v55 - 3;
    else
      v56 = 0;
    v1120 = v1124;
    v1121 = v1124;
    v1122 = 8;
    v1123 = 0;
    v57 = v974;
    if ((_DWORD)v1112)
    {
      v58 = (uint64_t *)v1111;
      do
      {
        v59 = *v58;
        while (1)
        {
          v59 = *(_QWORD *)(v59 + 8);
          if (!v59)
            break;
          v60 = *(_QWORD *)(v59 + 24);
          if (*(_BYTE *)(v60 + 16) == 84)
          {
            v61 = *(_QWORD *)(v60 - 32);
            if (v61)
            {
              if (!*(_BYTE *)(v61 + 16)
                && *(_QWORD *)(v61 + 24) == *(_QWORD *)(v60 + 72)
                && (*(_BYTE *)(v61 + 33) & 0x20) != 0)
              {
                v93 = 0;
                goto LABEL_597;
              }
            }
          }
        }
        ++v58;
      }
      while (v58 != (uint64_t *)((char *)v1111 + 8 * v1112));
    }
    v1097 = v1101;
    v1098 = v1101;
    v1099 = 16;
    v1100 = 0;
    BYTE2(v1005) = 0;
    *(_QWORD *)&v1064 = v56;
    sub_1C4EB7378((uint64_t *)&v1064, (uint64_t)&v1077);
    v62 = &v1067;
    *(_QWORD *)&v1064 = &v1067;
    v63 = __src;
    if (__src == v1077)
    {
      *((_QWORD *)&v1064 + 1) = &v1067;
      v64 = __src;
    }
    else
    {
      v953 = v1079;
      v62 = (__int128 *)malloc_type_malloc(8 * v1079, 0x4065EBACuLL);
      if (!v62)
      {
        if (v953)
          goto LABEL_1714;
        v62 = (__int128 *)malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v62)
          goto LABEL_1714;
      }
      *((_QWORD *)&v1064 + 1) = v62;
      v64 = v1077;
      v63 = __src;
    }
    v65 = HIDWORD(v1079);
    LODWORD(v1065) = v1079;
    if (v63 == v64)
      v66 = HIDWORD(v1079);
    else
      v66 = v1079;
    if (v66)
    {
      memmove(v62, v63, 8 * v66);
      v65 = HIDWORD(v1079);
    }
    HIDWORD(v1065) = v65;
    LODWORD(v1066) = v1080;
    v1073 = v1075;
    v1074 = 0x800000000;
    if (v1087)
      sub_1C4DB22B8((uint64_t)&v1073, (uint64_t *)&v1086);
    v67 = (char *)&v1051 + 8;
    v1049 = (char *)&v1051 + 8;
    v68 = v1090;
    if (v1090 == v1089)
    {
      v1050[0] = (char *)&v1051 + 8;
      v69 = v1090;
    }
    else
    {
      v954 = v1091;
      v67 = (char *)malloc_type_malloc(8 * v1091, 0x4065EBACuLL);
      if (!v67)
      {
        if (v954)
          goto LABEL_1714;
        v67 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v67)
          goto LABEL_1714;
      }
      v1050[0] = v67;
      v69 = v1089;
      v68 = v1090;
    }
    LODWORD(v1050[1]) = v1091;
    v70 = v1092;
    if (v68 == v69)
      v71 = v1092;
    else
      v71 = v1091;
    if (v71)
    {
      memmove(v67, v68, 8 * v71);
      v70 = v1092;
    }
    HIDWORD(v1050[1]) = v70;
    LODWORD(v1051) = v1093;
    v1059 = &v1061;
    v1060 = 0x800000000;
    if (v1095)
      sub_1C4DB22B8((uint64_t)&v1059, (uint64_t *)&v1094);
    while (1)
    {
      v72 = v1074;
      if ((_DWORD)v1074 != (_DWORD)v1060)
        goto LABEL_131;
      if (!(_DWORD)v1074)
        break;
      v73 = v1059;
      v74 = v1073;
      while (*(_QWORD *)v74 == *(_QWORD *)v73 && v74[4] == v73[4])
      {
        v74 += 6;
        v73 += 6;
        if (v74 == (_DWORD *)((char *)v1073 + 24 * v1074))
          goto LABEL_152;
      }
LABEL_131:
      v76 = *((_QWORD *)v1073 + 3 * v1074 - 3);
      v79 = *(_QWORD **)(v76 + 40);
      v77 = (_QWORD *)(v76 + 40);
      v78 = v79;
      if (v79 != v77)
      {
        do
        {
          if (v78)
            v80 = v78 - 3;
          else
            v80 = 0;
          if (*((_BYTE *)v80 + 16) == 84)
          {
            v81 = *(v80 - 4);
            if (v81)
            {
              if (!*(_BYTE *)(v81 + 16)
                && *(_QWORD *)(v81 + 24) == v80[9]
                && (*(_BYTE *)(v81 + 33) & 0x20) != 0
                && (_DWORD)v1103)
              {
                v82 = *(_DWORD *)(*(v78 - 7) + 36);
                v83 = (char *)v1102;
                v84 = 8 * v1103;
                do
                {
                  if (v82 == *(_DWORD *)(*(_QWORD *)v83 + 36))
                  {
                    v85 = v1020;
                    if (v1020 >= (unint64_t)HIDWORD(v1020))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1019, (uint64_t)v1021, v1020 + 1, 8);
                      v85 = v1020;
                    }
                    *((_QWORD *)v1019 + v85) = v78 - 3;
                    LODWORD(v1020) = v1020 + 1;
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1097, (uint64_t)(v78 - 3));
                    if ((uint64_t **)v78[2] != v56)
                      BYTE2(v1005) = 1;
                  }
                  v83 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
            }
          }
          v78 = (_QWORD *)*v78;
        }
        while (v78 != v77);
        v72 = v1074;
      }
      LODWORD(v1074) = v72 - 1;
      if (v72 != 1)
        sub_1C4EB7588(&v1064);
    }
LABEL_152:
    if (v1059 != &v1061)
      free(v1059);
    if (v1050[0] != v1049)
      free(v1050[0]);
    if (v1073 != v1075)
      free(v1073);
    if (*((_QWORD *)&v1064 + 1) != (_QWORD)v1064)
      free(*((void **)&v1064 + 1));
    if (v1094 != &v1096)
      free(v1094);
    if (v1090 != v1089)
      free(v1090);
    if (v1086 != &v1088)
      free(v1086);
    if (__src != v1077)
      free(__src);
    v1077 = v996;
    v86 = operator new();
    *(_QWORD *)(v86 + 8) = 0;
    *(_QWORD *)(v86 + 16) = 0;
    *(_QWORD *)v86 = 0;
    sub_1C5643D14((char **)v86, (uint64_t)&v1077);
    v87 = (uint64_t)v1048;
    v1048 = (uint64_t *)v86;
    if (v87)
      sub_1C56674BC(v87);
    if (!BYTE1(v1005))
    {
      v94 = *v1048;
      v95 = v1048[1];
      if (v95 != *v1048)
      {
LABEL_182:
        v96 = *(_QWORD *)(v95 - 8);
        v95 -= 8;
        v97 = v96 + 40;
        for (m = *(_QWORD *)(v96 + 48); ; m = *(_QWORD *)(m + 8))
        {
          if (m == v97)
          {
            if (v95 == v94)
              break;
            goto LABEL_182;
          }
          if (m)
            v99 = m - 24;
          else
            v99 = 0;
          v100 = sub_1C477672C((uint64_t)&v1097, v99);
          if (v1098 == v1097)
            v101 = (uint64_t *)((char *)&v1099 + 4);
          else
            v101 = &v1099;
          if (v100 != (_QWORD *)((char *)v1098 + 8 * *(unsigned int *)v101))
          {
            v102 = *(_DWORD *)(v22 + 48);
            if (v102)
            {
              v103 = *(_QWORD *)(v99 + 40);
              v104 = *(_QWORD *)(v22 + 32);
              v105 = v102 - 1;
              v106 = ((v103 >> 4) ^ (v103 >> 9)) & (v102 - 1);
              v107 = *(_QWORD *)(v104 + 16 * v106);
              if (v103 == v107)
              {
LABEL_196:
                if (*(_QWORD *)(v104 + 16 * v106 + 8))
                  goto LABEL_593;
              }
              else
              {
                v108 = 1;
                while (v107 != -4096)
                {
                  v109 = v106 + v108++;
                  v106 = v109 & v105;
                  v107 = *(_QWORD *)(v104 + 16 * v106);
                  if (v103 == v107)
                    goto LABEL_196;
                }
              }
            }
            continue;
          }
          v110 = *(unsigned __int8 *)(v99 + 16);
          v111 = (v110 - 33);
          if (v111 > 0x37)
            continue;
          if (((1 << (v110 - 33)) & 0x8000000000041) != 0)
          {
            v112 = *(_QWORD *)(v99 + 64);
            if (v112 && (*(_BYTE *)(v112 + 17) & 0x30) != 0)
              continue;
            v113 = *(_DWORD *)(v99 + 20);
            if (v113 < 0
              && (v122 = v99 - 32 * (v113 & 0x7FFFFFF),
                  v125 = *(_QWORD *)(v122 - 8),
                  v123 = v122 - 8,
                  (v124 = v125) != 0))
            {
              v126 = -v124;
              while (1)
              {
                v127 = *(_DWORD *)(*(_QWORD *)(v123 + v126) + 8);
                v838 = v127 > 7;
                v128 = (1 << v127) & 0x83;
                if (v838 || v128 == 0)
                  break;
                v126 += 16;
                if (!v126)
                  goto LABEL_206;
              }
            }
            else
            {
LABEL_206:
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v99, 45) & 1) != 0
                || (llvm::CallBase::hasFnAttrOnCalledFunction(v99, 44) & 1) != 0)
              {
                continue;
              }
              v110 = *(unsigned __int8 *)(v99 + 16);
            }
          }
          else
          {
            if (v111 == 27)
            {
              if ((*(_WORD *)(v99 + 18) & 0x301) == 0)
                continue;
              v110 = 60;
LABEL_226:
              if (!m || v110 != 60)
              {
                if (m && v110 == 61)
                {
                  v116 = 1;
                  goto LABEL_234;
                }
                v93 = 0;
                if (!m || (v110 - 66) < 0xFFFFFFFE)
                  goto LABEL_594;
              }
LABEL_233:
              v116 = 0;
              goto LABEL_234;
            }
            if (((1 << (v110 - 33)) & 0x808001D0000010) == 0)
              continue;
          }
          if (v110 != 84)
            goto LABEL_226;
          v114 = *(_QWORD *)(v99 - 32);
          if (!v114)
            goto LABEL_593;
          if (!*(_BYTE *)(v114 + 16)
            && *(_QWORD *)(v114 + 24) == *(_QWORD *)(v99 + 72)
            && (*(_BYTE *)(v114 + 33) & 0x20) != 0)
          {
            v115 = *(_DWORD *)(*(_QWORD *)(m - 56) + 36);
            if ((v115 - 2471) < 8 || (v115 - 2703) < 2 || (v115 - 1996) < 2)
              continue;
          }
          if (*(_BYTE *)(v114 + 16)
            || *(_QWORD *)(v114 + 24) != *(_QWORD *)(v99 + 72)
            || (*(_BYTE *)(v114 + 33) & 0x20) == 0)
          {
            goto LABEL_593;
          }
          v116 = 0;
          v117 = *(_DWORD *)(*(_QWORD *)(m - 56) + 36);
          if (v117 != 2142 && v117 != 2144)
          {
            if (sub_1C55A9F2C(*(_DWORD *)(*(_QWORD *)(m - 56) + 36)))
            {
              v116 = 2;
              goto LABEL_234;
            }
            if ((v117 - 2784) < 3)
              goto LABEL_233;
            if ((v117 - 2630) >= 0x20)
            {
              if ((v117 - 2841) < 0xFFFFFFFD)
              {
                v93 = 0;
                goto LABEL_594;
              }
              v116 = 0;
            }
            else
            {
              v116 = 3;
            }
          }
LABEL_234:
          v118 = *(_DWORD *)(v99 + 20);
          if ((v118 & 0x40000000) != 0)
            v119 = *(_QWORD *)(v99 - 8);
          else
            v119 = v99 - 32 * (v118 & 0x7FFFFFF);
          UnderlyingObject = llvm::getUnderlyingObject(*(llvm **)(v119 + 32 * v116), (const llvm::Value *)6);
          if (*(_QWORD *)UnderlyingObject)
            v121 = *(_DWORD *)(*(_QWORD *)UnderlyingObject + 8) == 15;
          else
            v121 = 0;
          if (!v121)
            goto LABEL_593;
        }
      }
    }
    v88 = (uint64_t *)v1019;
    if (BYTE2(v1005))
    {
      if (!(_DWORD)v1020)
        goto LABEL_593;
      v89 = 0;
      v90 = (uint64_t *)((char *)v1019 + 8 * v1020);
      do
      {
        while (1)
        {
          v91 = *v88;
          v92 = sub_1C560DA80((uint64_t)&v1006, *(void **)(*v88 + 40));
          if (*((_DWORD *)v1014 + 8 * v92 + 4))
            break;
          sub_1C566720C(v91, &v1120, &v1035, (uint64_t)&v1006);
          ++v88;
          v89 = 1;
          if (v88 == v90)
            goto LABEL_264;
        }
        if (BYTE1(v1005))
          goto LABEL_593;
        sub_1C566720C(v91, &v1120, &v1035, (uint64_t)&v1006);
        ++v88;
      }
      while (v88 != v90);
      if ((v89 & 1) == 0)
        goto LABEL_593;
    }
    else
    {
      if (!(_DWORD)v1020)
        goto LABEL_587;
      v130 = 8 * v1020;
      do
      {
        v131 = *v88++;
        sub_1C566720C(v131, &v1120, &v1035, 0);
        v130 -= 8;
      }
      while (v130);
    }
LABEL_264:
    v132 = v1020;
    if (!(_DWORD)v1020)
      goto LABEL_587;
    v133 = (uint64_t *)v1019;
    v134 = *(_QWORD *)v1019;
    v979 = *(_QWORD *)v1019;
    if (!sub_1C5E9D8F8(*(_QWORD *)v1019)
      || ((v135 = *(_DWORD *)(v134 + 20), (v135 & 0x40000000) != 0)
        ? (v136 = *(uint64_t **)(v134 - 8))
        : (v136 = (uint64_t *)(v134 - 32 * (v135 & 0x7FFFFFF))),
          (v137 = *v136) == 0
       || *(_BYTE *)(v137 + 16) != 83
       || (v138 = *(_DWORD *)(v137 + 20) & 0x7FFFFFF, !(_DWORD)v138)))
    {
      v162 = &v133[v132];
      goto LABEL_327;
    }
    v139 = 0;
    v140 = 0;
    v141 = 32 * v138;
    do
    {
      v142 = *(_DWORD *)(v137 + 20);
      if ((v142 & 0x40000000) != 0)
        v143 = *(_QWORD *)(v137 - 8);
      else
        v143 = v137 - 32 * (v142 & 0x7FFFFFF);
      v144 = *(_QWORD *)(v143 + v140);
      if (v144)
        v145 = *(_BYTE *)(v144 + 16) == 16;
      else
        v145 = 0;
      if (v145)
      {
        v146 = (_QWORD *)(v144 + 24);
        if (*(_DWORD *)(v144 + 32) >= 0x41u)
          v146 = (_QWORD *)*v146;
        if (!*v146)
        {
          if ((v142 & 0x40000000) != 0)
            v147 = *(_QWORD *)(v137 - 8);
          else
            v147 = v137 - 32 * (v142 & 0x7FFFFFF);
          v148 = *(llvm::BasicBlock **)(v147 + 32 * *(unsigned int *)(v137 + 60) + v139);
          v149 = *(_QWORD *)(v137 + 40);
          if (llvm::BasicBlock::getUniqueSuccessor(v148) == v149)
          {
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1040, (uint64_t)v148);
          }
          else
          {
            v151 = (_QWORD *)*((_QWORD *)v148 + 5);
            if (v151 != (_QWORD *)((char *)v148 + 40))
            {
              v152 = v151 - 3;
              if (!v151)
                v152 = 0;
              v153 = *((unsigned __int8 *)v152 + 16) - 40;
              if (v153 < 0xFFFFFFF5)
                v152 = 0;
              if (v151)
              {
                v154 = *((_BYTE *)v152 + 16) == 30 && v153 >= 0xFFFFFFF5;
                if (v154 && (*((_DWORD *)v152 + 5) & 0x7FFFFFF) == 3)
                {
                  v155 = *(v152 - 12);
                  if (*(unsigned __int8 *)(v155 + 16) <= 0x1Bu)
                    v155 = 0;
                  *(_QWORD *)&v1064 = v155;
                  v156 = ***(_QWORD ***)(*((_QWORD *)v148 + 7) + 40);
                  if (*(v152 - 4) == v149)
                  {
                    v157 = *(llvm::ValueHandleBase **)(v156 + 1568);
                    if (!v157)
                    {
                      v161 = *(llvm::ConstantInt **)(v156 + 1888);
                      LODWORD(__src) = *(_DWORD *)(v156 + 1896) >> 8;
                      if (__src > 0x40)
                        llvm::APInt::initSlowCase((llvm::APInt *)&v1077, 0, 0);
                      else
                        v1077 = 0;
                      v157 = llvm::ConstantInt::get(v161, (llvm::LLVMContext *)&v1077, v150);
                      if (__src >= 0x41 && v1077)
                        MEMORY[0x1CAA32F9C](v1077, 0x1000C8000313F17);
                      *(_QWORD *)(v156 + 1568) = v157;
                    }
                  }
                  else
                  {
                    v157 = *(llvm::ValueHandleBase **)(v156 + 1560);
                    if (!v157)
                    {
                      v158 = *(llvm::ConstantInt **)(v156 + 1888);
                      v159 = *(_DWORD *)(v156 + 1896);
                      LODWORD(__src) = v159 >> 8;
                      if (v159 >> 8 > 0x40)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v1077, 1, 0);
                      }
                      else
                      {
                        if (v159 <= 0xFF)
                          v160 = 0;
                        else
                          v160 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v159);
                        v1077 = (void *)(v160 & 1);
                      }
                      v157 = llvm::ConstantInt::get(v158, (llvm::LLVMContext *)&v1077, v150);
                      if (__src >= 0x41 && v1077)
                        MEMORY[0x1CAA32F9C](v1077, 0x1000C8000313F17);
                      *(_QWORD *)(v156 + 1560) = v157;
                    }
                  }
                  sub_1C5667838((uint64_t *)&v1045, &v1064)[1] = v157;
                }
              }
            }
          }
        }
      }
      v140 += 32;
      v139 += 8;
    }
    while (v141 != v140);
    if ((_DWORD)v1020)
    {
      v133 = (uint64_t *)v1019;
      v162 = (uint64_t *)((char *)v1019 + 8 * v1020);
      do
      {
LABEL_327:
        v163 = *v133;
        if (sub_1C5E9D8F8(*v133))
        {
          v164 = *(_DWORD *)(v163 + 20);
          v165 = (v164 & 0x40000000) != 0 ? *(uint64_t **)(v163 - 8) : (uint64_t *)(v163 - 32 * (v164 & 0x7FFFFFF));
          v166 = *v165;
          v167 = *(unsigned __int8 *)(*v165 + 16);
          if (v166 && v167 == 16)
          {
            v169 = (_QWORD *)(v166 + 24);
            if (*(_DWORD *)(v166 + 32) >= 0x41u)
              v169 = (_QWORD *)*v169;
            if (!*v169)
            {
              v170 = *(void **)(v163 + 40);
              v171 = sub_1C560DA80((uint64_t)&v1006, v170);
              v172 = (char *)v1014 + 32 * v171;
              v1077 = *(void **)v172;
              __src = &v1080;
              v1079 = 0x100000000;
              if (*((_DWORD *)v172 + 4))
              {
                sub_1C560EB98((uint64_t)&__src, (uint64_t)(v172 + 8));
                v174 = (int *)__src;
                if ((_DWORD)v1079)
                {
                  v175 = 0;
                  v176 = 0;
                  v177 = 0;
                  v178 = v1013;
                  v179 = (char *)__src + 4 * v1079;
                  v993 = v1013;
                  while (1)
                  {
                    v180 = (char *)v1014 + 32 * (*v174 & 0xFFFFFF);
                    v181 = *(_QWORD *)(*(_QWORD *)v180 + 40);
                    if (v181 == *(_QWORD *)v180 + 40)
                      goto LABEL_392;
                    v182 = v181 - 24;
                    if (!v181)
                      v182 = 0;
                    v183 = *(unsigned __int8 *)(v182 + 16) - 40;
                    if (v183 < 0xFFFFFFF5)
                      v182 = 0;
                    if (!v181)
                      goto LABEL_392;
                    if (*(_BYTE *)(v182 + 16) != 30 || v183 < 0xFFFFFFF5)
                      goto LABEL_392;
                    v185 = llvm::DominatorTreeBase<llvm::BasicBlock,true>::dominates(v178, (uint64_t)v170, *(_QWORD *)(v182 - 32));
                    v186 = *(_QWORD *)v180;
                    if (v185)
                    {
                      if (v176 >= (unsigned __int8 *)v175)
                      {
                        v187 = (v176 - v177) >> 4;
                        v188 = v187 + 1;
                        if ((unint64_t)(v187 + 1) >> 60)
                          goto LABEL_1704;
                        if ((v175 - (char *)v177) >> 3 > v188)
                          v188 = (v175 - (char *)v177) >> 3;
                        if ((unint64_t)(v175 - (char *)v177) >= 0x7FFFFFFFFFFFFFF0)
                          v189 = 0xFFFFFFFFFFFFFFFLL;
                        else
                          v189 = v188;
                        if (v189)
                        {
                          if (v189 >> 60)
                            goto LABEL_1705;
                          v190 = (char *)operator new(16 * v189);
                        }
                        else
                        {
                          v190 = 0;
                        }
                        v193 = &v190[16 * v187];
                        *(_QWORD *)v193 = v186;
                        v193[8] = 1;
                        if (v176 != v177)
                        {
                          v194 = &v190[16 * v187];
                          v178 = v993;
                          do
                          {
                            *((_OWORD *)v194 - 1) = *((_OWORD *)v176 - 1);
                            v194 -= 16;
                            v176 -= 16;
                          }
                          while (v176 != v177);
                          goto LABEL_388;
                        }
                        goto LABEL_389;
                      }
                      *(_QWORD *)v176 = v186;
                      v176[8] = 1;
                    }
                    else
                    {
                      if (v176 >= (unsigned __int8 *)v175)
                      {
                        v191 = (v176 - v177) >> 4;
                        v192 = v191 + 1;
                        if ((unint64_t)(v191 + 1) >> 60)
                          goto LABEL_1704;
                        if ((v175 - (char *)v177) >> 3 > v192)
                          v192 = (v175 - (char *)v177) >> 3;
                        if ((unint64_t)(v175 - (char *)v177) >= 0x7FFFFFFFFFFFFFF0)
                          v189 = 0xFFFFFFFFFFFFFFFLL;
                        else
                          v189 = v192;
                        if (v189)
                        {
                          if (v189 >> 60)
                            goto LABEL_1705;
                          v190 = (char *)operator new(16 * v189);
                        }
                        else
                        {
                          v190 = 0;
                        }
                        v193 = &v190[16 * v191];
                        *(_QWORD *)v193 = v186;
                        v193[8] = 0;
                        if (v176 != v177)
                        {
                          v194 = &v190[16 * v191];
                          v178 = v993;
                          do
                          {
                            *((_OWORD *)v194 - 1) = *((_OWORD *)v176 - 1);
                            v194 -= 16;
                            v176 -= 16;
                          }
                          while (v176 != v177);
LABEL_388:
                          v195 = v177;
                          v177 = (unsigned __int8 *)v194;
LABEL_390:
                          v175 = &v190[16 * v189];
                          v176 = (unsigned __int8 *)(v193 + 16);
                          if (v195)
                            operator delete(v195);
                          goto LABEL_392;
                        }
LABEL_389:
                        v195 = v176;
                        v177 = (unsigned __int8 *)v193;
                        v178 = v993;
                        goto LABEL_390;
                      }
                      *(_QWORD *)v176 = v186;
                      v176[8] = 0;
                    }
                    v176 += 16;
LABEL_392:
                    if (++v174 == (int *)v179)
                    {
                      v174 = (int *)__src;
                      goto LABEL_395;
                    }
                  }
                }
                v177 = 0;
                v176 = 0;
LABEL_395:
                if (v174 != &v1080)
                  free(v174);
                for (n = v177; n != v176; n += 16)
                {
                  v197 = *(_QWORD *)n;
                  v198 = *(_QWORD *)(*(_QWORD *)n + 40);
                  if (v198 != *(_QWORD *)n + 40)
                  {
                    v199 = v198 - 24;
                    if (!v198)
                      v199 = 0;
                    v200 = *(unsigned __int8 *)(v199 + 16) - 40;
                    if (v200 < 0xFFFFFFF5)
                      v199 = 0;
                    if (v198)
                    {
                      v201 = *(_BYTE *)(v199 + 16) == 30 && v200 >= 0xFFFFFFF5;
                      if (v201 && (*(_DWORD *)(v199 + 20) & 0x7FFFFFF) == 3)
                      {
                        v202 = n[8];
                        v203 = *(_QWORD *)(v199 - 96);
                        if (*(unsigned __int8 *)(v203 + 16) <= 0x1Bu)
                          v203 = 0;
                        *(_QWORD *)&v1064 = v203;
                        v204 = ***(_QWORD ***)(*(_QWORD *)(v197 + 56) + 40);
                        if (v202)
                        {
                          v205 = *(llvm::ValueHandleBase **)(v204 + 1568);
                          if (!v205)
                          {
                            v206 = *(llvm::ConstantInt **)(v204 + 1888);
                            LODWORD(__src) = *(_DWORD *)(v204 + 1896) >> 8;
                            if (__src > 0x40)
                              llvm::APInt::initSlowCase((llvm::APInt *)&v1077, 0, 0);
                            else
                              v1077 = 0;
                            v205 = llvm::ConstantInt::get(v206, (llvm::LLVMContext *)&v1077, v173);
                            if (__src >= 0x41 && v1077)
                              MEMORY[0x1CAA32F9C](v1077, 0x1000C8000313F17);
                            *(_QWORD *)(v204 + 1568) = v205;
                          }
                        }
                        else
                        {
                          v205 = *(llvm::ValueHandleBase **)(v204 + 1560);
                          if (!v205)
                          {
                            v207 = *(llvm::ConstantInt **)(v204 + 1888);
                            v208 = *(_DWORD *)(v204 + 1896);
                            LODWORD(__src) = v208 >> 8;
                            if (v208 >> 8 > 0x40)
                            {
                              llvm::APInt::initSlowCase((llvm::APInt *)&v1077, 1, 0);
                            }
                            else
                            {
                              if (v208 <= 0xFF)
                                v209 = 0;
                              else
                                v209 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v208);
                              v1077 = (void *)(v209 & 1);
                            }
                            v205 = llvm::ConstantInt::get(v207, (llvm::LLVMContext *)&v1077, v173);
                            if (__src >= 0x41 && v1077)
                              MEMORY[0x1CAA32F9C](v1077, 0x1000C8000313F17);
                            *(_QWORD *)(v204 + 1560) = v205;
                          }
                        }
                        sub_1C5667838((uint64_t *)&v1045, &v1064)[1] = v205;
                      }
                    }
                  }
                }
                if (v177)
                  operator delete(v177);
              }
            }
          }
        }
        ++v133;
      }
      while (v133 != v162);
    }
    *(_QWORD *)&v1064 = &v1067;
    *((_QWORD *)&v1064 + 1) = &v1067;
    v1065 = 32;
    LODWORD(v1066) = 0;
    v1049 = (char *)&v1051 + 8;
    v1050[0] = (char *)&v1051 + 8;
    v1050[1] = (void *)32;
    LODWORD(v1051) = 0;
    v1077 = &v1079;
    __src = (void *)0x3200000000;
    v211 = *v1048;
    v210 = v1048[1];
    if (v210 == *v1048)
      goto LABEL_576;
    do
    {
      v212 = *(_QWORD *)(v210 - 8);
      v210 -= 8;
      v213 = v212 + 40;
      for (ii = *(_QWORD *)(v212 + 48); ii != v213; ii = *(_QWORD *)(ii + 8))
      {
        if (ii)
          v215 = ii - 24;
        else
          v215 = 0;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1049, v215);
        v216 = sub_1C477672C((uint64_t)&v1064, v215);
        if (*((_QWORD *)&v1064 + 1) == (_QWORD)v1064)
          v217 = (uint64_t *)((char *)&v1065 + 4);
        else
          v217 = &v1065;
        if (v216 == (_QWORD *)(*((_QWORD *)&v1064 + 1) + 8 * *(unsigned int *)v217))
        {
          v218 = __src;
          if (__src >= (unint64_t)HIDWORD(__src))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1077, (uint64_t)&v1079, __src + 1, 8);
            v218 = __src;
          }
          *((_QWORD *)v1077 + v218) = v215;
          LODWORD(__src) = (_DWORD)__src + 1;
        }
      }
    }
    while (v210 != v211);
    v219 = __src;
    if (!(_DWORD)__src)
      goto LABEL_576;
    v220 = 0;
    v221 = 0;
LABEL_456:
    v222 = *((_QWORD *)v1077 + v219 - 1);
    LODWORD(__src) = v219 - 1;
    v223 = sub_1C477672C((uint64_t)&v1064, v222);
    if (*((_QWORD *)&v1064 + 1) == (_QWORD)v1064)
      v224 = (uint64_t *)((char *)&v1065 + 4);
    else
      v224 = &v1065;
    if (v223 != (_QWORD *)(*((_QWORD *)&v1064 + 1) + 8 * *(unsigned int *)v224))
      goto LABEL_551;
    if (*(_BYTE *)(v222 + 16) == 59)
    {
      v225 = 0;
LABEL_462:
      v226 = v220;
      v227 = v225;
      if (!v221)
      {
LABEL_541:
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1022, v222);
        v225 = v227;
        v220 = v226;
        goto LABEL_546;
      }
LABEL_463:
      v228 = sub_1C477672C((uint64_t)&v1027, v222);
      if (v1028 == v1027)
        v229 = (uint64_t *)((char *)&v1029 + 4);
      else
        v229 = &v1029;
      if (v228 != (_QWORD *)((char *)v1028 + 8 * *(unsigned int *)v229))
      {
        *v228 = -2;
        ++v1030;
      }
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1022, v222);
      goto LABEL_549;
    }
    if (v1046)
    {
      v230 = (v1046 - 1) & ((v222 >> 4) ^ (v222 >> 9));
      v231 = *(_QWORD *)(v1045 + 16 * v230);
      if (v222 == v231)
      {
LABEL_471:
        if (v230 != v1046)
          goto LABEL_544;
      }
      else
      {
        v270 = 1;
        while (v231 != -4096)
        {
          v271 = v230 + v270++;
          v230 = v271 & (v1046 - 1);
          v231 = *(_QWORD *)(v1045 + 16 * v230);
          if (v222 == v231)
            goto LABEL_471;
        }
      }
    }
    v232 = sub_1C477672C((uint64_t)&v1120, v222);
    if (v1121 == v1120)
      v233 = (uint64_t *)((char *)&v1122 + 4);
    else
      v233 = &v1122;
    if (v232 == (_QWORD *)((char *)v1121 + 8 * *(unsigned int *)v233))
      goto LABEL_550;
    v234 = *(_QWORD *)(v222 + 8);
    if (!v234)
      goto LABEL_544;
    v225 = 0;
    v235 = *(_QWORD *)(v222 + 8);
    do
    {
      v236 = *(_QWORD *)(v235 + 24);
      if (v236)
        v237 = *(unsigned __int8 *)(v236 + 16) >= 0x1Cu;
      else
        v237 = 0;
      if (v237)
      {
        v238 = sub_1C477672C((uint64_t)&v1064, *(_QWORD *)(v235 + 24));
        v239 = *((_QWORD *)&v1064 + 1) == (_QWORD)v1064 ? (uint64_t *)((char *)&v1065 + 4) : &v1065;
        if (v238 != (_QWORD *)(*((_QWORD *)&v1064 + 1) + 8 * *(unsigned int *)v239)
          && *(unsigned __int8 *)(v236 + 16) >= 0x1Cu)
        {
          v240 = sub_1C477672C((uint64_t)&v1064, v236);
          if (*((_QWORD *)&v1064 + 1) == (_QWORD)v1064)
            v241 = (uint64_t *)((char *)&v1065 + 4);
          else
            v241 = &v1065;
          if (v240 == (_QWORD *)(*((_QWORD *)&v1064 + 1) + 8 * *(unsigned int *)v241))
          {
            if (v221)
              goto LABEL_463;
            v225 = 1;
          }
          else
          {
            v242 = sub_1C477672C((uint64_t)&v1049, v236);
            if (v1050[0] == v1049)
              v243 = (void **)((char *)&v1050[1] + 4);
            else
              v243 = &v1050[1];
            if (v242 == (_QWORD *)((char *)v1050[0] + 8 * *(unsigned int *)v243))
              goto LABEL_462;
            v244 = sub_1C477672C((uint64_t)&v1022, v236);
            v245 = v1023 == v1022 ? (uint64_t *)((char *)&v1024 + 4) : &v1024;
            if (v244 != (_QWORD *)((char *)v1023 + 8 * *(unsigned int *)v245))
              goto LABEL_462;
            if (v979 != v236)
            {
              v246 = sub_1C477672C((uint64_t)&v1027, v236);
              v247 = v1028 == v1027 ? (uint64_t *)((char *)&v1029 + 4) : &v1029;
              if (v246 == (_QWORD *)((char *)v1028 + 8 * *(unsigned int *)v247))
                goto LABEL_462;
            }
          }
        }
      }
      v235 = *(_QWORD *)(v235 + 8);
    }
    while (v235);
    LOBYTE(v226) = v225;
    while (1)
    {
      while (1)
      {
        v248 = *(_QWORD *)(v234 + 24);
        if (v248 && *(unsigned __int8 *)(v248 + 16) >= 0x1Cu)
        {
          v250 = sub_1C477672C((uint64_t)&v1064, *(_QWORD *)(v234 + 24));
          v251 = *((_QWORD *)&v1064 + 1) == (_QWORD)v1064 ? (uint64_t *)((char *)&v1065 + 4) : &v1065;
          if (v250 == (_QWORD *)(*((_QWORD *)&v1064 + 1) + 8 * *(unsigned int *)v251)
            && *(unsigned __int8 *)(v248 + 16) >= 0x1Cu)
          {
            break;
          }
        }
LABEL_537:
        v234 = *(_QWORD *)(v234 + 8);
        if (!v234)
        {
          v220 |= v226;
          if ((_BYTE)v226)
          {
            v225 = 1;
            goto LABEL_462;
          }
LABEL_544:
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1027, v222);
          if (v221)
            goto LABEL_550;
          v225 = 0;
LABEL_546:
          v260 = v1033;
          if (v1033 >= (unint64_t)HIDWORD(v1033))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1032, (uint64_t)v1034, v1033 + 1, 8);
            v260 = v1033;
          }
          *((_QWORD *)v1032 + v260) = v222;
          LODWORD(v1033) = v1033 + 1;
LABEL_549:
          if (!v225)
LABEL_550:
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1064, v222);
LABEL_551:
          v219 = __src;
          if ((_DWORD)__src || !v220)
          {
LABEL_569:
            if (!v219)
              goto LABEL_576;
            goto LABEL_456;
          }
          v262 = *v1048;
          v261 = v1048[1];
          if (v261 != *v1048)
          {
            do
            {
              v263 = *(_QWORD *)(v261 - 8);
              v261 -= 8;
              v264 = v263 + 40;
              for (jj = *(_QWORD *)(v263 + 48); jj != v264; jj = *(_QWORD *)(jj + 8))
              {
                if (jj)
                  v266 = jj - 24;
                else
                  v266 = 0;
                v267 = sub_1C477672C((uint64_t)&v1064, v266);
                if (*((_QWORD *)&v1064 + 1) == (_QWORD)v1064)
                  v268 = (uint64_t *)((char *)&v1065 + 4);
                else
                  v268 = &v1065;
                if (v267 == (_QWORD *)(*((_QWORD *)&v1064 + 1) + 8 * *(unsigned int *)v268))
                {
                  v269 = __src;
                  if (__src >= (unint64_t)HIDWORD(__src))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1077, (uint64_t)&v1079, __src + 1, 8);
                    v269 = __src;
                  }
                  *((_QWORD *)v1077 + v269) = v266;
                  LODWORD(__src) = (_DWORD)__src + 1;
                }
              }
            }
            while (v261 != v262);
            v220 = 0;
            v221 = 1;
            v219 = __src;
            goto LABEL_569;
          }
LABEL_576:
          if ((_DWORD)v1033)
          {
            v272 = (char *)v1032 + 8 * v1033 - 8;
            if (v1032 < v272)
            {
              v273 = (char *)v1032 + 8;
              do
              {
                v274 = *((_QWORD *)v273 - 1);
                *((_QWORD *)v273 - 1) = *(_QWORD *)v272;
                *(_QWORD *)v272 = v274;
                v272 -= 8;
                v154 = v273 >= v272;
                v273 += 8;
              }
              while (!v154);
            }
          }
          if (v1077 != &v1079)
            free(v1077);
          if (v1050[0] != v1049)
            free(v1050[0]);
          if (*((_QWORD *)&v1064 + 1) != (_QWORD)v1064)
            free(*((void **)&v1064 + 1));
LABEL_587:
          if (__p)
          {
            v93 = 1;
            goto LABEL_594;
          }
          if ((_DWORD)v1103)
          {
            v275 = dword_1ED809140;
            v276 = dword_1ED809200;
            v277 = dword_1ED8092C0;
            v1049 = &unk_1E8172160;
            v1050[0] = &v1005;
            *(_QWORD *)&v1051 = &v1049;
            v1143 = &off_1E81721A8;
            v1144 = (uint64_t)&v1005;
            v1145 = v982;
            v1146 = &v1143;
            v1116 = &off_1E81721F0;
            v1117 = (uint64_t)sub_1C56679E0;
            v1119 = &v1116;
            sub_1C5667A88(&v1077, (uint64_t)&v1049, (uint64_t)&v1143, (uint64_t)&v1116, v1047);
            if (v1119 == &v1116)
            {
              v278 = (void (**)(void))((char *)v1116 + 32);
LABEL_1598:
              (*v278)();
            }
            else if (v1119)
            {
              v278 = (void (**)(void))((char *)*v1119 + 40);
              goto LABEL_1598;
            }
            if (v1146 == &v1143)
            {
              v932 = (void (**)(void))((char *)v1143 + 32);
LABEL_1603:
              (*v932)();
            }
            else if (v1146)
            {
              v932 = (void (**)(void))((char *)*v1146 + 40);
              goto LABEL_1603;
            }
            if ((void **)v1051 == &v1049)
            {
              v933 = (void (**)(void))((char *)v1049 + 32);
LABEL_1608:
              (*v933)();
            }
            else if ((_QWORD)v1051)
            {
              v933 = (void (**)(void))(*(_QWORD *)v1051 + 40);
              goto LABEL_1608;
            }
            if ((_DWORD)v1106)
            {
              v934 = (char *)v1105;
              v935 = (char *)v1105 + 8 * v1106;
              do
              {
                for (kk = *(_QWORD *)(*(_QWORD *)v934 + 8); kk; kk = *(_QWORD *)(kk + 8))
                  sub_1C5667B98(&v1077, *(_QWORD *)(kk + 24));
                v934 += 8;
              }
              while (v934 != v935);
            }
            if (v1077
              && ((v937 = (100 * v1079 / (unint64_t)v1077), v937 != 0xFFFFFFFF)
                ? (v938 = v937 > v275)
                : (v938 = 0),
                  v938))
            {
              v93 = 0;
            }
            else
            {
              v1147 = (unsigned __int8 *)&unk_1E8172160;
              v1148 = (uint64_t)&v1005;
              v1150 = (void **)&v1147;
              v1138 = &off_1E81721A8;
              v1139 = &v1005;
              v1140 = v982;
              v1141 = &v1138;
              v1114[0] = &off_1E81721F0;
              v1114[1] = sub_1C56679E0;
              v1115 = v1114;
              sub_1C5667A88(&v1064, (uint64_t)&v1147, (uint64_t)&v1138, (uint64_t)v1114, v1047);
              if (v1115 == v1114)
              {
                v939 = (void (**)(void))(v1114[0] + 32);
LABEL_1624:
                (*v939)();
              }
              else if (v1115)
              {
                v939 = (void (**)(void))(*v1115 + 40);
                goto LABEL_1624;
              }
              if (v1141 == &v1138)
              {
                v940 = (void (**)(void))(v1138 + 4);
LABEL_1629:
                (*v940)();
              }
              else if (v1141)
              {
                v940 = (void (**)(void))(*v1141 + 5);
                goto LABEL_1629;
              }
              if (v1150 == (void **)&v1147)
              {
                v941 = (void (**)(void))(v1147 + 32);
LABEL_1634:
                (*v941)();
              }
              else if (v1150)
              {
                v941 = (void (**)(void))((char *)*v1150 + 40);
                goto LABEL_1634;
              }
              v942 = *(_QWORD *)(*(_QWORD *)v1102 + 8);
              if (!v942)
                goto LABEL_1653;
              v943 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v942 + 24) + 40) + 56);
              v944 = v943 + 72;
              for (mm = *(_QWORD *)(v943 + 80); mm != v944; mm = *(_QWORD *)(mm + 8))
              {
                v946 = mm - 24;
                if (!mm)
                  v946 = 0;
                v947 = v946 + 40;
                for (nn = *(_QWORD *)(v946 + 48); nn != v947; nn = *(_QWORD *)(nn + 8))
                {
                  if (nn)
                    v949 = nn - 24;
                  else
                    v949 = 0;
                  sub_1C5667B98(&v1064, v949);
                }
              }
              if ((_QWORD)v1064)
              {
                v950 = (100 * v1065 / (unint64_t)v1064);
                if (v950 != 0xFFFFFFFF && v950 <= v276)
                {
                  v93 = *((_QWORD *)&v1064 + 1) - v1065 > v277;
                  goto LABEL_1661;
                }
LABEL_1653:
                v93 = 0;
              }
              else
              {
                v93 = 0;
              }
LABEL_1661:
              v955 = (uint64_t *)v1075[0];
              if ((uint64_t *)v1075[0] == &v1072)
              {
                v956 = 4;
                v955 = &v1072;
LABEL_1665:
                (*(void (**)(void))(*v955 + 8 * v956))();
              }
              else if (v1075[0])
              {
                v956 = 5;
                goto LABEL_1665;
              }
              v957 = v1071;
              if (v1071 == (char *)&v1068 + 8)
              {
                v958 = 4;
                v957 = (_QWORD *)&v1068 + 1;
LABEL_1670:
                (*(void (**)(void))(*v957 + 8 * v958))();
              }
              else if (v1071)
              {
                v958 = 5;
                goto LABEL_1670;
              }
              v959 = (llvm::BasicBlock **)v1068;
              if ((llvm::BasicBlock **)v1068 == &v1066)
              {
                v960 = 4;
                v959 = &v1066;
LABEL_1675:
                (*((void (**)(void))*v959 + v960))();
              }
              else if ((_QWORD)v1068)
              {
                v960 = 5;
                goto LABEL_1675;
              }
            }
            v961 = v1088;
            if (v1088 == &v1085)
            {
              v962 = 4;
              v961 = &v1085;
LABEL_1680:
              (*(void (**)(void))(*v961 + 8 * v962))();
            }
            else if (v1088)
            {
              v962 = 5;
              goto LABEL_1680;
            }
            v963 = v1084;
            if (v1084 == v1083)
            {
              v964 = 4;
              v963 = v1083;
LABEL_1685:
              (*(void (**)(void))(*v963 + 8 * v964))();
            }
            else if (v1084)
            {
              v964 = 5;
              goto LABEL_1685;
            }
            v965 = v1082;
            if (v1082 == &v1080)
            {
              v966 = 4;
              v965 = &v1080;
LABEL_1690:
              (*(void (**)(void))(*(_QWORD *)v965 + 8 * v966))();
            }
            else if (v1082)
            {
              v966 = 5;
              goto LABEL_1690;
            }
LABEL_594:
            if (v1098 != v1097)
              free(v1098);
            v57 = v974;
LABEL_597:
            if (v1121 != v1120)
              free(v1121);
LABEL_599:
            if (v1111 != v1113)
              free(v1111);
            if (v1108 != v1110)
              free(v1108);
            if (v1105 != v1107)
              free(v1105);
            if (v1102 != v1104)
              free(v1102);
            LOBYTE(v1005) = v93;
            v279 = sub_1C56671A8((uint64_t)&v1005);
            if ((_BYTE)v1005)
              v280 = v279 == 0;
            else
              v280 = 1;
            v12 = !v280;
            if (v280)
            {
LABEL_1535:
              v911 = (uint64_t)v1048;
              v1048 = 0;
              if (v911)
                sub_1C56674BC(v911);
              MEMORY[0x1CAA32FB4](v1045, 8);
              if (v1041 != v1040)
                free(v1041);
              if (v1036 != v1035)
                free(v1036);
              if (v1032 != v1034)
                free(v1032);
              if (v1028 != v1027)
                free(v1028);
              if (v1023 != v1022)
                free(v1023);
              if (v1019 != v1021)
                free(v1019);
              if ((v1017 & 1) == 0)
                MEMORY[0x1CAA32FB4](v1018, 8);
              v912 = (char *)v1014;
              if ((_DWORD)v1015)
              {
                v913 = 32 * v1015;
                do
                {
                  v914 = *(char **)&v912[v913 - 24];
                  if (&v912[v913 - 8] != v914)
                    free(v914);
                  v913 -= 32;
                }
                while (v913);
                v912 = (char *)v1014;
              }
              if (v912 != v1016)
                free(v912);
              v915 = v1010;
              if ((v1010 & 1) != 0)
              {
                v916 = 16;
                v917 = &v1011;
              }
              else
              {
                v916 = v1012;
                if (!v1012)
                  goto LABEL_1568;
                v917 = v1011;
              }
              v918 = 104 * v916;
              v919 = (void **)(v917 + 2);
              do
              {
                v920 = (uint64_t)*(v919 - 2);
                if (v920 != -4096 && v920 != -8192 && *v919 != *(v919 - 1))
                  free(*v919);
                v919 += 13;
                v918 -= 104;
              }
              while (v918);
              v915 = v1010;
LABEL_1568:
              v921 = &v1007;
              if ((v915 & 1) == 0)
                MEMORY[0x1CAA32FB4](v1011, 8);
              v922 = v1006;
              if ((v1006 & 1) != 0)
              {
                v923 = 16;
              }
              else
              {
                v923 = v1008;
                if (!v1008)
                {
LABEL_1579:
                  if ((v922 & 1) == 0)
                    MEMORY[0x1CAA32FB4](v1007, 8);
                  return v12;
                }
                v921 = v1007;
              }
              v924 = 104 * v923;
              v925 = (void **)(v921 + 2);
              do
              {
                v926 = (uint64_t)*(v925 - 2);
                if (v926 != -4096 && v926 != -8192 && *v925 != *(v925 - 1))
                  free(*v925);
                v925 += 13;
                v924 -= 104;
              }
              while (v924);
              v922 = v1006;
              goto LABEL_1579;
            }
            v281 = *(_BYTE *)(v57 + 28);
            v282 = *(_BYTE *)(v57 + 30);
            v283 = *(llvm::Type **)(v57 + 192);
            LOBYTE(v1064) = v281;
            BYTE1(v1064) = v282;
            *((_QWORD *)&v1064 + 1) = &v1005;
            v284 = sub_1C56671A8((uint64_t)&v1005);
            v285 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v284 + 40) + 56) + 80);
            if (v285)
              v286 = (llvm::BasicBlock *)(v285 - 24);
            else
              v286 = 0;
            v1065 = v284;
            v1066 = v286;
            v1067 = 0u;
            v1068 = 0u;
            v1069 = v971;
            v1070 = &v1074;
            v1071 = &v1074;
            v1072 = 16;
            LODWORD(v1073) = 0;
            v1076 = v283;
            v287 = *((_QWORD *)v286 + 7);
            v288 = **(_QWORD ***)v287;
            v1102 = (void *)1;
            for (i1 = 8; i1 != 136; i1 += 16)
              *(void **)((char *)&v1102 + i1) = (void *)-4096;
            v969 = v12;
            v1097 = (void *)1;
            for (i2 = 8; i2 != 136; i2 += 16)
              *(void **)((char *)&v1097 + i2) = (void *)-4096;
            v291 = (uint64_t *)(v287 + 72);
            v292 = *(uint64_t **)(v287 + 80);
            if (v292 == (uint64_t *)(v287 + 72))
            {
LABEL_632:
              v293 = 0;
            }
            else
            {
              while (1)
              {
                v293 = (uint64_t)(v292 - 3);
                if (v292)
                  v294 = v292 - 3;
                else
                  v294 = 0;
                v295 = v294[5];
                if (v295)
                  v296 = v295 - 24;
                else
                  v296 = 0;
                if (*(unsigned __int8 *)(v296 + 16) - 29 >= 0xB)
                  v296 = 0;
                if (*(_BYTE *)(v296 + 16) == 29)
                  break;
                v292 = (uint64_t *)v292[1];
                if (v292 == v291)
                  goto LABEL_632;
              }
            }
            if (*v291)
              v297 = *v291 - 24;
            else
              v297 = 0;
            if (!v293)
              v293 = v297;
            v975 = (char *)v293;
            v298 = *((_QWORD *)&v1064 + 1);
            v299 = *(_QWORD *)(*((_QWORD *)&v1064 + 1) + 4384);
            v300 = 4392;
            if (v299 == *(_QWORD *)(*((_QWORD *)&v1064 + 1) + 4376))
              v300 = 4396;
            v301 = *(unsigned int *)(*((_QWORD *)&v1064 + 1) + v300);
            v999 = v287;
            if ((_DWORD)v301)
            {
              v302 = 8 * v301;
              v303 = *(unint64_t **)(*((_QWORD *)&v1064 + 1) + 4384);
              while (*v303 >= 0xFFFFFFFFFFFFFFFELL)
              {
                ++v303;
                v302 -= 8;
                if (!v302)
                {
                  v304 = *((_QWORD *)&v1064 + 1);
                  goto LABEL_662;
                }
              }
            }
            else
            {
              v303 = *(unint64_t **)(*((_QWORD *)&v1064 + 1) + 4384);
            }
            v305 = (unint64_t *)(v299 + 8 * v301);
            v304 = *((_QWORD *)&v1064 + 1);
            if (v303 != v305)
            {
LABEL_647:
              v1049 = 0;
              v306 = (_BYTE *)*v303;
              v1049 = v306;
              if ((v306[23] & 0x10) != 0)
              {
                v307 = ***(_QWORD ***)v306;
                v308 = *(_QWORD *)(v307 + 152);
                v309 = *(unsigned int *)(v307 + 168);
                if (!(_DWORD)v309)
                  goto LABEL_654;
                LODWORD(v310) = (v309 - 1) & ((v306 >> 4) ^ (v306 >> 9));
                v311 = (_QWORD *)(v308 + 16 * v310);
                v312 = (_BYTE *)*v311;
                if ((_BYTE *)*v311 != v306)
                {
                  v313 = 1;
                  while (v312 != (_BYTE *)-4096)
                  {
                    v314 = v310 + v313++;
                    v310 = v314 & (v309 - 1);
                    v312 = *(_BYTE **)(v308 + 16 * v310);
                    if (v312 == v306)
                    {
                      v311 = (_QWORD *)(v308 + 16 * v310);
                      goto LABEL_655;
                    }
                  }
LABEL_654:
                  v311 = (_QWORD *)(v308 + 16 * v309);
                }
LABEL_655:
                v315 = (_QWORD *)v311[1];
                v318 = (void *)*v315;
                v317 = (char *)(v315 + 2);
                v316 = v318;
              }
              else
              {
                v316 = 0;
                v317 = &byte_1C871356D;
              }
              v1081[0] = 773;
              v1077 = v317;
              __src = v316;
              v1079 = (uint64_t)".visibility-section";
              v319 = operator new();
              *(_QWORD *)v319 = *v288 + 1600;
              *(_QWORD *)(v319 + 8) = 0;
              v320 = *(_DWORD *)(v319 + 20) & 0xC0000000;
              *(_DWORD *)(v319 + 16) = 22;
              *(_DWORD *)(v319 + 20) = v320;
              *(_QWORD *)(v319 + 24) = 0;
              *(_QWORD *)(v319 + 32) = 0;
              *(_QWORD *)(v319 + 40) = v319 + 40;
              *(_QWORD *)(v319 + 48) = v319 + 40;
              *(_QWORD *)(v319 + 56) = 0;
              llvm::Value::setName((uint64_t ***)v319, (uint64_t)&v1077);
              sub_1C564D720(&v1102, &v1049)[1] = v319;
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1070, v319);
              v321 = v303 + 1;
              while (v321 != v305)
              {
                v322 = *v321++;
                if (v322 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v303 = v321 - 1;
                  goto LABEL_647;
                }
              }
              v304 = *((_QWORD *)&v1064 + 1);
              v284 = v1065;
            }
LABEL_662:
            v1143 = &v1145;
            v1144 = 0xA00000000;
            v1002 = *(_QWORD *)(v284 + 40);
            v1004 = 0;
            v1077 = &v1079;
            __src = (void *)0xA00000000;
            v323 = *(uint64_t ***)(v304 + 4568);
            v325 = *v323;
            v324 = v323[1];
            if (v324 == *v323)
            {
              v1003 = 0;
            }
            else
            {
              v994 = v288;
              v1003 = 0;
              do
              {
                v326 = *--v324;
                v327 = sub_1C477672C(v298 + 4376, v326);
                v328 = *(_QWORD *)(v298 + 4384);
                if (v328 == *(_QWORD *)(v298 + 4376))
                  v329 = 4396;
                else
                  v329 = 4392;
                if (v327 != (_QWORD *)(v328 + 8 * *(unsigned int *)(v298 + v329)))
                {
                  v330 = (uint64_t *)sub_1C564FCF4((uint64_t)&v1102, *v324);
                  v331 = *((_DWORD *)v1069 + 4);
                  if (!v331)
                    goto LABEL_674;
                  v332 = *v324;
                  v333 = *v1069;
                  v334 = v331 - 1;
                  v335 = ((*v324 >> 4) ^ (*v324 >> 9)) & (v331 - 1);
                  v336 = *(_QWORD *)(*v1069 + 16 * (((*v324 >> 4) ^ (*v324 >> 9)) & v334));
                  if (*v324 != v336)
                  {
                    v337 = 1;
                    do
                    {
                      if (v336 == -4096)
                        goto LABEL_674;
                      v338 = v335 + v337++;
                      v335 = v338 & v334;
                      v336 = *(_QWORD *)(v333 + 16 * v335);
                    }
                    while (v332 != v336);
                  }
                  v339 = *(_QWORD **)(v333 + 16 * v335 + 8);
                  v1049 = v339;
                  if (v339)
                  {
                    if (*(_QWORD *)v339[4] != v332)
                    {
                      v351 = sub_1C6282DB0((uint64_t)&v1097, (uint64_t)v339);
                      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(*(_QWORD **)(v351 + 8), v330[1], (uint64_t)v1069);
                      goto LABEL_674;
                    }
                    v344 = sub_1C484358C((uint64_t)(v1069 + 6), 152, 3);
                    *(_OWORD *)v344 = 0u;
                    *(_OWORD *)(v344 + 16) = 0u;
                    *(_OWORD *)(v344 + 32) = 0u;
                    *(_OWORD *)(v344 + 48) = 0u;
                    *(_OWORD *)(v344 + 64) = 0u;
                    *(_OWORD *)(v344 + 80) = 0u;
                    *(_OWORD *)(v344 + 96) = 0u;
                    *(_OWORD *)(v344 + 112) = 0u;
                    *(_OWORD *)(v344 + 128) = 0u;
                    *(_QWORD *)(v344 + 144) = 0;
                    *(_QWORD *)(v344 + 56) = v344 + 88;
                    *(_QWORD *)(v344 + 64) = v344 + 88;
                    *(_DWORD *)(v344 + 72) = 8;
                    sub_1C6282E0C(&v1097, (uint64_t *)&v1049)[1] = v344;
                    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop((_QWORD *)v344, v330[1], (uint64_t)v1069);
                    while (1)
                    {
                      v339 = (_QWORD *)*v339;
                      if (!v339)
                        break;
                      v345 = sub_1C6282DB0((uint64_t)&v1097, (uint64_t)v339);
                      v346 = (char *)&v1098;
                      if ((v1097 & 1) == 0)
                        v346 = (char *)v1098;
                      v347 = v1099;
                      if ((v1097 & 1) != 0)
                        v347 = 8;
                      if (&v346[16 * v347] != (char *)v345)
                      {
                        *(_QWORD *)v344 = v339;
                        v349 = (unint64_t *)v339[2];
                        v348 = v339[3];
                        if ((unint64_t)v349 < v348)
                        {
                          *v349 = v344;
                          v350 = v349 + 1;
                          goto LABEL_728;
                        }
                        v991 = (llvm::SmallPtrSetImplBase *)v344;
                        v366 = (_QWORD *)v339[1];
                        v367 = v349 - v366;
                        v368 = v367 + 1;
                        if (!((unint64_t)(v367 + 1) >> 61))
                        {
                          v369 = v348 - (_QWORD)v366;
                          if (v369 >> 2 > v368)
                            v368 = v369 >> 2;
                          if ((unint64_t)v369 >= 0x7FFFFFFFFFFFFFF8)
                            v370 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v370 = v368;
                          if (!v370)
                          {
                            v371 = 0;
                            goto LABEL_723;
                          }
                          v986 = v349 - v366;
                          __pb = (unint64_t *)v339[2];
                          if (!(v370 >> 61))
                          {
                            v983 = v370;
                            v371 = (char *)operator new(8 * v370);
                            v370 = v983;
                            v367 = v986;
                            v349 = __pb;
LABEL_723:
                            v372 = (llvm::SmallPtrSetImplBase **)&v371[8 * v367];
                            *v372 = v991;
                            v350 = v372 + 1;
                            if (v349 != v366)
                            {
                              do
                              {
                                v373 = (llvm::SmallPtrSetImplBase *)*--v349;
                                *--v372 = v373;
                              }
                              while (v349 != v366);
                              v349 = (unint64_t *)v339[1];
                            }
                            v339[1] = v372;
                            v339[2] = v350;
                            v339[3] = &v371[8 * v370];
                            if (v349)
                            {
                              v374 = v350;
                              operator delete(v349);
                              v350 = v374;
                            }
LABEL_728:
                            v339[2] = v350;
                            goto LABEL_674;
                          }
LABEL_1705:
                          sub_1C4764EE4();
                        }
LABEL_1704:
                        abort();
                      }
                    }
                    v352 = v1069;
                    v354 = (unint64_t *)v1069[4];
                    v353 = v1069[5];
                    if ((unint64_t)v354 >= v353)
                    {
                      v990 = (llvm::SmallPtrSetImplBase *)v344;
                      v356 = (_QWORD *)v1069[3];
                      v357 = v354 - v356;
                      v358 = v357 + 1;
                      if ((unint64_t)(v357 + 1) >> 61)
                        goto LABEL_1704;
                      v359 = v353 - (_QWORD)v356;
                      if (v359 >> 2 > v358)
                        v358 = v359 >> 2;
                      if ((unint64_t)v359 >= 0x7FFFFFFFFFFFFFF8)
                        v358 = 0x1FFFFFFFFFFFFFFFLL;
                      __pa = v358;
                      if (v358)
                      {
                        v985 = (uint64_t)v1069;
                        if (v358 >> 61)
                          goto LABEL_1705;
                        v360 = (char *)operator new(8 * v358);
                        v357 = v354 - v356;
                        v352 = (_QWORD *)v985;
                      }
                      else
                      {
                        v360 = 0;
                      }
                      v361 = (llvm::SmallPtrSetImplBase **)&v360[8 * v357];
                      *v361 = v990;
                      v355 = v361 + 1;
                      if (v354 != v356)
                      {
                        do
                        {
                          v362 = (llvm::SmallPtrSetImplBase *)*--v354;
                          *--v361 = v362;
                        }
                        while (v354 != v356);
                        v354 = (unint64_t *)v352[3];
                      }
                      v352[3] = v361;
                      v352[4] = v355;
                      v352[5] = &v360[8 * __pa];
                      if (v354)
                      {
                        v363 = v354;
                        v364 = v352;
                        v365 = v355;
                        operator delete(v363);
                        v355 = v365;
                        v352 = v364;
                      }
                    }
                    else
                    {
                      *v354 = v344;
                      v355 = v354 + 1;
                    }
                    v352[4] = v355;
                  }
LABEL_674:
                  if (!v1003)
                    v1003 = (llvm::BasicBlock *)v330[1];
                  if (*v324 == v1002)
                    v1004 = (llvm::BasicBlock *)v330[1];
                  v340 = *v330;
                  v341 = v1144;
                  if (v1144 >= (unint64_t)HIDWORD(v1144))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1143, (uint64_t)&v1145, v1144 + 1, 8);
                    v341 = v1144;
                  }
                  *((_QWORD *)v1143 + v341) = v340;
                  LODWORD(v1144) = v1144 + 1;
                  v342 = v330[1];
                  v343 = __src;
                  if (__src >= (unint64_t)HIDWORD(__src))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1077, (uint64_t)&v1079, __src + 1, 8);
                    v343 = __src;
                  }
                  *((_QWORD *)v1077 + v343) = v342;
                  LODWORD(__src) = (_DWORD)__src + 1;
                }
              }
              while (v324 != v325);
              v375 = (uint64_t *)v1077;
              if ((_DWORD)__src)
              {
                v376 = *(uint64_t **)(v287 + 80);
                v377 = 8 * __src;
                v288 = v994;
                do
                {
                  v378 = (_QWORD *)*v375++;
                  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v291, v378);
                  v379 = *v376;
                  v378[3] = *v376;
                  v378[4] = v376;
                  *(_QWORD *)(v379 + 8) = v378 + 3;
                  *v376 = (uint64_t)(v378 + 3);
                  v377 -= 8;
                }
                while (v377);
                v375 = (uint64_t *)v1077;
              }
              else
              {
                v288 = v994;
              }
              if (v375 != &v1079)
                free(v375);
            }
            if (*(_BYTE *)(*((_QWORD *)&v1064 + 1) + 2))
            {
              v1077 = "tpp.visibility.return";
              v1081[0] = 259;
              v380 = operator new();
              *(_QWORD *)v380 = *v288 + 1600;
              *(_QWORD *)(v380 + 8) = 0;
              v381 = *(_DWORD *)(v380 + 20) & 0xC0000000;
              *(_DWORD *)(v380 + 16) = 22;
              *(_DWORD *)(v380 + 20) = v381;
              *(_QWORD *)(v380 + 24) = 0;
              *(_QWORD *)(v380 + 32) = 0;
              *(_QWORD *)(v380 + 40) = v380 + 40;
              *(_QWORD *)(v380 + 48) = v380 + 40;
              *(_QWORD *)(v380 + 56) = 0;
              llvm::Value::setName((uint64_t ***)v380, (uint64_t)&v1077);
              v1004 = (llvm::BasicBlock *)v380;
              llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v291, (_QWORD *)v380);
              v382 = *v291;
              *(_QWORD *)(v380 + 32) = v291;
              *(_QWORD *)(v380 + 24) = v382;
              *(_QWORD *)(v382 + 8) = v380 + 24;
              *v291 = v380 + 24;
            }
            v1077 = "tpp.entry";
            v1081[0] = 259;
            v383 = (uint64_t **)operator new();
            *v383 = (uint64_t *)(*v288 + 1600);
            v383[1] = 0;
            v384 = *((_DWORD *)v383 + 5) & 0xC0000000;
            *((_DWORD *)v383 + 4) = 22;
            *((_DWORD *)v383 + 5) = v384;
            v385 = v383 + 5;
            v383[3] = 0;
            v383[4] = 0;
            v383[5] = (uint64_t *)(v383 + 5);
            v383[6] = (uint64_t *)(v383 + 5);
            v383[7] = 0;
            llvm::Value::setName((uint64_t ***)v383, (uint64_t)&v1077);
            v386 = *(uint64_t **)(v287 + 80);
            llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v291, v383);
            v387 = (uint64_t *)*v386;
            v383[4] = v386;
            v383[3] = v387;
            v387[1] = (uint64_t)(v383 + 3);
            *v386 = (uint64_t)(v383 + 3);
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1070, (uint64_t)v383);
            if (BYTE1(v1064))
            {
              v998 = 0;
              v976 = (uint64_t)v1066;
            }
            else
            {
              v1077 = "tpp.return";
              v1081[0] = 259;
              v388 = operator new();
              *(_QWORD *)v388 = *v288 + 1600;
              *(_QWORD *)(v388 + 8) = 0;
              v389 = *(_DWORD *)(v388 + 20) & 0xC0000000;
              *(_DWORD *)(v388 + 16) = 22;
              *(_DWORD *)(v388 + 20) = v389;
              *(_QWORD *)(v388 + 24) = 0;
              *(_QWORD *)(v388 + 32) = 0;
              *(_QWORD *)(v388 + 40) = v388 + 40;
              *(_QWORD *)(v388 + 48) = v388 + 40;
              *(_QWORD *)(v388 + 56) = 0;
              llvm::Value::setName((uint64_t ***)v388, (uint64_t)&v1077);
              llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v291, (_QWORD *)v388);
              v390 = *v291;
              *(_QWORD *)(v388 + 32) = v291;
              *(_QWORD *)(v388 + 24) = v390;
              *(_QWORD *)(v390 + 8) = v388 + 24;
              *v291 = v388 + 24;
              v998 = v388;
              v976 = v388;
            }
            LODWORD(v1140) = 128;
            v391 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
            v1138 = (uint64_t (**)())v391;
            v1139 = 0;
            if ((_DWORD)v1140)
            {
              v392 = (unint64_t)v1140 << 6;
              v393 = v391 + 16;
              do
              {
                *v393 = 0;
                v393[1] = -4096;
                *(v393 - 2) = &unk_1E814DA10;
                *(v393 - 1) = 2;
                v393[2] = 0;
                v393 += 8;
                v392 -= 64;
              }
              while (v392);
            }
            LOBYTE(v1141) = 0;
            v1142 = 0;
            v1077 = &v1079;
            __src = (void *)0x3200000000;
            v394 = *(unsigned int *)(*((_QWORD *)&v1064 + 1) + 4208);
            if ((_DWORD)v394)
            {
              v395 = *(uint64_t *****)(*((_QWORD *)&v1064 + 1) + 4200);
              v396 = &v395[v394];
              while (1)
              {
                v397 = *v395;
                if (*((_BYTE *)*v395 + 16) == 59)
                {
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v397[5] + 5), *v395);
                  v398 = v397[3];
                  v399 = v397[4];
                  v400 = v397 + 3;
                  *v399 = (uint64_t *)v398;
                  v398[1] = (uint64_t *)v399;
                  v397[3] = 0;
                  v397[4] = 0;
                  v397[5] = v383;
                  *((_WORD *)v383 + 9) &= ~0x8000u;
                  if ((*((_BYTE *)v397 + 23) & 0x10) != 0)
                  {
                    v435 = v383[7];
                    if (v435)
                    {
                      v436 = (llvm::ValueSymbolTable *)v435[13];
                      if (v436)
                        llvm::ValueSymbolTable::reinsertValue(v436, (llvm::Value *)v397);
                    }
                  }
                  v401 = *v385;
                  v397[3] = (uint64_t **)*v385;
                  v397[4] = v385;
                  v401[1] = (uint64_t)v400;
                  *v385 = (uint64_t *)v400;
                }
                else
                {
                  v402 = *((_QWORD *)&v1064 + 1);
                  v403 = sub_1C477672C(*((_QWORD *)&v1064 + 1) + 3880, (uint64_t)*v395);
                  v404 = *(_QWORD *)(v402 + 3888);
                  v405 = 3896;
                  if (v404 == *(_QWORD *)(v402 + 3880))
                    v405 = 3900;
                  if (v403 != (_QWORD *)(v404 + 8 * *(unsigned int *)(v402 + v405)))
                  {
                    v406 = sub_1C564FCF4((uint64_t)&v1102, (uint64_t)v397[5]);
                    llvm::Instruction::clone((llvm::Instruction *)v397);
                    v408 = (uint64_t ***)v407;
                    v409 = *(_QWORD *)(v406 + 8);
                    *(_QWORD *)(v407 + 40) = v409;
                    *(_WORD *)(v409 + 18) &= ~0x8000u;
                    if ((*(_BYTE *)(v407 + 23) & 0x10) != 0)
                    {
                      v437 = *(_QWORD *)(v409 + 56);
                      if (v437)
                      {
                        v438 = *(llvm::ValueSymbolTable **)(v437 + 104);
                        if (v438)
                          llvm::ValueSymbolTable::reinsertValue(v438, (llvm::Value *)v408);
                      }
                    }
                    v410 = *(_QWORD *)(v409 + 40);
                    v408[3] = (uint64_t **)v410;
                    v408[4] = (uint64_t **)(v409 + 40);
                    *(_QWORD *)(v410 + 8) = v408 + 3;
                    *(_QWORD *)(v409 + 40) = v408 + 3;
                    *(_OWORD *)v1050 = 2uLL;
                    *(_QWORD *)&v1051 = v397;
                    if (v397 != (uint64_t ***)-8192 && v397 != (uint64_t ***)-4096 && v397)
                      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v1050);
                    v1049 = &unk_1E814DA10;
                    *((_QWORD *)&v1051 + 1) = &v1138;
                    v411 = sub_1C52E2ED8((uint64_t)&v1138, &v1049);
                    if ((_QWORD)v1051 != -8192 && (_QWORD)v1051 != -4096 && (_QWORD)v1051)
                    {
                      v412 = (unint64_t)v1050[0] & 0xFFFFFFFFFFFFFFF8;
                      *(void **)((unint64_t)v1050[0] & 0xFFFFFFFFFFFFFFF8) = v1050[1];
                      if (v1050[1])
                      {
                        *(_QWORD *)v1050[1] = *(_QWORD *)v1050[1] & 7 | v412;
                      }
                      else
                      {
                        v413 = v1051;
                        v414 = ***(int32x2_t ****)v1051;
                        v415 = (unint64_t)v414[303];
                        if (v415 <= v412)
                        {
                          v416 = v414[305].u32[0];
                          if (v415 + 16 * v416 > v412)
                          {
                            v417 = v416 - 1;
                            LODWORD(v418) = v417 & ((v1051 >> 4) ^ (v1051 >> 9));
                            v419 = (uint64_t *)(v415 + 16 * v418);
                            v420 = *v419;
                            if ((_QWORD)v1051 == *v419)
                            {
LABEL_769:
                              *v419 = -8192;
                              v414[304] = vadd_s32(v414[304], (int32x2_t)0x1FFFFFFFFLL);
                              v413 = v1051;
                            }
                            else
                            {
                              v421 = 1;
                              while (v420 != -4096)
                              {
                                v422 = v418 + v421++;
                                v418 = v422 & v417;
                                v420 = *(_QWORD *)(v415 + 16 * v418);
                                if ((_QWORD)v1051 == v420)
                                {
                                  v419 = (uint64_t *)(v415 + 16 * v418);
                                  goto LABEL_769;
                                }
                              }
                            }
                            *(_BYTE *)(v413 + 17) &= ~1u;
                          }
                        }
                      }
                    }
                    v428 = (uint64_t ***)v411[7];
                    if (v428 != v408)
                    {
                      if (v428 && v428 != (uint64_t ***)-8192 && v428 != (uint64_t ***)-4096)
                      {
                        v439 = v411[5] & 0xFFFFFFFFFFFFFFF8;
                        *(_QWORD *)v439 = v411[6];
                        v440 = (unint64_t *)v411[6];
                        if (v440)
                        {
                          *v440 = *v440 & 7 | v439;
                        }
                        else
                        {
                          v441 = v411[7];
                          v442 = ***(int32x2_t ****)v441;
                          v443 = (unint64_t)v442[303];
                          if (v443 <= v439)
                          {
                            v444 = v442[305].u32[0];
                            if (v443 + 16 * v444 > v439)
                            {
                              v445 = v444 - 1;
                              LODWORD(v446) = v445 & ((v441 >> 4) ^ (v441 >> 9));
                              v447 = (uint64_t *)(v443 + 16 * v446);
                              v448 = *v447;
                              if (v441 == *v447)
                              {
LABEL_805:
                                *v447 = -8192;
                                v442[304] = vadd_s32(v442[304], (int32x2_t)0x1FFFFFFFFLL);
                                v441 = v411[7];
                              }
                              else
                              {
                                v449 = 1;
                                while (v448 != -4096)
                                {
                                  v450 = v446 + v449++;
                                  v446 = v450 & v445;
                                  v448 = *(_QWORD *)(v443 + 16 * v446);
                                  if (v441 == v448)
                                  {
                                    v447 = (uint64_t *)(v443 + 16 * v446);
                                    goto LABEL_805;
                                  }
                                }
                              }
                              *(_BYTE *)(v441 + 17) &= ~1u;
                            }
                          }
                        }
                      }
                      v411[7] = v408;
                      if (v408 != (uint64_t ***)-8192 && v408 != (uint64_t ***)-4096 && v408)
                        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v411 + 5));
                    }
                    v429 = __src;
                    v430 = HIDWORD(__src);
                    goto LABEL_785;
                  }
                  if ((uint64_t ***)v1065 == v397)
                  {
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v397[5] + 5), v397);
                    v431 = v397[3];
                    v432 = v397[4];
                    v426 = v397 + 3;
                    *v432 = (uint64_t *)v431;
                    v431[1] = (uint64_t *)v432;
                    v397[3] = 0;
                    v397[4] = 0;
                    v427 = v1004;
                  }
                  else
                  {
                    v423 = sub_1C564FCF4((uint64_t)&v1102, (uint64_t)v397[5]);
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v397[5] + 5), v397);
                    v424 = v397[3];
                    v425 = v397[4];
                    v426 = v397 + 3;
                    *v425 = (uint64_t *)v424;
                    v424[1] = (uint64_t *)v425;
                    v397[3] = 0;
                    v397[4] = 0;
                    v427 = *(llvm::BasicBlock **)(v423 + 8);
                  }
                  v397[5] = (uint64_t **)v427;
                  *((_WORD *)v427 + 9) &= ~0x8000u;
                  if ((*((_BYTE *)v426 - 1) & 0x10) != 0)
                  {
                    v451 = *((_QWORD *)v427 + 7);
                    if (v451)
                    {
                      v452 = *(llvm::ValueSymbolTable **)(v451 + 104);
                      if (v452)
                        llvm::ValueSymbolTable::reinsertValue(v452, (llvm::Value *)v397);
                    }
                  }
                  v433 = *((_QWORD *)v427 + 5);
                  v397[3] = (uint64_t **)v433;
                  v397[4] = (uint64_t **)((char *)v427 + 40);
                  *(_QWORD *)(v433 + 8) = v426;
                  *((_QWORD *)v427 + 5) = v426;
                }
                v429 = __src;
                v430 = HIDWORD(__src);
                v408 = v397;
LABEL_785:
                if (v429 >= v430)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1077, (uint64_t)&v1079, v429 + 1, 8);
                  v429 = __src;
                }
                *((_QWORD *)v1077 + v429) = v408;
                v434 = (_DWORD)__src + 1;
                LODWORD(__src) = (_DWORD)__src + 1;
                if (++v395 == v396)
                {
                  if (v434)
                  {
                    v453 = (char *)v1077;
                    v454 = (char *)v1077 + 8 * v434;
                    do
                    {
                      v455 = *(_QWORD *)v453;
                      v456 = (_QWORD *)operator new();
                      *(_DWORD *)v456 = 6;
                      v456[1] = 0;
                      *((_DWORD *)v456 + 4) = 0;
                      v456[5] = &v1138;
                      v456[3] = v456 + 5;
                      v456[6] = 0;
                      v456[4] = 0x200000001;
                      v456[9] = v456 + 11;
                      v456[10] = 0x400000000;
                      v456[23] = v456 + 25;
                      v456[24] = 0x100000000;
                      v456[27] = v456 + 29;
                      v456[28] = 0x1000000000;
                      v1120 = v456;
                      v1049 = v456;
                      sub_1C5FD706C((uint64_t)v456, (uint64_t ***)v455);
                      sub_1C5FD3718((uint64_t *)&v1049, v457);
                      llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v1120, v458);
                      if (*(_BYTE *)(v455 + 16) == 83)
                      {
                        v459 = *(_DWORD *)(v455 + 20) & 0x7FFFFFF;
                        if ((_DWORD)v459)
                        {
                          v460 = 0;
                          v461 = 8 * v459;
                          do
                          {
                            v462 = *(_DWORD *)(v455 + 20);
                            if ((v462 & 0x40000000) != 0)
                              v463 = *(_QWORD *)(v455 - 8);
                            else
                              v463 = v455 - 32 * (v462 & 0x7FFFFFF);
                            v464 = sub_1C564FCF4((uint64_t)&v1102, *(_QWORD *)(v463 + 32 * *(unsigned int *)(v455 + 60) + v460));
                            v465 = &v1103;
                            if ((v1102 & 1) == 0)
                              v465 = (uint64_t *)v1103;
                            v466 = v1104[0];
                            if ((v1102 & 1) != 0)
                              v466 = 8;
                            if (&v465[2 * v466] != (uint64_t *)v464)
                            {
                              v467 = *(_DWORD *)(v455 + 20);
                              if ((v467 & 0x40000000) != 0)
                                v468 = *(_QWORD *)(v455 - 8);
                              else
                                v468 = v455 - 32 * (v467 & 0x7FFFFFF);
                              *(_QWORD *)(v468 + 32 * *(unsigned int *)(v455 + 60) + v460) = *(_QWORD *)(v464 + 8);
                            }
                            v460 += 8;
                          }
                          while (v461 != v460);
                        }
                      }
                      v453 += 8;
                    }
                    while (v453 != v454);
                  }
                  break;
                }
              }
            }
            v469 = **v383;
            v1120 = &v1122;
            v1121 = (void *)0x200000000;
            v1127 = v469;
            v1128 = &v1136;
            v1129 = &v1137;
            v1130 = 0;
            v1131 = 0;
            v1132 = 512;
            v1133 = 7;
            v1135 = 0;
            v1134 = 0;
            v1136 = &unk_1E8167888;
            v1137 = &unk_1E8167A08;
            v1125 = (llvm::BasicBlock *)v383;
            v1126 = (char *)(v383 + 5);
            v470 = *(uint64_t **)(v999 + 40);
            if ((_BYTE)v1064)
            {
              Declaration = llvm::Intrinsic::getDeclaration(v470, 1269, 0, 0);
              v472 = Declaration;
              v473 = v975;
              if (Declaration)
                v474 = *(uint64_t ***)(Declaration + 24);
              else
                v474 = 0;
              v476 = "attribute-pass";
            }
            else
            {
              v475 = llvm::Intrinsic::getDeclaration(v470, 2679, 0, 0);
              v472 = v475;
              v473 = v975;
              if (v475)
                v474 = *(uint64_t ***)(v475 + 24);
              else
                v474 = 0;
              v476 = "visibility-pass";
            }
            v1049 = v476;
            WORD4(v1051) = 259;
            *(_QWORD *)&v1067 = sub_1C4774778((uint64_t *)&v1120, v474, v472, 0, 0, (uint64_t)&v1049, 0);
            v477 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v1067, (uint64_t)v1076, (const llvm::APInt *)1);
            v1049 = "is-visibility";
            WORD4(v1051) = 259;
            v478 = (llvm::Value *)sub_1C4774B48((uint64_t)&v1120, 32, v1067, (uint64_t)v477, (uint64_t)&v1049);
            v479 = v1066;
            v480 = operator new(0xA0uLL);
            v481 = v480;
            v482 = 0;
            v483 = (llvm::Value *)(v480 + 24);
            v480[29] = v480[29] & 0x38000000 | 3;
            do
            {
              v484 = &v480[v482];
              *v484 = 0;
              v484[1] = 0;
              v484[2] = 0;
              v484[3] = v483;
              v482 += 8;
            }
            while (v482 != 24);
            llvm::BranchInst::BranchInst((llvm::BranchInst *)(v480 + 24), v1003, v479, v478, 0);
            WORD4(v1051) = 257;
            (*((void (**)(void **, llvm::Value *, void **, llvm::BasicBlock *, char *))*v1129 + 2))(v1129, v483, &v1049, v1125, v1126);
            if ((_DWORD)v1121)
            {
              v485 = (char *)v1120;
              v486 = (char *)v1120 + 16 * v1121;
              v487 = (unsigned __int8 **)(v481 + 36);
              do
              {
                v488 = *(_DWORD *)v485;
                v489 = (unsigned __int8 *)*((_QWORD *)v485 + 1);
                if (v489)
                {
                  if (!v488)
                  {
                    v1116 = (void *)*((_QWORD *)v485 + 1);
                    llvm::MetadataTracking::track((uint64_t)&v1116, v489, 2);
                    v490 = *v487;
                    goto LABEL_853;
                  }
                }
                else
                {
                  v490 = *v487;
                  if (!*v487 && (*((_BYTE *)v481 + 119) & 0x20) == 0)
                    goto LABEL_850;
                  if (!v488)
                  {
                    v1116 = 0;
LABEL_853:
                    if (v490)
                      llvm::MetadataTracking::untrack((uint64_t)(v481 + 36), v490);
                    v491 = (unsigned __int8 *)v1116;
                    *v487 = (unsigned __int8 *)v1116;
                    if (v491)
                      llvm::MetadataTracking::retrack((uint64_t)&v1116, v491, (uint64_t)(v481 + 36));
                    goto LABEL_850;
                  }
                }
                llvm::Value::setMetadata(v483, *(_DWORD *)v485, (llvm::MDNode *)v489);
LABEL_850:
                v485 += 16;
              }
              while (v485 != v486);
            }
            if (v998)
            {
              v1125 = (llvm::BasicBlock *)v998;
              v1126 = (char *)(v998 + 40);
              LLVMBuildRetVoid_0((uint64_t *)&v1120);
              v492 = (char *)*((_QWORD *)v473 + 5);
              if (v492 == v473 + 40)
              {
                v494 = 0;
              }
              else
              {
                if (v492)
                  v493 = v492 - 24;
                else
                  v493 = 0;
                if (v493[16] - 29 >= 0xB)
                  v494 = 0;
                else
                  v494 = v493;
              }
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v494 + 5) + 40, (uint64_t ***)v494);
              v495 = *((_QWORD *)v494 + 3);
              v496 = (_QWORD *)*((_QWORD *)v494 + 4);
              *v496 = v495;
              *(_QWORD *)(v495 + 8) = v496;
              *((_QWORD *)v494 + 3) = 0;
              *((_QWORD *)v494 + 4) = 0;
              llvm::Value::deleteValue((llvm::Value *)v494);
              v1125 = (llvm::BasicBlock *)v473;
              v1126 = v473 + 40;
              v497 = (char *)operator new(0x60uLL);
              v498 = v497;
              *((_DWORD *)v497 + 13) = *((_DWORD *)v497 + 13) & 0x38000000 | 1;
              *(_QWORD *)v497 = 0;
              *((_QWORD *)v497 + 2) = 0;
              *((_QWORD *)v497 + 1) = 0;
              *((_QWORD *)v497 + 4) = ***(_QWORD ***)v998 + 1576;
              v499 = (llvm::Value *)(v497 + 32);
              *((_QWORD *)v497 + 3) = v497 + 32;
              *((_QWORD *)v497 + 5) = 0;
              v497[48] = 30;
              v497[49] = 0;
              *((_WORD *)v497 + 25) = 0;
              *((_DWORD *)v497 + 13) = 1;
              *((_DWORD *)v497 + 22) = 0;
              *(_OWORD *)(v497 + 72) = 0u;
              *(_OWORD *)(v497 + 56) = 0u;
              v500 = (_QWORD *)(v998 + 8);
              v501 = *(_QWORD *)(v998 + 8);
              *(_QWORD *)v497 = v998;
              *((_QWORD *)v497 + 1) = v501;
              if (v501)
                *(_QWORD *)(v501 + 16) = v497 + 8;
              *((_QWORD *)v497 + 2) = v500;
              *v500 = v497;
              WORD4(v1051) = 257;
              (*((void (**)(void **, llvm::Value *, void **, llvm::BasicBlock *, char *))*v1129 + 2))(v1129, v499, &v1049, v1125, v1126);
              if ((_DWORD)v1121)
              {
                v502 = (char *)v1120;
                v503 = (char *)v1120 + 16 * v1121;
                v504 = (unsigned __int8 **)(v498 + 80);
                do
                {
                  v505 = *(_DWORD *)v502;
                  v506 = (unsigned __int8 *)*((_QWORD *)v502 + 1);
                  if (v506)
                  {
                    if (!v505)
                    {
                      v1116 = (void *)*((_QWORD *)v502 + 1);
                      llvm::MetadataTracking::track((uint64_t)&v1116, v506, 2);
                      v507 = *v504;
                      goto LABEL_880;
                    }
                  }
                  else
                  {
                    v507 = *v504;
                    if (!*v504 && (v498[55] & 0x20) == 0)
                      goto LABEL_877;
                    if (!v505)
                    {
                      v1116 = 0;
LABEL_880:
                      if (v507)
                        llvm::MetadataTracking::untrack((uint64_t)(v498 + 80), v507);
                      v508 = (unsigned __int8 *)v1116;
                      *v504 = (unsigned __int8 *)v1116;
                      if (v508)
                        llvm::MetadataTracking::retrack((uint64_t)&v1116, v508, (uint64_t)(v498 + 80));
                      goto LABEL_877;
                    }
                  }
                  llvm::Value::setMetadata(v499, *(_DWORD *)v502, (llvm::MDNode *)v506);
LABEL_877:
                  v502 += 16;
                }
                while (v502 != v503);
              }
            }
            v509 = *((_QWORD *)&v1064 + 1);
            if (*(_BYTE *)(*((_QWORD *)&v1064 + 1) + 2))
            {
              v1116 = &v1118;
              v1117 = 0x500000000;
              if (!(_DWORD)v1144)
              {
LABEL_1187:
                v697 = *(_DWORD *)(v509 + 4544);
                v698 = *(_QWORD **)(v509 + 4536);
                v699 = *(unsigned int *)(v509 + 4552);
                v700 = &v698[2 * v699];
                if (v697)
                {
                  if ((_DWORD)v699)
                  {
                    v701 = 16 * v699;
                    v702 = v698;
                    while ((*v702 | 0x1000) == 0xFFFFFFFFFFFFF000)
                    {
                      v702 += 2;
                      v701 -= 16;
                      if (!v701)
                        goto LABEL_1192;
                    }
                  }
                  else
                  {
                    v702 = v698;
                  }
                }
                else
                {
LABEL_1192:
                  v702 = &v698[2 * v699];
                }
                v703 = &v698[2 * v699];
                if (v702 != v703)
                {
                  while (1)
                  {
                    v704 = (_QWORD *)*v702;
                    v705 = *(_QWORD *)(*v702 + 8);
                    if (v705)
                      break;
LABEL_1220:
                    v719 = v702 + 2;
                    v702 = v700;
                    if (v719 != v700)
                    {
                      v702 = v719;
                      while ((*v702 | 0x1000) == 0xFFFFFFFFFFFFF000)
                      {
                        v702 += 2;
                        if (v702 == v700)
                        {
                          v702 = v700;
                          break;
                        }
                      }
                    }
                    if (v702 == v703)
                      goto LABEL_1226;
                  }
                  v706 = v702[1];
                  v707 = (_QWORD *)(v706 + 8);
                  while (1)
                  {
                    v708 = *(_QWORD *)(v705 + 24);
                    v705 = *(_QWORD *)(v705 + 8);
                    if (v708)
                      v709 = *(unsigned __int8 *)(v708 + 16) >= 0x1Cu;
                    else
                      v709 = 0;
                    if (v709)
                    {
                      v710 = sub_1C477672C((uint64_t)&v1070, *(_QWORD *)(v708 + 40));
                      v711 = v1071 == v1070 ? (uint64_t *)((char *)&v1072 + 4) : &v1072;
                      if (v710 == (_QWORD *)((char *)v1071 + 8 * *(unsigned int *)v711))
                      {
                        v712 = *(_DWORD *)(v708 + 20);
                        if ((v712 & 0x40000000) != 0)
                        {
                          v714 = *(_QWORD *)(v708 - 8);
                          v713 = v712 & 0x7FFFFFF;
                          if (v713)
                          {
LABEL_1210:
                            v715 = 32 * v713;
                            v716 = (_QWORD **)(v714 + 8);
                            do
                            {
                              v717 = v716 - 1;
                              if (*(v716 - 1) == v704)
                              {
                                *v716[1] = *v716;
                                if (*v716)
                                  (*v716)[2] = v716[1];
                                *v717 = v706;
                                if (v706)
                                {
                                  v718 = (_QWORD *)*v707;
                                  *v716 = (_QWORD *)*v707;
                                  if (v718)
                                    v718[2] = v716;
                                  v716[1] = v707;
                                  *v707 = v717;
                                }
                              }
                              v716 += 4;
                              v715 -= 32;
                            }
                            while (v715);
                          }
                        }
                        else
                        {
                          v713 = v712 & 0x7FFFFFF;
                          v714 = v708 - 32 * v713;
                          if (v713)
                            goto LABEL_1210;
                        }
                      }
                    }
                    if (!v705)
                      goto LABEL_1220;
                  }
                }
LABEL_1226:
                if ((_DWORD)v1117)
                {
                  v720 = (llvm::BasicBlock **)v1116;
                  v721 = (llvm::BasicBlock **)((char *)v1116 + 16 * v1117);
                  while (1)
                  {
                    v722 = (char *)*v720 + 40;
                    v723 = *(_QWORD **)v722;
                    if (*(char **)v722 == v722)
                      break;
                    if (v723)
                      v724 = (unsigned __int8 *)(v723 - 3);
                    else
                      v724 = 0;
                    v725 = v1004;
                    if (v724[16] - 29 > 0xA)
                      goto LABEL_1235;
                    llvm::Instruction::setSuccessor((llvm::Instruction *)v724, *((unsigned __int8 *)v720 + 8), v1004);
LABEL_1252:
                    v720 += 2;
                    if (v720 == v721)
                      goto LABEL_1253;
                  }
                  v725 = v1004;
LABEL_1235:
                  v1125 = *v720;
                  v1126 = v722;
                  v726 = (char *)operator new(0x60uLL);
                  v727 = v726;
                  *((_DWORD *)v726 + 13) = *((_DWORD *)v726 + 13) & 0x38000000 | 1;
                  *(_QWORD *)v726 = 0;
                  *((_QWORD *)v726 + 2) = 0;
                  *((_QWORD *)v726 + 1) = 0;
                  *((_QWORD *)v726 + 4) = ***(_QWORD ***)v725 + 1576;
                  v728 = (llvm::Value *)(v726 + 32);
                  *((_QWORD *)v726 + 3) = v726 + 32;
                  *((_QWORD *)v726 + 5) = 0;
                  *((_WORD *)v726 + 24) = 30;
                  *((_WORD *)v726 + 25) = 0;
                  *((_DWORD *)v726 + 13) = 1;
                  *(_OWORD *)(v726 + 56) = 0u;
                  *(_OWORD *)(v726 + 72) = 0u;
                  *((_DWORD *)v726 + 22) = 0;
                  *(_QWORD *)v726 = v725;
                  v731 = *((_QWORD *)v725 + 1);
                  v730 = (_QWORD *)((char *)v725 + 8);
                  v729 = v731;
                  *((_QWORD *)v726 + 1) = v731;
                  if (v731)
                    *(_QWORD *)(v729 + 16) = v726 + 8;
                  *((_QWORD *)v726 + 2) = v730;
                  *v730 = v726;
                  WORD4(v1051) = 257;
                  (*((void (**)(void **, llvm::Value *, void **, llvm::BasicBlock *, char *))*v1129 + 2))(v1129, v728, &v1049, v1125, v1126);
                  if (!(_DWORD)v1121)
                    goto LABEL_1252;
                  v732 = (char *)v1120;
                  v733 = (char *)v1120 + 16 * v1121;
                  v734 = (unsigned __int8 **)(v727 + 80);
                  while (1)
                  {
                    v735 = *(_DWORD *)v732;
                    v736 = (unsigned __int8 *)*((_QWORD *)v732 + 1);
                    if (v736)
                    {
                      if (!v735)
                      {
                        v1147 = (unsigned __int8 *)*((_QWORD *)v732 + 1);
                        llvm::MetadataTracking::track((uint64_t)&v1147, v736, 2);
                        v737 = *v734;
                        if (!*v734)
                        {
LABEL_1250:
                          v738 = v1147;
                          *v734 = v1147;
                          if (v738)
                            llvm::MetadataTracking::retrack((uint64_t)&v1147, v738, (uint64_t)(v727 + 80));
                          goto LABEL_1247;
                        }
LABEL_1244:
                        llvm::MetadataTracking::untrack((uint64_t)(v727 + 80), v737);
                        goto LABEL_1250;
                      }
                    }
                    else
                    {
                      v737 = *v734;
                      if (!*v734 && (v727[55] & 0x20) == 0)
                        goto LABEL_1247;
                      if (!v735)
                      {
                        v1147 = 0;
                        if (!v737)
                          goto LABEL_1250;
                        goto LABEL_1244;
                      }
                    }
                    llvm::Value::setMetadata(v728, *(_DWORD *)v732, (llvm::MDNode *)v736);
LABEL_1247:
                    v732 += 16;
                    if (v732 == v733)
                      goto LABEL_1252;
                  }
                }
LABEL_1253:
                v1125 = v1004;
                v1126 = (char *)v1004 + 40;
                v739 = (char *)operator new(0x60uLL);
                v740 = v739;
                *((_DWORD *)v739 + 13) = *((_DWORD *)v739 + 13) & 0x38000000 | 1;
                *(_QWORD *)v739 = 0;
                *((_QWORD *)v739 + 1) = 0;
                *((_QWORD *)v739 + 2) = 0;
                *((_QWORD *)v739 + 4) = ***(_QWORD ***)v976 + 1576;
                v741 = (llvm::Value *)(v739 + 32);
                *((_QWORD *)v739 + 3) = v739 + 32;
                *((_QWORD *)v739 + 5) = 0;
                v739[48] = 30;
                v739[49] = 0;
                *((_WORD *)v739 + 25) = 0;
                *((_DWORD *)v739 + 13) = 1;
                *(_OWORD *)(v739 + 56) = 0u;
                *(_OWORD *)(v739 + 72) = 0u;
                *((_DWORD *)v739 + 22) = 0;
                *(_QWORD *)v739 = v976;
                v743 = (_QWORD *)(v976 + 8);
                v742 = *(_QWORD *)(v976 + 8);
                *((_QWORD *)v739 + 1) = v742;
                if (v742)
                  *(_QWORD *)(v742 + 16) = v739 + 8;
                *((_QWORD *)v739 + 2) = v743;
                *v743 = v739;
                WORD4(v1051) = 257;
                (*((void (**)(void **, llvm::Value *, void **, llvm::BasicBlock *, char *))*v1129 + 2))(v1129, v741, &v1049, v1125, v1126);
                if ((_DWORD)v1121)
                {
                  v744 = (char *)v1120;
                  v745 = (char *)v1120 + 16 * v1121;
                  v746 = (unsigned __int8 **)(v740 + 80);
                  do
                  {
                    v747 = *(_DWORD *)v744;
                    v748 = (unsigned __int8 *)*((_QWORD *)v744 + 1);
                    if (v748)
                    {
                      if (!v747)
                      {
                        v1147 = (unsigned __int8 *)*((_QWORD *)v744 + 1);
                        llvm::MetadataTracking::track((uint64_t)&v1147, v748, 2);
                        v749 = *v746;
                        goto LABEL_1267;
                      }
                    }
                    else
                    {
                      v749 = *v746;
                      if (!*v746 && (v740[55] & 0x20) == 0)
                        goto LABEL_1264;
                      if (!v747)
                      {
                        v1147 = 0;
LABEL_1267:
                        if (v749)
                          llvm::MetadataTracking::untrack((uint64_t)(v740 + 80), v749);
                        v750 = v1147;
                        *v746 = v1147;
                        if (v750)
                          llvm::MetadataTracking::retrack((uint64_t)&v1147, v750, (uint64_t)(v740 + 80));
                        goto LABEL_1264;
                      }
                    }
                    llvm::Value::setMetadata(v741, *(_DWORD *)v744, (llvm::MDNode *)v748);
LABEL_1264:
                    v744 += 16;
                  }
                  while (v744 != v745);
                }
                if (v1116 != &v1118)
                  free(v1116);
                goto LABEL_1273;
              }
              v981 = (llvm::SmallPtrSetImplBase *)(*((_QWORD *)&v1064 + 1) + 4472);
              v995 = (char *)v1143 + 8 * v1144;
              v970 = v1002 + 40;
              v984 = *((_QWORD *)&v1064 + 1);
              v973 = (_QWORD *)(v976 + 8);
              v980 = *((_QWORD *)&v1064 + 1) + 4492;
              v978 = *((_QWORD *)&v1064 + 1) + 4488;
              v977 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
              v510 = (uint64_t *)v1143;
              while (2)
              {
                v1000 = v510;
                v511 = *v510;
                v512 = sub_1C564FCF4((uint64_t)&v1102, *v510);
                if ((char *)v511 != v473)
                {
                  v992 = (llvm::SmallPtrSetImplBase *)v512;
                  v513 = *(_QWORD *)(v511 + 40);
                  v997 = (_QWORD *)(v511 + 40);
                  if (v513 == v511 + 40)
                  {
                    v515 = 0;
                  }
                  else
                  {
                    if (v513)
                      v514 = (unsigned __int8 *)(v513 - 24);
                    else
                      v514 = 0;
                    if (v514[16] - 29 >= 0xB)
                      v515 = 0;
                    else
                      v515 = (llvm::Instruction *)v514;
                  }
                  llvm::Instruction::clone(v515);
                  v532 = v531;
                  v533 = sub_1C477672C((uint64_t)v981, v511);
                  v535 = *(_QWORD *)(v984 + 4480);
                  v536 = (unsigned int *)v980;
                  if (v535 != *(_QWORD *)(v984 + 4472))
                    v536 = (unsigned int *)v978;
                  if (v533 != (_QWORD *)(v535 + 8 * *v536))
                  {
                    v537 = **(uint64_t ***)v511;
                    v1049 = &v1050[1];
                    v1050[0] = (void *)0x200000000;
                    v1055 = v537;
                    v1056 = &v1062;
                    v1057 = &v1063;
                    v1058 = 0;
                    LODWORD(v1059) = 0;
                    WORD2(v1059) = 512;
                    BYTE6(v1059) = 7;
                    v1060 = 0;
                    v1061 = 0;
                    v1062 = &unk_1E8167888;
                    v1063 = &unk_1E8167A08;
                    v1053 = v511;
                    v1054 = v511 + 40;
                    v538 = *(_QWORD **)(v511 + 40);
                    if (v538 != v997)
                    {
                      if (v538)
                        v539 = (uint64_t)(v538 - 3);
                      else
                        v539 = 0;
                      v540 = *(unsigned __int8 *)(v539 + 16) - 40;
                      if (v540 >= 0xFFFFFFF5)
                        v541 = v539;
                      else
                        v541 = 0;
                      v542 = *(unsigned __int8 *)(v541 + 16);
                      if (v538 && (v542 == 30 ? (v543 = v540 >= 0xFFFFFFF5) : (v543 = 0), v543))
                      {
                        v544 = *(_DWORD *)(v541 + 20) & 0x7FFFFFF;
                        if (v544 == 1)
                        {
                          LLVMBuildUnreachable_0((uint64_t)&v1049);
                          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v541 + 40) + 40, (uint64_t ***)v541);
                          v673 = *(_QWORD *)(v541 + 24);
                          v674 = *(_QWORD **)(v541 + 32);
                          *v674 = v673;
                          *(_QWORD *)(v673 + 8) = v674;
                          *(_QWORD *)(v541 + 24) = 0;
                          *(_QWORD *)(v541 + 32) = 0;
                          llvm::Value::deleteValue((llvm::Value *)v541);
                          v675 = *(_QWORD *)(v1002 + 48);
                          if (v675 != v970)
                          {
                            do
                            {
                              if (v675)
                                v676 = v675 - 24;
                              else
                                v676 = 0;
                              if (!v675 || *(_BYTE *)(v676 + 16) != 83)
                                break;
                              v677 = *(_DWORD *)(v676 + 20);
                              v678 = v677 & 0x7FFFFFF;
                              if ((v677 & 0x7FFFFFF) != 0)
                              {
                                v679 = 0;
                                v680 = v1002 + 40;
                                while (1)
                                {
                                  v681 = v676 - 32 * v678;
                                  if ((v677 & 0x40000000) != 0)
                                    v681 = *(_QWORD *)(v676 - 8);
                                  if (*(_QWORD *)(v681 + 32 * *(unsigned int *)(v676 + 60) + 8 * v679) == v511)
                                    break;
                                  if (v678 == ++v679)
                                  {
                                    LODWORD(v679) = -1;
                                    break;
                                  }
                                }
                              }
                              else
                              {
                                LODWORD(v679) = -1;
                                v680 = v1002 + 40;
                              }
                              llvm::PHINode::removeIncomingValue((llvm::PHINode *)v676, v679, 1);
                              v675 = *(_QWORD *)(v675 + 8);
                            }
                            while (v675 != v680);
                          }
                        }
                        else
                        {
                          v545 = 0;
                          if (v544 == 3)
                            v546 = 2;
                          else
                            v546 = 1;
                          v547 = (llvm::ValueHandleBase **)(v541 - 96);
                          v548 = (_QWORD *)(v541 - 88);
                          do
                          {
                            if (*(_QWORD *)(v541 - 32 + v545) == v1002)
                            {
                              v549 = *v1055;
                              if (v545)
                              {
                                v550 = *(llvm::ValueHandleBase **)(v549 + 1560);
                                if (!v550)
                                {
                                  v551 = *(llvm::ConstantInt **)(v549 + 1888);
                                  v552 = *(_DWORD *)(v549 + 1896);
                                  LODWORD(v1148) = v552 >> 8;
                                  if (v552 >> 8 > 0x40)
                                  {
                                    llvm::APInt::initSlowCase((llvm::APInt *)&v1147, 1, 0);
                                  }
                                  else
                                  {
                                    if (v552 <= 0xFF)
                                      v553 = 0;
                                    else
                                      v553 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v552);
                                    v1147 = (unsigned __int8 *)(v553 & 1);
                                  }
                                  v550 = llvm::ConstantInt::get(v551, (llvm::LLVMContext *)&v1147, v534);
                                  if (v1148 >= 0x41 && v1147)
                                    MEMORY[0x1CAA32F9C](v1147, 0x1000C8000313F17);
                                  *(_QWORD *)(v549 + 1560) = v550;
                                }
                              }
                              else
                              {
                                v550 = *(llvm::ValueHandleBase **)(v549 + 1568);
                                if (!v550)
                                {
                                  v558 = *(llvm::ConstantInt **)(v549 + 1888);
                                  LODWORD(v1148) = *(_DWORD *)(v549 + 1896) >> 8;
                                  if (v1148 > 0x40)
                                    llvm::APInt::initSlowCase((llvm::APInt *)&v1147, 0, 0);
                                  else
                                    v1147 = 0;
                                  v550 = llvm::ConstantInt::get(v558, (llvm::LLVMContext *)&v1147, v534);
                                  if (v1148 >= 0x41 && v1147)
                                    MEMORY[0x1CAA32F9C](v1147, 0x1000C8000313F17);
                                  *(_QWORD *)(v549 + 1568) = v550;
                                }
                              }
                              if (*v547)
                              {
                                **(_QWORD **)(v541 - 80) = *(_QWORD *)(v541 - 88);
                                v554 = *(_QWORD *)(v541 - 88);
                                if (v554)
                                  *(_QWORD *)(v554 + 16) = *(_QWORD *)(v541 - 80);
                              }
                              *v547 = v550;
                              if (v550)
                              {
                                v557 = *((_QWORD *)v550 + 1);
                                v556 = (llvm::ValueHandleBase ***)((char *)v550 + 8);
                                v555 = v557;
                                *v548 = v557;
                                if (v557)
                                  *(_QWORD *)(v555 + 16) = v548;
                                *(_QWORD *)(v541 - 80) = v556;
                                *v556 = v547;
                              }
                            }
                            v545 -= 32;
                            --v546;
                          }
                          while (v546);
                        }
                      }
                      else if (v538)
                      {
                        if (v542 == 31 && v540 >= 0xFFFFFFF5)
                        {
                          v1147 = (unsigned __int8 *)&v1149;
                          v1148 = 0x1000000000;
                          v560 = (*(_DWORD *)(v541 + 20) >> 1) & 0x3FFFFFF;
                          v561 = v560 - 1;
                          if (v560 != 1)
                          {
                            v562 = 0;
                            v563 = 0;
                            v564 = 0;
                            v565 = 2 * v561;
                            do
                            {
                              v566 = *(_DWORD *)(v541 + 20);
                              if ((v566 & 0x40000000) != 0)
                                v567 = *(_QWORD *)(v541 - 8);
                              else
                                v567 = v541 - 32 * (v566 & 0x7FFFFFF);
                              v568 = (v563 + 3);
                              if (v563 == 0x1FFFFFFFCLL)
                                v568 = 1;
                              if (*(_QWORD *)(v567 + 32 * v568) == v1002)
                              {
                                if (v564 >= HIDWORD(v1148))
                                {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1147, (uint64_t)&v1149, v564 + 1, 4);
                                  v564 = v1148;
                                }
                                *(_DWORD *)&v1147[4 * v564] = v562;
                                v564 = v1148 + 1;
                                LODWORD(v1148) = v1148 + 1;
                              }
                              v563 += 2;
                              ++v562;
                            }
                            while (v565 != v563);
                            if (v564)
                            {
                              v569 = 0;
                              v570 = v1147;
                              v571 = 4 * v564;
                              do
                              {
                                v572 = *(_DWORD *)v570;
                                v570 += 4;
                                llvm::SwitchInst::removeCase(v541, v541, v569 + v572);
                                --v569;
                                v571 -= 4;
                              }
                              while (v571);
                            }
                          }
                          v573 = *(_DWORD *)(v541 + 20);
                          if ((v573 & 0x40000000) != 0)
                            v574 = *(_QWORD *)(v541 - 8);
                          else
                            v574 = v541 - 32 * (v573 & 0x7FFFFFF);
                          if (*(_QWORD *)(v574 + 32) == v1002)
                          {
                            if ((v573 & 0x7FFFFFE) == 2)
                            {
                              LLVMBuildUnreachable_0((uint64_t)&v1049);
                              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v541 + 40) + 40, (uint64_t ***)v541);
                              v683 = *(_QWORD *)(v541 + 24);
                              v684 = *(_QWORD **)(v541 + 32);
                              *v684 = v683;
                              *(_QWORD *)(v683 + 8) = v684;
                              *(_QWORD *)(v541 + 24) = 0;
                              *(_QWORD *)(v541 + 32) = 0;
                              llvm::Value::deleteValue((llvm::Value *)v541);
                            }
                            else
                            {
                              if ((v573 & 0x40000000) != 0)
                                v575 = *(_QWORD *)(v541 - 8);
                              else
                                v575 = v541 - 32 * (v573 & 0x7FFFFFF);
                              v576 = (_QWORD *)(v575 + 32);
                              v577 = *(_QWORD *)(v575 + 96);
                              if (*(_QWORD *)(v575 + 32))
                              {
                                **(_QWORD **)(v575 + 48) = *(_QWORD *)(v575 + 40);
                                v682 = *(_QWORD *)(v575 + 40);
                                if (v682)
                                  *(_QWORD *)(v682 + 16) = *(_QWORD *)(v575 + 48);
                              }
                              *v576 = v577;
                              if (v577)
                              {
                                v580 = *(_QWORD *)(v577 + 8);
                                v578 = (_QWORD *)(v577 + 8);
                                v579 = v580;
                                *(_QWORD *)(v575 + 40) = v580;
                                if (v580)
                                  *(_QWORD *)(v579 + 16) = v575 + 40;
                                *(_QWORD *)(v575 + 48) = v578;
                                *v578 = v576;
                              }
                            }
                          }
                          for (i3 = *(_QWORD *)(v1002 + 48); i3 != v970; i3 = *(_QWORD *)(i3 + 8))
                          {
                            v582 = i3 ? i3 - 24 : 0;
                            if (!i3 || *(_BYTE *)(v582 + 16) != 83)
                              break;
                            v583 = *(_DWORD *)(v582 + 20);
                            v584 = v583 & 0x7FFFFFF;
                            if ((v583 & 0x7FFFFFF) != 0)
                            {
                              v585 = 0;
                              while (1)
                              {
                                v586 = v582 - 32 * v584;
                                if ((v583 & 0x40000000) != 0)
                                  v586 = *(_QWORD *)(v582 - 8);
                                if (*(_QWORD *)(v586 + 32 * *(unsigned int *)(v582 + 60) + 8 * v585) == v511)
                                  break;
                                if (v584 == ++v585)
                                  goto LABEL_1014;
                              }
                            }
                            else
                            {
LABEL_1014:
                              LODWORD(v585) = -1;
                            }
                            llvm::PHINode::removeIncomingValue((llvm::PHINode *)v582, v585, 1);
                          }
                          if (v1147 != (unsigned __int8 *)&v1149)
                            free(v1147);
                        }
                      }
                    }
                    if (v1049 != &v1050[1])
                      free(v1049);
                    v473 = v975;
                  }
                  v587 = (_QWORD *)operator new();
                  *(_DWORD *)v587 = 6;
                  v587[1] = 0;
                  *((_DWORD *)v587 + 4) = 0;
                  v587[5] = &v1138;
                  v587[3] = v587 + 5;
                  v587[6] = 0;
                  v587[4] = 0x200000001;
                  v587[9] = v587 + 11;
                  v587[10] = 0x400000000;
                  v587[23] = v587 + 25;
                  v587[24] = 0x100000000;
                  v587[27] = v587 + 29;
                  v587[28] = 0x1000000000;
                  v1147 = (unsigned __int8 *)v587;
                  v1049 = v587;
                  sub_1C5FD706C((uint64_t)v587, (uint64_t ***)v532);
                  sub_1C5FD3718((uint64_t *)&v1049, v588);
                  llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v1147, v589);
                  v1049 = (void *)1;
                  *(int64x2_t *)v1050 = v977;
                  *(_QWORD *)&v1051 = &v1052;
                  *((_QWORD *)&v1051 + 1) = 0x200000000;
                  if (v511 != v1002)
                  {
                    v590 = *(unsigned __int8 *)(v532 + 16);
                    if (v590 != 30)
                      __asm { BR              X10 }
                    if ((*(_DWORD *)(v532 + 20) & 0x7FFFFFF) == 3)
                      v591 = 2;
                    else
                      v591 = 1;
                    v592 = 0;
                    v593 = v591;
                    while (1)
                    {
                      v594 = *(unsigned __int8 *)(v532 + 16);
                      if (v594 != 30)
                        __asm { BR              X9 }
                      v595 = sub_1C564FCF4((uint64_t)&v1102, *(_QWORD *)(v532 - 32 - 32 * v592));
                      if ((v1102 & 1) != 0)
                        v596 = &v1103;
                      else
                        v596 = (uint64_t *)v1103;
                      v597 = v1104[0];
                      if ((v1102 & 1) != 0)
                        v597 = 8;
                      if (&v596[2 * v597] == (uint64_t *)v595)
                      {
                        v1147 = 0;
                        v601 = (unsigned __int8 *)sub_1C5EA72C0(*((_QWORD *)&v1064 + 1) + 8, (uint64_t)&v1102, v511, v592);
                        v1147 = v601;
                        if ((v1049 & 1) != 0)
                        {
                          v602 = 2;
                          v603 = v1050;
                        }
                        else
                        {
                          v602 = (int)v1050[1];
                          if (!LODWORD(v1050[1]))
                          {
                            v622 = 0;
                            goto LABEL_1069;
                          }
                          v603 = (void **)v1050[0];
                        }
                        v614 = v602 - 1;
                        v615 = v614 & ((v601 >> 4) ^ (v601 >> 9));
                        v616 = &v603[v615];
                        v617 = *v616;
                        if (v601 != *v616)
                        {
                          v618 = 0;
                          v619 = 1;
                          while (v617 != (void *)-4096)
                          {
                            if (v618)
                              v620 = 0;
                            else
                              v620 = v617 == (void *)-8192;
                            if (v620)
                              v618 = v616;
                            v621 = v615 + v619++;
                            v615 = v621 & v614;
                            v616 = &v603[v615];
                            v617 = *v616;
                            if (v601 == *v616)
                              goto LABEL_1073;
                          }
                          if (v618)
                            v622 = v618;
                          else
                            v622 = v616;
LABEL_1069:
                          v623 = sub_1C4EE5C58((uint64_t)&v1049, (uint64_t)&v1147, &v1147, v622);
                          *v623 = v1147;
                          v613 = v1147;
LABEL_1070:
                          v624 = DWORD2(v1051);
                          if (DWORD2(v1051) >= (unint64_t)HIDWORD(v1051))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1051, (uint64_t)&v1052, DWORD2(v1051) + 1, 8);
                            v624 = DWORD2(v1051);
                          }
                          *(_QWORD *)(v1051 + 8 * v624) = v613;
                          ++DWORD2(v1051);
                        }
                      }
                      else
                      {
                        v598 = (_QWORD *)(v595 + 8);
                        if ((v1049 & 1) != 0)
                        {
                          v599 = 2;
                          v600 = v1050;
                        }
                        else
                        {
                          v599 = (int)v1050[1];
                          if (!LODWORD(v1050[1]))
                          {
                            v612 = 0;
LABEL_1053:
                            *sub_1C4EE5C58((uint64_t)&v1049, (uint64_t)v598, v598, v612) = *v598;
                            v613 = (unsigned __int8 *)*v598;
                            goto LABEL_1070;
                          }
                          v600 = (void **)v1050[0];
                        }
                        v604 = v599 - 1;
                        v605 = ((*v598 >> 4) ^ (*v598 >> 9)) & v604;
                        v606 = &v600[v605];
                        v607 = *v606;
                        if ((void *)*v598 != *v606)
                        {
                          v608 = 0;
                          v609 = 1;
                          while (v607 != (void *)-4096)
                          {
                            if (v608)
                              v610 = 0;
                            else
                              v610 = v607 == (void *)-8192;
                            if (v610)
                              v608 = v606;
                            v611 = v605 + v609++;
                            v605 = v611 & v604;
                            v606 = &v600[v605];
                            v607 = *v606;
                            if ((void *)*v598 == *v606)
                              goto LABEL_1073;
                          }
                          if (v608)
                            v612 = v608;
                          else
                            v612 = v606;
                          goto LABEL_1053;
                        }
                      }
LABEL_1073:
                      if (++v592 == v593)
                      {
                        v625 = DWORD2(v1051);
                        goto LABEL_1094;
                      }
                    }
                  }
                  v626 = ((v1004 >> 4) ^ (v1004 >> 9)) & 1;
                  v627 = &v1050[v626];
                  v628 = (llvm::BasicBlock *)*v627;
                  if (v1004 != *v627)
                  {
                    v629 = 0;
                    v630 = 1;
                    while (v628 != (llvm::BasicBlock *)-4096)
                    {
                      if (v629)
                        v631 = 0;
                      else
                        v631 = v628 == (llvm::BasicBlock *)-8192;
                      if (v631)
                        v629 = v627;
                      v632 = v626 + v630++;
                      v626 = v632 & 1;
                      v627 = &v1050[v626];
                      v628 = (llvm::BasicBlock *)*v627;
                      if (v1004 == *v627)
                        goto LABEL_1122;
                    }
                    if (v629)
                      v633 = v629;
                    else
                      v633 = v627;
                    v634 = sub_1C4EE5C58((uint64_t)&v1049, (uint64_t)&v1004, &v1004, v633);
                    *v634 = v1004;
                    v635 = v1004;
                    v636 = DWORD2(v1051);
                    if (DWORD2(v1051) >= (unint64_t)HIDWORD(v1051))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1051, (uint64_t)&v1052, DWORD2(v1051) + 1, 8);
                      v636 = DWORD2(v1051);
                    }
                    *(_QWORD *)(v1051 + 8 * v636) = v635;
                    v625 = ++DWORD2(v1051);
LABEL_1094:
                    if (v625 >= 2)
                    {
                      v637 = 0;
                      v638 = v625;
                      do
                      {
                        v639 = *(llvm::BasicBlock **)(v1051 + 8 * v637);
                        if (v639)
                          llvm::Instruction::setSuccessor((llvm::Instruction *)v532, v637, v639);
                        ++v637;
                      }
                      while (v638 != v637);
                      v640 = *((_QWORD *)v992 + 1);
                      *(_QWORD *)(v532 + 40) = v640;
                      *(_WORD *)(v640 + 18) &= ~0x8000u;
                      if ((*(_BYTE *)(v532 + 23) & 0x10) != 0)
                      {
                        v671 = *(_QWORD *)(v640 + 56);
                        if (v671)
                        {
                          v672 = *(llvm::ValueSymbolTable **)(v671 + 104);
                          if (v672)
                            llvm::ValueSymbolTable::reinsertValue(v672, (llvm::Value *)v532);
                        }
                      }
                      v641 = *(_QWORD *)(v640 + 40);
                      *(_QWORD *)(v532 + 24) = v641;
                      *(_QWORD *)(v532 + 32) = v640 + 40;
                      v642 = v532 + 24;
                      *(_QWORD *)(v641 + 8) = v642;
                      *(_QWORD *)(v640 + 40) = v642;
                      goto LABEL_1122;
                    }
                    if (v625 == 1)
                    {
                      llvm::Value::deleteValue((llvm::Value *)v532);
                      if (*(_QWORD *)v1051)
                      {
                        v643 = *((_QWORD *)v992 + 1) + 40;
                        v1125 = (llvm::BasicBlock *)*((_QWORD *)v992 + 1);
                        v1126 = (char *)v643;
                        v644 = *(_QWORD *)v1051;
                        v645 = (char *)operator new(0x60uLL);
                        v646 = v645;
                        *((_DWORD *)v645 + 13) = *((_DWORD *)v645 + 13) & 0x38000000 | 1;
                        *(_QWORD *)v645 = 0;
                        *((_QWORD *)v645 + 2) = 0;
                        *((_QWORD *)v645 + 1) = 0;
                        *((_QWORD *)v645 + 4) = ***(_QWORD ***)v644 + 1576;
                        v647 = (llvm::Value *)(v645 + 32);
                        *((_QWORD *)v645 + 3) = v645 + 32;
                        *((_QWORD *)v645 + 5) = 0;
                        v645[48] = 30;
                        v645[49] = 0;
                        *((_WORD *)v645 + 25) = 0;
                        *((_DWORD *)v645 + 13) = 1;
                        *(_OWORD *)(v645 + 56) = 0u;
                        *(_OWORD *)(v645 + 72) = 0u;
                        *((_DWORD *)v645 + 22) = 0;
                        *(_QWORD *)v645 = v644;
                        v650 = *(_QWORD *)(v644 + 8);
                        v649 = (_QWORD *)(v644 + 8);
                        v648 = v650;
                        *((_QWORD *)v645 + 1) = v650;
                        if (v650)
                          *(_QWORD *)(v648 + 16) = v645 + 8;
                        *((_QWORD *)v645 + 2) = v649;
                        *v649 = v645;
                        v1151 = 257;
                        (*((void (**)(void **, llvm::Value *, unsigned __int8 **, llvm::BasicBlock *, char *))*v1129
                         + 2))(v1129, v647, &v1147, v1125, v1126);
                        if ((_DWORD)v1121)
                        {
                          v651 = (char *)v1120;
                          v652 = (char *)v1120 + 16 * v1121;
                          v653 = (unsigned __int8 **)(v646 + 80);
                          do
                          {
                            v654 = *(_DWORD *)v651;
                            v655 = (unsigned __int8 *)*((_QWORD *)v651 + 1);
                            if (v655)
                            {
                              if (!v654)
                              {
                                v1114[0] = *((_QWORD *)v651 + 1);
                                llvm::MetadataTracking::track((uint64_t)v1114, v655, 2);
                                v656 = *v653;
                                goto LABEL_1117;
                              }
                            }
                            else
                            {
                              v656 = *v653;
                              if (!*v653 && (v646[55] & 0x20) == 0)
                                goto LABEL_1114;
                              if (!v654)
                              {
                                v1114[0] = 0;
LABEL_1117:
                                if (v656)
                                  llvm::MetadataTracking::untrack((uint64_t)(v646 + 80), v656);
                                v657 = (unsigned __int8 *)v1114[0];
                                *v653 = (unsigned __int8 *)v1114[0];
                                if (v657)
                                  llvm::MetadataTracking::retrack((uint64_t)v1114, v657, (uint64_t)(v646 + 80));
                                goto LABEL_1114;
                              }
                            }
                            llvm::Value::setMetadata(v647, *(_DWORD *)v651, (llvm::MDNode *)v655);
LABEL_1114:
                            v651 += 16;
                          }
                          while (v651 != v652);
                        }
                      }
                    }
                  }
LABEL_1122:
                  v658 = (_QWORD *)*v997;
                  if ((_QWORD *)*v997 != v997)
                  {
                    v659 = v658 ? (uint64_t)(v658 - 3) : 0;
                    if (*(_BYTE *)(v659 + 16) == 30 && (*(_DWORD *)(v659 + 20) & 0x7FFFFFF) == 3)
                    {
                      v660 = *((_QWORD *)&v1064 + 1);
                      v662 = (_QWORD *)(v659 - 96);
                      v661 = *(unsigned __int8 **)(v659 - 96);
                      if (v661[16] <= 0x1Bu)
                        v661 = 0;
                      v1147 = v661;
                      v1114[0] = 0;
                      if (sub_1C5667944((uint64_t *)(*((_QWORD *)&v1064 + 1) + 4536), &v1147, v1114))
                      {
                        v663 = v1114[0];
                        v664 = *(_QWORD *)(v660 + 4536);
                        v665 = *(unsigned int *)(v660 + 4552);
                      }
                      else
                      {
                        v664 = *(_QWORD *)(v660 + 4536);
                        v665 = *(unsigned int *)(v660 + 4552);
                        v663 = v664 + 16 * v665;
                      }
                      if (v663 != v664 + 16 * v665)
                      {
                        v666 = *(_QWORD *)(v663 + 8);
                        if (*v662)
                        {
                          **(_QWORD **)(v659 - 80) = *(_QWORD *)(v659 - 88);
                          v667 = *(_QWORD *)(v659 - 88);
                          if (v667)
                            *(_QWORD *)(v667 + 16) = *(_QWORD *)(v659 - 80);
                        }
                        *v662 = v666;
                        if (v666)
                        {
                          v670 = *(_QWORD *)(v666 + 8);
                          v668 = (_QWORD *)(v666 + 8);
                          v669 = v670;
                          *(_QWORD *)(v659 - 88) = v670;
                          if (v670)
                            *(_QWORD *)(v669 + 16) = v659 - 88;
                          *(_QWORD *)(v659 - 80) = v668;
                          *v668 = v662;
                        }
                      }
                    }
                  }
                  if ((void **)v1051 != &v1052)
                    free((void *)v1051);
                  if ((v1049 & 1) == 0)
                    MEMORY[0x1CAA32FB4](v1050[0], 8);
LABEL_1145:
                  v510 = v1000 + 1;
                  if (v1000 + 1 == (uint64_t *)v995)
                  {
                    v509 = *((_QWORD *)&v1064 + 1);
                    goto LABEL_1187;
                  }
                  continue;
                }
                break;
              }
              v516 = v512;
              v1125 = *(llvm::BasicBlock **)(v512 + 8);
              v1126 = (char *)v1125 + 40;
              v517 = (char *)operator new(0x60uLL);
              v518 = v517;
              *((_DWORD *)v517 + 13) = *((_DWORD *)v517 + 13) & 0x38000000 | 1;
              *(_QWORD *)v517 = 0;
              *((_QWORD *)v517 + 2) = 0;
              *((_QWORD *)v517 + 1) = 0;
              *((_QWORD *)v517 + 4) = ***(_QWORD ***)v976 + 1576;
              v519 = (llvm::Value *)(v517 + 32);
              *((_QWORD *)v517 + 3) = v517 + 32;
              *((_QWORD *)v517 + 5) = 0;
              v517[48] = 30;
              v517[49] = 0;
              *((_WORD *)v517 + 25) = 0;
              *((_DWORD *)v517 + 13) = 1;
              *(_OWORD *)(v517 + 56) = 0u;
              *(_OWORD *)(v517 + 72) = 0u;
              *((_DWORD *)v517 + 22) = 0;
              *(_QWORD *)v517 = v976;
              v520 = *(_QWORD *)(v976 + 8);
              *((_QWORD *)v517 + 1) = v520;
              if (v520)
                *(_QWORD *)(v520 + 16) = v517 + 8;
              *((_QWORD *)v517 + 2) = v973;
              *v973 = v517;
              WORD4(v1051) = 257;
              (*((void (**)(void **, llvm::Value *, void **, llvm::BasicBlock *, char *))*v1129 + 2))(v1129, v519, &v1049, v1125, v1126);
              if (!(_DWORD)v1121)
              {
LABEL_912:
                v528 = *(_QWORD *)(v516 + 8);
                v529 = v1117;
                if (v1117 >= (unint64_t)HIDWORD(v1117))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1116, (uint64_t)&v1118, v1117 + 1, 16);
                  v529 = v1117;
                }
                v530 = (char *)v1116 + 16 * v529;
                *v530 = v528;
                v530[1] = 0;
                LODWORD(v1117) = v1117 + 1;
                goto LABEL_1145;
              }
              v521 = (char *)v1120;
              v522 = (char *)v1120 + 16 * v1121;
              v523 = (unsigned __int8 **)(v518 + 80);
              while (2)
              {
                v524 = *(_DWORD *)v521;
                v525 = (unsigned __int8 *)*((_QWORD *)v521 + 1);
                if (v525)
                {
                  if (v524)
                    goto LABEL_906;
                  v1147 = (unsigned __int8 *)*((_QWORD *)v521 + 1);
                  llvm::MetadataTracking::track((uint64_t)&v1147, v525, 2);
                  v526 = *v523;
                  if (*v523)
LABEL_904:
                    llvm::MetadataTracking::untrack((uint64_t)(v518 + 80), v526);
LABEL_910:
                  v527 = v1147;
                  *v523 = v1147;
                  if (v527)
                    llvm::MetadataTracking::retrack((uint64_t)&v1147, v527, (uint64_t)(v518 + 80));
                }
                else
                {
                  v526 = *v523;
                  if (*v523 || (v518[55] & 0x20) != 0)
                  {
                    if (!v524)
                    {
                      v1147 = 0;
                      if (v526)
                        goto LABEL_904;
                      goto LABEL_910;
                    }
LABEL_906:
                    llvm::Value::setMetadata(v519, *(_DWORD *)v521, (llvm::MDNode *)v525);
                  }
                }
                v521 += 16;
                if (v521 == v522)
                  goto LABEL_912;
                continue;
              }
            }
            v1125 = v1003;
            v1126 = (char *)v1003 + 40;
            v685 = (char *)operator new(0x60uLL);
            v686 = v685;
            *((_DWORD *)v685 + 13) = *((_DWORD *)v685 + 13) & 0x38000000 | 1;
            *(_QWORD *)v685 = 0;
            *((_QWORD *)v685 + 1) = 0;
            *((_QWORD *)v685 + 2) = 0;
            *((_QWORD *)v685 + 4) = ***(_QWORD ***)v976 + 1576;
            v687 = (llvm::Value *)(v685 + 32);
            *((_QWORD *)v685 + 3) = v685 + 32;
            *((_QWORD *)v685 + 5) = 0;
            v685[48] = 30;
            v685[49] = 0;
            *((_WORD *)v685 + 25) = 0;
            *((_DWORD *)v685 + 13) = 1;
            *(_OWORD *)(v685 + 56) = 0u;
            *(_OWORD *)(v685 + 72) = 0u;
            *((_DWORD *)v685 + 22) = 0;
            *(_QWORD *)v685 = v976;
            v689 = (_QWORD *)(v976 + 8);
            v688 = *(_QWORD *)(v976 + 8);
            *((_QWORD *)v685 + 1) = v688;
            if (v688)
              *(_QWORD *)(v688 + 16) = v685 + 8;
            *((_QWORD *)v685 + 2) = v689;
            *v689 = v685;
            WORD4(v1051) = 257;
            (*((void (**)(void **, llvm::Value *, void **, llvm::BasicBlock *, char *))*v1129 + 2))(v1129, v687, &v1049, v1125, v1126);
            if (!(_DWORD)v1121)
            {
LABEL_1273:
              if (v1120 != &v1122)
                free(v1120);
              if (v1077 != &v1079)
                free(v1077);
              if (v1142)
              {
                sub_1C4E43068((uint64_t)&v1141);
                MEMORY[0x1CAA32FB4](v1141, 8);
                v1142 = 0;
              }
              v751 = v1138;
              if ((_DWORD)v1140)
              {
                v752 = &v1138[8 * (unint64_t)v1140];
                do
                {
                  v753 = v751[3];
                  if (((unint64_t)v753 | 0x1000) != 0xFFFFFFFFFFFFF000)
                  {
                    v754 = v751[7];
                    if (v754)
                    {
                      if (v754 != (uint64_t (*)())-8192 && v754 != (uint64_t (*)())-4096)
                      {
                        v755 = (unint64_t)v751[5] & 0xFFFFFFFFFFFFFFF8;
                        *(_QWORD *)v755 = v751[6];
                        v756 = (unint64_t *)v751[6];
                        if (v756)
                        {
                          *v756 = *v756 & 7 | v755;
                        }
                        else
                        {
                          v757 = v751[7];
                          v758 = ***(int32x2_t ****)v757;
                          v759 = (unint64_t)v758[303];
                          if (v759 <= v755)
                          {
                            v760 = v758[305].u32[0];
                            if (v759 + 16 * v760 > v755)
                            {
                              v761 = v760 - 1;
                              LODWORD(v762) = v761 & ((v757 >> 4) ^ (v757 >> 9));
                              v763 = (uint64_t (**)())(v759 + 16 * v762);
                              v764 = *v763;
                              if (v757 == *v763)
                              {
LABEL_1293:
                                *v763 = (uint64_t (*)())-8192;
                                v758[304] = vadd_s32(v758[304], (int32x2_t)0x1FFFFFFFFLL);
                                v757 = v751[7];
                              }
                              else
                              {
                                v765 = 1;
                                while (v764 != (uint64_t (*)())-4096)
                                {
                                  v766 = v762 + v765++;
                                  v762 = v766 & v761;
                                  v764 = *(uint64_t (**)())(v759 + 16 * v762);
                                  if (v757 == v764)
                                  {
                                    v763 = (uint64_t (**)())(v759 + 16 * v762);
                                    goto LABEL_1293;
                                  }
                                }
                              }
                              *((_BYTE *)v757 + 17) &= ~1u;
                            }
                          }
                        }
                        v753 = v751[3];
                      }
                    }
                  }
                  if (v753 != (uint64_t (*)())-4096
                    && v753 != (uint64_t (*)())-8192
                    && v753 != 0)
                  {
                    v768 = (unint64_t)v751[1] & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v768 = v751[2];
                    v769 = (unint64_t *)v751[2];
                    if (v769)
                    {
                      *v769 = *v769 & 7 | v768;
                    }
                    else
                    {
                      v770 = v751[3];
                      v771 = ***(int32x2_t ****)v770;
                      v772 = (unint64_t)v771[303];
                      if (v772 <= v768)
                      {
                        v773 = v771[305].u32[0];
                        if (v772 + 16 * v773 > v768)
                        {
                          v774 = v773 - 1;
                          LODWORD(v775) = v774 & ((v770 >> 4) ^ (v770 >> 9));
                          v776 = (uint64_t (**)())(v772 + 16 * v775);
                          v777 = *v776;
                          if (v770 == *v776)
                          {
LABEL_1312:
                            *v776 = (uint64_t (*)())-8192;
                            v771[304] = vadd_s32(v771[304], (int32x2_t)0x1FFFFFFFFLL);
                            v770 = v751[3];
                          }
                          else
                          {
                            v778 = 1;
                            while (v777 != (uint64_t (*)())-4096)
                            {
                              v779 = v775 + v778++;
                              v775 = v779 & v774;
                              v777 = *(uint64_t (**)())(v772 + 16 * v775);
                              if (v770 == v777)
                              {
                                v776 = (uint64_t (**)())(v772 + 16 * v775);
                                goto LABEL_1312;
                              }
                            }
                          }
                          *((_BYTE *)v770 + 17) &= ~1u;
                        }
                      }
                    }
                  }
                  v751 += 8;
                }
                while (v751 != v752);
                v751 = v1138;
              }
              MEMORY[0x1CAA32FB4](v751, 8);
              if (v1143 != &v1145)
                free(v1143);
              if ((v1097 & 1) == 0)
                MEMORY[0x1CAA32FB4](v1098, 8);
              if ((v1102 & 1) == 0)
                MEMORY[0x1CAA32FB4](v1103, 8);
              inserted = llvm::Module::getOrInsertNamedMetadata(v972, "tpp_functions", 0xDuLL);
              v1138 = 0;
              v1138 = (uint64_t (**)())llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v996, v781);
              Impl = (void *)llvm::MDTuple::getImpl(**v996, &v1138, 1, 0, 1);
              v1077 = Impl;
              v783 = *(_QWORD *)(inserted + 48);
              v784 = *(unsigned int *)(v783 + 8);
              if (v784 >= *(_DWORD *)(v783 + 12))
              {
                sub_1C5419FD8(v783, (unsigned __int8 **)&v1077);
              }
              else
              {
                v785 = (unsigned __int8 *)Impl;
                v786 = (unsigned __int8 **)(*(_QWORD *)v783 + 8 * v784);
                *v786 = v785;
                if (v785)
                {
                  llvm::MetadataTracking::track((uint64_t)v786, v785, 2);
                  LODWORD(v784) = *(_DWORD *)(v783 + 8);
                }
                *(_DWORD *)(v783 + 8) = v784 + 1;
              }
              v1097 = &v1099;
              v1098 = (void *)0x800000000;
              v787 = v996 + 9;
              v788 = v996[10];
              if (v788 != (uint64_t **)(v996 + 9))
              {
                v789 = 0;
                do
                {
                  v790 = v788 - 3;
                  if (!v788)
                    v790 = 0;
                  v791 = v790 + 5;
                  for (i4 = v790[6]; i4 != (uint64_t *)v791; i4 = (uint64_t *)i4[1])
                  {
                    if (i4)
                      v793 = i4 - 3;
                    else
                      v793 = 0;
                    if (*((_BYTE *)v793 + 16) == 84)
                    {
                      v794 = *(v793 - 4);
                      if (v794)
                      {
                        if (!*(_BYTE *)(v794 + 16)
                          && *(_QWORD *)(v794 + 24) == v793[9]
                          && (*(_BYTE *)(v794 + 33) & 0x20) != 0
                          && sub_1C47860D0(*(_DWORD *)(*(i4 - 7) + 36)))
                        {
                          if (v789 >= HIDWORD(v1098))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1097, (uint64_t)&v1099, v789 + 1, 8);
                            v789 = v1098;
                          }
                          *((_QWORD *)v1097 + v789) = i4 - 3;
                          v789 = (_DWORD)v1098 + 1;
                          LODWORD(v1098) = (_DWORD)v1098 + 1;
                        }
                      }
                    }
                  }
                  v788 = (uint64_t **)v788[1];
                }
                while (v788 != (uint64_t **)v787);
                if (v789)
                {
                  v795 = (uint64_t *)v1097;
                  v796 = (uint64_t *)((char *)v1097 + 8 * v789);
                  v1001 = v796;
                  do
                  {
                    v797 = *v795;
                    sub_1C4773D54((uint64_t)&v1077, *v795, 0, 0, 0);
                    llvm::SampleInfo::SampleInfo((uint64_t)&v1049, *(_DWORD *)(*(_QWORD *)(v797 - 32) + 36), 1);
                    v799 = *(_QWORD *)(v797 - 32 * (*(_DWORD *)(v797 + 20) & 0x7FFFFFF) + 32 * v1051);
                    v800 = (unsigned int *)(v799 + 24);
                    if (*(_DWORD *)(v799 + 32) >= 0x41u)
                      v800 = *(unsigned int **)v800;
                    v801 = (int8x8_t)*v800;
                    v802 = vcnt_s8(v801);
                    v802.i16[0] = vaddlv_u8((uint8x8_t)v802);
                    v803 = v802.i32[0];
                    v14 = v802.i32[0] == 1;
                    v802.i32[0] = v801.i32[0] + 1;
                    v804 = vcnt_s8(v802);
                    v804.i16[0] = vaddlv_u8((uint8x8_t)v804);
                    if (!v14 && v804.i32[0] == 1)
                    {
                      v1102 = v1104;
                      v1103 = 0x400000000;
                      v806 = *(_QWORD *)(v797 + 8);
                      if (v806)
                      {
                        v807 = 0;
                        do
                        {
                          v808 = *(_QWORD *)(v806 + 24);
                          if (v807 >= HIDWORD(v1103))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1102, (uint64_t)v1104, v807 + 1, 16);
                            v807 = v1103;
                          }
                          v809 = (uint64_t *)((char *)v1102 + 16 * v807);
                          *v809 = v797;
                          v809[1] = v808;
                          v807 = v1103 + 1;
                          LODWORD(v1103) = v1103 + 1;
                          v806 = *(_QWORD *)(v806 + 8);
                        }
                        while (v806);
                        if (v807)
                        {
                          v810 = 0;
                          do
                          {
                            v811 = v1102;
                            v812 = (char *)v1102 + 16 * v807;
                            v813 = *((_QWORD *)v812 - 2);
                            v814 = *((_QWORD *)v812 - 1);
                            LODWORD(v1103) = --v807;
                            v815 = *(unsigned __int8 *)(v814 + 16);
                            if (v814 && v815 == 89)
                            {
                              v816 = *(_QWORD *)(v814 - 32);
                              if (v816)
                                v817 = *(_BYTE *)(v816 + 16) == 16;
                              else
                                v817 = 0;
                              if (!v817)
                                goto LABEL_1416;
                              v818 = (_QWORD *)(v816 + 24);
                              if (*(_DWORD *)(v816 + 32) >= 0x41u)
                                v818 = (_QWORD *)*v818;
                              v819 = *(_DWORD *)v818;
                              v820 = v819 >= 4;
                              if (v819 >= 4)
                                v821 = 0;
                              else
                                v821 = 1 << v819;
                              if (v820)
                              {
                                v810 = -1;
                                goto LABEL_1418;
                              }
                              v810 |= v821;
                            }
                            else if (v814 && v815 == 92)
                            {
                              if (!**(_DWORD **)(v814 + 64))
                              {
                                for (i5 = *(_QWORD *)(v814 + 8); i5; i5 = *(_QWORD *)(i5 + 8))
                                {
                                  v840 = *(_QWORD *)(i5 + 24);
                                  if (v807 >= HIDWORD(v1103))
                                  {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1102, (uint64_t)v1104, v807 + 1, 16);
                                    v807 = v1103;
                                  }
                                  v841 = (char *)v1102 + 16 * v807;
                                  *v841 = v814;
                                  v841[1] = v840;
                                  v807 = v1103 + 1;
                                  LODWORD(v1103) = v1103 + 1;
                                }
                              }
                            }
                            else if (v814 && v815 == 77)
                            {
                              v823 = *(llvm::Type **)v814;
                              if ((*(_DWORD *)(*(_QWORD *)v814 + 8) & 0xFE) == 0x12)
                                v823 = (llvm::Type *)**((_QWORD **)v823 + 2);
                              PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v823);
                              v825 = **(_QWORD **)(v814 - 32);
                              if ((*(_DWORD *)(v825 + 8) & 0xFE) == 0x12)
                                v825 = **(_QWORD **)(v825 + 16);
                              if (PrimitiveSizeInBits != llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v825))
                              {
LABEL_1416:
                                v810 = 0;
LABEL_1418:
                                v796 = v1001;
                                goto LABEL_1419;
                              }
                              for (i6 = *(_QWORD *)(v814 + 8); i6; i6 = *(_QWORD *)(i6 + 8))
                              {
                                v827 = *(_QWORD *)(i6 + 24);
                                if (v807 >= HIDWORD(v1103))
                                {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1102, (uint64_t)v1104, v807 + 1, 16);
                                  v807 = v1103;
                                }
                                v828 = (char *)v1102 + 16 * v807;
                                *v828 = v814;
                                v828[1] = v827;
                                v807 = v1103 + 1;
                                LODWORD(v1103) = v1103 + 1;
                              }
                            }
                            else
                            {
                              if (!v814)
                                goto LABEL_1416;
                              if (v815 != 91)
                                goto LABEL_1416;
                              if (*(_DWORD *)(*(_QWORD *)v814 + 32) != 4)
                                goto LABEL_1416;
                              v829 = *(_QWORD *)(v814 - 32);
                              if (*(_QWORD *)(v814 - 64) == v829)
                                goto LABEL_1416;
                              v830 = v829 == v813;
                              v831 = *(unsigned int *)(v814 + 72);
                              if ((_DWORD)v831)
                              {
                                v832 = 4 * v830;
                                v833 = *(int **)(v814 + 64);
                                v834 = 4 * v831;
                                do
                                {
                                  v836 = *v833++;
                                  v835 = v836;
                                  v837 = v836 - v832;
                                  v838 = v836 >= v832 + 4 || v835 < v832;
                                  v839 = 1 << v837;
                                  if (v838)
                                    v839 = 0;
                                  v810 |= v839;
                                  v834 -= 4;
                                }
                                while (v834);
                              }
                            }
                          }
                          while (v807);
                          v796 = v1001;
                          if (v810)
                            goto LABEL_1415;
                        }
                      }
                      v810 = -1;
LABEL_1415:
                      v811 = v1102;
LABEL_1419:
                      if (v811 != v1104)
                        free(v811);
                      if (v810 + 1 >= 2)
                      {
                        v804.i32[0] = v810;
                        v842 = (uint8x8_t)vcnt_s8(v804);
                        v842.i16[0] = vaddlv_u8(v842);
                        if (v842.i32[0] != v803 && BYTE6(v1054) == 0)
                        {
                          v844 = v1051;
                          v845 = **(_QWORD **)(v797
                                             - 32 * (*(_DWORD *)(v797 + 20) & 0x7FFFFFF)
                                             + 32 * v1051);
                          v846 = *(llvm::ConstantInt **)v845;
                          v847 = *(unsigned int *)(v845 + 8);
                          LODWORD(v1103) = v847 >> 8;
                          if (v847 >> 8 > 0x40)
                          {
                            llvm::APInt::initSlowCase((llvm::APInt *)&v1102, v810, 0);
                          }
                          else
                          {
                            if (v847 <= 0xFF)
                              v848 = 0;
                            else
                              v848 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v847);
                            v1102 = (void *)(v848 & v810);
                          }
                          v849 = llvm::ConstantInt::get(v846, (llvm::LLVMContext *)&v1102, v798);
                          if (v1103 >= 0x41 && v1102)
                            MEMORY[0x1CAA32F9C](v1102, 0x1000C8000313F17);
                          v850 = v797 - 32 * (*(_DWORD *)(v797 + 20) & 0x7FFFFFF);
                          v851 = v850 + 32 * v844;
                          if (*(_QWORD *)v851)
                          {
                            **(_QWORD **)(v851 + 16) = *(_QWORD *)(v851 + 8);
                            v852 = *(_QWORD *)(v851 + 8);
                            if (v852)
                              *(_QWORD *)(v852 + 16) = *(_QWORD *)(v851 + 16);
                          }
                          *(_QWORD *)v851 = v849;
                          if (v849)
                          {
                            v855 = *((_QWORD *)v849 + 1);
                            v854 = (uint64_t *)((char *)v849 + 8);
                            v853 = v855;
                            v856 = v850 + 32 * v844;
                            *(_QWORD *)(v856 + 8) = v855;
                            if (v855)
                              *(_QWORD *)(v853 + 16) = v856 + 8;
                            *(_QWORD *)(v856 + 16) = v854;
                            *v854 = v851;
                          }
                        }
                      }
                    }
                    if (v1077 != &v1079)
                      free(v1077);
                    ++v795;
                  }
                  while (v795 != v796);
                }
              }
              if (*(_BYTE *)(v974 + 200))
              {
                v857 = v996;
                v858 = (uint64_t)v996;
                v859 = 1;
                v860 = 1;
              }
              else
              {
                v861 = *(_QWORD *)(v974 + 184);
                v857 = v996;
                if (v861)
                  v859 = (*(uint64_t (**)(uint64_t, uint64_t ***))(*(_QWORD *)v861 + 48))(v861, v996);
                else
                  v859 = 0;
                v858 = (uint64_t)v996;
                v860 = 0;
              }
              sub_1C5EA12A4(v858, 0, 1u, v859, v860, v971);
              for (i7 = v857[10]; i7 != (uint64_t **)v787; i7 = (uint64_t **)i7[1])
              {
                if (i7)
                  v867 = i7 - 3;
                else
                  v867 = 0;
                llvm::SimplifyInstructionsInBlock(v867, 0, v862, v863, v864, v865);
              }
              v868 = **(void ****)(v974 + 8);
              do
              {
                v869 = *v868;
                v868 += 2;
              }
              while (v869 != &llvm::FunctionGroupInfoWrapperPass::ID);
              v870 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v868 - 1) + 96))(*(v868 - 1), &llvm::FunctionGroupInfoWrapperPass::ID);
              v871 = (*(uint64_t (**)(_QWORD, uint64_t ***))(**(_QWORD **)(v870 + 32) + 24))(*(_QWORD *)(v870 + 32), v857);
              v872 = v1081;
              v1077 = v1081;
              v873 = v1071;
              if (v1071 == v1070)
              {
                __src = v1081;
                v874 = v1071;
                goto LABEL_1459;
              }
              v952 = v1072;
              v872 = malloc_type_malloc(8 * v1072, 0x4065EBACuLL);
              if (v872 || !v952 && (v872 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
              {
                __src = v872;
                v874 = v1070;
                v873 = v1071;
LABEL_1459:
                v875 = HIDWORD(v1072);
                LODWORD(v1079) = v1072;
                if (v873 == v874)
                  v876 = HIDWORD(v1072);
                else
                  v876 = v1072;
                if (v876)
                {
                  memmove(v872, v873, 8 * v876);
                  v875 = HIDWORD(v1072);
                }
                HIDWORD(v1079) = v875;
                v1080 = (int)v1073;
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v871 + 528))(v871, 16);
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v871 + 528))(v871, 15);
                (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v871 + 128))(&v1049, v871, 9);
                (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v871 + 136))(&v1102, v871, 9);
                v877 = v1049;
                v878 = v1102;
                if (v1049)
                {
                  (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)v1049 + 16))(&v1049, v1049);
                  v879 = v1049;
                }
                else
                {
                  v879 = 0;
                }
                (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)v878 + 16))(&v1049, v878);
                v880 = v1049;
                while (((*(uint64_t (**)(void *, void *))(*(_QWORD *)v879 + 24))(v879, v880) & 1) == 0)
                {
                  v881 = (*(uint64_t (**)(void *))(*(_QWORD *)v879 + 32))(v879);
                  v882 = *(_QWORD *)v881;
                  v883 = *(_QWORD *)(*(_QWORD *)v881 + 8);
                  v1049 = &v1050[1];
                  v1050[0] = (void *)0xA00000000;
                  sub_1C544AB28((unsigned int *)&v1049, v883, 0);
                  v884 = v1050[0];
                  if (LODWORD(v1050[0]))
                  {
                    v885 = 0;
                    v886 = 0;
                    do
                    {
                      v887 = *((_QWORD *)v1049 + v884 - 1);
                      LODWORD(v1050[0]) = v884 - 1;
                      v888 = *(unsigned __int8 *)(v887 + 16);
                      if (v888 == 5)
                      {
                        sub_1C544AB28((unsigned int *)&v1049, *(_QWORD *)(v887 + 8), 0);
                      }
                      else if (v888 >= 0x1C)
                      {
                        v889 = (char *)sub_1C477672C((uint64_t)&v1077, *(_QWORD *)(v887 + 40));
                        v890 = __src == v1077 ? (uint64_t *)((char *)&v1079 + 4) : &v1079;
                        v891 = (char *)__src + 8 * *(unsigned int *)v890;
                        v14 = v889 == v891;
                        v892 = v889 != v891;
                        v893 = v14;
                        v886 |= v893;
                        v885 |= v892;
                        if ((v885 & 1) != 0 && (v886 & 1) != 0)
                        {
                          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v871 + 144))(v871, 10, v882);
LABEL_1486:
                          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v871 + 144))(v871, 11, v882);
                          goto LABEL_1487;
                        }
                      }
                      v884 = v1050[0];
                    }
                    while (LODWORD(v1050[0]));
                    if ((v885 & 1) != 0)
                      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v871 + 144))(v871, 10, v882);
                    if ((v886 & 1) != 0)
                      goto LABEL_1486;
                  }
LABEL_1487:
                  if (v1049 != &v1050[1])
                    free(v1049);
                  (*(void (**)(void *))(*(_QWORD *)v879 + 40))(v879);
                }
                if (v880)
                  (*(void (**)(void *))(*(_QWORD *)v880 + 8))(v880);
                v894 = v972 + 272;
                (*(void (**)(void *))(*(_QWORD *)v879 + 8))(v879);
                (*(void (**)(void *))(*(_QWORD *)v878 + 8))(v878);
                if (v877)
                  (*(void (**)(void *))(*(_QWORD *)v877 + 8))(v877);
                v895 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v871 + 176))(v871, 18);
                if (!v895)
                {
LABEL_1495:
                  v896 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v871 + 176))(v871, 19);
                  if (!v896)
                    goto LABEL_1496;
                  if (v896 == 1)
                  {
                    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v871 + 128))(&v1049, v871, 19);
                    v930 = *(_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v1049 + 32))(v1049);
                    v931 = v1049;
                    v1049 = 0;
                    if (v931)
                      (*(void (**)(void *))(*(_QWORD *)v931 + 8))(v931);
                    if (v930)
                    {
LABEL_1596:
                      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v871 + 144))(v871, 10, v930);
                      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v871 + 144))(v871, 11, v930);
                    }
                  }
                  else
                  {
                    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v871 + 128))(&v1049, v871, 19);
                    v930 = *(_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v1049 + 32))(v1049);
                    v968 = v1049;
                    v1049 = 0;
                    if (v968)
                      (*(void (**)(void *))(*(_QWORD *)v968 + 8))(v968);
                    if (v930)
                      goto LABEL_1596;
                  }
LABEL_1496:
                  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v871 + 128))(&v1116, v871, 10);
                  (*(void (**)(unsigned __int8 **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v871 + 136))(&v1147, v871, 10);
                  v1049 = (void *)1;
                  *(int64x2_t *)v1050 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
                  v1051 = *(_OWORD *)v1050;
                  v1052 = &v1054;
                  v1053 = 0x400000000;
                  if (v1116)
                  {
                    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1116 + 16))(&v1102);
                    v897 = v1102;
                  }
                  else
                  {
                    v897 = 0;
                  }
                  v1120 = v897;
                  if (v1147)
                  {
                    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1147 + 16))(&v1102);
                    v898 = v1102;
                    v1143 = v1102;
                    sub_1C5668034((uint64_t)&v1049, &v1120, &v1143);
                    if (v898)
                      (*(void (**)(void *))(*(_QWORD *)v898 + 8))(v898);
                    if (!v897)
                      goto LABEL_1503;
                  }
                  else
                  {
                    v1143 = 0;
                    sub_1C5668034((uint64_t)&v1049, &v1120, &v1143);
                    if (!v897)
                      goto LABEL_1503;
                  }
                  (*(void (**)(void *))(*(_QWORD *)v897 + 8))(v897);
LABEL_1503:
                  v899 = v1147;
                  v1147 = 0;
                  if (v899)
                    (*(void (**)(unsigned __int8 *))(*(_QWORD *)v899 + 8))(v899);
                  v900 = v1116;
                  v1116 = 0;
                  if (v900)
                    (*(void (**)(void *))(*(_QWORD *)v900 + 8))(v900);
                  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v871 + 128))(&v1120, v871, 11);
                  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v871 + 136))(&v1143, v871, 11);
                  sub_1C5668034((uint64_t)&v1049, &v1120, &v1143);
                  v901 = v1143;
                  v1143 = 0;
                  if (v901)
                    (*(void (**)(void *))(*(_QWORD *)v901 + 8))(v901);
                  v902 = v1120;
                  v1120 = 0;
                  if (v902)
                    (*(void (**)(void *))(*(_QWORD *)v902 + 8))(v902);
                  if ((_DWORD)v1053)
                  {
                    v903 = (uint64_t *)v1052;
                    v904 = 8 * v1053;
                    do
                    {
                      v905 = *v903;
                      if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v871 + 176))(v871, 18))
                      {
                        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v871 + 128))(&v1102, v871, 18);
                        v906 = *(_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v1102 + 32))(v1102);
                        v907 = v1102;
                        v1102 = 0;
                        if (v907)
                          (*(void (**)(void *))(*(_QWORD *)v907 + 8))(v907);
                      }
                      else
                      {
                        v906 = 0;
                      }
                      if (v905 != v906)
                        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v871 + 496))(v871, v905, v894, 16);
                      ++v903;
                      v904 -= 8;
                    }
                    while (v904);
                  }
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v871 + 168))(v871, 9);
                  v908 = (uint64_t *)v1052;
                  if ((_DWORD)v1053)
                  {
                    v909 = 8 * v1053;
                    do
                    {
                      v910 = *v908++;
                      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v871 + 144))(v871, 9, v910);
                      v909 -= 8;
                    }
                    while (v909);
                    v908 = (uint64_t *)v1052;
                  }
                  if (v908 != &v1054)
                    free(v908);
                  if ((v1049 & 1) == 0)
                    MEMORY[0x1CAA32FB4](v1050[0], 8);
                  v12 = v969;
                  if (__src != v1077)
                    free(__src);
                  if (v1097 != &v1099)
                    free(v1097);
                  if (v1071 != v1070)
                    free(v1071);
                  goto LABEL_1535;
                }
                if (v895 == 1)
                {
                  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v871 + 128))(&v1049, v871, 18);
                  v928 = *(_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v1049 + 32))(v1049);
                  v929 = v1049;
                  v1049 = 0;
                  if (v929)
                    (*(void (**)(void *))(*(_QWORD *)v929 + 8))(v929);
                  if (!v928)
                    goto LABEL_1495;
                }
                else
                {
                  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v871 + 128))(&v1049, v871, 18);
                  v928 = *(_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v1049 + 32))(v1049);
                  v967 = v1049;
                  v1049 = 0;
                  if (v967)
                    (*(void (**)(void *))(*(_QWORD *)v967 + 8))(v967);
                  if (!v928)
                    goto LABEL_1495;
                }
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v871 + 496))(v871, v928, v894, 15);
                goto LABEL_1495;
              }
LABEL_1714:
              llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
            }
            v690 = (char *)v1120;
            v691 = (char *)v1120 + 16 * v1121;
            v692 = (unsigned __int8 **)(v686 + 80);
            while (2)
            {
              v693 = *(_DWORD *)v690;
              v694 = (unsigned __int8 *)*((_QWORD *)v690 + 1);
              if (v694)
              {
                if (v693)
                  goto LABEL_1179;
                v1116 = (void *)*((_QWORD *)v690 + 1);
                llvm::MetadataTracking::track((uint64_t)&v1116, v694, 2);
                v695 = *v692;
LABEL_1183:
                if (v695)
                  llvm::MetadataTracking::untrack((uint64_t)(v686 + 80), v695);
                v696 = (unsigned __int8 *)v1116;
                *v692 = (unsigned __int8 *)v1116;
                if (v696)
                  llvm::MetadataTracking::retrack((uint64_t)&v1116, v696, (uint64_t)(v686 + 80));
              }
              else
              {
                v695 = *v692;
                if (*v692 || (v686[55] & 0x20) != 0)
                {
                  if (!v693)
                  {
                    v1116 = 0;
                    goto LABEL_1183;
                  }
LABEL_1179:
                  llvm::Value::setMetadata(v687, *(_DWORD *)v690, (llvm::MDNode *)v694);
                }
              }
              v690 += 16;
              if (v690 == v691)
                goto LABEL_1273;
              continue;
            }
          }
LABEL_593:
          v93 = 0;
          goto LABEL_594;
        }
      }
      v252 = sub_1C477672C((uint64_t)&v1064, v248);
      if (*((_QWORD *)&v1064 + 1) == (_QWORD)v1064)
        v253 = (uint64_t *)((char *)&v1065 + 4);
      else
        v253 = &v1065;
      if (v252 != (_QWORD *)(*((_QWORD *)&v1064 + 1) + 8 * *(unsigned int *)v253))
      {
        v254 = sub_1C477672C((uint64_t)&v1049, v248);
        if (v1050[0] == v1049)
          v255 = (void **)((char *)&v1050[1] + 4);
        else
          v255 = &v1050[1];
        if (v254 == (_QWORD *)((char *)v1050[0] + 8 * *(unsigned int *)v255)
          || ((v256 = sub_1C477672C((uint64_t)&v1022, v248), v1023 != v1022)
            ? (v257 = &v1024)
            : (v257 = (uint64_t *)((char *)&v1024 + 4)),
              v256 != (_QWORD *)((char *)v1023 + 8 * *(unsigned int *)v257)
           || v979 != v248
           && ((v258 = sub_1C477672C((uint64_t)&v1027, v248), v1028 != v1027)
             ? (v259 = &v1029)
             : (v259 = (uint64_t *)((char *)&v1029 + 4)),
               v258 == (_QWORD *)((char *)v1028 + 8 * *(unsigned int *)v259))))
        {
          v225 = v226;
          goto LABEL_462;
        }
        goto LABEL_537;
      }
      if (v221)
        goto LABEL_463;
      v234 = *(_QWORD *)(v234 + 8);
      v226 = 1;
      v227 = 1;
      if (!v234)
        goto LABEL_541;
    }
  }
  return v12;
}

uint64_t sub_1C56671A8(uint64_t a1)
{
  uint64_t v1;

  if (!*(_DWORD *)(a1 + 3840))
    return 0;
  v1 = **(_QWORD **)(a1 + 3832);
  if (!*(_BYTE *)(a1 + 1)
    && *(_DWORD *)(*(_QWORD *)(a1 + 3360) + 32 * sub_1C560DA80(a1 + 8, *(void **)(v1 + 40)) + 16))
  {
    return 0;
  }
  return v1;
}

void sub_1C566720C(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  unsigned int i;
  uint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void *__src;
  unsigned int v32;
  _BYTE v33[40];
  void *v34;
  uint64_t v35;
  _QWORD v36[9];

  v36[8] = *MEMORY[0x1E0C80C00];
  v34 = v36;
  v35 = 0x800000000;
  sub_1C4848C0C((unsigned int *)&v34, 1uLL, a1);
  for (i = v35; i; LODWORD(v35) = i)
  {
    while (1)
    {
      v8 = *((_QWORD *)v34 + --i);
      LODWORD(v35) = i;
      if (v8)
        v9 = *(unsigned __int8 *)(v8 + 16) >= 0x1Cu;
      else
        v9 = 0;
      if (!v9)
        goto LABEL_12;
      v10 = sub_1C477672C((uint64_t)a2, v8);
      v11 = a2[1];
      v12 = v11 == *a2 ? (unsigned int *)((char *)a2 + 20) : (unsigned int *)(a2 + 2);
      if (v10 == (_QWORD *)(v11 + 8 * *v12))
        break;
      i = v35;
LABEL_12:
      if (!i)
        goto LABEL_42;
    }
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a2, v8);
    if (*(_BYTE *)(v8 + 16) == 83)
    {
      v13 = *(_DWORD *)(v8 + 20);
      if ((v13 & 0x40000000) != 0)
      {
        v15 = *(_QWORD *)(v8 - 8);
        v16 = *(unsigned int *)(v8 + 60);
        v17 = (uint64_t *)(v15 + 32 * v16);
        v14 = v13 & 0x7FFFFFF;
      }
      else
      {
        v14 = v13 & 0x7FFFFFF;
        v15 = v8 - 32 * v14;
        v16 = *(unsigned int *)(v8 + 60);
        v17 = (uint64_t *)(v15 + 32 * v16);
      }
      v18 = v15 + 32 * v16 + 8 * v14;
      while (v17 != (uint64_t *)v18)
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, *v17);
        if (v19)
        {
          sub_1C56674FC((uint64_t)&__src, (void *)*v17, (llvm::SmallPtrSetImplBase *)a3, a4);
          sub_1C486AF08((unsigned int *)&v34, __src, (_BYTE *)__src + 8 * v32);
          if (__src != v33)
            free(__src);
        }
        ++v17;
      }
    }
    if (a4)
    {
      v20 = sub_1C477672C((uint64_t)a3, *(_QWORD *)(v8 + 40));
      v21 = a3[1];
      v22 = v21 == *a3 ? (unsigned int *)((char *)a3 + 20) : (unsigned int *)(a3 + 2);
      if (v20 == (_QWORD *)(v21 + 8 * *v22))
      {
        sub_1C56674FC((uint64_t)&__src, *(void **)(v8 + 40), (llvm::SmallPtrSetImplBase *)a3, a4);
        sub_1C486AF08((unsigned int *)&v34, __src, (_BYTE *)__src + 8 * v32);
        if (__src != v33)
          free(__src);
      }
    }
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, *(_QWORD *)(v8 + 40));
    v23 = *(_DWORD *)(v8 + 20);
    if ((v23 & 0x40000000) != 0)
    {
      v25 = *(uint64_t **)(v8 - 8);
      v24 = v23 & 0x7FFFFFF;
    }
    else
    {
      v24 = v23 & 0x7FFFFFF;
      v25 = (uint64_t *)(v8 - 32 * v24);
    }
    v26 = v35;
    v27 = v24 + v35;
    if (v27 > HIDWORD(v35))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, (uint64_t)v36, v27, 8);
      v26 = v35;
      if (v24)
      {
LABEL_36:
        v28 = (char *)v34 + 8 * v26;
        v29 = 32 * v24;
        do
        {
          v30 = *v25;
          v25 += 4;
          *v28++ = v30;
          v29 -= 32;
        }
        while (v29);
      }
    }
    else if (v24)
    {
      goto LABEL_36;
    }
    i = v26 + v24;
  }
LABEL_42:
  if (v34 != v36)
    free(v34);
}

void sub_1C56674BC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C56674FC(uint64_t a1, void *a2, llvm::SmallPtrSetImplBase *a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  char *v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[2];
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36[2];
  _BYTE v37[40];
  _QWORD **v38;
  _QWORD *v39[2];
  _DWORD *v40;
  uint64_t v41;
  _QWORD v42[5];

  v42[3] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a4 + 3352) + 32 * sub_1C560DA80(a4, a2);
  v32[1] = *(_QWORD *)v7;
  v33 = &v35;
  v34 = 0x100000000;
  if (*(_DWORD *)(v7 + 16))
  {
    sub_1C560EB98((uint64_t)&v33, v7 + 8);
    v8 = v34;
  }
  else
  {
    v8 = 0;
  }
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x500000000;
  v40 = v42;
  v41 = 0x500000000;
  if (v8)
  {
    v9 = (char *)v33;
    v28 = (char *)v33 + 4 * v8;
    do
    {
      v36[0] = v37;
      v36[1] = (void *)0xA00000000;
      v39[0] = 0;
      v39[1] = 0;
      v38 = v39;
      v10 = *(_DWORD *)v9;
      v11 = v41;
      if (v41 >= (unint64_t)HIDWORD(v41))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, (uint64_t)v42, v41 + 1, 4);
        v11 = v41;
      }
      v40[v11] = v10;
      v12 = __CFADD__((_DWORD)v41, 1);
      v13 = v41 + 1;
      LODWORD(v41) = v41 + 1;
      if (!v12)
      {
        do
        {
          v14 = v40[v13 - 1];
          LODWORD(v41) = v13 - 1;
          v15 = *(_QWORD *)&v14 & 0xFFFFFFLL;
          LODWORD(v29) = v14 & 0xFFFFFF;
          if ((sub_1C560D96C((uint64_t)v36, (unsigned int *)&v29) & 0x100000000) != 0)
          {
            v16 = *(_QWORD *)(a4 + 3352) + 32 * v15;
            v17 = *(_QWORD *)v16;
            v29 = *(_QWORD *)v16;
            v30 = v32;
            v31 = 0x100000000;
            if (*(_DWORD *)(v16 + 16))
            {
              sub_1C560EB98((uint64_t)&v30, v16 + 8);
              v17 = v29;
            }
            v18 = *(_QWORD *)(v17 + 40);
            if (v18 == v17 + 40)
            {
              v20 = 0;
            }
            else
            {
              if (v18)
                v19 = v18 - 24;
              else
                v19 = 0;
              if (*(unsigned __int8 *)(v19 + 16) - 29 >= 0xB)
                v20 = 0;
              else
                v20 = v19;
            }
            sub_1C4774094(a3, v17);
            v21 = *(unsigned __int8 *)(v20 + 16);
            if (v21 == 30 && v20)
            {
              v22 = *(_QWORD *)(v20 - 96);
            }
            else
            {
              if (v21 == 32 && v20)
              {
                v23 = *(_DWORD *)(v20 + 20);
                if ((v23 & 0x40000000) != 0)
                  v24 = *(uint64_t **)(v20 - 8);
                else
                  v24 = (uint64_t *)(v20 - 32 * (v23 & 0x7FFFFFF));
              }
              else
              {
                if (v21 == 31)
                  v25 = v20;
                else
                  v25 = 0;
                v26 = *(_DWORD *)(v25 + 20);
                if ((v26 & 0x40000000) != 0)
                  v24 = *(uint64_t **)(v25 - 8);
                else
                  v24 = (uint64_t *)(v25 - 32 * (v26 & 0x7FFFFFF));
              }
              v22 = *v24;
            }
            v27 = *(unsigned int *)(a1 + 8);
            if (v27 >= *(unsigned int *)(a1 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v27 + 1, 8);
              v27 = *(unsigned int *)(a1 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v22;
            ++*(_DWORD *)(a1 + 8);
            sub_1C4C940F0((unsigned int *)&v40, v30, (_BYTE *)v30 + 4 * v31);
            if (v30 != v32)
              free(v30);
          }
          v13 = v41;
        }
        while ((_DWORD)v41);
      }
      sub_1C47655E8((uint64_t)&v38, v39[0]);
      if (v36[0] != v37)
        free(v36[0]);
      v9 += 4;
    }
    while (v9 != v28);
    if (v40 != (_DWORD *)v42)
      free(v40);
  }
  if (v33 != &v35)
    free(v33);
}

_QWORD *sub_1C5667838(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4DA97DC(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C5667894((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C5667894(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C4E590D0(a1, v7);
  v9 = 0;
  sub_1C4DA97DC((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C5667944(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v9 = v7;
        v13 = v6 + v10++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_9;
      }
      result = 0;
      if (v9)
        v7 = v9;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_9:
  *a3 = v7;
  return result;
}

uint64_t sub_1C56679E0(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  result = 0;
  if (a1)
  {
    if (*(unsigned __int8 *)(a1 + 16) >= 0x1Cu)
    {
      result = sub_1C5EA59F0((llvm::Instruction *)a1, 1);
      v5 = *((_DWORD *)a2 + 4);
      if (v5)
      {
        v6 = *(_QWORD *)(a1 + 40);
        v7 = *a2;
        v8 = v5 - 1;
        v9 = ((v6 >> 4) ^ (v6 >> 9)) & (v5 - 1);
        v10 = *(_QWORD *)(*a2 + 16 * v9);
        if (v6 == v10)
        {
LABEL_8:
          if (*(_QWORD *)(v7 + 16 * v9 + 8))
            return (5 * result);
        }
        else
        {
          v11 = 1;
          while (v10 != -4096)
          {
            v12 = v9 + v11++;
            v9 = v12 & v8;
            v10 = *(_QWORD *)(v7 + 16 * v9);
            if (v6 == v10)
              goto LABEL_8;
          }
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1C5667A88(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v9 = *(_QWORD *)(a2 + 24);
  if (v9)
  {
    if (v9 == a2)
    {
      a1[6] = a1 + 3;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1 + 3);
    }
    else
    {
      a1[6] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    }
  }
  else
  {
    a1[6] = 0;
  }
  v10 = *(_QWORD *)(a3 + 24);
  if (v10)
  {
    if (v10 == a3)
    {
      a1[10] = a1 + 7;
      (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24));
    }
    else
    {
      a1[10] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    }
  }
  else
  {
    a1[10] = 0;
  }
  v11 = *(_QWORD *)(a4 + 24);
  if (v11)
  {
    if (v11 == a4)
    {
      a1[14] = a1 + 11;
      (*(void (**)(_QWORD))(**(_QWORD **)(a4 + 24) + 24))(*(_QWORD *)(a4 + 24));
    }
    else
    {
      a1[14] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    }
  }
  else
  {
    a1[14] = 0;
  }
  a1[15] = a5;
  return a1;
}

_QWORD *sub_1C5667B98(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v12;

  v12 = a2;
  v3 = a1[10];
  if (!v3)
    goto LABEL_9;
  if (!(*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v12))
    return a1;
  v12 = a2;
  v5 = a1[14];
  if (!v5
    || (v6 = (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v5 + 48))(v5, &v12, a1[15]),
        *a1 += v6,
        v12 = a2,
        (v7 = a1[6]) == 0))
  {
LABEL_9:
    sub_1C485C2F0();
    JUMPOUT(0x1C5667C50);
  }
  v8 = v6;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 48))(v7, &v12);
  v10 = 1;
  if (v9)
    v10 = 2;
  a1[v10] += v8;
  return a1;
}

void sub_1C5667C54()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5667C68(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E8172160;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5667C9C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E8172160;
  a2[1] = v2;
  return result;
}

BOOL sub_1C5667CB8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a2;
  if (v2)
    v3 = *(unsigned __int8 *)(v2 + 16) >= 0x1Cu;
  else
    v3 = 0;
  if (!v3)
    return 0;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = sub_1C477672C(v5 + 3880, v2);
  v7 = *(_QWORD *)(v5 + 3888);
  v8 = 3896;
  if (v7 == *(_QWORD *)(v5 + 3880))
    v8 = 3900;
  return v6 != (_QWORD *)(v7 + 8 * *(unsigned int *)(v5 + v8));
}

void sub_1C5667D24()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5667D38(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E81721A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C5667D70(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E81721A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C5667D90(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD **)(a1 + 8);
  if (*(unsigned __int8 *)(*a2 + 16) <= 0x1Bu)
    v4 = 0;
  else
    v4 = *a2;
  v5 = v3[560];
  v6 = 4488;
  if (v5 == v3[559])
    v6 = 4492;
  v7 = *(unsigned int *)((char *)v3 + v6);
  if ((_DWORD)v7)
  {
    v8 = 8 * v7;
    v9 = (uint64_t *)v3[560];
    while ((unint64_t)*v9 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v9;
      v8 -= 8;
      if (!v8)
        goto LABEL_18;
    }
  }
  else
  {
    v9 = (uint64_t *)v3[560];
  }
  v10 = (uint64_t *)(v5 + 8 * v7);
  if (v9 != v10)
  {
    v11 = *v9;
LABEL_14:
    if (llvm::DominatorTreeBase<llvm::BasicBlock,true>::dominates(*(_QWORD *)(a1 + 16), v11, *(_QWORD *)(v4 + 40)))
      return 0;
    while (++v9 != v10)
    {
      v11 = *v9;
      if ((unint64_t)*v9 < 0xFFFFFFFFFFFFFFFELL)
        goto LABEL_14;
    }
  }
LABEL_18:
  if (!v4)
    return 0;
  v12 = sub_1C477672C((uint64_t)(v3 + 505), v4);
  v13 = v3[506];
  v14 = 4056;
  if (v13 == v3[505])
    v14 = 4060;
  return v12 == (_QWORD *)(v13 + 8 * *(unsigned int *)((char *)v3 + v14));
}

uint64_t sub_1C5667E94(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E81721F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C5667EAC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 8))(*a2, a3);
}

uint64_t sub_1C5667EBC(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[17];

  v14[16] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C6282FCC(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C6282FCC(a1, v14, v9);
}

uint64_t sub_1C5668034(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  unsigned int v20;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 24))(*a2, *a3);
  if ((result & 1) == 0)
  {
    do
    {
      v7 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2);
      if ((*(_BYTE *)a1 & 1) != 0)
      {
        v8 = 4;
        v9 = a1 + 8;
      }
      else
      {
        v8 = *(_DWORD *)(a1 + 16);
        if (!v8)
        {
          v16 = 0;
LABEL_10:
          *sub_1C4E48DF0(a1, (uint64_t)v7, v7, v16) = *v7;
          v17 = *(_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2);
          v18 = *(unsigned int *)(a1 + 48);
          if (v18 >= *(unsigned int *)(a1 + 52))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 40, a1 + 56, v18 + 1, 8);
            v18 = *(unsigned int *)(a1 + 48);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v18) = v17;
          ++*(_DWORD *)(a1 + 48);
          goto LABEL_13;
        }
        v9 = *(_QWORD *)(a1 + 8);
      }
      v10 = v8 - 1;
      v11 = ((*v7 >> 4) ^ (*v7 >> 9)) & v10;
      v12 = (_QWORD *)(v9 + 8 * v11);
      v13 = *v12;
      if (*v7 != *v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v19 = 0;
          else
            v19 = v13 == -8192;
          if (v19)
            v14 = v12;
          v20 = v11 + v15++;
          v11 = v20 & v10;
          v12 = (_QWORD *)(v9 + 8 * v11);
          v13 = *v12;
          if (*v7 == *v12)
            goto LABEL_13;
        }
        if (v14)
          v16 = v14;
        else
          v16 = v12;
        goto LABEL_10;
      }
LABEL_13:
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 24))(*a2, *a3);
    }
    while (!(_DWORD)result);
  }
  return result;
}

uint64_t sub_1C56681CC()
{
  int v1;
  int v2;
  int *v3;
  __n128 v4;

  v1 = 1;
  v2 = -1;
  v3 = &v2;
  v4.n128_u64[0] = (unint64_t)"Enable deferred VS attribute shading pass";
  v4.n128_u64[1] = 41;
  sub_1C6282884((llvm::cl::Option *)&unk_1ED809000, "deferred-attribute-pass", &v3, &v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED809000, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Definitely do if redundant sample ratio is less than";
  v4.n128_u64[1] = 52;
  v1 = 1;
  v2 = 50;
  v3 = &v2;
  sub_1C61D8E94((uint64_t)&unk_1ED8090C0, "tpp-smp-ratio", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED8090C0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Transform if all else is inconclusive and redundant cost ratio is less than";
  v4.n128_u64[1] = 75;
  v1 = 1;
  v2 = 50;
  v3 = &v2;
  sub_1C61D8E94((uint64_t)&algn_1ED809144[60], "tpp-cost-ratio", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &algn_1ED809144[60], &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Transform if the latency of the shader is at least this amount";
  v4.n128_u64[1] = 62;
  v1 = 1;
  v2 = 200;
  v3 = &v2;
  sub_1C61D8E94((uint64_t)&unk_1ED809240, "tpp-clique-overhead", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED809240, &dword_1C475E000);
}

_QWORD *sub_1C566834C(uint64_t **a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t inserted;
  unsigned __int8 *v11;
  uint64_t *v12;
  llvm::ConstantAggregateZero *v13;
  uint64_t *v14;
  llvm::UndefValue *v15;
  llvm::Value *v16;
  unsigned __int8 *Impl;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _QWORD *result;
  _QWORD *v22;
  llvm::Value **v23;
  llvm::Value **v24;
  llvm::Value **v25;
  llvm::Value **v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  inserted = llvm::Module::getOrInsertNamedMetadata((uint64_t)a1, "agx.dma-list", 0xCuLL);
  v11 = (unsigned __int8 *)(**a1 + 1960);
  v12 = *(uint64_t **)v11;
  v23 = (llvm::Value **)v11;
  v24 = (llvm::Value **)v11;
  v25 = (llvm::Value **)v11;
  v26 = (llvm::Value **)v11;
  v13 = (llvm::ConstantAggregateZero *)llvm::StructType::get(v12, (uint64_t)&v23, 4, 0);
  v14 = *a1;
  v23 = llvm::ConstantInt::get((llvm::ConstantInt *)v11, a2, 0);
  v24 = llvm::ConstantInt::get((llvm::ConstantInt *)v11, a3, 0);
  v25 = llvm::ConstantInt::get((llvm::ConstantInt *)v11, a4, 0);
  v26 = llvm::ConstantInt::get((llvm::ConstantInt *)v11, a5, 0);
  v15 = llvm::ConstantStruct::get(v13, (llvm::Type *)&v23, 4);
  v22 = llvm::ValueAsMetadata::get(v15, v16);
  Impl = (unsigned __int8 *)llvm::MDTuple::getImpl(v14, &v22, 1, 0, 1);
  v23 = (llvm::Value **)Impl;
  v18 = *(_QWORD *)(inserted + 48);
  v19 = *(unsigned int *)(v18 + 8);
  if (v19 >= *(_DWORD *)(v18 + 12))
    return (_QWORD *)sub_1C5419FD8(v18, (unsigned __int8 **)&v23);
  v20 = Impl;
  result = (_QWORD *)(*(_QWORD *)v18 + 8 * v19);
  *result = v20;
  if (v20)
  {
    result = (_QWORD *)llvm::MetadataTracking::track((uint64_t)result, v20, 2);
    LODWORD(v19) = *(_DWORD *)(v18 + 8);
  }
  *(_DWORD *)(v18 + 8) = v19 + 1;
  return result;
}

uint64_t sub_1C56684D4(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED809300;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E8172238;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED809308);
  if (v3 != -1)
  {
    v7[0] = sub_1C566859C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED809308, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C566859C(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeFunctionGroupInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "TrimVertexDMAList";
  *(_QWORD *)(v2 + 8) = 17;
  *(_QWORD *)(v2 + 16) = "trim-vi-dma-list";
  *(_QWORD *)(v2 + 24) = 16;
  *(_QWORD *)(v2 + 32) = &unk_1ED809300;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C566A1A4;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void sub_1C5668634(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5668658(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
}

uint64_t sub_1C5668694(uint64_t a1, uint64_t a2)
{
  uint64_t NamedMetadata;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  void **v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  unsigned int v50;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  char v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  unsigned int v78;
  BOOL v79;
  unsigned int v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  char *v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  uint64_t v94;
  unsigned int v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  int v112;
  char *v113;
  int v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t *v119;
  char *v120;
  unsigned int v121;
  unint64_t v122;
  uint64_t v123;
  unsigned int v124;
  unint64_t v125;
  unint64_t v126;
  BOOL v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t *v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  llvm::PointerType *v144;
  std::string *v145;
  std::string::size_type v146;
  unsigned __int8 *v147;
  unint64_t v148;
  uint64_t v149;
  llvm::Function *v150;
  __int16 v151;
  llvm::Value *v152;
  unsigned int *v153;
  unsigned int *v154;
  uint64_t *v155;
  unsigned int *v156;
  unint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  int v161;
  unsigned int v162;
  uint64_t **v163;
  uint64_t *v164;
  uint64_t **v165;
  int v166;
  BOOL v167;
  unsigned int v168;
  uint64_t v169;
  llvm::MDNode **v170;
  uint64_t v171;
  llvm::MDNode *v172;
  uint64_t v173;
  llvm::Function *v174;
  uint64_t **v175;
  uint64_t *v176;
  unsigned int **v177;
  llvm::Function *v178;
  uint64_t v179;
  unint64_t v180;
  unsigned int v181;
  uint64_t **v182;
  uint64_t v183;
  char *v184;
  uint64_t *v185;
  unsigned int v186;
  uint64_t *v187;
  char *v188;
  unint64_t v189;
  void *__p;
  char *v191;
  char *v192;
  std::string v193;
  void *v194[2];
  uint64_t v195;
  unint64_t v196;
  void *v197;
  uint64_t v198;
  _BYTE v199[256];
  void *v200;
  uint64_t v201;
  _WORD v202[128];
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v200 = "agx.dma-list";
  v202[8] = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(a2, (uint64_t)&v200);
  if (!NamedMetadata)
    return 0;
  v5 = NamedMetadata;
  v6 = sub_1C4FB7E80(*(uint64_t **)(a2 + 112), "agc.main", 8uLL);
  if (!v6 || *(_BYTE *)(v6 + 16))
    return 0;
  v197 = v199;
  v198 = 0x1000000000;
  v9 = *(unsigned int *)(*(_QWORD *)(v5 + 48) + 8);
  if ((_DWORD)v9)
  {
    v182 = (uint64_t **)a2;
    v10 = 0;
    v11 = 0;
    v12 = 8 * v9;
    do
    {
      v13 = *(_QWORD *)(**(_QWORD **)(v5 + 48) + v10);
      v14 = *(_QWORD *)(*(_QWORD *)(v13 - 8 * *(unsigned int *)(v13 + 8)) + 128);
      v15 = (_QWORD *)(v14 - 32 * (*(_DWORD *)(v14 + 20) & 0x7FFFFFF));
      v16 = (unsigned int *)(*v15 + 24);
      if (*(_DWORD *)(*v15 + 32) >= 0x41u)
        v16 = *(unsigned int **)v16;
      v17 = v15[4];
      v18 = (_QWORD *)(v17 + 24);
      if (*(_DWORD *)(v17 + 32) >= 0x41u)
        v18 = (_QWORD *)*v18;
      v19 = v15[8];
      v20 = (unsigned int *)(v19 + 24);
      if (*(_DWORD *)(v19 + 32) >= 0x41u)
        v20 = *(unsigned int **)v20;
      v21 = v15[12];
      v22 = (_QWORD *)(v21 + 24);
      if (*(_DWORD *)(v21 + 32) >= 0x41u)
        v22 = (_QWORD *)*v22;
      v23 = *v16;
      v24 = (_QWORD *)*v18;
      v25 = *v20;
      v26 = (_QWORD *)*v22;
      if (v11 >= HIDWORD(v198))
      {
        v28 = v6;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v197, (uint64_t)v199, v11 + 1, 16);
        v6 = v28;
        v11 = v198;
      }
      v27 = (uint64_t *)((char *)v197 + 16 * v11);
      *v27 = v23 | ((_QWORD)v24 << 32);
      v27[1] = v25 | ((_QWORD)v26 << 32);
      v11 = v198 + 1;
      LODWORD(v198) = v198 + 1;
      v10 += 8;
    }
    while (v12 != v10);
    if (v11)
    {
      __p = 0;
      v191 = 0;
      v192 = 0;
      v29 = *(_QWORD *)(v6 + 96);
      v196 = 1;
      if (v29 > 0x39)
      {
        v173 = v6;
        v30 = operator new();
        *(_QWORD *)v30 = v30 + 16;
        *(_QWORD *)(v30 + 8) = 0x600000000;
        sub_1C4765AA4((char *)v30, (v29 + 63) >> 6, 0);
        v6 = v173;
        *(_DWORD *)(v30 + 64) = v29;
      }
      else
      {
        v30 = (v29 << 58) | 1;
      }
      v196 = v30;
      if ((*(_WORD *)(v6 + 18) & 1) != 0)
      {
        v33 = v6;
        llvm::Function::BuildLazyArguments((llvm::Function *)v6);
        v31 = (unsigned int **)(v33 + 88);
        v32 = *(_QWORD *)(v33 + 88);
        if ((*(_WORD *)(v33 + 18) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments((llvm::Function *)v33);
          v31 = (unsigned int **)(v33 + 88);
          v6 = v33;
          v34 = *(_QWORD *)(v33 + 88);
          goto LABEL_29;
        }
        v6 = v33;
      }
      else
      {
        v31 = (unsigned int **)(v6 + 88);
        v32 = *(_QWORD *)(v6 + 88);
      }
      v34 = v32;
LABEL_29:
      v35 = v34 + 40 * *(_QWORD *)(v6 + 96);
      if (v32 == v35)
        goto LABEL_42;
      v36 = 0;
      while (2)
      {
        v32 += 40;
        while (*(_QWORD *)(v32 - 32))
        {
          v37 = *(_DWORD *)(v32 - 8);
          if ((v196 & 1) != 0)
            v196 = v196 & 0xFC00000000000000 | (2
                                                * (((v196 >> 1) & ~(-1 << (v196 >> 58)) | (1 << v37)) & ~(-1 << (v196 >> 58)))) | 1;
          else
            *(_QWORD *)(*(_QWORD *)v196 + 8 * (v37 >> 6)) |= 1 << v37;
          v167 = v32 == v35;
          v32 += 40;
          if (v167)
          {
            if ((v36 & 1) == 0)
            {
LABEL_42:
              v38 = v6;
              goto LABEL_43;
            }
            goto LABEL_50;
          }
        }
        v36 = 1;
        if (v32 != v35)
          continue;
        break;
      }
LABEL_50:
      v179 = a1;
      v189 = v29;
      v177 = v31;
      v178 = (llvm::Function *)v6;
      if (!(_DWORD)v198)
      {
        v185 = 0;
        v43 = 0;
        v44 = 0;
LABEL_52:
        v45 = v43 - v185;
        v46 = 126 - 2 * __clz(v45);
        if (v43 == v185)
          v47 = 0;
        else
          v47 = v46;
        sub_1C5669758(v185, v43, v47, 1);
        LODWORD(v48) = 16 - v44;
        if (v44 <= 0x10)
          v48 = v48;
        else
          v48 = 0;
        if (v45 > v48)
        {
          if (v44 >= 0x10)
            v49 = 16;
          else
            v49 = v44;
          v50 = 17 - v49;
          do
          {
            sub_1C49144A0(&v196, v185[v48], HIDWORD(v185[v48]) + LODWORD(v185[v48]));
            v48 = v50;
          }
          while (v45 > v50++);
        }
        v52 = v189;
        sub_1C515E708((uint64_t)&__p, v189);
        if (!v189)
        {
          LODWORD(v53) = 0;
LABEL_176:
          v181 = v53;
          v200 = v202;
          v201 = 0x1000000000;
          if ((_DWORD)v198)
          {
            v120 = (char *)v197;
            v188 = (char *)v197 + 16 * v198;
            do
            {
              v122 = *(unsigned int *)v120;
              v121 = *((_DWORD *)v120 + 1);
              v123 = (v189 << 58) | 1;
              v194[0] = (void *)1;
              if (v189 >= 0x3A)
              {
                v123 = operator new();
                *(_QWORD *)v123 = v123 + 16;
                *(_QWORD *)(v123 + 8) = 0x600000000;
                sub_1C4765AA4((char *)v123, (v189 + 63) >> 6, 0);
                *(_DWORD *)(v123 + 64) = v189;
              }
              v194[0] = (void *)v123;
              v124 = v121 + v122;
              sub_1C49144A0((unint64_t *)v194, v122, v121 + v122);
              sub_1C496F35C((unint64_t *)v194, &v196);
              v125 = (unint64_t)v194[0];
              if (((uint64_t)v194[0] & 1) != 0)
                v126 = (1 << v122) & ((unint64_t)v194[0] >> 1) & ~(-1 << ((unint64_t)v194[0] >> 58));
              else
                v126 = *(_QWORD *)(*(_QWORD *)v194[0] + ((v122 >> 3) & 0x1FFFFFF8)) & (1 << v122);
              v127 = v126 != 0;
              v128 = v122 + 1;
              if ((int)v122 + 1 >= v124)
              {
                v130 = v122;
              }
              else
              {
                v129 = v121 - 1;
                v130 = v122;
                do
                {
                  if ((v125 & 1) != 0)
                    v131 = (1 << v128) & (v125 >> 1) & ~(-1 << (v125 >> 58));
                  else
                    v131 = *(_QWORD *)(*(_QWORD *)v125 + 8 * (v128 >> 6)) & (1 << v128);
                  if (v127 != (v131 != 0))
                  {
                    if (v127)
                    {
                      v132 = *((_QWORD *)v120 + 1);
                      v133 = *((unsigned int *)__p + v130);
                      v134 = v201;
                      if (v201 >= (unint64_t)HIDWORD(v201))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v200, (uint64_t)v202, v201 + 1, 16);
                        v134 = v201;
                      }
                      v135 = (unint64_t *)((char *)v200 + 16 * v134);
                      *v135 = v133 | ((unint64_t)(v128 - v130) << 32);
                      v135[1] = v132 & 0xFFFFFFFF00000000 | (v130 - v122 + v132);
                      LODWORD(v201) = v201 + 1;
                      v125 = (unint64_t)v194[0];
                    }
                    if ((v125 & 1) != 0)
                      v136 = (1 << v128) & (v125 >> 1) & ~(-1 << (v125 >> 58));
                    else
                      v136 = *(_QWORD *)(*(_QWORD *)v125 + 8 * (v128 >> 6)) & (1 << v128);
                    v127 = v136 != 0;
                    v130 = v128;
                  }
                  ++v128;
                  --v129;
                }
                while (v129);
              }
              if (v127)
              {
                v137 = *((_QWORD *)v120 + 1);
                v138 = *((unsigned int *)__p + v130);
                v139 = v201;
                if (v201 >= (unint64_t)HIDWORD(v201))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v200, (uint64_t)v202, v201 + 1, 16);
                  v139 = v201;
                }
                v140 = (unint64_t *)((char *)v200 + 16 * v139);
                *v140 = v138 | ((unint64_t)(v124 - v130) << 32);
                v140[1] = v137 & 0xFFFFFFFF00000000 | (v130 - v122 + v137);
                LODWORD(v201) = v201 + 1;
              }
              sub_1C4914448((void ***)v194);
              v120 += 16;
            }
            while (v120 != v188);
          }
          v115 = (uint64_t)v182;
          v116 = *v182;
          v117 = **v182;
          if (v181)
          {
            v141 = v117 + 1672;
            v142 = (uint64_t *)operator new(8 * v181);
            v118 = v142;
            v143 = 0;
            v119 = &v142[v181];
            do
              v142[v143++] = v141;
            while (v181 != v143);
            v117 = *v116;
            v115 = (uint64_t)v182;
          }
          else
          {
            v118 = 0;
            v119 = 0;
          }
          v144 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(v117 + 1576), v118, v119 - v118, 0);
          *((_BYTE *)&v193.__r_.__value_.__s + 23) = 8;
          strcpy((char *)&v193, "agc.main");
          v145 = std::string::append(&v193, ".vi_trimmed");
          v146 = v145->__r_.__value_.__r.__words[2];
          *(_OWORD *)v194 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
          v195 = v146;
          v145->__r_.__value_.__l.__size_ = 0;
          v145->__r_.__value_.__r.__words[2] = 0;
          v145->__r_.__value_.__r.__words[0] = 0;
          if (v195 >= 0)
            v147 = (unsigned __int8 *)v194;
          else
            v147 = (unsigned __int8 *)v194[0];
          if (v195 >= 0)
            v148 = HIBYTE(v195) & 0x7F;
          else
            v148 = (unint64_t)v194[1];
          llvm::Module::getOrInsertFunction(v115, v147, v148, v144, 0);
          v38 = v149;
          if (SHIBYTE(v195) < 0)
            operator delete(v194[0]);
          if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v193.__r_.__value_.__l.__data_);
          v150 = v178;
          v151 = *(_WORD *)(v38 + 18);
          *(_WORD *)(v38 + 18) = v151 & 0xC00F | *((_WORD *)v178 + 9) & 0x3FF0;
          if ((v151 & 1) != 0)
          {
            llvm::Function::BuildLazyArguments((llvm::Function *)v38);
            v150 = v178;
          }
          v152 = *(llvm::Value **)(v38 + 88);
          if ((*((_WORD *)v150 + 9) & 1) != 0)
          {
            v174 = v150;
            llvm::Function::BuildLazyArguments(v150);
            v153 = (unsigned int *)*((_QWORD *)v174 + 11);
            if ((*((_WORD *)v174 + 9) & 1) != 0)
            {
              llvm::Function::BuildLazyArguments(v174);
              v150 = v174;
              v154 = (unsigned int *)*((_QWORD *)v174 + 11);
LABEL_226:
              v155 = (uint64_t *)v150;
              v156 = &v154[10 * *((_QWORD *)v150 + 12)];
              if (v153 != v156)
              {
                while (1)
                {
                  v157 = v153[8];
                  if ((v196 & 1) == 0)
                    break;
                  if (((1 << v157) & (v196 >> 1) & ~(-1 << (v196 >> 58))) != 0)
                    goto LABEL_231;
LABEL_232:
                  v153 += 10;
                  if (v153 == v156)
                    goto LABEL_233;
                }
                if ((*(_QWORD *)(*(_QWORD *)v196 + ((v157 >> 3) & 0x1FFFFFF8)) & (1 << v153[8])) == 0)
                  goto LABEL_232;
LABEL_231:
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v153, v152, (llvm::Value *)1);
                v152 = (llvm::Value *)((char *)v152 + 40);
                goto LABEL_232;
              }
LABEL_233:
              sub_1C566A128(v38 + 72, (uint64_t *)(v38 + 72), v155 + 9);
              *(_QWORD *)(v38 + 112) = v155[14];
              if ((*((_BYTE *)v155 + 23) & 0x20) == 0)
              {
                v172 = 0;
                a1 = v179;
                goto LABEL_253;
              }
              v158 = **(_QWORD **)*v155;
              v194[0] = v155;
              v159 = *(_DWORD *)(v158 + 2496);
              a1 = v179;
              if (v159)
              {
                v160 = *(_QWORD *)(v158 + 2480);
                v161 = v159 - 1;
                v162 = v161 & ((v155 >> 4) ^ (v155 >> 9));
                v163 = (uint64_t **)(v160 + 40 * v162);
                v164 = *v163;
                if (*v163 == v155)
                  goto LABEL_244;
                v165 = 0;
                v166 = 1;
                while (v164 != (uint64_t *)-4096)
                {
                  if (v165)
                    v167 = 0;
                  else
                    v167 = v164 == (uint64_t *)-8192;
                  if (v167)
                    v165 = v163;
                  v168 = v162 + v166++;
                  v162 = v168 & v161;
                  v163 = (uint64_t **)(v160 + 40 * v162);
                  v164 = *v163;
                  if (*v163 == v155)
                    goto LABEL_244;
                }
                if (v165)
                  v175 = v165;
                else
                  v175 = v163;
              }
              else
              {
                v175 = 0;
              }
              v163 = (uint64_t **)sub_1C541AB24(v158 + 2480, (uint64_t)v194, (uint64_t *)v194, v175);
              v176 = (uint64_t *)v194[0];
              v163[3] = 0;
              v163[4] = 0;
              *v163 = v176;
              v163[1] = (uint64_t *)(v163 + 3);
              v163[2] = (uint64_t *)0x100000000;
              a1 = v179;
LABEL_244:
              v169 = *((unsigned int *)v163 + 4);
              if ((_DWORD)v169)
              {
                v170 = (llvm::MDNode **)(v163[1] + 1);
                v171 = 16 * v169;
                v172 = 0;
                while (*((_DWORD *)v170 - 2))
                {
                  v170 += 2;
                  v171 -= 16;
                  if (!v171)
                    goto LABEL_253;
                }
                v172 = *v170;
              }
              else
              {
                v172 = 0;
              }
LABEL_253:
              llvm::Value::setMetadata((llvm::Value *)v38, 0, v172);
              llvm::Function::eraseFromParent((llvm::Function *)v155);
              sub_1C6180FA8((uint64_t)&v197, (uint64_t)&v200);
              if (v118)
                operator delete(v118);
              if (v200 != v202)
                free(v200);
              if (v185)
                operator delete(v185);
LABEL_43:
              sub_1C4914448((void ***)&v196);
              v39 = **(void ****)(a1 + 8);
              do
              {
                v40 = *v39;
                v39 += 2;
              }
              while (v40 != &llvm::FunctionGroupInfoWrapperPass::ID);
              v41 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v39 - 1) + 96))(*(v39 - 1), &llvm::FunctionGroupInfoWrapperPass::ID);
              v42 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v41 + 32) + 24))(*(_QWORD *)(v41 + 32), v38);
              (*(void (**)(uint64_t, void *, _QWORD))(*(_QWORD *)v42 + 200))(v42, v197, v198);
              (*(void (**)(uint64_t))(*(_QWORD *)v42 + 216))(v42);
              if (__p)
              {
                v191 = (char *)__p;
                operator delete(__p);
              }
              v7 = 1;
              goto LABEL_48;
            }
            v150 = v174;
          }
          else
          {
            v153 = *v177;
          }
          v154 = v153;
          goto LABEL_226;
        }
        v93 = 0;
        v94 = 0;
        v95 = 0;
        while (1)
        {
          if ((v196 & 1) != 0)
          {
            if (((1 << v93) & (v196 >> 1) & ~(-1 << (v196 >> 58))) != 0)
            {
LABEL_138:
              v53 = (v94 + 1);
              v96 = v191;
              if (v191 >= v192)
              {
                v99 = (char *)__p;
                v100 = (v191 - (_BYTE *)__p) >> 2;
                v101 = v100 + 1;
                if ((unint64_t)(v100 + 1) >> 62)
                  goto LABEL_266;
                v102 = v192 - (_BYTE *)__p;
                if ((v192 - (_BYTE *)__p) >> 1 > v101)
                  v101 = v102 >> 1;
                if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL)
                  v103 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v103 = v101;
                if (v103)
                {
                  if (v103 >> 62)
                    goto LABEL_267;
                  v104 = (char *)operator new(4 * v103);
                }
                else
                {
                  v104 = 0;
                }
                v111 = &v104[4 * v100];
                *(_DWORD *)v111 = v94;
                v97 = v111 + 4;
                while (v96 != v99)
                {
                  v112 = *((_DWORD *)v96 - 1);
                  v96 -= 4;
                  *((_DWORD *)v111 - 1) = v112;
                  v111 -= 4;
                }
                __p = v111;
                v191 = v97;
                v192 = &v104[4 * v103];
                if (v99)
                  operator delete(v99);
LABEL_174:
                v52 = v189;
                goto LABEL_175;
              }
              *(_DWORD *)v191 = v94;
              v97 = v96 + 4;
              goto LABEL_175;
            }
          }
          else if ((*(_QWORD *)(*(_QWORD *)v196 + 8 * (v95 >> 6)) & (1 << v95)) != 0)
          {
            goto LABEL_138;
          }
          v98 = v191;
          if (v191 >= v192)
          {
            v105 = (char *)__p;
            v106 = (v191 - (_BYTE *)__p) >> 2;
            v107 = v106 + 1;
            if ((unint64_t)(v106 + 1) >> 62)
              goto LABEL_266;
            v108 = v192 - (_BYTE *)__p;
            if ((v192 - (_BYTE *)__p) >> 1 > v107)
              v107 = v108 >> 1;
            if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL)
              v109 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v109 = v107;
            if (v109)
            {
              if (v109 >> 62)
                goto LABEL_267;
              v110 = (char *)operator new(4 * v109);
            }
            else
            {
              v110 = 0;
            }
            v113 = &v110[4 * v106];
            *(_DWORD *)v113 = -1;
            v97 = v113 + 4;
            while (v98 != v105)
            {
              v114 = *((_DWORD *)v98 - 1);
              v98 -= 4;
              *((_DWORD *)v113 - 1) = v114;
              v113 -= 4;
            }
            __p = v113;
            v191 = v97;
            v192 = &v110[4 * v109];
            if (v105)
              operator delete(v105);
            v53 = v94;
            goto LABEL_174;
          }
          *(_DWORD *)v191 = -1;
          v97 = v98 + 4;
          v53 = v94;
LABEL_175:
          v191 = v97;
          v94 = v53;
          v93 = ++v95;
          if (v52 <= v95)
            goto LABEL_176;
        }
      }
      v44 = 0;
      v187 = 0;
      v43 = 0;
      v185 = 0;
      v54 = (char *)v197;
      v55 = (char *)v197 + 16 * v198;
      v180 = (v29 + 63) >> 6;
      v56 = (v29 << 58) | 1;
      v183 = v56;
      v184 = v55;
      while (1)
      {
        v58 = *(unsigned int *)v54;
        v57 = *((_DWORD *)v54 + 1);
        v59 = v56;
        v200 = (void *)1;
        if (v189 >= 0x3A)
        {
          v59 = operator new();
          *(_QWORD *)v59 = v59 + 16;
          *(_QWORD *)(v59 + 8) = 0x600000000;
          sub_1C4765AA4((char *)v59, v180, 0);
          *(_DWORD *)(v59 + 64) = v189;
        }
        v200 = (void *)v59;
        v60 = v57 + v58;
        sub_1C49144A0((unint64_t *)&v200, v58, v57 + v58);
        if ((v200 & 1) != 0)
        {
          v68 = (unint64_t)v200 >> 58;
          if ((v196 & 1) != 0)
          {
            if ((((v196 & (unint64_t)v200) >> 1) & ~((-1 << (v196 >> 58)) | (-1 << v68))) == 0)
              goto LABEL_133;
            goto LABEL_95;
          }
          v69 = *(unsigned int *)(v196 + 64);
        }
        else
        {
          if ((v196 & 1) == 0)
          {
            LODWORD(v61) = *((_DWORD *)v200 + 2);
            v62 = *(_DWORD *)(v196 + 8);
            if (v62 >= v61)
              v61 = v61;
            else
              v61 = v62;
            if (!(_DWORD)v61)
              goto LABEL_133;
            v63 = *(uint64_t **)v200;
            v64 = *(uint64_t **)v196;
            while (1)
            {
              v66 = *v63++;
              v65 = v66;
              v67 = *v64++;
              if ((v67 & v65) != 0)
                goto LABEL_95;
              if (!--v61)
                goto LABEL_133;
            }
          }
          v68 = *((unsigned int *)v200 + 16);
          v69 = v196 >> 58;
        }
        if (v69 < v68)
          v68 = v69;
        if (!v68)
          goto LABEL_133;
        v70 = 0;
        while (1)
        {
          v71 = v70;
          v72 = ((unint64_t)v200 >> 1) & ~(-1 << ((unint64_t)v200 >> 58));
          if ((v200 & 1) == 0)
          {
            v71 = v70 & 0x3F;
            v72 = *(_QWORD *)(*(_QWORD *)v200 + 8 * (v70 >> 6));
          }
          if (((v72 >> v71) & 1) != 0)
          {
            v73 = v70;
            v74 = (v196 >> 1) & ~(-1 << (v196 >> 58));
            if ((v196 & 1) == 0)
            {
              v73 = v70 & 0x3F;
              v74 = *(_QWORD *)(*(_QWORD *)v196 + 8 * (v70 >> 6));
            }
            if (((v74 >> v73) & 1) != 0)
              break;
          }
          if (v68 == ++v70)
            goto LABEL_133;
        }
LABEL_95:
        sub_1C496F35C((unint64_t *)&v200, &v196);
        v75 = (unint64_t)v200;
        if ((v200 & 1) != 0)
          v76 = (1 << v58) & ((unint64_t)v200 >> 1) & ~(-1 << ((unint64_t)v200 >> 58));
        else
          v76 = *(_QWORD *)(*(_QWORD *)v200 + ((v58 >> 3) & 0x1FFFFFF8)) & (1 << v58);
        v77 = v185;
        v186 = v44;
        v78 = v58 + 1;
        if ((int)v58 + 1 < v60)
        {
          v79 = v76 != 0;
          v80 = v58;
          v81 = v187;
          while (1)
          {
            v82 = (v75 & 1) != 0
                ? (1 << v78) & (v75 >> 1) & ~(-1 << (v75 >> 58))
                : *(_QWORD *)(*(_QWORD *)v75 + 8 * (v78 >> 6)) & (1 << v78);
            if (v79 != (v82 != 0))
              break;
            v84 = v43;
LABEL_129:
            if (v60 == ++v78)
              goto LABEL_132;
          }
          if (v79 || v80 == (_DWORD)v58)
          {
LABEL_107:
            v84 = v43;
          }
          else
          {
            v83 = v78 - v80;
            if (v43 < v81)
            {
              *v43++ = v80 | (unint64_t)(v83 << 32);
              goto LABEL_107;
            }
            v85 = v43 - v77;
            v86 = v85 + 1;
            if ((unint64_t)(v85 + 1) >> 61)
LABEL_266:
              abort();
            if (((char *)v81 - (char *)v77) >> 2 > v86)
              v86 = ((char *)v81 - (char *)v77) >> 2;
            if ((unint64_t)((char *)v81 - (char *)v77) >= 0x7FFFFFFFFFFFFFF8)
              v87 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v87 = v86;
            if (v87)
            {
              if (v87 >> 61)
LABEL_267:
                sub_1C4764EE4();
              v88 = v77;
              v89 = (char *)operator new(8 * v87);
              v77 = v88;
            }
            else
            {
              v89 = 0;
            }
            v90 = (uint64_t *)&v89[8 * v85];
            *v90 = v80 | (unint64_t)(v83 << 32);
            v84 = v90 + 1;
            while (v43 != v77)
            {
              v91 = *--v43;
              *--v90 = v91;
            }
            v81 = (uint64_t *)&v89[8 * v87];
            if (v77)
              operator delete(v77);
            v77 = v90;
          }
          v75 = (unint64_t)v200;
          if ((v200 & 1) != 0)
            v92 = (1 << v78) & ((unint64_t)v200 >> 1) & ~(-1 << ((unint64_t)v200 >> 58));
          else
            v92 = *(_QWORD *)(*(_QWORD *)v200 + 8 * (v78 >> 6)) & (1 << v78);
          v79 = v92 != 0;
          v80 = v78;
          v43 = v84;
          goto LABEL_129;
        }
        v84 = v43;
        v81 = v187;
LABEL_132:
        v187 = v81;
        v185 = v77;
        v44 = v186 + 1;
        v43 = v84;
        v56 = v183;
        v55 = v184;
LABEL_133:
        sub_1C4914448((void ***)&v200);
        v54 += 16;
        if (v54 == v55)
          goto LABEL_52;
      }
    }
  }
  v7 = 0;
LABEL_48:
  if (v197 != v199)
    free(v197);
  return v7;
}

uint64_t *sub_1C5669758(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t *v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t *v36;
  uint64_t *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  BOOL v51;
  uint64_t v52;
  _QWORD *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  _QWORD *v60;
  int64_t v61;
  int64_t v62;
  int64_t v63;
  uint64_t v64;
  unint64_t v65;
  BOOL v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;

  v7 = (uint64_t)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*((_DWORD *)a2 - 1) > *(_DWORD *)(v8 + 4))
        {
          v43 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *(a2 - 1);
          *(a2 - 1) = v43;
        }
        return result;
      case 3:
        return sub_1C5669E2C((uint64_t *)v8, (uint64_t *)(v8 + 8), a2 - 1);
      case 4:
        return sub_1C566A094(v8, v8 + 8, v8 + 16, (uint64_t)(a2 - 1));
      case 5:
        result = sub_1C566A094(v8, v8 + 8, v8 + 16, v8 + 24);
        if (*((_DWORD *)a2 - 1) > *(_DWORD *)(v8 + 28))
        {
          v44 = *(_QWORD *)(v8 + 24);
          *(_QWORD *)(v8 + 24) = *(a2 - 1);
          *(a2 - 1) = v44;
          if (*(_DWORD *)(v8 + 28) > *(_DWORD *)(v8 + 20))
          {
            v46 = *(_QWORD *)(v8 + 16);
            v45 = *(_QWORD *)(v8 + 24);
            *(_QWORD *)(v8 + 16) = v45;
            *(_QWORD *)(v8 + 24) = v46;
            if (*(_DWORD *)(v8 + 12) < HIDWORD(v45))
            {
              v47 = *(_QWORD *)(v8 + 8);
              *(_QWORD *)(v8 + 8) = v45;
              *(_QWORD *)(v8 + 16) = v47;
              if (*(_DWORD *)(v8 + 4) < HIDWORD(v45))
              {
                v48 = *(_QWORD *)v8;
                *(_QWORD *)v8 = v45;
                *(_QWORD *)(v8 + 8) = v48;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v49 = (uint64_t *)(v8 + 8);
          v51 = (uint64_t *)v8 == a2 || v49 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v51)
            {
              v52 = 0;
              v53 = (_QWORD *)v8;
              do
              {
                v54 = *((_DWORD *)v53 + 3);
                v55 = *((_DWORD *)v53 + 1);
                v53 = v49;
                if (v54 > v55)
                {
                  v56 = *v49;
                  v57 = HIDWORD(*v53);
                  v58 = v52;
                  while (1)
                  {
                    *(_QWORD *)(v8 + v58 + 8) = *(_QWORD *)(v8 + v58);
                    if (!v58)
                      break;
                    v59 = *(_DWORD *)(v8 + v58 - 4);
                    v58 -= 8;
                    if (v59 >= v57)
                    {
                      v60 = (_QWORD *)(v8 + v58 + 8);
                      goto LABEL_78;
                    }
                  }
                  v60 = (_QWORD *)v8;
LABEL_78:
                  *v60 = v56;
                }
                v49 = v53 + 1;
                v52 += 8;
              }
              while (v53 + 1 != a2);
            }
          }
          else if (!v51)
          {
            do
            {
              v84 = *(_DWORD *)(v7 + 12);
              v85 = *(_DWORD *)(v7 + 4);
              v7 = (uint64_t)v49;
              if (v84 > v85)
              {
                v86 = *v49;
                v87 = HIDWORD(*v49);
                v88 = (_QWORD *)v7;
                do
                {
                  v89 = v88;
                  v90 = *--v88;
                  *v89 = v90;
                }
                while (*((_DWORD *)v89 - 3) < v87);
                *v88 = v86;
              }
              v49 = (uint64_t *)(v7 + 8);
            }
            while ((uint64_t *)(v7 + 8) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((uint64_t *)v8 != a2)
          {
            v61 = (unint64_t)(v10 - 2) >> 1;
            v62 = v61;
            do
            {
              v63 = v62;
              if (v61 >= v62)
              {
                v64 = (2 * v62) | 1;
                v65 = v8 + 8 * v64;
                if (2 * v63 + 2 < v10)
                {
                  v66 = *(_DWORD *)(v65 + 4) > *(_DWORD *)(v65 + 12);
                  v65 += 8 * v66;
                  if (v66)
                    v64 = 2 * v63 + 2;
                }
                if (*(_DWORD *)(v65 + 4) <= *(_DWORD *)(v8 + 8 * v63 + 4))
                {
                  v67 = (_QWORD *)(v8 + 8 * v63);
                  v68 = *v67;
                  v69 = HIDWORD(*v67);
                  do
                  {
                    v70 = v67;
                    v67 = (_QWORD *)v65;
                    *v70 = *(_QWORD *)v65;
                    if (v61 < v64)
                      break;
                    v71 = (2 * v64) | 1;
                    v65 = v8 + 8 * v71;
                    v72 = 2 * v64 + 2;
                    if (v72 < v10)
                    {
                      result = (uint64_t *)*(unsigned int *)(v65 + 12);
                      v66 = *(_DWORD *)(v65 + 4) > result;
                      v65 += 8 * v66;
                      if (v66)
                        v71 = v72;
                    }
                    v64 = v71;
                  }
                  while (*(_DWORD *)(v65 + 4) <= v69);
                  *v67 = v68;
                }
              }
              v62 = v63 - 1;
            }
            while (v63);
            do
            {
              v73 = 0;
              v74 = *(_QWORD *)v8;
              v75 = (_QWORD *)v8;
              do
              {
                v76 = &v75[v73 + 1];
                v77 = (2 * v73) | 1;
                v78 = 2 * v73 + 2;
                if (v78 < v10)
                {
                  v66 = *((_DWORD *)v76 + 1) > *((_DWORD *)v76 + 3);
                  v76 += v66;
                  if (v66)
                    v77 = v78;
                }
                *v75 = *v76;
                v75 = v76;
                v73 = v77;
              }
              while (v77 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v76 == --a2)
              {
                *v76 = v74;
              }
              else
              {
                *v76 = *a2;
                *a2 = v74;
                v79 = (uint64_t)v76 - v8 + 8;
                if (v79 >= 9)
                {
                  v80 = (((unint64_t)v79 >> 3) - 2) >> 1;
                  if (*(_DWORD *)(v8 + 8 * v80 + 4) > *((_DWORD *)v76 + 1))
                  {
                    v81 = *v76;
                    v82 = HIDWORD(*v76);
                    do
                    {
                      v83 = v76;
                      v76 = (uint64_t *)(v8 + 8 * v80);
                      *v83 = *v76;
                      if (!v80)
                        break;
                      v80 = (v80 - 1) >> 1;
                    }
                    while (*(_DWORD *)(v8 + 8 * v80 + 4) > v82);
                    *v76 = v81;
                  }
                }
              }
              v66 = v10-- <= 2;
            }
            while (!v66);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (uint64_t *)(v8 + 8 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_1C5669E2C((uint64_t *)(v7 + 8 * ((unint64_t)v10 >> 1)), (uint64_t *)v7, a2 - 1);
        }
        else
        {
          sub_1C5669E2C((uint64_t *)v7, (uint64_t *)(v7 + 8 * ((unint64_t)v10 >> 1)), a2 - 1);
          sub_1C5669E2C((uint64_t *)(v7 + 8), v12 - 1, a2 - 2);
          sub_1C5669E2C((uint64_t *)(v7 + 16), (uint64_t *)(v7 + 8 + 8 * v11), a2 - 3);
          result = sub_1C5669E2C(v12 - 1, v12, (uint64_t *)(v7 + 8 + 8 * v11));
          v13 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *v12;
          *v12 = v13;
        }
        --a3;
        if ((a4 & 1) == 0 && *(_DWORD *)(v7 - 4) <= *(_DWORD *)(v7 + 4))
        {
          v30 = *(_QWORD *)v7;
          v31 = HIDWORD(*(_QWORD *)v7);
          if (*((_DWORD *)a2 - 1) >= v31)
          {
            v34 = v7 + 8;
            do
            {
              v8 = v34;
              if (v34 >= (unint64_t)a2)
                break;
              v35 = *(_DWORD *)(v34 + 4);
              v34 += 8;
            }
            while (v35 >= v31);
          }
          else
          {
            v32 = v7;
            do
            {
              v8 = v32 + 8;
              v33 = *(_DWORD *)(v32 + 12);
              v32 += 8;
            }
            while (v33 >= v31);
          }
          v36 = a2;
          if (v8 < (unint64_t)a2)
          {
            v37 = a2;
            do
            {
              v36 = v37 - 1;
              v38 = *((_DWORD *)v37-- - 1);
            }
            while (v38 < v31);
          }
          while (v8 < (unint64_t)v36)
          {
            v39 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *v36;
            *v36 = v39;
            do
            {
              v40 = *(_DWORD *)(v8 + 12);
              v8 += 8;
            }
            while (v40 >= v31);
            do
              v41 = *((_DWORD *)v36-- - 1);
            while (v41 < v31);
          }
          v42 = (uint64_t *)(v8 - 8);
          if (v8 - 8 != v7)
            *(_QWORD *)v7 = *v42;
          a4 = 0;
          *v42 = v30;
          continue;
        }
        v14 = 0;
        v15 = *(_QWORD *)v7;
        v16 = HIDWORD(*(_QWORD *)v7);
        do
        {
          v17 = *(_DWORD *)(v7 + v14 + 12);
          v14 += 8;
        }
        while (v17 > v16);
        v18 = v7 + v14;
        v19 = a2;
        if (v14 == 8)
        {
          v22 = a2;
          while (v18 < (unint64_t)v22)
          {
            v20 = v22 - 1;
            v23 = *((_DWORD *)v22-- - 1);
            if (v23 > v16)
              goto LABEL_21;
          }
          v20 = v22;
        }
        else
        {
          do
          {
            v20 = v19 - 1;
            v21 = *((_DWORD *)v19-- - 1);
          }
          while (v21 <= v16);
        }
LABEL_21:
        v8 = v18;
        if (v18 < (unint64_t)v20)
        {
          v24 = v20;
          do
          {
            v25 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *v24;
            *v24 = v25;
            do
            {
              v26 = *(_DWORD *)(v8 + 12);
              v8 += 8;
            }
            while (v26 > v16);
            do
              v27 = *((_DWORD *)v24-- - 1);
            while (v27 <= v16);
          }
          while (v8 < (unint64_t)v24);
        }
        v28 = (uint64_t *)(v8 - 8);
        if (v8 - 8 != v7)
          *(_QWORD *)v7 = *v28;
        *v28 = v15;
        if (v18 < (unint64_t)v20)
        {
LABEL_32:
          result = (uint64_t *)sub_1C5669758(v7, v8 - 8, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v29 = sub_1C5669EC0(v7, v8 - 8);
        result = (uint64_t *)sub_1C5669EC0(v8, (uint64_t)a2);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_32;
        }
        a2 = (uint64_t *)(v8 - 8);
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C5669E2C(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *((_DWORD *)a2 + 1);
  v4 = *((_DWORD *)a3 + 1);
  if (v3 <= *((_DWORD *)result + 1))
  {
    if (v4 > v3)
    {
      v6 = *a2;
      *a2 = *a3;
      *a3 = v6;
      if (*((_DWORD *)a2 + 1) > *((_DWORD *)result + 1))
      {
        v7 = *result;
        *result = *a2;
        *a2 = v7;
      }
    }
  }
  else
  {
    v5 = *result;
    if (v4 <= v3)
    {
      *result = *a2;
      *a2 = v5;
      if (*((_DWORD *)a3 + 1) <= HIDWORD(v5))
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = *a3;
    }
    *a3 = v5;
  }
  return result;
}

BOOL sub_1C5669EC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 4) > *(_DWORD *)(a1 + 4))
      {
        v6 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v6;
      }
      return result;
    case 3:
      sub_1C5669E2C((uint64_t *)a1, (uint64_t *)(a1 + 8), (uint64_t *)(a2 - 8));
      return 1;
    case 4:
      sub_1C566A094(a1, a1 + 8, a1 + 16, a2 - 8);
      return 1;
    case 5:
      sub_1C566A094(a1, a1 + 8, a1 + 16, a1 + 24);
      if (*(_DWORD *)(a2 - 4) > *(_DWORD *)(a1 + 28))
      {
        v16 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v16;
        if (*(_DWORD *)(a1 + 28) > *(_DWORD *)(a1 + 20))
        {
          v18 = *(_QWORD *)(a1 + 16);
          v17 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 16) = v17;
          *(_QWORD *)(a1 + 24) = v18;
          if (*(_DWORD *)(a1 + 12) < HIDWORD(v17))
          {
            v19 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v17;
            *(_QWORD *)(a1 + 16) = v19;
            if (*(_DWORD *)(a1 + 4) < HIDWORD(v17))
            {
              v20 = *(_QWORD *)a1;
              *(_QWORD *)a1 = v17;
              *(_QWORD *)(a1 + 8) = v20;
            }
          }
        }
      }
      return 1;
    default:
      v7 = a1 + 16;
      sub_1C5669E2C((uint64_t *)a1, (uint64_t *)(a1 + 8), (uint64_t *)(a1 + 16));
      v8 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    if (*(_DWORD *)(v8 + 4) > *(_DWORD *)(v7 + 4))
    {
      v11 = *(_QWORD *)v8;
      v12 = HIDWORD(*(_QWORD *)v8);
      v13 = v9;
      while (1)
      {
        *(_QWORD *)(a1 + v13 + 24) = *(_QWORD *)(a1 + v13 + 16);
        if (v13 == -16)
          break;
        v14 = *(_DWORD *)(a1 + v13 + 12);
        v13 -= 8;
        if (v14 >= v12)
        {
          v15 = (_QWORD *)(a1 + v13 + 24);
          goto LABEL_13;
        }
      }
      v15 = (_QWORD *)a1;
LABEL_13:
      *v15 = v11;
      if (++v10 == 8)
        return v8 + 8 == a2;
    }
    v7 = v8;
    v9 += 8;
    v8 += 8;
    if (v8 == a2)
      return 1;
  }
}

uint64_t *sub_1C566A094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1C5669E2C((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  if (*(_DWORD *)(a4 + 4) > *(_DWORD *)(a3 + 4))
  {
    v9 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v9;
    if (*(_DWORD *)(a3 + 4) > *(_DWORD *)(a2 + 4))
    {
      v10 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v10;
      if (*(_DWORD *)(a2 + 4) > *(_DWORD *)(a1 + 4))
      {
        v11 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v11;
      }
    }
  }
  return result;
}

void sub_1C566A128(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if ((uint64_t *)*a3 != a3 && a2 != a3)
  {
    v5 = (uint64_t *)a3[1];
    llvm::SymbolTableListTraits<llvm::BasicBlock>::transferNodesFromList(a1, (uint64_t)a3, (uint64_t)v5, (uint64_t)a3);
    if (v5 != a3)
    {
      v6 = (_QWORD *)*a3;
      v7 = *v5;
      *(_QWORD *)(v7 + 8) = a3;
      *a3 = v7;
      v8 = *a2;
      v6[1] = a2;
      *v5 = v8;
      *(_QWORD *)(v8 + 8) = v5;
      *a2 = (uint64_t)v6;
    }
  }
}

uint64_t sub_1C566A1A4()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C56684D4(v0);
}

uint64_t sub_1C566A1CC(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeGPUFunctionCallInfoWrapperPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "trivial indirect call promotion";
  *(_QWORD *)(v3 + 8) = 31;
  *(_QWORD *)(v3 + 16) = "trivial-call-promotion";
  *(_QWORD *)(v3 + 24) = 22;
  *(_QWORD *)(v3 + 32) = &unk_1ED8093D0;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C566A32C;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C566A260(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED8093D0;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81722D8;
  *(_QWORD *)(a1 + 32) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED8093D8);
  if (v3 != -1)
  {
    v7[0] = sub_1C566A1CC;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED8093D8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C566A32C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C566A260(v0);
}

void sub_1C566A358(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C566A37C(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::GPUFunctionCallInfoWrapper::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::GPUFunctionCallInfoWrapper::ID);
}

uint64_t sub_1C566A3B8(uint64_t a1, const llvm::Function *a2)
{
  void **v4;
  void *v5;
  const char **v6;
  llvm::Instruction *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *i;
  uint64_t v13;
  int v14;
  llvm::Type **v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  const llvm::CallBase *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  llvm *v40;
  char *v41;
  llvm **v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  int64_t v46;
  llvm **v47;
  char v48;
  llvm **v49;
  llvm *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  llvm **v56;
  llvm *v57;
  llvm **v58;
  int v59;
  BOOL v60;
  unsigned int v61;
  llvm *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  llvm::CallBase **v68;
  llvm::CallBase **v69;
  llvm::CallBase *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  llvm::CallBase *v76;
  int v77;
  int v78;
  llvm *v79;
  llvm **v80;
  llvm *v81;
  uint64_t v82;
  llvm **v83;
  uint64_t v85;
  llvm *v86;
  void *v87[2];
  _BYTE v88[48];
  void *v89;
  uint64_t v90;
  _BYTE v91[48];
  void *v92;
  uint64_t v93;
  _QWORD v94[38];

  v94[36] = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, a2) & 1) != 0)
    goto LABEL_98;
  v4 = **(void ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::GPUFunctionCallInfoWrapper::ID);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::GPUFunctionCallInfoWrapper::ID)+ 32);
  v92 = v94;
  v93 = 0x400000000;
  v8 = (_QWORD *)((char *)a2 + 72);
  v9 = (_QWORD *)*((_QWORD *)a2 + 10);
  if (v9 == (_QWORD *)((char *)a2 + 72))
  {
LABEL_98:
    v48 = 0;
    return v48 & 1;
  }
  do
  {
    v10 = v9 - 3;
    if (!v9)
      v10 = 0;
    v11 = v10 + 5;
    for (i = (_QWORD *)v10[6]; i != v11; i = (_QWORD *)i[1])
    {
      v13 = (uint64_t)(i - 3);
      if (!i)
        v13 = 0;
      v14 = *(unsigned __int8 *)(v13 + 16);
      if (v14 == 84)
        v15 = (llvm::Type **)v13;
      else
        v15 = 0;
      if (!i || v14 != 84 || (*(_BYTE *)(v13 + 23) & 0x20) == 0)
        continue;
      v16 = ***(_QWORD ***)v13;
      v86 = (llvm *)v13;
      v17 = *(_DWORD *)(v16 + 2496);
      if (v17)
      {
        v18 = *(_QWORD *)(v16 + 2480);
        v19 = v17 - 1;
        v20 = v19 & ((v13 >> 4) ^ (v13 >> 9));
        v21 = (_QWORD *)(v18 + 40 * v20);
        v22 = *v21;
        if (*v21 == v13)
          goto LABEL_27;
        v23 = 0;
        v24 = 1;
        while (v22 != -4096)
        {
          if (v23)
            v25 = 0;
          else
            v25 = v22 == -8192;
          if (v25)
            v23 = v21;
          v26 = v20 + v24++;
          v20 = v26 & v19;
          v21 = (_QWORD *)(v18 + 40 * v20);
          v22 = *v21;
          if (*v21 == v13)
            goto LABEL_27;
        }
        if (v23)
          v39 = v23;
        else
          v39 = v21;
      }
      else
      {
        v39 = 0;
      }
      v21 = sub_1C541AB24(v16 + 2480, (uint64_t)&v86, (uint64_t *)&v86, v39);
      v40 = v86;
      v21[4] = 0;
      v21[3] = 0;
      *v21 = v40;
      v21[1] = v21 + 3;
      v21[2] = 0x100000000;
LABEL_27:
      v27 = *((unsigned int *)v21 + 4);
      if ((_DWORD)v27)
      {
        v28 = (_QWORD *)(v21[1] + 8);
        v29 = 16 * v27;
        while (*((_DWORD *)v28 - 2) != 23)
        {
          v28 += 2;
          v29 -= 16;
          if (!v29)
            goto LABEL_31;
        }
        v30 = *v28;
        if (*v28)
        {
          v31 = *(unsigned int *)(v30 + 8);
          if ((v31 - 5) >= 0xFFFFFFFC)
          {
            v32 = v8;
            v89 = v91;
            v90 = 0x600000000;
            v33 = -8 * v31;
            v85 = 0;
            do
            {
              v34 = *(_QWORD *)(v30 + v33);
              if (!v34
                || (v35 = *(const llvm::CallBase **)(v34 + 128), (v36 = *((_QWORD *)v35 + 14)) != 0)
                && (*(_BYTE *)(v36 + 15) & 8) != 0
                || (llvm::isLegalToPromote(v15, v35, (llvm::Function *)&v85, v6) & 1) == 0)
              {
                LODWORD(v90) = 0;
                v8 = v32;
                goto LABEL_48;
              }
              v37 = v90;
              if (v90 >= (unint64_t)HIDWORD(v90))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v89, (uint64_t)v91, v90 + 1, 8);
                v37 = v90;
              }
              *((_QWORD *)v89 + v37) = v35;
              v38 = v90 + 1;
              LODWORD(v90) = v90 + 1;
              v33 += 8;
            }
            while (v33);
            v8 = v32;
            if (v38)
            {
              v86 = (llvm *)v15;
              v87[0] = v88;
              v87[1] = (void *)0x600000000;
              sub_1C61B2738((uint64_t)v87, (uint64_t)&v89);
              v41 = (char *)v92;
              if (v93 >= HIDWORD(v93))
              {
                v45 = v93 + 1;
                if (v92 <= &v86 && (char *)v92 + 72 * v93 > (char *)&v86)
                {
                  v46 = (char *)&v86 - (_BYTE *)v92;
                  sub_1C6283258((uint64_t)&v92, v45);
                  v41 = (char *)v92;
                  v42 = (llvm **)((char *)v92 + v46);
                }
                else
                {
                  sub_1C6283258((uint64_t)&v92, v45);
                  v42 = &v86;
                  v41 = (char *)v92;
                }
              }
              else
              {
                v42 = &v86;
              }
              v43 = &v41[72 * v93];
              *(_QWORD *)v43 = *v42;
              *((_QWORD *)v43 + 2) = 0x600000000;
              *((_QWORD *)v43 + 1) = v43 + 24;
              v44 = (uint64_t)(v43 + 8);
              if (*((_DWORD *)v42 + 4))
                sub_1C4E41EEC(v44, (uint64_t)(v42 + 1));
              LODWORD(v93) = v93 + 1;
              if (v87[0] != v88)
                free(v87[0]);
            }
LABEL_48:
            if (v89 != v91)
              free(v89);
          }
        }
      }
LABEL_31:
      ;
    }
    v9 = (_QWORD *)v9[1];
  }
  while (v9 != v8);
  v47 = (llvm **)v92;
  if (!(_DWORD)v93)
  {
    v48 = 0;
    goto LABEL_106;
  }
  v48 = 0;
  v49 = (llvm **)((char *)v92 + 72 * v93);
  do
  {
    v50 = *v47;
    v51 = ***(_QWORD ***)*v47;
    v86 = *v47;
    v52 = *(_DWORD *)(v51 + 2496);
    if (v52)
    {
      v53 = *(_QWORD *)(v51 + 2480);
      v54 = v52 - 1;
      v55 = v54 & ((v50 >> 4) ^ (v50 >> 9));
      v56 = (llvm **)(v53 + 40 * v55);
      v57 = *v56;
      if (*v56 == v50)
        goto LABEL_75;
      v58 = 0;
      v59 = 1;
      while (v57 != (llvm *)-4096)
      {
        if (v58)
          v60 = 0;
        else
          v60 = v57 == (llvm *)-8192;
        if (v60)
          v58 = v56;
        v61 = v55 + v59++;
        v55 = v61 & v54;
        v56 = (llvm **)(v53 + 40 * v55);
        v57 = *v56;
        if (*v56 == v50)
          goto LABEL_75;
      }
      if (v58)
        v80 = v58;
      else
        v80 = v56;
    }
    else
    {
      v80 = 0;
    }
    v56 = (llvm **)sub_1C541AB24(v51 + 2480, (uint64_t)&v86, (uint64_t *)&v86, v80);
    v81 = v86;
    v56[4] = 0;
    v56[3] = 0;
    *v56 = v81;
    v56[1] = (llvm *)(v56 + 3);
    v56[2] = (llvm *)0x100000000;
LABEL_75:
    v62 = v56[1];
    if (*(_DWORD *)v62 != 23)
    {
      v63 = 16 * *((unsigned int *)v56 + 4) - 16;
      do
      {
        v64 = *((_DWORD *)v62 + 4);
        v62 = (llvm *)((char *)v62 + 16);
        v63 -= 16;
      }
      while (v64 != 23);
    }
    v65 = *((unsigned int *)v47 + 4);
    if ((_DWORD)v65)
    {
      v66 = 0;
      v67 = *(_DWORD *)(*((_QWORD *)v62 + 1) + 8);
      v68 = (llvm::CallBase **)v47[1];
      v69 = &v68[v65];
      while (1)
      {
        v70 = *v68;
        v71 = *(_QWORD *)(a1 + 32);
        v72 = *(_QWORD *)(v71 + 24);
        v73 = *(unsigned int *)(v71 + 40);
        if (!(_DWORD)v73)
          goto LABEL_86;
        LODWORD(v74) = (v73 - 1) & ((v70 >> 4) ^ (v70 >> 9));
        v75 = v72 + 16 * v74;
        v76 = *(llvm::CallBase **)v75;
        if (v70 != *(llvm::CallBase **)v75)
          break;
LABEL_87:
        ++v66;
        --*(_DWORD *)(v75 + 8);
        v79 = v50;
        if (v66 != v67)
          v79 = (llvm *)llvm::versionCallSite(v50, v70, 0, (llvm::MDNode *)v6);
        llvm::promoteCall(v79, (void ***)v70, 0, (llvm::CastInst **)v6, v7);
        if (++v68 == v69)
        {
          v48 = 1;
          goto LABEL_91;
        }
      }
      v77 = 1;
      while (v76 != (llvm::CallBase *)-4096)
      {
        v78 = v74 + v77++;
        v74 = v78 & (v73 - 1);
        v76 = *(llvm::CallBase **)(v72 + 16 * v74);
        if (v70 == v76)
        {
          v75 = v72 + 16 * v74;
          goto LABEL_87;
        }
      }
LABEL_86:
      v75 = v72 + 16 * v73;
      goto LABEL_87;
    }
LABEL_91:
    v47 += 9;
  }
  while (v47 != v49);
  v47 = (llvm **)v92;
  if ((_DWORD)v93)
  {
    v82 = 9 * v93;
    do
    {
      v83 = (llvm **)v47[v82 - 8];
      if (&v47[v82 - 6] != v83)
        free(v83);
      v82 -= 9;
    }
    while (v82 * 8);
    v47 = (llvm **)v92;
  }
LABEL_106:
  if (v47 != v94)
    free(v47);
  return v48 & 1;
}

uint64_t sub_1C566AA00()
{
  int v1;
  int *v2;
  __int128 v3;

  *(_QWORD *)&v3 = "Maximum number of calls that an indirect call can be expanded into. This is used only if LLVM_AGX_IND"
                   "_CALL_PROMO_EXPAND_TO_NB does not apply and if LLVM_AGX_USE_NEW_CALL_PROMOTION_HEURISTIC is set";
  *((_QWORD *)&v3 + 1) = 196;
  v1 = 25;
  v2 = &v1;
  sub_1C6283390(&v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, qword_1ED809310, &dword_1C475E000);
}

uint64_t sub_1C566AA60(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Optimize alloca instructions";
  *(_QWORD *)(v2 + 8) = 28;
  *(_QWORD *)(v2 + 16) = "optimize-allocas";
  *(_QWORD *)(v2 + 24) = 16;
  *(_QWORD *)(v2 + 32) = &unk_1ED8093E0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C566ABB8;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C566AAF0(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED8093E0;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8172378;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED8093E8);
  if (v3 != -1)
  {
    v7[0] = sub_1C566AA60;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED8093E8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C566ABB8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C566AAF0(v0);
}

void sub_1C566ABE4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C566AC08()
{
  return "GPU Optimize Allocas Pass";
}

uint64_t sub_1C566AC18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  unint64_t v16;
  char v17;
  unint64_t v18;

  v2 = a2 + 72;
  v3 = *(_QWORD *)(a2 + 80);
  if (v3 == a2 + 72)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = *(_QWORD *)(a2 + 40) + 272;
    do
    {
      v6 = v3 - 24;
      if (!v3)
        v6 = 0;
      v7 = v6 + 40;
      for (i = *(_QWORD *)(v6 + 48); i != v7; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 24;
        if (!i)
          v9 = 0;
        v10 = *(unsigned __int8 *)(v9 + 16);
        if (v10 == 59)
          v11 = v9;
        else
          v11 = 0;
        if (i && v10 == 59 && *(_BYTE *)(*(_QWORD *)(v11 - 32) + 16) == 16)
        {
          v12 = *(_QWORD *)(v11 + 40);
          v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
          v14 = v13 ? v13 - 24 : 0;
          if (v12 == v14)
          {
            v15 = *(_WORD *)(v11 + 18);
            if ((v15 & 0x40) == 0)
            {
              v4 = 1;
              v16 = 1 << v15;
              llvm::DataLayout::getAlignment(v5, *(_QWORD *)(v11 + 64));
              v18 = 1 << v17;
              if (1 << v17 <= v16)
                v18 = v16;
              *(_WORD *)(v11 + 18) = *(_WORD *)(v11 + 18) & 0xFFC0 | __clz(v18) ^ 0x3F;
            }
          }
        }
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

uint64_t sub_1C566AD34(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeFunctionGroupInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Gather stored buffers and resources";
  *(_QWORD *)(v2 + 8) = 35;
  *(_QWORD *)(v2 + 16) = "gather-stored-resources";
  *(_QWORD *)(v2 + 24) = 23;
  *(_QWORD *)(v2 + 32) = &unk_1ED8093F0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C62835D4;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C566ADC8(uint64_t a1, uint64_t a2)
{
  void **v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int j;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  BOOL v22;
  BOOL v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  uint64_t ***v36;
  uint64_t v37;
  int v38;
  llvm *v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t ****v49;
  uint64_t ***v50;
  uint64_t ****v51;
  int v52;
  BOOL v53;
  unsigned int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  llvm **v62;
  uint64_t v63;
  uint64_t v64;
  llvm *v65;
  uint64_t v66;
  int v67;
  BOOL v68;
  uint64_t v69;
  llvm **v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  BOOL v78;
  int v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t **v83;
  char *v84;
  uint64_t v85;
  BOOL v86;
  uint64_t ****v87;
  uint64_t v88;
  _BOOL4 v89;
  unsigned int v90;
  char v91;
  uint64_t **v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  llvm *v97;
  uint64_t v98;
  llvm *UnderlyingObject;
  llvm *v100;
  unsigned int v101;
  llvm *v102;
  int v103;
  llvm *v104;
  int v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  int v109;
  int v110;
  uint64_t v111;
  _BYTE *v112;
  uint64_t **v113;
  int v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  unsigned int v119;
  _QWORD *v120;
  _BYTE *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v130;
  int v131;
  BOOL v132;
  unsigned int v133;
  _QWORD *v134;
  uint64_t v135;
  char v136;
  int v137;
  unsigned int v138;
  BOOL v139;
  int v140;
  BOOL v141;
  _BOOL4 v142;
  int v143;
  int v144;
  uint64_t v146;
  uint64_t v147;
  int v148;
  _QWORD *v149;
  int v150;
  uint64_t v151;
  llvm *v152;
  unsigned int v153;
  unsigned int v154;
  char v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  BOOL v162;
  _QWORD *v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  char v170;
  int v171;
  uint64_t v172[4];
  unsigned int v173;
  void *v174;
  uint64_t v175;
  _QWORD v176[34];

  v176[32] = *MEMORY[0x1E0C80C00];
  v2 = **(void ****)(a1 + 8);
  do
  {
    v3 = *v2;
    v2 += 2;
  }
  while (v3 != &llvm::FunctionGroupInfoWrapperPass::ID);
  v4 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v2 - 1) + 96))(*(v2 - 1), &llvm::FunctionGroupInfoWrapperPass::ID);
  v5 = *(_QWORD *)(a2 + 32);
  if (v5 == a2 + 24)
    return 0;
  v6 = *(_QWORD **)(v4 + 32);
  v7 = a2 + 8;
  v163 = v6;
  do
  {
    if (v5)
      v8 = v5 - 56;
    else
      v8 = 0;
    if (v5 && *(_BYTE *)(v8 + 16) == 3)
    {
      if ((*(_DWORD *)(v8 + 20) & 0x7FFFFFF) == 0)
        goto LABEL_276;
    }
    else if (!*(_BYTE *)(v8 + 16) && *(_QWORD *)(v8 + 72) == v8 + 72 && (*(_BYTE *)(v8 + 34) & 0x80) == 0)
    {
      goto LABEL_276;
    }
    v165 = v5;
    v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v6 + 24))(v6, v8);
    v10 = *(_QWORD *)(v8 + 112);
    if (!v10 || !*(_DWORD *)(v10 + 8) || (v11 = *(_QWORD *)(v10 + 40)) == 0 || (v12 = *(_DWORD *)(v11 + 40)) == 0)
    {
LABEL_47:
      v29 = v6[1];
      v174 = (void *)v8;
      sub_1C4E3DFD8(v29, &v174);
      v30 = *(_QWORD *)(v8 + 80);
      v166 = v8 + 72;
      if (v30 == v8 + 72)
      {
        v32 = 0;
        v170 = 0;
        v164 = 0;
        v31 = 0;
        v167 = 0;
LABEL_275:
        v136 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 160))(v9, 16);
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, 23, v31 & 1 | v167 & 1u | ((v136 & 1) == 0), 1, 0, 1, 2);
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, 25, v31 & 1, 1, 0, 1, 2);
        (*(void (**)(uint64_t, uint64_t, BOOL, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, 26, v32 != 0, 1, 0, 1, 2);
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, 24, v167 & 1, 1, 0, 1, 2);
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, 27, v164 & 1, 1, 0, 1, 2);
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, 28, v170 & 1, 1, 0, 1, 2);
        v5 = v165;
        v6 = v163;
        goto LABEL_276;
      }
      v167 = 0;
      v31 = 0;
      v164 = 0;
      v170 = 0;
      v32 = 0;
      while (1)
      {
        v33 = v30 - 24;
        v168 = v30;
        if (!v30)
          v33 = 0;
        v34 = v33 + 40;
        for (i = *(_QWORD *)(v33 + 48); i != v34; i = *(_QWORD *)(i + 8))
        {
          v36 = (uint64_t ***)(i - 24);
          if (i)
            v37 = i - 24;
          else
            v37 = 0;
          v174 = v176;
          v175 = 0x1000000000;
          v38 = *(unsigned __int8 *)(v37 + 16);
          if (i && v38 == 61)
          {
            v39 = *(llvm **)(v37 - 32);
            v40 = *(_DWORD *)(*(_QWORD *)v39 + 8);
            if ((v40 & 0xFE) == 0x12)
            {
              v41 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v39 + 16) + 8) & 0xFFFFFF00;
              if (v41 != 768)
              {
                if (v41 != 20480)
                  goto LABEL_75;
LABEL_71:
                v170 = 1;
                goto LABEL_269;
              }
LABEL_74:
              v32 = sub_1C566BF38(v39);
              goto LABEL_269;
            }
            v41 = v40 & 0xFFFFFF00;
            if ((v40 & 0xFFFFFF00) == 0x5000)
              goto LABEL_71;
LABEL_73:
            if (v41 != 768)
            {
LABEL_75:
              if (v41 != 256)
                goto LABEL_269;
              v176[0] = v39;
              v176[1] = 0;
              v42 = 1;
              LODWORD(v175) = 1;
              goto LABEL_197;
            }
            goto LABEL_74;
          }
          if (i && v38 == 64)
          {
            v39 = *(llvm **)(v37 - 96);
            goto LABEL_68;
          }
          if (i && v38 == 65)
          {
            v39 = *(llvm **)(v37 - 64);
LABEL_68:
            if ((*(_DWORD *)(*(_QWORD *)v39 + 8) & 0xFE) == 0x12)
              v41 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v39 + 16) + 8) & 0xFFFFFF00;
            else
              v41 = *(_DWORD *)(*(_QWORD *)v39 + 8) & 0xFFFFFF00;
            goto LABEL_73;
          }
          if (v38 != 84)
            goto LABEL_269;
          v43 = *(_QWORD *)(v37 - 32);
          if (!v43 || *(_BYTE *)(v43 + 16))
          {
            if (!i)
              goto LABEL_269;
LABEL_81:
            if ((*(_BYTE *)(i - 1) & 0x20) == 0)
              goto LABEL_96;
            v44 = ***v36;
            v172[0] = i - 24;
            v45 = *(_DWORD *)(v44 + 2496);
            if (v45)
            {
              v46 = *(_QWORD *)(v44 + 2480);
              v47 = v45 - 1;
              v48 = v47 & ((v36 >> 4) ^ (v36 >> 9));
              v49 = (uint64_t ****)(v46 + 40 * v48);
              v50 = *v49;
              if (*v49 == v36)
              {
LABEL_92:
                v55 = *((unsigned int *)v49 + 4);
                if ((_DWORD)v55)
                {
                  v56 = v49[1] + 1;
                  v57 = 16 * v55;
                  while (*((_DWORD *)v56 - 2) != 23)
                  {
                    v56 += 2;
                    v57 -= 16;
                    if (!v57)
                      goto LABEL_96;
                  }
                  v71 = *v56;
                  if (v71)
                  {
                    v72 = *(unsigned int *)(v71 + 8);
                    if (!(_DWORD)v72)
                      goto LABEL_269;
                    v73 = -8 * v72;
                    v74 = v73;
                    while (*(_QWORD *)(v71 + v74))
                    {
                      v74 += 8;
                      if (!v74)
                      {
                        while (1)
                        {
                          v75 = *(_QWORD *)(v71 + v73);
                          if (*(_BYTE *)v75 == 1)
                          {
                            v76 = *(_QWORD *)(v75 + 128);
                            v77 = *(unsigned __int8 *)(v76 + 16);
                            if (v76)
                              v78 = v77 == 3;
                            else
                              v78 = 0;
                            if (v78)
                            {
                              if ((*(_DWORD *)(v76 + 20) & 0x7FFFFFF) == 0)
                                goto LABEL_96;
                              goto LABEL_141;
                            }
                          }
                          else
                          {
                            v76 = 0;
                            v77 = MEMORY[0x10];
                          }
                          if (!v77 && *(_QWORD *)(v76 + 72) == v76 + 72 && (*(_BYTE *)(v76 + 34) & 0x80) == 0)
                            goto LABEL_96;
LABEL_141:
                          v73 += 8;
                          if (!v73)
                            goto LABEL_269;
                        }
                      }
                    }
                  }
                }
LABEL_96:
                v58 = *(unsigned __int8 *)(v37 + 16);
                if (v58 == 84)
                {
                  v59 = 0;
                }
                else if (v58 == 39)
                {
                  v59 = (*(_DWORD *)(v37 + 80) + 1);
                }
                else
                {
                  v59 = 2;
                }
                v60 = *(_DWORD *)(v37 + 20);
                v61 = v60 & 0x7FFFFFF;
                v62 = (llvm **)(v37 - 32 * v61);
                if (v60 < 0 && (v95 = (uint64_t)*(v62 - 1), (v95 & 0xFFFFFFFF0) != 0))
                  v63 = (*((_DWORD *)v62 - 3) - *(_DWORD *)((char *)v62 - v95));
                else
                  v63 = 0;
                if (v62 != (llvm **)(v37 - 32 * v59 - 32 * v63 - 32))
                {
                  v64 = 32 * v61 - 32 * v59 - 32 * v63 - 32;
                  do
                  {
                    v65 = *v62;
                    v66 = *(_QWORD *)*v62;
                    v67 = *(_DWORD *)(v66 + 8);
                    if (v66)
                      v68 = *(_DWORD *)(v66 + 8) == 15;
                    else
                      v68 = 0;
                    if (v68)
                    {
                      if ((*(_DWORD *)(v66 + 8) & 0xFE) == 0x12)
                        v67 = *(_DWORD *)(**(_QWORD **)(v66 + 16) + 8);
                      if ((v67 & 0xFFFFFF00) == 0x300)
                      {
                        v32 = sub_1C566BF38(*v62);
                      }
                      else if ((v67 & 0xFFFFFF00) == 0x100)
                      {
                        v69 = v175;
                        if (v175 >= (unint64_t)HIDWORD(v175))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v174, (uint64_t)v176, v175 + 1, 16);
                          v69 = v175;
                        }
                        v70 = (llvm **)((char *)v174 + 16 * v69);
                        *v70 = v65;
                        v70[1] = 0;
                        LODWORD(v175) = v175 + 1;
                      }
                    }
                    v62 += 4;
                    v64 -= 32;
                  }
                  while (v64);
                }
                goto LABEL_206;
              }
              v51 = 0;
              v52 = 1;
              while (v50 != (uint64_t ***)-4096)
              {
                if (v51)
                  v53 = 0;
                else
                  v53 = v50 == (uint64_t ***)-8192;
                if (v53)
                  v51 = v49;
                v54 = v48 + v52++;
                v48 = v54 & v47;
                v49 = (uint64_t ****)(v46 + 40 * v48);
                v50 = *v49;
                if (*v49 == v36)
                  goto LABEL_92;
              }
              if (v51)
                v87 = v51;
              else
                v87 = v49;
            }
            else
            {
              v87 = 0;
            }
            v49 = (uint64_t ****)sub_1C541AB24(v44 + 2480, (uint64_t)v172, v172, v87);
            v88 = v172[0];
            v49[4] = 0;
            v49[3] = 0;
            *v49 = (uint64_t ***)v88;
            v49[1] = (uint64_t ***)(v49 + 3);
            v49[2] = (uint64_t ***)0x100000000;
            goto LABEL_92;
          }
          if (*(_QWORD *)(v43 + 24) == *(_QWORD *)(v37 + 72) && (*(_BYTE *)(v43 + 33) & 0x20) != 0)
          {
            v79 = *(_DWORD *)(*(_QWORD *)(i - 56) + 36);
            if ((v79 - 2029) <= 0x35 && ((1 << (v79 + 19)) & 0x21002100210021) != 0)
            {
              v81 = 0;
              goto LABEL_148;
            }
            if ((v79 - 1682) >= 0x8C)
            {
              if ((v79 - 2177) < 0x80)
              {
                v81 = 2;
LABEL_148:
                v82 = 0;
                v83 = (&v36[4 * v81])[-4 * (*(_DWORD *)(i - 4) & 0x7FFFFFF)];
LABEL_149:
                v84 = (char *)v174 + 16 * v82;
                *(_QWORD *)v84 = v83;
                v85 = 1;
                v167 = 1;
LABEL_150:
                *((_QWORD *)v84 + 1) = v85;
                v86 = __CFADD__((_DWORD)v175, 1);
                v42 = v175 + 1;
                LODWORD(v175) = v175 + 1;
                if (v86)
                  goto LABEL_269;
LABEL_197:
                while (1)
                {
                  v96 = (char *)v174 + 16 * v42;
                  v97 = (llvm *)*((_QWORD *)v96 - 2);
                  v98 = *((unsigned int *)v96 - 2);
                  LODWORD(v175) = v42 - 1;
                  UnderlyingObject = llvm::getUnderlyingObject(v97, (const llvm::Value *)6);
                  if (!UnderlyingObject)
                    break;
                  v100 = UnderlyingObject;
                  v101 = *((unsigned __int8 *)UnderlyingObject + 16);
                  if (v101 == 60)
                  {
                    v102 = (llvm *)*((_QWORD *)UnderlyingObject - 4);
                    v103 = *(_DWORD *)(*(_QWORD *)v102 + 8);
                    if ((v103 & 0xFE) == 0x12)
                      v103 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v102 + 16) + 8);
                    if ((v103 & 0xFFFFFF00) != 0x4000)
                      break;
                    v104 = llvm::getUnderlyingObject(v102, (const llvm::Value *)6);
                    if (!v104)
                      break;
                    v100 = v104;
                    v101 = *((unsigned __int8 *)v104 + 16);
                  }
                  if (v101 >= 4)
                    break;
                  (*(void (**)(uint64_t, uint64_t, llvm *))(*(_QWORD *)v9 + 144))(v9, 16, v100);
                  v31 |= v98 == 0;
LABEL_206:
                  v42 = v175;
                  if (!(_DWORD)v175)
                    goto LABEL_269;
                }
                v105 = *(_DWORD *)(*(_QWORD *)v97 + 8);
                if ((v105 & 0xFE) == 0x12)
                  v105 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v97 + 16) + 8);
                v106 = *(_QWORD *)(a2 + 16);
                if ((v105 & 0xFFFFFF00) == 0x100)
                {
                  while (v106 != v7)
                  {
                    if (v106)
                      v107 = (_QWORD *)(v106 - 56);
                    else
                      v107 = 0;
                    v108 = *v107;
                    v109 = *(_DWORD *)(*v107 + 8);
                    v110 = v109;
                    if ((v109 & 0xFE) == 0x12)
                      v110 = *(_DWORD *)(**(_QWORD **)(v108 + 16) + 8);
                    if ((v110 & 0xFFFFFF00) == 0x4000)
                    {
                      v111 = v107[3];
                      if (*(_BYTE *)(v111 + 8) != 15)
                        v111 = 0;
                      if (v111)
                        v108 = v111;
                      v109 = *(_DWORD *)(v108 + 8);
                    }
                    if ((v109 & 0xFE) == 0x12)
                      v109 = *(_DWORD *)(**(_QWORD **)(v108 + 16) + 8);
                    if ((v109 & 0xFFFFFF00) == 0x100)
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 144))(v9, 16);
                    v106 = *(_QWORD *)(v106 + 8);
                  }
                  v31 = 1;
                  goto LABEL_269;
                }
                while (2)
                {
                  if (v106 == v7)
                  {
                    v167 = 1;
                    goto LABEL_269;
                  }
                  if (v106)
                    v112 = (_BYTE *)(v106 - 56);
                  else
                    v112 = 0;
                  v113 = *(uint64_t ***)v112;
                  v114 = *(_DWORD *)(*(_QWORD *)v112 + 8);
                  if ((v114 & 0xFE) == 0x12)
                    v114 = *(_DWORD *)(*v113[2] + 8);
                  if ((v114 & 0xFFFFFF00) == 0x4000 && (v112[34] & 0x40) != 0)
                  {
                    v115 = **v113;
                    v172[0] = (uint64_t)v112;
                    v116 = *(_DWORD *)(v115 + 2520);
                    if (v116)
                    {
                      v117 = *(_QWORD *)(v115 + 2504);
                      v118 = v116 - 1;
                      v119 = v118 & ((v112 >> 4) ^ (v112 >> 9));
                      v120 = (_QWORD *)(v117 + 24 * v119);
                      v121 = (_BYTE *)*v120;
                      if ((_BYTE *)*v120 == v112)
                        goto LABEL_238;
                      v130 = 0;
                      v131 = 1;
                      while (v121 != (_BYTE *)-4096)
                      {
                        if (v130)
                          v132 = 0;
                        else
                          v132 = v121 == (_BYTE *)-8192;
                        if (v132)
                          v130 = v120;
                        v133 = v119 + v131++;
                        v119 = v133 & v118;
                        v120 = (_QWORD *)(v117 + 24 * v119);
                        v121 = (_BYTE *)*v120;
                        if ((_BYTE *)*v120 == v112)
                          goto LABEL_238;
                      }
                      if (v130)
                        v134 = v130;
                      else
                        v134 = v120;
                    }
                    else
                    {
                      v134 = 0;
                    }
                    v120 = sub_1C53D65B8(v115 + 2504, (uint64_t)v172, v172, v134);
                    v135 = v172[0];
                    v120[1] = 0;
                    v120[2] = 0;
                    *v120 = v135;
LABEL_238:
                    v122 = (uint64_t *)v120[1];
                    v123 = v120[2];
                    if (v123 == 13)
                    {
                      v127 = *v122;
                      v128 = *(uint64_t *)((char *)v122 + 5);
                      if (v127 != 0x5F72656C706D6173 || v128 != 0x65746174735F7265)
                        goto LABEL_246;
                    }
                    else
                    {
                      if (v123 != 11)
                        goto LABEL_246;
                      v124 = *v122;
                      v125 = *(uint64_t *)((char *)v122 + 3);
                      if (v124 != 0x74735F6567616D69 || v125 != 0x65746174735F6567)
                        goto LABEL_246;
                    }
                    (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v9 + 144))(v9, 16, v112);
                  }
LABEL_246:
                  v106 = *(_QWORD *)(v106 + 8);
                  continue;
                }
              }
            }
            else
            {
              llvm::SampleInfo::SampleInfo((uint64_t)v172, *(_DWORD *)(*(_QWORD *)(i - 56) + 36), 1);
              if (v173 != -1)
              {
                v82 = v175;
                v83 = (&v36[4 * v173])[-4 * (*(_DWORD *)(i - 4) & 0x7FFFFFF)];
                if (v175 >= (unint64_t)HIDWORD(v175))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v174, (uint64_t)v176, v175 + 1, 16);
                  v82 = v175;
                }
                goto LABEL_149;
              }
              v79 = *(_DWORD *)(*(_QWORD *)(i - 56) + 36);
            }
            v89 = sub_1C55A9F50(v79);
            if ((v79 - 2838) < 3 || v89)
            {
              v90 = 0;
              if (v79 != 2142 && v79 != 2144)
              {
                v162 = v89;
                if (sub_1C55A9F2C(v79))
                {
                  v90 = 2;
                }
                else
                {
                  v91 = (v79 - 2784) < 3 || v162;
                  v90 = 3;
                  if ((v79 - 2784) < 3)
                    v90 = 0;
                  if ((v91 & 1) == 0)
                  {
                    if ((v79 - 2841) >= 0xFFFFFFFD)
                      v90 = 0;
                    else
                      v90 = -1;
                  }
                }
              }
              v92 = (&v36[4 * v90])[-4 * (*(_DWORD *)(i - 4) & 0x7FFFFFF)];
              v93 = *((_DWORD *)*v92 + 2);
              if ((v93 & 0xFE) == 0x12)
                v93 = *(_DWORD *)(*(_QWORD *)(*v92)[2] + 8);
              if ((v93 & 0xFFFFFF00) == 0x300)
              {
                v32 = 1;
                goto LABEL_269;
              }
              if ((v93 & 0xFFFFFF00) == 0x100)
              {
                v94 = v175;
                if (v175 >= (unint64_t)HIDWORD(v175))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v174, (uint64_t)v176, v175 + 1, 16);
                  v94 = v175;
                }
                v85 = 0;
                v84 = (char *)v174 + 16 * v94;
                *(_QWORD *)v84 = v92;
                goto LABEL_150;
              }
            }
            else if ((v79 - 2471) < 8 || (v79 - 2703) < 2 || (v79 - 1996) < 2)
            {
              v164 = 1;
            }
          }
          else
          {
            if (!i)
              goto LABEL_269;
            if (*(_QWORD *)(v43 + 24) != *(_QWORD *)(i + 48))
              goto LABEL_81;
            if (*(_QWORD *)(v43 + 72) == v43 + 72 && (*(_BYTE *)(v43 + 34) & 0x80) == 0)
              goto LABEL_96;
          }
LABEL_269:
          if (v174 != v176)
            free(v174);
        }
        v30 = *(_QWORD *)(v168 + 8);
        if (v30 == v166)
          goto LABEL_275;
      }
    }
    v13 = *(_QWORD *)(v11 + 24);
    v14 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
    {
      v160 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v160 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v160;
      __cxa_guard_release(&qword_1ED7EAC88);
    }
    v15 = __ROR8__(qword_1ED7EAC80 ^ 0xFD191BE7CEB4422BLL, 30);
    v16 = 0x9DDFEA08EB382D69
        * ((qword_1ED7EAC80 - 0x3D2776C38520C79FLL) ^ ((0x9DDFEA08EB382D69
                                                      * ((v15 + 0x2CD2DFBEB8101159) ^ (qword_1ED7EAC80
                                                                                       - 0x3D2776C38520C79FLL))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v15 + 0x2CD2DFBEB8101159) ^ (qword_1ED7EAC80 - 0x3D2776C38520C79FLL))));
    v17 = -348639895 * ((v16 >> 47) ^ v16);
    for (j = 1; ; ++j)
    {
      v19 = v17 & (v12 - 1);
      v20 = v13 + 24 * v19;
      v21 = *(_QWORD **)v20;
      if (*(_QWORD *)v20 == -1)
      {
        if ("agx-no-user-resource-stores" == (char *)-1)
          goto LABEL_40;
        goto LABEL_23;
      }
      if (v21 != (_QWORD *)-2)
        break;
      if ("agx-no-user-resource-stores" == (char *)-2)
        goto LABEL_40;
LABEL_23:
      if (v21 == (_QWORD *)-1)
        goto LABEL_47;
      v17 = j + v19;
    }
    if (*(_QWORD *)(v20 + 8) != 27)
      goto LABEL_23;
    v22 = *v21 == 0x752D6F6E2D786761 && v21[1] == 0x6F7365722D726573;
    v23 = v22 && v21[2] == 0x6F74732D65637275;
    if (!v23 || *(_QWORD *)((char *)v21 + 19) != 0x7365726F74732D65)
      goto LABEL_23;
LABEL_40:
    if (!*(_QWORD *)(v20 + 16))
      goto LABEL_47;
    v25 = v8 + 72;
    v26 = *(_QWORD *)(v8 + 80);
    v5 = v165;
    if (v26 == v8 + 72)
      goto LABEL_276;
    while (1)
    {
      v27 = v26 - 24;
      if (!v26)
        v27 = 0;
      v28 = *(_QWORD *)(v27 + 48);
      if (v28 != v27 + 40)
        break;
      v26 = *(_QWORD *)(v26 + 8);
      if (v26 == v25)
        goto LABEL_276;
    }
    while (2)
    {
      if (v28)
        v147 = v28 - 24;
      else
        v147 = 0;
      v148 = *(unsigned __int8 *)(v147 + 16);
      if (!v28 || v148 != 60)
      {
        if (v28 && v148 == 61)
        {
          v149 = v6;
          v138 = 1;
          goto LABEL_317;
        }
        if (v28 && (v148 - 66) > 0xFFFFFFFD)
        {
          v149 = v6;
          v138 = 0;
          goto LABEL_317;
        }
        if (v148 == 84)
        {
          v156 = *(_QWORD *)(v147 - 32);
          if (v156)
          {
            if (!*(_BYTE *)(v156 + 16) && *(_QWORD *)(v156 + 24) == *(_QWORD *)(v147 + 72))
            {
              v149 = v6;
              if ((*(_BYTE *)(v156 + 33) & 0x20) == 0)
                goto LABEL_293;
              v138 = 0;
              v137 = *(_DWORD *)(*(_QWORD *)(v28 - 56) + 36);
              v171 = v137;
              if (v137 != 2142 && v137 != 2144)
              {
                v157 = *(_DWORD *)(*(_QWORD *)(v28 - 56) + 36);
                if (sub_1C55A9F2C(v137))
                {
                  v137 = v157;
                  v138 = 2;
                }
                else
                {
                  v137 = v157;
                  if ((v157 - 2784) >= 3)
                  {
                    v139 = sub_1C55A9F50(v157);
                    v137 = v171;
                    if ((v171 - 2841) >= 0xFFFFFFFD)
                      v140 = 0;
                    else
                      v140 = -1;
                    if (v139)
                      v138 = 3;
                    else
                      v138 = v140;
                  }
                  else
                  {
                    v138 = 0;
                  }
                }
              }
              if ((v141 = sub_1C55A9F2C(v137), v5 = v165, (v171 - 2784) >= 3)
                && !v141
                && ((v142 = sub_1C55A9F50(v171), v5 = v165, (v171 - 2838) < 3)
                  ? (v143 = 1)
                  : (v143 = v142),
                    v138 != -1 && v143))
              {
LABEL_317:
                v150 = *(_DWORD *)(v147 + 20);
                if ((v150 & 0x40000000) != 0)
                  v151 = *(_QWORD *)(v147 - 8);
                else
                  v151 = v147 - 32 * (v150 & 0x7FFFFFF);
                v152 = *(llvm **)(v151 + 32 * v138);
                v153 = *(_DWORD *)(*(_QWORD *)v152 + 8);
                if ((v153 & 0xFE) == 0x12)
                  v153 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v152 + 16) + 8);
                v154 = v153 >> 8;
                v6 = v149;
                switch(v154)
                {
                  case 1u:
                    v146 = 32;
                    goto LABEL_338;
                  case 0x50u:
                    v146 = 35;
                    goto LABEL_338;
                  case 3u:
                    v155 = sub_1C566BF38(v152);
                    v5 = v165;
                    if ((v155 & 1) != 0)
                    {
                      v146 = 33;
                      goto LABEL_338;
                    }
                    break;
                }
              }
              else
              {
LABEL_293:
                v6 = v149;
                if ((*(_BYTE *)(v156 + 33) & 0x20) != 0)
                {
                  v144 = *(_DWORD *)(*(_QWORD *)(v28 - 56) + 36);
                  if ((v144 - 2029) <= 0x35
                    && ((1 << (v144 + 19)) & 0x21002100210021) != 0)
                  {
                    v146 = 31;
                    goto LABEL_338;
                  }
                  v146 = 31;
                  if ((v144 - 1682) < 0x8C || (v144 - 2177) < 0x80)
                    goto LABEL_338;
                  v146 = 34;
                  if ((v144 - 2471) < 8 || (v144 - 2703) < 2)
                  {
                    v6 = v149;
                    goto LABEL_338;
                  }
                  v5 = v165;
                  v6 = v149;
                  if ((v144 - 1996) <= 1)
                  {
LABEL_338:
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, v146, 1, 1, 0, 1, 2);
                    v5 = v165;
                  }
                }
              }
            }
          }
        }
      }
      v28 = *(_QWORD *)(v28 + 8);
      v158 = v26 - 24;
      if (!v26)
        v158 = 0;
      if (v28 != v158 + 40)
      {
LABEL_346:
        if (v26 == v25)
          goto LABEL_276;
        continue;
      }
      break;
    }
    while (1)
    {
      v26 = *(_QWORD *)(v26 + 8);
      if (v26 == v25)
        break;
      v159 = v26 - 24;
      if (!v26)
        v159 = 0;
      v28 = *(_QWORD *)(v159 + 48);
      if (v28 != v159 + 40)
        goto LABEL_346;
    }
LABEL_276:
    v5 = *(_QWORD *)(v5 + 8);
  }
  while (v5 != a2 + 24);
  return 0;
}

uint64_t sub_1C566BF38(llvm *a1)
{
  llvm *UnderlyingObject;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm **v6;
  llvm *v7;
  int v8;
  int v9;
  llvm *v10;
  uint64_t result;

  UnderlyingObject = llvm::getUnderlyingObject(a1, (const llvm::Value *)6);
  if (!UnderlyingObject
    || *((unsigned __int8 *)UnderlyingObject + 16) > 3u
    || (*((_BYTE *)UnderlyingObject + 23) & 0x10) == 0)
  {
    return 1;
  }
  v2 = ***(_QWORD ***)UnderlyingObject;
  v3 = *(_QWORD *)(v2 + 152);
  v4 = *(unsigned int *)(v2 + 168);
  if (!(_DWORD)v4)
    goto LABEL_10;
  LODWORD(v5) = (v4 - 1) & ((UnderlyingObject >> 4) ^ (UnderlyingObject >> 9));
  v6 = (llvm **)(v3 + 16 * v5);
  v7 = *v6;
  if (*v6 != UnderlyingObject)
  {
    v8 = 1;
    while (v7 != (llvm *)-4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(llvm **)(v3 + 16 * v5);
      if (v7 == UnderlyingObject)
      {
        v6 = (llvm **)(v3 + 16 * v5);
        goto LABEL_11;
      }
    }
LABEL_10:
    v6 = (llvm **)(v3 + 16 * v4);
  }
LABEL_11:
  v10 = v6[1];
  if (*(_QWORD *)v10 != 37)
    return 1;
  result = memcmp((char *)v10 + 16, "agc.simd_permute_emulation_scratchpad", 0x25uLL);
  if ((_DWORD)result)
    return 1;
  return result;
}

void llvm::AlwaysInlinerPass::run(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t ResultImpl;
  llvm::Function *v9;
  llvm::BasicBlock *v10;
  uint64_t v11;
  int64x2_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int i;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char *v43;
  _BYTE *v44;
  uint64_t v45;
  const llvm::Function *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  char *v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _BOOL4 ArchAllowsMergeAttributes;
  const llvm::Function *v60;
  _BOOL4 v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  size_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  void **v71;
  char *v72;
  unint64_t v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  void **v77;
  void **v78;
  unsigned int v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  int v86;
  uint64_t v88;
  uint64_t *j;
  uint64_t v90;
  int v91;
  unsigned int v92;
  int v93;
  uint64_t v95;
  char v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  _BYTE *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v147;
  void *__dst[2];
  uint64_t v149;
  _BYTE v150[32];
  char v151;
  unsigned __int8 *v152;
  unsigned __int8 *v153;
  _QWORD v154[2];
  uint64_t *v155;
  uint64_t v156;
  void *v157[2];
  char v158;
  void *v159;
  char v160;
  void *v161[2];
  char v162;
  void *v163;
  char v164;
  void *v165[2];
  char v166;
  void *v167;
  char v168;
  void *__p[2];
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;
  _BYTE v176[32];
  char *v177[2];
  uint64_t v178;
  void *v179;
  uint64_t v180;
  _BYTE v181[72];
  void *v182;
  uint64_t v183;
  _BYTE v184[128];
  uint64_t v185;
  void **v186;
  unsigned int v187;
  void *v188;
  uint64_t v189;
  _BYTE v190[128];
  uint64_t v191[10];
  void *v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t (**v195)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v196;
  char v197;
  _QWORD v198[2];
  int v199;
  int v200;
  const char *v201;
  const char *v202;
  uint64_t v203;
  char v204;
  char v205;
  void *v206;
  uint64_t v207;
  _BYTE v208[260];
  int v209;
  uint64_t v210;
  uint64_t v211;

  v211 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, a2)+ 8);
  v156 = v7;
  ResultImpl = llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::ProfileSummaryAnalysis::Key, a2);
  v185 = 1;
  v11 = 8;
  v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)((char *)&v185 + v11) = v12;
    v11 += 16;
  }
  while (v11 != 136);
  v188 = v190;
  v189 = 0x1000000000;
  v182 = v184;
  v183 = 0x1000000000;
  v13 = a2 + 24;
  v14 = *(_QWORD *)(a2 + 32);
  v144 = v13;
  if (v14 == v13)
  {
    v96 = 0;
    v81 = (uint64_t *)v184;
    goto LABEL_187;
  }
  v141 = a4;
  v142 = 0;
  v145 = ResultImpl + 8;
  v15 = v181;
  do
  {
    v143 = v14;
    if (v14)
      v16 = v14 - 56;
    else
      v16 = 0;
    v17 = *(_QWORD *)(v16 + 112);
    if (v17)
    {
      if (*(_DWORD *)(v17 + 8))
      {
        v18 = *(_QWORD *)(v17 + 40);
        if (v18)
        {
          v19 = *(_DWORD *)(v18 + 40);
          if (v19)
          {
            v20 = *(_QWORD *)(v18 + 24);
            v21 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
            if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
            {
              v80 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v80 = 0xFF51AFD7ED558CCDLL;
              qword_1ED7EAC80 = v80;
              __cxa_guard_release(&qword_1ED7EAC88);
            }
            v22 = __ROR8__(qword_1ED7EAC80 ^ 0x7A48DC6FE7EA5090, 30);
            v23 = 0x9DDFEA08EB382D69
                * ((qword_1ED7EAC80 - 0x2D69957673248ED7) ^ ((0x9DDFEA08EB382D69
                                                              * ((v22 - 0x574D426307C1BC2DLL) ^ (qword_1ED7EAC80
                                                                                               - 0x2D69957673248ED7))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v22 - 0x574D426307C1BC2DLL) ^ (qword_1ED7EAC80 - 0x2D69957673248ED7))));
            v24 = -348639895 * ((v23 >> 47) ^ v23);
            for (i = 1; ; ++i)
            {
              v26 = v24 & (v19 - 1);
              v27 = (uint64_t *)(v20 + 24 * v26);
              v28 = *v27;
              if (*v27 == -1)
              {
                if ("coroutine.presplit" == (char *)-1)
                  goto LABEL_140;
              }
              else if (v28 == -2)
              {
                if ("coroutine.presplit" == (char *)-2)
                  goto LABEL_140;
              }
              else if (v27[1] == 18)
              {
                v29 = *(_QWORD *)v28 == 0x6E6974756F726F63 && *(_QWORD *)(v28 + 8) == 0x6C70736572702E65;
                if (v29 && *(_WORD *)(v28 + 16) == 29801)
                  goto LABEL_140;
              }
              if (v28 == -1)
                break;
              v24 = i + v26;
            }
          }
        }
      }
    }
    v31 = v143;
    if (v143 && *(_BYTE *)(v16 + 16) == 3)
    {
      if ((*(_DWORD *)(v16 + 20) & 0x7FFFFFF) == 0)
        goto LABEL_141;
    }
    else if (!*(_BYTE *)(v16 + 16) && *(_QWORD *)(v16 + 72) == v16 + 72 && (*(_BYTE *)(v16 + 34) & 0x80) == 0)
    {
      goto LABEL_141;
    }
    if (llvm::isInlineViable((llvm *)v16, v9, v10))
      goto LABEL_141;
    if (v185 <= 1 && !HIDWORD(v185))
      goto LABEL_41;
    v78 = &v188;
    v77 = (void **)&v186;
    if ((v185 & 1) != 0)
      goto LABEL_148;
    if (((2 * (_DWORD)v185) & 0xFFFFFFFC) >= v187 || v187 < 0x41)
    {
      if (v187)
      {
        v77 = v186;
        v78 = &v186[v187];
        do
LABEL_148:
          *v77++ = (void *)-4096;
        while (v77 != v78);
        v79 = v185 & 1;
      }
      else
      {
        v79 = 0;
      }
      v185 = v79;
      goto LABEL_41;
    }
    sub_1C566D690(&v185);
LABEL_41:
    LODWORD(v189) = 0;
    v32 = *(_QWORD *)(v16 + 8);
    if (!v32)
      goto LABEL_135;
    do
    {
      v33 = *(_QWORD *)(v32 + 24);
      v34 = *(unsigned __int8 *)(v33 + 16);
      if (v34 >= 0x1C)
      {
        v35 = v34 - 33;
        v36 = v35 > 0x33;
        v37 = (1 << v35) & 0x8000000000041;
        if (!v36 && v37 != 0)
        {
          v191[0] = *(_QWORD *)(v32 + 24);
          v39 = *(_QWORD *)(v33 - 32);
          if (!v39 || *(_BYTE *)(v39 + 16) || *(_QWORD *)(v39 + 24) != *(_QWORD *)(v33 + 72))
            v39 = 0;
          if (v39 == v16)
          {
            v40 = *(_QWORD *)(v33 + 64);
            if (!v40 || (*(_BYTE *)(v40 + 12) & 4) == 0)
            {
              if (!llvm::CallBase::hasFnAttrOnCalledFunction(v33, 2))
                goto LABEL_61;
              v40 = *(_QWORD *)(v191[0] + 64);
              if (!v40)
                goto LABEL_60;
            }
            if ((*(_BYTE *)(v40 + 15) & 8) == 0)
              goto LABEL_60;
            v41 = *(_QWORD *)(v16 + 40) + 216;
            LOWORD(v199) = 260;
            v195 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v41;
            llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)&v195);
            v42 = v171;
            if (SHIBYTE(v170) < 0)
              operator delete(__p[0]);
            if ((v42 - 26) <= 3)
LABEL_60:
              sub_1C4D955D4((uint64_t)&v185, v191);
          }
        }
      }
LABEL_61:
      v32 = *(_QWORD *)(v32 + 8);
    }
    while (v32);
    if ((_DWORD)v189)
    {
      v43 = (char *)v188;
      v147 = (char *)v188 + 8 * v189;
      while (1)
      {
        v44 = v15;
        v45 = *(_QWORD *)v43;
        v46 = *(const llvm::Function **)(*(_QWORD *)(*(_QWORD *)v43 + 40) + 56);
        llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter((llvm::OptimizationRemarkEmitter *)v154, v46);
        v47 = *(unsigned __int8 **)(v45 + 48);
        v153 = v47;
        if (v47)
          llvm::MetadataTracking::track((uint64_t)&v153, v47, 2);
        v48 = *(_QWORD *)(v45 + 40);
        v49 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v7, &llvm::BlockFrequencyAnalysis::Key, (uint64_t)v46)
            + 8;
        v50 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v7, &llvm::BlockFrequencyAnalysis::Key, v16);
        __p[0] = 0;
        __p[1] = sub_1C566D750;
        v170 = &v156;
        v171 = v145;
        v172 = v49;
        v173 = v50 + 8;
        v174 = v176;
        v175 = 0x400000000;
        v177[0] = (char *)&v178;
        v177[1] = (char *)0x800000000;
        v15 = v44;
        v179 = v44;
        v180 = 0x800000000;
        v181[64] = 1;
        v51 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v7, &llvm::AAManager::Key, v16);
        v52 = llvm::InlineFunction((uint64_t ***)v45, (uint64_t)__p, v51 + 8, *a1, 0);
        if (v52)
        {
          v53 = (char *)v52;
          v54 = ***(_QWORD ***)v154[0];
          if (*(_QWORD *)(v54 + 128)
            || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v54 + 72) + 48))(*(_QWORD *)(v54 + 72)))
          {
            v55 = (int)v153;
            if (v153)
            {
              v57 = *(_QWORD *)&v153[-8 * *((unsigned int *)v153 + 2)];
              if (*(_BYTE *)v57 != 15)
                v57 = *(_QWORD *)(v57 - 8 * *(unsigned int *)(v57 + 8));
              v56 = *((_DWORD *)v153 + 1);
              v55 = *((unsigned __int16 *)v153 + 1);
            }
            else
            {
              v56 = 0;
              v57 = 0;
            }
            v64 = *(_QWORD *)(v48 + 56);
            v196 = 10;
            v197 = 2;
            v198[0] = v64;
            v198[1] = v57;
            v199 = v56;
            v200 = v55;
            v201 = "inline";
            v202 = "NotInlined";
            v203 = 10;
            v204 = 0;
            v205 = 0;
            v206 = v208;
            v207 = 0x400000000;
            v208[256] = 0;
            v209 = -1;
            v210 = v48;
            v195 = &off_1E814E538;
            v165[0] = "'";
            v165[1] = (void *)1;
            sub_1C53B17B4((uint64_t)&v206, (const void **)v165);
            llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v165, "Callee", 6uLL, (_BYTE *)v16);
            v65 = sub_1C47E3888((uint64_t)&v195, (uint64_t)v165);
            v161[0] = "' is not inlined into '";
            v161[1] = (void *)23;
            sub_1C53B17B4(v65 + 80, (const void **)v161);
            llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v161, "Caller", 6uLL, v46);
            v66 = sub_1C47E3888(v65, (uint64_t)v161);
            v157[0] = "': ";
            v157[1] = (void *)3;
            sub_1C53B17B4(v66 + 80, (const void **)v157);
            v67 = strlen(v53);
            llvm::DiagnosticInfoOptimizationBase::Argument::Argument(v157, "Reason", 6uLL, v53, v67);
            v68 = sub_1C47E3888(v66, (uint64_t)v157);
            sub_1C61998EC((uint64_t)v191, v68);
            v191[0] = (uint64_t)&off_1E814E538;
            if (v160 < 0)
              operator delete(v159);
            if (v158 < 0)
              operator delete(v157[0]);
            if (v164 < 0)
              operator delete(v163);
            if (v162 < 0)
              operator delete(v161[0]);
            if (v168 < 0)
              operator delete(v167);
            if (v166 < 0)
              operator delete(v165[0]);
            v195 = &off_1E814E790;
            v69 = (char *)v206;
            if ((_DWORD)v207)
            {
              v70 = (unint64_t)v207 << 6;
              do
              {
                v71 = (void **)&v69[v70];
                if (v69[v70 - 17] < 0)
                  operator delete(*(v71 - 5));
                if (*((char *)v71 - 41) < 0)
                  operator delete(*(v71 - 8));
                v70 -= 64;
              }
              while (v70);
              v69 = (char *)v206;
            }
            if (v69 != v208)
              free(v69);
            llvm::OptimizationRemarkEmitter::emit((llvm::OptimizationRemarkEmitter *)v154, (llvm::DiagnosticInfoOptimizationBase *)v191);
            v191[0] = (uint64_t)&off_1E814E790;
            v72 = (char *)v192;
            if (v193)
            {
              v73 = (unint64_t)v193 << 6;
              do
              {
                v74 = (void **)&v72[v73];
                if (v72[v73 - 17] < 0)
                  operator delete(*(v74 - 5));
                if (*((char *)v74 - 41) < 0)
                  operator delete(*(v74 - 8));
                v73 -= 64;
              }
              while (v73);
              v72 = (char *)v192;
            }
            if (v72 != (char *)&v194)
              free(v72);
          }
          goto LABEL_86;
        }
        v152 = v153;
        if (v153)
          llvm::MetadataTracking::track((uint64_t)&v152, v153, 2);
        v150[0] = 0;
        v151 = 0;
        sub_1C4E556F4((llvm::APInt *)"always inline attribute", (llvm::APInt *)v150, (uint64_t)&v195);
        llvm::emitInlinedIntoBasedOnCost((llvm::OptimizationRemarkEmitter *)v154, &v152, v48, (_BYTE *)v16, v46, &v195, 0, "inline");
        if ((_BYTE)v202)
        {
          sub_1C61996A0((uint64_t)v198);
          LOBYTE(v202) = 0;
        }
        if (v151)
        {
          sub_1C61996A0((uint64_t)v150);
          v151 = 0;
        }
        if (v152)
          llvm::MetadataTracking::untrack((uint64_t)&v152, v152);
        v58 = *((_QWORD *)v46 + 5);
        if (*(char *)(v58 + 239) < 0)
        {
          sub_1C47EBC30(__dst, *(void **)(v58 + 216), *(_QWORD *)(v58 + 224));
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)(v58 + 216);
          v149 = *(_QWORD *)(v58 + 232);
        }
        ArchAllowsMergeAttributes = llvm::GPUBaseInfo::getArchAllowsMergeAttributes((uint64_t)__dst);
        v61 = ArchAllowsMergeAttributes;
        if (SHIBYTE(v149) < 0)
          break;
        if (ArchAllowsMergeAttributes)
          goto LABEL_84;
LABEL_85:
        v142 = 1;
LABEL_86:
        if (v179 != v44)
          free(v179);
        sub_1C52768FC(v177);
        if (v174 != v176)
          free(v174);
        v9 = (llvm::Function *)v153;
        if (v153)
          llvm::MetadataTracking::untrack((uint64_t)&v153, v153);
        v62 = v155;
        v155 = 0;
        if (v62)
        {
          v63 = *v62;
          *v62 = 0;
          if (v63)
            (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
          MEMORY[0x1CAA32FC0](v62, 0x20C4093837F09);
        }
        v43 += 8;
        if (v43 == v147)
          goto LABEL_135;
      }
      operator delete(__dst[0]);
      if (!v61)
        goto LABEL_85;
LABEL_84:
      llvm::AttributeFuncs::mergeAttributesForOutlining(v46, (llvm::Function *)v16, v60);
      goto LABEL_85;
    }
LABEL_135:
    v75 = *(_QWORD *)(v16 + 112);
    if (v75)
    {
      v31 = v143;
      if ((*(_BYTE *)(v75 + 12) & 4) != 0)
      {
        v76 = v183;
        if (v183 >= (unint64_t)HIDWORD(v183))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v182, (uint64_t)v184, v183 + 1, 8);
          v76 = v183;
        }
        *((_QWORD *)v182 + v76) = v16;
        LODWORD(v183) = v183 + 1;
      }
    }
    else
    {
LABEL_140:
      v31 = v143;
    }
LABEL_141:
    v14 = *(_QWORD *)(v31 + 8);
  }
  while (v14 != v144);
  v81 = (uint64_t *)v182;
  if ((_DWORD)v183)
  {
    v82 = (uint64_t *)((char *)v182 + 8 * v183);
    a4 = v141;
    while (1)
    {
      v83 = *v81;
      llvm::Constant::removeDeadConstantUsers(*v81);
      v84 = *(_DWORD *)(v83 + 32);
      if ((v84 & 0xE) != 2)
      {
        v85 = v84 & 0xF;
        v36 = v85 > 8;
        v86 = (1 << v85) & 0x182;
        if (v36 || v86 == 0)
          break;
      }
      v88 = *(_QWORD *)(v83 + 8);
      if (v88)
      {
        while (*(_BYTE *)(*(_QWORD *)(v88 + 24) + 16) == 4)
        {
          v88 = *(_QWORD *)(v88 + 8);
          if (!v88)
            goto LABEL_165;
        }
        break;
      }
LABEL_165:
      if (++v81 == v82)
      {
        v81 = v82;
        goto LABEL_186;
      }
    }
    for (j = v81 + 1; j != v82; ++j)
    {
      v90 = *j;
      llvm::Constant::removeDeadConstantUsers(*j);
      v91 = *(_DWORD *)(v90 + 32);
      if ((v91 & 0xE) != 2)
      {
        v92 = v91 & 0xF;
        v36 = v92 > 8;
        v93 = (1 << v92) & 0x182;
        if (v36 || v93 == 0)
          continue;
      }
      v95 = *(_QWORD *)(v90 + 8);
      if (v95)
      {
        while (*(_BYTE *)(*(_QWORD *)(v95 + 24) + 16) == 4)
        {
          v95 = *(_QWORD *)(v95 + 8);
          if (!v95)
            goto LABEL_180;
        }
      }
      else
      {
LABEL_180:
        *v81++ = *j;
      }
    }
  }
  else
  {
    a4 = v141;
  }
LABEL_186:
  v96 = v142;
LABEL_187:
  v97 = (char *)v182;
  LODWORD(v183) = (unint64_t)((char *)v81 - (_BYTE *)v182) >> 3;
  v98 = v183;
  if ((_DWORD)v183)
  {
    v99 = (char *)v182 + 8 * v183;
    while (2)
    {
      v100 = v97;
      while (1)
      {
        v101 = *(_QWORD *)v100;
        if (!*(_QWORD *)(*(_QWORD *)v100 + 48))
          break;
        v100 += 8;
        if (v100 == v99)
        {
          v97 = v99;
          goto LABEL_198;
        }
      }
      do
      {
        v99 -= 8;
        if (v99 == v100)
        {
          v97 = v100;
          goto LABEL_198;
        }
      }
      while (!*(_QWORD *)(*(_QWORD *)v99 + 48));
      *(_QWORD *)v100 = *(_QWORD *)v99;
      v97 = v100 + 8;
      *(_QWORD *)v99 = v101;
      if (v99 != v100 + 8)
        continue;
      break;
    }
    v97 = v100 + 8;
  }
LABEL_198:
  v102 = v182;
  v103 = (char *)v182 + 8 * v98;
  if (v97 != v103)
  {
    v104 = v97;
    do
    {
      v105 = *(_QWORD *)v104;
      if (*(_QWORD *)v104)
        v106 = *(_QWORD *)v104 + 56;
      else
        v106 = 0;
      if (v105)
        v107 = v106 - 56;
      else
        v107 = 0;
      llvm::SymbolTableListTraits<llvm::Function>::removeNodeFromList(v144, (uint64_t ***)v107);
      v108 = *(_QWORD *)(v107 + 56);
      v109 = *(_QWORD **)(v107 + 64);
      *v109 = v108;
      *(_QWORD *)(v108 + 8) = v109;
      *(_QWORD *)(v107 + 56) = 0;
      *(_QWORD *)(v107 + 64) = 0;
      if (v105)
      {
        llvm::Function::~Function((llvm::Function *)(v106 - 56));
        v110 = *(_DWORD *)(v105 + 20);
        if ((v110 & 0x40000000) != 0)
        {
          v117 = *(char **)(v105 - 8);
          v115 = (char *)(v105 - 8);
          v116 = v117;
          v118 = v110 & 0x7FFFFFF;
          if ((_DWORD)v118)
          {
            v119 = 32 * v118;
            do
            {
              v120 = &v116[v119];
              if (*(_QWORD *)&v116[v119 - 32])
              {
                **((_QWORD **)v120 - 2) = *((_QWORD *)v120 - 3);
                v121 = *((_QWORD *)v120 - 3);
                if (v121)
                  *(_QWORD *)(v121 + 16) = *((_QWORD *)v120 - 2);
              }
              v119 -= 32;
            }
            while (v119);
          }
          operator delete(v116);
        }
        else
        {
          v111 = v110 & 0x7FFFFFF;
          if ((_DWORD)v111)
          {
            v112 = v106 - 88;
            v113 = -32 * v111;
            do
            {
              if (*(_QWORD *)v112)
              {
                **(_QWORD **)(v112 + 16) = *(_QWORD *)(v112 + 8);
                v114 = *(_QWORD *)(v112 + 8);
                if (v114)
                  *(_QWORD *)(v114 + 16) = *(_QWORD *)(v112 + 16);
              }
              v112 -= 32;
              v113 += 32;
            }
            while (v113);
          }
          v115 = (char *)(v106 - 56 - 32 * v111);
          if (v110 < 0)
            v115 = &v115[-*((_QWORD *)v115 - 1) - 8];
        }
        operator delete(v115);
      }
      v104 += 8;
    }
    while (v104 != v103);
    v96 = 1;
    v102 = v182;
  }
  LODWORD(v183) = (unint64_t)(v97 - v102) >> 3;
  if ((_DWORD)v183 && (llvm::filterDeadComdatFunctions((uint64_t)&v182), (_DWORD)v183))
  {
    v122 = (char *)v182;
    v123 = (char *)v182 + 8 * v183;
    do
    {
      v124 = *(_QWORD *)v122;
      if (*(_QWORD *)v122)
        v125 = *(_QWORD *)v122 + 56;
      else
        v125 = 0;
      if (v124)
        v126 = v125 - 56;
      else
        v126 = 0;
      llvm::SymbolTableListTraits<llvm::Function>::removeNodeFromList(v144, (uint64_t ***)v126);
      v127 = *(_QWORD *)(v126 + 56);
      v128 = *(_QWORD **)(v126 + 64);
      *v128 = v127;
      *(_QWORD *)(v127 + 8) = v128;
      *(_QWORD *)(v126 + 56) = 0;
      *(_QWORD *)(v126 + 64) = 0;
      if (v124)
      {
        llvm::Function::~Function((llvm::Function *)(v125 - 56));
        v129 = *(_DWORD *)(v124 + 20);
        if ((v129 & 0x40000000) != 0)
        {
          v136 = *(char **)(v124 - 8);
          v134 = (char *)(v124 - 8);
          v135 = v136;
          v137 = v129 & 0x7FFFFFF;
          if ((_DWORD)v137)
          {
            v138 = 32 * v137;
            do
            {
              v139 = &v135[v138];
              if (*(_QWORD *)&v135[v138 - 32])
              {
                **((_QWORD **)v139 - 2) = *((_QWORD *)v139 - 3);
                v140 = *((_QWORD *)v139 - 3);
                if (v140)
                  *(_QWORD *)(v140 + 16) = *((_QWORD *)v139 - 2);
              }
              v138 -= 32;
            }
            while (v138);
          }
          operator delete(v135);
        }
        else
        {
          v130 = v129 & 0x7FFFFFF;
          if ((_DWORD)v130)
          {
            v131 = v125 - 88;
            v132 = -32 * v130;
            do
            {
              if (*(_QWORD *)v131)
              {
                **(_QWORD **)(v131 + 16) = *(_QWORD *)(v131 + 8);
                v133 = *(_QWORD *)(v131 + 8);
                if (v133)
                  *(_QWORD *)(v133 + 16) = *(_QWORD *)(v131 + 16);
              }
              v131 -= 32;
              v132 += 32;
            }
            while (v132);
          }
          v134 = (char *)(v125 - 56 - 32 * v130);
          if (v129 < 0)
            v134 = &v134[-*((_QWORD *)v134 - 1) - 8];
        }
        operator delete(v134);
      }
      v122 += 8;
    }
    while (v122 != v123);
LABEL_256:
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)(a4 + 88) = 0;
    *(_OWORD *)(a4 + 72) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_QWORD *)a4 = a4 + 32;
    *(_QWORD *)(a4 + 8) = a4 + 32;
    *(_QWORD *)(a4 + 16) = 2;
    *(_QWORD *)(a4 + 48) = a4 + 80;
    *(_QWORD *)(a4 + 56) = a4 + 80;
    *(_DWORD *)(a4 + 64) = 2;
  }
  else
  {
    if ((v96 & 1) != 0)
      goto LABEL_256;
    *(_QWORD *)a4 = a4 + 32;
    *(_QWORD *)(a4 + 8) = a4 + 32;
    *(_QWORD *)(a4 + 16) = 2;
    *(_DWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 48) = a4 + 80;
    *(_QWORD *)(a4 + 56) = a4 + 80;
    *(_QWORD *)(a4 + 64) = 2;
    *(_DWORD *)(a4 + 72) = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  if (v182 != v184)
    free(v182);
  if (v188 != v190)
    free(v188);
  if ((v185 & 1) == 0)
    MEMORY[0x1CAA32FB4](v186, 8);
}

void llvm::initializeAlwaysInlinerLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831A00);
  if (v2 != -1)
  {
    v5[0] = sub_1C566D018;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831A00, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C566D018(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeCallGraphWrapperPassPass(a1, v2);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v3);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  v4 = operator new();
  *(_QWORD *)v4 = "Inliner for always_inline functions";
  *(_QWORD *)(v4 + 8) = 35;
  *(_QWORD *)(v4 + 16) = "always-inline";
  *(_QWORD *)(v4 + 24) = 13;
  *(_QWORD *)(v4 + 32) = &unk_1EF8F7130;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C566D14C;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

_QWORD *sub_1C566D0CC(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  _QWORD *result;
  int v5;
  _QWORD *v6;

  if (a2 <= 0x10)
  {
    *a1 = 1;
  }
  else
  {
    *(_DWORD *)a1 &= ~1u;
    v3 = a2;
    result = operator new(8 * a2, (std::align_val_t)8uLL);
    a1[1] = result;
    a1[2] = v3;
    v5 = *(_DWORD *)a1;
    *a1 = *(_DWORD *)a1 & 1;
    if ((v5 & 1) == 0)
    {
      v6 = &result[v3];
      goto LABEL_4;
    }
  }
  result = a1 + 1;
  v6 = a1 + 17;
  do
LABEL_4:
    *result++ = -4096;
  while (result != v6);
  return result;
}

uint64_t sub_1C566D14C()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = &unk_1EF8F7130;
  *(_DWORD *)(v0 + 24) = 3;
  *(_BYTE *)(v0 + 28) = 1;
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 88) = 0;
  *(_QWORD *)(v0 + 96) = 0x1000000000;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_QWORD *)v0 = &off_1E81724B8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED831A00);
  if (v2 != -1)
  {
    v6[0] = sub_1C566D018;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED831A00, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C566D250(_QWORD *a1)
{
  sub_1C627A6A0(a1);
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C566D278(llvm::LegacyInlinerBase *a1, llvm::CallGraph *a2)
{
  return llvm::LegacyInlinerBase::removeDeadFunctions(a1, a2, 1);
}

llvm::APInt *sub_1C566D280@<X0>(llvm::Function *a1@<X1>, llvm::BasicBlock *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  llvm::APInt *result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  int i;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  llvm::APInt *v30;
  int v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  _BYTE v35[32];
  char v36;
  _BYTE v37[32];
  char v38;
  _BYTE v39[32];
  char v40;
  uint64_t v41[4];
  __int16 v42;
  void *__p;
  char v44;
  int v45;
  _BYTE v46[32];
  char v47;
  _BYTE v48[32];
  char v49;
  _BYTE v50[32];
  char v51;
  _BYTE v52[32];
  char v53;

  v4 = *((_QWORD *)a1 - 4);
  if (!v4 || *(_BYTE *)(v4 + 16) || (v5 = (uint64_t)a1, *(_QWORD *)(v4 + 24) != *((_QWORD *)a1 + 9)))
  {
    v52[0] = 0;
    v53 = 0;
    v6 = v52;
    result = sub_1C4E55798((llvm::APInt *)"indirect call", (llvm::APInt *)v52, a3);
    if (!v53)
      return result;
    return (llvm::APInt *)sub_1C61996A0((uint64_t)v6);
  }
  v8 = *(_QWORD *)(v4 + 112);
  if (v8 && *(_DWORD *)(v8 + 8) && (v9 = *(_QWORD *)(v8 + 40)) != 0 && (v10 = *(_DWORD *)(v9 + 40)) != 0)
  {
    v11 = *(_QWORD *)(v9 + 24);
    v12 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    v13 = &unk_1ED7EA000;
    if ((v12 & 1) == 0)
    {
      v34 = v11;
      v33 = v10;
      v31 = __cxa_guard_acquire(&qword_1ED7EAC88);
      v13 = &unk_1ED7EA000;
      v10 = v33;
      v11 = v34;
      if (v31)
      {
        v32 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v32 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v32;
        __cxa_guard_release(&qword_1ED7EAC88);
        v13 = (_QWORD *)&unk_1ED7EA000;
        v10 = v33;
        v11 = v34;
      }
    }
    v14 = v13[400];
    v15 = __ROR8__(v14 ^ 0x7A48DC6FE7EA5090, 30);
    v16 = 0x9DDFEA08EB382D69
        * ((v14 - 0x2D69957673248ED7) ^ ((0x9DDFEA08EB382D69
                                          * ((v15 - 0x574D426307C1BC2DLL) ^ (v14 - 0x2D69957673248ED7))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v15 - 0x574D426307C1BC2DLL) ^ (v14 - 0x2D69957673248ED7))));
    v17 = -348639895 * ((v16 >> 47) ^ v16);
    v18 = v10 - 1;
    for (i = 1; ; ++i)
    {
      v20 = v17 & v18;
      v21 = (uint64_t *)(v11 + 24 * v20);
      v22 = *v21;
      if (*v21 == -1)
      {
        if ("coroutine.presplit" == (char *)-1)
          goto LABEL_28;
      }
      else if (v22 == -2)
      {
        if ("coroutine.presplit" == (char *)-2)
          goto LABEL_28;
      }
      else if (v21[1] == 18)
      {
        a1 = *(llvm::Function **)(v22 + 8);
        a2 = (llvm::BasicBlock *)*(unsigned __int16 *)(v22 + 16);
        v23 = *(_QWORD *)v22 == 0x6E6974756F726F63 && a1 == (llvm::Function *)0x6C70736572702E65;
        if (v23 && (_DWORD)a2 == 29801)
        {
LABEL_28:
          v50[0] = 0;
          v51 = 0;
          v6 = v50;
          result = sub_1C4E55798((llvm::APInt *)"unsplited coroutine call", (llvm::APInt *)v50, a3);
          if (!v51)
            return result;
          return (llvm::APInt *)sub_1C61996A0((uint64_t)v6);
        }
      }
      if (v22 == -1)
        break;
      v17 = i + v20;
    }
    if (!*(_BYTE *)(v4 + 16))
      goto LABEL_34;
    if (*(_BYTE *)(v4 + 16) == 3 && (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) == 0)
    {
LABEL_36:
      v48[0] = 0;
      v49 = 0;
      v6 = v48;
      result = sub_1C4E55798((llvm::APInt *)"no definition", (llvm::APInt *)v48, a3);
      if (v49)
        return (llvm::APInt *)sub_1C61996A0((uint64_t)v6);
      return result;
    }
  }
  else
  {
LABEL_34:
    if (*(_QWORD *)(v4 + 72) == v4 + 72 && (*(_BYTE *)(v4 + 34) & 0x80) == 0)
      goto LABEL_36;
  }
  v25 = *(_QWORD *)(v5 + 64);
  if (v25 && (*(_BYTE *)(v25 + 12) & 4) != 0 || (llvm::CallBase::hasFnAttrOnCalledFunction(v5, 2) & 1) != 0)
  {
    v26 = *(_QWORD *)(v4 + 112);
    if (!v26 || (*(_BYTE *)(v26 + 12) & 4) == 0)
      goto LABEL_53;
    v27 = *(_QWORD *)(v5 + 64);
    if ((!v27 || (*(_BYTE *)(v27 + 15) & 8) == 0) && !llvm::CallBase::hasFnAttrOnCalledFunction(v5, 27))
      goto LABEL_53;
    v28 = *(_QWORD *)(v4 + 40) + 216;
    v42 = 260;
    v41[0] = v28;
    llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)v41);
    v29 = v45 - 30;
    if (v44 < 0)
      operator delete(__p);
    if (v29 <= 0xFFFFFFFB)
    {
      v39[0] = 0;
      v40 = 0;
      v6 = v39;
      result = sub_1C4E55798((llvm::APInt *)"noinline call site attribute", (llvm::APInt *)v39, a3);
      if (v40)
        return (llvm::APInt *)sub_1C61996A0((uint64_t)v6);
    }
    else
    {
LABEL_53:
      v30 = (llvm::APInt *)llvm::isInlineViable((llvm *)v4, a1, a2);
      if (v30)
      {
        v37[0] = 0;
        v38 = 0;
        v6 = v37;
        result = sub_1C4E55798(v30, (llvm::APInt *)v37, a3);
        if (v38)
          return (llvm::APInt *)sub_1C61996A0((uint64_t)v6);
      }
      else
      {
        v35[0] = 0;
        v36 = 0;
        v6 = v35;
        result = sub_1C4E556F4((llvm::APInt *)"always inliner", (llvm::APInt *)v35, a3);
        if (v36)
          return (llvm::APInt *)sub_1C61996A0((uint64_t)v6);
      }
    }
  }
  else
  {
    v46[0] = 0;
    v47 = 0;
    v6 = v46;
    result = sub_1C4E55798((llvm::APInt *)"no alwaysinline attribute", (llvm::APInt *)v46, a3);
    if (v47)
      return (llvm::APInt *)sub_1C61996A0((uint64_t)v6);
  }
  return result;
}

_QWORD *sub_1C566D690(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 == 28)
    v4 = 64;
  else
    v4 = 1 << (33 - v3);
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 0x11)
  {
    v6 = result + 1;
    *result = 1;
    v7 = result + 17;
    do
LABEL_16:
      *v6++ = -4096;
    while (v6 != v7);
    return result;
  }
  if ((v2 & 1) != 0)
    return sub_1C566D0CC(v1, v5);
  if (v5 != *((_DWORD *)result + 4))
  {
    MEMORY[0x1CAA32FB4](result[1], 8);
    return sub_1C566D0CC(v1, v5);
  }
  *result = 0;
  if (v5)
  {
    v6 = (_QWORD *)result[1];
    v7 = &v6[v5];
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_1C566D750(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::AssumptionAnalysis::Key, a2) + 8;
}

void llvm::initializeAnnotation2MetadataLegacyPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831A08);
  if (v2 != -1)
  {
    v5[0] = sub_1C566D7D8;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831A08, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C566D7D8(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Annotation2Metadata";
  *(_QWORD *)(v2 + 8) = 19;
  *(_QWORD *)(v2 + 16) = "annotation2metadata";
  *(_QWORD *)(v2 + 24) = 19;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F3021;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C566DBA0;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C566D864(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F3021;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E8172570;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED831A08);
  if (v3 != -1)
  {
    v7[0] = sub_1C566D7D8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED831A08, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C566D92C(uint64_t a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  int v17;
  llvm::ConstantDataSequential **v18;
  llvm::ConstantDataSequential *v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int8 *RawDataValues;
  size_t v32;
  uint64_t v33;
  uint64_t v34;

  result = sub_1C550930C(*(_QWORD *)a1, (uint64_t)"annotation-remarks", 18);
  if ((_DWORD)result)
  {
    result = sub_1C4FB7E80(*(uint64_t **)(a1 + 112), "llvm.global.annotations", 0x17uLL);
    if (result)
    {
      if (*(_BYTE *)(result + 16) == 3
        && (*(_DWORD *)(result + 32) & 0xFu) - 7 >= 2
        && (v3 = *(_DWORD *)(result + 20), (v3 & 0x7FFFFFF) == 1))
      {
        if ((v3 & 0x40000000) != 0)
          v4 = *(_QWORD *)(result - 8);
        else
          v4 = result - 32;
        v5 = *(_QWORD *)v4;
        v6 = *(_DWORD *)(*(_QWORD *)v4 + 20);
        if ((v6 & 0x40000000) != 0)
        {
          v8 = *(uint64_t **)(v5 - 8);
          v7 = v6 & 0x7FFFFFF;
        }
        else
        {
          v7 = v6 & 0x7FFFFFF;
          v8 = (uint64_t *)(v5 - 32 * v7);
        }
        if (v7)
        {
          v9 = &v8[4 * v7];
          do
          {
            v10 = *v8;
            if (*v8)
              v11 = *(_BYTE *)(*v8 + 16) == 9;
            else
              v11 = 0;
            if (v11 && (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) == 4)
            {
              v12 = *(_QWORD *)(v10 - 96);
              if (v12 && *(_BYTE *)(v12 + 16) == 5)
              {
                v14 = *(_DWORD *)(v12 + 20) & 0x7FFFFFF;
                if (v14 >= 2)
                {
                  v15 = *(_QWORD *)(v12 - 32 * v14);
                  if (v15 && *(unsigned __int8 *)(v15 + 16) <= 3u)
                  {
                    v17 = *(_DWORD *)(v15 + 20);
                    v18 = (v17 & 0x40000000) != 0
                        ? *(llvm::ConstantDataSequential ***)(v15 - 8)
                        : (llvm::ConstantDataSequential **)(v15 - 32 * (v17 & 0x7FFFFFF));
                    v19 = *v18;
                    v20 = *((_BYTE *)*v18 + 16) & 0xFE;
                    if (v19 && v20 == 14)
                    {
                      v22 = *(_QWORD *)(v10 - 128);
                      if (v22)
                      {
                        if (*(_BYTE *)(v22 + 16) == 5 && *(_WORD *)(v22 + 18) == 49)
                        {
                          v23 = *(_QWORD *)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF));
                          if (v23 && *(_BYTE *)(v23 + 16) == 0)
                          {
                            v25 = v23 + 72;
                            for (i = *(_QWORD *)(v23 + 80); i != v25; i = *(_QWORD *)(i + 8))
                            {
                              v27 = i - 24;
                              if (!i)
                                v27 = 0;
                              v28 = *(_QWORD *)(v27 + 48);
                              if (v28 != v27 + 40)
                              {
                                while (1)
                                {
                                  if (v28)
                                    v29 = v28 - 24;
                                  else
                                    v29 = 0;
                                  RawDataValues = (unsigned __int8 *)llvm::ConstantDataSequential::getRawDataValues(v19);
                                  if (v30 >= v30 - 1)
                                    v32 = v30 - 1;
                                  else
                                    v32 = v30;
                                  llvm::Instruction::addAnnotationMetadata(v29, RawDataValues, v32);
                                  v28 = *(_QWORD *)(v28 + 8);
                                  v33 = i - 24;
                                  if (!i)
                                    v33 = 0;
                                  if (v28 == v33 + 40)
                                    break;
LABEL_68:
                                  if (i == v25)
                                    goto LABEL_47;
                                }
                                while (1)
                                {
                                  i = *(_QWORD *)(i + 8);
                                  if (i == v25)
                                    goto LABEL_47;
                                  v34 = i - 24;
                                  if (!i)
                                    v34 = 0;
                                  v28 = *(_QWORD *)(v34 + 48);
                                  if (v28 != v34 + 40)
                                    goto LABEL_68;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_47:
            v8 += 4;
            result = 1;
          }
          while (v8 != v9);
        }
        else
        {
          return 1;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1C566DBA0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C566D864(v0);
}

void sub_1C566DBCC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C566DBF0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t sub_1C566DBFC(uint64_t a1, uint64_t a2)
{
  return sub_1C566D92C(a2);
}

uint64_t llvm::ArgumentPromotionPass::isDenselyPacked(llvm::ArgumentPromotionPass *this, llvm::Type *a2, const llvm::DataLayout *a3)
{
  unsigned int v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  llvm::StructLayout *StructLayout;
  const llvm::DataLayout *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  llvm::ArgumentPromotionPass *v22;
  const char *v23;
  uint64_t v24;

  while (1)
  {
    v5 = *((unsigned __int8 *)this + 8);
    if (v5 > 0x11)
      goto LABEL_4;
    if (((1 << v5) & 0xAC7F) != 0)
      goto LABEL_10;
    if (((1 << v5) & 0x30000) == 0)
    {
LABEL_4:
      if ((v5 & 0xFE) != 0x12 && v5 != 21)
        return 0;
    }
    result = llvm::Type::isSizedDerivedType((uint64_t)this, 0);
    if (!(_DWORD)result)
      return result;
LABEL_10:
    sub_1C4768AD0((uint64_t)a2, (uint64_t)this);
    v9 = v8;
    v11 = v10;
    v13 = sub_1C53E2F94((uint64_t)a2, (uint64_t)this);
    result = 0;
    if (v9 != v13 || v11 != v12)
      return result;
    if ((*((_DWORD *)this + 2) & 0xFE) != 0x12)
    {
      v14 = *((_DWORD *)this + 2);
      if (v14 != 17)
        break;
    }
    this = (llvm::ArgumentPromotionPass *)*((_QWORD *)this + 3);
  }
  if (v14 != 16)
    return 1;
  StructLayout = llvm::DataLayout::getStructLayout(a2, this);
  v17 = *((unsigned int *)this + 3);
  if (!(_DWORD)v17)
    return 1;
  v18 = 0;
  v19 = 0;
  v20 = (char *)StructLayout + 16;
  v21 = 8 * v17;
  while (1)
  {
    v22 = *(llvm::ArgumentPromotionPass **)(*((_QWORD *)this + 2) + v18);
    result = llvm::ArgumentPromotionPass::isDenselyPacked(v22, a2, v16);
    if (!(_DWORD)result)
      break;
    if (v19 != 8 * *(_QWORD *)&v20[v18])
      return 0;
    v24 = sub_1C53E2F94((uint64_t)a2, (uint64_t)v22);
    if ((_DWORD)v23 == 1)
    v19 += v24;
    v18 += 8;
    if (v21 == v18)
      return 1;
  }
  return result;
}

_QWORD *llvm::ArgumentPromotionPass::run@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, llvm::SmallPtrSetImplBase *a5@<X8>)
{
  uint64_t ResultImpl;
  uint64_t v9;
  llvm::LazyCallGraph::Node **v10;
  llvm::LazyCallGraph::Node **v11;
  char v12;
  uint64_t v13;
  llvm::LazyCallGraph::Node *v14;
  llvm::Function *v15;
  uint64_t v16;
  unsigned int v17;
  llvm::Function *v18;
  llvm::Function *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm::Function **v24;
  llvm::Function *v25;
  int v26;
  int v27;
  llvm::Function *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  llvm::SmallPtrSetImplBase *v34;
  uint64_t v37;
  char v38;
  char v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  int v43;
  _BYTE v44[16];
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  int v48;
  _BYTE v49[16];
  _BYTE v50[24];
  uint64_t v51;

  ResultImpl = llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getResultImpl(a3, &llvm::FunctionAnalysisManagerCGSCCProxy::Key, a2, a4);
  v9 = *(unsigned int *)(a2 + 16);
  v34 = a5;
  if ((_DWORD)v9)
  {
    v38 = 0;
    v37 = a2;
    v10 = *(llvm::LazyCallGraph::Node ***)(a2 + 8);
    v11 = &v10[v9];
    while (1)
    {
      v12 = 0;
      v13 = *(_QWORD *)(ResultImpl + 8);
LABEL_4:
      v39 = v12;
      while (1)
      {
        v14 = *v10;
        v15 = (llvm::Function *)*((_QWORD *)*v10 + 1);
        v51 = v13;
        v16 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v13, &llvm::TargetIRAnalysis::Key, (uint64_t)v15);
        v17 = *a1;
        v50[0] = 0;
        v50[16] = 0;
        v18 = sub_1C566E084(v15, (uint64_t (*)(uint64_t, llvm::Function *))sub_1C5674A30, (uint64_t)&v51, v17, (uint64_t)v50, (_QWORD *)(v16 + 8), (int)v9 > 1);
        if (v18)
          break;
        if (++v10 == v11)
        {
          if ((v39 & 1) == 0)
            goto LABEL_30;
          goto LABEL_27;
        }
      }
      v19 = v18;
      llvm::LazyCallGraph::RefSCC::replaceNodeFunction(*(int32x2_t ***)v37, v14, v18);
      if ((*((_BYTE *)v15 + 23) & 0x10) == 0)
      {
        v30 = 0;
        v29 = &byte_1C871356D;
        goto LABEL_17;
      }
      v20 = ***(_QWORD ***)v15;
      v21 = *(_QWORD *)(v20 + 152);
      v22 = *(unsigned int *)(v20 + 168);
      if (!(_DWORD)v22)
        goto LABEL_15;
      LODWORD(v23) = (v22 - 1) & ((v15 >> 4) ^ (v15 >> 9));
      v24 = (llvm::Function **)(v21 + 16 * v23);
      v25 = *v24;
      if (*v24 != v15)
        break;
LABEL_16:
      v28 = v24[1];
      v31 = *(_QWORD *)v28;
      v29 = (char *)v28 + 16;
      v30 = v31;
LABEL_17:
      llvm::AnalysisManager<llvm::Function>::clear(v13, (uint64_t)v15, (uint64_t)v29, v30);
      llvm::Function::eraseFromParent(v15);
      v40 = v44;
      v41 = v44;
      v42 = 2;
      v43 = 0;
      v45 = v49;
      v46 = v49;
      v47 = 2;
      v48 = 0;
      sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)&v40, (uint64_t)&llvm::CFGAnalyses::SetKey);
      for (i = *((_QWORD *)v19 + 1); i; i = *(_QWORD *)(i + 8))
        llvm::AnalysisManager<llvm::Function>::invalidate(v13, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(i + 24) + 40) + 56), (uint64_t)&v40);
      if (v46 != v45)
        free(v46);
      if (v41 != v40)
        free(v41);
      ++v10;
      v12 = 1;
      if (v10 != v11)
        goto LABEL_4;
LABEL_27:
      ResultImpl = llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getResultImpl(a3, &llvm::FunctionAnalysisManagerCGSCCProxy::Key, v37, a4);
      v9 = *(unsigned int *)(v37 + 16);
      v10 = *(llvm::LazyCallGraph::Node ***)(v37 + 8);
      v11 = &v10[v9];
      v38 = 1;
      if (!(_DWORD)v9)
        goto LABEL_30;
    }
    v26 = 1;
    while (v25 != (llvm::Function *)-4096)
    {
      v27 = v23 + v26++;
      v23 = v27 & (v22 - 1);
      v25 = *(llvm::Function **)(v21 + 16 * v23);
      if (v25 == v15)
      {
        v24 = (llvm::Function **)(v21 + 16 * v23);
        goto LABEL_16;
      }
    }
LABEL_15:
    v24 = (llvm::Function **)(v21 + 16 * v22);
    goto LABEL_16;
  }
  v38 = 0;
LABEL_30:
  *(_QWORD *)v34 = (char *)v34 + 32;
  *((_QWORD *)v34 + 1) = (char *)v34 + 32;
  *((_QWORD *)v34 + 2) = 2;
  *((_DWORD *)v34 + 6) = 0;
  *((_QWORD *)v34 + 6) = (char *)v34 + 80;
  *((_QWORD *)v34 + 7) = (char *)v34 + 80;
  *((_QWORD *)v34 + 8) = 2;
  *((_DWORD *)v34 + 18) = 0;
  if ((v38 & 1) == 0)
    return sub_1C4774094(v34, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  sub_1C4DDB144((uint64_t)v34, (uint64_t)&llvm::FunctionAnalysisManagerCGSCCProxy::Key);
  return sub_1C4D8B5A8(v34, (uint64_t)&llvm::AllAnalysesOn<llvm::Function>::SetKey);
}

llvm::Function *sub_1C566E084(llvm::Function *this, uint64_t (*a2)(uint64_t, llvm::Function *), uint64_t a3, unsigned int a4, uint64_t a5, _QWORD *a6, char a7)
{
  llvm::Function *v11;
  uint64_t v12;
  uint64_t *v13;
  llvm::Function *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  char *v26;
  uint64_t v27;
  llvm::BasicBlock *v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t StructLayout;
  uint64_t ParamByValType;
  uint64_t v38;
  const llvm::DataLayout *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  char v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  char *v51;
  BOOL v52;
  BOOL v53;
  uint64_t v54;
  int v55;
  uint64_t i;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  unsigned int v61;
  int v62;
  int v64;
  uint64_t v65;
  uint64_t j;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  llvm::Type *v71;
  uint64_t v72;
  int v73;
  unsigned __int16 v74;
  llvm::Value *PersonalityFn;
  const llvm::Value *v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t m;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t k;
  uint64_t v92;
  char v93;
  uint64_t v94;
  unsigned __int8 v95;
  llvm::Type *v96;
  uint64_t v97;
  const llvm::DataLayout *v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  llvm::LLVMContext **v103;
  llvm::LLVMContext **v104;
  unsigned int v105;
  llvm::LLVMContext **v106;
  llvm::ValueHandleBase **v107;
  uint64_t v108;
  uint64_t v109;
  llvm::LLVMContext **v110;
  llvm::LLVMContext **v111;
  llvm::LLVMContext *v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  _OWORD *v116;
  __int128 v117;
  llvm::LLVMContext **v118;
  llvm::LLVMContext *v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  unint64_t *v134;
  unsigned int v135;
  int v136;
  llvm::LLVMContext *v137;
  uint64_t **v138;
  uint64_t ***v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  BOOL v149;
  BOOL v150;
  unsigned int v151;
  BOOL v152;
  uint64_t v154;
  char v155;
  _BYTE *v156;
  _BYTE *v157;
  uint64_t *v158;
  uint64_t *v159;
  unint64_t v160;
  uint64_t *v161;
  int canBasicBlockModify;
  uint64_t v163;
  uint64_t v164;
  unsigned int v165;
  BOOL v166;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  BOOL v172;
  char v174;
  uint64_t *v175;
  uint64_t *v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  char *v180;
  char *v181;
  char *v182;
  __int128 v183;
  int v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  char *v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  _QWORD *v208;
  char *v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  char *v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  llvm::PointerType *v220;
  llvm::Function *v221;
  char v222;
  llvm::Type *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  llvm::Function **v228;
  llvm::Function *v229;
  int v230;
  int v231;
  llvm::Function *v232;
  char *v233;
  void *v234;
  void *v235;
  char *v236;
  unint64_t v237;
  uint64_t *v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD **v242;
  llvm::ValueSymbolTable *v243;
  _QWORD **v244;
  llvm::DataLayout *v245;
  _QWORD **v246;
  uint64_t v247;
  llvm::Value *v248;
  int v249;
  int *v250;
  int *v251;
  llvm::Type *v252;
  uint64_t v253;
  int v254;
  char *v255;
  uint64_t *v256;
  char *v257;
  uint64_t *v258;
  const llvm::APInt *v259;
  uint64_t v260;
  uint64_t v261;
  llvm::ConstantInt *v262;
  llvm::ValueHandleBase *v263;
  char ParamAlignment;
  const llvm::APInt *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  llvm::ConstantInt *v271;
  unint64_t v272;
  unint64_t v273;
  llvm::ValueHandleBase *v274;
  uint64_t *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t **v281;
  uint64_t *v282;
  int v283;
  int v284;
  uint64_t *v285;
  uint64_t v286;
  char *v287;
  uint64_t v288;
  llvm::MDNode *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t *v298;
  uint64_t v299;
  int v300;
  int v301;
  _QWORD *v302;
  uint64_t v303;
  char *v304;
  uint64_t v305;
  char *v306;
  char *v307;
  uint64_t v308;
  _QWORD *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  char *v313;
  char *v314;
  unsigned __int8 **v315;
  int v316;
  unsigned __int8 *v317;
  unsigned __int8 *v318;
  uint64_t *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unsigned int v324;
  uint64_t v325;
  llvm::Type *v326;
  unsigned int IndexTypeSizeInBits;
  unint64_t v328;
  llvm::Type *v329;
  uint64_t v330;
  unsigned int v331;
  unsigned __int8 *v332;
  unsigned __int8 *v333;
  __int128 *p_src;
  int v335;
  int64_t v336;
  unint64_t v337;
  unsigned int v338;
  BOOL v339;
  unsigned int v340;
  const llvm::APInt *v341;
  llvm::SmallPtrSetImplBase *v342;
  int v343;
  int64_t v344;
  unint64_t v345;
  unsigned int v346;
  llvm::Type *v347;
  uint64_t TypeAtIndex;
  unsigned int v349;
  int isSizedDerivedType;
  unsigned int v351;
  uint64_t v352;
  llvm::ValueHandleBase *v353;
  uint64_t v354;
  __int128 *v355;
  int v356;
  int64_t v357;
  unint64_t v358;
  unsigned int v359;
  BOOL v360;
  uint64_t v361;
  char v362;
  int v363;
  llvm::LLVMContext *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  int v368;
  int64_t v369;
  unint64_t v370;
  unsigned int v371;
  uint64_t v372;
  uint64_t *v373;
  llvm::GetElementPtrInst *v374;
  const llvm::APInt *v375;
  llvm::ValueHandleBase *v376;
  uint64_t v377;
  char v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t **v383;
  uint64_t *v384;
  int v385;
  int v386;
  uint64_t *v387;
  uint64_t v388;
  char *v389;
  uint64_t v390;
  char *v391;
  char *v392;
  llvm::Value *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t ***v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  char *v400;
  char *v401;
  int v402;
  unsigned __int8 *v403;
  unsigned __int8 *v404;
  unsigned __int8 *v405;
  BOOL v406;
  uint64_t v407;
  uint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  llvm::Value *v412;
  char *v413;
  uint64_t v414;
  unsigned int v415;
  int v416;
  uint64_t v417;
  int v418;
  llvm::Type *v419;
  uint64_t *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t *v428;
  uint64_t v429;
  llvm::LLVMContext *v430;
  int v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  char *v435;
  char *v436;
  uint64_t v437;
  int v438;
  int v439;
  uint64_t v440;
  llvm::Value *v441;
  uint64_t v442;
  llvm::Value *v443;
  __int16 v444;
  int v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  _QWORD *v449;
  llvm::LLVMContext *v450;
  char *v451;
  void *v452;
  uint64_t v453;
  uint64_t v454;
  char *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  llvm::ValueSymbolTable *v459;
  unint64_t v460;
  uint64_t v461;
  llvm::Value *v462;
  uint64_t v463;
  char *v464;
  unsigned int *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  _QWORD *v470;
  uint64_t v471;
  _QWORD *v472;
  uint64_t v473;
  llvm::Value *v474;
  int *v475;
  int *v476;
  int *v477;
  char *v478;
  uint64_t *v479;
  char *v480;
  llvm::Type *v481;
  uint64_t *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t *v485;
  int v486;
  llvm::AttributeList *v487;
  unsigned int *v488;
  unsigned __int8 v489;
  char *v490;
  uint64_t *v491;
  uint64_t v492;
  llvm::Type *v493;
  unsigned __int8 v494;
  const llvm::APInt *v495;
  uint64_t v496;
  llvm::ConstantInt *v497;
  llvm::ValueHandleBase *v498;
  llvm::StructLayout *v499;
  const llvm::APInt *v500;
  uint64_t v501;
  uint64_t ***v502;
  uint64_t v503;
  llvm::ConstantInt *v504;
  unint64_t v505;
  unint64_t v506;
  unint64_t v507;
  llvm::ValueHandleBase *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t **v513;
  uint64_t *v514;
  int v515;
  int v516;
  llvm::LLVMContext **v517;
  llvm::LLVMContext *v518;
  llvm::LLVMContext *v519;
  llvm::LLVMContext *v520;
  _DWORD *v521;
  _DWORD *v522;
  uint64_t v523;
  llvm::Value *v524;
  _QWORD *v525;
  llvm::Value *v526;
  _DWORD *v527;
  uint64_t v528;
  unsigned int v529;
  uint64_t *v530;
  uint64_t v531;
  llvm::GetElementPtrInst *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t **v535;
  uint64_t **v536;
  char *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  int **v542;
  int *v543;
  int v544;
  int v545;
  llvm::LLVMContext **v546;
  llvm::LLVMContext *v547;
  llvm::LLVMContext *v548;
  llvm::LLVMContext *v549;
  char v550;
  _DWORD *v551;
  char v552;
  llvm::Value *v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  llvm::ValueSymbolTable *v557;
  char *v558;
  _QWORD *v559;
  _QWORD *v560;
  uint64_t v561;
  uint64_t n;
  uint64_t v563;
  uint64_t v564;
  llvm::MDNode *v565;
  llvm::MDNode *v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  int **v571;
  int *v572;
  int v573;
  int v574;
  int *v575;
  llvm::ValueHandleBase *v576;
  char *v577;
  llvm::ValueHandleBase *v578;
  void *v579;
  _QWORD *v580;
  unint64_t *v581;
  uint64_t v582;
  uint64_t v583;
  int v584;
  uint64_t *v585;
  uint64_t v586;
  uint64_t v587;
  llvm::Value *v588;
  uint64_t v589;
  _QWORD *v590;
  uint64_t v591;
  llvm::LLVMContext *v592;
  uint64_t v593;
  uint64_t v594;
  llvm::UndefValue *v595;
  uint64_t v596;
  _QWORD *v597;
  llvm::UndefValue *v598;
  uint64_t v599;
  uint64_t v600;
  _QWORD *v601;
  _QWORD *v602;
  uint64_t *v603;
  uint64_t *v604;
  _QWORD **v605;
  uint64_t v606;
  int **v607;
  int v608[2];
  void (*v609)(_QWORD, llvm::Value *, uint64_t);
  int v611;
  llvm::Function *v612;
  uint64_t *v613;
  unsigned int v614;
  char *v615;
  uint64_t *v616;
  uint64_t **v617;
  int *v618;
  int *v619;
  char v620;
  uint64_t v621;
  char *v622;
  uint64_t v623;
  char *v624;
  llvm::Value *v625;
  uint64_t v626;
  uint64_t v627;
  int v628;
  uint64_t v629;
  uint64_t v630;
  char *v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t *v634;
  llvm::Type *v635;
  int v636;
  llvm::Type *v637;
  llvm::Type *v638;
  llvm::Function *v639;
  uint64_t v640;
  unint64_t v641;
  char *v642;
  char *v643;
  uint64_t v644;
  int v645;
  _BYTE v646[64];
  uint64_t v647;
  uint64_t v648;
  unsigned int v649;
  __int128 __src;
  uint64_t v651[4];
  void *__p;
  int v653[2];
  char *v654;
  uint64_t *v655;
  unsigned int *v656;
  uint64_t *v657;
  unsigned __int8 *v658;
  uint64_t v659;
  unsigned __int8 v660;
  char v661;
  unsigned int v662;
  llvm::SmallPtrSetImplBase *v663;
  uint64_t *v664;
  uint64_t *v665;
  uint64_t *v666;
  llvm::Type *v667;
  void *v668;
  uint64_t v669;
  uint64_t v670[2];
  __int16 v671;
  void *v672;
  uint64_t v673;
  _BYTE v674[128];
  void *v675;
  size_t __n;
  _BYTE v677[128];
  void *v678;
  void *v679;
  unint64_t v680;
  int v681;
  _WORD v682[8];
  uint64_t v683;
  uint64_t v684;
  llvm::ConstantInt *v685;
  uint64_t v686;
  uint64_t v687;
  llvm::ValueHandleBase *v688;
  const char *v689;
  __int16 v690;
  llvm::LLVMContext *v691[2];
  llvm::MDNode *v692;
  llvm::MDNode *v693;
  __int16 v694;
  void *v695;
  void *v696;
  uint64_t v697;
  int v698;
  _WORD v699[128];
  uint64_t v700;

  v11 = this;
  v700 = *MEMORY[0x1E0C80C00];
  v13 = (uint64_t *)((char *)this + 112);
  v12 = *((_QWORD *)this + 14);
  if (v12 && (*(_BYTE *)(v12 + 14) & 2) != 0
    || (*((_DWORD *)this + 8) & 0xFu) - 7 > 1
    || *(_DWORD *)(*((_QWORD *)this + 3) + 8) > 0xFFu
    || v12 && *(char *)(v12 + 32) < 0)
  {
    return 0;
  }
  v672 = v674;
  v673 = 0x1000000000;
  if ((*((_BYTE *)this + 18) & 1) != 0)
  {
    v185 = (uint64_t *)((char *)this + 112);
    v186 = a5;
    llvm::Function::BuildLazyArguments(this);
    v16 = *((_QWORD *)v11 + 11);
    if ((*((_WORD *)v11 + 9) & 1) != 0)
      llvm::Function::BuildLazyArguments(v11);
    v17 = *((_QWORD *)v11 + 11);
    a5 = v186;
    v13 = v185;
  }
  else
  {
    v16 = *((_QWORD *)this + 11);
    v17 = v16;
  }
  v18 = v17 + 40 * *((_QWORD *)v11 + 12);
  if (v16 != v18)
  {
    v19 = v16;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)v16 + 8) == 15)
      {
        v20 = v673;
        if (v673 >= (unint64_t)HIDWORD(v673))
        {
          v603 = v13;
          v21 = a5;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v672, (uint64_t)v674, v673 + 1, 8);
          v13 = v603;
          a5 = v21;
          v20 = v673;
        }
        *((_QWORD *)v672 + v20) = v19;
        LODWORD(v673) = v673 + 1;
      }
      v16 += 40;
      v19 += 40;
    }
    while (v16 != v18);
  }
  if (!(_DWORD)v673)
    goto LABEL_37;
  v22 = *((_QWORD *)v11 + 1);
  if (!v22)
  {
LABEL_30:
    v604 = v13;
    v606 = a5;
    v26 = (char *)v11 + 72;
    v27 = *((_QWORD *)v11 + 10);
    v613 = (uint64_t *)((char *)v11 + 72);
    while ((char *)v27 != v26)
    {
      if (v27)
        v28 = (llvm::BasicBlock *)(v27 - 24);
      else
        v28 = 0;
      if (llvm::BasicBlock::getTerminatingMustTailCall(v28))
      {
        v14 = 0;
        goto LABEL_945;
      }
      v27 = *(_QWORD *)(v27 + 8);
      v26 = (char *)v11 + 72;
    }
    v29 = *((_QWORD *)v11 + 5);
    v647 = 0;
    v648 = 0;
    v649 = 0;
    v640 = a2(a3, v11);
    v642 = v646;
    v643 = v646;
    v644 = 8;
    v645 = 0;
    if (!(_DWORD)v673)
      goto LABEL_362;
    v30 = (char *)v672;
    v635 = (llvm::Type *)(v29 + 272);
    v622 = (char *)v672 + 8 * v673;
    v620 = a7 & 1;
    v639 = v11;
    v31 = a6;
    v614 = a4;
    while (1)
    {
      v631 = v30;
      v32 = *(void **)v30;
      if (*(_BYTE *)(**(_QWORD **)v30 + 8) == 15)
      {
        v33 = *(_QWORD *)(*((_QWORD *)v32 + 3) + 112);
        if (v33)
        {
          v34 = *((_DWORD *)v32 + 8);
          if ((v34 + 2) < *(_DWORD *)(v33 + 8))
          {
            v54 = *(_QWORD *)(v33 + 8 * (v34 + 2) + 40);
            if (v54)
            {
              if ((*(_BYTE *)(v54 + 21) & 2) != 0)
              {
                v55 = v34 + 1;
                *((_QWORD *)v11 + 14) = llvm::AttributeList::removeAttributeAtIndex(v604, **(uint64_t ***)v11, v34 + 1, 73);
                *((_QWORD *)v11 + 14) = llvm::AttributeList::addAttributeAtIndex(v604, **(uint64_t ***)v11, v55, 19);
                for (i = *((_QWORD *)v11 + 1); i; i = *(_QWORD *)(i + 8))
                {
                  v57 = *(_QWORD *)(i + 24);
                  *(_QWORD *)(v57 + 64) = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(v57 + 64), **(uint64_t ***)v57, v55, 73);
                  *(_QWORD *)(v57 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v57 + 64), **(uint64_t ***)v57, v55, 19);
                }
              }
            }
          }
        }
      }
      v35 = *((_DWORD *)v32 + 8);
      StructLayout = *((_QWORD *)v32 + 3) + 112;
      ParamByValType = llvm::AttributeList::getParamByValType((llvm::AttributeList *)StructLayout, v35);
      if (ParamByValType)
      {
        v38 = ParamByValType;
        if ((unsigned __int16)llvm::AttributeList::getParamAlignment((llvm::AttributeList *)StructLayout, v35) >= 0x100u)
        {
          if ((llvm::ArgumentPromotionPass::isDenselyPacked((llvm::ArgumentPromotionPass *)v38, v635, v39) & 1) != 0)
            goto LABEL_84;
          v695 = v699;
          v696 = v699;
          v697 = 16;
          v698 = 0;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v695, (uint64_t)v32);
          v678 = &v680;
          v679 = (void *)0x1000000000;
          v40 = *((_QWORD *)v32 + 1);
          v691[0] = (llvm::LLVMContext *)&v692;
          v691[1] = (llvm::LLVMContext *)0x1000000000;
          sub_1C528A680((unsigned int *)v691, v40, 0);
          v41 = v691[1];
          if (LODWORD(v691[1]))
          {
            while (1)
            {
              v42 = *((_QWORD *)v691[0] + --v41);
              LODWORD(v691[1]) = v41;
              v43 = *(unsigned __int8 *)(v42 + 16);
              if (v43 > 0x3D)
                break;
              if (v43 != 60)
              {
                if (v43 != 61)
                  goto LABEL_76;
                v44 = v679;
                if (v679 >= (unint64_t)HIDWORD(v679))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v678, (uint64_t)&v680, v679 + 1, 8);
                  v44 = v679;
                }
                *((_QWORD *)v678 + v44) = v42;
                LODWORD(v679) = (_DWORD)v679 + 1;
LABEL_57:
                v41 = v691[1];
              }
              if (!v41)
                goto LABEL_59;
            }
            if (v43 != 83 && v43 != 62)
            {
LABEL_76:
              v52 = 1;
              goto LABEL_77;
            }
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v695, v42);
            if (v45)
              sub_1C567207C((unsigned int *)v691, (uint64_t)v691[0] + 8 * LODWORD(v691[1]), *(_QWORD *)(v42 + 8), 0);
            goto LABEL_57;
          }
LABEL_59:
          if ((_DWORD)v679)
          {
            v46 = (uint64_t *)v678;
            v47 = 8 * v679 - 8;
            do
            {
              v48 = *v46++;
              v49 = (char *)sub_1C477672C((uint64_t)&v695, *(_QWORD *)(v48 - 64));
              if (v696 == v695)
                v50 = (uint64_t *)((char *)&v697 + 4);
              else
                v50 = &v697;
              v51 = (char *)v696 + 8 * *(unsigned int *)v50;
              v52 = v49 != v51;
              v53 = v49 != v51 || v47 == 0;
              v47 -= 8;
            }
            while (!v53);
          }
          else
          {
            v52 = 0;
          }
LABEL_77:
          if ((llvm::MDNode **)v691[0] != &v692)
            free(v691[0]);
          if (v678 != &v680)
            free(v678);
          if (v696 != v695)
            free(v696);
          if (!v52)
          {
LABEL_84:
            if (*(_BYTE *)(v38 + 8) == 16)
              break;
          }
        }
      }
LABEL_101:
      v668 = v670;
      v669 = 0x400000000;
      v667 = (llvm::Type *)v32;
      v662 = a4;
      v661 = v620;
      v65 = *((_QWORD *)v32 + 1);
      if (!v65)
      {
        v678 = &v680;
        v679 = (void *)0x400000000;
        goto LABEL_240;
      }
      v687 = 1;
      for (j = 8; j != 136; j += 32)
        *(uint64_t *)((char *)&v687 + j) = 0x7FFFFFFFFFFFFFFFLL;
      v660 = 0;
      __p = v635;
      *(_QWORD *)v653 = &v667;
      v654 = &v661;
      v655 = &v687;
      v656 = &v662;
      v657 = &v659;
      v658 = &v660;
      v659 = 0;
      v67 = *(_QWORD *)(*((_QWORD *)v32 + 3) + 80);
      if (v67)
        v68 = v67 - 24;
      else
        v68 = 0;
      v69 = v68 + 40;
      v70 = *(_QWORD *)(v68 + 48);
      v71 = (llvm::Type *)v32;
      if (v70 == v69)
      {
LABEL_127:
        v691[0] = (llvm::LLVMContext *)&v692;
        v691[1] = (llvm::LLVMContext *)0x1000000000;
        v678 = v682;
        v679 = v682;
        v680 = 16;
        v681 = 0;
        v675 = v677;
        __n = 0x1000000000;
        v78 = *((_QWORD *)v71 + 1);
        if (v78)
        {
          do
          {
            v79 = *(_QWORD *)(v78 + 24);
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v678, v79);
            if (v80)
            {
              v81 = LODWORD(v691[1]);
              if (LODWORD(v691[1]) >= (unint64_t)HIDWORD(v691[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v691, (uint64_t)&v692, LODWORD(v691[1]) + 1, 8);
                v81 = LODWORD(v691[1]);
              }
              *((_QWORD *)v691[0] + v81) = v79;
              ++LODWORD(v691[1]);
            }
            v78 = *(_QWORD *)(v78 + 8);
          }
          while (v78);
          while (LODWORD(v691[1]))
          {
            v83 = *((_QWORD *)v691[0] + LODWORD(v691[1]) - 1);
            --LODWORD(v691[1]);
            v84 = *(unsigned __int8 *)(v83 + 16);
            switch(v84)
            {
              case '<':
                if (!sub_1C56721F8((uint64_t)&__p, v83, 0))
                  goto LABEL_224;
                v82 = __n;
                if (__n >= (unint64_t)HIDWORD(__n))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v675, (uint64_t)v677, __n + 1, 8);
                  v82 = __n;
                }
                *((_QWORD *)v675 + v82) = v83;
                LODWORD(__n) = __n + 1;
                break;
              case '>':
                v89 = *(_DWORD *)(v83 + 20) & 0x7FFFFFF;
                if ((_DWORD)v89 != 1)
                {
                  v90 = 1;
                  while (*(_BYTE *)(*(_QWORD *)(v83 - 32 * v89 + 32 * v90) + 16) == 16)
                  {
                    if ((_DWORD)v89 == ++v90)
                      goto LABEL_152;
                  }
                  goto LABEL_224;
                }
LABEL_152:
                for (k = *(_QWORD *)(v83 + 8); k; k = *(_QWORD *)(k + 8))
                {
                  v92 = *(_QWORD *)(k + 24);
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v678, v92);
                  if (v93)
                  {
                    v94 = LODWORD(v691[1]);
                    if (LODWORD(v691[1]) >= (unint64_t)HIDWORD(v691[1]))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v691, (uint64_t)&v692, LODWORD(v691[1]) + 1, 8);
                      v94 = LODWORD(v691[1]);
                    }
                    *((_QWORD *)v691[0] + v94) = v92;
                    ++LODWORD(v691[1]);
                  }
                }
                break;
              case 'M':
                for (m = *(_QWORD *)(v83 + 8); m; m = *(_QWORD *)(m + 8))
                {
                  v86 = *(_QWORD *)(m + 24);
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v678, v86);
                  if (v87)
                  {
                    v88 = LODWORD(v691[1]);
                    if (LODWORD(v691[1]) >= (unint64_t)HIDWORD(v691[1]))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v691, (uint64_t)&v692, LODWORD(v691[1]) + 1, 8);
                      v88 = LODWORD(v691[1]);
                    }
                    *((_QWORD *)v691[0] + v88) = v86;
                    ++LODWORD(v691[1]);
                  }
                }
                break;
              default:
                goto LABEL_224;
            }
          }
        }
        v95 = v660;
        if (!v659 && !v660)
          goto LABEL_181;
        v96 = v667;
        v97 = *((_QWORD *)v667 + 3);
        v98 = (const llvm::DataLayout *)(*(_QWORD *)(v97 + 40) + 272);
        DWORD2(__src) = 64;
        *(_QWORD *)&__src = v659;
        v695 = v699;
        v696 = v699;
        v697 = 32;
        v698 = 0;
        v99 = sub_1C4E99094((uint64_t)v667, v660, (llvm::APInt *)&__src, v98, 0, 0, 0, (llvm::SmallPtrSetImplBase *)&v695, 16);
        if (v696 == v695)
        {
          if ((v99 & 1) == 0)
          {
LABEL_166:
            v100 = *(_QWORD *)(v97 + 8);
            if (v100)
            {
              while (1)
              {
                v101 = *(_QWORD *)(*(_QWORD *)(v100 + 24)
                                 - 32 * (*(_DWORD *)(*(_QWORD *)(v100 + 24) + 20) & 0x7FFFFFF)
                                 + 32 * *((unsigned int *)v96 + 8));
                v695 = v699;
                v696 = v699;
                v697 = 32;
                v698 = 0;
                StructLayout = sub_1C4E99094(v101, v95, (llvm::APInt *)&__src, v98, 0, 0, 0, (llvm::SmallPtrSetImplBase *)&v695, 16);
                if (v696 == v695)
                {
                  if ((StructLayout & 1) == 0)
                    goto LABEL_177;
                }
                else
                {
                  free(v696);
                  if ((StructLayout & 1) == 0)
                    goto LABEL_177;
                }
                v100 = *(_QWORD *)(v100 + 8);
                if (!v100)
                  goto LABEL_177;
              }
            }
          }
        }
        else
        {
          free(v696);
          if ((v99 & 1) == 0)
            goto LABEL_166;
        }
        StructLayout = 1;
LABEL_177:
        if (DWORD2(__src) >= 0x41 && (_QWORD)__src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        v11 = v639;
        a4 = v614;
        if (!(_DWORD)StructLayout)
        {
LABEL_224:
          v102 = 0;
        }
        else
        {
LABEL_181:
          if (v687 < 2)
          {
            v102 = 1;
            goto LABEL_225;
          }
          v104 = v691;
          v103 = &v688;
          if ((v687 & 1) != 0)
            goto LABEL_186;
          v103 = (llvm::LLVMContext **)v688;
          v105 = v689;
          if ((_DWORD)v689)
          {
            v104 = (llvm::LLVMContext **)((char *)v688 + 32 * v689);
LABEL_186:
            while ((unint64_t)*v103 - 0x7FFFFFFFFFFFFFFFLL <= 1)
            {
              v103 += 4;
              if (v103 == v104)
              {
                v103 = v104;
                break;
              }
            }
            v106 = v103;
            v103 = (llvm::LLVMContext **)v688;
            v105 = v689;
          }
          else
          {
            v106 = (llvm::LLVMContext **)v688;
            v104 = (llvm::LLVMContext **)v688;
          }
          v107 = &v688;
          if ((v687 & 1) != 0)
          {
            v108 = 4;
          }
          else
          {
            v107 = v103;
            v108 = v105;
          }
          StructLayout = (uint64_t)&v107[4 * v108];
          if (v106 == (llvm::LLVMContext **)StructLayout)
          {
            v109 = 0;
          }
          else
          {
            v109 = 0;
            v110 = v106;
            do
            {
              ++v109;
              v111 = v110 + 4;
              while (v111 != v104)
              {
                v112 = *v111;
                v111 += 4;
                if ((unint64_t)v112 - 0x7FFFFFFFFFFFFFFFLL >= 2)
                {
                  v110 = v111 - 4;
                  goto LABEL_200;
                }
              }
              v110 = v104;
LABEL_200:
              ;
            }
            while (v110 != (llvm::LLVMContext **)StructLayout);
          }
          v113 = v669;
          v114 = v109 + v669;
          if (v114 > HIDWORD(v669))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v668, (uint64_t)v670, v114, 32);
            v113 = v669;
          }
          v115 = v668;
          if (v106 != (llvm::LLVMContext **)StructLayout)
          {
            v116 = (char *)v668 + 32 * v113;
            do
            {
              v117 = *((_OWORD *)v106 + 1);
              *v116 = *(_OWORD *)v106;
              v116[1] = v117;
              v118 = v106 + 4;
              while (v118 != v104)
              {
                v119 = *v118;
                v118 += 4;
                if ((unint64_t)v119 - 0x7FFFFFFFFFFFFFFFLL >= 2)
                {
                  v106 = v118 - 4;
                  goto LABEL_212;
                }
              }
              v106 = v104;
LABEL_212:
              v116 += 2;
            }
            while (v106 != (llvm::LLVMContext **)StructLayout);
            LODWORD(v113) = v669;
            v115 = v668;
          }
          v120 = (v113 + v109);
          v25 = (_DWORD)v120 == 0;
          LODWORD(v669) = v120;
          v121 = (unint64_t)v115 + 32 * v120;
          v122 = 126 - 2 * __clz(v120);
          if (v25)
            v123 = 0;
          else
            v123 = v122;
          sub_1C5672870((uint64_t)v115, v121, v123, 1);
          if ((_DWORD)v669)
          {
            v124 = (char *)v668;
            v125 = (char *)v668 + 32 * v669;
            v126 = *(_QWORD *)v668;
            do
            {
              v127 = *(_QWORD *)v124;
              if (*(_QWORD *)v124 < v126)
                goto LABEL_224;
              sub_1C4768AD0((uint64_t)v635, *((_QWORD *)v124 + 1));
              v130 = v129;
              if ((_DWORD)v128 == 1)
              v126 = ((unint64_t)(v130 + 7) >> 3) + v127;
              v124 += 32;
            }
            while (v124 != v125);
          }
          v695 = v699;
          v696 = v699;
          v697 = 16;
          v698 = 0;
          if ((_DWORD)__n)
          {
            v138 = (uint64_t **)v675;
            v617 = (uint64_t **)((char *)v675 + 8 * __n);
            while (2)
            {
              v139 = (uint64_t ***)*v138;
              v140 = (_QWORD *)(*v138)[5];
              v141 = *(*v138 - 4);
              sub_1C4768AD0(*(_QWORD *)(v140[7] + 40) + 272, **v138);
              if (v143 == 1)
                v144 = -2;
              else
                v144 = (unint64_t)(v142 + 7) >> 3;
              llvm::Instruction::getAAMetadata(v139, v651);
              *(_QWORD *)&__src = v141;
              *((_QWORD *)&__src + 1) = v144;
              v145 = v140[6];
              if (v145)
                v146 = v145 - 24;
              else
                v146 = 0;
              if (llvm::AAResults::canInstructionRangeModRef(v640, v146, (uint64_t)v139, &__src, 6))
              {
LABEL_351:
                v102 = 0;
              }
              else
              {
                while (1)
                {
                  v140 = (_QWORD *)v140[1];
                  if (!v140)
                    break;
                  v147 = v140[3];
                  v148 = *(unsigned __int8 *)(v147 + 16);
                  if (v147)
                    v149 = v148 >= 0x1C;
                  else
                    v149 = 0;
                  v150 = !v149 || v148 - 29 > 0xA;
                  if (!v150)
                  {
LABEL_288:
                    v154 = *(_QWORD *)(v147 + 40);
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v695, v154);
                    if (v155)
                    {
                      v156 = operator new(0x18uLL);
                      *(_QWORD *)v156 = v154;
                      v156[8] = 0;
                      v156[16] = 0;
                      v157 = v156 + 24;
                    }
                    else
                    {
                      v157 = 0;
                      v156 = 0;
                    }
                    v663 = (llvm::SmallPtrSetImplBase *)&v695;
                    v665 = 0;
                    v666 = 0;
                    v664 = 0;
                    sub_1C4D6CDA0(&v664, v156, v157, 0xAAAAAAAAAAAAAAABLL * ((v157 - v156) >> 3));
                    if (v156)
                      operator delete(v156);
                    v158 = v664;
                    v159 = v665;
                    v160 = 0xAAAAAAAAAAAAAAABLL * (v665 - v664);
                    v665 = 0;
                    v666 = 0;
                    v664 = 0;
                    sub_1C4D6CDA0(&v664, v158, v159, v160);
                    v161 = v665;
                    if (v665 == v664)
                    {
                      v184 = 1;
                      if (v665)
                        goto LABEL_344;
                    }
                    else
                    {
                      while (1)
                      {
                        canBasicBlockModify = llvm::AAResults::canBasicBlockModify(v640, *(v161 - 3), &__src);
                        if (canBasicBlockModify)
                          break;
                        v161 = v665;
LABEL_296:
                        if (!*((_BYTE *)v161 - 8))
                        {
                          v163 = *(v161 - 3);
                          do
                          {
                            v163 = *(_QWORD *)(v163 + 8);
                            if (!v163)
                              break;
                            v164 = *(_QWORD *)(v163 + 24);
                            v165 = *(unsigned __int8 *)(v164 + 16);
                            v166 = v164 && v165 >= 0x1C;
                          }
                          while (!v166 || v165 - 29 >= 0xB);
                          *(v161 - 2) = v163;
                          *((_BYTE *)v161 - 8) = 1;
                        }
                        do
                        {
                          v168 = *(v161 - 2);
                          if (!v168)
                          {
                            v161 = v665 - 3;
                            v665 = v161;
                            if (v664 != v161)
                              goto LABEL_296;
                            goto LABEL_343;
                          }
                          v169 = *(v161 - 2);
                          do
                          {
                            v169 = *(_QWORD *)(v169 + 8);
                            if (!v169)
                              break;
                            v170 = *(_QWORD *)(v169 + 24);
                            v171 = *(unsigned __int8 *)(v170 + 16);
                            v172 = v170 && v171 >= 0x1C;
                          }
                          while (!v172 || v171 - 29 > 0xA);
                          *(v161 - 2) = v169;
                          StructLayout = *(_QWORD *)(*(_QWORD *)(v168 + 24) + 40);
                          sub_1C4774094(v663, StructLayout);
                        }
                        while (!v174);
                        v175 = v665;
                        if (v665 >= v666)
                        {
                          v176 = v664;
                          v177 = 0xAAAAAAAAAAAAAAABLL * (v665 - v664);
                          v178 = v177 + 1;
                          if (v177 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_950:
                            abort();
                          if (0x5555555555555556 * (v666 - v664) > v178)
                            v178 = 0x5555555555555556 * (v666 - v664);
                          if (0xAAAAAAAAAAAAAAABLL * (v666 - v664) >= 0x555555555555555)
                            v179 = 0xAAAAAAAAAAAAAAALL;
                          else
                            v179 = v178;
                          if (v179)
                          {
                            if (v179 > 0xAAAAAAAAAAAAAAALL)
LABEL_951:
                              sub_1C4764EE4();
                            v180 = (char *)operator new(24 * v179);
                          }
                          else
                          {
                            v180 = 0;
                          }
                          v181 = &v180[24 * v177];
                          *(_QWORD *)v181 = StructLayout;
                          v181[8] = 0;
                          v181[16] = 0;
                          v182 = v181;
                          if (v175 != v176)
                          {
                            do
                            {
                              v183 = *(_OWORD *)(v175 - 3);
                              *((_QWORD *)v182 - 1) = *(v175 - 1);
                              *(_OWORD *)(v182 - 24) = v183;
                              v182 -= 24;
                              v175 -= 3;
                            }
                            while (v175 != v176);
                            v175 = v664;
                          }
                          v161 = (uint64_t *)(v181 + 24);
                          v664 = (uint64_t *)v182;
                          v665 = (uint64_t *)(v181 + 24);
                          v666 = (uint64_t *)&v180[24 * v179];
                          if (v175)
                            operator delete(v175);
                        }
                        else
                        {
                          *v665 = StructLayout;
                          *((_BYTE *)v175 + 8) = 0;
                          v161 = v175 + 3;
                          *((_BYTE *)v175 + 16) = 0;
                        }
                        v665 = v161;
                        if (v161 == v664)
                        {
                          v161 = v664;
                          goto LABEL_343;
                        }
                      }
                      v161 = v664;
LABEL_343:
                      v184 = canBasicBlockModify ^ 1;
                      v11 = v639;
                      a4 = v614;
                      if (v161)
                      {
LABEL_344:
                        v665 = v161;
                        operator delete(v161);
                      }
                    }
                    if (v158)
                      operator delete(v158);
                    if (!v184)
                      goto LABEL_351;
                    while (1)
                    {
                      v140 = (_QWORD *)v140[1];
                      if (!v140)
                        goto LABEL_349;
                      v147 = v140[3];
                      v151 = *(unsigned __int8 *)(v147 + 16);
                      if (v147)
                        v152 = v151 >= 0x1C;
                      else
                        v152 = 0;
                      if (v152 && v151 - 29 < 0xB)
                        goto LABEL_288;
                    }
                  }
                }
LABEL_349:
                if (++v138 != v617)
                  continue;
                v102 = 1;
              }
              break;
            }
            v31 = a6;
          }
          else
          {
            v102 = 1;
          }
          if (v696 != v695)
            free(v696);
        }
LABEL_225:
        if (v675 != v677)
          free(v675);
        if (v679 != v678)
          free(v679);
        if ((llvm::MDNode **)v691[0] != &v692)
          free(v691[0]);
        if ((v687 & 1) == 0)
          MEMORY[0x1CAA32FB4](v688, 8);
        if ((v102 & 1) == 0)
          goto LABEL_258;
        v678 = &v680;
        v679 = (void *)0x400000000;
        LODWORD(v65) = 0;
        if ((_DWORD)v669)
        {
          v131 = 32 * v669;
          v132 = (uint64_t *)((char *)v668 + 8);
          do
          {
            v133 = *v132;
            if (v65 >= HIDWORD(v679))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v678, (uint64_t)&v680, v65 + 1, 8);
              LODWORD(v65) = (_DWORD)v679;
            }
            *((_QWORD *)v678 + v65) = v133;
            LODWORD(v65) = (_DWORD)v679 + 1;
            LODWORD(v679) = (_DWORD)v679 + 1;
            v132 += 4;
            v131 -= 32;
          }
          while (v131);
          v134 = (unint64_t *)v678;
LABEL_241:
          if ((sub_1C5671FB8((uint64_t)v134, v65, *((_QWORD *)v11 + 1), v31) & 1) != 0)
          {
            v695 = v32;
            v696 = &v698;
            v697 = 0x400000000;
            if ((_DWORD)v669)
            {
              sub_1C56738C8((uint64_t)&v696, (uint64_t *)&v668);
              v32 = v695;
            }
            v691[0] = 0;
            v135 = v649;
            if ((sub_1C5673674(v647, v649, (uint64_t)v32, v691) & 1) == 0)
            {
              if (4 * (int)v648 + 4 >= 3 * v135)
              {
                v136 = 2 * v135;
LABEL_249:
                sub_1C567370C((uint64_t)&v647, v136);
                v691[0] = 0;
                sub_1C5673674(v647, v649, (uint64_t)v695, v691);
              }
              else if (v135 + ~(_DWORD)v648 - HIDWORD(v648) <= v135 >> 3)
              {
                v136 = v135;
                goto LABEL_249;
              }
              v137 = v691[0];
              LODWORD(v648) = v648 + 1;
              if (*(_QWORD *)v691[0] != -4096)
                --HIDWORD(v648);
              *(_QWORD *)v691[0] = v695;
              *((_QWORD *)v137 + 1) = (char *)v137 + 24;
              *((_QWORD *)v137 + 2) = 0x400000000;
              if ((_DWORD)v697)
                sub_1C56738C8((uint64_t)v137 + 8, (uint64_t *)&v696);
            }
            if (v696 != &v698)
              free(v696);
          }
          if (v678 != &v680)
            free(v678);
          goto LABEL_258;
        }
LABEL_240:
        v134 = &v680;
        goto LABEL_241;
      }
      while (1)
      {
        v72 = v70 ? v70 - 24 : 0;
        v73 = *(unsigned __int8 *)(v72 + 16);
        if (v70)
        {
          if (v73 == 60)
            break;
        }
LABEL_118:
        if (v73 == 29 || v73 == 35)
        {
LABEL_126:
          v71 = v667;
          goto LABEL_127;
        }
        if (v73 == 80)
        {
          PersonalityFn = (llvm::Value *)llvm::Function::getPersonalityFn(*(llvm::Function **)(*(_QWORD *)(v72 + 40)
                                                                                             + 56));
          if (llvm::classifyEHPersonality(PersonalityFn, v77) != 10)
            goto LABEL_126;
        }
        else if ((llvm::Instruction::mayThrow((llvm::Instruction *)v72) & 1) != 0
               || (llvm::Instruction::willReturn((llvm::Instruction *)v72) & 1) == 0)
        {
          goto LABEL_126;
        }
        v70 = *(_QWORD *)(v70 + 8);
        if (v70 == v69)
          goto LABEL_126;
      }
      v74 = sub_1C56721F8((uint64_t)&__p, v72, 1);
      if (v74 < 0x100u || v74 != 0)
      {
        v73 = *(unsigned __int8 *)(v72 + 16);
        goto LABEL_118;
      }
      if ((v687 & 1) == 0)
        MEMORY[0x1CAA32FB4](v688, 8);
LABEL_258:
      if (v668 != v670)
        free(v668);
LABEL_260:
      v30 = v631 + 8;
      if (v631 + 8 == v622)
      {
        if (!(_DWORD)v648 && HIDWORD(v644) == v645)
        {
LABEL_362:
          v14 = 0;
          goto LABEL_936;
        }
        *(_QWORD *)v608 = *(_QWORD *)(v606 + 8);
        v609 = *(void (**)(_QWORD, llvm::Value *, uint64_t))v606;
        v611 = *(unsigned __int8 *)(v606 + 16);
        v187 = *((_QWORD *)v11 + 3);
        __p = 0;
        *(_QWORD *)v653 = 0;
        v654 = 0;
        v675 = v677;
        __n = 0x800000000;
        v632 = *((_QWORD *)v11 + 14);
        v627 = v187;
        if ((*((_BYTE *)v11 + 18) & 1) == 0)
        {
          v188 = *((_QWORD *)v11 + 11);
          v607 = (int **)((char *)v11 + 88);
          goto LABEL_367;
        }
        llvm::Function::BuildLazyArguments(v11);
        v188 = *((_QWORD *)v11 + 11);
        v607 = (int **)((char *)v11 + 88);
        if ((*((_WORD *)v11 + 9) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments(v11);
          v189 = *((_QWORD *)v11 + 11);
        }
        else
        {
LABEL_367:
          v189 = v188;
        }
        v641 = v189 + 40 * *((_QWORD *)v11 + 12);
        if (v188 != v641)
        {
          v190 = 0;
          v636 = v649;
          do
          {
            v191 = (char *)sub_1C477672C((uint64_t)&v642, v188);
            if (v643 == v642)
              v192 = (uint64_t *)((char *)&v644 + 4);
            else
              v192 = &v644;
            if (v191 == &v643[8 * *(unsigned int *)v192])
            {
              if ((sub_1C5673C84(v647, v636, v188, &v695) & 1) != 0)
              {
                if (*(_QWORD *)(v188 + 8))
                {
                  v193 = sub_1C5673A20((uint64_t)&v647, v188);
                  v194 = *(unsigned int *)(v193 + 16);
                  if ((_DWORD)v194)
                  {
                    v195 = *(_QWORD *)(v193 + 8);
                    v196 = v195 + 32 * v194;
                    do
                    {
                      v197 = *(char **)v653;
                      if (*(_QWORD *)v653 >= (unint64_t)v654)
                      {
                        v198 = (char *)__p;
                        v199 = (uint64_t)(*(_QWORD *)v653 - (_QWORD)__p) >> 3;
                        v200 = v199 + 1;
                        if ((unint64_t)(v199 + 1) >> 61)
                          goto LABEL_950;
                        v201 = v654 - (_BYTE *)__p;
                        if ((v654 - (_BYTE *)__p) >> 2 > v200)
                          v200 = v201 >> 2;
                        if ((unint64_t)v201 >= 0x7FFFFFFFFFFFFFF8)
                          v202 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v202 = v200;
                        if (v202)
                        {
                          if (v202 >> 61)
                            goto LABEL_951;
                          v203 = (char *)operator new(8 * v202);
                        }
                        else
                        {
                          v203 = 0;
                        }
                        v204 = &v203[8 * v199];
                        *(_QWORD *)v204 = *(_QWORD *)(v195 + 8);
                        StructLayout = (uint64_t)(v204 + 8);
                        if (v197 != v198)
                        {
                          do
                          {
                            v205 = *((_QWORD *)v197 - 1);
                            v197 -= 8;
                            *((_QWORD *)v204 - 1) = v205;
                            v204 -= 8;
                          }
                          while (v197 != v198);
                          v197 = (char *)__p;
                        }
                        __p = v204;
                        *(_QWORD *)v653 = StructLayout;
                        v654 = &v203[8 * v202];
                        if (v197)
                          operator delete(v197);
                      }
                      else
                      {
                        **(_QWORD **)v653 = *(_QWORD *)(v195 + 8);
                        StructLayout = (uint64_t)(v197 + 8);
                      }
                      *(_QWORD *)v653 = StructLayout;
                      v206 = __n;
                      if (__n >= (unint64_t)HIDWORD(__n))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v675, (uint64_t)v677, __n + 1, 8);
                        v206 = __n;
                      }
                      *((_QWORD *)v675 + v206) = 0;
                      LODWORD(__n) = __n + 1;
                      v195 += 32;
                    }
                    while (v195 != v196);
                  }
                }
              }
              else
              {
                StructLayout = *(_QWORD *)v188;
                v207 = *(char **)v653;
                if (*(_QWORD *)v653 >= (unint64_t)v654)
                {
                  v209 = (char *)__p;
                  v210 = (uint64_t)(*(_QWORD *)v653 - (_QWORD)__p) >> 3;
                  v211 = v210 + 1;
                  if ((unint64_t)(v210 + 1) >> 61)
                    goto LABEL_950;
                  v212 = v654 - (_BYTE *)__p;
                  if ((v654 - (_BYTE *)__p) >> 2 > v211)
                    v211 = v212 >> 2;
                  if ((unint64_t)v212 >= 0x7FFFFFFFFFFFFFF8)
                    v213 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v213 = v211;
                  if (v213)
                  {
                    if (v213 >> 61)
                      goto LABEL_951;
                    v214 = (char *)operator new(8 * v213);
                  }
                  else
                  {
                    v214 = 0;
                  }
                  v215 = (uint64_t *)&v214[8 * v210];
                  *v215 = StructLayout;
                  v208 = v215 + 1;
                  if (v207 != v209)
                  {
                    do
                    {
                      v216 = *((_QWORD *)v207 - 1);
                      v207 -= 8;
                      *--v215 = v216;
                    }
                    while (v207 != v209);
                    v207 = (char *)__p;
                  }
                  __p = v215;
                  *(_QWORD *)v653 = v208;
                  v654 = &v214[8 * v213];
                  if (v207)
                    operator delete(v207);
                }
                else
                {
                  **(_QWORD **)v653 = StructLayout;
                  v208 = v207 + 8;
                }
                *(_QWORD *)v653 = v208;
                if (v632 && (v190 + 2) < *(_DWORD *)(v632 + 8))
                  v217 = *(_QWORD *)(v632 + 40 + 8 * (v190 + 2));
                else
                  v217 = 0;
                v218 = __n;
                if (__n >= (unint64_t)HIDWORD(__n))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v675, (uint64_t)v677, __n + 1, 8);
                  v218 = __n;
                }
                *((_QWORD *)v675 + v218) = v217;
                LODWORD(__n) = __n + 1;
              }
            }
            else
            {
              v219 = llvm::AttributeList::getParamByValType((llvm::AttributeList *)(*(_QWORD *)(v188 + 24) + 112), *(_DWORD *)(v188 + 32));
              sub_1C5673A78((uint64_t)&__p, *(uint64_t *)v653, *(char **)(v219 + 16), (char *)(*(_QWORD *)(v219 + 16) + 8 * *(unsigned int *)(v219 + 12)), *(unsigned int *)(v219 + 12));
              sub_1C6283818((unsigned int *)&v675, (uint64_t)v675 + 8 * __n, *(unsigned int *)(v219 + 12));
            }
            v188 += 40;
            ++v190;
          }
          while (v188 != v641);
        }
        v220 = (llvm::PointerType *)llvm::FunctionType::get(**(uint64_t ****)(v627 + 16), (uint64_t *)__p, (uint64_t)(*(_QWORD *)v653 - (_QWORD)__p) >> 3, *(_DWORD *)(v627 + 8) > 0xFFu);
        v221 = v639;
        v222 = *((_DWORD *)v639 + 8) & 0xF;
        v223 = (llvm::Type *)(*(_DWORD *)(*(_QWORD *)v639 + 8) >> 8);
        if ((*((_BYTE *)v639 + 23) & 0x10) != 0)
        {
          v224 = ***(_QWORD ***)v639;
          v225 = *(_QWORD *)(v224 + 152);
          v226 = *(unsigned int *)(v224 + 168);
          if (!(_DWORD)v226)
            goto LABEL_434;
          LODWORD(v227) = (v226 - 1) & ((v639 >> 4) ^ (v639 >> 9));
          v228 = (llvm::Function **)(v225 + 16 * v227);
          v229 = *v228;
          if (*v228 != v639)
          {
            v230 = 1;
            while (v229 != (llvm::Function *)-4096)
            {
              v231 = v227 + v230++;
              v227 = v231 & (v226 - 1);
              v229 = *(llvm::Function **)(v225 + 16 * v227);
              if (v229 == v639)
              {
                v228 = (llvm::Function **)(v225 + 16 * v227);
                goto LABEL_435;
              }
            }
LABEL_434:
            v228 = (llvm::Function **)(v225 + 16 * v226);
          }
LABEL_435:
          v232 = v228[1];
          v235 = *(void **)v232;
          v233 = (char *)v232 + 16;
          v234 = v235;
        }
        else
        {
          v234 = 0;
          v233 = &byte_1C871356D;
        }
        v699[0] = 261;
        v695 = v233;
        v696 = v234;
        v236 = (char *)operator new(0x80uLL);
        v237 = (unint64_t)(v236 + 8);
        *((_DWORD *)v236 + 7) = *((_DWORD *)v236 + 7) & 0x38000000 | 0x40000000;
        v615 = v236;
        *(_QWORD *)v236 = 0;
        v238 = llvm::Function::Function((uint64_t *)v236 + 1, v220, v222, v223, (uint64_t)&v695, 0);
        llvm::Function::copyAttributesFrom((llvm::Function *)v238, v639);
        v612 = (llvm::Function *)v237;
        llvm::GlobalObject::copyMetadata((llvm::GlobalObject *)v237, v639, 0);
        llvm::Value::setMetadata(v639, 0, 0);
        if (v632 && (v239 = *(_DWORD *)(v632 + 8)) != 0)
        {
          v240 = *(_QWORD *)(v632 + 40);
          if (v239 != 1)
          {
            v241 = *(_QWORD *)(v632 + 48);
LABEL_442:
            *((_QWORD *)v615 + 15) = llvm::AttributeList::get(**(uint64_t ***)v639, v240, v241, v675, __n);
            LODWORD(__n) = 0;
            v242 = (_QWORD **)*((_QWORD *)v639 + 5);
            *((_QWORD *)v615 + 6) = v242;
            if ((v615[31] & 0x10) != 0)
            {
              v243 = (llvm::ValueSymbolTable *)v242[14];
              if (v243)
                llvm::ValueSymbolTable::reinsertValue(v243, (llvm::Value *)v237);
            }
            v244 = (_QWORD **)*((_QWORD *)v639 + 7);
            *((_QWORD *)v615 + 8) = v244;
            *((_QWORD *)v615 + 9) = (char *)v639 + 56;
            v244[1] = v615 + 64;
            *((_QWORD *)v639 + 7) = v615 + 64;
            llvm::Value::takeName((llvm::Value *)v237, v639);
            v695 = &v697;
            v696 = (void *)0x1000000000;
            v605 = (_QWORD **)*((_QWORD *)v639 + 5);
            v245 = (llvm::DataLayout *)(v605 + 34);
            v246 = (_QWORD **)*((_QWORD *)v639 + 1);
            if (!v246)
              goto LABEL_793;
            v616 = (uint64_t *)(v615 + 16);
            while (2)
            {
              v247 = (uint64_t)v246[3];
              v623 = *(_QWORD *)(v247 + 64);
              sub_1C5673D1C((uint64_t)&v678, v247, 0, 0, 0);
              v248 = (llvm::Value *)v247;
              v249 = *(_DWORD *)(v247 + 20);
              v625 = v248;
              if ((*((_WORD *)v221 + 9) & 1) != 0)
              {
                llvm::Function::BuildLazyArguments(v221);
                v250 = (int *)*((_QWORD *)v221 + 11);
                if ((*((_WORD *)v221 + 9) & 1) != 0)
                  llvm::Function::BuildLazyArguments(v221);
                v251 = (int *)*((_QWORD *)v221 + 11);
                v248 = v625;
              }
              else
              {
                v250 = *v607;
                v251 = *v607;
              }
              v252 = (llvm::Value *)((char *)v248 - 32 * (v249 & 0x7FFFFFF));
              v619 = &v251[10 * *((_QWORD *)v221 + 12)];
              if (v250 != v619)
              {
                v253 = (uint64_t)v250;
                v254 = 0;
                while (1)
                {
                  v628 = v254;
                  if ((sub_1C5673C84(v647, v649, v253, v691) & 1) == 0)
                  {
                    v255 = (char *)sub_1C477672C((uint64_t)&v642, v253);
                    v256 = v643 == v642 ? (uint64_t *)((char *)&v644 + 4) : &v644;
                    if (v255 == &v643[8 * *(unsigned int *)v256])
                    {
                      v407 = v253;
                      v408 = *(uint64_t **)v252;
                      v409 = v696;
                      if (v696 >= (unint64_t)HIDWORD(v696))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v695, (uint64_t)&v697, v696 + 1, 8);
                        v409 = v696;
                      }
                      *((_QWORD *)v695 + v409) = v408;
                      LODWORD(v696) = (_DWORD)v696 + 1;
                      if (v623 && (v628 + 2) < *(_DWORD *)(v623 + 8))
                        v410 = *(_QWORD *)(v623 + 40 + 8 * (v628 + 2));
                      else
                        v410 = 0;
                      v411 = __n;
                      if (__n >= (unint64_t)HIDWORD(__n))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v675, (uint64_t)v677, __n + 1, 8);
                        v411 = __n;
                      }
                      *((_QWORD *)v675 + v411) = v410;
                      LODWORD(__n) = __n + 1;
                      v253 = v407;
                      goto LABEL_705;
                    }
                  }
                  v257 = (char *)sub_1C477672C((uint64_t)&v642, v253);
                  if (v643 == v642)
                    v258 = (uint64_t *)((char *)&v644 + 4);
                  else
                    v258 = &v644;
                  v637 = v252;
                  if (v257 != &v643[8 * *(unsigned int *)v258])
                  {
                    v260 = llvm::AttributeList::getParamByValType((llvm::AttributeList *)(*(_QWORD *)(v253 + 24) + 112), *(_DWORD *)(v253 + 32));
                    v688 = 0;
                    v687 = 0;
                    v261 = ***(_QWORD ***)v221;
                    v262 = *(llvm::ConstantInt **)(v261 + 1960);
                    LODWORD(v691[1]) = *(_DWORD *)(v261 + 1968) >> 8;
                    if (LODWORD(v691[1]) > 0x40)
                      llvm::APInt::initSlowCase((llvm::APInt *)v691, 0, 0);
                    else
                      v691[0] = 0;
                    v263 = llvm::ConstantInt::get(v262, (llvm::LLVMContext *)v691, v259);
                    if (LODWORD(v691[1]) >= 0x41 && v691[0])
                      MEMORY[0x1CAA32F9C](v691[0], 0x1000C8000313F17);
                    v687 = (uint64_t)v263;
                    v688 = 0;
                    StructLayout = (uint64_t)llvm::DataLayout::getStructLayout(v245, (llvm::StructType *)v260);
                    v621 = v253;
                    ParamAlignment = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(*(_QWORD *)(v253 + 24) + 112), *(_DWORD *)(v253 + 32));
                    v266 = *(unsigned int *)(v260 + 12);
                    if ((_DWORD)v266)
                    {
                      v267 = 0;
                      v268 = StructLayout + 16;
                      v269 = 1 << ParamAlignment;
                      while (1)
                      {
                        v270 = ***(_QWORD ***)v639;
                        v271 = *(llvm::ConstantInt **)(v270 + 1960);
                        v272 = *(unsigned int *)(v270 + 1968);
                        LODWORD(v691[1]) = v272 >> 8;
                        if (v272 >> 8 > 0x40)
                        {
                          llvm::APInt::initSlowCase((llvm::APInt *)v691, v267, 0);
                        }
                        else
                        {
                          if (v272 <= 0xFF)
                            v273 = 0;
                          else
                            v273 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v272);
                          v691[0] = (llvm::LLVMContext *)(v273 & v267);
                        }
                        v274 = llvm::ConstantInt::get(v271, (llvm::LLVMContext *)v691, v265);
                        if (LODWORD(v691[1]) >= 0x41 && v691[0])
                          MEMORY[0x1CAA32F9C](v691[0], 0x1000C8000313F17);
                        v688 = v274;
                        v275 = *(uint64_t **)v252;
                        if ((*(_BYTE *)(*(_QWORD *)v252 + 23) & 0x10) != 0)
                          break;
                        v286 = 0;
                        v287 = &byte_1C871356D;
                        v279 = v641;
LABEL_483:
                        v671 = 773;
                        v668 = v287;
                        v669 = v286;
                        v670[0] = (uint64_t)".";
                        v289 = (llvm::MDNode *)(v279 & 0xFFFFFFFF00000000 | v267);
                        v691[0] = (llvm::LLVMContext *)&v668;
                        v692 = v289;
                        v694 = 2050;
                        v290 = sub_1C509D7B0((uint64_t *)&v678, (llvm::GetElementPtrInst *)v260, v275, (llvm::Value *)&v687, 2, (uint64_t)v691);
                        v291 = v290;
                        v292 = *(_QWORD *)(v268 + 8 * v267);
                        v293 = *(_QWORD *)(*(_QWORD *)(v260 + 16) + 8 * v267);
                        v641 = (unint64_t)v289;
                        if ((*(_BYTE *)(v290 + 23) & 0x10) != 0)
                        {
                          v294 = ***(_QWORD ***)v290;
                          v295 = *(_QWORD *)(v294 + 152);
                          v296 = *(unsigned int *)(v294 + 168);
                          if (!(_DWORD)v296)
                            goto LABEL_490;
                          LODWORD(v297) = (v296 - 1) & ((v290 >> 4) ^ (v290 >> 9));
                          v298 = (uint64_t *)(v295 + 16 * v297);
                          v299 = *v298;
                          if (*v298 != v290)
                          {
                            v300 = 1;
                            while (v299 != -4096)
                            {
                              v301 = v297 + v300++;
                              v297 = v301 & (v296 - 1);
                              v299 = *(_QWORD *)(v295 + 16 * v297);
                              if (v299 == v290)
                              {
                                v298 = (uint64_t *)(v295 + 16 * v297);
                                goto LABEL_491;
                              }
                            }
LABEL_490:
                            v298 = (uint64_t *)(v295 + 16 * v296);
                          }
LABEL_491:
                          v302 = (_QWORD *)v298[1];
                          v305 = *v302;
                          v304 = (char *)(v302 + 2);
                          v303 = v305;
                          goto LABEL_492;
                        }
                        v303 = 0;
                        v304 = &byte_1C871356D;
LABEL_492:
                        v671 = 773;
                        v668 = v304;
                        v669 = v303;
                        v670[0] = (uint64_t)".val";
                        v306 = (char *)operator new(0x60uLL);
                        v307 = v306;
                        StructLayout = (uint64_t)(v306 + 32);
                        *((_QWORD *)v306 + 2) = 0;
                        *((_QWORD *)v306 + 3) = v306 + 32;
                        v694 = 257;
                        *((_QWORD *)v306 + 4) = v293;
                        *((_QWORD *)v306 + 5) = 0;
                        *((_WORD *)v306 + 24) = 60;
                        *((_DWORD *)v306 + 13) = 1;
                        *(_OWORD *)(v306 + 56) = 0u;
                        *(_OWORD *)(v306 + 72) = 0u;
                        *((_DWORD *)v306 + 22) = 0;
                        *(_QWORD *)v306 = v291;
                        *((_QWORD *)v306 + 1) = 0;
                        if (v291)
                        {
                          v310 = *(_QWORD *)(v291 + 8);
                          v309 = (_QWORD *)(v291 + 8);
                          v308 = v310;
                          *((_QWORD *)v306 + 1) = v310;
                          if (v310)
                            *(_QWORD *)(v308 + 16) = v306 + 8;
                          *((_QWORD *)v306 + 2) = v309;
                          *v309 = v306;
                        }
                        *((_WORD *)v306 + 25) = (126 - 2 * __clz((v292 | v269) & -(v292 | v269))) & 0x7E;
                        v306[92] = 1;
                        llvm::Value::setName((uint64_t ***)v306 + 4, (uint64_t)v691);
                        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v686 + 16))(v686, StructLayout, &v668, v683, v684);
                        if ((_DWORD)v679)
                        {
                          v313 = (char *)v678;
                          v314 = (char *)v678 + 16 * v679;
                          v315 = (unsigned __int8 **)(v307 + 80);
                          do
                          {
                            v316 = *(_DWORD *)v313;
                            v265 = (const llvm::APInt *)*((_QWORD *)v313 + 1);
                            if (v265)
                            {
                              if (!v316)
                              {
                                *(_QWORD *)&__src = *((_QWORD *)v313 + 1);
                                llvm::MetadataTracking::track((uint64_t)&__src, (unsigned __int8 *)v265, 2);
                                v317 = *v315;
                                if (!*v315)
                                {
LABEL_515:
                                  v318 = (unsigned __int8 *)__src;
                                  *v315 = (unsigned __int8 *)__src;
                                  if (v318)
                                    llvm::MetadataTracking::retrack((uint64_t)&__src, v318, (uint64_t)(v307 + 80));
                                  goto LABEL_512;
                                }
LABEL_509:
                                llvm::MetadataTracking::untrack((uint64_t)(v307 + 80), v317);
                                goto LABEL_515;
                              }
                            }
                            else
                            {
                              v317 = *v315;
                              if (!*v315 && (v307[55] & 0x20) == 0)
                                goto LABEL_512;
                              if (!v316)
                              {
                                *(_QWORD *)&__src = 0;
                                if (!v317)
                                  goto LABEL_515;
                                goto LABEL_509;
                              }
                            }
                            llvm::Value::setMetadata((llvm::Value *)StructLayout, *(_DWORD *)v313, v265);
LABEL_512:
                            v313 += 16;
                          }
                          while (v313 != v314);
                        }
                        v311 = v696;
                        if (v696 >= (unint64_t)HIDWORD(v696))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v695, (uint64_t)&v697, v696 + 1, 8);
                          v311 = v696;
                        }
                        v252 = v637;
                        *((_QWORD *)v695 + v311) = StructLayout;
                        LODWORD(v696) = (_DWORD)v696 + 1;
                        v312 = __n;
                        if (__n >= (unint64_t)HIDWORD(__n))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v675, (uint64_t)v677, __n + 1, 8);
                          v312 = __n;
                        }
                        *((_QWORD *)v675 + v312) = 0;
                        LODWORD(__n) = __n + 1;
                        if (++v267 == v266)
                          goto LABEL_522;
                      }
                      v276 = **(_QWORD **)*v275;
                      v277 = *(_QWORD *)(v276 + 152);
                      v278 = *(unsigned int *)(v276 + 168);
                      v279 = v641;
                      if ((_DWORD)v278)
                      {
                        LODWORD(v280) = (v278 - 1) & ((v275 >> 4) ^ (v275 >> 9));
                        v281 = (uint64_t **)(v277 + 16 * v280);
                        v282 = *v281;
                        if (*v281 == v275)
                        {
LABEL_482:
                          v285 = v281[1];
                          v288 = *v285;
                          v287 = (char *)(v285 + 2);
                          v286 = v288;
                          goto LABEL_483;
                        }
                        v283 = 1;
                        while (v282 != (uint64_t *)-4096)
                        {
                          v284 = v280 + v283++;
                          v280 = v284 & (v278 - 1);
                          v282 = *(uint64_t **)(v277 + 16 * v280);
                          if (v282 == v275)
                          {
                            v281 = (uint64_t **)(v277 + 16 * v280);
                            goto LABEL_482;
                          }
                        }
                      }
                      v281 = (uint64_t **)(v277 + 16 * v278);
                      goto LABEL_482;
                    }
LABEL_522:
                    v221 = v639;
                    v245 = (llvm::DataLayout *)(v605 + 34);
                    goto LABEL_523;
                  }
                  if (!*(_QWORD *)(v253 + 8))
                    goto LABEL_705;
                  v319 = *(uint64_t **)v252;
                  v320 = sub_1C5673A20((uint64_t)&v647, v253);
                  v321 = *(unsigned int *)(v320 + 16);
                  if (!(_DWORD)v321)
                  {
                    v221 = v639;
                    goto LABEL_705;
                  }
                  v621 = v253;
                  v322 = *(_QWORD *)(v320 + 8);
                  v633 = v322 + 32 * v321;
                  do
                  {
                    v323 = *v319;
                    v324 = *(_DWORD *)(*v319 + 8);
                    if ((v324 & 0xFE) == 0x12)
                      v324 = *(_DWORD *)(**(_QWORD **)(v323 + 16) + 8);
                    v325 = *(_QWORD *)v322;
                    v326 = *(llvm::Type **)(v322 + 8);
                    IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)v245, v323);
                    DWORD2(__src) = IndexTypeSizeInBits;
                    if (IndexTypeSizeInBits > 0x40)
                    {
                      llvm::APInt::initSlowCase((llvm::APInt *)&__src, v325, 0);
                    }
                    else
                    {
                      v328 = 0xFFFFFFFFFFFFFFFFLL >> -(char)IndexTypeSizeInBits;
                      if (!IndexTypeSizeInBits)
                        v328 = 0;
                      *(_QWORD *)&__src = v328 & v325;
                    }
                    v329 = (llvm::Type *)(v324 >> 8);
                    v330 = *v319;
                    if (*v319 && *(_BYTE *)(v330 + 8) == 15)
                    {
                      v331 = DWORD2(__src);
                      v332 = (unsigned __int8 *)v319;
                      if (!*(_QWORD *)(v330 + 24))
                        goto LABEL_621;
                    }
                    else
                    {
                      v331 = DWORD2(__src);
                    }
                    v333 = **(unsigned __int8 ***)(v330 + 16);
                    if (v331 < 0x41)
                    {
                      p_src = &__src;
LABEL_546:
                      if (*(_QWORD *)p_src)
                        v339 = 0;
                      else
                        v339 = v333 == (unsigned __int8 *)v326;
                      if (v339)
                      {
                        StructLayout = (uint64_t)v319;
                        goto LABEL_632;
                      }
                      goto LABEL_550;
                    }
                    v335 = 0;
                    p_src = (__int128 *)__src;
                    v336 = ((unint64_t)v331 + 63) >> 6;
                    do
                    {
                      v150 = v336-- < 1;
                      if (v150)
                        break;
                      v337 = *(_QWORD *)(__src + 8 * v336);
                      v335 += __clz(v337);
                    }
                    while (!v337);
                    v338 = v331 | 0xFFFFFFC0;
                    if ((v331 & 0x3F) == 0)
                      v338 = 0;
                    if (v331 - v335 - v338 <= 0x40)
                      goto LABEL_546;
LABEL_550:
                    v340 = v333[8];
                    if (v340 > 0x11)
                      goto LABEL_689;
                    if (((1 << v340) & 0xAC7F) != 0)
                      goto LABEL_552;
                    if (((1 << v340) & 0x30000) == 0)
                    {
LABEL_689:
                      v406 = (v340 & 0xFE) == 0x12 || v340 == 21;
                      v332 = (unsigned __int8 *)v319;
                      if (!v406)
                        goto LABEL_621;
                    }
                    isSizedDerivedType = llvm::Type::isSizedDerivedType((uint64_t)v333, 0);
                    v331 = DWORD2(__src);
                    v332 = (unsigned __int8 *)v319;
                    if (!isSizedDerivedType)
                      goto LABEL_621;
LABEL_552:
                    LODWORD(v664) = v331;
                    if (v331 > 0x40)
                    {
                      v663 = (llvm::SmallPtrSetImplBase *)operator new[]();
                      memcpy(v663, (const void *)__src, (((unint64_t)v664 + 63) >> 3) & 0x3FFFFFF8);
                    }
                    else
                    {
                      v663 = (llvm::SmallPtrSetImplBase *)__src;
                    }
                    v667 = (llvm::Type *)v333;
                    llvm::DataLayout::getGEPIndicesForOffset(v245, &v667, (llvm::APInt *)&v663, v691);
                    v342 = v663;
                    if (v664 >= 0x41)
                    {
                      v343 = 0;
                      v344 = ((unint64_t)v664 + 63) >> 6;
                      do
                      {
                        v150 = v344-- < 1;
                        if (v150)
                          break;
                        v345 = *((_QWORD *)v663 + v344);
                        v343 += __clz(v345);
                      }
                      while (!v345);
                      v346 = v664 | 0xFFFFFFC0;
                      if ((v664 & 0x3F) == 0)
                        v346 = 0;
                      v332 = (unsigned __int8 *)v319;
                      if ((_DWORD)v664 - v343 - v346 > 0x40)
                        goto LABEL_607;
                      v342 = *(llvm::SmallPtrSetImplBase **)v663;
                    }
                    v332 = (unsigned __int8 *)v319;
                    if (!v342)
                    {
                      v347 = v326;
                      if (v667 != v326)
                      {
                        v347 = v667;
                        while (1)
                        {
                          TypeAtIndex = llvm::GetElementPtrInst::getTypeAtIndex((uint64_t)v347, 0);
                          if (!TypeAtIndex)
                            break;
                          StructLayout = TypeAtIndex;
                          if (*((_BYTE *)v347 + 8) == 16)
                            v349 = 32;
                          else
                            v349 = DWORD2(__src);
                          LODWORD(v669) = v349;
                          if (v349 > 0x40)
                            llvm::APInt::initSlowCase((llvm::APInt *)&v668, 0, 0);
                          else
                            v668 = 0;
                          sub_1C4DF5F58((uint64_t)v691, (unint64_t)&v668);
                          if (v669 >= 0x41 && v668)
                            MEMORY[0x1CAA32F9C](v668, 0x1000C8000313F17);
                          v347 = (llvm::Type *)StructLayout;
                          if ((llvm::Type *)StructLayout == v326)
                          {
                            v347 = v326;
                            break;
                          }
                        }
                        v667 = v347;
                      }
                      v668 = v670;
                      v669 = 0x600000000;
                      v351 = v691[1];
                      if (LODWORD(v691[1]))
                      {
                        StructLayout = (uint64_t)v691[0];
                        v352 = 16 * LODWORD(v691[1]);
                        do
                        {
                          v353 = llvm::ConstantInt::get(v685, (llvm::LLVMContext *)StructLayout, v341);
                          v354 = v669;
                          if (v669 >= (unint64_t)HIDWORD(v669))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v668, (uint64_t)v670, v669 + 1, 8);
                            v354 = v669;
                          }
                          *((_QWORD *)v668 + v354) = v353;
                          v351 = v669 + 1;
                          LODWORD(v669) = v669 + 1;
                          StructLayout += 16;
                          v352 -= 16;
                        }
                        while (v352);
                        v245 = (llvm::DataLayout *)(v605 + 34);
                      }
                      if (DWORD2(__src) < 0x41)
                      {
                        v355 = &__src;
                        goto LABEL_597;
                      }
                      v356 = 0;
                      v355 = (__int128 *)__src;
                      v357 = ((unint64_t)DWORD2(__src) + 63) >> 6;
                      do
                      {
                        v150 = v357-- < 1;
                        if (v150)
                          break;
                        v358 = *(_QWORD *)(__src + 8 * v357);
                        v356 += __clz(v358);
                      }
                      while (!v358);
                      v359 = DWORD2(__src) | 0xFFFFFFC0;
                      if ((BYTE8(__src) & 0x3F) == 0)
                        v359 = 0;
                      if (DWORD2(__src) - v356 - v359 <= 0x40)
                      {
LABEL_597:
                        if (*(_QWORD *)v355)
                          v360 = 1;
                        else
                          v360 = v347 == v326;
                        if (!v360)
                        {
                          v362 = 0;
                          v332 = (unsigned __int8 *)v319;
                          goto LABEL_603;
                        }
                      }
                      v690 = 257;
                      v332 = (unsigned __int8 *)sub_1C509D7B0((uint64_t *)&v678, (llvm::GetElementPtrInst *)v333, v319, (llvm::Value *)v668, v351, (uint64_t)&v687);
                      v361 = llvm::PointerType::get(v326, v329);
                      v690 = 257;
                      StructLayout = (uint64_t)sub_1C4773E38((uint64_t *)&v678, 49, v332, v361, (uint64_t)&v687);
                      v362 = 1;
LABEL_603:
                      if (v668 != v670)
                        free(v668);
                      if ((v362 & 1) != 0)
                      {
                        v363 = 0;
                        goto LABEL_608;
                      }
                    }
LABEL_607:
                    v363 = 1;
LABEL_608:
                    v364 = v691[0];
                    if (LODWORD(v691[1]))
                    {
                      v365 = 16 * LODWORD(v691[1]);
                      do
                      {
                        if (*(_DWORD *)((char *)v364 + v365 - 8) >= 0x41u)
                        {
                          v366 = *(_QWORD *)((char *)v364 + v365 - 16);
                          if (v366)
                            MEMORY[0x1CAA32F9C](v366, 0x1000C8000313F17);
                        }
                        v365 -= 16;
                      }
                      while (v365);
                      v364 = v691[0];
                    }
                    if (v364 != (llvm::LLVMContext *)&v692)
                      free(v364);
                    if (v664 >= 0x41 && v663)
                      MEMORY[0x1CAA32F9C](v663, 0x1000C8000313F17);
                    v331 = DWORD2(__src);
                    if (v363)
                    {
LABEL_621:
                      v367 = __src;
                      if (v331 < 0x41)
                        goto LABEL_629;
                      v368 = 0;
                      v369 = ((unint64_t)v331 + 63) >> 6;
                      do
                      {
                        v150 = v369-- < 1;
                        if (v150)
                          break;
                        v370 = *(_QWORD *)(__src + 8 * v369);
                        v368 += __clz(v370);
                      }
                      while (!v370);
                      v371 = v331 | 0xFFFFFFC0;
                      if ((v331 & 0x3F) == 0)
                        v371 = 0;
                      if (v331 - v368 - v371 > 0x40)
                        goto LABEL_630;
                      v367 = *(_QWORD *)__src;
LABEL_629:
                      if (v367)
                      {
LABEL_630:
                        v372 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v685 + 1912), v329);
                        v694 = 257;
                        v373 = (uint64_t *)sub_1C4773E38((uint64_t *)&v678, 49, v332, v372, (uint64_t)v691);
                        v374 = (llvm::GetElementPtrInst *)(*(_QWORD *)v685 + 1912);
                        v376 = llvm::ConstantInt::get(v685, (llvm::LLVMContext *)&__src, v375);
                        v694 = 257;
                        v332 = (unsigned __int8 *)sub_1C4867B70((uint64_t *)&v678, v374, v373, (uint64_t)v376, (uint64_t)v691);
                      }
                      v377 = llvm::PointerType::get(v326, v329);
                      v694 = 257;
                      StructLayout = (uint64_t)sub_1C4773E38((uint64_t *)&v678, 49, v332, v377, (uint64_t)v691);
                      v331 = DWORD2(__src);
                    }
LABEL_632:
                    if (v331 >= 0x41 && (_QWORD)__src)
                      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
                    v378 = *(_BYTE *)(v322 + 16);
                    if ((*((_BYTE *)v319 + 23) & 0x10) != 0)
                    {
                      v379 = **(_QWORD **)*v319;
                      v380 = *(_QWORD *)(v379 + 152);
                      v381 = *(unsigned int *)(v379 + 168);
                      if (!(_DWORD)v381)
                        goto LABEL_642;
                      LODWORD(v382) = (v381 - 1) & ((v319 >> 4) ^ (v319 >> 9));
                      v383 = (uint64_t **)(v380 + 16 * v382);
                      v384 = *v383;
                      if (*v383 != v319)
                      {
                        v385 = 1;
                        while (v384 != (uint64_t *)-4096)
                        {
                          v386 = v382 + v385++;
                          v382 = v386 & (v381 - 1);
                          v384 = *(uint64_t **)(v380 + 16 * v382);
                          if (v384 == v319)
                          {
                            v383 = (uint64_t **)(v380 + 16 * v382);
                            goto LABEL_643;
                          }
                        }
LABEL_642:
                        v383 = (uint64_t **)(v380 + 16 * v381);
                      }
LABEL_643:
                      v387 = v383[1];
                      v390 = *v387;
                      v389 = (char *)(v387 + 2);
                      v388 = v390;
                      goto LABEL_644;
                    }
                    v388 = 0;
                    v389 = &byte_1C871356D;
LABEL_644:
                    v671 = 773;
                    v668 = v389;
                    v669 = v388;
                    v670[0] = (uint64_t)".val";
                    v391 = (char *)operator new(0x60uLL);
                    v392 = v391;
                    v393 = (llvm::Value *)(v391 + 32);
                    *((_QWORD *)v391 + 2) = 0;
                    *((_QWORD *)v391 + 3) = v391 + 32;
                    v694 = 257;
                    *((_QWORD *)v391 + 4) = v326;
                    *((_QWORD *)v391 + 5) = 0;
                    *((_WORD *)v391 + 24) = 60;
                    *((_DWORD *)v391 + 13) = 1;
                    *(_OWORD *)(v391 + 56) = 0u;
                    *(_OWORD *)(v391 + 72) = 0u;
                    *((_DWORD *)v391 + 22) = 0;
                    *(_QWORD *)v391 = StructLayout;
                    *((_QWORD *)v391 + 1) = 0;
                    if (StructLayout)
                    {
                      v395 = *(_QWORD *)(StructLayout + 8);
                      StructLayout += 8;
                      v394 = v395;
                      *((_QWORD *)v391 + 1) = v395;
                      if (v395)
                        *(_QWORD *)(v394 + 16) = v391 + 8;
                      *((_QWORD *)v391 + 2) = StructLayout;
                      *(_QWORD *)StructLayout = v391;
                    }
                    *((_WORD *)v391 + 25) = 2 * (v378 & 0x3F);
                    v391[92] = 1;
                    llvm::Value::setName((uint64_t ***)v391 + 4, (uint64_t)v691);
                    (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v686 + 16))(v686, v393, &v668, v683, v684);
                    if ((_DWORD)v679)
                    {
                      v400 = (char *)v678;
                      v401 = (char *)v678 + 16 * v679;
                      StructLayout = (uint64_t)(v392 + 80);
                      do
                      {
                        v402 = *(_DWORD *)v400;
                        v403 = (unsigned __int8 *)*((_QWORD *)v400 + 1);
                        if (v403)
                        {
                          if (!v402)
                          {
                            v687 = *((_QWORD *)v400 + 1);
                            llvm::MetadataTracking::track((uint64_t)&v687, v403, 2);
                            v404 = *(unsigned __int8 **)StructLayout;
                            goto LABEL_685;
                          }
                        }
                        else
                        {
                          v404 = *(unsigned __int8 **)StructLayout;
                          if (!*(_QWORD *)StructLayout && (v392[55] & 0x20) == 0)
                            goto LABEL_682;
                          if (!v402)
                          {
                            v687 = 0;
LABEL_685:
                            if (v404)
                              llvm::MetadataTracking::untrack((uint64_t)(v392 + 80), v404);
                            v405 = (unsigned __int8 *)v687;
                            *(_QWORD *)StructLayout = v687;
                            if (v405)
                              llvm::MetadataTracking::retrack((uint64_t)&v687, v405, (uint64_t)(v392 + 80));
                            goto LABEL_682;
                          }
                        }
                        llvm::Value::setMetadata(v393, *(_DWORD *)v400, (llvm::MDNode *)v403);
LABEL_682:
                        v400 += 16;
                      }
                      while (v400 != v401);
                    }
                    v396 = *(uint64_t ****)(v322 + 24);
                    if (v396)
                    {
                      llvm::Instruction::getAAMetadata(v396, v691);
                      if (v691[0] || *((_QWORD *)v392 + 10) || (v392[55] & 0x20) != 0)
                        llvm::Value::setMetadata(v393, 1, v691[0]);
                      if (v691[1] || *((_QWORD *)v392 + 10) || (v392[55] & 0x20) != 0)
                        llvm::Value::setMetadata(v393, 5, v691[1]);
                      if (v692 || *((_QWORD *)v392 + 10) || (v392[55] & 0x20) != 0)
                        llvm::Value::setMetadata(v393, 7, v692);
                      if (v693 || *((_QWORD *)v392 + 10) || (v392[55] & 0x20) != 0)
                        llvm::Value::setMetadata(v393, 8, v693);
                      v397 = *(_QWORD *)(v322 + 24);
                      *(_OWORD *)v691 = xmmword_1C8660010;
                      v692 = (llvm::MDNode *)0x1D00000011;
                      llvm::Instruction::copyMetadata((uint64_t)v393, v397, (int *)v691, 6);
                    }
                    v398 = v696;
                    if (v696 >= (unint64_t)HIDWORD(v696))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v695, (uint64_t)&v697, v696 + 1, 8);
                      v398 = v696;
                    }
                    *((_QWORD *)v695 + v398) = v393;
                    LODWORD(v696) = (_DWORD)v696 + 1;
                    v399 = __n;
                    if (__n >= (unint64_t)HIDWORD(__n))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v675, (uint64_t)v677, __n + 1, 8);
                      v399 = __n;
                    }
                    *((_QWORD *)v675 + v399) = 0;
                    LODWORD(__n) = __n + 1;
                    v322 += 32;
                  }
                  while (v322 != v633);
                  v252 = v637;
                  v221 = v639;
LABEL_523:
                  v253 = v621;
LABEL_705:
                  v253 += 40;
                  v252 = (llvm::Type *)((char *)v252 + 32);
                  v254 = v628 + 1;
                  if ((int *)v253 == v619)
                    goto LABEL_712;
                }
              }
              v254 = 0;
LABEL_712:
              v412 = v625;
              v413 = (char *)v625 - 32;
              v414 = v623 + 40;
              v415 = v254 + 2;
              while (2)
              {
                v416 = *((unsigned __int8 *)v412 + 16);
                if (v416 == 84)
                {
                  v417 = 0;
                }
                else
                {
                  if (v416 == 39)
                  {
                    v412 = v625;
                    v417 = (*((_DWORD *)v625 + 20) + 1);
                    v221 = v639;
                  }
                  else
                  {
                    v417 = 2;
                    v221 = v639;
                    v412 = v625;
                  }
                  v414 = v623 + 40;
                }
                v418 = *((_DWORD *)v412 + 5);
                if ((v418 & 0x80000000) == 0)
                {
                  if (v252 == (llvm::Type *)&v413[-32 * v417])
                  {
                    v691[0] = (llvm::LLVMContext *)&v692;
                    v691[1] = (llvm::LLVMContext *)0x100000000;
                    goto LABEL_735;
                  }
                  goto LABEL_717;
                }
                v424 = 0;
                v425 = v418 & 0x7FFFFFF;
                if ((*((_QWORD *)v625 - 4 * v425 - 1) & 0xFFFFFFFF0) != 0)
                  v424 = (*((_DWORD *)v625 - 8 * v425 - 3)
                                      - *(_DWORD *)((char *)v625 - *((_QWORD *)v625 - 4 * v425 - 1) + -32 * v425));
                v426 = (uint64_t)&v413[-32 * v417 + -32 * v424];
                v414 = v623 + 40;
                v221 = v639;
                if (v252 != (llvm::Type *)v426)
                {
LABEL_717:
                  v419 = v252;
                  v420 = *(uint64_t **)v252;
                  v421 = v696;
                  if (v696 >= (unint64_t)HIDWORD(v696))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v695, (uint64_t)&v697, v696 + 1, 8);
                    v414 = v623 + 40;
                    v421 = v696;
                  }
                  *((_QWORD *)v695 + v421) = v420;
                  LODWORD(v696) = (_DWORD)v696 + 1;
                  v412 = v625;
                  if (v623 && v415 < *(_DWORD *)(v623 + 8))
                    v422 = *(_QWORD *)(v414 + 8 * v415);
                  else
                    v422 = 0;
                  v423 = __n;
                  if (__n >= (unint64_t)HIDWORD(__n))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v675, (uint64_t)v677, __n + 1, 8);
                    v414 = v623 + 40;
                    v412 = v625;
                    v423 = __n;
                  }
                  *((_QWORD *)v675 + v423) = v422;
                  LODWORD(__n) = __n + 1;
                  v252 = (llvm::Type *)((char *)v419 + 32);
                  ++v415;
                  continue;
                }
                break;
              }
              v691[0] = (llvm::LLVMContext *)&v692;
              v691[1] = (llvm::LLVMContext *)0x100000000;
              v460 = *((_QWORD *)v625 - 4 * v425 - 1);
              if ((v460 & 0xFFFFFFFF0) != 0)
              {
                v461 = (v460 >> 4);
                v462 = v625;
                do
                {
                  v463 = *((_DWORD *)v625 + 5) & 0x7FFFFFF;
                  v464 = (char *)v625 - 32 * v463;
                  v465 = (unsigned int *)((char *)v462 - *((_QWORD *)v464 - 1) + -32 * v463);
                  v466 = *v465;
                  v467 = v465[1];
                  v468 = *((_QWORD *)v465 - 1);
                  v668 = &v464[32 * v466];
                  v669 = v467 - v466;
                  v670[0] = v468;
                  sub_1C623D924((uint64_t)v691, (uint64_t)&v668);
                  v462 = (llvm::Value *)((char *)v462 + 16);
                  --v461;
                }
                while (v461);
                v416 = *((unsigned __int8 *)v625 + 16);
                v221 = v639;
              }
LABEL_735:
              v427 = *((_QWORD *)v615 + 4);
              if (v416 == 33)
              {
                v453 = *((_QWORD *)v625 - 12);
                v454 = *((_QWORD *)v625 - 8);
                v671 = 257;
                v455 = sub_1C61CC1B8(v427, (uint64_t)v612, v453, v454, (uint64_t *)v695, v696, (uint64_t)v691[0], LODWORD(v691[1]), (uint64_t)&v668, v625);
                v443 = v625;
                v437 = (uint64_t)v455;
                v444 = *((_WORD *)v455 + 9);
              }
              else
              {
                v428 = (uint64_t *)v695;
                v429 = v696;
                StructLayout = LODWORD(v691[1]);
                v671 = 257;
                if (LODWORD(v691[1]))
                {
                  v431 = 0;
                  v469 = 48 * LODWORD(v691[1]);
                  v430 = v691[0];
                  v470 = (_QWORD *)((char *)v691[0] + 32);
                  do
                  {
                    v431 += (*v470 - *(v470 - 1)) >> 3;
                    v470 += 6;
                    v469 -= 48;
                  }
                  while (v469);
                }
                else
                {
                  v430 = v691[0];
                  v431 = 0;
                }
                v432 = (v431 + (_DWORD)v696 + 1);
                v433 = (16 * LODWORD(v691[1]));
                if ((_DWORD)v433)
                  v434 = (16 * LODWORD(v691[1])) | 8u;
                else
                  v434 = 0;
                v435 = (char *)operator new(v434 + 32 * v432 + 80);
                v436 = &v435[v434];
                v437 = (uint64_t)&v435[32 * v432 + v434];
                *(_DWORD *)(v437 + 20) = v432 & 0x7FFFFFF | (((_DWORD)v433 != 0) << 31) | *(_DWORD *)(v437 + 20) & 0x38000000;
                if ((_DWORD)v432)
                {
                  do
                  {
                    *(_QWORD *)v436 = 0;
                    *((_QWORD *)v436 + 1) = 0;
                    *((_QWORD *)v436 + 2) = 0;
                    *((_QWORD *)v436 + 3) = v437;
                    v436 += 32;
                  }
                  while (v436 != (char *)v437);
                }
                if ((_DWORD)v433)
                  *(_QWORD *)&v435[v433] = v433;
                v221 = v639;
                v438 = 0;
                if ((_DWORD)StructLayout)
                {
                  v471 = 48 * StructLayout;
                  v472 = (_QWORD *)((char *)v430 + 32);
                  do
                  {
                    v438 += (*v472 - *(v472 - 1)) >> 3;
                    v472 += 6;
                    v471 -= 48;
                  }
                  while (v471);
                }
                *(_QWORD *)v437 = **(_QWORD **)(v427 + 16);
                *(_QWORD *)(v437 + 8) = 0;
                v439 = *(_DWORD *)(v437 + 20) & 0xC0000000 | (v438 + v429 + 1) & 0x7FFFFFF;
                *(_DWORD *)(v437 + 16) = 84;
                *(_DWORD *)(v437 + 20) = v439;
                *(_OWORD *)(v437 + 24) = 0u;
                v440 = v437 + 24;
                *(_OWORD *)(v437 + 40) = 0u;
                *(_DWORD *)(v437 + 56) = 0;
                v441 = v625;
                if (v625)
                {
                  v456 = *((_QWORD *)v625 + 5);
                  *(_QWORD *)(v437 + 40) = v456;
                  *(_WORD *)(v456 + 18) &= ~0x8000u;
                  if ((*(_BYTE *)(v437 + 23) & 0x10) != 0)
                  {
                    v458 = *(_QWORD *)(v456 + 56);
                    if (v458)
                    {
                      v459 = *(llvm::ValueSymbolTable **)(v458 + 104);
                      if (v459)
                      {
                        llvm::ValueSymbolTable::reinsertValue(v459, (llvm::Value *)v437);
                        v441 = v625;
                      }
                    }
                  }
                  v457 = *((_QWORD *)v441 + 3);
                  *(_QWORD *)(v437 + 24) = v457;
                  *(_QWORD *)(v437 + 32) = (char *)v441 + 24;
                  *(_QWORD *)(v457 + 8) = v440;
                  *((_QWORD *)v441 + 3) = v440;
                  v439 = *(_DWORD *)(v437 + 20);
                }
                *(_QWORD *)(v437 + 64) = 0;
                *(_QWORD *)(v437 + 72) = v427;
                sub_1C5382FD4((uint64_t)&v687, v428, &v428[v429], v437 - 32 * (v439 & 0x7FFFFFF));
                if (*(_QWORD *)(v437 - 32))
                {
                  **(_QWORD **)(v437 - 16) = *(_QWORD *)(v437 - 24);
                  v473 = *(_QWORD *)(v437 - 24);
                  if (v473)
                    *(_QWORD *)(v473 + 16) = *(_QWORD *)(v437 - 16);
                }
                v442 = *v616;
                *(_QWORD *)(v437 - 24) = *v616;
                *(_QWORD *)(v437 - 32) = v612;
                if (v442)
                  *(_QWORD *)(v442 + 16) = v437 - 24;
                *(_QWORD *)(v437 - 16) = v616;
                *v616 = v437 - 32;
                llvm::CallBase::populateBundleOperandInfos(v437, (uint64_t)v430, StructLayout, v429);
                llvm::Value::setName((uint64_t ***)v437, (uint64_t)&v668);
                v443 = v625;
                v444 = *(_WORD *)(v437 + 18) & 0xFFFC | *((_WORD *)v625 + 9) & 3;
                *(_WORD *)(v437 + 18) = v444;
              }
              *(_WORD *)(v437 + 18) = *((_WORD *)v443 + 9) & 0xFFC | v444 & 0xF003;
              if (v623 && (v445 = *(_DWORD *)(v623 + 8)) != 0)
              {
                v446 = *(_QWORD *)(v623 + 40);
                if (v445 != 1)
                {
                  v447 = *(_QWORD *)(v623 + 48);
                  goto LABEL_757;
                }
              }
              else
              {
                v446 = 0;
              }
              v447 = 0;
LABEL_757:
              v245 = (llvm::DataLayout *)(v605 + 34);
              *(_QWORD *)(v437 + 64) = llvm::AttributeList::get(**(uint64_t ***)v221, v446, v447, v675, __n);
              v668 = (void *)2;
              v237 = (unint64_t)v625;
              llvm::Instruction::copyMetadata(v437, (uint64_t)v625, (int *)&v668, 2);
              LODWORD(v696) = 0;
              LODWORD(__n) = 0;
              if (v611)
                v609(*(_QWORD *)v608, v625, v437);
              if (*((_QWORD *)v625 + 1))
              {
                llvm::Value::doRAUW(v625, (llvm::Value *)v437, (llvm::Value *)1);
                llvm::Value::takeName((llvm::Value *)v437, v625);
                v237 = (unint64_t)v625;
              }
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v237 + 40) + 40, (uint64_t ***)v237);
              v448 = *(_QWORD *)(v237 + 24);
              v449 = *(_QWORD **)(v237 + 32);
              *v449 = v448;
              *(_QWORD *)(v448 + 8) = v449;
              *(_QWORD *)(v237 + 24) = 0;
              *(_QWORD *)(v237 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v237);
              v450 = v691[0];
              if (LODWORD(v691[1]))
              {
                v237 = 48 * LODWORD(v691[1]);
                do
                {
                  v451 = (char *)v450 + v237;
                  v452 = *(void **)((char *)v450 + v237 - 24);
                  if (v452)
                  {
                    *((_QWORD *)v451 - 2) = v452;
                    operator delete(v452);
                  }
                  if (*(v451 - 25) < 0)
                    operator delete(*((void **)v451 - 6));
                  v237 -= 48;
                }
                while (v237);
                v450 = v691[0];
              }
              if (v450 != (llvm::LLVMContext *)&v692)
                free(v450);
              if (v678 != &v680)
                free(v678);
              v246 = (_QWORD **)*((_QWORD *)v221 + 1);
              if (v246)
                continue;
              break;
            }
LABEL_793:
            sub_1C566A128((uint64_t)(v615 + 80), *((uint64_t **)v615 + 11), v613);
            if ((*((_WORD *)v615 + 13) & 1) != 0)
              llvm::Function::BuildLazyArguments(v612);
            v474 = (llvm::Value *)*((_QWORD *)v615 + 12);
            if ((*((_WORD *)v221 + 9) & 1) == 0)
            {
              v475 = *v607;
              goto LABEL_797;
            }
            llvm::Function::BuildLazyArguments(v221);
            v475 = (int *)*((_QWORD *)v221 + 11);
            if ((*((_WORD *)v221 + 9) & 1) != 0)
            {
              llvm::Function::BuildLazyArguments(v221);
              v476 = (int *)*((_QWORD *)v221 + 11);
            }
            else
            {
LABEL_797:
              v476 = v475;
            }
            v477 = &v476[10 * *((_QWORD *)v221 + 12)];
            if (v475 == v477)
            {
LABEL_930:
              if (v695 != &v697)
                free(v695);
              v14 = v612;
              if (v675 != v677)
                free(v675);
              if (__p)
              {
                *(_QWORD *)v653 = __p;
                operator delete(__p);
              }
LABEL_936:
              if (v643 != v642)
                free(v643);
              v599 = v647;
              if (v649)
              {
                v600 = 152 * v649;
                v601 = (_QWORD *)(v647 + 24);
                do
                {
                  if ((*(v601 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
                  {
                    v602 = (_QWORD *)*(v601 - 2);
                    if (v601 != v602)
                      free(v602);
                  }
                  v601 += 19;
                  v600 -= 152;
                }
                while (v600);
              }
              MEMORY[0x1CAA32FB4](v599, 8);
              goto LABEL_945;
            }
            v618 = &v476[10 * *((_QWORD *)v221 + 12)];
            while (2)
            {
              if ((sub_1C5673C84(v647, v649, (uint64_t)v475, &v678) & 1) == 0)
              {
                v478 = (char *)sub_1C477672C((uint64_t)&v642, (uint64_t)v475);
                v479 = v643 == v642 ? (uint64_t *)((char *)&v644 + 4) : &v644;
                if (v478 == &v643[8 * *(unsigned int *)v479])
                {
                  llvm::Value::doRAUW((llvm::ValueAsMetadata *)v475, v474, (llvm::Value *)1);
                  llvm::Value::takeName(v474, (llvm::Value *)v475);
                  v474 = (llvm::Value *)((char *)v474 + 40);
                  goto LABEL_925;
                }
              }
              v480 = (char *)sub_1C477672C((uint64_t)&v642, (uint64_t)v475);
              if (v643 == v642)
                v482 = (uint64_t *)((char *)&v644 + 4);
              else
                v482 = &v644;
              if (v480 != &v643[8 * *(unsigned int *)v482])
              {
                v483 = *((_QWORD *)v615 + 11);
                if (v483)
                  v484 = v483 - 24;
                else
                  v484 = 0;
                v485 = *(uint64_t **)(v484 + 48);
                v486 = v475[8];
                v487 = (llvm::AttributeList *)(*((_QWORD *)v475 + 3) + 112);
                v488 = (unsigned int *)llvm::AttributeList::getParamByValType(v487, v486);
                v489 = llvm::AttributeList::getParamAlignment(v487, v486);
                v490 = (char *)operator new(0x68uLL);
                v491 = (uint64_t *)(v490 + 32);
                *((_DWORD *)v490 + 13) = *((_DWORD *)v490 + 13) & 0x38000000 | 1;
                *(_QWORD *)v490 = 0;
                *((_QWORD *)v490 + 1) = 0;
                *((_QWORD *)v490 + 2) = 0;
                *((_QWORD *)v490 + 3) = v490 + 32;
                v634 = v485;
                v638 = (llvm::Type *)v490;
                if (v485)
                  v492 = (uint64_t)(v485 - 3);
                else
                  v492 = 0;
                v493 = (llvm::Type *)*((unsigned int *)v605 + 69);
                v494 = v489;
                v682[0] = 257;
                v630 = v492;
                llvm::AllocaInst::AllocaInst((uint64_t)(v490 + 32), (llvm::PointerType *)v488, v493, 0, v489, (uint64_t)&v678, v492);
                v669 = 0;
                v668 = 0;
                v496 = ***(_QWORD ***)v221;
                v497 = *(llvm::ConstantInt **)(v496 + 1960);
                LODWORD(v679) = *(_DWORD *)(v496 + 1968) >> 8;
                if (v679 > 0x40)
                  llvm::APInt::initSlowCase((llvm::APInt *)&v678, 0, 0);
                else
                  v678 = 0;
                v498 = llvm::ConstantInt::get(v497, (llvm::LLVMContext *)&v678, v495);
                if (v679 >= 0x41 && v678)
                  MEMORY[0x1CAA32F9C](v678, 0x1000C8000313F17);
                v668 = v498;
                v669 = 0;
                v499 = llvm::DataLayout::getStructLayout(v245, (llvm::StructType *)v488);
                v629 = v488[3];
                if ((_DWORD)v629)
                {
                  v501 = 0;
                  v624 = (char *)v499 + 16;
                  v626 = 1 << v494;
                  v502 = (uint64_t ***)((char *)v638 + 40);
                  while (1)
                  {
                    v503 = ***(_QWORD ***)v221;
                    v504 = *(llvm::ConstantInt **)(v503 + 1960);
                    v505 = *(unsigned int *)(v503 + 1968);
                    LODWORD(v679) = v505 >> 8;
                    if (v505 >> 8 > 0x40)
                    {
                      llvm::APInt::initSlowCase((llvm::APInt *)&v678, v501, 0);
                    }
                    else
                    {
                      if (v505 <= 0xFF)
                        v506 = 0;
                      else
                        v506 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v505);
                      v678 = (void *)(v506 & v501);
                    }
                    v507 = v641;
                    v508 = llvm::ConstantInt::get(v504, (llvm::LLVMContext *)&v678, v500);
                    if (v679 >= 0x41 && v678)
                      MEMORY[0x1CAA32F9C](v678, 0x1000C8000313F17);
                    v669 = (uint64_t)v508;
                    if ((*((_BYTE *)v638 + 55) & 0x10) == 0)
                    {
                      v518 = 0;
                      v519 = (llvm::LLVMContext *)&byte_1C871356D;
                      goto LABEL_835;
                    }
                    v509 = **(_QWORD **)*v491;
                    v510 = *(_QWORD *)(v509 + 152);
                    v511 = *(unsigned int *)(v509 + 168);
                    if (!(_DWORD)v511)
                      goto LABEL_833;
                    LODWORD(v512) = (v511 - 1) & ((v491 >> 4) ^ (v491 >> 9));
                    v513 = (uint64_t **)(v510 + 16 * v512);
                    v514 = *v513;
                    if (*v513 != v491)
                      break;
LABEL_834:
                    v517 = (llvm::LLVMContext **)v513[1];
                    v520 = *v517;
                    v519 = (llvm::LLVMContext *)(v517 + 2);
                    v518 = v520;
LABEL_835:
                    v694 = 773;
                    v691[0] = v519;
                    v691[1] = v518;
                    v692 = (llvm::MDNode *)".";
                    v678 = v691;
                    v641 = v641 & 0xFFFFFFFF00000000 | v501;
                    v680 = v507 & 0xFFFFFFFF00000000 | v501;
                    v682[0] = 2050;
                    v521 = operator new(0xB0uLL);
                    v522 = v521;
                    v523 = 0;
                    v524 = (llvm::Value *)(v521 + 24);
                    v521[29] = v521[29] & 0x38000000 | 3;
                    do
                    {
                      v525 = &v521[v523];
                      *v525 = 0;
                      v525[1] = 0;
                      v525[2] = 0;
                      v525[3] = v524;
                      v523 += 8;
                    }
                    while (v523 != 24);
                    sub_1C4774650((llvm::GetElementPtrInst *)v488, v491, (llvm::Value *)&v668, 2);
                    *(_OWORD *)(v522 + 30) = 0u;
                    v527 = v522 + 30;
                    *((_QWORD *)v522 + 12) = v528;
                    *((_QWORD *)v522 + 13) = 0;
                    v529 = v522[29] & 0xC0000000 | 3;
                    v522[28] = 62;
                    v522[29] = v529;
                    *(_OWORD *)(v522 + 34) = 0u;
                    v522[38] = 0;
                    v530 = v634;
                    if (v634)
                    {
                      v554 = v634[2];
                      *((_QWORD *)v522 + 17) = v554;
                      *(_WORD *)(v554 + 18) &= ~0x8000u;
                      if ((*((_BYTE *)v522 + 119) & 0x10) != 0)
                      {
                        v556 = *(_QWORD *)(v554 + 56);
                        if (v556)
                        {
                          v557 = *(llvm::ValueSymbolTable **)(v556 + 104);
                          if (v557)
                          {
                            llvm::ValueSymbolTable::reinsertValue(v557, v524);
                            v530 = v634;
                          }
                        }
                      }
                      v555 = *v530;
                      *((_QWORD *)v522 + 15) = *v530;
                      *((_QWORD *)v522 + 16) = v530;
                      *(_QWORD *)(v555 + 8) = v527;
                      *v530 = (uint64_t)v527;
                    }
                    *((_QWORD *)v522 + 20) = v488;
                    v531 = 8;
                    v532 = (llvm::GetElementPtrInst *)v488;
                    do
                    {
                      if (v531 == 16)
                        break;
                      v532 = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(v532, *(llvm::Type **)((char *)&v668 + v531), v526);
                      v531 += 8;
                    }
                    while (v532);
                    *((_QWORD *)v522 + 21) = v532;
                    v533 = v522[29] & 0x7FFFFFF;
                    v534 = -v533;
                    v535 = (uint64_t **)((char *)v524 - 32 * v533);
                    if (*v535)
                    {
                      v558 = (char *)v524 + 32 * v534;
                      v560 = (_QWORD *)*((_QWORD *)v558 + 2);
                      v559 = v558 + 16;
                      *v560 = *(v559 - 1);
                      v561 = *(v559 - 1);
                      if (v561)
                        *(_QWORD *)(v561 + 16) = *v559;
                    }
                    *v535 = v491;
                    v536 = *v502;
                    v537 = (char *)v524 + 32 * v534;
                    *((_QWORD *)v537 + 1) = *v502;
                    if (v536)
                      v536[2] = (uint64_t *)(v537 + 8);
                    *((_QWORD *)v537 + 2) = v502;
                    *v502 = v535;
                    sub_1C5382FD4((uint64_t)&v687, (uint64_t *)&v668, v670, (uint64_t)v524 - 32 * (v522[29] & 0x7FFFFFF) + 32);
                    llvm::Value::setName((uint64_t ***)v524, (uint64_t)&v678);
                    if ((*((_BYTE *)v475 + 23) & 0x10) == 0)
                    {
                      v547 = 0;
                      v548 = (llvm::LLVMContext *)&byte_1C871356D;
                      goto LABEL_853;
                    }
                    v538 = ***(_QWORD ***)v475;
                    v539 = *(_QWORD *)(v538 + 152);
                    v540 = *(unsigned int *)(v538 + 168);
                    if (!(_DWORD)v540)
                      goto LABEL_851;
                    LODWORD(v541) = (v540 - 1) & ((v475 >> 4) ^ (v475 >> 9));
                    v542 = (int **)(v539 + 16 * v541);
                    v543 = *v542;
                    if (*v542 != v475)
                    {
                      v544 = 1;
                      while (v543 != (int *)-4096)
                      {
                        v545 = v541 + v544++;
                        v541 = v545 & (v540 - 1);
                        v543 = *(int **)(v539 + 16 * v541);
                        if (v543 == v475)
                        {
                          v542 = (int **)(v539 + 16 * v541);
                          goto LABEL_852;
                        }
                      }
LABEL_851:
                      v542 = (int **)(v539 + 16 * v540);
                    }
LABEL_852:
                    v546 = (llvm::LLVMContext **)v542[1];
                    v549 = *v546;
                    v548 = (llvm::LLVMContext *)(v546 + 2);
                    v547 = v549;
LABEL_853:
                    v694 = 773;
                    v691[0] = v548;
                    v691[1] = v547;
                    v692 = (llvm::MDNode *)".";
                    v237 = v501 | v237 & 0xFFFFFFFF00000000;
                    v678 = v691;
                    v680 = v237;
                    v682[0] = 2050;
                    llvm::Value::setName((uint64_t ***)v474, (uint64_t)&v678);
                    v550 = __clz((*(_QWORD *)&v624[8 * v501] | v626) & -(*(_QWORD *)&v624[8 * v501] | v626));
                    v551 = operator new(0x80uLL);
                    v551[21] = v551[21] & 0x38000000 | 2;
                    *(_QWORD *)v551 = 0;
                    *((_QWORD *)v551 + 1) = 0;
                    *((_QWORD *)v551 + 2) = 0;
                    *((_QWORD *)v551 + 3) = v551 + 16;
                    *((_QWORD *)v551 + 4) = 0;
                    *((_QWORD *)v551 + 5) = 0;
                    *((_QWORD *)v551 + 6) = 0;
                    *((_QWORD *)v551 + 7) = v551 + 16;
                    v552 = 63 - v550;
                    v553 = (llvm::Value *)((char *)v474 + 40);
                    llvm::StoreInst::StoreInst((uint64_t)(v551 + 16), (uint64_t)v474, (uint64_t)v524, 0, v552, v630);
                    ++v501;
                    v474 = (llvm::Value *)((char *)v474 + 40);
                    v221 = v639;
                    if (v501 == v629)
                      goto LABEL_887;
                  }
                  v515 = 1;
                  while (v514 != (uint64_t *)-4096)
                  {
                    v516 = v512 + v515++;
                    v512 = v516 & (v511 - 1);
                    v514 = *(uint64_t **)(v510 + 16 * v512);
                    if (v514 == v491)
                    {
                      v513 = (uint64_t **)(v510 + 16 * v512);
                      goto LABEL_834;
                    }
                  }
LABEL_833:
                  v513 = (uint64_t **)(v510 + 16 * v511);
                  goto LABEL_834;
                }
                v553 = v474;
LABEL_887:
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v475, (llvm::Value *)v491, (llvm::Value *)1);
                llvm::Value::takeName((llvm::Value *)v491, (llvm::Value *)v475);
                v474 = v553;
                v245 = (llvm::DataLayout *)(v605 + 34);
                v477 = v618;
LABEL_925:
                v475 += 10;
                if (v475 == v477)
                  goto LABEL_930;
                continue;
              }
              break;
            }
            if (*((_QWORD *)v475 + 1))
            {
              v668 = (void *)1;
              for (n = 8; n != 72; n += 16)
                *(void **)((char *)&v668 + n) = (void *)0x7FFFFFFFFFFFFFFFLL;
              v563 = sub_1C5673A20((uint64_t)&v647, (uint64_t)v475);
              v564 = *(unsigned int *)(v563 + 16);
              if ((_DWORD)v564)
              {
                v565 = *(llvm::MDNode **)(v563 + 8);
                v566 = (llvm::MDNode *)((char *)v565 + 32 * v564);
                while (1)
                {
                  if ((*((_BYTE *)v475 + 23) & 0x10) == 0)
                  {
                    v576 = 0;
                    v577 = &byte_1C871356D;
                    goto LABEL_881;
                  }
                  v567 = ***(_QWORD ***)v475;
                  v568 = *(_QWORD *)(v567 + 152);
                  v569 = *(unsigned int *)(v567 + 168);
                  if (!(_DWORD)v569)
                    goto LABEL_879;
                  LODWORD(v570) = (v569 - 1) & ((v475 >> 4) ^ (v475 >> 9));
                  v571 = (int **)(v568 + 16 * v570);
                  v572 = *v571;
                  if (*v571 != v475)
                    break;
LABEL_880:
                  v575 = v571[1];
                  v578 = *(llvm::ValueHandleBase **)v575;
                  v577 = (char *)(v575 + 4);
                  v576 = v578;
LABEL_881:
                  v690 = 773;
                  v687 = (uint64_t)v577;
                  v688 = v576;
                  v689 = ".";
                  v691[0] = (llvm::LLVMContext *)&v687;
                  v692 = v565;
                  v694 = 3330;
                  v678 = v691;
                  v680 = (unint64_t)".val";
                  v682[0] = 770;
                  llvm::Value::setName((uint64_t ***)v474, (uint64_t)&v678);
                  v579 = *(void **)v565;
                  v678 = v579;
                  v679 = v474;
                  v691[0] = 0;
                  if ((sub_1C5673E00((uint64_t)&v668, (uint64_t)v579, v691) & 1) == 0)
                  {
                    v580 = sub_1C5673EB0(&v668, (uint64_t *)&v678, (_QWORD *)v691[0]);
                    *v580 = v579;
                    v580[1] = v474;
                  }
                  v474 = (llvm::Value *)((char *)v474 + 40);
                  v565 = (llvm::MDNode *)((char *)v565 + 32);
                  if (v565 == v566)
                    goto LABEL_888;
                }
                v573 = 1;
                while (v572 != (int *)-4096)
                {
                  v574 = v570 + v573++;
                  v570 = v574 & (v569 - 1);
                  v572 = *(int **)(v568 + 16 * v570);
                  if (v572 == v475)
                  {
                    v571 = (int **)(v568 + 16 * v570);
                    goto LABEL_880;
                  }
                }
LABEL_879:
                v571 = (int **)(v568 + 16 * v569);
                goto LABEL_880;
              }
LABEL_888:
              v581 = &v680;
              v678 = &v680;
              v679 = (void *)0x1000000000;
              v691[0] = (llvm::LLVMContext *)&v692;
              v691[1] = (llvm::LLVMContext *)0x1000000000;
              v582 = *((_QWORD *)v475 + 1);
LABEL_889:
              sub_1C567207C((unsigned int *)&v678, (uint64_t)v581, v582, 0);
              while ((_DWORD)v679)
              {
                v583 = *((_QWORD *)v678 + v679 - 1);
                LODWORD(v679) = (_DWORD)v679 - 1;
                v584 = *(unsigned __int8 *)(v583 + 16);
                if (v584 == 77 || v584 == 62)
                {
                  v591 = LODWORD(v691[1]);
                  if (LODWORD(v691[1]) >= (unint64_t)HIDWORD(v691[1]))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v691, (uint64_t)&v692, LODWORD(v691[1]) + 1, 8);
                    v591 = LODWORD(v691[1]);
                  }
                  *((_QWORD *)v691[0] + v591) = v583;
                  ++LODWORD(v691[1]);
                  v582 = *(_QWORD *)(v583 + 8);
                  v581 = (unint64_t *)((char *)v678 + 8 * v679);
                  goto LABEL_889;
                }
                if (v584 != 60)
                  v583 = 0;
                if (v583)
                {
                  v585 = *(uint64_t **)(v583 - 32);
                  LODWORD(v688) = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)v245, *v585);
                  if (v688 > 0x40)
                    llvm::APInt::initSlowCase((llvm::APInt *)&v687, 0, 0);
                  else
                    v687 = 0;
                  llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)v585, v245, (const void **)&v687, 1, 0, 0, v586);
                  if (v688 > 0x40)
                    v587 = *(_QWORD *)v687;
                  else
                    v587 = v687 << -(uint64_t)v688 >> -(uint64_t)v688;
                  v663 = (llvm::SmallPtrSetImplBase *)v587;
                  *(_QWORD *)&__src = 0;
                  if (sub_1C5673E00((uint64_t)&v668, v587, &__src))
                  {
                    v588 = *(llvm::Value **)(__src + 8);
                  }
                  else
                  {
                    v590 = sub_1C5673EB0(&v668, (uint64_t *)&v663, (_QWORD *)__src);
                    v588 = 0;
                    *v590 = v587;
                    v590[1] = 0;
                  }
                  llvm::Value::doRAUW((llvm::ValueAsMetadata *)v583, v588, (llvm::Value *)1);
                  v589 = LODWORD(v691[1]);
                  if (LODWORD(v691[1]) >= (unint64_t)HIDWORD(v691[1]))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v691, (uint64_t)&v692, LODWORD(v691[1]) + 1, 8);
                    v589 = LODWORD(v691[1]);
                  }
                  *((_QWORD *)v691[0] + v589) = v583;
                  ++LODWORD(v691[1]);
                  if (v688 >= 0x41 && v687)
                    MEMORY[0x1CAA32F9C](v687, 0x1000C8000313F17);
                }
              }
              v592 = v691[0];
              if (LODWORD(v691[1]))
              {
                v593 = 8 * LODWORD(v691[1]);
                do
                {
                  v594 = *(_QWORD *)v592;
                  v592 = (llvm::LLVMContext *)((char *)v592 + 8);
                  v595 = llvm::UndefValue::get(*(llvm::UndefValue **)v594, v481);
                  llvm::Value::doRAUW((llvm::ValueAsMetadata *)v594, v595, (llvm::Value *)1);
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v594 + 40) + 40, (uint64_t ***)v594);
                  v596 = *(_QWORD *)(v594 + 24);
                  v597 = *(_QWORD **)(v594 + 32);
                  *v597 = v596;
                  *(_QWORD *)(v596 + 8) = v597;
                  *(_QWORD *)(v594 + 24) = 0;
                  *(_QWORD *)(v594 + 32) = 0;
                  llvm::Value::deleteValue((llvm::Value *)v594);
                  v593 -= 8;
                }
                while (v593);
                v592 = v691[0];
              }
              if (v592 != (llvm::LLVMContext *)&v692)
                free(v592);
              if (v678 != &v680)
                free(v678);
              if ((v668 & 1) == 0)
                MEMORY[0x1CAA32FB4](v669, 8);
            }
            v598 = llvm::UndefValue::get(*(llvm::UndefValue **)v475, v481);
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v475, v598, (llvm::Value *)1);
            goto LABEL_925;
          }
        }
        else
        {
          v240 = 0;
        }
        v241 = 0;
        goto LABEL_442;
      }
    }
    v58 = *(unsigned int *)(v38 + 12);
    if (a4 && v58 > a4)
      goto LABEL_260;
    v695 = &v697;
    v696 = (void *)0x400000000;
    sub_1C4F7C758((unsigned int *)&v695, (uint64_t)&v697, *(char **)(v38 + 16), (char *)(*(_QWORD *)(v38 + 16) + 8 * v58));
    if ((_DWORD)v696)
    {
      v59 = 8 * v696;
      v60 = (char *)v695;
      while (1)
      {
        if ((*(_DWORD *)(*(_QWORD *)v60 + 8) & 0xFE) != 0x12)
        {
          v61 = *(_DWORD *)(*(_QWORD *)v60 + 8);
          v150 = v61 > 0x15;
          v62 = (1 << v61) & 0x20AC7F;
          if (v150 || v62 == 0)
            break;
        }
        v60 += 8;
        v59 -= 8;
        if (!v59)
          goto LABEL_95;
      }
    }
    else
    {
LABEL_95:
      if (sub_1C5671FB8((uint64_t)v695, v696, *((_QWORD *)v11 + 1), v31))
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v642, (uint64_t)v32);
        v64 = 0;
        goto LABEL_98;
      }
    }
    v64 = 1;
LABEL_98:
    if (v695 != &v697)
      free(v695);
    if (!v64)
      goto LABEL_260;
    goto LABEL_101;
  }
  while (1)
  {
    v23 = *(_QWORD *)(v22 + 24);
    v24 = *(unsigned __int8 *)(v23 + 16);
    if (v24 < 0x1C)
      break;
    v25 = v24 - 33 > 0x33 || ((1 << (v24 - 33)) & 0x8000000000041) == 0;
    if (v25
      || v23 - 32 != v22
      || *(_QWORD *)(v23 + 72) != *((_QWORD *)v11 + 3)
      || v24 == 84 && (*(_WORD *)(v23 + 18) & 3) == 2)
    {
      break;
    }
    a7 |= *(_QWORD *)(*(_QWORD *)(v23 + 40) + 56) == (_QWORD)v11;
    v22 = *(_QWORD *)(v22 + 8);
    if (!v22)
      goto LABEL_30;
  }
LABEL_37:
  v14 = 0;
LABEL_945:
  if (v672 != v674)
    free(v672);
  return v14;
}

void llvm::initializeArgPromotionPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(qword_1ED831A10);
  if (v2 != -1)
  {
    v5[0] = sub_1C5671E44;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(qword_1ED831A10, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5671E44(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeCallGraphWrapperPassPass(a1, v2);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Promote 'by reference' arguments to scalars";
  *(_QWORD *)(v3 + 8) = 43;
  *(_QWORD *)(v3 + 16) = "argpromotion";
  *(_QWORD *)(v3 + 24) = 12;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F3022;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C56741B0;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5671EF0(uint64_t a1, int a2)
{
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F3022;
  *(_QWORD *)a1 = &off_1E8172610;
  *(_DWORD *)(a1 + 24) = 3;
  *(_DWORD *)(a1 + 28) = a2;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(qword_1ED831A10);
  if (v4 != -1)
  {
    v8[0] = sub_1C5671E44;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(qword_1ED831A10, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5671FB8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD v14[2];

  v14[0] = a1;
  v14[1] = a2;
  if (!a3)
    return 1;
  v5 = a3;
  while (1)
  {
    v6 = *(_QWORD *)(v5 + 24);
    v7 = *(unsigned __int8 *)(v6 + 16);
    if (v7 < 0x1C)
      break;
    v8 = v7 - 33;
    v9 = v8 > 0x33;
    v10 = (1 << v8) & 0x8000000000041;
    if (v9 || v10 == 0)
      break;
    v12 = *(_QWORD *)(v6 - 32);
    if (!v12 || *(_BYTE *)(v12 + 16) || *(_QWORD *)(v12 + 24) != *(_QWORD *)(v6 + 72))
      v12 = 0;
    if (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD *))(*(_QWORD *)*a4 + 1040))(*a4, *(_QWORD *)(*(_QWORD *)(v6 + 40) + 56), v12, v14) & 1) == 0)break;
    v5 = *(_QWORD *)(v5 + 8);
    if (!v5)
      return 1;
  }
  return 0;
}

uint64_t sub_1C567207C(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v17;

  v5 = a3;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 3;
  v9 = a1[2];
  if (*(_QWORD *)a1 + 8 * v9 == a2)
  {
    sub_1C528A680(a1, a3, a4);
    return *(_QWORD *)a1 + 8 * v8;
  }
  else
  {
    if (a3 == a4)
    {
      v10 = 0;
    }
    else
    {
      v10 = 0;
      v11 = a3;
      do
      {
        ++v10;
        v11 = *(_QWORD *)(v11 + 8);
      }
      while (v11 != a4);
    }
    if (v10 + v9 > a1[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v10 + v9, 8);
      v7 = *(_QWORD *)a1;
      v9 = a1[2];
    }
    v12 = (_BYTE *)(v7 + 8 * v8);
    v13 = (char *)(v7 + 8 * v9);
    v14 = (v13 - v12) >> 3;
    if (v14 >= v10)
    {
      sub_1C6177054(a1, &v13[-8 * v10], (char *)(v7 + 8 * v9));
      if (&v13[-8 * v10] != v12)
        memmove(&v12[8 * v10], v12, &v13[-8 * v10] - v12);
      if (v5 != a4)
      {
        v17 = v12;
        do
        {
          *v17++ = *(_QWORD *)(v5 + 24);
          v5 = *(_QWORD *)(v5 + 8);
        }
        while (v5 != a4);
      }
    }
    else
    {
      a1[2] = v9 + v10;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 8 * (v9 + v10) - 8 * v14), v12, v13 - v12);
        v15 = v12;
        do
        {
          *v15++ = *(_QWORD *)(v5 + 24);
          v5 = *(_QWORD *)(v5 + 8);
          --v14;
        }
        while (v14);
      }
      while (v5 != a4)
      {
        *(_QWORD *)v13 = *(_QWORD *)(v5 + 24);
        v13 += 8;
        v5 = *(_QWORD *)(v5 + 8);
      }
    }
  }
  return (uint64_t)v12;
}

uint64_t sub_1C56721F8(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  __int16 v7;
  uint64_t *v8;
  llvm::DataLayout *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v26;
  int v27;
  unsigned int v28;
  char v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  _BYTE *v36;
  unsigned int v37;
  const void *v38;
  unsigned int IndexTypeSizeInBits;
  uint64_t v40;

  v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 == 60 || v6 == 61)
  {
    v7 = *(_WORD *)(a2 + 18);
    if ((v7 & 0x380) != 0 || (v7 & 1) != 0)
    {
LABEL_16:
      v12 = 0;
      v13 = 1;
      return v12 | (v13 << 8);
    }
  }
  else if ((v6 - 63) < 3 || (*(_WORD *)(a2 + 18) & 1) != 0)
  {
    goto LABEL_16;
  }
  v8 = *(uint64_t **)(a2 - 32);
  v9 = *(llvm::DataLayout **)a1;
  IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(*(_QWORD *)a1, *v8);
  if (IndexTypeSizeInBits > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v38, 0, 0);
    v9 = *(llvm::DataLayout **)a1;
  }
  else
  {
    v38 = 0;
  }
  v11 = llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)v8, v9, &v38, 1, 0, 0, v10);
  v12 = 0;
  v13 = 0;
  if (v11 == **(_QWORD **)(a1 + 8))
  {
    v14 = IndexTypeSizeInBits;
    if (v14 - sub_1C4959174((llvm::APInt *)&v38) - 63 < 0xFFFFFFC0)
      goto LABEL_34;
    v15 = *(_QWORD *)a2;
    sub_1C4768AD0(*(_QWORD *)a1, *(_QWORD *)a2);
    if (v17 == 1)
      goto LABEL_34;
    v18 = v16;
    if (**(_BYTE **)(a1 + 16))
    {
      if (*(_BYTE *)(v15 + 8) == 15)
        goto LABEL_34;
    }
    if (IndexTypeSizeInBits > 0x40)
      v19 = *(_QWORD *)v38;
    else
      v19 = (uint64_t)((_QWORD)v38 << -(uint64_t)IndexTypeSizeInBits) >> -(uint64_t)IndexTypeSizeInBits;
    v21 = *(_DWORD **)(a1 + 24);
    v22 = *(unsigned __int16 *)(a2 + 18);
    if (a3)
      v23 = a2;
    else
      v23 = 0;
    v40 = 0;
    v24 = sub_1C5672574((uint64_t)v21, v19, &v40);
    v25 = v40;
    if ((v24 & 1) != 0)
    {
LABEL_31:
      v30 = **(_DWORD **)(a1 + 32);
      if (v30 && v30 <= **(_DWORD **)(a1 + 24) >> 1 || *(_QWORD *)(v25 + 8) != v15)
        goto LABEL_34;
      if ((a3 & 1) != 0
        || v24
        && (__clz(1 << ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1)) ^ 0x3F) <= *(unsigned __int8 *)(v25 + 16))
      {
LABEL_40:
        v12 = 1;
        v31 = __clz(1 << ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1)) ^ 0x3F;
        if (*(unsigned __int8 *)(v25 + 16) > v31)
          LOBYTE(v31) = *(_BYTE *)(v25 + 16);
        *(_BYTE *)(v25 + 16) = v31;
        goto LABEL_35;
      }
      if ((v19 & 0x8000000000000000) == 0)
      {
        v32 = *(unsigned __int16 *)(a2 + 18);
        if ((v19 & ~(-1 << (v32 >> 1))) == 0)
        {
          v33 = (v32 >> 1) & 0x3F;
          v34 = *(unint64_t **)(a1 + 40);
          v35 = v19 + ((unint64_t)(v18 + 7) >> 3);
          if (*v34 > v35)
            v35 = *v34;
          *v34 = v35;
          v36 = *(_BYTE **)(a1 + 48);
          v37 = __clz(1 << v33) ^ 0x3F;
          if (*v36 > v37)
            LOBYTE(v37) = *v36;
          *v36 = v37;
          goto LABEL_40;
        }
      }
LABEL_34:
      v12 = 0;
LABEL_35:
      v13 = 1;
      goto LABEL_36;
    }
    v26 = __clz(1 << (v22 >> 1));
    v27 = *v21 >> 1;
    if ((*v21 & 1) != 0)
      v28 = 4;
    else
      v28 = v21[4];
    v29 = v26 ^ 0x3F;
    if (4 * v27 + 4 >= 3 * v28)
    {
      v28 *= 2;
    }
    else if (v28 + ~v27 - v21[1] > v28 >> 3)
    {
LABEL_28:
      *v21 += 2;
      if (*(_QWORD *)v25 != 0x7FFFFFFFFFFFFFFFLL)
        --v21[1];
      *(_QWORD *)v25 = v19;
      *(_QWORD *)(v25 + 8) = v15;
      *(_BYTE *)(v25 + 16) = v29;
      *(_QWORD *)(v25 + 24) = v23;
      goto LABEL_31;
    }
    sub_1C567261C((uint64_t)v21, v28);
    v40 = 0;
    sub_1C5672574((uint64_t)v21, v19, &v40);
    v25 = v40;
    goto LABEL_28;
  }
LABEL_36:
  if (IndexTypeSizeInBits >= 0x41 && v38)
    MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
  return v12 | (v13 << 8);
}

uint64_t sub_1C5672574(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & (37 * a2);
  v7 = (_QWORD *)(v3 + 32 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_13:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != 0x7FFFFFFFFFFFFFFFLL)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == 0x8000000000000000;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 32 * v6);
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_13;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

uint64_t sub_1C567261C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v15 = a2;
      *(_QWORD *)(a1 + 8) = operator new(32 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v15;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C56727A0(a1, v6, v6 + 32 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v16;
  do
  {
    v10 = a1 + v8;
    v11 = *(_QWORD *)(a1 + v8 + 8);
    if ((unint64_t)(v11 - 0x7FFFFFFFFFFFFFFFLL) >= 2)
    {
      *(_QWORD *)v9 = v11;
      v12 = *(_OWORD *)(v10 + 16);
      *((_QWORD *)v9 + 3) = *(_QWORD *)(v10 + 32);
      *(_OWORD *)(v9 + 8) = v12;
      v9 += 32;
    }
    v8 += 32;
  }
  while (v8 != 128);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v13 = a2;
    *(_QWORD *)(a1 + 8) = operator new(32 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v13;
  }
  return sub_1C56727A0(a1, (uint64_t)v16, (uint64_t)v9);
}

uint64_t sub_1C56727A0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  _QWORD *v13;

  v4 = a2;
  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 136);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_5;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[4 * v7];
  }
  do
  {
    *v8 = 0x7FFFFFFFFFFFFFFFLL;
    v8 += 4;
  }
  while (v8 != v9);
LABEL_5:
  if (a2 != a3)
  {
    do
    {
      v10 = *(_QWORD *)v4;
      if ((unint64_t)(*(_QWORD *)v4 - 0x7FFFFFFFFFFFFFFFLL) >= 2)
      {
        v13 = 0;
        result = sub_1C5672574((uint64_t)v5, v10, &v13);
        v11 = v13;
        *v13 = *(_QWORD *)v4;
        v12 = *(_OWORD *)(v4 + 8);
        v11[3] = *(_QWORD *)(v4 + 24);
        *(_OWORD *)(v11 + 1) = v12;
        *v5 += 2;
      }
      v4 += 32;
    }
    while (v4 != a3);
  }
  return result;
}

void sub_1C5672870(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  BOOL v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  BOOL v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 *v87;
  __int128 v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;

uint64_t *sub_1C56731D4(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *a2;
  v4 = *result;
  v5 = *a3;
  if (*a2 >= *result)
  {
    if (v5 < v3)
    {
      *a2 = v5;
      *a3 = v3;
      v10 = a2[3];
      v11 = *(_OWORD *)(a2 + 1);
      v12 = a3[3];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 1);
      a2[3] = v12;
      *(_OWORD *)(a3 + 1) = v11;
      a3[3] = v10;
      v13 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        *a2 = v13;
        v14 = result[3];
        v15 = *(_OWORD *)(result + 1);
        v16 = a2[3];
        *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 1);
        result[3] = v16;
        *(_OWORD *)(a2 + 1) = v15;
        a2[3] = v14;
      }
    }
  }
  else
  {
    v6 = (__int128 *)(result + 1);
    if (v5 >= v3)
    {
      *result = v3;
      *a2 = v4;
      v17 = result[3];
      v18 = *v6;
      v19 = a2[3];
      *v6 = *(_OWORD *)(a2 + 1);
      result[3] = v19;
      *(_OWORD *)(a2 + 1) = v18;
      a2[3] = v17;
      v20 = *a2;
      if (*a3 >= *a2)
        return result;
      *a2 = *a3;
      *a3 = v20;
      v7 = a2[3];
      v8 = *(_OWORD *)(a2 + 1);
      v21 = a3[3];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 1);
      a2[3] = v21;
    }
    else
    {
      *result = v5;
      *a3 = v4;
      v7 = result[3];
      v8 = *v6;
      v9 = a3[3];
      *v6 = *(_OWORD *)(a3 + 1);
      result[3] = v9;
    }
    *(_OWORD *)(a3 + 1) = v8;
    a3[3] = v7;
  }
  return result;
}

BOOL sub_1C56732F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_QWORD *)(a2 - 32);
      v7 = *(_QWORD *)a1;
      if (v6 < *(_QWORD *)a1)
      {
        *(_QWORD *)a1 = v6;
        *(_QWORD *)(a2 - 32) = v7;
        v8 = *(_QWORD *)(a1 + 24);
        v9 = *(_OWORD *)(a1 + 8);
        v10 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 24) = v10;
        *(_OWORD *)(a2 - 24) = v9;
        *(_QWORD *)(a2 - 8) = v8;
      }
      return result;
    case 3:
      sub_1C56731D4((uint64_t *)a1, (uint64_t *)(a1 + 32), (uint64_t *)(a2 - 32));
      return 1;
    case 4:
      sub_1C5673588(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      sub_1C5673588(a1, a1 + 32, a1 + 64, a1 + 96);
      v20 = *(_QWORD *)(a2 - 32);
      v21 = *(_QWORD *)(a1 + 96);
      if (v20 < v21)
      {
        *(_QWORD *)(a1 + 96) = v20;
        *(_QWORD *)(a2 - 32) = v21;
        v22 = *(_QWORD *)(a1 + 120);
        v23 = *(_OWORD *)(a1 + 104);
        v24 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 120) = v24;
        *(_OWORD *)(a2 - 24) = v23;
        *(_QWORD *)(a2 - 8) = v22;
        v25 = *(_QWORD *)(a1 + 96);
        v26 = *(_QWORD *)(a1 + 64);
        if (v25 < v26)
        {
          *(_QWORD *)(a1 + 64) = v25;
          v27 = *(_QWORD *)(a1 + 88);
          v28 = *(_OWORD *)(a1 + 72);
          *(_OWORD *)(a1 + 72) = *(_OWORD *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 120);
          *(_QWORD *)(a1 + 96) = v26;
          *(_OWORD *)(a1 + 104) = v28;
          *(_QWORD *)(a1 + 120) = v27;
          v29 = *(_QWORD *)(a1 + 32);
          if (v25 < v29)
          {
            *(_QWORD *)(a1 + 32) = v25;
            v30 = *(_QWORD *)(a1 + 56);
            v31 = *(_OWORD *)(a1 + 40);
            *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 72);
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 88);
            *(_QWORD *)(a1 + 64) = v29;
            *(_OWORD *)(a1 + 72) = v31;
            *(_QWORD *)(a1 + 88) = v30;
            v32 = *(_QWORD *)a1;
            if (v25 < *(_QWORD *)a1)
            {
              *(_QWORD *)a1 = v25;
              v33 = *(_QWORD *)(a1 + 24);
              v34 = *(_OWORD *)(a1 + 8);
              *(_OWORD *)(a1 + 8) = *(_OWORD *)(a1 + 40);
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 56);
              *(_QWORD *)(a1 + 32) = v32;
              *(_OWORD *)(a1 + 40) = v34;
              *(_QWORD *)(a1 + 56) = v33;
            }
          }
        }
      }
      return 1;
    default:
      v11 = (uint64_t *)(a1 + 64);
      sub_1C56731D4((uint64_t *)a1, (uint64_t *)(a1 + 32), (uint64_t *)(a1 + 64));
      v12 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(_QWORD *)v12;
    if (*(_QWORD *)v12 < *v11)
    {
      v35 = *(_OWORD *)(v12 + 8);
      v36 = *(_QWORD *)(v12 + 24);
      v16 = *v11;
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        *(_QWORD *)(v18 + 96) = v16;
        *(_OWORD *)(v18 + 104) = *(_OWORD *)(a1 + v17 + 72);
        *(_QWORD *)(v18 + 120) = *(_QWORD *)(a1 + v17 + 88);
        if (v17 == -64)
          break;
        v16 = *(_QWORD *)(v18 + 32);
        v17 -= 32;
        if (v15 >= v16)
        {
          v19 = (_QWORD *)(a1 + v17 + 96);
          goto LABEL_13;
        }
      }
      v19 = (_QWORD *)a1;
LABEL_13:
      *v19 = v15;
      *(_OWORD *)(v18 + 72) = v35;
      *(_QWORD *)(v18 + 88) = v36;
      if (++v14 == 8)
        return v12 + 32 == a2;
    }
    v11 = (uint64_t *)v12;
    v13 += 32;
    v12 += 32;
    if (v12 == a2)
      return 1;
  }
}

__n128 sub_1C5673588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_1C56731D4((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  v9 = *(_QWORD *)a3;
  if (*(_QWORD *)a4 < *(_QWORD *)a3)
  {
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v9;
    v10 = *(_QWORD *)(a3 + 24);
    result = *(__n128 *)(a3 + 8);
    v11 = *(_QWORD *)(a4 + 24);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
    *(_QWORD *)(a3 + 24) = v11;
    *(__n128 *)(a4 + 8) = result;
    *(_QWORD *)(a4 + 24) = v10;
    v12 = *(_QWORD *)a2;
    if (*(_QWORD *)a3 < *(_QWORD *)a2)
    {
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v12;
      v13 = *(_QWORD *)(a2 + 24);
      result = *(__n128 *)(a2 + 8);
      v14 = *(_QWORD *)(a3 + 24);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(a2 + 24) = v14;
      *(__n128 *)(a3 + 8) = result;
      *(_QWORD *)(a3 + 24) = v13;
      v15 = *(_QWORD *)a1;
      if (*(_QWORD *)a2 < *(_QWORD *)a1)
      {
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v15;
        v16 = *(_QWORD *)(a1 + 24);
        result = *(__n128 *)(a1 + 8);
        v17 = *(_QWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 24) = v17;
        *(__n128 *)(a2 + 8) = result;
        *(_QWORD *)(a2 + 24) = v16;
      }
    }
  }
  return result;
}

uint64_t sub_1C5673674(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 152 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v10 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v8 = v6;
        v13 = v5 + v9++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 152 * (v13 & v4));
        v7 = *v6;
        v10 = 1;
        if (*v6 == a3)
          goto LABEL_7;
      }
      v10 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v10 = 0;
  }
LABEL_7:
  *a4 = v6;
  return v10;
}

_QWORD *sub_1C567370C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(152 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C56737D0(a1, v4, v4 + 152 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = 152 * v10;
    do
    {
      *result = -4096;
      result += 19;
      v11 -= 152;
    }
    while (v11);
  }
  return result;
}

void sub_1C56737D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 152 * v6;
    do
    {
      *v7 = -4096;
      v7 += 19;
      v8 -= 152;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v13 = 0;
        sub_1C5673674(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v13);
        v10 = v13;
        *v13 = *(_QWORD *)v4;
        v10[2] = 0x400000000;
        v10[1] = v10 + 3;
        v11 = (uint64_t)(v10 + 1);
        if (*(_DWORD *)(v4 + 16))
          sub_1C56738C8(v11, (uint64_t *)(v4 + 8));
        ++*(_DWORD *)(a1 + 8);
        v12 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v12)
          free(v12);
      }
      v4 += 152;
    }
    while (v4 != a3);
  }
}

uint64_t sub_1C56738C8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  if ((uint64_t *)a1 != a2)
  {
    v5 = a2 + 2;
    v4 = *a2;
    if ((uint64_t *)*a2 != a2 + 2)
    {
      v6 = *(char **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v5;
      *((_DWORD *)a2 + 3) = 0;
      goto LABEL_21;
    }
    v7 = a2 + 1;
    v8 = *((unsigned int *)a2 + 2);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
      {
        v10 = v4 + 32 * v8;
        v11 = *(char **)a1;
        do
        {
          *(_QWORD *)v11 = *(_QWORD *)v4;
          v12 = *(_OWORD *)(v4 + 8);
          *((_QWORD *)v11 + 3) = *(_QWORD *)(v4 + 24);
          *(_OWORD *)(v11 + 8) = v12;
          v4 += 32;
          v11 += 32;
        }
        while (v4 != v10);
      }
      goto LABEL_20;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        v13 = v4 + 32 * v9;
        v14 = *(char **)a1;
        do
        {
          *(_QWORD *)v14 = *(_QWORD *)v4;
          v15 = *(_OWORD *)(v4 + 8);
          *((_QWORD *)v14 + 3) = *(_QWORD *)(v4 + 24);
          *(_OWORD *)(v14 + 8) = v15;
          v4 += 32;
          v14 += 32;
        }
        while (v4 != v13);
LABEL_18:
        v16 = *v7;
        if (v9 != v16)
          memcpy((void *)(*(_QWORD *)a1 + 32 * v9), (const void *)(*a2 + 32 * v9), *a2 + 32 * v16 - (*a2 + 32 * v9));
LABEL_20:
        *(_DWORD *)(a1 + 8) = v8;
LABEL_21:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 32);
    }
    v9 = 0;
    goto LABEL_18;
  }
  return a1;
}

uint64_t sub_1C5673A20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = 0;
  if (sub_1C5673C84(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v4))
    return v4;
  else
    return *(_QWORD *)a1 + 152 * *(unsigned int *)(a1 + 16);
}

char *sub_1C5673A78(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  _BYTE *v5;
  uint64_t v6;
  char *v7;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  _BYTE *v29;
  char *__srcb;

  v5 = *(_BYTE **)a1;
  v6 = a2 - *(_QWORD *)a1;
  v7 = (char *)(*(_QWORD *)a1 + (v6 & 0xFFFFFFFFFFFFFFF8));
  if (a5 < 1)
    return v7;
  v12 = *(uint64_t **)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  if (a5 > (v11 - (uint64_t)v12) >> 3)
  {
    v13 = a5 + (((char *)v12 - v5) >> 3);
    if (v13 >> 61)
      abort();
    v14 = v11 - (_QWORD)v5;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 61)
        sub_1C4764EE4();
      v16 = (char *)operator new(8 * v15);
    }
    else
    {
      v16 = 0;
    }
    v25 = &v16[8 * (v6 >> 3)];
    memcpy(v25, __src, 8 * a5);
    __srcb = v25;
    if ((unint64_t)v6 >= 8)
    {
      v26 = 8 * (v6 >> 3);
      do
      {
        *(_QWORD *)&v16[v26 - 8] = *(_QWORD *)&v5[v26 - 8];
        v26 -= 8;
      }
      while (v26);
      v12 = *(uint64_t **)(a1 + 8);
      v25 = v16;
    }
    v27 = &v16[8 * a5 + (v6 & 0xFFFFFFFFFFFFFFF8)];
    v28 = &v16[8 * v15];
    if (v12 != (uint64_t *)v7)
      memmove(v27, v7, (char *)v12 - v7);
    v29 = *(_BYTE **)a1;
    *(_QWORD *)a1 = v25;
    *(_QWORD *)(a1 + 8) = &v27[(char *)v12 - v7];
    *(_QWORD *)(a1 + 16) = v28;
    if (v29)
      operator delete(v29);
    return __srcb;
  }
  v17 = ((char *)v12 - v7) >> 3;
  if (v17 >= a5)
  {
    v18 = &__src[8 * a5];
    v20 = *(char **)(a1 + 8);
LABEL_18:
    v21 = &v7[8 * a5];
    v22 = (uint64_t *)&v20[-8 * a5];
    v23 = v20;
    if (v22 < v12)
    {
      v23 = v20;
      do
      {
        v24 = *v22++;
        *(_QWORD *)v23 = v24;
        v23 += 8;
      }
      while (v22 < v12);
    }
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(&v20[-8 * ((v20 - v21) >> 3)], v7, v20 - v21);
    if (v18 != __src)
      memmove(v7, __src, v18 - __src);
    return v7;
  }
  v18 = &__src[8 * v17];
  v19 = a4 - v18;
  if (a4 != v18)
    memmove(*(void **)(a1 + 8), &__src[8 * v17], a4 - v18);
  v20 = (char *)v12 + v19;
  *(_QWORD *)(a1 + 8) = (char *)v12 + v19;
  if ((char *)v12 - v7 >= 1)
    goto LABEL_18;
  return v7;
}

uint64_t sub_1C5673C84(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 152 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 152 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

uint64_t sub_1C5673D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v10;

  v7 = 0;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 120) = &unk_1E8167708;
  *(_QWORD *)(a1 + 64) = **(_QWORD **)a2;
  *(_QWORD *)(a1 + 72) = a1 + 120;
  *(_QWORD *)(a1 + 128) = &unk_1E8167A08;
  *(_QWORD *)(a1 + 8) = 0x200000000;
  *(_QWORD *)(a1 + 80) = a1 + 128;
  *(_QWORD *)(a1 + 88) = a3;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = 512;
  *(_BYTE *)(a1 + 102) = 7;
  *(_QWORD *)(a1 + 104) = a4;
  *(_QWORD *)(a1 + 112) = a5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = a2 + 24;
  v8 = *(unsigned __int8 **)(a2 + 48);
  v10 = v8;
  if (v8)
  {
    llvm::MetadataTracking::track((uint64_t)&v10, v8, 2);
    v7 = v10;
  }
  sub_1C4774EF4(a1, 0, (uint64_t)v7);
  if (v10)
    llvm::MetadataTracking::untrack((uint64_t)&v10, v10);
  return a1;
}

uint64_t sub_1C5673E00(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & (37 * a2);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != 0x7FFFFFFFFFFFFFFFLL)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == 0x8000000000000000;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_16;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C5673EB0(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 4;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_5;
  }
  sub_1C5673F74((uint64_t)a1, v6);
  v8 = 0;
  sub_1C5673E00((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_5:
  *a1 += 2;
  if (*a3 != 0x7FFFFFFFFFFFFFFFLL)
    --a1[1];
  return a3;
}

uint64_t sub_1C5673F74(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C56740F0(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((unint64_t)(v10 - 0x7FFFFFFFFFFFFFFFLL) >= 2)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C56740F0(a1, v14, v9);
}

uint64_t sub_1C56740F0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;

  v4 = a2;
  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_5;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = 0x7FFFFFFFFFFFFFFFLL;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_5:
  if (a2 != a3)
  {
    do
    {
      v10 = *v4;
      if ((unint64_t)(*v4 - 0x7FFFFFFFFFFFFFFFLL) >= 2)
      {
        v13 = 0;
        result = sub_1C5673E00((uint64_t)v5, v10, &v13);
        v11 = v13;
        v12 = v4[1];
        *v13 = *v4;
        v11[1] = v12;
        *v5 += 2;
      }
      v4 += 2;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t sub_1C56741B0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5671EF0(v0, 3);
}

void sub_1C56741E0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5674204(llvm::CallGraphSCCPass *a1, llvm *a2)
{
  llvm::AnalysisUsage *v4;

  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  llvm::getAAResultsAnalysisUsage(a2, v4);
  return llvm::CallGraphSCCPass::getAnalysisUsage(a1, a2);
}

uint64_t sub_1C567426C()
{
  return 0;
}

uint64_t sub_1C5674274(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  int64_t v8;
  char v9;
  uint64_t v10;
  llvm::Function *v11;
  uint64_t v12;
  char **v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  llvm::Function *v22;
  uint64_t v23;
  uint64_t **v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  llvm::Function *v32;
  llvm::Function *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  _QWORD **v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  int64_t v54;
  void *v56;
  char v57;
  uint64_t **v58;
  uint64_t v59;
  uint64_t *v60;
  _QWORD v62[2];
  char v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  char v71;
  char v72[56];
  char v73;
  uint64_t *v74[2];
  int v75;
  uint64_t v76[2];
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  llvm::Function *v81;

  if ((llvm::CallGraphSCCPass::skipSCC(a1, (uint64_t ****)a2) & 1) != 0)
  {
    LOBYTE(v3) = 0;
  }
  else
  {
    v4 = **(void ****)(a1 + 8);
    do
    {
      v5 = *v4;
      v4 += 2;
    }
    while (v5 != &llvm::CallGraphWrapperPass::ID);
    v6 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::CallGraphWrapperPass::ID)+ 32);
    v65 = a1;
    v66 = 0;
    v71 = 0;
    v72[0] = 0;
    v73 = 0;
    v3 = *(uint64_t **)(a2 + 16);
    v7 = *(uint64_t **)(a2 + 24);
    if (v3 == v7)
    {
      LOBYTE(v3) = 0;
    }
    else
    {
      v57 = 0;
      v8 = (char *)v7 - (char *)v3;
      v58 = (uint64_t **)(v6 + 8);
      do
      {
        v9 = 0;
        v59 = v8 & 0x7FFFFFFF0;
        v60 = v7;
        do
        {
          v10 = *v3;
          v11 = *(llvm::Function **)(*v3 + 8);
          if (v11)
          {
            v12 = v6;
            v64 = v6;
            v13 = **(char ****)(a1 + 8);
            do
            {
              v14 = *v13;
              v13 += 2;
            }
            while (v14 != llvm::TargetTransformInfoWrapperPass::ID);
            v15 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), llvm::TargetTransformInfoWrapperPass::ID);
            v74[0] = 0;
            v74[1] = 0;
            v75 = 0;
            v76[0] = 0;
            v76[1] = 0;
            v77 = 0;
            v78 = 0;
            v79 = 0;
            v80 = 0;
            v16 = *(_QWORD *)(v15 + 56);
            if (!v16)
            {
              sub_1C485C2F0();
              goto LABEL_67;
            }
            (*(void (**)(llvm::Function **__return_ptr, uint64_t, llvm::Function *))(*(_QWORD *)v16 + 48))(&v81, v16, v11);
            v17 = (unint64_t *)(v15 + 64);
            v18 = (unint64_t)v81;
            if (*(_BYTE *)(v15 + 72))
            {
              v81 = 0;
              v19 = *v17;
              *v17 = v18;
              if (v19)
              {
                (*(void (**)(unint64_t))(*(_QWORD *)v19 + 8))(v19);
                v20 = (unint64_t)v81;
                v81 = 0;
                if (v20)
                  (*(void (**)(unint64_t))(*(_QWORD *)v20 + 8))(v20);
              }
            }
            else
            {
              *(_QWORD *)(v15 + 64) = v81;
              *(_BYTE *)(v15 + 72) = 1;
            }
            MEMORY[0x1CAA32FB4](0, 8);
            sub_1C4D8B440(v76);
            sub_1C4D8B52C((uint64_t *)v74);
            v21 = *(_DWORD *)(a1 + 28);
            v62[0] = sub_1C56748EC;
            v62[1] = &v64;
            v63 = 1;
            v22 = sub_1C566E084(v11, (uint64_t (*)(uint64_t, llvm::Function *))sub_1C5674758, (uint64_t)&v65, v21, (uint64_t)v62, v17, v59 != 0);
            if (v22)
            {
              v81 = v22;
              v74[0] = (uint64_t *)&v81;
              v24 = sub_1C4DE25A0(v58, (unint64_t *)&v81, (uint64_t)&std::piecewise_construct, v74) + 5;
              v23 = (uint64_t)*v24;
              if (*v24)
              {
                v26 = v12;
              }
              else
              {
                v25 = (unint64_t)v81;
                v23 = operator new();
                v26 = v12;
                *(_QWORD *)v23 = v12;
                *(_QWORD *)(v23 + 8) = v25;
                *(_QWORD *)(v23 + 24) = 0;
                *(_QWORD *)(v23 + 32) = 0;
                *(_QWORD *)(v23 + 16) = 0;
                *(_DWORD *)(v23 + 40) = 0;
                v27 = (uint64_t)*v24;
                *v24 = (uint64_t *)v23;
                if (v27)
                {
                  sub_1C4DDE2A8((uint64_t)v24, v27);
                  v26 = v12;
                  v23 = (uint64_t)*v24;
                }
              }
              v28 = *(_QWORD *)(v23 + 16);
              *(_QWORD *)(v23 + 16) = *(_QWORD *)(v10 + 16);
              *(_QWORD *)(v10 + 16) = v28;
              v29 = *(_QWORD *)(v23 + 24);
              *(_QWORD *)(v23 + 24) = *(_QWORD *)(v10 + 24);
              *(_QWORD *)(v10 + 24) = v29;
              v30 = *(_QWORD *)(v23 + 32);
              *(_QWORD *)(v23 + 32) = *(_QWORD *)(v10 + 32);
              *(_QWORD *)(v10 + 32) = v30;
              if (*(_DWORD *)(v10 + 40))
              {
                v31 = *((_DWORD *)v11 + 8);
                *((_DWORD *)v11 + 8) = v31 & 0xFFFFFFF0;
                if ((v31 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v11) & 1) == 0)
                  *((_DWORD *)v11 + 8) |= 0x4000u;
              }
              else
              {
                v32 = (llvm::Function *)llvm::CallGraph::removeFunctionFromModule(v26, v10);
                if (v32)
                {
                  v33 = v32;
                  llvm::Function::~Function(v32);
                  v35 = *(_DWORD *)(v34 + 20);
                  if ((v35 & 0x40000000) != 0)
                  {
                    v48 = (char *)*((_QWORD *)v33 - 1);
                    v47 = (char *)v33 - 8;
                    v46 = v48;
                    v49 = v35 & 0x7FFFFFF;
                    if ((_DWORD)v49)
                    {
                      v50 = 32 * v49;
                      do
                      {
                        v51 = &v46[v50];
                        if (*(_QWORD *)&v46[v50 - 32])
                        {
                          **((_QWORD **)v51 - 2) = *((_QWORD *)v51 - 3);
                          v52 = *((_QWORD *)v51 - 3);
                          if (v52)
                            *(_QWORD *)(v52 + 16) = *((_QWORD *)v51 - 2);
                        }
                        v50 -= 32;
                      }
                      while (v50);
                    }
                    operator delete(v46);
                    v40 = v47;
                  }
                  else
                  {
                    v36 = v35 & 0x7FFFFFF;
                    if ((_DWORD)v36)
                    {
                      v37 = (_QWORD **)((char *)v33 - 16);
                      v38 = -32 * v36;
                      do
                      {
                        if (*(v37 - 2))
                        {
                          **v37 = *(v37 - 1);
                          v39 = (uint64_t)*(v37 - 1);
                          if (v39)
                            *(_QWORD *)(v39 + 16) = *v37;
                        }
                        v37 -= 4;
                        v38 += 32;
                      }
                      while (v38);
                    }
                    v40 = (char *)v33 - 32 * v36;
                    if (v35 < 0)
                      v40 = &v40[-*((_QWORD *)v40 - 1) - 8];
                  }
                  operator delete(v40);
                }
              }
              v41 = 0;
              v42 = *(_QWORD *)(a2 + 16);
              do
              {
                v43 = v41;
                v44 = *(_QWORD *)(v42 + 8 * v41++);
              }
              while (v44 != v10);
              v45 = (uint64_t *)(v42 + 8 * v43);
              if (v23)
              {
                *v45 = v23;
              }
              else
              {
                v53 = *(char **)(a2 + 24);
                v54 = v53 - (char *)(v45 + 1);
                if (v53 != (char *)(v45 + 1))
                  memmove(v45, v45 + 1, v53 - (char *)(v45 + 1));
                *(_QWORD *)(a2 + 24) = (char *)v45 + v54;
              }
              sub_1C4DE2AA0(*(int32x2_t **)(a2 + 8), v10, v23);
              v9 = 1;
            }
            v6 = v12;
            v7 = v60;
          }
          ++v3;
        }
        while (v3 != v7);
        if ((v9 & 1) == 0)
          break;
        v3 = *(uint64_t **)(a2 + 16);
        v7 = *(uint64_t **)(a2 + 24);
        v57 = 1;
        v8 = (char *)v7 - (char *)v3;
      }
      while (v7 != v3);
      if (v73)
      {
        llvm::AAResults::~AAResults((llvm::AAResults *)v72);
        v73 = 0;
      }
      LOBYTE(v3) = v57;
    }
    if (v71)
    {
      v56 = v70;
      if (v70 != v69)
LABEL_67:
        free(v56);
      if (v68 != v67)
        free(v68);
    }
  }
  return v3 & 1;
}

uint64_t sub_1C567475C(uint64_t a1, llvm::Pass *a2, llvm::Function *a3)
{
  llvm::Function *v5;
  llvm::BasicAAResult *v6;
  _QWORD v8[9];
  void *v9;
  void *v10;
  void *v11;

  v5 = (llvm::Function *)(a1 + 8);
  llvm::createLegacyPMBasicAAResult(*(llvm **)a1, a2, a3, (uint64_t)v8);
  sub_1C5674824((uint64_t)v5, (uint64_t)v8);
  if (v11 != v10)
    free(v11);
  if (v9 != (void *)v8[8])
    free(v9);
  llvm::createLegacyPMAAResults(*(llvm **)a1, a2, v5, v6, (uint64_t)v8);
  if (*(_BYTE *)(a1 + 392))
  {
    llvm::AAResults::~AAResults((llvm::AAResults *)(a1 + 336));
    *(_BYTE *)(a1 + 392) = 0;
  }
  llvm::AAResults::AAResults((_QWORD *)(a1 + 336), (uint64_t)v8);
  *(_BYTE *)(a1 + 392) = 1;
  llvm::AAResults::~AAResults((llvm::AAResults *)v8);
  return a1 + 336;
}

double sub_1C5674824(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_BYTE *)(a1 + 320))
  {
    v4 = *(void **)(a1 + 168);
    if (v4 != *(void **)(a1 + 160))
    {
      v7 = a2;
      v9 = a1;
      free(v4);
      a2 = v7;
      a1 = v9;
    }
    v5 = *(void **)(a1 + 72);
    if (v5 != *(void **)(a1 + 64))
    {
      v6 = a2;
      v8 = a1;
      free(v5);
      a2 = v6;
      a1 = v8;
    }
  }
  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = a1 + 96;
  *(_QWORD *)(a1 + 72) = a1 + 96;
  *(_QWORD *)(a1 + 80) = 8;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 192;
  *(_QWORD *)(a1 + 168) = a1 + 192;
  *(_QWORD *)&result = 16;
  *(_QWORD *)(a1 + 176) = 16;
  *(_DWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 320) = 1;
  return result;
}

void sub_1C56748EC(uint64_t *a1, llvm::CallBase *a2, llvm::CallBase *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t *v19;

  v6 = *a1;
  v7 = *((_QWORD *)a3 - 4);
  if (!v7 || *(_BYTE *)(v7 + 16) || *(_QWORD *)(v7 + 24) != *((_QWORD *)a3 + 9))
    v7 = 0;
  v8 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 56);
  v18 = v7;
  v19 = &v18;
  v10 = sub_1C4DE25A0((uint64_t **)(v6 + 8), &v18, (uint64_t)&std::piecewise_construct, (uint64_t **)&v19) + 5;
  v9 = (uint64_t)*v10;
  if (!*v10)
  {
    v11 = v18;
    v9 = operator new();
    *(_QWORD *)v9 = v6;
    *(_QWORD *)(v9 + 8) = v11;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 16) = 0;
    *(_DWORD *)(v9 + 40) = 0;
    v12 = (uint64_t)*v10;
    *v10 = (uint64_t *)v9;
    if (v12)
    {
      sub_1C4DDE2A8((uint64_t)v10, v12);
      v9 = (uint64_t)*v10;
    }
  }
  v13 = *(_QWORD **)(*a1 + 16);
  if (!v13)
    goto LABEL_19;
  v14 = *a1 + 16;
  do
  {
    v15 = v13[4];
    v16 = v15 >= v8;
    if (v15 >= v8)
      v17 = v13;
    else
      v17 = v13 + 1;
    if (v16)
      v14 = (uint64_t)v13;
    v13 = (_QWORD *)*v17;
  }
  while (*v17);
  if (v14 == *a1 + 16 || *(_QWORD *)(v14 + 32) > v8)
LABEL_19:
    v14 = *a1 + 16;
  llvm::CallGraphNode::replaceCallEdge(*(llvm::CallGraphNode **)(v14 + 40), a2, a3, (llvm::CallGraphNode *)v9);
}

uint64_t sub_1C5674A30(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::AAManager::Key, a2) + 8;
}

uint64_t llvm::operator&(int a1, unsigned int a2)
{
  if (a1 == 1)
    return 1;
  else
    return a2;
}

int *llvm::operator&=(int *result, int a2)
{
  if (*result == 1)
    a2 = 1;
  *result = a2;
  return result;
}

BOOL llvm::AA::isNoSyncInst(llvm::AA *this, llvm::Attributor *a2, const llvm::Instruction *a3, const llvm::AbstractAttribute *a4)
{
  _BOOL8 result;
  unsigned int v6;
  uint64_t v9;
  const llvm::Instruction *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  const llvm::Instruction *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  __int32 v29;

  result = 1;
  v6 = *((unsigned __int8 *)a2 + 16) - 33;
  if (v6 > 0x37)
    return result;
  if (((1 << v6) & 0x8000000000041) == 0)
  {
    if (((1 << v6) & 0x808001D8000010) != 0)
      return (llvm::Instruction::isVolatile(a2) & 1) == 0 && !llvm::AANoSync::isNonRelaxedAtomic(a2, v15);
    return result;
  }
  v9 = *((_QWORD *)a2 + 8);
  if (v9 && (*(_BYTE *)(v9 + 16) & 8) != 0)
    return result;
  if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 35) & 1) != 0)
    return 1;
  v11 = *((_QWORD *)a2 + 8);
  if (v11 && (*(_BYTE *)(v11 + 12) & 0x40) != 0 || (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 6) & 1) != 0)
    goto LABEL_9;
  v12 = *((unsigned __int8 *)a2 + 16);
  v13 = (v12 - 33);
  if (v13 <= 0x37)
  {
    if (((1 << (v12 - 33)) & 0x8000000000041) != 0)
    {
      v16 = *((_QWORD *)a2 + 8);
      if (!v16 || (*(_BYTE *)(v16 + 20) & 4) == 0 && (*(_BYTE *)(v16 + 17) & 0x10) == 0)
      {
        v29 = 7;
        if (sub_1C53E4BBC((uint64_t)a2, &v29, 1uLL))
        {
          v19 = *((_QWORD *)a2 - 4);
          if (!v19
            || *(_BYTE *)(v19 + 16)
            || *(_QWORD *)(v19 + 24) != *((_QWORD *)a2 + 9)
            || *(_DWORD *)(v19 + 36) != 7)
          {
            goto LABEL_9;
          }
        }
        if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 66) & 1) == 0
          && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 44))
        {
          goto LABEL_9;
        }
      }
    }
    else
    {
      if (((1 << (v12 - 33)) & 0x808001C8000010) != 0)
        goto LABEL_9;
      if (v13 != 28)
        goto LABEL_16;
      if ((*((_WORD *)a2 + 9) & 0x301) != 0)
        goto LABEL_9;
    }
    v12 = *((unsigned __int8 *)a2 + 16);
  }
LABEL_16:
  result = 1;
  v14 = (v12 - 33);
  if (v14 > 0x37)
    return result;
  if (((1 << v14) & 0x8000000000041) != 0)
  {
    v17 = *((_QWORD *)a2 + 8);
    if (v17 && (*(_BYTE *)(v17 + 17) & 0x30) != 0)
      return result;
    v18 = *((_DWORD *)a2 + 5);
    if (v18 < 0)
    {
      v20 = (char *)a2 - 32 * (v18 & 0x7FFFFFF);
      v23 = *((_QWORD *)v20 - 1);
      v21 = v20 - 8;
      v22 = v23;
      if (v23)
      {
        v24 = -v22;
        while (1)
        {
          v25 = *(_DWORD *)(*(_QWORD *)&v21[v24] + 8);
          v26 = v25 > 7;
          v27 = (1 << v25) & 0x83;
          if (v26 || v27 == 0)
            break;
          v24 += 16;
          if (!v24)
            goto LABEL_35;
        }
LABEL_9:
        if (!llvm::AANoSync::isNoSyncIntrinsic(a2, v10))
          return *((_BYTE *)sub_1C56833C8((uint64_t)this, (uint64_t)a2, 0, (uint64_t)a3, 1, 0, 1) + 41) != 0;
        return 1;
      }
    }
LABEL_35:
    if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 45) & 1) == 0
      && (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 44) & 1) == 0)
    {
      goto LABEL_9;
    }
    return 1;
  }
  if (v14 == 27)
  {
    if ((*((_WORD *)a2 + 9) & 0x301) != 0)
      goto LABEL_9;
  }
  else if (((1 << v14) & 0x808001D0000010) != 0)
  {
    goto LABEL_9;
  }
  return result;
}

BOOL llvm::AA::isDynamicallyUnique(llvm::AA *this, llvm::Attributor *a2, int64_t a3, const llvm::Value *a4)
{
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;

  if (!(_DWORD)a4)
    return 0;
  v4 = *(unsigned __int8 *)(a3 + 16);
  if (v4 != 21)
  {
    if (v4 < 0x1C)
    {
      if (!*(_BYTE *)(a3 + 16))
        a3 |= 2uLL;
    }
    else
    {
      v5 = v4 - 33;
      v6 = v5 > 0x33;
      v7 = (1 << v5) & 0x8000000000041;
      if (!v6 && v7 != 0)
        a3 |= 1uLL;
    }
  }
  return *((_BYTE *)sub_1C56838A0((uint64_t)this, a3, 0, (uint64_t)a2, 1, 0, 1) + 41) != 0;
}

llvm::ConstantExpr *llvm::AA::getWithType(llvm::AA *this, llvm::Value *a2, llvm::Type *a3)
{
  llvm::ConstantExpr *v3;
  unsigned int v5;
  llvm::Type *v7;
  llvm::Type *v8;
  const char *v9;
  unint64_t PrimitiveSizeInBits;
  unint64_t v11;
  const char *v12;
  llvm::Type *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;

  v3 = this;
  if (*(llvm::Value **)this == a2)
    return v3;
  v5 = *((unsigned __int8 *)this + 16);
  if (v5 == 12)
    return (llvm::ConstantExpr *)llvm::PoisonValue::get(a2, a2);
  if (v5 - 11 <= 1)
    return llvm::UndefValue::get(a2, a2);
  if (v5 > 0x14)
    return 0;
  if (llvm::Constant::isNullValue(this))
    return (llvm::ConstantExpr *)llvm::Constant::getNullValue(a2, v7);
  if (*(_BYTE *)(*(_QWORD *)v3 + 8) == 15 && *((_BYTE *)a2 + 8) == 15)
    return llvm::ConstantExpr::getPointerCast(v3, a2, v8);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v3);
  if ((_DWORD)v9 == 1)
  v11 = llvm::Type::getPrimitiveSizeInBits(a2);
  if ((_DWORD)v12 == 1)
  {
    v16 = v11;
    v11 = v16;
  }
  if (PrimitiveSizeInBits < v11)
    return 0;
  v14 = *(unsigned __int8 *)(*(_QWORD *)v3 + 8);
  if (v14 == 13)
  {
    if (*((_BYTE *)a2 + 8) != 13)
      return 0;
    v15 = 38;
  }
  else
  {
    if (v14 > 6 || *((unsigned __int8 *)a2 + 8) > 6u)
      return 0;
    v15 = 45;
  }
  return llvm::ConstantFoldCastInstruction((llvm *)v15, (uint64_t)v3, a2, v13);
}

BOOL llvm::AA::isValidInScope(llvm::AA *this, const llvm::Value *a2, const llvm::Function *a3)
{
  unsigned int v3;
  _QWORD *v5;

  v3 = *((unsigned __int8 *)this + 16);
  if (v3 < 0x15)
    return 1;
  if (v3 >= 0x1C)
  {
    v5 = (_QWORD *)(*((_QWORD *)this + 5) + 56);
    return *v5 == (_QWORD)a2;
  }
  if (v3 == 21)
  {
    v5 = (_QWORD *)((char *)this + 24);
    return *v5 == (_QWORD)a2;
  }
  return 0;
}

BOOL llvm::AA::isValidAtPosition(llvm::AA *this, const llvm::Value *a2, const llvm::Instruction *a3, llvm::InformationCache *a4)
{
  _BOOL8 result;
  unsigned int v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  llvm::AA *v14;
  llvm::AA *v15;
  BOOL v16;
  uint64_t ResultImpl;

  result = 1;
  if (this != a2)
  {
    v6 = *((unsigned __int8 *)this + 16);
    if (v6 >= 0x15)
    {
      v9 = *((_QWORD *)a2 + 5);
      v10 = *(_QWORD *)(v9 + 56);
      if (v6 == 21)
        return *((_QWORD *)this + 3) == v10;
      if (v6 < 0x1C)
        return 0;
      v11 = *((_QWORD *)this + 5);
      if (*(_QWORD *)(v11 + 56) != v10)
        return 0;
      v12 = **((_QWORD **)a3 + 55);
      if (v12)
        v13 = *(_QWORD *)(v10 + 40) == 0;
      else
        v13 = 1;
      if (!v13)
      {
        ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(v12, &llvm::DominatorTreeAnalysis::Key, v10);
        return llvm::DominatorTree::dominates((llvm::DominatorTree *)(ResultImpl + 8), this, a2);
      }
      if (v11 == v9
        && (v14 = (llvm::AA *)((char *)this + 24), v15 = (llvm::AA *)(v9 + 40), (llvm::AA *)((char *)this + 24) != v15))
      {
        do
        {
          if (v14)
            v16 = (llvm::AA *)((char *)v14 - 24) == a2;
          else
            v16 = 0;
          result = v16;
          if (v16)
            break;
          v14 = (llvm::AA *)*((_QWORD *)v14 + 1);
        }
        while (v14 != v15);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

llvm::ConstantExpr *llvm::AA::combineOptionalValuesInAAValueLatice(unsigned __int8 *a1, uint64_t a2, llvm::Value *a3)
{
  int v4;
  int v5;
  BOOL v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;

  v4 = a1[8];
  v5 = *(unsigned __int8 *)(a2 + 8);
  if (a1[8])
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
  {
    if ((v4 == 0) != (v5 != 0) || !*(_BYTE *)(a2 + 8))
      return *(llvm::ConstantExpr **)a1;
    v7 = *(unsigned __int8 **)a2;
    if (*(_QWORD *)a2)
    {
      if (v4)
      {
        v8 = *(unsigned __int8 **)a1;
        goto LABEL_13;
      }
      if (a3)
        return llvm::AA::getWithType((llvm::AA *)v7, a3, a3);
    }
    return 0;
  }
  v8 = *(unsigned __int8 **)a1;
  v7 = *(unsigned __int8 **)a2;
  if (*(_QWORD *)a1 == *(_QWORD *)a2)
    return (llvm::ConstantExpr *)v8;
  if (!v7)
    return 0;
LABEL_13:
  if (v8)
  {
    if (!a3)
      a3 = *(llvm::Value **)v8;
    if (v8[16] - 11 > 1)
    {
      if (v7[16] - 11 <= 1)
        return (llvm::ConstantExpr *)v8;
      if (v8 == (unsigned __int8 *)llvm::AA::getWithType((llvm::AA *)v7, a3, a3))
        return *(llvm::ConstantExpr **)a1;
      return 0;
    }
    return llvm::AA::getWithType((llvm::AA *)v7, a3, a3);
  }
  return (llvm::ConstantExpr *)v8;
}

uint64_t llvm::AA::getPotentiallyLoadedValues(llvm::Attributor *a1, uint64_t a2, void *a3, void *a4, const llvm::AbstractAttribute *a5, BOOL *a6, char a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t InitialValueForObj;
  uint64_t *v17;
  uint64_t i;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  llvm::AbstractAttribute *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t AssumedSimplified;
  char v35;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t *v44;
  char v45;
  char *v46;
  void **v47;
  void **v48;
  char v49;
  void *v50;
  uint64_t v51;
  _BYTE v52[48];
  void *v53;
  uint64_t v54;
  _BYTE v55[48];
  uint64_t *v56;
  uint64_t v57;
  _BYTE v58[48];
  uint64_t *v59;
  uint64_t v60;
  _QWORD v61[10];

  v61[8] = *MEMORY[0x1E0C80C00];
  v45 = a7;
  v12 = *(_QWORD *)(a2 - 32);
  v59 = v61;
  v60 = 0x800000000;
  if (llvm::AA::getAssumedUnderlyingObjects(a1, v12, (uint64_t)&v59, a5, a2, a6, 2))
  {
    v56 = (uint64_t *)v58;
    v57 = 0x600000000;
    v53 = v55;
    v54 = 0x600000000;
    v50 = v52;
    v51 = 0x600000000;
    v13 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
    v14 = **(_QWORD **)(*((_QWORD *)a1 + 11) + 440);
    if (v14)
      v15 = *(_QWORD *)(v13 + 40) == 0;
    else
      v15 = 1;
    v41 = a3;
    v42 = a4;
    if (v15)
      v44 = 0;
    else
      v44 = (uint64_t *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(v14, &llvm::TargetLibraryAnalysis::Key, v13)+ 8);
    if ((_DWORD)v60)
    {
      v17 = v59;
      for (i = 8 * v60; i; i -= 8)
      {
        v19 = *v17;
        v20 = *(unsigned __int8 *)(*v17 + 16);
        if ((v20 - 11) < 2)
          goto LABEL_55;
        if (v20 != 3 && v20 != 59)
        {
          if (v20 == 19)
          {
            v21 = *(_DWORD *)(*(_QWORD *)v12 + 8);
            if ((v21 & 0xFE) == 0x12)
              v21 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v12 + 16) + 8);
            v22 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
            if (v22 && (v23 = *(_QWORD *)(v22 + 112)) != 0)
            {
              InitialValueForObj = 0;
              if ((*(_BYTE *)(v23 + 17) & 1) != 0 || v21 > 0xFF)
                goto LABEL_58;
            }
            else if (v21 > 0xFF)
            {
              goto LABEL_57;
            }
            v31 = *(unsigned __int8 *)(v12 + 16);
            v32 = v12;
            if (v31 != 21)
            {
              if (v31 < 0x1C)
              {
                v32 = v12 | 2;
                if (*(_BYTE *)(v12 + 16))
                  goto LABEL_52;
              }
              else
              {
                v33 = v31 - 33;
                if (v33 > 0x33 || (v32 = v12 | 1, ((1 << v33) & 0x8000000000041) == 0))
LABEL_52:
                  v32 = v12;
              }
            }
            v46 = (char *)v32;
            v47 = 0;
            AssumedSimplified = llvm::Attributor::getAssumedSimplified(a1, (const llvm::IRPosition *)&v46, a5, a6);
            InitialValueForObj = 0;
            if (!v35 || v19 != AssumedSimplified)
              goto LABEL_58;
            goto LABEL_55;
          }
          if (byte_1ED82E438)
            v24 = 59;
          else
            v24 = 63;
          sub_1C4EBF808(*v17, v24, v44, &v46);
          if (!v49)
            goto LABEL_57;
          v20 = *(unsigned __int8 *)(v19 + 16);
        }
        if (v20 == 3 && (*(_DWORD *)(v19 + 32) & 0xFu) - 7 > 1)
          goto LABEL_57;
        InitialValueForObj = (uint64_t)llvm::AA::getInitialValueForObj(v19, *(llvm::UndefValue **)a2, v44);
        if (!InitialValueForObj)
          goto LABEL_58;
        v25 = v54;
        if (v54 >= (unint64_t)HIDWORD(v54))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, (uint64_t)v55, v54 + 1, 8);
          v25 = v54;
        }
        *((_QWORD *)v53 + v25) = InitialValueForObj;
        LODWORD(v54) = v54 + 1;
        v26 = v51;
        if (v51 >= (unint64_t)HIDWORD(v51))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)v52, v51 + 1, 8);
          v26 = v51;
        }
        *((_QWORD *)v50 + v26) = 0;
        LODWORD(v51) = v51 + 1;
        v46 = &v45;
        v47 = &v53;
        v48 = &v50;
        v27 = *(unsigned __int8 *)(v19 + 16);
        if (v27 != 21)
        {
          if (v27 < 0x1C)
          {
            if (!*(_BYTE *)(v19 + 16))
              v19 |= 2uLL;
          }
          else
          {
            v28 = v27 - 33;
            if (v28 <= 0x33 && ((1 << v28) & 0x8000000000041) != 0)
              v19 |= 1uLL;
          }
        }
        v29 = sub_1C5683D78((uint64_t)a1, v19, 0, (uint64_t)a5, 2, 0, 1);
        if (((*(uint64_t (**)(llvm::AbstractAttribute *, llvm::Attributor *, const llvm::AbstractAttribute *, uint64_t, uint64_t (*)(uint64_t, uint64_t, char), char **))(*(_QWORD *)v29 + 120))(v29, a1, a5, a2, sub_1C5684250, &v46) & 1) == 0)
        {
LABEL_57:
          InitialValueForObj = 0;
          goto LABEL_58;
        }
        v30 = v57;
        if (v57 >= (unint64_t)HIDWORD(v57))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, (uint64_t)v58, v57 + 1, 8);
          v30 = v57;
        }
        v56[v30] = (uint64_t)v29;
        LODWORD(v57) = v57 + 1;
LABEL_55:
        ++v17;
      }
    }
    if ((_DWORD)v57)
    {
      v37 = v56;
      v38 = 8 * v57;
      do
      {
        v39 = *v37;
        v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v37 + 48))(*v37);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 24))(v40) & 1) == 0)
          *a6 = 1;
        llvm::Attributor::recordDependence((uint64_t)a1, v39, (uint64_t)a5, 1);
        ++v37;
        v38 -= 8;
      }
      while (v38);
    }
    sub_1C628820C(v41, (uint64_t *)v53, (uint64_t *)v53 + v54);
    sub_1C62882B8(v42, (uint64_t *)v50, (uint64_t *)v50 + v51);
    InitialValueForObj = 1;
LABEL_58:
    if (v50 != v52)
      free(v50);
    if (v53 != v55)
      free(v53);
    if (v56 != (uint64_t *)v58)
      free(v56);
  }
  else
  {
    InitialValueForObj = 0;
  }
  if (v59 != v61)
    free(v59);
  return InitialValueForObj;
}

uint64_t llvm::AA::getPotentialCopiesOfStoredValue(llvm::Attributor *a1, uint64_t a2, void *a3, const llvm::AbstractAttribute *a4, BOOL *a5, char a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t i;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  llvm::AbstractAttribute *v32;
  uint64_t v33;
  unint64_t AssumedSimplified;
  char v35;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char *v42;
  void **v43;
  void **v44;
  char v45;
  uint64_t v46;
  int64x2_t v47;
  int64x2_t v48;
  void *v49;
  uint64_t v50;
  _BYTE v51[32];
  void *v52;
  uint64_t v53;
  _BYTE v54[48];
  void *v55;
  uint64_t v56;
  _BYTE v57[48];
  uint64_t *v58;
  uint64_t v59;
  _BYTE v60[48];
  uint64_t *v61;
  uint64_t v62;
  _QWORD v63[10];

  v63[8] = *MEMORY[0x1E0C80C00];
  v46 = 1;
  v47 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v48 = v47;
  v49 = v51;
  v50 = 0x400000000;
  v45 = a6;
  v11 = *(_QWORD *)(a2 - 32);
  v61 = v63;
  v62 = 0x800000000;
  if (llvm::AA::getAssumedUnderlyingObjects(a1, v11, (uint64_t)&v61, a4, a2, a5, 2))
  {
    v41 = a3;
    v58 = (uint64_t *)v60;
    v59 = 0x600000000;
    v55 = v57;
    v56 = 0x600000000;
    v52 = v54;
    v53 = 0x600000000;
    v12 = **(_QWORD **)(*((_QWORD *)a1 + 11) + 440);
    if (v12)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
      if (*(_QWORD *)(v13 + 40))
        llvm::AnalysisManager<llvm::Function>::getResultImpl(v12, &llvm::TargetLibraryAnalysis::Key, v13);
    }
    if ((_DWORD)v62)
    {
      v14 = v61;
      for (i = 8 * v62; i; i -= 8)
      {
        v16 = *v14;
        v17 = *(unsigned __int8 *)(*v14 + 16);
        if (v17 - 11 < 2)
          goto LABEL_47;
        if (v17 != 3 && v17 != 59)
        {
          if (v17 == 19)
          {
            v18 = *(_DWORD *)(*(_QWORD *)v11 + 8);
            if ((v18 & 0xFE) == 0x12)
              v18 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v11 + 16) + 8);
            v19 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
            if (v19 && (v20 = *(_QWORD *)(v19 + 112)) != 0)
            {
              v21 = 0;
              if ((*(_BYTE *)(v20 + 17) & 1) != 0 || v18 > 0xFF)
                goto LABEL_56;
            }
            else if (v18 > 0xFF)
            {
              goto LABEL_55;
            }
            v29 = *(unsigned __int8 *)(v11 + 16);
            v30 = v11;
            if (v29 != 21)
            {
              if (v29 < 0x1C)
              {
                v30 = v11 | 2;
                if (*(_BYTE *)(v11 + 16))
                  goto LABEL_50;
              }
              else
              {
                v31 = v29 - 33;
                if (v31 > 0x33 || (v30 = v11 | 1, ((1 << v31) & 0x8000000000041) == 0))
LABEL_50:
                  v30 = v11;
              }
            }
            v42 = (char *)v30;
            v43 = 0;
            AssumedSimplified = llvm::Attributor::getAssumedSimplified(a1, (const llvm::IRPosition *)&v42, a4, a5);
            v21 = 0;
            if (!v35 || v16 != AssumedSimplified)
              goto LABEL_56;
            goto LABEL_47;
          }
          if (v17 < 0x1C)
            goto LABEL_55;
          v22 = v17 - 33;
          v23 = v22 > 0x33;
          v24 = (1 << v22) & 0x8000000000041;
          v25 = v23 || v24 == 0;
          if (v25 || !sub_1C4D91DD8(*v14, 19))
            goto LABEL_55;
          v17 = *(unsigned __int8 *)(v16 + 16);
        }
        if (v17 == 3)
        {
          if ((*(_DWORD *)(v16 + 32) & 0xFu) - 7 > 1)
            goto LABEL_55;
          v42 = &v45;
          v43 = &v55;
          v44 = &v52;
        }
        else
        {
          v42 = &v45;
          v43 = &v55;
          v44 = &v52;
          if (v17 != 21)
          {
            if (v17 < 0x1C)
            {
              if (!v17)
                v16 |= 2uLL;
            }
            else
            {
              v26 = v17 - 33;
              v23 = v26 > 0x33;
              v27 = (1 << v26) & 0x8000000000041;
              if (!v23 && v27 != 0)
                v16 |= 1uLL;
            }
          }
        }
        v32 = sub_1C5683D78((uint64_t)a1, v16, 0, (uint64_t)a4, 2, 0, 1);
        if (((*(uint64_t (**)(llvm::AbstractAttribute *, llvm::Attributor *, const llvm::AbstractAttribute *, uint64_t, uint64_t (*)(uint64_t, uint64_t, char), char **))(*(_QWORD *)v32 + 120))(v32, a1, a4, a2, sub_1C56844F8, &v42) & 1) == 0)
        {
LABEL_55:
          v21 = 0;
          goto LABEL_56;
        }
        v33 = v59;
        if (v59 >= (unint64_t)HIDWORD(v59))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, (uint64_t)v60, v59 + 1, 8);
          v33 = v59;
        }
        v58[v33] = (uint64_t)v32;
        LODWORD(v59) = v59 + 1;
LABEL_47:
        ++v14;
      }
    }
    if ((_DWORD)v59)
    {
      v37 = v58;
      v38 = 8 * v59;
      do
      {
        v39 = *v37;
        v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v37 + 48))(*v37);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 24))(v40) & 1) == 0)
          *a5 = 1;
        llvm::Attributor::recordDependence((uint64_t)a1, v39, (uint64_t)a4, 1);
        ++v37;
        v38 -= 8;
      }
      while (v38);
    }
    sub_1C628820C(v41, (uint64_t *)v55, (uint64_t *)v55 + v56);
    sub_1C62882B8(&v46, (uint64_t *)v52, (uint64_t *)v52 + v53);
    v21 = 1;
LABEL_56:
    if (v52 != v54)
      free(v52);
    if (v55 != v57)
      free(v55);
    if (v58 != (uint64_t *)v60)
      free(v58);
  }
  else
  {
    v21 = 0;
  }
  if (v61 != v63)
    free(v61);
  if (v49 != v51)
    free(v49);
  if ((v46 & 1) == 0)
    MEMORY[0x1CAA32FB4](v47.i64[0], 8);
  return v21;
}

uint64_t sub_1C5675BDC(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, _BYTE *a5)
{
  llvm::AbstractAttribute *v10;
  uint64_t v11;
  BOOL v12;
  llvm::AbstractAttribute *v13;
  int v14;
  uint64_t v15;
  char v16;
  char v17;

  if ((sub_1C6283CA4(a2) & 0xFFFFFFFE) == 4)
  {
    v10 = sub_1C5680594(a1, *a2, a2[1], a3, 2, 0, 1);
    if ((~*((_DWORD *)v10 + 11) & 0xFC) == 0)
    {
      v11 = (uint64_t)v10;
      v12 = *((unsigned __int8 *)v10 + 40) == 255;
      goto LABEL_9;
    }
  }
  v13 = sub_1C5680B34(a1, *a2, a2[1], a3, 2, 0, 1);
  v11 = (uint64_t)v13;
  v14 = *((unsigned __int8 *)v13 + 41);
  if ((~v14 & 3) == 0 || (v15 = 0, (v14 & 2) != 0) && (a4 & 1) == 0)
  {
    v16 = *((_BYTE *)v13 + 40);
    if (!a4)
    {
      *a5 = (v16 & 2) != 0;
      if ((v16 & 2) == 0)
      {
LABEL_17:
        v15 = 1;
        llvm::Attributor::recordDependence(a1, v11, a3, 1);
        return v15;
      }
      return 1;
    }
    v12 = (v16 & 3) == 3;
LABEL_9:
    v17 = v12;
    *a5 = v17;
    if (!v12)
      goto LABEL_17;
    return 1;
  }
  return v15;
}

uint64_t llvm::AA::isAssumedReadNone(llvm::AA *this, llvm::Attributor *a2, const llvm::IRPosition *a3, const llvm::AbstractAttribute *a4, BOOL *a5)
{
  return sub_1C5675BDC((uint64_t)this, (uint64_t *)a2, (uint64_t)a3, 1, a4);
}

uint64_t sub_1C5675CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  llvm::AbstractAttribute *v11;
  unsigned int v12;
  llvm::AbstractAttribute *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  llvm::AbstractAttribute *v18;
  uint64_t v19;
  llvm::AbstractAttribute *v20;
  uint64_t v21;
  char v23;
  void **v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  int v28;
  _BYTE v29[64];
  void *v30;
  uint64_t v31;
  _QWORD v32[8];

  v32[6] = *MEMORY[0x1E0C80C00];
  v25 = v29;
  v26 = v29;
  v27 = 8;
  v28 = 0;
  v30 = v32;
  v32[0] = a2;
  v31 = 0x600000001;
  v11 = sub_1C568100C(a1, a4, 0, a5, 1, 0, 1);
  v12 = v31;
  if (!(_DWORD)v31)
  {
LABEL_16:
    v17 = 0;
    goto LABEL_18;
  }
  v13 = v11;
  while (1)
  {
    v14 = *((_QWORD *)v30 + v12 - 1);
    LODWORD(v31) = v12 - 1;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v25, v14);
    if (!v15)
      goto LABEL_15;
    v16 = *(_QWORD *)(*(_QWORD *)(v14 + 40) + 56);
    if (v16 == a4)
      break;
LABEL_5:
    if (!*(_QWORD *)(a6 + 24))
      goto LABEL_17;
    v17 = 1;
    v18 = sub_1C5681BD0(a1, v16, 0, a5, 1, 0, 1);
    if (((*(uint64_t (**)(llvm::AbstractAttribute *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v18
                                                                                                  + 128))(v18, a1, v14, a4, 0) & 1) != 0)goto LABEL_18;
    v19 = *(_QWORD *)(a6 + 24);
    if (!v19)
      sub_1C485C2F0();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 48))(v19, v16))
    {
      v24 = &v30;
      if (!llvm::Attributor::checkForAllCallSites(a1, (uint64_t (*)(uint64_t, uint64_t *))sub_1C56820A8, (uint64_t)&v24, v16, 1, a5, &v23))goto LABEL_18;
    }
LABEL_15:
    v12 = v31;
    if (!(_DWORD)v31)
      goto LABEL_16;
  }
  if (a3)
  {
    v17 = 1;
    v20 = sub_1C56814E4(a1, a4, 0, a5, 1, 0, 1);
    v21 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v20 + 48))(v20);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21)
      || sub_1C56819BC(*(_QWORD *)(a1 + 88), v14, a3))
    {
      goto LABEL_18;
    }
    if (*((_BYTE *)v13 + 41))
      goto LABEL_15;
    goto LABEL_5;
  }
LABEL_17:
  v17 = 1;
LABEL_18:
  if (v30 != v32)
    free(v30);
  if (v26 != v25)
    free(v26);
  return v17;
}

unint64_t llvm::IRPosition::getAssociatedArgument(llvm::IRPosition *this)
{
  unint64_t v2;
  unsigned int v4;
  unsigned int v5;
  int v6;
  _QWORD *v7;
  int v8;
  const llvm::Use **v9;
  const llvm::Use **v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  llvm::Value *v18;
  llvm::Value *v19;
  uint64_t v20;
  llvm::CallBase *v21;
  void *v22;
  int v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[5];

  v26[4] = *MEMORY[0x1E0C80C00];
  if (sub_1C6283CA4(this) == 6)
  {
    v2 = *(_QWORD *)this & 0xFFFFFFFFFFFFFFFCLL;
    if ((~*(_DWORD *)this & 3) == 0)
      return *(_QWORD *)(v2 + 24);
  }
  else
  {
    v4 = sub_1C628686C(this, 0);
    if ((v4 & 0x80000000) != 0)
    {
      return 0;
    }
    else
    {
      v5 = v4;
      v24 = v26;
      v25 = 0x400000000;
      v6 = ~*(_DWORD *)this;
      v7 = (_QWORD *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFFCLL);
      if ((v6 & 3) == 0)
        v7 = (_QWORD *)v7[3];
      llvm::AbstractCallSite::getCallbackUses(v7, (uint64_t)&v24);
      if (!(_DWORD)v25)
        goto LABEL_35;
      v8 = 0;
      v2 = 0;
      v9 = (const llvm::Use **)v24;
      v10 = (const llvm::Use **)((char *)v24 + 8 * v25);
      do
      {
        llvm::AbstractCallSite::AbstractCallSite((llvm::AbstractCallSite *)&v21, *v9);
        if (sub_1C6185E84(&v21))
        {
          v11 = sub_1C6283D44((uint64_t *)&v21);
          if (v11)
          {
            v12 = 0;
            v13 = 0;
            v14 = v11;
            v20 = v11;
            do
            {
              if (!v23
                && ((v15 = *(unsigned __int8 *)(*((_QWORD *)v21 - 4) + 16), v15 >= 0x15)
                  ? (v16 = v15 == 24)
                  : (v16 = 1),
                    v16))
              {
                v17 = v13;
              }
              else
              {
                v17 = *((_DWORD *)v22 + v13 + 1);
              }
              if (v17 == v5)
              {
                if (v8)
                {
                  v2 = 0;
                  v8 = 1;
                  break;
                }
                v18 = sub_1C6185E84(&v21);
                v19 = v18;
                if ((*((_WORD *)v18 + 9) & 1) != 0)
                  llvm::Function::BuildLazyArguments(v18);
                v2 = *((_QWORD *)v19 + 11) + v12;
                v8 = 1;
                v14 = v20;
              }
              ++v13;
              v12 += 40;
            }
            while (v14 != v13);
          }
        }
        if (v22 != &v24)
          free(v22);
        ++v9;
      }
      while (v9 != v10);
      if (!v8 || !v2)
      {
LABEL_35:
        v2 = *(v7 - 4);
        if (v2)
        {
          if (*(_BYTE *)(v2 + 16) || *(_QWORD *)(v2 + 24) != v7[9] || *(_QWORD *)(v2 + 96) <= (unint64_t)v5)
          {
            v2 = 0;
          }
          else
          {
            if ((*(_WORD *)(v2 + 18) & 1) != 0)
              llvm::Function::BuildLazyArguments((llvm::Function *)*(v7 - 4));
            v2 = *(_QWORD *)(v2 + 88) + 40 * v5;
          }
        }
      }
      if (v24 != v26)
        free(v24);
    }
  }
  return v2;
}

uint64_t llvm::AbstractAttribute::update(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4) & 1) != 0)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2);
}

unint64_t sub_1C5676204(_DWORD *a1)
{
  int v1;
  unint64_t result;
  unsigned int v3;
  uint64_t v4;

  v1 = ~*a1;
  result = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFCLL;
  if ((v1 & 3) == 0)
    result = *(_QWORD *)(result + 24);
  v3 = *(unsigned __int8 *)(result + 16);
  if (*(_BYTE *)(result + 16))
  {
    if (v3 == 21)
    {
      v4 = result + 24;
    }
    else
    {
      if (v3 < 0x1C)
        return 0;
      v4 = *(_QWORD *)(result + 40) + 56;
    }
    return *(_QWORD *)v4;
  }
  return result;
}

llvm::SubsumingPositionIterator *llvm::SubsumingPositionIterator::SubsumingPositionIterator(llvm::SubsumingPositionIterator *this, const llvm::IRPosition *a2)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  int v47;
  uint64_t v48;
  unint64_t AssociatedArgument;
  uint64_t v50;
  unsigned int v51;
  unint64_t *v52;
  uint64_t *v53;
  unint64_t v54;
  unsigned int v55;
  unsigned int v56;
  llvm::SubsumingPositionIterator *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  *(_QWORD *)this = (char *)this + 16;
  *((_QWORD *)this + 1) = 0x400000000;
  *((_OWORD *)this + 1) = *(_OWORD *)a2;
  *((_DWORD *)this + 2) = 1;
  v4 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)a2 & 3) == 0)
    v4 = *(_QWORD *)(v4 + 24);
  v5 = *(unsigned __int8 *)(v4 + 16);
  if (v5 < 0x1C
    || ((v6 = v5 - 33, v7 = v6 > 0x33, v8 = (1 << v6) & 0x8000000000041, !v7) ? (v9 = v8 == 0) : (v9 = 1), v9))
  {
    v4 = 0;
  }
  switch(sub_1C6283CA4(a2))
  {
    case 2u:
    case 6u:
      v10 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFCLL;
      if ((~*(_DWORD *)a2 & 3) == 0)
        v10 = *(_QWORD *)(v10 + 24);
      v11 = *(unsigned __int8 *)(v10 + 16);
      if (!*(_BYTE *)(v10 + 16))
        goto LABEL_31;
      if (v11 == 21)
      {
        v12 = (uint64_t *)(v10 + 24);
LABEL_29:
        v10 = *v12;
        goto LABEL_31;
      }
      if (v11 >= 0x1C)
      {
        v12 = (uint64_t *)(*(_QWORD *)(v10 + 40) + 56);
        goto LABEL_29;
      }
      v10 = 0;
LABEL_31:
      v15 = *((unsigned int *)this + 2);
      if (v15 >= *((_DWORD *)this + 3))
      {
        v57 = this;
LABEL_86:
        sub_1C4F76720(v57, v10, 0);
      }
      else
      {
        v16 = (_QWORD *)(*(_QWORD *)this + 16 * v15);
        *v16 = v10;
LABEL_33:
        v16[1] = 0;
        *((_DWORD *)this + 2) = v15 + 1;
      }
      return this;
    case 3u:
      v13 = *(_DWORD *)(v4 + 20);
      if (v13 < 0 && (*(_QWORD *)(v4 - 32 * (v13 & 0x7FFFFFF) - 8) & 0xFFFFFFFF0) != 0)
      {
        if (*(_BYTE *)(v4 + 16) != 84)
          goto LABEL_20;
        v14 = *(_QWORD *)(v4 - 32);
        if (!v14
          || *(_BYTE *)(v14 + 16)
          || *(_QWORD *)(v14 + 24) != *(_QWORD *)(v4 + 72)
          || (*(_BYTE *)(v14 + 33) & 0x20) == 0
          || *(_DWORD *)(v14 + 36) != 7)
        {
          goto LABEL_20;
        }
      }
      else
      {
        v14 = *(_QWORD *)(v4 - 32);
        if (!v14 || *(_BYTE *)(v14 + 16))
          goto LABEL_20;
      }
      if (*(_QWORD *)(v14 + 24) == *(_QWORD *)(v4 + 72))
      {
        v19 = v14 | 1;
        v21 = *((unsigned int *)this + 2);
        v20 = *((_DWORD *)this + 3);
        if (v21 >= v20)
        {
          sub_1C4F76720(this, v19, 0);
          v23 = *((_DWORD *)this + 2);
          v20 = *((_DWORD *)this + 3);
        }
        else
        {
          v22 = (uint64_t *)(*(_QWORD *)this + 16 * v21);
          *v22 = v19;
          v22[1] = 0;
          v23 = v21 + 1;
          *((_DWORD *)this + 2) = v23;
        }
        if (v23 >= v20)
        {
          sub_1C4F76720(this, v14, 0);
        }
        else
        {
          v24 = (uint64_t *)(*(_QWORD *)this + 16 * v23);
          *v24 = v14;
          v24[1] = 0;
          *((_DWORD *)this + 2) = v23 + 1;
        }
        v25 = sub_1C485F330(v14);
        if (v25 != v26)
        {
          v27 = v25;
          v28 = v25;
          do
          {
            v29 = *(_QWORD *)(*(_QWORD *)(v28 + 24) + 112);
            if (v29)
            {
              v30 = *(unsigned int *)(v28 + 32);
              if ((v30 + 2) < *(_DWORD *)(v29 + 8))
              {
                v31 = *(_QWORD *)(v29 + 8 * (v30 + 2) + 40);
                if (v31)
                {
                  if ((*(_BYTE *)(v31 + 17) & 0x40) != 0)
                  {
                    v32 = *(_DWORD *)(v4 + 20);
                    if ((v32 & 0x40000000) != 0)
                      v33 = *(_QWORD *)(v4 - 8);
                    else
                      v33 = v4 - 32 * (v32 & 0x7FFFFFF);
                    v34 = (v33 + 32 * v30) | 3;
                    v35 = *((unsigned int *)this + 2);
                    if (v35 >= *((_DWORD *)this + 3))
                    {
                      v61 = v27;
                      v64 = v26;
                      v58 = v28;
                      sub_1C4F76720(this, v34, 0);
                      v28 = v58;
                      v27 = v61;
                      v26 = v64;
                      v30 = *(unsigned int *)(v58 + 32);
                    }
                    else
                    {
                      v36 = (uint64_t *)(*(_QWORD *)this + 16 * v35);
                      *v36 = v34;
                      v36[1] = 0;
                      *((_DWORD *)this + 2) = v35 + 1;
                    }
                    v37 = *(_QWORD *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) + 32 * v30);
                    v38 = *(unsigned __int8 *)(v37 + 16);
                    if (v38 != 21)
                    {
                      if (v38 < 0x1C)
                      {
                        if (!*(_BYTE *)(v37 + 16))
                          v37 |= 2uLL;
                      }
                      else
                      {
                        v39 = v38 - 33;
                        v7 = v39 > 0x33;
                        v40 = (1 << v39) & 0x8000000000041;
                        if (!v7 && v40 != 0)
                          v37 |= 1uLL;
                      }
                    }
                    v43 = *((unsigned int *)this + 2);
                    v42 = *((unsigned int *)this + 3);
                    if (v43 >= v42)
                    {
                      v62 = v27;
                      v65 = v26;
                      v59 = v28;
                      sub_1C4F76720(this, v37, 0);
                      v28 = v59;
                      v27 = v62;
                      v26 = v65;
                      v45 = *((unsigned int *)this + 2);
                      v42 = *((unsigned int *)this + 3);
                    }
                    else
                    {
                      v44 = (uint64_t *)(*(_QWORD *)this + 16 * v43);
                      *v44 = v37;
                      v44[1] = 0;
                      v45 = v43 + 1;
                      *((_DWORD *)this + 2) = v43 + 1;
                    }
                    if (v45 >= v42)
                    {
                      v63 = v27;
                      v66 = v26;
                      v60 = v28;
                      sub_1C4F76720(this, v27, 0);
                      v28 = v60;
                      v27 = v63;
                      v26 = v66;
                    }
                    else
                    {
                      v46 = (uint64_t *)(*(_QWORD *)this + 16 * v45);
                      *v46 = v27;
                      v46[1] = 0;
                      *((_DWORD *)this + 2) = v45 + 1;
                    }
                  }
                }
              }
            }
            v28 += 40;
            v27 += 40;
          }
          while (v28 != v26);
        }
      }
LABEL_20:
      v15 = *((unsigned int *)this + 2);
      if (v15 < *((_DWORD *)this + 3))
      {
        v16 = (_QWORD *)(*(_QWORD *)this + 16 * v15);
        *v16 = v4;
        goto LABEL_33;
      }
      v57 = this;
      v10 = v4;
      goto LABEL_86;
    case 5u:
      v17 = *(_DWORD *)(v4 + 20);
      if (v17 < 0 && (*(_QWORD *)(v4 - 32 * (v17 & 0x7FFFFFF) - 8) & 0xFFFFFFFF0) != 0)
      {
        if (*(_BYTE *)(v4 + 16) != 84)
          return this;
        v10 = *(_QWORD *)(v4 - 32);
        if (!v10
          || *(_BYTE *)(v10 + 16)
          || *(_QWORD *)(v10 + 24) != *(_QWORD *)(v4 + 72)
          || (*(_BYTE *)(v10 + 33) & 0x20) == 0
          || *(_DWORD *)(v10 + 36) != 7)
        {
          return this;
        }
      }
      else
      {
        v10 = *(_QWORD *)(v4 - 32);
        if (!v10 || *(_BYTE *)(v10 + 16))
          return this;
      }
      if (*(_QWORD *)(v10 + 24) != *(_QWORD *)(v4 + 72))
        return this;
      goto LABEL_31;
    case 7u:
      v47 = *(_DWORD *)(v4 + 20);
      if (v47 < 0 && (*(_QWORD *)(v4 - 32 * (v47 & 0x7FFFFFF) - 8) & 0xFFFFFFFF0) != 0)
      {
        if (*(_BYTE *)(v4 + 16) != 84)
          goto LABEL_77;
        v48 = *(_QWORD *)(v4 - 32);
        if (!v48
          || *(_BYTE *)(v48 + 16)
          || *(_QWORD *)(v48 + 24) != *(_QWORD *)(v4 + 72)
          || (*(_BYTE *)(v48 + 33) & 0x20) == 0
          || *(_DWORD *)(v48 + 36) != 7)
        {
          goto LABEL_77;
        }
      }
      else
      {
        v48 = *(_QWORD *)(v4 - 32);
        if (!v48 || *(_BYTE *)(v48 + 16))
          goto LABEL_77;
      }
      if (*(_QWORD *)(v48 + 24) == *(_QWORD *)(v4 + 72))
      {
        AssociatedArgument = llvm::IRPosition::getAssociatedArgument(a2);
        v50 = *((unsigned int *)this + 2);
        v51 = *((_DWORD *)this + 3);
        if (AssociatedArgument)
        {
          if (v50 >= v51)
          {
            sub_1C4F76720(this, AssociatedArgument, 0);
            LODWORD(v50) = *((_DWORD *)this + 2);
            v51 = *((_DWORD *)this + 3);
          }
          else
          {
            v52 = (unint64_t *)(*(_QWORD *)this + 16 * v50);
            *v52 = AssociatedArgument;
            v52[1] = 0;
            LODWORD(v50) = v50 + 1;
            *((_DWORD *)this + 2) = v50;
          }
        }
        if (v50 >= v51)
        {
          sub_1C4F76720(this, v48, 0);
        }
        else
        {
          v53 = (uint64_t *)(*(_QWORD *)this + 16 * v50);
          *v53 = v48;
          v53[1] = 0;
          *((_DWORD *)this + 2) = v50 + 1;
        }
      }
LABEL_77:
      v54 = sub_1C6284150(a2);
      v10 = v54;
      v55 = *(unsigned __int8 *)(v54 + 16);
      if (v55 != 21)
      {
        if (v55 < 0x1C)
        {
          if (!*(_BYTE *)(v54 + 16))
            v10 = v54 | 2;
        }
        else
        {
          v56 = v55 - 33;
          if (v56 <= 0x33 && ((1 << v56) & 0x8000000000041) != 0)
            v10 = v54 | 1;
        }
      }
      goto LABEL_31;
    default:
      return this;
  }
}

uint64_t llvm::IRPosition::getAttrsFromIRAttr(llvm::IRPosition *a1, int a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t AttributeAtIndex;
  uint64_t v21;
  uint64_t v22;

  result = sub_1C6283CA4(a1);
  if ((_DWORD)result)
  {
    if (sub_1C6283CA4(a1) == 1)
      return 0;
    v7 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFCLL;
    if ((~*(_DWORD *)a1 & 3) == 0)
      v7 = *(_QWORD *)(v7 + 24);
    v8 = *(unsigned __int8 *)(v7 + 16);
    if (v8 < 0x1C
      || ((v9 = v8 - 33, v10 = v9 > 0x33, v11 = (1 << v9) & 0x8000000000041, !v10) ? (v12 = v11 == 0) : (v12 = 1),
          v12))
    {
      v13 = (uint64_t *)(sub_1C5676C10(a1) + 112);
    }
    else
    {
      v13 = (uint64_t *)(v7 + 64);
    }
    v14 = *v13;
    v22 = *v13;
    v15 = 1 << sub_1C6283CA4(a1);
    if ((v15 & 0xC) != 0)
    {
      v16 = 1;
    }
    else
    {
      v16 = 0;
      if ((v15 & 0x30) == 0)
        v16 = sub_1C628686C(a1, 0) + 2;
    }
    if (v14
      && v16 < *(_DWORD *)(v14 + 8)
      && (v17 = *(_QWORD *)(v14 + 8 * v16 + 40)) != 0
      && ((*(unsigned __int8 *)(v17 + a2 / 8 + 12) >> (a2 & 7)) & 1) != 0)
    {
      v18 = sub_1C6283CA4(a1);
      v19 = -1;
      if (((1 << v18) & 0xC) != 0)
      {
        v19 = 0;
      }
      else if (((1 << v18) & 0x30) == 0)
      {
        v19 = sub_1C628686C(a1, 0) + 1;
      }
      AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex(&v22, v19, a2);
      v21 = *(unsigned int *)(a3 + 8);
      if (v21 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v21 + 1, 8);
        LODWORD(v21) = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v21) = AttributeAtIndex;
      ++*(_DWORD *)(a3 + 8);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL llvm::IRPosition::getAttrsFromAssumes(llvm::IRPosition *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t ***v8;
  uint64_t *v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD v27[2];
  int v28;
  __int128 v29;
  __int128 v30;
  uint64_t ***v31;
  uint64_t v32;
  int v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  unsigned int v38;

  v8 = (uint64_t ***)sub_1C6284150(a1);
  v9 = (uint64_t *)(*(_QWORD *)(a4 + 88) + 368);
  v31 = v8;
  LODWORD(v32) = a2;
  sub_1C6284498((uint64_t)&v36, v9, &v31);
  if (v37)
  {
    v13 = **v8;
    v14 = *(_DWORD *)(a3 + 8);
    v15 = *(_QWORD *)(a4 + 88);
    v16 = v15 + 136;
    v17 = sub_1C5676CEC(a1);
    v18 = sub_1C61AA84C(v15 + 136, v17);
    v31 = 0;
    v32 = 0;
    v33 = 0;
    sub_1C4DFE328((uint64_t)&v31, v18);
    v19 = *(_OWORD *)(v18 + 24);
    v35 = *(_OWORD *)(v18 + 40);
    v34 = v19;
    sub_1C5676CEC(a1);
    v27[0] = 0;
    v27[1] = 0;
    v28 = 0;
    sub_1C4DFE328((uint64_t)v27, v15 + 312);
    v20 = *(_OWORD *)(v15 + 352);
    v29 = *(_OWORD *)(v15 + 336);
    v30 = v20;
    v11 = v36;
    v21 = v36;
    if (v38)
    {
      v22 = 24 * v38;
      v21 = v36;
      while ((*(_QWORD *)v21 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v21 += 24;
        v22 -= 24;
        if (!v22)
          goto LABEL_17;
      }
    }
    v23 = v36 + 24 * v38;
    if (v21 != v23)
    {
LABEL_10:
      if (sub_1C62844FC(v16, *(_QWORD *)v21, (uint64_t *)&v31, v27))
      {
        v24 = llvm::Attribute::get(v13, a2, *(_QWORD *)(v21 + 16));
        v25 = *(unsigned int *)(a3 + 8);
        if (v25 >= *(unsigned int *)(a3 + 12))
        {
          v26 = v24;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v25 + 1, 8);
          v24 = v26;
          v25 = *(unsigned int *)(a3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v25) = v24;
        ++*(_DWORD *)(a3 + 8);
      }
      while (1)
      {
        v21 += 24;
        if (v21 == v23)
          break;
        if ((*(_QWORD *)v21 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (v21 != v23)
            goto LABEL_10;
          break;
        }
      }
    }
LABEL_17:
    v10 = v14 != *(_DWORD *)(a3 + 8);
    MEMORY[0x1CAA32FB4](v27[0], 8);
    MEMORY[0x1CAA32FB4](v31, 8);
  }
  else
  {
    v10 = 0;
    v11 = v36;
  }
  MEMORY[0x1CAA32FB4](v11, 8);
  return v10;
}

unint64_t sub_1C5676C10(llvm::IRPosition *this)
{
  uint64_t v2;
  unint64_t result;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  unint64_t AssociatedArgument;
  unsigned int v11;
  uint64_t v12;

  v2 = *(_QWORD *)this & 3;
  result = *(_QWORD *)this & 0xFFFFFFFFFFFFFFFCLL;
  v4 = result;
  if (v2 == 3)
    v4 = *(_QWORD *)(result + 24);
  v5 = *(unsigned __int8 *)(v4 + 16);
  if (v5 < 0x1C
    || ((v6 = v5 - 33, v7 = v6 > 0x33, v8 = (1 << v6) & 0x8000000000041, !v7) ? (v9 = v8 == 0) : (v9 = 1), v9))
  {
    if (v2 == 3)
      result = *(_QWORD *)(result + 24);
    v11 = *(unsigned __int8 *)(result + 16);
    if (*(_BYTE *)(result + 16))
    {
      if (v11 == 21)
      {
        v12 = result + 24;
      }
      else
      {
        if (v11 < 0x1C)
          return 0;
        v12 = *(_QWORD *)(result + 40) + 56;
      }
      return *(_QWORD *)v12;
    }
  }
  else
  {
    AssociatedArgument = llvm::IRPosition::getAssociatedArgument(this);
    if (AssociatedArgument)
      return *(_QWORD *)(AssociatedArgument + 24);
    result = *(_QWORD *)(v4 - 32);
    if (!result || *(_BYTE *)(result + 16) || *(_QWORD *)(result + 24) != *(_QWORD *)(v4 + 72))
      return 0;
  }
  return result;
}

unint64_t sub_1C5676CEC(_DWORD *a1)
{
  int v1;
  unint64_t result;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = ~*a1;
  result = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFCLL;
  if ((v1 & 3) == 0)
    result = *(_QWORD *)(result + 24);
  v3 = *(unsigned __int8 *)(result + 16);
  if (result)
    v4 = v3 > 0x1B;
  else
    v4 = 0;
  if (!v4)
  {
    if (!*(_BYTE *)(result + 16))
    {
      if (*(_QWORD *)(result + 72) == result + 72 && (*(_BYTE *)(result + 34) & 0x80) == 0)
        return 0;
      v7 = *(_QWORD *)(result + 80);
      goto LABEL_22;
    }
    if (v3 == 21)
    {
      v5 = *(_QWORD *)(result + 24);
      if (v5)
        v6 = *(_BYTE *)(v5 + 16) == 3;
      else
        v6 = 0;
      if (!v6)
      {
        if (!*(_BYTE *)(v5 + 16) && *(_QWORD *)(v5 + 72) == v5 + 72 && (*(_BYTE *)(v5 + 34) & 0x80) == 0)
          return 0;
        goto LABEL_21;
      }
      if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) != 0)
      {
LABEL_21:
        v7 = *(_QWORD *)(v5 + 80);
LABEL_22:
        if (v7)
          v8 = v7 - 24;
        else
          v8 = 0;
        v9 = *(_QWORD *)(v8 + 48);
        if (v9)
          return v9 - 24;
        else
          return 0;
      }
    }
    return 0;
  }
  return result;
}

llvm::UndefValue *llvm::Attributor::getAssumedConstant(llvm::Attributor *this, const llvm::IRPosition *a2, const llvm::AbstractAttribute *a3, BOOL *a4)
{
  double v8;
  llvm::AbstractAttribute *v9;
  unsigned __int8 *v10;
  char v11;
  char v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  llvm::UndefValue *v19;
  llvm::Type *v20;
  llvm::Value *v21;
  llvm::Type *v22;
  llvm::ConstantExpr *v23;
  const llvm::AbstractAttribute *v24;
  char *v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v8 = sub_1C628458C((uint64_t *)this, (uint64_t *)a2, &v25);
  if (v26)
  {
    v24 = a3;
    v15 = *((_QWORD *)v25 + 3);
    if (!v15)
      sub_1C485C2F0();
    v16 = (*(uint64_t (**)(uint64_t, const llvm::IRPosition *, const llvm::AbstractAttribute **, BOOL *, double))(*(_QWORD *)v15 + 48))(v15, a2, &v24, a4, v8);
    if (v17)
    {
      if (v16)
      {
        if (*(unsigned __int8 *)(v16 + 16) >= 0x15u)
          v14 = 0;
        else
          v14 = v16;
      }
      else
      {
        v14 = 0;
      }
    }
    else
    {
      v14 = 0;
    }
    sub_1C62884A4(&v25);
  }
  else
  {
    sub_1C62884A4(&v25);
    v9 = sub_1C5677180((uint64_t)this, *(_QWORD *)a2, *((_QWORD *)a2 + 1), (uint64_t)a3, 2, 0, 1);
    v10 = (unsigned __int8 *)(*(uint64_t (**)(llvm::AbstractAttribute *, llvm::Attributor *))(*(_QWORD *)v9 + 112))(v9, this);
    v12 = v11;
    *a4 |= (*(unsigned __int8 (**)(uint64_t))(*((_QWORD *)v9 + 4) + 24))((uint64_t)v9 + 32) ^ 1;
    if (v12)
    {
      if (!v10)
        return 0;
      v13 = v10[16];
      if (v13 - 11 > 1)
      {
        if (v13 <= 0x14)
        {
          v21 = (llvm::Value *)sub_1C62846C0(a2);
          v23 = llvm::AA::getWithType((llvm::AA *)v10, v21, v22);
          v14 = (uint64_t)v23;
          if (!v23)
            return (llvm::UndefValue *)v14;
          if (*((unsigned __int8 *)v23 + 16) <= 0x14u)
          {
            llvm::Attributor::recordDependence((uint64_t)this, (uint64_t)v9, (uint64_t)a3, 1);
            return (llvm::UndefValue *)v14;
          }
        }
        return 0;
      }
      llvm::Attributor::recordDependence((uint64_t)this, (uint64_t)v9, (uint64_t)a3, 1);
      v19 = (llvm::UndefValue *)sub_1C62846C0(a2);
      return llvm::UndefValue::get(v19, v20);
    }
    else
    {
      llvm::Attributor::recordDependence((uint64_t)this, (uint64_t)v9, (uint64_t)a3, 1);
      return 0;
    }
  }
  return (llvm::UndefValue *)v14;
}

unint64_t llvm::Attributor::getAssumedSimplified(llvm::Attributor *this, const llvm::IRPosition *a2, const llvm::AbstractAttribute *a3, BOOL *a4)
{
  double v8;
  llvm::AbstractAttribute *v9;
  llvm::AA *v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Value *v16;
  llvm::Type *v17;
  llvm::ConstantExpr *v18;
  const llvm::AbstractAttribute *v19;
  char *v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v8 = sub_1C628458C((uint64_t *)this, (uint64_t *)a2, &v20);
  if (v21)
  {
    v19 = a3;
    v14 = *((_QWORD *)v20 + 3);
    if (!v14)
      sub_1C485C2F0();
    v13 = (*(uint64_t (**)(uint64_t, const llvm::IRPosition *, const llvm::AbstractAttribute **, BOOL *, double))(*(_QWORD *)v14 + 48))(v14, a2, &v19, a4, v8);
    sub_1C62884A4(&v20);
  }
  else
  {
    sub_1C62884A4(&v20);
    v9 = sub_1C5677180((uint64_t)this, *(_QWORD *)a2, *((_QWORD *)a2 + 1), (uint64_t)a3, 2, 0, 1);
    v10 = (llvm::AA *)(*(uint64_t (**)(llvm::AbstractAttribute *, llvm::Attributor *))(*(_QWORD *)v9 + 112))(v9, this);
    v12 = v11;
    *a4 |= (*(unsigned __int8 (**)(uint64_t))(*((_QWORD *)v9 + 4) + 24))((uint64_t)v9 + 32) ^ 1;
    if (v12)
    {
      if (v10 && (v16 = (llvm::Value *)sub_1C62846C0(a2), (v18 = llvm::AA::getWithType(v10, v16, v17)) != 0))
      {
        v13 = (uint64_t)v18;
        if (a3)
          llvm::Attributor::recordDependence((uint64_t)this, (uint64_t)v9, (uint64_t)a3, 1);
      }
      else
      {
        return sub_1C6284150(a2);
      }
    }
    else
    {
      if (a3)
        llvm::Attributor::recordDependence((uint64_t)this, (uint64_t)v9, (uint64_t)a3, 1);
      return 0;
    }
  }
  return v13;
}

llvm::AbstractAttribute *sub_1C5677180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v12;
  llvm::AbstractAttribute *v13;
  llvm::Attributor *v14;
  llvm::AbstractAttribute *v15;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  _BOOL4 v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void **v30;
  void **v31;
  uint64_t *v32;
  void **v33;
  size_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  void *v40[2];
  char v41;
  void *__p[2];
  char v43;
  __int128 v44;

  if (byte_1ED831CE0)
    v12 = a3;
  else
    v12 = 0;
  *(_QWORD *)&v44 = a2;
  *((_QWORD *)&v44 + 1) = v12;
  v13 = (llvm::AbstractAttribute *)sub_1C5684818(a1, &v44, a4, a5, 1);
  v15 = v13;
  if (v13 && a6)
  {
    if (*(_DWORD *)(a1 + 4368) == 1)
      llvm::Attributor::updateAA((llvm::Attributor *)a1, v13);
    return v15;
  }
  if (v13)
    return v15;
  v15 = (llvm::AbstractAttribute *)llvm::AAValueSimplify::createForPosition((llvm::AAValueSimplify *)&v44, (const llvm::IRPosition *)a1, v14);
  sub_1C6288530(a1, (uint64_t)v15);
  v17 = *(uint64_t **)(a1 + 5480);
  if (v17)
  {
    __p[0] = &llvm::AAValueSimplify::ID;
    v40[0] = 0;
    v18 = sub_1C614F7B0(v17, __p, v40) ^ 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = v44 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v44 & 3) == 0)
    v19 = *(_QWORD *)(v19 + 24);
  v20 = *(unsigned __int8 *)(v19 + 16);
  if (!*(_BYTE *)(v19 + 16))
    goto LABEL_20;
  if (v20 == 21)
  {
    v21 = (uint64_t *)(v19 + 24);
  }
  else
  {
    if (v20 < 0x1C)
    {
      v19 = 0;
      goto LABEL_27;
    }
    v21 = (uint64_t *)(*(_QWORD *)(v19 + 40) + 56);
  }
  v19 = *v21;
  if (!*v21)
  {
LABEL_27:
    v24 = 1;
    goto LABEL_32;
  }
LABEL_20:
  v22 = *(_QWORD *)(v19 + 112);
  if (v22 && ((*(_BYTE *)(v22 + 14) & 2) != 0 || (*(_BYTE *)(v22 + 17) & 8) != 0))
  {
    v23 = 1;
  }
  else if (*(_BYTE *)(a1 + 5464))
  {
    v23 = 0;
  }
  else
  {
    v25 = *(_QWORD **)(a1 + 88);
    v26 = sub_1C477672C((uint64_t)v25, v19);
    v27 = v25[1];
    v28 = 16;
    if (v27 == *v25)
      v28 = 20;
    v23 = v26 == (_QWORD *)(v27 + 8 * *(unsigned int *)((char *)v25 + v28));
  }
  v24 = 0;
  LOBYTE(v18) = (v23 | v18) != 0;
LABEL_32:
  if ((v18 & 1) != 0 || *(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
    goto LABEL_59;
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v15 + 72))(v40, v15);
  if (v41 >= 0)
    v29 = v41 & 0x7F;
  else
    v29 = (size_t)v40[1];
  v30 = __p;
  sub_1C484371C((uint64_t)__p, v29 + 12);
  if (v43 < 0)
    v30 = (void **)__p[0];
  if (v29)
  {
    if (v41 >= 0)
      v31 = v40;
    else
      v31 = (void **)v40[0];
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, "::initialize");
  v32 = (uint64_t *)off_1EF8EEB50();
  if (*v32)
  {
    if (v43 >= 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if (v43 >= 0)
      v34 = v43 & 0x7F;
    else
      v34 = (size_t)__p[1];
    llvm::timeTraceProfilerBegin(v33, v34, (uint64_t)&unk_1C872ACEA, 0);
  }
  if (v43 < 0)
    operator delete(__p[0]);
  if (v41 < 0)
    operator delete(v40[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v15 + 24))(v15, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v32)
  {
    sub_1C6392DC0(*v32);
    if ((v24 & 1) != 0)
      goto LABEL_58;
  }
  else if ((v24 & 1) != 0)
  {
    goto LABEL_58;
  }
  v38 = *(uint64_t **)(a1 + 80);
  __p[0] = (void *)v19;
  v40[0] = 0;
  if ((sub_1C614F7B0(v38, __p, v40) & 1) == 0)
  {
    v39 = *(uint64_t **)(a1 + 80);
    __p[0] = (void *)sub_1C5676C10((llvm::IRPosition *)&v44);
    v40[0] = 0;
    if ((sub_1C614F7B0(v39, __p, v40) & 1) == 0)
      goto LABEL_59;
  }
LABEL_58:
  v35 = *(_DWORD *)(a1 + 4368);
  if (v35 == 2)
  {
LABEL_59:
    v36 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    return v15;
  }
  if (a7)
  {
    *(_DWORD *)(a1 + 4368) = 1;
    llvm::Attributor::updateAA((llvm::Attributor *)a1, v15);
    *(_DWORD *)(a1 + 4368) = v35;
  }
  if (a4)
  {
    v37 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37))
      llvm::Attributor::recordDependence(a1, (uint64_t)v15, a4, a5);
  }
  return v15;
}

unint64_t llvm::Attributor::translateArgumentToCallSiteContent(llvm::Attributor *a1, llvm::Argument *this, char a3, uint64_t a4, const llvm::AbstractAttribute *a5, BOOL *a6)
{
  llvm::Argument *v6;
  unsigned int v7;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD v16[2];

  v6 = this;
  if (a3)
  {
    if (this)
    {
      v7 = *((unsigned __int8 *)this + 16);
      if (v7 > 0x14)
      {
        if (v7 != 21)
          return 0;
        v13 = *(_QWORD *)(a4 - 32);
        if (!v13 || *(_BYTE *)(v13 + 16) || *(_QWORD *)(v13 + 24) != *(_QWORD *)(a4 + 72))
          v13 = 0;
        if (v13 == *((_QWORD *)this + 3) && (llvm::Argument::hasPointeeInMemoryValueAttr(this) & 1) == 0)
        {
          v14 = *(_DWORD *)(a4 + 20);
          if ((v14 & 0x40000000) != 0)
            v15 = *(_QWORD *)(a4 - 8);
          else
            v15 = a4 - 32 * (v14 & 0x7FFFFFF);
          v16[0] = (v15 + 32 * *((unsigned int *)v6 + 8)) | 3;
          v16[1] = 0;
          return llvm::Attributor::getAssumedSimplified(a1, (const llvm::IRPosition *)v16, a5, a6);
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return (unint64_t)v6;
}

void llvm::Attributor::~Attributor(llvm::Attributor *this)
{
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;

  v3 = (uint64_t *)((char *)this + 104);
  v2 = *((_QWORD *)this + 13);
  if ((v2 & 2) != 0)
  {
    v6 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    v5 = *(uint64_t **)v6;
    v4 = *(_QWORD *)v6 + 8 * *(unsigned int *)(v6 + 8);
  }
  else
  {
    v4 = (uint64_t)&v3[v2 > 3];
    v5 = (uint64_t *)((char *)this + 104);
  }
  while (v5 != (uint64_t *)v4)
  {
    v7 = *v5++;
    (**(void (***)(unint64_t))(v7 & 0xFFFFFFFFFFFFFFF8))(v7 & 0xFFFFFFFFFFFFFFF8);
  }
  v8 = (char *)*((_QWORD *)this + 665);
  if (v8 != (char *)this + 5336)
    free(v8);
  if ((*((_BYTE *)this + 5184) & 1) == 0)
    MEMORY[0x1CAA32FB4](*((_QWORD *)this + 649), 8);
  sub_1C4EE4F14((char **)this + 622);
  sub_1C62869A0((_QWORD *)this + 597);
  v9 = (char *)*((_QWORD *)this + 587);
  if (v9 != (char *)this + 4712)
    free(v9);
  if ((*((_BYTE *)this + 4624) & 1) == 0)
    MEMORY[0x1CAA32FB4](*((_QWORD *)this + 579), 8);
  v10 = (char *)*((_QWORD *)this + 568);
  if (v10 != (char *)this + 4560)
    free(v10);
  if ((*((_BYTE *)this + 4472) & 1) == 0)
    MEMORY[0x1CAA32FB4](*((_QWORD *)this + 560), 8);
  v11 = (void *)*((_QWORD *)this + 548);
  if (v11 != *((void **)this + 547))
    free(v11);
  sub_1C4EE41F8((char **)this + 496);
  sub_1C6286AC4((_QWORD *)this + 447);
  sub_1C4EE41F8((char **)this + 397);
  sub_1C6286AC4((_QWORD *)this + 348);
  v12 = (char *)*((_QWORD *)this + 250);
  if (v12 != (char *)this + 2016)
    free(v12);
  if ((*((_BYTE *)this + 1480) & 1) == 0)
    MEMORY[0x1CAA32FB4](*((_QWORD *)this + 186), 8);
  v13 = (char *)*((_QWORD *)this + 119);
  if (v13 != (char *)this + 968)
    free(v13);
  if ((*((_BYTE *)this + 432) & 1) == 0)
    MEMORY[0x1CAA32FB4](*((_QWORD *)this + 55), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 51), 8);
  v14 = (char *)*((_QWORD *)this + 33);
  if (v14 != (char *)this + 280)
    free(v14);
  v15 = (char *)*((_QWORD *)this + 23);
  if (v15 != (char *)this + 200)
    free(v15);
  if ((*((_BYTE *)this + 112) & 1) == 0)
    MEMORY[0x1CAA32FB4](*((_QWORD *)this + 15), 8);
  *((_QWORD *)this + 12) = &unk_1E8172998;
  sub_1C6286C70(v3);
  v16 = *((_DWORD *)this + 18);
  v17 = *((_QWORD *)this + 7);
  if (v16)
  {
    v18 = (char **)(v17 + 8);
    v19 = 88 * v16;
    do
    {
      if (((unint64_t)*(v18 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v18 = sub_1C62879A4(v18);
      v18 += 11;
      v19 -= 88;
    }
    while (v19);
    v17 = *((_QWORD *)this + 7);
  }
  MEMORY[0x1CAA32FB4](v17, 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 4), 8);
  sub_1C6287914((char **)this);
  MEMORY[0x1CAA32FB4](*(_QWORD *)this, 8);
}

uint64_t llvm::Attributor::isAssumedDead(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _BYTE *a5, int a6, int a7)
{
  unint64_t v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  uint64_t v18;
  llvm::AbstractAttribute *v19;
  uint64_t v20;
  char v21;
  unint64_t v22;

  v14 = sub_1C5676CEC((_DWORD *)a2);
  if (v14)
  {
    if (a6)
      v16 = a7;
    else
      v16 = 1;
    result = llvm::Attributor::isAssumedDead(a1, v14, a3, a4, a5, 1, v16);
    if ((result & 1) != 0 || (a6 & 1) != 0)
      return result;
  }
  else if ((a6 & 1) != 0)
  {
    return 0;
  }
  if (sub_1C6283CA4((_QWORD *)a2) == 5)
  {
    v22 = sub_1C6284150((llvm::IRPosition *)a2);
    v18 = 0;
    v17 = v22 | 1;
  }
  else
  {
    v17 = *(_QWORD *)a2;
    v18 = *(_QWORD *)(a2 + 8);
  }
  v19 = sub_1C5677D4C(a1, v17, v18, a3, 2, 0, 1);
  if (v19 == (llvm::AbstractAttribute *)a3)
    return 0;
  v20 = (uint64_t)v19;
  result = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v19 + 112))(v19);
  if ((_DWORD)result)
  {
    if (a3)
      llvm::Attributor::recordDependence(a1, v20, a3, a7);
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 120))(v20);
    result = 1;
    if ((v21 & 1) == 0)
      *a5 = 1;
  }
  return result;
}

{
  uint64_t v12;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unsigned int v19;
  unsigned int v20;
  llvm::AbstractAttribute *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;

  v12 = a2;
  if (a3)
    v14 = *(_QWORD *)(a3 + 24);
  else
    v14 = 0;
  v15 = sub_1C477672C(a1 + 4376, *(_QWORD *)(a2 + 40));
  v16 = *(_QWORD *)(a1 + 4384);
  v17 = 4392;
  if (v16 == *(_QWORD *)(a1 + 4376))
    v17 = 4396;
  if (v15 != (_QWORD *)(v16 + 8 * *(unsigned int *)(a1 + v17)))
    return 0;
  if (a4
    || (*(_QWORD *)&v24 = *(_QWORD *)(*(_QWORD *)(v12 + 40) + 56),
        *((_QWORD *)&v24 + 1) = v14,
        (a4 = (_DWORD *)sub_1C5678138(a1, &v24, a3, 2, 0)) != 0))
  {
    if (sub_1C5676204(a4 + 4) == *(_QWORD *)(*(_QWORD *)(v12 + 40) + 56))
    {
      v23 = *(_QWORD *)a4;
      if (a6)
      {
        if (((*(uint64_t (**)(_DWORD *))(v23 + 128))(a4) & 1) == 0)
          return 0;
      }
      else if (!(*(unsigned int (**)(_DWORD *, uint64_t))(v23 + 144))(a4, v12))
      {
        goto LABEL_12;
      }
      if (a3)
        llvm::Attributor::recordDependence(a1, (uint64_t)a4, a3, a7);
      if (((*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a4 + 152))(a4, v12) & 1) == 0)
        goto LABEL_22;
      return 1;
    }
  }
  if ((a6 & 1) != 0)
    return 0;
LABEL_12:
  v19 = *(unsigned __int8 *)(v12 + 16);
  if (!*(_BYTE *)(v12 + 16) || v19 >= 0x1C && (v20 = v19 - 33, v20 <= 0x33) && ((1 << v20) & 0x8000000000041) != 0)
    v12 |= 2uLL;
  v21 = sub_1C5677D4C(a1, v12, v14, a3, 2, 0, 1);
  if (v21 == (llvm::AbstractAttribute *)a3)
    return 0;
  v22 = (uint64_t)v21;
  result = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v21 + 112))(v21);
  if ((_DWORD)result)
  {
    if (a3)
      llvm::Attributor::recordDependence(a1, v22, a3, a7);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 120))(v22) & 1) == 0)
    {
LABEL_22:
      result = 1;
      *a5 = 1;
      return result;
    }
    return 1;
  }
  return result;
}

uint64_t llvm::Attributor::isAssumedDead(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _BYTE *a5, int a6, int a7)
{
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  BOOL v32;
  llvm::AbstractAttribute *v33;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];

  v13 = a2[3];
  v14 = *(unsigned __int8 *)(v13 + 16);
  if (v13)
    v15 = v14 > 0x1B;
  else
    v15 = 0;
  if (!v15)
  {
    v16 = *a2;
    v17 = *(unsigned __int8 *)(*a2 + 16);
    if (v17 == 21)
      goto LABEL_34;
    if (v17 < 0x1C)
    {
      if (!*(_BYTE *)(*a2 + 16))
        v16 |= 2uLL;
      goto LABEL_34;
    }
    v18 = v17 - 33;
    v15 = v18 > 0x33;
    v19 = (1 << v18) & 0x8000000000041;
    if (v15 || v19 == 0)
    {
LABEL_34:
      v40[0] = v16;
LABEL_61:
      v40[1] = 0;
      return llvm::Attributor::isAssumedDead(a1, (uint64_t)v40, a3, a4, a5, a6, a7);
    }
LABEL_33:
    v16 |= 1uLL;
    goto LABEL_34;
  }
  if (*(unsigned __int8 *)(v13 + 16) <= 0x26u)
  {
    if (v14 == 29)
    {
      v16 = *(_QWORD *)(*(_QWORD *)(v13 + 40) + 56);
      goto LABEL_33;
    }
    if (v14 != 33)
      goto LABEL_35;
LABEL_21:
    v23 = *(_DWORD *)(v13 + 20);
    v24 = v13 - 32 * (v23 & 0x7FFFFFF);
    if (v24 <= (unint64_t)a2)
    {
      if (v14 == 84)
        v25 = 0;
      else
        v25 = v14 == 39 ? (*(_DWORD *)(v13 + 80) + 1) : 2;
      if (v23 < 0 && (v39 = *(_QWORD *)(v24 - 8), (v39 & 0xFFFFFFFF0) != 0))
        v26 = (*(_DWORD *)(v24 - 12) - *(_DWORD *)(v24 - v39));
      else
        v26 = 0;
      if (v13 - 32 * v25 - 32 * v26 - 32 > (unint64_t)a2)
      {
        v27 = (unint64_t)a2 - v24;
        if ((v23 & 0x40000000) != 0)
          v24 = *(_QWORD *)(v13 - 8);
        v16 = (v24 + (v27 & 0x1FFFFFFFE0)) | 3;
        goto LABEL_34;
      }
    }
    goto LABEL_55;
  }
  if (v14 == 39 || v14 == 84)
    goto LABEL_21;
  if (v14 == 83)
  {
    v21 = *(_DWORD *)(v13 + 20);
    if ((v21 & 0x40000000) != 0)
      v22 = *(_QWORD *)(v13 - 8);
    else
      v22 = v13 - 32 * (v21 & 0x7FFFFFF);
    v36 = *(_QWORD *)(*(_QWORD *)(v22
                                + 32 * *(unsigned int *)(v13 + 60)
                                + 8 * (((unint64_t)a2 - v22) >> 5))
                    + 40);
    if (v36)
      v37 = v36 - 24;
    else
      v37 = 0;
    if (*(unsigned __int8 *)(v37 + 16) - 29 >= 0xB)
      v38 = 0;
    else
      v38 = v37;
    return llvm::Attributor::isAssumedDead(a1, v38, a3, a4, a5, a6, a7);
  }
LABEL_35:
  if (v14 == 61)
    v28 = a2[3];
  else
    v28 = 0;
  if (!v28 || (a6 & 1) != 0 || *(_QWORD *)(v28 - 32) == *a2)
    goto LABEL_55;
  v29 = *(unsigned __int8 *)(v28 + 16);
  if (!*(_BYTE *)(v28 + 16)
    || v29 >= 0x1C
    && ((v30 = v29 - 33, v15 = v30 > 0x33, v31 = (1 << v30) & 0x8000000000041, !v15) ? (v32 = v31 == 0) : (v32 = 1),
        !v32))
  {
    v28 |= 2uLL;
  }
  v33 = sub_1C5677D4C(a1, v28, 0, a3, 2, 0, 1);
  if (!(*(unsigned int (**)(llvm::AbstractAttribute *))(*(_QWORD *)v33 + 160))(v33))
  {
    v14 = *(unsigned __int8 *)(v13 + 16);
    if (!*(_BYTE *)(v13 + 16))
    {
LABEL_59:
      v13 |= 2uLL;
      goto LABEL_60;
    }
    if (v14 < 0x1C)
    {
LABEL_60:
      v40[0] = v13;
      goto LABEL_61;
    }
LABEL_55:
    if (v14 - 33 > 0x33 || ((1 << (v14 - 33)) & 0x8000000000041) == 0)
      goto LABEL_60;
    goto LABEL_59;
  }
  if (a3)
    llvm::Attributor::recordDependence(a1, (uint64_t)v33, a3, a7);
  result = 1;
  if ((*((_BYTE *)v33 + 40) & 2) == 0)
    *a5 = 1;
  return result;
}

llvm::AbstractAttribute *sub_1C5677D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v12;
  llvm::AbstractAttribute *v13;
  llvm::Attributor *v14;
  llvm::AbstractAttribute *v15;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  _BOOL4 v24;
  char v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  void **v31;
  void **v32;
  uint64_t *v33;
  void **v34;
  size_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  void *v41[2];
  char v42;
  void *__p[2];
  char v44;
  __int128 v45;

  if (byte_1ED831CE0)
    v12 = a3;
  else
    v12 = 0;
  *(_QWORD *)&v45 = a2;
  *((_QWORD *)&v45 + 1) = v12;
  v13 = (llvm::AbstractAttribute *)sub_1C5678138(a1, &v45, a4, a5, 1);
  v15 = v13;
  if (v13 && a6)
  {
    if (*(_DWORD *)(a1 + 4368) == 1)
      llvm::Attributor::updateAA((llvm::Attributor *)a1, v13);
    return v15;
  }
  if (v13)
    return v15;
  llvm::AAIsDead::createForPosition((llvm::AAIsDead *)&v45, (const llvm::IRPosition *)a1, v14);
  v15 = (llvm::AbstractAttribute *)v17;
  sub_1C628859C(a1, v17);
  v18 = *(uint64_t **)(a1 + 5480);
  if (v18)
  {
    __p[0] = &llvm::AAIsDead::ID;
    v41[0] = 0;
    v19 = sub_1C614F7B0(v18, __p, v41) ^ 1;
  }
  else
  {
    v19 = 0;
  }
  v20 = v45 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v45 & 3) == 0)
    v20 = *(_QWORD *)(v20 + 24);
  v21 = *(unsigned __int8 *)(v20 + 16);
  if (!*(_BYTE *)(v20 + 16))
    goto LABEL_20;
  if (v21 == 21)
  {
    v22 = (uint64_t *)(v20 + 24);
  }
  else
  {
    if (v21 < 0x1C)
    {
      v20 = 0;
      goto LABEL_27;
    }
    v22 = (uint64_t *)(*(_QWORD *)(v20 + 40) + 56);
  }
  v20 = *v22;
  if (!*v22)
  {
LABEL_27:
    v25 = 1;
    goto LABEL_32;
  }
LABEL_20:
  v23 = *(_QWORD *)(v20 + 112);
  if (v23 && ((*(_BYTE *)(v23 + 14) & 2) != 0 || (*(_BYTE *)(v23 + 17) & 8) != 0))
  {
    v24 = 1;
  }
  else if (*(_BYTE *)(a1 + 5464))
  {
    v24 = 0;
  }
  else
  {
    v26 = *(_QWORD **)(a1 + 88);
    v27 = sub_1C477672C((uint64_t)v26, v20);
    v28 = v26[1];
    v29 = 16;
    if (v28 == *v26)
      v29 = 20;
    v24 = v27 == (_QWORD *)(v28 + 8 * *(unsigned int *)((char *)v26 + v29));
  }
  v25 = 0;
  LOBYTE(v19) = (v24 | v19) != 0;
LABEL_32:
  if ((v19 & 1) != 0 || *(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
    goto LABEL_59;
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v15 + 72))(v41, v15);
  if (v42 >= 0)
    v30 = v42 & 0x7F;
  else
    v30 = (size_t)v41[1];
  v31 = __p;
  sub_1C484371C((uint64_t)__p, v30 + 12);
  if (v44 < 0)
    v31 = (void **)__p[0];
  if (v30)
  {
    if (v42 >= 0)
      v32 = v41;
    else
      v32 = (void **)v41[0];
    memmove(v31, v32, v30);
  }
  strcpy((char *)v31 + v30, "::initialize");
  v33 = (uint64_t *)off_1EF8EEB50();
  if (*v33)
  {
    if (v44 >= 0)
      v34 = __p;
    else
      v34 = (void **)__p[0];
    if (v44 >= 0)
      v35 = v44 & 0x7F;
    else
      v35 = (size_t)__p[1];
    llvm::timeTraceProfilerBegin(v34, v35, (uint64_t)&unk_1C872ACEA, 0);
  }
  if (v44 < 0)
    operator delete(__p[0]);
  if (v42 < 0)
    operator delete(v41[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v15 + 24))(v15, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v33)
  {
    sub_1C6392DC0(*v33);
    if ((v25 & 1) != 0)
      goto LABEL_58;
  }
  else if ((v25 & 1) != 0)
  {
    goto LABEL_58;
  }
  v39 = *(uint64_t **)(a1 + 80);
  __p[0] = (void *)v20;
  v41[0] = 0;
  if ((sub_1C614F7B0(v39, __p, v41) & 1) == 0)
  {
    v40 = *(uint64_t **)(a1 + 80);
    __p[0] = (void *)sub_1C5676C10((llvm::IRPosition *)&v45);
    v41[0] = 0;
    if ((sub_1C614F7B0(v40, __p, v41) & 1) == 0)
      goto LABEL_59;
  }
LABEL_58:
  v36 = *(_DWORD *)(a1 + 4368);
  if (v36 == 2)
  {
LABEL_59:
    v37 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 40))(v37);
    return v15;
  }
  if (a7)
  {
    *(_DWORD *)(a1 + 4368) = 1;
    llvm::Attributor::updateAA((llvm::Attributor *)a1, v15);
    *(_DWORD *)(a1 + 4368) = v36;
  }
  if (a4)
  {
    v38 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38))
      llvm::Attributor::recordDependence(a1, (uint64_t)v15, a4, a5);
  }
  return v15;
}

uint64_t sub_1C5678138(uint64_t a1, __int128 *a2, uint64_t a3, int a4, char a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  __int128 v15;
  uint64_t *v16;

  v9 = *a2;
  v14 = &llvm::AAIsDead::ID;
  v15 = v9;
  v16 = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0)
    return 0;
  v10 = v16[3];
  if (v10)
  {
    if (a3
      && a4 != 2
      && (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v16[3]),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11)))
    {
      llvm::Attributor::recordDependence(a1, v10, a3, a4);
      if ((a5 & 1) != 0)
        return v10;
    }
    else if ((a5 & 1) != 0)
    {
      return v10;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
      return 0;
  }
  return v10;
}

uint64_t llvm::Attributor::isAssumedDead(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;

  v6 = a4;
  if (!a4)
  {
    v13 = *(unint64_t *)(a2 + 56);
    v6 = sub_1C5678138(a1, &v13, a3, 2, 0);
  }
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 128))(v6, a2);
  v11 = v10;
  if (a3 && (_DWORD)v10)
    llvm::Attributor::recordDependence(a1, v6, a3, a5);
  return v11;
}

uint64_t llvm::Attributor::checkForAllUses(llvm::Attributor *a1, unsigned int (*a2)(uint64_t, uint64_t *, uint64_t *), uint64_t a3, _QWORD *a4, uint64_t a5, int a6, int a7, int a8, unsigned int (*a9)(uint64_t, uint64_t *, uint64_t), uint64_t a10)
{
  uint64_t v10;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t *v19;
  uint64_t v20;
  llvm::AbstractAttribute *v21;
  uint64_t *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  char v30;
  int PotentialCopiesOfStoredValue;
  char v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  char v40;
  char *v41;
  int v42;
  int64x2_t v43;
  BOOL v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  int v50;
  _BYTE v51[128];
  uint64_t v52;
  int64x2_t v53;
  int64x2_t v54;
  char *v55;
  uint64_t v56;
  _BYTE v57[32];
  _QWORD *v58;
  uint64_t v59;
  _QWORD v60[18];

  v60[16] = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a5 + 8);
  if (!v10)
    return 1;
  v16 = 0;
  v59 = 0x1000000000;
  v47 = v51;
  v48 = v51;
  v58 = v60;
  v49 = 16;
  v50 = 0;
  do
  {
    if (v16 >= HIDWORD(v59))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, (uint64_t)v60, v16 + 1, 8);
      v16 = v59;
    }
    v58[v16] = v10;
    v16 = v59 + 1;
    LODWORD(v59) = v59 + 1;
    v10 = *(_QWORD *)(v10 + 8);
  }
  while (v10);
  v17 = a4[2] & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*((_DWORD *)a4 + 4) & 3) == 0)
    v17 = *(_QWORD *)(v17 + 24);
  v18 = *(unsigned __int8 *)(v17 + 16);
  if (*(_BYTE *)(v17 + 16))
  {
    if (v18 == 21)
    {
      v19 = (unint64_t *)(v17 + 24);
    }
    else
    {
      if (v18 < 0x1C)
        goto LABEL_17;
      v19 = (unint64_t *)(*(_QWORD *)(v17 + 40) + 56);
    }
    v17 = *v19;
    if (*v19)
      goto LABEL_15;
LABEL_17:
    v21 = 0;
    if (!v16)
    {
LABEL_67:
      v20 = 1;
      goto LABEL_68;
    }
    goto LABEL_18;
  }
LABEL_15:
  v21 = sub_1C5677D4C((uint64_t)a1, v17, 0, (uint64_t)a4, 2, 0, 1);
  v16 = v59;
  if (!(_DWORD)v59)
    goto LABEL_67;
LABEL_18:
  v43 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  while (1)
  {
    v22 = (uint64_t *)v58[v16 - 1];
    LODWORD(v59) = v16 - 1;
    if (*(_BYTE *)(v22[3] + 16) == 83)
    {
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v47, (uint64_t)v22);
      if (!v23)
        goto LABEL_63;
    }
    v46 = 0;
    if ((llvm::Attributor::isAssumedDead((uint64_t)a1, v22, (uint64_t)a4, v21, &v46, a6, a7) & 1) != 0)
      goto LABEL_63;
    if (a8)
    {
      v24 = v22[3];
      if (sub_1C4D9F8B4(v24) || sub_1C509DDB0(v24))
        goto LABEL_63;
    }
    v25 = v22[3];
    if (!v25 || *(_BYTE *)(v25 + 16) != 61)
      break;
    v26 = *(_DWORD *)(v25 + 20);
    v27 = (v26 & 0x40000000) != 0 ? *(uint64_t **)(v25 - 8) : (uint64_t *)(v25 - 32 * (v26 & 0x7FFFFFF));
    if (v27 != v22)
      break;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v47, (uint64_t)v22);
    if (v30)
    {
      v52 = 1;
      v53 = v43;
      v54 = v43;
      v55 = v57;
      v56 = 0x400000000;
      PotentialCopiesOfStoredValue = llvm::AA::getPotentialCopiesOfStoredValue(a1, v25, &v52, (const llvm::AbstractAttribute *)a4, &v46, 1);
      v32 = PotentialCopiesOfStoredValue;
      v42 = a8;
      if (PotentialCopiesOfStoredValue)
      {
        if ((_DWORD)v56)
        {
          v40 = PotentialCopiesOfStoredValue;
          v33 = v55;
          v41 = &v55[8 * v56];
          while (1)
          {
            v34 = *(_QWORD *)(*(_QWORD *)v33 + 8);
            if (v34)
              break;
LABEL_50:
            v33 += 8;
            if (v33 == v41)
            {
              LODWORD(v28) = 6;
              goto LABEL_55;
            }
          }
          while (!a9 || a9(a10, v22, v34))
          {
            v35 = v59;
            if (v59 >= (unint64_t)HIDWORD(v59))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, (uint64_t)v60, v59 + 1, 8);
              v35 = v59;
            }
            v58[v35] = v34;
            LODWORD(v59) = v59 + 1;
            v34 = *(_QWORD *)(v34 + 8);
            if (!v34)
              goto LABEL_50;
          }
          LODWORD(v28) = 1;
LABEL_55:
          a8 = v42;
          v32 = v40;
        }
        else
        {
          LODWORD(v28) = 6;
        }
      }
      else
      {
        LODWORD(v28) = 0;
      }
      if (v55 != v57)
      {
        v36 = v32;
        free(v55);
        v32 = v36;
        a8 = v42;
      }
      if ((v52 & 1) != 0)
      {
        if ((v32 & 1) != 0)
          goto LABEL_61;
      }
      else
      {
        v37 = v32;
        MEMORY[0x1CAA32FB4](v53.i64[0], 8);
        v38 = v37;
        a8 = v42;
        if ((v38 & 1) != 0)
          goto LABEL_61;
      }
      break;
    }
LABEL_63:
    v16 = v59;
    if (!(_DWORD)v59)
      goto LABEL_67;
  }
  LOBYTE(v52) = 0;
  if (a2(a3, v22, &v52))
  {
    if ((_BYTE)v52)
    {
      v28 = *(_QWORD *)(v22[3] + 8);
      if (v28)
      {
        v29 = v59;
        do
        {
          if (v29 >= HIDWORD(v59))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, (uint64_t)v60, v29 + 1, 8);
            v29 = v59;
          }
          v58[v29] = v28;
          v29 = v59 + 1;
          LODWORD(v59) = v59 + 1;
          v28 = *(_QWORD *)(v28 + 8);
        }
        while (v28);
      }
    }
    else
    {
      LODWORD(v28) = 6;
    }
  }
  else
  {
    LODWORD(v28) = 1;
  }
LABEL_61:
  if ((_DWORD)v28 == 6 || !(_DWORD)v28)
    goto LABEL_63;
  v20 = 0;
LABEL_68:
  if (v48 != v47)
    free(v48);
  if (v58 != v60)
    free(v58);
  return v20;
}

uint64_t llvm::Attributor::checkForAllCallSites(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t *), uint64_t a3, uint64_t a4, int a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  void *v41[2];
  uint64_t v42;
  void *v43;
  int v44;
  void *v45;
  uint64_t v46;
  _QWORD v47[10];

  v47[8] = *MEMORY[0x1E0C80C00];
  if (a5 && (*(_DWORD *)(a4 + 32) & 0xFu) - 7 > 1)
    return 0;
  v16 = *(_QWORD *)(a4 + 8);
  v45 = v47;
  v46 = 0x800000000;
  sub_1C6288608((unsigned int *)&v45, v16);
  if ((_DWORD)v46)
  {
    v17 = 0;
    if (a5)
      v18 = 1;
    else
      v18 = 6;
    v39 = v18;
    while (1)
    {
      v19 = (uint64_t *)*((_QWORD *)v45 + v17);
      if ((llvm::Attributor::isAssumedDead(a1, v19, a6, 0, a7, 1, 1) & 1) != 0)
        goto LABEL_53;
      v20 = v19[3];
      if (v20)
        v21 = *(_BYTE *)(v20 + 16) == 5;
      else
        v21 = 0;
      if (v21 && *(unsigned __int16 *)(v20 + 18) - 38 <= 0xC && *(_BYTE *)(*(_QWORD *)v20 + 8) == 15)
      {
        v22 = *(_QWORD *)(v20 + 8);
        if (v22)
        {
          v23 = v46;
          do
          {
            if (v23 >= HIDWORD(v46))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, (uint64_t)v47, v23 + 1, 8);
              v23 = v46;
            }
            *((_QWORD *)v45 + v23) = v22;
            v23 = v46 + 1;
            LODWORD(v46) = v46 + 1;
            v22 = *(_QWORD *)(v22 + 8);
          }
          while (v22);
        }
        goto LABEL_53;
      }
      llvm::AbstractCallSite::AbstractCallSite((llvm::AbstractCallSite *)&v42, (const llvm::Use *)v19);
      if (!v42)
      {
        if (*(_BYTE *)(v19[3] + 16) == 4)
          v26 = 6;
        else
          v26 = 1;
        goto LABEL_50;
      }
      if (v44)
        break;
      v27 = *(unsigned __int8 *)(*(_QWORD *)(v42 - 32) + 16);
      if (v27 >= 0x15 && v27 != 24)
        goto LABEL_40;
      v26 = v39;
      if ((uint64_t *)(v42 - 32) != v19)
        goto LABEL_50;
LABEL_55:
      v32 = sub_1C6283D44(&v42);
      if (*(_QWORD *)(a4 + 96) < v32)
        v32 = *(_QWORD *)(a4 + 96);
      v38 = v32;
      if (v32)
      {
        v33 = 0;
        v34 = 0;
        while (1)
        {
          v35 = sub_1C6284A2C(&v42, v34);
          if (v35)
          {
            v36 = (_QWORD *)v35;
            if ((*(_WORD *)(a4 + 18) & 1) != 0)
              llvm::Function::BuildLazyArguments((llvm::Function *)a4);
            if (*(_QWORD *)(*(_QWORD *)(a4 + 88) + v33) != *v36)
              break;
          }
          ++v34;
          v33 += 40;
          if (v38 == v34)
            goto LABEL_64;
        }
        v26 = 1;
      }
      else
      {
LABEL_64:
        v40 = v42;
        v41[0] = &v42;
        v41[1] = 0;
        if (v44)
          sub_1C614CA14((uint64_t)v41, (uint64_t)&v43);
        v37 = sub_1C6284A84(a2, a3, &v40);
        if (v41[0] != &v42)
          free(v41[0]);
        if (v37)
          v26 = 6;
        else
          v26 = 1;
      }
LABEL_50:
      if (v43 != &v45)
        free(v43);
      if (v26 != 6)
      {
        v14 = 0;
        goto LABEL_74;
      }
LABEL_53:
      if (++v17 >= (unint64_t)v46)
      {
        v14 = 1;
        goto LABEL_74;
      }
    }
    v24 = *(_DWORD *)(v42 + 20);
    if ((v24 & 0x40000000) != 0)
      v25 = *(_QWORD *)(v42 - 8);
    else
      v25 = v42 - 32 * (v24 & 0x7FFFFFF);
    v19 = (uint64_t *)(v25 + 32 * *(unsigned int *)v43);
LABEL_40:
    v29 = v19[3];
    if (v29)
      v30 = *(_BYTE *)(v29 + 16) == 5;
    else
      v30 = 0;
    if (v30)
    {
      v31 = *(_QWORD *)(v29 + 8);
      if (v31)
      {
        if (!*(_QWORD *)(v31 + 8) && *(unsigned __int16 *)(v29 + 18) - 38 < 0xD)
          v19 = *(uint64_t **)(v29 + 8);
      }
    }
    v26 = v39;
    if (*(_DWORD *)v43 != (((unint64_t)&v19[4 * (*(_DWORD *)(v42 + 20) & 0x7FFFFFF)] - v42) >> 5))
      goto LABEL_50;
    goto LABEL_55;
  }
  v14 = 1;
LABEL_74:
  if (v45 != v47)
    free(v45);
  return v14;
}

uint64_t llvm::Attributor::checkForAllReturnedValuesAndReturnInsts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  llvm::AbstractAttribute *v9;
  uint64_t v10;

  v8 = sub_1C5676C10((llvm::IRPosition *)(a4 + 16));
  if (v8
    && (v9 = sub_1C5684904(a1, v8, 0, a4, 0, 0, 1),
        v10 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v9 + 48))(v9),
        (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10)))
  {
    return (*(uint64_t (**)(llvm::AbstractAttribute *, uint64_t, uint64_t))(*(_QWORD *)v9 + 120))(v9, a2, a3);
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::Attributor::checkForAllInstructions(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, int **a6, _BYTE *a7, unsigned __int8 a8, char a9)
{
  llvm::AbstractAttribute *v18;
  uint64_t *v19;

  if (!a4)
    return 0;
  if (!*(_BYTE *)(a4 + 16))
  {
    if (*(_QWORD *)(a4 + 72) != a4 + 72 || (*(_BYTE *)(a4 + 34) & 0x80) != 0)
      goto LABEL_9;
    return 0;
  }
  if (*(_BYTE *)(a4 + 16) == 3 && (*(_DWORD *)(a4 + 20) & 0x7FFFFFF) == 0)
    return 0;
LABEL_9:
  v18 = 0;
  if ((a8 & 1) == 0 && (a9 & 1) == 0)
    v18 = sub_1C5677D4C(a1, a4, 0, a5, 2, 0, 1);
  v19 = (uint64_t *)sub_1C6285788(*(uint64_t **)(a1 + 88), (const llvm::Function *)a4);
  return sub_1C5678D14(a1, v19, a2, a3, a5, v18, a6, a7, a8, a9);
}

uint64_t sub_1C5678D14(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5, _DWORD *a6, int **a7, _BYTE *a8, unsigned __int8 a9, char a10)
{
  int *v10;
  int *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  _QWORD v33[2];
  int v34;

  v10 = a7[1];
  if (!v10)
    return 1;
  v15 = *a7;
  v29 = (uint64_t)&(*a7)[(_QWORD)v10];
  if (!a1)
    a10 = 1;
  while (1)
  {
    v34 = *v15;
    v17 = sub_1C5682184(a2, &v34);
    if (v17)
    {
      v18 = *(unsigned int *)(v17 + 8);
      if ((_DWORD)v18)
        break;
    }
LABEL_20:
    if (++v15 == (int *)v29)
      return 1;
  }
  v19 = *(uint64_t **)v17;
  v20 = 8 * v18;
  while (1)
  {
    v21 = *v19;
    if ((a10 & 1) != 0)
      goto LABEL_24;
    v22 = *(unsigned __int8 *)(v21 + 16);
    if (*(_BYTE *)(v21 + 16)
      && (v22 < 0x1C
       || ((v23 = v22 - 33, v24 = v23 > 0x33, v25 = (1 << v23) & 0x8000000000041, !v24)
         ? (v26 = v25 == 0)
         : (v26 = 1),
           v26)))
    {
      v27 = *v19;
    }
    else
    {
      v27 = v21 | 2;
    }
    v33[0] = v27;
    v33[1] = 0;
    if ((llvm::Attributor::isAssumedDead(a1, (uint64_t)v33, a5, a6, a8, a9, 1) & 1) == 0)
    {
LABEL_24:
      result = a3(a4, v21);
      if (!(_DWORD)result)
        return result;
    }
    ++v19;
    v20 -= 8;
    if (!v20)
      goto LABEL_20;
  }
}

uint64_t llvm::Attributor::checkForAllReadWriteInstructions(uint64_t a1, unsigned int (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, _BYTE *a5)
{
  unint64_t v10;
  uint64_t v11;
  const llvm::Function *v13;
  llvm::AbstractAttribute *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[2];

  v10 = sub_1C5676C10((llvm::IRPosition *)(a4 + 16));
  if (v10)
  {
    v13 = (const llvm::Function *)v10;
    v11 = 1;
    v14 = sub_1C5677D4C(a1, v10, 0, a4, 2, 0, 1);
    v15 = sub_1C6285788(*(uint64_t **)(a1 + 88), v13);
    v16 = *(unsigned int *)(v15 + 32);
    if (!(_DWORD)v16)
      return v11;
    v17 = *(uint64_t **)(v15 + 24);
    v18 = 8 * v16;
    while (1)
    {
      v19 = *v17;
      v20 = *(unsigned __int8 *)(*v17 + 16);
      if (*(_BYTE *)(*v17 + 16)
        && (v20 < 0x1C
         || ((v21 = v20 - 33, v22 = v21 > 0x33, v23 = (1 << v21) & 0x8000000000041, !v22)
           ? (v24 = v23 == 0)
           : (v24 = 1),
             v24)))
      {
        v25 = *v17;
      }
      else
      {
        v25 = v19 | 2;
      }
      v26[0] = v25;
      v26[1] = 0;
      if ((llvm::Attributor::isAssumedDead(a1, (uint64_t)v26, a4, v14, a5, 0, 1) & 1) == 0 && !a2(a3, v19))
        break;
      ++v17;
      v11 = 1;
      v18 -= 8;
      if (!v18)
        return v11;
    }
  }
  return 0;
}

llvm::raw_ostream *llvm::Attributor::runTillFixpoint(llvm::Attributor *this)
{
  llvm::raw_ostream **v2;
  unsigned int *v3;
  unsigned int v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  llvm::AbstractAttribute **v32;
  llvm::AbstractAttribute **v33;
  llvm::AbstractAttribute *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v70;
  uint64_t *v71;
  uint64_t (*v72)(_QWORD, uint64_t);
  uint64_t v73;
  llvm::OptimizationRemarkEmitter *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  void **v79;
  char *v80;
  unint64_t v81;
  void **v82;
  uint64_t v83;
  _QWORD *v84;
  char v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  llvm::raw_ostream *v92;
  llvm::raw_ostream *v93;
  llvm::raw_ostream *v94;
  llvm::raw_ostream *v95;
  llvm::raw_ostream *v96;
  llvm::raw_ostream *result;
  llvm::raw_ostream **v98;
  unsigned int v99;
  unint64_t *v100;
  _QWORD v101[2];
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD v106[2];
  int v107;
  uint64_t *v108;
  uint64_t *v109;
  char *v110;
  std::string v111;
  void *__p;
  char v113;
  void *v114;
  uint64_t v115;
  _BYTE v116[256];
  const char *v117;
  uint64_t v118;
  void *v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t (**v122)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  void *v123;
  uint64_t v124;
  int v125;
  _BYTE v126[48];
  void *v127;
  unsigned int v128;
  _QWORD v129[36];

  v129[34] = *MEMORY[0x1E0C80C00];
  v2 = (llvm::raw_ostream **)off_1EF8EEB50();
  if (*v2)
    llvm::timeTraceProfilerBegin("Attributor::runTillFixpoint", 0x1BuLL, (uint64_t)&unk_1C872ACEA, 0);
  if (*((_BYTE *)this + 5492))
    v3 = (unsigned int *)((char *)this + 5488);
  else
    v3 = (unsigned int *)&unk_1ED809488;
  v4 = *v3;
  v114 = v116;
  v115 = 0x2000000000;
  v106[0] = 0;
  v106[1] = 0;
  v107 = 0;
  v109 = 0;
  v110 = 0;
  v108 = 0;
  v5 = (char *)this + 104;
  v6 = *((_QWORD *)this + 13);
  v101[0] = 0;
  v101[1] = 0;
  v102 = 0;
  v104 = 0;
  v105 = 0;
  v103 = 0;
  v100 = (unint64_t *)((char *)this + 104);
  v98 = v2;
  v99 = v4;
  if ((v6 & 2) != 0)
  {
    v8 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    v5 = *(char **)v8;
    v7 = *(_QWORD *)v8 + 8 * *(unsigned int *)(v8 + 8);
  }
  else
  {
    v7 = (uint64_t)&v5[8 * (v6 > 3)];
  }
  sub_1C6284C3C((uint64_t)v106, (uint64_t)v5, (uint64_t (*)(uint64_t))sub_1C6286CCC, v7);
  v9 = 1;
  while (1)
  {
    v10 = *v100;
    if (*v100 < 4)
      goto LABEL_11;
    v40 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v10 & 2) == 0 || !v40)
    {
      if ((v10 & 2) != 0)
        v11 = *(unsigned int *)(v40 + 8);
      else
        v11 = 1;
      goto LABEL_12;
    }
    v11 = *(unsigned int *)(v40 + 8);
    if (!(_DWORD)v11)
LABEL_11:
      v11 = 0;
LABEL_12:
    v13 = v103;
    v12 = v104;
    if (v104 == v103)
      goto LABEL_34;
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(v13 + 8 * v14);
      v17 = *(_QWORD *)(v16 + 8);
      if (v17 < 4)
        goto LABEL_33;
      do
      {
        v18 = v17 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v17 & 2) != 0 && v18)
        {
          v19 = *(unsigned int *)(v18 + 8);
          if (!(_DWORD)v19)
            break;
          v20 = *(_QWORD *)(*(_QWORD *)v18 + 8 * v19 - 8);
LABEL_22:
          *(_DWORD *)(v18 + 8) = v19 - 1;
          goto LABEL_23;
        }
        if ((v17 & 2) == 0)
        {
          *(_QWORD *)(v16 + 8) = 0;
          v20 = v17 & 0xFFFFFFFFFFFFFFFCLL;
          goto LABEL_23;
        }
        v19 = *(unsigned int *)(v18 + 8);
        v20 = *(_QWORD *)(*(_QWORD *)v18 + 8 * v19 - 8);
        if (v18)
          goto LABEL_22;
LABEL_23:
        v21 = v20 & 0xFFFFFFFFFFFFFFF8;
        v122 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v20 & 0xFFFFFFFFFFFFFFF8);
        if ((v20 & 4) != 0)
        {
          v25 = v106;
LABEL_30:
          sub_1C518D044(v25, (uint64_t *)&v122);
          goto LABEL_31;
        }
        v22 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v21 + 40))(v20 & 0xFFFFFFFFFFFFFFF8);
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
        v23 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v21 + 40))(v21);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23) & 1) == 0)
        {
          v25 = v101;
          goto LABEL_30;
        }
        v24 = v115;
        if (v115 >= (unint64_t)HIDWORD(v115))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, (uint64_t)v116, v115 + 1, 8);
          v24 = v115;
        }
        *((_QWORD *)v114 + v24) = v21;
        LODWORD(v115) = v115 + 1;
LABEL_31:
        v17 = *(_QWORD *)(v16 + 8);
      }
      while (v17 > 3);
      v13 = v103;
      v12 = v104;
LABEL_33:
      v14 = ++v15;
    }
    while (v15 < (unint64_t)((v12 - v13) >> 3));
LABEL_34:
    if (!(_DWORD)v115)
      goto LABEL_49;
    v26 = (char *)v114;
    v27 = (char *)v114 + 8 * v115;
    while (2)
    {
      v28 = *(_QWORD *)v26;
      v29 = *(_QWORD *)(*(_QWORD *)v26 + 8);
      if (v29 < 4)
        goto LABEL_48;
      while (2)
      {
        v30 = v29 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v29 & 2) != 0 && v30)
        {
          v31 = *(unsigned int *)(v30 + 8);
          if (!(_DWORD)v31)
            goto LABEL_48;
LABEL_43:
          v30 = *(_QWORD *)(*(_QWORD *)v30 + 8 * v31 - 8);
        }
        else if ((v29 & 2) != 0)
        {
          v31 = *(unsigned int *)(v30 + 8);
          goto LABEL_43;
        }
        v122 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v30 & 0xFFFFFFFFFFFFFFF8);
        sub_1C518D044(v106, (uint64_t *)&v122);
        v29 = *(_QWORD *)(v28 + 8);
        if ((v29 & 2) != 0)
        {
          if ((v29 & 0xFFFFFFFFFFFFFFFCLL) == 0)
            goto LABEL_48;
          --*(_DWORD *)((v29 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          continue;
        }
        break;
      }
      *(_QWORD *)(v28 + 8) = 0;
LABEL_48:
      v26 += 8;
      if (v26 != v27)
        continue;
      break;
    }
LABEL_49:
    LODWORD(v115) = 0;
    sub_1C6189548((unsigned int *)v101);
    v104 = v103;
    v33 = (llvm::AbstractAttribute **)v108;
    v32 = (llvm::AbstractAttribute **)v109;
    while (v33 != v32)
    {
      v34 = *v33;
      v122 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v34;
      v35 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v34 + 40))(v34);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35) & 1) == 0
        && !llvm::Attributor::updateAA(this, v34))
      {
        v36 = v115;
        if (v115 >= (unint64_t)HIDWORD(v115))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, (uint64_t)v116, v115 + 1, 8);
          v36 = v115;
        }
        *((_QWORD *)v114 + v36) = v34;
        LODWORD(v115) = v115 + 1;
      }
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35) & 1) == 0)
        sub_1C518D044(v101, (uint64_t *)&v122);
      ++v33;
    }
    v37 = *v100;
    if ((*v100 & 2) != 0)
    {
      v41 = v37 & 0xFFFFFFFFFFFFFFFCLL;
      v39 = *(char **)(v37 & 0xFFFFFFFFFFFFFFFCLL);
      v38 = (uint64_t)&v39[8 * *(unsigned int *)(v41 + 8)];
    }
    else
    {
      v38 = (uint64_t)&v100[v37 > 3];
      v39 = (char *)this + 104;
    }
    sub_1C6284CD8((unsigned int *)&v114, (uint64_t)&v39[8 * v11], (uint64_t (*)(uint64_t))sub_1C6286CCC, v38);
    sub_1C6189548((unsigned int *)v106);
    v109 = v108;
    if ((_DWORD)v115)
    {
      v42 = (uint64_t *)v114;
      v43 = (uint64_t *)((char *)v114 + 8 * v115);
      do
      {
        sub_1C61B7564((uint64_t)&v122, (uint64_t)v106, v42);
        if ((_BYTE)v124)
        {
          v44 = v109;
          if (v109 >= (uint64_t *)v110)
          {
            v46 = v108;
            v47 = v109 - v108;
            v48 = v47 + 1;
            if ((unint64_t)(v47 + 1) >> 61)
LABEL_180:
              abort();
            v49 = v110 - (char *)v108;
            if ((v110 - (char *)v108) >> 2 > v48)
              v48 = v49 >> 2;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
              v50 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v50 = v48;
            if (v50)
            {
              if (v50 >> 61)
LABEL_181:
                sub_1C4764EE4();
              v51 = (char *)operator new(8 * v50);
            }
            else
            {
              v51 = 0;
            }
            v52 = (uint64_t *)&v51[8 * v47];
            *v52 = *v42;
            v45 = v52 + 1;
            if (v44 != v46)
            {
              do
              {
                v53 = *--v44;
                *--v52 = v53;
              }
              while (v44 != v46);
              v44 = v108;
            }
            v108 = v52;
            v110 = &v51[8 * v50];
            if (v44)
              operator delete(v44);
          }
          else
          {
            *v109 = *v42;
            v45 = v44 + 1;
          }
          v109 = v45;
        }
        ++v42;
      }
      while (v42 != v43);
    }
    v54 = *((unsigned int *)this + 1332);
    if ((_DWORD)v54)
    {
      v55 = (uint64_t *)*((_QWORD *)this + 665);
      v56 = &v55[v54];
      do
      {
        sub_1C61B7564((uint64_t)&v122, (uint64_t)v106, v55);
        if ((_BYTE)v124)
        {
          v57 = v109;
          if (v109 >= (uint64_t *)v110)
          {
            v59 = v108;
            v60 = v109 - v108;
            v61 = v60 + 1;
            if ((unint64_t)(v60 + 1) >> 61)
              goto LABEL_180;
            v62 = v110 - (char *)v108;
            if ((v110 - (char *)v108) >> 2 > v61)
              v61 = v62 >> 2;
            if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
              v63 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v63 = v61;
            if (v63)
            {
              if (v63 >> 61)
                goto LABEL_181;
              v64 = (char *)operator new(8 * v63);
            }
            else
            {
              v64 = 0;
            }
            v65 = (uint64_t *)&v64[8 * v60];
            *v65 = *v55;
            v58 = v65 + 1;
            if (v57 != v59)
            {
              do
              {
                v66 = *--v57;
                *--v65 = v66;
              }
              while (v57 != v59);
              v57 = v108;
            }
            v108 = v65;
            v110 = &v64[8 * v63];
            if (v57)
              operator delete(v57);
          }
          else
          {
            *v109 = *v55;
            v58 = v57 + 1;
          }
          v109 = v58;
        }
        ++v55;
      }
      while (v55 != v56);
    }
    v67 = (uint64_t)sub_1C62886F8((_QWORD *)this + 648);
    *((_DWORD *)this + 1332) = 0;
    if (v108 == v109)
    {
      v68 = v9;
      break;
    }
    v68 = v9 + 1;
    if (v9++ >= v99)
    {
      v9 = v68;
      if (!byte_1ED809608)
        break;
    }
  }
  if (v68 > v99)
  {
    v70 = *((_QWORD *)this + 10);
    v71 = *(uint64_t **)(v70 + 24);
    if (v71 != *(uint64_t **)(v70 + 32))
    {
      v72 = (uint64_t (*)(_QWORD, uint64_t))*((_QWORD *)this + 687);
      if (v72)
      {
        v73 = *v71;
        v74 = (llvm::OptimizationRemarkEmitter *)v72(*((_QWORD *)this + 688), *v71);
        v75 = ****(_QWORD ****)v74;
        if (*(_QWORD *)(v75 + 128)
          || (v67 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v75 + 72) + 48))(*(_QWORD *)(v75 + 72)),
              (_DWORD)v67))
        {
          llvm::OptimizationRemarkMissed::OptimizationRemarkMissed((uint64_t)&v122, *((_QWORD *)this + 689), (uint64_t)"FixedPoint", 10, v73);
          v117 = "Attributor did not reach a fixpoint after ";
          v118 = 42;
          sub_1C53B17B4((uint64_t)&v127, (const void **)&v117);
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v111, "Iterations", 0xAuLL, v99);
          v76 = sub_1C47E3888((uint64_t)&v122, (uint64_t)&v111);
          v117 = " iterations.";
          v118 = 12;
          sub_1C53B17B4(v76 + 80, (const void **)&v117);
          sub_1C61998EC((uint64_t)&v117, v76);
          v117 = (const char *)&off_1E814E538;
          if (v113 < 0)
            operator delete(__p);
          if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v111.__r_.__value_.__l.__data_);
          v122 = &off_1E814E790;
          v77 = (char *)v127;
          if (v128)
          {
            v78 = (unint64_t)v128 << 6;
            do
            {
              v79 = (void **)&v77[v78];
              if (v77[v78 - 17] < 0)
                operator delete(*(v79 - 5));
              if (*((char *)v79 - 41) < 0)
                operator delete(*(v79 - 8));
              v78 -= 64;
            }
            while (v78);
            v77 = (char *)v127;
          }
          if (v77 != (char *)v129)
            free(v77);
          v67 = llvm::OptimizationRemarkEmitter::emit(v74, (llvm::DiagnosticInfoOptimizationBase *)&v117);
          v117 = (const char *)&off_1E814E790;
          v80 = (char *)v119;
          if (v120)
          {
            v81 = (unint64_t)v120 << 6;
            do
            {
              v82 = (void **)&v80[v81];
              if (v80[v81 - 17] < 0)
                operator delete(*(v82 - 5));
              if (*((char *)v82 - 41) < 0)
                operator delete(*(v82 - 8));
              v81 -= 64;
            }
            while (v81);
            v80 = (char *)v119;
          }
          if (v80 != (char *)&v121)
            free(v80);
        }
      }
    }
  }
  v122 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v126;
  v123 = v126;
  v124 = 32;
  v125 = 0;
  if ((_DWORD)v115)
  {
    v83 = 0;
    while (1)
    {
      v84 = (_QWORD *)*((_QWORD *)v114 + v83);
      v67 = (uint64_t)sub_1C4774094((llvm::SmallPtrSetImplBase *)&v122, (uint64_t)v84);
      if (v85)
      {
        v86 = (*(uint64_t (**)(_QWORD *))(*v84 + 40))(v84);
        v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v86 + 24))(v86);
        if ((v67 & 1) == 0)
          v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v86 + 40))(v86);
        v87 = v84[1];
        if (v87 >= 4)
          break;
      }
LABEL_167:
      if (++v83 >= (unint64_t)v115)
        goto LABEL_168;
    }
    while (2)
    {
      v88 = v87 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v87 & 2) != 0 && v88)
      {
        v89 = *(unsigned int *)(v88 + 8);
        if (!(_DWORD)v89)
          goto LABEL_167;
LABEL_160:
        v88 = *(_QWORD *)(*(_QWORD *)v88 + 8 * v89 - 8);
      }
      else if ((v87 & 2) != 0)
      {
        v89 = *(unsigned int *)(v88 + 8);
        goto LABEL_160;
      }
      v90 = v115;
      if (v115 >= (unint64_t)HIDWORD(v115))
      {
        v67 = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, (uint64_t)v116, v115 + 1, 8);
        v90 = v115;
      }
      *((_QWORD *)v114 + v90) = v88 & 0xFFFFFFFFFFFFFFF8;
      LODWORD(v115) = v115 + 1;
      v87 = v84[1];
      if ((v87 & 2) == 0)
      {
        v84[1] = 0;
        goto LABEL_167;
      }
      if ((v87 & 0xFFFFFFFFFFFFFFFCLL) == 0)
        goto LABEL_167;
      --*(_DWORD *)((v87 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      continue;
    }
  }
LABEL_168:
  if (byte_1ED809608)
    v91 = v68 == v99;
  else
    v91 = 1;
  if (v91)
  {
    if (v123 != v122)
      free(v123);
    sub_1C6176BF8(v101);
    sub_1C6176BF8(v106);
    if (v114 != v116)
      free(v114);
    result = *v98;
    if (*v98)
      return (llvm::raw_ostream *)sub_1C6392DC0((uint64_t)result);
  }
  else
  {
    v92 = (llvm::raw_ostream *)llvm::errs((llvm *)v67);
    v93 = sub_1C4816AD8(v92, "\n[Attributor] Fixpoint iteration done after: ");
    v94 = sub_1C6196914(v93, v68);
    v95 = sub_1C4816AD8(v94, "/");
    v96 = sub_1C6196914(v95, v99);
    result = sub_1C4816AD8(v96, " iterations\n");
    __break(1u);
  }
  return result;
}

uint64_t llvm::Attributor::updateAA(llvm::Attributor *this, llvm::AbstractAttribute *a2)
{
  _QWORD *v4;
  int v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  char v12;
  int v13;
  uint64_t *v14;
  void **v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::string v23;
  void *v24[2];
  char v25;
  std::string v26;
  void *__p[2];
  _QWORD v28[26];

  v28[25] = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)((char *)a2 + 16);
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)a2 + 72))(v24, a2);
  v5 = sub_1C6283CA4(v4);
  std::to_string(&v23, v5);
  if (v25 >= 0)
    v6 = v24;
  else
    v6 = (void **)v24[0];
  if (v25 >= 0)
    v7 = v25 & 0x7F;
  else
    v7 = (std::string::size_type)v24[1];
  v8 = std::string::insert(&v23, 0, (const std::string::value_type *)v6, v7);
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v26, "::updateAA");
  v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v28[0] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v14 = (uint64_t *)off_1EF8EEB50();
  if (*v14)
  {
    if (v13 >= 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    v16 = (void *)(v12 & 0x7F);
    if (v13 >= 0)
      v17 = v16;
    else
      v17 = __p[1];
    llvm::timeTraceProfilerBegin(v15, (size_t)v17, (uint64_t)&unk_1C872ACEA, 0);
    LOBYTE(v13) = HIBYTE(v28[0]);
  }
  if ((v13 & 0x80) != 0)
    operator delete(__p[0]);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (v25 < 0)
    operator delete(v24[0]);
  __p[0] = v28;
  __p[1] = (void *)0x800000000;
  v18 = *((unsigned int *)this + 68);
  if (v18 >= *((_DWORD *)this + 69))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 264, (uint64_t)this + 280, v18 + 1, 8);
    LODWORD(v18) = *((_DWORD *)this + 68);
  }
  *(_QWORD *)(*((_QWORD *)this + 33) + 8 * v18) = __p;
  ++*((_DWORD *)this + 68);
  v19 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)a2 + 40))(a2);
  v20 = 1;
  if ((llvm::Attributor::isAssumedDead((uint64_t)this, (uint64_t)a2, 0, &v26, 1, 1) & 1) == 0)
  {
    v21 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)a2 + 40))(a2);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21) & 1) == 0)
      v20 = (*(uint64_t (**)(llvm::AbstractAttribute *, llvm::Attributor *))(*(_QWORD *)a2 + 104))(a2, this);
  }
  if (((*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)a2 + 32))(a2) & 1) == 0 && !LODWORD(__p[1]))
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19) & 1) == 0)
    llvm::Attributor::rememberDependences((uint64_t)this);
  --*((_DWORD *)this + 68);
  if (__p[0] != v28)
    free(__p[0]);
  if (*v14)
    sub_1C6392DC0(*v14);
  return v20;
}

uint64_t llvm::Attributor::manifestAttributes(llvm::Attributor *this)
{
  uint64_t isAssumedDead;
  uint64_t *v3;
  unint64_t v4;
  unint64_t *v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t *v16;
  uint64_t *v17;
  unsigned int v18;
  int v19;
  unint64_t v20;
  uint64_t v22;
  llvm::raw_ostream *v23;
  llvm::raw_ostream *v24;
  _OWORD *v25;
  unint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  llvm::Value *v29;
  _BYTE *v30;
  _OWORD v31[2];
  uint64_t v32;
  unint64_t v33;

  isAssumedDead = off_1EF8EEB50();
  v3 = (uint64_t *)isAssumedDead;
  if (*(_QWORD *)isAssumedDead)
    llvm::timeTraceProfilerBegin("Attributor::manifestAttributes", 0x1EuLL, (uint64_t)&unk_1C872ACEA, 0);
  v5 = (unint64_t *)((char *)this + 104);
  v4 = *((_QWORD *)this + 13);
  if (v4 >= 4)
  {
    v7 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v4 & 2) != 0 && v7 || (v4 & 2) != 0)
    {
      v6 = *(_DWORD *)(v7 + 8);
      goto LABEL_12;
    }
    v6 = 1;
LABEL_10:
    v8 = (uint64_t)&v5[v4 > 3];
    v9 = (_QWORD *)((char *)this + 104);
    goto LABEL_13;
  }
  v6 = 0;
  if ((v4 & 2) == 0)
    goto LABEL_10;
  v7 = 0;
LABEL_12:
  v9 = *(_QWORD **)v7;
  v8 = *(_QWORD *)v7 + 8 * *(unsigned int *)(v7 + 8);
LABEL_13:
  v10 = 1;
  if (v9 == (_QWORD *)v8)
    goto LABEL_41;
  do
  {
    v11 = *v9 & 0xFFFFFFFFFFFFFFF8;
    v12 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v11 + 40))(v11);
    isAssumedDead = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
    if ((isAssumedDead & 1) == 0)
      isAssumedDead = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    if (!*(_QWORD *)(v11 + 24))
    {
      isAssumedDead = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
      if ((_DWORD)isAssumedDead)
      {
        v13 = (_QWORD *)(v11 + 16);
        if (!sub_1C5676CEC((_DWORD *)(v11 + 16)))
        {
LABEL_31:
          isAssumedDead = llvm::Attributor::isAssumedDead((uint64_t)this, v11, 0, &v33, 1, 1);
          if ((isAssumedDead & 1) == 0)
          {
            isAssumedDead = (*(uint64_t (**)(unint64_t, llvm::Attributor *))(*(_QWORD *)v11 + 88))(v11, this);
            v18 = isAssumedDead;
            if (!(_DWORD)isAssumedDead && ((byte_1ED836D79 & 1) != 0 || byte_1EF8F7308))
              isAssumedDead = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v11 + 96))(v11);
            if ((_DWORD)v10)
              v10 = v18;
            else
              v10 = 0;
          }
          goto LABEL_18;
        }
        v14 = *v13 & 0xFFFFFFFFFFFFFFFCLL;
        if ((~*(_DWORD *)v13 & 3) == 0)
          v14 = *(_QWORD *)(v14 + 24);
        v15 = *(unsigned __int8 *)(v14 + 16);
        if (*(_BYTE *)(v14 + 16))
        {
          if (v15 == 21)
          {
            v16 = (unint64_t *)(v14 + 24);
          }
          else
          {
            if (v15 < 0x1C)
            {
              v14 = 0;
              goto LABEL_30;
            }
            v16 = (unint64_t *)(*(_QWORD *)(v14 + 40) + 56);
          }
          v14 = *v16;
        }
LABEL_30:
        v17 = (uint64_t *)*((_QWORD *)this + 10);
        if (v17[3] != v17[4])
        {
          v32 = 0;
          v33 = v14;
          isAssumedDead = sub_1C614F7B0(v17, &v33, &v32);
          if (!(_DWORD)isAssumedDead)
            goto LABEL_18;
        }
        goto LABEL_31;
      }
    }
LABEL_18:
    ++v9;
  }
  while (v9 != (_QWORD *)v8);
  v4 = *v5;
LABEL_41:
  if (v4 >= 4)
  {
    v20 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v4 & 2) != 0 && v20 || (v4 & 2) != 0)
      v19 = *(_DWORD *)(v20 + 8);
    else
      v19 = 1;
  }
  else
  {
    v19 = 0;
  }
  if (v6 != v19)
  {
    v22 = v6;
    qmemcpy(v31, "ract attribute: Unexpected abstr", sizeof(v31));
    while (1)
    {
      v23 = (llvm::raw_ostream *)llvm::errs((llvm *)isAssumedDead);
      v24 = v23;
      v25 = (_OWORD *)*((_QWORD *)v23 + 4);
      if (*((_QWORD *)v23 + 3) - (_QWORD)v25 > 0x1EuLL)
      {
        *v25 = v31[1];
        *(_OWORD *)((char *)v25 + 15) = v31[0];
        *((_QWORD *)v23 + 4) += 31;
      }
      else
      {
        llvm::raw_ostream::write(v23, "Unexpected abstract attribute: ", 0x1FuLL);
      }
      v26 = *v5 & 0xFFFFFFFFFFFFFFFCLL;
      if ((*v5 & 2) != 0)
        v26 = *(_QWORD *)(*(_QWORD *)v26 + 8 * v22);
      llvm::write_hex(v24, v26 & 0xFFFFFFFFFFFFFFF8, 3, 0, 0);
      v27 = (_DWORD *)*((_QWORD *)v24 + 4);
      if (*((_QWORD *)v24 + 3) - (_QWORD)v27 > 3uLL)
      {
        *v27 = 540686880;
        *((_QWORD *)v24 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(v24, " :: ", 4uLL);
      }
      v28 = *v5 & 0xFFFFFFFFFFFFFFFCLL;
      if ((*v5 & 2) != 0)
        v28 = *(_QWORD *)(*(_QWORD *)v28 + 8 * v22);
      v29 = (llvm::Value *)sub_1C6284150((llvm::IRPosition *)((v28 & 0xFFFFFFFFFFFFFFF8) + 16));
      llvm::Value::print(v29, v24, 0);
      v30 = (_BYTE *)*((_QWORD *)v24 + 4);
      if (*((_BYTE **)v24 + 3) == v30)
      {
        isAssumedDead = (uint64_t)llvm::raw_ostream::write(v24, "\n", 1uLL);
      }
      else
      {
        *v30 = 10;
        ++*((_QWORD *)v24 + 4);
      }
      ++v22;
    }
  }
  if (*v3)
    sub_1C6392DC0(*v3);
  return v10;
}

void llvm::Attributor::identifyDeadInternalFunctions(llvm::Attributor *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14[2];
  char v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  _BYTE v20[64];
  void *v21;
  uint64_t v22;
  _QWORD v23[9];

  v23[8] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 5465))
  {
    v21 = v23;
    v22 = 0x800000000;
    v2 = *((_QWORD *)this + 10);
    v3 = *(uint64_t **)(v2 + 24);
    v4 = *(uint64_t **)(v2 + 32);
    if (v3 != v4)
    {
      v5 = 0;
      do
      {
        v6 = *v3;
        if ((*(_DWORD *)(*v3 + 32) & 0xFu) - 7 <= 1)
        {
          if (v5 >= HIDWORD(v22))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, (uint64_t)v23, v5 + 1, 8);
            v5 = v22;
          }
          *((_QWORD *)v21 + v5) = v6;
          v5 = v22 + 1;
          LODWORD(v22) = v22 + 1;
        }
        ++v3;
      }
      while (v3 != v4);
    }
    v16 = v20;
    v17 = v20;
    v18 = 8;
    v19 = 0;
    while ((_DWORD)v22)
    {
      v7 = 0;
      v8 = 0;
      v9 = 8 * v22;
      do
      {
        v10 = *(_QWORD *)((char *)v21 + v7);
        if (v10)
        {
          v14[0] = (uint64_t)this;
          v14[1] = (uint64_t)&v16;
          if ((llvm::Attributor::checkForAllCallSites((uint64_t)this, (uint64_t (*)(uint64_t, uint64_t *))sub_1C5684E90, (uint64_t)v14, v10, 1, 0, &v15) & 1) == 0)
          {
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v16, v10);
            *(_QWORD *)((char *)v21 + v7) = 0;
            v8 = 1;
          }
        }
        v7 += 8;
      }
      while (v9 != v7);
      if ((v8 & 1) == 0)
      {
        if ((_DWORD)v22)
        {
          v11 = 0;
          v12 = (char *)this + 4472;
          v13 = 8 * v22;
          do
          {
            v14[0] = 0;
            v14[0] = *(_QWORD *)((char *)v21 + v11);
            if (v14[0])
              sub_1C567A2A0((uint64_t)v12, v14);
            v11 += 8;
          }
          while (v13 != v11);
        }
        break;
      }
    }
    if (v17 != v16)
      free(v17);
    if (v21 != v23)
      free(v21);
  }
}

BOOL sub_1C567A2A0(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  _BYTE v9[16];
  unsigned __int8 v10;

  sub_1C5682F3C(a1, a2, (uint64_t)v9);
  v4 = v10;
  if (v10)
  {
    v5 = *a2;
    v6 = *(unsigned int *)(a1 + 80);
    if (v6 >= *(_DWORD *)(a1 + 84))
    {
      v8 = v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 72, a1 + 88, v6 + 1, 8);
      v4 = v8;
      LODWORD(v6) = *(_DWORD *)(a1 + 80);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 80);
  }
  return v4 != 0;
}

uint64_t llvm::Attributor::cleanupIR(llvm::Attributor *this)
{
  const llvm::Function *v2;
  llvm::DomTreeUpdater *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  llvm::MemorySSAUpdater *v28;
  unsigned int v29;
  char *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char hasFnAttrOnCalledFunction;
  int v37;
  _QWORD *v38;
  llvm *v39;
  _QWORD *v40;
  _QWORD *v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  int32x2_t *v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  llvm::Type *v70;
  llvm::UndefValue *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  int v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  int32x2_t *v83;
  unint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  int v90;
  int v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  int32x2_t *v99;
  unint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  int v106;
  int v107;
  unint64_t *v108;
  _QWORD *v109;
  void (**v110)(_QWORD *);
  unint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  void **v117;
  uint64_t v118;
  void *v119;
  uint64_t *v120;
  void **v121;
  uint64_t v122;
  void *v123;
  uint64_t *v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  uint64_t *v132;
  uint64_t *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  int32x2_t *v142;
  unint64_t v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  int v149;
  int v150;
  unint64_t v151;
  unint64_t v152;
  BOOL v153;
  uint64_t v155;
  unint64_t *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  int32x2_t *v161;
  unint64_t v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  int v168;
  int v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176[3];
  uint64_t v177;
  void *v178;
  uint64_t v179;
  _QWORD v180[8];
  _QWORD v181[3];
  _QWORD *v182;
  void *v183;
  uint64_t v184;
  _BYTE v185[32];
  void *v186;
  uint64_t v187;
  _BYTE v188[256];
  char *v189;
  uint64_t v190;
  _QWORD v191[98];

  v191[96] = *MEMORY[0x1E0C80C00];
  v175 = (uint64_t *)off_1EF8EEB50();
  if (*v175)
    llvm::timeTraceProfilerBegin("Attributor::cleanupIR", 0x15uLL, (uint64_t)&unk_1C872ACEA, 0);
  v189 = (char *)v191;
  v190 = 0x2000000000;
  v186 = v188;
  v187 = 0x2000000000;
  v176[0] = (uint64_t)this;
  v176[1] = (uint64_t)&v189;
  v176[2] = (uint64_t)&v186;
  v4 = *((unsigned int *)this + 240);
  if ((_DWORD)v4)
  {
    v5 = (unint64_t *)*((_QWORD *)this + 119);
    v6 = &v5[2 * v4];
    do
    {
      v7 = *v5;
      v8 = v5[1];
      v5 += 2;
      sub_1C567B2D4(v176, v7, v8);
    }
    while (v5 != v6);
  }
  v183 = v185;
  v184 = 0x400000000;
  v9 = *((_DWORD *)this + 502);
  if (v9)
  {
    v10 = (uint64_t *)*((_QWORD *)this + 250);
    v11 = &v10[3 * v9];
    do
    {
      v12 = *v10;
      v13 = v10[1];
      LODWORD(v184) = 0;
      v14 = *(_QWORD *)(v12 + 8);
      if (v14)
      {
        do
        {
          if (*((_BYTE *)v10 + 16) || (v16 = *(_QWORD *)(v14 + 24), !sub_1C4D9F8B4(v16)) && !sub_1C509DDB0(v16))
          {
            v15 = v184;
            if (v184 >= (unint64_t)HIDWORD(v184))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v183, (uint64_t)v185, v184 + 1, 8);
              v15 = v184;
            }
            *((_QWORD *)v183 + v15) = v14;
            LODWORD(v184) = v184 + 1;
          }
          v14 = *(_QWORD *)(v14 + 8);
        }
        while (v14);
        if ((_DWORD)v184)
        {
          v17 = (unint64_t *)v183;
          v18 = 8 * v184;
          do
          {
            v19 = *v17++;
            sub_1C567B2D4(v176, v19, v13);
            v18 -= 8;
          }
          while (v18);
        }
      }
      v10 += 3;
    }
    while (v10 != v11);
  }
  v20 = *((_DWORD *)this + 994);
  if (v20)
  {
    v32 = *((_QWORD *)this + 496);
    v33 = v32 + 24 * v20;
    do
    {
      v34 = *(_QWORD *)(v32 + 16);
      if (!v34 || *(_BYTE *)(v34 + 16) != 33)
        goto LABEL_36;
      v35 = *(_QWORD *)(v34 + 64);
      if (v35 && (*(_BYTE *)(v35 + 16) & 0x20) != 0)
      {
        hasFnAttrOnCalledFunction = 1;
      }
      else
      {
        hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction(*(_QWORD *)(v32 + 16), 37);
        v35 = *(_QWORD *)(v34 + 64);
        if (!v35)
          goto LABEL_42;
      }
      if ((*(_BYTE *)(v35 + 16) & 1) == 0)
      {
LABEL_42:
        v37 = llvm::CallBase::hasFnAttrOnCalledFunction(v34, 32);
        goto LABEL_43;
      }
      v37 = 1;
LABEL_43:
      v38 = *(_QWORD **)(v34 + 40);
      v39 = (llvm *)v38[7];
      if ((*((_WORD *)v39 + 9) & 8) == 0)
      {
        if ((hasFnAttrOnCalledFunction & 1) != 0)
        {
LABEL_45:
          llvm::changeToCall((llvm::BasicBlock **)v34, 0, v3);
          v40 = (_QWORD *)v38[5];
          if (v40 == v38 + 5)
          {
            v41 = 0;
            if (!v37)
              goto LABEL_36;
          }
          else
          {
            if (v40)
              v41 = v40 - 3;
            else
              v41 = 0;
            if (*((unsigned __int8 *)v41 + 16) - 29 >= 0xB)
              v41 = 0;
            if (!v37)
              goto LABEL_36;
          }
LABEL_59:
          v178 = (void *)4;
          v179 = 0;
          v180[0] = v41;
          if (v41 != (_QWORD *)-8192 && v41 != (_QWORD *)-4096 && v41)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v178);
          sub_1C6284E2C((uint64_t)this + 2784, (uint64_t *)&v178);
          if (v180[0] == -8192 || v180[0] == -4096 || !v180[0])
            goto LABEL_36;
          v45 = (unint64_t)v178 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)((unint64_t)v178 & 0xFFFFFFFFFFFFFFF8) = v179;
          v46 = (_QWORD *)v179;
          if (v179)
          {
LABEL_101:
            *v46 = *v46 & 7 | v45;
            goto LABEL_36;
          }
          v47 = v180[0];
          v48 = ***(int32x2_t ****)v180[0];
          v49 = (unint64_t)v48[303];
          if (v49 > v45)
            goto LABEL_36;
          v50 = v48[305].u32[0];
          if (v49 + 16 * v50 <= v45)
            goto LABEL_36;
          v51 = v50 - 1;
          LODWORD(v52) = v51 & ((LODWORD(v180[0]) >> 4) ^ (LODWORD(v180[0]) >> 9));
          v53 = (uint64_t *)(v49 + 16 * v52);
          v54 = *v53;
          if (v180[0] != *v53)
          {
            v55 = 1;
            while (v54 != -4096)
            {
              v56 = v52 + v55++;
              v52 = v56 & v51;
              v54 = *(_QWORD *)(v49 + 16 * v52);
              if (v180[0] == v54)
                goto LABEL_96;
            }
            goto LABEL_98;
          }
        }
        else
        {
          v43 = *(_QWORD *)(v34 - 96);
LABEL_75:
          if (!llvm::BasicBlock::getUniquePredecessor((llvm::BasicBlock *)v43))
          {
            v178 = v38;
            v43 = sub_1C5EBE3AC((uint64_t **)v43, (uint64_t *)&v178, 1, ".dead", 0, 0, 0, 0, 0);
          }
          v57 = *(_QWORD *)(v43 + 48);
          if (v57)
            v58 = v57 - 24;
          else
            v58 = 0;
          v178 = (void *)4;
          v179 = 0;
          v180[0] = v58;
          if (v58 != -8192 && v58 != -4096 && v58 != 0)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v178);
          sub_1C6284E2C((uint64_t)this + 2784, (uint64_t *)&v178);
          if (v180[0] == -8192 || v180[0] == -4096 || !v180[0])
            goto LABEL_36;
          v45 = (unint64_t)v178 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)((unint64_t)v178 & 0xFFFFFFFFFFFFFFF8) = v179;
          v46 = (_QWORD *)v179;
          if (v179)
            goto LABEL_101;
          v47 = v180[0];
          v48 = ***(int32x2_t ****)v180[0];
          v49 = (unint64_t)v48[303];
          if (v49 > v45)
            goto LABEL_36;
          v60 = v48[305].u32[0];
          if (v49 + 16 * v60 <= v45)
            goto LABEL_36;
          v61 = v60 - 1;
          LODWORD(v52) = v61 & ((LODWORD(v180[0]) >> 4) ^ (LODWORD(v180[0]) >> 9));
          v53 = (uint64_t *)(v49 + 16 * v52);
          v62 = *v53;
          if (v180[0] != *v53)
          {
            v63 = 1;
            while (v62 != -4096)
            {
              v64 = v52 + v63++;
              v52 = v64 & v61;
              v62 = *(_QWORD *)(v49 + 16 * v52);
              if (v180[0] == v62)
              {
LABEL_96:
                v53 = (uint64_t *)(v49 + 16 * v52);
                goto LABEL_97;
              }
            }
            goto LABEL_98;
          }
        }
LABEL_97:
        *v53 = -8192;
        v48[304] = vadd_s32(v48[304], (int32x2_t)0x1FFFFFFFFLL);
        v47 = v180[0];
LABEL_98:
        *(_BYTE *)(v47 + 17) &= ~1u;
        goto LABEL_36;
      }
      v42 = llvm::canSimplifyInvokeNoUnwind(v39, v2);
      v38 = *(_QWORD **)(v34 + 40);
      v43 = *(_QWORD *)(v34 - 96);
      if ((hasFnAttrOnCalledFunction & 1) == 0)
        goto LABEL_75;
      v44 = *(_QWORD *)(v43 + 48);
      if (v44)
        v41 = (_QWORD *)(v44 - 24);
      else
        v41 = 0;
      if (v42)
        goto LABEL_45;
      if (v37)
        goto LABEL_59;
LABEL_36:
      v32 += 24;
    }
    while (v32 != v33);
  }
  if ((_DWORD)v187)
  {
    v21 = (uint64_t *)v186;
    v22 = 8 * v187;
    do
    {
      v23 = *v21++;
      v178 = *(void **)(*(_QWORD *)(v23 + 40) + 56);
      sub_1C567A2A0((uint64_t)this + 112, (uint64_t *)&v178);
      llvm::ConstantFoldTerminator(*(_QWORD *)(v23 + 40), 0, 0, 0);
      v22 -= 8;
    }
    while (v22);
  }
  v24 = *((unsigned int *)this + 796);
  if ((_DWORD)v24)
  {
    v25 = 24 * v24;
    v26 = (uint64_t *)(*((_QWORD *)this + 397) + 16);
    do
    {
      v27 = *v26;
      if (*v26 && *(unsigned __int8 *)(v27 + 16) >= 0x1Cu)
      {
        v178 = *(void **)(*(_QWORD *)(v27 + 40) + 56);
        sub_1C567A2A0((uint64_t)this + 112, (uint64_t *)&v178);
        llvm::changeToUnreachable((llvm *)v27, 0, 0, 0, v28);
      }
      v26 += 3;
      v25 -= 24;
    }
    while (v25);
  }
  v29 = *((_DWORD *)this + 1246);
  if (v29)
  {
    v65 = *((_QWORD *)this + 622);
    v66 = v65 + 24 * v29;
    while (1)
    {
      v67 = *(_QWORD *)(v65 + 16);
      if (v67)
      {
        v68 = *(unsigned __int8 *)(v67 + 16);
        if (v68 >= 0x1C)
          break;
      }
LABEL_121:
      v65 += 24;
      if (v65 == v66)
        goto LABEL_31;
    }
    if (v68 == 84)
    {
      v69 = *(_QWORD *)(v67 - 32);
      if (!v69
        || *(_BYTE *)(v69 + 16)
        || *(_QWORD *)(v69 + 24) != *(_QWORD *)(v67 + 72)
        || (*(_BYTE *)(v69 + 33) & 0x20) == 0)
      {
        goto LABEL_115;
      }
    }
    else if (v68 == 33 || v68 == 39)
    {
LABEL_115:
      llvm::CallGraphUpdater::removeCallSite(*((llvm::CallGraphUpdater **)this + 684), *(llvm::CallBase **)(v65 + 16));
    }
    llvm::Value::dropDroppableUses(v67, (unsigned int (*)(uint64_t, uint64_t))sub_1C62888B0, (uint64_t)&v178);
    v178 = *(void **)(*(_QWORD *)(v67 + 40) + 56);
    sub_1C567A2A0((uint64_t)this + 112, (uint64_t *)&v178);
    if (*(_BYTE *)(*(_QWORD *)v67 + 8) != 7)
    {
      v71 = llvm::UndefValue::get(*(llvm::UndefValue **)v67, v70);
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v67, v71, (llvm::Value *)1);
    }
    if (*(_BYTE *)(v67 + 16) == 83
      || *(_QWORD *)(v67 + 8)
      || !llvm::wouldInstructionBeTriviallyDead(v67, 0))
    {
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v67 + 40) + 40, (uint64_t ***)v67);
      v72 = *(_QWORD *)(v67 + 24);
      v73 = *(_QWORD **)(v67 + 32);
      *v73 = v72;
      *(_QWORD *)(v72 + 8) = v73;
      *(_QWORD *)(v67 + 24) = 0;
      *(_QWORD *)(v67 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v67);
    }
    else
    {
      v178 = (void *)6;
      v179 = 0;
      v180[0] = v67;
      if (v67 != -8192 && v67 != -4096)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v178);
      v74 = (_QWORD *)sub_1C5087E70((unsigned int *)&v189, (unint64_t)&v178, 1);
      v75 = v190;
      v76 = &v189[24 * v190];
      *(_QWORD *)v76 = 6;
      *((_QWORD *)v76 + 1) = 0;
      v77 = (unint64_t)(v76 + 8);
      v78 = v74[2];
      *((_QWORD *)v76 + 2) = v78;
      if (v78 != -8192 && v78 != -4096)
      {
        if (v78)
        {
          v79 = *v74 & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)v76 + 1) = *(_QWORD *)v79;
          *(_QWORD *)v79 = v76;
          *(_QWORD *)v76 = v79 | 6;
          v80 = (uint64_t *)*((_QWORD *)v76 + 1);
          if (v80)
            *v80 = *v80 & 7 | v77;
        }
      }
      LODWORD(v190) = v75 + 1;
      if (v180[0] != -8192 && v180[0] != -4096 && v180[0])
      {
        v81 = (unint64_t)v178 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)((unint64_t)v178 & 0xFFFFFFFFFFFFFFF8) = v179;
        if (v179)
        {
          *(_QWORD *)v179 = *(_QWORD *)v179 & 7 | v81;
        }
        else
        {
          v82 = v180[0];
          v83 = ***(int32x2_t ****)v180[0];
          v84 = (unint64_t)v83[303];
          if (v84 <= v81)
          {
            v85 = v83[305].u32[0];
            if (v84 + 16 * v85 > v81)
            {
              v86 = v85 - 1;
              LODWORD(v87) = v86 & ((LODWORD(v180[0]) >> 4) ^ (LODWORD(v180[0]) >> 9));
              v88 = (uint64_t *)(v84 + 16 * v87);
              v89 = *v88;
              if (v180[0] == *v88)
              {
LABEL_143:
                *v88 = -8192;
                v83[304] = vadd_s32(v83[304], (int32x2_t)0x1FFFFFFFFLL);
                v82 = v180[0];
              }
              else
              {
                v90 = 1;
                while (v89 != -4096)
                {
                  v91 = v87 + v90++;
                  v87 = v91 & v86;
                  v89 = *(_QWORD *)(v84 + 16 * v87);
                  if (v180[0] == v89)
                  {
                    v88 = (uint64_t *)(v84 + 16 * v87);
                    goto LABEL_143;
                  }
                }
              }
              *(_BYTE *)(v82 + 17) &= ~1u;
            }
          }
        }
      }
    }
    goto LABEL_121;
  }
LABEL_31:
  v30 = v189;
  v31 = v190;
  if (!(_DWORD)v190)
    goto LABEL_171;
  v92 = &v189[24 * v190];
  do
  {
    v93 = 0;
    v178 = (void *)6;
    v179 = 0;
    v94 = *((_QWORD *)v30 + 2);
    v180[0] = v94;
    if (v94 != -8192 && v94 != -4096 && v94 != 0)
    {
      v96 = *(_QWORD *)v30 & 0xFFFFFFFFFFFFFFF8;
      v179 = *(_QWORD *)v96;
      *(_QWORD *)v96 = &v178;
      v178 = (void *)(v96 | 6);
      v93 = v179;
      if (v179)
        *(_QWORD *)v179 = *(_QWORD *)v179 & 7 | (unint64_t)&v179;
      v94 = v180[0];
    }
    if (v94 == -8192 || v94 == -4096)
      goto LABEL_169;
    if (!v94)
    {
      v134 = v30 + 24;
      if (v30 + 24 == v92)
        goto LABEL_171;
      v108 = (unint64_t *)v30;
      while (1)
      {
        v135 = 0;
        v136 = v134;
        v178 = (void *)6;
        v179 = 0;
        v137 = *((_QWORD *)v30 + 5);
        v180[0] = v137;
        if (v137 != -8192 && v137 != -4096 && v137 != 0)
        {
          v139 = *(_QWORD *)v136 & 0xFFFFFFFFFFFFFFF8;
          v179 = *(_QWORD *)v139;
          *(_QWORD *)v139 = &v178;
          v178 = (void *)(v139 | 6);
          v135 = v179;
          if (v179)
            *(_QWORD *)v179 = *(_QWORD *)v179 & 7 | (unint64_t)&v179;
          v137 = v180[0];
        }
        if (v137 == -8192 || v137 == -4096)
          goto LABEL_230;
        if (v137)
          break;
LABEL_244:
        v134 = v136 + 24;
        v30 = v136;
        if (v136 + 24 == v92)
          goto LABEL_172;
      }
      v140 = (unint64_t)v178 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)((unint64_t)v178 & 0xFFFFFFFFFFFFFFF8) = v135;
      if (v179)
      {
        *(_QWORD *)v179 = *(_QWORD *)v179 & 7 | v140;
      }
      else
      {
        v141 = v180[0];
        v142 = ***(int32x2_t ****)v180[0];
        v143 = (unint64_t)v142[303];
        if (v143 <= v140)
        {
          v144 = v142[305].u32[0];
          if (v143 + 16 * v144 > v140)
          {
            v145 = v144 - 1;
            LODWORD(v146) = v145 & ((LODWORD(v180[0]) >> 4) ^ (LODWORD(v180[0]) >> 9));
            v147 = (uint64_t *)(v143 + 16 * v146);
            v148 = *v147;
            if (v180[0] == *v147)
            {
LABEL_227:
              *v147 = -8192;
              v142[304] = vadd_s32(v142[304], (int32x2_t)0x1FFFFFFFFLL);
              v141 = v180[0];
            }
            else
            {
              v149 = 1;
              while (v148 != -4096)
              {
                v150 = v146 + v149++;
                v146 = v150 & v145;
                v148 = *(_QWORD *)(v143 + 16 * v146);
                if (v180[0] == v148)
                {
                  v147 = (uint64_t *)(v143 + 16 * v146);
                  goto LABEL_227;
                }
              }
            }
            *(_BYTE *)(v141 + 17) &= ~1u;
          }
        }
      }
LABEL_230:
      v151 = v108[2];
      v152 = *((_QWORD *)v30 + 5);
      if (v151 != v152)
      {
        v153 = v151 == -4096 || v151 == 0;
        if (!v153 && v151 != -8192)
        {
          v158 = *v108 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v158 = v108[1];
          v159 = (unint64_t *)v108[1];
          if (v159)
          {
            *v159 = *v159 & 7 | v158;
          }
          else
          {
            v160 = v108[2];
            v161 = ***(int32x2_t ****)v160;
            v162 = (unint64_t)v161[303];
            if (v162 <= v158)
            {
              v163 = v161[305].u32[0];
              if (v162 + 16 * v163 > v158)
              {
                v164 = v163 - 1;
                LODWORD(v165) = v164 & ((v160 >> 4) ^ (v160 >> 9));
                v166 = (uint64_t *)(v162 + 16 * v165);
                v167 = *v166;
                if (v160 == *v166)
                {
LABEL_255:
                  *v166 = -8192;
                  v161[304] = vadd_s32(v161[304], (int32x2_t)0x1FFFFFFFFLL);
                  v160 = v108[2];
                }
                else
                {
                  v168 = 1;
                  while (v167 != -4096)
                  {
                    v169 = v165 + v168++;
                    v165 = v169 & v164;
                    v167 = *(_QWORD *)(v162 + 16 * v165);
                    if (v160 == v167)
                    {
                      v166 = (uint64_t *)(v162 + 16 * v165);
                      goto LABEL_255;
                    }
                  }
                }
                *(_BYTE *)(v160 + 17) &= ~1u;
              }
            }
          }
          v152 = *((_QWORD *)v30 + 5);
        }
        v108[2] = v152;
        if (v152 != -4096 && v152 != -8192 && v152 != 0)
        {
          v155 = *(_QWORD *)v136;
          v156 = (unint64_t *)(*(_QWORD *)v136 & 0xFFFFFFFFFFFFFFF8);
          v108[1] = *v156;
          *v156 = (unint64_t)v108;
          *v108 = v155 & 0xFFFFFFFFFFFFFFF8 | *v108 & 7;
          v157 = (unint64_t *)v108[1];
          if (v157)
            *v157 = *v157 & 7 | (unint64_t)(v108 + 1);
        }
      }
      v108 += 3;
      goto LABEL_244;
    }
    v97 = (unint64_t)v178 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)((unint64_t)v178 & 0xFFFFFFFFFFFFFFF8) = v93;
    if (v179)
    {
      *(_QWORD *)v179 = *(_QWORD *)v179 & 7 | v97;
    }
    else
    {
      v98 = v180[0];
      v99 = ***(int32x2_t ****)v180[0];
      v100 = (unint64_t)v99[303];
      if (v100 <= v97)
      {
        v101 = v99[305].u32[0];
        if (v100 + 16 * v101 > v97)
        {
          v102 = v101 - 1;
          LODWORD(v103) = v102 & ((LODWORD(v180[0]) >> 4) ^ (LODWORD(v180[0]) >> 9));
          v104 = (uint64_t *)(v100 + 16 * v103);
          v105 = *v104;
          if (v180[0] == *v104)
          {
LABEL_166:
            *v104 = -8192;
            v99[304] = vadd_s32(v99[304], (int32x2_t)0x1FFFFFFFFLL);
            v98 = v180[0];
          }
          else
          {
            v106 = 1;
            while (v105 != -4096)
            {
              v107 = v103 + v106++;
              v103 = v107 & v102;
              v105 = *(_QWORD *)(v100 + 16 * v103);
              if (v180[0] == v105)
              {
                v104 = (uint64_t *)(v100 + 16 * v103);
                goto LABEL_166;
              }
            }
          }
          *(_BYTE *)(v98 + 17) &= ~1u;
        }
      }
    }
LABEL_169:
    v30 += 24;
  }
  while (v30 != v92);
  v30 = v92;
LABEL_171:
  v108 = (unint64_t *)v30;
LABEL_172:
  sub_1C62888B8((uint64_t *)&v189, v108, (uint64_t *)&v189[24 * v31]);
  v182 = 0;
  llvm::RecursivelyDeleteTriviallyDeadInstructions((unsigned int *)&v189, 0, 0, (uint64_t)v181);
  v109 = v182;
  if (v182 == v181)
  {
    v110 = (void (**)(_QWORD *))(v181[0] + 32);
    v109 = v181;
    goto LABEL_176;
  }
  if (v182)
  {
    v110 = (void (**)(_QWORD *))(*v182 + 40);
LABEL_176:
    (*v110)(v109);
  }
  v111 = *((unsigned int *)this + 1176);
  if ((_DWORD)v111)
  {
    v178 = v180;
    v179 = 0x800000000;
    if (v111 <= 8)
    {
      v132 = (uint64_t *)*((_QWORD *)this + 587);
      v133 = &v132[v111];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v178, (uint64_t)v180, v111, 8);
      v112 = *((unsigned int *)this + 1176);
      if (!(_DWORD)v112)
        goto LABEL_180;
      v132 = (uint64_t *)*((_QWORD *)this + 587);
      v133 = &v132[v112];
    }
    do
    {
      v170 = *v132;
      v177 = *(_QWORD *)(*v132 + 56);
      sub_1C567A2A0((uint64_t)this + 112, &v177);
      v171 = sub_1C477672C((uint64_t)this + 4376, v170);
      v172 = *((_QWORD *)this + 548);
      if (v172 == *((_QWORD *)this + 547))
        v173 = 4396;
      else
        v173 = 4392;
      if (v171 == (_QWORD *)(v172 + 8 * *(unsigned int *)((char *)this + v173)))
      {
        v174 = v179;
        if (v179 >= (unint64_t)HIDWORD(v179))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v178, (uint64_t)v180, v179 + 1, 8);
          v174 = v179;
        }
        *((_QWORD *)v178 + v174) = v170;
        LODWORD(v179) = v179 + 1;
      }
      ++v132;
    }
    while (v132 != v133);
LABEL_180:
    llvm::detachDeadBlocks(v178, (llvm::Type *)v179, 0, 0);
    if (v178 != v180)
      free(v178);
  }
  llvm::Attributor::identifyDeadInternalFunctions(this);
  v113 = llvm::Attributor::rewriteFunctionSignatures((uint64_t)this, (uint64_t)this + 112);
  v114 = *((unsigned int *)this + 48);
  if ((_DWORD)v114)
  {
    v117 = (void **)*((_QWORD *)this + 23);
    v118 = 8 * v114;
    do
    {
      v119 = *v117;
      v177 = 0;
      v178 = v119;
      if ((sub_1C5684DE8((uint64_t)this + 4472, &v178, &v177) & 1) == 0)
      {
        v120 = (uint64_t *)*((_QWORD *)this + 10);
        v177 = 0;
        v178 = v119;
        if (sub_1C614F7B0(v120, &v178, &v177))
          llvm::CallGraphUpdater::reanalyzeFunction(*((llvm::CallGraphUpdater **)this + 684), (llvm::Function *)v119);
      }
      ++v117;
      v118 -= 8;
    }
    while (v118);
  }
  v115 = *((unsigned int *)this + 1138);
  if ((_DWORD)v115)
  {
    v121 = (void **)*((_QWORD *)this + 568);
    v122 = 8 * v115;
    do
    {
      v123 = *v121;
      v124 = (uint64_t *)*((_QWORD *)this + 10);
      v177 = 0;
      v178 = v123;
      if (sub_1C614F7B0(v124, &v178, &v177))
        llvm::CallGraphUpdater::removeFunction(*((llvm::CallGraphUpdater **)this + 684), (llvm::Function *)v123);
      ++v121;
      v122 -= 8;
    }
    while (v122);
    v116 = *((_DWORD *)this + 1138);
  }
  else
  {
    v116 = 0;
  }
  v125 = *((_DWORD *)this + 240);
  v126 = *((_DWORD *)this + 796);
  v127 = *((_DWORD *)this + 1176);
  v128 = *((_DWORD *)this + 1246);
  v129 = *((_DWORD *)this + 994);
  v130 = v190;
  if (v183 != v185)
    free(v183);
  if (v186 != v188)
    free(v186);
  sub_1C6288830(&v189);
  if (*v175)
    sub_1C6392DC0(*v175);
  if (v130 | v129 | v128 | v127 | v116 | v126 | v125)
    return 0;
  else
    return v113;
}

void sub_1C567B2D4(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  llvm::Value *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int wouldInstructionBeTriviallyDead;
  unint64_t v43;
  int32x2_t ****v44;
  int32x2_t *v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  int32x2_t *****v50;
  int32x2_t ****v51;
  int v52;
  int v53;
  unint64_t v54;
  int32x2_t ****v55;
  int32x2_t *v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  int32x2_t *****v61;
  int32x2_t ****v62;
  int v63;
  int v64;
  int v65;
  unint64_t v66;
  int32x2_t ****v67;
  int32x2_t *v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  int32x2_t *****v73;
  int32x2_t ****v74;
  int v75;
  int v76;
  unsigned int *v77;
  _QWORD *v78;
  unsigned int v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v84;
  uint64_t *v85;
  unint64_t v86;
  int32x2_t ****v87;
  int32x2_t *v88;
  unint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  int32x2_t *****v93;
  int32x2_t ****v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  int32x2_t ****v100;
  uint64_t v101;

  v3 = a3;
  v6 = *a1;
  v7 = *(_QWORD *)a2;
  v8 = *a1 + 1480;
  v9 = v8;
  for (i = a3; ; i = v3)
  {
    v11 = sub_1C6286CD8(v9, i);
    if (!v11)
      break;
    v3 = v11;
    v9 = v8;
  }
  v12 = *(_QWORD *)(a2 + 24);
  v13 = *(unsigned __int8 *)(v12 + 16);
  if (v12)
    v14 = v13 >= 0x1C;
  else
    v14 = 0;
  if (!v14)
  {
LABEL_25:
    if (*(_QWORD *)a2)
    {
      **(_QWORD **)(a2 + 16) = *(_QWORD *)(a2 + 8);
      v25 = *(_QWORD *)(a2 + 8);
      if (v25)
        *(_QWORD *)(v25 + 16) = *(_QWORD *)(a2 + 16);
    }
    *(_QWORD *)a2 = v3;
    if (v3)
    {
      v26 = (unint64_t *)(v3 + 8);
      v27 = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(a2 + 8) = v27;
      if (v27)
        *(_QWORD *)(v27 + 16) = a2 + 8;
      *(_QWORD *)(a2 + 16) = v26;
      *v26 = a2;
    }
    if (*(unsigned __int8 *)(v7 + 16) >= 0x1Cu && v7 != 0)
    {
      v98 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 56);
      sub_1C567A2A0(v6 + 112, &v98);
      if (*(_BYTE *)(v7 + 16) != 83)
      {
        v98 = 4;
        v99 = 0;
        v100 = (int32x2_t ****)v7;
        if (v7 != -8192 && v7 != -4096 && v7)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v98);
        v101 = 0;
        if ((sub_1C6286D3C(v6 + 4776, (uint64_t)&v98, &v101) & 1) != 0 || *(_QWORD *)(v7 + 8))
          wouldInstructionBeTriviallyDead = 0;
        else
          wouldInstructionBeTriviallyDead = llvm::wouldInstructionBeTriviallyDead(v7, 0);
        if (v100 != (int32x2_t ****)-8192 && v100 != (int32x2_t ****)-4096 && v100)
        {
          v43 = v98 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v98 & 0xFFFFFFFFFFFFFFF8) = v99;
          if (v99)
          {
            *v99 = *v99 & 7 | v43;
          }
          else
          {
            v44 = v100;
            v45 = ***v100;
            v46 = (unint64_t)v45[303];
            if (v46 <= v43)
            {
              v47 = v45[305].u32[0];
              if (v46 + 16 * v47 > v43)
              {
                v48 = v47 - 1;
                LODWORD(v49) = v48 & ((v100 >> 4) ^ (v100 >> 9));
                v50 = (int32x2_t *****)(v46 + 16 * v49);
                v51 = *v50;
                if (v100 == *v50)
                {
LABEL_80:
                  *v50 = (int32x2_t ****)-8192;
                  v45[304] = vadd_s32(v45[304], (int32x2_t)0x1FFFFFFFFLL);
                  v44 = v100;
                }
                else
                {
                  v52 = 1;
                  while (v51 != (int32x2_t ****)-4096)
                  {
                    v53 = v49 + v52++;
                    v49 = v53 & v48;
                    v51 = *(int32x2_t *****)(v46 + 16 * v49);
                    if (v100 == v51)
                    {
                      v50 = (int32x2_t *****)(v46 + 16 * v49);
                      goto LABEL_80;
                    }
                  }
                }
                *((_BYTE *)v44 + 17) &= ~1u;
              }
            }
          }
        }
        if (wouldInstructionBeTriviallyDead)
        {
          v77 = (unsigned int *)a1[1];
          v98 = 6;
          v99 = 0;
          v100 = (int32x2_t ****)v7;
          if (v7 != -8192 && v7 != -4096 && v7)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v98);
          v78 = (_QWORD *)sub_1C5087E70(v77, (unint64_t)&v98, 1);
          v79 = v77[2];
          v80 = (unint64_t *)(*(_QWORD *)v77 + 24 * v79);
          *v80 = 6;
          v80[1] = 0;
          v81 = (unint64_t)(v80 + 1);
          v82 = v78[2];
          v80[2] = v82;
          if (v82 != -8192 && v82 != -4096 && v82 != 0)
          {
            v84 = *v78 & 0xFFFFFFFFFFFFFFF8;
            v80[1] = *(_QWORD *)v84;
            *(_QWORD *)v84 = v80;
            *v80 = v84 | 6;
            v85 = (uint64_t *)v80[1];
            if (v85)
              *v85 = *v85 & 7 | v81;
          }
          v77[2] = v79 + 1;
          if (v100 != (int32x2_t ****)-8192 && v100 != (int32x2_t ****)-4096 && v100)
          {
            v86 = v98 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v98 & 0xFFFFFFFFFFFFFFF8) = v99;
            if (v99)
            {
              *v99 = *v99 & 7 | v86;
            }
            else
            {
              v87 = v100;
              v88 = ***v100;
              v89 = (unint64_t)v88[303];
              if (v89 <= v86)
              {
                v90 = v88[305].u32[0];
                if (v89 + 16 * v90 > v86)
                {
                  v91 = v90 - 1;
                  LODWORD(v92) = v91 & ((v100 >> 4) ^ (v100 >> 9));
                  v93 = (int32x2_t *****)(v89 + 16 * v92);
                  v94 = *v93;
                  if (v100 == *v93)
                  {
LABEL_141:
                    *v93 = (int32x2_t ****)-8192;
                    v88[304] = vadd_s32(v88[304], (int32x2_t)0x1FFFFFFFFLL);
                    v87 = v100;
                  }
                  else
                  {
                    v95 = 1;
                    while (v94 != (int32x2_t ****)-4096)
                    {
                      v96 = v92 + v95++;
                      v92 = v96 & v91;
                      v94 = *(int32x2_t *****)(v89 + 16 * v92);
                      if (v100 == v94)
                      {
                        v93 = (int32x2_t *****)(v89 + 16 * v92);
                        goto LABEL_141;
                      }
                    }
                  }
                  *((_BYTE *)v87 + 17) &= ~1u;
                }
              }
            }
          }
        }
      }
    }
    v29 = *(unsigned __int8 *)(v3 + 16);
    if (v29 - 11 <= 1)
    {
      v30 = *(_QWORD *)(a2 + 24);
      v31 = *(unsigned __int8 *)(v30 + 16);
      if (v31 >= 0x1C && v31 - 33 <= 0x33 && ((1 << (v31 - 33)) & 0x8000000000041) != 0)
      {
        v33 = *(_DWORD *)(v30 + 20);
        v34 = v30 - 32 * (v33 & 0x7FFFFFF);
        if (v34 <= a2)
        {
          if (v31 == 84)
            v35 = 0;
          else
            v35 = v31 == 39 ? (*(_DWORD *)(v30 + 80) + 1) : 2;
          if (v33 < 0 && (v97 = *(_QWORD *)(v34 - 8), (v97 & 0xFFFFFFFF0) != 0))
            v36 = (*(_DWORD *)(v34 - 12) - *(_DWORD *)(v34 - v97));
          else
            v36 = 0;
          if (v30 - 32 * v35 - 32 * v36 - 32 > a2)
          {
            v37 = (a2 - v34) >> 5;
            *(_QWORD *)(v30 + 64) = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(v30 + 64), **(uint64_t ***)v30, (int)v37 + 1, 36);
            v38 = *(_QWORD *)(v30 - 32);
            if (v38)
            {
              if (!*(_BYTE *)(v38 + 16)
                && *(_QWORD *)(v38 + 24) == *(_QWORD *)(v30 + 72)
                && *(_QWORD *)(v38 + 96) > (unint64_t)v37)
              {
                *(_QWORD *)(v38 + 112) = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(v38 + 112), **(uint64_t ***)v38, (int)v37 + 1, 36);
              }
            }
          }
        }
      }
      v29 = *(unsigned __int8 *)(v3 + 16);
    }
    if (v29 <= 0x14)
    {
      v39 = *(_QWORD *)(a2 + 24);
      if (*(_BYTE *)(v39 + 16) == 30)
      {
        if (v29 - 11 <= 1)
        {
          v98 = 4;
          v99 = 0;
          v100 = (int32x2_t ****)v39;
          if (v39 != -8192 && v39 != -4096 && v39)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v98);
          sub_1C6284E2C(v6 + 2784, &v98);
          if (v100 != (int32x2_t ****)-8192 && v100 != (int32x2_t ****)-4096 && v100)
          {
            v54 = v98 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v98 & 0xFFFFFFFFFFFFFFF8) = v99;
            if (v99)
            {
              *v99 = *v99 & 7 | v54;
            }
            else
            {
              v55 = v100;
              v56 = ***v100;
              v57 = (unint64_t)v56[303];
              if (v57 <= v54)
              {
                v58 = v56[305].u32[0];
                if (v57 + 16 * v58 > v54)
                {
                  v59 = v58 - 1;
                  LODWORD(v60) = v59 & ((v100 >> 4) ^ (v100 >> 9));
                  v61 = (int32x2_t *****)(v57 + 16 * v60);
                  v62 = *v61;
                  if (v100 == *v61)
                  {
LABEL_99:
                    *v61 = (int32x2_t ****)-8192;
                    v56[304] = vadd_s32(v56[304], (int32x2_t)0x1FFFFFFFFLL);
                    v55 = v100;
                  }
                  else
                  {
                    v63 = 1;
                    while (v62 != (int32x2_t ****)-4096)
                    {
                      v64 = v60 + v63++;
                      v60 = v64 & v59;
                      v62 = *(int32x2_t *****)(v57 + 16 * v60);
                      if (v100 == v62)
                      {
                        v61 = (int32x2_t *****)(v57 + 16 * v60);
                        goto LABEL_99;
                      }
                    }
                  }
                  *((_BYTE *)v55 + 17) &= ~1u;
                }
              }
            }
          }
        }
        else
        {
          v40 = a1[2];
          v41 = *(unsigned int *)(v40 + 8);
          if (v41 >= *(_DWORD *)(v40 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v40, v40 + 16, v41 + 1, 8);
            LODWORD(v41) = *(_DWORD *)(v40 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v40 + 8 * v41) = v39;
          ++*(_DWORD *)(v40 + 8);
        }
      }
    }
    return;
  }
  if (v13 != 29)
    goto LABEL_20;
  v15 = llvm::Value::stripPointerCasts((llvm::Value *)v7);
  if (!v15 || *((_BYTE *)v15 + 16) != 84 || (*((_WORD *)v15 + 9) & 3) != 2)
    goto LABEL_13;
  v98 = 4;
  v99 = 0;
  v100 = (int32x2_t ****)v15;
  if (v15 != (llvm::Value *)-8192 && v15 != (llvm::Value *)-4096)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v98);
  v101 = 0;
  v65 = sub_1C6286D3C(v6 + 4776, (uint64_t)&v98, &v101);
  if (v100 != (int32x2_t ****)-8192 && v100 != (int32x2_t ****)-4096 && v100)
  {
    v66 = v98 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v98 & 0xFFFFFFFFFFFFFFF8) = v99;
    if (v99)
    {
      *v99 = *v99 & 7 | v66;
    }
    else
    {
      v67 = v100;
      v68 = ***v100;
      v69 = (unint64_t)v68[303];
      if (v69 <= v66)
      {
        v70 = v68[305].u32[0];
        if (v69 + 16 * v70 > v66)
        {
          v71 = v70 - 1;
          LODWORD(v72) = v71 & ((v100 >> 4) ^ (v100 >> 9));
          v73 = (int32x2_t *****)(v69 + 16 * v72);
          v74 = *v73;
          if (v100 == *v73)
          {
LABEL_115:
            *v73 = (int32x2_t ****)-8192;
            v68[304] = vadd_s32(v68[304], (int32x2_t)0x1FFFFFFFFLL);
            v67 = v100;
          }
          else
          {
            v75 = 1;
            while (v74 != (int32x2_t ****)-4096)
            {
              v76 = v72 + v75++;
              v72 = v76 & v71;
              v74 = *(int32x2_t *****)(v69 + 16 * v72);
              if (v100 == v74)
              {
                v73 = (int32x2_t *****)(v69 + 16 * v72);
                goto LABEL_115;
              }
            }
          }
          *((_BYTE *)v67 + 17) &= ~1u;
        }
      }
    }
  }
  if (v65)
  {
LABEL_13:
    if (*(_BYTE *)(v3 + 16) != 21)
    {
      v16 = *(_QWORD *)(*(_QWORD *)(v12 + 40) + 56);
      if ((*(_WORD *)(v16 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments(*(llvm::Function **)(*(_QWORD *)(v12 + 40) + 56));
        v17 = *(_QWORD *)(v16 + 88);
        if ((*(_WORD *)(v16 + 18) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments((llvm::Function *)v16);
          v18 = *(_QWORD *)(v16 + 88);
LABEL_17:
          v19 = v18 + 40 * *(_QWORD *)(v16 + 96);
          while (v17 != v19)
          {
            v20 = *(_QWORD *)(v17 + 24);
            *(_QWORD *)(v20 + 112) = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(v20 + 112), **(uint64_t ***)v20, *(_DWORD *)(v17 + 32) + 1, 46);
            v17 += 40;
          }
          goto LABEL_20;
        }
      }
      else
      {
        v17 = *(_QWORD *)(v16 + 88);
      }
      v18 = v17;
      goto LABEL_17;
    }
LABEL_20:
    v21 = *(unsigned __int8 *)(v12 + 16) - 33;
    v22 = v21 > 0x33;
    v23 = (1 << v21) & 0x8000000000041;
    v24 = v22 || v23 == 0;
    if (!v24 && v12 - 32 == a2)
      return;
    goto LABEL_25;
  }
}

uint64_t llvm::Attributor::rewriteFunctionSignatures(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  llvm::Function *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  llvm::PointerType *v22;
  int v23;
  llvm::Type *v24;
  uint64_t *v25;
  llvm::Function *v26;
  llvm::Function *v27;
  llvm::Function *v28;
  uint64_t v29;
  llvm::Function *v30;
  llvm::Function *v31;
  llvm::ValueSymbolTable *v32;
  uint64_t v33;
  char *v34;
  llvm::Function *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  llvm::Function **v41;
  llvm::Function *v42;
  llvm::Function **v43;
  int v44;
  BOOL v45;
  unsigned int v46;
  uint64_t v47;
  llvm::MDNode **v48;
  uint64_t v49;
  llvm::MDNode *v50;
  llvm::Function *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  const void *v65;
  uint64_t v66;
  int v67;
  llvm::BasicBlock *v68;
  uint64_t v69;
  unsigned int v70;
  llvm::ValueAsMetadata *v71;
  BOOL v72;
  llvm::ValueAsMetadata **v73;
  uint64_t v74;
  llvm::ValueAsMetadata *v75;
  llvm::Value *v76;
  llvm::Function *v77;
  llvm::PoisonValue **v78;
  llvm::Function *v79;
  unint64_t v80;
  llvm::Value *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  llvm::Value *v86;
  char *v87;
  char *v88;
  llvm::CallBase *v89;
  llvm::CallBase *v90;
  uint64_t v91;
  _QWORD *v92;
  llvm::Function **v93;
  llvm::Function *v94;
  const void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t *v102;
  char v103;
  _QWORD v104[4];
  llvm::Function *v105;
  llvm::Function *v106;
  llvm::Value *v107;
  void *v108;
  uint64_t v109;
  _WORD v110[64];
  llvm::ValueAsMetadata **v111;
  uint64_t v112;
  _BYTE v113[64];
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  _QWORD v119[18];

  v3 = a1;
  v119[16] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(a1 + 72);
  v6 = v4 + 88 * v5;
  if (*(_DWORD *)(a1 + 64))
  {
    if (v5)
    {
      v7 = 88 * v5;
      v8 = *(_QWORD *)(a1 + 56);
      while ((*(_QWORD *)v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v8 += 88;
        v7 -= 88;
        if (!v7)
          goto LABEL_6;
      }
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 56);
    }
  }
  else
  {
LABEL_6:
    v8 = v4 + 88 * v5;
  }
  v9 = v4 + 88 * v5;
  if (v8 != v9)
  {
    v10 = a1 + 4472;
    v11 = v119;
    v12 = &v116;
    v13 = 1;
    while (1)
    {
      v106 = 0;
      v106 = *(llvm::Function **)v8;
      v14 = *(uint64_t **)(v3 + 80);
      v117 = (uint64_t *)v106;
      v114 = 0;
      if (sub_1C614F7B0(v14, &v117, &v114))
      {
        v117 = (uint64_t *)v106;
        v114 = 0;
        if ((sub_1C5684DE8(v10, &v117, &v114) & 1) == 0)
          break;
      }
LABEL_12:
      v15 = v8 + 88;
      v8 = v6;
      if (v15 != v6)
      {
        v8 = v15;
        while ((*(_QWORD *)v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v8 += 88;
          if (v8 == v6)
          {
            v8 = v6;
            break;
          }
        }
      }
      if (v8 == v9)
        return v13;
    }
    v97 = v10;
    v101 = v12;
    v102 = v11;
    v117 = v11;
    v118 = 0x1000000000;
    v114 = v12;
    v115 = 0x1000000000;
    v16 = v106;
    v17 = *((_QWORD *)v106 + 14);
    v99 = v3;
    v100 = a2;
    if ((*((_BYTE *)v106 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments(v106);
      v18 = *((_QWORD *)v16 + 11);
      if ((*((_WORD *)v16 + 9) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments(v16);
        v19 = *((_QWORD *)v16 + 11);
        goto LABEL_22;
      }
    }
    else
    {
      v18 = *((_QWORD *)v106 + 11);
    }
    v19 = v18;
LABEL_22:
    v98 = v9;
    v20 = (uint64_t *)(v8 + 8);
    v21 = v19 + 40 * *((_QWORD *)v16 + 12);
    if (v18 == v21)
    {
LABEL_23:
      v22 = (llvm::PointerType *)llvm::FunctionType::get(**(uint64_t ****)(*((_QWORD *)v106 + 3) + 16), v117, v118, *(_DWORD *)(*((_QWORD *)v106 + 3) + 8) > 0xFFu);
      v105 = 0;
      v23 = *((_DWORD *)v106 + 8) & 0xF;
      v24 = (llvm::Type *)(*(_DWORD *)(*(_QWORD *)v106 + 8) >> 8);
      v110[8] = 257;
      v25 = (uint64_t *)operator new(0x80uLL);
      v26 = (llvm::Function *)(v25 + 1);
      *((_DWORD *)v25 + 7) = *((_DWORD *)v25 + 7) & 0x38000000 | 0x40000000;
      *v25 = 0;
      llvm::Function::Function(v25 + 1, v22, v23, v24, (uint64_t)&v108, 0);
      v105 = v26;
      v3 = v99;
      sub_1C567D3D8(*(_QWORD **)(v99 + 80), &v105);
      v28 = v105;
      v27 = v106;
      v29 = *((_QWORD *)v106 + 5);
      *((_QWORD *)v105 + 5) = v29;
      v30 = v27;
      v31 = v28;
      if ((*((_BYTE *)v28 + 23) & 0x10) != 0)
      {
        v32 = *(llvm::ValueSymbolTable **)(v29 + 112);
        v30 = v27;
        v31 = v28;
        if (v32)
        {
          llvm::ValueSymbolTable::reinsertValue(v32, v28);
          v31 = v105;
          v30 = v106;
        }
      }
      v33 = *((_QWORD *)v27 + 7);
      *((_QWORD *)v28 + 7) = v33;
      *((_QWORD *)v28 + 8) = (char *)v27 + 56;
      v34 = (char *)v28 + 56;
      *(_QWORD *)(v33 + 8) = v34;
      *((_QWORD *)v27 + 7) = v34;
      llvm::Value::takeName(v31, v30);
      llvm::Function::copyAttributesFrom(v105, v106);
      v35 = v105;
      if ((*((_BYTE *)v106 + 23) & 0x20) == 0)
        goto LABEL_42;
      v36 = ***(_QWORD ***)v106;
      v108 = v106;
      v37 = *(_DWORD *)(v36 + 2496);
      if (v37)
      {
        v38 = *(_QWORD *)(v36 + 2480);
        v39 = v37 - 1;
        v40 = v39 & ((v106 >> 4) ^ (v106 >> 9));
        v41 = (llvm::Function **)(v38 + 40 * v40);
        v42 = *v41;
        if (*v41 == v106)
          goto LABEL_37;
        v43 = 0;
        v44 = 1;
        while (v42 != (llvm::Function *)-4096)
        {
          if (v43)
            v45 = 0;
          else
            v45 = v42 == (llvm::Function *)-8192;
          if (v45)
            v43 = v41;
          v46 = v40 + v44++;
          v40 = v46 & v39;
          v41 = (llvm::Function **)(v38 + 40 * v40);
          v42 = *v41;
          if (*v41 == v106)
            goto LABEL_37;
        }
        if (v43)
          v93 = v43;
        else
          v93 = v41;
      }
      else
      {
        v93 = 0;
      }
      v41 = (llvm::Function **)sub_1C541AB24(v36 + 2480, (uint64_t)&v108, (uint64_t *)&v108, v93);
      v94 = (llvm::Function *)v108;
      v41[4] = 0;
      v41[3] = 0;
      *v41 = v94;
      v41[1] = (llvm::Function *)(v41 + 3);
      v41[2] = (llvm::Function *)0x100000000;
LABEL_37:
      v47 = *((unsigned int *)v41 + 4);
      if ((_DWORD)v47)
      {
        v48 = (llvm::MDNode **)((char *)v41[1] + 8);
        v49 = 16 * v47;
        while (*((_DWORD *)v48 - 2))
        {
          v50 = 0;
          v48 += 2;
          v49 -= 16;
          if (!v49)
            goto LABEL_43;
        }
        v50 = *v48;
LABEL_43:
        llvm::Value::setMetadata(v35, 0, v50);
        llvm::Value::setMetadata(v106, 0, 0);
        v51 = v105;
        v52 = **(_QWORD **)v106;
        if (v17 && (v53 = *(_DWORD *)(v17 + 8)) != 0)
        {
          v54 = *(_QWORD *)(v17 + 40);
          if (v53 != 1)
          {
            v55 = *(_QWORD *)(v17 + 48);
LABEL_68:
            *((_QWORD *)v51 + 14) = llvm::AttributeList::get(**(uint64_t ***)v106, v54, v55, v114, v115);
            sub_1C566A128((uint64_t)v105 + 72, *((uint64_t **)v105 + 10), (uint64_t *)v106 + 9);
            v111 = (llvm::ValueAsMetadata **)v113;
            v112 = 0x800000000;
            v69 = *((_QWORD *)v106 + 1);
            if (v69)
            {
              v70 = 0;
              do
              {
                v71 = *(llvm::ValueAsMetadata **)(v69 + 24);
                if (v71)
                  v72 = *((_BYTE *)v71 + 16) == 4;
                else
                  v72 = 0;
                if (v72)
                {
                  if (v70 >= HIDWORD(v112))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v111, (uint64_t)v113, v70 + 1, 8);
                    v70 = v112;
                  }
                  v111[v70] = v71;
                  v70 = v112 + 1;
                  LODWORD(v112) = v112 + 1;
                }
                v69 = *(_QWORD *)(v69 + 8);
              }
              while (v69);
              if (v70)
              {
                v73 = v111;
                v74 = 8 * v70;
                do
                {
                  v75 = *v73++;
                  v76 = llvm::BlockAddress::get(v105, *((llvm::Function **)v75 - 4), v68);
                  llvm::Value::doRAUW(v75, v76, (llvm::Value *)1);
                  v74 -= 8;
                }
                while (v74);
              }
            }
            v108 = v110;
            v109 = 0x800000000;
            v104[0] = v8 + 8;
            v104[1] = &v105;
            v104[2] = v52;
            v104[3] = &v108;
            v103 = 0;
            llvm::Attributor::checkForAllCallSites(v99, (uint64_t (*)(uint64_t, uint64_t *))sub_1C56854A0, (uint64_t)v104, (uint64_t)v106, 1, 0, &v103);
            v77 = v106;
            if ((*((_WORD *)v106 + 9) & 1) != 0)
              llvm::Function::BuildLazyArguments(v106);
            v78 = (llvm::PoisonValue **)*((_QWORD *)v77 + 11);
            v79 = v105;
            if ((*((_WORD *)v105 + 9) & 1) != 0)
              llvm::Function::BuildLazyArguments(v105);
            if (*(_DWORD *)(v8 + 16))
            {
              v80 = 0;
              v81 = (llvm::Value *)*((_QWORD *)v79 + 11);
              do
              {
                v82 = *v20;
                v83 = *(_QWORD *)(*v20 + 8 * v80);
                if (v83)
                {
                  v84 = *(_QWORD *)(v83 + 128);
                  if (v84)
                  {
                    v107 = v81;
                    (*(void (**)(uint64_t))(*(_QWORD *)v84 + 48))(v84);
                    v83 = *(_QWORD *)(v82 + 8 * v80);
                  }
                  v85 = *(_DWORD *)(v83 + 32);
                  if (!v85)
                  {
                    v86 = (llvm::Value *)llvm::PoisonValue::get(*v78, (llvm::Type *)v83);
                    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v78, v86, (llvm::Value *)1);
                    v85 = *(_DWORD *)(*(_QWORD *)(v82 + 8 * v80) + 32);
                  }
                }
                else
                {
                  llvm::Value::takeName(v81, (llvm::Value *)v78);
                  llvm::Value::doRAUW((llvm::ValueAsMetadata *)v78, v81, (llvm::Value *)1);
                  v85 = 1;
                }
                v81 = (llvm::Value *)((char *)v81 + 40 * v85);
                ++v80;
                v78 += 5;
              }
              while (v80 < *(unsigned int *)(v8 + 16));
            }
            a2 = v100;
            if ((_DWORD)v109)
            {
              v87 = (char *)v108;
              v88 = (char *)v108 + 16 * v109;
              do
              {
                v89 = *(llvm::CallBase **)v87;
                v90 = (llvm::CallBase *)*((_QWORD *)v87 + 1);
                v87 += 16;
                v107 = *(llvm::Value **)(*((_QWORD *)v89 + 5) + 56);
                sub_1C567A2A0(v100, (uint64_t *)&v107);
                llvm::CallGraphUpdater::replaceCallSite(*(llvm::CallGraphUpdater **)(v99 + 5472), v89, v90);
                llvm::Value::doRAUW(v89, v90, (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v89 + 5) + 40, (uint64_t ***)v89);
                v91 = *((_QWORD *)v89 + 3);
                v92 = (_QWORD *)*((_QWORD *)v89 + 4);
                *v92 = v91;
                *(_QWORD *)(v91 + 8) = v92;
                *((_QWORD *)v89 + 3) = 0;
                *((_QWORD *)v89 + 4) = 0;
                llvm::Value::deleteValue(v89);
              }
              while (v87 != v88);
            }
            llvm::CallGraphUpdater::replaceFunctionWith(*(llvm::CallGraphUpdater **)(v99 + 5472), v106, v105);
            v12 = v101;
            if ((sub_1C6285700(v100, &v106) & 1) != 0)
              sub_1C567A2A0(v100, (uint64_t *)&v105);
            v11 = v102;
            v10 = v97;
            v9 = v98;
            if (v108 != v110)
              free(v108);
            if (v111 != (llvm::ValueAsMetadata **)v113)
              free(v111);
            if (v114 != v101)
              free(v114);
            if (v117 != v102)
              free(v117);
            v13 = 0;
            goto LABEL_12;
          }
        }
        else
        {
          v54 = 0;
        }
        v55 = 0;
        goto LABEL_68;
      }
LABEL_42:
      v50 = 0;
      goto LABEL_43;
    }
    v56 = v17 + 40;
    while (1)
    {
      v57 = *(unsigned int *)(v18 + 32);
      v58 = *v20;
      v59 = *(_QWORD *)(*v20 + 8 * v57);
      if (!v59)
      {
        v60 = *(_QWORD *)v18;
        v61 = v118;
        if (v118 >= (unint64_t)HIDWORD(v118))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, (uint64_t)v102, v118 + 1, 8);
          v61 = v118;
        }
        v117[v61] = v60;
        LODWORD(v118) = v118 + 1;
        if (v17 && (v62 = *(_DWORD *)(v18 + 32) + 2, v62 < *(_DWORD *)(v17 + 8)))
          v63 = *(_QWORD *)(v56 + 8 * v62);
        else
          v63 = 0;
        v64 = v115;
        if (v115 >= (unint64_t)HIDWORD(v115))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, (uint64_t)v101, v115 + 1, 8);
          v64 = v115;
        }
        v114[v64] = v63;
        LODWORD(v115) = v115 + 1;
        goto LABEL_57;
      }
      v65 = *(const void **)(v59 + 24);
      v66 = *(unsigned int *)(v59 + 32);
      v67 = v118;
      if ((unint64_t)v118 + v66 > HIDWORD(v118))
        break;
      if ((_DWORD)v66)
        goto LABEL_62;
LABEL_63:
      LODWORD(v118) = v67 + v66;
      sub_1C510F7B8((unsigned int *)&v114, *(unsigned int *)(*(_QWORD *)(v58 + 8 * v57) + 32), 0);
      v56 = v17 + 40;
LABEL_57:
      v18 += 40;
      if (v18 == v21)
        goto LABEL_23;
    }
    v96 = v65;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, (uint64_t)v102, v118 + v66, 8);
    v65 = v96;
    v67 = v118;
    if (!(_DWORD)v66)
      goto LABEL_63;
LABEL_62:
    memcpy(&v117[v67], v65, 8 * v66);
    v67 = v118;
    goto LABEL_63;
  }
  return 1;
}

void llvm::AADepGraph::dumpGraph(llvm::AADepGraph *this)
{
  uint64_t v2;
  uint64_t *v3;
  size_t v4;
  std::string *p_p;
  void **v6;
  int v7;
  std::string *v8;
  std::string::size_type size;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  llvm::raw_ostream *v14;
  void *v15;
  const char *v16;
  size_t v17;
  llvm::raw_ostream *v18;
  _WORD *v19;
  __int128 *v20;
  uint64_t v21;
  unsigned int v22;
  std::string __p;
  __int16 v24;
  llvm::AADepGraph *v25;
  std::string v26;
  std::string v27;
  __int128 v28;
  uint64_t v29;
  void **v30;
  size_t v31;
  uint64_t v32;

  v30 = 0;
  v31 = 0;
  v32 = 0;
  if (byte_1ED809A9F >= 0)
    v2 = byte_1ED809A9F & 0x7F;
  else
    v2 = qword_1ED809A90;
  if (v2)
  {
    if (byte_1ED809A9F >= 0)
      v3 = &qword_1ED809A88;
    else
      v3 = (uint64_t *)qword_1ED809A88;
    MEMORY[0x1CAA32AC8](&v30, v3);
  }
  else
  {
    MEMORY[0x1CAA32ABC](&v30, "dep_graph");
  }
  if (v32 >= 0)
    v4 = HIBYTE(v32) & 0x7F;
  else
    v4 = v31;
  p_p = &__p;
  sub_1C484371C((uint64_t)&__p, v4 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v4)
  {
    if (v32 >= 0)
      v6 = (void **)&v30;
    else
      v6 = v30;
    memmove(p_p, v6, v4);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v4) = 95;
  v7 = atomic_load(dword_1ED809404);
  std::to_string(&v27, v7);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v27;
  else
    v8 = (std::string *)v27.__r_.__value_.__r.__words[0];
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v27.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v27.__r_.__value_.__l.__size_;
  v10 = std::string::append(&__p, (const std::string::value_type *)v8, size);
  v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v26, ".dot");
  v13 = v12->__r_.__value_.__r.__words[2];
  v28 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v29 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v14 = (llvm::raw_ostream *)llvm::outs((llvm *)v12);
  v15 = (void *)*((_QWORD *)v14 + 4);
  if (*((_QWORD *)v14 + 3) - (_QWORD)v15 > 0x18uLL)
  {
    qmemcpy(v15, "Dependency graph dump to ", 25);
    *((_QWORD *)v14 + 4) += 25;
  }
  else
  {
    v14 = llvm::raw_ostream::write(v14, "Dependency graph dump to ", 0x19uLL);
  }
  if (v29 >= 0)
    v16 = (const char *)&v28;
  else
    v16 = (const char *)v28;
  if (v29 >= 0)
    v17 = HIBYTE(v29) & 0x7F;
  else
    v17 = *((_QWORD *)&v28 + 1);
  v18 = llvm::raw_ostream::write(v14, v16, v17);
  v19 = (_WORD *)*((_QWORD *)v18 + 4);
  if (*((_QWORD *)v18 + 3) - (_QWORD)v19 > 1uLL)
  {
    *v19 = 2606;
    *((_QWORD *)v18 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v18, ".\n", 2uLL);
  }
  LODWORD(v27.__r_.__value_.__l.__data_) = 0;
  v27.__r_.__value_.__l.__size_ = (std::string::size_type)std::system_category();
  if (v29 >= 0)
    v20 = &v28;
  else
    v20 = (__int128 *)v28;
  if (v29 >= 0)
    v21 = HIBYTE(v29) & 0x7F;
  else
    v21 = *((_QWORD *)&v28 + 1);
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v26, v20, v21, (uint64_t)&v27, 3);
  if (!LODWORD(v27.__r_.__value_.__l.__data_))
  {
    v25 = this;
    v24 = 257;
    sub_1C567F5F4((llvm::raw_ostream *)&v26, (llvm::raw_ostream *)&v25, 0, (llvm::Twine *)&__p);
  }
  do
    v22 = __ldaxr(dword_1ED809404);
  while (__stlxr(v22 + 1, dword_1ED809404));
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v26);
  if (SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  if (SHIBYTE(v32) < 0)
    operator delete(v30);
}

void llvm::AADepGraph::viewGraph(llvm::AADepGraph *this)
{
  _BYTE v1[32];
  __int16 v2;
  const char *v3;
  __int16 v4;
  llvm::AADepGraph *v5;

  v5 = this;
  v3 = "Dependency Graph";
  v4 = 259;
  v2 = 257;
  sub_1C567F39C((llvm::raw_ostream *)&v5, (llvm::Twine *)&v3, 0, (llvm::Twine *)v1, 0);
}

uint64_t *llvm::AADepGraph::print(uint64_t *this)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = this + 1;
  v1 = this[1];
  if ((v1 & 2) != 0)
  {
    v4 = v1 & 0xFFFFFFFFFFFFFFFCLL;
    v2 = *(uint64_t **)v4;
    v3 = *(_QWORD *)v4 + 8 * *(unsigned int *)(v4 + 8);
  }
  else
  {
    v3 = (uint64_t)&v2[v1 > 3];
  }
  while (v2 != (uint64_t *)v3)
  {
    v5 = *v2++;
    v6 = llvm::outs((llvm *)this);
    this = (uint64_t *)(*(uint64_t (**)(unint64_t, void *))(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8) + 56))(v5 & 0xFFFFFFFFFFFFFFF8, v6);
  }
  return this;
}

uint64_t llvm::Attributor::internalizeFunction(llvm::Attributor *this, llvm::Function *a2)
{
  BOOL v2;
  uint64_t v4;
  llvm::Attributor *v6;
  void *v7;
  void *v8;
  uint64_t v9[2];
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (byte_1ED809908)
    v2 = 0;
  else
    v2 = (_DWORD)a2 == 0;
  if (v2)
    return 0;
  if (*((_BYTE *)this + 16))
  {
    if (*((_BYTE *)this + 16) == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0)
      return 0;
  }
  else if (*((llvm::Attributor **)this + 9) == (llvm::Attributor *)((char *)this + 72)
         && (*((_BYTE *)this + 34) & 0x80) == 0)
  {
    return 0;
  }
  if ((*((_DWORD *)this + 8) & 0xFu) - 7 < 2)
    return 0;
  v4 = 0;
  if (((1 << (*((_DWORD *)this + 8) & 0xF)) & 0x614) == 0)
  {
    v9[0] = (uint64_t)this;
    sub_1C6288990((llvm::SmallPtrSetImplBase *)&v7, v9, 1);
    v9[0] = 0;
    v9[1] = 0;
    v10 = 0;
    llvm::Attributor::internalizeFunctions((uint64_t)&v7, v9);
    v6 = this;
    v4 = sub_1C61B6040(v9, &v6)[1];
    MEMORY[0x1CAA32FB4](v9[0], 8);
    if (v8 != v7)
      free(v8);
  }
  return v4;
}

uint64_t llvm::Attributor::internalizeFunctions(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t result;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t *v29;
  int v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  llvm::Type *v36;
  char *v37;
  llvm::Function *v38;
  char *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t ***v42;
  llvm::Function *v43;
  uint64_t ***v44;
  uint64_t ***v45;
  uint64_t ***v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t ****v51;
  uint64_t ***v52;
  int v53;
  int v54;
  uint64_t ***v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  int32x2_t ****v61;
  int32x2_t *v62;
  unint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  int32x2_t *****v67;
  int32x2_t ****v68;
  int v69;
  int v70;
  uint64_t ***v71;
  unint64_t v72;
  unint64_t *v73;
  uint64_t v74;
  int32x2_t *v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  llvm::MDNode **v85;
  llvm::Function *v86;
  llvm::ValueSymbolTable *v87;
  uint64_t v88;
  char *v89;
  _QWORD *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  uint64_t v96;
  int32x2_t *v97;
  unint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  int v104;
  int v105;
  unint64_t v107;
  unint64_t *v108;
  uint64_t v109;
  int32x2_t *v110;
  unint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  int v117;
  int v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t *i;
  uint64_t v123;
  unint64_t *v124;
  unint64_t *v125;
  void *v126;
  _QWORD *v127;
  unint64_t v128;
  unint64_t *v129;
  uint64_t *v130;
  int v131;
  llvm::Function *v132;
  llvm::Function *v133;
  uint64_t v134;
  unint64_t *v135;
  _QWORD v136[2];
  unsigned int v137;
  uint64_t v138[3];
  char v139;
  llvm::Function *v140;
  void *v141;
  uint64_t v142;
  _BYTE v143[16];
  void *v144;
  uint64_t v145;
  char *v146;
  int32x2_t ****v147;
  _QWORD *v148;
  uint64_t v149;

  v2 = a2;
  v149 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 == *(_QWORD *)a1)
    v5 = (unsigned int *)(a1 + 20);
  else
    v5 = (unsigned int *)(a1 + 16);
  v6 = *v5;
  if ((_DWORD)v6)
  {
    v7 = 8 * v6;
    v8 = *(unint64_t **)(a1 + 8);
    while (*v8 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v8;
      v7 -= 8;
      if (!v7)
        goto LABEL_25;
    }
  }
  else
  {
    v8 = *(unint64_t **)(a1 + 8);
  }
  v9 = (unint64_t *)(v4 + 8 * v6);
  if (v8 != v9)
  {
    v10 = *v8;
    while (1)
    {
      if (v10 && *(_BYTE *)(v10 + 16) == 3)
      {
        if ((*(_DWORD *)(v10 + 20) & 0x7FFFFFF) == 0)
          return 0;
      }
      else if (!*(_BYTE *)(v10 + 16) && *(_QWORD *)(v10 + 72) == v10 + 72 && (*(_BYTE *)(v10 + 34) & 0x80) == 0)
      {
        return 0;
      }
      v11 = *(_DWORD *)(v10 + 32) & 0xF;
      if ((v11 - 7) < 2)
        return 0;
      result = 0;
      if (((1 << v11) & 0x1EB) == 0)
        return result;
      v13 = v8 + 1;
      do
      {
        if (v13 == v9)
          goto LABEL_25;
        v14 = *v13++;
        v10 = v14;
      }
      while (v14 > 0xFFFFFFFFFFFFFFFDLL);
      v8 = v13 - 1;
    }
  }
LABEL_25:
  sub_1C5015F50(a2);
  v16 = *(unint64_t **)a1;
  v15 = *(unint64_t **)(a1 + 8);
  v18 = *(_DWORD *)(a1 + 16);
  v17 = *(_DWORD *)(a1 + 20);
  if (v15 == *(unint64_t **)a1)
    v19 = v17;
  else
    v19 = v18;
  v20 = *(unint64_t **)(a1 + 8);
  if ((_DWORD)v19)
  {
    v21 = 0;
    while (v15[v21] >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (v19 == ++v21)
        goto LABEL_161;
    }
    v20 = &v15[v21];
  }
  if (v20 == &v15[v19])
    goto LABEL_161;
  v129 = &v15[v19];
  v130 = v2;
LABEL_36:
  v140 = 0;
  v135 = v20;
  v22 = (uint64_t *)*v20;
  v140 = (llvm::Function *)v22;
  v23 = (uint64_t **)*v22;
  if ((*((_BYTE *)v22 + 23) & 0x10) != 0)
  {
    v24 = **v23;
    v25 = *(_QWORD *)(v24 + 152);
    v26 = *(unsigned int *)(v24 + 168);
    if ((_DWORD)v26)
    {
      LODWORD(v27) = (v26 - 1) & ((v22 >> 4) ^ (v22 >> 9));
      v28 = (uint64_t **)(v25 + 16 * v27);
      v29 = *v28;
      if (*v28 == v22)
      {
LABEL_44:
        v32 = v28[1];
        v35 = *v32;
        v34 = (char *)(v32 + 2);
        v33 = v35;
        goto LABEL_45;
      }
      v30 = 1;
      while (v29 != (uint64_t *)-4096)
      {
        v31 = v27 + v30++;
        v27 = v31 & (v26 - 1);
        v29 = *(uint64_t **)(v25 + 16 * v27);
        if (v29 == v22)
        {
          v28 = (uint64_t **)(v25 + 16 * v27);
          goto LABEL_44;
        }
      }
    }
    v28 = (uint64_t **)(v25 + 16 * v26);
    goto LABEL_44;
  }
  v33 = 0;
  v34 = &byte_1C871356D;
LABEL_45:
  v132 = (llvm::Function *)v22[3];
  v134 = v22[5];
  v131 = v22[4] & 0xF;
  v36 = (llvm::Type *)(*((_DWORD *)v23 + 2) >> 8);
  LOWORD(v148) = 773;
  v144 = v34;
  v145 = v33;
  v146 = ".internalized";
  v37 = (char *)operator new(0x80uLL);
  v38 = (llvm::Function *)(v37 + 8);
  *((_DWORD *)v37 + 7) = *((_DWORD *)v37 + 7) & 0x38000000 | 0x40000000;
  *(_QWORD *)v37 = 0;
  llvm::Function::Function((uint64_t *)v37 + 1, v132, v131, v36, (uint64_t)&v144, 0);
  v137 = 128;
  v39 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  v136[0] = v39;
  v136[1] = 0;
  if (v137)
  {
    v40 = (unint64_t)v137 << 6;
    v41 = v39 + 16;
    do
    {
      *v41 = 0;
      v41[1] = -4096;
      *(v41 - 2) = &unk_1E814DA10;
      *(v41 - 1) = 2;
      v41[2] = 0;
      v41 += 8;
      v40 -= 64;
    }
    while (v40);
  }
  LOBYTE(v138[0]) = 0;
  v139 = 0;
  if ((v37[26] & 1) != 0)
    llvm::Function::BuildLazyArguments(v38);
  v42 = (uint64_t ***)*((_QWORD *)v37 + 12);
  v43 = v140;
  if ((*((_WORD *)v140 + 9) & 1) != 0)
  {
    v133 = v140;
    llvm::Function::BuildLazyArguments(v140);
    v43 = v133;
    v44 = (uint64_t ***)*((_QWORD *)v133 + 11);
    if ((*((_WORD *)v133 + 9) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments(v133);
      v43 = v133;
      v45 = (uint64_t ***)*((_QWORD *)v133 + 11);
      goto LABEL_53;
    }
  }
  else
  {
    v44 = (uint64_t ***)*((_QWORD *)v140 + 11);
  }
  v45 = v44;
LABEL_53:
  v46 = &v45[5 * *((_QWORD *)v43 + 12)];
  while (v44 != v46)
  {
    if ((*((_BYTE *)v44 + 23) & 0x10) == 0)
    {
      v56 = 0;
      v57 = &byte_1C871356D;
      goto LABEL_64;
    }
    v47 = ***v44;
    v48 = *(_QWORD *)(v47 + 152);
    v49 = *(unsigned int *)(v47 + 168);
    if (!(_DWORD)v49)
      goto LABEL_62;
    LODWORD(v50) = (v49 - 1) & ((v44 >> 4) ^ (v44 >> 9));
    v51 = (uint64_t ****)(v48 + 16 * v50);
    v52 = *v51;
    if (*v51 != v44)
    {
      v53 = 1;
      while (v52 != (uint64_t ***)-4096)
      {
        v54 = v50 + v53++;
        v50 = v54 & (v49 - 1);
        v52 = *(uint64_t ****)(v48 + 16 * v50);
        if (v52 == v44)
        {
          v51 = (uint64_t ****)(v48 + 16 * v50);
          goto LABEL_63;
        }
      }
LABEL_62:
      v51 = (uint64_t ****)(v48 + 16 * v49);
    }
LABEL_63:
    v55 = v51[1];
    v58 = (uint64_t)*v55;
    v57 = (char *)(v55 + 2);
    v56 = v58;
LABEL_64:
    LOWORD(v148) = 261;
    v144 = v57;
    v145 = v56;
    llvm::Value::setName(v42, (uint64_t)&v144);
    v145 = 2;
    v146 = 0;
    v147 = (int32x2_t ****)v44;
    if (v44 != (uint64_t ***)-8192 && v44 != (uint64_t ***)-4096 && v44)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v145);
    v144 = &unk_1E814DA10;
    v148 = v136;
    v59 = sub_1C52E2ED8((uint64_t)v136, &v144);
    if (v147 != (int32x2_t ****)-8192 && v147 != (int32x2_t ****)-4096 && v147)
    {
      v60 = v145 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v145 & 0xFFFFFFFFFFFFFFF8) = v146;
      if (v146)
      {
        *(_QWORD *)v146 = *(_QWORD *)v146 & 7 | v60;
      }
      else
      {
        v61 = v147;
        v62 = ***v147;
        v63 = (unint64_t)v62[303];
        if (v63 <= v60)
        {
          v64 = v62[305].u32[0];
          if (v63 + 16 * v64 > v60)
          {
            v65 = v64 - 1;
            LODWORD(v66) = v65 & ((v147 >> 4) ^ (v147 >> 9));
            v67 = (int32x2_t *****)(v63 + 16 * v66);
            v68 = *v67;
            if (v147 == *v67)
            {
LABEL_79:
              *v67 = (int32x2_t ****)-8192;
              v62[304] = vadd_s32(v62[304], (int32x2_t)0x1FFFFFFFFLL);
              v61 = v147;
            }
            else
            {
              v69 = 1;
              while (v68 != (int32x2_t ****)-4096)
              {
                v70 = v66 + v69++;
                v66 = v70 & v65;
                v68 = *(int32x2_t *****)(v63 + 16 * v66);
                if (v147 == v68)
                {
                  v67 = (int32x2_t *****)(v63 + 16 * v66);
                  goto LABEL_79;
                }
              }
            }
            *((_BYTE *)v61 + 17) &= ~1u;
          }
        }
      }
    }
    v71 = (uint64_t ***)v59[7];
    if (v71 != v42)
    {
      if (v71 && v71 != (uint64_t ***)-8192 && v71 != (uint64_t ***)-4096)
      {
        v72 = v59[5] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v72 = v59[6];
        v73 = (unint64_t *)v59[6];
        if (v73)
        {
          *v73 = *v73 & 7 | v72;
        }
        else
        {
          v74 = v59[7];
          v75 = ***(int32x2_t ****)v74;
          v76 = (unint64_t)v75[303];
          if (v76 <= v72)
          {
            v77 = v75[305].u32[0];
            if (v76 + 16 * v77 > v72)
            {
              v78 = v77 - 1;
              LODWORD(v79) = v78 & ((v74 >> 4) ^ (v74 >> 9));
              v80 = (uint64_t *)(v76 + 16 * v79);
              v81 = *v80;
              if (v74 == *v80)
              {
LABEL_99:
                *v80 = -8192;
                v75[304] = vadd_s32(v75[304], (int32x2_t)0x1FFFFFFFFLL);
                v74 = v59[7];
              }
              else
              {
                v82 = 1;
                while (v81 != -4096)
                {
                  v83 = v79 + v82++;
                  v79 = v83 & v78;
                  v81 = *(_QWORD *)(v76 + 16 * v79);
                  if (v74 == v81)
                  {
                    v80 = (uint64_t *)(v76 + 16 * v79);
                    goto LABEL_99;
                  }
                }
              }
              *(_BYTE *)(v74 + 17) &= ~1u;
            }
          }
        }
      }
      v59[7] = v42;
      if (v42 != (uint64_t ***)-8192 && v42 != (uint64_t ***)-4096 && v42)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v59 + 5));
    }
    v42 += 5;
    v44 += 5;
  }
  v144 = &v146;
  v145 = 0x800000000;
  llvm::CloneFunctionInto((uint64_t)v38, v140, (uint64_t)v136, 0, (uint64_t)&v144, &unk_1C872ACEA, 0, 0, 0);
  *((_DWORD *)v37 + 10) = *((_DWORD *)v37 + 10) & 0xFFFFBFC0 | 0x4008;
  v141 = v143;
  v142 = 0x100000000;
  llvm::Value::getAllMetadata(v140, (uint64_t)&v141);
  if ((_DWORD)v142)
  {
    v84 = 16 * v142;
    v85 = (llvm::MDNode **)((char *)v141 + 8);
    do
    {
      if ((v37[31] & 0x20) == 0)
        llvm::Value::addMetadata(v38, *((_DWORD *)v85 - 2), *v85);
      v85 += 2;
      v84 -= 16;
    }
    while (v84);
  }
  v86 = v140;
  *((_QWORD *)v37 + 6) = v134;
  if ((v37[31] & 0x10) != 0)
  {
    v87 = *(llvm::ValueSymbolTable **)(v134 + 112);
    if (v87)
      llvm::ValueSymbolTable::reinsertValue(v87, v38);
  }
  v88 = *((_QWORD *)v86 + 7);
  *((_QWORD *)v37 + 8) = v88;
  *((_QWORD *)v37 + 9) = (char *)v86 + 56;
  v89 = v37 + 64;
  *(_QWORD *)(v88 + 8) = v89;
  *((_QWORD *)v86 + 7) = v89;
  *((_DWORD *)v89 - 6) |= 0x4000u;
  v2 = v130;
  sub_1C61B6040(v130, &v140)[1] = v38;
  if (v141 != v143)
    free(v141);
  if (v144 != &v146)
    free(v144);
  if (v139)
  {
    sub_1C4E43068((uint64_t)v138);
    MEMORY[0x1CAA32FB4](v138[0], 8);
    v139 = 0;
  }
  v90 = (_QWORD *)v136[0];
  if (v137)
  {
    v91 = v136[0] + ((unint64_t)v137 << 6);
    do
    {
      v92 = v90[3];
      if ((v92 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v93 = v90[7];
        if (v93)
        {
          if (v93 != -8192 && v93 != -4096)
          {
            v94 = v90[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v94 = v90[6];
            v95 = (unint64_t *)v90[6];
            if (v95)
            {
              *v95 = *v95 & 7 | v94;
            }
            else
            {
              v96 = v90[7];
              v97 = ***(int32x2_t ****)v96;
              v98 = (unint64_t)v97[303];
              if (v98 <= v94)
              {
                v99 = v97[305].u32[0];
                if (v98 + 16 * v99 > v94)
                {
                  v100 = v99 - 1;
                  LODWORD(v101) = v100 & ((v96 >> 4) ^ (v96 >> 9));
                  v102 = (uint64_t *)(v98 + 16 * v101);
                  v103 = *v102;
                  if (v96 == *v102)
                  {
LABEL_131:
                    *v102 = -8192;
                    v97[304] = vadd_s32(v97[304], (int32x2_t)0x1FFFFFFFFLL);
                    v96 = v90[7];
                  }
                  else
                  {
                    v104 = 1;
                    while (v103 != -4096)
                    {
                      v105 = v101 + v104++;
                      v101 = v105 & v100;
                      v103 = *(_QWORD *)(v98 + 16 * v101);
                      if (v96 == v103)
                      {
                        v102 = (uint64_t *)(v98 + 16 * v101);
                        goto LABEL_131;
                      }
                    }
                  }
                  *(_BYTE *)(v96 + 17) &= ~1u;
                }
              }
            }
            v92 = v90[3];
          }
        }
      }
      if (v92 != -4096 && v92 != -8192 && v92 != 0)
      {
        v107 = v90[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v107 = v90[2];
        v108 = (unint64_t *)v90[2];
        if (v108)
        {
          *v108 = *v108 & 7 | v107;
        }
        else
        {
          v109 = v90[3];
          v110 = ***(int32x2_t ****)v109;
          v111 = (unint64_t)v110[303];
          if (v111 <= v107)
          {
            v112 = v110[305].u32[0];
            if (v111 + 16 * v112 > v107)
            {
              v113 = v112 - 1;
              LODWORD(v114) = v113 & ((v109 >> 4) ^ (v109 >> 9));
              v115 = (uint64_t *)(v111 + 16 * v114);
              v116 = *v115;
              if (v109 == *v115)
              {
LABEL_150:
                *v115 = -8192;
                v110[304] = vadd_s32(v110[304], (int32x2_t)0x1FFFFFFFFLL);
                v109 = v90[3];
              }
              else
              {
                v117 = 1;
                while (v116 != -4096)
                {
                  v118 = v114 + v117++;
                  v114 = v118 & v113;
                  v116 = *(_QWORD *)(v111 + 16 * v114);
                  if (v109 == v116)
                  {
                    v115 = (uint64_t *)(v111 + 16 * v114);
                    goto LABEL_150;
                  }
                }
              }
              *(_BYTE *)(v109 + 17) &= ~1u;
            }
          }
        }
      }
      v90 += 8;
    }
    while (v90 != (_QWORD *)v91);
    v90 = (_QWORD *)v136[0];
  }
  MEMORY[0x1CAA32FB4](v90, 8);
  v119 = v135 + 1;
  while (v119 != v129)
  {
    v120 = *v119++;
    if (v120 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v20 = v119 - 1;
      goto LABEL_36;
    }
  }
  v16 = *(unint64_t **)a1;
  v15 = *(unint64_t **)(a1 + 8);
  v18 = *(_DWORD *)(a1 + 16);
  v17 = *(_DWORD *)(a1 + 20);
LABEL_161:
  if (v15 == v16)
    v121 = v17;
  else
    v121 = v18;
  i = v15;
  if ((_DWORD)v121)
  {
    v123 = 8 * v121;
    for (i = v15; *i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v123 -= 8;
      if (!v123)
        return 1;
    }
  }
  v124 = &v15[v121];
  if (i != v124)
  {
LABEL_170:
    v144 = 0;
    v126 = (void *)*i;
    v125 = i + 1;
    v144 = v126;
    v127 = sub_1C61B6040(v2, &v144);
    v136[0] = v2;
    llvm::Value::replaceUsesWithIf((llvm::Value *)v144, (llvm::Value *)v127[1], (unsigned int (*)(uint64_t, uint64_t))sub_1C5684F98, (uint64_t)v136);
    while (v125 != v124)
    {
      v128 = *v125++;
      if (v128 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        i = v125 - 1;
        goto LABEL_170;
      }
    }
  }
  return 1;
}

BOOL sub_1C567D3D8(_QWORD *a1, _QWORD *a2)
{
  int v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  unsigned __int8 v18;

  sub_1C6288F94((uint64_t)a1, a2, (uint64_t)&v17);
  v4 = v18;
  if (v18)
  {
    v6 = (_QWORD *)a1[4];
    v5 = a1[5];
    if ((unint64_t)v6 >= v5)
    {
      v8 = (_QWORD *)a1[3];
      v9 = v6 - v8;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
        abort();
      v11 = v5 - (_QWORD)v8;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 61)
          sub_1C4764EE4();
        v13 = (char *)operator new(8 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[8 * v9];
      *(_QWORD *)v14 = *a2;
      v7 = v14 + 8;
      if (v6 != v8)
      {
        do
        {
          v15 = *--v6;
          *((_QWORD *)v14 - 1) = v15;
          v14 -= 8;
        }
        while (v6 != v8);
        v6 = (_QWORD *)a1[3];
      }
      a1[3] = v14;
      a1[4] = v7;
      a1[5] = &v13[8 * v12];
      if (v6)
        operator delete(v6);
    }
    else
    {
      *v6 = *a2;
      v7 = v6 + 1;
    }
    a1[4] = v7;
  }
  return v4 != 0;
}

uint64_t llvm::InformationCache::initializeInformationCache(llvm::InformationCache *this, const llvm::Function *a2, llvm::InformationCache::FunctionInfo *a3)
{
  const llvm::Function *v3;
  llvm::InformationCache *v4;
  char *v5;
  char *v6;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  llvm::InformationCache *v37;
  unint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  int v63;
  unsigned int v64;
  int v65;
  uint64_t v66;
  int v67;
  BOOL v68;
  unsigned int v69;
  int v70;
  int v71;
  unsigned int v72;
  int v73;
  int v74;
  BOOL v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  BOOL v84;
  int v85;
  unint64_t v87;
  llvm::InformationCache *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  _QWORD v93[2];
  int v94;
  uint64_t v95;
  uint64_t v96[2];
  char v97;
  void *v98;
  unsigned int v99;
  unsigned int v100;
  _QWORD v101[8];

  v3 = a2;
  v4 = this;
  v101[6] = *MEMORY[0x1E0C80C00];
  v5 = (char *)a2 + 72;
  v93[0] = 0;
  v93[1] = 0;
  v94 = 0;
  v6 = (char *)*((_QWORD *)a2 + 10);
  if (v6 == (char *)a2 + 72)
    goto LABEL_6;
  while (1)
  {
    v8 = v6 - 24;
    if (!v6)
      v8 = 0;
    v9 = (char *)*((_QWORD *)v8 + 6);
    if (v9 != v8 + 40)
      break;
    v6 = (char *)*((_QWORD *)v6 + 1);
    if (v6 == v5)
      goto LABEL_6;
  }
  v92 = (char *)this + 368;
  v90 = (char *)a3 + 24;
  v91 = (char *)this + 392;
  v89 = (char *)a3 + 40;
  while (1)
  {
    if (v9)
      v12 = (uint64_t)(v9 - 24);
    else
      v12 = 0;
    v13 = *(unsigned __int8 *)(v12 + 16);
    v14 = (v13 - 29);
    if (v14 > 0x37)
      goto LABEL_39;
    if (((1 << (v13 - 29)) & 0x20019C00006B3) == 0)
    {
      if (v14 != 55)
        goto LABEL_39;
      v29 = sub_1C4D9F8B4(v12);
      if (v9 && v29)
      {
        llvm::fillMapFromAssume(v12, (uint64_t)v92);
        v30 = *(_QWORD *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF));
        v98 = v101;
        v100 = 6;
        if (*(unsigned __int8 *)(v30 + 16) >= 0x1Cu)
        {
          v88 = v4;
          v101[0] = v30;
          v31 = 1;
          do
          {
            v95 = 0;
            v32 = *((_QWORD *)v98 + v31 - 1);
            v99 = v31 - 1;
            v95 = v32;
            v96[0] = v32;
            v33 = sub_1C6144C70((uint64_t)v93, v96);
            if (*((_BYTE *)v33 + 10))
            {
              v34 = *((_WORD *)v33 + 4);
            }
            else
            {
              v35 = *(_QWORD *)(v95 + 8);
              if (v35)
              {
                v34 = 0;
                do
                {
                  ++v34;
                  v35 = *(_QWORD *)(v35 + 8);
                }
                while (v35);
              }
              else
              {
                v34 = 0;
              }
              *((_BYTE *)v33 + 10) = 1;
            }
            v36 = v34 - 1;
            *((_WORD *)v33 + 4) = v36;
            if (!v36)
            {
              sub_1C6190580((uint64_t)v96, (uint64_t)v91, &v95);
              v37 = v88;
              if (v97)
              {
                v39 = (uint64_t *)*((_QWORD *)v88 + 53);
                v38 = *((_QWORD *)v88 + 54);
                if ((unint64_t)v39 >= v38)
                {
                  v41 = (_QWORD *)*((_QWORD *)v88 + 52);
                  v42 = v39 - v41;
                  v43 = v42 + 1;
                  if ((unint64_t)(v42 + 1) >> 61)
                    abort();
                  v44 = v38 - (_QWORD)v41;
                  if (v44 >> 2 > v43)
                    v43 = v44 >> 2;
                  if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
                    v43 = 0x1FFFFFFFFFFFFFFFLL;
                  v87 = v43;
                  if (v43)
                  {
                    if (v43 >> 61)
                      sub_1C4764EE4();
                    v45 = (char *)operator new(8 * v43);
                  }
                  else
                  {
                    v45 = 0;
                  }
                  v46 = (uint64_t *)&v45[8 * v42];
                  *v46 = v95;
                  v40 = v46 + 1;
                  if (v39 == v41)
                  {
                    v37 = v88;
                  }
                  else
                  {
                    v37 = v88;
                    do
                    {
                      v47 = *--v39;
                      *--v46 = v47;
                    }
                    while (v39 != v41);
                    v39 = (uint64_t *)*((_QWORD *)v88 + 52);
                  }
                  *((_QWORD *)v37 + 52) = v46;
                  *((_QWORD *)v37 + 53) = v40;
                  *((_QWORD *)v37 + 54) = &v45[8 * v87];
                  if (v39)
                  {
                    v48 = v40;
                    operator delete(v39);
                    v40 = v48;
                  }
                }
                else
                {
                  *v39 = v95;
                  v40 = v39 + 1;
                }
                *((_QWORD *)v37 + 53) = v40;
              }
              v49 = *(_DWORD *)(v95 + 20);
              if ((v49 & 0x40000000) != 0)
              {
                v51 = *(_QWORD *)(v95 - 8);
                v50 = v49 & 0x7FFFFFF;
              }
              else
              {
                v50 = v49 & 0x7FFFFFF;
                v51 = v95 - 32 * v50;
              }
              if (v50)
              {
                v52 = 32 * v50;
                do
                {
                  v53 = *(_QWORD *)v51;
                  if (*(_QWORD *)v51)
                    v54 = *(unsigned __int8 *)(*(_QWORD *)v51 + 16) >= 0x1Cu;
                  else
                    v54 = 0;
                  if (v54)
                  {
                    v55 = v99;
                    if (v99 >= (unint64_t)v100)
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, (uint64_t)v101, v99 + 1, 8);
                      v55 = v99;
                    }
                    *((_QWORD *)v98 + v55) = v53;
                    ++v99;
                  }
                  v51 += 32;
                  v52 -= 32;
                }
                while (v52);
              }
            }
            v31 = v99;
          }
          while (v99);
          v4 = v88;
          if (v98 != v101)
            free(v98);
        }
      }
      else if ((*(_WORD *)(v12 + 18) & 3) == 2)
      {
        *((_BYTE *)a3 + 105) = 1;
        v58 = *(_QWORD *)(v12 - 32);
        if (v58)
        {
          if (!*(_BYTE *)(v58 + 16) && *(_QWORD *)(v58 + 24) == *(_QWORD *)(v12 + 72))
            *(_BYTE *)(sub_1C6285788(v4) + 104) = 1;
        }
      }
    }
    v15 = *(unsigned __int8 *)(v12 + 16) - 28;
    a2 = (const llvm::Function *)*((unsigned int *)a3 + 4);
    if (!(_DWORD)a2)
    {
      v17 = 0;
      goto LABEL_29;
    }
    v16 = (37 * v15) & ((_DWORD)a2 - 1);
    v17 = *(_QWORD *)a3 + 16 * v16;
    v18 = *(_DWORD *)v17;
    if (v15 != *(_DWORD *)v17)
    {
      v19 = 0;
      v20 = 1;
      while (v18 != -1)
      {
        if (v19)
          v21 = 0;
        else
          v21 = v18 == -2;
        if (v21)
          v19 = v17;
        v22 = v16 + v20++;
        v16 = v22 & ((_DWORD)a2 - 1);
        v17 = *(_QWORD *)a3 + 16 * v16;
        v18 = *(_DWORD *)v17;
        if (v15 == *(_DWORD *)v17)
          goto LABEL_34;
      }
      if (v19)
        v17 = v19;
LABEL_29:
      v23 = *((_DWORD *)a3 + 2);
      if (4 * v23 + 4 >= (3 * (_DWORD)a2))
      {
        sub_1C49F41C0((uint64_t *)a3, 2 * (_DWORD)a2);
        v62 = *((_DWORD *)a3 + 4);
        if (v62)
        {
          v63 = v62 - 1;
          v64 = v63 & (37 * v15);
          v17 = *(_QWORD *)a3 + 16 * v64;
          v65 = *(_DWORD *)v17;
          if (v15 == *(_DWORD *)v17)
            goto LABEL_31;
          v66 = 0;
          v67 = 1;
          while (v65 != -1)
          {
            if (v66)
              v68 = 0;
            else
              v68 = v65 == -2;
            if (v68)
              v66 = v17;
            v69 = v64 + v67++;
            v64 = v69 & v63;
            v17 = *(_QWORD *)a3 + 16 * v64;
            v65 = *(_DWORD *)v17;
            if (v15 == *(_DWORD *)v17)
              goto LABEL_31;
          }
LABEL_159:
          if (v66)
            v17 = v66;
          goto LABEL_31;
        }
      }
      else
      {
        if ((int)a2 + ~v23 - *((_DWORD *)a3 + 3) > a2 >> 3)
        {
LABEL_31:
          ++*((_DWORD *)a3 + 2);
          if (*(_DWORD *)v17 != -1)
            --*((_DWORD *)a3 + 3);
          *(_DWORD *)v17 = v15;
          *(_QWORD *)(v17 + 8) = 0;
          goto LABEL_34;
        }
        sub_1C49F41C0((uint64_t *)a3, (int)a2);
        v70 = *((_DWORD *)a3 + 4);
        if (v70)
        {
          v71 = v70 - 1;
          v72 = v71 & (37 * v15);
          v17 = *(_QWORD *)a3 + 16 * v72;
          v73 = *(_DWORD *)v17;
          if (v15 == *(_DWORD *)v17)
            goto LABEL_31;
          v66 = 0;
          v74 = 1;
          while (v73 != -1)
          {
            if (v66)
              v75 = 0;
            else
              v75 = v73 == -2;
            if (v75)
              v66 = v17;
            v76 = v72 + v74++;
            v72 = v76 & v71;
            v17 = *(_QWORD *)a3 + 16 * v72;
            v73 = *(_DWORD *)v17;
            if (v15 == *(_DWORD *)v17)
              goto LABEL_31;
          }
          goto LABEL_159;
        }
      }
      v17 = 0;
      goto LABEL_31;
    }
LABEL_34:
    v24 = *(_QWORD *)(v17 + 8);
    if (v24)
    {
      v25 = *(unsigned int *)(v24 + 8);
      if (v25 >= *(unsigned int *)(v24 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(v17 + 8), v24 + 16, v25 + 1, 8);
        v25 = *(unsigned int *)(v24 + 8);
      }
    }
    else
    {
      v24 = sub_1C484358C(*((_QWORD *)v4 + 16), 80, 3);
      v25 = 0;
      *(_QWORD *)v24 = v24 + 16;
      *(_QWORD *)(v24 + 8) = 0x800000000;
      *(_QWORD *)(v17 + 8) = v24;
    }
    *(_QWORD *)(*(_QWORD *)v24 + 8 * v25) = v12;
    ++*(_DWORD *)(v24 + 8);
    v13 = *(unsigned __int8 *)(v12 + 16);
LABEL_39:
    v26 = (v13 - 33);
    if (v26 <= 0x37)
    {
      if (((1 << v26) & 0x8000000000041) != 0)
      {
        v28 = *(_QWORD *)(v12 + 64);
        if (!v28 || (*(_BYTE *)(v28 + 20) & 4) == 0 && (*(_BYTE *)(v28 + 17) & 0x10) == 0)
        {
          LODWORD(v98) = 7;
          if (sub_1C53E4BBC(v12, (__int32 *)&v98, 1uLL))
          {
            v77 = *(_QWORD *)(v12 - 32);
            if (!v77
              || *(_BYTE *)(v77 + 16)
              || *(_QWORD *)(v77 + 24) != *(_QWORD *)(v12 + 72)
              || *(_DWORD *)(v77 + 36) != 7)
            {
              goto LABEL_119;
            }
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v12, 66) & 1) == 0
            && !llvm::CallBase::hasFnAttrOnCalledFunction(v12, 44))
          {
            goto LABEL_119;
          }
        }
      }
      else if (((1 << v26) & 0x808001C8000010) != 0 || v26 == 28 && (*(_WORD *)(v12 + 18) & 0x301) != 0)
      {
        goto LABEL_119;
      }
    }
    v27 = *(unsigned __int8 *)(v12 + 16) - 33;
    if (v27 > 0x37)
      goto LABEL_122;
    if (((1 << (*(_BYTE *)(v12 + 16) - 33)) & 0x8000000000041) != 0)
    {
      v56 = *(_QWORD *)(v12 + 64);
      if (v56 && (*(_BYTE *)(v56 + 17) & 0x30) != 0)
        goto LABEL_122;
      v57 = *(_DWORD *)(v12 + 20);
      if (v57 < 0
        && (v78 = v12 - 32 * (v57 & 0x7FFFFFF), v81 = *(_QWORD *)(v78 - 8), v79 = v78 - 8, (v80 = v81) != 0))
      {
        v82 = -v80;
        while (1)
        {
          v83 = *(_DWORD *)(*(_QWORD *)(v79 + v82) + 8);
          v84 = v83 > 7;
          v85 = (1 << v83) & 0x83;
          if (v84 || v85 == 0)
            break;
          v82 += 16;
          if (!v82)
            goto LABEL_108;
        }
      }
      else
      {
LABEL_108:
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v12, 45) & 1) != 0
          || (llvm::CallBase::hasFnAttrOnCalledFunction(v12, 44) & 1) != 0)
        {
          goto LABEL_122;
        }
      }
    }
    else if (v27 == 27)
    {
      if ((*(_WORD *)(v12 + 18) & 0x301) == 0)
        goto LABEL_122;
    }
    else if (((1 << (*(_BYTE *)(v12 + 16) - 33)) & 0x808001D0000010) == 0)
    {
      goto LABEL_122;
    }
LABEL_119:
    v59 = *((unsigned int *)a3 + 8);
    if (v59 >= *((unsigned int *)a3 + 9))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v90, (uint64_t)v89, v59 + 1, 8);
      v59 = *((unsigned int *)a3 + 8);
    }
    *(_QWORD *)(*((_QWORD *)a3 + 3) + 8 * v59) = v12;
    ++*((_DWORD *)a3 + 8);
LABEL_122:
    v9 = (char *)*((_QWORD *)v9 + 1);
    v60 = v6 - 24;
    if (!v6)
      v60 = 0;
    if (v9 == v60 + 40)
      break;
LABEL_129:
    if (v6 == v5)
      goto LABEL_6;
  }
  while (1)
  {
    v6 = (char *)*((_QWORD *)v6 + 1);
    if (v6 == v5)
      break;
    v61 = v6 - 24;
    if (!v6)
      v61 = 0;
    v9 = (char *)*((_QWORD *)v61 + 6);
    if (v9 != v61 + 40)
      goto LABEL_129;
  }
LABEL_6:
  v10 = *((_QWORD *)v3 + 14);
  if (v10 && (*(_BYTE *)(v10 + 12) & 4) != 0 && !llvm::isInlineViable(v3, a2, a3))
    sub_1C4774094((llvm::InformationCache *)((char *)v4 + 448), (uint64_t)v3);
  return MEMORY[0x1CAA32FB4](v93[0], 8);
}

uint64_t llvm::InformationCache::getAAResultsForFunction(llvm::InformationCache *this, const llvm::Function *a2)
{
  uint64_t v2;
  BOOL v3;

  v2 = **((_QWORD **)this + 55);
  if (v2)
    v3 = *((_QWORD *)a2 + 5) == 0;
  else
    v3 = 1;
  if (v3)
    return 0;
  else
    return llvm::AnalysisManager<llvm::Function>::getResultImpl(v2, &llvm::AAManager::Key, (uint64_t)a2) + 8;
}

void llvm::InformationCache::FunctionInfo::~FunctionInfo(llvm::InformationCache::FunctionInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  unsigned int *v8;
  unsigned int v9;
  char *v10;

  v2 = *((unsigned int *)this + 4);
  v3 = *(_QWORD *)this + 16 * v2;
  if (*((_DWORD *)this + 2))
  {
    if ((_DWORD)v2)
    {
      v4 = 16 * v2;
      v5 = *(_QWORD *)this;
      while (*(_DWORD *)v5 >= 0xFFFFFFFE)
      {
        v5 += 16;
        v4 -= 16;
        if (!v4)
          goto LABEL_6;
      }
    }
    else
    {
      v5 = *(_QWORD *)this;
    }
  }
  else
  {
LABEL_6:
    v5 = *(_QWORD *)this + 16 * v2;
  }
  v6 = *(_QWORD *)this + 16 * v2;
LABEL_9:
  while (v5 != v6)
  {
    v7 = *(void ***)(v5 + 8);
    if (*v7 != v7 + 2)
      free(*v7);
    v8 = (unsigned int *)(v5 + 16);
    while (v8 != (unsigned int *)v3)
    {
      v9 = *v8;
      v8 += 4;
      if (v9 <= 0xFFFFFFFD)
      {
        v5 = (uint64_t)(v8 - 4);
        goto LABEL_9;
      }
    }
    v5 = v3;
  }
  v10 = (char *)*((_QWORD *)this + 3);
  if (v10 != (char *)this + 40)
    free(v10);
  MEMORY[0x1CAA32FB4](*(_QWORD *)this, 8);
}

uint64_t llvm::Attributor::identifyDefaultAbstractAttributes(llvm::Attributor *this, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  llvm::Attributor *v11;
  llvm::AbstractAttribute *v12;
  uint64_t *v13;
  int v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  char v24;
  size_t v25;
  void *p_p;
  const void *v27;
  uint64_t *v28;
  const void *v29;
  size_t v30;
  uint64_t *v31;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t *v40;
  char v41;
  __int128 v42;
  void *__p;
  __int128 v44;
  uint64_t v45;
  void *v46;
  size_t v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v46 = (void *)a2;
  result = sub_1C6289210((_DWORD *)this + 102, &v46, (uint64_t)&__p);
  if (!BYTE8(v44))
    return result;
  if (*(_BYTE *)(a2 + 16))
  {
    if (*(_BYTE *)(a2 + 16) == 3 && (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 0)
      return result;
  }
  else if (*(_QWORD *)(a2 + 72) == a2 + 72 && (*(_BYTE *)(a2 + 34) & 0x80) == 0)
  {
    return result;
  }
  v5 = sub_1C6285788(*((uint64_t **)this + 11), (const llvm::Function *)a2);
  if (!*((_BYTE *)this + 5464))
  {
    v6 = *(_QWORD *)(a2 + 8);
    if (!*(_BYTE *)(v5 + 104) && v6 != 0)
    {
      do
      {
        v8 = *(_QWORD *)(v6 + 24);
        v9 = *(unsigned __int8 *)(v8 + 16);
        if (v9 >= 0x1C)
        {
          v10 = v9 - 33 > 0x33 || ((1 << (v9 - 33)) & 0x8000000000041) == 0;
          if (!v10 && v8 - 32 == v6 && v9 == 84 && (*(_WORD *)(v8 + 18) & 3) == 2)
            *(_BYTE *)(v5 + 104) = 1;
        }
        v6 = *(_QWORD *)(v6 + 8);
      }
      while (v6);
    }
  }
  sub_1C5677D4C((uint64_t)this, a2, 0, 0, 2, 0, 1);
  sub_1C5685BDC((uint64_t)this, a2, 0, 0, 2, 0, 1);
  v42 = (unint64_t)a2;
  __p = &llvm::AAUndefinedBehavior::ID;
  v44 = (unint64_t)a2;
  v46 = 0;
  if ((sub_1C62860C0((uint64_t *)this + 4, (uint64_t)&__p, (uint64_t **)&v46) & 1) == 0 || !*((_QWORD *)v46 + 3))
  {
    v12 = (llvm::AbstractAttribute *)llvm::AAUndefinedBehavior::createForPosition((llvm::AAUndefinedBehavior *)&v42, this, v11);
    sub_1C6289300((uint64_t)this, (uint64_t)v12);
    v13 = (uint64_t *)*((_QWORD *)this + 685);
    if (v13)
    {
      __p = &llvm::AAUndefinedBehavior::ID;
      v46 = 0;
      v14 = sub_1C614F7B0(v13, &__p, &v46) ^ 1;
    }
    else
    {
      v14 = 0;
    }
    v15 = v42 & 0xFFFFFFFFFFFFFFFCLL;
    if ((~(_BYTE)v42 & 3) == 0)
      v15 = *(_QWORD *)(v15 + 24);
    v16 = *(unsigned __int8 *)(v15 + 16);
    if (!*(_BYTE *)(v15 + 16))
      goto LABEL_36;
    if (v16 == 21)
    {
      v17 = (unint64_t *)(v15 + 24);
    }
    else
    {
      if (v16 < 0x1C)
      {
        v15 = 0;
        goto LABEL_45;
      }
      v17 = (unint64_t *)(*(_QWORD *)(v15 + 40) + 56);
    }
    v15 = *v17;
    if (*v17)
    {
LABEL_36:
      v18 = *(_QWORD *)(v15 + 112);
      if (v18 && ((*(_BYTE *)(v18 + 14) & 2) != 0 || (*(_BYTE *)(v18 + 17) & 8) != 0))
      {
        v23 = 1;
      }
      else if (*((_BYTE *)this + 5464))
      {
        v23 = 0;
      }
      else
      {
        v19 = (_QWORD *)*((_QWORD *)this + 11);
        v20 = sub_1C477672C((uint64_t)v19, v15);
        v21 = v19[1];
        v22 = 16;
        if (v21 == *v19)
          v22 = 20;
        v23 = v20 == (_QWORD *)(v21 + 8 * *(unsigned int *)((char *)v19 + v22));
      }
      v24 = 0;
      LOBYTE(v14) = (v23 | v14) != 0;
      goto LABEL_48;
    }
LABEL_45:
    v24 = 1;
    if ((v14 & 1) != 0 || *((_DWORD *)this + 1093) > llvm::MaxInitializationChainLength)
      goto LABEL_78;
LABEL_48:
    (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v12 + 72))(&v46, v12);
    if (v48 >= 0)
      v25 = v48 & 0x7F;
    else
      v25 = v47;
    p_p = &__p;
    sub_1C484371C((uint64_t)&__p, v25 + 12);
    if (v44 < 0)
      p_p = __p;
    if (v25)
    {
      if (v48 >= 0)
        v27 = &v46;
      else
        v27 = v46;
      memmove(p_p, v27, v25);
    }
    strcpy((char *)p_p + v25, "::initialize");
    v28 = (uint64_t *)off_1EF8EEB50();
    if (*v28)
    {
      if (v44 >= 0)
        v29 = &__p;
      else
        v29 = __p;
      if (v44 >= 0)
        v30 = HIBYTE(v44) & 0x7F;
      else
        v30 = v44;
      llvm::timeTraceProfilerBegin(v29, v30, (uint64_t)&unk_1C872ACEA, 0);
    }
    if (SHIBYTE(v44) < 0)
      operator delete(__p);
    if (v48 < 0)
      operator delete(v46);
    ++*((_DWORD *)this + 1093);
    (*(void (**)(llvm::AbstractAttribute *, llvm::Attributor *))(*(_QWORD *)v12 + 24))(v12, this);
    --*((_DWORD *)this + 1093);
    if (*v28)
      sub_1C6392DC0(*v28);
    if (((v24 & 1) != 0
       || (v31 = (uint64_t *)*((_QWORD *)this + 10),
           __p = (void *)v15,
           v46 = 0,
           (sub_1C614F7B0(v31, &__p, &v46) & 1) != 0)
       || (v32 = (uint64_t *)*((_QWORD *)this + 10),
           __p = (void *)sub_1C5676C10((llvm::IRPosition *)&v42),
           v46 = 0,
           (sub_1C614F7B0(v32, &__p, &v46) & 1) != 0))
      && (v33 = *((_DWORD *)this + 1092), v33 != 2))
    {
      *((_DWORD *)this + 1092) = 1;
      llvm::Attributor::updateAA(this, v12);
      *((_DWORD *)this + 1092) = v33;
    }
    else
    {
LABEL_78:
      v34 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v12 + 40))(v12);
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 40))(v34);
    }
  }
  sub_1C56860B4((uint64_t)this, a2, 0, 0, 2, 0, 1);
  sub_1C56833C8((uint64_t)this, a2, 0, 0, 2, 0, 1);
  sub_1C568658C((uint64_t)this, a2, 0, 0, 2, 0, 1);
  sub_1C5686A64((uint64_t)this, a2, 0, 0, 2, 0, 1);
  sub_1C568100C((uint64_t)this, a2, 0, 0, 2, 0, 1);
  sub_1C5680B34((uint64_t)this, a2, 0, 0, 2, 0, 1);
  sub_1C5680594((uint64_t)this, a2, 0, 0, 2, 0, 1);
  sub_1C5686F3C((uint64_t)this, a2, 0, 0, 2, 0, 1);
  if (byte_1ED809788)
    sub_1C5687414((uint64_t)this, a2, 0, 0, 2, 0, 1);
  v35 = **(_QWORD **)(*(_QWORD *)(a2 + 24) + 16);
  if (*(_BYTE *)(v35 + 8) != 7)
  {
    sub_1C5684904((uint64_t)this, a2, 0, 0, 2, 0, 1);
    sub_1C5677D4C((uint64_t)this, a2 | 1, 0, 0, 2, 0, 1);
    sub_1C5677180((uint64_t)this, a2 | 1, 0, 0, 2, 0, 1);
    sub_1C56878EC((uint64_t)this, a2 | 1, 0, 0, 2, 0, 1);
    if (*(_BYTE *)(v35 + 8) == 15)
    {
      sub_1C5687DC4((uint64_t)this, a2 | 1, 0, 0, 2, 0, 1);
      sub_1C568829C((uint64_t)this, a2 | 1, 0, 0, 2, 0, 1);
      sub_1C5688774((uint64_t)this, a2 | 1, 0, 0, 2, 0, 1);
      sub_1C5688C4C((uint64_t)this, a2 | 1, 0, 0, 2, 0, 1);
    }
  }
  if ((*(_WORD *)(a2 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)a2);
    v36 = *(char **)(a2 + 88);
    if ((*(_WORD *)(a2 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)a2);
      v37 = *(char **)(a2 + 88);
      goto LABEL_88;
    }
  }
  else
  {
    v36 = *(char **)(a2 + 88);
  }
  v37 = v36;
LABEL_88:
  v38 = &v37[40 * *(_QWORD *)(a2 + 96)];
  if (v36 != v38)
  {
    v39 = v36;
    do
    {
      __p = v39;
      *(_QWORD *)&v44 = 0;
      LOBYTE(v46) = 0;
      llvm::Attributor::getAssumedSimplified(this, (const llvm::IRPosition *)&__p, 0, (BOOL *)&v46);
      sub_1C5677D4C((uint64_t)this, (uint64_t)__p, v44, 0, 2, 0, 1);
      sub_1C56878EC((uint64_t)this, (uint64_t)__p, v44, 0, 2, 0, 1);
      if (*(_BYTE *)(*(_QWORD *)v36 + 8) == 15)
      {
        sub_1C568829C((uint64_t)this, (uint64_t)__p, v44, 0, 2, 0, 1);
        sub_1C5688774((uint64_t)this, (uint64_t)__p, v44, 0, 2, 0, 1);
        sub_1C5688C4C((uint64_t)this, (uint64_t)__p, v44, 0, 2, 0, 1);
        sub_1C5687DC4((uint64_t)this, (uint64_t)__p, v44, 0, 2, 0, 1);
        sub_1C5689124((uint64_t)this, (uint64_t)__p, v44, 0, 2, 0, 1);
        sub_1C5680B34((uint64_t)this, (uint64_t)__p, v44, 0, 2, 0, 1);
        sub_1C568658C((uint64_t)this, (uint64_t)__p, v44, 0, 2, 0, 1);
        sub_1C56895FC((uint64_t)this, (uint64_t)__p, v44, 0, 2, 0, 1);
      }
      v36 += 40;
      v39 += 40;
    }
    while (v36 != v38);
  }
  *(_QWORD *)&v42 = this;
  v40 = (uint64_t *)sub_1C6285788(*((uint64_t **)this + 11), (const llvm::Function *)a2);
  v46 = (void *)0xB00000005;
  LODWORD(v47) = 56;
  __p = &v46;
  *(_QWORD *)&v44 = 3;
  sub_1C5678D14(0, v40, (uint64_t (*)(uint64_t, uint64_t))sub_1C5689AD4, (uint64_t)&v42, 0, 0, (int **)&__p, &v41, 0, 0);
  v46 = this;
  v45 = 0x2100000020;
  __p = &v45;
  *(_QWORD *)&v44 = 2;
  return sub_1C5678D14(0, v40, (uint64_t (*)(uint64_t, uint64_t))sub_1C5689F24, (uint64_t)&v46, 0, 0, (int **)&__p, &v41, 0, 0);
}

llvm::raw_ostream *llvm::operator<<(llvm::raw_ostream *this, int a2)
{
  BOOL v3;
  const char *v4;
  size_t v5;
  void *v6;
  uint64_t v7;

  v3 = a2 == 0;
  if (a2)
    v4 = "unchanged";
  else
    v4 = "changed";
  if (v3)
    v5 = 7;
  else
    v5 = 9;
  v7 = *((_QWORD *)this + 3);
  v6 = (void *)*((_QWORD *)this + 4);
  if (v5 <= v7 - (uint64_t)v6)
  {
    memcpy(v6, v4, v5);
    *((_QWORD *)this + 4) += v5;
  }
  else
  {
    llvm::raw_ostream::write(this, v4, v5);
  }
  return this;
}

uint64_t llvm::operator<<(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

void llvm::AbstractAttribute::print(llvm::AbstractAttribute *this, llvm::raw_ostream *a2)
{
  _BYTE *v4;
  const char *p_p;
  size_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  const char *v11;
  llvm::raw_ostream *v12;
  size_t v13;
  llvm::Value *v14;
  _BYTE *v15;
  void *v16;
  llvm::raw_ostream *v17;
  llvm::raw_ostream *v18;
  uint64_t v19;
  const char *v20;
  size_t v21;
  _BYTE *v22;
  uint64_t v23;
  void *__p;
  size_t v25;
  char v26;

  v4 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v4)
  {
    llvm::raw_ostream::write(a2, "[", 1uLL);
  }
  else
  {
    *v4 = 91;
    ++*((_QWORD *)a2 + 4);
  }
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)this + 72))(&__p, this);
  if (v26 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  if (v26 >= 0)
    v6 = v26 & 0x7F;
  else
    v6 = v25;
  llvm::raw_ostream::write(a2, p_p, v6);
  if (v26 < 0)
    operator delete(__p);
  v7 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v7) > 0xA)
  {
    *(_DWORD *)(v7 + 7) = 541685876;
    *(_QWORD *)v7 = *(_QWORD *)"] for CtxI ";
    *((_QWORD *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, "] for CtxI ", 0xBuLL);
  }
  v8 = sub_1C5676CEC((_DWORD *)this + 4);
  v10 = (_BYTE *)*((_QWORD *)a2 + 3);
  v9 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (v8)
  {
    v14 = (llvm::Value *)v8;
    if (v10 == v9)
    {
      llvm::raw_ostream::write(a2, "'", 1uLL);
    }
    else
    {
      *v9 = 39;
      ++*((_QWORD *)a2 + 4);
    }
    llvm::Value::print(v14, a2, 0);
    v15 = (_BYTE *)*((_QWORD *)a2 + 4);
    if (*((_BYTE **)a2 + 3) == v15)
    {
      v11 = "'";
      v12 = a2;
      v13 = 1;
      goto LABEL_20;
    }
    *v15 = 39;
    v23 = *((_QWORD *)a2 + 4) + 1;
  }
  else
  {
    if ((unint64_t)(v10 - v9) <= 0xC)
    {
      v11 = "<<null inst>>";
      v12 = a2;
      v13 = 13;
LABEL_20:
      llvm::raw_ostream::write(v12, v11, v13);
      goto LABEL_21;
    }
    qmemcpy(v9, "<<null inst>>", 13);
    v23 = *((_QWORD *)a2 + 4) + 13;
  }
  *((_QWORD *)a2 + 4) = v23;
LABEL_21:
  v16 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v16 > 0xCuLL)
  {
    qmemcpy(v16, " at position ", 13);
    *((_QWORD *)a2 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(a2, " at position ", 0xDuLL);
  }
  v17 = llvm::operator<<(a2, (llvm::Value **)this + 2);
  v18 = v17;
  v19 = *((_QWORD *)v17 + 4);
  if ((unint64_t)(*((_QWORD *)v17 + 3) - v19) > 0xB)
  {
    *(_DWORD *)(v19 + 8) = 543519841;
    *(_QWORD *)v19 = *(_QWORD *)" with state ";
    *((_QWORD *)v17 + 4) += 12;
  }
  else
  {
    llvm::raw_ostream::write(v17, " with state ", 0xCuLL);
  }
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)this + 64))(&__p, this);
  if (v26 >= 0)
    v20 = (const char *)&__p;
  else
    v20 = (const char *)__p;
  if (v26 >= 0)
    v21 = v26 & 0x7F;
  else
    v21 = v25;
  llvm::raw_ostream::write(v18, v20, v21);
  v22 = (_BYTE *)*((_QWORD *)v18 + 4);
  if ((unint64_t)v22 >= *((_QWORD *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 10);
  }
  else
  {
    *((_QWORD *)v18 + 4) = v22 + 1;
    *v22 = 10;
  }
  if (v26 < 0)
    operator delete(__p);
}

llvm::raw_ostream *llvm::AbstractAttribute::printWithDeps(llvm::AbstractAttribute *this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *result;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;

  result = (llvm::raw_ostream *)(*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)this + 16))(this);
  v7 = *((_QWORD *)this + 1);
  v6 = (uint64_t *)((char *)this + 8);
  v5 = v7;
  if ((v7 & 2) != 0)
  {
    v9 = v5 & 0xFFFFFFFFFFFFFFFCLL;
    v6 = *(uint64_t **)v9;
    v8 = *(_QWORD *)v9 + 8 * *(unsigned int *)(v9 + 8);
  }
  else
  {
    v8 = (uint64_t)&v6[v5 > 3];
  }
  for (; v6 != (uint64_t *)v8; ++v6)
  {
    v10 = *v6;
    v11 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v11) > 9)
    {
      *(_WORD *)(v11 + 8) = 8307;
      *(_QWORD *)v11 = *(_QWORD *)"  updates ";
      *((_QWORD *)a2 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(a2, "  updates ", 0xAuLL);
    }
    result = (llvm::raw_ostream *)(*(uint64_t (**)(unint64_t, llvm::raw_ostream *))(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8) + 16))(v10 & 0xFFFFFFFFFFFFFFF8, a2);
  }
  v12 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v12 >= *((_QWORD *)a2 + 3))
    return llvm::raw_ostream::write(a2, 10);
  *((_QWORD *)a2 + 4) = v12 + 1;
  *v12 = 10;
  return result;
}

void sub_1C567F39C(llvm::raw_ostream *a1, llvm::Twine *a2, char a3, llvm::Twine *a4, int a5)
{
  llvm *v9;
  llvm *v10;
  llvm::raw_ostream *v11;
  _QWORD *v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  void **v15;
  size_t v16;
  llvm::raw_ostream *v17;
  void *v18;
  char v19;
  size_t v20;
  __int128 *v21;
  void *__p[2];
  uint64_t v23;
  _QWORD v24[4];
  __int16 v25;
  void *v26[2];
  char v27;
  __int128 v28;
  uint64_t v29;
  int v30;

  v30 = 0;
  llvm::Twine::str(a2, v26);
  v25 = 260;
  v24[0] = v26;
  llvm::createGraphFilename((llvm::Twine *)v24, &v30, &v28);
  *(_OWORD *)__p = v28;
  v23 = v29;
  HIBYTE(v29) = 0;
  LOBYTE(v28) = 0;
  if (v27 < 0)
    operator delete(v26[0]);
  v9 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v24, v30, 1, 0, 0);
  if (v30 == -1)
  {
    v13 = (llvm::raw_ostream *)llvm::errs(v9);
    v14 = *((_QWORD *)v13 + 4);
    if ((unint64_t)(*((_QWORD *)v13 + 3) - v14) > 0x13)
    {
      *(_DWORD *)(v14 + 16) = 656434540;
      *(_OWORD *)v14 = *(_OWORD *)"error opening file '";
      *((_QWORD *)v13 + 4) += 20;
    }
    else
    {
      v13 = llvm::raw_ostream::write(v13, "error opening file '", 0x14uLL);
    }
    if (v23 >= 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    if (v23 >= 0)
      v16 = HIBYTE(v23) & 0x7F;
    else
      v16 = (size_t)__p[1];
    v17 = llvm::raw_ostream::write(v13, (const char *)v15, v16);
    v18 = (void *)*((_QWORD *)v17 + 4);
    if (*((_QWORD *)v17 + 3) - (_QWORD)v18 > 0xEuLL)
    {
      qmemcpy(v18, "' for writing!\n", 15);
      *((_QWORD *)v17 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v17, "' for writing!\n", 0xFuLL);
    }
    HIBYTE(v29) = 0;
    LOBYTE(v28) = 0;
  }
  else
  {
    v10 = sub_1C567F5F4((llvm::raw_ostream *)v24, a1, a3, a4);
    v11 = (llvm::raw_ostream *)llvm::errs(v10);
    v12 = (_QWORD *)*((_QWORD *)v11 + 4);
    if (*((_QWORD *)v11 + 3) - (_QWORD)v12 > 7uLL)
    {
      *v12 = 0xA202E656E6F6420;
      *((_QWORD *)v11 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v11, " done. \n", 8uLL);
    }
    v28 = *(_OWORD *)__p;
    v29 = v23;
    __p[1] = 0;
    v23 = 0;
    __p[0] = 0;
  }
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v24);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  v19 = HIBYTE(v29);
  if (v29 >= 0)
    v20 = HIBYTE(v29) & 0x7F;
  else
    v20 = *((_QWORD *)&v28 + 1);
  if (v20)
  {
    if (v29 >= 0)
      v21 = &v28;
    else
      v21 = (__int128 *)v28;
    llvm::DisplayGraph(v21, v20, 0, a5);
    v19 = HIBYTE(v29);
  }
  if (v19 < 0)
    operator delete((void *)v28);
}

llvm::raw_ostream *sub_1C567F5F4(llvm::raw_ostream *a1, llvm::raw_ostream *a2, char a3, llvm::Twine *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  std::string *p_p;
  size_t size;
  _DWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  std::string *v14;
  size_t v15;
  uint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _DWORD *v26;
  size_t v27;
  void **v28;
  _BYTE *v29;
  uint64_t v30;
  _WORD *v31;
  std::string *v32;
  size_t v33;
  _WORD *v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _WORD *v44;
  void *v46;
  uint64_t v47;
  char v48;
  llvm::raw_ostream *v49[2];
  char v50;
  char v51;
  void *v52[2];
  uint64_t v53;
  void *v54[2];
  char v55;
  std::string __p;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  int v61;
  void **v62;

  v49[0] = a1;
  v49[1] = a2;
  v51 = a3;
  v50 = 0;
  llvm::Twine::str(a4, &v46);
  v6 = v47;
  if (v48 >= 0)
    v6 = v48 & 0x7F;
  v7 = *((_QWORD *)a1 + 4);
  v8 = *((_QWORD *)a1 + 3) - v7;
  if (v6)
  {
    if (v8 > 8)
    {
      *(_BYTE *)(v7 + 8) = 34;
      *(_QWORD *)v7 = *(_QWORD *)"digraph \"";
      *((_QWORD *)a1 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(a1, "digraph \"", 9uLL);
    }
    llvm::DOT::EscapeString((char *)&v46, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(a1, (const char *)p_p, size);
    v11 = (_DWORD *)*((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 3) - (_QWORD)v11 > 3uLL)
    {
      *v11 = 175841314;
      *((_QWORD *)a1 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(a1, "\" {\n", 4uLL);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else if (v8 > 0x11)
  {
    *(_WORD *)(v7 + 16) = 2683;
    *(_OWORD *)v7 = *(_OWORD *)"digraph unnamed {\n";
    *((_QWORD *)a1 + 4) += 18;
  }
  else
  {
    llvm::raw_ostream::write(a1, "digraph unnamed {\n", 0x12uLL);
  }
  v12 = v48 & 0x7F;
  if (v48 < 0)
    v12 = v47;
  if (v12)
  {
    v13 = (_QWORD *)*((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 3) - (_QWORD)v13 > 7uLL)
    {
      *v13 = 0x223D6C6562616C09;
      *((_QWORD *)a1 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(a1, "\tlabel=\"", 8uLL);
    }
    llvm::DOT::EscapeString((char *)&v46, &__p);
    v14 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    v15 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F
        : __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(a1, (const char *)v14, v15);
    v16 = *((_QWORD *)a1 + 4);
    if ((unint64_t)(*((_QWORD *)a1 + 3) - v16) > 2)
    {
      *(_BYTE *)(v16 + 2) = 10;
      *(_WORD *)v16 = 15138;
      *((_QWORD *)a1 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(a1, "\";\n", 3uLL);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  llvm::raw_ostream::write(a1, (const char *)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v17 = (_BYTE *)*((_QWORD *)a1 + 4);
  if (*((_BYTE **)a1 + 3) == v17)
  {
    llvm::raw_ostream::write(a1, "\n", 1uLL);
  }
  else
  {
    *v17 = 10;
    ++*((_QWORD *)a1 + 4);
  }
  v19 = (unint64_t *)(*(_QWORD *)a2 + 8);
  v18 = *v19;
  if ((*v19 & 2) != 0)
  {
    v21 = v18 & 0xFFFFFFFFFFFFFFFCLL;
    v19 = *(unint64_t **)v21;
    v20 = *(_QWORD *)v21 + 8 * *(unsigned int *)(v21 + 8);
  }
  else
  {
    v20 = (uint64_t)&v19[v18 > 3];
  }
  for (; v19 != (unint64_t *)v20; ++v19)
  {
    v22 = *v19;
    v55 = 0;
    LOBYTE(v54[0]) = 0;
    v23 = *((_QWORD *)a1 + 4);
    if ((unint64_t)(*((_QWORD *)a1 + 3) - v23) > 4)
    {
      *(_BYTE *)(v23 + 4) = 101;
      *(_DWORD *)v23 = 1685016073;
      *((_QWORD *)a1 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(a1, "\tNode", 5uLL);
    }
    v24 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF8);
    llvm::write_hex(a1, v22 & 0xFFFFFFFFFFFFFFF8, 3, 0, 0);
    v25 = (_QWORD *)*((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 3) - (_QWORD)v25 > 7uLL)
    {
      *v25 = 0x3D65706168735B20;
      v26 = (_DWORD *)(*((_QWORD *)a1 + 4) + 8);
      *((_QWORD *)a1 + 4) = v26;
    }
    else
    {
      llvm::raw_ostream::write(a1, " [shape=", 8uLL);
      v26 = (_DWORD *)*((_QWORD *)a1 + 4);
    }
    if (*((_QWORD *)a1 + 3) - (_QWORD)v26 > 6uLL)
    {
      *(_DWORD *)((char *)v26 + 3) = 744780399;
      *v26 = 1868785010;
      *((_QWORD *)a1 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(a1, "record,", 7uLL);
    }
    if (v55 >= 0)
      v27 = v55 & 0x7F;
    else
      v27 = (size_t)v54[1];
    if (v27)
    {
      if (v55 >= 0)
        v28 = v54;
      else
        v28 = (void **)v54[0];
      llvm::raw_ostream::write(a1, (const char *)v28, v27);
      v29 = (_BYTE *)*((_QWORD *)a1 + 4);
      if (*((_BYTE **)a1 + 3) == v29)
      {
        llvm::raw_ostream::write(a1, ",", 1uLL);
      }
      else
      {
        *v29 = 44;
        ++*((_QWORD *)a1 + 4);
      }
    }
    v30 = *((_QWORD *)a1 + 4);
    if ((unint64_t)(*((_QWORD *)a1 + 3) - v30) > 5)
    {
      *(_WORD *)(v30 + 4) = 15724;
      *(_DWORD *)v30 = 1700946284;
      *((_QWORD *)a1 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(a1, "label=", 6uLL);
    }
    v31 = (_WORD *)*((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 3) - (_QWORD)v31 > 1uLL)
    {
      *v31 = 31522;
      *((_QWORD *)a1 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a1, "\"{", 2uLL);
    }
    v52[0] = 0;
    v52[1] = 0;
    v53 = 0;
    LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
    v59 = 0;
    v60 = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
    v62 = v52;
    v61 = 0;
    v57 = 0;
    v58 = 0;
    __p.__r_.__value_.__r.__words[2] = 0;
    (*(void (**)(unint64_t, std::string *))(*v24 + 16))(v22 & 0xFFFFFFFFFFFFFFF8, &__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
    if (v61 == 1 && __p.__r_.__value_.__r.__words[2])
      MEMORY[0x1CAA32F9C](__p.__r_.__value_.__r.__words[2], 0x1000C8077774924);
    llvm::DOT::EscapeString((char *)v52, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = &__p;
    else
      v32 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      v33 = __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(a1, (const char *)v32, v33);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53) < 0)
      operator delete(v52[0]);
    v34 = (_WORD *)*((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 3) - (_QWORD)v34 > 1uLL)
    {
      *v34 = 8829;
      v35 = *((_QWORD *)a1 + 4) + 2;
      *((_QWORD *)a1 + 4) = v35;
    }
    else
    {
      llvm::raw_ostream::write(a1, "}\"", 2uLL);
      v35 = *((_QWORD *)a1 + 4);
    }
    if ((unint64_t)(*((_QWORD *)a1 + 3) - v35) > 2)
    {
      *(_BYTE *)(v35 + 2) = 10;
      *(_WORD *)v35 = 15197;
      *((_QWORD *)a1 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(a1, "];\n", 3uLL);
    }
    v37 = v24 + 1;
    v36 = v24[1];
    if ((v36 & 2) != 0)
    {
      v39 = v36 & 0xFFFFFFFFFFFFFFFCLL;
      v37 = *(_QWORD **)v39;
      v38 = *(_QWORD *)v39 + 8 * *(unsigned int *)(v39 + 8);
    }
    else
    {
      v38 = (uint64_t)&v37[v36 > 3];
    }
    if (v37 != (_QWORD *)v38)
    {
      v40 = 0;
      do
      {
        v41 = &v37[v40];
        sub_1C568A0A0(v49, (unint64_t)v24, (uint64_t)&v37[v40], (uint64_t (*)(uint64_t))sub_1C568A094);
        v42 = v40 * 8 + 8;
        if ((_DWORD)(v40 * 8) == 504)
          break;
        ++v40;
      }
      while (v41 + 1 != (_QWORD *)v38);
      v37 = (_QWORD *)((char *)v37 + v42);
    }
    if (v37 != (_QWORD *)v38)
    {
      v43 = (uint64_t)v37;
      do
      {
        sub_1C568A0A0(v49, (unint64_t)v24, v43, (uint64_t (*)(uint64_t))sub_1C568A094);
        ++v37;
        v43 += 8;
      }
      while (v37 != (_QWORD *)v38);
    }
    if (v55 < 0)
      operator delete(v54[0]);
  }
  v44 = (_WORD *)*((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 3) - (_QWORD)v44 > 1uLL)
  {
    *v44 = 2685;
    *((_QWORD *)a1 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a1, "}\n", 2uLL);
  }
  if (v48 < 0)
    operator delete(v46);
  return a1;
}

BOOL sub_1C567FD90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  llvm::CallGraphUpdater *v6;
  char v7;
  char v8;
  _BOOL8 v9;
  llvm::CallGraphUpdater *v11;
  uint64_t *v12;
  llvm::GlobalValue **v13;
  llvm::GlobalValue **v14;
  llvm::Attributor *v15;
  llvm::Function *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  llvm::GlobalValue *Section;
  uint64_t v24;
  llvm::Module *v25;
  uint64_t v26;
  int v27;
  uint64_t i;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  uint64_t v33;
  BOOL v35;
  llvm::GlobalValue *v36;
  int v37;
  BOOL v38;
  llvm::GlobalValue *v39;
  uint64_t v40;
  llvm::Module *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  llvm::Function *v48;
  BOOL v49;
  __int128 v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  llvm::Function *v57;
  _BYTE v58[5520];
  uint64_t v59;

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v59 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(v5 + 24) != *(_QWORD *)(v5 + 32))
  {
    v11 = v6;
    v12 = (uint64_t *)v5;
    LOBYTE(v50) = v8;
    BYTE1(v50) = v7;
    WORD1(v50) = 257;
    *((_QWORD *)&v50 + 1) = v6;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    sub_1C62874B8((uint64_t)v58, v5, v4, &v50);
    v13 = (llvm::GlobalValue **)v12[3];
    v14 = (llvm::GlobalValue **)v12[4];
    if (byte_1ED809848)
    {
      if (v13 == v14)
      {
        v14 = (llvm::GlobalValue **)v12[3];
      }
      else
      {
        do
        {
          v15 = *v13;
          if (!sub_1C62873F8((uint64_t)v58, *v13))
            llvm::Attributor::createShallowWrapper(v15, v16);
          ++v13;
        }
        while (v13 != v14);
        v13 = (llvm::GlobalValue **)v12[3];
        v14 = (llvm::GlobalValue **)v12[4];
      }
    }
    if (byte_1ED809908)
    {
      v17 = (char *)v14 - (char *)v13;
      if ((((char *)v14 - (char *)v13) & 0x7FFFFFFF8) != 0)
      {
        v18 = 0;
        v19 = (v17 >> 3);
        while (1)
        {
          v20 = *(_QWORD *)(v12[3] + 8 * v18);
          v21 = *(unsigned __int8 *)(v20 + 16);
          if (v20)
            v22 = v21 == 3;
          else
            v22 = 0;
          if (v22)
          {
            if ((*(_DWORD *)(v20 + 20) & 0x7FFFFFF) != 0)
              goto LABEL_23;
          }
          else if (*(_BYTE *)(v20 + 16) || *(_QWORD *)(v20 + 72) != v20 + 72 || (*(_BYTE *)(v20 + 34) & 0x80) != 0)
          {
LABEL_23:
            if (((1 << (*(_DWORD *)(v20 + 32) & 0xF)) & 0x7D5) == 0
              || v21 == 3
              && (Section = llvm::GlobalValue::getSection(*(llvm::GlobalValue **)(v12[3] + 8 * v18)), v24 == 12)
              && (*(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
                ? (v35 = *((unsigned int *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
                : (v35 = 0),
                  v35)
              || (*(_DWORD *)(v20 + 32) & 0xFu) - 5 >= 4 && ((1 << (*(_DWORD *)(v20 + 32) & 0xF)) & 0x614) != 0
              || (v25 = *(llvm::Module **)(v20 + 40)) != 0
              && llvm::Module::getSemanticInterposition(v25)
              && (*(_BYTE *)(v20 + 33) & 0x40) == 0)
            {
              v26 = *(_QWORD *)(v20 + 8);
              if (v26)
              {
                v27 = 0;
                do
                {
                  v26 = *(_QWORD *)(v26 + 8);
                  --v27;
                }
                while (v26);
                if (v27)
                {
                  if (((1 << (*(_DWORD *)(v20 + 32) & 0xF)) & 0x614) == 0)
                  {
                    v57 = 0;
                    v57 = (llvm::Function *)llvm::Attributor::internalizeFunction((llvm::Attributor *)v20, 0);
                    sub_1C567D3D8(v12, &v57);
                    llvm::CallGraphUpdater::replaceFunctionWith(v11, (llvm::Function *)v20, v57);
                    for (i = *((_QWORD *)v57 + 1); i; i = *(_QWORD *)(i + 8))
                    {
                      v29 = *(_QWORD *)(i + 24);
                      v30 = *(unsigned __int8 *)(v29 + 16);
                      if (v30 >= 0x1C)
                      {
                        v31 = v30 - 33;
                        v32 = v31 > 0x33;
                        v33 = (1 << v31) & 0x8000000000041;
                        if (!v32 && v33 != 0)
                          llvm::CallGraphUpdater::reanalyzeFunction(v11, *(llvm::Function **)(*(_QWORD *)(v29 + 40) + 56));
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v18 == v19)
          {
            v13 = (llvm::GlobalValue **)v12[3];
            v14 = (llvm::GlobalValue **)v12[4];
            break;
          }
        }
      }
    }
    if (v13 == v14)
    {
LABEL_55:
      v9 = llvm::Attributor::run((llvm::Attributor *)v58) == 0;
      llvm::Attributor::~Attributor((llvm::Attributor *)v58);
      return v9;
    }
    while (1)
    {
      v36 = *v13;
      v37 = *((unsigned __int8 *)*v13 + 16);
      if (*v13)
        v38 = v37 == 3;
      else
        v38 = 0;
      if (v38)
      {
        if ((*((_DWORD *)v36 + 5) & 0x7FFFFFF) == 0)
          goto LABEL_71;
      }
      else if (!*((_BYTE *)*v13 + 16)
             && *((llvm::GlobalValue **)v36 + 9) == (llvm::GlobalValue *)((char *)v36 + 72)
             && (*((_BYTE *)v36 + 34) & 0x80) == 0)
      {
        goto LABEL_71;
      }
      if (((1 << (*((_DWORD *)v36 + 8) & 0xF)) & 0x7D5) != 0)
      {
        if (v37 != 3
          || (v39 = llvm::GlobalValue::getSection(*v13), v40 != 12)
          || (*(_QWORD *)v39 == *(_QWORD *)"llvm.ptrauth"
            ? (v49 = *((unsigned int *)v39 + 2) == (unint64_t)*(unsigned int *)"auth")
            : (v49 = 0),
              !v49))
        {
          if ((*((_DWORD *)v36 + 8) & 0xFu) - 5 < 4 || ((1 << (*((_DWORD *)v36 + 8) & 0xF)) & 0x614) == 0)
          {
            v41 = (llvm::Module *)*((_QWORD *)v36 + 5);
            if (v41)
              llvm::Module::getSemanticInterposition(v41);
          }
        }
      }
LABEL_71:
      if ((*((_DWORD *)v36 + 8) & 0xFu) - 7 > 1)
        goto LABEL_82;
      v42 = *((_QWORD *)v36 + 1);
      if (v42)
      {
        while (1)
        {
          v43 = *(_QWORD *)(v42 + 24);
          v44 = *(unsigned __int8 *)(v43 + 16);
          if (v44 < 0x1C)
            break;
          v45 = v44 - 33;
          v32 = v45 > 0x33;
          v46 = (1 << v45) & 0x8000000000041;
          if (v32 || v46 == 0)
            break;
          if (v43 - 32 != v42)
            break;
          v48 = *(llvm::Function **)(*(_QWORD *)(v43 + 40) + 56);
          v56 = 0;
          v57 = v48;
          if ((sub_1C614F7B0(v12, &v57, &v56) & 1) == 0)
            break;
          v42 = *(_QWORD *)(v42 + 8);
          if (!v42)
            goto LABEL_83;
        }
LABEL_82:
        llvm::Attributor::identifyDefaultAbstractAttributes((llvm::Attributor *)v58, (uint64_t)v36);
      }
LABEL_83:
      if (++v13 == v14)
        goto LABEL_55;
    }
  }
  return 0;
}

uint64_t sub_1C5680214(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F3028;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E81727C8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED831DE0);
  if (v3 != -1)
  {
    v7[0] = sub_1C5680404;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED831DE0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C56802DC(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F3029;
  *(_DWORD *)(a1 + 24) = 3;
  *(_QWORD *)a1 = &off_1E8172868;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED831DE8);
  if (v3 != -1)
  {
    v7[0] = sub_1C56804F8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED831DE8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void llvm::initializeAttributorLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831DE0);
  if (v2 != -1)
  {
    v5[0] = sub_1C5680404;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831DE0, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5680404(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetLibraryInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Deduce and propagate attributes";
  *(_QWORD *)(v2 + 8) = 31;
  *(_QWORD *)(v2 + 16) = "attributor";
  *(_QWORD *)(v2 + 24) = 10;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F3028;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5682C18;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void llvm::initializeAttributorCGSCCLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831DE8);
  if (v2 != -1)
  {
    v5[0] = sub_1C56804F8;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831DE8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C56804F8(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeCallGraphWrapperPassPass(a1, v2);
  v3 = operator new();
  *(_QWORD *)v3 = "Deduce and propagate attributes (CGSCC pass)";
  *(_QWORD *)(v3 + 8) = 44;
  *(_QWORD *)(v3 + 16) = "attributor-cgscc";
  *(_QWORD *)(v3 + 24) = 16;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F3029;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5682C40;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

llvm::AbstractAttribute *sub_1C5680594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v12;
  llvm::AbstractAttribute *v13;
  llvm::Attributor *v14;
  llvm::AbstractAttribute *v15;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  _BOOL4 v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void **v30;
  void **v31;
  uint64_t *v32;
  void **v33;
  size_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  void *v40[2];
  char v41;
  void *__p[2];
  char v43;
  __int128 v44;

  if (byte_1ED831CE0)
    v12 = a3;
  else
    v12 = 0;
  *(_QWORD *)&v44 = a2;
  *((_QWORD *)&v44 + 1) = v12;
  v13 = (llvm::AbstractAttribute *)sub_1C5680980(a1, &v44, a4, a5, 1);
  v15 = v13;
  if (v13 && a6)
  {
    if (*(_DWORD *)(a1 + 4368) == 1)
      llvm::Attributor::updateAA((llvm::Attributor *)a1, v13);
    return v15;
  }
  if (v13)
    return v15;
  v15 = (llvm::AbstractAttribute *)llvm::AAMemoryLocation::createForPosition((llvm::AAMemoryLocation *)&v44, (const llvm::IRPosition *)a1, v14);
  sub_1C6286054(a1, (uint64_t)v15);
  v17 = *(uint64_t **)(a1 + 5480);
  if (v17)
  {
    __p[0] = &llvm::AAMemoryLocation::ID;
    v40[0] = 0;
    v18 = sub_1C614F7B0(v17, __p, v40) ^ 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = v44 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v44 & 3) == 0)
    v19 = *(_QWORD *)(v19 + 24);
  v20 = *(unsigned __int8 *)(v19 + 16);
  if (!*(_BYTE *)(v19 + 16))
    goto LABEL_20;
  if (v20 == 21)
  {
    v21 = (uint64_t *)(v19 + 24);
  }
  else
  {
    if (v20 < 0x1C)
    {
      v19 = 0;
      goto LABEL_27;
    }
    v21 = (uint64_t *)(*(_QWORD *)(v19 + 40) + 56);
  }
  v19 = *v21;
  if (!*v21)
  {
LABEL_27:
    v24 = 1;
    goto LABEL_32;
  }
LABEL_20:
  v22 = *(_QWORD *)(v19 + 112);
  if (v22 && ((*(_BYTE *)(v22 + 14) & 2) != 0 || (*(_BYTE *)(v22 + 17) & 8) != 0))
  {
    v23 = 1;
  }
  else if (*(_BYTE *)(a1 + 5464))
  {
    v23 = 0;
  }
  else
  {
    v25 = *(_QWORD **)(a1 + 88);
    v26 = sub_1C477672C((uint64_t)v25, v19);
    v27 = v25[1];
    v28 = 16;
    if (v27 == *v25)
      v28 = 20;
    v23 = v26 == (_QWORD *)(v27 + 8 * *(unsigned int *)((char *)v25 + v28));
  }
  v24 = 0;
  LOBYTE(v18) = (v23 | v18) != 0;
LABEL_32:
  if ((v18 & 1) != 0 || *(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
    goto LABEL_59;
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v15 + 72))(v40, v15);
  if (v41 >= 0)
    v29 = v41 & 0x7F;
  else
    v29 = (size_t)v40[1];
  v30 = __p;
  sub_1C484371C((uint64_t)__p, v29 + 12);
  if (v43 < 0)
    v30 = (void **)__p[0];
  if (v29)
  {
    if (v41 >= 0)
      v31 = v40;
    else
      v31 = (void **)v40[0];
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, "::initialize");
  v32 = (uint64_t *)off_1EF8EEB50();
  if (*v32)
  {
    if (v43 >= 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if (v43 >= 0)
      v34 = v43 & 0x7F;
    else
      v34 = (size_t)__p[1];
    llvm::timeTraceProfilerBegin(v33, v34, (uint64_t)&unk_1C872ACEA, 0);
  }
  if (v43 < 0)
    operator delete(__p[0]);
  if (v41 < 0)
    operator delete(v40[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v15 + 24))(v15, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v32)
  {
    sub_1C6392DC0(*v32);
    if ((v24 & 1) != 0)
      goto LABEL_58;
  }
  else if ((v24 & 1) != 0)
  {
    goto LABEL_58;
  }
  v38 = *(uint64_t **)(a1 + 80);
  __p[0] = (void *)v19;
  v40[0] = 0;
  if ((sub_1C614F7B0(v38, __p, v40) & 1) == 0)
  {
    v39 = *(uint64_t **)(a1 + 80);
    __p[0] = (void *)sub_1C5676C10((llvm::IRPosition *)&v44);
    v40[0] = 0;
    if ((sub_1C614F7B0(v39, __p, v40) & 1) == 0)
      goto LABEL_59;
  }
LABEL_58:
  v35 = *(_DWORD *)(a1 + 4368);
  if (v35 == 2)
  {
LABEL_59:
    v36 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    return v15;
  }
  if (a7)
  {
    *(_DWORD *)(a1 + 4368) = 1;
    llvm::Attributor::updateAA((llvm::Attributor *)a1, v15);
    *(_DWORD *)(a1 + 4368) = v35;
  }
  if (a4)
  {
    v37 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37))
      llvm::Attributor::recordDependence(a1, (uint64_t)v15, a4, a5);
  }
  return v15;
}

uint64_t sub_1C5680980(uint64_t a1, __int128 *a2, uint64_t a3, int a4, char a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  __int128 v15;
  uint64_t *v16;

  v9 = *a2;
  v14 = &llvm::AAMemoryLocation::ID;
  v15 = v9;
  v16 = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0)
    return 0;
  v10 = v16[3];
  if (v10)
  {
    if (a3
      && a4 != 2
      && (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v16[3]),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11)))
    {
      llvm::Attributor::recordDependence(a1, v10, a3, a4);
      if ((a5 & 1) != 0)
        return v10;
    }
    else if ((a5 & 1) != 0)
    {
      return v10;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
      return 0;
  }
  return v10;
}

char *sub_1C5680A6C(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  uint64_t v10;
  __int128 v11;
  char *v12;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6286374(a1, v4, &v4[4 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = llvm::IRPosition::EmptyKey;
    v12 = &result[32 * v10];
    do
    {
      *(_QWORD *)result = -4096;
      *(_OWORD *)(result + 8) = v11;
      result += 32;
    }
    while (result != v12);
  }
  return result;
}

llvm::AbstractAttribute *sub_1C5680B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v12;
  llvm::AbstractAttribute *v13;
  llvm::Attributor *v14;
  llvm::AbstractAttribute *v15;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  _BOOL4 v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void **v30;
  void **v31;
  uint64_t *v32;
  void **v33;
  size_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  void *v40[2];
  char v41;
  void *__p[2];
  char v43;
  __int128 v44;

  if (byte_1ED831CE0)
    v12 = a3;
  else
    v12 = 0;
  *(_QWORD *)&v44 = a2;
  *((_QWORD *)&v44 + 1) = v12;
  v13 = (llvm::AbstractAttribute *)sub_1C5680F20(a1, &v44, a4, a5, 1);
  v15 = v13;
  if (v13 && a6)
  {
    if (*(_DWORD *)(a1 + 4368) == 1)
      llvm::Attributor::updateAA((llvm::Attributor *)a1, v13);
    return v15;
  }
  if (v13)
    return v15;
  v15 = (llvm::AbstractAttribute *)llvm::AAMemoryBehavior::createForPosition((llvm::AAMemoryBehavior *)&v44, (const llvm::IRPosition *)a1, v14);
  sub_1C6286490(a1, (uint64_t)v15);
  v17 = *(uint64_t **)(a1 + 5480);
  if (v17)
  {
    __p[0] = &llvm::AAMemoryBehavior::ID;
    v40[0] = 0;
    v18 = sub_1C614F7B0(v17, __p, v40) ^ 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = v44 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v44 & 3) == 0)
    v19 = *(_QWORD *)(v19 + 24);
  v20 = *(unsigned __int8 *)(v19 + 16);
  if (!*(_BYTE *)(v19 + 16))
    goto LABEL_20;
  if (v20 == 21)
  {
    v21 = (uint64_t *)(v19 + 24);
  }
  else
  {
    if (v20 < 0x1C)
    {
      v19 = 0;
      goto LABEL_27;
    }
    v21 = (uint64_t *)(*(_QWORD *)(v19 + 40) + 56);
  }
  v19 = *v21;
  if (!*v21)
  {
LABEL_27:
    v24 = 1;
    goto LABEL_32;
  }
LABEL_20:
  v22 = *(_QWORD *)(v19 + 112);
  if (v22 && ((*(_BYTE *)(v22 + 14) & 2) != 0 || (*(_BYTE *)(v22 + 17) & 8) != 0))
  {
    v23 = 1;
  }
  else if (*(_BYTE *)(a1 + 5464))
  {
    v23 = 0;
  }
  else
  {
    v25 = *(_QWORD **)(a1 + 88);
    v26 = sub_1C477672C((uint64_t)v25, v19);
    v27 = v25[1];
    v28 = 16;
    if (v27 == *v25)
      v28 = 20;
    v23 = v26 == (_QWORD *)(v27 + 8 * *(unsigned int *)((char *)v25 + v28));
  }
  v24 = 0;
  LOBYTE(v18) = (v23 | v18) != 0;
LABEL_32:
  if ((v18 & 1) != 0 || *(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
    goto LABEL_59;
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v15 + 72))(v40, v15);
  if (v41 >= 0)
    v29 = v41 & 0x7F;
  else
    v29 = (size_t)v40[1];
  v30 = __p;
  sub_1C484371C((uint64_t)__p, v29 + 12);
  if (v43 < 0)
    v30 = (void **)__p[0];
  if (v29)
  {
    if (v41 >= 0)
      v31 = v40;
    else
      v31 = (void **)v40[0];
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, "::initialize");
  v32 = (uint64_t *)off_1EF8EEB50();
  if (*v32)
  {
    if (v43 >= 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if (v43 >= 0)
      v34 = v43 & 0x7F;
    else
      v34 = (size_t)__p[1];
    llvm::timeTraceProfilerBegin(v33, v34, (uint64_t)&unk_1C872ACEA, 0);
  }
  if (v43 < 0)
    operator delete(__p[0]);
  if (v41 < 0)
    operator delete(v40[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v15 + 24))(v15, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v32)
  {
    sub_1C6392DC0(*v32);
    if ((v24 & 1) != 0)
      goto LABEL_58;
  }
  else if ((v24 & 1) != 0)
  {
    goto LABEL_58;
  }
  v38 = *(uint64_t **)(a1 + 80);
  __p[0] = (void *)v19;
  v40[0] = 0;
  if ((sub_1C614F7B0(v38, __p, v40) & 1) == 0)
  {
    v39 = *(uint64_t **)(a1 + 80);
    __p[0] = (void *)sub_1C5676C10((llvm::IRPosition *)&v44);
    v40[0] = 0;
    if ((sub_1C614F7B0(v39, __p, v40) & 1) == 0)
      goto LABEL_59;
  }
LABEL_58:
  v35 = *(_DWORD *)(a1 + 4368);
  if (v35 == 2)
  {
LABEL_59:
    v36 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    return v15;
  }
  if (a7)
  {
    *(_DWORD *)(a1 + 4368) = 1;
    llvm::Attributor::updateAA((llvm::Attributor *)a1, v15);
    *(_DWORD *)(a1 + 4368) = v35;
  }
  if (a4)
  {
    v37 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37))
      llvm::Attributor::recordDependence(a1, (uint64_t)v15, a4, a5);
  }
  return v15;
}

uint64_t sub_1C5680F20(uint64_t a1, __int128 *a2, uint64_t a3, int a4, char a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  __int128 v15;
  uint64_t *v16;

  v9 = *a2;
  v14 = &llvm::AAMemoryBehavior::ID;
  v15 = v9;
  v16 = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0)
    return 0;
  v10 = v16[3];
  if (v10)
  {
    if (a3
      && a4 != 2
      && (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v16[3]),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11)))
    {
      llvm::Attributor::recordDependence(a1, v10, a3, a4);
      if ((a5 & 1) != 0)
        return v10;
    }
    else if ((a5 & 1) != 0)
    {
      return v10;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
      return 0;
  }
  return v10;
}

llvm::AbstractAttribute *sub_1C568100C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v12;
  llvm::AbstractAttribute *v13;
  llvm::Attributor *v14;
  llvm::AbstractAttribute *v15;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  _BOOL4 v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void **v30;
  void **v31;
  uint64_t *v32;
  void **v33;
  size_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  void *v40[2];
  char v41;
  void *__p[2];
  char v43;
  __int128 v44;

  if (byte_1ED831CE0)
    v12 = a3;
  else
    v12 = 0;
  *(_QWORD *)&v44 = a2;
  *((_QWORD *)&v44 + 1) = v12;
  v13 = (llvm::AbstractAttribute *)sub_1C56813F8(a1, &v44, a4, a5, 1);
  v15 = v13;
  if (v13 && a6)
  {
    if (*(_DWORD *)(a1 + 4368) == 1)
      llvm::Attributor::updateAA((llvm::Attributor *)a1, v13);
    return v15;
  }
  if (v13)
    return v15;
  v15 = (llvm::AbstractAttribute *)llvm::AANoRecurse::createForPosition((llvm::AANoRecurse *)&v44, (const llvm::IRPosition *)a1, v14);
  sub_1C62864FC(a1, (uint64_t)v15);
  v17 = *(uint64_t **)(a1 + 5480);
  if (v17)
  {
    __p[0] = &llvm::AANoRecurse::ID;
    v40[0] = 0;
    v18 = sub_1C614F7B0(v17, __p, v40) ^ 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = v44 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v44 & 3) == 0)
    v19 = *(_QWORD *)(v19 + 24);
  v20 = *(unsigned __int8 *)(v19 + 16);
  if (!*(_BYTE *)(v19 + 16))
    goto LABEL_20;
  if (v20 == 21)
  {
    v21 = (uint64_t *)(v19 + 24);
  }
  else
  {
    if (v20 < 0x1C)
    {
      v19 = 0;
      goto LABEL_27;
    }
    v21 = (uint64_t *)(*(_QWORD *)(v19 + 40) + 56);
  }
  v19 = *v21;
  if (!*v21)
  {
LABEL_27:
    v24 = 1;
    goto LABEL_32;
  }
LABEL_20:
  v22 = *(_QWORD *)(v19 + 112);
  if (v22 && ((*(_BYTE *)(v22 + 14) & 2) != 0 || (*(_BYTE *)(v22 + 17) & 8) != 0))
  {
    v23 = 1;
  }
  else if (*(_BYTE *)(a1 + 5464))
  {
    v23 = 0;
  }
  else
  {
    v25 = *(_QWORD **)(a1 + 88);
    v26 = sub_1C477672C((uint64_t)v25, v19);
    v27 = v25[1];
    v28 = 16;
    if (v27 == *v25)
      v28 = 20;
    v23 = v26 == (_QWORD *)(v27 + 8 * *(unsigned int *)((char *)v25 + v28));
  }
  v24 = 0;
  LOBYTE(v18) = (v23 | v18) != 0;
LABEL_32:
  if ((v18 & 1) != 0 || *(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
    goto LABEL_59;
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v15 + 72))(v40, v15);
  if (v41 >= 0)
    v29 = v41 & 0x7F;
  else
    v29 = (size_t)v40[1];
  v30 = __p;
  sub_1C484371C((uint64_t)__p, v29 + 12);
  if (v43 < 0)
    v30 = (void **)__p[0];
  if (v29)
  {
    if (v41 >= 0)
      v31 = v40;
    else
      v31 = (void **)v40[0];
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, "::initialize");
  v32 = (uint64_t *)off_1EF8EEB50();
  if (*v32)
  {
    if (v43 >= 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if (v43 >= 0)
      v34 = v43 & 0x7F;
    else
      v34 = (size_t)__p[1];
    llvm::timeTraceProfilerBegin(v33, v34, (uint64_t)&unk_1C872ACEA, 0);
  }
  if (v43 < 0)
    operator delete(__p[0]);
  if (v41 < 0)
    operator delete(v40[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v15 + 24))(v15, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v32)
  {
    sub_1C6392DC0(*v32);
    if ((v24 & 1) != 0)
      goto LABEL_58;
  }
  else if ((v24 & 1) != 0)
  {
    goto LABEL_58;
  }
  v38 = *(uint64_t **)(a1 + 80);
  __p[0] = (void *)v19;
  v40[0] = 0;
  if ((sub_1C614F7B0(v38, __p, v40) & 1) == 0)
  {
    v39 = *(uint64_t **)(a1 + 80);
    __p[0] = (void *)sub_1C5676C10((llvm::IRPosition *)&v44);
    v40[0] = 0;
    if ((sub_1C614F7B0(v39, __p, v40) & 1) == 0)
      goto LABEL_59;
  }
LABEL_58:
  v35 = *(_DWORD *)(a1 + 4368);
  if (v35 == 2)
  {
LABEL_59:
    v36 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    return v15;
  }
  if (a7)
  {
    *(_DWORD *)(a1 + 4368) = 1;
    llvm::Attributor::updateAA((llvm::Attributor *)a1, v15);
    *(_DWORD *)(a1 + 4368) = v35;
  }
  if (a4)
  {
    v37 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37))
      llvm::Attributor::recordDependence(a1, (uint64_t)v15, a4, a5);
  }
  return v15;
}

uint64_t sub_1C56813F8(uint64_t a1, __int128 *a2, uint64_t a3, int a4, char a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  __int128 v15;
  uint64_t *v16;

  v9 = *a2;
  v14 = &llvm::AANoRecurse::ID;
  v15 = v9;
  v16 = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0)
    return 0;
  v10 = v16[3];
  if (v10)
  {
    if (a3
      && a4 != 2
      && (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v16[3]),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11)))
    {
      llvm::Attributor::recordDependence(a1, v10, a3, a4);
      if ((a5 & 1) != 0)
        return v10;
    }
    else if ((a5 & 1) != 0)
    {
      return v10;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
      return 0;
  }
  return v10;
}

llvm::AbstractAttribute *sub_1C56814E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v12;
  llvm::AbstractAttribute *v13;
  llvm::Attributor *v14;
  llvm::AbstractAttribute *v15;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  _BOOL4 v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void **v30;
  void **v31;
  uint64_t *v32;
  void **v33;
  size_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  void *v40[2];
  char v41;
  void *__p[2];
  char v43;
  __int128 v44;

  if (byte_1ED831CE0)
    v12 = a3;
  else
    v12 = 0;
  *(_QWORD *)&v44 = a2;
  *((_QWORD *)&v44 + 1) = v12;
  v13 = (llvm::AbstractAttribute *)sub_1C56818D0(a1, &v44, a4, a5, 1);
  v15 = v13;
  if (v13 && a6)
  {
    if (*(_DWORD *)(a1 + 4368) == 1)
      llvm::Attributor::updateAA((llvm::Attributor *)a1, v13);
    return v15;
  }
  if (v13)
    return v15;
  v15 = (llvm::AbstractAttribute *)llvm::AAReachability::createForPosition((llvm::AAReachability *)&v44, (const llvm::IRPosition *)a1, v14);
  sub_1C6286568(a1, (uint64_t)v15);
  v17 = *(uint64_t **)(a1 + 5480);
  if (v17)
  {
    __p[0] = &llvm::AAReachability::ID;
    v40[0] = 0;
    v18 = sub_1C614F7B0(v17, __p, v40) ^ 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = v44 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v44 & 3) == 0)
    v19 = *(_QWORD *)(v19 + 24);
  v20 = *(unsigned __int8 *)(v19 + 16);
  if (!*(_BYTE *)(v19 + 16))
    goto LABEL_20;
  if (v20 == 21)
  {
    v21 = (uint64_t *)(v19 + 24);
  }
  else
  {
    if (v20 < 0x1C)
    {
      v19 = 0;
      goto LABEL_27;
    }
    v21 = (uint64_t *)(*(_QWORD *)(v19 + 40) + 56);
  }
  v19 = *v21;
  if (!*v21)
  {
LABEL_27:
    v24 = 1;
    goto LABEL_32;
  }
LABEL_20:
  v22 = *(_QWORD *)(v19 + 112);
  if (v22 && ((*(_BYTE *)(v22 + 14) & 2) != 0 || (*(_BYTE *)(v22 + 17) & 8) != 0))
  {
    v23 = 1;
  }
  else if (*(_BYTE *)(a1 + 5464))
  {
    v23 = 0;
  }
  else
  {
    v25 = *(_QWORD **)(a1 + 88);
    v26 = sub_1C477672C((uint64_t)v25, v19);
    v27 = v25[1];
    v28 = 16;
    if (v27 == *v25)
      v28 = 20;
    v23 = v26 == (_QWORD *)(v27 + 8 * *(unsigned int *)((char *)v25 + v28));
  }
  v24 = 0;
  LOBYTE(v18) = (v23 | v18) != 0;
LABEL_32:
  if ((v18 & 1) != 0 || *(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
    goto LABEL_59;
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v15 + 72))(v40, v15);
  if (v41 >= 0)
    v29 = v41 & 0x7F;
  else
    v29 = (size_t)v40[1];
  v30 = __p;
  sub_1C484371C((uint64_t)__p, v29 + 12);
  if (v43 < 0)
    v30 = (void **)__p[0];
  if (v29)
  {
    if (v41 >= 0)
      v31 = v40;
    else
      v31 = (void **)v40[0];
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, "::initialize");
  v32 = (uint64_t *)off_1EF8EEB50();
  if (*v32)
  {
    if (v43 >= 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if (v43 >= 0)
      v34 = v43 & 0x7F;
    else
      v34 = (size_t)__p[1];
    llvm::timeTraceProfilerBegin(v33, v34, (uint64_t)&unk_1C872ACEA, 0);
  }
  if (v43 < 0)
    operator delete(__p[0]);
  if (v41 < 0)
    operator delete(v40[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v15 + 24))(v15, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v32)
  {
    sub_1C6392DC0(*v32);
    if ((v24 & 1) != 0)
      goto LABEL_58;
  }
  else if ((v24 & 1) != 0)
  {
    goto LABEL_58;
  }
  v38 = *(uint64_t **)(a1 + 80);
  __p[0] = (void *)v19;
  v40[0] = 0;
  if ((sub_1C614F7B0(v38, __p, v40) & 1) == 0)
  {
    v39 = *(uint64_t **)(a1 + 80);
    __p[0] = (void *)sub_1C5676C10((llvm::IRPosition *)&v44);
    v40[0] = 0;
    if ((sub_1C614F7B0(v39, __p, v40) & 1) == 0)
      goto LABEL_59;
  }
LABEL_58:
  v35 = *(_DWORD *)(a1 + 4368);
  if (v35 == 2)
  {
LABEL_59:
    v36 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    return v15;
  }
  if (a7)
  {
    *(_DWORD *)(a1 + 4368) = 1;
    llvm::Attributor::updateAA((llvm::Attributor *)a1, v15);
    *(_DWORD *)(a1 + 4368) = v35;
  }
  if (a4)
  {
    v37 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37))
      llvm::Attributor::recordDependence(a1, (uint64_t)v15, a4, a5);
  }
  return v15;
}

uint64_t sub_1C56818D0(uint64_t a1, __int128 *a2, uint64_t a3, int a4, char a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  __int128 v15;
  uint64_t *v16;

  v9 = *a2;
  v14 = &llvm::AAReachability::ID;
  v15 = v9;
  v16 = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0)
    return 0;
  v10 = v16[3];
  if (v10)
  {
    if (a3
      && a4 != 2
      && (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v16[3]),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11)))
    {
      llvm::Attributor::recordDependence(a1, v10, a3, a4);
      if ((a5 & 1) != 0)
        return v10;
    }
    else if ((a5 & 1) != 0)
    {
      return v10;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
      return 0;
  }
  return v10;
}

BOOL sub_1C56819BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int isPotentiallyReachable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _BYTE v16[24];
  __int128 v17;
  _BYTE v18[16];
  __int128 v19;

  *(_QWORD *)&v19 = a2;
  *((_QWORD *)&v19 + 1) = a3;
  v6 = a1 + 544;
  *(_QWORD *)&v17 = 0;
  if (!sub_1C6214EF4((uint64_t *)(a1 + 544), &v19, &v17)
    || (_QWORD)v17 == *(_QWORD *)(a1 + 544) + 24 * *(unsigned int *)(a1 + 560))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
    if (v9 == *(_QWORD *)(*(_QWORD *)(a3 + 40) + 56))
    {
      v10 = **(_QWORD **)(a1 + 440);
      v11 = *(_QWORD *)(v9 + 40);
      if (v10)
        v12 = v11 == 0;
      else
        v12 = 1;
      if (v12)
      {
        v13 = 0;
      }
      else
      {
        v13 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v10, &llvm::DominatorTreeAnalysis::Key, *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56))+ 8;
        v10 = **(_QWORD **)(a1 + 440);
        v11 = *(_QWORD *)(v9 + 40);
      }
      if (v10)
        v14 = v11 == 0;
      else
        v14 = 1;
      if (v14)
        v15 = 0;
      else
        v15 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v10, &llvm::LoopAnalysis::Key, v9) + 8;
      isPotentiallyReachable = llvm::isPotentiallyReachable(a2, a3, 0, v13, v15);
    }
    else
    {
      isPotentiallyReachable = 1;
    }
    v17 = v19;
    v18[0] = isPotentiallyReachable;
    sub_1C62865D4(v6, &v17, v18, (uint64_t)v16);
  }
  else
  {
    isPotentiallyReachable = *(unsigned __int8 *)(v17 + 16);
  }
  return isPotentiallyReachable != 0;
}

_OWORD *sub_1C5681B08(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6286728(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *result = v12;
      result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

llvm::AbstractAttribute *sub_1C5681BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v12;
  llvm::AbstractAttribute *v13;
  llvm::Attributor *v14;
  llvm::AbstractAttribute *v15;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  _BOOL4 v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void **v30;
  void **v31;
  uint64_t *v32;
  void **v33;
  size_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  void *v40[2];
  char v41;
  void *__p[2];
  char v43;
  __int128 v44;

  if (byte_1ED831CE0)
    v12 = a3;
  else
    v12 = 0;
  *(_QWORD *)&v44 = a2;
  *((_QWORD *)&v44 + 1) = v12;
  v13 = (llvm::AbstractAttribute *)sub_1C5681FBC(a1, &v44, a4, a5, 1);
  v15 = v13;
  if (v13 && a6)
  {
    if (*(_DWORD *)(a1 + 4368) == 1)
      llvm::Attributor::updateAA((llvm::Attributor *)a1, v13);
    return v15;
  }
  if (v13)
    return v15;
  v15 = (llvm::AbstractAttribute *)llvm::AAFunctionReachability::createForPosition((llvm::AAFunctionReachability *)&v44, (const llvm::IRPosition *)a1, v14);
  sub_1C6286800(a1, (uint64_t)v15);
  v17 = *(uint64_t **)(a1 + 5480);
  if (v17)
  {
    __p[0] = &llvm::AAFunctionReachability::ID;
    v40[0] = 0;
    v18 = sub_1C614F7B0(v17, __p, v40) ^ 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = v44 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v44 & 3) == 0)
    v19 = *(_QWORD *)(v19 + 24);
  v20 = *(unsigned __int8 *)(v19 + 16);
  if (!*(_BYTE *)(v19 + 16))
    goto LABEL_20;
  if (v20 == 21)
  {
    v21 = (uint64_t *)(v19 + 24);
  }
  else
  {
    if (v20 < 0x1C)
    {
      v19 = 0;
      goto LABEL_27;
    }
    v21 = (uint64_t *)(*(_QWORD *)(v19 + 40) + 56);
  }
  v19 = *v21;
  if (!*v21)
  {
LABEL_27:
    v24 = 1;
    goto LABEL_32;
  }
LABEL_20:
  v22 = *(_QWORD *)(v19 + 112);
  if (v22 && ((*(_BYTE *)(v22 + 14) & 2) != 0 || (*(_BYTE *)(v22 + 17) & 8) != 0))
  {
    v23 = 1;
  }
  else if (*(_BYTE *)(a1 + 5464))
  {
    v23 = 0;
  }
  else
  {
    v25 = *(_QWORD **)(a1 + 88);
    v26 = sub_1C477672C((uint64_t)v25, v19);
    v27 = v25[1];
    v28 = 16;
    if (v27 == *v25)
      v28 = 20;
    v23 = v26 == (_QWORD *)(v27 + 8 * *(unsigned int *)((char *)v25 + v28));
  }
  v24 = 0;
  LOBYTE(v18) = (v23 | v18) != 0;
LABEL_32:
  if ((v18 & 1) != 0 || *(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
    goto LABEL_59;
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v15 + 72))(v40, v15);
  if (v41 >= 0)
    v29 = v41 & 0x7F;
  else
    v29 = (size_t)v40[1];
  v30 = __p;
  sub_1C484371C((uint64_t)__p, v29 + 12);
  if (v43 < 0)
    v30 = (void **)__p[0];
  if (v29)
  {
    if (v41 >= 0)
      v31 = v40;
    else
      v31 = (void **)v40[0];
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, "::initialize");
  v32 = (uint64_t *)off_1EF8EEB50();
  if (*v32)
  {
    if (v43 >= 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if (v43 >= 0)
      v34 = v43 & 0x7F;
    else
      v34 = (size_t)__p[1];
    llvm::timeTraceProfilerBegin(v33, v34, (uint64_t)&unk_1C872ACEA, 0);
  }
  if (v43 < 0)
    operator delete(__p[0]);
  if (v41 < 0)
    operator delete(v40[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v15 + 24))(v15, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v32)
  {
    sub_1C6392DC0(*v32);
    if ((v24 & 1) != 0)
      goto LABEL_58;
  }
  else if ((v24 & 1) != 0)
  {
    goto LABEL_58;
  }
  v38 = *(uint64_t **)(a1 + 80);
  __p[0] = (void *)v19;
  v40[0] = 0;
  if ((sub_1C614F7B0(v38, __p, v40) & 1) == 0)
  {
    v39 = *(uint64_t **)(a1 + 80);
    __p[0] = (void *)sub_1C5676C10((llvm::IRPosition *)&v44);
    v40[0] = 0;
    if ((sub_1C614F7B0(v39, __p, v40) & 1) == 0)
      goto LABEL_59;
  }
LABEL_58:
  v35 = *(_DWORD *)(a1 + 4368);
  if (v35 == 2)
  {
LABEL_59:
    v36 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    return v15;
  }
  if (a7)
  {
    *(_DWORD *)(a1 + 4368) = 1;
    llvm::Attributor::updateAA((llvm::Attributor *)a1, v15);
    *(_DWORD *)(a1 + 4368) = v35;
  }
  if (a4)
  {
    v37 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37))
      llvm::Attributor::recordDependence(a1, (uint64_t)v15, a4, a5);
  }
  return v15;
}

uint64_t sub_1C5681FBC(uint64_t a1, __int128 *a2, uint64_t a3, int a4, char a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  __int128 v15;
  uint64_t *v16;

  v9 = *a2;
  v14 = &llvm::AAFunctionReachability::ID;
  v15 = v9;
  v16 = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0)
    return 0;
  v10 = v16[3];
  if (v10)
  {
    if (a3
      && a4 != 2
      && (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v16[3]),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11)))
    {
      llvm::Attributor::recordDependence(a1, v10, a3, a4);
      if ((a5 & 1) != 0)
        return v10;
    }
    else if ((a5 & 1) != 0)
    {
      return v10;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
      return 0;
  }
  return v10;
}

uint64_t sub_1C56820A8(uint64_t *a1, uint64_t a2)
{
  llvm::Instruction *v3;
  uint64_t v4;
  uint64_t NextNonDebugInstruction;
  uint64_t v6;
  uint64_t v7;
  llvm::Instruction *v9;
  void *v10[2];
  uint64_t v11;

  v3 = *(llvm::Instruction **)a2;
  v9 = *(llvm::Instruction **)a2;
  v10[0] = &v11;
  v10[1] = 0;
  if (*(_DWORD *)(a2 + 16))
  {
    sub_1C614C900((uint64_t)v10, a2 + 8);
    v3 = v9;
    if (!v9)
      goto LABEL_4;
  }
  else if (!v3)
  {
LABEL_4:
    v4 = 0;
    goto LABEL_8;
  }
  if (*((_BYTE *)v3 + 16) == 33)
    goto LABEL_4;
  NextNonDebugInstruction = llvm::Instruction::getNextNonDebugInstruction(v3, 0);
  v6 = *a1;
  v7 = *(unsigned int *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v6, v6 + 16, v7 + 1, 8);
    LODWORD(v7) = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = NextNonDebugInstruction;
  ++*(_DWORD *)(v6 + 8);
  v4 = 1;
LABEL_8:
  if (v10[0] != &v11)
    free(v10[0]);
  return v4;
}

uint64_t sub_1C5682184(uint64_t *a1, _DWORD *a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v8;
  int v9;

  v2 = *((_DWORD *)a1 + 4);
  if (v2)
  {
    v3 = *a1;
    v4 = v2 - 1;
    v5 = (37 * *a2) & (v2 - 1);
    v6 = *(_DWORD *)(*a1 + 16 * ((37 * *a2) & v4));
    if (*a2 == v6)
      return *(_QWORD *)(v3 + 16 * v5 + 8);
    v8 = 1;
    while (v6 != -1)
    {
      v9 = v5 + v8++;
      v5 = v9 & v4;
      v6 = *(_DWORD *)(v3 + 16 * v5);
      if (*a2 == v6)
        return *(_QWORD *)(v3 + 16 * v5 + 8);
    }
  }
  return 0;
}

void sub_1C56821F4(llvm::SmallPtrSetImplBase *this, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unsigned int i;
  uint64_t v9;
  uint64_t v10;
  uint64_t j;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  int v31;
  _BYTE v32[128];
  void *v33;
  uint64_t v34;
  _QWORD v35[17];

  v35[16] = *MEMORY[0x1E0C80C00];
  v5 = *(char **)(a2 + 24);
  v4 = *(char **)(a2 + 32);
  if (v5 == v4)
  {
    v6 = *(char **)(a2 + 24);
  }
  else
  {
    do
    {
      v7 = *(_QWORD *)v5;
      v5 += 8;
      sub_1C4774094(this, v7);
    }
    while (v5 != v4);
    v6 = *(char **)(a2 + 24);
    v5 = *(char **)(a2 + 32);
  }
  v28 = v32;
  v29 = v32;
  v30 = 16;
  v31 = 0;
  v33 = v35;
  v34 = 0x1000000000;
  sub_1C6177054((unsigned int *)&v33, v6, v5);
  for (i = v34; (_DWORD)v34; i = v34)
  {
    v9 = *((_QWORD *)v33 + i - 1);
    LODWORD(v34) = i - 1;
    sub_1C4774094(this, v9);
    v10 = v9 + 72;
    for (j = *(_QWORD *)(v9 + 80); j != v10; j = *(_QWORD *)(j + 8))
    {
      v12 = j - 24;
      if (!j)
        v12 = 0;
      v13 = *(_QWORD *)(v12 + 48);
      if (v13 != v12 + 40)
      {
        while (1)
        {
          v14 = v13 - 24;
          if (!v13)
            v14 = 0;
          v15 = *(unsigned __int8 *)(v14 + 16) - 33;
          v16 = v15 > 0x33;
          v17 = (1 << v15) & 0x8000000000041;
          if (!v16 && v17 != 0)
          {
            v19 = *(_QWORD *)(v13 - 56);
            if (v19)
            {
              if (!*(_BYTE *)(v19 + 16) && *(_QWORD *)(v19 + 24) == *(_QWORD *)(v13 + 48))
              {
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v28, *(_QWORD *)(v13 - 56));
                if (v20)
                {
                  v21 = v34;
                  if (v34 >= (unint64_t)HIDWORD(v34))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, (uint64_t)v35, v34 + 1, 8);
                    v21 = v34;
                  }
                  *((_QWORD *)v33 + v21) = v19;
                  LODWORD(v34) = v34 + 1;
                }
              }
            }
          }
          v13 = *(_QWORD *)(v13 + 8);
          v22 = j - 24;
          if (!j)
            v22 = 0;
          if (v13 == v22 + 40)
            break;
LABEL_32:
          if (j == v10)
            goto LABEL_33;
        }
        while (1)
        {
          j = *(_QWORD *)(j + 8);
          if (j == v10)
            goto LABEL_33;
          v23 = j - 24;
          if (!j)
            v23 = 0;
          v13 = *(_QWORD *)(v23 + 48);
          if (v13 != v23 + 40)
            goto LABEL_32;
        }
      }
    }
LABEL_33:
    ;
  }
  if (v29 == v28)
    goto LABEL_35;
  if (v30 < 0x21 || 4 * (HIDWORD(v30) - v31) >= v30)
  {
    memset(v29, 255, 8 * v30);
LABEL_35:
    HIDWORD(v30) = 0;
    v31 = 0;
    goto LABEL_36;
  }
  free(v29);
  v25 = 1 << (33 - __clz(HIDWORD(v30) - v31 - 1));
  v16 = (HIDWORD(v30) - v31) > 0x10;
  HIDWORD(v30) = 0;
  v31 = 0;
  if (v16)
    v26 = v25;
  else
    v26 = 32;
  LODWORD(v30) = v26;
  v27 = malloc_type_malloc(8 * v26, 0x4065EBACuLL);
  if (!v27)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v29 = v27;
  memset(v27, 255, 8 * v30);
LABEL_36:
  sub_1C6177054((unsigned int *)&v33, *(char **)(a2 + 24), *(char **)(a2 + 32));
  while ((_DWORD)v34)
  {
    v24 = *((_QWORD *)v33 + v34 - 1);
    LODWORD(v34) = v34 - 1;
    sub_1C4774094(this, v24);
    sub_1C6287230(v24, (llvm::SmallPtrSetImplBase *)&v28, (llvm::SmallPtrSetImplBase *)&v33, 1);
  }
  if (v33 != v35)
    free(v33);
  if (v29 != v28)
    free(v29);
}

uint64_t sub_1C5682548(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;

  v2 = **(_QWORD **)(a1 + 8);
  if (v2)
    v3 = *(_QWORD *)(a2 + 40) == 0;
  else
    v3 = 1;
  if (v3)
    return 0;
  else
    return llvm::AnalysisManager<llvm::Function>::getResultImpl(v2, &llvm::LoopAnalysis::Key, a2) + 8;
}

uint64_t sub_1C568258C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;

  v2 = **(_QWORD **)(a1 + 8);
  if (v2)
    v3 = *(_QWORD *)(a2 + 40) == 0;
  else
    v3 = 1;
  if (v3)
    return 0;
  else
    return llvm::AnalysisManager<llvm::Function>::getResultImpl(v2, &llvm::DominatorTreeAnalysis::Key, a2) + 8;
}

uint64_t sub_1C56825D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;

  v2 = **(_QWORD **)(a1 + 8);
  if (v2)
    v3 = *(_QWORD *)(a2 + 40) == 0;
  else
    v3 = 1;
  if (v3)
    return 0;
  else
    return llvm::AnalysisManager<llvm::Function>::getResultImpl(v2, &llvm::PostDominatorTreeAnalysis::Key, a2) + 8;
}

llvm::SmallPtrSetImplBase **sub_1C5682614(llvm::SmallPtrSetImplBase **result, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  llvm::SmallPtrSetImplBase **v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a2 + 24);
  if (v2)
    v3 = *(unsigned __int8 *)(v2 + 16) >= 0x1Cu;
  else
    v3 = 0;
  if (v3)
  {
    v4 = result;
    result = (llvm::SmallPtrSetImplBase **)sub_1C4774094(*result, *(_QWORD *)(*(_QWORD *)(v2 + 40) + 56));
    if (v5)
    {
      v6 = (uint64_t)v4[1];
      v7 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 56);
      v8 = *(unsigned int *)(v6 + 8);
      if (v8 >= *(_DWORD *)(v6 + 12))
      {
        result = (llvm::SmallPtrSetImplBase **)llvm::SmallVectorBase<unsigned int>::grow_pod(v6, v6 + 16, v8 + 1, 8);
        LODWORD(v8) = *(_DWORD *)(v6 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v6 + 8 * v8) = v7;
      ++*(_DWORD *)(v6 + 8);
    }
  }
  return result;
}

uint64_t sub_1C56826A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *(_QWORD *)(a1 + 96);
  v3 = *(unsigned int *)(a1 + 112);
  v4 = v2 + 16 * v3;
  if (*(_DWORD *)(a1 + 104))
  {
    if ((_DWORD)v3)
    {
      v6 = 16 * v3;
      v5 = *(_QWORD *)(a1 + 96);
      while ((*(_QWORD *)v5 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v5 += 16;
        v6 -= 16;
        if (!v6)
          goto LABEL_7;
      }
    }
    else
    {
      v5 = *(_QWORD *)(a1 + 96);
    }
  }
  else
  {
LABEL_7:
    v5 = v2 + 16 * v3;
  }
  v7 = v2 + 16 * v3;
LABEL_9:
  while (v5 != v7)
  {
    llvm::InformationCache::FunctionInfo::~FunctionInfo(*(llvm::InformationCache::FunctionInfo **)(v5 + 8));
    v8 = v5 + 16;
    v5 = v4;
    if (v8 != v4)
    {
      v5 = v8;
      while ((*(_QWORD *)v5 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v5 += 16;
        if (v5 == v4)
        {
          v5 = v4;
          goto LABEL_9;
        }
      }
    }
  }
  if (*(char *)(a1 + 591) < 0)
    operator delete(*(void **)(a1 + 568));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 544), 8);
  v9 = *(void **)(a1 + 456);
  if (v9 != *(void **)(a1 + 448))
    free(v9);
  sub_1C6176BF8((_QWORD *)(a1 + 392));
  sub_1C6287830(a1 + 368);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 368), 8);
  sub_1C61AAB08(a1 + 136);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 96), 8);
  v10 = *(void **)(a1 + 8);
  if (v10 != *(void **)a1)
    free(v10);
  return a1;
}

void sub_1C56827D0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C56827F4(uint64_t a1, uint64_t a2)
{
  return sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
}

BOOL sub_1C5682804(llvm::ModulePass *a1, uint64_t a2)
{
  _BOOL8 v3;
  uint64_t i;
  uint64_t v6;
  _QWORD v7[2];
  int v8;
  void *__p;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[77];
  _QWORD v14[4];
  _QWORD v15[6];
  _QWORD v16[2];
  _QWORD v17[3];
  int v18;
  _QWORD v19[18];
  _QWORD v20[18];
  _BYTE v21[176];
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if ((llvm::ModulePass::skipModule(a1, (uint64_t **)a2) & 1) != 0)
    return 0;
  v11 = 0;
  v12 = 0;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  __p = 0;
  v10 = 0;
  for (i = *(_QWORD *)(a2 + 32); i != a2 + 24; i = *(_QWORD *)(i + 8))
  {
    v6 = i - 56;
    if (!i)
      v6 = 0;
    v13[0] = v6;
    sub_1C567D3D8(v7, v13);
  }
  v17[0] = v19;
  v17[1] = v19;
  v17[2] = 16;
  v18 = 0;
  v19[16] = v20;
  v19[17] = 0x1000000000;
  v20[16] = v21;
  v20[17] = 0x1000000000;
  memset(&v21[128], 0, 48);
  v22 = 0;
  v14[1] = 0;
  v14[0] = 0;
  v14[2] = v15;
  v14[3] = 0x400000000;
  v15[4] = v16;
  v15[5] = 0;
  v16[0] = 0;
  v16[1] = 1;
  sub_1C6286EFC((uint64_t)v13, a2, (uint64_t)&v12, (uint64_t)v14, 0);
  v3 = sub_1C567FD90((uint64_t)v13, (uint64_t)v7, (uint64_t)v17, 1);
  sub_1C56826A4((uint64_t)v13);
  sub_1C4926AE8((uint64_t)v14);
  sub_1C62878B8((llvm::CallGraphUpdater *)v17);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v7[0], 8);
  return v3;
}

void sub_1C56829B0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C56829D4(llvm::CallGraphSCCPass *a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  return llvm::CallGraphSCCPass::getAnalysisUsage(a1, a2);
}

BOOL sub_1C5682A0C(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t ***v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD v17[77];
  _QWORD v18[4];
  _QWORD v19[6];
  _QWORD v20[2];
  _QWORD v21[3];
  int v22;
  _QWORD v23[18];
  _QWORD v24[18];
  _QWORD v25[18];
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if ((llvm::CallGraphSCCPass::skipSCC(a1, (uint64_t ****)a2) & 1) != 0)
    return 0;
  v12[0] = 0;
  v12[1] = 0;
  v13 = 0;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  if (v4 == v5)
  {
    v3 = 0;
    goto LABEL_17;
  }
  do
  {
    v6 = *(_QWORD *)(*(_QWORD *)v4 + 8);
    v17[0] = v6;
    if (!v6)
      goto LABEL_12;
    if (*(_BYTE *)(v6 + 16))
    {
      if (*(_BYTE *)(v6 + 16) != 3 || (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) != 0)
        goto LABEL_11;
    }
    else if (*(_QWORD *)(v6 + 72) != v6 + 72 || (*(_BYTE *)(v6 + 34) & 0x80) != 0)
    {
LABEL_11:
      sub_1C567D3D8(v12, v17);
    }
LABEL_12:
    v4 += 8;
  }
  while (v4 != v5);
  v7 = v14;
  if (v14 == v15)
  {
    v3 = 0;
    if (v14)
      goto LABEL_15;
  }
  else
  {
    v11 = 0;
    v9 = *(uint64_t ****)a2;
    v21[0] = v23;
    v21[1] = v23;
    v21[2] = 16;
    v22 = 0;
    v23[16] = v24;
    v23[17] = 0x1000000000;
    v24[16] = v25;
    v24[17] = 0x1000000000;
    v28 = 0;
    v27 = 0u;
    v26 = 0u;
    v25[16] = v9;
    v25[17] = a2;
    v10 = *(_QWORD *)(*(v15 - 1) + 40);
    v18[1] = 0;
    v18[0] = 0;
    v18[2] = v19;
    v18[3] = 0x400000000;
    v19[4] = v20;
    v19[5] = 0;
    v20[0] = 0;
    v20[1] = 1;
    sub_1C6286EFC((uint64_t)v17, v10, (uint64_t)&v11, (uint64_t)v18, (uint64_t)v12);
    v3 = sub_1C567FD90((uint64_t)v17, (uint64_t)v12, (uint64_t)v21, 0);
    sub_1C56826A4((uint64_t)v17);
    sub_1C4926AE8((uint64_t)v18);
    sub_1C62878B8((llvm::CallGraphUpdater *)v21);
    v7 = v14;
    if (v14)
    {
LABEL_15:
      v15 = v7;
      operator delete(v7);
    }
  }
LABEL_17:
  MEMORY[0x1CAA32FB4](v12[0], 8);
  return v3;
}

uint64_t sub_1C5682C18()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5680214(v0);
}

uint64_t sub_1C5682C40()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C56802DC(v0);
}

unint64_t sub_1C5682C68(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  int32x2_t *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30[49];

  v30[48] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 0x10)
    {
      v29 = a2;
      *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v29;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C6287C60((int *)a1, v6, &v6[3 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v30;
  v10 = (_QWORD *)(a1 + 8);
  do
  {
    v11 = v10[2];
    if ((v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = 4;
      v9[1] = 0;
      v9[2] = v11;
      if (v11)
      {
        v12 = *v10 & 0xFFFFFFFFFFFFFFF8;
        v9[1] = *(_QWORD *)v12;
        *(_QWORD *)v12 = v9;
        *v9 = v12 | 4;
        v13 = (unint64_t *)v9[1];
        if (v13)
          *v13 = *v13 & 7 | (unint64_t)(v9 + 1);
      }
      v9 += 3;
      v11 = v10[2];
    }
    if (v11 != -8192 && v11 != -4096 && v11 != 0)
    {
      v15 = *v10 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v15 = v10[1];
      v16 = (unint64_t *)v10[1];
      if (v16)
      {
        *v16 = *v16 & 7 | v15;
      }
      else
      {
        v17 = v10[2];
        v18 = ***(int32x2_t ****)v17;
        v19 = (unint64_t)v18[303];
        if (v19 <= v15)
        {
          v20 = v18[305].u32[0];
          if (v19 + 16 * v20 > v15)
          {
            v21 = v20 - 1;
            LODWORD(v22) = v21 & ((v17 >> 4) ^ (v17 >> 9));
            v23 = (uint64_t *)(v19 + 16 * v22);
            v24 = *v23;
            if (v17 == *v23)
            {
LABEL_30:
              *v23 = -8192;
              v18[304] = vadd_s32(v18[304], (int32x2_t)0x1FFFFFFFFLL);
              v17 = v10[2];
            }
            else
            {
              v25 = 1;
              while (v24 != -4096)
              {
                v26 = v22 + v25++;
                v22 = v26 & v21;
                v24 = *(_QWORD *)(v19 + 16 * v22);
                if (v17 == v24)
                {
                  v23 = (uint64_t *)(v19 + 16 * v22);
                  goto LABEL_30;
                }
              }
            }
            *(_BYTE *)(v17 + 17) &= ~1u;
          }
        }
      }
    }
    ++v8;
    v10 = (_QWORD *)(a1 + 8 + 24 * v8);
  }
  while (v8 != 16);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v27 = a2;
    *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v27;
  }
  return sub_1C6287C60((int *)a1, v30, v9);
}

_QWORD *sub_1C5682F3C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = (_QWORD *)sub_1C5682FF4(a1, a2, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v12 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v13 = 8;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(unsigned int *)(a1 + 16);
    }
    v11 = 0;
    v10 = v12 + 8 * v13;
  }
  else
  {
    result = sub_1C568309C((_DWORD *)a1, (uint64_t)a2, a2, v14);
    v7 = result;
    *result = *a2;
    v8 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v9 = 8;
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(unsigned int *)(a1 + 16);
    }
    v10 = v8 + 8 * v9;
    v11 = 1;
  }
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v10;
  *(_BYTE *)(a3 + 16) = v11;
  return result;
}

uint64_t sub_1C5682FF4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_17:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_17;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C568309C(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  uint64_t v8;
  _QWORD *v9;

  v4 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v5 = 8;
  else
    v5 = a1[4];
  if (4 * v4 + 4 >= 3 * v5)
  {
    v5 *= 2;
  }
  else if (v5 + ~v4 - a1[1] > v5 >> 3)
  {
    goto LABEL_5;
  }
  v8 = (uint64_t)a1;
  sub_1C5683158((uint64_t)a1, v5);
  v9 = 0;
  sub_1C5682FF4(v8, a3, &v9);
  a1 = (_DWORD *)v8;
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C5683158(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C6287D08(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 72; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C6287D08(a1, v14, v8);
}

__n128 sub_1C56832C0(_WORD *a1, __n128 *a2, char **a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED831BA0, "attributor-print-dep", 0x14uLL);
  word_1ED831BAA = (32 * (*a1 & 3)) | word_1ED831BAA & 0xFF9F;
  result = *a2;
  xmmword_1ED831BC0 = (__int128)*a2;
  v7 = *a3;
  byte_1ED831C20 = **a3;
  byte_1ED831C31 = 1;
  byte_1ED831C30 = *v7;
  return result;
}

__n128 sub_1C5683344(_WORD *a1, __n128 *a2, char **a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED831C60, "attributor-enable-call-site-specific-deduction", 0x2EuLL);
  word_1ED831C6A = (32 * (*a1 & 3)) | word_1ED831C6A & 0xFF9F;
  result = *a2;
  xmmword_1ED831C80 = (__int128)*a2;
  v7 = *a3;
  byte_1ED831CE0 = **a3;
  byte_1ED831CF1 = 1;
  byte_1ED831CF0 = *v7;
  return result;
}

llvm::AbstractAttribute *sub_1C56833C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v12;
  llvm::AbstractAttribute *v13;
  llvm::Attributor *v14;
  llvm::AbstractAttribute *v15;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  _BOOL4 v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void **v30;
  void **v31;
  uint64_t *v32;
  void **v33;
  size_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  void *v40[2];
  char v41;
  void *__p[2];
  char v43;
  __int128 v44;

  if (byte_1ED831CE0)
    v12 = a3;
  else
    v12 = 0;
  *(_QWORD *)&v44 = a2;
  *((_QWORD *)&v44 + 1) = v12;
  v13 = (llvm::AbstractAttribute *)sub_1C56837B4(a1, &v44, a4, a5, 1);
  v15 = v13;
  if (v13 && a6)
  {
    if (*(_DWORD *)(a1 + 4368) == 1)
      llvm::Attributor::updateAA((llvm::Attributor *)a1, v13);
    return v15;
  }
  if (v13)
    return v15;
  v15 = (llvm::AbstractAttribute *)llvm::AANoSync::createForPosition((llvm::AANoSync *)&v44, (const llvm::IRPosition *)a1, v14);
  sub_1C6288134(a1, (uint64_t)v15);
  v17 = *(uint64_t **)(a1 + 5480);
  if (v17)
  {
    __p[0] = &llvm::AANoSync::ID;
    v40[0] = 0;
    v18 = sub_1C614F7B0(v17, __p, v40) ^ 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = v44 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v44 & 3) == 0)
    v19 = *(_QWORD *)(v19 + 24);
  v20 = *(unsigned __int8 *)(v19 + 16);
  if (!*(_BYTE *)(v19 + 16))
    goto LABEL_20;
  if (v20 == 21)
  {
    v21 = (uint64_t *)(v19 + 24);
  }
  else
  {
    if (v20 < 0x1C)
    {
      v19 = 0;
      goto LABEL_27;
    }
    v21 = (uint64_t *)(*(_QWORD *)(v19 + 40) + 56);
  }
  v19 = *v21;
  if (!*v21)
  {
LABEL_27:
    v24 = 1;
    goto LABEL_32;
  }
LABEL_20:
  v22 = *(_QWORD *)(v19 + 112);
  if (v22 && ((*(_BYTE *)(v22 + 14) & 2) != 0 || (*(_BYTE *)(v22 + 17) & 8) != 0))
  {
    v23 = 1;
  }
  else if (*(_BYTE *)(a1 + 5464))
  {
    v23 = 0;
  }
  else
  {
    v25 = *(_QWORD **)(a1 + 88);
    v26 = sub_1C477672C((uint64_t)v25, v19);
    v27 = v25[1];
    v28 = 16;
    if (v27 == *v25)
      v28 = 20;
    v23 = v26 == (_QWORD *)(v27 + 8 * *(unsigned int *)((char *)v25 + v28));
  }
  v24 = 0;
  LOBYTE(v18) = (v23 | v18) != 0;
LABEL_32:
  if ((v18 & 1) != 0 || *(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
    goto LABEL_59;
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v15 + 72))(v40, v15);
  if (v41 >= 0)
    v29 = v41 & 0x7F;
  else
    v29 = (size_t)v40[1];
  v30 = __p;
  sub_1C484371C((uint64_t)__p, v29 + 12);
  if (v43 < 0)
    v30 = (void **)__p[0];
  if (v29)
  {
    if (v41 >= 0)
      v31 = v40;
    else
      v31 = (void **)v40[0];
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, "::initialize");
  v32 = (uint64_t *)off_1EF8EEB50();
  if (*v32)
  {
    if (v43 >= 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if (v43 >= 0)
      v34 = v43 & 0x7F;
    else
      v34 = (size_t)__p[1];
    llvm::timeTraceProfilerBegin(v33, v34, (uint64_t)&unk_1C872ACEA, 0);
  }
  if (v43 < 0)
    operator delete(__p[0]);
  if (v41 < 0)
    operator delete(v40[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v15 + 24))(v15, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v32)
  {
    sub_1C6392DC0(*v32);
    if ((v24 & 1) != 0)
      goto LABEL_58;
  }
  else if ((v24 & 1) != 0)
  {
    goto LABEL_58;
  }
  v38 = *(uint64_t **)(a1 + 80);
  __p[0] = (void *)v19;
  v40[0] = 0;
  if ((sub_1C614F7B0(v38, __p, v40) & 1) == 0)
  {
    v39 = *(uint64_t **)(a1 + 80);
    __p[0] = (void *)sub_1C5676C10((llvm::IRPosition *)&v44);
    v40[0] = 0;
    if ((sub_1C614F7B0(v39, __p, v40) & 1) == 0)
      goto LABEL_59;
  }
LABEL_58:
  v35 = *(_DWORD *)(a1 + 4368);
  if (v35 == 2)
  {
LABEL_59:
    v36 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    return v15;
  }
  if (a7)
  {
    *(_DWORD *)(a1 + 4368) = 1;
    llvm::Attributor::updateAA((llvm::Attributor *)a1, v15);
    *(_DWORD *)(a1 + 4368) = v35;
  }
  if (a4)
  {
    v37 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37))
      llvm::Attributor::recordDependence(a1, (uint64_t)v15, a4, a5);
  }
  return v15;
}

uint64_t sub_1C56837B4(uint64_t a1, __int128 *a2, uint64_t a3, int a4, char a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  __int128 v15;
  uint64_t *v16;

  v9 = *a2;
  v14 = &llvm::AANoSync::ID;
  v15 = v9;
  v16 = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0)
    return 0;
  v10 = v16[3];
  if (v10)
  {
    if (a3
      && a4 != 2
      && (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v16[3]),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11)))
    {
      llvm::Attributor::recordDependence(a1, v10, a3, a4);
      if ((a5 & 1) != 0)
        return v10;
    }
    else if ((a5 & 1) != 0)
    {
      return v10;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
      return 0;
  }
  return v10;
}

llvm::AbstractAttribute *sub_1C56838A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v12;
  llvm::AbstractAttribute *v13;
  llvm::Attributor *v14;
  llvm::AbstractAttribute *v15;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  _BOOL4 v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void **v30;
  void **v31;
  uint64_t *v32;
  void **v33;
  size_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  void *v40[2];
  char v41;
  void *__p[2];
  char v43;
  __int128 v44;

  if (byte_1ED831CE0)
    v12 = a3;
  else
    v12 = 0;
  *(_QWORD *)&v44 = a2;
  *((_QWORD *)&v44 + 1) = v12;
  v13 = (llvm::AbstractAttribute *)sub_1C5683C8C(a1, &v44, a4, a5, 1);
  v15 = v13;
  if (v13 && a6)
  {
    if (*(_DWORD *)(a1 + 4368) == 1)
      llvm::Attributor::updateAA((llvm::Attributor *)a1, v13);
    return v15;
  }
  if (v13)
    return v15;
  v15 = (llvm::AbstractAttribute *)llvm::AAInstanceInfo::createForPosition((llvm::AAInstanceInfo *)&v44, (const llvm::IRPosition *)a1, v14);
  sub_1C62881A0(a1, (uint64_t)v15);
  v17 = *(uint64_t **)(a1 + 5480);
  if (v17)
  {
    __p[0] = &llvm::AAInstanceInfo::ID;
    v40[0] = 0;
    v18 = sub_1C614F7B0(v17, __p, v40) ^ 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = v44 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v44 & 3) == 0)
    v19 = *(_QWORD *)(v19 + 24);
  v20 = *(unsigned __int8 *)(v19 + 16);
  if (!*(_BYTE *)(v19 + 16))
    goto LABEL_20;
  if (v20 == 21)
  {
    v21 = (uint64_t *)(v19 + 24);
  }
  else
  {
    if (v20 < 0x1C)
    {
      v19 = 0;
      goto LABEL_27;
    }
    v21 = (uint64_t *)(*(_QWORD *)(v19 + 40) + 56);
  }
  v19 = *v21;
  if (!*v21)
  {
LABEL_27:
    v24 = 1;
    goto LABEL_32;
  }
LABEL_20:
  v22 = *(_QWORD *)(v19 + 112);
  if (v22 && ((*(_BYTE *)(v22 + 14) & 2) != 0 || (*(_BYTE *)(v22 + 17) & 8) != 0))
  {
    v23 = 1;
  }
  else if (*(_BYTE *)(a1 + 5464))
  {
    v23 = 0;
  }
  else
  {
    v25 = *(_QWORD **)(a1 + 88);
    v26 = sub_1C477672C((uint64_t)v25, v19);
    v27 = v25[1];
    v28 = 16;
    if (v27 == *v25)
      v28 = 20;
    v23 = v26 == (_QWORD *)(v27 + 8 * *(unsigned int *)((char *)v25 + v28));
  }
  v24 = 0;
  LOBYTE(v18) = (v23 | v18) != 0;
LABEL_32:
  if ((v18 & 1) != 0 || *(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
    goto LABEL_59;
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v15 + 72))(v40, v15);
  if (v41 >= 0)
    v29 = v41 & 0x7F;
  else
    v29 = (size_t)v40[1];
  v30 = __p;
  sub_1C484371C((uint64_t)__p, v29 + 12);
  if (v43 < 0)
    v30 = (void **)__p[0];
  if (v29)
  {
    if (v41 >= 0)
      v31 = v40;
    else
      v31 = (void **)v40[0];
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, "::initialize");
  v32 = (uint64_t *)off_1EF8EEB50();
  if (*v32)
  {
    if (v43 >= 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if (v43 >= 0)
      v34 = v43 & 0x7F;
    else
      v34 = (size_t)__p[1];
    llvm::timeTraceProfilerBegin(v33, v34, (uint64_t)&unk_1C872ACEA, 0);
  }
  if (v43 < 0)
    operator delete(__p[0]);
  if (v41 < 0)
    operator delete(v40[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v15 + 24))(v15, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v32)
  {
    sub_1C6392DC0(*v32);
    if ((v24 & 1) != 0)
      goto LABEL_58;
  }
  else if ((v24 & 1) != 0)
  {
    goto LABEL_58;
  }
  v38 = *(uint64_t **)(a1 + 80);
  __p[0] = (void *)v19;
  v40[0] = 0;
  if ((sub_1C614F7B0(v38, __p, v40) & 1) == 0)
  {
    v39 = *(uint64_t **)(a1 + 80);
    __p[0] = (void *)sub_1C5676C10((llvm::IRPosition *)&v44);
    v40[0] = 0;
    if ((sub_1C614F7B0(v39, __p, v40) & 1) == 0)
      goto LABEL_59;
  }
LABEL_58:
  v35 = *(_DWORD *)(a1 + 4368);
  if (v35 == 2)
  {
LABEL_59:
    v36 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    return v15;
  }
  if (a7)
  {
    *(_DWORD *)(a1 + 4368) = 1;
    llvm::Attributor::updateAA((llvm::Attributor *)a1, v15);
    *(_DWORD *)(a1 + 4368) = v35;
  }
  if (a4)
  {
    v37 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37))
      llvm::Attributor::recordDependence(a1, (uint64_t)v15, a4, a5);
  }
  return v15;
}

uint64_t sub_1C5683C8C(uint64_t a1, __int128 *a2, uint64_t a3, int a4, char a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  __int128 v15;
  uint64_t *v16;

  v9 = *a2;
  v14 = &llvm::AAInstanceInfo::ID;
  v15 = v9;
  v16 = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0)
    return 0;
  v10 = v16[3];
  if (v10)
  {
    if (a3
      && a4 != 2
      && (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v16[3]),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11)))
    {
      llvm::Attributor::recordDependence(a1, v10, a3, a4);
      if ((a5 & 1) != 0)
        return v10;
    }
    else if ((a5 & 1) != 0)
    {
      return v10;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
      return 0;
  }
  return v10;
}

llvm::AbstractAttribute *sub_1C5683D78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v12;
  llvm::AbstractAttribute *v13;
  llvm::Attributor *v14;
  llvm::AbstractAttribute *v15;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  _BOOL4 v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void **v30;
  void **v31;
  uint64_t *v32;
  void **v33;
  size_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  void *v40[2];
  char v41;
  void *__p[2];
  char v43;
  __int128 v44;

  if (byte_1ED831CE0)
    v12 = a3;
  else
    v12 = 0;
  *(_QWORD *)&v44 = a2;
  *((_QWORD *)&v44 + 1) = v12;
  v13 = (llvm::AbstractAttribute *)sub_1C5684164(a1, &v44, a4, a5, 1);
  v15 = v13;
  if (v13 && a6)
  {
    if (*(_DWORD *)(a1 + 4368) == 1)
      llvm::Attributor::updateAA((llvm::Attributor *)a1, v13);
    return v15;
  }
  if (v13)
    return v15;
  v15 = (llvm::AbstractAttribute *)llvm::AAPointerInfo::createForPosition((llvm::AAPointerInfo *)&v44, (const llvm::IRPosition *)a1, v14);
  sub_1C6288368(a1, (uint64_t)v15);
  v17 = *(uint64_t **)(a1 + 5480);
  if (v17)
  {
    __p[0] = &llvm::AAPointerInfo::ID;
    v40[0] = 0;
    v18 = sub_1C614F7B0(v17, __p, v40) ^ 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = v44 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v44 & 3) == 0)
    v19 = *(_QWORD *)(v19 + 24);
  v20 = *(unsigned __int8 *)(v19 + 16);
  if (!*(_BYTE *)(v19 + 16))
    goto LABEL_20;
  if (v20 == 21)
  {
    v21 = (uint64_t *)(v19 + 24);
  }
  else
  {
    if (v20 < 0x1C)
    {
      v19 = 0;
      goto LABEL_27;
    }
    v21 = (uint64_t *)(*(_QWORD *)(v19 + 40) + 56);
  }
  v19 = *v21;
  if (!*v21)
  {
LABEL_27:
    v24 = 1;
    goto LABEL_32;
  }
LABEL_20:
  v22 = *(_QWORD *)(v19 + 112);
  if (v22 && ((*(_BYTE *)(v22 + 14) & 2) != 0 || (*(_BYTE *)(v22 + 17) & 8) != 0))
  {
    v23 = 1;
  }
  else if (*(_BYTE *)(a1 + 5464))
  {
    v23 = 0;
  }
  else
  {
    v25 = *(_QWORD **)(a1 + 88);
    v26 = sub_1C477672C((uint64_t)v25, v19);
    v27 = v25[1];
    v28 = 16;
    if (v27 == *v25)
      v28 = 20;
    v23 = v26 == (_QWORD *)(v27 + 8 * *(unsigned int *)((char *)v25 + v28));
  }
  v24 = 0;
  LOBYTE(v18) = (v23 | v18) != 0;
LABEL_32:
  if ((v18 & 1) != 0 || *(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
    goto LABEL_59;
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v15 + 72))(v40, v15);
  if (v41 >= 0)
    v29 = v41 & 0x7F;
  else
    v29 = (size_t)v40[1];
  v30 = __p;
  sub_1C484371C((uint64_t)__p, v29 + 12);
  if (v43 < 0)
    v30 = (void **)__p[0];
  if (v29)
  {
    if (v41 >= 0)
      v31 = v40;
    else
      v31 = (void **)v40[0];
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, "::initialize");
  v32 = (uint64_t *)off_1EF8EEB50();
  if (*v32)
  {
    if (v43 >= 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if (v43 >= 0)
      v34 = v43 & 0x7F;
    else
      v34 = (size_t)__p[1];
    llvm::timeTraceProfilerBegin(v33, v34, (uint64_t)&unk_1C872ACEA, 0);
  }
  if (v43 < 0)
    operator delete(__p[0]);
  if (v41 < 0)
    operator delete(v40[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v15 + 24))(v15, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v32)
  {
    sub_1C6392DC0(*v32);
    if ((v24 & 1) != 0)
      goto LABEL_58;
  }
  else if ((v24 & 1) != 0)
  {
    goto LABEL_58;
  }
  v38 = *(uint64_t **)(a1 + 80);
  __p[0] = (void *)v19;
  v40[0] = 0;
  if ((sub_1C614F7B0(v38, __p, v40) & 1) == 0)
  {
    v39 = *(uint64_t **)(a1 + 80);
    __p[0] = (void *)sub_1C5676C10((llvm::IRPosition *)&v44);
    v40[0] = 0;
    if ((sub_1C614F7B0(v39, __p, v40) & 1) == 0)
      goto LABEL_59;
  }
LABEL_58:
  v35 = *(_DWORD *)(a1 + 4368);
  if (v35 == 2)
  {
LABEL_59:
    v36 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    return v15;
  }
  if (a7)
  {
    *(_DWORD *)(a1 + 4368) = 1;
    llvm::Attributor::updateAA((llvm::Attributor *)a1, v15);
    *(_DWORD *)(a1 + 4368) = v35;
  }
  if (a4)
  {
    v37 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37))
      llvm::Attributor::recordDependence(a1, (uint64_t)v15, a4, a5);
  }
  return v15;
}

uint64_t sub_1C5684164(uint64_t a1, __int128 *a2, uint64_t a3, int a4, char a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  __int128 v15;
  uint64_t *v16;

  v9 = *a2;
  v14 = &llvm::AAPointerInfo::ID;
  v15 = v9;
  v16 = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0)
    return 0;
  v10 = v16[3];
  if (v10)
  {
    if (a3
      && a4 != 2
      && (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v16[3]),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11)))
    {
      llvm::Attributor::recordDependence(a1, v10, a3, a4);
      if ((a5 & 1) != 0)
        return v10;
    }
    else if ((a5 & 1) != 0)
    {
      return v10;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
      return 0;
  }
  return v10;
}

uint64_t sub_1C5684250(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = 1;
  if ((*(_BYTE *)(a2 + 32) & 2) == 0 || !*(_BYTE *)(a2 + 24))
    return v3;
  v4 = *(_QWORD *)(a2 + 16);
  if (!**(_BYTE **)a1 || (a3 & 1) != 0)
  {
    if (!v4)
    {
      v3 = 0;
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8 || *(_BYTE *)(v8 + 16) != 61)
        return v3;
      v11 = *(_QWORD *)(a1 + 8);
      v12 = *(_QWORD *)(v8 - 64);
      v13 = *(unsigned int *)(v11 + 8);
      if (v13 >= *(_DWORD *)(v11 + 12))
      {
        v17 = *(_QWORD *)(a1 + 8);
        v20 = a1;
        v15 = *(_QWORD *)(v8 - 64);
        llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v11 + 16, v13 + 1, 8);
        v12 = v15;
        v11 = v17;
        a1 = v20;
        LODWORD(v13) = *(_DWORD *)(v17 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v11 + 8 * v13) = v12;
      ++*(_DWORD *)(v11 + 8);
      v7 = *(_QWORD *)(a1 + 16);
      goto LABEL_12;
    }
  }
  else if (!v4 || *(unsigned __int8 *)(v4 + 16) - 11 >= 2)
  {
    return 0;
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned int *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    v16 = a2;
    v19 = a1;
    v14 = *(_QWORD *)(a1 + 8);
    llvm::SmallVectorBase<unsigned int>::grow_pod(v5, v5 + 16, v6 + 1, 8);
    v5 = v14;
    a2 = v16;
    a1 = v19;
    LODWORD(v6) = *(_DWORD *)(v14 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a2 + 8);
LABEL_12:
  v9 = *(_DWORD *)(v7 + 8);
  if (v9 >= *(_DWORD *)(v7 + 12))
  {
    v18 = v7;
    llvm::SmallVectorBase<unsigned int>::grow_pod(v7, v7 + 16, v9 + 1, 8);
    v7 = v18;
    v9 = *(_DWORD *)(v18 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v7 + 8 * v9) = v8;
  ++*(_DWORD *)(v7 + 8);
  return 1;
}

_QWORD *sub_1C56843D8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;

  v6 = a2 + 8;
  if ((*(_DWORD *)a2 & 1) != 0)
  {
    v7 = 4;
    v8 = a2 + 8;
  }
  else
  {
    v7 = *(_DWORD *)(a2 + 16);
    if (!v7)
    {
      v15 = 0;
LABEL_9:
      result = sub_1C4E4473C(a2, (uint64_t)a3, a3, v15);
      *result = *a3;
      if ((*(_BYTE *)a2 & 1) != 0)
      {
        v16 = 4;
      }
      else
      {
        v6 = *(_QWORD *)(a2 + 8);
        v16 = *(unsigned int *)(a2 + 16);
      }
      v17 = v6 + 8 * v16;
      v18 = 1;
      goto LABEL_12;
    }
    v8 = *(_QWORD *)(a2 + 8);
  }
  v9 = v7 - 1;
  v10 = ((*a3 >> 4) ^ (*a3 >> 9)) & v9;
  result = (_QWORD *)(v8 + 8 * v10);
  v12 = *result;
  if (*a3 != *result)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v19 = 0;
      else
        v19 = v12 == -8192;
      if (v19)
        v13 = result;
      v20 = v10 + v14++;
      v10 = v20 & v9;
      result = (_QWORD *)(v8 + 8 * v10);
      v12 = *result;
      if (*a3 == *result)
        goto LABEL_22;
    }
    if (v13)
      v15 = v13;
    else
      v15 = result;
    goto LABEL_9;
  }
LABEL_22:
  if ((*(_DWORD *)a2 & 1) != 0)
  {
    v21 = 4;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    v21 = *(unsigned int *)(a2 + 16);
  }
  v18 = 0;
  v17 = v6 + 8 * v21;
LABEL_12:
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v17;
  *(_BYTE *)(a1 + 16) = v18;
  return result;
}

uint64_t sub_1C56844F8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  _BOOL4 v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if ((*(_BYTE *)(a2 + 32) & 1) == 0)
    return 1;
  if (!**(_BYTE **)a1
    || (a3 & 1) != 0
    || (v3 = *(_QWORD *)(a2 + 16)) != 0 && *(unsigned __int8 *)(v3 + 16) - 11 <= 1)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v5 = v4 && *(_BYTE *)(v4 + 16) == 60;
    v6 = v5;
    if (!**(_BYTE **)a1 || v6)
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(unsigned int *)(v8 + 8);
      if (v9 >= *(_DWORD *)(v8 + 12))
      {
        v11 = *(_QWORD *)(a2 + 8);
        v12 = *(_QWORD *)(a1 + 8);
        llvm::SmallVectorBase<unsigned int>::grow_pod(v8, v8 + 16, v9 + 1, 8);
        v4 = v11;
        v8 = v12;
        LODWORD(v9) = *(_DWORD *)(v12 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v4;
      ++*(_DWORD *)(v8 + 8);
      return 1;
    }
  }
  return 0;
}

void *sub_1C56845B8(uint64_t a1, uint64_t a2)
{
  void *result;
  uint64_t v5;
  void *v6;

  result = (void *)MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
  v5 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v5;
  if ((_DWORD)v5)
  {
    v6 = operator new(24 * v5, (std::align_val_t)8uLL);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    return memcpy(v6, *(const void **)a2, 24 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

uint64_t sub_1C568462C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 < v4)
    {
      if (*(_DWORD *)(a1 + 12) >= v4)
      {
        if ((_DWORD)v5)
        {
          v6 = *(_QWORD **)a2;
          v7 = *(_QWORD **)a1;
          v8 = 32 * v5;
          do
          {
            v9 = sub_1C6225AA8(v7, v6);
            v6 += 4;
            v7 = v9 + 4;
            v8 -= 32;
          }
          while (v8);
LABEL_31:
          v23 = *(unsigned int *)(a2 + 8);
          if (v5 != v23)
          {
            v24 = *(_QWORD **)a2;
            v25 = *(_QWORD *)a1 + 32 * v5;
            v26 = &v24[4 * v5];
            v27 = 32 * v23 - 32 * v5;
            do
            {
              v28 = (_QWORD *)v26[3];
              if (v28)
              {
                if (v26 == v28)
                {
                  *(_QWORD *)(v25 + 24) = v25;
                  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v26[3] + 24))(v26[3], v25);
                }
                else
                {
                  *(_QWORD *)(v25 + 24) = (*(uint64_t (**)(_QWORD *))(*v28 + 16))(v28);
                }
              }
              else
              {
                *(_QWORD *)(v25 + 24) = 0;
              }
              v26 += 4;
              v25 += 32;
              v27 -= 32;
            }
            while (v27);
          }
          goto LABEL_39;
        }
LABEL_30:
        v5 = 0;
        goto LABEL_31;
      }
      if (!(_DWORD)v5)
      {
LABEL_29:
        *(_DWORD *)(a1 + 8) = 0;
        sub_1C613A8F8(a1, v4);
        goto LABEL_30;
      }
      v19 = *(_QWORD **)a1;
      v20 = 4 * v5;
      while (1)
      {
        v21 = (_QWORD *)v19[v20 - 1];
        if (&v19[v20 - 4] == v21)
          break;
        if (v21)
        {
          v22 = 5;
LABEL_27:
          (*(void (**)(void))(*v21 + 8 * v22))();
        }
        v20 -= 4;
        if (!(v20 * 8))
          goto LABEL_29;
      }
      v21 = &v19[v20 - 4];
      v22 = 4;
      goto LABEL_27;
    }
    if ((_DWORD)v4)
    {
      v10 = 0;
      v11 = *(_QWORD **)a2;
      v12 = *(_QWORD **)a1;
      do
      {
        sub_1C6225AA8(&v12[v10], &v11[v10]);
        v10 += 4;
      }
      while (4 * v4 != v10);
      v5 = *(unsigned int *)(a1 + 8);
      v13 = *(_QWORD **)a1;
      v14 = &v12[v10];
    }
    else
    {
      v13 = *(_QWORD **)a1;
      v14 = *(_QWORD **)a1;
    }
    v15 = &v13[4 * v5];
    if (v15 == v14)
    {
LABEL_39:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    while (1)
    {
      v16 = v15 - 4;
      v17 = (_QWORD *)*(v15 - 1);
      if (v15 - 4 == v17)
        break;
      if (v17)
      {
        v18 = 5;
LABEL_18:
        (*(void (**)(void))(*v17 + 8 * v18))();
      }
      v15 = v16;
      if (v16 == v14)
        goto LABEL_39;
    }
    v17 = v15 - 4;
    v18 = 4;
    goto LABEL_18;
  }
  return a1;
}

uint64_t sub_1C5684818(uint64_t a1, __int128 *a2, uint64_t a3, int a4, char a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  __int128 v15;
  uint64_t *v16;

  v9 = *a2;
  v14 = &llvm::AAValueSimplify::ID;
  v15 = v9;
  v16 = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0)
    return 0;
  v10 = v16[3];
  if (v10)
  {
    if (a3
      && a4 != 2
      && (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v16[3]),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11)))
    {
      llvm::Attributor::recordDependence(a1, v10, a3, a4);
      if ((a5 & 1) != 0)
        return v10;
    }
    else if ((a5 & 1) != 0)
    {
      return v10;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
      return 0;
  }
  return v10;
}

llvm::AbstractAttribute *sub_1C5684904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v12;
  llvm::AbstractAttribute *v13;
  llvm::Attributor *v14;
  llvm::AbstractAttribute *v15;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  _BOOL4 v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void **v30;
  void **v31;
  uint64_t *v32;
  void **v33;
  size_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  void *v40[2];
  char v41;
  void *__p[2];
  char v43;
  __int128 v44;

  if (byte_1ED831CE0)
    v12 = a3;
  else
    v12 = 0;
  *(_QWORD *)&v44 = a2;
  *((_QWORD *)&v44 + 1) = v12;
  v13 = (llvm::AbstractAttribute *)sub_1C5684CF0(a1, &v44, a4, a5, 1);
  v15 = v13;
  if (v13 && a6)
  {
    if (*(_DWORD *)(a1 + 4368) == 1)
      llvm::Attributor::updateAA((llvm::Attributor *)a1, v13);
    return v15;
  }
  if (v13)
    return v15;
  v15 = (llvm::AbstractAttribute *)llvm::AAReturnedValues::createForPosition((llvm::AAReturnedValues *)&v44, (const llvm::IRPosition *)a1, v14);
  sub_1C628868C(a1, (uint64_t)v15);
  v17 = *(uint64_t **)(a1 + 5480);
  if (v17)
  {
    __p[0] = &llvm::AAReturnedValues::ID;
    v40[0] = 0;
    v18 = sub_1C614F7B0(v17, __p, v40) ^ 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = v44 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v44 & 3) == 0)
    v19 = *(_QWORD *)(v19 + 24);
  v20 = *(unsigned __int8 *)(v19 + 16);
  if (!*(_BYTE *)(v19 + 16))
    goto LABEL_20;
  if (v20 == 21)
  {
    v21 = (uint64_t *)(v19 + 24);
  }
  else
  {
    if (v20 < 0x1C)
    {
      v19 = 0;
      goto LABEL_27;
    }
    v21 = (uint64_t *)(*(_QWORD *)(v19 + 40) + 56);
  }
  v19 = *v21;
  if (!*v21)
  {
LABEL_27:
    v24 = 1;
    goto LABEL_32;
  }
LABEL_20:
  v22 = *(_QWORD *)(v19 + 112);
  if (v22 && ((*(_BYTE *)(v22 + 14) & 2) != 0 || (*(_BYTE *)(v22 + 17) & 8) != 0))
  {
    v23 = 1;
  }
  else if (*(_BYTE *)(a1 + 5464))
  {
    v23 = 0;
  }
  else
  {
    v25 = *(_QWORD **)(a1 + 88);
    v26 = sub_1C477672C((uint64_t)v25, v19);
    v27 = v25[1];
    v28 = 16;
    if (v27 == *v25)
      v28 = 20;
    v23 = v26 == (_QWORD *)(v27 + 8 * *(unsigned int *)((char *)v25 + v28));
  }
  v24 = 0;
  LOBYTE(v18) = (v23 | v18) != 0;
LABEL_32:
  if ((v18 & 1) != 0 || *(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
    goto LABEL_59;
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v15 + 72))(v40, v15);
  if (v41 >= 0)
    v29 = v41 & 0x7F;
  else
    v29 = (size_t)v40[1];
  v30 = __p;
  sub_1C484371C((uint64_t)__p, v29 + 12);
  if (v43 < 0)
    v30 = (void **)__p[0];
  if (v29)
  {
    if (v41 >= 0)
      v31 = v40;
    else
      v31 = (void **)v40[0];
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, "::initialize");
  v32 = (uint64_t *)off_1EF8EEB50();
  if (*v32)
  {
    if (v43 >= 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if (v43 >= 0)
      v34 = v43 & 0x7F;
    else
      v34 = (size_t)__p[1];
    llvm::timeTraceProfilerBegin(v33, v34, (uint64_t)&unk_1C872ACEA, 0);
  }
  if (v43 < 0)
    operator delete(__p[0]);
  if (v41 < 0)
    operator delete(v40[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v15 + 24))(v15, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v32)
  {
    sub_1C6392DC0(*v32);
    if ((v24 & 1) != 0)
      goto LABEL_58;
  }
  else if ((v24 & 1) != 0)
  {
    goto LABEL_58;
  }
  v38 = *(uint64_t **)(a1 + 80);
  __p[0] = (void *)v19;
  v40[0] = 0;
  if ((sub_1C614F7B0(v38, __p, v40) & 1) == 0)
  {
    v39 = *(uint64_t **)(a1 + 80);
    __p[0] = (void *)sub_1C5676C10((llvm::IRPosition *)&v44);
    v40[0] = 0;
    if ((sub_1C614F7B0(v39, __p, v40) & 1) == 0)
      goto LABEL_59;
  }
LABEL_58:
  v35 = *(_DWORD *)(a1 + 4368);
  if (v35 == 2)
  {
LABEL_59:
    v36 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    return v15;
  }
  if (a7)
  {
    *(_DWORD *)(a1 + 4368) = 1;
    llvm::Attributor::updateAA((llvm::Attributor *)a1, v15);
    *(_DWORD *)(a1 + 4368) = v35;
  }
  if (a4)
  {
    v37 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37))
      llvm::Attributor::recordDependence(a1, (uint64_t)v15, a4, a5);
  }
  return v15;
}

uint64_t sub_1C5684CF0(uint64_t a1, __int128 *a2, uint64_t a3, int a4, char a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  __int128 v15;
  uint64_t *v16;

  v9 = *a2;
  v14 = &llvm::AAReturnedValues::ID;
  v15 = v9;
  v16 = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0)
    return 0;
  v10 = v16[3];
  if (v10)
  {
    if (a3
      && a4 != 2
      && (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v16[3]),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11)))
    {
      llvm::Attributor::recordDependence(a1, v10, a3, a4);
      if ((a5 & 1) != 0)
        return v10;
    }
    else if ((a5 & 1) != 0)
    {
      return v10;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
      return 0;
  }
  return v10;
}

uint64_t sub_1C5684DDC(uint64_t a1)
{
  return (**(uint64_t (***)(_QWORD))a1)(*(_QWORD *)(*(_QWORD *)a1 + 8));
}

uint64_t sub_1C5684DE8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_15:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_15;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

BOOL sub_1C5684E90(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15[2];
  uint64_t v16;
  uint64_t v17;

  v3 = *a2;
  v14 = *a2;
  v15[0] = &v16;
  v15[1] = 0;
  if (*((_DWORD *)a2 + 4))
  {
    sub_1C614C900((uint64_t)v15, (uint64_t)(a2 + 1));
    v3 = v14;
  }
  v4 = *a1;
  v5 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 56);
  v6 = *a1 + 4472;
  v16 = 0;
  v17 = v5;
  if ((sub_1C5684DE8(v6, &v17, &v16) & 1) != 0)
  {
    v7 = 1;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 80);
    v16 = 0;
    v17 = v5;
    if (sub_1C614F7B0(v9, &v17, &v16) && (*(_DWORD *)(v5 + 32) & 0xFu) - 7 <= 1)
    {
      v10 = (_QWORD *)a1[1];
      v11 = sub_1C477672C((uint64_t)v10, v5);
      v12 = v10[1];
      v13 = 16;
      if (v12 == *v10)
        v13 = 20;
      v7 = v11 == (_QWORD *)(v12 + 8 * *(unsigned int *)((char *)v10 + v13));
    }
    else
    {
      v7 = 0;
    }
  }
  if (v15[0] != &v16)
    free(v15[0]);
  return v7;
}

BOOL sub_1C5684F98(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(unsigned __int8 *)(v2 + 16);
  if (v3 < 0x1C)
    return 0;
  v4 = v3 - 33;
  v5 = v4 > 0x33;
  v6 = (1 << v4) & 0x8000000000041;
  if (v5 || v6 == 0)
    return 0;
  v9 = *a1;
  v10 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 56);
  v12 = 0;
  return !sub_1C6144BDC(*(_QWORD *)v9, *(_DWORD *)(v9 + 16), v10, &v12) || *(_QWORD *)(v12 + 8) == 0;
}

BOOL sub_1C5685028(_QWORD **a1, uint64_t a2)
{
  _BOOL8 v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  llvm::CallBase *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v9 = *(llvm::CallBase **)a2;
  v10 = &v12;
  v11 = 0;
  if (*(_DWORD *)(a2 + 16))
    sub_1C614C900((uint64_t)&v10, a2 + 8);
  if (sub_1C6185E84(&v9) && (v5 = *(_QWORD *)v9, v5 == **(_QWORD **)(*((_QWORD *)sub_1C6185E84(&v9) + 3) + 16)))
  {
    if ((_DWORD)v11
      || ((v6 = *((_QWORD *)v9 - 4), v7 = *(unsigned __int8 *)(v6 + 16), v7 >= 0x15) ? (v8 = v7 == 24) : (v8 = 1), !v8))
    {
      v6 = *((_QWORD *)v9 + 4 * *(unsigned int *)v10 + -4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF));
    }
    v3 = 0;
    if (!(_DWORD)v11 && *(_QWORD *)v6 == **a1)
      v3 = *((_BYTE *)v9 + 16) != 84 || (*((_WORD *)v9 + 9) & 3) != 2;
  }
  else
  {
    v3 = 0;
  }
  if (v10 != &v12)
    free(v10);
  return v3;
}

BOOL sub_1C5685144(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 16) != 84 || (*(_WORD *)(a2 + 18) & 3) != 2;
}

_QWORD *sub_1C5685160(uint64_t a1, int a2)
{
  int v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(88 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6288B18((char **)a1, (uint64_t)v4, (uint64_t)&v4[88 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = 88 * v10;
    do
    {
      *result = -4096;
      result += 11;
      v11 -= 88;
    }
    while (v11);
  }
  return result;
}

char **sub_1C5685224(char **a1, uint64_t a2)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != (char **)a2)
  {
    v5 = *(char **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      sub_1C6288C04(a1, (char **)a2);
      return a1;
    }
    v6 = *(unsigned int *)(a2 + 8);
    v7 = *((unsigned int *)a1 + 2);
    if (v7 >= v6)
    {
      v8 = *a1;
      if ((_DWORD)v6)
      {
        v9 = (char *)sub_1C568536C(v5, &v5[8 * v6], (_QWORD **)v8);
        v8 = *a1;
        v7 = *((unsigned int *)a1 + 2);
      }
      else
      {
        v9 = *a1;
      }
      v10 = &v8[8 * v7];
      while (v10 != v9)
      {
        v12 = (_QWORD *)*((_QWORD *)v10 - 1);
        v10 -= 8;
        v11 = v12;
        *(_QWORD *)v10 = 0;
        if (v12)
        {
          v13 = sub_1C6288F00(v11);
          MEMORY[0x1CAA32FC0](v13, 0x10E0C40D6C35413);
        }
      }
      goto LABEL_21;
    }
    if (*((_DWORD *)a1 + 3) >= v6)
    {
      if ((_DWORD)v7)
      {
        sub_1C568536C(v5, &v5[8 * v7], (_QWORD **)*a1);
LABEL_18:
        v14 = *(unsigned int *)(a2 + 8);
        if (v7 != v14)
        {
          v15 = &(*a1)[8 * v7];
          v16 = (uint64_t *)(*(_QWORD *)a2 + 8 * v7);
          v17 = 8 * v14 - 8 * v7;
          do
          {
            v18 = *v16;
            *v16++ = 0;
            *(_QWORD *)v15 = v18;
            v15 += 8;
            v17 -= 8;
          }
          while (v17);
        }
LABEL_21:
        *((_DWORD *)a1 + 2) = v6;
        sub_1C6288CA0(a2);
        return a1;
      }
    }
    else
    {
      sub_1C6288CA0((uint64_t)a1);
      sub_1C6288D10((uint64_t)a1, v6);
    }
    v7 = 0;
    goto LABEL_18;
  }
  return a1;
}

_QWORD **sub_1C568536C(_QWORD *a1, _QWORD *a2, _QWORD **a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = (_QWORD *)*v5;
      *v5 = 0;
      v7 = *a3;
      *a3 = v6;
      if (v7)
      {
        v8 = sub_1C6288F00(v7);
        MEMORY[0x1CAA32FC0](v8, 0x10E0C40D6C35413);
      }
      ++v5;
      ++a3;
    }
    while (v5 != a2);
  }
  return a3;
}

_QWORD *sub_1C56853E8(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6289164(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C56854A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  char *v31;
  uint64_t v32;
  char **v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t **v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  void *v49;
  uint64_t v51;
  uint64_t v52;
  llvm::ValueSymbolTable *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78[2];
  _BYTE v79[7];
  char v80;
  _QWORD v81[4];
  __int16 v82;
  void *v83;
  uint64_t v84;
  _BYTE v85[192];
  void *__src;
  size_t __n;
  _BYTE v88[128];
  uint64_t *v89;
  uint64_t v90;
  _QWORD v91[18];

  v91[16] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)a2;
  v74 = *(_QWORD *)a2;
  v75 = &v77;
  v76 = 0;
  if (*(_DWORD *)(a2 + 16))
  {
    sub_1C614C900((uint64_t)&v75, a2 + 8);
    v3 = v74;
  }
  v4 = *(_QWORD *)(v3 + 64);
  v89 = v91;
  v90 = 0x1000000000;
  __src = v88;
  __n = 0x1000000000;
  v5 = *(uint64_t **)a1;
  v73 = v4;
  if (*(_DWORD *)(*(_QWORD *)a1 + 8))
  {
    v6 = 0;
    v7 = v4 + 40;
    do
    {
      v8 = *v5;
      v9 = *(_QWORD *)(*v5 + 8 * v6);
      if (v9)
      {
        v12 = *(_QWORD *)(v9 + 160);
        if (v12)
        {
          v77 = v74;
          v78[0] = v79;
          v78[1] = 0;
          if ((_DWORD)v76)
          {
            sub_1C614CA14((uint64_t)v78, (uint64_t)&v75);
            v12 = *(_QWORD *)(v9 + 160);
            if (!v12)
              sub_1C485C2F0();
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v12 + 48))(v12, v9, &v77, &v89);
          if (v78[0] != v79)
            free(v78[0]);
        }
        sub_1C510F7B8((unsigned int *)&__src, *(unsigned int *)(*(_QWORD *)(v8 + 8 * v6) + 32), 0);
      }
      else
      {
        v10 = sub_1C6284A2C(&v74, v6);
        v11 = v90;
        if (v90 >= (unint64_t)HIDWORD(v90))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v89, (uint64_t)v91, v90 + 1, 8);
          v11 = v90;
        }
        v89[v11] = v10;
        LODWORD(v90) = v90 + 1;
        if (v4)
        {
          if ((v6 + 2) < *(_DWORD *)(v4 + 8))
            v4 = *(_QWORD *)(v7 + 8 * (v6 + 2));
          else
            v4 = 0;
        }
        v13 = __n;
        if (__n >= (unint64_t)HIDWORD(__n))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v88, __n + 1, 8);
          v13 = __n;
        }
        *((_QWORD *)__src + v13) = v4;
        LODWORD(__n) = __n + 1;
        v4 = v73;
      }
      ++v6;
      v5 = *(uint64_t **)a1;
    }
    while (v6 < *(unsigned int *)(*(_QWORD *)a1 + 8));
  }
  v83 = v85;
  v84 = 0x400000000;
  v14 = *(_DWORD *)(v3 + 20);
  if (v14 < 0)
  {
    v56 = *(_QWORD *)(v3 - 32 * (v14 & 0x7FFFFFF) - 8);
    if ((v56 & 0xFFFFFFFF0) != 0)
    {
      v57 = (v56 >> 4);
      v58 = v3;
      do
      {
        v59 = *(_DWORD *)(v3 + 20) & 0x7FFFFFF;
        v60 = v3 - 32 * v59;
        v61 = (unsigned int *)(v58 - (*(_QWORD *)(v60 - 8) + 32 * v59));
        v62 = *v61;
        v63 = v61[1];
        v64 = *((_QWORD *)v61 - 1);
        v81[0] = v60 + 32 * v62;
        v81[1] = v63 - v62;
        v81[2] = v64;
        sub_1C623D924((uint64_t)&v83, (uint64_t)v81);
        v58 += 16;
        --v57;
      }
      while (v57);
    }
  }
  v15 = **(_QWORD **)(a1 + 8);
  if (*(_BYTE *)(v3 + 16) == 33)
  {
    if (v15)
      v51 = *(_QWORD *)(v15 + 24);
    else
      v51 = 0;
    v36 = v73;
    v54 = *(_QWORD *)(v3 - 96);
    v55 = *(_QWORD *)(v3 - 64);
    v82 = 257;
    v27 = sub_1C61CC1B8(v51, v15, v54, v55, v89, v90, (uint64_t)v83, v84, (uint64_t)v81, (llvm::Instruction *)v3);
  }
  else
  {
    if (v15)
      v16 = *(_QWORD *)(v15 + 24);
    else
      v16 = 0;
    v72 = v16;
    v70 = v89;
    v17 = v84;
    v82 = 257;
    if ((_DWORD)v84)
    {
      v19 = a1;
      v20 = 0;
      v65 = 48 * v84;
      v18 = (char *)v83;
      v66 = (char *)v83 + 32;
      do
      {
        v20 += (*v66 - *(v66 - 1)) >> 3;
        v66 += 6;
        v65 -= 48;
      }
      while (v65);
    }
    else
    {
      v18 = (char *)v83;
      v19 = a1;
      v20 = 0;
    }
    v71 = v90;
    v21 = v90 + 1;
    v22 = (v20 + v90 + 1);
    v23 = (16 * v84);
    if ((_DWORD)v23)
      v24 = (16 * (_DWORD)v84) | 8u;
    else
      v24 = 0;
    v25 = (char *)operator new(v24 + 32 * v22 + 80);
    v26 = &v25[v24];
    v27 = &v25[32 * v22 + v24];
    *((_DWORD *)v27 + 5) = v22 & 0x7FFFFFF | (((_DWORD)v23 != 0) << 31) | *((_DWORD *)v27 + 5) & 0x38000000;
    if ((_DWORD)v22)
    {
      do
      {
        *(_QWORD *)v26 = 0;
        *((_QWORD *)v26 + 1) = 0;
        *((_QWORD *)v26 + 2) = 0;
        *((_QWORD *)v26 + 3) = v27;
        v26 += 32;
      }
      while (v26 != v27);
    }
    v28 = v72;
    if ((_DWORD)v23)
      *(_QWORD *)&v25[v23] = v23;
    a1 = v19;
    v29 = 0;
    if ((_DWORD)v17)
    {
      v67 = 48 * v17;
      v68 = v18 + 32;
      do
      {
        v29 += (*v68 - *(v68 - 1)) >> 3;
        v68 += 6;
        v67 -= 48;
      }
      while (v67);
    }
    *(_QWORD *)v27 = **(_QWORD **)(v72 + 16);
    *((_QWORD *)v27 + 1) = 0;
    v30 = *((_DWORD *)v27 + 5) & 0xC0000000 | (v29 + v21) & 0x7FFFFFF;
    *((_DWORD *)v27 + 4) = 84;
    *((_DWORD *)v27 + 5) = v30;
    *(_OWORD *)(v27 + 24) = 0u;
    v31 = v27 + 24;
    *(_OWORD *)(v27 + 40) = 0u;
    *((_DWORD *)v27 + 14) = 0;
    v32 = *(_QWORD *)(v3 + 40);
    v33 = (char **)(v3 + 24);
    *((_QWORD *)v27 + 5) = v32;
    *(_WORD *)(v32 + 18) &= ~0x8000u;
    if ((v27[23] & 0x10) != 0)
    {
      v52 = *(_QWORD *)(v32 + 56);
      if (v52)
      {
        v53 = *(llvm::ValueSymbolTable **)(v52 + 104);
        if (v53)
        {
          llvm::ValueSymbolTable::reinsertValue(v53, (llvm::Value *)v27);
          v28 = v72;
        }
      }
    }
    v34 = *v33;
    *((_QWORD *)v27 + 3) = *v33;
    *((_QWORD *)v27 + 4) = v33;
    *((_QWORD *)v34 + 1) = v31;
    *v33 = v31;
    *((_QWORD *)v27 + 8) = 0;
    *((_QWORD *)v27 + 9) = v28;
    sub_1C5382FD4((uint64_t)&v80, v70, &v70[v71], (uint64_t)&v27[-32 * (*((_DWORD *)v27 + 5) & 0x7FFFFFF)]);
    v35 = (uint64_t *)(v27 - 32);
    if (*((_QWORD *)v27 - 4))
    {
      **((_QWORD **)v27 - 2) = *((_QWORD *)v27 - 3);
      v69 = *((_QWORD *)v27 - 3);
      if (v69)
        *(_QWORD *)(v69 + 16) = *((_QWORD *)v27 - 2);
    }
    *v35 = v15;
    v36 = v73;
    if (v15)
    {
      v39 = *(_QWORD *)(v15 + 8);
      v38 = (uint64_t **)(v15 + 8);
      v37 = v39;
      *((_QWORD *)v27 - 3) = v39;
      if (v39)
        *(_QWORD *)(v37 + 16) = v27 - 24;
      *((_QWORD *)v27 - 2) = v38;
      *v38 = v35;
    }
    llvm::CallBase::populateBundleOperandInfos((uint64_t)v27, (uint64_t)v18, v17, v71);
    llvm::Value::setName((uint64_t ***)v27, (uint64_t)v81);
    *((_WORD *)v27 + 9) = *((_WORD *)v27 + 9) & 0xFFFC | *(_WORD *)(v3 + 18) & 3;
  }
  v81[0] = 2;
  llvm::Instruction::copyMetadata((uint64_t)v27, v3, (int *)v81, 2);
  *((_WORD *)v27 + 9) = *((_WORD *)v27 + 9) & 0xF003 | *(_WORD *)(v3 + 18) & 0xFFC;
  llvm::Value::takeName((llvm::Value *)v27, (llvm::Value *)v3);
  if (v36 && (v40 = *(_DWORD *)(v36 + 8)) != 0)
  {
    v41 = *(_QWORD *)(v36 + 40);
    if (v40 != 1)
    {
      v42 = *(_QWORD *)(v36 + 48);
      goto LABEL_50;
    }
  }
  else
  {
    v41 = 0;
  }
  v42 = 0;
LABEL_50:
  *((_QWORD *)v27 + 8) = llvm::AttributeList::get(*(uint64_t **)(a1 + 16), v41, v42, __src, __n);
  v43 = *(_QWORD *)(a1 + 24);
  v44 = *(unsigned int *)(v43 + 8);
  if (v44 >= *(_DWORD *)(v43 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v43, v43 + 16, v44 + 1, 16);
    LODWORD(v44) = *(_DWORD *)(v43 + 8);
  }
  v45 = (uint64_t *)(*(_QWORD *)v43 + 16 * v44);
  *v45 = v3;
  v45[1] = (uint64_t)v27;
  ++*(_DWORD *)(v43 + 8);
  v46 = (char *)v83;
  if ((_DWORD)v84)
  {
    v47 = 48 * v84;
    do
    {
      v48 = &v46[v47];
      v49 = *(void **)&v46[v47 - 24];
      if (v49)
      {
        *((_QWORD *)v48 - 2) = v49;
        operator delete(v49);
      }
      if (*(v48 - 25) < 0)
        operator delete(*((void **)v48 - 6));
      v47 -= 48;
    }
    while (v47);
    v46 = (char *)v83;
  }
  if (v46 != v85)
    free(v46);
  if (__src != v88)
    free(__src);
  if (v89 != v91)
    free(v89);
  if (v75 != &v77)
    free(v75);
  return 1;
}

uint64_t sub_1C5685B8C(_DWORD *a1, _QWORD *a2)
{
  uint64_t result;
  int v4;
  _QWORD *v5;

  v5 = 0;
  result = sub_1C5682FF4((uint64_t)a1, a2, &v5);
  if ((_DWORD)result)
  {
    *v5 = -8192;
    v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

llvm::AbstractAttribute *sub_1C5685BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v12;
  llvm::AbstractAttribute *v13;
  llvm::Attributor *v14;
  llvm::AbstractAttribute *v15;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  _BOOL4 v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void **v30;
  void **v31;
  uint64_t *v32;
  void **v33;
  size_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  void *v40[2];
  char v41;
  void *__p[2];
  char v43;
  __int128 v44;

  if (byte_1ED831CE0)
    v12 = a3;
  else
    v12 = 0;
  *(_QWORD *)&v44 = a2;
  *((_QWORD *)&v44 + 1) = v12;
  v13 = (llvm::AbstractAttribute *)sub_1C5685FC8(a1, &v44, a4, a5, 1);
  v15 = v13;
  if (v13 && a6)
  {
    if (*(_DWORD *)(a1 + 4368) == 1)
      llvm::Attributor::updateAA((llvm::Attributor *)a1, v13);
    return v15;
  }
  if (v13)
    return v15;
  v15 = (llvm::AbstractAttribute *)llvm::AAWillReturn::createForPosition((llvm::AAWillReturn *)&v44, (const llvm::IRPosition *)a1, v14);
  sub_1C6289294(a1, (uint64_t)v15);
  v17 = *(uint64_t **)(a1 + 5480);
  if (v17)
  {
    __p[0] = &llvm::AAWillReturn::ID;
    v40[0] = 0;
    v18 = sub_1C614F7B0(v17, __p, v40) ^ 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = v44 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v44 & 3) == 0)
    v19 = *(_QWORD *)(v19 + 24);
  v20 = *(unsigned __int8 *)(v19 + 16);
  if (!*(_BYTE *)(v19 + 16))
    goto LABEL_20;
  if (v20 == 21)
  {
    v21 = (uint64_t *)(v19 + 24);
  }
  else
  {
    if (v20 < 0x1C)
    {
      v19 = 0;
      goto LABEL_27;
    }
    v21 = (uint64_t *)(*(_QWORD *)(v19 + 40) + 56);
  }
  v19 = *v21;
  if (!*v21)
  {
LABEL_27:
    v24 = 1;
    goto LABEL_32;
  }
LABEL_20:
  v22 = *(_QWORD *)(v19 + 112);
  if (v22 && ((*(_BYTE *)(v22 + 14) & 2) != 0 || (*(_BYTE *)(v22 + 17) & 8) != 0))
  {
    v23 = 1;
  }
  else if (*(_BYTE *)(a1 + 5464))
  {
    v23 = 0;
  }
  else
  {
    v25 = *(_QWORD **)(a1 + 88);
    v26 = sub_1C477672C((uint64_t)v25, v19);
    v27 = v25[1];
    v28 = 16;
    if (v27 == *v25)
      v28 = 20;
    v23 = v26 == (_QWORD *)(v27 + 8 * *(unsigned int *)((char *)v25 + v28));
  }
  v24 = 0;
  LOBYTE(v18) = (v23 | v18) != 0;
LABEL_32:
  if ((v18 & 1) != 0 || *(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
    goto LABEL_59;
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v15 + 72))(v40, v15);
  if (v41 >= 0)
    v29 = v41 & 0x7F;
  else
    v29 = (size_t)v40[1];
  v30 = __p;
  sub_1C484371C((uint64_t)__p, v29 + 12);
  if (v43 < 0)
    v30 = (void **)__p[0];
  if (v29)
  {
    if (v41 >= 0)
      v31 = v40;
    else
      v31 = (void **)v40[0];
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, "::initialize");
  v32 = (uint64_t *)off_1EF8EEB50();
  if (*v32)
  {
    if (v43 >= 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if (v43 >= 0)
      v34 = v43 & 0x7F;
    else
      v34 = (size_t)__p[1];
    llvm::timeTraceProfilerBegin(v33, v34, (uint64_t)&unk_1C872ACEA, 0);
  }
  if (v43 < 0)
    operator delete(__p[0]);
  if (v41 < 0)
    operator delete(v40[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v15 + 24))(v15, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v32)
  {
    sub_1C6392DC0(*v32);
    if ((v24 & 1) != 0)
      goto LABEL_58;
  }
  else if ((v24 & 1) != 0)
  {
    goto LABEL_58;
  }
  v38 = *(uint64_t **)(a1 + 80);
  __p[0] = (void *)v19;
  v40[0] = 0;
  if ((sub_1C614F7B0(v38, __p, v40) & 1) == 0)
  {
    v39 = *(uint64_t **)(a1 + 80);
    __p[0] = (void *)sub_1C5676C10((llvm::IRPosition *)&v44);
    v40[0] = 0;
    if ((sub_1C614F7B0(v39, __p, v40) & 1) == 0)
      goto LABEL_59;
  }
LABEL_58:
  v35 = *(_DWORD *)(a1 + 4368);
  if (v35 == 2)
  {
LABEL_59:
    v36 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    return v15;
  }
  if (a7)
  {
    *(_DWORD *)(a1 + 4368) = 1;
    llvm::Attributor::updateAA((llvm::Attributor *)a1, v15);
    *(_DWORD *)(a1 + 4368) = v35;
  }
  if (a4)
  {
    v37 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37))
      llvm::Attributor::recordDependence(a1, (uint64_t)v15, a4, a5);
  }
  return v15;
}

uint64_t sub_1C5685FC8(uint64_t a1, __int128 *a2, uint64_t a3, int a4, char a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  __int128 v15;
  uint64_t *v16;

  v9 = *a2;
  v14 = &llvm::AAWillReturn::ID;
  v15 = v9;
  v16 = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0)
    return 0;
  v10 = v16[3];
  if (v10)
  {
    if (a3
      && a4 != 2
      && (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v16[3]),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11)))
    {
      llvm::Attributor::recordDependence(a1, v10, a3, a4);
      if ((a5 & 1) != 0)
        return v10;
    }
    else if ((a5 & 1) != 0)
    {
      return v10;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
      return 0;
  }
  return v10;
}

llvm::AbstractAttribute *sub_1C56860B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v12;
  llvm::AbstractAttribute *v13;
  llvm::Attributor *v14;
  llvm::AbstractAttribute *v15;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  _BOOL4 v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void **v30;
  void **v31;
  uint64_t *v32;
  void **v33;
  size_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  void *v40[2];
  char v41;
  void *__p[2];
  char v43;
  __int128 v44;

  if (byte_1ED831CE0)
    v12 = a3;
  else
    v12 = 0;
  *(_QWORD *)&v44 = a2;
  *((_QWORD *)&v44 + 1) = v12;
  v13 = (llvm::AbstractAttribute *)sub_1C56864A0(a1, &v44, a4, a5, 1);
  v15 = v13;
  if (v13 && a6)
  {
    if (*(_DWORD *)(a1 + 4368) == 1)
      llvm::Attributor::updateAA((llvm::Attributor *)a1, v13);
    return v15;
  }
  if (v13)
    return v15;
  v15 = (llvm::AbstractAttribute *)llvm::AANoUnwind::createForPosition((llvm::AANoUnwind *)&v44, (const llvm::IRPosition *)a1, v14);
  sub_1C628936C(a1, (uint64_t)v15);
  v17 = *(uint64_t **)(a1 + 5480);
  if (v17)
  {
    __p[0] = &llvm::AANoUnwind::ID;
    v40[0] = 0;
    v18 = sub_1C614F7B0(v17, __p, v40) ^ 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = v44 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v44 & 3) == 0)
    v19 = *(_QWORD *)(v19 + 24);
  v20 = *(unsigned __int8 *)(v19 + 16);
  if (!*(_BYTE *)(v19 + 16))
    goto LABEL_20;
  if (v20 == 21)
  {
    v21 = (uint64_t *)(v19 + 24);
  }
  else
  {
    if (v20 < 0x1C)
    {
      v19 = 0;
      goto LABEL_27;
    }
    v21 = (uint64_t *)(*(_QWORD *)(v19 + 40) + 56);
  }
  v19 = *v21;
  if (!*v21)
  {
LABEL_27:
    v24 = 1;
    goto LABEL_32;
  }
LABEL_20:
  v22 = *(_QWORD *)(v19 + 112);
  if (v22 && ((*(_BYTE *)(v22 + 14) & 2) != 0 || (*(_BYTE *)(v22 + 17) & 8) != 0))
  {
    v23 = 1;
  }
  else if (*(_BYTE *)(a1 + 5464))
  {
    v23 = 0;
  }
  else
  {
    v25 = *(_QWORD **)(a1 + 88);
    v26 = sub_1C477672C((uint64_t)v25, v19);
    v27 = v25[1];
    v28 = 16;
    if (v27 == *v25)
      v28 = 20;
    v23 = v26 == (_QWORD *)(v27 + 8 * *(unsigned int *)((char *)v25 + v28));
  }
  v24 = 0;
  LOBYTE(v18) = (v23 | v18) != 0;
LABEL_32:
  if ((v18 & 1) != 0 || *(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
    goto LABEL_59;
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v15 + 72))(v40, v15);
  if (v41 >= 0)
    v29 = v41 & 0x7F;
  else
    v29 = (size_t)v40[1];
  v30 = __p;
  sub_1C484371C((uint64_t)__p, v29 + 12);
  if (v43 < 0)
    v30 = (void **)__p[0];
  if (v29)
  {
    if (v41 >= 0)
      v31 = v40;
    else
      v31 = (void **)v40[0];
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, "::initialize");
  v32 = (uint64_t *)off_1EF8EEB50();
  if (*v32)
  {
    if (v43 >= 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if (v43 >= 0)
      v34 = v43 & 0x7F;
    else
      v34 = (size_t)__p[1];
    llvm::timeTraceProfilerBegin(v33, v34, (uint64_t)&unk_1C872ACEA, 0);
  }
  if (v43 < 0)
    operator delete(__p[0]);
  if (v41 < 0)
    operator delete(v40[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v15 + 24))(v15, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v32)
  {
    sub_1C6392DC0(*v32);
    if ((v24 & 1) != 0)
      goto LABEL_58;
  }
  else if ((v24 & 1) != 0)
  {
    goto LABEL_58;
  }
  v38 = *(uint64_t **)(a1 + 80);
  __p[0] = (void *)v19;
  v40[0] = 0;
  if ((sub_1C614F7B0(v38, __p, v40) & 1) == 0)
  {
    v39 = *(uint64_t **)(a1 + 80);
    __p[0] = (void *)sub_1C5676C10((llvm::IRPosition *)&v44);
    v40[0] = 0;
    if ((sub_1C614F7B0(v39, __p, v40) & 1) == 0)
      goto LABEL_59;
  }
LABEL_58:
  v35 = *(_DWORD *)(a1 + 4368);
  if (v35 == 2)
  {
LABEL_59:
    v36 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    return v15;
  }
  if (a7)
  {
    *(_DWORD *)(a1 + 4368) = 1;
    llvm::Attributor::updateAA((llvm::Attributor *)a1, v15);
    *(_DWORD *)(a1 + 4368) = v35;
  }
  if (a4)
  {
    v37 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37))
      llvm::Attributor::recordDependence(a1, (uint64_t)v15, a4, a5);
  }
  return v15;
}

uint64_t sub_1C56864A0(uint64_t a1, __int128 *a2, uint64_t a3, int a4, char a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  __int128 v15;
  uint64_t *v16;

  v9 = *a2;
  v14 = &llvm::AANoUnwind::ID;
  v15 = v9;
  v16 = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0)
    return 0;
  v10 = v16[3];
  if (v10)
  {
    if (a3
      && a4 != 2
      && (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v16[3]),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11)))
    {
      llvm::Attributor::recordDependence(a1, v10, a3, a4);
      if ((a5 & 1) != 0)
        return v10;
    }
    else if ((a5 & 1) != 0)
    {
      return v10;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
      return 0;
  }
  return v10;
}

llvm::AbstractAttribute *sub_1C568658C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v12;
  llvm::AbstractAttribute *v13;
  llvm::Attributor *v14;
  llvm::AbstractAttribute *v15;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  _BOOL4 v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void **v30;
  void **v31;
  uint64_t *v32;
  void **v33;
  size_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  void *v40[2];
  char v41;
  void *__p[2];
  char v43;
  __int128 v44;

  if (byte_1ED831CE0)
    v12 = a3;
  else
    v12 = 0;
  *(_QWORD *)&v44 = a2;
  *((_QWORD *)&v44 + 1) = v12;
  v13 = (llvm::AbstractAttribute *)sub_1C5686978(a1, &v44, a4, a5, 1);
  v15 = v13;
  if (v13 && a6)
  {
    if (*(_DWORD *)(a1 + 4368) == 1)
      llvm::Attributor::updateAA((llvm::Attributor *)a1, v13);
    return v15;
  }
  if (v13)
    return v15;
  v15 = (llvm::AbstractAttribute *)llvm::AANoFree::createForPosition((llvm::AANoFree *)&v44, (const llvm::IRPosition *)a1, v14);
  sub_1C62893D8(a1, (uint64_t)v15);
  v17 = *(uint64_t **)(a1 + 5480);
  if (v17)
  {
    __p[0] = &llvm::AANoFree::ID;
    v40[0] = 0;
    v18 = sub_1C614F7B0(v17, __p, v40) ^ 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = v44 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v44 & 3) == 0)
    v19 = *(_QWORD *)(v19 + 24);
  v20 = *(unsigned __int8 *)(v19 + 16);
  if (!*(_BYTE *)(v19 + 16))
    goto LABEL_20;
  if (v20 == 21)
  {
    v21 = (uint64_t *)(v19 + 24);
  }
  else
  {
    if (v20 < 0x1C)
    {
      v19 = 0;
      goto LABEL_27;
    }
    v21 = (uint64_t *)(*(_QWORD *)(v19 + 40) + 56);
  }
  v19 = *v21;
  if (!*v21)
  {
LABEL_27:
    v24 = 1;
    goto LABEL_32;
  }
LABEL_20:
  v22 = *(_QWORD *)(v19 + 112);
  if (v22 && ((*(_BYTE *)(v22 + 14) & 2) != 0 || (*(_BYTE *)(v22 + 17) & 8) != 0))
  {
    v23 = 1;
  }
  else if (*(_BYTE *)(a1 + 5464))
  {
    v23 = 0;
  }
  else
  {
    v25 = *(_QWORD **)(a1 + 88);
    v26 = sub_1C477672C((uint64_t)v25, v19);
    v27 = v25[1];
    v28 = 16;
    if (v27 == *v25)
      v28 = 20;
    v23 = v26 == (_QWORD *)(v27 + 8 * *(unsigned int *)((char *)v25 + v28));
  }
  v24 = 0;
  LOBYTE(v18) = (v23 | v18) != 0;
LABEL_32:
  if ((v18 & 1) != 0 || *(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
    goto LABEL_59;
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v15 + 72))(v40, v15);
  if (v41 >= 0)
    v29 = v41 & 0x7F;
  else
    v29 = (size_t)v40[1];
  v30 = __p;
  sub_1C484371C((uint64_t)__p, v29 + 12);
  if (v43 < 0)
    v30 = (void **)__p[0];
  if (v29)
  {
    if (v41 >= 0)
      v31 = v40;
    else
      v31 = (void **)v40[0];
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, "::initialize");
  v32 = (uint64_t *)off_1EF8EEB50();
  if (*v32)
  {
    if (v43 >= 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if (v43 >= 0)
      v34 = v43 & 0x7F;
    else
      v34 = (size_t)__p[1];
    llvm::timeTraceProfilerBegin(v33, v34, (uint64_t)&unk_1C872ACEA, 0);
  }
  if (v43 < 0)
    operator delete(__p[0]);
  if (v41 < 0)
    operator delete(v40[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v15 + 24))(v15, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v32)
  {
    sub_1C6392DC0(*v32);
    if ((v24 & 1) != 0)
      goto LABEL_58;
  }
  else if ((v24 & 1) != 0)
  {
    goto LABEL_58;
  }
  v38 = *(uint64_t **)(a1 + 80);
  __p[0] = (void *)v19;
  v40[0] = 0;
  if ((sub_1C614F7B0(v38, __p, v40) & 1) == 0)
  {
    v39 = *(uint64_t **)(a1 + 80);
    __p[0] = (void *)sub_1C5676C10((llvm::IRPosition *)&v44);
    v40[0] = 0;
    if ((sub_1C614F7B0(v39, __p, v40) & 1) == 0)
      goto LABEL_59;
  }
LABEL_58:
  v35 = *(_DWORD *)(a1 + 4368);
  if (v35 == 2)
  {
LABEL_59:
    v36 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    return v15;
  }
  if (a7)
  {
    *(_DWORD *)(a1 + 4368) = 1;
    llvm::Attributor::updateAA((llvm::Attributor *)a1, v15);
    *(_DWORD *)(a1 + 4368) = v35;
  }
  if (a4)
  {
    v37 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37))
      llvm::Attributor::recordDependence(a1, (uint64_t)v15, a4, a5);
  }
  return v15;
}

uint64_t sub_1C5686978(uint64_t a1, __int128 *a2, uint64_t a3, int a4, char a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  __int128 v15;
  uint64_t *v16;

  v9 = *a2;
  v14 = &llvm::AANoFree::ID;
  v15 = v9;
  v16 = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0)
    return 0;
  v10 = v16[3];
  if (v10)
  {
    if (a3
      && a4 != 2
      && (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v16[3]),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11)))
    {
      llvm::Attributor::recordDependence(a1, v10, a3, a4);
      if ((a5 & 1) != 0)
        return v10;
    }
    else if ((a5 & 1) != 0)
    {
      return v10;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
      return 0;
  }
  return v10;
}

llvm::AbstractAttribute *sub_1C5686A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v12;
  llvm::AbstractAttribute *v13;
  llvm::Attributor *v14;
  llvm::AbstractAttribute *v15;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  _BOOL4 v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void **v30;
  void **v31;
  uint64_t *v32;
  void **v33;
  size_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  void *v40[2];
  char v41;
  void *__p[2];
  char v43;
  __int128 v44;

  if (byte_1ED831CE0)
    v12 = a3;
  else
    v12 = 0;
  *(_QWORD *)&v44 = a2;
  *((_QWORD *)&v44 + 1) = v12;
  v13 = (llvm::AbstractAttribute *)sub_1C5686E50(a1, &v44, a4, a5, 1);
  v15 = v13;
  if (v13 && a6)
  {
    if (*(_DWORD *)(a1 + 4368) == 1)
      llvm::Attributor::updateAA((llvm::Attributor *)a1, v13);
    return v15;
  }
  if (v13)
    return v15;
  v15 = (llvm::AbstractAttribute *)llvm::AANoReturn::createForPosition((llvm::AANoReturn *)&v44, (const llvm::IRPosition *)a1, v14);
  sub_1C6289444(a1, (uint64_t)v15);
  v17 = *(uint64_t **)(a1 + 5480);
  if (v17)
  {
    __p[0] = &llvm::AANoReturn::ID;
    v40[0] = 0;
    v18 = sub_1C614F7B0(v17, __p, v40) ^ 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = v44 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v44 & 3) == 0)
    v19 = *(_QWORD *)(v19 + 24);
  v20 = *(unsigned __int8 *)(v19 + 16);
  if (!*(_BYTE *)(v19 + 16))
    goto LABEL_20;
  if (v20 == 21)
  {
    v21 = (uint64_t *)(v19 + 24);
  }
  else
  {
    if (v20 < 0x1C)
    {
      v19 = 0;
      goto LABEL_27;
    }
    v21 = (uint64_t *)(*(_QWORD *)(v19 + 40) + 56);
  }
  v19 = *v21;
  if (!*v21)
  {
LABEL_27:
    v24 = 1;
    goto LABEL_32;
  }
LABEL_20:
  v22 = *(_QWORD *)(v19 + 112);
  if (v22 && ((*(_BYTE *)(v22 + 14) & 2) != 0 || (*(_BYTE *)(v22 + 17) & 8) != 0))
  {
    v23 = 1;
  }
  else if (*(_BYTE *)(a1 + 5464))
  {
    v23 = 0;
  }
  else
  {
    v25 = *(_QWORD **)(a1 + 88);
    v26 = sub_1C477672C((uint64_t)v25, v19);
    v27 = v25[1];
    v28 = 16;
    if (v27 == *v25)
      v28 = 20;
    v23 = v26 == (_QWORD *)(v27 + 8 * *(unsigned int *)((char *)v25 + v28));
  }
  v24 = 0;
  LOBYTE(v18) = (v23 | v18) != 0;
LABEL_32:
  if ((v18 & 1) != 0 || *(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
    goto LABEL_59;
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v15 + 72))(v40, v15);
  if (v41 >= 0)
    v29 = v41 & 0x7F;
  else
    v29 = (size_t)v40[1];
  v30 = __p;
  sub_1C484371C((uint64_t)__p, v29 + 12);
  if (v43 < 0)
    v30 = (void **)__p[0];
  if (v29)
  {
    if (v41 >= 0)
      v31 = v40;
    else
      v31 = (void **)v40[0];
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, "::initialize");
  v32 = (uint64_t *)off_1EF8EEB50();
  if (*v32)
  {
    if (v43 >= 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if (v43 >= 0)
      v34 = v43 & 0x7F;
    else
      v34 = (size_t)__p[1];
    llvm::timeTraceProfilerBegin(v33, v34, (uint64_t)&unk_1C872ACEA, 0);
  }
  if (v43 < 0)
    operator delete(__p[0]);
  if (v41 < 0)
    operator delete(v40[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v15 + 24))(v15, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v32)
  {
    sub_1C6392DC0(*v32);
    if ((v24 & 1) != 0)
      goto LABEL_58;
  }
  else if ((v24 & 1) != 0)
  {
    goto LABEL_58;
  }
  v38 = *(uint64_t **)(a1 + 80);
  __p[0] = (void *)v19;
  v40[0] = 0;
  if ((sub_1C614F7B0(v38, __p, v40) & 1) == 0)
  {
    v39 = *(uint64_t **)(a1 + 80);
    __p[0] = (void *)sub_1C5676C10((llvm::IRPosition *)&v44);
    v40[0] = 0;
    if ((sub_1C614F7B0(v39, __p, v40) & 1) == 0)
      goto LABEL_59;
  }
LABEL_58:
  v35 = *(_DWORD *)(a1 + 4368);
  if (v35 == 2)
  {
LABEL_59:
    v36 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    return v15;
  }
  if (a7)
  {
    *(_DWORD *)(a1 + 4368) = 1;
    llvm::Attributor::updateAA((llvm::Attributor *)a1, v15);
    *(_DWORD *)(a1 + 4368) = v35;
  }
  if (a4)
  {
    v37 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37))
      llvm::Attributor::recordDependence(a1, (uint64_t)v15, a4, a5);
  }
  return v15;
}

uint64_t sub_1C5686E50(uint64_t a1, __int128 *a2, uint64_t a3, int a4, char a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  __int128 v15;
  uint64_t *v16;

  v9 = *a2;
  v14 = &llvm::AANoReturn::ID;
  v15 = v9;
  v16 = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0)
    return 0;
  v10 = v16[3];
  if (v10)
  {
    if (a3
      && a4 != 2
      && (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v16[3]),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11)))
    {
      llvm::Attributor::recordDependence(a1, v10, a3, a4);
      if ((a5 & 1) != 0)
        return v10;
    }
    else if ((a5 & 1) != 0)
    {
      return v10;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
      return 0;
  }
  return v10;
}

llvm::AbstractAttribute *sub_1C5686F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v12;
  llvm::AbstractAttribute *v13;
  llvm::Attributor *v14;
  llvm::AbstractAttribute *v15;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  _BOOL4 v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void **v30;
  void **v31;
  uint64_t *v32;
  void **v33;
  size_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  void *v40[2];
  char v41;
  void *__p[2];
  char v43;
  __int128 v44;

  if (byte_1ED831CE0)
    v12 = a3;
  else
    v12 = 0;
  *(_QWORD *)&v44 = a2;
  *((_QWORD *)&v44 + 1) = v12;
  v13 = (llvm::AbstractAttribute *)sub_1C5687328(a1, &v44, a4, a5, 1);
  v15 = v13;
  if (v13 && a6)
  {
    if (*(_DWORD *)(a1 + 4368) == 1)
      llvm::Attributor::updateAA((llvm::Attributor *)a1, v13);
    return v15;
  }
  if (v13)
    return v15;
  v15 = (llvm::AbstractAttribute *)llvm::AAAssumptionInfo::createForPosition((llvm::AAAssumptionInfo *)&v44, (const llvm::IRPosition *)a1, v14);
  sub_1C62894B0(a1, (uint64_t)v15);
  v17 = *(uint64_t **)(a1 + 5480);
  if (v17)
  {
    __p[0] = &llvm::AAAssumptionInfo::ID;
    v40[0] = 0;
    v18 = sub_1C614F7B0(v17, __p, v40) ^ 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = v44 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v44 & 3) == 0)
    v19 = *(_QWORD *)(v19 + 24);
  v20 = *(unsigned __int8 *)(v19 + 16);
  if (!*(_BYTE *)(v19 + 16))
    goto LABEL_20;
  if (v20 == 21)
  {
    v21 = (uint64_t *)(v19 + 24);
  }
  else
  {
    if (v20 < 0x1C)
    {
      v19 = 0;
      goto LABEL_27;
    }
    v21 = (uint64_t *)(*(_QWORD *)(v19 + 40) + 56);
  }
  v19 = *v21;
  if (!*v21)
  {
LABEL_27:
    v24 = 1;
    goto LABEL_32;
  }
LABEL_20:
  v22 = *(_QWORD *)(v19 + 112);
  if (v22 && ((*(_BYTE *)(v22 + 14) & 2) != 0 || (*(_BYTE *)(v22 + 17) & 8) != 0))
  {
    v23 = 1;
  }
  else if (*(_BYTE *)(a1 + 5464))
  {
    v23 = 0;
  }
  else
  {
    v25 = *(_QWORD **)(a1 + 88);
    v26 = sub_1C477672C((uint64_t)v25, v19);
    v27 = v25[1];
    v28 = 16;
    if (v27 == *v25)
      v28 = 20;
    v23 = v26 == (_QWORD *)(v27 + 8 * *(unsigned int *)((char *)v25 + v28));
  }
  v24 = 0;
  LOBYTE(v18) = (v23 | v18) != 0;
LABEL_32:
  if ((v18 & 1) != 0 || *(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
    goto LABEL_59;
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v15 + 72))(v40, v15);
  if (v41 >= 0)
    v29 = v41 & 0x7F;
  else
    v29 = (size_t)v40[1];
  v30 = __p;
  sub_1C484371C((uint64_t)__p, v29 + 12);
  if (v43 < 0)
    v30 = (void **)__p[0];
  if (v29)
  {
    if (v41 >= 0)
      v31 = v40;
    else
      v31 = (void **)v40[0];
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, "::initialize");
  v32 = (uint64_t *)off_1EF8EEB50();
  if (*v32)
  {
    if (v43 >= 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if (v43 >= 0)
      v34 = v43 & 0x7F;
    else
      v34 = (size_t)__p[1];
    llvm::timeTraceProfilerBegin(v33, v34, (uint64_t)&unk_1C872ACEA, 0);
  }
  if (v43 < 0)
    operator delete(__p[0]);
  if (v41 < 0)
    operator delete(v40[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v15 + 24))(v15, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v32)
  {
    sub_1C6392DC0(*v32);
    if ((v24 & 1) != 0)
      goto LABEL_58;
  }
  else if ((v24 & 1) != 0)
  {
    goto LABEL_58;
  }
  v38 = *(uint64_t **)(a1 + 80);
  __p[0] = (void *)v19;
  v40[0] = 0;
  if ((sub_1C614F7B0(v38, __p, v40) & 1) == 0)
  {
    v39 = *(uint64_t **)(a1 + 80);
    __p[0] = (void *)sub_1C5676C10((llvm::IRPosition *)&v44);
    v40[0] = 0;
    if ((sub_1C614F7B0(v39, __p, v40) & 1) == 0)
      goto LABEL_59;
  }
LABEL_58:
  v35 = *(_DWORD *)(a1 + 4368);
  if (v35 == 2)
  {
LABEL_59:
    v36 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    return v15;
  }
  if (a7)
  {
    *(_DWORD *)(a1 + 4368) = 1;
    llvm::Attributor::updateAA((llvm::Attributor *)a1, v15);
    *(_DWORD *)(a1 + 4368) = v35;
  }
  if (a4)
  {
    v37 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37))
      llvm::Attributor::recordDependence(a1, (uint64_t)v15, a4, a5);
  }
  return v15;
}

uint64_t sub_1C5687328(uint64_t a1, __int128 *a2, uint64_t a3, int a4, char a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  __int128 v15;
  uint64_t *v16;

  v9 = *a2;
  v14 = &llvm::AAAssumptionInfo::ID;
  v15 = v9;
  v16 = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0)
    return 0;
  v10 = v16[3];
  if (v10)
  {
    if (a3
      && a4 != 2
      && (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v16[3]),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11)))
    {
      llvm::Attributor::recordDependence(a1, v10, a3, a4);
      if ((a5 & 1) != 0)
        return v10;
    }
    else if ((a5 & 1) != 0)
    {
      return v10;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
      return 0;
  }
  return v10;
}

llvm::AbstractAttribute *sub_1C5687414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v12;
  llvm::AbstractAttribute *v13;
  llvm::Attributor *v14;
  llvm::AbstractAttribute *v15;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  _BOOL4 v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void **v30;
  void **v31;
  uint64_t *v32;
  void **v33;
  size_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  void *v40[2];
  char v41;
  void *__p[2];
  char v43;
  __int128 v44;

  if (byte_1ED831CE0)
    v12 = a3;
  else
    v12 = 0;
  *(_QWORD *)&v44 = a2;
  *((_QWORD *)&v44 + 1) = v12;
  v13 = (llvm::AbstractAttribute *)sub_1C5687800(a1, &v44, a4, a5, 1);
  v15 = v13;
  if (v13 && a6)
  {
    if (*(_DWORD *)(a1 + 4368) == 1)
      llvm::Attributor::updateAA((llvm::Attributor *)a1, v13);
    return v15;
  }
  if (v13)
    return v15;
  v15 = (llvm::AbstractAttribute *)llvm::AAHeapToStack::createForPosition((llvm::AAHeapToStack *)&v44, (const llvm::IRPosition *)a1, v14);
  sub_1C628951C(a1, (uint64_t)v15);
  v17 = *(uint64_t **)(a1 + 5480);
  if (v17)
  {
    __p[0] = &llvm::AAHeapToStack::ID;
    v40[0] = 0;
    v18 = sub_1C614F7B0(v17, __p, v40) ^ 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = v44 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v44 & 3) == 0)
    v19 = *(_QWORD *)(v19 + 24);
  v20 = *(unsigned __int8 *)(v19 + 16);
  if (!*(_BYTE *)(v19 + 16))
    goto LABEL_20;
  if (v20 == 21)
  {
    v21 = (uint64_t *)(v19 + 24);
  }
  else
  {
    if (v20 < 0x1C)
    {
      v19 = 0;
      goto LABEL_27;
    }
    v21 = (uint64_t *)(*(_QWORD *)(v19 + 40) + 56);
  }
  v19 = *v21;
  if (!*v21)
  {
LABEL_27:
    v24 = 1;
    goto LABEL_32;
  }
LABEL_20:
  v22 = *(_QWORD *)(v19 + 112);
  if (v22 && ((*(_BYTE *)(v22 + 14) & 2) != 0 || (*(_BYTE *)(v22 + 17) & 8) != 0))
  {
    v23 = 1;
  }
  else if (*(_BYTE *)(a1 + 5464))
  {
    v23 = 0;
  }
  else
  {
    v25 = *(_QWORD **)(a1 + 88);
    v26 = sub_1C477672C((uint64_t)v25, v19);
    v27 = v25[1];
    v28 = 16;
    if (v27 == *v25)
      v28 = 20;
    v23 = v26 == (_QWORD *)(v27 + 8 * *(unsigned int *)((char *)v25 + v28));
  }
  v24 = 0;
  LOBYTE(v18) = (v23 | v18) != 0;
LABEL_32:
  if ((v18 & 1) != 0 || *(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
    goto LABEL_59;
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v15 + 72))(v40, v15);
  if (v41 >= 0)
    v29 = v41 & 0x7F;
  else
    v29 = (size_t)v40[1];
  v30 = __p;
  sub_1C484371C((uint64_t)__p, v29 + 12);
  if (v43 < 0)
    v30 = (void **)__p[0];
  if (v29)
  {
    if (v41 >= 0)
      v31 = v40;
    else
      v31 = (void **)v40[0];
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, "::initialize");
  v32 = (uint64_t *)off_1EF8EEB50();
  if (*v32)
  {
    if (v43 >= 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if (v43 >= 0)
      v34 = v43 & 0x7F;
    else
      v34 = (size_t)__p[1];
    llvm::timeTraceProfilerBegin(v33, v34, (uint64_t)&unk_1C872ACEA, 0);
  }
  if (v43 < 0)
    operator delete(__p[0]);
  if (v41 < 0)
    operator delete(v40[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v15 + 24))(v15, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v32)
  {
    sub_1C6392DC0(*v32);
    if ((v24 & 1) != 0)
      goto LABEL_58;
  }
  else if ((v24 & 1) != 0)
  {
    goto LABEL_58;
  }
  v38 = *(uint64_t **)(a1 + 80);
  __p[0] = (void *)v19;
  v40[0] = 0;
  if ((sub_1C614F7B0(v38, __p, v40) & 1) == 0)
  {
    v39 = *(uint64_t **)(a1 + 80);
    __p[0] = (void *)sub_1C5676C10((llvm::IRPosition *)&v44);
    v40[0] = 0;
    if ((sub_1C614F7B0(v39, __p, v40) & 1) == 0)
      goto LABEL_59;
  }
LABEL_58:
  v35 = *(_DWORD *)(a1 + 4368);
  if (v35 == 2)
  {
LABEL_59:
    v36 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    return v15;
  }
  if (a7)
  {
    *(_DWORD *)(a1 + 4368) = 1;
    llvm::Attributor::updateAA((llvm::Attributor *)a1, v15);
    *(_DWORD *)(a1 + 4368) = v35;
  }
  if (a4)
  {
    v37 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37))
      llvm::Attributor::recordDependence(a1, (uint64_t)v15, a4, a5);
  }
  return v15;
}

uint64_t sub_1C5687800(uint64_t a1, __int128 *a2, uint64_t a3, int a4, char a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  __int128 v15;
  uint64_t *v16;

  v9 = *a2;
  v14 = &llvm::AAHeapToStack::ID;
  v15 = v9;
  v16 = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0)
    return 0;
  v10 = v16[3];
  if (v10)
  {
    if (a3
      && a4 != 2
      && (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v16[3]),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11)))
    {
      llvm::Attributor::recordDependence(a1, v10, a3, a4);
      if ((a5 & 1) != 0)
        return v10;
    }
    else if ((a5 & 1) != 0)
    {
      return v10;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
      return 0;
  }
  return v10;
}

llvm::AbstractAttribute *sub_1C56878EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v12;
  llvm::AbstractAttribute *v13;
  llvm::Attributor *v14;
  llvm::AbstractAttribute *v15;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  _BOOL4 v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void **v30;
  void **v31;
  uint64_t *v32;
  void **v33;
  size_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  void *v40[2];
  char v41;
  void *__p[2];
  char v43;
  __int128 v44;

  if (byte_1ED831CE0)
    v12 = a3;
  else
    v12 = 0;
  *(_QWORD *)&v44 = a2;
  *((_QWORD *)&v44 + 1) = v12;
  v13 = (llvm::AbstractAttribute *)sub_1C5687CD8(a1, &v44, a4, a5, 1);
  v15 = v13;
  if (v13 && a6)
  {
    if (*(_DWORD *)(a1 + 4368) == 1)
      llvm::Attributor::updateAA((llvm::Attributor *)a1, v13);
    return v15;
  }
  if (v13)
    return v15;
  v15 = (llvm::AbstractAttribute *)llvm::AANoUndef::createForPosition((llvm::AANoUndef *)&v44, (const llvm::IRPosition *)a1, v14);
  sub_1C6289588(a1, (uint64_t)v15);
  v17 = *(uint64_t **)(a1 + 5480);
  if (v17)
  {
    __p[0] = &llvm::AANoUndef::ID;
    v40[0] = 0;
    v18 = sub_1C614F7B0(v17, __p, v40) ^ 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = v44 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v44 & 3) == 0)
    v19 = *(_QWORD *)(v19 + 24);
  v20 = *(unsigned __int8 *)(v19 + 16);
  if (!*(_BYTE *)(v19 + 16))
    goto LABEL_20;
  if (v20 == 21)
  {
    v21 = (uint64_t *)(v19 + 24);
  }
  else
  {
    if (v20 < 0x1C)
    {
      v19 = 0;
      goto LABEL_27;
    }
    v21 = (uint64_t *)(*(_QWORD *)(v19 + 40) + 56);
  }
  v19 = *v21;
  if (!*v21)
  {
LABEL_27:
    v24 = 1;
    goto LABEL_32;
  }
LABEL_20:
  v22 = *(_QWORD *)(v19 + 112);
  if (v22 && ((*(_BYTE *)(v22 + 14) & 2) != 0 || (*(_BYTE *)(v22 + 17) & 8) != 0))
  {
    v23 = 1;
  }
  else if (*(_BYTE *)(a1 + 5464))
  {
    v23 = 0;
  }
  else
  {
    v25 = *(_QWORD **)(a1 + 88);
    v26 = sub_1C477672C((uint64_t)v25, v19);
    v27 = v25[1];
    v28 = 16;
    if (v27 == *v25)
      v28 = 20;
    v23 = v26 == (_QWORD *)(v27 + 8 * *(unsigned int *)((char *)v25 + v28));
  }
  v24 = 0;
  LOBYTE(v18) = (v23 | v18) != 0;
LABEL_32:
  if ((v18 & 1) != 0 || *(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
    goto LABEL_59;
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v15 + 72))(v40, v15);
  if (v41 >= 0)
    v29 = v41 & 0x7F;
  else
    v29 = (size_t)v40[1];
  v30 = __p;
  sub_1C484371C((uint64_t)__p, v29 + 12);
  if (v43 < 0)
    v30 = (void **)__p[0];
  if (v29)
  {
    if (v41 >= 0)
      v31 = v40;
    else
      v31 = (void **)v40[0];
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, "::initialize");
  v32 = (uint64_t *)off_1EF8EEB50();
  if (*v32)
  {
    if (v43 >= 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if (v43 >= 0)
      v34 = v43 & 0x7F;
    else
      v34 = (size_t)__p[1];
    llvm::timeTraceProfilerBegin(v33, v34, (uint64_t)&unk_1C872ACEA, 0);
  }
  if (v43 < 0)
    operator delete(__p[0]);
  if (v41 < 0)
    operator delete(v40[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v15 + 24))(v15, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v32)
  {
    sub_1C6392DC0(*v32);
    if ((v24 & 1) != 0)
      goto LABEL_58;
  }
  else if ((v24 & 1) != 0)
  {
    goto LABEL_58;
  }
  v38 = *(uint64_t **)(a1 + 80);
  __p[0] = (void *)v19;
  v40[0] = 0;
  if ((sub_1C614F7B0(v38, __p, v40) & 1) == 0)
  {
    v39 = *(uint64_t **)(a1 + 80);
    __p[0] = (void *)sub_1C5676C10((llvm::IRPosition *)&v44);
    v40[0] = 0;
    if ((sub_1C614F7B0(v39, __p, v40) & 1) == 0)
      goto LABEL_59;
  }
LABEL_58:
  v35 = *(_DWORD *)(a1 + 4368);
  if (v35 == 2)
  {
LABEL_59:
    v36 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    return v15;
  }
  if (a7)
  {
    *(_DWORD *)(a1 + 4368) = 1;
    llvm::Attributor::updateAA((llvm::Attributor *)a1, v15);
    *(_DWORD *)(a1 + 4368) = v35;
  }
  if (a4)
  {
    v37 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37))
      llvm::Attributor::recordDependence(a1, (uint64_t)v15, a4, a5);
  }
  return v15;
}

uint64_t sub_1C5687CD8(uint64_t a1, __int128 *a2, uint64_t a3, int a4, char a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  __int128 v15;
  uint64_t *v16;

  v9 = *a2;
  v14 = &llvm::AANoUndef::ID;
  v15 = v9;
  v16 = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0)
    return 0;
  v10 = v16[3];
  if (v10)
  {
    if (a3
      && a4 != 2
      && (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v16[3]),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11)))
    {
      llvm::Attributor::recordDependence(a1, v10, a3, a4);
      if ((a5 & 1) != 0)
        return v10;
    }
    else if ((a5 & 1) != 0)
    {
      return v10;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
      return 0;
  }
  return v10;
}

llvm::AbstractAttribute *sub_1C5687DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v12;
  llvm::AbstractAttribute *v13;
  llvm::Attributor *v14;
  llvm::AbstractAttribute *v15;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  _BOOL4 v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void **v30;
  void **v31;
  uint64_t *v32;
  void **v33;
  size_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  void *v40[2];
  char v41;
  void *__p[2];
  char v43;
  __int128 v44;

  if (byte_1ED831CE0)
    v12 = a3;
  else
    v12 = 0;
  *(_QWORD *)&v44 = a2;
  *((_QWORD *)&v44 + 1) = v12;
  v13 = (llvm::AbstractAttribute *)sub_1C56881B0(a1, &v44, a4, a5, 1);
  v15 = v13;
  if (v13 && a6)
  {
    if (*(_DWORD *)(a1 + 4368) == 1)
      llvm::Attributor::updateAA((llvm::Attributor *)a1, v13);
    return v15;
  }
  if (v13)
    return v15;
  v15 = (llvm::AbstractAttribute *)llvm::AAAlign::createForPosition((llvm::AAAlign *)&v44, (const llvm::IRPosition *)a1, v14);
  sub_1C62895F4(a1, (uint64_t)v15);
  v17 = *(uint64_t **)(a1 + 5480);
  if (v17)
  {
    __p[0] = &llvm::AAAlign::ID;
    v40[0] = 0;
    v18 = sub_1C614F7B0(v17, __p, v40) ^ 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = v44 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v44 & 3) == 0)
    v19 = *(_QWORD *)(v19 + 24);
  v20 = *(unsigned __int8 *)(v19 + 16);
  if (!*(_BYTE *)(v19 + 16))
    goto LABEL_20;
  if (v20 == 21)
  {
    v21 = (uint64_t *)(v19 + 24);
  }
  else
  {
    if (v20 < 0x1C)
    {
      v19 = 0;
      goto LABEL_27;
    }
    v21 = (uint64_t *)(*(_QWORD *)(v19 + 40) + 56);
  }
  v19 = *v21;
  if (!*v21)
  {
LABEL_27:
    v24 = 1;
    goto LABEL_32;
  }
LABEL_20:
  v22 = *(_QWORD *)(v19 + 112);
  if (v22 && ((*(_BYTE *)(v22 + 14) & 2) != 0 || (*(_BYTE *)(v22 + 17) & 8) != 0))
  {
    v23 = 1;
  }
  else if (*(_BYTE *)(a1 + 5464))
  {
    v23 = 0;
  }
  else
  {
    v25 = *(_QWORD **)(a1 + 88);
    v26 = sub_1C477672C((uint64_t)v25, v19);
    v27 = v25[1];
    v28 = 16;
    if (v27 == *v25)
      v28 = 20;
    v23 = v26 == (_QWORD *)(v27 + 8 * *(unsigned int *)((char *)v25 + v28));
  }
  v24 = 0;
  LOBYTE(v18) = (v23 | v18) != 0;
LABEL_32:
  if ((v18 & 1) != 0 || *(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
    goto LABEL_59;
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v15 + 72))(v40, v15);
  if (v41 >= 0)
    v29 = v41 & 0x7F;
  else
    v29 = (size_t)v40[1];
  v30 = __p;
  sub_1C484371C((uint64_t)__p, v29 + 12);
  if (v43 < 0)
    v30 = (void **)__p[0];
  if (v29)
  {
    if (v41 >= 0)
      v31 = v40;
    else
      v31 = (void **)v40[0];
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, "::initialize");
  v32 = (uint64_t *)off_1EF8EEB50();
  if (*v32)
  {
    if (v43 >= 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if (v43 >= 0)
      v34 = v43 & 0x7F;
    else
      v34 = (size_t)__p[1];
    llvm::timeTraceProfilerBegin(v33, v34, (uint64_t)&unk_1C872ACEA, 0);
  }
  if (v43 < 0)
    operator delete(__p[0]);
  if (v41 < 0)
    operator delete(v40[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v15 + 24))(v15, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v32)
  {
    sub_1C6392DC0(*v32);
    if ((v24 & 1) != 0)
      goto LABEL_58;
  }
  else if ((v24 & 1) != 0)
  {
    goto LABEL_58;
  }
  v38 = *(uint64_t **)(a1 + 80);
  __p[0] = (void *)v19;
  v40[0] = 0;
  if ((sub_1C614F7B0(v38, __p, v40) & 1) == 0)
  {
    v39 = *(uint64_t **)(a1 + 80);
    __p[0] = (void *)sub_1C5676C10((llvm::IRPosition *)&v44);
    v40[0] = 0;
    if ((sub_1C614F7B0(v39, __p, v40) & 1) == 0)
      goto LABEL_59;
  }
LABEL_58:
  v35 = *(_DWORD *)(a1 + 4368);
  if (v35 == 2)
  {
LABEL_59:
    v36 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    return v15;
  }
  if (a7)
  {
    *(_DWORD *)(a1 + 4368) = 1;
    llvm::Attributor::updateAA((llvm::Attributor *)a1, v15);
    *(_DWORD *)(a1 + 4368) = v35;
  }
  if (a4)
  {
    v37 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37))
      llvm::Attributor::recordDependence(a1, (uint64_t)v15, a4, a5);
  }
  return v15;
}

uint64_t sub_1C56881B0(uint64_t a1, __int128 *a2, uint64_t a3, int a4, char a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  __int128 v15;
  uint64_t *v16;

  v9 = *a2;
  v14 = &llvm::AAAlign::ID;
  v15 = v9;
  v16 = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0)
    return 0;
  v10 = v16[3];
  if (v10)
  {
    if (a3
      && a4 != 2
      && (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v16[3]),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11)))
    {
      llvm::Attributor::recordDependence(a1, v10, a3, a4);
      if ((a5 & 1) != 0)
        return v10;
    }
    else if ((a5 & 1) != 0)
    {
      return v10;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
      return 0;
  }
  return v10;
}

llvm::AbstractAttribute *sub_1C568829C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v12;
  llvm::AbstractAttribute *v13;
  llvm::Attributor *v14;
  llvm::AbstractAttribute *v15;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  _BOOL4 v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void **v30;
  void **v31;
  uint64_t *v32;
  void **v33;
  size_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  void *v40[2];
  char v41;
  void *__p[2];
  char v43;
  __int128 v44;

  if (byte_1ED831CE0)
    v12 = a3;
  else
    v12 = 0;
  *(_QWORD *)&v44 = a2;
  *((_QWORD *)&v44 + 1) = v12;
  v13 = (llvm::AbstractAttribute *)sub_1C5688688(a1, &v44, a4, a5, 1);
  v15 = v13;
  if (v13 && a6)
  {
    if (*(_DWORD *)(a1 + 4368) == 1)
      llvm::Attributor::updateAA((llvm::Attributor *)a1, v13);
    return v15;
  }
  if (v13)
    return v15;
  v15 = (llvm::AbstractAttribute *)llvm::AANonNull::createForPosition((llvm::AANonNull *)&v44, (const llvm::IRPosition *)a1, v14);
  sub_1C6289660(a1, (uint64_t)v15);
  v17 = *(uint64_t **)(a1 + 5480);
  if (v17)
  {
    __p[0] = &llvm::AANonNull::ID;
    v40[0] = 0;
    v18 = sub_1C614F7B0(v17, __p, v40) ^ 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = v44 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v44 & 3) == 0)
    v19 = *(_QWORD *)(v19 + 24);
  v20 = *(unsigned __int8 *)(v19 + 16);
  if (!*(_BYTE *)(v19 + 16))
    goto LABEL_20;
  if (v20 == 21)
  {
    v21 = (uint64_t *)(v19 + 24);
  }
  else
  {
    if (v20 < 0x1C)
    {
      v19 = 0;
      goto LABEL_27;
    }
    v21 = (uint64_t *)(*(_QWORD *)(v19 + 40) + 56);
  }
  v19 = *v21;
  if (!*v21)
  {
LABEL_27:
    v24 = 1;
    goto LABEL_32;
  }
LABEL_20:
  v22 = *(_QWORD *)(v19 + 112);
  if (v22 && ((*(_BYTE *)(v22 + 14) & 2) != 0 || (*(_BYTE *)(v22 + 17) & 8) != 0))
  {
    v23 = 1;
  }
  else if (*(_BYTE *)(a1 + 5464))
  {
    v23 = 0;
  }
  else
  {
    v25 = *(_QWORD **)(a1 + 88);
    v26 = sub_1C477672C((uint64_t)v25, v19);
    v27 = v25[1];
    v28 = 16;
    if (v27 == *v25)
      v28 = 20;
    v23 = v26 == (_QWORD *)(v27 + 8 * *(unsigned int *)((char *)v25 + v28));
  }
  v24 = 0;
  LOBYTE(v18) = (v23 | v18) != 0;
LABEL_32:
  if ((v18 & 1) != 0 || *(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
    goto LABEL_59;
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v15 + 72))(v40, v15);
  if (v41 >= 0)
    v29 = v41 & 0x7F;
  else
    v29 = (size_t)v40[1];
  v30 = __p;
  sub_1C484371C((uint64_t)__p, v29 + 12);
  if (v43 < 0)
    v30 = (void **)__p[0];
  if (v29)
  {
    if (v41 >= 0)
      v31 = v40;
    else
      v31 = (void **)v40[0];
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, "::initialize");
  v32 = (uint64_t *)off_1EF8EEB50();
  if (*v32)
  {
    if (v43 >= 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if (v43 >= 0)
      v34 = v43 & 0x7F;
    else
      v34 = (size_t)__p[1];
    llvm::timeTraceProfilerBegin(v33, v34, (uint64_t)&unk_1C872ACEA, 0);
  }
  if (v43 < 0)
    operator delete(__p[0]);
  if (v41 < 0)
    operator delete(v40[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v15 + 24))(v15, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v32)
  {
    sub_1C6392DC0(*v32);
    if ((v24 & 1) != 0)
      goto LABEL_58;
  }
  else if ((v24 & 1) != 0)
  {
    goto LABEL_58;
  }
  v38 = *(uint64_t **)(a1 + 80);
  __p[0] = (void *)v19;
  v40[0] = 0;
  if ((sub_1C614F7B0(v38, __p, v40) & 1) == 0)
  {
    v39 = *(uint64_t **)(a1 + 80);
    __p[0] = (void *)sub_1C5676C10((llvm::IRPosition *)&v44);
    v40[0] = 0;
    if ((sub_1C614F7B0(v39, __p, v40) & 1) == 0)
      goto LABEL_59;
  }
LABEL_58:
  v35 = *(_DWORD *)(a1 + 4368);
  if (v35 == 2)
  {
LABEL_59:
    v36 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    return v15;
  }
  if (a7)
  {
    *(_DWORD *)(a1 + 4368) = 1;
    llvm::Attributor::updateAA((llvm::Attributor *)a1, v15);
    *(_DWORD *)(a1 + 4368) = v35;
  }
  if (a4)
  {
    v37 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37))
      llvm::Attributor::recordDependence(a1, (uint64_t)v15, a4, a5);
  }
  return v15;
}

uint64_t sub_1C5688688(uint64_t a1, __int128 *a2, uint64_t a3, int a4, char a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  __int128 v15;
  uint64_t *v16;

  v9 = *a2;
  v14 = &llvm::AANonNull::ID;
  v15 = v9;
  v16 = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0)
    return 0;
  v10 = v16[3];
  if (v10)
  {
    if (a3
      && a4 != 2
      && (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v16[3]),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11)))
    {
      llvm::Attributor::recordDependence(a1, v10, a3, a4);
      if ((a5 & 1) != 0)
        return v10;
    }
    else if ((a5 & 1) != 0)
    {
      return v10;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
      return 0;
  }
  return v10;
}

llvm::AbstractAttribute *sub_1C5688774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v12;
  llvm::AbstractAttribute *v13;
  llvm::Attributor *v14;
  llvm::AbstractAttribute *v15;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  _BOOL4 v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void **v30;
  void **v31;
  uint64_t *v32;
  void **v33;
  size_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  void *v40[2];
  char v41;
  void *__p[2];
  char v43;
  __int128 v44;

  if (byte_1ED831CE0)
    v12 = a3;
  else
    v12 = 0;
  *(_QWORD *)&v44 = a2;
  *((_QWORD *)&v44 + 1) = v12;
  v13 = (llvm::AbstractAttribute *)sub_1C5688B60(a1, &v44, a4, a5, 1);
  v15 = v13;
  if (v13 && a6)
  {
    if (*(_DWORD *)(a1 + 4368) == 1)
      llvm::Attributor::updateAA((llvm::Attributor *)a1, v13);
    return v15;
  }
  if (v13)
    return v15;
  v15 = (llvm::AbstractAttribute *)llvm::AANoAlias::createForPosition((llvm::AANoAlias *)&v44, (const llvm::IRPosition *)a1, v14);
  sub_1C62896CC(a1, (uint64_t)v15);
  v17 = *(uint64_t **)(a1 + 5480);
  if (v17)
  {
    __p[0] = &llvm::AANoAlias::ID;
    v40[0] = 0;
    v18 = sub_1C614F7B0(v17, __p, v40) ^ 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = v44 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v44 & 3) == 0)
    v19 = *(_QWORD *)(v19 + 24);
  v20 = *(unsigned __int8 *)(v19 + 16);
  if (!*(_BYTE *)(v19 + 16))
    goto LABEL_20;
  if (v20 == 21)
  {
    v21 = (uint64_t *)(v19 + 24);
  }
  else
  {
    if (v20 < 0x1C)
    {
      v19 = 0;
      goto LABEL_27;
    }
    v21 = (uint64_t *)(*(_QWORD *)(v19 + 40) + 56);
  }
  v19 = *v21;
  if (!*v21)
  {
LABEL_27:
    v24 = 1;
    goto LABEL_32;
  }
LABEL_20:
  v22 = *(_QWORD *)(v19 + 112);
  if (v22 && ((*(_BYTE *)(v22 + 14) & 2) != 0 || (*(_BYTE *)(v22 + 17) & 8) != 0))
  {
    v23 = 1;
  }
  else if (*(_BYTE *)(a1 + 5464))
  {
    v23 = 0;
  }
  else
  {
    v25 = *(_QWORD **)(a1 + 88);
    v26 = sub_1C477672C((uint64_t)v25, v19);
    v27 = v25[1];
    v28 = 16;
    if (v27 == *v25)
      v28 = 20;
    v23 = v26 == (_QWORD *)(v27 + 8 * *(unsigned int *)((char *)v25 + v28));
  }
  v24 = 0;
  LOBYTE(v18) = (v23 | v18) != 0;
LABEL_32:
  if ((v18 & 1) != 0 || *(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
    goto LABEL_59;
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v15 + 72))(v40, v15);
  if (v41 >= 0)
    v29 = v41 & 0x7F;
  else
    v29 = (size_t)v40[1];
  v30 = __p;
  sub_1C484371C((uint64_t)__p, v29 + 12);
  if (v43 < 0)
    v30 = (void **)__p[0];
  if (v29)
  {
    if (v41 >= 0)
      v31 = v40;
    else
      v31 = (void **)v40[0];
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, "::initialize");
  v32 = (uint64_t *)off_1EF8EEB50();
  if (*v32)
  {
    if (v43 >= 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if (v43 >= 0)
      v34 = v43 & 0x7F;
    else
      v34 = (size_t)__p[1];
    llvm::timeTraceProfilerBegin(v33, v34, (uint64_t)&unk_1C872ACEA, 0);
  }
  if (v43 < 0)
    operator delete(__p[0]);
  if (v41 < 0)
    operator delete(v40[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v15 + 24))(v15, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v32)
  {
    sub_1C6392DC0(*v32);
    if ((v24 & 1) != 0)
      goto LABEL_58;
  }
  else if ((v24 & 1) != 0)
  {
    goto LABEL_58;
  }
  v38 = *(uint64_t **)(a1 + 80);
  __p[0] = (void *)v19;
  v40[0] = 0;
  if ((sub_1C614F7B0(v38, __p, v40) & 1) == 0)
  {
    v39 = *(uint64_t **)(a1 + 80);
    __p[0] = (void *)sub_1C5676C10((llvm::IRPosition *)&v44);
    v40[0] = 0;
    if ((sub_1C614F7B0(v39, __p, v40) & 1) == 0)
      goto LABEL_59;
  }
LABEL_58:
  v35 = *(_DWORD *)(a1 + 4368);
  if (v35 == 2)
  {
LABEL_59:
    v36 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    return v15;
  }
  if (a7)
  {
    *(_DWORD *)(a1 + 4368) = 1;
    llvm::Attributor::updateAA((llvm::Attributor *)a1, v15);
    *(_DWORD *)(a1 + 4368) = v35;
  }
  if (a4)
  {
    v37 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37))
      llvm::Attributor::recordDependence(a1, (uint64_t)v15, a4, a5);
  }
  return v15;
}

uint64_t sub_1C5688B60(uint64_t a1, __int128 *a2, uint64_t a3, int a4, char a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  __int128 v15;
  uint64_t *v16;

  v9 = *a2;
  v14 = &llvm::AANoAlias::ID;
  v15 = v9;
  v16 = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0)
    return 0;
  v10 = v16[3];
  if (v10)
  {
    if (a3
      && a4 != 2
      && (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v16[3]),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11)))
    {
      llvm::Attributor::recordDependence(a1, v10, a3, a4);
      if ((a5 & 1) != 0)
        return v10;
    }
    else if ((a5 & 1) != 0)
    {
      return v10;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
      return 0;
  }
  return v10;
}

llvm::AbstractAttribute *sub_1C5688C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v12;
  llvm::AbstractAttribute *v13;
  llvm::Attributor *v14;
  llvm::AbstractAttribute *v15;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  _BOOL4 v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void **v30;
  void **v31;
  uint64_t *v32;
  void **v33;
  size_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  void *v40[2];
  char v41;
  void *__p[2];
  char v43;
  __int128 v44;

  if (byte_1ED831CE0)
    v12 = a3;
  else
    v12 = 0;
  *(_QWORD *)&v44 = a2;
  *((_QWORD *)&v44 + 1) = v12;
  v13 = (llvm::AbstractAttribute *)sub_1C5689038(a1, &v44, a4, a5, 1);
  v15 = v13;
  if (v13 && a6)
  {
    if (*(_DWORD *)(a1 + 4368) == 1)
      llvm::Attributor::updateAA((llvm::Attributor *)a1, v13);
    return v15;
  }
  if (v13)
    return v15;
  v15 = (llvm::AbstractAttribute *)llvm::AADereferenceable::createForPosition((llvm::AADereferenceable *)&v44, (const llvm::IRPosition *)a1, v14);
  sub_1C6289738(a1, (uint64_t)v15);
  v17 = *(uint64_t **)(a1 + 5480);
  if (v17)
  {
    __p[0] = &llvm::AADereferenceable::ID;
    v40[0] = 0;
    v18 = sub_1C614F7B0(v17, __p, v40) ^ 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = v44 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v44 & 3) == 0)
    v19 = *(_QWORD *)(v19 + 24);
  v20 = *(unsigned __int8 *)(v19 + 16);
  if (!*(_BYTE *)(v19 + 16))
    goto LABEL_20;
  if (v20 == 21)
  {
    v21 = (uint64_t *)(v19 + 24);
  }
  else
  {
    if (v20 < 0x1C)
    {
      v19 = 0;
      goto LABEL_27;
    }
    v21 = (uint64_t *)(*(_QWORD *)(v19 + 40) + 56);
  }
  v19 = *v21;
  if (!*v21)
  {
LABEL_27:
    v24 = 1;
    goto LABEL_32;
  }
LABEL_20:
  v22 = *(_QWORD *)(v19 + 112);
  if (v22 && ((*(_BYTE *)(v22 + 14) & 2) != 0 || (*(_BYTE *)(v22 + 17) & 8) != 0))
  {
    v23 = 1;
  }
  else if (*(_BYTE *)(a1 + 5464))
  {
    v23 = 0;
  }
  else
  {
    v25 = *(_QWORD **)(a1 + 88);
    v26 = sub_1C477672C((uint64_t)v25, v19);
    v27 = v25[1];
    v28 = 16;
    if (v27 == *v25)
      v28 = 20;
    v23 = v26 == (_QWORD *)(v27 + 8 * *(unsigned int *)((char *)v25 + v28));
  }
  v24 = 0;
  LOBYTE(v18) = (v23 | v18) != 0;
LABEL_32:
  if ((v18 & 1) != 0 || *(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
    goto LABEL_59;
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v15 + 72))(v40, v15);
  if (v41 >= 0)
    v29 = v41 & 0x7F;
  else
    v29 = (size_t)v40[1];
  v30 = __p;
  sub_1C484371C((uint64_t)__p, v29 + 12);
  if (v43 < 0)
    v30 = (void **)__p[0];
  if (v29)
  {
    if (v41 >= 0)
      v31 = v40;
    else
      v31 = (void **)v40[0];
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, "::initialize");
  v32 = (uint64_t *)off_1EF8EEB50();
  if (*v32)
  {
    if (v43 >= 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if (v43 >= 0)
      v34 = v43 & 0x7F;
    else
      v34 = (size_t)__p[1];
    llvm::timeTraceProfilerBegin(v33, v34, (uint64_t)&unk_1C872ACEA, 0);
  }
  if (v43 < 0)
    operator delete(__p[0]);
  if (v41 < 0)
    operator delete(v40[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v15 + 24))(v15, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v32)
  {
    sub_1C6392DC0(*v32);
    if ((v24 & 1) != 0)
      goto LABEL_58;
  }
  else if ((v24 & 1) != 0)
  {
    goto LABEL_58;
  }
  v38 = *(uint64_t **)(a1 + 80);
  __p[0] = (void *)v19;
  v40[0] = 0;
  if ((sub_1C614F7B0(v38, __p, v40) & 1) == 0)
  {
    v39 = *(uint64_t **)(a1 + 80);
    __p[0] = (void *)sub_1C5676C10((llvm::IRPosition *)&v44);
    v40[0] = 0;
    if ((sub_1C614F7B0(v39, __p, v40) & 1) == 0)
      goto LABEL_59;
  }
LABEL_58:
  v35 = *(_DWORD *)(a1 + 4368);
  if (v35 == 2)
  {
LABEL_59:
    v36 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    return v15;
  }
  if (a7)
  {
    *(_DWORD *)(a1 + 4368) = 1;
    llvm::Attributor::updateAA((llvm::Attributor *)a1, v15);
    *(_DWORD *)(a1 + 4368) = v35;
  }
  if (a4)
  {
    v37 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37))
      llvm::Attributor::recordDependence(a1, (uint64_t)v15, a4, a5);
  }
  return v15;
}

uint64_t sub_1C5689038(uint64_t a1, __int128 *a2, uint64_t a3, int a4, char a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  __int128 v15;
  uint64_t *v16;

  v9 = *a2;
  v14 = &llvm::AADereferenceable::ID;
  v15 = v9;
  v16 = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0)
    return 0;
  v10 = v16[3];
  if (v10)
  {
    if (a3
      && a4 != 2
      && (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v16[3]),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11)))
    {
      llvm::Attributor::recordDependence(a1, v10, a3, a4);
      if ((a5 & 1) != 0)
        return v10;
    }
    else if ((a5 & 1) != 0)
    {
      return v10;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
      return 0;
  }
  return v10;
}

llvm::AbstractAttribute *sub_1C5689124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v12;
  llvm::AbstractAttribute *v13;
  llvm::Attributor *v14;
  llvm::AbstractAttribute *v15;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  _BOOL4 v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void **v30;
  void **v31;
  uint64_t *v32;
  void **v33;
  size_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  void *v40[2];
  char v41;
  void *__p[2];
  char v43;
  __int128 v44;

  if (byte_1ED831CE0)
    v12 = a3;
  else
    v12 = 0;
  *(_QWORD *)&v44 = a2;
  *((_QWORD *)&v44 + 1) = v12;
  v13 = (llvm::AbstractAttribute *)sub_1C5689510(a1, &v44, a4, a5, 1);
  v15 = v13;
  if (v13 && a6)
  {
    if (*(_DWORD *)(a1 + 4368) == 1)
      llvm::Attributor::updateAA((llvm::Attributor *)a1, v13);
    return v15;
  }
  if (v13)
    return v15;
  v15 = (llvm::AbstractAttribute *)llvm::AANoCapture::createForPosition((llvm::AANoCapture *)&v44, (const llvm::IRPosition *)a1, v14);
  sub_1C62897A4(a1, (uint64_t)v15);
  v17 = *(uint64_t **)(a1 + 5480);
  if (v17)
  {
    __p[0] = &llvm::AANoCapture::ID;
    v40[0] = 0;
    v18 = sub_1C614F7B0(v17, __p, v40) ^ 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = v44 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v44 & 3) == 0)
    v19 = *(_QWORD *)(v19 + 24);
  v20 = *(unsigned __int8 *)(v19 + 16);
  if (!*(_BYTE *)(v19 + 16))
    goto LABEL_20;
  if (v20 == 21)
  {
    v21 = (uint64_t *)(v19 + 24);
  }
  else
  {
    if (v20 < 0x1C)
    {
      v19 = 0;
      goto LABEL_27;
    }
    v21 = (uint64_t *)(*(_QWORD *)(v19 + 40) + 56);
  }
  v19 = *v21;
  if (!*v21)
  {
LABEL_27:
    v24 = 1;
    goto LABEL_32;
  }
LABEL_20:
  v22 = *(_QWORD *)(v19 + 112);
  if (v22 && ((*(_BYTE *)(v22 + 14) & 2) != 0 || (*(_BYTE *)(v22 + 17) & 8) != 0))
  {
    v23 = 1;
  }
  else if (*(_BYTE *)(a1 + 5464))
  {
    v23 = 0;
  }
  else
  {
    v25 = *(_QWORD **)(a1 + 88);
    v26 = sub_1C477672C((uint64_t)v25, v19);
    v27 = v25[1];
    v28 = 16;
    if (v27 == *v25)
      v28 = 20;
    v23 = v26 == (_QWORD *)(v27 + 8 * *(unsigned int *)((char *)v25 + v28));
  }
  v24 = 0;
  LOBYTE(v18) = (v23 | v18) != 0;
LABEL_32:
  if ((v18 & 1) != 0 || *(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
    goto LABEL_59;
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v15 + 72))(v40, v15);
  if (v41 >= 0)
    v29 = v41 & 0x7F;
  else
    v29 = (size_t)v40[1];
  v30 = __p;
  sub_1C484371C((uint64_t)__p, v29 + 12);
  if (v43 < 0)
    v30 = (void **)__p[0];
  if (v29)
  {
    if (v41 >= 0)
      v31 = v40;
    else
      v31 = (void **)v40[0];
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, "::initialize");
  v32 = (uint64_t *)off_1EF8EEB50();
  if (*v32)
  {
    if (v43 >= 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if (v43 >= 0)
      v34 = v43 & 0x7F;
    else
      v34 = (size_t)__p[1];
    llvm::timeTraceProfilerBegin(v33, v34, (uint64_t)&unk_1C872ACEA, 0);
  }
  if (v43 < 0)
    operator delete(__p[0]);
  if (v41 < 0)
    operator delete(v40[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v15 + 24))(v15, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v32)
  {
    sub_1C6392DC0(*v32);
    if ((v24 & 1) != 0)
      goto LABEL_58;
  }
  else if ((v24 & 1) != 0)
  {
    goto LABEL_58;
  }
  v38 = *(uint64_t **)(a1 + 80);
  __p[0] = (void *)v19;
  v40[0] = 0;
  if ((sub_1C614F7B0(v38, __p, v40) & 1) == 0)
  {
    v39 = *(uint64_t **)(a1 + 80);
    __p[0] = (void *)sub_1C5676C10((llvm::IRPosition *)&v44);
    v40[0] = 0;
    if ((sub_1C614F7B0(v39, __p, v40) & 1) == 0)
      goto LABEL_59;
  }
LABEL_58:
  v35 = *(_DWORD *)(a1 + 4368);
  if (v35 == 2)
  {
LABEL_59:
    v36 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    return v15;
  }
  if (a7)
  {
    *(_DWORD *)(a1 + 4368) = 1;
    llvm::Attributor::updateAA((llvm::Attributor *)a1, v15);
    *(_DWORD *)(a1 + 4368) = v35;
  }
  if (a4)
  {
    v37 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37))
      llvm::Attributor::recordDependence(a1, (uint64_t)v15, a4, a5);
  }
  return v15;
}

uint64_t sub_1C5689510(uint64_t a1, __int128 *a2, uint64_t a3, int a4, char a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  __int128 v15;
  uint64_t *v16;

  v9 = *a2;
  v14 = &llvm::AANoCapture::ID;
  v15 = v9;
  v16 = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0)
    return 0;
  v10 = v16[3];
  if (v10)
  {
    if (a3
      && a4 != 2
      && (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v16[3]),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11)))
    {
      llvm::Attributor::recordDependence(a1, v10, a3, a4);
      if ((a5 & 1) != 0)
        return v10;
    }
    else if ((a5 & 1) != 0)
    {
      return v10;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
      return 0;
  }
  return v10;
}

llvm::AbstractAttribute *sub_1C56895FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v12;
  llvm::AbstractAttribute *v13;
  llvm::Attributor *v14;
  llvm::AbstractAttribute *v15;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  _BOOL4 v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void **v30;
  void **v31;
  uint64_t *v32;
  void **v33;
  size_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  void *v40[2];
  char v41;
  void *__p[2];
  char v43;
  __int128 v44;

  if (byte_1ED831CE0)
    v12 = a3;
  else
    v12 = 0;
  *(_QWORD *)&v44 = a2;
  *((_QWORD *)&v44 + 1) = v12;
  v13 = (llvm::AbstractAttribute *)sub_1C56899E8(a1, &v44, a4, a5, 1);
  v15 = v13;
  if (v13 && a6)
  {
    if (*(_DWORD *)(a1 + 4368) == 1)
      llvm::Attributor::updateAA((llvm::Attributor *)a1, v13);
    return v15;
  }
  if (v13)
    return v15;
  v15 = (llvm::AbstractAttribute *)llvm::AAPrivatizablePtr::createForPosition((llvm::AAPrivatizablePtr *)&v44, (const llvm::IRPosition *)a1, v14);
  sub_1C6289810(a1, (uint64_t)v15);
  v17 = *(uint64_t **)(a1 + 5480);
  if (v17)
  {
    __p[0] = &llvm::AAPrivatizablePtr::ID;
    v40[0] = 0;
    v18 = sub_1C614F7B0(v17, __p, v40) ^ 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = v44 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v44 & 3) == 0)
    v19 = *(_QWORD *)(v19 + 24);
  v20 = *(unsigned __int8 *)(v19 + 16);
  if (!*(_BYTE *)(v19 + 16))
    goto LABEL_20;
  if (v20 == 21)
  {
    v21 = (uint64_t *)(v19 + 24);
  }
  else
  {
    if (v20 < 0x1C)
    {
      v19 = 0;
      goto LABEL_27;
    }
    v21 = (uint64_t *)(*(_QWORD *)(v19 + 40) + 56);
  }
  v19 = *v21;
  if (!*v21)
  {
LABEL_27:
    v24 = 1;
    goto LABEL_32;
  }
LABEL_20:
  v22 = *(_QWORD *)(v19 + 112);
  if (v22 && ((*(_BYTE *)(v22 + 14) & 2) != 0 || (*(_BYTE *)(v22 + 17) & 8) != 0))
  {
    v23 = 1;
  }
  else if (*(_BYTE *)(a1 + 5464))
  {
    v23 = 0;
  }
  else
  {
    v25 = *(_QWORD **)(a1 + 88);
    v26 = sub_1C477672C((uint64_t)v25, v19);
    v27 = v25[1];
    v28 = 16;
    if (v27 == *v25)
      v28 = 20;
    v23 = v26 == (_QWORD *)(v27 + 8 * *(unsigned int *)((char *)v25 + v28));
  }
  v24 = 0;
  LOBYTE(v18) = (v23 | v18) != 0;
LABEL_32:
  if ((v18 & 1) != 0 || *(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
    goto LABEL_59;
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v15 + 72))(v40, v15);
  if (v41 >= 0)
    v29 = v41 & 0x7F;
  else
    v29 = (size_t)v40[1];
  v30 = __p;
  sub_1C484371C((uint64_t)__p, v29 + 12);
  if (v43 < 0)
    v30 = (void **)__p[0];
  if (v29)
  {
    if (v41 >= 0)
      v31 = v40;
    else
      v31 = (void **)v40[0];
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, "::initialize");
  v32 = (uint64_t *)off_1EF8EEB50();
  if (*v32)
  {
    if (v43 >= 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if (v43 >= 0)
      v34 = v43 & 0x7F;
    else
      v34 = (size_t)__p[1];
    llvm::timeTraceProfilerBegin(v33, v34, (uint64_t)&unk_1C872ACEA, 0);
  }
  if (v43 < 0)
    operator delete(__p[0]);
  if (v41 < 0)
    operator delete(v40[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v15 + 24))(v15, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v32)
  {
    sub_1C6392DC0(*v32);
    if ((v24 & 1) != 0)
      goto LABEL_58;
  }
  else if ((v24 & 1) != 0)
  {
    goto LABEL_58;
  }
  v38 = *(uint64_t **)(a1 + 80);
  __p[0] = (void *)v19;
  v40[0] = 0;
  if ((sub_1C614F7B0(v38, __p, v40) & 1) == 0)
  {
    v39 = *(uint64_t **)(a1 + 80);
    __p[0] = (void *)sub_1C5676C10((llvm::IRPosition *)&v44);
    v40[0] = 0;
    if ((sub_1C614F7B0(v39, __p, v40) & 1) == 0)
      goto LABEL_59;
  }
LABEL_58:
  v35 = *(_DWORD *)(a1 + 4368);
  if (v35 == 2)
  {
LABEL_59:
    v36 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    return v15;
  }
  if (a7)
  {
    *(_DWORD *)(a1 + 4368) = 1;
    llvm::Attributor::updateAA((llvm::Attributor *)a1, v15);
    *(_DWORD *)(a1 + 4368) = v35;
  }
  if (a4)
  {
    v37 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 40))(v15);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37))
      llvm::Attributor::recordDependence(a1, (uint64_t)v15, a4, a5);
  }
  return v15;
}

uint64_t sub_1C56899E8(uint64_t a1, __int128 *a2, uint64_t a3, int a4, char a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  __int128 v15;
  uint64_t *v16;

  v9 = *a2;
  v14 = &llvm::AAPrivatizablePtr::ID;
  v15 = v9;
  v16 = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0)
    return 0;
  v10 = v16[3];
  if (v10)
  {
    if (a3
      && a4 != 2
      && (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v16[3]),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11)))
    {
      llvm::Attributor::recordDependence(a1, v10, a3, a4);
      if ((a5 & 1) != 0)
        return v10;
    }
    else if ((a5 & 1) != 0)
    {
      return v10;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
      return 0;
  }
  return v10;
}

uint64_t sub_1C5689AD4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  llvm::Attributor *v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;

  v2 = a2;
  v3 = (llvm::Attributor *)*a1;
  v4 = *(unsigned __int8 *)(a2 + 16);
  if (!*(_BYTE *)(a2 + 16)
    || v4 >= 0x1C
    && ((v5 = v4 - 33, v6 = v5 > 0x33, v7 = (1 << v5) & 0x8000000000041, !v6) ? (v8 = v7 == 0) : (v8 = 1), !v8))
  {
    a2 |= 2uLL;
  }
  sub_1C5677D4C(*a1, a2, 0, 0, 2, 0, 1);
  v9 = *(_QWORD *)(v2 - 32);
  if (!v9 || *(_BYTE *)(v9 + 16) || *(_QWORD *)(v9 + 24) != *(_QWORD *)(v2 + 72))
    return 1;
  sub_1C5686F3C((uint64_t)v3, v2, 0, 0, 2, 0, 1);
  if (byte_1ED8096C8)
    goto LABEL_12;
  if (!*(_BYTE *)(v9 + 16))
  {
    if (*(_QWORD *)(v9 + 72) == v9 + 72 && (*(_BYTE *)(v9 + 34) & 0x80) == 0)
    {
      v22 = *(_DWORD *)(v9 + 20);
      goto LABEL_36;
    }
LABEL_12:
    if (*(_BYTE *)(**(_QWORD **)(*(_QWORD *)(v9 + 24) + 16) + 8) != 7 && *(_QWORD *)(v2 + 8) != 0)
      sub_1C5677180((uint64_t)v3, v2 | 1, 0, 0, 2, 0, 1);
    v11 = *(unsigned __int8 *)(v2 + 16);
    if (v11 == 84)
    {
      v12 = 0;
    }
    else if (v11 == 39)
    {
      v12 = (*(_DWORD *)(v2 + 80) + 1);
    }
    else
    {
      v12 = 2;
    }
    v13 = 0;
    v14 = *(_DWORD *)(v2 + 20);
    v15 = -(uint64_t)(v14 & 0x7FFFFFF);
    if (v14 < 0)
    {
      v39 = v2 - 32 * (v14 & 0x7FFFFFF);
      v40 = *(_QWORD *)(v39 - 8);
      if ((v40 & 0xFFFFFFFF0) != 0)
        v13 = (*(_DWORD *)(v39 - 12) - *(_DWORD *)(v39 - v40));
      else
        v13 = 0;
    }
    v16 = -32 * v12 - 32 * v13 - 32 * v15 - 32;
    if ((int)(v16 >> 5) >= 1)
    {
      v17 = 0;
      v18 = v16 & 0x1FFFFFFFE0;
      do
      {
        v19 = *(_DWORD *)(v2 + 20);
        if ((v19 & 0x40000000) != 0)
          v20 = *(_QWORD *)(v2 - 8);
        else
          v20 = v2 - 32 * (v19 & 0x7FFFFFF);
        v42 = (v17 + v20) | 3;
        v43 = 0;
        sub_1C5677D4C((uint64_t)v3, v42, 0, 0, 2, 0, 1);
        v41 = 0;
        llvm::Attributor::getAssumedSimplified(v3, (const llvm::IRPosition *)&v42, 0, &v41);
        sub_1C56878EC((uint64_t)v3, v42, v43, 0, 2, 0, 1);
        if (*(_BYTE *)(**(_QWORD **)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + v17) + 8) == 15)
        {
          sub_1C568829C((uint64_t)v3, v42, v43, 0, 2, 0, 1);
          sub_1C5689124((uint64_t)v3, v42, v43, 0, 2, 0, 1);
          sub_1C5688774((uint64_t)v3, v42, v43, 0, 2, 0, 1);
          sub_1C5688C4C((uint64_t)v3, v42, v43, 0, 2, 0, 1);
          sub_1C5687DC4((uint64_t)v3, v42, v43, 0, 2, 0, 1);
          sub_1C5680B34((uint64_t)v3, v42, v43, 0, 2, 0, 1);
          sub_1C568658C((uint64_t)v3, v42, v43, 0, 2, 0, 1);
        }
        v17 += 32;
      }
      while (v18 != v17);
    }
    return 1;
  }
  if (*(_BYTE *)(v9 + 16) != 3)
    goto LABEL_12;
  v22 = *(_DWORD *)(v9 + 20);
  if ((v22 & 0x7FFFFFF) != 0)
    goto LABEL_12;
LABEL_36:
  if ((v22 & 0x20000000) == 0)
    return 1;
  v23 = ***(_QWORD ***)v9;
  v42 = v9;
  v24 = *(_DWORD *)(v23 + 2496);
  if (!v24)
  {
    v37 = 0;
LABEL_57:
    v28 = sub_1C541AB24(v23 + 2480, (uint64_t)&v42, &v42, v37);
    v38 = v42;
    v28[3] = 0;
    v28[4] = 0;
    *v28 = v38;
    v28[1] = v28 + 3;
    v28[2] = 0x100000000;
    goto LABEL_47;
  }
  v25 = *(_QWORD *)(v23 + 2480);
  v26 = v24 - 1;
  v27 = v26 & ((v9 >> 4) ^ (v9 >> 9));
  v28 = (_QWORD *)(v25 + 40 * v27);
  v29 = *v28;
  if (*v28 != v9)
  {
    v30 = 0;
    v31 = 1;
    while (v29 != -4096)
    {
      if (v30)
        v32 = 0;
      else
        v32 = v29 == -8192;
      if (v32)
        v30 = v28;
      v33 = v27 + v31++;
      v27 = v33 & v26;
      v28 = (_QWORD *)(v25 + 40 * v27);
      v29 = *v28;
      if (*v28 == v9)
        goto LABEL_47;
    }
    if (v30)
      v37 = v30;
    else
      v37 = v28;
    goto LABEL_57;
  }
LABEL_47:
  v34 = *((unsigned int *)v28 + 4);
  if ((_DWORD)v34)
  {
    v35 = (_QWORD *)(v28[1] + 8);
    v36 = 16 * v34;
    while (*((_DWORD *)v35 - 2) != 26)
    {
      v35 += 2;
      v36 -= 16;
      if (!v36)
        return 1;
    }
    if (*v35)
      goto LABEL_12;
  }
  return 1;
}

uint64_t sub_1C5689F24(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;

  v2 = a2;
  v3 = *a1;
  v4 = *(unsigned __int8 *)(a2 + 16);
  v5 = *(_QWORD *)(a2 - 32);
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v4 == 60)
  {
    if (v6 != 21)
    {
      if (v6 < 0x1C)
      {
        if (!*(_BYTE *)(v5 + 16))
          v5 |= 2uLL;
      }
      else
      {
        v7 = v6 - 33;
        v8 = v7 > 0x33;
        v9 = (1 << v7) & 0x8000000000041;
        if (!v8 && v9 != 0)
          v5 |= 1uLL;
      }
    }
    sub_1C5687DC4(*a1, v5, 0, 0, 2, 0, 1);
    if (byte_1ED8099C8)
    {
      v14 = *(unsigned __int8 *)(v2 + 16);
      if (v14 != 21)
      {
        if (v14 < 0x1C)
        {
          if (!*(_BYTE *)(v2 + 16))
            v2 |= 2uLL;
        }
        else
        {
          v15 = v14 - 33;
          if (v15 <= 0x33 && ((1 << v15) & 0x8000000000041) != 0)
            v2 |= 1uLL;
        }
      }
      sub_1C5677180(v3, v2, 0, 0, 2, 0, 1);
    }
  }
  else
  {
    if (v6 != 21)
    {
      if (v6 < 0x1C)
      {
        if (!*(_BYTE *)(v5 + 16))
          v5 |= 2uLL;
      }
      else
      {
        v11 = v6 - 33;
        v8 = v11 > 0x33;
        v12 = (1 << v11) & 0x8000000000041;
        if (!v8 && v12 != 0)
          v5 |= 1uLL;
      }
    }
    sub_1C5687DC4(*a1, v5, 0, 0, 2, 0, 1);
  }
  return 1;
}

unint64_t sub_1C568A094(_QWORD *a1)
{
  return *a1 & 0xFFFFFFFFFFFFFFF8;
}

void sub_1C568A0A0(llvm::raw_ostream **a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  unint64_t v6;
  void *__p;
  char v8;

  v6 = a4(a3);
  if (v6)
  {
    v8 = 0;
    LOBYTE(__p) = 0;
    sub_1C617C7A0(a1, a2, v6, (uint64_t)&__p);
    if (v8 < 0)
      operator delete(__p);
  }
}

double sub_1C568A104()
{
  uint64_t v0;
  double result;
  int v2;
  int *v3;
  int v4;
  int *v5;
  __n128 v6;

  dword_1ED809400 = sub_1C4D9A2C4("attributor-manifest", 0x13uLL, "Determine what attributes are manifested in the IR", 0x32uLL);
  LODWORD(v3) = 1;
  v6.n128_u64[0] = (unint64_t)"Maximal number of fixpoint iterations.";
  v6.n128_u64[1] = 38;
  v4 = 32;
  v5 = &v4;
  sub_1C6147F28((uint64_t)&dword_1ED809404[1], "attributor-max-iterations", &v3, &v6, &v5);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &dword_1ED809404[1], &dword_1C475E000);
  v4 = 1;
  v6.n128_u64[0] = (unint64_t)"Maximal number of chained initializations (to avoid stack overflows)";
  v6.n128_u64[1] = 68;
  v5 = &llvm::MaxInitializationChainLength;
  v2 = 1024;
  v3 = &v2;
  sub_1C6287DC4(&v4, (__int128 *)&v6, &v5, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4E9AEF0, &qword_1ED8094C8, &dword_1C475E000);
  LODWORD(v3) = 1;
  v6.n128_u64[0] = (unint64_t)"Verify that max-iterations is a tight bound for a fixpoint";
  v6.n128_u64[1] = 58;
  LOBYTE(v4) = 0;
  v5 = &v4;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED809588, "attributor-max-iterations-verify", &v3, &v6, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED809588, &dword_1C475E000);
  LODWORD(v3) = 1;
  v6.n128_u64[0] = (unint64_t)"Annotate call sites of function declarations.";
  v6.n128_u64[1] = 45;
  LOBYTE(v4) = 0;
  v5 = &v4;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED809648, "attributor-annotate-decl-cs", &v3, &v6, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED809648, &dword_1C475E000);
  LOBYTE(v3) = 1;
  v6.n128_u64[0] = (unint64_t)&v3;
  LODWORD(v5) = 1;
  sub_1C6287F18((char **)&v6, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED809708, &dword_1C475E000);
  LODWORD(v3) = 1;
  v6.n128_u64[0] = (unint64_t)"Allow the Attributor to create shallow wrappers for non-exact definitions.";
  v6.n128_u64[1] = 74;
  LOBYTE(v4) = 0;
  v5 = &v4;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED8097C8, "attributor-allow-shallow-wrappers", &v3, &v6, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8097C8, &dword_1C475E000);
  LODWORD(v3) = 1;
  v6.n128_u64[0] = (unint64_t)"Allow the Attributor to use IP information derived from non-exact functions via cloning";
  v6.n128_u64[1] = 87;
  LOBYTE(v4) = 0;
  v5 = &v4;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED809888, "attributor-allow-deep-wrappers", &v3, &v6, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED809888, &dword_1C475E000);
  LODWORD(v3) = 1;
  v6.n128_u64[0] = (unint64_t)"Dump the dependency graph to dot files.";
  v6.n128_u64[1] = 39;
  LOBYTE(v4) = 0;
  v5 = &v4;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED831A20, "attributor-dump-dep-graph", &v3, &v6, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED831A20, &dword_1C475E000);
  v0 = sub_1C47AD050((uint64_t)&qword_1ED809A08, 0, 0);
  qword_1ED809A90 = 0;
  qword_1ED809A88 = 0;
  unk_1ED809A98 = 0;
  qword_1ED809AA8 = 0;
  qword_1ED809AB8 = 0;
  qword_1ED809AB0 = 0;
  qword_1ED809AA0 = (uint64_t)&unk_1E819E950;
  byte_1ED809AC0 = 0;
  qword_1ED809A08 = (uint64_t)&unk_1E819E480;
  qword_1ED809AC8 = (uint64_t)&unk_1E819E970;
  qword_1ED809AD0 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED809AE8 = (uint64_t)&qword_1ED809AD0;
  llvm::cl::Option::setArgStr(v0, "attributor-depgraph-dot-filename-prefix", 0x27uLL);
  word_1ED809A12 = word_1ED809A12 & 0xFF9F | 0x20;
  qword_1ED809A28 = (uint64_t)"The prefix used for the CallGraph dot file names.";
  qword_1ED809A30 = 49;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED809A08);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED809A08, &dword_1C475E000);
  LODWORD(v3) = 1;
  v6.n128_u64[0] = (unint64_t)"View the dependency graph.";
  v6.n128_u64[1] = 26;
  LOBYTE(v4) = 0;
  v5 = &v4;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED831AE0, "attributor-view-dep-graph", &v3, &v6, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED831AE0, &dword_1C475E000);
  LODWORD(v3) = 1;
  v6.n128_u64[0] = (unint64_t)"Print attribute dependencies";
  v6.n128_u64[1] = 28;
  LOBYTE(v4) = 0;
  v5 = &v4;
  sub_1C6287FEC(&v3, &v6, (char **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED831BA0, &dword_1C475E000);
  LODWORD(v3) = 1;
  v6.n128_u64[0] = (unint64_t)"Allow the Attributor to do call site specific analysis";
  v6.n128_u64[1] = 54;
  LOBYTE(v4) = 0;
  v5 = &v4;
  sub_1C6288090(&v3, &v6, (char **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED831C60, &dword_1C475E000);
  LODWORD(v3) = 1;
  v6.n128_u64[0] = (unint64_t)"Print Attributor's internal call graph";
  v6.n128_u64[1] = 38;
  LOBYTE(v4) = 0;
  v5 = &v4;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED831D20, "attributor-print-call-graph", &v3, &v6, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED831D20, &dword_1C475E000);
  LODWORD(v3) = 1;
  v6.n128_u64[0] = (unint64_t)"Try to simplify all loads.";
  v6.n128_u64[1] = 26;
  LOBYTE(v4) = 1;
  v5 = &v4;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED809948, "attributor-simplify-all-loads", &v3, &v6, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED809948, &dword_1C475E000);
  llvm::IRPosition::EmptyKey = xmmword_1C8660040;
  result = NAN;
  llvm::IRPosition::TombstoneKey = xmmword_1C8660050;
  return result;
}

uint64_t llvm::AA::getAssumedUnderlyingObjects(llvm::Attributor *a1, uint64_t a2, uint64_t a3, const llvm::AbstractAttribute *a4, uint64_t a5, BOOL *a6, char a7)
{
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t i;
  unint64_t v18;
  int v19;
  unsigned int v20;
  char *v21;
  llvm *v22;
  unint64_t v23;
  uint64_t UnderlyingObject;
  llvm::Value *v25;
  BOOL v26;
  uint64_t v27;
  char *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v33;
  int v34;
  llvm::Argument *v35;
  int v36;
  char v37;
  int v38;
  unint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v44;
  char v45;
  unint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  void *v49;
  unint64_t AssumedSimplified;
  char v51;
  unsigned int v52;
  _QWORD *v53;
  llvm::UndefValue *AssumedConstant;
  char v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  char *v65;
  uint64_t *v66;
  char *v67;
  __int128 v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  llvm::AbstractAttribute **v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  int64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  unsigned int v104;
  _QWORD *v105;
  unsigned int v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  int64_t v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  int64x2_t v115;
  unint64_t v116;
  uint64_t v117;
  char v118;
  llvm::AA *v119;
  _BYTE *v121;
  _BYTE *v122;
  uint64_t v123;
  int v124;
  _BYTE v125[71];
  char v126;
  unint64_t v127[2];
  _QWORD v128[2];
  uint64_t v129;
  int v130;
  uint64_t v131;
  int64x2_t v132;
  int64x2_t v133;
  void *v134;
  uint64_t v135;
  _BYTE v136[32];
  void *__src;
  _OWORD v138[2];
  void *v139;
  uint64_t v140;
  _BYTE v141[32];
  void *v142;
  unsigned int v143;
  unsigned int v144;
  _QWORD v145[32];
  void *v146[2];
  _QWORD v147[33];
  _QWORD *v148[2];
  _QWORD v149[9];
  void *v150;
  uint64_t v151;
  _QWORD v152[14];

  v152[12] = *MEMORY[0x1E0C80C00];
  v121 = v125;
  v122 = v125;
  v123 = 8;
  v124 = 0;
  v12 = *(unsigned __int8 *)(a2 + 16);
  if (v12 != 21)
  {
    if (v12 < 0x1C)
    {
      if (!*(_BYTE *)(a2 + 16))
        a2 |= 2uLL;
    }
    else
    {
      v13 = v12 - 33;
      v14 = v13 > 0x33;
      v15 = (1 << v13) & 0x8000000000041;
      if (!v14 && v15 != 0)
        a2 |= 1uLL;
    }
  }
  v128[0] = a2;
  v128[1] = 0;
  v149[0] = 1;
  for (i = 1; i != 9; i += 2)
    v149[i] = -4096;
  v150 = v152;
  v151 = 0x400000000;
  v18 = sub_1C6284150((llvm::IRPosition *)v128);
  v19 = 0;
  v146[0] = v147;
  v146[1] = (void *)0x1000000000;
  v148[1] = 0;
  v148[0] = 0;
  v147[32] = v148;
  v142 = v145;
  v144 = 16;
  v145[0] = v18;
  v145[1] = a5;
  v116 = v18;
  v115 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v20 = 1;
  v117 = (uint64_t)a4;
  v119 = a1;
  v118 = a7;
  do
  {
    v21 = (char *)v142 + 16 * v20;
    v22 = (llvm *)*((_QWORD *)v21 - 2);
    v23 = *((_QWORD *)v21 - 1);
    v143 = v20 - 1;
    v127[0] = (unint64_t)v22;
    v127[1] = v23;
    UnderlyingObject = (uint64_t)llvm::getUnderlyingObject(v22, (const llvm::Value *)6);
    if ((sub_1C568F35C((uint64_t)v146, v127) & 0x100000000) == 0)
      goto LABEL_99;
    if (v19 >= 32)
      goto LABEL_188;
    ++v19;
    if (*(_BYTE *)(*(_QWORD *)UnderlyingObject + 8) != 15)
    {
      v29 = *(unsigned __int8 *)(UnderlyingObject + 16);
      if (v29 < 0x1C)
        goto LABEL_32;
      v30 = v29 - 33;
      v14 = v30 > 0x33;
      v31 = (1 << v30) & 0x8000000000041;
      if (v14 || v31 == 0)
        goto LABEL_32;
      v33 = *(_QWORD *)(UnderlyingObject - 32);
      if (!v33 || *(_BYTE *)(v33 + 16) || *(_QWORD *)(v33 + 24) != *(_QWORD *)(UnderlyingObject + 72))
        goto LABEL_32;
      if ((*(_WORD *)(v33 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments(*(llvm::Function **)(UnderlyingObject - 32));
        v71 = *(_QWORD *)(v33 + 88);
        if ((*(_WORD *)(v33 + 18) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments((llvm::Function *)v33);
          v72 = *(_QWORD *)(v33 + 88);
LABEL_104:
          v73 = v72 + 40 * *(_QWORD *)(v33 + 96);
          while (v71 != v73)
          {
            v74 = *(_QWORD *)(*(_QWORD *)(v71 + 24) + 112);
            if (v74)
            {
              v75 = *(unsigned int *)(v71 + 32);
              if ((v75 + 2) < *(_DWORD *)(v74 + 8))
              {
                v76 = *(_QWORD *)(v74 + 8 * (v75 + 2) + 40);
                if (v76)
                {
                  if ((*(_BYTE *)(v76 + 17) & 0x40) != 0)
                  {
                    v25 = *(llvm::Value **)(UnderlyingObject
                                          - 32 * (*(_DWORD *)(UnderlyingObject + 20) & 0x7FFFFFF)
                                          + 32 * v75);
                    goto LABEL_17;
                  }
                }
              }
            }
            v71 += 40;
          }
          goto LABEL_32;
        }
      }
      else
      {
        v71 = *(_QWORD *)(v33 + 88);
      }
      v72 = v71;
      goto LABEL_104;
    }
    v25 = llvm::Value::stripPointerCasts((llvm::Value *)UnderlyingObject);
LABEL_17:
    if (v25)
      v26 = v25 == (llvm::Value *)UnderlyingObject;
    else
      v26 = 1;
    if (!v26)
    {
LABEL_21:
      v27 = v143;
      if (v143 >= (unint64_t)v144)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, (uint64_t)v145, v143 + 1, 16);
        v27 = v143;
      }
      v28 = (char *)v142 + 16 * v27;
      *(_QWORD *)v28 = v25;
      goto LABEL_97;
    }
LABEL_32:
    v34 = *(unsigned __int8 *)(UnderlyingObject + 16);
    if (v34 == 85)
    {
      v39 = *(_QWORD *)(UnderlyingObject - 96);
      v40 = *(unsigned __int8 *)(v39 + 16);
      if (v40 != 21)
      {
        if (v40 < 0x1C)
        {
          if (!*(_BYTE *)(v39 + 16))
            v39 |= 2uLL;
        }
        else
        {
          v41 = v40 - 33;
          v14 = v41 > 0x33;
          v42 = (1 << v41) & 0x8000000000041;
          if (!v14 && v42 != 0)
            v39 |= 1uLL;
        }
      }
      __src = (void *)v39;
      *(_QWORD *)&v138[0] = 0;
      AssumedConstant = llvm::Attributor::getAssumedConstant(a1, (const llvm::IRPosition *)&__src, a4, a6);
      if (v55)
      {
        if (!AssumedConstant)
          goto LABEL_82;
        v56 = *((unsigned __int8 *)AssumedConstant + 16);
        if ((v56 - 11) < 2)
          goto LABEL_99;
        if (v56 == 16)
        {
          v57 = *((_DWORD *)AssumedConstant + 8);
          if (v57 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase((llvm::UndefValue *)((char *)AssumedConstant + 24)) == v57)
              goto LABEL_92;
LABEL_81:
            v58 = *(_QWORD *)(UnderlyingObject - 64);
          }
          else
          {
            if (*((_QWORD *)AssumedConstant + 3))
              goto LABEL_81;
LABEL_92:
            v58 = *(_QWORD *)(UnderlyingObject - 32);
          }
          v70 = v143;
          if (v143 >= (unint64_t)v144)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, (uint64_t)v145, v143 + 1, 16);
            v70 = v143;
          }
          v28 = (char *)v142 + 16 * v70;
        }
        else
        {
LABEL_82:
          v59 = *(_QWORD *)(UnderlyingObject - 64);
          v60 = v143;
          if (v143 >= (unint64_t)v144)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, (uint64_t)v145, v143 + 1, 16);
            v60 = v143;
          }
          v61 = (char *)v142 + 16 * v60;
          *v61 = v59;
          v61[1] = v23;
          v62 = v143 + 1;
          v143 = v62;
          v58 = *(_QWORD *)(UnderlyingObject - 32);
          if (v62 >= v144)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, (uint64_t)v145, v62 + 1, 16);
            LODWORD(v62) = v143;
          }
          v28 = (char *)v142 + 16 * v62;
        }
        *(_QWORD *)v28 = v58;
LABEL_97:
        *((_QWORD *)v28 + 1) = v23;
        v47 = &v143;
        goto LABEL_98;
      }
    }
    else
    {
      if (v34 == 83)
      {
        v63 = *(_QWORD *)(*(_QWORD *)(UnderlyingObject + 40) + 56);
        v129 = v63;
        v130 = 0;
        sub_1C6281EE8((uint64_t)&__src, (uint64_t)v149, &v129, &v130);
        v64 = __src;
        if (BYTE8(v138[0]))
        {
          v132.i32[3] = 0;
          *(__int32 *)((char *)&v132.i32[2] + 1) = 0;
          v131 = v63;
          v132.i64[0] = 0;
          v132.i8[8] = 0;
          v65 = (char *)v150;
          if (v151 >= HIDWORD(v151))
          {
            v109 = v151 + 1;
            if (v150 <= &v131 && (char *)v150 + 24 * v151 > (char *)&v131)
            {
              v110 = (char *)&v131 - (_BYTE *)v150;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, (uint64_t)v152, v109, 24);
              v65 = (char *)v150;
              v66 = (uint64_t *)((char *)v150 + v110);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, (uint64_t)v152, v109, 24);
              v66 = &v131;
              v65 = (char *)v150;
            }
          }
          else
          {
            v66 = &v131;
          }
          v67 = &v65[24 * v151];
          v68 = *(_OWORD *)v66;
          *((_QWORD *)v67 + 2) = v66[2];
          *(_OWORD *)v67 = v68;
          v69 = v151;
          LODWORD(v151) = v151 + 1;
          v64[2] = v69;
        }
        else
        {
          v69 = *((_DWORD *)__src + 2);
        }
        v77 = (char *)v150;
        v78 = (char *)v150 + 24 * v69;
        v80 = *((_QWORD *)v78 + 1);
        v79 = (llvm::AbstractAttribute **)(v78 + 8);
        if (!v80)
          *v79 = sub_1C5677D4C((uint64_t)a1, v63, 0, v117, 2, 0, 1);
        v81 = *(_DWORD *)(UnderlyingObject + 20) & 0x7FFFFFF;
        if ((_DWORD)v81)
        {
          v82 = 0;
          v83 = 0;
          v84 = &v77[24 * v69 + 16];
          v85 = 8 * v81;
          do
          {
            v86 = *(_DWORD *)(UnderlyingObject + 20);
            if ((v86 & 0x40000000) != 0)
              v87 = *(_QWORD *)(UnderlyingObject - 8);
            else
              v87 = UnderlyingObject - 32 * (v86 & 0x7FFFFFF);
            v88 = *(_QWORD *)(v87 + 32 * *(unsigned int *)(UnderlyingObject + 60) + v83);
            if ((*(unsigned int (**)(llvm::AbstractAttribute *, uint64_t, _QWORD))(*(_QWORD *)*v79 + 168))(*v79, v88, *(_QWORD *)(UnderlyingObject + 40)))
            {
              *v84 = 1;
              *a6 |= (*(unsigned __int8 (**)(uint64_t))(*((_QWORD *)*v79 + 4) + 24))((uint64_t)*v79 + 32) ^ 1;
            }
            else
            {
              v89 = *(_DWORD *)(UnderlyingObject + 20);
              if ((v89 & 0x40000000) != 0)
                v90 = *(_QWORD *)(UnderlyingObject - 8);
              else
                v90 = UnderlyingObject - 32 * (v89 & 0x7FFFFFF);
              v91 = *(_QWORD *)(v88 + 40);
              if (v91 == v88 + 40)
              {
                v93 = 0;
              }
              else
              {
                if (v91)
                  v92 = v91 - 24;
                else
                  v92 = 0;
                if (*(unsigned __int8 *)(v92 + 16) - 29 >= 0xB)
                  v93 = 0;
                else
                  v93 = v92;
              }
              v94 = *(_QWORD *)(v90 + v82);
              v95 = v143;
              if (v143 >= (unint64_t)v144)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, (uint64_t)v145, v143 + 1, 16);
                v95 = v143;
              }
              v96 = (char *)v142 + 16 * v95;
              *v96 = v94;
              v96[1] = v93;
              ++v143;
            }
            v83 += 8;
            v82 += 32;
          }
          while (v85 != v83);
          a4 = (const llvm::AbstractAttribute *)v117;
          a1 = v119;
          a7 = v118;
        }
        else
        {
          a4 = (const llvm::AbstractAttribute *)v117;
        }
        goto LABEL_99;
      }
      if (v34 == 21)
        v35 = (llvm::Argument *)UnderlyingObject;
      else
        v35 = 0;
      v129 = (uint64_t)v35;
      if ((a7 & 2) != 0 && v35 && (llvm::Argument::hasPassPointeeByValueCopyAttr(v35) & 1) == 0)
      {
        __src = (char *)v138 + 8;
        *(_QWORD *)&v138[0] = 0x300000000;
        v126 = 0;
        v131 = (uint64_t)&v129;
        v132.i64[0] = (uint64_t)&__src;
        v36 = llvm::Attributor::checkForAllCallSites((uint64_t)a1, (uint64_t (*)(uint64_t, uint64_t *))sub_1C56BD9AC, (uint64_t)&v131, *(_QWORD *)(v129 + 24), 1, (uint64_t)a4, &v126);
        v37 = v36;
        v38 = 0;
        if (v36)
        {
          sub_1C612E234((unsigned int *)&v142, __src, (_BYTE *)__src + 16 * LODWORD(v138[0]));
          v38 = 3;
        }
        if (__src != (char *)v138 + 8)
          free(__src);
        if ((v37 & 1) != 0)
          goto LABEL_45;
      }
      v44 = *(unsigned __int8 *)(UnderlyingObject + 16);
      if (v44 < 0x15)
        goto LABEL_55;
      if (v44 >= 0x1C && (v48 = v44 - 33, v48 <= 0x33) && ((1 << v48) & 0x8000000000041) != 0)
        v49 = (void *)(UnderlyingObject | 1);
      else
        v49 = (void *)UnderlyingObject;
      __src = v49;
      *(_QWORD *)&v138[0] = 0;
      AssumedSimplified = llvm::Attributor::getAssumedSimplified(a1, (const llvm::IRPosition *)&__src, a4, a6);
      if (v51)
      {
        v25 = (llvm::Value *)AssumedSimplified;
        if (AssumedSimplified && UnderlyingObject != AssumedSimplified)
        {
          if ((a7 & 2) != 0)
            goto LABEL_21;
          if (!v23)
            goto LABEL_21;
          v52 = *(unsigned __int8 *)(AssumedSimplified + 16);
          if (v52 < 0x15)
            goto LABEL_21;
          if (v52 >= 0x1C)
          {
            v53 = (_QWORD *)(*(_QWORD *)(AssumedSimplified + 40) + 56);
            goto LABEL_140;
          }
          if (v52 == 21)
          {
            v53 = (_QWORD *)(AssumedSimplified + 24);
LABEL_140:
            if (*v53 == *(_QWORD *)(*(_QWORD *)(v23 + 40) + 56))
              goto LABEL_21;
          }
        }
        if (*(_BYTE *)(UnderlyingObject + 16) != 60)
          goto LABEL_55;
        LOBYTE(v129) = 0;
        if (*(_QWORD *)(UnderlyingObject - 32) == v116)
        {
LABEL_179:
          a7 = v118;
LABEL_55:
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v121, UnderlyingObject);
          if (!v45)
            goto LABEL_99;
          v46 = *(unsigned int *)(a3 + 8);
          if (v46 >= *(unsigned int *)(a3 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v46 + 1, 8);
            v46 = *(unsigned int *)(a3 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v46) = UnderlyingObject;
          v47 = (unsigned int *)(a3 + 8);
LABEL_98:
          ++*v47;
          goto LABEL_99;
        }
        __src = (void *)1;
        v138[0] = v115;
        v138[1] = v115;
        v139 = v141;
        v140 = 0x400000000;
        v131 = 1;
        v132 = v115;
        v133 = v115;
        v134 = v136;
        v135 = 0x400000000;
        LODWORD(v97) = 1;
        if (llvm::AA::getPotentiallyLoadedValues(a1, UnderlyingObject, &__src, &v131, a4, &v129, 1))
        {
          if ((_DWORD)v140)
          {
            v98 = (int64_t *)v139;
            v99 = 8 * v140;
            do
            {
              LODWORD(v97) = 1;
              if (!llvm::AA::isDynamicallyUnique(v119, a4, *v98, (const llvm::Value *)1))
              {
                v38 = 0;
                a1 = v119;
                goto LABEL_171;
              }
              ++v98;
              v99 -= 8;
            }
            while (v99);
            v100 = (uint64_t *)v139;
            a1 = v119;
            if ((v118 & 2) != 0 || !v23)
            {
LABEL_159:
              if (!(_DWORD)v140)
                goto LABEL_166;
              v106 = v143;
              v97 = 8 * v140;
              do
              {
                v107 = *v100;
                if (v106 >= v144)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, (uint64_t)v145, v106 + 1, 16);
                  v106 = v143;
                }
                v108 = (char *)v142 + 16 * v106;
                *v108 = v107;
                v108[1] = v23;
                v106 = ++v143;
                ++v100;
                v97 -= 8;
              }
              while (v97);
              v38 = 3;
            }
            else
            {
              if (!(_DWORD)v140)
                goto LABEL_166;
              v101 = 8 * v140;
              v102 = (char *)v139;
              while (1)
              {
                v103 = *(_QWORD *)v102;
                v104 = *(unsigned __int8 *)(*(_QWORD *)v102 + 16);
                if (v104 >= 0x15)
                {
                  if (v104 >= 0x1C)
                  {
                    v105 = (_QWORD *)(*(_QWORD *)(v103 + 40) + 56);
                  }
                  else
                  {
                    if (v104 != 21)
                      break;
                    v105 = (_QWORD *)(v103 + 24);
                  }
                  if (*v105 != *(_QWORD *)(*(_QWORD *)(v23 + 40) + 56))
                    break;
                }
                v102 += 8;
                v101 -= 8;
                if (!v101)
                  goto LABEL_159;
              }
              v38 = 0;
              LODWORD(v97) = 1;
            }
          }
          else
          {
LABEL_166:
            LODWORD(v97) = 0;
            v38 = 3;
          }
        }
        else
        {
          v38 = 0;
        }
LABEL_171:
        if (v134 != v136)
          free(v134);
        if ((v131 & 1) == 0)
          MEMORY[0x1CAA32FB4](v132.i64[0], 8);
        if (v139 != v141)
          free(v139);
        if ((__src & 1) != 0)
        {
          if ((_DWORD)v97)
            goto LABEL_179;
        }
        else
        {
          MEMORY[0x1CAA32FB4](*(_QWORD *)&v138[0], 8);
          if ((_DWORD)v97)
            goto LABEL_179;
        }
        a7 = v118;
LABEL_45:
        if (v38 != 3)
        {
LABEL_188:
          v111 = 0;
          goto LABEL_194;
        }
      }
    }
LABEL_99:
    v20 = v143;
  }
  while (v143);
  if ((_DWORD)v151)
  {
    v112 = 24 * v151;
    v113 = (char *)v150 + 16;
    do
    {
      if (*v113)
        llvm::Attributor::recordDependence((uint64_t)a1, *((_QWORD *)v113 - 1), (uint64_t)a4, 1);
      v113 += 24;
      v112 -= 24;
    }
    while (v112);
    v111 = 1;
  }
  else
  {
    v111 = 1;
  }
LABEL_194:
  if (v142 != v145)
    free(v142);
  sub_1C6143384(v148[0]);
  if (v146[0] != v147)
    free(v146[0]);
  if (v150 != v152)
    free(v150);
  if ((v149[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v149[1], 8);
  if (v122 != v121)
    free(v122);
  return v111;
}

BOOL llvm::AANoSync::isNonRelaxedAtomic(llvm::AANoSync *this, const llvm::Instruction *a2)
{
  int v3;
  unsigned int v4;
  char v5;
  _BOOL8 result;
  char v7;
  int v8;
  _BOOL4 v9;

  v3 = *((unsigned __int8 *)this + 16);
  if (v3 == 60)
  {
LABEL_2:
    v4 = *((unsigned __int16 *)this + 9);
    if ((v4 & 0x380) != 0)
    {
      v5 = 7;
      return ((v4 >> v5) & 7) - 3 < 0xFFFFFFFE;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    result = 0;
    switch(v3)
    {
      case '=':
        goto LABEL_2;
      case '?':
        result = *((unsigned __int8 *)this + 60) != 0;
        break;
      case '@':
        v7 = *((_WORD *)this + 9);
        v8 = v7 & 0x1C;
        v9 = (v7 & 0xE0) != 64;
        result = v8 != 8 || v9;
        break;
      case 'A':
        v4 = *((unsigned __int16 *)this + 9);
        v5 = 1;
        return ((v4 >> v5) & 7) - 3 < 0xFFFFFFFE;
      default:
        return result;
    }
  }
  return result;
}

BOOL llvm::AANoSync::isNoSyncIntrinsic(llvm::AANoSync *this, const llvm::Instruction *a2)
{
  int v3;
  _BOOL8 result;
  uint64_t v5;
  llvm::APInt *v6;
  unsigned int v7;

  v3 = sub_1C4DE85D0((uint64_t)this);
  result = 0;
  if (this && v3)
  {
    v5 = ((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[12];
    v6 = (llvm::APInt *)(v5 + 24);
    v7 = *(_DWORD *)(v5 + 32);
    if (v7 > 0x40)
      return llvm::APInt::countLeadingZerosSlowCase(v6) == v7;
    else
      return *(_QWORD *)v6 == 0;
  }
  return result;
}

BOOL llvm::ValueSimplifyStateType::unionAssumed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::ConstantExpr *v4;
  uint64_t v5;
  BOOL v6;
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  v4 = llvm::AA::combineOptionalValuesInAAValueLatice((unsigned __int8 *)(a1 + 32), (uint64_t)v8, *(llvm::Value **)(a1 + 8));
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  if ((_BYTE)v5)
    v6 = v4 == 0;
  else
    v6 = 0;
  return !v6;
}

std::string *llvm::AAMemoryLocation::getMemoryLocationsAsStr@<X0>(std::string *this@<X0>, std::string *a2@<X8>)
{
  char v3;
  int v4;
  std::string::size_type size;
  std::string *v6;
  std::string::size_type v7;

  if (!(_BYTE)this)
  {
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = 10;
    strcpy((char *)a2, "all memory");
    return this;
  }
  v3 = (char)this;
  if ((_DWORD)this == 255)
  {
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = 9;
    strcpy((char *)a2, "no memory");
    return this;
  }
  *((_BYTE *)&a2->__r_.__value_.__s + 23) = 7;
  strcpy((char *)a2, "memory:");
  if ((this & 1) != 0)
  {
    if ((this & 2) != 0)
      goto LABEL_7;
  }
  else
  {
    this = std::string::append(a2, "stack,");
    if ((v3 & 2) != 0)
    {
LABEL_7:
      if ((v3 & 4) != 0)
        goto LABEL_8;
      goto LABEL_21;
    }
  }
  this = std::string::append(a2, "constant,");
  if ((v3 & 4) != 0)
  {
LABEL_8:
    if ((v3 & 8) != 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  this = std::string::append(a2, "internal global,");
  if ((v3 & 8) != 0)
  {
LABEL_9:
    if ((v3 & 0x10) != 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  this = std::string::append(a2, "external global,");
  if ((v3 & 0x10) != 0)
  {
LABEL_10:
    if ((v3 & 0x20) != 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  this = std::string::append(a2, "argument,");
  if ((v3 & 0x20) != 0)
  {
LABEL_11:
    if ((v3 & 0x40) != 0)
      goto LABEL_12;
LABEL_25:
    this = std::string::append(a2, "malloced,");
    if (v3 < 0)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_24:
  this = std::string::append(a2, "inaccessible,");
  if ((v3 & 0x40) == 0)
    goto LABEL_25;
LABEL_12:
  if ((v3 & 0x80) == 0)
LABEL_13:
    this = std::string::append(a2, "unknown,");
LABEL_14:
  v4 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  size = a2->__r_.__value_.__l.__size_;
  if (v4 < 0)
  {
    v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    v6 = a2;
  }
  v7 = size - 1;
  if (v4 < 0)
    a2->__r_.__value_.__l.__size_ = v7;
  else
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v7 & 0x7F;
  v6->__r_.__value_.__s.__data_[v7] = 0;
  return this;
}

llvm::raw_ostream *sub_1C568BB40(llvm::raw_ostream *a1, uint64_t a2, llvm::Twine *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  std::string *v7;
  size_t size;
  _DWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  std::string *v12;
  size_t v13;
  uint64_t v14;
  _BYTE *v15;
  _WORD *v16;
  void *__p;
  uint64_t v19;
  char v20;
  _QWORD v21[2];
  __int16 v22;
  std::string v23;

  v21[0] = a1;
  v21[1] = a2;
  v22 = 0;
  llvm::Twine::str(a3, &__p);
  v4 = v19;
  if (v20 >= 0)
    v4 = v20 & 0x7F;
  v5 = *((_QWORD *)a1 + 4);
  v6 = *((_QWORD *)a1 + 3) - v5;
  if (v4)
  {
    if (v6 > 8)
    {
      *(_BYTE *)(v5 + 8) = 34;
      *(_QWORD *)v5 = *(_QWORD *)"digraph \"";
      *((_QWORD *)a1 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(a1, "digraph \"", 9uLL);
    }
    llvm::DOT::EscapeString((char *)&__p, &v23);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v23;
    else
      v7 = (std::string *)v23.__r_.__value_.__r.__words[0];
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v23.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v23.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(a1, (const char *)v7, size);
    v9 = (_DWORD *)*((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 3) - (_QWORD)v9 > 3uLL)
    {
      *v9 = 175841314;
      *((_QWORD *)a1 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(a1, "\" {\n", 4uLL);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
  }
  else if (v6 > 0x11)
  {
    *(_WORD *)(v5 + 16) = 2683;
    *(_OWORD *)v5 = *(_OWORD *)"digraph unnamed {\n";
    *((_QWORD *)a1 + 4) += 18;
  }
  else
  {
    llvm::raw_ostream::write(a1, "digraph unnamed {\n", 0x12uLL);
  }
  v10 = v20 & 0x7F;
  if (v20 < 0)
    v10 = v19;
  if (v10)
  {
    v11 = (_QWORD *)*((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 3) - (_QWORD)v11 > 7uLL)
    {
      *v11 = 0x223D6C6562616C09;
      *((_QWORD *)a1 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(a1, "\tlabel=\"", 8uLL);
    }
    llvm::DOT::EscapeString((char *)&__p, &v23);
    v12 = (v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v23
        : (std::string *)v23.__r_.__value_.__r.__words[0];
    v13 = (v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? *((_BYTE *)&v23.__r_.__value_.__s + 23) & 0x7F
        : v23.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(a1, (const char *)v12, v13);
    v14 = *((_QWORD *)a1 + 4);
    if ((unint64_t)(*((_QWORD *)a1 + 3) - v14) > 2)
    {
      *(_BYTE *)(v14 + 2) = 10;
      *(_WORD *)v14 = 15138;
      *((_QWORD *)a1 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(a1, "\";\n", 3uLL);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
  }
  *((_BYTE *)&v23.__r_.__value_.__s + 23) = 0;
  v23.__r_.__value_.__s.__data_[0] = 0;
  llvm::raw_ostream::write(a1, (const char *)&v23, 0);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  v15 = (_BYTE *)*((_QWORD *)a1 + 4);
  if (*((_BYTE **)a1 + 3) == v15)
  {
    llvm::raw_ostream::write(a1, "\n", 1uLL);
  }
  else
  {
    *v15 = 10;
    ++*((_QWORD *)a1 + 4);
  }
  sub_1C6291684((uint64_t)v21);
  v16 = (_WORD *)*((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 3) - (_QWORD)v16 > 1uLL)
  {
    *v16 = 2685;
    *((_QWORD *)a1 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a1, "}\n", 2uLL);
  }
  if (v20 < 0)
    operator delete(__p);
  return a1;
}

unint64_t llvm::AAMemoryLocation::createForPosition(llvm::AAMemoryLocation *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  int v5;
  unint64_t result;
  uint64_t (**v7)();

  v5 = sub_1C6283CA4(this);
  if (v5 == 5)
  {
    result = sub_1C484358C(*((_QWORD *)a2 + 3), 120, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(_QWORD *)(result + 40) = 0x1FF00000000;
    *(_QWORD *)(result + 112) = *((_QWORD *)a2 + 3);
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    v7 = &off_1E81738D8;
    goto LABEL_5;
  }
  if (v5 == 4)
  {
    result = sub_1C484358C(*((_QWORD *)a2 + 3), 120, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(_QWORD *)(result + 40) = 0x1FF00000000;
    *(_QWORD *)(result + 112) = *((_QWORD *)a2 + 3);
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    v7 = &off_1E8173688;
LABEL_5:
    *(_QWORD *)result = v7;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 32) = v7 + 19;
    return result;
  }
  return 0;
}

_QWORD *sub_1C568BF1C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C568BF50(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C568BF94@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  const char *v3;
  size_t v4;
  void *result;

  if (*(_BYTE *)(a1 + 41))
    v3 = "nounwind";
  else
    v3 = "may-unwind";
  if (*(_BYTE *)(a1 + 41))
    v4 = 8;
  else
    v4 = 10;
  a2[23] = v4;
  result = memcpy(a2, v3, v4);
  a2[v4] = 0;
  return result;
}

void sub_1C568BFEC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3030);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3030))
      __cxa_guard_release(&qword_1EF8F3030);
  }
}

uint64_t sub_1C568C02C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int *v6[2];
  char v7;
  _QWORD v8[2];
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v9 = xmmword_1C8660170;
  v10 = 0x60000000ALL;
  v8[0] = a2;
  v8[1] = a1;
  v6[0] = (int *)&v9;
  v6[1] = (int *)6;
  v4 = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  if ((llvm::Attributor::checkForAllInstructions(a2, (uint64_t (*)(uint64_t, uint64_t))sub_1C568C168, (uint64_t)v8, v4, a1, v6, &v7, 0, 0) & 1) != 0)return 1;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
}

uint64_t *sub_1C568C108(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C568C120(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C568C168(uint64_t *a1, llvm::Instruction *this)
{
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v9;
  int v10;

  v4 = a1[1];
  if (!llvm::Instruction::mayThrow(this))
    return 1;
  v5 = *((unsigned __int8 *)this + 16) - 33;
  v6 = v5 > 0x33;
  v7 = (1 << v5) & 0x8000000000041;
  if (v6 || v7 == 0)
  {
    v10 = 0;
  }
  else
  {
    v9 = *a1;
    v10 = 1;
    LODWORD(v7) = *((_BYTE *)sub_1C56860B4(v9, (uint64_t)this, 0, v4, 0, 0, 1) + 41) != 0;
  }
  return v10 & v7;
}

_QWORD *sub_1C568C20C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C568C240(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C568C284(_BYTE *a1, uint64_t a2)
{
  unint64_t result;

  sub_1C628B818((uint64_t)a1, a2);
  result = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  if (!result)
    goto LABEL_8;
  if (*(_BYTE *)(result + 16))
  {
    if (*(_BYTE *)(result + 16) == 3 && (*(_DWORD *)(result + 20) & 0x7FFFFFF) == 0)
LABEL_8:
      a1[41] = a1[40];
  }
  else if (*(_QWORD *)(result + 72) == result + 72 && (*(_BYTE *)(result + 34) & 0x80) == 0)
  {
    goto LABEL_8;
  }
  return result;
}

void sub_1C568C2F0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3038);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3038))
      __cxa_guard_release(&qword_1EF8F3038);
  }
}

uint64_t sub_1C568C330(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  llvm::AbstractAttribute *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a1;
  v4 = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  v5 = sub_1C56860B4(a2, v4, 0, v3, 0, 0, 1);
  v6 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v5 + 48))(v5);
  v7 = *(_QWORD *)(v3 + 32);
  v3 += 32;
  LODWORD(a2) = *(_BYTE *)(v3 + 9) == 0;
  (*(void (**)(uint64_t, _QWORD))(v7 + 48))(v3, *(unsigned __int8 *)(v6 + 9));
  return a2 ^ (*(_BYTE *)(v3 + 9) != 0);
}

uint64_t *sub_1C568C3B4(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C568C3CC(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C568C414(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C568C448(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C568C48C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  const char *v3;
  size_t v4;
  void *result;

  if (*(_BYTE *)(a1 + 41))
    v3 = "nosync";
  else
    v3 = "may-sync";
  if (*(_BYTE *)(a1 + 41))
    v4 = 6;
  else
    v4 = 8;
  a2[23] = v4;
  result = memcpy(a2, v3, v4);
  a2[v4] = 0;
  return result;
}

void sub_1C568C4E4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3040);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3040))
      __cxa_guard_release(&qword_1EF8F3040);
  }
}

uint64_t sub_1C568C524(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char v6;
  char v7;
  _QWORD v8[2];
  int *v9[2];
  uint64_t v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v8[0] = a2;
  v8[1] = a1;
  if (llvm::Attributor::checkForAllReadWriteInstructions(a2, (unsigned int (*)(uint64_t, uint64_t))sub_1C568C678, (uint64_t)v8, a1, &v6)&& (v10 = 0xB00000005, v11 = 56, v9[0] = (int *)&v10, v9[1] = (int *)3, v4 = sub_1C5676C10((llvm::IRPosition *)(a1 + 16)), (llvm::Attributor::checkForAllInstructions(a2, sub_1C568C680, (uint64_t)&v7, v4, a1, v9, &v6, 0, 0) & 1) != 0))
  {
    return 1;
  }
  else
  {
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  }
}

uint64_t *sub_1C568C618(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C568C630(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C568C678(llvm::AA **a1, llvm::Attributor *a2, uint64_t a3, const llvm::AbstractAttribute *a4)
{
  return llvm::AA::isNoSyncInst(*a1, a2, a1[1], a4);
}

uint64_t sub_1C568C680(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  __int32 v21;

  v3 = *(unsigned __int8 *)(a2 + 16);
  v4 = (v3 - 33);
  if (v4 > 0x37)
    goto LABEL_5;
  if (((1 << (v3 - 33)) & 0x8000000000041) != 0)
  {
    v8 = *(_QWORD *)(a2 + 64);
    if (!v8 || (*(_BYTE *)(v8 + 20) & 4) == 0 && (*(_BYTE *)(v8 + 17) & 0x10) == 0)
    {
      v21 = 7;
      if (sub_1C53E4BBC(a2, &v21, 1uLL))
      {
        v11 = *(_QWORD *)(a2 - 32);
        if (!v11 || *(_BYTE *)(v11 + 16) || *(_QWORD *)(v11 + 24) != *(_QWORD *)(a2 + 72) || *(_DWORD *)(v11 + 36) != 7)
          return 1;
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(a2, 66) & 1) == 0
        && !llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44))
      {
        return 1;
      }
    }
LABEL_18:
    v3 = *(unsigned __int8 *)(a2 + 16);
    goto LABEL_5;
  }
  if (((1 << (v3 - 33)) & 0x808001C8000010) != 0)
    return 1;
  if (v4 == 28)
  {
    if ((*(_WORD *)(a2 + 18) & 0x301) != 0)
      return 1;
    goto LABEL_18;
  }
LABEL_5:
  v5 = (v3 - 33);
  if (v5 <= 0x37)
  {
    if (((1 << v5) & 0x8000000000041) == 0)
    {
      if (v5 == 27)
      {
        if ((*(_WORD *)(a2 + 18) & 0x301) == 0)
          goto LABEL_9;
      }
      else if (((1 << v5) & 0x808001D0000010) == 0)
      {
        goto LABEL_9;
      }
      return 1;
    }
    v9 = *(_QWORD *)(a2 + 64);
    if (!v9 || (*(_BYTE *)(v9 + 17) & 0x30) == 0)
    {
      v10 = *(_DWORD *)(a2 + 20);
      if (v10 < 0)
      {
        v12 = a2 - 32 * (v10 & 0x7FFFFFF);
        v15 = *(_QWORD *)(v12 - 8);
        v13 = v12 - 8;
        v14 = v15;
        if (v15)
        {
          v16 = -v14;
          do
          {
            v17 = *(_DWORD *)(*(_QWORD *)(v13 + v16) + 8);
            v18 = v17 > 7;
            v19 = (1 << v17) & 0x83;
            if (v18 || v19 == 0)
              return 1;
            v16 += 16;
          }
          while (v16);
        }
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(a2, 45) & 1) == 0
        && !llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44))
      {
        return 1;
      }
    }
  }
LABEL_9:
  v6 = *(_QWORD *)(a2 + 64);
  if (v6 && (*(_BYTE *)(v6 + 12) & 0x40) != 0)
    return 0;
  else
    return llvm::CallBase::hasFnAttrOnCalledFunction(a2, 6) ^ 1;
}

_QWORD *sub_1C568C8A4(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C568C8D8(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C568C91C(_BYTE *a1, uint64_t a2)
{
  unint64_t result;

  sub_1C628BB88((uint64_t)a1, a2);
  result = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  if (!result)
    goto LABEL_8;
  if (*(_BYTE *)(result + 16))
  {
    if (*(_BYTE *)(result + 16) == 3 && (*(_DWORD *)(result + 20) & 0x7FFFFFF) == 0)
LABEL_8:
      a1[41] = a1[40];
  }
  else if (*(_QWORD *)(result + 72) == result + 72 && (*(_BYTE *)(result + 34) & 0x80) == 0)
  {
    goto LABEL_8;
  }
  return result;
}

void sub_1C568C988()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3048);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3048))
      __cxa_guard_release(&qword_1EF8F3048);
  }
}

uint64_t sub_1C568C9C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  llvm::AbstractAttribute *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a1;
  v4 = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  v5 = sub_1C56833C8(a2, v4, 0, v3, 0, 0, 1);
  v6 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v5 + 48))(v5);
  v7 = *(_QWORD *)(v3 + 32);
  v3 += 32;
  LODWORD(a2) = *(_BYTE *)(v3 + 9) == 0;
  (*(void (**)(uint64_t, _QWORD))(v7 + 48))(v3, *(unsigned __int8 *)(v6 + 9));
  return a2 ^ (*(_BYTE *)(v3 + 9) != 0);
}

uint64_t *sub_1C568CA4C(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C568CA64(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C568CAAC(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C568CAE0(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C568CB24@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  const char *v3;
  size_t v4;
  void *result;

  if (*(_BYTE *)(a1 + 41))
    v3 = "norecurse";
  else
    v3 = "may-recurse";
  if (*(_BYTE *)(a1 + 41))
    v4 = 9;
  else
    v4 = 11;
  a2[23] = v4;
  result = memcpy(a2, v3, v4);
  a2[v4] = 0;
  return result;
}

void sub_1C568CB7C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3050);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3050))
      __cxa_guard_release(&qword_1EF8F3050);
  }
}

