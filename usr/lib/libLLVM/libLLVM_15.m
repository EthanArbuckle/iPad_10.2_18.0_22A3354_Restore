llvm *llvm::LoopAccessInfo::collectStridedAccess(llvm *this, llvm::Value *a2, uint64_t a3, llvm::Loop *a4)
{
  llvm::ScalarEvolution **v4;
  uint64_t SCEV;

  if (a2)
  {
    if (*((unsigned __int8 *)a2 + 16) - 62 >= 0xFFFFFFFE)
    {
      v4 = (llvm::ScalarEvolution **)this;
      this = (llvm *)*((_QWORD *)a2 - 4);
      if (this)
      {
        this = (llvm *)llvm::getStrideFromPointer(this, *((llvm::Value **)*v4 + 11), v4[3], a4);
        if (this)
        {
          SCEV = llvm::PredicatedScalarEvolution::getSCEV((int8x16_t *)*v4, this);
          llvm::PredicatedScalarEvolution::getBackedgeTakenCount((int8x16_t *)*v4);
          __asm { BR              X11 }
        }
      }
    }
  }
  return this;
}

void sub_1C4E9FFD8()
{
  JUMPOUT(0x1C4E9FDC0);
}

void sub_1C4E9FFE0()
{
  JUMPOUT(0x1C4E9FE54);
}

void sub_1C4E9FFE8()
{
  JUMPOUT(0x1C4E9FF3CLL);
}

void sub_1C4E9FFF0()
{
  JUMPOUT(0x1C4E9FF5CLL);
}

BOOL llvm::LoopAccessInfo::isUniform(const llvm::Loop **this, llvm::Value *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  llvm::Value *v8;
  int v9;
  unsigned int v10;
  const llvm::SCEV *SCEVIter;

  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFD) != 0xD)
    return 0;
  v3 = *((_QWORD *)*this + 11);
  v4 = *(_QWORD *)(v3 + 104);
  v5 = *(_DWORD *)(v3 + 120);
  if (v5)
  {
    v6 = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v7 = v4 + 48 * v6;
    v8 = *(llvm::Value **)(v7 + 24);
    if (v8 == a2)
      goto LABEL_9;
    v9 = 1;
    while (v8 != (llvm::Value *)-4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v7 = v4 + 48 * v6;
      v8 = *(llvm::Value **)(v7 + 24);
      if (v8 == a2)
        goto LABEL_9;
    }
  }
  v7 = v4 + 48 * v5;
LABEL_9:
  if (v7 == v4 + 48 * v5 || (SCEVIter = *(const llvm::SCEV **)(v7 + 40)) == 0)
    SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(*((llvm::ScalarEvolution **)*this + 11), (unint64_t)a2);
  return llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)v3, SCEVIter, this[3]) == 1;
}

unint64_t sub_1C4EA0100(uint64_t a1, unint64_t *a2)
{
  int64x2_t *v5;
  uint64_t v6;
  int64x2_t v7;
  uint64_t v8;
  int64x2_t *v9;
  int32x2_t v10;
  int64x2_t v11;

  if (*(_QWORD *)(a1 + 288))
    return ((unint64_t)sub_1C4EA372C((uint64_t **)(a1 + 272), *a2, a2[1], a2) << 32) | 1;
  v5 = *(int64x2_t **)a1;
  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6)
  {
    v7 = *(int64x2_t *)a2;
    v8 = 16 * v6;
    v9 = *(int64x2_t **)a1;
    while (1)
    {
      v10 = vmovn_s64(vceqq_s64(*v9, v7));
      if ((v10.i32[0] & v10.i32[1] & 1) != 0)
        break;
      ++v9;
      v8 -= 16;
      if (!v8)
        goto LABEL_11;
    }
    if (v8)
      return 1;
LABEL_11:
    if (v6 > 0xF)
    {
      do
      {
        sub_1C4EA372C((uint64_t **)(a1 + 272), *(_QWORD *)(*(_QWORD *)a1 + 16 * v6 - 16), *(_QWORD *)(*(_QWORD *)a1 + 16 * v6 - 8), (_OWORD *)(*(_QWORD *)a1 + 16 * v6 - 16));
        LODWORD(v6) = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v6;
      }
      while ((_DWORD)v6);
      sub_1C4EA372C((uint64_t **)(a1 + 272), *a2, a2[1], a2);
      return 0x100000001;
    }
  }
  else
  {
    v7 = *(int64x2_t *)a2;
  }
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    v11 = v7;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 16);
    v7 = v11;
    v5 = *(int64x2_t **)a1;
    v6 = *(unsigned int *)(a1 + 8);
  }
  v5[v6] = v7;
  ++*(_DWORD *)(a1 + 8);
  return 0x100000001;
}

uint64_t sub_1C4EA023C(uint64_t a1, uint64_t a2, const llvm::Loop *a3, uint64_t a4, unint64_t *a5, char a6)
{
  uint64_t v6;
  uint64_t v8;
  int v12;
  int v13;
  unint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t *v26;
  BOOL v27;
  unint64_t v28;
  BOOL v29;
  unint64_t *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  llvm::Type **v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _BOOL4 v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  llvm::Type **v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  _DWORD *v54;
  uint64_t **v55;
  _DWORD *v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  BOOL v62;
  char v63;
  BOOL v64;
  int v66;
  _BOOL4 v67;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  uint64_t *v76;
  uint64_t v78;
  _QWORD v79[2];
  int v80;
  unsigned int v81;
  void *v82;
  uint64_t v83;
  _BYTE v84[32];
  uint64_t *v85;
  uint64_t v86;
  _QWORD v87[6];

  v87[4] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 376))
    return 1;
  v6 = a2;
  v66 = *(_DWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 312);
  v73 = a1 + 304;
  if (v8 == a1 + 304)
  {
    v69 = 1;
    v70 = 0;
    goto LABEL_67;
  }
  v70 = 0;
  v12 = 0;
  v69 = 1;
  do
  {
    v13 = v12 + 1;
    v81 = 1;
    v79[0] = 0;
    v79[1] = 0;
    v80 = 0;
    v85 = v87;
    v86 = 0x400000000;
    v82 = v84;
    v83 = 0x400000000;
    v14 = *(unint64_t **)(v8 + 16);
    if (!v14)
    {
      ++v12;
      goto LABEL_60;
    }
    v72 = v12;
    v74 = v8;
    LODWORD(v15) = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = *v14;
      v19 = *(_QWORD *)a1;
      v20 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v20)
      {
        LODWORD(v21) = (v20 - 1) & ((v18 >> 9) ^ (v18 | 4));
        v22 = (uint64_t *)(v19 + 16 * v21);
        v23 = *v22;
        if ((v18 | 4) == *v22)
          goto LABEL_13;
        v24 = 1;
        while (v23 != -4)
        {
          v25 = v21 + v24++;
          v21 = v25 & (v20 - 1);
          v23 = *(_QWORD *)(v19 + 16 * v21);
          if ((v18 | 4) == v23)
          {
            v22 = (uint64_t *)(v19 + 16 * v21);
            goto LABEL_13;
          }
        }
      }
      v22 = (uint64_t *)(v19 + 16 * v20);
LABEL_13:
      v26 = (uint64_t *)(v19 + 16 * v20);
      if (v22 == v26)
        ++v16;
      else
        ++v17;
      if (v15 >= HIDWORD(v83))
      {
        v27 = v22 != v26;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, (uint64_t)v84, v15 + 1, 8);
        v28 = v18 & 0xFFFFFFFFFFFFFFFBLL | (4 * v27);
        v6 = a2;
        *((_QWORD *)v82 + v83) = v28;
        LODWORD(v15) = v83;
      }
      else
      {
        *((_QWORD *)v82 + v15) = v18 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v22 != v26));
      }
      v15 = (v15 + 1);
      LODWORD(v83) = v15;
      v14 = (unint64_t *)v14[2];
    }
    while (v14);
    if (!v17 || (v17 == 1 ? (v29 = v16 == 0) : (v29 = 0), v29))
    {
      v12 = v13;
    }
    else
    {
      if ((_DWORD)v15)
      {
        v30 = (unint64_t *)v82;
        v75 = (unint64_t *)((char *)v82 + 8 * v15);
        v31 = 1;
        do
        {
          v32 = sub_1C4EA2664(a1, v30);
          v33 = *(unsigned int *)(v32 + 32);
          if ((_DWORD)v33)
          {
            v34 = *(llvm::Type ***)(v32 + 24);
            v35 = 8 * v33;
            do
            {
              if ((sub_1C4EA2874(a1, v6, *v30, *v34, a4, (uint64_t)v79, a3, &v81, v13, a6, 0) & 1) == 0)
              {
                v36 = *v30;
                v37 = v86;
                if (v86 >= (unint64_t)HIDWORD(v86))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, (uint64_t)v87, v86 + 1, 8);
                  v37 = v86;
                }
                v31 = 0;
                v85[v37] = v36;
                LODWORD(v86) = v86 + 1;
                v6 = a2;
              }
              ++v34;
              v35 -= 8;
            }
            while (v35);
          }
          ++v30;
        }
        while (v30 != v75);
        v39 = v81 > 2 || v86 != 0;
        if (!(v31 & 1 | !v39))
        {
          v67 = v39;
          if ((_DWORD)v86)
          {
            v40 = v85;
            v76 = &v85[v86];
            v71 = 1;
            do
            {
              v41 = *v40;
              v78 = *v40;
              v42 = sub_1C4EA2664(a1, (unint64_t *)&v78);
              v43 = *(unsigned int *)(v42 + 32);
              if ((_DWORD)v43)
              {
                v44 = *(llvm::Type ***)(v42 + 24);
                v45 = 8 * v43;
                while ((sub_1C4EA2874(a1, v6, v41, *v44, a4, (uint64_t)v79, a3, &v81, v13, a6, 1) & 1) != 0)
                {
                  ++v44;
                  v45 -= 8;
                  if (!v45)
                    goto LABEL_51;
                }
                v71 = 0;
                *a5 = v41 & 0xFFFFFFFFFFFFFFF8;
              }
LABEL_51:
              ++v40;
            }
            while (v40 != v76);
          }
          else
          {
            v71 = 1;
          }
          v31 = v71;
          v39 = v67;
        }
      }
      else
      {
        v39 = v86 != 0;
        v31 = 1;
      }
      v69 &= v31;
      v70 |= v39;
      v12 = v72 + 2;
    }
    v8 = v74;
LABEL_60:
    if (v82 != v84)
      free(v82);
    if (v85 != v87)
      free(v85);
    MEMORY[0x1CAA32FB4](v79[0], 8);
    v8 = *(_QWORD *)(v8 + 8);
  }
  while (v8 != v73);
LABEL_67:
  v46 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v46)
  {
LABEL_80:
    v63 = v69;
    v62 = v70;
    if ((v70 & v69 & 1) != 0)
    {
      llvm::RuntimePointerChecking::generateChecks((llvm::RuntimePointerChecking *)v6, *(_QWORD *)(a1 + 368), v66 != 0);
      v63 = v69;
      v62 = v70;
    }
    v64 = *(_DWORD *)(v6 + 288) != 0;
    if ((v63 & 1) == 0)
      v64 = v62;
    *(_BYTE *)v6 = v64;
    if (!(v63 & 1 | !v64))
    {
      sub_1C619E3C0((_QWORD *)v6);
      return 0;
    }
    return 1;
  }
  v47 = 0;
  v48 = *(_QWORD *)(v6 + 8);
  v49 = v46 - 1;
  v50 = (_DWORD *)(v48 + 112);
  while (1)
  {
    v51 = v47 + 1;
    if (v47 + 1 < v46)
      break;
LABEL_79:
    --v49;
    v50 += 16;
    v47 = v51;
    if (v51 == v46)
      goto LABEL_80;
  }
  v52 = v48 + (v47 << 6);
  v53 = *(_DWORD *)(v52 + 44);
  v54 = (_DWORD *)(v52 + 48);
  v55 = (uint64_t **)(v52 + 16);
  v56 = v50;
  v57 = v49;
  while (1)
  {
    if (v53 != *(v56 - 1) && *v54 == *v56)
    {
      v58 = **v55;
      v59 = *(_DWORD *)(v58 + 8);
      if ((v59 & 0xFE) == 0x12)
        v59 = *(_DWORD *)(**(_QWORD **)(v58 + 16) + 8);
      v60 = **((_QWORD **)v56 - 4);
      v61 = *(_DWORD *)(v60 + 8);
      if ((v61 & 0xFE) == 0x12)
        v61 = *(_DWORD *)(**(_QWORD **)(v60 + 16) + 8);
      if ((v61 ^ v59) > 0xFF)
        return 0;
    }
    v56 += 16;
    if (!--v57)
      goto LABEL_79;
  }
}

void llvm::LoopAccessInfo::emitUnsafeDependenceRemark(llvm::LoopAccessInfo *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 **v17;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  void *v21[2];
  char v22;
  void *__p;
  char v24;
  unsigned __int8 *v25;
  const char *v26;
  uint64_t v27;

  v1 = *((_QWORD *)this + 2);
  if (*(_BYTE *)(v1 + 216))
  {
    v2 = *(unsigned int *)(v1 + 232);
    if ((_DWORD)v2)
    {
      v4 = (unsigned int *)(*(_QWORD *)(v1 + 224) + 4);
      v5 = 16 * v2;
      while (1)
      {
        v6 = v4[1];
        if (((1 << v6) & 0x25) == 0)
          break;
        v4 += 4;
        v5 -= 16;
        if (!v5)
          return;
      }
      v7 = *(v4 - 1);
      v8 = llvm::LoopAccessInfo::recordAnalysis((uint64_t)this, (uint64_t)"UnsafeDep", 9, *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8 * *v4));
      v26 = "unsafe dependent memory operations in loop. Use #pragma loop distribute(enable) to allow loop distribution t"
            "o attempt to isolate the offending operations into a separate loop";
      v27 = 174;
      v9 = v8 + 80;
      sub_1C53B17B4(v8 + 80, (const void **)&v26);
      v10 = "\nBackward loop carried data dependence.";
      v11 = 39;
      switch(v6)
      {
        case 1u:
          v10 = "\nUnknown data dependence.";
          v11 = 25;
          goto LABEL_11;
        case 3u:
          v10 = "\nForward loop carried data dependence that prevents store-to-load forwarding.";
          v11 = 77;
          goto LABEL_11;
        case 4u:
          goto LABEL_11;
        case 6u:
          v10 = "\nBackward loop carried data dependence that prevents store-to-load forwarding.";
          v11 = 78;
LABEL_11:
          v26 = v10;
          v27 = v11;
          sub_1C53B17B4(v9, (const void **)&v26);
          break;
        default:
          break;
      }
      v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 40) + 8 * v7);
      if (v12)
      {
        v13 = *(unsigned __int8 **)(v12 + 48);
        v25 = v13;
        if (v13)
          llvm::MetadataTracking::track((uint64_t)&v25, v13, 2);
        v14 = *(unsigned __int8 *)(v12 + 16);
        if ((v14 - 62) > 0xFFFFFFFD)
        {
          v15 = -1;
        }
        else
        {
          if (v14 != 62)
            goto LABEL_25;
          v15 = -(uint64_t)(*(_DWORD *)(v12 + 20) & 0x7FFFFFF);
        }
        v16 = *(_QWORD *)(v12 + 32 * v15);
        if (v16)
        {
          v17 = (unsigned __int8 **)(v16 + 48);
          if (*(unsigned __int8 *)(v16 + 16) >= 0x1Cu && v17 != &v25)
          {
            if (v25)
              llvm::MetadataTracking::untrack((uint64_t)&v25, v25);
            v19 = *v17;
            v25 = v19;
            if (!v19)
              return;
            llvm::MetadataTracking::track((uint64_t)&v25, v19, 2);
          }
        }
LABEL_25:
        if (v25)
        {
          v26 = " Memory location is the same as accessed at ";
          v27 = 44;
          sub_1C53B17B4(v9, (const void **)&v26);
          v20 = v25;
          if (v25)
            llvm::MetadataTracking::track((uint64_t)&v20, v25, 2);
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v21, "Location", 8uLL, (const llvm::DebugLoc *)&v20);
          sub_1C47E3888(v8, (uint64_t)v21);
          if (v24 < 0)
            operator delete(__p);
          if (v22 < 0)
            operator delete(v21[0]);
          if (v20)
            llvm::MetadataTracking::untrack((uint64_t)&v20, v20);
          if (v25)
            llvm::MetadataTracking::untrack((uint64_t)&v25, v25);
        }
      }
    }
  }
}

uint64_t llvm::LoopAccessInfo::LoopAccessInfo(uint64_t a1, llvm::Loop *a2, llvm::ScalarEvolution *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  llvm::PredicatedScalarEvolution *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v14 = (llvm::PredicatedScalarEvolution *)operator new();
  *(_QWORD *)a1 = llvm::PredicatedScalarEvolution::PredicatedScalarEvolution(v14, a3, a2);
  *(_QWORD *)(a1 + 8) = 0;
  v15 = operator new();
  *(_QWORD *)v15 = v14;
  *(_QWORD *)(v15 + 8) = a2;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  *(_DWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 40) = v15 + 56;
  *(_QWORD *)(v15 + 48) = 0x1000000000;
  *(_DWORD *)(v15 + 184) = 0;
  *(_OWORD *)(v15 + 192) = xmmword_1C6429E90;
  *(_BYTE *)(v15 + 208) = 0;
  *(_DWORD *)(v15 + 212) = 0;
  *(_BYTE *)(v15 + 216) = 1;
  *(_QWORD *)(v15 + 224) = v15 + 240;
  *(_QWORD *)(v15 + 232) = 0x800000000;
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = -1;
  *(_WORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 50) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 8;
  *(_DWORD *)(a1 + 112) = 0;
  v16 = operator new();
  *(_BYTE *)v16 = 0;
  *(_QWORD *)(v16 + 8) = v16 + 24;
  *(_QWORD *)(v16 + 16) = 0x200000000;
  *(_QWORD *)(v16 + 152) = v16 + 168;
  *(_QWORD *)(v16 + 160) = 0x200000000;
  *(_QWORD *)(v16 + 264) = v15;
  *(_QWORD *)(v16 + 272) = a3;
  *(_QWORD *)(v16 + 280) = v16 + 296;
  *(_QWORD *)(v16 + 288) = 0x400000000;
  *(_BYTE *)(v16 + 360) = 1;
  *(_QWORD *)(v16 + 368) = v16 + 384;
  *(_QWORD *)(v16 + 376) = 0x200000000;
  v17 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v16;
  if (v17)
  {
    v19 = sub_1C4EA3DBC(v17);
    MEMORY[0x1CAA32FC0](v19, 0x10A0C405479AB48);
  }
  if (llvm::LoopAccessInfo::canAnalyzeLoop((llvm::LoopAccessInfo *)a1))
    llvm::LoopAccessInfo::analyzeLoop(a1, a5, a7, a4, a6);
  return a1;
}

void llvm::LoopAccessInfo::print(llvm::LoopAccessInfo *this, llvm::raw_ostream *a2, uint64_t a3)
{
  void *v6;
  _BYTE *v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  const char *v11;
  void *v12;
  _BYTE *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  _BYTE *v18;
  void *v19;
  _DWORD *v20;
  size_t v21;
  const char *v22;
  uint64_t v23;
  _BYTE *v24;
  void *v25;
  unsigned int *v26;
  uint64_t v27;
  _BYTE *v28;
  void *__p[2];
  char v30;

  if (*((_BYTE *)this + 48))
  {
    llvm::raw_ostream::indent(a2, a3);
    v6 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v6 > 0x1AuLL)
    {
      qmemcpy(v6, "Memory dependences are safe", 27);
      v7 = (_BYTE *)(*((_QWORD *)a2 + 4) + 27);
      *((_QWORD *)a2 + 4) = v7;
    }
    else
    {
      llvm::raw_ostream::write(a2, "Memory dependences are safe", 0x1BuLL);
      v7 = (_BYTE *)*((_QWORD *)a2 + 4);
    }
    if (*((_QWORD *)this + 5) != -1)
    {
      if (*((_QWORD *)a2 + 3) - (_QWORD)v7 > 0x26uLL)
      {
        qmemcpy(v7, " with a maximum dependence distance of ", 39);
        *((_QWORD *)a2 + 4) += 39;
      }
      else
      {
        llvm::raw_ostream::write(a2, " with a maximum dependence distance of ", 0x27uLL);
      }
      sub_1C5E21910(a2, *((_QWORD *)this + 5), 0, 0, 0);
      v8 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v8) > 5)
      {
        *(_WORD *)(v8 + 4) = 29541;
        *(_DWORD *)v8 = 1954112032;
        v7 = (_BYTE *)(*((_QWORD *)a2 + 4) + 6);
        *((_QWORD *)a2 + 4) = v7;
      }
      else
      {
        llvm::raw_ostream::write(a2, " bytes", 6uLL);
        v7 = (_BYTE *)*((_QWORD *)a2 + 4);
      }
    }
    if (**((_BYTE **)this + 1))
    {
      if (*((_QWORD *)a2 + 3) - (_QWORD)v7 > 0x14uLL)
      {
        qmemcpy(v7, " with run-time checks", 21);
        v7 = (_BYTE *)(*((_QWORD *)a2 + 4) + 21);
        *((_QWORD *)a2 + 4) = v7;
      }
      else
      {
        llvm::raw_ostream::write(a2, " with run-time checks", 0x15uLL);
        v7 = (_BYTE *)*((_QWORD *)a2 + 4);
      }
    }
    if (*((_BYTE **)a2 + 3) == v7)
    {
      llvm::raw_ostream::write(a2, "\n", 1uLL);
    }
    else
    {
      *v7 = 10;
      ++*((_QWORD *)a2 + 4);
    }
  }
  if (*((_BYTE *)this + 49))
  {
    llvm::raw_ostream::indent(a2, a3);
    v9 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v9 > 0x20uLL)
    {
      qmemcpy(v9, "Has convergent operation in loop\n", 33);
      *((_QWORD *)a2 + 4) += 33;
    }
    else
    {
      llvm::raw_ostream::write(a2, "Has convergent operation in loop\n", 0x21uLL);
    }
  }
  if (*((_QWORD *)this + 7))
  {
    llvm::raw_ostream::indent(a2, a3);
    v10 = (_QWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v10 > 7uLL)
    {
      *v10 = 0x203A74726F706552;
      *((_QWORD *)a2 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(a2, "Report: ", 8uLL);
    }
    llvm::DiagnosticInfoOptimizationBase::getMsg(*((llvm::DiagnosticInfoOptimizationBase **)this + 7), (uint64_t)__p);
    v11 = v30 >= 0 ? (const char *)__p : (const char *)__p[0];
    v12 = v30 >= 0 ? (void *)(v30 & 0x7F) : __p[1];
    llvm::raw_ostream::write(a2, v11, (size_t)v12);
    v13 = (_BYTE *)*((_QWORD *)a2 + 4);
    if (*((_BYTE **)a2 + 3) == v13)
    {
      llvm::raw_ostream::write(a2, "\n", 1uLL);
    }
    else
    {
      *v13 = 10;
      ++*((_QWORD *)a2 + 4);
    }
    if (v30 < 0)
      operator delete(__p[0]);
  }
  v14 = *((_QWORD *)this + 2);
  if (*(_BYTE *)(v14 + 216))
  {
    llvm::raw_ostream::indent(a2, a3);
    v16 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v16 > 0xCuLL)
    {
      qmemcpy(v16, "Dependences:\n", 13);
      *((_QWORD *)a2 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(a2, "Dependences:\n", 0xDuLL);
    }
    v17 = *(unsigned int *)(v14 + 232);
    if ((_DWORD)v17)
    {
      v26 = *(unsigned int **)(v14 + 224);
      v27 = 16 * v17;
      do
      {
        llvm::MemoryDepChecker::Dependence::print(v26, a2, a3 + 2, (_QWORD *)(*((_QWORD *)this + 2) + 40));
        v28 = (_BYTE *)*((_QWORD *)a2 + 4);
        if (*((_BYTE **)a2 + 3) == v28)
        {
          llvm::raw_ostream::write(a2, "\n", 1uLL);
        }
        else
        {
          *v28 = 10;
          ++*((_QWORD *)a2 + 4);
        }
        v26 += 4;
        v27 -= 16;
      }
      while (v27);
    }
  }
  else
  {
    llvm::raw_ostream::indent(a2, a3);
    v15 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v15 > 0x22uLL)
    {
      qmemcpy(v15, "Too many dependences, not recorded\n", 35);
      *((_QWORD *)a2 + 4) += 35;
    }
    else
    {
      llvm::raw_ostream::write(a2, "Too many dependences, not recorded\n", 0x23uLL);
    }
  }
  llvm::RuntimePointerChecking::print(*((llvm::RuntimePointerChecking **)this + 1), a2, a3);
  v18 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v18)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
  }
  else
  {
    *v18 = 10;
    ++*((_QWORD *)a2 + 4);
  }
  llvm::raw_ostream::indent(a2, a3);
  v19 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v19 > 0x31uLL)
  {
    qmemcpy(v19, "Non vectorizable stores to invariant address were ", 50);
    v20 = (_DWORD *)(*((_QWORD *)a2 + 4) + 50);
    *((_QWORD *)a2 + 4) = v20;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Non vectorizable stores to invariant address were ", 0x32uLL);
    v20 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  v21 = 4 * (*((_BYTE *)this + 50) == 0);
  if (v21 <= *((_QWORD *)a2 + 3) - (_QWORD)v20)
  {
    if (!*((_BYTE *)this + 50))
    {
      *v20 = 544501614;
      v20 = (_DWORD *)(*((_QWORD *)a2 + 4) + 4);
      *((_QWORD *)a2 + 4) = v20;
    }
  }
  else
  {
    if (*((_BYTE *)this + 50))
      v22 = "";
    else
      v22 = "not ";
    llvm::raw_ostream::write(a2, v22, v21);
    v20 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  if (*((_QWORD *)a2 + 3) - (_QWORD)v20 > 0xEuLL)
  {
    qmemcpy(v20, "found in loop.\n", 15);
    *((_QWORD *)a2 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(a2, "found in loop.\n", 0xFuLL);
  }
  llvm::raw_ostream::indent(a2, a3);
  v23 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v23) > 0x11)
  {
    *(_WORD *)(v23 + 16) = 2618;
    *(_OWORD *)v23 = *(_OWORD *)"SCEV assumptions:\n";
    *((_QWORD *)a2 + 4) += 18;
  }
  else
  {
    llvm::raw_ostream::write(a2, "SCEV assumptions:\n", 0x12uLL);
  }
  (*(void (**)(_QWORD, llvm::raw_ostream *, uint64_t))(**(_QWORD **)(*(_QWORD *)this + 104) + 24))(*(_QWORD *)(*(_QWORD *)this + 104), a2, a3);
  v24 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v24)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
  }
  else
  {
    *v24 = 10;
    ++*((_QWORD *)a2 + 4);
  }
  llvm::raw_ostream::indent(a2, a3);
  v25 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v25 > 0x17uLL)
  {
    qmemcpy(v25, "Expressions re-written:\n", 24);
    *((_QWORD *)a2 + 4) += 24;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Expressions re-written:\n", 0x18uLL);
  }
  llvm::PredicatedScalarEvolution::print(*(llvm::PredicatedScalarEvolution **)this, a2, a3);
}

void llvm::LoopAccessLegacyAnalysis::print(llvm::LoopAccessLegacyAnalysis *this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  const void *v7;
  _BYTE *v8;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  const void *v12;
  _BYTE *v13;
  void *v14;
  unsigned int v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;
  BOOL v20;
  llvm::Loop *v21;
  uint64_t ***v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ****v27;
  uint64_t ***v28;
  int v29;
  int v30;
  uint64_t ***v31;
  const char *v32;
  size_t v33;
  size_t v34;
  _WORD *v35;
  llvm::LoopAccessInfo *Info;
  unsigned int v37;
  unsigned int v38;
  _BYTE *v40;
  _BYTE v41[64];
  char *v42;
  char *v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  _BYTE v50[64];
  void *__p;
  char *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  void *v59;
  _BYTE *v60;
  void *v61;
  void *v62;
  unsigned int v63;
  unsigned int v64;
  void *v65;
  _BYTE *v66;
  uint64_t v67;

  v3 = *((_QWORD *)this + 11);
  v4 = *(uint64_t **)(v3 + 24);
  v5 = *(uint64_t **)(v3 + 32);
  if (v4 == v5)
    return;
  do
  {
    v67 = *v4;
    sub_1C4EA1748(&v67, (uint64_t)&v54);
    v45 = v50;
    v7 = v55;
    if (v55 == v54)
    {
      v46 = v50;
      v8 = v50;
      v9 = v55;
    }
    else
    {
      v37 = v56;
      v8 = malloc_type_malloc(8 * v56, 0x4065EBACuLL);
      if (!v8 && (v37 || (v8 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_75:
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v46 = v8;
      v9 = v54;
      v7 = v55;
    }
    v10 = v57;
    v47 = v56;
    if (v7 == v9)
      v11 = v57;
    else
      v11 = v56;
    if (v11)
    {
      memmove(v8, v7, 8 * v11);
      v10 = v57;
    }
    v48 = v10;
    v49 = v58;
    v52 = 0;
    v53 = 0;
    __p = 0;
    sub_1C4D6CDA0(&__p, v59, v60, 0xAAAAAAAAAAAAAAABLL * ((v60 - (_BYTE *)v59) >> 3));
    v12 = v62;
    if (v62 == v61)
    {
      v40 = v41;
      v13 = v41;
      v14 = v62;
    }
    else
    {
      v38 = v63;
      v13 = malloc_type_malloc(8 * v63, 0x4065EBACuLL);
      if (!v13)
      {
        if (v38)
          goto LABEL_75;
        v13 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v13)
          goto LABEL_75;
      }
      v40 = v13;
      v14 = v61;
      v12 = v62;
    }
    if (v12 == v14)
      v15 = v64;
    else
      v15 = v63;
    if (v15)
      memmove(v13, v12, 8 * v15);
    v43 = 0;
    v44 = 0;
    v42 = 0;
    sub_1C4D6CDA0(&v42, v65, v66, 0xAAAAAAAAAAAAAAABLL * ((v66 - (_BYTE *)v65) >> 3));
    while (1)
    {
      if (v52 - (_BYTE *)__p != v43 - v42)
        goto LABEL_31;
      if (__p == v52)
        break;
      v16 = v42 + 8;
      v17 = (char *)__p + 8;
      while (1)
      {
        v18 = v17 - 8;
        if (*((_QWORD *)v17 - 1) != *((_QWORD *)v16 - 1))
          break;
        v19 = v16[8];
        if (v17[8])
          v20 = v19 == 0;
        else
          v20 = 1;
        if (v20)
        {
          if ((v17[8] == 0) == (v19 != 0))
            break;
        }
        else if (*(_QWORD *)v17 != *(_QWORD *)v16)
        {
          break;
        }
        v16 += 24;
        v17 += 24;
        if (v18 + 24 == v52)
          goto LABEL_48;
      }
LABEL_31:
      v21 = (llvm::Loop *)*((_QWORD *)v52 - 3);
      llvm::raw_ostream::write(a2, "                                                                                ", 2uLL);
      v22 = (uint64_t ***)**((_QWORD **)v21 + 4);
      if ((*((_BYTE *)v22 + 23) & 0x10) == 0)
        goto LABEL_41;
      v23 = ***v22;
      v24 = *(_QWORD *)(v23 + 152);
      v25 = *(unsigned int *)(v23 + 168);
      if ((_DWORD)v25)
      {
        LODWORD(v26) = (v25 - 1) & ((v22 >> 4) ^ (v22 >> 9));
        v27 = (uint64_t ****)(v24 + 16 * v26);
        v28 = *v27;
        if (*v27 == v22)
          goto LABEL_39;
        v29 = 1;
        while (v28 != (uint64_t ***)-4096)
        {
          v30 = v26 + v29++;
          v26 = v30 & (v25 - 1);
          v28 = *(uint64_t ****)(v24 + 16 * v26);
          if (v28 == v22)
          {
            v27 = (uint64_t ****)(v24 + 16 * v26);
            goto LABEL_39;
          }
        }
      }
      v27 = (uint64_t ****)(v24 + 16 * v25);
LABEL_39:
      v31 = v27[1];
      v34 = (size_t)*v31;
      v32 = (const char *)(v31 + 2);
      v33 = v34;
      v35 = (_WORD *)*((_QWORD *)a2 + 4);
      if (v34 > *((_QWORD *)a2 + 3) - (_QWORD)v35)
      {
        llvm::raw_ostream::write(a2, v32, v33);
LABEL_41:
        v35 = (_WORD *)*((_QWORD *)a2 + 4);
        goto LABEL_44;
      }
      if (v33)
      {
        memcpy(v35, v32, v33);
        v35 = (_WORD *)(*((_QWORD *)a2 + 4) + v33);
        *((_QWORD *)a2 + 4) = v35;
      }
LABEL_44:
      if (*((_QWORD *)a2 + 3) - (_QWORD)v35 > 1uLL)
      {
        *v35 = 2618;
        *((_QWORD *)a2 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(a2, ":\n", 2uLL);
      }
      Info = (llvm::LoopAccessInfo *)llvm::LoopAccessLegacyAnalysis::getInfo(this, v21);
      llvm::LoopAccessInfo::print(Info, a2, 4);
      sub_1C4EA42DC((llvm::SmallPtrSetImplBase *)&v45);
    }
LABEL_48:
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v40 != v41)
      free(v40);
    if (__p)
    {
      v52 = (char *)__p;
      operator delete(__p);
    }
    if (v46 != v45)
      free(v46);
    if (v65)
    {
      v66 = v65;
      operator delete(v65);
    }
    if (v62 != v61)
      free(v62);
    if (v59)
    {
      v60 = v59;
      operator delete(v59);
    }
    if (v55 != v54)
      free(v55);
    ++v4;
  }
  while (v4 != v5);
}

void sub_1C4EA1748(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _OWORD v16[4];
  uint64_t v17;
  void *__p;
  void *v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  int v24;
  _BYTE v25[64];
  void *v26;
  char *v27;
  char *v28;

  v3 = *a1;
  v21 = v25;
  v22 = v25;
  v23 = 8;
  v24 = 0;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v21, v3);
  v4 = v27;
  if (v27 < v28)
  {
    *(_QWORD *)v27 = v3;
    v4[8] = 0;
    v11 = v4 + 24;
    v4[16] = 0;
  }
  else
  {
    v5 = v26;
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v27 - (_BYTE *)v26) >> 3);
    v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    if (0x5555555555555556 * ((v28 - (_BYTE *)v26) >> 3) > v7)
      v7 = 0x5555555555555556 * ((v28 - (_BYTE *)v26) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v28 - (_BYTE *)v26) >> 3) >= 0x555555555555555)
      v8 = 0xAAAAAAAAAAAAAAALL;
    else
      v8 = v7;
    if (v8)
    {
      if (v8 > 0xAAAAAAAAAAAAAAALL)
        sub_1C4764EE4();
      v9 = (char *)operator new(24 * v8);
    }
    else
    {
      v9 = 0;
    }
    v10 = &v9[24 * v6];
    *(_QWORD *)v10 = v3;
    v10[8] = 0;
    v10[16] = 0;
    v11 = v10 + 24;
    if (v4 != v5)
    {
      do
      {
        v12 = *(_OWORD *)(v4 - 24);
        *((_QWORD *)v10 - 1) = *((_QWORD *)v4 - 1);
        *(_OWORD *)(v10 - 24) = v12;
        v10 -= 24;
        v4 -= 24;
      }
      while (v4 != v5);
      v4 = v26;
    }
    v26 = v10;
    v27 = v11;
    v28 = &v9[24 * v8];
    if (v4)
      operator delete(v4);
  }
  v27 = v11;
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  __p = 0;
  v13 = (char *)v16 + 8;
  v14 = (char *)v16 + 8;
  v15 = 8;
  v19 = 0;
  v20 = 0;
  sub_1C4E1F928((uint64_t)&v21, (uint64_t)&v13, a2);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  if (v14 != v13)
    free(v14);
  if (v26)
  {
    v27 = (char *)v26;
    operator delete(v26);
  }
  if (v22 != v21)
    free(v22);
}

uint64_t sub_1C4EA194C(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeAAResultsWrapperPassPass(a1, a2);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v3);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  v4 = operator new();
  *(_QWORD *)v4 = "Loop Access Analysis";
  *(_QWORD *)(v4 + 8) = 20;
  *(_QWORD *)(v4 + 16) = "loop-accesses";
  *(_QWORD *)(v4 + 24) = 13;
  *(_QWORD *)(v4 + 32) = &llvm::LoopAccessLegacyAnalysis::ID;
  *(_WORD *)(v4 + 40) = 256;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = llvm::callDefaultCtor<llvm::LoopAccessLegacyAnalysis>;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

uint64_t llvm::LoopAccessAnalysis::run@<X0>(llvm::Loop *a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return llvm::LoopAccessInfo::LoopAccessInfo(a3, a1, *(llvm::ScalarEvolution **)(a2 + 32), *(uint64_t **)(a2 + 40), *(_QWORD *)a2, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

llvm::LoopAccessLegacyAnalysis *llvm::createLAAPass(llvm *this)
{
  llvm::LoopAccessLegacyAnalysis *v1;

  v1 = (llvm::LoopAccessLegacyAnalysis *)operator new();
  return llvm::LoopAccessLegacyAnalysis::LoopAccessLegacyAnalysis(v1);
}

char **sub_1C4EA1A3C(char **result, uint64_t a2)
{
  uint64_t ***v2;
  char **v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ****v9;
  uint64_t ***v10;
  int v11;
  int v12;
  uint64_t ***v13;
  char *v14;
  size_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  BOOL v20;
  unsigned __int8 *v21;
  size_t v22;
  size_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE v27[152];
  _QWORD v28[2];
  char v29;
  char v30;
  char *v31;
  uint64_t v32;
  _QWORD v33[25];

  v33[24] = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t ***)*(result - 4);
  if (!v2)
    return result;
  if (*((_BYTE *)v2 + 16))
    return result;
  v3 = result;
  if (v2[3] != (uint64_t **)result[9])
    return result;
  if ((*((_BYTE *)v2 + 23) & 0x10) == 0)
  {
    v15 = 0;
    v14 = &byte_1C871356D;
    goto LABEL_12;
  }
  v5 = ***v2;
  v6 = *(_QWORD *)(v5 + 152);
  v7 = *(unsigned int *)(v5 + 168);
  if (!(_DWORD)v7)
    goto LABEL_15;
  LODWORD(v8) = (v7 - 1) & ((v2 >> 4) ^ (v2 >> 9));
  v9 = (uint64_t ****)(v6 + 16 * v8);
  v10 = *v9;
  if (*v9 != v2)
  {
    v11 = 1;
    while (v10 != (uint64_t ***)-4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v10 = *(uint64_t ****)(v6 + 16 * v8);
      if (v10 == v2)
      {
        v9 = (uint64_t ****)(v6 + 16 * v8);
        goto LABEL_11;
      }
    }
LABEL_15:
    v9 = (uint64_t ****)(v6 + 16 * v7);
  }
LABEL_11:
  v13 = v9[1];
  v16 = (size_t)*v13;
  v14 = (char *)(v13 + 2);
  v15 = v16;
LABEL_12:
  v31 = (char *)v33;
  v32 = 0x800000000;
  llvm::VFABI::getVectorVariantNames((uint64_t)result, (uint64_t)&v31);
  if ((_DWORD)v32)
  {
    v17 = v31;
    v18 = 24 * v32;
    do
    {
      v19 = v17[23];
      v20 = v19 < 0;
      if (v19 >= 0)
        v21 = (unsigned __int8 *)v17;
      else
        v21 = *(unsigned __int8 **)v17;
      v22 = v19 & 0x7F;
      if (v20)
        v23 = *((_QWORD *)v17 + 1);
      else
        v23 = v22;
      llvm::VFABI::tryDemangleForVFABI(v21, v23, *(_QWORD *)(*((_QWORD *)v3[5] + 7) + 40), (uint64_t)v27);
      if (v30)
      {
        if (v29 >= 0)
          v24 = v28;
        else
          v24 = (_QWORD *)v28[0];
        v25 = v29 & 0x7F;
        if (v29 < 0)
          v25 = v28[1];
        if (v25 != v15
          || v15 && memcmp(v24, v14, v15)
          || (v26 = sub_1C4EA1C68(a2, (unint64_t)v27, 1),
              sub_1C4EA1DB0(*(_QWORD *)a2 + 208 * *(unsigned int *)(a2 + 8), v26),
              ++*(_DWORD *)(a2 + 8),
              v30))
        {
          sub_1C4EA1D5C((uint64_t)v27);
        }
      }
      v17 += 24;
      v18 -= 24;
    }
    while (v18);
  }
  return sub_1C4E01820(&v31);
}

unint64_t sub_1C4EA1C68(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 208 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C619E9C8(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C619E9C8(a1, v5);
    }
  }
  return a2;
}

uint64_t sub_1C4EA1CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0x800000000;
  if (*(_DWORD *)(a2 + 16))
    sub_1C619EAB4(v4, a2 + 8);
  v5 = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v5;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  v6 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v6;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  return a1;
}

uint64_t sub_1C4EA1D5C(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 199) < 0)
    operator delete(*(void **)(a1 + 176));
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
  return a1;
}

uint64_t sub_1C4EA1DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0x800000000;
  if (*(_DWORD *)(a2 + 16))
    sub_1C619EBD0(v4, a2 + 8);
  v5 = (_BYTE *)(a1 + 152);
  if (*(char *)(a2 + 175) < 0)
  {
    sub_1C47EBC30(v5, *(void **)(a2 + 152), *(_QWORD *)(a2 + 160));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_OWORD *)v5 = v6;
  }
  v7 = (_BYTE *)(a1 + 176);
  if (*(char *)(a2 + 199) < 0)
  {
    sub_1C47EBC30(v7, *(void **)(a2 + 176), *(_QWORD *)(a2 + 184));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_OWORD *)v7 = v8;
  }
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  return a1;
}

uint64_t **sub_1C4EA1E64(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[6];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x38uLL);
    v7[4] = (uint64_t *)(v7 + 4);
    v7[5] = (uint64_t *)1;
    v7[6] = a3;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_1C4768E74(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t sub_1C4EA1F34(uint64_t a1, uint64_t a2, unint64_t *a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  int v10;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v14 = 0;
  result = sub_1C4EA2044(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v14);
  v9 = v14;
  if ((result & 1) != 0)
  {
    v12 = 0;
    goto LABEL_7;
  }
  v10 = *(_DWORD *)(a2 + 8);
  v11 = *(_DWORD *)(a2 + 16);
  if (4 * v10 + 4 >= 3 * v11)
  {
    v11 *= 2;
    goto LABEL_10;
  }
  if (v11 + ~v10 - *(_DWORD *)(a2 + 12) <= v11 >> 3)
  {
LABEL_10:
    sub_1C4EA20D8(a2, v11);
    v14 = 0;
    result = sub_1C4EA2044(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v14);
    v9 = v14;
  }
  ++*(_DWORD *)(a2 + 8);
  if (*(_QWORD *)v9 != -4)
    --*(_DWORD *)(a2 + 12);
  *(_QWORD *)v9 = *a3;
  *(_DWORD *)(v9 + 8) = *a4;
  v12 = 1;
LABEL_7:
  v13 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v12;
  return result;
}

uint64_t sub_1C4EA2044(uint64_t a1, int a2, unint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (a2 - 1) & ((a3 >> 9) ^ a3);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v12 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -16;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v11 & v4));
        v7 = *v6;
        v12 = 1;
        if (*v6 == a3)
          goto LABEL_14;
      }
      v12 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v12 = 0;
  }
LABEL_14:
  *a4 = v6;
  return v12;
}

_QWORD *sub_1C4EA20D8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C619ECA0(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

char *sub_1C4EA2190(void **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;

  v2 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x492492492492492)
    abort();
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x249249249249249)
    v5 = 0x492492492492492;
  else
    v5 = v3;
  if (v5 > 0x492492492492492)
    sub_1C4764EE4();
  v7 = 56 * v5;
  v8 = (char *)operator new(56 * v5);
  v9 = &v8[56 * v2];
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *((_QWORD *)v9 + 1) = 1;
  *((_QWORD *)v9 + 2) = -4096;
  sub_1C4EA2398((unsigned int *)v9 + 2, (unsigned int *)(a2 + 8));
  *((_QWORD *)v9 + 4) = v9 + 48;
  *((_QWORD *)v9 + 5) = 0x100000000;
  if (*(_DWORD *)(a2 + 40))
    sub_1C4E41EEC((uint64_t)(v9 + 32), a2 + 32);
  v10 = &v8[v7];
  v11 = v9 + 56;
  v13 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = &v9[v14];
      *((_QWORD *)v15 - 7) = *(_QWORD *)&v12[v14 - 56];
      *(_QWORD *)&v9[v14 - 48] = 1;
      *((_QWORD *)v15 - 5) = -4096;
      sub_1C4EA2398((unsigned int *)&v9[v14 - 48], (unsigned int *)&v12[v14 - 48]);
      *((_QWORD *)v15 - 3) = v15 - 8;
      *(_QWORD *)&v9[v14 - 16] = 0x100000000;
      if (*(_DWORD *)&v12[v14 - 16])
        sub_1C4E41EEC((uint64_t)&v9[v14 - 24], (uint64_t)&v12[v14 - 24]);
      v14 -= 56;
    }
    while (&v12[v14] != v13);
    v12 = (char *)*a1;
    v16 = (char *)a1[1];
    *a1 = &v9[v14];
    a1[1] = v11;
    a1[2] = v10;
    while (v16 != v12)
    {
      v17 = (char *)*((_QWORD *)v16 - 3);
      if (v16 - 8 != v17)
        free(v17);
      if ((*(v16 - 48) & 1) == 0)
        MEMORY[0x1CAA32FB4](*((_QWORD *)v16 - 5), 8);
      v16 -= 56;
    }
  }
  if (v12)
    operator delete(v12);
  return v9 + 56;
}

unsigned int *sub_1C4EA2398(unsigned int *result, unsigned int *a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  __int128 v7;
  uint64_t v8;

  v2 = *a2;
  *a2 = *result & 0xFFFFFFFE | *a2 & 1;
  v3 = result[1];
  *result = v2 & 0xFFFFFFFE | *result & 1;
  result[1] = a2[1];
  a2[1] = v3;
  v4 = *a2;
  if ((*result & 1) != 0)
  {
    if ((v4 & 1) != 0)
    {
      v5 = *((_QWORD *)result + 1);
      *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v5;
      return result;
    }
    v6 = a2;
    goto LABEL_5;
  }
  if ((v4 & 1) != 0)
  {
    v4 = *result;
    v6 = result;
    result = a2;
LABEL_5:
    v7 = *(_OWORD *)(v6 + 2);
    *v6 = v4 | 1;
    *((_QWORD *)v6 + 1) = *((_QWORD *)result + 1);
    *result &= ~1u;
    *(_OWORD *)(result + 2) = v7;
    return result;
  }
  v8 = *((_QWORD *)result + 1);
  *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  LODWORD(v8) = result[4];
  result[4] = a2[4];
  a2[4] = v8;
  return result;
}

uint64_t sub_1C4EA246C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

uint64_t sub_1C4EA2500(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = a1;
  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
  {
    v3 = *(_QWORD *)a1;
    if ((*(_BYTE *)(*(_QWORD *)v1 + 8) & 1) == 0)
    {
      v3 = sub_1C4EA2500();
      *(_QWORD *)v1 = v3;
    }
    return v3;
  }
  return v1;
}

_QWORD *sub_1C4EA2544(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C619ED4C(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1C4EA25FC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 56)
  {
    v4 = *(void **)(i - 24);
    if ((void *)(i - 8) != v4)
      free(v4);
    if ((*(_BYTE *)(i - 48) & 1) == 0)
      MEMORY[0x1CAA32FB4](*(_QWORD *)(i - 40), 8);
  }
  a1[1] = v2;
}

uint64_t sub_1C4EA2664(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v12 = *a2;
  v13 = 0;
  sub_1C4EA1F34((uint64_t)&v10, a1, &v12, &v13);
  v4 = v10;
  if (v11)
  {
    v16[0] = 0;
    v17 = 0u;
    v14 = 1;
    v15 = -4096;
    v16[1] = (char *)&v17 + 8;
    DWORD1(v17) = 1;
    v18 = *a2;
    v19 = 1;
    v20 = -4096;
    sub_1C4EA2398((unsigned int *)&v19, (unsigned int *)&v14);
    v21 = v23;
    v22 = 0x100000000;
    if ((_DWORD)v17)
      sub_1C4E41EEC((uint64_t)&v21, (uint64_t)&v16[1]);
    v5 = *(_QWORD *)(a1 + 32);
    if (v5 >= *(_QWORD *)(a1 + 40))
    {
      v6 = sub_1C4EA2190((void **)(a1 + 24), (uint64_t)&v18);
    }
    else
    {
      *(_QWORD *)v5 = v18;
      *(_QWORD *)(v5 + 8) = 1;
      *(_QWORD *)(v5 + 16) = -4096;
      sub_1C4EA2398((unsigned int *)(v5 + 8), (unsigned int *)&v19);
      *(_QWORD *)(v5 + 32) = v5 + 48;
      *(_QWORD *)(v5 + 40) = 0x100000000;
      if ((_DWORD)v22)
        sub_1C4E41EEC(v5 + 32, (uint64_t)&v21);
      v6 = (char *)(v5 + 56);
    }
    *(_QWORD *)(a1 + 32) = v6;
    if (v21 != v23)
      free(v21);
    if ((v19 & 1) == 0)
      MEMORY[0x1CAA32FB4](v20, 8);
    if (v16[1] != (char *)&v17 + 8)
      free(v16[1]);
    if ((v14 & 1) == 0)
      MEMORY[0x1CAA32FB4](v15, 8);
    v8 = *(_QWORD *)(a1 + 24);
    v7 = -1227133513 * ((unint64_t)(*(_QWORD *)(a1 + 32) - v8) >> 3) - 1;
    *(_DWORD *)(v4 + 8) = v7;
  }
  else
  {
    v7 = *(_DWORD *)(v10 + 8);
    v8 = *(_QWORD *)(a1 + 24);
  }
  return v8 + 56 * v7 + 8;
}

uint64_t sub_1C4EA2874(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Type *a4, uint64_t a5, uint64_t a6, const llvm::Loop *a7, _DWORD *a8, int a9, char a10, char a11)
{
  uint64_t v17;
  llvm::Value *v18;
  const llvm::SCEV *v19;
  uint64_t result;
  BOOL v21;
  uint64_t v22;
  const llvm::SCEV *SCEV;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  _QWORD *v30;
  unint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  _QWORD *v41;
  int v42;
  uint64_t v43;
  unint64_t v46;

  v17 = *(_QWORD *)(a1 + 384);
  v18 = (llvm::Value *)(a3 & 0xFFFFFFFFFFFFFFF8);
  v19 = (const llvm::SCEV *)llvm::replaceSymbolicStrideSCEV((int8x16_t *)v17, a5, (llvm::Value *)(a3 & 0xFFFFFFFFFFFFFFF8));
  if (llvm::ScalarEvolution::getLoopDisposition(*(llvm::ScalarEvolution **)(v17 + 88), v19, a7) == 1)
    goto LABEL_12;
  if (*((_WORD *)v19 + 12) == 7)
    result = (uint64_t)v19;
  else
    result = 0;
  if (result)
    v21 = 1;
  else
    v21 = a11 == 0;
  if (!v21)
    result = llvm::PredicatedScalarEvolution::getAsAddRec((int8x16_t *)v17, v18);
  if (result)
  {
    if (*(_QWORD *)(result + 40) != 2)
      return 0;
LABEL_12:
    if (!a10
      || (v22 = *(_QWORD *)(a1 + 384),
          SCEV = (const llvm::SCEV *)llvm::PredicatedScalarEvolution::getSCEV((int8x16_t *)v22, v18),
          llvm::ScalarEvolution::getLoopDisposition(*(llvm::ScalarEvolution **)(v22 + 88), SCEV, a7) == 1)
      || llvm::getPtrStride((int8x16_t *)v22, (uint64_t)a4, v18, (uint64_t)a7, a5, 0, 1) == 1
      || llvm::PredicatedScalarEvolution::hasNoOverflow(v22, v18, 1))
    {
LABEL_16:
      if (!*(_DWORD *)(a1 + 64))
      {
        v42 = (*a8)++;
LABEL_42:
        llvm::RuntimePointerChecking::insert(a2, a7, v18, a4, (a3 & 4) != 0, v42, a9, a5, *(int8x16_t **)(a1 + 384));
        return 1;
      }
      v24 = *(_QWORD *)(a1 + 368);
      v27 = *(_QWORD **)(v24 + 8);
      v25 = (_QWORD *)(v24 + 8);
      v26 = v27;
      if (v27)
      {
        do
        {
          v28 = v26[6];
          v29 = v28 < a3;
          if (v28 >= a3)
            v30 = v26;
          else
            v30 = v26 + 1;
          if (!v29)
            v25 = v26;
          v26 = (_QWORD *)*v30;
        }
        while (*v30);
      }
      v31 = *(_QWORD *)(sub_1C4EA2500((uint64_t)(v25 + 4)) + 16) & 0xFFFFFFFFFFFFFFF8;
      v46 = v31;
      v32 = *(_DWORD *)(a6 + 16);
      if (v32)
      {
        v33 = v32 - 1;
        v34 = ((v31 >> 4) ^ (v31 >> 9)) & v33;
        v35 = (_QWORD *)(*(_QWORD *)a6 + 16 * v34);
        v36 = *v35;
        if (*v35 == v31)
          goto LABEL_39;
        v37 = 0;
        v38 = 1;
        while (v36 != -4096)
        {
          if (v37)
            v39 = 0;
          else
            v39 = v36 == -8192;
          if (v39)
            v37 = v35;
          v40 = v34 + v38++;
          v34 = v40 & v33;
          v35 = (_QWORD *)(*(_QWORD *)a6 + 16 * v34);
          v36 = *v35;
          if (*v35 == v31)
            goto LABEL_39;
        }
        if (v37)
          v41 = v37;
        else
          v41 = v35;
      }
      else
      {
        v41 = 0;
      }
      v35 = sub_1C4E38190(a6, (uint64_t)&v46, (uint64_t *)&v46, v41);
      *v35 = v46;
      *((_DWORD *)v35 + 2) = 0;
LABEL_39:
      v42 = *((_DWORD *)v35 + 2);
      if (!v42)
      {
        v42 = (*a8)++;
        *((_DWORD *)v35 + 2) = v42;
      }
      goto LABEL_42;
    }
    v43 = llvm::PredicatedScalarEvolution::getSCEV(*(int8x16_t **)(a1 + 384), v18);
    if (a11 && *(_WORD *)(v43 + 24) == 7)
    {
      llvm::PredicatedScalarEvolution::setNoOverflow(*(_QWORD *)(a1 + 384), v18, 1);
      goto LABEL_16;
    }
    return 0;
  }
  return result;
}

_QWORD *sub_1C4EA2B1C(_QWORD *a1)
{
  int v2;
  _QWORD *result;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *((_DWORD *)a1 + 2);
  result = (_QWORD *)sub_1C619EE18((uint64_t)a1);
  if (v2)
  {
    v4 = 1 << (33 - __clz(v2 - 1));
    if (v4 <= 64)
      v5 = 64;
    else
      v5 = v4;
    if (v5 == *((_DWORD *)a1 + 4))
    {
      a1[1] = 0;
      v6 = 16 * v5;
      v7 = (_QWORD *)*a1;
      do
      {
        *v7 = -4096;
        v7 += 2;
        v6 -= 16;
      }
      while (v6);
    }
    else
    {
      MEMORY[0x1CAA32FB4](*a1, 8);
      v8 = (4 * v5 / 3 + 1) | ((unint64_t)(4 * v5 / 3 + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      *((_DWORD *)a1 + 4) = v9;
      result = operator new(16 * v9, (std::align_val_t)8uLL);
      *a1 = result;
      a1[1] = 0;
      v10 = *((unsigned int *)a1 + 4);
      if ((_DWORD)v10)
      {
        v11 = 16 * v10;
        do
        {
          *result = -4096;
          result += 2;
          v11 -= 16;
        }
        while (v11);
      }
    }
  }
  else if (*((_DWORD *)a1 + 4))
  {
    result = (_QWORD *)MEMORY[0x1CAA32FB4](*a1, 8);
    *a1 = 0;
    a1[1] = 0;
    *((_DWORD *)a1 + 4) = 0;
  }
  else
  {
    a1[1] = 0;
  }
  return result;
}

uint64_t sub_1C4EA2C2C(uint64_t a1, int a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  int v10;
  BOOL v11;
  int v12;

  if (a2)
  {
    v4 = (a2 - 1) & ((a3 >> 9) ^ a3);
    v5 = (_QWORD *)(a1 + 32 * v4);
    v6 = *v5;
    if (*v5 == a3)
    {
      v7 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v6 != -4)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v6 == -16;
        if (v11)
          v9 = v5;
        v12 = v4 + v10++;
        v4 = v12 & (a2 - 1);
        v5 = (_QWORD *)(a1 + 32 * v4);
        v6 = *v5;
        v7 = 1;
        if (*v5 == a3)
          goto LABEL_4;
      }
      v7 = 0;
      if (v9)
        v5 = v9;
    }
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
LABEL_4:
  *a4 = v5;
  return v7;
}

char **sub_1C4EA2CC0(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v5 = 48 * v3;
    do
    {
      v6 = *(char **)&v2[v5 - 32];
      if (&v2[v5 - 16] != v6)
      {
        v7 = v5;
        v8 = v2;
        free(v6);
        v5 = v7;
        v2 = v8;
      }
      v5 -= 48;
    }
    while (v5);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_1C4EA2D4C(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t result;
  llvm::raw_ostream *v6;
  const char *v7;
  __int16 v8;

  if (*(_QWORD *)a1)
  {
    v7 = "cl::location(x) specified more than once!";
    v8 = 259;
    v6 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    return llvm::cl::Option::error(a2, (llvm::Twine *)&v7, 0, 0, v6);
  }
  else
  {
    result = 0;
    *(_QWORD *)a1 = a3;
    *(_BYTE *)(a1 + 20) = 1;
    *(_DWORD *)(a1 + 16) = *a3;
  }
  return result;
}

__n128 sub_1C4EA2DC8(_WORD *a1, __n128 *a2, char **a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7F2730, "store-to-load-forwarding-conflict-detection", 0x2BuLL);
  word_1ED7F273A = (32 * (*a1 & 3)) | word_1ED7F273A & 0xFF9F;
  result = *a2;
  xmmword_1ED7F2750 = (__int128)*a2;
  v7 = *a3;
  byte_1ED7F27B0 = **a3;
  byte_1ED7F27C1 = 1;
  byte_1ED7F27C0 = *v7;
  return result;
}

uint64_t sub_1C4EA2E4C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v11;
  BOOL v12;
  char *v13;
  _QWORD v14[2];
  int v15;

  v14[0] = a2;
  v14[1] = a3;
  v15 = a4;
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_QWORD *)a1;
  v7 = (char *)v14;
  if (v5 >= *(_DWORD *)(a1 + 12))
  {
    v11 = v5 + 1;
    v12 = v6 + 24 * v5 > (unint64_t)v14;
    if (v6 <= (unint64_t)v14 && v12)
    {
      v13 = (char *)v14 - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v11, 24);
      v6 = *(_QWORD *)a1;
      v7 = &v13[*(_QWORD *)a1];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v11, 24);
      v6 = *(_QWORD *)a1;
      v7 = (char *)v14;
    }
  }
  v8 = v6 + 24 * *(unsigned int *)(a1 + 8);
  v9 = *(_OWORD *)v7;
  *(_QWORD *)(v8 + 16) = *((_QWORD *)v7 + 2);
  *(_OWORD *)v8 = v9;
  LODWORD(v8) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v8;
  return *(_QWORD *)a1 + 24 * v8 - 24;
}

unint64_t sub_1C4EA2F20(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 48 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C619F4AC(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C619F4AC(a1, v5);
    }
  }
  return a2;
}

uint64_t sub_1C4EA2F88(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v12;
  uint64_t v13;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v12 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v12);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_10;
    }
    v7 = (_DWORD *)(a2 + 8);
    v6 = *(unsigned int *)(a2 + 8);
    v8 = *(unsigned int *)(a1 + 8);
    if (v8 >= v6)
    {
      if ((_DWORD)v6)
        memmove(*(void **)a1, v4, 4 * v6);
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 12) < v6)
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6, 4);
    }
    else if ((_DWORD)v8)
    {
      v13 = *(unsigned int *)(a1 + 8);
      memmove(*(void **)a1, v4, 4 * v8);
      v9 = v13;
LABEL_7:
      v10 = *v7;
      if (v9 != v10)
        memcpy((void *)(*(_QWORD *)a1 + 4 * v9), (const void *)(*(_QWORD *)a2 + 4 * v9), *(_QWORD *)a2 + 4 * v10 - (*(_QWORD *)a2 + 4 * v9));
LABEL_9:
      *(_DWORD *)(a1 + 8) = v6;
LABEL_10:
      *v7 = 0;
      return a1;
    }
    v9 = 0;
    goto LABEL_7;
  }
  return a1;
}

_QWORD *sub_1C4EA30AC(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  BOOL v12;
  unsigned int v13;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v10 = 0;
LABEL_8:
    v6 = sub_1C4E38190(a1, (uint64_t)a2, a2, v10);
    *v6 = *a2;
    *((_DWORD *)v6 + 2) = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -4096)
    {
      if (v8)
        v12 = 0;
      else
        v12 = v7 == -8192;
      if (v12)
        v8 = v6;
      v13 = v5 + v9++;
      v5 = v13 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v13 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v10 = v8;
    else
      v10 = v6;
    goto LABEL_8;
  }
  return v6;
}

uint64_t sub_1C4EA3168(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 4 * v4);
      goto LABEL_8;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 4);
    }
    else if ((_DWORD)v5)
    {
      memmove(*(void **)a1, *(const void **)a2, 4 * v5);
LABEL_6:
      v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6)
        memcpy((void *)(*(_QWORD *)a1 + 4 * v5), (const void *)(*(_QWORD *)a2 + 4 * v5), *(_QWORD *)a2 + 4 * v6 - (*(_QWORD *)a2 + 4 * v5));
LABEL_8:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

void sub_1C4EA3234(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  char *v8;
  _DWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *a1;
  v4 = *a1 + 16;
  v20 = a2 | 4;
  v5 = sub_1C4EA3390(v4, (unint64_t *)&v20);
  v6 = v5;
  v8 = (char *)v5[2];
  v7 = v5[3];
  if ((unint64_t)v8 >= v7)
  {
    v10 = (char *)v5[1];
    v11 = (v8 - v10) >> 2;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 62)
      abort();
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_1C4764EE4();
      v15 = (char *)operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[4 * v11];
    *(_DWORD *)v16 = *(_DWORD *)(v3 + 184);
    v9 = v16 + 4;
    while (v8 != v10)
    {
      v17 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v16 - 1) = v17;
      v16 -= 4;
    }
    v6[1] = v16;
    v6[2] = v9;
    v6[3] = &v15[4 * v14];
    if (v10)
      operator delete(v10);
  }
  else
  {
    *(_DWORD *)v8 = *(_DWORD *)(v3 + 184);
    v9 = v8 + 4;
  }
  v6[2] = v9;
  v18 = a1[1];
  v19 = *(unsigned int *)(v3 + 48);
  if (v19 >= *(_DWORD *)(v3 + 52))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 40, v3 + 56, v19 + 1, 8);
    LODWORD(v19) = *(_DWORD *)(v3 + 48);
  }
  *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8 * v19) = v18;
  ++*(_DWORD *)(v3 + 48);
  ++*(_DWORD *)(v3 + 184);
}

_QWORD *sub_1C4EA3390(uint64_t a1, unint64_t *a2)
{
  char v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v8;

  v8 = 0;
  v4 = sub_1C4EA2C2C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4EA33F8(a1, a2, v8);
    v6 = *a2;
    v5[2] = 0;
    v5[3] = 0;
    *v5 = v6;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C4EA33F8(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4EA34AC(a1, v6);
  v8 = 0;
  sub_1C4EA2C2C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C4EA34AC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C619F680(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -4;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

void sub_1C4EA3564(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  char *v8;
  _DWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v3 = *a1;
  v4 = *a1 + 16;
  v20 = a2 & 0xFFFFFFFFFFFFFFFBLL;
  v5 = sub_1C4EA3390(v4, &v20);
  v6 = v5;
  v8 = (char *)v5[2];
  v7 = v5[3];
  if ((unint64_t)v8 >= v7)
  {
    v10 = (char *)v5[1];
    v11 = (v8 - v10) >> 2;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 62)
      abort();
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_1C4764EE4();
      v15 = (char *)operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[4 * v11];
    *(_DWORD *)v16 = *(_DWORD *)(v3 + 184);
    v9 = v16 + 4;
    while (v8 != v10)
    {
      v17 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v16 - 1) = v17;
      v16 -= 4;
    }
    v6[1] = v16;
    v6[2] = v9;
    v6[3] = &v15[4 * v14];
    if (v10)
      operator delete(v10);
  }
  else
  {
    *(_DWORD *)v8 = *(_DWORD *)(v3 + 184);
    v9 = v8 + 4;
  }
  v6[2] = v9;
  v18 = a1[1];
  v19 = *(unsigned int *)(v3 + 48);
  if (v19 >= *(_DWORD *)(v3 + 52))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 40, v3 + 56, v19 + 1, 8);
    LODWORD(v19) = *(_DWORD *)(v3 + 48);
  }
  *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8 * v19) = v18;
  ++*(_DWORD *)(v3 + 48);
  ++*(_DWORD *)(v3 + 184);
}

_QWORD *sub_1C4EA36C0(uint64_t a1, unint64_t *a2)
{
  char v4;
  _QWORD *v5;
  unint64_t v7;
  _QWORD *v8;

  v8 = 0;
  v4 = sub_1C4EA2C2C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4EA33F8(a1, a2, v8);
    v7 = *a2;
    v5[2] = 0;
    v5[3] = 0;
    *v5 = v7;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_1C4EA372C(uint64_t **a1, unint64_t a2, unint64_t a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD *v12;
  uint64_t *v13;

  v7 = (uint64_t *)(a1 + 1);
  v6 = a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = v6;
        v9 = v6[4];
        if (v9 <= a2)
          break;
LABEL_3:
        v6 = (uint64_t *)*v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_12;
      }
      if (v9 >= a2)
      {
        v10 = v8[5];
        if (v10 > a3)
          goto LABEL_3;
        if (v10 >= a3)
          return 0;
      }
      v6 = (uint64_t *)v8[1];
      if (!v6)
      {
        v7 = v8 + 1;
        goto LABEL_12;
      }
    }
  }
  v8 = (uint64_t *)(a1 + 1);
LABEL_12:
  v12 = operator new(0x30uLL);
  v12[2] = *a4;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = v8;
  *v7 = (uint64_t)v12;
  v13 = (uint64_t *)**a1;
  if (v13)
  {
    *a1 = v13;
    v12 = (_OWORD *)*v7;
  }
  sub_1C4768E74(a1[1], (uint64_t *)v12);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return 1;
}

uint64_t sub_1C4EA3804(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[40];
  uint64_t v7;
  _QWORD ***v8[2];
  __int128 v9;
  __int128 v10;

  *(_OWORD *)v6 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&v6[16] = *(_OWORD *)(a1 + 40);
  v3 = *(_QWORD *)a1;
  *(_QWORD *)&v6[32] = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 8);
  v8[0] = (_QWORD ***)a2;
  v8[1] = (_QWORD ***)-1;
  v9 = *(_OWORD *)&v6[8];
  v10 = *(_OWORD *)&v6[24];
  llvm::AliasSetTracker::addPointer(v3 + 296, v8, 0);
  v8[0] = (_QWORD ***)(a2 | 4);
  v4 = sub_1C4EA2664(v3, (unint64_t *)v8);
  return sub_1C4EA3880(v4, &v7);
}

uint64_t sub_1C4EA3880(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  int v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v10 = 0;
  result = sub_1C4EA3998(a1, *a2, &v10);
  if ((result & 1) != 0)
    return result;
  v5 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v6 = 1;
  else
    v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 4) > v6 >> 3)
      goto LABEL_7;
  }
  else
  {
    v6 *= 2;
  }
  sub_1C4EA3A44(a1, v6);
  v10 = 0;
  result = sub_1C4EA3998(a1, *a2, &v10);
LABEL_7:
  v7 = v10;
  *(_DWORD *)a1 += 2;
  if (*v7 != -4096)
    --*(_DWORD *)(a1 + 4);
  *v7 = *a2;
  v8 = *a2;
  v9 = *(unsigned int *)(a1 + 32);
  if (v9 >= *(_DWORD *)(a1 + 36))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, a1 + 40, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a1 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v9) = v8;
  ++*(_DWORD *)(a1 + 32);
  return result;
}

uint64_t sub_1C4EA3998(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_10;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_10;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_10:
  *a3 = v7;
  return result;
}

uint64_t sub_1C4EA3A44(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a2 >= 2)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(uint64_t **)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (a2 > 1)
    {
      v12 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v12;
    }
    else
    {
      *(_DWORD *)a1 = v6 | 1;
    }
    sub_1C4EA3B9C(a1, v7, &v7[v8]);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = &v13;
  if ((*(_QWORD *)(a1 + 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
  {
    v13 = *(_QWORD *)(a1 + 8);
    v9 = &v14;
  }
  if (a2 >= 2)
  {
    *(_DWORD *)a1 = v6 & 0xFFFFFFFE;
    v10 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v10;
  }
  return sub_1C4EA3B9C(a1, &v13, v9);
}

uint64_t sub_1C4EA3B9C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _DWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v3 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v3 & 1) != 0)
  {
    v5 = (_QWORD *)(result + 8);
    v6 = (_QWORD *)(result + 16);
  }
  else
  {
    v4 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = *(_QWORD **)(result + 8);
    v6 = &v5[v4];
  }
  do
    *v5++ = -4096;
  while (v5 != v6);
LABEL_5:
  if (a2 != a3)
  {
    do
    {
      v10 = a3;
      v7 = (_DWORD *)result;
      v8 = a2;
      v9 = *a2;
      if ((v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v11 = 0;
        sub_1C4EA3998(result, v9, &v11);
        *v11 = *v8;
        *v7 += 2;
      }
      a2 = v8 + 1;
      a3 = v10;
      result = (uint64_t)v7;
    }
    while (v8 + 1 != v10);
  }
  return result;
}

_QWORD *sub_1C4EA3C6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD *result;
  _BYTE v7[40];
  uint64_t v8;
  _QWORD ***v9[2];
  __int128 v10;
  __int128 v11;

  *(_OWORD *)v7 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&v7[16] = *(_OWORD *)(a1 + 40);
  v3 = *(_QWORD *)a1;
  v4 = *(unsigned __int8 *)(a1 + 64);
  *(_QWORD *)&v7[32] = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 8);
  v9[0] = (_QWORD ***)a2;
  v9[1] = (_QWORD ***)-1;
  v10 = *(_OWORD *)&v7[8];
  v11 = *(_OWORD *)&v7[24];
  llvm::AliasSetTracker::addPointer(v3 + 296, v9, 0);
  v9[0] = (_QWORD ***)(a2 & 0xFFFFFFFFFFFFFFFBLL);
  v5 = sub_1C4EA2664(v3, (unint64_t *)v9);
  result = (_QWORD *)sub_1C4EA3880(v5, &v8);
  if (v4)
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)(v3 + 136), a2);
  return result;
}

_QWORD *sub_1C4EA3D04(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C619F84C(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4EA3DBC(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 368);
  if (v2 != (void *)(a1 + 384))
    free(v2);
  v3 = *(void **)(a1 + 280);
  if (v3 != (void *)(a1 + 296))
    free(v3);
  sub_1C4EA2CC0((char **)(a1 + 152));
  sub_1C4EA3E1C((char **)(a1 + 8));
  return a1;
}

char **sub_1C4EA3E1C(char **a1)
{
  char *v2;
  uint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  int32x2_t *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v5 = &v2[64 * v3];
    do
    {
      v6 = *((_QWORD *)v5 - 6);
      if (v6 != -8192 && v6 != -4096 && v6 != 0)
      {
        v8 = *((_QWORD *)v5 - 8) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v8 = *((_QWORD *)v5 - 7);
        v9 = (unint64_t *)*((_QWORD *)v5 - 7);
        if (v9)
        {
          *v9 = *v9 & 7 | v8;
        }
        else
        {
          v10 = *((_QWORD *)v5 - 6);
          v11 = ***(int32x2_t ****)v10;
          v12 = (unint64_t)v11[303];
          if (v12 <= v8)
          {
            v13 = v11[305].u32[0];
            if (v12 + 16 * v13 > v8)
            {
              v14 = v13 - 1;
              LODWORD(v15) = v14 & ((v10 >> 4) ^ (v10 >> 9));
              v16 = (uint64_t *)(v12 + 16 * v15);
              v17 = *v16;
              if (v10 == *v16)
              {
LABEL_22:
                *v16 = -8192;
                v11[304] = vadd_s32(v11[304], (int32x2_t)0x1FFFFFFFFLL);
                v10 = *((_QWORD *)v5 - 6);
              }
              else
              {
                v18 = 1;
                while (v17 != -4096)
                {
                  v19 = v15 + v18++;
                  v15 = v19 & v14;
                  v17 = *(_QWORD *)(v12 + 16 * v15);
                  if (v10 == v17)
                  {
                    v16 = (uint64_t *)(v12 + 16 * v15);
                    goto LABEL_22;
                  }
                }
              }
              *(_BYTE *)(v10 + 17) &= ~1u;
            }
          }
        }
      }
      v5 -= 64;
    }
    while (v5 != v2);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

_QWORD *sub_1C4EA3F64(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C619FA10(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t *sub_1C4EA401C(uint64_t *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = (void *)a1[12];
  if (v2 != (void *)a1[11])
    free(v2);
  MEMORY[0x1CAA32FB4](a1[8], 8);
  v3 = a1[7];
  a1[7] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
  {
    v8 = *(void **)(v4 + 224);
    if (v8 != (void *)(v4 + 240))
      free(v8);
    v9 = *(void **)(v4 + 40);
    if (v9 != (void *)(v4 + 56))
      free(v9);
    sub_1C4EA41C4((unsigned int *)(v4 + 16));
    MEMORY[0x1CAA32FB4](*(_QWORD *)(v4 + 16), 8);
    MEMORY[0x1CAA32FC0](v4, 0x10E0C402CB7FD3FLL);
  }
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
  {
    v10 = *(void **)(v5 + 368);
    if (v10 != (void *)(v5 + 384))
      free(v10);
    v11 = *(void **)(v5 + 280);
    if (v11 != (void *)(v5 + 296))
      free(v11);
    sub_1C4EA2CC0((char **)(v5 + 152));
    sub_1C4EA3E1C((char **)(v5 + 8));
    MEMORY[0x1CAA32FC0](v5, 0x10A0C405479AB48);
  }
  v6 = *a1;
  *a1 = 0;
  if (v6)
  {
    sub_1C4EA4224((uint64_t *)(v6 + 104));
    if (*(_BYTE *)(v6 + 72))
    {
      sub_1C4E43068(v6 + 48);
      MEMORY[0x1CAA32FB4](*(_QWORD *)(v6 + 48), 8);
      *(_BYTE *)(v6 + 72) = 0;
    }
    sub_1C4EA427C((_QWORD *)(v6 + 24));
    MEMORY[0x1CAA32FB4](*(_QWORD *)(v6 + 24), 8);
    MEMORY[0x1CAA32FB4](*(_QWORD *)v6, 8);
    MEMORY[0x1CAA32FC0](v6, 0x1062C40BD23953CLL);
  }
  return a1;
}

void sub_1C4EA41C4(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v6;

  v1 = a1[4];
  if ((_DWORD)v1)
  {
    v2 = 32 * v1;
    v3 = (_QWORD *)(*(_QWORD *)a1 + 16);
    do
    {
      v4 = *(v3 - 2);
      if (v4 != -4 && v4 != -16)
      {
        v6 = (void *)*(v3 - 1);
        if (v6)
        {
          *v3 = v6;
          operator delete(v6);
        }
      }
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
}

uint64_t *sub_1C4EA4224(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 40);
    if (v3 != (void *)(v2 + 56))
      free(v3);
    MEMORY[0x1CAA32FC0](v2, 0x10D1C407D0B9851);
  }
  return a1;
}

_QWORD *sub_1C4EA427C(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *((unsigned int *)result + 4);
  if ((_DWORD)v1)
  {
    v2 = 48 * v1;
    v3 = (uint64_t *)(*result + 24);
    do
    {
      v4 = *v3;
      if (*v3 != -4096 && v4 != -8192 && v4 != 0)
        result = llvm::ValueHandleBase::RemoveFromUseList(v3 - 2);
      v3 += 6;
      v2 -= 48;
    }
    while (v2);
  }
  return result;
}

void sub_1C4EA42DC(llvm::SmallPtrSetImplBase *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;

  v2 = *((_QWORD *)this + 13);
  while (2)
  {
    v3 = *(_QWORD *)(v2 - 24);
    if (!*(_BYTE *)(v2 - 8))
    {
      *(_QWORD *)(v2 - 16) = *(_QWORD *)(v3 + 8);
      *(_BYTE *)(v2 - 8) = 1;
    }
    while (1)
    {
      v4 = *(uint64_t **)(v2 - 16);
      if (v4 == *(uint64_t **)(v3 + 16))
        break;
      *(_QWORD *)(v2 - 16) = v4 + 1;
      v5 = *v4;
      sub_1C4774094(this, *v4);
      if (v6)
      {
        v9 = (_BYTE *)*((_QWORD *)this + 13);
        v8 = *((_QWORD *)this + 14);
        if ((unint64_t)v9 >= v8)
        {
          v11 = (_BYTE *)*((_QWORD *)this + 12);
          v12 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v11) >> 3) + 1;
          if (v12 > 0xAAAAAAAAAAAAAAALL)
            abort();
          v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (_QWORD)v11) >> 3);
          if (2 * v13 > v12)
            v12 = 2 * v13;
          if (v13 >= 0x555555555555555)
            v14 = 0xAAAAAAAAAAAAAAALL;
          else
            v14 = v12;
          if (v14)
          {
            if (v14 > 0xAAAAAAAAAAAAAAALL)
              sub_1C4764EE4();
            v15 = (char *)operator new(24 * v14);
          }
          else
          {
            v15 = 0;
          }
          v16 = &v15[8 * ((v9 - v11) >> 3)];
          *(_QWORD *)v16 = v5;
          v16[8] = 0;
          v16[16] = 0;
          v10 = v16 + 24;
          if (v9 != v11)
          {
            do
            {
              v17 = *(_OWORD *)(v9 - 24);
              *((_QWORD *)v16 - 1) = *((_QWORD *)v9 - 1);
              *(_OWORD *)(v16 - 24) = v17;
              v16 -= 24;
              v9 -= 24;
            }
            while (v9 != v11);
            v9 = (_BYTE *)*((_QWORD *)this + 12);
          }
          *((_QWORD *)this + 12) = v16;
          *((_QWORD *)this + 13) = v10;
          *((_QWORD *)this + 14) = &v15[24 * v14];
          if (v9)
            operator delete(v9);
        }
        else
        {
          *(_QWORD *)v9 = v5;
          v9[8] = 0;
          v10 = v9 + 24;
          v9[16] = 0;
        }
        *((_QWORD *)this + 13) = v10;
        return;
      }
    }
    v7 = *((_QWORD *)this + 12);
    v2 = *((_QWORD *)this + 13) - 24;
    *((_QWORD *)this + 13) = v2;
    if (v7 != v2)
      continue;
    break;
  }
}

uint64_t sub_1C4EA4474()
{
  int v1;
  int *v2;
  int v3;
  int *v4;
  __n128 v5;

  LODWORD(v2) = 1;
  v5.n128_u64[0] = (unint64_t)"Sets the SIMD width. Zero is autoselect.";
  v5.n128_u64[1] = 40;
  v4 = &llvm::VectorizerParams::VectorizationFactor;
  sub_1C619EF4C(&v2, (__int128 *)&v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4E9AEF0, &qword_1ED7F22B0, &dword_1C475E000);
  LODWORD(v2) = 1;
  v5.n128_u64[0] = (unint64_t)"Sets the vectorization interleave count. Zero is autoselect.";
  v5.n128_u64[1] = 60;
  v4 = &llvm::VectorizerParams::VectorizationInterleave;
  sub_1C619F0C0(&v2, (__int128 *)&v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4E9AEF0, &qword_1ED7F2370, &dword_1C475E000);
  v3 = 1;
  v5.n128_u64[0] = (unint64_t)"When performing memory disambiguation checks at runtime do not generate more than t"
                                     "his number of comparisons (default = 8).";
  v5.n128_u64[1] = 123;
  v4 = &llvm::VectorizerParams::RuntimeMemoryCheckThreshold;
  v1 = 8;
  v2 = &v1;
  sub_1C619F1D8(&v3, (__int128 *)&v5, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4E9AEF0, &qword_1ED7F2430, &dword_1C475E000);
  LODWORD(v2) = 1;
  v5.n128_u64[0] = (unint64_t)"Maximum number of comparisons done when trying to merge runtime memory checks. (default = 100)";
  v5.n128_u64[1] = 94;
  v3 = 100;
  v4 = &v3;
  sub_1C6147F28((uint64_t)&unk_1ED7F24F0, "memory-check-merge-threshold", &v2, &v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F24F0, &dword_1C475E000);
  LODWORD(v2) = 1;
  v5.n128_u64[0] = (unint64_t)"Maximum number of dependences collected by loop-access analysis (default = 100)";
  v5.n128_u64[1] = 79;
  v3 = 100;
  v4 = &v3;
  sub_1C619F32C(&v2, (__int128 *)&v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7F25B0, &dword_1C475E000);
  LOBYTE(v3) = 1;
  LODWORD(v2) = 1;
  v4 = &v3;
  v5.n128_u64[0] = (unint64_t)"Enable symbolic stride memory access versioning";
  v5.n128_u64[1] = 47;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED7F2670, "enable-mem-access-versioning", (_BYTE **)&v4, &v2, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F2670, &dword_1C475E000);
  LODWORD(v2) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable conflict detection in loop-access analysis";
  v5.n128_u64[1] = 49;
  LOBYTE(v3) = 1;
  v4 = &v3;
  sub_1C619F408(&v2, &v5, (char **)&v4);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7F2730, &dword_1C475E000);
}

void *llvm::AllAnalysesOn<llvm::Loop>::ID()
{
  return &llvm::AllAnalysesOn<llvm::Loop>::SetKey;
}

_QWORD *llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::Invalidator::Invalidator(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

{
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::AnalysisManager(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::AnalysisManager(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  v3 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  v4 = *(_DWORD *)(result + 36);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v4;
  v5 = *(_DWORD *)(result + 40);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v5;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  v6 = *(_DWORD *)(result + 60);
  *(_DWORD *)(result + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = v6;
  v7 = *(_DWORD *)(result + 64);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = v7;
  return result;
}

{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  v3 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  v4 = *(_DWORD *)(result + 36);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v4;
  v5 = *(_DWORD *)(result + 40);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v5;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  v6 = *(_DWORD *)(result + 60);
  *(_DWORD *)(result + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = v6;
  v7 = *(_DWORD *)(result + 64);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = v7;
  return result;
}

uint64_t *llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;

  v4 = *((unsigned int *)a1 + 4);
  v5 = *a1;
  if ((_DWORD)v4)
  {
    v6 = (uint64_t *)(v5 + 8);
    v7 = 16 * v4;
    do
    {
      if ((*(v6 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
    v5 = *a1;
  }
  MEMORY[0x1CAA32FB4](v5, 8);
  *a1 = 0;
  a1[1] = 0;
  *((_DWORD *)a1 + 4) = 0;
  *a1 = *a2;
  *a2 = 0;
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  v10 = a1 + 3;
  v9 = a1[3];
  v11 = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v11;
  v12 = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  v13 = *((unsigned int *)a1 + 10);
  if ((_DWORD)v13)
  {
    v14 = (uint64_t *)(v9 + 8);
    v15 = 32 * v13;
    do
    {
      if ((*(v14 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        sub_1C4D8B4AC(v14);
      v14 += 4;
      v15 -= 32;
    }
    while (v15);
    v9 = *v10;
  }
  MEMORY[0x1CAA32FB4](v9, 8);
  *v10 = 0;
  a1[4] = 0;
  *((_DWORD *)a1 + 10) = 0;
  a1[3] = a2[3];
  a2[3] = 0;
  *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  v16 = *((_DWORD *)a1 + 9);
  *((_DWORD *)a1 + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v16;
  v17 = *((_DWORD *)a1 + 10);
  *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v17;
  MEMORY[0x1CAA32FB4](a1[6], 8);
  a1[6] = 0;
  a1[7] = 0;
  *((_DWORD *)a1 + 16) = 0;
  a1[6] = a2[6];
  a2[6] = 0;
  *((_DWORD *)a1 + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = 0;
  v18 = *((_DWORD *)a1 + 15);
  *((_DWORD *)a1 + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v18;
  v19 = *((_DWORD *)a1 + 16);
  *((_DWORD *)a1 + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v19;
  return a1;
}

BOOL llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::empty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 56) == 0;
}

void llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::clear(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CachedResultImpl;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t *i;
  _QWORD *v23;
  uint64_t v24[2];
  _QWORD *v25;

  CachedResultImpl = llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::getCachedResultImpl(a1, (uint64_t)&llvm::PassInstrumentationAnalysis::Key, a2);
  if (CachedResultImpl)
  {
    v9 = *(_QWORD *)(CachedResultImpl + 8);
    if (v9)
    {
      v10 = *(unsigned int *)(v9 + 1160);
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD **)(v9 + 1152);
        v12 = 32 * v10;
        do
        {
          v13 = v11[3];
          v14 = v11;
          if ((v13 & 2) == 0)
            v14 = (_QWORD *)*v11;
          (*(void (**)(_QWORD *, uint64_t, uint64_t))(v13 & 0xFFFFFFFFFFFFFFF8))(v14, a3, a4);
          v11 += 4;
          v12 -= 32;
        }
        while (v12);
      }
    }
  }
  v15 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v15)
  {
    v16 = *(_QWORD *)(a1 + 24);
    v17 = ((_DWORD)v15 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v18 = (uint64_t *)(v16 + 32 * v17);
    v19 = *v18;
    if (*v18 == a2)
    {
LABEL_14:
      if (v18 != (uint64_t *)(v16 + 32 * v15))
      {
        for (i = (uint64_t *)v18[2]; i != v18 + 1; i = (uint64_t *)i[1])
        {
          v24[0] = i[2];
          v24[1] = a2;
          v25 = 0;
          if (sub_1C4DD9D34((uint64_t *)(a1 + 48), v24, &v25))
          {
            v23 = v25;
            *v25 = -8192;
            v23[1] = -8192;
            *(int32x2_t *)(a1 + 56) = vadd_s32(*(int32x2_t *)(a1 + 56), (int32x2_t)0x1FFFFFFFFLL);
          }
        }
        sub_1C4D8B4AC(v18 + 1);
        *v18 = -8192;
        *(int32x2_t *)(a1 + 32) = vadd_s32(*(int32x2_t *)(a1 + 32), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    else
    {
      v20 = 1;
      while (v19 != -4096)
      {
        v21 = v17 + v20++;
        v17 = v21 & (v15 - 1);
        v19 = *(_QWORD *)(v16 + 32 * v17);
        if (v19 == a2)
        {
          v18 = (uint64_t *)(v16 + 32 * v17);
          goto LABEL_14;
        }
      }
    }
  }
}

{
  __ZN4llvm15AnalysisManagerINS_4LoopEJRNS_27LoopStandardAnalysisResultsEEE5clearERS1_NS_9StringRefE(a1, a2, a3, a4);
}

void llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::clear(uint64_t a1)
{
  sub_1C4EA4BEC((_DWORD *)(a1 + 48));
  sub_1C4EA4C40((_DWORD *)(a1 + 24));
}

_DWORD *sub_1C4EA4BEC(_DWORD *result)
{
  unsigned int v1;
  _QWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if (v1)
      {
        v2 = *(_QWORD **)result;
        v3 = *(_QWORD *)result + 24 * v1;
        do
        {
          *v2 = -4096;
          v2[1] = -4096;
          v2 += 3;
        }
        while (v2 != (_QWORD *)v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
    else
    {
      return sub_1C4EA5F30(result);
    }
  }
  return result;
}

void sub_1C4EA4C40(_DWORD *a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v1 = a1[2];
  if (v1 || a1[3])
  {
    v2 = a1[4];
    if (v2 > 4 * v1 && v2 >= 0x41)
    {
      sub_1C4EA5FD0(a1);
      return;
    }
    if ((_DWORD)v2)
    {
      v3 = 32 * v2;
      v4 = (uint64_t *)(*(_QWORD *)a1 + 8);
      while (1)
      {
        v5 = *(v4 - 1);
        if (v5 == -8192)
          goto LABEL_11;
        if (v5 != -4096)
          break;
LABEL_12:
        v4 += 4;
        v3 -= 32;
        if (!v3)
          goto LABEL_13;
      }
      sub_1C4D8B4AC(v4);
LABEL_11:
      *(v4 - 1) = -4096;
      goto LABEL_12;
    }
LABEL_13:
    *((_QWORD *)a1 + 1) = 0;
  }
}

void llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::invalidate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t CachedResultImpl;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  char v41[8];
  uint64_t v42[3];
  _QWORD v43[2];
  uint64_t v44;
  _QWORD *v45;
  unsigned int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (!sub_1C4DDA07C(a3, (uint64_t)&llvm::AllAnalysesOn<llvm::Loop>::SetKey))
  {
    v44 = 1;
    for (i = 8; i != 136; i += 16)
      *(uint64_t *)((char *)&v44 + i) = -4096;
    v43[0] = &v44;
    v43[1] = a1 + 48;
    v38 = (uint64_t *)(a1 + 48);
    v42[0] = a2;
    v7 = sub_1C4EA60B8(a1 + 24, v42);
    v8 = (uint64_t)(v7 + 1);
    v39 = v7;
    v9 = (uint64_t *)v7[2];
    if (v9 != v7 + 1)
    {
      do
      {
        v10 = v9[2];
        v11 = v9[3];
        v12 = sub_1C4D91F84((uint64_t)&v44, v10);
        if ((v44 & 1) != 0)
          v13 = &v45;
        else
          v13 = v45;
        v14 = v46;
        if ((v44 & 1) != 0)
          v14 = 8;
        if (&v13[2 * v14] == (_QWORD *)v12)
        {
          v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v11 + 16))(v11, a2, a3, v43);
          v40 = v10;
          v41[0] = v15;
          sub_1C4D921A4((uint64_t)&v44, &v40, v41, (uint64_t)v42);
        }
        v9 = (uint64_t *)v9[1];
      }
      while (v9 != (uint64_t *)v8);
    }
    v16 = v39;
    if (v44 >= 2)
    {
      v17 = (uint64_t *)v39[2];
      while (v17 != (uint64_t *)v8)
      {
        v18 = v17[2];
        v42[0] = v18;
        v40 = 0;
        if (sub_1C4D92000((uint64_t)&v44, v42, &v40) && *(_BYTE *)(v40 + 8))
        {
          CachedResultImpl = llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::getCachedResultImpl(a1, (uint64_t)&llvm::PassInstrumentationAnalysis::Key, a2);
          if (CachedResultImpl)
          {
            v20 = CachedResultImpl;
            v42[0] = 0;
            v37 = a1;
            if ((sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v18, v42) & 1) != 0)
              v21 = v42[0];
            else
              v21 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
            v22 = *(_QWORD *)(v20 + 8);
            if (v22)
            {
              v23 = *(unsigned int *)(v22 + 1016);
              if ((_DWORD)v23)
              {
                v24 = *(_QWORD *)(v21 + 8);
                v25 = *(_QWORD **)(v22 + 1008);
                v26 = 32 * v23;
                do
                {
                  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
                  v29 = v28;
                  v42[0] = 0;
                  v30 = (_QWORD *)operator new();
                  *v30 = &unk_1E8138DE8;
                  v30[1] = a2;
                  v31 = v42[0];
                  v42[0] = (uint64_t)v30;
                  if (v31)
                    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
                  v32 = v25[3];
                  v33 = v25;
                  if ((v32 & 2) == 0)
                    v33 = (_QWORD *)*v25;
                  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t *))(v32 & 0xFFFFFFFFFFFFFFF8))(v33, v27, v29, v42);
                  v34 = v42[0];
                  v42[0] = 0;
                  if (v34)
                    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
                  v25 += 4;
                  v26 -= 32;
                }
                while (v26);
              }
            }
            a1 = v37;
            v16 = v39;
          }
          v17 = (uint64_t *)sub_1C618472C(v8, v17);
          v42[0] = v18;
          v42[1] = a2;
          v40 = 0;
          if (sub_1C4DD9D34(v38, v42, &v40))
          {
            v35 = v40;
            *(_QWORD *)v40 = -8192;
            *(_QWORD *)(v35 + 8) = -8192;
            *(int32x2_t *)(a1 + 56) = vadd_s32(*(int32x2_t *)(a1 + 56), (int32x2_t)0x1FFFFFFFFLL);
          }
        }
        else
        {
          v17 = (uint64_t *)v17[1];
        }
      }
    }
    if (!v16[3])
    {
      v42[0] = 0;
      if (sub_1C4DDA200(*(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 40), a2, v42))
      {
        v36 = (_QWORD *)v42[0];
        sub_1C4D8B4AC((uint64_t *)(v42[0] + 8));
        *v36 = -8192;
        *(int32x2_t *)(a1 + 32) = vadd_s32(*(int32x2_t *)(a1 + 32), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    if ((v44 & 1) == 0)
      MEMORY[0x1CAA32FB4](v45, 8);
  }
}

{
  __ZN4llvm15AnalysisManagerINS_4LoopEJRNS_27LoopStandardAnalysisResultsEEE10invalidateERS1_RKNS_17PreservedAnalysesE(a1, a2, a3);
}

uint64_t llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::lookUpPass(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  if ((sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v5) & 1) != 0)
    v3 = v5;
  else
    v3 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  return *(_QWORD *)(v3 + 8);
}

{
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  if (sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v5))
    v3 = v5;
  else
    v3 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  return *(_QWORD *)(v3 + 8);
}

uint64_t llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::getResultImpl(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  char v9;
  _QWORD *v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;

  v47 = a2;
  v48 = a3;
  v8 = (uint64_t *)(a1 + 48);
  v49 = 0;
  v50 = 0;
  v9 = sub_1C4DD9D34((uint64_t *)(a1 + 48), (uint64_t *)&v47, &v50);
  v10 = v50;
  if ((v9 & 1) != 0)
  {
    v33 = v50[2];
    return *(_QWORD *)(v33 + 24);
  }
  v11 = *(_DWORD *)(a1 + 56);
  v12 = *(_DWORD *)(a1 + 64);
  if (4 * v11 + 4 >= 3 * v12)
  {
    v12 *= 2;
  }
  else if (v12 + ~v11 - *(_DWORD *)(a1 + 60) > v12 >> 3)
  {
    goto LABEL_4;
  }
  sub_1C4DDA4A0((uint64_t)v8, v12);
  v50 = 0;
  sub_1C4DD9D34(v8, (uint64_t *)&v47, &v50);
  v10 = v50;
LABEL_4:
  ++*(_DWORD *)(a1 + 56);
  if (*v10 != -4096 || v10[1] != -4096)
    --*(_DWORD *)(a1 + 60);
  *v10 = v47;
  v10[1] = v48;
  v10[2] = v49;
  v47 = 0;
  if ((sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t)a2, &v47) & 1) != 0)
    v13 = (uint64_t)v47;
  else
    v13 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  v14 = *(_QWORD *)(v13 + 8);
  if (a2 == &llvm::PassInstrumentationAnalysis::Key)
  {
    v15 = 0;
  }
  else
  {
    v46 = a4;
    v15 = *(_QWORD *)(llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::getResultImpl(a1, &llvm::PassInstrumentationAnalysis::Key, a3, a4)+ 8);
    if (v15)
    {
      v35 = *(unsigned int *)(v15 + 728);
      if ((_DWORD)v35)
      {
        v36 = *(_QWORD **)(v15 + 720);
        v37 = 32 * v35;
        do
        {
          v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
          v40 = v39;
          v47 = 0;
          v41 = (_QWORD *)operator new();
          *v41 = &unk_1E8138DE8;
          v41[1] = a3;
          v42 = (uint64_t)v47;
          v47 = v41;
          if (v42)
            (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
          v43 = v36[3];
          v44 = v36;
          if ((v43 & 2) == 0)
            v44 = (_QWORD *)*v36;
          (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD **))(v43 & 0xFFFFFFFFFFFFFFF8))(v44, v38, v40, &v47);
          v45 = (uint64_t)v47;
          v47 = 0;
          if (v45)
            (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
          v36 += 4;
          v37 -= 32;
        }
        while (v37);
      }
    }
    a4 = v46;
  }
  v47 = (_QWORD *)a3;
  v16 = sub_1C4EA60B8(a1 + 24, (uint64_t *)&v47);
  (*(void (**)(_QWORD **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(&v47, v14, a3, a1, a4);
  v17 = operator new(0x20uLL);
  v19 = v16[1];
  v18 = v16 + 1;
  v20 = (uint64_t)v47;
  v17[2] = a2;
  v17[3] = v20;
  *v17 = v19;
  v17[1] = v18;
  *(_QWORD *)(v19 + 8) = v17;
  *v18 = (uint64_t)v17;
  ++v18[2];
  if (v15)
  {
    v21 = *(unsigned int *)(v15 + 872);
    if ((_DWORD)v21)
    {
      v22 = *(_QWORD **)(v15 + 864);
      v23 = 32 * v21;
      do
      {
        v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
        v26 = v25;
        v47 = 0;
        v27 = (_QWORD *)operator new();
        *v27 = &unk_1E8138DE8;
        v27[1] = a3;
        v28 = (uint64_t)v47;
        v47 = v27;
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        v29 = v22[3];
        v30 = v22;
        if ((v29 & 2) == 0)
          v30 = (_QWORD *)*v22;
        (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD **))(v29 & 0xFFFFFFFFFFFFFFF8))(v30, v24, v26, &v47);
        v31 = (uint64_t)v47;
        v47 = 0;
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        v22 += 4;
        v23 -= 32;
      }
      while (v23);
    }
  }
  v47 = a2;
  v48 = a3;
  v50 = 0;
  if ((sub_1C4DD9D34(v8, (uint64_t *)&v47, &v50) & 1) != 0)
    v32 = (uint64_t)v50;
  else
    v32 = *(_QWORD *)(a1 + 48) + 24 * *(unsigned int *)(a1 + 64);
  v33 = *v18;
  *(_QWORD *)(v32 + 16) = *v18;
  return *(_QWORD *)(v33 + 24);
}

{
  return __ZN4llvm15AnalysisManagerINS_4LoopEJRNS_27LoopStandardAnalysisResultsEEE13getResultImplEPNS_11AnalysisKeyERS1_S3_(a1, a2, a3, a4);
}

uint64_t llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::getCachedResultImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v8[2];
  uint64_t v9;

  v8[0] = a2;
  v8[1] = a3;
  v9 = 0;
  if (sub_1C4DD9D34((uint64_t *)(a1 + 48), v8, &v9))
  {
    v6 = v9;
    v4 = *(_QWORD *)(a1 + 48);
    v5 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = *(_DWORD *)(a1 + 64);
    v6 = v4 + 24 * v5;
  }
  if (v6 == v4 + 24 * v5)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(v6 + 16) + 24);
}

{
  return __ZNK4llvm15AnalysisManagerINS_4LoopEJRNS_27LoopStandardAnalysisResultsEEE19getCachedResultImplEPNS_11AnalysisKeyERS1_(a1, a2, a3);
}

_QWORD *llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>,llvm::Function>::InnerAnalysisManagerProxy(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

{
  *result = a2;
  return result;
}

_QWORD *llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Loop,llvm::LoopStandardAnalysisResults &>::Result::Result(_QWORD *result, uint64_t a2)
{
  uint64_t i;

  *result = a2;
  result[1] = 1;
  for (i = 2; i != 6; i += 2)
    result[i] = -4096;
  return result;
}

{
  uint64_t i;

  *result = a2;
  result[1] = 1;
  for (i = 2; i != 6; i += 2)
    result[i] = -4096;
  return result;
}

uint64_t llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Loop,llvm::LoopStandardAnalysisResults &>::Result::invalidate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  void *v29;
  uint64_t v30;
  _QWORD v31[5];

  v31[4] = *MEMORY[0x1E0C80C00];
  v29 = v31;
  v30 = 0x400000000;
  v8 = (_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 8);
  if (v7 > 1)
  {
    if ((v7 & 1) != 0)
    {
      v15 = (_QWORD *)(a1 + 16);
      v12 = (_QWORD *)(a1 + 48);
    }
    else
    {
      v15 = *(_QWORD **)(a1 + 16);
      v26 = *(unsigned int *)(a1 + 24);
      if (!(_DWORD)v26)
      {
        v14 = 0;
        v11 = *(_QWORD **)(a1 + 16);
        v13 = v11;
        goto LABEL_9;
      }
      v12 = &v15[2 * v26];
    }
    v7 = *(_DWORD *)(a1 + 8) & 1;
    v11 = v15;
    while ((*v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v11 += 2;
      if (v11 == v12)
      {
        v11 = v12;
        break;
      }
    }
  }
  else
  {
    if (v7)
    {
      v9 = a1 + 16;
      v10 = 2;
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 16);
      v10 = *(unsigned int *)(a1 + 24);
    }
    v11 = (_QWORD *)(v9 + 16 * v10);
    v12 = v11;
  }
  if (v7)
  {
    v13 = (_QWORD *)(a1 + 16);
    v14 = 2;
  }
  else
  {
    v13 = *(_QWORD **)(a1 + 16);
    v14 = *(unsigned int *)(a1 + 24);
  }
  v15 = v12;
LABEL_9:
  v16 = &v13[2 * v14];
  if (v11 != v16)
  {
    do
    {
      v17 = *v11;
      v28[0] = a4;
      v28[1] = a2;
      v28[2] = a3;
      sub_1C4DD3810(v11 + 1, (uint64_t)v28);
      v18 = v11[1];
      if (v18 < 8 || (v18 & 4) != 0 && (v20 = v18 & 0xFFFFFFFFFFFFFFF8) != 0 && !*(_DWORD *)(v20 + 8))
      {
        v19 = v30;
        if (v30 >= (unint64_t)HIDWORD(v30))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, (uint64_t)v31, v30 + 1, 8);
          v19 = v30;
        }
        *((_QWORD *)v29 + v19) = v17;
        LODWORD(v30) = v30 + 1;
      }
      v21 = v11 + 2;
      v11 = v15;
      if (v21 != v15)
      {
        v11 = v21;
        while ((*v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v11 += 2;
          if (v11 == v15)
          {
            v11 = v15;
            break;
          }
        }
      }
    }
    while (v11 != v16);
    v22 = (uint64_t *)v29;
    if ((_DWORD)v30)
    {
      v23 = 8 * v30;
      do
      {
        v24 = *v22++;
        v27 = v24;
        sub_1C4DD3880(v8, &v27);
        v23 -= 8;
      }
      while (v23);
      v22 = (uint64_t *)v29;
    }
    if (v22 != v31)
      free(v22);
  }
  return 0;
}

{
  return __ZN4llvm25OuterAnalysisManagerProxyINS_15AnalysisManagerINS_8FunctionEJEEENS_4LoopEJRNS_27LoopStandardAnalysisResultsEEE6Result10invalidateERS4_RKNS_17PreservedAnalysesERNS1_IS4_JS6_EE11InvalidatorE(a1, a2, a3, a4);
}

uint64_t llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Loop,llvm::LoopStandardAnalysisResults &>::Result::getOuterInvalidations(uint64_t a1)
{
  return a1 + 8;
}

_QWORD *llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Loop,llvm::LoopStandardAnalysisResults &>::OuterAnalysisManagerProxy(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

{
  *result = a2;
  return result;
}

_QWORD *llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Loop,llvm::LoopStandardAnalysisResults &>::run@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = 0;
  *a2 = *result;
  a2[1] = 1;
  v3 = a2 + 2;
  do
  {
    v3[v2] = -4096;
    v2 += 2;
  }
  while (v2 != 4);
  return result;
}

uint64_t llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>,llvm::Function>::Result::invalidate(uint64_t a1, _BYTE *a2, void **a3, uint64_t *a4)
{
  char *v8;
  char *v9;
  unsigned int *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  uint64_t v22;
  uint64_t CachedResultImpl;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  BOOL v39;
  const void **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char *v46;
  BOOL v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  void *v51;
  void *v52;
  char v53;
  _QWORD v54[2];
  BOOL v55;
  void *v56;
  char v57[8];
  uint64_t *v58;
  unsigned int v59;
  _QWORD v60[6];

  v60[4] = *MEMORY[0x1E0C80C00];
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::getLoopsInReverseSiblingPreorder(*(_QWORD *)(a1 + 8), (uint64_t)&v58);
  v54[0] = a3;
  v54[1] = &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>,llvm::Function>::Key;
  v8 = (char *)sub_1C477672C((uint64_t)(a3 + 6), (uint64_t)&llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>,llvm::Function>::Key);
  v9 = (char *)a3[7];
  if (v9 == a3[6])
    v10 = (unsigned int *)a3 + 17;
  else
    v10 = (unsigned int *)(a3 + 8);
  v55 = v8 != &v9[8 * *v10];
  if (*(_BYTE *)(a1 + 16))
  {
    v11 = (_BYTE *)sub_1C4D91F84(*a4, (uint64_t)&llvm::MemorySSAAnalysis::Key);
    v12 = *a4;
    v13 = *a4 + 8;
    if ((*(_BYTE *)*a4 & 1) != 0)
    {
      v14 = 8;
    }
    else
    {
      v13 = *(_QWORD *)(v12 + 8);
      v14 = *(unsigned int *)(v12 + 16);
    }
    if ((_BYTE *)(v13 + 16 * v14) == v11)
    {
      v42 = a4[1];
      v49 = &llvm::MemorySSAAnalysis::Key;
      v50 = a2;
      v56 = 0;
      if (sub_1C4D920B0((uint64_t *)v42, (uint64_t *)&v49, &v56))
        v43 = (uint64_t)v56;
      else
        v43 = *(_QWORD *)v42 + 24 * *(unsigned int *)(v42 + 16);
      v44 = *a4;
      v45 = (*(uint64_t (**)(_QWORD, _BYTE *, void **, uint64_t *))(**(_QWORD **)(*(_QWORD *)(v43 + 16) + 24)
                                                                           + 16))(*(_QWORD *)(*(_QWORD *)(v43 + 16) + 24), a2, a3, a4);
      v56 = &llvm::MemorySSAAnalysis::Key;
      v57[0] = v45;
      sub_1C4D921A4(v44, &v56, v57, (uint64_t)&v49);
      v11 = v49;
    }
    v15 = v11[8] != 0;
  }
  else
  {
    v15 = 0;
  }
  if ((sub_1C4DAA35C((uint64_t)v54) || sub_1C4DAA3F8((uint64_t)v54))
    && (sub_1C4DA944C(a4, (uint64_t)&llvm::AAManager::Key, (uint64_t)a2, (uint64_t)a3) & 1) == 0
    && (sub_1C4DA944C(a4, (uint64_t)&llvm::AssumptionAnalysis::Key, (uint64_t)a2, (uint64_t)a3) & 1) == 0
    && (llvm::AnalysisManager<llvm::Function>::Invalidator::invalidate(a4, (uint64_t)&llvm::DominatorTreeAnalysis::Key, (uint64_t)a2, (uint64_t)a3) & 1) == 0&& (sub_1C4DA944C(a4, (uint64_t)&llvm::LoopAnalysis::Key, (uint64_t)a2, (uint64_t)a3) & 1) == 0&& (v15 | sub_1C4DA944C(a4, (uint64_t)&llvm::ScalarEvolutionAnalysis::Key, (uint64_t)a2, (uint64_t)a3)) != 1)
  {
    v47 = sub_1C4DDA07C((uint64_t)a3, (uint64_t)&llvm::AllAnalysesOn<llvm::Loop>::SetKey);
    if (!v59)
    {
      v19 = 0;
      goto LABEL_21;
    }
    v46 = (char *)v58;
    v21 = (char *)&v58[v59];
    while (1)
    {
      v22 = *((_QWORD *)v21 - 1);
      v21 -= 8;
      LOBYTE(v49) = 0;
      v53 = 0;
      v48 = v22;
      CachedResultImpl = llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::getCachedResultImpl(*(_QWORD *)a1, (uint64_t)&llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Loop,llvm::LoopStandardAnalysisResults &>::Key, v22);
      if (CachedResultImpl)
        break;
LABEL_49:
      v39 = v47;
      if (v53)
        v39 = 0;
      if (!v39)
      {
        v40 = v53 ? (const void **)&v49 : (const void **)a3;
        llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::invalidate(*(_QWORD *)a1, v48, (uint64_t)v40);
        if (v53)
        {
          if (v52 != v51)
            free(v52);
          if (v50 != v49)
            free(v50);
        }
      }
      v19 = 0;
      if (v21 == v46)
        goto LABEL_21;
    }
    v24 = *(_DWORD *)(CachedResultImpl + 16);
    if (v24 > 1)
    {
      if ((v24 & 1) != 0)
      {
        v30 = (uint64_t *)(CachedResultImpl + 24);
        v28 = (uint64_t *)(CachedResultImpl + 56);
      }
      else
      {
        v30 = *(uint64_t **)(CachedResultImpl + 24);
        v41 = *(unsigned int *)(CachedResultImpl + 32);
        if (!(_DWORD)v41)
        {
          v31 = 0;
          v27 = *(uint64_t **)(CachedResultImpl + 24);
          v29 = v27;
          goto LABEL_34;
        }
        v28 = &v30[2 * v41];
      }
      v24 = *(_DWORD *)(CachedResultImpl + 16) & 1;
      v27 = v30;
      while ((*v27 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v27 += 2;
        if (v27 == v28)
        {
          v27 = v28;
          break;
        }
      }
    }
    else
    {
      if (v24)
      {
        v25 = CachedResultImpl + 24;
        v26 = 2;
      }
      else
      {
        v25 = *(_QWORD *)(CachedResultImpl + 24);
        v26 = *(unsigned int *)(CachedResultImpl + 32);
      }
      v27 = (uint64_t *)(v25 + 16 * v26);
      v28 = v27;
    }
    if (v24)
    {
      v29 = (uint64_t *)(CachedResultImpl + 24);
      v30 = v28;
      v31 = 2;
    }
    else
    {
      v29 = *(uint64_t **)(CachedResultImpl + 24);
      v31 = *(unsigned int *)(CachedResultImpl + 32);
      v30 = v28;
    }
LABEL_34:
    v32 = &v29[2 * v31];
LABEL_35:
    while (v27 != v32)
    {
      v33 = v27 + 1;
      if (llvm::AnalysisManager<llvm::Function>::Invalidator::invalidate(a4, *v27, (uint64_t)a2, (uint64_t)a3))
      {
        if (!v53)
          sub_1C6185870((const void **)&v49, (const void **)a3);
        v34 = *v33;
        if ((*v33 & 4) != 0)
        {
          v36 = v34 & 0xFFFFFFFFFFFFFFF8;
          v33 = *(uint64_t **)v36;
          v35 = *(_QWORD *)v36 + 8 * *(unsigned int *)(v36 + 8);
        }
        else
        {
          v35 = (uint64_t)&v33[v34 > 7];
        }
        while (v33 != (uint64_t *)v35)
        {
          v37 = *v33++;
          sub_1C4DD7214((uint64_t)&v49, v37);
        }
      }
      v38 = v27 + 2;
      v27 = v30;
      if (v38 != v30)
      {
        v27 = v38;
        while ((*v27 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v27 += 2;
          if (v27 == v30)
          {
            v27 = v30;
            goto LABEL_35;
          }
        }
      }
    }
    goto LABEL_49;
  }
  if (v59)
  {
    v16 = v58;
    v17 = 8 * v59;
    do
    {
      v18 = *v16++;
      llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::clear(*(_QWORD *)a1, v18, (uint64_t)"<possibly invalidated loop>", 27);
      v17 -= 8;
    }
    while (v17);
  }
  *(_QWORD *)a1 = 0;
  v19 = 1;
LABEL_21:
  if (v58 != v60)
    free(v58);
  return v19;
}

uint64_t llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>,llvm::Function>::run@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t result;

  v5 = *a1;
  result = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::LoopAnalysis::Key, a2);
  *(_QWORD *)a4 = v5;
  *(_QWORD *)(a4 + 8) = result + 8;
  *(_BYTE *)(a4 + 16) = 0;
  return result;
}

_QWORD *llvm::getLoopPassPreservedAnalyses@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3;

  v3 = a1 + 32;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = 2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 80;
  *(_QWORD *)(a1 + 56) = a1 + 80;
  *(_QWORD *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  sub_1C4DDB144(a1, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
  sub_1C4DDB144(a1, (uint64_t)&llvm::LoopAnalysis::Key);
  sub_1C4DDB144(a1, (uint64_t)&llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>,llvm::Function>::Key);
  return sub_1C4DDB144(a1, (uint64_t)&llvm::ScalarEvolutionAnalysis::Key);
}

_DWORD *sub_1C4EA5E04(_DWORD *result, int a2)
{
  _DWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    result = operator new(32 * v4, (std::align_val_t)8uLL);
    *(_QWORD *)v2 = result;
    *((_QWORD *)v2 + 1) = 0;
    v5 = v2[4];
    if ((_DWORD)v5)
    {
      v6 = 32 * v5;
      do
      {
        *(_QWORD *)result = -4096;
        result += 8;
        v6 -= 32;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

_DWORD *sub_1C4EA5E94(_DWORD *result, int a2)
{
  _DWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64x2_t v7;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    result = operator new(24 * v4, (std::align_val_t)8uLL);
    *(_QWORD *)v2 = result;
    *((_QWORD *)v2 + 1) = 0;
    v5 = v2[4];
    if ((_DWORD)v5)
    {
      v6 = 24 * v5;
      v7 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *(int64x2_t *)result = v7;
        result += 6;
        v6 -= 24;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

_DWORD *sub_1C4EA5F30(_DWORD *result)
{
  _DWORD *v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int64x2_t *v6;
  uint64_t v7;
  int64x2_t v8;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(int64x2_t **)result;
      v7 = 24 * v2;
      v8 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *v6 = v8;
        v6 = (int64x2_t *)((char *)v6 + 24);
        v7 -= 24;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    return sub_1C4EA5E94(v1, v5);
  }
  return result;
}

void sub_1C4EA5FD0(_DWORD *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;

  v2 = a1[4];
  v3 = a1[2];
  if ((_DWORD)v2)
  {
    v4 = 32 * v2;
    v5 = (uint64_t *)(*(_QWORD *)a1 + 8);
    do
    {
      if ((*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        sub_1C4D8B4AC(v5);
      v5 += 4;
      v4 -= 32;
    }
    while (v4);
  }
  if (!v3)
  {
    if (!a1[4])
    {
      *((_QWORD *)a1 + 1) = 0;
      return;
    }
    v7 = 0;
    v8 = *(_QWORD **)a1;
LABEL_16:
    MEMORY[0x1CAA32FB4](v8, 8);
    sub_1C4EA5E04(a1, v7);
    return;
  }
  v6 = 1 << (33 - __clz(v3 - 1));
  if (v6 <= 64)
    v7 = 64;
  else
    v7 = v6;
  v8 = *(_QWORD **)a1;
  if (v7 != a1[4])
    goto LABEL_16;
  *((_QWORD *)a1 + 1) = 0;
  v9 = 32 * v7;
  do
  {
    *v8 = -4096;
    v8 += 4;
    v9 -= 32;
  }
  while (v9);
}

uint64_t *sub_1C4EA60B8(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = sub_1C4DDA200(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_1C4EA6198(a1, v7);
    v8 = 0;
    sub_1C4DDA200(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = (uint64_t)(result + 1);
  result[2] = (uint64_t)(result + 1);
  result[3] = 0;
  return result;
}

_QWORD *sub_1C4EA6198(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4EA6250(a1, v4, &v4[4 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

void sub_1C4EA6250(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 32 * v6;
    do
    {
      *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v17 = 0;
      sub_1C4DDA200(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v17);
      v10 = v17;
      v11 = v17 + 1;
      *v17 = *a2;
      v10[1] = (uint64_t)v11;
      v10[2] = (uint64_t)v11;
      v10[3] = 0;
      v12 = a2[3];
      if (v12)
      {
        v14 = a2[1];
        v13 = (uint64_t *)a2[2];
        v15 = *v13;
        *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
        **(_QWORD **)(v14 + 8) = v15;
        v16 = v10[1];
        *(_QWORD *)(v16 + 8) = v13;
        *v13 = v16;
        v10[1] = v14;
        *(_QWORD *)(v14 + 8) = v11;
        v10[3] = v12;
        a2[3] = 0;
      }
      ++*(_DWORD *)(a1 + 8);
      sub_1C4D8B4AC(a2 + 1);
    }
    a2 += 4;
  }
}

void sub_1C4EA6348()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4EA635C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;

  result = (_QWORD *)operator new();
  v5 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E8138DE8;
  result[1] = v5;
  *a2 = result;
  return result;
}

void *sub_1C4EA63AC()
{
  return &llvm::Any::TypeId<llvm::Loop const*>::Id;
}

llvm::raw_ostream *llvm::operator<<(llvm::raw_ostream *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  _OWORD *v19;

  if (*(_BYTE *)a2)
  {
    llvm::SCEV::print(*(_QWORD *)(a2 + 16));
    v4 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v4)
    {
      v5 = *(uint64_t **)(a2 + 24);
      v6 = 8 * v4;
      do
      {
        v7 = *v5;
        v8 = (_BYTE *)*((_QWORD *)a1 + 4);
        if (*((_BYTE **)a1 + 3) == v8)
        {
          v9 = llvm::raw_ostream::write(a1, "[", 1uLL);
        }
        else
        {
          *v8 = 91;
          ++*((_QWORD *)a1 + 4);
          v9 = a1;
        }
        llvm::SCEV::print(v7);
        v10 = (_BYTE *)*((_QWORD *)v9 + 4);
        if (*((_BYTE **)v9 + 3) == v10)
        {
          llvm::raw_ostream::write(v9, "]", 1uLL);
        }
        else
        {
          *v10 = 93;
          ++*((_QWORD *)v9 + 4);
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
    v11 = *((_QWORD *)a1 + 4);
    if ((unint64_t)(*((_QWORD *)a1 + 3) - v11) > 8)
    {
      *(_BYTE *)(v11 + 8) = 32;
      *(_QWORD *)v11 = *(_QWORD *)", Sizes: ";
      *((_QWORD *)a1 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(a1, ", Sizes: ", 9uLL);
    }
    v12 = *(unsigned int *)(a2 + 72);
    if ((_DWORD)v12)
    {
      v13 = *(uint64_t **)(a2 + 64);
      v14 = 8 * v12;
      do
      {
        v15 = *v13;
        v16 = (_BYTE *)*((_QWORD *)a1 + 4);
        if (*((_BYTE **)a1 + 3) == v16)
        {
          v17 = llvm::raw_ostream::write(a1, "[", 1uLL);
        }
        else
        {
          *v16 = 91;
          ++*((_QWORD *)a1 + 4);
          v17 = a1;
        }
        llvm::SCEV::print(v15);
        v18 = (_BYTE *)*((_QWORD *)v17 + 4);
        if (*((_BYTE **)v17 + 3) == v18)
        {
          llvm::raw_ostream::write(v17, "]", 1uLL);
        }
        else
        {
          *v18 = 93;
          ++*((_QWORD *)v17 + 4);
        }
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
  }
  else
  {
    llvm::Value::print(*(llvm::Value **)(a2 + 8), a1, 0);
    v19 = (_OWORD *)*((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 3) - (_QWORD)v19 > 0xFuLL)
    {
      *v19 = *(_OWORD *)", IsValid=false.";
      *((_QWORD *)a1 + 4) += 16;
    }
    else
    {
      llvm::raw_ostream::write(a1, ", IsValid=false.", 0x10uLL);
    }
  }
  return a1;
}

{
  llvm::raw_ostream *v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];
  _QWORD v9[3];
  _QWORD *v10;

  v3 = a1;
  if (*(_BYTE *)(a2 + 24))
    llvm::operator<<(a1, (uint64_t *)a2);
  else
    sub_1C4816AD8(a1, "None");
  v4 = (_WORD *)*((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 3) - (_QWORD)v4 > 1uLL)
  {
    *v4 = 8250;
    *((_QWORD *)v3 + 4) += 2;
  }
  else
  {
    v3 = llvm::raw_ostream::write(v3, ": ", 2uLL);
  }
  v5 = *(_QWORD *)(a2 + 32);
  v6 = v5 + *(_QWORD *)(a2 + 40);
  v8[0] = "{0}";
  v8[1] = 3;
  v8[2] = &v10;
  v8[3] = 1;
  v9[0] = &off_1E816A3B0;
  v9[1] = v5;
  v9[2] = v6;
  v10 = v9;
  sub_1C639D338((uint64_t)v8, v3);
  return v3;
}

{
  const char *v4;
  size_t v5;
  void *v6;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
      v4 = "fix";
    else
      v4 = (const char *)&unk_1C872ACEA;
  }
  else
  {
    v4 = "top";
  }
  v5 = strlen(v4);
  v6 = (void *)*((_QWORD *)a1 + 4);
  if (v5 <= *((_QWORD *)a1 + 3) - (_QWORD)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      *((_QWORD *)a1 + 4) += v5;
    }
  }
  else
  {
    llvm::raw_ostream::write(a1, v4, v5);
  }
  return a1;
}

{
  llvm::VPBlockBase *v4;
  const llvm::VPlan *Plan;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  _BYTE v12[32];
  __int16 v13;

  if (*(_BYTE *)(a2 + 8) == 1 && (v4 = *(llvm::VPBlockBase **)(a2 - 8)) != 0)
  {
    Plan = (const llvm::VPlan *)llvm::VPBlockBase::getPlan(v4);
    v8 = 0;
    v9 = 0;
    v11 = 0;
    v10 = 0;
    if (Plan)
      llvm::VPSlotTracker::assignSlots((llvm::VPSlotTracker *)&v8, Plan);
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v11 = 0;
    v10 = 0;
  }
  v6 = *(_QWORD *)(a2 + 48);
  if (v6)
  {
    v13 = 257;
    (*(void (**)(uint64_t, llvm::raw_ostream *, _BYTE *, uint64_t *))(*(_QWORD *)v6 + 16))(v6, a1, v12, &v8);
  }
  else
  {
    llvm::VPValue::printAsOperand((llvm::VPValue *)a2, a1, (llvm::VPSlotTracker *)&v8);
  }
  MEMORY[0x1CAA32FB4](v8, 8);
  return a1;
}

{
  char *v3;
  llvm::Value **v4;
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v10;

  switch(*(_WORD *)a2)
  {
    case 0u:
      v3 = "unknown";
      return sub_1C4816AD8(a1, v3);
    case 1u:
      v3 = "undef";
      return sub_1C4816AD8(a1, v3);
    case 3u:
      v7 = sub_1C4816AD8(a1, "notconstant<");
      llvm::Value::print(*(llvm::Value **)(a2 + 8), v7, 0);
      goto LABEL_9;
    case 5u:
      v8 = sub_1C4816AD8(a1, "constantrange incl. undef <");
      llvm::APInt::print((llvm::APInt *)(a2 + 8), v8, 1);
      v6 = v8;
      goto LABEL_8;
    case 6u:
      v3 = "overdefined";
      return sub_1C4816AD8(a1, v3);
    default:
      v4 = (llvm::Value **)(a2 + 8);
      if ((*(_WORD *)a2 & 0xFE) == 4)
      {
        v5 = sub_1C4816AD8(a1, "constantrange<");
        llvm::APInt::print((llvm::APInt *)(a2 + 8), v5, 1);
        v6 = v5;
LABEL_8:
        v7 = sub_1C4816AD8(v6, ", ");
        llvm::APInt::print((llvm::APInt *)(a2 + 24), v7, 1);
LABEL_9:
        v3 = ">";
        a1 = v7;
      }
      else
      {
        v10 = sub_1C4816AD8(a1, "constant<");
        llvm::Value::print(*v4, v10, 0);
        v3 = ">";
        a1 = v10;
      }
      return sub_1C4816AD8(a1, v3);
  }
}

{
  uint64_t v4;
  llvm::APInt *v5;
  uint64_t v6;
  char *v7;

  sub_1C4816AD8(a1, "set-state(< {");
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
  {
    v7 = "full-set";
    goto LABEL_8;
  }
  v4 = *(unsigned int *)(a2 + 168);
  if ((_DWORD)v4)
  {
    v5 = *(llvm::APInt **)(a2 + 160);
    v6 = 16 * v4;
    do
    {
      llvm::APInt::print(v5, a1, 1);
      sub_1C4816AD8(a1, ", ");
      v5 = (llvm::APInt *)((char *)v5 + 16);
      v6 -= 16;
    }
    while (v6);
  }
  if (*(_BYTE *)(a2 + 304))
  {
    v7 = "undef ";
LABEL_8:
    sub_1C4816AD8(a1, v7);
  }
  sub_1C4816AD8(a1, "} >)");
  return a1;
}

{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;

  v4 = sub_1C4816AD8(a1, "<MCFixup");
  v5 = sub_1C4816AD8(v4, " Offset:");
  sub_1C5E21910(v5, *(unsigned int *)(a2 + 8), 0, 0, 0);
  v6 = sub_1C4816AD8(v5, " Value:");
  llvm::MCExpr::print(*(_QWORD *)a2);
  v7 = sub_1C4816AD8(v6, " Kind:");
  v8 = llvm::raw_ostream::operator<<(v7, *(int *)(a2 + 12));
  sub_1C4816AD8(v8, ">");
  return a1;
}

{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  std::chrono::system_clock::time_point __t;
  const char *v8;
  uint64_t v9;
  tm v10;
  char __s[20];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  memset(&v10, 0, sizeof(v10));
  __t.__d_.__rep_ = a2 / 1000;
  __t.__d_.__rep_ = std::chrono::system_clock::to_time_t(&__t);
  localtime_r(&__t.__d_.__rep_, &v10);
  strftime(__s, 0x14uLL, "%Y-%m-%d %H:%M:%S", &v10);
  v4 = sub_1C4816AD8(a1, __s);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    v4 = llvm::raw_ostream::write(v4, 46);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 46;
  }
  __t.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)&unk_1E819DF30;
  v8 = "%.9lu";
  v9 = a2 % 1000000000;
  return llvm::raw_ostream::operator<<(v4, (uint64_t)&__t);
}

uint64_t llvm::IndexedReference::IndexedReference(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 32) = 0x300000000;
  *(_QWORD *)(a1 + 64) = a1 + 80;
  *(_QWORD *)(a1 + 72) = 0x300000000;
  *(_QWORD *)(a1 + 104) = a4;
  *(_BYTE *)a1 = llvm::IndexedReference::delinearize(a1, a3);
  return a1;
}

{
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 32) = 0x300000000;
  *(_QWORD *)(a1 + 64) = a1 + 80;
  *(_QWORD *)(a1 + 72) = 0x300000000;
  *(_QWORD *)(a1 + 104) = a4;
  *(_BYTE *)a1 = llvm::IndexedReference::delinearize(a1, a3);
  return a1;
}

uint64_t llvm::IndexedReference::delinearize(uint64_t a1, uint64_t *a2)
{
  unint64_t ElementSize;
  int v5;
  const llvm::SCEV *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  const llvm::Loop *v15;
  int v16;
  uint64_t v17;
  int v18;
  llvm::Value *v19;
  const llvm::SCEV *SCEVAtScope;
  uint64_t PointerBase;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  unint64_t AddRecExpr;
  llvm::ScalarEvolution *v29;
  const llvm::SCEV ***v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  const llvm::SCEV **v37;
  const llvm::SCEV *v38;
  llvm::ScalarEvolution *v39;
  uint64_t v40;
  const llvm::SCEV *NegativeSCEV;
  llvm::ScalarEvolution *v42;
  uint64_t v43;
  const llvm::SCEV *v44;
  int isKnownNegative;
  uint64_t v46;
  unint64_t v47;
  const llvm::SCEV *UDivExactExpr;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  size_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  _QWORD v60[4];

  v60[3] = *MEMORY[0x1E0C80C00];
  ElementSize = llvm::ScalarEvolution::getElementSize(*(llvm::ScalarEvolution **)(a1 + 104), *(llvm::Instruction **)(a1 + 8));
  v5 = *((_DWORD *)a2 + 4);
  if (!v5)
    goto LABEL_10;
  v6 = (const llvm::SCEV *)ElementSize;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(v7 + 40);
  v9 = *a2;
  v10 = v5 - 1;
  v11 = ((v8 >> 4) ^ (v8 >> 9)) & (v5 - 1);
  v12 = *(_QWORD *)(*a2 + 16 * v11);
  if (v8 != v12)
  {
    v13 = 1;
    while (v12 != -4096)
    {
      v14 = v11 + v13++;
      v11 = v14 & v10;
      v12 = *(_QWORD *)(v9 + 16 * v11);
      if (v8 == v12)
        goto LABEL_6;
    }
    goto LABEL_10;
  }
LABEL_6:
  v15 = *(const llvm::Loop **)(v9 + 16 * v11 + 8);
  if (!v15)
  {
LABEL_10:
    v18 = 0;
    return v18 & ElementSize;
  }
  v16 = *(unsigned __int8 *)(v7 + 16);
  if (v7 && (v16 - 62) > 0xFFFFFFFD)
  {
    v17 = -1;
  }
  else
  {
    v19 = 0;
    if (!v7 || v16 != 62)
      goto LABEL_15;
    v17 = -(uint64_t)(*(_DWORD *)(v7 + 20) & 0x7FFFFFF);
  }
  v19 = *(llvm::Value **)(v7 + 32 * v17);
LABEL_15:
  SCEVAtScope = llvm::ScalarEvolution::getSCEVAtScope(*(llvm::ScalarEvolution **)(a1 + 104), v19, v15);
  PointerBase = llvm::ScalarEvolution::getPointerBase(*(llvm::ScalarEvolution **)(a1 + 104), SCEVAtScope);
  if (PointerBase)
    v22 = *(unsigned __int16 *)(PointerBase + 24) == 14;
  else
    v22 = 0;
  if (v22)
    v23 = PointerBase - 32;
  else
    v23 = 0;
  v24 = v23 + 32;
  if (v22)
    v25 = v23 + 32;
  else
    v25 = 0;
  *(_QWORD *)(a1 + 16) = v25;
  if (!v22)
  {
    LODWORD(ElementSize) = 0;
LABEL_26:
    v18 = 1;
    return v18 & ElementSize;
  }
  llvm::ScalarEvolution::getMinusSCEV(*(_QWORD *)(a1 + 104), (uint64_t)SCEVAtScope, v24);
  AddRecExpr = v27;
  v29 = *(llvm::ScalarEvolution **)(a1 + 104);
  v30 = (const llvm::SCEV ***)llvm::ScalarEvolution::getElementSize(v29, *(llvm::Instruction **)(a1 + 8));
  llvm::delinearize(v29, AddRecExpr, a1 + 24, a1 + 64, v30);
  v31 = *(unsigned int *)(a1 + 32);
  if (!(_DWORD)v31 || (v32 = *(_DWORD *)(a1 + 72)) == 0 || (_DWORD)v31 != v32)
  {
    if (*(_WORD *)(AddRecExpr + 24) != 7)
      goto LABEL_51;
    if (*(_QWORD *)(AddRecExpr + 40) != 2)
      goto LABEL_51;
    v37 = *(const llvm::SCEV ***)(AddRecExpr + 32);
    if (*((_WORD *)*v37 + 12) == 7)
      goto LABEL_51;
    v38 = v37[1];
    if (*((_WORD *)v38 + 12) == 7)
      goto LABEL_51;
    v39 = *(llvm::ScalarEvolution **)(a1 + 104);
    if (llvm::ScalarEvolution::getLoopDisposition(v39, *v37, v15) != 1
      || llvm::ScalarEvolution::getLoopDisposition(v39, v38, v15) != 1)
    {
      goto LABEL_51;
    }
    v40 = *(_QWORD *)(AddRecExpr + 40);
    if (v40 == 2)
    {
      NegativeSCEV = *(const llvm::SCEV **)(*(_QWORD *)(AddRecExpr + 32) + 8);
    }
    else
    {
      v56 = *(_QWORD *)(AddRecExpr + 32);
      v58 = v60;
      v59 = 0x300000000;
      v51 = v40;
      v52 = 8 * v40 - 8;
      if (v52 >= 0x19)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, (uint64_t)v60, (uint64_t)v52 >> 3, 8);
        v53 = v59;
      }
      else
      {
        v53 = 0;
      }
      if (v51 != 1)
      {
        memcpy((char *)v58 + 8 * v53, (const void *)(v56 + 8), v52);
        v53 = v59;
      }
      LODWORD(v59) = v53 + (v52 >> 3);
      NegativeSCEV = (const llvm::SCEV *)sub_1C618AB20((uint64_t *)v39, (uint64_t)&v58, *(uint64_t ***)(AddRecExpr + 48));
      if (v58 != v60)
        free(v58);
    }
    if (NegativeSCEV && llvm::ScalarEvolution::isKnownNegative(v39, NegativeSCEV))
      NegativeSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV((uint64_t)v39, (uint64_t)NegativeSCEV);
    if (NegativeSCEV != v6)
    {
LABEL_51:
      LODWORD(ElementSize) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 72) = 0;
      goto LABEL_26;
    }
    v42 = *(llvm::ScalarEvolution **)(a1 + 104);
    if (*(_WORD *)(AddRecExpr + 24) != 7)
      goto LABEL_57;
    v43 = *(_QWORD *)(AddRecExpr + 40);
    if (v43 == 2)
    {
      v44 = *(const llvm::SCEV **)(*(_QWORD *)(AddRecExpr + 32) + 8);
      if (!v44)
      {
LABEL_57:
        UDivExactExpr = llvm::ScalarEvolution::getUDivExactExpr(v42, (uint64_t **)AddRecExpr, v6);
        v49 = *(unsigned int *)(a1 + 32);
        if (v49 >= *(_DWORD *)(a1 + 36))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, a1 + 40, v49 + 1, 8);
          LODWORD(v49) = *(_DWORD *)(a1 + 32);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v49) = UDivExactExpr;
        ++*(_DWORD *)(a1 + 32);
        v50 = *(unsigned int *)(a1 + 72);
        if (v50 >= *(_DWORD *)(a1 + 76))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 64, a1 + 80, v50 + 1, 8);
          LODWORD(v50) = *(_DWORD *)(a1 + 72);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v50) = v6;
        ++*(_DWORD *)(a1 + 72);
        v31 = *(unsigned int *)(a1 + 32);
        if (!(_DWORD)v31)
        {
          v18 = 1;
          LODWORD(ElementSize) = 1;
          return v18 & ElementSize;
        }
        v33 = *(_QWORD *)(a1 + 24);
        goto LABEL_32;
      }
    }
    else
    {
      v57 = *(_QWORD *)(AddRecExpr + 32);
      v58 = v60;
      v59 = 0x300000000;
      v54 = 8 * v43 - 8;
      if ((unint64_t)v54 >= 0x19)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, (uint64_t)v60, v54 >> 3, 8);
        v55 = v59;
      }
      else
      {
        v55 = 0;
      }
      if (v43 != 1)
      {
        memcpy((char *)v58 + 8 * v55, (const void *)(v57 + 8), 8 * v43 - 8);
        v55 = v59;
      }
      LODWORD(v59) = v55 + ((unint64_t)v54 >> 3);
      v44 = (const llvm::SCEV *)sub_1C618AB20((uint64_t *)v42, (uint64_t)&v58, *(uint64_t ***)(AddRecExpr + 48));
      if (v58 != v60)
        free(v58);
      v42 = *(llvm::ScalarEvolution **)(a1 + 104);
      if (!v44)
        goto LABEL_57;
    }
    isKnownNegative = llvm::ScalarEvolution::isKnownNegative(v42, v44);
    v42 = *(llvm::ScalarEvolution **)(a1 + 104);
    if (isKnownNegative)
    {
      v46 = **(_QWORD **)(AddRecExpr + 32);
      v47 = llvm::ScalarEvolution::getNegativeSCEV(*(_QWORD *)(a1 + 104), (uint64_t)v44);
      AddRecExpr = llvm::ScalarEvolution::getAddRecExpr((uint64_t *)v42, v46, v47, *(uint64_t ***)(AddRecExpr + 48));
      v42 = *(llvm::ScalarEvolution **)(a1 + 104);
    }
    goto LABEL_57;
  }
  v33 = *(_QWORD *)(a1 + 24);
LABEL_32:
  v34 = v33 + 8 * v31;
  v35 = v33 + 8;
  do
  {
    LODWORD(ElementSize) = llvm::IndexedReference::isSimpleAddRecurrence((llvm::ScalarEvolution **)a1, *(const llvm::SCEV **)(v35 - 8), v15);
    if ((_DWORD)ElementSize)
      v36 = v35 == v34;
    else
      v36 = 1;
    v35 += 8;
    v18 = 1;
  }
  while (!v36);
  return v18 & ElementSize;
}

uint64_t llvm::IndexedReference::hasSpacialReuse(uint64_t a1, uint64_t a2, unsigned int a3, llvm::AAResults *a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _BOOL4 v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16)
    && !llvm::IndexedReference::isAliased((uint64_t ****)a1, (uint64_t ****)a2, a4)
    || (v7 = *(unsigned int *)(a1 + 32), (_DWORD)v7 != *(_DWORD *)(a2 + 32)))
  {
LABEL_17:
    v12 = 0;
LABEL_18:
    v13 = 1;
    return v12 | (v13 << 8);
  }
  v8 = (v7 - 1);
  if ((_DWORD)v7 != 1)
  {
    v9 = *(_QWORD **)(a1 + 24);
    v10 = *(_QWORD **)(a2 + 24);
    while (*v9 == *v10)
    {
      ++v10;
      ++v9;
      if (!--v8)
        goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_7:
  llvm::ScalarEvolution::getMinusSCEV(*(_QWORD *)(a1 + 104), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v7 - 8), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * v7 - 8));
  v12 = 0;
  v13 = 0;
  if (v11)
    v14 = *(unsigned __int16 *)(v11 + 24) == 0;
  else
    v14 = 0;
  if (v14)
  {
    v15 = *(_QWORD *)(v11 + 32);
    v16 = *(_DWORD *)(v15 + 32);
    if (v16 > 0x40)
      v17 = **(_QWORD **)(v15 + 24);
    else
      v17 = (uint64_t)(*(_QWORD *)(v15 + 24) << -(char)v16) >> -(char)v16;
    v12 = v17 < a3;
    goto LABEL_18;
  }
  return v12 | (v13 << 8);
}

uint64_t llvm::IndexedReference::hasTemporalReuse(uint64_t a1, uint64_t a2, unsigned int a3, _QWORD *a4, llvm::DependenceInfo *this, llvm::AAResults *a6)
{
  llvm::Instruction *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  llvm::APInt *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16)
    && !llvm::IndexedReference::isAliased((uint64_t ****)a1, (uint64_t ****)a2, a6))
  {
    v13 = 0;
    v12 = 1;
    return v13 | (v12 << 8);
  }
  v11 = *(llvm::Instruction **)(a2 + 8);
  v12 = 1;
  llvm::DependenceInfo::depends((uint64_t)this, *(llvm::Instruction **)(a1 + 8), v11, 1, &v25);
  if (!v25)
  {
    v13 = 0;
    return v13 | (v12 << 8);
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25) & 1) != 0)
  {
    v13 = 1;
    goto LABEL_29;
  }
  v14 = -1;
  do
  {
    a4 = (_QWORD *)*a4;
    ++v14;
  }
  while (a4);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
  if (v15 < 1)
  {
LABEL_23:
    v13 = 1;
    goto LABEL_28;
  }
  v16 = v15;
  v17 = 0;
  while (1)
  {
    v18 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 56))(v25, (v17 + 1));
    if (!v18 || *(_WORD *)(v18 + 24))
    {
      v13 = 0;
      v12 = 0;
      goto LABEL_29;
    }
    v19 = *(_QWORD *)(v18 + 32);
    v20 = (llvm::APInt *)(v19 + 24);
    v21 = *(_DWORD *)(v19 + 32);
    if (!v14)
      break;
    if (v21 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v20) != v21)
        goto LABEL_27;
    }
    else if (*(_QWORD *)v20)
    {
      goto LABEL_27;
    }
LABEL_22:
    ++v17;
    --v14;
    if (v16 == v17)
      goto LABEL_23;
  }
  if (v21 > 0x40)
    v22 = **(_QWORD **)v20;
  else
    v22 = (uint64_t)(*(_QWORD *)v20 << -(char)v21) >> -(char)v21;
  if (v22 <= a3)
    goto LABEL_22;
LABEL_27:
  v13 = 0;
LABEL_28:
  v12 = 1;
LABEL_29:
  v23 = v25;
  v25 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  return v13 | (v12 << 8);
}

uint64_t llvm::IndexedReference::computeRefCost(llvm::ScalarEvolution **this, const llvm::Loop *a2)
{
  llvm::ScalarEvolution *v5;
  const llvm::Loop **BackedgeTakenInfo;
  const llvm::SCEV *Exact;
  uint64_t TripCountFromExitCount;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t MulExpr;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[4];

  v24[3] = *MEMORY[0x1E0C80C00];
  if ((llvm::IndexedReference::isLoopInvariant((llvm::IndexedReference *)this, a2) & 1) != 0)
    return 1;
  v5 = this[13];
  BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(v5, a2);
  Exact = (const llvm::SCEV *)llvm::ScalarEvolution::BackedgeTakenInfo::getExact((uint64_t)BackedgeTakenInfo, (uint64_t)a2, (uint64_t)v5, 0);
  if (*((_WORD *)Exact + 12)
    || (TripCountFromExitCount = llvm::ScalarEvolution::getTripCountFromExitCount(v5, Exact, 1)) == 0)
  {
    __asm { BR              X11 }
  }
  if (llvm::IndexedReference::isConsecutive((llvm::IndexedReference *)this, a2))
  {
    v11 = *((_QWORD *)this[3] + *((unsigned int *)this + 8) - 1);
    v12 = (uint64_t *)this[13];
    v13 = *(_QWORD *)(v11 + 40);
    if (v13 == 2)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8);
    }
    else
    {
      v21 = *((_QWORD *)this[3] + *((unsigned int *)this + 8) - 1);
      v17 = *(_QWORD *)(v11 + 32);
      v22 = v24;
      v23 = 0x300000000;
      v18 = v13;
      v19 = 8 * v13 - 8;
      if (v19 >= 0x19)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, (uint64_t)v24, (uint64_t)v19 >> 3, 8);
        v20 = v23;
      }
      else
      {
        v20 = 0;
      }
      if (v18 != 1)
      {
        memcpy((char *)v22 + 8 * v20, (const void *)(v17 + 8), v19);
        v20 = v23;
      }
      LODWORD(v23) = v20 + (v19 >> 3);
      v14 = sub_1C618AB20(v12, (uint64_t)&v22, *(uint64_t ***)(v21 + 48));
      if (v22 != v24)
        free(v22);
      v12 = (uint64_t *)this[13];
    }
    v15 = *((_QWORD *)this[8] + *((unsigned int *)this + 18) - 1);
    v22 = v24;
    v24[0] = v14;
    v24[1] = v15;
    v23 = 0x200000002;
    MulExpr = llvm::ScalarEvolution::getMulExpr((uint64_t)v12, (uint64_t)&v22, 0, 0);
    if (v22 != v24)
      free(v22);
    __asm { BR              X11 }
  }
  if (*(_WORD *)(TripCountFromExitCount + 24))
    return -1;
  v9 = *(_QWORD *)(TripCountFromExitCount + 32);
  v10 = *(_DWORD *)(v9 + 32);
  if (v10 > 0x40)
    return **(_QWORD **)(v9 + 24);
  else
    return (uint64_t)(*(_QWORD *)(v9 + 24) << -(char)v10) >> -(char)v10;
}

uint64_t llvm::IndexedReference::isConsecutive(llvm::IndexedReference *this, const llvm::Loop *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t MulExpr;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[4];

  v20[3] = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)*((_QWORD *)this + 3);
  v4 = *((unsigned int *)this + 8);
  v5 = v3[v4 - 1];
  if (!(_DWORD)v4)
  {
LABEL_10:
    v9 = (uint64_t *)*((_QWORD *)this + 13);
    v10 = *(_QWORD *)(v5 + 40);
    if (v10 == 2)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8);
    }
    else
    {
      v15 = *(_QWORD *)(v5 + 32);
      v18 = v20;
      v19 = 0x300000000;
      v16 = 8 * v10 - 8;
      if ((unint64_t)v16 >= 0x19)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, (uint64_t)v20, v16 >> 3, 8);
        v17 = v19;
      }
      else
      {
        v17 = 0;
      }
      if (v10 != 1)
      {
        memcpy((char *)v18 + 8 * v17, (const void *)(v15 + 8), 8 * v10 - 8);
        v17 = v19;
      }
      LODWORD(v19) = v17 + ((unint64_t)v16 >> 3);
      v11 = sub_1C618AB20(v9, (uint64_t)&v18, *(uint64_t ***)(v5 + 48));
      if (v18 != v20)
        free(v18);
      v9 = (uint64_t *)*((_QWORD *)this + 13);
    }
    v12 = *(_QWORD *)(*((_QWORD *)this + 8) + 8 * *((unsigned int *)this + 18) - 8);
    v18 = v20;
    v20[0] = v11;
    v20[1] = v12;
    v19 = 0x200000002;
    MulExpr = llvm::ScalarEvolution::getMulExpr((uint64_t)v9, (uint64_t)&v18, 0, 0);
    if (v18 != v20)
      free(v18);
    __asm { BR              X11 }
  }
  v7 = 8 * v4;
  while (1)
  {
    v8 = *v3;
    if (*v3 != v5)
    {
      if (*(_WORD *)(v8 + 24) == 7)
      {
        if (*(const llvm::Loop **)(v8 + 48) == a2)
          return 0;
        goto LABEL_8;
      }
      if (llvm::ScalarEvolution::getLoopDisposition(*((llvm::ScalarEvolution **)this + 13), (const llvm::SCEV *)v8, a2) != 1)return 0;
    }
LABEL_8:
    ++v3;
    v7 -= 8;
    if (!v7)
    {
      v5 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * *((unsigned int *)this + 8) - 8);
      goto LABEL_10;
    }
  }
}

unint64_t llvm::IndexedReference::getLastCoefficient(llvm::IndexedReference *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * *((unsigned int *)this + 8) - 8);
  v2 = *(_QWORD *)(v1 + 40);
  if (v2 == 2)
    return *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8);
  v5 = (uint64_t *)*((_QWORD *)this + 13);
  v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * *((unsigned int *)this + 8) - 8);
  v7 = *(_QWORD *)(v1 + 32);
  v11 = v13;
  v12 = 0x300000000;
  v8 = v2;
  v9 = 8 * v2 - 8;
  if (v9 >= 0x19)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v11, (uint64_t)v13, (uint64_t)v9 >> 3, 8);
    v10 = v12;
  }
  else
  {
    v10 = 0;
  }
  if (v8 != 1)
  {
    memcpy((char *)v11 + 8 * v10, (const void *)(v7 + 8), v9);
    v10 = v12;
  }
  LODWORD(v12) = v10 + (v9 >> 3);
  v3 = sub_1C618AB20(v5, (uint64_t)&v11, *(uint64_t ***)(v6 + 48));
  if (v11 != v13)
    free(v11);
  return v3;
}

BOOL llvm::IndexedReference::isCoeffForLoopZeroOrInvariant(llvm::ScalarEvolution **this, const llvm::SCEV *a2, const llvm::Loop *a3)
{
  if (*((_WORD *)a2 + 12) == 7)
    return *((_QWORD *)a2 + 6) != (_QWORD)a3;
  else
    return llvm::ScalarEvolution::getLoopDisposition(this[13], a2, a3) == 1;
}

uint64_t llvm::CacheCost::CacheCost(uint64_t a1, uint64_t a2, uint64_t a3, llvm::ScalarEvolution *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  const llvm::Loop **v17;
  uint64_t v18;
  const llvm::Loop *v19;
  unsigned int SmallConstantTripCount;
  const llvm::Loop *v21;
  unint64_t v22;
  const llvm::Loop **v23;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x800000000;
  if (*(_DWORD *)(a2 + 8))
    llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(a1, a2);
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)(a1 + 88) = 0x300000000;
  *(_QWORD *)(a1 + 144) = a1 + 160;
  *(_QWORD *)(a1 + 152) = 0x300000000;
  if ((a8 & 0xFF00000000) != 0)
  {
    *(_QWORD *)(a1 + 208) = a8;
  }
  else
  {
    *(_DWORD *)(a1 + 208) = dword_1ED7F2930;
    *(_BYTE *)(a1 + 212) = 1;
  }
  *(_QWORD *)(a1 + 216) = a3;
  *(_QWORD *)(a1 + 224) = a4;
  *(_QWORD *)(a1 + 232) = a5;
  *(_QWORD *)(a1 + 240) = a6;
  *(_QWORD *)(a1 + 248) = a7;
  v16 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v16)
  {
    v17 = *(const llvm::Loop ***)a2;
    v18 = 8 * v16;
    do
    {
      v19 = *v17;
      SmallConstantTripCount = llvm::ScalarEvolution::getSmallConstantTripCount(a4, *v17);
      if (SmallConstantTripCount)
        v21 = (const llvm::Loop *)SmallConstantTripCount;
      else
        v21 = (const llvm::Loop *)dword_1ED7F2870;
      v22 = *(unsigned int *)(a1 + 88);
      if (v22 >= *(unsigned int *)(a1 + 92))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 80, a1 + 96, v22 + 1, 16);
        v22 = *(unsigned int *)(a1 + 88);
      }
      v23 = (const llvm::Loop **)(*(_QWORD *)(a1 + 80) + 16 * v22);
      *v23 = v19;
      v23[1] = v21;
      ++*(_DWORD *)(a1 + 88);
      ++v17;
      v18 -= 8;
    }
    while (v18);
  }
  llvm::CacheCost::calculateCacheFootprint((llvm::CacheCost *)a1);
  return a1;
}

void llvm::CacheCost::calculateCacheFootprint(llvm::CacheCost *this)
{
  uint64_t v2;
  llvm::Loop **v3;
  uint64_t v4;
  llvm::Loop *v5;
  uint64_t v6;
  unint64_t v7;
  llvm::Loop **v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[81];

  v19[80] = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v18 = 0x800000000;
  if (llvm::CacheCost::populateReferenceGroups((uint64_t)this, (uint64_t)&v17))
  {
    v2 = *((unsigned int *)this + 2);
    if ((_DWORD)v2)
    {
      v3 = *(llvm::Loop ***)this;
      v4 = 8 * v2;
      do
      {
        v5 = *v3;
        v6 = llvm::CacheCost::computeLoopCacheCost((uint64_t)this, *v3, (uint64_t)&v17);
        v7 = *((unsigned int *)this + 38);
        if (v7 >= *((unsigned int *)this + 39))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 144, (uint64_t)this + 160, v7 + 1, 16);
          v7 = *((unsigned int *)this + 38);
        }
        v8 = (llvm::Loop **)(*((_QWORD *)this + 18) + 16 * v7);
        *v8 = v5;
        v8[1] = (llvm::Loop *)v6;
        v9 = *((_DWORD *)this + 38) + 1;
        *((_DWORD *)this + 38) = v9;
        ++v3;
        v4 -= 8;
      }
      while (v4);
    }
    else
    {
      v9 = *((_DWORD *)this + 38);
    }
    v13 = 126 - 2 * __clz(v9);
    if (v9)
      v14 = v13;
    else
      v14 = 0;
    sub_1C4EA8110(*((uint64_t **)this + 18), (uint64_t *)(*((_QWORD *)this + 18) + 16 * v9), v14, 1);
    v10 = v17;
    if ((_DWORD)v18)
    {
      v15 = 80 * v18;
      v16 = (char *)v17 - 80;
      do
      {
        sub_1C61A0EB4((char **)&v16[v15]);
        v15 -= 80;
      }
      while (v15);
      v10 = v17;
    }
    LODWORD(v18) = 0;
  }
  else
  {
    v10 = v17;
    if ((_DWORD)v18)
    {
      v11 = 80 * v18;
      v12 = (char *)v17 - 80;
      do
      {
        sub_1C61A0EB4((char **)&v12[v11]);
        v11 -= 80;
      }
      while (v11);
      v10 = v17;
    }
  }
  if (v10 != v19)
    free(v10);
}

_QWORD *sub_1C4EA7C50(_QWORD **a1, int a2)
{
  _QWORD **v2;
  _QWORD **v3;
  _QWORD *result;
  _QWORD **v5;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD **v9;

  v2 = a1;
  v3 = &a1[a2];
  result = *(v3 - 1);
  if (*result)
  {
    if (a2)
    {
      while (1)
      {
        v5 = v2 + 1;
        if (v2 + 1 == v3)
          break;
        v6 = 0;
        v9 = v2;
        v7 = *v2;
        v8 = v9[1];
        do
        {
          v8 = (_QWORD *)*v8;
          ++v6;
        }
        while (v8);
        do
        {
          v7 = (_QWORD *)*v7;
          LODWORD(v8) = (_DWORD)v8 + 1;
        }
        while (v7);
        v2 = v5;
        if (v6 < v8)
          goto LABEL_10;
      }
    }
    v5 = v3;
LABEL_10:
    if (v5 != v3)
      return 0;
  }
  return result;
}

BOOL llvm::CacheCost::populateReferenceGroups(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 hasTemporalReuse;
  char v19;
  unsigned int v20;
  unsigned __int16 hasSpacialReuse;
  uint64_t v25;
  uint64_t v26;
  int v28[2];
  char *v29[2];
  _QWORD v30[9];

  v30[8] = *MEMORY[0x1E0C80C00];
  v3 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 232) + 760))(**(_QWORD **)(a1 + 232));
  v4 = sub_1C4EA7C50(*(_QWORD ***)a1, *(_DWORD *)(a1 + 8));
  v5 = v4[4];
  v25 = v4[5];
  if (v25 != v5)
  {
    v6 = v4;
    do
    {
      v26 = v5;
      v7 = *(_QWORD *)v5 + 40;
      for (i = *(_QWORD *)(*(_QWORD *)v5 + 48); i != v7; i = *(_QWORD *)(i + 8))
      {
        if (i)
          v9 = i - 24;
        else
          v9 = 0;
        if ((*(_BYTE *)(v9 + 16) & 0xFE) == 0x3C)
        {
          v10 = (_QWORD *)operator new();
          v11 = *(uint64_t **)(a1 + 216);
          v12 = *(_QWORD *)(a1 + 224);
          *(_BYTE *)v10 = 0;
          v10[1] = v9;
          v10[2] = 0;
          v10[3] = v10 + 5;
          v10[4] = 0x300000000;
          v10[8] = v10 + 10;
          v10[9] = 0x300000000;
          v10[13] = v12;
          v13 = llvm::IndexedReference::delinearize((uint64_t)v10, v11);
          *(_BYTE *)v10 = v13;
          *(_QWORD *)v28 = v10;
          if ((v13 & 1) == 0)
          {
            *(_QWORD *)v28 = 0;
LABEL_27:
            sub_1C4EAB348(v10);
            continue;
          }
          v14 = *(unsigned int *)(a2 + 8);
          if ((_DWORD)v14)
          {
            v15 = *(uint64_t ***)a2;
            v16 = 80 * v14;
            while (1)
            {
              v17 = **v15;
              hasTemporalReuse = llvm::IndexedReference::hasTemporalReuse(*(uint64_t *)v28, v17, *(_DWORD *)(a1 + 208), v6, *(llvm::DependenceInfo **)(a1 + 248), *(llvm::AAResults **)(a1 + 240));
              v19 = hasTemporalReuse;
              v20 = hasTemporalReuse;
              hasSpacialReuse = llvm::IndexedReference::hasSpacialReuse(*(uint64_t *)v28, v17, v3, *(llvm::AAResults **)(a1 + 240));
              if (v20 >= 0x100 && v19 != 0)
                break;
              if (hasSpacialReuse >= 0x100u && hasSpacialReuse != 0)
                break;
              v15 += 10;
              v16 -= 80;
              if (!v16)
                goto LABEL_23;
            }
            sub_1C4EA7F14((uint64_t)v15, (char *)v28);
          }
          else
          {
LABEL_23:
            v29[0] = (char *)v30;
            v29[1] = (char *)0x800000000;
            sub_1C4EA7F14((uint64_t)v29, (char *)v28);
            sub_1C61A00EC(a2, (unint64_t)v29);
            sub_1C61A0EB4(v29);
          }
          v10 = *(_QWORD **)v28;
          *(_QWORD *)v28 = 0;
          if (v10)
            goto LABEL_27;
        }
      }
      v5 = v26 + 8;
    }
    while (v26 + 8 != v25);
  }
  return *(_DWORD *)(a2 + 8) != 0;
}

void sub_1C4EA7F14(uint64_t a1, char *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v11;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v8 = v4 + 1;
    v9 = v5 + 8 * v4;
    if (v5 <= (unint64_t)a2 && v9 > (unint64_t)a2)
    {
      v11 = &a2[-v5];
      sub_1C61A0DE8(a1, v8);
      v5 = *(_QWORD *)a1;
      a2 = &v11[*(_QWORD *)a1];
    }
    else
    {
      sub_1C61A0DE8(a1, v8);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v5 + 8 * v6) = v7;
  *(_DWORD *)(a1 + 8) = v6 + 1;
}

uint64_t llvm::CacheCost::computeRefGroupCacheCost(uint64_t a1, llvm::ScalarEvolution ****a2, const llvm::Loop *a3)
{
  llvm::ScalarEvolution **v4;

  v4 = **a2;
  (*(void (**)(_QWORD))(***(_QWORD ***)(a1 + 232) + 760))(**(_QWORD **)(a1 + 232));
  return llvm::IndexedReference::computeRefCost(v4, a3);
}

uint64_t sub_1C4EA7FDC(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  v4 = (char *)v3 - (char *)v2;
  if (v3 == v2)
  {
    v5 = (_QWORD *)(a1 + 40);
  }
  else
  {
    v5 = (_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 32);
    v7 = &v2[v6 >> 7];
    v8 = (uint64_t)*v7;
    v9 = (uint64_t)*v7 + 32 * (v6 & 0x7F);
    v10 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v6) >> 4) & 0xFFFFFFFFFFFFFF8))
        + 32 * ((*(_QWORD *)(a1 + 40) + v6) & 0x7F);
    while (v9 != v10)
    {
      if (*(_BYTE *)(v9 + 24))
        *(_BYTE *)(v9 + 24) = 0;
      v9 += 32;
      if (v9 - v8 == 4096)
      {
        v11 = (uint64_t)v7[1];
        ++v7;
        v8 = v11;
        v9 = v11;
      }
    }
  }
  *v5 = 0;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v4 >> 3;
  if (v12 == 1)
  {
    v13 = 64;
    goto LABEL_15;
  }
  if (v12 == 2)
  {
    v13 = 128;
LABEL_15:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *sub_1C4EA8110(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  BOOL v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t *v62;
  int64_t v63;
  int64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v48 = *(a2 - 1);
        v49 = v8[1];
        if (v48 > v49)
        {
          v50 = *v8;
          *v8 = *(a2 - 2);
          v8[1] = v48;
          *(a2 - 2) = v50;
          *(a2 - 1) = v49;
        }
        return result;
      case 3:
        return sub_1C4EA879C(v8, v8 + 2, a2 - 2);
      case 4:
        return sub_1C4EA89A0(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5:
        return sub_1C4EA8A3C(v8, v8 + 2, v8 + 4, v8 + 6, a2 - 2);
      default:
        if (v9 <= 383)
        {
          v51 = v8 + 2;
          v53 = v8 == a2 || v51 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v53)
            {
              v54 = 0;
              v55 = v8;
              do
              {
                v56 = v55[3];
                v57 = v55[1];
                v55 = v51;
                if (v56 > v57)
                {
                  v58 = *v51;
                  v59 = v54;
                  while (1)
                  {
                    v60 = (char *)v8 + v59;
                    v61 = *(uint64_t *)((char *)v8 + v59 + 8);
                    *((_QWORD *)v60 + 2) = *(uint64_t *)((char *)v8 + v59);
                    *((_QWORD *)v60 + 3) = v61;
                    if (!v59)
                      break;
                    v59 -= 16;
                    if (v56 <= *((_QWORD *)v60 - 1))
                    {
                      v62 = (uint64_t *)((char *)v8 + v59 + 16);
                      goto LABEL_76;
                    }
                  }
                  v62 = v8;
LABEL_76:
                  *v62 = v58;
                  v62[1] = v56;
                }
                v51 = v55 + 2;
                v54 += 16;
              }
              while (v55 + 2 != a2);
            }
          }
          else if (!v53)
          {
            v96 = v8 + 3;
            do
            {
              v97 = v7[3];
              v98 = v7[1];
              v7 = v51;
              if (v97 > v98)
              {
                v99 = *v51;
                v100 = v96;
                do
                {
                  v101 = v100;
                  v102 = *(v100 - 4);
                  *(v100 - 1) = *(v100 - 3);
                  v103 = *(v100 - 2);
                  v100 -= 2;
                  *v101 = v103;
                }
                while (v97 > v102);
                *(v100 - 1) = v99;
                *v100 = v97;
              }
              v51 = v7 + 2;
              v96 += 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v63 = (unint64_t)(v10 - 2) >> 1;
            v64 = v63;
            do
            {
              v65 = v64;
              if (v63 >= v64)
              {
                v66 = (2 * v64) | 1;
                v67 = &v8[2 * v66];
                if (2 * v65 + 2 < v10)
                {
                  v68 = v67[1];
                  v69 = v67[3];
                  v67 += 2 * (v68 > v69);
                  if (v68 > v69)
                    v66 = 2 * v65 + 2;
                }
                v70 = v67[1];
                v71 = v8[2 * v65 + 1];
                if (v70 <= v71)
                {
                  v72 = &v8[2 * v65];
                  v73 = *v72;
                  do
                  {
                    v74 = v72;
                    v72 = v67;
                    *v74 = *v67;
                    v74[1] = v70;
                    if (v63 < v66)
                      break;
                    v75 = (2 * v66) | 1;
                    v67 = &v8[2 * v75];
                    v76 = 2 * v66 + 2;
                    if (v76 < v10)
                    {
                      v77 = v67[1];
                      result = (uint64_t *)v67[3];
                      v67 += 2 * (v77 > (uint64_t)result);
                      if (v77 > (uint64_t)result)
                        v75 = v76;
                    }
                    v70 = v67[1];
                    v66 = v75;
                  }
                  while (v70 <= v71);
                  *v72 = v73;
                  v72[1] = v71;
                }
              }
              v64 = v65 - 1;
            }
            while (v65);
            do
            {
              v78 = 0;
              v79 = *v8;
              v80 = v8[1];
              v81 = v8;
              do
              {
                v82 = &v81[2 * v78 + 2];
                v83 = (2 * v78) | 1;
                v84 = 2 * v78 + 2;
                if (v84 < v10)
                {
                  v85 = v82[1];
                  v86 = v82[3];
                  v82 += 2 * (v85 > v86);
                  if (v85 > v86)
                    v83 = v84;
                }
                v87 = v82[1];
                *v81 = *v82;
                v81[1] = v87;
                v81 = v82;
                v78 = v83;
              }
              while (v83 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v82 == a2 - 2)
              {
                *v82 = v79;
                v82[1] = v80;
              }
              else
              {
                v88 = *(a2 - 1);
                *v82 = *(a2 - 2);
                v82[1] = v88;
                *(a2 - 2) = v79;
                *(a2 - 1) = v80;
                v89 = (char *)v82 - (char *)v8 + 16;
                if (v89 >= 17)
                {
                  v90 = (((unint64_t)v89 >> 4) - 2) >> 1;
                  v91 = v8[2 * v90 + 1];
                  v92 = v82[1];
                  if (v91 > v92)
                  {
                    v93 = *v82;
                    do
                    {
                      v94 = v82;
                      v82 = &v8[2 * v90];
                      *v94 = *v82;
                      v94[1] = v91;
                      if (!v90)
                        break;
                      v90 = (v90 - 1) >> 1;
                      v91 = v8[2 * v90 + 1];
                    }
                    while (v91 > v92);
                    *v82 = v93;
                    v82[1] = v92;
                  }
                }
              }
              a2 -= 2;
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[2 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          result = sub_1C4EA879C(&v7[2 * ((unint64_t)v10 >> 1)], v7, a2 - 2);
        }
        else
        {
          sub_1C4EA879C(v7, &v7[2 * ((unint64_t)v10 >> 1)], a2 - 2);
          sub_1C4EA879C(v7 + 2, v12 - 2, a2 - 4);
          sub_1C4EA879C(v7 + 4, &v7[2 * v11 + 2], a2 - 6);
          result = sub_1C4EA879C(v12 - 2, v12, &v7[2 * v11 + 2]);
          v13 = *v7;
          v14 = v7[1];
          v15 = v12[1];
          *v7 = *v12;
          v7[1] = v15;
          *v12 = v13;
          v12[1] = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v16 = v7[1];
          if (*(v7 - 1) > v16)
            goto LABEL_12;
          if (v16 <= *(a2 - 1))
          {
            v36 = v7 + 2;
            do
            {
              v8 = v36;
              if (v36 >= a2)
                break;
              v37 = v36[1];
              v36 += 2;
            }
            while (v16 <= v37);
          }
          else
          {
            v34 = v7;
            do
            {
              v8 = v34 + 2;
              v35 = v34[3];
              v34 += 2;
            }
            while (v16 <= v35);
          }
          v38 = a2;
          if (v8 < a2)
          {
            v39 = a2;
            do
            {
              v38 = v39 - 2;
              v40 = *(v39 - 1);
              v39 -= 2;
            }
            while (v16 > v40);
          }
          v41 = *v7;
          while (v8 < v38)
          {
            v42 = *v8;
            v43 = v8[1];
            v44 = v38[1];
            *v8 = *v38;
            v8[1] = v44;
            *v38 = v42;
            v38[1] = v43;
            do
            {
              v45 = v8[3];
              v8 += 2;
            }
            while (v16 <= v45);
            do
            {
              v46 = *(v38 - 1);
              v38 -= 2;
            }
            while (v16 > v46);
          }
          if (v8 - 2 != v7)
          {
            v47 = *(v8 - 1);
            *v7 = *(v8 - 2);
            v7[1] = v47;
          }
          a4 = 0;
          *(v8 - 2) = v41;
          *(v8 - 1) = v16;
          continue;
        }
        v16 = v7[1];
LABEL_12:
        v17 = 0;
        v18 = *v7;
        do
        {
          v19 = v7[v17 + 3];
          v17 += 2;
        }
        while (v19 > v16);
        v20 = &v7[v17];
        v21 = a2;
        if (v17 == 2)
        {
          v24 = a2;
          while (v20 < v24)
          {
            v22 = v24 - 2;
            v25 = *(v24 - 1);
            v24 -= 2;
            if (v25 > v16)
              goto LABEL_22;
          }
          v22 = v24;
        }
        else
        {
          do
          {
            v22 = v21 - 2;
            v23 = *(v21 - 1);
            v21 -= 2;
          }
          while (v23 <= v16);
        }
LABEL_22:
        v8 = v20;
        if (v20 < v22)
        {
          v26 = v22;
          do
          {
            v27 = *v8;
            v28 = v8[1];
            v29 = v26[1];
            *v8 = *v26;
            v8[1] = v29;
            *v26 = v27;
            v26[1] = v28;
            do
            {
              v30 = v8[3];
              v8 += 2;
            }
            while (v30 > v16);
            do
            {
              v31 = *(v26 - 1);
              v26 -= 2;
            }
            while (v31 <= v16);
          }
          while (v8 < v26);
        }
        if (v8 - 2 != v7)
        {
          v32 = *(v8 - 1);
          *v7 = *(v8 - 2);
          v7[1] = v32;
        }
        *(v8 - 2) = v18;
        *(v8 - 1) = v16;
        if (v20 < v22)
        {
LABEL_33:
          result = (uint64_t *)sub_1C4EA8110(v7, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v33 = sub_1C4EA8830(v7, v8 - 2);
        result = (uint64_t *)sub_1C4EA8830(v8, a2);
        if (!(_DWORD)result)
        {
          if (v33)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 2;
        if (!v33)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C4EA879C(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a2[1];
  v4 = result[1];
  v5 = a3[1];
  if (v3 <= v4)
  {
    if (v5 > v3)
    {
      v7 = *a3;
      a2[1] = v5;
      a3[1] = v3;
      v9 = *a2;
      v8 = a2[1];
      *a2 = v7;
      *a3 = v9;
      v10 = result[1];
      if (v8 > v10)
      {
        v11 = *result;
        *result = *a2;
        result[1] = v8;
        *a2 = v11;
        a2[1] = v10;
      }
    }
  }
  else
  {
    v6 = *result;
    if (v5 <= v3)
    {
      *result = *a2;
      result[1] = v3;
      *a2 = v6;
      a2[1] = v4;
      v12 = a3[1];
      if (v12 <= v4)
        return result;
      *a2 = *a3;
      a2[1] = v12;
    }
    else
    {
      *result = *a3;
      result[1] = v5;
    }
    *a3 = v6;
    a3[1] = v4;
  }
  return result;
}

BOOL sub_1C4EA8830(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = a1[1];
      if (v6 > v7)
      {
        v8 = *a1;
        *a1 = *(a2 - 2);
        a1[1] = v6;
        *(a2 - 2) = v8;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C4EA879C(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_1C4EA89A0(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_1C4EA8A3C(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v9 = a1 + 4;
      sub_1C4EA879C(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = v10[1];
    if (v13 > v9[1])
    {
      v14 = *v10;
      v15 = v11;
      while (1)
      {
        v16 = (uint64_t *)((char *)a1 + v15);
        v17 = *(uint64_t *)((char *)a1 + v15 + 40);
        v16[6] = *(uint64_t *)((char *)a1 + v15 + 32);
        v16[7] = v17;
        if (v15 == -32)
          break;
        v15 -= 16;
        if (v13 <= v16[3])
        {
          v18 = (uint64_t *)((char *)a1 + v15 + 48);
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *v18 = v14;
      v18[1] = v13;
      if (++v12 == 8)
        return v10 + 2 == a2;
    }
    v9 = v10;
    v11 += 16;
    v10 += 2;
    if (v10 == a2)
      return 1;
  }
}

uint64_t *sub_1C4EA89A0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  result = sub_1C4EA879C(a1, a2, a3);
  v9 = a4[1];
  v10 = a3[1];
  if (v9 > v10)
  {
    v11 = *a4;
    a3[1] = v9;
    a4[1] = v10;
    v13 = *a3;
    v12 = a3[1];
    *a3 = v11;
    *a4 = v13;
    v14 = a2[1];
    if (v12 > v14)
    {
      v15 = *a3;
      a2[1] = v12;
      a3[1] = v14;
      v17 = *a2;
      v16 = a2[1];
      *a2 = v15;
      *a3 = v17;
      v18 = a1[1];
      if (v16 > v18)
      {
        v19 = *a1;
        *a1 = *a2;
        a1[1] = v16;
        *a2 = v19;
        a2[1] = v18;
      }
    }
  }
  return result;
}

uint64_t *sub_1C4EA8A3C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  result = sub_1C4EA89A0(a1, a2, a3, a4);
  v11 = a5[1];
  v12 = a4[1];
  if (v11 > v12)
  {
    v13 = *a5;
    a4[1] = v11;
    a5[1] = v12;
    v15 = *a4;
    v14 = a4[1];
    *a4 = v13;
    *a5 = v15;
    v16 = a3[1];
    if (v14 > v16)
    {
      v17 = *a4;
      a3[1] = v14;
      a4[1] = v16;
      v19 = *a3;
      v18 = a3[1];
      *a3 = v17;
      *a4 = v19;
      v20 = a2[1];
      if (v18 > v20)
      {
        v21 = *a3;
        a2[1] = v18;
        a3[1] = v20;
        v23 = *a2;
        v22 = a2[1];
        *a2 = v21;
        *a3 = v23;
        v24 = a1[1];
        if (v22 > v24)
        {
          v25 = *a1;
          *a1 = *a2;
          a1[1] = v22;
          *a2 = v25;
          a2[1] = v24;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C4EA8B08(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = (void *)(a1 + 32);
  *(_QWORD *)a1 = v6;
  v8 = *a2;
  v7 = a2[1];
  if (v7 == *a2)
  {
    *(_QWORD *)(a1 + 8) = v6;
    v9 = *((unsigned int *)a2 + 5);
    if ((_DWORD)v9)
      memmove(v6, (const void *)a2[1], 8 * v9);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v7;
    a2[1] = v8;
  }
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  a2[2] = 8;
  *((_DWORD *)a2 + 6) = 0;
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_QWORD *)(a1 + 104) = a2[13];
  *(_QWORD *)(a1 + 112) = a2[14];
  *(_QWORD *)(a1 + 120) = a2[15];
  *((_OWORD *)a2 + 6) = 0u;
  *((_OWORD *)a2 + 7) = 0u;
  *(_QWORD *)(a1 + 128) = a2[16];
  *(_QWORD *)(a1 + 136) = a2[17];
  a2[16] = 0;
  a2[17] = 0;
  *(_DWORD *)(a1 + 144) = *((_DWORD *)a2 + 36);
  v10 = (void *)(a1 + 184);
  *(_QWORD *)(a1 + 152) = a1 + 184;
  v12 = *a3;
  v11 = a3[1];
  if (v11 == *a3)
  {
    *(_QWORD *)(a1 + 160) = v10;
    v13 = *((unsigned int *)a3 + 5);
    if ((_DWORD)v13)
      memmove(v10, (const void *)a3[1], 8 * v13);
  }
  else
  {
    *(_QWORD *)(a1 + 160) = v11;
    a3[1] = v12;
  }
  *(_QWORD *)(a1 + 168) = a3[2];
  *(_DWORD *)(a1 + 176) = *((_DWORD *)a3 + 6);
  a3[2] = 8;
  *((_DWORD *)a3 + 6) = 0;
  *(_QWORD *)(a1 + 248) = a3[12];
  *(_QWORD *)(a1 + 256) = a3[13];
  *(_QWORD *)(a1 + 264) = a3[14];
  *(_QWORD *)(a1 + 272) = a3[15];
  *((_OWORD *)a3 + 6) = 0u;
  *((_OWORD *)a3 + 7) = 0u;
  *(_QWORD *)(a1 + 280) = a3[16];
  *(_QWORD *)(a1 + 288) = a3[17];
  a3[16] = 0;
  a3[17] = 0;
  *(_DWORD *)(a1 + 296) = *((_DWORD *)a3 + 36);
  return a1;
}

void sub_1C4EA8C70(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x80;
  v4 = v2 - 128;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v5 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
    {
LABEL_20:
      *(_QWORD *)v6 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v18 = 1;
      else
        v18 = (v6 - v10) >> 2;
      if (!(v18 >> 61))
      {
        v19 = (char *)operator new(8 * v18);
        v20 = &v19[8 * (v18 >> 2)];
        v21 = &v19[8 * v18];
        v23 = v6 - v7;
        v22 = v6 == v7;
        v6 = v20;
        if (!v22)
        {
          v6 = &v20[v23 & 0xFFFFFFFFFFFFFFF8];
          v24 = 8 * (v23 >> 3);
          v25 = &v19[8 * (v18 >> 2)];
          do
          {
            v26 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v25 = v26;
            v25 += 8;
            v24 -= 8;
          }
          while (v24);
        }
        goto LABEL_18;
      }
LABEL_47:
      sub_1C4764EE4();
    }
LABEL_5:
    v12 = v11 >> 3;
    if (v12 >= -1)
      v13 = v12 + 1;
    else
      v13 = v12 + 2;
    v14 = -(v13 >> 1);
    v15 = v13 >> 1;
    v16 = &v7[-8 * v15];
    v17 = v6 - v7;
    if (v17)
    {
      memmove(&v7[-8 * v15], v7, v17);
      v7 = *(char **)(a1 + 8);
    }
    v6 = &v16[v17];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_20;
  }
  v27 = *(_QWORD *)(a1 + 16);
  v28 = v27 - *(_QWORD *)(a1 + 8);
  v29 = *(_QWORD *)(a1 + 24);
  v30 = v29 - *(_QWORD *)a1;
  if (v28 < v30)
  {
    if (v29 != v27)
    {
      *(_QWORD *)&v46 = operator new(0x1000uLL);
      sub_1C61351F0(a1, &v46);
      return;
    }
    *(_QWORD *)&v46 = operator new(0x1000uLL);
    sub_1C6135314((void **)a1, &v46);
    v31 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v32 = *v31;
    v7 = (char *)(v31 + 1);
    v8 = v32;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
      goto LABEL_20;
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v33 = 1;
      else
        v33 = (v6 - v10) >> 2;
      if (!(v33 >> 61))
      {
        v19 = (char *)operator new(8 * v33);
        v20 = &v19[8 * (v33 >> 2)];
        v21 = &v19[8 * v33];
        v34 = v6 - v7;
        v22 = v6 == v7;
        v6 = v20;
        if (!v22)
        {
          v6 = &v20[v34 & 0xFFFFFFFFFFFFFFF8];
          v35 = 8 * (v34 >> 3);
          v36 = &v19[8 * (v33 >> 2)];
          do
          {
            v37 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v36 = v37;
            v36 += 8;
            v35 -= 8;
          }
          while (v35);
        }
LABEL_18:
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v20;
        *(_QWORD *)(a1 + 16) = v6;
        *(_QWORD *)(a1 + 24) = v21;
        if (v10)
        {
          operator delete(v10);
          v6 = *(char **)(a1 + 16);
        }
        goto LABEL_20;
      }
      goto LABEL_47;
    }
    goto LABEL_5;
  }
  if (v29 == *(_QWORD *)a1)
    v38 = 1;
  else
    v38 = v30 >> 2;
  v48 = a1 + 24;
  if (v38 >> 61)
    goto LABEL_47;
  *(_QWORD *)&v46 = operator new(8 * v38);
  *((_QWORD *)&v46 + 1) = v46 + v28;
  *(_QWORD *)&v47 = v46 + v28;
  *((_QWORD *)&v47 + 1) = v46 + 8 * v38;
  v45 = operator new(0x1000uLL);
  sub_1C61351F0((uint64_t)&v46, &v45);
  v39 = *(char **)(a1 + 16);
  if (v39 == *(char **)(a1 + 8))
  {
    v40 = *(char **)(a1 + 16);
  }
  else
  {
    do
    {
      v39 -= 8;
      sub_1C6135314((void **)&v46, v39);
    }
    while (v39 != *(char **)(a1 + 8));
    v40 = *(char **)(a1 + 16);
  }
  v41 = *(char **)a1;
  v42 = v46;
  v43 = v47;
  *(_QWORD *)&v46 = *(_QWORD *)a1;
  *((_QWORD *)&v46 + 1) = v39;
  v44 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)a1 = v42;
  *(_OWORD *)(a1 + 16) = v43;
  *(_QWORD *)&v47 = v40;
  *((_QWORD *)&v47 + 1) = v44;
  if (v40 != v39)
    *(_QWORD *)&v47 = &v40[(v39 - v40 + 7) & 0xFFFFFFFFFFFFFFF8];
  if (v41)
    operator delete(v41);
}

uint64_t sub_1C4EA8F38(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  const void *v5;
  const void *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  _BYTE *v11;
  const void *v12;
  const void *v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE v27[64];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  _BYTE *v34;
  _BYTE *v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  _BYTE v39[64];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;

  v4 = v39;
  v34 = v39;
  v5 = *(const void **)(a1 + 8);
  if (v5 == *(const void **)a1)
  {
    v35 = v39;
    v6 = v5;
  }
  else
  {
    v24 = *(unsigned int *)(a1 + 16);
    v4 = malloc_type_malloc(8 * v24, 0x4065EBACuLL);
    if (!v4)
    {
      if ((_DWORD)v24)
        goto LABEL_44;
      v4 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v4)
        goto LABEL_44;
    }
    v35 = v4;
    v6 = *(const void **)a1;
    v5 = *(const void **)(a1 + 8);
  }
  v8 = *(_DWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 20);
  v36 = v8;
  if (v5 == v6)
    v9 = v7;
  else
    v9 = v8;
  if (v9)
  {
    memmove(v4, v5, 8 * v9);
    v7 = *(_DWORD *)(a1 + 20);
  }
  v10 = *(_DWORD *)(a1 + 24);
  v37 = v7;
  v38 = v10;
  sub_1C4EA93E4((uint64_t)&v40, (_QWORD *)(a1 + 96));
  v45 = *(_DWORD *)(a1 + 144);
  v11 = v27;
  v12 = *(const void **)(a2 + 8);
  if (v12 != *(const void **)a2)
  {
    v25 = *(unsigned int *)(a2 + 16);
    v11 = malloc_type_malloc(8 * v25, 0x4065EBACuLL);
    if (v11 || !(_DWORD)v25 && (v11 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v26 = v11;
      v13 = *(const void **)a2;
      v12 = *(const void **)(a2 + 8);
      goto LABEL_10;
    }
LABEL_44:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v26 = v27;
  v13 = *(const void **)(a2 + 8);
LABEL_10:
  if (v12 == v13)
    v14 = *(_DWORD *)(a2 + 20);
  else
    v14 = *(_DWORD *)(a2 + 16);
  if (v14)
    memmove(v11, v12, 8 * v14);
  sub_1C4EA93E4((uint64_t)&v28, (_QWORD *)(a2 + 96));
  v15 = 0;
  v33 = *(_DWORD *)(a2 + 144);
  while (v44 != v32)
  {
LABEL_29:
    ++v15;
    sub_1C61A0C64((llvm::SmallPtrSetImplBase *)&v34);
  }
  v16 = (_QWORD *)(v41 + 8 * (v43 >> 7));
  if (v42 == v41)
  {
    v17 = 0;
    v18 = 0;
  }
  else
  {
    v17 = *v16 + 32 * (v43 & 0x7F);
    v18 = *(_QWORD *)(v41 + (((v43 + v44) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((v43 + v44) & 0x7F);
  }
  v19 = (_QWORD *)(v29 + 8 * (v31 >> 7));
  if (v30 == v29)
    v20 = 0;
  else
    v20 = *v19 + 32 * (v31 & 0x7F);
  while (v17 != v18)
  {
    if (!sub_1C4EA9B4C(v17, v20))
      goto LABEL_29;
    v17 += 32;
    if (v17 - *v16 == 4096)
    {
      v21 = v16[1];
      ++v16;
      v17 = v21;
    }
    v20 += 32;
    if (v20 - *v19 == 4096)
    {
      v22 = v19[1];
      ++v19;
      v20 = v22;
    }
  }
  sub_1C4EA7FDC((uint64_t)&v28);
  if (v26 != v27)
    free(v26);
  sub_1C4EA7FDC((uint64_t)&v40);
  if (v35 != v34)
    free(v35);
  return v15;
}

uint64_t sub_1C4EA91EC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _BYTE *v6;
  const void *v7;
  const void *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  _BYTE *v13;
  const void *v14;
  const void *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  _BYTE v29[64];
  _DWORD v30[14];
  _BYTE *v31;
  _BYTE *v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  _BYTE v36[64];
  _DWORD v37[14];
  void *v38;
  void *v39;
  _QWORD v40[8];

  v6 = v36;
  v31 = v36;
  v7 = *(const void **)(a1 + 8);
  if (v7 == *(const void **)a1)
  {
    v32 = v36;
    v8 = v7;
  }
  else
  {
    v22 = *(unsigned int *)(a1 + 16);
    v6 = malloc_type_malloc(8 * v22, 0x4065EBACuLL);
    if (!v6)
    {
      if ((_DWORD)v22)
        goto LABEL_31;
      v6 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v6)
        goto LABEL_31;
    }
    v32 = v6;
    v8 = *(const void **)a1;
    v7 = *(const void **)(a1 + 8);
  }
  v10 = *(_DWORD *)(a1 + 16);
  v9 = *(_DWORD *)(a1 + 20);
  v33 = v10;
  if (v7 == v8)
    v11 = v9;
  else
    v11 = v10;
  if (v11)
  {
    memmove(v6, v7, 8 * v11);
    v9 = *(_DWORD *)(a1 + 20);
  }
  v12 = *(_DWORD *)(a1 + 24);
  v34 = v9;
  v35 = v12;
  sub_1C4EA93E4((uint64_t)v37, (_QWORD *)(a1 + 96));
  v37[12] = *(_DWORD *)(a1 + 144);
  v13 = v29;
  v24 = v29;
  v14 = *(const void **)(a2 + 8);
  if (v14 == *(const void **)a2)
  {
    v25 = v29;
    v15 = v14;
    goto LABEL_10;
  }
  v23 = *(unsigned int *)(a2 + 16);
  v13 = malloc_type_malloc(8 * v23, 0x4065EBACuLL);
  if (!v13 && ((_DWORD)v23 || (v13 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_31:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v25 = v13;
  v15 = *(const void **)a2;
  v14 = *(const void **)(a2 + 8);
LABEL_10:
  v17 = *(_DWORD *)(a2 + 16);
  v16 = *(_DWORD *)(a2 + 20);
  v26 = v17;
  if (v14 == v15)
    v18 = v16;
  else
    v18 = v17;
  if (v18)
  {
    memmove(v13, v14, 8 * v18);
    v16 = *(_DWORD *)(a2 + 20);
  }
  v19 = *(_DWORD *)(a2 + 24);
  v27 = v16;
  v28 = v19;
  sub_1C4EA93E4((uint64_t)v30, (_QWORD *)(a2 + 96));
  v30[12] = *(_DWORD *)(a2 + 144);
  sub_1C4EA9BB8((uint64_t)&v31, (uint64_t)&v24, a3, (uint64_t)&v38);
  v20 = v40[7];
  sub_1C4EA7FDC((uint64_t)v40);
  if (v39 != v38)
    free(v39);
  sub_1C4EA7FDC((uint64_t)v30);
  if (v25 != v24)
    free(v25);
  sub_1C4EA7FDC((uint64_t)v37);
  if (v32 != v31)
    free(v32);
  return v20;
}

uint64_t sub_1C4EA93E4(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2[4];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (char *)(v5 + 8 * (v4 >> 7));
  if (v6 == v5)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 7));
  }
  else
  {
    v8 = (__int128 *)(*(_QWORD *)v7 + 32 * (v4 & 0x7F));
    v9 = a2[5] + v4;
    v10 = (char *)(v5 + 8 * (v9 >> 7));
    v11 = *(_QWORD *)v10 + 32 * (v9 & 0x7F);
  }
  if ((__int128 *)v11 == v8)
    v12 = 0;
  else
    v12 = ((v11 - *(_QWORD *)v10) >> 5) + 16 * (v10 - v7) - (((uint64_t)v8 - *(_QWORD *)v7) >> 5);
  sub_1C4EA94A8((_QWORD *)a1, v7, v8, v12);
  return a1;
}

void sub_1C4EA94A8(_QWORD *a1, _QWORD *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 *v23;
  uint64_t v24;

  v8 = a1[1];
  v9 = a1[2];
  v10 = 16 * (v9 - v8) - 1;
  if (v9 == v8)
    v10 = 0;
  v11 = a1[5];
  v12 = v11 + a1[4];
  v13 = v10 - v12;
  if (a4 > v13)
  {
    sub_1C4EA962C((uint64_t)a1, a4 - v13);
    v11 = a1[5];
    v8 = a1[1];
    v9 = a1[2];
    v12 = a1[4] + v11;
  }
  v14 = (_QWORD *)(v8 + 8 * (v12 >> 7));
  if (v9 == v8)
  {
    v15 = 0;
    if (a4)
      goto LABEL_7;
LABEL_10:
    v18 = v15;
    v17 = v14;
    goto LABEL_13;
  }
  v15 = *v14 + 32 * (v12 & 0x7F);
  if (!a4)
    goto LABEL_10;
LABEL_7:
  v16 = a4 + ((v15 - *v14) >> 5);
  if (v16 < 1)
  {
    v19 = 127 - v16;
    LOBYTE(v16) = ~(127 - v16);
    v17 = &v14[-(v19 >> 7)];
  }
  else
  {
    v17 = &v14[(unint64_t)v16 >> 7];
  }
  v18 = *v17 + 32 * (v16 & 0x7F);
LABEL_13:
  if (v15 != v18)
  {
    do
    {
      v20 = v18;
      if (v14 != v17)
        v20 = *v14 + 4096;
      if (v15 == v20)
      {
        v20 = v15;
      }
      else
      {
        v21 = v15;
        do
        {
          *(_BYTE *)v21 = 0;
          *(_BYTE *)(v21 + 24) = 0;
          if (*((_BYTE *)a3 + 24))
          {
            v22 = *a3;
            *(_QWORD *)(v21 + 16) = *((_QWORD *)a3 + 2);
            *(_OWORD *)v21 = v22;
            *(_BYTE *)(v21 + 24) = 1;
          }
          a3 += 2;
          if ((__int128 *)((char *)a3 - *a2) == (__int128 *)4096)
          {
            v23 = (__int128 *)a2[1];
            ++a2;
            a3 = v23;
          }
          v21 += 32;
        }
        while (v21 != v20);
        v11 = a1[5];
      }
      v11 += (v20 - v15) >> 5;
      a1[5] = v11;
      if (v14 == v17)
        break;
      v24 = v14[1];
      ++v14;
      v15 = v24;
    }
    while (v24 != v18);
  }
}

void sub_1C4EA962C(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int64_t v44;
  char *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;

  v3 = *(char **)(a1 + 16);
  v4 = (uint64_t)&v3[-*(_QWORD *)(a1 + 8)];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x7F) != 0)
    v6 = (v5 >> 7) + 1;
  else
    v6 = v5 >> 7;
  v7 = *(_QWORD *)(a1 + 32);
  if (v6 >= v7 >> 7)
    v8 = v7 >> 7;
  else
    v8 = v6;
  if (v6 <= v7 >> 7)
  {
    for (*(_QWORD *)(a1 + 32) = v7 - (v8 << 7); v8; --v8)
    {
      v14 = *(_QWORD **)(a1 + 8);
      v17 = *v14;
      v15 = (char *)(v14 + 1);
      v16 = v17;
      *(_QWORD *)(a1 + 8) = v15;
      if (v3 == *(char **)(a1 + 24))
      {
        v18 = *(char **)a1;
        if ((unint64_t)v15 <= *(_QWORD *)a1)
        {
          if (v3 == v18)
            v24 = 1;
          else
            v24 = (v3 - v18) >> 2;
          if (v24 >> 61)
            goto LABEL_102;
          v25 = (char *)operator new(8 * v24);
          v26 = &v25[8 * (v24 >> 2)];
          v28 = v3 - v15;
          v27 = v3 == v15;
          v3 = v26;
          if (!v27)
          {
            v3 = &v26[v28 & 0xFFFFFFFFFFFFFFF8];
            v29 = 8 * (v28 >> 3);
            v30 = &v25[8 * (v24 >> 2)];
            do
            {
              v31 = *(_QWORD *)v15;
              v15 += 8;
              *(_QWORD *)v30 = v31;
              v30 += 8;
              v29 -= 8;
            }
            while (v29);
          }
          *(_QWORD *)a1 = v25;
          *(_QWORD *)(a1 + 8) = v26;
          *(_QWORD *)(a1 + 16) = v3;
          *(_QWORD *)(a1 + 24) = &v25[8 * v24];
          if (v18)
          {
            operator delete(v18);
            v3 = *(char **)(a1 + 16);
          }
        }
        else
        {
          v19 = (uint64_t)&v15[-*(_QWORD *)a1] >> 3;
          if (v19 >= -1)
            v20 = v19 + 1;
          else
            v20 = v19 + 2;
          v21 = &v15[-8 * (v20 >> 1)];
          v22 = v3 - v15;
          if (v3 != v15)
          {
            memmove(&v15[-8 * (v20 >> 1)], v15, v3 - v15);
            v3 = *(char **)(a1 + 8);
          }
          v23 = &v3[-8 * (v20 >> 1)];
          v3 = &v21[v22];
          *(_QWORD *)(a1 + 8) = v23;
          *(_QWORD *)(a1 + 16) = &v21[v22];
        }
      }
      *(_QWORD *)v3 = v16;
      v3 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 16))
        {
          *(_QWORD *)&v76 = operator new(0x1000uLL);
          sub_1C61351F0(a1, &v76);
          --v6;
          if (!--v9)
            goto LABEL_48;
        }
        for (i = 0; i != v9; ++i)
        {
          *(_QWORD *)&v76 = operator new(0x1000uLL);
          sub_1C6135314((void **)a1, &v76);
          if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
            v33 = 127;
          else
            v33 = 128;
          v34 = v33 + *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v34;
        }
        v8 = v6;
      }
      else
      {
LABEL_48:
        v34 = *(_QWORD *)(a1 + 32);
      }
      *(_QWORD *)(a1 + 32) = v34 - (v8 << 7);
      if (v8)
      {
        v35 = *(char **)(a1 + 16);
        do
        {
          v36 = *(_QWORD **)(a1 + 8);
          v39 = *v36;
          v37 = (char *)(v36 + 1);
          v38 = v39;
          *(_QWORD *)(a1 + 8) = v37;
          if (v35 == *(char **)(a1 + 24))
          {
            v40 = *(char **)a1;
            if ((unint64_t)v37 <= *(_QWORD *)a1)
            {
              if (v35 == v40)
                v46 = 1;
              else
                v46 = (v35 - v40) >> 2;
              if (v46 >> 61)
                goto LABEL_102;
              v47 = (char *)operator new(8 * v46);
              v48 = &v47[8 * (v46 >> 2)];
              v49 = v35 - v37;
              v27 = v35 == v37;
              v35 = v48;
              if (!v27)
              {
                v35 = &v48[v49 & 0xFFFFFFFFFFFFFFF8];
                v50 = 8 * (v49 >> 3);
                v51 = &v47[8 * (v46 >> 2)];
                do
                {
                  v52 = *(_QWORD *)v37;
                  v37 += 8;
                  *(_QWORD *)v51 = v52;
                  v51 += 8;
                  v50 -= 8;
                }
                while (v50);
              }
              *(_QWORD *)a1 = v47;
              *(_QWORD *)(a1 + 8) = v48;
              *(_QWORD *)(a1 + 16) = v35;
              *(_QWORD *)(a1 + 24) = &v47[8 * v46];
              if (v40)
              {
                operator delete(v40);
                v35 = *(char **)(a1 + 16);
              }
            }
            else
            {
              v41 = (uint64_t)&v37[-*(_QWORD *)a1] >> 3;
              if (v41 >= -1)
                v42 = v41 + 1;
              else
                v42 = v41 + 2;
              v43 = &v37[-8 * (v42 >> 1)];
              v44 = v35 - v37;
              if (v35 != v37)
              {
                memmove(&v37[-8 * (v42 >> 1)], v37, v35 - v37);
                v35 = *(char **)(a1 + 8);
              }
              v45 = &v35[-8 * (v42 >> 1)];
              v35 = &v43[v44];
              *(_QWORD *)(a1 + 8) = v45;
              *(_QWORD *)(a1 + 16) = &v43[v44];
            }
          }
          *(_QWORD *)v35 = v38;
          v35 = (char *)(*(_QWORD *)(a1 + 16) + 8);
          *(_QWORD *)(a1 + 16) = v35;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      if (v10 >> 2 <= v9 + (v4 >> 3))
        v12 = v9 + v11;
      else
        v12 = v10 >> 2;
      v78 = a1 + 24;
      if (v12)
      {
        if (v12 >> 61)
LABEL_102:
          sub_1C4764EE4();
        v13 = (char *)operator new(8 * v12);
      }
      else
      {
        v13 = 0;
      }
      v53 = v8 << 7;
      *(_QWORD *)&v76 = v13;
      *((_QWORD *)&v76 + 1) = &v13[8 * (v11 - v8)];
      *(_QWORD *)&v77 = *((_QWORD *)&v76 + 1);
      *((_QWORD *)&v77 + 1) = &v13[8 * v12];
      do
      {
        v75 = operator new(0x1000uLL);
        sub_1C61351F0((uint64_t)&v76, &v75);
        --v9;
      }
      while (v9);
      v54 = *(char **)(a1 + 8);
      if (v8)
      {
        v55 = (char *)v77;
        do
        {
          if (v55 == *((char **)&v77 + 1))
          {
            v56 = (char *)*((_QWORD *)&v76 + 1);
            v57 = (void *)v76;
            if (*((_QWORD *)&v76 + 1) <= (unint64_t)v76)
            {
              if (v55 == (char *)v76)
                v63 = 1;
              else
                v63 = (uint64_t)&v55[-v76] >> 2;
              if (v63 >> 61)
                goto LABEL_102;
              v64 = (char *)operator new(8 * v63);
              v65 = v55 - v56;
              v27 = v55 == v56;
              v55 = &v64[8 * (v63 >> 2)];
              if (!v27)
              {
                v55 = &v64[8 * (v63 >> 2) + (v65 & 0xFFFFFFFFFFFFFFF8)];
                v66 = 8 * (v65 >> 3);
                v67 = &v64[8 * (v63 >> 2)];
                do
                {
                  v68 = *(_QWORD *)v56;
                  v56 += 8;
                  *(_QWORD *)v67 = v68;
                  v67 += 8;
                  v66 -= 8;
                }
                while (v66);
              }
              *(_QWORD *)&v76 = v64;
              *((_QWORD *)&v76 + 1) = &v64[8 * (v63 >> 2)];
              *(_QWORD *)&v77 = v55;
              *((_QWORD *)&v77 + 1) = &v64[8 * v63];
              if (v57)
              {
                operator delete(v57);
                v55 = (char *)v77;
              }
            }
            else
            {
              v58 = (uint64_t)(*((_QWORD *)&v76 + 1) - v76) >> 3;
              if (v58 >= -1)
                v59 = v58 + 1;
              else
                v59 = v58 + 2;
              v60 = *((_QWORD *)&v76 + 1) - 8 * (v59 >> 1);
              v61 = &v55[-*((_QWORD *)&v76 + 1)];
              if (v55 != *((char **)&v76 + 1))
              {
                memmove((void *)(*((_QWORD *)&v76 + 1) - 8 * (v59 >> 1)), *((const void **)&v76 + 1), (size_t)&v55[-*((_QWORD *)&v76 + 1)]);
                v55 = (char *)*((_QWORD *)&v76 + 1);
              }
              v62 = &v55[-8 * (v59 >> 1)];
              v55 = &v61[v60];
              *((_QWORD *)&v76 + 1) = v62;
              *(_QWORD *)&v77 = &v61[v60];
            }
          }
          *(_QWORD *)v55 = *(_QWORD *)v54;
          v55 = (char *)(v77 + 8);
          *(_QWORD *)&v77 = v77 + 8;
          v54 = (char *)(*(_QWORD *)(a1 + 8) + 8);
          *(_QWORD *)(a1 + 8) = v54;
          --v8;
        }
        while (v8);
      }
      v69 = v54;
      if (*(char **)(a1 + 16) != v54)
      {
        v69 = *(char **)(a1 + 16);
        do
        {
          v69 -= 8;
          sub_1C6135314((void **)&v76, v69);
        }
        while (v69 != *(char **)(a1 + 8));
        v54 = *(char **)(a1 + 16);
      }
      v70 = *(char **)a1;
      v71 = v76;
      v72 = v77;
      *(_QWORD *)&v76 = *(_QWORD *)a1;
      *((_QWORD *)&v76 + 1) = v69;
      v73 = *(_QWORD *)(a1 + 24);
      v74 = *(_QWORD *)(a1 + 32);
      *(_OWORD *)a1 = v71;
      *(_OWORD *)(a1 + 16) = v72;
      *(_QWORD *)&v77 = v54;
      *((_QWORD *)&v77 + 1) = v73;
      *(_QWORD *)(a1 + 32) = v74 - v53;
      if (v54 != v69)
        *(_QWORD *)&v77 = &v54[(v69 - v54 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v70)
        operator delete(v70);
    }
  }
}

BOOL sub_1C4EA9B4C(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;

  v2 = *(unsigned __int8 *)(a1 + 24);
  v3 = *(unsigned __int8 *)(a2 + 24);
  if (*(_BYTE *)(a1 + 24))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return (v2 == 0) ^ (v3 != 0);
  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = *(unsigned __int8 *)(a2 + 16);
  if (!*(_BYTE *)(a1 + 16) || v3 == 0)
    return (v2 == 0) ^ (v3 != 0);
  return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
}

void sub_1C4EA9BB8(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  const void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  int v19;
  int v20;
  _BYTE v21[64];
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  _BYTE *v27;
  _BYTE *v28;
  int v29;
  int v30;
  int v31;
  _BYTE v32[64];
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  int v37;

  v27 = v32;
  v9 = *(const void **)a1;
  v8 = *(const void **)(a1 + 8);
  if (v8 == *(const void **)a1)
  {
    v28 = v32;
    v10 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v10)
      memmove(v32, v8, 8 * v10);
  }
  else
  {
    v28 = *(_BYTE **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    LODWORD(v10) = *(_DWORD *)(a1 + 20);
  }
  v29 = *(_DWORD *)(a1 + 16);
  v30 = v10;
  v31 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  v33 = *(_OWORD *)(a1 + 96);
  v11 = *(_QWORD *)(a1 + 120);
  v34 = *(_QWORD *)(a1 + 112);
  v35 = v11;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  v36 = *(_OWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v37 = *(_DWORD *)(a1 + 144);
  v16 = v21;
  v13 = *(const void **)a2;
  v12 = *(const void **)(a2 + 8);
  if (v12 == *(const void **)a2)
  {
    v17 = v21;
    v14 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v14)
      memmove(v21, v12, 8 * v14);
  }
  else
  {
    v17 = *(_BYTE **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v13;
    LODWORD(v14) = *(_DWORD *)(a2 + 20);
  }
  v18 = *(_DWORD *)(a2 + 16);
  v19 = v14;
  v20 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  v22 = *(_OWORD *)(a2 + 96);
  v15 = *(_QWORD *)(a2 + 120);
  v23 = *(_QWORD *)(a2 + 112);
  v24 = v15;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  v25 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v26 = *(_DWORD *)(a2 + 144);
  sub_1C4EA9D64((uint64_t)&v27, (uint64_t)&v16, a3, a4);
  sub_1C4EA7FDC((uint64_t)&v22);
  if (v17 != v16)
    free(v17);
  sub_1C4EA7FDC((uint64_t)&v33);
  if (v28 != v27)
    free(v28);
}

void sub_1C4EA9D64(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  const void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  int v19;
  int v20;
  _BYTE v21[64];
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  _BYTE *v27;
  _BYTE *v28;
  int v29;
  int v30;
  int v31;
  _BYTE v32[64];
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  int v37;

  v27 = v32;
  v9 = *(const void **)a1;
  v8 = *(const void **)(a1 + 8);
  if (v8 == *(const void **)a1)
  {
    v28 = v32;
    v10 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v10)
      memmove(v32, v8, 8 * v10);
  }
  else
  {
    v28 = *(_BYTE **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    LODWORD(v10) = *(_DWORD *)(a1 + 20);
  }
  v29 = *(_DWORD *)(a1 + 16);
  v30 = v10;
  v31 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  v33 = *(_OWORD *)(a1 + 96);
  v11 = *(_QWORD *)(a1 + 120);
  v34 = *(_QWORD *)(a1 + 112);
  v35 = v11;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  v36 = *(_OWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v37 = *(_DWORD *)(a1 + 144);
  v16 = v21;
  v13 = *(const void **)a2;
  v12 = *(const void **)(a2 + 8);
  if (v12 == *(const void **)a2)
  {
    v17 = v21;
    v14 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v14)
      memmove(v21, v12, 8 * v14);
  }
  else
  {
    v17 = *(_BYTE **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v13;
    LODWORD(v14) = *(_DWORD *)(a2 + 20);
  }
  v18 = *(_DWORD *)(a2 + 16);
  v19 = v14;
  v20 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  v22 = *(_OWORD *)(a2 + 96);
  v15 = *(_QWORD *)(a2 + 120);
  v23 = *(_QWORD *)(a2 + 112);
  v24 = v15;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  v25 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v26 = *(_DWORD *)(a2 + 144);
  sub_1C4EA9F10((uint64_t)&v27, (uint64_t)&v16, a3, a4);
  sub_1C4EA7FDC((uint64_t)&v22);
  if (v17 != v16)
    free(v17);
  sub_1C4EA7FDC((uint64_t)&v33);
  if (v28 != v27)
    free(v28);
}

void sub_1C4EA9F10(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE *v8;
  const void *v9;
  const void *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  const void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  const void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  void *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  int v36;
  int v37;
  int v38;
  _BYTE v39[64];
  _OWORD v40[3];
  int v41;
  _BYTE *v42;
  _BYTE *v43;
  int v44;
  int v45;
  int v46;
  _BYTE v47[64];
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  int v52;
  void *v53;
  void *v54;
  uint64_t v55;
  int v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  int v60;
  _BYTE *v61;
  _BYTE *v62;
  int v63;
  int v64;
  int v65;
  _BYTE v66[64];
  _OWORD v67[3];
  int v68;
  __n128 v69;
  int v70;
  int v71;
  int v72;
  _BYTE v73[64];
  _OWORD v74[3];
  int v75;
  __n128 v76;
  uint64_t v77;
  int v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  int v82;
  uint64_t v83;
  _BYTE *v84;
  void *v85;
  int v86;
  int v87;
  int v88;
  _BYTE v89[64];
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  int v94;
  _BYTE *v95;
  void *v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  _BYTE v100[64];
  _DWORD v101[14];
  void *v102;
  void *__src;
  uint64_t v104;
  int v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  int v109;
  void *v110;
  void *v111;
  uint64_t v112;
  int v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  int v117;

  v8 = v100;
  v95 = v100;
  v9 = *(const void **)(a1 + 8);
  if (v9 == *(const void **)a1)
  {
    v96 = v100;
    v10 = v9;
  }
  else
  {
    v33 = *(unsigned int *)(a1 + 16);
    v8 = malloc_type_malloc(8 * v33, 0x4065EBACuLL);
    if (!v8 && ((_DWORD)v33 || (v8 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v96 = v8;
    v10 = *(const void **)a1;
    v9 = *(const void **)(a1 + 8);
  }
  v12 = *(_DWORD *)(a1 + 16);
  v11 = *(_DWORD *)(a1 + 20);
  v97 = v12;
  if (v9 == v10)
    v13 = v11;
  else
    v13 = v12;
  if (v13)
  {
    memmove(v8, v9, 8 * v13);
    v11 = *(_DWORD *)(a1 + 20);
  }
  v14 = *(_DWORD *)(a1 + 24);
  v98 = v11;
  v99 = v14;
  sub_1C4EA93E4((uint64_t)v101, (_QWORD *)(a1 + 96));
  v101[12] = *(_DWORD *)(a1 + 144);
  v84 = v89;
  v16 = *(const void **)a2;
  v15 = *(const void **)(a2 + 8);
  if (v15 == *(const void **)a2)
  {
    v85 = v89;
    v17 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v17)
      memmove(v89, v15, 8 * v17);
  }
  else
  {
    v85 = *(void **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v16;
    LODWORD(v17) = *(_DWORD *)(a2 + 20);
  }
  v86 = *(_DWORD *)(a2 + 16);
  v87 = v17;
  v88 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  v90 = *(_OWORD *)(a2 + 96);
  v18 = *(_QWORD *)(a2 + 120);
  v91 = *(_QWORD *)(a2 + 112);
  v92 = v18;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  v93 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v94 = *(_DWORD *)(a2 + 144);
  sub_1C4EAA51C((uint64_t)&v95, (uint64_t)&v84, (uint64_t)&v102);
  sub_1C4EA7FDC((uint64_t)&v90);
  if (v85 != v84)
    free(v85);
  sub_1C4EA7FDC((uint64_t)v101);
  if (v96 != v95)
    free(v96);
  v69.n128_u64[0] = (unint64_t)v73;
  if (__src == v102)
  {
    v69.n128_u64[1] = (unint64_t)v73;
    v19 = HIDWORD(v104);
    if (HIDWORD(v104))
      memmove(v73, __src, 8 * HIDWORD(v104));
  }
  else
  {
    v69.n128_u64[1] = (unint64_t)__src;
    __src = v102;
    v19 = HIDWORD(v104);
  }
  v70 = v104;
  v71 = v19;
  v72 = v105;
  v104 = 8;
  v105 = 0;
  v74[0] = v106;
  v74[1] = v107;
  v106 = 0u;
  v107 = 0u;
  v74[2] = v108;
  v108 = 0uLL;
  v75 = v109;
  v61 = v66;
  if (v111 == v110)
  {
    v62 = v66;
    v20 = HIDWORD(v112);
    if (HIDWORD(v112))
      memmove(v66, v111, 8 * HIDWORD(v112));
  }
  else
  {
    v62 = v111;
    v111 = v110;
    v20 = HIDWORD(v112);
  }
  v63 = v112;
  v64 = v20;
  v65 = v113;
  v112 = 8;
  v113 = 0;
  v67[0] = v114;
  v67[1] = v115;
  v115 = 0u;
  v114 = 0u;
  v67[2] = v116;
  v116 = 0uLL;
  v68 = v117;
  sub_1C4EAA9A8(&v69, &v61, a3, &v76);
  sub_1C4EA7FDC((uint64_t)v67);
  if (v62 != v61)
    free(v62);
  sub_1C4EA7FDC((uint64_t)v74);
  if (v69.n128_u64[1] != v69.n128_u64[0])
    free((void *)v69.n128_u64[1]);
  v42 = v47;
  v22 = *(const void **)a1;
  v21 = *(const void **)(a1 + 8);
  if (v21 == *(const void **)a1)
  {
    v43 = v47;
    v23 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v23)
      memmove(v47, v21, 8 * v23);
  }
  else
  {
    v43 = *(_BYTE **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v22;
    LODWORD(v23) = *(_DWORD *)(a1 + 20);
  }
  v44 = *(_DWORD *)(a1 + 16);
  v45 = v23;
  v46 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  v48 = *(_OWORD *)(a1 + 96);
  v24 = *(_QWORD *)(a1 + 120);
  v49 = *(_QWORD *)(a1 + 112);
  v50 = v24;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  v51 = *(_OWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v52 = *(_DWORD *)(a1 + 144);
  v34 = v39;
  if (v76.n128_u64[1] == v76.n128_u64[0])
  {
    v35 = v39;
    v25 = HIDWORD(v77);
    if (HIDWORD(v77))
      memmove(v39, (const void *)v76.n128_u64[1], 8 * HIDWORD(v77));
  }
  else
  {
    v35 = (_BYTE *)v76.n128_u64[1];
    v76.n128_u64[1] = v76.n128_u64[0];
    v25 = HIDWORD(v77);
  }
  v36 = v77;
  v37 = v25;
  v38 = v78;
  v77 = 8;
  v78 = 0;
  v40[0] = v79;
  v40[1] = v80;
  v79 = 0u;
  v80 = 0u;
  v40[2] = v81;
  v81 = 0uLL;
  v41 = v82;
  sub_1C4EAAB7C((uint64_t)&v42, (uint64_t)&v34, (uint64_t)&v53);
  v26 = v83;
  v27 = (void *)(a4 + 32);
  *(_QWORD *)a4 = a4 + 32;
  v29 = v53;
  v28 = v54;
  if (v54 == v53)
  {
    *(_QWORD *)(a4 + 8) = v27;
    v30 = HIDWORD(v55);
    if (HIDWORD(v55))
      memmove(v27, v28, 8 * HIDWORD(v55));
  }
  else
  {
    *(_QWORD *)(a4 + 8) = v54;
    v54 = v29;
    v30 = HIDWORD(v55);
  }
  v31 = v56;
  *(_DWORD *)(a4 + 16) = v55;
  *(_DWORD *)(a4 + 20) = v30;
  *(_DWORD *)(a4 + 24) = v31;
  v55 = 8;
  v56 = 0;
  *(_OWORD *)(a4 + 96) = v57;
  v32 = *((_QWORD *)&v58 + 1);
  *(_QWORD *)(a4 + 112) = v58;
  *(_QWORD *)(a4 + 120) = v32;
  v57 = 0u;
  v58 = 0u;
  *(_OWORD *)(a4 + 128) = v59;
  v59 = 0uLL;
  *(_DWORD *)(a4 + 144) = v60;
  *(_QWORD *)(a4 + 152) = v26;
  sub_1C4EA7FDC((uint64_t)&v57);
  if (v54 != v53)
    free(v54);
  sub_1C4EA7FDC((uint64_t)v40);
  if (v35 != v34)
    free(v35);
  sub_1C4EA7FDC((uint64_t)&v48);
  if (v43 != v42)
    free(v43);
  sub_1C4EA7FDC((uint64_t)&v79);
  if (v76.n128_u64[1] != v76.n128_u64[0])
    free((void *)v76.n128_u64[1]);
  sub_1C4EA7FDC((uint64_t)&v114);
  if (v111 != v110)
    free(v111);
  sub_1C4EA7FDC((uint64_t)&v106);
  if (__src != v102)
    free(__src);
}

void sub_1C4EAA51C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  int v15;
  int v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unsigned int v23;
  int v24;
  int v25;
  _BYTE *v26;
  int v27;
  int v28;
  _BYTE v29[64];
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  _BYTE *v35;
  _BYTE *v36;
  int v37;
  int v38;
  int v39;
  _BYTE v40[64];
  _OWORD v41[3];
  int v42;
  _BYTE *v43;
  _BYTE *v44;
  int v45;
  int v46;
  int v47;
  _BYTE v48[64];
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  _BYTE *v54;
  _BYTE *v55;
  int v56;
  int v57;
  int v58;
  _BYTE v59[64];
  _OWORD v60[3];
  int v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  int v65;
  _BYTE v66[64];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  int v70;

  v6 = v48;
  v43 = v48;
  v8 = *(_BYTE **)a1;
  v7 = *(_BYTE **)(a1 + 8);
  if (v7 == *(_BYTE **)a1)
  {
    v44 = v48;
    v9 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v9)
      memmove(v48, v7, 8 * v9);
    v7 = v48;
  }
  else
  {
    v44 = *(_BYTE **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    LODWORD(v9) = *(_DWORD *)(a1 + 20);
  }
  v10 = *(unsigned int *)(a1 + 16);
  v45 = *(_DWORD *)(a1 + 16);
  v46 = v9;
  v47 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  v49 = *(_OWORD *)(a1 + 96);
  v11 = *(_QWORD *)(a1 + 120);
  v50 = *(_QWORD *)(a1 + 112);
  v51 = v11;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  v52 = *(_OWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v53 = *(_DWORD *)(a1 + 144);
  v12 = v66;
  v62 = v66;
  if (v7 == v48)
  {
    v63 = v66;
    v13 = v48;
  }
  else
  {
    v12 = malloc_type_malloc(8 * v10, 0x4065EBACuLL);
    if (!v12)
    {
      if ((_DWORD)v10)
        goto LABEL_55;
      v12 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v12)
        goto LABEL_55;
    }
    v63 = v12;
    v13 = v43;
    v6 = v44;
    LODWORD(v10) = v45;
    LODWORD(v9) = v46;
  }
  LODWORD(v64) = v10;
  if (v6 == v13)
    v14 = v9;
  else
    v14 = v10;
  if (v14)
  {
    memmove(v12, v6, 8 * v14);
    LODWORD(v9) = v46;
  }
  HIDWORD(v64) = v9;
  v65 = v47;
  sub_1C4EA93E4((uint64_t)&v67, &v49);
  v15 = v53;
  v70 = v53;
  v54 = v59;
  if (v63 == v62)
  {
    v55 = v59;
    v16 = HIDWORD(v64);
    if (HIDWORD(v64))
      memmove(v59, v63, 8 * HIDWORD(v64));
  }
  else
  {
    v55 = v63;
    v63 = v62;
    v16 = HIDWORD(v64);
  }
  v56 = v64;
  v57 = v16;
  v58 = v65;
  v64 = 8;
  v65 = 0;
  v60[0] = v67;
  v60[1] = v68;
  v67 = 0u;
  v68 = 0u;
  v60[2] = v69;
  v69 = 0uLL;
  v61 = v15;
  sub_1C4EA7FDC((uint64_t)&v67);
  if (v63 != v62)
    free(v63);
  v17 = v29;
  v18 = *(_BYTE **)(a2 + 8);
  if (v18 == *(_BYTE **)a2)
  {
    v26 = v29;
    v19 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v19)
      memmove(v29, v18, 8 * v19);
    v18 = v29;
  }
  else
  {
    v26 = *(_BYTE **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    LODWORD(v19) = *(_DWORD *)(a2 + 20);
  }
  v20 = *(unsigned int *)(a2 + 16);
  v27 = *(_DWORD *)(a2 + 16);
  v28 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  v30 = *(_OWORD *)(a2 + 96);
  v21 = *(_QWORD *)(a2 + 120);
  v31 = *(_QWORD *)(a2 + 112);
  v32 = v21;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  v33 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v34 = *(_DWORD *)(a2 + 144);
  v22 = v66;
  v62 = v66;
  if (v18 == v29)
  {
    v63 = v66;
    goto LABEL_23;
  }
  v22 = malloc_type_malloc(8 * v20, 0x4065EBACuLL);
  if (!v22 && ((_DWORD)v20 || (v22 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_55:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v63 = v22;
  v17 = v26;
  LODWORD(v20) = v27;
LABEL_23:
  LODWORD(v64) = v20;
  if (v17 == v29)
    v23 = v19;
  else
    v23 = v20;
  if (v23)
    memmove(v22, v17, 8 * v23);
  HIDWORD(v64) = v19;
  v65 = v28;
  sub_1C4EA93E4((uint64_t)&v67, &v30);
  v24 = v34;
  v70 = v34;
  v35 = v40;
  if (v63 == v62)
  {
    v36 = v40;
    v25 = HIDWORD(v64);
    if (HIDWORD(v64))
      memmove(v40, v63, 8 * HIDWORD(v64));
  }
  else
  {
    v36 = v63;
    v63 = v62;
    v25 = HIDWORD(v64);
  }
  v37 = v64;
  v38 = v25;
  v39 = v65;
  v64 = 8;
  v65 = 0;
  v41[0] = v67;
  v41[1] = v68;
  v67 = 0u;
  v68 = 0u;
  v41[2] = v69;
  v69 = 0uLL;
  v42 = v24;
  sub_1C4EA7FDC((uint64_t)&v67);
  if (v63 != v62)
    free(v63);
  sub_1C4EA8B08(a3, (uint64_t *)&v54, (uint64_t *)&v35);
  sub_1C4EA7FDC((uint64_t)v41);
  if (v36 != v35)
    free(v36);
  sub_1C4EA7FDC((uint64_t)&v30);
  if (v26 != v29)
    free(v26);
  sub_1C4EA7FDC((uint64_t)v60);
  if (v55 != v54)
    free(v55);
  sub_1C4EA7FDC((uint64_t)&v49);
  if (v44 != v43)
    free(v44);
}

__n128 sub_1C4EAA9A8@<Q0>(__n128 *this@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X3>, __n128 *a4@<X8>)
{
  __n128 *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 *v20;
  const void *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __n128 result;

  v8 = this + 8;
  while (1)
  {
    v9 = this[8].n128_u64[1];
    if (v9 == a2[17])
      break;
LABEL_15:
    *a3++ = *(_QWORD *)(*(_QWORD *)(this[6].n128_u64[1] + ((this[8].n128_u64[0] >> 4) & 0xFFFFFFFFFFFFFF8))
                      + 32 * (this[8].n128_u64[0] & 0x7F));
    sub_1C61A0C64((llvm::SmallPtrSetImplBase *)this);
  }
  v10 = this[8].n128_u64[0];
  v11 = this[6].n128_u64[1];
  v12 = (_QWORD *)(v11 + 8 * (v10 >> 7));
  if (this[7].n128_u64[0] == v11)
  {
    v13 = 0;
    v14 = 0;
  }
  else
  {
    v13 = *v12 + 32 * (this[8].n128_u64[0] & 0x7F);
    v14 = *(_QWORD *)(v11 + (((v10 + v9) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((v10 + v9) & 0x7F);
  }
  v15 = a2[13];
  v16 = (_QWORD *)(v15 + 8 * (a2[16] >> 7));
  if (a2[14] == v15)
    v17 = 0;
  else
    v17 = *v16 + 32 * (a2[16] & 0x7FLL);
  while (v13 != v14)
  {
    if (!sub_1C4EA9B4C(v13, v17))
      goto LABEL_15;
    v13 += 32;
    if (v13 - *v12 == 4096)
    {
      v18 = v12[1];
      ++v12;
      v13 = v18;
    }
    v17 += 32;
    if (v17 - *v16 == 4096)
    {
      v19 = v16[1];
      ++v16;
      v17 = v19;
    }
  }
  v20 = a4 + 2;
  a4->n128_u64[0] = (unint64_t)a4[2].n128_u64;
  v22 = this->n128_u64[0];
  v21 = (const void *)this->n128_u64[1];
  if (v21 == (const void *)this->n128_u64[0])
  {
    a4->n128_u64[1] = (unint64_t)v20;
    v23 = this[1].n128_u32[1];
    if ((_DWORD)v23)
      memmove(v20, v21, 8 * v23);
  }
  else
  {
    a4->n128_u64[1] = (unint64_t)v21;
    this->n128_u64[1] = v22;
    LODWORD(v23) = this[1].n128_u32[1];
  }
  a4[1].n128_u32[0] = this[1].n128_u32[0];
  a4[1].n128_u32[1] = v23;
  a4[1].n128_u32[2] = this[1].n128_u32[2];
  this[1].n128_u64[0] = 8;
  this[1].n128_u32[2] = 0;
  a4[6] = this[6];
  v24 = this[7].n128_u64[1];
  a4[7].n128_u64[0] = this[7].n128_u64[0];
  a4[7].n128_u64[1] = v24;
  this[6] = 0u;
  this[7] = 0u;
  result = this[8];
  a4[8] = result;
  v8->n128_u64[0] = 0;
  v8->n128_u64[1] = 0;
  a4[9].n128_u32[0] = this[9].n128_u32[0];
  a4[9].n128_u64[1] = (unint64_t)a3;
  return result;
}

void sub_1C4EAAB7C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  _BYTE v19[64];
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  _BYTE *v25;
  _BYTE *v26;
  int v27;
  int v28;
  int v29;
  _BYTE v30[64];
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  int v35;

  v25 = v30;
  v7 = *(const void **)a1;
  v6 = *(const void **)(a1 + 8);
  if (v6 == *(const void **)a1)
  {
    v26 = v30;
    v8 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v8)
      memmove(v30, v6, 8 * v8);
  }
  else
  {
    v26 = *(_BYTE **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 20);
  }
  v27 = *(_DWORD *)(a1 + 16);
  v28 = v8;
  v29 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  v31 = *(_OWORD *)(a1 + 96);
  v9 = *(_QWORD *)(a1 + 120);
  v32 = *(_QWORD *)(a1 + 112);
  v33 = v9;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  v34 = *(_OWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v35 = *(_DWORD *)(a1 + 144);
  v14 = v19;
  v11 = *(const void **)a2;
  v10 = *(const void **)(a2 + 8);
  if (v10 == *(const void **)a2)
  {
    v15 = v19;
    v12 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v12)
      memmove(v19, v10, 8 * v12);
  }
  else
  {
    v15 = *(_BYTE **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v11;
    LODWORD(v12) = *(_DWORD *)(a2 + 20);
  }
  v16 = *(_DWORD *)(a2 + 16);
  v17 = v12;
  v18 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  v20 = *(_OWORD *)(a2 + 96);
  v13 = *(_QWORD *)(a2 + 120);
  v21 = *(_QWORD *)(a2 + 112);
  v22 = v13;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  v23 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v24 = *(_DWORD *)(a2 + 144);
  sub_1C4EAAD18((uint64_t)&v25, (uint64_t)&v14, a3);
  sub_1C4EA7FDC((uint64_t)&v20);
  if (v15 != v14)
    free(v15);
  sub_1C4EA7FDC((uint64_t)&v31);
  if (v26 != v25)
    free(v26);
}

void sub_1C4EAAD18(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void *v21;
  int v22;
  uint64_t v23;
  int v24;
  _BYTE *v25;
  _BYTE v26[64];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _BYTE *v32;
  _BYTE *v33;
  int v34;
  int v35;
  int v36;
  _BYTE v37[64];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  int v42;

  v32 = v37;
  v7 = *(const void **)a1;
  v6 = *(const void **)(a1 + 8);
  if (v6 == *(const void **)a1)
  {
    v33 = v37;
    v8 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v8)
      memmove(v37, v6, 8 * v8);
  }
  else
  {
    v33 = *(_BYTE **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 20);
  }
  v34 = *(_DWORD *)(a1 + 16);
  v35 = v8;
  v36 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  v38 = *(_OWORD *)(a1 + 96);
  v9 = *(_QWORD *)(a1 + 120);
  v39 = *(_QWORD *)(a1 + 112);
  v40 = v9;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  v41 = *(_OWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v42 = *(_DWORD *)(a1 + 144);
  v10 = *(_BYTE **)(a2 + 8);
  if (v10 == *(_BYTE **)a2)
  {
    v25 = v26;
    v11 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v11)
      memmove(v26, v10, 8 * v11);
    v10 = v26;
  }
  else
  {
    v25 = *(_BYTE **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    LODWORD(v11) = *(_DWORD *)(a2 + 20);
  }
  v12 = *(_DWORD *)(a2 + 16);
  v13 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  v14 = *(_QWORD *)(a2 + 96);
  v15 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)&v27 = v14;
  *((_QWORD *)&v27 + 1) = v15;
  v16 = *(_QWORD *)(a2 + 112);
  v17 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)&v28 = v16;
  *((_QWORD *)&v28 + 1) = v17;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  v18 = *(_QWORD *)(a2 + 128);
  v19 = *(_QWORD *)(a2 + 136);
  v29 = v18;
  v30 = v19;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v20 = *(_DWORD *)(a2 + 144);
  v31 = v20;
  v21 = (void *)(a3 + 32);
  *(_QWORD *)a3 = a3 + 32;
  if (v10 == v26)
  {
    *(_QWORD *)(a3 + 8) = v21;
    if ((_DWORD)v11)
    {
      v23 = v14;
      v24 = v13;
      v22 = v12;
      memcpy(v21, v26, 8 * v11);
      v14 = v23;
      v12 = v22;
      v13 = v24;
    }
  }
  else
  {
    *(_QWORD *)(a3 + 8) = v10;
    v25 = v26;
  }
  *(_DWORD *)(a3 + 16) = v12;
  *(_DWORD *)(a3 + 20) = v11;
  *(_DWORD *)(a3 + 24) = v13;
  *(_QWORD *)(a3 + 96) = v14;
  *(_QWORD *)(a3 + 104) = v15;
  *(_QWORD *)(a3 + 112) = v16;
  *(_QWORD *)(a3 + 120) = v17;
  v27 = 0u;
  v28 = 0u;
  *(_QWORD *)(a3 + 128) = v18;
  *(_QWORD *)(a3 + 136) = v19;
  v29 = 0;
  v30 = 0;
  *(_DWORD *)(a3 + 144) = v20;
  sub_1C4EA7FDC((uint64_t)&v27);
  if (v25 != v26)
    free(v25);
  sub_1C4EA7FDC((uint64_t)&v38);
  if (v33 != v32)
    free(v33);
}

void sub_1C4EAAF34(_QWORD *a1)
{
  void **v2;
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;

  v2 = (void **)a1[1];
  v3 = a1[4];
  v4 = *(uint64_t *)((char *)v2 + ((v3 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v3 & 0x7F);
  v6 = *(unsigned __int8 *)(v4 + 24);
  v5 = (_BYTE *)(v4 + 24);
  if (v6)
    *v5 = 0;
  v7 = a1[5] - 1;
  v8 = v3 + 1;
  a1[4] = v8;
  a1[5] = v7;
  if (v8 >= 0x100)
  {
    operator delete(*v2);
    a1[1] += 8;
    a1[4] -= 128;
  }
}

uint64_t sub_1C4EAAFB0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  int v19;
  int v20;
  _BYTE v21[64];
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  __n128 v27;
  int v28;
  int v29;
  int v30;
  _BYTE v31[64];
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  __n128 v37;
  _QWORD v38[8];

  v27.n128_u64[0] = (unint64_t)v31;
  v7 = *(const void **)a1;
  v6 = *(const void **)(a1 + 8);
  if (v6 == *(const void **)a1)
  {
    v27.n128_u64[1] = (unint64_t)v31;
    v8 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v8)
      memmove(v31, v6, 8 * v8);
  }
  else
  {
    v27.n128_u64[1] = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 20);
  }
  v28 = *(_DWORD *)(a1 + 16);
  v29 = v8;
  v30 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  v32 = *(_OWORD *)(a1 + 96);
  v9 = *(_QWORD *)(a1 + 120);
  v33 = *(_QWORD *)(a1 + 112);
  v34 = v9;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  v35 = *(_OWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v36 = *(_DWORD *)(a1 + 144);
  v16 = v21;
  v11 = *(const void **)a2;
  v10 = *(const void **)(a2 + 8);
  if (v10 == *(const void **)a2)
  {
    v17 = v21;
    v12 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v12)
      memmove(v21, v10, 8 * v12);
  }
  else
  {
    v17 = *(_BYTE **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v11;
    LODWORD(v12) = *(_DWORD *)(a2 + 20);
  }
  v18 = *(_DWORD *)(a2 + 16);
  v19 = v12;
  v20 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  v22 = *(_OWORD *)(a2 + 96);
  v13 = *(_QWORD *)(a2 + 120);
  v23 = *(_QWORD *)(a2 + 112);
  v24 = v13;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  v25 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v26 = *(_DWORD *)(a2 + 144);
  sub_1C4EAB174(&v27, &v16, a3, &v37);
  sub_1C4EA7FDC((uint64_t)&v22);
  if (v17 != v16)
    free(v17);
  sub_1C4EA7FDC((uint64_t)&v32);
  if (v27.n128_u64[1] != v27.n128_u64[0])
    free((void *)v27.n128_u64[1]);
  v14 = v38[7];
  sub_1C4EA7FDC((uint64_t)v38);
  if (v37.n128_u64[1] != v37.n128_u64[0])
    free((void *)v37.n128_u64[1]);
  return v14;
}

__n128 sub_1C4EAB174@<Q0>(__n128 *this@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, __n128 *a4@<X8>)
{
  __n128 *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 *v20;
  const void *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __n128 result;

  v8 = this + 8;
  while (1)
  {
    v9 = this[8].n128_u64[1];
    if (v9 == a2[17])
      break;
LABEL_15:
    *a3++ = *(_QWORD *)(*(_QWORD *)(this[6].n128_u64[1] + ((this[8].n128_u64[0] >> 4) & 0xFFFFFFFFFFFFFF8))
                      + 32 * (this[8].n128_u64[0] & 0x7F));
    sub_1C61A0C64((llvm::SmallPtrSetImplBase *)this);
  }
  v10 = this[8].n128_u64[0];
  v11 = this[6].n128_u64[1];
  v12 = (_QWORD *)(v11 + 8 * (v10 >> 7));
  if (this[7].n128_u64[0] == v11)
  {
    v13 = 0;
    v14 = 0;
  }
  else
  {
    v13 = *v12 + 32 * (this[8].n128_u64[0] & 0x7F);
    v14 = *(_QWORD *)(v11 + (((v10 + v9) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((v10 + v9) & 0x7F);
  }
  v15 = a2[13];
  v16 = (_QWORD *)(v15 + 8 * (a2[16] >> 7));
  if (a2[14] == v15)
    v17 = 0;
  else
    v17 = *v16 + 32 * (a2[16] & 0x7FLL);
  while (v13 != v14)
  {
    if (!sub_1C4EA9B4C(v13, v17))
      goto LABEL_15;
    v13 += 32;
    if (v13 - *v12 == 4096)
    {
      v18 = v12[1];
      ++v12;
      v13 = v18;
    }
    v17 += 32;
    if (v17 - *v16 == 4096)
    {
      v19 = v16[1];
      ++v16;
      v17 = v19;
    }
  }
  v20 = a4 + 2;
  a4->n128_u64[0] = (unint64_t)a4[2].n128_u64;
  v22 = this->n128_u64[0];
  v21 = (const void *)this->n128_u64[1];
  if (v21 == (const void *)this->n128_u64[0])
  {
    a4->n128_u64[1] = (unint64_t)v20;
    v23 = this[1].n128_u32[1];
    if ((_DWORD)v23)
      memmove(v20, v21, 8 * v23);
  }
  else
  {
    a4->n128_u64[1] = (unint64_t)v21;
    this->n128_u64[1] = v22;
    LODWORD(v23) = this[1].n128_u32[1];
  }
  a4[1].n128_u32[0] = this[1].n128_u32[0];
  a4[1].n128_u32[1] = v23;
  a4[1].n128_u32[2] = this[1].n128_u32[2];
  this[1].n128_u64[0] = 8;
  this[1].n128_u32[2] = 0;
  a4[6] = this[6];
  v24 = this[7].n128_u64[1];
  a4[7].n128_u64[0] = this[7].n128_u64[0];
  a4[7].n128_u64[1] = v24;
  this[6] = 0u;
  this[7] = 0u;
  result = this[8];
  a4[8] = result;
  v8->n128_u64[0] = 0;
  v8->n128_u64[1] = 0;
  a4[9].n128_u32[0] = this[9].n128_u32[0];
  a4[9].n128_u64[1] = (unint64_t)a3;
  return result;
}

_QWORD *sub_1C4EAB348(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  if (result)
  {
    v1 = result;
    v2 = (_QWORD *)result[8];
    if (v2 != v1 + 10)
      free(v2);
    v3 = (_QWORD *)v1[3];
    if (v3 != v1 + 5)
      free(v3);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

unint64_t sub_1C4EAB3A8(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 80 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C61A0F1C(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C61A0F1C(a1, v5);
    }
  }
  return a2;
}

uint64_t sub_1C4EAB410(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(unsigned int *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        v11 = *(char **)a1;
        if ((_DWORD)v5)
        {
          v12 = 0;
          do
          {
            v13 = *(_QWORD *)&v4[v12];
            *(_QWORD *)&v4[v12] = 0;
            v14 = *(_QWORD **)&v11[v12];
            *(_QWORD *)&v11[v12] = v13;
            if (v14)
              sub_1C4EAB348(v14);
            v12 += 8;
          }
          while (8 * v5 != v12);
          v6 = *(unsigned int *)(a1 + 8);
          v15 = &v11[v12];
          v11 = *(char **)a1;
        }
        else
        {
          v15 = *(char **)a1;
        }
        v16 = &v11[8 * v6];
        while (v16 != v15)
        {
          v18 = (_QWORD *)*((_QWORD *)v16 - 1);
          v16 -= 8;
          v17 = v18;
          *(_QWORD *)v16 = 0;
          if (v18)
            sub_1C4EAB348(v17);
        }
        *(_DWORD *)(a1 + 8) = v5;
        v19 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v19)
        {
          v20 = 8 * v19;
          v21 = *(_QWORD *)a2 - 8;
          do
          {
            v22 = *(_QWORD **)(v21 + v20);
            *(_QWORD *)(v21 + v20) = 0;
            if (v22)
              sub_1C4EAB348(v22);
            v20 -= 8;
          }
          while (v20);
        }
        goto LABEL_45;
      }
      if (*(_DWORD *)(a1 + 12) < v5)
      {
        if ((_DWORD)v6)
        {
          v23 = 8 * v6;
          v24 = *(_QWORD *)a1 - 8;
          do
          {
            v25 = *(_QWORD **)(v24 + v23);
            *(_QWORD *)(v24 + v23) = 0;
            if (v25)
              sub_1C4EAB348(v25);
            v23 -= 8;
          }
          while (v23);
        }
        *(_DWORD *)(a1 + 8) = 0;
        sub_1C61A0DE8(a1, v5);
      }
      else if ((_DWORD)v6)
      {
        v7 = *(char **)a1;
        v8 = 8 * v6;
        do
        {
          v9 = *(_QWORD **)v4;
          *(_QWORD *)v4 = 0;
          v10 = *(_QWORD **)v7;
          *(_QWORD *)v7 = v9;
          if (v10)
            sub_1C4EAB348(v10);
          v4 += 8;
          v7 += 8;
          v8 -= 8;
        }
        while (v8);
        goto LABEL_36;
      }
      v6 = 0;
LABEL_36:
      v26 = *(char **)a2;
      v27 = *(unsigned int *)(a2 + 8);
      if (v6 != v27)
      {
        v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v6);
        v29 = &v26[8 * v6];
        v30 = 8 * v27 - 8 * v6;
        do
        {
          v31 = *(_QWORD *)v29;
          *(_QWORD *)v29 = 0;
          v29 += 8;
          *v28++ = v31;
          v30 -= 8;
        }
        while (v30);
        v26 = *(char **)a2;
      }
      *(_DWORD *)(a1 + 8) = v5;
      v32 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v32)
      {
        v33 = 8 * v32;
        v34 = v26 - 8;
        do
        {
          v35 = *(_QWORD **)&v34[v33];
          *(_QWORD *)&v34[v33] = 0;
          if (v35)
            sub_1C4EAB348(v35);
          v33 -= 8;
        }
        while (v33);
      }
LABEL_45:
      *(_DWORD *)(a2 + 8) = 0;
      return a1;
    }
    sub_1C61A102C((char **)a1, (char **)a2);
  }
  return a1;
}

uint64_t sub_1C4EAB60C()
{
  __int128 v1;
  int v2;
  int v3;
  int *v4;

  v4 = &v3;
  v2 = 1;
  v3 = 100;
  *(_QWORD *)&v1 = "Use this to specify the default trip count of a loop";
  *((_QWORD *)&v1 + 1) = 52;
  sub_1C4DB1928((uint64_t)&unk_1ED7F27F0, "default-trip-count", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F27F0, &dword_1C475E000);
  v2 = 1;
  v3 = 2;
  v4 = &v3;
  *(_QWORD *)&v1 = "Use this to specify the max. distance between array elements accessed in a loop so that the elements "
                   "are classified to have temporal reuse";
  *((_QWORD *)&v1 + 1) = 138;
  sub_1C4DB1928((uint64_t)&unk_1ED7F28B0, "temporal-reuse-threshold", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F28B0, &dword_1C475E000);
}

uint64_t llvm::LoopNest::getMaxPerfectDepth(llvm::LoopNest *this, const llvm::Loop *a2, llvm::ScalarEvolution *a3, llvm::ScalarEvolution *a4)
{
  const llvm::Loop **v4;
  uint64_t v6;
  const llvm::Loop *v7;

  v4 = (const llvm::Loop **)*((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) - (_QWORD)v4 != 8)
    return 1;
  v6 = 1;
  do
  {
    v7 = *v4;
    if (llvm::LoopNest::analyzeLoopNestForPerfectNest(this, *v4, a2, a4))
      break;
    v6 = (v6 + 1);
    v4 = (const llvm::Loop **)*((_QWORD *)v7 + 1);
    this = v7;
  }
  while (*((_QWORD *)v7 + 2) - (_QWORD)v4 == 8);
  return v6;
}

BOOL llvm::LoopNest::arePerfectlyNested(llvm::LoopNest *this, const llvm::Loop *a2, const llvm::Loop *a3, llvm::ScalarEvolution *a4)
{
  return llvm::LoopNest::analyzeLoopNestForPerfectNest(this, a2, a3, a4) == 0;
}

uint64_t llvm::LoopNest::analyzeLoopNestForPerfectNest(llvm::LoopNest *this, const llvm::Loop *a2, const llvm::Loop *a3, llvm::ScalarEvolution *a4)
{
  llvm::LoopNest *v7;
  llvm::LoopNest *v8;
  const llvm::BasicBlock *LoopLatch;
  uint64_t LoopPredecessor;
  uint64_t v11;
  uint64_t v12;
  const llvm::BasicBlock *v13;
  int v14;
  uint64_t v15;
  uint64_t ExitBlock;
  uint64_t v17;
  llvm::BasicBlock *v19;
  llvm::BasicBlock *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  _BOOL4 v25;
  uint64_t i;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::LoopNest *v33;
  llvm::LoopNest *LoopGuardBranch;
  unsigned int v35;
  uint64_t v37;
  llvm::LoopNest *v38;
  llvm::LoopNest **v39;
  llvm::LoopNest *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  llvm::BasicBlock *v44;
  llvm::BasicBlock *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  int j;
  int v55;
  uint64_t v56;
  _QWORD *v57;
  llvm::LoopNest **v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  llvm::LoopNest **v63;
  uint64_t SingleSuccessor;
  llvm::LoopNest *v65;
  int v66;
  _QWORD *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  llvm::BasicBlock *v78;
  _BOOL4 v79;
  llvm::LoopNest **v80;
  llvm::LoopNest **v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  char v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  char v89;

  if (*((_QWORD *)this + 2) - *((_QWORD *)this + 1) != 8 || *(_QWORD *)a2 != (_QWORD)this)
    return 2;
  v7 = this;
  if (!llvm::Loop::isLoopSimplifyForm(this) || !llvm::Loop::isLoopSimplifyForm(a2))
    return 2;
  v8 = (llvm::LoopNest *)**((_QWORD **)v7 + 4);
  LoopLatch = (const llvm::BasicBlock *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v7);
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)a2);
  if (!LoopPredecessor)
    goto LABEL_15;
  v11 = *(_QWORD *)(LoopPredecessor + 40);
  if (v11 == LoopPredecessor + 40)
    goto LABEL_15;
  if (v11)
    v12 = v11 - 24;
  else
    v12 = 0;
  if (*(_BYTE *)(v12 + 16) == 30)
  {
    if ((*(_DWORD *)(v12 + 20) & 0x7FFFFFF) == 3)
    {
LABEL_15:
      v13 = 0;
      goto LABEL_20;
    }
  }
  else
  {
    v13 = 0;
    switch(*(_BYTE *)(v12 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
        goto LABEL_20;
      case 0x1E:
LABEL_173:
        __break(1u);
LABEL_174:
        v66 = (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) - 1;
LABEL_128:
        if (v66 == 1)
          goto LABEL_129;
        goto LABEL_75;
      case 0x1F:
        v14 = (*(_DWORD *)(v12 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
        v14 = (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x27:
        v14 = *(_DWORD *)(v12 + 80) + 1;
        break;
      default:
        goto LABEL_15;
    }
    if (v14 != 1)
      goto LABEL_15;
  }
  v13 = (const llvm::BasicBlock *)LoopPredecessor;
LABEL_20:
  v15 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)a2);
  ExitBlock = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlock(a2);
  if ((const llvm::BasicBlock *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock(v7) != LoopLatch)
    return 2;
  v17 = 2;
  if (llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock(a2) == v15 && ExitBlock)
  {
    if (v8 == v13)
      goto LABEL_57;
    v19 = llvm::LoopNest::skipEmptyBlockUntil(v8, v13, 0);
    if (v19 == v13)
      goto LABEL_57;
    v20 = (llvm::BasicBlock *)*((_QWORD *)v19 + 5);
    if (v20 == (llvm::BasicBlock *)((char *)v19 + 40))
      return v17;
    v21 = v20 ? (uint64_t)v20 - 24 : 0;
    v22 = *(unsigned __int8 *)(v21 + 16) - 40;
    v23 = v22 >= 0xFFFFFFF5 ? v21 : 0;
    if (!v20)
      return v17;
    v24 = *(_BYTE *)(v23 + 16) == 30 && v22 >= 0xFFFFFFF5;
    if (!v24 || (llvm::LoopNest *)v23 != llvm::Loop::getLoopGuardBranch(a2))
      return v17;
    if (*(_QWORD *)(ExitBlock + 40) == ExitBlock + 40)
    {
      v25 = 0;
    }
    else
    {
      v25 = 0;
      for (i = *(_QWORD *)(ExitBlock + 48); ; i = *(_QWORD *)(i + 8))
      {
        v27 = i ? i - 24 : 0;
        if (!i)
          break;
        if (*(_BYTE *)(v27 + 16) != 83)
          break;
        v28 = *(_DWORD *)(i - 4) & 0x7FFFFFF;
        v25 = v28 == 1;
        if (v28 == 1)
          break;
      }
    }
    v29 = *(_DWORD *)(v23 + 20);
    if ((v29 & 0x40000000) != 0)
    {
      v31 = *(_QWORD *)(v23 - 8);
      v30 = v29 & 0x7FFFFFF;
    }
    else
    {
      v30 = v29 & 0x7FFFFFF;
      v31 = v23 - 32 * v30;
    }
    v32 = (_DWORD)v30 == 3;
    if (v30 == v32)
      goto LABEL_57;
    v79 = v25;
    v78 = 0;
    v81 = (llvm::LoopNest **)(v31 + 32 * v30);
    v39 = (llvm::LoopNest **)(v31 + 32 * v32);
    do
    {
      v40 = *v39;
      v41 = (_QWORD *)((char *)*v39 + 40);
      v42 = 2;
      v43 = v41;
      do
      {
        v43 = (_QWORD *)v43[1];
        --v42;
      }
      while (v43 != v41);
      v44 = *v39;
      v45 = *v39;
      if (!v42)
      {
        v80 = v39;
        v44 = llvm::LoopNest::skipEmptyBlockUntil(*v39, v13, 0);
        v45 = llvm::LoopNest::skipEmptyBlockUntil(v40, LoopLatch, 0);
        v39 = v80;
      }
      if (v44 != v13 && v45 != LoopLatch)
      {
        if (!v79)
          return 2;
        v46 = (_QWORD *)*((_QWORD *)v40 + 6);
        v47 = v46;
        if (v46 == v41)
        {
LABEL_90:
          v48 = 0;
        }
        else
        {
          while (1)
          {
            v48 = v47 - 3;
            v49 = v47 ? (uint64_t)(v47 - 3) : 0;
            if (*(_BYTE *)(v49 + 16) != 83)
              break;
            v47 = (_QWORD *)v47[1];
            if (v47 == v41)
              goto LABEL_90;
          }
        }
        v50 = (_QWORD *)*v41;
        if ((_QWORD *)*v41 == v41)
        {
          if (v48)
            return 2;
        }
        else
        {
          if (v50)
            v51 = v50 - 3;
          else
            v51 = 0;
          if (*((unsigned __int8 *)v51 + 16) - 29 >= 0xB)
            v51 = 0;
          if (v48 != v51)
            return 2;
          v52 = v46 - 3;
          if (v46)
            v53 = v46 - 3;
          else
            v53 = 0;
          if (v46)
          {
            for (j = *((unsigned __int8 *)v53 + 16); j == 83; j = *(unsigned __int8 *)(v62 + 16))
            {
              v55 = *((_DWORD *)v52 + 5);
              if ((v55 & 0x40000000) != 0)
              {
                v57 = (_QWORD *)*(v52 - 1);
                v56 = v55 & 0x7FFFFFF;
              }
              else
              {
                v56 = v55 & 0x7FFFFFF;
                v57 = &v52[-4 * v56];
              }
              if (v56)
              {
                v58 = (llvm::LoopNest **)&v57[4 * *((unsigned int *)v52 + 15)];
                v59 = 8 * v56;
                while ((llvm::LoopNest *)ExitBlock == *v58 || v8 == *v58)
                {
                  ++v58;
                  v59 -= 8;
                  if (!v59)
                    goto LABEL_115;
                }
                return 2;
              }
LABEL_115:
              v61 = v52[4];
              v52 = (_QWORD *)(v61 - 24);
              if (v61)
                v62 = v61 - 24;
              else
                v62 = 0;
              if (!v61)
                break;
            }
          }
        }
        v63 = v39;
        SingleSuccessor = llvm::BasicBlock::getSingleSuccessor(v40);
        v39 = v63;
        v78 = v40;
        if ((const llvm::BasicBlock *)SingleSuccessor != LoopLatch)
          return 2;
      }
      v39 += 4;
    }
    while (v39 != v81);
    if (!v78
      || (v65 = (llvm::LoopNest *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlock(a2),
          llvm::LoopNest::skipEmptyBlockUntil(v65, v78, 0) != v78))
    {
LABEL_57:
      v33 = (llvm::LoopNest *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlock(a2);
      if (llvm::LoopNest::skipEmptyBlockUntil(v33, LoopLatch, 0) != LoopLatch)
        return 2;
    }
    llvm::Loop::getBounds(v7, a3, &v82);
    if (!v85)
      return 3;
    a3 = (const llvm::Loop *)sub_1C4EABEFC((uint64_t)v7);
    LoopGuardBranch = llvm::Loop::getLoopGuardBranch(a2);
    if (LoopGuardBranch)
    {
      v35 = *(unsigned __int8 *)(*((_QWORD *)LoopGuardBranch - 12) + 16);
      if (v35 - 81 < 2 && v35 > 0x1B)
        LoopLatch = (const llvm::BasicBlock *)*((_QWORD *)LoopGuardBranch - 12);
      else
        LoopLatch = 0;
    }
    else
    {
      LoopLatch = 0;
    }
    v8 = (llvm::LoopNest *)**((_QWORD **)v7 + 4);
    v7 = (llvm::LoopNest *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v7);
    LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)a2);
    if (!LoopPredecessor)
      goto LABEL_75;
    v37 = *(_QWORD *)(LoopPredecessor + 40);
    if (v37 == LoopPredecessor + 40)
      goto LABEL_75;
    if (v37)
      v12 = v37 - 24;
    else
      v12 = 0;
    if (*(_BYTE *)(v12 + 16) != 30)
    {
      v38 = 0;
      switch(*(_BYTE *)(v12 + 16))
      {
        case 0x1D:
        case 0x21:
        case 0x22:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
          goto LABEL_130;
        case 0x1E:
          goto LABEL_173;
        case 0x1F:
          v66 = (*(_DWORD *)(v12 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_128;
        case 0x20:
          goto LABEL_174;
        case 0x27:
          v66 = *(_DWORD *)(v12 + 80) + 1;
          goto LABEL_128;
        default:
          goto LABEL_75;
      }
      goto LABEL_130;
    }
    if ((*(_DWORD *)(v12 + 20) & 0x7FFFFFF) == 3)
LABEL_75:
      v38 = 0;
    else
LABEL_129:
      v38 = (llvm::LoopNest *)LoopPredecessor;
LABEL_130:
    v67 = (_QWORD *)*((_QWORD *)v8 + 6);
    if (v67 != (_QWORD *)((char *)v8 + 40))
    {
      v17 = 1;
      do
      {
        if (v67)
          v68 = (uint64_t)(v67 - 3);
        else
          v68 = 0;
        LOBYTE(v86) = 0;
        v89 = 0;
        if (v85)
        {
          v86 = v82;
          v87 = v83;
          v88 = v84;
          v89 = 1;
          if (!sub_1C4EACEC0(v68, (uint64_t)LoopLatch, (uint64_t)a3, (uint64_t)&v86))
            return v17;
        }
        else if (!sub_1C4EACEC0(v68, (uint64_t)LoopLatch, (uint64_t)a3, (uint64_t)&v86))
        {
          return 1;
        }
        v67 = (_QWORD *)v67[1];
      }
      while (v67 != (_QWORD *)((char *)v8 + 40));
    }
    v69 = (char *)v7 + 40;
    v70 = *((_QWORD *)v7 + 6);
    if ((char *)v70 != v69)
    {
      v17 = 1;
      do
      {
        if (v70)
          v71 = v70 - 24;
        else
          v71 = 0;
        LOBYTE(v86) = 0;
        v89 = 0;
        if (v85)
        {
          v86 = v82;
          v87 = v83;
          v88 = v84;
          v89 = 1;
          if (!sub_1C4EACEC0(v71, (uint64_t)LoopLatch, (uint64_t)a3, (uint64_t)&v86))
            return v17;
        }
        else if (!sub_1C4EACEC0(v71, (uint64_t)LoopLatch, (uint64_t)a3, (uint64_t)&v86))
        {
          return 1;
        }
        v70 = *(_QWORD *)(v70 + 8);
      }
      while ((char *)v70 != v69);
    }
    if (v38 != v8)
    {
      v72 = (_QWORD *)*((_QWORD *)v38 + 6);
      if (v72 != (_QWORD *)((char *)v38 + 40))
      {
        v17 = 1;
        do
        {
          if (v72)
            v73 = (uint64_t)(v72 - 3);
          else
            v73 = 0;
          LOBYTE(v86) = 0;
          v89 = 0;
          if (v85)
          {
            v86 = v82;
            v87 = v83;
            v88 = v84;
            v89 = 1;
            if (!sub_1C4EACEC0(v73, (uint64_t)LoopLatch, (uint64_t)a3, (uint64_t)&v86))
              return v17;
          }
          else if (!sub_1C4EACEC0(v73, (uint64_t)LoopLatch, (uint64_t)a3, (uint64_t)&v86))
          {
            return 1;
          }
          v72 = (_QWORD *)v72[1];
        }
        while (v72 != (_QWORD *)((char *)v38 + 40));
      }
    }
    v74 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlock(a2);
    v75 = v74 + 40;
    v76 = *(_QWORD *)(v74 + 48);
    if (v76 != v74 + 40)
    {
      v17 = 1;
      do
      {
        if (v76)
          v77 = v76 - 24;
        else
          v77 = 0;
        LOBYTE(v86) = 0;
        v89 = 0;
        if (v85)
        {
          v86 = v82;
          v87 = v83;
          v88 = v84;
          v89 = 1;
          if (!sub_1C4EACEC0(v77, (uint64_t)LoopLatch, (uint64_t)a3, (uint64_t)&v86))
            return v17;
        }
        else if (!sub_1C4EACEC0(v77, (uint64_t)LoopLatch, (uint64_t)a3, (uint64_t)&v86))
        {
          return 1;
        }
        v76 = *(_QWORD *)(v76 + 8);
      }
      while (v76 != v75);
    }
    return 0;
  }
  return v17;
}

uint64_t sub_1C4EABEFC(uint64_t a1)
{
  uint64_t LoopLatch;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  BOOL v7;

  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(a1);
  v2 = *(_QWORD *)(LoopLatch + 40);
  if (v2 == LoopLatch + 40)
  {
    v3 = 0;
  }
  else
  {
    if (v2)
      v3 = v2 - 24;
    else
      v3 = 0;
    if (*(unsigned __int8 *)(v3 + 16) - 29 >= 0xB)
      v3 = 0;
  }
  if (*(_BYTE *)(v3 + 16) != 30)
    v3 = 0;
  v4 = *(_QWORD *)(v3 - 96);
  v5 = *(unsigned __int8 *)(v4 + 16);
  if (v5 - 81 < 2)
  {
    v6 = v5 >= 0x1B;
    v7 = v5 == 27;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  if (!v7 && v6)
    return v4;
  else
    return 0;
}

uint64_t llvm::LoopNest::getInterveningInstructions@<X0>(llvm::LoopNest *this@<X0>, const llvm::Loop *a2@<X1>, const llvm::Loop *a3@<X2>, llvm::ScalarEvolution *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v12;
  llvm::LoopNest *LoopGuardBranch;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t LoopLatch;
  uint64_t LoopPredecessor;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char v49;

  v9 = a5 + 16;
  *(_QWORD *)a5 = a5 + 16;
  *(_QWORD *)(a5 + 8) = 0x600000000;
  result = llvm::LoopNest::analyzeLoopNestForPerfectNest(this, a2, a3, a4);
  if (result > 3 || (_DWORD)result == 1)
  {
    llvm::Loop::getBounds(this, a3, &v42);
    v12 = sub_1C4EABEFC((uint64_t)this);
    LoopGuardBranch = llvm::Loop::getLoopGuardBranch(a2);
    if (LoopGuardBranch)
    {
      v14 = *(unsigned __int8 *)(*((_QWORD *)LoopGuardBranch - 12) + 16);
      if (v14 - 81 < 2 && v14 > 0x1B)
        v16 = *((_QWORD *)LoopGuardBranch - 12);
      else
        v16 = 0;
    }
    else
    {
      v16 = 0;
    }
    v17 = **((_QWORD **)this + 4);
    LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)this);
    LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)a2);
    if (!LoopPredecessor)
      goto LABEL_21;
    v20 = *(_QWORD *)(LoopPredecessor + 40);
    if (v20 == LoopPredecessor + 40)
      goto LABEL_21;
    if (v20)
      v21 = v20 - 24;
    else
      v21 = 0;
    if (*(_BYTE *)(v21 + 16) == 30)
    {
      if ((*(_DWORD *)(v21 + 20) & 0x7FFFFFF) == 3)
      {
LABEL_21:
        v22 = 0;
LABEL_26:
        v40 = v22;
        result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlock(a2);
        v24 = result;
        v25 = v17 + 40;
        v41 = v17;
        v26 = *(_QWORD *)(v17 + 48);
        if (v26 != v17 + 40)
        {
          do
          {
            if (v26)
              v27 = v26 - 24;
            else
              v27 = 0;
            LOBYTE(v46) = 0;
            v49 = 0;
            if (v45)
            {
              v46 = v42;
              v47 = v43;
              v48 = v44;
              v49 = 1;
              result = sub_1C4EACEC0(v27, v16, v12, (uint64_t)&v46);
              v49 = 0;
              if ((result & 1) == 0)
                goto LABEL_34;
            }
            else
            {
              result = sub_1C4EACEC0(v27, v16, v12, (uint64_t)&v46);
              if ((result & 1) == 0)
              {
LABEL_34:
                v28 = *(unsigned int *)(a5 + 8);
                if (v28 >= *(unsigned int *)(a5 + 12))
                {
                  result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a5, v9, v28 + 1, 8);
                  v28 = *(unsigned int *)(a5 + 8);
                }
                *(_QWORD *)(*(_QWORD *)a5 + 8 * v28) = v27;
                ++*(_DWORD *)(a5 + 8);
              }
            }
            v26 = *(_QWORD *)(v26 + 8);
          }
          while (v26 != v25);
        }
        v29 = LoopLatch + 40;
        v30 = *(_QWORD *)(LoopLatch + 48);
        if (v30 != LoopLatch + 40)
        {
          do
          {
            if (v30)
              v31 = v30 - 24;
            else
              v31 = 0;
            LOBYTE(v46) = 0;
            v49 = 0;
            if (v45)
            {
              v46 = v42;
              v47 = v43;
              v48 = v44;
              v49 = 1;
              result = sub_1C4EACEC0(v31, v16, v12, (uint64_t)&v46);
              v49 = 0;
              if ((result & 1) == 0)
                goto LABEL_46;
            }
            else
            {
              result = sub_1C4EACEC0(v31, v16, v12, (uint64_t)&v46);
              if ((result & 1) == 0)
              {
LABEL_46:
                v32 = *(unsigned int *)(a5 + 8);
                if (v32 >= *(unsigned int *)(a5 + 12))
                {
                  result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a5, v9, v32 + 1, 8);
                  v32 = *(unsigned int *)(a5 + 8);
                }
                *(_QWORD *)(*(_QWORD *)a5 + 8 * v32) = v31;
                ++*(_DWORD *)(a5 + 8);
              }
            }
            v30 = *(_QWORD *)(v30 + 8);
          }
          while (v30 != v29);
        }
        v33 = v24 + 40;
        for (i = *(_QWORD *)(v24 + 48); i != v33; i = *(_QWORD *)(i + 8))
        {
          if (i)
            v35 = i - 24;
          else
            v35 = 0;
          LOBYTE(v46) = 0;
          v49 = 0;
          if (v45)
          {
            v46 = v42;
            v47 = v43;
            v48 = v44;
            v49 = 1;
            result = sub_1C4EACEC0(v35, v16, v12, (uint64_t)&v46);
            v49 = 0;
            if ((result & 1) == 0)
              goto LABEL_58;
          }
          else
          {
            result = sub_1C4EACEC0(v35, v16, v12, (uint64_t)&v46);
            if ((result & 1) == 0)
            {
LABEL_58:
              v36 = *(unsigned int *)(a5 + 8);
              if (v36 >= *(unsigned int *)(a5 + 12))
              {
                result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a5, v9, v36 + 1, 8);
                v36 = *(unsigned int *)(a5 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a5 + 8 * v36) = v35;
              ++*(_DWORD *)(a5 + 8);
            }
          }
        }
        if (v40 == v41)
          return result;
        v37 = *(_QWORD *)(v40 + 48);
        if (v37 == v40 + 40)
          return result;
        while (1)
        {
          if (v37)
            v38 = v37 - 24;
          else
            v38 = 0;
          LOBYTE(v46) = 0;
          v49 = 0;
          if (v45)
          {
            v46 = v42;
            v47 = v43;
            v48 = v44;
            v49 = 1;
            result = sub_1C4EACEC0(v38, v16, v12, (uint64_t)&v46);
            v49 = 0;
            if ((result & 1) == 0)
              goto LABEL_71;
          }
          else
          {
            result = sub_1C4EACEC0(v38, v16, v12, (uint64_t)&v46);
            if ((result & 1) == 0)
            {
LABEL_71:
              v39 = *(unsigned int *)(a5 + 8);
              if (v39 >= *(unsigned int *)(a5 + 12))
              {
                result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a5, v9, v39 + 1, 8);
                v39 = *(unsigned int *)(a5 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a5 + 8 * v39) = v38;
              ++*(_DWORD *)(a5 + 8);
            }
          }
          v37 = *(_QWORD *)(v37 + 8);
          if (v37 == v40 + 40)
            return result;
        }
      }
    }
    else
    {
      v22 = 0;
      switch(*(_BYTE *)(v21 + 16))
      {
        case 0x1D:
        case 0x21:
        case 0x22:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
          goto LABEL_26;
        case 0x1E:
          __break(1u);
          goto LABEL_77;
        case 0x1F:
          v23 = (*(_DWORD *)(v21 + 20) >> 1) & 0x3FFFFFF;
          break;
        case 0x20:
LABEL_77:
          v23 = (*(_DWORD *)(v21 + 20) & 0x7FFFFFF) - 1;
          break;
        case 0x27:
          v23 = *(_DWORD *)(v21 + 80) + 1;
          break;
        default:
          goto LABEL_21;
      }
      if (v23 != 1)
        goto LABEL_21;
    }
    v22 = LoopPredecessor;
    goto LABEL_26;
  }
  return result;
}

void llvm::LoopNest::getPerfectLoops(llvm::LoopNest *this@<X0>, llvm::ScalarEvolution *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v5;
  const void *v6;
  void *v7;
  unsigned int v8;
  unsigned int v9;
  _BYTE *v10;
  const void *v11;
  void *v12;
  unsigned int v13;
  llvm::ScalarEvolution *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  BOOL v19;
  llvm::LoopNest *v20;
  uint64_t v21;
  const llvm::Loop **v22;
  uint64_t v23;
  unint64_t v24;
  void **v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  char *v32;
  unsigned int v33;
  unsigned int v34;
  _BYTE *v35;
  _BYTE v36[64];
  char *v37;
  char *v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  _BYTE v45[64];
  void *__p;
  char *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  void *v54;
  _BYTE *v55;
  void *v56;
  void *v57;
  unsigned int v58;
  unsigned int v59;
  void *v60;
  _BYTE *v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD v64[9];

  v64[8] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x400000000;
  v62 = v64;
  v63 = 0x800000000;
  v40 = (_BYTE *)**((_QWORD **)this + 1);
  sub_1C4EA1748((uint64_t *)&v40, (uint64_t)&v49);
  v5 = v45;
  v40 = v45;
  v6 = v50;
  if (v50 == v49)
  {
    v41 = v45;
    v7 = v50;
  }
  else
  {
    v33 = v51;
    v5 = malloc_type_malloc(8 * v51, 0x4065EBACuLL);
    if (!v5)
    {
      if (v33)
        goto LABEL_78;
      v5 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v5)
        goto LABEL_78;
    }
    v41 = v5;
    v7 = v49;
    v6 = v50;
  }
  v8 = v52;
  v42 = v51;
  if (v6 == v7)
    v9 = v52;
  else
    v9 = v51;
  if (v9)
  {
    memmove(v5, v6, 8 * v9);
    v8 = v52;
  }
  v43 = v8;
  v44 = v53;
  v47 = 0;
  v48 = 0;
  __p = 0;
  sub_1C4D6CDA0(&__p, v54, v55, 0xAAAAAAAAAAAAAAABLL * ((v55 - (_BYTE *)v54) >> 3));
  v10 = v36;
  v11 = v57;
  if (v57 != v56)
  {
    v34 = v58;
    v10 = malloc_type_malloc(8 * v58, 0x4065EBACuLL);
    if (v10 || !v34 && (v10 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v35 = v10;
      v12 = v56;
      v11 = v57;
      goto LABEL_10;
    }
LABEL_78:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v35 = v36;
  v12 = v57;
LABEL_10:
  if (v11 == v12)
    v13 = v59;
  else
    v13 = v58;
  if (v13)
    memmove(v10, v11, 8 * v13);
  v38 = 0;
  v39 = 0;
  v37 = 0;
  sub_1C4D6CDA0(&v37, v60, v61, 0xAAAAAAAAAAAAAAABLL * ((v61 - (_BYTE *)v60) >> 3));
  while (1)
  {
    if (v47 - (_BYTE *)__p != v38 - v37)
      goto LABEL_30;
    if (__p == v47)
      break;
    v15 = v37 + 8;
    v16 = (char *)__p + 8;
    while (1)
    {
      v17 = v16 - 8;
      if (*((_QWORD *)v16 - 1) != *((_QWORD *)v15 - 1))
        break;
      v18 = v15[8];
      if (v16[8])
        v19 = v18 == 0;
      else
        v19 = 1;
      if (v19)
      {
        if ((v16[8] == 0) == (v18 != 0))
          break;
      }
      else if (*(_QWORD *)v16 != *(_QWORD *)v15)
      {
        break;
      }
      v15 += 24;
      v16 += 24;
      if (v17 + 24 == v47)
        goto LABEL_50;
    }
LABEL_30:
    v20 = (llvm::LoopNest *)*((_QWORD *)v47 - 3);
    if (!(_DWORD)v63)
    {
      if (HIDWORD(v63))
      {
        v21 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, 1uLL, 8);
        v21 = v63;
      }
      v62[v21] = v20;
      LODWORD(v63) = v63 + 1;
    }
    v22 = (const llvm::Loop **)*((_QWORD *)v20 + 1);
    if (*((_QWORD *)v20 + 2) - (_QWORD)v22 != 8
      || llvm::LoopNest::analyzeLoopNestForPerfectNest(v20, *v22, a2, v14))
    {
      v23 = *(unsigned int *)(a3 + 8);
      v24 = *(_QWORD *)a3;
      if (v23 < *(_DWORD *)(a3 + 12))
        goto LABEL_37;
      v30 = v23 + 1;
      v31 = v24 + 80 * v23 > (unint64_t)&v62;
      if (v24 <= (unint64_t)&v62 && v31)
      {
        v32 = (char *)&v62 - v24;
        sub_1C4EACF48(a3, v30);
        v24 = *(_QWORD *)a3;
        v25 = (void **)&v32[*(_QWORD *)a3];
      }
      else
      {
        sub_1C4EACF48(a3, v30);
        v24 = *(_QWORD *)a3;
LABEL_37:
        v25 = (void **)&v62;
      }
      v26 = (_QWORD *)(v24 + 80 * *(unsigned int *)(a3 + 8));
      *v26 = v26 + 2;
      v26[1] = 0x800000000;
      if (*((_DWORD *)v25 + 2))
        llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)v26, (uint64_t)v25);
      v27 = 0;
      ++*(_DWORD *)(a3 + 8);
      goto LABEL_41;
    }
    v28 = **((_QWORD **)v20 + 1);
    v29 = v63;
    if (v63 >= (unint64_t)HIDWORD(v63))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v63 + 1, 8);
      v29 = v63;
    }
    v62[v29] = v28;
    v27 = v63 + 1;
LABEL_41:
    LODWORD(v63) = v27;
    sub_1C4EA42DC((llvm::SmallPtrSetImplBase *)&v40);
  }
LABEL_50:
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  if (v35 != v36)
    free(v35);
  if (__p)
  {
    v47 = (char *)__p;
    operator delete(__p);
  }
  if (v41 != v40)
    free(v41);
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if (v57 != v56)
    free(v57);
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
  if (v50 != v49)
    free(v50);
  if (v62 != v64)
    free(v62);
}

llvm::BasicBlock *llvm::LoopNest::skipEmptyBlockUntil(llvm::LoopNest *this, const llvm::BasicBlock *a2, const llvm::BasicBlock *a3)
{
  llvm::BasicBlock *v3;
  int v4;
  const llvm::BasicBlock *UniqueSuccessor;
  _BOOL4 v7;
  llvm::BasicBlock *v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t *v12;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  _BYTE v18[32];

  v3 = this;
  if (this != a2)
  {
    v4 = (int)a3;
    if (llvm::BasicBlock::getUniqueSuccessor(this))
    {
      v14 = v18;
      v15 = v18;
      v16 = 4;
      v17 = 0;
      UniqueSuccessor = (const llvm::BasicBlock *)llvm::BasicBlock::getUniqueSuccessor(v3);
      v7 = UniqueSuccessor == a2;
      if (!UniqueSuccessor || UniqueSuccessor == a2)
      {
        v8 = v3;
LABEL_18:
        if (v7)
          v3 = a2;
        else
          v3 = v8;
      }
      else
      {
        while (1)
        {
          v8 = UniqueSuccessor;
          v9 = 2;
          v10 = (_QWORD *)((char *)UniqueSuccessor + 40);
          do
          {
            v10 = (_QWORD *)v10[1];
            --v9;
          }
          while (v10 != (_QWORD *)((char *)UniqueSuccessor + 40));
          if (v9)
            break;
          v11 = (char *)sub_1C477672C((uint64_t)&v14, (uint64_t)UniqueSuccessor);
          v12 = v15 == v14 ? (uint64_t *)((char *)&v16 + 4) : &v16;
          if (v11 != &v15[8 * *(unsigned int *)v12] || v4 && !llvm::BasicBlock::getUniquePredecessor(v8))
            break;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v14, (uint64_t)v8);
          UniqueSuccessor = (const llvm::BasicBlock *)llvm::BasicBlock::getUniqueSuccessor(v8);
          v7 = UniqueSuccessor == a2;
          if (UniqueSuccessor)
          {
            v3 = v8;
            if (UniqueSuccessor != a2)
              continue;
          }
          goto LABEL_18;
        }
      }
      if (v15 != v14)
        free(v15);
    }
  }
  return v3;
}

llvm::raw_ostream *llvm::operator<<(llvm::raw_ostream *this, int *a2)
{
  uint64_t v4;
  int v5;
  _QWORD **v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  llvm::raw_ostream *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD **v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t ***v21;
  const char *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ****v28;
  uint64_t ***v29;
  int v30;
  int v31;
  uint64_t ***v32;
  size_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t ***v38;
  size_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t ****v45;
  uint64_t ***v46;
  int v47;
  int v48;
  uint64_t ***v49;
  size_t v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v54;

  v4 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v4) > 9)
  {
    *(_WORD *)(v4 + 8) = 15732;
    *(_QWORD *)v4 = *(_QWORD *)"IsPerfect=";
    *((_QWORD *)this + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(this, "IsPerfect=", 0xAuLL);
  }
  v5 = *a2;
  v6 = (_QWORD **)*((_QWORD *)a2 + 1);
  v7 = v6[a2[4] - 1];
  v8 = 1;
  do
  {
    v7 = (_QWORD *)*v7;
    ++v8;
  }
  while (v7);
  v9 = *v6;
  do
  {
    v9 = (_QWORD *)*v9;
    ++v5;
  }
  while (v9);
  v10 = *((_QWORD *)this + 4);
  v11 = *((_QWORD *)this + 3) - v10;
  if (v8 == v5)
  {
    if (v11 <= 3)
    {
      v12 = "true";
      v13 = this;
      v14 = 4;
LABEL_12:
      llvm::raw_ostream::write(v13, v12, v14);
      goto LABEL_13;
    }
    *(_DWORD *)v10 = 1702195828;
    v54 = *((_QWORD *)this + 4) + 4;
  }
  else
  {
    if (v11 <= 4)
    {
      v12 = "false";
      v13 = this;
      v14 = 5;
      goto LABEL_12;
    }
    *(_BYTE *)(v10 + 4) = 101;
    *(_DWORD *)v10 = 1936482662;
    v54 = *((_QWORD *)this + 4) + 5;
  }
  *((_QWORD *)this + 4) = v54;
LABEL_13:
  v15 = (_QWORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v15 > 7uLL)
  {
    *v15 = 0x3D6874706544202CLL;
    *((_QWORD *)this + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(this, ", Depth=", 8uLL);
  }
  v16 = (_QWORD **)*((_QWORD *)a2 + 1);
  v17 = v16[a2[4] - 1];
  LODWORD(v18) = 1;
  do
  {
    v17 = (_QWORD *)*v17;
    LODWORD(v18) = v18 + 1;
  }
  while (v17);
  v19 = *v16;
  do
  {
    v19 = (_QWORD *)*v19;
    v18 = (v18 - 1);
  }
  while (v19);
  sub_1C5E21910(this, v18, 0, 0, 0);
  v20 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v20) > 0x10)
  {
    *(_BYTE *)(v20 + 16) = 32;
    *(_OWORD *)v20 = *(_OWORD *)", OutermostLoop: ";
    *((_QWORD *)this + 4) += 17;
  }
  else
  {
    llvm::raw_ostream::write(this, ", OutermostLoop: ", 0x11uLL);
  }
  v21 = **(uint64_t *****)(**((_QWORD **)a2 + 1) + 32);
  if (!v21 || (*((_BYTE *)v21 + 23) & 0x10) == 0)
  {
    v22 = "<unnamed loop>";
    v23 = 14;
    goto LABEL_32;
  }
  v24 = ***v21;
  v25 = *(_QWORD *)(v24 + 152);
  v26 = *(unsigned int *)(v24 + 168);
  if (!(_DWORD)v26)
    goto LABEL_30;
  LODWORD(v27) = (v26 - 1) & ((v21 >> 4) ^ (v21 >> 9));
  v28 = (uint64_t ****)(v25 + 16 * v27);
  v29 = *v28;
  if (*v28 != v21)
  {
    v30 = 1;
    while (v29 != (uint64_t ***)-4096)
    {
      v31 = v27 + v30++;
      v27 = v31 & (v26 - 1);
      v29 = *(uint64_t ****)(v25 + 16 * v27);
      if (v29 == v21)
      {
        v28 = (uint64_t ****)(v25 + 16 * v27);
        goto LABEL_31;
      }
    }
LABEL_30:
    v28 = (uint64_t ****)(v25 + 16 * v26);
  }
LABEL_31:
  v32 = v28[1];
  v33 = (size_t)*v32;
  v22 = (const char *)(v32 + 2);
  v23 = v33;
LABEL_32:
  v34 = (_QWORD *)*((_QWORD *)this + 4);
  if (v23 <= *((_QWORD *)this + 3) - (_QWORD)v34)
  {
    if (v23)
    {
      memcpy(v34, v22, v23);
      v34 = (_QWORD *)(*((_QWORD *)this + 4) + v23);
      *((_QWORD *)this + 4) = v34;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, v22, v23);
    v34 = (_QWORD *)*((_QWORD *)this + 4);
  }
  if (*((_QWORD *)this + 3) - (_QWORD)v34 > 0xAuLL)
  {
    *(_DWORD *)((char *)v34 + 7) = 539500602;
    *v34 = *(_QWORD *)", Loops:(";
    *((_QWORD *)this + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(this, ", Loops:(", 0xBuLL);
  }
  v35 = a2[4];
  if ((_DWORD)v35)
  {
    v36 = *((_QWORD *)a2 + 1);
    v37 = v36 + 8 * v35;
    while (1)
    {
      v38 = **(uint64_t *****)(*(_QWORD *)v36 + 32);
      if (v38)
      {
        if ((*((_BYTE *)v38 + 23) & 0x10) != 0)
          break;
      }
      v39 = 14;
      v40 = "<unnamed loop>";
LABEL_51:
      v51 = (_BYTE *)*((_QWORD *)this + 4);
      if (v39 <= *((_QWORD *)this + 3) - (_QWORD)v51)
      {
        if (v39)
        {
          memcpy(v51, v40, v39);
          v51 = (_BYTE *)(*((_QWORD *)this + 4) + v39);
          *((_QWORD *)this + 4) = v51;
        }
      }
      else
      {
        llvm::raw_ostream::write(this, v40, v39);
        v51 = (_BYTE *)*((_QWORD *)this + 4);
      }
      if (*((_BYTE **)this + 3) == v51)
      {
        llvm::raw_ostream::write(this, " ", 1uLL);
      }
      else
      {
        *v51 = 32;
        ++*((_QWORD *)this + 4);
      }
      v36 += 8;
      if (v36 == v37)
        goto LABEL_60;
    }
    v41 = ***v38;
    v42 = *(_QWORD *)(v41 + 152);
    v43 = *(unsigned int *)(v41 + 168);
    if ((_DWORD)v43)
    {
      LODWORD(v44) = (v43 - 1) & ((v38 >> 4) ^ (v38 >> 9));
      v45 = (uint64_t ****)(v42 + 16 * v44);
      v46 = *v45;
      if (*v45 == v38)
      {
LABEL_50:
        v49 = v45[1];
        v50 = (size_t)*v49;
        v40 = (const char *)(v49 + 2);
        v39 = v50;
        goto LABEL_51;
      }
      v47 = 1;
      while (v46 != (uint64_t ***)-4096)
      {
        v48 = v44 + v47++;
        v44 = v48 & (v43 - 1);
        v46 = *(uint64_t ****)(v42 + 16 * v44);
        if (v46 == v38)
        {
          v45 = (uint64_t ****)(v42 + 16 * v44);
          goto LABEL_50;
        }
      }
    }
    v45 = (uint64_t ****)(v42 + 16 * v43);
    goto LABEL_50;
  }
LABEL_60:
  v52 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v52)
  {
    llvm::raw_ostream::write(this, ")", 1uLL);
  }
  else
  {
    *v52 = 41;
    ++*((_QWORD *)this + 4);
  }
  return this;
}

BOOL sub_1C4EACEC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char isSafeToSpeculativelyExecute;
  int v9;
  unsigned int v12;

  isSafeToSpeculativelyExecute = llvm::isSafeToSpeculativelyExecute(a1, 0, 0, 0);
  v9 = *(unsigned __int8 *)(a1 + 16);
  if ((isSafeToSpeculativelyExecute & 1) == 0 && v9 != 83 && v9 != 30)
    return 0;
  if ((v9 - 41) <= 0x11 && *(_QWORD *)(a4 + 16) != a1)
    return 0;
  v12 = v9 - 83;
  return a1 == a3 || v12 < 0xFFFFFFFE || a1 == a2;
}

void sub_1C4EACF48(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  unint64_t v13;

  v13 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 80, &v13);
  v4 = v3;
  v5 = *(_DWORD **)a1;
  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6)
  {
    v7 = 80 * v6;
    v8 = v3;
    do
    {
      *v8 = v8 + 2;
      v8[1] = 0x800000000;
      if (v5[2])
        sub_1C614D378((uint64_t)v8, (uint64_t)v5);
      v5 += 20;
      v8 += 10;
      v7 -= 80;
    }
    while (v7);
    v5 = *(_DWORD **)a1;
    v9 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v9)
    {
      v10 = 20 * v9;
      do
      {
        v11 = *(_DWORD **)&v5[v10 - 20];
        if (&v5[v10 - 16] != v11)
          free(v11);
        v10 -= 20;
      }
      while (v10 * 4);
      v5 = *(_DWORD **)a1;
    }
  }
  v12 = v13;
  if (v5 != (_DWORD *)(a1 + 16))
    free(v5);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v12;
}

uint64_t llvm::UnrolledInstAnalyzer::simplifyInstWithSCEV(llvm::UnrolledInstAnalyzer *this, llvm::Instruction *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  llvm::Instruction *v9;
  int v10;
  unsigned int v11;
  uint64_t SCEVIter;
  int v13;
  BOOL v14;
  uint64_t result;
  BOOL v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t PointerBase;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  char v28;
  llvm::Instruction *v29;
  int v30;
  unsigned int v31;
  llvm::Instruction *v32;

  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFD) != 0xD)
    return 0;
  v4 = *((_QWORD *)this + 5);
  v5 = *(_QWORD *)(v4 + 104);
  v6 = *(_DWORD *)(v4 + 120);
  if (!v6)
    goto LABEL_8;
  v7 = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v8 = v5 + 48 * v7;
  v9 = *(llvm::Instruction **)(v8 + 24);
  if (v9 != a2)
  {
    v10 = 1;
    while (v9 != (llvm::Instruction *)-4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v8 = v5 + 48 * v7;
      v9 = *(llvm::Instruction **)(v8 + 24);
      if (v9 == a2)
        goto LABEL_9;
    }
LABEL_8:
    v8 = v5 + 48 * v6;
  }
LABEL_9:
  if (v8 == v5 + 48 * v6 || (SCEVIter = *(_QWORD *)(v8 + 40)) == 0)
    SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v4, (unint64_t)a2);
  v13 = *(unsigned __int16 *)(SCEVIter + 24);
  if (SCEVIter)
    v14 = v13 == 0;
  else
    v14 = 0;
  if (v14)
  {
    v17 = *(_QWORD *)(SCEVIter + 32);
LABEL_27:
    v18 = (uint64_t *)*((_QWORD *)this + 4);
    v32 = a2;
    sub_1C4EAD954(v18, &v32)[1] = v17;
    return 1;
  }
  if (!llvm::SCEV::isZero(*((llvm::SCEV **)this + 3)))
  {
    result = llvm::ScalarEvolution::getLoopDisposition(*((llvm::ScalarEvolution **)this + 5), (const llvm::SCEV *)SCEVIter, *((const llvm::Loop **)this + 6));
    if ((_DWORD)result == 1)
      return result;
    v13 = *(unsigned __int16 *)(SCEVIter + 24);
  }
  if (SCEVIter)
    v16 = v13 == 7;
  else
    v16 = 0;
  if (!v16 || *(_QWORD *)(SCEVIter + 48) != *((_QWORD *)this + 6))
    return 0;
  v19 = llvm::SCEVAddRecExpr::evaluateAtIteration(*(_QWORD *)(SCEVIter + 32), *(_QWORD *)(SCEVIter + 40));
  v20 = v19;
  if (v19)
    v21 = *(unsigned __int16 *)(v19 + 24) == 0;
  else
    v21 = 0;
  if (v21)
  {
    v17 = *(_QWORD *)(v19 + 32);
    goto LABEL_27;
  }
  PointerBase = llvm::ScalarEvolution::getPointerBase(*((llvm::ScalarEvolution **)this + 5), (const llvm::SCEV *)SCEVIter);
  result = 0;
  if (PointerBase && *(_WORD *)(PointerBase + 24) == 14)
  {
    llvm::ScalarEvolution::getMinusSCEV(*((_QWORD *)this + 5), v20, PointerBase);
    v24 = v23;
    result = 0;
    if (v24 && *(_WORD *)(v24 + 24) == 0)
    {
      v26 = *(_QWORD *)(PointerBase - 8);
      v27 = *(_QWORD *)(v24 + 32);
      v32 = 0;
      v28 = sub_1C4E08D70(*(_QWORD *)this, *((_DWORD *)this + 4), (uint64_t)a2, &v32);
      v29 = v32;
      if ((v28 & 1) != 0)
      {
LABEL_46:
        result = 0;
        *((_QWORD *)v29 + 1) = v26;
        *((_QWORD *)v29 + 2) = v27;
        return result;
      }
      v30 = *((_DWORD *)this + 2);
      v31 = *((_DWORD *)this + 4);
      if (4 * v30 + 4 >= 3 * v31)
      {
        v31 *= 2;
      }
      else if (v31 + ~v30 - *((_DWORD *)this + 3) > v31 >> 3)
      {
LABEL_43:
        ++*((_DWORD *)this + 2);
        if (*(_QWORD *)v29 != -4096)
          --*((_DWORD *)this + 3);
        *((_QWORD *)v29 + 1) = 0;
        *((_QWORD *)v29 + 2) = 0;
        *(_QWORD *)v29 = a2;
        goto LABEL_46;
      }
      sub_1C4EADBC4((uint64_t)this, v31);
      v32 = 0;
      sub_1C4E08D70(*(_QWORD *)this, *((_DWORD *)this + 4), (uint64_t)a2, &v32);
      v29 = v32;
      goto LABEL_43;
    }
  }
  return result;
}

uint64_t llvm::UnrolledInstAnalyzer::visitBinaryOperator(llvm::UnrolledInstAnalyzer *this, llvm::BinaryOperator *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  llvm::Constant *v12;
  _BOOL4 v13;
  int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v20;
  llvm::Constant *v21;
  __int128 v22;
  __int128 v23;
  __int16 v24;
  uint64_t v25;

  v4 = (unsigned __int8 *)*((_QWORD *)a2 - 8);
  v5 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
  if (v4[16] >= 0x15u)
  {
    v6 = *((_QWORD *)this + 4);
    v21 = (llvm::Constant *)*((_QWORD *)a2 - 8);
    v25 = 0;
    v7 = sub_1C4926528(v6, &v21, &v25);
    v8 = 0;
    if (v7)
      v8 = *(unsigned __int8 **)(v25 + 8);
    if (v8)
      v4 = v8;
  }
  if (v5[16] >= 0x15u)
  {
    v9 = *((_QWORD *)this + 4);
    v21 = (llvm::Constant *)v5;
    v25 = 0;
    v10 = sub_1C4926528(v9, &v21, &v25);
    v11 = 0;
    if (v10)
      v11 = *(unsigned __int8 **)(v25 + 8);
    if (v11)
      v5 = v11;
  }
  v12 = (llvm::Constant *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40) + 272);
  v13 = sub_1C4774A9C((uint64_t)a2);
  v14 = *((unsigned __int8 *)a2 + 16) - 28;
  if (v13)
  {
    v15 = (unint64_t)*((unsigned __int8 *)a2 + 17) >> 1;
    v21 = v12;
    v22 = 0u;
    v23 = 0u;
    v24 = 257;
    if ((_DWORD)v15 == 127)
      v16 = -1;
    else
      v16 = v15;
    v17 = llvm::SimplifyBinOp(v14, (llvm *)v4, (llvm::Constant *)v5, v16, &v21);
  }
  else
  {
    v21 = v12;
    v22 = 0u;
    v23 = 0u;
    v24 = 257;
    v17 = sub_1C4E6D628(v14);
  }
  v18 = v17;
  if (!v17)
    return llvm::UnrolledInstAnalyzer::simplifyInstWithSCEV(this, a2);
  v20 = (uint64_t *)*((_QWORD *)this + 4);
  v21 = a2;
  sub_1C4EAD954(v20, &v21)[1] = v18;
  return 1;
}

uint64_t llvm::UnrolledInstAnalyzer::visitLoad(llvm::UnrolledInstAnalyzer *this, llvm::LoadInst *a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  llvm::GlobalValue *Section;
  uint64_t v10;
  llvm::Module *v11;
  llvm::ConstantDataSequential *v12;
  llvm::Type *v14;
  uint64_t result;
  const char *v16;
  unint64_t PrimitiveSizeInBits;
  llvm::APInt *v18;
  unsigned int v19;
  unint64_t v20;
  llvm::APFloatBase *ElementAsConstant;
  uint64_t *v22;
  llvm::LoadInst *v24;

  v4 = *((_QWORD *)a2 - 4);
  v24 = 0;
  if (sub_1C4EADD38(*(_QWORD *)this, *((_DWORD *)this + 4), v4, &v24))
    v5 = v24 == (llvm::LoadInst *)(*(_QWORD *)this + 24 * *((unsigned int *)this + 4));
  else
    v5 = 1;
  if (v5)
    return 0;
  v6 = *((_QWORD *)v24 + 1);
  v7 = v6 && *(_BYTE *)(v6 + 16) == 3;
  if (!v7 || (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) == 0)
    return 0;
  v8 = *((_QWORD *)v24 + 2);
  Section = llvm::GlobalValue::getSection(*((llvm::GlobalValue **)v24 + 1));
  if (v10 == 12
    && *(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
    && *((_DWORD *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
  {
    return 0;
  }
  if ((*(_DWORD *)(v6 + 32) & 0xFu) - 5 < 4 || (result = 0, ((1 << (*(_DWORD *)(v6 + 32) & 0xF)) & 0x614) == 0))
  {
    v11 = *(llvm::Module **)(v6 + 40);
    if (v11 && llvm::Module::getSemanticInterposition(v11) && (*(_BYTE *)(v6 + 33) & 0x40) == 0)
      return 0;
    if ((*(_BYTE *)(v6 + 80) & 3) != 1)
      return 0;
    v12 = *(llvm::ConstantDataSequential **)(v6 - 32);
    if (!v12 || (*((_BYTE *)v12 + 16) & 0xFE) != 14)
      return 0;
    v14 = *(llvm::Type **)(*(_QWORD *)v12 + 24);
    if (v14 != *(llvm::Type **)a2)
      return 0;
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v14);
    if ((_DWORD)v16 == 1)
    v18 = (llvm::APInt *)(v8 + 24);
    v19 = *(_DWORD *)(v8 + 32);
    if (v19 >= 0x41)
    {
      if (v19 - llvm::APInt::countLeadingZerosSlowCase(v18) > 0x40)
        return 0;
      v20 = **(_QWORD **)v18;
    }
    else
    {
      v20 = (uint64_t)(*(_QWORD *)v18 << -(char)v19) >> -(char)v19;
    }
    if ((v20 & 0x8000000000000000) == 0
      && v20 / (PrimitiveSizeInBits >> 3) < *(unsigned int *)(*(_QWORD *)v12 + 32))
    {
      ElementAsConstant = llvm::ConstantDataSequential::getElementAsConstant(v12);
      v22 = (uint64_t *)*((_QWORD *)this + 4);
      v24 = a2;
      sub_1C4EAD954(v22, &v24)[1] = ElementAsConstant;
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t llvm::UnrolledInstAnalyzer::visitCastInst(llvm::UnrolledInstAnalyzer *this, llvm::CastInst *a2)
{
  llvm::Type *v4;
  uint64_t v5;
  int v6;
  llvm::Type *v7;
  const llvm::DataLayout *v8;
  llvm *v9;
  llvm::Constant *v10;
  llvm::Constant **v11;
  llvm::Constant **v13;
  uint64_t *v14;
  llvm::Type *v15;
  __int128 v16;
  __int128 v17;
  __int16 v18;
  uint64_t v19;

  v4 = (llvm::Type *)*((_QWORD *)a2 - 4);
  v5 = *((_QWORD *)this + 4);
  v15 = v4;
  v19 = 0;
  v6 = sub_1C4926528(v5, &v15, &v19);
  v7 = 0;
  if (v6)
    v7 = *(llvm::Type **)(v19 + 8);
  if (v7)
    v4 = v7;
  if (!llvm::CastInst::castIsValid(*((unsigned __int8 *)a2 + 16) - 28, *(llvm::Type **)v4, *(_QWORD *)a2))
    return llvm::UnrolledInstAnalyzer::simplifyInstWithSCEV(this, a2);
  v9 = (llvm *)(*((unsigned __int8 *)a2 + 16) - 28);
  v10 = *(llvm::Constant **)a2;
  v15 = (llvm::Type *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40) + 272);
  v16 = 0u;
  v17 = 0u;
  v18 = 257;
  v11 = sub_1C4E6C1BC(v9, (uint64_t)v4, v10, &v15, v8);
  if (!v11)
    return llvm::UnrolledInstAnalyzer::simplifyInstWithSCEV(this, a2);
  v13 = v11;
  v14 = (uint64_t *)*((_QWORD *)this + 4);
  v15 = a2;
  sub_1C4EAD954(v14, &v15)[1] = v13;
  return 1;
}

uint64_t llvm::UnrolledInstAnalyzer::visitCmpInst(llvm::UnrolledInstAnalyzer *this, llvm::CmpInst *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  llvm::Value **v13;
  llvm::Value **v14;
  uint64_t *v15;
  llvm::CmpInst *v17;
  uint64_t v18;
  unsigned int v19;
  llvm::CmpInst *v20;
  __int128 v21;
  __int128 v22;
  __int16 v23;
  uint64_t v24;

  v4 = (unsigned __int8 *)*((_QWORD *)a2 - 8);
  v5 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
  if (v4[16] >= 0x15u)
  {
    v6 = *((_QWORD *)this + 4);
    v20 = (llvm::CmpInst *)*((_QWORD *)a2 - 8);
    v24 = 0;
    v7 = sub_1C4926528(v6, &v20, &v24);
    v8 = 0;
    if (v7)
      v8 = *(unsigned __int8 **)(v24 + 8);
    if (v8)
      v4 = v8;
  }
  if (v5[16] >= 0x15u)
  {
    v9 = *((_QWORD *)this + 4);
    v20 = (llvm::CmpInst *)v5;
    v24 = 0;
    v10 = sub_1C4926528(v9, &v20, &v24);
    v11 = 0;
    if (v10)
      v11 = *(unsigned __int8 **)(v24 + 8);
    if (v11)
      v5 = v11;
  }
  if (v4[16] >= 0x15u && v5[16] >= 0x15u)
  {
    v20 = 0;
    if (sub_1C4EADD38(*(_QWORD *)this, *((_DWORD *)this + 4), (uint64_t)v4, &v20))
    {
      v17 = v20;
      v18 = *(_QWORD *)this;
      v19 = *((_DWORD *)this + 4);
      if (v20 != (llvm::CmpInst *)(*(_QWORD *)this + 24 * v19))
      {
        v20 = 0;
        if (sub_1C4EADD38(v18, v19, (uint64_t)v5, &v20))
        {
          if (v20 != (llvm::CmpInst *)(*(_QWORD *)this + 24 * *((unsigned int *)this + 4))
            && *((_QWORD *)v17 + 1) == *((_QWORD *)v20 + 1))
          {
            v4 = (unsigned __int8 *)*((_QWORD *)v17 + 2);
            v5 = (unsigned __int8 *)*((_QWORD *)v20 + 2);
          }
        }
      }
    }
  }
  v12 = *((_WORD *)a2 + 9) & 0x3F;
  v20 = (llvm::CmpInst *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40) + 272);
  v21 = 0u;
  v22 = 0u;
  v23 = 257;
  v13 = sub_1C4E6D894(v12, v4, v5, (uint64_t)&v20, 3);
  if (!v13)
    return llvm::UnrolledInstAnalyzer::simplifyInstWithSCEV(this, a2);
  v14 = v13;
  v15 = (uint64_t *)*((_QWORD *)this + 4);
  v20 = a2;
  sub_1C4EAD954(v15, &v20)[1] = v14;
  return 1;
}

BOOL llvm::UnrolledInstAnalyzer::visitPHINode(llvm::UnrolledInstAnalyzer *this, llvm::PHINode *a2)
{
  return (llvm::UnrolledInstAnalyzer::simplifyInstWithSCEV(this, a2) & 1) != 0
      || *((_QWORD *)a2 + 5) == **(_QWORD **)(*((_QWORD *)this + 6) + 32);
}

_QWORD *sub_1C4EAD954(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4E36534(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4EAD9B0((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C4EAD9B0(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4EADA60(a1, v7);
  v9 = 0;
  sub_1C4E36534((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C4EADA60(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4EADB18(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4EADB18(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C4E36534((uint64_t *)v5, a2, &v10);
      v9 = v10;
      *v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

_QWORD *sub_1C4EADBC4(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4EADC88(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = -4096;
      result += 3;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4EADC88(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = -4096;
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C4E08D70(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *(_OWORD *)(v10 + 1) = *(_OWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

uint64_t sub_1C4EADD38(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v7 = a2 - 1;
    v8 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v4 = (_QWORD *)(a1 + 24 * v8);
    v9 = *v4;
    if (*v4 == a3)
    {
      v5 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v9 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v9 == -8192;
        if (v12)
          v10 = v4;
        v13 = v8 + v11++;
        v8 = v13 & v7;
        v4 = (_QWORD *)(a1 + 24 * (v13 & v7));
        v9 = *v4;
        v5 = 1;
        if (*v4 == a3)
          goto LABEL_3;
      }
      v5 = 0;
      if (v10)
        v4 = v10;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
LABEL_3:
  *a4 = v4;
  return v5;
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopDepth(_QWORD *a1)
{
  uint64_t v1;

  LODWORD(v1) = 0;
  do
  {
    a1 = (_QWORD *)*a1;
    v1 = (v1 + 1);
  }
  while (a1);
  return v1;
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getHeader(uint64_t a1)
{
  return **(_QWORD **)(a1 + 32);
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getBlocks(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getParentLoop(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD *llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::setParentLoop(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

BOOL llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::contains(_QWORD *a1, _QWORD *a2)
{
  _BOOL8 result;

  if (a2 == a1)
    return 1;
  do
  {
    result = a2 != 0;
    if (!a2)
      break;
    a2 = (_QWORD *)*a2;
  }
  while (a2 != a1);
  return result;
}

BOOL llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::contains(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_1C477672C(a1 + 56, a2);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = 72;
  if (v4 == *(_QWORD *)(a1 + 56))
    v5 = 76;
  return v3 != (_QWORD *)(v4 + 8 * *(unsigned int *)(a1 + v5));
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getSubLoops(uint64_t a1)
{
  return a1 + 8;
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getSubLoopsVector(uint64_t a1)
{
  return a1 + 8;
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::begin(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::end(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::rbegin(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::rend(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

BOOL llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isInnermost(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 16);
}

BOOL llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isOutermost(_QWORD *a1)
{
  return *a1 == 0;
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::block_begin(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::block_end(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::blocks(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getNumBlocks(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3;
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getBlocksVector(uint64_t a1)
{
  return a1 + 32;
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getBlocksSet(uint64_t a1)
{
  return a1 + 56;
}

{
  return a1 + 56;
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isInvalid()
{
  return 0;
}

BOOL llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isLoopExiting(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 result;
  BOOL v18;

  v2 = *(_QWORD *)(a2 + 40);
  if (v2 == a2 + 40)
    return 0;
  if (v2)
    v3 = v2 - 24;
  else
    v3 = 0;
  v4 = *(unsigned __int8 *)(v3 + 16);
  v5 = v4 - 29;
  if (v4 != 30)
  {
    v7 = 2;
    result = 0;
    switch(v5)
    {
      case 0:
      case 5:
      case 6:
        return result;
      case 1:
        __break(1u);
        goto LABEL_25;
      case 2:
        v7 = (*(_DWORD *)(v3 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 3:
      case 9:
LABEL_25:
        v7 = (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) - 1;
        break;
      case 4:
        goto LABEL_9;
      case 7:
        v7 = *(_WORD *)(v3 + 18) & 1;
        break;
      case 8:
        v7 = 1;
        goto LABEL_9;
      case 10:
        v7 = *(_DWORD *)(v3 + 80) + 1;
        break;
      default:
        return 0;
    }
    if (v7)
      goto LABEL_9;
    return 0;
  }
  if ((*(_DWORD *)(v3 + 20) & 0x7FFFFFF) == 3)
    v7 = 2;
  else
    v7 = 1;
LABEL_9:
  v8 = 0;
  v9 = 0;
  v10 = v3 - 64;
  v11 = v7;
  v12 = 1;
  do
  {
    v13 = *(unsigned __int8 *)(v3 + 16);
    if (v13 != 30)
      __asm { BR              X9 }
    v14 = sub_1C477672C(a1 + 56, *(_QWORD *)(v3 - 32 - 32 * v9));
    v15 = *(_QWORD *)(a1 + 64);
    v16 = 72;
    if (v15 == *(_QWORD *)(a1 + 56))
      v16 = 76;
    v18 = v14 == (_QWORD *)(v15 + 8 * *(unsigned int *)(a1 + v16));
    result = v18;
    ++v9;
    v18 = v18 || v11 == v12++;
    v8 += 2;
    v10 += 32;
  }
  while (!v18);
  return result;
}

{
  return __ZNK4llvm8LoopBaseINS_10BasicBlockENS_4LoopEE13isLoopExitingEPKS1_(a1, a2);
}

BOOL llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isLoopLatch(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v7;
  BOOL v8;

  v2 = **(_QWORD **)(a1 + 32);
  while (1)
  {
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
      return v2 != 0;
    v3 = *(_QWORD *)(v2 + 24);
    v4 = *(unsigned __int8 *)(v3 + 16);
    if (v3)
      v5 = v4 >= 0x1C;
    else
      v5 = 0;
    if (v5 && v4 - 29 <= 0xA)
    {
LABEL_19:
      if (*(_QWORD *)(v3 + 40) != a2)
      {
        while (1)
        {
          v2 = *(_QWORD *)(v2 + 8);
          if (!v2)
            break;
          v3 = *(_QWORD *)(v2 + 24);
          v7 = *(unsigned __int8 *)(v3 + 16);
          if (v3)
            v8 = v7 >= 0x1C;
          else
            v8 = 0;
          if (v8 && v7 - 29 <= 0xA)
            goto LABEL_19;
        }
      }
      return v2 != 0;
    }
  }
}

{
  return __ZNK4llvm8LoopBaseINS_10BasicBlockENS_4LoopEE11isLoopLatchEPKS1_(a1, a2);
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getNumBackEdges(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;

  v1 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 8);
  if (!v1)
    return 0;
  while (1)
  {
    v3 = *(_QWORD *)(v1 + 24);
    v4 = *(unsigned __int8 *)(v3 + 16);
    v5 = v3 && v4 >= 0x1C;
    if (v5 && v4 - 29 < 0xB)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      return 0;
  }
  LODWORD(v8) = 0;
LABEL_13:
  v9 = sub_1C477672C(a1 + 56, *(_QWORD *)(v3 + 40));
  v10 = *(_QWORD *)(a1 + 64);
  if (v10 == *(_QWORD *)(a1 + 56))
    v11 = 76;
  else
    v11 = 72;
  if (v9 == (_QWORD *)(v10 + 8 * *(unsigned int *)(a1 + v11)))
    v8 = v8;
  else
    v8 = (v8 + 1);
  while (1)
  {
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      return v8;
    v3 = *(_QWORD *)(v1 + 24);
    v12 = *(unsigned __int8 *)(v3 + 16);
    if (v3)
      v13 = v12 >= 0x1C;
    else
      v13 = 0;
    if (v13 && v12 - 29 < 0xB)
      goto LABEL_13;
  }
}

{
  return __ZNK4llvm8LoopBaseINS_10BasicBlockENS_4LoopEE15getNumBackEdgesEv(a1);
}

_QWORD *llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks(_QWORD *result, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v20;

  v2 = (uint64_t *)result[4];
  v20 = (uint64_t *)result[5];
  if (v20 != v2)
  {
    v3 = result;
    v4 = (uint64_t)(result + 7);
    do
    {
      v5 = *v2;
      v6 = *(_QWORD *)(*v2 + 40);
      if (v6 != *v2 + 40)
      {
        if (v6)
          v7 = v6 - 24;
        else
          v7 = 0;
        v8 = *(unsigned __int8 *)(v7 + 16);
        v9 = v8 - 29;
        if (v8 != 30)
        {
          v10 = 2;
          switch(v9)
          {
            case 1:
              __break(1u);
              JUMPOUT(0x1C4EAE46CLL);
            case 2:
              v10 = (*(_DWORD *)(v7 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_25;
            case 3:
            case 9:
              v10 = (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_25;
            case 4:
              goto LABEL_11;
            case 7:
              v10 = *(_WORD *)(v7 + 18) & 1;
              goto LABEL_25;
            case 8:
              v10 = 1;
              goto LABEL_11;
            case 10:
              v10 = *(_DWORD *)(v7 + 80) + 1;
LABEL_25:
              if (v10)
                goto LABEL_11;
              goto LABEL_18;
            default:
              goto LABEL_18;
          }
        }
        if ((*(_DWORD *)(v7 + 20) & 0x7FFFFFF) == 3)
          v10 = 2;
        else
          v10 = 1;
LABEL_11:
        v11 = 0;
        v12 = 0;
        v13 = v7 - 64;
        v14 = v10;
        while (1)
        {
          v15 = *(unsigned __int8 *)(v7 + 16);
          if (v15 != 30)
            __asm { BR              X9 }
          result = sub_1C477672C(v4, *(_QWORD *)(v7 - 32 - 32 * v12));
          v16 = v3[8];
          v17 = 72;
          if (v16 == v3[7])
            v17 = 76;
          if (result == (_QWORD *)(v16 + 8 * *(unsigned int *)((char *)v3 + v17)))
            break;
          ++v12;
          v11 += 2;
          v13 += 32;
          if (v14 == v12)
            goto LABEL_18;
        }
        v18 = *(unsigned int *)(a2 + 8);
        if (v18 >= *(unsigned int *)(a2 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v18 + 1, 8);
          v18 = *(unsigned int *)(a2 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v18) = v5;
        ++*(_DWORD *)(a2 + 8);
      }
LABEL_18:
      ++v2;
    }
    while (v2 != v20);
  }
  return result;
}

{
  return __ZNK4llvm8LoopBaseINS_10BasicBlockENS_4LoopEE16getExitingBlocksERNS_15SmallVectorImplIPS1_EE(result, a2);
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock(_QWORD *a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  _QWORD v5[9];

  v5[8] = *MEMORY[0x1E0C80C00];
  v3 = v5;
  v4 = 0x800000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks(a1, (uint64_t)&v3);
  if ((_DWORD)v4 == 1)
    v1 = *(_QWORD *)v3;
  else
    v1 = 0;
  if (v3 != v5)
    free(v3);
  return v1;
}

{
  return __ZNK4llvm8LoopBaseINS_10BasicBlockENS_4LoopEE15getExitingBlockEv(a1);
}

_QWORD *llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlocks(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;

  v2 = result[4];
  v20 = result[5];
  if (v20 != v2)
  {
    v3 = result;
    v4 = (uint64_t)(result + 7);
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)v2 + 40);
      if (v5 != *(_QWORD *)v2 + 40)
      {
        if (v5)
          v6 = v5 - 24;
        else
          v6 = 0;
        v7 = *(unsigned __int8 *)(v6 + 16);
        v8 = v7 - 29;
        if (v7 != 30)
        {
          v9 = 2;
          switch(v8)
          {
            case 1:
              __break(1u);
              JUMPOUT(0x1C4EAE794);
            case 2:
              v9 = (*(_DWORD *)(v6 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_25;
            case 3:
            case 9:
              v9 = (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_25;
            case 4:
              goto LABEL_11;
            case 7:
              v9 = *(_WORD *)(v6 + 18) & 1;
              goto LABEL_25;
            case 8:
              v9 = 1;
              goto LABEL_11;
            case 10:
              v9 = *(_DWORD *)(v6 + 80) + 1;
LABEL_25:
              if (v9)
                goto LABEL_11;
              goto LABEL_18;
            default:
              goto LABEL_18;
          }
        }
        if ((*(_DWORD *)(v6 + 20) & 0x7FFFFFF) == 3)
          v9 = 2;
        else
          v9 = 1;
LABEL_11:
        v10 = 0;
        v11 = 0;
        v12 = v6 - 64;
        v13 = v9;
        do
        {
          v14 = *(unsigned __int8 *)(v6 + 16);
          if (v14 != 30)
            __asm { BR              X9 }
          v15 = *(_QWORD *)(v6 - 32 - 32 * v11);
          result = sub_1C477672C(v4, v15);
          v16 = v3[8];
          v17 = 72;
          if (v16 == v3[7])
            v17 = 76;
          if (result == (_QWORD *)(v16 + 8 * *(unsigned int *)((char *)v3 + v17)))
          {
            v18 = *(unsigned int *)(a2 + 8);
            if (v18 >= *(unsigned int *)(a2 + 12))
            {
              result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v18 + 1, 8);
              v18 = *(unsigned int *)(a2 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a2 + 8 * v18) = v15;
            ++*(_DWORD *)(a2 + 8);
          }
          ++v11;
          v10 += 2;
          v12 += 32;
        }
        while (v13 != v11);
      }
LABEL_18:
      v2 += 8;
    }
    while (v2 != v20);
  }
  return result;
}

{
  return __ZNK4llvm8LoopBaseINS_10BasicBlockENS_4LoopEE13getExitBlocksERNS_15SmallVectorImplIPS1_EE(result, a2);
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlock(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[9];

  v6[8] = *MEMORY[0x1E0C80C00];
  v4 = v6;
  v5 = 0x800000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlocks(a1, (uint64_t)&v4);
  if ((_DWORD)v5 == 1)
    v1 = *(_QWORD *)v4;
  else
    v1 = 0;
  if (v4 != v6)
  {
    v3 = v1;
    free(v4);
    return v3;
  }
  return v1;
}

{
  return __ZNK4llvm8LoopBaseINS_10BasicBlockENS_4LoopEE12getExitBlockEv(a1);
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::hasDedicatedExits(_QWORD *a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  unsigned int v9;
  BOOL v10;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v17;
  uint64_t v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v18 = 0x400000000;
  sub_1C4EAEA40(a1, (uint64_t)&v17);
  if ((_DWORD)v18)
  {
    v2 = (char *)v17;
    v3 = (char *)v17 + 8 * v18;
    do
    {
      v4 = *(_QWORD *)(*(_QWORD *)v2 + 8);
      if (v4)
      {
        while (1)
        {
          v5 = *(_QWORD *)(v4 + 24);
          v6 = *(unsigned __int8 *)(v5 + 16);
          v7 = v5 && v6 >= 0x1C;
          if (v7 && v6 - 29 <= 0xA)
            break;
          v4 = *(_QWORD *)(v4 + 8);
          if (!v4)
            goto LABEL_13;
        }
LABEL_23:
        v12 = sub_1C477672C((uint64_t)(a1 + 7), *(_QWORD *)(v5 + 40));
        v13 = a1[8];
        if (v13 == a1[7])
          v14 = 76;
        else
          v14 = 72;
        if (v12 == (_QWORD *)(v13 + 8 * *(unsigned int *)((char *)a1 + v14)))
        {
          v15 = 0;
          goto LABEL_29;
        }
        while (1)
        {
          v4 = *(_QWORD *)(v4 + 8);
          if (!v4)
            break;
          v5 = *(_QWORD *)(v4 + 24);
          v9 = *(unsigned __int8 *)(v5 + 16);
          if (v5)
            v10 = v9 >= 0x1C;
          else
            v10 = 0;
          if (v10 && v9 - 29 <= 0xA)
            goto LABEL_23;
        }
      }
LABEL_13:
      v2 += 8;
    }
    while (v2 != v3);
  }
  v15 = 1;
LABEL_29:
  if (v17 != v19)
    free(v17);
  return v15;
}

{
  return __ZNK4llvm8LoopBaseINS_10BasicBlockENS_4LoopEE17hasDedicatedExitsEv(a1);
}

void sub_1C4EAEA40(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  int v27;
  _BYTE v28[264];

  v24 = v28;
  v25 = v28;
  v26 = 32;
  v27 = 0;
  v2 = a1[4];
  v23 = a1[5];
  if (v23 != v2)
  {
    v4 = (uint64_t)(a1 + 7);
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)v2 + 40);
      if (v5 != *(_QWORD *)v2 + 40)
      {
        if (v5)
          v6 = v5 - 24;
        else
          v6 = 0;
        v7 = *(unsigned __int8 *)(v6 + 16);
        v8 = v7 - 29;
        if (v7 != 30)
        {
          v9 = 2;
          switch(v8)
          {
            case 1:
              __break(1u);
              JUMPOUT(0x1C4EAEC58);
            case 2:
              v9 = (*(_DWORD *)(v6 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_26;
            case 3:
            case 9:
              v9 = (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_26;
            case 4:
              goto LABEL_11;
            case 7:
              v9 = *(_WORD *)(v6 + 18) & 1;
              goto LABEL_26;
            case 8:
              v9 = 1;
              goto LABEL_11;
            case 10:
              v9 = *(_DWORD *)(v6 + 80) + 1;
LABEL_26:
              if (v9)
                goto LABEL_11;
              goto LABEL_18;
            default:
              goto LABEL_18;
          }
        }
        if ((*(_DWORD *)(v6 + 20) & 0x7FFFFFF) == 3)
          v9 = 2;
        else
          v9 = 1;
LABEL_11:
        v10 = 0;
        v11 = 0;
        v12 = v6 - 64;
        v13 = v9;
        do
        {
          v14 = *(unsigned __int8 *)(v6 + 16);
          if (v14 != 30)
            __asm { BR              X9 }
          v15 = *(_QWORD *)(v6 - 32 - 32 * v11);
          v16 = sub_1C477672C(v4, v15);
          v17 = a1[8];
          v18 = 72;
          if (v17 == a1[7])
            v18 = 76;
          if (v16 == (_QWORD *)(v17 + 8 * *(unsigned int *)((char *)a1 + v18)))
          {
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v24, v15);
            if (v19)
            {
              v20 = a2;
              v21 = *(unsigned int *)(a2 + 8);
              if (v21 >= *(unsigned int *)(a2 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v21 + 1, 8);
                v20 = a2;
                v21 = *(unsigned int *)(a2 + 8);
              }
              *(_QWORD *)(*(_QWORD *)v20 + 8 * v21) = v15;
              ++*(_DWORD *)(v20 + 8);
            }
          }
          ++v11;
          v10 += 2;
          v12 += 32;
        }
        while (v13 != v11);
      }
LABEL_18:
      v2 += 8;
    }
    while (v2 != v23);
    if (v25 != v24)
      free(v25);
  }
}

void llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getUniqueNonLatchExitBlocks(_QWORD *a1, uint64_t a2)
{
  uint64_t LoopLatch;

  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)a1);
  sub_1C4EAEE28(a1, a2, LoopLatch);
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;

  v1 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 8);
  if (!v1)
    return 0;
  while (1)
  {
    v3 = *(_QWORD *)(v1 + 24);
    v4 = *(unsigned __int8 *)(v3 + 16);
    v5 = v3 && v4 >= 0x1C;
    if (v5 && v4 - 29 < 0xB)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      return 0;
  }
  v9 = 0;
LABEL_13:
  v7 = *(_QWORD *)(v3 + 40);
  v10 = sub_1C477672C(a1 + 56, v7);
  v11 = *(_QWORD *)(a1 + 64);
  if (v11 == *(_QWORD *)(a1 + 56))
    v12 = 76;
  else
    v12 = 72;
  if (v10 != (_QWORD *)(v11 + 8 * *(unsigned int *)(a1 + v12)))
  {
    if (!v9)
      goto LABEL_20;
    return 0;
  }
  v7 = v9;
LABEL_20:
  while (1)
  {
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      return v7;
    v3 = *(_QWORD *)(v1 + 24);
    v13 = *(unsigned __int8 *)(v3 + 16);
    if (v3)
      v14 = v13 >= 0x1C;
    else
      v14 = 0;
    if (v14 && v13 - 29 < 0xB)
    {
      v9 = v7;
      goto LABEL_13;
    }
  }
}

{
  return __ZNK4llvm8LoopBaseINS_10BasicBlockENS_4LoopEE12getLoopLatchEv(a1);
}

void sub_1C4EAEE28(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  int v36;
  _BYTE v37[264];

  v33 = v37;
  v34 = v37;
  v35 = 32;
  v36 = 0;
  v5 = a1[4];
  v6 = a1[5] - v5;
  if (v6)
  {
    v7 = 8 * (v6 >> 3);
    for (i = (uint64_t *)a1[4]; *i == a3; ++i)
    {
      v7 -= 8;
      if (!v7)
        return;
    }
  }
  else
  {
    i = (uint64_t *)a1[4];
  }
  v9 = (uint64_t *)(v5 + (v6 & 0xFFFFFFFFFFFFFFF8));
  if (i != v9)
  {
    v30 = v9;
    v32 = (uint64_t)(a1 + 7);
    v29 = a2 + 16;
    v10 = *i;
LABEL_9:
    v11 = *(_QWORD *)(v10 + 40);
    if (v11 != v10 + 40)
    {
      if (v11)
        v12 = v11 - 24;
      else
        v12 = 0;
      v13 = *(unsigned __int8 *)(v12 + 16);
      v14 = v13 - 29;
      if (v13 != 30)
      {
        v15 = 2;
        switch(v14)
        {
          case 1:
            __break(1u);
            return;
          case 2:
            v15 = (*(_DWORD *)(v12 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_35;
          case 3:
          case 9:
            v15 = (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_35;
          case 4:
            goto LABEL_17;
          case 7:
            v15 = *(_WORD *)(v12 + 18) & 1;
            goto LABEL_35;
          case 8:
            v15 = 1;
            goto LABEL_17;
          case 10:
            v15 = *(_DWORD *)(v12 + 80) + 1;
LABEL_35:
            if (!v15)
              goto LABEL_30;
            goto LABEL_17;
          default:
            goto LABEL_30;
        }
      }
      if ((*(_DWORD *)(v12 + 20) & 0x7FFFFFF) == 3)
        v15 = 2;
      else
        v15 = 1;
LABEL_17:
      v16 = 0;
      v17 = 0;
      v18 = v12 - 64;
      v19 = v15;
      do
      {
        v20 = *(unsigned __int8 *)(v12 + 16);
        if (v20 != 30)
          __asm { BR              X9 }
        v21 = *(_QWORD *)(v12 - 32 - 32 * v17);
        v22 = sub_1C477672C(v32, v21);
        v23 = a1[8];
        v24 = 72;
        if (v23 == a1[7])
          v24 = 76;
        if (v22 == (_QWORD *)(v23 + 8 * *(unsigned int *)((char *)a1 + v24)))
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v33, v21);
          if (v25)
          {
            v26 = *(unsigned int *)(a2 + 8);
            if (v26 >= *(unsigned int *)(a2 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v29, v26 + 1, 8);
              v26 = *(unsigned int *)(a2 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a2 + 8 * v26) = v21;
            ++*(_DWORD *)(a2 + 8);
          }
        }
        ++v17;
        v16 += 2;
        v18 += 32;
      }
      while (v19 != v17);
    }
LABEL_30:
    v27 = i + 1;
    while (v27 != v30)
    {
      v28 = *v27++;
      v10 = v28;
      if (v28 != a3)
      {
        i = v27 - 1;
        goto LABEL_9;
      }
    }
    if (v34 != v33)
      free(v34);
  }
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getUniqueExitBlock(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[9];

  v6[8] = *MEMORY[0x1E0C80C00];
  v4 = v6;
  v5 = 0x800000000;
  sub_1C4EAEA40(a1, (uint64_t)&v4);
  if ((_DWORD)v5 == 1)
    v1 = *(_QWORD *)v4;
  else
    v1 = 0;
  if (v4 != v6)
  {
    v3 = v1;
    free(v4);
    return v3;
  }
  return v1;
}

{
  return __ZNK4llvm8LoopBaseINS_10BasicBlockENS_4LoopEE18getUniqueExitBlockEv(a1);
}

BOOL llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::hasNoExitBlocks(_QWORD *a1)
{
  int v1;
  int v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[9];

  v6[8] = *MEMORY[0x1E0C80C00];
  v4 = v6;
  v5 = 0x800000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlocks(a1, (uint64_t)&v4);
  v1 = v5;
  if (v4 != v6)
  {
    v3 = v5;
    free(v4);
    v1 = v3;
  }
  return v1 == 0;
}

{
  return __ZNK4llvm8LoopBaseINS_10BasicBlockENS_4LoopEE15hasNoExitBlocksEv(a1);
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitEdges(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(uint64_t **)(result + 32);
  v18 = *(uint64_t **)(result + 40);
  if (v18 != v2)
  {
    v3 = result;
    v4 = result + 56;
    do
    {
      v20 = *v2;
      v5 = *(_QWORD *)(v20 + 40);
      if (v5 != v20 + 40)
      {
        if (v5)
          v6 = v5 - 24;
        else
          v6 = 0;
        v7 = *(unsigned __int8 *)(v6 + 16);
        v8 = v7 - 29;
        if (v7 != 30)
        {
          v9 = 2;
          switch(v8)
          {
            case 1:
              __break(1u);
              JUMPOUT(0x1C4EAF430);
            case 2:
              v9 = (*(_DWORD *)(v6 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_24;
            case 3:
            case 9:
              v9 = (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_24;
            case 4:
              goto LABEL_11;
            case 7:
              v9 = *(_WORD *)(v6 + 18) & 1;
              goto LABEL_24;
            case 8:
              v9 = 1;
              goto LABEL_11;
            case 10:
              v9 = *(_DWORD *)(v6 + 80) + 1;
LABEL_24:
              if (v9)
                goto LABEL_11;
              goto LABEL_21;
            default:
              goto LABEL_21;
          }
        }
        if ((*(_DWORD *)(v6 + 20) & 0x7FFFFFF) == 3)
          v9 = 2;
        else
          v9 = 1;
LABEL_11:
        v10 = 0;
        v11 = 0;
        v12 = v6 - 64;
        v13 = v9;
        do
        {
          v19 = 0;
          v14 = *(unsigned __int8 *)(v6 + 16);
          if (v14 != 30)
            __asm { BR              X9 }
          v19 = *(_QWORD *)(v6 - 32 - 32 * v11);
          result = (uint64_t)sub_1C477672C(v4, v19);
          v15 = *(_QWORD *)(v3 + 64);
          v16 = 72;
          if (v15 == *(_QWORD *)(v3 + 56))
            v16 = 76;
          if (result == v15 + 8 * *(unsigned int *)(v3 + v16))
            result = sub_1C61A126C(a2, &v20, &v19);
          ++v11;
          v10 += 2;
          v12 += 32;
        }
        while (v13 != v11);
      }
LABEL_21:
      ++v2;
    }
    while (v2 != v18);
  }
  return result;
}

{
  return __ZNK4llvm8LoopBaseINS_10BasicBlockENS_4LoopEE12getExitEdgesERNS_15SmallVectorImplINSt3__14pairIPS1_S7_EEEE(result, a2);
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPreheader(uint64_t a1)
{
  uint64_t LoopPredecessor;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v8;

  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(a1);
  if (!LoopPredecessor)
    return 0;
  v2 = *(_QWORD *)(LoopPredecessor + 40);
  if (v2 == LoopPredecessor + 40)
    return 0;
  v3 = v2 ? v2 - 24 : 0;
  v4 = *(unsigned __int8 *)(v3 + 16);
  if ((v4 - 29) <= 0xA)
  {
    v5 = v4 - 33;
    if (v5 < 6 && ((0x3Bu >> v5) & 1) != 0)
      return 0;
  }
  if (*(_BYTE *)(v3 + 16) != 30)
  {
    v6 = 0;
    switch(*(_BYTE *)(v3 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
        return v6;
      case 0x1E:
        __break(1u);
        goto LABEL_18;
      case 0x1F:
        v8 = (*(_DWORD *)(v3 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
      case 0x26:
LABEL_18:
        v8 = (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x24:
        v8 = *(_WORD *)(v3 + 18) & 1;
        break;
      case 0x25:
        return LoopPredecessor;
      case 0x27:
        v8 = *(_DWORD *)(v3 + 80) + 1;
        break;
      default:
        return 0;
    }
    if (v8 != 1)
      return 0;
    return LoopPredecessor;
  }
  if ((*(_DWORD *)(v3 + 20) & 0x7FFFFFF) != 3)
    return LoopPredecessor;
  return 0;
}

{
  return __ZNK4llvm8LoopBaseINS_10BasicBlockENS_4LoopEE16getLoopPreheaderEv(a1);
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;

  v1 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 8);
  if (!v1)
    return 0;
  while (1)
  {
    v3 = *(_QWORD *)(v1 + 24);
    v4 = *(unsigned __int8 *)(v3 + 16);
    v5 = v3 && v4 >= 0x1C;
    if (v5 && v4 - 29 < 0xB)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      return 0;
  }
  v9 = 0;
LABEL_13:
  v7 = *(_QWORD *)(v3 + 40);
  v10 = sub_1C477672C(a1 + 56, v7);
  v11 = *(_QWORD *)(a1 + 64);
  if (v11 == *(_QWORD *)(a1 + 56))
    v12 = 76;
  else
    v12 = 72;
  if (v10 != (_QWORD *)(v11 + 8 * *(unsigned int *)(a1 + v12)))
  {
    v7 = v9;
    goto LABEL_20;
  }
  if (v9 && v9 != v7)
    return 0;
LABEL_20:
  while (1)
  {
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      return v7;
    v3 = *(_QWORD *)(v1 + 24);
    v13 = *(unsigned __int8 *)(v3 + 16);
    if (v3)
      v14 = v13 >= 0x1C;
    else
      v14 = 0;
    if (v14 && v13 - 29 < 0xB)
    {
      v9 = v7;
      goto LABEL_13;
    }
  }
}

{
  return __ZNK4llvm8LoopBaseINS_10BasicBlockENS_4LoopEE18getLoopPredecessorEv(a1);
}

_QWORD **llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatches(_QWORD **result, uint64_t a2)
{
  uint64_t v2;
  _QWORD **v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  BOOL v14;

  v2 = *(_QWORD *)(*result[4] + 8);
  if (v2)
  {
    v4 = result;
    while (1)
    {
      v5 = *(_QWORD *)(v2 + 24);
      v6 = *(unsigned __int8 *)(v5 + 16);
      v7 = v5 && v6 >= 0x1C;
      if (v7 && v6 - 29 < 0xB)
        break;
      v2 = *(_QWORD *)(v2 + 8);
      if (!v2)
        return result;
    }
LABEL_13:
    v9 = *(_QWORD *)(v5 + 40);
    result = (_QWORD **)sub_1C477672C((uint64_t)(v4 + 7), v9);
    v10 = v4[8];
    if (v10 == v4[7])
      v11 = 76;
    else
      v11 = 72;
    if (result != &v10[*(unsigned int *)((char *)v4 + v11)])
    {
      v12 = *(unsigned int *)(a2 + 8);
      if (v12 >= *(unsigned int *)(a2 + 12))
      {
        result = (_QWORD **)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v12 + 1, 8);
        v12 = *(unsigned int *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v12) = v9;
      ++*(_DWORD *)(a2 + 8);
    }
    while (1)
    {
      v2 = *(_QWORD *)(v2 + 8);
      if (!v2)
        break;
      v5 = *(_QWORD *)(v2 + 24);
      v13 = *(unsigned __int8 *)(v5 + 16);
      if (v5)
        v14 = v13 >= 0x1C;
      else
        v14 = 0;
      if (v14 && v13 - 29 < 0xB)
        goto LABEL_13;
    }
  }
  return result;
}

{
  return __ZNK4llvm8LoopBaseINS_10BasicBlockENS_4LoopEE14getLoopLatchesERNS_15SmallVectorImplIPS1_EE(result, a2);
}

void llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopsInPreorder(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[5];

  v10[4] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a2 + 16) = a1;
  v3 = a2 + 16;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x400000001;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v8 = v10;
  v9 = 0x400000000;
  sub_1C4EB6A24((unsigned int *)&v8, v4, v4, v5, v5);
  while ((_DWORD)v9)
  {
    v6 = *((_QWORD *)v8 + v9 - 1);
    LODWORD(v9) = v9 - 1;
    sub_1C4EB6A24((unsigned int *)&v8, *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 8));
    v7 = *(unsigned int *)(a2 + 8);
    if (v7 >= *(unsigned int *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v3, v7 + 1, 8);
      v7 = *(unsigned int *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = v6;
    ++*(_DWORD *)(a2 + 8);
  }
  if (v8 != v10)
    free(v8);
}

void llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopsInPreorder(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  a2[2] = a1;
  *a2 = a2 + 2;
  a2[1] = 0x400000001;
  sub_1C4EAF900(a1, (uint64_t)a2);
}

void sub_1C4EAF900(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  v7[4] = *MEMORY[0x1E0C80C00];
  v5 = v7;
  v6 = 0x400000000;
  sub_1C4EB6A24((unsigned int *)&v5, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8));
  while ((_DWORD)v6)
  {
    v3 = *((_QWORD *)v5 + v6 - 1);
    LODWORD(v6) = v6 - 1;
    sub_1C4EB6A24((unsigned int *)&v5, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 8));
    v4 = *(unsigned int *)(a2 + 8);
    if (v4 >= *(unsigned int *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v4 + 1, 8);
      v4 = *(unsigned int *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v4) = v3;
    ++*(_DWORD *)(a2 + 8);
  }
  if (v5 != v7)
    free(v5);
}

_QWORD *llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;

  v26 = a2;
  v4 = *(_DWORD *)(a3 + 16);
  if (v4)
  {
    v5 = v4 - 1;
    v6 = v5 & ((a2 >> 4) ^ (a2 >> 9));
    result = (_QWORD *)(*(_QWORD *)a3 + 16 * v6);
    v8 = *result;
    if (*result == a2)
      goto LABEL_16;
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = result;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      result = (_QWORD *)(*(_QWORD *)a3 + 16 * v6);
      v8 = *result;
      if (*result == a2)
        goto LABEL_16;
    }
    if (v9)
      v13 = v9;
    else
      v13 = result;
  }
  else
  {
    v13 = 0;
  }
  result = sub_1C4EB6AAC(a3, (uint64_t)&v26, &v26, v13);
  *result = v26;
  result[1] = 0;
LABEL_16:
  for (result[1] = a1; a1; a1 = (_QWORD *)*a1)
  {
    v14 = v26;
    v16 = (_QWORD *)a1[5];
    v15 = a1[6];
    if ((unint64_t)v16 >= v15)
    {
      v20 = (_QWORD *)a1[4];
      v21 = v16 - v20;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 61)
        abort();
      v23 = v15 - (_QWORD)v20;
      if (v23 >> 2 > v22)
        v22 = v23 >> 2;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      if (v24)
      {
        if (v24 >> 61)
          sub_1C4764EE4();
        v25 = (char *)operator new(8 * v24);
      }
      else
      {
        v25 = 0;
      }
      v19 = (uint64_t *)&v25[8 * v21];
      *v19 = v14;
      v17 = v19 + 1;
      if (v16 != v20)
      {
        do
        {
          v18 = *--v16;
          *--v19 = v18;
        }
        while (v16 != v20);
        v16 = (_QWORD *)a1[4];
      }
      a1[4] = v19;
      a1[5] = v17;
      a1[6] = &v25[8 * v24];
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v16 = v26;
      v17 = v16 + 1;
    }
    a1[5] = v17;
    result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 7), v14);
  }
  return result;
}

{
  return __ZN4llvm8LoopBaseINS_10BasicBlockENS_4LoopEE19addBasicBlockToLoopEPS1_RNS_12LoopInfoBaseIS1_S2_EE(a1, a2, a3);
}

_QWORD *llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBlockEntry(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;

  v5 = (uint64_t *)a1[5];
  v4 = a1[6];
  if ((unint64_t)v5 >= v4)
  {
    v8 = (_QWORD *)a1[4];
    v9 = v5 - v8;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v11 = v4 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_1C4764EE4();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = (uint64_t *)&v13[8 * v9];
    *v14 = a2;
    v6 = v14 + 1;
    if (v5 != v8)
    {
      do
      {
        v15 = *--v5;
        *--v14 = v15;
      }
      while (v5 != v8);
      v5 = (uint64_t *)a1[4];
    }
    a1[4] = v14;
    a1[5] = v6;
    a1[6] = &v13[8 * v12];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  a1[5] = v6;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 7), a2);
}

void llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addChildLoop(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  *a2 = a1;
  v5 = (_QWORD *)a1[2];
  v4 = a1[3];
  if ((unint64_t)v5 >= v4)
  {
    v7 = (_QWORD *)a1[1];
    v8 = v5 - v7;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_1C4764EE4();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = a2;
    v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        v14 = *--v5;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      v5 = (_QWORD *)a1[1];
    }
    a1[1] = v13;
    a1[2] = v6;
    a1[3] = &v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  a1[2] = v6;
}

_QWORD *llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::removeChildLoop(uint64_t a1, char *__dst)
{
  char *v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  int64_t v8;

  v6 = *(_QWORD **)__dst;
  v4 = __dst + 8;
  v5 = v6;
  v7 = *(char **)(a1 + 16);
  v8 = v7 - v4;
  if (v7 != v4)
    memmove(__dst, v4, v7 - v4);
  *(_QWORD *)(a1 + 16) = &__dst[v8];
  *v5 = 0;
  return v5;
}

_QWORD *llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::removeChildLoop(uint64_t a1, uint64_t a2)
{
  char *v3;
  _QWORD *v4;
  _QWORD *v5;
  int64_t v6;

  v4 = *(_QWORD **)(a1 + 8);
  v3 = *(char **)(a1 + 16);
  if (v4 != (_QWORD *)v3)
  {
    while (*v4 != a2)
    {
      if (++v4 == (_QWORD *)v3)
      {
        v4 = *(_QWORD **)(a1 + 16);
        break;
      }
    }
  }
  v5 = (_QWORD *)*v4;
  v6 = v3 - (char *)(v4 + 1);
  if (v3 != (char *)(v4 + 1))
    memmove(v4, v4 + 1, v3 - (char *)(v4 + 1));
  *(_QWORD *)(a1 + 16) = (char *)v4 + v6;
  *v5 = 0;
  return v5;
}

{
  return __ZN4llvm8LoopBaseINS_10BasicBlockENS_4LoopEE15removeChildLoopEPS2_(a1, a2);
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::reverseBlock(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(result + 32);
  v3 = *(_QWORD *)(result + 40);
  v4 = v2 + 8 * a2;
  v5 = (_QWORD *)(v3 - 8);
  v6 = v4 == v3 || v4 >= (unint64_t)v5;
  if (!v6)
  {
    v7 = v2 + 8 * a2 + 8;
    do
    {
      v8 = *(_QWORD *)(v7 - 8);
      *(_QWORD *)(v7 - 8) = *v5;
      *v5-- = v8;
      v6 = v7 >= (unint64_t)v5;
      v7 += 8;
    }
    while (!v6);
  }
  return result;
}

void llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::reserveBlocks(uint64_t a1, unsigned int a2)
{
  sub_1C4DB1D18(a1 + 32, a2);
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::moveToHeader(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  int v4;
  uint64_t v5;

  v2 = *(_QWORD **)(result + 32);
  if (*v2 != a2)
  {
    v3 = 0;
    do
    {
      v4 = v3;
      v5 = v2[v3++];
    }
    while (v5 != a2);
    v2[v4] = *v2;
    **(_QWORD **)(result + 32) = a2;
  }
  return result;
}

_QWORD *llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::removeBlockFromLoop(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  int64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;

  v5 = *(char **)(a1 + 32);
  v4 = *(char **)(a1 + 40);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 40);
        break;
      }
    }
  }
  v6 = v4 - (v5 + 8);
  if (v4 != v5 + 8)
    memmove(v5, v5 + 8, v4 - (v5 + 8));
  *(_QWORD *)(a1 + 40) = &v5[v6];
  result = sub_1C477672C(a1 + 56, a2);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = 72;
  if (v8 == *(_QWORD *)(a1 + 56))
    v9 = 76;
  if (result != (_QWORD *)(v8 + 8 * *(unsigned int *)(a1 + v9)))
  {
    *result = -2;
    ++*(_DWORD *)(a1 + 80);
  }
  return result;
}

{
  return __ZN4llvm8LoopBaseINS_10BasicBlockENS_4LoopEE19removeBlockFromLoopEPS1_(a1, a2);
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isAnnotatedParallel()
{
  return 0;
}

uint64_t llvm::Loop::isAnnotatedParallel(llvm::Loop *this)
{
  uint64_t LoopID;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *OptionMDForLoopID;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t ***v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t **v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  _QWORD *v26;
  _QWORD ***v27;
  _QWORD *v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  _QWORD *v40;
  _QWORD ***v41;
  _QWORD *v42;
  int v43;
  BOOL v44;
  unsigned int v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  uint64_t *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t ***v66;
  uint64_t ***v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  BOOL v72;
  int v73;
  char *v76;
  char *v77;
  uint64_t v78;
  int v79;
  _BYTE v80[32];
  uint64_t ***v81;

  LoopID = llvm::Loop::getLoopID(this);
  if (!LoopID)
    return 0;
  v3 = LoopID;
  v4 = llvm::Loop::getLoopID(this);
  OptionMDForLoopID = llvm::findOptionMDForLoopID(v4, "llvm.loop.parallel_accesses", 0x1BuLL);
  v76 = v80;
  v77 = v80;
  v78 = 4;
  v79 = 0;
  if (OptionMDForLoopID)
  {
    v6 = OptionMDForLoopID;
    v7 = *((unsigned int *)OptionMDForLoopID + 2);
    if (&OptionMDForLoopID[-8 * v7 + 8] != OptionMDForLoopID)
    {
      v8 = 8 - 8 * v7;
      do
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v76, *(_QWORD *)&v6[v8]);
        v8 += 8;
      }
      while (v8);
    }
  }
  v9 = *((_QWORD *)this + 4);
  v10 = *((_QWORD *)this + 5);
  if (v10 != v9)
  {
LABEL_7:
    v11 = *(_QWORD *)v9 + 40;
    for (i = *(_QWORD *)(*(_QWORD *)v9 + 48); ; i = *(_QWORD *)(i + 8))
    {
      if (i == v11)
      {
        v9 += 8;
        if (v9 != v10)
          goto LABEL_7;
        break;
      }
      if (i)
        v13 = (uint64_t ***)(i - 24);
      else
        v13 = 0;
      v14 = *((unsigned __int8 *)v13 + 16);
      v15 = (v14 - 33);
      if (v15 <= 0x37)
      {
        if (((1 << (v14 - 33)) & 0x8000000000041) != 0)
        {
          v17 = v13[8];
          if (!v17 || (*((_BYTE *)v17 + 20) & 4) == 0 && (*((_BYTE *)v17 + 17) & 0x10) == 0)
          {
            LODWORD(v81) = 7;
            if (sub_1C53E4BBC((uint64_t)v13, (__int32 *)&v81, 1uLL))
            {
              v65 = (uint64_t)*(v13 - 4);
              if (!v65 || *(_BYTE *)(v65 + 16) || *(uint64_t ***)(v65 + 24) != v13[9] || *(_DWORD *)(v65 + 36) != 7)
                goto LABEL_37;
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v13, 66) & 1) == 0
              && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v13, 44))
            {
              goto LABEL_37;
            }
          }
        }
        else
        {
          if (((1 << (v14 - 33)) & 0x808001C8000010) != 0)
            goto LABEL_37;
          if (v15 != 28)
            goto LABEL_16;
          if ((*((_WORD *)v13 + 9) & 0x301) != 0)
            goto LABEL_37;
        }
        v14 = *((unsigned __int8 *)v13 + 16);
      }
LABEL_16:
      v16 = (v14 - 33);
      if (v16 > 0x37)
        continue;
      if (((1 << v16) & 0x8000000000041) != 0)
      {
        v18 = v13[8];
        if (v18 && (*((_BYTE *)v18 + 17) & 0x30) != 0)
          continue;
        v19 = *((_DWORD *)v13 + 5);
        if (v19 < 0 && (v66 = &v13[-4 * (v19 & 0x7FFFFFF)], v69 = (uint64_t)*(v66 - 1), v67 = v66 - 1, (v68 = v69) != 0))
        {
          v70 = -v68;
          while (1)
          {
            v71 = (*(_DWORD **)((char *)v67 + v70))[2];
            v72 = v71 > 7;
            v73 = (1 << v71) & 0x83;
            if (v72 || v73 == 0)
              break;
            v70 += 16;
            if (!v70)
              goto LABEL_31;
          }
        }
        else
        {
LABEL_31:
          if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v13, 45) & 1) != 0
            || (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v13, 44) & 1) != 0)
          {
            continue;
          }
        }
      }
      else if (v16 == 27)
      {
        if ((*((_WORD *)v13 + 9) & 0x301) == 0)
          continue;
      }
      else if (((1 << v16) & 0x808001D0000010) == 0)
      {
        continue;
      }
LABEL_37:
      v20 = v13 >> 4;
      if ((*((_BYTE *)v13 + 23) & 0x20) == 0)
        goto LABEL_52;
      v21 = ***v13;
      v81 = v13;
      v22 = *(_DWORD *)(v21 + 2496);
      if (!v22)
      {
        v63 = 0;
LABEL_99:
        v26 = sub_1C541AB24(v21 + 2480, (uint64_t)&v81, (uint64_t *)&v81, v63);
        v64 = (uint64_t)v81;
        v26[4] = 0;
        v26[3] = 0;
        *v26 = v64;
        v26[1] = v26 + 3;
        v26[2] = 0x100000000;
        goto LABEL_48;
      }
      v23 = *(_QWORD *)(v21 + 2480);
      v24 = v22 - 1;
      v25 = v24 & (v20 ^ (v13 >> 9));
      v26 = (_QWORD *)(v23 + 40 * v25);
      v27 = (_QWORD ***)*v26;
      if ((uint64_t ***)*v26 != v13)
      {
        v28 = 0;
        v29 = 1;
        while (v27 != (_QWORD ***)-4096)
        {
          if (v28)
            v30 = 0;
          else
            v30 = v27 == (_QWORD ***)-8192;
          if (v30)
            v28 = v26;
          v31 = v25 + v29++;
          v25 = v31 & v24;
          v26 = (_QWORD *)(v23 + 40 * v25);
          v27 = (_QWORD ***)*v26;
          if ((uint64_t ***)*v26 == v13)
            goto LABEL_48;
        }
        if (v28)
          v63 = v28;
        else
          v63 = v26;
        goto LABEL_99;
      }
LABEL_48:
      v32 = *((unsigned int *)v26 + 4);
      if ((_DWORD)v32)
      {
        v33 = (uint64_t *)(v26[1] + 8);
        v34 = 16 * v32;
        while (*((_DWORD *)v33 - 2) != 25)
        {
          v33 += 2;
          v34 -= 16;
          if (!v34)
            goto LABEL_52;
        }
        v54 = *v33;
        if (*v33)
        {
          v55 = *(unsigned int *)(v54 + 8);
          if ((_DWORD)v55)
          {
            v56 = -8 * v55;
            while (1)
            {
              v57 = (char *)sub_1C477672C((uint64_t)&v76, *(_QWORD *)(v54 + v56));
              v58 = v77 == v76 ? (uint64_t *)((char *)&v78 + 4) : &v78;
              if (v57 != &v77[8 * *(unsigned int *)v58])
                break;
              v56 += 8;
              if (!v56)
                goto LABEL_52;
            }
            continue;
          }
          v61 = (char *)sub_1C477672C((uint64_t)&v76, v54);
          if (v77 == v76)
            v62 = (uint64_t *)((char *)&v78 + 4);
          else
            v62 = &v78;
          if (v61 != &v77[8 * *(unsigned int *)v62])
            continue;
        }
      }
LABEL_52:
      if ((*((_BYTE *)v13 + 23) & 0x20) == 0)
        goto LABEL_118;
      v35 = ***v13;
      v81 = v13;
      v36 = *(_DWORD *)(v35 + 2496);
      if (!v36)
      {
        v59 = 0;
LABEL_90:
        v40 = sub_1C541AB24(v35 + 2480, (uint64_t)&v81, (uint64_t *)&v81, v59);
        v60 = (uint64_t)v81;
        v40[4] = 0;
        v40[3] = 0;
        *v40 = v60;
        v40[1] = v40 + 3;
        v40[2] = 0x100000000;
        goto LABEL_63;
      }
      v37 = *(_QWORD *)(v35 + 2480);
      v38 = v36 - 1;
      v39 = v38 & (v20 ^ (v13 >> 9));
      v40 = (_QWORD *)(v37 + 40 * v39);
      v41 = (_QWORD ***)*v40;
      if ((uint64_t ***)*v40 != v13)
      {
        v42 = 0;
        v43 = 1;
        while (v41 != (_QWORD ***)-4096)
        {
          if (v42)
            v44 = 0;
          else
            v44 = v41 == (_QWORD ***)-8192;
          if (v44)
            v42 = v40;
          v45 = v39 + v43++;
          v39 = v45 & v38;
          v40 = (_QWORD *)(v37 + 40 * v39);
          v41 = (_QWORD ***)*v40;
          if ((uint64_t ***)*v40 == v13)
            goto LABEL_63;
        }
        if (v42)
          v59 = v42;
        else
          v59 = v40;
        goto LABEL_90;
      }
LABEL_63:
      v46 = *((unsigned int *)v40 + 4);
      if ((_DWORD)v46)
      {
        v47 = (_QWORD *)(v40[1] + 8);
        v48 = 16 * v46;
        while (*((_DWORD *)v47 - 2) != 10)
        {
          v49 = 0;
          v47 += 2;
          v48 -= 16;
          if (!v48)
            goto LABEL_119;
        }
        v50 = *v47;
        if (v50)
        {
          v51 = *(unsigned int *)(v50 + 8);
          if ((_DWORD)v51)
          {
            v52 = -8 * v51;
            while (*(_QWORD *)(v50 + v52) != v3)
            {
              v52 += 8;
              if (!v52)
              {
                v53 = v50;
                goto LABEL_85;
              }
            }
            v53 = v50 + v52;
          }
          else
          {
            v53 = v50 - 8 * v51;
          }
LABEL_85:
          if (v53 != v50)
            continue;
        }
      }
LABEL_118:
      v49 = 0;
      goto LABEL_119;
    }
  }
  v49 = 1;
LABEL_119:
  if (v77 != v76)
    free(v77);
  return v49;
}

double llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::LoopBase(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 88;
  *(_QWORD *)(a1 + 64) = a1 + 88;
  *(_QWORD *)&result = 8;
  *(_QWORD *)(a1 + 72) = 8;
  *(_DWORD *)(a1 + 80) = 0;
  return result;
}

{
  double result;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 88;
  *(_QWORD *)(a1 + 64) = a1 + 88;
  *(_QWORD *)&result = 8;
  *(_QWORD *)(a1 + 72) = 8;
  *(_DWORD *)(a1 + 80) = 0;
  return result;
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::LoopBase(uint64_t a1, uint64_t a2)
{
  llvm::SmallPtrSetImplBase *v4;
  uint64_t *v5;

  *(_QWORD *)(a1 + 56) = a1 + 88;
  v4 = (llvm::SmallPtrSetImplBase *)(a1 + 56);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 64) = a1 + 88;
  *(_QWORD *)(a1 + 72) = 8;
  *(_DWORD *)(a1 + 80) = 0;
  v5 = (uint64_t *)operator new(8uLL);
  *(_QWORD *)(a1 + 32) = v5;
  *v5++ = a2;
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v5;
  sub_1C4774094(v4, a2);
  return a1;
}

{
  llvm::SmallPtrSetImplBase *v4;
  uint64_t *v5;

  *(_QWORD *)(a1 + 56) = a1 + 88;
  v4 = (llvm::SmallPtrSetImplBase *)(a1 + 56);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 64) = a1 + 88;
  *(_QWORD *)(a1 + 72) = 8;
  *(_DWORD *)(a1 + 80) = 0;
  v5 = (uint64_t *)operator new(8uLL);
  *(_QWORD *)(a1 + 32) = v5;
  *v5++ = a2;
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v5;
  sub_1C4774094(v4, a2);
  return a1;
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::~LoopBase(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  int v13;
  unsigned int v14;
  void *v15;

  v2 = *(uint64_t **)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v9 = *v2++;
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::~LoopBase(v9);
    }
    while (v2 != v3);
    v2 = *(uint64_t **)(a1 + 8);
  }
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(a1 + 64);
  if (v4 == *(void **)(a1 + 56))
    goto LABEL_3;
  v10 = *(unsigned int *)(a1 + 72);
  if (v10 < 0x21 || 4 * (*(_DWORD *)(a1 + 76) - *(_DWORD *)(a1 + 80)) >= v10)
  {
    memset(v4, 255, 8 * v10);
LABEL_3:
    *(_DWORD *)(a1 + 76) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    goto LABEL_4;
  }
  free(v4);
  v12 = *(_DWORD *)(a1 + 76) - *(_DWORD *)(a1 + 80);
  v13 = 1 << (33 - __clz(v12 - 1));
  *(_DWORD *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  if (v12 <= 0x10)
    v14 = 32;
  else
    v14 = v13;
  *(_DWORD *)(a1 + 72) = v14;
  v15 = malloc_type_malloc(8 * v14, 0x4065EBACuLL);
  if (!v15)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *(_QWORD *)(a1 + 64) = v15;
  memset(v15, 255, 8 * *(unsigned int *)(a1 + 72));
LABEL_4:
  *(_QWORD *)a1 = 0;
  v5 = *(void **)(a1 + 64);
  if (v5 != *(void **)(a1 + 56))
    free(v5);
  v6 = *(void **)(a1 + 32);
  if (v6)
  {
    *(_QWORD *)(a1 + 40) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 8);
  if (v7)
  {
    *(_QWORD *)(a1 + 16) = v7;
    operator delete(v7);
  }
  return a1;
}

{
  return __ZN4llvm8LoopBaseINS_10BasicBlockENS_4LoopEED2Ev(a1);
}

_QWORD *llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase(_QWORD *a1)
{
  int v2;
  uint64_t *v3;
  uint64_t *v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = *((_DWORD *)a1 + 2);
  if (v2 || *((_DWORD *)a1 + 3))
  {
    v8 = *((unsigned int *)a1 + 4);
    if (v8 <= 4 * v2 || v8 < 0x41)
    {
      if ((_DWORD)v8)
      {
        v9 = (_QWORD *)*a1;
        v10 = 16 * v8;
        do
        {
          *v9 = -4096;
          v9 += 2;
          v10 -= 16;
        }
        while (v10);
      }
      a1[1] = 0;
    }
    else
    {
      sub_1C476B2A4(a1);
    }
  }
  v3 = (uint64_t *)a1[3];
  v4 = (uint64_t *)a1[4];
  if (v3 != v4)
  {
    do
    {
      v7 = *v3++;
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::~LoopBase(v7);
    }
    while (v3 != v4);
    v3 = (uint64_t *)a1[3];
  }
  a1[4] = v3;
  sub_1C4926A50((uint64_t)(a1 + 6));
  sub_1C4926AE8((uint64_t)(a1 + 6));
  v5 = (void *)a1[3];
  if (v5)
  {
    a1[4] = v5;
    operator delete(v5);
  }
  MEMORY[0x1CAA32FB4](*a1, 8);
  return a1;
}

{
  return __ZN4llvm12LoopInfoBaseINS_10BasicBlockENS_4LoopEED2Ev(a1);
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::releaseMemory(uint64_t a1)
{
  int v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 || *(_DWORD *)(a1 + 12))
  {
    v7 = *(unsigned int *)(a1 + 16);
    if (v7 <= 4 * v2 || v7 < 0x41)
    {
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD **)a1;
        v9 = 16 * v7;
        do
        {
          *v8 = -4096;
          v8 += 2;
          v9 -= 16;
        }
        while (v9);
      }
      *(_QWORD *)(a1 + 8) = 0;
    }
    else
    {
      sub_1C476B2A4((_DWORD *)a1);
    }
  }
  v3 = *(uint64_t **)(a1 + 24);
  v4 = *(uint64_t **)(a1 + 32);
  if (v3 != v4)
  {
    do
    {
      v6 = *v3++;
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::~LoopBase(v6);
    }
    while (v3 != v4);
    v3 = *(uint64_t **)(a1 + 24);
  }
  *(_QWORD *)(a1 + 32) = v3;
  return sub_1C4926A50(a1 + 48);
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::LoopInfoBase(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v4 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v4;
  v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  sub_1C4E854AC(a1 + 48, a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a2 + 24);
  return a1;
}

{
  return __ZN4llvm12LoopInfoBaseINS_10BasicBlockENS_4LoopEEC2EOS3_(a1, a2);
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t **v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;

  MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v5 = (uint64_t **)(a1 + 24);
  v4 = *(uint64_t **)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v6;
  v7 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v7;
  v8 = *(uint64_t **)(a1 + 32);
  if (v4 != v8)
  {
    do
    {
      v9 = *v4++;
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::~LoopBase(v9);
    }
    while (v4 != v8);
    v4 = *v5;
  }
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v4);
    *v5 = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  sub_1C4E85668(a1 + 48, a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::begin(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::end(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::rbegin(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::rend(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

BOOL llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::empty(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 32);
}

void llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::getLoopsInPreorder(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *__src;
  uint64_t v7;
  _QWORD v8[4];
  void *v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x400000000;
  v9 = v11;
  v10 = 0x400000000;
  v4 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 != v4)
  {
    do
    {
      v5 = *(_QWORD *)(v3 - 8);
      v3 -= 8;
      __src = v8;
      v8[0] = v5;
      v7 = 0x400000001;
      sub_1C4EAF900(v5, (uint64_t)&__src);
      sub_1C486AF08((unsigned int *)a2, __src, (_BYTE *)__src + 8 * v7);
      if (__src != v8)
        free(__src);
    }
    while (v3 != v4);
    if (v9 != v11)
      free(v9);
  }
}

{
  __ZNK4llvm12LoopInfoBaseINS_10BasicBlockENS_4LoopEE18getLoopsInPreorderEv(a1, a2);
}

void llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::getLoopsInReverseSiblingPreorder(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x1E0C80C00];
  v3 = a2 + 16;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x400000000;
  v11 = v13;
  v12 = 0x400000000;
  v4 = *(uint64_t **)(a1 + 24);
  v5 = *(uint64_t **)(a1 + 32);
  if (v4 != v5)
  {
    do
    {
      v6 = *v4;
      if (HIDWORD(v12))
      {
        v7 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v11, (uint64_t)v13, 1uLL, 8);
        v7 = v12;
      }
      *((_QWORD *)v11 + v7) = v6;
      v8 = v12 + 1;
      do
      {
        v9 = *((_QWORD *)v11 + v8 - 1);
        LODWORD(v12) = v8 - 1;
        sub_1C499C3FC((unsigned int *)&v11, *(char **)(v9 + 8), *(char **)(v9 + 16));
        v10 = *(unsigned int *)(a2 + 8);
        if (v10 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v3, v10 + 1, 8);
          v10 = *(unsigned int *)(a2 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v10) = v9;
        ++*(_DWORD *)(a2 + 8);
        v8 = v12;
      }
      while ((_DWORD)v12);
      ++v4;
    }
    while (v4 != v5);
    if (v11 != v13)
      free(v11);
  }
}

{
  __ZNK4llvm12LoopInfoBaseINS_10BasicBlockENS_4LoopEE32getLoopsInReverseSiblingPreorderEv(a1, a2);
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::getLoopFor(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *((_DWORD *)a1 + 4);
  if (v2)
  {
    v3 = *a1;
    v4 = v2 - 1;
    v5 = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = *(_QWORD *)(*a1 + 16 * v5);
    if (v6 == a2)
      return *(_QWORD *)(v3 + 16 * v5 + 8);
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v5 + v7++;
      v5 = v8 & v4;
      v6 = *(_QWORD *)(v3 + 16 * v5);
      if (v6 == a2)
        return *(_QWORD *)(v3 + 16 * v5 + 8);
    }
  }
  return 0;
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::operator[](uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *((_DWORD *)a1 + 4);
  if (v2)
  {
    v3 = *a1;
    v4 = v2 - 1;
    v5 = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = *(_QWORD *)(*a1 + 16 * v5);
    if (v6 == a2)
      return *(_QWORD *)(v3 + 16 * v5 + 8);
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v5 + v7++;
      v5 = v8 & v4;
      v6 = *(_QWORD *)(v3 + 16 * v5);
      if (v6 == a2)
        return *(_QWORD *)(v3 + 16 * v5 + 8);
    }
  }
  return 0;
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::getLoopDepth(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  _QWORD *v9;
  uint64_t result;

  v2 = *((_DWORD *)a1 + 4);
  if (!v2)
    return 0;
  v3 = *a1;
  v4 = v2 - 1;
  v5 = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v6 = *(_QWORD *)(*a1 + 16 * v5);
  if (v6 != a2)
  {
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v5 + v7++;
      v5 = v8 & v4;
      v6 = *(_QWORD *)(v3 + 16 * v5);
      if (v6 == a2)
        goto LABEL_6;
    }
    return 0;
  }
LABEL_6:
  v9 = *(_QWORD **)(v3 + 16 * v5 + 8);
  if (!v9)
    return 0;
  LODWORD(result) = 0;
  do
  {
    v9 = (_QWORD *)*v9;
    result = (result + 1);
  }
  while (v9);
  return result;
}

BOOL llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::isLoopHeader(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  v2 = *((_DWORD *)a1 + 4);
  if (v2)
  {
    v3 = *a1;
    v4 = v2 - 1;
    v5 = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = *(_QWORD *)(*a1 + 16 * v5);
    if (v6 == a2)
    {
LABEL_6:
      v9 = *(_QWORD *)(v3 + 16 * v5 + 8);
      if (v9)
        return **(_QWORD **)(v9 + 32) == a2;
    }
    else
    {
      v7 = 1;
      while (v6 != -4096)
      {
        v8 = v5 + v7++;
        v5 = v8 & v4;
        v6 = *(_QWORD *)(v3 + 16 * v5);
        if (v6 == a2)
          goto LABEL_6;
      }
    }
  }
  return 0;
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::getTopLevelLoops(uint64_t a1)
{
  return a1 + 24;
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::getTopLevelLoopsVector(uint64_t a1)
{
  return a1 + 24;
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::removeLoop(uint64_t a1, char *__dst)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;

  v6 = *(_QWORD *)__dst;
  v4 = __dst + 8;
  v5 = v6;
  v7 = *(char **)(a1 + 32);
  v8 = v7 - v4;
  if (v7 != v4)
    memmove(__dst, v4, v7 - v4);
  *(_QWORD *)(a1 + 32) = &__dst[v8];
  return v5;
}

int32x2_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::changeLoopFor(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  __int32 v4;
  __int32 v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  _QWORD *v13;
  int32x2_t result;
  uint64_t v16;
  _QWORD *v17;

  v16 = a2;
  if (a3)
  {
    v4 = a1[2].i32[0];
    if (v4)
    {
      v5 = v4 - 1;
      v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * v6);
      v8 = *v7;
      if (*v7 == a2)
      {
LABEL_17:
        v7[1] = a3;
        return result;
      }
      v9 = 0;
      v10 = 1;
      while (v8 != -4096)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v8 == -8192;
        if (v11)
          v9 = v7;
        v12 = v6 + v10++;
        v6 = v12 & v5;
        v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v12 & v5));
        v8 = *v7;
        if (*v7 == a2)
          goto LABEL_17;
      }
      if (v9)
        v13 = v9;
      else
        v13 = v7;
    }
    else
    {
      v13 = 0;
    }
    v7 = sub_1C4EB6AAC((uint64_t)a1, (uint64_t)&v16, &v16, v13);
    *v7 = v16;
    v7[1] = 0;
    goto LABEL_17;
  }
  v17 = 0;
  if (sub_1C4926528((uint64_t)a1, &v16, &v17))
  {
    *v17 = -8192;
    result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
    a1[1] = result;
  }
  return result;
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::changeTopLevelLoop(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v3 = *(_QWORD **)(result + 24);
  v4 = *(_QWORD **)(result + 32);
  if (v3 != v4)
  {
    while (*v3 != a2)
    {
      if (++v3 == v4)
      {
        v3 = *(_QWORD **)(result + 32);
        break;
      }
    }
  }
  *v3 = a3;
  return result;
}

void llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::addTopLevelLoop(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = (_QWORD *)a1[4];
  v4 = a1[5];
  if ((unint64_t)v5 >= v4)
  {
    v7 = (_QWORD *)a1[3];
    v8 = v5 - v7;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_1C4764EE4();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = a2;
    v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        v14 = *--v5;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      v5 = (_QWORD *)a1[3];
    }
    a1[3] = v13;
    a1[4] = v6;
    a1[5] = &v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  a1[4] = v6;
}

int32x2_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::removeBlock(int32x2_t *a1, uint64_t a2)
{
  int32x2_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  _QWORD *i;
  int32x2_t result;

  v4 = *a1;
  v5 = a1[2].u32[0];
  if ((_DWORD)v5)
  {
    LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v7 = (uint64_t *)(*(_QWORD *)&v4 + 16 * v6);
    v8 = *v7;
    if (*v7 == a2)
      goto LABEL_8;
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v8 = *(_QWORD *)(*(_QWORD *)&v4 + 16 * v6);
      if (v8 == a2)
      {
        v7 = (uint64_t *)(*(_QWORD *)&v4 + 16 * v6);
        goto LABEL_8;
      }
    }
  }
  v7 = (uint64_t *)(*(_QWORD *)&v4 + 16 * v5);
LABEL_8:
  if (v7 != (uint64_t *)(*(_QWORD *)&v4 + 16 * v5))
  {
    for (i = (_QWORD *)v7[1]; i; i = (_QWORD *)*i)
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::removeBlockFromLoop((uint64_t)i, a2);
    *v7 = -8192;
    result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
    a1[1] = result;
  }
  return result;
}

{
  return __ZN4llvm12LoopInfoBaseINS_10BasicBlockENS_4LoopEE11removeBlockEPS1_(a1, a2);
}

BOOL llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::isNotAlreadyContainedIn(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  _BOOL8 result;

  if (!a1)
    return 1;
  v2 = a1;
  do
  {
    result = v2 != a2;
    if (v2 == a2)
      break;
    v2 = (_QWORD *)*v2;
  }
  while (v2);
  return result;
}

void llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  _BYTE *v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  _DWORD *v11;
  const void *v12;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  void **v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  unint64_t v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  char *v37;
  unsigned int v38;
  unsigned int v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  BOOL v56;
  int v58;
  int v59;
  unsigned int v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  int v64;
  BOOL v65;
  unsigned int v66;
  _QWORD *v67;
  uint64_t i;
  uint64_t v69;
  unsigned int v70;
  BOOL v71;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  unint64_t *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unsigned int v89;
  BOOL v90;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  void **v98;
  _QWORD *v99;
  unsigned int v100;
  void *__p;
  char *v102;
  char *v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  void *v113;
  int v114;
  uint64_t v115;
  void *v116;
  void *v117;
  unsigned int v118;
  unsigned int v119;
  int v120;
  void *v121;
  int v122;
  uint64_t v123;
  _DWORD *v124;
  void *v125;
  uint64_t v126;
  _DWORD v127[16];
  uint64_t v128;
  void *v129[18];
  _BYTE *v130;
  void *v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  _BYTE v135[64];
  void *v136;
  uint64_t v137;
  _QWORD v138[18];

  v2 = a2;
  v138[16] = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(a2 + 48);
  sub_1C4EB6E94((uint64_t)&v130, (uint64_t)v4);
  v128 = 0;
  memset(&v129[1], 0, 136);
  memset(v127, 0, sizeof(v127));
  v124 = &v127[2];
  v125 = &v127[2];
  v126 = 8;
  v129[0] = &v129[2];
  HIDWORD(v129[1]) = 8;
  sub_1C4EB6BDC((uint64_t)&v130, (uint64_t)&v124, (uint64_t)&v108);
  if (v129[0] != &v129[2])
    free(v129[0]);
  if (v125 != v124)
    free(v125);
  if (v136 != v138)
    free(v136);
  if (v131 != v130)
    free(v131);
  v5 = v135;
  v130 = v135;
  v6 = v109;
  if (v109 == v108)
  {
    v131 = v135;
    v7 = v109;
  }
  else
  {
    v92 = v110;
    v5 = malloc_type_malloc(8 * v110, 0x4065EBACuLL);
    if (!v5)
    {
      if (v92)
        goto LABEL_188;
      v5 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v5)
        goto LABEL_188;
    }
    v131 = v5;
    v7 = v108;
    v6 = v109;
  }
  v8 = v111;
  v132 = v110;
  if (v6 == v7)
    v9 = v111;
  else
    v9 = v110;
  if (v9)
  {
    memmove(v5, v6, 8 * v9);
    v8 = v111;
  }
  v133 = v8;
  v134 = v112;
  v10 = v138;
  v136 = v138;
  v137 = 0x800000000;
  if (v114)
    sub_1C49DA288((uint64_t)&v136, (uint64_t)&v113);
  v11 = &v127[2];
  v124 = &v127[2];
  v12 = v117;
  if (v117 != v116)
  {
    v93 = v118;
    v11 = malloc_type_malloc(8 * v118, 0x4065EBACuLL);
    if (v11 || !v93 && (v11 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v125 = v11;
      v13 = v116;
      v12 = v117;
      goto LABEL_20;
    }
LABEL_188:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v125 = &v127[2];
  v13 = v117;
LABEL_20:
  LODWORD(v126) = v118;
  v14 = v119;
  if (v12 == v13)
    v15 = v119;
  else
    v15 = v118;
  if (v15)
  {
    memmove(v11, v12, 8 * v15);
    v14 = v119;
  }
  HIDWORD(v126) = v14;
  v127[0] = v120;
  v16 = &v129[2];
  v129[0] = &v129[2];
  v129[1] = (void *)0x800000000;
  if (v122)
    sub_1C49DA288((uint64_t)v129, (uint64_t)&v121);
  v17 = &v107;
  v18 = a1 + 48;
  while (1)
  {
    if ((_DWORD)v137 != LODWORD(v129[1]))
      goto LABEL_38;
    if (!(_DWORD)v137)
      break;
    v19 = v129[0];
    v20 = v136;
    while (*v20 == *v19 && v20[1] == v19[1])
    {
      v20 += 2;
      v19 += 2;
      if (v20 == (_QWORD *)((char *)v136 + 16 * v137))
        goto LABEL_160;
    }
LABEL_38:
    v22 = **((_QWORD **)v136 + 2 * v137 - 2);
    v105 = v17;
    v106 = 0x400000000;
    v23 = *(_QWORD *)(v22 + 8);
    if (v23)
    {
      while (1)
      {
        v24 = *(_QWORD *)(v23 + 24);
        v25 = *(unsigned __int8 *)(v24 + 16);
        v26 = v24 && v25 >= 0x1C;
        if (v26 && v25 - 29 <= 0xA)
          break;
        v23 = *(_QWORD *)(v23 + 8);
        if (!v23)
          goto LABEL_156;
      }
LABEL_49:
      v28 = *(_QWORD *)(v24 + 40);
      if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v2, v22, v28)
        && llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(v2, v28))
      {
        v29 = v106;
        if (v106 >= (unint64_t)HIDWORD(v106))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v105, (uint64_t)v17, v106 + 1, 8);
          v29 = v106;
        }
        *((_QWORD *)v105 + v29) = v28;
        LODWORD(v106) = v106 + 1;
      }
      while (1)
      {
        v23 = *(_QWORD *)(v23 + 8);
        if (!v23)
          break;
        v24 = *(_QWORD *)(v23 + 24);
        v30 = *(unsigned __int8 *)(v24 + 16);
        if (v24)
          v31 = v30 >= 0x1C;
        else
          v31 = 0;
        if (v31 && v30 - 29 < 0xB)
          goto LABEL_49;
      }
      if ((_DWORD)v106)
      {
        v97 = v17;
        v98 = v16;
        v99 = v10;
        v96 = v18;
        v33 = sub_1C484358C(v18, 152, 3);
        *(_OWORD *)v33 = 0u;
        *(_OWORD *)(v33 + 16) = 0u;
        *(_QWORD *)(v33 + 56) = v33 + 88;
        *(_QWORD *)(v33 + 64) = v33 + 88;
        *(_QWORD *)(v33 + 72) = 8;
        *(_DWORD *)(v33 + 80) = 0;
        v34 = operator new(8uLL);
        *v34 = v22;
        *(_QWORD *)(v33 + 32) = v34;
        *(_QWORD *)(v33 + 40) = v34 + 1;
        *(_QWORD *)(v33 + 48) = v34 + 1;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)(v33 + 56), v22);
        v35 = v105;
        v36 = v106;
        __p = 0;
        v102 = 0;
        v103 = 0;
        if ((_DWORD)v106)
        {
          __p = operator new(8 * v106);
          v102 = (char *)__p;
          v37 = (char *)__p + 8 * v36;
          v103 = v37;
          memmove(__p, v35, 8 * v36);
          v38 = 0;
          v39 = 0;
          v102 = v37;
          v94 = v2;
          v95 = v4;
          while (1)
          {
            v42 = *((_QWORD *)v37 - 1);
            v40 = v37 - 8;
            v41 = v42;
            v102 = v40;
            v43 = *(_DWORD *)(a1 + 16);
            v44 = v42 >> 4;
            if (v43)
            {
              v45 = *(_QWORD *)a1;
              v46 = (v43 - 1) & (v44 ^ (v41 >> 9));
              v47 = *(_QWORD *)(*(_QWORD *)a1 + 16 * v46);
              if (v41 == v47)
              {
LABEL_71:
                v50 = *(unint64_t **)(v45 + 16 * v46 + 8);
                if (v50)
                {
                  do
                  {
                    v51 = v50;
                    v50 = (unint64_t *)*v50;
                  }
                  while (v50);
                  if (v51 != (unint64_t *)v33)
                  {
                    *v51 = v33;
                    ++v39;
                    v52 = v51[4];
                    v38 += (v51[6] - v52) >> 3;
                    v53 = *(_QWORD *)(*(_QWORD *)v52 + 8);
                    if (v53)
                    {
                      while (1)
                      {
                        v54 = *(_QWORD *)(v53 + 24);
                        v55 = *(unsigned __int8 *)(v54 + 16);
                        v56 = v54 && v55 >= 0x1C;
                        if (v56 && v55 - 29 <= 0xA)
                          break;
                        v53 = *(_QWORD *)(v53 + 8);
                        if (!v53)
                          goto LABEL_113;
                      }
                      v100 = v39;
LABEL_115:
                      v73 = *(_QWORD *)(v54 + 40);
                      if (v43)
                      {
                        v74 = v43 - 1;
                        v75 = ((v73 >> 4) ^ (v73 >> 9)) & (v43 - 1);
                        v76 = *(_QWORD *)(v45 + 16 * v75);
                        if (v73 != v76)
                        {
                          v77 = 1;
                          while (v76 != -4096)
                          {
                            v78 = v75 + v77++;
                            v75 = v78 & v74;
                            v76 = *(_QWORD *)(v45 + 16 * v75);
                            if (v73 == v76)
                              goto LABEL_120;
                          }
                          goto LABEL_121;
                        }
LABEL_120:
                        v79 = *(unint64_t **)(v45 + 16 * v75 + 8);
                      }
                      else
                      {
LABEL_121:
                        v79 = 0;
                      }
                      if (v79 != v51)
                      {
                        if (v40 >= v103)
                        {
                          v81 = (char *)__p;
                          v82 = (v40 - (_BYTE *)__p) >> 3;
                          v83 = v82 + 1;
                          if ((unint64_t)(v82 + 1) >> 61)
                            abort();
                          v84 = v103 - (_BYTE *)__p;
                          if ((v103 - (_BYTE *)__p) >> 2 > v83)
                            v83 = v84 >> 2;
                          if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
                            v85 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v85 = v83;
                          if (v85)
                          {
                            if (v85 >> 61)
                              sub_1C4764EE4();
                            v86 = (char *)operator new(8 * v85);
                          }
                          else
                          {
                            v86 = 0;
                          }
                          v87 = &v86[8 * v82];
                          *(_QWORD *)v87 = v73;
                          v80 = v87 + 8;
                          if (v40 != v81)
                          {
                            do
                            {
                              v88 = *((_QWORD *)v40 - 1);
                              v40 -= 8;
                              *((_QWORD *)v87 - 1) = v88;
                              v87 -= 8;
                            }
                            while (v40 != v81);
                            v40 = (char *)__p;
                          }
                          __p = v87;
                          v102 = v80;
                          v103 = &v86[8 * v85];
                          if (v40)
                            operator delete(v40);
                          v2 = v94;
                          v4 = v95;
                        }
                        else
                        {
                          *(_QWORD *)v40 = v73;
                          v80 = v40 + 8;
                        }
                        v102 = v80;
                        v40 = v80;
                        v39 = v100;
                      }
                      while (1)
                      {
                        v53 = *(_QWORD *)(v53 + 8);
                        if (!v53)
                          goto LABEL_113;
                        v54 = *(_QWORD *)(v53 + 24);
                        v89 = *(unsigned __int8 *)(v54 + 16);
                        if (v54)
                          v90 = v89 >= 0x1C;
                        else
                          v90 = 0;
                        if (v90 && v89 - 29 <= 0xA)
                        {
                          v45 = *(_QWORD *)a1;
                          v43 = *(_DWORD *)(a1 + 16);
                          goto LABEL_115;
                        }
                      }
                    }
                  }
                  goto LABEL_113;
                }
              }
              else
              {
                v48 = 1;
                while (v47 != -4096)
                {
                  v49 = v46 + v48++;
                  v46 = v49 & (v43 - 1);
                  v47 = *(_QWORD *)(v45 + 16 * v46);
                  if (v41 == v47)
                    goto LABEL_71;
                }
              }
            }
            if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(v2, v41))
            {
              v104 = v41;
              v58 = *(_DWORD *)(a1 + 16);
              if (v58)
              {
                v59 = v58 - 1;
                v60 = v59 & (v44 ^ (v41 >> 9));
                v61 = (_QWORD *)(*(_QWORD *)a1 + 16 * v60);
                v62 = *v61;
                if (*v61 != v41)
                {
                  v63 = 0;
                  v64 = 1;
                  while (v62 != -4096)
                  {
                    if (v63)
                      v65 = 0;
                    else
                      v65 = v62 == -8192;
                    if (v65)
                      v63 = v61;
                    v66 = v60 + v64++;
                    v60 = v66 & v59;
                    v61 = (_QWORD *)(*(_QWORD *)a1 + 16 * v60);
                    v62 = *v61;
                    if (*v61 == v41)
                      goto LABEL_101;
                  }
                  if (v63)
                    v67 = v63;
                  else
                    v67 = v61;
LABEL_100:
                  v61 = sub_1C4EB6AAC(a1, (uint64_t)&v104, &v104, v67);
                  *v61 = v104;
                  v61[1] = 0;
                }
LABEL_101:
                v61[1] = v33;
                ++v38;
                if (v41 != **(_QWORD **)(v33 + 32))
                {
                  for (i = *(_QWORD *)(v41 + 8); i; i = *(_QWORD *)(i + 8))
                  {
                    v69 = *(_QWORD *)(i + 24);
                    v70 = *(unsigned __int8 *)(v69 + 16);
                    if (v69)
                      v71 = v70 >= 0x1C;
                    else
                      v71 = 0;
                    if (v71 && v70 - 29 < 0xB)
                      break;
                  }
                  sub_1C4EB7034((char **)&__p, (uint64_t)v102, i, 0);
                }
                goto LABEL_113;
              }
              v67 = 0;
              goto LABEL_100;
            }
LABEL_113:
            v37 = v102;
            if (__p == v102)
              goto LABEL_153;
          }
        }
        v39 = 0;
        v38 = 0;
LABEL_153:
        sub_1C4DB1D18(v33 + 8, v39);
        sub_1C4DB1D18(v33 + 32, v38);
        v16 = v98;
        v10 = v99;
        v17 = v97;
        if (__p)
        {
          v102 = (char *)__p;
          operator delete(__p);
        }
        v18 = v96;
      }
    }
LABEL_156:
    if (v105 != v17)
      free(v105);
    LODWORD(v137) = v137 - 1;
    if ((_DWORD)v137)
      sub_1C4EB6F48(&v130);
  }
LABEL_160:
  if (v129[0] != v16)
    free(v129[0]);
  if (v125 != v124)
    free(v125);
  if (v136 != v10)
    free(v136);
  if (v131 != v130)
    free(v131);
  if (v121 != &v123)
    free(v121);
  if (v117 != v116)
    free(v117);
  if (v113 != &v115)
    free(v113);
  if (v109 != v108)
    free(v109);
  v108 = (uint64_t *)a1;
  sub_1C4EB1BCC(&v108, *v4);
}

{
  __ZN4llvm12LoopInfoBaseINS_10BasicBlockENS_4LoopEE7analyzeERKNS_17DominatorTreeBaseIS1_Lb0EEE(a1, a2);
}

void sub_1C4EB1BCC(uint64_t **a1, uint64_t a2)
{
  _BYTE *v3;
  void *v4;
  void *v5;
  unsigned int v6;
  unsigned int v7;
  _BYTE *v8;
  _BYTE *v9;
  void *v10;
  void *v11;
  unsigned int v12;
  unsigned int v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  BOOL v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t *v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  _BYTE *v79;
  _BYTE *v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  _BYTE v84[64];
  void *v85;
  uint64_t v86;
  _BYTE v87[192];
  __int128 v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  _BYTE v92[64];
  void *v93;
  uint64_t v94;
  _BYTE v95[192];
  void *v96;
  void *__src;
  unsigned int v98;
  unsigned int v99;
  int v100;
  void *v101;
  int v102;
  uint64_t v103;
  void *v104;
  void *v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  void *v109;
  int v110;
  _QWORD v111[26];

  v111[24] = *MEMORY[0x1E0C80C00];
  v78 = a2;
  sub_1C4EB7378(&v78, (uint64_t)&v96);
  v3 = v92;
  *(_QWORD *)&v88 = v92;
  v4 = __src;
  if (__src == v96)
  {
    *((_QWORD *)&v88 + 1) = v92;
    v5 = __src;
  }
  else
  {
    v74 = v98;
    v3 = malloc_type_malloc(8 * v98, 0x4065EBACuLL);
    if (!v3)
    {
      if (v74)
        goto LABEL_139;
      v3 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v3)
        goto LABEL_139;
    }
    *((_QWORD *)&v88 + 1) = v3;
    v5 = v96;
    v4 = __src;
  }
  v6 = v99;
  v89 = v98;
  if (v4 == v5)
    v7 = v99;
  else
    v7 = v98;
  if (v7)
  {
    memmove(v3, v4, 8 * v7);
    v6 = v99;
  }
  v90 = v6;
  v91 = v100;
  v8 = v95;
  v93 = v95;
  v94 = 0x800000000;
  if (v102)
    sub_1C4DB22B8((uint64_t)&v93, (uint64_t *)&v101);
  v9 = v84;
  v79 = v84;
  v10 = v105;
  if (v105 != v104)
  {
    v75 = v106;
    v9 = malloc_type_malloc(8 * v106, 0x4065EBACuLL);
    if (v9 || !v75 && (v9 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v80 = v9;
      v11 = v104;
      v10 = v105;
      goto LABEL_12;
    }
LABEL_139:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v80 = v84;
  v11 = v105;
LABEL_12:
  v81 = v106;
  v12 = v107;
  if (v10 == v11)
    v13 = v107;
  else
    v13 = v106;
  if (v13)
  {
    memmove(v9, v10, 8 * v13);
    v12 = v107;
  }
  v82 = v12;
  v83 = v108;
  v85 = v87;
  v86 = 0x800000000;
  if (v110)
    sub_1C4DB22B8((uint64_t)&v85, (uint64_t *)&v109);
  while (1)
  {
    if ((_DWORD)v94 != (_DWORD)v86)
      goto LABEL_29;
    if (!(_DWORD)v94)
      break;
    v14 = v85;
    v15 = v93;
    while (*(_QWORD *)v15 == *(_QWORD *)v14 && v15[4] == v14[4])
    {
      v15 += 6;
      v14 += 6;
      if (v15 == (_DWORD *)((char *)v93 + 24 * v94))
        goto LABEL_111;
    }
LABEL_29:
    v17 = *a1;
    v18 = *((_DWORD *)*a1 + 4);
    if (v18)
    {
      v19 = *((_QWORD *)v93 + 3 * v94 - 3);
      v20 = *v17;
      v21 = v18 - 1;
      v22 = v21 & ((v19 >> 4) ^ (v19 >> 9));
      v23 = *(_QWORD *)(*v17 + 16 * v22);
      if (v23 == v19)
      {
LABEL_34:
        v26 = *(_QWORD **)(v20 + 16 * v22 + 8);
        if (v26)
        {
          if (*(_QWORD *)v26[4] == v19)
          {
            v27 = (_QWORD *)*v26;
            if (*v26)
            {
              v29 = (_QWORD *)v27[2];
              v28 = v27[3];
              if ((unint64_t)v29 < v28)
              {
                *v29 = v26;
                v30 = v29 + 1;
                goto LABEL_66;
              }
              v76 = v8;
              v34 = (_QWORD *)v27[1];
              v35 = v29 - v34;
              v36 = v35 + 1;
              if (!((unint64_t)(v35 + 1) >> 61))
              {
                v37 = v28 - (_QWORD)v34;
                if (v37 >> 2 > v36)
                  v36 = v37 >> 2;
                if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
                  v38 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v38 = v36;
                if (!v38)
                {
                  v39 = 0;
                  goto LABEL_60;
                }
                if (!(v38 >> 61))
                {
                  v39 = (char *)operator new(8 * v38);
LABEL_60:
                  v46 = &v39[8 * v35];
                  *(_QWORD *)v46 = v26;
                  v30 = v46 + 8;
                  if (v29 != v34)
                  {
                    do
                    {
                      v47 = *--v29;
                      *((_QWORD *)v46 - 1) = v47;
                      v46 -= 8;
                    }
                    while (v29 != v34);
                    v29 = (_QWORD *)v27[1];
                  }
                  v27[1] = v46;
                  v27[2] = v30;
                  v27[3] = &v39[8 * v38];
                  if (v29)
                    operator delete(v29);
                  v8 = v76;
LABEL_66:
                  v27[2] = v30;
LABEL_75:
                  v50 = v26[4];
                  v51 = v26[5];
                  v52 = (_QWORD *)(v51 - 8);
                  v53 = v50 + 8 == v51 || v50 + 8 >= (unint64_t)v52;
                  if (!v53)
                  {
                    v54 = v50 + 16;
                    do
                    {
                      v55 = *(_QWORD *)(v54 - 8);
                      *(_QWORD *)(v54 - 8) = *v52;
                      *v52-- = v55;
                      v53 = v54 >= (unint64_t)v52;
                      v54 += 8;
                    }
                    while (!v53);
                  }
                  v56 = v26[1];
                  v57 = v26[2];
                  v58 = (_QWORD *)(v57 - 8);
                  if (v56 != v57 && v56 < (unint64_t)v58)
                  {
                    v60 = v56 + 8;
                    do
                    {
                      v61 = *(_QWORD *)(v60 - 8);
                      *(_QWORD *)(v60 - 8) = *v58;
                      *v58-- = v61;
                      v53 = v60 >= (unint64_t)v58;
                      v60 += 8;
                    }
                    while (!v53);
                  }
                  goto LABEL_89;
                }
LABEL_133:
                sub_1C4764EE4();
              }
LABEL_132:
              abort();
            }
            v32 = (_QWORD *)v17[4];
            v31 = v17[5];
            if ((unint64_t)v32 >= v31)
            {
              v77 = v8;
              v40 = (_QWORD *)v17[3];
              v41 = v32 - v40;
              v42 = v41 + 1;
              if ((unint64_t)(v41 + 1) >> 61)
                goto LABEL_132;
              v43 = v31 - (_QWORD)v40;
              if (v43 >> 2 > v42)
                v42 = v43 >> 2;
              if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
                v44 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v44 = v42;
              if (v44)
              {
                if (v44 >> 61)
                  goto LABEL_133;
                v45 = (char *)operator new(8 * v44);
              }
              else
              {
                v45 = 0;
              }
              v48 = &v45[8 * v41];
              *(_QWORD *)v48 = v26;
              v33 = v48 + 8;
              if (v32 != v40)
              {
                do
                {
                  v49 = *--v32;
                  *((_QWORD *)v48 - 1) = v49;
                  v48 -= 8;
                }
                while (v32 != v40);
                v32 = (_QWORD *)v17[3];
              }
              v17[3] = (uint64_t)v48;
              v17[4] = (uint64_t)v33;
              v17[5] = (uint64_t)&v45[8 * v44];
              if (v32)
                operator delete(v32);
              v8 = v77;
            }
            else
            {
              *v32 = v26;
              v33 = v32 + 1;
            }
            v17[4] = (uint64_t)v33;
            goto LABEL_75;
          }
          do
          {
            v63 = (uint64_t *)v26[5];
            v62 = v26[6];
            if ((unint64_t)v63 >= v62)
            {
              v65 = (_QWORD *)v26[4];
              v66 = v63 - v65;
              v67 = v66 + 1;
              if ((unint64_t)(v66 + 1) >> 61)
                goto LABEL_132;
              v68 = v8;
              v69 = v62 - (_QWORD)v65;
              if (v69 >> 2 > v67)
                v67 = v69 >> 2;
              if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
                v70 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v70 = v67;
              if (v70)
              {
                if (v70 >> 61)
                  goto LABEL_133;
                v71 = (char *)operator new(8 * v70);
              }
              else
              {
                v71 = 0;
              }
              v72 = (uint64_t *)&v71[8 * v66];
              *v72 = v19;
              v64 = v72 + 1;
              if (v63 != v65)
              {
                do
                {
                  v73 = *--v63;
                  *--v72 = v73;
                }
                while (v63 != v65);
                v63 = (uint64_t *)v26[4];
              }
              v26[4] = v72;
              v26[5] = v64;
              v26[6] = &v71[8 * v70];
              if (v63)
                operator delete(v63);
              v8 = v68;
            }
            else
            {
              *v63 = v19;
              v64 = v63 + 1;
            }
            v26[5] = v64;
            sub_1C4774094((llvm::SmallPtrSetImplBase *)(v26 + 7), v19);
LABEL_89:
            v26 = (_QWORD *)*v26;
          }
          while (v26);
        }
      }
      else
      {
        v24 = 1;
        while (v23 != -4096)
        {
          v25 = v22 + v24++;
          v22 = v25 & v21;
          v23 = *(_QWORD *)(v20 + 16 * v22);
          if (v23 == v19)
            goto LABEL_34;
        }
      }
    }
    LODWORD(v94) = v94 - 1;
    if ((_DWORD)v94)
      sub_1C4EB7588(&v88);
  }
LABEL_111:
  if (v85 != v87)
    free(v85);
  if (v80 != v79)
    free(v80);
  if (v93 != v8)
    free(v93);
  if (*((_QWORD *)&v88 + 1) != (_QWORD)v88)
    free(*((void **)&v88 + 1));
  if (v109 != v111)
    free(v109);
  if (v105 != v104)
    free(v105);
  if (v101 != &v103)
    free(v101);
  if (__src != v96)
    free(__src);
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::print(uint64_t result, llvm::raw_ostream *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;

  v2 = *(_QWORD *)(result + 24);
  if (*(_QWORD *)(result + 32) != v2)
  {
    v4 = result;
    v5 = 0;
    v6 = 1;
    do
    {
      result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::print(*(llvm::Loop **)(v2 + 8 * v5), a2, 0, 1, 0);
      v5 = v6;
      v2 = *(_QWORD *)(v4 + 24);
      ++v6;
    }
    while (v5 < (*(_QWORD *)(v4 + 32) - v2) >> 3);
  }
  return result;
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::destroy(uint64_t a1, uint64_t a2)
{
  return llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::~LoopBase(a2);
}

_QWORD *sub_1C4EB22A8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_1E8138EB8;
  v2 = a1 + 20;
  v3 = (_QWORD *)a1[23];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      return sub_1C47A80D0(a1);
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  return sub_1C47A80D0(a1);
}

BOOL llvm::Loop::isLoopInvariant(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  result = 1;
  if (a2 && *(unsigned __int8 *)(a2 + 16) >= 0x1Cu)
  {
    v4 = sub_1C477672C(a1 + 56, *(_QWORD *)(a2 + 40));
    v5 = *(_QWORD *)(a1 + 64);
    v6 = 72;
    if (v5 == *(_QWORD *)(a1 + 56))
      v6 = 76;
    return v4 == (_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + v6));
  }
  return result;
}

uint64_t llvm::Loop::hasLoopInvariantOperands(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_DWORD *)(a2 + 20);
  if ((v3 & 0x40000000) != 0)
  {
    v5 = *(_QWORD *)(a2 - 8);
    v4 = v3 & 0x7FFFFFF;
    if (!v4)
      return 1;
  }
  else
  {
    v4 = v3 & 0x7FFFFFF;
    v5 = a2 - 32 * v4;
    if (!v4)
      return 1;
  }
  v6 = 32 * v4;
  while (1)
  {
    if (*(_QWORD *)v5 && *(unsigned __int8 *)(*(_QWORD *)v5 + 16) >= 0x1Cu)
    {
      v8 = sub_1C477672C(a1 + 56, *(_QWORD *)(*(_QWORD *)v5 + 40));
      v9 = *(_QWORD *)(a1 + 64);
      v10 = v9 == *(_QWORD *)(a1 + 56) ? 76 : 72;
      if (v8 != (_QWORD *)(v9 + 8 * *(unsigned int *)(a1 + v10)))
        break;
    }
    v5 += 32;
    v6 -= 32;
    if (!v6)
      return 1;
  }
  return 0;
}

uint64_t llvm::Loop::makeLoopInvariant(uint64_t a1, uint64_t a2, _BYTE *a3, llvm::BasicBlock **a4, uint64_t *a5)
{
  if (a2 && *(unsigned __int8 *)(a2 + 16) >= 0x1Cu)
    return llvm::Loop::makeLoopInvariant(a1, a2, a3, a4, a5);
  else
    return 1;
}

{
  uint64_t result;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  __int32 v37;

  result = 1;
  if (!a2 || *(unsigned __int8 *)(a2 + 16) < 0x1Cu)
    return result;
  v11 = sub_1C477672C(a1 + 56, *(_QWORD *)(a2 + 40));
  v12 = *(_QWORD *)(a1 + 64);
  v13 = 72;
  if (v12 == *(_QWORD *)(a1 + 56))
    v13 = 76;
  if (v11 == (_QWORD *)(v12 + 8 * *(unsigned int *)(a1 + v13)))
    return 1;
  result = llvm::isSafeToSpeculativelyExecute(a2, 0, 0, 0);
  if (!(_DWORD)result)
    return result;
  v14 = *(unsigned __int8 *)(a2 + 16);
  v15 = (v14 - 33);
  if (v15 <= 0x37)
  {
    if (((1 << (v14 - 33)) & 0x8000000000041) != 0)
    {
      v34 = *(_QWORD *)(a2 + 64);
      if (!v34 || (*(_BYTE *)(v34 + 20) & 4) == 0 && (*(_BYTE *)(v34 + 17) & 0x10) == 0)
      {
        v37 = 7;
        if (sub_1C53E4BBC(a2, &v37, 1uLL))
        {
          v36 = *(_QWORD *)(a2 - 32);
          if (!v36
            || *(_BYTE *)(v36 + 16)
            || *(_QWORD *)(v36 + 24) != *(_QWORD *)(a2 + 72)
            || *(_DWORD *)(v36 + 36) != 7)
          {
            return 0;
          }
        }
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(a2, 66) & 1) == 0)
        {
          result = llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44);
          if (!(_DWORD)result)
            return result;
        }
      }
    }
    else
    {
      if (((1 << (v14 - 33)) & 0x808001C8000010) != 0)
        return 0;
      if (v15 != 28)
        goto LABEL_11;
      if ((*(_WORD *)(a2 + 18) & 0x301) != 0)
        return 0;
    }
    v14 = *(unsigned __int8 *)(a2 + 16);
  }
LABEL_11:
  v16 = v14 - 38;
  if (v16 < 0x39 && ((0x100060000000001uLL >> v16) & 1) != 0)
    return 0;
  if (!a4)
  {
    result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(a1);
    if (!result)
      return result;
    v20 = *(_QWORD *)(result + 40);
    if (v20 != result + 40)
    {
      a4 = (llvm::BasicBlock **)(v20 - 24);
      v21 = v20 ? v20 - 24 : 0;
      v22 = *(unsigned __int8 *)(v21 + 16);
      if ((v22 - 29) > 0xA || (v23 = v22 - 33, v23 >= 6) || ((0x3Bu >> v23) & 1) == 0)
      {
        if (*(_BYTE *)(v21 + 16) == 30)
        {
          if ((*(_DWORD *)(v21 + 20) & 0x7FFFFFF) != 3)
            goto LABEL_14;
        }
        else
        {
          result = 0;
          switch(*(_BYTE *)(v21 + 16))
          {
            case 0x1D:
            case 0x21:
            case 0x22:
            case 0x23:
              return result;
            case 0x1E:
              __break(1u);
              goto LABEL_67;
            case 0x1F:
              v35 = (*(_DWORD *)(v21 + 20) >> 1) & 0x3FFFFFF;
              break;
            case 0x20:
            case 0x26:
LABEL_67:
              v35 = (*(_DWORD *)(v21 + 20) & 0x7FFFFFF) - 1;
              break;
            case 0x24:
              v35 = *(_WORD *)(v21 + 18) & 1;
              break;
            case 0x25:
              goto LABEL_14;
            case 0x27:
              v35 = *(_DWORD *)(v21 + 80) + 1;
              break;
            default:
              return 0;
          }
          if (v35 == 1)
            goto LABEL_14;
        }
      }
    }
    return 0;
  }
LABEL_14:
  v17 = *(_DWORD *)(a2 + 20);
  if ((v17 & 0x40000000) != 0)
  {
    v19 = *(_QWORD *)(a2 - 8);
    v18 = v17 & 0x7FFFFFF;
    if (!v18)
      goto LABEL_38;
  }
  else
  {
    v18 = v17 & 0x7FFFFFF;
    v19 = a2 - 32 * v18;
    if (!v18)
    {
LABEL_38:
      llvm::Instruction::moveBefore((llvm::Instruction *)a2, (llvm::Instruction *)a4);
      if (a5)
      {
        v26 = *(_DWORD *)(*a5 + 40);
        if (v26)
        {
          v27 = *(_QWORD *)(*a5 + 24);
          v28 = v26 - 1;
          v29 = (v26 - 1) & ((a2 >> 4) ^ (a2 >> 9));
          v30 = *(_QWORD *)(v27 + 16 * v29);
          if (v30 == a2)
          {
LABEL_44:
            v33 = *(_QWORD *)(v27 + 16 * v29 + 8);
            if (v33)
              llvm::MemorySSAUpdater::moveToPlace(a5, v33, a4[5], 2);
          }
          else
          {
            v31 = 1;
            while (v30 != -4096)
            {
              v32 = v29 + v31++;
              v29 = v32 & v28;
              v30 = *(_QWORD *)(v27 + 16 * v29);
              if (v30 == a2)
                goto LABEL_44;
            }
          }
        }
      }
      llvm::Instruction::dropUnknownNonDebugMetadata((_QWORD **)a2, 0, 0);
      result = 1;
      *a3 = 1;
      return result;
    }
  }
  v24 = 32 * v18;
  while (1)
  {
    if (*(_QWORD *)v19 && *(unsigned __int8 *)(*(_QWORD *)v19 + 16) >= 0x1Cu)
    {
      result = llvm::Loop::makeLoopInvariant(a1);
      if (!(_DWORD)result)
        return result;
    }
    v19 += 32;
    v24 -= 32;
    if (!v24)
      goto LABEL_38;
  }
}

uint64_t llvm::Loop::getIncomingAndBackEdge(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t result;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  v6 = **(_QWORD **)(a1 + 32);
  *a2 = 0;
  *a3 = 0;
  do
  {
    v6 = *(_QWORD *)(v6 + 8);
    if (!v6)
      break;
    v7 = *(_QWORD *)(v6 + 24);
    v8 = *(unsigned __int8 *)(v7 + 16);
    v9 = v7 && v8 >= 0x1C;
  }
  while (!v9 || v8 - 29 >= 0xB);
  v11 = v6;
  do
  {
    v11 = *(_QWORD *)(v11 + 8);
    if (!v11)
    {
      result = 0;
      *a3 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 40);
      return result;
    }
    v12 = *(_QWORD *)(v11 + 24);
    v13 = *(unsigned __int8 *)(v12 + 16);
    if (v12)
      v14 = v13 >= 0x1C;
    else
      v14 = 0;
  }
  while (!v14 || v13 - 29 > 0xA);
  *a3 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 40);
  v16 = v11;
  while (1)
  {
    v16 = *(_QWORD *)(v16 + 8);
    if (!v16)
      break;
    v17 = *(_QWORD *)(v16 + 24);
    v18 = *(unsigned __int8 *)(v17 + 16);
    if (v17)
      v19 = v18 >= 0x1C;
    else
      v19 = 0;
    if (v19 && v18 - 29 <= 0xA)
    {
      result = 0;
      *a2 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40);
      return result;
    }
  }
  v22 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 40);
  *a2 = v22;
  v23 = sub_1C477672C(a1 + 56, v22);
  v24 = *(_QWORD *)(a1 + 64);
  if (v24 == *(_QWORD *)(a1 + 56))
    v25 = 76;
  else
    v25 = 72;
  v26 = (_QWORD *)(v24 + 8 * *(unsigned int *)(a1 + v25));
  v27 = sub_1C477672C(a1 + 56, *a3);
  v28 = *(_QWORD *)(a1 + 64);
  if (v28 == *(_QWORD *)(a1 + 56))
    v29 = 76;
  else
    v29 = 72;
  v30 = (_QWORD *)(v28 + 8 * *(unsigned int *)(a1 + v29));
  if (v23 == v26)
  {
    if (v27 != v30)
      return 1;
  }
  else if (v27 == v30)
  {
    v31 = *a2;
    *a2 = *a3;
    *a3 = v31;
    return 1;
  }
  return 0;
}

uint64_t llvm::Loop::getCanonicalInductionVariable(llvm::Loop *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  llvm::APInt *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  llvm::APInt *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  v1 = **((_QWORD **)this + 4);
  v28 = 0;
  v29 = 0;
  v2 = 0;
  if (llvm::Loop::getIncomingAndBackEdge((uint64_t)this, &v29, &v28))
  {
    v2 = 0;
    v3 = *(_QWORD *)(v1 + 48);
    v4 = v3 ? v3 - 24 : 0;
    if (*(_BYTE *)(v4 + 16) == 83)
    {
      v6 = v28;
      v5 = v29;
      v2 = v3 - 24;
      while (1)
      {
        v7 = *(_DWORD *)(v2 + 20);
        v8 = v7 & 0x7FFFFFF;
        if ((v7 & 0x7FFFFFF) != 0)
        {
          v9 = 0;
          while (1)
          {
            v10 = v2 - 32 * v8;
            if ((v7 & 0x40000000) != 0)
              v10 = *(_QWORD *)(v2 - 8);
            if (*(_QWORD *)(v10 + 32 * *(unsigned int *)(v2 + 60) + 8 * v9) == v5)
              break;
            if (v8 == ++v9)
              goto LABEL_13;
          }
        }
        else
        {
LABEL_13:
          LODWORD(v9) = -1;
        }
        if ((v7 & 0x40000000) != 0)
          v11 = *(_QWORD *)(v2 - 8);
        else
          v11 = v2 - 32 * v8;
        v12 = *(_QWORD *)(v11 + 32 * v9);
        if (v12)
          v13 = *(_BYTE *)(v12 + 16) == 16;
        else
          v13 = 0;
        if (v13)
        {
          v14 = (llvm::APInt *)(v12 + 24);
          v15 = *(_DWORD *)(v12 + 32);
          if (v15 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase(v14) == v15)
            {
LABEL_25:
              if ((_DWORD)v8)
              {
                v16 = 0;
                while (1)
                {
                  v17 = v2 - 32 * v8;
                  if ((v7 & 0x40000000) != 0)
                    v17 = *(_QWORD *)(v2 - 8);
                  if (*(_QWORD *)(v17 + 32 * *(unsigned int *)(v2 + 60) + 8 * v16) == v6)
                    break;
                  if (v8 == ++v16)
                    goto LABEL_31;
                }
              }
              else
              {
LABEL_31:
                LODWORD(v16) = -1;
              }
              if ((v7 & 0x40000000) != 0)
                v18 = *(_QWORD *)(v2 - 8);
              else
                v18 = v2 - 32 * v8;
              v19 = *(_QWORD *)(v18 + 32 * v16);
              if (v19 && *(_BYTE *)(v19 + 16) == 41)
              {
                v20 = *(_DWORD *)(v19 + 20);
                v21 = (v20 & 0x40000000) != 0 ? *(_QWORD **)(v19 - 8) : (_QWORD *)(v19 - 32 * (v20 & 0x7FFFFFF));
                if (*v21 == v2)
                {
                  v22 = v21[4];
                  if (v22 && *(_BYTE *)(v22 + 16) == 16)
                  {
                    v24 = (llvm::APInt *)(v22 + 24);
                    v25 = *(_DWORD *)(v22 + 32);
                    if (v25 > 0x40)
                    {
                      if (llvm::APInt::countLeadingZerosSlowCase(v24) == v25 - 1)
                        return v2;
                    }
                    else if (*(_QWORD *)v24 == 1)
                    {
                      return v2;
                    }
                  }
                }
              }
            }
          }
          else if (!*(_QWORD *)v14)
          {
            goto LABEL_25;
          }
        }
        v3 = *(_QWORD *)(v3 + 8);
        v2 = v3 - 24;
        if (v3)
          v26 = v3 - 24;
        else
          v26 = 0;
        if (*(_BYTE *)(v26 + 16) != 83)
          return 0;
      }
    }
  }
  return v2;
}

void llvm::Loop::LoopBounds::getBounds(llvm::Loop::LoopBounds *this@<X0>, const llvm::Loop *a2@<X1>, llvm::PHINode *a3@<X2>, uint64_t a4@<X8>)
{
  int32x2_t ****v9;
  const llvm::Loop *v10;
  char v11;
  unint64_t v12;
  int32x2_t ****v13;
  int32x2_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int32x2_t *****v19;
  int32x2_t ****v20;
  int v21;
  int v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t SCEVIter;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t LatchCmpInst;
  const llvm::Loop *v46;
  const llvm::Loop *v47;
  BOOL v48;
  uint64_t v49;
  unint64_t *v50;
  int32x2_t ****v51;
  int v52;
  uint64_t v53;
  const llvm::Loop *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  _QWORD v58[3];

  v58[2] = *MEMORY[0x1E0C80C00];
  v50 = 0;
  v51 = 0;
  v49 = 6;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = v58;
  v57 = 0x200000000;
  if ((llvm::InductionDescriptor::isInductionPHI((unint64_t)a2, this, (uint64_t)a3, (uint64_t)&v49, 0, 0) & 1) == 0)
    goto LABEL_4;
  v9 = v51;
  if (!v51)
    goto LABEL_4;
  v10 = v54;
  if (!v54)
    goto LABEL_4;
  v23 = *((_DWORD *)v54 + 5);
  if ((v23 & 0x40000000) != 0)
    v24 = (unint64_t *)*((_QWORD *)v54 - 1);
  else
    v24 = (unint64_t *)((char *)v54 - 32 * (v23 & 0x7FFFFFF));
  v25 = v24[4];
  v26 = *((_QWORD *)a3 + 13);
  v27 = *((_DWORD *)a3 + 30);
  if (!v27)
    goto LABEL_31;
  v28 = v27 - 1;
  v29 = (v27 - 1) & ((v25 >> 4) ^ (v25 >> 9));
  v30 = v26 + 48 * v29;
  v31 = *(_QWORD *)(v30 + 24);
  if (v31 != v25)
  {
    v32 = 1;
    while (v31 != -4096)
    {
      v33 = v29 + v32++;
      v29 = v33 & v28;
      v30 = v26 + 48 * (v33 & v28);
      v31 = *(_QWORD *)(v30 + 24);
      if (v31 == v25)
        goto LABEL_32;
    }
LABEL_31:
    v30 = v26 + 48 * v27;
  }
LABEL_32:
  v34 = *v24;
  v35 = v53;
  if (v30 == v26 + 48 * v27 || (SCEVIter = *(_QWORD *)(v30 + 40)) == 0)
    SCEVIter = llvm::ScalarEvolution::createSCEVIter(a3, v25);
  if (SCEVIter == v35)
    goto LABEL_49;
  v37 = *((_QWORD *)a3 + 13);
  v38 = *((_DWORD *)a3 + 30);
  if (v38)
  {
    v39 = (v38 - 1) & ((v34 >> 4) ^ (v34 >> 9));
    v40 = v37 + 48 * v39;
    v41 = *(_QWORD *)(v40 + 24);
    if (v41 == v34)
      goto LABEL_43;
    v42 = 1;
    while (v41 != -4096)
    {
      v43 = v39 + v42++;
      v39 = v43 & (v38 - 1);
      v40 = v37 + 48 * v39;
      v41 = *(_QWORD *)(v40 + 24);
      if (v41 == v34)
        goto LABEL_43;
    }
  }
  v40 = v37 + 48 * v38;
LABEL_43:
  if (v40 == v37 + 48 * v38 || (v44 = *(_QWORD *)(v40 + 40)) == 0)
    v44 = llvm::ScalarEvolution::createSCEVIter(a3, v34);
  if (v44 == v35)
    v25 = v34;
  else
    v25 = 0;
LABEL_49:
  LatchCmpInst = llvm::Loop::getLatchCmpInst(this);
  if (!LatchCmpInst)
    goto LABEL_4;
  v46 = *(const llvm::Loop **)(LatchCmpInst - 64);
  v47 = *(const llvm::Loop **)(LatchCmpInst - 32);
  if (v46 != a2 && v46 != v10)
  {
    if (v47 == a2)
    {
      v47 = *(const llvm::Loop **)(LatchCmpInst - 64);
    }
    else
    {
      v48 = v47 == v10;
      v47 = *(const llvm::Loop **)(LatchCmpInst - 64);
      if (!v48)
        goto LABEL_4;
    }
  }
  if (!v47)
  {
LABEL_4:
    v11 = 0;
    *(_BYTE *)a4 = 0;
    goto LABEL_5;
  }
  *(_QWORD *)a4 = this;
  *(_QWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_QWORD *)(a4 + 24) = v25;
  v11 = 1;
  *(_QWORD *)(a4 + 32) = v47;
  *(_QWORD *)(a4 + 40) = a3;
LABEL_5:
  *(_BYTE *)(a4 + 48) = v11;
  if (v56 != v58)
    free(v56);
  if (v51 && v51 != (int32x2_t ****)-8192 && v51 != (int32x2_t ****)-4096)
  {
    v12 = v49 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v49 & 0xFFFFFFFFFFFFFFF8) = v50;
    if (v50)
    {
      *v50 = *v50 & 7 | v12;
    }
    else
    {
      v13 = v51;
      v14 = ***v51;
      v15 = (unint64_t)v14[303];
      if (v15 <= v12)
      {
        v16 = v14[305].u32[0];
        if (v15 + 16 * v16 > v12)
        {
          v17 = v16 - 1;
          LODWORD(v18) = v17 & ((v51 >> 4) ^ (v51 >> 9));
          v19 = (int32x2_t *****)(v15 + 16 * v18);
          v20 = *v19;
          if (v51 == *v19)
          {
LABEL_18:
            *v19 = (int32x2_t ****)-8192;
            v14[304] = vadd_s32(v14[304], (int32x2_t)0x1FFFFFFFFLL);
            v13 = v51;
          }
          else
          {
            v21 = 1;
            while (v20 != (int32x2_t ****)-4096)
            {
              v22 = v18 + v21++;
              v18 = v22 & v17;
              v20 = *(int32x2_t *****)(v15 + 16 * v18);
              if (v51 == v20)
              {
                v19 = (int32x2_t *****)(v15 + 16 * v18);
                goto LABEL_18;
              }
            }
          }
          *((_BYTE *)v13 + 17) &= ~1u;
        }
      }
    }
  }
}

uint64_t llvm::Loop::LoopBounds::getCanonicalPredicate(llvm::Loop::LoopBounds *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int Direction;
  unsigned int v10;

  v2 = *(_QWORD *)(llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*(_QWORD *)this) + 40);
  if (v2)
    v3 = v2 - 24;
  else
    v3 = 0;
  if (*(unsigned __int8 *)(v3 + 16) - 29 >= 0xB)
    v3 = 0;
  if (*(_BYTE *)(v3 + 16) == 30)
    v4 = v3;
  else
    v4 = 0;
  v5 = *(_QWORD *)(v4 - 96);
  if (*(_BYTE *)(v5 + 16) != 81)
    v5 = 0;
  result = *(_WORD *)(v5 + 18) & 0x3FLL;
  if (*(_QWORD *)(v4 - 32) != **(_QWORD **)(*(_QWORD *)this + 32))
    result = dword_1C85F42BC[result];
  v7 = *(_QWORD *)(v5 - 64);
  if (v7 == *((_QWORD *)this + 4))
    __asm { BR              X12 }
  v8 = *((_QWORD *)this + 2);
  if (v7 != v8 && *(_QWORD *)(v5 - 32) != v8)
  {
    if ((result - 34) > 0xFFFFFFFD)
    {
      Direction = llvm::Loop::LoopBounds::getDirection(this);
      if (Direction == 1)
        v10 = 38;
      else
        v10 = 42;
      if (Direction)
        return v10;
      else
        return 40;
    }
    else
    {
      return llvm::CmpInst::getFlippedStrictnessPredicate(result);
    }
  }
  return result;
}

void sub_1C4EB3004()
{
  JUMPOUT(0x1C4EB2F7CLL);
}

void sub_1C4EB300C()
{
  JUMPOUT(0x1C4EB2F7CLL);
}

void sub_1C4EB3014()
{
  JUMPOUT(0x1C4EB2F7CLL);
}

void sub_1C4EB301C()
{
  JUMPOUT(0x1C4EB2F7CLL);
}

void sub_1C4EB3024()
{
  JUMPOUT(0x1C4EB2F7CLL);
}

void sub_1C4EB302C()
{
  JUMPOUT(0x1C4EB2F7CLL);
}

void sub_1C4EB3034()
{
  JUMPOUT(0x1C4EB2F7CLL);
}

void sub_1C4EB303C()
{
  JUMPOUT(0x1C4EB2F7CLL);
}

void sub_1C4EB3044()
{
  JUMPOUT(0x1C4EB2F7CLL);
}

void sub_1C4EB304C()
{
  JUMPOUT(0x1C4EB2F7CLL);
}

void sub_1C4EB3054()
{
  JUMPOUT(0x1C4EB2F7CLL);
}

void sub_1C4EB305C()
{
  JUMPOUT(0x1C4EB2F7CLL);
}

void sub_1C4EB3064()
{
  JUMPOUT(0x1C4EB2F7CLL);
}

void sub_1C4EB306C()
{
  JUMPOUT(0x1C4EB2F7CLL);
}

void sub_1C4EB3074()
{
  JUMPOUT(0x1C4EB2F7CLL);
}

uint64_t llvm::Loop::LoopBounds::getDirection(llvm::Loop::LoopBounds *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t SCEVIter;
  BOOL v12;
  uint64_t v13;
  const llvm::SCEV *v14;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  unsigned int v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[4];

  v24[3] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  v3 = *((_QWORD *)this + 2);
  v4 = *(_QWORD *)(v2 + 104);
  v5 = *(_DWORD *)(v2 + 120);
  if (v5)
  {
    v6 = ((v3 >> 4) ^ (v3 >> 9)) & (v5 - 1);
    v7 = v4 + 48 * v6;
    v8 = *(_QWORD *)(v7 + 24);
    if (v8 == v3)
      goto LABEL_8;
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v7 = v4 + 48 * v6;
      v8 = *(_QWORD *)(v7 + 24);
      if (v8 == v3)
        goto LABEL_8;
    }
  }
  v7 = v4 + 48 * v5;
LABEL_8:
  if (v7 == v4 + 48 * v5 || (SCEVIter = *(_QWORD *)(v7 + 40)) == 0)
    SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v2, v3);
  if (SCEVIter)
    v12 = *(unsigned __int16 *)(SCEVIter + 24) == 7;
  else
    v12 = 0;
  if (!v12)
    return 2;
  v13 = *(_QWORD *)(SCEVIter + 40);
  if (v13 == 2)
  {
    v14 = *(const llvm::SCEV **)(*(_QWORD *)(SCEVIter + 32) + 8);
  }
  else
  {
    v16 = (uint64_t *)*((_QWORD *)this + 5);
    v17 = SCEVIter;
    v18 = *(_QWORD *)(SCEVIter + 32);
    v22 = v24;
    v23 = 0x300000000;
    v19 = v13;
    v20 = 8 * v13 - 8;
    if (v20 >= 0x19)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, (uint64_t)v24, (uint64_t)v20 >> 3, 8);
      v21 = v23;
    }
    else
    {
      v21 = 0;
    }
    if (v19 != 1)
    {
      memcpy((char *)v22 + 8 * v21, (const void *)(v18 + 8), v20);
      v21 = v23;
    }
    LODWORD(v23) = v21 + (v20 >> 3);
    v14 = (const llvm::SCEV *)sub_1C618AB20(v16, (uint64_t)&v22, *(uint64_t ***)(v17 + 48));
    if (v22 != v24)
      free(v22);
  }
  if (!v14)
    return 2;
  if ((llvm::ScalarEvolution::isKnownPositive(*((llvm::ScalarEvolution **)this + 5), v14) & 1) != 0)
    return 0;
  if (llvm::ScalarEvolution::isKnownNegative(*((llvm::ScalarEvolution **)this + 5), v14))
    return 1;
  else
    return 2;
}

void llvm::Loop::getBounds(llvm::Loop *this@<X0>, llvm::ScalarEvolution *a2@<X1>, _BYTE *a3@<X8>)
{
  const llvm::Loop *InductionVariable;

  InductionVariable = (const llvm::Loop *)llvm::Loop::getInductionVariable(this, a2);
  if (InductionVariable)
  {
    llvm::Loop::LoopBounds::getBounds(this, InductionVariable, a2, (uint64_t)a3);
  }
  else
  {
    *a3 = 0;
    a3[48] = 0;
  }
}

unint64_t llvm::Loop::getInductionVariable(llvm::Loop *this, llvm::ScalarEvolution *a2)
{
  unint64_t v2;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t LoopLatch;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  unint64_t v22;
  BOOL v23;
  int v24;
  unint64_t v25;
  int32x2_t ****v26;
  int32x2_t *v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int32x2_t *****v32;
  int32x2_t ****v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  int32x2_t ****v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _QWORD v47[3];

  v47[2] = *MEMORY[0x1E0C80C00];
  if (!llvm::Loop::isLoopSimplifyForm(this))
    return 0;
  v6 = **((_QWORD **)this + 4);
  result = llvm::Loop::getLatchCmpInst(this);
  if (result)
  {
    if (*(_QWORD *)(v6 + 40) == v6 + 40)
      return 0;
    v7 = result;
    result = 0;
    v8 = *(_QWORD *)(v6 + 48);
    v9 = v8 - 24;
    if (v8)
      v10 = v8 - 24;
    else
      v10 = 0;
    if (v8 && *(_BYTE *)(v10 + 16) == 83)
    {
      v11 = *(_QWORD *)(v7 - 64);
      v12 = *(_QWORD *)(v7 - 32);
      while (1)
      {
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v43 = 0;
        v44 = 0;
        v42 = 0;
        v38 = 6;
        v45 = v47;
        v46 = 0x200000000;
        if (llvm::InductionDescriptor::isInductionPHI(v9, this, (uint64_t)a2, (uint64_t)&v38, 0, 0))
        {
          LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)this);
          v14 = *(_DWORD *)(v9 + 20);
          v15 = v14 & 0x7FFFFFF;
          if ((v14 & 0x7FFFFFF) != 0)
          {
            v16 = 0;
            while (1)
            {
              v17 = v9 - 32 * v15;
              if ((v14 & 0x40000000) != 0)
                v17 = *(_QWORD *)(v9 - 8);
              if (*(_QWORD *)(v17 + 32 * *(unsigned int *)(v9 + 60) + 8 * v16) == LoopLatch)
                break;
              if (v15 == ++v16)
                goto LABEL_19;
            }
          }
          else
          {
LABEL_19:
            LODWORD(v16) = -1;
          }
          v18 = (v14 & 0x40000000) != 0 ? *(_QWORD *)(v9 - 8) : v9 - 32 * v15;
          v19 = *(_QWORD *)(v18 + 32 * v16);
          v20 = v9 == v11 || v9 == v12;
          v21 = v20;
          v22 = v20 ? v9 : v2;
          v23 = v19 == v11 || v19 == v12;
          v24 = v23 ? 1 : v21;
          v2 = v23 ? v9 : v22;
        }
        else
        {
          v24 = 3;
        }
        if (v45 != v47)
          free(v45);
        if (v40 && v40 != (int32x2_t ****)-8192 && v40 != (int32x2_t ****)-4096)
        {
          v25 = v38 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF8) = v39;
          if (v39)
          {
            *v39 = *v39 & 7 | v25;
          }
          else
          {
            v26 = v40;
            v27 = ***v40;
            v28 = (unint64_t)v27[303];
            if (v28 <= v25)
            {
              v29 = v27[305].u32[0];
              if (v28 + 16 * v29 > v25)
              {
                v30 = v29 - 1;
                LODWORD(v31) = v30 & ((v40 >> 4) ^ (v40 >> 9));
                v32 = (int32x2_t *****)(v28 + 16 * v31);
                v33 = *v32;
                if (v40 == *v32)
                {
LABEL_54:
                  *v32 = (int32x2_t ****)-8192;
                  v27[304] = vadd_s32(v27[304], (int32x2_t)0x1FFFFFFFFLL);
                  v26 = v40;
                }
                else
                {
                  v34 = 1;
                  while (v33 != (int32x2_t ****)-4096)
                  {
                    v35 = v31 + v34++;
                    v31 = v35 & v30;
                    v33 = *(int32x2_t *****)(v28 + 16 * v31);
                    if (v40 == v33)
                    {
                      v32 = (int32x2_t *****)(v28 + 16 * v31);
                      goto LABEL_54;
                    }
                  }
                }
                *((_BYTE *)v26 + 17) &= ~1u;
              }
            }
          }
        }
        if (v24 != 3 && v24)
          return v2;
        result = 0;
        v36 = *(_QWORD *)(v9 + 32);
        v9 = v36 - 24;
        if (v36)
          v37 = v36 - 24;
        else
          v37 = 0;
        if (!v36 || *(_BYTE *)(v37 + 16) != 83)
          return result;
      }
    }
  }
  return result;
}

uint64_t llvm::Loop::isLoopSimplifyForm(llvm::Loop *this)
{
  uint64_t LoopPredecessor;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v8;

  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)this);
  if (!LoopPredecessor)
    return 0;
  v3 = *(_QWORD *)(LoopPredecessor + 40);
  if (v3 == LoopPredecessor + 40)
    return 0;
  v4 = v3 ? v3 - 24 : 0;
  v5 = *(unsigned __int8 *)(v4 + 16);
  if ((v5 - 29) <= 0xA)
  {
    v6 = v5 - 33;
    if (v6 < 6 && ((0x3Bu >> v6) & 1) != 0)
      return 0;
  }
  if (*(_BYTE *)(v4 + 16) == 30)
  {
    if ((*(_DWORD *)(v4 + 20) & 0x7FFFFFF) == 3)
      return 0;
  }
  else
  {
    switch(*(_BYTE *)(v4 + 16))
    {
      case 0x1E:
        __break(1u);
        goto LABEL_18;
      case 0x1F:
        v8 = (*(_DWORD *)(v4 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
      case 0x26:
LABEL_18:
        v8 = (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x24:
        v8 = *(_WORD *)(v4 + 18) & 1;
        break;
      case 0x25:
        goto LABEL_15;
      case 0x27:
        v8 = *(_DWORD *)(v4 + 80) + 1;
        break;
      default:
        return 0;
    }
    if (v8 != 1)
      return 0;
  }
LABEL_15:
  if (!llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)this))
    return 0;
  return llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::hasDedicatedExits(this);
}

uint64_t llvm::Loop::getInductionDescriptor(llvm::Loop *this, llvm::ScalarEvolution *a2, llvm::InductionDescriptor *a3)
{
  uint64_t result;

  result = llvm::Loop::getInductionVariable(this, a2);
  if (result)
    return llvm::InductionDescriptor::isInductionPHI(result, this, (uint64_t)a2, (uint64_t)a3, 0, 0);
  return result;
}

BOOL llvm::Loop::isAuxiliaryInductionVariable(llvm::Loop *this, llvm::PHINode *a2, llvm::ScalarEvolution *a3)
{
  _BOOL8 result;
  uint64_t i;
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int isInductionPHI;
  unint64_t v14;
  int32x2_t ****v15;
  int32x2_t *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int32x2_t *****v21;
  int32x2_t ****v22;
  int v23;
  int v24;
  _BOOL8 v25;
  uint64_t v26;
  unint64_t *v27;
  int32x2_t ****v28;
  int v29;
  llvm::SCEV *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)a2 + 5) != **((_QWORD **)this + 4))
    return 0;
  for (i = *((_QWORD *)a2 + 1); i; i = *(_QWORD *)(i + 8))
  {
    v8 = *(_QWORD *)(i + 24);
    if (v8 && *(unsigned __int8 *)(v8 + 16) >= 0x1Cu)
    {
      v10 = sub_1C477672C((uint64_t)this + 56, *(_QWORD *)(v8 + 40));
      v11 = *((_QWORD *)this + 8);
      v12 = v11 == *((_QWORD *)this + 7) ? 76 : 72;
      if (v10 == (_QWORD *)(v11 + 8 * *(unsigned int *)((char *)this + v12)))
        return 0;
    }
  }
  v27 = 0;
  v28 = 0;
  v26 = 6;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = v35;
  v34 = 0x200000000;
  isInductionPHI = llvm::InductionDescriptor::isInductionPHI((unint64_t)a2, this, (uint64_t)a3, (uint64_t)&v26, 0, 0);
  result = 0;
  if (isInductionPHI)
    result = v31
          && (*(unsigned __int8 *)(v31 + 16) | 2) == 0x2B
          && llvm::ScalarEvolution::getLoopDisposition(a3, v30, this) == 1;
  if (v33 != v35)
  {
    v25 = result;
    free(v33);
    result = v25;
  }
  if (v28 && v28 != (int32x2_t ****)-8192 && v28 != (int32x2_t ****)-4096)
  {
    v14 = v26 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF8) = v27;
    if (v27)
    {
      *v27 = *v27 & 7 | v14;
    }
    else
    {
      v15 = v28;
      v16 = ***v28;
      v17 = (unint64_t)v16[303];
      if (v17 <= v14)
      {
        v18 = v16[305].u32[0];
        if (v17 + 16 * v18 > v14)
        {
          v19 = v18 - 1;
          LODWORD(v20) = v19 & ((v28 >> 4) ^ (v28 >> 9));
          v21 = (int32x2_t *****)(v17 + 16 * v20);
          v22 = *v21;
          if (v28 == *v21)
          {
LABEL_33:
            *v21 = (int32x2_t ****)-8192;
            v16[304] = vadd_s32(v16[304], (int32x2_t)0x1FFFFFFFFLL);
            v15 = v28;
          }
          else
          {
            v23 = 1;
            while (v22 != (int32x2_t ****)-4096)
            {
              v24 = v20 + v23++;
              v20 = v24 & v19;
              v22 = *(int32x2_t *****)(v17 + 16 * v20);
              if (v28 == v22)
              {
                v21 = (int32x2_t *****)(v17 + 16 * v20);
                goto LABEL_33;
              }
            }
          }
          *((_BYTE *)v15 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

llvm::LoopNest *llvm::Loop::getLoopGuardBranch(llvm::Loop *this)
{
  uint64_t LoopPredecessor;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  llvm::BasicBlock *v7;
  int v8;
  llvm::LoopNest *result;
  llvm::LoopNest *v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int v13;
  _QWORD *v14;
  const llvm::BasicBlock *v16;

  if (!llvm::Loop::isLoopSimplifyForm(this))
    return 0;
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)this);
  if (!LoopPredecessor)
    goto LABEL_12;
  v3 = *(_QWORD *)(LoopPredecessor + 40);
  if (v3 == LoopPredecessor + 40)
    goto LABEL_12;
  v4 = v3 ? v3 - 24 : 0;
  v5 = *(unsigned __int8 *)(v4 + 16);
  if ((v5 - 29) <= 0xA)
  {
    v6 = v5 - 33;
    if (v6 < 6 && ((0x3Bu >> v6) & 1) != 0)
      goto LABEL_12;
  }
  if (*(_BYTE *)(v4 + 16) == 30)
  {
    if ((*(_DWORD *)(v4 + 20) & 0x7FFFFFF) == 3)
    {
LABEL_12:
      v7 = 0;
      goto LABEL_17;
    }
  }
  else
  {
    v7 = 0;
    switch(*(_BYTE *)(v4 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
        goto LABEL_17;
      case 0x1E:
        __break(1u);
        goto LABEL_43;
      case 0x1F:
        v8 = (*(_DWORD *)(v4 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
      case 0x26:
LABEL_43:
        v8 = (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x24:
        v8 = *(_WORD *)(v4 + 18) & 1;
        break;
      case 0x25:
        goto LABEL_16;
      case 0x27:
        v8 = *(_DWORD *)(v4 + 80) + 1;
        break;
      default:
        goto LABEL_12;
    }
    if (v8 != 1)
      goto LABEL_12;
  }
LABEL_16:
  v7 = (llvm::BasicBlock *)LoopPredecessor;
LABEL_17:
  result = (llvm::LoopNest *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)this);
  if (!result)
    return result;
  if (!llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isLoopExiting((uint64_t)this, (uint64_t)result))
    return 0;
  result = (llvm::LoopNest *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getUniqueExitBlock(this);
  if (!result)
    return result;
  v10 = result;
  result = (llvm::LoopNest *)llvm::BasicBlock::getUniquePredecessor(v7);
  if (!result)
    return result;
  v11 = (_QWORD *)*((_QWORD *)result + 5);
  if (v11 == (_QWORD *)((char *)result + 40))
    return 0;
  result = 0;
  if (v11)
    v12 = v11 - 3;
  else
    v12 = 0;
  v13 = *((unsigned __int8 *)v12 + 16) - 40;
  if (v13 >= 0xFFFFFFF5)
    v14 = v12;
  else
    v14 = 0;
  if (!v11)
    return result;
  if (*((_BYTE *)v14 + 16) != 30 || v13 < 0xFFFFFFF5)
    return result;
  if ((*((_DWORD *)v14 + 5) & 0x7FFFFFF) == 1)
    return 0;
  v16 = (const llvm::BasicBlock *)*(v14 - 4);
  if (v16 == v7)
    v16 = (const llvm::BasicBlock *)*(v14 - 8);
  if (llvm::LoopNest::skipEmptyBlockUntil(v10, v16, (const llvm::BasicBlock *)1) == v16)
    return (llvm::LoopNest *)v14;
  else
    return 0;
}

uint64_t llvm::Loop::isCanonical(llvm::Loop *this, llvm::ScalarEvolution *a2)
{
  uint64_t result;
  llvm::APInt *v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  int32x2_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  llvm::APInt *v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[3];

  v32[2] = *MEMORY[0x1E0C80C00];
  v24 = 0;
  v25 = 0;
  v23 = 6;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = v32;
  v31 = 0x200000000;
  result = llvm::Loop::getInductionVariable(this, a2);
  if (result)
  {
    result = llvm::InductionDescriptor::isInductionPHI(result, this, (uint64_t)a2, (uint64_t)&v23, 0, 0);
    if ((_DWORD)result)
    {
      if (v25 && *(_BYTE *)(v25 + 16) == 16)
      {
        v5 = (llvm::APInt *)(v25 + 24);
        v6 = *(_DWORD *)(v25 + 32);
        if (v6 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v5) == v6)
          {
LABEL_9:
            if (v28)
            {
              if (*(_BYTE *)(v28 + 16) == 41 && !*(_WORD *)(v27 + 24))
              {
                v18 = *(_QWORD *)(v27 + 32);
                if (v18)
                {
                  v19 = (llvm::APInt *)(v18 + 24);
                  v20 = *(_DWORD *)(v18 + 32);
                  if (v20 > 0x40)
                    v21 = llvm::APInt::countLeadingZerosSlowCase(v19) == v20 - 1;
                  else
                    v21 = *(_QWORD *)v19 == 1;
                  result = v21;
                  goto LABEL_13;
                }
              }
            }
          }
        }
        else if (!*(_QWORD *)v5)
        {
          goto LABEL_9;
        }
      }
      result = 0;
    }
  }
LABEL_13:
  if (v30 != v32)
  {
    v22 = result;
    free(v30);
    result = v22;
  }
  if (v25 && v25 != -8192 && v25 != -4096)
  {
    v7 = v23 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF8) = v24;
    if (v24)
    {
      *v24 = *v24 & 7 | v7;
    }
    else
    {
      v8 = v25;
      v9 = ***(int32x2_t ****)v25;
      v10 = (unint64_t)v9[303];
      if (v10 <= v7)
      {
        v11 = v9[305].u32[0];
        if (v10 + 16 * v11 > v7)
        {
          v12 = v11 - 1;
          LODWORD(v13) = v12 & ((v25 >> 4) ^ (v25 >> 9));
          v14 = (uint64_t *)(v10 + 16 * v13);
          v15 = *v14;
          if (v25 == *v14)
          {
LABEL_26:
            *v14 = -8192;
            v9[304] = vadd_s32(v9[304], (int32x2_t)0x1FFFFFFFFLL);
            v8 = v25;
          }
          else
          {
            v16 = 1;
            while (v15 != -4096)
            {
              v17 = v13 + v16++;
              v13 = v17 & v12;
              v15 = *(_QWORD *)(v10 + 16 * v13);
              if (v25 == v15)
              {
                v14 = (uint64_t *)(v10 + 16 * v13);
                goto LABEL_26;
              }
            }
          }
          *(_BYTE *)(v8 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

uint64_t llvm::Loop::isSafeToClone(llvm::Loop *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  _QWORD *i;
  _QWORD *v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v13;

  v1 = *((_QWORD *)this + 4);
  v2 = *((_QWORD *)this + 5);
  if (v2 == v1)
    return 1;
  while (2)
  {
    result = 0;
    v4 = (_QWORD *)(*(_QWORD *)v1 + 40);
    if (*v4)
      v5 = *v4 - 24;
    else
      v5 = 0;
    if (*(unsigned __int8 *)(v5 + 16) - 29 >= 0xB)
      v5 = 0;
    v6 = *(unsigned __int8 *)(v5 + 16);
    if (v6 != 32 && v6 != 39)
    {
      for (i = *(_QWORD **)(*(_QWORD *)v1 + 48); i != v4; i = (_QWORD *)i[1])
      {
        if (i)
          v8 = i - 3;
        else
          v8 = 0;
        v9 = *((unsigned __int8 *)v8 + 16) - 33;
        v10 = v9 > 0x33;
        v11 = (1 << v9) & 0x8000000000041;
        if (!v10 && v11 != 0)
        {
          v13 = i[5];
          if (v13)
          {
            if ((*(_BYTE *)(v13 + 15) & 1) != 0)
              return 0;
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)(i - 3), 24) & 1) != 0)
            return 0;
        }
      }
      v1 += 8;
      if (v1 != v2)
        continue;
      return 1;
    }
    break;
  }
  return result;
}

uint64_t llvm::Loop::getLoopID(llvm::Loop *this)
{
  uint64_t v1;
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[5];

  v30[4] = *MEMORY[0x1E0C80C00];
  v28 = v30;
  v29 = 0x400000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatches((_QWORD **)this, (uint64_t)&v28);
  if ((_DWORD)v29)
  {
    v1 = 0;
    v2 = (char *)v28;
    v3 = (char *)v28 + 8 * v29;
    while (1)
    {
      v4 = *(_QWORD *)(*(_QWORD *)v2 + 40);
      if (v4 == *(_QWORD *)v2 + 40)
      {
        v6 = 0;
      }
      else
      {
        if (v4)
          v5 = v4 - 24;
        else
          v5 = 0;
        if (*(unsigned __int8 *)(v5 + 16) - 29 >= 0xB)
          v6 = 0;
        else
          v6 = v5;
      }
      if ((*(_BYTE *)(v6 + 23) & 0x20) == 0)
        break;
      v7 = ***(_QWORD ***)v6;
      v27 = v6;
      v8 = *(_DWORD *)(v7 + 2496);
      if (v8)
      {
        v9 = *(_QWORD *)(v7 + 2480);
        v10 = v8 - 1;
        v11 = v10 & ((v6 >> 4) ^ (v6 >> 9));
        v12 = (_QWORD *)(v9 + 40 * v11);
        v13 = *v12;
        if (*v12 == v6)
          goto LABEL_22;
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = (_QWORD *)(v9 + 40 * v11);
          v13 = *v12;
          if (*v12 == v6)
            goto LABEL_22;
        }
        if (v14)
          v23 = v14;
        else
          v23 = v12;
      }
      else
      {
        v23 = 0;
      }
      v12 = sub_1C541AB24(v7 + 2480, (uint64_t)&v27, &v27, v23);
      v24 = v27;
      v12[4] = 0;
      v12[3] = 0;
      *v12 = v24;
      v12[1] = v12 + 3;
      v12[2] = 0x100000000;
LABEL_22:
      v18 = *((unsigned int *)v12 + 4);
      if (!(_DWORD)v18)
        break;
      v19 = (_QWORD *)(v12[1] + 8);
      v20 = 16 * v18;
      while (*((_DWORD *)v19 - 2) != 18)
      {
        v21 = 0;
        v19 += 2;
        v20 -= 16;
        if (!v20)
          goto LABEL_44;
      }
      v22 = *v19;
      if (!v22)
        break;
      if (v1)
      {
        if (v22 != v1)
          break;
      }
      else
      {
        v1 = v22;
      }
      v2 += 8;
      if (v2 == v3)
      {
        v25 = *(unsigned int *)(v1 + 8);
        if (!(_DWORD)v25)
          break;
        if (*(_QWORD *)(v1 - 8 * v25) == v1)
          v21 = v1;
        else
          v21 = 0;
        goto LABEL_44;
      }
    }
  }
  v21 = 0;
LABEL_44:
  if (v28 != v30)
    free(v28);
  return v21;
}

void llvm::Loop::setLoopID(llvm::Loop *this, llvm::MDNode *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[5];

  v10[4] = *MEMORY[0x1E0C80C00];
  v8 = v10;
  v9 = 0x400000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatches((_QWORD **)this, (uint64_t)&v8);
  v3 = (char *)v8;
  if ((_DWORD)v9)
  {
    v4 = 8 * v9;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)v3 + 40);
      if (v5 == *(_QWORD *)v3 + 40)
      {
        v7 = 0;
      }
      else
      {
        if (v5)
          v6 = v5 - 24;
        else
          v6 = 0;
        if (*(unsigned __int8 *)(v6 + 16) - 29 >= 0xB)
          v7 = 0;
        else
          v7 = v6;
      }
      if (a2 || *(_QWORD *)(v7 + 48) || (*(_BYTE *)(v7 + 23) & 0x20) != 0)
        llvm::Value::setMetadata((llvm::Value *)v7, 18, a2);
      v3 += 8;
      v4 -= 8;
    }
    while (v4);
    v3 = (char *)v8;
  }
  if (v3 != (char *)v10)
    free(v3);
}

void llvm::Loop::setLoopAlreadyUnrolled(llvm::Loop *this)
{
  uint64_t *v2;
  uint64_t Impl;
  uint64_t LoopID;
  llvm::MDNode *PostTransformationMetadata;
  uint64_t v6;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)****((_QWORD ****)this + 4);
  v7[0] = llvm::MDString::get(v2, "llvm.loop.unroll.disable", 0x18uLL);
  Impl = llvm::MDTuple::getImpl(v2, v7, 1, 0, 1);
  LoopID = llvm::Loop::getLoopID(this);
  v7[0] = "llvm.loop.unroll.";
  v7[1] = 17;
  v6 = Impl;
  PostTransformationMetadata = llvm::makePostTransformationMetadata(v2, LoopID, (uint64_t)v7, 1, &v6, 1);
  llvm::Loop::setLoopID(this, PostTransformationMetadata);
}

llvm::MDNode *llvm::makePostTransformationMetadata(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t i;
  unsigned __int8 *v15;
  uint64_t v16;
  BOOL v17;
  size_t *v18;
  size_t v19;
  const void *v20;
  size_t v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  llvm::MDNode *Impl;
  void *v37;
  uint64_t v38;
  _QWORD v39[5];

  v6 = a6;
  v7 = a5;
  v8 = a1;
  v39[4] = *MEMORY[0x1E0C80C00];
  v37 = v39;
  v39[0] = 0;
  v38 = 0x400000001;
  if (a2 && (v10 = *(unsigned int *)(a2 + 8), v10 >= 2))
  {
    v12 = a3 + 16 * a4;
    v13 = 1;
    for (i = 1; i != v10; ++i)
    {
      v15 = *(unsigned __int8 **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * i);
      if (*v15 - 4 > 0x1E
        || ((v16 = *(_QWORD *)&v15[-8 * *((unsigned int *)v15 + 2)], !*(_BYTE *)v16) ? (v17 = a4 == 0) : (v17 = 1), v17))
      {
LABEL_14:
        if (v13 >= HIDWORD(v38))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, (uint64_t)v39, v13 + 1, 8);
          v13 = v38;
        }
        *((_QWORD *)v37 + v13) = v15;
        v13 = v38 + 1;
        LODWORD(v38) = v38 + 1;
      }
      else
      {
        v18 = *(size_t **)(v16 + 8);
        v21 = *v18;
        v20 = v18 + 3;
        v19 = v21;
        v22 = a3;
        while (1)
        {
          v23 = *(_QWORD *)(v22 + 8);
          if (v19 >= v23 && (!v23 || !memcmp(v20, *(const void **)v22, v23)))
            break;
          v22 += 16;
          if (v22 == v12)
            goto LABEL_14;
        }
      }
    }
    v24 = HIDWORD(v38);
    v8 = a1;
    v6 = a6;
    v7 = a5;
  }
  else
  {
    v13 = 1;
    v24 = 4;
  }
  v25 = ((8 * v6) >> 3) + v13;
  if (v25 > v24)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, (uint64_t)v39, v25, 8);
    v26 = v38;
    v13 = v38;
  }
  else
  {
    v26 = v13;
  }
  v27 = v37;
  if (v6)
  {
    v28 = (char *)v37 + 8 * v26;
    v29 = 8 * v6;
    do
    {
      v30 = *v7++;
      *v28++ = v30;
      v29 -= 8;
    }
    while (v29);
    v27 = v37;
  }
  LODWORD(v38) = v13 + v6;
  Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(v8, v27, v13 + v6, 1, 1);
  llvm::MDNode::replaceOperandWith(Impl, 0, Impl);
  if (v37 != v39)
    free(v37);
  return Impl;
}

void llvm::Loop::setLoopMustProgress(llvm::Loop *this)
{
  uint64_t *v2;
  uint64_t LoopID;
  uint64_t Impl;
  uint64_t v5;
  llvm::MDNode *PostTransformationMetadata;
  uint64_t v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)****((_QWORD ****)this + 4);
  LoopID = llvm::Loop::getLoopID(this);
  if (!llvm::findOptionMDForLoopID(LoopID, "llvm.loop.mustprogress", 0x16uLL))
  {
    v7[0] = (uint64_t)llvm::MDString::get(v2, "llvm.loop.mustprogress", 0x16uLL);
    Impl = llvm::MDTuple::getImpl(v2, v7, 1, 0, 1);
    v5 = llvm::Loop::getLoopID(this);
    v7[0] = Impl;
    PostTransformationMetadata = llvm::makePostTransformationMetadata(v2, v5, 0, 0, v7, 1);
    llvm::Loop::setLoopID(this, PostTransformationMetadata);
  }
}

uint64_t llvm::Loop::getStartLoc@<X0>(llvm::Loop *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  result = llvm::Loop::getLocRange(this, (uint64_t)&v5);
  v4 = v5;
  *a2 = v5;
  if (v4)
    result = llvm::MetadataTracking::track((uint64_t)a2, v4, 2);
  if (v6)
    result = llvm::MetadataTracking::untrack((uint64_t)&v6, v6);
  if (v5)
    return llvm::MetadataTracking::untrack((uint64_t)&v5, v5);
  return result;
}

uint64_t llvm::Loop::getLocRange@<X0>(llvm::Loop *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t LoopID;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t result;
  unsigned __int8 *v11;
  unsigned __int8 **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 **v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;

  LoopID = llvm::Loop::getLoopID(this);
  if (LoopID)
  {
    v37 = 0;
    v6 = (unsigned int *)(LoopID + 8);
    v5 = *(unsigned int *)(LoopID + 8);
    if (v5 >= 2)
    {
      v7 = v5 - 1;
      v8 = LoopID + 8;
      while (1)
      {
        v9 = *(unsigned __int8 **)(v8 - 8 * *v6);
        if (*v9 == 5)
        {
          if (v37)
          {
            v35 = v37;
            llvm::MetadataTracking::track((uint64_t)&v35, v37, 2);
            v34 = v9;
            result = llvm::MetadataTracking::track((uint64_t)&v34, v9, 2);
            v21 = v35;
            *(_QWORD *)a2 = v35;
            if (v21)
            {
              result = llvm::MetadataTracking::retrack((uint64_t)&v35, v21, a2);
              v35 = 0;
            }
            v22 = v34;
            *(_QWORD *)(a2 + 8) = v34;
            v23 = a2 + 8;
            if (v22)
            {
              result = llvm::MetadataTracking::retrack((uint64_t)&v34, v22, v23);
              v34 = 0;
              v11 = v35;
              if (v35)
              {
                v12 = &v35;
                goto LABEL_36;
              }
            }
            goto LABEL_37;
          }
          v36 = *(unsigned __int8 **)(v8 - 8 * *v6);
          llvm::MetadataTracking::track((uint64_t)&v36, v9, 2);
          if (v37)
            llvm::MetadataTracking::untrack((uint64_t)&v37, v37);
          v37 = v36;
          if (v36)
            llvm::MetadataTracking::retrack((uint64_t)&v36, v36, (uint64_t)&v37);
        }
        v8 += 8;
        if (!--v7)
        {
          if (!v37)
            break;
          v33 = v37;
          llvm::MetadataTracking::track((uint64_t)&v33, v37, 2);
          result = (uint64_t)sub_1C4EB5E90((unsigned __int8 **)a2, &v33);
          v11 = v33;
          if (v33)
          {
            v12 = &v33;
            goto LABEL_36;
          }
          goto LABEL_37;
        }
      }
    }
  }
  result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)this);
  if (!result)
    goto LABEL_42;
  v14 = *(_QWORD *)(result + 40);
  result += 40;
  v13 = v14;
  if (v14 == result)
    goto LABEL_42;
  v15 = v13 ? v13 - 24 : 0;
  v16 = *(unsigned __int8 *)(v15 + 16);
  if (v16 - 29 <= 0xA)
  {
    v17 = v16 > 0x26;
    v18 = (1 << v16) & 0x7600000000;
    if (!v17 && v18 != 0)
    {
LABEL_42:
      v27 = **((_QWORD **)this + 4);
      if (v27)
      {
        v28 = *(_QWORD *)(v27 + 40);
        if (v28)
          v29 = v28 - 24;
        else
          v29 = 0;
        if (*(unsigned __int8 *)(v29 + 16) - 29 >= 0xB)
          v29 = 0;
        v30 = *(unsigned __int8 **)(v29 + 48);
        v31 = v30;
        if (v30)
          llvm::MetadataTracking::track((uint64_t)&v31, v30, 2);
        result = (uint64_t)sub_1C4EB5E90((unsigned __int8 **)a2, &v31);
        v24 = v31;
        if (v31)
        {
          v25 = &v31;
          return llvm::MetadataTracking::untrack((uint64_t)v25, v24);
        }
      }
      else
      {
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
      }
      return result;
    }
  }
  if (*(_BYTE *)(v15 + 16) == 30)
  {
    if ((*(_DWORD *)(v15 + 20) & 0x7FFFFFF) == 3)
      goto LABEL_42;
  }
  else
  {
    switch(*(_BYTE *)(v15 + 16))
    {
      case 0x1E:
        __break(1u);
        goto LABEL_56;
      case 0x1F:
        v26 = (*(_DWORD *)(v15 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
      case 0x26:
LABEL_56:
        v26 = (*(_DWORD *)(v15 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x24:
        v26 = *(_WORD *)(v15 + 18) & 1;
        break;
      case 0x25:
        goto LABEL_27;
      case 0x27:
        v26 = *(_DWORD *)(v15 + 80) + 1;
        break;
      default:
        goto LABEL_42;
    }
    if (v26 != 1)
      goto LABEL_42;
  }
LABEL_27:
  v20 = *(unsigned __int8 **)(v15 + 48);
  v37 = v20;
  if (!v20)
    goto LABEL_42;
  result = llvm::MetadataTracking::track((uint64_t)&v37, v20, 2);
  if (!v37)
    goto LABEL_42;
  v32 = v37;
  llvm::MetadataTracking::track((uint64_t)&v32, v37, 2);
  result = (uint64_t)sub_1C4EB5E90((unsigned __int8 **)a2, &v32);
  v11 = v32;
  if (v32)
  {
    v12 = &v32;
LABEL_36:
    result = llvm::MetadataTracking::untrack((uint64_t)v12, v11);
  }
LABEL_37:
  v24 = v37;
  if (v37)
  {
    v25 = &v37;
    return llvm::MetadataTracking::untrack((uint64_t)v25, v24);
  }
  return result;
}

uint64_t llvm::LoopInfo::LoopInfo(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 80;
  *(_QWORD *)(a1 + 72) = 0x400000000;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = a1 + 128;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 1;
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze(a1, a2);
  return a1;
}

{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 80;
  *(_QWORD *)(a1 + 72) = 0x400000000;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = a1 + 128;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 1;
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze(a1, a2);
  return a1;
}

BOOL llvm::LoopInfo::invalidate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  _QWORD v8[2];
  BOOL v9;

  v8[0] = a3;
  v8[1] = &llvm::LoopAnalysis::Key;
  v4 = sub_1C477672C(a3 + 48, (uint64_t)&llvm::LoopAnalysis::Key);
  v5 = *(_QWORD *)(a3 + 56);
  if (v5 == *(_QWORD *)(a3 + 48))
    v6 = (unsigned int *)(a3 + 68);
  else
    v6 = (unsigned int *)(a3 + 64);
  v9 = v4 != (_QWORD *)(v5 + 8 * *v6);
  return !sub_1C4DAA35C((uint64_t)v8) && !sub_1C4DAA3F8((uint64_t)v8) && !sub_1C4DAA49C((uint64_t)v8);
}

uint64_t llvm::LoopInfo::erase(int32x2_t *this, llvm::Loop *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  _DWORD *v8;
  char *v9;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  int32x2_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  _QWORD *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t *v41;
  uint64_t *v42;
  char v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  int32x2_t *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  int v64;
  BOOL v65;
  unsigned int v66;
  _QWORD *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int v72;
  int v73;
  llvm::Loop *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  llvm::Loop *v85;
  llvm::Loop *v86;
  llvm::Loop *v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD **v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  llvm::LoopInfo *v100;
  _QWORD *v101;
  unint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  llvm::Loop *v124;
  _BYTE *v125;
  char *v126;
  _BYTE *v127;
  int64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  __int32 v131;
  __int32 v132;
  uint64_t v133;
  int32x2_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  llvm::Loop *v142;
  int v143;
  int v144;
  uint64_t v145;
  int32x2_t v146;
  llvm::Loop *v147;
  _BYTE *v148;
  char *v149;
  _BYTE *v150;
  int64_t v151;
  uint64_t i;
  _QWORD *v153;
  unint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  llvm::Loop *v166;
  llvm::LoopInfo *v167;
  void *v168[4];
  void *__p;
  uint64_t *v170;
  uint64_t v171[2];
  int v172;
  char v173;
  _QWORD v174[2];
  uint64_t v175[2];
  void *v176;
  uint64_t j;
  _BYTE v178[192];
  _QWORD *v179;
  void *v180;
  unsigned int v181;
  _QWORD v182[26];

  v182[24] = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)a2)
  {
    v129 = (uint64_t *)*((_QWORD *)a2 + 4);
    v130 = (uint64_t *)*((_QWORD *)a2 + 5);
    if (v130 != v129)
    {
      v131 = this[2].i32[0];
      v132 = v131 - 1;
      do
      {
        if (v131)
        {
          v133 = *v129;
          v134 = *this;
          LODWORD(v135) = ((*v129 >> 4) ^ (*v129 >> 9)) & v132;
          v136 = (uint64_t *)(*(_QWORD *)this + 16 * v135);
          v137 = *v136;
          if (*v129 == *v136)
          {
            v140 = ((*v129 >> 4) ^ (*v129 >> 9)) & v132;
LABEL_168:
            v142 = *(llvm::Loop **)(*(_QWORD *)&v134 + 16 * v140 + 8);
          }
          else
          {
            v138 = 1;
            v139 = *v136;
            LODWORD(v140) = ((*v129 >> 4) ^ (*v129 >> 9)) & v132;
            while (v139 != -4096)
            {
              v141 = v140 + v138++;
              v140 = v141 & v132;
              v139 = *(_QWORD *)(*(_QWORD *)&v134 + 16 * v140);
              if (v133 == v139)
                goto LABEL_168;
            }
            v142 = 0;
          }
          if (v142 == a2)
          {
            if (v133 != v137)
            {
              v143 = 1;
              do
              {
                if (v137 == -4096)
                  goto LABEL_176;
                v144 = v135 + v143++;
                v135 = v144 & v132;
                v137 = *(_QWORD *)(*(_QWORD *)&v134 + 16 * v135);
              }
              while (v133 != v137);
              v136 = (uint64_t *)(*(_QWORD *)&v134 + 16 * v135);
            }
            *v136 = -8192;
            this[1] = vadd_s32(this[1], (int32x2_t)0x1FFFFFFFFLL);
          }
        }
LABEL_176:
        ++v129;
      }
      while (v129 != v130);
    }
    v145 = 0;
    v146 = this[3];
    do
    {
      v147 = *(llvm::Loop **)(*(_QWORD *)&v146 + v145);
      v145 += 8;
    }
    while (v147 != a2);
    v148 = (_BYTE *)(v145 + *(_QWORD *)&v146);
    v149 = (char *)(v145 + *(_QWORD *)&v146 - 8);
    v150 = (_BYTE *)this[4];
    v151 = v150 - v148;
    if (v150 != v148)
      memmove(v149, v148, v150 - v148);
    this[4] = (int32x2_t)&v149[v151];
    for (i = *((_QWORD *)a2 + 2); *((_QWORD *)a2 + 1) != i; i = *((_QWORD *)a2 + 2))
    {
      v153 = *(_QWORD **)(i - 8);
      *((_QWORD *)a2 + 2) = i - 8;
      *v153 = 0;
      v155 = (_QWORD *)this[4];
      v154 = (unint64_t)this[5];
      if ((unint64_t)v155 >= v154)
      {
        v157 = (_QWORD *)this[3];
        v158 = v155 - v157;
        v159 = v158 + 1;
        if ((unint64_t)(v158 + 1) >> 61)
LABEL_201:
          abort();
        v160 = v154 - (_QWORD)v157;
        if (v160 >> 2 > v159)
          v159 = v160 >> 2;
        if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFF8)
          v161 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v161 = v159;
        if (v161)
        {
          if (v161 >> 61)
LABEL_202:
            sub_1C4764EE4();
          v162 = (char *)operator new(8 * v161);
        }
        else
        {
          v162 = 0;
        }
        v163 = &v162[8 * v158];
        *(_QWORD *)v163 = v153;
        v156 = v163 + 8;
        if (v155 != v157)
        {
          do
          {
            v164 = *--v155;
            *((_QWORD *)v163 - 1) = v164;
            v163 -= 8;
          }
          while (v155 != v157);
          v155 = (_QWORD *)this[3];
        }
        this[3] = (int32x2_t)v163;
        this[4] = (int32x2_t)v156;
        this[5] = (int32x2_t)&v162[8 * v161];
        if (v155)
          operator delete(v155);
      }
      else
      {
        *v155 = v153;
        v156 = v155 + 1;
      }
      this[4] = (int32x2_t)v156;
    }
    return llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::~LoopBase((uint64_t)a2);
  }
  v166 = a2;
  v167 = (llvm::LoopInfo *)this;
  v4 = sub_1C4DFE414((uint64_t)v168, (uint64_t)a2);
  v173 = 0;
  v171[0] = 0;
  v171[1] = 0;
  v172 = 0;
  if (((*((_QWORD *)v166 + 5) - *((_QWORD *)v166 + 4)) & 0x7FFFFFFF8) != 0)
  {
    v174[0] = v4;
    v174[1] = v167;
    sub_1C4EB5BD8((uint64_t)v174, &v179);
    v5 = 0;
    v175[1] = (uint64_t)v174;
    v176 = v178;
    for (j = 0x800000000; ; v5 = j)
    {
      v6 = v180;
      if (v181 != v5)
        goto LABEL_14;
      if (!v5)
        break;
      v7 = (char *)v180 + 24 * v5;
      v8 = v176;
      v9 = (char *)v180;
      while (*(_QWORD *)v9 == *(_QWORD *)v8 && *((_DWORD *)v9 + 4) == v8[4])
      {
        v9 += 24;
        v8 += 6;
        if (v9 == v7)
          goto LABEL_48;
      }
LABEL_14:
      v11 = *((_QWORD *)v180 + 3 * v181 - 3);
      v12 = *((_DWORD *)v167 + 4);
      v13 = v11 >> 4;
      if (v12)
      {
        v14 = *(_QWORD *)v167;
        v15 = v12 - 1;
        v16 = (v13 ^ (v11 >> 9)) & (v12 - 1);
        v17 = *(_QWORD *)(*(_QWORD *)v167 + 16 * v16);
        if (v11 == v17)
        {
LABEL_19:
          v20 = *(_QWORD **)(v14 + 16 * v16 + 8);
          goto LABEL_21;
        }
        v18 = 1;
        while (v17 != -4096)
        {
          v19 = v16 + v18++;
          v16 = v19 & v15;
          v17 = *(_QWORD *)(v14 + 16 * v16);
          if (v11 == v17)
            goto LABEL_19;
        }
      }
      v20 = 0;
LABEL_21:
      v21 = sub_1C4EB5EEC((uint64_t)&v166, v11, v20);
      if (v21 == v20)
        goto LABEL_39;
      v22 = v21;
      v23 = (int32x2_t *)v167;
      v175[0] = v11;
      v24 = *(_QWORD *)v167;
      v25 = *((_DWORD *)v167 + 4);
      if (v22)
      {
        if (v25)
        {
          v26 = v25 - 1;
          v27 = (v25 - 1) & (v13 ^ (v11 >> 9));
          v28 = (_QWORD *)(v24 + 16 * v27);
          v29 = *v28;
          if (*v28 != v11)
          {
            v30 = 0;
            v31 = 1;
            while (v29 != -4096)
            {
              if (v30)
                v32 = 0;
              else
                v32 = v29 == -8192;
              if (v32)
                v30 = v28;
              v33 = v27 + v31++;
              v27 = v33 & v26;
              v28 = (_QWORD *)(v24 + 16 * (v33 & v26));
              v29 = *v28;
              if (*v28 == v11)
                goto LABEL_38;
            }
            if (v30)
              v34 = v30;
            else
              v34 = v28;
LABEL_37:
            v28 = sub_1C4EB6AAC((uint64_t)v167, (uint64_t)v175, v175, v34);
            *v28 = v175[0];
            v28[1] = 0;
          }
LABEL_38:
          v28[1] = v22;
          goto LABEL_39;
        }
        v34 = 0;
        goto LABEL_37;
      }
      if (v25)
      {
        v35 = v25 - 1;
        LODWORD(v36) = (v25 - 1) & (v13 ^ (v11 >> 9));
        v37 = (uint64_t *)(v24 + 16 * v36);
        v38 = *v37;
        if (v11 == *v37)
        {
LABEL_47:
          *v37 = -8192;
          v23[1] = vadd_s32(v23[1], (int32x2_t)0x1FFFFFFFFLL);
        }
        else
        {
          v39 = 1;
          while (v38 != -4096)
          {
            v40 = v36 + v39++;
            v36 = v40 & v35;
            v38 = *(_QWORD *)(v24 + 16 * v36);
            if (v11 == v38)
            {
              v37 = (uint64_t *)(v24 + 16 * v36);
              goto LABEL_47;
            }
          }
        }
      }
LABEL_39:
      sub_1C4EB5C98((unint64_t)&v179);
    }
LABEL_48:
    if (v176 != v178)
    {
      free(v176);
      v6 = v180;
    }
    if (v6 != v182)
      free(v6);
    if (!v173)
      goto LABEL_92;
LABEL_53:
    v41 = (uint64_t *)__p;
    v42 = v170;
    if (__p == v170)
      goto LABEL_92;
    v43 = 0;
    while (1)
    {
      v44 = *v41;
      v45 = *((_DWORD *)v167 + 4);
      if (v45)
      {
        v46 = *(_QWORD *)v167;
        v47 = v45 - 1;
        v48 = ((v44 >> 4) ^ (v44 >> 9)) & (v45 - 1);
        v49 = *(_QWORD *)(*(_QWORD *)v167 + 16 * v48);
        if (v44 == v49)
        {
LABEL_60:
          v52 = *(_QWORD **)(v46 + 16 * v48 + 8);
          goto LABEL_62;
        }
        v50 = 1;
        while (v49 != -4096)
        {
          v51 = v48 + v50++;
          v48 = v51 & v47;
          v49 = *(_QWORD *)(v46 + 16 * v48);
          if (v44 == v49)
            goto LABEL_60;
        }
      }
      v52 = 0;
LABEL_62:
      v53 = sub_1C4EB5EEC((uint64_t)&v166, v44, v52);
      if (v53 != v52)
      {
        v54 = v53;
        v55 = (int32x2_t *)v167;
        v56 = *v41;
        v179 = (_QWORD *)*v41;
        v57 = *(_QWORD *)v167;
        v58 = *((_DWORD *)v167 + 4);
        if (v54)
        {
          if (!v58)
          {
            v67 = 0;
            goto LABEL_78;
          }
          v59 = v58 - 1;
          v60 = (v58 - 1) & ((v56 >> 4) ^ (v56 >> 9));
          v61 = (_QWORD *)(v57 + 16 * v60);
          v62 = *v61;
          if (*v61 != v56)
          {
            v63 = 0;
            v64 = 1;
            while (v62 != -4096)
            {
              if (v63)
                v65 = 0;
              else
                v65 = v62 == -8192;
              if (v65)
                v63 = v61;
              v66 = v60 + v64++;
              v60 = v66 & v59;
              v61 = (_QWORD *)(v57 + 16 * (v66 & v59));
              v62 = *v61;
              if (*v61 == v56)
                goto LABEL_79;
            }
            if (v63)
              v67 = v63;
            else
              v67 = v61;
LABEL_78:
            v61 = sub_1C4EB6AAC((uint64_t)v167, (uint64_t)&v179, (uint64_t *)&v179, v67);
            *v61 = v179;
            v61[1] = 0;
          }
LABEL_79:
          v61[1] = v54;
        }
        else if (v58)
        {
          v68 = v58 - 1;
          LODWORD(v69) = (v58 - 1) & ((v56 >> 4) ^ (v56 >> 9));
          v70 = (uint64_t *)(v57 + 16 * v69);
          v71 = *v70;
          if (v56 == *v70)
          {
LABEL_90:
            *v70 = -8192;
            v55[1] = vadd_s32(v55[1], (int32x2_t)0x1FFFFFFFFLL);
          }
          else
          {
            v72 = 1;
            while (v71 != -4096)
            {
              v73 = v69 + v72++;
              v69 = v73 & v68;
              v71 = *(_QWORD *)(v57 + 16 * v69);
              if (v56 == v71)
              {
                v70 = (uint64_t *)(v57 + 16 * v69);
                goto LABEL_90;
              }
            }
          }
        }
        v43 = 1;
      }
      if (++v41 == v42)
      {
        if ((v43 & 1) == 0)
          break;
        goto LABEL_53;
      }
    }
  }
LABEL_92:
  v74 = v166;
  v75 = (uint64_t *)*((_QWORD *)v166 + 4);
  v76 = (uint64_t *)*((_QWORD *)v166 + 5);
  if (v76 == v75)
    goto LABEL_112;
  do
  {
    v77 = *v75;
    v179 = 0;
    v78 = *((_DWORD *)v167 + 4);
    if (v78)
    {
      v79 = *(_QWORD *)v167;
      v80 = v78 - 1;
      v81 = (v78 - 1) & ((v77 >> 4) ^ (v77 >> 9));
      v82 = *(_QWORD *)(*(_QWORD *)v167 + 16 * v81);
      if (v77 == v82)
      {
LABEL_98:
        v85 = *(llvm::Loop **)(v79 + 16 * v81 + 8);
        goto LABEL_100;
      }
      v83 = 1;
      while (v82 != -4096)
      {
        v84 = v81 + v83++;
        v81 = v84 & v80;
        v82 = *(_QWORD *)(v79 + 16 * v81);
        if (v77 == v82)
          goto LABEL_98;
      }
    }
    v85 = 0;
LABEL_100:
    v179 = v85;
    v86 = v166;
    if (v85 == v166)
    {
LABEL_106:
      while (1)
      {
        v85 = *(llvm::Loop **)v85;
        if (v85 == v166)
          break;
        v179 = v85;
      }
      v85 = (llvm::Loop *)sub_1C4EB63C4(v171, &v179)[1];
      v179 = v85;
      v86 = v166;
    }
    else
    {
      v87 = v85;
      while (v87)
      {
        v87 = *(llvm::Loop **)v87;
        if (v87 == v166)
          goto LABEL_106;
      }
    }
    v88 = *(_QWORD **)v86;
    if (*(llvm::Loop **)v86 != v85)
    {
      do
      {
        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::removeBlockFromLoop((uint64_t)v88, v77);
        v88 = (_QWORD *)*v88;
      }
      while (v88 != v179);
    }
    ++v75;
  }
  while (v75 != v76);
  v74 = v166;
LABEL_112:
  v91 = *((_QWORD *)v74 + 2);
  v89 = (_QWORD *)((char *)v74 + 16);
  v90 = v91;
  if (*(v89 - 1) != v91)
  {
    do
    {
      v179 = 0;
      v93 = *(_QWORD **)(v90 - 8);
      v92 = (_QWORD **)(v90 - 8);
      v179 = v93;
      v94 = *v92;
      *v89 = v92;
      *v94 = 0;
      v95 = (_QWORD *)sub_1C4EB63C4(v171, &v179)[1];
      if (v95)
      {
        v96 = v179;
        *v179 = v95;
        v98 = (_QWORD *)v95[2];
        v97 = v95[3];
        if ((unint64_t)v98 >= v97)
        {
          v105 = (_QWORD *)v95[1];
          v106 = v98 - v105;
          v107 = v106 + 1;
          if ((unint64_t)(v106 + 1) >> 61)
            goto LABEL_201;
          v108 = v97 - (_QWORD)v105;
          if (v108 >> 2 > v107)
            v107 = v108 >> 2;
          if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF8)
            v109 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v109 = v107;
          if (v109)
          {
            if (v109 >> 61)
              goto LABEL_202;
            v110 = (char *)operator new(8 * v109);
          }
          else
          {
            v110 = 0;
          }
          v117 = &v110[8 * v106];
          *(_QWORD *)v117 = v96;
          v99 = v117 + 8;
          if (v98 != v105)
          {
            do
            {
              v118 = *--v98;
              *((_QWORD *)v117 - 1) = v118;
              v117 -= 8;
            }
            while (v98 != v105);
            v98 = (_QWORD *)v95[1];
          }
          v95[1] = v117;
          v95[2] = v99;
          v95[3] = &v110[8 * v109];
          if (v98)
            operator delete(v98);
        }
        else
        {
          *v98 = v96;
          v99 = v98 + 1;
        }
        v95[2] = v99;
      }
      else
      {
        v100 = v167;
        v101 = v179;
        v103 = (_QWORD *)*((_QWORD *)v167 + 4);
        v102 = *((_QWORD *)v167 + 5);
        if ((unint64_t)v103 >= v102)
        {
          v111 = (_QWORD *)*((_QWORD *)v167 + 3);
          v112 = v103 - v111;
          v113 = v112 + 1;
          if ((unint64_t)(v112 + 1) >> 61)
            goto LABEL_201;
          v114 = v102 - (_QWORD)v111;
          if (v114 >> 2 > v113)
            v113 = v114 >> 2;
          if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8)
            v115 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v115 = v113;
          if (v115)
          {
            if (v115 >> 61)
              goto LABEL_202;
            v116 = (char *)operator new(8 * v115);
          }
          else
          {
            v116 = 0;
          }
          v119 = &v116[8 * v112];
          *(_QWORD *)v119 = v101;
          v104 = v119 + 8;
          if (v103 != v111)
          {
            do
            {
              v120 = *--v103;
              *((_QWORD *)v119 - 1) = v120;
              v119 -= 8;
            }
            while (v103 != v111);
            v103 = (_QWORD *)*((_QWORD *)v100 + 3);
          }
          *((_QWORD *)v100 + 3) = v119;
          *((_QWORD *)v100 + 4) = v104;
          *((_QWORD *)v100 + 5) = &v116[8 * v115];
          if (v103)
            operator delete(v103);
        }
        else
        {
          *v103 = v179;
          v104 = v103 + 1;
        }
        *((_QWORD *)v100 + 4) = v104;
      }
      v89 = (_QWORD *)((char *)v166 + 16);
      v90 = *((_QWORD *)v166 + 2);
    }
    while (*((_QWORD *)v166 + 1) != v90);
  }
  v121 = 0;
  v122 = *(_QWORD *)a2;
  v123 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  do
  {
    v124 = *(llvm::Loop **)(v123 + v121);
    v121 += 8;
  }
  while (v124 != a2);
  v125 = (_BYTE *)(v121 + v123);
  v126 = (char *)(v121 + v123 - 8);
  v127 = *(_BYTE **)(v122 + 16);
  v128 = v127 - v125;
  if (v127 != v125)
    memmove(v126, v125, v127 - v125);
  *(_QWORD *)(v122 + 16) = &v126[v128];
  *(_QWORD *)a2 = 0;
  MEMORY[0x1CAA32FB4](v171[0], 8);
  if (__p)
  {
    v170 = (uint64_t *)__p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v168[1], 8);
  return llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::~LoopBase((uint64_t)a2);
}

BOOL llvm::LoopInfo::wouldBeOutOfLoopUseRequiringLCSSA(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 12)
    return 0;
  if (*(unsigned __int8 *)(a2 + 16) < 0x1Cu)
    return 0;
  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *a1;
  v7 = v4 - 1;
  v8 = ((v5 >> 4) ^ (v5 >> 9)) & (v4 - 1);
  v9 = *(_QWORD *)(*a1 + 16 * v8);
  if (v5 != v9)
  {
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v8 + v10++;
      v8 = v11 & v7;
      v9 = *(_QWORD *)(v6 + 16 * v8);
      if (v5 == v9)
        goto LABEL_9;
    }
    return 0;
  }
LABEL_9:
  v12 = *(_QWORD *)(v6 + 16 * v8 + 8);
  if (!v12)
    return 0;
  v13 = sub_1C477672C(v12 + 56, a3);
  v14 = *(_QWORD *)(v12 + 64);
  v15 = 72;
  if (v14 == *(_QWORD *)(v12 + 56))
    v15 = 76;
  return v13 == (_QWORD *)(v14 + 8 * *(unsigned int *)(v12 + v15));
}

void llvm::LoopAnalysis::run(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = a3 + 80;
  *(_QWORD *)(a3 + 72) = 0x400000000;
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a3 + 112) = a3 + 128;
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 136) = 1;
  v4 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, a1) + 8;
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze(a3, v4);
}

unsigned __int8 *llvm::findOptionMDForLoopID(uint64_t a1, void *__s1, size_t __n)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  const void *v12;
  uint64_t v13;

  if (!a1)
    return 0;
  v4 = a1 + 8;
  v3 = *(unsigned int *)(a1 + 8);
  if (v3 < 2)
    return 0;
  v7 = -8 * v3;
  while (1)
  {
    v8 = *(unsigned __int8 **)(v4 + v7);
    if (*v8 - 4 <= 0x1E)
    {
      v9 = *((unsigned int *)v8 + 2);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD *)&v8[-8 * v9];
        if (!*(_BYTE *)v10)
        {
          v11 = *(uint64_t **)(v10 + 8);
          v13 = *v11;
          v12 = v11 + 3;
          if (__n == v13 && (!__n || !memcmp(__s1, v12, __n)))
            break;
        }
      }
    }
    v7 += 8;
    if (v7 == -8)
      return 0;
  }
  return v8;
}

unsigned __int8 *llvm::findStringMetadataForLoop(llvm::Loop *a1, void *a2, size_t a3)
{
  uint64_t LoopID;
  unsigned __int8 *result;
  uint64_t v7;

  LoopID = llvm::Loop::getLoopID(a1);
  result = llvm::findOptionMDForLoopID(LoopID, a2, a3);
  if (result)
  {
    v7 = *((unsigned int *)result + 2);
    if ((_DWORD)v7 == 1)
      return 0;
    else
      return &result[-8 * v7 + 8];
  }
  return result;
}

uint64_t llvm::getOptionalBoolLoopAttribute(llvm::Loop *a1, void *a2, size_t a3)
{
  uint64_t LoopID;
  unsigned __int8 *OptionMDForLoopID;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  LoopID = llvm::Loop::getLoopID(a1);
  OptionMDForLoopID = llvm::findOptionMDForLoopID(LoopID, a2, a3);
  if (OptionMDForLoopID)
  {
    v7 = *((unsigned int *)OptionMDForLoopID + 2);
    if ((_DWORD)v7 != 1)
    {
      v8 = *(_QWORD *)&OptionMDForLoopID[-8 * v7 + 8];
      if (v8 && (v9 = *(_QWORD *)(v8 + 128)) != 0)
      {
        v7 = v9 + 24;
        if (*(_DWORD *)(v9 + 32) >= 0x41u)
          v7 = *(_QWORD *)v7;
        LODWORD(v7) = *(_QWORD *)v7 != 0;
      }
      else
      {
        LODWORD(v7) = 1;
      }
    }
    v10 = 1;
  }
  else
  {
    LODWORD(v7) = 0;
    v10 = 0;
  }
  return v7 | (v10 << 8);
}

BOOL llvm::getBooleanLoopAttribute(llvm::Loop *a1, void *a2, size_t a3)
{
  return (unsigned __int16)llvm::getOptionalBoolLoopAttribute(a1, a2, a3) > 0x100u;
}

uint64_t llvm::getOptionalIntLoopAttribute(llvm::Loop *a1, void *a2, size_t a3)
{
  uint64_t LoopID;
  unsigned __int8 *OptionMDForLoopID;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  LoopID = llvm::Loop::getLoopID(a1);
  OptionMDForLoopID = llvm::findOptionMDForLoopID(LoopID, a2, a3);
  if (!OptionMDForLoopID || (v11 = *((unsigned int *)OptionMDForLoopID + 2), (_DWORD)v11 == 1))
  {
    v7 = 0;
LABEL_3:
    v8 = 0;
    v9 = 0;
    return v8 | v7 | v9;
  }
  v7 = *(_QWORD *)&OptionMDForLoopID[-8 * v11 + 8];
  if (!v7)
    goto LABEL_3;
  v7 = *(_QWORD *)(v7 + 128);
  if (!v7)
    goto LABEL_3;
  v12 = *(_DWORD *)(v7 + 32);
  if (v12 > 0x40)
    v13 = **(_QWORD **)(v7 + 24);
  else
    v13 = (uint64_t)(*(_QWORD *)(v7 + 24) << -(char)v12) >> -(char)v12;
  v9 = v13 & 0xFFFFFF00;
  v8 = v13;
  v7 = 0x100000000;
  return v8 | v7 | v9;
}

uint64_t llvm::getIntLoopAttribute(llvm::Loop *a1, void *a2, size_t a3, uint64_t a4)
{
  uint64_t LoopID;
  unsigned __int8 *OptionMDForLoopID;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  LoopID = llvm::Loop::getLoopID(a1);
  OptionMDForLoopID = llvm::findOptionMDForLoopID(LoopID, a2, a3);
  if (OptionMDForLoopID)
  {
    v10 = *((unsigned int *)OptionMDForLoopID + 2);
    if ((_DWORD)v10 != 1)
    {
      v11 = *(_QWORD *)&OptionMDForLoopID[-8 * v10 + 8];
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 128);
        if (v12)
        {
          v13 = *(_DWORD *)(v12 + 32);
          if (v13 > 0x40)
            return **(_QWORD **)(v12 + 24);
          else
            return (uint64_t)(*(_QWORD *)(v12 + 24) << -(char)v13) >> -(char)v13;
        }
      }
    }
  }
  return a4;
}

uint64_t llvm::isFinite(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 32) + 56) + 112);
  if (v1)
    return (*(unsigned __int8 *)(v1 + 20) >> 1) & 1;
  else
    return 0;
}

BOOL llvm::hasMustProgress(llvm *this, const llvm::Loop *a2)
{
  return (unsigned __int16)llvm::getOptionalBoolLoopAttribute(this, "llvm.loop.mustprogress", 0x16uLL) > 0x100u;
}

BOOL llvm::isMustProgress(llvm *this, const llvm::Loop *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(**((_QWORD **)this + 4) + 56) + 112);
  return v2 && ((*(_BYTE *)(v2 + 14) & 1) != 0 || (*(_BYTE *)(v2 + 20) & 2) != 0)
      || (unsigned __int16)llvm::getOptionalBoolLoopAttribute(this, "llvm.loop.mustprogress", 0x16uLL) > 0x100u;
}

BOOL llvm::isValidAsAccessGroup(uint64_t a1)
{
  return !*(_DWORD *)(a1 + 8) && (*(_BYTE *)(a1 + 1) & 0x7F) == 1;
}

void llvm::initializeLoopInfoWrapperPassPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82E050);
  if (v1 != -1)
  {
    v4[0] = sub_1C4EB59B4;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82E050, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4EB59B4(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeDominatorTreeWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Natural Loop Information";
  *(_QWORD *)(v2 + 8) = 24;
  *(_QWORD *)(v2 + 16) = "loops";
  *(_QWORD *)(v2 + 24) = 5;
  *(_QWORD *)(v2 + 32) = &llvm::LoopInfoWrapperPass::ID;
  *(_WORD *)(v2 + 40) = 257;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::LoopInfoWrapperPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::LoopInfoWrapperPass::runOnFunction(void ****this, llvm::Function *a2)
{
  void **v3;
  void *v4;
  uint64_t v5;

  ((void (*)(void ****, llvm::Function *))(*this)[11])(this, a2);
  v3 = *this[1];
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::DominatorTreeWrapperPass::ID);
  v5 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::DominatorTreeWrapperPass::ID);
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze((uint64_t)(this + 4), v5 + 32);
  return 0;
}

void llvm::LoopBlocksDFS::perform(llvm::LoopBlocksDFS *this, llvm::LoopInfo *a2)
{
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  _DWORD *v5;
  char *v6;
  _QWORD v8[3];
  void *v9;
  uint64_t i;
  _BYTE v11[192];
  uint64_t v12;
  void *v13;
  int v14;
  _QWORD v15[25];

  v15[24] = *MEMORY[0x1E0C80C00];
  v8[0] = this;
  v8[1] = a2;
  sub_1C4EB5BD8((uint64_t)v8, &v12);
  v2 = 0;
  v8[2] = v8;
  v9 = v11;
  for (i = 0x800000000; ; v2 = i)
  {
    if (v14 != v2)
      goto LABEL_3;
    v3 = v13;
    if (!v2)
      break;
    v4 = (char *)v13 + 24 * v2;
    v5 = v9;
    v6 = (char *)v13;
    while (*(_QWORD *)v6 == *(_QWORD *)v5 && *((_DWORD *)v6 + 4) == v5[4])
    {
      v6 += 24;
      v5 += 6;
      if (v6 == v4)
        goto LABEL_5;
    }
LABEL_3:
    sub_1C4EB5C98((unint64_t)&v12);
  }
LABEL_5:
  if (v9 != v11)
  {
    free(v9);
    v3 = v13;
  }
  if (v3 != v15)
    free(v3);
}

void sub_1C4EB5BD8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  int v5;
  _QWORD v6[25];

  v6[24] = *MEMORY[0x1E0C80C00];
  sub_1C4EB6424(**(_QWORD **)(**(_QWORD **)a1 + 32), a1, &v3);
  *a2 = v3;
  a2[1] = a2 + 3;
  a2[2] = 0x800000000;
  if (v5)
    sub_1C4DB2150((uint64_t)(a2 + 1), (uint64_t *)&v4);
  if (v4 != v6)
    free(v4);
}

unint64_t sub_1C4EB5C98(unint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  _QWORD *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;

  v2 = *(uint64_t **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * *(unsigned int *)(a1 + 16) - 24);
  v23 = v3;
  v4 = *v2;
  v5 = *(uint64_t **)(*v2 + 40);
  if ((unint64_t)v5 >= *(_QWORD *)(*v2 + 48))
  {
    v6 = sub_1C4DFEA3C((void **)(v4 + 32), &v23);
  }
  else
  {
    *v5 = v3;
    v6 = v5 + 1;
  }
  *(_QWORD *)(v4 + 40) = v6;
  v7 = *v2 + 8;
  v8 = *(_QWORD *)v7;
  v10 = *(_QWORD *)(*v2 + 32);
  v9 = *(_QWORD *)(*v2 + 40);
  v11 = *(_DWORD *)(v7 + 16);
  if (v11)
  {
    v12 = v11 - 1;
    v13 = ((v23 >> 4) ^ (v23 >> 9)) & (v11 - 1);
    v14 = (_QWORD *)(v8 + 16 * v13);
    v15 = *v14;
    if (v23 == *v14)
      goto LABEL_5;
    v18 = 0;
    v19 = 1;
    while (v15 != -4096)
    {
      if (v18)
        v20 = 0;
      else
        v20 = v15 == -8192;
      if (v20)
        v18 = v14;
      v21 = v13 + v19++;
      v13 = v21 & v12;
      v14 = (_QWORD *)(v8 + 16 * (v21 & v12));
      v15 = *v14;
      if (v23 == *v14)
        goto LABEL_5;
    }
    if (v18)
      v22 = v18;
    else
      v22 = v14;
  }
  else
  {
    v22 = 0;
  }
  v14 = sub_1C4DE3FA0(v7, (uint64_t)&v23, &v23, v22);
  *v14 = v23;
  *((_DWORD *)v14 + 2) = 0;
LABEL_5:
  *((_DWORD *)v14 + 2) = (unint64_t)(v9 - v10) >> 3;
  v16 = *(_DWORD *)(a1 + 16) - 1;
  *(_DWORD *)(a1 + 16) = v16;
  if (v16)
    sub_1C4EB65B4(a1);
  return a1;
}

uint64_t sub_1C4EB5DD4(uint64_t a1)
{
  int v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2 || *(_DWORD *)(a1 + 44))
  {
    v7 = (_DWORD *)(a1 + 32);
    v8 = *(unsigned int *)(a1 + 48);
    if (v8 <= 4 * v2 || v8 < 0x41)
    {
      if ((_DWORD)v8)
      {
        v9 = *(_QWORD **)v7;
        v10 = 16 * v8;
        do
        {
          *v9 = -4096;
          v9 += 2;
          v10 -= 16;
        }
        while (v10);
      }
      *(_QWORD *)(a1 + 40) = 0;
    }
    else
    {
      sub_1C476B2A4(v7);
    }
  }
  v3 = *(uint64_t **)(a1 + 56);
  v4 = *(uint64_t **)(a1 + 64);
  if (v3 != v4)
  {
    do
    {
      v6 = *v3++;
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::~LoopBase(v6);
    }
    while (v3 != v4);
    v3 = *(uint64_t **)(a1 + 56);
  }
  *(_QWORD *)(a1 + 64) = v3;
  return sub_1C4926A50(a1 + 80);
}

uint64_t sub_1C4EB5E78(uint64_t result)
{
  char v1;

  v1 = *(_BYTE *)(result + 145);
  if (v1)
    v1 = *(_BYTE *)(result + 144);
  **(_BYTE **)(result + 128) = v1;
  return result;
}

unsigned __int8 **sub_1C4EB5E90(unsigned __int8 **a1, unsigned __int8 **a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;

  v4 = *a2;
  *a1 = v4;
  if (v4)
    llvm::MetadataTracking::track((uint64_t)a1, v4, 2);
  v5 = *a2;
  a1[1] = *a2;
  if (v5)
    llvm::MetadataTracking::track((uint64_t)(a1 + 1), v5, 2);
  return a1;
}

_QWORD *sub_1C4EB5EEC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;

  v3 = a3;
  v40 = 0;
  v6 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 != a3)
  {
    v7 = a3;
    while (v7)
    {
      v7 = (_QWORD *)*v7;
      if (v7 == v6)
      {
        v8 = a3;
        do
        {
          v9 = v8;
          v40 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8 != v6);
        v38 = v9;
        v39 = v6;
        v41 = 0;
        if (sub_1C4850EC8((uint64_t *)(a1 + 72), &v38, &v41))
        {
          v10 = (_QWORD *)v41[1];
        }
        else
        {
          v37 = sub_1C4E85244(a1 + 72, (uint64_t)&v38, &v38, v41);
          *v37 = v38;
          v10 = v39;
          v37[1] = v39;
        }
        goto LABEL_10;
      }
    }
  }
  v9 = 0;
  v10 = a3;
LABEL_10:
  v11 = *(_QWORD *)(a2 + 40);
  if (v11 != a2 + 40)
  {
    if (v11)
      v12 = v11 - 24;
    else
      v12 = 0;
    v13 = *(unsigned __int8 *)(v12 + 16);
    v14 = v13 - 29;
    if (v13 != 30)
    {
      v15 = 2;
      v19 = 0;
      switch(v14)
      {
        case 1:
          __break(1u);
          goto LABEL_63;
        case 2:
          v15 = (*(_DWORD *)(v12 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_18;
        case 3:
        case 9:
LABEL_63:
          v15 = (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_18;
        case 4:
          goto LABEL_19;
        case 7:
          v15 = *(_WORD *)(v12 + 18) & 1;
          goto LABEL_18;
        case 8:
          v15 = 1;
          goto LABEL_19;
        case 10:
          v15 = *(_DWORD *)(v12 + 80) + 1;
          goto LABEL_18;
        default:
          goto LABEL_55;
      }
    }
    v15 = (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) == 3 ? 2 : 1;
LABEL_18:
    if (v15)
    {
LABEL_19:
      v16 = 0;
      v17 = v11 - 56;
      v18 = v15;
      v19 = v10;
      while (1)
      {
        v20 = *(unsigned __int8 *)(v11 - 8);
        if (v20 != 30)
          __asm { BR              X9 }
        if (*(_QWORD *)(v17 - 32 * v16) == a2)
          goto LABEL_51;
        v38 = 0;
        v21 = *(uint64_t **)(a1 + 8);
        v22 = *(unsigned __int8 *)(v11 - 8);
        if (v22 != 30)
          __asm { BR              X10 }
        v23 = *(_QWORD *)(v17 - 32 * v16);
        v24 = *((_DWORD *)v21 + 4);
        if (v24)
        {
          v25 = *v21;
          v26 = v24 - 1;
          v27 = ((v23 >> 4) ^ (v23 >> 9)) & (v24 - 1);
          v28 = *(_QWORD *)(v25 + 16 * v27);
          if (v23 == v28)
          {
LABEL_28:
            v31 = *(_QWORD **)(v25 + 16 * v27 + 8);
            goto LABEL_30;
          }
          v29 = 1;
          while (v28 != -4096)
          {
            v30 = v27 + v29++;
            v27 = v30 & v26;
            v28 = *(_QWORD *)(v25 + 16 * v27);
            if (v23 == v28)
              goto LABEL_28;
          }
        }
        v31 = 0;
LABEL_30:
        v38 = v31;
        v32 = *(_QWORD **)a1;
        v33 = v31;
        if (v31 != *(_QWORD **)a1)
        {
          while (v33)
          {
            v33 = (_QWORD *)*v33;
            if (v33 == v32)
            {
              if (v9)
                goto LABEL_51;
              v31 = (_QWORD *)sub_1C4EB63C4((uint64_t *)(a1 + 72), &v38)[1];
              v38 = v31;
              v32 = *(_QWORD **)a1;
              break;
            }
          }
          if (v31 == v32)
            goto LABEL_51;
          if (v31)
          {
            v34 = v32;
            while (v34)
            {
              v34 = (_QWORD *)*v34;
              if (v34 == v31)
                goto LABEL_40;
            }
            v31 = (_QWORD *)*v31;
            v38 = v31;
            if (!v19)
              goto LABEL_50;
          }
          else
          {
LABEL_40:
            if (!v19)
            {
LABEL_50:
              v19 = v31;
              goto LABEL_51;
            }
          }
          if (v19 != v32 && v31 != v19)
          {
            v35 = v31;
            while (v35)
            {
              v35 = (_QWORD *)*v35;
              if (v35 == v19)
                goto LABEL_50;
            }
            goto LABEL_51;
          }
          goto LABEL_50;
        }
        *(_BYTE *)(a1 + 96) = 1;
LABEL_51:
        if (++v16 == v18)
          goto LABEL_55;
      }
    }
  }
  v19 = 0;
LABEL_55:
  if (!v9)
    return v19;
  sub_1C4EB63C4((uint64_t *)(a1 + 72), &v40)[1] = v19;
  return v3;
}

_QWORD *sub_1C4EB63C4(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4850EC8(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4E85244((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void sub_1C4EB6424(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  void *v5;
  int v6;
  _QWORD v7[25];

  v7[24] = *MEMORY[0x1E0C80C00];
  sub_1C4EB64D8(&v4, a1, a2);
  *a3 = v4;
  a3[1] = a3 + 3;
  a3[2] = 0x800000000;
  if (v6)
    sub_1C4DB22B8((uint64_t)(a3 + 1), (uint64_t *)&v5);
  if (v5 != v7)
    free(v5);
}

uint64_t *sub_1C4EB64D8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];

  *a1 = a3;
  a1[1] = (uint64_t)(a1 + 3);
  v5 = (uint64_t)(a1 + 1);
  a1[2] = 0x800000000;
  if (sub_1C4EB685C(a3, a2))
  {
    v6 = *(_QWORD *)(a2 + 40);
    if (v6 == a2 + 40)
    {
      v7 = 0;
    }
    else
    {
      if (v6)
        v7 = v6 - 24;
      else
        v7 = 0;
      if (*(unsigned __int8 *)(v7 + 16) - 29 >= 0xB)
        v7 = 0;
    }
    v12[0] = a2;
    v12[1] = v7;
    v12[2] = 0;
    v8 = sub_1C4926708(v5, (unint64_t)v12, 1);
    v9 = a1[1] + 24 * *((unsigned int *)a1 + 4);
    v10 = *(_OWORD *)v8;
    *(_QWORD *)(v9 + 16) = *(_QWORD *)(v8 + 16);
    *(_OWORD *)v9 = v10;
    ++*((_DWORD *)a1 + 4);
    sub_1C4EB65B4((unint64_t)a1);
  }
  return a1;
}

unint64_t sub_1C4EB65B4(unint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v20[3];

  v2 = result;
  v3 = result + 8;
  while (1)
  {
    v4 = *(_QWORD *)(v2 + 8) + 24 * *(unsigned int *)(v2 + 16);
    v5 = *(_QWORD *)(v4 - 24);
    v6 = *(_QWORD *)(v5 + 40);
    if (v6 == v5 + 40)
    {
LABEL_23:
      LODWORD(v10) = 0;
    }
    else
    {
      v7 = v6 - 24;
      if (!v6)
        v7 = 0;
      v8 = *(unsigned __int8 *)(v7 + 16);
      v9 = v8 - 29;
      if (v8 == 30)
      {
        LODWORD(v10) = (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) == 3 ? 2 : 1;
      }
      else
      {
        v10 = 0;
        switch(v9)
        {
          case 0:
          case 5:
          case 6:
            break;
          case 1:
            __break(1u);
            goto LABEL_25;
          case 2:
            LODWORD(v10) = (*(_DWORD *)(v7 + 20) >> 1) & 0x3FFFFFF;
            break;
          case 3:
          case 9:
            LODWORD(v10) = (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) - 1;
            break;
          case 4:
            LODWORD(v10) = 2;
            break;
          case 7:
            LODWORD(v10) = *(_WORD *)(v7 + 18) & 1;
            break;
          case 8:
            LODWORD(v10) = 1;
            break;
          case 10:
            LODWORD(v10) = *(_DWORD *)(v7 + 80) + 1;
            break;
          default:
            goto LABEL_23;
        }
      }
    }
    if (*(_DWORD *)(v4 - 8) == (_DWORD)v10)
      return result;
    v11 = *(_QWORD *)(v4 - 16);
    v12 = *(_QWORD *)(v4 - 8);
    *(_DWORD *)(v4 - 8) = v12 + 1;
    v13 = *(unsigned __int8 *)(v11 + 16);
    if (v13 != 30)
      __asm { BR              X12 }
    v14 = (uint64_t *)(v11 - 32 * v12 - 32);
    v1 = *v14;
    result = sub_1C4EB685C(*(_QWORD *)v2, *v14);
    if ((_DWORD)result)
    {
      v4 = v1 + 40;
      v10 = *(_QWORD *)(v1 + 40);
      if (v10 == v1 + 40 || v10 == 0)
      {
LABEL_25:
        if (v10 == v4)
        {
          v16 = 0;
          goto LABEL_19;
        }
        v16 = v10 - 24;
        if (!v10)
          v16 = 0;
        v17 = (unsigned __int8 *)(v16 + 16);
      }
      else
      {
        v16 = v10 - 24;
        v17 = (unsigned __int8 *)(v10 - 8);
      }
      if (*v17 - 29 >= 0xB)
        v16 = 0;
LABEL_19:
      v20[0] = v1;
      v20[1] = v16;
      v20[2] = 0;
      result = sub_1C4926708(v3, (unint64_t)v20, 1);
      v18 = *(_QWORD *)(v2 + 8) + 24 * *(unsigned int *)(v2 + 16);
      v19 = *(_OWORD *)result;
      *(_QWORD *)(v18 + 16) = *(_QWORD *)(result + 16);
      *(_OWORD *)v18 = v19;
      ++*(_DWORD *)(v2 + 16);
    }
  }
}

uint64_t sub_1C4EB685C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;

  v3 = *(_QWORD **)a1;
  v4 = *(uint64_t **)(a1 + 8);
  v5 = *((_DWORD *)v4 + 4);
  v6 = a2 >> 4;
  if (v5)
  {
    v7 = *v4;
    v8 = v5 - 1;
    v9 = (v5 - 1) & (v6 ^ (a2 >> 9));
    v10 = *(_QWORD *)(v7 + 16 * v9);
    if (v10 == a2)
    {
LABEL_6:
      v13 = *(_QWORD **)(v7 + 16 * v9 + 8);
      goto LABEL_10;
    }
    v11 = 1;
    while (v10 != -4096)
    {
      v12 = v9 + v11++;
      v9 = v12 & v8;
      v10 = *(_QWORD *)(v7 + 16 * v9);
      if (v10 == a2)
        goto LABEL_6;
    }
  }
  v13 = 0;
LABEL_10:
  while (v13 != (_QWORD *)*v3)
  {
    if (!v13)
      return 0;
    v13 = (_QWORD *)*v13;
  }
  v16 = v3[1];
  v14 = (uint64_t)(v3 + 1);
  v15 = v16;
  v30 = a2;
  v31 = 0;
  v17 = *(_DWORD *)(v14 + 16);
  if (v17)
  {
    v18 = v17 - 1;
    v19 = v18 & (v6 ^ (a2 >> 9));
    v20 = (_QWORD *)(v15 + 16 * v19);
    v21 = *v20;
    if (*v20 == a2)
      return 0;
    v24 = 0;
    v25 = 1;
    while (v21 != -4096)
    {
      v22 = 0;
      if (v24)
        v26 = 0;
      else
        v26 = v21 == -8192;
      if (v26)
        v24 = v20;
      v27 = v19 + v25++;
      v19 = v27 & v18;
      v20 = (_QWORD *)(v15 + 16 * v19);
      v21 = *v20;
      if (*v20 == a2)
        return v22;
    }
    if (v24)
      v28 = v24;
    else
      v28 = v20;
  }
  else
  {
    v28 = 0;
  }
  v29 = sub_1C4DE3FA0(v14, (uint64_t)&v30, &v30, v28);
  *v29 = v30;
  *((_DWORD *)v29 + 2) = v31;
  return 1;
}

uint64_t sub_1C4EB69AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;

  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 16);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * v6);
  *v7 = a2;
  v7[1] = a3;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v7;
  return *(_QWORD *)a1 + 16 * v7 - 16;
}

unsigned int *sub_1C4EB6A24(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v6 = a3;
  v7 = result;
  v8 = a3 - a5;
  v9 = result[2];
  v10 = v9 + ((a3 - a5) >> 3);
  if (v10 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v10, 8);
    v9 = v7[2];
  }
  if (v6 != a5)
  {
    v11 = (_QWORD *)(*(_QWORD *)v7 + 8 * v9);
    do
    {
      v12 = *(_QWORD *)(v6 - 8);
      v6 -= 8;
      *v11++ = v12;
    }
    while (v6 != a5);
  }
  v7[2] = v9 + (v8 >> 3);
  return result;
}

_QWORD *sub_1C4EB6AAC(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C4775244(a1, v7);
      v17 = 0;
      sub_1C4926528(a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C4775244(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void sub_1C4EB6BDC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const void *v6;
  const void *v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  _BYTE *v13;
  int v14;
  int v15;
  void *v16;
  int v17;
  _BYTE *v18;
  int v19;
  int v20;
  _BYTE v21[64];
  void *v22;
  uint64_t v23;
  _BYTE v24[128];
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  int v28;
  _BYTE v29[64];
  void *v30;
  uint64_t v31;
  _QWORD v32[17];

  v32[16] = *MEMORY[0x1E0C80C00];
  v25 = v29;
  v7 = *(const void **)a1;
  v6 = *(const void **)(a1 + 8);
  if (v6 == *(const void **)a1)
  {
    v26 = v29;
    v8 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v8)
      memmove(v29, v6, 8 * v8);
  }
  else
  {
    v26 = *(_BYTE **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 20);
  }
  LODWORD(v27) = *(_DWORD *)(a1 + 16);
  HIDWORD(v27) = v8;
  v28 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  v30 = v32;
  v31 = 0x800000000;
  if (*(_DWORD *)(a1 + 104))
    sub_1C486F510((uint64_t)&v30, a1 + 96);
  v9 = *(const void **)(a2 + 8);
  if (v9 == *(const void **)a2)
  {
    v18 = v21;
    v10 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v10)
      memmove(v21, v9, 8 * v10);
  }
  else
  {
    v18 = *(_BYTE **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    LODWORD(v10) = *(_DWORD *)(a2 + 20);
  }
  v19 = *(_DWORD *)(a2 + 16);
  v20 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  v22 = v24;
  v23 = 0x800000000;
  if (*(_DWORD *)(a2 + 104))
    sub_1C486F510((uint64_t)&v22, a2 + 96);
  v11 = (void *)(a3 + 32);
  *(_QWORD *)a3 = a3 + 32;
  v13 = v25;
  v12 = v26;
  if (v26 == v25)
  {
    *(_QWORD *)(a3 + 8) = v11;
    v14 = HIDWORD(v27);
    if (HIDWORD(v27))
      memmove(v11, v12, 8 * HIDWORD(v27));
  }
  else
  {
    *(_QWORD *)(a3 + 8) = v26;
    v26 = v13;
    v14 = HIDWORD(v27);
  }
  *(_QWORD *)(a3 + 96) = a3 + 112;
  v15 = v28;
  *(_DWORD *)(a3 + 16) = v27;
  *(_DWORD *)(a3 + 20) = v14;
  *(_DWORD *)(a3 + 24) = v15;
  v27 = 8;
  v28 = 0;
  *(_QWORD *)(a3 + 104) = 0x800000000;
  if ((_DWORD)v31)
    sub_1C486F510(a3 + 96, (uint64_t)&v30);
  v16 = (void *)(a3 + 272);
  *(_QWORD *)(a3 + 240) = a3 + 272;
  if (v18 == v21)
  {
    *(_QWORD *)(a3 + 248) = v16;
    v17 = v10;
    if ((_DWORD)v10)
      memmove(v16, v18, 8 * v10);
  }
  else
  {
    *(_QWORD *)(a3 + 248) = v18;
    v18 = v21;
    v17 = v10;
  }
  *(_DWORD *)(a3 + 256) = v19;
  *(_DWORD *)(a3 + 260) = v17;
  *(_DWORD *)(a3 + 264) = v20;
  *(_QWORD *)(a3 + 336) = a3 + 352;
  *(_QWORD *)(a3 + 344) = 0x800000000;
  if ((_DWORD)v23)
    sub_1C486F510(a3 + 336, (uint64_t)&v22);
  if (v22 != v24)
    free(v22);
  if (v18 != v21)
    free(v18);
  if (v30 != v32)
    free(v30);
  if (v26 != v25)
    free(v26);
}

uint64_t sub_1C4EB6E94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  v4 = a1 + 112;
  *(_QWORD *)(a1 + 96) = a1 + 112;
  v5 = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0x800000000;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, a2);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(unsigned int *)(a1 + 104);
  if (v7 >= *(_DWORD *)(a1 + 108))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v5, v4, v7 + 1, 16);
    LODWORD(v7) = *(_DWORD *)(a1 + 104);
  }
  v8 = (uint64_t *)(*(_QWORD *)(a1 + 96) + 16 * v7);
  *v8 = a2;
  v8[1] = v6;
  ++*(_DWORD *)(a1 + 104);
  sub_1C4EB6F48((_QWORD *)a1);
  return a1;
}

_QWORD *sub_1C4EB6F48(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v1 = this + 12;
  v2 = this[12] + 16 * *((unsigned int *)this + 26);
  v5 = *(uint64_t **)(v2 - 8);
  v3 = (_QWORD *)(v2 - 8);
  v4 = v5;
  if (v5 != (uint64_t *)(*(_QWORD *)(*(v3 - 1) + 24) + 8 * *(unsigned int *)(*(v3 - 1) + 32)))
  {
    v6 = (uint64_t)this;
    v7 = (uint64_t)(this + 14);
    do
    {
      *v3 = v4 + 1;
      v8 = *v4;
      this = sub_1C4774094((llvm::SmallPtrSetImplBase *)v6, *v4);
      v9 = *(unsigned int *)(v6 + 104);
      if (v10)
      {
        v11 = *(_QWORD *)(v8 + 24);
        if (v9 >= *(_DWORD *)(v6 + 108))
        {
          this = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1, v7, v9 + 1, 16);
          LODWORD(v9) = *(_DWORD *)(v6 + 104);
        }
        v9 = *(_QWORD *)(v6 + 96) + 16 * v9;
        *(_QWORD *)v9 = v8;
        *(_QWORD *)(v9 + 8) = v11;
        LODWORD(v9) = *(_DWORD *)(v6 + 104) + 1;
        *(_DWORD *)(v6 + 104) = v9;
      }
      v12 = *v1 + 16 * v9;
      v13 = *(uint64_t **)(v12 - 8);
      v3 = (_QWORD *)(v12 - 8);
      v4 = v13;
    }
    while (v13 != (uint64_t *)(*(_QWORD *)(*(v3 - 1) + 24) + 8 * *(unsigned int *)(*(v3 - 1) + 32)));
  }
  return this;
}

char *sub_1C4EB7034(char **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;

  if (a3 == a4)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a3;
    do
    {
      ++v4;
      do
      {
        v5 = *(_QWORD *)(v5 + 8);
        if (!v5)
          break;
        v6 = *(_QWORD *)(v5 + 24);
        v7 = *(unsigned __int8 *)(v6 + 16);
        v8 = v6 && v7 >= 0x1C;
      }
      while (!v8 || v7 - 29 > 0xA);
    }
    while (v5 != a4);
  }
  return sub_1C4EB7080(a1, a2, a3, a4, v4);
}

char *sub_1C4EB7080(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unsigned int v55;
  BOOL v56;

  v5 = *a1;
  v6 = a2 - (_QWORD)*a1;
  v7 = &(*a1)[v6 & 0xFFFFFFFFFFFFFFF8];
  if (a5 < 1)
    return v7;
  v9 = a3;
  v12 = a1[1];
  v11 = a1[2];
  if (a5 <= (v11 - v12) >> 3)
  {
    v18 = a5;
    v19 = a3;
    do
    {
      do
      {
        v19 = *(_QWORD *)(v19 + 8);
        if (!v19)
          break;
        v20 = *(_QWORD *)(v19 + 24);
        v21 = *(unsigned __int8 *)(v20 + 16);
        v22 = v20 && v21 >= 0x1C;
        v23 = !v22 || v21 - 29 > 0xA;
      }
      while (v23);
      v23 = v18-- <= 1;
    }
    while (!v23);
    v24 = (v12 - v7) >> 3;
    if (v24 >= a5)
    {
      v30 = a1[1];
      v24 = a5;
    }
    else
    {
      if (v12 - v7 < 1)
      {
        v19 = a3;
      }
      else
      {
        v25 = (v12 - v7) >> 3;
        v19 = a3;
        do
        {
          do
          {
            v19 = *(_QWORD *)(v19 + 8);
            if (!v19)
              break;
            v26 = *(_QWORD *)(v19 + 24);
            v27 = *(unsigned __int8 *)(v26 + 16);
            v28 = v26 && v27 >= 0x1C;
          }
          while (!v28 || v27 - 29 > 0xA);
          v23 = v25-- <= 1;
        }
        while (!v23);
      }
      if (v19 == a4)
      {
        v30 = a1[1];
      }
      else
      {
        v44 = v19;
        v30 = a1[1];
        do
        {
          *(_QWORD *)v30 = *(_QWORD *)(*(_QWORD *)(v44 + 24) + 40);
          do
          {
            v44 = *(_QWORD *)(v44 + 8);
            if (!v44)
              break;
            v45 = *(_QWORD *)(v44 + 24);
            v46 = *(unsigned __int8 *)(v45 + 16);
            v47 = v45 && v46 >= 0x1C;
          }
          while (!v47 || v46 - 29 > 0xA);
          v30 += 8;
        }
        while (v44 != a4);
      }
      a1[1] = v30;
    }
    if (v24 >= 1)
    {
      v49 = &v7[8 * a5];
      v50 = &v30[-8 * a5];
      v51 = v30;
      if (v50 < v12)
      {
        v51 = v30;
        do
        {
          v52 = *(_QWORD *)v50;
          v50 += 8;
          *(_QWORD *)v51 = v52;
          v51 += 8;
        }
        while (v50 < v12);
      }
      a1[1] = v51;
      if (v30 != v49)
        memmove(&v30[-8 * ((v30 - v49) >> 3)], v7, v30 - v49);
      if (v19 != v9)
      {
        v53 = v7;
        do
        {
          *(_QWORD *)v53 = *(_QWORD *)(*(_QWORD *)(v9 + 24) + 40);
          do
          {
            v9 = *(_QWORD *)(v9 + 8);
            if (!v9)
              break;
            v54 = *(_QWORD *)(v9 + 24);
            v55 = *(unsigned __int8 *)(v54 + 16);
            v56 = v54 && v55 >= 0x1C;
          }
          while (!v56 || v55 - 29 > 0xA);
          v53 += 8;
        }
        while (v9 != v19);
      }
    }
    return v7;
  }
  v13 = a5 + ((v12 - v5) >> 3);
  if (v13 >> 61)
    abort();
  v14 = v11 - v5;
  v15 = v14 >> 2;
  if (v14 >> 2 <= v13)
    v15 = v13;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
    v16 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v16 = v15;
  if (v16)
  {
    if (v16 >> 61)
      sub_1C4764EE4();
    v17 = (char *)operator new(8 * v16);
  }
  else
  {
    v17 = 0;
  }
  v31 = &v17[8 * (v6 >> 3)];
  v32 = &v31[8 * a5];
  v33 = v31;
  do
  {
    *(_QWORD *)v33 = *(_QWORD *)(*(_QWORD *)(v9 + 24) + 40);
    v33 += 8;
    do
    {
      v9 = *(_QWORD *)(v9 + 8);
      if (!v9)
        break;
      v34 = *(_QWORD *)(v9 + 24);
      v35 = *(unsigned __int8 *)(v34 + 16);
      v36 = v34 && v35 >= 0x1C;
    }
    while (!v36 || v35 - 29 > 0xA);
  }
  while (v33 != v32);
  v38 = *a1;
  if (v7 == *a1)
  {
    v40 = v31;
  }
  else
  {
    v39 = v7;
    v40 = v31;
    do
    {
      v41 = *((_QWORD *)v39 - 1);
      v39 -= 8;
      *((_QWORD *)v40 - 1) = v41;
      v40 -= 8;
    }
    while (v39 != v38);
    v12 = a1[1];
  }
  v42 = &v17[8 * v16];
  if (v12 != v7)
    memmove(v32, v7, v12 - v7);
  v43 = *a1;
  *a1 = v40;
  a1[1] = &v32[v12 - v7];
  a1[2] = v42;
  if (v43)
    operator delete(v43);
  return v31;
}

void sub_1C4EB7378(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  char *v9;
  __int128 v10;
  _QWORD v11[3];
  char *v12;
  char *v13;
  uint64_t v14;
  _OWORD v15[4];
  void *v16[2];
  _DWORD v17[48];
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  _BYTE v22[64];
  void *v23;
  uint64_t v24;
  _QWORD v25[25];

  v25[24] = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  *(_QWORD *)&v19 = v22;
  *((_QWORD *)&v19 + 1) = v22;
  v20 = 8;
  v21 = 0;
  v23 = v25;
  v24 = 0x800000000;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v19, v3);
  v4 = *(_QWORD *)(v3 + 40);
  if (v4 == v3 + 40 || v4 == 0)
  {
    if (v4 == v3 + 40)
    {
      v6 = 0;
      goto LABEL_8;
    }
    v6 = v4 - 24;
    if (!v4)
      v6 = 0;
    v7 = (unsigned __int8 *)(v6 + 16);
  }
  else
  {
    v6 = v4 - 24;
    v7 = (unsigned __int8 *)(v4 - 8);
  }
  if (*v7 - 29 >= 0xB)
    v6 = 0;
LABEL_8:
  v11[0] = v3;
  v11[1] = v6;
  v11[2] = 0;
  v8 = sub_1C4926708((uint64_t)&v23, (unint64_t)v11, 1);
  v9 = (char *)v23 + 24 * v24;
  v10 = *(_OWORD *)v8;
  *((_QWORD *)v9 + 2) = *(_QWORD *)(v8 + 16);
  *(_OWORD *)v9 = v10;
  LODWORD(v24) = v24 + 1;
  sub_1C4EB7588(&v19);
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  v16[0] = 0;
  memset(v15, 0, sizeof(v15));
  v12 = (char *)v15 + 8;
  v13 = (char *)v15 + 8;
  v14 = 8;
  v16[1] = &v17[2];
  v17[1] = 8;
  sub_1C4DC4EEC((uint64_t)&v19, (uint64_t)&v12, a2);
  if (v16[1] != &v17[2])
    free(v16[1]);
  if (v13 != v12)
    free(v13);
  if (v23 != v25)
    free(v23);
  if (*((_QWORD *)&v19 + 1) != (_QWORD)v19)
    free(*((void **)&v19 + 1));
}

__int128 *sub_1C4EB7588(__int128 *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v20[3];

  v2 = (uint64_t)this;
  v3 = (uint64_t)(this + 6);
  while (1)
  {
    v4 = *(_QWORD *)(v2 + 96) + 24 * *(unsigned int *)(v2 + 104);
    v5 = *(_QWORD *)(v4 - 24);
    v6 = *(_QWORD *)(v5 + 40);
    if (v6 == v5 + 40)
    {
LABEL_23:
      LODWORD(v10) = 0;
    }
    else
    {
      v7 = v6 - 24;
      if (!v6)
        v7 = 0;
      v8 = *(unsigned __int8 *)(v7 + 16);
      v9 = v8 - 29;
      if (v8 == 30)
      {
        LODWORD(v10) = (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) == 3 ? 2 : 1;
      }
      else
      {
        v10 = 0;
        switch(v9)
        {
          case 0:
          case 5:
          case 6:
            break;
          case 1:
            __break(1u);
            goto LABEL_25;
          case 2:
            LODWORD(v10) = (*(_DWORD *)(v7 + 20) >> 1) & 0x3FFFFFF;
            break;
          case 3:
          case 9:
            LODWORD(v10) = (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) - 1;
            break;
          case 4:
            LODWORD(v10) = 2;
            break;
          case 7:
            LODWORD(v10) = *(_WORD *)(v7 + 18) & 1;
            break;
          case 8:
            LODWORD(v10) = 1;
            break;
          case 10:
            LODWORD(v10) = *(_DWORD *)(v7 + 80) + 1;
            break;
          default:
            goto LABEL_23;
        }
      }
    }
    if (*(_DWORD *)(v4 - 8) == (_DWORD)v10)
      return this;
    v11 = *(_QWORD *)(v4 - 16);
    v12 = *(_QWORD *)(v4 - 8);
    *(_DWORD *)(v4 - 8) = v12 + 1;
    v13 = *(unsigned __int8 *)(v11 + 16);
    if (v13 != 30)
      __asm { BR              X12 }
    v1 = *(_QWORD *)(v11 - 32 * v12 - 32);
    this = (__int128 *)sub_1C4774094((llvm::SmallPtrSetImplBase *)v2, v1);
    if (v14)
    {
      v4 = v1 + 40;
      v10 = *(_QWORD *)(v1 + 40);
      if (v10 == v1 + 40 || v10 == 0)
      {
LABEL_25:
        if (v10 == v4)
        {
          v16 = 0;
          goto LABEL_19;
        }
        v16 = v10 - 24;
        if (!v10)
          v16 = 0;
        v17 = (unsigned __int8 *)(v16 + 16);
      }
      else
      {
        v16 = v10 - 24;
        v17 = (unsigned __int8 *)(v10 - 8);
      }
      if (*v17 - 29 >= 0xB)
        v16 = 0;
LABEL_19:
      v20[0] = v1;
      v20[1] = v16;
      v20[2] = 0;
      this = (__int128 *)sub_1C4926708(v3, (unint64_t)v20, 1);
      v18 = *(_QWORD *)(v2 + 96) + 24 * *(unsigned int *)(v2 + 104);
      v19 = *this;
      *(_QWORD *)(v18 + 16) = *((_QWORD *)this + 2);
      *(_OWORD *)v18 = v19;
      ++*(_DWORD *)(v2 + 104);
    }
  }
}

uint64_t sub_1C4EB7838(llvm *a1, _QWORD *a2, _BYTE *a3)
{
  uint64_t result;
  llvm::raw_ostream *v6;
  const char *v7;
  __int16 v8;

  if (*(_QWORD *)a1)
  {
    v7 = "cl::location(x) specified more than once!";
    v8 = 259;
    v6 = (llvm::raw_ostream *)llvm::errs(a1);
    return llvm::cl::Option::error(a2, (llvm::Twine *)&v7, 0, 0, v6);
  }
  else
  {
    result = 0;
    *(_QWORD *)a1 = a3;
    *((_BYTE *)a1 + 17) = 1;
    *((_BYTE *)a1 + 16) = *a3;
  }
  return result;
}

uint64_t sub_1C4EB78B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int *v18;

  v3 = a2 + 40;
  v4 = *(_QWORD *)(a2 + 48);
  if (v4 == a2 + 40)
    return 1;
  v8 = a1 + 56;
  while (1)
  {
    v9 = (_QWORD *)(v4 - 24);
    if (!v4)
      v9 = 0;
    if (*(_BYTE *)(*v9 + 8) != 12)
    {
      v10 = v9[1];
      if (v10)
        break;
    }
LABEL_20:
    v4 = *(_QWORD *)(v4 + 8);
    if (v4 == v3)
      return 1;
  }
  while (1)
  {
    v11 = *(_QWORD *)(v10 + 24);
    v12 = (uint64_t *)(v11 + 40);
    if (v11 && *(_BYTE *)(v11 + 16) == 83)
    {
      v13 = *(_DWORD *)(v11 + 20);
      if ((v13 & 0x40000000) != 0)
        v14 = *(_QWORD *)(v11 - 8);
      else
        v14 = v11 - 32 * (v13 & 0x7FFFFFF);
      v12 = (uint64_t *)(v14
                      + 32 * *(unsigned int *)(v11 + 60)
                      + 8 * ((unint64_t)(v10 - v14) >> 5));
    }
    v15 = *v12;
    if (*v12 != a2)
    {
      v16 = sub_1C477672C(v8, *v12);
      v17 = *(_QWORD *)(a1 + 64);
      v18 = (unsigned int *)(v17 == *(_QWORD *)(a1 + 56) ? a1 + 76 : a1 + 72);
      if (v16 == (_QWORD *)(v17 + 8 * *v18)
        && llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(a3, v15))
      {
        return 0;
      }
    }
    v10 = *(_QWORD *)(v10 + 8);
    if (!v10)
      goto LABEL_20;
  }
}

uint64_t sub_1C4EB79D8()
{
  __n128 v1;
  int v2;
  char *v3;

  v3 = &llvm::VerifyLoopInfo;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Verify loop info (time consuming)";
  v1.n128_u64[1] = 33;
  sub_1C61A1F40((llvm::cl::Option *)&unk_1ED7F2970, "verify-loop-info", &v3, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4EB22A8, &unk_1ED7F2970, &dword_1C475E000);
}

double llvm::LPPassManager::LPPassManager(llvm::LPPassManager *this)
{
  double result;

  *((_QWORD *)this + 2) = &llvm::LPPassManager::ID;
  *((_DWORD *)this + 6) = 2;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = (char *)this + 64;
  *((_QWORD *)this + 7) = 0x1000000000;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_DWORD *)this + 64) = 0;
  *((_QWORD *)this + 33) = (char *)this + 280;
  *((_QWORD *)this + 34) = 0x1000000000;
  *((_DWORD *)this + 102) = 0;
  result = 0.0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *(_QWORD *)this = &off_1E8138F68;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 4) = &unk_1E8139018;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  return result;
}

{
  double result;

  *((_QWORD *)this + 2) = &llvm::LPPassManager::ID;
  *((_DWORD *)this + 6) = 2;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = (char *)this + 64;
  *((_QWORD *)this + 7) = 0x1000000000;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_DWORD *)this + 64) = 0;
  *((_QWORD *)this + 33) = (char *)this + 280;
  *((_QWORD *)this + 34) = 0x1000000000;
  *((_DWORD *)this + 102) = 0;
  result = 0.0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *(_QWORD *)this = &off_1E8138F68;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 4) = &unk_1E8139018;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  return result;
}

void llvm::LPPassManager::markLoopAsDeleted(llvm::LPPassManager *this, llvm::Loop *a2)
{
  _QWORD *v4;
  llvm::Loop *v5;

  v4 = (_QWORD *)((char *)this + 416);
  sub_1C4EB7B90((_QWORD *)this + 52, (uint64_t)a2);
  if (*((llvm::Loop **)this + 59) == a2)
  {
    *((_BYTE *)this + 480) = 1;
    v5 = a2;
    sub_1C4EB7C64(v4, &v5);
  }
}

void **sub_1C4EB7B90(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v18;

  v18 = a2;
  v3 = a1[4];
  v4 = a1[1];
  v5 = a1[2];
  v6 = (_QWORD *)(v4 + 8 * (v3 >> 9));
  if (v5 == v4)
  {
    v7 = 0;
    v10 = 0;
    v9 = (_QWORD *)(v4 + 8 * ((a1[5] + v3) >> 9));
  }
  else
  {
    v7 = (_QWORD *)(*v6 + 8 * (v3 & 0x1FF));
    v8 = a1[5] + v3;
    v9 = (_QWORD *)(v4 + 8 * (v8 >> 9));
    v10 = (_QWORD *)(*v9 + 8 * (v8 & 0x1FF));
  }
  v12 = (char *)sub_1C4EBA1BC(v6, v7, v9, v10, &v18);
  v13 = a1[4] + a1[5];
  v14 = a1[1];
  v15 = (char *)(v14 + 8 * (v13 >> 9));
  if (a1[2] == v14)
    v16 = 0;
  else
    v16 = (char *)(*(_QWORD *)v15 + 8 * (v13 & 0x1FF));
  return sub_1C4EB9DD0(a1, v12, v11, v15, v16);
}

void sub_1C4EB7C64(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1C4EB8860((uint64_t)a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

uint64_t llvm::LPPassManager::runOnFunction(void ****this, uint64_t **a2)
{
  llvm::LPPassManager *v3;
  void **v4;
  void *v5;
  char *v6;
  uint64_t v7;
  llvm *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char **v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unsigned int InstructionCount;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  const void ****v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t ***v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t ****v43;
  uint64_t ***v44;
  int v45;
  int v46;
  uint64_t ***v47;
  char *v48;
  size_t v49;
  size_t v50;
  llvm::Pass *v51;
  llvm::Timer *PassTimer;
  llvm::Timer *v53;
  llvm::Pass *v54;
  int *v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t **v58;
  unsigned int v59;
  unint64_t v60;
  int v61;
  size_t v62;
  const char *v63;
  uint64_t ***v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t ****v69;
  uint64_t ***v70;
  int v71;
  int v72;
  uint64_t ***v73;
  size_t v74;
  llvm::Timer *v75;
  void (*v76)(void);
  size_t v77;
  char *v78;
  uint64_t ***v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t ****v84;
  uint64_t ***v85;
  int v86;
  int v87;
  uint64_t ***v88;
  size_t v89;
  int v90;
  llvm::Timer *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v100;
  llvm::LPPassManager *v101;
  uint64_t v102;
  llvm *v103;
  unsigned int inited;
  uint64_t v105;
  uint64_t *v106;
  int v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  _BYTE v113[64];
  _BYTE *v114;
  uint64_t v115;
  _BYTE v116[16];
  _BYTE *v117;
  uint64_t v118;
  _BYTE v119[16];
  char *v120;
  uint64_t v121;
  char v122;
  uint64_t v123;

  v3 = (llvm::LPPassManager *)this;
  v123 = *MEMORY[0x1E0C80C00];
  v4 = *this[1];
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::LoopInfoWrapperPass::ID);
  v103 = (llvm *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::LoopInfoWrapperPass::ID);
  v6 = (char *)v103 + 32;
  *((_QWORD *)v3 + 58) = (char *)v103 + 32;
  v7 = (uint64_t)a2[5];
  v8 = (llvm::LPPassManager *)((char *)v3 + 32);
  v10 = *(_QWORD *)(*((_QWORD *)v3 + 5) + 8);
  v9 = *(_QWORD *)(*((_QWORD *)v3 + 5) + 16);
  if (v9 != v10)
  {
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(v9 - 8);
      v9 -= 8;
      v13 = (char *)v8 + 8 * v11++;
      *((_QWORD *)v13 + 20) = v12 + 208;
    }
    while (v9 != v10);
    v6 = (char *)*((_QWORD *)v3 + 58);
  }
  v15 = *((_QWORD *)v6 + 3);
  for (i = *((_QWORD *)v6 + 4); i != v15; i -= 8)
  {
    v16 = *(_QWORD *)(i - 8);
    sub_1C4EB85A4(v16, (_QWORD *)v3 + 52);
  }
  v17 = *((_QWORD *)v3 + 57);
  if (!v17)
  {
    LOBYTE(v24) = 0;
    return v24 & 1;
  }
  v102 = v7;
  v18 = *((_QWORD *)v3 + 53);
  if (*((_QWORD *)v3 + 54) == v18
    || (v19 = *((_QWORD *)v3 + 56),
        v20 = (char **)(v18 + 8 * (v19 >> 9)),
        v21 = *v20,
        v22 = (uint64_t *)&(*v20)[8 * (v19 & 0x1FF)],
        v23 = *(_QWORD *)(v18 + (((v19 + v17) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v19 + v17) & 0x1FF),
        v22 == (uint64_t *)v23))
  {
    v24 = 0;
  }
  else
  {
    v24 = 0;
    LODWORD(v25) = *((_DWORD *)v3 + 14);
    do
    {
      if ((_DWORD)v25)
      {
        v26 = 0;
        v27 = *v22;
        do
        {
          v28 = *(_QWORD *)(*((_QWORD *)v3 + 6) + 8 * v26);
          v24 |= (*(uint64_t (**)(uint64_t, uint64_t, llvm::LPPassManager *))(*(_QWORD *)v28 + 144))(v28, v27, v3);
          ++v26;
          v25 = *((unsigned int *)v3 + 14);
        }
        while (v26 < v25);
        v21 = *v20;
      }
      if ((char *)++v22 - v21 == 4096)
      {
        v29 = v20[1];
        ++v20;
        v21 = v29;
        v22 = (uint64_t *)v29;
      }
    }
    while (v22 != (uint64_t *)v23);
  }
  v108 = 0;
  v109 = 0;
  v110 = 0x1000000000;
  v30 = (*(uint64_t (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(**(_QWORD **)v102 + 72) + 24))(*(_QWORD *)(**(_QWORD **)v102 + 72), "size-info", 9);
  if ((v30 & 1) != 0)
  {
    inited = llvm::PMDataManager::initSizeRemarkInfo((uint64_t)v3 + 32, v102, (uint64_t)&v108);
    InstructionCount = llvm::Function::getInstructionCount((llvm::Function *)a2);
  }
  else
  {
    InstructionCount = 0;
    inited = 0;
  }
  if (!*((_QWORD *)v3 + 57))
    goto LABEL_99;
  v100 = (_QWORD *)((char *)v3 + 416);
  v106 = (uint64_t *)off_1EF8EEB50();
  v33 = (int *)&unk_1ED830000;
  v101 = v3;
  do
  {
    *((_BYTE *)v3 + 480) = 0;
    *((_QWORD *)v3 + 59) = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 53)
                                                 + (((unint64_t)(v32 + *((_QWORD *)v3 + 56) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                     + 8 * ((v32 + *((_QWORD *)v3 + 56) - 1) & 0x1FF));
    if (!*((_DWORD *)v3 + 14))
      goto LABEL_98;
    v34 = 0;
    do
    {
      v105 = v34;
      v35 = *(const void *****)(*((_QWORD *)v3 + 6) + 8 * v34);
      v36 = ((uint64_t (*)(const void ****))(*v35)[2])(v35);
      if (*v106)
        llvm::timeTraceProfilerBegin("RunLoopPass", 0xBuLL, v36, v37);
      v38 = **(uint64_t *****)(*((_QWORD *)v3 + 59) + 32);
      if ((*((_BYTE *)v38 + 23) & 0x10) != 0)
      {
        v39 = ***v38;
        v40 = *(_QWORD *)(v39 + 152);
        v41 = *(unsigned int *)(v39 + 168);
        if ((_DWORD)v41)
        {
          LODWORD(v42) = (v41 - 1) & ((v38 >> 4) ^ (v38 >> 9));
          v43 = (uint64_t ****)(v40 + 16 * v42);
          v44 = *v43;
          if (*v43 == v38)
          {
LABEL_40:
            v47 = v43[1];
            v50 = (size_t)*v47;
            v48 = (char *)(v47 + 2);
            v49 = v50;
            goto LABEL_41;
          }
          v45 = 1;
          while (v44 != (uint64_t ***)-4096)
          {
            v46 = v42 + v45++;
            v42 = v46 & (v41 - 1);
            v44 = *(uint64_t ****)(v40 + 16 * v42);
            if (v44 == v38)
            {
              v43 = (uint64_t ****)(v40 + 16 * v42);
              goto LABEL_40;
            }
          }
        }
        v43 = (uint64_t ****)(v40 + 16 * v41);
        goto LABEL_40;
      }
      v49 = 0;
      v48 = &byte_1C871356D;
LABEL_41:
      llvm::PMDataManager::dumpPassInfo(v8, (uint64_t)v35, 0, 6, v48, v49);
      if (v33[550] >= 4)
      {
        v111 = v113;
        v112 = 0x800000000;
        v114 = v116;
        v115 = 0x200000000;
        v117 = v119;
        v118 = 0x200000000;
        v120 = &v122;
        v121 = 0;
        v122 = 0;
        ((void (*)(const void ****, _BYTE **))(*v35)[10])(v35, &v111);
        llvm::PMDataManager::dumpAnalysisUsage(v8, "Required", 8uLL, (unint64_t)v35, (uint64_t)&v111);
        sub_1C5408458((uint64_t)&v111);
      }
      llvm::PMDataManager::initializeAnalysisImpl((llvm::PMTopLevelManager **)v8, v35);
      PassTimer = (llvm::Timer *)llvm::getPassTimer((llvm *)v35, v51);
      v53 = PassTimer;
      if (PassTimer)
        llvm::Timer::startTimer(PassTimer);
      v107 = ((uint64_t (*)(const void ****, _QWORD, llvm::LPPassManager *))(*v35)[17])(v35, *((_QWORD *)v3 + 59), v3);
      if ((_DWORD)v30)
      {
        v55 = v33;
        v56 = v30;
        v57 = llvm::Function::getInstructionCount((llvm::Function *)a2);
        v58 = a2;
        if (v57 != InstructionCount)
        {
          v59 = v57;
          v60 = v57 - (unint64_t)InstructionCount;
          llvm::PMDataManager::emitInstrCountChangedRemark((uint64_t)v8, (uint64_t)v35, v102, v60, inited, (uint64_t)&v108, v58);
          inited += v60;
          v3 = v101;
          InstructionCount = v59;
        }
        a2 = v58;
        v30 = v56;
        v33 = v55;
      }
      if (v53)
        llvm::Timer::stopTimer(v53);
      v61 = v107;
      if (v107)
      {
        if (*((_BYTE *)v3 + 480))
        {
          v62 = 14;
          v63 = "<deleted loop>";
LABEL_66:
          llvm::PMDataManager::dumpPassInfo(v8, (uint64_t)v35, 1, 6, v63, v62);
          goto LABEL_67;
        }
        v64 = **(uint64_t *****)(*((_QWORD *)v3 + 59) + 32);
        if (!v64 || (*((_BYTE *)v64 + 23) & 0x10) == 0)
        {
          v62 = 14;
          v63 = "<unnamed loop>";
          goto LABEL_66;
        }
        v65 = ***v64;
        v66 = *(_QWORD *)(v65 + 152);
        v67 = *(unsigned int *)(v65 + 168);
        if ((_DWORD)v67)
        {
          LODWORD(v68) = (v67 - 1) & ((v64 >> 4) ^ (v64 >> 9));
          v69 = (uint64_t ****)(v66 + 16 * v68);
          v70 = *v69;
          if (*v69 == v64)
          {
LABEL_65:
            v73 = v69[1];
            v74 = (size_t)*v73;
            v63 = (const char *)(v73 + 2);
            v62 = v74;
            goto LABEL_66;
          }
          v71 = 1;
          while (v70 != (uint64_t ***)-4096)
          {
            v72 = v68 + v71++;
            v68 = v72 & (v67 - 1);
            v70 = *(uint64_t ****)(v66 + 16 * v68);
            if (v70 == v64)
            {
              v69 = (uint64_t ****)(v66 + 16 * v68);
              goto LABEL_65;
            }
          }
        }
        v69 = (uint64_t ****)(v66 + 16 * v67);
        goto LABEL_65;
      }
LABEL_67:
      if (v33[550] >= 4)
      {
        v111 = v113;
        v112 = 0x800000000;
        v114 = v116;
        v115 = 0x200000000;
        v117 = v119;
        v118 = 0x200000000;
        v120 = &v122;
        v121 = 0;
        v122 = 0;
        ((void (*)(const void ****, _BYTE **))(*v35)[10])(v35, &v111);
        llvm::PMDataManager::dumpAnalysisUsage(v8, "Preserved", 9uLL, (unint64_t)v35, (uint64_t)&v117);
        sub_1C5408458((uint64_t)&v111);
      }
      if (*((_BYTE *)v3 + 480))
        goto LABEL_73;
      v75 = (llvm::Timer *)llvm::getPassTimer(v103, v54);
      if (v75)
      {
        v91 = v75;
        llvm::Timer::startTimer(v75);
        llvm::Timer::stopTimer(v91);
      }
      v76 = *(void (**)(void))(*(_QWORD *)**a2 + 136);
      v61 = v107;
      if (!v76)
      {
LABEL_73:
        if (!v61)
          goto LABEL_75;
LABEL_74:
        llvm::PMDataManager::removeNotPreservedAnalysis(v8, (llvm::Pass *)v35);
        goto LABEL_75;
      }
      v76();
      if (v107)
        goto LABEL_74;
LABEL_75:
      llvm::PMDataManager::recordAvailableAnalysis(v8, (llvm::Pass *)v35);
      if (*((_BYTE *)v3 + 480))
      {
        v77 = 9;
        v78 = "<deleted>";
        goto LABEL_86;
      }
      v79 = **(uint64_t *****)(*((_QWORD *)v3 + 59) + 32);
      if ((*((_BYTE *)v79 + 23) & 0x10) != 0)
      {
        v80 = ***v79;
        v81 = *(_QWORD *)(v80 + 152);
        v82 = *(unsigned int *)(v80 + 168);
        if (!(_DWORD)v82)
          goto LABEL_84;
        LODWORD(v83) = (v82 - 1) & ((v79 >> 4) ^ (v79 >> 9));
        v84 = (uint64_t ****)(v81 + 16 * v83);
        v85 = *v84;
        if (*v84 != v79)
        {
          v86 = 1;
          while (v85 != (uint64_t ***)-4096)
          {
            v87 = v83 + v86++;
            v83 = v87 & (v82 - 1);
            v85 = *(uint64_t ****)(v81 + 16 * v83);
            if (v85 == v79)
            {
              v84 = (uint64_t ****)(v81 + 16 * v83);
              goto LABEL_85;
            }
          }
LABEL_84:
          v84 = (uint64_t ****)(v81 + 16 * v82);
        }
LABEL_85:
        v88 = v84[1];
        v89 = (size_t)*v88;
        v78 = (char *)(v88 + 2);
        v77 = v89;
        goto LABEL_86;
      }
      v77 = 0;
      v78 = &byte_1C871356D;
LABEL_86:
      llvm::PMDataManager::removeDeadPasses((uint64_t)v8, (uint64_t)v35, v78, v77, 6);
      v90 = *((unsigned __int8 *)v3 + 480);
      if (*v106)
        sub_1C6392DC0(*v106);
      v24 |= v61;
      if (v90)
        break;
      v34 = v105 + 1;
    }
    while (v105 + 1 < (unint64_t)*((unsigned int *)v3 + 14));
    if (*((_BYTE *)v3 + 480) && *((_DWORD *)v3 + 14))
    {
      v92 = 0;
      do
        llvm::PMDataManager::freePass((uint64_t)v8, *(llvm **)(*((_QWORD *)v3 + 6) + 8 * v92++), "<deleted>", 9uLL, 6);
      while (v92 < *((unsigned int *)v3 + 14));
    }
LABEL_98:
    --*((_QWORD *)v3 + 57);
    sub_1C4EBA348(v100);
    v32 = *((_QWORD *)v3 + 57);
  }
  while (v32);
LABEL_99:
  if (*((_DWORD *)v3 + 14))
  {
    v93 = 0;
    do
    {
      v94 = *(_QWORD *)(*((_QWORD *)v3 + 6) + 8 * v93);
      v24 |= (*(uint64_t (**)(uint64_t))(*(_QWORD *)v94 + 152))(v94);
      ++v93;
    }
    while (v93 < *((unsigned int *)v3 + 14));
  }
  if (HIDWORD(v109) && (_DWORD)v109)
  {
    v96 = 0;
    v97 = 8 * v109;
    do
    {
      v98 = *(_QWORD *)((char *)v108 + v96);
      if (v98 != -8 && v98 != 0)
        MEMORY[0x1CAA32FB4]();
      v96 += 8;
    }
    while (v97 != v96);
  }
  free(v108);
  return v24 & 1;
}

void sub_1C4EB85A4(uint64_t a1, _QWORD *a2)
{
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = a1;
  sub_1C4EB7C64(a2, &v6);
  v4 = *(_QWORD *)(v6 + 8);
  for (i = *(_QWORD *)(v6 + 16); i != v4; i -= 8)
  {
    v5 = *(_QWORD *)(i - 8);
    sub_1C4EB85A4(v5, a2);
  }
}

uint64_t llvm::LoopPass::createPrinterPass(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE *v6;

  v5 = operator new();
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = &unk_1EF8EFBF3;
  *(_DWORD *)(v5 + 24) = 1;
  *(_QWORD *)v5 = off_1E81391A8;
  *(_QWORD *)(v5 + 32) = a2;
  v6 = (_BYTE *)(v5 + 40);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1C47EBC30(v6, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v6 = *(_OWORD *)a3;
    *(_QWORD *)(v5 + 56) = *(_QWORD *)(a3 + 16);
  }
  return v5;
}

uint64_t llvm::LoopPass::skipLoop(llvm::LoopPass *this, const llvm::Loop *a2)
{
  uint64_t ***v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t **v8;
  uint64_t v11;
  void *__p[2];
  char v13;

  v2 = *(uint64_t ****)(**((_QWORD **)a2 + 4) + 56);
  if (!v2)
    return 0;
  v4 = ***v2;
  v5 = *(_QWORD *)(v4 + 2672);
  if (!v5)
  {
    if (!atomic_load((unint64_t *)&llvm::OptBisector))
    {
      v11 = ***v2;
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&llvm::OptBisector, (void *(*)(void))sub_1C6240904, (void (*)(void *))sub_1C6240948);
      v4 = v11;
    }
    v5 = llvm::OptBisector;
    *(_QWORD *)(v4 + 2672) = llvm::OptBisector;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
    goto LABEL_6;
  v13 = 4;
  strcpy((char *)__p, "loop");
  v6 = (*(uint64_t (**)(uint64_t, llvm::LoopPass *, void **, uint64_t))(*(_QWORD *)v5 + 16))(v5, this, __p, 4);
  v7 = v6;
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if (!v7)
      return 1;
LABEL_6:
    v8 = v2[14];
    if (v8)
      return (*((unsigned __int8 *)v8 + 17) >> 3) & 1;
    return 0;
  }
  if (v6)
    goto LABEL_6;
  return 1;
}

uint64_t sub_1C4EB87B0(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "LCSSA Verifier";
  *(_QWORD *)(v2 + 8) = 14;
  *(_QWORD *)(v2 + 16) = "lcssa-verification";
  *(_QWORD *)(v2 + 24) = 18;
  *(_QWORD *)(v2 + 32) = &llvm::LCSSAVerificationPass::ID;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::LCSSAVerificationPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

const char *sub_1C4EB8848()
{
  return "Loop Pass Manager";
}

uint64_t sub_1C4EB8858()
{
  return 0;
}

void sub_1C4EB8860(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v5 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
    {
LABEL_20:
      *(_QWORD *)v6 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v18 = 1;
      else
        v18 = (v6 - v10) >> 2;
      if (!(v18 >> 61))
      {
        v19 = (char *)operator new(8 * v18);
        v20 = &v19[8 * (v18 >> 2)];
        v21 = &v19[8 * v18];
        v23 = v6 - v7;
        v22 = v6 == v7;
        v6 = v20;
        if (!v22)
        {
          v6 = &v20[v23 & 0xFFFFFFFFFFFFFFF8];
          v24 = 8 * (v23 >> 3);
          v25 = &v19[8 * (v18 >> 2)];
          do
          {
            v26 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v25 = v26;
            v25 += 8;
            v24 -= 8;
          }
          while (v24);
        }
        goto LABEL_18;
      }
LABEL_47:
      sub_1C4764EE4();
    }
LABEL_5:
    v12 = v11 >> 3;
    if (v12 >= -1)
      v13 = v12 + 1;
    else
      v13 = v12 + 2;
    v14 = -(v13 >> 1);
    v15 = v13 >> 1;
    v16 = &v7[-8 * v15];
    v17 = v6 - v7;
    if (v17)
    {
      memmove(&v7[-8 * v15], v7, v17);
      v7 = *(char **)(a1 + 8);
    }
    v6 = &v16[v17];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_20;
  }
  v27 = *(_QWORD *)(a1 + 16);
  v28 = v27 - *(_QWORD *)(a1 + 8);
  v29 = *(_QWORD *)(a1 + 24);
  v30 = v29 - *(_QWORD *)a1;
  if (v28 < v30)
  {
    if (v29 != v27)
    {
      *(_QWORD *)&v46 = operator new(0x1000uLL);
      sub_1C61351F0(a1, &v46);
      return;
    }
    *(_QWORD *)&v46 = operator new(0x1000uLL);
    sub_1C6135314((void **)a1, &v46);
    v31 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v32 = *v31;
    v7 = (char *)(v31 + 1);
    v8 = v32;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
      goto LABEL_20;
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v33 = 1;
      else
        v33 = (v6 - v10) >> 2;
      if (!(v33 >> 61))
      {
        v19 = (char *)operator new(8 * v33);
        v20 = &v19[8 * (v33 >> 2)];
        v21 = &v19[8 * v33];
        v34 = v6 - v7;
        v22 = v6 == v7;
        v6 = v20;
        if (!v22)
        {
          v6 = &v20[v34 & 0xFFFFFFFFFFFFFFF8];
          v35 = 8 * (v34 >> 3);
          v36 = &v19[8 * (v33 >> 2)];
          do
          {
            v37 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v36 = v37;
            v36 += 8;
            v35 -= 8;
          }
          while (v35);
        }
LABEL_18:
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v20;
        *(_QWORD *)(a1 + 16) = v6;
        *(_QWORD *)(a1 + 24) = v21;
        if (v10)
        {
          operator delete(v10);
          v6 = *(char **)(a1 + 16);
        }
        goto LABEL_20;
      }
      goto LABEL_47;
    }
    goto LABEL_5;
  }
  if (v29 == *(_QWORD *)a1)
    v38 = 1;
  else
    v38 = v30 >> 2;
  v48 = a1 + 24;
  if (v38 >> 61)
    goto LABEL_47;
  *(_QWORD *)&v46 = operator new(8 * v38);
  *((_QWORD *)&v46 + 1) = v46 + v28;
  *(_QWORD *)&v47 = v46 + v28;
  *((_QWORD *)&v47 + 1) = v46 + 8 * v38;
  v45 = operator new(0x1000uLL);
  sub_1C61A2C78((uint64_t)&v46, &v45);
  v39 = *(char **)(a1 + 16);
  if (v39 == *(char **)(a1 + 8))
  {
    v40 = *(char **)(a1 + 16);
  }
  else
  {
    do
    {
      v39 -= 8;
      sub_1C61A2DAC((const void **)&v46, v39);
    }
    while (v39 != *(char **)(a1 + 8));
    v40 = *(char **)(a1 + 16);
  }
  v41 = *(char **)a1;
  v42 = v46;
  v43 = v47;
  *(_QWORD *)&v46 = *(_QWORD *)a1;
  *((_QWORD *)&v46 + 1) = v39;
  v44 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)a1 = v42;
  *(_OWORD *)(a1 + 16) = v43;
  *(_QWORD *)&v47 = v40;
  *((_QWORD *)&v47 + 1) = v44;
  if (v40 != v39)
    *(_QWORD *)&v47 = &v40[(v39 - v40 + 7) & 0xFFFFFFFFFFFFFFF8];
  if (v41)
    operator delete(v41);
}

void sub_1C4EB8B28(void **this)
{
  *this = off_1E81391A8;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C4EB8B64(void **this)
{
  *this = off_1E81391A8;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4EB8BB4()
{
  return "Print Loop IR";
}

void sub_1C4EB8BC4(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t sub_1C4EB8BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ****v12;
  uint64_t ***v13;
  int v14;
  int v15;
  uint64_t ***v16;
  char *v17;
  size_t v18;
  size_t v19;

  v2 = *(_QWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 40) - v2;
  if (!v3)
    return 0;
  v6 = 8 * (v3 >> 3);
  while (!*(_QWORD *)v2)
  {
    v2 += 8;
    v6 -= 8;
    if (!v6)
      return 0;
  }
  v7 = *(uint64_t ****)(*(_QWORD *)v2 + 56);
  if ((*((_BYTE *)v7 + 23) & 0x10) != 0)
  {
    v8 = ***v7;
    v9 = *(_QWORD *)(v8 + 152);
    v10 = *(unsigned int *)(v8 + 168);
    if ((_DWORD)v10)
    {
      LODWORD(v11) = (v10 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v12 = (uint64_t ****)(v9 + 16 * v11);
      v13 = *v12;
      if (*v12 == v7)
      {
LABEL_14:
        v16 = v12[1];
        v19 = (size_t)*v16;
        v17 = (char *)(v16 + 2);
        v18 = v19;
        goto LABEL_15;
      }
      v14 = 1;
      while (v13 != (uint64_t ***)-4096)
      {
        v15 = v11 + v14++;
        v11 = v15 & (v10 - 1);
        v13 = *(uint64_t ****)(v9 + 16 * v11);
        if (v13 == v7)
        {
          v12 = (uint64_t ****)(v9 + 16 * v11);
          goto LABEL_14;
        }
      }
    }
    v12 = (uint64_t ****)(v9 + 16 * v10);
    goto LABEL_14;
  }
  v18 = 0;
  v17 = &byte_1C871356D;
LABEL_15:
  if (llvm::isFunctionInPrintList(v17, v18))
    llvm::printLoop(a2, *(llvm::raw_ostream **)(a1 + 32), a1 + 40);
  return 0;
}

void sub_1C4EB8CCC(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *i;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  char *v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  __int128 v59;
  char *v60;
  char *v61;
  uint64_t v62;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = v4 - v3;
  if (v4 == v3)
    v6 = a2 + 1;
  else
    v6 = a2;
  if (v4 == v3)
    v7 = 0;
  else
    v7 = ((v4 - v3) << 6) - 1;
  if ((v6 & 0x1FF) != 0)
    v8 = (v6 >> 9) + 1;
  else
    v8 = v6 >> 9;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = v7 - (*(_QWORD *)(a1 + 40) + v9);
  if (v8 >= v10 >> 9)
    v11 = v10 >> 9;
  else
    v11 = v8;
  if (v8 <= v10 >> 9)
  {
    for (*(_QWORD *)(a1 + 32) = v9 + (v11 << 9); v11; --v11)
    {
      v17 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v59 = *(_QWORD *)(v17 - 8);
      *(_QWORD *)(a1 + 16) = v17 - 8;
      sub_1C6135314((void **)a1, &v59);
    }
  }
  else
  {
    v12 = v8 - v11;
    v13 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
    if (v8 - v11 <= (v13 >> 3) - (v5 >> 3))
    {
      if (v12)
      {
        if (v3 == *(_QWORD *)a1)
        {
LABEL_31:
          v20 = v12;
          do
          {
            *(_QWORD *)&v59 = operator new(0x1000uLL);
            sub_1C61351F0(a1, &v59);
            --v20;
          }
          while (v20);
          v11 += v12;
          v9 = *(_QWORD *)(a1 + 32);
        }
        else
        {
          while (1)
          {
            *(_QWORD *)&v59 = operator new(0x1000uLL);
            sub_1C6135314((void **)a1, &v59);
            v18 = *(_QWORD *)(a1 + 8);
            v19 = *(_QWORD *)(a1 + 16) - v18 == 8 ? 511 : 512;
            v9 = v19 + *(_QWORD *)(a1 + 32);
            *(_QWORD *)(a1 + 32) = v9;
            if (!--v12)
              break;
            if (v18 == *(_QWORD *)a1)
              goto LABEL_31;
          }
        }
      }
      for (*(_QWORD *)(a1 + 32) = v9 + (v11 << 9); v11; --v11)
      {
        v21 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)&v59 = *(_QWORD *)(v21 - 8);
        *(_QWORD *)(a1 + 16) = v21 - 8;
        sub_1C6135314((void **)a1, &v59);
      }
    }
    else
    {
      v14 = v4 == v3;
      if (v13 >> 2 <= v12 + (v5 >> 3))
        v15 = v12 + (v5 >> 3);
      else
        v15 = v13 >> 2;
      v62 = a1 + 24;
      if (v15)
      {
        if (v15 >> 61)
LABEL_85:
          sub_1C4764EE4();
        v16 = (char *)operator new(8 * v15);
      }
      else
      {
        v16 = 0;
      }
      v22 = (v8 << 9) - v14;
      *(_QWORD *)&v59 = v16;
      *((_QWORD *)&v59 + 1) = v16;
      v60 = v16;
      v61 = &v16[8 * v15];
      do
      {
        v58 = operator new(0x1000uLL);
        sub_1C61A2C78((uint64_t)&v59, &v58);
        --v12;
      }
      while (v12);
      v23 = *(_QWORD *)(a1 + 16);
      for (i = v60; v11; --v11)
      {
        if (i == v61)
        {
          v25 = (char *)*((_QWORD *)&v59 + 1);
          v26 = (void *)v59;
          if (*((_QWORD *)&v59 + 1) <= (unint64_t)v59)
          {
            if (i == (char *)v59)
              v32 = 1;
            else
              v32 = (uint64_t)&i[-v59] >> 2;
            if (v32 >> 61)
              goto LABEL_85;
            v33 = (char *)operator new(8 * v32);
            v35 = i - v25;
            v34 = i == v25;
            i = &v33[8 * (v32 >> 2)];
            if (!v34)
            {
              i = &v33[8 * (v32 >> 2) + (v35 & 0xFFFFFFFFFFFFFFF8)];
              v36 = 8 * (v35 >> 3);
              v37 = &v33[8 * (v32 >> 2)];
              do
              {
                v38 = *(_QWORD *)v25;
                v25 += 8;
                *(_QWORD *)v37 = v38;
                v37 += 8;
                v36 -= 8;
              }
              while (v36);
            }
            *(_QWORD *)&v59 = v33;
            *((_QWORD *)&v59 + 1) = &v33[8 * (v32 >> 2)];
            v60 = i;
            v61 = &v33[8 * v32];
            if (v26)
            {
              operator delete(v26);
              i = v60;
            }
          }
          else
          {
            v27 = (uint64_t)(*((_QWORD *)&v59 + 1) - v59) >> 3;
            if (v27 >= -1)
              v28 = v27 + 1;
            else
              v28 = v27 + 2;
            v29 = *((_QWORD *)&v59 + 1) - 8 * (v28 >> 1);
            v30 = &i[-*((_QWORD *)&v59 + 1)];
            if (i != *((char **)&v59 + 1))
            {
              memmove((void *)(*((_QWORD *)&v59 + 1) - 8 * (v28 >> 1)), *((const void **)&v59 + 1), (size_t)&i[-*((_QWORD *)&v59 + 1)]);
              i = (char *)*((_QWORD *)&v59 + 1);
            }
            v31 = &i[-8 * (v28 >> 1)];
            i = &v30[v29];
            *((_QWORD *)&v59 + 1) = v31;
            v60 = &v30[v29];
          }
        }
        *(_QWORD *)i = *(_QWORD *)(v23 - 8);
        i = v60 + 8;
        v60 += 8;
        v23 = *(_QWORD *)(a1 + 16) - 8;
        *(_QWORD *)(a1 + 16) = v23;
      }
      v39 = *(char **)(a1 + 8);
      if (v39 == (char *)v23)
      {
        v39 = (char *)v23;
      }
      else
      {
        do
        {
          if (i == v61)
          {
            v40 = (char *)*((_QWORD *)&v59 + 1);
            v41 = (void *)v59;
            if (*((_QWORD *)&v59 + 1) <= (unint64_t)v59)
            {
              if (i == (char *)v59)
                v47 = 1;
              else
                v47 = (uint64_t)&i[-v59] >> 2;
              if (v47 >> 61)
                goto LABEL_85;
              v48 = (char *)operator new(8 * v47);
              v49 = i - v40;
              v34 = i == v40;
              i = &v48[8 * (v47 >> 2)];
              if (!v34)
              {
                i = &v48[8 * (v47 >> 2) + (v49 & 0xFFFFFFFFFFFFFFF8)];
                v50 = 8 * (v49 >> 3);
                v51 = &v48[8 * (v47 >> 2)];
                do
                {
                  v52 = *(_QWORD *)v40;
                  v40 += 8;
                  *(_QWORD *)v51 = v52;
                  v51 += 8;
                  v50 -= 8;
                }
                while (v50);
              }
              *(_QWORD *)&v59 = v48;
              *((_QWORD *)&v59 + 1) = &v48[8 * (v47 >> 2)];
              v60 = i;
              v61 = &v48[8 * v47];
              if (v41)
              {
                operator delete(v41);
                i = v60;
              }
            }
            else
            {
              v42 = (uint64_t)(*((_QWORD *)&v59 + 1) - v59) >> 3;
              if (v42 >= -1)
                v43 = v42 + 1;
              else
                v43 = v42 + 2;
              v44 = *((_QWORD *)&v59 + 1) - 8 * (v43 >> 1);
              v45 = &i[-*((_QWORD *)&v59 + 1)];
              if (i != *((char **)&v59 + 1))
              {
                memmove((void *)(*((_QWORD *)&v59 + 1) - 8 * (v43 >> 1)), *((const void **)&v59 + 1), (size_t)&i[-*((_QWORD *)&v59 + 1)]);
                i = (char *)*((_QWORD *)&v59 + 1);
              }
              v46 = &i[-8 * (v43 >> 1)];
              i = &v45[v44];
              *((_QWORD *)&v59 + 1) = v46;
              v60 = &v45[v44];
            }
          }
          v53 = *(_QWORD *)v39;
          v39 += 8;
          *(_QWORD *)i = v53;
          i = v60 + 8;
          v60 += 8;
        }
        while (v39 != *(char **)(a1 + 16));
        v23 = *(_QWORD *)(a1 + 8);
      }
      v54 = v61;
      v55 = *(char **)(a1 + 24);
      v56 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 16) = i;
      *(_QWORD *)(a1 + 24) = v54;
      v57 = *(void **)a1;
      *(_OWORD *)a1 = v59;
      *(_QWORD *)&v59 = v57;
      *((_QWORD *)&v59 + 1) = v23;
      v60 = v39;
      v61 = v55;
      *(_QWORD *)(a1 + 32) = v22 + v56;
      if (v39 != (char *)v23)
        v60 = &v39[(v23 - (_QWORD)v39 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v57)
        operator delete(v57);
    }
  }
}

int64x2_t *sub_1C4EB9134(int64x2_t *result, char *a2, uint64_t a3, char *a4, unint64_t a5, char *a6, uint64_t a7, unint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  int64x2_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  if (a5 != a3)
  {
    v8 = ((uint64_t)(a5 - *(_QWORD *)a4) >> 3) + ((a4 - a2) << 6) - ((a3 - *(_QWORD *)a2) >> 3);
    if (v8 >= 1)
    {
      while (1)
      {
        v9 = *(_QWORD *)a4;
        if (a5 == *(_QWORD *)a4)
        {
          v10 = *((_QWORD *)a4 - 1);
          a4 -= 8;
          v9 = v10;
          a5 = v10 + 4096;
        }
        v11 = a5 - 8;
        v12 = (uint64_t)(a5 - v9) >> 3;
        v13 = a5 - 8 * v8;
        if (v12 <= v8)
          v13 = v9;
        if (v12 >= v8)
          v12 = v8;
        v14 = *a8;
        v15 = *a8 >= a5 || v13 > v14;
        if (v15)
          goto LABEL_21;
        if (v11 == a7)
          break;
        v16 = ((uint64_t)(v11 - v9) >> 3) + ((a4 - a6) << 6) - ((a7 - *(_QWORD *)a6) >> 3) + 1;
        if (((uint64_t)(v11 - v9) >> 3) + ((a4 - a6) << 6) - ((a7 - *(_QWORD *)a6) >> 3) != -1)
          goto LABEL_17;
LABEL_20:
        *a8 = v14;
LABEL_21:
        if (a5 != v13)
        {
          v18 = result[2];
          do
          {
            if (a7 == *(_QWORD *)a6)
            {
              v19 = *((_QWORD *)a6 - 1);
              a6 -= 8;
              a7 = v19 + 4096;
            }
            v20 = *(_QWORD *)(a5 - 8);
            a5 -= 8;
            *(_QWORD *)(a7 - 8) = v20;
            a7 -= 8;
            v18 = vaddq_s64(v18, (int64x2_t)xmmword_1C85F4370);
          }
          while (a5 != v13);
          result[2] = v18;
        }
        if (v12 == 1)
        {
          a5 = v11;
        }
        else
        {
          v21 = ((uint64_t)(v11 - *(_QWORD *)a4) >> 3) - (v12 - 1);
          if (v21 < 1)
          {
            v22 = 511 - v21;
            a4 -= 8 * (v22 >> 9);
            a5 = *(_QWORD *)a4 + 8 * (~(_WORD)v22 & 0x1FF);
          }
          else
          {
            a4 += 8 * ((unint64_t)v21 >> 9);
            a5 = *(_QWORD *)a4 + 8 * (v21 & 0x1FF);
          }
        }
        v15 = v8 <= v12;
        v8 -= v12;
        if (v15)
          return result;
      }
      v16 = 1;
LABEL_17:
      v17 = ((uint64_t)(v14 - v9) >> 3) - v16;
      if (v17 < 1)
        v14 = *(_QWORD *)&a4[-8 * ((unint64_t)(511 - v17) >> 9)] + 8 * (~(511 - (_WORD)v17) & 0x1FF);
      else
        v14 = *(_QWORD *)&a4[((unint64_t)v17 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v17 & 0x1FF);
      goto LABEL_20;
    }
  }
  return result;
}

char *sub_1C4EB92D0(char *a1, char *__src, char *a3, char *a4, char *a5, char *__dst, unint64_t *a7)
{
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;

  if (a4 != __src)
  {
    v9 = __src;
    v10 = a1;
    v11 = ((uint64_t)&a4[-*(_QWORD *)a3] >> 3) + ((a3 - a1) << 6) - ((uint64_t)&__src[-*(_QWORD *)a1] >> 3);
    if (v11 >= 1)
    {
      while (1)
      {
        v13 = *(_QWORD *)v10;
        v14 = *(_QWORD *)v10 + 4096;
        v15 = (v14 - (uint64_t)v9) >> 3;
        if (v15 >= v11)
          v16 = v11;
        else
          v16 = (v14 - (uint64_t)v9) >> 3;
        if (v15 <= v11)
          v17 = *(_QWORD *)v10 + 4096;
        else
          v17 = (unint64_t)&v9[8 * v11];
        v18 = *a7;
        if ((unint64_t)v9 <= *a7 && v18 < v17)
        {
          if (v9 != __dst)
          {
            v20 = ((uint64_t)&__dst[-*(_QWORD *)a5] >> 3) - (((uint64_t)&v9[-v13] >> 3) + ((v10 - a5) << 6));
            if (v20)
            {
              v21 = v20 + ((uint64_t)(v18 - v13) >> 3);
              if (v21 < 1)
                v18 = *(_QWORD *)&v10[-8 * ((unint64_t)(511 - v21) >> 9)] + 8 * (~(511 - (_WORD)v21) & 0x1FF);
              else
                v18 = *(_QWORD *)&v10[((unint64_t)v21 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v21 & 0x1FF);
            }
          }
          *a7 = v18;
        }
        if (v9 == (char *)v17)
          goto LABEL_30;
        v23 = *(char **)a5;
        a5 += 8;
        v22 = v23;
        v24 = v9;
        while (1)
        {
          v25 = v22 - __dst + 4096;
          v26 = (uint64_t)(v17 - (_QWORD)v24) >> 3 >= v25 >> 3 ? v25 >> 3 : (uint64_t)(v17 - (_QWORD)v24) >> 3;
          if (v26)
            memmove(__dst, v24, 8 * v26);
          v24 += 8 * v26;
          if (v24 == (char *)v17)
            break;
          v27 = *(char **)a5;
          a5 += 8;
          v22 = v27;
          __dst = v27;
        }
        __dst += 8 * v26;
        if ((char *)(*((_QWORD *)a5 - 1) + 4096) != __dst)
          break;
        __dst = *(char **)a5;
        if (v16)
        {
LABEL_31:
          v28 = v16 + ((uint64_t)&v9[-*(_QWORD *)v10] >> 3);
          if (v28 < 1)
          {
            v29 = 511 - v28;
            v10 -= 8 * (v29 >> 9);
            v9 = (char *)(*(_QWORD *)v10 + 8 * (~(_WORD)v29 & 0x1FF));
          }
          else
          {
            v10 += 8 * ((unint64_t)v28 >> 9);
            v9 = (char *)(*(_QWORD *)v10 + 8 * (v28 & 0x1FF));
          }
        }
LABEL_36:
        v30 = v11 <= v16;
        v11 -= v16;
        if (v30)
          return a5;
      }
      a5 -= 8;
LABEL_30:
      if (v16)
        goto LABEL_31;
      goto LABEL_36;
    }
  }
  return a5;
}

void sub_1C4EB94D4(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int64_t v44;
  char *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;

  v3 = *(char **)(a1 + 16);
  v4 = (uint64_t)&v3[-*(_QWORD *)(a1 + 8)];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = *(_QWORD *)(a1 + 32);
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    for (*(_QWORD *)(a1 + 32) = v7 - (v8 << 9); v8; --v8)
    {
      v14 = *(_QWORD **)(a1 + 8);
      v17 = *v14;
      v15 = (char *)(v14 + 1);
      v16 = v17;
      *(_QWORD *)(a1 + 8) = v15;
      if (v3 == *(char **)(a1 + 24))
      {
        v18 = *(char **)a1;
        if ((unint64_t)v15 <= *(_QWORD *)a1)
        {
          if (v3 == v18)
            v24 = 1;
          else
            v24 = (v3 - v18) >> 2;
          if (v24 >> 61)
            goto LABEL_102;
          v25 = (char *)operator new(8 * v24);
          v26 = &v25[8 * (v24 >> 2)];
          v28 = v3 - v15;
          v27 = v3 == v15;
          v3 = v26;
          if (!v27)
          {
            v3 = &v26[v28 & 0xFFFFFFFFFFFFFFF8];
            v29 = 8 * (v28 >> 3);
            v30 = &v25[8 * (v24 >> 2)];
            do
            {
              v31 = *(_QWORD *)v15;
              v15 += 8;
              *(_QWORD *)v30 = v31;
              v30 += 8;
              v29 -= 8;
            }
            while (v29);
          }
          *(_QWORD *)a1 = v25;
          *(_QWORD *)(a1 + 8) = v26;
          *(_QWORD *)(a1 + 16) = v3;
          *(_QWORD *)(a1 + 24) = &v25[8 * v24];
          if (v18)
          {
            operator delete(v18);
            v3 = *(char **)(a1 + 16);
          }
        }
        else
        {
          v19 = (uint64_t)&v15[-*(_QWORD *)a1] >> 3;
          if (v19 >= -1)
            v20 = v19 + 1;
          else
            v20 = v19 + 2;
          v21 = &v15[-8 * (v20 >> 1)];
          v22 = v3 - v15;
          if (v3 != v15)
          {
            memmove(&v15[-8 * (v20 >> 1)], v15, v3 - v15);
            v3 = *(char **)(a1 + 8);
          }
          v23 = &v3[-8 * (v20 >> 1)];
          v3 = &v21[v22];
          *(_QWORD *)(a1 + 8) = v23;
          *(_QWORD *)(a1 + 16) = &v21[v22];
        }
      }
      *(_QWORD *)v3 = v16;
      v3 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 16))
        {
          *(_QWORD *)&v76 = operator new(0x1000uLL);
          sub_1C61351F0(a1, &v76);
          --v6;
          if (!--v9)
            goto LABEL_48;
        }
        for (i = 0; i != v9; ++i)
        {
          *(_QWORD *)&v76 = operator new(0x1000uLL);
          sub_1C6135314((void **)a1, &v76);
          if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
            v33 = 511;
          else
            v33 = 512;
          v34 = v33 + *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v34;
        }
        v8 = v6;
      }
      else
      {
LABEL_48:
        v34 = *(_QWORD *)(a1 + 32);
      }
      *(_QWORD *)(a1 + 32) = v34 - (v8 << 9);
      if (v8)
      {
        v35 = *(char **)(a1 + 16);
        do
        {
          v36 = *(_QWORD **)(a1 + 8);
          v39 = *v36;
          v37 = (char *)(v36 + 1);
          v38 = v39;
          *(_QWORD *)(a1 + 8) = v37;
          if (v35 == *(char **)(a1 + 24))
          {
            v40 = *(char **)a1;
            if ((unint64_t)v37 <= *(_QWORD *)a1)
            {
              if (v35 == v40)
                v46 = 1;
              else
                v46 = (v35 - v40) >> 2;
              if (v46 >> 61)
                goto LABEL_102;
              v47 = (char *)operator new(8 * v46);
              v48 = &v47[8 * (v46 >> 2)];
              v49 = v35 - v37;
              v27 = v35 == v37;
              v35 = v48;
              if (!v27)
              {
                v35 = &v48[v49 & 0xFFFFFFFFFFFFFFF8];
                v50 = 8 * (v49 >> 3);
                v51 = &v47[8 * (v46 >> 2)];
                do
                {
                  v52 = *(_QWORD *)v37;
                  v37 += 8;
                  *(_QWORD *)v51 = v52;
                  v51 += 8;
                  v50 -= 8;
                }
                while (v50);
              }
              *(_QWORD *)a1 = v47;
              *(_QWORD *)(a1 + 8) = v48;
              *(_QWORD *)(a1 + 16) = v35;
              *(_QWORD *)(a1 + 24) = &v47[8 * v46];
              if (v40)
              {
                operator delete(v40);
                v35 = *(char **)(a1 + 16);
              }
            }
            else
            {
              v41 = (uint64_t)&v37[-*(_QWORD *)a1] >> 3;
              if (v41 >= -1)
                v42 = v41 + 1;
              else
                v42 = v41 + 2;
              v43 = &v37[-8 * (v42 >> 1)];
              v44 = v35 - v37;
              if (v35 != v37)
              {
                memmove(&v37[-8 * (v42 >> 1)], v37, v35 - v37);
                v35 = *(char **)(a1 + 8);
              }
              v45 = &v35[-8 * (v42 >> 1)];
              v35 = &v43[v44];
              *(_QWORD *)(a1 + 8) = v45;
              *(_QWORD *)(a1 + 16) = &v43[v44];
            }
          }
          *(_QWORD *)v35 = v38;
          v35 = (char *)(*(_QWORD *)(a1 + 16) + 8);
          *(_QWORD *)(a1 + 16) = v35;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      if (v10 >> 2 <= v9 + (v4 >> 3))
        v12 = v9 + v11;
      else
        v12 = v10 >> 2;
      v78 = a1 + 24;
      if (v12)
      {
        if (v12 >> 61)
LABEL_102:
          sub_1C4764EE4();
        v13 = (char *)operator new(8 * v12);
      }
      else
      {
        v13 = 0;
      }
      v53 = v8 << 9;
      *(_QWORD *)&v76 = v13;
      *((_QWORD *)&v76 + 1) = &v13[8 * (v11 - v8)];
      *(_QWORD *)&v77 = *((_QWORD *)&v76 + 1);
      *((_QWORD *)&v77 + 1) = &v13[8 * v12];
      do
      {
        v75 = operator new(0x1000uLL);
        sub_1C61A2C78((uint64_t)&v76, &v75);
        --v9;
      }
      while (v9);
      v54 = *(char **)(a1 + 8);
      if (v8)
      {
        v55 = (char *)v77;
        do
        {
          if (v55 == *((char **)&v77 + 1))
          {
            v56 = (char *)*((_QWORD *)&v76 + 1);
            v57 = (void *)v76;
            if (*((_QWORD *)&v76 + 1) <= (unint64_t)v76)
            {
              if (v55 == (char *)v76)
                v63 = 1;
              else
                v63 = (uint64_t)&v55[-v76] >> 2;
              if (v63 >> 61)
                goto LABEL_102;
              v64 = (char *)operator new(8 * v63);
              v65 = v55 - v56;
              v27 = v55 == v56;
              v55 = &v64[8 * (v63 >> 2)];
              if (!v27)
              {
                v55 = &v64[8 * (v63 >> 2) + (v65 & 0xFFFFFFFFFFFFFFF8)];
                v66 = 8 * (v65 >> 3);
                v67 = &v64[8 * (v63 >> 2)];
                do
                {
                  v68 = *(_QWORD *)v56;
                  v56 += 8;
                  *(_QWORD *)v67 = v68;
                  v67 += 8;
                  v66 -= 8;
                }
                while (v66);
              }
              *(_QWORD *)&v76 = v64;
              *((_QWORD *)&v76 + 1) = &v64[8 * (v63 >> 2)];
              *(_QWORD *)&v77 = v55;
              *((_QWORD *)&v77 + 1) = &v64[8 * v63];
              if (v57)
              {
                operator delete(v57);
                v55 = (char *)v77;
              }
            }
            else
            {
              v58 = (uint64_t)(*((_QWORD *)&v76 + 1) - v76) >> 3;
              if (v58 >= -1)
                v59 = v58 + 1;
              else
                v59 = v58 + 2;
              v60 = *((_QWORD *)&v76 + 1) - 8 * (v59 >> 1);
              v61 = &v55[-*((_QWORD *)&v76 + 1)];
              if (v55 != *((char **)&v76 + 1))
              {
                memmove((void *)(*((_QWORD *)&v76 + 1) - 8 * (v59 >> 1)), *((const void **)&v76 + 1), (size_t)&v55[-*((_QWORD *)&v76 + 1)]);
                v55 = (char *)*((_QWORD *)&v76 + 1);
              }
              v62 = &v55[-8 * (v59 >> 1)];
              v55 = &v61[v60];
              *((_QWORD *)&v76 + 1) = v62;
              *(_QWORD *)&v77 = &v61[v60];
            }
          }
          *(_QWORD *)v55 = *(_QWORD *)v54;
          v55 = (char *)(v77 + 8);
          *(_QWORD *)&v77 = v77 + 8;
          v54 = (char *)(*(_QWORD *)(a1 + 8) + 8);
          *(_QWORD *)(a1 + 8) = v54;
          --v8;
        }
        while (v8);
      }
      v69 = v54;
      if (*(char **)(a1 + 16) != v54)
      {
        v69 = *(char **)(a1 + 16);
        do
        {
          v69 -= 8;
          sub_1C61A2DAC((const void **)&v76, v69);
        }
        while (v69 != *(char **)(a1 + 8));
        v54 = *(char **)(a1 + 16);
      }
      v70 = *(char **)a1;
      v71 = v76;
      v72 = v77;
      *(_QWORD *)&v76 = *(_QWORD *)a1;
      *((_QWORD *)&v76 + 1) = v69;
      v73 = *(_QWORD *)(a1 + 24);
      v74 = *(_QWORD *)(a1 + 32);
      *(_OWORD *)a1 = v71;
      *(_OWORD *)(a1 + 16) = v72;
      *(_QWORD *)&v77 = v54;
      *((_QWORD *)&v77 + 1) = v73;
      *(_QWORD *)(a1 + 32) = v74 - v53;
      if (v54 != v69)
        *(_QWORD *)&v77 = &v54[(v69 - v54 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v70)
        operator delete(v70);
    }
  }
}

uint64_t sub_1C4EB99F4(uint64_t result, char *a2, unint64_t a3, char *a4, uint64_t a5, char *a6, _QWORD *a7, unint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;

  if (a5 != a3)
  {
    v8 = ((a5 - *(_QWORD *)a4) >> 3) + ((a4 - a2) << 6) - ((uint64_t)(a3 - *(_QWORD *)a2) >> 3);
    if (v8 >= 1)
    {
      do
      {
        v9 = *(_QWORD *)a2;
        v10 = *(_QWORD *)a2 + 4096;
        v11 = (uint64_t)(v10 - a3) >> 3;
        v12 = a3 + 8 * v8;
        if (v11 <= v8)
          v12 = *(_QWORD *)a2 + 4096;
        if (v11 >= v8)
          v13 = v8;
        else
          v13 = (uint64_t)(v10 - a3) >> 3;
        v14 = *a8;
        if (a3 <= *a8 && v14 < v12)
        {
          if (a7 != (_QWORD *)a3)
          {
            v16 = (((uint64_t)a7 - *(_QWORD *)a6) >> 3) + ((a6 - a2) << 6);
            if (v16 != (uint64_t)(a3 - v9) >> 3)
            {
              v17 = v16 - ((uint64_t)(a3 - v9) >> 3) + ((uint64_t)(v14 - v9) >> 3);
              if (v17 < 1)
                v14 = *(_QWORD *)&a2[-8 * ((unint64_t)(511 - v17) >> 9)] + 8 * (~(511 - (_WORD)v17) & 0x1FF);
              else
                v14 = *(_QWORD *)&a2[((unint64_t)v17 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v17 & 0x1FF);
            }
          }
          *a8 = v14;
        }
        if (a3 != v12)
        {
          v18 = *(_QWORD *)(result + 40);
          v19 = (uint64_t *)a3;
          do
          {
            v20 = *v19++;
            *a7++ = v20;
            if ((_QWORD *)((char *)a7 - *(_QWORD *)a6) == (_QWORD *)4096)
            {
              v21 = (_QWORD *)*((_QWORD *)a6 + 1);
              a6 += 8;
              a7 = v21;
            }
            ++v18;
          }
          while (v19 != (uint64_t *)v12);
          *(_QWORD *)(result + 40) = v18;
        }
        if (v13)
        {
          v22 = v13 + ((uint64_t)(a3 - *(_QWORD *)a2) >> 3);
          if (v22 < 1)
          {
            v23 = 511 - v22;
            a2 -= 8 * (v23 >> 9);
            a3 = *(_QWORD *)a2 + 8 * (~(_WORD)v23 & 0x1FF);
          }
          else
          {
            a2 += 8 * ((unint64_t)v22 >> 9);
            a3 = *(_QWORD *)a2 + 8 * (v22 & 0x1FF);
          }
        }
        v24 = v8 <= v13;
        v8 -= v13;
      }
      while (!v24);
    }
  }
  return result;
}

char *sub_1C4EB9B64(char *a1, char *a2, char *a3, char *a4, char *a5, char *a6, unint64_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v25[13];

  if (a4 != a2)
  {
    v25[11] = v7;
    v25[12] = v8;
    v9 = a3;
    v10 = ((uint64_t)&a4[-*(_QWORD *)a3] >> 3) + ((a3 - a1) << 6) - ((uint64_t)&a2[-*(_QWORD *)a1] >> 3);
    if (v10 >= 1)
    {
      while (1)
      {
        v12 = *(char **)v9;
        if (a4 == *(char **)v9)
        {
          v13 = (char *)*((_QWORD *)v9 - 1);
          v9 -= 8;
          v12 = v13;
          a4 = v13 + 4096;
        }
        v14 = a4 - 8;
        v15 = (a4 - v12) >> 3;
        if (v15 >= v10)
          v16 = v10;
        else
          v16 = (a4 - v12) >> 3;
        if (v15 <= v10)
          v17 = v12;
        else
          v17 = &a4[-8 * v10];
        v18 = *a7;
        v19 = *a7 >= (unint64_t)a4 || (unint64_t)v17 > v18;
        if (v19)
          goto LABEL_23;
        if (v14 == a6)
          break;
        v20 = ~((v14 - v12) >> 3) + ((a5 - v9) << 6) + ((uint64_t)&a6[-*(_QWORD *)a5] >> 3);
        if (v20)
          goto LABEL_19;
LABEL_22:
        *a7 = v18;
LABEL_23:
        sub_1C4EB9D18(v25, v17, a4, a5, a6);
        if (v16 == 1)
        {
          a4 = v14;
        }
        else
        {
          v22 = ((uint64_t)&v14[-*(_QWORD *)v9] >> 3) - (v16 - 1);
          if (v22 < 1)
          {
            v23 = 511 - v22;
            v9 -= 8 * (v23 >> 9);
            a4 = (char *)(*(_QWORD *)v9 + 8 * (~(_WORD)v23 & 0x1FF));
          }
          else
          {
            v9 += 8 * ((unint64_t)v22 >> 9);
            a4 = (char *)(*(_QWORD *)v9 + 8 * (v22 & 0x1FF));
          }
        }
        a5 = (char *)v25[1];
        a6 = (char *)v25[2];
        v19 = v10 <= v16;
        v10 -= v16;
        if (v19)
          return a5;
      }
      v20 = -1;
LABEL_19:
      v21 = v20 + ((uint64_t)(v18 - (_QWORD)v12) >> 3);
      if (v21 < 1)
        v18 = *(_QWORD *)&v9[-8 * ((unint64_t)(511 - v21) >> 9)] + 8 * (~(511 - (_WORD)v21) & 0x1FF);
      else
        v18 = *(_QWORD *)&v9[((unint64_t)v21 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v21 & 0x1FF);
      goto LABEL_22;
    }
  }
  return a5;
}

_QWORD *sub_1C4EB9D18(_QWORD *result, char *a2, char *a3, _QWORD *a4, char *a5)
{
  _QWORD *v6;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;

  v6 = a4;
  v8 = result;
  if (a2 == a3)
  {
    v9 = a2;
  }
  else
  {
    v9 = a3;
    v10 = *a4;
    v11 = a3;
    while (1)
    {
      v12 = (uint64_t)&a5[-v10];
      if ((v11 - a2) >> 3 >= v12 >> 3)
        v13 = v12 >> 3;
      else
        v13 = (v11 - a2) >> 3;
      v11 -= 8 * v13;
      a5 -= 8 * v13;
      if (v13)
        result = memmove(a5, v11, 8 * v13);
      if (v11 == a2)
        break;
      v14 = *--v6;
      v10 = v14;
      a5 = (char *)(v14 + 4096);
    }
    if ((char *)(*v6 + 4096) == a5)
    {
      v15 = (char *)v6[1];
      ++v6;
      a5 = v15;
    }
  }
  *v8 = v9;
  v8[1] = v6;
  v8[2] = a5;
  return result;
}

void **sub_1C4EB9DD0(_QWORD *a1, char *a2, char *a3, char *a4, char *a5)
{
  uint64_t v6;
  unint64_t v7;
  void **v8;
  void **v9;
  void **v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  char **v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  void **v28;
  _BYTE *v29;
  char *v30;
  char *v31;
  char *v32;
  char **v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  void **i;
  _BYTE *v42;
  uint64_t v43;
  void **result;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char **v48;
  char *v49;
  char *v50;
  char ***v51;

  if (a5 == a3)
    v6 = 0;
  else
    v6 = ((uint64_t)&a5[-*(_QWORD *)a4] >> 3) + ((a4 - a2) << 6) - ((uint64_t)&a3[-*(_QWORD *)a2] >> 3);
  v7 = a1[4];
  v8 = (void **)a1[1];
  v9 = (void **)a1[2];
  v10 = &v8[v7 >> 9];
  if (v9 == v8)
    v11 = 0;
  else
    v11 = (char *)*v10 + 8 * (a1[4] & 0x1FFLL);
  if (a3 == v11)
  {
    v14 = 0;
    v15 = 1;
LABEL_13:
    v16 = (char **)&v8[v7 >> 9];
    goto LABEL_14;
  }
  v12 = ((uint64_t)&a3[-*(_QWORD *)a2] >> 3) + ((a2 - (char *)v10) << 6);
  v13 = v11 - (_BYTE *)*v10;
  v14 = v12 - (v13 >> 3);
  if (v12 == v13 >> 3)
  {
    v15 = 1;
    a3 = v11;
    goto LABEL_13;
  }
  v15 = 0;
  if (v12 < 1)
  {
    v23 = 511 - v12;
    v16 = (char **)&v10[-(v23 >> 9)];
    a3 = &(*v16)[8 * (~(_WORD)v23 & 0x1FF)];
  }
  else
  {
    v16 = (char **)&v10[(unint64_t)v12 >> 9];
    a3 = &(*v16)[8 * (v12 & 0x1FF)];
  }
LABEL_14:
  if (v6 >= 1)
  {
    v17 = a1[5];
    v18 = v6 + ((a3 - *v16) >> 3);
    if (v14 <= (unint64_t)(v17 - v6) >> 1)
    {
      if (v18 < 1)
      {
        v20 = &v16[-((unint64_t)(511 - v18) >> 9)];
        v21 = *v20;
        v22 = ~(511 - (_WORD)v18) & 0x1FF;
      }
      else
      {
        v20 = &v16[(unint64_t)v18 >> 9];
        v21 = *v20;
        v22 = v18 & 0x1FF;
      }
      v30 = &v21[8 * v22];
      if (v10 == (void **)v16)
      {
        sub_1C4EB9D18(&v48, v11, a3, v20, v30);
      }
      else
      {
        v47 = v15;
        sub_1C4EB9D18(&v48, *v16, a3, v20, v30);
        v31 = v49;
        v32 = v50;
        v33 = v16 - 1;
        if (v16 - 1 != (char **)v10)
        {
          v34 = *(char **)v49;
          do
          {
            v35 = *v33;
            v36 = *v33 + 4096;
            while (1)
            {
              v37 = v32 - v34;
              if ((v36 - v35) >> 3 >= v37 >> 3)
                v38 = v37 >> 3;
              else
                v38 = (v36 - v35) >> 3;
              v36 -= 8 * v38;
              v32 -= 8 * v38;
              if (v38)
                memmove(v32, v36, 8 * v38);
              if (v36 == v35)
                break;
              v39 = (char *)*((_QWORD *)v31 - 1);
              v31 -= 8;
              v34 = v39;
              v32 = v39 + 4096;
            }
            v34 = *(char **)v31;
            if ((char *)(*(_QWORD *)v31 + 4096) == v32)
            {
              v40 = (char *)*((_QWORD *)v31 + 1);
              v31 += 8;
              v34 = v40;
              v32 = v40;
            }
            --v33;
          }
          while (v33 != (char **)v10);
        }
        sub_1C4EB9D18(&v48, v11, (char *)*v10 + 4096, v31, v32);
        v15 = v47;
      }
      v43 = a1[5] - v6;
      v7 = a1[4] + v6;
      a1[4] = v7;
      a1[5] = v43;
      v8 = (void **)a1[1];
      if (v7 >= 0x400)
      {
        do
        {
          operator delete(*v8);
          v8 = (void **)(a1[1] + 8);
          a1[1] = v8;
          v7 = a1[4] - 512;
          a1[4] = v7;
        }
        while (v7 > 0x3FF);
      }
    }
    else
    {
      if (v18 < 1)
      {
        v24 = 511 - v18;
        LOWORD(v18) = ~(511 - v18);
        v19 = &v16[-(v24 >> 9)];
      }
      else
      {
        v19 = &v16[(unint64_t)v18 >> 9];
      }
      v25 = *v19;
      v26 = &(*v19)[8 * (v18 & 0x1FF)];
      v27 = v17 + v7;
      v28 = &v8[v27 >> 9];
      if (v9 == v8)
        v29 = 0;
      else
        v29 = (char *)*v28 + 8 * (v27 & 0x1FF);
      v48 = v16;
      v49 = a3;
      v51 = &v48;
      if (v19 != (char **)v28)
      {
        sub_1C4EBA3AC((void ****)&v51, v26, v25 + 4096);
        for (i = (void **)(v19 + 1); i != v28; ++i)
        {
          v42 = *i;
          sub_1C4EBA3AC((void ****)&v51, v42, v42 + 4096);
        }
        v26 = (char *)*v28;
      }
      sub_1C4EBA3AC((void ****)&v51, v26, v29);
      a1[5] -= v6;
      while (sub_1C4EBA348(a1))
        ;
      v8 = (void **)a1[1];
      v7 = a1[4];
    }
  }
  result = &v8[v7 >> 9];
  if ((void **)a1[2] == v8)
  {
    v45 = 0;
    if ((v15 & 1) != 0)
      return result;
  }
  else
  {
    v45 = (uint64_t)*result + 8 * (v7 & 0x1FF);
    if ((v15 & 1) != 0)
      return result;
  }
  v46 = v14 + ((v45 - (uint64_t)*result) >> 3);
  if (v46 < 1)
    result -= (unint64_t)(511 - v46) >> 9;
  else
    result += (unint64_t)v46 >> 9;
  return result;
}

_QWORD *sub_1C4EBA1BC(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  if (a1 == a3)
  {
    if (a2 == a4)
    {
LABEL_20:
      a2 = a4;
    }
    else
    {
      while (*a2 != *a5)
      {
        if (++a2 == a4)
          goto LABEL_20;
      }
    }
    if (!a1)
    {
      a3 = 0;
      goto LABEL_27;
    }
    if ((_QWORD *)(*a1 + 4096) == a2)
    {
      v11 = (_QWORD *)a1[1];
      ++a1;
      a2 = v11;
    }
LABEL_26:
    a3 = a1;
LABEL_27:
    if (a2 != a4)
    {
      v12 = a2;
      v13 = a3;
      while (1)
      {
        if ((_QWORD *)((char *)++v12 - *v13) == (_QWORD *)4096)
        {
          v14 = (_QWORD *)v13[1];
          ++v13;
          v12 = v14;
        }
        if (v12 == a4)
          break;
        if (*v12 != *a5)
        {
          *a2++ = *v12;
          if ((_QWORD *)((char *)a2 - *a3) == (_QWORD *)4096)
          {
            v15 = (_QWORD *)a3[1];
            ++a3;
            a2 = v15;
          }
        }
      }
    }
    return a3;
  }
  v5 = *a1 + 4096;
  if ((_QWORD *)v5 != a2)
  {
    while (*a2 != *a5)
    {
      if (++a2 == (_QWORD *)v5)
        goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_5:
  v6 = a1 + 1;
  if (a1 + 1 != a3)
  {
    while (2)
    {
      v7 = 0;
      a1 = v6;
      v8 = *v6;
      do
      {
        if (*(_QWORD *)(v8 + v7) == *a5)
        {
          a2 = (_QWORD *)(v8 + v7);
          goto LABEL_26;
        }
        v7 += 8;
      }
      while (v7 != 4096);
      v6 = a1 + 1;
      if (a1 + 1 != a3)
        continue;
      break;
    }
  }
  a2 = (_QWORD *)*a3;
  if ((_QWORD *)*a3 != a4)
  {
    v9 = 0;
    while (*a2 != *a5)
    {
      ++v9;
      if (++a2 == a4)
      {
        a2 = a4;
        break;
      }
    }
    if (v9 != 512)
      goto LABEL_27;
    v10 = (_QWORD *)a1[2];
    a1 += 2;
    a2 = v10;
    goto LABEL_26;
  }
  return a3;
}

BOOL sub_1C4EBA348(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = a1[1];
  v1 = a1[2];
  if (v1 == v2)
    v3 = 0;
  else
    v3 = ((v1 - v2) << 6) - 1;
  v4 = v3 - (a1[5] + a1[4]);
  if (v4 >= 0x400)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
  return v4 > 0x3FF;
}

void ****sub_1C4EBA3AC(void ****result, _BYTE *__src, _BYTE *a3)
{
  void ***v3;
  void **v4;
  void **v5;
  _BYTE *v7;
  void ****v8;
  void **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;

  v3 = *result;
  v5 = **result;
  v4 = (*result)[1];
  if (__src != a3)
  {
    v7 = __src;
    v8 = result;
    v10 = (char *)*v5++;
    v9 = (void **)v10;
    while (1)
    {
      v11 = (char *)v9 - (char *)v4 + 4096;
      if ((a3 - v7) >> 3 >= v11 >> 3)
        v12 = v11 >> 3;
      else
        v12 = (a3 - v7) >> 3;
      if (v12)
        result = (void ****)memmove(v4, v7, 8 * v12);
      v7 += 8 * v12;
      if (v7 == a3)
        break;
      v13 = (void **)*v5++;
      v9 = v13;
      v4 = v13;
    }
    v4 += v12;
    if ((char *)*(v5 - 1) + 4096 == (char *)v4)
      v4 = (void **)*v5;
    else
      --v5;
    v3 = *v8;
  }
  *v3 = v5;
  v3[1] = v4;
  return result;
}

_QWORD *sub_1C4EBA468(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_1E8139308;
  v2 = a1 + 20;
  v3 = (_QWORD *)a1[23];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      return sub_1C47A80D0(a1);
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  return sub_1C47A80D0(a1);
}

uint64_t sub_1C4EBA4C8(uint64_t a1)
{
  uint64_t v2;

  v2 = 840;
  do
  {
    if (*(char *)(a1 + v2 - 1) < 0)
      operator delete(*(void **)(a1 + v2 - 24));
    v2 -= 24;
  }
  while (v2);
  return a1;
}

uint64_t getInlinableCS(uint64_t result)
{
  unsigned int v1;
  BOOL v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(unsigned __int8 *)(result + 16) - 33;
  v2 = v1 > 0x33;
  v3 = (1 << v1) & 0x8000000000041;
  if (v2 || v3 == 0)
    return 0;
  v5 = *(_QWORD *)(result - 32);
  if (!v5
    || *(_BYTE *)(v5 + 16)
    || *(_QWORD *)(v5 + 24) != *(_QWORD *)(result + 72)
    || *(_QWORD *)(v5 + 72) == v5 + 72 && (*(_BYTE *)(v5 + 34) & 0x80) == 0)
  {
    return 0;
  }
  return result;
}

uint64_t llvm::MLInlineAdvisor::MLInlineAdvisor(uint64_t a1, const llvm::Module *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t ResultImpl;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  int ModuleIRSize;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t InlinableCS;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  BOOL v29;
  uint64_t **v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t **v43;
  uint64_t **v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t **v49;
  uint64_t *v50;
  uint64_t **v51;
  BOOL v52;
  unsigned int v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  void *v60[2];
  __int128 v61;
  __int128 v62;
  void *__p[2];
  uint64_t v64;
  _BYTE v65[80];
  uint64_t v66;

  ResultImpl = llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, (uint64_t)a2);
  llvm::InlineAdvisor::InlineAdvisor((_QWORD *)a1, a2, *(_QWORD *)(ResultImpl + 8));
  *(_QWORD *)a1 = &off_1E8139270;
  v9 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 32) = v9;
  v10 = llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::LazyCallGraphAnalysis::Key, (uint64_t)a2);
  *(_QWORD *)(a1 + 80) = 0;
  v11 = (uint64_t **)(a1 + 80);
  *(_QWORD *)(a1 + 40) = v10 + 8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 80;
  ModuleIRSize = llvm::MLInlineAdvisor::getModuleIRSize((llvm::MLInlineAdvisor *)a1);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 96) = ModuleIRSize;
  *(_DWORD *)(a1 + 100) = ModuleIRSize;
  *(_BYTE *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 168) = 0;
  llvm::CallGraph::CallGraph((llvm::CallGraph *)v65, a2);
  LODWORD(v56) = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  *(_OWORD *)v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  *(_OWORD *)__p = 0u;
  v64 = 0;
  sub_1C4DE3A20((int *)&v56, v66);
LABEL_2:
  sub_1C4DE3CBC(&v56);
  v13 = (char *)*((_QWORD *)&v61 + 1);
  v14 = (char *)v62;
  if (*((_QWORD *)&v61 + 1) != (_QWORD)v62)
  {
    v54 = 0;
    while (1)
    {
      v15 = *(_QWORD *)(*(_QWORD *)v13 + 8);
      if (v15)
      {
        if (*(_BYTE *)(v15 + 16))
        {
          if (*(_BYTE *)(v15 + 16) != 3 || (*(_DWORD *)(v15 + 20) & 0x7FFFFFF) != 0)
            goto LABEL_11;
        }
        else if (*(_QWORD *)(v15 + 72) != v15 + 72 || (*(_BYTE *)(v15 + 34) & 0x80) != 0)
        {
LABEL_11:
          v16 = v15 + 72;
          for (i = *(_QWORD *)(v15 + 80); ; i = *(_QWORD *)(i + 8))
          {
            if (i == v16)
              goto LABEL_49;
            v18 = i - 24;
            if (!i)
              v18 = 0;
            v19 = *(_QWORD *)(v18 + 48);
            if (v19 != v18 + 40)
              break;
          }
          while (1)
          {
            if (v19)
              v20 = v19 - 24;
            else
              v20 = 0;
            InlinableCS = getInlinableCS(v20);
            if (InlinableCS)
            {
              v22 = *(_QWORD *)(InlinableCS - 32);
              if (!v22 || *(_BYTE *)(v22 + 16) || *(_QWORD *)(v22 + 24) != *(_QWORD *)(InlinableCS + 72))
                v22 = 0;
              v23 = *(_QWORD *)(a1 + 40);
              *(_QWORD *)&v55 = v22;
              v24 = sub_1C4E851E8((uint64_t *)(v23 + 96), &v55);
              v25 = v24[1];
              if (!v25)
              {
                v25 = sub_1C484358C(v23, 104, 3);
                v24[1] = v25;
                *(_QWORD *)v25 = v23;
                *(_QWORD *)(v25 + 8) = v22;
                *(_BYTE *)(v25 + 96) = 0;
                *(_QWORD *)(v25 + 16) = 0;
                *(_BYTE *)(v25 + 24) = 0;
              }
              v26 = *v11;
              if (*v11)
              {
                v27 = (uint64_t *)(a1 + 80);
                do
                {
                  v28 = v26[4];
                  v29 = v28 >= v25;
                  if (v28 >= v25)
                    v30 = (uint64_t **)v26;
                  else
                    v30 = (uint64_t **)(v26 + 1);
                  if (v29)
                    v27 = v26;
                  v26 = *v30;
                }
                while (*v30);
                if (v27 != (uint64_t *)v11 && v25 >= v27[4])
                {
                  v31 = *((_DWORD *)v27 + 10);
                  v32 = v54;
                  if (v54 <= v31 + 1)
                    v32 = v31 + 1;
                  v54 = v32;
                }
              }
            }
            v19 = *(_QWORD *)(v19 + 8);
            v33 = i - 24;
            if (!i)
              v33 = 0;
            if (v19 == v33 + 40)
              break;
LABEL_48:
            if (i == v16)
              goto LABEL_49;
          }
          while (1)
          {
            i = *(_QWORD *)(i + 8);
            if (i == v16)
              break;
            v34 = i - 24;
            if (!i)
              v34 = 0;
            v19 = *(_QWORD *)(v34 + 48);
            if (v19 != v34 + 40)
              goto LABEL_48;
          }
        }
      }
LABEL_49:
      v13 += 8;
      if (v13 == v14)
      {
        v35 = *((_QWORD *)&v61 + 1);
        v36 = v62;
        while (1)
        {
          if (v35 == v36)
            goto LABEL_2;
          v37 = *(_QWORD *)(*(_QWORD *)v35 + 8);
          if (v37)
          {
            if (*(_BYTE *)(v37 + 16))
            {
              if (*(_BYTE *)(v37 + 16) == 3 && (*(_DWORD *)(v37 + 20) & 0x7FFFFFF) == 0)
                goto LABEL_72;
            }
            else if (*(_QWORD *)(v37 + 72) == v37 + 72 && (*(_BYTE *)(v37 + 34) & 0x80) == 0)
            {
              goto LABEL_72;
            }
            v38 = *(_QWORD *)(a1 + 40);
            *(_QWORD *)&v55 = *(_QWORD *)(*(_QWORD *)v35 + 8);
            v39 = sub_1C4E851E8((uint64_t *)(v38 + 96), &v55);
            v40 = v39[1];
            if (!v40)
            {
              v41 = v39;
              v40 = sub_1C484358C(v38, 104, 3);
              v41[1] = v40;
              *(_QWORD *)v40 = v38;
              *(_QWORD *)(v40 + 8) = v37;
              *(_BYTE *)(v40 + 96) = 0;
              *(_QWORD *)(v40 + 16) = 0;
              *(_BYTE *)(v40 + 24) = 0;
            }
            v42 = *v11;
            v43 = (uint64_t **)(a1 + 80);
            v44 = (uint64_t **)(a1 + 80);
            if (*v11)
            {
              while (1)
              {
                while (1)
                {
                  v44 = (uint64_t **)v42;
                  v45 = v42[4];
                  if (v45 <= v40)
                    break;
                  v42 = *v44;
                  v43 = v44;
                  if (!*v44)
                    goto LABEL_68;
                }
                if (v45 >= v40)
                  break;
                v42 = v44[1];
                if (!v42)
                {
                  v43 = v44 + 1;
                  goto LABEL_68;
                }
              }
            }
            else
            {
LABEL_68:
              v46 = (uint64_t *)v44;
              v44 = (uint64_t **)operator new(0x30uLL);
              v44[4] = (uint64_t *)v40;
              *((_DWORD *)v44 + 10) = 0;
              *v44 = 0;
              v44[1] = 0;
              v44[2] = v46;
              *v43 = (uint64_t *)v44;
              v47 = **(_QWORD **)(a1 + 72);
              v48 = (uint64_t *)v44;
              if (v47)
              {
                *(_QWORD *)(a1 + 72) = v47;
                v48 = *v43;
              }
              sub_1C4768E74(*(uint64_t **)(a1 + 80), v48);
              ++*(_QWORD *)(a1 + 88);
            }
            *((_DWORD *)v44 + 10) = v54;
          }
LABEL_72:
          v35 += 8;
        }
      }
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
    v13 = (char *)*((_QWORD *)&v61 + 1);
  }
  if (v13)
  {
    *(_QWORD *)&v62 = v13;
    operator delete(v13);
  }
  if (v60[0])
  {
    v60[1] = v60[0];
    operator delete(v60[0]);
  }
  MEMORY[0x1CAA32FB4](v57, 8);
  v49 = *(uint64_t ***)(a1 + 72);
  if (v49 != v11)
  {
    do
    {
      v55 = *((_OWORD *)v49 + 2);
      sub_1C4EBC4C8((uint64_t)&v56, a1 + 152, (uint64_t *)&v55);
      *(_QWORD *)(a1 + 56) += *(_QWORD *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(*(_QWORD *)(a1 + 16), &llvm::FunctionPropertiesAnalysis::Key, *(_QWORD *)(v55 + 8))+ 32);
      v50 = v49[1];
      if (v50)
      {
        do
        {
          v51 = (uint64_t **)v50;
          v50 = (uint64_t *)*v50;
        }
        while (v50);
      }
      else
      {
        do
        {
          v51 = (uint64_t **)v49[2];
          v52 = *v51 == (uint64_t *)v49;
          v49 = v51;
        }
        while (!v52);
      }
      v49 = v51;
    }
    while (v51 != v11);
  }
  *(_QWORD *)(a1 + 48) = *(unsigned int *)(a1 + 160);
  llvm::CallGraph::~CallGraph((llvm::CallGraph *)v65);
  return a1;
}

uint64_t llvm::MLInlineAdvisor::getModuleIRSize(llvm::MLInlineAdvisor *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 1);
  v2 = v1 + 24;
  v3 = *(_QWORD *)(v1 + 32);
  if (v3 != v1 + 24)
  {
    v4 = 0;
    while (1)
    {
      if (v3)
        v5 = v3 - 56;
      else
        v5 = 0;
      if (v3 && *(_BYTE *)(v5 + 16) == 3)
      {
        if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 0)
          goto LABEL_14;
      }
      else if (!*(_BYTE *)(v5 + 16) && *(_QWORD *)(v5 + 72) == v5 + 72 && (*(_BYTE *)(v5 + 34) & 0x80) == 0)
      {
        goto LABEL_14;
      }
      v4 += llvm::Function::getInstructionCount((llvm::Function *)v5);
LABEL_14:
      v3 = *(_QWORD *)(v3 + 8);
      if (v3 == v2)
        return v4;
    }
  }
  return 0;
}

uint64_t llvm::MLInlineAdvisor::getLocalCalls(llvm::MLInlineAdvisor *this, llvm::Function *a2)
{
  return *(_QWORD *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(*((_QWORD *)this + 2), &llvm::FunctionPropertiesAnalysis::Key, (uint64_t)a2)+ 32);
}

uint64_t llvm::MLInlineAdvisor::getInitialFunctionLevel(llvm::MLInlineAdvisor *this, const Function *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t v11;
  const Function *v12;

  v4 = (uint64_t *)(*((_QWORD *)this + 5) + 96);
  v11 = 0;
  v12 = a2;
  if ((sub_1C4850EC8(v4, &v12, &v11) & 1) == 0 || !*(_QWORD *)(v11 + 8))
    return 0;
  v5 = (uint64_t *)(*((_QWORD *)this + 5) + 96);
  v11 = 0;
  v12 = a2;
  v6 = sub_1C4850EC8(v5, &v12, &v11);
  v7 = 0;
  if (v6)
    v7 = *(_QWORD *)(v11 + 8);
  v8 = (uint64_t **)*((_QWORD *)this + 10);
  if (!v8)
LABEL_11:
    abort();
  while (1)
  {
    while (1)
    {
      v9 = (unint64_t)v8[4];
      if (v9 <= v7)
        break;
      v8 = (uint64_t **)*v8;
      if (!v8)
        goto LABEL_11;
    }
    if (v9 >= v7)
      return *((unsigned int *)v8 + 10);
    v8 = (uint64_t **)v8[1];
    if (!v8)
      goto LABEL_11;
  }
}

void llvm::MLInlineAdvisor::onPassEntry(llvm::MLInlineAdvisor *this)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE v18[24];

  v2 = *((_QWORD *)this + 18);
  for (*((_QWORD *)this + 6) -= v2; v2; v2 = *((_QWORD *)this + 18))
  {
    v3 = (void **)*((_QWORD *)this + 14);
    v4 = (*(_QWORD **)((char *)v3 + ((*((_QWORD *)this + 17) >> 6) & 0x3FFFFFFFFFFFFF8)))[*((_QWORD *)this + 17) & 0x1FFLL];
    v5 = *((_QWORD *)this + 17) + 1;
    *((_QWORD *)this + 17) = v5;
    *((_QWORD *)this + 18) = v2 - 1;
    if (v5 >= 0x400)
    {
      operator delete(*v3);
      *((_QWORD *)this + 14) += 8;
      *((_QWORD *)this + 17) -= 512;
    }
    if (*(_QWORD *)v4)
    {
      ++*((_QWORD *)this + 6);
      *((_QWORD *)this + 7) += *(_QWORD *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(*((_QWORD *)this + 2), &llvm::FunctionPropertiesAnalysis::Key, *(_QWORD *)(v4 + 8))+ 32);
      v6 = *(_QWORD *)(v4 + 24);
      v7 = *(unsigned int *)(v4 + 32);
      if ((_DWORD)v7)
      {
        v8 = 8 * v7;
        v9 = *(_QWORD **)(v4 + 24);
        while ((*v9 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(_QWORD *)(*v9 & 0xFFFFFFFFFFFFFFF8))
        {
          ++v9;
          v8 -= 8;
          if (!v8)
            goto LABEL_10;
        }
      }
      else
      {
        v9 = *(_QWORD **)(v4 + 24);
      }
      v10 = (_QWORD *)(v6 + 8 * v7);
LABEL_14:
      if (v9 != v10)
      {
        v17 = 0;
        v11 = *v9 & 0xFFFFFFFFFFFFFFF8;
        v17 = v11;
        sub_1C4EBC4C8((uint64_t)v18, (uint64_t)this + 152, (uint64_t *)&v17);
        if (v18[16])
        {
          v12 = *((_QWORD *)this + 15);
          v13 = *((_QWORD *)this + 14);
          if (v12 == v13)
            v14 = 0;
          else
            v14 = ((v12 - v13) << 6) - 1;
          v15 = *((_QWORD *)this + 18);
          v16 = v15 + *((_QWORD *)this + 17);
          if (v14 == v16)
          {
            sub_1C4EBC784((uint64_t)this + 104);
            v13 = *((_QWORD *)this + 14);
            v15 = *((_QWORD *)this + 18);
            v16 = *((_QWORD *)this + 17) + v15;
          }
          *(_QWORD *)(*(_QWORD *)(v13 + ((v16 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v16 & 0x1FF)) = v11;
          *((_QWORD *)this + 18) = v15 + 1;
        }
        while (++v9 != v10)
        {
          if ((*v9 & 0xFFFFFFFFFFFFFFF8) != 0 && *(_QWORD *)(*v9 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_14;
        }
      }
    }
LABEL_10:
    ;
  }
  *((_QWORD *)this + 7) -= *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
}

void llvm::MLInlineAdvisor::onPassExit(llvm::MLInlineAdvisor *this, llvm::LazyCallGraph::SCC *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ResultImpl;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  if (a2)
  {
    *((_QWORD *)this + 8) = 0;
    v3 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v3)
    {
      v4 = (uint64_t *)*((_QWORD *)a2 + 1);
      v5 = 8 * v3;
      do
      {
        v6 = *v4;
        ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(*((_QWORD *)this + 2), &llvm::FunctionPropertiesAnalysis::Key, *(_QWORD *)(*v4 + 8));
        v8 = *((_QWORD *)this + 15);
        v9 = *((_QWORD *)this + 14);
        *((_QWORD *)this + 8) += *(_QWORD *)(ResultImpl + 32);
        if (v8 == v9)
          v10 = 0;
        else
          v10 = ((v8 - v9) << 6) - 1;
        v11 = *((_QWORD *)this + 18);
        v12 = v11 + *((_QWORD *)this + 17);
        if (v10 == v12)
        {
          sub_1C4EBC784((uint64_t)this + 104);
          v9 = *((_QWORD *)this + 14);
          v11 = *((_QWORD *)this + 18);
          v12 = *((_QWORD *)this + 17) + v11;
        }
        *(_QWORD *)(*(_QWORD *)(v9 + ((v12 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v12 & 0x1FF)) = v6;
        *((_QWORD *)this + 18) = v11 + 1;
        ++v4;
        v5 -= 8;
      }
      while (v5);
    }
  }
}

uint64_t llvm::MLInlineAdvisor::onSuccessfulInlining(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  llvm::Function *v7;
  int InstructionCount;
  int v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  _BYTE v17[16];
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  _BYTE v22[16];

  v7 = *(llvm::Function **)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v13 = v17;
  v14 = v17;
  v15 = 2;
  v16 = 0;
  v18 = v22;
  v19 = v22;
  v20 = 2;
  v21 = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v13, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  sub_1C4DD7214((uint64_t)&v13, (uint64_t)&llvm::FunctionPropertiesAnalysis::Key);
  llvm::AnalysisManager<llvm::Function>::invalidate(*(_QWORD *)(a1 + 16), (uint64_t)v7, (uint64_t)&v13);
  if (v19 != v18)
    free(v19);
  if (v14 != v13)
    free(v14);
  InstructionCount = llvm::Function::getInstructionCount(v7);
  v9 = *(_DWORD *)(a2 + 72);
  if (!a3)
    v9 = 0;
  v10 = InstructionCount - (v9 + *(_DWORD *)(a2 + 64)) + *(_DWORD *)(a1 + 100);
  *(_DWORD *)(a1 + 100) = v10;
  if ((float)(*(float *)&dword_1ED7F2AB0 * (float)*(int *)(a1 + 96)) < (float)v10)
    *(_BYTE *)(a1 + 176) = 1;
  result = llvm::AnalysisManager<llvm::Function>::getResultImpl(*(_QWORD *)(a1 + 16), &llvm::FunctionPropertiesAnalysis::Key, (uint64_t)v7);
  v12 = *(_QWORD *)(result + 32);
  if (a3)
  {
    --*(_QWORD *)(a1 + 48);
  }
  else
  {
    result = llvm::AnalysisManager<llvm::Function>::getResultImpl(*(_QWORD *)(a1 + 16), &llvm::FunctionPropertiesAnalysis::Key, v6);
    v12 += *(_QWORD *)(result + 32);
  }
  *(_QWORD *)(a1 + 56) += v12 - *(_QWORD *)(a2 + 80);
  return result;
}

uint64_t llvm::MLInlineAdvisor::getAdviceImpl@<X0>(llvm::MLInlineAdvisor *this@<X0>, llvm::CallBase *a2@<X1>, _QWORD *a3@<X8>)
{
  const Function *v6;
  uint64_t v7;
  uint64_t ResultImpl;
  llvm::OptimizationRemarkEmitter *v9;
  int MandatoryKind;
  uint64_t v11;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  llvm::MLInlineAdvisor *v17;
  llvm::CallBase *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t InliningCostEstimate;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  llvm::CallBase *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t InitialFunctionLevel;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  void **v55;
  char *v56;
  unint64_t v57;
  void **v58;
  uint64_t v59;
  llvm::MLInlineAdvisor *v60;
  const void *v61[10];
  void *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t (**v65)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  const char *v72;
  const char *v73;
  uint64_t v74;
  char v75;
  char v76;
  void *v77;
  uint64_t v78;
  _BYTE v79[260];
  int v80;
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v6 = *(const Function **)(*((_QWORD *)a2 + 5) + 56);
  v7 = *((_QWORD *)a2 - 4);
  if (!v7 || *(_BYTE *)(v7 + 16) || *(_QWORD *)(v7 + 24) != *((_QWORD *)a2 + 9))
    v7 = 0;
  v60 = this;
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(*((_QWORD *)this + 2), &llvm::TargetIRAnalysis::Key, v7);
  v9 = (llvm::OptimizationRemarkEmitter *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(*((_QWORD *)this + 2), &llvm::OptimizationRemarkEmitterAnalysis::Key, (uint64_t)v6)+ 8);
  MandatoryKind = llvm::InlineAdvisor::getMandatoryKind((uint64_t)a2, *((_QWORD *)this + 2));
  if (MandatoryKind == 2 || v6 == (const Function *)v7)
    return (*(uint64_t (**)(llvm::MLInlineAdvisor *, llvm::CallBase *, _QWORD))(*(_QWORD *)this + 48))(this, a2, 0);
  v14 = MandatoryKind;
  if (*((_BYTE *)this + 176))
  {
    v15 = ****(_QWORD ****)v9;
    if (*(_QWORD *)(v15 + 128)
      || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v15 + 72) + 48))(*(_QWORD *)(v15 + 72)))
    {
      v34 = *((_QWORD *)a2 + 5);
      v35 = *((_QWORD *)a2 + 6);
      v36 = *(_QWORD *)(v34 + 56);
      if (v35)
      {
        v37 = *(_QWORD *)(v35 - 8 * *(unsigned int *)(v35 + 8));
        if (*(_BYTE *)v37 != 15)
          v37 = *(_QWORD *)(v37 - 8 * *(unsigned int *)(v37 + 8));
        v38 = *(_DWORD *)(v35 + 4);
        LODWORD(v35) = *(unsigned __int16 *)(v35 + 2);
      }
      else
      {
        v37 = 0;
        v38 = 0;
      }
      v66 = 10;
      v67 = 2;
      v68 = v36;
      v69 = v37;
      v70 = v38;
      v71 = v35;
      v72 = "inline-ml";
      v73 = "ForceStop";
      v74 = 9;
      v75 = 0;
      v76 = 0;
      v77 = v79;
      v78 = 0x400000000;
      v79[256] = 0;
      v80 = -1;
      v81 = v34;
      v65 = &off_1E814E538;
      v61[0] = "Won't attempt inlining because module size grew too much.";
      v61[1] = (const void *)57;
      sub_1C53B17B4((uint64_t)&v77, v61);
      sub_1C61998EC((uint64_t)v61, (uint64_t)&v65);
      v61[0] = &off_1E814E538;
      v65 = &off_1E814E790;
      v53 = (char *)v77;
      if ((_DWORD)v78)
      {
        v54 = (unint64_t)v78 << 6;
        do
        {
          v55 = (void **)&v53[v54];
          if (v53[v54 - 17] < 0)
            operator delete(*(v55 - 5));
          if (*((char *)v55 - 41) < 0)
            operator delete(*(v55 - 8));
          v54 -= 64;
        }
        while (v54);
        v53 = (char *)v77;
      }
      if (v53 != v79)
        free(v53);
      llvm::OptimizationRemarkEmitter::emit(v9, (llvm::DiagnosticInfoOptimizationBase *)v61);
      v61[0] = &off_1E814E790;
      v56 = (char *)v62;
      if (v63)
      {
        v57 = (unint64_t)v63 << 6;
        do
        {
          v58 = (void **)&v56[v57];
          if (v56[v57 - 17] < 0)
            operator delete(*(v58 - 5));
          if (*((char *)v58 - 41) < 0)
            operator delete(*(v58 - 8));
          v57 -= 64;
        }
        while (v57);
        v56 = (char *)v62;
      }
      if (v56 != (char *)&v64)
        free(v56);
    }
    v16 = operator new();
    v17 = this;
    v18 = a2;
    v19 = (uint64_t)v9;
    v20 = v14 == 1;
    goto LABEL_32;
  }
  v21 = ResultImpl + 8;
  if (MandatoryKind == 1)
  {
    llvm::getInliningCostFeatures((uint64_t)a2, v21, (uint64_t)sub_1C4EBCBD4, (uint64_t)&v60, 0, v11, 0, (uint64_t)&v65);
    if (v79[0])
      return (*(uint64_t (**)(llvm::MLInlineAdvisor *, llvm::CallBase *, uint64_t))(*(_QWORD *)this + 48))(this, a2, 1);
    goto LABEL_31;
  }
  InliningCostEstimate = llvm::getInliningCostEstimate((uint64_t)a2, v21, (uint64_t)sub_1C4EBCBD4, (uint64_t)&v60, 0, v11, 0, 0);
  if ((InliningCostEstimate & 0xFF00000000) == 0
    || (v24 = InliningCostEstimate,
        llvm::getInliningCostFeatures((uint64_t)a2, v21, (uint64_t)sub_1C4EBCBD4, (uint64_t)&v60, 0, v23, 0, (uint64_t)&v65), !v79[0]))
  {
LABEL_31:
    v16 = operator new();
    v17 = this;
    v18 = a2;
    v19 = (uint64_t)v9;
    v20 = 0;
LABEL_32:
    result = llvm::InlineAdvice::InlineAdvice(v16, (uint64_t)v17, v18, v19, v20);
    *a3 = result;
    return result;
  }
  v25 = *((_DWORD *)a2 + 5);
  v26 = v25 & 0x7FFFFFF;
  v27 = (llvm::CallBase *)((char *)a2 - 32 * v26);
  v28 = *((unsigned __int8 *)a2 + 16);
  if (v28 == 84)
  {
    v29 = 0;
  }
  else if (v28 == 39)
  {
    v29 = (*((_DWORD *)a2 + 20) + 1);
  }
  else
  {
    v29 = 2;
  }
  if (v25 < 0 && (v59 = *((_QWORD *)v27 - 1), (v59 & 0xFFFFFFFF0) != 0))
    v30 = (*((_DWORD *)v27 - 3) - *(_DWORD *)((char *)v27 - v59));
  else
    v30 = 0;
  if (v27 == (llvm::CallBase *)((char *)a2 + -32 * v30 + -32 * v29 - 32))
  {
    v31 = 0;
  }
  else
  {
    LODWORD(v31) = 0;
    v32 = 32 * v26 - 32 * v29 - 32 * v30 - 32;
    do
    {
      v33 = *(_QWORD *)v27;
      v27 = (llvm::CallBase *)((char *)v27 + 32);
      if (*(unsigned __int8 *)(v33 + 16) >= 0x15u)
        v31 = v31;
      else
        v31 = (v31 + 1);
      v32 -= 32;
    }
    while (v32);
  }
  v39 = (_QWORD *)llvm::AnalysisManager<llvm::Function>::getResultImpl(*((_QWORD *)this + 2), &llvm::FunctionPropertiesAnalysis::Key, (uint64_t)v6);
  v40 = (_QWORD *)llvm::AnalysisManager<llvm::Function>::getResultImpl(*((_QWORD *)this + 2), &llvm::FunctionPropertiesAnalysis::Key, v7);
  v41 = v40[1];
  *(_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), 24) = v41;
  InitialFunctionLevel = llvm::MLInlineAdvisor::getInitialFunctionLevel(this, v6);
  *(_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), 25) = InitialFunctionLevel;
  v43 = *((_QWORD *)this + 6);
  *(_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), 26) = v43;
  *(_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), 27) = v31;
  v44 = *((_QWORD *)this + 7);
  *(_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), 29) = v44;
  v45 = v39[3];
  *(_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), 30) = v45;
  v46 = v39[2];
  *(_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), 31) = v46;
  v47 = v39[1];
  *(_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), 32) = v47;
  v48 = v40[2];
  *(_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), 33) = v48;
  v49 = v40[3];
  *(_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), 34) = v49;
  v50 = v24;
  v51 = 0;
  *(_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), 28) = v50;
  do
  {
    v52 = *((int *)&v65 + v51);
    *(_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), v51++) = v52;
  }
  while (v51 != 24);
  return (*(uint64_t (**)(llvm::MLInlineAdvisor *, llvm::CallBase *, llvm::OptimizationRemarkEmitter *))(*(_QWORD *)this + 64))(this, a2, v9);
}

uint64_t llvm::MLInlineAdvisor::getAdviceFromModel@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  char v8;
  uint64_t v9;
  uint64_t result;

  v8 = *(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32)) != 0;
  v9 = operator new();
  result = sub_1C4EBCC00(v9, a1, a2, a3, v8);
  *a4 = result;
  return result;
}

uint64_t llvm::MLInlineAdvisor::getMandatoryAdvice@<X0>(llvm::MLInlineAdvisor *this@<X0>, llvm::CallBase *a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  char v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = a3;
  if (a3 && !*((_BYTE *)this + 176))
    return (*(uint64_t (**)(llvm::MLInlineAdvisor *, llvm::CallBase *))(*(_QWORD *)this + 56))(this, a2);
  v8 = llvm::AnalysisManager<llvm::Function>::getResultImpl(*((_QWORD *)this + 2), &llvm::OptimizationRemarkEmitterAnalysis::Key, *(_QWORD *)(*((_QWORD *)a2 + 5) + 56))+ 8;
  v9 = operator new();
  result = llvm::InlineAdvice::InlineAdvice(v9, (uint64_t)this, a2, v8, v4);
  *a4 = result;
  return result;
}

uint64_t llvm::MLInlineAdvisor::getMandatoryAdviceImpl@<X0>(llvm::MLInlineAdvisor *this@<X0>, llvm::CallBase *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = llvm::AnalysisManager<llvm::Function>::getResultImpl(*((_QWORD *)this + 2), &llvm::OptimizationRemarkEmitterAnalysis::Key, *(_QWORD *)(*((_QWORD *)a2 + 5) + 56))+ 8;
  v7 = operator new();
  result = sub_1C4EBCC00(v7, (uint64_t)this, a2, v6, 1);
  *a3 = result;
  return result;
}

void llvm::MLInlineAdvice::reportContextForRemark(llvm::MLInlineAdvice *this, llvm::DiagnosticInfoOptimizationBase *a2)
{
  uint64_t ***v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ****v9;
  uint64_t ***v10;
  int v11;
  int v12;
  uint64_t ***v13;
  char *v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t *v18;
  char v19;
  BOOL v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string::size_type v23;
  unint64_t *v24;
  int v25;
  const char *v26;
  size_t v27;
  char v28[24];
  void *v29[2];
  char v30;
  uint64_t v31;
  uint64_t v32;
  std::string v33;
  void *v34;
  char v35;
  void *__dst[2];
  char v37;
  void *__p;
  char v39;

  v4 = (uint64_t ***)*((_QWORD *)this + 3);
  if ((*((_BYTE *)v4 + 23) & 0x10) != 0)
  {
    v5 = ***v4;
    v6 = *(_QWORD *)(v5 + 152);
    v7 = *(unsigned int *)(v5 + 168);
    if ((_DWORD)v7)
    {
      LODWORD(v8) = (v7 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      v9 = (uint64_t ****)(v6 + 16 * v8);
      v10 = *v9;
      if (*v9 == v4)
      {
LABEL_9:
        v13 = v9[1];
        v16 = (size_t)*v13;
        v14 = (char *)(v13 + 2);
        v15 = v16;
        goto LABEL_10;
      }
      v11 = 1;
      while (v10 != (uint64_t ***)-4096)
      {
        v12 = v8 + v11++;
        v8 = v12 & (v7 - 1);
        v10 = *(uint64_t ****)(v6 + 16 * v8);
        if (v10 == v4)
        {
          v9 = (uint64_t ****)(v6 + 16 * v8);
          goto LABEL_9;
        }
      }
    }
    v9 = (uint64_t ****)(v6 + 16 * v7);
    goto LABEL_9;
  }
  v15 = 0;
  v14 = &byte_1C871356D;
LABEL_10:
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument(__dst, "Callee", 6uLL, v14, v15);
  sub_1C47E3888((uint64_t)a2, (uint64_t)__dst);
  if (v39 < 0)
    operator delete(__p);
  if (v37 < 0)
    operator delete(__dst[0]);
  v17 = 0;
  v18 = &llvm::FeatureNameMap;
  do
  {
    v19 = *((_BYTE *)v18 + 23);
    v20 = v19 < 0;
    if (v19 >= 0)
      v21 = (const std::string::value_type *)v18;
    else
      v21 = (const std::string::value_type *)*v18;
    v22 = v19 & 0x7F;
    if (v20)
      v23 = v18[1];
    else
      v23 = v22;
    v24 = (unint64_t *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 1) + 32)
                                                                         + 16))(*(_QWORD *)(*((_QWORD *)this + 1) + 32), v17);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v33, v21, v23, *v24);
    sub_1C47E3888((uint64_t)a2, (uint64_t)&v33);
    if (v35 < 0)
      operator delete(v34);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    v18 += 3;
    ++v17;
  }
  while (v17 != 35);
  v25 = *((unsigned __int8 *)this + 56);
  v28[23] = 12;
  strcpy(v28, "ShouldInline");
  if (v25)
    v26 = "true";
  else
    v26 = "false";
  if (v25)
    v27 = 4;
  else
    v27 = 5;
  v30 = v27;
  memcpy(v29, v26, v27);
  *(_BYTE *)((unint64_t)v29 | v27) = 0;
  v31 = 0;
  v32 = 0;
  sub_1C47E3888((uint64_t)a2, (uint64_t)v28);
  if (v30 < 0)
    operator delete(v29[0]);
}

uint64_t llvm::MLInlineAdvice::recordInliningImpl(llvm::MLInlineAdvice *this)
{
  llvm::OptimizationRemarkEmitter *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  void **v12;
  uint64_t (**v13)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  char v23;
  char v24;
  void *v25;
  uint64_t v26;
  _BYTE v27[260];
  int v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)this + 6);
  v3 = ****(_QWORD ****)v2;
  if (*(_QWORD *)(v3 + 128)
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v3 + 72) + 48))(*(_QWORD *)(v3 + 72)))
  {
    v5 = *((_QWORD *)this + 4);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 - 8 * *(unsigned int *)(v5 + 8));
      if (*(_BYTE *)v6 != 15)
        v6 = *(_QWORD *)(v6 - 8 * *(unsigned int *)(v6 + 8));
      v7 = *(_DWORD *)(v5 + 4);
      LODWORD(v5) = *(unsigned __int16 *)(v5 + 2);
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    v8 = *((_QWORD *)this + 5);
    v9 = *(_QWORD *)(v8 + 56);
    v14 = 9;
    v15 = 2;
    v16 = v9;
    v17 = v6;
    v18 = v7;
    v19 = v5;
    v20 = "inline-ml";
    v21 = "InliningSuccess";
    v22 = 15;
    v23 = 0;
    v24 = 0;
    v25 = v27;
    v26 = 0x400000000;
    v27[256] = 0;
    v28 = -1;
    v29 = v8;
    v13 = &off_1E814E500;
    llvm::MLInlineAdvice::reportContextForRemark(this, (llvm::DiagnosticInfoOptimizationBase *)&v13);
    llvm::OptimizationRemarkEmitter::emit(v2, (llvm::DiagnosticInfoOptimizationBase *)&v13);
    v13 = &off_1E814E790;
    v10 = (char *)v25;
    if ((_DWORD)v26)
    {
      v11 = (unint64_t)v26 << 6;
      do
      {
        v12 = (void **)&v10[v11];
        if (v10[v11 - 17] < 0)
          operator delete(*(v12 - 5));
        if (*((char *)v12 - 41) < 0)
          operator delete(*(v12 - 8));
        v11 -= 64;
      }
      while (v11);
      v10 = (char *)v25;
    }
    if (v10 != v27)
      free(v10);
  }
  return llvm::MLInlineAdvisor::onSuccessfulInlining(*((_QWORD *)this + 1), (uint64_t)this, 0);
}

uint64_t llvm::MLInlineAdvice::recordInliningWithCalleeDeletedImpl(llvm::MLInlineAdvice *this)
{
  llvm::OptimizationRemarkEmitter *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  void **v12;
  uint64_t (**v13)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  char v23;
  char v24;
  void *v25;
  uint64_t v26;
  _BYTE v27[260];
  int v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)this + 6);
  v3 = ****(_QWORD ****)v2;
  if (*(_QWORD *)(v3 + 128)
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v3 + 72) + 48))(*(_QWORD *)(v3 + 72)))
  {
    v5 = *((_QWORD *)this + 4);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 - 8 * *(unsigned int *)(v5 + 8));
      if (*(_BYTE *)v6 != 15)
        v6 = *(_QWORD *)(v6 - 8 * *(unsigned int *)(v6 + 8));
      v7 = *(_DWORD *)(v5 + 4);
      LODWORD(v5) = *(unsigned __int16 *)(v5 + 2);
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    v8 = *((_QWORD *)this + 5);
    v9 = *(_QWORD *)(v8 + 56);
    v14 = 9;
    v15 = 2;
    v16 = v9;
    v17 = v6;
    v18 = v7;
    v19 = v5;
    v20 = "inline-ml";
    v21 = "InliningSuccessWithCalleeDeleted";
    v22 = 32;
    v23 = 0;
    v24 = 0;
    v25 = v27;
    v26 = 0x400000000;
    v27[256] = 0;
    v28 = -1;
    v29 = v8;
    v13 = &off_1E814E500;
    llvm::MLInlineAdvice::reportContextForRemark(this, (llvm::DiagnosticInfoOptimizationBase *)&v13);
    llvm::OptimizationRemarkEmitter::emit(v2, (llvm::DiagnosticInfoOptimizationBase *)&v13);
    v13 = &off_1E814E790;
    v10 = (char *)v25;
    if ((_DWORD)v26)
    {
      v11 = (unint64_t)v26 << 6;
      do
      {
        v12 = (void **)&v10[v11];
        if (v10[v11 - 17] < 0)
          operator delete(*(v12 - 5));
        if (*((char *)v12 - 41) < 0)
          operator delete(*(v12 - 8));
        v11 -= 64;
      }
      while (v11);
      v10 = (char *)v25;
    }
    if (v10 != v27)
      free(v10);
  }
  return llvm::MLInlineAdvisor::onSuccessfulInlining(*((_QWORD *)this + 1), (uint64_t)this, 1);
}

void llvm::MLInlineAdvice::recordUnsuccessfulInliningImpl(llvm::MLInlineAdvice *this)
{
  llvm::OptimizationRemarkEmitter *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  void **v11;
  uint64_t (**v12)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  char v22;
  char v23;
  void *v24;
  uint64_t v25;
  _BYTE v26[260];
  int v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)this + 6);
  v3 = ****(_QWORD ****)v2;
  if (*(_QWORD *)(v3 + 128)
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v3 + 72) + 48))(*(_QWORD *)(v3 + 72)))
  {
    v4 = *((_QWORD *)this + 4);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 - 8 * *(unsigned int *)(v4 + 8));
      if (*(_BYTE *)v5 != 15)
        v5 = *(_QWORD *)(v5 - 8 * *(unsigned int *)(v5 + 8));
      v6 = *(_DWORD *)(v4 + 4);
      LODWORD(v4) = *(unsigned __int16 *)(v4 + 2);
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    v7 = *((_QWORD *)this + 5);
    v8 = *(_QWORD *)(v7 + 56);
    v13 = 10;
    v14 = 2;
    v15 = v8;
    v16 = v5;
    v17 = v6;
    v18 = v4;
    v19 = "inline-ml";
    v20 = "InliningAttemptedAndUnsuccessful";
    v21 = 32;
    v22 = 0;
    v23 = 0;
    v24 = v26;
    v25 = 0x400000000;
    v26[256] = 0;
    v27 = -1;
    v28 = v7;
    v12 = &off_1E814E538;
    llvm::MLInlineAdvice::reportContextForRemark(this, (llvm::DiagnosticInfoOptimizationBase *)&v12);
    llvm::OptimizationRemarkEmitter::emit(v2, (llvm::DiagnosticInfoOptimizationBase *)&v12);
    v12 = &off_1E814E790;
    v9 = (char *)v24;
    if ((_DWORD)v25)
    {
      v10 = (unint64_t)v25 << 6;
      do
      {
        v11 = (void **)&v9[v10];
        if (v9[v10 - 17] < 0)
          operator delete(*(v11 - 5));
        if (*((char *)v11 - 41) < 0)
          operator delete(*(v11 - 8));
        v10 -= 64;
      }
      while (v10);
      v9 = (char *)v24;
    }
    if (v9 != v26)
      free(v9);
  }
}

void llvm::MLInlineAdvice::recordUnattemptedInliningImpl(llvm::MLInlineAdvice *this)
{
  llvm::OptimizationRemarkEmitter *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  void **v11;
  uint64_t (**v12)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  char v22;
  char v23;
  void *v24;
  uint64_t v25;
  _BYTE v26[260];
  int v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)this + 6);
  v3 = ****(_QWORD ****)v2;
  if (*(_QWORD *)(v3 + 128)
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v3 + 72) + 48))(*(_QWORD *)(v3 + 72)))
  {
    v4 = *((_QWORD *)this + 4);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 - 8 * *(unsigned int *)(v4 + 8));
      if (*(_BYTE *)v5 != 15)
        v5 = *(_QWORD *)(v5 - 8 * *(unsigned int *)(v5 + 8));
      v6 = *(_DWORD *)(v4 + 4);
      LODWORD(v4) = *(unsigned __int16 *)(v4 + 2);
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    v7 = *((_QWORD *)this + 5);
    v8 = *(_QWORD *)(v7 + 56);
    v13 = 10;
    v14 = 2;
    v15 = v8;
    v16 = v5;
    v17 = v6;
    v18 = v4;
    v19 = "inline-ml";
    v20 = "IniningNotAttempted";
    v21 = 19;
    v22 = 0;
    v23 = 0;
    v24 = v26;
    v25 = 0x400000000;
    v26[256] = 0;
    v27 = -1;
    v28 = v7;
    v12 = &off_1E814E538;
    llvm::MLInlineAdvice::reportContextForRemark(this, (llvm::DiagnosticInfoOptimizationBase *)&v12);
    llvm::OptimizationRemarkEmitter::emit(v2, (llvm::DiagnosticInfoOptimizationBase *)&v12);
    v12 = &off_1E814E790;
    v9 = (char *)v24;
    if ((_DWORD)v25)
    {
      v10 = (unint64_t)v25 << 6;
      do
      {
        v11 = (void **)&v9[v10];
        if (v9[v10 - 17] < 0)
          operator delete(*(v11 - 5));
        if (*((char *)v11 - 41) < 0)
          operator delete(*(v11 - 8));
        v10 -= 64;
      }
      while (v10);
      v9 = (char *)v24;
    }
    if (v9 != v26)
      free(v9);
  }
}

_QWORD *sub_1C4EBC1EC(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;

  *a1 = &unk_1E8138308;
  v4 = (unsigned __int8 *)a1[4];
  v2 = (uint64_t)(a1 + 4);
  v3 = v4;
  if (v4)
    llvm::MetadataTracking::untrack(v2, v3);
  return a1;
}

void sub_1C4EBC228(_QWORD *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;

  *a1 = &unk_1E8138308;
  v3 = (unsigned __int8 *)a1[4];
  v1 = (uint64_t)(a1 + 4);
  v2 = v3;
  if (v3)
    llvm::MetadataTracking::untrack(v1, v2);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4EBC278(uint64_t a1)
{
  sub_1C4EBC3C8(a1);
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C4EBC29C(uint64_t a1, llvm::raw_ostream *this)
{
  llvm::raw_ostream *v2;
  void *v4;
  _QWORD *v5;
  llvm::raw_ostream *result;
  _BYTE *v7;

  v2 = this;
  v4 = (void *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v4 > 0x18uLL)
  {
    qmemcpy(v4, "[MLInlineAdvisor] Nodes: ", 25);
    *((_QWORD *)this + 4) += 25;
  }
  else
  {
    v2 = llvm::raw_ostream::write(this, "[MLInlineAdvisor] Nodes: ", 0x19uLL);
  }
  llvm::raw_ostream::operator<<(v2, *(_QWORD *)(a1 + 48));
  v5 = (_QWORD *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v5 > 7uLL)
  {
    *v5 = 0x203A736567644520;
    *((_QWORD *)v2 + 4) += 8;
  }
  else
  {
    v2 = llvm::raw_ostream::write(v2, " Edges: ", 8uLL);
  }
  result = llvm::raw_ostream::operator<<(v2, *(_QWORD *)(a1 + 56));
  v7 = (_BYTE *)*((_QWORD *)v2 + 4);
  if (*((_BYTE **)v2 + 3) == v7)
    return llvm::raw_ostream::write(v2, "\n", 1uLL);
  *v7 = 10;
  ++*((_QWORD *)v2 + 4);
  return result;
}

uint64_t sub_1C4EBC3AC(uint64_t result)
{
  int v1;

  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  else
    v1 = 0;
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void sub_1C4EBC3C8(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  *(_QWORD *)a1 = &off_1E8139270;
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 152), 8);
  v2 = *(void ***)(a1 + 112);
  v3 = *(void ***)(a1 + 120);
  *(_QWORD *)(a1 + 144) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 120);
      v2 = (void **)(*(_QWORD *)(a1 + 112) + 8);
      *(_QWORD *)(a1 + 112) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 136) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 112);
    v8 = *(_QWORD *)(a1 + 120);
    if (v8 != v9)
      *(_QWORD *)(a1 + 120) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v10 = *(void **)(a1 + 104);
  if (v10)
    operator delete(v10);
  sub_1C49F3440(*(_QWORD **)(a1 + 80));
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  llvm::InlineAdvisor::~InlineAdvisor((llvm::InlineAdvisor *)a1);
}

uint64_t sub_1C4EBC4C8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t *v7;
  unsigned int v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;

  v12 = 0;
  result = sub_1C4EBC5C8(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v7 = v12;
  v8 = *(_DWORD *)(a2 + 16);
  if ((result & 1) != 0)
  {
    v9 = 0;
    goto LABEL_8;
  }
  v10 = *(_DWORD *)(a2 + 8);
  if (4 * v10 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_10;
  }
  if (v8 + ~v10 - *(_DWORD *)(a2 + 12) <= v8 >> 3)
  {
LABEL_10:
    sub_1C4EBC65C(a2, v8);
    v12 = 0;
    result = sub_1C4EBC5C8(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
    v7 = v12;
  }
  ++*(_DWORD *)(a2 + 8);
  if (*v7 != -4096)
    --*(_DWORD *)(a2 + 12);
  *v7 = *a3;
  v8 = *(_DWORD *)(a2 + 16);
  v9 = 1;
LABEL_8:
  v11 = *(_QWORD *)a2 + 8 * v8;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v9;
  return result;
}

uint64_t sub_1C4EBC5C8(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 8 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 8 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *sub_1C4EBC65C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 8 * v3;
      v13 = (uint64_t *)v4;
      do
      {
        v14 = *v13;
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v17 = 0;
          sub_1C4EBC5C8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v17);
          *v17 = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v13;
        v12 -= 8;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v15)
  {
    v16 = 8 * v15;
    do
    {
      *result++ = -4096;
      v16 -= 8;
    }
    while (v16);
  }
  return result;
}

void sub_1C4EBC784(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  void *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  size_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v5 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
    {
LABEL_70:
      *(_QWORD *)v6 = v8;
      goto LABEL_71;
    }
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v32 = 1;
      else
        v32 = (v6 - v10) >> 2;
      if (!(v32 >> 61))
      {
        v33 = (char *)operator new(8 * v32);
        v34 = &v33[8 * (v32 >> 2)];
        v35 = &v33[8 * v32];
        v37 = v6 - v7;
        v36 = v6 == v7;
        v6 = v34;
        if (!v36)
        {
          v6 = &v34[v37 & 0xFFFFFFFFFFFFFFF8];
          v38 = 8 * (v37 >> 3);
          v39 = &v33[8 * (v32 >> 2)];
          do
          {
            v40 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v39 = v40;
            v39 += 8;
            v38 -= 8;
          }
          while (v38);
        }
        goto LABEL_28;
      }
LABEL_82:
      sub_1C4764EE4();
    }
LABEL_5:
    v12 = v11 >> 3;
    if (v12 >= -1)
      v13 = v12 + 1;
    else
      v13 = v12 + 2;
    v14 = -(v13 >> 1);
    v15 = v13 >> 1;
    v16 = &v7[-8 * v15];
    v17 = v6 - v7;
    if (v17)
    {
      memmove(&v7[-8 * v15], v7, v17);
      v7 = *(char **)(a1 + 8);
    }
    v6 = &v16[v17];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_70;
  }
  v19 = *(char **)(a1 + 16);
  v18 = *(char **)(a1 + 24);
  v21 = *(char **)a1;
  v20 = *(char **)(a1 + 8);
  v22 = v19 - v20;
  v23 = (uint64_t)&v18[-*(_QWORD *)a1];
  if (v19 - v20 < (unint64_t)v23)
  {
    v24 = operator new(0x1000uLL);
    v25 = v24;
    if (v18 != v19)
    {
      *(_QWORD *)v19 = v24;
LABEL_71:
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    if (v20 == v21)
    {
      if (v19 == v20)
        v60 = 1;
      else
        v60 = (v18 - v20) >> 2;
      if (v60 >> 61)
        goto LABEL_82;
      v61 = (char *)operator new(8 * v60);
      v41 = &v61[(2 * v60 + 6) & 0xFFFFFFFFFFFFFFF8];
      v62 = v41;
      if (v19 != v20)
      {
        v62 = &v41[v22 & 0xFFFFFFFFFFFFFFF8];
        v63 = 8 * (v22 >> 3);
        v64 = &v61[(2 * v60 + 6) & 0xFFFFFFFFFFFFFFF8];
        v65 = v20;
        do
        {
          v66 = *(_QWORD *)v65;
          v65 += 8;
          *(_QWORD *)v64 = v66;
          v64 += 8;
          v63 -= 8;
        }
        while (v63);
      }
      *(_QWORD *)a1 = v61;
      *(_QWORD *)(a1 + 8) = v41;
      *(_QWORD *)(a1 + 16) = v62;
      *(_QWORD *)(a1 + 24) = &v61[8 * v60];
      if (v20)
      {
        operator delete(v20);
        v41 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v41 = v20;
    }
    *((_QWORD *)v41 - 1) = v25;
    v7 = *(char **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v7 - 8;
    v8 = *((_QWORD *)v7 - 1);
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
      goto LABEL_70;
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v67 = 1;
      else
        v67 = (v6 - v10) >> 2;
      if (!(v67 >> 61))
      {
        v33 = (char *)operator new(8 * v67);
        v34 = &v33[8 * (v67 >> 2)];
        v35 = &v33[8 * v67];
        v68 = v6 - v7;
        v36 = v6 == v7;
        v6 = v34;
        if (!v36)
        {
          v6 = &v34[v68 & 0xFFFFFFFFFFFFFFF8];
          v69 = 8 * (v68 >> 3);
          v70 = &v33[8 * (v67 >> 2)];
          do
          {
            v71 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v70 = v71;
            v70 += 8;
            v69 -= 8;
          }
          while (v69);
        }
LABEL_28:
        *(_QWORD *)a1 = v33;
        *(_QWORD *)(a1 + 8) = v34;
        *(_QWORD *)(a1 + 16) = v6;
        *(_QWORD *)(a1 + 24) = v35;
        if (v10)
        {
          operator delete(v10);
          v6 = *(char **)(a1 + 16);
        }
        goto LABEL_70;
      }
      goto LABEL_82;
    }
    goto LABEL_5;
  }
  v26 = v23 >> 2;
  if (v18 == v21)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_82;
  v28 = (char *)operator new(8 * v27);
  v29 = &v28[v22];
  v30 = &v28[8 * v27];
  v31 = operator new(0x1000uLL);
  if (v27 == v22 >> 3)
  {
    if (v22 < 1)
    {
      if (v19 == v20)
        v42 = 1;
      else
        v42 = v22 >> 2;
      if (v42 >> 61)
        goto LABEL_82;
      v43 = (char *)operator new(8 * v42);
      v29 = &v43[8 * (v42 >> 2)];
      v30 = &v43[8 * v42];
      operator delete(v28);
      v20 = *(char **)(a1 + 8);
      v19 = *(char **)(a1 + 16);
      v28 = v43;
    }
    else
    {
      v29 -= (4 * v27 + 4) & 0xFFFFFFFFFFFFFFF8;
    }
  }
  *(_QWORD *)v29 = v31;
  v44 = v29 + 8;
  if (v19 != v20)
  {
    while (1)
    {
      if (v29 == v28)
      {
        if (v44 < v30)
        {
          v46 = (v30 - v44) >> 3;
          if (v46 >= -1)
            v47 = v46 + 1;
          else
            v47 = v46 + 2;
          v48 = &v44[8 * (v47 >> 1)];
          v45 = &v48[-(v44 - v29)];
          v49 = v44 - v29;
          v36 = v44 == v29;
          v44 = v48;
          if (!v36)
            memmove(v45, v29, v49);
          goto LABEL_55;
        }
        if (v30 == v29)
          v50 = 1;
        else
          v50 = (v30 - v29) >> 2;
        if (v50 >> 61)
          goto LABEL_82;
        v51 = (char *)operator new(8 * v50);
        v28 = v51;
        v45 = &v51[(2 * v50 + 6) & 0xFFFFFFFFFFFFFFF8];
        v52 = v44 - v29;
        v36 = v44 == v29;
        v44 = v45;
        if (!v36)
        {
          v44 = &v45[v52 & 0xFFFFFFFFFFFFFFF8];
          v53 = 8 * (v52 >> 3);
          v54 = &v51[(2 * v50 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = v29;
          do
          {
            v56 = *(_QWORD *)v55;
            v55 += 8;
            *(_QWORD *)v54 = v56;
            v54 += 8;
            v53 -= 8;
          }
          while (v53);
        }
        v30 = &v51[8 * v50];
        operator delete(v29);
      }
      else
      {
        v45 = v29;
      }
      v29 = v28;
LABEL_55:
      v28 = v29;
      v57 = *((_QWORD *)v19 - 1);
      v19 -= 8;
      *((_QWORD *)v45 - 1) = v57;
      v58 = v45 - 8;
      v29 = v58;
      if (v19 == *(char **)(a1 + 8))
        goto LABEL_58;
    }
  }
  v58 = v29;
LABEL_58:
  v59 = *(char **)a1;
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v58;
  *(_QWORD *)(a1 + 16) = v44;
  *(_QWORD *)(a1 + 24) = v30;
  if (v59)
    operator delete(v59);
}

uint64_t sub_1C4EBCBD4(uint64_t a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*(_QWORD *)(*(_QWORD *)a1 + 16), &llvm::AssumptionAnalysis::Key, a2)+ 8;
}

uint64_t sub_1C4EBCC00(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, char a5)
{
  unsigned int InstructionCount;
  int v8;
  uint64_t v9;
  unsigned int v11;
  int v12;
  uint64_t v13;

  *(_QWORD *)llvm::InlineAdvice::InlineAdvice(a1, a2, a3, a4, a5) = &off_1E81392C8;
  if (*(_BYTE *)(a2 + 176))
  {
    *(_QWORD *)(a1 + 64) = 0;
LABEL_4:
    v9 = 0;
    *(_QWORD *)(a1 + 72) = 0;
    goto LABEL_5;
  }
  InstructionCount = llvm::Function::getInstructionCount(*(llvm::Function **)(a1 + 16));
  v8 = *(unsigned __int8 *)(a2 + 176);
  *(_QWORD *)(a1 + 64) = InstructionCount;
  if (v8)
    goto LABEL_4;
  v11 = llvm::Function::getInstructionCount(*(llvm::Function **)(a1 + 24));
  v12 = *(unsigned __int8 *)(a2 + 176);
  *(_QWORD *)(a1 + 72) = v11;
  if (v12)
  {
    v9 = 0;
  }
  else
  {
    v13 = *(_QWORD *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(*(_QWORD *)(a2 + 16), &llvm::FunctionPropertiesAnalysis::Key, *(_QWORD *)(a1 + 16))+ 32);
    v9 = *(_QWORD *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(*(_QWORD *)(a2 + 16), &llvm::FunctionPropertiesAnalysis::Key, *(_QWORD *)(a1 + 24))+ 32)+ v13;
  }
LABEL_5:
  *(_QWORD *)(a1 + 80) = v9;
  return a1;
}

uint64_t sub_1C4EBCCC8()
{
  uint64_t v0;

  v0 = sub_1C47AD050((uint64_t)&qword_1ED7F2A30, 0, 0);
  dword_1ED7F2AB0 = 0;
  qword_1ED7F2AB8 = (uint64_t)&unk_1E8139370;
  *(_QWORD *)&dword_1ED7F2AC0 = 0;
  qword_1ED7F2A30 = (uint64_t)&unk_1E8139308;
  qword_1ED7F2AC8 = (uint64_t)&unk_1E819E350;
  qword_1ED7F2AD0 = (uint64_t)&unk_1E8139390;
  qword_1ED7F2AE8 = (uint64_t)&qword_1ED7F2AD0;
  llvm::cl::Option::setArgStr(v0, "ml-advisor-size-increase-threshold", 0x22uLL);
  word_1ED7F2A3A = word_1ED7F2A3A & 0xFF9F | 0x20;
  qword_1ED7F2A50 = (uint64_t)"Maximum factor by which expected native size may increase before blocking any further inlining.";
  unk_1ED7F2A58 = 95;
  dword_1ED7F2AB0 = 0x40000000;
  byte_1ED7F2AC4 = 1;
  dword_1ED7F2AC0 = 0x40000000;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7F2A30);
  __cxa_atexit((void (*)(void *))sub_1C4EBA468, &qword_1ED7F2A30, &dword_1C475E000);
  byte_1ED82E077 = 12;
  strcpy((char *)&llvm::FeatureNameMap, "sroa_savings");
  byte_1ED82E08F = 11;
  strcpy((char *)&qword_1ED82E078, "sroa_losses");
  byte_1ED82E0A7 = 16;
  strcpy((char *)&xmmword_1ED82E090, "load_elimination");
  byte_1ED82E0BF = 12;
  strcpy((char *)&qword_1ED82E0A8, "call_penalty");
  byte_1ED82E0D7 = 19;
  strcpy((char *)&xmmword_1ED82E0C0, "call_argument_setup");
  qword_1ED82E0D8 = (uint64_t)operator new(0x19uLL);
  strcpy((char *)qword_1ED82E0D8, "load_relative_intrinsic");
  xmmword_1ED82E0E0 = xmmword_1C640C6A0;
  strcpy(byte_1ED82E0F0, "lowered_call_arg_setup");
  HIBYTE(word_1ED82E106) = 22;
  byte_1ED82E11F = 21;
  strcpy(byte_1ED82E108, "indirect_call_penalty");
  byte_1ED82E137 = 18;
  strcpy((char *)&xmmword_1ED82E120, "jump_table_penalty");
  byte_1ED82E14F = 20;
  strcpy(byte_1ED82E138, "case_cluster_penalty");
  byte_1ED82E167 = 14;
  strcpy((char *)&qword_1ED82E150, "switch_penalty");
  qword_1ED82E168 = (uint64_t)operator new(0x28uLL);
  xmmword_1ED82E170 = xmmword_1C85F4380;
  strcpy((char *)qword_1ED82E168, "unsimplified_common_instructions");
  strcpy(&byte_1ED82E197, "\tdead_blocks");
  strcpy((char *)&qword_1ED82E180, "num_loops");
  byte_1ED82E1AF = 11;
  qword_1ED82E1B0 = (uint64_t)operator new(0x19uLL);
  unk_1ED82E1B8 = xmmword_1C640C6A0;
  strcpy((char *)qword_1ED82E1B0, "simplified_instructions");
  byte_1ED82E1DF = 13;
  strcpy((char *)&qword_1ED82E1C8, "constant_args");
  qword_1ED82E1E0 = (uint64_t)operator new(0x20uLL);
  unk_1ED82E1E8 = xmmword_1C640C690;
  strcpy((char *)qword_1ED82E1E0, "constant_offset_ptr_args");
  byte_1ED82E20F = 13;
  strcpy((char *)&qword_1ED82E1F8, "callsite_cost");
  byte_1ED82E227 = 15;
  strcpy((char *)&qword_1ED82E210, "cold_cc_penalty");
  qword_1ED82E228 = (uint64_t)operator new(0x20uLL);
  strcpy((char *)qword_1ED82E228, "last_call_to_static_bonus");
  byte_1ED82E257 = 18;
  xmmword_1ED82E230 = xmmword_1C640C680;
  strcpy(byte_1ED82E240, "is_multiple_blocks");
  byte_1ED82E26F = 14;
  strcpy((char *)&qword_1ED82E258, "nested_inlines");
  qword_1ED82E270 = (uint64_t)operator new(0x20uLL);
  unk_1ED82E278 = xmmword_1C85F4390;
  strcpy((char *)qword_1ED82E270, "nested_inline_cost_estimate");
  byte_1ED82E29F = 9;
  strcpy((char *)&qword_1ED82E288, "threshold");
  qword_1ED82E2A0 = (uint64_t)operator new(0x20uLL);
  unk_1ED82E2A8 = xmmword_1C640C690;
  strcpy((char *)qword_1ED82E2A0, "callee_basic_block_count");
  byte_1ED82E2CF = 15;
  strcpy((char *)&qword_1ED82E2B8, "callsite_height");
  strcpy(&byte_1ED82E2E7, "\nnr_ctant_params");
  strcpy((char *)&qword_1ED82E2D0, "node_count");
  byte_1ED82E2FF = 15;
  byte_1ED82E317 = 13;
  strcpy((char *)&qword_1ED82E300, "cost_estimate");
  strcpy(&byte_1ED82E32F, "\ncaller_users");
  strcpy((char *)&qword_1ED82E318, "edge_count");
  byte_1ED82E347 = 12;
  qword_1ED82E348 = (uint64_t)operator new(0x28uLL);
  xmmword_1ED82E350 = xmmword_1C85F43A0;
  strcpy((char *)qword_1ED82E348, "caller_conditionally_executed_blocks");
  qword_1ED82E360 = (uint64_t)operator new(0x20uLL);
  unk_1ED82E368 = xmmword_1C640C690;
  strcpy((char *)qword_1ED82E360, "caller_basic_block_count");
  qword_1ED82E378 = (uint64_t)operator new(0x28uLL);
  xmmword_1ED82E380 = xmmword_1C85F43A0;
  strcpy((char *)qword_1ED82E378, "callee_conditionally_executed_blocks");
  byte_1ED82E3A7 = 12;
  strcpy((char *)&qword_1ED82E390, "callee_users");
  return __cxa_atexit((void (*)(void *))sub_1C4EBA4C8, &llvm::FeatureNameMap, &dword_1C475E000);
}

void llvm::initializeMemDepPrinterPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82E3A8);
  if (v1 != -1)
  {
    v4[0] = sub_1C4EBD3B8;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82E3A8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4EBD3B8(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeMemoryDependenceWrapperPassPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "Print MemDeps of function";
  *(_QWORD *)(v3 + 8) = 25;
  *(_QWORD *)(v3 + 16) = "print-memdeps";
  *(_QWORD *)(v3 + 24) = 13;
  *(_QWORD *)(v3 + 32) = &unk_1EF8EFBF4;
  *(_WORD *)(v3 + 40) = 256;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C4EBD520;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C4EBD450(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8EFBF4;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = off_1E81393D8;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED82E3A8);
  if (v3 != -1)
  {
    v7[0] = sub_1C4EBD3B8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82E3A8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C4EBD520()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4EBD450(v0);
}

void sub_1C4EBD548(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  *(_QWORD *)a1 = off_1E81393D8;
  v2 = *(unsigned int *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 40);
  if ((_DWORD)v2)
  {
    v4 = 160 * v2;
    v5 = (_QWORD *)(v3 + 96);
    do
    {
      if ((*(v5 - 12) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v6 = (_QWORD *)*(v5 - 2);
        if (v5 != v6)
          free(v6);
        if ((*(_BYTE *)(v5 - 11) & 1) == 0)
          MEMORY[0x1CAA32FB4](*(v5 - 10), 8);
      }
      v5 += 20;
      v4 -= 160;
    }
    while (v4);
    v3 = *(_QWORD *)(a1 + 40);
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C4EBD5E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  *(_QWORD *)a1 = off_1E81393D8;
  v2 = *(unsigned int *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 40);
  if ((_DWORD)v2)
  {
    v4 = 160 * v2;
    v5 = (_QWORD *)(v3 + 96);
    do
    {
      if ((*(v5 - 12) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v6 = (_QWORD *)*(v5 - 2);
        if (v5 != v6)
          free(v6);
        if ((*(_BYTE *)(v5 - 11) & 1) == 0)
          MEMORY[0x1CAA32FB4](*(v5 - 10), 8);
      }
      v5 += 20;
      v4 -= 160;
    }
    while (v4);
    v3 = *(_QWORD *)(a1 + 40);
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  llvm::Pass::~Pass((llvm::Pass *)a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4EBD69C(uint64_t a1, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  llvm::Value *v18;
  _DWORD *v19;
  char *v20;
  const char *v21;
  size_t v22;
  size_t v23;
  char *v24;
  _WORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  llvm::Value *v31;
  uint64_t v32;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = v3 + 72;
  v5 = *(_QWORD *)(v3 + 80);
  if (v5 != v3 + 72)
  {
    v7 = a1;
    while (1)
    {
      v8 = v5 - 24;
      if (!v5)
        v8 = 0;
      v9 = *(_QWORD *)(v8 + 48);
      if (v9 != v8 + 40)
        break;
      v5 = *(_QWORD *)(v5 + 8);
      if (v5 == v4)
        return;
    }
    v28 = v4;
    while (1)
    {
      if (v9)
        v10 = v9 - 24;
      else
        v10 = 0;
      v32 = 0;
      if (sub_1C4EBE0DC(*(_QWORD *)(v7 + 40), *(_DWORD *)(v7 + 56), v10, &v32))
      {
        v11 = v32;
        v12 = *(_QWORD *)(v7 + 40);
        v13 = *(_DWORD *)(v7 + 56);
      }
      else
      {
        v12 = *(_QWORD *)(v7 + 40);
        v13 = *(_DWORD *)(v7 + 56);
        v11 = v12 + 160 * v13;
      }
      if (v11 != v12 + 160 * v13)
      {
        v31 = (llvm::Value *)v10;
        v14 = *(unsigned int *)(v11 + 88);
        if ((_DWORD)v14)
        {
          v15 = *(unint64_t **)(v11 + 80);
          v16 = &v15[2 * v14];
          do
          {
            v17 = *v15;
            v18 = (llvm::Value *)v15[1];
            v19 = (_DWORD *)*((_QWORD *)a2 + 4);
            if (*((_QWORD *)a2 + 3) - (_QWORD)v19 > 3uLL)
            {
              *v19 = 538976288;
              v20 = (char *)(*((_QWORD *)a2 + 4) + 4);
              *((_QWORD *)a2 + 4) = v20;
            }
            else
            {
              llvm::raw_ostream::write(a2, "    ", 4uLL);
              v20 = (char *)*((_QWORD *)a2 + 4);
            }
            v21 = off_1E8139468[(v17 >> 1) & 3];
            v22 = strlen(v21);
            v23 = v22;
            if (v22 <= *((_QWORD *)a2 + 3) - (_QWORD)v20)
            {
              if (v22)
              {
                memcpy(v20, v21, v22);
                v20 = (char *)(*((_QWORD *)a2 + 4) + v23);
                *((_QWORD *)a2 + 4) = v20;
              }
            }
            else
            {
              llvm::raw_ostream::write(a2, v21, v22);
              v20 = (char *)*((_QWORD *)a2 + 4);
            }
            v24 = (char *)*((_QWORD *)a2 + 3);
            if (v18)
            {
              if ((unint64_t)(v24 - v20) > 9)
              {
                *((_WORD *)v20 + 4) = 8299;
                *(_QWORD *)v20 = *(_QWORD *)" in block ";
                *((_QWORD *)a2 + 4) += 10;
              }
              else
              {
                llvm::raw_ostream::write(a2, " in block ", 0xAuLL);
              }
              llvm::Value::printAsOperand(v18, a2, 0, a3);
              v24 = (char *)*((_QWORD *)a2 + 3);
              v20 = (char *)*((_QWORD *)a2 + 4);
            }
            if ((v17 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((unint64_t)(v24 - v20) > 6)
              {
                *(_DWORD *)(v20 + 3) = 540700015;
                *(_DWORD *)v20 = 1869768224;
                *((_QWORD *)a2 + 4) += 7;
              }
              else
              {
                llvm::raw_ostream::write(a2, " from: ", 7uLL);
              }
              llvm::Value::print((llvm::Value *)(v17 & 0xFFFFFFFFFFFFFFF8), a2, 0);
              v24 = (char *)*((_QWORD *)a2 + 3);
              v20 = (char *)*((_QWORD *)a2 + 4);
            }
            if (v24 == v20)
            {
              llvm::raw_ostream::write(a2, "\n", 1uLL);
            }
            else
            {
              *v20 = 10;
              ++*((_QWORD *)a2 + 4);
            }
            v15 += 2;
          }
          while (v15 != v16);
        }
        llvm::Value::print(v31, a2, 0);
        v25 = (_WORD *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v25 > 1uLL)
        {
          *v25 = 2570;
          *((_QWORD *)a2 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(a2, "\n\n", 2uLL);
        }
        v4 = v28;
        v7 = a1;
      }
      v9 = *(_QWORD *)(v9 + 8);
      v26 = v5 - 24;
      if (!v5)
        v26 = 0;
      if (v9 == v26 + 40)
        break;
LABEL_50:
      if (v5 == v4)
        return;
    }
    while (1)
    {
      v5 = *(_QWORD *)(v5 + 8);
      if (v5 == v4)
        break;
      v27 = v5 - 24;
      if (!v5)
        v27 = 0;
      v9 = *(_QWORD *)(v27 + 48);
      if (v9 != v27 + 40)
        goto LABEL_50;
    }
  }
}

void *sub_1C4EBD9F0(uint64_t a1, uint64_t a2)
{
  void *result;

  sub_1C4771E64(a2, a2, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 80, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::MemoryDependenceWrapperPass::ID);
  result = sub_1C4771E64(a2, a2 + 80, (uint64_t)&llvm::MemoryDependenceWrapperPass::ID);
  *(_BYTE *)(a2 + 160) = 1;
  return result;
}

void sub_1C4EBDA6C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_DWORD *)(a1 + 48);
  if (!v2 && !*(_DWORD *)(a1 + 52))
    goto LABEL_40;
  v3 = *(unsigned int *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 40);
  if (v3 <= 4 * v2 || v3 < 0x41)
  {
    if (!(_DWORD)v3)
    {
LABEL_23:
      *(_QWORD *)(a1 + 48) = 0;
      goto LABEL_40;
    }
    v9 = 160 * v3;
    v10 = (_QWORD *)(v4 + 96);
    while (1)
    {
      v11 = *(v10 - 12);
      if (v11 == -8192)
        goto LABEL_21;
      if (v11 != -4096)
        break;
LABEL_22:
      v10 += 20;
      v9 -= 160;
      if (!v9)
        goto LABEL_23;
    }
    v12 = (_QWORD *)*(v10 - 2);
    if (v10 != v12)
      free(v12);
    if ((*(_BYTE *)(v10 - 11) & 1) == 0)
      MEMORY[0x1CAA32FB4](*(v10 - 10), 8);
LABEL_21:
    *(v10 - 12) = -4096;
    goto LABEL_22;
  }
  v5 = (_QWORD *)(a1 + 40);
  v6 = 160 * v3;
  v7 = (_QWORD *)(v4 + 96);
  do
  {
    if ((*(v7 - 12) | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v8 = (_QWORD *)*(v7 - 2);
      if (v7 != v8)
        free(v8);
      if ((*(_BYTE *)(v7 - 11) & 1) == 0)
        MEMORY[0x1CAA32FB4](*(v7 - 10), 8);
    }
    v7 += 20;
    v6 -= 160;
  }
  while (v6);
  v13 = 1 << (33 - __clz(v2 - 1));
  if (v13 <= 64)
    v13 = 64;
  if (v2)
    v14 = v13;
  else
    v14 = 0;
  if ((_DWORD)v14 == *(_DWORD *)(a1 + 56))
  {
    *(_QWORD *)(a1 + 48) = 0;
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD **)(a1 + 40);
      v16 = 160 * v14;
      do
      {
        *v15 = -4096;
        v15 += 20;
        v16 -= 160;
      }
      while (v16);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*v5, 8);
    if ((_DWORD)v14)
    {
      v17 = (4 * (int)v14 / 3u + 1) | ((unint64_t)(4 * (int)v14 / 3u + 1) >> 1);
      v18 = v17 | (v17 >> 2) | ((v17 | (v17 >> 2)) >> 4);
      LODWORD(v18) = (((v18 | (v18 >> 8)) >> 16) | v18 | (v18 >> 8)) + 1;
      *(_DWORD *)(a1 + 56) = v18;
      v19 = operator new(160 * v18, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 40) = v19;
      *(_QWORD *)(a1 + 48) = 0;
      v20 = *(unsigned int *)(a1 + 56);
      if ((_DWORD)v20)
      {
        v21 = 160 * v20;
        do
        {
          *v19 = -4096;
          v19 += 20;
          v21 -= 160;
        }
        while (v21);
      }
    }
    else
    {
      *v5 = 0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
    }
  }
LABEL_40:
  *(_QWORD *)(a1 + 32) = 0;
}

uint64_t sub_1C4EBDC68(uint64_t a1, uint64_t a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  llvm::MemoryDependenceResults *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int hasFnAttrOnCalledFunction;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t Dependency;
  unsigned int v23;
  uint64_t **v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  int v48;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  _QWORD v54[14];

  v54[12] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 32) = a2;
  v4 = **(void ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::MemoryDependenceWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::MemoryDependenceWrapperPass::ID);
  v7 = a2 + 72;
  for (i = *(_QWORD *)(a2 + 80); ; i = *(_QWORD *)(i + 8))
  {
    if (i == v7)
      return 0;
    v9 = i - 24;
    if (!i)
      v9 = 0;
    v10 = *(_QWORD *)(v9 + 48);
    if (v10 != v9 + 40)
      break;
  }
  v11 = (llvm::MemoryDependenceResults *)(v6 + 32);
  v12 = a1 + 40;
  while (1)
  {
    v13 = v10 - 24;
    if (v10)
      v14 = v10 - 24;
    else
      v14 = 0;
    v52 = v14;
    v15 = *(unsigned __int8 *)(v14 + 16) - 33;
    if (v15 > 0x37)
      goto LABEL_17;
    if (((1 << (*(_BYTE *)(v14 + 16) - 33)) & 0x8000000000041) != 0)
    {
      v17 = *(_QWORD *)(v14 + 64);
      if (!v17 || (*(_BYTE *)(v17 + 20) & 4) == 0 && (*(_BYTE *)(v17 + 17) & 0x10) == 0)
      {
        LODWORD(v53) = 7;
        if (sub_1C53E4BBC(v14, (__int32 *)&v53, 1uLL))
        {
          v21 = *(_QWORD *)(v14 - 32);
          if (!v21
            || *(_BYTE *)(v21 + 16)
            || *(_QWORD *)(v21 + 24) != *(_QWORD *)(v14 + 72)
            || *(_DWORD *)(v21 + 36) != 7)
          {
LABEL_44:
            v13 = v52;
            goto LABEL_45;
          }
        }
        if (llvm::CallBase::hasFnAttrOnCalledFunction(v14, 66))
        {
          v13 = v52;
        }
        else
        {
          hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction(v14, 44);
          v13 = v52;
          if (!hasFnAttrOnCalledFunction)
            goto LABEL_45;
        }
      }
LABEL_17:
      v16 = *(unsigned __int8 *)(v13 + 16) - 33;
      if (v16 > 0x37)
        goto LABEL_53;
      if (((1 << (*(_BYTE *)(v13 + 16) - 33)) & 0x8000000000041) != 0)
      {
        v19 = *(_QWORD *)(v13 + 64);
        if (v19 && (*(_BYTE *)(v19 + 17) & 0x30) != 0)
          goto LABEL_53;
        v20 = *(_DWORD *)(v13 + 20);
        if (v20 < 0
          && (v41 = v13 - 32 * (v20 & 0x7FFFFFF), v44 = *(_QWORD *)(v41 - 8), v42 = v41 - 8, (v43 = v44) != 0))
        {
          v45 = -v43;
          while (1)
          {
            v46 = *(_DWORD *)(*(_QWORD *)(v42 + v45) + 8);
            v47 = v46 > 7;
            v48 = (1 << v46) & 0x83;
            if (v47 || v48 == 0)
              break;
            v45 += 16;
            if (!v45)
              goto LABEL_32;
          }
        }
        else
        {
LABEL_32:
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v13, 45) & 1) != 0
            || (llvm::CallBase::hasFnAttrOnCalledFunction(v13, 44) & 1) != 0)
          {
            goto LABEL_53;
          }
        }
      }
      else if (v16 == 27)
      {
        if ((*(_WORD *)(v13 + 18) & 0x301) == 0)
          goto LABEL_53;
      }
      else if (((1 << (*(_BYTE *)(v13 + 16) - 33)) & 0x808001D0000010) == 0)
      {
        goto LABEL_53;
      }
      goto LABEL_45;
    }
    if (((1 << (*(_BYTE *)(v14 + 16) - 33)) & 0x808001C8000010) != 0)
      goto LABEL_44;
    if (v15 != 28 || (*(_WORD *)(v14 + 18) & 0x301) == 0)
      goto LABEL_17;
LABEL_45:
    Dependency = llvm::MemoryDependenceResults::getDependency(v11, (llvm::Instruction *)v13);
    if ((Dependency & 0xE000000000000007) == 0x2000000000000003)
    {
      v23 = *(unsigned __int8 *)(v13 + 16) - 33;
      if (v23 <= 0x33 && ((1 << v23) & 0x8000000000041) != 0)
      {
        v24 = (uint64_t **)llvm::MemoryDependenceResults::getNonLocalCallDependency(v11, (llvm::CallBase *)v13);
        v25 = sub_1C4EBE174(v12, &v52);
        v27 = *v24;
        v26 = v24[1];
        if (v27 != v26)
        {
          v28 = v25;
          do
          {
            v29 = sub_1C4EBE514(v27[1]);
            v30 = *v27;
            v27 += 2;
            *(_QWORD *)&v53 = v29;
            *((_QWORD *)&v53 + 1) = v30;
            sub_1C4EBE290(v28, &v53);
          }
          while (v27 != v26);
        }
      }
      else
      {
        *(_QWORD *)&v53 = v54;
        *((_QWORD *)&v53 + 1) = 0x400000000;
        llvm::MemoryDependenceResults::getNonLocalPointerDependency((uint64_t)v11, v13, (uint64_t)&v53);
        v35 = sub_1C4EBE174(v12, &v52);
        v36 = (_QWORD *)v53;
        if (DWORD2(v53))
        {
          v37 = 24 * DWORD2(v53);
          v38 = (uint64_t *)(v53 + 8);
          do
          {
            v39 = sub_1C4EBE514(*v38);
            v40 = *(v38 - 1);
            *(_QWORD *)&v51 = v39;
            *((_QWORD *)&v51 + 1) = v40;
            sub_1C4EBE290(v35, &v51);
            v38 += 3;
            v37 -= 24;
          }
          while (v37);
          v36 = (_QWORD *)v53;
        }
        if (v36 != v54)
          free(v36);
      }
    }
    else
    {
      v31 = Dependency;
      v32 = sub_1C4EBE174(v12, &v52);
      v53 = (unint64_t)sub_1C4EBE514(v31);
      sub_1C4EBE290(v32, &v53);
    }
LABEL_53:
    v10 = *(_QWORD *)(v10 + 8);
    v33 = i - 24;
    if (!i)
      v33 = 0;
    if (v10 == v33 + 40)
      break;
LABEL_60:
    if (i == v7)
      return 0;
  }
  while (1)
  {
    i = *(_QWORD *)(i + 8);
    if (i == v7)
      return 0;
    v34 = i - 24;
    if (!i)
      v34 = 0;
    v10 = *(_QWORD *)(v34 + 48);
    if (v10 != v34 + 40)
      goto LABEL_60;
  }
}

uint64_t sub_1C4EBE0DC(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 160 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 160 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

uint64_t sub_1C4EBE174(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v9;

  v9 = 0;
  v4 = sub_1C4EBE0DC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  v5 = v9;
  if ((v4 & 1) != 0)
    return v5 + 8;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_1C4EBE5E8(a1, v7);
    v9 = 0;
    sub_1C4EBE0DC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    v5 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)v5 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)v5 = *a2;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_QWORD *)(v5 + 8) = 1;
  *(_OWORD *)(v5 + 16) = xmmword_1C85F43B0;
  *(_OWORD *)(v5 + 32) = xmmword_1C85F43B0;
  *(_OWORD *)(v5 + 48) = xmmword_1C85F43B0;
  *(_OWORD *)(v5 + 64) = xmmword_1C85F43B0;
  *(_QWORD *)(v5 + 80) = v5 + 96;
  *(_QWORD *)(v5 + 88) = 0x400000000;
  return v5 + 8;
}

uint64_t sub_1C4EBE290(uint64_t a1, __int128 *a2)
{
  uint64_t result;
  _QWORD *v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30[9];

  v30[8] = *MEMORY[0x1E0C80C00];
  v28 = 0;
  result = sub_1C4EBE920(a1, *(_QWORD *)a2, *((_QWORD *)a2 + 1), &v28);
  if ((result & 1) != 0)
    return result;
  v5 = v28;
  v29 = v28;
  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  v8 = *(_DWORD *)a1 & 1;
  if (v8)
    v9 = 4;
  else
    v9 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v9)
  {
    v9 *= 2;
    goto LABEL_15;
  }
  if (v9 + ~v7 - *(_DWORD *)(a1 + 4) <= v9 >> 3)
  {
LABEL_15:
    if (v9 >= 5)
    {
      v12 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
      v13 = v12 | (v12 >> 2) | ((v12 | (v12 >> 2)) >> 4);
      v14 = ((v13 | (v13 >> 8)) >> 16) | v13 | (v13 >> 8);
      if ((v14 + 1) > 0x40)
        v9 = v14 + 1;
      else
        v9 = 64;
    }
    if (v8)
    {
      v17 = 0;
      v18 = v30;
      do
      {
        v20 = *(_QWORD *)(a1 + v17 + 8);
        v19 = *(_QWORD *)(a1 + v17 + 16);
        if ((v20 != -2 || v19 != -4096) && (v20 != -16 || v19 != -8192))
        {
          *(_OWORD *)v18 = *(_OWORD *)(a1 + v17 + 8);
          v18 += 2;
        }
        v17 += 16;
      }
      while (v17 != 64);
      if (v9 > 4)
      {
        *(_DWORD *)a1 &= ~1u;
        v21 = v9;
        v22 = v18;
        v23 = operator new(16 * v9, (std::align_val_t)8uLL);
        v18 = v22;
        *(_QWORD *)(a1 + 8) = v23;
        *(_QWORD *)(a1 + 16) = v21;
      }
      sub_1C4EBEA24(a1, v30, v18);
    }
    else
    {
      v15 = *(unint64_t **)(a1 + 8);
      v16 = *(unsigned int *)(a1 + 16);
      if (v9 > 4)
      {
        v24 = v9;
        v27 = *(unsigned int *)(a1 + 16);
        v25 = operator new(16 * v9, (std::align_val_t)8uLL);
        v16 = v27;
        *(_QWORD *)(a1 + 8) = v25;
        *(_QWORD *)(a1 + 16) = v24;
      }
      else
      {
        *(_DWORD *)a1 = v6 | 1;
      }
      sub_1C4EBEA24(a1, v15, &v15[2 * v16]);
      MEMORY[0x1CAA32FB4](v15, 8);
    }
    result = sub_1C4EBE920(a1, *(_QWORD *)a2, *((_QWORD *)a2 + 1), &v29);
    v6 = *(_DWORD *)a1;
    v5 = v29;
    v8 = *(_DWORD *)a1 & 1;
  }
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v8) + 2;
  if (*v5 != -2 || v5[1] != -4096)
    --*(_DWORD *)(a1 + 4);
  *v5 = *(_QWORD *)a2;
  v5[1] = *((_QWORD *)a2 + 1);
  v10 = *a2;
  v11 = *(unsigned int *)(a1 + 80);
  if (v11 >= *(_DWORD *)(a1 + 84))
  {
    v26 = *a2;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 72, a1 + 88, v11 + 1, 16);
    v10 = v26;
    LODWORD(v11) = *(_DWORD *)(a1 + 80);
  }
  *(_OWORD *)(*(_QWORD *)(a1 + 72) + 16 * v11) = v10;
  ++*(_DWORD *)(a1 + 80);
  return result;
}

uint64_t sub_1C4EBE514(uint64_t a1)
{
  uint64_t v2;

  if ((a1 & 7) == 2)
    return ((uint64_t (*)(void))((char *)&loc_1C4EBE570 + 4 * byte_1C85F43C0[a1 & 7]))();
  if ((a1 & 7) == 1)
    return ((uint64_t (*)(void))((char *)&loc_1C4EBE548 + 4 * byte_1C85F43C4[a1 & 7]))();
  v2 = a1 & 7;
  if ((a1 & 0xE000000000000007) == 0x4000000000000003)
    return ((uint64_t (*)(void))((char *)&loc_1C4EBE5B0 + 4 * byte_1C85F43CC[v2]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1C4EBE5D8 + 4 * byte_1C85F43C8[v2]))();
}

void sub_1C4EBE5D8()
{
  JUMPOUT(0x1C4EBE5E0);
}

_QWORD *sub_1C4EBE5E8(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(160 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 160 * v10;
      do
      {
        *result = -4096;
        result += 20;
        v11 -= 160;
      }
      while (v11);
    }
    if (!v3)
LABEL_40:
      JUMPOUT(0x1CAA32FB4);
    v12 = v4 + 160 * v3;
    v13 = v4;
    while (1)
    {
      v14 = *(_QWORD *)v13;
      if ((*(_QWORD *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        break;
LABEL_34:
      v13 += 160;
      if (v13 == v12)
        goto LABEL_40;
    }
    *(_QWORD *)&v36 = 0;
    sub_1C4EBE0DC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v36);
    v15 = v36;
    *(_QWORD *)v36 = v14;
    *(_QWORD *)(v15 + 8) = 1;
    v16 = v15 + 8;
    *(_OWORD *)(v15 + 16) = xmmword_1C85F43B0;
    *(_OWORD *)(v15 + 32) = xmmword_1C85F43B0;
    *(_OWORD *)(v15 + 48) = xmmword_1C85F43B0;
    *(_OWORD *)(v15 + 64) = xmmword_1C85F43B0;
    v17 = *(_DWORD *)(v13 + 8);
    *(_DWORD *)(v13 + 8) = *(_DWORD *)(v15 + 8) & 0xFFFFFFFE | v17 & 1;
    *(_DWORD *)(v15 + 8) = v17 & 0xFFFFFFFE | *(_DWORD *)(v15 + 8) & 1;
    v18 = *(_DWORD *)(v15 + 12);
    *(_DWORD *)(v15 + 12) = *(_DWORD *)(v13 + 12);
    *(_DWORD *)(v13 + 12) = v18;
    v19 = *(_DWORD *)(v15 + 8);
    v20 = *(_DWORD *)(v13 + 8);
    if ((v19 & 1) != 0)
    {
      v19 = *(_DWORD *)(v13 + 8);
      v21 = v13 + 8;
      if ((v20 & 1) != 0)
      {
        for (i = 0; i != 64; i += 16)
        {
          v25 = v15 + i;
          v26 = v13 + i;
          v27 = *(_QWORD *)(v15 + i + 16);
          v28 = *(_QWORD *)(v15 + i + 24);
          v29 = *(_QWORD *)(v13 + i + 24);
          *(_QWORD *)(v25 + 16) = *(_QWORD *)(v13 + i + 16);
          *(_QWORD *)(v25 + 24) = v29;
          *(_QWORD *)(v26 + 16) = v27;
          *(_QWORD *)(v26 + 24) = v28;
        }
LABEL_20:
        v30 = (void *)(v15 + 96);
        *(_QWORD *)(v15 + 80) = v15 + 96;
        *(_QWORD *)(v15 + 88) = 0x400000000;
        v31 = *(void **)(v13 + 80);
        if (v15 == v13 || (v32 = *(unsigned int *)(v13 + 88), !*(_DWORD *)(v13 + 88)))
        {
LABEL_30:
          ++*(_DWORD *)(a1 + 8);
          if (v31 != (void *)(v13 + 96))
            free(v31);
          goto LABEL_32;
        }
        if (v31 != (void *)(v13 + 96))
        {
          *(_QWORD *)(v15 + 80) = v31;
          *(_DWORD *)(v15 + 88) = v32;
          *(_DWORD *)(v15 + 92) = *(_DWORD *)(v13 + 92);
          *(_QWORD *)(v13 + 80) = v13 + 96;
          *(_QWORD *)(v13 + 88) = 0;
          ++*(_DWORD *)(a1 + 8);
LABEL_32:
          if ((*(_BYTE *)(v13 + 8) & 1) == 0)
            MEMORY[0x1CAA32FB4](*(_QWORD *)(v13 + 16), 8);
          goto LABEL_34;
        }
        if (v32 < 5)
        {
          v33 = *(unsigned int *)(v13 + 88);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v15 + 80, v15 + 96, *(unsigned int *)(v13 + 88), 16);
          v33 = *(unsigned int *)(v13 + 88);
          v31 = *(void **)(v13 + 80);
          if (!(_DWORD)v33)
          {
LABEL_29:
            *(_DWORD *)(v15 + 88) = v32;
            *(_DWORD *)(v13 + 88) = 0;
            goto LABEL_30;
          }
          v30 = *(void **)(v15 + 80);
        }
        memcpy(v30, v31, 16 * v33);
        v31 = *(void **)(v13 + 80);
        goto LABEL_29;
      }
    }
    else
    {
      v21 = v15 + 8;
      v16 = v13 + 8;
      if ((v20 & 1) == 0)
      {
        v22 = *(_QWORD *)(v15 + 16);
        *(_QWORD *)(v15 + 16) = *(_QWORD *)(v13 + 16);
        *(_QWORD *)(v13 + 16) = v22;
        LODWORD(v22) = *(_DWORD *)(v15 + 24);
        *(_DWORD *)(v15 + 24) = *(_DWORD *)(v13 + 24);
        *(_DWORD *)(v13 + 24) = v22;
        goto LABEL_20;
      }
    }
    v36 = *(_OWORD *)(v21 + 8);
    *(_DWORD *)v21 = v19 | 1;
    for (j = 8; j != 72; j += 16)
      *(_OWORD *)(v21 + j) = *(_OWORD *)(v16 + j);
    *(_DWORD *)v16 &= ~1u;
    *(_OWORD *)(v16 + 8) = v36;
    goto LABEL_20;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v34 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v34)
  {
    v35 = 160 * v34;
    do
    {
      *result = -4096;
      result += 20;
      v35 -= 160;
    }
    while (v35);
  }
  return result;
}

uint64_t sub_1C4EBE920(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  uint64_t result;
  BOOL v19;
  unsigned int v21;

  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 4;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 16);
    if (!v5)
    {
      v12 = 0;
      result = 0;
      goto LABEL_11;
    }
    v4 = *(_QWORD *)(a1 + 8);
  }
  v6 = ((a3 >> 4) ^ (a3 >> 9) | ((unint64_t)((a2 >> 9) ^ a2) << 32))
     + ~((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
  v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
  v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
  v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27));
  v10 = v5 - 1;
  v11 = (v5 - 1) & v9;
  v12 = (_QWORD *)(v4 + 16 * v11);
  v13 = *v12;
  v14 = v12[1];
  if (*v12 == a2 && v14 == a3)
  {
    result = 1;
  }
  else
  {
    v16 = 0;
    v17 = 1;
    result = 1;
    while (v13 != -2 || v14 != -4096)
    {
      if (v16)
        v19 = 0;
      else
        v19 = v14 == -8192;
      if (v19 && v13 == -16)
        v16 = v12;
      v21 = v11 + v17++;
      v11 = v21 & v10;
      v12 = (_QWORD *)(v4 + 16 * (v21 & v10));
      v13 = *v12;
      v14 = v12[1];
      if (*v12 == a2 && v14 == a3)
        goto LABEL_11;
    }
    result = 0;
    if (v16)
      v12 = v16;
  }
LABEL_11:
  *a4 = v12;
  return result;
}

uint64_t sub_1C4EBEA24(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_OWORD *)(result + 8);
    v9 = (_OWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_13;
    v8 = *(_OWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = xmmword_1C85F43B0;
  while (v8 != v9);
LABEL_13:
  while (a2 != a3)
  {
    v10 = *a2;
    v11 = a2[1];
    if ((*a2 != -2 || v11 != -4096) && (v10 != -16 || v11 != -8192))
    {
      v14 = 0;
      result = sub_1C4EBE920((uint64_t)v5, v10, v11, &v14);
      v12 = v14;
      v13 = a2[1];
      *v14 = *a2;
      v12[1] = v13;
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

void llvm::initializeMemDerefPrinterPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82E3B0);
  if (v1 != -1)
  {
    v4[0] = sub_1C4EBEB54;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82E3B0, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4EBEB54(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Memory Dereferenciblity of pointers in function";
  *(_QWORD *)(v2 + 8) = 47;
  *(_QWORD *)(v2 + 16) = "print-memderefs";
  *(_QWORD *)(v2 + 24) = 15;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFBF5;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4EBF248;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C4EBEBE8(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8EFBF5;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8139498;
  *(_QWORD *)(a1 + 32) = a1 + 48;
  *(_QWORD *)(a1 + 40) = 0x400000000;
  *(_QWORD *)(a1 + 80) = a1 + 112;
  *(_QWORD *)(a1 + 88) = a1 + 112;
  *(_QWORD *)(a1 + 96) = 4;
  *(_DWORD *)(a1 + 104) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED82E3B0);
  if (v3 != -1)
  {
    v7[0] = sub_1C4EBEB54;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82E3B0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void llvm::MemDerefPrinterPass::run(llvm::raw_ostream **a1@<X0>, uint64_t ***a2@<X1>, uint64_t a3@<X8>)
{
  llvm::raw_ostream *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ****v12;
  uint64_t ***v13;
  int v14;
  int v15;
  size_t *v16;
  const void *v17;
  size_t v18;
  size_t v19;
  _WORD *v20;
  uint64_t ***v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t *v24;
  llvm::raw_ostream *v25;
  void *v26;
  llvm::Value **v27;
  uint64_t i;
  llvm::Value *v29;
  llvm::raw_ostream *v30;
  _WORD *v31;
  char *v32;
  uint64_t *v33;
  char *v34;
  llvm::raw_ostream *v35;
  uint64_t v36;
  unint64_t v37;
  const char *v38;
  size_t v39;
  llvm::raw_ostream *v40;
  _BYTE *v41;
  uint64_t v42;
  const llvm::DataLayout *v43;
  uint64_t *v44;
  int v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t **v49;
  uint64_t **v50;
  char *v51;
  char *v52;
  uint64_t v53;
  int v54;
  _BYTE v55[32];
  void *v56;
  uint64_t v57;
  _QWORD v58[5];

  v58[4] = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v7 = (void *)*((_QWORD *)*a1 + 4);
  if (*((_QWORD *)*a1 + 3) - (_QWORD)v7 > 0x31uLL)
  {
    qmemcpy(v7, "Memory Dereferencibility of pointers in function '", 50);
    *((_QWORD *)v6 + 4) += 50;
  }
  else
  {
    v6 = llvm::raw_ostream::write(*a1, "Memory Dereferencibility of pointers in function '", 0x32uLL);
  }
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v20 = (_WORD *)*((_QWORD *)v6 + 4);
    goto LABEL_15;
  }
  v8 = ***a2;
  v9 = *(_QWORD *)(v8 + 152);
  v10 = *(unsigned int *)(v8 + 168);
  if ((_DWORD)v10)
  {
    LODWORD(v11) = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v12 = (uint64_t ****)(v9 + 16 * v11);
    v13 = *v12;
    if (*v12 == a2)
      goto LABEL_11;
    v14 = 1;
    while (v13 != (uint64_t ***)-4096)
    {
      v15 = v11 + v14++;
      v11 = v15 & (v10 - 1);
      v13 = *(uint64_t ****)(v9 + 16 * v11);
      if (v13 == a2)
      {
        v12 = (uint64_t ****)(v9 + 16 * v11);
        goto LABEL_11;
      }
    }
  }
  v12 = (uint64_t ****)(v9 + 16 * v10);
LABEL_11:
  v16 = (size_t *)v12[1];
  v19 = *v16;
  v17 = v16 + 2;
  v18 = v19;
  v20 = (_WORD *)*((_QWORD *)v6 + 4);
  if (v19 <= *((_QWORD *)v6 + 3) - (_QWORD)v20)
  {
    if (v18)
    {
      memcpy(v20, v17, v18);
      v20 = (_WORD *)(*((_QWORD *)v6 + 4) + v18);
      *((_QWORD *)v6 + 4) = v20;
    }
  }
  else
  {
    v6 = llvm::raw_ostream::write(v6, (const char *)v17, v18);
    v20 = (_WORD *)*((_QWORD *)v6 + 4);
  }
LABEL_15:
  if (*((_QWORD *)v6 + 3) - (_QWORD)v20 > 1uLL)
  {
    *v20 = 2599;
    *((_QWORD *)v6 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v6, "'\n", 2uLL);
  }
  v56 = v58;
  v57 = 0x400000000;
  v51 = v55;
  v52 = v55;
  v53 = 4;
  v54 = 0;
  v21 = a2 + 9;
  v22 = a2[10];
  if (v22 != (uint64_t **)(a2 + 9))
  {
    while (1)
    {
      v23 = v22 - 3;
      if (!v22)
        v23 = 0;
      v24 = v23[6];
      if (v24 != (uint64_t *)(v23 + 5))
        break;
      v22 = (uint64_t **)v22[1];
      if (v22 == (uint64_t **)v21)
        goto LABEL_22;
    }
    v43 = (const llvm::DataLayout *)(a2[5] + 34);
    while (1)
    {
      v44 = v24 - 3;
      if (!v24)
        v44 = 0;
      v45 = *((unsigned __int8 *)v44 + 16);
      if (v45 == 60)
        v46 = v44;
      else
        v46 = 0;
      if (v24 && v45 == 60)
      {
        v47 = (uint64_t *)*(v46 - 4);
        if (llvm::isDereferenceableAndAlignedPointer(v47, *v46, 0, v43, 0, 0, 0))
        {
          v48 = v57;
          if (v57 >= (unint64_t)HIDWORD(v57))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, (uint64_t)v58, v57 + 1, 8);
            v48 = v57;
          }
          *((_QWORD *)v56 + v48) = v47;
          LODWORD(v57) = v57 + 1;
        }
        if (llvm::isDereferenceableAndAlignedPointer(v47, *v46, ((unint64_t)*((unsigned __int16 *)v46 + 9) >> 1) & 0x3F, v43, 0, 0, 0))sub_1C4774094((llvm::SmallPtrSetImplBase *)&v51, (uint64_t)v47);
      }
      v24 = (uint64_t *)v24[1];
      v49 = v22 - 3;
      if (!v22)
        v49 = 0;
      if (v24 == (uint64_t *)(v49 + 5))
        break;
LABEL_72:
      if (v22 == (uint64_t **)v21)
        goto LABEL_22;
    }
    while (1)
    {
      v22 = (uint64_t **)v22[1];
      if (v22 == (uint64_t **)v21)
        break;
      v50 = v22 - 3;
      if (!v22)
        v50 = 0;
      v24 = v50[6];
      if (v24 != (uint64_t *)(v50 + 5))
        goto LABEL_72;
    }
  }
LABEL_22:
  v25 = *a1;
  v26 = (void *)*((_QWORD *)*a1 + 4);
  if (*((_QWORD *)*a1 + 3) - (_QWORD)v26 > 0x22uLL)
  {
    qmemcpy(v26, "The following are dereferenceable:\n", 35);
    *((_QWORD *)v25 + 4) += 35;
  }
  else
  {
    llvm::raw_ostream::write(v25, "The following are dereferenceable:\n", 0x23uLL);
  }
  if ((_DWORD)v57)
  {
    v27 = (llvm::Value **)v56;
    for (i = 8 * v57; i; i -= 8)
    {
      v29 = *v27;
      v30 = *a1;
      v31 = (_WORD *)*((_QWORD *)*a1 + 4);
      if (*((_QWORD *)*a1 + 3) - (_QWORD)v31 > 1uLL)
      {
        *v31 = 8224;
        *((_QWORD *)v30 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v30, "  ", 2uLL);
      }
      llvm::Value::print(v29, *a1, 0);
      v32 = (char *)sub_1C477672C((uint64_t)&v51, (uint64_t)v29);
      if (v52 == v51)
        v33 = (uint64_t *)((char *)&v53 + 4);
      else
        v33 = &v53;
      v34 = &v52[8 * *(unsigned int *)v33];
      v35 = *a1;
      v36 = *((_QWORD *)*a1 + 4);
      v37 = *((_QWORD *)*a1 + 3) - v36;
      if (v32 == v34)
      {
        if (v37 > 0xB)
        {
          *(_DWORD *)(v36 + 8) = 694445422;
          *(_QWORD *)v36 = *(_QWORD *)"\t(unaligned)";
          v42 = *((_QWORD *)v35 + 4) + 12;
          goto LABEL_45;
        }
        v38 = "\t(unaligned)";
        v39 = 12;
      }
      else
      {
        if (v37 > 9)
        {
          *(_WORD *)(v36 + 8) = 10596;
          *(_QWORD *)v36 = *(_QWORD *)"\t(aligned)";
          v42 = *((_QWORD *)v35 + 4) + 10;
LABEL_45:
          *((_QWORD *)v35 + 4) = v42;
          goto LABEL_37;
        }
        v38 = "\t(aligned)";
        v39 = 10;
      }
      llvm::raw_ostream::write(v35, v38, v39);
LABEL_37:
      v40 = *a1;
      v41 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if (*((_BYTE **)*a1 + 3) == v41)
      {
        llvm::raw_ostream::write(v40, "\n", 1uLL);
      }
      else
      {
        *v41 = 10;
        ++*((_QWORD *)v40 + 4);
      }
      ++v27;
    }
  }
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  if (v52 != v51)
    free(v52);
  if (v56 != v58)
    free(v56);
}

uint64_t sub_1C4EBF248()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4EBEBE8(v0);
}

void sub_1C4EBF270(llvm::Pass *this)
{
  void *v2;
  char *v3;

  *(_QWORD *)this = &off_1E8139498;
  v2 = (void *)*((_QWORD *)this + 11);
  if (v2 != *((void **)this + 10))
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  llvm::Pass::~Pass(this);
}

void sub_1C4EBF2C4(llvm::Pass *this)
{
  void *v2;
  char *v3;

  *(_QWORD *)this = &off_1E8139498;
  v2 = (void *)*((_QWORD *)this + 11);
  if (v2 != *((void **)this + 10))
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4EBF32C(void *result, llvm::raw_ostream *this)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  llvm::Value **v7;
  llvm::Value *v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  llvm::raw_ostream *v15;
  const char *v16;
  size_t v17;
  _BYTE *v18;
  uint64_t v19;

  v3 = (uint64_t)result;
  v4 = (void *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v4 > 0x22uLL)
  {
    qmemcpy(v4, "The following are dereferenceable:\n", 35);
    *((_QWORD *)this + 4) += 35;
  }
  else
  {
    result = llvm::raw_ostream::write(this, "The following are dereferenceable:\n", 0x23uLL);
  }
  v5 = *(unsigned int *)(v3 + 40);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = *(llvm::Value ***)(v3 + 32);
    do
    {
      v8 = *v7;
      v9 = (_WORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v9 > 1uLL)
      {
        *v9 = 8224;
        *((_QWORD *)this + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(this, "  ", 2uLL);
      }
      llvm::Value::print(v8, this, 0);
      result = sub_1C477672C(v3 + 80, (uint64_t)v8);
      v10 = *(_QWORD *)(v3 + 88);
      if (v10 == *(_QWORD *)(v3 + 80))
        v11 = 100;
      else
        v11 = 96;
      v12 = (void *)(v10 + 8 * *(unsigned int *)(v3 + v11));
      v13 = *((_QWORD *)this + 4);
      v14 = *((_QWORD *)this + 3) - v13;
      if (result == v12)
      {
        if (v14 > 0xB)
        {
          *(_DWORD *)(v13 + 8) = 694445422;
          *(_QWORD *)v13 = *(_QWORD *)"\t(unaligned)";
          v19 = *((_QWORD *)this + 4) + 12;
          goto LABEL_24;
        }
        v15 = this;
        v16 = "\t(unaligned)";
        v17 = 12;
      }
      else
      {
        if (v14 > 9)
        {
          *(_WORD *)(v13 + 8) = 10596;
          *(_QWORD *)v13 = *(_QWORD *)"\t(aligned)";
          v19 = *((_QWORD *)this + 4) + 10;
LABEL_24:
          *((_QWORD *)this + 4) = v19;
          goto LABEL_16;
        }
        v15 = this;
        v16 = "\t(aligned)";
        v17 = 10;
      }
      result = llvm::raw_ostream::write(v15, v16, v17);
LABEL_16:
      v18 = (_BYTE *)*((_QWORD *)this + 4);
      if (*((_BYTE **)this + 3) == v18)
      {
        result = llvm::raw_ostream::write(this, "\n", 1uLL);
      }
      else
      {
        *v18 = 10;
        ++*((_QWORD *)this + 4);
      }
      ++v7;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

void sub_1C4EBF530(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

void *sub_1C4EBF53C(uint64_t a1)
{
  void *result;
  uint64_t v3;
  unsigned int v5;
  int v6;
  unsigned int v7;
  void *v8;

  *(_DWORD *)(a1 + 40) = 0;
  result = *(void **)(a1 + 88);
  if (result == *(void **)(a1 + 80))
    goto LABEL_2;
  v3 = *(unsigned int *)(a1 + 96);
  if (v3 < 0x21 || 4 * (*(_DWORD *)(a1 + 100) - *(_DWORD *)(a1 + 104)) >= v3)
  {
    result = memset(result, 255, 8 * v3);
LABEL_2:
    *(_DWORD *)(a1 + 100) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    return result;
  }
  free(result);
  v5 = *(_DWORD *)(a1 + 100) - *(_DWORD *)(a1 + 104);
  v6 = 1 << (33 - __clz(v5 - 1));
  *(_DWORD *)(a1 + 100) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  if (v5 <= 0x10)
    v7 = 32;
  else
    v7 = v6;
  *(_DWORD *)(a1 + 96) = v7;
  v8 = malloc_type_malloc(8 * v7, 0x4065EBACuLL);
  if (!v8)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *(_QWORD *)(a1 + 88) = v8;
  return memset(v8, 255, 8 * *(unsigned int *)(a1 + 96));
}

uint64_t sub_1C4EBF614(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  const llvm::DataLayout *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = a2 + 72;
  v3 = *(_QWORD *)(a2 + 80);
  if (v3 != a2 + 72)
  {
    while (1)
    {
      v5 = v3 - 24;
      if (!v3)
        v5 = 0;
      v6 = *(_QWORD *)(v5 + 48);
      if (v6 != v5 + 40)
        break;
      v3 = *(_QWORD *)(v3 + 8);
      if (v3 == v2)
        return 0;
    }
    v8 = (const llvm::DataLayout *)(*(_QWORD *)(a2 + 40) + 272);
    while (1)
    {
      v9 = v6 - 24;
      if (!v6)
        v9 = 0;
      v10 = *(unsigned __int8 *)(v9 + 16);
      if (v10 == 60)
        v11 = v9;
      else
        v11 = 0;
      if (v6 && v10 == 60)
      {
        v12 = *(uint64_t **)(v11 - 32);
        if (llvm::isDereferenceableAndAlignedPointer(v12, *(_QWORD *)v11, 0, v8, 0, 0, 0))
        {
          v13 = *(unsigned int *)(a1 + 40);
          if (v13 >= *(unsigned int *)(a1 + 44))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 32, a1 + 48, v13 + 1, 8);
            v13 = *(unsigned int *)(a1 + 40);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v13) = v12;
          ++*(_DWORD *)(a1 + 40);
        }
        if (llvm::isDereferenceableAndAlignedPointer(v12, *(_QWORD *)v11, ((unint64_t)*(unsigned __int16 *)(v11 + 18) >> 1) & 0x3F, v8, 0, 0, 0))sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 80), (uint64_t)v12);
      }
      v6 = *(_QWORD *)(v6 + 8);
      v14 = v3 - 24;
      if (!v3)
        v14 = 0;
      if (v6 == v14 + 40)
        break;
LABEL_28:
      if (v3 == v2)
        return 0;
    }
    while (1)
    {
      v3 = *(_QWORD *)(v3 + 8);
      if (v3 == v2)
        break;
      v15 = v3 - 24;
      if (!v3)
        v15 = 0;
      v6 = *(_QWORD *)(v15 + 48);
      if (v6 != v15 + 40)
        goto LABEL_28;
    }
  }
  return 0;
}

char *mangledNameForMallocFamily(int *a1)
{
  return off_1E81395B8[*a1];
}

uint64_t llvm::isAllocationFn(uint64_t a1, uint64_t *a2)
{
  int v3;
  _BYTE v5[28];

  if (byte_1ED82E438)
    v3 = 59;
  else
    v3 = 63;
  sub_1C4EBF808(a1, v3, a2, v5);
  return v5[24];
}

uint64_t sub_1C4EBF808@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t result;
  char v8;

  v8 = 0;
  result = sub_1C4EC05F4(a1, &v8);
  if (result && !v8)
    return sub_1C4EBF928(result, a2, a3, (uint64_t)a4);
  *a4 = 0;
  a4[24] = 0;
  return result;
}

uint64_t llvm::isMallocOrCallocLikeFn(uint64_t a1, uint64_t *a2)
{
  int v3;
  _BYTE v5[28];

  if (byte_1ED82E438)
    v3 = 11;
  else
    v3 = 15;
  sub_1C4EBF808(a1, v3, a2, v5);
  return v5[24];
}

uint64_t llvm::isAllocLikeFn(uint64_t a1, uint64_t *a2)
{
  int v3;
  _BYTE v5[28];

  if (byte_1ED82E438)
    v3 = 43;
  else
    v3 = 47;
  sub_1C4EBF808(a1, v3, a2, v5);
  return v5[24];
}

uint64_t llvm::isReallocLikeFn(uint64_t a1, uint64_t *a2)
{
  _BYTE v3[28];

  sub_1C4EBF808(a1, 16, a2, v3);
  return v3[24];
}

{
  _BYTE v3[28];

  sub_1C4EBF928(a1, 16, a2, (uint64_t)v3);
  return v3[24];
}

uint64_t sub_1C4EBF928@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  _QWORD *v17;
  char *v18;
  size_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  int v32;
  BOOL v33;
  int v34;
  BOOL v35;
  int v36;
  BOOL v37;
  unsigned int v38;

  if (!a3)
    goto LABEL_3;
  v5 = result;
  v38 = 0;
  if ((*(_BYTE *)(result + 33) & 0x20) != 0)
    goto LABEL_3;
  if ((*(_BYTE *)(result + 23) & 0x10) != 0)
  {
    v9 = ***(_QWORD ***)result;
    v10 = *(_QWORD *)(v9 + 152);
    v11 = *(unsigned int *)(v9 + 168);
    if ((_DWORD)v11)
    {
      LODWORD(v12) = (v11 - 1) & ((result >> 4) ^ (result >> 9));
      v13 = (uint64_t *)(v10 + 16 * v12);
      v14 = *v13;
      if (*v13 == result)
      {
LABEL_13:
        v17 = (_QWORD *)v13[1];
        v20 = *v17;
        v18 = (char *)(v17 + 2);
        v19 = v20;
        goto LABEL_14;
      }
      v15 = 1;
      while (v14 != -4096)
      {
        v16 = v12 + v15++;
        v12 = v16 & (v11 - 1);
        v14 = *(_QWORD *)(v10 + 16 * v12);
        if (v14 == result)
        {
          v13 = (uint64_t *)(v10 + 16 * v12);
          goto LABEL_13;
        }
      }
    }
    v13 = (uint64_t *)(v10 + 16 * v11);
    goto LABEL_13;
  }
  v19 = 0;
  v18 = &byte_1C871356D;
LABEL_14:
  v21 = *a3;
  result = llvm::TargetLibraryInfoImpl::getLibFunc(result, v18, v19, &v38);
  if ((_DWORD)result)
  {
    v22 = v21;
    v23 = v38;
    result = llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc(v22, *(_QWORD *)(v5 + 24), v38);
    if ((_DWORD)result)
    {
      if (((*(_QWORD *)(a3[1] + 8 * (v23 >> 6)) >> v23) & 1) == 0
        && ((*(unsigned __int8 *)(*a3 + (v23 >> 2)) >> (2 * (v23 & 3))) & 3) != 0)
      {
        v24 = 0;
        while (dword_1C85F45C0[v24] != (_DWORD)v23)
        {
          v24 += 7;
          if (v24 == 273)
            goto LABEL_3;
        }
        v25 = &dword_1C85F45C0[v24];
        if ((LOBYTE(dword_1C85F45C0[v24 + 1]) & ~a2) == 0)
        {
          v27 = v25[3];
          v26 = v25[4];
          v28 = *(_QWORD *)(v5 + 24);
          v29 = **(_QWORD **)(v28 + 16);
          result = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)v28 + 1912), 0);
          if (v29 == result && *(_DWORD *)(v28 + 12) - 1 == dword_1C85F45C0[v24 + 2])
          {
            if ((v27 & 0x80000000) != 0
              || ((v30 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 16) + 8 * v27 + 8) + 8) >> 8, v30 != 32)
                ? (v31 = v30 == 64)
                : (v31 = 1),
                  !v31 ? (v32 = 0) : (v32 = 1),
                  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 16) + 8 * v27 + 8) + 8) == 13
                ? (v33 = v32 == 0)
                : (v33 = 1),
                  !v33))
            {
              if ((v26 & 0x80000000) != 0
                || ((v34 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 16) + 8 * v26 + 8) + 8) >> 8, v34 != 32)
                  ? (v35 = v34 == 64)
                  : (v35 = 1),
                    !v35 ? (v36 = 0) : (v36 = 1),
                    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 16) + 8 * v26 + 8) + 8) == 13
                  ? (v37 = v36 == 0)
                  : (v37 = 1),
                    !v37))
              {
                *(_OWORD *)a4 = *(_OWORD *)&dword_1C85F45C0[v24 + 1];
                *(_QWORD *)(a4 + 16) = *(_QWORD *)&dword_1C85F45C0[v24 + 5];
                v6 = 1;
                goto LABEL_4;
              }
            }
          }
        }
      }
    }
  }
LABEL_3:
  v6 = 0;
  *(_BYTE *)a4 = 0;
LABEL_4:
  *(_BYTE *)(a4 + 24) = v6;
  return result;
}

uint64_t llvm::getAllocAlignment(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[16];
  unsigned int v8;
  char v9;
  uint64_t v10;
  int v11;

  sub_1C4EBF808(a1, 63, a2, v7);
  if (v9 && (v8 & 0x80000000) == 0)
  {
    v5 = a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF);
    v6 = 32 * v8;
    return *(_QWORD *)(v5 + v6);
  }
  v11 = 0;
  if (llvm::AttributeList::hasAttrSomewhere((uint64_t *)(a1 + 64), 1, &v11)
    || (v3 = *(_QWORD *)(a1 - 32)) != 0
    && !*(_BYTE *)(v3 + 16)
    && *(_QWORD *)(v3 + 24) == *(_QWORD *)(a1 + 72)
    && (v10 = *(_QWORD *)(v3 + 112), llvm::AttributeList::hasAttrSomewhere(&v10, 1, &v11)))
  {
    v5 = a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF);
    v6 = 32 * (v11 - 1);
    return *(_QWORD *)(v5 + v6);
  }
  return 0;
}

void llvm::getAllocSize(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int IndexTypeSizeInBits;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm *v19;
  uint64_t StringLength;
  unint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  size_t v28;
  _QWORD *v29;
  char v30;
  unsigned int v31;
  void *v32;
  BOOL v33;
  size_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  int64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  unsigned int v46;
  BOOL v47;
  void *v48;
  unsigned int v49;
  void *__src;
  unsigned int v51;
  _QWORD *v52;
  unsigned int v53;
  _BYTE v54[8];
  int v55;
  unsigned int v56;
  char v57;

  sub_1C4EC01DC((uint64_t)v54, a1, a2);
  if (!v57)
  {
LABEL_8:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
    return;
  }
  IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 40) + 272, *(_QWORD *)a1);
  if (v54[0] == 32)
  {
    v52 = *(_QWORD **)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
    v18 = *(_QWORD *)(a3 + 24);
    if (!v18)
      goto LABEL_87;
    v19 = (llvm *)(*(uint64_t (**)(uint64_t, _QWORD **))(*(_QWORD *)v18 + 48))(v18, &v52);
    StringLength = llvm::GetStringLength(v19, (const llvm::Value *)8);
    v53 = IndexTypeSizeInBits;
    if (IndexTypeSizeInBits > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v52, StringLength, 0);
      v23 = v53;
      if (v53 > 0x40)
      {
        v38 = 0;
        v39 = ((unint64_t)v53 + 63) >> 6;
        v22 = v52;
        do
        {
          v33 = v39-- < 1;
          if (v33)
            break;
          v40 = v52[v39];
          v38 += __clz(v40);
        }
        while (!v40);
        v41 = v53 | 0xFFFFFFC0;
        if ((v53 & 0x3F) == 0)
          v41 = 0;
        v24 = v52;
        if (v38 + v41 == v53)
          goto LABEL_37;
LABEL_31:
        if (v55 < 1)
        {
          v31 = v23;
LABEL_63:
          *(_DWORD *)(a4 + 8) = v31;
          *(_QWORD *)a4 = v24;
          goto LABEL_64;
        }
        __src = *(void **)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * v55);
        v25 = *(_QWORD *)(a3 + 24);
        if (!v25)
          goto LABEL_87;
        v26 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 48))(v25, &__src);
        if (v26)
          v27 = *(_BYTE *)(v26 + 16) == 16;
        else
          v27 = 0;
        if (!v27)
        {
LABEL_37:
          *(_BYTE *)a4 = 0;
          *(_BYTE *)(a4 + 16) = 0;
          if (v23 >= 0x41 && v22)
            goto LABEL_23;
          return;
        }
        if (*(_DWORD *)(v26 + 32) < IndexTypeSizeInBits)
          llvm::APInt::zext((llvm::APInt *)(v26 + 24), IndexTypeSizeInBits, (uint64_t)&__src);
        else
          sub_1C5DD14E0((uint64_t)&__src, v26 + 24);
        if (v23 > 0x40)
        {
          v32 = __src;
          v35 = (((unint64_t)v23 + 63) >> 3) & 0x3FFFFFF8;
          while (v35)
          {
            v36 = *(_QWORD *)((char *)v22 + v35 - 8);
            v37 = *(_QWORD *)((char *)__src + v35 - 8);
            v35 -= 8;
            v33 = v36 > v37;
            if (v36 != v37)
              goto LABEL_58;
          }
        }
        else
        {
          v32 = __src;
          v33 = v24 > __src;
LABEL_58:
          if (v33)
          {
            v49 = v51;
            if (v51 > 0x40)
            {
              v34 = (((unint64_t)v51 + 63) >> 3) & 0x3FFFFFF8;
              v48 = (void *)operator new[]();
              memcpy(v48, __src, v34);
            }
            else
            {
              v48 = v32;
            }
            llvm::APInt::operator+=((uint64_t)&v48, 1uLL);
            v31 = v49;
            v24 = v48;
            v49 = 0;
            if (v23 >= 0x41)
            {
              if (v22)
              {
                MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
                if (v49 >= 0x41)
                {
                  if (v48)
                    MEMORY[0x1CAA32F9C](v48, 0x1000C8000313F17);
                }
              }
            }
            goto LABEL_60;
          }
        }
        v31 = v23;
LABEL_60:
        if (v51 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        goto LABEL_63;
      }
      v22 = v52;
    }
    else
    {
      v21 = 0xFFFFFFFFFFFFFFFFLL >> -(char)IndexTypeSizeInBits;
      if (!IndexTypeSizeInBits)
        v21 = 0;
      v22 = (_QWORD *)(v21 & StringLength);
      v52 = (_QWORD *)(v21 & StringLength);
      v23 = IndexTypeSizeInBits;
    }
    v24 = v22;
    if (!v22)
      goto LABEL_37;
    goto LABEL_31;
  }
  v52 = *(_QWORD **)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * v55);
  v8 = *(_QWORD *)(a3 + 24);
  if (!v8)
  {
LABEL_87:
    sub_1C485C2F0();
    sub_1C4EC01DC(v42, v43, v44);
    return;
  }
  v9 = (*(uint64_t (**)(uint64_t, _QWORD **))(*(_QWORD *)v8 + 48))(v8, &v52);
  if (v9)
    v10 = *(_BYTE *)(v9 + 16) == 16;
  else
    v10 = 0;
  if (!v10)
    goto LABEL_8;
  v11 = v9;
  v12 = *(unsigned int *)(v9 + 32);
  v53 = v12;
  if (v12 > 0x40)
  {
    v13 = ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8;
    v52 = (_QWORD *)operator new[]();
    memcpy(v52, *(const void **)(v11 + 24), v13);
  }
  else
  {
    v52 = *(_QWORD **)(v9 + 24);
  }
  if ((sub_1C4EC02E0((llvm::APInt *)&v52, IndexTypeSizeInBits) & 1) == 0)
    goto LABEL_20;
  if ((v56 & 0x80000000) != 0)
  {
    *(_DWORD *)(a4 + 8) = v53;
    *(_QWORD *)a4 = v52;
LABEL_64:
    *(_BYTE *)(a4 + 16) = 1;
    return;
  }
  __src = *(void **)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * v56);
  v14 = *(_QWORD *)(a3 + 24);
  if (!v14)
    goto LABEL_87;
  v15 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v14 + 48))(v14, &__src);
  if (!v15 || (v16 = v15, *(_BYTE *)(v15 + 16) != 16))
  {
LABEL_20:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
    goto LABEL_21;
  }
  v17 = *(unsigned int *)(v15 + 32);
  v51 = v17;
  if (v17 > 0x40)
  {
    v28 = ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8;
    __src = (void *)operator new[]();
    memcpy(__src, *(const void **)(v16 + 24), v28);
  }
  else
  {
    __src = *(void **)(v15 + 24);
  }
  if ((sub_1C4EC02E0((llvm::APInt *)&__src, IndexTypeSizeInBits) & 1) != 0)
  {
    v47 = 0;
    llvm::APInt::umul_ov((llvm::APInt *)&v52, (uint64_t **)&__src, &v47, (uint64_t)&v45);
    if (v53 >= 0x41 && v52)
      MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
    v29 = v45;
    v52 = v45;
    v53 = v46;
    if (v47)
    {
      v30 = 0;
      *(_BYTE *)a4 = 0;
    }
    else
    {
      *(_DWORD *)(a4 + 8) = v46;
      *(_QWORD *)a4 = v29;
      v30 = 1;
      v53 = 0;
    }
    *(_BYTE *)(a4 + 16) = v30;
  }
  else
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
  }
  if (v51 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
LABEL_21:
  if (v53 >= 0x41 && v52)
LABEL_23:
    MEMORY[0x1CAA32F9C]();
}

uint64_t sub_1C4EC01DC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  char v15;
  char v16;
  char v17;
  _DWORD v18[4];

  v17 = 0;
  result = sub_1C4EC05F4(a2, &v17);
  if (!result)
    goto LABEL_14;
  v6 = result;
  if (v17 || (byte_1ED82E438 ? (v7 = 59) : (v7 = 63), result = sub_1C4EBF928(result, v7, a3, a1), !*(_BYTE *)(a1 + 24)))
  {
    result = llvm::AttributeList::getAttributeAtIndex((uint64_t *)(v6 + 112), -1, 75);
    if (result)
    {
      v12 = *(_QWORD *)(result + 16);
      v8 = HIDWORD(v12);
      v9 = v12 == 0xFFFFFFFFLL;
      v10 = v12 != 0xFFFFFFFFLL;
      v11 = v12 & 0xFFFFFF00;
      v12 = v12;
      v18[0] = v8;
      if (v9)
        v12 = 0;
      *(_QWORD *)&v18[1] = v12 | v11 | (v10 << 32);
      v13 = v18[0];
      v14 = v18[1];
      if (v9)
        v14 = -1;
      *(_DWORD *)(a1 + 4) = *(_DWORD *)(v6 + 20) & 0x7FFFFFF;
      *(_DWORD *)(a1 + 8) = v13;
      *(_DWORD *)(a1 + 12) = v14;
      *(_DWORD *)(a1 + 16) = -1;
      v15 = 1;
      v16 = 2;
      goto LABEL_15;
    }
LABEL_14:
    v16 = 0;
    v15 = 0;
LABEL_15:
    *(_BYTE *)a1 = v16;
    *(_BYTE *)(a1 + 24) = v15;
  }
  return result;
}

uint64_t sub_1C4EC02E0(llvm::APInt *this, unsigned int a2)
{
  unsigned int v4;
  int v5;
  uint64_t v7;
  int v8;

  v4 = *((_DWORD *)this + 2);
  if (v4 > a2)
  {
    v5 = v4 > 0x40 ? llvm::APInt::countLeadingZerosSlowCase(this) : v4 + __clz(*(_QWORD *)this) - 64;
    if (v4 - v5 > a2)
      return 0;
  }
  if (v4 != a2)
  {
    if (v4 >= a2)
    {
      if (v4 > a2)
        llvm::APInt::trunc(this, a2, (llvm::APInt *)&v7);
      else
        sub_1C5DD14E0((uint64_t)&v7, (uint64_t)this);
    }
    else
    {
      llvm::APInt::zext(this, a2, (uint64_t)&v7);
    }
    if (*((_DWORD *)this + 2) >= 0x41u)
    {
      if (*(_QWORD *)this)
        MEMORY[0x1CAA32F9C](*(_QWORD *)this, 0x1000C8000313F17);
    }
    *(_QWORD *)this = v7;
    *((_DWORD *)this + 2) = v8;
  }
  return 1;
}

uint64_t getFreeFunctionDataForFunction(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = 0;
  while (dword_1C85F4458[v2] != a2)
  {
    v2 += 3;
    if (v2 == 90)
      return 0;
  }
  return *(_QWORD *)&dword_1C85F4458[v2 + 1];
}

uint64_t llvm::getAllocationFamily@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  _QWORD *v15;
  char *v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _BYTE v26[20];
  int v27;
  char v28;
  unsigned int v29;
  char v30;

  v30 = 0;
  result = sub_1C4EC05F4(a1, &v30);
  if (!result)
    goto LABEL_5;
  if (v30)
    goto LABEL_5;
  v29 = 0;
  if (!a2)
    goto LABEL_5;
  v6 = result;
  if ((*(_BYTE *)(result + 33) & 0x20) != 0)
    goto LABEL_5;
  if ((*(_BYTE *)(result + 23) & 0x10) == 0)
  {
    v17 = 0;
    v16 = &byte_1C871356D;
    goto LABEL_16;
  }
  v7 = ***(_QWORD ***)result;
  v8 = *(_QWORD *)(v7 + 152);
  v9 = *(unsigned int *)(v7 + 168);
  if (!(_DWORD)v9)
    goto LABEL_14;
  LODWORD(v10) = (v9 - 1) & ((result >> 4) ^ (result >> 9));
  v11 = (uint64_t *)(v8 + 16 * v10);
  v12 = *v11;
  if (*v11 != result)
  {
    v13 = 1;
    while (v12 != -4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(_QWORD *)(v8 + 16 * v10);
      if (v12 == result)
      {
        v11 = (uint64_t *)(v8 + 16 * v10);
        goto LABEL_15;
      }
    }
LABEL_14:
    v11 = (uint64_t *)(v8 + 16 * v9);
  }
LABEL_15:
  v15 = (_QWORD *)v11[1];
  v18 = *v15;
  v16 = (char *)(v15 + 2);
  v17 = v18;
LABEL_16:
  v19 = *a2;
  result = llvm::TargetLibraryInfoImpl::getLibFunc(result, v16, v17, &v29);
  if (!(_DWORD)result
    || (v20 = v19,
        v21 = v29,
        result = llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc(v20, *(_QWORD *)(v6 + 24), v29),
        !(_DWORD)result)
    || ((*(_QWORD *)(a2[1] + 8 * (v21 >> 6)) >> v21) & 1) != 0
    || ((*(unsigned __int8 *)(*a2 + (v21 >> 2)) >> (2 * (v21 & 3))) & 3) == 0)
  {
LABEL_5:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return result;
  }
  result = sub_1C4EBF928(v6, 63, a2, (uint64_t)v26);
  if (v28)
  {
    v22 = v27;
  }
  else
  {
    v23 = 0;
    while (dword_1C85F4458[v23] != (_DWORD)v21)
    {
      v23 += 3;
      if (v23 == 90)
      {
        v24 = 0;
        *(_BYTE *)a3 = 0;
        goto LABEL_29;
      }
    }
    v22 = dword_1C85F4458[v23 + 2];
  }
  v25 = qword_1C85F4A08[v22];
  *(_QWORD *)a3 = off_1E81395B8[v22];
  *(_QWORD *)(a3 + 8) = v25;
  v24 = 1;
LABEL_29:
  *(_BYTE *)(a3 + 16) = v24;
  return result;
}

uint64_t sub_1C4EC05F4(uint64_t a1, _BYTE *a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  uint64_t result;

  v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 == 84)
  {
    v5 = *(_QWORD *)(a1 - 32);
    if (v5 && !*(_BYTE *)(v5 + 16) && *(_QWORD *)(v5 + 24) == *(_QWORD *)(a1 + 72) && (*(_BYTE *)(v5 + 33) & 0x20) != 0)
      return 0;
  }
  else
  {
    if (v4 < 0x1C)
      return 0;
    v6 = v4 - 33;
    v7 = v6 > 0x33;
    v8 = (1 << v6) & 0x8000000000041;
    if (v7 || v8 == 0)
      return 0;
  }
  v10 = *(_QWORD *)(a1 + 64);
  if (v10 && (*(_BYTE *)(v10 + 14) & 0x10) != 0)
    goto LABEL_16;
  if (!llvm::CallBase::hasFnAttrOnCalledFunction(a1, 20))
    goto LABEL_18;
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
LABEL_16:
    if ((*(_BYTE *)(v10 + 12) & 0x10) == 0)
      goto LABEL_17;
LABEL_18:
    v11 = 0;
    goto LABEL_19;
  }
LABEL_17:
  v11 = llvm::CallBase::hasFnAttrOnCalledFunction(a1, 4) ^ 1;
LABEL_19:
  *a2 = v11;
  result = *(_QWORD *)(a1 - 32);
  if (!result || *(_BYTE *)(result + 16) || *(_QWORD *)(result + 24) != *(_QWORD *)(a1 + 72))
    return 0;
  return result;
}

uint64_t llvm::isFreeCall(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  _QWORD *v15;
  char *v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  char v24;

  v24 = 0;
  v4 = sub_1C4EC05F4(a1, &v24);
  v5 = 0;
  if (v4 && !v24)
  {
    v23 = 0;
    if (!a2 || (*(_BYTE *)(v4 + 33) & 0x20) != 0)
      return 0;
    if ((*(_BYTE *)(v4 + 23) & 0x10) == 0)
    {
      v17 = 0;
      v16 = &byte_1C871356D;
      goto LABEL_15;
    }
    v7 = ***(_QWORD ***)v4;
    v8 = *(_QWORD *)(v7 + 152);
    v9 = *(unsigned int *)(v7 + 168);
    if ((_DWORD)v9)
    {
      LODWORD(v10) = (v9 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      v11 = (uint64_t *)(v8 + 16 * v10);
      v12 = *v11;
      if (*v11 == v4)
      {
LABEL_14:
        v15 = (_QWORD *)v11[1];
        v18 = *v15;
        v16 = (char *)(v15 + 2);
        v17 = v18;
LABEL_15:
        v19 = *a2;
        v22 = (_QWORD *)v4;
        if (llvm::TargetLibraryInfoImpl::getLibFunc(v4, v16, v17, &v23))
        {
          v20 = v19;
          v21 = v23;
          if (llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc(v20, v22[3], v23))
          {
            if (((*(_QWORD *)(a2[1] + 8 * (v21 >> 6)) >> v21) & 1) == 0
              && ((*(unsigned __int8 *)(*a2 + (v21 >> 2)) >> (2 * (v21 & 3))) & 3) != 0
              && llvm::isLibFreeFunction(v22, v21))
            {
              if (*(_BYTE *)(a1 + 16) == 84)
                return a1;
              else
                return 0;
            }
          }
        }
        return 0;
      }
      v13 = 1;
      while (v12 != -4096)
      {
        v14 = v10 + v13++;
        v10 = v14 & (v9 - 1);
        v12 = *(_QWORD *)(v8 + 16 * v10);
        if (v12 == v4)
        {
          v11 = (uint64_t *)(v8 + 16 * v10);
          goto LABEL_14;
        }
      }
    }
    v11 = (uint64_t *)(v8 + 16 * v9);
    goto LABEL_14;
  }
  return v5;
}

BOOL llvm::getObjectSize(llvm::Value *a1, _QWORD *a2, llvm::DataLayout *a3, llvm::DataLayout *a4, llvm::DataLayout *a5, llvm::DataLayout *a6)
{
  unsigned int v7;
  _BOOL8 v9;
  _QWORD *v11;
  unsigned int v12;
  void *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  llvm::DataLayout *v17[5];
  uint64_t v18;
  unsigned int v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  int v23;
  _BYTE v24[64];

  v17[0] = a3;
  v17[1] = a4;
  v17[2] = a5;
  v17[3] = a6;
  v19 = 1;
  v18 = 0;
  v20 = v24;
  v21 = v24;
  v22 = 8;
  v23 = 0;
  llvm::ObjectSizeOffsetVisitor::compute(&v13, v17, a1);
  v7 = v16;
  v9 = v14 > 1 && v16 > 1;
  if (v9)
  {
    sub_1C4EC0DB4((uint64_t)&v13, (llvm::APInt *)&v11);
    if (v12 > 0x40)
    {
      *a2 = *v11;
      MEMORY[0x1CAA32F9C]();
    }
    else
    {
      *a2 = v11;
    }
    v7 = v16;
  }
  if (v7 >= 0x41 && v15)
    MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
  if (v14 >= 0x41 && v13)
    MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
  if (v21 != v20)
    free(v21);
  if (v19 >= 0x41 && v18)
    MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
  return v9;
}

void llvm::ObjectSizeOffsetVisitor::compute(void **__return_ptr a1@<X8>, llvm::DataLayout **this@<X0>, llvm::Value *a3@<X1>)
{
  llvm::DataLayout *v6;
  uint64_t v7;
  unsigned int IndexTypeSizeInBits;
  uint64_t *v9;
  unsigned int v10;
  llvm::DataLayout *v11;
  unsigned int v12;
  void *v13;
  int v14;
  int64_t v15;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  void *v30;
  unsigned int v31;
  void *__src;
  unsigned int v33;
  uint64_t *v34;
  unsigned int v35;

  v6 = *this;
  IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)*this, *(_QWORD *)a3);
  v35 = IndexTypeSizeInBits;
  if (IndexTypeSizeInBits > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v34, 0, 0);
    v6 = *this;
  }
  else
  {
    v34 = 0;
  }
  v9 = (uint64_t *)llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)a3, v6, (const void **)&v34, 1, 1, 0, v7);
  v10 = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)*this, *v9);
  *((_DWORD *)this + 8) = v10;
  v31 = v10;
  if (v10 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v30, 0, 0);
  else
    v30 = 0;
  if (*((_DWORD *)this + 12) >= 0x41u)
  {
    v11 = this[5];
    if (v11)
      MEMORY[0x1CAA32F9C](v11, 0x1000C8000313F17);
  }
  this[5] = (llvm::DataLayout *)v30;
  *((_DWORD *)this + 12) = v31;
  if (IndexTypeSizeInBits != *((_DWORD *)this + 8))
  {
    llvm::ObjectSizeOffsetVisitor::computeImpl((llvm::ObjectSizeOffsetVisitor *)this, (llvm::Module **)v9, (uint64_t)&v30);
    if (v31 >= 2 && (sub_1C4EC02E0((llvm::APInt *)&v30, IndexTypeSizeInBits) & 1) == 0)
    {
      if (v31 >= 0x41 && v30)
        MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
      v30 = 0;
      v31 = 1;
    }
    if (v33 >= 2 && (sub_1C4EC02E0((llvm::APInt *)&__src, IndexTypeSizeInBits) & 1) == 0)
    {
      if (v33 >= 0x41 && __src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      __src = 0;
      v33 = 1;
    }
    goto LABEL_24;
  }
  if (v35 > 0x40)
  {
    v14 = 0;
    v15 = ((unint64_t)v35 + 63) >> 6;
    do
    {
      if (v15-- < 1)
        break;
      v17 = v34[v15];
      v14 += __clz(v17);
    }
    while (!v17);
    v18 = v35 | 0xFFFFFFC0;
    if ((v35 & 0x3F) == 0)
      v18 = 0;
    if (v14 + v18 != v35)
      goto LABEL_11;
LABEL_34:
    llvm::ObjectSizeOffsetVisitor::computeImpl((llvm::ObjectSizeOffsetVisitor *)this, (llvm::Module **)v9, (uint64_t)a1);
    goto LABEL_46;
  }
  if (!v34)
    goto LABEL_34;
LABEL_11:
  llvm::ObjectSizeOffsetVisitor::computeImpl((llvm::ObjectSizeOffsetVisitor *)this, (llvm::Module **)v9, (uint64_t)&v30);
LABEL_24:
  v12 = v33;
  if (v33 < 2)
  {
    v13 = __src;
  }
  else if (v33 >= 0x41)
  {
    v19 = v33 + 63;
    v13 = (void *)operator new[]();
    memcpy(v13, __src, (v19 >> 3) & 0x3FFFFFF8);
    v20 = 0;
    v21 = v34;
    v22 = (unint64_t *)v13;
    v23 = v19 >> 6;
    do
    {
      v24 = *v21++;
      v25 = v24 + *v22;
      v26 = v25 + 1 <= *v22;
      if (v20)
      {
        ++v25;
        v20 = v26;
      }
      else
      {
        v20 = v25 < *v22;
      }
      *v22++ = v25;
      --v23;
    }
    while (v23);
    *((_QWORD *)v13 + (v19 >> 6) - 1) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v12;
  }
  else
  {
    v13 = (void *)(((unint64_t)__src + (_QWORD)v34) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v33));
  }
  v27 = v31;
  *((_DWORD *)a1 + 2) = v31;
  if (v27 > 0x40)
  {
    v28 = ((unint64_t)(v27 + 63) >> 3) & 0x3FFFFFF8;
    v29 = (void *)operator new[]();
    *a1 = v29;
    memcpy(v29, v30, v28);
  }
  else
  {
    *a1 = v30;
  }
  *((_DWORD *)a1 + 6) = v12;
  a1[2] = v13;
  if (v33 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if (v31 >= 0x41 && v30)
    MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
LABEL_46:
  if (v35 >= 0x41)
  {
    if (v34)
      MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
  }
}

void sub_1C4EC0DB4(uint64_t a1@<X0>, llvm::APInt *a2@<X8>)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BOOL4 v24;
  unint64_t v25;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_DWORD *)(a1 + 24);
  v5 = v4 - 1;
  if (v4 >= 0x41)
    v6 = (_QWORD *)(v3 + 8 * (v5 >> 6));
  else
    v6 = (_QWORD *)(a1 + 16);
  v7 = *(unsigned int *)(a1 + 8);
  if (((*v6 >> v5) & 1) != 0)
  {
LABEL_5:
    *((_DWORD *)a2 + 2) = v7;
    if (v7 > 0x40)
    {
      llvm::APInt::initSlowCase(a2, 0, 0);
      return;
    }
    goto LABEL_10;
  }
  if (v7 > 0x40)
  {
    v13 = (unint64_t)(v7 + 63) >> 6;
    v14 = v3 - 8;
    v15 = 8 * v13;
    while (v15)
    {
      v16 = *(_QWORD *)(*(_QWORD *)a1 - 8 + v15);
      v17 = *(_QWORD *)(v14 + v15);
      v15 -= 8;
      if (v16 != v17)
      {
        if (v16 <= v17)
          goto LABEL_5;
        break;
      }
    }
    v12 = (void *)operator new[]();
    memcpy(v12, *(const void **)a1, ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8);
    v18 = 0;
    v19 = *(unint64_t **)(a1 + 16);
    v20 = (unint64_t *)v12;
    v21 = (unint64_t)(v7 + 63) >> 6;
    do
    {
      v22 = *v19++;
      v23 = *v20 - v22;
      v24 = *v20 < v22;
      v25 = *v20 + ~v22;
      if (v18)
      {
        v18 = v25 >= *v20;
      }
      else
      {
        v25 = v23;
        v18 = v24;
      }
      *v20++ = v25;
      --v21;
    }
    while (v21);
    *((_QWORD *)v12 + (v13 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
  }
  else
  {
    v9 = *(_QWORD *)a1 >= v3;
    v10 = *(_QWORD *)a1 - v3;
    if (!v9)
    {
      *((_DWORD *)a2 + 2) = v7;
LABEL_10:
      *(_QWORD *)a2 = 0;
      return;
    }
    v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
    if (!(_DWORD)v7)
      v11 = 0;
    v12 = (void *)(v11 & v10);
  }
  *((_DWORD *)a2 + 2) = v7;
  *(_QWORD *)a2 = v12;
}

llvm::ValueHandleBase *llvm::lowerObjectSizeCall(uint64_t a1, llvm::DataLayout *a2, llvm::DataLayout *a3, llvm::DataLayout *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  llvm::APInt *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::APInt *v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  llvm::DataLayout *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::APInt *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  const llvm::APInt *v39;
  unsigned __int8 *v40;
  llvm::ConstantInt *v41;
  uint64_t *v42;
  const llvm::APInt *v43;
  llvm::ValueHandleBase *Select;
  const llvm::APInt *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  llvm::ConstantInt *v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v53;
  uint64_t v54;
  llvm::ConstantInt *v55;
  unsigned int v56;
  unsigned __int8 *v57;
  llvm::ValueHandleBase *v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  __int16 v62;
  void *v63[2];
  _QWORD v64[10];
  int v65;
  __int16 v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[2];
  void *v71;
  uint64_t v72;
  unsigned int v73;
  void *v74;
  _QWORD v75[16];
  _BYTE v76[24];
  _BYTE *v77;
  uint64_t v78[4];
  void *v79;
  void *v80;
  void *v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v10 = a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF);
  v11 = *(_QWORD *)(v10 + 32);
  v12 = (llvm::APInt *)(v11 + 24);
  v13 = *(_DWORD *)(v11 + 32);
  if (v13 > 0x40)
    v14 = llvm::APInt::countLeadingZerosSlowCase(v12) == v13;
  else
    v14 = *(_QWORD *)v12 == 0;
  v15 = v14;
  v16 = 1;
  if ((_DWORD)v15)
    v16 = 2;
  if (a5)
    v17 = v16;
  else
    v17 = 0;
  v18 = *(_QWORD *)(v10 + 64);
  v19 = (llvm::APInt *)(v18 + 24);
  v20 = *(_DWORD *)(v18 + 32);
  if (v20 > 0x40)
    v21 = llvm::APInt::countLeadingZerosSlowCase(v19) == v20 - 1;
  else
    v21 = *(_QWORD *)v19 == 1;
  v22 = v21;
  v14 = v22 == 0;
  v23 = 0x10000;
  if (v14)
    v23 = 0;
  v24 = (llvm::DataLayout *)(v23 | v17);
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD *)(v10 + 96);
  v27 = (llvm::APInt *)(v26 + 24);
  v28 = *(_DWORD *)(v26 + 32);
  if (v28 <= 0x40)
  {
    if (*(_QWORD *)v27)
      goto LABEL_23;
LABEL_36:
    v63[0] = 0;
    if (llvm::getObjectSize(*(llvm::Value **)v10, v63, a2, a3, v24, a4))
    {
      v46 = *(unsigned int *)(v25 + 8);
      v47 = v46 >> 8;
      v48 = (uint64_t)v63[0];
      if (v46 >> 14 || (void *)(0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v46)) >= v63[0])
      {
        v49 = *(llvm::ConstantInt **)v25;
        v73 = *(_DWORD *)(v25 + 8) >> 8;
        if (v46 >> 8 <= 0x40)
          goto LABEL_41;
        goto LABEL_51;
      }
    }
    if ((a5 & 1) == 0)
      return 0;
LABEL_40:
    v48 = v15 << 63 >> 63;
    v49 = *(llvm::ConstantInt **)v25;
    v46 = *(unsigned int *)(v25 + 8);
    v47 = v46 >> 8;
    v73 = *(_DWORD *)(v25 + 8) >> 8;
    if (v46 >> 8 <= 0x40)
    {
LABEL_41:
      v50 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v47;
      if (v46 <= 0xFF)
        v51 = 0;
      else
        v51 = v50;
      v72 = v51 & v48;
      goto LABEL_45;
    }
LABEL_51:
    llvm::APInt::initSlowCase((llvm::APInt *)&v72, v48, 0);
LABEL_45:
    Select = llvm::ConstantInt::get(v49, (llvm::LLVMContext *)&v72, v45);
    if (v73 >= 0x41 && v72)
      MEMORY[0x1CAA32F9C](v72, 0x1000C8000313F17);
    return Select;
  }
  if (llvm::APInt::countLeadingZerosSlowCase(v27) == v28)
    goto LABEL_36;
LABEL_23:
  v29 = ***(_QWORD ***)(*(_QWORD *)(a1 + 40) + 56);
  llvm::ObjectSizeOffsetEvaluator::ObjectSizeOffsetEvaluator((uint64_t)&v72, (uint64_t)a2, (uint64_t)a3, v29, (uint64_t)v24, (uint64_t)a4);
  v30 = (uint64_t)llvm::ObjectSizeOffsetEvaluator::compute((llvm::ObjectSizeOffsetEvaluator *)&v72, *(llvm::Type ***)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)));
  v32 = (v30 | v31) != 0;
  if (v30 | v31)
  {
    v33 = v30;
    v34 = v31;
    v35 = 0;
    v63[0] = v64;
    v63[1] = (void *)0x200000000;
    v64[6] = v29;
    v64[7] = v70;
    v64[8] = &v71;
    v64[9] = 0;
    v65 = 0;
    v66 = 512;
    v67 = 7;
    v68 = 0;
    v69 = 0;
    v70[0] = &unk_1E8135C10;
    v70[1] = a2;
    v71 = &unk_1E8167A08;
    v36 = *(unsigned __int8 **)(a1 + 48);
    v64[4] = *(_QWORD *)(a1 + 40);
    v64[5] = a1 + 24;
    v60 = v36;
    if (v36)
    {
      llvm::MetadataTracking::track((uint64_t)&v60, v36, 2);
      v35 = v60;
    }
    sub_1C4774EF4((uint64_t)v63, 0, (uint64_t)v35);
    if (v60)
      llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
    v62 = 257;
    v37 = (unsigned __int8 *)sub_1C47733F8((uint64_t)v63, v33, v34, (uint64_t)&v60, 0, 0);
    v62 = 257;
    v38 = sub_1C4774B48((uint64_t)v63, 36, v33, v34, (uint64_t)&v60);
    v62 = 257;
    v40 = sub_1C4773690((uint64_t *)v63, v37, v25, (uint64_t)&v60);
    v41 = *(llvm::ConstantInt **)v25;
    v61 = *(_DWORD *)(v25 + 8) >> 8;
    if (v61 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v60, 0, 0);
    else
      v60 = 0;
    v42 = (uint64_t *)llvm::ConstantInt::get(v41, (llvm::LLVMContext *)&v60, v39);
    if (v61 >= 0x41 && v60)
      MEMORY[0x1CAA32F9C](v60, 0x1000C8000313F17);
    v62 = 257;
    Select = llvm::IRBuilderBase::CreateSelect((uint64_t *)v63, v38, v42, (uint64_t)v40, (uint64_t)&v60, 0);
    if (*(unsigned __int8 *)(v33 + 16) > 0x14u || *(unsigned __int8 *)(v34 + 16) >= 0x15u)
    {
      v55 = *(llvm::ConstantInt **)v25;
      v56 = *(_DWORD *)(v25 + 8);
      v61 = v56 >> 8;
      if (v56 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v60, -1, 0);
      }
      else
      {
        if (v56 <= 0xFF)
          v57 = 0;
        else
          v57 = (unsigned __int8 *)(0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v56));
        v60 = v57;
      }
      v58 = llvm::ConstantInt::get(v55, (llvm::LLVMContext *)&v60, v43);
      if (v61 >= 0x41 && v60)
        MEMORY[0x1CAA32F9C](v60, 0x1000C8000313F17);
      v62 = 257;
      v59 = sub_1C4774B48((uint64_t)v63, 33, (uint64_t)Select, (uint64_t)v58, (uint64_t)&v60);
      llvm::IRBuilderBase::CreateAssumption((uint64_t *)v63, v59, 0, 0);
    }
    if (v63[0] != v64)
      free(v63[0]);
  }
  else
  {
    Select = 0;
  }
  if (v81 != v80)
    free(v81);
  if (v79 != (void *)v78[3])
    free(v79);
  sub_1C4EC4314(v78);
  v75[15] = &off_1E8167568;
  v53 = v77;
  if (v77 == v76)
  {
    v54 = 4;
    v53 = v76;
LABEL_59:
    (*(void (**)(void))(*v53 + 8 * v54))();
    goto LABEL_60;
  }
  if (v77)
  {
    v54 = 5;
    goto LABEL_59;
  }
LABEL_60:
  if (v74 != v75)
    free(v74);
  if (((v32 | a5 ^ 1) & 1) == 0)
    goto LABEL_40;
  return Select;
}

llvm::ValueHandleBase *llvm::ObjectSizeOffsetEvaluator::compute(llvm::ObjectSizeOffsetEvaluator *this, llvm::Type **a2)
{
  const llvm::APInt *v4;
  uint64_t v5;
  llvm::ConstantInt *v6;
  llvm::ValueHandleBase *v7;
  llvm::Type *v8;
  llvm::ValueHandleBase *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  BOOL v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  llvm::UndefValue *v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t *v32;
  unint64_t v33;
  void *v34;
  void *v35;
  uint64_t v37;
  uint64_t v39;
  unsigned int v41;
  int v42;
  unsigned int v43;
  void *v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  void *v48;
  _QWORD *v49;
  unsigned int v50;

  llvm::DataLayout::getIndexType(*(llvm::DataLayout **)this, *a2);
  *((_QWORD *)this + 25) = v5;
  v6 = *(llvm::ConstantInt **)v5;
  v50 = *(_DWORD *)(v5 + 8) >> 8;
  if (v50 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v49, 0, 0);
  else
    v49 = 0;
  v7 = llvm::ConstantInt::get(v6, (llvm::LLVMContext *)&v49, v4);
  if (v50 >= 0x41 && v49)
    MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
  *((_QWORD *)this + 26) = v7;
  v9 = llvm::ObjectSizeOffsetEvaluator::compute_(this, (llvm::Value *)a2);
  if (!v9 || !v8)
  {
    v10 = *((_QWORD *)this + 31);
    v11 = 256;
    if (v10 == *((_QWORD *)this + 30))
      v11 = 260;
    v12 = *(unsigned int *)((char *)this + v11);
    if ((_DWORD)v12)
    {
      v13 = 8 * v12;
      v14 = (uint64_t *)*((_QWORD *)this + 31);
      while ((unint64_t)*v14 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v14;
        v13 -= 8;
        if (!v13)
          goto LABEL_26;
      }
    }
    else
    {
      v14 = (uint64_t *)*((_QWORD *)this + 31);
    }
    v15 = (_QWORD *)(v10 + 8 * v12);
    if (v14 != v15)
    {
      v16 = *v14;
LABEL_16:
      v49 = 0;
      v17 = sub_1C61A45F4(*((_QWORD *)this + 27), *((_DWORD *)this + 58), v16, &v49);
      v18 = v49;
      if (v17)
        v19 = v49 == (_QWORD *)(*((_QWORD *)this + 27) + 56 * *((unsigned int *)this + 58));
      else
        v19 = 1;
      if (!v19 && v49[3] | v49[6])
      {
        sub_1C61A406C((llvm::ValueHandleBase *)(v49 + 1));
        *v18 = -8192;
        *((int32x2_t *)this + 28) = vadd_s32(*(int32x2_t *)((char *)this + 224), (int32x2_t)0x1FFFFFFFFLL);
      }
      v20 = (unint64_t *)(v14 + 1);
      while (v20 != v15)
      {
        v21 = *v20++;
        v16 = v21;
        if (v21 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v14 = (uint64_t *)(v20 - 1);
          goto LABEL_16;
        }
      }
    }
LABEL_26:
    v22 = *((_QWORD *)this + 45);
    v23 = 368;
    if (v22 == *((_QWORD *)this + 44))
      v23 = 372;
    v24 = *(unsigned int *)((char *)this + v23);
    if ((_DWORD)v24)
    {
      v25 = 8 * v24;
      v26 = (unint64_t *)*((_QWORD *)this + 45);
      while (*v26 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v26;
        v25 -= 8;
        if (!v25)
          goto LABEL_40;
      }
    }
    else
    {
      v26 = (unint64_t *)*((_QWORD *)this + 45);
    }
    v27 = (unint64_t *)(v22 + 8 * v24);
    if (v26 != v27)
    {
      v28 = *v26;
LABEL_36:
      v29 = llvm::UndefValue::get(*(llvm::UndefValue **)v28, v8);
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v28, v29, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v28 + 40) + 40, (uint64_t ***)v28);
      v30 = *(_QWORD *)(v28 + 24);
      v31 = *(_QWORD **)(v28 + 32);
      *v31 = v30;
      *(_QWORD *)(v30 + 8) = v31;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v28);
      v32 = v26 + 1;
      while (v32 != v27)
      {
        v33 = *v32++;
        v28 = v33;
        if (v33 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v26 = v32 - 1;
          goto LABEL_36;
        }
      }
    }
  }
LABEL_40:
  v34 = (void *)*((_QWORD *)this + 31);
  if (v34 == *((void **)this + 30))
    goto LABEL_41;
  v37 = *((unsigned int *)this + 64);
  if (v37 < 0x21 || 4 * (*((_DWORD *)this + 65) - *((_DWORD *)this + 66)) >= v37)
  {
    memset(v34, 255, 8 * v37);
LABEL_41:
    *(_QWORD *)((char *)this + 260) = 0;
    goto LABEL_42;
  }
  free(v34);
  v41 = *((_DWORD *)this + 65) - *((_DWORD *)this + 66);
  v42 = 1 << (33 - __clz(v41 - 1));
  if (v41 <= 0x10)
    v43 = 32;
  else
    v43 = v42;
  *((_DWORD *)this + 64) = v43;
  *(_QWORD *)((char *)this + 260) = 0;
  v44 = malloc_type_malloc(8 * v43, 0x4065EBACuLL);
  if (!v44)
    goto LABEL_70;
  *((_QWORD *)this + 31) = v44;
  memset(v44, 255, 8 * *((unsigned int *)this + 64));
LABEL_42:
  v35 = (void *)*((_QWORD *)this + 45);
  if (v35 != *((void **)this + 44))
  {
    v39 = *((unsigned int *)this + 92);
    if (v39 < 0x21 || 4 * (*((_DWORD *)this + 93) - *((_DWORD *)this + 94)) >= v39)
    {
      memset(v35, 255, 8 * v39);
      goto LABEL_43;
    }
    free(v35);
    v45 = *((_DWORD *)this + 93) - *((_DWORD *)this + 94);
    v46 = 1 << (33 - __clz(v45 - 1));
    if (v45 <= 0x10)
      v47 = 32;
    else
      v47 = v46;
    *((_DWORD *)this + 92) = v47;
    *((_DWORD *)this + 94) = 0;
    *((_DWORD *)this + 93) = 0;
    v48 = malloc_type_malloc(8 * v47, 0x4065EBACuLL);
    if (v48)
    {
      *((_QWORD *)this + 45) = v48;
      memset(v48, 255, 8 * *((unsigned int *)this + 92));
      return v9;
    }
LABEL_70:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
LABEL_43:
  *(_QWORD *)((char *)this + 372) = 0;
  return v9;
}

uint64_t sub_1C4EC1900(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t result;
  unsigned __int8 *v6;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = a2 + 24;
  v3 = *(unsigned __int8 **)(a2 + 48);
  v6 = v3;
  if (v3)
  {
    llvm::MetadataTracking::track((uint64_t)&v6, v3, 2);
    v4 = v6;
  }
  else
  {
    v4 = 0;
  }
  result = sub_1C4774EF4(a1, 0, (uint64_t)v4);
  if (v6)
    return llvm::MetadataTracking::untrack((uint64_t)&v6, v6);
  return result;
}

void llvm::ObjectSizeOffsetVisitor::align(uint64_t a1@<X0>, uint64_t *a2@<X1>, __int16 a3@<W2>, llvm::APInt *a4@<X8>)
{
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;

  if (*(_BYTE *)(a1 + 17))
    v4 = (a3 & 0xFF00) == 0;
  else
    v4 = 1;
  if (v4)
  {
    *((_DWORD *)a4 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)a4 = *a2;
    *((_DWORD *)a2 + 2) = 0;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 32);
    if (*((_DWORD *)a2 + 2) >= 0x41u)
      a2 = (uint64_t *)*a2;
    v6 = ((1 << a3) + *a2 - 1) & -(1 << a3);
    *((_DWORD *)a4 + 2) = v5;
    if (v5 > 0x40)
    {
      llvm::APInt::initSlowCase(a4, v6, 0);
    }
    else
    {
      if (v5)
        v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
      else
        v7 = 0;
      *(_QWORD *)a4 = v7 & v6;
    }
  }
}

double llvm::ObjectSizeOffsetVisitor::ObjectSizeOffsetVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = a6;
  *(_DWORD *)(a1 + 48) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 88;
  *(_QWORD *)(a1 + 64) = a1 + 88;
  *(_QWORD *)&result = 8;
  *(_QWORD *)(a1 + 72) = 8;
  *(_DWORD *)(a1 + 80) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = a6;
  *(_DWORD *)(a1 + 48) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 88;
  *(_QWORD *)(a1 + 64) = a1 + 88;
  *(_QWORD *)&result = 8;
  *(_QWORD *)(a1 + 72) = 8;
  *(_DWORD *)(a1 + 80) = 0;
  return result;
}

void llvm::ObjectSizeOffsetVisitor::computeImpl(llvm::ObjectSizeOffsetVisitor *this@<X0>, llvm::Module **a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  char v7;
  int v8;
  llvm::Module *v9;

  v6 = *((unsigned __int8 *)a2 + 16);
  if (!a2 || v6 < 0x1C)
  {
    if (a2 && v6 == 21)
    {
      llvm::ObjectSizeOffsetVisitor::visitArgument(this, (llvm::Argument *)a2, a3);
      return;
    }
    if (a2 && v6 == 19)
    {
      if (*((_BYTE *)this + 18) || *((_DWORD *)*a2 + 2) >= 0x100u)
        goto LABEL_28;
    }
    else
    {
      if (a2 && v6 == 1)
      {
        if (((_DWORD)a2[4] & 0xFu) - 5 < 4 || ((1 << ((_DWORD)a2[4] & 0xF)) & 0x614) == 0)
        {
          v9 = a2[5];
          if (!v9 || !llvm::Module::getSemanticInterposition(v9) || (*((_BYTE *)a2 + 33) & 0x40) != 0)
          {
            llvm::ObjectSizeOffsetVisitor::compute((uint64_t *)a3, this, *(a2 - 4));
            return;
          }
        }
        goto LABEL_28;
      }
      if (a2 && v6 == 3)
      {
        llvm::ObjectSizeOffsetVisitor::visitGlobalVariable((uint64_t)this, (llvm::GlobalVariable *)a2, a3);
        return;
      }
      if (!a2 || v6 - 13 < 0xFFFFFFFE)
        goto LABEL_28;
    }
    sub_1C4EC4380(a3, (uint64_t)this + 40, (uint64_t)this + 40);
    return;
  }
  sub_1C4774094((llvm::ObjectSizeOffsetVisitor *)((char *)this + 56), (uint64_t)a2);
  if (!v7)
  {
LABEL_28:
    *(_DWORD *)(a3 + 8) = 1;
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 24) = 1;
    *(_QWORD *)(a3 + 16) = 0;
    return;
  }
  v8 = *((unsigned __int8 *)a2 + 16);
  if (v8 != 59)
    __asm { BR              X10 }
  llvm::ObjectSizeOffsetVisitor::visitAllocaInst(this, (llvm::AllocaInst *)a2, a3);
}

uint64_t llvm::ObjectSizeOffsetVisitor::visitArgument@<X0>(llvm::ObjectSizeOffsetVisitor *this@<X0>, llvm::Argument *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  BOOL v14;
  const char *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  __int16 ParamAlignment;
  const void **v23;
  unsigned int v24;
  size_t v27;
  void *v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  void *__src;
  unsigned int v33;

  result = llvm::Argument::getPointeeInMemoryValueType(a2);
  if (!result)
    goto LABEL_2;
  v7 = result;
  v8 = *(unsigned __int8 *)(result + 8);
  if (v8 - 16 >= 2)
  {
    if (v8 <= 0xF && ((1 << v8) & 0xAC7F) != 0)
      goto LABEL_6;
    if ((v8 & 0xFE) != 0x12 && v8 != 21)
      goto LABEL_2;
  }
  result = llvm::Type::isSizedDerivedType(result, 0);
  if ((result & 1) == 0)
  {
LABEL_2:
    *(_DWORD *)(a3 + 8) = 1;
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 24) = 1;
    *(_QWORD *)(a3 + 16) = 0;
    return result;
  }
LABEL_6:
  v9 = *((_DWORD *)this + 8);
  v10 = *(_QWORD *)this;
  sub_1C4768AD0(*(_QWORD *)this, v7);
  v12 = (unint64_t)(v11 + 7) >> 3;
  v14 = v13 == 1;
  llvm::DataLayout::getAlignment(v10, v7);
  v17 = (1 << v16) + v12 - 1;
  v18 = -(1 << v16);
  if (v14)
  v19 = v17 & v18;
  v33 = v9;
  if (v9 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src, v19, 0);
    v9 = v33;
    v29 = v33;
    if (v33 > 0x40)
    {
      v27 = (((unint64_t)v33 + 63) >> 3) & 0x3FFFFFF8;
      v28 = (void *)operator new[]();
      v21 = __src;
      memcpy(v28, __src, v27);
      goto LABEL_13;
    }
    v21 = __src;
  }
  else
  {
    v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
    if (!v9)
      v20 = 0;
    v21 = (void *)(v20 & v19);
    __src = (void *)(v20 & v19);
    v29 = v9;
  }
  v28 = v21;
LABEL_13:
  ParamAlignment = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(*((_QWORD *)a2 + 3) + 112), *((_DWORD *)a2 + 8));
  llvm::ObjectSizeOffsetVisitor::align((uint64_t)this, (uint64_t *)&v28, ParamAlignment, (llvm::APInt *)&v30);
  v23 = (const void **)((char *)this + 40);
  *(_DWORD *)(a3 + 8) = v31;
  *(_QWORD *)a3 = v30;
  v31 = 0;
  result = a3 + 16;
  v24 = *((_DWORD *)this + 12);
  *(_DWORD *)(a3 + 24) = v24;
  if (v24 > 0x40)
    result = (uint64_t)llvm::APInt::initSlowCase((llvm::APInt *)result, v23);
  else
    *(_QWORD *)result = *v23;
  if (v29 >= 0x41)
  {
    result = (uint64_t)v28;
    if (v28)
      result = MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
  }
  if (v9 >= 0x41)
  {
    if (v21)
      return MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
  }
  return result;
}

uint64_t llvm::ObjectSizeOffsetVisitor::visitConstantPointerNull@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(_BYTE *)(result + 18) && *(_DWORD *)(*(_QWORD *)a2 + 8) < 0x100u)
    return sub_1C4EC4380(a3, result + 40, result + 40);
  *(_DWORD *)(a3 + 8) = 1;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 1;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

void llvm::ObjectSizeOffsetVisitor::visitGlobalAlias(llvm::DataLayout **this@<X0>, llvm::Value **a2@<X1>, uint64_t a3@<X8>)
{
  llvm::GlobalValue *Section;
  uint64_t v7;
  llvm::Module *v8;
  BOOL v9;

  if (*((_BYTE *)a2 + 16) == 3
    && (Section = llvm::GlobalValue::getSection((llvm::GlobalValue *)a2), v7 == 12)
    && (*(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
      ? (v9 = *((unsigned int *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
      : (v9 = 0),
        v9)
    || ((_DWORD)a2[4] & 0xFu) - 5 >= 4 && ((1 << ((_DWORD)a2[4] & 0xF)) & 0x614) != 0
    || (v8 = a2[5]) != 0 && llvm::Module::getSemanticInterposition(v8) && (*((_BYTE *)a2 + 33) & 0x40) == 0)
  {
    *(_DWORD *)(a3 + 8) = 1;
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 24) = 1;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    llvm::ObjectSizeOffsetVisitor::compute((void **)a3, this, *(a2 - 4));
  }
}

uint64_t llvm::ObjectSizeOffsetVisitor::visitGlobalVariable@<X0>(uint64_t this@<X0>, llvm::GlobalVariable *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  BOOL v14;
  const char *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  __int16 v22;
  const void **v23;
  unsigned int v24;
  size_t v25;
  void *v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  void *__src;
  unsigned int v31;

  v4 = this;
  if (*((_BYTE *)a2 + 16))
  {
    if (*((_BYTE *)a2 + 16) == 3)
    {
      if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
        goto LABEL_32;
      this = (uint64_t)llvm::GlobalValue::getSection(a2);
      if (v6 == 12
        && *(_QWORD *)this == *(_QWORD *)"llvm.ptrauth"
        && *(_DWORD *)(this + 8) == (unint64_t)*(unsigned int *)"auth")
      {
        goto LABEL_32;
      }
    }
  }
  else if (*((llvm::GlobalVariable **)a2 + 9) == (llvm::GlobalVariable *)((char *)a2 + 72)
         && (*((_BYTE *)a2 + 34) & 0x80) == 0)
  {
LABEL_32:
    *(_DWORD *)(a3 + 8) = 1;
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 24) = 1;
    *(_QWORD *)(a3 + 16) = 0;
    return this;
  }
  if ((*((_DWORD *)a2 + 8) & 0xFu) - 5 >= 4 && ((1 << (*((_DWORD *)a2 + 8) & 0xF)) & 0x614) != 0)
    goto LABEL_32;
  this = *((_QWORD *)a2 + 5);
  if (this)
  {
    this = llvm::Module::getSemanticInterposition((llvm::Module *)this);
    if ((_DWORD)this)
    {
      if ((*((_BYTE *)a2 + 33) & 0x40) == 0)
        goto LABEL_32;
    }
  }
  if ((*((_BYTE *)a2 + 80) & 2) != 0)
    goto LABEL_32;
  v8 = *(_DWORD *)(v4 + 32);
  v9 = *(_QWORD *)v4;
  v10 = *((_QWORD *)a2 + 3);
  sub_1C4768AD0(*(_QWORD *)v4, v10);
  v12 = (unint64_t)(v11 + 7) >> 3;
  v14 = v13 == 1;
  llvm::DataLayout::getAlignment(v9, v10);
  v17 = (1 << v16) + v12 - 1;
  v18 = -(1 << v16);
  if (v14)
  v19 = v17 & v18;
  v31 = v8;
  if (v8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src, v19, 0);
    v8 = v31;
    v27 = v31;
    if (v31 > 0x40)
    {
      v25 = (((unint64_t)v31 + 63) >> 3) & 0x3FFFFFF8;
      v26 = (void *)operator new[]();
      v21 = __src;
      memcpy(v26, __src, v25);
      goto LABEL_23;
    }
    v21 = __src;
  }
  else
  {
    v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    if (!v8)
      v20 = 0;
    v21 = (void *)(v20 & v19);
    __src = (void *)(v20 & v19);
    v27 = v8;
  }
  v26 = v21;
LABEL_23:
  if ((*((_WORD *)a2 + 17) & 0x3F) != 0)
    v22 = ((*((_WORD *)a2 + 17) & 0x3F) + 255) | 0x100;
  else
    v22 = 0;
  llvm::ObjectSizeOffsetVisitor::align(v4, (uint64_t *)&v26, v22, (llvm::APInt *)&v28);
  v23 = (const void **)(v4 + 40);
  *(_DWORD *)(a3 + 8) = v29;
  *(_QWORD *)a3 = v28;
  v29 = 0;
  this = a3 + 16;
  v24 = *(_DWORD *)(v4 + 48);
  *(_DWORD *)(a3 + 24) = v24;
  if (v24 > 0x40)
    this = (uint64_t)llvm::APInt::initSlowCase((llvm::APInt *)this, v23);
  else
    *(_QWORD *)this = *v23;
  if (v27 >= 0x41)
  {
    this = (uint64_t)v26;
    if (v26)
      this = MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
  }
  if (v8 >= 0x41)
  {
    if (v21)
      return MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
  }
  return this;
}

uint64_t llvm::ObjectSizeOffsetVisitor::visitUndefValue@<X0>(llvm::ObjectSizeOffsetVisitor *this@<X0>, uint64_t a2@<X8>)
{
  return sub_1C4EC4380(a2, (uint64_t)this + 40, (uint64_t)this + 40);
}

uint64_t llvm::ObjectSizeOffsetVisitor::CheckedZextOrTrunc(llvm::ObjectSizeOffsetVisitor *this, llvm::APInt *a2)
{
  return sub_1C4EC02E0(a2, *((_DWORD *)this + 8));
}

void llvm::ObjectSizeOffsetVisitor::visitAllocaInst(llvm::ObjectSizeOffsetVisitor *this@<X0>, llvm::AllocaInst *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  char v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  size_t v21;
  uint64_t v22;
  void *v23;
  size_t v24;
  uint64_t *v25;
  size_t v26;
  void *v27;
  size_t v29;
  uint64_t v30;
  void *v31;
  size_t v32;
  void *v33;
  unsigned int v34;
  void *v35;
  unsigned int v36;
  BOOL v37;
  uint64_t *v38;
  unsigned int v39;
  uint64_t *v40;
  unsigned int v41;
  void *__src;
  unsigned int v43;

  v6 = *((_QWORD *)a2 + 8);
  v7 = *(unsigned __int8 *)(v6 + 8);
  if (v7 > 0x11)
    goto LABEL_41;
  if (((1 << v7) & 0xAC7F) != 0)
    goto LABEL_3;
  if (((1 << v7) & 0x30000) == 0)
  {
LABEL_41:
    if ((v7 & 0xFE) != 0x12 && v7 != 21)
      goto LABEL_45;
  }
  if (!llvm::Type::isSizedDerivedType(*((_QWORD *)a2 + 8), 0))
  {
LABEL_45:
    *(_DWORD *)(a3 + 8) = 1;
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 24) = 1;
    *(_QWORD *)(a3 + 16) = 0;
    return;
  }
  v6 = *((_QWORD *)a2 + 8);
LABEL_3:
  v8 = *(_QWORD *)this;
  sub_1C4768AD0(*(_QWORD *)this, v6);
  v10 = v9;
  v12 = v11 == 1;
  llvm::DataLayout::getAlignment(v8, v6);
  if (v12 && *((_BYTE *)this + 16) != 1)
    goto LABEL_45;
  v14 = ((1 << v13) + ((unint64_t)(v10 + 7) >> 3) - 1) & -(1 << v13);
  v15 = *((_DWORD *)this + 8);
  v43 = v15;
  if (v15 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src, v14, 0);
  }
  else
  {
    if (v15)
      v16 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
    else
      v16 = 0;
    __src = (void *)(v16 & v14);
  }
  if ((llvm::AllocaInst::isArrayAllocation(a2) & 1) != 0)
  {
    v17 = *((_QWORD *)a2 - 4);
    if (!v17 || *(_BYTE *)(v17 + 16) != 16)
    {
      *(_DWORD *)(a3 + 8) = 1;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(a3 + 24) = 1;
      *(_QWORD *)(a3 + 16) = 0;
      goto LABEL_38;
    }
    v18 = *(unsigned int *)(v17 + 32);
    v41 = v18;
    if (v18 > 0x40)
    {
      v26 = ((unint64_t)(v18 + 63) >> 3) & 0x3FFFFFF8;
      v19 = (void *)operator new[]();
      memcpy(v19, *(const void **)(v17 + 24), v26);
    }
    else
    {
      v19 = *(void **)(v17 + 24);
    }
    v40 = (uint64_t *)v19;
    if ((sub_1C4EC02E0((llvm::APInt *)&v40, *((_DWORD *)this + 8)) & 1) == 0)
      goto LABEL_34;
    v37 = 0;
    llvm::APInt::umul_ov((llvm::APInt *)&__src, &v40, &v37, (uint64_t)&v35);
    if (v43 >= 0x41 && __src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    v27 = v35;
    __src = v35;
    v43 = v36;
    if (!v37)
    {
      v34 = v36;
      if (v36 > 0x40)
      {
        v29 = (((unint64_t)v36 + 63) >> 3) & 0x3FFFFFF8;
        v27 = (void *)operator new[]();
        memcpy(v27, __src, v29);
      }
      v33 = v27;
      llvm::ObjectSizeOffsetVisitor::align((uint64_t)this, (uint64_t *)&v33, *((_WORD *)a2 + 9) & 0x3F | 0x100, (llvm::APInt *)&v35);
      *(_DWORD *)(a3 + 8) = v36;
      *(_QWORD *)a3 = v35;
      v30 = *((unsigned int *)this + 12);
      *(_DWORD *)(a3 + 24) = v30;
      if (v30 > 0x40)
      {
        v32 = ((unint64_t)(v30 + 63) >> 3) & 0x3FFFFFF8;
        v31 = (void *)operator new[]();
        memcpy(v31, *((const void **)this + 5), v32);
      }
      else
      {
        v31 = (void *)*((_QWORD *)this + 5);
      }
      *(_QWORD *)(a3 + 16) = v31;
      if (v34 >= 0x41 && v33)
        MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
    }
    else
    {
LABEL_34:
      *(_DWORD *)(a3 + 8) = 1;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(a3 + 24) = 1;
      *(_QWORD *)(a3 + 16) = 0;
    }
    if (v41 < 0x41)
      goto LABEL_38;
    v25 = v40;
    if (!v40)
      goto LABEL_38;
  }
  else
  {
    v39 = v43;
    if (v43 > 0x40)
    {
      v21 = (((unint64_t)v43 + 63) >> 3) & 0x3FFFFFF8;
      v20 = (void *)operator new[]();
      memcpy(v20, __src, v21);
    }
    else
    {
      v20 = __src;
    }
    v38 = (uint64_t *)v20;
    llvm::ObjectSizeOffsetVisitor::align((uint64_t)this, (uint64_t *)&v38, *((_WORD *)a2 + 9) & 0x3F | 0x100, (llvm::APInt *)&v40);
    *(_DWORD *)(a3 + 8) = v41;
    *(_QWORD *)a3 = v40;
    v22 = *((unsigned int *)this + 12);
    *(_DWORD *)(a3 + 24) = v22;
    if (v22 > 0x40)
    {
      v24 = ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8;
      v23 = (void *)operator new[]();
      memcpy(v23, *((const void **)this + 5), v24);
    }
    else
    {
      v23 = (void *)*((_QWORD *)this + 5);
    }
    *(_QWORD *)(a3 + 16) = v23;
    if (v39 < 0x41)
      goto LABEL_38;
    v25 = v38;
    if (!v38)
      goto LABEL_38;
  }
  MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
LABEL_38:
  if (v43 >= 0x41)
  {
    if (__src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  }
}

_QWORD *llvm::ObjectSizeOffsetVisitor::visitCallBase@<X0>(llvm::ObjectSizeOffsetVisitor *this@<X0>, llvm::CallBase *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  _QWORD *result;
  uint64_t (**v8)(_QWORD *);
  uint64_t v9;
  unsigned int v10;
  char v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t *)*((_QWORD *)this + 1);
  v12[0] = &off_1E8139538;
  v13 = v12;
  llvm::getAllocSize((uint64_t)a2, v6, (uint64_t)v12, (uint64_t)&v9);
  result = v13;
  if (v13 == v12)
  {
    v8 = (uint64_t (**)(_QWORD *))(v12[0] + 32);
    result = v12;
LABEL_3:
    result = (_QWORD *)(*v8)(result);
    goto LABEL_4;
  }
  if (v13)
  {
    v8 = (uint64_t (**)(_QWORD *))(*v13 + 40);
    goto LABEL_3;
  }
LABEL_4:
  if (v11)
  {
    result = (_QWORD *)sub_1C4EC4380(a3, (uint64_t)&v9, (uint64_t)this + 40);
    if (v10 >= 0x41)
    {
      result = (_QWORD *)v9;
      if (v9)
        return (_QWORD *)MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
    }
  }
  else
  {
    *(_DWORD *)(a3 + 8) = 1;
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 24) = 1;
    *(_QWORD *)(a3 + 16) = 0;
  }
  return result;
}

void llvm::ObjectSizeOffsetVisitor::visitExtractElementInst(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = 0;
}

void llvm::ObjectSizeOffsetVisitor::visitExtractValueInst(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = 0;
}

void llvm::ObjectSizeOffsetVisitor::visitIntToPtrInst(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = 0;
}

void llvm::ObjectSizeOffsetVisitor::findLoadSizeOffset(llvm::ObjectSizeOffsetVisitor *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, unsigned int *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  int hasFnAttrOnCalledFunction;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t ***v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t ****v36;
  uint64_t ***v37;
  int v38;
  int v39;
  uint64_t ***v40;
  char *v41;
  size_t v42;
  size_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  BOOL v56;
  int v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  BOOL v62;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  uint64_t v70;
  unsigned int v71;
  BOOL v72;
  unint64_t v74;
  char *v75;
  _QWORD *v76;
  uint64_t v77;
  void **v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  llvm::Value *v86;
  void **v87;
  uint64_t v88;
  llvm::Value **v89;
  const llvm::DataLayout *v90;
  uint64_t *v91;
  char v92;
  _QWORD *v93;
  unsigned __int16 isImpliedCondition;
  uint64_t v95;
  unsigned int v96;
  void **v97;
  uint64_t v98;
  size_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  unsigned int v109;
  void *v110;
  unsigned int v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  v14 = sub_1C61A361C(a5, a3);
  if ((*(_DWORD *)a5 & 1) != 0)
    v15 = a5 + 8;
  else
    v15 = *(_QWORD *)(a5 + 8);
  v16 = *(_DWORD *)(a5 + 16);
  if ((*(_DWORD *)a5 & 1) != 0)
    v16 = 8;
  if (v15 + 40 * v16 != v14)
  {
    sub_1C4EC4460(a7, v14 + 8);
    return;
  }
  v101 = a7;
  while (1)
  {
    v17 = a4 - 3;
    if (a4)
      v18 = (uint64_t)(a4 - 3);
    else
      v18 = 0;
    if (sub_1C4D99D08(v18))
      goto LABEL_19;
    hasFnAttrOnCalledFunction = sub_1C509DDB0(v18);
    if ((hasFnAttrOnCalledFunction & 1) != 0)
      goto LABEL_19;
    v20 = *a6 + 1;
    *a6 = v20;
    if (v20 >= 0x81)
      goto LABEL_163;
    v21 = *(unsigned __int8 *)(v18 + 16);
    v22 = (v21 - 33);
    if (v22 > 0x37)
      goto LABEL_19;
    if (((1 << (v21 - 33)) & 0x8000000000041) != 0)
      break;
    if (v22 == 27)
    {
      if ((*(_WORD *)(v18 + 18) & 0x301) != 0)
        goto LABEL_163;
      goto LABEL_19;
    }
    if (((1 << (v21 - 33)) & 0x808001D0000010) != 0)
      goto LABEL_28;
LABEL_19:
    v58 = a4 == *(_QWORD **)(a3 + 48);
    a4 = (_QWORD *)*a4;
    if (v58)
    {
      v138 = (uint64_t)&v140;
      v139 = 0x100000000;
      v59 = *(_QWORD *)(a3 + 8);
      if (!v59)
        goto LABEL_100;
      while (1)
      {
        v60 = *(_QWORD *)(v59 + 24);
        v61 = *(unsigned __int8 *)(v60 + 16);
        v62 = v60 && v61 >= 0x1C;
        if (v62 && v61 - 29 < 0xB)
          break;
        v59 = *(_QWORD *)(v59 + 8);
        if (!v59)
          goto LABEL_100;
      }
LABEL_77:
      v64 = &v118;
      llvm::ObjectSizeOffsetVisitor::findLoadSizeOffset(&v118, a1, a2);
      v65 = v138;
      if (v139 >= HIDWORD(v139))
      {
        v74 = v139 + 1;
        if (v138 <= (unint64_t)&v118
          && v138 + 32 * (unint64_t)v139 > (unint64_t)&v118)
        {
          v75 = (char *)&v118 - v138;
          sub_1C61A4468((uint64_t)&v138, v74);
          v65 = v138;
          v64 = (uint64_t *)&v75[v138];
        }
        else
        {
          sub_1C61A4468((uint64_t)&v138, v74);
          v64 = &v118;
          v65 = v138;
        }
      }
      v66 = v65 + 32 * v139;
      *(_DWORD *)(v66 + 8) = *((_DWORD *)v64 + 2);
      *(_QWORD *)v66 = *v64;
      *((_DWORD *)v64 + 2) = 0;
      *(_DWORD *)(v66 + 24) = *((_DWORD *)v64 + 6);
      *(_QWORD *)(v66 + 16) = v64[2];
      *((_DWORD *)v64 + 6) = 0;
      LODWORD(v139) = v139 + 1;
      if (DWORD2(v120) >= 0x41 && (_QWORD)v120)
        MEMORY[0x1CAA32F9C](v120, 0x1000C8000313F17);
      if (v119 >= 0x41 && v118)
        MEMORY[0x1CAA32F9C](v118, 0x1000C8000313F17);
      v67 = v138;
      v68 = v139;
      v69 = (_OWORD *)(v138 + 32 * v139);
      if (*((_DWORD *)v69 - 6) < 2u || *((_DWORD *)v69 - 2) < 2u)
        goto LABEL_100;
      while (1)
      {
        v59 = *(_QWORD *)(v59 + 8);
        if (!v59)
          break;
        v70 = *(_QWORD *)(v59 + 24);
        v71 = *(unsigned __int8 *)(v70 + 16);
        if (v70)
          v72 = v71 >= 0x1C;
        else
          v72 = 0;
        if (v72 && v71 - 29 < 0xB)
          goto LABEL_77;
      }
      if ((_DWORD)v139)
      {
        sub_1C4EC4460((uint64_t)&v102, v138);
        if ((_DWORD)v68 != 1)
        {
          v84 = v67 + 32;
          v85 = 32 * v68 - 32;
          do
          {
            sub_1C4EC4460((uint64_t)&v126, (uint64_t)&v102);
            sub_1C4EC4460((uint64_t)&v122, v84);
            sub_1C4EC4460((uint64_t)&v118, (uint64_t)&v126);
            sub_1C4EC4460((uint64_t)&v134, (uint64_t)&v122);
            llvm::ObjectSizeOffsetVisitor::combineSizeOffset((uint64_t)a1, (uint64_t)&v118, (uint64_t)&v134, (uint64_t)&v130);
            if (v137 >= 0x41 && v136)
              MEMORY[0x1CAA32F9C](v136, 0x1000C8000313F17);
            if (v135 >= 0x41 && v134)
              MEMORY[0x1CAA32F9C](v134, 0x1000C8000313F17);
            if (DWORD2(v120) >= 0x41 && (_QWORD)v120)
              MEMORY[0x1CAA32F9C](v120, 0x1000C8000313F17);
            if (v119 >= 0x41 && v118)
              MEMORY[0x1CAA32F9C](v118, 0x1000C8000313F17);
            sub_1C4EC4534((uint64_t)&v102, (uint64_t)&v130);
            if (v133 >= 0x41 && v132)
              MEMORY[0x1CAA32F9C](v132, 0x1000C8000313F17);
            if (v131 >= 0x41 && v130)
              MEMORY[0x1CAA32F9C](v130, 0x1000C8000313F17);
            if (v125 >= 0x41 && v124)
              MEMORY[0x1CAA32F9C](v124, 0x1000C8000313F17);
            if (v123 >= 0x41 && v122)
              MEMORY[0x1CAA32F9C](v122, 0x1000C8000313F17);
            if (v129 >= 0x41 && v128)
              MEMORY[0x1CAA32F9C](v128, 0x1000C8000313F17);
            if (v127 >= 0x41 && v126)
              MEMORY[0x1CAA32F9C](v126, 0x1000C8000313F17);
            v84 += 32;
            v85 -= 32;
          }
          while (v85);
        }
        v107 = v103;
        v106 = v102;
        v109 = v105;
        v108 = v104;
        v103 = 0;
        v105 = 0;
        v118 = a3;
        v78 = (void **)(sub_1C61A40CC((_DWORD *)a5, &v118) + 1);
        sub_1C4EC47CC(v78, (uint64_t)&v106);
        sub_1C4EC4460(v101, (uint64_t)v78);
        if (v109 >= 0x41 && v108)
          MEMORY[0x1CAA32F9C](v108, 0x1000C8000313F17);
        if (v107 >= 0x41 && v106)
          MEMORY[0x1CAA32F9C](v106, 0x1000C8000313F17);
        if (v105 >= 0x41 && v104)
          MEMORY[0x1CAA32F9C](v104, 0x1000C8000313F17);
        if (v103 < 0x41)
          goto LABEL_109;
        v77 = v102;
        if (!v102)
          goto LABEL_109;
      }
      else
      {
LABEL_100:
        LODWORD(v119) = 1;
        v118 = 0;
        DWORD2(v120) = 1;
        *(_QWORD *)&v120 = 0;
        v134 = a3;
        v76 = sub_1C61A40CC((_DWORD *)a5, &v134) + 1;
        sub_1C4EC4534((uint64_t)v76, (uint64_t)&v118);
        sub_1C4EC4460(v101, (uint64_t)v76);
        if (DWORD2(v120) >= 0x41 && (_QWORD)v120)
          MEMORY[0x1CAA32F9C](v120, 0x1000C8000313F17);
        if (v119 < 0x41)
          goto LABEL_109;
        v77 = v118;
        if (!v118)
          goto LABEL_109;
      }
      MEMORY[0x1CAA32F9C](v77, 0x1000C8000313F17);
LABEL_109:
      v79 = (char *)v138;
      if ((_DWORD)v139)
      {
        v80 = 32 * v139;
        do
        {
          v81 = &v79[v80];
          if (*(_DWORD *)&v79[v80 - 8] >= 0x41u)
          {
            v82 = *((_QWORD *)v81 - 2);
            if (v82)
              MEMORY[0x1CAA32F9C](v82, 0x1000C8000313F17);
          }
          if (*((_DWORD *)v81 - 6) >= 0x41u)
          {
            v83 = *((_QWORD *)v81 - 4);
            if (v83)
              MEMORY[0x1CAA32F9C](v83, 0x1000C8000313F17);
          }
          v80 -= 32;
        }
        while (v80);
        v79 = (char *)v138;
      }
      if (v79 != (char *)&v140)
        free(v79);
      return;
    }
  }
  v23 = *(_QWORD *)(v18 + 64);
  if (v23 && (*(_BYTE *)(v23 + 17) & 0x30) != 0)
    goto LABEL_19;
  v24 = *(_DWORD *)(v18 + 20);
  if (v24 < 0 && (v50 = v18 - 32 * (v24 & 0x7FFFFFF), v53 = *(_QWORD *)(v50 - 8), v51 = v50 - 8, (v52 = v53) != 0))
  {
    v54 = -v52;
    while (1)
    {
      v55 = *(_DWORD *)(*(_QWORD *)(v51 + v54) + 8);
      v56 = v55 > 7;
      v57 = (1 << v55) & 0x83;
      v58 = v56 || v57 == 0;
      if (v58)
        break;
      v54 += 16;
      if (!v54)
        goto LABEL_25;
    }
  }
  else
  {
LABEL_25:
    if ((llvm::CallBase::hasFnAttrOnCalledFunction(v18, 45) & 1) != 0)
      goto LABEL_19;
    hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction(v18, 44);
    if ((hasFnAttrOnCalledFunction & 1) != 0)
      goto LABEL_19;
    v21 = *(unsigned __int8 *)(v18 + 16);
  }
LABEL_28:
  if (a4 && v21 == 61)
  {
    v25 = *((_QWORD *)a1 + 3);
    v26 = *(_QWORD *)(a2 - 32);
    v138 = *(_QWORD *)(v18 - 32);
    v139 = -1;
    v140 = 0u;
    v141 = 0u;
    v118 = v26;
    v119 = -1;
    v120 = 0u;
    v121 = 0u;
    v27 = llvm::AAResults::alias(v25, (uint64_t)&v138, (uint64_t)&v118);
    if (!v27)
      goto LABEL_19;
    if (v27 == 3)
    {
      v86 = *(llvm::Value **)(v18 - 64);
      if (*(_BYTE *)(*(_QWORD *)v86 + 8) == 15)
      {
        llvm::ObjectSizeOffsetVisitor::compute(&v114, a1, v86);
        v138 = a3;
        v87 = (void **)(sub_1C61A40CC((_DWORD *)a5, &v138) + 1);
        sub_1C4EC47CC(v87, (uint64_t)&v114);
        sub_1C4EC4460(a7, (uint64_t)v87);
        if (v117 >= 0x41 && v116)
          MEMORY[0x1CAA32F9C](v116, 0x1000C8000313F17);
        if (v115 < 0x41)
          return;
        v88 = v114;
        if (!v114)
          return;
        goto LABEL_190;
      }
    }
LABEL_163:
    LODWORD(v139) = 1;
    v138 = 0;
    DWORD2(v140) = 1;
    *(_QWORD *)&v140 = 0;
    v118 = a3;
    v93 = sub_1C61A40CC((_DWORD *)a5, &v118) + 1;
    sub_1C4EC4534((uint64_t)v93, (uint64_t)&v138);
    sub_1C4EC4460(v101, (uint64_t)v93);
    if (DWORD2(v140) >= 0x41 && (_QWORD)v140)
      MEMORY[0x1CAA32F9C](v140, 0x1000C8000313F17);
    if (v139 < 0x41)
      return;
    v88 = v138;
    if (!v138)
      return;
LABEL_190:
    MEMORY[0x1CAA32F9C](v88, 0x1000C8000313F17);
    return;
  }
  v28 = v21 - 33;
  if (v28 > 0x33)
    goto LABEL_163;
  if (((1 << v28) & 0x8000000000041) == 0)
    goto LABEL_163;
  v29 = (uint64_t ***)*(a4 - 7);
  if (!v29)
    goto LABEL_163;
  if (*((_BYTE *)v29 + 16))
    goto LABEL_163;
  v30 = (uint64_t)v29[3];
  if (v30 != a4[6])
    goto LABEL_163;
  LODWORD(v134) = 0;
  v31 = (uint64_t *)*((_QWORD *)a1 + 1);
  if (!v31 || (*((_BYTE *)v29 + 33) & 0x20) != 0)
    goto LABEL_163;
  if ((*((_BYTE *)v29 + 23) & 0x10) != 0)
  {
    v32 = ***v29;
    v33 = *(_QWORD *)(v32 + 152);
    v34 = *(unsigned int *)(v32 + 168);
    if (!(_DWORD)v34)
      goto LABEL_48;
    LODWORD(v35) = (v34 - 1) & ((v29 >> 4) ^ (v29 >> 9));
    v36 = (uint64_t ****)(v33 + 16 * v35);
    v37 = *v36;
    if (*v36 != v29)
    {
      v38 = 1;
      while (v37 != (uint64_t ***)-4096)
      {
        v39 = v35 + v38++;
        v35 = v39 & (v34 - 1);
        v37 = *(uint64_t ****)(v33 + 16 * v35);
        if (v37 == v29)
        {
          v36 = (uint64_t ****)(v33 + 16 * v35);
          goto LABEL_49;
        }
      }
LABEL_48:
      v36 = (uint64_t ****)(v33 + 16 * v34);
    }
LABEL_49:
    v40 = v36[1];
    v43 = (size_t)*v40;
    v41 = (char *)(v40 + 2);
    v42 = v43;
  }
  else
  {
    v42 = 0;
    v41 = &byte_1C871356D;
  }
  v100 = *v31;
  if (!llvm::TargetLibraryInfoImpl::getLibFunc(hasFnAttrOnCalledFunction, v41, v42, &v134))
    goto LABEL_163;
  v44 = v30;
  v45 = v134;
  if (!llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc(v100, v44, v134))
    goto LABEL_163;
  v46 = (_QWORD *)*((_QWORD *)a1 + 1);
  if (((*(_QWORD *)(v46[1] + 8 * (v45 >> 6)) >> v45) & 1) != 0
    || ((*(unsigned __int8 *)(*v46 + (v45 >> 2)) >> (2 * (v45 & 3))) & 3) == 0
    || (_DWORD)v45 != 346)
  {
    goto LABEL_163;
  }
  v47 = *((_QWORD *)a1 + 3);
  v48 = *(_QWORD *)(a2 - 32);
  v138 = v17[-4 * (*((_DWORD *)a4 - 1) & 0x7FFFFFF)];
  v139 = -1;
  v140 = 0u;
  v141 = 0u;
  v118 = v48;
  v119 = -1;
  v120 = 0u;
  v121 = 0u;
  v49 = llvm::AAResults::alias(v47, (uint64_t)&v138, (uint64_t)&v118);
  if (!v49)
    goto LABEL_19;
  if (v49 != 3)
    goto LABEL_163;
  v89 = llvm::ConstantInt::get((llvm::ConstantInt *)*(a4 - 3), 0, 0);
  v90 = *(const llvm::DataLayout **)a1;
  v91 = (uint64_t *)sub_1C4F904E0(a2);
  if (!v91)
    goto LABEL_163;
  isImpliedCondition = llvm::isImpliedCondition(v91, 32, (uint64_t)(a4 - 3), (uint64_t)v89, v90, v92 & 1, 0);
  if (isImpliedCondition < 0x100u)
    goto LABEL_163;
  if (!(_BYTE)isImpliedCondition)
    goto LABEL_163;
  v95 = v17[-4 * (*((_DWORD *)a4 - 1) & 0x7FFFFFF) + 8];
  if (!v95 || *(_BYTE *)(v95 + 16) != 16)
    goto LABEL_163;
  v96 = *(_DWORD *)(v95 + 32);
  LODWORD(v139) = v96;
  if (v96 <= 0x40)
  {
    v138 = 0;
    v111 = v96;
    goto LABEL_182;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v138, 0, 0);
  v98 = *(unsigned int *)(v95 + 32);
  v111 = v98;
  if (v98 <= 0x40)
  {
LABEL_182:
    v110 = *(void **)(v95 + 24);
  }
  else
  {
    v99 = ((unint64_t)(v98 + 63) >> 3) & 0x3FFFFFF8;
    v110 = (void *)operator new[]();
    memcpy(v110, *(const void **)(v95 + 24), v99);
  }
  v113 = v139;
  v112 = v138;
  LODWORD(v139) = 0;
  v118 = a3;
  v97 = (void **)(sub_1C61A40CC((_DWORD *)a5, &v118) + 1);
  sub_1C4EC47CC(v97, (uint64_t)&v110);
  sub_1C4EC4460(v101, (uint64_t)v97);
  if (v113 >= 0x41 && v112)
    MEMORY[0x1CAA32F9C](v112, 0x1000C8000313F17);
  if (v111 >= 0x41)
  {
    v88 = (uint64_t)v110;
    if (v110)
      goto LABEL_190;
  }
}

llvm::ObjectSizeOffsetVisitor *llvm::ObjectSizeOffsetVisitor::visitLoadInst@<X0>(llvm::ObjectSizeOffsetVisitor *this@<X0>, llvm::LoadInst *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t i;
  unsigned int v4;
  _QWORD v5[42];

  v5[41] = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 3))
  {
    v5[0] = 1;
    for (i = 1; i != 41; i += 5)
      v5[i] = -4096;
    v4 = 0;
    llvm::ObjectSizeOffsetVisitor::findLoadSizeOffset(this, (uint64_t)a2, *((_QWORD *)a2 + 5), (_QWORD *)a2 + 3, (uint64_t)v5, &v4, a3);
    return (llvm::ObjectSizeOffsetVisitor *)sub_1C61A4558((uint64_t)v5);
  }
  else
  {
    *(_DWORD *)(a3 + 8) = 1;
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 24) = 1;
    *(_QWORD *)(a3 + 16) = 0;
  }
  return this;
}

void llvm::ObjectSizeOffsetVisitor::combineSizeOffset(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v4;
  BOOL v6;
  uint64_t v7;
  unsigned int v8;
  void *v9;
  void *v10;
  void *__s2;
  unsigned int v14;
  void *__s1;
  unsigned int v16;

  v4 = *(_DWORD *)(a2 + 8) >= 2u && *(_DWORD *)(a2 + 24) >= 2u;
  if (!v4 || (*(_DWORD *)(a3 + 8) >= 2u ? (v6 = *(_DWORD *)(a3 + 24) > 1u) : (v6 = 0), !v6))
  {
    *(_DWORD *)(a4 + 8) = 1;
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 24) = 1;
    *(_QWORD *)(a4 + 16) = 0;
    return;
  }
  if (*(_BYTE *)(a1 + 16))
  {
    if (*(_BYTE *)(a1 + 16) == 2)
    {
      sub_1C4EC0DB4(a2, (llvm::APInt *)&__s1);
      sub_1C4EC0DB4(a3, (llvm::APInt *)&__s2);
      if ((int)llvm::APInt::compareSigned((llvm::APInt *)&__s1, (const llvm::APInt *)&__s2) <= 0)
        v7 = a3;
      else
        v7 = a2;
    }
    else
    {
      sub_1C4EC0DB4(a2, (llvm::APInt *)&__s1);
      sub_1C4EC0DB4(a3, (llvm::APInt *)&__s2);
      if ((int)llvm::APInt::compareSigned((llvm::APInt *)&__s1, (const llvm::APInt *)&__s2) >= 0)
        v7 = a3;
      else
        v7 = a2;
    }
    sub_1C4EC4460(a4, v7);
    if (v14 >= 0x41 && __s2)
      MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
    if (v16 < 0x41 || !__s1)
      return;
LABEL_36:
    MEMORY[0x1CAA32F9C]();
    return;
  }
  sub_1C4EC0DB4(a2, (llvm::APInt *)&__s1);
  sub_1C4EC0DB4(a3, (llvm::APInt *)&__s2);
  v8 = v16;
  if (v16 > 0x40)
  {
    v9 = __s1;
    v10 = __s2;
    if (!memcmp(__s1, __s2, (((unint64_t)v16 + 63) >> 3) & 0x3FFFFFF8))
      goto LABEL_19;
LABEL_30:
    *(_DWORD *)(a4 + 8) = 1;
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 24) = 1;
    *(_QWORD *)(a4 + 16) = 0;
    goto LABEL_31;
  }
  v9 = __s1;
  v10 = __s2;
  if (__s1 != __s2)
    goto LABEL_30;
LABEL_19:
  sub_1C4EC4460(a4, a2);
LABEL_31:
  if (v14 >= 0x41 && v10)
    MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
  if (v8 >= 0x41 && v9)
    goto LABEL_36;
}

uint64_t *llvm::ObjectSizeOffsetVisitor::visitPHINode@<X0>(llvm::ObjectSizeOffsetVisitor *this@<X0>, llvm::PHINode *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  llvm::Value **v7;
  uint64_t *result;
  llvm::Value **v9;
  uint64_t v10;
  llvm::Value *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;

  v5 = *((_DWORD *)a2 + 5);
  if ((v5 & 0x40000000) != 0)
  {
    v7 = (llvm::Value **)*((_QWORD *)a2 - 1);
    v6 = v5 & 0x7FFFFFF;
  }
  else
  {
    v6 = v5 & 0x7FFFFFF;
    v7 = (llvm::Value **)((char *)a2 - 32 * v6);
  }
  result = llvm::ObjectSizeOffsetVisitor::compute(&v12, this, *v7);
  if (v6 != 1)
  {
    v9 = v7 + 4;
    v10 = 32 * v6 - 32;
    do
    {
      sub_1C4EC4460((uint64_t)&v16, (uint64_t)&v12);
      v11 = *v9;
      sub_1C4EC4460((uint64_t)&v28, (uint64_t)&v16);
      llvm::ObjectSizeOffsetVisitor::compute(&v24, this, v11);
      llvm::ObjectSizeOffsetVisitor::combineSizeOffset((uint64_t)this, (uint64_t)&v28, (uint64_t)&v24, (uint64_t)&v20);
      if (v27 >= 0x41 && v26)
        MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
      if (v25 >= 0x41 && v24)
        MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
      if (v31 >= 0x41 && v30)
        MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
      if (v29 >= 0x41 && v28)
        MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
      result = (uint64_t *)sub_1C4EC4534((uint64_t)&v12, (uint64_t)&v20);
      if (v23 >= 0x41)
      {
        result = v22;
        if (v22)
          result = (uint64_t *)MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
      }
      if (v21 >= 0x41)
      {
        result = v20;
        if (v20)
          result = (uint64_t *)MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
      }
      if (v19 >= 0x41)
      {
        result = v18;
        if (v18)
          result = (uint64_t *)MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
      }
      if (v17 >= 0x41)
      {
        result = v16;
        if (v16)
          result = (uint64_t *)MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
      }
      v9 += 4;
      v10 -= 32;
    }
    while (v10);
  }
  *(_DWORD *)(a3 + 8) = v13;
  *(_QWORD *)a3 = v12;
  *(_DWORD *)(a3 + 24) = v15;
  *(_QWORD *)(a3 + 16) = v14;
  return result;
}

void llvm::ObjectSizeOffsetVisitor::visitInstruction(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = 0;
}

llvm::ValueHandleBase *llvm::ObjectSizeOffsetEvaluator::compute_(llvm::ObjectSizeOffsetEvaluator *this, llvm::Value *a2)
{
  __int128 v4;
  const llvm::APInt *v5;
  llvm::ValueHandleBase *v6;
  const llvm::APInt *v7;
  llvm::Value *v9;
  uint64_t v10;
  char *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  llvm::ValueHandleBase *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  int32x2_t *v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  int32x2_t *v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  __int128 v50;
  unsigned __int8 *v51;
  void *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  _OWORD v56[2];
  uint64_t v57;
  unsigned int v58;
  _BYTE *v59;
  _BYTE *v60;
  uint64_t v61;
  int v62;
  _BYTE v63[72];
  llvm::Value *v64;
  unsigned __int8 *v65;

  v4 = *((_OWORD *)this + 21);
  v56[0] = *(_OWORD *)this;
  v56[1] = v4;
  v58 = 1;
  v57 = 0;
  v59 = v63;
  v60 = v63;
  v61 = 8;
  v62 = 0;
  llvm::ObjectSizeOffsetVisitor::compute(&v52, (llvm::DataLayout **)v56, a2);
  if (v53 >= 2 && v55 >= 2)
  {
    v6 = llvm::ConstantInt::get(*((llvm::ConstantInt **)this + 2), (llvm::LLVMContext *)&v52, v5);
    llvm::ConstantInt::get(*((llvm::ConstantInt **)this + 2), (llvm::LLVMContext *)&v54, v7);
    goto LABEL_4;
  }
  v9 = llvm::Value::stripPointerCasts(a2);
  v64 = v9;
  v11 = (char *)this + 216;
  v10 = *((_QWORD *)this + 27);
  v49 = 0;
  if (sub_1C61A45F4(v10, *((_DWORD *)this + 58), (uint64_t)v9, &v49)
    && v49 != *((_QWORD *)this + 27) + 56 * *((unsigned int *)this + 58))
  {
    v6 = *(llvm::ValueHandleBase **)(v49 + 24);
    goto LABEL_4;
  }
  v49 = (uint64_t)this + 24;
  v50 = *(_OWORD *)((char *)this + 72);
  llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)this + 6, &v51);
  if (v9 && *((unsigned __int8 *)v9 + 16) >= 0x1Cu)
  {
    *((_QWORD *)this + 9) = *((_QWORD *)v9 + 5);
    *((_QWORD *)this + 10) = (char *)v9 + 24;
    v12 = (unsigned __int8 *)*((_QWORD *)v9 + 6);
    v65 = v12;
    if (v12)
    {
      llvm::MetadataTracking::track((uint64_t)&v65, v12, 2);
      v13 = v65;
    }
    else
    {
      v13 = 0;
    }
    sub_1C4774EF4((uint64_t)this + 24, 0, (uint64_t)v13);
    if (v65)
      llvm::MetadataTracking::untrack((uint64_t)&v65, v65);
  }
  sub_1C4774094((llvm::ObjectSizeOffsetEvaluator *)((char *)this + 240), (uint64_t)v9);
  if (!v14)
    goto LABEL_22;
  v16 = *((unsigned __int8 *)v9 + 16);
  if (v16 == 62)
    goto LABEL_26;
  if (v16 == 5)
  {
    if (*((_WORD *)v9 + 9) == 34)
    {
LABEL_26:
      v17 = llvm::ObjectSizeOffsetEvaluator::visitGEPOperator(this, v9);
LABEL_29:
      v6 = (llvm::ValueHandleBase *)v17;
      v15 = v18;
      goto LABEL_30;
    }
  }
  else if (v16 >= 0x1C)
  {
    v17 = sub_1C61A3954((uint64_t)this, (uint64_t)v9);
    goto LABEL_29;
  }
LABEL_22:
  v6 = 0;
  v15 = 0;
LABEL_30:
  v19 = sub_1C61A4690((uint64_t)v11, (uint64_t *)&v64);
  v20 = v19;
  v21 = (llvm::ValueHandleBase *)v19[3];
  if (v21 != v6)
  {
    if (v21 && v21 != (llvm::ValueHandleBase *)-8192 && v21 != (llvm::ValueHandleBase *)-4096)
    {
      v25 = v19[1] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v25 = v19[2];
      v26 = (unint64_t *)v19[2];
      if (v26)
      {
        *v26 = *v26 & 7 | v25;
      }
      else
      {
        v27 = v19[3];
        v28 = ***(int32x2_t ****)v27;
        v29 = (unint64_t)v28[303];
        if (v29 <= v25)
        {
          v30 = v28[305].u32[0];
          if (v29 + 16 * v30 > v25)
          {
            v31 = v30 - 1;
            LODWORD(v32) = v31 & ((v27 >> 4) ^ (v27 >> 9));
            v33 = (uint64_t *)(v29 + 16 * v32);
            v34 = *v33;
            if (v27 == *v33)
            {
LABEL_61:
              *v33 = -8192;
              v28[304] = vadd_s32(v28[304], (int32x2_t)0x1FFFFFFFFLL);
              v27 = v19[3];
            }
            else
            {
              v35 = 1;
              while (v34 != -4096)
              {
                v36 = v32 + v35++;
                v32 = v36 & v31;
                v34 = *(_QWORD *)(v29 + 16 * v32);
                if (v27 == v34)
                {
                  v33 = (uint64_t *)(v29 + 16 * v32);
                  goto LABEL_61;
                }
              }
            }
            *(_BYTE *)(v27 + 17) &= ~1u;
          }
        }
      }
    }
    v19[3] = v6;
    if (v6 != (llvm::ValueHandleBase *)-8192 && v6 != (llvm::ValueHandleBase *)-4096 && v6)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v19 + 1));
  }
  v22 = v20[6];
  if (v22 != v15)
  {
    if (v22 && v22 != -8192 && v22 != -4096)
    {
      v37 = v20[4] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v37 = v20[5];
      v38 = (unint64_t *)v20[5];
      if (v38)
      {
        *v38 = *v38 & 7 | v37;
      }
      else
      {
        v39 = v20[6];
        v40 = ***(int32x2_t ****)v39;
        v41 = (unint64_t)v40[303];
        if (v41 <= v37)
        {
          v42 = v40[305].u32[0];
          if (v41 + 16 * v42 > v37)
          {
            v43 = v42 - 1;
            LODWORD(v44) = v43 & ((v39 >> 4) ^ (v39 >> 9));
            v45 = (uint64_t *)(v41 + 16 * v44);
            v46 = *v45;
            if (v39 == *v45)
            {
LABEL_73:
              *v45 = -8192;
              v40[304] = vadd_s32(v40[304], (int32x2_t)0x1FFFFFFFFLL);
              v39 = v20[6];
            }
            else
            {
              v47 = 1;
              while (v46 != -4096)
              {
                v48 = v44 + v47++;
                v44 = v48 & v43;
                v46 = *(_QWORD *)(v41 + 16 * v44);
                if (v39 == v46)
                {
                  v45 = (uint64_t *)(v41 + 16 * v44);
                  goto LABEL_73;
                }
              }
            }
            *(_BYTE *)(v39 + 17) &= ~1u;
          }
        }
      }
    }
    v20[6] = v15;
    if (v15 != -8192 && v15 != -4096 && v15)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v20 + 4));
  }
  v23 = v49;
  if ((_QWORD)v50)
  {
    sub_1C4D8AE2C(v49, v50, *((uint64_t *)&v50 + 1));
    v23 = v49;
  }
  else
  {
    *(_QWORD *)(v49 + 48) = 0;
    *(_QWORD *)(v23 + 56) = 0;
  }
  v65 = v51;
  if (v51)
  {
    llvm::MetadataTracking::track((uint64_t)&v65, v51, 2);
    v24 = v65;
  }
  else
  {
    v24 = 0;
  }
  sub_1C4774EF4(v23, 0, (uint64_t)v24);
  if (v65)
    llvm::MetadataTracking::untrack((uint64_t)&v65, v65);
  if (v51)
    llvm::MetadataTracking::untrack((uint64_t)&v51, v51);
LABEL_4:
  if (v55 >= 0x41 && v54)
    MEMORY[0x1CAA32F9C](v54, 0x1000C8000313F17);
  if (v53 >= 0x41 && v52)
    MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
  if (v60 != v59)
    free(v60);
  if (v58 >= 0x41 && v57)
    MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
  return v6;
}

uint64_t sub_1C4EC4040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;

  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    v8 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72)
                                                                                                  + 88))(*(_QWORD *)(a1 + 72), a2, a3, a5, a6);
    if (v8)
      v9 = v8[16] >= 0x1Cu;
    else
      v9 = 0;
    if (!v9)
      return (uint64_t)v8;
    (*(void (**)(_QWORD, unsigned __int8 *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v8, a4, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v10 = *(unsigned int *)(a1 + 8);
    if (!(_DWORD)v10)
      return (uint64_t)v8;
    v12 = *(_QWORD *)a1;
    v13 = *(_QWORD *)a1 + 16 * v10;
    v14 = (unsigned __int8 **)(v8 + 48);
    while (1)
    {
      v15 = *(_DWORD *)v12;
      v16 = *(unsigned __int8 **)(v12 + 8);
      if (v16)
      {
        if (!v15)
        {
          v18 = *(unsigned __int8 **)(v12 + 8);
          llvm::MetadataTracking::track((uint64_t)&v18, v16, 2);
LABEL_24:
          if (&v18 == v14)
          {
            if (v18)
              llvm::MetadataTracking::untrack((uint64_t)&v18, v18);
          }
          else
          {
            if (*v14)
              llvm::MetadataTracking::untrack((uint64_t)(v8 + 48), *v14);
            v17 = v18;
            *v14 = v18;
            if (v17)
              llvm::MetadataTracking::retrack((uint64_t)&v18, v17, (uint64_t)(v8 + 48));
          }
          goto LABEL_21;
        }
      }
      else
      {
        if (!*v14 && (v8[23] & 0x20) == 0)
          goto LABEL_21;
        if (!v15)
        {
          v18 = 0;
          goto LABEL_24;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v8, v15, (llvm::MDNode *)v16);
LABEL_21:
      v12 += 16;
      if (v12 == v13)
        return (uint64_t)v8;
    }
  }
  return sub_1C4774D04((uint64_t *)a1, 17, (_QWORD *)a2, a3, a4, a5, a6);
}

unsigned __int8 *llvm::ObjectSizeOffsetEvaluator::visitCallBase(llvm::ObjectSizeOffsetEvaluator *this, llvm::CallBase *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _BYTE v11[32];
  __int16 v12;
  _BYTE v13[8];
  unsigned int v14;
  unsigned int v15;
  char v16;

  sub_1C4EC01DC((uint64_t)v13, (uint64_t)a2, *((uint64_t **)this + 1));
  v4 = 0;
  if (v16)
  {
    if (v13[0] != 32)
    {
      v5 = (unsigned __int8 *)*((_QWORD *)a2 + 4 * v14 + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
      v6 = *((_QWORD *)this + 25);
      v12 = 257;
      v4 = sub_1C4773690((uint64_t *)this + 3, v5, v6, (uint64_t)v11);
      if ((v15 & 0x80000000) == 0)
      {
        v7 = (unsigned __int8 *)*((_QWORD *)a2 + 4 * v15 + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
        v8 = *((_QWORD *)this + 25);
        v12 = 257;
        v9 = sub_1C4773690((uint64_t *)this + 3, v7, v8, (uint64_t)v11);
        v12 = 257;
        return (unsigned __int8 *)sub_1C4EC4040((uint64_t)this + 24, (uint64_t)v4, (uint64_t)v9, (uint64_t)v11, 0, 0);
      }
    }
  }
  return v4;
}

uint64_t llvm::ObjectSizeOffsetEvaluator::visitExtractElementInst()
{
  return 0;
}

uint64_t llvm::ObjectSizeOffsetEvaluator::visitExtractValueInst()
{
  return 0;
}

uint64_t llvm::ObjectSizeOffsetEvaluator::visitIntToPtrInst()
{
  return 0;
}

uint64_t llvm::ObjectSizeOffsetEvaluator::visitLoadInst()
{
  return 0;
}

uint64_t llvm::ObjectSizeOffsetEvaluator::visitInstruction()
{
  return 0;
}

uint64_t *sub_1C4EC4314(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm::ValueHandleBase *v5;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 56 * v2;
    v5 = (llvm::ValueHandleBase *)(v3 + 8);
    do
    {
      if ((*((_QWORD *)v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v5 = sub_1C61A406C(v5);
      v5 = (llvm::ValueHandleBase *)((char *)v5 + 56);
      v4 -= 56;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

uint64_t sub_1C4EC4380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  void *v7;
  unsigned int v8;
  void *v9;

  v6 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 8) = v6;
  if (v6 > 0x40)
  {
    v7 = (void *)operator new[]();
    *(_QWORD *)a1 = v7;
    memcpy(v7, *(const void **)a2, (((unint64_t)*(unsigned int *)(a1 + 8) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
  }
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a1 + 24) = v8;
  if (v8 > 0x40)
  {
    v9 = (void *)operator new[]();
    *(_QWORD *)(a1 + 16) = v9;
    memcpy(v9, *(const void **)a3, (((unint64_t)*(unsigned int *)(a1 + 24) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)a3;
  }
  return a1;
}

uint64_t sub_1C4EC4460(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  void *v5;
  unsigned int v6;
  void *v7;

  v4 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 8) = v4;
  if (v4 > 0x40)
  {
    v5 = (void *)operator new[]();
    *(_QWORD *)a1 = v5;
    memcpy(v5, *(const void **)a2, (((unint64_t)*(unsigned int *)(a1 + 8) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
  }
  v6 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 24) = v6;
  if (v6 > 0x40)
  {
    v7 = (void *)operator new[]();
    *(_QWORD *)(a1 + 16) = v7;
    memcpy(v7, *(const void **)(a2 + 16), (((unint64_t)*(unsigned int *)(a1 + 24) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t sub_1C4EC4534(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (*(_DWORD *)(a1 + 8) >= 0x41u && *(_QWORD *)a1)
    MEMORY[0x1CAA32F9C]();
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  if (*(_DWORD *)(a1 + 24) >= 0x41u)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4)
      MEMORY[0x1CAA32F9C](v4, 0x1000C8000313F17);
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t sub_1C4EC45D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[320];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = (v5 + 1);
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 8)
    {
      v16 = a2;
      *(_QWORD *)(a1 + 8) = operator new(40 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v16;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C61A42AC(a1, v6, v6 + 40 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v18;
  do
  {
    v10 = a1 + v8;
    v11 = *(_QWORD *)(a1 + v8 + 8);
    if ((v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = v11;
      *((_DWORD *)v9 + 4) = *(_DWORD *)(v10 + 24);
      *((_QWORD *)v9 + 1) = *(_QWORD *)(v10 + 16);
      *(_DWORD *)(v10 + 24) = 0;
      *((_DWORD *)v9 + 8) = *(_DWORD *)(v10 + 40);
      *((_QWORD *)v9 + 3) = *(_QWORD *)(v10 + 32);
      *(_DWORD *)(v10 + 40) = 0;
      v9 += 40;
      if (*(_DWORD *)(v10 + 24) >= 0x41u)
      {
        v17 = v8;
        v12 = a2;
        v13 = *(_QWORD *)(v10 + 16);
        if (v13)
          MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
        a2 = v12;
        v8 = v17;
      }
    }
    v8 += 40;
  }
  while (v8 != 320);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v14 = a2;
    *(_QWORD *)(a1 + 8) = operator new(40 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v14;
  }
  return sub_1C61A42AC(a1, (uint64_t)v18, (uint64_t)v9);
}

void **sub_1C4EC47CC(void **this, uint64_t a2)
{
  uint64_t v5;
  void **v6;
  uint64_t v7;

  if (*((_DWORD *)this + 2) > 0x40u || *(_DWORD *)(a2 + 8) > 0x40u)
  {
    if (this != (void **)a2)
    {
      llvm::APInt::reallocate((uint64_t)this, *(_DWORD *)(a2 + 8));
      v5 = *((unsigned int *)this + 2);
      if (v5 <= 0x40)
        *this = *(void **)a2;
      else
        memcpy(*this, *(const void **)a2, ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8);
    }
  }
  else
  {
    *this = *(void **)a2;
    *((_DWORD *)this + 2) = *(_DWORD *)(a2 + 8);
  }
  if (*((_DWORD *)this + 6) > 0x40u || *(_DWORD *)(a2 + 24) > 0x40u)
  {
    if (this != (void **)a2)
    {
      v6 = this + 2;
      llvm::APInt::reallocate((uint64_t)(this + 2), *(_DWORD *)(a2 + 24));
      v7 = *((unsigned int *)this + 6);
      if (v7 <= 0x40)
        *v6 = *(void **)(a2 + 16);
      else
        memcpy(*v6, *(const void **)(a2 + 16), ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8);
    }
  }
  else
  {
    this[2] = *(void **)(a2 + 16);
    *((_DWORD *)this + 6) = *(_DWORD *)(a2 + 24);
  }
  return this;
}

void sub_1C4EC48E8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4EC48FC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8139538;
  return result;
}

void sub_1C4EC4920(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8139538;
}

uint64_t sub_1C4EC4938(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

void sub_1C4EC4944()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4EC4958(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8139580;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4EC498C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8139580;
  a2[1] = v2;
  return result;
}

_QWORD *sub_1C4EC49A8(uint64_t a1, uint64_t *a2)
{
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)(*(_QWORD *)(a1 + 8) + 352), *a2);
}

uint64_t sub_1C4EC49B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 120) = &unk_1E8135C10;
  *(_QWORD *)(a1 + 8) = 0x200000000;
  *(_QWORD *)(a1 + 64) = a2;
  *(_QWORD *)(a1 + 72) = a1 + 120;
  *(_QWORD *)(a1 + 136) = &off_1E8167568;
  *(_QWORD *)(a1 + 80) = a1 + 136;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = 512;
  *(_BYTE *)(a1 + 102) = 7;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a3 + 8);
  v5 = *(_QWORD *)(a4 + 32);
  if (v5)
  {
    if (v5 == a4 + 8)
    {
      *(_QWORD *)(a1 + 168) = a1 + 144;
      (*(void (**)(_QWORD))(**(_QWORD **)(a4 + 32) + 24))(*(_QWORD *)(a4 + 32));
    }
    else
    {
      *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 168) = 0;
  }
  return a1;
}

_QWORD *sub_1C4EC4A88(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(56 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61A47B8((llvm::ValueHandleBase *)a1, v4, &v4[7 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 56 * v10;
    do
    {
      *result = -4096;
      result += 7;
      v11 -= 56;
    }
    while (v11);
  }
  return result;
}

unint64_t *sub_1C4EC4B4C(unint64_t *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;

  *result = 6;
  result[1] = 0;
  v2 = a2[2];
  result[2] = v2;
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
  {
    v4 = *a2 & 0xFFFFFFFFFFFFFFF8;
    result[1] = *(_QWORD *)v4;
    *(_QWORD *)v4 = result;
    *result = v4 | 6;
    v5 = (unint64_t *)result[1];
    if (v5)
      *v5 = *v5 & 7 | (unint64_t)(result + 1);
  }
  result[3] = 6;
  v6 = result + 3;
  result[4] = 0;
  v7 = (unint64_t)(result + 4);
  v8 = a2[5];
  result[5] = v8;
  if (v8 != -8192 && v8 != -4096 && v8 != 0)
  {
    v10 = a2[3] & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v7 = *(_QWORD *)v10;
    *(_QWORD *)v10 = v6;
    *v6 = v10 | 6;
    if (*(_QWORD *)v7)
      **(_QWORD **)v7 = **(_QWORD **)v7 & 7 | v7;
  }
  return result;
}

llvm::Value **sub_1C4EC4C18(uint64_t a1, llvm::DataLayout *a2, llvm::UndefValue **a3, uint64_t a4, uint64_t ****a5, uint64_t ****a6, llvm::Type *a7, uint64_t a8, const void *a9, std::string::size_type a10, unsigned __int8 a11, unsigned __int8 a12)
{
  llvm::DataLayout *v14;
  uint64_t v16;
  llvm::Type *v17;
  llvm::Constant *v18;
  unsigned int v19;
  _QWORD *v20;
  std::string::size_type v21;
  uint64_t v22;
  uint64_t ***VectorSplat;
  unint64_t v24;
  llvm::UndefValue *AggregateElement;
  BOOL v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  std::string::size_type v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  const char *v35;
  char v36;
  char v37;
  unint64_t v38;
  llvm::Type *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t ****v45;
  uint64_t ***v46;
  int v47;
  int v48;
  char isZeroValue;
  llvm::Constant *v50;
  llvm::StructType *v51;
  uint64_t **v52;
  uint64_t **v53;
  uint64_t **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t ***Mul;
  llvm::Value **v58;
  llvm::ConstantExpr *IntegerCast;
  unint64_t *v60;
  const void *v61;
  std::string::size_type v62;
  unint64_t v63;
  std::string *p_dst;
  uint64_t v65;
  llvm::DataLayout *v66;
  llvm::Constant *v67;
  uint64_t ****v68;
  uint64_t v69;
  unint64_t v70;
  std::string *v71;
  std::string::size_type v72;
  llvm::Value **v73;
  std::string *v74;
  std::string *v75;
  std::string::size_type v76;
  std::string *v77;
  std::string *v78;
  std::string::size_type v79;
  uint64_t v80;
  unint64_t v82;
  size_t __sz;
  unint64_t v84;
  uint64_t *v85;
  unsigned int v86;
  unint64_t v87;
  _QWORD *v88;
  std::string __dst;
  void *__p[2];
  std::string::size_type v91;
  _QWORD v92[4];
  __int16 v93;
  llvm::UndefValue **v94;
  uint64_t v95;

  v14 = a2;
  v94 = a3;
  v95 = a4;
  llvm::DataLayout::getIndexType(a2, a7);
  v18 = (llvm::Constant *)v16;
  v19 = *(_DWORD *)(v16 + 8);
  if ((v19 & 0xFE) == 0x12)
    v19 = *(_DWORD *)(**(_QWORD **)(v16 + 16) + 8);
  if (a5 == a6)
    return llvm::Constant::getNullValue(v18, v17);
  v20 = 0;
  v86 = a11 & ~a12;
  v87 = 0xFFFFFFFFFFFFFFFFLL >> -(v19 >> 8);
  v21 = a10;
  v22 = (a10 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((a10 | 7) != 0x17)
    v22 = a10 | 7;
  __sz = v22 + 1;
  v82 = (v22 + 1) | 0x8000000000000000;
  v85 = (uint64_t *)a1;
  do
  {
    VectorSplat = *a5;
    v24 = v95 & 0xFFFFFFFFFFFFFFF8;
    if ((v95 & 4) == 0 || !v24)
    {
      AggregateElement = *v94;
      if (*v94)
        v26 = *((_BYTE *)*v94 + 16) == 16;
      else
        v26 = 0;
      if (!v26)
        AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
      v29 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
      v27 = (unsigned int *)((char *)AggregateElement + 24);
      v28 = v29;
      if (v27[2] < 0x41)
        v28 = v27;
      v24 = *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * *v28);
    }
    v88 = v20;
    v30 = v21;
    sub_1C4768AD0((uint64_t)v14, v24);
    v32 = v31;
    v34 = v33 == 1;
    llvm::DataLayout::getAlignment((uint64_t)v14, v24);
    v37 = v36;
    if (v34)
    v38 = v87 & -(1 << v37) & ((1 << v37) + ((unint64_t)(v32 + 7) >> 3) - 1);
    if (*((unsigned __int8 *)VectorSplat + 16) > 0x14u || VectorSplat == 0)
    {
      v21 = v30;
      if ((*((_DWORD *)v18 + 2) & 0xFE) == 0x12 && ((_DWORD)(*VectorSplat)[1] & 0xFE) != 0x12)
      {
        v40 = (llvm::Type *)*((unsigned int *)v18 + 8);
        v93 = 257;
        VectorSplat = (uint64_t ***)llvm::IRBuilderBase::CreateVectorSplat(a1, v40, VectorSplat, (uint64_t)v92);
      }
      if (*VectorSplat == (uint64_t **)v18)
      {
        v20 = v88;
        goto LABEL_66;
      }
      if ((*((_BYTE *)VectorSplat + 23) & 0x10) == 0)
      {
        v62 = 0;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
        p_dst = &__dst;
        goto LABEL_62;
      }
      v41 = ***VectorSplat;
      v42 = *(_QWORD *)(v41 + 152);
      v43 = *(unsigned int *)(v41 + 168);
      if ((_DWORD)v43)
      {
        LODWORD(v44) = (v43 - 1) & ((VectorSplat >> 4) ^ (VectorSplat >> 9));
        v45 = (uint64_t ****)(v42 + 16 * v44);
        v46 = *v45;
        if (*v45 == VectorSplat)
          goto LABEL_53;
        v47 = 1;
        while (v46 != (uint64_t ***)-4096)
        {
          v48 = v44 + v47++;
          v44 = v48 & (v43 - 1);
          v46 = *(uint64_t ****)(v42 + 16 * v44);
          if (v46 == VectorSplat)
          {
            v45 = (uint64_t ****)(v42 + 16 * v44);
            goto LABEL_53;
          }
        }
      }
      v45 = (uint64_t ****)(v42 + 16 * v43);
LABEL_53:
      v60 = (unint64_t *)v45[1];
      v63 = *v60;
      v61 = v60 + 2;
      v62 = v63;
      if (v63 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_104;
      if (v62 >= 0x17)
      {
        v65 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v62 | 7) != 0x17)
          v65 = v62 | 7;
        v84 = v38;
        v66 = v14;
        v67 = v18;
        v68 = a6;
        v69 = v65 + 1;
        p_dst = (std::string *)operator new(v65 + 1);
        v70 = v69 | 0x8000000000000000;
        a6 = v68;
        v18 = v67;
        v14 = v66;
        v38 = v84;
        __dst.__r_.__value_.__l.__size_ = v62;
        __dst.__r_.__value_.__r.__words[2] = v70;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v62;
        p_dst = &__dst;
        if (!v62)
          goto LABEL_61;
      }
      memmove(p_dst, v61, v62);
LABEL_61:
      v21 = v30;
LABEL_62:
      p_dst->__r_.__value_.__s.__data_[v62] = 0;
      v71 = std::string::append(&__dst, ".c");
      v72 = v71->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      v91 = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      v93 = 260;
      v92[0] = __p;
      a1 = (uint64_t)v85;
      VectorSplat = (uint64_t ***)sub_1C4D8D514(v85, (unsigned __int8 *)VectorSplat, (uint64_t)v18, 1, (uint64_t)v92);
      v20 = v88;
      if (SHIBYTE(v91) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_66:
      if (v38 == 1)
        goto LABEL_79;
      v73 = llvm::ConstantInt::get(v18, v38, 0);
      if (!a9)
      {
        memset(&__dst, 0, sizeof(__dst));
        goto LABEL_76;
      }
      if (v21 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_104;
      if (v21 >= 0x17)
      {
        v74 = (std::string *)operator new(__sz);
        __dst.__r_.__value_.__l.__size_ = v21;
        __dst.__r_.__value_.__r.__words[2] = v82;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v21;
        v74 = &__dst;
        if (!v21)
          goto LABEL_75;
      }
      memmove(v74, a9, v21);
LABEL_75:
      v74->__r_.__value_.__s.__data_[v21] = 0;
LABEL_76:
      v75 = std::string::append(&__dst, ".idx");
      v76 = v75->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
      v91 = v76;
      v75->__r_.__value_.__l.__size_ = 0;
      v75->__r_.__value_.__r.__words[2] = 0;
      v75->__r_.__value_.__r.__words[0] = 0;
      v93 = 260;
      v92[0] = __p;
      VectorSplat = (uint64_t ***)sub_1C4EC4040(a1, (uint64_t)VectorSplat, (uint64_t)v73, (uint64_t)v92, 0, v86);
      if (SHIBYTE(v91) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        if (!v20)
        {
LABEL_51:
          v20 = VectorSplat;
          goto LABEL_96;
        }
        goto LABEL_80;
      }
LABEL_79:
      if (!v20)
        goto LABEL_51;
      goto LABEL_80;
    }
    isZeroValue = llvm::Constant::isZeroValue((llvm::Constant *)VectorSplat);
    v21 = v30;
    if ((isZeroValue & 1) != 0)
    {
      v20 = v88;
      goto LABEL_96;
    }
    v20 = v88;
    if ((v95 & 4) != 0 || (v51 = (llvm::StructType *)(v95 & 0xFFFFFFFFFFFFFFF8), (v95 & 0xFFFFFFFFFFFFFFF8) == 0))
    {
      if ((*((_DWORD *)v18 + 2) & 0xFE) == 0x12 && ((_DWORD)(*VectorSplat)[1] & 0xFE) != 0x12)
        VectorSplat = (uint64_t ***)llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v18 + 8) | ((unint64_t)(*((_DWORD *)v18 + 2) == 19) << 32)), (uint64_t)VectorSplat, v50);
      v58 = llvm::ConstantInt::get(v18, v38, 0);
      IntegerCast = (llvm::ConstantExpr *)llvm::ConstantExpr::getIntegerCast((llvm::ConstantExpr *)VectorSplat, (llvm::Type ***)v18, (llvm::Type *)1);
      Mul = (uint64_t ***)llvm::ConstantExpr::getMul(IntegerCast, (llvm::Constant *)v58, 0, (llvm::Constant *)v86);
      goto LABEL_50;
    }
    if (*((_BYTE *)VectorSplat + 16) != 16)
      VectorSplat = (uint64_t ***)llvm::Constant::getAggregateElement((llvm::Constant *)VectorSplat, 0);
    v54 = VectorSplat[3];
    v53 = (uint64_t **)(VectorSplat + 3);
    v52 = v54;
    if (*((_DWORD *)v53 + 2) < 0x41u)
      v52 = v53;
    v55 = *(unsigned int *)v52;
    v56 = *((_QWORD *)llvm::DataLayout::getStructLayout(v14, v51) + v55 + 2);
    if (v56)
    {
      Mul = (uint64_t ***)llvm::ConstantInt::get(v18, v56, 0);
LABEL_50:
      VectorSplat = Mul;
      if (!v88)
        goto LABEL_51;
LABEL_80:
      if (a9)
      {
        if (v21 > 0x7FFFFFFFFFFFFFF7)
LABEL_104:
          abort();
        if (v21 >= 0x17)
        {
          v77 = (std::string *)operator new(__sz);
          __dst.__r_.__value_.__l.__size_ = v21;
          __dst.__r_.__value_.__r.__words[2] = v82;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v21;
          v77 = &__dst;
          if (!v21)
          {
LABEL_88:
            v77->__r_.__value_.__s.__data_[v21] = 0;
            goto LABEL_89;
          }
        }
        memmove(v77, a9, v21);
        goto LABEL_88;
      }
      memset(&__dst, 0, sizeof(__dst));
LABEL_89:
      v78 = std::string::append(&__dst, ".offs");
      v79 = v78->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      v91 = v79;
      v78->__r_.__value_.__r.__words[0] = 0;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v93 = 260;
      v92[0] = __p;
      v80 = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t ***, _QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), v20, VectorSplat, 0, v86);
      if (!v80)
        v80 = sub_1C4774D04((uint64_t *)a1, 13, v20, (uint64_t)VectorSplat, (uint64_t)v92, 0, v86);
      if (SHIBYTE(v91) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v20 = (_QWORD *)v80;
    }
LABEL_96:
    a5 += 4;
    sub_1C4774E38((uint64_t)&v94);
  }
  while (a5 != a6);
  if (!v20)
    return llvm::Constant::getNullValue(v18, v17);
  return (llvm::Value **)v20;
}

uint64_t sub_1C4EC5330()
{
  __int128 v1;
  int v2;
  _DWORD *v3;

  v2 = 0;
  v3 = &v2;
  *(_QWORD *)&v1 = "If the optimizer should treat aligned_alloc as an unknown function";
  *((_QWORD *)&v1 + 1) = 66;
  sub_1C61A43A0(&v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, qword_1ED82E3B8, &dword_1C475E000);
}

uint64_t llvm::MemoryDependenceResults::getCallDependencyFrom(uint64_t a1, const llvm::CallBase *a2, int a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v6;
  int v9;
  uint64_t v10;
  char v11;
  char v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD v22[2];
  __int128 v23;
  __int128 v24;

  if (*(_QWORD **)(a5 + 48) == a4)
  {
LABEL_23:
    v17 = *(_QWORD *)(*(_QWORD *)(a5 + 56) + 80);
    if (v17)
      v18 = v17 - 24;
    else
      v18 = 0;
    if (v18 == a5)
      return 0x4000000000000003;
    else
      return 0x2000000000000003;
  }
  v6 = a4;
  v9 = *(_DWORD *)(a1 + 376);
  v20 = 1;
  while (1)
  {
    v6 = (_QWORD *)*v6;
    if (v6)
      v10 = (uint64_t)(v6 - 3);
    else
      v10 = 0;
    if (sub_1C4D99D08(v10))
      goto LABEL_10;
    if (!--v9)
      return 0x6000000000000003;
    v22[0] = 0;
    v22[1] = -1;
    v23 = 0u;
    v24 = 0u;
    v11 = sub_1C4EC5538(v10, (uint64_t)v22, *(uint64_t **)(a1 + 208));
    if (v22[0])
    {
      if ((llvm::AAResults::getModRefInfo(*(_QWORD *)(a1 + 192), (uint64_t)a2, (uint64_t)v22) & 3) != 0)
        return v20 | v10;
      goto LABEL_10;
    }
    v12 = v11;
    v13 = *(unsigned __int8 *)(v10 + 16) - 33;
    v14 = v13 > 0x33;
    v15 = (1 << v13) & 0x8000000000041;
    if (!v14 && v15 != 0)
      break;
    if ((v11 & 3) != 0)
      return v20 | v10;
LABEL_10:
    if (v6 == *(_QWORD **)(a5 + 48))
      goto LABEL_23;
  }
  if ((llvm::AAResults::getModRefInfo(*(llvm::AAResults **)(a1 + 192), a2, (const llvm::CallBase *)(v6 - 3)) & 3) != 0)
    return v20 | v10;
  if (!a3
    || (v12 & 2) != 0
    || (llvm::Instruction::isIdenticalToWhenDefined(a2, (const llvm::Instruction *)(v6 - 3)) & 1) == 0)
  {
    goto LABEL_10;
  }
  v20 = 2;
  return v20 | v10;
}

uint64_t llvm::MemoryDependenceResults::getDefaultBlockScanLimit(llvm::MemoryDependenceResults *this)
{
  return *((unsigned int *)this + 94);
}

uint64_t sub_1C4EC5538(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  BOOL v48;
  int v49;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  v6 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v6 == 60)
  {
    if ((*(_WORD *)(a1 + 18) & 0x301) != 0)
    {
      if ((*(_WORD *)(a1 + 18) & 0x380) == 0x100)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 40) + 272;
        v8 = *(_QWORD *)(a1 - 32);
        v9 = *(uint64_t ***)a1;
LABEL_11:
        sub_1C4768AD0(v7, (uint64_t)v9);
        if (v11 == 1)
          v12 = -2;
        else
          v12 = (unint64_t)(v10 + 7) >> 3;
        llvm::Instruction::getAAMetadata((uint64_t ***)a1, &v53);
        *(_QWORD *)&v52 = v8;
        *((_QWORD *)&v52 + 1) = v12;
        goto LABEL_18;
      }
      goto LABEL_19;
    }
    v17 = *(_QWORD *)(a1 - 32);
    sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 40) + 272, *(_QWORD *)a1);
    if (v19 == 1)
      v20 = -2;
    else
      v20 = (unint64_t)(v18 + 7) >> 3;
    llvm::Instruction::getAAMetadata((uint64_t ***)a1, &v53);
    *(_QWORD *)&v52 = v17;
    *((_QWORD *)&v52 + 1) = v20;
    v21 = v54;
    v22 = v52;
    *(_OWORD *)(a2 + 16) = v53;
    *(_OWORD *)(a2 + 32) = v21;
    *(_OWORD *)a2 = v22;
    return 5;
  }
  if (a1 && v6 == 61)
  {
    if ((*(_WORD *)(a1 + 18) & 0x301) != 0)
    {
      if ((*(_WORD *)(a1 + 18) & 0x380) == 0x100)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 40) + 272;
        v8 = *(_QWORD *)(a1 - 32);
        v9 = **(uint64_t ****)(a1 - 64);
        goto LABEL_11;
      }
LABEL_19:
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = -1;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      return 7;
    }
    v25 = *(_QWORD *)(a1 - 32);
    sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 40) + 272, **(_QWORD **)(a1 - 64));
    if (v27 == 1)
      v28 = -2;
    else
      v28 = (unint64_t)(v26 + 7) >> 3;
    llvm::Instruction::getAAMetadata((uint64_t ***)a1, &v53);
    *(_QWORD *)&v52 = v25;
    *((_QWORD *)&v52 + 1) = v28;
    v29 = v54;
    v30 = v52;
    *(_OWORD *)(a2 + 16) = v53;
    *(_OWORD *)(a2 + 32) = v29;
    *(_OWORD *)a2 = v30;
    return 6;
  }
  if (a1 && v6 == 88)
  {
    v13 = *(_QWORD *)(a1 - 32);
    llvm::Instruction::getAAMetadata((uint64_t ***)a1, &v53);
    *(_QWORD *)&v52 = v13;
    *((_QWORD *)&v52 + 1) = -2;
LABEL_18:
    v14 = v54;
    v15 = v52;
    *(_OWORD *)(a2 + 16) = v53;
    *(_OWORD *)(a2 + 32) = v14;
    *(_OWORD *)a2 = v15;
    return 7;
  }
  v23 = llvm::isFreeCall(a1, a3);
  if (v23)
  {
    *(_QWORD *)a2 = *(_QWORD *)(v23 - 32 * (*(_DWORD *)(v23 + 20) & 0x7FFFFFF));
    *(_QWORD *)(a2 + 8) = -2;
    v24 = 0uLL;
    *(_OWORD *)(a2 + 16) = 0u;
LABEL_28:
    *(_OWORD *)(a2 + 32) = v24;
    return 6;
  }
  v31 = *(unsigned __int8 *)(a1 + 16);
  result = 7;
  if (v31 <= 0x3B)
  {
    if (v31 == 37)
      return result;
    if (v31 == 33 || v31 == 39)
      goto LABEL_42;
  }
  else
  {
    if (v31 - 60 > 0x1C)
      goto LABEL_54;
    if (v31 == 84)
    {
      v32 = *(_QWORD *)(a1 - 32);
      if (!v32
        || *(_BYTE *)(v32 + 16)
        || *(_QWORD *)(v32 + 24) != *(_QWORD *)(a1 + 72)
        || (*(_BYTE *)(v32 + 33) & 0x20) == 0)
      {
        goto LABEL_42;
      }
      v37 = *(_DWORD *)(v32 + 36);
      if (v37 <= 166)
      {
        if (v37 == 163)
        {
          v38 = a1;
          v39 = 2;
          goto LABEL_78;
        }
        if (v37 != 164)
        {
LABEL_42:
          v33 = *(_QWORD *)(a1 + 64);
          if (!v33 || (*(_BYTE *)(v33 + 17) & 0x30) == 0)
          {
            v34 = *(_DWORD *)(a1 + 20);
            if (v34 < 0)
            {
              v42 = a1 - 32 * (v34 & 0x7FFFFFF);
              v45 = *(_QWORD *)(v42 - 8);
              v43 = v42 - 8;
              v44 = v45;
              if (v45)
              {
                v46 = -v44;
                do
                {
                  v47 = *(_DWORD *)(*(_QWORD *)(v43 + v46) + 8);
                  v48 = v47 > 7;
                  v49 = (1 << v47) & 0x83;
                  if (v48 || v49 == 0)
                    return 7;
                  v46 += 16;
                }
                while (v46);
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, 45) & 1) == 0
              && !llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44))
            {
              return 7;
            }
          }
LABEL_47:
          v31 = *(unsigned __int8 *)(a1 + 16);
          goto LABEL_54;
        }
      }
      else if ((v37 - 167) >= 2)
      {
        if (v37 == 185)
        {
          llvm::MemoryLocation::getForArgument(a1, 0, a3, (uint64_t)&v52);
          v41 = v53;
          *(_OWORD *)a2 = v52;
          *(_OWORD *)(a2 + 16) = v41;
          *(_OWORD *)(a2 + 32) = v54;
          return 5;
        }
        if (v37 != 187)
          goto LABEL_42;
      }
      v38 = a1;
      v39 = 1;
LABEL_78:
      llvm::MemoryLocation::getForArgument(v38, v39, a3, (uint64_t)&v52);
      v40 = v53;
      *(_OWORD *)a2 = v52;
      *(_OWORD *)(a2 + 16) = v40;
      v24 = v54;
      goto LABEL_28;
    }
    if (((1 << (v31 - 60)) & 0x1010003A) != 0)
      return result;
    if (v31 == 60)
    {
      if ((*(_WORD *)(a1 + 18) & 0x301) != 0)
        return result;
      goto LABEL_47;
    }
  }
LABEL_54:
  result = 4;
  v35 = v31 - 33;
  if (v35 > 0x37)
    return result;
  if (((1 << v35) & 0x8000000000041) == 0)
  {
    if (((1 << v35) & 0x808001C8000010) == 0 && (v35 != 28 || (*(_WORD *)(a1 + 18) & 0x301) == 0))
      return result;
    return 5;
  }
  v36 = *(_QWORD *)(a1 + 64);
  if (!v36 || (*(_BYTE *)(v36 + 20) & 4) == 0 && (*(_BYTE *)(v36 + 17) & 0x10) == 0)
  {
    LODWORD(v52) = 7;
    if ((!sub_1C53E4BBC(a1, (__int32 *)&v52, 1uLL)
       || (v51 = *(_QWORD *)(a1 - 32)) != 0
       && !*(_BYTE *)(v51 + 16)
       && *(_QWORD *)(v51 + 24) == *(_QWORD *)(a1 + 72)
       && *(_DWORD *)(v51 + 36) == 7)
      && ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, 66) & 1) != 0
       || (llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44) & 1) != 0))
    {
      return 4;
    }
    return 5;
  }
  return result;
}

unint64_t llvm::MemoryDependenceResults::getPointerDependencyFrom(llvm::DominatorTree **a1, uint64_t a2, int a3, _QWORD *a4, llvm::BasicBlock *a5, llvm::Instruction *a6, int *a7, _DWORD *a8)
{
  uint64_t InvariantGroupPointerDependency;
  unint64_t SimplePointerDependencyFrom;
  unint64_t v18;

  InvariantGroupPointerDependency = 0x6000000000000003;
  if (!a6
    || *((_BYTE *)a6 + 16) != 60
    || (InvariantGroupPointerDependency = llvm::MemoryDependenceResults::getInvariantGroupPointerDependency(a1, (uint64_t ***)a6, a5), (InvariantGroupPointerDependency & 7) != 2))
  {
    SimplePointerDependencyFrom = llvm::MemoryDependenceResults::getSimplePointerDependencyFrom((uint64_t)a1, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
    if ((InvariantGroupPointerDependency & 0xE000000000000007) == 0x2000000000000003)
      v18 = InvariantGroupPointerDependency;
    else
      v18 = SimplePointerDependencyFrom;
    if ((SimplePointerDependencyFrom & 7) == 2)
      return SimplePointerDependencyFrom;
    else
      return v18;
  }
  return InvariantGroupPointerDependency;
}

uint64_t llvm::MemoryDependenceResults::getInvariantGroupPointerDependency(llvm::DominatorTree **this, uint64_t ***a2, llvm::BasicBlock *a3)
{
  uint64_t v3;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  llvm::LoadInst **v12;
  llvm::LoadInst *v13;
  llvm::LoadInst **v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  llvm::Value *v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 **v28;
  unsigned __int8 **v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  BOOL v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  unsigned __int8 *v39;
  unsigned __int8 **v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  llvm::BasicBlock *v48;
  llvm::LoadInst **v49;
  llvm::LoadInst *v50;
  _QWORD *v51;
  char v52[24];
  __int128 v53;
  uint64_t v54;
  llvm::LoadInst *v55;
  uint64_t v56;
  void *v57;
  unsigned int v58;
  unsigned int v59;
  _QWORD v60[10];

  v60[8] = *MEMORY[0x1E0C80C00];
  v3 = 0x6000000000000003;
  if ((*((_BYTE *)a2 + 23) & 0x20) == 0)
    return v3;
  v7 = ***a2;
  v57 = a2;
  v8 = *(_DWORD *)(v7 + 2496);
  if (!v8)
  {
    v49 = 0;
LABEL_79:
    v12 = (llvm::LoadInst **)sub_1C541AB24(v7 + 2480, (uint64_t)&v57, (uint64_t *)&v57, v49);
    v50 = (llvm::LoadInst *)v57;
    v12[3] = 0;
    v12[4] = 0;
    *v12 = v50;
    v12[1] = (llvm::LoadInst *)(v12 + 3);
    v12[2] = (llvm::LoadInst *)0x100000000;
    goto LABEL_12;
  }
  v9 = *(_QWORD *)(v7 + 2480);
  v10 = v8 - 1;
  v11 = v10 & ((a2 >> 4) ^ (a2 >> 9));
  v12 = (llvm::LoadInst **)(v9 + 40 * v11);
  v13 = *v12;
  if (*v12 != (llvm::LoadInst *)a2)
  {
    v14 = 0;
    v15 = 1;
    while (v13 != (llvm::LoadInst *)-4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v13 == (llvm::LoadInst *)-8192;
      if (v16)
        v14 = v12;
      v17 = v11 + v15++;
      v11 = v17 & v10;
      v12 = (llvm::LoadInst **)(v9 + 40 * v11);
      v13 = *v12;
      if (*v12 == (llvm::LoadInst *)a2)
        goto LABEL_12;
    }
    if (v14)
      v49 = v14;
    else
      v49 = v12;
    goto LABEL_79;
  }
LABEL_12:
  v18 = *((unsigned int *)v12 + 4);
  if ((_DWORD)v18)
  {
    v19 = (_QWORD *)((char *)v12[1] + 8);
    v20 = 16 * v18;
    while (*((_DWORD *)v19 - 2) != 16)
    {
      v19 += 2;
      v20 -= 16;
      if (!v20)
        return v3;
    }
    if (*v19)
    {
      v22 = llvm::Value::stripPointerCasts((llvm::Value *)*(a2 - 4));
      if (*((unsigned __int8 *)v22 + 16) >= 4u)
      {
        v23 = 0;
        v56 = 0;
        v57 = v60;
        v59 = 8;
        v60[0] = v22;
        v24 = 1;
LABEL_20:
        while (1)
        {
          v25 = *((_QWORD *)v57 + --v24);
          v58 = v24;
          v26 = *(_QWORD *)(v25 + 8);
          if (v26)
            break;
          if (!v24)
          {
LABEL_71:
            if (v23)
            {
              v48 = *(llvm::BasicBlock **)(v23 + 40);
              if (v48 == a3)
              {
                v3 = v23 | 2;
              }
              else
              {
                v54 = 0;
                v55 = (llvm::LoadInst *)a2;
                *(_QWORD *)&v53 = v48;
                *((_QWORD *)&v53 + 1) = v23 | 2;
                sub_1C61A487C((uint64_t)v52, (uint64_t)(this + 3), (uint64_t *)&v55, &v53);
                v51 = sub_1C61A4E7C((uint64_t)(this + 6), &v56);
                sub_1C4774094((llvm::SmallPtrSetImplBase *)(v51 + 1), (uint64_t)a2);
                v3 = 0x2000000000000003;
              }
            }
            if (v57 != v60)
              free(v57);
            return v3;
          }
        }
        while (1)
        {
          v27 = *(_QWORD *)(v26 + 24);
          if (*(unsigned __int8 *)(v27 + 16) <= 0x1Bu)
            v31 = 0;
          else
            v31 = *(unsigned __int8 **)(v26 + 24);
          if (v31)
            v32 = v31 == (unsigned __int8 *)a2;
          else
            v32 = 1;
          if (!v32 && llvm::DominatorTree::dominates(this[27], (const llvm::Value *)v31, (const llvm::Instruction *)a2))
          {
            v33 = v31[16];
            if (v33 > 0x3D)
            {
              if (v33 == 62)
              {
                if (llvm::GetElementPtrInst::hasAllZeroIndices((llvm::GetElementPtrInst *)v31))
                {
LABEL_66:
                  v47 = v58;
                  if (v58 >= (unint64_t)v59)
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, (uint64_t)v60, v58 + 1, 8);
                    v47 = v58;
                  }
                  *((_QWORD *)v57 + v47) = v31;
                  ++v58;
                }
              }
              else if (v33 == 77)
              {
                goto LABEL_66;
              }
            }
            else if ((v33 == 60 || v33 == 61 && *((_QWORD *)v31 - 4) == v25) && (v31[23] & 0x20) != 0)
            {
              v34 = ***(_QWORD ***)v31;
              *(_QWORD *)&v53 = v31;
              v35 = *(_DWORD *)(v34 + 2496);
              if (v35)
              {
                v36 = *(_QWORD *)(v34 + 2480);
                v37 = v35 - 1;
                v38 = v37 & ((v31 >> 4) ^ (v31 >> 9));
                v29 = (unsigned __int8 **)(v36 + 40 * v38);
                v39 = *v29;
                if (*v29 != v31)
                {
                  v40 = 0;
                  v41 = 1;
                  while (v39 != (unsigned __int8 *)-4096)
                  {
                    if (v40)
                      v42 = 0;
                    else
                      v42 = v39 == (unsigned __int8 *)-8192;
                    if (v42)
                      v40 = v29;
                    v43 = v38 + v41++;
                    v38 = v43 & v37;
                    v29 = (unsigned __int8 **)(v36 + 40 * v38);
                    v39 = *v29;
                    if (*v29 == v31)
                      goto LABEL_57;
                  }
                  if (v40)
                    v28 = v40;
                  else
                    v28 = v29;
LABEL_32:
                  v29 = (unsigned __int8 **)sub_1C541AB24(v34 + 2480, (uint64_t)&v53, (uint64_t *)&v53, v28);
                  v30 = (unsigned __int8 *)v53;
                  v29[4] = 0;
                  v29[3] = 0;
                  *v29 = v30;
                  v29[1] = (unsigned __int8 *)(v29 + 3);
                  v29[2] = (unsigned __int8 *)0x100000000;
                }
LABEL_57:
                v44 = *((unsigned int *)v29 + 4);
                if ((_DWORD)v44)
                {
                  v45 = v29[1] + 8;
                  v46 = 16 * v44;
                  while (*((_DWORD *)v45 - 2) != 16)
                  {
                    v45 += 2;
                    v46 -= 16;
                    if (!v46)
                      goto LABEL_69;
                  }
                  if (*v45)
                  {
                    if (v23)
                    {
                      if (llvm::DominatorTree::dominates(this[27], (const llvm::Value *)v23, (const llvm::Instruction *)v31))
                      {
                        v27 = (uint64_t)v31;
                      }
                      else
                      {
                        v27 = v23;
                      }
                    }
                    v56 = v27;
                    v23 = v27;
                  }
                }
                goto LABEL_69;
              }
              v28 = 0;
              goto LABEL_32;
            }
          }
LABEL_69:
          v26 = *(_QWORD *)(v26 + 8);
          if (!v26)
          {
            v24 = v58;
            if (!v58)
              goto LABEL_71;
            goto LABEL_20;
          }
        }
      }
    }
  }
  return v3;
}

unint64_t llvm::MemoryDependenceResults::getSimplePointerDependencyFrom(uint64_t a1, uint64_t a2, int a3, _QWORD *a4, uint64_t a5, llvm::Instruction *this, int *a7, _DWORD *a8)
{
  llvm::Instruction *v10;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  llvm::Instruction **v19;
  llvm::Instruction *v20;
  llvm::Instruction **v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  BOOL v49;
  uint64_t v50;
  llvm *UnderlyingObject;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  BOOL v59;
  char v60;
  __int128 v61;
  int ModRefInfo;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  BOOL v97;
  _QWORD *v98;
  _QWORD *v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  unsigned int v109;
  int v110;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  unsigned int v115;
  int v116;
  uint64_t v118;
  uint64_t v119;
  llvm::Instruction **v121;
  llvm::Instruction *v122;
  uint64_t v123;
  int v124;
  char *v125;
  llvm::Instruction *v126;
  uint64_t v129;
  BOOL v130;
  int v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  char v135;
  uint64_t v136[2];
  __int128 v137;
  __int128 v138;

  v10 = this;
  v130 = 0;
  v131 = *(_DWORD *)(a1 + 376);
  if (!this || !a3)
    goto LABEL_21;
  if (*((_BYTE *)this + 16) == 60 && (*((_BYTE *)this + 23) & 0x20) != 0)
  {
    v14 = ***(_QWORD ***)this;
    *(_QWORD *)&v132 = this;
    v15 = *(_DWORD *)(v14 + 2496);
    if (v15)
    {
      v16 = *(_QWORD *)(v14 + 2480);
      v17 = v15 - 1;
      v18 = v17 & ((this >> 4) ^ (this >> 9));
      v19 = (llvm::Instruction **)(v16 + 40 * v18);
      v20 = *v19;
      if (*v19 == this)
        goto LABEL_15;
      v21 = 0;
      v22 = 1;
      while (v20 != (llvm::Instruction *)-4096)
      {
        if (v21)
          v23 = 0;
        else
          v23 = v20 == (llvm::Instruction *)-8192;
        if (v23)
          v21 = v19;
        v24 = v18 + v22++;
        v18 = v24 & v17;
        v19 = (llvm::Instruction **)(v16 + 40 * v18);
        v20 = *v19;
        if (*v19 == this)
          goto LABEL_15;
      }
      if (v21)
        v121 = v21;
      else
        v121 = v19;
    }
    else
    {
      v121 = 0;
    }
    v19 = (llvm::Instruction **)sub_1C541AB24(v14 + 2480, (uint64_t)&v132, (uint64_t *)&v132, v121);
    v122 = (llvm::Instruction *)v132;
    v19[3] = 0;
    v19[4] = 0;
    *v19 = v122;
    v19[1] = (llvm::Instruction *)(v19 + 3);
    v19[2] = (llvm::Instruction *)0x100000000;
LABEL_15:
    v25 = *((unsigned int *)v19 + 4);
    if ((_DWORD)v25)
    {
      v26 = (_QWORD *)((char *)v19[1] + 8);
      v27 = 16 * v25;
      while (*((_DWORD *)v26 - 2) != 6)
      {
        v130 = 0;
        v26 += 2;
        v27 -= 16;
        if (!v27)
          goto LABEL_21;
      }
      v130 = *v26 != 0;
      goto LABEL_21;
    }
  }
  v130 = 0;
LABEL_21:
  v125 = (char *)v10 - 8;
  v126 = v10;
  while (a4 != *(_QWORD **)(a5 + 48))
  {
    a4 = (_QWORD *)*a4;
    v28 = (unint64_t)(a4 - 3);
    if (a4)
      v29 = (uint64_t)(a4 - 3);
    else
      v29 = 0;
    v30 = *(unsigned __int8 *)(v29 + 16);
    if (v30 == 84)
    {
      v31 = *(_QWORD *)(v29 - 32);
      if (v31)
      {
        if (!*(_BYTE *)(v31 + 16)
          && *(_QWORD *)(v31 + 24) == *(_QWORD *)(v29 + 72)
          && (*(_BYTE *)(v31 + 33) & 0x20) != 0
          && (*(_DWORD *)(*(a4 - 7) + 36) - 55) < 4)
        {
          goto LABEL_208;
        }
      }
    }
    if (a7)
    {
      v32 = *a7 - 1;
      *a7 = v32;
      if (!v32)
        return 0x6000000000000003;
    }
    else if (!--v131)
    {
      return 0x6000000000000003;
    }
    if (v30 == 84)
    {
      v33 = *(_QWORD *)(v29 - 32);
      if (!v33
        || *(_BYTE *)(v33 + 16)
        || *(_QWORD *)(v33 + 24) != *(_QWORD *)(v29 + 72)
        || (*(_BYTE *)(v33 + 33) & 0x20) == 0)
      {
        goto LABEL_94;
      }
      v34 = *(_DWORD *)(*(a4 - 7) + 36);
      if (v34 == 187 || v34 == 185)
      {
        v124 = *(_DWORD *)(*(a4 - 7) + 36);
        *(_QWORD *)&v132 = 0;
        *((_QWORD *)&v132 + 1) = -1;
        v133 = 0u;
        v134 = 0u;
        sub_1C4EC5538((uint64_t)(a4 - 3), (uint64_t)&v132, *(uint64_t **)(a1 + 208));
        v76 = *(_QWORD *)a8;
        v77 = a8[86];
        a8[86] = v77 + 1;
        v78 = *(_QWORD *)(v76 + 8);
        v79 = *(_QWORD *)(v76 + 16);
        if (v78 == v79)
        {
          a8[86] = v77;
LABEL_226:
          v105 = v129;
          if (v124 != 185)
            v105 = v28 | 1;
          v129 = v105;
          if (v124 == 185)
            v100 = 2;
          else
            v100 = 1;
          goto LABEL_234;
        }
        v80 = v78 + 8;
        do
        {
          v81 = (*(uint64_t (**)(_QWORD, __int128 *, uint64_t, _DWORD *))(**(_QWORD **)(v80 - 8) + 24))(*(_QWORD *)(v80 - 8), &v132, a2, a8 + 2);
          v82 = v81 != 1 || v80 == v79;
          v80 += 8;
        }
        while (!v82);
        --a8[86];
        if (v81)
        {
          if (v81 != 3)
            goto LABEL_226;
          v75 = v28 | 2;
          goto LABEL_233;
        }
      }
      else
      {
        if (v34 != 168)
          goto LABEL_94;
        *(_QWORD *)&v132 = *(_QWORD *)(v28 - 32 * (*((_DWORD *)a4 - 1) & 0x7FFFFFF) + 32);
        *((_QWORD *)&v132 + 1) = -2;
        v133 = 0u;
        v134 = 0u;
        v35 = *(_QWORD *)a8;
        v36 = a8[86];
        a8[86] = v36 + 1;
        v37 = *(_QWORD *)(v35 + 8);
        v38 = *(_QWORD *)(v35 + 16);
        if (v37 == v38)
        {
          a8[86] = v36;
        }
        else
        {
          v39 = v37 + 8;
          do
          {
            v40 = (*(unsigned __int8 (**)(_QWORD, __int128 *, uint64_t, _DWORD *))(**(_QWORD **)(v39 - 8)
                                                                                           + 24))(*(_QWORD *)(v39 - 8), &v132, a2, a8 + 2);
            v41 = v40 != 1 || v39 == v38;
            v39 += 8;
          }
          while (!v41);
          --a8[86];
          if (v40 == 3)
            return v28 | 2;
        }
      }
      goto LABEL_208;
    }
    if (v30 == 60)
      v42 = v29;
    else
      v42 = 0;
    v136[0] = v42;
    if (a4 && v30 == 60)
    {
      if ((*(_WORD *)(v42 + 18) & 1) != 0 && (!v10 || llvm::Instruction::isVolatile(v10)))
        goto LABEL_232;
      v43 = *((unsigned __int8 *)a4 - 8);
      if (v43 == 60 || v43 == 61)
      {
        if ((*((_WORD *)a4 - 3) & 0x380) != 0)
          goto LABEL_63;
      }
      else if ((v43 - 63) < 3)
      {
LABEL_63:
        if ((*(_WORD *)(v42 + 18) & 0x300) != 0)
        {
          if (!v10 || (llvm::Instruction::isVolatile(v10) & 1) != 0)
            goto LABEL_232;
          v44 = *((unsigned __int8 *)v10 + 16);
          if (v44 <= 0x3C)
          {
            if (*((unsigned __int8 *)v10 + 16) <= 0x3Bu)
            {
              if (v44 != 33)
              {
                if (v44 == 37)
                  goto LABEL_232;
                if (v44 != 39)
                  goto LABEL_182;
              }
              goto LABEL_175;
            }
LABEL_154:
            if ((*((_WORD *)v10 + 9) & 0x380) != 0)
              goto LABEL_232;
          }
          else
          {
            if (v44 - 61 <= 0x1B)
            {
              if (v44 != 61)
              {
                if (v44 != 84)
                {
                  if (((1 << (v44 - 61)) & 0x808001C) != 0)
                    goto LABEL_232;
                  goto LABEL_182;
                }
LABEL_175:
                v85 = *((_QWORD *)v10 + 8);
                if (!v85 || (*(_BYTE *)(v85 + 20) & 4) == 0 && (*(_BYTE *)(v85 + 17) & 0x10) == 0)
                {
                  LODWORD(v132) = 7;
                  if (sub_1C53E4BBC((uint64_t)v10, (__int32 *)&v132, 1uLL))
                  {
                    v112 = *((_QWORD *)v10 - 4);
                    if (!v112 || *(_BYTE *)(v112 + 16) || *(_QWORD *)(v112 + 24) != *((_QWORD *)v126 + 9))
                    {
                      v10 = v126;
                      goto LABEL_232;
                    }
                    v10 = v126;
                    if (*(_DWORD *)(v112 + 36) != 7)
                      goto LABEL_232;
                  }
                  if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v10, 66) & 1) == 0
                    && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v10, 44))
                  {
                    goto LABEL_232;
                  }
                }
                v44 = *((unsigned __int8 *)v10 + 16);
                goto LABEL_182;
              }
              goto LABEL_154;
            }
LABEL_182:
            v86 = v44 - 33;
            if (v86 <= 0x37)
            {
              if (((1 << v86) & 0x8000000000041) != 0)
              {
                v103 = *((_QWORD *)v10 + 8);
                if (!v103 || (*(_BYTE *)(v103 + 17) & 0x30) == 0)
                {
                  v104 = *((_DWORD *)v10 + 5);
                  if (v104 < 0)
                  {
                    v113 = &v125[-32 * (v104 & 0x7FFFFFF)];
                    if (*(_QWORD *)v113)
                    {
                      v114 = -*(_QWORD *)v113;
                      while (1)
                      {
                        v115 = *(_DWORD *)(*(_QWORD *)&v113[v114] + 8);
                        v49 = v115 > 7;
                        v116 = (1 << v115) & 0x83;
                        if (v49 || v116 == 0)
                          break;
                        v114 += 16;
                        if (!v114)
                          goto LABEL_222;
                      }
LABEL_232:
                      v75 = v42 | 1;
LABEL_233:
                      v129 = v75;
                      v100 = 1;
                      goto LABEL_234;
                    }
                  }
LABEL_222:
                  if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v10, 45) & 1) == 0
                    && (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v10, 44) & 1) == 0)
                  {
                    goto LABEL_232;
                  }
                }
              }
              else if (v86 == 27)
              {
                if ((*((_WORD *)v10 + 9) & 0x301) != 0)
                  goto LABEL_232;
              }
              else if (((1 << v86) & 0x808001D0000010) != 0)
              {
                goto LABEL_232;
              }
            }
          }
          if ((*(_WORD *)(v42 + 18) & 0x380) != 0x100)
            goto LABEL_232;
        }
      }
      v87 = *(_QWORD *)(v42 - 32);
      sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 40) + 56) + 40) + 272, *(_QWORD *)v42);
      if (v89 == 1)
        v90 = -2;
      else
        v90 = (unint64_t)(v88 + 7) >> 3;
      llvm::Instruction::getAAMetadata((uint64_t ***)v42, &v133);
      *(_QWORD *)&v132 = v87;
      *((_QWORD *)&v132 + 1) = v90;
      v91 = *(_QWORD *)a8;
      v92 = a8[86];
      a8[86] = v92 + 1;
      v93 = *(_QWORD *)(v91 + 8);
      v94 = *(_QWORD *)(v91 + 16);
      if (v93 == v94)
      {
        v96 = 1;
      }
      else
      {
        v95 = v93 + 8;
        do
        {
          v96 = (*(uint64_t (**)(_QWORD, __int128 *, uint64_t, _DWORD *))(**(_QWORD **)(v95 - 8) + 24))(*(_QWORD *)(v95 - 8), &v132, a2, a8 + 2);
          v97 = v96 != 1 || v95 == v94;
          v95 += 8;
        }
        while (!v97);
        v92 = a8[86] - 1;
      }
      v10 = v126;
      a8[86] = v92;
      if (a3)
      {
        if (v96 == 2)
        {
          if ((v96 & 0x100) != 0)
          {
            *((_DWORD *)sub_1C6144C70(a1 + 384, v136) + 2) = v96 >> 9;
            v10 = v126;
LABEL_135:
            v75 = v29 | 1;
            goto LABEL_233;
          }
        }
        else if (v96 == 3)
        {
          goto LABEL_201;
        }
      }
      else if ((_BYTE)v96)
      {
        v98 = *(_QWORD **)(*(_QWORD *)a8 + 8);
        v99 = *(_QWORD **)(*(_QWORD *)a8 + 16);
        while (v98 != v99)
        {
          if (((*(uint64_t (**)(_QWORD, __int128 *, _DWORD *, _QWORD))(*(_QWORD *)*v98 + 32))(*v98, &v132, a8 + 2, 0) & 1) != 0)goto LABEL_208;
          ++v98;
        }
LABEL_201:
        v75 = v29 | 2;
        goto LABEL_233;
      }
      goto LABEL_208;
    }
    if (v30 == 61)
      v45 = v29;
    else
      v45 = 0;
    if (!a4 || v30 != 61)
    {
      if (v30 == 59)
        goto LABEL_95;
      if (v30 >= 0x1C)
      {
        v48 = v30 - 33;
        v49 = v48 > 0x33;
        v50 = (1 << v48) & 0x8000000000041;
        if (!v49 && v50 != 0)
        {
LABEL_94:
          if (sub_1C4D91DD8(v29, 19))
          {
LABEL_95:
            UnderlyingObject = llvm::getUnderlyingObject(*(llvm **)a2, (const llvm::Value *)6);
            if (UnderlyingObject == (llvm *)v29)
              return v29 | 2;
            *(_QWORD *)&v132 = v29;
            *((_QWORD *)&v132 + 1) = 1;
            v133 = 0u;
            v134 = 0u;
            v136[0] = (uint64_t)UnderlyingObject;
            v136[1] = 1;
            v137 = 0u;
            v138 = 0u;
            v53 = *(_QWORD *)a8;
            v54 = a8[86];
            a8[86] = v54 + 1;
            v55 = *(_QWORD *)(v53 + 8);
            v56 = *(_QWORD *)(v53 + 16);
            if (v55 == v56)
            {
              a8[86] = v54;
            }
            else
            {
              v57 = v55 + 8;
              do
              {
                v58 = (*(unsigned __int8 (**)(_QWORD, __int128 *, uint64_t *, _DWORD *))(**(_QWORD **)(v57 - 8)
                                                                                                 + 24))(*(_QWORD *)(v57 - 8), &v132, v136, a8 + 2);
                v59 = v58 != 1 || v57 == v56;
                v57 += 8;
              }
              while (!v59);
              --a8[86];
              if (v58 == 3)
                return v29 | 2;
            }
          }
        }
      }
      if (!v130)
      {
        v60 = a3 ^ 1;
        if (*(_BYTE *)(v29 + 16) != 63)
          v60 = 1;
        if (!a4 || (v60 & 1) != 0 || (*(_WORD *)(v29 + 18) & 7) != 5)
        {
          v61 = *(_OWORD *)(a2 + 16);
          v132 = *(_OWORD *)a2;
          v133 = v61;
          v134 = *(_OWORD *)(a2 + 32);
          v135 = 1;
          ModRefInfo = llvm::AAResults::getModRefInfo(*(_QWORD *)a8, v29, &v132, (uint64_t)(a8 + 2));
          if ((~ModRefInfo & 3) == 0)
            ModRefInfo = llvm::AAResults::callCapturesBefore(*(_QWORD *)a8, v29, (llvm **)a2, *(_QWORD *)(a1 + 216), (uint64_t)(a8 + 2));
          if ((ModRefInfo | 4) != 4 && ((ModRefInfo | 4) != 5 || (a3 & 1) == 0))
            return v29 | 1;
        }
      }
      goto LABEL_208;
    }
    if ((*(_WORD *)(v45 + 18) & 0x301) != 0)
    {
      v46 = *(unsigned __int8 *)(v45 + 16);
      if (v46 == 60 || v46 == 61)
      {
        if ((*(_WORD *)(v45 + 18) & 0x380) == 0)
          goto LABEL_118;
      }
      else if ((v46 - 63) >= 3)
      {
        goto LABEL_118;
      }
      if (!v10 || (llvm::Instruction::isVolatile(v10) & 1) != 0)
        return v45 | 1;
      v47 = *((unsigned __int8 *)v10 + 16);
      if (v47 <= 0x3C)
      {
        if (*((unsigned __int8 *)v10 + 16) <= 0x3Bu)
        {
          switch(v47)
          {
            case '!':
              goto LABEL_159;
            case '%':
              return v45 | 1;
            case '\'':
              goto LABEL_159;
          }
          goto LABEL_166;
        }
      }
      else
      {
        if (v47 - 61 > 0x1B)
          goto LABEL_166;
        if (v47 != 61)
        {
          if (v47 != 84)
          {
            if (((1 << (v47 - 61)) & 0x808001C) != 0)
              return v45 | 1;
            goto LABEL_166;
          }
LABEL_159:
          v83 = *((_QWORD *)v10 + 8);
          if (!v83 || (*(_BYTE *)(v83 + 20) & 4) == 0 && (*(_BYTE *)(v83 + 17) & 0x10) == 0)
          {
            LODWORD(v132) = 7;
            if (sub_1C53E4BBC((uint64_t)v10, (__int32 *)&v132, 1uLL))
            {
              v106 = *((_QWORD *)v10 - 4);
              if (!v106)
                return v45 | 1;
              if (*(_BYTE *)(v106 + 16))
                return v45 | 1;
              if (*(_QWORD *)(v106 + 24) != *((_QWORD *)v126 + 9))
                return v45 | 1;
              v10 = v126;
              if (*(_DWORD *)(v106 + 36) != 7)
                return v45 | 1;
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v10, 66) & 1) == 0
              && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v10, 44))
            {
              return v45 | 1;
            }
          }
          v47 = *((unsigned __int8 *)v10 + 16);
LABEL_166:
          v84 = v47 - 33;
          if (v84 <= 0x37)
          {
            if (((1 << v84) & 0x8000000000041) != 0)
            {
              v101 = *((_QWORD *)v10 + 8);
              if (!v101 || (*(_BYTE *)(v101 + 17) & 0x30) == 0)
              {
                v102 = *((_DWORD *)v10 + 5);
                if (v102 < 0)
                {
                  v107 = &v125[-32 * (v102 & 0x7FFFFFF)];
                  if (*(_QWORD *)v107)
                  {
                    v108 = -*(_QWORD *)v107;
                    do
                    {
                      v109 = *(_DWORD *)(*(_QWORD *)&v107[v108] + 8);
                      v49 = v109 > 7;
                      v110 = (1 << v109) & 0x83;
                      if (v49 || v110 == 0)
                        return v45 | 1;
                      v108 += 16;
                    }
                    while (v108);
                  }
                }
                if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v10, 45) & 1) == 0
                  && (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v10, 44) & 1) == 0)
                {
                  return v45 | 1;
                }
              }
            }
            else if (v84 == 27)
            {
              if ((*((_WORD *)v10 + 9) & 0x301) != 0)
                return v45 | 1;
            }
            else if (((1 << v84) & 0x808001D0000010) != 0)
            {
              return v45 | 1;
            }
          }
          goto LABEL_118;
        }
      }
      if ((*((_WORD *)v10 + 9) & 0x300) != 0)
        return v45 | 1;
    }
LABEL_118:
    if ((*(_WORD *)(v45 + 18) & 1) != 0 && (!v10 || llvm::Instruction::isVolatile(v10)))
      return v45 | 1;
    v63 = *(_OWORD *)(a2 + 16);
    v132 = *(_OWORD *)a2;
    v133 = v63;
    v134 = *(_OWORD *)(a2 + 32);
    v135 = 1;
    if ((llvm::AAResults::getModRefInfo(*(_QWORD *)a8, v45, &v132, (uint64_t)(a8 + 2)) & 3) == 0)
      goto LABEL_208;
    v64 = *(_QWORD *)(v45 - 32);
    sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 40) + 56) + 40) + 272, **(_QWORD **)(v45 - 64));
    if (v66 == 1)
      v67 = -2;
    else
      v67 = (unint64_t)(v65 + 7) >> 3;
    llvm::Instruction::getAAMetadata((uint64_t ***)v45, &v133);
    *(_QWORD *)&v132 = v64;
    *((_QWORD *)&v132 + 1) = v67;
    v68 = *(_QWORD *)a8;
    v69 = a8[86];
    a8[86] = v69 + 1;
    v70 = *(_QWORD *)(v68 + 8);
    v71 = *(_QWORD *)(v68 + 16);
    if (v70 == v71)
    {
      a8[86] = v69;
      v10 = v126;
    }
    else
    {
      v72 = v70 + 8;
      do
      {
        v73 = (*(uint64_t (**)(_QWORD, __int128 *, uint64_t, _DWORD *))(**(_QWORD **)(v72 - 8) + 24))(*(_QWORD *)(v72 - 8), &v132, a2, a8 + 2);
        v74 = v73 != 1 || v72 == v71;
        v72 += 8;
      }
      while (!v74);
      --a8[86];
      v10 = v126;
      if (!v73)
        goto LABEL_208;
      if (v73 == 3)
        goto LABEL_201;
    }
    if (!v130)
      goto LABEL_135;
LABEL_208:
    v100 = 2;
LABEL_234:
    if (v100 != 2)
      return v129;
  }
  v118 = *(_QWORD *)(*(_QWORD *)(a5 + 56) + 80);
  if (v118)
    v119 = v118 - 24;
  else
    v119 = 0;
  v23 = v119 == a5;
  v123 = 0x2000000000000003;
  if (v23)
    return 0x4000000000000003;
  return v123;
}

unint64_t llvm::MemoryDependenceResults::getPointerDependencyFrom(uint64_t a1, uint64_t a2, int a3, _QWORD *a4, llvm::BasicBlock *a5, llvm::Instruction *a6, int *a7)
{
  uint64_t v7;
  char *v8;
  uint64_t i;
  unint64_t PointerDependencyFrom;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  void *v16;
  uint64_t v17;
  _BYTE v18[128];
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a1 + 192);
  v13 = 1;
  v7 = 16;
  do
  {
    v8 = (char *)&v12 + v7;
    *(_OWORD *)v8 = xmmword_1C85F2120;
    *((_OWORD *)v8 + 1) = xmmword_1C85F2120;
    v7 += 40;
  }
  while (v8 + 40 != (char *)v15);
  v15[0] = &v19;
  v15[1] = 0;
  v16 = v18;
  v17 = 0x400000000;
  v19 = &unk_1E8134870;
  v20 = 1;
  for (i = 512; i != 640; i += 16)
    *(uint64_t *)((char *)&v12 + i) = -4096;
  PointerDependencyFrom = llvm::MemoryDependenceResults::getPointerDependencyFrom((llvm::DominatorTree **)a1, a2, a3, a4, a5, a6, a7, &v12);
  if ((v20 & 1) == 0)
    MEMORY[0x1CAA32FB4](v21, 8);
  if (v16 != v18)
    free(v16);
  if ((v13 & 1) == 0)
    MEMORY[0x1CAA32FB4](v14, 8);
  return PointerDependencyFrom;
}

uint64_t llvm::MemoryDependenceResults::getDependency(llvm::MemoryDependenceResults *this, llvm::Instruction *a2)
{
  char *v4;
  int v5;
  uint64_t *v6;
  uint64_t result;
  llvm::Instruction *v8;
  unint64_t v9;
  llvm::BasicBlock *v10;
  char *v11;
  char v12;
  _BOOL4 v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  llvm::BasicBlock *v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[2];
  __int128 v38;
  __int128 v39;
  llvm::Instruction *v40;

  v40 = a2;
  v4 = (char *)this + 384;
  v5 = *((_DWORD *)this + 98);
  if (v5)
  {
    v25 = *((_DWORD *)this + 100);
    if (v25 > 4 * v5 && v25 >= 0x41)
    {
      v26 = 1 << (33 - __clz(v5 - 1));
      if (v26 <= 64)
        v27 = 64;
      else
        v27 = v26;
LABEL_48:
      if (v27 == v25)
      {
        *((_QWORD *)this + 49) = 0;
        v28 = 16 * v25;
        v29 = (_QWORD *)*((_QWORD *)this + 48);
        do
        {
          *v29 = -4096;
          v29 += 2;
          v28 -= 16;
        }
        while (v28);
      }
      else
      {
        MEMORY[0x1CAA32FB4](*(_QWORD *)v4, 8);
        if (v27)
        {
          v32 = (4 * v27 / 3u + 1) | ((unint64_t)(4 * v27 / 3u + 1) >> 1);
          v33 = v32 | (v32 >> 2) | ((v32 | (v32 >> 2)) >> 4);
          LODWORD(v33) = (((v33 | (v33 >> 8)) >> 16) | v33 | (v33 >> 8)) + 1;
          *((_DWORD *)this + 100) = v33;
          v34 = operator new(16 * v33, (std::align_val_t)8uLL);
          *((_QWORD *)this + 48) = v34;
          *((_QWORD *)this + 49) = 0;
          v35 = *((unsigned int *)this + 100);
          if ((_DWORD)v35)
          {
            v36 = 16 * v35;
            do
            {
              *v34 = -4096;
              v34 += 2;
              v36 -= 16;
            }
            while (v36);
          }
        }
        else
        {
          *(_QWORD *)v4 = 0;
          *((_QWORD *)v4 + 1) = 0;
          *((_DWORD *)v4 + 4) = 0;
        }
      }
      goto LABEL_3;
    }
  }
  else
  {
    if (!*((_DWORD *)this + 99))
      goto LABEL_3;
    v25 = *((_DWORD *)this + 100);
    if (v25 > 0x40)
    {
      v27 = 0;
      goto LABEL_48;
    }
  }
  if (v25)
  {
    v30 = *(_QWORD **)v4;
    v31 = 16 * v25;
    do
    {
      *v30 = -4096;
      v30 += 2;
      v31 -= 16;
    }
    while (v31);
  }
  *((_QWORD *)this + 49) = 0;
LABEL_3:
  v6 = sub_1C4ECB2FC((uint64_t)this, (uint64_t *)&v40);
  result = v6[1];
  if ((result & 7) != 0)
    return result;
  v8 = a2;
  v9 = result & 0xFFFFFFFFFFFFFFF8;
  if ((result & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    sub_1C4EC70EC((uint64_t)this + 144, v9, (uint64_t)a2);
    v8 = (llvm::Instruction *)v9;
  }
  v10 = (llvm::BasicBlock *)*((_QWORD *)a2 + 5);
  v11 = (char *)a2 + 24;
  if (!a2)
    v11 = 0;
  if (v11 == *((char **)v10 + 6))
  {
    v17 = *(_QWORD *)(*((_QWORD *)v10 + 7) + 80);
    if (v17)
      v18 = (llvm::BasicBlock *)(v17 - 24);
    else
      v18 = 0;
    if (v10 == v18)
      result = 0x4000000000000003;
    else
      result = 0x2000000000000003;
    goto LABEL_28;
  }
  v37[0] = 0;
  v37[1] = -1;
  v38 = 0u;
  v39 = 0u;
  v12 = sub_1C4EC5538((uint64_t)a2, (uint64_t)v37, *((uint64_t **)this + 26));
  if (v37[0])
  {
    v13 = (v12 & 2) == 0;
    if (*((_BYTE *)a2 + 16) == 84)
    {
      v14 = *((_QWORD *)a2 - 4);
      if (v14)
      {
        if (!*(_BYTE *)(v14 + 16) && *(_QWORD *)(v14 + 24) == *((_QWORD *)a2 + 9) && (*(_BYTE *)(v14 + 33) & 0x20) != 0)
        {
          v15 = *(_DWORD *)(v14 + 36);
          v13 = (v12 & 2) == 0 || v15 == 168;
        }
      }
    }
    result = llvm::MemoryDependenceResults::getPointerDependencyFrom((uint64_t)this, (uint64_t)v37, v13, (_QWORD *)v8 + 3, v10, a2, 0);
    goto LABEL_36;
  }
  v19 = *((unsigned __int8 *)a2 + 16) - 33;
  if (v19 > 0x33 || ((1 << v19) & 0x8000000000041) == 0)
  {
    result = 0x6000000000000003;
LABEL_28:
    v6[1] = result;
    return result;
  }
  v20 = *((_QWORD *)this + 24);
  v21 = *(_QWORD **)(v20 + 8);
  v22 = *(_QWORD **)(v20 + 16);
  v23 = 63;
  while (v21 != v22)
  {
    v23 &= (*(uint64_t (**)(_QWORD, llvm::Instruction *))(*(_QWORD *)*v21 + 48))(*v21, a2);
    if (v23 == 4)
      break;
    ++v21;
  }
  result = llvm::MemoryDependenceResults::getCallDependencyFrom((uint64_t)this, a2, (v23 & 2) == 0, (_QWORD *)v8 + 3, (uint64_t)v10);
LABEL_36:
  v6[1] = result;
  if ((result & 7u) <= 2uLL)
  {
    v37[0] = result & 0xFFFFFFFFFFFFFFF8;
    if ((result & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      sub_1C4ECB50C((uint64_t)this + 144, v37);
      sub_1C4774094((llvm::SmallPtrSetImplBase *)(v24 + 8), (uint64_t)a2);
      return v6[1];
    }
  }
  return result;
}

int32x2_t sub_1C4EC70EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  int32x2_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = 0;
  if (sub_1C4ECCE58(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v12))
    v5 = v12;
  else
    v5 = *(_QWORD *)a1 + 72 * *(unsigned int *)(a1 + 16);
  v6 = sub_1C477672C(v5 + 8, a3);
  v8 = *(_QWORD *)(v5 + 16);
  v9 = 24;
  if (v8 == *(_QWORD *)(v5 + 8))
    v9 = 28;
  if (v6 == (_QWORD *)(v8 + 8 * *(unsigned int *)(v5 + v9)))
  {
    v10 = *(_DWORD *)(v5 + 32);
  }
  else
  {
    *v6 = -2;
    v10 = *(_DWORD *)(v5 + 32) + 1;
    *(_DWORD *)(v5 + 32) = v10;
  }
  if (*(_DWORD *)(v5 + 28) == v10)
  {
    v11 = *(void **)(v5 + 16);
    if (v11 != *(void **)(v5 + 8))
      free(v11);
    *(_QWORD *)v5 = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

_QWORD *llvm::MemoryDependenceResults::getNonLocalCallDependency(llvm::MemoryDependenceResults *this, llvm::CallBase *a2)
{
  llvm::CallBase *v2;
  uint64_t v3;
  char *v4;
  int v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  llvm::MemoryDependenceResults *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  _QWORD *v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  unint64_t *v51;
  unint64_t *v52;
  _BYTE *v53;
  int v54;
  uint64_t v55;
  char *v57;
  llvm::CallBase *v58;
  char *v60;
  unint64_t **v61;
  unint64_t v62;
  _QWORD *v63;
  _BYTE *v64;
  uint64_t v65;
  int v66;
  _BYTE v67[256];
  void *v68;
  uint64_t v69;
  _QWORD v70[34];

  v2 = a2;
  v70[32] = *MEMORY[0x1E0C80C00];
  v68 = a2;
  v4 = (char *)this + 120;
  v3 = *((_QWORD *)this + 15);
  v63 = 0;
  v5 = sub_1C4B04B98(v3, *((_DWORD *)v4 + 4), (uint64_t)a2, &v63);
  v6 = v63;
  if (v5)
  {
    v7 = (uint64_t *)v63[1];
  }
  else
  {
    v6 = sub_1C4ECB878((uint64_t)v4, (uint64_t *)&v68, v63);
    v7 = 0;
    *v6 = v2;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = 0;
    *((_BYTE *)v6 + 32) = 0;
  }
  v61 = (unint64_t **)(v6 + 1);
  v68 = v70;
  v69 = 0x2000000000;
  v8 = (uint64_t *)v6[2];
  v58 = v2;
  v9 = this;
  if (v7 == v8)
  {
    v16 = *((_QWORD *)v2 + 5);
    v17 = sub_1C4ECA3D4((uint64_t)this + 232, v16);
    v18 = sub_1C4ECA658((uint64_t)this + 232, v16);
    sub_1C4ECC4B8((unsigned int *)&v68, (uint64_t)v68 + 8 * v69, v17, &v17[8 * v18]);
  }
  else
  {
    if (!*((_BYTE *)v6 + 32))
      return v6 + 1;
    v10 = 0;
    do
    {
      if ((v7[1] & 7) == 0)
      {
        v11 = *v7;
        if (v10 >= HIDWORD(v69))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, (uint64_t)v70, v10 + 1, 8);
          v10 = v69;
        }
        *((_QWORD *)v68 + v10) = v11;
        v10 = v69 + 1;
        LODWORD(v69) = v69 + 1;
      }
      v7 += 2;
    }
    while (v7 != v8);
    v12 = v6[1];
    v13 = (unint64_t *)v6[2];
    v14 = 126 - 2 * __clz(((uint64_t)v13 - v12) >> 4);
    if (v13 == (unint64_t *)v12)
      v15 = 0;
    else
      v15 = v14;
    sub_1C4ECBABC(v12, v13, v15, 1);
  }
  v19 = *((_QWORD *)this + 24);
  v20 = *(_QWORD **)(v19 + 8);
  v21 = *(_QWORD **)(v19 + 16);
  v22 = 63;
  while (v20 != v21)
  {
    v22 &= (*(uint64_t (**)(_QWORD, llvm::CallBase *))(*(_QWORD *)*v20 + 48))(*v20, v2);
    if (v22 == 4)
      break;
    ++v20;
  }
  v63 = v67;
  v64 = v67;
  v65 = 32;
  v66 = 0;
  v23 = v69;
  if (!(_DWORD)v69)
    goto LABEL_81;
  v24 = ((v6[2] - v6[1]) >> 4);
  v57 = (char *)this + 168;
  v60 = (char *)this + 232;
  do
  {
    v25 = *((_QWORD *)v68 + v23 - 1);
    LODWORD(v69) = v23 - 1;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v63, v25);
    if (!v26)
      goto LABEL_76;
    v27 = *v61;
    if (v24)
    {
      v28 = v24;
      v29 = *v61;
      do
      {
        v30 = v28 >> 1;
        v31 = &v29[2 * (v28 >> 1)];
        v33 = *v31;
        v32 = v31 + 2;
        v28 += ~(v28 >> 1);
        if (v25 < v33)
          v28 = v30;
        else
          v29 = v32;
      }
      while (v28);
      v34 = *v61;
      if (v29 != v27)
      {
        if (*(v29 - 2) == v25)
          v34 = v29 - 2;
        else
          v34 = v29;
      }
    }
    else
    {
      v34 = *v61;
    }
    if (v34 != &v27[2 * v24] && *v34 == v25)
    {
      v43 = v34[1];
      if ((v43 & 7) != 0)
        goto LABEL_76;
      v44 = v43 & 0xFFFFFFFFFFFFFFF8;
      if ((v43 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v35 = (_QWORD *)(v44 + 24);
        sub_1C4EC70EC((uint64_t)v57, v44, (uint64_t)v2);
        v36 = 0;
      }
      else
      {
        v36 = 0;
        v35 = (_QWORD *)(v25 + 40);
      }
    }
    else
    {
      v34 = 0;
      v35 = (_QWORD *)(v25 + 40);
      v36 = 1;
    }
    if (v35 == *(_QWORD **)(v25 + 48))
    {
      v41 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 80);
      if (v41)
        v42 = v41 - 24;
      else
        v42 = 0;
      if (v25 == v42)
        v37 = 0x4000000000000003;
      else
        v37 = 0x2000000000000003;
      if ((v36 & 1) != 0)
      {
LABEL_39:
        v39 = (unint64_t *)v6[2];
        v38 = v6[3];
        if ((unint64_t)v39 >= v38)
        {
          v45 = *v61;
          v46 = ((char *)v39 - (char *)*v61) >> 4;
          v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 60)
            abort();
          v48 = v38 - (_QWORD)v45;
          if (v48 >> 3 > v47)
            v47 = v48 >> 3;
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0)
            v49 = 0xFFFFFFFFFFFFFFFLL;
          else
            v49 = v47;
          if (v49)
          {
            if (v49 >> 60)
              sub_1C4764EE4();
            v50 = (char *)operator new(16 * v49);
          }
          else
          {
            v50 = 0;
          }
          v51 = (unint64_t *)&v50[16 * v46];
          *v51 = v25;
          v51[1] = v37;
          v52 = v51;
          if (v39 == v45)
          {
            v9 = this;
          }
          else
          {
            v9 = this;
            do
            {
              *((_OWORD *)v52 - 1) = *((_OWORD *)v39 - 1);
              v52 -= 2;
              v39 -= 2;
            }
            while (v39 != v45);
            v39 = *v61;
          }
          v40 = v51 + 2;
          v6[1] = v52;
          v6[2] = v51 + 2;
          v6[3] = &v50[16 * v49];
          if (v39)
            operator delete(v39);
          v2 = v58;
        }
        else
        {
          *v39 = v25;
          v39[1] = v37;
          v40 = v39 + 2;
        }
        v6[2] = v40;
        goto LABEL_71;
      }
    }
    else
    {
      v37 = llvm::MemoryDependenceResults::getCallDependencyFrom((uint64_t)v9, v2, (v22 & 2) == 0, v35, v25);
      if ((v36 & 1) != 0)
        goto LABEL_39;
    }
    v34[1] = v37;
LABEL_71:
    if ((v37 & 0xE000000000000007) == 0x2000000000000003)
    {
      v53 = sub_1C4ECA3D4((uint64_t)v60, v25);
      v54 = sub_1C4ECA658((uint64_t)v60, v25);
      sub_1C4ECC4B8((unsigned int *)&v68, (uint64_t)v68 + 8 * v69, v53, &v53[8 * v54]);
    }
    else if ((v37 & 7u) <= 2uLL)
    {
      v62 = v37 & 0xFFFFFFFFFFFFFFF8;
      if ((v37 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        sub_1C4ECB50C((uint64_t)v57, (uint64_t *)&v62);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)(v55 + 8), (uint64_t)v2);
      }
    }
LABEL_76:
    v23 = v69;
  }
  while ((_DWORD)v69);
  if (v64 != (_BYTE *)v63)
    free(v64);
LABEL_81:
  if (v68 != v70)
    free(v68);
  return v6 + 1;
}

void llvm::MemoryDependenceResults::getNonLocalPointerDependency(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v20[3];
  _QWORD v21[2];
  int v22;
  _OWORD v23[3];
  __int128 v24;
  __int128 v25;
  void *v26[2];
  _QWORD v27[5];

  v27[4] = *MEMORY[0x1E0C80C00];
  llvm::MemoryLocation::getOrNone((uint64_t ***)a2, (uint64_t)&v24);
  v23[0] = v24;
  v23[1] = v25;
  v23[2] = *(_OWORD *)v26;
  v6 = *(unsigned __int8 *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a3 + 8) = 0;
  *(_QWORD *)&v24 = 0;
  if (sub_1C4ECB0EC(*(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 40), a2, &v24))
  {
    v8 = v24;
    if ((_QWORD)v24 != *(_QWORD *)(a1 + 24) + 32 * *(unsigned int *)(a1 + 40))
    {
      v17 = sub_1C4DC1E54(a3, v24 + 8);
      v18 = *(_QWORD *)a3 + 24 * *(unsigned int *)(a3 + 8);
      v19 = *(_OWORD *)v17;
      *(_QWORD *)(v18 + 16) = *(_QWORD *)(v17 + 16);
      *(_OWORD *)v18 = v19;
      ++*(_DWORD *)(a3 + 8);
      __asm { BR              X12 }
    }
  }
  if ((llvm::Instruction::isVolatile((llvm::Instruction *)a2) & 1) != 0
    || *(unsigned __int8 *)(a2 + 16) - 62 >= 0xFFFFFFFE && (*(_WORD *)(a2 + 18) & 0x301) != 0)
  {
    *(_QWORD *)&v24 = v7;
    *((_QWORD *)&v24 + 1) = 0x6000000000000003;
    *(_QWORD *)&v25 = *(_QWORD *)&v23[0];
    v9 = sub_1C4DC1E54(a3, (unint64_t)&v24);
    v10 = *(_QWORD *)a3 + 24 * *(unsigned int *)(a3 + 8);
    v11 = *(_OWORD *)v9;
    *(_QWORD *)(v10 + 16) = *(_QWORD *)(v9 + 16);
    *(_OWORD *)v10 = v11;
    ++*(_DWORD *)(a3 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 40) + 272;
    v13 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)&v24 = *(_QWORD *)&v23[0];
    *((_QWORD *)&v24 + 1) = v12;
    *(_QWORD *)&v25 = 0;
    *((_QWORD *)&v25 + 1) = v13;
    v26[0] = v27;
    v26[1] = (void *)0x400000000;
    if (*(_QWORD *)&v23[0] && *(unsigned __int8 *)(*(_QWORD *)&v23[0] + 16) >= 0x1Cu)
    {
      v27[0] = *(_QWORD *)&v23[0];
      LODWORD(v26[1]) = 1;
    }
    v21[0] = 0;
    v21[1] = 0;
    v22 = 0;
    if ((llvm::MemoryDependenceResults::getNonLocalPointerDepFromBB(a1, (llvm::Instruction *)a2, (unsigned int *)&v24, (uint64_t)v23, v6 == 60, v7, a3, (uint64_t)v21, 1, 0) & 1) == 0)
    {
      *(_DWORD *)(a3 + 8) = 0;
      v20[0] = v7;
      v20[1] = 0x6000000000000003;
      v20[2] = *(_QWORD *)&v23[0];
      v14 = sub_1C4DC1E54(a3, (unint64_t)v20);
      v15 = *(_QWORD *)a3 + 24 * *(unsigned int *)(a3 + 8);
      v16 = *(_OWORD *)v14;
      *(_QWORD *)(v15 + 16) = *(_QWORD *)(v14 + 16);
      *(_OWORD *)v15 = v16;
      ++*(_DWORD *)(a3 + 8);
    }
    MEMORY[0x1CAA32FB4](v21[0], 8);
    if (v26[0] != v27)
      free(v26[0]);
  }
}

uint64_t llvm::MemoryDependenceResults::getNonLocalPointerDepFromBB(uint64_t a1, llvm::Instruction *a2, unsigned int *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, unsigned __int8 a10)
{
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  llvm::Instruction **v25;
  llvm::Instruction *v26;
  llvm::Instruction **v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD **v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  unsigned int v77;
  llvm::BasicBlock *v78;
  unint64_t NonLocalInfoForBlock;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t *v84;
  int v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  int v96;
  BOOL v97;
  int v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  int32x2_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  char v115;
  const void *v116;
  unsigned int v117;
  unint64_t v118;
  BOOL v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  llvm::BasicBlock **v123;
  int v124;
  llvm::BasicBlock **v125;
  llvm::BasicBlock *v126;
  __int128 v127;
  unsigned int v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  llvm::BasicBlock **v137;
  llvm::BasicBlock *v138;
  llvm::BasicBlock **v139;
  int v140;
  BOOL v141;
  int v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  llvm::BasicBlock **v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  unint64_t v153;
  uint64_t v154;
  __int128 v155;
  unint64_t *v156;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  llvm::BasicBlock *v160;
  unint64_t v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  int32x2_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  int v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  unsigned int v177;
  int32x2_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  int v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  int v189;
  unsigned int v190;
  _QWORD *v191;
  uint64_t v192;
  _QWORD *v193;
  int v194;
  BOOL v195;
  unsigned int v196;
  _QWORD *v197;
  _QWORD *v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  __int128 v202;
  uint64_t v203;
  llvm::Instruction **v204;
  llvm::Instruction *v205;
  int v207;
  __int16 v208;
  _BOOL4 v209;
  uint64_t v210;
  unint64_t *v211;
  uint64_t v212;
  unint64_t v213;
  char v214;
  unsigned int v215;
  uint64_t v219;
  __int128 v220;
  const void **v221;
  __int128 v222;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  _BYTE __src[48];
  uint64_t v228;
  _BYTE v229[88];
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD v233[2];
  void *v234;
  uint64_t v235;
  _BYTE v236[128];
  void *v237;
  uint64_t v238;
  uint64_t v239;
  _BYTE v240[1360];
  void *v241;
  uint64_t v242;
  _QWORD v243[35];

  v243[32] = *MEMORY[0x1E0C80C00];
  v14 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFFBLL;
  v15 = 4;
  if (!a5)
    v15 = 0;
  v16 = v14 | v15;
  v226 = v14 | v15;
  v17 = *(_QWORD *)(a4 + 8);
  v18 = *(_OWORD *)(a4 + 16);
  v19 = *(_OWORD *)(a4 + 32);
  if (!a2 || *((_BYTE *)a2 + 16) != 60)
  {
    v209 = 0;
    goto LABEL_24;
  }
  if ((*((_BYTE *)a2 + 23) & 0x20) == 0)
    goto LABEL_22;
  v20 = ***(_QWORD ***)a2;
  *(_QWORD *)v240 = a2;
  v21 = *(_DWORD *)(v20 + 2496);
  if (v21)
  {
    v22 = *(_QWORD *)(v20 + 2480);
    v23 = v21 - 1;
    v24 = v23 & ((a2 >> 4) ^ (a2 >> 9));
    v25 = (llvm::Instruction **)(v22 + 40 * v24);
    v26 = *v25;
    if (*v25 == a2)
      goto LABEL_16;
    v27 = 0;
    v28 = 1;
    while (v26 != (llvm::Instruction *)-4096)
    {
      if (v27)
        v29 = 0;
      else
        v29 = v26 == (llvm::Instruction *)-8192;
      if (v29)
        v27 = v25;
      v30 = v24 + v28++;
      v24 = v30 & v23;
      v25 = (llvm::Instruction **)(v22 + 40 * v24);
      v26 = *v25;
      if (*v25 == a2)
        goto LABEL_16;
    }
    v220 = v19;
    v222 = v18;
    if (v27)
      v204 = v27;
    else
      v204 = v25;
  }
  else
  {
    v220 = v19;
    v222 = v18;
    v204 = 0;
  }
  v25 = (llvm::Instruction **)sub_1C541AB24(v20 + 2480, (uint64_t)v240, (uint64_t *)v240, v204);
  v205 = *(llvm::Instruction **)v240;
  v25[3] = 0;
  v25[4] = 0;
  *v25 = v205;
  v25[1] = (llvm::Instruction *)(v25 + 3);
  v25[2] = (llvm::Instruction *)0x100000000;
  v19 = v220;
  v18 = v222;
LABEL_16:
  v31 = *((unsigned int *)v25 + 4);
  if ((_DWORD)v31)
  {
    v32 = (_QWORD *)((char *)v25[1] + 8);
    v33 = 16 * v31;
    while (*((_DWORD *)v32 - 2) != 6)
    {
      v34 = 0;
      v32 += 2;
      v33 -= 16;
      if (!v33)
        goto LABEL_23;
    }
    v34 = *v32;
    goto LABEL_23;
  }
LABEL_22:
  v34 = 0;
LABEL_23:
  v209 = v34 != 0;
LABEL_24:
  v35 = a10;
  memset(&v240[8], 0, 32);
  *(_QWORD *)v240 = v16;
  *(_QWORD *)&v240[40] = v17;
  *(_OWORD *)&v240[48] = v18;
  *(_OWORD *)&v240[64] = v19;
  v37 = a1 + 72;
  v36 = *(_QWORD *)(a1 + 72);
  v230 = 0;
  v38 = sub_1C4ECC784(v36, *(_DWORD *)(a1 + 88), v16, &v230);
  v39 = v230;
  v219 = a1;
  v212 = a1 + 72;
  if ((v38 & 1) == 0)
  {
    v39 = sub_1C4ECC81C(a1 + 72, (unint64_t *)v240, v230);
    *v39 = v16;
    *(_OWORD *)(v39 + 1) = 0u;
    v211 = v39 + 1;
    *(_OWORD *)(v39 + 3) = 0u;
    *(_OWORD *)(v39 + 5) = *(_OWORD *)&v240[40];
    *(_OWORD *)(v39 + 7) = *(_OWORD *)&v240[56];
    v39[9] = *(_QWORD *)&v240[72];
    goto LABEL_65;
  }
  v211 = v230 + 1;
  if (((v209 | v38 ^ 1) & 1) != 0)
    goto LABEL_65;
  v40 = v230[5];
  v41 = *(_QWORD *)(a4 + 8);
  if (v40 != v41)
  {
    if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > 0xFFFFFFFFFFFFFFFDLL)
    {
      if (v41 <= 0xFFFFFFFFFFFFFFFDLL)
      {
LABEL_31:
        v42 = *(_OWORD *)(a4 + 16);
        *(_OWORD *)v240 = *(_OWORD *)a4;
        *(_OWORD *)&v240[16] = v42;
        *(_OWORD *)&v240[32] = *(_OWORD *)(a4 + 32);
        *(_QWORD *)&v240[8] = v40;
LABEL_286:
        HIBYTE(v208) = v35;
        LOBYTE(v208) = a9;
        return llvm::MemoryDependenceResults::getNonLocalPointerDepFromBB(a1, a2, a3, v240, a5, a6, a7, a8, v208);
      }
    }
    else if (((v41 ^ v40) & 0x8000000000000000) == 0 && (v40 & 0x7FFFFFFFFFFFFFFFLL) >= (v41 & 0x7FFFFFFFFFFFFFFFLL))
    {
      goto LABEL_31;
    }
    v230[1] = 0;
    v39[5] = v41;
    v43 = v39[2];
    v44 = v39[3];
    if (v43 != v44)
    {
      v45 = a1 + 96;
      do
      {
        v46 = *(_QWORD *)(v43 + 8) & 0xFFFFFFFFFFFFFFF8;
        if ((*(_QWORD *)(v43 + 8) & 7uLL) <= 2 && v46 != 0)
          sub_1C4EC8F8C(v45, v46, v16);
        v43 += 16;
      }
      while (v43 != v44);
      v43 = v39[2];
      a1 = v219;
    }
    v39[3] = v43;
    v35 = 1;
    v37 = v212;
  }
  v48 = v39[6];
  v49 = *(_QWORD *)(a4 + 16);
  if (v48 == v49 && v39[7] == *(_QWORD *)(a4 + 24) && v39[8] == *(_QWORD *)(a4 + 32) && v39[9] == *(_QWORD *)(a4 + 40))
    goto LABEL_65;
  if (v48 || v39[7] || v39[8] || v39[9])
  {
    v39[1] = 0;
    *((_OWORD *)v39 + 3) = 0u;
    *((_OWORD *)v39 + 4) = 0u;
    v50 = v39[2];
    v51 = v39[3];
    if (v50 != v51)
    {
      v52 = a1 + 96;
      do
      {
        v53 = *(_QWORD *)(v50 + 8) & 0xFFFFFFFFFFFFFFF8;
        if ((*(_QWORD *)(v50 + 8) & 7uLL) <= 2 && v53 != 0)
          sub_1C4EC8F8C(v52, v53, v16);
        v50 += 16;
      }
      while (v50 != v51);
      v50 = v39[2];
      a1 = v219;
    }
    v39[3] = v50;
    v55 = a4;
    v35 = 1;
    v37 = v212;
    if (*(_QWORD *)(a4 + 16))
      goto LABEL_285;
  }
  else
  {
    v55 = a4;
    if (v49)
    {
LABEL_285:
      *(_OWORD *)v240 = *(_OWORD *)v55;
      memset(&v240[16], 0, 32);
      goto LABEL_286;
    }
  }
  if (*(_QWORD *)(v55 + 24) || *(_QWORD *)(v55 + 32) || *(_QWORD *)(v55 + 40))
    goto LABEL_285;
LABEL_65:
  if (((v35 | v209) & 1) == 0)
  {
    v56 = 4;
    if (!a9)
      v56 = 0;
    if (*v211 == (v56 | a6 & 0xFFFFFFFFFFFFFFFBLL))
    {
      if (*(_DWORD *)(a8 + 8))
      {
        v57 = (uint64_t *)v39[2];
        v58 = (uint64_t *)v39[3];
        if (v57 != v58)
        {
          v59 = *(_QWORD *)a3;
          v60 = *(_QWORD *)a8;
          v61 = *(unsigned int *)(a8 + 16);
          v62 = v61 - 1;
          v63 = (uint64_t *)v39[2];
          while (1)
          {
            if ((_DWORD)v61)
            {
              LODWORD(v64) = ((*v63 >> 4) ^ (*v63 >> 9)) & v62;
              v65 = (uint64_t *)(v60 + 16 * v64);
              v66 = *v65;
              if (*v63 != *v65)
              {
                v67 = 1;
                do
                {
                  if (v66 == -4096)
                    goto LABEL_80;
                  v68 = v64 + v67++;
                  v64 = v68 & v62;
                  v66 = *(_QWORD *)(v60 + 16 * v64);
                }
                while (*v63 != v66);
                v65 = (uint64_t *)(v60 + 16 * v64);
              }
              if (v65 != (uint64_t *)(*(_QWORD *)a8 + 16 * v61) && v65[1] != v59)
                return 0;
            }
LABEL_80:
            v63 += 2;
            if (v63 == v58)
              goto LABEL_253;
          }
        }
        return 1;
      }
      v59 = *(_QWORD *)a3;
      v57 = (uint64_t *)v39[2];
      v58 = (uint64_t *)v39[3];
LABEL_253:
      if (v57 == v58)
        return 1;
      while (1)
      {
        v187 = *v57;
        *(_QWORD *)v240 = *v57;
        *(_QWORD *)&v240[8] = v59;
        v188 = *(_DWORD *)(a8 + 16);
        if (v188)
        {
          v189 = v188 - 1;
          v190 = v189 & ((v187 >> 4) ^ (v187 >> 9));
          v191 = (_QWORD *)(*(_QWORD *)a8 + 16 * v190);
          v192 = *v191;
          if (v187 == *v191)
            goto LABEL_269;
          v193 = 0;
          v194 = 1;
          while (v192 != -4096)
          {
            if (v193)
              v195 = 0;
            else
              v195 = v192 == -8192;
            if (v195)
              v193 = v191;
            v196 = v190 + v194++;
            v190 = v196 & v189;
            v191 = (_QWORD *)(*(_QWORD *)a8 + 16 * v190);
            v192 = *v191;
            if (v187 == *v191)
              goto LABEL_269;
          }
          if (v193)
            v197 = v193;
          else
            v197 = v191;
        }
        else
        {
          v197 = 0;
        }
        v198 = sub_1C4ECCA58(a8, (uint64_t)v240, (uint64_t *)v240, v197);
        *v198 = *(_QWORD *)v240;
        v198[1] = *(_QWORD *)&v240[8];
LABEL_269:
        if ((v57[1] & 0xE000000000000007) != 0x2000000000000003
          && llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(*(_QWORD *)(a1 + 216), *v57))
        {
          v199 = v57[1];
          *(_QWORD *)v240 = *v57;
          *(_QWORD *)&v240[8] = v199;
          *(_QWORD *)&v240[16] = v59;
          v200 = sub_1C4DC1E54(a7, (unint64_t)v240);
          v201 = *(_QWORD *)a7 + 24 * *(unsigned int *)(a7 + 8);
          v202 = *(_OWORD *)v200;
          *(_QWORD *)(v201 + 16) = *(_QWORD *)(v200 + 16);
          *(_OWORD *)v201 = v202;
          ++*(_DWORD *)(a7 + 8);
        }
        v57 += 2;
        if (v57 == v58)
          return 1;
      }
    }
  }
  v69 = v39 + 2;
  if (!v209)
  {
    if ((v35 & 1) == 0 && v39[2] == v39[3])
    {
      v203 = 4;
      if (!a9)
        v203 = 0;
      v70 = v203 | a6 & 0xFFFFFFFFFFFFFFFBLL;
    }
    else
    {
      v70 = 0;
    }
    *v211 = v70;
  }
  v241 = v243;
  v243[0] = a6;
  v242 = 0x2000000001;
  *(_QWORD *)v240 = &v240[16];
  *(_QWORD *)&v240[8] = 0x1000000000;
  v71 = v39[3] - v39[2];
  v215 = dword_1ED7F2B70;
  v230 = *(_QWORD **)(a1 + 192);
  v231 = 1;
  v72 = 2;
  do
  {
    v73 = &(&v230)[v72];
    *(_OWORD *)v73 = xmmword_1C85F2120;
    *((_OWORD *)v73 + 1) = xmmword_1C85F2120;
    v72 += 5;
  }
  while (v73 + 5 != v233);
  v233[0] = &v237;
  v233[1] = 0;
  v234 = v236;
  v235 = 0x400000000;
  v237 = &unk_1E8134870;
  v238 = 1;
  v74 = 64;
  v75 = a9;
  do
  {
    (&v230)[v74] = (_QWORD *)-4096;
    v74 += 2;
  }
  while (v74 != 80);
  v76 = v71 >> 4;
  v221 = (const void **)(a3 + 8);
  v210 = a1 + 232;
  v77 = 1;
  LODWORD(v213) = v76;
  while (1)
  {
    v78 = (llvm::BasicBlock *)*((_QWORD *)v241 + v77 - 1);
    LODWORD(v242) = v77 - 1;
    if (*(_DWORD *)(a7 + 8) >= 0x65u)
    {
      LODWORD(v242) = 0;
      if (v69 && v213 != (v69[1] - *v69) >> 4)
        sub_1C4EC9074(v69, v213);
      v186 = 0;
      *v211 = 0;
      goto LABEL_244;
    }
    if ((v75 & 1) != 0)
      break;
    NonLocalInfoForBlock = llvm::MemoryDependenceResults::getNonLocalInfoForBlock((llvm::DominatorTree **)a1, a2, (_QWORD *)a4, a5, v78, (char **)v69, v213, &v230);
    if ((NonLocalInfoForBlock & 0xE000000000000007) == 0x2000000000000003)
      break;
    v80 = NonLocalInfoForBlock;
    if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(*(_QWORD *)(a1 + 216), (uint64_t)v78))
      break;
    v81 = *(_QWORD *)a3;
    *(_QWORD *)__src = v78;
    *(_QWORD *)&__src[8] = v80;
LABEL_212:
    *(_QWORD *)&__src[16] = v81;
    v161 = sub_1C4DC1E54(a7, (unint64_t)__src);
    v162 = *(_QWORD *)a7 + 24 * *(unsigned int *)(a7 + 8);
    v163 = *(_OWORD *)v161;
    *(_QWORD *)(v162 + 16) = *(_QWORD *)(v161 + 16);
    *(_OWORD *)v162 = v163;
    ++*(_DWORD *)(a7 + 8);
LABEL_213:
    v75 = 0;
    v77 = v242;
    if (!(_DWORD)v242)
    {
      sub_1C4EC9074(v69, v213);
      v186 = 1;
      goto LABEL_244;
    }
  }
  v82 = a3[10];
  if (!(_DWORD)v82)
  {
LABEL_101:
    *(_QWORD *)__src = &__src[16];
    *(_QWORD *)&__src[8] = 0x1000000000;
    v84 = (uint64_t *)sub_1C4ECA3D4(v210, (uint64_t)v78);
    v85 = sub_1C4ECA658(v210, (uint64_t)v78);
    if (v85)
    {
      v86 = &v84[v85];
      while (1)
      {
        v87 = *v84;
        v88 = *(_QWORD *)a3;
        v224 = *v84;
        v225 = v88;
        v89 = *(_DWORD *)(a8 + 16);
        if (!v89)
          break;
        v90 = *(_QWORD *)a8;
        v91 = v89 - 1;
        v92 = v91 & ((v87 >> 4) ^ (v87 >> 9));
        v93 = (_QWORD *)(*(_QWORD *)a8 + 16 * v92);
        v94 = *v93;
        if (v87 != *v93)
        {
          v95 = 0;
          v96 = 1;
          while (v94 != -4096)
          {
            if (v95)
              v97 = 0;
            else
              v97 = v94 == -8192;
            if (v97)
              v95 = v93;
            v98 = v92 + v96++;
            v92 = v98 & v91;
            v93 = (_QWORD *)(v90 + 16 * v92);
            v94 = *v93;
            if (v87 == *v93)
              goto LABEL_113;
          }
          if (v95)
            v99 = v95;
          else
            v99 = v93;
          goto LABEL_118;
        }
LABEL_113:
        if (*(_QWORD *)(v90 + 16 * v92 + 8) != v88)
        {
          v164 = *(unsigned int *)&__src[8];
          if (*(_DWORD *)&__src[8])
          {
            v165 = 0;
            v166 = *(int32x2_t *)(a8 + 8);
            do
            {
              v167 = *(_QWORD *)a8;
              v168 = *(_QWORD *)(*(_QWORD *)__src + 8 * v165);
              LODWORD(v169) = ((v168 >> 4) ^ (v168 >> 9)) & v91;
              v170 = (uint64_t *)(*(_QWORD *)a8 + 16 * v169);
              v171 = *v170;
              if (v168 == *v170)
              {
LABEL_222:
                *v170 = -8192;
                v166 = vadd_s32(v166, (int32x2_t)0x1FFFFFFFFLL);
                *(int32x2_t *)(a8 + 8) = v166;
              }
              else
              {
                v172 = 1;
                while (v171 != -4096)
                {
                  v173 = v169 + v172++;
                  v169 = v173 & v91;
                  v171 = *(_QWORD *)(v167 + 16 * v169);
                  if (v168 == v171)
                  {
                    v170 = (uint64_t *)(v167 + 16 * v169);
                    goto LABEL_222;
                  }
                }
              }
              ++v165;
            }
            while (v165 != v164);
          }
          goto LABEL_134;
        }
LABEL_121:
        if (++v84 == v86)
          goto LABEL_124;
      }
      v99 = 0;
LABEL_118:
      v100 = sub_1C4ECCA58(a8, (uint64_t)&v224, &v224, v99);
      *v100 = v224;
      v100[1] = v225;
      v101 = *(unsigned int *)&__src[8];
      if (*(unsigned int *)&__src[8] >= (unint64_t)*(unsigned int *)&__src[12])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, (uint64_t)&__src[16], *(unsigned int *)&__src[8] + 1, 8);
        v101 = *(unsigned int *)&__src[8];
      }
      *(_QWORD *)(*(_QWORD *)__src + 8 * v101) = v87;
      ++*(_DWORD *)&__src[8];
      goto LABEL_121;
    }
LABEL_124:
    v102 = *(unsigned int *)&__src[8];
    if (v215 < *(_DWORD *)&__src[8])
    {
      v103 = 0;
      v104 = *(_DWORD *)(a8 + 16);
      v105 = v104 - 1;
      v106 = *(int32x2_t *)(a8 + 8);
      do
      {
        if (v104)
        {
          v107 = *(_QWORD *)a8;
          v108 = *(_QWORD *)(*(_QWORD *)__src + 8 * v103);
          LODWORD(v109) = ((v108 >> 4) ^ (v108 >> 9)) & v105;
          v110 = (uint64_t *)(*(_QWORD *)a8 + 16 * v109);
          v111 = *v110;
          if (v108 == *v110)
          {
LABEL_132:
            *v110 = -8192;
            v106 = vadd_s32(v106, (int32x2_t)0x1FFFFFFFFLL);
            *(int32x2_t *)(a8 + 8) = v106;
          }
          else
          {
            v112 = 1;
            while (v111 != -4096)
            {
              v113 = v109 + v112++;
              v109 = v113 & v105;
              v111 = *(_QWORD *)(v107 + 16 * v109);
              if (v108 == v111)
              {
                v110 = (uint64_t *)(v107 + 16 * v109);
                goto LABEL_132;
              }
            }
          }
        }
        ++v103;
      }
      while (v103 != v102);
LABEL_134:
      v114 = 0;
      v115 = 1;
      goto LABEL_139;
    }
    v116 = *(const void **)__src;
    v117 = v242;
    v118 = v242 + (unint64_t)*(unsigned int *)&__src[8];
    if (v118 > HIDWORD(v242))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v241, (uint64_t)v243, v118, 8);
      v117 = v242;
      if (!(_DWORD)v102)
        goto LABEL_138;
    }
    else if (!*(_DWORD *)&__src[8])
    {
LABEL_138:
      v115 = 0;
      v215 -= v102;
      LODWORD(v242) = v117 + v102;
      v114 = 1;
LABEL_139:
      if (*(_BYTE **)__src != &__src[16])
        free(*(void **)__src);
      if ((v115 & 1) == 0)
      {
        v37 = v212;
        if (!v114)
          goto LABEL_243;
        goto LABEL_213;
      }
      if (!v69)
      {
        v75 = 0;
        v37 = v212;
        goto LABEL_202;
      }
      *v211 = 0;
      v37 = v212;
      goto LABEL_206;
    }
    memcpy((char *)v241 + 8 * v117, v116, 8 * v102);
    v117 = v242;
    goto LABEL_138;
  }
  v83 = (char *)*v221;
  while (*(llvm::BasicBlock **)(*(_QWORD *)v83 + 40) != v78)
  {
    v83 += 8;
    if (!--v82)
      goto LABEL_101;
  }
  if (*(_QWORD *)a3)
    v119 = *(unsigned __int8 *)(*(_QWORD *)a3 + 16) > 0x1Bu;
  else
    v119 = 0;
  if (v119 && !sub_1C4EF2D28(*(_QWORD *)a3))
  {
    if (!v69)
      goto LABEL_202;
    *v211 = 0;
    if ((v75 & 1) != 0)
      goto LABEL_243;
LABEL_206:
    if (!v209)
    {
      v159 = v69[1];
      while (v159 != *v69)
      {
        v160 = *(llvm::BasicBlock **)(v159 - 16);
        v159 -= 16;
        if (v160 == v78)
        {
          *(_QWORD *)(v159 + 8) = 0x6000000000000003;
          break;
        }
      }
    }
    v81 = *(_QWORD *)a3;
    *(_QWORD *)__src = v78;
    *(_QWORD *)&__src[8] = 0x6000000000000003;
    goto LABEL_212;
  }
  if (v69 && v213 != (v69[1] - *v69) >> 4)
    sub_1C4EC9074(v69, v213);
  if (*(_DWORD *)&v240[8])
  {
    v120 = *(_QWORD *)v240;
    v121 = 88 * *(unsigned int *)&v240[8];
    do
    {
      v122 = *(void **)(v120 + v121 - 48);
      if ((void *)(v120 + v121 - 32) != v122)
        free(v122);
      v121 -= 88;
    }
    while (v121);
  }
  v214 = v75;
  *(_DWORD *)&v240[8] = 0;
  v123 = (llvm::BasicBlock **)sub_1C4ECA3D4(v210, (uint64_t)v78);
  v124 = sub_1C4ECA658(v210, (uint64_t)v78);
  if (!v124)
  {
LABEL_194:
    v37 = v212;
    if (*(_DWORD *)&v240[8])
    {
      v148 = 0;
      v149 = 88 * *(unsigned int *)&v240[8];
      do
      {
        v150 = *(_QWORD *)(*(_QWORD *)v240 + v148);
        v151 = *(_QWORD *)(*(_QWORD *)v240 + v148 + 8);
        if (!v151
          || (v152 = *(_OWORD *)(a4 + 16),
              *(_OWORD *)__src = *(_OWORD *)a4,
              *(_OWORD *)&__src[16] = v152,
              *(_OWORD *)&__src[32] = *(_OWORD *)(a4 + 32),
              *(_QWORD *)__src = v151,
              LOWORD(v207) = 0,
              (llvm::MemoryDependenceResults::getNonLocalPointerDepFromBB(a1, a2, *(_QWORD *)v240 + v148 + 8, __src, a5, v150, a7, a8, v207) & 1) == 0))
        {
          *(_QWORD *)__src = v150;
          *(_QWORD *)&__src[8] = 0x6000000000000003;
          *(_QWORD *)&__src[16] = v151;
          v153 = sub_1C4DC1E54(a7, (unint64_t)__src);
          v154 = *(_QWORD *)a7 + 24 * *(unsigned int *)(a7 + 8);
          v155 = *(_OWORD *)v153;
          *(_QWORD *)(v154 + 16) = *(_QWORD *)(v153 + 16);
          *(_OWORD *)v154 = v155;
          ++*(_DWORD *)(a7 + 8);
          sub_1C4ECCDD8(v212, &v226)[1] = 0;
        }
        v148 += 88;
      }
      while (v149 != v148);
    }
    v156 = sub_1C4ECCDD8(v212, &v226);
    v156[1] = 0;
    v69 = (uint64_t *)(++v156 + 1);
    v211 = v156;
    v213 = (v156[2] - v156[1]) >> 4;
    goto LABEL_213;
  }
  v125 = &v123[v124];
  while (2)
  {
    v126 = *v123;
    v127 = *((_OWORD *)a3 + 1);
    *(_OWORD *)&__src[8] = *(_OWORD *)a3;
    *(_OWORD *)&__src[24] = v127;
    *(_QWORD *)__src = v126;
    *(_QWORD *)&__src[40] = v229;
    v228 = 0x400000000;
    v128 = a3[10];
    if (v128 && &__src[40] != (_BYTE *)v221)
    {
      if (v128 < 5)
      {
        v129 = v229;
        v130 = a3[10];
        goto LABEL_166;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src[40], (uint64_t)v229, a3[10], 8);
      v130 = a3[10];
      if ((_DWORD)v130)
      {
        v129 = *(_BYTE **)&__src[40];
LABEL_166:
        memcpy(v129, *v221, 8 * v130);
      }
      LODWORD(v228) = v128;
    }
    sub_1C4EC91B0((uint64_t)v240, (unint64_t)__src);
    if (*(_BYTE **)&__src[40] != v229)
      free(*(void **)&__src[40]);
    v131 = *(_QWORD *)v240 + 88 * *(unsigned int *)&v240[8];
    llvm::PHITransAddr::PHITranslateValue((llvm::PHITransAddr *)(v131 - 80), v78, v126, *(const llvm::DominatorTree **)(a1 + 216), 0);
    v132 = *(_QWORD *)(v131 - 80);
    *(_QWORD *)__src = v126;
    *(_QWORD *)&__src[8] = v132;
    v133 = *(_DWORD *)(a8 + 16);
    if (!v133)
    {
      v146 = 0;
      goto LABEL_188;
    }
    v134 = *(_QWORD *)a8;
    v135 = v133 - 1;
    v136 = v135 & ((v126 >> 4) ^ (v126 >> 9));
    v137 = (llvm::BasicBlock **)(*(_QWORD *)a8 + 16 * v136);
    v138 = *v137;
    if (v126 != *v137)
    {
      v139 = 0;
      v140 = 1;
      while (v138 != (llvm::BasicBlock *)-4096)
      {
        if (v139)
          v141 = 0;
        else
          v141 = v138 == (llvm::BasicBlock *)-8192;
        if (v141)
          v139 = v137;
        v142 = v136 + v140++;
        v136 = v142 & v135;
        v137 = (llvm::BasicBlock **)(v134 + 16 * v136);
        v138 = *v137;
        if (v126 == *v137)
          goto LABEL_180;
      }
      if (v139)
        v146 = v139;
      else
        v146 = v137;
      a1 = v219;
LABEL_188:
      v147 = sub_1C4ECCA58(a8, (uint64_t)__src, (uint64_t *)__src, v146);
      *v147 = *(_QWORD *)__src;
      v147[1] = *(_QWORD *)&__src[8];
LABEL_189:
      if (++v123 == v125)
        goto LABEL_194;
      continue;
    }
    break;
  }
LABEL_180:
  --*(_DWORD *)&v240[8];
  v143 = *(_QWORD *)v240 + 88 * *(unsigned int *)&v240[8];
  v144 = *(void **)(v143 + 40);
  if (v144 != (void *)(v143 + 56))
    free(v144);
  v145 = *(_QWORD *)(v134 + 16 * v136 + 8);
  a1 = v219;
  if (v145 == v132)
    goto LABEL_189;
  v174 = *(unsigned int *)&v240[8];
  if (*(_DWORD *)&v240[8])
  {
    v175 = 0;
    v176 = *(_DWORD *)(a8 + 16);
    v177 = v176 - 1;
    v178 = *(int32x2_t *)(a8 + 8);
    v37 = v212;
    v75 = v214;
    do
    {
      if (v176)
      {
        v179 = *(_QWORD *)a8;
        v180 = *(_QWORD *)(*(_QWORD *)v240 + 88 * v175);
        LODWORD(v181) = ((v180 >> 4) ^ (v180 >> 9)) & v177;
        v182 = (uint64_t *)(*(_QWORD *)a8 + 16 * v181);
        v183 = *v182;
        if (v180 == *v182)
        {
LABEL_233:
          *v182 = -8192;
          v178 = vadd_s32(v178, (int32x2_t)0x1FFFFFFFFLL);
          *(int32x2_t *)(a8 + 8) = v178;
        }
        else
        {
          v184 = 1;
          while (v183 != -4096)
          {
            v185 = v181 + v184++;
            v181 = v185 & v177;
            v183 = *(_QWORD *)(v179 + 16 * v181);
            if (v180 == v183)
            {
              v182 = (uint64_t *)(v179 + 16 * v181);
              goto LABEL_233;
            }
          }
        }
      }
      ++v175;
    }
    while (v175 != v174);
  }
  else
  {
    v37 = v212;
    v75 = v214;
  }
LABEL_202:
  v157 = sub_1C4ECCDD8(v37, &v226);
  v157[1] = 0;
  v158 = v157 + 1;
  if ((v75 & 1) == 0)
  {
    v69 = v158 + 1;
    v211 = v158;
    v213 = (v158[2] - v158[1]) >> 4;
    goto LABEL_206;
  }
LABEL_243:
  v186 = 0;
LABEL_244:
  if ((v238 & 1) == 0)
    MEMORY[0x1CAA32FB4](v239, 8);
  if (v234 != v236)
    free(v234);
  if ((v231 & 1) == 0)
    MEMORY[0x1CAA32FB4](v232, 8);
  sub_1C4ECCB88((char **)v240);
  if (v241 != v243)
    free(v241);
  return v186;
}

unint64_t llvm::MemoryDependenceResults::getNonLocalInfoForBlock(llvm::DominatorTree **a1, llvm::Instruction *a2, _QWORD *a3, int a4, _QWORD *a5, char **a6, unsigned int a7, _DWORD *a8)
{
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  llvm::Instruction **v21;
  llvm::Instruction *v22;
  llvm::Instruction **v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  char *v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  unint64_t *v36;
  char *v37;
  unint64_t v38;
  char *v39;
  char *v40;
  unint64_t PointerDependencyFrom;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  llvm::Instruction **v58;
  uint64_t v59;
  llvm::Instruction *v60;

  if (!a2 || *((_BYTE *)a2 + 16) != 60)
  {
    v31 = 0;
    goto LABEL_22;
  }
  if ((*((_BYTE *)a2 + 23) & 0x20) == 0)
    goto LABEL_20;
  v16 = ***(_QWORD ***)a2;
  v60 = a2;
  v17 = *(_DWORD *)(v16 + 2496);
  if (v17)
  {
    v18 = *(_QWORD *)(v16 + 2480);
    v19 = v17 - 1;
    v20 = v19 & ((a2 >> 4) ^ (a2 >> 9));
    v21 = (llvm::Instruction **)(v18 + 40 * v20);
    v22 = *v21;
    if (*v21 == a2)
      goto LABEL_14;
    v23 = 0;
    v24 = 1;
    while (v22 != (llvm::Instruction *)-4096)
    {
      if (v23)
        v25 = 0;
      else
        v25 = v22 == (llvm::Instruction *)-8192;
      if (v25)
        v23 = v21;
      v26 = v20 + v24++;
      v20 = v26 & v19;
      v21 = (llvm::Instruction **)(v18 + 40 * v20);
      v22 = *v21;
      if (*v21 == a2)
        goto LABEL_14;
    }
    if (v23)
      v58 = v23;
    else
      v58 = v21;
  }
  else
  {
    v58 = 0;
  }
  v21 = (llvm::Instruction **)sub_1C541AB24(v16 + 2480, (uint64_t)&v60, (uint64_t *)&v60, v58);
  v59 = (uint64_t)v60;
  v21[3] = 0;
  v21[4] = 0;
  *v21 = (llvm::Instruction *)v59;
  v21[1] = (llvm::Instruction *)(v21 + 3);
  v21[2] = (llvm::Instruction *)0x100000000;
LABEL_14:
  v27 = *((unsigned int *)v21 + 4);
  if ((_DWORD)v27)
  {
    v28 = (_QWORD *)((char *)v21[1] + 8);
    v29 = 16 * v27;
    while (*((_DWORD *)v28 - 2) != 6)
    {
      v30 = 0;
      v28 += 2;
      v29 -= 16;
      if (!v29)
        goto LABEL_21;
    }
    v30 = *v28;
    goto LABEL_21;
  }
LABEL_20:
  v30 = 0;
LABEL_21:
  v31 = v30 != 0;
LABEL_22:
  v32 = *a6;
  if (a7)
  {
    v33 = a7;
    v34 = *a6;
    do
    {
      v35 = v33 >> 1;
      v36 = (unint64_t *)&v34[16 * (v33 >> 1)];
      v38 = *v36;
      v37 = (char *)(v36 + 2);
      v33 += ~(v33 >> 1);
      if (v38 > (unint64_t)a5)
        v33 = v35;
      else
        v34 = v37;
    }
    while (v33);
    v39 = *a6;
    if (v34 != v32)
    {
      if (*((_QWORD **)v34 - 2) == a5)
        v39 = v34 - 16;
      else
        v39 = v34;
    }
  }
  else
  {
    v39 = *a6;
  }
  if (v39 == &v32[16 * a7])
    goto LABEL_42;
  if (*(_QWORD **)v39 == a5)
    v40 = v39;
  else
    v40 = 0;
  if (*(_QWORD **)v39 == a5 && v31)
  {
    if ((*((_QWORD *)v40 + 1) & 0xE000000000000007) != 0x4000000000000003)
    {
LABEL_42:
      PointerDependencyFrom = llvm::MemoryDependenceResults::getPointerDependencyFrom(a1, (uint64_t)a3, a4, a5 + 5, (llvm::BasicBlock *)a5, a2, 0, a8);
      v43 = PointerDependencyFrom;
      if (v31)
        return v43;
      v45 = a6[1];
      v44 = (unint64_t)a6[2];
      if ((unint64_t)v45 >= v44)
      {
        v48 = *a6;
        v49 = (v45 - *a6) >> 4;
        v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 60)
          abort();
        v51 = v44 - (_QWORD)v48;
        if (v51 >> 3 > v50)
          v50 = v51 >> 3;
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0)
          v52 = 0xFFFFFFFFFFFFFFFLL;
        else
          v52 = v50;
        if (v52)
        {
          if (v52 >> 60)
            sub_1C4764EE4();
          v53 = (char *)operator new(16 * v52);
        }
        else
        {
          v53 = 0;
        }
        v56 = &v53[16 * v49];
        *(_QWORD *)v56 = a5;
        *((_QWORD *)v56 + 1) = v43;
        v46 = v56 + 16;
        if (v45 != v48)
        {
          do
          {
            *((_OWORD *)v56 - 1) = *((_OWORD *)v45 - 1);
            v56 -= 16;
            v45 -= 16;
          }
          while (v45 != v48);
          v45 = *a6;
        }
        *a6 = v56;
        a6[1] = v46;
        a6[2] = &v53[16 * v52];
        if (v45)
          operator delete(v45);
      }
      else
      {
        *(_QWORD *)v45 = a5;
        *((_QWORD *)v45 + 1) = PointerDependencyFrom;
        v46 = v45 + 16;
      }
      a6[1] = v46;
      goto LABEL_70;
    }
  }
  else if (!v40)
  {
    goto LABEL_42;
  }
  v43 = *((_QWORD *)v39 + 1);
  if ((v43 & 7) == 0)
  {
    if (v43 >= 8)
    {
      v47 = (_QWORD *)((v43 & 0xFFFFFFFFFFFFFFF8) + 24);
      v54 = 4;
      if (!a4)
        v54 = 0;
      sub_1C4EC8F8C((uint64_t)(a1 + 12), v43 & 0xFFFFFFFFFFFFFFF8, *a3 & 0xFFFFFFFFFFFFFFFBLL | v54);
    }
    else
    {
      v47 = a5 + 5;
    }
    v55 = llvm::MemoryDependenceResults::getPointerDependencyFrom(a1, (uint64_t)a3, a4, v47, (llvm::BasicBlock *)a5, a2, 0, a8);
    v43 = v55;
    if (!v31)
    {
      *((_QWORD *)v39 + 1) = v55;
LABEL_70:
      if ((v43 & 7) - 1 <= 1)
        __asm { BR              X11 }
    }
  }
  return v43;
}

int32x2_t sub_1C4EC8F8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  int32x2_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = 0;
  if (sub_1C4ECB600(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v12))
    v5 = v12;
  else
    v5 = *(_QWORD *)a1 + 72 * *(unsigned int *)(a1 + 16);
  v6 = sub_1C477672C(v5 + 8, a3);
  v8 = *(_QWORD *)(v5 + 16);
  v9 = 24;
  if (v8 == *(_QWORD *)(v5 + 8))
    v9 = 28;
  if (v6 == (_QWORD *)(v8 + 8 * *(unsigned int *)(v5 + v9)))
  {
    v10 = *(_DWORD *)(v5 + 32);
  }
  else
  {
    *v6 = -2;
    v10 = *(_DWORD *)(v5 + 32) + 1;
    *(_DWORD *)(v5 + 32) = v10;
  }
  if (*(_DWORD *)(v5 + 28) == v10)
  {
    v11 = *(void **)(v5 + 16);
    if (v11 != *(void **)(v5 + 8))
      free(v11);
    *(_QWORD *)v5 = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

void sub_1C4EC9074(uint64_t *a1, unsigned int a2)
{
  char *v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;

  v3 = (char *)*a1;
  v4 = (unint64_t *)a1[1];
  v5 = (uint64_t)v4 - *a1;
  v6 = (v5 >> 4) - a2;
  if (!v6)
    return;
  if (v6 != 1)
  {
    if (v6 != 2)
    {
      v19 = 126 - 2 * __clz(v5 >> 4);
      if (v4 == (unint64_t *)v3)
        v20 = 0;
      else
        v20 = v19;
      sub_1C4ECBABC(*a1, v4, v20, 1);
      return;
    }
    v21 = *((_OWORD *)v4 - 1);
    a1[1] = (uint64_t)(v4 - 2);
    v8 = (char *)(v4 - 4) - v3;
    if (v8)
    {
      v9 = v8 >> 4;
      do
      {
        v10 = v9 >> 1;
        v11 = (unint64_t *)&v3[16 * (v9 >> 1)];
        v13 = *v11;
        v12 = (char *)(v11 + 2);
        v9 += ~(v9 >> 1);
        if ((unint64_t)v21 < v13)
          v9 = v10;
        else
          v3 = v12;
      }
      while (v9);
    }
    sub_1C4ECAAB0((char **)a1, v3, (char *)&v21);
    v3 = (char *)*a1;
    v4 = (unint64_t *)a1[1];
    v5 = (uint64_t)v4 - *a1;
  }
  if (v5 != 16)
  {
    v21 = *((_OWORD *)v4 - 1);
    a1[1] = (uint64_t)(v4 - 2);
    if (v4 - 2 != (unint64_t *)v3)
    {
      v14 = ((char *)(v4 - 2) - v3) >> 4;
      do
      {
        v15 = v14 >> 1;
        v16 = (unint64_t *)&v3[16 * (v14 >> 1)];
        v18 = *v16;
        v17 = (char *)(v16 + 2);
        v14 += ~(v14 >> 1);
        if ((unint64_t)v21 < v18)
          v14 = v15;
        else
          v3 = v17;
      }
      while (v14);
    }
    sub_1C4ECAAB0((char **)a1, v3, (char *)&v21);
  }
}

void sub_1C4EC91B0(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  _QWORD *v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  const void *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;

  v3 = sub_1C4ECCC08(a1, a2, 1);
  v4 = (_QWORD *)(*(_QWORD *)a1 + 88 * *(unsigned int *)(a1 + 8));
  *v4 = *(_QWORD *)v3;
  v5 = v4 + 7;
  v6 = *(_OWORD *)(v3 + 8);
  v7 = *(_OWORD *)(v3 + 24);
  v4[5] = v4 + 7;
  v8 = (uint64_t)(v4 + 5);
  *(_OWORD *)(v8 - 32) = v6;
  *(_OWORD *)(v8 - 16) = v7;
  *(_QWORD *)(v8 + 8) = 0x400000000;
  v9 = *(unsigned int *)(v3 + 48);
  if ((_DWORD)v9)
    v10 = v8 == v3 + 40;
  else
    v10 = 1;
  if (!v10)
  {
    v11 = *(const void **)(v3 + 40);
    v12 = v3 + 56;
    if (v11 != (const void *)(v3 + 56))
    {
      if (v5 != (void *)(v8 + 16))
      {
        free(v5);
        v12 = v3 + 56;
        v11 = *(const void **)(v3 + 40);
        LODWORD(v9) = *(_DWORD *)(v3 + 48);
      }
      *(_QWORD *)v8 = v11;
      v14 = *(_DWORD *)(v3 + 52);
      *(_DWORD *)(v8 + 8) = v9;
      *(_DWORD *)(v8 + 12) = v14;
      *(_QWORD *)(v3 + 40) = v12;
      *(_DWORD *)(v3 + 52) = 0;
      goto LABEL_10;
    }
    if (v9 >= 5)
    {
      *(_DWORD *)(v8 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v8, v8 + 16, v9, 8);
      v13 = *(unsigned int *)(v3 + 48);
      if (!(_DWORD)v13)
        goto LABEL_9;
      v11 = *(const void **)(v3 + 40);
      v5 = *(void **)v8;
    }
    else
    {
      v13 = *(unsigned int *)(v3 + 48);
    }
    memcpy(v5, v11, 8 * v13);
LABEL_9:
    *(_DWORD *)(v8 + 8) = v9;
LABEL_10:
    *(_DWORD *)(v3 + 48) = 0;
  }
  ++*(_DWORD *)(a1 + 8);
}

void llvm::MemoryDependenceResults::removeCachedNonLocalPointerDependencies(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  BOOL v5;
  int v6;
  _QWORD *v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;

  if (*(_DWORD *)(a1 + 32))
  {
    v4 = a2 & 0xFFFFFFFFFFFFFFF8;
    v24 = 0;
    if (sub_1C4ECB0EC(*(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 40), a2 & 0xFFFFFFFFFFFFFFF8, &v24))
      v5 = v24 == (_QWORD *)(*(_QWORD *)(a1 + 24) + 32 * *(unsigned int *)(a1 + 40));
    else
      v5 = 1;
    if (!v5)
      __asm { BR              X11 }
    if (v4)
    {
      if (*(unsigned __int8 *)(v4 + 16) >= 0x1Cu)
      {
        v24 = 0;
        if (sub_1C61A4EFC(*(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 64), a2 & 0xFFFFFFFFFFFFFFF8, &v24))
        {
          v13 = v24;
          if (v24 != (_QWORD *)(*(_QWORD *)(a1 + 48) + 72 * *(unsigned int *)(a1 + 64)))
          {
            v15 = (char *)v24[1];
            v14 = (char *)v24[2];
            v16 = 24;
            if (v14 == v15)
              v16 = 28;
            v17 = *(unsigned int *)((char *)v24 + v16);
            v18 = (uint64_t *)v24[2];
            if ((_DWORD)v17)
            {
              v19 = 0;
              while (*(_QWORD *)&v14[v19] >= 0xFFFFFFFFFFFFFFFELL)
              {
                v19 += 8;
                if (8 * v17 == v19)
                  goto LABEL_44;
              }
              v18 = (uint64_t *)&v14[v19];
            }
            v20 = &v14[8 * v17];
            if (v18 != (uint64_t *)v20)
            {
              v21 = *v18;
LABEL_37:
              v24 = 0;
              if (sub_1C4ECB0EC(*(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 40), v21, &v24))
              {
                *v24 = -8192;
                *(int32x2_t *)(a1 + 32) = vadd_s32(*(int32x2_t *)(a1 + 32), (int32x2_t)0x1FFFFFFFFLL);
              }
              v22 = (unint64_t *)(v18 + 1);
              while (v22 != (unint64_t *)v20)
              {
                v23 = *v22++;
                v21 = v23;
                if (v23 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v18 = (uint64_t *)(v22 - 1);
                  goto LABEL_37;
                }
              }
              v15 = (char *)v13[1];
              v14 = (char *)v13[2];
            }
LABEL_44:
            if (v14 != v15)
              free(v14);
            *v13 = -8192;
            *(int32x2_t *)(a1 + 56) = vadd_s32(*(int32x2_t *)(a1 + 56), (int32x2_t)0x1FFFFFFFFLL);
          }
        }
      }
    }
  }
  v24 = 0;
  v6 = sub_1C4ECC784(*(_QWORD *)(a1 + 72), *(_DWORD *)(a1 + 88), a2, &v24);
  v7 = v24;
  if (v6)
    v8 = v24 == (_QWORD *)(*(_QWORD *)(a1 + 72) + 80 * *(unsigned int *)(a1 + 88));
  else
    v8 = 1;
  if (!v8)
  {
    v9 = (_QWORD *)v24[2];
    v10 = (_QWORD *)v24[3];
    if (v9 != v10)
    {
      do
      {
        v11 = v9[1] & 0xFFFFFFFFFFFFFFF8;
        if ((v9[1] & 7uLL) <= 2 && v11 != 0)
          sub_1C4EC8F8C(a1 + 96, v11, a2);
        v9 += 2;
      }
      while (v9 != v10);
      v9 = (_QWORD *)v7[2];
    }
    if (v9)
    {
      v7[3] = v9;
      operator delete(v9);
    }
    *v7 = -16;
    *(int32x2_t *)(a1 + 80) = vadd_s32(*(int32x2_t *)(a1 + 80), (int32x2_t)0x1FFFFFFFFLL);
  }
}

void llvm::MemoryDependenceResults::invalidateCachedPointerInfo(llvm::PhiValues **this, llvm::Value *a2)
{
  if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 15)
  {
    llvm::MemoryDependenceResults::removeCachedNonLocalPointerDependencies((uint64_t)this, (unint64_t)a2 & 0xFFFFFFFFFFFFFFFBLL);
    llvm::MemoryDependenceResults::removeCachedNonLocalPointerDependencies((uint64_t)this, (unint64_t)a2 | 4);
    llvm::PhiValues::invalidateValue(this[28], a2);
  }
}

uint64_t llvm::MemoryDependenceResults::invalidateCachedPredecessors(llvm::MemoryDependenceResults *this)
{
  sub_1C4ECACE0((unsigned int *)this + 58);
  sub_1C4ECAD30((_DWORD *)this + 64);
  return sub_1C4926A50((uint64_t)this + 280);
}

void llvm::MemoryDependenceResults::removeInstruction(llvm::MemoryDependenceResults *this, llvm::Instruction *a2)
{
  llvm::MemoryDependenceResults *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Instruction *v11;
  int v12;
  int v13;
  unint64_t v14;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  unsigned int v27;
  llvm::Instruction **v28;
  llvm::Instruction *v29;
  int v30;
  unsigned int v31;
  llvm::Instruction *v32;
  llvm::Instruction *v33;
  unint64_t v34;
  unsigned int i;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  BOOL v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  uint64_t v47;
  char *v48;
  void **v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unsigned int j;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  _QWORD *v59;
  BOOL v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  uint64_t v66;
  unint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unsigned int k;
  uint64_t v75;
  char *v76;
  llvm::MemoryDependenceResults *v77;
  char *v78;
  unint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  _BYTE v84[128];
  void *v85;
  uint64_t v86;
  _QWORD v87[18];

  v3 = this;
  v87[16] = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 15);
  v78 = (char *)this + 120;
  v5 = *((_DWORD *)this + 34);
  v6 = a2 >> 4;
  if (v5)
  {
    v27 = (v5 - 1) & (v6 ^ (a2 >> 9));
    v28 = (llvm::Instruction **)(v4 + 40 * v27);
    v29 = *v28;
    if (*v28 == a2)
    {
LABEL_41:
      if (v28 != (llvm::Instruction **)(v4 + 40 * v5))
      {
        v33 = v28[1];
        v32 = v28[2];
        if (v33 != v32)
        {
          do
          {
            v34 = *((_QWORD *)v33 + 1) & 0xFFFFFFFFFFFFFFF8;
            if ((*((_QWORD *)v33 + 1) & 7uLL) <= 2 && v34 != 0)
              sub_1C4EC70EC((uint64_t)v3 + 168, v34, (uint64_t)a2);
            v33 = (llvm::Instruction *)((char *)v33 + 16);
          }
          while (v33 != v32);
          v33 = v28[1];
        }
        if (v33)
        {
          v28[2] = v33;
          operator delete(v33);
        }
        *v28 = (llvm::Instruction *)-8192;
        *((int32x2_t *)v3 + 16) = vadd_s32(*(int32x2_t *)((char *)v3 + 128), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    else
    {
      v30 = 1;
      while (v29 != (llvm::Instruction *)-4096)
      {
        v31 = v27 + v30++;
        v27 = v31 & (v5 - 1);
        v28 = (llvm::Instruction **)(v4 + 40 * v27);
        v29 = *v28;
        if (*v28 == a2)
          goto LABEL_41;
      }
    }
  }
  v7 = *((unsigned int *)v3 + 4);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)v3;
    LODWORD(v9) = (v7 - 1) & (v6 ^ (a2 >> 9));
    v10 = *(_QWORD *)v3 + 16 * v9;
    v11 = *(llvm::Instruction **)v10;
    if (*(llvm::Instruction **)v10 == a2)
    {
LABEL_8:
      if (v10 != v8 + 16 * v7)
      {
        v14 = *(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8;
        if ((*(_QWORD *)(v10 + 8) & 7uLL) <= 2 && v14 != 0)
          sub_1C4EC70EC((uint64_t)v3 + 144, v14, (uint64_t)a2);
        *(_QWORD *)v10 = -8192;
        *((int32x2_t *)v3 + 1) = vadd_s32(*(int32x2_t *)((char *)v3 + 8), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    else
    {
      v12 = 1;
      while (v11 != (llvm::Instruction *)-4096)
      {
        v13 = v9 + v12++;
        v9 = v13 & (v7 - 1);
        v11 = *(llvm::Instruction **)(v8 + 16 * v9);
        if (v11 == a2)
        {
          v10 = v8 + 16 * v9;
          goto LABEL_8;
        }
      }
    }
  }
  if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 15)
  {
    llvm::MemoryDependenceResults::removeCachedNonLocalPointerDependencies((uint64_t)v3, (unint64_t)a2 & 0xFFFFFFFFFFFFFFFBLL);
    llvm::MemoryDependenceResults::removeCachedNonLocalPointerDependencies((uint64_t)v3, (unint64_t)a2 | 4);
  }
  else
  {
    v85 = 0;
    if (sub_1C4ECB0EC(*((_QWORD *)v3 + 3), *((_DWORD *)v3 + 10), (uint64_t)a2, &v85))
      v16 = v85 == (void *)(*((_QWORD *)v3 + 3) + 32 * *((unsigned int *)v3 + 10));
    else
      v16 = 1;
    if (!v16)
      __asm { BR              X11 }
  }
  v85 = v87;
  v86 = 0x800000000;
  if (*((unsigned __int8 *)a2 + 16) - 29 >= 0xB)
  {
    v17 = *((_QWORD *)a2 + 4);
    if (v17)
      v18 = v17 - 24;
    else
      v18 = 0;
    v80 = v18;
  }
  else
  {
    v80 = 0;
  }
  v19 = *((_QWORD *)v3 + 18);
  v82 = 0;
  if (sub_1C4ECCE58(v19, *((_DWORD *)v3 + 40), (uint64_t)a2, &v82))
  {
    v20 = v82;
    if (v82 != (void *)(*((_QWORD *)v3 + 18) + 72 * *((unsigned int *)v3 + 40)))
    {
      v22 = (char *)*((_QWORD *)v82 + 1);
      v21 = (char *)*((_QWORD *)v82 + 2);
      v23 = 24;
      if (v21 == v22)
        v23 = 28;
      v24 = *(unsigned int *)((char *)v82 + v23);
      v25 = (void **)*((_QWORD *)v82 + 2);
      if ((_DWORD)v24)
      {
        v26 = 0;
        while (*(_QWORD *)&v21[v26] >= 0xFFFFFFFFFFFFFFFELL)
        {
          v26 += 8;
          if (8 * v24 == v26)
            goto LABEL_56;
        }
        v25 = (void **)&v21[v26];
      }
      if (v25 != (void **)&v21[8 * v24])
      {
        v82 = 0;
        v82 = *v25;
        sub_1C4ECB2FC((uint64_t)v3, (uint64_t *)&v82)[1] = v80;
        __asm { BR              X8 }
      }
LABEL_56:
      if (v21 != v22)
        free(v21);
      *v20 = -8192;
      *((int32x2_t *)v3 + 19) = vadd_s32(*(int32x2_t *)((char *)v3 + 152), (int32x2_t)0x1FFFFFFFFLL);
      for (i = v86; (_DWORD)v86; LODWORD(v86) = v86 - 1)
      {
        sub_1C4ECB50C((uint64_t)v3 + 144, (uint64_t *)v85 + 2 * i - 2);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)(v37 + 8), *((_QWORD *)v85 + 2 * v86 - 1));
        i = v86 - 1;
      }
    }
  }
  v38 = *((_QWORD *)v3 + 21);
  v82 = 0;
  v39 = sub_1C4ECCE58(v38, *((_DWORD *)v3 + 46), (uint64_t)a2, &v82);
  v40 = v82;
  if (v39)
    v41 = v82 == (void *)(*((_QWORD *)v3 + 21) + 72 * *((unsigned int *)v3 + 46));
  else
    v41 = 1;
  if (!v41)
  {
    v43 = (char *)*((_QWORD *)v82 + 1);
    v42 = (char *)*((_QWORD *)v82 + 2);
    v44 = 24;
    if (v42 == v43)
      v44 = 28;
    v45 = *(unsigned int *)((char *)v82 + v44);
    v46 = (void **)*((_QWORD *)v82 + 2);
    if ((_DWORD)v45)
    {
      v47 = 0;
      while (*(_QWORD *)&v42[v47] >= 0xFFFFFFFFFFFFFFFELL)
      {
        v47 += 8;
        if (8 * v45 == v47)
          goto LABEL_80;
      }
      v46 = (void **)&v42[v47];
    }
    v48 = &v42[8 * v45];
    if (v46 != (void **)v48)
    {
LABEL_73:
      v82 = 0;
      v49 = v46;
      v82 = *v46;
      v50 = sub_1C61A5188((uint64_t)v78, (uint64_t *)&v82);
      *((_BYTE *)v50 + 32) = 1;
      v51 = v50[1];
      if (v51 != v50[2])
        __asm { BR              X11 }
      v52 = (unint64_t *)(v49 + 1);
      while (v52 != (unint64_t *)v48)
      {
        v53 = *v52++;
        if (v53 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v46 = (void **)(v52 - 1);
          goto LABEL_73;
        }
      }
      v43 = (char *)v40[1];
      v42 = (char *)v40[2];
    }
LABEL_80:
    if (v42 != v43)
      free(v42);
    *v40 = -8192;
    *((int32x2_t *)v3 + 22) = vadd_s32(*(int32x2_t *)((char *)v3 + 176), (int32x2_t)0x1FFFFFFFFLL);
    for (j = v86; (_DWORD)v86; LODWORD(v86) = v86 - 1)
    {
      sub_1C4ECB50C((uint64_t)v3 + 168, (uint64_t *)v85 + 2 * j - 2);
      sub_1C4774094((llvm::SmallPtrSetImplBase *)(v55 + 8), *((_QWORD *)v85 + 2 * v86 - 1));
      j = v86 - 1;
    }
  }
  v57 = (uint64_t)v3 + 96;
  v56 = *((_QWORD *)v3 + 12);
  v82 = 0;
  v58 = sub_1C4ECB600(v56, *((_DWORD *)v3 + 28), (uint64_t)a2, &v82);
  v59 = v82;
  if (v58)
    v60 = v82 == (void *)(*((_QWORD *)v3 + 12) + 72 * *((unsigned int *)v3 + 28));
  else
    v60 = 1;
  if (!v60)
  {
    v82 = v84;
    v83 = 0x800000000;
    v62 = (char *)v59[1];
    v61 = (char *)v59[2];
    v63 = 24;
    if (v61 == v62)
      v63 = 28;
    v64 = *(unsigned int *)((char *)v59 + v63);
    v65 = (unint64_t *)v59[2];
    if ((_DWORD)v64)
    {
      v66 = 0;
      while (*(_QWORD *)&v61[v66] >= 0xFFFFFFFFFFFFFFFELL)
      {
        v66 += 8;
        if (8 * v64 == v66)
          goto LABEL_105;
      }
      v65 = (unint64_t *)&v61[v66];
    }
    v67 = (unint64_t *)&v61[8 * v64];
    if (v65 != v67)
    {
      v79 = v65;
      v68 = (uint64_t)v3 + 72;
      v77 = v3;
      v69 = *v65;
      v76 = (char *)v3 + 72;
LABEL_98:
      v81 = v69;
      v70 = sub_1C4ECCDD8(v68, &v81);
      sub_1C4ECCDD8(v68, &v81)[1] = 0;
      v71 = v70[2];
      if (v71 != v70[3])
        __asm { BR              X11 }
      sub_1C4ECBABC(v71, (unint64_t *)v70[2], 0, 1);
      v72 = v79 + 1;
      v68 = (uint64_t)v76;
      while (v72 != v67)
      {
        v73 = *v72++;
        v69 = v73;
        if (v73 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v79 = v72 - 1;
          goto LABEL_98;
        }
      }
      v62 = (char *)v59[1];
      v61 = (char *)v59[2];
      v3 = v77;
    }
LABEL_105:
    if (v61 != v62)
      free(v61);
    *v59 = -8192;
    *((int32x2_t *)v3 + 13) = vadd_s32(*(int32x2_t *)((char *)v3 + 104), (int32x2_t)0x1FFFFFFFFLL);
    for (k = v83; (_DWORD)v83; LODWORD(v83) = v83 - 1)
    {
      sub_1C4ECC68C(v57, (uint64_t *)v82 + 2 * k - 2);
      sub_1C4774094((llvm::SmallPtrSetImplBase *)(v75 + 8), *((_QWORD *)v82 + 2 * v83 - 1));
      k = v83 - 1;
    }
    if (v82 != v84)
      free(v82);
  }
  llvm::PhiValues::invalidateValue(*((llvm::PhiValues **)v3 + 28), a2);
  if (v85 != v87)
    free(v85);
}

_DWORD *llvm::MemoryDependenceAnalysis::MemoryDependenceAnalysis(_DWORD *this)
{
  *this = dword_1ED82E4F8;
  return this;
}

{
  *this = dword_1ED82E4F8;
  return this;
}

double llvm::MemoryDependenceAnalysis::run@<D0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ResultImpl;
  int v13;
  double result;

  v8 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::AAManager::Key, a2) + 8;
  v9 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::AssumptionAnalysis::Key, a2) + 8;
  v10 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::TargetLibraryAnalysis::Key, a2) + 8;
  v11 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::DominatorTreeAnalysis::Key, a2) + 8;
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::PhiValuesAnalysis::Key, a2);
  v13 = *a1;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  *(_DWORD *)(a4 + 40) = 0;
  *(_QWORD *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 56) = 0;
  *(_DWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 72) = 0;
  *(_QWORD *)(a4 + 80) = 0;
  *(_DWORD *)(a4 + 88) = 0;
  *(_QWORD *)(a4 + 96) = 0;
  *(_QWORD *)(a4 + 104) = 0;
  *(_DWORD *)(a4 + 112) = 0;
  *(_DWORD *)(a4 + 136) = 0;
  *(_QWORD *)(a4 + 120) = 0;
  *(_QWORD *)(a4 + 128) = 0;
  *(_QWORD *)(a4 + 144) = 0;
  *(_QWORD *)(a4 + 152) = 0;
  *(_DWORD *)(a4 + 160) = 0;
  *(_QWORD *)(a4 + 168) = 0;
  *(_QWORD *)(a4 + 176) = 0;
  *(_DWORD *)(a4 + 184) = 0;
  *(_QWORD *)(a4 + 192) = v8;
  *(_QWORD *)(a4 + 200) = v9;
  *(_QWORD *)(a4 + 208) = v10;
  *(_QWORD *)(a4 + 216) = v11;
  *(_DWORD *)(a4 + 248) = 0;
  *(_QWORD *)(a4 + 224) = ResultImpl + 8;
  *(_QWORD *)(a4 + 232) = 0;
  *(_QWORD *)(a4 + 240) = 0;
  *(_QWORD *)(a4 + 256) = 0;
  *(_QWORD *)(a4 + 264) = 0;
  *(_DWORD *)(a4 + 272) = 0;
  *(_QWORD *)(a4 + 280) = 0;
  *(_QWORD *)(a4 + 288) = 0;
  *(_QWORD *)(a4 + 296) = a4 + 312;
  *(_QWORD *)&result = 0x400000000;
  *(_QWORD *)(a4 + 304) = 0x400000000;
  *(_QWORD *)(a4 + 344) = a4 + 360;
  *(_QWORD *)(a4 + 352) = 0;
  *(_QWORD *)(a4 + 360) = 0;
  *(_QWORD *)(a4 + 368) = 1;
  *(_DWORD *)(a4 + 376) = v13;
  *(_QWORD *)(a4 + 384) = 0;
  *(_QWORD *)(a4 + 392) = 0;
  *(_DWORD *)(a4 + 400) = 0;
  return result;
}

uint64_t sub_1C4ECA1DC(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializePhiValuesWrapperPassPass(a1, v3);
  v4 = operator new();
  *(_QWORD *)v4 = "Memory Dependence Analysis";
  *(_QWORD *)(v4 + 8) = 26;
  *(_QWORD *)(v4 + 16) = "memdep";
  *(_QWORD *)(v4 + 24) = 6;
  *(_QWORD *)(v4 + 32) = &llvm::MemoryDependenceWrapperPass::ID;
  *(_WORD *)(v4 + 40) = 256;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = llvm::callDefaultCtor<llvm::MemoryDependenceWrapperPass>;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

void llvm::MemoryDependenceWrapperPass::~MemoryDependenceWrapperPass(llvm::MemoryDependenceWrapperPass *this)
{
  *(_QWORD *)this = &off_1E8139610;
  if (*((_BYTE *)this + 440))
  {
    sub_1C4ECAE14((uint64_t)this + 32);
    *((_BYTE *)this + 440) = 0;
  }
  llvm::Pass::~Pass(this);
}

{
  *(_QWORD *)this = &off_1E8139610;
  if (*((_BYTE *)this + 440))
  {
    sub_1C4ECAE14((uint64_t)this + 32);
    *((_BYTE *)this + 440) = 0;
  }
  llvm::Pass::~Pass(this);
}

{
  *(_QWORD *)this = &off_1E8139610;
  if (*((_BYTE *)this + 440))
  {
    sub_1C4ECAE14((uint64_t)this + 32);
    *((_BYTE *)this + 440) = 0;
  }
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::MemoryDependenceResults::invalidate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  _QWORD v11[2];
  BOOL v12;

  v11[0] = a3;
  v11[1] = &llvm::MemoryDependenceAnalysis::Key;
  v7 = sub_1C477672C(a3 + 48, (uint64_t)&llvm::MemoryDependenceAnalysis::Key);
  v8 = *(_QWORD *)(a3 + 56);
  if (v8 == *(_QWORD *)(a3 + 48))
    v9 = (unsigned int *)(a3 + 68);
  else
    v9 = (unsigned int *)(a3 + 64);
  v12 = v7 != (_QWORD *)(v8 + 8 * *v9);
  if (!sub_1C4DAA35C((uint64_t)v11) && !sub_1C4DAA3F8((uint64_t)v11)
    || (sub_1C4DA944C(a4, (uint64_t)&llvm::AAManager::Key, a2, a3) & 1) != 0
    || (sub_1C4DA944C(a4, (uint64_t)&llvm::AssumptionAnalysis::Key, a2, a3) & 1) != 0
    || (llvm::AnalysisManager<llvm::Function>::Invalidator::invalidate(a4, (uint64_t)&llvm::DominatorTreeAnalysis::Key, a2, a3) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return sub_1C4DA944C(a4, (uint64_t)&llvm::PhiValuesAnalysis::Key, a2, a3);
  }
}

void *sub_1C4ECA3D4(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _QWORD *v12;
  void *v13;
  uint64_t i;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  _QWORD *v31;
  void *v32;
  uint64_t v34;
  void *__src;
  uint64_t v36;
  _QWORD v37[33];

  v37[32] = *MEMORY[0x1E0C80C00];
  v34 = a2;
  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    v4 = v3 - 1;
    v5 = v4 & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a2)
      goto LABEL_17;
    v8 = 0;
    v9 = 1;
    while (v7 != -4096)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -8192;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
      v7 = *v6;
      if (*v6 == a2)
        goto LABEL_17;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
  }
  else
  {
    v12 = 0;
  }
  v6 = sub_1C4ECA7EC(a1, (uint64_t)&v34, &v34, v12);
  *v6 = v34;
  v6[1] = 0;
LABEL_17:
  v13 = (void *)v6[1];
  if (v13)
    return v13;
  for (i = *(_QWORD *)(v34 + 8); i; i = *(_QWORD *)(i + 8))
  {
    v15 = *(_QWORD *)(i + 24);
    v16 = *(unsigned __int8 *)(v15 + 16);
    if (v15)
      v17 = v16 >= 0x1C;
    else
      v17 = 0;
    if (v17 && v16 - 29 < 0xB)
      break;
  }
  __src = v37;
  v36 = 0x2000000000;
  sub_1C4DBBCC0((unsigned int *)&__src, i, 0);
  v19 = v36;
  if (v36 >= HIDWORD(v36))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v37, v36 + 1, 8);
    v19 = v36;
  }
  *((_QWORD *)__src + v19) = 0;
  v20 = v36;
  LODWORD(v36) = v36 + 1;
  v21 = *(_QWORD *)(a1 + 24);
  v22 = *(_DWORD *)(a1 + 40);
  if (!v22)
  {
    v31 = 0;
LABEL_44:
    v25 = sub_1C4DE3FA0(a1 + 24, (uint64_t)&v34, &v34, v31);
    *v25 = v34;
    *((_DWORD *)v25 + 2) = 0;
    goto LABEL_45;
  }
  v23 = v22 - 1;
  v24 = ((v34 >> 4) ^ (v34 >> 9)) & (v22 - 1);
  v25 = (_QWORD *)(v21 + 16 * v24);
  v26 = *v25;
  if (v34 != *v25)
  {
    v27 = 0;
    v28 = 1;
    while (v26 != -4096)
    {
      if (v27)
        v29 = 0;
      else
        v29 = v26 == -8192;
      if (v29)
        v27 = v25;
      v30 = v24 + v28++;
      v24 = v30 & v23;
      v25 = (_QWORD *)(v21 + 16 * (v30 & v23));
      v26 = *v25;
      if (v34 == *v25)
        goto LABEL_45;
    }
    if (v27)
      v31 = v27;
    else
      v31 = v25;
    goto LABEL_44;
  }
LABEL_45:
  *((_DWORD *)v25 + 2) = v20;
  v32 = (void *)sub_1C484358C(a1 + 48, 8 * v36, 3);
  v13 = v32;
  v6[1] = v32;
  if ((_DWORD)v36)
  {
    memmove(v32, __src, 8 * v36);
    v13 = (void *)v6[1];
  }
  if (__src != v37)
    free(__src);
  return v13;
}

uint64_t sub_1C4ECA658(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v19;
  int v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  _QWORD *v32;
  uint64_t v33;

  v33 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  v2 = a1 + 24;
  v3 = v4;
  v5 = *(unsigned int *)(v2 + 16);
  v6 = a2 >> 4;
  if ((_DWORD)v5)
  {
    LODWORD(v7) = (v5 - 1) & (v6 ^ (a2 >> 9));
    v8 = (uint64_t *)(v3 + 16 * v7);
    v9 = *v8;
    if (*v8 == a2)
      goto LABEL_3;
    v12 = 1;
    while (v9 != -4096)
    {
      v13 = v7 + v12++;
      v7 = v13 & (v5 - 1);
      v9 = *(_QWORD *)(v3 + 16 * v7);
      if (v9 == a2)
      {
        v8 = (uint64_t *)(v3 + 16 * v7);
        goto LABEL_3;
      }
    }
  }
  v8 = (uint64_t *)(v3 + 16 * v5);
LABEL_3:
  if (v8 == (uint64_t *)(v3 + 16 * v5))
  {
    v14 = *(_QWORD *)(a2 + 8);
    if (v14)
    {
      while (1)
      {
        v15 = *(_QWORD *)(v14 + 24);
        v16 = *(unsigned __int8 *)(v15 + 16);
        v17 = v15 && v16 >= 0x1C;
        if (v17 && v16 - 29 <= 0xA)
          break;
        v14 = *(_QWORD *)(v14 + 8);
        if (!v14)
          goto LABEL_21;
      }
      LODWORD(v10) = 0;
LABEL_34:
      v10 = (v10 + 1);
      while (1)
      {
        v14 = *(_QWORD *)(v14 + 8);
        if (!v14)
          break;
        v28 = *(_QWORD *)(v14 + 24);
        v29 = *(unsigned __int8 *)(v28 + 16);
        if (v28)
          v30 = v29 >= 0x1C;
        else
          v30 = 0;
        if (v30 && v29 - 29 < 0xB)
          goto LABEL_34;
      }
    }
    else
    {
LABEL_21:
      v10 = 0;
    }
    if ((_DWORD)v5)
    {
      v19 = v6 ^ (a2 >> 9);
      v20 = v5 - 1;
      v21 = (v5 - 1) & v19;
      v22 = (_QWORD *)(v3 + 16 * v21);
      v23 = *v22;
      if (*v22 == a2)
      {
LABEL_24:
        *((_DWORD *)v22 + 2) = v10;
        return v10;
      }
      v24 = 0;
      v25 = 1;
      while (v23 != -4096)
      {
        if (v24)
          v26 = 0;
        else
          v26 = v23 == -8192;
        if (v26)
          v24 = v22;
        v27 = v21 + v25++;
        v21 = v27 & v20;
        v22 = (_QWORD *)(v3 + 16 * (v27 & v20));
        v23 = *v22;
        if (*v22 == a2)
          goto LABEL_24;
      }
      if (v24)
        v32 = v24;
      else
        v32 = v22;
    }
    else
    {
      v32 = 0;
    }
    v22 = sub_1C4DE3FA0(v2, (uint64_t)&v33, &v33, v32);
    *v22 = v33;
    *((_DWORD *)v22 + 2) = 0;
    goto LABEL_24;
  }
  return *((unsigned int *)v8 + 2);
}

_QWORD *sub_1C4ECA7EC(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C4ECA920(a1, v7);
      v17 = 0;
      sub_1C4850EC8((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
  }
  else
  {
    sub_1C4ECA920(a1, 2 * v7);
    v8 = *a3;
    v9 = *(_DWORD *)(a1 + 16) - 1;
    v10 = ((*a3 >> 4) ^ (*a3 >> 9)) & v9;
    a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v10);
    v11 = *a4;
    if (*a3 == *a4)
      goto LABEL_3;
    v13 = 0;
    v14 = 1;
    while (v11 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v11 == -8192;
      if (v15)
        v13 = a4;
      v16 = v10 + v14++;
      v10 = v16 & v9;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v10);
      v11 = *a4;
      if (v8 == *a4)
        goto LABEL_3;
    }
    if (v13)
      a4 = v13;
  }
  v8 = *a4;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C4ECA920(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4ECA9D8(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4ECA9D8(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)result;
    v5 = 16 * v3;
    do
    {
      *v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  if (a2 != a3)
  {
    v6 = 0;
    v7 = v3 - 1;
    do
    {
      v8 = *a2;
      if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v9 = ((v8 >> 4) ^ (v8 >> 9)) & v7;
        v10 = (_QWORD *)(*(_QWORD *)result + 16 * v9);
        v11 = *v10;
        if (v8 != *v10)
        {
          v12 = 0;
          v13 = 1;
          while (v11 != -4096)
          {
            if (v12)
              v14 = 0;
            else
              v14 = v11 == -8192;
            if (v14)
              v12 = v10;
            v15 = v9 + v13++;
            v9 = v15 & v7;
            v10 = (_QWORD *)(*(_QWORD *)result + 16 * (v15 & v7));
            v11 = *v10;
            if (v8 == *v10)
              goto LABEL_8;
          }
          if (v12)
            v10 = v12;
        }
LABEL_8:
        *v10 = v8;
        v10[1] = a2[1];
        *(_DWORD *)(result + 8) = ++v6;
      }
      a2 += 2;
    }
    while (a2 != a3);
  }
  return result;
}

void sub_1C4ECAAB0(char **a1, char *a2, char *a3)
{
  char *v3;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  int64_t v29;
  char *v30;

  v3 = a3;
  v6 = *a1;
  v5 = a1[1];
  v7 = a2 - *a1;
  v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  v9 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v9)
  {
    if (v8 == v5)
    {
      *(_OWORD *)v8 = *(_OWORD *)a3;
      a1[1] = v8 + 16;
    }
    else
    {
      v10 = v8 + 16;
      v11 = v5 - 16;
      v12 = a1[1];
      while (v11 < v5)
      {
        v13 = *(_OWORD *)v11;
        v11 += 16;
        *(_OWORD *)v12 = v13;
        v12 += 16;
      }
      a1[1] = v12;
      if (v5 != v10)
        memmove(&v5[-16 * ((v5 - v10) >> 4)], v8, v5 - v10);
      if (v8 <= v3)
        v3 += 16 * (a1[1] > v3);
      *(_OWORD *)v8 = *(_OWORD *)v3;
    }
    return;
  }
  v14 = ((v5 - v6) >> 4) + 1;
  if (v14 >> 60)
    abort();
  v16 = v9 - (_QWORD)v6;
  if (v16 >> 3 > v14)
    v14 = v16 >> 3;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
    v17 = 0xFFFFFFFFFFFFFFFLL;
  else
    v17 = v14;
  if (v17)
  {
    if (v17 >> 60)
      goto LABEL_43;
    v18 = (char *)operator new(16 * v17);
  }
  else
  {
    v18 = 0;
  }
  v19 = v7 >> 4;
  v20 = &v18[16 * (v7 >> 4)];
  v21 = &v18[16 * v17];
  if (v7 >> 4 == v17)
  {
    if (v7 >= 1)
    {
      if (v19 >= -1)
        v22 = v19 + 1;
      else
        v22 = v19 + 2;
      v20 -= 16 * (v22 >> 1);
      goto LABEL_34;
    }
    if (v6 == a2)
      v23 = 1;
    else
      v23 = v7 >> 3;
    if (!(v23 >> 60))
    {
      v20 = (char *)operator new(16 * v23);
      v21 = &v20[16 * v23];
      if (v18)
      {
        operator delete(v18);
        v6 = *a1;
      }
      goto LABEL_34;
    }
LABEL_43:
    sub_1C4764EE4();
  }
LABEL_34:
  *(_OWORD *)v20 = *(_OWORD *)v3;
  v24 = v20;
  if (v8 != v6)
  {
    v25 = v8;
    v26 = v20;
    do
    {
      v24 = v26 - 16;
      *((_OWORD *)v26 - 1) = *((_OWORD *)v25 - 1);
      v25 -= 16;
      v26 -= 16;
    }
    while (v25 != v6);
  }
  v27 = v20 + 16;
  v28 = a1[1];
  v29 = v28 - v8;
  if (v28 != v8)
    memmove(v27, v8, v28 - v8);
  v30 = *a1;
  *a1 = v24;
  a1[1] = &v27[v29];
  a1[2] = v21;
  if (v30)
    operator delete(v30);
}

unsigned int *sub_1C4ECACE0(unsigned int *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 > 4 * result[2] && v1 >= 0x41)
    {
      return sub_1C4926838(result);
    }
    else
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 16 * v1;
        do
        {
          *v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
  }
  return result;
}

_DWORD *sub_1C4ECAD30(_DWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 16 * v1;
        do
        {
          *v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
    else
    {
      return sub_1C476B2A4(result);
    }
  }
  return result;
}

double sub_1C4ECAD80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = a2;
  *(_QWORD *)(a1 + 200) = a3;
  *(_QWORD *)(a1 + 208) = a4;
  *(_QWORD *)(a1 + 216) = a5;
  *(_DWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 224) = a6;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = a1 + 312;
  *(_QWORD *)&result = 0x400000000;
  *(_QWORD *)(a1 + 304) = 0x400000000;
  *(_QWORD *)(a1 + 344) = a1 + 360;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 1;
  *(_DWORD *)(a1 + 376) = a7;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  return result;
}

uint64_t sub_1C4ECAE14(uint64_t a1)
{
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 384), 8);
  sub_1C4926AE8(a1 + 280);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 256), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 232), 8);
  sub_1C4ECAEF0((unsigned int *)(a1 + 168));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 168), 8);
  sub_1C4ECAEF0((unsigned int *)(a1 + 144));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 144), 8);
  sub_1C4ECAF58((unsigned int *)(a1 + 120));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 120), 8);
  sub_1C4ECAFC0((unsigned int *)(a1 + 96));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 96), 8);
  sub_1C4ECB024((unsigned int *)(a1 + 72));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 72), 8);
  sub_1C4ECB088((unsigned int *)(a1 + 48));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 48), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 24), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
  return a1;
}

void sub_1C4ECAEF0(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;

  v1 = a1[4];
  if ((_DWORD)v1)
  {
    v2 = 72 * v1;
    v3 = (void **)(*(_QWORD *)a1 + 16);
    do
    {
      v4 = (uint64_t)*(v3 - 2);
      if (v4 != -4096 && v4 != -8192 && *v3 != *(v3 - 1))
        free(*v3);
      v3 += 9;
      v2 -= 72;
    }
    while (v2);
  }
}

void sub_1C4ECAF58(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v1 = a1[4];
  if ((_DWORD)v1)
  {
    v2 = 40 * v1;
    v3 = (_QWORD *)(*(_QWORD *)a1 + 16);
    do
    {
      v4 = *(v3 - 2);
      if (v4 != -4096 && v4 != -8192)
      {
        v5 = (void *)*(v3 - 1);
        if (v5)
        {
          *v3 = v5;
          operator delete(v5);
        }
      }
      v3 += 5;
      v2 -= 40;
    }
    while (v2);
  }
}

void sub_1C4ECAFC0(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  v1 = a1[4];
  if ((_DWORD)v1)
  {
    v2 = 72 * v1;
    v3 = (void **)(*(_QWORD *)a1 + 16);
    do
    {
      if (((unint64_t)*(v3 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v3 != *(v3 - 1))
        free(*v3);
      v3 += 9;
      v2 -= 72;
    }
    while (v2);
  }
}

void sub_1C4ECB024(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v6;

  v1 = a1[4];
  if ((_DWORD)v1)
  {
    v2 = 80 * v1;
    v3 = (_QWORD *)(*(_QWORD *)a1 + 24);
    do
    {
      v4 = *(v3 - 3);
      if (v4 != -4 && v4 != -16)
      {
        v6 = (void *)*(v3 - 1);
        if (v6)
        {
          *v3 = v6;
          operator delete(v6);
        }
      }
      v3 += 10;
      v2 -= 80;
    }
    while (v2);
  }
}

void sub_1C4ECB088(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  v1 = a1[4];
  if ((_DWORD)v1)
  {
    v2 = 72 * v1;
    v3 = (void **)(*(_QWORD *)a1 + 16);
    do
    {
      if (((unint64_t)*(v3 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v3 != *(v3 - 1))
        free(*v3);
      v3 += 9;
      v2 -= 72;
    }
    while (v2);
  }
}

uint64_t sub_1C4ECB0EC(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  int v12;

  if (a2)
  {
    v7 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v4 = (_QWORD *)(a1 + 32 * v7);
    v8 = *v4;
    if (*v4 == a3)
    {
      v5 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v8 != -4096)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v8 == -8192;
        if (v11)
          v9 = v4;
        v12 = v7 + v10++;
        v7 = v12 & (a2 - 1);
        v4 = (_QWORD *)(a1 + 32 * v7);
        v8 = *v4;
        v5 = 1;
        if (*v4 == a3)
          goto LABEL_3;
      }
      v5 = 0;
      if (v9)
        v4 = v9;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
LABEL_3:
  *a4 = v4;
  return v5;
}

_QWORD *sub_1C4ECB180(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61A4DC8(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C4ECB238(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(72 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61A5048(a1, v4, &v4[9 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 72 * v10;
    do
    {
      *result = -4096;
      result += 9;
      v11 -= 72;
    }
    while (v11);
  }
  return result;
}

uint64_t *sub_1C4ECB2FC(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = sub_1C4A5C500(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    sub_1C4ECB3DC(a1, v7);
    v8 = 0;
    sub_1C4A5C500(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = 0;
  return result;
}

_QWORD *sub_1C4ECB3DC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = (uint64_t *)v4;
      do
      {
        v14 = *v13;
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v18 = 0;
          sub_1C4A5C500(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = *v13;
          v15[1] = v13[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 16 * v16;
    do
    {
      *result = -4096;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

double sub_1C4ECB50C(uint64_t a1, uint64_t *a2)
{
  char v4;
  double result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;

  v9 = 0;
  v4 = sub_1C4ECB600(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  v6 = v9;
  if ((v4 & 1) != 0)
    return result;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_9:
    sub_1C4ECB68C(a1, v8);
    v9 = 0;
    sub_1C4ECB600(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    v6 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)v6 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)v6 = *a2;
  *(_QWORD *)(v6 + 8) = v6 + 40;
  *(_QWORD *)(v6 + 16) = v6 + 40;
  *(_QWORD *)&result = 4;
  *(_QWORD *)(v6 + 24) = 4;
  *(_DWORD *)(v6 + 32) = 0;
  return result;
}

uint64_t sub_1C4ECB600(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 72 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(a1 + 72 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a4 = v6;
  return result;
}

_QWORD *sub_1C4ECB68C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(72 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4ECB750(a1, v4, v4 + 72 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 72 * v10;
    do
    {
      *result = -4096;
      result += 9;
      v11 -= 72;
    }
    while (v11);
  }
  return result;
}

void sub_1C4ECB750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 72 * v6;
    do
    {
      *v7 = -4096;
      v7 += 9;
      v8 -= 72;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v15 = 0;
        sub_1C4ECB600(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v15);
        v10 = v15;
        v11 = v15 + 5;
        *v15 = *(_QWORD *)v4;
        v10[1] = v11;
        v12 = *(void **)(v4 + 8);
        v13 = *(void **)(v4 + 16);
        if (v13 == v12)
        {
          v10[2] = v11;
          v14 = *(unsigned int *)(v4 + 28);
          v12 = *(void **)(v4 + 16);
          if ((_DWORD)v14)
          {
            memmove(v11, v12, 8 * v14);
            v13 = *(void **)(v4 + 8);
            v12 = *(void **)(v4 + 16);
          }
        }
        else
        {
          v10[2] = v13;
          *(_QWORD *)(v4 + 16) = v12;
          v13 = v12;
        }
        v10[3] = *(_QWORD *)(v4 + 24);
        *((_DWORD *)v10 + 8) = *(_DWORD *)(v4 + 32);
        *(_QWORD *)(v4 + 24) = 4;
        *(_DWORD *)(v4 + 32) = 0;
        ++*(_DWORD *)(a1 + 8);
        if (v12 != v13)
          free(v12);
      }
      v4 += 72;
    }
    while (v4 != a3);
  }
}

_QWORD *sub_1C4ECB878(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4ECB92C(a1, v6);
  v8 = 0;
  sub_1C4B04B98(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C4ECB92C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4ECB9F0(a1, v4, v4 + 40 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 40 * v10;
    do
    {
      *result = -4096;
      result += 5;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4ECB9F0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 40 * v6;
    do
    {
      *v7 = -4096;
      v7 += 5;
      v8 -= 40;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C4B04B98(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      v10[1] = 0;
      v10[2] = 0;
      v10[3] = 0;
      *(_OWORD *)(v10 + 1) = *(_OWORD *)(a2 + 8);
      v10[3] = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *((_BYTE *)v10 + 32) = *(_BYTE *)(a2 + 32);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 40;
  }
  return result;
}

void sub_1C4ECBABC(uint64_t a1, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  __int128 *v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  _OWORD *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 *v32;
  unint64_t v33;
  unint64_t *v34;
  BOOL v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  int64_t v45;
  int64_t v46;
  int64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  BOOL v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  unint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;

__int128 *sub_1C4ECC138(__int128 *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = *a2;
  v4 = *a3;
  if (*a2 >= *(_QWORD *)result)
  {
    if (v4 < v3)
    {
      v6 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v6;
      if (*a2 < *(_QWORD *)result)
      {
        v7 = *result;
        *result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v7;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v8 = *result;
      *result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (*a3 >= *a2)
        return result;
      v5 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    else
    {
      v5 = *result;
      *result = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v5;
  }
  return result;
}

BOOL sub_1C4ECC1DC(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 2);
      if (*(a2 - 2) < *(_QWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      sub_1C4ECC138((__int128 *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      sub_1C4ECC354((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      sub_1C4ECC3F0((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      v8 = (unint64_t *)(a1 + 32);
      sub_1C4ECC138((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (*v9 < *v8)
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_QWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (unint64_t *)a1;
LABEL_12:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

__n128 sub_1C4ECC354(__int128 *a1, unint64_t *a2, unint64_t *a3, _OWORD *a4)
{
  __n128 result;

  sub_1C4ECC138(a1, a2, a3);
  if (*(_QWORD *)a4 < *a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < *a2)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < *(_QWORD *)a1)
      {
        result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 sub_1C4ECC3F0(__int128 *a1, unint64_t *a2, unint64_t *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;

  result.n128_u64[0] = sub_1C4ECC354(a1, a2, a3, a4).n128_u64[0];
  if (a5->n128_u64[0] < a4->n128_u64[0])
  {
    result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (a4->n128_u64[0] < *a3)
    {
      result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (*a3 < *a2)
      {
        result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (*a2 < *(_QWORD *)a1)
        {
          result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

_BYTE *sub_1C4ECC4B8(unsigned int *a1, uint64_t a2, _BYTE *__src, _BYTE *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  _BYTE *__srca;
  char *v20;
  char *v21;

  v5 = *(_QWORD *)a1;
  v6 = (a2 - *(_QWORD *)a1) >> 3;
  v7 = a1[2];
  v8 = a4 - __src;
  if (*(_QWORD *)a1 + 8 * v7 == a2)
  {
    if (v7 + ((a4 - __src) >> 3) <= (unint64_t)a1[3] && __src != a4)
      goto LABEL_3;
    if (v7 + ((a4 - __src) >> 3) > (unint64_t)a1[3])
    {
      v11 = __src;
      v12 = a4;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v7 + ((a4 - __src) >> 3), 8);
      a4 = v12;
      __src = v11;
      LODWORD(v7) = a1[2];
      v5 = *(_QWORD *)a1;
    }
    if (__src != a4)
    {
LABEL_3:
      memcpy((void *)(v5 + 8 * v7), __src, v8);
      LODWORD(v7) = a1[2];
      v5 = *(_QWORD *)a1;
    }
    a1[2] = v7 + (v8 >> 3);
    return (_BYTE *)(v5 + 8 * v6);
  }
  else
  {
    v20 = a4;
    v21 = __src;
    v13 = (uint64_t)v8 >> 3;
    if (v7 + ((a4 - __src) >> 3) > (unint64_t)a1[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v7 + ((a4 - __src) >> 3), 8);
      v5 = *(_QWORD *)a1;
      v7 = a1[2];
    }
    v14 = (_BYTE *)(v5 + 8 * v7);
    __srca = (_BYTE *)(v5 + 8 * v6);
    v15 = (v14 - __srca) >> 3;
    if (v15 >= v13)
    {
      sub_1C6177054(a1, &v14[-8 * v13], (char *)(v5 + 8 * v7));
      if (&v14[-8 * v13] != __srca)
        memmove(&__srca[8 * v13], __srca, &v14[-8 * v13] - __srca);
      if (v21 != v20)
      {
        v9 = __srca;
        memmove(__srca, v21, v8);
        return v9;
      }
    }
    else
    {
      v16 = v7 + (v8 >> 3);
      a1[2] = v16;
      if (v6 != v7)
      {
        v17 = (_QWORD *)(v5 + 8 * v6);
        memcpy((void *)(v5 + 8 * v16 - 8 * v15), __srca, v14 - __srca);
        do
        {
          v18 = *(_QWORD *)v21;
          v21 += 8;
          *v17++ = v18;
          --v15;
        }
        while (v15);
      }
      if (v21 != v20)
        memcpy(v14, v21, v20 - v21);
    }
    return __srca;
  }
}

double sub_1C4ECC68C(uint64_t a1, uint64_t *a2)
{
  char v4;
  double result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;

  v9 = 0;
  v4 = sub_1C4ECB600(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  v6 = v9;
  if ((v4 & 1) != 0)
    return result;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_8;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_8:
    sub_1C4ECB68C(a1, v8);
    v9 = 0;
    sub_1C4ECB600(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    v6 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)v6 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)v6 = *a2;
  *(_QWORD *)(v6 + 8) = v6 + 40;
  *(_QWORD *)(v6 + 16) = v6 + 40;
  *(_QWORD *)&result = 4;
  *(_QWORD *)(v6 + 24) = 4;
  *(_DWORD *)(v6 + 32) = 0;
  return result;
}

uint64_t sub_1C4ECC784(uint64_t a1, int a2, unint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (a2 - 1) & ((a3 >> 9) ^ a3);
    v6 = (_QWORD *)(a1 + 80 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v12 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -16;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(a1 + 80 * (v11 & v4));
        v7 = *v6;
        v12 = 1;
        if (*v6 == a3)
          goto LABEL_13;
      }
      v12 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v12 = 0;
  }
LABEL_13:
  *a4 = v6;
  return v12;
}

_QWORD *sub_1C4ECC81C(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4ECC8D0(a1, v6);
  v8 = 0;
  sub_1C4ECC784(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C4ECC8D0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v16;
  __int128 v17;
  __int128 v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(80 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 80 * v10;
      do
      {
        *result = -4;
        result += 10;
        v11 -= 80;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 80 * v3;
      v13 = v4 + 24;
      do
      {
        v14 = *(_QWORD *)(v13 - 24);
        if (v14 != -4 && v14 != -16)
        {
          v22 = 0;
          sub_1C4ECC784(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v22);
          v16 = v22;
          *v22 = *(_QWORD *)(v13 - 24);
          v16[1] = *(_QWORD *)(v13 - 16);
          v16[2] = 0;
          v16[3] = 0;
          v16[4] = 0;
          *((_OWORD *)v16 + 1) = *(_OWORD *)(v13 - 8);
          v16[4] = *(_QWORD *)(v13 + 8);
          *(_QWORD *)(v13 - 8) = 0;
          *(_QWORD *)v13 = 0;
          *(_QWORD *)(v13 + 8) = 0;
          v17 = *(_OWORD *)(v13 + 16);
          v18 = *(_OWORD *)(v13 + 32);
          v16[9] = *(_QWORD *)(v13 + 48);
          *(_OWORD *)(v16 + 7) = v18;
          *(_OWORD *)(v16 + 5) = v17;
          ++*(_DWORD *)(a1 + 8);
          v19 = *(void **)(v13 - 8);
          if (v19)
          {
            *(_QWORD *)v13 = v19;
            operator delete(v19);
          }
        }
        v13 += 80;
        v12 -= 80;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v20 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v20)
  {
    v21 = 80 * v20;
    do
    {
      *result = -4;
      result += 10;
      v21 -= 80;
    }
    while (v21);
  }
  return result;
}

_QWORD *sub_1C4ECCA58(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C4775244(a1, v7);
      v17 = 0;
      sub_1C4926528(a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C4775244(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

char **sub_1C4ECCB88(char **a1)
{
  char *v2;
  unsigned int v3;
  uint64_t v5;
  char *v6;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v5 = 88 * v3;
    do
    {
      v6 = *(char **)&v2[v5 - 48];
      if (&v2[v5 - 32] != v6)
        free(v6);
      v5 -= 88;
    }
    while (v5);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

unint64_t sub_1C4ECCC08(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 88 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C61A5118(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C61A5118(a1, v5);
    }
  }
  return a2;
}

void sub_1C4ECCC70(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  void *v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  const void *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;

  v2 = *((_DWORD *)a1 + 2);
  if (!v2)
    return;
  v5 = 0;
  v6 = *a1;
  v7 = 88 * v2;
  do
  {
    v8 = a2 + v5;
    v9 = v6 + v5;
    *(_QWORD *)v8 = *(_QWORD *)(v6 + v5);
    v10 = *(_OWORD *)(v6 + v5 + 8);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(v6 + v5 + 24);
    *(_OWORD *)(v8 + 8) = v10;
    v11 = (void *)(a2 + v5 + 56);
    *(_QWORD *)(a2 + v5 + 40) = v11;
    v12 = (_QWORD *)(a2 + v5 + 40);
    *(_QWORD *)(v8 + 48) = 0x400000000;
    v13 = *(unsigned int *)(v6 + v5 + 48);
    if ((_DWORD)v13)
      v14 = v9 == v8;
    else
      v14 = 1;
    if (!v14)
    {
      v15 = *(const void **)(v9 + 40);
      if ((const void *)(v9 + 56) != v15)
      {
        *v12 = v15;
        v17 = *(_DWORD *)(v6 + v5 + 52);
        *(_DWORD *)(v8 + 48) = v13;
        *(_DWORD *)(v8 + 52) = v17;
        *(_QWORD *)(v9 + 40) = v9 + 56;
        *(_DWORD *)(v6 + v5 + 52) = 0;
        goto LABEL_12;
      }
      if (v13 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v12, a2 + v5 + 56, v13, 8);
        v16 = *(unsigned int *)(v9 + 48);
        if (!(_DWORD)v16)
          goto LABEL_11;
        v15 = *(const void **)(v9 + 40);
        v11 = *(void **)(a2 + v5 + 40);
      }
      else
      {
        v16 = *(unsigned int *)(v6 + v5 + 48);
      }
      memcpy(v11, v15, 8 * v16);
LABEL_11:
      *(_DWORD *)(v8 + 48) = v13;
LABEL_12:
      *(_DWORD *)(v9 + 48) = 0;
    }
    v5 += 88;
  }
  while (v7 != v5);
  v18 = *((_DWORD *)a1 + 2);
  if (v18)
  {
    v19 = *a1;
    v20 = 88 * v18;
    do
    {
      v21 = *(void **)(v19 + v20 - 48);
      if ((void *)(v19 + v20 - 32) != v21)
        free(v21);
      v20 -= 88;
    }
    while (v20);
  }
}

_QWORD *sub_1C4ECCDD8(uint64_t a1, unint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4ECC784(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4ECC81C(a1, a2, v7);
    *v5 = *a2;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 1) = 0u;
    v5[5] = -2;
    *((_OWORD *)v5 + 3) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
  }
  return v5;
}

uint64_t sub_1C4ECCE58(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v7 = a2 - 1;
    v8 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v4 = (_QWORD *)(a1 + 72 * v8);
    v9 = *v4;
    if (*v4 == a3)
    {
      v5 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v9 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v9 == -8192;
        if (v12)
          v10 = v4;
        v13 = v8 + v11++;
        v8 = v13 & v7;
        v4 = (_QWORD *)(a1 + 72 * (v13 & v7));
        v9 = *v4;
        v5 = 1;
        if (*v4 == a3)
          goto LABEL_3;
      }
      v5 = 0;
      if (v10)
        v4 = v10;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
LABEL_3:
  *a4 = v4;
  return v5;
}

uint64_t sub_1C4ECCEF0()
{
  __int128 v1;
  int v2;
  int *v3;
  int v4;

  v4 = 1;
  v2 = 100;
  v3 = &v2;
  *(_QWORD *)&v1 = "The number of instructions to scan in a block in memory dependency analysis (default = 100)";
  *((_QWORD *)&v1 + 1) = 91;
  sub_1C61798D0((uint64_t)&unk_1ED82E478, "memdep-block-scan-limit", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED82E478, &dword_1C475E000);
  v4 = 1;
  v2 = 1000;
  v3 = &v2;
  *(_QWORD *)&v1 = "The number of blocks to scan during memory dependency analysis (default = 1000)";
  *((_QWORD *)&v1 + 1) = 79;
  sub_1C61798D0((uint64_t)&unk_1ED7F2AF0, "memdep-block-number-limit", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F2AF0, &dword_1C475E000);
}

uint64_t ***llvm::MemoryLocation::get@<X0>(llvm::MemoryLocation *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t ***result;

  v5 = *((_QWORD *)this - 4);
  sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 56) + 40) + 272, *(_QWORD *)this);
  if (v7 == 1)
    v8 = -2;
  else
    v8 = (unint64_t)(v6 + 7) >> 3;
  result = llvm::Instruction::getAAMetadata((uint64_t ***)this, a2 + 2);
  *a2 = v5;
  a2[1] = v8;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t ***result;

  v5 = *((_QWORD *)this - 4);
  sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 56) + 40) + 272, **((_QWORD **)this - 8));
  if (v7 == 1)
    v8 = -2;
  else
    v8 = (unint64_t)(v6 + 7) >> 3;
  result = llvm::Instruction::getAAMetadata((uint64_t ***)this, a2 + 2);
  *a2 = v5;
  a2[1] = v8;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t ***result;

  v5 = *((_QWORD *)this - 8);
  sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 56) + 40) + 272, **((_QWORD **)this - 4));
  if (v7 == 1)
    v8 = -2;
  else
    v8 = (unint64_t)(v6 + 7) >> 3;
  result = llvm::Instruction::getAAMetadata((uint64_t ***)this, a2 + 2);
  *a2 = v5;
  a2[1] = v8;
  return result;
}

uint64_t ***llvm::MemoryLocation::get@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t ***result;

  v4 = *(_QWORD *)(a1 - 96);
  sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 40) + 272, **(_QWORD **)(a1 - 64));
  if (v6 == 1)
    v7 = -2;
  else
    v7 = (unint64_t)(v5 + 7) >> 3;
  result = llvm::Instruction::getAAMetadata((uint64_t ***)a1, a2 + 2);
  *a2 = v4;
  a2[1] = v7;
  return result;
}

uint64_t ***llvm::MemoryLocation::getOrNone@<X0>(uint64_t ***this@<X0>, uint64_t a2@<X8>)
{
  uint64_t ***v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  __int128 v12;
  uint64_t ***v13;
  uint64_t v14;
  __int128 v15;
  _OWORD v16[2];

  v3 = this;
  v5 = *((unsigned __int8 *)this + 16);
  if (v5 == 60)
  {
    v6 = this[5][7][5] + 272;
    v7 = (uint64_t)*(v3 - 4);
    v8 = *v3;
LABEL_3:
    sub_1C4768AD0(v6, (uint64_t)v8);
    if (v10 == 1)
      v11 = -2;
    else
      v11 = (unint64_t)(v9 + 7) >> 3;
    this = llvm::Instruction::getAAMetadata(v3, v16);
    *(_QWORD *)&v15 = v7;
    *((_QWORD *)&v15 + 1) = v11;
    v12 = v16[1];
    *(_OWORD *)(a2 + 16) = v16[0];
    *(_OWORD *)(a2 + 32) = v12;
    *(_OWORD *)a2 = v15;
    goto LABEL_7;
  }
  if (*((unsigned __int8 *)this + 16) <= 0x3Fu)
  {
    if (v5 == 61)
    {
      v6 = this[5][7][5] + 272;
      v7 = (uint64_t)*(v3 - 4);
      v13 = (uint64_t ***)*(v3 - 8);
LABEL_12:
      v8 = *v13;
      goto LABEL_3;
    }
LABEL_19:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return this;
  }
  switch(v5)
  {
    case 'A':
      v6 = this[5][7][5] + 272;
      v7 = (uint64_t)*(v3 - 8);
      v13 = (uint64_t ***)*(v3 - 4);
      goto LABEL_12;
    case '@':
      this = llvm::MemoryLocation::get((uint64_t)this, (_QWORD *)a2);
      break;
    case 'X':
      v14 = (uint64_t)*(this - 4);
      this = llvm::Instruction::getAAMetadata(this, (_QWORD *)(a2 + 16));
      *(_QWORD *)a2 = v14;
      *(_QWORD *)(a2 + 8) = -2;
      break;
    default:
      goto LABEL_19;
  }
LABEL_7:
  *(_BYTE *)(a2 + 48) = 1;
  return this;
}

double llvm::MemoryLocation::getForSource@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return llvm::MemoryLocation::getForArgument(a1, 1u, 0, a2);
}

{
  return llvm::MemoryLocation::getForArgument(a1, 1u, 0, a2);
}

{
  return llvm::MemoryLocation::getForArgument(a1, 1u, 0, a2);
}

double llvm::MemoryLocation::getForArgument@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t ****v8;
  uint64_t ***v9;
  uint64_t v10;
  unint64_t v11;
  double result;
  __int128 v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t ***v18;
  BOOL v19;
  uint64_t v20;
  unint64_t *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t **v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t **v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  _OWORD v32[2];

  llvm::Instruction::getAAMetadata((uint64_t ***)a1, v32);
  v8 = (uint64_t ****)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
  v9 = v8[4 * a2];
  if (*(_BYTE *)(a1 + 16) == 84)
  {
    v10 = *(_QWORD *)(a1 - 32);
    if (v10)
    {
      if (!*(_BYTE *)(v10 + 16) && *(_QWORD *)(v10 + 24) == *(_QWORD *)(a1 + 72) && (*(_BYTE *)(v10 + 33) & 0x20) != 0)
      {
        v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 40) + 272;
        v17 = *(_DWORD *)(v10 + 36);
        if (v17 > 193)
        {
          if ((v17 - 194) < 7)
          {
            v18 = v8[8];
            if (v18)
              v19 = *((_BYTE *)v18 + 16) == 16;
            else
              v19 = 0;
            if (!v19)
            {
              v11 = -2;
              goto LABEL_10;
            }
LABEL_67:
            v21 = (unint64_t *)(v18 + 3);
            v22 = *((_DWORD *)v18 + 8) >= 0x41u;
            goto LABEL_68;
          }
          if (v17 == 3909)
          {
            v27 = *(uint64_t ***)a1;
          }
          else
          {
            if (v17 != 3982)
              goto LABEL_6;
            v27 = *v8[4];
          }
          sub_1C4768AD0(v16, (uint64_t)v27);
          v11 = (unint64_t)(v30 + 7) >> 3;
LABEL_80:
          v14 = v29 == 1;
          v15 = -2;
LABEL_81:
          if (v14)
            v11 = v15;
          goto LABEL_10;
        }
        if (v17 <= 166)
        {
          if (v17 == 163)
          {
            if (!a2)
            {
              *(_QWORD *)a4 = v9;
              *(_QWORD *)(a4 + 8) = 0;
              goto LABEL_11;
            }
            v18 = v8[4];
            goto LABEL_67;
          }
          if (v17 != 164)
            goto LABEL_6;
        }
        else if ((v17 - 167) >= 2)
        {
          if (v17 == 185)
          {
            v24 = *(uint64_t ***)a1;
          }
          else
          {
            if (v17 != 187)
              goto LABEL_6;
            v24 = **v8;
          }
          sub_1C4768AD0(v16, (uint64_t)v24);
          if ((unint64_t)(v28 + 7) >= 8)
            v11 = ((unint64_t)(v28 + 7) >> 3) | 0x8000000000000000;
          else
            v11 = 0;
          goto LABEL_80;
        }
        v18 = *v8;
        goto LABEL_67;
      }
    }
  }
LABEL_6:
  v31 = 0;
  if (a3
    && sub_1C4ECD910(a3, a1, &v31)
    && ((*(_QWORD *)(a3[1] + (((unint64_t)v31 >> 3) & 0x1FFFFFF8)) >> v31) & 1) == 0
    && ((*(unsigned __int8 *)(*a3 + ((unint64_t)v31 >> 2)) >> (2 * (v31 & 3))) & 3) != 0)
  {
    if (v31 <= 403)
    {
      if (v31 > 318)
      {
        switch(v31)
        {
          case 319:
            v23 = *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 96);
            goto LABEL_50;
          case 320:
          case 321:
            goto LABEL_34;
          case 327:
          case 328:
          case 329:
            if (a2 != 1)
              goto LABEL_34;
            v11 = 16;
            if (v31 == 329)
              v11 = 8;
            v14 = v31 == 328;
            v15 = 4;
            break;
          default:
            goto LABEL_9;
        }
        goto LABEL_81;
      }
      if (v31 != 103 && v31 != 106)
      {
        if (v31 == 168)
        {
LABEL_34:
          v18 = *(uint64_t ****)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 64);
          v11 = -2;
          if (!v18 || *((_BYTE *)v18 + 16) != 16)
            goto LABEL_10;
          goto LABEL_67;
        }
        goto LABEL_9;
      }
      v23 = *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 64);
LABEL_50:
      v11 = -2;
      if (!v23 || *(_BYTE *)(v23 + 16) != 16)
        goto LABEL_10;
      v21 = (unint64_t *)(v23 + 24);
      v22 = *(_DWORD *)(v23 + 32) >= 0x41u;
LABEL_53:
      if (v22)
        v21 = (unint64_t *)*v21;
      v25 = *v21;
      v26 = v25 | 0x8000000000000000;
      if (v25 > 0x7FFFFFFFFFFFFFFBLL)
        v26 = -2;
      if (v25)
        v11 = v26;
      else
        v11 = 0;
      goto LABEL_10;
    }
    v11 = -2;
    if (v31 > 414)
    {
      if (v31 == 415)
        goto LABEL_10;
      if (v31 != 417)
        goto LABEL_9;
      v20 = *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 64);
      v11 = -2;
      if (!v20 || *(_BYTE *)(v20 + 16) != 16)
        goto LABEL_10;
      v21 = (unint64_t *)(v20 + 24);
      v22 = *(_DWORD *)(v20 + 32) >= 0x41u;
      if (!a2)
      {
LABEL_68:
        if (v22)
          v21 = (unint64_t *)*v21;
        v11 = *v21;
        if (v11 > 0x7FFFFFFFFFFFFFFBLL)
          v11 = -2;
        goto LABEL_10;
      }
      goto LABEL_53;
    }
    if (v31 == 404 || v31 == 408)
      goto LABEL_10;
  }
LABEL_9:
  v9 = *(uint64_t ****)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * a2);
  v11 = -1;
LABEL_10:
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
LABEL_11:
  result = *(double *)v32;
  v13 = v32[1];
  *(_OWORD *)(a4 + 16) = v32[0];
  *(_OWORD *)(a4 + 32) = v13;
  return result;
}

double llvm::MemoryLocation::getForDest@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return llvm::MemoryLocation::getForArgument(a1, 0, 0, a2);
}

{
  return llvm::MemoryLocation::getForArgument(a1, 0, 0, a2);
}

{
  return llvm::MemoryLocation::getForArgument(a1, 0, 0, a2);
}

void llvm::MemoryLocation::getForDest(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  uint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t i;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int32 v21;

  v7 = *(_QWORD *)(a1 + 64);
  if (!v7 || (*(_BYTE *)(v7 + 12) & 8) == 0)
  {
    v21 = 7;
    if (sub_1C53E4BBC(a1, &v21, 1uLL))
    {
      v20 = *(_QWORD *)(a1 - 32);
      if (!v20 || *(_BYTE *)(v20 + 16) || *(_QWORD *)(v20 + 24) != *(_QWORD *)(a1 + 72) || *(_DWORD *)(v20 + 36) != 7)
        goto LABEL_36;
    }
    if ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, 3) & 1) == 0)
      goto LABEL_36;
  }
  v8 = *(_DWORD *)(a1 + 20);
  if (v8 < 0 && (*(_QWORD *)(a1 - 32 * (v8 & 0x7FFFFFF) - 8) & 0xFFFFFFFF0) != 0)
    goto LABEL_36;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  for (i = a1; ; i += 32)
  {
    v14 = *(unsigned __int8 *)(a1 + 16);
    if (v14 == 84)
      v15 = 0;
    else
      v15 = v14 == 39 ? (*(_DWORD *)(a1 + 80) + 1) : 2;
    v16 = *(_DWORD *)(a1 + 20);
    if (v16 < 0 && (v19 = v16 & 0x7FFFFFF, (*(_QWORD *)(a1 - 8 - 32 * v19) & 0xFFFFFFFF0) != 0))
    {
      v18 = -v19;
      v17 = *(_DWORD *)(a1 - 32 * v19 - 12) - *(_DWORD *)(a1 - 32 * v19 - *(_QWORD *)(a1 - 32 * v19 - 8));
    }
    else
    {
      v17 = 0;
      v18 = -(uint64_t)(v16 & 0x7FFFFFF);
    }
    if (v9 >= ((-32 - 32 * v15 + 32 * (unint64_t)-v17 - 32 * v18) >> 5))
      break;
    if (*(_BYTE *)(**(_QWORD **)(i + 32 * v18) + 8) == 15
      && (sub_1C4D91D40(a1, v9, 45) & 1) == 0
      && (sub_1C4D91D40(a1, v9, 44) & 1) == 0)
    {
      if (v12)
      {
        if (v12 != *(_QWORD *)(i - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)))
          goto LABEL_36;
        v10 = 0;
        v11 = 0;
        v3 = 0;
      }
      else
      {
        v3 = v9 >> 8;
        v10 = 1;
        v11 = v9;
        v12 = *(_QWORD *)(i - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
      }
    }
    ++v9;
  }
  if (v12)
  {
    if (v10)
    {
      llvm::MemoryLocation::getForArgument(a1, v11 | (v3 << 8), a2, a3);
    }
    else
    {
      llvm::Instruction::getAAMetadata((uint64_t ***)a1, (_QWORD *)(a3 + 16));
      *(_QWORD *)a3 = v12;
      *(_QWORD *)(a3 + 8) = -1;
    }
    *(_BYTE *)(a3 + 48) = 1;
  }
  else
  {
LABEL_36:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 48) = 0;
  }
}

uint64_t sub_1C4ECD910(uint64_t *a1, uint64_t a2, int *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t ***v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ****v13;
  uint64_t ***v14;
  int v15;
  int v16;
  uint64_t ***v17;
  char *v18;
  size_t v19;
  size_t v20;
  uint64_t v21;

  v5 = a1;
  v6 = *(_QWORD *)(a2 + 64);
  if (v6 && (*(_BYTE *)(v6 + 14) & 0x10) != 0)
    goto LABEL_5;
  LODWORD(a1) = llvm::CallBase::hasFnAttrOnCalledFunction(a2, 20);
  if (!(_DWORD)a1)
    goto LABEL_7;
  v6 = *(_QWORD *)(a2 + 64);
  if (v6)
  {
LABEL_5:
    if ((*(_BYTE *)(v6 + 12) & 0x10) != 0)
      goto LABEL_7;
  }
  LODWORD(a1) = llvm::CallBase::hasFnAttrOnCalledFunction(a2, 4);
  if (!(_DWORD)a1)
    return 0;
LABEL_7:
  v7 = *(uint64_t ****)(a2 - 32);
  if (!v7 || *((_BYTE *)v7 + 16) || v7[3] != *(uint64_t ***)(a2 + 72) || (*((_BYTE *)v7 + 33) & 0x20) != 0)
    return 0;
  if ((*((_BYTE *)v7 + 23) & 0x10) != 0)
  {
    v9 = ***v7;
    v10 = *(_QWORD *)(v9 + 152);
    v11 = *(unsigned int *)(v9 + 168);
    if ((_DWORD)v11)
    {
      LODWORD(v12) = (v11 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v13 = (uint64_t ****)(v10 + 16 * v12);
      v14 = *v13;
      if (*v13 == v7)
      {
LABEL_20:
        v17 = v13[1];
        v20 = (size_t)*v17;
        v18 = (char *)(v17 + 2);
        v19 = v20;
        goto LABEL_21;
      }
      v15 = 1;
      while (v14 != (uint64_t ***)-4096)
      {
        v16 = v12 + v15++;
        v12 = v16 & (v11 - 1);
        v14 = *(uint64_t ****)(v10 + 16 * v12);
        if (v14 == v7)
        {
          v13 = (uint64_t ****)(v10 + 16 * v12);
          goto LABEL_20;
        }
      }
    }
    v13 = (uint64_t ****)(v10 + 16 * v11);
    goto LABEL_20;
  }
  v19 = 0;
  v18 = &byte_1C871356D;
LABEL_21:
  v21 = *v5;
  if (!llvm::TargetLibraryInfoImpl::getLibFunc((int)a1, v18, v19, a3))
    return 0;
  return llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc(v21, (uint64_t)v7[3], *a3);
}

uint64_t sub_1C4ECDA68(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v2);
  v3 = operator new();
  *(_QWORD *)v3 = "Memory SSA";
  *(_QWORD *)(v3 + 8) = 10;
  *(_QWORD *)(v3 + 16) = "memoryssa";
  *(_QWORD *)(v3 + 24) = 9;
  *(_QWORD *)(v3 + 32) = &llvm::MemorySSAWrapperPass::ID;
  *(_WORD *)(v3 + 40) = 256;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = llvm::callDefaultCtor<llvm::MemorySSAWrapperPass>;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

void llvm::initializeMemorySSAPrinterLegacyPassPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82E548);
  if (v1 != -1)
  {
    v4[0] = sub_1C4ECDB68;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82E548, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4ECDB68(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a1;
  v2 = atomic_load(&qword_1ED82E540);
  if (v2 != -1)
  {
    v7[0] = sub_1C4ECDA68;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82E540, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  v3 = operator new();
  *(_QWORD *)v3 = "Memory SSA Printer";
  *(_QWORD *)(v3 + 8) = 18;
  *(_QWORD *)(v3 + 16) = "print-memoryssa";
  *(_QWORD *)(v3 + 24) = 15;
  *(_QWORD *)(v3 + 32) = &llvm::MemorySSAPrinterLegacyPass::ID;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = llvm::callDefaultCtor<llvm::MemorySSAPrinterLegacyPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t llvm::MemorySSAUtil::defClobbersUseOrDef(uint64_t a1, uint64_t a2, llvm::AAResults *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[3];

  v6 = *(_QWORD *)(a2 + 72);
  v7 = *(unsigned __int8 *)(v6 + 16);
  if (*(unsigned __int8 *)(v6 + 16) > 0x3Eu)
  {
    if ((_DWORD)v7 == 63)
      goto LABEL_8;
    if ((_DWORD)v7 != 84)
    {
LABEL_4:
      llvm::MemoryLocation::getOrNone(*(uint64_t ****)(a2 + 72), (uint64_t)&v12);
      v7 = v12;
      v9 = v13[0];
      v10 = v13[1];
      v11 = *(_QWORD *)&v13[2];
      v6 = *(_QWORD *)(a2 + 72);
LABEL_8:
      v12 = v7;
      v13[0] = v9;
      v13[1] = v10;
      *(_QWORD *)&v13[2] = v11;
      return sub_1C4ED7164(a1, (__int128 *)&v12, v6, a3) & 1;
    }
  }
  else if ((_DWORD)v7 != 33 && (_DWORD)v7 != 39)
  {
    goto LABEL_4;
  }
  v12 = 0;
  *(_QWORD *)&v13[0] = -1;
  memset((char *)v13 + 8, 0, 32);
  return sub_1C4ED7164(a1, (__int128 *)&v12, v6, a3) & 1;
}

void llvm::MemorySSA::renameSuccessorPhis(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = *(_QWORD *)(a2 + 40);
  if (v4 != a2 + 40)
  {
    if (v4)
      v5 = v4 - 24;
    else
      v5 = 0;
    v6 = *(unsigned __int8 *)(v5 + 16);
    v7 = v6 - 29;
    if (v6 != 30)
    {
      v12 = 2;
      switch(v7)
      {
        case 1:
          __break(1u);
          JUMPOUT(0x1C4ECDF80);
        case 2:
          v12 = (*(_DWORD *)(v5 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_31;
        case 3:
        case 9:
          v12 = (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_31;
        case 4:
          goto LABEL_9;
        case 7:
          v12 = *(_WORD *)(v5 + 18) & 1;
          goto LABEL_31;
        case 8:
          v12 = 1;
          goto LABEL_9;
        case 10:
          v12 = *(_DWORD *)(v5 + 80) + 1;
LABEL_31:
          if (!v12)
            return;
          goto LABEL_9;
        default:
          return;
      }
    }
    if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 3)
      v12 = 2;
    else
      v12 = 1;
LABEL_9:
    v13 = 0;
    v14 = v12;
    do
    {
      v15 = *(unsigned __int8 *)(v5 + 16);
      if (v15 != 30)
        __asm { BR              X9 }
      v16 = *(_QWORD *)(v5 - 32 - 32 * v13);
      v17 = *(_QWORD *)(a1 + 48);
      v18 = *(unsigned int *)(a1 + 64);
      if ((_DWORD)v18)
      {
        LODWORD(v19) = ((v16 >> 4) ^ (v16 >> 9)) & (v18 - 1);
        v20 = (uint64_t *)(v17 + 16 * v19);
        v21 = *v20;
        if (v16 == *v20)
          goto LABEL_19;
        v22 = 1;
        while (v21 != -4096)
        {
          v23 = v19 + v22++;
          v19 = v23 & (v18 - 1);
          v21 = *(_QWORD *)(v17 + 16 * v19);
          if (v16 == v21)
          {
            v20 = (uint64_t *)(v17 + 16 * v19);
            goto LABEL_19;
          }
        }
      }
      v20 = (uint64_t *)(v17 + 16 * v18);
LABEL_19:
      if (v20 != (uint64_t *)(v17 + 16 * v18))
      {
        v24 = *(_QWORD *)(v20[1] + 8);
        v25 = v24 ? v24 - 32 : 0;
        if (*(_BYTE *)(v25 + 16) == 27)
        {
          if (a4)
          {
            v26 = *(_DWORD *)(v25 + 20);
            v27 = v26 & 0x7FFFFFF;
            if ((v26 & 0x7FFFFFF) != 0)
            {
              v28 = 0;
              v29 = 0;
              v30 = (uint64_t *)(a3 + 8);
              v31 = 8 * v27;
              do
              {
                v32 = *(_DWORD *)(v25 + 20);
                if ((v32 & 0x40000000) != 0)
                  v33 = *(_QWORD *)(v25 - 8);
                else
                  v33 = v25 - 32 * (v32 & 0x7FFFFFF);
                if (*(_QWORD *)(v33 + 32 * *(unsigned int *)(v25 + 76) + v29) == a2)
                {
                  v34 = v33 + v28;
                  if (*(_QWORD *)(v33 + v28))
                  {
                    **(_QWORD **)(v34 + 16) = *(_QWORD *)(v34 + 8);
                    v35 = *(_QWORD *)(v34 + 8);
                    if (v35)
                      *(_QWORD *)(v35 + 16) = *(_QWORD *)(v34 + 16);
                  }
                  *(_QWORD *)v34 = a3;
                  if (a3)
                  {
                    v36 = *v30;
                    v37 = v33 + v28;
                    *(_QWORD *)(v37 + 8) = *v30;
                    if (v36)
                      *(_QWORD *)(v36 + 16) = v37 + 8;
                    *(_QWORD *)(v37 + 16) = v30;
                    *v30 = v34;
                  }
                }
                v29 += 8;
                v28 += 32;
              }
              while (v31 != v29);
            }
          }
          else
          {
            sub_1C4ECE04C(v25, a3, a2);
          }
        }
      }
      ++v13;
    }
    while (v13 != v14);
  }
}

void sub_1C4ECE04C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v6 = *(_DWORD *)(a1 + 20);
  v7 = v6 & 0x7FFFFFF;
  if ((v6 & 0x7FFFFFF) == *(_DWORD *)(a1 + 76))
  {
    v8 = v7 + (v7 >> 1);
    if (v8 <= 2)
      v9 = 2;
    else
      v9 = v8;
    *(_DWORD *)(a1 + 76) = v9;
    if ((v6 & 0x40000000) != 0)
      v10 = *(uint64_t **)(a1 - 8);
    else
      v10 = (uint64_t *)(a1 - 32 * v7);
    v11 = operator new(40 * v9);
    *(_QWORD *)(a1 - 8) = v11;
    v12 = v11;
    do
    {
      *v12 = 0;
      v12[1] = 0;
      v12[2] = 0;
      v12[3] = a1;
      v12 += 4;
    }
    while (v12 != &v11[4 * v9]);
    v13 = *(_DWORD *)(a1 + 20);
    if ((v13 & 0x40000000) != 0)
      v14 = (uint64_t)v11;
    else
      v14 = a1 - 32 * (v13 & 0x7FFFFFF);
    sub_1C53F5EAC((uint64_t)&v30, v10, &v10[4 * v7], v14);
    if ((_DWORD)v7)
    {
      memmove((void *)(v14 + 32 * v9), &v10[4 * v7], 8 * v7);
      v15 = 4 * v7;
      do
      {
        v16 = &v10[v15];
        if (v10[v15 - 4])
        {
          *(_QWORD *)*(v16 - 2) = *(v16 - 3);
          v17 = *(v16 - 3);
          if (v17)
            *(_QWORD *)(v17 + 16) = *(v16 - 2);
        }
        v15 -= 4;
      }
      while (v15 * 8);
    }
    operator delete(v10);
    v6 = *(_DWORD *)(a1 + 20);
  }
  v18 = (v6 + 1) & 0x7FFFFFF;
  *(_DWORD *)(a1 + 20) = v6 & 0xF8000000 | (v6 + 1) & 0x7FFFFFF;
  v19 = (v18 - 1);
  if ((v6 & 0x40000000) != 0)
    v20 = *(_QWORD *)(a1 - 8);
  else
    v20 = a1 - 32 * v18;
  v21 = v20 + 32 * v19;
  if (*(_QWORD *)v21)
  {
    **(_QWORD **)(v21 + 16) = *(_QWORD *)(v21 + 8);
    v22 = *(_QWORD *)(v21 + 8);
    if (v22)
      *(_QWORD *)(v22 + 16) = *(_QWORD *)(v21 + 16);
  }
  *(_QWORD *)v21 = a2;
  if (a2)
  {
    v25 = *(_QWORD *)(a2 + 8);
    v24 = (_QWORD *)(a2 + 8);
    v23 = v25;
    v26 = v20 + 32 * v19;
    *(_QWORD *)(v26 + 8) = v25;
    if (v25)
      *(_QWORD *)(v23 + 16) = v26 + 8;
    *(_QWORD *)(v26 + 16) = v24;
    *v24 = v21;
  }
  v27 = *(_DWORD *)(a1 + 20);
  v28 = v27 & 0x7FFFFFF;
  if ((v27 & 0x40000000) != 0)
    v29 = *(_QWORD *)(a1 - 8);
  else
    v29 = a1 - 32 * v28;
  *(_QWORD *)(v29 + 32 * *(unsigned int *)(a1 + 76) + 8 * (v28 - 1)) = a3;
}

uint64_t llvm::MemorySSA::renameBlock(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(unsigned int *)(a1 + 64);
  if (!(_DWORD)v5)
  {
LABEL_7:
    v7 = (uint64_t *)(v4 + 16 * v5);
    goto LABEL_8;
  }
  LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (uint64_t *)(v4 + 16 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v8 = *(_QWORD *)(v4 + 16 * v6);
      if (v8 == a2)
      {
        v7 = (uint64_t *)(v4 + 16 * v6);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v7 == (uint64_t *)(v4 + 16 * v5))
    return a3;
  v11 = v7[1];
  v12 = *(_QWORD *)(v11 + 8);
  if (v12 == v11)
    return a3;
  do
  {
    result = v12 - 32;
    if (v12)
      v14 = v12 - 32;
    else
      v14 = 0;
    if (v12)
    {
      v15 = *(unsigned __int8 *)(v14 + 16);
      if ((v15 - 27) >= 0xFFFFFFFE)
      {
        if (v15 == 25)
          v16 = v14;
        else
          v16 = 0;
        v17 = v16 - 32;
        if (v15 != 25)
          v17 = v14 - 64;
        if (*(_QWORD *)v17)
          v18 = a4 == 0;
        else
          v18 = 0;
        if (!v18)
        {
          if (*(_QWORD *)v17)
          {
            **(_QWORD **)(v17 + 16) = *(_QWORD *)(v17 + 8);
            v21 = *(_QWORD *)(v17 + 8);
            if (v21)
              *(_QWORD *)(v21 + 16) = *(_QWORD *)(v17 + 16);
          }
          *(_QWORD *)v17 = a3;
          if (a3)
          {
            v19 = (_QWORD *)(a3 + 8);
            v20 = *(_QWORD *)(a3 + 8);
            *(_QWORD *)(v17 + 8) = v20;
            if (v20)
              *(_QWORD *)(v20 + 16) = v17 + 8;
            *(_QWORD *)(v17 + 16) = v19;
            *v19 = v17;
          }
        }
        if (v15 == 26)
          result = v14;
        else
          result = a3;
      }
    }
    v12 = *(_QWORD *)(v12 + 8);
    a3 = result;
  }
  while (v12 != v11);
  return result;
}

void llvm::MemorySSA::renamePass(uint64_t a1, uint64_t *a2, uint64_t a3, llvm::SmallPtrSetImplBase *this, int a5, int a6)
{
  char v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  char *v16;
  uint64_t **v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  __n128 v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _QWORD v37[97];

  v37[96] = *MEMORY[0x1E0C80C00];
  v35 = v37;
  v36 = 0x2000000000;
  sub_1C4774094(this, *a2);
  if (v12 || (a5 & 1) == 0)
  {
    v13 = llvm::MemorySSA::renameBlock(a1, *a2, a3, a6);
    llvm::MemorySSA::renameSuccessorPhis(a1, *a2, v13, a6);
    v14 = a2[3];
    v33.n128_u64[0] = (unint64_t)a2;
    v33.n128_u64[1] = v14;
    v34 = v13;
    sub_1C4AB8FDC((uint64_t)&v35, &v33);
    v15 = v36;
    if ((_DWORD)v36)
    {
      while (1)
      {
        while (1)
        {
          v16 = (char *)v35 + 24 * v15;
          v17 = (uint64_t **)*((_QWORD *)v16 - 2);
          if (v17 != (uint64_t **)(*(_QWORD *)(*((_QWORD *)v16 - 3) + 24)
                                 + 8 * *(unsigned int *)(*((_QWORD *)v16 - 3) + 32)))
            break;
          LODWORD(v36) = --v15;
          if (!v15)
            goto LABEL_26;
        }
        v18 = *((_QWORD *)v16 - 1);
        v19 = *v17;
        *((_QWORD *)v16 - 2) = v17 + 1;
        v20 = *v19;
        sub_1C4774094(this, *v19);
        if (!v21 && a5 != 0)
          break;
        v18 = llvm::MemorySSA::renameBlock(a1, v20, v18, a6);
LABEL_25:
        llvm::MemorySSA::renameSuccessorPhis(a1, v20, v18, a6);
        v32 = v19[3];
        v33.n128_u64[0] = (unint64_t)v19;
        v33.n128_u64[1] = v32;
        v34 = v18;
        sub_1C4AB8FDC((uint64_t)&v35, &v33);
        v15 = v36;
        if (!(_DWORD)v36)
          goto LABEL_26;
      }
      v23 = *(_QWORD *)(a1 + 72);
      v24 = *(unsigned int *)(a1 + 88);
      if ((_DWORD)v24)
      {
        LODWORD(v25) = (v24 - 1) & ((v20 >> 4) ^ (v20 >> 9));
        v26 = (uint64_t *)(v23 + 16 * v25);
        v27 = *v26;
        if (v20 == *v26)
        {
LABEL_20:
          if (v26 != (uint64_t *)(v23 + 16 * v24))
          {
            v30 = (uint64_t *)v26[1];
            if (v30)
            {
              v31 = *v30;
              if (v31)
                v18 = v31 - 48;
              else
                v18 = 0;
            }
          }
          goto LABEL_25;
        }
        v28 = 1;
        while (v27 != -4096)
        {
          v29 = v25 + v28++;
          v25 = v29 & (v24 - 1);
          v27 = *(_QWORD *)(v23 + 16 * v25);
          if (v20 == v27)
          {
            v26 = (uint64_t *)(v23 + 16 * v25);
            goto LABEL_20;
          }
        }
      }
      v26 = (uint64_t *)(v23 + 16 * v24);
      goto LABEL_20;
    }
  }
LABEL_26:
  if (v35 != v37)
    free(v35);
}

void llvm::MemorySSA::markUnreachableAsLiveOnEntry(llvm::MemorySSA *this, llvm::BasicBlock *a2)
{
  llvm::BasicBlock *v4;
  char *v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::BasicBlock *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;

  v4 = (llvm::BasicBlock *)*((_QWORD *)a2 + 5);
  if (v4 != (llvm::BasicBlock *)((char *)a2 + 40))
  {
    if (v4)
      v5 = (char *)v4 - 24;
    else
      v5 = 0;
    v6 = v5[16];
    v7 = v6 - 29;
    if (v6 != 30)
    {
      v8 = 2;
      switch(v7)
      {
        case 1:
          __break(1u);
          goto LABEL_62;
        case 2:
          v8 = (*((_DWORD *)v5 + 5) >> 1) & 0x3FFFFFF;
          goto LABEL_59;
        case 3:
        case 9:
LABEL_62:
          v8 = (*((_DWORD *)v5 + 5) & 0x7FFFFFF) - 1;
          goto LABEL_59;
        case 4:
          goto LABEL_9;
        case 7:
          v8 = *((_WORD *)v5 + 9) & 1;
          goto LABEL_59;
        case 8:
          v8 = 1;
          goto LABEL_9;
        case 10:
          v8 = *((_DWORD *)v5 + 20) + 1;
LABEL_59:
          if (!v8)
            goto LABEL_29;
          goto LABEL_9;
        default:
          goto LABEL_29;
      }
    }
    if ((*((_DWORD *)v5 + 5) & 0x7FFFFFF) == 3)
      v8 = 2;
    else
      v8 = 1;
LABEL_9:
    v9 = 0;
    v10 = v8;
    while (1)
    {
      v11 = v5[16];
      if (v11 != 30)
        __asm { BR              X9 }
      v12 = (uint64_t *)&v5[-32 * v9 - 32];
      v13 = *v12;
      if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(*((_QWORD *)this + 1), *v12))
        goto LABEL_26;
      v14 = *((_QWORD *)this + 6);
      v15 = *((unsigned int *)this + 16);
      if (!(_DWORD)v15)
        goto LABEL_19;
      LODWORD(v16) = (v15 - 1) & ((v13 >> 4) ^ (v13 >> 9));
      v17 = (uint64_t *)(v14 + 16 * v16);
      v18 = *v17;
      if (v13 != *v17)
        break;
LABEL_20:
      if (v17 != (uint64_t *)(v14 + 16 * v15))
      {
        v21 = *(_QWORD *)(v17[1] + 8);
        v22 = v21 ? v21 - 32 : 0;
        if (*(_BYTE *)(v22 + 16) == 27)
          sub_1C4ECE04C(v22, *((_QWORD *)this + 12), (uint64_t)a2);
      }
LABEL_26:
      if (++v9 == v10)
        goto LABEL_29;
    }
    v19 = 1;
    while (v18 != -4096)
    {
      v20 = v16 + v19++;
      v16 = v20 & (v15 - 1);
      v18 = *(_QWORD *)(v14 + 16 * v16);
      if (v13 == v18)
      {
        v17 = (uint64_t *)(v14 + 16 * v16);
        goto LABEL_20;
      }
    }
LABEL_19:
    v17 = (uint64_t *)(v14 + 16 * v15);
    goto LABEL_20;
  }
LABEL_29:
  v23 = *((_QWORD *)this + 6);
  v24 = *((unsigned int *)this + 16);
  if ((_DWORD)v24)
  {
    LODWORD(v25) = (v24 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v26 = v23 + 16 * v25;
    v27 = *(llvm::BasicBlock **)v26;
    if (*(llvm::BasicBlock **)v26 == a2)
      goto LABEL_36;
    v28 = 1;
    while (v27 != (llvm::BasicBlock *)-4096)
    {
      v29 = v25 + v28++;
      v25 = v29 & (v24 - 1);
      v27 = *(llvm::BasicBlock **)(v23 + 16 * v25);
      if (v27 == a2)
      {
        v26 = v23 + 16 * v25;
        goto LABEL_36;
      }
    }
  }
  v26 = v23 + 16 * v24;
LABEL_36:
  if (v26 != v23 + 16 * v24)
  {
    v30 = *(_QWORD *)(v26 + 8);
    v31 = *(_QWORD *)(v30 + 8);
    while (v31 != v30)
    {
      v32 = v31;
      v31 = *(_QWORD *)(v31 + 8);
      if (v32)
        v33 = v32 - 32;
      else
        v33 = 0;
      if (v32 && (v34 = *(unsigned __int8 *)(v33 + 16), (v34 - 27) >= 0xFFFFFFFE))
      {
        if (v34 == 25)
          v35 = v33;
        else
          v35 = 0;
        v36 = v35 - 32;
        v37 = v34 == 25;
        v38 = *((_QWORD *)this + 12);
        if (!v37)
          v36 = v33 - 64;
        if (*(_QWORD *)v36)
        {
          **(_QWORD **)(v36 + 16) = *(_QWORD *)(v36 + 8);
          v44 = *(_QWORD *)(v36 + 8);
          if (v44)
            *(_QWORD *)(v44 + 16) = *(_QWORD *)(v36 + 16);
        }
        *(_QWORD *)v36 = v38;
        if (v38)
        {
          v41 = *(_QWORD *)(v38 + 8);
          v39 = (_QWORD *)(v38 + 8);
          v40 = v41;
          *(_QWORD *)(v36 + 8) = v41;
          if (v41)
            *(_QWORD *)(v40 + 16) = v36 + 8;
          *(_QWORD *)(v36 + 16) = v39;
          *v39 = v36;
        }
      }
      else
      {
        v42 = *(_QWORD *)(v33 + 32);
        v43 = *(_QWORD **)(v33 + 40);
        *v43 = v42;
        *(_QWORD *)(v42 + 8) = v43;
        *(_QWORD *)(v33 + 32) = 0;
        *(_QWORD *)(v33 + 40) = 0;
        llvm::Value::deleteValue((llvm::Value *)v33);
      }
    }
  }
}

llvm::MemorySSA *llvm::MemorySSA::MemorySSA(llvm::MemorySSA *this, llvm::Function *a2, llvm::AAResults *a3, llvm::DominatorTree *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t i;
  llvm::AAResults *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  void *v14;
  uint64_t v15;
  _BYTE v16[128];
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = a4;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = a2;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = (char *)this + 136;
  *((_QWORD *)this + 14) = (char *)this + 136;
  *((_QWORD *)this + 15) = 16;
  *((_DWORD *)this + 32) = 0;
  *((_DWORD *)this + 70) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *(_QWORD *)((char *)this + 309) = 0;
  *((_QWORD *)this + 38) = 0;
  v10 = a3;
  v11 = 1;
  v6 = 16;
  do
  {
    v7 = (char *)&v10 + v6;
    *(_OWORD *)v7 = xmmword_1C85F2120;
    *((_OWORD *)v7 + 1) = xmmword_1C85F2120;
    v6 += 40;
  }
  while (v7 + 40 != (char *)v13);
  v13[0] = &v17;
  v13[1] = 0;
  v14 = v16;
  v15 = 0x400000000;
  v17 = &unk_1E8134870;
  v18 = 1;
  for (i = 512; i != 640; i += 16)
    *(llvm::AAResults **)((char *)&v10 + i) = (llvm::AAResults *)-4096;
  llvm::MemorySSA::buildMemorySSA((uint64_t)this, (uint64_t *)&v10);
  *(_QWORD *)this = a3;
  llvm::MemorySSA::getWalkerImpl(this);
  if ((v18 & 1) == 0)
    MEMORY[0x1CAA32FB4](v19, 8);
  if (v14 != v16)
    free(v14);
  if ((v11 & 1) == 0)
    MEMORY[0x1CAA32FB4](v12, 8);
  return this;
}

void llvm::MemorySSA::buildMemorySSA(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  char *v8;
  int v9;
  llvm::Value *v10;
  uint64_t v11;
  llvm::BasicBlock *v12;
  _QWORD *v13;
  _QWORD *v14;
  char v15;
  const llvm::BasicBlock *AccessList;
  const llvm::BasicBlock *DefsList;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  char ModRefInfo;
  int v23;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  BOOL v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  BOOL v53;
  int v54;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t i;
  llvm::BasicBlock *v61;
  _QWORD *v62;
  uint64_t *v63;
  uint64_t v64;
  const llvm::BasicBlock *v65;
  char v66;
  llvm::BasicBlock *v67;
  __int128 v68;
  uint64_t v69;
  int v70;
  _BYTE v71[128];
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  int v75;
  _BYTE v76[264];

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80);
  if (v4)
    v5 = v4 - 24;
  else
    v5 = 0;
  v6 = operator new(0xA0uLL);
  v6[21] = v6[21] & 0x38000000 | 2;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 6) = 0;
  *((_QWORD *)v6 + 4) = 0;
  v7 = *(_QWORD *)(a1 + 16);
  *((_QWORD *)v6 + 8) = ***(_QWORD ***)v7 + 1576;
  v8 = (char *)(v6 + 16);
  *((_QWORD *)v6 + 3) = v6 + 16;
  *((_QWORD *)v6 + 7) = v6 + 16;
  v9 = *(_DWORD *)(a1 + 312);
  *(_DWORD *)(a1 + 312) = v9 + 1;
  *((_QWORD *)v6 + 9) = 0;
  *((_QWORD *)v6 + 10) = 0x20000001ALL;
  *((_QWORD *)v6 + 11) = llvm::MemoryDef::deleteMe;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  *((_QWORD *)v6 + 16) = v5;
  *((_QWORD *)v6 + 17) = 0;
  v6[36] = 1;
  *((_BYTE *)v6 + 148) = 1;
  v10 = *(llvm::Value **)(a1 + 96);
  *((_DWORD *)v8 + 22) = v9;
  *((_DWORD *)v8 + 23) = -1;
  *(_QWORD *)(a1 + 96) = v8;
  if (v10)
  {
    llvm::Value::deleteValue(v10);
    v7 = *(_QWORD *)(a1 + 16);
  }
  v72 = v76;
  v73 = v76;
  v74 = 32;
  v75 = 0;
  v11 = *(_QWORD *)(v7 + 80);
  v64 = v7 + 72;
  if (v11 == v7 + 72)
    goto LABEL_102;
  do
  {
    v12 = (llvm::BasicBlock *)(v11 - 24);
    if (!v11)
      v12 = 0;
    v13 = (_QWORD *)((char *)v12 + 40);
    v67 = v12;
    v14 = (_QWORD *)*((_QWORD *)v12 + 6);
    if (v14 == (_QWORD *)((char *)v12 + 40))
      goto LABEL_101;
    v15 = 0;
    AccessList = 0;
    DefsList = 0;
    while (2)
    {
      v66 = v15;
      v65 = DefsList;
      while (1)
      {
        if (v14)
          v18 = (uint64_t)(v14 - 3);
        else
          v18 = 0;
        v19 = *(unsigned __int8 *)(v18 + 16);
        if (v19 <= 0x3B)
        {
          if (v19 == 37)
            goto LABEL_30;
          if (v19 != 33 && v19 != 39)
            goto LABEL_61;
          goto LABEL_22;
        }
        if (v19 - 60 <= 0x1C)
        {
          if (v19 != 84)
          {
            if (((1 << (v19 - 60)) & 0x10100039) != 0)
              goto LABEL_30;
            if (v19 != 61)
              goto LABEL_61;
            if ((*(_WORD *)(v18 + 18) & 0x301) != 0)
              goto LABEL_30;
            goto LABEL_28;
          }
          v20 = *(_QWORD *)(v18 - 32);
          if (v20)
          {
            if (!*(_BYTE *)(v20 + 16)
              && *(_QWORD *)(v20 + 24) == *(_QWORD *)(v18 + 72)
              && (*(_BYTE *)(v20 + 33) & 0x20) != 0)
            {
              v45 = *(_DWORD *)(v20 + 36);
              if (v45 == 7 || v45 == 126 || v45 == 244)
                goto LABEL_65;
            }
          }
LABEL_22:
          v21 = *(_QWORD *)(v18 + 64);
          if (!v21 || (*(_BYTE *)(v21 + 20) & 4) == 0 && (*(_BYTE *)(v21 + 17) & 0x10) == 0)
          {
            LODWORD(v68) = 7;
            if (sub_1C53E4BBC(v18, (__int32 *)&v68, 1uLL))
            {
              v46 = *(_QWORD *)(v18 - 32);
              if (!v46
                || *(_BYTE *)(v46 + 16)
                || *(_QWORD *)(v46 + 24) != *(_QWORD *)(v18 + 72)
                || *(_DWORD *)(v46 + 36) != 7)
              {
                goto LABEL_30;
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v18, 66) & 1) == 0
              && !llvm::CallBase::hasFnAttrOnCalledFunction(v18, 44))
            {
              goto LABEL_30;
            }
          }
LABEL_28:
          v19 = *(unsigned __int8 *)(v18 + 16);
        }
LABEL_61:
        v42 = v19 - 33;
        if (v42 > 0x37)
          goto LABEL_65;
        if (((1 << v42) & 0x8000000000041) != 0)
        {
          v43 = *(_QWORD *)(v18 + 64);
          if (v43 && (*(_BYTE *)(v43 + 17) & 0x30) != 0)
            goto LABEL_65;
          v44 = *(_DWORD *)(v18 + 20);
          if (v44 < 0
            && (v47 = v18 - 32 * (v44 & 0x7FFFFFF), v50 = *(_QWORD *)(v47 - 8), v48 = v47 - 8, (v49 = v50) != 0))
          {
            v51 = -v49;
            while (1)
            {
              v52 = *(_DWORD *)(*(_QWORD *)(v48 + v51) + 8);
              v53 = v52 > 7;
              v54 = (1 << v52) & 0x83;
              if (v53 || v54 == 0)
                break;
              v51 += 16;
              if (!v51)
                goto LABEL_70;
            }
          }
          else
          {
LABEL_70:
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v18, 45) & 1) != 0
              || (llvm::CallBase::hasFnAttrOnCalledFunction(v18, 44) & 1) != 0)
            {
              goto LABEL_65;
            }
          }
        }
        else if (v42 == 27)
        {
          if ((*(_WORD *)(v18 + 18) & 0x301) == 0)
            goto LABEL_65;
        }
        else if (((1 << v42) & 0x808001D0000010) == 0)
        {
          goto LABEL_65;
        }
LABEL_30:
        LOBYTE(v68) = 0;
        v71[16] = 0;
        ModRefInfo = llvm::AAResults::getModRefInfo(*a2, v18, &v68, (uint64_t)(a2 + 1));
        if ((ModRefInfo & 2) != 0
          || ((v23 = *(unsigned __int8 *)(v18 + 16), v23 == 60) || v23 == 61) && (*(_WORD *)(v18 + 18) & 0x301) != 0)
        {
          v24 = operator new(0xA0uLL);
          v24[21] = v24[21] & 0x38000000 | 2;
          *((_QWORD *)v24 + 1) = 0;
          *((_QWORD *)v24 + 2) = 0;
          *(_QWORD *)v24 = 0;
          *((_QWORD *)v24 + 5) = 0;
          *((_QWORD *)v24 + 6) = 0;
          *((_QWORD *)v24 + 4) = 0;
          *((_QWORD *)v24 + 8) = ***(_QWORD ***)v18 + 1576;
          v25 = (char *)(v24 + 16);
          *((_QWORD *)v24 + 3) = v24 + 16;
          *((_QWORD *)v24 + 7) = v24 + 16;
          v26 = *(_QWORD *)(v18 + 40);
          v27 = *(_DWORD *)(a1 + 312);
          *(_DWORD *)(a1 + 312) = v27 + 1;
          *((_QWORD *)v24 + 9) = 0;
          *((_QWORD *)v24 + 10) = 0x20000001ALL;
          *((_QWORD *)v24 + 11) = llvm::MemoryDef::deleteMe;
          *((_OWORD *)v24 + 6) = 0u;
          *((_OWORD *)v24 + 7) = 0u;
          *((_QWORD *)v24 + 16) = v26;
          *((_QWORD *)v24 + 17) = v18;
          v24[36] = 1;
          *((_BYTE *)v24 + 148) = 1;
          v24[38] = v27;
          v24[39] = -1;
          goto LABEL_35;
        }
        if ((ModRefInfo & 1) != 0)
          break;
LABEL_65:
        v14 = (_QWORD *)v14[1];
        if (v14 == v13)
        {
          if ((v66 & 1) == 0)
            goto LABEL_101;
          goto LABEL_100;
        }
      }
      v40 = operator new(0x80uLL);
      v40[13] = v40[13] & 0x38000000 | 1;
      *((_QWORD *)v40 + 1) = 0;
      *((_QWORD *)v40 + 2) = 0;
      *(_QWORD *)v40 = 0;
      *((_QWORD *)v40 + 4) = ***(_QWORD ***)v18 + 1576;
      v25 = (char *)(v40 + 8);
      *((_QWORD *)v40 + 3) = v40 + 8;
      v41 = *(_QWORD *)(v18 + 40);
      *((_QWORD *)v40 + 5) = 0;
      *((_BYTE *)v40 + 48) = 25;
      *((_BYTE *)v40 + 49) = 0;
      *((_WORD *)v40 + 25) = 0;
      v40[13] = 1;
      *((_QWORD *)v40 + 7) = llvm::MemoryUse::deleteMe;
      *((_OWORD *)v40 + 4) = 0u;
      *((_OWORD *)v40 + 5) = 0u;
      *((_QWORD *)v40 + 12) = v41;
      *((_QWORD *)v40 + 13) = v18;
      v40[28] = 1;
      *((_BYTE *)v40 + 116) = 1;
      v40[30] = -1;
LABEL_35:
      *(_QWORD *)&v68 = v18;
      v28 = *(_DWORD *)(a1 + 40);
      if (!v28)
      {
        v38 = 0;
        goto LABEL_49;
      }
      v29 = *(_QWORD *)(a1 + 24);
      v30 = v28 - 1;
      v31 = v30 & ((v18 >> 4) ^ (v18 >> 9));
      v32 = (_QWORD *)(v29 + 16 * v31);
      v33 = *v32;
      if (*v32 != v18)
      {
        v34 = 0;
        v35 = 1;
        while (v33 != -4096)
        {
          if (v34)
            v36 = 0;
          else
            v36 = v33 == -8192;
          if (v36)
            v34 = v32;
          v37 = v31 + v35++;
          v31 = v37 & v30;
          v32 = (_QWORD *)(v29 + 16 * v31);
          v33 = *v32;
          if (*v32 == v18)
            goto LABEL_50;
        }
        if (v34)
          v38 = v34;
        else
          v38 = v32;
LABEL_49:
        v32 = sub_1C4ED90AC(a1 + 24, (uint64_t)&v68, (uint64_t *)&v68, v38);
        *v32 = v68;
        v32[1] = 0;
      }
LABEL_50:
      v32[1] = v25;
      if (!AccessList)
        AccessList = llvm::MemorySSA::getOrCreateAccessList((llvm::MemorySSA *)a1, v67);
      v39 = *(_QWORD *)AccessList;
      *((_QWORD *)v25 + 4) = *(_QWORD *)AccessList;
      *((_QWORD *)v25 + 5) = AccessList;
      *(_QWORD *)(v39 + 8) = v25 + 32;
      *(_QWORD *)AccessList = v25 + 32;
      if (v25[16] != 26)
        goto LABEL_65;
      DefsList = v65;
      if (!v65)
        DefsList = llvm::MemorySSA::getOrCreateDefsList((llvm::MemorySSA *)a1, v67);
      v56 = *(_QWORD *)DefsList;
      *((_QWORD *)v25 + 6) = *(_QWORD *)DefsList;
      *((_QWORD *)v25 + 7) = DefsList;
      v57 = v25 + 48;
      *(_QWORD *)(v56 + 8) = v57;
      *(_QWORD *)DefsList = v57;
      v14 = (_QWORD *)v14[1];
      v15 = 1;
      if (v14 != v13)
        continue;
      break;
    }
LABEL_100:
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v72, (uint64_t)v67);
LABEL_101:
    v11 = *(_QWORD *)(v11 + 8);
  }
  while (v11 != v64);
LABEL_102:
  llvm::MemorySSA::placePHINodes((llvm::MemorySSA *)a1, (uint64_t)&v72);
  *(_QWORD *)&v68 = v71;
  *((_QWORD *)&v68 + 1) = v71;
  v69 = 16;
  v70 = 0;
  llvm::MemorySSA::renamePass(a1, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 48), *(_QWORD *)(a1 + 96), (llvm::SmallPtrSetImplBase *)&v68, 0, 0);
  v58 = *(_QWORD *)(a1 + 16);
  v59 = v58 + 72;
  for (i = *(_QWORD *)(v58 + 80); i != v59; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v61 = (llvm::BasicBlock *)(i - 24);
    else
      v61 = 0;
    v62 = sub_1C477672C((uint64_t)&v68, (uint64_t)v61);
    if (*((_QWORD *)&v68 + 1) == (_QWORD)v68)
      v63 = (uint64_t *)((char *)&v69 + 4);
    else
      v63 = &v69;
    if (v62 == (_QWORD *)(*((_QWORD *)&v68 + 1) + 8 * *(unsigned int *)v63))
      llvm::MemorySSA::markUnreachableAsLiveOnEntry((llvm::MemorySSA *)a1, v61);
  }
  if (*((_QWORD *)&v68 + 1) != (_QWORD)v68)
    free(*((void **)&v68 + 1));
  if (v73 != v72)
    free(v73);
}

void llvm::MemorySSA::~MemorySSA(llvm::MemorySSA *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD **v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  llvm::Value *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = *((_QWORD *)this + 6);
  v3 = *((unsigned int *)this + 16);
  v4 = (_QWORD *)(v2 + 16 * v3);
  if (*((_DWORD *)this + 14))
  {
    if ((_DWORD)v3)
    {
      v5 = 16 * v3;
      v6 = (_QWORD *)*((_QWORD *)this + 6);
      while ((*v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v6 += 2;
        v5 -= 16;
        if (!v5)
          goto LABEL_6;
      }
    }
    else
    {
      v6 = (_QWORD *)*((_QWORD *)this + 6);
    }
  }
  else
  {
LABEL_6:
    v6 = (_QWORD *)(v2 + 16 * v3);
  }
  v7 = (_QWORD *)(v2 + 16 * v3);
LABEL_9:
  if (v6 != v7)
  {
    v8 = v6[1];
    for (i = *(_QWORD *)(v8 + 8); ; i = *(_QWORD *)(i + 8))
    {
      if (i == v8)
      {
        v17 = v6 + 2;
        v6 = v4;
        if (v17 != v4)
        {
          v6 = v17;
          while ((*v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v6 += 2;
            if (v6 == v4)
            {
              v6 = v4;
              goto LABEL_9;
            }
          }
        }
        goto LABEL_9;
      }
      if (i)
        v10 = i - 32;
      else
        v10 = 0;
      v11 = *(_DWORD *)(v10 + 20);
      if ((v11 & 0x40000000) != 0)
      {
        v13 = *(_QWORD *)(v10 - 8);
        v12 = v11 & 0x7FFFFFF;
        if (!v12)
          continue;
      }
      else
      {
        v12 = v11 & 0x7FFFFFF;
        v13 = v10 - 32 * v12;
        if (!v12)
          continue;
      }
      v14 = 32 * v12;
      v15 = (_QWORD **)(v13 + 16);
      do
      {
        if (*(v15 - 2))
        {
          **v15 = *(v15 - 1);
          v16 = (uint64_t)*(v15 - 1);
          if (v16)
            *(_QWORD *)(v16 + 16) = *v15;
        }
        *(v15 - 2) = 0;
        v15 += 4;
        v14 -= 32;
      }
      while (v14);
    }
  }
  v18 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v18)
    MEMORY[0x1CAA32FC0](v18, 0xA1C409BE6959DLL);
  v19 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v19)
    MEMORY[0x1CAA32FC0](v19, 0xA1C409BE6959DLL);
  v20 = (_QWORD *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v20)
  {
    MEMORY[0x1CAA32FB4](v20[295], 8);
    v21 = (_QWORD *)v20[5];
    if (v21 != v20 + 7)
      free(v21);
    MEMORY[0x1CAA32FC0](v20, 0x10F0C408D0AF1A8);
  }
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 33), 8);
  v22 = (void *)*((_QWORD *)this + 14);
  if (v22 != *((void **)this + 13))
    free(v22);
  v23 = (llvm::Value *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v23)
    llvm::Value::deleteValue(v23);
  v24 = *((unsigned int *)this + 22);
  v25 = *((_QWORD *)this + 9);
  if ((_DWORD)v24)
  {
    v26 = (uint64_t *)(v25 + 8);
    v27 = 16 * v24;
    do
    {
      v28 = *(v26 - 1);
      if (v28 != -4096 && v28 != -8192)
      {
        v29 = *v26;
        *v26 = 0;
        if (v29)
          MEMORY[0x1CAA32FC0](v29, 0x20C40A4A59CD2);
      }
      v26 += 2;
      v27 -= 16;
    }
    while (v27);
    v25 = *((_QWORD *)this + 9);
  }
  MEMORY[0x1CAA32FB4](v25, 8);
  v30 = *((unsigned int *)this + 16);
  v31 = *((_QWORD *)this + 6);
  if ((_DWORD)v30)
  {
    v32 = (uint64_t *)(v31 + 8);
    v33 = 16 * v30;
    do
    {
      v34 = *(v32 - 1);
      if (v34 != -4096 && v34 != -8192)
      {
        v35 = *v32;
        *v32 = 0;
        if (v35)
          sub_1C4ED74D0(v35);
      }
      v32 += 2;
      v33 -= 16;
    }
    while (v33);
    v31 = *((_QWORD *)this + 6);
  }
  MEMORY[0x1CAA32FB4](v31, 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 3), 8);
}

const llvm::BasicBlock *llvm::MemorySSA::getOrCreateAccessList(llvm::MemorySSA *this, const llvm::BasicBlock *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  const llvm::BasicBlock **v10;
  const llvm::BasicBlock *v11;
  const llvm::BasicBlock **v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  const llvm::BasicBlock *v17;
  const llvm::BasicBlock *v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  unsigned int v23;
  const llvm::BasicBlock *v24;
  const llvm::BasicBlock **v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  const llvm::BasicBlock **v29;

  v6 = *((_QWORD *)this + 6);
  v4 = (char *)this + 48;
  v5 = v6;
  v7 = *((_DWORD *)v4 + 4);
  v8 = a2 >> 4;
  if (v7)
  {
    v9 = (v7 - 1) & (v8 ^ (a2 >> 9));
    v10 = (const llvm::BasicBlock **)(v5 + 16 * v9);
    v11 = *v10;
    if (*v10 == a2)
      return v10[1];
    v12 = 0;
    v13 = 1;
    while (v11 != (const llvm::BasicBlock *)-4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == (const llvm::BasicBlock *)-8192;
      if (v14)
        v12 = v10;
      v15 = v9 + v13++;
      v9 = v15 & (v7 - 1);
      v10 = (const llvm::BasicBlock **)(v5 + 16 * v9);
      v11 = *v10;
      if (*v10 == a2)
        return v10[1];
    }
    if (v12)
      v10 = v12;
  }
  else
  {
    v10 = 0;
  }
  v16 = *((_DWORD *)this + 14);
  if (4 * v16 + 4 >= 3 * v7)
  {
    sub_1C4ED7324((uint64_t)v4, 2 * v7);
    v21 = *((_QWORD *)this + 6);
    v22 = *((_DWORD *)this + 16) - 1;
    v23 = v22 & (v8 ^ (a2 >> 9));
    v10 = (const llvm::BasicBlock **)(v21 + 16 * v23);
    v24 = *v10;
    if (*v10 == a2)
    {
LABEL_32:
      v17 = a2;
      goto LABEL_18;
    }
    v25 = 0;
    v26 = 1;
    while (v24 != (const llvm::BasicBlock *)-4096)
    {
      if (v25)
        v27 = 0;
      else
        v27 = v24 == (const llvm::BasicBlock *)-8192;
      if (v27)
        v25 = v10;
      v28 = v23 + v26++;
      v23 = v28 & v22;
      v10 = (const llvm::BasicBlock **)(v21 + 16 * v23);
      v24 = *v10;
      if (*v10 == a2)
        goto LABEL_32;
    }
    if (v25)
      v10 = v25;
  }
  else if (v7 + ~v16 - *((_DWORD *)this + 15) <= v7 >> 3)
  {
    sub_1C4ED7324((uint64_t)v4, v7);
    v29 = 0;
    sub_1C4DC18C8(*((_QWORD *)this + 6), *((_DWORD *)this + 16), (uint64_t)a2, &v29);
    v10 = v29;
  }
  v17 = *v10;
LABEL_18:
  ++*((_DWORD *)this + 14);
  if (v17 != (const llvm::BasicBlock *)-4096)
    --*((_DWORD *)this + 15);
  *v10 = a2;
  v10[1] = 0;
  v18 = (const llvm::BasicBlock *)operator new();
  *(_QWORD *)v18 = v18;
  *((_QWORD *)v18 + 1) = v18;
  v19 = (uint64_t)v10[1];
  v10[1] = v18;
  if (v19)
    sub_1C4ED74D0(v19);
  return v10[1];
}

const llvm::BasicBlock *llvm::MemorySSA::getOrCreateDefsList(llvm::MemorySSA *this, const llvm::BasicBlock *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  const llvm::BasicBlock **v10;
  const llvm::BasicBlock *v11;
  const llvm::BasicBlock **v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  const llvm::BasicBlock *v17;
  const llvm::BasicBlock *v18;
  const llvm::BasicBlock *v19;
  uint64_t v21;
  int v22;
  unsigned int v23;
  const llvm::BasicBlock *v24;
  const llvm::BasicBlock **v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  const llvm::BasicBlock **v29;

  v6 = *((_QWORD *)this + 9);
  v4 = (char *)this + 72;
  v5 = v6;
  v7 = *((_DWORD *)v4 + 4);
  v8 = a2 >> 4;
  if (v7)
  {
    v9 = (v7 - 1) & (v8 ^ (a2 >> 9));
    v10 = (const llvm::BasicBlock **)(v5 + 16 * v9);
    v11 = *v10;
    if (*v10 == a2)
      return v10[1];
    v12 = 0;
    v13 = 1;
    while (v11 != (const llvm::BasicBlock *)-4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == (const llvm::BasicBlock *)-8192;
      if (v14)
        v12 = v10;
      v15 = v9 + v13++;
      v9 = v15 & (v7 - 1);
      v10 = (const llvm::BasicBlock **)(v5 + 16 * v9);
      v11 = *v10;
      if (*v10 == a2)
        return v10[1];
    }
    if (v12)
      v10 = v12;
  }
  else
  {
    v10 = 0;
  }
  v16 = *((_DWORD *)this + 20);
  if (4 * v16 + 4 >= 3 * v7)
  {
    sub_1C4ED7544((uint64_t)v4, 2 * v7);
    v21 = *((_QWORD *)this + 9);
    v22 = *((_DWORD *)this + 22) - 1;
    v23 = v22 & (v8 ^ (a2 >> 9));
    v10 = (const llvm::BasicBlock **)(v21 + 16 * v23);
    v24 = *v10;
    if (*v10 == a2)
    {
LABEL_32:
      v17 = a2;
      goto LABEL_18;
    }
    v25 = 0;
    v26 = 1;
    while (v24 != (const llvm::BasicBlock *)-4096)
    {
      if (v25)
        v27 = 0;
      else
        v27 = v24 == (const llvm::BasicBlock *)-8192;
      if (v27)
        v25 = v10;
      v28 = v23 + v26++;
      v23 = v28 & v22;
      v10 = (const llvm::BasicBlock **)(v21 + 16 * v23);
      v24 = *v10;
      if (*v10 == a2)
        goto LABEL_32;
    }
    if (v25)
      v10 = v25;
  }
  else if (v7 + ~v16 - *((_DWORD *)this + 21) <= v7 >> 3)
  {
    sub_1C4ED7544((uint64_t)v4, v7);
    v29 = 0;
    sub_1C4DC18C8(*((_QWORD *)this + 9), *((_DWORD *)this + 22), (uint64_t)a2, &v29);
    v10 = v29;
  }
  v17 = *v10;
LABEL_18:
  ++*((_DWORD *)this + 20);
  if (v17 != (const llvm::BasicBlock *)-4096)
    --*((_DWORD *)this + 21);
  *v10 = a2;
  v10[1] = 0;
  v18 = (const llvm::BasicBlock *)operator new();
  *(_QWORD *)v18 = v18;
  *((_QWORD *)v18 + 1) = v18;
  v19 = v10[1];
  v10[1] = v18;
  if (v19)
    MEMORY[0x1CAA32FC0](v19, 0x20C40A4A59CD2);
  return v10[1];
}

void llvm::MemorySSA::OptimizeUses::optimizeUses(llvm::MemorySSA::OptimizeUses *this)
{
  _BYTE *v2;
  const void *v3;
  void *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  const void *v8;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v43;
  unsigned __int8 *v44;
  __int128 v45;
  int v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  __int128 v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 *v80;
  __int128 v81;
  __int128 v82;
  int64x2_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  char *v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  unsigned int v96;
  _BYTE *v97;
  _BYTE v98[64];
  char *v99;
  char *v100;
  uint64_t v101;
  _BYTE *v102;
  _BYTE *v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  _BYTE v107[64];
  void *__p;
  char *v109;
  uint64_t v110;
  void *v111;
  void *v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  void *v116;
  _BYTE *v117;
  void *v118;
  void *v119;
  unsigned int v120;
  unsigned int v121;
  void *v122;
  _BYTE *v123;
  _BYTE v124[56];
  unsigned __int8 *v125;
  unsigned __int8 *v126;
  unsigned __int8 *v127;
  _QWORD v128[3];
  __int128 v129;
  __int128 v130;
  __int128 v131;
  _BYTE v132[40];
  _QWORD *v133;
  uint64_t v134;
  _QWORD v135[19];

  v135[16] = *MEMORY[0x1E0C80C00];
  v133 = v135;
  v135[0] = *(_QWORD *)(*(_QWORD *)this + 96);
  v134 = 0x1000000001;
  v102 = *(_BYTE **)(*((_QWORD *)this + 3) + 48);
  sub_1C4EA1748((uint64_t *)&v102, (uint64_t)&v111);
  v2 = v107;
  v102 = v107;
  v3 = v112;
  if (v112 == v111)
  {
    v103 = v107;
    v4 = v112;
  }
  else
  {
    v89 = v113;
    v2 = malloc_type_malloc(8 * v113, 0x4065EBACuLL);
    if (!v2)
    {
      if (v89)
        goto LABEL_174;
      v2 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v2)
        goto LABEL_174;
    }
    v103 = v2;
    v4 = v111;
    v3 = v112;
  }
  v5 = v114;
  v104 = v113;
  if (v3 == v4)
    v6 = v114;
  else
    v6 = v113;
  if (v6)
  {
    memmove(v2, v3, 8 * v6);
    v5 = v114;
  }
  v105 = v5;
  v106 = v115;
  v109 = 0;
  v110 = 0;
  __p = 0;
  sub_1C4D6CDA0(&__p, v116, v117, 0xAAAAAAAAAAAAAAABLL * ((v117 - (_BYTE *)v116) >> 3));
  v7 = v98;
  v8 = v119;
  if (v119 != v118)
  {
    v90 = v120;
    v7 = malloc_type_malloc(8 * v120, 0x4065EBACuLL);
    if (v7 || !v90 && (v7 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v97 = v7;
      v9 = v118;
      v8 = v119;
      goto LABEL_10;
    }
LABEL_174:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v97 = v98;
  v9 = v119;
LABEL_10:
  if (v8 == v9)
    v10 = v121;
  else
    v10 = v120;
  if (v10)
    memmove(v7, v8, 8 * v10);
  v100 = 0;
  v101 = 0;
  v99 = 0;
  sub_1C4D6CDA0(&v99, v122, v123, 0xAAAAAAAAAAAAAAABLL * ((v123 - (_BYTE *)v122) >> 3));
  v91 = 0;
  v95 = 0;
  v11 = 0;
  v94 = 0;
  v12 = 1;
  v13 = 1;
  while (1)
  {
    if (v109 - (_BYTE *)__p != v100 - v99)
      goto LABEL_30;
    if (__p == v109)
      break;
    v14 = v99 + 8;
    v15 = (char *)__p + 8;
    while (1)
    {
      v16 = v15 - 8;
      if (*((_QWORD *)v15 - 1) != *((_QWORD *)v14 - 1))
        break;
      v17 = v14[8];
      if (v15[8])
        v18 = v17 == 0;
      else
        v18 = 1;
      if (v18)
      {
        if ((v15[8] == 0) == (v17 != 0))
          break;
      }
      else if (*(_QWORD *)v15 != *(_QWORD *)v14)
      {
        break;
      }
      v14 += 24;
      v15 += 24;
      if (v16 + 24 == v109)
        goto LABEL_146;
    }
LABEL_30:
    v19 = **((_QWORD **)v109 - 3);
    v20 = *(_QWORD *)(*(_QWORD *)this + 48);
    v21 = *(unsigned int *)(*(_QWORD *)this + 64);
    if ((_DWORD)v21)
    {
      LODWORD(v22) = ((v19 >> 4) ^ (v19 >> 9)) & (v21 - 1);
      v23 = (uint64_t *)(v20 + 16 * v22);
      v24 = *v23;
      if (v19 == *v23)
        goto LABEL_37;
      v25 = 1;
      while (v24 != -4096)
      {
        v26 = v22 + v25++;
        v22 = v26 & (v21 - 1);
        v24 = *(_QWORD *)(v20 + 16 * v22);
        if (v19 == v24)
        {
          v23 = (uint64_t *)(v20 + 16 * v22);
          goto LABEL_37;
        }
      }
    }
    v23 = (uint64_t *)(v20 + 16 * v21);
LABEL_37:
    if (v23 != (uint64_t *)(v20 + 16 * v21))
    {
      v27 = v23[1];
      if (v27)
      {
        for (i = *(_QWORD *)(v133[v134 - 1] + 64);
              !llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*((_QWORD *)this + 3), i, v19);
              i = *(_QWORD *)(v133[v29 - 1] + 64))
        {
          v29 = v134;
          if (*(_QWORD *)(v133[v134 - 1] + 64) == i)
          {
            do
              v29 = (v29 - 1);
            while (*(_QWORD *)(v133[v29 - 1] + 64) == i);
            LODWORD(v134) = v29;
          }
          ++v13;
        }
        v30 = *(_QWORD *)(v27 + 8);
        if (v30 != v27)
        {
          v93 = v27;
          while (1)
          {
            if (v30)
              v31 = v30 - 32;
            else
              v31 = 0;
            v32 = *(unsigned __int8 *)(v31 + 16);
            if (v32 == 25)
              v33 = v31;
            else
              v33 = 0;
            if (!v30 || v32 != 25)
            {
              v39 = v134;
              if (v134 >= (unint64_t)HIDWORD(v134))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, (uint64_t)v135, v134 + 1, 8);
                v39 = v134;
              }
              v133[v39] = v31;
              LODWORD(v134) = v134 + 1;
              ++v12;
              goto LABEL_123;
            }
            v34 = *(_BYTE *)(v33 + 16) == 25 ? v33 : 0;
            v35 = (uint64_t *)(v34 ? v34 - 32 : v33 - 64);
            v36 = *v35;
            if (!v36)
              break;
            v37 = 72;
            if (*(_BYTE *)(v36 + 16) == 26)
              v37 = 88;
            if (*(_DWORD *)(v33 + 88) != *(_DWORD *)(v36 + v37))
              break;
LABEL_123:
            v30 = *(_QWORD *)(v30 + 8);
            if (v30 == v27)
              goto LABEL_145;
          }
          if (sub_1C4ED3E4C(*((uint64_t **)this + 2), *(uint64_t **)(v33 + 72)))
          {
            v38 = *(_QWORD *)(*(_QWORD *)this + 96);
            if (*(_BYTE *)(v33 + 16) == 26)
              sub_1C4ED3D74(v33, v38);
            else
              sub_1C4ED3DE4(v33, v38);
            *(_QWORD *)(v33 + 80) = 0;
            goto LABEL_123;
          }
          v40 = *(_QWORD *)(v33 + 72);
          v41 = *(unsigned __int8 *)(v40 + 16);
          if ((v41 - 33) > 0x33 || ((1 << (v41 - 33)) & 0x8000000000041) == 0)
          {
            v124[0] = 0;
            if (v41 != 63)
            {
              llvm::MemoryLocation::getOrNone((uint64_t ***)v40, (uint64_t)&v131);
              *(_OWORD *)&v124[8] = v131;
              *(_OWORD *)&v124[24] = *(_OWORD *)v132;
              *(_OWORD *)&v124[40] = *(_OWORD *)&v132[16];
            }
          }
          else
          {
            v124[0] = 1;
            *(_QWORD *)&v124[8] = v40;
          }
          v125 = 0;
          v43 = sub_1C4ED4028(v94, v11, (int64x2_t *)v124, &v125);
          v44 = v125;
          if ((v43 & 1) != 0)
          {
            v45 = 0uLL;
            goto LABEL_83;
          }
          v126 = v125;
          v46 = v91;
          v47 = 0uLL;
          v48 = v12;
          if (4 * v91 + 4 >= 3 * v11)
          {
            v49 = 2 * v11;
          }
          else
          {
            v49 = v11;
            if (~v91 - v95 + v11 > v11 >> 3)
            {
              v50 = v11;
LABEL_82:
              v91 = v46 + 1;
              LOBYTE(v131) = 0;
              *((_QWORD *)&v131 + 1) = -4096;
              *(_QWORD *)v132 = -3;
              *(_OWORD *)&v132[8] = v47;
              *(_OWORD *)&v132[24] = v47;
              v95 -= sub_1C4ED42A0(v44, &v131) ^ 1;
              v51 = *(_OWORD *)&v124[16];
              *(_OWORD *)v44 = *(_OWORD *)v124;
              *((_OWORD *)v44 + 1) = v51;
              *((_OWORD *)v44 + 2) = *(_OWORD *)&v124[32];
              v45 = 0uLL;
              *((_QWORD *)v44 + 6) = *(_QWORD *)&v124[48];
              *(_OWORD *)(v44 + 56) = 0u;
              *(_OWORD *)(v44 + 72) = 0u;
              *(_OWORD *)(v44 + 88) = 0u;
              v11 = v50;
              *((_QWORD *)v44 + 13) = 0;
              v12 = v48;
LABEL_83:
              v96 = v11;
              if (*((_QWORD *)v44 + 8) == v13)
              {
                if (*((_QWORD *)v44 + 7) != v12)
                {
                  *((_QWORD *)v44 + 7) = v12;
                  *((_QWORD *)v44 + 8) = v13;
                }
              }
              else
              {
                *((_QWORD *)v44 + 7) = v12;
                *((_QWORD *)v44 + 8) = v13;
                v52 = *((_QWORD *)v44 + 10);
                if (v52)
                {
                  if (v52 != v19)
                  {
                    v53 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*((_QWORD *)this + 3), v52, v19);
                    v45 = 0uLL;
                    if (!v53)
                    {
                      *((_QWORD *)v44 + 9) = 0;
                      *((_QWORD *)v44 + 10) = *(_QWORD *)(*v133 + 64);
                      v44[96] = 0;
                    }
                  }
                }
              }
              v54 = v12;
              v55 = v134;
              v56 = v134 - 1;
              if (!v44[96])
              {
                *((_QWORD *)v44 + 11) = v56;
                v44[96] = 1;
                v57 = v44[104];
                *((_DWORD *)v44 + 25) = 1;
                if (!v57)
                  v44[104] = 1;
              }
              v58 = *((_QWORD *)v44 + 9);
              if (v56 - v58 > dword_1ED7F2C30)
              {
                v44[96] = 0;
                v12 = v54;
                v11 = v96;
LABEL_122:
                v27 = v93;
                goto LABEL_123;
              }
              LODWORD(v128[0]) = dword_1ED7F2C30;
              if (v56 <= v58)
              {
LABEL_103:
                v64 = *((_QWORD *)v44 + 11);
                v65 = v133;
                if (v56 < v64)
                  goto LABEL_112;
                v66 = v133[v64];
                v67 = *(_QWORD *)(v44 + 100);
                v12 = v54;
                if (*(_BYTE *)(v33 + 16) == 26)
                  sub_1C4ED3D74(v33, v66);
                else
                  sub_1C4ED3DE4(v33, v66);
                v11 = v96;
                *(_QWORD *)(v33 + 80) = v67;
              }
              else
              {
                v59 = v124[0];
                while (1)
                {
                  v60 = v133[v56];
                  if (*(_BYTE *)(v60 + 16) == 27)
                    break;
                  v61 = (uint64_t *)*((_QWORD *)this + 2);
                  if (v59)
                  {
                    *(_QWORD *)&v131 = 0;
                    *((_QWORD *)&v131 + 1) = -1;
                    *(_OWORD *)v132 = v45;
                    *(_OWORD *)&v132[16] = v45;
                  }
                  else
                  {
                    v131 = *(_OWORD *)&v124[8];
                    *(_OWORD *)v132 = *(_OWORD *)&v124[24];
                    *(_OWORD *)&v132[16] = *(_OWORD *)&v124[40];
                  }
                  v62 = sub_1C4ED5E98(*(_QWORD *)(v60 + 72), &v131, *(_QWORD *)(v33 + 72), v61);
                  if ((v62 & 1) != 0)
                  {
                    *((_DWORD *)v44 + 25) = HIDWORD(v62);
                    *((_DWORD *)v44 + 26) = v63;
                    v65 = v133;
                    goto LABEL_112;
                  }
                  --v56;
                  --v55;
                  v45 = 0uLL;
                  if (v56 <= *((_QWORD *)v44 + 9))
                    goto LABEL_103;
                }
                v68 = sub_1C4ED4CC4(*(_QWORD *)(*((_QWORD *)this + 1) + 16), v33, v128, 0);
                v65 = v133;
                do
                  v69 = v133[--v55];
                while (v69 != v68);
                v56 = v55;
LABEL_112:
                v12 = v54;
                v70 = v65[v56];
                v11 = v96;
                if (*(_QWORD *)(*(_QWORD *)this + 96) == v70)
                {
                  v71 = 0;
                  *(_QWORD *)(v44 + 100) = 0;
                  v70 = v65[v56];
                }
                else
                {
                  v71 = *(_QWORD *)(v44 + 100);
                }
                if (*(_BYTE *)(v33 + 16) == 26)
                  sub_1C4ED3D74(v33, v70);
                else
                  sub_1C4ED3DE4(v33, v70);
                *(_QWORD *)(v33 + 80) = v71;
                *((_QWORD *)v44 + 11) = v56;
              }
              *((_QWORD *)v44 + 9) = v134 - 1;
              *((_QWORD *)v44 + 10) = v19;
              goto LABEL_122;
            }
          }
          v72 = (v49 - 1) | ((unint64_t)(v49 - 1) >> 1);
          v73 = v72 | (v72 >> 2) | ((v72 | (v72 >> 2)) >> 4);
          v74 = ((v73 | (v73 >> 8)) >> 16) | v73 | (v73 >> 8);
          if ((v74 + 1) > 0x40)
            v50 = v74 + 1;
          else
            v50 = 64;
          v75 = (char *)operator new(112 * v50, (std::align_val_t)8uLL);
          v76 = (uint64_t)v75;
          if (v94)
          {
            v77 = v75;
            do
            {
              *v77 = 0;
              *((_QWORD *)v77 + 1) = -4096;
              *((_QWORD *)v77 + 2) = -3;
              *(_OWORD *)(v77 + 24) = 0uLL;
              *(_OWORD *)(v77 + 40) = 0uLL;
              v77 += 112;
            }
            while (v77 != &v75[112 * v50]);
            LOBYTE(v131) = 0;
            *((_QWORD *)&v131 + 1) = -4096;
            *(_QWORD *)v132 = -3;
            memset(&v132[8], 0, 32);
            LOBYTE(v128[0]) = 0;
            v128[1] = -8192;
            v128[2] = -4;
            v129 = 0uLL;
            v130 = 0uLL;
            if (v11)
            {
              v92 = 0;
              v78 = 112 * v11;
              v79 = v94;
              do
              {
                if ((sub_1C4ED42A0((unsigned __int8 *)v79, &v131) & 1) == 0
                  && (sub_1C4ED42A0((unsigned __int8 *)v79, v128) & 1) == 0)
                {
                  v127 = 0;
                  sub_1C4ED4028(v76, v50, (int64x2_t *)v79, &v127);
                  v80 = v127;
                  v82 = *(_OWORD *)(v79 + 16);
                  v81 = *(_OWORD *)(v79 + 32);
                  v83 = *(int64x2_t *)v79;
                  *((_QWORD *)v127 + 6) = *(_QWORD *)(v79 + 48);
                  *((_OWORD *)v80 + 1) = v82;
                  *((_OWORD *)v80 + 2) = v81;
                  *(int64x2_t *)v80 = v83;
                  v84 = *(_OWORD *)(v79 + 56);
                  v85 = *(_OWORD *)(v79 + 72);
                  v86 = *(_OWORD *)(v79 + 88);
                  *((_QWORD *)v80 + 13) = *(_QWORD *)(v79 + 104);
                  *(_OWORD *)(v80 + 88) = v86;
                  *(_OWORD *)(v80 + 72) = v85;
                  *(_OWORD *)(v80 + 56) = v84;
                  ++v92;
                }
                v79 += 112;
                v78 -= 112;
              }
              while (v78);
            }
            else
            {
              v92 = 0;
            }
            MEMORY[0x1CAA32FB4](v94, 8);
          }
          else
          {
            v87 = v75;
            do
            {
              *v87 = 0;
              *((_QWORD *)v87 + 1) = -4096;
              *((_QWORD *)v87 + 2) = -3;
              *(_OWORD *)(v87 + 24) = 0uLL;
              *(_OWORD *)(v87 + 40) = 0uLL;
              v87 += 112;
            }
            while (v87 != &v75[112 * v50]);
            v92 = 0;
          }
          sub_1C4ED4028(v76, v50, (int64x2_t *)v124, &v126);
          v95 = 0;
          v88 = v76;
          v44 = v126;
          v94 = v88;
          v47 = 0uLL;
          v46 = v92;
          goto LABEL_82;
        }
      }
    }
LABEL_145:
    sub_1C4E1FD70((llvm::SmallPtrSetImplBase *)&v102);
  }
LABEL_146:
  if (v99)
  {
    v100 = v99;
    operator delete(v99);
  }
  if (v97 != v98)
    free(v97);
  if (__p)
  {
    v109 = (char *)__p;
    operator delete(__p);
  }
  if (v103 != v102)
    free(v103);
  if (v122)
  {
    v123 = v122;
    operator delete(v122);
  }
  if (v119 != v118)
    free(v119);
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }
  if (v112 != v111)
    free(v112);
  MEMORY[0x1CAA32FB4](v94, 8);
  if (v133 != v135)
    free(v133);
}

void llvm::MemorySSA::placePHINodes(llvm::MemorySSA *a1, uint64_t a2)
{
  llvm::BasicBlock **v3;
  uint64_t v4;
  llvm::BasicBlock *v5;
  uint64_t v6[2];
  char v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[33];

  v11[32] = *MEMORY[0x1E0C80C00];
  v6[0] = *((_QWORD *)a1 + 1);
  v6[1] = 0;
  v7 = 0;
  v8 = a2;
  v9 = v11;
  v10 = 0x2000000000;
  sub_1C4ED0454(v6, (uint64_t *)&v9);
  v3 = (llvm::BasicBlock **)v9;
  if ((_DWORD)v10)
  {
    v4 = 8 * v10;
    do
    {
      v5 = *v3++;
      llvm::MemorySSA::createMemoryPhi(a1, v5);
      v4 -= 8;
    }
    while (v4);
    v3 = (llvm::BasicBlock **)v9;
  }
  if (v3 != v11)
    free(v3);
}

void sub_1C4ED0454(uint64_t *a1, uint64_t *a2)
{
  _BYTE *v4;
  unint64_t **v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  int v31;
  char *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  _BYTE *v46;
  int v47;
  uint64_t v48;
  _BYTE *v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t *v62[5];
  int v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  int v67;
  _BYTE v68[256];
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  int v72;
  _BYTE v73[256];
  void *v74;
  uint64_t v75;
  _BYTE v76[64];
  void *v77;
  uint64_t v78;
  _BYTE v79[256];
  void *v80;
  uint64_t v81;
  _QWORD v82[67];

  v82[65] = *MEMORY[0x1E0C80C00];
  v80 = v82;
  v81 = 0x2000000000;
  llvm::DominatorTreeBase<llvm::BasicBlock,false>::updateDFSNumbers(*a1);
  v77 = v79;
  v78 = 0x2000000000;
  v69 = v73;
  v70 = v73;
  v71 = 32;
  v72 = 0;
  v4 = v68;
  v64 = v68;
  v65 = v68;
  v66 = 32;
  v67 = 0;
  v5 = (unint64_t **)a1[4];
  v6 = v5[1];
  v7 = 16;
  if (v6 == *v5)
    v7 = 20;
  v8 = *(unsigned int *)((char *)v5 + v7);
  if ((_DWORD)v8)
  {
    v9 = 8 * v8;
    v10 = v6;
    while (*v10 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v10;
      v9 -= 8;
      if (!v9)
        goto LABEL_27;
    }
  }
  else
  {
    v10 = v6;
  }
  v11 = &v6[v8];
  if (v10 == v11)
  {
LABEL_27:
    v13 = v68;
    goto LABEL_28;
  }
  v12 = *v10;
  v13 = v68;
LABEL_11:
  v14 = *(_QWORD *)(*a1 + 24);
  v15 = *(unsigned int *)(*a1 + 40);
  if (!(_DWORD)v15)
    goto LABEL_17;
  LODWORD(v16) = ((v12 >> 4) ^ (v12 >> 9)) & (v15 - 1);
  v17 = (uint64_t *)(v14 + 16 * v16);
  v18 = *v17;
  if (v12 != *v17)
  {
    v19 = 1;
    while (v18 != -4096)
    {
      v20 = v16 + v19++;
      v16 = v20 & (v15 - 1);
      v18 = *(_QWORD *)(v14 + 16 * v16);
      if (v12 == v18)
      {
        v17 = (uint64_t *)(v14 + 16 * v16);
        goto LABEL_18;
      }
    }
LABEL_17:
    v17 = (uint64_t *)(v14 + 16 * v15);
  }
LABEL_18:
  if (v17 != (uint64_t *)(v14 + 16 * v15))
  {
    v21 = v17[1];
    if (v21)
    {
      v22 = *(unsigned int *)(v21 + 16);
      v23 = *(unsigned int *)(v21 + 72);
      v24 = v81;
      if (v81 >= (unint64_t)HIDWORD(v81))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, (uint64_t)v82, v81 + 1, 16);
        v24 = v81;
      }
      v25 = (uint64_t *)((char *)v80 + 16 * v24);
      *v25 = v21;
      v25[1] = v22 | (v23 << 32);
      LODWORD(v81) = v81 + 1;
      sub_1C4ED78FC((uint64_t)v80, (uint64_t)v80 + 16 * v81, (uint64_t)&v74, v81);
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v64, v21);
      v4 = v64;
      v13 = v65;
    }
  }
  v26 = v10 + 1;
  while (v26 != v11)
  {
    v27 = *v26++;
    v12 = v27;
    if (v27 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v10 = v26 - 1;
      goto LABEL_11;
    }
  }
LABEL_28:
  v28 = v81;
  if ((_DWORD)v81)
  {
    do
    {
      v29 = v80;
      v30 = *(_QWORD *)v80;
      v31 = *((_DWORD *)v80 + 2);
      if (v28 != 1)
      {
        v32 = (char *)v80 + 16 * v28;
        v33 = *((_DWORD *)v80 + 3);
        v34 = sub_1C4ED79C8((uint64_t)v80, (uint64_t)&v74, v28);
        if ((char *)v34 == v32 - 16)
        {
          *(_QWORD *)v34 = v30;
          *(_DWORD *)(v34 + 8) = v31;
          *(_DWORD *)(v34 + 12) = v33;
        }
        else
        {
          *(_QWORD *)v34 = *((_QWORD *)v32 - 2);
          *(_DWORD *)(v34 + 8) = *((_DWORD *)v32 - 2);
          *(_DWORD *)(v34 + 12) = *((_DWORD *)v32 - 1);
          *((_QWORD *)v32 - 2) = v30;
          *((_DWORD *)v32 - 2) = v31;
          *((_DWORD *)v32 - 1) = v33;
          sub_1C4ED78FC((uint64_t)v29, v34 + 16, (uint64_t)&v74, (v34 + 16 - (uint64_t)v29) >> 4);
        }
      }
      LODWORD(v81) = v81 - 1;
      v63 = v31;
      v35 = v78;
      if (v78 >= (unint64_t)HIDWORD(v78))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, (uint64_t)v79, v78 + 1, 8);
        v35 = v78;
      }
      *((_QWORD *)v77 + v35) = v30;
      v36 = __CFADD__((_DWORD)v78, 1);
      v37 = v78 + 1;
      LODWORD(v78) = v78 + 1;
      if (!v36)
      {
        do
        {
          v38 = *((_QWORD *)v77 + v37 - 1);
          LODWORD(v78) = v37 - 1;
          v39 = *(_QWORD *)v38;
          v62[0] = a1;
          v62[1] = (uint64_t *)&v63;
          v62[2] = (uint64_t *)&v69;
          v62[3] = a2;
          v62[4] = (uint64_t *)&v80;
          v40 = (int *)a1[1];
          if (v40)
          {
            sub_1C4ED7A6C(v40, v39, (uint64_t)&v74);
            v52 = v75;
            goto LABEL_58;
          }
          v41 = *(_QWORD *)(v39 + 40);
          if (v41 == v39 + 40)
          {
LABEL_78:
            v43 = 0;
            v44 = 0;
            v74 = v76;
            HIDWORD(v75) = 8;
          }
          else
          {
            if (v41)
              v42 = v41 - 24;
            else
              v42 = 0;
            if (*(_BYTE *)(v42 + 16) != 30)
            {
              v43 = 0;
              switch(*(_BYTE *)(v42 + 16))
              {
                case 0x1D:
                case 0x22:
                case 0x23:
                  goto LABEL_48;
                case 0x1E:
                  __break(1u);
                  return;
                case 0x1F:
                  v43 = (*(_DWORD *)(v42 + 20) >> 1) & 0x3FFFFFF;
                  goto LABEL_75;
                case 0x20:
                case 0x26:
                  v43 = (*(_DWORD *)(v42 + 20) & 0x7FFFFFF) - 1;
                  goto LABEL_75;
                case 0x21:
                  v43 = 2;
                  goto LABEL_48;
                case 0x24:
                  v43 = *(_WORD *)(v42 + 18) & 1;
                  goto LABEL_48;
                case 0x25:
                  v43 = 1;
                  goto LABEL_48;
                case 0x27:
                  v43 = *(_DWORD *)(v42 + 80) + 1;
LABEL_75:
                  v74 = v76;
                  v75 = 0x800000000;
                  if (v43 < 9)
                    goto LABEL_49;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, (uint64_t)v76, v43, 8);
                  v44 = v75;
                  v46 = v74;
                  v45 = v75;
                  break;
                default:
                  goto LABEL_78;
              }
              goto LABEL_51;
            }
            if ((*(_DWORD *)(v42 + 20) & 0x7FFFFFF) == 3)
              v43 = 2;
            else
              v43 = 1;
LABEL_48:
            v74 = v76;
            v75 = 0x800000000;
LABEL_49:
            v44 = 0;
            if (v43)
            {
              v45 = 0;
              v46 = v76;
LABEL_51:
              v47 = 0;
              v48 = 0;
              v49 = &v46[8 * v45];
              v50 = *(unsigned __int8 *)(v41 - 8);
              v51 = v41 - 88;
              do
              {
                if (v50 != 30)
                  __asm { BR              X1 }
                *(_QWORD *)&v49[8 * v48] = *(_QWORD *)(v41 - 56 - 32 * v48);
                ++v48;
                v47 += 2;
                v51 += 32;
              }
              while (v43 != v48);
              goto LABEL_57;
            }
            v43 = 0;
          }
LABEL_57:
          v52 = v44 + v43;
          LODWORD(v75) = v52;
LABEL_58:
          v53 = (uint64_t *)v74;
          if (v52)
          {
            v54 = 8 * v52;
            do
            {
              v55 = *v53++;
              sub_1C4ED7700(v62, v55);
              v54 -= 8;
            }
            while (v54);
            v53 = (uint64_t *)v74;
          }
          if (v53 != (uint64_t *)v76)
            free(v53);
          v56 = *(unsigned int *)(v38 + 32);
          if ((_DWORD)v56)
          {
            v57 = *(uint64_t **)(v38 + 24);
            v58 = 8 * v56;
            do
            {
              v59 = *v57;
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v64, *v57);
              if (v60)
              {
                v61 = v78;
                if (v78 >= (unint64_t)HIDWORD(v78))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, (uint64_t)v79, v78 + 1, 8);
                  v61 = v78;
                }
                *((_QWORD *)v77 + v61) = v59;
                LODWORD(v78) = v78 + 1;
              }
              ++v57;
              v58 -= 8;
            }
            while (v58);
          }
          v37 = v78;
        }
        while ((_DWORD)v78);
      }
      v28 = v81;
    }
    while ((_DWORD)v81);
    v4 = v64;
    v13 = v65;
  }
  if (v13 != v4)
    free(v13);
  if (v70 != v69)
    free(v70);
  if (v77 != v79)
    free(v77);
  if (v80 != v82)
    free(v80);
}

char *llvm::MemorySSA::createMemoryPhi(llvm::MemorySSA *this, llvm::BasicBlock *a2)
{
  char *v4;
  unsigned int v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  llvm::BasicBlock **v12;
  llvm::BasicBlock *v13;
  llvm::BasicBlock **v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  llvm::BasicBlock **v18;
  llvm::BasicBlock *v20;

  v4 = (char *)operator new(0x58uLL);
  *((_QWORD *)v4 + 1) = ***(_QWORD ***)a2 + 1576;
  v5 = *((_DWORD *)this + 78);
  *((_DWORD *)this + 78) = v5 + 1;
  *((_QWORD *)v4 + 2) = 0;
  v4[24] = 27;
  v4[25] = 0;
  *((_WORD *)v4 + 13) = 0;
  *((_DWORD *)v4 + 7) = 0x40000000;
  *((_QWORD *)v4 + 4) = llvm::MemoryPhi::deleteMe;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)v4 + 9) = a2;
  *((_QWORD *)v4 + 10) = v5;
  *(_QWORD *)v4 = operator new(0);
  llvm::MemorySSA::insertIntoListsForBlock((uint64_t)this, (uint64_t)(v4 + 8), a2, 0);
  v8 = *((_QWORD *)this + 3);
  v7 = (char *)this + 24;
  v6 = v8;
  v20 = a2;
  v9 = *((_DWORD *)v7 + 4);
  if (!v9)
  {
    v18 = 0;
LABEL_15:
    v12 = (llvm::BasicBlock **)sub_1C4ED90AC((uint64_t)v7, (uint64_t)&v20, (uint64_t *)&v20, v18);
    *v12 = v20;
    v12[1] = 0;
    goto LABEL_16;
  }
  v10 = v9 - 1;
  v11 = v10 & ((a2 >> 4) ^ (a2 >> 9));
  v12 = (llvm::BasicBlock **)(v6 + 16 * v11);
  v13 = *v12;
  if (*v12 != a2)
  {
    v14 = 0;
    v15 = 1;
    while (v13 != (llvm::BasicBlock *)-4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v13 == (llvm::BasicBlock *)-8192;
      if (v16)
        v14 = v12;
      v17 = v11 + v15++;
      v11 = v17 & v10;
      v12 = (llvm::BasicBlock **)(v6 + 16 * v11);
      v13 = *v12;
      if (*v12 == a2)
        goto LABEL_16;
    }
    if (v14)
      v18 = v14;
    else
      v18 = v12;
    goto LABEL_15;
  }
LABEL_16:
  v12[1] = (llvm::BasicBlock *)(v4 + 8);
  return v4 + 8;
}

_QWORD *llvm::MemorySSA::getWalkerImpl(llvm::MemorySSA *this)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  result = (_QWORD *)*((_QWORD *)this + 37);
  if (!result)
  {
    v3 = *((_QWORD *)this + 36);
    if (!v3)
    {
      v3 = operator new();
      *(_QWORD *)v3 = this;
      *(_OWORD *)(v3 + 8) = *(_OWORD *)this;
      *(_QWORD *)(v3 + 40) = v3 + 56;
      *(_QWORD *)(v3 + 48) = 0x2000000000;
      *(_BYTE *)(v3 + 2384) = 0;
      *(_DWORD *)(v3 + 2376) = 0;
      *(_OWORD *)(v3 + 2360) = 0u;
      *(_QWORD *)(v3 + 2392) = this;
      v4 = (_QWORD *)*((_QWORD *)this + 36);
      *((_QWORD *)this + 36) = v3;
      if (v4)
      {
        v6 = sub_1C4ED72E0(v4);
        MEMORY[0x1CAA32FC0](v6, 0x10F0C408D0AF1A8);
        v3 = *((_QWORD *)this + 36);
      }
    }
    result = (_QWORD *)operator new();
    *result = &off_1E81398F0;
    result[1] = this;
    result[2] = v3;
    v5 = *((_QWORD *)this + 37);
    *((_QWORD *)this + 37) = result;
    if (v5)
    {
      MEMORY[0x1CAA32FC0](v5, 0xA1C409BE6959DLL);
      return (_QWORD *)*((_QWORD *)this + 37);
    }
  }
  return result;
}

_QWORD *llvm::MemorySSA::getSkipSelfWalker(llvm::MemorySSA *this)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  result = (_QWORD *)*((_QWORD *)this + 38);
  if (!result)
  {
    v3 = *((_QWORD *)this + 36);
    if (!v3)
    {
      v3 = operator new();
      *(_QWORD *)v3 = this;
      *(_OWORD *)(v3 + 8) = *(_OWORD *)this;
      *(_QWORD *)(v3 + 40) = v3 + 56;
      *(_QWORD *)(v3 + 48) = 0x2000000000;
      *(_BYTE *)(v3 + 2384) = 0;
      *(_DWORD *)(v3 + 2376) = 0;
      *(_OWORD *)(v3 + 2360) = 0u;
      *(_QWORD *)(v3 + 2392) = this;
      v5 = (_QWORD *)*((_QWORD *)this + 36);
      *((_QWORD *)this + 36) = v3;
      if (v5)
      {
        v6 = sub_1C4ED72E0(v5);
        MEMORY[0x1CAA32FC0](v6, 0x10F0C408D0AF1A8);
        v3 = *((_QWORD *)this + 36);
      }
    }
    result = (_QWORD *)operator new();
    *result = &off_1E8139928;
    result[1] = this;
    result[2] = v3;
    v4 = *((_QWORD *)this + 38);
    *((_QWORD *)this + 38) = result;
    if (v4)
    {
      MEMORY[0x1CAA32FC0](v4, 0xA1C409BE6959DLL);
      return (_QWORD *)*((_QWORD *)this + 38);
    }
  }
  return result;
}

_QWORD *llvm::MemorySSA::insertIntoListsForBlock(uint64_t a1, uint64_t a2, llvm::BasicBlock *a3, int a4)
{
  const llvm::BasicBlock *AccessList;
  uint64_t v9;
  const llvm::BasicBlock *DefsList;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  const llvm::BasicBlock *v16;
  const llvm::BasicBlock *v17;
  _QWORD *v18;
  uint64_t v19;
  const llvm::BasicBlock *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *result;
  uint64_t v25;
  uint64_t v26;

  AccessList = llvm::MemorySSA::getOrCreateAccessList((llvm::MemorySSA *)a1, a3);
  if (a4)
  {
    v9 = *(_QWORD *)AccessList;
    *(_QWORD *)(a2 + 32) = *(_QWORD *)AccessList;
    *(_QWORD *)(a2 + 40) = AccessList;
    *(_QWORD *)(v9 + 8) = a2 + 32;
    *(_QWORD *)AccessList = a2 + 32;
    if (*(_BYTE *)(a2 + 16) != 25)
    {
      DefsList = llvm::MemorySSA::getOrCreateDefsList((llvm::MemorySSA *)a1, a3);
      v11 = *(_QWORD *)DefsList;
      *(_QWORD *)(a2 + 48) = *(_QWORD *)DefsList;
      *(_QWORD *)(a2 + 56) = DefsList;
      v12 = a2 + 48;
      *(_QWORD *)(v11 + 8) = v12;
      *(_QWORD *)DefsList = v12;
    }
    goto LABEL_22;
  }
  v13 = *(unsigned __int8 *)(a2 + 16);
  if (v13 == 27)
  {
    v14 = (uint64_t *)*((_QWORD *)AccessList + 1);
    v15 = *v14;
    *(_QWORD *)(a2 + 40) = v14;
    *(_QWORD *)(a2 + 32) = v15;
    *(_QWORD *)(v15 + 8) = a2 + 32;
    *v14 = a2 + 32;
    v16 = (const llvm::BasicBlock *)*((_QWORD *)llvm::MemorySSA::getOrCreateDefsList((llvm::MemorySSA *)a1, a3) + 1);
LABEL_21:
    v22 = *(_QWORD *)v16;
    *(_QWORD *)(a2 + 48) = *(_QWORD *)v16;
    *(_QWORD *)(a2 + 56) = v16;
    v23 = a2 + 48;
    *(_QWORD *)(v22 + 8) = v23;
    *(_QWORD *)v16 = v23;
    goto LABEL_22;
  }
  v17 = AccessList;
  while (1)
  {
    v17 = (const llvm::BasicBlock *)*((_QWORD *)v17 + 1);
    if (v17 == AccessList)
      break;
    v18 = (_QWORD *)((char *)v17 - 32);
    if (!v17)
      v18 = 0;
    if (*((_BYTE *)v18 + 16) != 27)
      goto LABEL_13;
  }
  v17 = AccessList;
LABEL_13:
  v19 = *(_QWORD *)v17;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)v17;
  *(_QWORD *)(a2 + 40) = v17;
  *(_QWORD *)(v19 + 8) = a2 + 32;
  *(_QWORD *)v17 = a2 + 32;
  if (v13 != 25)
  {
    v20 = llvm::MemorySSA::getOrCreateDefsList((llvm::MemorySSA *)a1, a3);
    v16 = v20;
    while (1)
    {
      v16 = (const llvm::BasicBlock *)*((_QWORD *)v16 + 1);
      if (v16 == v20)
        break;
      v21 = (_QWORD *)((char *)v16 - 48);
      if (!v16)
        v21 = 0;
      if (*((_BYTE *)v21 + 16) != 27)
        goto LABEL_21;
    }
    v16 = v20;
    goto LABEL_21;
  }
LABEL_22:
  result = sub_1C477672C(a1 + 104, (uint64_t)a3);
  v25 = *(_QWORD *)(a1 + 112);
  v26 = 120;
  if (v25 == *(_QWORD *)(a1 + 104))
    v26 = 124;
  if (result != (_QWORD *)(v25 + 8 * *(unsigned int *)(a1 + v26)))
  {
    *result = -2;
    ++*(_DWORD *)(a1 + 128);
  }
  return result;
}

_QWORD *llvm::MemorySSA::insertIntoListsBefore(llvm::MemorySSA *this, uint64_t a2, llvm::BasicBlock *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::BasicBlock *v12;
  int v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  const llvm::BasicBlock *DefsList;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *result;
  uint64_t v28;
  uint64_t v29;

  v4 = a4;
  v8 = *((_QWORD *)this + 6);
  v9 = *((unsigned int *)this + 16);
  if ((_DWORD)v9)
  {
    LODWORD(v10) = (v9 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    v11 = v8 + 16 * v10;
    v12 = *(llvm::BasicBlock **)v11;
    if (*(llvm::BasicBlock **)v11 == a3)
      goto LABEL_8;
    v13 = 1;
    while (v12 != (llvm::BasicBlock *)-4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(llvm::BasicBlock **)(v8 + 16 * v10);
      if (v12 == a3)
      {
        v11 = v8 + 16 * v10;
        goto LABEL_8;
      }
    }
  }
  v11 = v8 + 16 * v9;
LABEL_8:
  if (v11 == v8 + 16 * v9)
    v15 = 0;
  else
    v15 = *(_QWORD **)(v11 + 8);
  v16 = *a4;
  *(_QWORD *)(a2 + 32) = *a4;
  *(_QWORD *)(a2 + 40) = a4;
  *(_QWORD *)(v16 + 8) = a2 + 32;
  *a4 = a2 + 32;
  if (*(_BYTE *)(a2 + 16) != 25)
  {
    DefsList = llvm::MemorySSA::getOrCreateDefsList(this, a3);
    if (v15 == v4)
    {
LABEL_19:
      v22 = *(_QWORD *)DefsList;
      *(_QWORD *)(a2 + 48) = *(_QWORD *)DefsList;
      *(_QWORD *)(a2 + 56) = DefsList;
      v23 = a2 + 48;
      *(_QWORD *)(v22 + 8) = v23;
      *(_QWORD *)DefsList = v23;
    }
    else if (*((_BYTE *)v4 - 16) == 26)
    {
      v19 = v4[2];
      v18 = v4 + 2;
      *(_QWORD *)(a2 + 48) = v19;
      *(_QWORD *)(a2 + 56) = v18;
      v20 = a2 + 48;
      *(_QWORD *)(v19 + 8) = v20;
      *v18 = v20;
    }
    else
    {
      while (1)
      {
        v21 = v4 - 4;
        if (!v4)
          v21 = 0;
        if (*((_BYTE *)v21 + 16) == 26)
          break;
        v4 = (_QWORD *)v4[1];
        if (v4 == v15)
          goto LABEL_19;
      }
      v25 = v21[6];
      v24 = v21 + 6;
      *(_QWORD *)(a2 + 48) = v25;
      *(_QWORD *)(a2 + 56) = v24;
      v26 = a2 + 48;
      *(_QWORD *)(v25 + 8) = v26;
      *v24 = v26;
    }
  }
  result = sub_1C477672C((uint64_t)this + 104, (uint64_t)a3);
  v28 = *((_QWORD *)this + 14);
  v29 = 120;
  if (v28 == *((_QWORD *)this + 13))
    v29 = 124;
  if (result != (_QWORD *)(v28 + 8 * *(unsigned int *)((char *)this + v29)))
  {
    *result = -2;
    ++*((_DWORD *)this + 32);
  }
  return result;
}

_QWORD *llvm::MemorySSA::prepareForMoveTo(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v6;

  result = llvm::MemorySSA::removeFromLists(a1, a2, 0);
  if (a2 && *(_BYTE *)(a2 + 16) == 26)
  {
    *(_DWORD *)(a2 + 92) = -1;
    if (*(_QWORD *)(a2 - 32))
    {
      **(_QWORD **)(a2 - 16) = *(_QWORD *)(a2 - 24);
      v6 = *(_QWORD *)(a2 - 24);
      if (v6)
        *(_QWORD *)(v6 + 16) = *(_QWORD *)(a2 - 16);
    }
    *(_QWORD *)(a2 - 32) = 0;
  }
  *(_QWORD *)(a2 + 64) = a3;
  return result;
}

_QWORD *llvm::MemorySSA::removeFromLists(int32x2_t *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  unsigned int v7;
  int32x2_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  int32x2_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  llvm::Value *v25;
  llvm::Value *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *result;
  int32x2_t v30;
  uint64_t v31;

  v6 = *(_QWORD *)(a2 + 64);
  v7 = v6 >> 4;
  if (*(_BYTE *)(a2 + 16) == 25)
    goto LABEL_11;
  v8 = a1[9];
  v9 = a1[11].u32[0];
  if ((_DWORD)v9)
  {
    LODWORD(v10) = (v9 - 1) & (v7 ^ (v6 >> 9));
    v11 = (uint64_t *)(*(_QWORD *)&v8 + 16 * v10);
    v12 = *v11;
    if (v6 == *v11)
      goto LABEL_9;
    v13 = 1;
    while (v12 != -4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(_QWORD *)(*(_QWORD *)&v8 + 16 * v10);
      if (v6 == v12)
      {
        v11 = (uint64_t *)(*(_QWORD *)&v8 + 16 * v10);
        goto LABEL_9;
      }
    }
  }
  v11 = (uint64_t *)(*(_QWORD *)&v8 + 16 * v9);
LABEL_9:
  v15 = *(_QWORD *)(a2 + 48);
  v16 = *(_QWORD **)(a2 + 56);
  *v16 = v15;
  *(_QWORD *)(v15 + 8) = v16;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  if (*(_QWORD *)v11[1] == v11[1])
  {
    v11[1] = 0;
    MEMORY[0x1CAA32FC0]();
    *v11 = -8192;
    a1[10] = vadd_s32(a1[10], (int32x2_t)0x1FFFFFFFFLL);
  }
LABEL_11:
  v17 = a1[6];
  v18 = a1[8].u32[0];
  if ((_DWORD)v18)
  {
    LODWORD(v19) = (v18 - 1) & (v7 ^ (v6 >> 9));
    v20 = (uint64_t *)(*(_QWORD *)&v17 + 16 * v19);
    v21 = *v20;
    if (v6 == *v20)
      goto LABEL_18;
    v22 = 1;
    while (v21 != -4096)
    {
      v23 = v19 + v22++;
      v19 = v23 & (v18 - 1);
      v21 = *(_QWORD *)(*(_QWORD *)&v17 + 16 * v19);
      if (v6 == v21)
      {
        v20 = (uint64_t *)(*(_QWORD *)&v17 + 16 * v19);
        goto LABEL_18;
      }
    }
  }
  v20 = (uint64_t *)(*(_QWORD *)&v17 + 16 * v18);
LABEL_18:
  v24 = a2 + 32;
  if (!a2)
    v24 = 0;
  v25 = (llvm::Value *)(v24 - 32);
  if (a2)
    v26 = v25;
  else
    v26 = 0;
  v27 = *((_QWORD *)v26 + 4);
  v28 = (_QWORD *)*((_QWORD *)v26 + 5);
  *v28 = v27;
  *(_QWORD *)(v27 + 8) = v28;
  *((_QWORD *)v26 + 4) = 0;
  *((_QWORD *)v26 + 5) = 0;
  if (a3)
    llvm::Value::deleteValue(v26);
  result = (_QWORD *)v20[1];
  if ((_QWORD *)*result == result)
  {
    v20[1] = 0;
    sub_1C4ED74D0((uint64_t)result);
    *v20 = -8192;
    a1[7] = vadd_s32(a1[7], (int32x2_t)0x1FFFFFFFFLL);
    result = sub_1C477672C((uint64_t)&a1[13], v6);
    v30 = a1[14];
    v31 = 30;
    if (*(_QWORD *)&v30 == *(_QWORD *)&a1[13])
      v31 = 31;
    if (result != (_QWORD *)(*(_QWORD *)&v30 + 8 * a1->u32[v31]))
    {
      *result = -2;
      ++a1[16].i32[0];
    }
  }
  return result;
}

_QWORD *llvm::MemorySSA::moveTo(int32x2_t *a1, uint64_t a2, llvm::BasicBlock *a3, int a4)
{
  llvm::BasicBlock *v9;
  uint64_t v10;
  _QWORD v11[3];

  if (*(_BYTE *)(a2 + 16) == 27)
  {
    v9 = *(llvm::BasicBlock **)(a2 + 64);
    v11[0] = 0;
    if (sub_1C4926528((uint64_t)&a1[3], &v9, v11))
    {
      *(_QWORD *)v11[0] = -8192;
      a1[4] = vadd_s32(a1[4], (int32x2_t)0x1FFFFFFFFLL);
    }
    v9 = a3;
    v10 = a2;
    sub_1C61A5ABC((uint64_t)&a1[3], (uint64_t *)&v9, &v10, (uint64_t)v11);
  }
  llvm::MemorySSA::prepareForMoveTo(a1, a2, (uint64_t)a3);
  return llvm::MemorySSA::insertIntoListsForBlock((uint64_t)a1, a2, a3, a4);
}

char *llvm::MemorySSA::createDefinedAccess(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *result;
  char *v6;
  char *v7;
  uint64_t v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1C4ED1550((uint64_t)a1, a2, *a1, a4);
  if (result)
  {
    if (result[16] == 25)
      v6 = result;
    else
      v6 = 0;
    if (v6)
      v7 = v6 - 32;
    else
      v7 = result - 64;
    if (*(_QWORD *)v7)
    {
      **((_QWORD **)v7 + 2) = *((_QWORD *)v7 + 1);
      v11 = *((_QWORD *)v7 + 1);
      if (v11)
        *(_QWORD *)(v11 + 16) = *((_QWORD *)v7 + 2);
    }
    *(_QWORD *)v7 = a3;
    if (a3)
    {
      v10 = *(_QWORD *)(a3 + 8);
      v9 = (char **)(a3 + 8);
      v8 = v10;
      *((_QWORD *)v7 + 1) = v10;
      if (v10)
        *(_QWORD *)(v8 + 16) = v7 + 8;
      *((_QWORD *)v7 + 2) = v9;
      *v9 = v7;
    }
  }
  return result;
}

char *sub_1C4ED1550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL4 v12;
  int v13;
  char v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  BOOL v36;
  unsigned int v37;
  _QWORD *v38;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  BOOL v48;
  int v49;
  __int128 v51[3];
  char v52;

  v8 = *(unsigned __int8 *)(a2 + 16);
  if (v8 <= 0x3B)
  {
    if (v8 == 37)
      goto LABEL_16;
    if (v8 != 33 && v8 != 39)
      goto LABEL_29;
    goto LABEL_8;
  }
  if (v8 - 60 > 0x1C)
    goto LABEL_29;
  if (v8 != 84)
  {
    if (((1 << (v8 - 60)) & 0x10100039) != 0)
      goto LABEL_16;
    if (v8 != 61)
    {
LABEL_29:
      v16 = 0;
      v17 = v8 - 33;
      if (v17 > 0x37)
        return v16;
      if (((1 << v17) & 0x8000000000041) != 0)
      {
        v18 = *(_QWORD *)(a2 + 64);
        if (v18 && (*(_BYTE *)(v18 + 17) & 0x30) != 0)
          return 0;
        v19 = *(_DWORD *)(a2 + 20);
        if (v19 < 0
          && (v42 = a2 - 32 * (v19 & 0x7FFFFFF), v45 = *(_QWORD *)(v42 - 8), v43 = v42 - 8, (v44 = v45) != 0))
        {
          v46 = -v44;
          while (1)
          {
            v47 = *(_DWORD *)(*(_QWORD *)(v43 + v46) + 8);
            v48 = v47 > 7;
            v49 = (1 << v47) & 0x83;
            if (v48 || v49 == 0)
              break;
            v46 += 16;
            if (!v46)
              goto LABEL_37;
          }
        }
        else
        {
LABEL_37:
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(a2, 45) & 1) != 0
            || (llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44) & 1) != 0)
          {
            return 0;
          }
        }
      }
      else if (v17 == 27)
      {
        if ((*(_WORD *)(a2 + 18) & 0x301) == 0)
          return 0;
      }
      else if (((1 << v17) & 0x808001D0000010) == 0)
      {
        return v16;
      }
LABEL_16:
      if (a4)
      {
        v11 = *(unsigned __int8 *)(a4 + 16);
        v12 = v11 == 26;
        v13 = v11 == 25;
        if (v12)
          goto LABEL_44;
      }
      else
      {
        LOBYTE(v51[0]) = 0;
        v52 = 0;
        v14 = sub_1C4D90C64(a3, a2, v51);
        v12 = 1;
        if ((v14 & 2) == 0)
        {
          if ((v15 = *(unsigned __int8 *)(a2 + 16), v15 != 60) && v15 != 61 || (*(_WORD *)(a2 + 18) & 0x301) == 0)
            v12 = 0;
        }
        v13 = v14 & 1;
        if (v12)
        {
LABEL_44:
          if (v12)
          {
            v20 = operator new(0xA0uLL);
            v20[21] = v20[21] & 0x38000000 | 2;
            *((_QWORD *)v20 + 1) = 0;
            *((_QWORD *)v20 + 2) = 0;
            *(_QWORD *)v20 = 0;
            *((_QWORD *)v20 + 5) = 0;
            *((_QWORD *)v20 + 6) = 0;
            *((_QWORD *)v20 + 4) = 0;
            *((_QWORD *)v20 + 8) = ***(_QWORD ***)a2 + 1576;
            v16 = (char *)(v20 + 16);
            *((_QWORD *)v20 + 3) = v20 + 16;
            *((_QWORD *)v20 + 7) = v20 + 16;
            v21 = *(_QWORD *)(a2 + 40);
            v22 = *(_DWORD *)(a1 + 312);
            *(_DWORD *)(a1 + 312) = v22 + 1;
            *((_QWORD *)v20 + 9) = 0;
            *((_QWORD *)v20 + 10) = 0x20000001ALL;
            *((_QWORD *)v20 + 11) = llvm::MemoryDef::deleteMe;
            *((_OWORD *)v20 + 6) = 0u;
            *((_OWORD *)v20 + 7) = 0u;
            *((_QWORD *)v20 + 16) = v21;
            *((_QWORD *)v20 + 17) = a2;
            v20[36] = 1;
            *((_BYTE *)v20 + 148) = 1;
            v20[38] = v22;
            v20[39] = -1;
          }
          else
          {
            v23 = operator new(0x80uLL);
            v23[13] = v23[13] & 0x38000000 | 1;
            *((_QWORD *)v23 + 1) = 0;
            *((_QWORD *)v23 + 2) = 0;
            *(_QWORD *)v23 = 0;
            v24 = ***(_QWORD ***)a2 + 1576;
            v23[13] = 1;
            *((_QWORD *)v23 + 4) = v24;
            v16 = (char *)(v23 + 8);
            *((_QWORD *)v23 + 3) = v23 + 8;
            v25 = *(_QWORD *)(a2 + 40);
            *((_QWORD *)v23 + 5) = 0;
            *((_BYTE *)v23 + 48) = 25;
            *((_BYTE *)v23 + 49) = 0;
            *((_WORD *)v23 + 25) = 0;
            *((_QWORD *)v23 + 7) = llvm::MemoryUse::deleteMe;
            *((_OWORD *)v23 + 4) = 0u;
            *((_OWORD *)v23 + 5) = 0u;
            *((_QWORD *)v23 + 12) = v25;
            *((_QWORD *)v23 + 13) = a2;
            v23[28] = 1;
            *((_BYTE *)v23 + 116) = 1;
            v23[30] = -1;
          }
          v28 = *(_QWORD *)(a1 + 24);
          v27 = a1 + 24;
          v26 = v28;
          *(_QWORD *)&v51[0] = a2;
          v29 = *(_DWORD *)(v27 + 16);
          if (v29)
          {
            v30 = v29 - 1;
            v31 = v30 & ((a2 >> 4) ^ (a2 >> 9));
            v32 = (_QWORD *)(v26 + 16 * v31);
            v33 = *v32;
            if (*v32 == a2)
            {
LABEL_62:
              v32[1] = v16;
              return v16;
            }
            v34 = 0;
            v35 = 1;
            while (v33 != -4096)
            {
              if (v34)
                v36 = 0;
              else
                v36 = v33 == -8192;
              if (v36)
                v34 = v32;
              v37 = v31 + v35++;
              v31 = v37 & v30;
              v32 = (_QWORD *)(v26 + 16 * v31);
              v33 = *v32;
              if (*v32 == a2)
                goto LABEL_62;
            }
            if (v34)
              v38 = v34;
            else
              v38 = v32;
          }
          else
          {
            v38 = 0;
          }
          v32 = sub_1C4ED90AC(v27, (uint64_t)v51, (uint64_t *)v51, v38);
          *v32 = *(_QWORD *)&v51[0];
          v32[1] = 0;
          goto LABEL_62;
        }
      }
      if (v13)
        goto LABEL_44;
      return 0;
    }
    if ((*(_WORD *)(a2 + 18) & 0x301) != 0)
      goto LABEL_16;
LABEL_14:
    v8 = *(unsigned __int8 *)(a2 + 16);
    goto LABEL_29;
  }
  v9 = *(_QWORD *)(a2 - 32);
  if (!v9
    || *(_BYTE *)(v9 + 16)
    || *(_QWORD *)(v9 + 24) != *(_QWORD *)(a2 + 72)
    || (*(_BYTE *)(v9 + 33) & 0x20) == 0
    || (v16 = 0, v40 = *(_DWORD *)(v9 + 36), v40 != 7) && v40 != 126 && v40 != 244)
  {
LABEL_8:
    v10 = *(_QWORD *)(a2 + 64);
    if (!v10 || (*(_BYTE *)(v10 + 20) & 4) == 0 && (*(_BYTE *)(v10 + 17) & 0x10) == 0)
    {
      LODWORD(v51[0]) = 7;
      if (sub_1C53E4BBC(a2, (__int32 *)v51, 1uLL))
      {
        v41 = *(_QWORD *)(a2 - 32);
        if (!v41 || *(_BYTE *)(v41 + 16) || *(_QWORD *)(v41 + 24) != *(_QWORD *)(a2 + 72) || *(_DWORD *)(v41 + 36) != 7)
          goto LABEL_16;
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(a2, 66) & 1) == 0
        && !llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44))
      {
        goto LABEL_16;
      }
    }
    goto LABEL_14;
  }
  return v16;
}

int32x2_t llvm::MemorySSA::removeFromLookups(int32x2_t *this, uint64_t a2)
{
  __int32 v4;
  int32x2_t v5;
  __int32 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  int32x2_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  _QWORD *WalkerImpl;
  uint64_t v19;
  int32x2_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  int v27;

  v4 = this[35].i32[0];
  if (v4)
  {
    v5 = this[33];
    v6 = v4 - 1;
    LODWORD(v7) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v8 = (uint64_t *)(*(_QWORD *)&v5 + 16 * v7);
    v9 = *v8;
    if (*v8 == a2)
    {
LABEL_7:
      *v8 = -8192;
      result = vadd_s32(this[34], (int32x2_t)0x1FFFFFFFFLL);
      this[34] = result;
    }
    else
    {
      v10 = 1;
      while (v9 != -4096)
      {
        v11 = v7 + v10++;
        v7 = v11 & v6;
        v9 = *(_QWORD *)(*(_QWORD *)&v5 + 16 * v7);
        if (v9 == a2)
        {
          v8 = (uint64_t *)(*(_QWORD *)&v5 + 16 * v7);
          goto LABEL_7;
        }
      }
    }
  }
  v13 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && (v13 - 27) >= 0xFFFFFFFE)
  {
    if (v13 == 25)
      v14 = a2;
    else
      v14 = 0;
    if (v14)
      v15 = v14 - 32;
    else
      v15 = a2 - 64;
    if (*(_QWORD *)v15)
    {
      **(_QWORD **)(v15 + 16) = *(_QWORD *)(v15 + 8);
      v16 = *(_QWORD *)(v15 + 8);
      if (v16)
        *(_QWORD *)(v16 + 16) = *(_QWORD *)(v15 + 16);
    }
    *(_QWORD *)v15 = 0;
  }
  if (v13 == 25)
  {
    v17 = 0;
  }
  else
  {
    WalkerImpl = llvm::MemorySSA::getWalkerImpl((llvm::MemorySSA *)this);
    (*(void (**)(_QWORD *, uint64_t))(*WalkerImpl + 32))(WalkerImpl, a2);
    v17 = *(unsigned __int8 *)(a2 + 16) - 27 < 0xFFFFFFFE;
  }
  if (!a2)
    v17 = 1;
  if (v17)
    v19 = 64;
  else
    v19 = 72;
  v20 = this[3];
  v21 = this[5].u32[0];
  if ((_DWORD)v21)
  {
    v22 = *(_QWORD *)(a2 + v19);
    LODWORD(v23) = ((v22 >> 4) ^ (v22 >> 9)) & (v21 - 1);
    v24 = (uint64_t *)(*(_QWORD *)&v20 + 16 * v23);
    v25 = *v24;
    if (v22 == *v24)
      goto LABEL_35;
    v26 = 1;
    while (v25 != -4096)
    {
      v27 = v23 + v26++;
      v23 = v27 & (v21 - 1);
      v25 = *(_QWORD *)(*(_QWORD *)&v20 + 16 * v23);
      if (v22 == v25)
      {
        v24 = (uint64_t *)(*(_QWORD *)&v20 + 16 * v23);
        goto LABEL_35;
      }
    }
  }
  v24 = (uint64_t *)(*(_QWORD *)&v20 + 16 * v21);
LABEL_35:
  if (v24[1] == a2)
  {
    *v24 = -8192;
    result = vadd_s32(this[4], (int32x2_t)0x1FFFFFFFFLL);
    this[4] = result;
  }
  return result;
}

_QWORD *llvm::MemorySSA::print(llvm::Function **this, llvm::raw_ostream *a2)
{
  _QWORD v3[2];

  v3[0] = &off_1E8139860;
  v3[1] = this;
  return llvm::Function::print(this[2], a2, (llvm::AssemblyAnnotationWriter *)v3, 0, 0);
}

void llvm::MemorySSA::verifyPrevDefInPhis(llvm::MemorySSA *this, Function *a2)
{
  uint64_t i;

  for (i = *((_QWORD *)a2 + 10); (Function *)i != (Function *)((char *)a2 + 72); i = *(_QWORD *)(i + 8))
    ;
}

void llvm::MemorySSA::verifyDominationNumbers(llvm::MemorySSA *this, const llvm::Function *a2)
{
  unsigned int v2;
  char *v5;
  const void *v6;
  const void *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unsigned int *v15;
  char *v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  char *v28;
  char *v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  _BYTE v33[128];

  v2 = *((_DWORD *)this + 31);
  if (v2 != *((_DWORD *)this + 32))
  {
    v5 = v33;
    v28 = v33;
    v6 = (const void *)*((_QWORD *)this + 14);
    if (v6 == *((const void **)this + 13))
    {
      v29 = v33;
      v7 = v6;
    }
    else
    {
      v27 = *((unsigned int *)this + 30);
      v5 = (char *)malloc_type_malloc(8 * v27, 0x4065EBACuLL);
      if (!v5 && ((_DWORD)v27 || (v5 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v29 = v5;
      v7 = (const void *)*((_QWORD *)this + 13);
      v6 = (const void *)*((_QWORD *)this + 14);
      v2 = *((_DWORD *)this + 31);
    }
    v8 = *((_DWORD *)this + 30);
    v30 = v8;
    if (v6 == v7)
      v9 = v2;
    else
      v9 = v8;
    if (v9)
    {
      memmove(v5, v6, 8 * v9);
      v2 = *((_DWORD *)this + 31);
    }
    v10 = *((_DWORD *)this + 32);
    v31 = v2;
    v32 = v10;
    v11 = (char *)a2 + 72;
    v12 = (char *)*((_QWORD *)a2 + 10);
    if (v12 != (char *)a2 + 72)
    {
      while (1)
      {
        if (v12)
          v13 = (uint64_t)(v12 - 24);
        else
          v13 = 0;
        v14 = (char *)sub_1C477672C((uint64_t)&v28, v13);
        if (v29 == v28)
          v15 = &v31;
        else
          v15 = &v30;
        if (v14 == &v29[8 * *v15])
          goto LABEL_34;
        v16 = (char *)sub_1C477672C((uint64_t)&v28, v13);
        if (v29 == v28)
          v17 = &v31;
        else
          v17 = &v30;
        if (v16 != &v29[8 * *v17])
        {
          *(_QWORD *)v16 = -2;
          ++v32;
        }
        v18 = *((_QWORD *)this + 6);
        v19 = *((unsigned int *)this + 16);
        if (!(_DWORD)v19)
          goto LABEL_28;
        LODWORD(v20) = (v19 - 1) & ((v13 >> 4) ^ (v13 >> 9));
        v21 = (uint64_t *)(v18 + 16 * v20);
        v22 = *v21;
        if (v13 != *v21)
          break;
LABEL_29:
        if (v21 != (uint64_t *)(v18 + 16 * v19))
        {
          v25 = v21[1];
          if (v25)
          {
            for (i = *(_QWORD *)(v25 + 8); i != v25; i = *(_QWORD *)(i + 8))
              ;
          }
        }
LABEL_34:
        v12 = (char *)*((_QWORD *)v12 + 1);
        if (v12 == v11)
          goto LABEL_35;
      }
      v23 = 1;
      while (v22 != -4096)
      {
        v24 = v20 + v23++;
        v20 = v24 & (v19 - 1);
        v22 = *(_QWORD *)(v18 + 16 * v20);
        if (v13 == v22)
        {
          v21 = (uint64_t *)(v18 + 16 * v20);
          goto LABEL_29;
        }
      }
LABEL_28:
      v21 = (uint64_t *)(v18 + 16 * v19);
      goto LABEL_29;
    }
LABEL_35:
    if (v29 != v28)
      free(v29);
  }
}

void llvm::MemorySSA::verifyOrderingDominationAndDefUses(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _BYTE v52[256];
  void *v53;
  uint64_t v54;
  _QWORD v55[34];

  v55[32] = *MEMORY[0x1E0C80C00];
  v53 = v55;
  v54 = 0x2000000000;
  v50 = v52;
  v51 = 0x2000000000;
  v2 = a2 + 72;
  v3 = *(_QWORD *)(a2 + 80);
  if (v3 == a2 + 72)
    goto LABEL_61;
  do
  {
    if (v3)
      v5 = v3 - 24;
    else
      v5 = 0;
    v6 = *(_QWORD *)(a1 + 48);
    v7 = *(unsigned int *)(a1 + 64);
    v8 = v5 >> 4;
    if ((_DWORD)v7)
    {
      LODWORD(v9) = (v8 ^ (v5 >> 9)) & (v7 - 1);
      v10 = (uint64_t *)(v6 + 16 * v9);
      v11 = *v10;
      if (v5 == *v10)
        goto LABEL_12;
      v12 = 1;
      while (v11 != -4096)
      {
        v13 = v9 + v12++;
        v9 = v13 & (v7 - 1);
        v11 = *(_QWORD *)(v6 + 16 * v9);
        if (v5 == v11)
        {
          v10 = (uint64_t *)(v6 + 16 * v9);
          goto LABEL_12;
        }
      }
    }
    v10 = (uint64_t *)(v6 + 16 * v7);
LABEL_12:
    if (v10 == (uint64_t *)(v6 + 16 * v7))
      v14 = 0;
    else
      v14 = v10[1];
    v15 = *(_QWORD *)(a1 + 72);
    v16 = *(unsigned int *)(a1 + 88);
    if ((_DWORD)v16)
    {
      LODWORD(v17) = (v16 - 1) & (v8 ^ (v5 >> 9));
      v18 = (uint64_t *)(v15 + 16 * v17);
      v19 = *v18;
      if (v5 == *v18)
        goto LABEL_22;
      v20 = 1;
      while (v19 != -4096)
      {
        v21 = v17 + v20++;
        v17 = v21 & (v16 - 1);
        v19 = *(_QWORD *)(v15 + 16 * v17);
        if (v5 == v19)
        {
          v18 = (uint64_t *)(v15 + 16 * v17);
          goto LABEL_22;
        }
      }
    }
    v18 = (uint64_t *)(v15 + 16 * v16);
LABEL_22:
    if (v18 == (uint64_t *)(v15 + 16 * v16))
      v22 = 0;
    else
      v22 = v18[1];
    v23 = *(_DWORD *)(a1 + 40);
    if (v23)
    {
      v24 = *(_QWORD *)(a1 + 24);
      v25 = v23 - 1;
      v26 = v25 & (v8 ^ (v5 >> 9));
      v27 = *(_QWORD *)(v24 + 16 * v26);
      if (v5 == v27)
      {
LABEL_30:
        v30 = *(_QWORD *)(v24 + 16 * v26 + 8);
        if (v30)
        {
          v31 = v54;
          if (v54 >= (unint64_t)HIDWORD(v54))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, (uint64_t)v55, v54 + 1, 8);
            v31 = v54;
          }
          *((_QWORD *)v53 + v31) = v30;
          LODWORD(v54) = v54 + 1;
          v32 = v51;
          if (v51 >= (unint64_t)HIDWORD(v51))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)v52, v51 + 1, 8);
            v32 = v51;
          }
          *((_QWORD *)v50 + v32) = v30;
          LODWORD(v51) = v51 + 1;
          v33 = (_QWORD *)(v30 + 8);
          do
          {
            v34 = *v33;
            v33 = (_QWORD *)(*v33 + 8);
          }
          while (v34);
        }
      }
      else
      {
        v28 = 1;
        while (v27 != -4096)
        {
          v29 = v26 + v28++;
          v26 = v29 & v25;
          v27 = *(_QWORD *)(v24 + 16 * v26);
          if (v5 == v27)
            goto LABEL_30;
        }
      }
    }
    v35 = v5 + 40;
    for (i = *(_QWORD *)(v5 + 48); i != v35; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v37 = i - 24;
      else
        v37 = 0;
      v38 = *(_DWORD *)(a1 + 40);
      if (v38)
      {
        v39 = *(_QWORD *)(a1 + 24);
        v40 = v38 - 1;
        v41 = ((v37 >> 4) ^ (v37 >> 9)) & (v38 - 1);
        v42 = *(_QWORD *)(v39 + 16 * v41);
        if (v37 == v42)
        {
LABEL_47:
          v45 = *(_QWORD *)(v39 + 16 * v41 + 8);
          if (v45)
          {
            v46 = v54;
            if (v54 >= (unint64_t)HIDWORD(v54))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, (uint64_t)v55, v54 + 1, 8);
              v46 = v54;
            }
            *((_QWORD *)v53 + v46) = v45;
            LODWORD(v54) = v54 + 1;
            if (*(_BYTE *)(v45 + 16) == 26)
            {
              v47 = v51;
              if (v51 >= (unint64_t)HIDWORD(v51))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)v52, v51 + 1, 8);
                v47 = v51;
              }
              *((_QWORD *)v50 + v47) = v45;
              LODWORD(v51) = v51 + 1;
              v48 = (_QWORD *)(v45 + 8);
              do
              {
                v49 = *v48;
                v48 = (_QWORD *)(*v48 + 8);
              }
              while (v49);
            }
          }
        }
        else
        {
          v43 = 1;
          while (v42 != -4096)
          {
            v44 = v41 + v43++;
            v41 = v44 & v40;
            v42 = *(_QWORD *)(v39 + 16 * v41);
            if (v37 == v42)
              goto LABEL_47;
          }
        }
      }
    }
    if (v14 | v22)
    {
      LODWORD(v54) = 0;
      LODWORD(v51) = 0;
    }
    v3 = *(_QWORD *)(v3 + 8);
  }
  while (v3 != v2);
  if (v50 != v52)
    free(v50);
LABEL_61:
  if (v53 != v55)
    free(v53);
}

_QWORD *llvm::MemorySSA::renumberBlock(llvm::MemorySSA *this, const llvm::BasicBlock *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const llvm::BasicBlock *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  unsigned int v41;

  v4 = *((_QWORD *)this + 6);
  v5 = *((unsigned int *)this + 16);
  if ((_DWORD)v5)
  {
    LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v7 = v4 + 16 * v6;
    v8 = *(const llvm::BasicBlock **)v7;
    if (*(const llvm::BasicBlock **)v7 == a2)
      goto LABEL_8;
    v9 = 1;
    while (v8 != (const llvm::BasicBlock *)-4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v8 = *(const llvm::BasicBlock **)(v4 + 16 * v6);
      if (v8 == a2)
      {
        v7 = v4 + 16 * v6;
        goto LABEL_8;
      }
    }
  }
  v7 = v4 + 16 * v5;
LABEL_8:
  if (v7 == v4 + 16 * v5)
    v11 = 0;
  else
    v11 = *(_QWORD *)(v7 + 8);
  v12 = *(_QWORD *)(v11 + 8);
  if (v12 != v11)
  {
    v13 = 0;
    v14 = (_QWORD *)((char *)this + 264);
    v15 = *((_DWORD *)this + 70);
    while (1)
    {
      if (v12)
        v16 = v12 - 32;
      else
        v16 = 0;
      if (!v15)
      {
        v19 = 0;
        goto LABEL_31;
      }
      v17 = v15 - 1;
      v18 = ((v16 >> 4) ^ (v16 >> 9)) & (v15 - 1);
      v19 = (_QWORD *)(*v14 + 16 * v18);
      v20 = *v19;
      if (v16 != *v19)
        break;
LABEL_37:
      v19[1] = ++v13;
      v12 = *(_QWORD *)(v12 + 8);
      if (v12 == v11)
        return sub_1C4774094((llvm::MemorySSA *)((char *)this + 104), (uint64_t)a2);
    }
    v21 = 0;
    v22 = 1;
    while (v20 != -4096)
    {
      if (v21)
        v23 = 0;
      else
        v23 = v20 == -8192;
      if (v23)
        v21 = v19;
      v24 = v18 + v22++;
      v18 = v24 & v17;
      v19 = (_QWORD *)(*v14 + 16 * (v24 & v17));
      v20 = *v19;
      if (v16 == *v19)
        goto LABEL_37;
    }
    if (v21)
      v19 = v21;
LABEL_31:
    v25 = *((_DWORD *)this + 68);
    if (4 * v25 + 4 >= 3 * v15)
    {
      sub_1C4ED91DC((uint64_t)this + 264, 2 * v15);
      v27 = *((_QWORD *)this + 33);
      v15 = *((_DWORD *)this + 70);
      v28 = v15 - 1;
      v29 = (v15 - 1) & ((v16 >> 4) ^ (v16 >> 9));
      v19 = (_QWORD *)(v27 + 16 * v29);
      v30 = *v19;
      if (v16 == *v19)
      {
LABEL_48:
        v26 = v16;
        goto LABEL_34;
      }
      v31 = 0;
      v32 = 1;
      while (v30 != -4096)
      {
        if (v31)
          v33 = 0;
        else
          v33 = v30 == -8192;
        if (v33)
          v31 = v19;
        v34 = v29 + v32++;
        v29 = v34 & v28;
        v19 = (_QWORD *)(v27 + 16 * (v34 & v28));
        v30 = *v19;
        if (v16 == *v19)
          goto LABEL_48;
      }
    }
    else
    {
      if (v15 + ~v25 - *((_DWORD *)this + 69) > v15 >> 3)
        goto LABEL_33;
      sub_1C4ED91DC((uint64_t)this + 264, v15);
      v15 = *((_DWORD *)this + 70);
      if (!v15)
      {
        v19 = 0;
        goto LABEL_33;
      }
      v35 = *((_QWORD *)this + 33);
      v36 = v15 - 1;
      v37 = (v15 - 1) & ((v16 >> 4) ^ (v16 >> 9));
      v19 = (_QWORD *)(v35 + 16 * v37);
      v38 = *v19;
      if (*v19 == v16)
      {
LABEL_33:
        v26 = *v19;
LABEL_34:
        ++*((_DWORD *)this + 68);
        if (v26 != -4096)
          --*((_DWORD *)this + 69);
        *v19 = v16;
        v19[1] = 0;
        goto LABEL_37;
      }
      v31 = 0;
      v39 = 1;
      while (v38 != -4096)
      {
        if (v31)
          v40 = 0;
        else
          v40 = v38 == -8192;
        if (v40)
          v31 = v19;
        v41 = v37 + v39++;
        v37 = v41 & v36;
        v19 = (_QWORD *)(v35 + 16 * (v41 & v36));
        v38 = *v19;
        if (*v19 == v16)
          goto LABEL_33;
      }
    }
    if (v31)
      v19 = v31;
    goto LABEL_33;
  }
  return sub_1C4774094((llvm::MemorySSA *)((char *)this + 104), (uint64_t)a2);
}

BOOL llvm::MemorySSA::locallyDominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  const llvm::BasicBlock *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unint64_t v24;

  if (a3 == a2)
    return 1;
  v5 = *(_QWORD *)(a1 + 96);
  if (v5 != a3)
  {
    if (v5 == a2)
      return 1;
    v7 = *(const llvm::BasicBlock **)(a2 + 64);
    v8 = sub_1C477672C(a1 + 104, (uint64_t)v7);
    v9 = *(_QWORD *)(a1 + 112);
    v10 = 120;
    if (v9 == *(_QWORD *)(a1 + 104))
      v10 = 124;
    if (v8 == (_QWORD *)(v9 + 8 * *(unsigned int *)(a1 + v10)))
      llvm::MemorySSA::renumberBlock((llvm::MemorySSA *)a1, v7);
    v11 = *(_DWORD *)(a1 + 280);
    if (v11)
    {
      v12 = *(_QWORD *)(a1 + 264);
      v13 = v11 - 1;
      v14 = v13 & ((a2 >> 4) ^ (a2 >> 9));
      v15 = *(_QWORD *)(v12 + 16 * v14);
      if (v15 == a2)
      {
LABEL_13:
        v18 = *(_QWORD *)(v12 + 16 * v14 + 8);
      }
      else
      {
        v16 = 1;
        while (v15 != -4096)
        {
          v17 = v14 + v16++;
          v14 = v17 & v13;
          v15 = *(_QWORD *)(v12 + 16 * v14);
          if (v15 == a2)
            goto LABEL_13;
        }
        v18 = 0;
      }
      v20 = v13 & ((a3 >> 4) ^ (a3 >> 9));
      v21 = *(_QWORD *)(v12 + 16 * v20);
      if (v21 == a3)
      {
LABEL_20:
        v24 = *(_QWORD *)(v12 + 16 * v20 + 8);
        return v18 < v24;
      }
      v22 = 1;
      while (v21 != -4096)
      {
        v23 = v20 + v22++;
        v20 = v23 & v13;
        v21 = *(_QWORD *)(v12 + 16 * v20);
        if (v21 == a3)
          goto LABEL_20;
      }
    }
    else
    {
      v18 = 0;
    }
    v24 = 0;
    return v18 < v24;
  }
  return 0;
}

uint64_t llvm::MemorySSA::dominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == a3)
    return 1;
  if (*(_QWORD *)(a1 + 96) == a3)
    return 0;
  if (*(_QWORD *)(a2 + 64) == *(_QWORD *)(a3 + 64))
    return llvm::MemorySSA::locallyDominates(a1, a2, a3);
  return llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 64), *(_QWORD *)(a3 + 64));
}

uint64_t llvm::MemorySSA::dominates(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  BOOL v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a3[3];
  if (v3)
    v4 = *(_BYTE *)(v3 + 16) == 27;
  else
    v4 = 0;
  if (!v4)
    return llvm::MemorySSA::dominates(a1, a2, a3[3]);
  v6 = *(_DWORD *)(v3 + 20);
  if ((v6 & 0x40000000) != 0)
    v7 = *(_QWORD *)(v3 - 8);
  else
    v7 = v3 - 32 * (v6 & 0x7FFFFFF);
  v8 = *(_QWORD *)(v7 + 32 * *(unsigned int *)(v3 + 76) + 8 * (((unint64_t)a3 - v7) >> 5));
  if (v8 == *(_QWORD *)(a2 + 64))
    return llvm::MemorySSA::locallyDominates(a1, a2, *a3);
  else
    return llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 64), v8);
}

void llvm::MemorySSA::ensureOptimizedUses(llvm::MemorySSA *this)
{
  uint64_t v2;
  char *v3;
  uint64_t i;
  uint64_t v5;
  _QWORD v6[4];
  _QWORD v7[3];
  _QWORD v8[5];
  void *v9;
  uint64_t v10;
  _BYTE v11[2304];
  __int128 v12;
  int v13;
  char v14;
  llvm::MemorySSA *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  void *v20;
  uint64_t v21;
  _BYTE v22[128];
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 316))
  {
    v16 = *(_QWORD *)this;
    v17 = 1;
    v2 = 16;
    do
    {
      v3 = (char *)&v16 + v2;
      *(_OWORD *)v3 = xmmword_1C85F2120;
      *((_OWORD *)v3 + 1) = xmmword_1C85F2120;
      v2 += 40;
    }
    while (v3 + 40 != (char *)v19);
    v19[0] = &v23;
    v19[1] = 0;
    v20 = v22;
    v21 = 0x400000000;
    v23 = &unk_1E8134870;
    v24 = 1;
    for (i = 512; i != 640; i += 16)
      *(uint64_t *)((char *)&v16 + i) = -4096;
    v5 = *((_QWORD *)this + 1);
    v8[0] = this;
    v8[1] = &v16;
    v8[2] = v5;
    v9 = v11;
    v10 = 0x2000000000;
    v14 = 0;
    v12 = 0u;
    v13 = 0;
    v15 = this;
    v7[0] = &off_1E8139960;
    v7[1] = this;
    v7[2] = v8;
    v6[0] = this;
    v6[1] = v7;
    v6[2] = &v16;
    v6[3] = v5;
    llvm::MemorySSA::OptimizeUses::optimizeUses((llvm::MemorySSA::OptimizeUses *)v6);
    *((_BYTE *)this + 316) = 1;
    MEMORY[0x1CAA32FB4](v12, 8);
    if (v9 != v11)
      free(v9);
    if ((v24 & 1) == 0)
      MEMORY[0x1CAA32FB4](v25, 8);
    if (v20 != v22)
      free(v20);
    if ((v17 & 1) == 0)
      MEMORY[0x1CAA32FB4](v18, 8);
  }
}

llvm::raw_ostream *llvm::MemoryPhi::print(llvm::MemoryPhi *this, llvm::raw_ostream **a2)
{
  llvm::raw_ostream *result;
  llvm::raw_ostream *v5;
  int v6;
  uint64_t v7;
  char *v8;
  char v9;
  char *v10;
  int v11;
  llvm::MemoryPhi *v12;
  llvm::Value *v13;
  uint64_t v14;
  unint64_t v15;
  llvm::raw_ostream *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Value **v22;
  llvm::Value *v23;
  int v24;
  int v25;
  unint64_t *v26;
  const void *v27;
  size_t v28;
  unint64_t v29;
  llvm::raw_ostream *v30;
  uint64_t v32;
  unint64_t v33;
  llvm::raw_ostream *v34;
  llvm::raw_ostream *v35;
  llvm::raw_ostream *v36;

  result = sub_1C5E21910((llvm::raw_ostream *)a2, *((unsigned int *)this + 18), 0, 0, 0);
  v5 = a2[4];
  if ((unint64_t)(a2[3] - v5) > 0xC)
  {
    qmemcpy(v5, " = MemoryPhi(", 13);
    a2[4] = (llvm::raw_ostream *)((char *)a2[4] + 13);
  }
  else
  {
    result = llvm::raw_ostream::write((llvm::raw_ostream *)a2, " = MemoryPhi(", 0xDuLL);
  }
  v6 = *((_DWORD *)this + 5);
  if ((v6 & 0x40000000) != 0)
  {
    v8 = (char *)*((_QWORD *)this - 1);
    v7 = v6 & 0x7FFFFFF;
    if ((*((_DWORD *)this + 5) & 0x7FFFFFF) == 0)
      goto LABEL_53;
    goto LABEL_7;
  }
  v7 = v6 & 0x7FFFFFF;
  v8 = (char *)this - 32 * v7;
  if ((v6 & 0x7FFFFFF) != 0)
  {
LABEL_7:
    v9 = 0;
    v10 = &v8[32 * v7];
    while (1)
    {
      v11 = *((_DWORD *)this + 5);
      v12 = (v11 & 0x40000000) != 0
          ? (llvm::MemoryPhi *)*((_QWORD *)this - 1)
          : (llvm::MemoryPhi *)((char *)this - 32 * (v11 & 0x7FFFFFF));
      v13 = (llvm::Value *)*((_QWORD *)v12
                           + 4 * *((unsigned int *)this + 19)
                           + ((unint64_t)(v8 - (char *)v12) >> 5));
      v14 = *(_QWORD *)v8;
      v15 = v9 & 1;
      v16 = a2[4];
      if (a2[3] - v16 >= v15)
      {
        if ((v9 & 1) != 0)
        {
          memcpy(v16, ",", v9 & 1);
          v16 = (llvm::raw_ostream *)((char *)a2[4] + v15);
          a2[4] = v16;
        }
      }
      else
      {
        v17 = (v9 & 1) != 0 ? "," : 0;
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, v17, v9 & 1);
        v16 = a2[4];
      }
      if (v16 >= a2[3])
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, 123);
      }
      else
      {
        a2[4] = (llvm::raw_ostream *)((char *)v16 + 1);
        *(_BYTE *)v16 = 123;
      }
      if ((*((_BYTE *)v13 + 23) & 0x10) != 0)
        break;
      result = (llvm::raw_ostream *)llvm::Value::printAsOperand(v13, (llvm::raw_ostream *)a2, 0, 0);
LABEL_33:
      v30 = a2[4];
      if (v30 >= a2[3])
      {
        result = llvm::raw_ostream::write((llvm::raw_ostream *)a2, 44);
      }
      else
      {
        a2[4] = (llvm::raw_ostream *)((char *)v30 + 1);
        *(_BYTE *)v30 = 44;
      }
      if (*(_BYTE *)(v14 + 16) != 26 || v14 == 0)
        v32 = 72;
      else
        v32 = 88;
      v33 = *(unsigned int *)(v14 + v32);
      if ((_DWORD)v33)
      {
        result = sub_1C5E21910((llvm::raw_ostream *)a2, v33, 0, 0, 0);
      }
      else
      {
        v34 = a2[4];
        if ((unint64_t)(a2[3] - v34) > 0xA)
        {
          *(_DWORD *)((char *)v34 + 7) = 2037544046;
          *(_QWORD *)v34 = *(_QWORD *)"liveOnEntry";
          a2[4] = (llvm::raw_ostream *)((char *)a2[4] + 11);
        }
        else
        {
          result = llvm::raw_ostream::write((llvm::raw_ostream *)a2, "liveOnEntry", 0xBuLL);
        }
      }
      v35 = a2[4];
      if (v35 >= a2[3])
      {
        result = llvm::raw_ostream::write((llvm::raw_ostream *)a2, 125);
      }
      else
      {
        a2[4] = (llvm::raw_ostream *)((char *)v35 + 1);
        *(_BYTE *)v35 = 125;
      }
      v8 += 32;
      v9 = 1;
      if (v8 == v10)
        goto LABEL_53;
    }
    v18 = ***(_QWORD ***)v13;
    v19 = *(_QWORD *)(v18 + 152);
    v20 = *(unsigned int *)(v18 + 168);
    if ((_DWORD)v20)
    {
      LODWORD(v21) = (v20 - 1) & ((v13 >> 4) ^ (v13 >> 9));
      v22 = (llvm::Value **)(v19 + 16 * v21);
      v23 = *v22;
      if (*v22 == v13)
        goto LABEL_29;
      v24 = 1;
      while (v23 != (llvm::Value *)-4096)
      {
        v25 = v21 + v24++;
        v21 = v25 & (v20 - 1);
        v23 = *(llvm::Value **)(v19 + 16 * v21);
        if (v23 == v13)
        {
          v22 = (llvm::Value **)(v19 + 16 * v21);
          goto LABEL_29;
        }
      }
    }
    v22 = (llvm::Value **)(v19 + 16 * v20);
LABEL_29:
    v26 = (unint64_t *)v22[1];
    v29 = *v26;
    v27 = v26 + 2;
    v28 = v29;
    result = a2[4];
    if (v29 <= a2[3] - result)
    {
      if (v28)
      {
        result = (llvm::raw_ostream *)memcpy(result, v27, v28);
        a2[4] = (llvm::raw_ostream *)((char *)a2[4] + v28);
      }
    }
    else
    {
      result = llvm::raw_ostream::write((llvm::raw_ostream *)a2, (const char *)v27, v28);
    }
    goto LABEL_33;
  }
LABEL_53:
  v36 = a2[4];
  if (v36 >= a2[3])
    return llvm::raw_ostream::write((llvm::raw_ostream *)a2, 41);
  a2[4] = (llvm::raw_ostream *)((char *)v36 + 1);
  *(_BYTE *)v36 = 41;
  return result;
}

llvm::raw_ostream *sub_1C4ED2C2C(llvm::raw_ostream *result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;

  if (a2)
  {
    if (*(_BYTE *)(a2 + 16) == 26)
    {
      v2 = *(_DWORD *)(a2 + 88);
      if (v2)
        return sub_1C5E21910(result, v2, 0, 0, 0);
    }
    else
    {
      v2 = *(_DWORD *)(a2 + 72);
      if (v2)
        return sub_1C5E21910(result, v2, 0, 0, 0);
    }
  }
  v3 = *((_QWORD *)result + 4);
  if ((unint64_t)(*((_QWORD *)result + 3) - v3) <= 0xA)
    return llvm::raw_ostream::write(result, "liveOnEntry", 0xBuLL);
  *(_DWORD *)(v3 + 7) = 2037544046;
  *(_QWORD *)v3 = *(_QWORD *)"liveOnEntry";
  *((_QWORD *)result + 4) += 11;
  return result;
}

llvm *llvm::MemoryAccess::dump(llvm::MemoryAccess *this)
{
  llvm::raw_ostream **v2;
  llvm *v3;
  llvm *result;
  _BYTE *v5;

  v2 = (llvm::raw_ostream **)llvm::dbgs(this);
  v3 = llvm::MemoryAccess::print(this, v2);
  result = llvm::dbgs(v3);
  v5 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v5)
    return llvm::raw_ostream::write(result, "\n", 1uLL);
  *v5 = 10;
  ++*((_QWORD *)result + 4);
  return result;
}

llvm::MemorySSAPrinterLegacyPass *llvm::MemorySSAPrinterLegacyPass::MemorySSAPrinterLegacyPass(llvm::MemorySSAPrinterLegacyPass *this)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &llvm::MemorySSAPrinterLegacyPass::ID;
  *((_DWORD *)this + 6) = 2;
  *(_QWORD *)this = &off_1E81396B0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED82E548);
  if (v3 != -1)
  {
    v7[0] = sub_1C4ECDB68;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82E548, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return this;
}

void *llvm::MemorySSAPrinterLegacyPass::getAnalysisUsage(llvm::MemorySSAPrinterLegacyPass *this, llvm::AnalysisUsage *a2)
{
  *((_BYTE *)a2 + 160) = 1;
  return sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
}

uint64_t llvm::MemorySSAPrinterLegacyPass::runOnFunction(llvm::MemorySSAPrinterLegacyPass *this, llvm::Function *a2)
{
  void **v3;
  void *v4;
  llvm::Function **v5;
  llvm *v6;
  uint64_t v7;
  uint64_t v8;
  llvm *v10;
  void *__p[2];
  uint64_t v12;
  const char *v13;
  __int16 v14;
  _QWORD v15[4];
  __int16 v16;
  _QWORD *v17;
  void *v18;
  char v19;
  _QWORD v20[3];

  v3 = (void **)**((_QWORD **)this + 1);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::MemorySSAWrapperPass::ID);
  v5 = *(llvm::Function ***)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::MemorySSAWrapperPass::ID)+ 32);
  llvm::MemorySSA::ensureOptimizedUses((llvm::MemorySSA *)v5);
  v7 = byte_1ED7F2DC7;
  v8 = byte_1ED7F2DC7 & 0x7F;
  if (byte_1ED7F2DC7 < 0)
  {
    v8 = *((_QWORD *)&xmmword_1ED7F2DB0 + 1);
    v7 = *((_QWORD *)&xmmword_1ED7F2DB0 + 1);
  }
  if (v8 | v7)
  {
    v20[0] = a2;
    v20[1] = &off_1E8139860;
    v20[2] = v5;
    v17 = v20;
    v16 = 257;
    v13 = "MSSA";
    v14 = 259;
    if (byte_1ED7F2DC7 < 0)
    {
      sub_1C47EBC30(__p, (void *)xmmword_1ED7F2DB0, *((unint64_t *)&xmmword_1ED7F2DB0 + 1));
    }
    else
    {
      *(_OWORD *)__p = xmmword_1ED7F2DB0;
      v12 = unk_1ED7F2DC0;
    }
    sub_1C4ED2F54((uint64_t)&v18, (uint64_t)&v17, (llvm::Twine *)v15, (llvm::Twine *)&v13, (uint64_t)__p);
    if (v19 < 0)
      operator delete(v18);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v10 = llvm::dbgs(v6);
    v15[0] = &off_1E8139860;
    v15[1] = v5;
    llvm::Function::print(v5[2], v10, (llvm::AssemblyAnnotationWriter *)v15, 0, 0);
  }
  return 0;
}

void sub_1C4ED2F54(uint64_t a1, uint64_t a2, llvm::Twine *a3, llvm::Twine *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  const std::error_category *v11;
  uint64_t v12;
  int v13;
  llvm::raw_ostream *v14;
  char *v15;
  unint64_t v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  void *v19;
  _BYTE *v20;
  _BYTE *v21;
  char v22;
  BOOL v23;
  const char *v24;
  size_t v25;
  size_t v26;
  llvm *v27;
  llvm::raw_ostream *v28;
  uint64_t v29;
  char v30;
  BOOL v31;
  const char *v32;
  size_t v33;
  size_t v34;
  llvm::raw_ostream *v35;
  void *v36;
  llvm *v37;
  llvm::raw_ostream *v38;
  _QWORD *v39;
  uint64_t v40;
  const std::error_category *v41;
  __int16 v42;
  int v43;
  void *v44[2];
  char v45;
  __int128 v46;
  uint64_t v47;

  if (*(char *)(a5 + 23) < 0)
    v9 = *(_QWORD *)(a5 + 8);
  else
    v9 = *(unsigned __int8 *)(a5 + 23);
  v43 = 0;
  if (v9)
  {
    v42 = 260;
    v40 = a5;
    *(_QWORD *)&v46 = llvm::sys::fs::openFile((unsigned __int8 *)&v40, &v43, 0, 2, 1, 438);
    *((_QWORD *)&v46 + 1) = v10;
    v11 = std::generic_category();
    v40 = 17;
    v41 = v11;
    v12 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *))(**((_QWORD **)&v46 + 1) + 32))(*((_QWORD *)&v46 + 1), v46, &v40);
    if ((v12 & 1) != 0
      || (v12 = ((uint64_t (*)(const std::error_category *, __int128 *, _QWORD))v41->equivalent_0)(v41, &v46, v40), (v12 & 1) != 0))
    {
      v18 = (llvm::raw_ostream *)llvm::errs((llvm *)v12);
      v19 = (void *)*((_QWORD *)v18 + 4);
      if (*((_QWORD *)v18 + 3) - (_QWORD)v19 > 0x17uLL)
      {
        qmemcpy(v19, "file exists, overwriting", 24);
        v20 = (_BYTE *)(*((_QWORD *)v18 + 4) + 24);
        *((_QWORD *)v18 + 4) = v20;
      }
      else
      {
        v18 = llvm::raw_ostream::write(v18, "file exists, overwriting", 0x18uLL);
        v20 = (_BYTE *)*((_QWORD *)v18 + 4);
      }
      v21 = (_BYTE *)*((_QWORD *)v18 + 3);
    }
    else
    {
      v13 = v46;
      v14 = (llvm::raw_ostream *)llvm::errs((llvm *)v12);
      v15 = (char *)*((_QWORD *)v14 + 4);
      v16 = *((_QWORD *)v14 + 3) - (_QWORD)v15;
      if (v13)
      {
        if (v16 > 0x16)
        {
          qmemcpy(v15, "error writing into file", 23);
          v17 = (_BYTE *)(*((_QWORD *)v14 + 4) + 23);
          *((_QWORD *)v14 + 4) = v17;
        }
        else
        {
          v14 = llvm::raw_ostream::write(v14, "error writing into file", 0x17uLL);
          v17 = (_BYTE *)*((_QWORD *)v14 + 4);
        }
        if (*((_BYTE **)v14 + 3) == v17)
        {
          llvm::raw_ostream::write(v14, "\n", 1uLL);
        }
        else
        {
          *v17 = 10;
          ++*((_QWORD *)v14 + 4);
        }
        *(_BYTE *)(a1 + 23) = 0;
        *(_BYTE *)a1 = 0;
        return;
      }
      if (v16 > 0x21)
      {
        qmemcpy(v15, "writing to the newly created file ", 34);
        *((_QWORD *)v14 + 4) += 34;
      }
      else
      {
        v14 = llvm::raw_ostream::write(v14, "writing to the newly created file ", 0x22uLL);
      }
      v22 = *(_BYTE *)(a5 + 23);
      v23 = v22 < 0;
      if (v22 >= 0)
        v24 = (const char *)a5;
      else
        v24 = *(const char **)a5;
      v25 = v22 & 0x7F;
      if (v23)
        v26 = *(_QWORD *)(a5 + 8);
      else
        v26 = v25;
      v18 = llvm::raw_ostream::write(v14, v24, v26);
      v21 = (_BYTE *)*((_QWORD *)v18 + 3);
      v20 = (_BYTE *)*((_QWORD *)v18 + 4);
    }
    if (v21 == v20)
    {
      llvm::raw_ostream::write(v18, "\n", 1uLL);
    }
    else
    {
      *v20 = 10;
      ++*((_QWORD *)v18 + 4);
    }
  }
  else
  {
    llvm::Twine::str(a3, v44);
    v42 = 260;
    v40 = (uint64_t)v44;
    llvm::createGraphFilename((llvm::Twine *)&v40, &v43, &v46);
    if (*(char *)(a5 + 23) < 0)
      operator delete(*(void **)a5);
    *(_OWORD *)a5 = v46;
    *(_QWORD *)(a5 + 16) = v47;
    HIBYTE(v47) = 0;
    LOBYTE(v46) = 0;
    if (v45 < 0)
      operator delete(v44[0]);
  }
  v27 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v40, v43, 1, 0, 0);
  if (v43 == -1)
  {
    v28 = (llvm::raw_ostream *)llvm::errs(v27);
    v29 = *((_QWORD *)v28 + 4);
    if ((unint64_t)(*((_QWORD *)v28 + 3) - v29) > 0x13)
    {
      *(_DWORD *)(v29 + 16) = 656434540;
      *(_OWORD *)v29 = *(_OWORD *)"error opening file '";
      *((_QWORD *)v28 + 4) += 20;
    }
    else
    {
      v28 = llvm::raw_ostream::write(v28, "error opening file '", 0x14uLL);
    }
    v30 = *(_BYTE *)(a5 + 23);
    v31 = v30 < 0;
    if (v30 >= 0)
      v32 = (const char *)a5;
    else
      v32 = *(const char **)a5;
    v33 = v30 & 0x7F;
    if (v31)
      v34 = *(_QWORD *)(a5 + 8);
    else
      v34 = v33;
    v35 = llvm::raw_ostream::write(v28, v32, v34);
    v36 = (void *)*((_QWORD *)v35 + 4);
    if (*((_QWORD *)v35 + 3) - (_QWORD)v36 > 0xEuLL)
    {
      qmemcpy(v36, "' for writing!\n", 15);
      *((_QWORD *)v35 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v35, "' for writing!\n", 0xFuLL);
    }
    *(_BYTE *)(a1 + 23) = 0;
    *(_BYTE *)a1 = 0;
  }
  else
  {
    *(_QWORD *)&v46 = &v40;
    *((_QWORD *)&v46 + 1) = a2;
    LOWORD(v47) = 0;
    llvm::Twine::str(a4, v44);
    v37 = sub_1C61A5BC4((uint64_t)&v46, (uint64_t)v44);
    if (v45 < 0)
      operator delete(v44[0]);
    v38 = (llvm::raw_ostream *)llvm::errs(v37);
    v39 = (_QWORD *)*((_QWORD *)v38 + 4);
    if (*((_QWORD *)v38 + 3) - (_QWORD)v39 > 7uLL)
    {
      *v39 = 0xA202E656E6F6420;
      *((_QWORD *)v38 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v38, " done. \n", 8uLL);
    }
    *(_OWORD *)a1 = *(_OWORD *)a5;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a5 + 16);
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)a5 = 0;
  }
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v40);
}

llvm::MemorySSA *llvm::MemorySSAAnalysis::run@<X0>(llvm::Function *a1@<X1>, uint64_t a2@<X2>, llvm::MemorySSA **a3@<X8>)
{
  llvm::DominatorTree *v6;
  llvm::AAResults *v7;
  llvm::MemorySSA *v8;
  llvm::MemorySSA *result;

  v6 = (llvm::DominatorTree *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, (uint64_t)a1)+ 8);
  v7 = (llvm::AAResults *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AAManager::Key, (uint64_t)a1)
                         + 8);
  v8 = (llvm::MemorySSA *)operator new();
  result = llvm::MemorySSA::MemorySSA(v8, a1, v7, v6);
  *a3 = result;
  return result;
}

uint64_t llvm::MemorySSAAnalysis::Result::invalidate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  _QWORD v11[2];
  BOOL v12;

  v11[0] = a3;
  v11[1] = &llvm::MemorySSAAnalysis::Key;
  v7 = sub_1C477672C(a3 + 48, (uint64_t)&llvm::MemorySSAAnalysis::Key);
  v8 = *(_QWORD *)(a3 + 56);
  if (v8 == *(_QWORD *)(a3 + 48))
    v9 = (unsigned int *)(a3 + 68);
  else
    v9 = (unsigned int *)(a3 + 64);
  v12 = v7 != (_QWORD *)(v8 + 8 * *v9);
  if ((sub_1C4DAA35C((uint64_t)v11) || sub_1C4DAA3F8((uint64_t)v11))
    && (sub_1C4DA944C(a4, (uint64_t)&llvm::AAManager::Key, a2, a3) & 1) == 0)
  {
    return llvm::AnalysisManager<llvm::Function>::Invalidator::invalidate(a4, (uint64_t)&llvm::DominatorTreeAnalysis::Key, a2, a3);
  }
  else
  {
    return 1;
  }
}

_QWORD *llvm::MemorySSAPrinterPass::run@<X0>(llvm::raw_ostream **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  llvm::Function **v7;
  uint64_t v8;
  uint64_t v9;
  llvm::raw_ostream *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  size_t *v21;
  const void *v22;
  size_t v23;
  size_t v24;
  _BYTE *v25;
  llvm::raw_ostream *v26;
  void *__p[2];
  uint64_t v28;
  const char *v29;
  __int16 v30;
  _QWORD v31[4];
  __int16 v32;
  _QWORD *v33;
  void *v34;
  char v35;
  _QWORD v36[3];

  v7 = *(llvm::Function ***)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::MemorySSAAnalysis::Key, a2)
                           + 8);
  llvm::MemorySSA::ensureOptimizedUses((llvm::MemorySSA *)v7);
  v8 = byte_1ED7F2DC7;
  v9 = byte_1ED7F2DC7 & 0x7F;
  if (byte_1ED7F2DC7 < 0)
  {
    v9 = *((_QWORD *)&xmmword_1ED7F2DB0 + 1);
    v8 = *((_QWORD *)&xmmword_1ED7F2DB0 + 1);
  }
  if (!(v9 | v8))
  {
    v11 = *a1;
    v12 = (void *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v12 > 0x17uLL)
    {
      qmemcpy(v12, "MemorySSA for function: ", 24);
      *((_QWORD *)v11 + 4) += 24;
    }
    else
    {
      llvm::raw_ostream::write(*a1, "MemorySSA for function: ", 0x18uLL);
    }
    if ((*(_BYTE *)(a2 + 23) & 0x10) == 0)
      goto LABEL_24;
    v13 = ***(_QWORD ***)a2;
    v14 = *(_QWORD *)(v13 + 152);
    v15 = *(unsigned int *)(v13 + 168);
    if ((_DWORD)v15)
    {
      LODWORD(v16) = (v15 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v17 = (uint64_t *)(v14 + 16 * v16);
      v18 = *v17;
      if (*v17 == a2)
      {
LABEL_22:
        v21 = (size_t *)v17[1];
        v24 = *v21;
        v22 = v21 + 2;
        v23 = v24;
        v25 = (_BYTE *)*((_QWORD *)v11 + 4);
        if (v24 <= *((_QWORD *)v11 + 3) - (_QWORD)v25)
        {
          if (v23)
          {
            memcpy(v25, v22, v23);
            v25 = (_BYTE *)(*((_QWORD *)v11 + 4) + v23);
            *((_QWORD *)v11 + 4) = v25;
          }
          goto LABEL_27;
        }
        llvm::raw_ostream::write(v11, (const char *)v22, v23);
LABEL_24:
        v25 = (_BYTE *)*((_QWORD *)v11 + 4);
LABEL_27:
        if (*((_BYTE **)v11 + 3) == v25)
        {
          llvm::raw_ostream::write(v11, "\n", 1uLL);
        }
        else
        {
          *v25 = 10;
          ++*((_QWORD *)v11 + 4);
        }
        v26 = *a1;
        v31[0] = &off_1E8139860;
        v31[1] = v7;
        llvm::Function::print(v7[2], v26, (llvm::AssemblyAnnotationWriter *)v31, 0, 0);
        goto LABEL_11;
      }
      v19 = 1;
      while (v18 != -4096)
      {
        v20 = v16 + v19++;
        v16 = v20 & (v15 - 1);
        v18 = *(_QWORD *)(v14 + 16 * v16);
        if (v18 == a2)
        {
          v17 = (uint64_t *)(v14 + 16 * v16);
          goto LABEL_22;
        }
      }
    }
    v17 = (uint64_t *)(v14 + 16 * v15);
    goto LABEL_22;
  }
  v36[0] = a2;
  v36[1] = &off_1E8139860;
  v36[2] = v7;
  v33 = v36;
  v32 = 257;
  v29 = "MSSA";
  v30 = 259;
  if (byte_1ED7F2DC7 < 0)
  {
    sub_1C47EBC30(__p, (void *)xmmword_1ED7F2DB0, *((unint64_t *)&xmmword_1ED7F2DB0 + 1));
  }
  else
  {
    *(_OWORD *)__p = xmmword_1ED7F2DB0;
    v28 = unk_1ED7F2DC0;
  }
  sub_1C4ED2F54((uint64_t)&v34, (uint64_t)&v33, (llvm::Twine *)v31, (llvm::Twine *)&v29, (uint64_t)__p);
  if (v35 < 0)
    operator delete(v34);
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);
LABEL_11:
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

llvm::MemorySSA *llvm::MemorySSAWrapperPass::releaseMemory(llvm::MemorySSAWrapperPass *this)
{
  llvm::MemorySSA *result;

  result = (llvm::MemorySSA *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (result)
  {
    llvm::MemorySSA::~MemorySSA(result);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

uint64_t llvm::MemorySSAWrapperPass::runOnFunction(llvm::MemorySSAWrapperPass *this, llvm::Function *a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  llvm::DominatorTree *v9;
  llvm::AAResults *v10;
  llvm::MemorySSA *v11;
  llvm::MemorySSA *v12;

  v4 = (void **)**((_QWORD **)this + 1);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::DominatorTreeWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::DominatorTreeWrapperPass::ID);
  v7 = (void **)**((_QWORD **)this + 1);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::AAResultsWrapperPass::ID);
  v9 = (llvm::DominatorTree *)(v6 + 32);
  v10 = *(llvm::AAResults **)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::AAResultsWrapperPass::ID)+ 32);
  v11 = (llvm::MemorySSA *)operator new();
  llvm::MemorySSA::MemorySSA(v11, a2, v10, v9);
  v12 = (llvm::MemorySSA *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v11;
  if (v12)
  {
    llvm::MemorySSA::~MemorySSA(v12);
    MEMORY[0x1CAA32FC0]();
  }
  return 0;
}

_QWORD *llvm::MemorySSAWalker::MemorySSAWalker(_QWORD *this, llvm::MemorySSA *a2)
{
  *this = off_1E81397F0;
  this[1] = a2;
  return this;
}

uint64_t llvm::DoNothingMemorySSAWalker::getClobberingMemoryAccess(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  uint64_t v5;

  result = a2;
  if (a2)
  {
    v3 = *(unsigned __int8 *)(a2 + 16);
    if ((v3 - 27) >= 0xFFFFFFFE)
    {
      if (v3 == 25)
        v4 = a2;
      else
        v4 = 0;
      if (v4)
        v5 = v4 - 32;
      else
        v5 = a2 - 64;
      return *(_QWORD *)v5;
    }
  }
  return result;
}

{
  uint64_t result;
  int v3;
  uint64_t v4;
  uint64_t v5;

  result = a2;
  if (a2)
  {
    v3 = *(unsigned __int8 *)(a2 + 16);
    if ((v3 - 27) >= 0xFFFFFFFE)
    {
      if (v3 == 25)
        v4 = a2;
      else
        v4 = 0;
      if (v4)
        v5 = v4 - 32;
      else
        v5 = a2 - 64;
      return *(_QWORD *)v5;
    }
  }
  return result;
}

void llvm::MemoryPhi::deleteMe(llvm::Value *a1, llvm::Value *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  char *v6;
  _QWORD **v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  if (a1)
  {
    llvm::Value::~Value(a1, a2);
    v4 = *(_DWORD *)(v3 + 20);
    if ((v4 & 0x40000000) != 0)
    {
      v12 = (char *)*((_QWORD *)a1 - 1);
      v11 = (char *)a1 - 8;
      v10 = v12;
      v13 = v4 & 0x7FFFFFF;
      if ((_DWORD)v13)
      {
        v14 = 32 * v13;
        do
        {
          v15 = &v10[v14];
          if (*(_QWORD *)&v10[v14 - 32])
          {
            **((_QWORD **)v15 - 2) = *((_QWORD *)v15 - 3);
            v16 = *((_QWORD *)v15 - 3);
            if (v16)
              *(_QWORD *)(v16 + 16) = *((_QWORD *)v15 - 2);
          }
          v14 -= 32;
        }
        while (v14);
      }
      operator delete(v10);
      v6 = v11;
    }
    else
    {
      v5 = v4 & 0x7FFFFFF;
      v6 = (char *)a1 - 32 * v5;
      if ((_DWORD)v5)
      {
        v7 = (_QWORD **)((char *)a1 - 16);
        v8 = -32 * v5;
        do
        {
          if (*(v7 - 2))
          {
            **v7 = *(v7 - 1);
            v9 = (uint64_t)*(v7 - 1);
            if (v9)
              *(_QWORD *)(v9 + 16) = *v7;
          }
          v7 -= 4;
          v8 += 32;
        }
        while (v8);
      }
      if (v4 < 0)
        v6 = &v6[-*((_QWORD *)v6 - 1) - 8];
    }
    operator delete(v6);
  }
}

void llvm::MemoryDef::deleteMe(llvm::Value *a1, llvm::Value *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  char *v6;
  _QWORD **v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  if (a1)
  {
    llvm::Value::~Value(a1, a2);
    v4 = *(_DWORD *)(v3 + 20);
    if ((v4 & 0x40000000) != 0)
    {
      v12 = (char *)*((_QWORD *)a1 - 1);
      v11 = (char *)a1 - 8;
      v10 = v12;
      v13 = v4 & 0x7FFFFFF;
      if ((_DWORD)v13)
      {
        v14 = 32 * v13;
        do
        {
          v15 = &v10[v14];
          if (*(_QWORD *)&v10[v14 - 32])
          {
            **((_QWORD **)v15 - 2) = *((_QWORD *)v15 - 3);
            v16 = *((_QWORD *)v15 - 3);
            if (v16)
              *(_QWORD *)(v16 + 16) = *((_QWORD *)v15 - 2);
          }
          v14 -= 32;
        }
        while (v14);
      }
      operator delete(v10);
      v6 = v11;
    }
    else
    {
      v5 = v4 & 0x7FFFFFF;
      v6 = (char *)a1 - 32 * v5;
      if ((_DWORD)v5)
      {
        v7 = (_QWORD **)((char *)a1 - 16);
        v8 = -32 * v5;
        do
        {
          if (*(v7 - 2))
          {
            **v7 = *(v7 - 1);
            v9 = (uint64_t)*(v7 - 1);
            if (v9)
              *(_QWORD *)(v9 + 16) = *v7;
          }
          v7 -= 4;
          v8 += 32;
        }
        while (v8);
      }
      if (v4 < 0)
        v6 = &v6[-*((_QWORD *)v6 - 1) - 8];
    }
    operator delete(v6);
  }
}

void llvm::MemoryUse::deleteMe(llvm::Value *a1, llvm::Value *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  char *v6;
  _QWORD **v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  if (a1)
  {
    llvm::Value::~Value(a1, a2);
    v4 = *(_DWORD *)(v3 + 20);
    if ((v4 & 0x40000000) != 0)
    {
      v12 = (char *)*((_QWORD *)a1 - 1);
      v11 = (char *)a1 - 8;
      v10 = v12;
      v13 = v4 & 0x7FFFFFF;
      if ((_DWORD)v13)
      {
        v14 = 32 * v13;
        do
        {
          v15 = &v10[v14];
          if (*(_QWORD *)&v10[v14 - 32])
          {
            **((_QWORD **)v15 - 2) = *((_QWORD *)v15 - 3);
            v16 = *((_QWORD *)v15 - 3);
            if (v16)
              *(_QWORD *)(v16 + 16) = *((_QWORD *)v15 - 2);
          }
          v14 -= 32;
        }
        while (v14);
      }
      operator delete(v10);
      v6 = v11;
    }
    else
    {
      v5 = v4 & 0x7FFFFFF;
      v6 = (char *)a1 - 32 * v5;
      if ((_DWORD)v5)
      {
        v7 = (_QWORD **)((char *)a1 - 16);
        v8 = -32 * v5;
        do
        {
          if (*(v7 - 2))
          {
            **v7 = *(v7 - 1);
            v9 = (uint64_t)*(v7 - 1);
            if (v9)
              *(_QWORD *)(v9 + 16) = *v7;
          }
          v7 -= 4;
          v8 += 32;
        }
        while (v8);
      }
      if (v4 < 0)
        v6 = &v6[-*((_QWORD *)v6 - 1) - 8];
    }
    operator delete(v6);
  }
}

BOOL llvm::upward_defs_iterator::IsGuaranteedLoopInvariant(llvm::upward_defs_iterator *this, llvm::Value *a2)
{
  llvm::Value *v2;
  llvm::Value *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  llvm::Value **v9;
  unsigned int v10;
  _BOOL8 result;
  unsigned int v13;
  int v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v2 = llvm::Value::stripPointerCasts(a2);
  v3 = v2;
  v4 = *((unsigned __int8 *)v2 + 16);
  if (v2 && v4 >= 0x1C)
  {
    v5 = *((_QWORD *)v2 + 5);
    v6 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 80);
    v7 = v6 ? v6 - 24 : 0;
    if (v7 == v5)
      return 1;
  }
  if (v4 == 62 || v4 == 5 && *((_WORD *)v2 + 9) == 34)
  {
    v8 = *((_DWORD *)v2 + 5);
    if ((v8 & 0x40000000) != 0)
      v9 = (llvm::Value **)*((_QWORD *)v2 - 1);
    else
      v9 = (llvm::Value **)((char *)v2 - 32 * (v8 & 0x7FFFFFF));
    v13 = *((unsigned __int8 *)llvm::Value::stripPointerCasts(*v9) + 16);
    if (v13 < 0x1C || v13 == 59)
    {
      v14 = *((_DWORD *)v3 + 5);
      if ((v14 & 0x40000000) != 0)
      {
        v16 = (char *)*((_QWORD *)v3 - 1);
        v15 = v14 & 0x7FFFFFF;
      }
      else
      {
        v15 = v14 & 0x7FFFFFF;
        v16 = (char *)v3 - 32 * v15;
      }
      v17 = (uint64_t *)(v16 + 32);
      v18 = 32 * v15 - 32;
      do
      {
        result = v18 == 0;
        if (!v18)
          break;
        v19 = *v17;
        v17 += 4;
        v18 -= 32;
      }
      while (*(_BYTE *)(v19 + 16) == 16);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v10 = *((unsigned __int8 *)llvm::Value::stripPointerCasts(v2) + 16);
    return v10 < 0x1C || v10 == 59;
  }
  return result;
}

void sub_1C4ED3D04(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4ED3D2C()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::MemorySSAPrinterLegacyPass *llvm::callDefaultCtor<llvm::MemorySSAPrinterLegacyPass>()
{
  llvm::MemorySSAPrinterLegacyPass *v0;

  v0 = (llvm::MemorySSAPrinterLegacyPass *)operator new();
  return llvm::MemorySSAPrinterLegacyPass::MemorySSAPrinterLegacyPass(v0);
}

uint64_t sub_1C4ED3D74(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;

  v2 = (_QWORD *)(result - 32);
  if (*(_QWORD *)(result - 32))
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v3 = *(_QWORD *)(result - 24);
    if (v3)
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(result - 16);
  }
  *v2 = a2;
  if (!a2)
    goto LABEL_9;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result - 24) = v4;
  if (v4)
    *(_QWORD *)(v4 + 16) = result - 24;
  *(_QWORD *)(result - 16) = a2 + 8;
  *(_QWORD *)(a2 + 8) = v2;
  if (*(_BYTE *)(a2 + 16) == 26)
    v5 = (_DWORD *)(a2 + 88);
  else
LABEL_9:
    v5 = (_DWORD *)(a2 + 72);
  *(_DWORD *)(result + 92) = *v5;
  return result;
}

uint64_t sub_1C4ED3DE4(uint64_t result, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_BYTE *)(a2 + 16) != 26 || a2 == 0;
  v3 = 88;
  if (v2)
    v3 = 72;
  v4 = *(_QWORD *)(result - 32);
  *(_DWORD *)(result + 88) = *(_DWORD *)(a2 + v3);
  if (v4)
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v5 = *(_QWORD *)(result - 24);
    if (v5)
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(result - 16);
  }
  *(_QWORD *)(result - 32) = a2;
  v8 = *(_QWORD *)(a2 + 8);
  v6 = (_QWORD *)(a2 + 8);
  v7 = v8;
  *(_QWORD *)(result - 24) = v8;
  if (v8)
    *(_QWORD *)(v7 + 16) = result - 24;
  *(_QWORD *)(result - 16) = v6;
  *v6 = result - 32;
  return result;
}

uint64_t sub_1C4ED3E4C(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t **v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t v29;
  uint64_t v30[2];
  uint64_t v31[4];

  result = 0;
  if (!a2 || *((_BYTE *)a2 + 16) != 60)
    return result;
  if ((*((_DWORD *)a2 + 5) & 0x20000000) != 0)
  {
    v5 = **(_QWORD **)*a2;
    v30[0] = (uint64_t)a2;
    v6 = *(_DWORD *)(v5 + 2496);
    if (v6)
    {
      v7 = *(_QWORD *)(v5 + 2480);
      v8 = v6 - 1;
      v9 = v8 & ((a2 >> 4) ^ (a2 >> 9));
      v10 = (uint64_t **)(v7 + 40 * v9);
      v11 = *v10;
      if (*v10 == a2)
      {
LABEL_14:
        v16 = *((unsigned int *)v10 + 4);
        if ((_DWORD)v16)
        {
          v17 = v10[1] + 1;
          v18 = 16 * v16;
          while (*((_DWORD *)v17 - 2) != 6)
          {
            v17 += 2;
            v18 -= 16;
            if (!v18)
              goto LABEL_18;
          }
          if (*v17)
            return 1;
        }
        goto LABEL_18;
      }
      v12 = 0;
      v13 = 1;
      while (v11 != (uint64_t *)-4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == (uint64_t *)-8192;
        if (v14)
          v12 = v10;
        v15 = v9 + v13++;
        v9 = v15 & v8;
        v10 = (uint64_t **)(v7 + 40 * v9);
        v11 = *v10;
        if (*v10 == a2)
          goto LABEL_14;
      }
      if (v12)
        v28 = v12;
      else
        v28 = v10;
    }
    else
    {
      v28 = 0;
    }
    v10 = (uint64_t **)sub_1C541AB24(v5 + 2480, (uint64_t)v30, v30, v28);
    v29 = v30[0];
    v10[3] = 0;
    v10[4] = 0;
    *v10 = (uint64_t *)v29;
    v10[1] = (uint64_t *)(v10 + 3);
    v10[2] = (uint64_t *)0x100000000;
    goto LABEL_14;
  }
LABEL_18:
  v19 = *(a2 - 4);
  sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(a2[5] + 56) + 40) + 272, *a2);
  if (v21 == 1)
    v22 = -2;
  else
    v22 = (unint64_t)(v20 + 7) >> 3;
  llvm::Instruction::getAAMetadata((uint64_t ***)a2, v31);
  v30[0] = v19;
  v30[1] = v22;
  v24 = *a1;
  v23 = a1 + 1;
  v25 = *(_QWORD *)(v24 + 8);
  v26 = *(_QWORD *)(v24 + 16);
  if (v25 == v26)
    return 0;
  v27 = v25 + 8;
  do
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t *, _QWORD *, _QWORD))(**(_QWORD **)(v27 - 8) + 32))(*(_QWORD *)(v27 - 8), v30, v23, 0);
    if ((result & 1) != 0)
      break;
    v14 = v27 == v26;
    v27 += 8;
  }
  while (!v14);
  return result;
}

uint64_t sub_1C4ED4028(uint64_t a1, int a2, int64x2_t *a3, unsigned __int8 **a4)
{
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int8 *v18;
  uint64_t result;
  int32x2_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int v23;
  unsigned int v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  _QWORD v29[3];
  __int128 v30;
  __int128 v31;
  _QWORD v32[3];
  __int128 v33;
  __int128 v34;
  unsigned int v35;
  unint64_t v36;

  if (a2)
  {
    LOBYTE(v32[0]) = 0;
    v32[1] = -4096;
    v32[2] = -3;
    v33 = 0u;
    v34 = 0u;
    LOBYTE(v29[0]) = 0;
    v29[1] = -8192;
    v29[2] = -4;
    v30 = 0u;
    v31 = 0u;
    if (a3->i8[0])
    {
      v35 = (*(_DWORD *)(a3->i64[1] - 32) >> 4) ^ (*(_DWORD *)(a3->i64[1] - 32) >> 9);
      v8 = sub_1C4ED44F0(a3, (int *)&v35);
      v36 = v8;
      v9 = a3->i64[1];
      v10 = *(_DWORD *)(v9 + 20);
      v11 = v10 & 0x7FFFFFF;
      v12 = (_DWORD *)(v9 - 32 * v11);
      v13 = *(unsigned __int8 *)(v9 + 16);
      if (v13 == 84)
      {
        v14 = 0;
      }
      else if (v13 == 39)
      {
        v14 = (*(_DWORD *)(v9 + 80) + 1);
      }
      else
      {
        v14 = 2;
      }
      if (v10 < 0 && (v28 = *((_QWORD *)v12 - 1), (v28 & 0xFFFFFFFF0) != 0))
        v15 = (*(v12 - 3) - *(_DWORD *)((char *)v12 - v28));
      else
        v15 = 0;
      if (v12 != (_DWORD *)(v9 - 32 * v14 - 32 * v15 - 32))
      {
        v16 = 32 * v11 - 32 * v14 - 32 * v15 - 32;
        do
        {
          v17 = *v12;
          v12 += 8;
          v35 = (v17 >> 4) ^ (v17 >> 9);
          v8 = sub_1C4ED4620((uint64_t *)&v36, (int *)&v35);
          v36 = v8;
          v16 -= 32;
        }
        while (v16);
      }
    }
    else
    {
      v20.i32[0] = a3->i32[2];
      v20.i32[1] = a3[1].i32[2];
      v21 = vmovn_hight_s64(v20, a3[2]);
      v22 = (int8x16_t)vshlq_u32((uint32x4_t)veorq_s8((int8x16_t)vzip1q_s32(v21, v21), (int8x16_t)vzip2q_s32(v21, v21)), (uint32x4_t)xmmword_1C85F4B40);
      *(int8x8_t *)v22.i8 = veor_s8(*(int8x8_t *)v22.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL));
      LODWORD(v36) = v22.i32[0] ^ v22.i32[1] ^ ((unsigned __int32)a3[3].i32[0] >> 9) ^ (37 * a3[1].i32[0]) ^ ((unsigned __int32)a3[3].i32[0] >> 4);
      LODWORD(v8) = sub_1C4ED44F0(a3, (int *)&v36);
    }
    v23 = a2 - 1;
    v24 = (a2 - 1) & v8;
    v18 = (unsigned __int8 *)(a1 + 112 * v24);
    if ((sub_1C4ED42A0((unsigned __int8 *)a3, v18) & 1) != 0)
    {
      result = 1;
    }
    else
    {
      v25 = 0;
      v26 = 1;
      while (!sub_1C4ED42A0(v18, v32))
      {
        if ((sub_1C4ED42A0(v18, v29) & (v25 == 0)) != 0)
          v25 = v18;
        v24 = (v24 + v26) & v23;
        v18 = (unsigned __int8 *)(a1 + 112 * v24);
        v27 = sub_1C4ED42A0((unsigned __int8 *)a3, v18);
        result = 1;
        ++v26;
        if (v27)
          goto LABEL_15;
      }
      result = 0;
      if (v25)
        v18 = v25;
    }
  }
  else
  {
    v18 = 0;
    result = 0;
  }
LABEL_15:
  *a4 = v18;
  return result;
}

uint64_t sub_1C4ED42A0(unsigned __int8 *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (*a1 != *(unsigned __int8 *)a2)
    return 0;
  if (!*a1)
  {
    if (*((_QWORD *)a1 + 1) == a2[1]
      && *((_QWORD *)a1 + 2) == a2[2]
      && *((_QWORD *)a1 + 3) == a2[3]
      && *((_QWORD *)a1 + 4) == a2[4]
      && *((_QWORD *)a1 + 5) == a2[5])
    {
      return *((_QWORD *)a1 + 6) == a2[6];
    }
    return 0;
  }
  v2 = *((_QWORD *)a1 + 1);
  v3 = a2[1];
  if (*(_QWORD *)(v2 - 32) != *(_QWORD *)(v3 - 32))
    return 0;
  v4 = *(unsigned __int8 *)(v2 + 16);
  if (v4 == 84)
  {
    v5 = 0;
  }
  else if (v4 == 39)
  {
    v5 = (*(_DWORD *)(v2 + 80) + 1);
  }
  else
  {
    v5 = 2;
  }
  v6 = 0;
  v7 = *(_DWORD *)(v2 + 20);
  v8 = v7 & 0x7FFFFFF;
  if (v7 < 0)
  {
    v27 = v2 - 32 * (v7 & 0x7FFFFFF);
    v28 = *(_QWORD *)(v27 - 8);
    if ((v28 & 0xFFFFFFFF0) != 0)
      v6 = *(_DWORD *)(v27 - 12) - *(_DWORD *)(v27 - v28);
    else
      v6 = 0;
  }
  v9 = v2 - 32 * v5 + 32 * -v6;
  v10 = (_QWORD *)(v2 - 32 * (v7 & 0x7FFFFFF));
  v11 = (unint64_t)(v9 - (_QWORD)v10 - 32) >> 5;
  v12 = *(unsigned __int8 *)(v3 + 16);
  if (v12 == 84)
  {
    v13 = 0;
  }
  else if (v12 == 39)
  {
    v13 = (*(_DWORD *)(v3 + 80) + 1);
  }
  else
  {
    v13 = 2;
  }
  v14 = 0;
  v15 = *(_DWORD *)(v3 + 20);
  v16 = -(uint64_t)(v15 & 0x7FFFFFF);
  if (v15 < 0)
  {
    v29 = v3 - 32 * (v15 & 0x7FFFFFF);
    v30 = *(_QWORD *)(v29 - 8);
    if ((v30 & 0xFFFFFFFF0) != 0)
      v14 = *(_DWORD *)(v29 - 12) - *(_DWORD *)(v29 - v30);
    else
      v14 = 0;
  }
  result = 0;
  v18 = v3 - 32 * v13 + 32 * -v14;
  v19 = (uint64_t *)(v3 + 32 * v16);
  if ((_DWORD)v11 == ((unint64_t)(v18 - (_QWORD)v19 - 32) >> 5))
  {
    if (v4 == 84)
    {
      v20 = 0;
    }
    else if (v4 == 39)
    {
      v20 = (*(_DWORD *)(v2 + 80) + 1);
    }
    else
    {
      v20 = 2;
    }
    if (v7 < 0 && (v31 = *(v10 - 1), (v31 & 0xFFFFFFFF0) != 0))
      v21 = (*((_DWORD *)v10 - 3) - *(_DWORD *)((char *)v10 - v31));
    else
      v21 = 0;
    if (v10 == (_QWORD *)(v2 - 32 * v20 - 32 * v21 - 32))
    {
      return 1;
    }
    else
    {
      v22 = 32 * v8 - 32 * v20 - 32 * v21 - 64;
      do
      {
        v24 = *v10;
        v10 += 4;
        v23 = v24;
        v25 = *v19;
        v19 += 4;
        result = v23 == v25;
        v26 = v23 != v25 || v22 == 0;
        v22 -= 32;
      }
      while (!v26);
    }
  }
  return result;
}

unint64_t sub_1C4ED44F0(_BYTE *a1, int *a2)
{
  unsigned __int8 v2;
  _QWORD *v3;
  char *v4;
  int *v6;
  int v7;
  int v8;
  unint64_t v9;
  _BYTE *v10;
  int v11[2];
  _OWORD __src[4];
  _OWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  memset(__src, 0, sizeof(__src));
  v2 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v3 = &unk_1ED7EA000;
  if ((v2 & 1) == 0)
  {
    v10 = a1;
    v6 = a2;
    v7 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v3 = &unk_1ED7EA000;
    a2 = v6;
    v8 = v7;
    a1 = v10;
    if (v8)
    {
      v9 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v9 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v9;
      __cxa_guard_release(&qword_1ED7EAC88);
      v3 = (_QWORD *)&unk_1ED7EA000;
      a1 = v10;
      a2 = v6;
    }
  }
  v15 = v3[400];
  LOBYTE(__src[0]) = *a1;
  *(_QWORD *)v11 = 0;
  v4 = (char *)sub_1C4ED49B0(__src, (uint64_t *)v11, (_OWORD *)((char *)__src + 1), (unint64_t)v13, *a2);
  return sub_1C4E37BA0((char *)__src, *(uint64_t *)v11, v4, (char *)v13);
}

unint64_t sub_1C4ED4620(uint64_t *a1, int *a2)
{
  int *v2;
  uint64_t *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v7;
  unint64_t v8;
  _OWORD v11[4];
  _OWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = a2;
  v3 = a1;
  v15 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  v4 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v5 = &unk_1ED7EA000;
  if ((v4 & 1) == 0)
  {
    v7 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v5 = &unk_1ED7EA000;
    v3 = a1;
    v2 = a2;
    if (v7)
    {
      v8 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v8 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v8;
      __cxa_guard_release(&qword_1ED7EAC88);
      v5 = (_QWORD *)&unk_1ED7EA000;
      v3 = a1;
      v2 = a2;
    }
  }
  v14 = v5[400];
  return sub_1C4ED4C4C((char *)v11, 0, v11, (char *)v12, v3, v2);
}

_BYTE *sub_1C4ED4714(_QWORD *a1, uint64_t *a2, _BYTE *__dst, unint64_t a4, char a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char __src;

  __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *__dst = a5;
    return __dst + 1;
  }
  else
  {
    v8 = a4 - (_QWORD)__dst;
    memcpy(__dst, &__src, a4 - (_QWORD)__dst);
    v9 = *a2;
    if (*a2)
    {
      v10 = a1[9];
      v11 = a1[11];
      v12 = a1[1];
      v13 = a1[12];
      v14 = a1[13];
      v16 = a1[6];
      v15 = a1[7];
      v17 = a1[14];
      v18 = v17 ^ (0xB492B66FBE98F273 * __ROR8__(v10 + a1[8] + v11 + v12, 37));
      v19 = a1[5];
      v20 = v19 + v11 - 0x4B6D499041670D8DLL * __ROR8__(v13 + v10 + v16, 42);
      v21 = __ROR8__(v14 + a1[10], 33);
      v22 = *a1 - 0x4B6D499041670D8DLL * v13;
      v23 = v14 + v22;
      v25 = a1[2];
      v24 = a1[3];
      v21 *= 0xB492B66FBE98F273;
      v26 = v21 + v17 + a1[4];
      v27 = v22 + v12 + v25;
      v28 = v19 + v16 + v26;
      a1[12] = __ROR8__(v23 + v24 + v18, 21) + v22 + __ROR8__(v27, 44);
      a1[13] = v28 + v15;
      a1[14] = __ROR8__(v28, 44) + v26 + __ROR8__(v25 + v20 + v26 + v15, 21);
      a1[10] = v18;
      a1[11] = v27 + v24;
      a1[8] = v21;
      a1[9] = v20;
      v29 = v9 + 64;
    }
    else
    {
      v30 = a1[15];
      v31 = __ROR8__(v30 ^ 0xB492B66FBE98F273, 49);
      v32 = v30 ^ (v30 >> 47);
      v33 = a1[1];
      v34 = v33 + v30 + v31;
      v35 = a1[6];
      v36 = a1[7];
      v37 = a1[5];
      v38 = v37 + v31 - 0x4B6D499041670D8DLL * __ROR8__(v35 + v30 - 0x4B6D499041670D8DLL * v30, 42);
      v39 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v30 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v30 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
      v40 = 0x9DDFEA08EB382D69
          * (v30 ^ (((0x9DDFEA08EB382D69 * (v32 ^ (0xB492B66FBE98F273 * v30))) ^ v30) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                  * (v32 ^ (0xB492B66FBE98F273 * v30))));
      v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v40 >> 47));
      v42 = 0xB492B66FBE98F273 * __ROR8__(v32 - 0x622015F714C7D297 * (v39 ^ (v39 >> 47)), 33);
      v43 = *a1 - 0x6D8ED9027DD26057 * v30;
      v45 = a1[2];
      v44 = a1[3];
      v46 = v43 + v33 + v45;
      v47 = v41 ^ (0xB492B66FBE98F273 * __ROR8__(v34, 37));
      v48 = v42 + a1[4] + v41;
      a1[8] = v42;
      a1[9] = v38;
      a1[10] = v47;
      a1[11] = v46 + v44;
      a1[12] = __ROR8__(v46, 44) + v43 + __ROR8__(v43 + v32 + v44 + v47, 21);
      a1[13] = v37 + v35 + v48 + v36;
      a1[14] = __ROR8__(v37 + v35 + v48, 44) + v48 + __ROR8__(v38 + v45 + v36 + v48, 21);
      v29 = 64;
    }
    *a2 = v29;
    if ((unint64_t)a1 + 1 - v8 <= a4)
    {
      memcpy(a1, &__src + v8, 1 - v8);
      return (char *)a1 + 1 - v8;
    }
  }
  return a1;
}

_DWORD *sub_1C4ED49B0(_QWORD *a1, uint64_t *a2, _DWORD *__dst, unint64_t a4, int a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int __src;

  __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *__dst = a5;
    return __dst + 1;
  }
  else
  {
    v8 = a4 - (_QWORD)__dst;
    memcpy(__dst, &__src, a4 - (_QWORD)__dst);
    v9 = *a2;
    if (*a2)
    {
      v10 = a1[9];
      v11 = a1[11];
      v12 = a1[1];
      v13 = a1[12];
      v14 = a1[13];
      v16 = a1[6];
      v15 = a1[7];
      v17 = a1[14];
      v18 = v17 ^ (0xB492B66FBE98F273 * __ROR8__(v10 + a1[8] + v11 + v12, 37));
      v19 = a1[5];
      v20 = v19 + v11 - 0x4B6D499041670D8DLL * __ROR8__(v13 + v10 + v16, 42);
      v21 = __ROR8__(v14 + a1[10], 33);
      v22 = *a1 - 0x4B6D499041670D8DLL * v13;
      v23 = v14 + v22;
      v25 = a1[2];
      v24 = a1[3];
      v21 *= 0xB492B66FBE98F273;
      v26 = v21 + v17 + a1[4];
      v27 = v22 + v12 + v25;
      v28 = v19 + v16 + v26;
      a1[12] = __ROR8__(v23 + v24 + v18, 21) + v22 + __ROR8__(v27, 44);
      a1[13] = v28 + v15;
      a1[14] = __ROR8__(v28, 44) + v26 + __ROR8__(v25 + v20 + v26 + v15, 21);
      a1[10] = v18;
      a1[11] = v27 + v24;
      a1[8] = v21;
      a1[9] = v20;
      v29 = v9 + 64;
    }
    else
    {
      v30 = a1[15];
      v31 = __ROR8__(v30 ^ 0xB492B66FBE98F273, 49);
      v32 = v30 ^ (v30 >> 47);
      v33 = a1[1];
      v34 = v33 + v30 + v31;
      v35 = a1[6];
      v36 = a1[7];
      v37 = a1[5];
      v38 = v37 + v31 - 0x4B6D499041670D8DLL * __ROR8__(v35 + v30 - 0x4B6D499041670D8DLL * v30, 42);
      v39 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v30 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v30 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
      v40 = 0x9DDFEA08EB382D69
          * (v30 ^ (((0x9DDFEA08EB382D69 * (v32 ^ (0xB492B66FBE98F273 * v30))) ^ v30) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                  * (v32 ^ (0xB492B66FBE98F273 * v30))));
      v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v40 >> 47));
      v42 = 0xB492B66FBE98F273 * __ROR8__(v32 - 0x622015F714C7D297 * (v39 ^ (v39 >> 47)), 33);
      v43 = *a1 - 0x6D8ED9027DD26057 * v30;
      v45 = a1[2];
      v44 = a1[3];
      v46 = v43 + v33 + v45;
      v47 = v41 ^ (0xB492B66FBE98F273 * __ROR8__(v34, 37));
      v48 = v42 + a1[4] + v41;
      a1[8] = v42;
      a1[9] = v38;
      a1[10] = v47;
      a1[11] = v46 + v44;
      a1[12] = __ROR8__(v46, 44) + v43 + __ROR8__(v43 + v32 + v44 + v47, 21);
      a1[13] = v37 + v35 + v48 + v36;
      a1[14] = __ROR8__(v37 + v35 + v48, 44) + v48 + __ROR8__(v38 + v45 + v36 + v48, 21);
      v29 = 64;
    }
    *a2 = v29;
    if ((unint64_t)a1 + 4 - v8 <= a4)
    {
      memcpy(a1, (char *)&__src + v8, 4 - v8);
      return (_DWORD *)((char *)a1 + 4 - v8);
    }
  }
  return a1;
}

unint64_t sub_1C4ED4C4C(char *a1, uint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, int *a6)
{
  _QWORD *v9;
  char *v10;
  uint64_t v12;
  int v13[2];

  v12 = a2;
  v9 = sub_1C4E37644(a1, &v12, a3, (unint64_t)a4, *a5);
  *(_QWORD *)v13 = v12;
  v10 = (char *)sub_1C4ED49B0(a1, (uint64_t *)v13, v9, (unint64_t)a4, *a6);
  return sub_1C4E37BA0(a1, *(uint64_t *)v13, v10, a4);
}

uint64_t sub_1C4ED4CC4(uint64_t a1, uint64_t a2, _DWORD *a3, int a4)
{
  int v5;
  const llvm::Instruction *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  const llvm::Instruction *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _BYTE v30[8];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;
  char v38;
  _OWORD v39[3];

  if (!a2)
    return a2;
  v5 = *(unsigned __int8 *)(a2 + 16);
  if ((v5 - 27) < 0xFFFFFFFE)
    return a2;
  if (a4)
  {
    v8 = sub_1C4ED4F94(*(uint64_t ****)(a2 + 72), *(llvm::DominatorTree **)(*(_QWORD *)(a1 + 2392) + 8));
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 2392);
      v10 = *(_DWORD *)(v9 + 40);
      if (v10)
      {
        v11 = *(_QWORD *)(v9 + 24);
        v12 = v10 - 1;
        v13 = (v10 - 1) & ((v8 >> 4) ^ (v8 >> 9));
        v14 = *(const llvm::Instruction **)(v11 + 16 * v13);
        if (v8 == v14)
        {
LABEL_10:
          v17 = *(_QWORD *)(v11 + 16 * v13 + 8);
          goto LABEL_12;
        }
        v15 = 1;
        while (v14 != (const llvm::Instruction *)-4096)
        {
          v16 = v13 + v15++;
          v13 = v16 & v12;
          v14 = *(const llvm::Instruction **)(v11 + 16 * v13);
          if (v8 == v14)
            goto LABEL_10;
        }
      }
      v17 = 0;
LABEL_12:
      if (*(_BYTE *)(v17 + 16) == 25)
        return *(_QWORD *)(v17 - 32);
      return v17;
    }
    v5 = *(unsigned __int8 *)(a2 + 16);
  }
  if (v5 == 26)
  {
    v17 = *(_QWORD *)(a2 - 32);
    if (!v17)
      goto LABEL_29;
    v18 = *(_DWORD *)(a2 + 92);
  }
  else
  {
    if (v5 == 25)
      v19 = a2;
    else
      v19 = 0;
    if (v19)
      v20 = (uint64_t *)(v19 - 32);
    else
      v20 = (uint64_t *)(a2 - 64);
    v17 = *v20;
    if (!*v20)
      goto LABEL_29;
    v18 = *(_DWORD *)(a2 + 88);
  }
  v21 = 72;
  if (*(_BYTE *)(v17 + 16) == 26)
    v21 = 88;
  if (v18 != *(_DWORD *)(v17 + v21))
  {
LABEL_29:
    v22 = *(_QWORD *)(a2 + 72);
    v23 = *(unsigned __int8 *)(v22 + 16);
    if ((v23 - 37) <= 0x2B && ((1 << (v23 - 37)) & 0x80004000001) != 0)
      return a2;
    v30[0] = ((v23 - 33) < 0x34) & (0x8000000000041uLL >> (v23 - 33));
    *(_QWORD *)&v31 = 0;
    *((_QWORD *)&v31 + 1) = -1;
    v32 = 0u;
    v33 = 0u;
    v34 = v22;
    v35 = a2;
    v36 = 1;
    v37 = 1;
    v38 = 0;
    if (!v30[0])
    {
      llvm::MemoryLocation::getOrNone((uint64_t ***)v22, (uint64_t)v39);
      v31 = v39[0];
      v32 = v39[1];
      v33 = v39[2];
    }
    if (sub_1C4ED3E4C(*(uint64_t **)(a1 + 8), (uint64_t *)v22))
    {
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 2392) + 96);
      v26 = *(unsigned __int8 *)(a2 + 16);
    }
    else
    {
      v26 = *(unsigned __int8 *)(a2 + 16);
      if (v26 == 25)
        v27 = a2;
      else
        v27 = 0;
      if (v27)
        v28 = (uint64_t *)(v27 - 32);
      else
        v28 = (uint64_t *)(a2 - 64);
      v17 = *v28;
      if (*(_QWORD *)(*(_QWORD *)(a1 + 2392) + 96) != *v28)
      {
        v17 = sub_1C4ED53F8(a1, v17, (uint64_t)v30, a3);
        if (*(_BYTE *)(a2 + 16) == 26)
          sub_1C4ED3D74(a2, v17);
        else
          sub_1C4ED3DE4(a2, v17);
        if (*(_QWORD *)(*(_QWORD *)(a1 + 2392) + 96) != v17)
        {
          if (!v37 || v36 != 3)
            return v17;
          v29 = 0x100000003;
LABEL_57:
          *(_QWORD *)(a2 + 80) = v29;
          return v17;
        }
LABEL_56:
        v29 = 0;
        goto LABEL_57;
      }
    }
    if (v26 == 26)
      sub_1C4ED3D74(a2, v17);
    else
      sub_1C4ED3DE4(a2, v17);
    goto LABEL_56;
  }
  return v17;
}

const llvm::Instruction *sub_1C4ED4F94(uint64_t ***this, llvm::DominatorTree *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  llvm::Instruction **v9;
  llvm::Instruction *v10;
  llvm::Instruction **v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  const llvm::Instruction *v18;
  llvm::Value *v19;
  llvm::Instruction **v20;
  llvm::Instruction *v21;
  llvm::Value *v22;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  unsigned __int8 **v35;
  unsigned __int8 *v36;
  unsigned __int8 **v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 **v46;
  uint64_t v47;
  unsigned __int8 *v48;
  void *v49;
  unsigned int v50;
  unsigned int v51;
  _QWORD v52[9];

  v52[8] = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    return 0;
  v4 = ***this;
  v49 = this;
  v5 = *(_DWORD *)(v4 + 2496);
  if (v5)
  {
    v6 = *(_QWORD *)(v4 + 2480);
    v7 = v5 - 1;
    v8 = v7 & ((this >> 4) ^ (this >> 9));
    v9 = (llvm::Instruction **)(v6 + 40 * v8);
    v10 = *v9;
    if (*v9 == (llvm::Instruction *)this)
      goto LABEL_12;
    v11 = 0;
    v12 = 1;
    while (v10 != (llvm::Instruction *)-4096)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v10 == (llvm::Instruction *)-8192;
      if (v13)
        v11 = v9;
      v14 = v8 + v12++;
      v8 = v14 & v7;
      v9 = (llvm::Instruction **)(v6 + 40 * v8);
      v10 = *v9;
      if (*v9 == (llvm::Instruction *)this)
        goto LABEL_12;
    }
    if (v11)
      v20 = v11;
    else
      v20 = v9;
  }
  else
  {
    v20 = 0;
  }
  v9 = (llvm::Instruction **)sub_1C541AB24(v4 + 2480, (uint64_t)&v49, (uint64_t *)&v49, v20);
  v21 = (llvm::Instruction *)v49;
  v9[3] = 0;
  v9[4] = 0;
  *v9 = v21;
  v9[1] = (llvm::Instruction *)(v9 + 3);
  v9[2] = (llvm::Instruction *)0x100000000;
LABEL_12:
  v15 = *((unsigned int *)v9 + 4);
  if (!(_DWORD)v15)
    return 0;
  v16 = (_QWORD *)((char *)v9[1] + 8);
  v17 = 16 * v15;
  while (*((_DWORD *)v16 - 2) != 16)
  {
    v18 = 0;
    v16 += 2;
    v17 -= 16;
    if (!v17)
      return v18;
  }
  if (!*v16 || (llvm::Instruction::isVolatile((llvm::Instruction *)this) & 1) != 0)
    return 0;
  v19 = ((_BYTE)this[2] & 0xFE) == 0x3C ? (llvm::Value *)*(this - 4) : 0;
  v22 = llvm::Value::stripPointerCasts(v19);
  if (*((unsigned __int8 *)v22 + 16) < 0x15u)
    return 0;
  v49 = v52;
  v51 = 8;
  v52[0] = v22;
  v24 = 1;
  v18 = (const llvm::Instruction *)this;
  do
  {
    v25 = *((_QWORD *)v49 + --v24);
    v50 = v24;
    v26 = *(_QWORD *)(v25 + 8);
    if (!v26)
      continue;
    do
    {
      if (*(unsigned __int8 *)(*(_QWORD *)(v26 + 24) + 16) <= 0x1Bu)
        v27 = 0;
      else
        v27 = *(unsigned __int8 **)(v26 + 24);
      if (v27)
        v28 = v27 == (unsigned __int8 *)this;
      else
        v28 = 1;
      if (v28 || !llvm::DominatorTree::dominates(a2, (const llvm::Value *)v27, v18))
        goto LABEL_61;
      v29 = v27[16];
      if (v29 == 62)
      {
        if (!llvm::GetElementPtrInst::hasAllZeroIndices((llvm::GetElementPtrInst *)v27))
          goto LABEL_61;
LABEL_58:
        v44 = v50;
        if (v50 >= (unint64_t)v51)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, (uint64_t)v52, v50 + 1, 8);
          v44 = v50;
        }
        *((_QWORD *)v49 + v44) = v27;
        ++v50;
        goto LABEL_61;
      }
      if (v29 == 77)
        goto LABEL_58;
      if ((v27[23] & 0x20) == 0)
        goto LABEL_61;
      v30 = ***(_QWORD ***)v27;
      v48 = v27;
      v31 = *(_DWORD *)(v30 + 2496);
      if (v31)
      {
        v32 = *(_QWORD *)(v30 + 2480);
        v33 = v31 - 1;
        v34 = v33 & ((v27 >> 4) ^ (v27 >> 9));
        v35 = (unsigned __int8 **)(v32 + 40 * v34);
        v36 = *v35;
        if (*v35 == v27)
          goto LABEL_52;
        v37 = 0;
        v38 = 1;
        while (v36 != (unsigned __int8 *)-4096)
        {
          if (v37)
            v39 = 0;
          else
            v39 = v36 == (unsigned __int8 *)-8192;
          if (v39)
            v37 = v35;
          v40 = v34 + v38++;
          v34 = v40 & v33;
          v35 = (unsigned __int8 **)(v32 + 40 * v34);
          v36 = *v35;
          if (*v35 == v27)
            goto LABEL_52;
        }
        if (v37)
          v46 = v37;
        else
          v46 = v35;
      }
      else
      {
        v46 = 0;
      }
      v35 = (unsigned __int8 **)sub_1C541AB24(v30 + 2480, (uint64_t)&v48, (uint64_t *)&v48, v46);
      v47 = (uint64_t)v48;
      v35[4] = 0;
      v35[3] = 0;
      *v35 = (unsigned __int8 *)v47;
      v35[1] = (unsigned __int8 *)(v35 + 3);
      v35[2] = (unsigned __int8 *)0x100000000;
LABEL_52:
      v41 = *((unsigned int *)v35 + 4);
      if ((_DWORD)v41)
      {
        v42 = v35[1] + 8;
        v43 = 16 * v41;
        while (*((_DWORD *)v42 - 2) != 16)
        {
          v42 += 2;
          v43 -= 16;
          if (!v43)
            goto LABEL_61;
        }
        if (*v42)
        {
          v45 = (v27[16] & 0xFE) == 0x3C ? *((_QWORD *)v27 - 4) : 0;
          if (v45 == v25 && !llvm::Instruction::isVolatile((llvm::Instruction *)v27))
            v18 = (const llvm::Instruction *)v27;
        }
      }
LABEL_61:
      v26 = *(_QWORD *)(v26 + 8);
    }
    while (v26);
    v24 = v50;
  }
  while (v24);
  if (v18 == (const llvm::Instruction *)this)
    v18 = 0;
  if (v49 != v52)
    free(v49);
  return v18;
}

BOOL sub_1C4ED5384(uint64_t a1)
{
  int v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (!a1 || v1 != 26)
  {
    if (v1 == 25)
      v4 = a1;
    else
      v4 = 0;
    if (v4)
      v5 = (uint64_t *)(v4 - 32);
    else
      v5 = (uint64_t *)(a1 - 64);
    v2 = *v5;
    if (v2)
    {
      v3 = (int *)(a1 + 88);
      goto LABEL_13;
    }
    return 0;
  }
  v2 = *(_QWORD *)(a1 - 32);
  if (!v2)
    return 0;
  v3 = (int *)(a1 + 92);
LABEL_13:
  v6 = *v3;
  v7 = 72;
  if (*(_BYTE *)(v2 + 16) == 26)
    v7 = 88;
  return v6 == *(_DWORD *)(v2 + v7);
}

uint64_t sub_1C4ED53F8(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t *v5;
  __int128 v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  int v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  _OWORD *v61;
  unsigned int v62;
  uint64_t *v63;
  unsigned int *v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  __int128 v72;
  uint64_t v73;
  int v74;
  unsigned __int8 *v75;
  unsigned __int8 **v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  _OWORD *v82;
  unsigned int v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t *v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  unint64_t v95;
  uint64_t *v96;
  int v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  _OWORD v101[3];
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  char v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  void *v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  void *v117;
  uint64_t v118;
  _BYTE v119[64];
  unsigned int *v120;
  uint64_t v121;
  _BYTE v122[32];
  unsigned int *v123;
  uint64_t v124;
  _QWORD v125[11];

  v5 = (uint64_t *)a2;
  v125[8] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a4;
  if (!*a4)
    *a4 = 1;
  if (a2 && *(_BYTE *)(a2 + 16) == 25)
    v5 = *(uint64_t **)(a2 - 32);
  v7 = *(_OWORD *)(a3 + 24);
  v101[0] = *(_OWORD *)(a3 + 8);
  v101[1] = v7;
  v101[2] = *(_OWORD *)(a3 + 40);
  v102 = v5;
  v103 = v5;
  v104 = 0;
  sub_1C4ED5D3C((uint64_t)&v98, a1, (uint64_t)v101, 0, 0);
  if (v99)
  {
    v8 = v98;
    *(_QWORD *)(a3 + 72) = v100;
    return v8;
  }
  v9 = (__int128 *)(a3 + 8);
  v10 = v103;
  v11 = *(_DWORD *)(a1 + 48);
  if (v11 >= *(_DWORD *)(a1 + 52))
  {
    v93 = *(_OWORD *)(a3 + 24);
    v107 = *v9;
    v108 = v93;
    v109 = *(_OWORD *)(a3 + 40);
    v110 = v5;
    v111 = v103;
    v112 = 0;
    sub_1C4ED6270(a1 + 40, (unint64_t)&v107);
    v15 = *(_DWORD *)(a1 + 48);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 40) + 72 * v11;
    v13 = *v9;
    v14 = *(_OWORD *)(a3 + 40);
    *(_OWORD *)(v12 + 16) = *(_OWORD *)(a3 + 24);
    *(_OWORD *)(v12 + 32) = v14;
    *(_OWORD *)v12 = v13;
    *(_QWORD *)(v12 + 48) = v5;
    *(_QWORD *)(v12 + 56) = v10;
    *(_QWORD *)(v12 + 64) = 0;
    v15 = *(_DWORD *)(a1 + 48) + 1;
    *(_DWORD *)(a1 + 48) = v15;
  }
  v95 = v15;
  v123 = (unsigned int *)v125;
  v124 = 0x1000000000;
  v120 = (unsigned int *)v122;
  v121 = 0x800000000;
  v117 = v119;
  v118 = 0x400000000;
  sub_1C4ED6018(a1, (uint64_t)v10, (uint64_t)&v123, 0);
  while (2)
  {
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_QWORD *)(v16 + 24);
    v18 = *(unsigned int *)(v16 + 40);
    if (!(_DWORD)v18)
    {
LABEL_17:
      v21 = (uint64_t *)(v17 + 16 * v18);
      goto LABEL_18;
    }
    v19 = v10[8];
    LODWORD(v20) = (v18 - 1) & ((v19 >> 4) ^ (v19 >> 9));
    v21 = (uint64_t *)(v17 + 16 * v20);
    v22 = *v21;
    if (v19 != *v21)
    {
      v23 = 1;
      while (v22 != -4096)
      {
        v24 = v20 + v23++;
        v20 = v24 & (v18 - 1);
        v22 = *(_QWORD *)(v17 + 16 * v20);
        if (v19 == v22)
        {
          v21 = (uint64_t *)(v17 + 16 * v20);
          goto LABEL_18;
        }
      }
      goto LABEL_17;
    }
LABEL_18:
    v25 = *(_QWORD *)a1;
    v26 = *(unsigned __int8 **)(*(_QWORD *)a1 + 96);
    v27 = *(_QWORD **)(v21[1] + 8);
    if (!v27)
      goto LABEL_29;
    v28 = *(_QWORD *)(v25 + 72);
    v29 = *(unsigned int *)(v25 + 88);
    v30 = v29 - 1;
    while (1)
    {
      if ((_DWORD)v29)
      {
        LODWORD(v31) = ((*v27 >> 4) ^ (*v27 >> 9)) & v30;
        v32 = (uint64_t *)(v28 + 16 * v31);
        v33 = *v32;
        if (*v27 != *v32)
        {
          v34 = 1;
          while (v33 != -4096)
          {
            v35 = v31 + v34++;
            v31 = v35 & v30;
            v33 = *(_QWORD *)(v28 + 16 * v31);
            if (*v27 == v33)
            {
              v32 = (uint64_t *)(v28 + 16 * v31);
              goto LABEL_26;
            }
          }
          goto LABEL_28;
        }
LABEL_26:
        if (v32 != (uint64_t *)(v28 + 16 * v29))
        {
          v36 = (_QWORD *)v32[1];
          if (v36)
            break;
        }
      }
LABEL_28:
      v27 = (_QWORD *)v27[1];
      if (!v27)
        goto LABEL_29;
    }
    if (*v36)
      v26 = (unsigned __int8 *)(*v36 - 48);
    else
      v26 = 0;
LABEL_29:
    v37 = 0;
    while (2)
    {
      if ((_DWORD)v124)
      {
        v38 = v123[v124 - 1];
        LODWORD(v124) = v124 - 1;
        v39 = *(_QWORD *)(a1 + 40) + 72 * v38;
        v40 = *(void **)(v39 + 56);
        v113 = v40;
        v114 = *(_OWORD *)v39;
        v115 = *(_OWORD *)(v39 + 16);
        v116 = *(_OWORD *)(v39 + 32);
        v105 = 0;
        if (sub_1C4ED6604(*(_QWORD *)(a1 + 2360), *(_DWORD *)(a1 + 2376), (uint64_t *)&v113, &v105))
        {
          if (*(_BYTE *)(a1 + 2384))
            goto LABEL_109;
        }
        else
        {
          v41 = sub_1C4ED67D4(a1 + 2360, (uint64_t *)&v113, v105);
          *v41 = (uint64_t)v40;
          *(_OWORD *)(v41 + 1) = v114;
          *(_OWORD *)(v41 + 3) = v115;
          *(_OWORD *)(v41 + 5) = v116;
          v42 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v42 + 80)
            && *(_QWORD *)v39 == *(_QWORD *)(v42 + 8)
            && *(_QWORD *)(v39 + 8) == *(_QWORD *)(v42 + 16)
            && *(_QWORD *)(v39 + 16) == *(_QWORD *)(v42 + 24)
            && *(_QWORD *)(v39 + 24) == *(_QWORD *)(v42 + 32)
            && *(_QWORD *)(v39 + 32) == *(_QWORD *)(v42 + 40)
            && *(_QWORD *)(v39 + 40) == *(_QWORD *)(v42 + 48))
          {
            v43 = *(void **)(v42 + 64);
          }
          else
          {
            v43 = 0;
          }
          sub_1C4ED5D3C((uint64_t)&v113, a1, v39, (uint64_t)v26, (uint64_t)v43);
          v44 = v113;
          if ((_BYTE)v114)
          {
            if (llvm::MemorySSA::dominates(*(_QWORD *)a1, (uint64_t)v113, (uint64_t)v26))
            {
              v45 = v118;
              if (v118 >= (unint64_t)HIDWORD(v118))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, (uint64_t)v119, v118 + 1, 16);
                v45 = v118;
              }
              v46 = (char *)v117 + 16 * v45;
              *v46 = v44;
              v46[1] = v38;
              LODWORD(v118) = v118 + 1;
              goto LABEL_46;
            }
            v37 = 1;
            v97 = v38;
            v47 = 1;
LABEL_47:
            if (v47 == 1)
            {
              LODWORD(v38) = v97;
              if (v37)
              {
LABEL_109:
                LODWORD(v78) = v38;
                v79 = *(_QWORD *)(a1 + 40);
                while (1)
                {
                  v80 = v78;
                  if (v95 > v78)
                    break;
                  v78 = *(_QWORD *)(v79 + 72 * v78 + 64);
                  if ((v78 & 0xFF00000000) == 0)
                  {
                    v80 = v78;
                    break;
                  }
                }
                *(_QWORD *)&v107 = *(_QWORD *)(v79 + 72 * v80 + 56);
                *((_QWORD *)&v107 + 1) = v78;
                *(_QWORD *)&v108 = &v109;
                *((_QWORD *)&v108 + 1) = 0x400000000;
                goto LABEL_114;
              }
              break;
            }
            continue;
          }
          if (v113 != v26 && v113 != v43)
          {
            sub_1C4ED6018(a1, (uint64_t)v113, (uint64_t)&v123, v38);
            v47 = 0;
            goto LABEL_47;
          }
          if (v113 != v43)
          {
            v48 = v121;
            if (v121 >= (unint64_t)HIDWORD(v121))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, (uint64_t)v122, v121 + 1, 4);
              v48 = v121;
            }
            v120[v48] = v38;
            LODWORD(v121) = v121 + 1;
          }
        }
LABEL_46:
        v47 = 2;
        goto LABEL_47;
      }
      break;
    }
    if ((_DWORD)v121)
    {
      v96 = v10;
      v10 = 0;
      v113 = (char *)&v114 + 8;
      *(_QWORD *)&v114 = 0x400000000;
      v49 = 4 * v121;
      v50 = v120;
      do
      {
        v51 = (uint64_t *)*v50;
        sub_1C4ED5D3C((uint64_t)&v105, a1, *(_QWORD *)(a1 + 40) + 72 * v51, 0, 0);
        v52 = v105;
        if (v106)
        {
          v53 = v114;
          if (v114 >= (unint64_t)DWORD1(v114))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, (uint64_t)&v114 + 8, v114 + 1, 16);
            v53 = v114;
          }
          v54 = (uint64_t **)((char *)v113 + 16 * v53);
          *v54 = v52;
          v54[1] = v51;
          LODWORD(v114) = v114 + 1;
        }
        else
        {
          v10 = v105;
        }
        ++v50;
        v49 -= 4;
      }
      while (v49);
      if ((_DWORD)v118)
      {
        if (!v10)
        {
          if (v26)
          {
            do
            {
              v10 = (uint64_t *)v26;
              v74 = v26[16];
              if ((v74 - 27) < 0xFFFFFFFE)
                break;
              v75 = v74 == 25 ? v26 : 0;
              v76 = (unsigned __int8 **)(v75 ? v75 - 32 : v26 - 64);
              v26 = *v76;
            }
            while (*v76);
          }
          else
          {
            v10 = 0;
          }
        }
        v55 = v10[8];
        v56 = (char *)v117;
        v57 = 16 * v118;
        do
        {
          if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*(_QWORD *)(a1 + 16), v55, *(_QWORD *)(*(_QWORD *)v56 + 64)))
          {
            v58 = *(_OWORD *)v56;
            v59 = v114;
            if (v114 >= (unint64_t)DWORD1(v114))
            {
              v94 = *(_OWORD *)v56;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, (uint64_t)&v114 + 8, v114 + 1, 16);
              v58 = v94;
              v59 = v114;
            }
            *((_OWORD *)v113 + v59) = v58;
            LODWORD(v114) = v114 + 1;
          }
          v56 += 16;
          v57 -= 16;
        }
        while (v57);
      }
      v60 = v114;
      if ((_DWORD)v114)
      {
        v61 = v113;
        if ((_DWORD)v114 == 1)
        {
          v62 = 1;
          v63 = (uint64_t *)v113;
        }
        else
        {
          v67 = (uint64_t *)((char *)v113 + 16);
          v68 = 16 * v114 - 16;
          v63 = (uint64_t *)v113;
          v69 = (uint64_t *)((char *)v113 + 16);
          do
          {
            v70 = *v69;
            v69 += 2;
            if (!llvm::MemorySSA::dominates(*(_QWORD *)a1, v70, *v63))
              v63 = v67;
            v67 = v69;
            v68 -= 16;
          }
          while (v68);
          v61 = v113;
          v62 = v114;
        }
        v71 = (uint64_t *)&v61[v62 - 1];
        v10 = v96;
        if (v71 == v63)
        {
          v73 = v62;
        }
        else
        {
          v72 = *(_OWORD *)v71;
          *(_OWORD *)v71 = *(_OWORD *)v63;
          *(_OWORD *)v63 = v72;
          v61 = v113;
          v73 = v114;
          v62 = v114;
        }
        v77 = v61[v73 - 1];
        LODWORD(v114) = v62 - 1;
        v107 = v77;
        sub_1C4ED61B0((uint64_t)&v108, (uint64_t)&v113);
      }
      else
      {
        v95 = *(unsigned int *)(a1 + 48);
        LODWORD(v124) = 0;
        if ((_DWORD)v121)
        {
          v64 = v120;
          v65 = 4 * v121;
          do
          {
            v66 = *v64++;
            sub_1C4ED6018(a1, (uint64_t)v10, (uint64_t)&v123, v66);
            v65 -= 4;
          }
          while (v65);
        }
        LODWORD(v121) = 0;
      }
      if (v113 != (char *)&v114 + 8)
        free(v113);
      if (!v60)
        continue;
    }
    else
    {
      v82 = v117;
      v83 = v118;
      if ((_DWORD)v118 == 1)
      {
        v84 = (uint64_t *)v117;
      }
      else
      {
        v85 = (uint64_t *)((char *)v117 + 16);
        v86 = 16 * v118 - 16;
        v84 = (uint64_t *)v117;
        v87 = (uint64_t *)((char *)v117 + 16);
        do
        {
          v88 = *v87;
          v87 += 2;
          if (!llvm::MemorySSA::dominates(*(_QWORD *)a1, v88, *v84))
            v84 = v85;
          v85 = v87;
          v86 -= 16;
        }
        while (v86);
        v82 = v117;
        v83 = v118;
      }
      v89 = (uint64_t *)&v82[v83 - 1];
      if (v89 == v84)
      {
        v91 = v83;
      }
      else
      {
        v90 = *(_OWORD *)v89;
        *(_OWORD *)v89 = *(_OWORD *)v84;
        *(_OWORD *)v84 = v90;
        v82 = v117;
        v91 = v118;
        v83 = v118;
      }
      v92 = v82[v91 - 1];
      LODWORD(v118) = v83 - 1;
      v107 = v92;
      sub_1C4ED61B0((uint64_t)&v108, (uint64_t)&v117);
    }
    break;
  }
LABEL_114:
  if (v117 != v119)
    free(v117);
  if (v120 != (unsigned int *)v122)
    free(v120);
  if (v123 != (unsigned int *)v125)
    free(v123);
  *(_DWORD *)(a1 + 48) = 0;
  sub_1C4ED6AA4((char *)(a1 + 2360));
  *(_BYTE *)(a1 + 2384) = 0;
  v8 = v107;
  if ((__int128 *)v108 != &v109)
    free((void *)v108);
  return v8;
}

uint64_t sub_1C4ED5D3C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  int v16;
  uint64_t v17;
  uint64_t *v18;

  v9 = result;
  v10 = *(int **)(a2 + 32);
  v11 = *v10;
  if (!*v10)
    *v10 = 1;
  v12 = *(_QWORD *)(a3 + 56);
  if (v12)
  {
    while (1)
    {
      *(_QWORD *)(a3 + 56) = v12;
      if (v12 == a4 || v12 == a5)
      {
        *(_QWORD *)v9 = v12;
        goto LABEL_22;
      }
      v13 = *(unsigned __int8 *)(v12 + 16);
      if (v13 == 26)
      {
        if (*(_QWORD *)(*(_QWORD *)a2 + 96) == v12)
        {
          *(_QWORD *)v9 = v12;
          *(_BYTE *)(v9 + 8) = 1;
          *(_DWORD *)(v9 + 12) = 3;
          goto LABEL_24;
        }
        v14 = *(_DWORD **)(a2 + 32);
        if ((*v14)-- == 1)
        {
          *(_QWORD *)v9 = v12;
          *(_BYTE *)(v9 + 8) = 1;
          goto LABEL_23;
        }
        result = sub_1C4ED5E98(*(_QWORD *)(v12 + 72), (__int128 *)a3, *(_QWORD *)(*(_QWORD *)(a2 + 24) + 56), *(uint64_t **)(a2 + 8));
        if ((result & 1) != 0)
        {
          *(_QWORD *)v9 = v12;
          *(_BYTE *)(v9 + 8) = 1;
          *(_DWORD *)(v9 + 12) = HIDWORD(result);
          *(_DWORD *)(v9 + 16) = v16;
          return result;
        }
        v13 = *(unsigned __int8 *)(v12 + 16);
      }
      if ((v13 - 27) >= 0xFFFFFFFE)
      {
        v17 = v13 == 25 ? v12 : 0;
        v18 = (uint64_t *)(v17 ? v17 - 32 : v12 - 64);
        v12 = *v18;
        if (*v18)
          continue;
      }
      break;
    }
  }
  if (!v11)
    **(_DWORD **)(a2 + 32) = 0;
  *(_QWORD *)v9 = *(_QWORD *)(a3 + 56);
LABEL_22:
  *(_BYTE *)(v9 + 8) = 0;
LABEL_23:
  *(_DWORD *)(v9 + 12) = 1;
LABEL_24:
  *(_BYTE *)(v9 + 16) = 1;
  return result;
}

uint64_t sub_1C4ED5E98(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t *a4)
{
  int v4;
  uint64_t v5;
  int v6;
  unsigned int ModRefInfo;
  int v9;
  int v10;
  unint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  int v16;
  BOOL v17;
  BOOL v18;
  __int128 v19[3];
  char v20;
  _BYTE v21[12];

  v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 == 84)
  {
    v5 = *(_QWORD *)(a1 - 32);
    if (v5)
    {
      if (!*(_BYTE *)(v5 + 16) && *(_QWORD *)(v5 + 24) == *(_QWORD *)(a1 + 72) && (*(_BYTE *)(v5 + 33) & 0x20) != 0)
      {
        v16 = *(_DWORD *)(v5 + 36);
        v17 = (v16 - 126) > 0x26 || ((1 << (v16 - 126)) & 0x6000000001) == 0;
        if (!v17 || (v16 != 244 ? (v18 = v16 == 7) : (v18 = 1), v18))
        {
          v21[0] = 0;
          *(_DWORD *)&v21[4] = 0;
          v21[8] = 1;
          return *(_QWORD *)v21;
        }
      }
    }
  }
  if (!a3)
    goto LABEL_17;
  v6 = *(unsigned __int8 *)(a3 + 16);
  if ((v6 - 33) <= 0x33 && ((1 << (v6 - 33)) & 0x8000000000041) != 0)
  {
    LOBYTE(ModRefInfo) = llvm::AAResults::getModRefInfo(*a4, a1, a3, (uint64_t)(a4 + 1));
    LOBYTE(v9) = (ModRefInfo & 3) != 0;
LABEL_18:
    v21[0] = v9;
    v14 = 0x100000001;
    if ((ModRefInfo & 4) == 0)
      v14 = 0x100000003;
    *(_QWORD *)&v21[4] = v14;
    return *(_QWORD *)v21;
  }
  if (v4 != 60 || v6 != 60)
  {
LABEL_17:
    v13 = a2[1];
    v19[0] = *a2;
    v19[1] = v13;
    v19[2] = a2[2];
    v20 = 1;
    ModRefInfo = llvm::AAResults::getModRefInfo(*a4, a1, v19, (uint64_t)(a4 + 1));
    v9 = (ModRefInfo >> 1) & 1;
    goto LABEL_18;
  }
  v10 = *(unsigned __int16 *)(a3 + 18);
  v11 = *(unsigned __int16 *)(a1 + 18);
  if ((v10 & 1) != 0 && (v11 & 1) != 0)
    v12 = 1;
  else
    v12 = ((~v10 & 0x380) == 0) | (0xD0uLL >> ((v11 >> 7) & 7));
  v21[0] = v12 & 1;
  *(_DWORD *)&v21[4] = 1;
  v21[8] = 1;
  return *(_QWORD *)v21;
}

uint64_t sub_1C4ED6018(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  _OWORD *v8;
  uint64_t result;
  int v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  float64x2_t v16;
  _BYTE v17[64];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _OWORD v24[3];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v7 = a1 + 40;
  v8 = (_OWORD *)(*(_QWORD *)(a1 + 40) + 72 * a4);
  *(_QWORD *)v17 = a2;
  *(_OWORD *)&v17[8] = *v8;
  *(_OWORD *)&v17[24] = v8[1];
  *(_OWORD *)&v17[40] = v8[2];
  result = sub_1C4ED638C((uint64_t)v24, (uint64_t *)v17, *(_QWORD *)(a1 + 16), a1 + 2384);
  v20 = v28;
  v21 = v29;
  v22 = v30;
  v23 = v31;
  *(_OWORD *)&v17[32] = v24[2];
  *(_OWORD *)&v17[48] = v25;
  v18 = v26;
  v19 = v27;
  *(_OWORD *)v17 = v24[0];
  *(_OWORD *)&v17[16] = v24[1];
  if (*((_QWORD *)&v25 + 1))
  {
    do
    {
      v10 = *(_DWORD *)(a1 + 48);
      v11 = *(unsigned int *)(a3 + 8);
      if (v11 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v11 + 1, 4);
        v11 = *(unsigned int *)(a3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v11) = v10;
      ++*(_DWORD *)(a3 + 8);
      v12 = *(_DWORD *)(a1 + 48);
      if (v12 >= *(_DWORD *)(a1 + 52))
      {
        v32[0] = *(_OWORD *)&v17[8];
        v32[1] = *(_OWORD *)&v17[24];
        v32[2] = *(_OWORD *)&v17[40];
        v33 = *(_QWORD *)v17;
        v34 = *(_QWORD *)v17;
        v35 = a4 | 0x100000000;
        sub_1C4ED6270(v7, (unint64_t)v32);
      }
      else
      {
        v13 = *(_QWORD *)(a1 + 40) + 72 * v12;
        v14 = *(_OWORD *)&v17[24];
        v15 = *(_OWORD *)&v17[40];
        v16 = vld1q_dup_f64((const double *)v17);
        *(_OWORD *)v13 = *(_OWORD *)&v17[8];
        *(_OWORD *)(v13 + 16) = v14;
        *(_OWORD *)(v13 + 32) = v15;
        *(float64x2_t *)(v13 + 48) = v16;
        *(_QWORD *)(v13 + 64) = a4 | 0x100000000;
        ++*(_DWORD *)(a1 + 48);
      }
      result = sub_1C4ED6328((uint64_t)v17);
    }
    while (*(_QWORD *)&v17[56]);
  }
  return result;
}

uint64_t sub_1C4ED61B0(uint64_t a1, uint64_t a2)
{
  void *v3;
  unint64_t v5;
  const void *v6;
  int v7;
  unsigned int v8;

  v3 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x400000000;
  if (a1 != a2)
  {
    v5 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v5)
    {
      v6 = *(const void **)a2;
      if (*(_QWORD *)a2 != a2 + 16)
      {
        *(_QWORD *)a1 = v6;
        v7 = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a1 + 8) = v5;
        *(_DWORD *)(a1 + 12) = v7;
        *(_QWORD *)a2 = a2 + 16;
        *(_DWORD *)(a2 + 12) = 0;
LABEL_11:
        *(_DWORD *)(a2 + 8) = 0;
        return a1;
      }
      if (v5 < 5)
      {
        v8 = v5;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 16);
        v8 = *(_DWORD *)(a2 + 8);
        if (!v8)
        {
LABEL_10:
          *(_DWORD *)(a1 + 8) = v5;
          goto LABEL_11;
        }
        v6 = *(const void **)a2;
        v3 = *(void **)a1;
      }
      memcpy(v3, v6, 16 * v8);
      goto LABEL_10;
    }
  }
  return a1;
}

__n128 sub_1C4ED6270(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v10 = v4 + 1;
    v11 = v5 + 72 * v4;
    if (v5 <= a2 && v11 > a2)
    {
      v13 = a2 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v10, 72);
      v5 = *(_QWORD *)a1;
      v2 = *(_QWORD *)a1 + v13;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v10, 72);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = v5 + 72 * *(unsigned int *)(a1 + 8);
  *(_OWORD *)v6 = *(_OWORD *)v2;
  result = *(__n128 *)(v2 + 16);
  v8 = *(_OWORD *)(v2 + 32);
  v9 = *(_OWORD *)(v2 + 48);
  *(_QWORD *)(v6 + 64) = *(_QWORD *)(v2 + 64);
  *(_OWORD *)(v6 + 32) = v8;
  *(_OWORD *)(v6 + 48) = v9;
  *(__n128 *)(v6 + 16) = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C4ED6328(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  unsigned int v4;

  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
    v3 = *(_BYTE *)(v2 + 16) == 27;
  else
    v3 = 0;
  if (!v3)
    goto LABEL_9;
  v4 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v4;
  if (v4 >= (*(_DWORD *)(v2 + 20) & 0x7FFFFFFu))
  {
    *(_DWORD *)(a1 + 64) = 0;
LABEL_9:
    *(_QWORD *)(a1 + 56) = 0;
    return a1;
  }
  sub_1C4ED6418(a1);
  return a1;
}

uint64_t sub_1C4ED638C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = -1;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = *a2;
  *(_DWORD *)(a1 + 64) = 0;
  v5 = *(_OWORD *)(a2 + 1);
  v6 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  *(_QWORD *)(a1 + 120) = *a2;
  *(_QWORD *)(a1 + 128) = a3;
  *(_QWORD *)(a1 + 144) = a4;
  *(_QWORD *)a1 = 0;
  v7 = *a2;
  if (*a2)
    LOBYTE(v7) = *(_BYTE *)(v7 + 16) == 27;
  *(_BYTE *)(a1 + 136) = v7;
  sub_1C4ED6418(a1);
  return a1;
}

void sub_1C4ED6418(uint64_t a1)
{
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  unsigned __int8 **v9;
  llvm::Value *v10;
  BOOL IsGuaranteedLoopInvariant;
  unsigned __int8 *v12;
  llvm::BasicBlock *v13;
  llvm::Value *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BOOL8 v18;
  llvm::Value *v19;
  _BYTE *v20;
  llvm::Value *v21[4];
  void *v22;
  uint64_t v23;
  _QWORD v24[5];

  v24[4] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(unsigned __int8 *)(v2 + 16);
  if (v2)
    v4 = v3 == 27;
  else
    v4 = 0;
  if (v4)
  {
    v7 = *(_DWORD *)(v2 + 20);
    if ((v7 & 0x40000000) != 0)
      v8 = *(_QWORD *)(v2 - 8);
    else
      v8 = v2 - 32 * (v7 & 0x7FFFFFF);
    v6 = (_QWORD *)(v8 + 32 * *(unsigned int *)(a1 + 64));
  }
  else
  {
    if (v3 == 25)
      v5 = *(_QWORD *)(a1 + 56);
    else
      v5 = 0;
    v6 = (_QWORD *)(v2 - 64);
    if (v5)
      v6 = (_QWORD *)(v5 - 32);
  }
  *(_QWORD *)a1 = *v6;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 104);
  if (*(_BYTE *)(a1 + 136))
  {
    v9 = (unsigned __int8 **)(a1 + 72);
    v10 = *(llvm::Value **)(a1 + 72);
    if (v10)
    {
      IsGuaranteedLoopInvariant = llvm::upward_defs_iterator::IsGuaranteedLoopInvariant((llvm::upward_defs_iterator *)a1, v10);
      v12 = *v9;
      if (!IsGuaranteedLoopInvariant)
      {
        *(_QWORD *)(a1 + 8) = v12;
        *(_QWORD *)(a1 + 16) = -1;
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 88);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 104);
      }
      v13 = *(llvm::BasicBlock **)(*(_QWORD *)(a1 + 120) + 64);
      v14 = (llvm::Value *)(*(_QWORD *)(*((_QWORD *)v13 + 7) + 40) + 272);
      v21[0] = (llvm::Value *)v12;
      v21[1] = v14;
      v21[2] = 0;
      v21[3] = 0;
      v22 = v24;
      v23 = 0x400000000;
      if (v12 && v12[16] >= 0x1Cu)
      {
        v24[0] = v12;
        LODWORD(v23) = 1;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 56) + 16) == 27)
        v15 = *(_QWORD *)(a1 + 56);
      else
        v15 = 0;
      v16 = *(_DWORD *)(v15 + 20);
      if ((v16 & 0x40000000) != 0)
        v17 = *(_QWORD *)(v15 - 8);
      else
        v17 = v15 - 32 * (v16 & 0x7FFFFFF);
      v18 = llvm::PHITransAddr::PHITranslateValue((llvm::PHITransAddr *)v21, v13, *(llvm::BasicBlock **)(v17 + 32 * *(unsigned int *)(v15 + 76) + 8 * *(unsigned int *)(a1 + 64)), *(const llvm::DominatorTree **)(a1 + 128), 1);
      if (!v18)
      {
        v19 = v21[0];
        if ((unsigned __int8 *)v21[0] != *v9)
        {
          *(llvm::Value **)(a1 + 8) = v21[0];
          if (v19 && !llvm::upward_defs_iterator::IsGuaranteedLoopInvariant((llvm::upward_defs_iterator *)v18, v19))
            *(_QWORD *)(a1 + 16) = -1;
          v20 = *(_BYTE **)(a1 + 144);
          if (v20)
            *v20 = 1;
        }
      }
      if (v22 != v24)
        free(v22);
    }
  }
}

uint64_t sub_1C4ED6604(uint64_t a1, int a2, uint64_t *a3, uint64_t **a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  int i;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  unsigned int v23;
  uint64_t result;

  if (!a2)
  {
    v20 = 0;
    result = 0;
    goto LABEL_26;
  }
  v4 = 0;
  v5 = *a3;
  v6 = a3[1];
  v7 = a3[2];
  v8 = a3[3];
  v9 = a3[4];
  v10 = a3[5];
  v11 = a3[6];
  v12 = (v6 >> 4) ^ (v6 >> 9) ^ (37 * (_DWORD)v7) ^ (v8 >> 9) ^ (v8 >> 4) ^ (v9 >> 9) ^ (v9 >> 4) ^ (v10 >> 9) ^ (v10 >> 4) ^ (v11 >> 9) ^ (v11 >> 4);
  v13 = v12 | ((unint64_t)((*a3 >> 4) ^ (*a3 >> 9)) << 32);
  v14 = (v13 + ~(v12 << 32)) ^ ((v13 + ~(v12 << 32)) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  LODWORD(v12) = (v16 >> 31) ^ v16;
  v17 = a2 - 1;
  v18 = (a2 - 1) & v12;
  for (i = 1; ; ++i)
  {
    v20 = (uint64_t *)(a1 + 56 * v18);
    v21 = *v20;
    if (v5 == *v20 && v6 == v20[1] && v7 == v20[2] && v8 == v20[3] && v9 == v20[4] && v10 == v20[5] && v11 == v20[6])
    {
      result = 1;
      goto LABEL_26;
    }
    if (v21 == -4096)
      break;
    if (v21 != -8192 || v20[1] != -8192 || v20[2] != -4 || v20[3] || v20[4] || v20[5])
      goto LABEL_20;
    v22 = v20[6] == 0;
LABEL_21:
    if (v22 && v4 == 0)
      v4 = (uint64_t *)(a1 + 56 * v18);
    v23 = v18 + i;
    v18 = v23 & v17;
  }
  if (v20[1] != -4096 || v20[2] != -3 || v20[3] || v20[4] || v20[5] || v20[6])
  {
LABEL_20:
    v22 = 0;
    goto LABEL_21;
  }
  result = 0;
  if (v4)
    v20 = v4;
LABEL_26:
  *a4 = v20;
  return result;
}

uint64_t *sub_1C4ED67D4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  uint64_t *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_12;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_12:
    sub_1C4ED68C0(a1, v6);
    v8 = 0;
    sub_1C4ED6604(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
    a3 = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096 || a3[1] != -4096 || a3[2] != -3 || a3[3] || a3[4] || a3[5] || a3[6])
    --*(_DWORD *)(a1 + 12);
  return a3;
}

char *sub_1C4ED68C0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  __int128 v15;
  __int128 v16;
  int v17;
  char *v18;
  uint64_t *v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(56 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = &result[56 * v10];
      do
      {
        *(_QWORD *)result = -4096;
        *((_QWORD *)result + 1) = -4096;
        *((_QWORD *)result + 2) = -3;
        *(_OWORD *)(result + 24) = 0uLL;
        *(_OWORD *)(result + 40) = 0uLL;
        result += 56;
      }
      while (result != v11);
    }
    if (!(_DWORD)v3)
LABEL_29:
      JUMPOUT(0x1CAA32FB4);
    v12 = 56 * v3;
    v13 = (uint64_t *)v4;
    while (1)
    {
      if (*v13 == -4096)
      {
        if (v13[1] == -4096 && v13[2] == -3)
        {
LABEL_15:
          if (!v13[3] && !v13[4] && !v13[5] && !v13[6])
            goto LABEL_19;
        }
      }
      else if (*v13 == -8192 && v13[1] == -8192 && v13[2] == -4)
      {
        goto LABEL_15;
      }
      v19 = 0;
      sub_1C4ED6604(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v13, &v19);
      v14 = v19;
      *v19 = *v13;
      v15 = *(_OWORD *)(v13 + 1);
      v16 = *(_OWORD *)(v13 + 3);
      *(_OWORD *)(v14 + 5) = *(_OWORD *)(v13 + 5);
      *(_OWORD *)(v14 + 3) = v16;
      *(_OWORD *)(v14 + 1) = v15;
      ++*(_DWORD *)(a1 + 8);
LABEL_19:
      v13 += 7;
      v12 -= 56;
      if (!v12)
        goto LABEL_29;
    }
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(_DWORD *)(a1 + 16);
  if (v17)
  {
    v18 = &result[56 * v17];
    do
    {
      *(_QWORD *)result = -4096;
      *((_QWORD *)result + 1) = -4096;
      *((_QWORD *)result + 2) = -3;
      *(_OWORD *)(result + 24) = 0uLL;
      *(_OWORD *)(result + 40) = 0uLL;
      result += 56;
    }
    while (result != v18);
  }
  return result;
}

char *sub_1C4ED6AA4(char *result)
{
  char *v1;
  int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  char *v13;

  v1 = result;
  v2 = *((_DWORD *)result + 2);
  if (v2)
  {
    v3 = *((_DWORD *)result + 4);
    if (v3 <= 4 * v2 || v3 < 0x41)
    {
LABEL_4:
      if (v3)
      {
        v4 = *(_QWORD *)result;
        v5 = *(_QWORD *)result + 56 * v3;
        do
        {
          *(_QWORD *)v4 = -4096;
          *(_QWORD *)(v4 + 8) = -4096;
          *(_QWORD *)(v4 + 16) = -3;
          *(_OWORD *)(v4 + 24) = 0uLL;
          *(_OWORD *)(v4 + 40) = 0uLL;
          v4 += 56;
        }
        while (v4 != v5);
      }
      *((_QWORD *)result + 1) = 0;
      return result;
    }
    v6 = 1 << (33 - __clz(v2 - 1));
    if (v6 <= 64)
      v7 = 64;
    else
      v7 = v6;
  }
  else
  {
    if (!*((_DWORD *)result + 3))
      return result;
    v3 = *((_DWORD *)result + 4);
    if (v3 <= 0x40)
      goto LABEL_4;
    v7 = 0;
  }
  if (v7 == v3)
  {
    *((_QWORD *)result + 1) = 0;
    v8 = *(_QWORD *)result;
    v9 = *(_QWORD *)result + 56 * v3;
    do
    {
      *(_QWORD *)v8 = -4096;
      *(_QWORD *)(v8 + 8) = -4096;
      *(_QWORD *)(v8 + 16) = -3;
      *(_OWORD *)(v8 + 24) = 0uLL;
      *(_OWORD *)(v8 + 40) = 0uLL;
      v8 += 56;
    }
    while (v8 != v9);
  }
  else
  {
    result = (char *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    if (v7)
    {
      v10 = (4 * v7 / 3u + 1) | ((unint64_t)(4 * v7 / 3u + 1) >> 1);
      v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
      LODWORD(v11) = (((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8)) + 1;
      *((_DWORD *)v1 + 4) = v11;
      result = (char *)operator new(56 * v11, (std::align_val_t)8uLL);
      *(_QWORD *)v1 = result;
      *((_QWORD *)v1 + 1) = 0;
      v12 = *((_DWORD *)v1 + 4);
      if (v12)
      {
        v13 = &result[56 * v12];
        do
        {
          *(_QWORD *)result = -4096;
          *((_QWORD *)result + 1) = -4096;
          *((_QWORD *)result + 2) = -3;
          *(_OWORD *)(result + 24) = 0uLL;
          *(_OWORD *)(result + 40) = 0uLL;
          result += 56;
        }
        while (result != v13);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      *((_DWORD *)v1 + 4) = 0;
    }
  }
  return result;
}

void sub_1C4ED6C3C()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C4ED6C50(llvm::raw_ostream *result, uint64_t a2, llvm::raw_ostream *this)
{
  uint64_t v3;
  int v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  llvm::MemoryPhi *v12;
  _WORD *v13;
  _BYTE *v14;

  v3 = *((_QWORD *)result + 1);
  v4 = *(_DWORD *)(v3 + 40);
  if (v4)
  {
    v6 = *(_QWORD *)(v3 + 24);
    v7 = v4 - 1;
    v8 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v9 = *(_QWORD *)(v6 + 16 * v8);
    if (v9 == a2)
    {
LABEL_6:
      v12 = *(llvm::MemoryPhi **)(v6 + 16 * v8 + 8);
      if (v12)
      {
        v13 = (_WORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v13 > 1uLL)
        {
          *v13 = 8251;
          *((_QWORD *)this + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(this, "; ", 2uLL);
        }
        result = llvm::MemoryAccess::print(v12, (llvm::raw_ostream **)this);
        v14 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v14)
        {
          return llvm::raw_ostream::write(this, "\n", 1uLL);
        }
        else
        {
          *v14 = 10;
          ++*((_QWORD *)this + 4);
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9 != -4096)
      {
        v11 = v8 + v10++;
        v8 = v11 & v7;
        v9 = *(_QWORD *)(v6 + 16 * v8);
        if (v9 == a2)
          goto LABEL_6;
      }
    }
  }
  return result;
}

llvm::raw_ostream *sub_1C4ED6D58(llvm::raw_ostream *result, uint64_t a2, llvm::raw_ostream *this)
{
  uint64_t v3;
  int v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  llvm::MemoryPhi *v12;
  _WORD *v13;
  _BYTE *v14;

  v3 = *((_QWORD *)result + 1);
  v4 = *(_DWORD *)(v3 + 40);
  if (v4)
  {
    v6 = *(_QWORD *)(v3 + 24);
    v7 = v4 - 1;
    v8 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v9 = *(_QWORD *)(v6 + 16 * v8);
    if (v9 == a2)
    {
LABEL_6:
      v12 = *(llvm::MemoryPhi **)(v6 + 16 * v8 + 8);
      if (v12)
      {
        v13 = (_WORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v13 > 1uLL)
        {
          *v13 = 8251;
          *((_QWORD *)this + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(this, "; ", 2uLL);
        }
        result = llvm::MemoryAccess::print(v12, (llvm::raw_ostream **)this);
        v14 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v14)
        {
          return llvm::raw_ostream::write(this, "\n", 1uLL);
        }
        else
        {
          *v14 = 10;
          ++*((_QWORD *)this + 4);
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9 != -4096)
      {
        v11 = v8 + v10++;
        v8 = v11 & v7;
        v9 = *(_QWORD *)(v6 + 16 * v8);
        if (v9 == a2)
          goto LABEL_6;
      }
    }
  }
  return result;
}

void sub_1C4ED6E60()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C4ED6E74(llvm::raw_ostream *result, uint64_t a2, llvm::raw_ostream *this)
{
  uint64_t v3;
  int v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  llvm::MemoryPhi *v12;
  _WORD *v13;
  _BYTE *v14;

  v3 = *((_QWORD *)result + 1);
  v4 = *(_DWORD *)(v3 + 40);
  if (v4)
  {
    v6 = *(_QWORD *)(v3 + 24);
    v7 = v4 - 1;
    v8 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v9 = *(_QWORD *)(v6 + 16 * v8);
    if (v9 == a2)
    {
LABEL_6:
      v12 = *(llvm::MemoryPhi **)(v6 + 16 * v8 + 8);
      if (v12)
      {
        v13 = (_WORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v13 > 1uLL)
        {
          *v13 = 8251;
          *((_QWORD *)this + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(this, "; ", 2uLL);
        }
        result = llvm::MemoryAccess::print(v12, (llvm::raw_ostream **)this);
        v14 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v14)
        {
          return llvm::raw_ostream::write(this, "\n", 1uLL);
        }
        else
        {
          *v14 = 10;
          ++*((_QWORD *)this + 4);
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9 != -4096)
      {
        v11 = v8 + v10++;
        v8 = v11 & v7;
        v9 = *(_QWORD *)(v6 + 16 * v8);
        if (v9 == a2)
          goto LABEL_6;
      }
    }
  }
  return result;
}

llvm::raw_ostream *sub_1C4ED6F7C(llvm::raw_ostream *result, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v3;
  int v4;
  llvm::raw_ostream *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  llvm::MemoryPhi *v13;
  llvm::MemoryPhi *v14;
  _WORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _BYTE *v18;

  v3 = *((_QWORD *)result + 1);
  v4 = *(_DWORD *)(v3 + 40);
  if (v4)
  {
    v6 = result;
    v7 = *(_QWORD *)(v3 + 24);
    v8 = v4 - 1;
    v9 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v10 = *(_QWORD *)(v7 + 16 * v9);
    if (v10 == a2)
    {
LABEL_6:
      v13 = *(llvm::MemoryPhi **)(v7 + 16 * v9 + 8);
      if (v13)
      {
        v14 = (llvm::MemoryPhi *)(*(uint64_t (**)(_QWORD, llvm::MemoryPhi *))(**((_QWORD **)result + 2) + 16))(*((_QWORD *)result + 2), v13);
        v15 = (_WORD *)*((_QWORD *)a3 + 4);
        if (*((_QWORD *)a3 + 3) - (_QWORD)v15 > 1uLL)
        {
          *v15 = 8251;
          *((_QWORD *)a3 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(a3, "; ", 2uLL);
        }
        result = llvm::MemoryAccess::print(v13, (llvm::raw_ostream **)a3);
        if (v14)
        {
          v16 = (_OWORD *)*((_QWORD *)a3 + 4);
          if (*((_QWORD *)a3 + 3) - (_QWORD)v16 > 0xFuLL)
          {
            *v16 = *(_OWORD *)" - clobbered by ";
            *((_QWORD *)a3 + 4) += 16;
          }
          else
          {
            result = llvm::raw_ostream::write(a3, " - clobbered by ", 0x10uLL);
          }
          if (*(llvm::MemoryPhi **)(*((_QWORD *)v6 + 1) + 96) == v14)
          {
            v17 = *((_QWORD *)a3 + 4);
            if ((unint64_t)(*((_QWORD *)a3 + 3) - v17) > 0xA)
            {
              *(_DWORD *)(v17 + 7) = 2037544046;
              *(_QWORD *)v17 = *(_QWORD *)"liveOnEntry";
              *((_QWORD *)a3 + 4) += 11;
            }
            else
            {
              result = llvm::raw_ostream::write(a3, "liveOnEntry", 0xBuLL);
            }
          }
          else
          {
            result = llvm::MemoryAccess::print(v14, (llvm::raw_ostream **)a3);
          }
        }
        v18 = (_BYTE *)*((_QWORD *)a3 + 4);
        if (*((_BYTE **)a3 + 3) == v18)
        {
          return llvm::raw_ostream::write(a3, "\n", 1uLL);
        }
        else
        {
          *v18 = 10;
          ++*((_QWORD *)a3 + 4);
        }
      }
    }
    else
    {
      v11 = 1;
      while (v10 != -4096)
      {
        v12 = v9 + v11++;
        v9 = v12 & v8;
        v10 = *(_QWORD *)(v7 + 16 * v9);
        if (v10 == a2)
          goto LABEL_6;
      }
    }
  }
  return result;
}

uint64_t sub_1C4ED7164(uint64_t a1, __int128 *a2, uint64_t a3, llvm::AAResults *this)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v10;
  int v11;
  int v12;
  unint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  int v18;
  BOOL v19;
  BOOL v20;
  __int128 v21[3];
  char v22;
  _BYTE v23[12];

  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 84)
  {
    v7 = *(_QWORD *)(v5 - 32);
    if (v7)
    {
      if (!*(_BYTE *)(v7 + 16) && *(_QWORD *)(v7 + 24) == *(_QWORD *)(v5 + 72) && (*(_BYTE *)(v7 + 33) & 0x20) != 0)
      {
        v18 = *(_DWORD *)(v7 + 36);
        v19 = (v18 - 126) > 0x26 || ((1 << (v18 - 126)) & 0x6000000001) == 0;
        if (!v19 || (v18 != 244 ? (v20 = v18 == 7) : (v20 = 1), v20))
        {
          v23[0] = 0;
          *(_DWORD *)&v23[4] = 0;
          v23[8] = 1;
          return *(_QWORD *)v23;
        }
      }
    }
  }
  if (!a3)
    goto LABEL_17;
  v8 = *(unsigned __int8 *)(a3 + 16);
  if ((v8 - 33) <= 0x33 && ((1 << (v8 - 33)) & 0x8000000000041) != 0)
  {
    LOBYTE(v10) = llvm::AAResults::getModRefInfo(this, (llvm::Instruction *)v5, (const llvm::CallBase *)a3);
    LOBYTE(v11) = (v10 & 3) != 0;
LABEL_18:
    v23[0] = v11;
    v16 = 0x100000001;
    if ((v10 & 4) == 0)
      v16 = 0x100000003;
    *(_QWORD *)&v23[4] = v16;
    return *(_QWORD *)v23;
  }
  if (v6 != 60 || v8 != 60)
  {
LABEL_17:
    v15 = a2[1];
    v21[0] = *a2;
    v21[1] = v15;
    v21[2] = a2[2];
    v22 = 1;
    v10 = sub_1C4D90C64((uint64_t)this, v5, v21);
    v11 = (v10 >> 1) & 1;
    goto LABEL_18;
  }
  v12 = *(unsigned __int16 *)(a3 + 18);
  v13 = *(unsigned __int16 *)(v5 + 18);
  if ((v12 & 1) != 0 && (v13 & 1) != 0)
    v14 = 1;
  else
    v14 = ((~v12 & 0x380) == 0) | (0xD0uLL >> ((v13 >> 7) & 7));
  v23[0] = v14 & 1;
  *(_DWORD *)&v23[4] = 1;
  v23[8] = 1;
  return *(_QWORD *)v23;
}

_QWORD *sub_1C4ED72E0(_QWORD *a1)
{
  _QWORD *v2;

  MEMORY[0x1CAA32FB4](a1[295], 8);
  v2 = (_QWORD *)a1[5];
  if (v2 != a1 + 7)
    free(v2);
  return a1;
}

_QWORD *sub_1C4ED7324(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = &v4[2 * v3];
      v13 = v4;
      do
      {
        v14 = *v13;
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v15 = *(_DWORD *)(a1 + 16) - 1;
          v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
          v17 = (_QWORD *)(*(_QWORD *)a1 + 16 * v16);
          v18 = *v17;
          if (v14 != *v17)
          {
            v19 = 0;
            v20 = 1;
            while (v18 != -4096)
            {
              if (v19)
                v21 = 0;
              else
                v21 = v18 == -8192;
              if (v21)
                v19 = v17;
              v22 = v16 + v20++;
              v16 = v22 & v15;
              v17 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v22 & v15));
              v18 = *v17;
              if (v14 == *v17)
                goto LABEL_23;
            }
            if (v19)
              v17 = v19;
          }
LABEL_23:
          *v17 = v14;
          v23 = v13[1];
          v13[1] = 0;
          v17[1] = v23;
          ++*(_DWORD *)(a1 + 8);
          v24 = v13[1];
          v13[1] = 0;
          if (v24)
          {
            v27 = v13;
            sub_1C4ED74D0(v24);
            v13 = v27;
          }
        }
        v13 += 2;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v25 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v25)
  {
    v26 = 16 * v25;
    do
    {
      *result = -4096;
      result += 2;
      v26 -= 16;
    }
    while (v26);
  }
  return result;
}

uint64_t sub_1C4ED74D0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  llvm::Value *v4;
  uint64_t v5;
  _QWORD *v6;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 8);
    if (v2 != result)
    {
      do
      {
        v3 = *(_QWORD *)(v2 + 8);
        if (v2)
          v4 = (llvm::Value *)(v2 - 32);
        else
          v4 = 0;
        v5 = *((_QWORD *)v4 + 4);
        v6 = (_QWORD *)*((_QWORD *)v4 + 5);
        *v6 = v5;
        *(_QWORD *)(v5 + 8) = v6;
        *((_QWORD *)v4 + 4) = 0;
        *((_QWORD *)v4 + 5) = 0;
        llvm::Value::deleteValue(v4);
        v2 = v3;
      }
      while (v3 != v1);
    }
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

_QWORD *sub_1C4ED7544(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = &v4[2 * v3];
      v13 = v4;
      do
      {
        v14 = *v13;
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v15 = *(_DWORD *)(a1 + 16) - 1;
          v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
          v17 = (_QWORD *)(*(_QWORD *)a1 + 16 * v16);
          v18 = *v17;
          if (v14 != *v17)
          {
            v19 = 0;
            v20 = 1;
            while (v18 != -4096)
            {
              if (v19)
                v21 = 0;
              else
                v21 = v18 == -8192;
              if (v21)
                v19 = v17;
              v22 = v16 + v20++;
              v16 = v22 & v15;
              v17 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v22 & v15));
              v18 = *v17;
              if (v14 == *v17)
                goto LABEL_23;
            }
            if (v19)
              v17 = v19;
          }
LABEL_23:
          *v17 = v14;
          v23 = v13[1];
          v13[1] = 0;
          v17[1] = v23;
          ++*(_DWORD *)(a1 + 8);
          v24 = v13[1];
          v13[1] = 0;
          if (v24)
          {
            v27 = v13;
            MEMORY[0x1CAA32FC0](v24, 0x20C40A4A59CD2);
            v13 = v27;
          }
        }
        v13 += 2;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v25 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v25)
  {
    v26 = 16 * v25;
    do
    {
      *result = -4096;
      result += 2;
      v26 -= 16;
    }
    while (v26);
  }
  return result;
}

uint64_t **sub_1C4ED7700(uint64_t **result, uint64_t a2)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v2 = result;
  v3 = *result;
  v4 = **result;
  v5 = *(_QWORD *)(v4 + 24);
  v6 = *(unsigned int *)(v4 + 40);
  if (!(_DWORD)v6)
  {
LABEL_7:
    v8 = (uint64_t *)(v5 + 16 * v6);
    goto LABEL_8;
  }
  LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v8 = (uint64_t *)(v5 + 16 * v7);
  v9 = *v8;
  if (*v8 != a2)
  {
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v9 = *(_QWORD *)(v5 + 16 * v7);
      if (v9 == a2)
      {
        v8 = (uint64_t *)(v5 + 16 * v7);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v8 == (uint64_t *)(v5 + 16 * v6))
    v12 = 0;
  else
    v12 = v8[1];
  v13 = *(unsigned int *)(v12 + 16);
  if (v13 <= *(_DWORD *)result[1])
  {
    result = (uint64_t **)sub_1C4774094((llvm::SmallPtrSetImplBase *)result[2], v12);
    if (v14)
    {
      v15 = *(_QWORD *)v12;
      if (!*((_BYTE *)v3 + 16))
        goto LABEL_17;
      v16 = (_QWORD *)v3[3];
      result = (uint64_t **)sub_1C477672C((uint64_t)v16, *(_QWORD *)v12);
      v17 = v16[1];
      v18 = 16;
      if (v17 == *v16)
        v18 = 20;
      if (result != (uint64_t **)(v17 + 8 * *(unsigned int *)((char *)v16 + v18)))
      {
LABEL_17:
        v19 = (uint64_t)v2[3];
        v20 = *(unsigned int *)(v19 + 8);
        if (v20 >= *(_DWORD *)(v19 + 12))
        {
          v29 = (uint64_t)v2[3];
          llvm::SmallVectorBase<unsigned int>::grow_pod(v19, v19 + 16, v20 + 1, 8);
          v19 = v29;
          *(_QWORD *)(*(_QWORD *)v29 + 8 * *(unsigned int *)(v29 + 8)) = v15;
          LODWORD(v20) = *(_DWORD *)(v29 + 8);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v19 + 8 * v20) = v15;
        }
        *(_DWORD *)(v19 + 8) = v20 + 1;
        v21 = (_QWORD *)v3[4];
        result = (uint64_t **)sub_1C477672C((uint64_t)v21, v15);
        v22 = v21[1];
        v23 = 16;
        if (v22 == *v21)
          v23 = 20;
        if (result == (uint64_t **)(v22 + 8 * *(unsigned int *)((char *)v21 + v23)))
        {
          v24 = (uint64_t)v2[4];
          v25 = v13 | ((unint64_t)*(unsigned int *)(v12 + 72) << 32);
          v26 = *(unsigned int *)(v24 + 8);
          if (v26 >= *(_DWORD *)(v24 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v24, v24 + 16, v26 + 1, 16);
            LODWORD(v26) = *(_DWORD *)(v24 + 8);
          }
          v27 = (uint64_t *)(*(_QWORD *)v24 + 16 * v26);
          *v27 = v12;
          v27[1] = v25;
          v28 = (*(_DWORD *)(v24 + 8) + 1);
          *(_DWORD *)(v24 + 8) = v28;
          return (uint64_t **)sub_1C4ED78FC(*(_QWORD *)v24, *(_QWORD *)v24 + 16 * v28, (uint64_t)&v30, v28);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C4ED78FC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = result + 16 * (v4 >> 1);
    v7 = *(_DWORD *)(v6 + 8);
    v8 = *(_DWORD *)(a2 - 8);
    if (v7 >= v8)
    {
      if (v8 < v7)
        return result;
      v9 = *(_DWORD *)(a2 - 4);
      if (*(_DWORD *)(result + 16 * v5 + 12) >= v9)
        return result;
    }
    else
    {
      v9 = *(_DWORD *)(a2 - 4);
    }
    v10 = *(_QWORD *)(a2 - 16);
    *(_QWORD *)(a2 - 16) = *(_QWORD *)v6;
    *(_DWORD *)(a2 - 8) = v7;
    *(_DWORD *)(a2 - 4) = *(_DWORD *)(result + 16 * v5 + 12);
    if (v4 >= 2)
    {
      while (1)
      {
        v12 = v5 - 1;
        v5 = (v5 - 1) >> 1;
        v11 = result + 16 * v5;
        v13 = *(_DWORD *)(v11 + 8);
        if (v13 >= v8 && (v8 < v13 || *(_DWORD *)(result + 16 * v5 + 12) >= v9))
          break;
        *(_QWORD *)v6 = *(_QWORD *)v11;
        *(_DWORD *)(v6 + 8) = v13;
        *(_DWORD *)(v6 + 12) = *(_DWORD *)(v11 + 12);
        v6 = result + 16 * v5;
        if (v12 <= 1)
          goto LABEL_12;
      }
    }
    v11 = v6;
LABEL_12:
    *(_QWORD *)v11 = v10;
    *(_DWORD *)(v11 + 8) = v8;
    *(_DWORD *)(v11 + 12) = v9;
  }
  return result;
}

uint64_t sub_1C4ED79C8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = result;
    v7 = v3 + 1;
    result += 16 * (v3 + 1);
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 >= a3)
      goto LABEL_10;
    v10 = *(_DWORD *)(result + 8);
    v11 = *(_DWORD *)(result + 24);
    if (v10 < v11)
    {
      result += 16;
LABEL_7:
      v3 = v9;
      goto LABEL_10;
    }
    if (v11 >= v10)
    {
      v12 = *(_DWORD *)(v6 + 16 * v7 + 12) < *(_DWORD *)(result + 28);
      result += 16 * v12;
      if (v12)
        goto LABEL_7;
    }
LABEL_10:
    *(_QWORD *)v6 = *(_QWORD *)result;
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(result + 8);
    *(_DWORD *)(v6 + 12) = *(_DWORD *)(result + 12);
  }
  while (v3 <= v5);
  return result;
}

_BYTE *sub_1C4ED7A6C@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  _BYTE *result;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int *v23;
  int v24;
  int *v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int *v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD v47[4];
  _QWORD v48[4];

  v6 = *(_QWORD *)(a2 + 40);
  if (v6 == a2 + 40)
  {
LABEL_60:
    v7 = 0;
    v8 = 0;
    v11 = 0;
  }
  else
  {
    v7 = v6 - 24;
    if (v6)
      v8 = v6 - 24;
    else
      v8 = 0;
    v9 = *(unsigned __int8 *)(v8 + 16);
    v10 = v9 - 29;
    if (v9 == 30)
    {
      if ((*(_DWORD *)(v8 + 20) & 0x7FFFFFF) == 3)
        LODWORD(v11) = 2;
      else
        LODWORD(v11) = 1;
    }
    else
    {
      LODWORD(v11) = 0;
      switch(v10)
      {
        case 0:
        case 5:
        case 6:
          goto LABEL_9;
        case 1:
          __break(1u);
          break;
        case 2:
          LODWORD(v11) = (*(_DWORD *)(v8 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_9;
        case 3:
        case 9:
          break;
        case 4:
          LODWORD(v11) = 2;
          goto LABEL_9;
        case 7:
          LODWORD(v11) = *(_WORD *)(v8 + 18) & 1;
          goto LABEL_9;
        case 8:
          LODWORD(v11) = 1;
          goto LABEL_9;
        case 10:
          LODWORD(v11) = *(_DWORD *)(v8 + 80) + 1;
          goto LABEL_9;
        default:
          goto LABEL_60;
      }
      LODWORD(v11) = (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) - 1;
    }
LABEL_9:
    v11 = v11;
  }
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x800000000;
  v48[0] = v7;
  v48[1] = v11;
  v48[2] = v7;
  v48[3] = v11;
  v47[0] = v8;
  v47[1] = 0;
  v47[2] = v8;
  v47[3] = 0;
  result = (_BYTE *)sub_1C4ED7D94(a3, (uint64_t)v48, (uint64_t)v47);
  v13 = *(char **)a3;
  v14 = *(unsigned int *)(a3 + 8);
  v15 = *(char **)a3;
  if ((_DWORD)v14)
  {
    v16 = 8 * v14;
    v15 = *(char **)a3;
    while (*(_QWORD *)v15)
    {
      v15 += 8;
      v16 -= 8;
      if (!v16)
      {
        v15 = (char *)(*(_QWORD *)a3 + 8 * v14);
        break;
      }
    }
  }
  v17 = (v15 - v13) >> 3;
  v18 = v15 + 8;
  if (v17 != v14 && v18 != (_QWORD *)(*(_QWORD *)a3 + 8 * v14))
  {
    v20 = 8 * v14 - 8 * v17 - 8;
    do
    {
      if (*v18)
      {
        *(_QWORD *)v15 = *v18;
        v15 += 8;
      }
      ++v18;
      v20 -= 8;
    }
    while (v20);
    v13 = *(char **)a3;
  }
  v21 = v15 - v13;
  v22 = (unint64_t)(v15 - v13) >> 3;
  *(_DWORD *)(a3 + 8) = v22;
  v23 = a1 + 2;
  v24 = *a1;
  if ((*a1 & 1) != 0)
  {
    v26 = 4;
    v25 = a1 + 2;
  }
  else
  {
    v25 = (int *)*((_QWORD *)a1 + 1);
    v26 = a1[4];
    if (!v26)
    {
      v27 = 0;
      goto LABEL_37;
    }
  }
  v28 = v26 - 1;
  v29 = (v26 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v30 = &v25[18 * v29];
  result = *(_BYTE **)v30;
  if (*(_QWORD *)v30 != a2)
  {
    v31 = 1;
    while (result != (_BYTE *)-4096)
    {
      v32 = v29 + v31++;
      v29 = v32 & v28;
      v30 = &v25[18 * (v32 & v28)];
      result = *(_BYTE **)v30;
      if (*(_QWORD *)v30 == a2)
        goto LABEL_32;
    }
    if ((v24 & 1) != 0)
    {
      v27 = 4;
      v25 = a1 + 2;
    }
    else
    {
      v25 = (int *)*((_QWORD *)a1 + 1);
      v27 = a1[4];
    }
LABEL_37:
    v30 = &v25[18 * v27];
    if ((v24 & 1) != 0)
      goto LABEL_38;
LABEL_33:
    v23 = (int *)*((_QWORD *)a1 + 1);
    v33 = a1[4];
    goto LABEL_39;
  }
LABEL_32:
  if ((v24 & 1) == 0)
    goto LABEL_33;
LABEL_38:
  v33 = 4;
LABEL_39:
  if (&v23[18 * v33] != v30)
  {
    v34 = v30[4];
    if ((_DWORD)v34)
    {
      v35 = (v21 >> 3);
      v36 = (uint64_t *)*((_QWORD *)v30 + 1);
      v37 = &v36[v34];
      do
      {
        v38 = *v36;
        v39 = 8 * v35;
        v40 = v13;
        v41 = &v13[8 * v35];
        if (v35)
        {
          v42 = 8 * v35;
          v40 = v13;
          while (*(_QWORD *)v40 != v38)
          {
            v40 += 8;
            v42 -= 8;
            if (!v42)
            {
              v40 = &v13[8 * v35];
              break;
            }
          }
        }
        v43 = (v40 - v13) >> 3;
        if (v43 != v35)
        {
          v44 = v40 + 8;
          if (v40 + 8 != v41)
          {
            v45 = v39 - 8 * v43 - 8;
            do
            {
              if (*v44 != v38)
              {
                *(_QWORD *)v40 = *v44;
                v40 += 8;
              }
              ++v44;
              v45 -= 8;
            }
            while (v45);
            v13 = *(char **)a3;
          }
        }
        v46 = v40 - v13;
        v35 = (v46 >> 3);
        ++v36;
      }
      while (v36 != v37);
      v22 = v46 >> 3;
      *(_DWORD *)(a3 + 8) = v35;
    }
    return sub_1C4ECC4B8((unsigned int *)a3, (uint64_t)&v13[8 * v22], *((_BYTE **)v30 + 5), (_BYTE *)(*((_QWORD *)v30 + 5) + 8 * v30[12]));
  }
  return result;
}

uint64_t sub_1C4ED7D94(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  int v14;
  int v15;
  int v16;

  v5 = result;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a3 + 24);
  v8 = v6 - v7;
  v9 = *(unsigned int *)(result + 8);
  v10 = v9 + (int)v6 - (int)v7;
  if (v10 > *(unsigned int *)(result + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, v10, 8);
    v6 = *(_QWORD *)(a2 + 24);
    v7 = *(_QWORD *)(a3 + 24);
    v9 = *(unsigned int *)(v5 + 8);
  }
  if ((_DWORD)v6 != (_DWORD)v7)
  {
    v11 = *(_QWORD *)(a2 + 16);
    v12 = (_QWORD *)(*(_QWORD *)v5 + 8 * v9);
    v13 = *(unsigned __int8 *)(v11 + 16);
    v14 = v6 - 2;
    v15 = 2 * v6 - 1;
    v16 = -(int)v7;
    result = (v13 - 31);
    do
    {
      if (v13 != 30)
        __asm { BR              X6 }
      *v12++ = *(_QWORD *)(v11 - 32 - 32 * (v14-- + 1));
      v15 -= 2;
    }
    while (v16 + v14 != -2);
  }
  *(_DWORD *)(v5 + 8) = v9 + v8;
  return result;
}

void sub_1C4ED7E90()
{
  JUMPOUT(0x1C4ED7E58);
}

uint64_t sub_1C4ED7F2C(uint64_t a1, uint64_t a2)
{
  int v3;

  v3 = dword_1ED7F2C30;
  return sub_1C4ED7FE8(*(_QWORD *)(a1 + 16), a2, &v3, 0);
}

uint64_t sub_1C4ED7F60(uint64_t a1, uint64_t a2, __int128 *a3)
{
  int v4;

  v4 = dword_1ED7F2C30;
  return sub_1C4ED8F7C(*(_QWORD *)(a1 + 16), a2, a3, &v4);
}

void sub_1C4ED7F90(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;

  if (a2)
  {
    v2 = *(unsigned __int8 *)(a2 + 16);
    if ((v2 - 27) >= 0xFFFFFFFE)
    {
      if (v2 == 26)
      {
        *(_DWORD *)(a2 + 92) = -1;
        if (*(_QWORD *)(a2 - 32))
        {
          **(_QWORD **)(a2 - 16) = *(_QWORD *)(a2 - 24);
          v3 = *(_QWORD *)(a2 - 24);
          if (v3)
            *(_QWORD *)(v3 + 16) = *(_QWORD *)(a2 - 16);
        }
        *(_QWORD *)(a2 - 32) = 0;
      }
      else
      {
        *(_DWORD *)(a2 + 88) = -1;
      }
    }
  }
}

uint64_t sub_1C4ED7FE8(uint64_t a1, uint64_t a2, _DWORD *a3, int a4)
{
  uint64_t v4;
  const llvm::Instruction *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  const llvm::Instruction *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t ***v25;
  int v26;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t ****v34;
  uint64_t ***v35;
  uint64_t ****v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t ****v56;
  uint64_t ***v57;
  char v58[8];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t ***v62;
  uint64_t v63;
  int v64;
  char v65;
  char v66;
  __int128 v67;
  _OWORD v68[2];

  v4 = a2;
  if (!a2 || *(unsigned __int8 *)(a2 + 16) - 27 < 0xFFFFFFFE)
    return v4;
  v8 = sub_1C4ED4F94(*(uint64_t ****)(a2 + 72), *(llvm::DominatorTree **)(*(_QWORD *)(a1 + 2392) + 8));
  if (!v8)
  {
    v17 = *(unsigned __int8 *)(v4 + 16);
    if (v17 == 26)
    {
      v18 = *(_QWORD *)(v4 - 32);
      if (!v18)
        goto LABEL_30;
      v19 = (int *)(v4 + 92);
    }
    else
    {
      if (v17 == 25)
        v20 = v4;
      else
        v20 = 0;
      if (v20)
        v21 = (uint64_t *)(v20 - 32);
      else
        v21 = (uint64_t *)(v4 - 64);
      v18 = *v21;
      if (!v18)
        goto LABEL_30;
      v19 = (int *)(v4 + 88);
    }
    v22 = *v19;
    v23 = 72;
    if (*(_BYTE *)(v18 + 16) == 26)
      v23 = 88;
    if (v22 == *(_DWORD *)(v18 + v23))
    {
      if (a4)
      {
        if (v17 == 26)
        {
          v24 = 1;
          goto LABEL_31;
        }
      }
      else if (v17 == 26)
      {
        return *(_QWORD *)(v4 - 32);
      }
      if (v17 == 25)
        v49 = v4;
      else
        v49 = 0;
      if (v49)
        v50 = v49 - 32;
      else
        v50 = v4 - 64;
      return *(_QWORD *)v50;
    }
LABEL_30:
    v24 = 0;
LABEL_31:
    v25 = *(uint64_t ****)(v4 + 72);
    v26 = *((unsigned __int8 *)v25 + 16);
    if ((v26 - 37) <= 0x2B && ((1 << (v26 - 37)) & 0x80004000001) != 0)
      return v4;
    v58[0] = ((v26 - 33) < 0x34) & (0x8000000000041uLL >> (v26 - 33));
    *(_QWORD *)&v59 = 0;
    *((_QWORD *)&v59 + 1) = -1;
    v60 = 0u;
    v61 = 0u;
    v62 = v25;
    v63 = v4;
    v64 = 1;
    v65 = 1;
    v66 = 0;
    if ((((v26 - 33) < 0x34) & (0x8000000000041uLL >> (v26 - 33))) == 0)
    {
      llvm::MemoryLocation::getOrNone(v25, (uint64_t)&v67);
      v59 = v67;
      v60 = v68[0];
      v61 = v68[1];
      v26 = *((unsigned __int8 *)v25 + 16);
    }
    if (v26 != 60)
      goto LABEL_67;
    v28 = *(_QWORD *)(a1 + 8);
    if ((*((_DWORD *)v25 + 5) & 0x20000000) == 0)
    {
LABEL_54:
      v43 = (uint64_t)*(v25 - 4);
      sub_1C4768AD0(v25[5][7][5] + 272, (uint64_t)*v25);
      if (v45 == 1)
        v46 = -2;
      else
        v46 = (unint64_t)(v44 + 7) >> 3;
      llvm::Instruction::getAAMetadata(v25, v68);
      *(_QWORD *)&v67 = v43;
      *((_QWORD *)&v67 + 1) = v46;
      if ((llvm::AAResults::pointsToConstantMemory(v28, (uint64_t)&v67, 0) & 1) != 0)
      {
LABEL_58:
        v47 = *(_QWORD *)(*(_QWORD *)(a1 + 2392) + 96);
        v48 = *(unsigned __int8 *)(v4 + 16);
LABEL_79:
        if (v48 == 26)
          sub_1C4ED3D74(v4, v47);
        else
          sub_1C4ED3DE4(v4, v47);
        *(_QWORD *)(v4 + 80) = 0;
        return v47;
      }
LABEL_67:
      v48 = *(unsigned __int8 *)(v4 + 16);
      if ((v24 & 1) != 0)
      {
        if (v48 == 26)
        {
          v47 = *(_QWORD *)(v4 - 32);
        }
        else
        {
          if (v48 == 25)
            v53 = v4;
          else
            v53 = 0;
          if (v53)
            v54 = (uint64_t *)(v53 - 32);
          else
            v54 = (uint64_t *)(v4 - 64);
          v47 = *v54;
        }
      }
      else
      {
        if (v48 == 25)
          v51 = v4;
        else
          v51 = 0;
        if (v51)
          v52 = (uint64_t *)(v51 - 32);
        else
          v52 = (uint64_t *)(v4 - 64);
        v47 = *v52;
        if (*(_QWORD *)(*(_QWORD *)(a1 + 2392) + 96) == *v52)
          goto LABEL_79;
        v47 = sub_1C4ED84DC(a1, v47, (uint64_t)v58, a3);
        if (*(_BYTE *)(v4 + 16) == 26)
          sub_1C4ED3D74(v4, v47);
        else
          sub_1C4ED3DE4(v4, v47);
        if (*(_QWORD *)(*(_QWORD *)(a1 + 2392) + 96) == v47)
        {
          *(_QWORD *)(v4 + 80) = 0;
        }
        else if (v65 && v64 == 3)
        {
          *(_QWORD *)(v4 + 80) = 0x100000003;
        }
      }
      if (a4 && *(_BYTE *)(v47 + 16) == 27 && *(_BYTE *)(v4 + 16) == 26 && *a3)
      {
        v66 = 1;
        return sub_1C4ED84DC(a1, v47, (uint64_t)v58, a3);
      }
      return v47;
    }
    v29 = ***v25;
    *(_QWORD *)&v67 = v25;
    v30 = *(_DWORD *)(v29 + 2496);
    if (v30)
    {
      v31 = *(_QWORD *)(v29 + 2480);
      v32 = v30 - 1;
      v33 = v32 & ((v25 >> 4) ^ (v25 >> 9));
      v34 = (uint64_t ****)(v31 + 40 * v33);
      v35 = *v34;
      if (*v34 == v25)
      {
LABEL_50:
        v40 = *((unsigned int *)v34 + 4);
        if ((_DWORD)v40)
        {
          v41 = v34[1] + 1;
          v42 = 16 * v40;
          while (*((_DWORD *)v41 - 2) != 6)
          {
            v41 += 2;
            v42 -= 16;
            if (!v42)
              goto LABEL_54;
          }
          if (*v41)
            goto LABEL_58;
        }
        goto LABEL_54;
      }
      v36 = 0;
      v37 = 1;
      while (v35 != (uint64_t ***)-4096)
      {
        if (v36)
          v38 = 0;
        else
          v38 = v35 == (uint64_t ***)-8192;
        if (v38)
          v36 = v34;
        v39 = v33 + v37++;
        v33 = v39 & v32;
        v34 = (uint64_t ****)(v31 + 40 * v33);
        v35 = *v34;
        if (*v34 == v25)
          goto LABEL_50;
      }
      if (v36)
        v56 = v36;
      else
        v56 = v34;
    }
    else
    {
      v56 = 0;
    }
    v34 = (uint64_t ****)sub_1C541AB24(v29 + 2480, (uint64_t)&v67, (uint64_t *)&v67, v56);
    v57 = (uint64_t ***)v67;
    v34[3] = 0;
    v34[4] = 0;
    *v34 = v57;
    v34[1] = (uint64_t ***)(v34 + 3);
    v34[2] = (uint64_t ***)0x100000000;
    goto LABEL_50;
  }
  v9 = *(_QWORD *)(a1 + 2392);
  v10 = *(_DWORD *)(v9 + 40);
  if (v10)
  {
    v11 = *(_QWORD *)(v9 + 24);
    v12 = v10 - 1;
    v13 = (v10 - 1) & ((v8 >> 4) ^ (v8 >> 9));
    v14 = *(const llvm::Instruction **)(v11 + 16 * v13);
    if (v8 == v14)
    {
LABEL_9:
      v4 = *(_QWORD *)(v11 + 16 * v13 + 8);
      goto LABEL_11;
    }
    v15 = 1;
    while (v14 != (const llvm::Instruction *)-4096)
    {
      v16 = v13 + v15++;
      v13 = v16 & v12;
      v14 = *(const llvm::Instruction **)(v11 + 16 * v13);
      if (v8 == v14)
        goto LABEL_9;
    }
  }
  v4 = 0;
LABEL_11:
  if (*(_BYTE *)(v4 + 16) == 25)
    return *(_QWORD *)(v4 - 32);
  return v4;
}

uint64_t sub_1C4ED84DC(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t *v5;
  __int128 v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  int v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  _OWORD *v61;
  unsigned int v62;
  uint64_t *v63;
  unsigned int *v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  __int128 v72;
  uint64_t v73;
  int v74;
  unsigned __int8 *v75;
  unsigned __int8 **v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  _OWORD *v82;
  unsigned int v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t *v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  unint64_t v95;
  uint64_t *v96;
  int v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  _OWORD v101[3];
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  char v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  void *v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  void *v117;
  uint64_t v118;
  _BYTE v119[64];
  unsigned int *v120;
  uint64_t v121;
  _BYTE v122[32];
  unsigned int *v123;
  uint64_t v124;
  _QWORD v125[11];

  v5 = (uint64_t *)a2;
  v125[8] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a4;
  if (!*a4)
    *a4 = 1;
  if (a2 && *(_BYTE *)(a2 + 16) == 25)
    v5 = *(uint64_t **)(a2 - 32);
  v7 = *(_OWORD *)(a3 + 24);
  v101[0] = *(_OWORD *)(a3 + 8);
  v101[1] = v7;
  v101[2] = *(_OWORD *)(a3 + 40);
  v102 = v5;
  v103 = v5;
  v104 = 0;
  sub_1C4ED8E20((uint64_t)&v98, a1, (uint64_t)v101, 0, 0);
  if (v99)
  {
    v8 = v98;
    *(_QWORD *)(a3 + 72) = v100;
    return v8;
  }
  v9 = (__int128 *)(a3 + 8);
  v10 = v103;
  v11 = *(_DWORD *)(a1 + 48);
  if (v11 >= *(_DWORD *)(a1 + 52))
  {
    v93 = *(_OWORD *)(a3 + 24);
    v107 = *v9;
    v108 = v93;
    v109 = *(_OWORD *)(a3 + 40);
    v110 = v5;
    v111 = v103;
    v112 = 0;
    sub_1C4ED6270(a1 + 40, (unint64_t)&v107);
    v15 = *(_DWORD *)(a1 + 48);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 40) + 72 * v11;
    v13 = *v9;
    v14 = *(_OWORD *)(a3 + 40);
    *(_OWORD *)(v12 + 16) = *(_OWORD *)(a3 + 24);
    *(_OWORD *)(v12 + 32) = v14;
    *(_OWORD *)v12 = v13;
    *(_QWORD *)(v12 + 48) = v5;
    *(_QWORD *)(v12 + 56) = v10;
    *(_QWORD *)(v12 + 64) = 0;
    v15 = *(_DWORD *)(a1 + 48) + 1;
    *(_DWORD *)(a1 + 48) = v15;
  }
  v95 = v15;
  v123 = (unsigned int *)v125;
  v124 = 0x1000000000;
  v120 = (unsigned int *)v122;
  v121 = 0x800000000;
  v117 = v119;
  v118 = 0x400000000;
  sub_1C4ED6018(a1, (uint64_t)v10, (uint64_t)&v123, 0);
  while (2)
  {
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_QWORD *)(v16 + 24);
    v18 = *(unsigned int *)(v16 + 40);
    if (!(_DWORD)v18)
    {
LABEL_17:
      v21 = (uint64_t *)(v17 + 16 * v18);
      goto LABEL_18;
    }
    v19 = v10[8];
    LODWORD(v20) = (v18 - 1) & ((v19 >> 4) ^ (v19 >> 9));
    v21 = (uint64_t *)(v17 + 16 * v20);
    v22 = *v21;
    if (v19 != *v21)
    {
      v23 = 1;
      while (v22 != -4096)
      {
        v24 = v20 + v23++;
        v20 = v24 & (v18 - 1);
        v22 = *(_QWORD *)(v17 + 16 * v20);
        if (v19 == v22)
        {
          v21 = (uint64_t *)(v17 + 16 * v20);
          goto LABEL_18;
        }
      }
      goto LABEL_17;
    }
LABEL_18:
    v25 = *(_QWORD *)a1;
    v26 = *(unsigned __int8 **)(*(_QWORD *)a1 + 96);
    v27 = *(_QWORD **)(v21[1] + 8);
    if (!v27)
      goto LABEL_29;
    v28 = *(_QWORD *)(v25 + 72);
    v29 = *(unsigned int *)(v25 + 88);
    v30 = v29 - 1;
    while (1)
    {
      if ((_DWORD)v29)
      {
        LODWORD(v31) = ((*v27 >> 4) ^ (*v27 >> 9)) & v30;
        v32 = (uint64_t *)(v28 + 16 * v31);
        v33 = *v32;
        if (*v27 != *v32)
        {
          v34 = 1;
          while (v33 != -4096)
          {
            v35 = v31 + v34++;
            v31 = v35 & v30;
            v33 = *(_QWORD *)(v28 + 16 * v31);
            if (*v27 == v33)
            {
              v32 = (uint64_t *)(v28 + 16 * v31);
              goto LABEL_26;
            }
          }
          goto LABEL_28;
        }
LABEL_26:
        if (v32 != (uint64_t *)(v28 + 16 * v29))
        {
          v36 = (_QWORD *)v32[1];
          if (v36)
            break;
        }
      }
LABEL_28:
      v27 = (_QWORD *)v27[1];
      if (!v27)
        goto LABEL_29;
    }
    if (*v36)
      v26 = (unsigned __int8 *)(*v36 - 48);
    else
      v26 = 0;
LABEL_29:
    v37 = 0;
    while (2)
    {
      if ((_DWORD)v124)
      {
        v38 = v123[v124 - 1];
        LODWORD(v124) = v124 - 1;
        v39 = *(_QWORD *)(a1 + 40) + 72 * v38;
        v40 = *(void **)(v39 + 56);
        v113 = v40;
        v114 = *(_OWORD *)v39;
        v115 = *(_OWORD *)(v39 + 16);
        v116 = *(_OWORD *)(v39 + 32);
        v105 = 0;
        if (sub_1C4ED6604(*(_QWORD *)(a1 + 2360), *(_DWORD *)(a1 + 2376), (uint64_t *)&v113, &v105))
        {
          if (*(_BYTE *)(a1 + 2384))
            goto LABEL_109;
        }
        else
        {
          v41 = sub_1C4ED67D4(a1 + 2360, (uint64_t *)&v113, v105);
          *v41 = (uint64_t)v40;
          *(_OWORD *)(v41 + 1) = v114;
          *(_OWORD *)(v41 + 3) = v115;
          *(_OWORD *)(v41 + 5) = v116;
          v42 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v42 + 80)
            && *(_QWORD *)v39 == *(_QWORD *)(v42 + 8)
            && *(_QWORD *)(v39 + 8) == *(_QWORD *)(v42 + 16)
            && *(_QWORD *)(v39 + 16) == *(_QWORD *)(v42 + 24)
            && *(_QWORD *)(v39 + 24) == *(_QWORD *)(v42 + 32)
            && *(_QWORD *)(v39 + 32) == *(_QWORD *)(v42 + 40)
            && *(_QWORD *)(v39 + 40) == *(_QWORD *)(v42 + 48))
          {
            v43 = *(void **)(v42 + 64);
          }
          else
          {
            v43 = 0;
          }
          sub_1C4ED8E20((uint64_t)&v113, a1, v39, (uint64_t)v26, (uint64_t)v43);
          v44 = v113;
          if ((_BYTE)v114)
          {
            if (llvm::MemorySSA::dominates(*(_QWORD *)a1, (uint64_t)v113, (uint64_t)v26))
            {
              v45 = v118;
              if (v118 >= (unint64_t)HIDWORD(v118))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, (uint64_t)v119, v118 + 1, 16);
                v45 = v118;
              }
              v46 = (char *)v117 + 16 * v45;
              *v46 = v44;
              v46[1] = v38;
              LODWORD(v118) = v118 + 1;
              goto LABEL_46;
            }
            v37 = 1;
            v97 = v38;
            v47 = 1;
LABEL_47:
            if (v47 == 1)
            {
              LODWORD(v38) = v97;
              if (v37)
              {
LABEL_109:
                LODWORD(v78) = v38;
                v79 = *(_QWORD *)(a1 + 40);
                while (1)
                {
                  v80 = v78;
                  if (v95 > v78)
                    break;
                  v78 = *(_QWORD *)(v79 + 72 * v78 + 64);
                  if ((v78 & 0xFF00000000) == 0)
                  {
                    v80 = v78;
                    break;
                  }
                }
                *(_QWORD *)&v107 = *(_QWORD *)(v79 + 72 * v80 + 56);
                *((_QWORD *)&v107 + 1) = v78;
                *(_QWORD *)&v108 = &v109;
                *((_QWORD *)&v108 + 1) = 0x400000000;
                goto LABEL_114;
              }
              break;
            }
            continue;
          }
          if (v113 != v26 && v113 != v43)
          {
            sub_1C4ED6018(a1, (uint64_t)v113, (uint64_t)&v123, v38);
            v47 = 0;
            goto LABEL_47;
          }
          if (v113 != v43)
          {
            v48 = v121;
            if (v121 >= (unint64_t)HIDWORD(v121))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, (uint64_t)v122, v121 + 1, 4);
              v48 = v121;
            }
            v120[v48] = v38;
            LODWORD(v121) = v121 + 1;
          }
        }
LABEL_46:
        v47 = 2;
        goto LABEL_47;
      }
      break;
    }
    if ((_DWORD)v121)
    {
      v96 = v10;
      v10 = 0;
      v113 = (char *)&v114 + 8;
      *(_QWORD *)&v114 = 0x400000000;
      v49 = 4 * v121;
      v50 = v120;
      do
      {
        v51 = (uint64_t *)*v50;
        sub_1C4ED8E20((uint64_t)&v105, a1, *(_QWORD *)(a1 + 40) + 72 * v51, 0, 0);
        v52 = v105;
        if (v106)
        {
          v53 = v114;
          if (v114 >= (unint64_t)DWORD1(v114))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, (uint64_t)&v114 + 8, v114 + 1, 16);
            v53 = v114;
          }
          v54 = (uint64_t **)((char *)v113 + 16 * v53);
          *v54 = v52;
          v54[1] = v51;
          LODWORD(v114) = v114 + 1;
        }
        else
        {
          v10 = v105;
        }
        ++v50;
        v49 -= 4;
      }
      while (v49);
      if ((_DWORD)v118)
      {
        if (!v10)
        {
          if (v26)
          {
            do
            {
              v10 = (uint64_t *)v26;
              v74 = v26[16];
              if ((v74 - 27) < 0xFFFFFFFE)
                break;
              v75 = v74 == 25 ? v26 : 0;
              v76 = (unsigned __int8 **)(v75 ? v75 - 32 : v26 - 64);
              v26 = *v76;
            }
            while (*v76);
          }
          else
          {
            v10 = 0;
          }
        }
        v55 = v10[8];
        v56 = (char *)v117;
        v57 = 16 * v118;
        do
        {
          if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*(_QWORD *)(a1 + 16), v55, *(_QWORD *)(*(_QWORD *)v56 + 64)))
          {
            v58 = *(_OWORD *)v56;
            v59 = v114;
            if (v114 >= (unint64_t)DWORD1(v114))
            {
              v94 = *(_OWORD *)v56;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, (uint64_t)&v114 + 8, v114 + 1, 16);
              v58 = v94;
              v59 = v114;
            }
            *((_OWORD *)v113 + v59) = v58;
            LODWORD(v114) = v114 + 1;
          }
          v56 += 16;
          v57 -= 16;
        }
        while (v57);
      }
      v60 = v114;
      if ((_DWORD)v114)
      {
        v61 = v113;
        if ((_DWORD)v114 == 1)
        {
          v62 = 1;
          v63 = (uint64_t *)v113;
        }
        else
        {
          v67 = (uint64_t *)((char *)v113 + 16);
          v68 = 16 * v114 - 16;
          v63 = (uint64_t *)v113;
          v69 = (uint64_t *)((char *)v113 + 16);
          do
          {
            v70 = *v69;
            v69 += 2;
            if (!llvm::MemorySSA::dominates(*(_QWORD *)a1, v70, *v63))
              v63 = v67;
            v67 = v69;
            v68 -= 16;
          }
          while (v68);
          v61 = v113;
          v62 = v114;
        }
        v71 = (uint64_t *)&v61[v62 - 1];
        v10 = v96;
        if (v71 == v63)
        {
          v73 = v62;
        }
        else
        {
          v72 = *(_OWORD *)v71;
          *(_OWORD *)v71 = *(_OWORD *)v63;
          *(_OWORD *)v63 = v72;
          v61 = v113;
          v73 = v114;
          v62 = v114;
        }
        v77 = v61[v73 - 1];
        LODWORD(v114) = v62 - 1;
        v107 = v77;
        sub_1C4ED61B0((uint64_t)&v108, (uint64_t)&v113);
      }
      else
      {
        v95 = *(unsigned int *)(a1 + 48);
        LODWORD(v124) = 0;
        if ((_DWORD)v121)
        {
          v64 = v120;
          v65 = 4 * v121;
          do
          {
            v66 = *v64++;
            sub_1C4ED6018(a1, (uint64_t)v10, (uint64_t)&v123, v66);
            v65 -= 4;
          }
          while (v65);
        }
        LODWORD(v121) = 0;
      }
      if (v113 != (char *)&v114 + 8)
        free(v113);
      if (!v60)
        continue;
    }
    else
    {
      v82 = v117;
      v83 = v118;
      if ((_DWORD)v118 == 1)
      {
        v84 = (uint64_t *)v117;
      }
      else
      {
        v85 = (uint64_t *)((char *)v117 + 16);
        v86 = 16 * v118 - 16;
        v84 = (uint64_t *)v117;
        v87 = (uint64_t *)((char *)v117 + 16);
        do
        {
          v88 = *v87;
          v87 += 2;
          if (!llvm::MemorySSA::dominates(*(_QWORD *)a1, v88, *v84))
            v84 = v85;
          v85 = v87;
          v86 -= 16;
        }
        while (v86);
        v82 = v117;
        v83 = v118;
      }
      v89 = (uint64_t *)&v82[v83 - 1];
      if (v89 == v84)
      {
        v91 = v83;
      }
      else
      {
        v90 = *(_OWORD *)v89;
        *(_OWORD *)v89 = *(_OWORD *)v84;
        *(_OWORD *)v84 = v90;
        v82 = v117;
        v91 = v118;
        v83 = v118;
      }
      v92 = v82[v91 - 1];
      LODWORD(v118) = v83 - 1;
      v107 = v92;
      sub_1C4ED61B0((uint64_t)&v108, (uint64_t)&v117);
    }
    break;
  }
LABEL_114:
  if (v117 != v119)
    free(v117);
  if (v120 != (unsigned int *)v122)
    free(v120);
  if (v123 != (unsigned int *)v125)
    free(v123);
  *(_DWORD *)(a1 + 48) = 0;
  sub_1C4ED6AA4((char *)(a1 + 2360));
  *(_BYTE *)(a1 + 2384) = 0;
  v8 = v107;
  if ((__int128 *)v108 != &v109)
    free((void *)v108);
  return v8;
}

uint64_t sub_1C4ED8E20(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  int v16;
  uint64_t v17;
  uint64_t *v18;

  v9 = result;
  v10 = *(int **)(a2 + 32);
  v11 = *v10;
  if (!*v10)
    *v10 = 1;
  v12 = *(_QWORD *)(a3 + 56);
  if (v12)
  {
    while (1)
    {
      *(_QWORD *)(a3 + 56) = v12;
      if (v12 == a4 || v12 == a5)
      {
        *(_QWORD *)v9 = v12;
        goto LABEL_22;
      }
      v13 = *(unsigned __int8 *)(v12 + 16);
      if (v13 == 26)
      {
        if (*(_QWORD *)(*(_QWORD *)a2 + 96) == v12)
        {
          *(_QWORD *)v9 = v12;
          *(_BYTE *)(v9 + 8) = 1;
          *(_DWORD *)(v9 + 12) = 3;
          goto LABEL_24;
        }
        v14 = *(_DWORD **)(a2 + 32);
        if ((*v14)-- == 1)
        {
          *(_QWORD *)v9 = v12;
          *(_BYTE *)(v9 + 8) = 1;
          goto LABEL_23;
        }
        result = sub_1C4ED7164(v12, (__int128 *)a3, *(_QWORD *)(*(_QWORD *)(a2 + 24) + 56), *(llvm::AAResults **)(a2 + 8));
        if ((result & 1) != 0)
        {
          *(_QWORD *)v9 = v12;
          *(_BYTE *)(v9 + 8) = 1;
          *(_DWORD *)(v9 + 12) = HIDWORD(result);
          *(_DWORD *)(v9 + 16) = v16;
          return result;
        }
        v13 = *(unsigned __int8 *)(v12 + 16);
      }
      if ((v13 - 27) >= 0xFFFFFFFE)
      {
        v17 = v13 == 25 ? v12 : 0;
        v18 = (uint64_t *)(v17 ? v17 - 32 : v12 - 64);
        v12 = *v18;
        if (*v18)
          continue;
      }
      break;
    }
  }
  if (!v11)
    **(_DWORD **)(a2 + 32) = 0;
  *(_QWORD *)v9 = *(_QWORD *)(a3 + 56);
LABEL_22:
  *(_BYTE *)(v9 + 8) = 0;
LABEL_23:
  *(_DWORD *)(v9 + 12) = 1;
LABEL_24:
  *(_BYTE *)(v9 + 16) = 1;
  return result;
}

uint64_t sub_1C4ED8F7C(uint64_t a1, uint64_t a2, __int128 *a3, _DWORD *a4)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;
  _BYTE v10[8];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  char v18;

  if (!a2
    || *(unsigned __int8 *)(a2 + 16) - 27 < 0xFFFFFFFE
    || *(_QWORD *)(*(_QWORD *)(a1 + 2392) + 96) != a2
    && ((v4 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 72) + 16) - 37,
         v5 = v4 > 0x2B,
         v6 = (1 << v4) & 0x80004000001,
         !v5)
      ? (v7 = v6 == 0)
      : (v7 = 1),
        v7))
  {
    v16 = 1;
    v17 = 1;
    v18 = 0;
    v8 = a3[1];
    v11 = *a3;
    v12 = v8;
    v13 = a3[2];
    v14 = 0;
    v15 = a2;
    v10[0] = 0;
    return sub_1C4ED84DC(a1, a2, (uint64_t)v10, a4);
  }
  return a2;
}

uint64_t sub_1C4ED9020(uint64_t a1, uint64_t a2)
{
  int v3;

  v3 = dword_1ED7F2C30;
  return sub_1C4ED7FE8(*(_QWORD *)(a1 + 16), a2, &v3, 1);
}

void sub_1C4ED9054(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;

  if (a2)
  {
    v2 = *(unsigned __int8 *)(a2 + 16);
    if ((v2 - 27) >= 0xFFFFFFFE)
    {
      if (v2 == 26)
      {
        *(_DWORD *)(a2 + 92) = -1;
        if (*(_QWORD *)(a2 - 32))
        {
          **(_QWORD **)(a2 - 16) = *(_QWORD *)(a2 - 24);
          v3 = *(_QWORD *)(a2 - 24);
          if (v3)
            *(_QWORD *)(v3 + 16) = *(_QWORD *)(a2 - 16);
        }
        *(_QWORD *)(a2 - 32) = 0;
      }
      else
      {
        *(_DWORD *)(a2 + 88) = -1;
      }
    }
  }
}

_QWORD *sub_1C4ED90AC(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C4964094(a1, v7);
      v17 = 0;
      sub_1C4926528(a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C4964094(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C4ED91DC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 0;
      v13 = v10 - 1;
      v14 = v4;
      do
      {
        v15 = *v14;
        if ((*v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v16 = ((v15 >> 4) ^ (v15 >> 9)) & v13;
          v17 = (_QWORD *)(*(_QWORD *)a1 + 16 * v16);
          v18 = *v17;
          if (v15 != *v17)
          {
            v19 = 0;
            v20 = 1;
            while (v18 != -4096)
            {
              if (v19)
                v21 = 0;
              else
                v21 = v18 == -8192;
              if (v21)
                v19 = v17;
              v22 = v16 + v20++;
              v16 = v22 & v13;
              v17 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v22 & v13));
              v18 = *v17;
              if (v15 == *v17)
                goto LABEL_23;
            }
            if (v19)
              v17 = v19;
          }
LABEL_23:
          v23 = v14[1];
          *v17 = v15;
          v17[1] = v23;
          *(_DWORD *)(a1 + 8) = ++v12;
        }
        v14 += 2;
      }
      while (v14 != &v4[2 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v24 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v24)
  {
    v25 = 16 * v24;
    do
    {
      *result = -4096;
      result += 2;
      v25 -= 16;
    }
    while (v25);
  }
  return result;
}

void sub_1C4ED934C(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;

  if (a2)
  {
    v2 = *(unsigned __int8 *)(a2 + 16);
    if ((v2 - 27) >= 0xFFFFFFFE)
    {
      if (v2 == 26)
      {
        *(_DWORD *)(a2 + 92) = -1;
        if (*(_QWORD *)(a2 - 32))
        {
          **(_QWORD **)(a2 - 16) = *(_QWORD *)(a2 - 24);
          v3 = *(_QWORD *)(a2 - 24);
          if (v3)
            *(_QWORD *)(v3 + 16) = *(_QWORD *)(a2 - 16);
        }
        *(_QWORD *)(a2 - 32) = 0;
      }
      else
      {
        *(_DWORD *)(a2 + 88) = -1;
      }
    }
  }
}

uint64_t sub_1C4ED93A4(uint64_t a1, uint64_t a2, __int128 *a3, _DWORD *a4)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;
  _BYTE v10[8];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  char v18;

  if (!a2
    || *(unsigned __int8 *)(a2 + 16) - 27 < 0xFFFFFFFE
    || *(_QWORD *)(*(_QWORD *)(a1 + 2392) + 96) != a2
    && ((v4 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 72) + 16) - 37,
         v5 = v4 > 0x2B,
         v6 = (1 << v4) & 0x80004000001,
         !v5)
      ? (v7 = v6 == 0)
      : (v7 = 1),
        v7))
  {
    v16 = 1;
    v17 = 1;
    v18 = 0;
    v8 = a3[1];
    v11 = *a3;
    v12 = v8;
    v13 = a3[2];
    v14 = 0;
    v15 = a2;
    v10[0] = 0;
    return sub_1C4ED53F8(a1, a2, (uint64_t)v10, a4);
  }
  return a2;
}

void sub_1C4ED9448(llvm::raw_ostream **a1, uint64_t a2)
{
  uint64_t ***v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ****v9;
  uint64_t ***v10;
  int v11;
  int v12;
  unint64_t *v13;
  std::string::size_type v14;
  const void *v15;
  unint64_t v16;
  std::string *p_dst;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type v23;
  char v24;
  int v25;
  uint64_t v26;
  llvm::raw_ostream *v27;
  uint64_t v28;
  char *v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  std::string *v33;
  size_t size;
  _DWORD *v35;
  char v36;
  int v37;
  uint64_t v38;
  llvm::raw_ostream *v39;
  _QWORD *v40;
  std::string *v41;
  size_t v42;
  uint64_t v43;
  llvm::raw_ostream *v44;
  void *v45;
  llvm::raw_ostream *v46;
  _QWORD *v47;
  std::string *v48;
  size_t v49;
  uint64_t v50;
  llvm::raw_ostream *v51;
  llvm::raw_ostream *v52;
  _BYTE *v53;
  void *__p[2];
  uint64_t v55;
  std::string __dst;
  std::string v57;

  v4 = **(uint64_t *****)a1[1];
  if ((*((_BYTE *)v4 + 23) & 0x10) == 0)
  {
    v14 = 0;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
    p_dst = &__dst;
    goto LABEL_17;
  }
  v5 = ***v4;
  v6 = *(_QWORD *)(v5 + 152);
  v7 = *(unsigned int *)(v5 + 168);
  if ((_DWORD)v7)
  {
    LODWORD(v8) = (v7 - 1) & ((v4 >> 4) ^ (v4 >> 9));
    v9 = (uint64_t ****)(v6 + 16 * v8);
    v10 = *v9;
    if (*v9 == v4)
      goto LABEL_9;
    v11 = 1;
    while (v10 != (uint64_t ***)-4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v10 = *(uint64_t ****)(v6 + 16 * v8);
      if (v10 == v4)
      {
        v9 = (uint64_t ****)(v6 + 16 * v8);
        goto LABEL_9;
      }
    }
  }
  v9 = (uint64_t ****)(v6 + 16 * v7);
LABEL_9:
  v13 = (unint64_t *)v9[1];
  v16 = *v13;
  v15 = v13 + 2;
  v14 = v16;
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v14 >= 0x17)
  {
    v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v18 = v14 | 7;
    v19 = v18 + 1;
    p_dst = (std::string *)operator new(v18 + 1);
    __dst.__r_.__value_.__l.__size_ = v14;
    __dst.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_16;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14;
  p_dst = &__dst;
  if (v14)
LABEL_16:
    memmove(p_dst, v15, v14);
LABEL_17:
  p_dst->__r_.__value_.__s.__data_[v14] = 0;
  v20 = std::string::insert(&__dst, 0, "MSSA CFG for '");
  v21 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v57, "' function");
  v23 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v55 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v24 = *(_BYTE *)(a2 + 23);
  v25 = v24;
  v26 = v24 & 0x7F;
  if (v25 < 0)
    v26 = *(_QWORD *)(a2 + 8);
  if (v26)
  {
    v27 = *a1;
    v28 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v28) > 8)
    {
      *(_BYTE *)(v28 + 8) = 34;
      *(_QWORD *)v28 = *(_QWORD *)"digraph \"";
      *((_QWORD *)v27 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(*a1, "digraph \"", 9uLL);
    }
    v29 = (char *)a2;
  }
  else
  {
    v30 = __p[1];
    if (v55 >= 0)
      v30 = (void *)(HIBYTE(v55) & 0x7F);
    v27 = *a1;
    v31 = *((_QWORD *)*a1 + 4);
    v32 = *((_QWORD *)*a1 + 3) - v31;
    if (!v30)
    {
      if (v32 > 0x11)
      {
        *(_WORD *)(v31 + 16) = 2683;
        *(_OWORD *)v31 = *(_OWORD *)"digraph unnamed {\n";
        *((_QWORD *)v27 + 4) += 18;
      }
      else
      {
        llvm::raw_ostream::write(*a1, "digraph unnamed {\n", 0x12uLL);
      }
      goto LABEL_45;
    }
    if (v32 > 8)
    {
      *(_BYTE *)(v31 + 8) = 34;
      *(_QWORD *)v31 = *(_QWORD *)"digraph \"";
      *((_QWORD *)v27 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(*a1, "digraph \"", 9uLL);
    }
    v29 = (char *)__p;
  }
  llvm::DOT::EscapeString(v29, &v57);
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = &v57;
  else
    v33 = (std::string *)v57.__r_.__value_.__r.__words[0];
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v57.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v57.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(v27, (const char *)v33, size);
  v35 = (_DWORD *)*((_QWORD *)v27 + 4);
  if (*((_QWORD *)v27 + 3) - (_QWORD)v35 > 3uLL)
  {
    *v35 = 175841314;
    *((_QWORD *)v27 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v27, "\" {\n", 4uLL);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
LABEL_45:
  v36 = *(_BYTE *)(a2 + 23);
  v37 = v36;
  v38 = v36 & 0x7F;
  if (v37 < 0)
    v38 = *(_QWORD *)(a2 + 8);
  if (v38)
  {
    v39 = *a1;
    v40 = (_QWORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v40 > 7uLL)
    {
      *v40 = 0x223D6C6562616C09;
      *((_QWORD *)v39 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(*a1, "\tlabel=\"", 8uLL);
    }
    llvm::DOT::EscapeString((char *)a2, &v57);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = &v57;
    else
      v41 = (std::string *)v57.__r_.__value_.__r.__words[0];
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = *((_BYTE *)&v57.__r_.__value_.__s + 23) & 0x7F;
    else
      v42 = v57.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v39, (const char *)v41, v42);
    v43 = *((_QWORD *)v39 + 4);
    if ((unint64_t)(*((_QWORD *)v39 + 3) - v43) <= 2)
    {
      v44 = v39;
LABEL_71:
      llvm::raw_ostream::write(v44, "\";\n", 3uLL);
      goto LABEL_72;
    }
    *(_BYTE *)(v43 + 2) = 10;
    *(_WORD *)v43 = 15138;
    *((_QWORD *)v39 + 4) += 3;
    goto LABEL_72;
  }
  v45 = (void *)(HIBYTE(v55) & 0x7F);
  if (v55 < 0)
    v45 = __p[1];
  if (v45)
  {
    v46 = *a1;
    v47 = (_QWORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v47 > 7uLL)
    {
      *v47 = 0x223D6C6562616C09;
      *((_QWORD *)v46 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(*a1, "\tlabel=\"", 8uLL);
    }
    llvm::DOT::EscapeString((char *)__p, &v57);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = &v57;
    else
      v48 = (std::string *)v57.__r_.__value_.__r.__words[0];
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = *((_BYTE *)&v57.__r_.__value_.__s + 23) & 0x7F;
    else
      v49 = v57.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v46, (const char *)v48, v49);
    v50 = *((_QWORD *)v46 + 4);
    if ((unint64_t)(*((_QWORD *)v46 + 3) - v50) <= 2)
    {
      v44 = v46;
      goto LABEL_71;
    }
    *(_BYTE *)(v50 + 2) = 10;
    *(_WORD *)v50 = 15138;
    *((_QWORD *)v46 + 4) += 3;
LABEL_72:
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
  }
  v51 = *a1;
  *((_BYTE *)&v57.__r_.__value_.__s + 23) = 0;
  v57.__r_.__value_.__s.__data_[0] = 0;
  llvm::raw_ostream::write(v51, (const char *)&v57, 0);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  v52 = *a1;
  v53 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if (*((_BYTE **)*a1 + 3) == v53)
  {
    llvm::raw_ostream::write(v52, "\n", 1uLL);
  }
  else
  {
    *v53 = 10;
    ++*((_QWORD *)v52 + 4);
  }
  if (SHIBYTE(v55) < 0)
    operator delete(__p[0]);
}

void sub_1C4ED99E8(llvm::raw_ostream **a1, llvm::Value *a2)
{
  std::string::size_type v4;
  uint64_t v5;
  void *v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  _QWORD *v9;
  llvm::raw_ostream *v10;
  uint64_t v11;
  unint64_t v12;
  const char *v13;
  size_t v14;
  size_t v15;
  const char *v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  llvm::raw_ostream *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  llvm::raw_ostream *v29;
  _WORD *v30;
  const char *v31;
  int v32;
  llvm::raw_ostream *v33;
  void *v34;
  unint64_t v35;
  _WORD *v36;
  llvm::raw_ostream *v37;
  std::string *v38;
  size_t v39;
  uint64_t v40;
  void *v41;
  std::string *v42;
  size_t size;
  _QWORD *v44;
  int v45;
  unint64_t v46;
  char v47;
  int v48;
  std::string::size_type v49;
  _BYTE *v50;
  std::string *v51;
  size_t v52;
  _DWORD *v53;
  std::string *p_p;
  size_t v55;
  int v56;
  BOOL v57;
  _OWORD *v58;
  unint64_t v59;
  const char *v60;
  size_t v61;
  llvm::raw_ostream *v62;
  _BYTE *v63;
  llvm::raw_ostream *v64;
  char v65;
  const char *v66;
  size_t v67;
  llvm::raw_ostream *v68;
  _WORD *v69;
  unint64_t v70;
  const char *v71;
  size_t v72;
  llvm::raw_ostream *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  int v81;
  llvm::raw_ostream *v82;
  _BYTE *v83;
  char v84;
  const char *v85;
  size_t v86;
  _BYTE *v87;
  int v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  _BYTE *v92;
  unint64_t v93;
  std::string v94;
  _BYTE *v95;
  _BYTE *v96;
  char v97;
  uint64_t v98;
  int v99;
  void **v100;
  void *v101[2];
  uint64_t v102;
  void *v103;
  __int128 v104;
  std::string __p;
  std::string v106;

  v106.__r_.__value_.__r.__words[0] = *(_QWORD *)a1[1];
  sub_1C4DCA9C4(a2, (void (*)(uint64_t, void (***)(llvm::raw_ostream *__hidden), llvm::Value *))sub_1C61A5C30, (uint64_t)&v106, (void (*)(uint64_t, std::string *, unsigned int *, std::string::size_type))sub_1C61A5C4C, (uint64_t)&__p, &v94);
  v4 = std::string::find(&v94, 59, 0);
  if (v4 == -1)
    v5 = 0;
  else
    v5 = 33;
  if (v4 == -1)
  {
    HIBYTE(v104) = 0;
    v6 = &v103;
  }
  else
  {
    v6 = operator new(0x28uLL);
    v103 = v6;
    v104 = xmmword_1C85F4B50;
    qmemcpy(v6, "style=filled, fillcolor=lightpink", 33);
  }
  *((_BYTE *)v6 + v5) = 0;
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  v7 = *a1;
  v8 = *((_QWORD *)*a1 + 4);
  if ((unint64_t)(*((_QWORD *)*a1 + 3) - v8) > 4)
  {
    *(_BYTE *)(v8 + 4) = 101;
    *(_DWORD *)v8 = 1685016073;
    *((_QWORD *)v7 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(*a1, "\tNode", 5uLL);
  }
  llvm::write_hex(v7, (unint64_t)a2, 3, 0, 0);
  v9 = (_QWORD *)*((_QWORD *)v7 + 4);
  if (*((_QWORD *)v7 + 3) - (_QWORD)v9 > 7uLL)
  {
    *v9 = 0x3D65706168735B20;
    *((_QWORD *)v7 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v7, " [shape=", 8uLL);
  }
  v10 = *a1;
  v11 = *((_QWORD *)*a1 + 4);
  v12 = *((_QWORD *)*a1 + 3) - v11;
  if (*((_BYTE *)a1 + 16))
  {
    if (v12 <= 4)
    {
      v13 = "none,";
      v14 = 5;
LABEL_18:
      llvm::raw_ostream::write(v10, v13, v14);
      goto LABEL_19;
    }
    *(_BYTE *)(v11 + 4) = 44;
    *(_DWORD *)v11 = 1701736302;
    v89 = *((_QWORD *)v10 + 4) + 5;
  }
  else
  {
    if (v12 <= 6)
    {
      v13 = "record,";
      v14 = 7;
      goto LABEL_18;
    }
    *(_DWORD *)(v11 + 3) = 744780399;
    *(_DWORD *)v11 = 1868785010;
    v89 = *((_QWORD *)v10 + 4) + 7;
  }
  *((_QWORD *)v10 + 4) = v89;
LABEL_19:
  if (v104 >= 0)
    v15 = HIBYTE(v104) & 0x7F;
  else
    v15 = v104;
  if (v15)
  {
    if (v104 >= 0)
      v16 = (const char *)&v103;
    else
      v16 = (const char *)v103;
    v17 = llvm::raw_ostream::write(*a1, v16, v15);
    v18 = (_BYTE *)*((_QWORD *)v17 + 4);
    if (*((_BYTE **)v17 + 3) == v18)
    {
      llvm::raw_ostream::write(v17, ",", 1uLL);
    }
    else
    {
      *v18 = 44;
      ++*((_QWORD *)v17 + 4);
    }
  }
  v19 = *a1;
  v20 = *((_QWORD *)*a1 + 4);
  if ((unint64_t)(*((_QWORD *)*a1 + 3) - v20) > 5)
  {
    *(_WORD *)(v20 + 4) = 15724;
    *(_DWORD *)v20 = 1700946284;
    *((_QWORD *)v19 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v19, "label=", 6uLL);
  }
  if (*((_BYTE *)a1 + 16))
  {
    v21 = (_QWORD *)*((_QWORD *)a2 + 5);
    if (v21 == (_QWORD *)((char *)a2 + 40))
    {
LABEL_50:
      v27 = 0;
      LODWORD(v28) = 0;
    }
    else
    {
      if (v21)
        v22 = v21 - 3;
      else
        v22 = 0;
      v23 = *((unsigned __int8 *)v22 + 16);
      v24 = v23 - 29;
      if (v23 != 30)
      {
        v25 = 2;
        v27 = 0;
        v28 = 0;
        switch(v24)
        {
          case 0:
          case 5:
          case 6:
            goto LABEL_51;
          case 1:
LABEL_231:
            __break(1u);
LABEL_232:
            v45 = (*(_DWORD *)(v25 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_94;
          case 2:
            LODWORD(v25) = (*((_DWORD *)v22 + 5) >> 1) & 0x3FFFFFF;
            goto LABEL_49;
          case 3:
          case 9:
            LODWORD(v25) = (*((_DWORD *)v22 + 5) & 0x7FFFFFF) - 1;
            goto LABEL_49;
          case 4:
            goto LABEL_39;
          case 7:
            LODWORD(v25) = *((_WORD *)v22 + 9) & 1;
            goto LABEL_49;
          case 8:
            LODWORD(v25) = 1;
            goto LABEL_39;
          case 10:
            LODWORD(v25) = *((_DWORD *)v22 + 20) + 1;
LABEL_49:
            if (!(_DWORD)v25)
              goto LABEL_50;
            goto LABEL_39;
          default:
            goto LABEL_50;
        }
      }
      if ((*((_DWORD *)v22 + 5) & 0x7FFFFFF) == 3)
        LODWORD(v25) = 2;
      else
        LODWORD(v25) = 1;
LABEL_39:
      v26 = v25 - 1;
      if ((v25 - 1) >= 0x3F)
        v26 = 63;
      v27 = v26 + 1;
      LODWORD(v28) = v25 != v27;
    }
LABEL_51:
    if (v27 <= 1)
      v32 = 1;
    else
      v32 = v27;
    v33 = *a1;
    v34 = (void *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v34 <= 0x30uLL)
    {
      llvm::raw_ostream::write(*a1, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 0x31uLL);
      v90 = (void *)*((_QWORD *)v33 + 4);
    }
    else
    {
      qmemcpy(v34, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 49);
      v90 = (void *)(*((_QWORD *)v33 + 4) + 49);
      *((_QWORD *)v33 + 4) = v90;
    }
    v35 = (v32 + v28);
    if (*((_QWORD *)v33 + 3) - (_QWORD)v90 <= 0x2EuLL)
    {
      llvm::raw_ostream::write(v33, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 0x2FuLL);
    }
    else
    {
      qmemcpy(v90, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 47);
      *((_QWORD *)v33 + 4) += 47;
    }
    sub_1C5E21910(v33, v35, 0, 0, 0);
    v36 = (_WORD *)*((_QWORD *)v33 + 4);
    if (*((_QWORD *)v33 + 3) - (_QWORD)v36 <= 1uLL)
    {
      v31 = "\">";
      v29 = v33;
      goto LABEL_62;
    }
    *v36 = 15906;
    *((_QWORD *)v33 + 4) += 2;
  }
  else
  {
    v29 = *a1;
    v30 = (_WORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v30 <= 1uLL)
    {
      v31 = "\"{";
LABEL_62:
      llvm::raw_ostream::write(v29, v31, 2uLL);
      goto LABEL_63;
    }
    *v30 = 31522;
    *((_QWORD *)v29 + 4) += 2;
  }
LABEL_63:
  v37 = *a1;
  if (!*((_BYTE *)a1 + 16))
  {
    v94.__r_.__value_.__r.__words[0] = *(_QWORD *)a1[1];
    sub_1C4DCA9C4(a2, (void (*)(uint64_t, void (***)(llvm::raw_ostream *__hidden), llvm::Value *))sub_1C61A5C30, (uint64_t)&v94, (void (*)(uint64_t, std::string *, unsigned int *, std::string::size_type))sub_1C61A5C4C, (uint64_t)&__p, &v106);
    llvm::DOT::EscapeString((char *)&v106, &v94);
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = &v94;
    else
      v42 = (std::string *)v94.__r_.__value_.__r.__words[0];
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v94.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v94.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v37, (const char *)v42, size);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v94.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_85;
    v41 = (void *)v106.__r_.__value_.__r.__words[0];
    goto LABEL_84;
  }
  v106.__r_.__value_.__r.__words[0] = *(_QWORD *)a1[1];
  sub_1C4DCA9C4(a2, (void (*)(uint64_t, void (***)(llvm::raw_ostream *__hidden), llvm::Value *))sub_1C61A5C30, (uint64_t)&v106, (void (*)(uint64_t, std::string *, unsigned int *, std::string::size_type))sub_1C61A5C4C, (uint64_t)&__p, &v94);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = &v94;
  else
    v38 = (std::string *)v94.__r_.__value_.__r.__words[0];
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = *((_BYTE *)&v94.__r_.__value_.__s + 23) & 0x7F;
  else
    v39 = v94.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(v37, (const char *)v38, v39);
  v40 = *((_QWORD *)v37 + 4);
  if ((unint64_t)(*((_QWORD *)v37 + 3) - v40) > 4)
  {
    *(_BYTE *)(v40 + 4) = 62;
    *(_DWORD *)v40 = 1685335868;
    *((_QWORD *)v37 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v37, "</td>", 5uLL);
  }
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
  {
    v41 = (void *)v94.__r_.__value_.__r.__words[0];
LABEL_84:
    operator delete(v41);
  }
LABEL_85:
  v101[0] = 0;
  v101[1] = 0;
  v102 = 0;
  LODWORD(v94.__r_.__value_.__r.__words[1]) = 0;
  v97 = 0;
  v98 = 0;
  v94.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
  v100 = v101;
  v99 = 0;
  v28 = (unint64_t)a2 + 40;
  v44 = (_QWORD *)*((_QWORD *)a2 + 5);
  v95 = 0;
  v96 = 0;
  v94.__r_.__value_.__r.__words[2] = 0;
  if (v44 == (_QWORD *)((char *)a2 + 40))
  {
LABEL_93:
    v45 = 0;
  }
  else
  {
    if (v44)
      v25 = (uint64_t)(v44 - 3);
    else
      v25 = 0;
    if (*(_BYTE *)(v25 + 16) == 30)
    {
      if ((*(_DWORD *)(v25 + 20) & 0x7FFFFFF) == 3)
        v45 = 2;
      else
        v45 = 1;
    }
    else
    {
      v45 = 0;
      switch(*(_BYTE *)(v25 + 16))
      {
        case 0x1D:
        case 0x22:
        case 0x23:
          break;
        case 0x1E:
          goto LABEL_231;
        case 0x1F:
          v45 = (*(_DWORD *)(v25 + 20) >> 1) & 0x3FFFFFF;
          break;
        case 0x20:
        case 0x26:
          goto LABEL_232;
        case 0x21:
          v45 = 2;
          break;
        case 0x24:
          v45 = *(_WORD *)(v25 + 18) & 1;
          break;
        case 0x25:
          v45 = 1;
          break;
        case 0x27:
          v45 = *(_DWORD *)(v25 + 80) + 1;
          break;
        default:
          goto LABEL_93;
      }
    }
  }
LABEL_94:
  if (*((_BYTE *)a1 + 16))
    llvm::raw_ostream::write((llvm::raw_ostream *)&v94, "</tr><tr>", 9uLL);
  if (!v45)
    goto LABEL_162;
  v93 = v28;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  do
  {
    sub_1C4DCAD10((uint64_t)a2, v48, (uint64_t)&v106);
    v49 = *((_BYTE *)&v106.__r_.__value_.__s + 23) & 0x7F;
    if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v49 = v106.__r_.__value_.__l.__size_;
    if (v49)
    {
      v50 = v96;
      if (*((_BYTE *)a1 + 16))
      {
        if ((unint64_t)(v95 - v96) > 0x16)
        {
          *(_OWORD *)v96 = *(_OWORD *)"<td colspan=\"1\" port=\"s";
          *(_QWORD *)(v50 + 15) = *(_QWORD *)" port=\"s";
          v96 += 23;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v94, "<td colspan=\"1\" port=\"s", 0x17uLL);
        }
        sub_1C5E21910((llvm::raw_ostream *)&v94, v46, 0, 0, 0);
        if ((unint64_t)(v95 - v96) > 1)
        {
          *(_WORD *)v96 = 15906;
          v96 += 2;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v94, "\">", 2uLL);
        }
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = &v106;
        else
          v51 = (std::string *)v106.__r_.__value_.__r.__words[0];
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v52 = *((_BYTE *)&v106.__r_.__value_.__s + 23) & 0x7F;
        else
          v52 = v106.__r_.__value_.__l.__size_;
        llvm::raw_ostream::write((llvm::raw_ostream *)&v94, (const char *)v51, v52);
        v53 = v96;
        if ((unint64_t)(v95 - v96) > 4)
        {
          v96[4] = 62;
          *v53 = 1685335868;
          v96 += 5;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v94, "</td>", 5uLL);
        }
      }
      else
      {
        if (v46)
        {
          if (v95 == v96)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v94, "|", 1uLL);
            v50 = v96;
          }
          else
          {
            *v96 = 124;
            v50 = ++v96;
          }
        }
        if ((unint64_t)(v95 - v50) > 1)
        {
          *(_WORD *)v50 = 29500;
          v96 += 2;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v94, "<s", 2uLL);
        }
        sub_1C5E21910((llvm::raw_ostream *)&v94, v46, 0, 0, 0);
        if (v95 == v96)
          llvm::raw_ostream::write((llvm::raw_ostream *)&v94, ">", 1uLL);
        else
          *v96++ = 62;
        llvm::DOT::EscapeString((char *)&v106, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v55 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
        else
          v55 = __p.__r_.__value_.__l.__size_;
        llvm::raw_ostream::write((llvm::raw_ostream *)&v94, (const char *)p_p, v55);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v47 = 1;
    }
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v106.__r_.__value_.__l.__data_);
    v56 = v48 + 1;
    if (v45 == v48 + 1)
      break;
    ++v48;
    v57 = v46++ == 63;
  }
  while (!v57);
  if (((v45 != v56) & v47) == 0)
  {
    v28 = v93;
    if ((v47 & 1) == 0)
      goto LABEL_162;
    goto LABEL_151;
  }
  v58 = v96;
  v59 = v95 - v96;
  v28 = v93;
  if (*((_BYTE *)a1 + 16))
  {
    if (v59 <= 0x2B)
    {
      v60 = "<td colspan=\"1\" port=\"s64\">truncated...</td>";
      v61 = 44;
LABEL_150:
      llvm::raw_ostream::write((llvm::raw_ostream *)&v94, v60, v61);
      goto LABEL_151;
    }
    *(_OWORD *)v96 = *(_OWORD *)"<td colspan=\"1\" port=\"s64\">truncated...</td>";
    qmemcpy(v58 + 1, "port=\"s64\">truncated...</td>", 28);
    v92 = v96 + 44;
  }
  else
  {
    if (v59 <= 0x11)
    {
      v60 = "|<s64>truncated...";
      v61 = 18;
      goto LABEL_150;
    }
    *((_WORD *)v96 + 8) = 11822;
    *v58 = *(_OWORD *)"|<s64>truncated...";
    v92 = v96 + 18;
  }
  v96 = v92;
LABEL_151:
  if (*((_BYTE *)a1 + 16))
    goto LABEL_155;
  v62 = *a1;
  v63 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if (*((_BYTE **)*a1 + 3) == v63)
  {
    llvm::raw_ostream::write(v62, "|", 1uLL);
  }
  else
  {
    *v63 = 124;
    ++*((_QWORD *)v62 + 4);
  }
  if (*((_BYTE *)a1 + 16))
  {
LABEL_155:
    v64 = *a1;
    v65 = *((_BYTE *)v100 + 23);
    if (v65 >= 0)
      v66 = (const char *)v100;
    else
      v66 = (const char *)*v100;
    if (v65 >= 0)
      v67 = v65 & 0x7F;
    else
      v67 = (size_t)v100[1];
    goto LABEL_161;
  }
  v82 = *a1;
  v83 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if (*((_BYTE **)*a1 + 3) == v83)
  {
    v82 = llvm::raw_ostream::write(v82, "{", 1uLL);
  }
  else
  {
    *v83 = 123;
    ++*((_QWORD *)v82 + 4);
  }
  v84 = *((_BYTE *)v100 + 23);
  if (v84 >= 0)
    v85 = (const char *)v100;
  else
    v85 = (const char *)*v100;
  if (v84 >= 0)
    v86 = v84 & 0x7F;
  else
    v86 = (size_t)v100[1];
  v64 = llvm::raw_ostream::write(v82, v85, v86);
  v87 = (_BYTE *)*((_QWORD *)v64 + 4);
  if (*((_BYTE **)v64 + 3) == v87)
  {
    v66 = "}";
    v67 = 1;
LABEL_161:
    llvm::raw_ostream::write(v64, v66, v67);
    goto LABEL_162;
  }
  *v87 = 125;
  ++*((_QWORD *)v64 + 4);
LABEL_162:
  v68 = *a1;
  v69 = (_WORD *)*((_QWORD *)*a1 + 4);
  v70 = *((_QWORD *)*a1 + 3) - (_QWORD)v69;
  if (*((_BYTE *)a1 + 16))
  {
    if (v70 <= 0xD)
    {
      v71 = "</tr></table>>";
      v72 = 14;
LABEL_167:
      llvm::raw_ostream::write(v68, v71, v72);
      goto LABEL_168;
    }
    qmemcpy(v69, "</tr></table>>", 14);
    v91 = *((_QWORD *)v68 + 4) + 14;
  }
  else
  {
    if (v70 <= 1)
    {
      v71 = "}\"";
      v72 = 2;
      goto LABEL_167;
    }
    *v69 = 8829;
    v91 = *((_QWORD *)v68 + 4) + 2;
  }
  *((_QWORD *)v68 + 4) = v91;
LABEL_168:
  v73 = *a1;
  v74 = *((_QWORD *)*a1 + 4);
  if ((unint64_t)(*((_QWORD *)*a1 + 3) - v74) > 2)
  {
    *(_BYTE *)(v74 + 2) = 10;
    *(_WORD *)v74 = 15197;
    *((_QWORD *)v73 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v73, "];\n", 3uLL);
  }
  v75 = *(_QWORD *)v28;
  if (*(_QWORD *)v28 == v28)
  {
    v81 = 0;
    v77 = 0;
LABEL_203:
    v28 = 0;
    goto LABEL_204;
  }
  if (v75)
    v25 = v75 - 24;
  else
    v25 = 0;
  v76 = *(unsigned __int8 *)(v25 + 16);
  if ((v76 - 29) >= 0xB)
    v77 = 0;
  else
    v77 = v25;
  if (v76 != 30)
  {
    v78 = 2;
    v28 = 0;
    v81 = 0;
    switch(*(_BYTE *)(v25 + 16))
    {
      case 0x1D:
      case 0x22:
      case 0x23:
        goto LABEL_204;
      case 0x1E:
        goto LABEL_231;
      case 0x1F:
        v78 = (*(_DWORD *)(v25 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_201;
      case 0x20:
      case 0x26:
        v78 = (*(_DWORD *)(v25 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_201;
      case 0x21:
        goto LABEL_181;
      case 0x24:
        v78 = *(_WORD *)(v25 + 18) & 1;
        goto LABEL_201;
      case 0x25:
        v78 = 1;
        goto LABEL_181;
      case 0x27:
        v78 = *(_DWORD *)(v25 + 80) + 1;
LABEL_201:
        if (!v78)
          goto LABEL_202;
        goto LABEL_181;
      default:
LABEL_202:
        v81 = 0;
        break;
    }
    goto LABEL_203;
  }
  if ((*(_DWORD *)(v25 + 20) & 0x7FFFFFF) == 3)
    v78 = 2;
  else
    v78 = 1;
LABEL_181:
  v79 = 0;
  v28 = 0;
  do
  {
    sub_1C4EDA7EC(a1, (unint64_t)a2, v79, v77, v28);
    v80 = v28 + 1;
    v28 = v28 & 0xFFFFFFFF00000000 | (v28 + 1);
    if (v78 == v80)
      break;
    v57 = v79++ == 63;
  }
  while (!v57);
  v81 = v78;
LABEL_204:
  if (v81 != (_DWORD)v28)
  {
    do
    {
      sub_1C4EDA7EC(a1, (unint64_t)a2, 64, v77, v28);
      v88 = v28 + 1;
      v28 = v28 & 0xFFFFFFFF00000000 | (v28 + 1);
    }
    while (v81 != v88);
  }
  v94.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
  if (v99 == 1 && v94.__r_.__value_.__r.__words[2])
    MEMORY[0x1CAA32F9C](v94.__r_.__value_.__r.__words[2], 0x1000C8077774924);
  if (SHIBYTE(v102) < 0)
    operator delete(v101[0]);
  if (SHIBYTE(v104) < 0)
    operator delete(v103);
}

void sub_1C4EDA7EC(llvm::raw_ostream **a1, unint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
  int v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  void *__p[2];
  unsigned __int8 v13;

  v8 = *(unsigned __int8 *)(a4 + 16);
  if (v8 != 30)
    __asm { BR              X10 }
  v9 = *(_QWORD *)(a4 - 32 * a5 - 32);
  if (v9)
  {
    sub_1C4DCAD10(a2, a5, (uint64_t)__p);
    if ((v13 & 0x80u) == 0)
      v10 = v13;
    else
      v10 = (unint64_t)__p[1];
    if ((char)v13 < 0)
      operator delete(__p[0]);
    if (v10)
      v11 = a3;
    else
      v11 = -1;
    v13 = 0;
    LOBYTE(__p[0]) = 0;
    sub_1C617F1B0(a1, a2, v11, v9, (uint64_t)__p);
    if ((char)v13 < 0)
      operator delete(__p[0]);
  }
}

void sub_1C4EDA8D0()
{
  JUMPOUT(0x1C4EDA828);
}

void sub_1C4EDA980(std::string *__str, _DWORD *a2, unsigned int a3)
{
  char v6;
  std::string *v7;
  std::string::size_type size;
  _QWORD v9[2];
  std::string v10;

  std::string::basic_string(&v10, __str, *a2, a3 - *a2, (std::allocator<char> *)v9);
  v6 = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  v7 = (std::string *)v10.__r_.__value_.__r.__words[0];
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v10;
  size = *((_BYTE *)&v10.__r_.__value_.__s + 23) & 0x7F;
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v10.__r_.__value_.__l.__size_;
  v9[0] = v7;
  v9[1] = size;
  if (!llvm::StringRef::count(v9, " = MemoryDef(", 0xDuLL)
    && !llvm::StringRef::count(v9, " = MemoryPhi(", 0xDuLL)
    && !llvm::StringRef::count(v9, "MemoryUse(", 0xAuLL))
  {
    std::string::erase(__str, *a2, a3 - (unint64_t)*a2);
    --*a2;
    v6 = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  }
  if (v6 < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
}

uint64_t sub_1C4EDAA70()
{
  uint64_t v0;
  int v2;
  __n128 v3;
  int v4;
  int *v5;

  v3.n128_u64[0] = (unint64_t)"";
  v0 = sub_1C47AD050((uint64_t)qword_1ED7F2D30, 0, 0);
  xmmword_1ED7F2DB0 = 0uLL;
  unk_1ED7F2DC0 = 0;
  qword_1ED7F2DD0 = 0;
  qword_1ED7F2DE0 = 0;
  qword_1ED7F2DD8 = 0;
  qword_1ED7F2DC8 = (uint64_t)&unk_1E819E950;
  byte_1ED7F2DE8 = 0;
  qword_1ED7F2D30[0] = (uint64_t)&unk_1E819E480;
  qword_1ED7F2DF0 = (uint64_t)&unk_1E819E970;
  qword_1ED7F2DF8 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED7F2E10 = (uint64_t)&qword_1ED7F2DF8;
  llvm::cl::Option::setArgStr(v0, "dot-cfg-mssa", 0xCuLL);
  qword_1ED7F2D60 = (uint64_t)"file name for generated dot file";
  unk_1ED7F2D68 = 32;
  qword_1ED7F2D50 = (uint64_t)"file name for generated dot file";
  unk_1ED7F2D58 = 32;
  sub_1C49C7D74((const char **)&v3, (uint64_t)qword_1ED7F2D30);
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED7F2D30);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, qword_1ED7F2D30, &dword_1C475E000);
  v4 = 1;
  v2 = 100;
  v5 = &v2;
  v3.n128_u64[0] = (unint64_t)"The maximum number of stores/phis MemorySSAwill consider trying to walk past (default = 100)";
  v3.n128_u64[1] = 92;
  sub_1C61A5980(&v4, &v5, (__int128 *)&v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7F2BB0, &dword_1C475E000);
  v5 = (int *)&llvm::VerifyMemorySSA;
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Enable verification of MemorySSA.";
  v3.n128_u64[1] = 33;
  sub_1C61A1F40((llvm::cl::Option *)&unk_1ED7F2C70, "verify-memoryssa", (_BYTE **)&v5, &v4, &v3);
  return __cxa_atexit((void (*)(void *))sub_1C4EB22A8, &unk_1ED7F2C70, &dword_1C475E000);
}

uint64_t llvm::MemorySSAUpdater::getPreviousDefRecursive(uint64_t a1, llvm::BasicBlock *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t UniquePredecessor;
  uint64_t v8;
  uint64_t PreviousDefFromEnd;
  uint64_t MemoryPhi;
  unint64_t v11;
  unint64_t *v12;
  int32x2_t ****v13;
  int32x2_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int32x2_t *****v19;
  int32x2_t ****v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  llvm::BasicBlock **v25;
  llvm::BasicBlock *v26;
  int v27;
  uint64_t v28;
  int v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int32x2_t ****v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  llvm::BasicBlock *v50;
  int v51;
  int v52;
  llvm::ValueAsMetadata *v53;
  _QWORD *i;
  unint64_t v55;
  uint64_t v56;
  llvm::ValueAsMetadata **v57;
  uint64_t v58;
  llvm::Value *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  llvm::Value *v63;
  BOOL v64;
  unint64_t v65;
  _QWORD ***v66;
  int32x2_t *v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD ***v73;
  int v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD ***v78;
  int32x2_t *v79;
  unint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD ***v85;
  int v86;
  int v87;
  unsigned int v88;
  BOOL v89;
  llvm::Value *v91;
  uint64_t v92;
  llvm::Value **v93;
  llvm::Value *v94;
  char v96;
  int v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  BOOL v103;
  _QWORD *v105;
  unsigned int v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v111;
  uint64_t *v112;
  unint64_t v113;
  _QWORD ***v114;
  int32x2_t *v115;
  unint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD ***v121;
  int v122;
  int v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD **v127;
  uint64_t v128;
  uint64_t *v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t j;
  uint64_t v136;
  unsigned int v137;
  BOOL v138;
  int v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  unsigned int v144;
  BOOL v145;
  unsigned int v147;
  uint64_t v148;
  char *v149;
  unsigned int v150;
  BOOL v151;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  int32x2_t ****v157;
  int32x2_t *v158;
  unint64_t v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;
  int32x2_t *****v163;
  int32x2_t ****v164;
  int v165;
  int v166;
  unint64_t **v167;
  unint64_t **v168;
  uint64_t v169;
  unint64_t v171;
  unint64_t *v172;
  uint64_t v173;
  int32x2_t *v174;
  unint64_t v175;
  uint64_t v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  int v181;
  int v182;
  char v183[24];
  uint64_t v184;
  uint64_t v185;
  _QWORD ***v186;
  int32x2_t ****v187;
  void *v188;
  uint64_t v189;
  unint64_t *v190;
  int32x2_t ****v191;
  uint64_t v192;

  v192 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v6)
  {
    v23 = *(_QWORD *)a3;
    v24 = v6 - 1;
    v25 = (llvm::BasicBlock **)(*(_QWORD *)a3
                              + 32 * (((_DWORD)v6 - 1) & ((a2 >> 4) ^ (a2 >> 9))));
    v26 = *v25;
    if (*v25 == a2)
    {
LABEL_23:
      if (v25 != (llvm::BasicBlock **)(v23 + 32 * v6))
        return (uint64_t)v25[3];
    }
    else
    {
      v27 = 1;
      LODWORD(v28) = v24 & ((a2 >> 4) ^ (a2 >> 9));
      while (v26 != (llvm::BasicBlock *)-4096)
      {
        v29 = v28 + v27++;
        v28 = v29 & v24;
        v26 = *(llvm::BasicBlock **)(v23 + 32 * v28);
        if (v26 == a2)
        {
          v25 = (llvm::BasicBlock **)(v23 + 32 * v28);
          goto LABEL_23;
        }
      }
    }
  }
  if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(*(_QWORD *)(*(_QWORD *)a1 + 8), (uint64_t)a2))return *(_QWORD *)(*(_QWORD *)a1 + 96);
  UniquePredecessor = llvm::BasicBlock::getUniquePredecessor(a2);
  if (UniquePredecessor)
  {
    v8 = UniquePredecessor;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 408), (uint64_t)a2);
    PreviousDefFromEnd = llvm::MemorySSAUpdater::getPreviousDefFromEnd(a1, v8, a3);
    MemoryPhi = PreviousDefFromEnd;
    v188 = a2;
    v189 = 6;
    v190 = 0;
    v191 = 0;
    if (PreviousDefFromEnd)
    {
      v191 = (int32x2_t ****)PreviousDefFromEnd;
      if ((PreviousDefFromEnd | 0x1000) != 0xFFFFFFFFFFFFF000)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v189);
    }
    sub_1C4EE4344((uint64_t)&v184, a3, (uint64_t *)&v188, &v189);
    if (v191 == (int32x2_t ****)-8192 || v191 == (int32x2_t ****)-4096 || !v191)
      return MemoryPhi;
    v11 = v189 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v189 & 0xFFFFFFFFFFFFFFF8) = v190;
    v12 = v190;
    if (!v190)
    {
      v13 = v191;
      v14 = ***v191;
      v15 = (unint64_t)v14[303];
      if (v15 <= v11)
      {
        v16 = v14[305].u32[0];
        if (v15 + 16 * v16 > v11)
        {
          v17 = v16 - 1;
          LODWORD(v18) = v17 & ((v191 >> 4) ^ (v191 >> 9));
          v19 = (int32x2_t *****)(v15 + 16 * v18);
          v20 = *v19;
          if (v191 != *v19)
          {
            v21 = 1;
            while (v20 != (int32x2_t ****)-4096)
            {
              v22 = v18 + v21++;
              v18 = v22 & v17;
              v20 = *(int32x2_t *****)(v15 + 16 * v18);
              if (v191 == v20)
                goto LABEL_43;
            }
            goto LABEL_45;
          }
LABEL_44:
          *v19 = (int32x2_t ****)-8192;
          v14[304] = vadd_s32(v14[304], (int32x2_t)0x1FFFFFFFFLL);
          v13 = v191;
LABEL_45:
          *((_BYTE *)v13 + 17) &= ~1u;
          return MemoryPhi;
        }
      }
      return MemoryPhi;
    }
LABEL_71:
    *v12 = *v12 & 7 | v11;
    return MemoryPhi;
  }
  v31 = sub_1C477672C(a1 + 408, (uint64_t)a2);
  v32 = *(_QWORD *)(a1 + 416);
  v33 = 424;
  if (v32 == *(_QWORD *)(a1 + 408))
    v33 = 428;
  if (v31 == (_QWORD *)(v32 + 8 * *(unsigned int *)(a1 + v33)))
  {
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 408), (uint64_t)a2);
    v188 = &v190;
    v189 = 0x800000000;
    v40 = *((_QWORD *)a2 + 1);
    if (v40)
    {
      while (1)
      {
        v41 = *(_QWORD *)(v40 + 24);
        v42 = *(unsigned __int8 *)(v41 + 16);
        v43 = v41 && v42 >= 0x1C;
        if (v43 && v42 - 29 < 0xB)
          break;
        v40 = *(_QWORD *)(v40 + 8);
        if (!v40)
          goto LABEL_56;
      }
      v59 = 0;
      v60 = 1;
LABEL_77:
      v61 = *(_QWORD *)(v41 + 40);
      if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(*(_QWORD *)(*(_QWORD *)a1 + 8), v61))
      {
        v62 = llvm::MemorySSAUpdater::getPreviousDefFromEnd(a1, v61, a3);
        if (v59)
          v63 = v59;
        else
          v63 = (llvm::Value *)v62;
        v184 = 6;
        v64 = (llvm::Value *)v62 == v59 || v59 == 0;
        v185 = 0;
        v186 = 0;
        if (v62)
        {
          v186 = (_QWORD ***)v62;
          if ((v62 | 0x1000) != 0xFFFFFFFFFFFFF000)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v184);
        }
        sub_1C4EDBC68((uint64_t)&v188, (char *)&v184);
        if (v186 != (_QWORD ***)-8192 && v186 != (_QWORD ***)-4096 && v186)
        {
          v65 = v184 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v184 & 0xFFFFFFFFFFFFFFF8) = v185;
          if (v185)
          {
            *(_QWORD *)v185 = *(_QWORD *)v185 & 7 | v65;
          }
          else
          {
            v66 = v186;
            v67 = (int32x2_t *)***v186;
            v68 = (unint64_t)v67[303];
            if (v68 <= v65)
            {
              v69 = v67[305].u32[0];
              if (v68 + 16 * v69 > v65)
              {
                v70 = v69 - 1;
                LODWORD(v71) = v70 & ((v186 >> 4) ^ (v186 >> 9));
                v72 = (_QWORD *)(v68 + 16 * v71);
                v73 = (_QWORD ***)*v72;
                if (v186 != (_QWORD ***)*v72)
                {
                  v74 = 1;
                  do
                  {
                    if (v73 == (_QWORD ***)-4096)
                      goto LABEL_99;
                    v75 = v71 + v74++;
                    v71 = v75 & v70;
                    v73 = *(_QWORD ****)(v68 + 16 * v71);
                  }
                  while (v186 != v73);
                  v72 = (_QWORD *)(v68 + 16 * v71);
                }
                *v72 = -8192;
                v67[304] = vadd_s32(v67[304], (int32x2_t)0x1FFFFFFFFLL);
                v66 = v186;
LABEL_99:
                *((_BYTE *)v66 + 17) &= ~1u;
              }
            }
          }
        }
        v60 &= v64;
        v59 = v63;
        goto LABEL_118;
      }
      v76 = *(_QWORD *)(*(_QWORD *)a1 + 96);
      v184 = 6;
      v185 = 0;
      v186 = 0;
      if (v76)
      {
        v186 = (_QWORD ***)v76;
        if ((v76 | 0x1000) != 0xFFFFFFFFFFFFF000)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v184);
      }
      sub_1C4EDBC68((uint64_t)&v188, (char *)&v184);
      if (v186 != (_QWORD ***)-8192 && v186 != (_QWORD ***)-4096 && v186)
      {
        v77 = v184 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v184 & 0xFFFFFFFFFFFFFFF8) = v185;
        if (v185)
        {
          *(_QWORD *)v185 = *(_QWORD *)v185 & 7 | v77;
        }
        else
        {
          v78 = v186;
          v79 = (int32x2_t *)***v186;
          v80 = (unint64_t)v79[303];
          if (v80 <= v77)
          {
            v81 = v79[305].u32[0];
            if (v80 + 16 * v81 > v77)
            {
              v82 = v81 - 1;
              LODWORD(v83) = v82 & ((v186 >> 4) ^ (v186 >> 9));
              v84 = (_QWORD *)(v80 + 16 * v83);
              v85 = (_QWORD ***)*v84;
              if (v186 != (_QWORD ***)*v84)
              {
                v86 = 1;
                do
                {
                  if (v85 == (_QWORD ***)-4096)
                    goto LABEL_115;
                  v87 = v83 + v86++;
                  v83 = v87 & v82;
                  v85 = *(_QWORD ****)(v80 + 16 * v83);
                }
                while (v186 != v85);
                v84 = (_QWORD *)(v80 + 16 * v83);
              }
              *v84 = -8192;
              v79[304] = vadd_s32(v79[304], (int32x2_t)0x1FFFFFFFFLL);
              v78 = v186;
LABEL_115:
              *((_BYTE *)v78 + 17) &= ~1u;
            }
          }
        }
      }
LABEL_118:
      while (1)
      {
        v40 = *(_QWORD *)(v40 + 8);
        if (!v40)
          break;
        v41 = *(_QWORD *)(v40 + 24);
        v88 = *(unsigned __int8 *)(v41 + 16);
        if (v41)
          v89 = v88 >= 0x1C;
        else
          v89 = 0;
        if (v89 && v88 - 29 < 0xB)
          goto LABEL_77;
      }
    }
    else
    {
LABEL_56:
      v59 = 0;
      v60 = 1;
    }
    v45 = *(_QWORD *)a1;
    v46 = *(_DWORD *)(*(_QWORD *)a1 + 40);
    if (v46)
    {
      v47 = *(_QWORD *)(v45 + 24);
      v48 = v46 - 1;
      v49 = (v46 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v50 = *(llvm::BasicBlock **)(v47 + 16 * v49);
      if (v50 == a2)
      {
LABEL_62:
        v53 = *(llvm::ValueAsMetadata **)(v47 + 16 * v49 + 8);
        goto LABEL_64;
      }
      v51 = 1;
      while (v50 != (llvm::BasicBlock *)-4096)
      {
        v52 = v49 + v51++;
        v49 = v52 & v48;
        v50 = *(llvm::BasicBlock **)(v47 + 16 * v49);
        if (v50 == a2)
          goto LABEL_62;
      }
    }
    v53 = 0;
LABEL_64:
    if (*(_QWORD *)(a1 + 600))
    {
      for (i = *(_QWORD **)(a1 + 592); i; i = (_QWORD *)*i)
      {
        v55 = i[4];
        if (v55 <= (unint64_t)v53)
        {
          if (v55 >= (unint64_t)v53)
          {
LABEL_144:
            MemoryPhi = (uint64_t)v53;
            goto LABEL_145;
          }
          ++i;
        }
      }
    }
    else
    {
      v56 = *(unsigned int *)(a1 + 512);
      if ((_DWORD)v56)
      {
        v57 = *(llvm::ValueAsMetadata ***)(a1 + 504);
        v58 = 8 * v56;
        while (*v57 != v53)
        {
          ++v57;
          v58 -= 8;
          if (!v58)
            goto LABEL_129;
        }
        MemoryPhi = (uint64_t)v53;
        if (v58)
          goto LABEL_145;
      }
    }
    if (!(_DWORD)v189)
      goto LABEL_143;
LABEL_129:
    v91 = 0;
    v92 = 24 * v189;
    v93 = (llvm::Value **)((char *)v188 + 16);
    do
    {
      v94 = *v93;
      if (*v93 == v53 || v94 == v91)
      {
        v94 = v91;
      }
      else if (v91)
      {
        goto LABEL_144;
      }
      v93 += 3;
      v91 = v94;
      v92 -= 24;
    }
    while (v92);
    if (v94)
    {
      if (v53)
      {
        llvm::Value::doRAUW(v53, v94, (llvm::Value *)1);
        llvm::MemorySSAUpdater::removeMemoryAccess((int32x2_t **)a1, v53, 0);
      }
      MemoryPhi = (uint64_t)llvm::MemorySSAUpdater::recursePhi((llvm::MemorySSAUpdater *)a1, (unint64_t)v94);
    }
    else
    {
LABEL_143:
      MemoryPhi = *(_QWORD *)(v45 + 96);
    }
LABEL_145:
    v96 = v60 & (v59 != 0);
    if ((llvm::ValueAsMetadata *)MemoryPhi == v53 && (v60 & (v59 != 0)) != 0)
    {
      if (v53)
      {
        llvm::Value::doRAUW(v53, v59, (llvm::Value *)1);
        llvm::MemorySSAUpdater::removeMemoryAccess((int32x2_t **)a1, v53, 0);
      }
      MemoryPhi = (uint64_t)v59;
    }
    else
    {
      if ((llvm::ValueAsMetadata *)MemoryPhi != v53)
        v96 = 1;
      if ((v96 & 1) == 0)
      {
        MemoryPhi = (uint64_t)v53;
        if (!v53)
          MemoryPhi = (uint64_t)llvm::MemorySSA::createMemoryPhi(*(llvm::MemorySSA **)a1, a2);
        v97 = *(_DWORD *)(MemoryPhi + 20);
        v98 = v97 & 0x7FFFFFF;
        if ((v97 & 0x7FFFFFF) != 0)
        {
          if ((v97 & 0x40000000) != 0)
          {
            v99 = *(_QWORD **)(MemoryPhi - 8);
          }
          else
          {
            v98 = v98;
            v99 = (_QWORD *)(MemoryPhi - 32 * v98);
          }
          v124 = (char *)v188 + 16;
          v125 = 32 * v98;
          while (*v99 == *v124)
          {
            v99 += 4;
            v124 += 3;
            v125 -= 32;
            if (!v125)
              goto LABEL_246;
          }
          if ((v97 & 0x40000000) != 0)
            v126 = *(_QWORD *)(MemoryPhi - 8);
          else
            v126 = MemoryPhi - 32 * v98;
          if ((_DWORD)v189)
          {
            v127 = (_QWORD **)(v126 + 8);
            v128 = 24 * v189;
            v129 = (uint64_t *)((char *)v188 + 16);
            do
            {
              v130 = v127 - 1;
              v131 = *v129;
              if (*(v127 - 1))
              {
                *v127[1] = *v127;
                if (*v127)
                  (*v127)[2] = v127[1];
              }
              *v130 = v131;
              if (v131)
              {
                v134 = *(_QWORD **)(v131 + 8);
                v132 = (_QWORD *)(v131 + 8);
                v133 = v134;
                *v127 = v134;
                if (v134)
                  v133[2] = v127;
                v127[1] = v132;
                *v132 = v130;
              }
              v127 += 4;
              v129 += 3;
              v128 -= 24;
            }
            while (v128);
          }
          for (j = *((_QWORD *)a2 + 1); j; j = *(_QWORD *)(j + 8))
          {
            v136 = *(_QWORD *)(j + 24);
            v137 = *(unsigned __int8 *)(v136 + 16);
            if (v136)
              v138 = v137 >= 0x1C;
            else
              v138 = 0;
            if (v138 && v137 - 29 < 0xB)
              break;
          }
          v140 = *(_DWORD *)(MemoryPhi + 20);
          if ((v140 & 0x40000000) != 0)
            v141 = *(_QWORD *)(MemoryPhi - 8);
          else
            v141 = MemoryPhi - 32 * (v140 & 0x7FFFFFF);
          if (j)
          {
            v142 = (_QWORD *)(v141 + 32 * *(unsigned int *)(MemoryPhi + 76));
            v143 = *(_QWORD *)(j + 24);
LABEL_225:
            *v142 = *(_QWORD *)(v143 + 40);
            while (1)
            {
              j = *(_QWORD *)(j + 8);
              if (!j)
                break;
              v143 = *(_QWORD *)(j + 24);
              v144 = *(unsigned __int8 *)(v143 + 16);
              if (v143)
                v145 = v144 >= 0x1C;
              else
                v145 = 0;
              if (v145 && v144 - 29 <= 0xA)
              {
                ++v142;
                goto LABEL_225;
              }
            }
          }
        }
        else
        {
          v100 = *((_QWORD *)a2 + 1);
          if (v100)
          {
            while (1)
            {
              v101 = *(_QWORD *)(v100 + 24);
              v102 = *(unsigned __int8 *)(v101 + 16);
              v103 = v101 && v102 >= 0x1C;
              if (v103 && v102 - 29 <= 0xA)
                break;
              v100 = *(_QWORD *)(v100 + 8);
              if (!v100)
                goto LABEL_168;
            }
            v147 = 0;
LABEL_235:
            v148 = *(_QWORD *)(v101 + 40);
            v149 = (char *)v188 + 24 * v147++;
            sub_1C4ECE04C(MemoryPhi, *((_QWORD *)v149 + 2), v148);
            while (1)
            {
              v100 = *(_QWORD *)(v100 + 8);
              if (!v100)
                break;
              v101 = *(_QWORD *)(v100 + 24);
              v150 = *(unsigned __int8 *)(v101 + 16);
              if (v101)
                v151 = v150 >= 0x1C;
              else
                v151 = 0;
              if (v151 && v150 - 29 < 0xB)
                goto LABEL_235;
            }
          }
LABEL_168:
          v184 = 4;
          v185 = 0;
          v186 = (_QWORD ***)MemoryPhi;
          if (MemoryPhi != -8192 && MemoryPhi != -4096 && MemoryPhi)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v184);
          v105 = (_QWORD *)sub_1C4EE497C((unsigned int *)(a1 + 8), (unint64_t)&v184, 1);
          v106 = *(_DWORD *)(a1 + 16);
          v107 = (unint64_t *)(*(_QWORD *)(a1 + 8) + 24 * v106);
          *v107 = 4;
          v107[1] = 0;
          v108 = (unint64_t)(v107 + 1);
          v109 = v105[2];
          v107[2] = v109;
          if (v109 != -8192 && v109 != -4096 && v109 != 0)
          {
            v111 = *v105 & 0xFFFFFFFFFFFFFFF8;
            v107[1] = *(_QWORD *)v111;
            *(_QWORD *)v111 = v107;
            *v107 = v111 | 4;
            v112 = (uint64_t *)v107[1];
            if (v112)
              *v112 = *v112 & 7 | v108;
          }
          *(_DWORD *)(a1 + 16) = v106 + 1;
          if (v186 != (_QWORD ***)-8192 && v186 != (_QWORD ***)-4096 && v186)
          {
            v113 = v184 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v184 & 0xFFFFFFFFFFFFFFF8) = v185;
            if (v185)
            {
              *(_QWORD *)v185 = *(_QWORD *)v185 & 7 | v113;
            }
            else
            {
              v114 = v186;
              v115 = (int32x2_t *)***v186;
              v116 = (unint64_t)v115[303];
              if (v116 <= v113)
              {
                v117 = v115[305].u32[0];
                if (v116 + 16 * v117 > v113)
                {
                  v118 = v117 - 1;
                  LODWORD(v119) = v118 & ((v186 >> 4) ^ (v186 >> 9));
                  v120 = (_QWORD *)(v116 + 16 * v119);
                  v121 = (_QWORD ***)*v120;
                  if (v186 == (_QWORD ***)*v120)
                  {
LABEL_190:
                    *v120 = -8192;
                    v115[304] = vadd_s32(v115[304], (int32x2_t)0x1FFFFFFFFLL);
                    v114 = v186;
                  }
                  else
                  {
                    v122 = 1;
                    while (v121 != (_QWORD ***)-4096)
                    {
                      v123 = v119 + v122++;
                      v119 = v123 & v118;
                      v121 = *(_QWORD ****)(v116 + 16 * v119);
                      if (v186 == v121)
                      {
                        v120 = (_QWORD *)(v116 + 16 * v119);
                        goto LABEL_190;
                      }
                    }
                  }
                  *((_BYTE *)v114 + 17) &= ~1u;
                }
              }
            }
          }
        }
      }
    }
LABEL_246:
    v153 = sub_1C477672C(a1 + 408, (uint64_t)a2);
    v154 = *(_QWORD *)(a1 + 416);
    v155 = 424;
    if (v154 == *(_QWORD *)(a1 + 408))
      v155 = 428;
    if (v153 != (_QWORD *)(v154 + 8 * *(unsigned int *)(a1 + v155)))
    {
      *v153 = -2;
      ++*(_DWORD *)(a1 + 432);
    }
    v184 = (uint64_t)a2;
    v185 = 6;
    v186 = 0;
    v187 = 0;
    if (MemoryPhi)
    {
      v187 = (int32x2_t ****)MemoryPhi;
      if ((MemoryPhi | 0x1000) != 0xFFFFFFFFFFFFF000)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v185);
    }
    sub_1C4EE4344((uint64_t)v183, a3, &v184, &v185);
    if (v187 != (int32x2_t ****)-8192 && v187 != (int32x2_t ****)-4096 && v187)
    {
      v156 = v185 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v185 & 0xFFFFFFFFFFFFFFF8) = v186;
      if (v186)
      {
        *v186 = (_QWORD **)((unint64_t)*v186 & 7 | v156);
      }
      else
      {
        v157 = v187;
        v158 = ***v187;
        v159 = (unint64_t)v158[303];
        if (v159 <= v156)
        {
          v160 = v158[305].u32[0];
          if (v159 + 16 * v160 > v156)
          {
            v161 = v160 - 1;
            LODWORD(v162) = v161 & ((v187 >> 4) ^ (v187 >> 9));
            v163 = (int32x2_t *****)(v159 + 16 * v162);
            v164 = *v163;
            if (v187 == *v163)
            {
LABEL_264:
              *v163 = (int32x2_t ****)-8192;
              v158[304] = vadd_s32(v158[304], (int32x2_t)0x1FFFFFFFFLL);
              v157 = v187;
            }
            else
            {
              v165 = 1;
              while (v164 != (int32x2_t ****)-4096)
              {
                v166 = v162 + v165++;
                v162 = v166 & v161;
                v164 = *(int32x2_t *****)(v159 + 16 * v162);
                if (v187 == v164)
                {
                  v163 = (int32x2_t *****)(v159 + 16 * v162);
                  goto LABEL_264;
                }
              }
            }
            *((_BYTE *)v157 + 17) &= ~1u;
          }
        }
      }
    }
    v167 = (unint64_t **)v188;
    if ((_DWORD)v189)
    {
      v168 = (unint64_t **)((char *)v188 + 24 * v189);
      do
      {
        v169 = (uint64_t)*(v168 - 1);
        if (v169 != -8192 && v169 != -4096 && v169 != 0)
        {
          v171 = (unint64_t)*(v168 - 3) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v171 = *(v168 - 2);
          v172 = *(v168 - 2);
          if (v172)
          {
            *v172 = *v172 & 7 | v171;
          }
          else
          {
            v173 = (uint64_t)*(v168 - 1);
            v174 = ***(int32x2_t ****)v173;
            v175 = (unint64_t)v174[303];
            if (v175 <= v171)
            {
              v176 = v174[305].u32[0];
              if (v175 + 16 * v176 > v171)
              {
                v177 = v176 - 1;
                LODWORD(v178) = v177 & ((v173 >> 4) ^ (v173 >> 9));
                v179 = (uint64_t *)(v175 + 16 * v178);
                v180 = *v179;
                if (v173 == *v179)
                {
LABEL_282:
                  *v179 = -8192;
                  v174[304] = vadd_s32(v174[304], (int32x2_t)0x1FFFFFFFFLL);
                  v173 = (uint64_t)*(v168 - 1);
                }
                else
                {
                  v181 = 1;
                  while (v180 != -4096)
                  {
                    v182 = v178 + v181++;
                    v178 = v182 & v177;
                    v180 = *(_QWORD *)(v175 + 16 * v178);
                    if (v173 == v180)
                    {
                      v179 = (uint64_t *)(v175 + 16 * v178);
                      goto LABEL_282;
                    }
                  }
                }
                *(_BYTE *)(v173 + 17) &= ~1u;
              }
            }
          }
        }
        v168 -= 3;
      }
      while (v168 != v167);
      v167 = (unint64_t **)v188;
    }
    if (v167 != &v190)
      free(v167);
    return MemoryPhi;
  }
  v34 = (uint64_t)llvm::MemorySSA::createMemoryPhi(*(llvm::MemorySSA **)a1, a2);
  MemoryPhi = v34;
  v188 = a2;
  v189 = 6;
  v190 = 0;
  v191 = 0;
  if (v34)
  {
    v191 = (int32x2_t ****)v34;
    if ((v34 | 0x1000) != 0xFFFFFFFFFFFFF000)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v189);
  }
  sub_1C4EE4344((uint64_t)&v184, a3, (uint64_t *)&v188, &v189);
  if (v191 == (int32x2_t ****)-8192 || v191 == (int32x2_t ****)-4096 || !v191)
    return MemoryPhi;
  v11 = v189 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v189 & 0xFFFFFFFFFFFFFFF8) = v190;
  v12 = v190;
  if (v190)
    goto LABEL_71;
  v13 = v191;
  v14 = ***v191;
  v15 = (unint64_t)v14[303];
  if (v15 <= v11)
  {
    v35 = v14[305].u32[0];
    if (v15 + 16 * v35 > v11)
    {
      v36 = v35 - 1;
      LODWORD(v18) = v36 & ((v191 >> 4) ^ (v191 >> 9));
      v19 = (int32x2_t *****)(v15 + 16 * v18);
      v37 = *v19;
      if (v191 != *v19)
      {
        v38 = 1;
        while (v37 != (int32x2_t ****)-4096)
        {
          v39 = v18 + v38++;
          v18 = v39 & v36;
          v37 = *(int32x2_t *****)(v15 + 16 * v18);
          if (v191 == v37)
          {
LABEL_43:
            v19 = (int32x2_t *****)(v15 + 16 * v18);
            goto LABEL_44;
          }
        }
        goto LABEL_45;
      }
      goto LABEL_44;
    }
  }
  return MemoryPhi;
}

uint64_t llvm::MemorySSAUpdater::getPreviousDefFromEnd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  int32x2_t ****v13;
  unint64_t v15;
  int32x2_t ****v16;
  int32x2_t *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int32x2_t *****v22;
  int32x2_t ****v23;
  int v24;
  int v25;
  char v27[24];
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  int32x2_t ****v31;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v5 = *(unsigned int *)(*(_QWORD *)a1 + 88);
  if (!(_DWORD)v5)
  {
LABEL_7:
    v7 = (uint64_t *)(v4 + 16 * v5);
    goto LABEL_8;
  }
  LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (uint64_t *)(v4 + 16 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v8 = *(_QWORD *)(v4 + 16 * v6);
      if (v8 == a2)
      {
        v7 = (uint64_t *)(v4 + 16 * v6);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v7 == (uint64_t *)(v4 + 16 * v5))
    return llvm::MemorySSAUpdater::getPreviousDefRecursive();
  v11 = (uint64_t *)v7[1];
  if (!v11)
    return llvm::MemorySSAUpdater::getPreviousDefRecursive();
  v12 = *v11;
  v28 = a2;
  v29 = 6;
  v30 = 0;
  v31 = 0;
  if (v12)
  {
    v13 = (int32x2_t ****)(v12 - 48);
    v31 = v13;
    if (v13 != (int32x2_t ****)-8192 && v13 != (int32x2_t ****)-4096 && v13 != 0)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v29);
  }
  sub_1C4EE4344((uint64_t)v27, a3, &v28, &v29);
  if (v31 != (int32x2_t ****)-8192 && v31 != (int32x2_t ****)-4096 && v31)
  {
    v15 = v29 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF8) = v30;
    if (v30)
    {
      *v30 = *v30 & 7 | v15;
    }
    else
    {
      v16 = v31;
      v17 = ***v31;
      v18 = (unint64_t)v17[303];
      if (v18 <= v15)
      {
        v19 = v17[305].u32[0];
        if (v18 + 16 * v19 > v15)
        {
          v20 = v19 - 1;
          LODWORD(v21) = v20 & ((v31 >> 4) ^ (v31 >> 9));
          v22 = (int32x2_t *****)(v18 + 16 * v21);
          v23 = *v22;
          if (v31 == *v22)
          {
LABEL_28:
            *v22 = (int32x2_t ****)-8192;
            v17[304] = vadd_s32(v17[304], (int32x2_t)0x1FFFFFFFFLL);
            v16 = v31;
          }
          else
          {
            v24 = 1;
            while (v23 != (int32x2_t ****)-4096)
            {
              v25 = v21 + v24++;
              v21 = v25 & v20;
              v23 = *(int32x2_t *****)(v18 + 16 * v21);
              if (v31 == v23)
              {
                v22 = (int32x2_t *****)(v18 + 16 * v21);
                goto LABEL_28;
              }
            }
          }
          *((_BYTE *)v16 + 17) &= ~1u;
        }
      }
    }
  }
  if (*v11)
    return *v11 - 48;
  else
    return 0;
}

void sub_1C4EDBC68(uint64_t a1, char *a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  char *v16;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v13 = v4 + 1;
    v14 = v5 + 24 * v4;
    if (v5 <= (unint64_t)a2 && v14 > (unint64_t)a2)
    {
      v16 = &a2[-v5];
      sub_1C61A6078(a1, v13);
      v5 = *(_QWORD *)a1;
      a2 = &v16[*(_QWORD *)a1];
    }
    else
    {
      sub_1C61A6078(a1, v13);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(_DWORD *)(a1 + 8);
  v7 = (unint64_t *)(v5 + 24 * v6);
  *v7 = 6;
  v7[1] = 0;
  v8 = (unint64_t)(v7 + 1);
  v9 = *((_QWORD *)a2 + 2);
  v7[2] = v9;
  if (v9 != -8192 && v9 != -4096 && v9 != 0)
  {
    v11 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    v7[1] = *(_QWORD *)v11;
    *(_QWORD *)v11 = v7;
    *v7 = v11 | 6;
    v12 = (uint64_t *)v7[1];
    if (v12)
      *v12 = *v12 & 7 | v8;
  }
  *(_DWORD *)(a1 + 8) = v6 + 1;
}

void llvm::MemorySSAUpdater::removeMemoryAccess(int32x2_t **this, llvm::MemoryAccess *a2, llvm::Value *a3)
{
  int v3;
  int v6;
  llvm::Value *v7;
  llvm::MemoryAccess *v8;
  llvm::Value **v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int i;
  char *v20;
  int v21;
  char *v22;
  _QWORD ***v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  int32x2_t *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  int v38;
  _DWORD *v39;
  int v41;
  uint64_t v42;
  llvm::Value **v43;
  unint64_t v44;
  _QWORD ***v45;
  int32x2_t *v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD ***v52;
  int v53;
  int v54;
  uint64_t v55;
  unint64_t *v56;
  _QWORD ***v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64x2_t v62;
  int64x2_t v63;
  char *v64;
  uint64_t v65;
  _QWORD v66[5];

  v3 = (int)a3;
  v66[4] = *MEMORY[0x1E0C80C00];
  v6 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v6 == 27)
  {
    v7 = (llvm::Value *)sub_1C4EE37B8((uint64_t)a2);
  }
  else
  {
    if (v6 == 25)
      v8 = a2;
    else
      v8 = 0;
    if (v8)
      v9 = (llvm::Value **)((char *)v8 - 32);
    else
      v9 = (llvm::Value **)((char *)a2 - 64);
    v7 = *v9;
  }
  v61 = 1;
  v62 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v63 = v62;
  v64 = (char *)v66;
  v65 = 0x400000000;
  if (v6 != 25)
  {
    v10 = *((_QWORD *)a2 + 1);
    if (v10)
    {
      if ((*((_BYTE *)a2 + 17) & 1) == 0
        || (llvm::ValueHandleBase::ValueIsRAUWd(a2, v7, a3), (v10 = *((_QWORD *)a2 + 1)) != 0))
      {
        v11 = (uint64_t *)((char *)v7 + 8);
        while (1)
        {
          v12 = *(_QWORD *)(v10 + 24);
          v13 = *(unsigned __int8 *)(v12 + 16);
          if (v12)
            v14 = (v13 - 27) >= 0xFFFFFFFE;
          else
            v14 = 0;
          if (!v14)
            goto LABEL_26;
          if (v13 == 26)
            break;
          *(_DWORD *)(v12 + 88) = -1;
          if (v3)
          {
LABEL_27:
            v16 = *(char **)(v10 + 24);
            if (v16[16] != 27)
              v16 = 0;
            v58 = v16;
            if (v16)
              sub_1C61A5D94((uint64_t)&v61, (uint64_t *)&v58);
          }
LABEL_32:
          if (*(_QWORD *)v10)
          {
            **(_QWORD **)(v10 + 16) = *(_QWORD *)(v10 + 8);
            v17 = *(_QWORD *)(v10 + 8);
            if (v17)
              *(_QWORD *)(v17 + 16) = *(_QWORD *)(v10 + 16);
          }
          *(_QWORD *)v10 = v7;
          if (v7)
          {
            v18 = *v11;
            *(_QWORD *)(v10 + 8) = *v11;
            if (v18)
              *(_QWORD *)(v18 + 16) = v10 + 8;
            *(_QWORD *)(v10 + 16) = v11;
            *v11 = v10;
          }
          v10 = *((_QWORD *)a2 + 1);
          if (!v10)
            goto LABEL_40;
        }
        *(_DWORD *)(v12 + 92) = -1;
        if (*(_QWORD *)(v12 - 32))
        {
          **(_QWORD **)(v12 - 16) = *(_QWORD *)(v12 - 24);
          v15 = *(_QWORD *)(v12 - 24);
          if (v15)
            *(_QWORD *)(v15 + 16) = *(_QWORD *)(v12 - 16);
        }
        *(_QWORD *)(v12 - 32) = 0;
LABEL_26:
        if (v3)
          goto LABEL_27;
        goto LABEL_32;
      }
    }
  }
LABEL_40:
  llvm::MemorySSA::removeFromLookups(*this, (uint64_t)a2);
  llvm::MemorySSA::removeFromLists(*this, (uint64_t)a2, 1);
  if ((_DWORD)v65)
  {
    v58 = (char *)&v60;
    v59 = 0x1000000000;
    sub_1C61A6688((unsigned int *)&v58, v64, &v64[8 * v65]);
    sub_1C61A6740(&v61);
    LODWORD(v65) = 0;
    for (i = v59; i; --i)
    {
      v20 = v58;
      v21 = v59;
      v22 = &v58[24 * v59];
      v55 = 4;
      v56 = 0;
      v23 = (_QWORD ***)*((_QWORD *)v22 - 1);
      v57 = v23;
      if (v23 && v23 != (_QWORD ***)-8192 && v23 != (_QWORD ***)-4096)
      {
        v24 = *((_QWORD *)v22 - 3) & 0xFFFFFFFFFFFFFFF8;
        v56 = *(unint64_t **)v24;
        *(_QWORD *)v24 = &v55;
        v55 = v24 | 4;
        if (v56)
          *v56 = *v56 & 7 | (unint64_t)&v56;
        v20 = v58;
      }
      LODWORD(v59) = v21 - 1;
      v25 = &v20[24 * (v21 - 1)];
      v26 = *((_QWORD *)v25 + 2);
      if (v26 && v26 != -8192 && v26 != -4096)
      {
        v27 = *(_QWORD *)v25 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v27 = *((_QWORD *)v25 + 1);
        v28 = (unint64_t *)*((_QWORD *)v25 + 1);
        if (v28)
        {
          *v28 = *v28 & 7 | v27;
        }
        else
        {
          v29 = *((_QWORD *)v25 + 2);
          v30 = ***(int32x2_t ****)v29;
          v31 = (unint64_t)v30[303];
          if (v31 <= v27)
          {
            v32 = v30[305].u32[0];
            if (v31 + 16 * v32 > v27)
            {
              v33 = v32 - 1;
              LODWORD(v34) = v33 & ((v29 >> 4) ^ (v29 >> 9));
              v35 = (uint64_t *)(v31 + 16 * v34);
              v36 = *v35;
              if (v29 == *v35)
              {
LABEL_64:
                *v35 = -8192;
                v30[304] = vadd_s32(v30[304], (int32x2_t)0x1FFFFFFFFLL);
                v29 = *((_QWORD *)v25 + 2);
              }
              else
              {
                v37 = 1;
                while (v36 != -4096)
                {
                  v38 = v34 + v37++;
                  v34 = v38 & v33;
                  v36 = *(_QWORD *)(v31 + 16 * v34);
                  if (v29 == v36)
                  {
                    v35 = (uint64_t *)(v31 + 16 * v34);
                    goto LABEL_64;
                  }
                }
              }
              *(_BYTE *)(v29 + 17) &= ~1u;
            }
          }
        }
      }
      v39 = v57;
      if (v57 != (_QWORD ***)-8192 && v57 != (_QWORD ***)-4096 && v57 != 0)
      {
        v44 = v55 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v55 & 0xFFFFFFFFFFFFFFF8) = v56;
        if (v56)
        {
          *v56 = *v56 & 7 | v44;
        }
        else
        {
          v45 = v57;
          v46 = (int32x2_t *)***v57;
          v47 = (unint64_t)v46[303];
          if (v47 <= v44)
          {
            v48 = v46[305].u32[0];
            if (v47 + 16 * v48 > v44)
            {
              v49 = v48 - 1;
              LODWORD(v50) = v49 & ((v57 >> 4) ^ (v57 >> 9));
              v51 = (_QWORD *)(v47 + 16 * v50);
              v52 = (_QWORD ***)*v51;
              if (v57 == (_QWORD ***)*v51)
              {
LABEL_88:
                *v51 = -8192;
                v46[304] = vadd_s32(v46[304], (int32x2_t)0x1FFFFFFFFLL);
                v45 = v57;
              }
              else
              {
                v53 = 1;
                while (v52 != (_QWORD ***)-4096)
                {
                  v54 = v50 + v53++;
                  v50 = v54 & v49;
                  v52 = *(_QWORD ****)(v47 + 16 * v50);
                  if (v57 == v52)
                  {
                    v51 = (_QWORD *)(v47 + 16 * v50);
                    goto LABEL_88;
                  }
                }
              }
              *((_BYTE *)v45 + 17) &= ~1u;
            }
          }
        }
      }
      if (v39)
      {
        v41 = v39[5];
        if ((v41 & 0x40000000) != 0)
        {
          v43 = (llvm::Value **)*((_QWORD *)v39 - 1);
          v42 = v41 & 0x7FFFFFF;
        }
        else
        {
          v42 = v41 & 0x7FFFFFF;
          v43 = (llvm::Value **)&v39[-8 * v42];
        }
        v55 = (uint64_t)v43;
        v56 = (unint64_t *)&v43[4 * v42];
        sub_1C4EDC95C((llvm::MemorySSAUpdater *)this, (llvm::ValueAsMetadata *)v39, (llvm::Value ***)&v55);
      }
    }
    sub_1C4EE41F8(&v58);
  }
  if (v64 != (char *)v66)
    free(v64);
  if ((v61 & 1) == 0)
    MEMORY[0x1CAA32FB4](v62.i64[0], 8);
}

uint64_t llvm::MemorySSAUpdater::getPreviousDef(llvm::MemorySSAUpdater *this, llvm::BasicBlock **a2)
{
  uint64_t PreviousDefInBlock;
  uint64_t PreviousDefRecursive;
  _QWORD *v6;
  _QWORD *v8[2];
  unsigned int v9;

  PreviousDefInBlock = llvm::MemorySSAUpdater::getPreviousDefInBlock((uint64_t *)this, (uint64_t)a2);
  if (PreviousDefInBlock)
    return PreviousDefInBlock;
  v8[0] = 0;
  v8[1] = 0;
  v9 = 0;
  PreviousDefRecursive = llvm::MemorySSAUpdater::getPreviousDefRecursive((uint64_t)this, a2[8], (uint64_t)v8);
  v6 = v8[0];
  sub_1C4EE4BE4(v8[0], v9);
  MEMORY[0x1CAA32FB4](v6, 8);
  return PreviousDefRecursive;
}

uint64_t llvm::MemorySSAUpdater::getPreviousDefInBlock(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t result;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;

  v2 = *a1;
  v3 = *(_QWORD *)(a2 + 64);
  v4 = *(_QWORD *)(*a1 + 72);
  v5 = *(unsigned int *)(*a1 + 88);
  v6 = v3 >> 4;
  if ((_DWORD)v5)
  {
    LODWORD(v7) = (v6 ^ (v3 >> 9)) & (v5 - 1);
    v8 = (uint64_t *)(v4 + 16 * v7);
    v9 = *v8;
    if (v3 == *v8)
      goto LABEL_8;
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v5 - 1);
      v9 = *(_QWORD *)(v4 + 16 * v7);
      if (v3 == v9)
      {
        v8 = (uint64_t *)(v4 + 16 * v7);
        goto LABEL_8;
      }
    }
  }
  v8 = (uint64_t *)(v4 + 16 * v5);
LABEL_8:
  if (v8 == (uint64_t *)(v4 + 16 * v5))
    return 0;
  v12 = v8[1];
  if (!v12)
    return 0;
  if (*(_BYTE *)(a2 + 16) == 25)
  {
    v13 = *(_QWORD *)(v2 + 48);
    v14 = *(unsigned int *)(v2 + 64);
    if ((_DWORD)v14)
    {
      LODWORD(v15) = (v14 - 1) & (v6 ^ (v3 >> 9));
      v16 = (uint64_t *)(v13 + 16 * v15);
      v17 = *v16;
      if (v3 == *v16)
        goto LABEL_23;
      v18 = 1;
      while (v17 != -4096)
      {
        v19 = v15 + v18++;
        v15 = v19 & (v14 - 1);
        v17 = *(_QWORD *)(v13 + 16 * v15);
        if (v3 == v17)
        {
          v16 = (uint64_t *)(v13 + 16 * v15);
          goto LABEL_23;
        }
      }
    }
    v16 = (uint64_t *)(v13 + 16 * v14);
LABEL_23:
    if (v16 == (uint64_t *)(v13 + 16 * v14))
      v22 = 0;
    else
      v22 = (_QWORD *)v16[1];
    v23 = (_QWORD *)(a2 + 32);
    while (1)
    {
      v23 = (_QWORD *)*v23;
      if (v23 == v22)
        break;
      result = (uint64_t)(v23 - 4);
      if (v23)
        v24 = v23 - 4;
      else
        v24 = 0;
      if (*((_BYTE *)v24 + 16) != 25)
        return result;
    }
    return 0;
  }
  v20 = *(_QWORD *)(a2 + 48);
  result = v20 ? v20 - 48 : 0;
  if (v20 == v12)
    return 0;
  return result;
}

int32x2_t ****llvm::MemorySSAUpdater::recursePhi(llvm::MemorySSAUpdater *this, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int32x2_t ****v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int32x2_t ****v16;
  int32x2_t *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int32x2_t *****v22;
  int32x2_t ****v23;
  int v24;
  int v25;
  unint64_t v26;
  BOOL v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  llvm::MemoryPhi **v31;
  BOOL v32;
  int32x2_t ****v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  int32x2_t *v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  int32x2_t ****v50;
  int32x2_t *v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  int32x2_t *****v56;
  int32x2_t ****v57;
  int v58;
  int v59;
  uint64_t v61;
  unint64_t *v62;
  int32x2_t ****v63;
  uint64_t v64;
  unint64_t *v65;
  int32x2_t ****v66;
  uint64_t *v67;
  uint64_t v68;
  _QWORD v69[25];

  v69[24] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v61 = 6;
  v62 = 0;
  v63 = (int32x2_t ****)a2;
  if ((a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v61);
  v67 = v69;
  v68 = 0x800000000;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    LODWORD(v5) = 0;
    do
    {
      v6 = *(int32x2_t *****)(v4 + 24);
      v64 = 6;
      v65 = 0;
      v66 = 0;
      if (v6)
      {
        v66 = v6;
        if (((unint64_t)v6 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v64);
          LODWORD(v5) = v68;
        }
      }
      v7 = v67;
      if (v5 >= HIDWORD(v68))
      {
        v26 = v5 + 1;
        v27 = &v67[3 * v5] > &v64;
        if (v67 <= &v64 && v27)
        {
          v28 = (char *)((char *)&v64 - (char *)v67);
          sub_1C4EE4D00((uint64_t)&v67, v26);
          v7 = v67;
          v8 = (uint64_t *)&v28[(_QWORD)v67];
        }
        else
        {
          sub_1C4EE4D00((uint64_t)&v67, v26);
          v8 = &v64;
          v7 = v67;
        }
      }
      else
      {
        v8 = &v64;
      }
      v9 = v68;
      v10 = (unint64_t *)&v7[3 * v68];
      *v10 = 6;
      v10[1] = 0;
      v11 = v8[2];
      v10[2] = v11;
      if (v11 != -8192 && v11 != -4096 && v11 != 0)
      {
        v13 = *v8 & 0xFFFFFFFFFFFFFFF8;
        v10[1] = *(_QWORD *)v13;
        *(_QWORD *)v13 = v10;
        *v10 = v13 | 6;
        v14 = (unint64_t *)v10[1];
        if (v14)
          *v14 = *v14 & 7 | (unint64_t)(v10 + 1);
      }
      v5 = (v9 + 1);
      LODWORD(v68) = v9 + 1;
      if (v66 != (int32x2_t ****)-8192 && v66 != (int32x2_t ****)-4096 && v66)
      {
        v15 = v64 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v64 & 0xFFFFFFFFFFFFFFF8) = v65;
        if (v65)
        {
          *v65 = *v65 & 7 | v15;
        }
        else
        {
          v16 = v66;
          v17 = ***v66;
          v18 = (unint64_t)v17[303];
          if (v18 <= v15)
          {
            v19 = v17[305].u32[0];
            if (v18 + 16 * v19 > v15)
            {
              v20 = v19 - 1;
              LODWORD(v21) = v20 & ((v66 >> 4) ^ (v66 >> 9));
              v22 = (int32x2_t *****)(v18 + 16 * v21);
              v23 = *v22;
              if (v66 == *v22)
              {
LABEL_29:
                *v22 = (int32x2_t ****)-8192;
                v17[304] = vadd_s32(v17[304], (int32x2_t)0x1FFFFFFFFLL);
                v16 = v66;
              }
              else
              {
                v24 = 1;
                while (v23 != (int32x2_t ****)-4096)
                {
                  v25 = v21 + v24++;
                  v21 = v25 & v20;
                  v23 = *(int32x2_t *****)(v18 + 16 * v21);
                  if (v66 == v23)
                  {
                    v22 = (int32x2_t *****)(v18 + 16 * v21);
                    goto LABEL_29;
                  }
                }
              }
              *((_BYTE *)v16 + 17) &= ~1u;
            }
          }
        }
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4);
    v29 = v67;
    if ((_DWORD)v5)
    {
      v30 = 24 * v5;
      v31 = (llvm::MemoryPhi **)(v67 + 2);
      do
      {
        if (*v31)
          v32 = *((_BYTE *)*v31 + 16) == 27;
        else
          v32 = 0;
        if (v32)
          llvm::MemorySSAUpdater::tryRemoveTrivialPhi(this, *v31);
        v31 += 3;
        v30 -= 24;
      }
      while (v30);
      v33 = v63;
      v29 = v67;
      if ((_DWORD)v68)
      {
        v34 = &v67[3 * v68];
        do
        {
          v35 = *(v34 - 1);
          if (v35 != -8192 && v35 != -4096 && v35 != 0)
          {
            v37 = *(v34 - 3) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v37 = *(v34 - 2);
            v38 = (unint64_t *)*(v34 - 2);
            if (v38)
            {
              *v38 = *v38 & 7 | v37;
            }
            else
            {
              v39 = *(v34 - 1);
              v40 = ***(int32x2_t ****)v39;
              v41 = (unint64_t)v40[303];
              if (v41 <= v37)
              {
                v42 = v40[305].u32[0];
                if (v41 + 16 * v42 > v37)
                {
                  v43 = v42 - 1;
                  LODWORD(v44) = v43 & ((v39 >> 4) ^ (v39 >> 9));
                  v45 = (uint64_t *)(v41 + 16 * v44);
                  v46 = *v45;
                  if (v39 == *v45)
                  {
LABEL_62:
                    *v45 = -8192;
                    v40[304] = vadd_s32(v40[304], (int32x2_t)0x1FFFFFFFFLL);
                    v39 = *(v34 - 1);
                  }
                  else
                  {
                    v47 = 1;
                    while (v46 != -4096)
                    {
                      v48 = v44 + v47++;
                      v44 = v48 & v43;
                      v46 = *(_QWORD *)(v41 + 16 * v44);
                      if (v39 == v46)
                      {
                        v45 = (uint64_t *)(v41 + 16 * v44);
                        goto LABEL_62;
                      }
                    }
                  }
                  *(_BYTE *)(v39 + 17) &= ~1u;
                }
              }
            }
          }
          v34 -= 3;
        }
        while (v34 != v29);
        v29 = v67;
      }
      goto LABEL_70;
    }
  }
  else
  {
    v29 = v69;
  }
  v33 = v63;
LABEL_70:
  if (v29 != v69)
    free(v29);
  if (v63 != (int32x2_t ****)-8192 && v63 != (int32x2_t ****)-4096 && v63)
  {
    v49 = v61 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v61 & 0xFFFFFFFFFFFFFFF8) = v62;
    if (v62)
    {
      *v62 = *v62 & 7 | v49;
    }
    else
    {
      v50 = v63;
      v51 = ***v63;
      v52 = (unint64_t)v51[303];
      if (v52 <= v49)
      {
        v53 = v51[305].u32[0];
        if (v52 + 16 * v53 > v49)
        {
          v54 = v53 - 1;
          LODWORD(v55) = v54 & ((v63 >> 4) ^ (v63 >> 9));
          v56 = (int32x2_t *****)(v52 + 16 * v55);
          v57 = *v56;
          if (v63 == *v56)
          {
LABEL_83:
            *v56 = (int32x2_t ****)-8192;
            v51[304] = vadd_s32(v51[304], (int32x2_t)0x1FFFFFFFFLL);
            v50 = v63;
          }
          else
          {
            v58 = 1;
            while (v57 != (int32x2_t ****)-4096)
            {
              v59 = v55 + v58++;
              v55 = v59 & v54;
              v57 = *(int32x2_t *****)(v52 + 16 * v55);
              if (v63 == v57)
              {
                v56 = (int32x2_t *****)(v52 + 16 * v55);
                goto LABEL_83;
              }
            }
          }
          *((_BYTE *)v50 + 17) &= ~1u;
        }
      }
    }
  }
  return v33;
}

uint64_t llvm::MemorySSAUpdater::tryRemoveTrivialPhi(llvm::MemorySSAUpdater *this, llvm::MemoryPhi *a2)
{
  return sub_1C4EDC95C(this);
}

int32x2_t ****sub_1C4EDC95C(llvm::MemorySSAUpdater *this, llvm::ValueAsMetadata *a2, llvm::Value ***a3)
{
  llvm::MemoryAccess *v3;
  _QWORD *i;
  unint64_t v6;
  uint64_t v7;
  llvm::ValueAsMetadata **v8;
  uint64_t v9;
  llvm::Value **v10;
  llvm::Value **v11;
  llvm::Value *v12;
  llvm::Value *v13;

  v3 = a2;
  if (*((_QWORD *)this + 75))
  {
    for (i = (_QWORD *)*((_QWORD *)this + 74); i; i = (_QWORD *)*i)
    {
      v6 = i[4];
      if (v6 <= (unint64_t)a2)
      {
        if (v6 >= (unint64_t)a2)
          return (int32x2_t ****)v3;
        ++i;
      }
    }
  }
  else
  {
    v7 = *((unsigned int *)this + 128);
    if ((_DWORD)v7)
    {
      v8 = (llvm::ValueAsMetadata **)*((_QWORD *)this + 63);
      v9 = 8 * v7;
      while (*v8 != a2)
      {
        ++v8;
        v9 -= 8;
        if (!v9)
          goto LABEL_14;
      }
      if (v9)
        return (int32x2_t ****)v3;
    }
  }
LABEL_14:
  v10 = *a3;
  v11 = a3[1];
  if (*a3 == v11)
    return *(int32x2_t *****)(*(_QWORD *)this + 96);
  v12 = 0;
  do
  {
    v13 = *v10;
    if (*v10 == a2 || v13 == v12)
    {
      v13 = v12;
    }
    else if (v12)
    {
      return (int32x2_t ****)v3;
    }
    v10 += 4;
    v12 = v13;
  }
  while (v10 != v11);
  if (!v13)
    return *(int32x2_t *****)(*(_QWORD *)this + 96);
  if (a2)
  {
    llvm::Value::doRAUW(a2, v13, (llvm::Value *)1);
    llvm::MemorySSAUpdater::removeMemoryAccess(this, v3, 0);
  }
  return llvm::MemorySSAUpdater::recursePhi(this, (unint64_t)v13);
}

void llvm::MemorySSAUpdater::insertUse(llvm::MemorySSAUpdater *this, llvm::BasicBlock **a2, int a3)
{
  void *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  int32x2_t *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t PreviousDef;
  llvm::BasicBlock **v25;
  llvm::BasicBlock **v26;
  llvm::BasicBlock ***v27;
  llvm::BasicBlock *v28;
  llvm::BasicBlock *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v48;
  int v49;
  unsigned int v50;
  void *v51;
  llvm::BasicBlock *v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  int v56;
  _BYTE v57[128];

  v6 = (void *)*((_QWORD *)this + 52);
  if (v6 == *((void **)this + 51))
    goto LABEL_2;
  v46 = *((unsigned int *)this + 106);
  if (v46 < 0x21 || 4 * (*((_DWORD *)this + 107) - *((_DWORD *)this + 108)) >= v46)
  {
    memset(v6, 255, 8 * v46);
LABEL_2:
    *(_QWORD *)((char *)this + 428) = 0;
    goto LABEL_3;
  }
  free(v6);
  v48 = *((_DWORD *)this + 107) - *((_DWORD *)this + 108);
  v49 = 1 << (33 - __clz(v48 - 1));
  if (v48 <= 0x10)
    v50 = 32;
  else
    v50 = v49;
  *((_DWORD *)this + 106) = v50;
  *(_QWORD *)((char *)this + 428) = 0;
  v51 = malloc_type_malloc(8 * v50, 0x4065EBACuLL);
  if (!v51)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *((_QWORD *)this + 52) = v51;
  memset(v51, 255, 8 * *((unsigned int *)this + 106));
LABEL_3:
  v7 = *((_DWORD *)this + 4);
  if (v7)
  {
    v8 = *((_QWORD *)this + 1);
    v9 = v8 + 24 * v7;
    do
    {
      v10 = *(_QWORD *)(v9 - 8);
      if (v10 != -8192 && v10 != -4096 && v10 != 0)
      {
        v12 = *(_QWORD *)(v9 - 24) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v12 = *(_QWORD *)(v9 - 16);
        v13 = *(unint64_t **)(v9 - 16);
        if (v13)
        {
          *v13 = *v13 & 7 | v12;
        }
        else
        {
          v14 = *(_QWORD *)(v9 - 8);
          v15 = ***(int32x2_t ****)v14;
          v16 = (unint64_t)v15[303];
          if (v16 <= v12)
          {
            v17 = v15[305].u32[0];
            if (v16 + 16 * v17 > v12)
            {
              v18 = v17 - 1;
              LODWORD(v19) = v18 & ((v14 >> 4) ^ (v14 >> 9));
              v20 = (uint64_t *)(v16 + 16 * v19);
              v21 = *v20;
              if (v14 == *v20)
              {
LABEL_21:
                *v20 = -8192;
                v15[304] = vadd_s32(v15[304], (int32x2_t)0x1FFFFFFFFLL);
                v14 = *(_QWORD *)(v9 - 8);
              }
              else
              {
                v22 = 1;
                while (v21 != -4096)
                {
                  v23 = v19 + v22++;
                  v19 = v23 & v18;
                  v21 = *(_QWORD *)(v16 + 16 * v19);
                  if (v14 == v21)
                  {
                    v20 = (uint64_t *)(v16 + 16 * v19);
                    goto LABEL_21;
                  }
                }
              }
              *(_BYTE *)(v14 + 17) &= ~1u;
            }
          }
        }
      }
      v9 -= 24;
    }
    while (v9 != v8);
  }
  *((_DWORD *)this + 4) = 0;
  PreviousDef = llvm::MemorySSAUpdater::getPreviousDef(this, a2);
  if (*((_BYTE *)a2 + 16) == 25)
    v25 = a2;
  else
    v25 = 0;
  if (v25)
    v26 = v25 - 4;
  else
    v26 = a2 - 8;
  if (*v26)
  {
    *(_QWORD *)v26[2] = v26[1];
    v52 = v26[1];
    if (v52)
      *((_QWORD *)v52 + 2) = v26[2];
  }
  *v26 = (llvm::BasicBlock *)PreviousDef;
  if (PreviousDef)
  {
    v29 = *(llvm::BasicBlock **)(PreviousDef + 8);
    v27 = (llvm::BasicBlock ***)(PreviousDef + 8);
    v28 = v29;
    v26[1] = v29;
    if (v29)
      *((_QWORD *)v28 + 2) = v26 + 1;
    v26[2] = (llvm::BasicBlock *)v27;
    *v27 = v26;
  }
  if (a3)
  {
    v30 = *((_DWORD *)this + 4);
    if (v30)
    {
      v53 = v57;
      v54 = v57;
      v55 = 16;
      v56 = 0;
      v31 = (uint64_t)a2[8];
      v32 = *(_QWORD *)(*(_QWORD *)this + 72);
      v33 = *(unsigned int *)(*(_QWORD *)this + 88);
      if ((_DWORD)v33)
      {
        LODWORD(v34) = ((v31 >> 4) ^ (v31 >> 9)) & (v33 - 1);
        v35 = (uint64_t *)(v32 + 16 * v34);
        v36 = *v35;
        if (v31 == *v35)
          goto LABEL_44;
        v37 = 1;
        while (v36 != -4096)
        {
          v38 = v34 + v37++;
          v34 = v38 & (v33 - 1);
          v36 = *(_QWORD *)(v32 + 16 * v34);
          if (v31 == v36)
          {
            v35 = (uint64_t *)(v32 + 16 * v34);
            goto LABEL_44;
          }
        }
      }
      v35 = (uint64_t *)(v32 + 16 * v33);
LABEL_44:
      if (v35 != (uint64_t *)(v32 + 16 * v33))
      {
        v39 = v35[1];
        if (v39)
        {
          v40 = *(_QWORD *)(v39 + 8);
          v41 = v40 - 48;
          if (v40)
            v42 = v40 - 48;
          else
            v42 = 0;
          if (v40)
            v43 = *(_BYTE *)(v42 + 16) == 26;
          else
            v43 = 0;
          if (v43)
            v41 = *(_QWORD *)(v42 - 64);
          sub_1C4EDCE08(*(_QWORD *)this, v31, v41, (llvm::SmallPtrSetImplBase *)&v53);
          v30 = *((_DWORD *)this + 4);
        }
      }
      if (v30)
      {
        v44 = 24 * v30;
        v45 = *((_QWORD *)this + 1) + 16;
        do
        {
          if (*(_QWORD *)v45)
            sub_1C4EDCE08(*(_QWORD *)this, *(_QWORD *)(*(_QWORD *)v45 + 64), 0, (llvm::SmallPtrSetImplBase *)&v53);
          v45 += 24;
          v44 -= 24;
        }
        while (v44);
      }
      if (v54 != v53)
        free(v54);
    }
  }
}

void sub_1C4EDCE08(uint64_t a1, uint64_t a2, uint64_t a3, llvm::SmallPtrSetImplBase *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t *v12;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 24);
  v6 = *(unsigned int *)(v4 + 40);
  if ((_DWORD)v6)
  {
    LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v8 = (uint64_t *)(v5 + 16 * v7);
    v9 = *v8;
    if (*v8 == a2)
      goto LABEL_8;
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v9 = *(_QWORD *)(v5 + 16 * v7);
      if (v9 == a2)
      {
        v8 = (uint64_t *)(v5 + 16 * v7);
        goto LABEL_8;
      }
    }
  }
  v8 = (uint64_t *)(v5 + 16 * v6);
LABEL_8:
  if (v8 == (uint64_t *)(v5 + 16 * v6))
    v12 = 0;
  else
    v12 = (uint64_t *)v8[1];
  llvm::MemorySSA::renamePass(a1, v12, a3, a4, 1, 1);
}

char **llvm::MemorySSAUpdater::insertDef(llvm::MemorySSAUpdater *this, llvm::MemoryDef *a2, int a3)
{
  char **result;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  int32x2_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  int32x2_t *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  llvm::MemoryDef *v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t PreviousDef;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm::MemoryDef *v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  llvm::BasicBlock **v53;
  llvm::BasicBlock **v54;
  llvm::BasicBlock *v55;
  llvm::MemorySSA *v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  llvm::BasicBlock *v61;
  int v62;
  int v63;
  uint64_t MemoryPhi;
  uint64_t v65;
  int v66;
  uint64_t v67;
  char *v68;
  unint64_t v70;
  llvm::MemoryDef *v71;
  int32x2_t *v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  llvm::MemoryDef **v77;
  llvm::MemoryDef *v78;
  int v79;
  int v80;
  char *v81;
  uint64_t v82;
  unint64_t v84;
  unint64_t *v85;
  uint64_t v86;
  int32x2_t *v87;
  unint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  BOOL v102;
  uint64_t v104;
  uint64_t PreviousDefFromEnd;
  uint64_t v106;
  unsigned int v107;
  BOOL v108;
  llvm::MemoryDef **v110;
  llvm::MemoryDef **v111;
  llvm::MemoryDef *v112;
  _QWORD *v114;
  unsigned int v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  llvm::MemoryDef *v123;
  int32x2_t *v124;
  unint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  llvm::MemoryDef **v129;
  llvm::MemoryDef *v130;
  int v131;
  int v132;
  llvm::MemoryDef *v133;
  _QWORD *v135;
  int v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v141;
  uint64_t *v142;
  unint64_t v143;
  llvm::MemoryDef *v144;
  int32x2_t *v145;
  unint64_t v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  llvm::MemoryDef **v150;
  llvm::MemoryDef *v151;
  int v152;
  int v153;
  _QWORD *v154;
  int v155;
  char *v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v160;
  uint64_t *v161;
  unint64_t v162;
  llvm::MemoryDef *v163;
  int32x2_t *v164;
  unint64_t v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  llvm::MemoryDef **v169;
  llvm::MemoryDef *v170;
  int v171;
  int v172;
  int32x2_t v173;
  unsigned int v174;
  char *v175;
  char *v176;
  uint64_t v177;
  unint64_t v179;
  unint64_t *v180;
  uint64_t v181;
  int32x2_t *v182;
  unint64_t v183;
  uint64_t v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  int v189;
  int v190;
  uint64_t v191;
  llvm::MemoryPhi **v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  int v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  BOOL v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  uint64_t v213;
  char *v214;
  char *v215;
  unsigned int v216;
  int v217;
  unsigned int v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  unint64_t *v224;
  llvm::MemoryDef *v225;
  uint64_t v226[2];
  char v227;
  _QWORD *v228;
  _BYTE *v229;
  _BYTE *v230;
  uint64_t v231;
  int v232;
  _BYTE v233[16];
  void *v234;
  uint64_t v235;
  _BYTE v236[32];
  void *v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  _BYTE v241[240];
  char *v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  _QWORD *v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  _QWORD v250[26];

  v250[24] = *MEMORY[0x1E0C80C00];
  result = (char **)llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(*(_QWORD *)(*(_QWORD *)this + 8), *((_QWORD *)a2 + 8));
  if ((result & 1) == 0)
  {
    v26 = *(_QWORD *)(*(_QWORD *)this + 96);
    if (*((_BYTE *)a2 + 16) == 25)
      v27 = a2;
    else
      v27 = 0;
    if (v27)
      v28 = (char *)v27 - 32;
    else
      v28 = (char *)a2 - 64;
    if (*(_QWORD *)v28)
    {
      **((_QWORD **)v28 + 2) = *((_QWORD *)v28 + 1);
      v220 = *((_QWORD *)v28 + 1);
      if (v220)
        *(_QWORD *)(v220 + 16) = *((_QWORD *)v28 + 2);
    }
    *(_QWORD *)v28 = v26;
    if (v26)
    {
      v31 = *(_QWORD *)(v26 + 8);
      v29 = (_QWORD *)(v26 + 8);
      v30 = v31;
      *((_QWORD *)v28 + 1) = v31;
      if (v31)
        *(_QWORD *)(v30 + 16) = v28 + 8;
      *((_QWORD *)v28 + 2) = v29;
      *v29 = v28;
    }
    return result;
  }
  v7 = (void *)*((_QWORD *)this + 52);
  if (v7 != *((void **)this + 51))
  {
    v39 = *((unsigned int *)this + 106);
    if (v39 >= 0x21 && 4 * (*((_DWORD *)this + 107) - *((_DWORD *)this + 108)) < v39)
    {
      free(v7);
      v216 = *((_DWORD *)this + 107) - *((_DWORD *)this + 108);
      v217 = 1 << (33 - __clz(v216 - 1));
      if (v216 <= 0x10)
        v218 = 32;
      else
        v218 = v217;
      *((_DWORD *)this + 106) = v218;
      *(_QWORD *)((char *)this + 428) = 0;
      v219 = malloc_type_malloc(8 * v218, 0x4065EBACuLL);
      if (!v219)
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      *((_QWORD *)this + 52) = v219;
      memset(v219, 255, 8 * *((unsigned int *)this + 106));
      goto LABEL_4;
    }
    memset(v7, 255, 8 * v39);
  }
  *(_QWORD *)((char *)this + 428) = 0;
LABEL_4:
  v8 = *((_QWORD *)this + 1);
  v9 = *((_DWORD *)this + 4);
  v10 = (int32x2_t *)&unk_1C640E000;
  if (v9)
  {
    v11 = v8 + 24 * v9;
    do
    {
      v12 = *(_QWORD *)(v11 - 8);
      if (v12 != -8192)
      {
        v13 = v12 == -4096 || v12 == 0;
        if (!v13)
        {
          v14 = *(_QWORD *)(v11 - 24) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v14 = *(_QWORD *)(v11 - 16);
          v15 = *(unint64_t **)(v11 - 16);
          if (v15)
          {
            *v15 = *v15 & 7 | v14;
          }
          else
          {
            v16 = *(_QWORD *)(v11 - 8);
            v17 = ***(int32x2_t ****)v16;
            v18 = (unint64_t)v17[303];
            if (v18 <= v14)
            {
              v19 = v17[305].u32[0];
              if (v18 + 16 * v19 > v14)
              {
                v20 = v19 - 1;
                LODWORD(v21) = v20 & ((v16 >> 4) ^ (v16 >> 9));
                v22 = (uint64_t *)(v18 + 16 * v21);
                v23 = *v22;
                if (v16 == *v22)
                {
LABEL_22:
                  *v22 = -8192;
                  v17[304] = vadd_s32(v17[304], (int32x2_t)0x1FFFFFFFFLL);
                  v16 = *(_QWORD *)(v11 - 8);
                }
                else
                {
                  v24 = 1;
                  while (v23 != -4096)
                  {
                    v25 = v21 + v24++;
                    v21 = v25 & v20;
                    v23 = *(_QWORD *)(v18 + 16 * v21);
                    if (v16 == v23)
                    {
                      v22 = (uint64_t *)(v18 + 16 * v21);
                      goto LABEL_22;
                    }
                  }
                }
                *(_BYTE *)(v16 + 17) &= ~1u;
              }
            }
          }
        }
      }
      v11 -= 24;
    }
    while (v11 != v8);
  }
  *((_DWORD *)this + 4) = 0;
  PreviousDef = llvm::MemorySSAUpdater::getPreviousDef(this, (llvm::BasicBlock **)a2);
  v33 = PreviousDef;
  v34 = 0;
  if (*(_QWORD *)(PreviousDef + 64) == *((_QWORD *)a2 + 8))
  {
    if (*(_BYTE *)(PreviousDef + 16) != 27)
      goto LABEL_51;
    v35 = *((_QWORD *)this + 1);
    v36 = *((unsigned int *)this + 4);
    if ((_DWORD)v36)
    {
      v37 = 24 * v36;
      v38 = *((_QWORD *)this + 1);
      while (*(_QWORD *)(v38 + 16) != PreviousDef)
      {
        v38 += 24;
        v37 -= 24;
        if (!v37)
        {
          v38 = v35 + 24 * v36;
          break;
        }
      }
    }
    else
    {
      v38 = *((_QWORD *)this + 1);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((v38 - v35) >> 3) != v36)
    {
      v34 = 0;
    }
    else
    {
LABEL_51:
      v237 = a2;
      llvm::Value::replaceUsesWithIf((llvm::Value *)PreviousDef, a2, (unsigned int (*)(uint64_t, uint64_t))sub_1C4EE4EEC, (uint64_t)&v237);
      v34 = 1;
    }
  }
  if (*((_BYTE *)a2 + 16) == 25)
    v41 = a2;
  else
    v41 = 0;
  if (v41)
    v42 = (char *)v41 - 32;
  else
    v42 = (char *)a2 - 64;
  if (*(_QWORD *)v42)
  {
    **((_QWORD **)v42 + 2) = *((_QWORD *)v42 + 1);
    v221 = *((_QWORD *)v42 + 1);
    if (v221)
      *(_QWORD *)(v221 + 16) = *((_QWORD *)v42 + 2);
  }
  *(_QWORD *)v42 = v33;
  if (v33)
  {
    v45 = *(_QWORD *)(v33 + 8);
    v44 = (_QWORD *)(v33 + 8);
    v43 = v45;
    *((_QWORD *)v42 + 1) = v45;
    if (v45)
      *(_QWORD *)(v43 + 16) = v42 + 8;
    *((_QWORD *)v42 + 2) = v44;
    *v44 = v42;
  }
  v46 = *((_QWORD *)this + 1);
  v47 = v46 + 24 * *((unsigned int *)this + 4);
  v248 = (char *)v250;
  v249 = 0x800000000;
  sub_1C4EDE7F8((unsigned int *)&v248, v46, v47);
  v242 = (char *)&v244;
  v243 = 0x800000000;
  v247 = 0;
  v246 = 0;
  v245 = (char *)&v246;
  if ((v34 & 1) != 0)
  {
    v48 = *((_DWORD *)this + 4);
    v49 = v48;
    goto LABEL_247;
  }
  v229 = v233;
  v230 = v233;
  v231 = 2;
  v232 = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v229, *((_QWORD *)a2 + 8));
  v50 = *((unsigned int *)this + 4);
  if ((_DWORD)v50)
  {
    v51 = 24 * v50;
    v52 = *((_QWORD *)this + 1) + 16;
    do
    {
      if (*(_QWORD *)v52)
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v229, *(_QWORD *)(*(_QWORD *)v52 + 64));
      v52 += 24;
      v51 -= 24;
    }
    while (v51);
  }
  v226[0] = *(_QWORD *)(*(_QWORD *)this + 8);
  v226[1] = 0;
  v227 = 0;
  v237 = &v239;
  v238 = 0x2000000000;
  v228 = &v229;
  sub_1C4ED0454(v226, (uint64_t *)&v237);
  v234 = v236;
  v235 = 0x400000000;
  if (!(_DWORD)v238)
  {
LABEL_155:
    v49 = *((_DWORD *)this + 4);
    goto LABEL_215;
  }
  v222 = a3;
  v53 = (llvm::BasicBlock **)v237;
  v54 = (llvm::BasicBlock **)((char *)v237 + 8 * v238);
  do
  {
    v55 = *v53;
    v56 = *(llvm::MemorySSA **)this;
    v57 = *(_DWORD *)(*(_QWORD *)this + 40);
    if (!v57)
      goto LABEL_83;
    v58 = *((_QWORD *)v56 + 3);
    v59 = v57 - 1;
    v60 = ((v55 >> 4) ^ (v55 >> 9)) & (v57 - 1);
    v61 = *(llvm::BasicBlock **)(v58 + 16 * v60);
    if (v55 != v61)
    {
      v62 = 1;
      while (v61 != (llvm::BasicBlock *)-4096)
      {
        v63 = v60 + v62++;
        v60 = v63 & v59;
        v61 = *(llvm::BasicBlock **)(v58 + 16 * v60);
        if (v55 == v61)
          goto LABEL_78;
      }
LABEL_83:
      MemoryPhi = (uint64_t)llvm::MemorySSA::createMemoryPhi(v56, v55);
      v65 = v235;
      if (v235 >= (unint64_t)HIDWORD(v235))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v234, (uint64_t)v236, v235 + 1, 8);
        v65 = v235;
      }
      *((_QWORD *)v234 + v65) = MemoryPhi;
      LODWORD(v235) = v235 + 1;
      goto LABEL_86;
    }
LABEL_78:
    MemoryPhi = *(_QWORD *)(v58 + 16 * v60 + 8);
    if (!MemoryPhi)
      goto LABEL_83;
    v223 = 4;
    v224 = 0;
    v225 = (llvm::MemoryDef *)MemoryPhi;
    if ((MemoryPhi | 0x1000) != 0xFFFFFFFFFFFFF000)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v223);
    if (!v247)
    {
      v66 = v243;
      if (!(_DWORD)v243)
        goto LABEL_95;
      v67 = 24 * v243;
      v68 = v242 + 16;
      while (*(llvm::MemoryDef **)v68 != v225)
      {
        v68 += 24;
        v67 -= 24;
        if (!v67)
          goto LABEL_94;
      }
      if (v67)
        goto LABEL_96;
LABEL_94:
      if (v243 < 8)
      {
LABEL_95:
        sub_1C4EE5050((unsigned int *)&v242, (unint64_t)&v223);
        goto LABEL_96;
      }
      do
      {
        sub_1C4EE50EC((uint64_t *)&v245, *(_QWORD *)&v242[24 * v66 - 8], *(_QWORD *)&v242[24 * v66 - 24], *(_QWORD *)&v242[24 * v66 - 8]);
        v66 = v243 - 1;
        LODWORD(v243) = v66;
        v81 = &v242[24 * v66];
        v82 = *((_QWORD *)v81 + 2);
        if (v82 != -8192 && v82 != -4096 && v82 != 0)
        {
          v84 = *(_QWORD *)v81 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v84 = *((_QWORD *)v81 + 1);
          v85 = (unint64_t *)*((_QWORD *)v81 + 1);
          if (v85)
          {
            *v85 = *v85 & 7 | v84;
          }
          else
          {
            v86 = *((_QWORD *)v81 + 2);
            v87 = ***(int32x2_t ****)v86;
            v88 = (unint64_t)v87[303];
            if (v88 <= v84)
            {
              v89 = v87[305].u32[0];
              if (v88 + 16 * v89 > v84)
              {
                v90 = v89 - 1;
                LODWORD(v91) = v90 & ((v86 >> 4) ^ (v86 >> 9));
                v92 = (uint64_t *)(v88 + 16 * v91);
                v93 = *v92;
                if (v86 == *v92)
                {
LABEL_127:
                  *v92 = -8192;
                  v87[304] = vadd_s32(v87[304], (int32x2_t)0x1FFFFFFFFLL);
                  v86 = *((_QWORD *)v81 + 2);
                }
                else
                {
                  v94 = 1;
                  while (v93 != -4096)
                  {
                    v95 = v91 + v94++;
                    v91 = v95 & v90;
                    v93 = *(_QWORD *)(v88 + 16 * v91);
                    if (v86 == v93)
                    {
                      v92 = (uint64_t *)(v88 + 16 * v91);
                      goto LABEL_127;
                    }
                  }
                }
                *(_BYTE *)(v86 + 17) &= ~1u;
              }
            }
          }
        }
      }
      while (v66);
    }
    sub_1C4EE50EC((uint64_t *)&v245, (unint64_t)v225, v223, (uint64_t)v225);
LABEL_96:
    if (v225 != (llvm::MemoryDef *)-8192 && v225 != (llvm::MemoryDef *)-4096 && v225 != 0)
    {
      v70 = v223 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v223 & 0xFFFFFFFFFFFFFFF8) = v224;
      if (v224)
      {
        *v224 = *v224 & 7 | v70;
      }
      else
      {
        v71 = v225;
        v72 = ***(int32x2_t ****)v225;
        v73 = (unint64_t)v72[303];
        if (v73 <= v70)
        {
          v74 = v72[305].u32[0];
          if (v73 + 16 * v74 > v70)
          {
            v75 = v74 - 1;
            LODWORD(v76) = v75 & ((v225 >> 4) ^ (v225 >> 9));
            v77 = (llvm::MemoryDef **)(v73 + 16 * v76);
            v78 = *v77;
            if (v225 == *v77)
            {
LABEL_109:
              *v77 = (llvm::MemoryDef *)-8192;
              v72[304] = vadd_s32(v72[304], (int32x2_t)0x1FFFFFFFFLL);
              v71 = v225;
            }
            else
            {
              v79 = 1;
              while (v78 != (llvm::MemoryDef *)-4096)
              {
                v80 = v76 + v79++;
                v76 = v80 & v75;
                v78 = *(llvm::MemoryDef **)(v73 + 16 * v76);
                if (v225 == v78)
                {
                  v77 = (llvm::MemoryDef **)(v73 + 16 * v76);
                  goto LABEL_109;
                }
              }
            }
            *((_BYTE *)v71 + 17) &= ~1u;
          }
        }
      }
    }
LABEL_86:
    v223 = MemoryPhi;
    sub_1C4EDE04C((uint64_t)this + 504, (unint64_t *)&v223);
    ++v53;
  }
  while (v53 != v54);
  a3 = v222;
  v10 = (int32x2_t *)&unk_1C640E000;
  if (!(_DWORD)v235)
    goto LABEL_155;
  v96 = (uint64_t *)v234;
  v97 = (uint64_t *)((char *)v234 + 8 * v235);
  do
  {
    v98 = *v96;
    v99 = *(_QWORD *)(*(_QWORD *)(*v96 + 64) + 8);
    if (v99)
    {
      while (1)
      {
        v100 = *(_QWORD *)(v99 + 24);
        v101 = *(unsigned __int8 *)(v100 + 16);
        v102 = v100 && v101 >= 0x1C;
        if (v102 && v101 - 29 <= 0xA)
          break;
        v99 = *(_QWORD *)(v99 + 8);
        if (!v99)
          goto LABEL_143;
      }
LABEL_145:
      v104 = *(_QWORD *)(v100 + 40);
      v223 = 0;
      v224 = 0;
      LODWORD(v225) = 0;
      PreviousDefFromEnd = llvm::MemorySSAUpdater::getPreviousDefFromEnd((uint64_t)this, v104, (uint64_t)&v223);
      sub_1C4ECE04C(v98, PreviousDefFromEnd, v104);
      v106 = v223;
      sub_1C4EE4BE4((_QWORD *)v223, v225);
      MEMORY[0x1CAA32FB4](v106, 8);
      while (1)
      {
        v99 = *(_QWORD *)(v99 + 8);
        if (!v99)
          break;
        v100 = *(_QWORD *)(v99 + 24);
        v107 = *(unsigned __int8 *)(v100 + 16);
        if (v100)
          v108 = v107 >= 0x1C;
        else
          v108 = 0;
        if (v108 && v107 - 29 <= 0xA)
        {
          v98 = *v96;
          goto LABEL_145;
        }
      }
    }
LABEL_143:
    ++v96;
  }
  while (v96 != v97);
  v49 = *((_DWORD *)this + 4);
  if ((_DWORD)v235)
  {
    v110 = (llvm::MemoryDef **)v234;
    v111 = (llvm::MemoryDef **)((char *)v234 + 8 * v235);
    do
    {
      v112 = *v110;
      v223 = 4;
      v224 = 0;
      v225 = v112;
      if (v112 != (llvm::MemoryDef *)-8192 && v112 != (llvm::MemoryDef *)-4096 && v112 != 0)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v223);
      v114 = (_QWORD *)sub_1C4EE497C((unsigned int *)this + 2, (unint64_t)&v223, 1);
      v115 = *((_DWORD *)this + 4);
      v116 = (unint64_t *)(*((_QWORD *)this + 1) + 24 * v115);
      *v116 = 4;
      v116[1] = 0;
      v117 = (unint64_t)(v116 + 1);
      v118 = v114[2];
      v116[2] = v118;
      if (v118 != -8192 && v118 != -4096 && v118 != 0)
      {
        v120 = *v114 & 0xFFFFFFFFFFFFFFF8;
        v116[1] = *(_QWORD *)v120;
        *(_QWORD *)v120 = v116;
        *v116 = v120 | 4;
        v121 = (uint64_t *)v116[1];
        if (v121)
          *v121 = *v121 & 7 | v117;
      }
      *((_DWORD *)this + 4) = v115 + 1;
      if (v225 != (llvm::MemoryDef *)-8192 && v225 != (llvm::MemoryDef *)-4096 && v225)
      {
        v122 = v223 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v223 & 0xFFFFFFFFFFFFFFF8) = v224;
        if (v224)
        {
          *v224 = *v224 & 7 | v122;
        }
        else
        {
          v123 = v225;
          v124 = ***(int32x2_t ****)v225;
          v125 = (unint64_t)v124[303];
          if (v125 <= v122)
          {
            v126 = v124[305].u32[0];
            if (v125 + 16 * v126 > v122)
            {
              v127 = v126 - 1;
              LODWORD(v128) = v127 & ((v225 >> 4) ^ (v225 >> 9));
              v129 = (llvm::MemoryDef **)(v125 + 16 * v128);
              v130 = *v129;
              if (v225 == *v129)
              {
LABEL_182:
                *v129 = (llvm::MemoryDef *)-8192;
                v124[304] = vadd_s32(v124[304], (int32x2_t)0x1FFFFFFFFLL);
                v123 = v225;
              }
              else
              {
                v131 = 1;
                while (v130 != (llvm::MemoryDef *)-4096)
                {
                  v132 = v128 + v131++;
                  v128 = v132 & v127;
                  v130 = *(llvm::MemoryDef **)(v125 + 16 * v128);
                  if (v225 == v130)
                  {
                    v129 = (llvm::MemoryDef **)(v125 + 16 * v128);
                    goto LABEL_182;
                  }
                }
              }
              *((_BYTE *)v123 + 17) &= ~1u;
            }
          }
        }
      }
      v133 = *v110;
      v223 = 4;
      v224 = 0;
      v225 = v133;
      if (v133 != (llvm::MemoryDef *)-8192 && v133 != (llvm::MemoryDef *)-4096 && v133 != 0)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v223);
      v135 = (_QWORD *)sub_1C4EE497C((unsigned int *)&v248, (unint64_t)&v223, 1);
      v136 = v249;
      v137 = &v248[24 * v249];
      *(_QWORD *)v137 = 4;
      *((_QWORD *)v137 + 1) = 0;
      v138 = (unint64_t)(v137 + 8);
      v139 = v135[2];
      *((_QWORD *)v137 + 2) = v139;
      if (v139 != -8192 && v139 != -4096 && v139 != 0)
      {
        v141 = *v135 & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v137 + 1) = *(_QWORD *)v141;
        *(_QWORD *)v141 = v137;
        *(_QWORD *)v137 = v141 | 4;
        v142 = (uint64_t *)*((_QWORD *)v137 + 1);
        if (v142)
          *v142 = *v142 & 7 | v138;
      }
      LODWORD(v249) = v136 + 1;
      if (v225 != (llvm::MemoryDef *)-8192 && v225 != (llvm::MemoryDef *)-4096 && v225)
      {
        v143 = v223 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v223 & 0xFFFFFFFFFFFFFFF8) = v224;
        if (v224)
        {
          *v224 = *v224 & 7 | v143;
        }
        else
        {
          v144 = v225;
          v145 = ***(int32x2_t ****)v225;
          v146 = (unint64_t)v145[303];
          if (v146 <= v143)
          {
            v147 = v145[305].u32[0];
            if (v146 + 16 * v147 > v143)
            {
              v148 = v147 - 1;
              LODWORD(v149) = v148 & ((v225 >> 4) ^ (v225 >> 9));
              v150 = (llvm::MemoryDef **)(v146 + 16 * v149);
              v151 = *v150;
              if (v225 == *v150)
              {
LABEL_209:
                *v150 = (llvm::MemoryDef *)-8192;
                v145[304] = vadd_s32(v145[304], (int32x2_t)0x1FFFFFFFFLL);
                v144 = v225;
              }
              else
              {
                v152 = 1;
                while (v151 != (llvm::MemoryDef *)-4096)
                {
                  v153 = v149 + v152++;
                  v149 = v153 & v148;
                  v151 = *(llvm::MemoryDef **)(v146 + 16 * v149);
                  if (v225 == v151)
                  {
                    v150 = (llvm::MemoryDef **)(v146 + 16 * v149);
                    goto LABEL_209;
                  }
                }
              }
              *((_BYTE *)v144 + 17) &= ~1u;
            }
          }
        }
      }
      ++v110;
    }
    while (v110 != v111);
    a3 = v222;
  }
  v10 = (int32x2_t *)&unk_1C640E000;
LABEL_215:
  v223 = 4;
  v224 = 0;
  v225 = a2;
  if (a2 != (llvm::MemoryDef *)-8192 && a2 != (llvm::MemoryDef *)-4096 && a2)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v223);
  v154 = (_QWORD *)sub_1C4EE497C((unsigned int *)&v248, (unint64_t)&v223, 1);
  v155 = v249;
  v156 = &v248[24 * v249];
  *(_QWORD *)v156 = 4;
  *((_QWORD *)v156 + 1) = 0;
  v157 = (unint64_t)(v156 + 8);
  v158 = v154[2];
  *((_QWORD *)v156 + 2) = v158;
  if (v158 != -8192 && v158 != -4096 && v158 != 0)
  {
    v160 = *v154 & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)v156 + 1) = *(_QWORD *)v160;
    *(_QWORD *)v160 = v156;
    *(_QWORD *)v156 = v160 | 4;
    v161 = (uint64_t *)*((_QWORD *)v156 + 1);
    if (v161)
      *v161 = *v161 & 7 | v157;
  }
  LODWORD(v249) = v155 + 1;
  if (v225 != (llvm::MemoryDef *)-8192 && v225 != (llvm::MemoryDef *)-4096 && v225)
  {
    v162 = v223 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v223 & 0xFFFFFFFFFFFFFFF8) = v224;
    if (v224)
    {
      *v224 = *v224 & 7 | v162;
    }
    else
    {
      v163 = v225;
      v164 = ***(int32x2_t ****)v225;
      v165 = (unint64_t)v164[303];
      if (v165 <= v162)
      {
        v166 = v164[305].u32[0];
        if (v165 + 16 * v166 > v162)
        {
          v167 = v166 - 1;
          LODWORD(v168) = v167 & ((v225 >> 4) ^ (v225 >> 9));
          v169 = (llvm::MemoryDef **)(v165 + 16 * v168);
          v170 = *v169;
          if (v225 == *v169)
          {
LABEL_237:
            *v169 = (llvm::MemoryDef *)-8192;
            v164[304] = vadd_s32(v164[304], v10[212]);
            v163 = v225;
          }
          else
          {
            v171 = 1;
            while (v170 != (llvm::MemoryDef *)-4096)
            {
              v172 = v168 + v171++;
              v168 = v172 & v167;
              v170 = *(llvm::MemoryDef **)(v165 + 16 * v168);
              if (v225 == v170)
              {
                v169 = (llvm::MemoryDef **)(v165 + 16 * v168);
                goto LABEL_237;
              }
            }
          }
          *((_BYTE *)v163 + 17) &= ~1u;
        }
      }
    }
  }
  if (v234 != v236)
    free(v234);
  if (v237 != &v239)
    free(v237);
  if (v230 != v229)
    free(v230);
  v48 = *((_DWORD *)this + 4);
LABEL_247:
  if ((_DWORD)v249)
  {
    v173 = v10[212];
    do
    {
      v174 = *((_DWORD *)this + 4);
      llvm::MemorySSAUpdater::fixupDefs(this, (uint64_t *)&v248);
      if ((_DWORD)v249)
      {
        v175 = v248;
        v176 = &v248[24 * v249];
        do
        {
          v177 = *((_QWORD *)v176 - 1);
          if (v177 != -8192 && v177 != -4096 && v177 != 0)
          {
            v179 = *((_QWORD *)v176 - 3) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v179 = *((_QWORD *)v176 - 2);
            v180 = (unint64_t *)*((_QWORD *)v176 - 2);
            if (v180)
            {
              *v180 = *v180 & 7 | v179;
            }
            else
            {
              v181 = *((_QWORD *)v176 - 1);
              v182 = ***(int32x2_t ****)v181;
              v183 = (unint64_t)v182[303];
              if (v183 <= v179)
              {
                v184 = v182[305].u32[0];
                if (v183 + 16 * v184 > v179)
                {
                  v185 = v184 - 1;
                  LODWORD(v186) = v185 & ((v181 >> 4) ^ (v181 >> 9));
                  v187 = (uint64_t *)(v183 + 16 * v186);
                  v188 = *v187;
                  if (v181 == *v187)
                  {
LABEL_267:
                    *v187 = -8192;
                    v182[304] = vadd_s32(v182[304], v173);
                    v181 = *((_QWORD *)v176 - 1);
                  }
                  else
                  {
                    v189 = 1;
                    while (v188 != -4096)
                    {
                      v190 = v186 + v189++;
                      v186 = v190 & v185;
                      v188 = *(_QWORD *)(v183 + 16 * v186);
                      if (v181 == v188)
                      {
                        v187 = (uint64_t *)(v183 + 16 * v186);
                        goto LABEL_267;
                      }
                    }
                  }
                  *(_BYTE *)(v181 + 17) &= ~1u;
                }
              }
            }
          }
          v176 -= 24;
        }
        while (v176 != v175);
      }
      LODWORD(v249) = 0;
      sub_1C4EDE7F8((unsigned int *)&v248, *((_QWORD *)this + 1) + 24 * v174, *((_QWORD *)this + 1) + 24 * *((unsigned int *)this + 4));
    }
    while ((_DWORD)v249);
  }
  if (v48 != v49)
  {
    v191 = 24 * (v48 - v49);
    v192 = (llvm::MemoryPhi **)(*((_QWORD *)this + 1) + 24 * v49 + 16);
    do
    {
      if (*v192)
        llvm::MemorySSAUpdater::tryRemoveTrivialPhi(this, *v192);
      v192 += 3;
      v191 -= 24;
    }
    while (v191);
  }
  if (a3)
  {
    v193 = *((_QWORD *)a2 + 8);
    v237 = v241;
    v238 = (uint64_t)v241;
    v239 = 16;
    v240 = 0;
    v194 = *(_QWORD *)(*(_QWORD *)this + 72);
    v195 = *(unsigned int *)(*(_QWORD *)this + 88);
    if ((_DWORD)v195)
    {
      LODWORD(v196) = (v195 - 1) & ((v193 >> 4) ^ (v193 >> 9));
      v197 = (uint64_t *)(v194 + 16 * v196);
      v198 = *v197;
      if (v193 != *v197)
      {
        v199 = 1;
        do
        {
          if (v198 == -4096)
            goto LABEL_283;
          v200 = v196 + v199++;
          v196 = v200 & (v195 - 1);
          v198 = *(_QWORD *)(v194 + 16 * v196);
        }
        while (v193 != v198);
        v197 = (uint64_t *)(v194 + 16 * v196);
      }
    }
    else
    {
LABEL_283:
      v197 = (uint64_t *)(v194 + 16 * v195);
    }
    v201 = *(_QWORD *)(v197[1] + 8);
    v202 = v201 - 48;
    if (v201)
      v203 = v201 - 48;
    else
      v203 = 0;
    if (v201)
      v204 = *(_BYTE *)(v203 + 16) == 26;
    else
      v204 = 0;
    if (v204)
      v202 = *(_QWORD *)(v203 - 64);
    sub_1C4EDCE08(*(_QWORD *)this, v193, v202, (llvm::SmallPtrSetImplBase *)&v237);
    v205 = *((unsigned int *)this + 4);
    if ((_DWORD)v205)
    {
      v206 = 24 * v205;
      v207 = (uint64_t *)(*((_QWORD *)this + 1) + 16);
      do
      {
        v208 = *v207;
        if (*v207 && *(_BYTE *)(v208 + 16) == 27)
          sub_1C4EDCE08(*(_QWORD *)this, *(_QWORD *)(v208 + 64), 0, (llvm::SmallPtrSetImplBase *)&v237);
        v207 += 3;
        v206 -= 24;
      }
      while (v206);
    }
    v209 = v247;
    if (v247)
      v210 = v245;
    else
      v210 = v242;
    v211 = &v242[24 * v243];
    while (1)
    {
      if (v209)
      {
        if (v210 == (char *)&v246)
          goto LABEL_320;
      }
      else if (v210 == v211)
      {
LABEL_320:
        if ((void *)v238 != v237)
          free((void *)v238);
        break;
      }
      v212 = v210 + 32;
      if (!v209)
        v212 = v210;
      v213 = *((_QWORD *)v212 + 2);
      if (v213 && *(_BYTE *)(v213 + 16) == 27)
        sub_1C4EDCE08(*(_QWORD *)this, *(_QWORD *)(v213 + 64), 0, (llvm::SmallPtrSetImplBase *)&v237);
      if (v209)
      {
        v214 = (char *)*((_QWORD *)v210 + 1);
        v215 = v210;
        if (v214)
        {
          do
          {
            v210 = v214;
            v214 = *(char **)v214;
          }
          while (v214);
        }
        else
        {
          do
          {
            v210 = (char *)*((_QWORD *)v215 + 2);
            v13 = *(_QWORD *)v210 == (_QWORD)v215;
            v215 = v210;
          }
          while (!v13);
        }
      }
      else
      {
        v210 += 24;
      }
    }
  }
  sub_1C4EE4050(v246);
  sub_1C4EE4F14(&v242);
  return sub_1C4EE4F14(&v248);
}

unint64_t sub_1C4EDE04C(uint64_t a1, unint64_t *a2)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;

  if (*(_QWORD *)(a1 + 96))
    return ((unint64_t)sub_1C4EE51A0((uint64_t **)(a1 + 80), *a2, *a2) << 32) | 1;
  v5 = *(_QWORD **)a1;
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *a2;
  if (!(_DWORD)v6)
    goto LABEL_11;
  v8 = 8 * v6;
  v9 = *(_QWORD **)a1;
  while (*v9 != v7)
  {
    ++v9;
    v8 -= 8;
    if (!v8)
      goto LABEL_10;
  }
  if (v8)
    return 1;
LABEL_10:
  if (v6 > 7)
  {
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v6 - 8);
      sub_1C4EE51A0((uint64_t **)(a1 + 80), v10, v10);
      LODWORD(v6) = *(_DWORD *)(a1 + 8) - 1;
      *(_DWORD *)(a1 + 8) = v6;
    }
    while ((_DWORD)v6);
    sub_1C4EE51A0((uint64_t **)(a1 + 80), *a2, *a2);
  }
  else
  {
LABEL_11:
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 8);
      v5 = *(_QWORD **)a1;
      v6 = *(unsigned int *)(a1 + 8);
    }
    v5[v6] = v7;
    ++*(_DWORD *)(a1 + 8);
  }
  return 0x100000001;
}

void llvm::MemorySSAUpdater::fixupDefs(llvm::MemorySSAUpdater *this, uint64_t *a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  size_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t Successor;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t PreviousDef;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;
  int v92;
  _BYTE v93[64];
  void *v94;
  uint64_t v95;
  _QWORD v96[18];

  v96[16] = *MEMORY[0x1E0C80C00];
  v89 = v93;
  v90 = v93;
  v91 = 8;
  v92 = 0;
  v94 = v96;
  v95 = 0x1000000000;
  v2 = *((_DWORD *)a2 + 2);
  if (v2)
  {
    v4 = *a2;
    v5 = *a2 + 24 * v2;
    v88 = (char *)this + 584;
    while (1)
    {
      v6 = *(_QWORD *)(v4 + 16);
      if (v6)
      {
        v7 = *(unsigned __int8 *)(v6 + 16);
        if ((v7 - 25) <= 2)
          break;
      }
LABEL_41:
      v4 += 24;
      if (v4 == v5)
        goto LABEL_133;
    }
    v8 = *(_QWORD *)(*(_QWORD *)this + 72);
    v9 = *(unsigned int *)(*(_QWORD *)this + 88);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)(v6 + 64);
      LODWORD(v11) = ((v10 >> 4) ^ (v10 >> 9)) & (v9 - 1);
      v12 = (uint64_t *)(v8 + 16 * v11);
      v13 = *v12;
      if (v10 == *v12)
      {
LABEL_12:
        if (v12 == (uint64_t *)(v8 + 16 * v9))
          v16 = 0;
        else
          v16 = v12[1];
        if (v7 == 27)
        {
          if (*((_QWORD *)this + 75))
          {
            sub_1C61A6188((uint64_t)v88, *(_QWORD *)(v4 + 16));
          }
          else
          {
            v17 = *((unsigned int *)this + 128);
            if ((_DWORD)v17)
            {
              v18 = (uint64_t *)*((_QWORD *)this + 63);
              v19 = 8 * v17 - 8;
              v20 = v18;
              while (1)
              {
                v21 = *v20++;
                if (v21 == v6)
                  break;
                v19 -= 8;
                v18 = v20;
                if (v19 == -8)
                  goto LABEL_25;
              }
              if (v19)
                memmove(v18, v18 + 1, v19);
              *((_DWORD *)this + 128) = v17 - 1;
            }
          }
        }
LABEL_25:
        v22 = *(_QWORD *)(v6 + 56);
        if (v22 != v16)
        {
          v23 = v22 - 48;
          if (!v22)
            v23 = 0;
          v24 = *(unsigned __int8 *)(v23 + 16);
          if (v24 == 25)
            v25 = v23;
          else
            v25 = 0;
          v26 = v25 - 32;
          v27 = v23 - 64;
          if (v24 != 25 || v22 == 0)
            v29 = v27;
          else
            v29 = v26;
          if (*(_QWORD *)v29)
          {
            **(_QWORD **)(v29 + 16) = *(_QWORD *)(v29 + 8);
            v75 = *(_QWORD *)(v29 + 8);
            if (v75)
              *(_QWORD *)(v75 + 16) = *(_QWORD *)(v29 + 16);
          }
          *(_QWORD *)v29 = v6;
          v32 = *(_QWORD *)(v6 + 8);
          v31 = (_QWORD *)(v6 + 8);
          v30 = v32;
          *(_QWORD *)(v29 + 8) = v32;
          if (v32)
            *(_QWORD *)(v30 + 16) = v29 + 8;
          *(_QWORD *)(v29 + 16) = v31;
          *v31 = v29;
          goto LABEL_41;
        }
        v33 = *(_QWORD *)(v6 + 64);
        v34 = *(_QWORD *)(v33 + 40);
        if (v34 != v33 + 40)
        {
          if (v34)
            v35 = v34 - 24;
          else
            v35 = 0;
          if (*(_BYTE *)(v35 + 16) != 30)
          {
            v36 = 2;
            switch(*(_BYTE *)(v35 + 16))
            {
              case 0x1E:
LABEL_140:
                __break(1u);
                return;
              case 0x1F:
                v36 = (*(_DWORD *)(v35 + 20) >> 1) & 0x3FFFFFF;
                goto LABEL_108;
              case 0x20:
              case 0x26:
                v36 = (*(_DWORD *)(v35 + 20) & 0x7FFFFFF) - 1;
                goto LABEL_108;
              case 0x21:
                goto LABEL_51;
              case 0x24:
                v36 = *(_WORD *)(v35 + 18) & 1;
                goto LABEL_108;
              case 0x25:
                v36 = 1;
                goto LABEL_51;
              case 0x27:
                v36 = *(_DWORD *)(v35 + 80) + 1;
LABEL_108:
                if (!v36)
                  goto LABEL_66;
                goto LABEL_51;
              default:
                goto LABEL_66;
            }
          }
          if ((*(_DWORD *)(v35 + 20) & 0x7FFFFFF) == 3)
            v36 = 2;
          else
            v36 = 1;
LABEL_51:
          v37 = 0;
          while (1)
          {
            Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v35, v37);
            v39 = Successor;
            v40 = *(_DWORD *)(*(_QWORD *)this + 40);
            if (!v40)
              goto LABEL_59;
            v41 = *(_QWORD *)(*(_QWORD *)this + 24);
            v42 = v40 - 1;
            v43 = ((Successor >> 4) ^ (Successor >> 9)) & (v40 - 1);
            v44 = *(_QWORD *)(v41 + 16 * v43);
            if (Successor != v44)
              break;
LABEL_57:
            v47 = *(_QWORD *)(v41 + 16 * v43 + 8);
            if (!v47)
              goto LABEL_59;
            sub_1C4EDE93C(v47, *(_QWORD *)(v6 + 64), v6);
LABEL_62:
            if (v36 == ++v37)
              goto LABEL_66;
          }
          v45 = 1;
          while (v44 != -4096)
          {
            v46 = v43 + v45++;
            v43 = v46 & v42;
            v44 = *(_QWORD *)(v41 + 16 * v43);
            if (Successor == v44)
              goto LABEL_57;
          }
LABEL_59:
          v48 = v95;
          if (v95 >= (unint64_t)HIDWORD(v95))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, (uint64_t)v96, v95 + 1, 8);
            v48 = v95;
          }
          *((_QWORD *)v94 + v48) = v39;
          LODWORD(v95) = v95 + 1;
          goto LABEL_62;
        }
LABEL_66:
        v49 = v95;
        while (1)
        {
          if (!v49)
            goto LABEL_41;
          v50 = *((_QWORD *)v94 + --v49);
          LODWORD(v95) = v49;
          v51 = *(_QWORD *)(*(_QWORD *)this + 72);
          v52 = *(unsigned int *)(*(_QWORD *)this + 88);
          if (!(_DWORD)v52)
            goto LABEL_74;
          LODWORD(v53) = (v52 - 1) & ((v50 >> 4) ^ (v50 >> 9));
          v54 = (uint64_t *)(v51 + 16 * v53);
          v55 = *v54;
          if (v50 != *v54)
            break;
LABEL_75:
          if (v54 != (uint64_t *)(v51 + 16 * v52))
          {
            v58 = v54[1];
            if (v58)
            {
              v76 = *(_QWORD *)(v58 + 8);
              if (v76)
                v77 = v76 - 48;
              else
                v77 = 0;
              PreviousDef = llvm::MemorySSAUpdater::getPreviousDef(this, (llvm::BasicBlock **)v77);
              v79 = *(unsigned __int8 *)(v77 + 16);
              if (v79 == 25)
                v80 = v77;
              else
                v80 = 0;
              v81 = v80 - 32;
              if (v79 != 25 || v76 == 0)
                v83 = v77 - 64;
              else
                v83 = v81;
              if (*(_QWORD *)v83)
              {
                **(_QWORD **)(v83 + 16) = *(_QWORD *)(v83 + 8);
                v87 = *(_QWORD *)(v83 + 8);
                if (v87)
                  *(_QWORD *)(v87 + 16) = *(_QWORD *)(v83 + 16);
              }
              *(_QWORD *)v83 = PreviousDef;
              if (PreviousDef)
              {
                v86 = *(_QWORD *)(PreviousDef + 8);
                v84 = (_QWORD *)(PreviousDef + 8);
                v85 = v86;
                *(_QWORD *)(v83 + 8) = v86;
                if (v86)
                  *(_QWORD *)(v85 + 16) = v83 + 8;
                *(_QWORD *)(v83 + 16) = v84;
                *v84 = v83;
              }
              goto LABEL_133;
            }
          }
          v59 = *(_QWORD *)(v50 + 40);
          if (v59 != v50 + 40)
          {
            if (v59)
              v60 = v59 - 24;
            else
              v60 = 0;
            if (*(_BYTE *)(v60 + 16) == 30)
            {
              if ((*(_DWORD *)(v60 + 20) & 0x7FFFFFF) == 3)
                v61 = 2;
              else
                v61 = 1;
LABEL_92:
              v62 = 0;
              while (2)
              {
                v63 = llvm::Instruction::getSuccessor((llvm::Instruction *)v60, v62);
                v64 = v63;
                v65 = *(_DWORD *)(*(_QWORD *)this + 40);
                if (v65)
                {
                  v66 = *(_QWORD *)(*(_QWORD *)this + 24);
                  v67 = v65 - 1;
                  v68 = ((v63 >> 4) ^ (v63 >> 9)) & (v65 - 1);
                  v69 = *(_QWORD *)(v66 + 16 * v68);
                  if (v63 != v69)
                  {
                    v70 = 1;
                    while (v69 != -4096)
                    {
                      v71 = v68 + v70++;
                      v68 = v71 & v67;
                      v69 = *(_QWORD *)(v66 + 16 * v68);
                      if (v63 == v69)
                        goto LABEL_98;
                    }
                    goto LABEL_100;
                  }
LABEL_98:
                  v72 = *(_QWORD *)(v66 + 16 * v68 + 8);
                  if (!v72)
                    goto LABEL_100;
                  sub_1C4EDE93C(v72, v50, v6);
                }
                else
                {
LABEL_100:
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v89, v64);
                  if (v73)
                  {
                    v74 = v95;
                    if (v95 >= (unint64_t)HIDWORD(v95))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, (uint64_t)v96, v95 + 1, 8);
                      v74 = v95;
                    }
                    *((_QWORD *)v94 + v74) = v64;
                    LODWORD(v95) = v95 + 1;
                  }
                }
                if (v61 == ++v62)
                  goto LABEL_66;
                continue;
              }
            }
            v61 = 2;
            switch(*(_BYTE *)(v60 + 16))
            {
              case 0x1E:
                goto LABEL_140;
              case 0x1F:
                v61 = (*(_DWORD *)(v60 + 20) >> 1) & 0x3FFFFFF;
                break;
              case 0x20:
              case 0x26:
                v61 = (*(_DWORD *)(v60 + 20) & 0x7FFFFFF) - 1;
                break;
              case 0x21:
                goto LABEL_92;
              case 0x24:
                v61 = *(_WORD *)(v60 + 18) & 1;
                break;
              case 0x25:
                v61 = 1;
                goto LABEL_92;
              case 0x27:
                v61 = *(_DWORD *)(v60 + 80) + 1;
                break;
              default:
                continue;
            }
            if (v61)
              goto LABEL_92;
          }
        }
        v56 = 1;
        while (v55 != -4096)
        {
          v57 = v53 + v56++;
          v53 = v57 & (v52 - 1);
          v55 = *(_QWORD *)(v51 + 16 * v53);
          if (v50 == v55)
          {
            v54 = (uint64_t *)(v51 + 16 * v53);
            goto LABEL_75;
          }
        }
LABEL_74:
        v54 = (uint64_t *)(v51 + 16 * v52);
        goto LABEL_75;
      }
      v14 = 1;
      while (v13 != -4096)
      {
        v15 = v11 + v14++;
        v11 = v15 & (v9 - 1);
        v13 = *(_QWORD *)(v8 + 16 * v11);
        if (v10 == v13)
        {
          v12 = (uint64_t *)(v8 + 16 * v11);
          goto LABEL_12;
        }
      }
    }
    v12 = (uint64_t *)(v8 + 16 * v9);
    goto LABEL_12;
  }
LABEL_133:
  if (v94 != v96)
    free(v94);
  if (v90 != v89)
    free(v90);
}

void sub_1C4EDE7F8(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t *v14;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3);
  v7 = a1[2];
  if (v6 + v7 > a1[3])
  {
    sub_1C4EE49E4(a1, v6 + v7);
    LODWORD(v7) = a1[2];
  }
  if (a2 != a3)
  {
    v8 = 0;
    v9 = *(_QWORD *)a1 + 24 * v7;
    do
    {
      v10 = (unint64_t *)(v9 + v8);
      *v10 = 4;
      v10[1] = 0;
      v11 = *(_QWORD *)(a2 + v8 + 16);
      v10[2] = v11;
      if (v11 != -8192 && v11 != -4096 && v11 != 0)
      {
        v13 = *(_QWORD *)(a2 + v8) & 0xFFFFFFFFFFFFFFF8;
        v10[1] = *(_QWORD *)v13;
        *(_QWORD *)v13 = v10;
        *v10 = v13 | 4;
        v14 = (uint64_t *)v10[1];
        if (v14)
          *v14 = *v14 & 7 | (v9 + 8 + v8);
      }
      v8 += 24;
    }
    while (a2 + v8 != a3);
  }
  a1[2] = v7 + v6;
}

llvm::MemorySSAUpdater *llvm::MemorySSAUpdater::tryRemoveTrivialPhis(llvm::MemorySSAUpdater *this, uint64_t a2, uint64_t a3)
{
  llvm::MemorySSAUpdater *v3;
  uint64_t v4;
  llvm::MemoryPhi **v5;

  if (a3)
  {
    v3 = this;
    v4 = 24 * a3;
    v5 = (llvm::MemoryPhi **)(a2 + 16);
    do
    {
      if (*v5)
        this = (llvm::MemorySSAUpdater *)llvm::MemorySSAUpdater::tryRemoveTrivialPhi(v3, *v5);
      v5 += 3;
      v4 -= 24;
    }
    while (v4);
  }
  return this;
}

uint64_t sub_1C4EDE93C(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_DWORD *)(result + 20);
  v4 = v3 & 0x7FFFFFF;
  if ((v3 & 0x7FFFFFF) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = result - 32 * v4;
      if ((v3 & 0x40000000) != 0)
        v6 = *(_QWORD *)(result - 8);
      if (*(_QWORD *)(v6 + 32 * *(unsigned int *)(result + 76) + 8 * v5) == a2)
        break;
      if (v4 == ++v5)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    LODWORD(v5) = -1;
  }
  if ((v3 & 0x40000000) != 0)
  {
    v8 = *(_QWORD *)(result - 8);
    v7 = v4;
  }
  else
  {
    v7 = v4;
    v8 = result - 32 * v4;
  }
  if (v7 != (int)v5)
  {
    v9 = v8 + 32 * *(unsigned int *)(result + 76);
    v5 = (int)v5;
    v10 = (_QWORD *)(a3 + 8);
    v11 = 8 * v7 - 8 * (int)v5;
    do
    {
      if (*(_QWORD *)(v9 + 8 * v5) != a2)
        break;
      v12 = *(_DWORD *)(result + 20);
      if ((v12 & 0x40000000) != 0)
        v13 = *(_QWORD *)(result - 8);
      else
        v13 = result - 32 * (v12 & 0x7FFFFFF);
      v14 = v13 + 32 * v5;
      if (*(_QWORD *)v14)
      {
        **(_QWORD **)(v14 + 16) = *(_QWORD *)(v14 + 8);
        v15 = *(_QWORD *)(v14 + 8);
        if (v15)
          *(_QWORD *)(v15 + 16) = *(_QWORD *)(v14 + 16);
      }
      *(_QWORD *)v14 = a3;
      v16 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(v14 + 8) = v16;
      if (v16)
        *(_QWORD *)(v16 + 16) = v14 + 8;
      *(_QWORD *)(v13 + 32 * v5 + 16) = v10;
      *v10 = v14;
      ++v5;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

llvm::MemorySSAUpdater *llvm::MemorySSAUpdater::removeEdge(llvm::MemorySSAUpdater *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  int v3;
  llvm::MemorySSAUpdater *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  llvm::BasicBlock *v8;
  int v9;
  int v10;
  llvm::MemoryPhi *v11;
  llvm::BasicBlock **v12;
  llvm::BasicBlock *v13;

  v3 = *(_DWORD *)(*(_QWORD *)this + 40);
  if (v3)
  {
    v4 = this;
    v5 = *(_QWORD *)(*(_QWORD *)this + 24);
    v6 = v3 - 1;
    v7 = (v3 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    v8 = *(llvm::BasicBlock **)(v5 + 16 * v7);
    if (v8 == a3)
    {
LABEL_6:
      v11 = *(llvm::MemoryPhi **)(v5 + 16 * v7 + 8);
      if (v11)
      {
        v12 = &v13;
        v13 = a2;
        sub_1C4EE40BC((uint64_t)v11, &v12);
        return (llvm::MemorySSAUpdater *)llvm::MemorySSAUpdater::tryRemoveTrivialPhi(v4, v11);
      }
    }
    else
    {
      v9 = 1;
      while (v8 != (llvm::BasicBlock *)-4096)
      {
        v10 = v7 + v9++;
        v7 = v10 & v6;
        v8 = *(llvm::BasicBlock **)(v5 + 16 * v7);
        if (v8 == a3)
          goto LABEL_6;
      }
    }
  }
  return this;
}

uint64_t *llvm::MemorySSAUpdater::cloneUsesAndDefs(uint64_t *result, uint64_t a2, llvm::BasicBlock *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t *v30;
  int32x2_t ****v31;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int32x2_t ****v36;
  int32x2_t *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int32x2_t *****v42;
  int32x2_t ****v43;
  int v44;
  int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  unint64_t *v53;
  int32x2_t ****v54;

  v9 = result;
  v10 = *(_QWORD *)(*result + 48);
  v11 = *(unsigned int *)(*result + 64);
  if (!(_DWORD)v11)
  {
LABEL_7:
    v13 = (uint64_t *)(v10 + 16 * v11);
    goto LABEL_8;
  }
  LODWORD(v12) = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v13 = (uint64_t *)(v10 + 16 * v12);
  v14 = *v13;
  if (*v13 != a2)
  {
    v15 = 1;
    while (v14 != -4096)
    {
      v16 = v12 + v15++;
      v12 = v16 & (v11 - 1);
      v14 = *(_QWORD *)(v10 + 16 * v12);
      if (v14 == a2)
      {
        v13 = (uint64_t *)(v10 + 16 * v12);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v13 != (uint64_t *)(v10 + 16 * v11))
  {
    v17 = v13[1];
    if (v17)
    {
      for (i = *(_QWORD *)(v17 + 8); i != v17; i = *(_QWORD *)(i + 8))
      {
        v19 = i - 32;
        if (!i)
          v19 = 0;
        v20 = *(unsigned __int8 *)(v19 + 16) - 27;
        if (v20 >= 0xFFFFFFFE)
          v21 = v19;
        else
          v21 = 0;
        if (!i || v20 < 0xFFFFFFFE)
          continue;
        v22 = *(_QWORD *)a4;
        v23 = *(unsigned int *)(a4 + 16);
        if ((_DWORD)v23)
        {
          v24 = *(_QWORD *)(v21 + 72);
          v25 = ((_DWORD)v23 - 1) & ((v24 >> 4) ^ (v24 >> 9));
          v26 = (_QWORD *)(v22 + (v25 << 6));
          v27 = v26[3];
          if (v24 == v27)
            goto LABEL_25;
          v28 = 1;
          while (v27 != -4096)
          {
            v29 = v25 + v28++;
            v25 = v29 & (v23 - 1);
            v26 = (_QWORD *)(v22 + (v25 << 6));
            v27 = v26[3];
            if (v24 == v27)
              goto LABEL_25;
          }
        }
        v26 = (_QWORD *)(v22 + (v23 << 6));
LABEL_25:
        v52 = 6;
        if (v26 == (_QWORD *)(v22 + (v23 << 6)))
        {
          v30 = 0;
          v31 = 0;
          v34 = 0;
          v53 = 0;
          v54 = 0;
        }
        else
        {
          v30 = 0;
          v31 = (int32x2_t ****)v26[7];
          v53 = 0;
          v54 = v31;
          if (v31 != (int32x2_t ****)-8192 && v31 != (int32x2_t ****)-4096 && v31 != 0)
          {
            v33 = v26[5] & 0xFFFFFFFFFFFFFFF8;
            v53 = *(unint64_t **)v33;
            *(_QWORD *)v33 = &v52;
            v52 = v33 | 6;
            v30 = v53;
            if (v53)
              *v53 = *v53 & 7 | (unint64_t)&v53;
            v31 = v54;
          }
          if (v31)
          {
            if (*((unsigned __int8 *)v31 + 16) <= 0x1Bu)
              v34 = 0;
            else
              v34 = (uint64_t)v31;
          }
          else
          {
            v34 = 0;
          }
        }
        if (v31 == (int32x2_t ****)-8192 || v31 == (int32x2_t ****)-4096 || !v31)
          goto LABEL_53;
        v35 = v52 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v52 & 0xFFFFFFFFFFFFFFF8) = v30;
        if (!v53)
        {
          v36 = v54;
          v37 = ***v54;
          v38 = (unint64_t)v37[303];
          if (v38 <= v35)
          {
            v39 = v37[305].u32[0];
            if (v38 + 16 * v39 > v35)
            {
              v40 = v39 - 1;
              LODWORD(v41) = v40 & ((v54 >> 4) ^ (v54 >> 9));
              v42 = (int32x2_t *****)(v38 + 16 * v41);
              v43 = *v42;
              if (v54 == *v42)
              {
LABEL_51:
                *v42 = (int32x2_t ****)-8192;
                v37[304] = vadd_s32(v37[304], (int32x2_t)0x1FFFFFFFFLL);
                v36 = v54;
              }
              else
              {
                v44 = 1;
                while (v43 != (int32x2_t ****)-4096)
                {
                  v45 = v41 + v44++;
                  v41 = v45 & v40;
                  v43 = *(int32x2_t *****)(v38 + 16 * v41);
                  if (v54 == v43)
                  {
                    v42 = (int32x2_t *****)(v38 + 16 * v41);
                    goto LABEL_51;
                  }
                }
              }
              *((_BYTE *)v36 + 17) &= ~1u;
            }
          }
LABEL_53:
          if (v34)
            goto LABEL_54;
          continue;
        }
        *v53 = *v53 & 7 | v35;
        if (v34)
        {
LABEL_54:
          v46 = (uint64_t *)*v9;
          if (*(_BYTE *)(v21 + 16) == 25)
            v47 = v21;
          else
            v47 = 0;
          if (v47)
            v48 = (uint64_t *)(v47 - 32);
          else
            v48 = (uint64_t *)(v21 - 64);
          v49 = sub_1C4EDEE64(*v48, (uint64_t *)a4, a5, a6, *v9);
          if (a6)
            v50 = 0;
          else
            v50 = v21;
          result = (uint64_t *)llvm::MemorySSA::createDefinedAccess(v46, v34, v49, v50);
          if (result)
            result = llvm::MemorySSA::insertIntoListsForBlock(*v9, (uint64_t)result, a3, 1);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C4EDEE64(uint64_t result, uint64_t *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  int32x2_t ****v17;
  BOOL v18;
  unint64_t v19;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int32x2_t ****v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int32x2_t ****v30;
  int32x2_t *v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int32x2_t *****v36;
  int32x2_t ****v37;
  int v38;
  int v39;
  uint64_t v40;
  unint64_t *v41;
  int32x2_t ****v42;

  v5 = result;
  if (!result || *(_BYTE *)(result + 16) != 26)
  {
    v40 = 0;
    v14 = sub_1C4EE5260(a3, result, &v40);
    v15 = 0;
    if (v14)
      v15 = *(_QWORD *)(v40 + 8);
    if (v15)
      return v15;
    else
      return v5;
  }
  if (*(_QWORD *)(a5 + 96) == result)
    return result;
  v6 = *a2;
  v7 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(result + 72);
    v9 = ((_DWORD)v7 - 1) & ((v8 >> 4) ^ (v8 >> 9));
    v10 = (_QWORD *)(v6 + (v9 << 6));
    v11 = v10[3];
    if (v8 == v11)
      goto LABEL_16;
    v12 = 1;
    while (v11 != -4096)
    {
      v13 = v9 + v12++;
      v9 = v13 & (v7 - 1);
      v10 = (_QWORD *)(v6 + (v9 << 6));
      v11 = v10[3];
      if (v8 == v11)
        goto LABEL_16;
    }
  }
  v10 = (_QWORD *)(v6 + (v7 << 6));
LABEL_16:
  v40 = 6;
  if (v10 == (_QWORD *)(v6 + (v7 << 6)))
  {
    v16 = 0;
    v19 = 0;
    v17 = 0;
    v41 = 0;
    v42 = 0;
  }
  else
  {
    v16 = 0;
    v17 = (int32x2_t ****)v10[7];
    v41 = 0;
    v42 = v17;
    if (v17 == (int32x2_t ****)-8192 || (v17 != (int32x2_t ****)-4096 ? (v18 = v17 == 0) : (v18 = 1), v18))
    {
      v19 = 0;
    }
    else
    {
      v19 = v10[5] & 0xFFFFFFFFFFFFFFF8;
      v41 = *(unint64_t **)v19;
      v16 = v41;
      *(_QWORD *)v19 = &v40;
      v40 = v19 | 6;
      if (v16)
        *v16 = *v16 & 7 | (unint64_t)&v41;
    }
  }
  if (v17 != (int32x2_t ****)-8192 && v17 != (int32x2_t ****)-4096 && v17 != 0)
  {
    *(_QWORD *)v19 = v16;
    if (v41)
    {
      *v41 = *v41 & 7 | v19;
    }
    else
    {
      v30 = v42;
      v31 = ***v42;
      v32 = (unint64_t)v31[303];
      if (v32 <= v19)
      {
        v33 = v31[305].u32[0];
        if (v32 + 16 * v33 > v19)
        {
          v34 = v33 - 1;
          LODWORD(v35) = v34 & ((v42 >> 4) ^ (v42 >> 9));
          v36 = (int32x2_t *****)(v32 + 16 * v35);
          v37 = *v36;
          if (v42 == *v36)
          {
LABEL_56:
            *v36 = (int32x2_t ****)-8192;
            v31[304] = vadd_s32(v31[304], (int32x2_t)0x1FFFFFFFFLL);
            v30 = v42;
          }
          else
          {
            v38 = 1;
            while (v37 != (int32x2_t ****)-4096)
            {
              v39 = v35 + v38++;
              v35 = v39 & v34;
              v37 = *(int32x2_t *****)(v32 + 16 * v35);
              if (v42 == v37)
              {
                v36 = (int32x2_t *****)(v32 + 16 * v35);
                goto LABEL_56;
              }
            }
          }
          *((_BYTE *)v30 + 17) &= ~1u;
        }
      }
    }
  }
  if (v17)
  {
    v21 = *(_DWORD *)(a5 + 40);
    if (v21)
    {
      v22 = *(_QWORD *)(a5 + 24);
      v23 = v21 - 1;
      v24 = (v21 - 1) & ((v17 >> 4) ^ (v17 >> 9));
      v25 = *(int32x2_t *****)(v22 + 16 * v24);
      if (v17 == v25)
      {
LABEL_37:
        result = *(_QWORD *)(v22 + 16 * v24 + 8);
LABEL_40:
        if (a4 && (!result || *(_BYTE *)(result + 16) == 25))
        {
          v28 = *(_QWORD *)(v5 + 48);
          if (v28)
            v29 = v28 - 48;
          else
            v29 = 0;
          return sub_1C4EDEE64(v29);
        }
        return result;
      }
      v26 = 1;
      while (v25 != (int32x2_t ****)-4096)
      {
        v27 = v24 + v26++;
        v24 = v27 & v23;
        v25 = *(int32x2_t *****)(v22 + 16 * v24);
        if (v17 == v25)
          goto LABEL_37;
      }
    }
    result = 0;
    goto LABEL_40;
  }
  return result;
}

uint64_t llvm::MemorySSAUpdater::updatePhisWhenInsertingUniqueBackedgeBlock(llvm::MemorySSAUpdater *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3, llvm::BasicBlock *a4)
{
  uint64_t result;
  int v6;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  llvm::BasicBlock *v12;
  int v13;
  int v14;
  uint64_t v15;
  char *MemoryPhi;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  llvm::BasicBlock *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;

  result = *(_QWORD *)this;
  v6 = *(_DWORD *)(result + 40);
  if (v6)
  {
    v9 = *(_QWORD *)(result + 24);
    v10 = v6 - 1;
    v11 = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v12 = *(llvm::BasicBlock **)(v9 + 16 * v11);
    if (v12 == a2)
    {
LABEL_6:
      v15 = *(_QWORD *)(v9 + 16 * v11 + 8);
      if (v15)
      {
        MemoryPhi = llvm::MemorySSA::createMemoryPhi((llvm::MemorySSA *)result, a4);
        v17 = *(_DWORD *)(v15 + 20) & 0x7FFFFFF;
        if ((_DWORD)v17)
        {
          v18 = 0;
          v19 = 0;
          v20 = 8 * v17;
          do
          {
            v21 = *(_DWORD *)(v15 + 20);
            if ((v21 & 0x40000000) != 0)
              v22 = *(_QWORD *)(v15 - 8);
            else
              v22 = v15 - 32 * (v21 & 0x7FFFFFF);
            v23 = *(llvm::BasicBlock **)(v22 + 32 * *(unsigned int *)(v15 + 76) + v19);
            if (v23 != a3)
              sub_1C4ECE04C((uint64_t)MemoryPhi, *(_QWORD *)(v22 + v18), (uint64_t)v23);
            v19 += 8;
            v18 += 32;
          }
          while (v20 != v19);
        }
        v24 = sub_1C4EDF32C(v15, (uint64_t)a3);
        v25 = *(_DWORD *)(v15 + 20);
        if ((v25 & 0x40000000) != 0)
          v26 = *(_QWORD *)(v15 - 8);
        else
          v26 = v15 - 32 * (v25 & 0x7FFFFFF);
        if (*(_QWORD *)v26)
        {
          **(_QWORD **)(v26 + 16) = *(_QWORD *)(v26 + 8);
          v27 = *(_QWORD *)(v26 + 8);
          if (v27)
            *(_QWORD *)(v27 + 16) = *(_QWORD *)(v26 + 16);
        }
        *(_QWORD *)v26 = v24;
        if (v24)
        {
          v30 = *(_QWORD *)(v24 + 8);
          v28 = (uint64_t *)(v24 + 8);
          v29 = v30;
          *(_QWORD *)(v26 + 8) = v30;
          if (v30)
            *(_QWORD *)(v29 + 16) = v26 + 8;
          *(_QWORD *)(v26 + 16) = v28;
          *v28 = v26;
        }
        v31 = *(_DWORD *)(v15 + 20);
        if ((v31 & 0x40000000) != 0)
          v32 = *(_QWORD *)(v15 - 8);
        else
          v32 = v15 - 32 * (v31 & 0x7FFFFFF);
        *(_QWORD *)(v32 + 32 * *(unsigned int *)(v15 + 76)) = a3;
        v33 = *(_DWORD *)(v15 + 20) & 0x7FFFFFF;
        v34 = v33 - 1;
        if (v33 != 1)
        {
          do
            sub_1C4EDF39C(v15, v34--);
          while (v34);
        }
        sub_1C4ECE04C(v15, (uint64_t)MemoryPhi, (uint64_t)a4);
        return llvm::MemorySSAUpdater::tryRemoveTrivialPhi(this, (llvm::MemoryPhi *)MemoryPhi);
      }
    }
    else
    {
      v13 = 1;
      while (v12 != (llvm::BasicBlock *)-4096)
      {
        v14 = v11 + v13++;
        v11 = v14 & v10;
        v12 = *(llvm::BasicBlock **)(v9 + 16 * v11);
        if (v12 == a2)
          goto LABEL_6;
      }
    }
  }
  return result;
}

uint64_t sub_1C4EDF32C(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_DWORD *)(a1 + 20);
  v3 = v2 & 0x7FFFFFF;
  if ((v2 & 0x7FFFFFF) != 0)
  {
    v4 = 0;
    while (1)
    {
      v5 = a1 - 32 * v3;
      if ((v2 & 0x40000000) != 0)
        v5 = *(_QWORD *)(a1 - 8);
      if (*(_QWORD *)(v5 + 32 * *(unsigned int *)(a1 + 76) + 8 * v4) == a2)
        break;
      if (v3 == ++v4)
        goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    LODWORD(v4) = -1;
  }
  if ((v2 & 0x40000000) != 0)
    v6 = *(_QWORD *)(a1 - 8);
  else
    v6 = a1 - 32 * v3;
  return *(_QWORD *)(v6 + 32 * v4);
}

uint64_t sub_1C4EDF39C(uint64_t result, unsigned int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  v2 = *(_DWORD *)(result + 20);
  v3 = (v2 & 0x7FFFFFFu) - 1;
  if ((v2 & 0x40000000) != 0)
    v4 = *(_QWORD *)(result - 8);
  else
    v4 = result - 32 * (v2 & 0x7FFFFFF);
  v5 = *(_QWORD *)(v4 + 32 * v3);
  v6 = v4 + 32 * a2;
  if (*(_QWORD *)v6)
  {
    **(_QWORD **)(v6 + 16) = *(_QWORD *)(v6 + 8);
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 + 16);
  }
  *(_QWORD *)v6 = v5;
  if (v5)
  {
    v10 = *(_QWORD *)(v5 + 8);
    v8 = (_QWORD *)(v5 + 8);
    v9 = v10;
    v11 = v4 + 32 * a2;
    *(_QWORD *)(v11 + 8) = v10;
    if (v10)
      *(_QWORD *)(v9 + 16) = v11 + 8;
    *(_QWORD *)(v11 + 16) = v8;
    *v8 = v6;
  }
  v12 = *(_DWORD *)(result + 20);
  if ((v12 & 0x40000000) != 0)
    v13 = *(_QWORD *)(result - 8);
  else
    v13 = result - 32 * (v12 & 0x7FFFFFF);
  v14 = *(unsigned int *)(result + 76);
  *(_QWORD *)(v13 + 32 * v14 + 8 * a2) = *(_QWORD *)(v13 + 32 * v14 + 8 * v3);
  v15 = *(_DWORD *)(result + 20);
  if ((v15 & 0x40000000) != 0)
    v16 = *(_QWORD *)(result - 8);
  else
    v16 = result - 32 * (v15 & 0x7FFFFFF);
  v17 = v16 + 32 * v3;
  if (*(_QWORD *)v17)
  {
    **(_QWORD **)(v17 + 16) = *(_QWORD *)(v17 + 8);
    v18 = *(_QWORD *)(v17 + 8);
    if (v18)
      *(_QWORD *)(v18 + 16) = *(_QWORD *)(v17 + 16);
  }
  *(_QWORD *)v17 = 0;
  v19 = *(_DWORD *)(result + 20);
  if ((v19 & 0x40000000) != 0)
    v20 = *(_QWORD *)(result - 8);
  else
    v20 = result - 32 * (v19 & 0x7FFFFFF);
  *(_QWORD *)(v20 + 32 * v14 + 8 * v3) = 0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(result + 20) & 0xF8000000 | (*(_DWORD *)(result + 20) - 1) & 0x7FFFFFF;
  return result;
}

uint64_t llvm::MemorySSAUpdater::updateForClonedLoop(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  llvm::BasicBlock *v7;
  uint64_t *v8;
  uint64_t i;
  void **v10;
  void **v11;
  llvm::BasicBlock *v12;
  uint64_t j;
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  int v25;
  unint64_t *v26;
  llvm::BasicBlock *v27;
  unint64_t v29;
  llvm::MemorySSA *v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  llvm::BasicBlock *v41;
  int32x2_t *v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  llvm::BasicBlock **v47;
  llvm::BasicBlock *v48;
  int v49;
  int v50;
  unint64_t *v51;
  unint64_t *v52;
  void **v53;
  BOOL v54;
  uint64_t v55;
  _QWORD *v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  llvm::MemoryAccess *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  BOOL v69;
  int v71;
  uint64_t v72;
  uint64_t m;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  unint64_t *v85;
  int32x2_t ****v86;
  unint64_t v88;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  int v99;
  int v100;
  unint64_t v101;
  int32x2_t ****v102;
  int32x2_t *v103;
  unint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  int32x2_t *****v108;
  int32x2_t ****v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  int32x2_t ****v115;
  unint64_t v117;
  int v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  int32x2_t ****v123;
  int v124;
  int v125;
  unint64_t v126;
  int32x2_t ****v127;
  int32x2_t *v128;
  unint64_t v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  int32x2_t *****v133;
  int32x2_t ****v134;
  int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  void **v139;
  llvm::MemoryAccess *k;
  char *MemoryPhi;
  uint64_t v144;
  unint64_t *v145;
  llvm::BasicBlock *v146;
  unint64_t *v147;
  unint64_t *v148;
  llvm::BasicBlock *v149;
  uint64_t v150;
  unint64_t *v151;
  int32x2_t ****v152;
  void **v153;
  void **v154;
  uint64_t v155;
  void **v156;
  void **v157;
  llvm::BasicBlock *v158;
  uint64_t v159;
  _QWORD v160[11];

  v7 = (llvm::BasicBlock *)a3;
  v8 = (uint64_t *)result;
  v160[9] = *MEMORY[0x1E0C80C00];
  v160[0] = 1;
  for (i = 1; i != 9; i += 2)
    v160[i] = -4096;
  v11 = *(void ***)(a2 + 32);
  v10 = *(void ***)(a2 + 40);
  v153 = v10;
  v154 = v10;
  v12 = (llvm::BasicBlock *)(a3 + 8 * a4);
  v155 = a3;
  v156 = v11;
  v157 = v11;
  v158 = v12;
  for (j = a3; ; j = v155)
  {
    if (v10 == v11 && (llvm::BasicBlock *)j == v12)
    {
      v14 = v157 == v11 && v158 == v12;
      if (v14)
        break;
    }
    v15 = 0;
    do
    {
      v16 = (uint64_t *)(*(uint64_t (**)(void ***))((char *)&off_1E81399A8 + v15))(&v153);
      v15 += 16;
    }
    while (!v16);
    v17 = *v16;
    v18 = *(_QWORD *)a5;
    v19 = *(unsigned int *)(a5 + 16);
    v20 = *v16 >> 4;
    if ((_DWORD)v19)
    {
      v21 = ((_DWORD)v19 - 1) & (v20 ^ (v17 >> 9));
      v22 = (_QWORD *)(v18 + (v21 << 6));
      v23 = v22[3];
      if (v17 == v23)
        goto LABEL_19;
      v24 = 1;
      while (v23 != -4096)
      {
        v25 = v21 + v24++;
        v21 = v25 & (v19 - 1);
        v22 = (_QWORD *)(v18 + (v21 << 6));
        v23 = v22[3];
        if (v17 == v23)
          goto LABEL_19;
      }
    }
    v22 = (_QWORD *)(v18 + (v19 << 6));
LABEL_19:
    v144 = 6;
    if (v22 == (_QWORD *)(v18 + (v19 << 6)))
    {
      v26 = 0;
      v27 = 0;
      v145 = 0;
      v146 = 0;
    }
    else
    {
      v26 = 0;
      v27 = (llvm::BasicBlock *)v22[7];
      v145 = 0;
      v146 = v27;
      if (v27 != (llvm::BasicBlock *)-8192 && v27 != (llvm::BasicBlock *)-4096 && v27 != 0)
      {
        v29 = v22[5] & 0xFFFFFFFFFFFFFFF8;
        v145 = *(unint64_t **)v29;
        *(_QWORD *)v29 = &v144;
        v144 = v29 | 6;
        v26 = v145;
        if (v145)
          *v145 = *v145 & 7 | (unint64_t)&v145;
        v27 = v146;
      }
    }
    if (v27 != (llvm::BasicBlock *)-8192 && v27 != (llvm::BasicBlock *)-4096 && v27 != 0)
    {
      v40 = v144 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v144 & 0xFFFFFFFFFFFFFFF8) = v26;
      if (v145)
      {
        *v145 = *v145 & 7 | v40;
      }
      else
      {
        v41 = v146;
        v42 = ***(int32x2_t ****)v146;
        v43 = (unint64_t)v42[303];
        if (v43 <= v40)
        {
          v44 = v42[305].u32[0];
          if (v43 + 16 * v44 > v40)
          {
            v45 = v44 - 1;
            LODWORD(v46) = v45 & ((v146 >> 4) ^ (v146 >> 9));
            v47 = (llvm::BasicBlock **)(v43 + 16 * v46);
            v48 = *v47;
            if (v146 == *v47)
            {
LABEL_57:
              *v47 = (llvm::BasicBlock *)-8192;
              v42[304] = vadd_s32(v42[304], (int32x2_t)0x1FFFFFFFFLL);
              v41 = v146;
            }
            else
            {
              v49 = 1;
              while (v48 != (llvm::BasicBlock *)-4096)
              {
                v50 = v46 + v49++;
                v46 = v50 & v45;
                v48 = *(llvm::BasicBlock **)(v43 + 16 * v46);
                if (v146 == v48)
                {
                  v47 = (llvm::BasicBlock **)(v43 + 16 * v46);
                  goto LABEL_57;
                }
              }
            }
            *((_BYTE *)v41 + 17) &= ~1u;
          }
        }
      }
    }
    if (v27)
    {
      v144 = 0;
      v31 = (llvm::MemorySSA *)*v8;
      v32 = *(_DWORD *)(*v8 + 40);
      if (v32)
      {
        v33 = *((_QWORD *)v31 + 3);
        v34 = v32 - 1;
        v35 = v34 & (v20 ^ (v17 >> 9));
        v36 = *(_QWORD *)(v33 + 16 * v35);
        if (v17 == v36)
        {
LABEL_41:
          v144 = *(_QWORD *)(v33 + 16 * v35 + 8);
          if (v144)
          {
            MemoryPhi = llvm::MemorySSA::createMemoryPhi(v31, v27);
            sub_1C4EE530C(v160, &v144)[1] = MemoryPhi;
          }
        }
        else
        {
          v37 = 1;
          while (v36 != -4096)
          {
            v38 = v35 + v37++;
            v35 = v38 & v34;
            v36 = *(_QWORD *)(v33 + 16 * v35);
            if (v17 == v36)
              goto LABEL_41;
          }
        }
      }
      llvm::MemorySSAUpdater::cloneUsesAndDefs(v8, v17, v27, a5, (uint64_t)v160, 0);
    }
    v39 = 0;
    do
    {
      result = (*(uint64_t (**)(void ***))((char *)&off_1E8139988 + v39))(&v153);
      if ((result & 1) != 0)
        break;
      v14 = v39 == 16;
      v39 += 16;
    }
    while (!v14);
    v10 = v154;
  }
  v52 = *(unint64_t **)(a2 + 32);
  v51 = *(unint64_t **)(a2 + 40);
  v144 = (uint64_t)v51;
  v145 = v51;
  v146 = v7;
  v147 = v52;
  v148 = v52;
  v149 = v12;
  v53 = (void **)&v157;
  while (2)
  {
    if (v51 != v52 || v7 != v12 || (v148 == v52 ? (v54 = v149 == v12) : (v54 = 0), !v54))
    {
      v55 = 0;
      do
      {
        v56 = (_QWORD *)(*(uint64_t (**)(uint64_t *))((char *)&off_1E81399A8 + v55))(&v144);
        v55 += 16;
      }
      while (!v56);
      v57 = *(_DWORD *)(*v8 + 40);
      if (v57)
      {
        v58 = *(_QWORD *)(*v8 + 24);
        v59 = v57 - 1;
        v60 = ((*v56 >> 4) ^ (*v56 >> 9)) & (v57 - 1);
        v61 = *(_QWORD *)(v58 + 16 * (((*v56 >> 4) ^ (*v56 >> 9)) & v59));
        if (*v56 != v61)
        {
          v62 = 1;
          while (v61 != -4096)
          {
            v63 = v60 + v62++;
            v60 = v63 & v59;
            v61 = *(_QWORD *)(v58 + 16 * v60);
            if (*v56 == v61)
              goto LABEL_74;
          }
          goto LABEL_192;
        }
LABEL_74:
        v64 = *(_QWORD *)(v58 + 16 * v60 + 8);
        if (v64)
        {
          v153 = 0;
          if ((sub_1C4EE5260((uint64_t)v160, v64, &v153) & 1) != 0)
          {
            v65 = (llvm::MemoryAccess *)v153[1];
            if (v65)
            {
              v159 = v64;
              v66 = *(_QWORD *)(*((_QWORD *)v65 + 8) + 8);
              for (k = v65; v66; v66 = *(_QWORD *)(v66 + 8))
              {
                v67 = *(_QWORD *)(v66 + 24);
                v68 = *(unsigned __int8 *)(v67 + 16);
                if (v67)
                  v69 = v68 >= 0x1C;
                else
                  v69 = 0;
                if (v69 && v68 - 29 < 0xB)
                  break;
              }
              v153 = v53;
              v154 = v53;
              v139 = v53;
              v155 = 4;
              LODWORD(v156) = 0;
              sub_1C4EE414C((llvm::SmallPtrSetImplBase *)&v153, v66, 0);
              v71 = *(_DWORD *)(v159 + 20);
              v72 = v71 & 0x7FFFFFF;
              if ((v71 & 0x7FFFFFF) != 0)
              {
                for (m = 0; m != v72; ++m)
                {
                  v74 = *(_DWORD *)(v159 + 20);
                  if ((v74 & 0x40000000) != 0)
                    v75 = *(_QWORD *)(v159 - 8);
                  else
                    v75 = v159 - 32 * (v74 & 0x7FFFFFF);
                  v76 = *(_QWORD *)(v75 + 32 * *(unsigned int *)(v159 + 76) + 8 * m);
                  v77 = *(_QWORD *)a5;
                  v78 = *(unsigned int *)(a5 + 16);
                  if ((_DWORD)v78)
                  {
                    v79 = ((_DWORD)v78 - 1) & ((v76 >> 4) ^ (v76 >> 9));
                    v80 = (_QWORD *)(v77 + (v79 << 6));
                    v81 = v80[3];
                    if (v76 == v81)
                      goto LABEL_99;
                    v82 = 1;
                    while (v81 != -4096)
                    {
                      v83 = v79 + v82++;
                      v79 = v83 & (v78 - 1);
                      v80 = (_QWORD *)(v77 + (v79 << 6));
                      v81 = v80[3];
                      if (v76 == v81)
                        goto LABEL_99;
                    }
                  }
                  v80 = (_QWORD *)(v77 + (v78 << 6));
LABEL_99:
                  v84 = *(_QWORD *)(v75 + 32 * m);
                  v150 = 6;
                  if (v80 == (_QWORD *)(v77 + (v78 << 6)))
                  {
                    v85 = 0;
                    v86 = 0;
                    v151 = 0;
                    v152 = 0;
                  }
                  else
                  {
                    v85 = 0;
                    v86 = (int32x2_t ****)v80[7];
                    v151 = 0;
                    v152 = v86;
                    if (v86 != (int32x2_t ****)-8192 && v86 != (int32x2_t ****)-4096 && v86 != 0)
                    {
                      v88 = v80[5] & 0xFFFFFFFFFFFFFFF8;
                      v151 = *(unint64_t **)v88;
                      *(_QWORD *)v88 = &v150;
                      v150 = v88 | 6;
                      v85 = v151;
                      if (v151)
                        *v151 = *v151 & 7 | (unint64_t)&v151;
                      v86 = v152;
                    }
                  }
                  if (v86 != (int32x2_t ****)-8192 && v86 != (int32x2_t ****)-4096 && v86 != 0)
                  {
                    v101 = v150 & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)(v150 & 0xFFFFFFFFFFFFFFF8) = v85;
                    if (v151)
                    {
                      *v151 = *v151 & 7 | v101;
                    }
                    else
                    {
                      v102 = v152;
                      v103 = ***v152;
                      v104 = (unint64_t)v103[303];
                      if (v104 <= v101)
                      {
                        v105 = v103[305].u32[0];
                        if (v104 + 16 * v105 > v101)
                        {
                          v106 = v105 - 1;
                          LODWORD(v107) = v106 & ((v152 >> 4) ^ (v152 >> 9));
                          v108 = (int32x2_t *****)(v104 + 16 * v107);
                          v109 = *v108;
                          if (v152 == *v108)
                          {
LABEL_141:
                            *v108 = (int32x2_t ****)-8192;
                            v103[304] = vadd_s32(v103[304], (int32x2_t)0x1FFFFFFFFLL);
                            v102 = v152;
                          }
                          else
                          {
                            v110 = 1;
                            while (v109 != (int32x2_t ****)-4096)
                            {
                              v111 = v107 + v110++;
                              v107 = v111 & v106;
                              v109 = *(int32x2_t *****)(v104 + 16 * v107);
                              if (v152 == v109)
                              {
                                v108 = (int32x2_t *****)(v104 + 16 * v107);
                                goto LABEL_141;
                              }
                            }
                          }
                          *((_BYTE *)v102 + 17) &= ~1u;
                        }
                      }
                    }
                  }
                  if (v86)
                    v90 = (uint64_t)v86;
                  else
                    v90 = v76;
                  if (!v86 && (a6 & 1) != 0)
                    continue;
                  v91 = (char *)sub_1C477672C((uint64_t)&v153, v90);
                  v92 = v154 == v153 ? (uint64_t *)((char *)&v155 + 4) : &v155;
                  if (v91 == (char *)&v154[*(unsigned int *)v92])
                    continue;
                  if (*(unsigned __int8 *)(v84 + 16) - 27 >= 0xFFFFFFFE && v84)
                  {
                    if (*(_QWORD *)(*v8 + 96) != v84)
                    {
                      v93 = *(_QWORD *)a5;
                      v94 = *(unsigned int *)(a5 + 16);
                      if (!(_DWORD)v94)
                        goto LABEL_147;
                      v95 = *(_QWORD *)(v84 + 72);
                      v96 = ((_DWORD)v94 - 1) & ((v95 >> 4) ^ (v95 >> 9));
                      v97 = (_QWORD *)(v93 + (v96 << 6));
                      v98 = v97[3];
                      if (v95 != v98)
                      {
                        v99 = 1;
                        while (v98 != -4096)
                        {
                          v100 = v96 + v99++;
                          v96 = v100 & (v94 - 1);
                          v97 = (_QWORD *)(v93 + (v96 << 6));
                          v98 = v97[3];
                          if (v95 == v98)
                            goto LABEL_148;
                        }
LABEL_147:
                        v97 = (_QWORD *)(v93 + (v94 << 6));
                      }
LABEL_148:
                      v150 = 6;
                      if (v97 == (_QWORD *)(v93 + (v94 << 6)))
                      {
                        v114 = 0;
                        v115 = 0;
                        v151 = 0;
                        v152 = 0;
                      }
                      else
                      {
                        v114 = 0;
                        v115 = (int32x2_t ****)v97[7];
                        v151 = 0;
                        v152 = v115;
                        if (v115 != (int32x2_t ****)-8192 && v115 != (int32x2_t ****)-4096 && v115 != 0)
                        {
                          v117 = v97[5] & 0xFFFFFFFFFFFFFFF8;
                          v151 = *(unint64_t **)v117;
                          *(_QWORD *)v117 = &v150;
                          v150 = v117 | 6;
                          v114 = v151;
                          if (v151)
                            *v151 = *v151 & 7 | (unint64_t)&v151;
                          v115 = v152;
                        }
                      }
                      if (v115 != (int32x2_t ****)-8192 && v115 != (int32x2_t ****)-4096 && v115 != 0)
                      {
                        v126 = v150 & 0xFFFFFFFFFFFFFFF8;
                        *(_QWORD *)(v150 & 0xFFFFFFFFFFFFFFF8) = v114;
                        if (v151)
                        {
                          *v151 = *v151 & 7 | v126;
                        }
                        else
                        {
                          v127 = v152;
                          v128 = ***v152;
                          v129 = (unint64_t)v128[303];
                          if (v129 <= v126)
                          {
                            v130 = v128[305].u32[0];
                            if (v129 + 16 * v130 > v126)
                            {
                              v131 = v130 - 1;
                              LODWORD(v132) = v131 & ((v152 >> 4) ^ (v152 >> 9));
                              v133 = (int32x2_t *****)(v129 + 16 * v132);
                              v134 = *v133;
                              if (v152 == *v133)
                              {
LABEL_184:
                                *v133 = (int32x2_t ****)-8192;
                                v128[304] = vadd_s32(v128[304], (int32x2_t)0x1FFFFFFFFLL);
                                v127 = v152;
                              }
                              else
                              {
                                v135 = 1;
                                while (v134 != (int32x2_t ****)-4096)
                                {
                                  v136 = v132 + v135++;
                                  v132 = v136 & v131;
                                  v134 = *(int32x2_t *****)(v129 + 16 * v132);
                                  if (v152 == v134)
                                  {
                                    v133 = (int32x2_t *****)(v129 + 16 * v132);
                                    goto LABEL_184;
                                  }
                                }
                              }
                              *((_BYTE *)v127 + 17) &= ~1u;
                            }
                          }
                        }
                      }
                      if (v115)
                      {
                        v119 = *(_DWORD *)(*v8 + 40);
                        if (!v119)
                          goto LABEL_171;
                        v120 = *(_QWORD *)(*v8 + 24);
                        v121 = v119 - 1;
                        v122 = (v119 - 1) & ((v115 >> 4) ^ (v115 >> 9));
                        v123 = *(int32x2_t *****)(v120 + 16 * v122);
                        if (v115 == v123)
                        {
LABEL_170:
                          v84 = *(_QWORD *)(v120 + 16 * v122 + 8);
                        }
                        else
                        {
                          v124 = 1;
                          while (v123 != (int32x2_t ****)-4096)
                          {
                            v125 = v122 + v124++;
                            v122 = v125 & v121;
                            v123 = *(int32x2_t *****)(v120 + 16 * v122);
                            if (v115 == v123)
                              goto LABEL_170;
                          }
LABEL_171:
                          v84 = 0;
                        }
                      }
                    }
LABEL_172:
                    v113 = (uint64_t)k;
                    v112 = v84;
                    goto LABEL_173;
                  }
                  v150 = 0;
                  if ((sub_1C4EE5260((uint64_t)v160, v84, &v150) & 1) == 0)
                    goto LABEL_172;
                  v112 = *(_QWORD *)(v150 + 8);
                  if (!v112)
                    goto LABEL_172;
                  v113 = (uint64_t)k;
LABEL_173:
                  sub_1C4ECE04C(v113, v112, v90);
                }
              }
              v137 = sub_1C4EE37B8((uint64_t)k);
              if (v137)
              {
                sub_1C4EE530C(v160, &v159)[1] = v137;
                llvm::MemorySSAUpdater::removeMemoryAccess((int32x2_t **)v8, k, 0);
              }
              if (v154 != v153)
                free(v154);
              v53 = v139;
            }
          }
        }
      }
LABEL_192:
      v138 = 0;
      do
      {
        result = (*(uint64_t (**)(uint64_t *))((char *)&off_1E8139988 + v138))(&v144);
        if ((result & 1) != 0)
          break;
        v14 = v138 == 16;
        v138 += 16;
      }
      while (!v14);
      v51 = v145;
      v7 = v146;
      continue;
    }
    break;
  }
  if ((v160[0] & 1) == 0)
    return MEMORY[0x1CAA32FB4](v160[1], 8);
  return result;
}

uint64_t *llvm::MemorySSAUpdater::updateForClonedBlockIntoPred(uint64_t *a1, uint64_t a2, llvm::BasicBlock *a3, uint64_t a4)
{
  uint64_t i;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *result;
  uint64_t v19;
  _QWORD v20[10];

  v20[9] = *MEMORY[0x1E0C80C00];
  v20[0] = 1;
  for (i = 1; i != 9; i += 2)
    v20[i] = -4096;
  v9 = *(_DWORD *)(*a1 + 40);
  if (v9)
  {
    v10 = *(_QWORD *)(*a1 + 24);
    v11 = v9 - 1;
    v12 = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v13 = *(_QWORD *)(v10 + 16 * v12);
    if (v13 == a2)
    {
LABEL_8:
      v16 = *(_QWORD *)(v10 + 16 * v12 + 8);
      v19 = v16;
      if (v16)
      {
        v17 = sub_1C4EDF32C(v16, (uint64_t)a3);
        sub_1C4EE530C(v20, &v19)[1] = v17;
      }
    }
    else
    {
      v14 = 1;
      while (v13 != -4096)
      {
        v15 = v12 + v14++;
        v12 = v15 & v11;
        v13 = *(_QWORD *)(v10 + 16 * v12);
        if (v13 == a2)
          goto LABEL_8;
      }
    }
  }
  result = llvm::MemorySSAUpdater::cloneUsesAndDefs(a1, a2, a3, a4, (uint64_t)v20, 1);
  if ((v20[0] & 1) == 0)
    return (uint64_t *)MEMORY[0x1CAA32FB4](v20[1], 8);
  return result;
}

void sub_1C4EE0074(int32x2_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t a6)
{
  uint64_t **v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t *v19;
  int32x2_t ****v20;
  unint64_t v22;
  int32x2_t ****v24;
  unsigned __int8 *v25;
  llvm::Instruction *v26;
  unint64_t v27;
  int32x2_t ****v28;
  int32x2_t *v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int32x2_t *****v34;
  int32x2_t ****v35;
  int v36;
  int v37;
  uint64_t Successor;
  uint64_t v39;
  int32x2_t *****v40;
  _QWORD *v41;
  int32x2_t **v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v46;
  unint64_t *v47;
  int32x2_t ****v48;
  void *v49;
  uint64_t v50;
  _QWORD v51[10];

  v51[8] = *MEMORY[0x1E0C80C00];
  v49 = v51;
  v50 = 0x400000000;
  if (a3)
  {
    v7 = a4;
    v8 = a2;
    v42 = a1;
    v43 = a6;
    v9 = 0;
    v44 = &a2[a3];
    while (v7 == a5)
    {
LABEL_53:
      ++v8;
      v7 = a4;
      if (v8 == v44)
      {
        v41 = v49;
        a3 = v9;
        a6 = v43;
        a1 = v42;
        goto LABEL_56;
      }
    }
    v10 = *v8;
    v11 = (*v8 >> 4) ^ (*v8 >> 9);
    while (1)
    {
      v12 = **v7;
      v13 = *((unsigned int *)*v7 + 4);
      if (!(_DWORD)v13)
        goto LABEL_11;
      v14 = ((_DWORD)v13 - 1) & v11;
      v15 = (_QWORD *)(v12 + (v14 << 6));
      v16 = v15[3];
      if (v10 != v16)
        break;
LABEL_12:
      v46 = 6;
      if (v15 == (_QWORD *)(v12 + (v13 << 6)))
      {
        v19 = 0;
        v20 = 0;
        v47 = 0;
        v48 = 0;
      }
      else
      {
        v19 = 0;
        v20 = (int32x2_t ****)v15[7];
        v47 = 0;
        v48 = v20;
        if (v20 != (int32x2_t ****)-8192 && v20 != (int32x2_t ****)-4096 && v20 != 0)
        {
          v22 = v15[5] & 0xFFFFFFFFFFFFFFF8;
          v47 = *(unint64_t **)v22;
          *(_QWORD *)v22 = &v46;
          v46 = v22 | 6;
          v19 = v47;
          if (v47)
            *v47 = *v47 & 7 | (unint64_t)&v47;
          v20 = v48;
        }
      }
      if (v20 != (int32x2_t ****)-8192 && v20 != (int32x2_t ****)-4096 && v20 != 0)
      {
        v27 = v46 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v46 & 0xFFFFFFFFFFFFFFF8) = v19;
        if (v47)
        {
          *v47 = *v47 & 7 | v27;
        }
        else
        {
          v28 = v48;
          v29 = ***v48;
          v30 = (unint64_t)v29[303];
          if (v30 <= v27)
          {
            v31 = v29[305].u32[0];
            if (v30 + 16 * v31 > v27)
            {
              v32 = v31 - 1;
              LODWORD(v33) = v32 & ((v48 >> 4) ^ (v48 >> 9));
              v34 = (int32x2_t *****)(v30 + 16 * v33);
              v35 = *v34;
              if (v48 == *v34)
              {
LABEL_44:
                *v34 = (int32x2_t ****)-8192;
                v29[304] = vadd_s32(v29[304], (int32x2_t)0x1FFFFFFFFLL);
                v28 = v48;
              }
              else
              {
                v36 = 1;
                while (v35 != (int32x2_t ****)-4096)
                {
                  v37 = v33 + v36++;
                  v33 = v37 & v32;
                  v35 = *(int32x2_t *****)(v30 + 16 * v33);
                  if (v48 == v35)
                  {
                    v34 = (int32x2_t *****)(v30 + 16 * v33);
                    goto LABEL_44;
                  }
                }
              }
              *((_BYTE *)v28 + 17) &= ~1u;
            }
          }
        }
      }
      if (v20)
      {
        v24 = (int32x2_t ****)v20[5];
        if (v24 == v20 + 5)
        {
          v26 = 0;
        }
        else
        {
          if (v24)
            v25 = (unsigned __int8 *)(v24 - 3);
          else
            v25 = 0;
          if (v25[16] - 29 >= 0xB)
            v26 = 0;
          else
            v26 = (llvm::Instruction *)v25;
        }
        Successor = llvm::Instruction::getSuccessor(v26, 0);
        v39 = v50;
        if (v50 >= (unint64_t)HIDWORD(v50))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, (uint64_t)v51, v50 + 1, 16);
          v39 = v50;
        }
        v40 = (int32x2_t *****)((char *)v49 + 16 * v39);
        *v40 = v20;
        v40[1] = (int32x2_t ****)(Successor & 0xFFFFFFFFFFFFFFFBLL);
        v9 = v50 + 1;
        LODWORD(v50) = v50 + 1;
      }
      if (++v7 == a5)
        goto LABEL_53;
    }
    v17 = 1;
    while (v16 != -4096)
    {
      v18 = v14 + v17++;
      v14 = v18 & (v13 - 1);
      v15 = (_QWORD *)(v12 + (v14 << 6));
      v16 = v15[3];
      if (v10 == v16)
        goto LABEL_12;
    }
LABEL_11:
    v15 = (_QWORD *)(v12 + (v13 << 6));
    goto LABEL_12;
  }
  v41 = v51;
LABEL_56:
  llvm::MemorySSAUpdater::applyInsertUpdates(a1, (uint64_t)v41, a3, a6);
  if (v49 != v51)
    free(v49);
}

void llvm::MemorySSAUpdater::updateExitBlocksForClonedLoop(int32x2_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  unsigned int v7;
  uint64_t **v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t *v19;
  int32x2_t ****v20;
  unint64_t v22;
  int32x2_t ****v24;
  unsigned __int8 *v25;
  llvm::Instruction *v26;
  unint64_t v27;
  int32x2_t ****v28;
  int32x2_t *v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int32x2_t *****v34;
  int32x2_t ****v35;
  int v36;
  int v37;
  uint64_t Successor;
  uint64_t v39;
  int32x2_t *****v40;
  _QWORD *v41;
  int32x2_t **v42;
  uint64_t v43;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  int32x2_t ****v49;
  void *v50;
  uint64_t v51;
  _QWORD v52[10];

  v52[8] = *MEMORY[0x1E0C80C00];
  v50 = v52;
  v51 = 0x400000000;
  if (a3)
  {
    v6 = a2;
    v42 = a1;
    v43 = a6;
    v7 = 0;
    v8 = &a4[a5];
    v45 = &a2[a3];
    v46 = a5;
    while (!a5)
    {
LABEL_53:
      ++v6;
      a5 = v46;
      if (v6 == v45)
      {
        v41 = v50;
        a3 = v7;
        a6 = v43;
        a1 = v42;
        goto LABEL_56;
      }
    }
    v9 = *v6;
    v10 = (*v6 >> 4) ^ (*v6 >> 9);
    v11 = a4;
    while (1)
    {
      v12 = **v11;
      v13 = *((unsigned int *)*v11 + 4);
      if (!(_DWORD)v13)
        goto LABEL_11;
      v14 = ((_DWORD)v13 - 1) & v10;
      v15 = (_QWORD *)(v12 + (v14 << 6));
      v16 = v15[3];
      if (v9 != v16)
        break;
LABEL_12:
      v47 = 6;
      if (v15 == (_QWORD *)(v12 + (v13 << 6)))
      {
        v19 = 0;
        v20 = 0;
        v48 = 0;
        v49 = 0;
      }
      else
      {
        v19 = 0;
        v20 = (int32x2_t ****)v15[7];
        v48 = 0;
        v49 = v20;
        if (v20 != (int32x2_t ****)-8192 && v20 != (int32x2_t ****)-4096 && v20 != 0)
        {
          v22 = v15[5] & 0xFFFFFFFFFFFFFFF8;
          v48 = *(unint64_t **)v22;
          *(_QWORD *)v22 = &v47;
          v47 = v22 | 6;
          v19 = v48;
          if (v48)
            *v48 = *v48 & 7 | (unint64_t)&v48;
          v20 = v49;
        }
      }
      if (v20 != (int32x2_t ****)-8192 && v20 != (int32x2_t ****)-4096 && v20 != 0)
      {
        v27 = v47 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v47 & 0xFFFFFFFFFFFFFFF8) = v19;
        if (v48)
        {
          *v48 = *v48 & 7 | v27;
        }
        else
        {
          v28 = v49;
          v29 = ***v49;
          v30 = (unint64_t)v29[303];
          if (v30 <= v27)
          {
            v31 = v29[305].u32[0];
            if (v30 + 16 * v31 > v27)
            {
              v32 = v31 - 1;
              LODWORD(v33) = v32 & ((v49 >> 4) ^ (v49 >> 9));
              v34 = (int32x2_t *****)(v30 + 16 * v33);
              v35 = *v34;
              if (v49 == *v34)
              {
LABEL_44:
                *v34 = (int32x2_t ****)-8192;
                v29[304] = vadd_s32(v29[304], (int32x2_t)0x1FFFFFFFFLL);
                v28 = v49;
              }
              else
              {
                v36 = 1;
                while (v35 != (int32x2_t ****)-4096)
                {
                  v37 = v33 + v36++;
                  v33 = v37 & v32;
                  v35 = *(int32x2_t *****)(v30 + 16 * v33);
                  if (v49 == v35)
                  {
                    v34 = (int32x2_t *****)(v30 + 16 * v33);
                    goto LABEL_44;
                  }
                }
              }
              *((_BYTE *)v28 + 17) &= ~1u;
            }
          }
        }
      }
      if (v20)
      {
        v24 = (int32x2_t ****)v20[5];
        if (v24 == v20 + 5)
        {
          v26 = 0;
        }
        else
        {
          if (v24)
            v25 = (unsigned __int8 *)(v24 - 3);
          else
            v25 = 0;
          if (v25[16] - 29 >= 0xB)
            v26 = 0;
          else
            v26 = (llvm::Instruction *)v25;
        }
        Successor = llvm::Instruction::getSuccessor(v26, 0);
        v39 = v51;
        if (v51 >= (unint64_t)HIDWORD(v51))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)v52, v51 + 1, 16);
          v39 = v51;
        }
        v40 = (int32x2_t *****)((char *)v50 + 16 * v39);
        *v40 = v20;
        v40[1] = (int32x2_t ****)(Successor & 0xFFFFFFFFFFFFFFFBLL);
        v7 = v51 + 1;
        LODWORD(v51) = v51 + 1;
      }
      if (++v11 == v8)
        goto LABEL_53;
    }
    v17 = 1;
    while (v16 != -4096)
    {
      v18 = v14 + v17++;
      v14 = v18 & (v13 - 1);
      v15 = (_QWORD *)(v12 + (v14 << 6));
      v16 = v15[3];
      if (v9 == v16)
        goto LABEL_12;
    }
LABEL_11:
    v15 = (_QWORD *)(v12 + (v13 << 6));
    goto LABEL_12;
  }
  v41 = v52;
LABEL_56:
  llvm::MemorySSAUpdater::applyInsertUpdates(a1, (uint64_t)v41, a3, a6);
  if (v50 != v52)
    free(v50);
}

void llvm::MemorySSAUpdater::applyUpdates(int32x2_t **this, unint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t j;
  void **v24;
  llvm::BasicBlock **v25;
  llvm::BasicBlock **v26;
  llvm::BasicBlock *v27;
  llvm::BasicBlock *v28;
  _BYTE v30[296];
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _BYTE v36[64];
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40;
  uint64_t v41;
  _BYTE v42[64];
  void *v43[2];
  _BYTE v44[280];
  _QWORD v45[37];
  char v46;
  void *v47;
  uint64_t v48;
  _QWORD v49[10];

  v6 = a4;
  v49[8] = *MEMORY[0x1E0C80C00];
  v40 = v42;
  v41 = 0x400000000;
  v37 = v39;
  v38 = 0x400000000;
  v34 = v36;
  v35 = 0x400000000;
  if (!a3)
    goto LABEL_17;
  v10 = 16 * a3;
  v11 = (uint64_t *)(a2 + 1);
  do
  {
    v12 = *(v11 - 1);
    v13 = *v11 & 0xFFFFFFFFFFFFFFF8;
    if ((*v11 & 4) != 0)
    {
      v17 = v41;
      if (v41 >= (unint64_t)HIDWORD(v41))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, (uint64_t)v42, v41 + 1, 16);
        v17 = v41;
      }
      v18 = (char *)v40 + 16 * v17;
      *v18 = v12;
      v18[1] = v13 | 4;
      LODWORD(v41) = v41 + 1;
      v20 = *(v11 - 1);
      v19 = *v11;
      v21 = v38;
      if (v38 >= (unint64_t)HIDWORD(v38))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, (uint64_t)v39, v38 + 1, 16);
        v21 = v38;
      }
      v13 = v19 & 0xFFFFFFFFFFFFFFF8;
      v15 = (char *)v37 + 16 * v21;
      *(_QWORD *)v15 = v20;
      v16 = &v38;
    }
    else
    {
      v14 = v35;
      if (v35 >= (unint64_t)HIDWORD(v35))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, (uint64_t)v36, v35 + 1, 16);
        v14 = v35;
      }
      v15 = (char *)v34 + 16 * v14;
      *(_QWORD *)v15 = v12;
      v16 = &v35;
    }
    *((_QWORD *)v15 + 1) = v13;
    ++*(_DWORD *)v16;
    v11 += 2;
    v10 -= 16;
  }
  while (v10);
  v6 = a4;
  if ((_DWORD)v41)
  {
    if ((_DWORD)v35)
    {
      if ((a5 & 1) != 0)
      {
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::applyUpdates(a4, a2, a3, (unint64_t *)v37, v38);
      }
      else
      {
        v43[0] = v44;
        v43[1] = 0;
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::applyUpdates(a4, v44, 0, (unint64_t *)v37, v38);
        if (v43[0] != v44)
          free(v43[0]);
      }
      sub_1C4E25D14((uint64_t)v30, (unint64_t *)v37, v38, 0);
      llvm::MemorySSAUpdater::applyInsertUpdates(this, (uint64_t)v34, v35, a4, (uint64_t)v30);
      sub_1C4E25D14((uint64_t)v43, (unint64_t *)v40, v41, 1u);
      llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(a4, (uint64_t)v43, 0);
      if (v47 != v49)
        free(v47);
      sub_1C4E28CA4((uint64_t)v45);
      sub_1C4E28CA4((uint64_t)v43);
      if (v32 != &v33)
        free(v32);
      sub_1C4E28CA4((uint64_t)&v31);
      v24 = (void **)v30;
      goto LABEL_39;
    }
    if (!a5)
      goto LABEL_40;
    sub_1C4E25D14((uint64_t)v43, (unint64_t *)v40, v41, 1u);
    llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(a4, (uint64_t)v43, 0);
    if (v47 != v49)
      free(v47);
  }
  else
  {
LABEL_17:
    if (a5)
    {
      sub_1C4E25D14((uint64_t)v43, a2, a3, 1u);
      llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(v6, (uint64_t)v43, 0);
      if (v47 != v49)
        free(v47);
      sub_1C4E28CA4((uint64_t)v45);
      sub_1C4E28CA4((uint64_t)v43);
    }
    v43[0] = (void *)1;
    for (i = 1; i != 37; i += 9)
      v43[i] = (void *)-4096;
    v45[0] = 1;
    for (j = 38; j != 74; j += 9)
      v43[j] = (void *)-4096;
    v46 = 0;
    v47 = v49;
    v48 = 0x400000000;
    llvm::MemorySSAUpdater::applyInsertUpdates(this, (uint64_t)v34, v35, v6, (uint64_t)v43);
    if (v47 != v49)
      free(v47);
  }
  sub_1C4E28CA4((uint64_t)v45);
  v24 = v43;
LABEL_39:
  sub_1C4E28CA4((uint64_t)v24);
LABEL_40:
  if ((_DWORD)v41)
  {
    v25 = (llvm::BasicBlock **)v40;
    v26 = (llvm::BasicBlock **)((char *)v40 + 16 * v41);
    do
    {
      v27 = *v25;
      v28 = v25[1];
      v25 += 2;
      llvm::MemorySSAUpdater::removeEdge((llvm::MemorySSAUpdater *)this, v27, (llvm::BasicBlock *)((unint64_t)v28 & 0xFFFFFFFFFFFFFFF8));
    }
    while (v25 != v26);
  }
  if (v34 != v36)
    free(v34);
  if (v37 != v39)
    free(v37);
  if (v40 != v42)
    free(v40);
}

void llvm::MemorySSAUpdater::applyInsertUpdates(int32x2_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  char v17;
  void *v18;
  char *v19;
  int v20;
  int v21;
  unsigned int v22;
  char *v23;
  void *v24;
  char *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  char *v29;
  _QWORD *v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  void **v37;
  uint64_t v38;
  unsigned int *v39;
  unint64_t v40;
  char *v41;
  unsigned int *v42;
  uint64_t v43;
  int64x2_t v44;
  uint64_t *v45;
  int v46;
  void **v47;
  unsigned int v48;
  void **v49;
  unsigned int v50;
  void **v51;
  void **v52;
  BOOL v53;
  void **v54;
  unsigned int v55;
  uint64_t v56;
  char **v57;
  char **v58;
  char *v59;
  unsigned int v60;
  int v61;
  void **v62;
  int v63;
  unsigned int v64;
  char *v65;
  int v66;
  unsigned int v67;
  int v68;
  void **v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  char **v73;
  char *v74;
  char **v75;
  int v76;
  BOOL v77;
  unsigned int v78;
  char **v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  void **v84;
  uint64_t *v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  _QWORD *v93;
  char *v94;
  char *v95;
  unint64_t *v96;
  unint64_t v97;
  unsigned int v98;
  uint64_t j;
  void **v100;
  int v101;
  llvm::BasicBlock *v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  llvm::BasicBlock *v106;
  int32x2_t *v107;
  __int32 v108;
  int32x2_t v109;
  __int32 v110;
  uint64_t v111;
  llvm::BasicBlock *v112;
  int v113;
  int v114;
  char *MemoryPhi;
  _QWORD *v116;
  int v117;
  char *v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v122;
  uint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  int32x2_t *v126;
  unint64_t v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  unsigned int v136;
  int v137;
  void **v138;
  unsigned int v139;
  void **v140;
  unsigned int v141;
  void **v142;
  void **v143;
  BOOL v144;
  void **v145;
  char *v146;
  uint64_t k;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int32x2_t v153;
  int v154;
  unsigned int v155;
  _QWORD *v156;
  void *v157;
  _QWORD *v158;
  int v159;
  BOOL v160;
  unsigned int v161;
  llvm::ValueAsMetadata *v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  llvm::Value *v169;
  uint64_t v170;
  int v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t *v174;
  unsigned int v175;
  uint64_t *v176;
  unsigned int v177;
  uint64_t *v178;
  char v179;
  llvm::Value *v180;
  BOOL v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t v192;
  int v193;
  uint64_t *v194;
  uint64_t NearestCommonDominator;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void **v202;
  char *v203;
  int v204;
  int v205;
  uint64_t v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  int v213;
  int v214;
  BOOL v215;
  void **v216;
  uint64_t *v217;
  unsigned int v218;
  uint64_t v219;
  llvm::MemoryPhi **v220;
  unsigned int v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  llvm::BasicBlock **v228;
  llvm::BasicBlock **v229;
  llvm::BasicBlock *v230;
  int32x2_t *v231;
  __int32 v232;
  int32x2_t v233;
  __int32 v234;
  uint64_t v235;
  llvm::BasicBlock *v236;
  int v237;
  int v238;
  char *v239;
  _QWORD *v241;
  int v242;
  char *v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v247;
  uint64_t *v248;
  unint64_t v249;
  char *v250;
  int32x2_t *v251;
  unint64_t v252;
  uint64_t v253;
  unsigned int v254;
  uint64_t v255;
  char **v256;
  char *v257;
  int v258;
  int v259;
  uint64_t *v260;
  uint64_t *v261;
  uint64_t v262;
  __int32 v263;
  int32x2_t v264;
  __int32 v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  int v269;
  uint64_t v270;
  int v271;
  _OWORD *v272;
  int v273;
  unsigned int v274;
  uint64_t v275;
  int v276;
  unsigned int v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  _QWORD *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  _QWORD *v297;
  int32x2_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t *v301;
  uint64_t v302;
  int v303;
  int v304;
  uint64_t v305;
  uint64_t m;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  BOOL v313;
  uint64_t v314;
  __int32 v315;
  unsigned int v316;
  int32x2_t v317;
  __int32 v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  _QWORD *v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t *v339;
  uint64_t v340;
  int v341;
  int v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  llvm::MemoryPhi **v348;
  char v349;
  void **v350;
  uint64_t v351;
  uint64_t v352;
  void **v353;
  void **v354;
  void **v355;
  uint64_t v358;
  uint64_t v359;
  void **v360;
  void **v361;
  void **v362;
  char *v363;
  int64x2_t v364;
  unsigned int v365;
  _QWORD *v366;
  char *v368;
  char *v369;
  char *v370;
  uint64_t v371;
  int v372;
  _BYTE v373[128];
  uint64_t v374[2];
  char v375;
  uint64_t *v376;
  uint64_t *v377;
  uint64_t *v378;
  uint64_t v379;
  int v380;
  _BYTE v381[16];
  uint64_t v382[3];
  uint64_t v383;
  void *v384;
  unint64_t *v385;
  char *v386;
  uint64_t v387;
  _OWORD v388[2];
  void *v389;
  uint64_t v390;
  _BYTE v391[32];
  void *v392;
  uint64_t v393;
  _BYTE v394[64];
  char *v395;
  uint64_t v396;
  uint64_t v397;
  void *v398;
  uint64_t v399;
  _BYTE v400[128];
  _QWORD v401[13];
  uint64_t v402;
  void **v403;
  uint64_t v404;
  void *v405;
  uint64_t v406;
  unsigned int v407[14];
  _BYTE v408[408];
  uint64_t v409;

  v409 = *MEMORY[0x1E0C80C00];
  v382[2] = a4;
  v383 = a5;
  v382[0] = (uint64_t)a1;
  v382[1] = (uint64_t)&v383;
  v402 = 1;
  for (i = 8; i != 488; i += 120)
    *(uint64_t *)((char *)&v402 + i) = -4096;
  v7 = a2 + 16 * a3;
  if (a3)
  {
    v364 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v8 = a2;
    while (1)
    {
      v9 = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8;
      v369 = 0;
      v10 = sub_1C4EE5810((uint64_t)&v402, v9, &v369);
      v11 = v369;
      if ((v10 & 1) != 0)
        goto LABEL_14;
      v395 = v369;
      v12 = v402;
      v13 = v404;
      v14 = v402 >> 1;
      v15 = v402 & 1;
      v16 = (v402 & 1) != 0 ? 4 : v404;
      if (4 * v14 + 4 >= 3 * v16)
        break;
      if (v16 + ~v14 - HIDWORD(v402) <= v16 >> 3)
        goto LABEL_37;
LABEL_11:
      LODWORD(v402) = ((v12 & 0xFFFFFFFE) + 2) | v15;
      if (*(_QWORD *)v11 != -4096)
        --HIDWORD(v402);
      *(_QWORD *)v11 = v9;
      *((_OWORD *)v11 + 4) = 0u;
      *((_OWORD *)v11 + 5) = 0u;
      *((_OWORD *)v11 + 6) = 0u;
      *((_QWORD *)v11 + 14) = 0;
      *((_OWORD *)v11 + 3) = 0u;
      *((_QWORD *)v11 + 1) = 1;
      *((int64x2_t *)v11 + 1) = v364;
      *((_OWORD *)v11 + 2) = 0u;
      *((_QWORD *)v11 + 4) = v11 + 48;
      *((_QWORD *)v11 + 5) = 0x200000000;
      *((_QWORD *)v11 + 8) = 1;
      *(int64x2_t *)(v11 + 72) = v364;
      *((_QWORD *)v11 + 11) = v11 + 104;
      *((_QWORD *)v11 + 12) = 0x200000000;
LABEL_14:
      v17 = v11[8];
      v18 = *(void **)v8;
      v405 = *(void **)v8;
      if ((v17 & 1) != 0)
      {
        v19 = v11 + 16;
        v20 = 2;
      }
      else
      {
        v20 = *((_DWORD *)v11 + 6);
        if (!v20)
        {
          v29 = 0;
LABEL_31:
          v30 = sub_1C4EE5C58((uint64_t)(v11 + 8), (uint64_t)&v405, &v405, v29);
          *v30 = v405;
          v31 = v405;
          v32 = *((unsigned int *)v11 + 10);
          if (v32 >= *((unsigned int *)v11 + 11))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v11 + 32), (uint64_t)(v11 + 48), v32 + 1, 8);
            v32 = *((unsigned int *)v11 + 10);
          }
          *(_QWORD *)(*((_QWORD *)v11 + 4) + 8 * v32) = v31;
          ++*((_DWORD *)v11 + 10);
          goto LABEL_34;
        }
        v19 = (char *)*((_QWORD *)v11 + 2);
      }
      v21 = v20 - 1;
      v22 = v21 & ((v18 >> 4) ^ (v18 >> 9));
      v23 = &v19[8 * v22];
      v24 = *(void **)v23;
      if (v18 != *(void **)v23)
      {
        v25 = 0;
        v26 = 1;
        while (v24 != (void *)-4096)
        {
          if (v25)
            v27 = 0;
          else
            v27 = v24 == (void *)-8192;
          if (v27)
            v25 = v23;
          v28 = v22 + v26++;
          v22 = v28 & v21;
          v23 = &v19[8 * v22];
          v24 = *(void **)v23;
          if (v18 == *(void **)v23)
            goto LABEL_34;
        }
        if (v25)
          v29 = v25;
        else
          v29 = v23;
        goto LABEL_31;
      }
LABEL_34:
      v8 += 16;
      if (v8 == v7)
        goto LABEL_62;
    }
    v16 *= 2;
LABEL_37:
    if (v16 >= 5)
    {
      v33 = (v16 - 1) | ((unint64_t)(v16 - 1) >> 1);
      v34 = v33 | (v33 >> 2) | ((v33 | (v33 >> 2)) >> 4);
      v35 = ((v34 | (v34 >> 8)) >> 16) | v34 | (v34 >> 8);
      if ((v35 + 1) > 0x40)
        v16 = v35 + 1;
      else
        v16 = 64;
    }
    if ((v402 & 1) != 0)
    {
      v37 = &v405;
      v38 = 0x3FFFFFFFFFFFFF88;
      v358 = v7;
      do
      {
        v39 = (unsigned int *)((char *)&v402 + v38 * 4);
        v40 = *(unint64_t *)((char *)&v405 + v38 * 4);
        if ((v40 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          *v37 = (void *)v40;
          sub_1C4EE5A00((unsigned int *)v37 + 2, v39 + 124);
          sub_1C4EE5A00((unsigned int *)v37 + 16, v39 + 138);
          v41 = (char *)*((_QWORD *)v39 + 72);
          if (v39 + 148 != (unsigned int *)v41)
            free(v41);
          if ((v39[138] & 1) == 0)
            MEMORY[0x1CAA32FB4](*(_QWORD *)&v408[v38 * 4], 8);
          v42 = *(unsigned int **)&v407[v38 + 4];
          v7 = v358;
          if (&v407[v38 + 8] != v42)
            free(v42);
          v37 += 15;
          if ((v39[124] & 1) == 0)
            MEMORY[0x1CAA32FB4](*(_QWORD *)&v407[v38], 8);
        }
        v38 += 30;
      }
      while (v38 * 4);
      if (v16 > 4)
      {
        LODWORD(v402) = v402 & 0xFFFFFFFE;
        v403 = (void **)operator new(120 * v16, (std::align_val_t)8uLL);
        v404 = v16;
      }
      sub_1C4EE58C0((uint64_t)&v402, (uint64_t)&v405, (uint64_t)v37);
    }
    else
    {
      v36 = (uint64_t)v403;
      if (v16 > 4)
      {
        v403 = (void **)operator new(120 * v16, (std::align_val_t)8uLL);
        v404 = v16;
      }
      else
      {
        LODWORD(v402) = v402 | 1;
      }
      sub_1C4EE58C0((uint64_t)&v402, v36, v36 + 120 * v13);
      MEMORY[0x1CAA32FB4](v36, 8);
    }
    sub_1C4EE5810((uint64_t)&v402, v9, &v395);
    v12 = v402;
    v11 = v395;
    v15 = v402 & 1;
    goto LABEL_11;
  }
LABEL_62:
  v401[0] = 1;
  v43 = 1;
  v44 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v401[v43] = v44;
    v43 += 3;
  }
  while (v43 != 13);
  v45 = (uint64_t *)v381;
  v377 = (uint64_t *)v381;
  v378 = (uint64_t *)v381;
  v379 = 2;
  v380 = 0;
  v46 = v402;
  if (v402 > 1)
  {
    v52 = &v405;
    v47 = (void **)&v403;
    if ((v402 & 1) == 0)
    {
      v47 = v403;
      v48 = v404;
      if (!(_DWORD)v404)
      {
        v46 = 0;
        v51 = v403;
        v52 = v403;
        goto LABEL_80;
      }
      v52 = &v403[15 * v404];
    }
    v46 = v402 & 1;
    while (((unint64_t)*v47 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v47 += 15;
      if (v47 == v52)
      {
        v47 = v52;
        break;
      }
    }
    v51 = v47;
    v47 = v403;
    v48 = v404;
  }
  else
  {
    v47 = v403;
    v48 = v404;
    if ((_DWORD)v402)
      v49 = (void **)&v403;
    else
      v49 = v403;
    if ((_DWORD)v402)
      v50 = 4;
    else
      v50 = v404;
    v51 = &v49[15 * v50];
    v52 = v51;
  }
LABEL_80:
  v53 = v46 == 0;
  if (v46)
    v54 = (void **)&v403;
  else
    v54 = v47;
  if (v53)
    v55 = v48;
  else
    v55 = 4;
  v360 = &v54[15 * v55];
  if (v51 != v360)
  {
    v359 = v7;
    while (1)
    {
      v56 = (uint64_t)*v51;
      sub_1C4EE28E8(v383, (uint64_t)*v51, (uint64_t)&v405);
      v57 = (char **)v405;
      if (!(_DWORD)v406)
        goto LABEL_122;
      v58 = (char **)((char *)v405 + 8 * v406);
      do
      {
        v369 = 0;
        v59 = *v57;
        v369 = v59;
        v60 = v59 >> 4;
        if (((_BYTE)v51[1] & 1) != 0)
        {
          v61 = 2;
          v62 = v51 + 2;
        }
        else
        {
          v61 = *((_DWORD *)v51 + 6);
          if (!v61)
            goto LABEL_99;
          v62 = (void **)v51[2];
        }
        v63 = v61 - 1;
        v64 = v63 & (v60 ^ (v59 >> 9));
        v65 = (char *)v62[v64];
        if (v65 == v59)
          goto LABEL_119;
        v66 = 1;
        while (v65 != (char *)-4096)
        {
          v67 = v64 + v66++;
          v64 = v67 & v63;
          v65 = (char *)v62[v64];
          if (v65 == v59)
            goto LABEL_119;
        }
LABEL_99:
        if (((_BYTE)v51[8] & 1) != 0)
        {
          v68 = 2;
          v69 = v51 + 9;
        }
        else
        {
          v68 = *((_DWORD *)v51 + 20);
          if (!v68)
          {
            v79 = 0;
            goto LABEL_116;
          }
          v69 = (void **)v51[9];
        }
        v70 = v60 ^ (v59 >> 9);
        v71 = v68 - 1;
        v72 = (v68 - 1) & v70;
        v73 = (char **)&v69[v72];
        v74 = *v73;
        if (v59 == *v73)
          goto LABEL_119;
        v75 = 0;
        v76 = 1;
        while (v74 != (char *)-4096)
        {
          if (v75)
            v77 = 0;
          else
            v77 = v74 == (char *)-8192;
          if (v77)
            v75 = v73;
          v78 = v72 + v76++;
          v72 = v78 & v71;
          v73 = (char **)&v69[v72];
          v74 = *v73;
          if (v59 == *v73)
            goto LABEL_119;
        }
        if (v75)
          v79 = v75;
        else
          v79 = v73;
LABEL_116:
        v80 = sub_1C4EE5C58((uint64_t)(v51 + 8), (uint64_t)&v369, &v369, v79);
        *v80 = v369;
        v81 = (uint64_t)v369;
        v82 = *((unsigned int *)v51 + 24);
        if (v82 >= *((unsigned int *)v51 + 25))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v51 + 11), (uint64_t)(v51 + 13), v82 + 1, 8);
          v82 = *((unsigned int *)v51 + 24);
        }
        *((_QWORD *)v51[11] + v82) = v81;
        ++*((_DWORD *)v51 + 24);
        v59 = v369;
LABEL_119:
        v395 = v59;
        v396 = v56;
        v83 = sub_1C4E2683C((uint64_t)v401, (uint64_t *)&v395);
        ++*((_DWORD *)v83 + 4);
        ++v57;
      }
      while (v57 != v58);
      v57 = (char **)v405;
      v7 = v359;
LABEL_122:
      if (v57 != (char **)v407)
        free(v57);
      if (!*((_DWORD *)v51 + 24))
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v377, v56);
      v84 = v51 + 15;
      v51 = v52;
      if (v84 != v52)
      {
        v51 = v84;
        while (((unint64_t)*v51 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v51 += 15;
          if (v51 == v52)
          {
            v51 = v52;
            break;
          }
        }
      }
      if (v51 == v360)
      {
        v45 = v377;
        v85 = v378;
        v86 = HIDWORD(v379);
        v87 = v379;
        goto LABEL_134;
      }
    }
  }
  v86 = 0;
  v87 = 2;
  v85 = (uint64_t *)v381;
LABEL_134:
  if (v85 == v45)
    v88 = v86;
  else
    v88 = v87;
  v89 = v85;
  if ((_DWORD)v88)
  {
    v90 = 8 * v88;
    v89 = v85;
    while ((unint64_t)*v89 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v89;
      v90 -= 8;
      if (!v90)
        goto LABEL_158;
    }
  }
  v91 = &v85[v88];
  if (v89 != v91)
  {
    v92 = *v89;
LABEL_144:
    v405 = 0;
    if (sub_1C4EE5810((uint64_t)&v402, v92, &v405))
    {
      v93 = v405;
      v94 = (char *)*((_QWORD *)v405 + 11);
      if (v94 != (char *)v405 + 104)
        free(v94);
      if ((v93[8] & 1) == 0)
        MEMORY[0x1CAA32FB4](v93[9], 8);
      v95 = (char *)v93[4];
      if (v95 != (char *)(v93 + 6))
        free(v95);
      if ((v93[1] & 1) == 0)
        MEMORY[0x1CAA32FB4](v93[2], 8);
      *v93 = -8192;
      LODWORD(v402) = v402 - 2;
      ++HIDWORD(v402);
    }
    v96 = (unint64_t *)(v89 + 1);
    while (v96 != (unint64_t *)v91)
    {
      v97 = *v96++;
      v92 = v97;
      if (v97 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v89 = (uint64_t *)(v96 - 1);
        goto LABEL_144;
      }
    }
  }
LABEL_158:
  v398 = v400;
  v399 = 0x1000000000;
  v395 = (char *)&v397;
  v396 = 0x800000000;
  v98 = a3;
  if (a3)
  {
    v98 = 0;
    for (j = a2; j != v7; j += 16)
    {
      v100 = (void **)&v403;
      if ((v402 & 1) != 0)
      {
        v101 = 4;
      }
      else
      {
        v100 = v403;
        v101 = v404;
      }
      if (v101)
      {
        v102 = (llvm::BasicBlock *)(*(_QWORD *)(j + 8) & 0xFFFFFFFFFFFFFFF8);
        v103 = (v102 >> 4) ^ (v102 >> 9);
        v104 = v101 - 1;
        v105 = v104 & v103;
        v106 = (llvm::BasicBlock *)v100[15 * (v104 & v103)];
        if (v106 != v102)
        {
          v135 = 1;
          while (v106 != (llvm::BasicBlock *)-4096)
          {
            v136 = v105 + v135++;
            v105 = v136 & v104;
            v106 = (llvm::BasicBlock *)v100[15 * v105];
            if (v106 == v102)
              goto LABEL_165;
          }
          continue;
        }
LABEL_165:
        v107 = *a1;
        v108 = (*a1)[5].i32[0];
        if (!v108)
          goto LABEL_171;
        v109 = v107[3];
        v110 = v108 - 1;
        v111 = v110 & v103;
        v112 = *(llvm::BasicBlock **)(*(_QWORD *)&v109 + 16 * v111);
        if (v112 != v102)
        {
          v113 = 1;
          while (v112 != (llvm::BasicBlock *)-4096)
          {
            v114 = v111 + v113++;
            v111 = v114 & v110;
            v112 = *(llvm::BasicBlock **)(*(_QWORD *)&v109 + 16 * v111);
            if (v112 == v102)
              goto LABEL_170;
          }
LABEL_171:
          MemoryPhi = llvm::MemorySSA::createMemoryPhi((llvm::MemorySSA *)v107, v102);
          v405 = (void *)4;
          v406 = 0;
          *(_QWORD *)v407 = MemoryPhi;
          if (MemoryPhi != (char *)-8192 && MemoryPhi != (char *)-4096 && MemoryPhi)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v405);
          v116 = (_QWORD *)sub_1C4EE497C((unsigned int *)&v395, (unint64_t)&v405, 1);
          v117 = v396;
          v118 = &v395[24 * v396];
          *(_QWORD *)v118 = 4;
          *((_QWORD *)v118 + 1) = 0;
          v119 = (unint64_t)(v118 + 8);
          v120 = v116[2];
          *((_QWORD *)v118 + 2) = v120;
          if (v120 != -8192 && v120 != -4096 && v120 != 0)
          {
            v122 = *v116 & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)v118 + 1) = *(_QWORD *)v122;
            *(_QWORD *)v122 = v118;
            *(_QWORD *)v118 = v122 | 4;
            v123 = (uint64_t *)*((_QWORD *)v118 + 1);
            if (v123)
              *v123 = *v123 & 7 | v119;
          }
          v98 = v117 + 1;
          LODWORD(v396) = v98;
          if (*(_QWORD *)v407 != -8192 && *(_QWORD *)v407 != -4096 && *(_QWORD *)v407)
          {
            v124 = (unint64_t)v405 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)((unint64_t)v405 & 0xFFFFFFFFFFFFFFF8) = v406;
            if (v406)
            {
              *(_QWORD *)v406 = *(_QWORD *)v406 & 7 | v124;
            }
            else
            {
              v125 = *(_QWORD *)v407;
              v126 = ****(int32x2_t *****)v407;
              v127 = (unint64_t)v126[303];
              if (v127 <= v124)
              {
                v128 = v126[305].u32[0];
                if (v127 + 16 * v128 > v124)
                {
                  v129 = v128 - 1;
                  LODWORD(v130) = v129 & ((v407[0] >> 4) ^ (v407[0] >> 9));
                  v131 = (uint64_t *)(v127 + 16 * v130);
                  v132 = *v131;
                  if (*(_QWORD *)v407 == *v131)
                  {
LABEL_193:
                    *v131 = -8192;
                    v126[304] = vadd_s32(v126[304], (int32x2_t)0x1FFFFFFFFLL);
                    v125 = *(_QWORD *)v407;
                  }
                  else
                  {
                    v133 = 1;
                    while (v132 != -4096)
                    {
                      v134 = v130 + v133++;
                      v130 = v134 & v129;
                      v132 = *(_QWORD *)(v127 + 16 * v130);
                      if (*(_QWORD *)v407 == v132)
                      {
                        v131 = (uint64_t *)(v127 + 16 * v130);
                        goto LABEL_193;
                      }
                    }
                  }
                  *(_BYTE *)(v125 + 17) &= ~1u;
                }
              }
            }
          }
          continue;
        }
LABEL_170:
        if (!*(_QWORD *)(*(_QWORD *)&v109 + 16 * v111 + 8))
          goto LABEL_171;
      }
    }
  }
  v137 = v402;
  if (v402 > 1)
  {
    v143 = &v405;
    v138 = (void **)&v403;
    if ((v402 & 1) == 0)
    {
      v138 = v403;
      v139 = v404;
      if (!(_DWORD)v404)
      {
        v137 = 0;
        v142 = v403;
        v143 = v403;
        goto LABEL_218;
      }
      v143 = &v403[15 * v404];
    }
    v137 = v402 & 1;
    while (((unint64_t)*v138 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v138 += 15;
      if (v138 == v143)
      {
        v138 = v143;
        break;
      }
    }
    v142 = v138;
    v138 = v403;
    v139 = v404;
  }
  else
  {
    v138 = v403;
    v139 = v404;
    if ((_DWORD)v402)
      v140 = (void **)&v403;
    else
      v140 = v403;
    if ((_DWORD)v402)
      v141 = 4;
    else
      v141 = v404;
    v142 = &v140[15 * v141];
    v143 = v142;
  }
LABEL_218:
  v144 = v137 == 0;
  if (v137)
    v145 = (void **)&v403;
  else
    v145 = v138;
  if (!v144)
    v139 = 4;
  v362 = &v145[15 * v139];
  if (v142 != v362)
  {
    v361 = v143;
    while (1)
    {
      v146 = (char *)*v142;
      v405 = (void *)1;
      for (k = 8; k != 72; k += 16)
        *(void **)((char *)&v405 + k) = (void *)-4096;
      v148 = *((unsigned int *)v142 + 10);
      if ((_DWORD)v148)
      {
        v149 = (uint64_t *)v142[4];
        v150 = 8 * v148;
        do
        {
          v151 = *v149++;
          v369 = (char *)v151;
          v152 = sub_1C4EE2B64(v382, v151);
          sub_1C4EE6040(&v405, (uint64_t *)&v369)[1] = v152;
          v150 -= 8;
        }
        while (v150);
      }
      v153 = (*a1)[3];
      v154 = (*a1)[5].i32[0] - 1;
      v155 = v154 & ((v146 >> 4) ^ (v146 >> 9));
      v156 = (_QWORD *)(*(_QWORD *)&v153 + 16 * v155);
      v157 = (void *)*v156;
      if (v146 != (char *)*v156)
      {
        v158 = 0;
        v159 = 1;
        while (v157 != (void *)-4096)
        {
          if (v158)
            v160 = 0;
          else
            v160 = v157 == (void *)-8192;
          if (v160)
            v158 = v156;
          v161 = v155 + v159++;
          v155 = v161 & v154;
          v156 = (_QWORD *)(*(_QWORD *)&v153 + 16 * (v161 & v154));
          v157 = (void *)*v156;
          if (v146 == (char *)*v156)
            goto LABEL_242;
        }
        if (v158)
          v156 = v158;
      }
LABEL_242:
      v162 = (llvm::ValueAsMetadata *)v156[1];
      if ((*((_DWORD *)v162 + 5) & 0x7FFFFFF) != 0)
      {
        v365 = (v146 >> 4) ^ (v146 >> 9);
        v163 = *((unsigned int *)v142 + 10);
        if ((_DWORD)v163)
        {
          v164 = (uint64_t *)v142[4];
          v165 = &v164[v163];
          do
          {
            v387 = *v164;
            v166 = v387;
            v167 = sub_1C4EE6040(&v405, &v387)[1];
            v369 = (char *)v166;
            v370 = v146;
            v168 = *((_DWORD *)sub_1C4E2683C((uint64_t)v401, (uint64_t *)&v369) + 4);
            if (v168 >= 1)
            {
              do
              {
                sub_1C4ECE04C((uint64_t)v162, v167, v166);
                --v168;
              }
              while (v168);
            }
            ++v164;
          }
          while (v164 != v165);
        }
        goto LABEL_280;
      }
      v169 = (llvm::Value *)sub_1C4EE2B64(v382, *(_QWORD *)v142[11]);
      v170 = (uint64_t)v169;
      v171 = (int)v405;
      if (v405 <= 1)
      {
        v173 = (uint64_t *)v406;
        v175 = v407[0];
        v217 = &v406;
        if ((_DWORD)v405)
        {
          v218 = 4;
        }
        else
        {
          v217 = (uint64_t *)v406;
          v218 = v407[0];
        }
        v174 = &v217[2 * v218];
        v172 = v174;
      }
      else
      {
        v172 = (uint64_t *)v408;
        v173 = &v406;
        if ((v405 & 1) != 0)
          goto LABEL_251;
        v173 = (uint64_t *)v406;
        if (v407[0])
        {
          v172 = (uint64_t *)(v406 + 16 * v407[0]);
LABEL_251:
          v171 = v405 & 1;
          while ((*v173 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v173 += 2;
            if (v173 == v172)
            {
              v173 = v172;
              break;
            }
          }
          v174 = v173;
          v173 = (uint64_t *)v406;
          v175 = v407[0];
          goto LABEL_256;
        }
        v171 = 0;
        v175 = 0;
        v174 = (uint64_t *)v406;
        v172 = (uint64_t *)v406;
      }
LABEL_256:
      v27 = v171 == 0;
      v176 = &v406;
      if (v27)
      {
        v176 = v173;
        v177 = v175;
      }
      else
      {
        v177 = 4;
      }
      v178 = &v176[2 * v177];
      if (v174 == v178)
        goto LABEL_289;
      v179 = 0;
      do
      {
        v180 = (llvm::Value *)v174[1];
        v27 = v169 == v180;
        v181 = v169 != v180;
        if (!v27)
          goto LABEL_270;
        v182 = v174 + 2;
        v174 = v172;
        if (v182 != v172)
        {
          v174 = v182;
          while ((*v174 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v174 += 2;
            if (v174 == v172)
            {
              v174 = v172;
              break;
            }
          }
        }
        v179 |= v181;
      }
      while (v174 != v178);
      if ((v179 & 1) == 0)
      {
LABEL_289:
        llvm::Value::doRAUW(v162, v169, (llvm::Value *)1);
        llvm::MemorySSAUpdater::removeMemoryAccess(a1, v162, 0);
        goto LABEL_307;
      }
LABEL_270:
      v365 = (v146 >> 4) ^ (v146 >> 9);
      v183 = *((unsigned int *)v142 + 10);
      if ((_DWORD)v183)
      {
        v184 = (uint64_t *)v142[4];
        v185 = &v184[v183];
        do
        {
          v387 = *v184;
          v186 = v387;
          v187 = sub_1C4EE6040(&v405, &v387)[1];
          v369 = (char *)v186;
          v370 = v146;
          v188 = *((_DWORD *)sub_1C4E2683C((uint64_t)v401, (uint64_t *)&v369) + 4);
          if (v188 >= 1)
          {
            do
            {
              sub_1C4ECE04C((uint64_t)v162, v187, v186);
              --v188;
            }
            while (v188);
          }
          ++v184;
        }
        while (v184 != v185);
      }
      v189 = *((unsigned int *)v142 + 24);
      if ((_DWORD)v189)
      {
        v190 = (uint64_t *)v142[11];
        v191 = &v190[v189];
        do
        {
          v192 = *v190;
          v369 = (char *)*v190;
          v370 = v146;
          v193 = *((_DWORD *)sub_1C4E2683C((uint64_t)v401, (uint64_t *)&v369) + 4);
          if (v193 >= 1)
          {
            do
            {
              sub_1C4ECE04C((uint64_t)v162, v170, v192);
              --v193;
            }
            while (v193);
          }
          ++v190;
        }
        while (v190 != v191);
      }
LABEL_280:
      v194 = (uint64_t *)v142[11];
      NearestCommonDominator = *v194;
      v196 = *((unsigned int *)v142 + 24);
      if ((_DWORD)v196)
      {
        v197 = 8 * v196;
        do
        {
          v198 = *v194++;
          NearestCommonDominator = llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator(a4, NearestCommonDominator, v198);
          v197 -= 8;
        }
        while (v197);
      }
      v199 = *(_QWORD *)(a4 + 24);
      v200 = *(unsigned int *)(a4 + 40);
      if ((_DWORD)v200)
      {
        LODWORD(v201) = (v200 - 1) & v365;
        v202 = (void **)(v199 + 16 * v201);
        v203 = (char *)*v202;
        if (v146 == *v202)
          goto LABEL_291;
        v204 = 1;
        while (v203 != (char *)-4096)
        {
          v205 = v201 + v204++;
          v201 = v205 & (v200 - 1);
          v203 = *(char **)(v199 + 16 * v201);
          if (v146 == v203)
          {
            v202 = (void **)(v199 + 16 * v201);
            goto LABEL_291;
          }
        }
      }
      v202 = (void **)(v199 + 16 * v200);
LABEL_291:
      v206 = **((_QWORD **)v202[1] + 1);
      if (NearestCommonDominator != v206)
      {
        v207 = v399;
        while (1)
        {
          if (v207 >= HIDWORD(v399))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v398, (uint64_t)v400, v207 + 1, 8);
            v207 = v399;
          }
          *((_QWORD *)v398 + v207) = NearestCommonDominator;
          v207 = v399 + 1;
          LODWORD(v399) = v399 + 1;
          v208 = *(_QWORD *)(a4 + 24);
          v209 = *(unsigned int *)(a4 + 40);
          if (!(_DWORD)v209)
            goto LABEL_301;
          LODWORD(v210) = (v209 - 1) & ((NearestCommonDominator >> 4) ^ (NearestCommonDominator >> 9));
          v211 = (uint64_t *)(v208 + 16 * v210);
          v212 = *v211;
          if (NearestCommonDominator != *v211)
            break;
LABEL_302:
          NearestCommonDominator = **(_QWORD **)(v211[1] + 8);
          if (NearestCommonDominator)
            v215 = NearestCommonDominator == v206;
          else
            v215 = 1;
          if (v215)
            goto LABEL_307;
        }
        v213 = 1;
        while (v212 != -4096)
        {
          v214 = v210 + v213++;
          v210 = v214 & (v209 - 1);
          v212 = *(_QWORD *)(v208 + 16 * v210);
          if (NearestCommonDominator == v212)
          {
            v211 = (uint64_t *)(v208 + 16 * v210);
            goto LABEL_302;
          }
        }
LABEL_301:
        v211 = (uint64_t *)(v208 + 16 * v209);
        goto LABEL_302;
      }
LABEL_307:
      if ((v405 & 1) == 0)
        MEMORY[0x1CAA32FB4](v406, 8);
      v216 = v142 + 15;
      v142 = v361;
      if (v216 != v361)
      {
        v142 = v216;
        while (((unint64_t)*v142 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v142 += 15;
          if (v142 == v361)
          {
            v142 = v361;
            break;
          }
        }
      }
      if (v142 == v362)
      {
        v98 = v396;
        break;
      }
    }
  }
  if (!v98)
  {
    v392 = v394;
    v393 = 0x800000000;
LABEL_423:
    v405 = v407;
    v406 = 0x2000000000;
    goto LABEL_424;
  }
  v219 = 24 * v98;
  v220 = (llvm::MemoryPhi **)(v395 + 16);
  do
  {
    if (*v220)
      llvm::MemorySSAUpdater::tryRemoveTrivialPhi((llvm::MemorySSAUpdater *)a1, *v220);
    v220 += 3;
    v219 -= 24;
  }
  while (v219);
  v392 = v394;
  v393 = 0x800000000;
  if (!(_DWORD)v396)
    goto LABEL_423;
  v221 = 0;
  v222 = 24 * v396;
  v223 = v395 + 16;
  do
  {
    if (*(_QWORD *)v223)
    {
      v224 = *(_QWORD *)(*(_QWORD *)v223 + 64);
      if (v221 >= HIDWORD(v393))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v392, (uint64_t)v394, v221 + 1, 8);
        v221 = v393;
      }
      *((_QWORD *)v392 + v221) = v224;
      v221 = v393 + 1;
      LODWORD(v393) = v393 + 1;
    }
    v223 += 24;
    v222 -= 24;
  }
  while (v222);
  v405 = v407;
  v406 = 0x2000000000;
  if (!v221)
    goto LABEL_424;
  v374[0] = a4;
  v374[1] = v383;
  v375 = 0;
  v225 = (uint64_t *)v392;
  v369 = v373;
  v370 = v373;
  v371 = 16;
  v372 = 0;
  v226 = 8 * v221;
  do
  {
    v227 = *v225++;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v369, v227);
    v226 -= 8;
  }
  while (v226);
  v376 = (uint64_t *)&v369;
  sub_1C4ED0454(v374, (uint64_t *)&v405);
  v387 = 1;
  v388[0] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v388[1] = v388[0];
  v389 = v391;
  v390 = 0x400000000;
  if (!(_DWORD)v406)
    goto LABEL_416;
  v228 = (llvm::BasicBlock **)v405;
  v229 = (llvm::BasicBlock **)((char *)v405 + 8 * v406);
  do
  {
    v230 = *v228;
    v231 = *a1;
    v232 = (*a1)[5].i32[0];
    if (v232)
    {
      v233 = v231[3];
      v234 = v232 - 1;
      v235 = ((v230 >> 4) ^ (v230 >> 9)) & (v232 - 1);
      v236 = *(llvm::BasicBlock **)(*(_QWORD *)&v233 + 16 * v235);
      if (v230 == v236)
      {
LABEL_345:
        if (*(_QWORD *)(*(_QWORD *)&v233 + 16 * v235 + 8))
          goto LABEL_374;
      }
      else
      {
        v237 = 1;
        while (v236 != (llvm::BasicBlock *)-4096)
        {
          v238 = v235 + v237++;
          v235 = v238 & v234;
          v236 = *(llvm::BasicBlock **)(*(_QWORD *)&v233 + 16 * v235);
          if (v230 == v236)
            goto LABEL_345;
        }
      }
    }
    v239 = llvm::MemorySSA::createMemoryPhi((llvm::MemorySSA *)v231, v230);
    v368 = v239;
    v384 = (void *)4;
    v385 = 0;
    v386 = v239;
    if (v239 != (char *)-8192 && v239 != (char *)-4096 && v239 != 0)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v384);
    v241 = (_QWORD *)sub_1C4EE497C((unsigned int *)&v395, (unint64_t)&v384, 1);
    v242 = v396;
    v243 = &v395[24 * v396];
    *(_QWORD *)v243 = 4;
    *((_QWORD *)v243 + 1) = 0;
    v244 = (unint64_t)(v243 + 8);
    v245 = v241[2];
    *((_QWORD *)v243 + 2) = v245;
    if (v245 != -8192 && v245 != -4096 && v245 != 0)
    {
      v247 = *v241 & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v243 + 1) = *(_QWORD *)v247;
      *(_QWORD *)v247 = v243;
      *(_QWORD *)v243 = v247 | 4;
      v248 = (uint64_t *)*((_QWORD *)v243 + 1);
      if (v248)
        *v248 = *v248 & 7 | v244;
    }
    LODWORD(v396) = v242 + 1;
    if (v386 != (char *)-8192 && v386 != (char *)-4096 && v386)
    {
      v249 = (unint64_t)v384 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)((unint64_t)v384 & 0xFFFFFFFFFFFFFFF8) = v385;
      if (v385)
      {
        *v385 = *v385 & 7 | v249;
      }
      else
      {
        v250 = v386;
        v251 = ***(int32x2_t ****)v386;
        v252 = (unint64_t)v251[303];
        if (v252 <= v249)
        {
          v253 = v251[305].u32[0];
          if (v252 + 16 * v253 > v249)
          {
            v254 = v253 - 1;
            LODWORD(v255) = v254 & ((v386 >> 4) ^ (v386 >> 9));
            v256 = (char **)(v252 + 16 * v255);
            v257 = *v256;
            if (v386 == *v256)
            {
LABEL_370:
              *v256 = (char *)-8192;
              v251[304] = vadd_s32(v251[304], (int32x2_t)0x1FFFFFFFFLL);
              v250 = v386;
            }
            else
            {
              v258 = 1;
              while (v257 != (char *)-4096)
              {
                v259 = v255 + v258++;
                v255 = v259 & v254;
                v257 = *(char **)(v252 + 16 * v255);
                if (v386 == v257)
                {
                  v256 = (char **)(v252 + 16 * v255);
                  goto LABEL_370;
                }
              }
            }
            v250[17] &= ~1u;
          }
        }
      }
    }
    sub_1C61A5D94((uint64_t)&v387, (uint64_t *)&v368);
LABEL_374:
    ++v228;
  }
  while (v228 != v229);
  if ((_DWORD)v406)
  {
    v260 = (uint64_t *)v405;
    v261 = (uint64_t *)((char *)v405 + 8 * v406);
    do
    {
      v262 = *v260;
      v263 = (*a1)[5].i32[0];
      if (v263)
      {
        v264 = (*a1)[3];
        v265 = v263 - 1;
        v266 = ((v262 >> 4) ^ (v262 >> 9)) & (v263 - 1);
        v267 = *(_QWORD *)(*(_QWORD *)&v264 + 16 * v266);
        if (v262 == v267)
        {
LABEL_382:
          v270 = *(_QWORD *)(*(_QWORD *)&v264 + 16 * v266 + 8);
          goto LABEL_384;
        }
        v268 = 1;
        while (v267 != -4096)
        {
          v269 = v266 + v268++;
          v266 = v269 & v265;
          v267 = *(_QWORD *)(*(_QWORD *)&v264 + 16 * v266);
          if (v262 == v267)
            goto LABEL_382;
        }
      }
      v270 = 0;
LABEL_384:
      if ((v387 & 1) != 0)
      {
        v271 = 4;
        v272 = v388;
      }
      else
      {
        v271 = DWORD2(v388[0]);
        if (!DWORD2(v388[0]))
          goto LABEL_398;
        v272 = *(_OWORD **)&v388[0];
      }
      v273 = v271 - 1;
      v274 = v273 & ((v270 >> 4) ^ (v270 >> 9));
      v275 = *((_QWORD *)v272 + v274);
      if (v275 != v270)
      {
        v276 = 1;
        while (v275 != -4096)
        {
          v277 = v274 + v276++;
          v274 = v277 & v273;
          v275 = *((_QWORD *)v272 + v274);
          if (v275 == v270)
            goto LABEL_390;
        }
LABEL_398:
        v282 = *(_DWORD *)(v270 + 20) & 0x7FFFFFF;
        if ((_DWORD)v282)
        {
          v283 = 0;
          v284 = 0;
          v285 = 8 * v282;
          do
          {
            v286 = *(_DWORD *)(v270 + 20);
            if ((v286 & 0x40000000) != 0)
              v287 = *(_QWORD *)(v270 - 8);
            else
              v287 = v270 - 32 * (v286 & 0x7FFFFFF);
            v288 = sub_1C4EE2B64(v382, *(_QWORD *)(v287 + 32 * *(unsigned int *)(v270 + 76) + v284));
            v289 = *(_DWORD *)(v270 + 20);
            if ((v289 & 0x40000000) != 0)
              v290 = *(_QWORD *)(v270 - 8);
            else
              v290 = v270 - 32 * (v289 & 0x7FFFFFF);
            v291 = v290 + v283;
            if (*(_QWORD *)(v290 + v283))
            {
              **(_QWORD **)(v291 + 16) = *(_QWORD *)(v291 + 8);
              v292 = *(_QWORD *)(v291 + 8);
              if (v292)
                *(_QWORD *)(v292 + 16) = *(_QWORD *)(v291 + 16);
            }
            *(_QWORD *)v291 = v288;
            if (v288)
            {
              v295 = *(_QWORD *)(v288 + 8);
              v293 = (_QWORD *)(v288 + 8);
              v294 = v295;
              v296 = v290 + v283;
              *(_QWORD *)(v296 + 8) = v295;
              if (v295)
                *(_QWORD *)(v294 + 16) = v296 + 8;
              *(_QWORD *)(v296 + 16) = v293;
              *v293 = v291;
            }
            v284 += 8;
            v283 += 32;
          }
          while (v285 != v284);
        }
        goto LABEL_415;
      }
LABEL_390:
      sub_1C4EE28E8(v383, v262, (uint64_t)&v384);
      v278 = (uint64_t *)v384;
      if ((_DWORD)v385)
      {
        v279 = 8 * v385;
        do
        {
          v280 = *v278++;
          v281 = sub_1C4EE2B64(v382, v280);
          sub_1C4ECE04C(v270, v281, v280);
          v279 -= 8;
        }
        while (v279);
        v278 = (uint64_t *)v384;
      }
      if (v278 != (uint64_t *)&v386)
        free(v278);
LABEL_415:
      ++v260;
    }
    while (v260 != v261);
  }
LABEL_416:
  if (v389 != v391)
    free(v389);
  if ((v387 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)&v388[0], 8);
  if (v370 != v369)
    free(v370);
LABEL_424:
  if ((_DWORD)v399)
  {
    v297 = v398;
    v363 = (char *)v398 + 8 * v399;
    while (1)
    {
      v298 = (*a1)[9];
      v299 = (*a1)[11].u32[0];
      v366 = v297;
      if (!(_DWORD)v299)
        goto LABEL_432;
      LODWORD(v300) = ((*v297 >> 4) ^ (*v297 >> 9)) & (v299 - 1);
      v301 = (uint64_t *)(*(_QWORD *)&v298 + 16 * v300);
      v302 = *v301;
      if (*v297 != *v301)
        break;
LABEL_433:
      if (v301 != (uint64_t *)(*(_QWORD *)&v298 + 16 * v299))
      {
        v305 = v301[1];
        if (v305)
        {
          for (m = *(_QWORD *)(v305 + 8); ; m = *(_QWORD *)(m + 8))
          {
            if (m == v305)
              goto LABEL_491;
            v307 = m - 48;
            if (!m)
              v307 = 0;
            v308 = *(_QWORD *)(v307 + 8);
            if (v308)
              break;
LABEL_490:
            ;
          }
          v309 = *(_QWORD *)(v307 + 64);
          while (2)
          {
            v310 = v308;
            v311 = (_QWORD *)(v308 + 8);
            v308 = *(_QWORD *)(v308 + 8);
            v312 = v311[2];
            if (v312)
              v313 = *(_BYTE *)(v312 + 16) == 27;
            else
              v313 = 0;
            if (v313)
            {
              v328 = *(_DWORD *)(v312 + 20);
              if ((v328 & 0x40000000) != 0)
                v329 = *(_QWORD *)(v312 - 8);
              else
                v329 = v312 - 32 * (v328 & 0x7FFFFFF);
              v330 = *(_QWORD *)(v329
                               + 32 * *(unsigned int *)(v312 + 76)
                               + 8 * ((unint64_t)(v310 - v329) >> 5));
              if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(a4, v309, v330))
              {
                v331 = sub_1C4EE2B64(v382, v330);
                if (*(_QWORD *)v310)
                {
                  **(_QWORD **)(v310 + 16) = *(_QWORD *)(v310 + 8);
                  v332 = *(_QWORD *)(v310 + 8);
                  if (v332)
                    *(_QWORD *)(v332 + 16) = *(_QWORD *)(v310 + 16);
                }
                *(_QWORD *)v310 = v331;
                if (v331)
                {
                  v335 = *(_QWORD *)(v331 + 8);
                  v333 = (_QWORD *)(v331 + 8);
                  v334 = v335;
                  *v311 = v335;
                  if (v335)
                    *(_QWORD *)(v334 + 16) = v311;
                  *(_QWORD *)(v310 + 16) = v333;
                  *v333 = v310;
                }
              }
            }
            else
            {
              v314 = *(_QWORD *)(v312 + 64);
              if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(a4, v309, v314))
              {
                v315 = (*a1)[5].i32[0];
                v316 = v314 >> 4;
                if (!v315)
                  goto LABEL_468;
                v317 = (*a1)[3];
                v318 = v315 - 1;
                v319 = (v315 - 1) & (v316 ^ (v314 >> 9));
                v320 = *(_QWORD *)(*(_QWORD *)&v317 + 16 * v319);
                if (v314 == v320)
                {
LABEL_451:
                  v323 = *(_QWORD *)(*(_QWORD *)&v317 + 16 * v319 + 8);
                  if (!v323)
                    goto LABEL_468;
                  if (*(_QWORD *)v310)
                  {
                    **(_QWORD **)(v310 + 16) = *(_QWORD *)(v310 + 8);
                    v324 = *(_QWORD *)(v310 + 8);
                    if (v324)
                      *(_QWORD *)(v324 + 16) = *(_QWORD *)(v310 + 16);
                  }
                  *(_QWORD *)v310 = v323;
                  v327 = *(_QWORD *)(v323 + 8);
                  v325 = (_QWORD *)(v323 + 8);
                  v326 = v327;
                  *(_QWORD *)(v310 + 8) = v327;
                  if (v327)
LABEL_480:
                    *(_QWORD *)(v326 + 16) = v311;
LABEL_481:
                  *(_QWORD *)(v310 + 16) = v325;
                  *v325 = v310;
                }
                else
                {
                  v321 = 1;
                  while (v320 != -4096)
                  {
                    v322 = v319 + v321++;
                    v319 = v322 & v318;
                    v320 = *(_QWORD *)(*(_QWORD *)&v317 + 16 * v319);
                    if (v314 == v320)
                      goto LABEL_451;
                  }
LABEL_468:
                  v336 = *(_QWORD *)(a4 + 24);
                  v337 = *(unsigned int *)(a4 + 40);
                  if ((_DWORD)v337)
                  {
                    LODWORD(v338) = (v337 - 1) & (v316 ^ (v314 >> 9));
                    v339 = (uint64_t *)(v336 + 16 * v338);
                    v340 = *v339;
                    if (v314 != *v339)
                    {
                      v341 = 1;
                      while (v340 != -4096)
                      {
                        v342 = v338 + v341++;
                        v338 = v342 & (v337 - 1);
                        v340 = *(_QWORD *)(v336 + 16 * v338);
                        if (v314 == v340)
                        {
                          v339 = (uint64_t *)(v336 + 16 * v338);
                          goto LABEL_475;
                        }
                      }
                      goto LABEL_474;
                    }
                  }
                  else
                  {
LABEL_474:
                    v339 = (uint64_t *)(v336 + 16 * v337);
                  }
LABEL_475:
                  v343 = sub_1C4EE2B64(v382, **(_QWORD **)(v339[1] + 8));
                  if (*(_QWORD *)v310)
                  {
                    **(_QWORD **)(v310 + 16) = *(_QWORD *)(v310 + 8);
                    v344 = *(_QWORD *)(v310 + 8);
                    if (v344)
                      *(_QWORD *)(v344 + 16) = *(_QWORD *)(v310 + 16);
                  }
                  *(_QWORD *)v310 = v343;
                  if (v343)
                  {
                    v345 = *(_QWORD *)(v343 + 8);
                    v325 = (_QWORD *)(v343 + 8);
                    v326 = v345;
                    *v311 = v345;
                    if (v345)
                      goto LABEL_480;
                    goto LABEL_481;
                  }
                }
                if (v312 && *(_BYTE *)(v312 + 16) == 26)
                {
                  *(_DWORD *)(v312 + 92) = -1;
                  if (*(_QWORD *)(v312 - 32))
                  {
                    **(_QWORD **)(v312 - 16) = *(_QWORD *)(v312 - 24);
                    v346 = *(_QWORD *)(v312 - 24);
                    if (v346)
                      *(_QWORD *)(v346 + 16) = *(_QWORD *)(v312 - 16);
                  }
                  *(_QWORD *)(v312 - 32) = 0;
                }
                else
                {
                  *(_DWORD *)(v312 + 88) = -1;
                }
              }
            }
            if (!v308)
              goto LABEL_490;
            continue;
          }
        }
      }
LABEL_491:
      v297 = v366 + 1;
      if (v366 + 1 == (_QWORD *)v363)
        goto LABEL_492;
    }
    v303 = 1;
    while (v302 != -4096)
    {
      v304 = v300 + v303++;
      v300 = v304 & (v299 - 1);
      v302 = *(_QWORD *)(*(_QWORD *)&v298 + 16 * v300);
      if (*v297 == v302)
      {
        v301 = (uint64_t *)(*(_QWORD *)&v298 + 16 * v300);
        goto LABEL_433;
      }
    }
LABEL_432:
    v301 = (uint64_t *)(*(_QWORD *)&v298 + 16 * v299);
    goto LABEL_433;
  }
LABEL_492:
  if ((_DWORD)v396)
  {
    v347 = 24 * v396;
    v348 = (llvm::MemoryPhi **)(v395 + 16);
    do
    {
      if (*v348)
        llvm::MemorySSAUpdater::tryRemoveTrivialPhi((llvm::MemorySSAUpdater *)a1, *v348);
      v348 += 3;
      v347 -= 24;
    }
    while (v347);
  }
  if (v405 != v407)
    free(v405);
  if (v392 != v394)
    free(v392);
  sub_1C4EE4F14(&v395);
  if (v398 != v400)
    free(v398);
  if (v378 != v377)
    free(v378);
  if ((v401[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v401[1], 8);
  v349 = v402;
  if (v402 & 1 | v404)
  {
    v350 = v403;
    if ((v402 & 1) != 0)
    {
      v350 = (void **)&v403;
      v351 = 4;
    }
    else
    {
      v351 = v404;
    }
    if ((_DWORD)v351)
    {
      v352 = 120 * v351;
      v353 = v350 + 13;
      do
      {
        if (((unint64_t)*(v353 - 13) | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v354 = (void **)*(v353 - 2);
          if (v353 != v354)
            free(v354);
          if ((*(_BYTE *)(v353 - 5) & 1) == 0)
            MEMORY[0x1CAA32FB4](*(v353 - 4), 8);
          v355 = (void **)*(v353 - 9);
          if (v353 - 7 != v355)
            free(v355);
          if ((*(_BYTE *)(v353 - 12) & 1) == 0)
            MEMORY[0x1CAA32FB4](*(v353 - 11), 8);
        }
        v353 += 15;
        v352 -= 120;
      }
      while (v352);
      v349 = v402;
    }
  }
  if ((v349 & 1) == 0)
    MEMORY[0x1CAA32FB4](v403, 8);
}

uint64_t llvm::MemorySSAUpdater::applyInsertUpdates(int32x2_t **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  uint64_t j;
  _QWORD v7[37];
  uint64_t v8[37];
  char v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[9];

  v12[8] = *MEMORY[0x1E0C80C00];
  v7[0] = 1;
  for (i = 1; i != 37; i += 9)
    v7[i] = -4096;
  v8[0] = 1;
  for (j = 38; j != 74; j += 9)
    v7[j] = -4096;
  v9 = 0;
  v10 = v12;
  v11 = 0x400000000;
  llvm::MemorySSAUpdater::applyInsertUpdates(a1, a2, a3, a4, (uint64_t)v7);
  if (v10 != v12)
    free(v10);
  sub_1C4E28CA4((uint64_t)v8);
  return sub_1C4E28CA4((uint64_t)v7);
}

unsigned int *sub_1C4EE28E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  unsigned int *result;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;

  v3 = a2;
  do
  {
    a2 = *(_QWORD *)(a2 + 8);
    if (!a2)
      break;
    v6 = *(_QWORD *)(a2 + 24);
    v7 = *(unsigned __int8 *)(v6 + 16);
    v8 = v6 && v7 >= 0x1C;
  }
  while (!v8 || v7 - 29 >= 0xB);
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x800000000;
  result = sub_1C4DBBCC0((unsigned int *)a3, a2, 0);
  v11 = *(char **)a3;
  v12 = *(unsigned int *)(a3 + 8);
  v13 = *(_QWORD **)a3;
  if ((_DWORD)v12)
  {
    v14 = 8 * v12;
    v13 = *(_QWORD **)a3;
    while (*v13)
    {
      ++v13;
      v14 -= 8;
      if (!v14)
      {
        v13 = (_QWORD *)(*(_QWORD *)a3 + 8 * v12);
        break;
      }
    }
  }
  v15 = ((char *)v13 - v11) >> 3;
  v16 = v13 + 1;
  if (v15 != v12 && v16 != (_QWORD *)(*(_QWORD *)a3 + 8 * v12))
  {
    v18 = 8 * v12 - 8 * v15 - 8;
    do
    {
      if (*v16)
        *v13++ = *v16;
      ++v16;
      v18 -= 8;
    }
    while (v18);
    v11 = *(char **)a3;
  }
  v19 = (char *)v13 - v11;
  v20 = (unint64_t)((char *)v13 - v11) >> 3;
  *(_DWORD *)(a3 + 8) = v20;
  v21 = *(_DWORD *)(a1 + 296);
  v22 = a1 + 304;
  if ((v21 & 1) != 0)
  {
    v24 = 4;
    v23 = a1 + 304;
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 304);
    v24 = *(_DWORD *)(a1 + 312);
    if (!v24)
    {
      v25 = 0;
      goto LABEL_37;
    }
  }
  v26 = v24 - 1;
  v27 = (v24 - 1) & ((v3 >> 4) ^ (v3 >> 9));
  v28 = v23 + 72 * v27;
  result = *(unsigned int **)v28;
  if (*(_QWORD *)v28 != v3)
  {
    v29 = 1;
    while (result != (unsigned int *)-4096)
    {
      v30 = v27 + v29++;
      v27 = v30 & v26;
      v28 = v23 + 72 * (v30 & v26);
      result = *(unsigned int **)v28;
      if (*(_QWORD *)v28 == v3)
        goto LABEL_32;
    }
    if ((v21 & 1) != 0)
    {
      v25 = 4;
      v23 = a1 + 304;
    }
    else
    {
      v23 = *(_QWORD *)(a1 + 304);
      v25 = *(_DWORD *)(a1 + 312);
    }
LABEL_37:
    v28 = v23 + 72 * v25;
    if ((v21 & 1) != 0)
      goto LABEL_38;
LABEL_33:
    v22 = *(_QWORD *)(a1 + 304);
    v31 = *(_DWORD *)(a1 + 312);
    goto LABEL_39;
  }
LABEL_32:
  if ((v21 & 1) == 0)
    goto LABEL_33;
LABEL_38:
  v31 = 4;
LABEL_39:
  if (v22 + 72 * v31 != v28)
  {
    v32 = *(unsigned int *)(v28 + 16);
    if ((_DWORD)v32)
    {
      v33 = (v19 >> 3);
      v34 = *(uint64_t **)(v28 + 8);
      v35 = &v34[v32];
      do
      {
        v36 = *v34;
        v37 = 8 * v33;
        v38 = v11;
        v39 = &v11[8 * v33];
        if (v33)
        {
          v40 = 8 * v33;
          v38 = v11;
          while (*(_QWORD *)v38 != v36)
          {
            v38 += 8;
            v40 -= 8;
            if (!v40)
            {
              v38 = &v11[8 * v33];
              break;
            }
          }
        }
        v41 = (v38 - v11) >> 3;
        if (v41 != v33)
        {
          v42 = v38 + 8;
          if (v38 + 8 != v39)
          {
            v43 = v37 - 8 * v41 - 8;
            do
            {
              if (*v42 != v36)
              {
                *(_QWORD *)v38 = *v42;
                v38 += 8;
              }
              ++v42;
              v43 -= 8;
            }
            while (v43);
            v11 = *(char **)a3;
          }
        }
        v44 = v38 - v11;
        v33 = (v44 >> 3);
        ++v34;
      }
      while (v34 != v35);
      v20 = v44 >> 3;
      *(_DWORD *)(a3 + 8) = v33;
    }
    return (unsigned int *)sub_1C4ECC4B8((unsigned int *)a3, (uint64_t)&v11[8 * v20], *(_BYTE **)(v28 + 40), (_BYTE *)(*(_QWORD *)(v28 + 40) + 8 * *(unsigned int *)(v28 + 48)));
  }
  return result;
}

uint64_t sub_1C4EE2B64(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t *v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v40;
  void *v41;
  int v42;
  _QWORD v43[9];

  v43[8] = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  while (1)
  {
    v5 = *(_QWORD *)(*(_QWORD *)v4 + 72);
    v6 = *(unsigned int *)(*(_QWORD *)v4 + 88);
    v7 = a2 >> 4;
    if (!(_DWORD)v6)
      goto LABEL_8;
    LODWORD(v8) = (v7 ^ (a2 >> 9)) & (v6 - 1);
    v9 = (uint64_t *)(v5 + 16 * v8);
    v10 = *v9;
    if (a2 != *v9)
    {
      v11 = 1;
      while (v10 != -4096)
      {
        v12 = v8 + v11++;
        v8 = v12 & (v6 - 1);
        v10 = *(_QWORD *)(v5 + 16 * v8);
        if (a2 == v10)
        {
          v9 = (uint64_t *)(v5 + 16 * v8);
          goto LABEL_9;
        }
      }
LABEL_8:
      v9 = (uint64_t *)(v5 + 16 * v6);
    }
LABEL_9:
    if (v9 != (uint64_t *)(v5 + 16 * v6))
    {
      v13 = (uint64_t *)v9[1];
      if (v13)
        break;
    }
    sub_1C4EE28E8(*(_QWORD *)a1[1], a2, (uint64_t)&v41);
    v14 = v42;
    if (v42)
    {
      v15 = (uint64_t *)((char *)v41 + 8);
      if (v42 == 1)
        v15 = (uint64_t *)v41;
      else
        v14 = 2;
      v16 = *v15;
    }
    else
    {
      v16 = 0;
    }
    if (v41 != v43)
      free(v41);
    v17 = a1[2];
    v18 = *(_QWORD *)(v17 + 24);
    v19 = *(unsigned int *)(v17 + 40);
    if (v14 == 1)
    {
      if ((_DWORD)v19)
      {
        LODWORD(v20) = (v19 - 1) & (v7 ^ (a2 >> 9));
        v21 = (uint64_t *)(v18 + 16 * v20);
        v22 = *v21;
        if (a2 == *v21)
          goto LABEL_33;
        v23 = 1;
        while (v22 != -4096)
        {
          v24 = v20 + v23++;
          v20 = v24 & (v19 - 1);
          v22 = *(_QWORD *)(v18 + 16 * v20);
          if (a2 == v22)
          {
            v21 = (uint64_t *)(v18 + 16 * v20);
            goto LABEL_33;
          }
        }
      }
      v21 = (uint64_t *)(v18 + 16 * v19);
LABEL_33:
      if (v21 == (uint64_t *)(v18 + 16 * v19))
        return *(_QWORD *)(*(_QWORD *)v4 + 96);
      a2 = v16;
      if (!v21[1])
        return *(_QWORD *)(*(_QWORD *)v4 + 96);
    }
    else
    {
      if (!(_DWORD)v19)
        goto LABEL_36;
      LODWORD(v25) = (v19 - 1) & (v7 ^ (a2 >> 9));
      v26 = (uint64_t *)(v18 + 16 * v25);
      v27 = *v26;
      if (a2 != *v26)
      {
        v28 = 1;
        while (v27 != -4096)
        {
          v29 = v25 + v28++;
          v25 = v29 & (v19 - 1);
          v27 = *(_QWORD *)(v18 + 16 * v25);
          if (a2 == v27)
          {
            v26 = (uint64_t *)(v18 + 16 * v25);
            goto LABEL_37;
          }
        }
LABEL_36:
        v26 = (uint64_t *)(v18 + 16 * v19);
      }
LABEL_37:
      v30 = (uint64_t *)(v18 + 16 * v19);
      if (v26 == v30 || !v26[1])
        return *(_QWORD *)(*(_QWORD *)v4 + 96);
      if ((_DWORD)v19)
      {
        v31 = v19 - 1;
        LODWORD(v19) = (v19 - 1) & (v7 ^ (a2 >> 9));
        v32 = (uint64_t *)(v18 + 16 * v19);
        v33 = *v32;
        if (a2 == *v32)
          goto LABEL_46;
        v34 = 1;
        while (v33 != -4096)
        {
          v35 = v19 + v34++;
          v19 = v35 & v31;
          v33 = *(_QWORD *)(v18 + 16 * v19);
          if (a2 == v33)
          {
            v32 = (uint64_t *)(v18 + 16 * v19);
            goto LABEL_46;
          }
        }
      }
      v32 = v30;
LABEL_46:
      v36 = *(uint64_t **)(v32[1] + 8);
      if (!v36)
        return *(_QWORD *)(*(_QWORD *)v4 + 96);
      v37 = *v36;
      v38 = v37 == a2;
      a2 = v37;
      if (v38)
        return *(_QWORD *)(*(_QWORD *)v4 + 96);
    }
  }
  v40 = *v13;
  if (v40)
    return v40 - 48;
  else
    return 0;
}

void llvm::MemorySSAUpdater::moveBefore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C4EE2E28(a1, a2, *(llvm::BasicBlock **)(a3 + 64), (_QWORD *)(a3 + 32));
}

void sub_1C4EE2E28(uint64_t a1, uint64_t a2, llvm::BasicBlock *a3, _QWORD *a4)
{
  uint64_t i;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  llvm::Value **v12;
  unint64_t v13;

  for (i = *(_QWORD *)(a2 + 8); i; i = *(_QWORD *)(i + 8))
  {
    v9 = *(_QWORD *)(i + 24);
    if (v9)
      v10 = *(_BYTE *)(v9 + 16) == 27;
    else
      v10 = 0;
    if (v10)
    {
      v13 = *(_QWORD *)(i + 24);
      sub_1C4EDE04C(a1 + 504, &v13);
    }
  }
  if (*(_BYTE *)(a2 + 16) == 25)
    v11 = a2;
  else
    v11 = 0;
  if (v11)
    v12 = (llvm::Value **)(v11 - 32);
  else
    v12 = (llvm::Value **)(a2 - 64);
  llvm::Value::doRAUW((llvm::ValueAsMetadata *)a2, *v12, (llvm::Value *)1);
  llvm::MemorySSA::moveTo(*(int32x2_t **)a1, a2, a3, a4);
  if (a2 && *(_BYTE *)(a2 + 16) == 26)
    llvm::MemorySSAUpdater::insertDef((llvm::MemorySSAUpdater *)a1, (llvm::MemoryDef *)a2, 1);
  else
    llvm::MemorySSAUpdater::insertUse((llvm::MemorySSAUpdater *)a1, (llvm::BasicBlock **)a2, 1);
  *(_DWORD *)(a1 + 512) = 0;
  sub_1C61247C0(a1 + 584, *(_QWORD **)(a1 + 592));
  *(_QWORD *)(a1 + 584) = a1 + 592;
  *(_QWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 592) = 0;
}

void llvm::MemorySSAUpdater::moveToPlace(uint64_t *a1, uint64_t a2, llvm::BasicBlock *a3, int a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  int v13;
  uint64_t v14;

  if (a4 != 2)
    goto LABEL_15;
  v4 = *a1;
  v5 = (_QWORD *)*((_QWORD *)a3 + 5);
  if (v5 == (_QWORD *)((char *)a3 + 40))
  {
    v6 = 0;
  }
  else
  {
    if (v5)
      v6 = v5 - 3;
    else
      v6 = 0;
    if (*((unsigned __int8 *)v6 + 16) - 29 >= 0xB)
      v6 = 0;
  }
  v7 = *(_DWORD *)(v4 + 40);
  if (!v7)
    goto LABEL_14;
  v8 = *(_QWORD *)(v4 + 24);
  v9 = v7 - 1;
  v10 = ((v6 >> 4) ^ (v6 >> 9)) & (v7 - 1);
  v11 = *(_QWORD **)(v8 + 16 * v10);
  if (v6 != v11)
  {
    v12 = 1;
    while (v11 != (_QWORD *)-4096)
    {
      v13 = v10 + v12++;
      v10 = v13 & v9;
      v11 = *(_QWORD **)(v8 + 16 * v10);
      if (v6 == v11)
        goto LABEL_13;
    }
    goto LABEL_14;
  }
LABEL_13:
  v14 = *(_QWORD *)(v8 + 16 * v10 + 8);
  if (!v14)
  {
LABEL_14:
    a4 = 1;
LABEL_15:
    sub_1C4EE2FE8((uint64_t)a1, a2, a3, a4);
    return;
  }
  sub_1C4EE2E28((uint64_t)a1, a2, *(llvm::BasicBlock **)(v14 + 64), (_QWORD *)(v14 + 32));
}

void sub_1C4EE2FE8(uint64_t a1, uint64_t a2, llvm::BasicBlock *a3, int a4)
{
  uint64_t i;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  llvm::Value **v12;
  unint64_t v13;

  for (i = *(_QWORD *)(a2 + 8); i; i = *(_QWORD *)(i + 8))
  {
    v9 = *(_QWORD *)(i + 24);
    if (v9)
      v10 = *(_BYTE *)(v9 + 16) == 27;
    else
      v10 = 0;
    if (v10)
    {
      v13 = *(_QWORD *)(i + 24);
      sub_1C4EDE04C(a1 + 504, &v13);
    }
  }
  if (*(_BYTE *)(a2 + 16) == 25)
    v11 = a2;
  else
    v11 = 0;
  if (v11)
    v12 = (llvm::Value **)(v11 - 32);
  else
    v12 = (llvm::Value **)(a2 - 64);
  llvm::Value::doRAUW((llvm::ValueAsMetadata *)a2, *v12, (llvm::Value *)1);
  llvm::MemorySSA::moveTo(*(int32x2_t **)a1, a2, a3, a4);
  if (a2 && *(_BYTE *)(a2 + 16) == 26)
    llvm::MemorySSAUpdater::insertDef((llvm::MemorySSAUpdater *)a1, (llvm::MemoryDef *)a2, 1);
  else
    llvm::MemorySSAUpdater::insertUse((llvm::MemorySSAUpdater *)a1, (llvm::BasicBlock **)a2, 1);
  *(_DWORD *)(a1 + 512) = 0;
  sub_1C61247C0(a1 + 584, *(_QWORD **)(a1 + 592));
  *(_QWORD *)(a1 + 584) = a1 + 592;
  *(_QWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 592) = 0;
}

int32x2_t *llvm::MemorySSAUpdater::moveAllAccesses(int32x2_t **this, llvm::BasicBlock *a2, llvm::BasicBlock *a3, llvm::Instruction *a4)
{
  int32x2_t *result;
  int32x2_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  llvm::BasicBlock *v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  int32x2_t v18;
  __int32 v19;
  __int32 v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  int v25;
  uint64_t v26;
  int32x2_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  llvm::BasicBlock *v31;
  int v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  llvm::MemoryPhi *v36;
  BOOL v37;
  uint64_t v38;
  BOOL v39;
  int v41;
  int32x2_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  llvm::BasicBlock *v46;
  int v47;
  int v48;

  result = *this;
  v8 = result[6];
  v9 = result[8].u32[0];
  v10 = a2 >> 4;
  if (!(_DWORD)v9)
  {
LABEL_7:
    v12 = *(_QWORD *)&v8 + 16 * v9;
    goto LABEL_8;
  }
  LODWORD(v11) = (v9 - 1) & (v10 ^ (a2 >> 9));
  v12 = *(_QWORD *)&v8 + 16 * v11;
  v13 = *(llvm::BasicBlock **)v12;
  if (*(llvm::BasicBlock **)v12 != a2)
  {
    v14 = 1;
    while (v13 != (llvm::BasicBlock *)-4096)
    {
      v15 = v11 + v14++;
      v11 = v15 & (v9 - 1);
      v13 = *(llvm::BasicBlock **)(*(_QWORD *)&v8 + 16 * v11);
      if (v13 == a2)
      {
        v12 = *(_QWORD *)&v8 + 16 * v11;
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v12 == *(_QWORD *)&v8 + 16 * v9)
    return result;
  v16 = *(_QWORD *)(v12 + 8);
  if (!v16)
    return result;
  v17 = (_QWORD *)((char *)a4 + 24);
  if ((char *)a4 + 24 != (char *)a3 + 40)
  {
    v18 = result[3];
    v19 = result[5].i32[0];
    v20 = v19 - 1;
    while (1)
    {
      v21 = v17 - 3;
      if (!v17)
        v21 = 0;
      if (v19)
      {
        v22 = ((v21 >> 4) ^ (v21 >> 9)) & v20;
        v23 = *(_QWORD **)(*(_QWORD *)&v18 + 16 * v22);
        if (v21 != v23)
        {
          v24 = 1;
          while (v23 != (_QWORD *)-4096)
          {
            v25 = v22 + v24++;
            v22 = v25 & v20;
            v23 = *(_QWORD **)(*(_QWORD *)&v18 + 16 * v22);
            if (v21 == v23)
              goto LABEL_19;
          }
          goto LABEL_20;
        }
LABEL_19:
        v26 = *(_QWORD *)(*(_QWORD *)&v18 + 16 * v22 + 8);
        if (v26)
          break;
      }
LABEL_20:
      v17 = (_QWORD *)v17[1];
      if (v17 == (_QWORD *)((char *)a3 + 40))
        goto LABEL_21;
    }
    while (1)
    {
      v38 = *(_QWORD *)(v26 + 40);
      if (v16)
        v39 = v38 == v16;
      else
        v39 = 1;
      v41 = v39 || v38 == 0;
      llvm::MemorySSA::moveTo(result, v26, a3, 1);
      result = *this;
      v42 = (*this)[6];
      v43 = (*this)[8].u32[0];
      if (!(_DWORD)v43)
        goto LABEL_55;
      LODWORD(v44) = (v43 - 1) & (v10 ^ (a2 >> 9));
      v45 = *(_QWORD *)&v42 + 16 * v44;
      v46 = *(llvm::BasicBlock **)v45;
      if (*(llvm::BasicBlock **)v45 != a2)
        break;
LABEL_56:
      if (v45 == *(_QWORD *)&v42 + 16 * v43)
        v16 = 0;
      else
        v16 = *(_QWORD *)(v45 + 8);
      v26 = v38 - 32;
      if (v41)
        goto LABEL_21;
    }
    v47 = 1;
    while (v46 != (llvm::BasicBlock *)-4096)
    {
      v48 = v44 + v47++;
      v44 = v48 & (v43 - 1);
      v46 = *(llvm::BasicBlock **)(*(_QWORD *)&v42 + 16 * v44);
      if (v46 == a2)
      {
        v45 = *(_QWORD *)&v42 + 16 * v44;
        goto LABEL_56;
      }
    }
LABEL_55:
    v45 = *(_QWORD *)&v42 + 16 * v43;
    goto LABEL_56;
  }
LABEL_21:
  v27 = result[9];
  v28 = result[11].u32[0];
  if (!(_DWORD)v28)
  {
LABEL_27:
    v30 = *(_QWORD *)&v27 + 16 * v28;
    goto LABEL_28;
  }
  LODWORD(v29) = (v28 - 1) & (v10 ^ (a2 >> 9));
  v30 = *(_QWORD *)&v27 + 16 * v29;
  v31 = *(llvm::BasicBlock **)v30;
  if (*(llvm::BasicBlock **)v30 != a2)
  {
    v32 = 1;
    while (v31 != (llvm::BasicBlock *)-4096)
    {
      v33 = v29 + v32++;
      v29 = v33 & (v28 - 1);
      v31 = *(llvm::BasicBlock **)(*(_QWORD *)&v27 + 16 * v29);
      if (v31 == a2)
      {
        v30 = *(_QWORD *)&v27 + 16 * v29;
        goto LABEL_28;
      }
    }
    goto LABEL_27;
  }
LABEL_28:
  if (v30 != *(_QWORD *)&v27 + 16 * v28)
  {
    v34 = *(_QWORD **)(v30 + 8);
    if (v34)
    {
      if ((_QWORD *)*v34 != v34)
      {
        v35 = v34[1];
        if (v35)
          v36 = (llvm::MemoryPhi *)(v35 - 48);
        else
          v36 = 0;
        if (v35)
          v37 = *((_BYTE *)v36 + 16) == 27;
        else
          v37 = 0;
        if (v37)
          return (int32x2_t *)llvm::MemorySSAUpdater::tryRemoveTrivialPhi((llvm::MemorySSAUpdater *)this, v36);
      }
    }
  }
  return result;
}

int32x2_t *llvm::MemorySSAUpdater::moveAllAfterMergeBlocks(int32x2_t **this, llvm::BasicBlock **a2, llvm::BasicBlock *a3, llvm::Instruction *a4)
{
  int32x2_t *result;
  llvm::BasicBlock *v8;
  char *v9;
  int v10;
  unsigned int i;
  __int32 v12;
  int32x2_t v13;
  __int32 v14;
  uint64_t v15;
  int32x2_t *v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  result = llvm::MemorySSAUpdater::moveAllAccesses(this, (llvm::BasicBlock *)a2, a3, a4);
  v8 = a2[5];
  if (v8 != (llvm::BasicBlock *)(a2 + 5))
  {
    if (v8)
      v9 = (char *)v8 - 24;
    else
      v9 = 0;
    if (v9[16] != 30)
    {
      v10 = 2;
      switch(v9[16])
      {
        case 30:
          __break(1u);
          goto LABEL_35;
        case 31:
          v10 = (*((_DWORD *)v9 + 5) >> 1) & 0x3FFFFFF;
          goto LABEL_30;
        case 32:
        case 38:
LABEL_35:
          v10 = (*((_DWORD *)v9 + 5) & 0x7FFFFFF) - 1;
          goto LABEL_30;
        case 33:
          goto LABEL_9;
        case 36:
          v10 = *((_WORD *)v9 + 9) & 1;
          goto LABEL_30;
        case 37:
          v10 = 1;
          goto LABEL_9;
        case 39:
          v10 = *((_DWORD *)v9 + 20) + 1;
LABEL_30:
          if (v10)
            goto LABEL_9;
          return result;
        default:
          return result;
      }
    }
    if ((*((_DWORD *)v9 + 5) & 0x7FFFFFF) == 3)
      v10 = 2;
    else
      v10 = 1;
LABEL_9:
    for (i = 0; i != v10; ++i)
    {
      result = (int32x2_t *)llvm::Instruction::getSuccessor((llvm::Instruction *)v9, i);
      v12 = (*this)[5].i32[0];
      if (v12)
      {
        v13 = (*this)[3];
        v14 = v12 - 1;
        v15 = ((result >> 4) ^ (result >> 9)) & (v12 - 1);
        v16 = *(int32x2_t **)(*(_QWORD *)&v13 + 16 * v15);
        if (result == v16)
        {
LABEL_15:
          v19 = *(_QWORD *)(*(_QWORD *)&v13 + 16 * v15 + 8);
          if (v19)
          {
            v20 = *(_DWORD *)(v19 + 20);
            v21 = v20 & 0x7FFFFFF;
            if ((v20 & 0x7FFFFFF) != 0)
            {
              v22 = 0;
              while (1)
              {
                v23 = v19 - 32 * v21;
                if ((v20 & 0x40000000) != 0)
                  v23 = *(_QWORD *)(v19 - 8);
                if (*(llvm::BasicBlock ***)(v23 + 32 * *(unsigned int *)(v19 + 76) + 8 * v22) == a2)
                  break;
                if (v21 == ++v22)
                  goto LABEL_32;
              }
            }
            else
            {
LABEL_32:
              LODWORD(v22) = -1;
            }
            if ((v20 & 0x40000000) != 0)
              v24 = *(_QWORD *)(v19 - 8);
            else
              v24 = v19 - 32 * v21;
            *(_QWORD *)(v24 + 32 * *(unsigned int *)(v19 + 76) + 8 * v22) = a3;
          }
        }
        else
        {
          v17 = 1;
          while (v16 != (int32x2_t *)-4096)
          {
            v18 = v15 + v17++;
            v15 = v18 & v14;
            v16 = *(int32x2_t **)(*(_QWORD *)&v13 + 16 * v15);
            if (result == v16)
              goto LABEL_15;
          }
        }
      }
    }
  }
  return result;
}

void llvm::MemorySSAUpdater::wireOldPredecessorsToNewImmediatePredecessor(llvm::MemorySSAUpdater *a1, llvm::BasicBlock *this, llvm::BasicBlock *a3, uint64_t *a4, uint64_t a5, char a6)
{
  int v6;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  llvm::BasicBlock *v15;
  int v16;
  int v17;
  uint64_t v18;
  int hasNPredecessors;
  int32x2_t *v20;
  char *MemoryPhi;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int i;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  char *v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  int v37;
  _BYTE v38[136];

  v6 = *(_DWORD *)(*(_QWORD *)a1 + 40);
  if (v6)
  {
    v12 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    v13 = v6 - 1;
    v14 = (v6 - 1) & ((this >> 4) ^ (this >> 9));
    v15 = *(llvm::BasicBlock **)(v12 + 16 * v14);
    if (v15 == this)
    {
LABEL_6:
      v18 = *(_QWORD *)(v12 + 16 * v14 + 8);
      if (v18)
      {
        hasNPredecessors = llvm::BasicBlock::hasNPredecessors(this, 1);
        v20 = *(int32x2_t **)a1;
        if (hasNPredecessors)
        {
          llvm::MemorySSA::moveTo(v20, v18, a3, 0);
        }
        else
        {
          MemoryPhi = llvm::MemorySSA::createMemoryPhi((llvm::MemorySSA *)v20, a3);
          v34 = v38;
          v35 = v38;
          v36 = 16;
          v37 = 0;
          if (a5)
          {
            v22 = 8 * a5;
            do
            {
              v23 = *a4++;
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v34, v23);
              v22 -= 8;
            }
            while (v22);
          }
          v24 = *(_DWORD *)(v18 + 20) & 0x7FFFFFF;
          if (v24)
          {
            for (i = 0; i != v24; ++i)
            {
              v26 = *(_DWORD *)(v18 + 20);
              if ((v26 & 0x40000000) != 0)
                v27 = *(_QWORD *)(v18 - 8);
              else
                v27 = v18 - 32 * (v26 & 0x7FFFFFF);
              v28 = *(_QWORD *)(v27 + 32 * i);
              v29 = *(_QWORD *)(v27 + 32 * *(unsigned int *)(v18 + 76) + 8 * i);
              v30 = (char *)sub_1C477672C((uint64_t)&v34, v29);
              if (v35 == v34)
                v31 = (uint64_t *)((char *)&v36 + 4);
              else
                v31 = &v36;
              if (v30 != &v35[8 * *(unsigned int *)v31])
              {
                sub_1C4ECE04C((uint64_t)MemoryPhi, v28, v29);
                if ((a6 & 1) == 0)
                {
                  v32 = (char *)sub_1C477672C((uint64_t)&v34, v29);
                  if (v35 == v34)
                    v33 = (uint64_t *)((char *)&v36 + 4);
                  else
                    v33 = &v36;
                  if (v32 != &v35[8 * *(unsigned int *)v33])
                  {
                    *(_QWORD *)v32 = -2;
                    ++v37;
                  }
                }
                sub_1C4EDF39C(v18, i);
                v24 = *(_DWORD *)(v18 + 20) & 0x7FFFFFF;
                --i;
              }
            }
          }
          sub_1C4ECE04C(v18, (uint64_t)MemoryPhi, (uint64_t)a3);
          llvm::MemorySSAUpdater::tryRemoveTrivialPhi(a1, (llvm::MemoryPhi *)MemoryPhi);
          if (v35 != v34)
            free(v35);
        }
      }
    }
    else
    {
      v16 = 1;
      while (v15 != (llvm::BasicBlock *)-4096)
      {
        v17 = v14 + v16++;
        v14 = v17 & v13;
        v15 = *(llvm::BasicBlock **)(v12 + 16 * v14);
        if (v15 == this)
          goto LABEL_6;
      }
    }
  }
}

uint64_t sub_1C4EE37B8(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 & 0x40000000) != 0)
  {
    v3 = *(uint64_t **)(a1 - 8);
    v2 = v1 & 0x7FFFFFF;
    if (!v2)
      return 0;
  }
  else
  {
    v2 = v1 & 0x7FFFFFF;
    v3 = (uint64_t *)(a1 - 32 * v2);
    if (!v2)
      return 0;
  }
  result = 0;
  v5 = 32 * v2;
  do
  {
    if (result)
    {
      if (result != *v3)
        return 0;
    }
    else
    {
      result = *v3;
    }
    v3 += 4;
    v5 -= 32;
  }
  while (v5);
  return result;
}

uint64_t llvm::MemorySSAUpdater::removeBlocks(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  llvm::MemorySSAUpdater *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Instruction *v9;
  uint64_t v10;
  int v11;
  unsigned int i;
  uint64_t Successor;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  llvm::MemoryPhi *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t j;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD **v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;

  v2 = *(unsigned int *)(a2 + 80);
  if (!(_DWORD)v2)
    return result;
  v4 = (llvm::MemorySSAUpdater *)result;
  v5 = *(uint64_t **)(a2 + 72);
  v6 = &v5[v2];
  do
  {
    v7 = *v5;
    v8 = *(_QWORD *)(*v5 + 40);
    if (v8 != *v5 + 40)
    {
      v9 = (llvm::Instruction *)(v8 - 24);
      if (v8)
        v10 = v8 - 24;
      else
        v10 = 0;
      if (*(_BYTE *)(v10 + 16) != 30)
      {
        v11 = 2;
        switch(*(_BYTE *)(v10 + 16))
        {
          case 0x1E:
            __break(1u);
            return result;
          case 0x1F:
            v11 = (*(_DWORD *)(v10 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_50;
          case 0x20:
          case 0x26:
            v11 = (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_50;
          case 0x21:
            goto LABEL_11;
          case 0x24:
            v11 = *(_WORD *)(v10 + 18) & 1;
            goto LABEL_50;
          case 0x25:
            v11 = 1;
            goto LABEL_11;
          case 0x27:
            v11 = *(_DWORD *)(v10 + 80) + 1;
LABEL_50:
            if (!v11)
              goto LABEL_23;
            goto LABEL_11;
          default:
            goto LABEL_23;
        }
      }
      if ((*(_DWORD *)(v10 + 20) & 0x7FFFFFF) == 3)
        v11 = 2;
      else
        v11 = 1;
LABEL_11:
      for (i = 0; i != v11; ++i)
      {
        Successor = llvm::Instruction::getSuccessor(v9, i);
        v52 = 0;
        v53 = Successor;
        result = sub_1C61A6880(a2, &v53, &v52);
        if ((result & 1) == 0)
        {
          v14 = *(_DWORD *)(*(_QWORD *)v4 + 40);
          if (v14)
          {
            v15 = *(_QWORD *)(*(_QWORD *)v4 + 24);
            v16 = v14 - 1;
            v17 = (v14 - 1) & ((Successor >> 4) ^ (Successor >> 9));
            v18 = *(_QWORD *)(v15 + 16 * v17);
            if (Successor == v18)
            {
LABEL_20:
              v21 = *(llvm::MemoryPhi **)(v15 + 16 * v17 + 8);
              if (v21)
              {
                v52 = &v53;
                v53 = v7;
                sub_1C4EE40BC((uint64_t)v21, &v52);
                result = llvm::MemorySSAUpdater::tryRemoveTrivialPhi(v4, v21);
              }
            }
            else
            {
              v19 = 1;
              while (v18 != -4096)
              {
                v20 = v17 + v19++;
                v17 = v20 & v16;
                v18 = *(_QWORD *)(v15 + 16 * v17);
                if (Successor == v18)
                  goto LABEL_20;
              }
            }
          }
        }
      }
    }
LABEL_23:
    v22 = *(_QWORD *)(*(_QWORD *)v4 + 48);
    v23 = *(unsigned int *)(*(_QWORD *)v4 + 64);
    if (!(_DWORD)v23)
      goto LABEL_29;
    LODWORD(v24) = (v23 - 1) & ((v7 >> 4) ^ (v7 >> 9));
    v25 = (uint64_t *)(v22 + 16 * v24);
    v26 = *v25;
    if (v7 != *v25)
    {
      v27 = 1;
      while (v26 != -4096)
      {
        v28 = v24 + v27++;
        v24 = v28 & (v23 - 1);
        v26 = *(_QWORD *)(v22 + 16 * v24);
        if (v7 == v26)
        {
          v25 = (uint64_t *)(v22 + 16 * v24);
          goto LABEL_30;
        }
      }
LABEL_29:
      v25 = (uint64_t *)(v22 + 16 * v23);
    }
LABEL_30:
    if (v25 != (uint64_t *)(v22 + 16 * v23))
    {
      v29 = v25[1];
      if (v29)
      {
        for (j = *(_QWORD *)(v29 + 8); j != v29; j = *(_QWORD *)(j + 8))
        {
          if (j)
            v31 = j - 32;
          else
            v31 = 0;
          v32 = *(_DWORD *)(v31 + 20);
          if ((v32 & 0x40000000) != 0)
          {
            v34 = *(_QWORD *)(v31 - 8);
            v33 = v32 & 0x7FFFFFF;
            if (!v33)
              continue;
          }
          else
          {
            v33 = v32 & 0x7FFFFFF;
            v34 = v31 - 32 * v33;
            if (!v33)
              continue;
          }
          v35 = 32 * v33;
          v36 = (_QWORD **)(v34 + 16);
          do
          {
            if (*(v36 - 2))
            {
              **v36 = *(v36 - 1);
              v37 = (uint64_t)*(v36 - 1);
              if (v37)
                *(_QWORD *)(v37 + 16) = *v36;
            }
            *(v36 - 2) = 0;
            v36 += 4;
            v35 -= 32;
          }
          while (v35);
        }
      }
    }
    ++v5;
  }
  while (v5 != v6);
  v38 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v38)
  {
    v39 = *(_QWORD **)(a2 + 72);
    v40 = &v39[v38];
    do
    {
      v41 = *(_QWORD *)(*(_QWORD *)v4 + 48);
      v42 = *(unsigned int *)(*(_QWORD *)v4 + 64);
      if ((_DWORD)v42)
      {
        LODWORD(v43) = ((*v39 >> 4) ^ (*v39 >> 9)) & (v42 - 1);
        v44 = (uint64_t *)(v41 + 16 * v43);
        v45 = *v44;
        if (*v39 == *v44)
          goto LABEL_65;
        v46 = 1;
        while (v45 != -4096)
        {
          v47 = v43 + v46++;
          v43 = v47 & (v42 - 1);
          v45 = *(_QWORD *)(v41 + 16 * v43);
          if (*v39 == v45)
          {
            v44 = (uint64_t *)(v41 + 16 * v43);
            goto LABEL_65;
          }
        }
      }
      v44 = (uint64_t *)(v41 + 16 * v42);
LABEL_65:
      if (v44 != (uint64_t *)(v41 + 16 * v42))
      {
        v48 = v44[1];
        if (v48)
        {
          v49 = *(_QWORD *)(v48 + 8);
          if (v49 != v48)
          {
            do
            {
              v50 = *(_QWORD *)(v49 + 8);
              if (v49)
                v51 = v49 - 32;
              else
                v51 = 0;
              llvm::MemorySSA::removeFromLookups(*(int32x2_t **)v4, v51);
              result = (uint64_t)llvm::MemorySSA::removeFromLists(*(int32x2_t **)v4, v51, 1);
              v49 = v50;
            }
            while (v50 != v48);
          }
        }
      }
      ++v39;
    }
    while (v39 != v40);
  }
  return result;
}

char **llvm::MemorySSAUpdater::changeToUnreachable(int32x2_t **this, const llvm::Instruction *a2)
{
  const llvm::BasicBlock *v3;
  char *v4;
  char *v5;
  char *v6;
  BOOL v7;
  char *v8;
  __int32 v9;
  int32x2_t v10;
  __int32 v11;
  uint64_t v12;
  char *v13;
  int v14;
  int v15;
  llvm::MemoryAccess *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  unsigned int i;
  const llvm::BasicBlock *Successor;
  __int32 v22;
  int32x2_t v23;
  __int32 v24;
  uint64_t v25;
  const llvm::BasicBlock *v26;
  int v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  int32x2_t ****v38;
  int32x2_t *v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  int32x2_t *****v44;
  int32x2_t ****v45;
  int v46;
  int v47;
  uint64_t v48;
  llvm::MemoryPhi **v49;
  uint64_t v51;
  unint64_t *v52;
  int32x2_t ****v53;
  uint64_t *v54;
  char *v55;
  uint64_t v56;
  _QWORD v57[50];

  v57[48] = *MEMORY[0x1E0C80C00];
  v3 = (const llvm::BasicBlock *)*((_QWORD *)a2 + 5);
  v4 = (char *)a2 + 24;
  v5 = (char *)v3 + 40;
  while (v4 != v5)
  {
    v6 = v4 - 24;
    v7 = v4 == 0;
    v4 = (char *)*((_QWORD *)v4 + 1);
    if (v7)
      v8 = 0;
    else
      v8 = v6;
    v9 = (*this)[5].i32[0];
    if (v9)
    {
      v10 = (*this)[3];
      v11 = v9 - 1;
      v12 = ((v8 >> 4) ^ (v8 >> 9)) & (v9 - 1);
      v13 = *(char **)(*(_QWORD *)&v10 + 16 * v12);
      if (v13 == v8)
      {
LABEL_11:
        v16 = *(llvm::MemoryAccess **)(*(_QWORD *)&v10 + 16 * v12 + 8);
        if (v16)
          llvm::MemorySSAUpdater::removeMemoryAccess(this, v16, 0);
      }
      else
      {
        v14 = 1;
        while (v13 != (char *)-4096)
        {
          v15 = v12 + v14++;
          v12 = v15 & v11;
          v13 = *(char **)(*(_QWORD *)&v10 + 16 * v12);
          if (v13 == v8)
            goto LABEL_11;
        }
      }
    }
  }
  v55 = (char *)v57;
  v56 = 0x1000000000;
  v17 = *(_QWORD **)v5;
  if (*(char **)v5 != v5)
  {
    if (v17)
      v18 = v17 - 3;
    else
      v18 = 0;
    if (*((_BYTE *)v18 + 16) != 30)
    {
      v19 = 2;
      switch(*((_BYTE *)v18 + 16))
      {
        case 0x1E:
          __break(1u);
          goto LABEL_61;
        case 0x1F:
          v19 = (*((_DWORD *)v18 + 5) >> 1) & 0x3FFFFFF;
          goto LABEL_58;
        case 0x20:
        case 0x26:
LABEL_61:
          v19 = (*((_DWORD *)v18 + 5) & 0x7FFFFFF) - 1;
          goto LABEL_58;
        case 0x21:
          goto LABEL_21;
        case 0x24:
          v19 = *((_WORD *)v18 + 9) & 1;
          goto LABEL_58;
        case 0x25:
          v19 = 1;
          goto LABEL_21;
        case 0x27:
          v19 = *((_DWORD *)v18 + 20) + 1;
LABEL_58:
          if (!v19)
            return sub_1C4EE41F8(&v55);
          goto LABEL_21;
        default:
          return sub_1C4EE41F8(&v55);
      }
    }
    if ((*((_DWORD *)v18 + 5) & 0x7FFFFFF) == 3)
      v19 = 2;
    else
      v19 = 1;
LABEL_21:
    for (i = 0; i != v19; ++i)
    {
      Successor = (const llvm::BasicBlock *)llvm::Instruction::getSuccessor((llvm::Instruction *)v18, i);
      llvm::MemorySSAUpdater::removeDuplicatePhiEdgesBetween((llvm::MemorySSAUpdater *)this, v3, Successor);
      v22 = (*this)[5].i32[0];
      if (v22)
      {
        v23 = (*this)[3];
        v24 = v22 - 1;
        v25 = (v22 - 1) & ((Successor >> 4) ^ (Successor >> 9));
        v26 = *(const llvm::BasicBlock **)(*(_QWORD *)&v23 + 16 * v25);
        if (Successor == v26)
        {
LABEL_27:
          v29 = *(_QWORD *)(*(_QWORD *)&v23 + 16 * v25 + 8);
          if (v29)
          {
            v51 = (uint64_t)v3;
            v54 = &v51;
            sub_1C4EE40BC(v29, &v54);
            v51 = 4;
            v52 = 0;
            v53 = (int32x2_t ****)v29;
            if ((v29 | 0x1000) != 0xFFFFFFFFFFFFF000)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v51);
            v30 = (_QWORD *)sub_1C4EE497C((unsigned int *)&v55, (unint64_t)&v51, 1);
            v31 = v56;
            v32 = &v55[24 * v56];
            *(_QWORD *)v32 = 4;
            *((_QWORD *)v32 + 1) = 0;
            v33 = (unint64_t)(v32 + 8);
            v34 = v30[2];
            *((_QWORD *)v32 + 2) = v34;
            if (v34 != -8192 && v34 != -4096)
            {
              if (v34)
              {
                v35 = *v30 & 0xFFFFFFFFFFFFFFF8;
                *((_QWORD *)v32 + 1) = *(_QWORD *)v35;
                *(_QWORD *)v35 = v32;
                *(_QWORD *)v32 = v35 | 4;
                v36 = (uint64_t *)*((_QWORD *)v32 + 1);
                if (v36)
                  *v36 = *v36 & 7 | v33;
              }
            }
            LODWORD(v56) = v31 + 1;
            if (v53 != (int32x2_t ****)-8192 && v53 != (int32x2_t ****)-4096 && v53)
            {
              v37 = v51 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF8) = v52;
              if (v52)
              {
                *v52 = *v52 & 7 | v37;
              }
              else
              {
                v38 = v53;
                v39 = ***v53;
                v40 = (unint64_t)v39[303];
                if (v40 <= v37)
                {
                  v41 = v39[305].u32[0];
                  if (v40 + 16 * v41 > v37)
                  {
                    v42 = v41 - 1;
                    LODWORD(v43) = v42 & ((v53 >> 4) ^ (v53 >> 9));
                    v44 = (int32x2_t *****)(v40 + 16 * v43);
                    v45 = *v44;
                    if (v53 == *v44)
                    {
LABEL_46:
                      *v44 = (int32x2_t ****)-8192;
                      v39[304] = vadd_s32(v39[304], (int32x2_t)0x1FFFFFFFFLL);
                      v38 = v53;
                    }
                    else
                    {
                      v46 = 1;
                      while (v45 != (int32x2_t ****)-4096)
                      {
                        v47 = v43 + v46++;
                        v43 = v47 & v42;
                        v45 = *(int32x2_t *****)(v40 + 16 * v43);
                        if (v53 == v45)
                        {
                          v44 = (int32x2_t *****)(v40 + 16 * v43);
                          goto LABEL_46;
                        }
                      }
                    }
                    *((_BYTE *)v38 + 17) &= ~1u;
                  }
                }
              }
            }
          }
        }
        else
        {
          v27 = 1;
          while (v26 != (const llvm::BasicBlock *)-4096)
          {
            v28 = v25 + v27++;
            v25 = v28 & v24;
            v26 = *(const llvm::BasicBlock **)(*(_QWORD *)&v23 + 16 * v25);
            if (Successor == v26)
              goto LABEL_27;
          }
        }
      }
    }
    if ((_DWORD)v56)
    {
      v48 = 24 * v56;
      v49 = (llvm::MemoryPhi **)(v55 + 16);
      do
      {
        if (*v49)
          llvm::MemorySSAUpdater::tryRemoveTrivialPhi((llvm::MemorySSAUpdater *)this, *v49);
        v49 += 3;
        v48 -= 24;
      }
      while (v48);
    }
  }
  return sub_1C4EE41F8(&v55);
}

char *llvm::MemorySSAUpdater::createMemoryAccessInBB(uint64_t **a1, uint64_t a2, uint64_t a3, llvm::BasicBlock *a4, int a5)
{
  char *DefinedAccess;

  DefinedAccess = llvm::MemorySSA::createDefinedAccess(*a1, a2, a3, 0);
  llvm::MemorySSA::insertIntoListsForBlock((uint64_t)*a1, (uint64_t)DefinedAccess, a4, a5);
  return DefinedAccess;
}

void sub_1C4EE4050(_QWORD *a1)
{
  uint64_t v2;

  if (a1)
  {
    sub_1C4EE4050(*a1);
    sub_1C4EE4050(a1[1]);
    v2 = a1[6];
    if (v2 != -8192 && v2 != -4096 && v2 != 0)
      llvm::ValueHandleBase::RemoveFromUseList(a1 + 4);
    operator delete(a1);
  }
}

uint64_t sub_1C4EE40BC(uint64_t result, _QWORD **a2)
{
  int v2;
  int v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *(_DWORD *)(result + 20);
  v3 = v2 & 0x7FFFFFF;
  if ((v2 & 0x7FFFFFF) != 0)
  {
    v5 = result;
    v6 = 0;
    do
    {
      if ((v2 & 0x40000000) != 0)
        v7 = *(_QWORD *)(v5 - 8);
      else
        v7 = v5 - 32 * (v2 & 0x7FFFFFF);
      if (**a2 == *(_QWORD *)(v7 + 32 * *(unsigned int *)(v5 + 76) + 8 * v6))
      {
        result = sub_1C4EDF39C(v5, v6);
        v2 = *(_DWORD *)(v5 + 20);
        v3 = v2 & 0x7FFFFFF;
        --v6;
      }
      ++v6;
    }
    while (v6 != v3);
  }
  return result;
}

llvm::SmallPtrSetImplBase *sub_1C4EE414C(llvm::SmallPtrSetImplBase *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  llvm::SmallPtrSetImplBase *v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = this;
    do
    {
      this = (llvm::SmallPtrSetImplBase *)sub_1C4774094(v5, *(_QWORD *)(*(_QWORD *)(v4 + 24) + 40));
      do
      {
        v4 = *(_QWORD *)(v4 + 8);
        if (!v4)
          break;
        v6 = *(_QWORD *)(v4 + 24);
        v7 = *(unsigned __int8 *)(v6 + 16);
        v8 = v6 && v7 >= 0x1C;
      }
      while (!v8 || v7 - 29 > 0xA);
    }
    while (v4 != a3);
  }
  return this;
}

uint64_t sub_1C4EE41BC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 600);
  if (v2 != (void *)(a1 + 616))
    free(v2);
  sub_1C4E28CA4(a1 + 296);
  return sub_1C4E28CA4(a1);
}

char **sub_1C4EE41F8(char **a1)
{
  char *v2;
  int v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  int32x2_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v5 = &v2[24 * v3];
    do
    {
      v6 = *((_QWORD *)v5 - 1);
      if (v6 && v6 != -8192 && v6 != -4096)
      {
        v7 = *((_QWORD *)v5 - 3) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v7 = *((_QWORD *)v5 - 2);
        v8 = (unint64_t *)*((_QWORD *)v5 - 2);
        if (v8)
        {
          *v8 = *v8 & 7 | v7;
        }
        else
        {
          v9 = *((_QWORD *)v5 - 1);
          v10 = ***(int32x2_t ****)v9;
          v11 = (unint64_t)v10[303];
          if (v11 <= v7)
          {
            v12 = v10[305].u32[0];
            if (v11 + 16 * v12 > v7)
            {
              v13 = v12 - 1;
              LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
              v15 = (uint64_t *)(v11 + 16 * v14);
              v16 = *v15;
              if (v9 == *v15)
              {
LABEL_22:
                *v15 = -8192;
                v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                v9 = *((_QWORD *)v5 - 1);
              }
              else
              {
                v17 = 1;
                while (v16 != -4096)
                {
                  v18 = v14 + v17++;
                  v14 = v18 & v13;
                  v16 = *(_QWORD *)(v11 + 16 * v14);
                  if (v9 == v16)
                  {
                    v15 = (uint64_t *)(v11 + 16 * v14);
                    goto LABEL_22;
                  }
                }
              }
              *(_BYTE *)(v9 + 17) &= ~1u;
            }
          }
        }
      }
      v5 -= 24;
    }
    while (v5 != v2);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_1C4EE4344(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t *v9;
  int v10;
  unsigned int v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;

  v18 = 0;
  result = sub_1C4EE44B4(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v18);
  v9 = v18;
  if ((result & 1) != 0)
  {
    v15 = 0;
    goto LABEL_12;
  }
  v10 = *(_DWORD *)(a2 + 8);
  v11 = *(_DWORD *)(a2 + 16);
  if (4 * v10 + 4 >= 3 * v11)
  {
    v11 *= 2;
    goto LABEL_14;
  }
  if (v11 + ~v10 - *(_DWORD *)(a2 + 12) <= v11 >> 3)
  {
LABEL_14:
    sub_1C4EE453C(a2, v11);
    v18 = 0;
    result = sub_1C4EE44B4(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v18);
    v9 = v18;
  }
  ++*(_DWORD *)(a2 + 8);
  if (*v9 != -4096)
    --*(_DWORD *)(a2 + 12);
  *v9 = *a3;
  v9[1] = 6;
  v12 = (unint64_t *)(v9 + 1);
  v9[2] = 0;
  v13 = (unint64_t)(v9 + 2);
  v14 = a4[2];
  v9[3] = v14;
  v15 = 1;
  if (v14 != -8192 && v14 != -4096 && v14)
  {
    v16 = *a4 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v13 = *(_QWORD *)v16;
    *(_QWORD *)v16 = v12;
    *v12 = v16 | 6;
    if (*(_QWORD *)v13)
      **(_QWORD **)v13 = **(_QWORD **)v13 & 7 | v13;
    v15 = 1;
  }
LABEL_12:
  v17 = *(_QWORD *)a2 + 32 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v17;
  *(_BYTE *)(a1 + 16) = v15;
  return result;
}

uint64_t sub_1C4EE44B4(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t result;
  BOOL v10;
  int v11;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = (_QWORD *)(a1 + 32 * v4);
    v6 = *v5;
    if (*v5 == a3)
    {
LABEL_14:
      result = 1;
    }
    else
    {
      v7 = 0;
      v8 = 1;
      while (v6 != -4096)
      {
        if (v7)
          v10 = 0;
        else
          v10 = v6 == -8192;
        if (v10)
          v7 = v5;
        v11 = v4 + v8++;
        v4 = v11 & (a2 - 1);
        v5 = (_QWORD *)(a1 + 32 * v4);
        v6 = *v5;
        if (*v5 == a3)
          goto LABEL_14;
      }
      result = 0;
      if (v7)
        v5 = v7;
    }
  }
  else
  {
    v5 = 0;
    result = 0;
  }
  *a4 = v5;
  return result;
}

_QWORD *sub_1C4EE453C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4EE45F4(a1, v4, &v4[4 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4EE45F4(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  int32x2_t *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t *v29;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 32 * v6;
    do
    {
      *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v29 = 0;
        result = sub_1C4EE44B4(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v29);
        v10 = v29;
        *v29 = *v4;
        v11 = v10;
        v12 = v4[3];
        v10[3] = v12;
        v10[1] = 6;
        v13 = (unint64_t *)(v10 + 1);
        v11[2] = 0;
        v14 = (unint64_t)(v11 + 2);
        if (v12 != -8192 && v12 != -4096)
        {
          if (v12)
          {
            v15 = v4[1] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v14 = *(_QWORD *)v15;
            *(_QWORD *)v15 = v13;
            *v13 = v15 | 6;
            if (*(_QWORD *)v14)
              **(_QWORD **)v14 = **(_QWORD **)v14 & 7 | v14;
          }
        }
        ++*(_DWORD *)(v5 + 8);
        v16 = v4[3];
        if (v16 != -8192 && v16 != -4096 && v16)
        {
          v17 = v4[1] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v17 = v4[2];
          v18 = (unint64_t *)v4[2];
          if (v18)
          {
            *v18 = *v18 & 7 | v17;
          }
          else
          {
            v19 = v4[3];
            v20 = ***(int32x2_t ****)v19;
            v21 = (unint64_t)v20[303];
            if (v21 <= v17)
            {
              v22 = v20[305].u32[0];
              if (v21 + 16 * v22 > v17)
              {
                v23 = v22 - 1;
                LODWORD(v24) = v23 & ((v19 >> 4) ^ (v19 >> 9));
                v25 = (uint64_t *)(v21 + 16 * v24);
                v26 = *v25;
                if (v19 == *v25)
                {
LABEL_22:
                  *v25 = -8192;
                  v20[304] = vadd_s32(v20[304], (int32x2_t)0x1FFFFFFFFLL);
                  v19 = v4[3];
                }
                else
                {
                  v27 = 1;
                  while (v26 != -4096)
                  {
                    v28 = v24 + v27++;
                    v24 = v28 & v23;
                    v26 = *(_QWORD *)(v21 + 16 * v24);
                    if (v19 == v26)
                    {
                      v25 = (uint64_t *)(v21 + 16 * v24);
                      goto LABEL_22;
                    }
                  }
                }
                *(_BYTE *)(v19 + 17) &= ~1u;
              }
            }
          }
        }
      }
      v4 += 4;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t sub_1C4EE47F0(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  int32x2_t *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int v23;

  if (a2)
  {
    v3 = 0;
    v4 = result + 24 * a2;
    do
    {
      v5 = (unint64_t *)(a3 + v3);
      *v5 = 6;
      v5[1] = 0;
      v6 = *(_QWORD *)(result + v3 + 16);
      v5[2] = v6;
      if (v6 != -8192 && v6 != -4096 && v6 != 0)
      {
        v8 = *(_QWORD *)(result + v3) & 0xFFFFFFFFFFFFFFF8;
        v5[1] = *(_QWORD *)v8;
        *(_QWORD *)v8 = v5;
        *v5 = v8 | 6;
        v9 = (uint64_t *)v5[1];
        if (v9)
          *v9 = *v9 & 7 | (a3 + 8 + v3);
      }
      v3 += 24;
    }
    while (24 * a2 != v3);
    do
    {
      v10 = *(_QWORD *)(v4 - 8);
      if (v10 != -8192 && v10 != -4096 && v10 != 0)
      {
        v12 = *(_QWORD *)(v4 - 24) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v12 = *(_QWORD *)(v4 - 16);
        v13 = *(unint64_t **)(v4 - 16);
        if (v13)
        {
          *v13 = *v13 & 7 | v12;
        }
        else
        {
          v14 = *(_QWORD *)(v4 - 8);
          v15 = ***(int32x2_t ****)v14;
          v16 = (unint64_t)v15[303];
          if (v16 <= v12)
          {
            v17 = v15[305].u32[0];
            if (v16 + 16 * v17 > v12)
            {
              v18 = v17 - 1;
              LODWORD(v19) = v18 & ((v14 >> 4) ^ (v14 >> 9));
              v20 = (uint64_t *)(v16 + 16 * v19);
              v21 = *v20;
              if (v14 == *v20)
              {
LABEL_27:
                *v20 = -8192;
                v15[304] = vadd_s32(v15[304], (int32x2_t)0x1FFFFFFFFLL);
                v14 = *(_QWORD *)(v4 - 8);
              }
              else
              {
                v22 = 1;
                while (v21 != -4096)
                {
                  v23 = v19 + v22++;
                  v19 = v23 & v18;
                  v21 = *(_QWORD *)(v16 + 16 * v19);
                  if (v14 == v21)
                  {
                    v20 = (uint64_t *)(v16 + 16 * v19);
                    goto LABEL_27;
                  }
                }
              }
              *(_BYTE *)(v14 + 17) &= ~1u;
            }
          }
        }
      }
      v4 -= 24;
    }
    while (v4 != result);
  }
  return result;
}

unint64_t sub_1C4EE497C(unsigned int *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = a1[2];
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)a1[3])
  {
    v7 = *(_QWORD *)a1 + 24 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C4EE49E4(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C4EE49E4(a1, v5);
    }
  }
  return a2;
}

void sub_1C4EE49E4(unsigned int *a1, unint64_t a2)
{
  unint64_t *v3;
  unsigned int v4;
  unint64_t v5;

  v5 = 0;
  v3 = (unint64_t *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)a1, a2, 24, &v5);
  sub_1C4EE4A54(a1, v3);
  v4 = v5;
  if (*(unsigned int **)a1 != a1 + 4)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  a1[3] = v4;
}

unsigned int *sub_1C4EE4A54(unsigned int *result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  int32x2_t *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  int v25;

  v2 = result[2];
  if ((_DWORD)v2)
  {
    v3 = (unint64_t *)(*(_QWORD *)result + 16);
    v4 = (unint64_t)(a2 + 1);
    v5 = 24 * v2;
    do
    {
      *a2 = 4;
      a2[1] = 0;
      v6 = *v3;
      a2[2] = *v3;
      if (v6 != -8192 && v6 != -4096 && v6 != 0)
      {
        v8 = *(v3 - 2) & 0xFFFFFFFFFFFFFFF8;
        a2[1] = *(_QWORD *)v8;
        *(_QWORD *)v8 = a2;
        *a2 = v8 | 4;
        v9 = (uint64_t *)a2[1];
        if (v9)
          *v9 = *v9 & 7 | v4;
      }
      a2 += 3;
      v3 += 3;
      v4 += 24;
      v5 -= 24;
    }
    while (v5);
    v10 = *(_QWORD *)result;
    v11 = *(_QWORD *)result + 24 * v2;
    do
    {
      v12 = *(_QWORD *)(v11 - 8);
      if (v12 != -8192 && v12 != -4096 && v12 != 0)
      {
        v14 = *(_QWORD *)(v11 - 24) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v14 = *(_QWORD *)(v11 - 16);
        v15 = *(unint64_t **)(v11 - 16);
        if (v15)
        {
          *v15 = *v15 & 7 | v14;
        }
        else
        {
          v16 = *(_QWORD *)(v11 - 8);
          v17 = ***(int32x2_t ****)v16;
          v18 = (unint64_t)v17[303];
          if (v18 <= v14)
          {
            v19 = v17[305].u32[0];
            if (v18 + 16 * v19 > v14)
            {
              v20 = v19 - 1;
              LODWORD(v21) = v20 & ((v16 >> 4) ^ (v16 >> 9));
              v22 = (uint64_t *)(v18 + 16 * v21);
              v23 = *v22;
              if (v16 == *v22)
              {
LABEL_28:
                *v22 = -8192;
                v17[304] = vadd_s32(v17[304], (int32x2_t)0x1FFFFFFFFLL);
                v16 = *(_QWORD *)(v11 - 8);
              }
              else
              {
                v24 = 1;
                while (v23 != -4096)
                {
                  v25 = v21 + v24++;
                  v21 = v25 & v20;
                  v23 = *(_QWORD *)(v18 + 16 * v21);
                  if (v16 == v23)
                  {
                    v22 = (uint64_t *)(v18 + 16 * v21);
                    goto LABEL_28;
                  }
                }
              }
              *(_BYTE *)(v16 + 17) &= ~1u;
            }
          }
        }
      }
      v11 -= 24;
    }
    while (v11 != v10);
  }
  return result;
}

_QWORD *sub_1C4EE4BE4(_QWORD *result, unsigned int a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  int32x2_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;

  if (a2)
  {
    v2 = &result[4 * a2];
    do
    {
      if (*result != -4096 && *result != -8192)
      {
        v3 = result[3];
        if (v3 != -8192 && v3 != -4096 && v3 != 0)
        {
          v5 = result[1] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v5 = result[2];
          v6 = (unint64_t *)result[2];
          if (v6)
          {
            *v6 = *v6 & 7 | v5;
          }
          else
          {
            v7 = result[3];
            v8 = ***(int32x2_t ****)v7;
            v9 = (unint64_t)v8[303];
            if (v9 <= v5)
            {
              v10 = v8[305].u32[0];
              if (v9 + 16 * v10 > v5)
              {
                v11 = v10 - 1;
                LODWORD(v12) = v11 & ((v7 >> 4) ^ (v7 >> 9));
                v13 = (uint64_t *)(v9 + 16 * v12);
                v14 = *v13;
                if (v7 == *v13)
                {
LABEL_20:
                  *v13 = -8192;
                  v8[304] = vadd_s32(v8[304], (int32x2_t)0x1FFFFFFFFLL);
                  v7 = result[3];
                }
                else
                {
                  v15 = 1;
                  while (v14 != -4096)
                  {
                    v16 = v12 + v15++;
                    v12 = v16 & v11;
                    v14 = *(_QWORD *)(v9 + 16 * v12);
                    if (v7 == v14)
                    {
                      v13 = (uint64_t *)(v9 + 16 * v12);
                      goto LABEL_20;
                    }
                  }
                }
                *(_BYTE *)(v7 + 17) &= ~1u;
              }
            }
          }
        }
      }
      result += 4;
    }
    while (result != v2);
  }
  return result;
}

void sub_1C4EE4D00(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  int32x2_t *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unint64_t v29;

  v29 = 0;
  v3 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 24, &v29);
  v4 = *(char **)a1;
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = &v4[24 * v5];
    v8 = 24 * v5;
    do
    {
      v9 = (unint64_t *)&v3[v6];
      *v9 = 6;
      v9[1] = 0;
      v10 = *(_QWORD *)&v4[v6 + 16];
      v9[2] = v10;
      if (v10 != -8192 && v10 != -4096 && v10 != 0)
      {
        v12 = *(_QWORD *)&v4[v6] & 0xFFFFFFFFFFFFFFF8;
        v9[1] = *(_QWORD *)v12;
        *(_QWORD *)v12 = v9;
        *v9 = v12 | 6;
        v13 = (unint64_t *)v9[1];
        if (v13)
          *v13 = *v13 & 7 | (unint64_t)&v3[v6 + 8];
      }
      v6 += 24;
    }
    while (v8 != v6);
    do
    {
      v14 = *((_QWORD *)v7 - 1);
      if (v14 != -8192 && v14 != -4096 && v14 != 0)
      {
        v16 = *((_QWORD *)v7 - 3) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v16 = *((_QWORD *)v7 - 2);
        v17 = (unint64_t *)*((_QWORD *)v7 - 2);
        if (v17)
        {
          *v17 = *v17 & 7 | v16;
        }
        else
        {
          v18 = *((_QWORD *)v7 - 1);
          v19 = ***(int32x2_t ****)v18;
          v20 = (unint64_t)v19[303];
          if (v20 <= v16)
          {
            v21 = v19[305].u32[0];
            if (v20 + 16 * v21 > v16)
            {
              v22 = v21 - 1;
              LODWORD(v23) = v22 & ((v18 >> 4) ^ (v18 >> 9));
              v24 = (uint64_t *)(v20 + 16 * v23);
              v25 = *v24;
              if (v18 == *v24)
              {
LABEL_27:
                *v24 = -8192;
                v19[304] = vadd_s32(v19[304], (int32x2_t)0x1FFFFFFFFLL);
                v18 = *((_QWORD *)v7 - 1);
              }
              else
              {
                v26 = 1;
                while (v25 != -4096)
                {
                  v27 = v23 + v26++;
                  v23 = v27 & v22;
                  v25 = *(_QWORD *)(v20 + 16 * v23);
                  if (v18 == v25)
                  {
                    v24 = (uint64_t *)(v20 + 16 * v23);
                    goto LABEL_27;
                  }
                }
              }
              *(_BYTE *)(v18 + 17) &= ~1u;
            }
          }
        }
      }
      v7 -= 24;
    }
    while (v7 != v4);
    v4 = *(char **)a1;
  }
  v28 = v29;
  if (v4 != (char *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v28;
}

BOOL sub_1C4EE4EEC(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 24);
  return *(_BYTE *)(v2 + 16) != 25 && v2 != *a1;
}

char **sub_1C4EE4F14(char **a1)
{
  char *v2;
  int v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  int32x2_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v4 = &v2[24 * v3];
    do
    {
      v5 = *((_QWORD *)v4 - 1);
      if (v5 && v5 != -8192 && v5 != -4096)
      {
        v6 = *((_QWORD *)v4 - 3) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v6 = *((_QWORD *)v4 - 2);
        v7 = (unint64_t *)*((_QWORD *)v4 - 2);
        if (v7)
        {
          *v7 = *v7 & 7 | v6;
        }
        else
        {
          v8 = *((_QWORD *)v4 - 1);
          v9 = ***(int32x2_t ****)v8;
          v10 = (unint64_t)v9[303];
          if (v10 <= v6)
          {
            v11 = v9[305].u32[0];
            if (v10 + 16 * v11 > v6)
            {
              v12 = v11 - 1;
              LODWORD(v13) = v12 & ((v8 >> 4) ^ (v8 >> 9));
              v14 = (uint64_t *)(v10 + 16 * v13);
              v15 = *v14;
              if (v8 == *v14)
              {
LABEL_14:
                *v14 = -8192;
                v9[304] = vadd_s32(v9[304], (int32x2_t)0x1FFFFFFFFLL);
                v8 = *((_QWORD *)v4 - 1);
              }
              else
              {
                v16 = 1;
                while (v15 != -4096)
                {
                  v17 = v13 + v16++;
                  v13 = v17 & v12;
                  v15 = *(_QWORD *)(v10 + 16 * v13);
                  if (v8 == v15)
                  {
                    v14 = (uint64_t *)(v10 + 16 * v13);
                    goto LABEL_14;
                  }
                }
              }
              *(_BYTE *)(v8 + 17) &= ~1u;
            }
          }
        }
      }
      v4 -= 24;
    }
    while (v4 != v2);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

_QWORD *sub_1C4EE5050(unsigned int *a1, unint64_t a2)
{
  _QWORD *result;
  unsigned int v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t *v10;

  result = (_QWORD *)sub_1C4EE497C(a1, a2, 1);
  v4 = a1[2];
  v5 = (unint64_t *)(*(_QWORD *)a1 + 24 * v4);
  *v5 = 4;
  v5[1] = 0;
  v6 = (unint64_t)(v5 + 1);
  v7 = result[2];
  v5[2] = v7;
  if (v7 != -8192 && v7 != -4096 && v7 != 0)
  {
    v9 = *result & 0xFFFFFFFFFFFFFFF8;
    v5[1] = *(_QWORD *)v9;
    *(_QWORD *)v9 = v5;
    *v5 = v9 | 4;
    v10 = (uint64_t *)v5[1];
    if (v10)
      *v10 = *v10 & 7 | v6;
  }
  a1[2] = v4 + 1;
  return result;
}

uint64_t *sub_1C4EE50EC(uint64_t *result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[6];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    sub_1C61A60EC((uint64_t)&v11, (uint64_t)result, a3, a4);
    v9 = v11;
    *v11 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *v6 = v9;
    v10 = *(_QWORD *)*v4;
    if (v10)
    {
      *v4 = v10;
      v9 = *v6;
    }
    result = sub_1C4768E74((uint64_t *)v4[1], v9);
    ++v4[2];
  }
  return result;
}

uint64_t sub_1C4EE51A0(uint64_t **a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        return 0;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *v6 = v9;
    v10 = (uint64_t *)**a1;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    else
    {
      v11 = v9;
    }
    sub_1C4768E74(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return 1;
  }
}

uint64_t sub_1C4EE5260(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_5;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_5;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4EE530C(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4EE5368((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4EE5410(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_1C4EE5368(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_17:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_17;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4EE5410(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  uint64_t v8;
  _QWORD *v9;

  v4 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v5 = 4;
  else
    v5 = a1[4];
  if (4 * v4 + 4 >= 3 * v5)
  {
    v5 *= 2;
  }
  else if (v5 + ~v4 - a1[1] > v5 >> 3)
  {
    goto LABEL_5;
  }
  v8 = (uint64_t)a1;
  sub_1C4EE54CC((uint64_t)a1, v5);
  v9 = 0;
  sub_1C4EE5368(v8, a3, &v9);
  a1 = (_DWORD *)v8;
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C4EE54CC(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C61A61F8(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C61A61F8(a1, v14, v9);
}

BOOL sub_1C4EE5644(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 32);
  if (v1 != v2)
    *(_QWORD *)(a1 + 8) = v1 - 8;
  return v1 != v2;
}

BOOL sub_1C4EE5668(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 40);
  if (v1 != v2)
    *(_QWORD *)(a1 + 16) = v1 + 8;
  return v1 != v2;
}

uint64_t sub_1C4EE568C(unsigned int *a1, uint64_t a2, _BYTE *a3, _BYTE *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v10;
  unint64_t v11;
  _BYTE *v13;
  unint64_t v14;
  unsigned int v15;
  _OWORD *v16;
  _BYTE *__src;
  _OWORD *v18;

  v5 = *(_QWORD *)a1;
  v6 = (a2 - *(_QWORD *)a1) >> 4;
  v7 = a1[2];
  if (*(_QWORD *)a1 + 16 * v7 == a2)
  {
    sub_1C612E234(a1, a3, a4);
    return *(_QWORD *)a1 + 16 * v6;
  }
  v18 = a3;
  v10 = a4 - a3;
  v11 = (a4 - a3) >> 4;
  if (v7 + v11 > a1[3])
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v7 + v11, 16);
    v5 = *(_QWORD *)a1;
    v7 = a1[2];
  }
  v13 = (_BYTE *)(v5 + 16 * v7);
  __src = (_BYTE *)(v5 + 16 * v6);
  v14 = (v13 - __src) >> 4;
  if (v14 < v11)
  {
    v15 = v7 + (v10 >> 4);
    a1[2] = v15;
    if (v6 != v7)
    {
      v16 = (_OWORD *)(v5 + 16 * v6);
      memcpy((void *)(v5 + 16 * v15 - 16 * v14), __src, v13 - __src);
      do
      {
        *v16++ = *v18++;
        --v14;
      }
      while (v14);
    }
    if (v18 != (_OWORD *)a4)
      memcpy(v13, v18, a4 - (_BYTE *)v18);
    return (uint64_t)__src;
  }
  sub_1C6132E18(a1, &v13[-16 * v11], (char *)(v5 + 16 * v7));
  if (&v13[-16 * v11] != __src)
    memmove(&__src[16 * v11], __src, &v13[-16 * v11] - __src);
  if (v18 == (_OWORD *)a4)
    return (uint64_t)__src;
  memmove(__src, v18, v10);
  return (uint64_t)__src;
}

uint64_t sub_1C4EE5810(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 120 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 120 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void sub_1C4EE58C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  void *v13;
  void *v14;
  unsigned int *v15;

  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(a1 + 8);
    v9 = (_QWORD *)(a1 + 488);
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if (!v7)
      goto LABEL_17;
    v8 = *(_QWORD **)(a1 + 8);
    v9 = &v8[15 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 15;
  }
  while (v8 != v9);
LABEL_17:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v15 = 0;
      sub_1C4EE5810(a1, v10, &v15);
      v11 = v15;
      v12 = v15;
      *(_QWORD *)v15 = *(_QWORD *)a2;
      sub_1C4EE5A00(v12 + 2, (unsigned int *)(a2 + 8));
      sub_1C4EE5A00(v11 + 16, (unsigned int *)(a2 + 64));
      *(_DWORD *)a1 += 2;
      v13 = *(void **)(a2 + 88);
      if ((void *)(a2 + 104) != v13)
        free(v13);
      if ((*(_BYTE *)(a2 + 64) & 1) == 0)
        MEMORY[0x1CAA32FB4](*(_QWORD *)(a2 + 72), 8);
      v14 = *(void **)(a2 + 32);
      if ((void *)(a2 + 48) != v14)
        free(v14);
      if ((*(_BYTE *)(a2 + 8) & 1) == 0)
        MEMORY[0x1CAA32FB4](*(_QWORD *)(a2 + 16), 8);
    }
    a2 += 120;
  }
}

unsigned int *sub_1C4EE5A00(unsigned int *a1, unsigned int *a2)
{
  int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int *v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  void *v14;
  unsigned int v15;
  int *v16;
  uint64_t v17;
  uint64_t v19;
  __int128 v20;

  *(_QWORD *)a1 = 1;
  *(int64x2_t *)(a1 + 2) = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v4 = (int *)(a1 + 2);
  v5 = *a2;
  *a2 &= 1u;
  v6 = a1[1];
  *a1 = v5 & 0xFFFFFFFE | *a1 & 1;
  a1[1] = a2[1];
  a2[1] = v6;
  v7 = *a1;
  v8 = *a2;
  if ((*a1 & 1) == 0)
  {
    v9 = (int *)a1;
    v10 = a2;
    if ((v8 & 1) == 0)
    {
      v19 = *((_QWORD *)a1 + 1);
      *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v19;
      LODWORD(v19) = a1[4];
      a1[4] = a2[4];
      a2[4] = v19;
      goto LABEL_5;
    }
LABEL_17:
    v20 = *(_OWORD *)(v9 + 2);
    *v9 = v7 | 1;
    *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
    *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
    *v10 &= ~1u;
    *(_OWORD *)(v10 + 2) = v20;
    goto LABEL_5;
  }
  v7 = *a2;
  v9 = (int *)a2;
  v10 = a1;
  if ((v8 & 1) == 0)
    goto LABEL_17;
  v11 = 0;
  v12 = (int *)(a2 + 2);
  do
  {
    v13 = *(_QWORD *)&v4[v11];
    *(_QWORD *)&v4[v11] = *(_QWORD *)&v12[v11];
    *(_QWORD *)&v12[v11] = v13;
    v11 += 2;
  }
  while (v11 != 4);
LABEL_5:
  v14 = a1 + 10;
  *((_QWORD *)a1 + 3) = a1 + 10;
  *((_QWORD *)a1 + 4) = 0x200000000;
  v15 = a2[8];
  if (v15 && a1 != a2)
  {
    v16 = (int *)*((_QWORD *)a2 + 3);
    if (v16 != (int *)(a2 + 10))
    {
      *((_QWORD *)a1 + 3) = v16;
      a1[8] = v15;
      a1[9] = a2[9];
      *((_QWORD *)a2 + 3) = a2 + 10;
      a2[9] = 0;
      goto LABEL_12;
    }
    if (v15 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 6), (uint64_t)(a1 + 10), a2[8], 8);
      v17 = a2[8];
      if (!(_DWORD)v17)
        goto LABEL_11;
      v16 = (int *)*((_QWORD *)a2 + 3);
      v14 = (void *)*((_QWORD *)a1 + 3);
    }
    else
    {
      v17 = a2[8];
    }
    memcpy(v14, v16, 8 * v17);
LABEL_11:
    a1[8] = v15;
LABEL_12:
    a2[8] = 0;
  }
  return a1;
}

uint64_t sub_1C4EE5BB0(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 2;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_17:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_17;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4EE5C58(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _QWORD *v20;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 2;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1C4EE5DCC(a1, 2 * v8);
    v11 = a1 + 8;
    v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v12 = 2;
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      v11 = *(_QWORD *)(a1 + 8);
    }
    v9 = *(_DWORD *)a1 & 1;
    v13 = v12 - 1;
    v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (_QWORD *)(v11 + 8 * v14);
    v15 = *a4;
    if (*a3 != *a4)
    {
      v16 = 0;
      v17 = 1;
      while (v15 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v15 == -8192;
        if (v18)
          v16 = a4;
        v19 = v14 + v17++;
        v14 = v19 & v13;
        a4 = (_QWORD *)(v11 + 8 * v14);
        v15 = *a4;
        if (*a3 == *a4)
          goto LABEL_7;
      }
      if (v16)
        a4 = v16;
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1C4EE5DCC(a1, v8);
      v20 = 0;
      sub_1C4EE5BB0(a1, a3, &v20);
      a4 = v20;
      v6 = *(_DWORD *)a1;
    }
    v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

int *sub_1C4EE5DCC(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  if (a2 >= 3)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 2)
    {
      v15 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v15;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4EE5F40((int *)a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = 0;
  v10 = v16;
  do
  {
    v11 = v8;
    v12 = *(_QWORD *)(a1 + 8 + 8 * v9);
    if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v10++ = v12;
    v8 = 1;
    v9 = 1;
  }
  while ((v11 & 1) == 0);
  if (a2 > 2)
  {
    *(_DWORD *)a1 &= ~1u;
    v13 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v13;
  }
  return sub_1C4EE5F40((int *)a1, v16, v10);
}

int *sub_1C4EE5F40(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int *v9;
  int v10;
  unsigned int v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 6;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = (_QWORD *)*((_QWORD *)result + 1);
    v6 = &v5[v4];
  }
  do
    *v5++ = -4096;
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v8 = 2;
        v9 = result + 2;
      }
      else
      {
        v9 = (int *)*((_QWORD *)result + 1);
        v8 = result[4];
      }
      v10 = v8 - 1;
      v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v12 = &v9[2 * v11];
      v13 = *(_QWORD *)v12;
      if (v7 != *(_QWORD *)v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = &v9[2 * (v17 & v10)];
          v13 = *(_QWORD *)v12;
          if (v7 == *(_QWORD *)v12)
            goto LABEL_14;
        }
        if (v14)
          v12 = v14;
      }
LABEL_14:
      *(_QWORD *)v12 = v7;
      *result += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t *sub_1C4EE6040(_DWORD *a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = sub_1C4EE6120((uint64_t)a1, *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_12;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3)
  {
LABEL_12:
    sub_1C4EE61CC((uint64_t)a1, v7);
    v8 = 0;
    sub_1C4EE6120((uint64_t)a1, *a2, &v8);
    result = v8;
  }
  *a1 += 2;
  if (*result != -4096)
    --a1[1];
  *result = *a2;
  result[1] = 0;
  return result;
}

uint64_t sub_1C4EE6120(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_8;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1C4EE61CC(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C61A62E8(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C61A62E8(a1, v14, v9);
}

uint64_t sub_1C4EE6344(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C61A65C8(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 40; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C61A65C8(a1, v14, v8);
}

void llvm::initializeModuleDebugInfoLegacyPrinterPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82E550);
  if (v1 != -1)
  {
    v4[0] = sub_1C4EE650C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82E550, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4EE650C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Decodes module-level debug info";
  *(_QWORD *)(v2 + 8) = 31;
  *(_QWORD *)(v2 + 16) = "module-debuginfo";
  *(_QWORD *)(v2 + 24) = 16;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFBF6;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4EE73CC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C4EE65A0(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8EFBF6;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E81399D8;
  *(_QWORD *)(a1 + 32) = a1 + 48;
  *(_QWORD *)(a1 + 40) = 0x800000000;
  *(_QWORD *)(a1 + 112) = a1 + 128;
  *(_QWORD *)(a1 + 120) = 0x800000000;
  *(_QWORD *)(a1 + 192) = a1 + 208;
  *(_QWORD *)(a1 + 200) = 0x800000000;
  *(_QWORD *)(a1 + 272) = a1 + 288;
  *(_QWORD *)(a1 + 280) = 0x800000000;
  *(_QWORD *)(a1 + 352) = a1 + 368;
  *(_QWORD *)(a1 + 360) = 0x800000000;
  *(_QWORD *)(a1 + 432) = a1 + 464;
  *(_QWORD *)(a1 + 440) = a1 + 464;
  *(_QWORD *)(a1 + 448) = 32;
  *(_DWORD *)(a1 + 456) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED82E550);
  if (v3 != -1)
  {
    v7[0] = sub_1C4EE650C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82E550, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

double llvm::ModuleDebugInfoPrinterPass::ModuleDebugInfoPrinterPass(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x800000000;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)(a1 + 88) = 0x800000000;
  *(_QWORD *)(a1 + 160) = a1 + 176;
  *(_QWORD *)(a1 + 168) = 0x800000000;
  *(_QWORD *)(a1 + 240) = a1 + 256;
  *(_QWORD *)(a1 + 248) = 0x800000000;
  *(_QWORD *)(a1 + 320) = a1 + 336;
  *(_QWORD *)(a1 + 328) = 0x800000000;
  *(_QWORD *)(a1 + 400) = a1 + 432;
  *(_QWORD *)(a1 + 408) = a1 + 432;
  *(_QWORD *)&result = 32;
  *(_QWORD *)(a1 + 416) = 32;
  *(_DWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 688) = a2;
  return result;
}

llvm::raw_ostream *sub_1C4EE6728(llvm::raw_ostream *this, unsigned __int8 ***a2)
{
  llvm::raw_ostream *v2;
  uint64_t v3;
  unsigned __int8 **v4;
  uint64_t i;
  unsigned __int8 *v6;
  void *v7;
  const char *v8;
  size_t v9;
  const char *v10;
  size_t v11;
  void *v12;
  llvm::raw_ostream *v13;
  const char *v14;
  size_t v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  const char *v24;
  size_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  const char *v30;
  size_t v31;
  size_t v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned __int8 **v35;
  uint64_t j;
  unsigned __int8 *v37;
  uint64_t v38;
  llvm::raw_ostream *v39;
  uint64_t v40;
  size_t *v41;
  const void *v42;
  size_t v43;
  size_t v44;
  void *v45;
  int v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  const char *v51;
  size_t v52;
  size_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  const char *v58;
  size_t v59;
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  llvm::raw_ostream *v63;
  uint64_t v64;
  unint64_t *v65;
  const void *v66;
  size_t v67;
  unint64_t v68;
  _WORD *v69;
  _BYTE *v70;
  uint64_t v71;
  unsigned __int8 **v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  llvm::raw_ostream *v76;
  uint64_t v77;
  size_t *v78;
  const void *v79;
  size_t v80;
  size_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  const char *v86;
  size_t v87;
  size_t v88;
  size_t v89;
  const char *v90;
  uint64_t v91;
  _QWORD *v92;
  size_t v93;
  uint64_t v94;
  uint64_t v95;
  llvm::raw_ostream *v96;
  uint64_t v97;
  unint64_t *v98;
  const void *v99;
  size_t v100;
  unint64_t v101;
  _WORD *v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned __int8 **v106;
  unsigned __int8 *v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  uint64_t v111;
  size_t *v112;
  const void *v113;
  size_t v114;
  size_t v115;
  void *v116;
  int v117;
  unsigned __int8 *v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  const char *v122;
  size_t v123;
  size_t v124;
  unsigned __int8 *v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  const char *v129;
  size_t v130;
  size_t v131;
  _BYTE *v132;
  const char *v133;
  size_t v134;
  const char *v135;
  size_t v136;
  void *v137;
  llvm::raw_ostream *v138;
  const char *v139;
  size_t v140;
  uint64_t v141;
  llvm::raw_ostream *v142;
  _BYTE *v143;
  uint64_t v144;
  void *v145;
  llvm::raw_ostream *v146;
  unint64_t *v147;
  const void *v148;
  size_t v149;
  unint64_t v150;
  _BYTE *v151;
  _BYTE *v152;
  uint64_t v153;
  llvm::raw_ostream *v154;
  _BYTE *v155;

  v2 = this;
  v3 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v3)
  {
    v4 = *a2;
    for (i = 8 * v3; i; i -= 8)
    {
      v6 = *v4;
      v7 = (void *)*((_QWORD *)v2 + 4);
      if (*((_QWORD *)v2 + 3) - (_QWORD)v7 > 0xDuLL)
      {
        qmemcpy(v7, "Compile unit: ", 14);
        *((_QWORD *)v2 + 4) += 14;
      }
      else
      {
        llvm::raw_ostream::write(v2, "Compile unit: ", 0xEuLL);
      }
      v8 = llvm::dwarf::LanguageString((llvm::dwarf *)*((unsigned int *)v6 + 6));
      if (v9)
      {
        v10 = v8;
        v11 = v9;
        v12 = (void *)*((_QWORD *)v2 + 4);
        if (v9 <= *((_QWORD *)v2 + 3) - (_QWORD)v12)
        {
          memcpy(v12, v10, v9);
          *((_QWORD *)v2 + 4) += v11;
          goto LABEL_14;
        }
        v13 = v2;
        v14 = v10;
        v15 = v11;
      }
      else
      {
        v16 = *((_QWORD *)v2 + 4);
        if ((unint64_t)(*((_QWORD *)v2 + 3) - v16) > 0x10)
        {
          *(_BYTE *)(v16 + 16) = 40;
          *(_OWORD *)v16 = *(_OWORD *)"unknown-language(";
          *((_QWORD *)v2 + 4) += 17;
          v17 = v2;
        }
        else
        {
          v17 = llvm::raw_ostream::write(v2, "unknown-language(", 0x11uLL);
        }
        sub_1C5E21910(v17, *((unsigned int *)v6 + 6), 0, 0, 0);
        v18 = (_BYTE *)*((_QWORD *)v17 + 4);
        if (*((_BYTE **)v17 + 3) != v18)
        {
          *v18 = 41;
          ++*((_QWORD *)v17 + 4);
          goto LABEL_14;
        }
        v13 = v17;
        v14 = ")";
        v15 = 1;
      }
      llvm::raw_ostream::write(v13, v14, v15);
LABEL_14:
      v19 = *v6;
      v20 = v6;
      if (v19 == 15 || (v21 = *((unsigned int *)v6 + 2), (v20 = *(unsigned __int8 **)&v6[-8 * v21]) != 0))
      {
        v22 = *(_QWORD *)&v20[-8 * *((unsigned int *)v20 + 2)];
        if (v22)
        {
          v23 = *(_QWORD **)(v22 + 8);
          v26 = *v23;
          v24 = (const char *)(v23 + 3);
          v25 = v26;
        }
        else
        {
          v25 = 0;
          v24 = 0;
        }
        if (v19 == 15)
          goto LABEL_23;
        v27 = -(uint64_t)*((unsigned int *)v6 + 2);
      }
      else
      {
        v25 = 0;
        v27 = -v21;
        v24 = "";
      }
      v6 = *(unsigned __int8 **)&v6[8 * v27];
      if (!v6)
      {
        v31 = 0;
        v30 = "";
        goto LABEL_27;
      }
LABEL_23:
      v28 = *(_QWORD *)&v6[-8 * *((unsigned int *)v6 + 2) + 8];
      if (v28)
      {
        v29 = *(_QWORD **)(v28 + 8);
        v32 = *v29;
        v30 = (const char *)(v29 + 3);
        v31 = v32;
      }
      else
      {
        v31 = 0;
        v30 = 0;
      }
LABEL_27:
      this = sub_1C4EE75F4(v2, v24, v25, v30, v31, 0);
      v33 = (_BYTE *)*((_QWORD *)v2 + 4);
      if ((unint64_t)v33 >= *((_QWORD *)v2 + 3))
      {
        this = llvm::raw_ostream::write(v2, 10);
      }
      else
      {
        *((_QWORD *)v2 + 4) = v33 + 1;
        *v33 = 10;
      }
      ++v4;
    }
  }
  v34 = *((unsigned int *)a2 + 22);
  if ((_DWORD)v34)
  {
    v35 = a2[10];
    for (j = 8 * v34; j; j -= 8)
    {
      v37 = *v35;
      v38 = *((_QWORD *)v2 + 4);
      if ((unint64_t)(*((_QWORD *)v2 + 3) - v38) > 0xB)
      {
        *(_DWORD *)(v38 + 8) = 540700001;
        *(_QWORD *)v38 = *(_QWORD *)"Subprogram: ";
        *((_QWORD *)v2 + 4) += 12;
        v39 = v2;
      }
      else
      {
        v39 = llvm::raw_ostream::write(v2, "Subprogram: ", 0xCuLL);
      }
      v40 = *(_QWORD *)&v37[-8 * *((unsigned int *)v37 + 2) + 16];
      if (v40)
      {
        v41 = *(size_t **)(v40 + 8);
        v44 = *v41;
        v42 = v41 + 3;
        v43 = v44;
        v45 = (void *)*((_QWORD *)v39 + 4);
        if (v44 <= *((_QWORD *)v39 + 3) - (_QWORD)v45)
        {
          if (v43)
          {
            memcpy(v45, v42, v43);
            *((_QWORD *)v39 + 4) += v43;
          }
        }
        else
        {
          llvm::raw_ostream::write(v39, (const char *)v42, v43);
        }
      }
      v46 = *v37;
      v47 = v37;
      if (v46 == 15 || (v48 = *((unsigned int *)v37 + 2), (v47 = *(unsigned __int8 **)&v37[-8 * v48]) != 0))
      {
        v49 = *(_QWORD *)&v47[-8 * *((unsigned int *)v47 + 2)];
        if (v49)
        {
          v50 = *(_QWORD **)(v49 + 8);
          v53 = *v50;
          v51 = (const char *)(v50 + 3);
          v52 = v53;
        }
        else
        {
          v52 = 0;
          v51 = 0;
        }
        if (v46 == 15)
        {
          v54 = v37;
LABEL_54:
          v56 = *(_QWORD *)&v54[-8 * *((unsigned int *)v54 + 2) + 8];
          if (v56)
          {
            v57 = *(_QWORD **)(v56 + 8);
            v60 = *v57;
            v58 = (const char *)(v57 + 3);
            v59 = v60;
          }
          else
          {
            v59 = 0;
            v58 = 0;
          }
          goto LABEL_58;
        }
        v55 = -(uint64_t)*((unsigned int *)v37 + 2);
      }
      else
      {
        v52 = 0;
        v55 = -v48;
        v51 = "";
      }
      v54 = *(unsigned __int8 **)&v37[8 * v55];
      if (v54)
        goto LABEL_54;
      v59 = 0;
      v58 = "";
LABEL_58:
      this = sub_1C4EE75F4(v2, v51, v52, v58, v59, *((_DWORD *)v37 + 6));
      v61 = *(_QWORD *)&v37[-8 * *((unsigned int *)v37 + 2) + 24];
      if (v61 && **(_QWORD **)(v61 + 8))
      {
        v62 = *((_QWORD *)v2 + 4);
        if ((unint64_t)(*((_QWORD *)v2 + 3) - v62) > 2)
        {
          *(_BYTE *)(v62 + 2) = 39;
          *(_WORD *)v62 = 10272;
          *((_QWORD *)v2 + 4) += 3;
          v63 = v2;
        }
        else
        {
          this = llvm::raw_ostream::write(v2, " ('", 3uLL);
          v63 = this;
        }
        v64 = *(_QWORD *)&v37[-8 * *((unsigned int *)v37 + 2) + 24];
        if (v64)
        {
          v65 = *(unint64_t **)(v64 + 8);
          v68 = *v65;
          v66 = v65 + 3;
          v67 = v68;
          this = (llvm::raw_ostream *)*((_QWORD *)v63 + 4);
          if (v68 <= *((_QWORD *)v63 + 3) - (_QWORD)this)
          {
            if (v67)
            {
              this = (llvm::raw_ostream *)memcpy(this, v66, v67);
              *((_QWORD *)v63 + 4) += v67;
            }
          }
          else
          {
            this = llvm::raw_ostream::write(v63, (const char *)v66, v67);
            v63 = this;
          }
        }
        v69 = (_WORD *)*((_QWORD *)v63 + 4);
        if (*((_QWORD *)v63 + 3) - (_QWORD)v69 > 1uLL)
        {
          *v69 = 10535;
          *((_QWORD *)v63 + 4) += 2;
        }
        else
        {
          this = llvm::raw_ostream::write(v63, "')", 2uLL);
        }
      }
      v70 = (_BYTE *)*((_QWORD *)v2 + 4);
      if ((unint64_t)v70 >= *((_QWORD *)v2 + 3))
      {
        this = llvm::raw_ostream::write(v2, 10);
      }
      else
      {
        *((_QWORD *)v2 + 4) = v70 + 1;
        *v70 = 10;
      }
      ++v35;
    }
  }
  v71 = *((unsigned int *)a2 + 42);
  if ((_DWORD)v71)
  {
    v72 = a2[20];
    v73 = 8 * v71;
    do
    {
      v74 = *(_QWORD *)&(*v72)[-8 * *((unsigned int *)*v72 + 2)];
      v75 = *((_QWORD *)v2 + 4);
      if ((unint64_t)(*((_QWORD *)v2 + 3) - v75) > 0x10)
      {
        *(_BYTE *)(v75 + 16) = 32;
        *(_OWORD *)v75 = *(_OWORD *)"Global variable: ";
        *((_QWORD *)v2 + 4) += 17;
        v76 = v2;
      }
      else
      {
        v76 = llvm::raw_ostream::write(v2, "Global variable: ", 0x11uLL);
      }
      v77 = *(_QWORD *)(v74 - 8 * *(unsigned int *)(v74 + 8) + 8);
      if (v77)
      {
        v78 = *(size_t **)(v77 + 8);
        v81 = *v78;
        v79 = v78 + 3;
        v80 = v81;
        v82 = (void *)*((_QWORD *)v76 + 4);
        if (v81 <= *((_QWORD *)v76 + 3) - (_QWORD)v82)
        {
          if (v80)
          {
            memcpy(v82, v79, v80);
            *((_QWORD *)v76 + 4) += v80;
          }
        }
        else
        {
          llvm::raw_ostream::write(v76, (const char *)v79, v80);
        }
      }
      v83 = *(_QWORD *)(v74 - 8 * *(unsigned int *)(v74 + 8) + 16);
      if (v83)
      {
        v84 = *(_QWORD *)(v83 - 8 * *(unsigned int *)(v83 + 8));
        if (v84)
        {
          v85 = *(_QWORD **)(v84 + 8);
          v88 = *v85;
          v86 = (const char *)(v85 + 3);
          v87 = v88;
        }
        else
        {
          v86 = 0;
          v87 = 0;
        }
        v91 = *(_QWORD *)(v83 - 8 * *(unsigned int *)(v83 + 8) + 8);
        if (v91)
        {
          v92 = *(_QWORD **)(v91 + 8);
          v93 = *v92;
          v90 = (const char *)(v92 + 3);
          v89 = v93;
        }
        else
        {
          v90 = 0;
          v89 = 0;
        }
      }
      else
      {
        v87 = 0;
        v89 = 0;
        v86 = "";
        v90 = "";
      }
      this = sub_1C4EE75F4(v2, v86, v87, v90, v89, *(_DWORD *)(v74 + 24));
      v94 = *(_QWORD *)(v74 - 8 * *(unsigned int *)(v74 + 8) + 40);
      if (v94 && **(_QWORD **)(v94 + 8))
      {
        v95 = *((_QWORD *)v2 + 4);
        if ((unint64_t)(*((_QWORD *)v2 + 3) - v95) > 2)
        {
          *(_BYTE *)(v95 + 2) = 39;
          *(_WORD *)v95 = 10272;
          *((_QWORD *)v2 + 4) += 3;
          v96 = v2;
        }
        else
        {
          this = llvm::raw_ostream::write(v2, " ('", 3uLL);
          v96 = this;
        }
        v97 = *(_QWORD *)(v74 - 8 * *(unsigned int *)(v74 + 8) + 40);
        if (v97)
        {
          v98 = *(unint64_t **)(v97 + 8);
          v101 = *v98;
          v99 = v98 + 3;
          v100 = v101;
          this = (llvm::raw_ostream *)*((_QWORD *)v96 + 4);
          if (v101 <= *((_QWORD *)v96 + 3) - (_QWORD)this)
          {
            if (v100)
            {
              this = (llvm::raw_ostream *)memcpy(this, v99, v100);
              *((_QWORD *)v96 + 4) += v100;
            }
          }
          else
          {
            this = llvm::raw_ostream::write(v96, (const char *)v99, v100);
            v96 = this;
          }
        }
        v102 = (_WORD *)*((_QWORD *)v96 + 4);
        if (*((_QWORD *)v96 + 3) - (_QWORD)v102 > 1uLL)
        {
          *v102 = 10535;
          *((_QWORD *)v96 + 4) += 2;
        }
        else
        {
          this = llvm::raw_ostream::write(v96, "')", 2uLL);
        }
      }
      v103 = (_BYTE *)*((_QWORD *)v2 + 4);
      if ((unint64_t)v103 >= *((_QWORD *)v2 + 3))
      {
        this = llvm::raw_ostream::write(v2, 10);
      }
      else
      {
        *((_QWORD *)v2 + 4) = v103 + 1;
        *v103 = 10;
      }
      ++v72;
      v73 -= 8;
    }
    while (v73);
  }
  v104 = *((unsigned int *)a2 + 62);
  if ((_DWORD)v104)
  {
    v105 = 8 * v104;
    v106 = a2[30];
    do
    {
      v107 = *v106;
      v108 = *((_QWORD *)v2 + 4);
      if ((unint64_t)(*((_QWORD *)v2 + 3) - v108) > 4)
      {
        *(_BYTE *)(v108 + 4) = 58;
        *(_DWORD *)v108 = 1701869908;
        *((_QWORD *)v2 + 4) += 5;
      }
      else
      {
        llvm::raw_ostream::write(v2, "Type:", 5uLL);
      }
      v109 = *(_QWORD *)&v107[-8 * *((unsigned int *)v107 + 2) + 16];
      if (v109 && **(_QWORD **)(v109 + 8))
      {
        v110 = (_BYTE *)*((_QWORD *)v2 + 4);
        if ((unint64_t)v110 >= *((_QWORD *)v2 + 3))
        {
          llvm::raw_ostream::write(v2, 32);
        }
        else
        {
          *((_QWORD *)v2 + 4) = v110 + 1;
          *v110 = 32;
        }
        v111 = *(_QWORD *)&v107[-8 * *((unsigned int *)v107 + 2) + 16];
        if (v111)
        {
          v112 = *(size_t **)(v111 + 8);
          v115 = *v112;
          v113 = v112 + 3;
          v114 = v115;
          v116 = (void *)*((_QWORD *)v2 + 4);
          if (v115 <= *((_QWORD *)v2 + 3) - (_QWORD)v116)
          {
            if (v114)
            {
              memcpy(v116, v113, v114);
              *((_QWORD *)v2 + 4) += v114;
            }
          }
          else
          {
            llvm::raw_ostream::write(v2, (const char *)v113, v114);
          }
        }
      }
      v117 = *v107;
      v118 = v107;
      if (v117 == 15 || (v119 = *((unsigned int *)v107 + 2), (v118 = *(unsigned __int8 **)&v107[-8 * v119]) != 0))
      {
        v120 = *(_QWORD *)&v118[-8 * *((unsigned int *)v118 + 2)];
        if (v120)
        {
          v121 = *(_QWORD **)(v120 + 8);
          v124 = *v121;
          v122 = (const char *)(v121 + 3);
          v123 = v124;
        }
        else
        {
          v123 = 0;
          v122 = 0;
        }
        if (v117 == 15)
        {
          v125 = v107;
          goto LABEL_137;
        }
        v126 = -(uint64_t)*((unsigned int *)v107 + 2);
      }
      else
      {
        v123 = 0;
        v126 = -v119;
        v122 = "";
      }
      v125 = *(unsigned __int8 **)&v107[8 * v126];
      if (!v125)
      {
        v130 = 0;
        v129 = "";
        goto LABEL_141;
      }
LABEL_137:
      v127 = *(_QWORD *)&v125[-8 * *((unsigned int *)v125 + 2) + 8];
      if (v127)
      {
        v128 = *(_QWORD **)(v127 + 8);
        v131 = *v128;
        v129 = (const char *)(v128 + 3);
        v130 = v131;
      }
      else
      {
        v130 = 0;
        v129 = 0;
      }
LABEL_141:
      sub_1C4EE75F4(v2, v122, v123, v129, v130, *((_DWORD *)v107 + 6));
      if (*v107 == 11)
      {
        v152 = (_BYTE *)*((_QWORD *)v2 + 4);
        if (*((_BYTE **)v2 + 3) == v152)
        {
          llvm::raw_ostream::write(v2, " ", 1uLL);
        }
        else
        {
          *v152 = 32;
          ++*((_QWORD *)v2 + 4);
        }
        v133 = llvm::dwarf::AttributeEncodingString((llvm::dwarf *)*((unsigned int *)v107 + 13));
        if (!v134)
        {
          v153 = *((_QWORD *)v2 + 4);
          if ((unint64_t)(*((_QWORD *)v2 + 3) - v153) > 0x10)
          {
            *(_BYTE *)(v153 + 16) = 40;
            *(_OWORD *)v153 = *(_OWORD *)"unknown-encoding(";
            *((_QWORD *)v2 + 4) += 17;
            v154 = v2;
          }
          else
          {
            v154 = llvm::raw_ostream::write(v2, "unknown-encoding(", 0x11uLL);
          }
          this = sub_1C5E21910(v154, *((unsigned int *)v107 + 13), 0, 0, 0);
          v155 = (_BYTE *)*((_QWORD *)v154 + 4);
          if ((unint64_t)v155 >= *((_QWORD *)v154 + 3))
          {
            this = llvm::raw_ostream::write(v154, 41);
          }
          else
          {
            *((_QWORD *)v154 + 4) = v155 + 1;
            *v155 = 41;
          }
          goto LABEL_154;
        }
LABEL_146:
        v135 = v133;
        v136 = v134;
        v137 = (void *)*((_QWORD *)v2 + 4);
        if (v134 > *((_QWORD *)v2 + 3) - (_QWORD)v137)
        {
          v138 = v2;
          v139 = v135;
          v140 = v136;
LABEL_152:
          this = llvm::raw_ostream::write(v138, v139, v140);
          goto LABEL_154;
        }
        this = (llvm::raw_ostream *)memcpy(v137, v135, v134);
        *((_QWORD *)v2 + 4) += v136;
        goto LABEL_154;
      }
      v132 = (_BYTE *)*((_QWORD *)v2 + 4);
      if ((unint64_t)v132 >= *((_QWORD *)v2 + 3))
      {
        llvm::raw_ostream::write(v2, 32);
      }
      else
      {
        *((_QWORD *)v2 + 4) = v132 + 1;
        *v132 = 32;
      }
      v133 = llvm::dwarf::TagString((llvm::dwarf *)*((unsigned __int16 *)v107 + 1));
      if (v134)
        goto LABEL_146;
      v141 = *((_QWORD *)v2 + 4);
      if ((unint64_t)(*((_QWORD *)v2 + 3) - v141) > 0xB)
      {
        *(_DWORD *)(v141 + 8) = 677863796;
        *(_QWORD *)v141 = *(_QWORD *)"unknown-tag(";
        *((_QWORD *)v2 + 4) += 12;
        v142 = v2;
      }
      else
      {
        v142 = llvm::raw_ostream::write(v2, "unknown-tag(", 0xCuLL);
      }
      this = sub_1C5E21910(v142, *((unsigned __int16 *)v107 + 1), 0, 0, 0);
      v143 = (_BYTE *)*((_QWORD *)v142 + 4);
      if (*((_BYTE **)v142 + 3) == v143)
      {
        v138 = v142;
        v139 = ")";
        v140 = 1;
        goto LABEL_152;
      }
      *v143 = 41;
      ++*((_QWORD *)v142 + 4);
LABEL_154:
      if (*v107 == 13)
      {
        v144 = *(_QWORD *)&v107[-8 * *((unsigned int *)v107 + 2) + 56];
        if (v144)
        {
          v145 = (void *)*((_QWORD *)v2 + 4);
          if (*((_QWORD *)v2 + 3) - (_QWORD)v145 > 0xEuLL)
          {
            qmemcpy(v145, " (identifier: '", 15);
            this = (llvm::raw_ostream *)(*((_QWORD *)v2 + 4) + 15);
            *((_QWORD *)v2 + 4) = this;
            v146 = v2;
          }
          else
          {
            v146 = llvm::raw_ostream::write(v2, " (identifier: '", 0xFuLL);
            this = (llvm::raw_ostream *)*((_QWORD *)v146 + 4);
          }
          v147 = *(unint64_t **)(v144 + 8);
          v150 = *v147;
          v148 = v147 + 3;
          v149 = v150;
          if (v150 <= *((_QWORD *)v146 + 3) - (_QWORD)this)
          {
            if (v149)
            {
              memcpy(this, v148, v149);
              this = (llvm::raw_ostream *)(*((_QWORD *)v146 + 4) + v149);
              *((_QWORD *)v146 + 4) = this;
            }
          }
          else
          {
            v146 = llvm::raw_ostream::write(v146, (const char *)v148, v149);
            this = (llvm::raw_ostream *)*((_QWORD *)v146 + 4);
          }
          if (*((_QWORD *)v146 + 3) - (_QWORD)this > 1uLL)
          {
            *(_WORD *)this = 10535;
            *((_QWORD *)v146 + 4) += 2;
          }
          else
          {
            this = llvm::raw_ostream::write(v146, "')", 2uLL);
          }
        }
      }
      v151 = (_BYTE *)*((_QWORD *)v2 + 4);
      if ((unint64_t)v151 >= *((_QWORD *)v2 + 3))
      {
        this = llvm::raw_ostream::write(v2, 10);
      }
      else
      {
        *((_QWORD *)v2 + 4) = v151 + 1;
        *v151 = 10;
      }
      ++v106;
      v105 -= 8;
    }
    while (v105);
  }
  return this;
}

uint64_t sub_1C4EE73CC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4EE65A0(v0);
}

void sub_1C4EE73F4(llvm::Pass *a1)
{
  void *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  llvm::Pass *v7;
  llvm::Pass *v8;
  llvm::Pass *v9;
  llvm::Pass *v10;
  llvm::Pass *v11;
  llvm::Pass *v12;

  *(_QWORD *)a1 = &off_1E81399D8;
  v1 = (void *)*((_QWORD *)a1 + 55);
  if (v1 != *((void **)a1 + 54))
  {
    v7 = a1;
    free(v1);
    a1 = v7;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 44);
  if (v2 != (_QWORD *)((char *)a1 + 368))
  {
    v8 = a1;
    free(v2);
    a1 = v8;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 34);
  if (v3 != (_QWORD *)((char *)a1 + 288))
  {
    v9 = a1;
    free(v3);
    a1 = v9;
  }
  v4 = (_QWORD *)*((_QWORD *)a1 + 24);
  if (v4 != (_QWORD *)((char *)a1 + 208))
  {
    v10 = a1;
    free(v4);
    a1 = v10;
  }
  v5 = (_QWORD *)*((_QWORD *)a1 + 14);
  if (v5 != (_QWORD *)((char *)a1 + 128))
  {
    v11 = a1;
    free(v5);
    a1 = v11;
  }
  v6 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v6 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v12 = a1;
    free(v6);
    llvm::Pass::~Pass(v12);
  }
}

void sub_1C4EE74EC(llvm::Pass *this)
{
  void *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;

  *(_QWORD *)this = &off_1E81399D8;
  v2 = (void *)*((_QWORD *)this + 55);
  if (v2 != *((void **)this + 54))
    free(v2);
  v3 = (char *)*((_QWORD *)this + 44);
  if (v3 != (char *)this + 368)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 34);
  if (v4 != (char *)this + 288)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 24);
  if (v5 != (char *)this + 208)
    free(v5);
  v6 = (char *)*((_QWORD *)this + 14);
  if (v6 != (char *)this + 128)
    free(v6);
  v7 = (char *)*((_QWORD *)this + 4);
  if (v7 != (char *)this + 48)
    free(v7);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C4EE75BC(uint64_t a1, llvm::raw_ostream *this)
{
  return sub_1C4EE6728(this, (unsigned __int8 ***)(a1 + 32));
}

void sub_1C4EE75CC(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t sub_1C4EE75D8(uint64_t a1, const llvm::Module *a2)
{
  llvm::DebugInfoFinder::processModule((llvm::DebugInfoFinder *)(a1 + 32), a2);
  return 0;
}

llvm::raw_ostream *sub_1C4EE75F4(llvm::raw_ostream *this, const void *a2, size_t a3, const void *a4, size_t a5, unsigned int a6)
{
  llvm::raw_ostream *v11;
  uint64_t v12;
  void *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  void *v16;
  _BYTE *v17;

  if (!a3)
    return this;
  v11 = this;
  v12 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v12) > 5)
  {
    *(_WORD *)(v12 + 4) = 8301;
    *(_DWORD *)v12 = 1869768224;
    *((_QWORD *)this + 4) += 6;
    if (a5)
      goto LABEL_4;
  }
  else
  {
    llvm::raw_ostream::write(this, " from ", 6uLL);
    if (a5)
    {
LABEL_4:
      v13 = (void *)*((_QWORD *)v11 + 4);
      if (a5 <= *((_QWORD *)v11 + 3) - (_QWORD)v13)
      {
        memcpy(v13, a4, a5);
        v15 = (_BYTE *)(*((_QWORD *)v11 + 4) + a5);
        *((_QWORD *)v11 + 4) = v15;
        v14 = v11;
      }
      else
      {
        v14 = llvm::raw_ostream::write(v11, (const char *)a4, a5);
        v15 = (_BYTE *)*((_QWORD *)v14 + 4);
      }
      if (*((_BYTE **)v14 + 3) == v15)
      {
        llvm::raw_ostream::write(v14, "/", 1uLL);
      }
      else
      {
        *v15 = 47;
        ++*((_QWORD *)v14 + 4);
      }
    }
  }
  v16 = (void *)*((_QWORD *)v11 + 4);
  if (a3 <= *((_QWORD *)v11 + 3) - (_QWORD)v16)
  {
    this = (llvm::raw_ostream *)memcpy(v16, a2, a3);
    *((_QWORD *)v11 + 4) += a3;
    if (!a6)
      return this;
  }
  else
  {
    this = llvm::raw_ostream::write(v11, (const char *)a2, a3);
    if (!a6)
      return this;
  }
  v17 = (_BYTE *)*((_QWORD *)v11 + 4);
  if (*((_BYTE **)v11 + 3) == v17)
  {
    v11 = llvm::raw_ostream::write(v11, ":", 1uLL);
  }
  else
  {
    *v17 = 58;
    ++*((_QWORD *)v11 + 4);
  }
  return sub_1C5E21910(v11, a6, 0, 0, 0);
}

void llvm::buildModuleSummaryIndex(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t ModuleFlag;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  llvm::GlobalValue *v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t ***v25;
  uint64_t v26;
  uint64_t **v27;
  BOOL v28;
  int v29;
  _QWORD *v30;
  llvm::BasicBlock *v31;
  char *v32;
  llvm::GlobalValue *v33;
  uint64_t *v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t i;
  uint64_t ***v50;
  int v51;
  uint64_t *v52;
  int v53;
  uint64_t v55;
  _BOOL4 v56;
  uint64_t v57;
  llvm::Value *v58;
  llvm::GlobalValue *v59;
  uint64_t v60;
  uint64_t AliaseeObject;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  _QWORD *v67;
  _QWORD ***v68;
  _QWORD *v69;
  int v70;
  BOOL v71;
  unsigned int v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t PromotionCandidatesForInstruction;
  uint64_t v77;
  unint64_t *v78;
  unint64_t *v79;
  uint64_t v80;
  _DWORD *v81;
  unint64_t v82;
  unsigned int v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  size_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  size_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  unint64_t ProfileCount;
  char v106;
  char v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  int v122;
  llvm::GlobalValue **v123;
  llvm::GlobalValue *v124;
  unsigned int v125;
  BOOL v126;
  unsigned int v127;
  BOOL v128;
  unint64_t v129;
  char *v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  unsigned __int8 v137;
  unint64_t v138;
  char *v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int *v142;
  unint64_t BlockFreq;
  unint64_t v144;
  __int16 v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  _BOOL4 v149;
  int v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t v161;
  __int128 v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  _QWORD *v166;
  unint64_t v167;
  unsigned int v168;
  uint64_t v169;
  unint64_t *v170;
  unint64_t *v171;
  unint64_t *v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  _DWORD *v176;
  unsigned int v177;
  unint64_t v178;
  unsigned int v179;
  uint64_t v180;
  BOOL v181;
  int v182;
  __int16 v183;
  __int16 v184;
  int v185;
  uint64_t v186;
  __int16 v187;
  unsigned int v188;
  __int16 v189;
  uint64_t v190;
  int v191;
  __int16 v192;
  __int16 v193;
  __int16 v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  llvm::StackSafetyInfo *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void (**v204)(void);
  uint64_t **v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  unsigned int v212;
  uint64_t v213;
  BOOL v214;
  int v215;
  int v216;
  int v217;
  int v218;
  int v219;
  uint64_t v220;
  char *v221;
  char *v222;
  _QWORD *v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  _QWORD *v227;
  _QWORD *v228;
  unint64_t v229;
  char *v230;
  unint64_t v231;
  unint64_t v232;
  _QWORD *v233;
  _QWORD *v234;
  _QWORD *v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v239;
  char *v240;
  char *v241;
  char *v242;
  char *v243;
  int v244;
  int v245;
  int v246;
  llvm::GlobalValue *Section;
  uint64_t v248;
  int v249;
  llvm::Module *v250;
  _BOOL4 SemanticInterposition;
  _BOOL4 v252;
  int v253;
  int v254;
  char VCallVisibility;
  int v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  BOOL v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  unsigned int v264;
  uint64_t v265;
  BOOL v266;
  int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  uint64_t v274;
  llvm::GlobalValue *v275;
  unint64_t v276;
  _QWORD *v277;
  _QWORD *v278;
  unint64_t v279;
  BOOL v280;
  _QWORD *v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t *v286;
  uint64_t v287;
  uint64_t v288;
  char *v289;
  llvm::ModuleSummaryIndex *v290;
  char *v291;
  llvm::GlobalValue *v292;
  unint64_t v293;
  uint64_t GlobalValueSummary;
  unint64_t *v295;
  unint64_t v296;
  _QWORD *v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t v300;
  _QWORD *v301;
  _QWORD *v302;
  int v303;
  uint64_t v304;
  unsigned int v305;
  uint64_t v306;
  int v307;
  unsigned int v308;
  _QWORD *v309;
  _QWORD *v310;
  int v311;
  uint64_t v312;
  unsigned int v313;
  uint64_t v314;
  int v315;
  unsigned int v316;
  _QWORD *v317;
  _QWORD *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v325;
  uint64_t v326;
  uint64_t **v327;
  char v328;
  llvm::GlobalValue *v329;
  uint64_t **v330;
  uint64_t *v331;
  uint64_t *v332;
  uint64_t v333;
  uint64_t *v334;
  uint64_t *v335;
  int v336;
  int v338;
  llvm::GlobalValue *v339;
  int v340;
  int v341;
  uint64_t v342;
  char v343;
  int v344;
  int v345;
  __int128 v346;
  __int128 v347;
  int v348;
  char v349;
  int v350;
  __int128 v351;
  uint64_t v352;
  uint64_t *__p;
  _BOOL4 v354;
  char v355;
  _QWORD v356[2];
  int v357;
  char *v358;
  char *v359;
  uint64_t v360;
  int v361;
  _BYTE v362[32];
  __int128 v363;
  uint64_t v364;
  __int128 v365;
  uint64_t v366;
  __int128 v367;
  uint64_t v368;
  __int128 v369;
  uint64_t v370;
  __int128 v371;
  uint64_t v372;
  int v373;
  uint64_t v374;
  int v375;
  int v376;
  uint64_t v377;
  _QWORD v378[2];
  int v379;
  __int128 v380;
  uint64_t v381;
  std::error_code v382;
  int v383;
  __int128 v384;
  uint64_t v385;
  std::string v386;
  __int128 v387;
  uint64_t v388;
  uint64_t v389[2];
  int v390;
  __int128 v391;
  uint64_t v392;
  uint64_t v393[2];
  int v394;
  _QWORD *v395;
  _QWORD *v396;
  uint64_t v397;
  uint64_t v398[2];
  int v399;
  _QWORD *v400;
  _QWORD *v401;
  uint64_t v402;
  uint64_t v403[2];
  int v404;
  _BYTE v405[24];
  uint64_t v406[2];
  int v407;
  __int128 v408;
  uint64_t v409;
  int v410;
  void **v411;
  _QWORD v412[3];
  _QWORD *v413;
  __int128 v414;
  uint64_t v415;
  uint64_t v416;
  _BYTE v417[216];
  __int128 *v418;
  __int128 *v419;
  uint64_t v420;
  __int128 v421;
  __int128 v422;
  uint64_t v423;
  _QWORD *v424;
  uint64_t v425;
  _QWORD v426[6];
  _QWORD v427[2];
  void **v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431[2];
  int v432;
  uint64_t v433;
  uint64_t ***v434;
  char v435;
  int v436;
  uint64_t *v437;
  uint64_t v438;
  _BYTE v439[32];
  char *v440;
  uint64_t v441;
  int v442;
  __int128 v443;
  uint64_t v444;
  __int128 v445;
  _QWORD v446[4];
  _OWORD v447[3];
  uint64_t v448;

  v448 = *MEMORY[0x1E0C80C00];
  ModuleFlag = llvm::Module::getModuleFlag(a1, "EnableSplitLTOUnit", 0x12uLL);
  if (ModuleFlag && (v8 = *(_QWORD *)(ModuleFlag + 128)) != 0)
  {
    v10 = (_QWORD *)(v8 + 24);
    if (*(_DWORD *)(v8 + 32) >= 0x41u)
      v10 = (_QWORD *)*v10;
    v9 = *v10 != 0;
  }
  else
  {
    v9 = 0;
  }
  sub_1C61A7328(a5, 1, v9);
  v358 = v362;
  v359 = v362;
  v360 = 4;
  v361 = 0;
  v437 = (uint64_t *)v439;
  v438 = 0x400000000;
  llvm::collectUsedGlobalVariables(a1, (uint64_t)&v437, 0);
  llvm::collectUsedGlobalVariables(a1, (uint64_t)&v437, 1);
  v356[0] = 0;
  v356[1] = 0;
  v357 = 0;
  if ((_DWORD)v438)
  {
    v11 = v437;
    v12 = 8 * v438;
    do
    {
      v13 = (llvm::GlobalValue *)*v11;
      if ((*(_DWORD *)(*v11 + 32) & 0xFu) - 7 <= 1)
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v358, *v11);
        v418 = (__int128 *)sub_1C4EE9DE0(v13);
        sub_1C61A7854((uint64_t)v356, (uint64_t *)&v418, (uint64_t)&v414);
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  v355 = 0;
  v14 = *(_BYTE *)(a1 + 111);
  v15 = v14;
  v16 = v14 & 0x7F;
  if (v15 < 0)
    v16 = *(_QWORD *)(a1 + 96);
  if (v16)
  {
    *(_QWORD *)&v414 = &v355;
    *((_QWORD *)&v414 + 1) = a1;
    v415 = (uint64_t)v356;
    v416 = a5;
    v418 = (__int128 *)sub_1C4EEC834;
    v419 = &v414;
    v428 = (void **)&v418;
    sub_1C5A04E30(a1, (void (*)(uint64_t, std::string *))sub_1C5A05920, (uint64_t)&v428);
  }
  v17 = llvm::Module::getModuleFlag(a1, "ThinLTO", 7uLL);
  v325 = a1;
  if (v17 && (v18 = *(_QWORD *)(v17 + 128)) != 0)
  {
    v19 = (_QWORD *)(v18 + 24);
    if (*(_DWORD *)(v18 + 32) >= 0x41u)
      v19 = (_QWORD *)*v19;
    v20 = *v19 != 0;
  }
  else
  {
    v20 = 1;
  }
  v354 = v20;
  v21 = a1 + 24;
  v22 = *(_QWORD *)(a1 + 32);
  v352 = a5;
  if (v22 != a1 + 24)
  {
    v322 = a1 + 24;
    while (1)
    {
      v23 = (unsigned __int8 *)(v22 - 56);
      if (!v22)
        v23 = 0;
      v329 = (llvm::GlobalValue *)v23;
      v24 = v23[16];
      if (!v22 || v24 != 3)
        break;
      v25 = (uint64_t ***)v329;
      if ((*((_DWORD *)v329 + 5) & 0x7FFFFFF) != 0)
        goto LABEL_33;
LABEL_405:
      v22 = *(_QWORD *)(v22 + 8);
      if (v22 == v21)
        goto LABEL_409;
    }
    v25 = (uint64_t ***)v329;
    if (!v24
      && *((llvm::GlobalValue **)v329 + 9) == (llvm::GlobalValue *)((char *)v329 + 72)
      && (*((_BYTE *)v329 + 34) & 0x80) == 0)
    {
      goto LABEL_405;
    }
LABEL_33:
    v326 = v22;
    v428 = (void **)&v430;
    v429 = 0x100000000;
    v436 = 0;
    v431[0] = 0;
    v431[1] = 0;
    v432 = 0;
    v435 = 0;
    v433 = 0;
    v434 = v25;
    sub_1C53BA620((uint64_t)&v428, 0);
    v26 = *(_QWORD *)(a2 + 24);
    if (v26)
    {
      v330 = (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t ***))(*(_QWORD *)v26 + 48))(v26, v25);
      v327 = 0;
    }
    else
    {
      llvm::Function::getEntryCount(v25, 0, (uint64_t)&v414);
      if ((_BYTE)v415)
      {
        v418 = 0;
        v419 = 0;
        LODWORD(v420) = 0;
        v421 = 0u;
        v422 = 0u;
        v423 = 0;
        v424 = v426;
        v425 = 0x400000000;
        v426[4] = v427;
        v426[5] = 0;
        v427[0] = 0;
        v427[1] = 1;
        llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze((uint64_t)&v418, (uint64_t)&v428);
        sub_1C4EEA178((uint64_t)&v414, (const llvm::Function *)v25, (uint64_t)&v418, 0, 0, 0);
        v27 = (uint64_t **)operator new();
        *v27 = 0;
        llvm::BlockFrequencyInfo::calculate(v27, (llvm::Value *)v25);
        sub_1C4DC0BBC((uint64_t)&v414);
        llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase(&v418);
        v327 = v27;
        v330 = v27;
      }
      else
      {
        v327 = 0;
        v330 = 0;
      }
    }
    v28 = HIDWORD(v360) == v361 && v355 == 0;
    v29 = !v28;
    v345 = v29;
    v30 = (_QWORD *)a4[3];
    if (v30)
    {
      if (v30 == a4)
      {
        v413 = v412;
        (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v412);
      }
      else
      {
        v413 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v30 + 16))(v30);
      }
    }
    else
    {
      v413 = 0;
    }
    v410 = 0;
    v406[0] = 0;
    v406[1] = 0;
    v407 = 0;
    v409 = 0;
    v408 = 0uLL;
    v403[0] = 0;
    v403[1] = 0;
    v404 = 0;
    memset(v405, 0, sizeof(v405));
    v398[0] = 0;
    v398[1] = 0;
    v399 = 0;
    v401 = 0;
    v402 = 0;
    v400 = 0;
    v393[0] = 0;
    v393[1] = 0;
    v394 = 0;
    v396 = 0;
    v397 = 0;
    v395 = 0;
    v389[0] = 0;
    v389[1] = 0;
    v390 = 0;
    v392 = 0;
    v391 = 0uLL;
    v440 = 0;
    v441 = 0;
    v442 = 0;
    v444 = 0;
    v443 = 0uLL;
    memset(&v386, 0, 20);
    v388 = 0;
    v387 = 0uLL;
    *(_QWORD *)&v382.__val_ = 0;
    v382.__cat_ = 0;
    v383 = 0;
    v385 = 0;
    v384 = 0uLL;
    v378[0] = 0;
    v378[1] = 0;
    v379 = 0;
    v381 = 0;
    v380 = 0uLL;
    llvm::ICallPromotionAnalysis::ICallPromotionAnalysis((llvm::ICallPromotionAnalysis *)&v377);
    v418 = (__int128 *)((char *)&v421 + 8);
    v419 = (__int128 *)((char *)&v421 + 8);
    v420 = 8;
    LODWORD(v421) = 0;
    sub_1C4EEA1FC(a5, (uint64_t)v329, v403, (llvm::SmallPtrSetImplBase *)&v418);
    v32 = (char *)v329 + 72;
    v33 = (llvm::GlobalValue *)*((_QWORD *)v329 + 10);
    if (v33 == (llvm::GlobalValue *)((char *)v329 + 72))
    {
      v335 = 0;
      __p = 0;
      v332 = 0;
      v34 = 0;
      LOBYTE(v341) = 0;
      v343 = 0;
      v328 = 0;
      v349 = 0;
LABEL_51:
      v35 = -1;
      v36 = v32;
      do
      {
        v36 = (char *)*((_QWORD *)v36 + 1);
        ++v35;
      }
      while (v36 != v32);
      *(_QWORD *)(a5 + 296) += v35;
      memset(v447, 0, 24);
      if (v354)
      {
        if (v332 != v34)
        {
          v37 = v332;
          do
          {
            v38 = *v37;
            v39 = sub_1C477672C((uint64_t)&v418, *v37);
            if (v419 == v418)
              v40 = (uint64_t *)((char *)&v420 + 4);
            else
              v40 = &v420;
            if (v39 != (_QWORD *)((char *)v419 + 8 * *(unsigned int *)v40))
            {
              *v39 = -2;
              LODWORD(v421) = v421 + 1;
            }
            sub_1C4EEA1FC(a5, v38, v398, (llvm::SmallPtrSetImplBase *)&v418);
            ++v37;
          }
          while (v37 != v34);
        }
        *(_QWORD *)&v414 = v417;
        *((_QWORD *)&v414 + 1) = v417;
        v415 = 8;
        LODWORD(v416) = 0;
        if (__p != v335)
        {
          v41 = __p;
          do
          {
            v42 = *v41;
            v43 = sub_1C477672C((uint64_t)&v414, *v41);
            if (*((_QWORD *)&v414 + 1) == (_QWORD)v414)
              v44 = (uint64_t *)((char *)&v415 + 4);
            else
              v44 = &v415;
            if (v43 != (_QWORD *)(*((_QWORD *)&v414 + 1) + 8 * *(unsigned int *)v44))
            {
              *v43 = -2;
              LODWORD(v416) = v416 + 1;
            }
            sub_1C4EEA1FC(a5, v42, v393, (llvm::SmallPtrSetImplBase *)&v414);
            ++v41;
          }
          while (v41 != v335);
        }
        v46 = v395;
        v45 = v396;
        while (v46 != v45)
        {
          if (sub_1C61A748C((uint64_t)v398, v46))
            sub_1C4EEA454(v403, v46);
          ++v46;
        }
        v154 = *(_QWORD *)&v405[8] - *(_QWORD *)v405;
        v155 = (*(_QWORD *)&v405[8] - *(_QWORD *)v405) >> 3;
        v156 = v400;
        v157 = v401;
        LODWORD(v158) = v155;
        if (v400 != v401)
        {
          do
            sub_1C4EEA454(v403, v156++);
          while (v156 != v157);
          v158 = (*(_QWORD *)&v405[8] - *(_QWORD *)v405) >> 3;
        }
        v159 = v395;
        v160 = v396;
        while (v159 != v160)
          sub_1C4EEA454(v403, v159++);
        sub_1C61A8114((uint64_t)v403);
        v161 = *(_QWORD *)v405;
        v162 = *(_OWORD *)&v405[8];
        memset(v405, 0, sizeof(v405));
        if (*(_QWORD *)&v447[0])
        {
          *((_QWORD *)&v447[0] + 1) = *(_QWORD *)&v447[0];
          v347 = v162;
          operator delete(*(void **)&v447[0]);
          v162 = v347;
        }
        *(_QWORD *)&v447[0] = v161;
        *(_OWORD *)((char *)v447 + 8) = v162;
        v163 = (v154 >> 3);
        v164 = v163;
        if (v158 > v155)
        {
          v164 = v158;
          v165 = v158 - v163;
          v166 = (_QWORD *)(v161 + 8 * v163);
          do
          {
            *v166++ |= 2uLL;
            --v165;
          }
          while (v165);
          LODWORD(v155) = v158;
        }
        v167 = ((uint64_t)v162 - v161) >> 3;
        if (v167 > v164)
        {
          v168 = v155 + 1;
          do
          {
            *(_QWORD *)(v161 + 8 * v164) |= 4uLL;
            v164 = v168;
            v126 = v167 > v168++;
          }
          while (v126);
        }
        if (*((_QWORD *)&v414 + 1) != (_QWORD)v414)
          free(*((void **)&v414 + 1));
      }
      else
      {
        sub_1C61A8114((uint64_t)v403);
        v152 = *(_OWORD *)v405;
        v153 = *(_QWORD *)&v405[16];
        memset(v405, 0, sizeof(v405));
        if (*(_QWORD *)&v447[0])
        {
          *((_QWORD *)&v447[0] + 1) = *(_QWORD *)&v447[0];
          v346 = v152;
          operator delete(*(void **)&v447[0]);
          v152 = v346;
        }
        v447[0] = v152;
        *(_QWORD *)&v447[1] = v153;
      }
      llvm::Function::getImportGUIDs((uint64_t ***)v329, (uint64_t)&v414);
      v169 = v414;
      v170 = (unint64_t *)(v414 + 8 * v415);
      if (DWORD2(v414))
      {
        if ((_DWORD)v415)
        {
          v186 = 8 * v415;
          v171 = (unint64_t *)v414;
          while (*v171 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v171;
            v186 -= 8;
            if (!v186)
              goto LABEL_306;
          }
        }
        else
        {
          v171 = (unint64_t *)v414;
        }
      }
      else
      {
LABEL_306:
        v171 = (unint64_t *)(v414 + 8 * v415);
      }
      v172 = (unint64_t *)(v414 + 8 * v415);
      if (v171 != v172)
      {
        do
        {
          v174 = *v171;
          v173 = v171 + 1;
          v175 = *(unsigned __int8 *)(a5 + 133);
          *(_QWORD *)&v445 = (unint64_t)sub_1C4EEA81C(a5, v174) & 0xFFFFFFFFFFFFFFF8 | v175;
          v176 = (_DWORD *)sub_1C61A73D0((uint64_t)v406, (unint64_t *)&v445);
          if (ForceSummaryEdgesCold == 2)
            v177 = 1;
          else
            v177 = 4;
          if ((*v176 & 7u) > v177)
            v177 = *v176 & 7;
          *v176 = v177 | *v176 & 0xFFFFFFF8;
          while (v173 != v170)
          {
            v178 = *v173++;
            if (v178 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v171 = v173 - 1;
              goto LABEL_320;
            }
          }
          v171 = v170;
LABEL_320:
          ;
        }
        while (v171 != v172);
        v169 = v414;
      }
      MEMORY[0x1CAA32FB4](v169, 8);
      llvm::GlobalValue::getSection(v329);
      v179 = *((_DWORD *)v329 + 8);
      if (v180)
        v181 = (*((_DWORD *)v329 + 8) & 0xFu) - 7 >= 2;
      else
        v181 = 1;
      v182 = !v181;
      if ((*((_DWORD *)v329 + 8) & 0xF) != 3)
        goto LABEL_340;
      if ((*((_DWORD *)v329 + 8) & 0xC0) == 0x80)
      {
        v183 = v179 & 0x3F;
        if (((v182 | (v349 | v328)) & 1) != 0)
          v184 = 64;
        else
          v184 = 0;
        v185 = (v179 >> 6) & 0x100;
        goto LABEL_348;
      }
      if (*((_BYTE *)v329 + 16) != 3 || (*((_BYTE *)v329 + 80) & 1) != 0)
      {
        v187 = 0;
        v183 = v179 & 0x3F;
        if (((v182 | (v349 | v328)) & 1) != 0)
          v184 = 64;
        else
          v184 = 0;
        v185 = (v179 >> 6) & 0x100;
        if ((v179 & 0xC0) != 0)
LABEL_348:
          v187 = 512;
      }
      else
      {
LABEL_340:
        v187 = 0;
        v183 = v179 & 0x3F;
        if (((v182 | (v349 | v328)) & 1) != 0)
          v184 = 64;
        else
          v184 = 0;
        v185 = (v179 >> 6) & 0x100;
      }
      LOWORD(v188) = 0;
      v189 = 0;
      LOWORD(v376) = v184 | v185 | v183 | v187;
      v375 = 0;
      v190 = *((_QWORD *)v329 + 14);
      if (v190)
      {
        v191 = (*(unsigned __int8 *)(v190 + 15) >> 4) & 4 | (*(unsigned __int8 *)(v190 + 17) >> 4) & 3;
        if (*(_DWORD *)(v190 + 8) >= 2u)
        {
          v207 = *(_QWORD *)(v190 + 48);
          if (v207)
            v191 |= *(_BYTE *)(v207 + 14) & 8;
        }
        v188 = v191 & 0xFFFFFFCF | (16 * ((*(unsigned __int8 *)(v190 + 15) >> 3) & 1)) & 0xFFFFFFDF | (32 * ((*(unsigned __int8 *)(v190 + 12) >> 2) & 1));
        v189 = (2 * *(unsigned __int8 *)(v190 + 16)) & 0x40;
      }
      if ((v341 & 1) != 0)
        v192 = 128;
      else
        v192 = 0;
      if ((v343 & 1) != 0)
        v193 = 256;
      else
        v193 = 0;
      v194 = v193 | v192 | v189 | v188;
      v195 = *((_QWORD *)v329 + 10);
      if (v195)
        v196 = v195 - 24;
      else
        v196 = 0;
      v197 = *(_QWORD *)(v196 + 40);
      if (v197)
        v198 = v197 - 24;
      else
        v198 = 0;
      if (*(unsigned __int8 *)(v198 + 16) - 29 >= 0xB)
        v198 = 0;
      LOWORD(v375) = v194 | ((*(_BYTE *)(v198 + 16) == 35) << 9);
      v445 = 0uLL;
      v446[0] = 0;
      if (!v413)
        sub_1C485C2F0();
      v199 = (llvm::StackSafetyInfo *)(*(uint64_t (**)(_QWORD *))(*v413 + 48))(v413);
      if (v199)
      {
        llvm::StackSafetyInfo::getParamAccesses(v199, (llvm::ModuleSummaryIndex *)a5, (uint64_t *)&v414);
        sub_1C61A8184((void **)&v445);
        v445 = v414;
        v446[0] = v415;
        v415 = 0;
        v414 = 0uLL;
        *(_QWORD *)&v371 = &v414;
        sub_1C4EEB7D8((void ***)&v371);
      }
      v373 = 0;
      sub_1C61A8698((unsigned int *)v406);
      v414 = v408;
      v415 = v409;
      v409 = 0;
      v408 = 0uLL;
      sub_1C61A86E8(v389);
      v371 = v391;
      v372 = v392;
      v392 = 0;
      v391 = 0uLL;
      sub_1C61A8754((unsigned int *)&v440);
      v369 = v443;
      v370 = v444;
      v444 = 0;
      v443 = 0uLL;
      sub_1C61A8754((unsigned int *)&v386);
      v367 = v387;
      v368 = v388;
      v388 = 0;
      v387 = 0uLL;
      sub_1C61A87A8((unsigned int *)&v382);
      v365 = v384;
      v366 = v385;
      v385 = 0;
      v384 = 0uLL;
      sub_1C61A87A8((unsigned int *)v378);
      v363 = v380;
      v364 = v381;
      v381 = 0;
      v380 = 0uLL;
      sub_1C4EEA558(&v376, &v410, &v375, &v373, (uint64_t)v447, &v414, &v371, (uint64_t)&v369, &v374, (uint64_t)&v367, (uint64_t)&v365, (uint64_t)&v363, &v445);
      v411 = (void **)&v363;
      sub_1C4EEBCC8(&v411);
      *(_QWORD *)&v363 = &v365;
      sub_1C4EEBCC8((void ***)&v363);
      if ((_QWORD)v367)
      {
        *((_QWORD *)&v367 + 1) = v367;
        operator delete((void *)v367);
      }
      if ((_QWORD)v369)
      {
        *((_QWORD *)&v369 + 1) = v369;
        operator delete((void *)v369);
      }
      if ((_QWORD)v371)
      {
        *((_QWORD *)&v371 + 1) = v371;
        operator delete((void *)v371);
      }
      if ((_QWORD)v414)
      {
        *((_QWORD *)&v414 + 1) = v414;
        operator delete((void *)v414);
      }
      if (v182)
      {
        *(_QWORD *)&v371 = sub_1C4EE9DE0(v329);
        sub_1C61A7854((uint64_t)v356, (uint64_t *)&v371, (uint64_t)&v414);
      }
      v200 = v374;
      v374 = 0;
      *(_QWORD *)&v371 = v200;
      sub_1C61A7548(a5, v329, (uint64_t *)&v371);
      v201 = v371;
      *(_QWORD *)&v371 = 0;
      if (v201)
        (*(void (**)(uint64_t))(*(_QWORD *)v201 + 8))(v201);
      v202 = v374;
      v374 = 0;
      if (v202)
        (*(void (**)(uint64_t))(*(_QWORD *)v202 + 8))(v202);
      *(_QWORD *)&v414 = &v445;
      sub_1C4EEB7D8((void ***)&v414);
      if (*(_QWORD *)&v447[0])
      {
        *((_QWORD *)&v447[0] + 1) = *(_QWORD *)&v447[0];
        operator delete(*(void **)&v447[0]);
      }
      if (__p)
        operator delete(__p);
      if (v332)
        operator delete(v332);
      if (v419 != v418)
        free(v419);
      v203 = v377;
      v377 = 0;
      if (v203)
        MEMORY[0x1CAA32F9C](v203, 0x1000C80451B5BE8);
      *(_QWORD *)&v414 = &v380;
      sub_1C4EEBCC8((void ***)&v414);
      sub_1C4EEBC6C((unsigned int *)v378);
      MEMORY[0x1CAA32FB4](v378[0], 8);
      *(_QWORD *)&v414 = &v384;
      sub_1C4EEBCC8((void ***)&v414);
      sub_1C4EEBC6C((unsigned int *)&v382);
      MEMORY[0x1CAA32FB4](*(_QWORD *)&v382.__val_, 8);
      sub_1C6176BF8(&v386);
      sub_1C6176BF8(&v440);
      sub_1C6176BF8(v389);
      sub_1C6176BF8(v393);
      sub_1C6176BF8(v398);
      sub_1C6176BF8(v403);
      sub_1C6176BF8(v406);
      if (v413 == v412)
      {
        v204 = (void (**)(void))(v412[0] + 32);
LABEL_397:
        (*v204)();
      }
      else if (v413)
      {
        v204 = (void (**)(void))(*v413 + 40);
        goto LABEL_397;
      }
      v205 = v327;
      if (v327)
      {
        v206 = *v327;
        *v327 = 0;
        if (v206)
        {
          (*(void (**)(uint64_t *))(*v206 + 8))(v206);
          v205 = v327;
        }
        MEMORY[0x1CAA32FC0](v205, 0x20C4093837F09);
      }
      sub_1C4DC4E38(v431);
      if (v428 != (void **)&v430)
        free(v428);
      v21 = v322;
      v22 = v326;
      goto LABEL_405;
    }
    v349 = 0;
    v328 = 0;
    v343 = 0;
    v341 = 0;
    v334 = 0;
    v335 = 0;
    v34 = 0;
    v331 = 0;
    v332 = 0;
    __p = 0;
LABEL_76:
    if (v33)
      v47 = (uint64_t)v33 - 24;
    else
      v47 = 0;
    v339 = v33;
    if ((*(_WORD *)(v47 + 18) & 0x7FFF) != 0)
    {
      v151 = *((_QWORD *)llvm::BlockAddress::get(*(llvm::BlockAddress **)(v47 + 56), (llvm::Function *)v47, v31) + 1);
      if (v151)
      {
        while (*(_BYTE *)(*(_QWORD *)(v151 + 24) + 16) == 39)
        {
          v151 = *(_QWORD *)(v151 + 8);
          if (!v151)
            goto LABEL_80;
        }
        v328 = 1;
      }
    }
LABEL_80:
    v48 = v47 + 40;
    v333 = v47;
    for (i = *(_QWORD *)(v47 + 48); ; i = *(_QWORD *)(i + 8))
    {
      if (i == v48)
      {
        v33 = (llvm::GlobalValue *)*((_QWORD *)v339 + 1);
        v32 = (char *)v329 + 72;
        if (v33 == (llvm::GlobalValue *)((char *)v329 + 72))
          goto LABEL_51;
        goto LABEL_76;
      }
      if (i)
        v50 = (uint64_t ***)(i - 24);
      else
        v50 = 0;
      if (!sub_1C4D99D08((uint64_t)v50) && !sub_1C509DDB0((uint64_t)v50))
      {
        ++v410;
        if (v354)
        {
          v51 = *((unsigned __int8 *)v50 + 16);
          if (i && v51 == 60)
          {
            if ((*((_WORD *)v50 + 9) & 1) == 0)
            {
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v418, (uint64_t)v50);
              if (v34 >= v334)
              {
                v84 = v332;
                v85 = v34 - v332;
                v86 = v85 + 1;
                if ((unint64_t)(v85 + 1) >> 61)
                  goto LABEL_625;
                if (((char *)v334 - (char *)v332) >> 2 > v86)
                  v86 = ((char *)v334 - (char *)v332) >> 2;
                if ((unint64_t)((char *)v334 - (char *)v332) >= 0x7FFFFFFFFFFFFFF8)
                  v87 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v87 = v86;
                if (v87)
                {
                  if (v87 >> 61)
                    goto LABEL_626;
                  v88 = (char *)operator new(8 * v87);
                  v84 = v332;
                }
                else
                {
                  v88 = 0;
                }
                v108 = (uint64_t *)&v88[8 * v85];
                *v108 = (uint64_t)v50;
                v109 = v108 + 1;
                if (v34 != v84)
                {
                  do
                  {
                    v110 = *--v34;
                    *--v108 = v110;
                  }
                  while (v34 != v84);
                  v34 = v84;
                }
                v332 = v108;
                v334 = (uint64_t *)&v88[8 * v87];
                if (v34)
                  operator delete(v34);
                v34 = v109;
              }
              else
              {
                *v34++ = (uint64_t)v50;
              }
              continue;
            }
          }
          else if (i && v51 == 61 && (*((_WORD *)v50 + 9) & 1) == 0)
          {
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v418, (uint64_t)v50);
            if (v335 >= v331)
            {
              v101 = v335 - __p;
              v102 = v101 + 1;
              if ((unint64_t)(v101 + 1) >> 61)
LABEL_625:
                abort();
              if (((char *)v331 - (char *)__p) >> 2 > v102)
                v102 = ((char *)v331 - (char *)__p) >> 2;
              if ((unint64_t)((char *)v331 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8)
                v103 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v103 = v102;
              if (v103)
              {
                if (v103 >> 61)
LABEL_626:
                  sub_1C4764EE4();
                v104 = (char *)operator new(8 * v103);
              }
              else
              {
                v104 = 0;
              }
              v118 = (uint64_t *)&v104[8 * v101];
              *v118 = (uint64_t)v50;
              v52 = v118 + 1;
              v119 = __p;
              if (v335 != __p)
              {
                v120 = v335;
                do
                {
                  v121 = *--v120;
                  *--v118 = v121;
                  v119 = __p;
                }
                while (v120 != __p);
              }
              v331 = (uint64_t *)&v104[8 * v103];
              if (v119)
                operator delete(v119);
              __p = v118;
            }
            else
            {
              *v335 = (uint64_t)v50;
              v52 = v335 + 1;
            }
            v122 = *((_DWORD *)v50 + 5);
            if ((v122 & 0x40000000) != 0)
              v123 = (llvm::GlobalValue **)*(v50 - 1);
            else
              v123 = (llvm::GlobalValue **)&v50[-4 * (v122 & 0x7FFFFFF)];
            v124 = *v123;
            v125 = *((unsigned __int8 *)*v123 + 16);
            if (v124)
              v126 = v125 > 3;
            else
              v126 = 1;
            if (v126)
            {
              v127 = v125 - 21;
              if (v124)
                v128 = v127 >= 7;
              else
                v128 = 0;
              if (v128)
                sub_1C4EEA1FC(a5, (uint64_t)v124, v403, (llvm::SmallPtrSetImplBase *)&v418);
            }
            else
            {
              v129 = sub_1C4EE9DE0(v124);
              v130 = sub_1C4EEA81C(a5, v129);
              *((_QWORD *)v130 + 1) = v124;
              *(_QWORD *)&v414 = (unint64_t)v130 & 0xFFFFFFFFFFFFFFF8 | *(unsigned __int8 *)(a5 + 133);
              sub_1C4EEA454(v403, &v414);
            }
            v335 = v52;
            continue;
          }
        }
        sub_1C4EEA1FC(a5, (uint64_t)v50, v403, (llvm::SmallPtrSetImplBase *)&v418);
        v53 = *((unsigned __int8 *)v50 + 16);
        if ((v53 - 33) > 0x33 || ((1 << (v53 - 33)) & 0x8000000000041) == 0)
        {
          v341 |= llvm::Instruction::mayThrow((llvm::Instruction *)v50);
          continue;
        }
        if (v53 == 84)
          v55 = (uint64_t)v50;
        else
          v55 = 0;
        v56 = v53 == 84 && i != 0;
        if ((v345 & v56) == 1)
          v349 |= *(_BYTE *)(*(_QWORD *)(v55 - 32) + 16) == 24;
        v57 = *(_QWORD *)(i - 56);
        if (!v57)
        {
          v60 = 16;
LABEL_119:
          if (v56)
          {
            v343 = 1;
            if (!v57 || *(_BYTE *)(*(_QWORD *)(v55 - 32) + 16) == 24)
              goto LABEL_124;
          }
          if (*(unsigned __int8 *)v60 < 0x15u)
          {
            v343 = 1;
LABEL_124:
            a5 = v352;
            continue;
          }
          a5 = v352;
          if ((*((_BYTE *)v50 + 23) & 0x20) != 0)
          {
            v62 = ***v50;
            *(_QWORD *)&v414 = v50;
            v63 = *(_DWORD *)(v62 + 2496);
            if (!v63)
            {
              v135 = 0;
              goto LABEL_254;
            }
            v64 = *(_QWORD *)(v62 + 2480);
            v65 = v63 - 1;
            v66 = v65 & ((v50 >> 4) ^ (v50 >> 9));
            v67 = (_QWORD *)(v64 + 40 * v66);
            v68 = (_QWORD ***)*v67;
            if ((uint64_t ***)*v67 != v50)
            {
              v69 = 0;
              v70 = 1;
              while (v68 != (_QWORD ***)-4096)
              {
                if (v69)
                  v71 = 0;
                else
                  v71 = v68 == (_QWORD ***)-8192;
                if (v71)
                  v69 = v67;
                v72 = v66 + v70++;
                v66 = v72 & v65;
                v67 = (_QWORD *)(v64 + 40 * v66);
                v68 = (_QWORD ***)*v67;
                if ((uint64_t ***)*v67 == v50)
                  goto LABEL_140;
              }
              if (v69)
                v135 = v69;
              else
                v135 = v67;
LABEL_254:
              v67 = sub_1C541AB24(v62 + 2480, (uint64_t)&v414, (uint64_t *)&v414, v135);
              v136 = v414;
              v67[4] = 0;
              v67[3] = 0;
              *v67 = v136;
              v67[1] = v67 + 3;
              v67[2] = 0x100000000;
            }
LABEL_140:
            v73 = *((unsigned int *)v67 + 4);
            if ((_DWORD)v73)
            {
              v74 = (_QWORD *)(v67[1] + 8);
              v75 = 16 * v73;
              while (*((_DWORD *)v74 - 2) != 23)
              {
                v74 += 2;
                v75 -= 16;
                if (!v75)
                  goto LABEL_144;
              }
              v111 = *v74;
              if (*v74)
              {
                v112 = *(unsigned int *)(v111 + 8);
                if ((_DWORD)v112)
                {
                  v113 = -8 * v112;
                  do
                  {
                    v114 = *(_QWORD *)(v111 + v113);
                    if (v114)
                    {
                      v115 = *(_QWORD *)(v114 + 128);
                      if (v115)
                      {
                        v116 = sub_1C4EE9DE0(*(llvm::GlobalValue **)(v114 + 128));
                        v117 = sub_1C4EEA81C(v352, v116);
                        *((_QWORD *)v117 + 1) = v115;
                        *(_QWORD *)&v414 = (unint64_t)v117 & 0xFFFFFFFFFFFFFFF8 | *(unsigned __int8 *)(v352 + 133);
                        sub_1C61A73D0((uint64_t)v406, (unint64_t *)&v414);
                      }
                    }
                    v113 += 8;
                  }
                  while (v113);
                }
              }
            }
          }
LABEL_144:
          LODWORD(v445) = 0;
          LODWORD(v371) = 0;
          *(_QWORD *)&v414 = 0;
          PromotionCandidatesForInstruction = llvm::ICallPromotionAnalysis::getPromotionCandidatesForInstruction((llvm::ICallPromotionAnalysis *)&v377, (const llvm::Instruction *)v50, (unsigned int *)&v445, (unint64_t *)&v414, (unsigned int *)&v371);
          if (v77)
          {
            v78 = (unint64_t *)PromotionCandidatesForInstruction;
            v79 = (unint64_t *)(PromotionCandidatesForInstruction + 16 * v77);
            do
            {
              v80 = *(unsigned __int8 *)(v352 + 133);
              *(_QWORD *)&v447[0] = (unint64_t)sub_1C4EEA81C(v352, *v78) & 0xFFFFFFFFFFFFFFF8 | v80;
              v81 = (_DWORD *)sub_1C61A73D0((uint64_t)v406, (unint64_t *)v447);
              if (a3)
              {
                v82 = v78[1];
                if (*(_BYTE *)(a3 + 24) && *(_QWORD *)(a3 + 16) <= v82)
                {
                  v83 = 3;
                }
                else if (*(_BYTE *)(a3 + 40))
                {
                  if (*(_QWORD *)(a3 + 32) >= v82)
                    v83 = 1;
                  else
                    v83 = 2;
                }
                else
                {
                  v83 = 2;
                }
              }
              else
              {
                v83 = 0;
              }
              if ((*v81 & 7u) > v83)
                v83 = *v81 & 7;
              *v81 = v83 | *v81 & 0xFFFFFFF8;
              v78 += 2;
            }
            while (v78 != v79);
          }
          v343 = 1;
          continue;
        }
        if (!*(_BYTE *)(v57 + 16) && *(_QWORD *)(v57 + 24) == *(_QWORD *)(i + 48))
        {
          v59 = *(llvm::GlobalValue **)(i - 56);
          if (!v56)
            goto LABEL_195;
        }
        else
        {
          v58 = llvm::Value::stripPointerCasts(*(llvm::Value **)(i - 56));
          v59 = v58;
          v60 = (uint64_t)v58 + 16;
          if (*((_BYTE *)v58 + 16))
          {
            if (*((_BYTE *)v58 + 16) != 1)
              goto LABEL_119;
            AliaseeObject = llvm::GlobalAlias::getAliaseeObject(v58);
            if (*(_BYTE *)(AliaseeObject + 16))
              goto LABEL_119;
            v57 = AliaseeObject;
            if (!v56)
              goto LABEL_195;
          }
          else
          {
            v57 = (uint64_t)v58;
            if (!v56)
              goto LABEL_195;
          }
        }
        if ((*(_BYTE *)(v57 + 33) & 0x20) == 0)
        {
LABEL_195:
          ProfileCount = llvm::ProfileSummaryInfo::getProfileCount((llvm::ProfileSummaryInfo *)a3, (const llvm::BasicBlock **)(i - 24), v330, 0);
          v107 = 0;
          if (a3)
          {
            a5 = v352;
            if (v106)
            {
              if (*(_BYTE *)(a3 + 24) && *(_QWORD *)(a3 + 16) <= ProfileCount)
              {
                v107 = 3;
              }
              else if (*(_BYTE *)(a3 + 40))
              {
                if (*(_QWORD *)(a3 + 32) >= ProfileCount)
                  v107 = 1;
                else
                  v107 = 2;
              }
              else
              {
                v107 = 2;
              }
            }
          }
          else
          {
            a5 = v352;
          }
          if (ForceSummaryEdgesCold)
            v137 = 1;
          else
            v137 = v107;
          v138 = sub_1C4EE9DE0(v59);
          v139 = sub_1C4EEA81C(a5, v138);
          *((_QWORD *)v139 + 1) = v59;
          *(_QWORD *)&v414 = (unint64_t)v139 & 0xFFFFFFFFFFFFFFF8 | *(unsigned __int8 *)(a5 + 133);
          v140 = (unsigned int *)sub_1C61A73D0((uint64_t)v406, (unint64_t *)&v414);
          v141 = *v140 & 7;
          if (v141 <= v137)
            v141 = v137;
          *v140 = v141 | *v140 & 0xFFFFFFF8;
          if (v330)
          {
            if (!v137)
            {
              v142 = v140;
              BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq((uint64_t *)v330, v333);
              if (*v330)
              {
                v144 = *(_QWORD *)((*v330)[1] + 16);
                if (v144)
                {
                  *(_QWORD *)&v414 = BlockFreq;
                  WORD4(v414) = 8;
                  if (BlockFreq)
                  {
                    *(_QWORD *)&v414 = llvm::ScaledNumbers::divide64(BlockFreq, v144);
                    WORD4(v414) = v145;
                    sub_1C4DB5C98((uint64_t)&v414, 8);
                  }
                  v146 = sub_1C4DB9F50((uint64_t)&v414);
                  v147 = *v142;
                  v148 = v146 + (v147 >> 3);
                  v149 = __CFADD__(v146, v147 >> 3);
                  if (v148 < v147 >> 3)
                    v149 = 1;
                  if (v148 >= 0x1FFFFFFF)
                    LODWORD(v148) = 0x1FFFFFFF;
                  v150 = 8 * v148;
                  if (v149)
                    v150 = -8;
                  *v142 = v150 & 0xFFFFFFF8 | *v142 & 7;
                }
              }
            }
          }
          continue;
        }
        v89 = *(_DWORD *)(*(_QWORD *)(v55 - 32) + 36);
        if ((v89 - 297) >= 2)
        {
          a5 = v352;
          if (v89 != 299)
            continue;
          v97 = *(_QWORD *)(*(_QWORD *)(v55 - 32 * (*(_DWORD *)(v55 + 20) & 0x7FFFFFF) + 32) + 24);
          if (*(_BYTE *)v97)
            continue;
          *(_QWORD *)&v445 = 0;
          v98 = *(_QWORD *)(v97 + 8);
          v99 = *(_QWORD *)v98;
          v414 = xmmword_1C85F4BB0;
          v415 = 0;
          llvm::MD5::update((int *)&v414, (int *)(v98 + 24), v99);
          llvm::MD5::final((int *)&v414, (int *)v447);
          *(_QWORD *)&v445 = *(_QWORD *)&v447[0];
          v100 = *(_QWORD *)(v55 + 8);
          if (v100)
          {
            while (sub_1C4D9F8B4(*(_QWORD *)(v100 + 24)))
            {
              v100 = *(_QWORD *)(v100 + 8);
              if (!v100)
                goto LABEL_240;
            }
            sub_1C4EEA990(v389, (uint64_t *)&v445);
          }
LABEL_240:
          *(_QWORD *)&v414 = &v415;
          *((_QWORD *)&v414 + 1) = 0x400000000;
          *(_QWORD *)&v447[0] = &v447[1];
          *((_QWORD *)&v447[0] + 1) = 0x400000000;
          llvm::findDevirtualizableCallsForTypeTest((uint64_t)&v414, (uint64_t)v447, v55, (llvm::DominatorTree *)&v428);
          if (DWORD2(v414))
          {
            v131 = (uint64_t *)v414;
            v132 = (uint64_t *)(v414 + 16 * DWORD2(v414));
            do
            {
              v133 = *v131;
              v134 = v131[1];
              v131 += 2;
              sub_1C4EEAAA4(v133, v134, v445, &v440, (uint64_t)&v382);
            }
            while (v131 != v132);
          }
        }
        else
        {
          v90 = *(_QWORD *)(*(_QWORD *)(v55 - 32 * (*(_DWORD *)(v55 + 20) & 0x7FFFFFF) + 64) + 24);
          a5 = v352;
          if (*(_BYTE *)v90)
            continue;
          *(_QWORD *)&v371 = 0;
          v91 = *(_QWORD *)(v90 + 8);
          v92 = *(_QWORD *)v91;
          v414 = xmmword_1C85F4BB0;
          v415 = 0;
          llvm::MD5::update((int *)&v414, (int *)(v91 + 24), v92);
          llvm::MD5::final((int *)&v414, (int *)v447);
          *(_QWORD *)&v371 = *(_QWORD *)&v447[0];
          *(_QWORD *)&v414 = &v415;
          *((_QWORD *)&v414 + 1) = 0x400000000;
          *(_QWORD *)&v447[0] = &v447[1];
          *((_QWORD *)&v447[0] + 1) = 0x400000000;
          *(_QWORD *)&v445 = v446;
          *((_QWORD *)&v445 + 1) = 0x400000000;
          LOBYTE(v369) = 0;
          llvm::findDevirtualizableCallsForTypeCheckedLoad((uint64_t)&v414, (uint64_t)v447, (uint64_t)&v445, &v369, v55, (llvm::DominatorTree *)&v428);
          if ((_BYTE)v369)
            sub_1C4EEA990(v389, (uint64_t *)&v371);
          if (DWORD2(v414))
          {
            v93 = (uint64_t *)v414;
            v94 = (uint64_t *)(v414 + 16 * DWORD2(v414));
            do
            {
              v95 = *v93;
              v96 = v93[1];
              v93 += 2;
              sub_1C4EEAAA4(v95, v96, v371, &v386, (uint64_t)v378);
            }
            while (v93 != v94);
          }
          if ((_QWORD *)v445 != v446)
            free((void *)v445);
        }
        if (*(_OWORD **)&v447[0] != &v447[1])
          free(*(void **)&v447[0]);
        if ((uint64_t *)v414 != &v415)
          free((void *)v414);
      }
    }
  }
LABEL_409:
  v440 = (char *)&v442;
  v441 = 0x200000000;
  v208 = v325 + 8;
  v209 = *(_QWORD *)(v325 + 16);
  if (v209 != v325 + 8)
  {
    do
    {
      if (v209)
        v210 = v209 - 56;
      else
        v210 = 0;
      if (v209 && *(_BYTE *)(v210 + 16) == 3)
      {
        if ((*(_DWORD *)(v210 + 20) & 0x7FFFFFF) != 0)
          goto LABEL_420;
      }
      else if (*(_BYTE *)(v210 + 16) || *(_QWORD *)(v210 + 72) != v210 + 72 || (*(_BYTE *)(v210 + 34) & 0x80) != 0)
      {
LABEL_420:
        v418 = 0;
        v419 = 0;
        LODWORD(v420) = 0;
        *(_QWORD *)&v422 = 0;
        v421 = 0uLL;
        *(_QWORD *)&v414 = v417;
        *((_QWORD *)&v414 + 1) = v417;
        v415 = 8;
        LODWORD(v416) = 0;
        v211 = sub_1C4EEA1FC(a5, v210, &v418, (llvm::SmallPtrSetImplBase *)&v414);
        llvm::GlobalValue::getSection((llvm::GlobalValue *)v210);
        v212 = *(_DWORD *)(v210 + 32);
        if (v213)
          v214 = (*(_DWORD *)(v210 + 32) & 0xFu) - 7 >= 2;
        else
          v214 = 1;
        v215 = !v214;
        v342 = v209;
        v340 = v211;
        v338 = v215;
        if ((*(_DWORD *)(v210 + 32) & 0xF) != 3)
          goto LABEL_434;
        if ((*(_DWORD *)(v210 + 32) & 0xC0) == 0x80)
        {
          v350 = *(_DWORD *)(v210 + 32) & 0x3F;
          if (v215)
            v216 = 64;
          else
            v216 = 0;
          v348 = v216;
          v344 = (v212 >> 6) & 0x100;
          goto LABEL_442;
        }
        if (*(_BYTE *)(v210 + 16) != 3 || (*(_BYTE *)(v210 + 80) & 1) != 0)
        {
          v217 = 0;
          v350 = *(_DWORD *)(v210 + 32) & 0x3F;
          if (v215)
            v219 = 64;
          else
            v219 = 0;
          v348 = v219;
          v344 = (v212 >> 6) & 0x100;
          if ((v212 & 0xC0) != 0)
LABEL_442:
            v217 = 512;
        }
        else
        {
LABEL_434:
          v217 = 0;
          v350 = *(_DWORD *)(v210 + 32) & 0x3F;
          if (v215)
            v218 = 64;
          else
            v218 = 0;
          v348 = v218;
          v344 = (v212 >> 6) & 0x100;
        }
        v336 = v217;
        memset(v447, 0, 24);
        if (!*(_BYTE *)(a5 + 134))
        {
          LODWORD(v441) = 0;
          llvm::Value::getMetadata((unsigned int *)v210, 19, (uint64_t)&v440);
          v220 = v441;
          if ((_DWORD)v441)
          {
            if ((*(_BYTE *)(v210 + 80) & 1) == 0
              || (sub_1C4EEC000(*(llvm::Value **)(v210 - 32), 0, v325, a5, (unint64_t **)v447),
                  v220 = v441,
                  (_DWORD)v441))
            {
              v221 = v440;
              v222 = &v440[8 * v220];
              do
              {
                v223 = (_QWORD *)(*(_QWORD *)v221 - 8 * *(unsigned int *)(*(_QWORD *)v221 + 8));
                v224 = *(_QWORD *)(*v223 + 128);
                v225 = (_QWORD *)(v224 + 24);
                if (*(_DWORD *)(v224 + 32) >= 0x41u)
                  v225 = (_QWORD *)*v225;
                v226 = v223[1];
                if (!*(_BYTE *)v226)
                {
                  v227 = (_QWORD *)*v225;
                  v228 = (_QWORD *)sub_1C4EEC3B4(a5, (void *)(*(_QWORD *)(v226 + 8) + 24), **(_QWORD **)(v226 + 8));
                  v229 = sub_1C4EE9DE0((llvm::GlobalValue *)v210);
                  v230 = sub_1C4EEA81C(a5, v229);
                  *((_QWORD *)v230 + 1) = v210;
                  v231 = (unint64_t)v230 & 0xFFFFFFFFFFFFFFF8 | *(unsigned __int8 *)(a5 + 133);
                  v233 = (_QWORD *)v228[1];
                  v232 = v228[2];
                  if ((unint64_t)v233 >= v232)
                  {
                    v235 = (_QWORD *)*v228;
                    v236 = ((uint64_t)v233 - *v228) >> 4;
                    v237 = v236 + 1;
                    if ((unint64_t)(v236 + 1) >> 60)
                      goto LABEL_625;
                    v238 = v232 - (_QWORD)v235;
                    if (v238 >> 3 > v237)
                      v237 = v238 >> 3;
                    if ((unint64_t)v238 >= 0x7FFFFFFFFFFFFFF0)
                      v239 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v239 = v237;
                    if (v239)
                    {
                      if (v239 >> 60)
                        goto LABEL_626;
                      v240 = (char *)operator new(16 * v239);
                    }
                    else
                    {
                      v240 = 0;
                    }
                    v241 = &v240[16 * v236];
                    *(_QWORD *)v241 = v227;
                    *((_QWORD *)v241 + 1) = v231;
                    v242 = v241;
                    if (v233 == v235)
                    {
                      a5 = v352;
                    }
                    else
                    {
                      a5 = v352;
                      do
                      {
                        *((_OWORD *)v242 - 1) = *((_OWORD *)v233 - 1);
                        v242 -= 16;
                        v233 -= 2;
                      }
                      while (v233 != v235);
                      v233 = (_QWORD *)*v228;
                    }
                    v243 = &v240[16 * v239];
                    v234 = v241 + 16;
                    *v228 = v242;
                    v228[1] = v241 + 16;
                    v228[2] = v243;
                    if (v233)
                      operator delete(v233);
                  }
                  else
                  {
                    *v233 = v227;
                    v233[1] = v231;
                    v234 = v233 + 2;
                  }
                  v228[1] = v234;
                }
                v221 += 8;
              }
              while (v221 != v222);
            }
          }
        }
        if (*(_QWORD *)(v210 + 48))
        {
          v252 = 0;
          v244 = v350;
          v245 = v348;
          v246 = v344;
        }
        else
        {
          v244 = v350;
          v245 = v348;
          v246 = v344;
          if ((*(_DWORD *)(v210 + 32) & 0xF) == 6
            || *(_BYTE *)(v210 + 16) == 3
            && (Section = llvm::GlobalValue::getSection((llvm::GlobalValue *)v210), v248 == 12)
            && (*(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
              ? (v260 = *((unsigned int *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
              : (v260 = 0),
                v260))
          {
LABEL_480:
            v252 = 0;
          }
          else
          {
            v249 = *(_DWORD *)(v210 + 32);
            if ((v249 & 0xFu) - 5 < 4 || (v252 = 0, ((1 << (v249 & 0xF)) & 0x614) == 0))
            {
              v250 = *(llvm::Module **)(v210 + 40);
              if (v250)
              {
                SemanticInterposition = llvm::Module::getSemanticInterposition(v250);
                v249 = *(_DWORD *)(v210 + 32);
                if (SemanticInterposition && (v249 & 0x4000) == 0)
                  goto LABEL_480;
              }
              if ((v249 & 0xF) == 1)
                goto LABEL_480;
              v252 = (v249 & 0x300) != 512;
            }
          }
        }
        v253 = v245 | v246 | v244 | v336;
        v254 = *(_BYTE *)(v210 + 80) & 1;
        VCallVisibility = llvm::GlobalObject::getVCallVisibility((llvm::GlobalObject *)v210);
        if (v252 && v254 == 0)
          v256 = 2;
        else
          v256 = 0;
        v257 = v256 | v252 | (4 * v254) | (8 * (VCallVisibility & 3));
        sub_1C61A8114((uint64_t)&v418);
        v258 = v422;
        v351 = v421;
        v421 = 0uLL;
        *(_QWORD *)&v422 = 0;
        v259 = operator new();
        *(_DWORD *)(v259 + 8) = 2;
        *(_DWORD *)(v259 + 12) = v253;
        *(_QWORD *)(v259 + 24) = 0;
        *(_QWORD *)(v259 + 32) = 0;
        *(_QWORD *)(v259 + 16) = 0;
        *(_OWORD *)(v259 + 40) = v351;
        *(_QWORD *)v259 = &unk_1E8139E20;
        *(_QWORD *)(v259 + 56) = v258;
        *(_QWORD *)(v259 + 64) = 0;
        *(_DWORD *)(v259 + 72) = v257;
        if (v338)
        {
          *(_QWORD *)&v445 = sub_1C4EE9DE0((llvm::GlobalValue *)v210);
          sub_1C61A7854((uint64_t)v356, (uint64_t *)&v445, (uint64_t)&v428);
        }
        v208 = v325 + 8;
        v209 = v342;
        if (v340)
          *(_WORD *)(v259 + 12) |= 0x40u;
        if (*(_QWORD *)&v447[0] != *((_QWORD *)&v447[0] + 1))
        {
          v428 = 0;
          v429 = 0;
          v430 = 0;
          sub_1C4EEC644(&v428, *(const void **)&v447[0], *((uint64_t *)&v447[0] + 1), (uint64_t)(*((_QWORD *)&v447[0] + 1) - *(_QWORD *)&v447[0]) >> 4);
          sub_1C4EEBF94(v259, (uint64_t)&v428);
          if (v428)
          {
            v429 = (uint64_t)v428;
            operator delete(v428);
          }
        }
        *(_QWORD *)&v445 = v259;
        sub_1C61A7548(a5, (llvm::GlobalValue *)v210, (uint64_t *)&v445);
        if ((_QWORD)v445)
          (*(void (**)(_QWORD))(*(_QWORD *)v445 + 8))(v445);
        if (*(_QWORD *)&v447[0])
        {
          *((_QWORD *)&v447[0] + 1) = *(_QWORD *)&v447[0];
          operator delete(*(void **)&v447[0]);
        }
        if (*((_QWORD *)&v414 + 1) != (_QWORD)v414)
          free(*((void **)&v414 + 1));
        sub_1C6176BF8(&v418);
      }
      v209 = *(_QWORD *)(v209 + 8);
    }
    while (v209 != v208);
  }
  v261 = *(_QWORD *)(v325 + 48);
  if (v261 != v325 + 40)
  {
    v262 = (_QWORD *)(v352 + 8);
    do
    {
      if (v261)
        v263 = v261 - 48;
      else
        v263 = 0;
      llvm::GlobalValue::getSection((llvm::GlobalValue *)v263);
      v264 = *(_DWORD *)(v263 + 32);
      if (v265)
        v266 = (*(_DWORD *)(v263 + 32) & 0xFu) - 7 >= 2;
      else
        v266 = 1;
      v267 = !v266;
      if ((*(_DWORD *)(v263 + 32) & 0xF) != 3)
        goto LABEL_531;
      v268 = *(_DWORD *)(v263 + 32) & 0xC0;
      if (v268 == 128)
      {
        v269 = *(_DWORD *)(v263 + 32) & 0x3F;
        if (v267)
          v270 = 64;
        else
          v270 = 0;
        v271 = (v264 >> 6) & 0x100;
LABEL_539:
        v272 = 512;
        goto LABEL_540;
      }
      if (*(_BYTE *)(v263 + 16) != 3 || (*(_BYTE *)(v263 + 80) & 1) != 0)
      {
        v272 = 0;
        v269 = *(_DWORD *)(v263 + 32) & 0x3F;
        if (v267)
          v270 = 64;
        else
          v270 = 0;
        v271 = (v264 >> 6) & 0x100;
        if (v268)
          goto LABEL_539;
      }
      else
      {
LABEL_531:
        v272 = 0;
        v269 = *(_DWORD *)(v263 + 32) & 0x3F;
        if (v267)
          v270 = 64;
        else
          v270 = 0;
        v271 = (v264 >> 6) & 0x100;
      }
LABEL_540:
      v273 = v270 | v271 | v269 | v272;
      v274 = operator new();
      *(_DWORD *)(v274 + 8) = 0;
      *(_DWORD *)(v274 + 12) = v273;
      *(_OWORD *)(v274 + 16) = 0u;
      *(_OWORD *)(v274 + 32) = 0u;
      *(_OWORD *)(v274 + 48) = 0u;
      *(_QWORD *)v274 = &unk_1E8139E40;
      *(_QWORD *)(v274 + 64) = 0;
      *(_QWORD *)(v274 + 72) = 0;
      v275 = (llvm::GlobalValue *)llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)v263);
      v276 = sub_1C4EE9DE0(v275);
      v277 = (_QWORD *)*v262;
      if (!*v262)
        goto LABEL_551;
      v278 = (_QWORD *)(v352 + 8);
      do
      {
        v279 = v277[4];
        v280 = v279 >= v276;
        if (v279 >= v276)
          v281 = v277;
        else
          v281 = v277 + 1;
        if (v280)
          v278 = v277;
        v277 = (_QWORD *)*v281;
      }
      while (*v281);
      if (v278 == v262 || v278[4] > v276)
LABEL_551:
        v278 = (_QWORD *)(v352 + 8);
      if (v278 == v262)
        v282 = 0;
      else
        v282 = (unint64_t)(v278 + 4);
      v283 = v282 & 0xFFFFFFFFFFFFFFF8;
      v284 = v283 | *(unsigned __int8 *)(v352 + 133);
      v285 = **(_QWORD **)(v283 + 24);
      *(_QWORD *)(v274 + 64) = v284;
      *(_QWORD *)(v274 + 72) = v285;
      if (v267)
      {
        v418 = (__int128 *)sub_1C4EE9DE0((llvm::GlobalValue *)v263);
        sub_1C61A7854((uint64_t)v356, (uint64_t *)&v418, (uint64_t)&v414);
      }
      *(_QWORD *)&v414 = v274;
      sub_1C61A7548(v352, (llvm::GlobalValue *)v263, (uint64_t *)&v414);
      if ((_QWORD)v414)
        (*(void (**)(_QWORD))(*(_QWORD *)v414 + 8))(v414);
      v261 = *(_QWORD *)(v261 + 8);
    }
    while (v261 != v325 + 40);
  }
  if (v359 == v358)
    v286 = (uint64_t *)((char *)&v360 + 4);
  else
    v286 = &v360;
  v287 = *(unsigned int *)v286;
  if ((_DWORD)v287)
  {
    v288 = 8 * v287;
    v289 = v359;
    v290 = (llvm::ModuleSummaryIndex *)v352;
    while (*(_QWORD *)v289 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v289 += 8;
      v288 -= 8;
      if (!v288)
        goto LABEL_575;
    }
  }
  else
  {
    v289 = v359;
    v290 = (llvm::ModuleSummaryIndex *)v352;
  }
  v291 = &v359[8 * v287];
  if (v289 != v291)
  {
    v292 = *(llvm::GlobalValue **)v289;
LABEL_571:
    v293 = sub_1C4EE9DE0(v292);
    GlobalValueSummary = llvm::ModuleSummaryIndex::getGlobalValueSummary(v290, v293);
    *(_WORD *)(GlobalValueSummary + 12) |= 0x40u;
    v295 = (unint64_t *)(v289 + 8);
    while (v295 != (unint64_t *)v291)
    {
      v296 = *v295++;
      v292 = (llvm::GlobalValue *)v296;
      if (v296 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v289 = (char *)(v295 - 1);
        goto LABEL_571;
      }
    }
  }
LABEL_575:
  sub_1C4EE9E90((uint64_t)v290, (int *)"llvm.used", 9uLL);
  sub_1C4EE9E90((uint64_t)v290, (int *)"llvm.compiler.used", 0x12uLL);
  sub_1C4EE9E90((uint64_t)v290, (int *)"llvm.global_ctors", 0x11uLL);
  sub_1C4EE9E90((uint64_t)v290, (int *)"llvm.global_dtors", 0x11uLL);
  sub_1C4EE9E90((uint64_t)v290, (int *)"llvm.global.annotations", 0x17uLL);
  v297 = *(_QWORD **)v290;
  if (*(llvm::ModuleSummaryIndex **)v290 != (llvm::ModuleSummaryIndex *)((char *)v290 + 8))
  {
    v298 = v356[0];
    do
    {
      v299 = (uint64_t *)v297[7];
      if (v299 != (uint64_t *)v297[8])
      {
        v300 = *v299;
        if (v354)
        {
          v301 = *(_QWORD **)(v300 + 40);
          v302 = *(_QWORD **)(v300 + 48);
          if (v302 != v301)
          {
            v303 = v357 - 1;
            do
            {
              if (v357)
              {
                v304 = *(_QWORD *)(*v301 & 0xFFFFFFFFFFFFFFF8);
                v305 = (37 * v304) & v303;
                v306 = *(_QWORD *)(v298 + 8 * v305);
                if (v304 == v306)
                  goto LABEL_600;
                v307 = 1;
                while (v306 != -1)
                {
                  v308 = v305 + v307++;
                  v305 = v308 & v303;
                  v306 = *(_QWORD *)(v298 + 8 * v305);
                  if (v304 == v306)
                    goto LABEL_600;
                }
              }
              ++v301;
            }
            while (v301 != v302);
          }
          if (v300)
          {
            if (*(_DWORD *)(v300 + 8) == 1)
            {
              v309 = *(_QWORD **)(v300 + 80);
              v310 = *(_QWORD **)(v300 + 88);
              if (v310 != v309)
              {
                v311 = v357 - 1;
                do
                {
                  if (v357)
                  {
                    v312 = *(_QWORD *)(*v309 & 0xFFFFFFFFFFFFFFF8);
                    v313 = (37 * v312) & v311;
                    v314 = *(_QWORD *)(v298 + 8 * v313);
                    if (v312 == v314)
                      goto LABEL_600;
                    v315 = 1;
                    while (v314 != -1)
                    {
                      v316 = v313 + v315++;
                      v313 = v316 & v311;
                      v314 = *(_QWORD *)(v298 + 8 * v313);
                      if (v312 == v314)
                        goto LABEL_600;
                    }
                  }
                  v309 += 2;
                }
                while (v309 != v310);
              }
            }
          }
        }
        else
        {
LABEL_600:
          *(_WORD *)(v300 + 12) |= 0x40u;
        }
      }
      v317 = (_QWORD *)v297[1];
      if (v317)
      {
        do
        {
          v318 = v317;
          v317 = (_QWORD *)*v317;
        }
        while (v317);
      }
      else
      {
        do
        {
          v318 = (_QWORD *)v297[2];
          v28 = *v318 == (_QWORD)v297;
          v297 = v318;
        }
        while (!v28);
      }
      v297 = v318;
    }
    while (v318 != (_QWORD *)((char *)v290 + 8));
  }
  v319 = qword_1ED82E838;
  if (byte_1ED82E847 >= 0)
    v319 = byte_1ED82E847 & 0x7F;
  if (v319)
  {
    v382.__val_ = 0;
    v382.__cat_ = std::system_category();
    if (byte_1ED82E847 >= 0)
      v320 = byte_1ED82E847 & 0x7F;
    else
      v320 = qword_1ED82E838;
    if (byte_1ED82E847 >= 0)
      v321 = &qword_1ED82E830;
    else
      v321 = (uint64_t *)qword_1ED82E830;
    llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v414, v321, v320, (uint64_t)&v382, 0);
    if (v382.__val_)
    {
      v406[0] = (uint64_t)"Failed to open dot file ";
      WORD4(v408) = 259;
      *(_WORD *)&v405[8] = 260;
      v403[0] = (uint64_t)&qword_1ED82E830;
      sub_1C6131AAC(v406, v403, (uint64_t)&v445);
      v398[0] = (uint64_t)": ";
      LOWORD(v401) = 259;
      sub_1C6131AAC((uint64_t *)&v445, v398, (uint64_t)v447);
      std::error_code::message(&v386, &v382);
      LOWORD(v396) = 260;
      v393[0] = (uint64_t)&v386;
      sub_1C6131AAC((uint64_t *)v447, v393, (uint64_t)&v428);
      v389[0] = (uint64_t)"\n";
      WORD4(v391) = 259;
      sub_1C6131AAC((uint64_t *)&v428, v389, (uint64_t)&v418);
      llvm::report_fatal_error((uint64_t)&v418, 1);
    }
    v418 = 0;
    v419 = 0;
    v420 = 0;
    llvm::ModuleSummaryIndex::exportToDot((uint64_t)v290, (llvm::raw_ostream *)&v414, (uint64_t)&v418);
    MEMORY[0x1CAA32FB4](v418, 8);
    llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v414);
  }
  if (v440 != (char *)&v442)
    free(v440);
  MEMORY[0x1CAA32FB4](v356[0], 8);
  if (v437 != (uint64_t *)v439)
    free(v437);
  if (v359 != v358)
    free(v359);
}

uint64_t sub_1C4EE9DE0(llvm::GlobalValue *a1)
{
  int *p_p;
  size_t size;
  uint64_t v3;
  std::string __p;
  int v6[4];
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  llvm::GlobalValue::getGlobalIdentifier(a1, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = (int *)&__p;
  else
    p_p = (int *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v7 = xmmword_1C85F4BB0;
  v8 = 0;
  llvm::MD5::update((int *)&v7, p_p, size);
  llvm::MD5::final((int *)&v7, v6);
  v3 = *(_QWORD *)v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v3;
}

int *sub_1C4EE9E90(uint64_t a1, int *a2, size_t a3)
{
  int *result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v19 = xmmword_1C85F4BB0;
  v20 = 0;
  llvm::MD5::update((int *)&v19, a2, a3);
  result = llvm::MD5::final((int *)&v19, (int *)&v18);
  v7 = *(_QWORD **)(a1 + 8);
  v6 = (_QWORD *)(a1 + 8);
  v5 = v7;
  if (!v7)
    goto LABEL_12;
  v8 = v6;
  do
  {
    v9 = v5[4];
    v10 = v9 >= v18;
    if (v9 >= v18)
      v11 = v5;
    else
      v11 = v5 + 1;
    if (v10)
      v8 = v5;
    v5 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v8 == v6 || v8[4] > v18)
LABEL_12:
    v8 = v6;
  if (v8 == v6)
    v12 = 0;
  else
    v12 = (uint64_t)(v8 + 4);
  v13 = v12 & 0xFFFFFFFFFFFFFFF8;
  if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v14 = *(uint64_t **)(v13 + 24);
    v15 = *(_QWORD *)(v13 + 32) - (_QWORD)v14;
    if (v15)
    {
      v16 = 8 * (v15 >> 3);
      do
      {
        v17 = *v14++;
        *(_WORD *)(v17 + 12) |= 0x80u;
        v16 -= 8;
      }
      while (v16);
    }
  }
  return result;
}

uint64_t sub_1C4EE9F88(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  uint64_t v5;

  llvm::initializeBlockFrequencyInfoWrapperPassPass(a1, a2);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v3);
  llvm::initializeStackSafetyInfoWrapperPassPass(a1, v4);
  v5 = operator new();
  *(_QWORD *)v5 = "Module Summary Analysis";
  *(_QWORD *)(v5 + 8) = 23;
  *(_QWORD *)(v5 + 16) = "module-summary-analysis";
  *(_QWORD *)(v5 + 24) = 23;
  *(_QWORD *)(v5 + 32) = &llvm::ModuleSummaryIndexWrapperPass::ID;
  *(_WORD *)(v5 + 40) = 256;
  *(_BYTE *)(v5 + 42) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = llvm::callDefaultCtor<llvm::ModuleSummaryIndexWrapperPass>;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v5, 1);
  return v5;
}

llvm::ModuleSummaryIndexWrapperPass *llvm::createModuleSummaryIndexWrapperPass(llvm *this)
{
  llvm::ModuleSummaryIndexWrapperPass *v1;

  v1 = (llvm::ModuleSummaryIndexWrapperPass *)operator new();
  return llvm::ModuleSummaryIndexWrapperPass::ModuleSummaryIndexWrapperPass(v1);
}

uint64_t sub_1C4EEA05C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Module summary info";
  *(_QWORD *)(v2 + 8) = 19;
  *(_QWORD *)(v2 + 16) = "module-summary-info";
  *(_QWORD *)(v2 + 24) = 19;
  *(_QWORD *)(v2 + 32) = &llvm::ImmutableModuleSummaryIndexWrapperPass::ID;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::ImmutableModuleSummaryIndexWrapperPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *sub_1C4EEA0EC(_QWORD *result, int a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *((_DWORD *)result + 4) = v4;
    result = operator new(8 * v4, (std::align_val_t)8uLL);
    *v2 = result;
    v2[1] = 0;
    v5 = *((unsigned int *)v2 + 4);
    if ((_DWORD)v5)
      return memset(result, 255, 8 * v5);
  }
  else
  {
    *result = 0;
    result[1] = 0;
    *((_DWORD *)result + 4) = 0;
  }
  return result;
}

uint64_t sub_1C4EEA178(uint64_t a1, const llvm::Function *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t i;
  uint64_t j;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = 1;
  for (i = 80; i != 144; i += 16)
    *(_QWORD *)(a1 + i) = -4096;
  *(_QWORD *)(a1 + 144) = 1;
  for (j = 152; j != 248; j += 24)
    *(_OWORD *)(a1 + j) = xmmword_1C85F22B0;
  llvm::BranchProbabilityInfo::calculate(a1, a2, a3, a4, a5, a6);
  return a1;
}

uint64_t sub_1C4EEA1FC(uint64_t a1, uint64_t a2, _QWORD *a3, llvm::SmallPtrSetImplBase *this)
{
  unsigned int v8;
  char v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  llvm::GlobalValue **v18;
  uint64_t v19;
  llvm::GlobalValue *v20;
  unsigned int v21;
  BOOL v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[34];

  v31[32] = *MEMORY[0x1E0C80C00];
  v29 = v31;
  v30 = 0x2000000000;
  sub_1C4774094(this, a2);
  v8 = 0;
  if (v9)
  {
    *(_QWORD *)v29 = a2;
    v8 = v30 + 1;
    LODWORD(v30) = v30 + 1;
  }
  v10 = 0;
  while (v8)
  {
    while (1)
    {
      v11 = *((_QWORD *)v29 + --v8);
      LODWORD(v30) = v8;
      v12 = *(unsigned __int8 *)(v11 + 16);
      v13 = v12 - 33 > 0x33 || ((1 << (v12 - 33)) & 0x8000000000041) == 0;
      v14 = v13 ? 0 : v11;
      v15 = v12 >= 0x1C ? v14 : 0;
      v16 = *(_DWORD *)(v11 + 20);
      if ((v16 & 0x40000000) == 0)
        break;
      v18 = *(llvm::GlobalValue ***)(v11 - 8);
      v17 = v16 & 0x7FFFFFF;
      if (!v17)
        goto LABEL_15;
LABEL_18:
      v19 = 32 * v17;
      do
      {
        v20 = *v18;
        v21 = *((unsigned __int8 *)*v18 + 16);
        if (*v18)
          v22 = v21 - 21 >= 7;
        else
          v22 = 0;
        if (v22)
        {
          if (v21 == 4)
          {
            v10 = 1;
          }
          else if (v21 <= 3)
          {
            if (!v15 || v18 != (llvm::GlobalValue **)(v15 - 32))
            {
              v25 = sub_1C4EE9DE0(*v18);
              v26 = sub_1C4EEA81C(a1, v25);
              *((_QWORD *)v26 + 1) = v20;
              v28 = (unint64_t)v26 & 0xFFFFFFFFFFFFFFF8 | *(unsigned __int8 *)(a1 + 133);
              sub_1C4EEA454(a3, &v28);
            }
          }
          else
          {
            sub_1C4774094(this, (uint64_t)*v18);
            if (v23)
            {
              v24 = v30;
              if (v30 >= (unint64_t)HIDWORD(v30))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, (uint64_t)v31, v30 + 1, 8);
                v24 = v30;
              }
              *((_QWORD *)v29 + v24) = v20;
              LODWORD(v30) = v30 + 1;
            }
          }
        }
        v18 += 4;
        v19 -= 32;
      }
      while (v19);
      v8 = v30;
      if (!(_DWORD)v30)
        goto LABEL_36;
    }
    v17 = v16 & 0x7FFFFFF;
    v18 = (llvm::GlobalValue **)(v11 - 32 * v17);
    if (v17)
      goto LABEL_18;
LABEL_15:
    ;
  }
LABEL_36:
  if (v29 != v31)
    free(v29);
  return v10 & 1;
}

void sub_1C4EEA454(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _BYTE v15[31];

  sub_1C61A75D0((uint64_t)a1, a2, (uint64_t)v15);
  if (v15[16])
  {
    v5 = (char *)a1[4];
    v4 = a1[5];
    if ((unint64_t)v5 >= v4)
    {
      v7 = (char *)a1[3];
      v8 = (v5 - v7) >> 3;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61)
        abort();
      v10 = v4 - (_QWORD)v7;
      if (v10 >> 2 > v9)
        v9 = v10 >> 2;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 >> 61)
          sub_1C4764EE4();
        v12 = (char *)operator new(8 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[8 * v8];
      *(_QWORD *)v13 = *a2;
      v6 = v13 + 8;
      while (v5 != v7)
      {
        v14 = *((_QWORD *)v5 - 1);
        v5 -= 8;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      a1[3] = v13;
      a1[4] = v6;
      a1[5] = &v12[8 * v11];
      if (v7)
        operator delete(v7);
    }
    else
    {
      *(_QWORD *)v5 = *a2;
      v6 = v5 + 8;
    }
    a1[4] = v6;
  }
}

void sub_1C4EEA558(int *a1@<X0>, int *a2@<X1>, int *a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, __int128 *a6@<X5>, __int128 *a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, __int128 *a13)
{
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  void *__p[2];
  uint64_t v34;
  void *v35[2];
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void **v43[2];

  v19 = operator new();
  v20 = *a1;
  v21 = *a2;
  v22 = *a3;
  v23 = *a4;
  v41 = *(_OWORD *)a5;
  v42 = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  v39 = *a6;
  v40 = *((_QWORD *)a6 + 2);
  *(_QWORD *)a6 = 0;
  *((_QWORD *)a6 + 1) = 0;
  *((_QWORD *)a6 + 2) = 0;
  v37 = *a7;
  v38 = *((_QWORD *)a7 + 2);
  *(_QWORD *)a7 = 0;
  *((_QWORD *)a7 + 1) = 0;
  *((_QWORD *)a7 + 2) = 0;
  *(_OWORD *)v35 = *(_OWORD *)a8;
  v36 = *(_QWORD *)(a8 + 16);
  *(_QWORD *)a8 = 0;
  *(_QWORD *)(a8 + 8) = 0;
  *(_QWORD *)(a8 + 16) = 0;
  *(_OWORD *)__p = *(_OWORD *)a10;
  v34 = *(_QWORD *)(a10 + 16);
  *(_QWORD *)a10 = 0;
  *(_QWORD *)(a10 + 8) = 0;
  *(_QWORD *)(a10 + 16) = 0;
  v31 = *(_OWORD *)a11;
  v32 = *(_QWORD *)(a11 + 16);
  *(_QWORD *)a11 = 0;
  *(_QWORD *)(a11 + 8) = 0;
  *(_QWORD *)(a11 + 16) = 0;
  v29 = *(_OWORD *)a12;
  v30 = *(_QWORD *)(a12 + 16);
  *(_QWORD *)a12 = 0;
  *(_QWORD *)(a12 + 8) = 0;
  *(_QWORD *)(a12 + 16) = 0;
  v27 = *a13;
  v28 = *((_QWORD *)a13 + 2);
  *((_QWORD *)a13 + 1) = 0;
  *((_QWORD *)a13 + 2) = 0;
  *(_QWORD *)a13 = 0;
  *a9 = sub_1C61A8204(v19, v20, v21, v22, v23, &v41, (uint64_t)&v39, (uint64_t *)&v37, (__int128 *)v35, (__int128 *)__p, &v31, &v29, (uint64_t)&v27);
  v43[0] = (void **)&v27;
  sub_1C4EEB7D8(v43);
  v43[0] = (void **)&v29;
  sub_1C4EEBCC8(v43);
  v43[0] = (void **)&v31;
  sub_1C4EEBCC8(v43);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
  if ((_QWORD)v37)
  {
    *((_QWORD *)&v37 + 1) = v37;
    operator delete((void *)v37);
  }
  if ((_QWORD)v39)
  {
    *((_QWORD *)&v39 + 1) = v39;
    operator delete((void *)v39);
  }
  if ((_QWORD)v41)
  {
    *((_QWORD *)&v41 + 1) = v41;
    operator delete((void *)v41);
  }
}

void sub_1C4EEA75C(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  v9 = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = v9;
  if (v4)
  {
    sub_1C61A77A8(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
    memset_pattern16(v9, &unk_1C85F4BC0, 8 * v10);
}

char *sub_1C4EEA81C(uint64_t a1, unint64_t a2)
{
  const char *v2;
  char *v3;
  _QWORD v5[2];
  _QWORD v6[3];
  unint64_t v7;
  void **v8;

  v7 = a2;
  if (*(_BYTE *)(a1 + 133))
  {
    v2 = 0;
  }
  else
  {
    v5[1] = 0;
    v2 = "";
  }
  v5[0] = v2;
  memset(v6, 0, sizeof(v6));
  v3 = sub_1C4EEA894((uint64_t **)a1, &v7, &v7, (uint64_t)v5) + 32;
  v8 = (void **)v6;
  sub_1C4764BBC(&v8);
  return v3;
}

char *sub_1C4EEA894(uint64_t **a1, unint64_t *a2, _QWORD *a3, uint64_t a4)
{
  char *v7;
  uint64_t **v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  char *v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t *v15;

  v8 = a1 + 1;
  v7 = (char *)a1[1];
  if (v7)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = v7;
        v11 = *((_QWORD *)v7 + 4);
        if (v9 >= v11)
          break;
        v7 = *(char **)v10;
        v8 = (uint64_t **)v10;
        if (!*(_QWORD *)v10)
          goto LABEL_10;
      }
      if (v11 >= v9)
        break;
      v7 = (char *)*((_QWORD *)v10 + 1);
      if (!v7)
      {
        v8 = (uint64_t **)(v10 + 8);
        goto LABEL_10;
      }
    }
  }
  else
  {
    v10 = (char *)(a1 + 1);
LABEL_10:
    v12 = v10;
    v10 = (char *)operator new(0x50uLL);
    v13 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(v10 + 40) = *(_OWORD *)a4;
    *((_QWORD *)v10 + 4) = *a3;
    *(_OWORD *)(v10 + 56) = v13;
    *((_QWORD *)v10 + 9) = *(_QWORD *)(a4 + 32);
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = v12;
    *v8 = (uint64_t *)v10;
    v14 = (uint64_t *)**a1;
    v15 = (uint64_t *)v10;
    if (v14)
    {
      *a1 = v14;
      v15 = *v8;
    }
    sub_1C4768E74(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v10;
}

BOOL sub_1C4EEA990(_QWORD *a1, uint64_t *a2)
{
  int v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  unsigned __int8 v18;

  sub_1C61A7854((uint64_t)a1, a2, (uint64_t)&v17);
  v4 = v18;
  if (v18)
  {
    v6 = (uint64_t *)a1[4];
    v5 = a1[5];
    if ((unint64_t)v6 >= v5)
    {
      v8 = (uint64_t *)a1[3];
      v9 = v6 - v8;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
        abort();
      v11 = v5 - (_QWORD)v8;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 61)
          sub_1C4764EE4();
        v13 = (char *)operator new(8 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = (uint64_t *)&v13[8 * v9];
      *v14 = *a2;
      v7 = v14 + 1;
      while (v6 != v8)
      {
        v15 = *--v6;
        *--v14 = v15;
      }
      a1[3] = v14;
      a1[4] = v7;
      a1[5] = &v13[8 * v12];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v6 = *a2;
      v7 = v6 + 1;
    }
    a1[4] = v7;
  }
  return v4 != 0;
}

void sub_1C4EEAAA4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _OWORD *v33;
  _OWORD *v34;
  _OWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  __int128 v45;
  __int128 v46;
  char *v47;
  char *v48;
  char *v49;
  __int128 v50;

  *(_QWORD *)&v45 = a3;
  *((_QWORD *)&v45 + 1) = a1;
  v5 = *(_DWORD *)(a2 + 20);
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 == 84)
  {
    v7 = 0;
  }
  else if (v6 == 39)
  {
    v7 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    v7 = 2;
  }
  v8 = a2 - 32 * (v5 & 0x7FFFFFF);
  if (v5 < 0 && (v42 = *(_QWORD *)(v8 - 8), (v42 & 0xFFFFFFFF0) != 0))
    v9 = (*(_DWORD *)(v8 - 12) - *(_DWORD *)(v8 - v42));
  else
    v9 = 0;
  v10 = a2 - 32 * v7 - 32 * v9 - 32;
  v11 = (uint64_t *)(v8 + 32);
  if (v8 + 32 != v10)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (1)
    {
      v15 = *v11;
      v16 = *v11 && *(_BYTE *)(*v11 + 16) == 16;
      if (!v16 || *(_DWORD *)(v15 + 32) > 0x40u)
        break;
      v17 = *(_QWORD *)(v15 + 24);
      if (v14 >= v12)
      {
        v19 = (v14 - v13) >> 3;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 61)
          goto LABEL_75;
        if ((v12 - v13) >> 2 > v20)
          v20 = (v12 - v13) >> 2;
        if ((unint64_t)(v12 - v13) >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        if (v21)
        {
          if (v21 >> 61)
            goto LABEL_76;
          v22 = (char *)operator new(8 * v21);
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[8 * v19];
        *(_QWORD *)v23 = v17;
        v18 = v23 + 8;
        while (v14 != v13)
        {
          v24 = *((_QWORD *)v14 - 1);
          v14 -= 8;
          *((_QWORD *)v23 - 1) = v24;
          v23 -= 8;
        }
        v12 = &v22[8 * v21];
        if (v13)
          operator delete(v13);
        v13 = v23;
      }
      else
      {
        *(_QWORD *)v14 = v17;
        v18 = v14 + 8;
      }
      v11 += 4;
      v14 = v18;
      if (v11 == (uint64_t *)v10)
        goto LABEL_34;
    }
    v50 = v45;
    sub_1C61A7B9C((uint64_t)&v46, (uint64_t)a4, (uint64_t *)&v50);
    if (!(_BYTE)v47)
      goto LABEL_71;
    v33 = (_OWORD *)a4[4];
    v32 = a4[5];
    if ((unint64_t)v33 < v32)
    {
      *v33 = v50;
      v34 = v33 + 1;
LABEL_70:
      a4[4] = v34;
LABEL_71:
      if (v13)
        operator delete(v13);
      return;
    }
    v35 = (_OWORD *)a4[3];
    v36 = v33 - v35;
    v37 = v36 + 1;
    if (!((unint64_t)(v36 + 1) >> 60))
    {
      v38 = v32 - (_QWORD)v35;
      if (v38 >> 3 > v37)
        v37 = v38 >> 3;
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
        v39 = 0xFFFFFFFFFFFFFFFLL;
      else
        v39 = v37;
      if (v39)
      {
        if (v39 >> 60)
LABEL_76:
          sub_1C4764EE4();
        v40 = (char *)operator new(16 * v39);
      }
      else
      {
        v40 = 0;
      }
      v41 = &v40[16 * v36];
      *(_OWORD *)v41 = v50;
      v34 = v41 + 16;
      if (v33 != v35)
      {
        do
        {
          *((_OWORD *)v41 - 1) = *(v33 - 1);
          v41 -= 16;
          --v33;
        }
        while (v33 != v35);
        v33 = (_OWORD *)a4[3];
      }
      a4[3] = v41;
      a4[4] = v34;
      a4[5] = &v40[16 * v39];
      if (v33)
        operator delete(v33);
      goto LABEL_70;
    }
LABEL_75:
    abort();
  }
  v18 = 0;
  v13 = 0;
  v12 = 0;
LABEL_34:
  v46 = v45;
  v47 = v13;
  v48 = v18;
  v49 = v12;
  *(_QWORD *)&v50 = 0;
  if ((sub_1C4EEB0B0(*(_QWORD *)a5, *(_DWORD *)(a5 + 16), &v46, &v50) & 1) == 0)
  {
    v25 = *(_DWORD *)(a5 + 8);
    v26 = *(_DWORD *)(a5 + 16);
    if (4 * v25 + 4 >= 3 * v26)
    {
      v26 *= 2;
    }
    else if (v26 + ~v25 - *(_DWORD *)(a5 + 12) > v26 >> 3)
    {
      goto LABEL_37;
    }
    sub_1C4EEB2C4(a5, v26);
    *(_QWORD *)&v50 = 0;
    sub_1C4EEB0B0(*(_QWORD *)a5, *(_DWORD *)(a5 + 16), &v46, &v50);
LABEL_37:
    v27 = v50;
    ++*(_DWORD *)(a5 + 8);
    v28 = *(_QWORD *)(v27 + 16);
    v29 = *(_QWORD *)(v27 + 24);
    if (v29 == v28)
    {
      if (!*(_QWORD *)v27 && *(_QWORD *)(v27 + 8) == -1)
        goto LABEL_40;
    }
    else if (v29 - v28 < 0)
    {
      goto LABEL_75;
    }
    --*(_DWORD *)(a5 + 12);
LABEL_40:
    *(_OWORD *)v27 = v46;
    if ((__int128 *)v27 != &v46)
      sub_1C4DE4490((_QWORD *)(v27 + 16), v13, v18, (v18 - v13) >> 3);
    v30 = *(_QWORD *)(a5 + 32);
    if (v30 >= *(_QWORD *)(a5 + 40))
    {
      v31 = sub_1C4EEB46C((uint64_t *)(a5 + 24), (uint64_t)&v46);
    }
    else
    {
      *(_OWORD *)v30 = v46;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0;
      *(_QWORD *)(v30 + 16) = 0;
      sub_1C4DFE394((_QWORD *)(v30 + 16), v47, (uint64_t)v48, (v48 - v47) >> 3);
      v31 = v30 + 40;
    }
    *(_QWORD *)(a5 + 32) = v31;
    v13 = v47;
  }
  if (v13)
  {
    v48 = v13;
    operator delete(v13);
  }
}

void *sub_1C4EEAEBC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *result;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61A7AAC((_QWORD *)a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
    return memset(result, 255, 8 * v10);
  return result;
}

_OWORD *sub_1C4EEAF78(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result++ = xmmword_1C640F7C0;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = (uint64_t *)v4;
      do
      {
        v14 = *v13;
        v15 = v13[1];
        if (*v13)
          v16 = 0;
        else
          v16 = v15 > 0xFFFFFFFFFFFFFFFDLL;
        if (!v16)
        {
          v19 = 0;
          sub_1C61A7C2C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, v15, &v19);
          *v19 = *(_OWORD *)v13;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    v18 = 16 * v17;
    do
    {
      *result++ = xmmword_1C640F7C0;
      v18 -= 16;
    }
    while (v18);
  }
  return result;
}

uint64_t sub_1C4EEB0B0(uint64_t a1, int a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  BOOL v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  _QWORD *v31;
  uint64_t result;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  unsigned int v38;
  int v39;
  void *__s1;

  if (!a2)
  {
    v15 = 0;
    result = 0;
    goto LABEL_43;
  }
  v5 = a1;
  v7 = (_BYTE *)a3[2];
  v6 = (_BYTE *)a3[3];
  if (v6 != v7 && v6 - v7 < 0)
LABEL_47:
    abort();
  v34 = 0;
  v35 = a3;
  v8 = *a3;
  v36 = a2 - 1;
  v9 = (a2 - 1) & *a3;
  v10 = 1;
  while (1)
  {
    v11 = a3[1];
    v12 = v6 - v7;
    v39 = v10;
    if (v6 == v7)
    {
      __s1 = 0;
      v14 = 0;
    }
    else
    {
      if (v12 < 0)
        goto LABEL_47;
      v13 = (char *)operator new(v6 - v7);
      memmove(v13, v7, v12);
      __s1 = v13;
      v14 = &v13[8 * (v12 >> 3)];
    }
    v38 = v9;
    v15 = (_QWORD *)(v5 + 40 * v9);
    v17 = *v15;
    v16 = v15[1];
    v19 = (_BYTE *)v15[2];
    v18 = (_BYTE *)v15[3];
    v20 = v18 - v19;
    if (v18 == v19)
    {
      v22 = 0;
      v23 = 0;
    }
    else
    {
      if (v20 < 0)
        goto LABEL_47;
      v21 = v14;
      v22 = (char *)operator new(v20);
      memmove(v22, v19, v20);
      v23 = &v22[8 * (v20 >> 3)];
      v14 = v21;
    }
    if (v8 == v17 && v11 == v16)
    {
      v26 = __s1;
      if (v14 - (_BYTE *)__s1 != v23 - v22)
      {
        v25 = 0;
        if (!v22)
          goto LABEL_24;
LABEL_23:
        operator delete(v22);
        goto LABEL_24;
      }
      v25 = memcmp(__s1, v22, v14 - (_BYTE *)__s1) == 0;
      if (v22)
        goto LABEL_23;
    }
    else
    {
      v25 = 0;
      v26 = __s1;
      if (v22)
        goto LABEL_23;
    }
LABEL_24:
    if (v26)
      operator delete(v26);
    if (v25)
    {
      result = 1;
      goto LABEL_43;
    }
    v27 = v15[2];
    v28 = v15[3];
    if (v28 == v27)
      break;
    if (v28 - v27 < 0)
      goto LABEL_47;
LABEL_29:
    v10 = v39 + 1;
    v9 = (v38 + v39) & v36;
    a3 = v35;
    v8 = *v35;
    v7 = (_BYTE *)v35[2];
    v6 = (_BYTE *)v35[3];
    v5 = a1;
  }
  v29 = v15[1];
  if (*v15 || v29 != -1)
  {
    v30 = v29 == -2 && *v15 == 0;
    v31 = v34;
    if (v30 && v34 == 0)
      v31 = v15;
    v34 = v31;
    goto LABEL_29;
  }
  result = 0;
  if (v34)
    v15 = v34;
LABEL_43:
  *a4 = v15;
  return result;
}

char *sub_1C4EEB2C4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  int v10;
  char *v11;
  __n128 *v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  BOOL v16;
  _OWORD *v17;
  int v18;
  char *v19;
  _OWORD *v20;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = &result[40 * v10];
      do
      {
        *(_OWORD *)result = xmmword_1C640F7C0;
        *((_QWORD *)result + 3) = 0;
        *((_QWORD *)result + 4) = 0;
        *((_QWORD *)result + 2) = 0;
        result += 40;
      }
      while (result != v11);
    }
    if (!(_DWORD)v3)
LABEL_29:
      JUMPOUT(0x1CAA32FB4);
    v12 = (__n128 *)(v4 + 16);
    v13 = 40 * v3;
    while (1)
    {
      v14 = (void *)v12->n128_u64[0];
      v15 = v12->n128_u64[1];
      if (v15 != v12->n128_u64[0])
        break;
      if (v12[-1].n128_u64[0])
        v16 = 0;
      else
        v16 = v12[-1].n128_u64[1] > 0xFFFFFFFFFFFFFFFDLL;
      if (!v16)
        goto LABEL_21;
      if (v14)
        goto LABEL_17;
LABEL_18:
      v12 = (__n128 *)((char *)v12 + 40);
      v13 -= 40;
      if (!v13)
        goto LABEL_29;
    }
    if ((uint64_t)(v15 - v12->n128_u64[0]) < 0)
      abort();
LABEL_21:
    v20 = 0;
    sub_1C4EEB0B0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (__n128 *)v12[-1].n128_u64, &v20);
    v17 = v20;
    *v20 = v12[-1];
    sub_1C6184574((uint64_t)(v17 + 1), v12);
    ++*(_DWORD *)(a1 + 8);
    v14 = (void *)v12->n128_u64[0];
    if (!v12->n128_u64[0])
      goto LABEL_18;
LABEL_17:
    v12->n128_u64[1] = (unint64_t)v14;
    operator delete(v14);
    goto LABEL_18;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(_DWORD *)(a1 + 16);
  if (v18)
  {
    v19 = &result[40 * v18];
    do
    {
      *(_OWORD *)result = xmmword_1C640F7C0;
      *((_QWORD *)result + 3) = 0;
      *((_QWORD *)result + 4) = 0;
      *((_QWORD *)result + 2) = 0;
      result += 40;
    }
    while (result != v19);
  }
  return result;
}

uint64_t sub_1C4EEB46C(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  _QWORD v12[5];

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x666666666666666)
    abort();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v5 = 0x666666666666666;
  else
    v5 = v3;
  v12[4] = a1 + 2;
  if (v5 > 0x666666666666666)
    sub_1C4764EE4();
  v7 = 5 * v5;
  v8 = (char *)operator new(40 * v5);
  v9 = &v8[40 * v2];
  v12[0] = v8;
  v12[1] = v9;
  v12[3] = &v8[8 * v7];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_QWORD *)v9 + 3) = 0;
  *((_QWORD *)v9 + 4) = 0;
  *((_QWORD *)v9 + 2) = 0;
  sub_1C4DFE394((_QWORD *)v9 + 2, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  v12[2] = v9 + 40;
  sub_1C61A7D7C(a1, v12);
  v10 = a1[1];
  sub_1C61A7E10((uint64_t)v12);
  return v10;
}

_QWORD *sub_1C4EEB574(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61A805C(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -8;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1C4EEB62C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 8);
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *(_QWORD *)(a1 + 8) = 0;
    if (!(_DWORD)v2)
      return;
    v6 = *(void **)a1;
LABEL_11:
    memset_pattern16(v6, &unk_1C85F4BC0, 8 * v2);
    return;
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
  if (v5)
  {
    v7 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
    v8 = v7 | (v7 >> 2) | ((v7 | (v7 >> 2)) >> 4);
    LODWORD(v8) = (((v8 | (v8 >> 8)) >> 16) | v8 | (v8 >> 8)) + 1;
    *(_DWORD *)(a1 + 16) = v8;
    v6 = operator new(8 * v8, (std::align_val_t)8uLL);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = 0;
    v2 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v2)
      return;
    goto LABEL_11;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
}

void sub_1C4EEB714(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((_DWORD *)v4 - 2) >= 0x41u)
        {
          v6 = *((_QWORD *)v4 - 2);
          if (v6)
            MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
        }
        if (*((_DWORD *)v4 - 6) >= 0x41u)
        {
          v7 = *((_QWORD *)v4 - 4);
          if (v7)
            MEMORY[0x1CAA32F9C](v7, 0x1000C8000313F17);
        }
        v4 -= 48;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C4EEB7D8(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 3;
      do
      {
        v10 = v6;
        sub_1C4EEB714(&v10);
        if (*((_DWORD *)v6 - 2) >= 0x41u)
        {
          v8 = (uint64_t)*(v6 - 2);
          if (v8)
            MEMORY[0x1CAA32F9C](v8, 0x1000C8000313F17);
        }
        if (*((_DWORD *)v6 - 6) >= 0x41u)
        {
          v9 = (uint64_t)*(v6 - 4);
          if (v9)
            MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
        }
        v7 = v6 - 5;
        v6 -= 8;
      }
      while (v7 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned int *sub_1C4EEB8AC(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_QWORD **)result;
      v7 = 16 * v2;
      do
      {
        *v6 = -8;
        v6 += 2;
        v7 -= 16;
      }
      while (v7);
    }
  }
  else
  {
    result = (unsigned int *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    if (v5)
    {
      v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      v1[4] = v9;
      result = (unsigned int *)operator new(16 * v9, (std::align_val_t)8uLL);
      *(_QWORD *)v1 = result;
      *((_QWORD *)v1 + 1) = 0;
      v10 = v1[4];
      if ((_DWORD)v10)
      {
        v11 = 16 * v10;
        do
        {
          *(_QWORD *)result = -8;
          result += 4;
          v11 -= 16;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      v1[4] = 0;
    }
  }
  return result;
}

_QWORD *sub_1C4EEB9A8(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  v1 = result;
  v2 = *((unsigned int *)result + 4);
  v3 = *((_DWORD *)result + 2);
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    result[1] = 0;
    if ((_DWORD)v2)
      return memset((void *)*result, 255, 8 * v2);
  }
  else
  {
    MEMORY[0x1CAA32FB4](*result, 8);
    return sub_1C4EEA0EC(v1, v5);
  }
  return result;
}

unsigned int *sub_1C4EEBA40(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_OWORD **)result;
      v7 = 16 * v2;
      do
      {
        *v6++ = xmmword_1C640F7C0;
        v7 -= 16;
      }
      while (v7);
    }
  }
  else
  {
    result = (unsigned int *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    if (v5)
    {
      v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      v1[4] = v9;
      result = (unsigned int *)operator new(16 * v9, (std::align_val_t)8uLL);
      *(_QWORD *)v1 = result;
      *((_QWORD *)v1 + 1) = 0;
      v10 = v1[4];
      if ((_DWORD)v10)
      {
        v11 = 16 * v10;
        do
        {
          *(_OWORD *)result = xmmword_1C640F7C0;
          result += 4;
          v11 -= 16;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      v1[4] = 0;
    }
  }
  return result;
}

void sub_1C4EEBB44(unsigned int *a1)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  unsigned int v10;
  char *v11;

  v2 = a1[2];
  sub_1C4EEBC6C(a1);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if (v4 == a1[4])
  {
    *((_QWORD *)a1 + 1) = 0;
    if (v4)
    {
      v5 = *(_QWORD *)a1;
      v6 = *(_QWORD *)a1 + 40 * v4;
      do
      {
        *(_OWORD *)v5 = xmmword_1C640F7C0;
        *(_QWORD *)(v5 + 24) = 0;
        *(_QWORD *)(v5 + 32) = 0;
        *(_QWORD *)(v5 + 16) = 0;
        v5 += 40;
      }
      while (v5 != v6);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if (v4)
    {
      v7 = (4 * v4 / 3 + 1) | ((unint64_t)(4 * v4 / 3 + 1) >> 1);
      v8 = v7 | (v7 >> 2) | ((v7 | (v7 >> 2)) >> 4);
      LODWORD(v8) = (((v8 | (v8 >> 8)) >> 16) | v8 | (v8 >> 8)) + 1;
      a1[4] = v8;
      v9 = (char *)operator new(40 * v8, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v9;
      *((_QWORD *)a1 + 1) = 0;
      v10 = a1[4];
      if (v10)
      {
        v11 = &v9[40 * v10];
        do
        {
          *(_OWORD *)v9 = xmmword_1C640F7C0;
          *((_QWORD *)v9 + 3) = 0;
          *((_QWORD *)v9 + 4) = 0;
          *((_QWORD *)v9 + 2) = 0;
          v9 += 40;
        }
        while (v9 != v11);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *((_QWORD *)a1 + 1) = 0;
      a1[4] = 0;
    }
  }
}

void sub_1C4EEBC6C(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  _BYTE *v4;

  v1 = a1[4];
  if ((_DWORD)v1)
  {
    v2 = 40 * v1;
    v3 = (void **)(*(_QWORD *)a1 + 24);
    do
    {
      v4 = *(v3 - 1);
      if (*v3 != v4 && (_BYTE *)*v3 - v4 < 0)
        abort();
      if (v4)
      {
        *v3 = v4;
        operator delete(v4);
      }
      v3 += 5;
      v2 -= 40;
    }
    while (v2);
  }
}

void sub_1C4EEBCC8(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        if (v6)
        {
          *((_QWORD *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 40;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_1C4EEBD40(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  BOOL v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char *result;

  v4 = *a3;
  if (*a3)
    v5 = *(_DWORD *)(*a3 + 8) == 1;
  else
    v5 = 0;
  if (v5)
  {
    v6 = *(_QWORD **)(v4 + 112);
    if (v6)
      LOBYTE(v6) = v6[1] != *v6;
    *(_BYTE *)(a1 + 136) |= v6;
  }
  v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  sub_1C4EEBDCC((uint64_t **)a1, *(uint64_t **)(a2 & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(v4 + 16));
  v8 = *(uint64_t **)(v7 + 32);
  if ((unint64_t)v8 >= *(_QWORD *)(v7 + 40))
  {
    result = sub_1C4D62F9C((char **)(v7 + 24), a3);
  }
  else
  {
    v9 = *a3;
    *a3 = 0;
    *v8 = v9;
    result = (char *)(v8 + 1);
  }
  *(_QWORD *)(v7 + 32) = result;
  return result;
}

uint64_t **sub_1C4EEBDCC(uint64_t **result, uint64_t *a2, unint64_t a3)
{
  uint64_t **v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t **v8;

  v7 = a3;
  if (!a3 || a2 == (uint64_t *)a3)
    return result;
  v4 = result + 13;
  v5 = result[14];
  if (!v5)
    goto LABEL_10;
  while (1)
  {
    v6 = v5[4];
    if (v6 <= a3)
      break;
LABEL_7:
    v5 = (uint64_t *)*v5;
    if (!v5)
      goto LABEL_10;
  }
  if (v6 < a3)
  {
    ++v5;
    goto LABEL_7;
  }
  v8 = (uint64_t **)&v7;
  if (sub_1C4EEBEB4(result + 13, &v7, (uint64_t)&std::piecewise_construct, &v8)[5] == a2)
  {
LABEL_10:
    v8 = (uint64_t **)&v7;
    result = sub_1C4EEBEB4(v4, &v7, (uint64_t)&std::piecewise_construct, &v8);
    result[5] = a2;
  }
  else
  {
    v8 = (uint64_t **)&v7;
    result = sub_1C4EEBEB4(v4, &v7, (uint64_t)&std::piecewise_construct, &v8);
    result[5] = 0;
  }
  return result;
}

uint64_t **sub_1C4EEBEB4(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t ***a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)v9;
    v9 = (uint64_t **)operator new(0x30uLL);
    v9[4] = **a4;
    v9[5] = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v11;
    *v7 = (uint64_t *)v9;
    v12 = (uint64_t *)**a1;
    v13 = (uint64_t *)v9;
    if (v12)
    {
      *a1 = v12;
      v13 = *v7;
    }
    sub_1C4768E74(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v9;
}

void sub_1C4EEBF94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = operator new();
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v7 = *(_QWORD *)(a1 + 64);
  v6 = (uint64_t *)(a1 + 64);
  v5 = v7;
  *v6 = v4;
  if (v7)
    sub_1C4EEC5FC((uint64_t)v6, v5);
}

void sub_1C4EEC000(llvm::Value *a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t **a5)
{
  uint64_t v8;
  llvm::Value *v9;
  llvm::Value *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Value **v15;
  llvm::Value *v16;
  int v17;
  int v18;
  uint64_t v20;
  int v21;
  llvm::StructLayout *StructLayout;
  uint64_t v23;
  llvm::StructLayout *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  char *v34;
  unint64_t v35;
  int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  const char *v43;
  char v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  llvm::Value *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t *v62;
  unint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  unint64_t *v69;

  v8 = *(_QWORD *)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 8) == 15)
  {
    v9 = llvm::Value::stripPointerCasts(a1);
    if (!v9)
      return;
    v10 = v9;
    if (*((_BYTE *)v9 + 16))
      return;
    if ((*((_BYTE *)v9 + 23) & 0x10) == 0)
    {
LABEL_44:
      v57 = sub_1C4EE9DE0(v9);
      v58 = sub_1C4EEA81C(a4, v57);
      *((_QWORD *)v58 + 1) = v10;
      v59 = (unint64_t)v58 & 0xFFFFFFFFFFFFFFF8 | *(unsigned __int8 *)(a4 + 133);
      v61 = a5[1];
      v60 = (unint64_t)a5[2];
      if ((unint64_t)v61 >= v60)
      {
        v63 = *a5;
        v64 = ((char *)v61 - (char *)*a5) >> 4;
        v65 = v64 + 1;
        if ((unint64_t)(v64 + 1) >> 60)
          abort();
        v66 = v60 - (_QWORD)v63;
        if (v66 >> 3 > v65)
          v65 = v66 >> 3;
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0)
          v67 = 0xFFFFFFFFFFFFFFFLL;
        else
          v67 = v65;
        if (v67)
        {
          if (v67 >> 60)
            sub_1C4764EE4();
          v68 = (char *)operator new(16 * v67);
        }
        else
        {
          v68 = 0;
        }
        v69 = (unint64_t *)&v68[16 * v64];
        *v69 = v59;
        v69[1] = a2;
        v62 = v69 + 2;
        if (v61 != v63)
        {
          do
          {
            *((_OWORD *)v69 - 1) = *((_OWORD *)v61 - 1);
            v69 -= 2;
            v61 -= 2;
          }
          while (v61 != v63);
          v61 = *a5;
        }
        *a5 = v69;
        a5[1] = v62;
        a5[2] = (unint64_t *)&v68[16 * v67];
        if (v61)
          operator delete(v61);
      }
      else
      {
        *v61 = v59;
        v61[1] = a2;
        v62 = v61 + 2;
      }
      a5[1] = v62;
      return;
    }
    v11 = ***(_QWORD ***)v9;
    v12 = *(_QWORD *)(v11 + 152);
    v13 = *(unsigned int *)(v11 + 168);
    if ((_DWORD)v13)
    {
      LODWORD(v14) = (v13 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      v15 = (llvm::Value **)(v12 + 16 * v14);
      v16 = *v15;
      if (*v15 == v9)
      {
LABEL_36:
        v51 = v15[1];
        if (*(_QWORD *)v51 == 18)
        {
          v52 = *((_QWORD *)v51 + 2);
          v53 = *((_QWORD *)v51 + 3);
          v54 = *((unsigned __int16 *)v51 + 16);
          v55 = v52 == 0x75705F6178635F5FLL && v53 == 0x75747269765F6572;
          if (v55 && v54 == 27745)
            return;
        }
        goto LABEL_44;
      }
      v17 = 1;
      while (v16 != (llvm::Value *)-4096)
      {
        v18 = v14 + v17++;
        v14 = v18 & (v13 - 1);
        v16 = *(llvm::Value **)(v12 + 16 * v14);
        if (v16 == v9)
        {
          v15 = (llvm::Value **)(v12 + 16 * v14);
          goto LABEL_36;
        }
      }
    }
    v15 = (llvm::Value **)(v12 + 16 * v13);
    goto LABEL_36;
  }
  v20 = a3 + 272;
  v21 = *((unsigned __int8 *)a1 + 16);
  if (v21 == 8)
  {
    v38 = *(_QWORD *)(v8 + 24);
    sub_1C4768AD0(a3 + 272, v38);
    v40 = v39;
    v42 = v41 == 1;
    llvm::DataLayout::getAlignment(v20, v38);
    v45 = v44;
    if (v42)
    if (*(_DWORD *)(v8 + 32))
    {
      v46 = 0;
      v47 = ((1 << v45) + ((unint64_t)(v40 + 7) >> 3) - 1) & -(1 << v45);
      v48 = 32 * *(unsigned int *)(v8 + 32);
      do
      {
        v49 = *((_DWORD *)a1 + 5);
        if ((v49 & 0x40000000) != 0)
          v50 = (uint64_t *)*((_QWORD *)a1 - 1);
        else
          v50 = (uint64_t *)((char *)a1 - 32 * (v49 & 0x7FFFFFF));
        sub_1C4EEC000(v50[v46 / 8], a2, a3, a4, a5);
        v46 += 32;
        a2 += v47;
      }
      while (v48 != v46);
    }
  }
  else if (v21 == 9)
  {
    StructLayout = llvm::DataLayout::getStructLayout((llvm::DataLayout *)(a3 + 272), (llvm::StructType *)v8);
    v23 = *(unsigned int *)(v8 + 12);
    if ((_DWORD)v23)
    {
      v24 = StructLayout;
      v25 = 0;
      v26 = *(_QWORD *)(v8 + 16);
      v27 = v26 + 8 * v23;
      v28 = (char *)StructLayout + 16;
      do
      {
        v29 = *(_QWORD *)&v28[8 * v25];
        v30 = v28;
        v31 = *((_DWORD *)v24 + 3) & 0x7FFFFFFF;
        if ((_DWORD)v31)
        {
          v30 = v28;
          do
          {
            v32 = v31 >> 1;
            v33 = (unint64_t *)&v30[8 * (v31 >> 1)];
            v35 = *v33;
            v34 = (char *)(v33 + 1);
            v31 += ~(v31 >> 1);
            if (v35 > v29)
              v31 = v32;
            else
              v30 = v34;
          }
          while (v31);
        }
        v36 = *((_DWORD *)a1 + 5);
        if ((v36 & 0x40000000) != 0)
          v37 = (uint64_t *)*((_QWORD *)a1 - 1);
        else
          v37 = (uint64_t *)((char *)a1 - 32 * (v36 & 0x7FFFFFF));
        sub_1C4EEC000(v37[4 * ((unint64_t)(v30 - v28 - 8) >> 3)], v29 + a2, a3, a4, a5);
        v26 += 8;
        ++v25;
      }
      while (v26 != v27);
    }
  }
}

uint64_t sub_1C4EEC3B4(uint64_t a1, void *__src, size_t __len)
{
  uint64_t v5;
  const void **v6;
  size_t v7;
  size_t v8;
  _OWORD *v9;
  const void *__dst[2];
  unint64_t v12;
  const void **v13;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = a1 + 80;
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = (const void **)operator new(v7 + 1);
    __dst[1] = (const void *)__len;
    v12 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v12) = __len;
  v6 = __dst;
  if (__len)
LABEL_8:
    memmove(v6, __src, __len);
  *((_BYTE *)v6 + __len) = 0;
  v13 = __dst;
  v9 = sub_1C4EEC498(v5, __dst, (uint64_t)&std::piecewise_construct, (_OWORD **)&v13);
  if (SHIBYTE(v12) < 0)
    operator delete((void *)__dst[0]);
  return (uint64_t)v9 + 56;
}

_OWORD *sub_1C4EEC498(uint64_t a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  void **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v15;

  v6 = (void **)sub_1C4768D58(a1, &v15, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = operator new(0x50uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 9) = 0;
    v11 = v15;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v11;
    *v8 = v7;
    v12 = **(_QWORD **)a1;
    v13 = (uint64_t *)v7;
    if (v12)
    {
      *(_QWORD *)a1 = v12;
      v13 = (uint64_t *)*v8;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 8), v13);
    ++*(_QWORD *)(a1 + 16);
  }
  return v7;
}

uint64_t sub_1C4EEC55C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_1C4EEC59C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &unk_1E8139E20;
  v4 = a1[8];
  v2 = a1 + 8;
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_1C4EEC5FC((uint64_t)v2, v3);
  *a1 = &unk_1E8139E80;
  v5 = (void *)a1[5];
  if (v5)
  {
    a1[6] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_1C4EEC5FC(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1CAA32FC0);
  }
}

_QWORD *sub_1C4EEC644(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    if (a4 >> 60)
      abort();
    v7 = result;
    result = operator new(16 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[2 * a4];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_1C4EEC6C4(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1C4EEC6C4(a1, *(_QWORD *)a2);
    sub_1C4EEC6C4(a1, *((_QWORD *)a2 + 1));
    sub_1C4EEC720((uint64_t)(a2 + 104), *((char **)a2 + 14));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

void sub_1C4EEC720(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1C4EEC720(a1, *(_QWORD *)a2);
    sub_1C4EEC720(a1, *((_QWORD *)a2 + 1));
    sub_1C61A89D0((uint64_t)(a2 + 72), *((_QWORD **)a2 + 10));
    if (a2[71] < 0)
      operator delete(*((void **)a2 + 6));
    operator delete(a2);
  }
}

void sub_1C4EEC77C(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = a1;
    v3 = a1 + 40 * a2;
    do
    {
      sub_1C61A8D4C(*(unsigned __int8 **)v2, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
      v2 += 40;
    }
    while (v2 != v3);
  }
}

unint64_t sub_1C4EEC7C0(unint64_t a1)
{
  unint64_t v3;
  unint64_t v5;

  if (qword_1ED82E608 >= HIDWORD(qword_1ED82E608))
  {
    v3 = qword_1ED82E608 + 1;
    if (qword_1ED82E600 <= a1 && qword_1ED82E600 + 48 * (unint64_t)qword_1ED82E608 > a1)
    {
      v5 = a1 - qword_1ED82E600;
      sub_1C61A8E00(v3);
      return qword_1ED82E600 + v5;
    }
    else
    {
      sub_1C61A8E00(v3);
    }
  }
  return a1;
}

uint64_t sub_1C4EEC834(uint64_t result, unsigned __int8 *a2, unint64_t a3, char a4)
{
  void **v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  void *__p[3];
  void *v31[3];
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void **v40[13];

  if ((a4 & 6) != 0)
    return result;
  v40[11] = v4;
  v40[12] = v5;
  v6 = result;
  **(_BYTE **)result = 1;
  result = sub_1C4FB7E80(*(uint64_t **)(*(_QWORD *)(result + 8) + 112), a2, a3);
  if (!result)
    return result;
  v7 = result;
  v8 = *(_DWORD *)(result + 32);
  if ((v8 & 0xF) != 3)
    goto LABEL_9;
  v9 = v8 & 0xC0;
  if (v9 == 128)
  {
    v10 = (v8 >> 6) & 0x100;
LABEL_12:
    v11 = 711;
    goto LABEL_13;
  }
  if (*(_BYTE *)(result + 16) != 3 || (*(_BYTE *)(result + 80) & 1) != 0)
  {
    v10 = (v8 >> 6) & 0x100;
    if (v9)
      goto LABEL_12;
  }
  else
  {
LABEL_9:
    v10 = (v8 >> 6) & 0x100;
  }
  v11 = 199;
LABEL_13:
  v12 = v11 | v10;
  v13 = *(_QWORD *)(v6 + 16);
  v35 = (void *)sub_1C4EE9DE0((llvm::GlobalValue *)result);
  sub_1C61A7854(v13, (uint64_t *)&v35, (uint64_t)&v38);
  if (*(_BYTE *)(v7 + 16))
  {
    v20 = 4 * (*(_BYTE *)(v7 + 80) & 1);
    v21 = operator new();
    *(_DWORD *)(v21 + 8) = 2;
    *(_DWORD *)(v21 + 12) = v12;
    *(_OWORD *)(v21 + 16) = 0u;
    *(_OWORD *)(v21 + 32) = 0u;
    *(_OWORD *)(v21 + 48) = 0u;
    *(_QWORD *)v21 = &unk_1E8139E20;
    *(_QWORD *)(v21 + 64) = 0;
    *(_DWORD *)(v21 + 72) = v20;
    v22 = *(_QWORD *)(v6 + 24);
    *(_QWORD *)&v38 = v21;
    v23 = v22;
  }
  else
  {
    v14 = *(_QWORD *)(v7 + 112);
    if (v14)
    {
      if (*(_DWORD *)(v14 + 8) >= 2u)
      {
        v15 = *(_QWORD *)(v14 + 48);
        if (v15)
          LODWORD(v15) = *(_BYTE *)(v15 + 14) & 8;
      }
      else
      {
        LODWORD(v15) = 0;
      }
      v16 = v15 | (8 * *(unsigned __int8 *)(v14 + 12)) & 0x20 | (*(unsigned __int8 *)(v14 + 15) >> 4) & 4 | (*(unsigned __int8 *)(v14 + 17) >> 4) & 3;
      v17 = (*(_BYTE *)(v14 + 16) & 0x20) == 0;
      v18 = 448;
      if (v17)
        v18 = 384;
      v19 = v16 | v18;
    }
    else
    {
      v19 = 384;
    }
    v24 = operator new();
    v39 = 0;
    v37 = 0;
    v38 = 0uLL;
    v35 = 0;
    v36 = 0;
    v33 = 0;
    v34 = 0;
    v32 = 0;
    memset(v31, 0, sizeof(v31));
    v29 = 0;
    memset(__p, 0, sizeof(__p));
    v28 = 0uLL;
    v26 = 0uLL;
    v27 = 0;
    memset(v25, 0, sizeof(v25));
    sub_1C61A8204(v24, v12, 0, v19, 0, &v38, (uint64_t)&v35, (uint64_t *)&v32, (__int128 *)v31, (__int128 *)__p, &v28, &v26, (uint64_t)v25);
    v40[0] = (void **)v25;
    sub_1C4EEB7D8(v40);
    v40[0] = (void **)&v26;
    sub_1C4EEBCC8(v40);
    v40[0] = (void **)&v28;
    sub_1C4EEBCC8(v40);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v31[0])
    {
      v31[1] = v31[0];
      operator delete(v31[0]);
    }
    if (v32)
    {
      v33 = v32;
      operator delete(v32);
    }
    if (v35)
    {
      v36 = v35;
      operator delete(v35);
    }
    if ((_QWORD)v38)
    {
      *((_QWORD *)&v38 + 1) = v38;
      operator delete((void *)v38);
    }
    v23 = *(_QWORD *)(v6 + 24);
    *(_QWORD *)&v38 = v24;
  }
  sub_1C61A7548(v23, (llvm::GlobalValue *)v7, (uint64_t *)&v38);
  result = v38;
  if ((_QWORD)v38)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v38 + 8))(v38);
  return result;
}

_QWORD *sub_1C4EECB34(_QWORD *result, _BYTE *a2, _BYTE *a3, unint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    if (a4 >> 60)
      abort();
    v7 = result;
    result = operator new(16 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[2 * a4];
    if (a2 != a3)
    {
      v9 = (a3 - a2) & 0xFFFFFFFFFFFFFFF0;
      result = memcpy(result, a2, v9);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v7[1] = v8;
  }
  return result;
}

_QWORD *sub_1C4EECBBC(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  char *v8;

  if (a4)
  {
    if (a4 >= 0x666666666666667)
      abort();
    v7 = result;
    v8 = (char *)operator new(40 * a4);
    *v7 = v8;
    v7[1] = v8;
    v7[2] = &v8[40 * a4];
    return sub_1C4EECC4C(v7, a2, a3);
  }
  return result;
}

_QWORD *sub_1C4EECC4C(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;

  v3 = result;
  v4 = result[1];
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_OWORD *)v4 = *(_OWORD *)v6;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 32) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      result = sub_1C4DFE394((_QWORD *)(v4 + 16), *(const void **)(v6 + 16), *(_QWORD *)(v6 + 24), (uint64_t)(*(_QWORD *)(v6 + 24) - *(_QWORD *)(v6 + 16)) >> 3);
      v4 += 40;
      v6 += 40;
    }
    while (v6 != a3);
  }
  v3[1] = v4;
  return result;
}

uint64_t sub_1C4EECCBC(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  char *v8;

  if (a4)
  {
    if (a4 >> 58)
      abort();
    v7 = (_QWORD *)result;
    v8 = (char *)operator new(a4 << 6);
    *v7 = v8;
    v7[1] = v8;
    v7[2] = &v8[64 * a4];
    result = sub_1C4EECD28((uint64_t)(v7 + 2), a2, a3, (uint64_t)v8);
    v7[1] = result;
  }
  return result;
}

uint64_t sub_1C4EECD28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  void *v17;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      v9 = a2 + v7;
      *(_QWORD *)v8 = *(_QWORD *)(a2 + v7);
      v10 = *(_DWORD *)(a2 + v7 + 16);
      *(_DWORD *)(v8 + 16) = v10;
      if (v10 > 0x40)
      {
        v16 = (void *)operator new[]();
        *(_QWORD *)(v8 + 8) = v16;
        memcpy(v16, *(const void **)(v9 + 8), (((unint64_t)*(unsigned int *)(v8 + 16) + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
      }
      v11 = a4 + v7;
      v12 = a2 + v7;
      v13 = *(_DWORD *)(v9 + 32);
      *(_DWORD *)(a4 + v7 + 32) = v13;
      if (v13 > 0x40)
      {
        v17 = (void *)operator new[]();
        *(_QWORD *)(v11 + 24) = v17;
        memcpy(v17, *(const void **)(v12 + 24), (((unint64_t)*(unsigned int *)(v11 + 32) + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        *(_QWORD *)(v11 + 24) = *(_QWORD *)(v12 + 24);
      }
      v14 = a4 + v7;
      *(_QWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      v15 = (_QWORD *)(a4 + v7 + 40);
      v15[2] = 0;
      sub_1C4EECE7C(v15, *(_QWORD *)(v9 + 40), *(_QWORD *)(v9 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v9 + 48) - *(_QWORD *)(v9 + 40)) >> 4));
      v7 += 64;
    }
    while (v9 + 64 != a3);
    a4 += v7;
  }
  return a4;
}

_QWORD *sub_1C4EECE7C(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  void *v16;
  void *v17;

  if (a4)
  {
    if (a4 >= 0x555555555555556)
      abort();
    v6 = result;
    v7 = 3 * a4;
    result = operator new(48 * a4);
    v8 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[2 * v7];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9 / 8];
        v11 = a2 + v9;
        *(_OWORD *)v10 = *(_OWORD *)(a2 + v9);
        v12 = *(_DWORD *)(a2 + v9 + 24);
        *((_DWORD *)v10 + 6) = v12;
        if (v12 > 0x40)
        {
          v16 = (void *)operator new[]();
          v10[2] = v16;
          result = memcpy(v16, *(const void **)(v11 + 16), (((unint64_t)*((unsigned int *)v10 + 6) + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v10[2] = *(_QWORD *)(v11 + 16);
        }
        v13 = &v8[v9 / 8];
        v14 = a2 + v9;
        v15 = *(_DWORD *)(v11 + 40);
        LODWORD(v8[v9 / 8 + 5]) = v15;
        if (v15 > 0x40)
        {
          v17 = (void *)operator new[]();
          v13[4] = v17;
          result = memcpy(v17, *(const void **)(v14 + 32), (((unint64_t)*((unsigned int *)v13 + 10) + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v13[4] = *(_QWORD *)(v14 + 32);
        }
        v9 += 48;
      }
      while (v11 + 48 != a3);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v6[1] = v8;
  }
  return result;
}

void sub_1C4EECFE4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4EECFF8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8139D00;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4EED02C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8139D00;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4EED048(uint64_t a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*(_QWORD *)(a1 + 8), &llvm::BlockFrequencyAnalysis::Key, a2)+ 8;
}

void sub_1C4EED074()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4EED088(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E8139D48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C4EED0C0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8139D48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C4EED0E0(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 16))
    return llvm::AnalysisManager<llvm::Function>::getResultImpl(*(_QWORD *)(a1 + 8), &llvm::StackSafetyAnalysis::Key, a2)+ 8;
  else
    return 0;
}

void sub_1C4EED11C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4EED130(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8139D90;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4EED164(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8139D90;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4EED180(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 24);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  return (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v2 + 96))(v2, &llvm::BlockFrequencyInfoWrapperPass::ID)+ 32;
}

void sub_1C4EED1D8()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4EED1EC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E8139DD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C4EED224(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8139DD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C4EED244(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if (!**(_BYTE **)(a1 + 8))
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 24);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  return (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v2 + 96))(v2, &llvm::StackSafetyInfoWrapperPass::ID)
       + 32;
}

uint64_t sub_1C4EED2AC()
{
  __n128 v1;
  int v2;
  llvm *v3;
  __int128 v4;
  _QWORD v5[2];
  int v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  int v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Force all edges in the function summary to cold";
  v1.n128_u64[1] = 47;
  v3 = (llvm *)&ForceSummaryEdgesCold;
  *(_QWORD *)&v4 = v5;
  v5[0] = "none";
  v5[1] = 4;
  v6 = 0;
  v7 = "None.";
  v8 = 5;
  v9 = "all-non-critical";
  v10 = 16;
  v11 = 1;
  v12 = "All non-critical edges.";
  v13 = 23;
  v14 = "all";
  v15 = 3;
  v16 = 2;
  v17 = "All edges.";
  v18 = 10;
  *((_QWORD *)&v4 + 1) = 0x400000003;
  sub_1C61A8B40(&v2, &v3, (__int128 *)&v1, (uint64_t)&v4);
  if ((_QWORD *)v4 != v5)
    free((void *)v4);
  __cxa_atexit((void (*)(void *))sub_1C61A69F0, &FSEC, &dword_1C475E000);
  v2 = 1;
  v3 = (llvm *)"";
  *(_QWORD *)&v4 = "filename";
  *((_QWORD *)&v4 + 1) = 8;
  v1.n128_u64[0] = (unint64_t)"File to emit dot graph of new summary into.";
  v1.n128_u64[1] = 43;
  sub_1C47AD050((uint64_t)&ModuleSummaryDotFile, 0, 0);
  qword_1ED82E830 = 0;
  qword_1ED82E838 = 0;
  qword_1ED82E858 = 0;
  unk_1ED82E860 = 0;
  qword_1ED82E850 = 0;
  byte_1ED82E868 = 0;
  unk_1ED82E840 = 0;
  unk_1ED82E848 = &unk_1E819E950;
  ModuleSummaryDotFile = (uint64_t)&unk_1E819E480;
  qword_1ED82E870 = (uint64_t)&unk_1E819E970;
  qword_1ED82E878 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED82E890 = (uint64_t)&qword_1ED82E878;
  sub_1C61A8ECC((const char **)&v3, &v2, &v4, &v1);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&ModuleSummaryDotFile);
  return __cxa_atexit((void (*)(void *))sub_1C49BEA38, &ModuleSummaryDotFile, &dword_1C475E000);
}

uint64_t llvm::LoopSafetyInfo::getBlockColors(llvm::LoopSafetyInfo *this)
{
  return (uint64_t)this + 8;
}

unint64_t *sub_1C4EED4C0(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;

  if (a1 == a2)
    return a1;
  v4 = *a2;
  if (*a2 < 8)
    goto LABEL_3;
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) != 0 && v5)
  {
    v6 = *(_DWORD *)(v5 + 8);
    if (!v6)
    {
LABEL_3:
      if ((*a1 & 4) != 0)
      {
        v8 = *a1 & 0xFFFFFFFFFFFFFFF8;
        if (v8)
          *(_DWORD *)(v8 + 8) = 0;
      }
      else
      {
        *a1 = 0;
      }
      return a1;
    }
    v7 = *a1;
    if ((*a1 & 4) != 0)
    {
LABEL_22:
      sub_1C49EEBE4(v7 & 0xFFFFFFFFFFFFFFF8, v5);
      return a1;
    }
  }
  else
  {
    v7 = *a1;
    if ((*a1 & 4) != 0)
    {
      if ((v4 & 4) != 0)
        goto LABEL_22;
      v9 = v7 & 0xFFFFFFFFFFFFFFF8;
      *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8) = 0;
      if (*(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 12))
      {
        v10 = 0;
      }
      else
      {
        v15 = v4 & 0xFFFFFFFFFFFFFFF8;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v7 & 0xFFFFFFFFFFFFFFF8, v9 + 16, 1uLL, 8);
        v5 = v15;
        v10 = *(unsigned int *)(v9 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = v5;
      ++*(_DWORD *)(v9 + 8);
      return a1;
    }
    if ((v4 & 4) == 0)
    {
LABEL_17:
      *a1 = v5;
      return a1;
    }
    v6 = *(_DWORD *)(v5 + 8);
  }
  if (v6 == 1)
  {
    v5 = **(_QWORD **)v5 & 0xFFFFFFFFFFFFFFFBLL;
    goto LABEL_17;
  }
  v11 = (_QWORD *)operator new();
  v12 = (unint64_t)v11;
  v13 = *a2 & 0xFFFFFFFFFFFFFFF8;
  *v11 = v11 + 2;
  v11[1] = 0x400000000;
  if (*(_DWORD *)(v13 + 8))
    sub_1C49EEBE4((uint64_t)v11, v13);
  *a1 = v12 | 4;
  return a1;
}

uint64_t *llvm::LoopSafetyInfo::computeBlockColors(uint64_t *this, const llvm::Loop *a2)
{
  uint64_t v2;
  int v3;
  uint64_t **v4;
  llvm::Function *v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  uint64_t *v10;
  llvm *v11;
  uint64_t v12[3];

  v2 = *(_QWORD *)(**((_QWORD **)a2 + 4) + 56);
  if ((*(_WORD *)(v2 + 18) & 8) != 0)
  {
    v10 = this;
    v11 = *(llvm **)(**((_QWORD **)a2 + 4) + 56);
    v3 = *(_DWORD *)(v2 + 20);
    v4 = (v3 & 0x40000000) != 0 ? (uint64_t **)*((_QWORD *)v11 - 1) : (uint64_t **)((char *)v11 - 32 * (v3 & 0x7FFFFFF));
    this = *v4;
    if (*v4)
    {
      v6 = llvm::classifyEHPersonality((llvm::Value *)this, a2);
      this = (uint64_t *)v11;
      v7 = v6 > 0xC;
      v8 = (1 << v6) & 0x1780;
      if (!v7 && v8 != 0)
      {
        llvm::colorEHFunclets(v11, v5, (uint64_t)v12);
        sub_1C61A9204(v10 + 1, v12);
        return sub_1C4EF1108(v12);
      }
    }
  }
  return this;
}

BOOL llvm::ICFLoopSafetyInfo::blockMayThrow(int32x2_t *this, const llvm::BasicBlock *a2)
{
  return llvm::InstructionPrecedenceTracking::getFirstSpecialInstruction(this + 5, a2) != 0;
}

uint64_t llvm::ICFLoopSafetyInfo::anyBlockMayThrow(llvm::ICFLoopSafetyInfo *this)
{
  return *((unsigned __int8 *)this + 32);
}

uint64_t *llvm::ICFLoopSafetyInfo::computeLoopSafetyInfo(int32x2_t *this, const llvm::Loop *a2)
{
  const llvm::BasicBlock **v4;
  uint64_t v5;
  uint64_t v6;

  sub_1C4A5A548((unsigned int *)&this[6]);
  sub_1C4A5A548((unsigned int *)&this[10]);
  this[4].i8[0] = 0;
  v4 = (const llvm::BasicBlock **)*((_QWORD *)a2 + 4);
  v5 = *((_QWORD *)a2 + 5) - (_QWORD)v4;
  if (v5)
  {
    v6 = 8 * (v5 >> 3);
    while (!llvm::InstructionPrecedenceTracking::getFirstSpecialInstruction(this + 5, *v4))
    {
      ++v4;
      v6 -= 8;
      if (!v6)
        return llvm::LoopSafetyInfo::computeBlockColors((uint64_t *)this, a2);
    }
    this[4].i8[0] = 1;
  }
  return llvm::LoopSafetyInfo::computeBlockColors((uint64_t *)this, a2);
}

int32x2_t llvm::ICFLoopSafetyInfo::insertInstructionTo(llvm::ICFLoopSafetyInfo *this, const llvm::Instruction *a2, const llvm::BasicBlock *a3)
{
  llvm::InstructionPrecedenceTracking::insertInstructionTo((llvm::ICFLoopSafetyInfo *)((char *)this + 40), a2, a3);
  return llvm::InstructionPrecedenceTracking::insertInstructionTo((llvm::ICFLoopSafetyInfo *)((char *)this + 72), a2, a3);
}

int32x2_t llvm::ICFLoopSafetyInfo::removeInstruction(int32x2_t *this, const llvm::Instruction *a2)
{
  llvm::InstructionPrecedenceTracking::removeInstruction(this + 5, a2);
  return llvm::InstructionPrecedenceTracking::removeInstruction(this + 9, a2);
}

uint64_t llvm::LoopSafetyInfo::allLoopPathsLeadToBlock(llvm::LoopSafetyInfo *this, const llvm::BasicBlock ***a2, const llvm::BasicBlock *a3, const llvm::DominatorTree *a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  llvm::BasicBlock *v27;
  char v28;
  char *v30;
  uint64_t *v31;
  const llvm::BasicBlock **v32;
  const llvm::BasicBlock **v33;
  uint64_t v34;
  uint64_t SinglePredecessor;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v41;
  unsigned int v42;
  BOOL v44;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  llvm::BasicBlock *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  uint64_t v64;
  unsigned __int8 *v65;
  _BOOL4 isAllOnesValue;
  char isZeroValue;
  llvm::LoopSafetyInfo *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const llvm::DominatorTree *v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  int v76;
  _BYTE v77[32];
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  int v81;
  _BYTE v82[32];
  _QWORD v83[5];
  __int16 v84;
  char v85[8];
  __int16 v86;
  __int16 v87;
  _QWORD *v88;
  __int128 v89;
  _QWORD v90[3];
  _BYTE v91[152];
  _QWORD *v92;
  uint64_t v93;
  _QWORD v94[19];
  _QWORD v95[6];

  v95[4] = *MEMORY[0x1E0C80C00];
  if (*a2[4] == a3)
    return 1;
  v78 = (uint64_t *)v82;
  v79 = (uint64_t *)v82;
  v80 = 4;
  v81 = 0;
  sub_1C4EEDF58((uint64_t)a2, (uint64_t)a3, (llvm::SmallPtrSetImplBase *)&v78);
  v73 = v77;
  v74 = v77;
  v75 = 4;
  v76 = 0;
  if (v79 == v78)
    v8 = (uint64_t *)((char *)&v80 + 4);
  else
    v8 = &v80;
  v9 = *(unsigned int *)v8;
  if ((_DWORD)v9)
  {
    v10 = 8 * v9;
    v11 = v79;
    while ((unint64_t)*v11 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v11;
      v10 -= 8;
      if (!v10)
        goto LABEL_121;
    }
  }
  else
  {
    v11 = v79;
  }
  v13 = (char *)&v79[v9];
  if (v11 == (uint64_t *)v13)
  {
LABEL_121:
    v12 = 1;
    goto LABEL_122;
  }
  v14 = *v11;
  if (((**(uint64_t (***)(llvm::LoopSafetyInfo *, uint64_t))this)(this, *v11) & 1) != 0)
    goto LABEL_14;
  v72 = a4;
  v68 = this;
LABEL_16:
  result = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)v72, (uint64_t)a3, v14);
  if ((result & 1) != 0 || (v18 = *(_QWORD *)(v14 + 40), v18 == v14 + 40))
  {
LABEL_17:
    v16 = (unint64_t *)(v11 + 1);
    while (v16 != (unint64_t *)v13)
    {
      v17 = *v16++;
      v14 = v17;
      if (v17 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v12 = 0;
        v11 = (uint64_t *)(v16 - 1);
        if (!(**(unsigned int (***)(llvm::LoopSafetyInfo *, uint64_t))v68)(v68, v14))
          goto LABEL_16;
        goto LABEL_122;
      }
    }
    goto LABEL_121;
  }
  if (v18)
    v19 = v18 - 24;
  else
    v19 = 0;
  v20 = *(unsigned __int8 *)(v19 + 16);
  v21 = v20 - 29;
  if (v20 != 30)
  {
    v22 = 2;
    switch(v21)
    {
      case 1:
LABEL_128:
        __break(1u);
        return result;
      case 2:
        v22 = (*(_DWORD *)(v19 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_115;
      case 3:
      case 9:
        v22 = (*(_DWORD *)(v19 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_115;
      case 4:
        goto LABEL_30;
      case 7:
        v22 = *(_WORD *)(v19 + 18) & 1;
        goto LABEL_115;
      case 8:
        v22 = 1;
        goto LABEL_30;
      case 10:
        v22 = *(_DWORD *)(v19 + 80) + 1;
LABEL_115:
        if (!v22)
          goto LABEL_17;
        goto LABEL_30;
      default:
        goto LABEL_17;
    }
  }
  if ((*(_DWORD *)(v19 + 20) & 0x7FFFFFF) == 3)
    v22 = 2;
  else
    v22 = 1;
LABEL_30:
  v23 = 0;
  v24 = v19 - 32;
  v25 = v22;
  v70 = v19 - 32;
  v71 = v19;
  v69 = v22;
  while (1)
  {
    v26 = *(unsigned __int8 *)(v19 + 16);
    if (v26 != 30)
      __asm { BR              X9 }
    v27 = *(llvm::BasicBlock **)(v24 - 32 * v23);
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v73, (uint64_t)v27);
    if (v27 == a3 || v28 == 0)
      goto LABEL_40;
    v30 = (char *)sub_1C477672C((uint64_t)&v78, (uint64_t)v27);
    v31 = v79 == v78 ? (uint64_t *)((char *)&v80 + 4) : &v80;
    if (v30 != (char *)&v79[*(unsigned int *)v31])
      goto LABEL_40;
    v32 = (const llvm::BasicBlock **)sub_1C477672C((uint64_t)(a2 + 7), (uint64_t)v27);
    v33 = a2[8];
    v34 = 72;
    if (v33 == a2[7])
      v34 = 76;
    if (v32 != &v33[*(unsigned int *)((char *)a2 + v34)])
      goto LABEL_14;
    SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v27);
    if (!SinglePredecessor)
      goto LABEL_14;
    v36 = *(_QWORD *)(SinglePredecessor + 40);
    if (v36 == SinglePredecessor + 40)
      goto LABEL_14;
    v12 = 0;
    if (v36)
      v37 = v36 - 24;
    else
      v37 = 0;
    v38 = *(unsigned __int8 *)(v37 + 16) - 40;
    if (v38 >= 0xFFFFFFF5)
      v39 = v37;
    else
      v39 = 0;
    if (!v36)
      goto LABEL_122;
    if (*(_BYTE *)(v39 + 16) != 30 || v38 < 0xFFFFFFF5)
      goto LABEL_122;
    if ((*(_DWORD *)(v39 + 20) & 0x7FFFFFF) != 3)
      goto LABEL_14;
    v41 = *(_QWORD *)(v39 - 96);
    v42 = *(unsigned __int8 *)(v41 + 16);
    if (!v41 || v42 != 16)
      break;
    v54 = (_QWORD *)(v41 + 24);
    if (*(_DWORD *)(v41 + 32) >= 0x41u)
      v54 = (_QWORD *)*v54;
    v25 = v69;
    if (*v54)
      v55 = -1;
    else
      v55 = 0;
    v56 = *(llvm::BasicBlock **)(v39 + 32 * v55 - 32);
    v24 = v70;
    v19 = v71;
    if (v56 != v27)
      goto LABEL_14;
LABEL_40:
    if (++v23 == v25)
      goto LABEL_17;
  }
  if (v41)
    v44 = v42 >= 0x1C;
  else
    v44 = 0;
  if (!v44 || v42 - 83 < 0xFFFFFFFE)
    goto LABEL_14;
  v12 = 0;
  v46 = *(_QWORD *)(v41 - 64);
  if (!v46 || *(_BYTE *)(v46 + 16) != 83)
    goto LABEL_122;
  if (*(const llvm::BasicBlock **)(v46 + 40) != *a2[4])
    goto LABEL_14;
  v47 = *(unsigned __int8 **)(v41 - 32);
  v48 = *(_QWORD *)(*((_QWORD *)v27 + 7) + 40) + 272;
  v86 = 0;
  v87 = 0;
  v88 = v90;
  v89 = xmmword_1C6464ED0;
  v90[1] = v91;
  v90[2] = 0x1000000000;
  memset(&v91[128], 0, 24);
  v92 = v94;
  v93 = 0x800000000;
  v94[16] = 0;
  v94[17] = v95;
  v94[18] = 0x800000000;
  sub_1C48815D8((uint64_t)v85, v48);
  result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)a2);
  if (!result)
    goto LABEL_81;
  v49 = *(_QWORD *)(result + 40);
  if (v49 == result + 40)
    goto LABEL_81;
  v50 = v49 - 24;
  if (!v49)
    v50 = 0;
  v51 = *(unsigned __int8 *)(v50 + 16);
  v52 = v51 - 29;
  if (v51 != 30)
  {
    v53 = 0;
    switch(v52)
    {
      case 0:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        goto LABEL_94;
      case 1:
        goto LABEL_128;
      case 2:
        v57 = (*(_DWORD *)(v50 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_92;
      case 3:
        v57 = (*(_DWORD *)(v50 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_92;
      case 10:
        v57 = *(_DWORD *)(v50 + 80) + 1;
LABEL_92:
        if (v57 == 1)
          goto LABEL_93;
        goto LABEL_81;
      default:
        goto LABEL_81;
    }
  }
  if ((*(_DWORD *)(v50 + 20) & 0x7FFFFFF) == 3)
LABEL_81:
    v53 = 0;
  else
LABEL_93:
    v53 = result;
LABEL_94:
  v58 = *(_DWORD *)(v46 + 20);
  v59 = v58 & 0x7FFFFFF;
  if ((v58 & 0x7FFFFFF) != 0)
  {
    v60 = 0;
    while (1)
    {
      v61 = v46 - 32 * v59;
      if ((v58 & 0x40000000) != 0)
        v61 = *(_QWORD *)(v46 - 8);
      if (*(_QWORD *)(v61 + 32 * *(unsigned int *)(v46 + 60) + 8 * v60) == v53)
        break;
      if (v59 == ++v60)
        goto LABEL_100;
    }
  }
  else
  {
LABEL_100:
    LODWORD(v60) = -1;
  }
  if ((v58 & 0x40000000) != 0)
    v62 = *(_QWORD *)(v46 - 8);
  else
    v62 = v46 - 32 * v59;
  v63 = *(unsigned __int8 **)(v62 + 32 * v60);
  v64 = *(_WORD *)(v41 + 18) & 0x3F;
  v83[0] = v85;
  v83[1] = 0;
  v83[2] = v72;
  v83[3] = 0;
  v83[4] = v39;
  v84 = 257;
  v65 = (unsigned __int8 *)sub_1C4E6D894(v64, v63, v47, (uint64_t)v83, 3);
  if (v65 && v65[16] < 0x15u)
  {
    if (*(llvm::BasicBlock **)(v39 - 32) == v27)
    {
      isZeroValue = llvm::Constant::isZeroValue((llvm::Constant *)v65);
      llvm::DataLayout::~DataLayout((llvm::DataLayout *)v85);
      v24 = v70;
      v19 = v71;
      v25 = v69;
      if ((isZeroValue & 1) == 0)
        goto LABEL_14;
    }
    else
    {
      isAllOnesValue = llvm::Constant::isAllOnesValue((llvm::Constant *)v65);
      llvm::DataLayout::~DataLayout((llvm::DataLayout *)v85);
      v24 = v70;
      v19 = v71;
      v25 = v69;
      if (!isAllOnesValue)
        goto LABEL_14;
    }
    goto LABEL_40;
  }
  llvm::DataLayout::~DataLayout((llvm::DataLayout *)v85);
LABEL_14:
  v12 = 0;
LABEL_122:
  if (v74 != v73)
    free(v74);
  if (v79 != v78)
    free(v79);
  return v12;
}

void sub_1C4EEDF58(uint64_t a1, uint64_t a2, llvm::SmallPtrSetImplBase *this)
{
  uint64_t v3;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  void *v28;
  uint64_t v29;
  _QWORD v30[5];

  v30[4] = *MEMORY[0x1E0C80C00];
  if (**(_QWORD **)(a1 + 32) != a2)
  {
    v28 = v30;
    v29 = 0x400000000;
    v3 = *(_QWORD *)(a2 + 8);
    if (v3)
    {
      while (1)
      {
        v6 = *(_QWORD *)(v3 + 24);
        v7 = *(unsigned __int8 *)(v6 + 16);
        v8 = v6 && v7 >= 0x1C;
        if (v8 && v7 - 29 <= 0xA)
          break;
        v3 = *(_QWORD *)(v3 + 8);
        if (!v3)
          goto LABEL_53;
      }
LABEL_13:
      v10 = *(_QWORD *)(v6 + 40);
      sub_1C4774094(this, v10);
      v11 = v29;
      if (v29 >= (unint64_t)HIDWORD(v29))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, (uint64_t)v30, v29 + 1, 8);
        v11 = v29;
      }
      *((_QWORD *)v28 + v11) = v10;
      v12 = v29 + 1;
      LODWORD(v29) = v29 + 1;
      while (1)
      {
        v3 = *(_QWORD *)(v3 + 8);
        if (!v3)
          break;
        v6 = *(_QWORD *)(v3 + 24);
        v13 = *(unsigned __int8 *)(v6 + 16);
        if (v6)
          v14 = v13 >= 0x1C;
        else
          v14 = 0;
        if (v14 && v13 - 29 < 0xB)
          goto LABEL_13;
      }
      if (v12)
      {
        do
        {
          while (1)
          {
            v16 = *((_QWORD *)v28 + --v12);
            LODWORD(v29) = v12;
            if (v16 != **(_QWORD **)(a1 + 32))
            {
              v17 = *(_QWORD *)(v16 + 8);
              if (v17)
                break;
            }
LABEL_37:
            if (!v12)
              goto LABEL_53;
          }
          while (1)
          {
            v18 = *(_QWORD *)(v17 + 24);
            v19 = *(unsigned __int8 *)(v18 + 16);
            v20 = v18 && v19 >= 0x1C;
            if (v20 && v19 - 29 <= 0xA)
              break;
            v17 = *(_QWORD *)(v17 + 8);
            if (!v17)
              goto LABEL_37;
          }
LABEL_39:
          v22 = *(_QWORD *)(v18 + 40);
          sub_1C4774094(this, v22);
          if (v23)
          {
            v24 = v29;
            if (v29 >= (unint64_t)HIDWORD(v29))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, (uint64_t)v30, v29 + 1, 8);
              v24 = v29;
            }
            *((_QWORD *)v28 + v24) = v22;
            LODWORD(v29) = v29 + 1;
          }
          while (1)
          {
            v17 = *(_QWORD *)(v17 + 8);
            if (!v17)
              break;
            v18 = *(_QWORD *)(v17 + 24);
            v25 = *(unsigned __int8 *)(v18 + 16);
            if (v18)
              v26 = v25 >= 0x1C;
            else
              v26 = 0;
            if (v26 && v25 - 29 < 0xB)
              goto LABEL_39;
          }
          v12 = v29;
        }
        while ((_DWORD)v29);
      }
    }
LABEL_53:
    if (v28 != v30)
      free(v28);
  }
}

uint64_t llvm::ICFLoopSafetyInfo::isGuaranteedToExecute(int32x2_t *this, const llvm::BasicBlock **a2, const llvm::DominatorTree *a3, const llvm::BasicBlock ***a4)
{
  if ((llvm::InstructionPrecedenceTracking::isPreceededBySpecialInstruction(this + 5, a2) & 1) != 0)
    return 0;
  else
    return llvm::LoopSafetyInfo::allLoopPathsLeadToBlock((llvm::LoopSafetyInfo *)this, a4, a2[5], a3);
}

BOOL llvm::ICFLoopSafetyInfo::doesNotWriteMemoryBefore(int32x2_t *this, const llvm::BasicBlock *a2, const llvm::BasicBlock ***a3)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t *v6;
  uint64_t v7;
  const llvm::BasicBlock **v8;
  uint64_t v9;
  _BOOL8 v10;
  const llvm::BasicBlock **v11;
  int32x2_t *v12;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  _BYTE v18[32];

  if (*a3[4] == a2)
    return 1;
  v14 = v18;
  v15 = v18;
  v16 = 4;
  v17 = 0;
  sub_1C4EEDF58((uint64_t)a3, (uint64_t)a2, (llvm::SmallPtrSetImplBase *)&v14);
  v5 = v14;
  v4 = v15;
  if (v15 == v14)
    v6 = (uint64_t *)((char *)&v16 + 4);
  else
    v6 = &v16;
  v7 = *(unsigned int *)v6;
  v8 = (const llvm::BasicBlock **)v15;
  if ((_DWORD)v7)
  {
    v9 = 0;
    while (*(_QWORD *)&v15[v9] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v9 += 8;
      if (8 * v7 == v9)
        goto LABEL_19;
    }
    v8 = (const llvm::BasicBlock **)&v15[v9];
  }
  v11 = (const llvm::BasicBlock **)&v15[8 * v7];
  if (v8 == v11)
  {
LABEL_19:
    v10 = 1;
  }
  else
  {
    v12 = this + 9;
    if (llvm::InstructionPrecedenceTracking::getFirstSpecialInstruction(this + 9, *v8))
    {
      v10 = 0;
    }
    else
    {
      do
        v10 = ++v8 == v11;
      while (v8 != v11
           && ((unint64_t)*v8 >= 0xFFFFFFFFFFFFFFFELL
            || !llvm::InstructionPrecedenceTracking::getFirstSpecialInstruction(v12, *v8)));
    }
    v5 = v14;
    v4 = v15;
  }
  if (v4 != v5)
    free(v4);
  return v10;
}

void llvm::initializeMustExecutePrinterPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82E8A8);
  if (v1 != -1)
  {
    v4[0] = sub_1C4EEE35C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82E8A8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4EEE35C(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeDominatorTreeWrapperPassPass(a1);
  llvm::initializeLoopInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Instructions which execute on loop entry";
  *(_QWORD *)(v2 + 8) = 40;
  *(_QWORD *)(v2 + 16) = "print-mustexecute";
  *(_QWORD *)(v2 + 24) = 17;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFBF7;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4EEFC30;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C4EEE3FC(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8EFBF7;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8139F20;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED82E8A8);
  if (v3 != -1)
  {
    v7[0] = sub_1C4EEE35C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82E8A8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void llvm::initializeMustBeExecutedContextPrinterPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82E8B0);
  if (v1 != -1)
  {
    v4[0] = sub_1C4EEE524;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82E8B0, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4EEE524(uint64_t a1)
{
  uint64_t v2;

  llvm::initializePostDominatorTreeWrapperPassPass(a1);
  llvm::initializeDominatorTreeWrapperPassPass(a1);
  llvm::initializeLoopInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "print the must-be-executed-context for all instructions";
  *(_QWORD *)(v2 + 8) = 55;
  *(_QWORD *)(v2 + 16) = "print-must-be-executed-contexts";
  *(_QWORD *)(v2 + 24) = 31;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFBF8;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4EEFDE8;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C4EEE5CC(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8EFBF8;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E8139FC0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED82E8B0);
  if (v3 != -1)
  {
    v7[0] = sub_1C4EEE524;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82E8B0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t *llvm::mayContainIrreducibleControl(llvm *this, const llvm::Function *a2, const llvm::LoopInfo *a3)
{
  uint64_t *v3;
  llvm *v5;
  void *__p;
  void *v7;
  uint64_t v8;

  v3 = (uint64_t *)a2;
  if (a2)
  {
    v5 = this;
    __p = 0;
    v7 = 0;
    v8 = 0;
    sub_1C4DC1ECC((char **)&__p, (uint64_t)&v5);
    v3 = sub_1C4E1C800((uint64_t *)&__p, v3);
    if (__p)
    {
      v7 = __p;
      operator delete(__p);
    }
  }
  return v3;
}

llvm::BasicBlock *llvm::MustBeExecutedContextExplorer::findForwardJoinPoint(llvm::MustBeExecutedContextExplorer *this, const llvm::BasicBlock *a2)
{
  uint64_t v3;
  const llvm::BasicBlock *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t isGuaranteedToTransferExecutionToSuccessor;
  llvm *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  const llvm::BasicBlock *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  llvm::BasicBlock **v22;
  const llvm::BasicBlock *v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  llvm::BasicBlock *v36;
  char v37;
  llvm::BasicBlock *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::BasicBlock **v42;
  const llvm::BasicBlock *v43;
  int v44;
  int v45;
  const llvm::BasicBlock *v46;
  llvm::BasicBlock **v47;
  char v48;
  uint64_t v49;
  llvm::BasicBlock **v50;
  llvm::BasicBlock *v51;
  uint64_t UniqueSuccessor;
  uint64_t v53;
  BOOL v54;
  char v55;
  llvm::BasicBlock **v56;
  uint64_t UniqueExitBlock;
  uint64_t v58;
  unsigned int v59;
  llvm *v60;
  llvm::BasicBlock **v61;
  char v62;
  uint64_t v63;
  _QWORD *v64;
  const llvm::LoopInfo *v65;
  _QWORD *v66;
  unsigned int v67;
  int v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  llvm *v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  const llvm::BasicBlock *v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  llvm::BasicBlock **v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  llvm::BasicBlock **v95;
  llvm::MustBeExecutedContextExplorer *v96;
  llvm *v97;
  const llvm::Function *v98;
  _BYTE *v99;
  _BYTE *v100;
  uint64_t v101;
  int v102;
  _BYTE v103[128];
  llvm *v104;
  llvm::BasicBlock **v105;
  uint64_t v106;
  _QWORD v107[10];

  v107[8] = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 4);
  if (!v3
    || (v4 = a2,
        v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 48))(v3, *((_QWORD *)a2 + 7)),
        (v6 = *((_QWORD *)this + 12)) == 0))
  {
    sub_1C485C2F0();
  }
  isGuaranteedToTransferExecutionToSuccessor = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 48))(v6, *((_QWORD *)v4 + 7));
  v8 = (llvm *)*((_QWORD *)v4 + 7);
  if (v5)
  {
    v9 = *(_DWORD *)(v5 + 16);
    if (v9)
    {
      v10 = *(_QWORD *)v5;
      v11 = v9 - 1;
      v12 = (v9 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      v13 = *(const llvm::BasicBlock **)(*(_QWORD *)v5 + 16 * v12);
      if (v13 == v4)
      {
LABEL_9:
        v16 = *(_QWORD *)(v10 + 16 * v12 + 8);
        if (v16)
        {
          v17 = **(_QWORD **)(v16 + 32);
          v18 = *((_QWORD *)v8 + 14);
          if (v18 && (*(_BYTE *)(v18 + 20) & 2) != 0)
          {
            v21 = 1;
          }
          else
          {
            v19 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 112);
            if (!v19)
            {
              LOBYTE(v20) = 0;
              v21 = 1;
              goto LABEL_20;
            }
            LOBYTE(v20) = 0;
            v21 = 1;
            if ((*(_BYTE *)(v19 + 20) & 2) == 0 || !v18)
              goto LABEL_20;
          }
LABEL_18:
          v20 = (*(unsigned __int8 *)(v18 + 16) >> 5) & 1;
          goto LABEL_20;
        }
      }
      else
      {
        v14 = 1;
        while (v13 != (const llvm::BasicBlock *)-4096)
        {
          v15 = v12 + v14++;
          v12 = v15 & v11;
          v13 = *(const llvm::BasicBlock **)(v10 + 16 * v12);
          if (v13 == v4)
            goto LABEL_9;
        }
      }
    }
  }
  v18 = *((_QWORD *)v8 + 14);
  if (!v18)
  {
    v16 = 0;
    v21 = 0;
    LOBYTE(v20) = 0;
    v17 = (uint64_t)v4;
    goto LABEL_20;
  }
  v21 = 0;
  v16 = 0;
  LOBYTE(v20) = 0;
  v17 = (uint64_t)v4;
  if ((*(_BYTE *)(v18 + 20) & 2) != 0)
    goto LABEL_18;
LABEL_20:
  v22 = (llvm::BasicBlock **)v107;
  v105 = (llvm::BasicBlock **)v107;
  v106 = 0x800000000;
  v23 = (const llvm::BasicBlock *)*((_QWORD *)v4 + 5);
  if (v23 == (const llvm::BasicBlock *)((char *)v4 + 40))
    goto LABEL_130;
  v24 = v23 ? (uint64_t)v23 - 24 : 0;
  v25 = *(unsigned __int8 *)(v24 + 16);
  v26 = v25 - 29;
  v96 = this;
  if (v25 == 30)
  {
    v27 = (*(_DWORD *)(v24 + 20) & 0x7FFFFFF) == 3 ? 2 : 1;
  }
  else
  {
    v27 = 2;
    v38 = 0;
    switch(v26)
    {
      case 0:
      case 5:
      case 6:
        goto LABEL_131;
      case 1:
LABEL_137:
        __break(1u);
        goto LABEL_138;
      case 2:
        v27 = (*(_DWORD *)(v24 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 3:
      case 9:
LABEL_138:
        v27 = (*(_DWORD *)(v24 + 20) & 0x7FFFFFF) - 1;
        break;
      case 4:
        goto LABEL_28;
      case 7:
        v27 = *(_WORD *)(v24 + 18) & 1;
        break;
      case 8:
        v27 = 1;
        goto LABEL_28;
      case 10:
        v27 = *(_DWORD *)(v24 + 80) + 1;
        break;
      default:
        goto LABEL_130;
    }
    if (!v27)
      goto LABEL_130;
  }
LABEL_28:
  v97 = v8;
  v98 = (const llvm::Function *)v5;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = v24 + 32;
  v32 = v24 - 64;
  v33 = v27;
  v34 = v24 - 64;
  do
  {
    v35 = *(unsigned __int8 *)(v24 + 16);
    if (v35 != 30)
      __asm { BR              X10 }
    v36 = *(llvm::BasicBlock **)(v24 - 32 - 32 * v30);
    if (v36 == (llvm::BasicBlock *)v17)
      v37 = v20;
    else
      v37 = 0;
    if ((v37 & 1) == 0)
    {
      if (v29 >= HIDWORD(v106))
      {
        v91 = v31;
        v92 = isGuaranteedToTransferExecutionToSuccessor;
        v94 = v16;
        v95 = v22;
        v93 = v21;
        v90 = v32;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v105, (uint64_t)v22, v29 + 1, 8);
        v32 = v90;
        v31 = v91;
        isGuaranteedToTransferExecutionToSuccessor = v92;
        v21 = v93;
        v16 = v94;
        v22 = v95;
        v29 = v106;
      }
      v105[v29] = v36;
      v29 = v106 + 1;
      LODWORD(v106) = v106 + 1;
    }
    ++v30;
    v28 += 2;
    v34 += 32;
  }
  while (v33 != v30);
  if (!v29)
  {
LABEL_130:
    v38 = 0;
    goto LABEL_131;
  }
  if (v29 == 1)
  {
    v38 = *v105;
    goto LABEL_131;
  }
  v24 = (uint64_t)v97;
  v5 = (uint64_t)v98;
  if (!isGuaranteedToTransferExecutionToSuccessor)
  {
LABEL_61:
    if (v29 == 2)
    {
      v48 = v21;
      v49 = v16;
      v50 = v22;
      v38 = *v105;
      v51 = v105[1];
      UniqueSuccessor = llvm::BasicBlock::getUniqueSuccessor(*v105);
      v53 = llvm::BasicBlock::getUniqueSuccessor(v51);
      if ((const llvm::BasicBlock *)UniqueSuccessor == v4)
      {
        v38 = v51;
        v22 = v50;
        v16 = v49;
        LOBYTE(v21) = v48;
      }
      else
      {
        v54 = (const llvm::BasicBlock *)v53 == v4 || v38 == (llvm::BasicBlock *)v53;
        v22 = v50;
        v16 = v49;
        LOBYTE(v21) = v48;
        if (!v54)
        {
          v38 = v51;
          if (v51 != (llvm::BasicBlock *)UniqueSuccessor)
          {
            if (UniqueSuccessor == v53)
              v38 = (llvm::BasicBlock *)UniqueSuccessor;
            else
              v38 = 0;
          }
        }
      }
    }
    else
    {
      v38 = 0;
    }
    v55 = v21 ^ 1;
    if (v38)
      v55 = 1;
    if ((v55 & 1) == 0)
    {
      v56 = v22;
      UniqueExitBlock = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getUniqueExitBlock((_QWORD *)v16);
      v22 = v56;
      v38 = (llvm::BasicBlock *)UniqueExitBlock;
    }
    if (!v38)
      goto LABEL_131;
    goto LABEL_78;
  }
  v39 = *(_QWORD *)(isGuaranteedToTransferExecutionToSuccessor + 48);
  v40 = *(unsigned int *)(isGuaranteedToTransferExecutionToSuccessor + 64);
  if (!(_DWORD)v40)
    goto LABEL_56;
  LODWORD(v41) = (v40 - 1) & ((v4 >> 4) ^ (v4 >> 9));
  v42 = (const llvm::BasicBlock **)(v39 + 16 * v41);
  v43 = *v42;
  if (*v42 != v4)
  {
    v44 = 1;
    while (v43 != (const llvm::BasicBlock *)-4096)
    {
      v45 = v41 + v44++;
      v41 = v45 & (v40 - 1);
      v43 = *(const llvm::BasicBlock **)(v39 + 16 * v41);
      if (v43 == v4)
      {
        v42 = (const llvm::BasicBlock **)(v39 + 16 * v41);
        goto LABEL_57;
      }
    }
LABEL_56:
    v42 = (const llvm::BasicBlock **)(v39 + 16 * v40);
  }
LABEL_57:
  if (v42 == (const llvm::BasicBlock **)(v39 + 16 * v40))
    goto LABEL_61;
  v46 = v42[1];
  if (!v46)
    goto LABEL_61;
  v47 = (llvm::BasicBlock **)*((_QWORD *)v46 + 1);
  if (!v47)
    goto LABEL_61;
  v38 = *v47;
  if (!*v47)
    goto LABEL_61;
LABEL_78:
  v58 = *((_QWORD *)v97 + 14);
  if (!v58 || (*(_BYTE *)(v58 + 20) & 2) == 0 || (*(_BYTE *)(v58 + 16) & 0x20) == 0)
  {
    v99 = v103;
    v100 = v103;
    v101 = 16;
    v102 = 0;
    v59 = v106;
    if ((_DWORD)v106)
    {
      v4 = (llvm::MustBeExecutedContextExplorer *)((char *)v96 + 104);
      v17 = 1;
      do
      {
        v60 = v105[--v59];
        LODWORD(v106) = v59;
        if (v60 != v38)
        {
          v61 = v22;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v99, (uint64_t)v60);
          if (v62)
          {
            v104 = v60;
            v78 = sub_1C61AAC54((uint64_t)v4, (uint64_t *)&v104);
            v80 = v78;
            if (*((_BYTE *)v78 + 9))
            {
              isGuaranteedToTransferExecutionToSuccessor = *((unsigned __int8 *)v78 + 8);
            }
            else
            {
              isGuaranteedToTransferExecutionToSuccessor = llvm::isGuaranteedToTransferExecutionToSuccessor(v60, v79);
              v87 = *((unsigned __int8 *)v80 + 9);
              *((_BYTE *)v80 + 8) = isGuaranteedToTransferExecutionToSuccessor;
              if (!v87)
                *((_BYTE *)v80 + 9) = 1;
            }
            v22 = v61;
            if (!(_DWORD)isGuaranteedToTransferExecutionToSuccessor)
            {
LABEL_128:
              if (v100 != v99)
              {
                free(v100);
                v22 = v61;
              }
              goto LABEL_130;
            }
            v81 = (_QWORD *)*((_QWORD *)v60 + 5);
            if (v81 == (_QWORD *)((char *)v60 + 40))
            {
LABEL_122:
              v82 = 0;
              v22 = 0;
              v86 = 0;
            }
            else
            {
              v82 = (uint64_t)(v81 - 3);
              if (v81)
                v22 = (llvm::BasicBlock **)(v81 - 3);
              else
                v22 = 0;
              v83 = *((unsigned __int8 *)v22 + 16);
              v84 = v83 - 29;
              if (v83 != 30)
              {
                v85 = 0;
                switch(v84)
                {
                  case 0:
                  case 5:
                  case 6:
                    goto LABEL_113;
                  case 1:
                    goto LABEL_137;
                  case 2:
                    v85 = (*((_DWORD *)v22 + 5) >> 1) & 0x3FFFFFF;
                    goto LABEL_113;
                  case 3:
                  case 9:
                    v85 = (*((_DWORD *)v22 + 5) & 0x7FFFFFF) - 1;
                    goto LABEL_113;
                  case 4:
                    v85 = 2;
                    goto LABEL_113;
                  case 7:
                    v85 = *((_WORD *)v22 + 9) & 1;
                    goto LABEL_113;
                  case 8:
                    v85 = 1;
                    goto LABEL_113;
                  case 10:
                    v85 = *((_DWORD *)v22 + 20) + 1;
                    goto LABEL_113;
                  default:
                    goto LABEL_122;
                }
              }
              if ((*((_DWORD *)v22 + 5) & 0x7FFFFFF) == 3)
                v85 = 2;
              else
                v85 = 1;
LABEL_113:
              v86 = v85;
            }
            sub_1C61AAE24((unsigned int *)&v105, (llvm::Instruction *)v22, 0, v82, v86);
            v22 = v61;
          }
          else
          {
            v63 = *((_QWORD *)v97 + 14);
            v22 = v61;
            if (!v63 || (*(_BYTE *)(v63 + 20) & 2) == 0)
            {
              if (!v98)
                goto LABEL_128;
              v104 = v97;
              v64 = sub_1C61AAC54((uint64_t)v96 + 128, (uint64_t *)&v104);
              v66 = v64;
              if (*((_BYTE *)v64 + 9))
              {
                v67 = *((unsigned __int8 *)v64 + 8);
              }
              else
              {
                v67 = llvm::mayContainIrreducibleControl(v97, v98, v65);
                v68 = *((unsigned __int8 *)v66 + 9);
                *((_BYTE *)v66 + 8) = v67;
                if (!v68)
                  *((_BYTE *)v66 + 9) = 1;
              }
              v22 = v61;
              if (v67)
                goto LABEL_128;
              v69 = *((_DWORD *)v98 + 4);
              if (v69)
              {
                v70 = *(_QWORD *)v98;
                v71 = v69 - 1;
                v72 = (v69 - 1) & ((v60 >> 4) ^ (v60 >> 9));
                v73 = *(llvm **)(*(_QWORD *)v98 + 16 * v72);
                if (v60 == v73)
                {
LABEL_98:
                  v76 = *(_QWORD *)(v70 + 16 * v72 + 8);
                  if (v76)
                  {
                    v77 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v76 + 32) + 56) + 112);
                    if (!v77 || (*(_BYTE *)(v77 + 20) & 2) == 0)
                      goto LABEL_128;
                  }
                }
                else
                {
                  v74 = 1;
                  while (v73 != (llvm *)-4096)
                  {
                    v75 = v72 + v74++;
                    v72 = v75 & v71;
                    v73 = *(llvm **)(v70 + 16 * v72);
                    if (v60 == v73)
                      goto LABEL_98;
                  }
                }
              }
            }
          }
          v59 = v106;
        }
      }
      while (v59);
      if (v100 != v99)
      {
        v89 = v22;
        free(v100);
        v22 = v89;
      }
    }
  }
LABEL_131:
  if (v105 != v22)
    free(v105);
  return v38;
}

llvm::BasicBlock *llvm::MustBeExecutedContextExplorer::findBackwardJoinPoint(llvm::MustBeExecutedContextExplorer *this, const llvm::BasicBlock *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const llvm::BasicBlock *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  llvm::BasicBlock *v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  const llvm::BasicBlock *v23;
  int v24;
  int v25;
  uint64_t v26;
  const llvm::BasicBlock *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  const llvm::BasicBlock *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  llvm::BasicBlock *v43;
  uint64_t UniquePredecessor;
  uint64_t v45;
  void **v46;
  char v47;
  void *v48;
  uint64_t v49;
  _QWORD v50[9];

  v50[8] = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 4);
  if (!v3
    || (v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 48))(v3, *((_QWORD *)a2 + 7)),
        (v6 = *((_QWORD *)this + 8)) == 0))
  {
    sub_1C485C2F0();
  }
  v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 48))(v6, *((_QWORD *)a2 + 7));
  v8 = a2 >> 4;
  if (!v7)
    goto LABEL_15;
  v9 = *(_QWORD *)(v7 + 24);
  v10 = *(unsigned int *)(v7 + 40);
  if (!(_DWORD)v10)
    goto LABEL_10;
  LODWORD(v11) = (v10 - 1) & (v8 ^ (a2 >> 9));
  v12 = v9 + 16 * v11;
  v13 = *(const llvm::BasicBlock **)v12;
  if (*(const llvm::BasicBlock **)v12 != a2)
  {
    v14 = 1;
    while (v13 != (const llvm::BasicBlock *)-4096)
    {
      v15 = v11 + v14++;
      v11 = v15 & (v10 - 1);
      v13 = *(const llvm::BasicBlock **)(v9 + 16 * v11);
      if (v13 == a2)
      {
        v12 = v9 + 16 * v11;
        goto LABEL_11;
      }
    }
LABEL_10:
    v12 = v9 + 16 * v10;
  }
LABEL_11:
  if (v12 != v9 + 16 * v10)
  {
    v16 = *(_QWORD *)(v12 + 8);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 8);
      if (v17)
        return *(llvm::BasicBlock **)v17;
    }
  }
LABEL_15:
  if (!v5 || (v19 = *(_DWORD *)(v5 + 16)) == 0)
  {
LABEL_23:
    v28 = 0;
    v26 = 0;
    goto LABEL_24;
  }
  v20 = *(_QWORD *)v5;
  v21 = v19 - 1;
  v22 = v21 & (v8 ^ (a2 >> 9));
  v23 = *(const llvm::BasicBlock **)(*(_QWORD *)v5 + 16 * v22);
  if (v23 != a2)
  {
    v24 = 1;
    while (v23 != (const llvm::BasicBlock *)-4096)
    {
      v25 = v22 + v24++;
      v22 = v25 & v21;
      v23 = *(const llvm::BasicBlock **)(v20 + 16 * v22);
      if (v23 == a2)
        goto LABEL_21;
    }
    goto LABEL_23;
  }
LABEL_21:
  v26 = *(_QWORD *)(v20 + 16 * v22 + 8);
  if (v26)
  {
    v27 = **(const llvm::BasicBlock ***)(v26 + 32);
    v28 = 1;
    goto LABEL_25;
  }
  v28 = 0;
LABEL_24:
  v27 = 0;
LABEL_25:
  v48 = v50;
  v49 = 0x800000000;
  v29 = *((_QWORD *)a2 + 1);
  if (v29)
  {
    while (1)
    {
      v30 = *(_QWORD *)(v29 + 24);
      v31 = *(unsigned __int8 *)(v30 + 16);
      v32 = v30 && v31 >= 0x1C;
      if (v32 && v31 - 29 < 0xB)
        break;
      v29 = *(_QWORD *)(v29 + 8);
      if (!v29)
        goto LABEL_35;
    }
LABEL_39:
    v35 = *(const llvm::BasicBlock **)(v30 + 40);
    if (v35 != a2)
    {
      if (v27 != a2
        || ((v37 = sub_1C477672C(v26 + 56, *(_QWORD *)(v30 + 40)),
             v38 = *(_QWORD *)(v26 + 64),
             v38 != *(_QWORD *)(v26 + 56))
          ? (v39 = 72)
          : (v39 = 76),
            v37 == (_QWORD *)(v38 + 8 * *(unsigned int *)(v26 + v39))))
      {
        v36 = v49;
        if (v49 >= (unint64_t)HIDWORD(v49))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, (uint64_t)v50, v49 + 1, 8);
          v36 = v49;
        }
        *((_QWORD *)v48 + v36) = v35;
        LODWORD(v49) = v49 + 1;
      }
    }
    while (1)
    {
      v29 = *(_QWORD *)(v29 + 8);
      if (!v29)
        break;
      v30 = *(_QWORD *)(v29 + 24);
      v40 = *(unsigned __int8 *)(v30 + 16);
      if (v30)
        v41 = v40 >= 0x1C;
      else
        v41 = 0;
      if (v41 && v40 - 29 < 0xB)
        goto LABEL_39;
    }
    v18 = 0;
    if (!(_DWORD)v49)
      goto LABEL_36;
    if ((_DWORD)v49 == 1)
    {
      v46 = &v48;
    }
    else
    {
      if ((_DWORD)v49 == 2)
      {
        v18 = *(llvm::BasicBlock **)v48;
        v43 = (llvm::BasicBlock *)*((_QWORD *)v48 + 1);
        UniquePredecessor = llvm::BasicBlock::getUniquePredecessor(*(llvm::BasicBlock **)v48);
        v45 = llvm::BasicBlock::getUniquePredecessor(v43);
        if (v18 != (llvm::BasicBlock *)v45)
        {
          if (v43 == (llvm::BasicBlock *)UniquePredecessor)
          {
            v18 = v43;
          }
          else if (UniquePredecessor == v45)
          {
            v18 = (llvm::BasicBlock *)UniquePredecessor;
          }
          else
          {
            v18 = 0;
          }
        }
      }
      v47 = v28 ^ 1;
      if (v18)
        v47 = 1;
      if ((v47 & 1) != 0)
        goto LABEL_36;
      v46 = (void **)(v26 + 32);
    }
    v18 = *(llvm::BasicBlock **)*v46;
  }
  else
  {
LABEL_35:
    v18 = 0;
  }
LABEL_36:
  if (v48 != v50)
    free(v48);
  return v18;
}

llvm::BasicBlock *llvm::MustBeExecutedContextExplorer::getMustBeExecutedPrevInstruction(llvm::MustBeExecutedContextExplorer *this, llvm::MustBeExecutedIterator *a2, const llvm::Instruction *a3)
{
  const llvm::Instruction **v3;
  uint64_t v4;
  BOOL v5;
  llvm::BasicBlock *result;
  uint64_t v7;

  if (!a3)
    return 0;
  v3 = (const llvm::Instruction **)*((_QWORD *)a3 + 5);
  if (v3[6] != (const llvm::Instruction *)((char *)a3 + 24))
  {
    v4 = *((_QWORD *)a3 + 3);
    if (*(_BYTE *)this)
      v5 = 0;
    else
      v5 = v4 == 0;
    if (!v5)
    {
      if (v4)
        return (llvm::BasicBlock *)(v4 - 24);
      goto LABEL_11;
    }
    return 0;
  }
  if (!*(_BYTE *)this)
    return 0;
LABEL_11:
  result = llvm::MustBeExecutedContextExplorer::findBackwardJoinPoint(this, (const llvm::BasicBlock *)v3);
  if (result)
  {
    v7 = *((_QWORD *)result + 5);
    if (v7)
      return (llvm::BasicBlock *)(v7 - 24);
    else
      return 0;
  }
  return result;
}

uint64_t llvm::MustBeExecutedIterator::MustBeExecutedIterator(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  sub_1C61AAEC4(a1);
  llvm::MustBeExecutedIterator::resetInstruction((llvm::MustBeExecutedIterator *)a1, a3);
  return a1;
}

{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  sub_1C61AAEC4(a1);
  llvm::MustBeExecutedIterator::resetInstruction((llvm::MustBeExecutedIterator *)a1, a3);
  return a1;
}

uint64_t llvm::MustBeExecutedIterator::reset(llvm::MustBeExecutedIterator *this, const llvm::Instruction *a2)
{
  sub_1C61AAEC4((uint64_t)this);
  return llvm::MustBeExecutedIterator::resetInstruction(this, (unint64_t)a2);
}

uint64_t sub_1C4EEF324(uint64_t a1, uint64_t a2, const llvm::DominatorTree *a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)(llvm::SimpleLoopSafetyInfo *__hidden, const llvm::BasicBlock *);
  int v12;
  uint64_t (*v13)(llvm::SimpleLoopSafetyInfo *__hidden, const llvm::BasicBlock *);
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t (*v17)(llvm::SimpleLoopSafetyInfo *__hidden, const llvm::BasicBlock *);
  int v18;
  int v19;
  llvm **v20;
  const llvm::Loop *v21;
  char isGuaranteedToExecuteForEveryIteration;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (**v30)(llvm::SimpleLoopSafetyInfo *__hidden, const llvm::BasicBlock *);
  uint64_t v31[2];
  int v32;
  __int16 v33;

  *(_QWORD *)(a1 + 8) = 0;
  v5 = a1 + 8;
  *(_QWORD *)a1 = &off_1E813A210;
  v6 = a2 + 72;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v7 = *(_QWORD *)(a2 + 80);
  if (v7 == a2 + 72)
    return a1;
  while (1)
  {
    v9 = v7 - 24;
    if (!v7)
      v9 = 0;
    v10 = *(_QWORD *)(v9 + 48);
    if (v10 != v9 + 40)
      break;
    v7 = *(_QWORD *)(v7 + 8);
    if (v7 == v6)
      return a1;
  }
  while (1)
  {
    if (v10)
      v11 = (uint64_t (**)(llvm::SimpleLoopSafetyInfo *__hidden, const llvm::BasicBlock *))(v10 - 24);
    else
      v11 = 0;
    v12 = *((_DWORD *)a4 + 4);
    if (!v12)
      goto LABEL_24;
    v13 = v11[5];
    v14 = *a4;
    v15 = v12 - 1;
    v16 = ((v13 >> 4) ^ (v13 >> 9)) & (v12 - 1);
    v17 = *(uint64_t (**)(llvm::SimpleLoopSafetyInfo *__hidden, const llvm::BasicBlock *))(*a4 + 16 * v16);
    if (v13 == v17)
    {
LABEL_15:
      v20 = *(llvm ***)(v14 + 16 * v16 + 8);
      if (!v20)
        goto LABEL_24;
      while (1)
      {
        v31[0] = 0;
        v31[1] = 0;
        v32 = 0;
        v30 = &off_1E8139EA0;
        v33 = 0;
        llvm::SimpleLoopSafetyInfo::computeLoopSafetyInfo((llvm::SimpleLoopSafetyInfo *)&v30, (llvm ***)v20);
        if ((llvm::SimpleLoopSafetyInfo::isGuaranteedToExecute((llvm::SimpleLoopSafetyInfo *)&v30, (const llvm::Instruction *)v11, a3, (const llvm::BasicBlock ***)v20) & 1) != 0)break;
        isGuaranteedToExecuteForEveryIteration = llvm::isGuaranteedToExecuteForEveryIteration((llvm *)v11, (const llvm::Instruction *)v20, v21);
        v30 = (uint64_t (**)(llvm::SimpleLoopSafetyInfo *__hidden, const llvm::BasicBlock *))&unk_1E813A258;
        sub_1C4EF1108(v31);
        if ((isGuaranteedToExecuteForEveryIteration & 1) != 0)
          goto LABEL_21;
LABEL_18:
        v20 = (llvm **)*v20;
        if (!v20)
          goto LABEL_24;
      }
      v30 = (uint64_t (**)(llvm::SimpleLoopSafetyInfo *__hidden, const llvm::BasicBlock *))&unk_1E813A258;
      sub_1C4EF1108(v31);
LABEL_21:
      v30 = v11;
      v23 = sub_1C61AA364(v5, (uint64_t *)&v30);
      v24 = *((unsigned int *)v23 + 4);
      if (v24 >= *((unsigned int *)v23 + 5))
      {
        v25 = v23;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v23 + 1), (uint64_t)(v23 + 3), v24 + 1, 8);
        v23 = v25;
        v24 = *((unsigned int *)v25 + 4);
      }
      *(_QWORD *)(v23[1] + 8 * v24) = v20;
      ++*((_DWORD *)v23 + 4);
      goto LABEL_18;
    }
    v18 = 1;
    while (v17 != (uint64_t (*)(llvm::SimpleLoopSafetyInfo *__hidden, const llvm::BasicBlock *))-4096)
    {
      v19 = v16 + v18++;
      v16 = v19 & v15;
      v17 = *(uint64_t (**)(llvm::SimpleLoopSafetyInfo *__hidden, const llvm::BasicBlock *))(v14 + 16 * v16);
      if (v13 == v17)
        goto LABEL_15;
    }
LABEL_24:
    v10 = *(_QWORD *)(v10 + 8);
    v26 = v7 - 24;
    if (!v7)
      v26 = 0;
    if (v10 == v26 + 40)
      break;
LABEL_31:
    if (v7 == v6)
      return a1;
  }
  while (1)
  {
    v7 = *(_QWORD *)(v7 + 8);
    if (v7 == v6)
      return a1;
    v27 = v7 - 24;
    if (!v7)
      v27 = 0;
    v10 = *(_QWORD *)(v27 + 48);
    if (v10 != v27 + 40)
      goto LABEL_31;
  }
}

_QWORD *sub_1C4EEF580(_QWORD *a1)
{
  *a1 = &off_1E813A210;
  sub_1C61AA614((uint64_t)(a1 + 1));
  MEMORY[0x1CAA32FB4](a1[1], 8);
  return a1;
}

_QWORD *llvm::MustBeExecutedContextPrinterPass::run@<X0>(llvm::raw_ostream **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  void (**v8)(_QWORD *);
  _QWORD *v9;
  void (**v10)(_QWORD *);
  _QWORD *v11;
  void (**v12)(_QWORD *);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  uint64_t v17;
  uint64_t v18;
  llvm::Value *v19;
  llvm::raw_ostream *v20;
  void *v21;
  _BYTE *v22;
  _QWORD *v23;
  void (**v24)(_QWORD *);
  _QWORD *v25;
  void (**v26)(_QWORD *);
  _QWORD *result;
  uint64_t (**v28)(_QWORD *);
  uint64_t i;
  _BYTE v31[112];
  _QWORD v32[3];
  _QWORD *v33;
  _QWORD v34[3];
  _QWORD *v35;
  _QWORD v36[3];
  _QWORD *v37;
  _BYTE v38[232];
  _QWORD v39[3];
  _QWORD *v40;
  _QWORD v41[3];
  _QWORD *v42;
  _QWORD v43[3];
  _QWORD *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, a2)+ 8);
  v43[0] = &off_1E813A298;
  v43[1] = v6;
  v44 = v43;
  v41[0] = &off_1E813A2E0;
  v41[1] = v6;
  v42 = v41;
  v39[0] = &off_1E813A328;
  v39[1] = v6;
  v40 = v39;
  v37 = v36;
  v36[0] = &off_1E813A298;
  v36[1] = v6;
  v35 = v34;
  v34[0] = &off_1E813A2E0;
  v34[1] = v6;
  v33 = v32;
  v32[0] = &off_1E813A328;
  v32[1] = v6;
  sub_1C61AA678((uint64_t)v38, 1, 1, 1, (uint64_t)v36, (uint64_t)v34, (uint64_t)v32);
  v7 = v33;
  if (v33 == v32)
  {
    v8 = (void (**)(_QWORD *))(v32[0] + 32);
    v7 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_6;
    v8 = (void (**)(_QWORD *))(*v33 + 40);
  }
  (*v8)(v7);
LABEL_6:
  v9 = v35;
  if (v35 == v34)
  {
    v10 = (void (**)(_QWORD *))(v34[0] + 32);
    v9 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_11;
    v10 = (void (**)(_QWORD *))(*v35 + 40);
  }
  (*v10)(v9);
LABEL_11:
  v11 = v37;
  if (v37 == v36)
  {
    v12 = (void (**)(_QWORD *))(v36[0] + 32);
    v11 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_16;
    v12 = (void (**)(_QWORD *))(*v37 + 40);
  }
  (*v12)(v11);
LABEL_16:
  v13 = *(_QWORD *)(a2 + 32);
  for (i = a2 + 24; v13 != i; v13 = *(_QWORD *)(v13 + 8))
  {
    v14 = v13 - 56;
    if (!v13)
      v14 = 0;
    v15 = v14 + 72;
    for (j = *(_QWORD *)(v14 + 80); j != v15; j = *(_QWORD *)(j + 8))
    {
      v17 = j - 24;
      if (!j)
        v17 = 0;
      v18 = *(_QWORD *)(v17 + 48);
      if (v18 != v17 + 40)
      {
        if (v18)
          v19 = (llvm::Value *)(v18 - 24);
        else
          v19 = 0;
        v20 = *a1;
        v21 = (void *)*((_QWORD *)*a1 + 4);
        if (*((_QWORD *)*a1 + 3) - (_QWORD)v21 > 0x16uLL)
        {
          qmemcpy(v21, "-- Explore context of: ", 23);
          *((_QWORD *)v20 + 4) += 23;
        }
        else
        {
          v20 = llvm::raw_ostream::write(*a1, "-- Explore context of: ", 0x17uLL);
        }
        llvm::Value::print(v19, v20, 0);
        v22 = (_BYTE *)*((_QWORD *)v20 + 4);
        if (*((_BYTE **)v20 + 3) == v22)
        {
          llvm::raw_ostream::write(v20, "\n", 1uLL);
        }
        else
        {
          *v22 = 10;
          ++*((_QWORD *)v20 + 4);
        }
        sub_1C61A9718((uint64_t)v31, (uint64_t)v38, (unint64_t)v19);
      }
    }
  }
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  sub_1C61AAB08((uint64_t)v38);
  v23 = v40;
  if (v40 == v39)
  {
    v24 = (void (**)(_QWORD *))(v39[0] + 32);
    v23 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_41;
    v24 = (void (**)(_QWORD *))(*v40 + 40);
  }
  (*v24)(v23);
LABEL_41:
  v25 = v42;
  if (v42 == v41)
  {
    v26 = (void (**)(_QWORD *))(v41[0] + 32);
    v25 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_46;
    v26 = (void (**)(_QWORD *))(*v42 + 40);
  }
  (*v26)(v25);
LABEL_46:
  result = v44;
  if (v44 == v43)
  {
    v28 = (uint64_t (**)(_QWORD *))(v43[0] + 32);
    result = v43;
  }
  else
  {
    if (!v44)
      return result;
    v28 = (uint64_t (**)(_QWORD *))(*v44 + 40);
  }
  return (_QWORD *)(*v28)(result);
}

uint64_t sub_1C4EEFC30()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4EEE3FC(v0);
}

void sub_1C4EEFC5C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4EEFC80(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
}

uint64_t sub_1C4EEFCC4(uint64_t a1, llvm::Function *a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  llvm *v11;
  llvm *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t (**v18)();
  uint64_t v19;
  unsigned int v20;

  v4 = **(void ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::LoopInfoWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::LoopInfoWrapperPass::ID);
  v7 = **(void ****)(a1 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::DominatorTreeWrapperPass::ID);
  v9 = (uint64_t *)(v6 + 32);
  v10 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::DominatorTreeWrapperPass::ID);
  v11 = (llvm *)sub_1C4EEF324((uint64_t)&v18, (uint64_t)a2, (const llvm::DominatorTree *)(v10 + 32), v9);
  v12 = llvm::dbgs(v11);
  llvm::Function::print(a2, v12, (llvm::AssemblyAnnotationWriter *)&v18, 0, 0);
  v18 = &off_1E813A210;
  v13 = v19;
  if (v20)
  {
    v14 = 56 * v20;
    v15 = (_QWORD *)(v19 + 24);
    do
    {
      if ((*(v15 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v16 = (_QWORD *)*(v15 - 2);
        if (v15 != v16)
          free(v16);
      }
      v15 += 7;
      v14 -= 56;
    }
    while (v14);
    v13 = v19;
  }
  MEMORY[0x1CAA32FB4](v13, 8);
  return 0;
}

uint64_t sub_1C4EEFDE8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4EEE5CC(v0);
}

void sub_1C4EEFE14(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4EEFE38(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t sub_1C4EEFE44(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void (**v7)(_QWORD *);
  _QWORD *v8;
  void (**v9)(_QWORD *);
  _QWORD *v10;
  void (**v11)(_QWORD *);
  _QWORD *v12;
  void (**v13)(_QWORD *);
  _QWORD *v14;
  void (**v15)(_QWORD *);
  llvm *v16;
  uint64_t (**v17)(llvm *);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  uint64_t v22;
  uint64_t v23;
  llvm::Value *v24;
  llvm *v25;
  llvm::raw_ostream *v26;
  void *v27;
  _BYTE *v28;
  _QWORD *v29;
  void (**v30)(_QWORD *);
  _QWORD *v31;
  void (**v32)(_QWORD *);
  uint64_t (***v33)();
  void (**v34)(uint64_t (***)());
  uint64_t i;
  _BYTE v37[112];
  _QWORD v38[3];
  _QWORD *v39;
  _QWORD v40[3];
  _QWORD *v41;
  _QWORD v42[3];
  _QWORD *v43;
  _QWORD v44[3];
  _QWORD *v45;
  uint64_t (**v46)();
  __int128 v47;
  uint64_t (***v48)();
  _QWORD v49[3];
  _QWORD *v50;
  _BYTE v51[232];
  _QWORD v52[3];
  _QWORD *v53;
  _QWORD v54[3];
  _QWORD *v55;
  uint64_t (**v56)();
  __int128 v57;
  uint64_t (***v58)();
  char *v59[2];
  uint64_t v60;
  char *v61[2];
  uint64_t v62;
  char *v63[2];
  _QWORD v64[10];

  v64[8] = *MEMORY[0x1E0C80C00];
  v63[0] = (char *)v64;
  v63[1] = (char *)0x800000000;
  v61[0] = (char *)&v62;
  v61[1] = (char *)0x800000000;
  v59[0] = (char *)&v60;
  v59[1] = (char *)0x800000000;
  v56 = &off_1E813A060;
  *(_QWORD *)&v57 = v61;
  *((_QWORD *)&v57 + 1) = v59;
  v58 = &v56;
  v54[0] = &off_1E813A0A8;
  v54[1] = v61;
  v55 = v54;
  v52[0] = &off_1E813A0F0;
  v52[1] = v63;
  v53 = v52;
  v48 = &v46;
  v46 = &off_1E813A060;
  v47 = v57;
  v3 = operator new(0x28uLL);
  *v3 = &off_1E813A138;
  v3[1] = &off_1E813A060;
  v3[4] = v3 + 1;
  *((_OWORD *)v3 + 1) = v57;
  v50 = v3;
  v43 = v42;
  v42[0] = &off_1E813A0A8;
  v42[1] = v61;
  v4 = operator new(0x28uLL);
  *v4 = &off_1E813A180;
  v4[1] = &off_1E813A0A8;
  v4[4] = v4 + 1;
  v4[2] = v61;
  v45 = v4;
  v39 = v38;
  v38[0] = &off_1E813A0F0;
  v38[1] = v63;
  v5 = operator new(0x28uLL);
  *v5 = &off_1E813A1C8;
  v5[1] = &off_1E813A0F0;
  v5[4] = v5 + 1;
  v5[2] = v63;
  v41 = v5;
  sub_1C61AA678((uint64_t)v51, 1, 1, 1, (uint64_t)v49, (uint64_t)v44, (uint64_t)v40);
  v6 = v41;
  if (v41 == v40)
  {
    v7 = (void (**)(_QWORD *))(v40[0] + 32);
    v6 = v40;
  }
  else
  {
    if (!v41)
      goto LABEL_6;
    v7 = (void (**)(_QWORD *))(*v41 + 40);
  }
  (*v7)(v6);
LABEL_6:
  v8 = v39;
  if (v39 == v38)
  {
    v9 = (void (**)(_QWORD *))(v38[0] + 32);
    v8 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_11;
    v9 = (void (**)(_QWORD *))(*v39 + 40);
  }
  (*v9)(v8);
LABEL_11:
  v10 = v45;
  if (v45 == v44)
  {
    v11 = (void (**)(_QWORD *))(v44[0] + 32);
    v10 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_16;
    v11 = (void (**)(_QWORD *))(*v45 + 40);
  }
  (*v11)(v10);
LABEL_16:
  v12 = v43;
  if (v43 == v42)
  {
    v13 = (void (**)(_QWORD *))(v42[0] + 32);
    v12 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_21;
    v13 = (void (**)(_QWORD *))(*v43 + 40);
  }
  (*v13)(v12);
LABEL_21:
  v14 = v50;
  if (v50 == v49)
  {
    v15 = (void (**)(_QWORD *))(v49[0] + 32);
    v14 = v49;
  }
  else
  {
    if (!v50)
      goto LABEL_26;
    v15 = (void (**)(_QWORD *))(*v50 + 40);
  }
  (*v15)(v14);
LABEL_26:
  v16 = (llvm *)v48;
  if (v48 == &v46)
  {
    v17 = (uint64_t (**)(llvm *))(v46 + 4);
    v16 = (llvm *)&v46;
  }
  else
  {
    if (!v48)
      goto LABEL_31;
    v17 = (uint64_t (**)(llvm *))(*v48 + 5);
  }
  v16 = (llvm *)(*v17)(v16);
LABEL_31:
  v18 = *(_QWORD *)(a2 + 32);
  for (i = a2 + 24; v18 != i; v18 = *(_QWORD *)(v18 + 8))
  {
    v19 = v18 - 56;
    if (!v18)
      v19 = 0;
    v20 = v19 + 72;
    for (j = *(_QWORD *)(v19 + 80); j != v20; j = *(_QWORD *)(j + 8))
    {
      v22 = j - 24;
      if (!j)
        v22 = 0;
      v23 = *(_QWORD *)(v22 + 48);
      if (v23 != v22 + 40)
      {
        if (v23)
          v24 = (llvm::Value *)(v23 - 24);
        else
          v24 = 0;
        v25 = llvm::dbgs(v16);
        v26 = v25;
        v27 = (void *)*((_QWORD *)v25 + 4);
        if (*((_QWORD *)v25 + 3) - (_QWORD)v27 > 0x16uLL)
        {
          qmemcpy(v27, "-- Explore context of: ", 23);
          *((_QWORD *)v25 + 4) += 23;
        }
        else
        {
          v26 = llvm::raw_ostream::write(v25, "-- Explore context of: ", 0x17uLL);
        }
        llvm::Value::print(v24, v26, 0);
        v28 = (_BYTE *)*((_QWORD *)v26 + 4);
        if (*((_BYTE **)v26 + 3) == v28)
        {
          llvm::raw_ostream::write(v26, "\n", 1uLL);
        }
        else
        {
          *v28 = 10;
          ++*((_QWORD *)v26 + 4);
        }
        sub_1C61A9718((uint64_t)v37, (uint64_t)v51, (unint64_t)v24);
      }
    }
  }
  sub_1C61AAB08((uint64_t)v51);
  v29 = v53;
  if (v53 == v52)
  {
    v30 = (void (**)(_QWORD *))(v52[0] + 32);
    v29 = v52;
  }
  else
  {
    if (!v53)
      goto LABEL_56;
    v30 = (void (**)(_QWORD *))(*v53 + 40);
  }
  (*v30)(v29);
LABEL_56:
  v31 = v55;
  if (v55 == v54)
  {
    v32 = (void (**)(_QWORD *))(v54[0] + 32);
    v31 = v54;
  }
  else
  {
    if (!v55)
      goto LABEL_61;
    v32 = (void (**)(_QWORD *))(*v55 + 40);
  }
  (*v32)(v31);
LABEL_61:
  v33 = v58;
  if (v58 == &v56)
  {
    v34 = (void (**)(uint64_t (***)()))(v56 + 4);
    v33 = &v56;
LABEL_65:
    (*v34)(v33);
    goto LABEL_66;
  }
  if (v58)
  {
    v34 = (void (**)(uint64_t (***)()))(*v58 + 5);
    goto LABEL_65;
  }
LABEL_66:
  sub_1C61AA204(v59);
  sub_1C61AA280(v61);
  sub_1C61AA2EC(v63);
  return 0;
}

void sub_1C4EF05F0()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4EF0604(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E813A060;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C4EF063C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E813A060;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C4EF065C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v18;
  BOOL v19;
  char *v20;
  _QWORD *v21;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = operator new();
  *(_QWORD *)v5 = v5 + 16;
  *(_QWORD *)(v5 + 8) = 0x100000000;
  *(_DWORD *)(v5 + 68) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_DWORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = a2;
  sub_1C53BA620(v5, 0);
  v21 = (_QWORD *)v5;
  sub_1C4EF0828(v4, (char *)&v21);
  v6 = (uint64_t)v21;
  v21 = 0;
  if (v6)
    sub_1C4DC4DE4((uint64_t)&v21, v6);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 8) + 8) - 8);
  v9 = operator new();
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_DWORD *)(v9 + 16) = 0;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_QWORD *)(v9 + 56) = 0;
  *(_QWORD *)(v9 + 64) = v9 + 80;
  *(_QWORD *)(v9 + 72) = 0x400000000;
  *(_QWORD *)(v9 + 128) = 0;
  *(_QWORD *)(v9 + 112) = v9 + 128;
  *(_QWORD *)(v9 + 120) = 0;
  *(_QWORD *)(v9 + 136) = 1;
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze(v9, v8);
  v21 = (_QWORD *)v9;
  v10 = *(unsigned int *)(v7 + 8);
  v11 = *(_QWORD *)v7;
  v12 = (char *)&v21;
  if (v10 >= *(_DWORD *)(v7 + 12))
  {
    v18 = v10 + 1;
    v19 = v11 + 8 * v10 > (unint64_t)&v21;
    if (v11 <= (unint64_t)&v21 && v19)
    {
      v20 = (char *)&v21 - v11;
      sub_1C61A9934(v7, v18);
      v11 = *(_QWORD *)v7;
      v12 = &v20[*(_QWORD *)v7];
    }
    else
    {
      sub_1C61A9934(v7, v18);
      v11 = *(_QWORD *)v7;
      v12 = (char *)&v21;
    }
  }
  v13 = *(unsigned int *)(v7 + 8);
  v14 = *(_QWORD *)v12;
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v11 + 8 * v13) = v14;
  *(_DWORD *)(v7 + 8) = v13 + 1;
  v15 = v21;
  v21 = 0;
  if (v15)
  {
    v16 = llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase(v15);
    MEMORY[0x1CAA32FC0](v16, 0x10B0C40D29300ECLL);
  }
  return *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 16) + 8) - 8);
}

void sub_1C4EF0828(uint64_t a1, char *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v11;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v8 = v4 + 1;
    v9 = v5 + 8 * v4;
    if (v5 <= (unint64_t)a2 && v9 > (unint64_t)a2)
    {
      v11 = &a2[-v5];
      sub_1C61A9864(a1, v8);
      v5 = *(_QWORD *)a1;
      a2 = &v11[*(_QWORD *)a1];
    }
    else
    {
      sub_1C61A9864(a1, v8);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v5 + 8 * v6) = v7;
  *(_DWORD *)(a1 + 8) = v6 + 1;
}

void sub_1C4EF08B0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4EF08C4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E813A0A8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4EF08F8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E813A0A8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4EF0914(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = operator new();
  *(_QWORD *)v5 = v5 + 16;
  *(_QWORD *)(v5 + 8) = 0x100000000;
  *(_DWORD *)(v5 + 68) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_DWORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = a2;
  sub_1C53BA620(v5, 0);
  v8 = v5;
  sub_1C4EF0828(v4, (char *)&v8);
  v6 = v8;
  v8 = 0;
  if (v6)
    sub_1C4DC4DE4((uint64_t)&v8, v6);
  return *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 8) + 8) - 8);
}

void sub_1C4EF09D0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4EF09E4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E813A0F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4EF0A18(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E813A0F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4EF0A34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  BOOL v14;
  char *v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = operator new();
  *(_QWORD *)v5 = v5 + 16;
  *(_QWORD *)(v5 + 8) = 0x400000000;
  *(_DWORD *)(v5 + 92) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_DWORD *)(v5 + 64) = 0;
  *(_BYTE *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = a2;
  sub_1C53BA93C(v5, 0);
  v16 = v5;
  v6 = *(unsigned int *)(v4 + 8);
  v7 = *(_QWORD *)v4;
  v8 = &v16;
  if (v6 >= *(_DWORD *)(v4 + 12))
  {
    v13 = v6 + 1;
    v14 = v7 + 8 * v6 > (unint64_t)&v16;
    if (v7 <= (unint64_t)&v16 && v14)
    {
      v15 = (char *)&v16 - v7;
      sub_1C61A9A14(v4, v13);
      v7 = *(_QWORD *)v4;
      v8 = (uint64_t *)&v15[*(_QWORD *)v4];
    }
    else
    {
      sub_1C61A9A14(v4, v13);
      v7 = *(_QWORD *)v4;
      v8 = &v16;
    }
  }
  v9 = *(unsigned int *)(v4 + 8);
  v10 = *v8;
  *v8 = 0;
  *(_QWORD *)(v7 + 8 * v9) = v10;
  *(_DWORD *)(v4 + 8) = v9 + 1;
  v11 = v16;
  v16 = 0;
  if (v11)
    sub_1C4DC4E98((uint64_t)&v16, v11);
  return *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 8) + 8) - 8);
}

void sub_1C4EF0B58(_QWORD *a1)
{
  *a1 = &off_1E813A210;
  sub_1C61AA614((uint64_t)(a1 + 1));
  MEMORY[0x1CAA32FB4](a1[1], 8);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4EF0BA4(uint64_t a1, uint64_t a2, llvm::raw_ostream *a3)
{
  unint64_t v6;
  _OWORD *v7;
  llvm::raw_ostream *v8;
  _QWORD *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  size_t v12;
  uint64_t v13;
  char v14;
  char *v15;
  char *v16;
  uint64_t v17;
  size_t v18;
  _WORD *v19;
  const char *v20;
  llvm::raw_ostream *v21;
  uint64_t ***v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ****v27;
  uint64_t ***v28;
  int v29;
  int v30;
  size_t *v31;
  const void *v32;
  size_t v33;
  size_t v34;
  void *v35;
  _BYTE *v36;
  void *v37;
  unsigned int v38;
  _QWORD v39[5];

  v39[4] = *MEMORY[0x1E0C80C00];
  if (!sub_1C61A45F4(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 24), a2, &v37))
    return;
  sub_1C61AA584(&v37, *(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 24), a2);
  v6 = v38;
  if (v38 < 2)
  {
    v13 = *((_QWORD *)a3 + 4);
    if ((unint64_t)(*((_QWORD *)a3 + 3) - v13) <= 0x10)
    {
      v10 = " ; (mustexec in: ";
      v11 = a3;
      v12 = 17;
      goto LABEL_10;
    }
    *(_BYTE *)(v13 + 16) = 32;
    *(_OWORD *)v13 = *(_OWORD *)" ; (mustexec in: ";
    *((_QWORD *)a3 + 4) += 17;
  }
  else
  {
    v7 = (_OWORD *)*((_QWORD *)a3 + 4);
    if (*((_QWORD *)a3 + 3) - (_QWORD)v7 > 0xFuLL)
    {
      *v7 = *(_OWORD *)" ; (mustexec in ";
      *((_QWORD *)a3 + 4) += 16;
      v8 = a3;
    }
    else
    {
      v8 = llvm::raw_ostream::write(a3, " ; (mustexec in ", 0x10uLL);
    }
    sub_1C5E21910(v8, v6, 0, 0, 0);
    v9 = (_QWORD *)*((_QWORD *)v8 + 4);
    if (*((_QWORD *)v8 + 3) - (_QWORD)v9 <= 7uLL)
    {
      v10 = " loops: ";
      v11 = v8;
      v12 = 8;
LABEL_10:
      llvm::raw_ostream::write(v11, v10, v12);
      goto LABEL_11;
    }
    *v9 = 0x203A73706F6F6C20;
    *((_QWORD *)v8 + 4) += 8;
  }
LABEL_11:
  if (v38)
  {
    v14 = 0;
    v15 = (char *)v37;
    v16 = (char *)v37 + 8 * v38;
    do
    {
      v17 = *(_QWORD *)v15;
      if ((v14 & 1) != 0)
        v18 = 2;
      else
        v18 = 0;
      v19 = (_WORD *)*((_QWORD *)a3 + 4);
      if (v18 <= *((_QWORD *)a3 + 3) - (_QWORD)v19)
      {
        v21 = a3;
        if ((v14 & 1) != 0)
        {
          *v19 = 8236;
          *((_QWORD *)a3 + 4) += 2;
          v21 = a3;
        }
      }
      else
      {
        if ((v14 & 1) != 0)
          v20 = ", ";
        else
          v20 = 0;
        v21 = llvm::raw_ostream::write(a3, v20, v18);
      }
      v22 = **(uint64_t *****)(v17 + 32);
      if ((*((_BYTE *)v22 + 23) & 0x10) == 0)
        goto LABEL_35;
      v23 = ***v22;
      v24 = *(_QWORD *)(v23 + 152);
      v25 = *(unsigned int *)(v23 + 168);
      if ((_DWORD)v25)
      {
        LODWORD(v26) = (v25 - 1) & ((v22 >> 4) ^ (v22 >> 9));
        v27 = (uint64_t ****)(v24 + 16 * v26);
        v28 = *v27;
        if (*v27 == v22)
          goto LABEL_31;
        v29 = 1;
        while (v28 != (uint64_t ***)-4096)
        {
          v30 = v26 + v29++;
          v26 = v30 & (v25 - 1);
          v28 = *(uint64_t ****)(v24 + 16 * v26);
          if (v28 == v22)
          {
            v27 = (uint64_t ****)(v24 + 16 * v26);
            goto LABEL_31;
          }
        }
      }
      v27 = (uint64_t ****)(v24 + 16 * v25);
LABEL_31:
      v31 = (size_t *)v27[1];
      v34 = *v31;
      v32 = v31 + 2;
      v33 = v34;
      v35 = (void *)*((_QWORD *)v21 + 4);
      if (v34 <= *((_QWORD *)v21 + 3) - (_QWORD)v35)
      {
        if (v33)
        {
          memcpy(v35, v32, v33);
          *((_QWORD *)v21 + 4) += v33;
        }
      }
      else
      {
        llvm::raw_ostream::write(v21, (const char *)v32, v33);
      }
LABEL_35:
      v15 += 8;
      v14 = 1;
    }
    while (v15 != v16);
  }
  v36 = (_BYTE *)*((_QWORD *)a3 + 4);
  if (*((_BYTE **)a3 + 3) == v36)
  {
    llvm::raw_ostream::write(a3, ")", 1uLL);
  }
  else
  {
    *v36 = 41;
    ++*((_QWORD *)a3 + 4);
  }
  if (v37 != v39)
    free(v37);
}

_QWORD *sub_1C4EF0ED8(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(56 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61AA48C(a1, v4, v4 + 56 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 56 * v10;
    do
    {
      *result = -4096;
      result += 7;
      v11 -= 56;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C4EF0F9C(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61AA9FC(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1C4EF1054(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    MEMORY[0x1CAA32FB4](*a2, 8);
    JUMPOUT(0x1CAA32FC0);
  }
}

_QWORD *sub_1C4EF1098(_QWORD *a1)
{
  *a1 = &off_1E8139EE0;
  a1[9] = &unk_1E8138548;
  MEMORY[0x1CAA32FB4](a1[10], 8);
  a1[5] = &unk_1E8138548;
  MEMORY[0x1CAA32FB4](a1[6], 8);
  *a1 = &unk_1E813A258;
  sub_1C4EF1108(a1 + 1);
  return a1;
}

uint64_t *sub_1C4EF1108(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    v5 = (uint64_t *)(v3 + 8);
    do
    {
      if ((*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v5 = sub_1C619127C(v5);
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

_QWORD *sub_1C4EF1170(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61AAD70(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1C4EF1228(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 8);
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *(_QWORD *)(a1 + 8) = 0;
    if (!(_DWORD)v2)
      return;
    v6 = *(void **)a1;
LABEL_11:
    memset_pattern16(v6, &unk_1C85F4BD0, 8 * v2);
    return;
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
  if (v5)
  {
    v7 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
    v8 = v7 | (v7 >> 2) | ((v7 | (v7 >> 2)) >> 4);
    LODWORD(v8) = (((v8 | (v8 >> 8)) >> 16) | v8 | (v8 >> 8)) + 1;
    *(_DWORD *)(a1 + 16) = v8;
    v6 = operator new(8 * v8, (std::align_val_t)8uLL);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = 0;
    v2 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v2)
      return;
    goto LABEL_11;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
}

void sub_1C4EF1310(uint64_t a1, int a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(unint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  v9 = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = v9;
  if (v4)
  {
    sub_1C61AB104(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
    memset_pattern16(v9, &unk_1C85F4BD0, 8 * v10);
}

void sub_1C4EF13D4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4EF13E8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E813A298;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4EF141C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E813A298;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4EF1438(uint64_t a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*(_QWORD *)(a1 + 8), &llvm::LoopAnalysis::Key, a2) + 8;
}

void sub_1C4EF1464()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4EF1478(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E813A2E0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4EF14AC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E813A2E0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4EF14C8(uint64_t a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*(_QWORD *)(a1 + 8), &llvm::DominatorTreeAnalysis::Key, a2)+ 8;
}

void sub_1C4EF14F4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4EF1508(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E813A328;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4EF153C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E813A328;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4EF1558(uint64_t a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*(_QWORD *)(a1 + 8), &llvm::PostDominatorTreeAnalysis::Key, a2)+ 8;
}

uint64_t sub_1C4EF1580(uint64_t a1, const llvm::Function *a2)
{
  int v2;
  uint64_t v3;

  v2 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v2 == 84)
  {
    v3 = *(_QWORD *)(a1 - 32);
    if (v3 && !*(_BYTE *)(v3 + 16) && *(_QWORD *)(v3 + 24) == *(_QWORD *)(a1 + 72))
      return llvm::objcarc::GetFunctionClass(*(llvm::objcarc **)(a1 - 32), a2);
    else
      return 21;
  }
  else if (v2 == 33)
  {
    return 21;
  }
  else
  {
    return 23;
  }
}

uint64_t sub_1C4EF15D4(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "ObjC-ARC-Based Alias Analysis";
  *(_QWORD *)(v2 + 8) = 29;
  *(_QWORD *)(v2 + 16) = "objc-arc-aa";
  *(_QWORD *)(v2 + 24) = 11;
  *(_QWORD *)(v2 + 32) = &llvm::objcarc::ObjCARCAAWrapperPass::ID;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::objcarc::ObjCARCAAWrapperPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::objcarc::IsPotentialRetainableObjPtr(llvm::objcarc *this, const llvm::Value *a2, llvm::AAResults *a3)
{
  uint64_t result;
  unsigned int v5;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  char v12;
  llvm::objcarc *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  result = 0;
  v5 = *((unsigned __int8 *)this + 16);
  if (v5 >= 0x15 && v5 != 59)
  {
    if (v5 == 21)
    {
      if ((llvm::Argument::hasPassPointeeByValueCopyAttr(this) & 1) != 0)
        return 0;
      if ((llvm::Argument::hasNestAttr(this) & 1) != 0)
        return 0;
      v7 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
      if (v7 == 15)
      {
        v8 = *(_QWORD *)(*((_QWORD *)this + 3) + 112);
        if (v8)
        {
          v9 = *((_DWORD *)this + 8) + 2;
          if (v9 < *(_DWORD *)(v8 + 8))
          {
            v10 = *(_QWORD *)(v8 + 8 * v9 + 40);
            if (v10)
            {
              if ((*(_BYTE *)(v10 + 21) & 2) != 0)
                return 0;
            }
          }
        }
      }
    }
    else
    {
      v7 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
    }
    if (v7 != 15)
      return 0;
    v13 = this;
    v14 = -1;
    v15 = 0u;
    v16 = 0u;
    v11 = llvm::AAResults::pointsToConstantMemory((uint64_t)a2, (uint64_t)&v13, 0);
    result = 0;
    if ((v11 & 1) == 0)
    {
      if (*((_BYTE *)this + 16) != 60)
        return 1;
      v13 = (llvm::objcarc *)*((_QWORD *)this - 4);
      v14 = -1;
      v15 = 0u;
      v16 = 0u;
      v12 = llvm::AAResults::pointsToConstantMemory((uint64_t)a2, (uint64_t)&v13, 0);
      result = 0;
      if ((v12 & 1) == 0)
        return 1;
    }
  }
  return result;
}

uint64_t sub_1C4EF1798()
{
  int v1;
  char v2;
  char *v3;
  char *v4;
  __int128 v5;

  *(_QWORD *)&v5 = "enable/disable all ARC Optimizations";
  *((_QWORD *)&v5 + 1) = 36;
  v2 = 1;
  v3 = &v2;
  v4 = &llvm::objcarc::EnableARCOpts;
  v1 = 1;
  sub_1C61AB648(&v5, &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4EB22A8, &qword_1ED7F2E18, &dword_1C475E000);
}

uint64_t llvm::objcarc::operator<<(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))((char *)sub_1C4EF1828 + 4 * byte_1C85F4C54[a2]))();
}

{
  return ((uint64_t (*)(void))((char *)sub_1C59917C8 + 4 * byte_1C8663CCC[a2]))();
}

llvm::raw_ostream *sub_1C4EF1828(llvm::raw_ostream *result)
{
  uint64_t v1;

  v1 = *((_QWORD *)result + 4);
  if ((unint64_t)(*((_QWORD *)result + 3) - v1) <= 0x12)
    return llvm::raw_ostream::write(result, "ARCInstKind::Retain", 0x13uLL);
  *(_DWORD *)(v1 + 15) = 1852399988;
  *(_OWORD *)v1 = *(_OWORD *)"ARCInstKind::Retain";
  *((_QWORD *)result + 4) += 19;
  return result;
}

uint64_t llvm::objcarc::GetARCInstKind(llvm::objcarc *this, const llvm::Value *a2)
{
  llvm::objcarc *v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  llvm::Argument **v6;
  int v7;
  char *v8;
  uint64_t v9;
  llvm::Argument *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v23;
  char v24;
  BOOL v25;
  uint64_t v26;

  if (this)
  {
    v2 = this;
    if (*((unsigned __int8 *)this + 16) >= 0x1Cu)
    {
      switch(*((_BYTE *)this + 16))
      {
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
        case 0x29:
        case 0x2A:
        case 0x2B:
        case 0x2C:
        case 0x2D:
        case 0x2E:
        case 0x2F:
        case 0x30:
        case 0x31:
        case 0x32:
        case 0x33:
        case 0x34:
        case 0x35:
        case 0x36:
        case 0x37:
        case 0x38:
        case 0x39:
        case 0x3A:
        case 0x3B:
        case 0x3E:
        case 0x42:
        case 0x43:
        case 0x44:
        case 0x45:
        case 0x46:
        case 0x47:
        case 0x48:
        case 0x49:
        case 0x4A:
        case 0x4C:
        case 0x4D:
        case 0x52:
        case 0x53:
        case 0x55:
        case 0x58:
        case 0x59:
        case 0x5A:
        case 0x5B:
        case 0x5C:
          return 24;
        case 0x21:
          return sub_1C61AB7C8((uint64_t)v2);
        case 0x51:
          v7 = *((_DWORD *)this + 5);
          if ((v7 & 0x40000000) != 0)
            v8 = (char *)*((_QWORD *)this - 1);
          else
            v8 = (char *)this - 32 * (v7 & 0x7FFFFFF);
          v16 = *((_QWORD *)v8 + 4);
          v17 = *(unsigned __int8 *)(v16 + 16);
          if (v17 < 0x15 || v17 == 59)
            return 24;
          if (v17 == 21)
          {
            if ((llvm::Argument::hasPassPointeeByValueCopyAttr((llvm::Argument *)v16) & 1) != 0
              || (llvm::Argument::hasNestAttr((llvm::Argument *)v16) & 1) != 0)
            {
              return 24;
            }
            v18 = *(unsigned __int8 *)(*(_QWORD *)v16 + 8);
            if (v18 == 15)
            {
              v19 = *(_QWORD *)(*(_QWORD *)(v16 + 24) + 112);
              if (v19)
              {
                v20 = *(_DWORD *)(v16 + 32) + 2;
                if (v20 < *(_DWORD *)(v19 + 8))
                {
                  v26 = *(_QWORD *)(v19 + 8 * v20 + 40);
                  if (v26)
                  {
                    if ((*(_BYTE *)(v26 + 21) & 2) != 0)
                      return 24;
                  }
                }
              }
              v18 = 15;
            }
          }
          else
          {
            v18 = *(unsigned __int8 *)(*(_QWORD *)v16 + 8);
          }
          if (v18 != 15)
            return 24;
          return 23;
        case 0x54:
          v21 = *((_QWORD *)this - 4);
          if (!v21 || *(_BYTE *)(v21 + 16) || *(_QWORD *)(v21 + 24) != *((_QWORD *)this + 9))
            return sub_1C61AB7C8((uint64_t)v2);
          result = llvm::objcarc::GetFunctionClass(*((llvm::objcarc **)this - 4), a2);
          if ((_DWORD)result != 21)
            return result;
          v23 = *(_DWORD *)(v21 + 36);
          result = 24;
          if (v23 <= 146)
          {
            if ((v23 - 56) <= 0x11 && ((1 << (v23 - 56)) & 0x25627) != 0)
              return result;
            v25 = (v23 - 2) >= 2;
            goto LABEL_53;
          }
          v24 = v23 + 109;
          if ((v23 - 147) > 0x34)
            goto LABEL_48;
          if (((1 << v24) & 0x330801) != 0)
            return result;
          if (((1 << v24) & 0x14800000000000) == 0)
          {
LABEL_48:
            if ((v23 - 236) <= 0x34 && ((1 << (v23 + 20)) & 0x1C000000200011) != 0)
              return result;
            v25 = (v23 - 313) >= 3;
LABEL_53:
            v2 = this;
            if (v25)
              return sub_1C61AB7C8((uint64_t)v2);
            return result;
          }
          return 23;
        default:
          v4 = *((_DWORD *)this + 5);
          if ((v4 & 0x40000000) != 0)
          {
            v6 = (llvm::Argument **)*((_QWORD *)this - 1);
            v5 = v4 & 0x7FFFFFF;
          }
          else
          {
            v5 = v4 & 0x7FFFFFF;
            v6 = (llvm::Argument **)((char *)this - 32 * v5);
          }
          if (!v5)
            return 24;
          v9 = 32 * v5;
          break;
      }
      do
      {
        v10 = *v6;
        v11 = *((unsigned __int8 *)*v6 + 16);
        if (v11 >= 0x15 && v11 != 59)
        {
          if (v11 != 21)
          {
            v12 = *(unsigned __int8 *)(*(_QWORD *)v10 + 8);
LABEL_25:
            if (v12 == 15)
              return 23;
            goto LABEL_26;
          }
          if ((llvm::Argument::hasPassPointeeByValueCopyAttr(*v6) & 1) == 0
            && (llvm::Argument::hasNestAttr(v10) & 1) == 0)
          {
            v12 = *(unsigned __int8 *)(*(_QWORD *)v10 + 8);
            if (v12 != 15)
              goto LABEL_25;
            v13 = *(_QWORD *)(*((_QWORD *)v10 + 3) + 112);
            if (!v13)
              goto LABEL_25;
            v14 = *((_DWORD *)v10 + 8) + 2;
            if (v14 >= *(_DWORD *)(v13 + 8))
              goto LABEL_25;
            v15 = *(_QWORD *)(v13 + 8 * v14 + 40);
            if (!v15 || (*(_BYTE *)(v15 + 21) & 2) == 0)
              goto LABEL_25;
          }
        }
LABEL_26:
        v6 += 4;
        v9 -= 32;
      }
      while (v9);
    }
  }
  return 24;
}

BOOL sub_1C4EF2064(llvm::Argument *this)
{
  _BOOL8 result;
  unsigned int v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  result = 0;
  v3 = *((unsigned __int8 *)this + 16);
  if (v3 >= 0x15 && v3 != 59)
  {
    if (v3 == 21)
    {
      if ((llvm::Argument::hasPassPointeeByValueCopyAttr(this) & 1) != 0
        || (llvm::Argument::hasNestAttr(this) & 1) != 0)
      {
        return 0;
      }
      v4 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
      if (v4 == 15)
      {
        v5 = *(_QWORD *)(*((_QWORD *)this + 3) + 112);
        if (!v5
          || (v6 = *((_DWORD *)this + 8) + 2, v6 >= *(_DWORD *)(v5 + 8))
          || (v7 = *(_QWORD *)(v5 + 8 * v6 + 40)) == 0
          || (*(_BYTE *)(v7 + 21) & 2) == 0)
        {
          v4 = 15;
          return v4 == 15;
        }
        return 0;
      }
    }
    else
    {
      v4 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
    }
    return v4 == 15;
  }
  return result;
}

uint64_t llvm::objcarc::IsUser(char a1)
{
  return (0xB00000u >> a1) & 1;
}

llvm::OptimizationRemarkEmitter *llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter(llvm::OptimizationRemarkEmitter *this, const llvm::Function *a2)
{
  uint64_t ***v3;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t v7;
  _BYTE v9[248];
  _QWORD v10[2];
  int v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD v17[6];
  _QWORD v18[2];
  void *v19[2];
  uint64_t v20;
  uint64_t v21[2];
  int v22;
  uint64_t v23;
  const llvm::Function *v24;
  char v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 1) = 0;
  v3 = (uint64_t ***)((char *)this + 8);
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 2) = 0;
  if (*(_BYTE *)(***(_QWORD ***)a2 + 81))
  {
    v19[0] = &v20;
    v19[1] = (void *)0x100000000;
    v26 = 0;
    v21[0] = 0;
    v21[1] = 0;
    v22 = 0;
    v25 = 0;
    v23 = 0;
    v24 = a2;
    sub_1C53BA620((uint64_t)v19, 0);
    v10[0] = 0;
    v10[1] = 0;
    v11 = 0;
    v12 = 0u;
    v13 = 0u;
    v14 = 0;
    v15 = v17;
    v16 = 0x400000000;
    v17[4] = v18;
    v17[5] = 0;
    v18[0] = 0;
    v18[1] = 1;
    llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze((uint64_t)v10, (uint64_t)v19);
    sub_1C4EEA178((uint64_t)v9, a2, (uint64_t)v10, 0, (uint64_t)v19, 0);
    v5 = (uint64_t **)operator new();
    *v5 = 0;
    llvm::BlockFrequencyInfo::calculate(v5, a2);
    v6 = (uint64_t *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v5;
    if (v6)
    {
      v7 = *v6;
      *v6 = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      MEMORY[0x1CAA32FC0](v6, 0x20C4093837F09);
      v5 = (uint64_t **)*((_QWORD *)this + 2);
    }
    *v3 = v5;
    sub_1C4DC0BBC((uint64_t)v9);
    llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase(v10);
    sub_1C4DC4E38(v21);
    if (v19[0] != &v20)
      free(v19[0]);
  }
  return this;
}

uint64_t llvm::OptimizationRemarkEmitter::invalidate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v8;

  v4 = *(uint64_t **)(a1 + 16);
  if (v4)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    v6 = *v4;
    *v4 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    MEMORY[0x1CAA32FC0](v8, 0x20C4093837F09);
    *(_QWORD *)(a1 + 8) = 0;
  }
  else if (*(_QWORD *)(a1 + 8) && (sub_1C61ABB78(a4, (uint64_t)&llvm::BlockFrequencyAnalysis::Key, a2, a3) & 1) != 0)
  {
    return 1;
  }
  return 0;
}

uint64_t *llvm::OptimizationRemarkEmitter::computeHotness(llvm::OptimizationRemarkEmitter *this, const llvm::Value *a2)
{
  uint64_t *result;

  result = (uint64_t *)*((_QWORD *)this + 1);
  if (result)
    return llvm::BlockFrequencyInfo::getBlockProfileCount((uint64_t **)result, a2, 0);
  return result;
}

uint64_t *llvm::OptimizationRemarkEmitter::computeHotness(uint64_t *this, llvm::DiagnosticInfoIROptimization *a2)
{
  const llvm::BasicBlock *v3;
  uint64_t v4;

  v3 = (const llvm::BasicBlock *)*((_QWORD *)a2 + 45);
  if (v3)
  {
    this = (uint64_t *)this[1];
    if (this)
      this = llvm::BlockFrequencyInfo::getBlockProfileCount((uint64_t **)this, v3, 0);
    else
      v4 = 0;
    *((_QWORD *)a2 + 8) = this;
    *((_QWORD *)a2 + 9) = v4;
  }
  return this;
}

uint64_t llvm::OptimizationRemarkEmitterWrapperPass::runOnFunction(llvm::OptimizationRemarkEmitterWrapperPass *this, uint64_t ***a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void **v10;
  void *v11;
  uint64_t v12;
  void **v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  if (*(_BYTE *)(***a2 + 81))
  {
    v17 = **a2;
    v10 = (void **)**((_QWORD **)this + 1);
    do
    {
      v11 = *v10;
      v10 += 2;
    }
    while (v11 != &llvm::LazyBlockFrequencyInfoPass::ID);
    v12 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), &llvm::LazyBlockFrequencyInfoPass::ID);
    v4 = sub_1C619C0A4(v12 + 32);
    if (llvm::LLVMContext::isDiagnosticsHotnessThresholdSetFromPSI((llvm::LLVMContext *)v17))
    {
      v13 = (void **)**((_QWORD **)this + 1);
      do
      {
        v14 = *v13;
        v13 += 2;
      }
      while (v14 != &llvm::ProfileSummaryInfoWrapperPass::ID);
      v15 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), &llvm::ProfileSummaryInfoWrapperPass::ID);
      v16 = llvm::ProfileSummaryInfo::getOrCompHotCountThreshold(*(llvm::ProfileSummaryInfo **)(v15 + 32));
      llvm::LLVMContext::setDiagnosticsHotnessThreshold(v17, v16, 1);
    }
  }
  else
  {
    v4 = 0;
  }
  v5 = (_QWORD *)operator new();
  *v5 = a2;
  v5[1] = v4;
  v5[2] = 0;
  v8 = *((_QWORD *)this + 4);
  v7 = (_QWORD *)((char *)this + 32);
  v6 = v8;
  *v7 = v5;
  if (v8)
    sub_1C4EF268C((uint64_t)v7, v6);
  return 0;
}

void llvm::OptimizationRemarkEmitterAnalysis::run(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t ResultImpl;
  llvm::ProfileSummaryInfo *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t *v11;

  v3 = a1;
  v4 = **(uint64_t ***)a1;
  if (*(_BYTE *)(*v4 + 81))
  {
    v11 = a3;
    v10 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::BlockFrequencyAnalysis::Key, a1) + 8;
    if (llvm::LLVMContext::isDiagnosticsHotnessThresholdSetFromPSI((llvm::LLVMContext *)v4))
    {
      ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::Function>::Key, a1);
      v7 = (llvm::ProfileSummaryInfo *)sub_1C4E60FE0((uint64_t *)(ResultImpl + 8), *(_QWORD *)(a1 + 40));
      if (v7)
      {
        v8 = llvm::ProfileSummaryInfo::getOrCompHotCountThreshold(v7);
        llvm::LLVMContext::setDiagnosticsHotnessThreshold(v4, v8, 1);
      }
    }
    v5 = v10;
    a3 = v11;
    v3 = a1;
  }
  else
  {
    v5 = 0;
  }
  *a3 = v3;
  a3[1] = v5;
  a3[2] = 0;
}

uint64_t sub_1C4EF25EC(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeLazyBFIPassPass(a1, a2);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v3);
  v4 = operator new();
  *(_QWORD *)v4 = "Optimization Remark Emitter";
  *(_QWORD *)(v4 + 8) = 27;
  *(_QWORD *)(v4 + 16) = "opt-remark-emitter";
  *(_QWORD *)(v4 + 24) = 18;
  *(_QWORD *)(v4 + 32) = &llvm::OptimizationRemarkEmitterWrapperPass::ID;
  *(_WORD *)(v4 + 40) = 256;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = llvm::callDefaultCtor<llvm::OptimizationRemarkEmitterWrapperPass>;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

void sub_1C4EF268C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  if (a2)
  {
    v2 = *(uint64_t **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    if (v2)
    {
      v3 = *v2;
      *v2 = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      MEMORY[0x1CAA32FC0](v2, 0x20C4093837F09);
    }
    JUMPOUT(0x1CAA32FC0);
  }
}

uint64_t llvm::isCheckForZeroAndMulWithOverflow(llvm *this, llvm::Value *a2, llvm::Value *a3, _QWORD *a4, llvm::Use **a5)
{
  int v6;
  int v8;
  uint64_t result;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25[3];
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;

  v6 = (int)a3;
  v28 = 0;
  v26 = 0;
  v27 = 0;
  v25[0] = &v28;
  v25[1] = &v27;
  v8 = sub_1C4EF292C((uint64_t)v25, (uint64_t)this);
  result = 0;
  if (v8)
  {
    v10 = v27;
    if (v6 && v28 == 33)
    {
      if (!a2)
        return 0;
      if (*((_BYTE *)a2 + 16) != 92)
        return 0;
      v11 = (_DWORD *)*((_QWORD *)a2 + 8);
      v12 = *((_DWORD *)a2 + 18);
      v29 = 1;
      if (v12 != 1)
        return 0;
      if (*v11 != v29)
        return 0;
      v13 = *((_QWORD *)a2 - 4);
      if (*(_BYTE *)(v13 + 16) != 84)
        return 0;
      v14 = *(_QWORD *)(v13 - 32);
      if (!v14)
        return 0;
      if (*(_BYTE *)(v14 + 16))
        return 0;
      if (*(_QWORD *)(v14 + 24) != *(_QWORD *)(v13 + 72))
        return 0;
      if ((*(_BYTE *)(v14 + 33) & 0x20) == 0)
        return 0;
      v15 = *(_DWORD *)(v14 + 36);
      if (v15 != 309 && v15 != 278)
        return 0;
      v16 = *(_DWORD *)(v13 + 20);
      v17 = v16 & 0x7FFFFFF;
    }
    else
    {
      if ((v6 & 1) != 0)
        return 0;
      if (v28 != 32)
        return 0;
      v25[0] = &v26;
      if (!sub_1C4D9EC28(v25, 30, (uint64_t)a2))
        return 0;
      if (!v26)
        return 0;
      if (*(_BYTE *)(v26 + 16) != 92)
        return 0;
      v18 = *(_DWORD **)(v26 + 64);
      v19 = *(_DWORD *)(v26 + 72);
      v29 = 1;
      if (v19 != 1)
        return 0;
      if (*v18 != v29)
        return 0;
      v13 = *(_QWORD *)(v26 - 32);
      if (*(_BYTE *)(v13 + 16) != 84)
        return 0;
      v20 = *(_QWORD *)(v13 - 32);
      if (!v20)
        return 0;
      if (*(_BYTE *)(v20 + 16))
        return 0;
      if (*(_QWORD *)(v20 + 24) != *(_QWORD *)(v13 + 72))
        return 0;
      if ((*(_BYTE *)(v20 + 33) & 0x20) == 0)
        return 0;
      v21 = *(_DWORD *)(v20 + 36);
      if (v21 != 309 && v21 != 278)
        return 0;
      v16 = *(_DWORD *)(v13 + 20);
      v17 = v16 & 0x7FFFFFF;
    }
    v22 = (_QWORD *)(v13 - 32 * v17);
    if (*v22 == v10)
    {
      v23 = 1;
    }
    else
    {
      if (v22[4] != v10)
        return 0;
      v23 = 0;
    }
    if ((v16 & 0x40000000) != 0)
      v24 = *(_QWORD *)(v13 - 8);
    else
      v24 = v13 - 32 * (v16 & 0x7FFFFFF);
    *a4 = v24 + 32 * v23;
    return 1;
  }
  return result;
}

uint64_t llvm::isCheckForZeroAndMulWithOverflow(llvm *this, llvm::Value *a2, llvm::Value *a3, BOOL a4, llvm::Use **a5)
{
  uint64_t v6;

  return llvm::isCheckForZeroAndMulWithOverflow(this, a2, a3, &v6, a5);
}

uint64_t sub_1C4EF292C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  char v7;

  result = 0;
  if (a2 && *(_BYTE *)(a2 + 16) == 81)
  {
    v5 = *(_QWORD *)(a2 - 64);
    if (v5
      && (**(_QWORD **)(a1 + 8) = v5, (v6 = *(unsigned __int8 **)(a2 - 32)) != 0)
      && v6[16] <= 0x14u
      && ((llvm::Constant::isNullValue(*(llvm::Constant **)(a2 - 32)) & 1) != 0
       || (sub_1C4E71060((uint64_t)&v7, (llvm::Constant *)v6) & 1) != 0))
    {
      **(_DWORD **)a1 = *(_WORD *)(a2 + 18) & 0x3F;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::PHITransAddr::Verify(llvm::PHITransAddr *this)
{
  _BYTE *v2;
  _BYTE *v3;
  llvm *v4;
  llvm::raw_ostream *v5;
  void *v6;
  unsigned int i;
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  void *v10;
  _DWORD *v11;
  _BYTE *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[9];

  v16[8] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)this)
  {
    v2 = (_BYTE *)*((_QWORD *)this + 4);
    v3 = &v2[8 * *((unsigned int *)this + 10)];
    v14 = v16;
    v15 = 0x800000000;
    sub_1C486AF08((unsigned int *)&v14, v2, v3);
    v4 = (llvm *)sub_1C4EF2BF0(*(_QWORD *)this, (uint64_t)&v14);
    if ((_DWORD)v15)
    {
      v5 = (llvm::raw_ostream *)llvm::errs(v4);
      v6 = (void *)*((_QWORD *)v5 + 4);
      if (*((_QWORD *)v5 + 3) - (_QWORD)v6 > 0x29uLL)
      {
        qmemcpy(v6, "PHITransAddr contains extra instructions:\n", 42);
        *((_QWORD *)v5 + 4) += 42;
      }
      else
      {
        v5 = llvm::raw_ostream::write(v5, "PHITransAddr contains extra instructions:\n", 0x2AuLL);
      }
      for (i = 0; ; ++i)
      {
        v8 = (llvm::raw_ostream *)llvm::errs(v5);
        v9 = v8;
        v10 = (void *)*((_QWORD *)v8 + 4);
        if (*((_QWORD *)v8 + 3) - (_QWORD)v10 > 0xCuLL)
        {
          qmemcpy(v10, "  InstInput #", 13);
          *((_QWORD *)v8 + 4) += 13;
        }
        else
        {
          llvm::raw_ostream::write(v8, "  InstInput #", 0xDuLL);
        }
        sub_1C5E21910(v9, i, 0, 0, 0);
        v11 = (_DWORD *)*((_QWORD *)v9 + 4);
        if (*((_QWORD *)v9 + 3) - (_QWORD)v11 > 3uLL)
        {
          *v11 = 544434464;
          *((_QWORD *)v9 + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(v9, " is ", 4uLL);
        }
        llvm::Value::print(*(llvm::Value **)(*((_QWORD *)this + 4) + 8 * i), v9, 0);
        v12 = (_BYTE *)*((_QWORD *)v9 + 4);
        if (*((_BYTE **)v9 + 3) == v12)
        {
          v5 = llvm::raw_ostream::write(v9, "\n", 1uLL);
        }
        else
        {
          *v12 = 10;
          ++*((_QWORD *)v9 + 4);
        }
      }
    }
    if (v14 != v16)
      free(v14);
  }
  return 1;
}

uint64_t sub_1C4EF2BF0(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  llvm::raw_ostream *v12;
  llvm *v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;

  if (result)
  {
    v2 = (_DWORD *)result;
    if (*(unsigned __int8 *)(result + 16) >= 0x1Cu)
    {
      v4 = *(unsigned int *)(a2 + 8);
      v5 = *(_QWORD *)a2 + 8 * v4;
      if ((_DWORD)v4)
      {
        v6 = 8 * v4;
        result = *(_QWORD *)a2;
        while (*(_DWORD **)result != v2)
        {
          result += 8;
          v6 -= 8;
          if (!v6)
          {
            result = *(_QWORD *)a2 + 8 * v4;
            break;
          }
        }
      }
      else
      {
        result = *(_QWORD *)a2;
      }
      if (v4 == (result - *(_QWORD *)a2) >> 3)
      {
        result = sub_1C4EF2D28((uint64_t)v2);
        if ((result & 1) != 0)
        {
          v7 = v2[5] & 0x7FFFFFF;
          if ((_DWORD)v7)
          {
            v8 = 0;
            v9 = 32 * v7;
            do
            {
              v10 = v2[5];
              if ((v10 & 0x40000000) != 0)
                v11 = (_DWORD *)*((_QWORD *)v2 - 1);
              else
                v11 = &v2[-8 * (v10 & 0x7FFFFFF)];
              result = sub_1C4EF2BF0(*(_QWORD *)&v11[v8 / 4], a2);
              v8 += 32;
            }
            while (v9 != v8);
          }
        }
        else
        {
          v12 = (llvm::raw_ostream *)llvm::errs((llvm *)result);
          v13 = sub_1C4816AD8(v12, "Instruction in PHITransAddr is not phi-translatable:\n");
          v14 = (llvm::raw_ostream *)llvm::errs(v13);
          v15 = sub_1C61ABD88(v14, (llvm::Value *)v2);
          result = (uint64_t)sub_1C61ABDB8(v15, 10);
          __break(1u);
        }
      }
      else
      {
        if (v5 != result + 8)
        {
          result = (uint64_t)memmove((void *)result, (const void *)(result + 8), v5 - (result + 8));
          LODWORD(v4) = *(_DWORD *)(a2 + 8);
        }
        *(_DWORD *)(a2 + 8) = v4 - 1;
      }
    }
  }
  return result;
}

uint64_t llvm::PHITransAddr::IsPotentiallyPHITranslatable(llvm::PHITransAddr *this)
{
  uint64_t v1;
  BOOL v2;

  v1 = *(_QWORD *)this;
  if (v1)
    v2 = *(unsigned __int8 *)(v1 + 16) >= 0x1Cu;
  else
    v2 = 0;
  if (v2)
    return sub_1C4EF2D28(v1);
  else
    return 1;
}

uint64_t sub_1C4EF2D28(uint64_t a1)
{
  int v2;
  uint64_t result;
  int v4;
  uint64_t v5;

  v2 = *(unsigned __int8 *)(a1 + 16);
  result = 1;
  if (v2 != 62 && v2 != 83)
  {
    if ((v2 - 66) <= 0xC)
    {
      if ((llvm::isSafeToSpeculativelyExecute(a1, 0, 0, 0) & 1) != 0)
        return 1;
      v2 = *(unsigned __int8 *)(a1 + 16);
    }
    if (v2 == 41)
    {
      v4 = *(_DWORD *)(a1 + 20);
      v5 = (v4 & 0x40000000) != 0 ? *(_QWORD *)(a1 - 8) : a1 - 32 * (v4 & 0x7FFFFFF);
      if (*(_BYTE *)(*(_QWORD *)(v5 + 32) + 16) == 16)
        return 1;
    }
    return 0;
  }
  return result;
}

llvm::Value *llvm::PHITransAddr::PHITranslateSubExpr(llvm::PHITransAddr *this, llvm::BasicBlock **a2, llvm::BasicBlock *a3, llvm::BasicBlock *a4, const llvm::DominatorTree *a5)
{
  unsigned int v6;
  llvm::BasicBlock *v9;
  llvm::Value **v11;
  char *v12;
  uint64_t v13;
  llvm::Value **v14;
  llvm::Value **v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Value *Cast;
  llvm::BasicBlock *v24;
  llvm::BasicBlock *v25;
  const llvm::DominatorTree *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  BOOL v35;
  uint64_t v36;
  char *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  llvm::BasicBlock **v41;
  llvm::BasicBlock **v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  llvm::BasicBlock **v47;
  llvm::BasicBlock *v48;
  BOOL v49;
  unint64_t v50;
  char *v51;
  int v52;
  llvm::BasicBlock **v53;
  llvm::ValueHandleBase *Add;
  uint64_t v55;
  const llvm::DominatorTree *v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  int v60;
  llvm::Constant *v61;
  BOOL v62;
  llvm *v63;
  unsigned __int8 *v64;
  llvm::GetElementPtrInst *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  llvm::UndefValue *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  llvm::Value **v75;
  uint64_t v76;
  uint64_t i;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  llvm::ValueHandleBase *v86;
  int v87;
  llvm **v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  const llvm::DominatorTree *v97;
  uint64_t v98;
  uint64_t v99;
  __int16 v100;
  void *v101[2];
  _QWORD v102[3];
  __int16 v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return (llvm::Value *)a2;
  v6 = *((unsigned __int8 *)a2 + 16);
  if (v6 < 0x1C)
    return (llvm::Value *)a2;
  v9 = a3;
  v12 = (char *)this + 32;
  v11 = (llvm::Value **)*((_QWORD *)this + 4);
  v13 = *((unsigned int *)v12 + 2);
  v14 = &v11[v13];
  v15 = v11;
  if ((_DWORD)v13)
  {
    v16 = 8 * v13;
    v15 = v11;
    while (*v15 != (llvm::Value *)a2)
    {
      ++v15;
      v16 -= 8;
      if (!v16)
      {
        v15 = &v11[v13];
        break;
      }
    }
  }
  if (v13 != v15 - v11)
  {
    if (a2[5] != a3)
      return (llvm::Value *)a2;
    if ((_DWORD)v13)
    {
      v36 = 8 * v13;
      while (*v11 != (llvm::Value *)a2)
      {
        ++v11;
        v36 -= 8;
        if (!v36)
        {
          v11 = v14;
          break;
        }
      }
    }
    v37 = v12;
    if (v14 != v11 + 1)
    {
      memmove(v11, v11 + 1, (char *)v14 - (char *)(v11 + 1));
      LODWORD(v13) = *((_DWORD *)this + 10);
      v6 = *((unsigned __int8 *)a2 + 16);
    }
    *((_DWORD *)this + 10) = v13 - 1;
    if (v6 == 83)
    {
      v38 = *((_DWORD *)a2 + 5);
      v39 = v38 & 0x7FFFFFF;
      if ((v38 & 0x7FFFFFF) != 0)
      {
        v40 = 0;
        while (1)
        {
          v41 = &a2[-4 * v39];
          if ((v38 & 0x40000000) != 0)
            v41 = (llvm::BasicBlock **)*(a2 - 1);
          if (*(&v41[4 * *((unsigned int *)a2 + 15)] + v40) == a4)
            break;
          if (v39 == ++v40)
            goto LABEL_55;
        }
      }
      else
      {
LABEL_55:
        LODWORD(v40) = -1;
      }
      if ((v38 & 0x40000000) != 0)
        v42 = (llvm::BasicBlock **)*(a2 - 1);
      else
        v42 = &a2[-4 * v39];
      Cast = v42[4 * v40];
      goto LABEL_129;
    }
    if (!sub_1C4EF2D28((uint64_t)a2))
      return 0;
    v43 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
    v12 = v37;
    if ((_DWORD)v43)
    {
      v44 = 0;
      v45 = 32 * v43;
      do
      {
        v46 = *((_DWORD *)a2 + 5);
        if ((v46 & 0x40000000) != 0)
          v47 = (llvm::BasicBlock **)*(a2 - 1);
        else
          v47 = &a2[-4 * (v46 & 0x7FFFFFF)];
        v48 = v47[v44 / 8];
        if (v48)
          v49 = *((unsigned __int8 *)v48 + 16) >= 0x1Cu;
        else
          v49 = 0;
        if (v49)
        {
          v50 = *((unsigned int *)this + 10);
          if (v50 >= *((unsigned int *)this + 11))
          {
            v51 = v12;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v12, (uint64_t)this + 48, v50 + 1, 8);
            v12 = v51;
            v50 = *((unsigned int *)this + 10);
          }
          *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v50) = v48;
          ++*((_DWORD *)this + 10);
        }
        v44 += 32;
      }
      while (v45 != v44);
    }
  }
  v17 = *((unsigned __int8 *)a2 + 16);
  if ((v17 - 79) < 0xFFFFFFF3)
  {
    if (v17 != 41)
    {
      if (v17 == 62)
      {
        v101[0] = v102;
        v101[1] = (void *)0x800000000;
        v18 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
        if ((_DWORD)v18)
        {
          v95 = (uint64_t)v12;
          v19 = 0;
          v20 = 0;
          v21 = 32 * v18;
          do
          {
            v22 = llvm::PHITransAddr::PHITranslateSubExpr(this, *(&a2[v19 / 8] - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)), v9, a4, a5);
            Cast = (llvm::Value *)v22;
            if (!v22)
              goto LABEL_95;
            v24 = v9;
            v25 = a4;
            v26 = a5;
            v27 = v22 != (_QWORD)*(&a2[v19 / 8] - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
            v28 = LODWORD(v101[1]);
            if (LODWORD(v101[1]) >= (unint64_t)HIDWORD(v101[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v101, (uint64_t)v102, LODWORD(v101[1]) + 1, 8);
              v28 = LODWORD(v101[1]);
            }
            *((_QWORD *)v101[0] + v28) = Cast;
            v20 |= v27;
            v29 = ++LODWORD(v101[1]);
            v19 += 32;
            a5 = v26;
            a4 = v25;
            v9 = v24;
          }
          while (v21 != v19);
          if ((v20 & 1) != 0)
          {
            v64 = *(unsigned __int8 **)v101[0];
            v65 = a2[8];
            v66 = v29 - 1;
            v67 = (*((unsigned __int8 *)a2 + 17) >> 1) & 1;
            v68 = *((_QWORD *)this + 3);
            v96 = *(_OWORD *)((char *)this + 8);
            v97 = a5;
            v98 = v68;
            v99 = 0;
            v100 = 257;
            v69 = sub_1C4E6B244(v65, v64, (llvm::Value *)((char *)v101[0] + 8), v66, v67, (uint64_t)&v96);
            if (v69)
            {
              Cast = v69;
              if (LODWORD(v101[1]))
              {
                v70 = 0;
                v71 = 8 * LODWORD(v101[1]);
                do
                {
                  sub_1C4EF3600(*(unsigned __int8 **)((char *)v101[0] + v70), v95);
                  v70 += 8;
                }
                while (v71 != v70);
              }
              sub_1C4EF3590((uint64_t)this, (uint64_t)Cast);
              goto LABEL_95;
            }
            for (i = *(_QWORD *)(*(_QWORD *)v101[0] + 8); i; i = *(_QWORD *)(i + 8))
            {
              Cast = *(llvm::Value **)(i + 24);
              if (*((_BYTE *)Cast + 16) != 62 || Cast == 0)
                continue;
              if (*(llvm::BasicBlock **)Cast != *a2)
                continue;
              if (*((llvm::BasicBlock **)Cast + 8) != a2[8])
                continue;
              v79 = *((_DWORD *)Cast + 5) & 0x7FFFFFF;
              if (LODWORD(v101[1]) != v79)
                continue;
              v80 = *((_QWORD *)Cast + 5);
              if (*(_QWORD *)(v80 + 56) != *((_QWORD *)v24 + 7))
                continue;
              if (a5)
              {
                if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)a5, v80, (uint64_t)a4))
                  continue;
                v81 = LODWORD(v101[1]);
                v79 = *((_DWORD *)Cast + 5) & 0x7FFFFFF;
              }
              else
              {
                v81 = *((_DWORD *)Cast + 5) & 0x7FFFFFF;
              }
              if (!v81)
                goto LABEL_95;
              v82 = v101[0];
              v83 = 8 * v81;
              v84 = -32 * v79;
              while (*v82 == *(_QWORD *)((char *)Cast + v84))
              {
                ++v82;
                v84 += 32;
                v83 -= 8;
                if (!v83)
                  goto LABEL_95;
              }
            }
            Cast = 0;
          }
          else
          {
            Cast = (llvm::Value *)a2;
          }
        }
        else
        {
          Cast = (llvm::Value *)a2;
        }
LABEL_95:
        if (v101[0] != v102)
          free(v101[0]);
        return Cast;
      }
      return 0;
    }
    v52 = *((_DWORD *)a2 + 5);
    if ((v52 & 0x40000000) != 0)
      v53 = (llvm::BasicBlock **)*(a2 - 1);
    else
      v53 = &a2[-4 * (v52 & 0x7FFFFFF)];
    Add = v53[4];
    if (*((_BYTE *)Add + 16) != 16)
      return 0;
    v55 = (uint64_t)v12;
    v56 = a5;
    v57 = *((unsigned __int8 *)a2 + 17);
    v58 = llvm::PHITransAddr::PHITranslateSubExpr(this, *v53, v9, a4, v56);
    Cast = (llvm::Value *)v58;
    if (!v58)
      return Cast;
    v59 = (v57 >> 2) & 1;
    v60 = (v57 >> 1) & 1;
    if (*(_BYTE *)(v58 + 16) == 41
      && ((v61 = *(llvm::Constant **)(v58 - 32)) != 0 ? (v62 = *((_BYTE *)v61 + 16) == 16) : (v62 = 0), v62))
    {
      v63 = *(llvm **)(v58 - 64);
      Add = llvm::ConstantExpr::getAdd(Add, v61, 0, 0);
      v72 = *((_QWORD *)this + 4);
      v73 = *((unsigned int *)this + 10);
      if ((_DWORD)v73)
      {
        v74 = 8 * v73;
        v75 = (llvm::Value **)*((_QWORD *)this + 4);
        v76 = v55;
        while (*v75 != Cast)
        {
          ++v75;
          v74 -= 8;
          if (!v74)
          {
            v75 = (llvm::Value **)(v72 + 8 * v73);
            break;
          }
        }
      }
      else
      {
        v75 = (llvm::Value **)*((_QWORD *)this + 4);
        v76 = v55;
      }
      v55 = v76;
      if (v73 != ((uint64_t)v75 - v72) >> 3)
      {
        sub_1C4EF3600((unsigned __int8 *)Cast, v76);
        sub_1C4EF3590((uint64_t)this, (uint64_t)v63);
      }
      LOBYTE(v59) = 0;
      v60 = 0;
    }
    else
    {
      v63 = (llvm *)v58;
    }
    v85 = *((_QWORD *)this + 3);
    *(_OWORD *)v101 = *(_OWORD *)((char *)this + 8);
    v102[0] = v56;
    v102[1] = v85;
    v102[2] = 0;
    v103 = 257;
    v86 = sub_1C4E62AE0(v63, Add, v59, v60, (uint64_t)v101, (llvm::DSOLocalEquivalent **)3);
    if (v86)
    {
      Cast = v86;
      sub_1C4EF3600((unsigned __int8 *)v63, v55);
      goto LABEL_129;
    }
    v87 = *((_DWORD *)a2 + 5);
    if ((v87 & 0x40000000) != 0)
      v88 = (llvm **)*(a2 - 1);
    else
      v88 = &a2[-4 * (v87 & 0x7FFFFFF)];
    if (v63 != *v88 || (Cast = (llvm::Value *)a2, Add != v88[4]))
    {
      v89 = *((_QWORD *)v63 + 1);
      if (!v89)
        return 0;
      do
      {
        Cast = *(llvm::Value **)(v89 + 24);
        v90 = *((unsigned __int8 *)Cast + 16);
        if (v90 == 41
          && Cast != 0
          && v90 >= 0x1C
          && v90 - 59 >= 0xFFFFFFEE
          && *((llvm **)Cast - 8) == v63
          && *((llvm::ValueHandleBase **)Cast - 4) == Add)
        {
          v94 = *((_QWORD *)Cast + 5);
          if (*(_QWORD *)(v94 + 56) == *((_QWORD *)v9 + 7)
            && (!v56 || llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)v56, v94, (uint64_t)a4)))
          {
            break;
          }
        }
        Cast = 0;
        v89 = *(_QWORD *)(v89 + 8);
      }
      while (v89);
    }
    return Cast;
  }
  Cast = 0;
  if (!llvm::isSafeToSpeculativelyExecute((uint64_t)a2, 0, 0, 0))
    return Cast;
  v31 = llvm::PHITransAddr::PHITranslateSubExpr(this, *(a2 - 4), v9, a4, a5);
  if (!v31)
    return 0;
  if ((llvm::BasicBlock *)v31 == *(a2 - 4))
    return (llvm::Value *)a2;
  if (*(unsigned __int8 *)(v31 + 16) <= 0x14u)
  {
    Cast = (llvm::Value *)llvm::ConstantExpr::getCast(*((unsigned __int8 *)a2 + 16) - 28);
LABEL_129:
    sub_1C4EF3590((uint64_t)this, (uint64_t)Cast);
    return Cast;
  }
  v32 = *(_QWORD *)(v31 + 8);
  if (!v32)
    return 0;
  do
  {
    Cast = *(llvm::Value **)(v32 + 24);
    v33 = *((unsigned __int8 *)Cast + 16);
    if (Cast)
      v34 = v33 >= 0x1C;
    else
      v34 = 0;
    v35 = v34 && v33 - 79 >= 0xFFFFFFF3;
    if (v35
      && v33 == *((unsigned __int8 *)a2 + 16)
      && *(llvm::BasicBlock **)Cast == *a2
      && (!a5
       || llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)a5, *((_QWORD *)Cast + 5), (uint64_t)a4)))
    {
      break;
    }
    Cast = 0;
    v32 = *(_QWORD *)(v32 + 8);
  }
  while (v32);
  return Cast;
}

uint64_t sub_1C4EF3590(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a2 && *(unsigned __int8 *)(a2 + 16) >= 0x1Cu)
  {
    v4 = *(unsigned int *)(a1 + 40);
    if (v4 >= *(_DWORD *)(a1 + 44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 32, a1 + 48, v4 + 1, 8);
      LODWORD(v4) = *(_DWORD *)(a1 + 40);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v4) = a2;
    ++*(_DWORD *)(a1 + 40);
  }
  return a2;
}

unsigned __int8 *sub_1C4EF3600(unsigned __int8 *result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  BOOL v12;

  if (result)
  {
    v2 = result;
    if (result[16] >= 0x1Cu)
    {
      v4 = *(unsigned int *)(a2 + 8);
      v5 = *(_QWORD *)a2 + 8 * v4;
      if ((_DWORD)v4)
      {
        v6 = 8 * v4;
        result = *(unsigned __int8 **)a2;
        while (*(unsigned __int8 **)result != v2)
        {
          result += 8;
          v6 -= 8;
          if (!v6)
          {
            result = (unsigned __int8 *)(*(_QWORD *)a2 + 8 * v4);
            break;
          }
        }
      }
      else
      {
        result = *(unsigned __int8 **)a2;
      }
      if (v4 == (uint64_t)&result[-*(_QWORD *)a2] >> 3)
      {
        v7 = *((_DWORD *)v2 + 5) & 0x7FFFFFF;
        if ((_DWORD)v7)
        {
          v8 = 0;
          v9 = 32 * v7;
          do
          {
            v10 = *((_DWORD *)v2 + 5);
            if ((v10 & 0x40000000) != 0)
              v11 = (unsigned __int8 *)*((_QWORD *)v2 - 1);
            else
              v11 = &v2[-32 * (v10 & 0x7FFFFFF)];
            result = *(unsigned __int8 **)&v11[v8];
            if (result)
              v12 = result[16] >= 0x1Cu;
            else
              v12 = 0;
            if (v12)
              result = (unsigned __int8 *)sub_1C4EF3600();
            v8 += 32;
          }
          while (v9 != v8);
        }
      }
      else
      {
        if ((unsigned __int8 *)v5 != result + 8)
        {
          result = (unsigned __int8 *)memmove(result, result + 8, v5 - (_QWORD)(result + 8));
          LODWORD(v4) = *(_DWORD *)(a2 + 8);
        }
        *(_DWORD *)(a2 + 8) = v4 - 1;
      }
    }
  }
  return result;
}

BOOL llvm::PHITransAddr::PHITranslateValue(llvm::PHITransAddr *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3, const llvm::DominatorTree *a4, int a5)
{
  const llvm::DominatorTree *v10;
  llvm::Value *v11;

  if (!a4 || !llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry((uint64_t)a4, (uint64_t)a3))
    goto LABEL_11;
  if (a5)
    v10 = a4;
  else
    v10 = 0;
  v11 = llvm::PHITransAddr::PHITranslateSubExpr(this, *(llvm::BasicBlock ***)this, a2, a3, v10);
  *(_QWORD *)this = v11;
  if (a5 && v11 && *((unsigned __int8 *)v11 + 16) >= 0x1Cu)
  {
    if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)a4, *((_QWORD *)v11 + 5), (uint64_t)a3))
    {
      v11 = *(llvm::Value **)this;
      return v11 == 0;
    }
LABEL_11:
    v11 = 0;
    *(_QWORD *)this = 0;
  }
  return v11 == 0;
}

uint64_t ***llvm::PHITransAddr::PHITranslateWithInsertion(uint64_t ****a1, llvm::BasicBlock *a2, llvm::BasicBlock *a3, const llvm::DominatorTree *a4, uint64_t a5)
{
  int v7;
  uint64_t ***result;
  unsigned int v9;
  llvm::Instruction *v10;

  v7 = *(_DWORD *)(a5 + 8);
  result = (uint64_t ***)llvm::PHITransAddr::InsertPHITranslatedSubExpr((uint64_t)a1, *a1, a2, a3, a4, a5);
  *a1 = result;
  if (!result)
  {
    v9 = *(_DWORD *)(a5 + 8);
    if (v9 == v7)
    {
      return 0;
    }
    else
    {
      do
      {
        v10 = *(llvm::Instruction **)(*(_QWORD *)a5 + 8 * v9 - 8);
        *(_DWORD *)(a5 + 8) = v9 - 1;
        llvm::Instruction::eraseFromParent(v10);
        result = 0;
        v9 = *(_DWORD *)(a5 + 8);
      }
      while (v9 != v7);
    }
  }
  return result;
}

_QWORD *llvm::PHITransAddr::InsertPHITranslatedSubExpr(uint64_t a1, uint64_t ***a2, llvm::BasicBlock *a3, llvm::BasicBlock *a4, const llvm::DominatorTree *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t ***v19;
  uint64_t inserted;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t ****v30;
  uint64_t ***v31;
  int v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t ****v40;
  uint64_t ***v41;
  int v42;
  int v43;
  uint64_t ***v44;
  char *v45;
  uint64_t **v46;
  uint64_t **v47;
  llvm::Value *v48;
  llvm::GetElementPtrInst *TypeAtIndex;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  _QWORD *v55;
  uint64_t v56;
  llvm::Value *v57;
  uint64_t v58;
  int v59;
  _QWORD *v60;
  llvm::Type **v61;
  uint64_t v62;
  llvm::Type *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t **v66;
  uint64_t v67;
  uint64_t ***v68;
  _QWORD *v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  uint64_t v73;
  uint64_t ***v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  unsigned __int8 *v79;
  unsigned __int8 **v80;
  unsigned __int8 *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  llvm::ValueSymbolTable *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t *v94;
  unsigned __int8 *v95;
  _QWORD v96[4];
  __int16 v97;
  unsigned __int8 *v98;
  char v99;
  void *v100;
  uint64_t v101;
  _QWORD v102[2];
  __int16 v103;
  _QWORD v104[4];
  void *v105;
  uint64_t v106;
  _QWORD v107[6];

  v107[4] = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 24);
  v104[0] = a2;
  v104[1] = v12;
  v104[2] = 0;
  v104[3] = v13;
  v105 = v107;
  v106 = 0x400000000;
  if (a2 && *((unsigned __int8 *)a2 + 16) >= 0x1Cu)
  {
    v107[0] = a2;
    LODWORD(v106) = 1;
  }
  if (!llvm::PHITransAddr::PHITranslateValue((llvm::PHITransAddr *)v104, a3, a4, a5, 1))
  {
    v14 = (_QWORD *)v104[0];
    goto LABEL_17;
  }
  v14 = 0;
  if (a2)
  {
    v15 = *((unsigned __int8 *)a2 + 16);
    if (v15 >= 0x1C)
    {
      if (v15 - 79 < 0xFFFFFFF3)
      {
        if (v15 == 62)
        {
          v100 = v102;
          v101 = 0x800000000;
          v16 = *((_DWORD *)a2 + 5);
          v17 = v16 & 0x7FFFFFF;
          if ((v16 & 0x7FFFFFF) != 0)
          {
            v18 = a2[5];
            v19 = a2;
            while (1)
            {
              inserted = llvm::PHITransAddr::InsertPHITranslatedSubExpr(a1, v19[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)], v18, a4, a5, a6);
              if (!inserted)
                break;
              v21 = inserted;
              v22 = v101;
              if (v101 >= (unint64_t)HIDWORD(v101))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, (uint64_t)v102, v101 + 1, 8);
                v22 = v101;
              }
              *((_QWORD *)v100 + v22) = v21;
              v23 = (v101 + 1);
              LODWORD(v101) = v101 + 1;
              v19 += 4;
              if (!--v17)
              {
                v34 = v100;
                v94 = *(uint64_t **)v100;
                v35 = v23 - 1;
                v16 = *((_DWORD *)a2 + 5);
                goto LABEL_32;
              }
            }
            v14 = 0;
            goto LABEL_70;
          }
          v35 = -1;
          v34 = v102;
LABEL_32:
          if ((v16 & 0x10000000) == 0)
          {
            v46 = 0;
            v45 = &byte_1C871356D;
            goto LABEL_41;
          }
          v36 = ***a2;
          v37 = *(_QWORD *)(v36 + 152);
          v38 = *(unsigned int *)(v36 + 168);
          if ((_DWORD)v38)
          {
            LODWORD(v39) = (v38 - 1) & ((a2 >> 4) ^ (a2 >> 9));
            v40 = (uint64_t ****)(v37 + 16 * v39);
            v41 = *v40;
            if (*v40 == a2)
            {
LABEL_40:
              v44 = v40[1];
              v47 = *v44;
              v45 = (char *)(v44 + 2);
              v46 = v47;
LABEL_41:
              v48 = (llvm::Value *)(v34 + 1);
              TypeAtIndex = (llvm::GetElementPtrInst *)a2[8];
              v97 = 773;
              v96[0] = v45;
              v96[1] = v46;
              v96[2] = ".phi.trans.insert";
              v50 = (_QWORD *)*((_QWORD *)a4 + 5);
              v93 = v34;
              if (v50 == (_QWORD *)((char *)a4 + 40))
              {
                v92 = 0;
              }
              else
              {
                if (v50)
                  v51 = v50 - 3;
                else
                  v51 = 0;
                if (*((unsigned __int8 *)v51 + 16) - 29 >= 0xB)
                  v51 = 0;
                v92 = v51;
              }
              v52 = v35;
              v53 = (v35 + 1);
              v54 = (_DWORD)v35 == -1;
              v55 = operator new(32 * v53 + 80);
              v14 = &v55[4 * v53];
              *((_DWORD *)v14 + 5) = *((_DWORD *)v14 + 5) & 0x38000000 | v53 & 0x7FFFFFF;
              if (!v54)
              {
                do
                {
                  *v55 = 0;
                  v55[1] = 0;
                  v55[2] = 0;
                  v55[3] = v14;
                  v55 += 4;
                }
                while (v55 != v14);
              }
              v56 = v52;
              sub_1C4774650(TypeAtIndex, v94, v48, v52);
              *v14 = v58;
              v14[1] = 0;
              v59 = *((_DWORD *)v14 + 5) & 0xC0000000 | v53 & 0x7FFFFFF;
              *((_DWORD *)v14 + 4) = 62;
              *((_DWORD *)v14 + 5) = v59;
              *(_OWORD *)(v14 + 3) = 0u;
              v60 = v14 + 3;
              *(_OWORD *)(v14 + 5) = 0u;
              *((_DWORD *)v14 + 14) = 0;
              if (v92)
              {
                v83 = v92[5];
                v84 = v92 + 3;
                v14[5] = v83;
                *(_WORD *)(v83 + 18) &= ~0x8000u;
                if ((*((_BYTE *)v14 + 23) & 0x10) != 0)
                {
                  v86 = *(_QWORD *)(v83 + 56);
                  if (v86)
                  {
                    v87 = *(llvm::ValueSymbolTable **)(v86 + 104);
                    if (v87)
                      llvm::ValueSymbolTable::reinsertValue(v87, (llvm::Value *)v14);
                  }
                }
                v85 = *v84;
                v14[3] = *v84;
                v14[4] = v84;
                *(_QWORD *)(v85 + 8) = v60;
                *v84 = (uint64_t)v60;
              }
              v14[8] = TypeAtIndex;
              if (v56)
              {
                v61 = (llvm::Type **)(v93 + 2);
                v62 = 8 * v56 - 8;
                do
                {
                  if (!v62)
                    break;
                  v63 = *v61++;
                  TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, v63, v57);
                  v62 -= 8;
                }
                while (TypeAtIndex);
              }
              v14[9] = TypeAtIndex;
              v64 = *((_DWORD *)v14 + 5) & 0x7FFFFFF;
              v65 = -v64;
              v66 = (uint64_t **)&v14[-4 * v64];
              if (*v66)
              {
                v88 = &v14[4 * v65];
                v90 = (_QWORD *)v88[2];
                v89 = v88 + 2;
                *v90 = *(v89 - 1);
                v91 = *(v89 - 1);
                if (v91)
                  *(_QWORD *)(v91 + 16) = *v89;
              }
              *v66 = v94;
              if (v94)
              {
                v68 = (uint64_t ***)(v94 + 1);
                v67 = v94[1];
                v69 = &v14[4 * v65];
                v69[1] = v67;
                if (v67)
                  *(_QWORD *)(v67 + 16) = v69 + 1;
                v69[2] = v68;
                *v68 = v66;
              }
              sub_1C5382FD4((uint64_t)&v99, (uint64_t *)v48, (uint64_t *)v48 + v56, (uint64_t)&v14[-4 * (*((_DWORD *)v14 + 5) & 0x7FFFFFF) + 4]);
              llvm::Value::setName((uint64_t ***)v14, (uint64_t)v96);
              v70 = (unsigned __int8 *)a2[6];
              v95 = v70;
              if (v70)
                llvm::MetadataTracking::track((uint64_t)&v95, v70, 2);
              v71 = (unsigned __int8 *)v14[6];
              if (v71)
                llvm::MetadataTracking::untrack((uint64_t)(v14 + 6), v71);
              v72 = v95;
              v14[6] = v95;
              if (v72)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v95, v72, (uint64_t)(v14 + 6));
                v95 = 0;
              }
              *((_BYTE *)v14 + 17) = *((_BYTE *)v14 + 17) & 0xFD | *((_BYTE *)a2 + 17) & 2;
              v73 = *(unsigned int *)(a6 + 8);
              if (v73 >= *(_DWORD *)(a6 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v73 + 1, 8);
                LODWORD(v73) = *(_DWORD *)(a6 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a6 + 8 * v73) = v14;
              ++*(_DWORD *)(a6 + 8);
LABEL_70:
              if (v100 != v102)
                free(v100);
              goto LABEL_17;
            }
            v42 = 1;
            while (v41 != (uint64_t ***)-4096)
            {
              v43 = v39 + v42++;
              v39 = v43 & (v38 - 1);
              v41 = *(uint64_t ****)(v37 + 16 * v39);
              if (v41 == a2)
              {
                v40 = (uint64_t ****)(v37 + 16 * v39);
                goto LABEL_40;
              }
            }
          }
          v40 = (uint64_t ****)(v37 + 16 * v38);
          goto LABEL_40;
        }
LABEL_29:
        v14 = 0;
        goto LABEL_17;
      }
      v14 = 0;
      if (!llvm::isSafeToSpeculativelyExecute((uint64_t)a2, 0, 0, 0))
        goto LABEL_17;
      if (!llvm::PHITransAddr::InsertPHITranslatedSubExpr(a1, *(a2 - 4), a3, a4, a5, a6))
        goto LABEL_29;
      v25 = *((unsigned __int8 *)a2 + 16) - 28;
      if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
      {
        v76 = 0;
        v75 = &byte_1C871356D;
        goto LABEL_74;
      }
      v26 = ***a2;
      v27 = *(_QWORD *)(v26 + 152);
      v28 = *(unsigned int *)(v26 + 168);
      if ((_DWORD)v28)
      {
        LODWORD(v29) = (v28 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        v30 = (uint64_t ****)(v27 + 16 * v29);
        v31 = *v30;
        if (*v30 == a2)
        {
LABEL_73:
          v74 = v30[1];
          v77 = (uint64_t)*v74;
          v75 = (char *)(v74 + 2);
          v76 = v77;
LABEL_74:
          v103 = 773;
          v100 = v75;
          v101 = v76;
          v102[0] = ".phi.trans.insert";
          llvm::CastInst::Create(v25);
          v14 = v78;
          v79 = (unsigned __int8 *)a2[6];
          v98 = v79;
          if (v79)
            llvm::MetadataTracking::track((uint64_t)&v98, v79, 2);
          v80 = (unsigned __int8 **)(v14 + 6);
          if (&v98 == v14 + 6)
          {
            if (v98)
              llvm::MetadataTracking::untrack((uint64_t)&v98, v98);
          }
          else
          {
            if (*v80)
              llvm::MetadataTracking::untrack((uint64_t)(v14 + 6), *v80);
            v81 = v98;
            *v80 = v98;
            if (v81)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v98, v81, (uint64_t)(v14 + 6));
              v98 = 0;
            }
          }
          v82 = *(unsigned int *)(a6 + 8);
          if (v82 >= *(_DWORD *)(a6 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v82 + 1, 8);
            LODWORD(v82) = *(_DWORD *)(a6 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a6 + 8 * v82) = v14;
          ++*(_DWORD *)(a6 + 8);
          goto LABEL_17;
        }
        v32 = 1;
        while (v31 != (uint64_t ***)-4096)
        {
          v33 = v29 + v32++;
          v29 = v33 & (v28 - 1);
          v31 = *(uint64_t ****)(v27 + 16 * v29);
          if (v31 == a2)
          {
            v30 = (uint64_t ****)(v27 + 16 * v29);
            goto LABEL_73;
          }
        }
      }
      v30 = (uint64_t ****)(v27 + 16 * v28);
      goto LABEL_73;
    }
  }
LABEL_17:
  if (v105 != v107)
    free(v105);
  return v14;
}

void llvm::PhiValues::invalidateValue(llvm::PhiValues *this, const llvm::Value *a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  int *v14;
  int *v15;
  int v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int32x2_t *v23;
  uint64_t v24;
  unsigned __int32 v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  const llvm::Value *v29;
  int v30;
  unsigned int v31;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  _QWORD v38[5];

  v38[4] = *MEMORY[0x1E0C80C00];
  v36 = v38;
  v37 = 0x800000000;
  v4 = (char *)this + 56;
  v3 = *((_QWORD *)this + 7);
  v5 = *((unsigned int *)this + 18);
  v6 = (unsigned int *)(v3 + 96 * v5);
  if (*((_DWORD *)this + 16))
  {
    if ((_DWORD)v5)
    {
      v7 = 96 * v5;
      v8 = (unsigned int *)*((_QWORD *)this + 7);
      while (*v8 >= 0xFFFFFFFE)
      {
        v8 += 24;
        v7 -= 96;
        if (!v7)
          goto LABEL_6;
      }
    }
    else
    {
      v8 = (unsigned int *)*((_QWORD *)this + 7);
    }
  }
  else
  {
LABEL_6:
    v8 = (unsigned int *)(v3 + 96 * v5);
  }
  v9 = (unsigned int *)(v3 + 96 * v5);
  if (v8 != v9)
  {
    do
    {
      v35 = 0;
      if (sub_1C6154170((uint64_t)(v8 + 2), (uint64_t)a2, &v35))
      {
        v10 = *v8;
        v11 = v37;
        if (v37 >= (unint64_t)HIDWORD(v37))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, (uint64_t)v38, v37 + 1, 4);
          v11 = v37;
        }
        *((_DWORD *)v36 + v11) = v10;
        LODWORD(v37) = v37 + 1;
      }
      v12 = v8 + 24;
      while (v12 != v6)
      {
        v13 = *v12;
        v12 += 24;
        if (v13 <= 0xFFFFFFFD)
        {
          v8 = v12 - 24;
          goto LABEL_18;
        }
      }
      v8 = v6;
LABEL_18:
      ;
    }
    while (v8 != v9);
    if ((_DWORD)v37)
    {
      v14 = (int *)v36;
      v15 = (int *)((char *)v36 + 4 * v37);
      do
      {
        v16 = *v14;
        v34 = *v14;
        v17 = sub_1C61AC8C4((uint64_t)v4, &v34);
        v18 = v17[14];
        if ((_DWORD)v18)
        {
          v19 = (uint64_t *)*((_QWORD *)v17 + 6);
          v20 = 8 * v18;
          do
          {
            v21 = *v19;
            if (*(_BYTE *)(*v19 + 16) != 83)
              v21 = 0;
            v33 = v21;
            if (v21)
            {
              v35 = 0;
              if (sub_1C61252B8((uint64_t *)this + 1, &v33, &v35))
              {
                *v35 = -8192;
                *((int32x2_t *)this + 2) = vadd_s32(*(int32x2_t *)((char *)this + 16), (int32x2_t)0x1FFFFFFFFLL);
              }
            }
            ++v19;
            v20 -= 8;
          }
          while (v20);
        }
        sub_1C61AC02C((uint64_t)this + 32, v16);
        sub_1C61AC0B8((uint64_t)v4, v16);
        ++v14;
      }
      while (v14 != v15);
    }
  }
  v24 = *((_QWORD *)this + 10);
  v23 = (int32x2_t *)((char *)this + 80);
  v22 = v24;
  v25 = v23[2].u32[0];
  if (!v25)
    goto LABEL_33;
  v28 = (v25 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v27 = v22 + 40 * v28;
  v29 = *(const llvm::Value **)(v27 + 24);
  if (v29 != a2)
  {
    v30 = 1;
    while (v29 != (const llvm::Value *)-4096)
    {
      v31 = v28 + v30++;
      v28 = v31 & (v25 - 1);
      v27 = v22 + 40 * v28;
      v29 = *(const llvm::Value **)(v27 + 24);
      if (v29 == a2)
        goto LABEL_40;
    }
LABEL_33:
    v26 = v22 + 40 * v25;
    v27 = v26;
    goto LABEL_34;
  }
LABEL_40:
  v26 = v22 + 40 * v25;
LABEL_34:
  if (v26 != v27)
    sub_1C61ACE8C(v23, v27);
  if (v36 != v38)
    free(v36);
}

BOOL llvm::PhiValues::invalidate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  _QWORD v8[2];
  BOOL v9;

  v8[0] = a3;
  v8[1] = &llvm::PhiValuesAnalysis::Key;
  v4 = sub_1C477672C(a3 + 48, (uint64_t)&llvm::PhiValuesAnalysis::Key);
  v5 = *(_QWORD *)(a3 + 56);
  if (v5 == *(_QWORD *)(a3 + 48))
    v6 = (unsigned int *)(a3 + 68);
  else
    v6 = (unsigned int *)(a3 + 64);
  v9 = v4 != (_QWORD *)(v5 + 8 * *v6);
  return !sub_1C4DAA35C((uint64_t)v8) && !sub_1C4DAA3F8((uint64_t)v8);
}

char *llvm::PhiValues::processPhi(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v10;
  int32x2_t ****v11;
  int32x2_t *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int32x2_t *****v17;
  int32x2_t ****v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t (***v24)(llvm::CallbackVH *__hidden);
  uint64_t (***v25)(llvm::CallbackVH *__hidden);
  uint64_t (**v26)(llvm::CallbackVH *__hidden);
  unsigned int v27;
  unint64_t v29;
  int32x2_t ****v30;
  int32x2_t *v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int32x2_t *****v36;
  int32x2_t ****v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  char *result;
  _DWORD *v51;
  void *v52;
  uint64_t v53;
  uint64_t (**v54)(llvm::CallbackVH *__hidden);
  int v55;
  uint64_t v56;
  uint64_t (***v57)(llvm::CallbackVH *__hidden);
  uint64_t (***v58)(llvm::CallbackVH *__hidden);
  uint64_t v59;
  _QWORD *v60;
  uint64_t (**v61)(llvm::CallbackVH *__hidden);
  int v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t **v65;
  unsigned int v66;
  int v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  char *v71;
  uint64_t (***v72)(llvm::CallbackVH *__hidden);
  uint64_t (***v73)(llvm::CallbackVH *__hidden);
  _BYTE *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (**v78)(llvm::CallbackVH *__hidden);
  int v79;
  char *v80;
  int v81;
  unsigned int v82;
  uint64_t (***v83)(llvm::CallbackVH *__hidden);
  uint64_t (**v84)(llvm::CallbackVH *__hidden);
  uint64_t (***v85)(llvm::CallbackVH *__hidden);
  int v86;
  BOOL v87;
  unsigned int v88;
  uint64_t (***v89)(llvm::CallbackVH *__hidden);
  uint64_t (**v90)(llvm::CallbackVH *__hidden);
  unint64_t v91;
  uint64_t (**v92)(llvm::CallbackVH *__hidden);
  uint64_t v93;
  unint64_t *v94;
  int32x2_t ****v95;
  uint64_t *v96;
  int v97;
  uint64_t v98;
  _QWORD v99[3];

  v6 = a1 + 1;
  v5 = *(_DWORD *)a1;
  v98 = a2;
  v7 = v5 + 1;
  *(_DWORD *)a1 = v5 + 1;
  v8 = (uint64_t)(a1 + 10);
  v97 = v5 + 1;
  *((_DWORD *)sub_1C61AC530(a1 + 1, &v98) + 2) = v5 + 1;
  v93 = 2;
  v94 = 0;
  v95 = (int32x2_t ****)v98;
  if (v98 != -8192 && v98 != -4096 && v98 != 0)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v93);
  v92 = off_1E813A558;
  v96 = a1;
  sub_1C61AC63C((uint64_t)v99, v8, (uint64_t *)&v92);
  if (v95 != (int32x2_t ****)-8192 && v95 != (int32x2_t ****)-4096 && v95)
  {
    v10 = v93 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v93 & 0xFFFFFFFFFFFFFFF8) = v94;
    if (v94)
    {
      *v94 = *v94 & 7 | v10;
    }
    else
    {
      v11 = v95;
      v12 = ***v95;
      v13 = (unint64_t)v12[303];
      if (v13 <= v10)
      {
        v14 = v12[305].u32[0];
        if (v13 + 16 * v14 > v10)
        {
          v15 = v14 - 1;
          LODWORD(v16) = v15 & ((v95 >> 4) ^ (v95 >> 9));
          v17 = (int32x2_t *****)(v13 + 16 * v16);
          v18 = *v17;
          if (v95 == *v17)
          {
LABEL_18:
            *v17 = (int32x2_t ****)-8192;
            v12[304] = vadd_s32(v12[304], (int32x2_t)0x1FFFFFFFFLL);
            v11 = v95;
          }
          else
          {
            v19 = 1;
            while (v18 != (int32x2_t ****)-4096)
            {
              v20 = v16 + v19++;
              v16 = v20 & v15;
              v18 = *(int32x2_t *****)(v13 + 16 * v16);
              if (v95 == v18)
              {
                v17 = (int32x2_t *****)(v13 + 16 * v16);
                goto LABEL_18;
              }
            }
          }
          *((_BYTE *)v11 + 17) &= ~1u;
        }
      }
    }
  }
  v21 = v98;
  v22 = *(_DWORD *)(v98 + 20);
  if ((v22 & 0x40000000) != 0)
  {
    v24 = *(uint64_t (****)(llvm::CallbackVH *__hidden))(v98 - 8);
    v23 = v22 & 0x7FFFFFF;
    if (!v23)
      goto LABEL_65;
    goto LABEL_25;
  }
  v23 = v22 & 0x7FFFFFF;
  v24 = (uint64_t (***)(llvm::CallbackVH *__hidden))(v98 - 32 * v23);
  if (v23)
  {
LABEL_25:
    v25 = &v24[4 * v23];
    while (1)
    {
      v26 = *v24;
      if (!*v24 || *((_BYTE *)v26 + 16) != 83)
      {
        v93 = 2;
        v94 = 0;
        v95 = (int32x2_t ****)v26;
        if (v26 != (uint64_t (**)(llvm::CallbackVH *__hidden))-8192
          && v26 != (uint64_t (**)(llvm::CallbackVH *__hidden))-4096
          && v26 != 0)
        {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v93);
        }
        v92 = off_1E813A558;
        v96 = a1;
        sub_1C61AC63C((uint64_t)v99, v8, (uint64_t *)&v92);
        if (v95 != (int32x2_t ****)-8192 && v95 != (int32x2_t ****)-4096 && v95)
        {
          v29 = v93 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v93 & 0xFFFFFFFFFFFFFFF8) = v94;
          if (v94)
          {
            *v94 = *v94 & 7 | v29;
          }
          else
          {
            v30 = v95;
            v31 = ***v95;
            v32 = (unint64_t)v31[303];
            if (v32 <= v29)
            {
              v33 = v31[305].u32[0];
              if (v32 + 16 * v33 > v29)
              {
                v34 = v33 - 1;
                LODWORD(v35) = v34 & ((v95 >> 4) ^ (v95 >> 9));
                v36 = (int32x2_t *****)(v32 + 16 * v35);
                v37 = *v36;
                if (v95 == *v36)
                {
LABEL_49:
                  *v36 = (int32x2_t ****)-8192;
                  v31[304] = vadd_s32(v31[304], (int32x2_t)0x1FFFFFFFFLL);
                  v30 = v95;
                }
                else
                {
                  v38 = 1;
                  while (v37 != (int32x2_t ****)-4096)
                  {
                    v39 = v35 + v38++;
                    v35 = v39 & v34;
                    v37 = *(int32x2_t *****)(v32 + 16 * v35);
                    if (v95 == v37)
                    {
                      v36 = (int32x2_t *****)(v32 + 16 * v35);
                      goto LABEL_49;
                    }
                  }
                }
                *((_BYTE *)v30 + 17) &= ~1u;
              }
            }
          }
        }
        goto LABEL_58;
      }
      v92 = *v24;
      v99[0] = 0;
      if ((sub_1C61252B8(v6, &v92, v99) & 1) == 0 || (v27 = *(_DWORD *)(v99[0] + 8)) == 0)
      {
        llvm::PhiValues::processPhi(a1, v26, a3);
        v92 = v26;
        v99[0] = 0;
        if (sub_1C61252B8(v6, &v92, v99))
          v27 = *(_DWORD *)(v99[0] + 8);
        else
          v27 = 0;
      }
      v40 = *((_DWORD *)a1 + 18);
      if (!v40)
        goto LABEL_53;
      v43 = a1[7];
      v44 = v40 - 1;
      v45 = v44 & (37 * v27);
      v46 = *(_DWORD *)(v43 + 96 * v45);
      if (v27 != v46)
        break;
LABEL_58:
      v24 += 4;
      if (v24 == v25)
      {
        v21 = v98;
        goto LABEL_65;
      }
    }
    v47 = 1;
    while (v46 != -1)
    {
      v48 = v45 + v47++;
      v45 = v48 & v44;
      v46 = *(_DWORD *)(v43 + 96 * v45);
      if (v27 == v46)
        goto LABEL_58;
    }
LABEL_53:
    v41 = *((_DWORD *)sub_1C61AC530(v6, &v98) + 2);
    if (v27 >= v41)
      v42 = v41;
    else
      v42 = v27;
    *((_DWORD *)sub_1C61AC530(v6, &v98) + 2) = v42;
    goto LABEL_58;
  }
LABEL_65:
  v49 = *(unsigned int *)(a3 + 8);
  if (v49 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v49 + 1, 8);
    LODWORD(v49) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v49) = v21;
  ++*(_DWORD *)(a3 + 8);
  result = (char *)sub_1C61AC530(v6, &v98);
  if (*((_DWORD *)result + 2) == v7)
  {
    v51 = sub_1C61AC8C4((uint64_t)(a1 + 7), &v97);
    v52 = v51 + 2;
    while (1)
    {
      v53 = *(unsigned int *)(a3 + 8);
      v54 = *(uint64_t (***)(llvm::CallbackVH *__hidden))(*(_QWORD *)a3 + 8 * v53 - 8);
      *(_DWORD *)(a3 + 8) = v53 - 1;
      v92 = v54;
      sub_1C61ABE04((uint64_t)v52, (uint64_t *)&v92);
      v55 = *((_DWORD *)v54 + 5);
      if ((v55 & 0x40000000) != 0)
      {
        v57 = (uint64_t (***)(llvm::CallbackVH *__hidden))*(v54 - 1);
        v56 = v55 & 0x7FFFFFF;
      }
      else
      {
        v56 = v55 & 0x7FFFFFF;
        v57 = (uint64_t (***)(llvm::CallbackVH *__hidden))&v54[-4 * v56];
      }
      v58 = &v57[4 * v56];
      if (v56)
        break;
LABEL_74:
      v59 = *(unsigned int *)(a3 + 8);
      if (!(_DWORD)v59 || (v60 = sub_1C61AC530(v6, (_QWORD *)(*(_QWORD *)a3 + 8 * v59 - 8)), *((_DWORD *)v60 + 2) < v7))
      {
        result = (char *)sub_1C61ACC58((uint64_t)(a1 + 4), &v97);
        v70 = v51[14];
        if (!(_DWORD)v70)
          return result;
        v71 = result;
        v72 = (uint64_t (***)(llvm::CallbackVH *__hidden))*((_QWORD *)v51 + 6);
        v73 = &v72[v70];
        v74 = result + 8;
        v75 = result + 16;
        v76 = (uint64_t)(result + 48);
        v77 = (uint64_t)(result + 64);
        while (1)
        {
          v78 = *v72;
          if (*((_BYTE *)*v72 + 16) != 83)
          {
            v92 = *v72;
            if ((*v74 & 1) != 0)
            {
              v79 = 4;
              v80 = v75;
            }
            else
            {
              v79 = *((_DWORD *)v71 + 6);
              if (!v79)
              {
                v89 = 0;
LABEL_111:
                result = (char *)sub_1C4E4473C((uint64_t)v74, (uint64_t)&v92, &v92, v89);
                *(_QWORD *)result = v92;
                v90 = v92;
                v91 = *((unsigned int *)v71 + 14);
                if (v91 >= *((unsigned int *)v71 + 15))
                {
                  result = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod(v76, v77, v91 + 1, 8);
                  v91 = *((unsigned int *)v71 + 14);
                }
                *(_QWORD *)(*((_QWORD *)v71 + 6) + 8 * v91) = v90;
                ++*((_DWORD *)v71 + 14);
                goto LABEL_114;
              }
              v80 = (char *)*((_QWORD *)v71 + 2);
            }
            v81 = v79 - 1;
            v82 = v81 & ((v78 >> 4) ^ (v78 >> 9));
            v83 = (uint64_t (***)(llvm::CallbackVH *__hidden))&v80[8 * v82];
            v84 = *v83;
            if (v78 != *v83)
            {
              v85 = 0;
              v86 = 1;
              while (v84 != (uint64_t (**)(llvm::CallbackVH *__hidden))-4096)
              {
                if (v85)
                  v87 = 0;
                else
                  v87 = v84 == (uint64_t (**)(llvm::CallbackVH *__hidden))-8192;
                if (v87)
                  v85 = v83;
                v88 = v82 + v86++;
                v82 = v88 & v81;
                v83 = (uint64_t (***)(llvm::CallbackVH *__hidden))&v80[8 * v82];
                v84 = *v83;
                if (v78 == *v83)
                  goto LABEL_114;
              }
              if (v85)
                v89 = v85;
              else
                v89 = v83;
              goto LABEL_111;
            }
          }
LABEL_114:
          if (++v72 == v73)
            return result;
        }
      }
      *((_DWORD *)v60 + 2) = v7;
    }
    while (1)
    {
      v61 = *v57;
      v92 = v61;
      if (*((_BYTE *)v61 + 16) != 83)
        v61 = 0;
      v99[0] = v61;
      if (v61)
      {
        v62 = *((_DWORD *)sub_1C61AC530(v6, v99) + 2);
        if (v62 != v7)
        {
          v63 = a1[7];
          v64 = *((_DWORD *)a1 + 18);
          if (!v64)
            goto LABEL_83;
          v66 = (v64 - 1) & (37 * v62);
          v65 = (uint64_t **)(v63 + 96 * v66);
          v67 = *(_DWORD *)v65;
          if (v62 != *(_DWORD *)v65)
          {
            v68 = 1;
            while (v67 != -1)
            {
              v69 = v66 + v68++;
              v66 = v69 & (v64 - 1);
              v65 = (uint64_t **)(v63 + 96 * v66);
              v67 = *(_DWORD *)v65;
              if (v62 == *(_DWORD *)v65)
                goto LABEL_85;
            }
LABEL_83:
            v65 = (uint64_t **)(v63 + 96 * v64);
          }
LABEL_85:
          if (v65 != (uint64_t **)(v63 + 96 * v64))
            sub_1C61ABE84(v52, v65[6], &v65[6][*((unsigned int *)v65 + 14)]);
        }
      }
      else
      {
        sub_1C61ABE04((uint64_t)v52, (uint64_t *)&v92);
      }
      v57 += 4;
      if (v57 == v58)
        goto LABEL_74;
    }
  }
  return result;
}

void llvm::PhiValues::releaseMemory(llvm::PhiValues *this)
{
  sub_1C61446F0((unsigned int *)this + 2);
  sub_1C61AC140((uint64_t)this + 32);
  sub_1C61AC208((uint64_t)this + 56);
}

void llvm::PhiValues::print(llvm::PhiValues *this, llvm::raw_ostream *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  llvm::Value *v8;
  uint64_t v9;
  _DWORD *v10;
  void *v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int *v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  llvm::Value **v21;
  uint64_t v22;
  llvm::Value *v23;
  BOOL v24;
  _WORD *v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  llvm::raw_ostream *v28;
  _BYTE *v29;
  uint64_t v30;
  llvm::raw_ostream *v31;
  const char *v32;
  size_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  llvm::Value *v40;

  v2 = *((_QWORD *)this + 13);
  v3 = *(_QWORD *)(v2 + 80);
  v37 = v2 + 72;
  if (v3 != v2 + 72)
  {
    v38 = (uint64_t *)((char *)this + 8);
    while (1)
    {
      v6 = v3 - 24;
      if (!v3)
        v6 = 0;
      if (*(_QWORD *)(v6 + 40) != v6 + 40)
      {
        v7 = *(_QWORD *)(v6 + 48);
        v8 = (llvm::Value *)(v7 - 24);
        v9 = v7 ? v7 - 24 : 0;
        if (v7)
          break;
      }
LABEL_59:
      v3 = *(_QWORD *)(v3 + 8);
      if (v3 == v37)
        return;
    }
    while (1)
    {
      if (*(_BYTE *)(v9 + 16) != 83)
        goto LABEL_59;
      v10 = (_DWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v10 > 3uLL)
      {
        *v10 = 541673552;
        *((_QWORD *)a2 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(a2, "PHI ", 4uLL);
      }
      llvm::Value::printAsOperand(v8, a2, 0, 0);
      v11 = (void *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v11 > 0xCuLL)
      {
        qmemcpy(v11, " has values:\n", 13);
        *((_QWORD *)a2 + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(a2, " has values:\n", 0xDuLL);
      }
      v39 = 0;
      v40 = v8;
      if (sub_1C61252B8(v38, &v40, &v39))
        v12 = *(_DWORD *)(v39 + 8);
      else
        v12 = 0;
      v13 = *((_QWORD *)this + 4);
      v14 = *((_DWORD *)this + 12);
      if (v14)
      {
        v15 = (v14 - 1) & (37 * v12);
        v16 = (int *)(v13 + 96 * v15);
        v17 = *v16;
        if (v12 == *v16)
          goto LABEL_25;
        v18 = 1;
        while (v17 != -1)
        {
          v19 = v15 + v18++;
          v15 = v19 & (v14 - 1);
          v16 = (int *)(v13 + 96 * v15);
          v17 = *v16;
          if (v12 == *v16)
            goto LABEL_25;
        }
      }
      v16 = (int *)(v13 + 96 * v14);
LABEL_25:
      if (v16 == (int *)(v13 + 96 * v14))
      {
        v30 = *((_QWORD *)a2 + 4);
        if ((unint64_t)(*((_QWORD *)a2 + 3) - v30) > 9)
        {
          *(_WORD *)(v30 + 8) = 2638;
          *(_QWORD *)v30 = *(_QWORD *)"  UNKNOWN\n";
          v36 = *((_QWORD *)a2 + 4) + 10;
LABEL_58:
          *((_QWORD *)a2 + 4) = v36;
          goto LABEL_49;
        }
        v31 = a2;
        v32 = "  UNKNOWN\n";
        v33 = 10;
      }
      else
      {
        v20 = v16[14];
        if ((_DWORD)v20)
        {
          v21 = (llvm::Value **)*((_QWORD *)v16 + 6);
          v22 = 8 * v20;
          while (1)
          {
            v23 = *v21;
            if (*v21)
              v24 = *((unsigned __int8 *)*v21 + 16) >= 0x1Cu;
            else
              v24 = 0;
            if (v24)
            {
              llvm::Value::print(*v21, a2, 0);
              v29 = (_BYTE *)*((_QWORD *)a2 + 4);
              if (*((_BYTE **)a2 + 3) != v29)
              {
                *v29 = 10;
                ++*((_QWORD *)a2 + 4);
                goto LABEL_39;
              }
              v28 = a2;
            }
            else
            {
              v25 = (_WORD *)*((_QWORD *)a2 + 4);
              if (*((_QWORD *)a2 + 3) - (_QWORD)v25 > 1uLL)
              {
                *v25 = 8224;
                *((_QWORD *)a2 + 4) += 2;
                v26 = a2;
              }
              else
              {
                v26 = llvm::raw_ostream::write(a2, "  ", 2uLL);
              }
              llvm::Value::print(v23, v26, 0);
              v27 = (_BYTE *)*((_QWORD *)v26 + 4);
              if (*((_BYTE **)v26 + 3) != v27)
              {
                *v27 = 10;
                ++*((_QWORD *)v26 + 4);
                goto LABEL_39;
              }
              v28 = v26;
            }
            llvm::raw_ostream::write(v28, "\n", 1uLL);
LABEL_39:
            ++v21;
            v22 -= 8;
            if (!v22)
              goto LABEL_49;
          }
        }
        v34 = (_DWORD *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v34 > 6uLL)
        {
          *(_DWORD *)((char *)v34 + 3) = 172314191;
          *v34 = 1330520096;
          v36 = *((_QWORD *)a2 + 4) + 7;
          goto LABEL_58;
        }
        v31 = a2;
        v32 = "  NONE\n";
        v33 = 7;
      }
      llvm::raw_ostream::write(v31, v32, v33);
LABEL_49:
      v35 = *((_QWORD *)v8 + 4);
      v8 = (llvm::Value *)(v35 - 24);
      if (v35)
        v9 = v35 - 24;
      else
        v9 = 0;
      if (!v35)
        goto LABEL_59;
    }
  }
}

void llvm::PhiValuesAnalysis::run(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_DWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = a1;
}

_QWORD *llvm::PhiValuesPrinterPass::run@<X0>(llvm::raw_ostream **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  llvm::raw_ostream *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  size_t *v18;
  const void *v19;
  size_t v20;
  size_t v21;
  _BYTE *v22;
  llvm::PhiValues *v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  uint64_t j;
  uint64_t v28;
  uint64_t v29;

  v8 = *a1;
  v9 = (void *)*((_QWORD *)*a1 + 4);
  if (*((_QWORD *)*a1 + 3) - (_QWORD)v9 > 0x18uLL)
  {
    qmemcpy(v9, "PHI Values for function: ", 25);
    *((_QWORD *)v8 + 4) += 25;
  }
  else
  {
    v8 = llvm::raw_ostream::write(*a1, "PHI Values for function: ", 0x19uLL);
  }
  if ((*(_BYTE *)(a2 + 23) & 0x10) == 0)
  {
    v22 = (_BYTE *)*((_QWORD *)v8 + 4);
    goto LABEL_15;
  }
  v10 = ***(_QWORD ***)a2;
  v11 = *(_QWORD *)(v10 + 152);
  v12 = *(unsigned int *)(v10 + 168);
  if ((_DWORD)v12)
  {
    LODWORD(v13) = (v12 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v14 = (uint64_t *)(v11 + 16 * v13);
    v15 = *v14;
    if (*v14 == a2)
      goto LABEL_11;
    v16 = 1;
    while (v15 != -4096)
    {
      v17 = v13 + v16++;
      v13 = v17 & (v12 - 1);
      v15 = *(_QWORD *)(v11 + 16 * v13);
      if (v15 == a2)
      {
        v14 = (uint64_t *)(v11 + 16 * v13);
        goto LABEL_11;
      }
    }
  }
  v14 = (uint64_t *)(v11 + 16 * v12);
LABEL_11:
  v18 = (size_t *)v14[1];
  v21 = *v18;
  v19 = v18 + 2;
  v20 = v21;
  v22 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (v21 <= *((_QWORD *)v8 + 3) - (_QWORD)v22)
  {
    if (v20)
    {
      memcpy(v22, v19, v20);
      v22 = (_BYTE *)(*((_QWORD *)v8 + 4) + v20);
      *((_QWORD *)v8 + 4) = v22;
    }
  }
  else
  {
    v8 = llvm::raw_ostream::write(v8, (const char *)v19, v20);
    v22 = (_BYTE *)*((_QWORD *)v8 + 4);
  }
LABEL_15:
  if (*((_BYTE **)v8 + 3) == v22)
  {
    llvm::raw_ostream::write(v8, "\n", 1uLL);
  }
  else
  {
    *v22 = 10;
    ++*((_QWORD *)v8 + 4);
  }
  v23 = (llvm::PhiValues *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::PhiValuesAnalysis::Key, a2)
                          + 8);
  v24 = a2 + 72;
  for (i = *(_QWORD *)(a2 + 80); i != v24; i = *(_QWORD *)(i + 8))
  {
    v26 = i - 24;
    if (!i)
      v26 = 0;
    if (*(_QWORD *)(v26 + 40) != v26 + 40)
    {
      for (j = *(_QWORD *)(v26 + 48); ; j = *(_QWORD *)(v28 + 32))
      {
        v28 = j - 24;
        v29 = j ? j - 24 : 0;
        if (!j || *(_BYTE *)(v29 + 16) != 83)
          break;
        llvm::PhiValues::getValuesForPhi(v23, (const llvm::PHINode *)(j - 24));
      }
    }
  }
  llvm::PhiValues::print(v23, *a1);
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C4EF5028(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Phi Values Analysis";
  *(_QWORD *)(v2 + 8) = 19;
  *(_QWORD *)(v2 + 16) = "phi-values";
  *(_QWORD *)(v2 + 24) = 10;
  *(_QWORD *)(v2 + 32) = &llvm::PhiValuesWrapperPass::ID;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::PhiValuesWrapperPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

char *sub_1C4EF50BC(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  int32x2_t *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  int32x2_t *v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 40 * v10;
      v12 = result + 16;
      do
      {
        *v12 = 0;
        v12[1] = -4096;
        *(v12 - 2) = off_1E813A558;
        *(v12 - 1) = 2;
        v12[2] = 0;
        v12 += 5;
        v11 -= 40;
      }
      while (v11);
    }
    if (v3)
    {
      v13 = (_QWORD *)(v4 + 40 * v3);
      v14 = (_QWORD *)v4;
      do
      {
        v15 = v14[3];
        if ((v15 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v51 = 0;
          sub_1C61AC6DC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v15, &v51);
          v29 = v51;
          v30 = v51[3];
          v31 = v14[3];
          if (v30 != v31)
          {
            v32 = v30 == -4096 || v30 == 0;
            if (!v32 && v30 != -8192)
            {
              v36 = v51[1] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v36 = v51[2];
              v37 = (unint64_t *)v29[2];
              if (v37)
              {
                *v37 = *v37 & 7 | v36;
              }
              else
              {
                v38 = v29[3];
                v39 = ***(int32x2_t ****)v38;
                v40 = (unint64_t)v39[303];
                if (v40 <= v36)
                {
                  v41 = v39[305].u32[0];
                  if (v40 + 16 * v41 > v36)
                  {
                    v42 = v41 - 1;
                    LODWORD(v43) = v42 & ((v38 >> 4) ^ (v38 >> 9));
                    v44 = (uint64_t *)(v40 + 16 * v43);
                    v45 = *v44;
                    if (v38 != *v44)
                    {
                      v46 = 1;
                      do
                      {
                        if (v45 == -4096)
                          goto LABEL_54;
                        v47 = v43 + v46++;
                        v43 = v47 & v42;
                        v45 = *(_QWORD *)(v40 + 16 * v43);
                      }
                      while (v38 != v45);
                      v44 = (uint64_t *)(v40 + 16 * v43);
                    }
                    *v44 = -8192;
                    v39[304] = vadd_s32(v39[304], (int32x2_t)0x1FFFFFFFFLL);
                    v38 = v29[3];
LABEL_54:
                    *(_BYTE *)(v38 + 17) &= ~1u;
                  }
                }
              }
              v31 = v14[3];
            }
            v29[3] = v31;
            if (v31 != -4096 && v31 != -8192 && v31 != 0)
            {
              v34 = v14[1];
              v29[2] = *(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF8);
              *(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF8) = v29 + 1;
              v29[1] = v34 & 0xFFFFFFFFFFFFFFF8 | v29[1] & 7;
              v35 = (unint64_t *)v29[2];
              if (v35)
                *v35 = *v35 & 7 | (unint64_t)(v29 + 2);
            }
          }
          v15 = v14[3];
          v29[4] = v14[4];
          ++*(_DWORD *)(a1 + 8);
        }
        if (v15 != -8192 && v15 != -4096 && v15 != 0)
        {
          v17 = v14[1] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v17 = v14[2];
          v18 = (unint64_t *)v14[2];
          if (v18)
          {
            *v18 = *v18 & 7 | v17;
          }
          else
          {
            v19 = v14[3];
            v20 = ***(int32x2_t ****)v19;
            v21 = (unint64_t)v20[303];
            if (v21 <= v17)
            {
              v22 = v20[305].u32[0];
              if (v21 + 16 * v22 > v17)
              {
                v23 = v22 - 1;
                LODWORD(v24) = v23 & ((v19 >> 4) ^ (v19 >> 9));
                v25 = (uint64_t *)(v21 + 16 * v24);
                v26 = *v25;
                if (v19 != *v25)
                {
                  v27 = 1;
                  do
                  {
                    if (v26 == -4096)
                      goto LABEL_28;
                    v28 = v24 + v27++;
                    v24 = v28 & v23;
                    v26 = *(_QWORD *)(v21 + 16 * v24);
                  }
                  while (v19 != v26);
                  v25 = (uint64_t *)(v21 + 16 * v24);
                }
                *v25 = -8192;
                v20[304] = vadd_s32(v20[304], (int32x2_t)0x1FFFFFFFFLL);
                v19 = v14[3];
LABEL_28:
                *(_BYTE *)(v19 + 17) &= ~1u;
              }
            }
          }
        }
        v14 += 5;
      }
      while (v14 != v13);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v48 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v48)
  {
    v49 = 40 * v48;
    v50 = result + 16;
    do
    {
      *v50 = 0;
      v50[1] = -4096;
      *(v50 - 2) = off_1E813A558;
      *(v50 - 1) = 2;
      v50[2] = 0;
      v50 += 5;
      v49 -= 40;
    }
    while (v49);
  }
  return result;
}

_DWORD *sub_1C4EF5474(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(96 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61ACA1C(a1, v4, v4 + 96 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 96 * v10;
    do
    {
      *result = -1;
      result += 24;
      v11 -= 96;
    }
    while (v11);
  }
  return result;
}

_DWORD *sub_1C4EF5538(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(96 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61ACDB0(a1, v4, v4 + 96 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 96 * v10;
    do
    {
      *result = -1;
      result += 24;
      v11 -= 96;
    }
    while (v11);
  }
  return result;
}

void sub_1C4EF55FC(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_DWORD *)(a1 + 8);
  sub_1C4EF5708(a1);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = 0;
    if ((_DWORD)v4)
    {
      v5 = *(_DWORD **)a1;
      v6 = 96 * v4;
      do
      {
        *v5 = -1;
        v5 += 24;
        v6 -= 96;
      }
      while (v6);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if ((_DWORD)v4)
    {
      v7 = (4 * (int)v4 / 3u + 1) | ((unint64_t)(4 * (int)v4 / 3u + 1) >> 1);
      v8 = v7 | (v7 >> 2) | ((v7 | (v7 >> 2)) >> 4);
      LODWORD(v8) = (((v8 | (v8 >> 8)) >> 16) | v8 | (v8 >> 8)) + 1;
      *(_DWORD *)(a1 + 16) = v8;
      v9 = operator new(96 * v8, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = 0;
      v10 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v10)
      {
        v11 = 96 * v10;
        do
        {
          *v9 = -1;
          v9 += 24;
          v11 -= 96;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
  }
}

void sub_1C4EF5708(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = *(_QWORD *)a1 + 64;
    v3 = 96 * v1;
    do
    {
      if (*(_DWORD *)(v2 - 64) <= 0xFFFFFFFD)
      {
        v4 = *(void **)(v2 - 16);
        if ((void *)v2 != v4)
          free(v4);
        if ((*(_BYTE *)(v2 - 56) & 1) == 0)
          MEMORY[0x1CAA32FB4](*(_QWORD *)(v2 - 48), 8);
      }
      v2 += 96;
      v3 -= 96;
    }
    while (v3);
  }
}

void sub_1C4EF577C(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_DWORD *)(a1 + 8);
  sub_1C4EF5888(a1);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = 0;
    if ((_DWORD)v4)
    {
      v5 = *(_DWORD **)a1;
      v6 = 96 * v4;
      do
      {
        *v5 = -1;
        v5 += 24;
        v6 -= 96;
      }
      while (v6);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if ((_DWORD)v4)
    {
      v7 = (4 * (int)v4 / 3u + 1) | ((unint64_t)(4 * (int)v4 / 3u + 1) >> 1);
      v8 = v7 | (v7 >> 2) | ((v7 | (v7 >> 2)) >> 4);
      LODWORD(v8) = (((v8 | (v8 >> 8)) >> 16) | v8 | (v8 >> 8)) + 1;
      *(_DWORD *)(a1 + 16) = v8;
      v9 = operator new(96 * v8, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = 0;
      v10 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v10)
      {
        v11 = 96 * v10;
        do
        {
          *v9 = -1;
          v9 += 24;
          v11 -= 96;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
  }
}

void sub_1C4EF5888(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = *(_QWORD *)a1 + 64;
    v3 = 96 * v1;
    do
    {
      if (*(_DWORD *)(v2 - 64) <= 0xFFFFFFFD)
      {
        v4 = *(void **)(v2 - 16);
        if ((void *)v2 != v4)
          free(v4);
        if ((*(_BYTE *)(v2 - 56) & 1) == 0)
          MEMORY[0x1CAA32FB4](*(_QWORD *)(v2 - 48), 8);
      }
      v2 += 96;
      v3 -= 96;
    }
    while (v3);
  }
}

_QWORD *sub_1C4EF58FC(_QWORD *a1)
{
  sub_1C4EF5964(a1 + 10);
  MEMORY[0x1CAA32FB4](a1[10], 8);
  sub_1C4EF5888((uint64_t)(a1 + 7));
  MEMORY[0x1CAA32FB4](a1[7], 8);
  sub_1C4EF5708((uint64_t)(a1 + 4));
  MEMORY[0x1CAA32FB4](a1[4], 8);
  MEMORY[0x1CAA32FB4](a1[1], 8);
  return a1;
}

_QWORD *sub_1C4EF5964(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *((unsigned int *)result + 4);
  if ((_DWORD)v1)
  {
    v2 = 40 * v1;
    v3 = (uint64_t *)(*result + 24);
    do
    {
      v4 = *v3;
      if (*v3 != -8192 && v4 != -4096 && v4 != 0)
        result = llvm::ValueHandleBase::RemoveFromUseList(v3 - 2);
      v3 += 5;
      v2 -= 40;
    }
    while (v2);
  }
  return result;
}

void llvm::initializePostDominatorTreeWrapperPassPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82E8D8);
  if (v1 != -1)
  {
    v4[0] = sub_1C4EF5A2C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82E8D8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4EF5A2C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Post-Dominator Tree Construction";
  *(_QWORD *)(v2 + 8) = 32;
  *(_QWORD *)(v2 + 16) = "postdomtree";
  *(_QWORD *)(v2 + 24) = 11;
  *(_QWORD *)(v2 + 32) = &llvm::PostDominatorTreeWrapperPass::ID;
  *(_WORD *)(v2 + 40) = 257;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::PostDominatorTreeWrapperPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

BOOL llvm::PostDominatorTree::invalidate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  _QWORD v8[2];
  BOOL v9;

  v8[0] = a3;
  v8[1] = &llvm::PostDominatorTreeAnalysis::Key;
  v4 = sub_1C477672C(a3 + 48, (uint64_t)&llvm::PostDominatorTreeAnalysis::Key);
  v5 = *(_QWORD *)(a3 + 56);
  if (v5 == *(_QWORD *)(a3 + 48))
    v6 = (unsigned int *)(a3 + 68);
  else
    v6 = (unsigned int *)(a3 + 64);
  v9 = v4 != (_QWORD *)(v5 + 8 * *v6);
  return !sub_1C4DAA35C((uint64_t)v8) && !sub_1C4DAA3F8((uint64_t)v8) && !sub_1C4DAA49C((uint64_t)v8);
}

BOOL llvm::PostDominatorTree::dominates(llvm::PostDominatorTree *this, const llvm::Instruction *a2, const llvm::Instruction *a3)
{
  uint64_t v3;
  _BOOL8 result;
  uint64_t *v5;
  uint64_t v6;
  const llvm::Instruction *v7;

  v3 = *((_QWORD *)a2 + 5);
  if (v3 != *((_QWORD *)a3 + 5))
    return llvm::DominatorTreeBase<llvm::BasicBlock,true>::dominates((uint64_t)this, *((_QWORD *)a2 + 5), *((_QWORD *)a3 + 5));
  if (*((_BYTE *)a2 + 16) == 83 && *((_BYTE *)a3 + 16) == 83)
    return 0;
  v5 = (uint64_t *)(v3 + 48);
  do
  {
    v6 = *v5;
    v7 = (const llvm::Instruction *)(v6 - 24);
    if (!v6)
      v7 = 0;
    result = v7 == a3;
    v5 = (uint64_t *)(v6 + 8);
  }
  while (v7 != a2 && v7 != a3);
  return result;
}

uint64_t llvm::PostDominatorTreeWrapperPass::runOnFunction(llvm::PostDominatorTreeWrapperPass *this, llvm::Function *a2)
{
  *((_QWORD *)this + 14) = a2;
  sub_1C53BA93C((uint64_t)this + 32, 0);
  return 0;
}

void llvm::PostDominatorTreeAnalysis::run(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x400000000;
  *(_DWORD *)(a2 + 92) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = a1;
  sub_1C53BA93C(a2, 0);
}

_QWORD *llvm::PostDominatorTreePrinterPass::PostDominatorTreePrinterPass(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

uint64_t *sub_1C4EF5C1C(uint64_t a1)
{
  uint64_t *result;

  result = sub_1C4EF5C94((uint64_t *)(a1 + 80));
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 124) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  return result;
}

void sub_1C4EF5C50(uint64_t *a1)
{
  uint64_t *v2;

  *a1 = (uint64_t)&off_1E813A580;
  sub_1C4DC4E38(a1 + 10);
  v2 = (uint64_t *)a1[4];
  if (v2 != a1 + 6)
    free(v2);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

uint64_t *sub_1C4EF5C94(uint64_t *result)
{
  uint64_t *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = result;
  v2 = *((_DWORD *)result + 2);
  if (v2 || *((_DWORD *)result + 3))
  {
    v3 = *((unsigned int *)result + 4);
    if (v3 > 4 * v2 && v3 >= 0x41)
      return sub_1C4EF5D30(result);
    if ((_DWORD)v3)
    {
      v4 = 16 * v3;
      result = (uint64_t *)(*result + 8);
      while (1)
      {
        v5 = *(result - 1);
        if (v5 == -8192)
          goto LABEL_11;
        if (v5 != -4096)
          break;
LABEL_12:
        result += 2;
        v4 -= 16;
        if (!v4)
          goto LABEL_13;
      }
      result = sub_1C48680A4(result);
LABEL_11:
      *(result - 1) = -4096;
      goto LABEL_12;
    }
LABEL_13:
    v1[1] = 0;
  }
  return result;
}

uint64_t *sub_1C4EF5D30(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;

  v1 = result;
  v2 = *((unsigned int *)result + 4);
  v3 = *((_DWORD *)result + 2);
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    result = (uint64_t *)(*result + 8);
    do
    {
      if ((*(result - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        result = sub_1C48680A4(result);
      result += 2;
      v4 -= 16;
    }
    while (v4);
  }
  if (!v3)
  {
    if (!*((_DWORD *)v1 + 4))
    {
      v1[1] = 0;
      return result;
    }
    v6 = 0;
    result = (uint64_t *)*v1;
LABEL_16:
    MEMORY[0x1CAA32FB4](result, 8);
    return (uint64_t *)sub_1C476B10C(v1, v6);
  }
  v5 = 1 << (33 - __clz(v3 - 1));
  if (v5 <= 64)
    v6 = 64;
  else
    v6 = v5;
  result = (uint64_t *)*v1;
  if (v6 != *((_DWORD *)v1 + 4))
    goto LABEL_16;
  v1[1] = 0;
  v7 = 16 * v6;
  do
  {
    *result = -4096;
    result += 2;
    v7 -= 16;
  }
  while (v7);
  return result;
}

unsigned __int8 *llvm::ProfileSummaryInfo::refresh(unsigned __int8 *this)
{
  uint64_t *v1;
  llvm::Module **v2;
  unsigned __int8 *ProfileSummary;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v1 = (uint64_t *)(this + 8);
  if (!*((_QWORD *)this + 1))
  {
    v2 = (llvm::Module **)this;
    ProfileSummary = (unsigned __int8 *)llvm::Module::getProfileSummary(*(llvm::Module **)this, 1);
    if (ProfileSummary)
    {
      v4 = llvm::ProfileSummary::getFromMD(ProfileSummary);
      v5 = *v1;
      *v1 = (uint64_t)v4;
      if (!v5)
      {
LABEL_7:
        if (!v4)
        {
          v6 = (unsigned __int8 *)llvm::Module::getProfileSummary(*v2, 0);
          if (v6)
          {
            this = llvm::ProfileSummary::getFromMD(v6);
            v7 = *v1;
            *v1 = (uint64_t)this;
            if (!v7)
              goto LABEL_12;
            sub_1C4E5DDC4((uint64_t)v1, v7);
          }
        }
        this = (unsigned __int8 *)*v1;
LABEL_12:
        if (this)
          return (unsigned __int8 *)llvm::ProfileSummaryInfo::computeThresholds((llvm::ProfileSummaryInfo *)v2);
        return this;
      }
      sub_1C4E5DDC4((uint64_t)v1, v5);
    }
    v4 = (unsigned __int8 *)*v1;
    goto LABEL_7;
  }
  return this;
}

char *llvm::ProfileSummaryInfo::computeThresholds(llvm::ProfileSummaryInfo *this)
{
  char **v2;
  char *EntryForPercentile;
  char *v4;
  uint64_t v5;
  char *result;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  _BYTE *v12;
  int v13;
  BOOL v14;
  int v15;

  v2 = (char **)(*((_QWORD *)this + 1) + 8);
  EntryForPercentile = llvm::ProfileSummaryBuilder::getEntryForPercentile(v2, dword_1ED8355C0);
  v4 = llvm::ProfileSummaryBuilder::getEntryForPercentile(v2, dword_1ED8355C0) + 8;
  if (word_1ED835848)
    v4 = (char *)&xmmword_1ED8358C0;
  v5 = *(_QWORD *)v4;
  if (!*((_BYTE *)this + 24))
    *((_BYTE *)this + 24) = 1;
  *((_QWORD *)this + 2) = v5;
  result = llvm::ProfileSummaryBuilder::getEntryForPercentile(v2, dword_1ED835680);
  v7 = (__int128 *)(result + 8);
  if (word_1ED835910)
    v7 = &xmmword_1ED835988;
  v8 = *(_QWORD *)v7;
  if (!*((_BYTE *)this + 40))
    *((_BYTE *)this + 40) = 1;
  *((_QWORD *)this + 4) = v8;
  v9 = *((_QWORD *)this + 1);
  if (v9 && *(_DWORD *)v9 == 2 && (byte_1ED82E960 || *(_BYTE *)(v9 + 72)) && byte_1ED82EA20)
  {
    v10 = (unint64_t)(*(double *)&xmmword_1ED7F2F58
                           * (*(double *)(v9 + 80)
                            * (double)*((unint64_t *)EntryForPercentile + 2)));
    v11 = v10 > dword_1ED835740;
    if (!*((_BYTE *)this + 49))
      *((_BYTE *)this + 49) = 1;
    v13 = *((unsigned __int8 *)this + 51);
    v12 = (char *)this + 51;
    *(v12 - 3) = v11;
    *(v12 - 1) = v10 > dword_1ED835800;
    if (!v13)
LABEL_21:
      *v12 = 1;
  }
  else
  {
    v14 = *((_QWORD *)EntryForPercentile + 2) > (unint64_t)dword_1ED835740;
    if (!*((_BYTE *)this + 49))
      *((_BYTE *)this + 49) = 1;
    v15 = *((unsigned __int8 *)this + 51);
    v12 = (char *)this + 51;
    *(v12 - 3) = v14;
    *(v12 - 1) = *((_QWORD *)EntryForPercentile + 2) > (unint64_t)dword_1ED835800;
    if (!v15)
      goto LABEL_21;
  }
  return result;
}

BOOL llvm::ProfileSummaryInfo::isFunctionEntryHot(llvm::ProfileSummaryInfo *this, uint64_t ***a2)
{
  unint64_t v4;
  char v5;

  if (!a2)
    return 0;
  if (*((_QWORD *)this + 1))
  {
    llvm::Function::getEntryCount(a2, 0, (uint64_t)&v4);
    if (v5)
    {
      if (*((_BYTE *)this + 24))
        return *((_QWORD *)this + 2) <= v4;
    }
  }
  return 0;
}

uint64_t llvm::ProfileSummaryInfo::isFunctionHotInCallGraph(llvm::ProfileSummaryInfo *this, uint64_t ***a2, uint64_t **a3)
{
  _DWORD *v6;
  uint64_t ***v7;
  unint64_t v8;
  uint64_t ***v9;
  uint64_t **v10;
  uint64_t **i;
  uint64_t **v12;
  int v13;
  unint64_t ProfileCount;
  char v15;
  unint64_t v16;
  char *v18;
  uint64_t **j;
  const llvm::BasicBlock *v20;
  uint64_t *BlockProfileCount;
  char v22;
  unint64_t v23;
  char v24;

  if (!a2)
    return 0;
  if (!*((_QWORD *)this + 1))
    return 0;
  llvm::Function::getEntryCount(a2, 0, (uint64_t)&v23);
  if (!v24 || !*((_BYTE *)this + 24) || *((_QWORD *)this + 2) > v23)
  {
    v6 = (_DWORD *)*((_QWORD *)this + 1);
    if (!v6 || *v6 != 2)
      goto LABEL_30;
    v7 = (uint64_t ***)a2[10];
    if (v7 == a2 + 9)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      do
      {
        v9 = v7 - 3;
        if (!v7)
          v9 = 0;
        v10 = (uint64_t **)(v9 + 5);
        for (i = v9[6]; i != v10; i = (uint64_t **)i[1])
        {
          if (i)
            v12 = i - 3;
          else
            v12 = 0;
          v13 = *((unsigned __int8 *)v12 + 16);
          if (v13 == 84 || v13 == 33)
          {
            ProfileCount = llvm::ProfileSummaryInfo::getProfileCount(this, (const llvm::BasicBlock **)v12, 0, 0);
            if (v15)
              v16 = ProfileCount;
            else
              v16 = 0;
            v8 += v16;
          }
        }
        v7 = (uint64_t ***)v7[1];
      }
      while (v7 != a2 + 9);
    }
    if (!*((_BYTE *)this + 24) || *((_QWORD *)this + 2) > v8)
    {
LABEL_30:
      v18 = (char *)(a2 + 9);
      for (j = a2[10]; j != (uint64_t **)v18; j = (uint64_t **)j[1])
      {
        if (j)
          v20 = (const llvm::BasicBlock *)(j - 3);
        else
          v20 = 0;
        BlockProfileCount = llvm::BlockFrequencyInfo::getBlockProfileCount(a3, v20, 0);
        if (v22 && *((_BYTE *)this + 24) && *((_QWORD *)this + 2) <= (unint64_t)BlockProfileCount)
          return 1;
      }
      return 0;
    }
  }
  return 1;
}

BOOL llvm::ProfileSummaryInfo::isHotBlock(llvm::ProfileSummaryInfo *this, const llvm::BasicBlock *a2, uint64_t **a3)
{
  uint64_t *BlockProfileCount;
  char v5;

  BlockProfileCount = llvm::BlockFrequencyInfo::getBlockProfileCount(a3, a2, 0);
  return v5 && *((_BYTE *)this + 24) && *((_QWORD *)this + 2) <= (unint64_t)BlockProfileCount;
}

uint64_t llvm::ProfileSummaryInfo::isFunctionColdInCallGraph(llvm::ProfileSummaryInfo *this, uint64_t ***a2, uint64_t **a3)
{
  _DWORD *v6;
  uint64_t ***v7;
  unint64_t v8;
  uint64_t ***v9;
  uint64_t **v10;
  uint64_t **i;
  uint64_t **v12;
  int v13;
  unint64_t ProfileCount;
  char v15;
  unint64_t v16;
  uint64_t result;
  char *v18;
  uint64_t **v19;
  const llvm::BasicBlock *v20;
  uint64_t *BlockProfileCount;
  char v22;
  unint64_t v23;
  char v24;

  if (!a2)
    return 0;
  if (*((_QWORD *)this + 1))
  {
    llvm::Function::getEntryCount(a2, 0, (uint64_t)&v23);
    if (!v24 || *((_BYTE *)this + 40) && *((_QWORD *)this + 4) >= v23)
    {
      v6 = (_DWORD *)*((_QWORD *)this + 1);
      if (!v6 || *v6 != 2)
        goto LABEL_32;
      v7 = (uint64_t ***)a2[10];
      if (v7 == a2 + 9)
      {
        v8 = 0;
      }
      else
      {
        v8 = 0;
        do
        {
          v9 = v7 - 3;
          if (!v7)
            v9 = 0;
          v10 = (uint64_t **)(v9 + 5);
          for (i = v9[6]; i != v10; i = (uint64_t **)i[1])
          {
            if (i)
              v12 = i - 3;
            else
              v12 = 0;
            v13 = *((unsigned __int8 *)v12 + 16);
            if (v13 == 84 || v13 == 33)
            {
              ProfileCount = llvm::ProfileSummaryInfo::getProfileCount(this, (const llvm::BasicBlock **)v12, 0, 0);
              if (v15)
                v16 = ProfileCount;
              else
                v16 = 0;
              v8 += v16;
            }
          }
          v7 = (uint64_t ***)v7[1];
        }
        while (v7 != a2 + 9);
      }
      if (*((_BYTE *)this + 40) && *((_QWORD *)this + 4) >= v8)
      {
LABEL_32:
        v18 = (char *)(a2 + 9);
        v19 = a2[10];
        if (v19 == (uint64_t **)v18)
          return 1;
        while (1)
        {
          v20 = v19 ? (const llvm::BasicBlock *)(v19 - 3) : 0;
          BlockProfileCount = llvm::BlockFrequencyInfo::getBlockProfileCount(a3, v20, 0);
          if (!v22 || !*((_BYTE *)this + 40) || *((_QWORD *)this + 4) < (unint64_t)BlockProfileCount)
            break;
          v19 = (uint64_t **)v19[1];
          result = 1;
          if (v19 == (uint64_t **)v18)
            return result;
        }
      }
    }
  }
  return 0;
}

uint64_t llvm::ProfileSummaryInfo::isFunctionHotInCallGraphNthPercentile(llvm::ProfileSummaryInfo *this, int a2, uint64_t ***a3, uint64_t **a4)
{
  unint64_t v8;
  unint64_t v9;
  char v10;
  _DWORD *v11;
  uint64_t ***v12;
  unint64_t v13;
  uint64_t ***v14;
  uint64_t **v15;
  uint64_t **i;
  uint64_t **v17;
  int v18;
  unint64_t ProfileCount;
  char v20;
  unint64_t v21;
  unint64_t v23;
  char v24;
  char *v25;
  uint64_t **j;
  const llvm::BasicBlock *v27;
  uint64_t *BlockProfileCount;
  char v29;
  uint64_t *v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  char v34;

  if (!a3)
    return 0;
  if (*((_QWORD *)this + 1))
  {
    llvm::Function::getEntryCount(a3, 0, (uint64_t)&v33);
    if (v34)
    {
      v8 = v33;
      v9 = llvm::ProfileSummaryInfo::computeThreshold(this, a2);
      if (v10)
      {
        if (v9 <= v8)
          return 1;
      }
    }
    v11 = (_DWORD *)*((_QWORD *)this + 1);
    if (v11 && *v11 == 2)
    {
      v12 = (uint64_t ***)a3[10];
      if (v12 == a3 + 9)
      {
        v13 = 0;
      }
      else
      {
        v13 = 0;
        do
        {
          v14 = v12 - 3;
          if (!v12)
            v14 = 0;
          v15 = (uint64_t **)(v14 + 5);
          for (i = v14[6]; i != v15; i = (uint64_t **)i[1])
          {
            if (i)
              v17 = i - 3;
            else
              v17 = 0;
            v18 = *((unsigned __int8 *)v17 + 16);
            if (v18 == 84 || v18 == 33)
            {
              ProfileCount = llvm::ProfileSummaryInfo::getProfileCount(this, (const llvm::BasicBlock **)v17, 0, 0);
              if (v20)
                v21 = ProfileCount;
              else
                v21 = 0;
              v13 += v21;
            }
          }
          v12 = (uint64_t ***)v12[1];
        }
        while (v12 != a3 + 9);
      }
      v23 = llvm::ProfileSummaryInfo::computeThreshold(this, a2);
      if (v24)
      {
        if (v23 <= v13)
          return 1;
      }
    }
    v25 = (char *)(a3 + 9);
    for (j = a3[10]; j != (uint64_t **)v25; j = (uint64_t **)j[1])
    {
      if (j)
        v27 = (const llvm::BasicBlock *)(j - 3);
      else
        v27 = 0;
      BlockProfileCount = llvm::BlockFrequencyInfo::getBlockProfileCount(a4, v27, 0);
      if (v29)
      {
        v30 = BlockProfileCount;
        v31 = llvm::ProfileSummaryInfo::computeThreshold(this, a2);
        if (v32)
        {
          if (v31 <= (unint64_t)v30)
            return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t llvm::ProfileSummaryInfo::isFunctionColdInCallGraphNthPercentile(llvm::ProfileSummaryInfo *this, int a2, uint64_t ***a3, uint64_t **a4)
{
  unint64_t v8;
  unint64_t v9;
  char v10;
  _DWORD *v11;
  uint64_t ***v12;
  unint64_t v13;
  uint64_t ***v14;
  uint64_t **v15;
  uint64_t **i;
  uint64_t **v17;
  int v18;
  unint64_t ProfileCount;
  char v20;
  unint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  char *v25;
  uint64_t **j;
  const llvm::BasicBlock *v27;
  uint64_t *BlockProfileCount;
  char v29;
  uint64_t *v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  char v34;

  if (!a3)
    return 0;
  if (!*((_QWORD *)this + 1))
    return 0;
  llvm::Function::getEntryCount(a3, 0, (uint64_t)&v33);
  if (v34)
  {
    v8 = v33;
    v9 = llvm::ProfileSummaryInfo::computeThreshold(this, a2);
    if (!v10 || v9 < v8)
      return 0;
  }
  v11 = (_DWORD *)*((_QWORD *)this + 1);
  if (!v11 || *v11 != 2)
    goto LABEL_30;
  v12 = (uint64_t ***)a3[10];
  if (v12 == a3 + 9)
  {
    v13 = 0;
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = v12 - 3;
      if (!v12)
        v14 = 0;
      v15 = (uint64_t **)(v14 + 5);
      for (i = v14[6]; i != v15; i = (uint64_t **)i[1])
      {
        if (i)
          v17 = i - 3;
        else
          v17 = 0;
        v18 = *((unsigned __int8 *)v17 + 16);
        if (v18 == 84 || v18 == 33)
        {
          ProfileCount = llvm::ProfileSummaryInfo::getProfileCount(this, (const llvm::BasicBlock **)v17, 0, 0);
          if (v20)
            v21 = ProfileCount;
          else
            v21 = 0;
          v13 += v21;
        }
      }
      v12 = (uint64_t ***)v12[1];
    }
    while (v12 != a3 + 9);
  }
  v23 = llvm::ProfileSummaryInfo::computeThreshold(this, a2);
  result = 0;
  if (v24)
  {
    if (v23 >= v13)
    {
LABEL_30:
      v25 = (char *)(a3 + 9);
      for (j = a3[10]; j != (uint64_t **)v25; j = (uint64_t **)j[1])
      {
        if (j)
          v27 = (const llvm::BasicBlock *)(j - 3);
        else
          v27 = 0;
        BlockProfileCount = llvm::BlockFrequencyInfo::getBlockProfileCount(a4, v27, 0);
        if (!v29)
          return 0;
        v30 = BlockProfileCount;
        v31 = llvm::ProfileSummaryInfo::computeThreshold(this, a2);
        result = 0;
        if (!v32 || v31 < (unint64_t)v30)
          return result;
      }
      return 1;
    }
  }
  return result;
}

BOOL llvm::ProfileSummaryInfo::isFunctionEntryCold(llvm::ProfileSummaryInfo *this, const llvm::Function *a2)
{
  uint64_t v2;
  unint64_t v5;
  char v6;

  if (!a2)
    return 0;
  v2 = *((_QWORD *)a2 + 14);
  if (v2 && (*(_BYTE *)(v2 + 12) & 0x20) != 0)
    return 1;
  if (*((_QWORD *)this + 1))
  {
    llvm::Function::getEntryCount((uint64_t ***)a2, 0, (uint64_t)&v5);
    if (v6)
    {
      if (*((_BYTE *)this + 40))
        return *((_QWORD *)this + 4) >= v5;
    }
  }
  return 0;
}

unint64_t llvm::ProfileSummaryInfo::computeThreshold(llvm::ProfileSummaryInfo *this, int a2)
{
  unint64_t v2;
  char *v4;
  int *v5;
  uint64_t v6;
  int v8;

  v8 = a2;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v4 = (char *)this + 56;
    v5 = sub_1C4991368((uint64_t *)this + 7, &v8);
    if ((int *)(*((_QWORD *)this + 7) + 16 * *((unsigned int *)this + 18)) == v5)
    {
      v6 = *((_QWORD *)llvm::ProfileSummaryBuilder::getEntryForPercentile((char **)(*((_QWORD *)this + 1) + 8), v8) + 1);
      *((_QWORD *)sub_1C49916CC((uint64_t)v4, &v8) + 1) = v6;
    }
    else
    {
      v6 = *((_QWORD *)v5 + 1);
    }
    v2 = v6 & 0xFFFFFFFFFFFFFF00;
  }
  else
  {
    LOBYTE(v6) = 0;
  }
  return v2 | v6;
}

BOOL llvm::ProfileSummaryInfo::hasHugeWorkingSetSize(llvm::ProfileSummaryInfo *this)
{
  return *((_BYTE *)this + 49) && *((_BYTE *)this + 48) != 0;
}

uint64_t llvm::ProfileSummaryInfo::getOrCompHotCountThreshold(llvm::ProfileSummaryInfo *this)
{
  if (*((_BYTE *)this + 24))
    return *((_QWORD *)this + 2);
  else
    return -1;
}

uint64_t sub_1C4EF693C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Profile summary info";
  *(_QWORD *)(v2 + 8) = 20;
  *(_QWORD *)(v2 + 16) = "profile-summary-info";
  *(_QWORD *)(v2 + 24) = 20;
  *(_QWORD *)(v2 + 32) = &llvm::ProfileSummaryInfoWrapperPass::ID;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::ProfileSummaryInfoWrapperPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::ProfileSummaryInfoWrapperPass::doInitialization(llvm::ProfileSummaryInfoWrapperPass *this, llvm::Module *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = operator new();
  *(_QWORD *)v4 = a2;
  *(_QWORD *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 24) = 0;
  *(_BYTE *)(v4 + 32) = 0;
  *(_BYTE *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_DWORD *)(v4 + 72) = 0;
  llvm::ProfileSummaryInfo::refresh((unsigned __int8 *)v4);
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v4;
  if (v5)
  {
    v7 = sub_1C4EF6F9C(v5);
    MEMORY[0x1CAA32FC0](v7, 0x1060C40BAADE331);
  }
  return 0;
}

uint64_t llvm::ProfileSummaryInfoWrapperPass::doFinalization(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v1)
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)(v1 + 56), 8);
    v2 = *(_QWORD *)(v1 + 8);
    *(_QWORD *)(v1 + 8) = 0;
    if (v2)
      sub_1C4E5DDC4(v1 + 8, v2);
    MEMORY[0x1CAA32FC0](v1, 0x1060C40BAADE331);
  }
  return 0;
}

unsigned __int8 *llvm::ProfileSummaryAnalysis::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a2 + 72) = 0;
  return llvm::ProfileSummaryInfo::refresh((unsigned __int8 *)a2);
}

_QWORD *llvm::ProfileSummaryPrinterPass::run@<X0>(llvm::raw_ostream **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t ResultImpl;
  llvm::raw_ostream *v7;
  void *v8;
  void *v9;
  char v10;
  const void *v11;
  size_t v12;
  uint64_t i;
  const llvm::Function *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const llvm::Function **v19;
  const llvm::Function *v20;
  int v21;
  int v22;
  llvm::raw_ostream *v23;
  size_t *v24;
  const void *v25;
  size_t v26;
  size_t v27;
  void *v28;
  llvm::raw_ostream *v29;
  void *v30;
  const char *v31;
  size_t v32;
  llvm::raw_ostream *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v39;
  char v40;

  ResultImpl = llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::ProfileSummaryAnalysis::Key, a2);
  v7 = *a1;
  v8 = (void *)*((_QWORD *)*a1 + 4);
  if (*((_QWORD *)*a1 + 3) - (_QWORD)v8 > 0xCuLL)
  {
    qmemcpy(v8, "Functions in ", 13);
    v9 = (void *)(*((_QWORD *)v7 + 4) + 13);
    *((_QWORD *)v7 + 4) = v9;
  }
  else
  {
    v7 = llvm::raw_ostream::write(*a1, "Functions in ", 0xDuLL);
    v9 = (void *)*((_QWORD *)v7 + 4);
  }
  v10 = *(_BYTE *)(a2 + 191);
  if (v10 >= 0)
    v11 = (const void *)(a2 + 168);
  else
    v11 = *(const void **)(a2 + 168);
  if (v10 >= 0)
    v12 = v10 & 0x7F;
  else
    v12 = *(_QWORD *)(a2 + 176);
  if (v12 <= *((_QWORD *)v7 + 3) - (_QWORD)v9)
  {
    if (v12)
    {
      memcpy(v9, v11, v12);
      v9 = (void *)(*((_QWORD *)v7 + 4) + v12);
      *((_QWORD *)v7 + 4) = v9;
    }
  }
  else
  {
    v7 = llvm::raw_ostream::write(v7, (const char *)v11, v12);
    v9 = (void *)*((_QWORD *)v7 + 4);
  }
  if (*((_QWORD *)v7 + 3) - (_QWORD)v9 > 0x1CuLL)
  {
    qmemcpy(v9, " with hot/cold annotations: \n", 29);
    *((_QWORD *)v7 + 4) += 29;
  }
  else
  {
    llvm::raw_ostream::write(v7, " with hot/cold annotations: \n", 0x1DuLL);
  }
  for (i = *(_QWORD *)(a2 + 32); i != a2 + 24; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v14 = (const llvm::Function *)(i - 56);
    else
      v14 = 0;
    if ((*((_BYTE *)v14 + 23) & 0x10) == 0)
      goto LABEL_31;
    v15 = ***(_QWORD ***)v14;
    v16 = *(_QWORD *)(v15 + 152);
    v17 = *(unsigned int *)(v15 + 168);
    if ((_DWORD)v17)
    {
      LODWORD(v18) = (v17 - 1) & ((v14 >> 4) ^ (v14 >> 9));
      v19 = (const llvm::Function **)(v16 + 16 * v18);
      v20 = *v19;
      if (*v19 == v14)
        goto LABEL_27;
      v21 = 1;
      while (v20 != (const llvm::Function *)-4096)
      {
        v22 = v18 + v21++;
        v18 = v22 & (v17 - 1);
        v20 = *(const llvm::Function **)(v16 + 16 * v18);
        if (v20 == v14)
        {
          v19 = (const llvm::Function **)(v16 + 16 * v18);
          goto LABEL_27;
        }
      }
    }
    v19 = (const llvm::Function **)(v16 + 16 * v17);
LABEL_27:
    v23 = *a1;
    v24 = (size_t *)v19[1];
    v27 = *v24;
    v25 = v24 + 2;
    v26 = v27;
    v28 = (void *)*((_QWORD *)*a1 + 4);
    if (v27 <= *((_QWORD *)*a1 + 3) - (_QWORD)v28)
    {
      if (v26)
      {
        memcpy(v28, v25, v26);
        *((_QWORD *)v23 + 4) += v26;
      }
    }
    else
    {
      llvm::raw_ostream::write(*a1, (const char *)v25, v26);
    }
LABEL_31:
    if (i)
    {
      if (*(_QWORD *)(ResultImpl + 16))
      {
        llvm::Function::getEntryCount((uint64_t ***)(i - 56), 0, (uint64_t)&v39);
        if (v40)
        {
          if (*(_BYTE *)(ResultImpl + 32) && *(_QWORD *)(ResultImpl + 24) <= v39)
          {
            v29 = *a1;
            v35 = *((_QWORD *)*a1 + 4);
            if ((unint64_t)(*((_QWORD *)*a1 + 3) - v35) > 0xB)
            {
              *(_DWORD *)(v35 + 8) = 544830068;
              *(_QWORD *)v35 = *(_QWORD *)" :hot entry ";
              v36 = *((_QWORD *)v29 + 4) + 12;
              goto LABEL_48;
            }
            v31 = " :hot entry ";
            v32 = 12;
            goto LABEL_39;
          }
        }
      }
    }
    if (llvm::ProfileSummaryInfo::isFunctionEntryCold((llvm::ProfileSummaryInfo *)(ResultImpl + 8), v14))
    {
      v29 = *a1;
      v30 = (void *)*((_QWORD *)*a1 + 4);
      if (*((_QWORD *)*a1 + 3) - (_QWORD)v30 > 0xCuLL)
      {
        qmemcpy(v30, " :cold entry ", 13);
        v36 = *((_QWORD *)v29 + 4) + 13;
LABEL_48:
        *((_QWORD *)v29 + 4) = v36;
        goto LABEL_40;
      }
      v31 = " :cold entry ";
      v32 = 13;
LABEL_39:
      llvm::raw_ostream::write(v29, v31, v32);
    }
LABEL_40:
    v33 = *a1;
    v34 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if (*((_BYTE **)*a1 + 3) == v34)
    {
      llvm::raw_ostream::write(v33, "\n", 1uLL);
    }
    else
    {
      *v34 = 10;
      ++*((_QWORD *)v33 + 4);
    }
  }
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

__n128 sub_1C4EF6E94(_WORD *a1, char **a2, __n128 *a3)
{
  char *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED82E8E0, "partial-profile", 0xFuLL);
  word_1ED82E8EA = (32 * (*a1 & 3)) | word_1ED82E8EA & 0xFF9F;
  v6 = *a2;
  byte_1ED82E960 = **a2;
  byte_1ED82E971 = 1;
  byte_1ED82E970 = *v6;
  result = *a3;
  xmmword_1ED82E900 = (__int128)*a3;
  return result;
}

__n128 sub_1C4EF6F18(_WORD *a1, uint64_t **a2, __n128 *a3)
{
  uint64_t *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7F2ED8, "partial-sample-profile-working-set-size-scale-factor", 0x34uLL);
  word_1ED7F2EE2 = (32 * (*a1 & 3)) | word_1ED7F2EE2 & 0xFF9F;
  v6 = *a2;
  *(_QWORD *)&xmmword_1ED7F2F58 = **a2;
  byte_1ED7F2F70 = 1;
  qword_1ED7F2F68 = *v6;
  result = *a3;
  xmmword_1ED7F2EF8 = (__int128)*a3;
  return result;
}

uint64_t sub_1C4EF6F9C(uint64_t a1)
{
  uint64_t v2;

  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 56), 8);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    sub_1C4E5DDC4(a1 + 8, v2);
  return a1;
}

uint64_t sub_1C4EF6FDC()
{
  __n128 v1;
  uint64_t v2;
  uint64_t *v3;
  int v4;

  LODWORD(v2) = 1;
  LOBYTE(v4) = 0;
  v3 = (uint64_t *)&v4;
  v1.n128_u64[0] = (unint64_t)"Specify the current profile is used as a partial profile.";
  v1.n128_u64[1] = 57;
  sub_1C61AD800(&v2, (char **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED82E8E0, &dword_1C475E000);
  LODWORD(v2) = 1;
  LOBYTE(v4) = 1;
  v3 = (uint64_t *)&v4;
  v1.n128_u64[0] = (unint64_t)"If true, scale the working set size of the partial sample profile by the partial pr"
                                     "ofile ratio to reflect the size of the program being compiled.";
  v1.n128_u64[1] = 145;
  sub_1C4E5DE0C((llvm::cl::Option *)&ScalePartialSampleProfileWorkingSetSize, "scale-partial-sample-profile-working-set-size", &v2, (_BYTE **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &ScalePartialSampleProfileWorkingSetSize, &dword_1C475E000);
  v4 = 1;
  v2 = 0x3F80624DD2F1A9FCLL;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"The scale factor used to scale the working set size of the partial sample profile a"
                                     "long with the partial profile ratio. This includes the factor of the profile counte"
                                     "r per block and the factor to scale the working set size to use the same shared thresholds as PGO.";
  v1.n128_u64[1] = 264;
  sub_1C61AD8A4(&v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4DB7184, &qword_1ED7F2ED8, &dword_1C475E000);
}

char *llvm::detail::PtrUseVisitorBase::enqueueUsers(char *this, llvm::Instruction *a2)
{
  uint64_t v2;
  uint64_t v3;
  llvm::SmallPtrSetImplBase *v4;
  const void **v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;

  v2 = *((_QWORD *)a2 + 1);
  if (v2)
  {
    v3 = (uint64_t)this;
    v4 = (llvm::SmallPtrSetImplBase *)(this + 232);
    v5 = (const void **)(this + 344);
    v6 = (uint64_t)(this + 24);
    do
    {
      this = (char *)sub_1C4774094(v4, v2);
      if (v7)
      {
        v9 = v2 & 0xFFFFFFFFFFFFFFFBLL | (4 * *(unsigned __int8 *)(v3 + 336));
        v11 = *(_DWORD *)(v3 + 352);
        if (v11 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v10, v5);
        else
          v10 = (char *)*v5;
        this = (char *)sub_1C4EF7440(v6, (unint64_t)&v9, 1);
        v8 = *(_QWORD *)(v3 + 24) + 24 * *(unsigned int *)(v3 + 32);
        *(_QWORD *)v8 = *(_QWORD *)this;
        *(_DWORD *)(v8 + 16) = *((_DWORD *)this + 4);
        *(_QWORD *)(v8 + 8) = *((_QWORD *)this + 1);
        *((_DWORD *)this + 4) = 0;
        ++*(_DWORD *)(v3 + 32);
        if (v11 >= 0x41)
        {
          this = v10;
          if (v10)
            this = (char *)MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
        }
      }
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2);
  }
  return this;
}

uint64_t llvm::detail::PtrUseVisitorBase::adjustOffsetForGEP(llvm::detail::PtrUseVisitorBase *this, llvm::GetElementPtrInst *a2)
{
  llvm::DataLayout *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BOOL4 v19;
  void *v20;
  unsigned int v21;
  void *__src;
  unsigned int IndexTypeSizeInBits;

  if (!*((_BYTE *)this + 336))
    return 0;
  v4 = *(llvm::DataLayout **)this;
  IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(*(_QWORD *)this, *(_QWORD *)a2);
  if (IndexTypeSizeInBits > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
    v4 = *(llvm::DataLayout **)this;
  }
  else
  {
    __src = 0;
  }
  v6 = llvm::GEPOperator::accumulateConstantOffset((uint64_t)a2, v4, (uint64_t)&__src, 0, v5);
  v7 = IndexTypeSizeInBits;
  if ((_DWORD)v6)
  {
    v8 = *((_DWORD *)this + 88);
    if (IndexTypeSizeInBits < v8)
    {
      llvm::APInt::sext((llvm::APInt *)&__src, v8, (llvm::APInt *)&v20);
    }
    else if (IndexTypeSizeInBits > v8)
    {
      llvm::APInt::trunc((llvm::APInt *)&__src, v8, (llvm::APInt *)&v20);
    }
    else
    {
      v21 = IndexTypeSizeInBits;
      if (IndexTypeSizeInBits > 0x40)
      {
        v20 = (void *)operator new[]();
        memcpy(v20, __src, (((unint64_t)v21 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v20 = __src;
      }
    }
    v9 = *((unsigned int *)this + 88);
    if (v9 >= 0x41)
    {
      v12 = 0;
      v13 = (unint64_t *)*((_QWORD *)this + 43);
      v14 = (uint64_t *)v20;
      v15 = (unint64_t)(v9 + 63) >> 6;
      v16 = v15;
      do
      {
        v17 = *v14++;
        v18 = v17 + *v13;
        v19 = v18 + 1 <= *v13;
        if (v12)
        {
          ++v18;
          v12 = v19;
        }
        else
        {
          v12 = v18 < *v13;
        }
        *v13++ = v18;
        --v16;
      }
      while (v16);
      *(_QWORD *)(*((_QWORD *)this + 43) + 8 * (v15 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
    }
    else
    {
      if ((_DWORD)v9)
        v10 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
      else
        v10 = 0;
      *((_QWORD *)this + 43) = v10 & ((unint64_t)v20 + *((_QWORD *)this + 43));
    }
    if (v21 >= 0x41 && v20)
      MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
    v7 = IndexTypeSizeInBits;
  }
  if (v7 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  return v6;
}

unint64_t sub_1C4EF7440(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 24 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C4EF74A8(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C4EF74A8(a1, v5);
    }
  }
  return a2;
}

void sub_1C4EF74A8(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 24, &v5);
  sub_1C4EF7514(a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

uint64_t sub_1C4EF7514(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    v3 = *(_QWORD *)result;
    v4 = *(_QWORD *)result + 24 * v2;
    do
    {
      *(_QWORD *)a2 = *(_QWORD *)v3;
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(v3 + 16);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(v3 + 8);
      *(_DWORD *)(v3 + 16) = 0;
      v3 += 24;
      a2 += 24;
    }
    while (v3 != v4);
    v5 = *(unsigned int *)(result + 8);
    if ((_DWORD)v5)
    {
      v6 = *(_QWORD *)result;
      v7 = 24 * v5;
      do
      {
        if (*(_DWORD *)(v6 + v7 - 8) >= 0x41u)
        {
          result = *(_QWORD *)(v6 + v7 - 16);
          if (result)
          {
            v8 = v7;
            v9 = v6;
            result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
            v7 = v8;
            v6 = v9;
          }
        }
        v7 -= 24;
      }
      while (v7);
    }
  }
  return result;
}

BOOL llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::verifyBBInRegion(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  _BOOL8 result;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  char *v25;
  uint64_t v26;

  v2 = (_QWORD *)a2;
  result = llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(a1, a2);
  if (!result)
  {
    v25 = "Broken region found: enumerated BB not in region!";
    goto LABEL_43;
  }
  v26 = *a1;
  v5 = (_QWORD *)v2[5];
  if (v5 != v2 + 5)
  {
    if (v5)
      v6 = v5 - 3;
    else
      v6 = 0;
    v7 = *((unsigned __int8 *)v6 + 16);
    v8 = v7 - 29;
    v9 = a1[4];
    if (v7 != 30)
    {
      v10 = 2;
      switch(v8)
      {
        case 1:
          __break(1u);
          goto LABEL_46;
        case 2:
          v10 = (*((_DWORD *)v6 + 5) >> 1) & 0x3FFFFFF;
          goto LABEL_40;
        case 3:
        case 9:
LABEL_46:
          v10 = (*((_DWORD *)v6 + 5) & 0x7FFFFFF) - 1;
          goto LABEL_40;
        case 4:
          goto LABEL_10;
        case 7:
          v10 = *((_WORD *)v6 + 9) & 1;
          goto LABEL_40;
        case 8:
          v10 = 1;
          goto LABEL_10;
        case 10:
          v10 = *((_DWORD *)v6 + 20) + 1;
LABEL_40:
          if (!v10)
            goto LABEL_18;
          goto LABEL_10;
        default:
          goto LABEL_18;
      }
    }
    if ((*((_DWORD *)v6 + 5) & 0x7FFFFFF) == 3)
      v10 = 2;
    else
      v10 = 1;
LABEL_10:
    v11 = 0;
    v12 = 0;
    v13 = v6 - 8;
    v14 = v10;
    while (1)
    {
      v15 = *((unsigned __int8 *)v6 + 16);
      if (v15 != 30)
        __asm { BR              X9 }
      v16 = v6[-4 * v12 - 4];
      result = llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(a1, v16);
      if (!result && v9 != v16)
        break;
      ++v12;
      v11 += 2;
      v13 += 4;
      if (v14 == v12)
        goto LABEL_18;
    }
    v25 = "Broken region found: edges leaving the region must go to the exit node!";
LABEL_43:
    llvm::report_fatal_error((llvm *)v25, (const char *)1);
  }
LABEL_18:
  if ((_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF8) != v2)
  {
    do
    {
      v2 = (_QWORD *)v2[1];
      if (!v2)
        return result;
      v17 = v2[3];
      v18 = *(unsigned __int8 *)(v17 + 16);
      if (v17)
        v19 = v18 >= 0x1C;
      else
        v19 = 0;
    }
    while (!v19 || v18 - 29 > 0xA);
    result = llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(a1, *(_QWORD *)(v17 + 40));
    if (!result)
    {
LABEL_37:
      v25 = "Broken region found: edges entering the region must go to the entry node!";
      goto LABEL_43;
    }
    while (1)
    {
      v2 = (_QWORD *)v2[1];
      if (!v2)
        break;
      v21 = v2[3];
      v22 = *(unsigned __int8 *)(v21 + 16);
      if (v21)
        v23 = v22 >= 0x1C;
      else
        v23 = 0;
      if (v23 && v22 - 29 <= 0xA)
      {
        result = llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(a1, *(_QWORD *)(v21 + 40));
        if (!result)
          goto LABEL_37;
      }
    }
  }
  return result;
}

{
  return __ZNK4llvm10RegionBaseINS_12RegionTraitsINS_8FunctionEEEE16verifyBBInRegionEPNS_10BasicBlockE(a1, a2);
}

BOOL llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  _BOOL8 result;

  v4 = a1[3];
  v5 = *(_QWORD *)(v4 + 24);
  v6 = *(unsigned int *)(v4 + 40);
  if (!(_DWORD)v6)
  {
LABEL_7:
    v8 = (uint64_t *)(v5 + 16 * v6);
    goto LABEL_8;
  }
  LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v8 = (uint64_t *)(v5 + 16 * v7);
  v9 = *v8;
  if (*v8 != a2)
  {
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v9 = *(_QWORD *)(v5 + 16 * v7);
      if (v9 == a2)
      {
        v8 = (uint64_t *)(v5 + 16 * v7);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v8 == (uint64_t *)(v5 + 16 * v6) || !v8[1])
    return 0;
  v12 = a1[4];
  if (!v12)
    return 1;
  v13 = *a1 & 0xFFFFFFFFFFFFFFF8;
  result = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v4, v13, a2);
  if (!result)
    return result;
  return !llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(a1[3], v12, a2)
      || !llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(a1[3], v13, v12);
}

{
  return llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(a1, *(_QWORD *)(a2 + 40));
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  BOOL v8;
  uint64_t v9;
  void *v11;
  uint64_t v12;
  _QWORD v13[9];

  v13[8] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return a1[4] == 0;
  if (!llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(a1, **(_QWORD **)(a2 + 32)))
    return 0;
  v11 = v13;
  v12 = 0x800000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks((_QWORD *)a2, (uint64_t)&v11);
  v4 = (uint64_t *)v11;
  if ((_DWORD)v12)
  {
    v5 = 8 * v12 - 8;
    do
    {
      v6 = *v4++;
      v7 = llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(a1, v6);
      v8 = !v7 || v5 == 0;
      v5 -= 8;
    }
    while (!v8);
    v9 = v7;
    v4 = (uint64_t *)v11;
  }
  else
  {
    v9 = 1;
  }
  if (v4 != v13)
    free(v4);
  return v9;
}

{
  return __ZNK4llvm10RegionBaseINS_12RegionTraitsINS_8FunctionEEEE8containsEPKNS_10BasicBlockE(a1, a2);
}

{
  return __ZNK4llvm10RegionBaseINS_12RegionTraitsINS_8FunctionEEEE8containsEPKNS_4LoopE(a1, a2);
}

unint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getEntry(_QWORD *a1)
{
  return *a1 & 0xFFFFFFFFFFFFFFF8;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getExit(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::begin(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

{
  return *(_QWORD *)(a1 + 40);
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::end(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

{
  return *(_QWORD *)(a1 + 48);
}

uint64_t *llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::RegionBase(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *result = a2 | 4;
  result[1] = a6;
  result[2] = a4;
  result[3] = a5;
  result[4] = a3;
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  result[10] = 0;
  result[9] = 0;
  result[8] = (uint64_t)(result + 9);
  return result;
}

{
  *result = a2 | 4;
  result[1] = a6;
  result[2] = a4;
  result[3] = a5;
  result[4] = a3;
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  result[10] = 0;
  result[9] = 0;
  result[8] = (uint64_t)(result + 9);
  return result;
}

unint64_t *llvm::RegionNodeBase<llvm::RegionTraits<llvm::Function>>::RegionNodeBase(unint64_t *result, unint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;

  v4 = 4;
  if (!a4)
    v4 = 0;
  *result = a3 & 0xFFFFFFFFFFFFFFFBLL | v4;
  result[1] = a2;
  return result;
}

{
  uint64_t v4;

  v4 = 4;
  if (!a4)
    v4 = 0;
  *result = a3 & 0xFFFFFFFFFFFFFFFBLL | v4;
  result[1] = a2;
  return result;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::~RegionBase(uint64_t a1)
{
  _QWORD *v2;
  void **v4;

  v2 = (_QWORD *)(a1 + 72);
  sub_1C61AF404(a1 + 64, *(_QWORD **)(a1 + 72));
  *(_QWORD *)(a1 + 64) = v2;
  *(_QWORD *)(a1 + 80) = 0;
  *v2 = 0;
  v4 = (void **)(a1 + 40);
  sub_1C4EFB84C(&v4);
  return a1;
}

{
  _QWORD *v2;
  void **v4;

  v2 = (_QWORD *)(a1 + 72);
  sub_1C61AF404(a1 + 64, *(_QWORD **)(a1 + 72));
  *(_QWORD *)(a1 + 64) = v2;
  *(_QWORD *)(a1 + 80) = 0;
  *v2 = 0;
  v4 = (void **)(a1 + 40);
  sub_1C4EFB84C(&v4);
  return a1;
}

unint64_t llvm::RegionNodeBase<llvm::RegionTraits<llvm::Function>>::getEntry(_QWORD *a1)
{
  return *a1 & 0xFFFFFFFFFFFFFFF8;
}

uint64_t *llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::replaceEntry(uint64_t *result, uint64_t a2)
{
  *result = *result & 7 | a2;
  return result;
}

void llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::replaceExitRecursive(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (char *)operator new(8uLL);
  *(_QWORD *)v4 = a1;
  v5 = v4 + 8;
  v6 = v4 + 8;
  do
  {
    v7 = (_QWORD *)*((_QWORD *)v6 - 1);
    v8 = v6 - 8;
    v7[4] = a2;
    v9 = (uint64_t *)v7[5];
    v10 = (uint64_t *)v7[6];
    if (v9 != v10)
    {
      while (1)
      {
        v11 = *v9;
        if (*(_QWORD *)(*v9 + 32) == v3)
        {
          if (v8 >= v5)
          {
            v12 = (v8 - v4) >> 3;
            v13 = v12 + 1;
            if ((unint64_t)(v12 + 1) >> 61)
              abort();
            if ((v5 - v4) >> 2 > v13)
              v13 = (v5 - v4) >> 2;
            if ((unint64_t)(v5 - v4) >= 0x7FFFFFFFFFFFFFF8)
              v14 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v14 = v13;
            if (v14)
            {
              if (v14 >> 61)
                sub_1C4764EE4();
              v15 = (char *)operator new(8 * v14);
            }
            else
            {
              v15 = 0;
            }
            v16 = &v15[8 * v12];
            *(_QWORD *)v16 = v11;
            v6 = v16 + 8;
            if (v8 != v4)
            {
              do
              {
                v17 = *((_QWORD *)v8 - 1);
                v8 -= 8;
                *((_QWORD *)v16 - 1) = v17;
                v16 -= 8;
              }
              while (v8 != v4);
              v8 = v4;
            }
            v4 = v16;
            v5 = &v15[8 * v14];
            if (v8)
              operator delete(v8);
            goto LABEL_7;
          }
          *(_QWORD *)v8 = v11;
          v8 += 8;
        }
        v6 = v8;
LABEL_7:
        ++v9;
        v8 = v6;
        if (v9 == v10)
          goto LABEL_25;
      }
    }
    v6 -= 8;
LABEL_25:
    ;
  }
  while (v4 != v6);
  if (v4)
    operator delete(v4);
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getParent(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t llvm::RegionNodeBase<llvm::RegionTraits<llvm::Function>>::getParent(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

BOOL llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::isTopLevelRegion(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32) == 0;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getExpandedRegion(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t result;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v26;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = a1[4];
  v3 = *(_QWORD *)(v2 + 40);
  if (v3 == v2 + 40)
  {
    v4 = 0;
  }
  else
  {
    if (v3)
      v4 = v3 - 24;
    else
      v4 = 0;
    if (*(unsigned __int8 *)(v4 + 16) - 29 >= 0xB)
      v4 = 0;
  }
  v5 = *(unsigned __int8 *)(v4 + 16);
  if (v5 != 30)
    __asm { BR              X12 }
  v6 = (uint64_t *)(a1[2] + 40);
  v41 = 0;
  v42 = v2;
  sub_1C61252B8(v6, &v42, &v41);
  v7 = *(_QWORD **)(v41 + 8);
  v8 = *v7 & 0xFFFFFFFFFFFFFFF8;
  v9 = a1[4];
  if (v9 == v8)
  {
    do
    {
      v15 = v7;
      v7 = (_QWORD *)v7[1];
    }
    while (v7 && v8 == (*v7 & 0xFFFFFFFFFFFFFFF8));
    v16 = *(_QWORD *)(v8 + 8);
    if (v16)
    {
      while (1)
      {
        v17 = *(_QWORD *)(v16 + 24);
        v18 = *(unsigned __int8 *)(v17 + 16);
        v19 = v17 && v18 >= 0x1C;
        if (v19 && v18 - 29 <= 0xA)
          break;
        v16 = *(_QWORD *)(v16 + 8);
        if (!v16)
          goto LABEL_34;
      }
LABEL_43:
      v26 = *(_QWORD *)(v17 + 40);
      if (!llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(a1, v26)
        && !llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(v15, v26))
      {
        return 0;
      }
      while (1)
      {
        v16 = *(_QWORD *)(v16 + 8);
        if (!v16)
          break;
        v17 = *(_QWORD *)(v16 + 24);
        v23 = *(unsigned __int8 *)(v17 + 16);
        if (v17)
          v24 = v23 >= 0x1C;
        else
          v24 = 0;
        if (v24 && v23 - 29 < 0xB)
          goto LABEL_43;
      }
    }
LABEL_34:
    result = operator new();
    v22 = v15[4];
    *(_QWORD *)result = *a1 & 0xFFFFFFFFFFFFFFF8 | 4;
    *(_QWORD *)(result + 8) = 0;
    *(_OWORD *)(result + 16) = *((_OWORD *)a1 + 1);
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 32) = v22;
    *(_QWORD *)(result + 40) = 0;
  }
  else
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      while (1)
      {
        v11 = *(_QWORD *)(v10 + 24);
        v12 = *(unsigned __int8 *)(v11 + 16);
        v13 = v11 && v12 >= 0x1C;
        if (v13 && v12 - 29 <= 0xA)
          break;
        v10 = *(_QWORD *)(v10 + 8);
        if (!v10)
          goto LABEL_59;
      }
      if (!llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(a1, *(_QWORD *)(v11 + 40)))
        return 0;
      while (1)
      {
        v10 = *(_QWORD *)(v10 + 8);
        if (!v10)
          break;
        v28 = *(_QWORD *)(v10 + 24);
        v29 = *(unsigned __int8 *)(v28 + 16);
        if (v28)
          v30 = v29 >= 0x1C;
        else
          v30 = 0;
        v31 = !v30 || v29 - 29 > 0xA;
        if (!v31 && !llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(a1, *(_QWORD *)(v28 + 40)))
          return 0;
      }
      v9 = a1[4];
    }
LABEL_59:
    v32 = *(_QWORD *)(v9 + 40);
    if (v32 == v9 + 40)
    {
      v33 = 0;
    }
    else
    {
      v33 = v32 - 24;
      if (!v32)
        v33 = 0;
      if (*(unsigned __int8 *)(v33 + 16) - 29 >= 0xB)
        v33 = 0;
    }
    v34 = *(unsigned __int8 *)(v33 + 16);
    if (v34 != 30)
      __asm { BR              X11 }
    if ((*(_DWORD *)(v33 + 20) & 0x7FFFFFF) == 3)
      return 0;
    result = operator new();
    v35 = a1[4];
    v36 = *(_QWORD *)(v35 + 40);
    if (v36 == v35 + 40)
    {
      v38 = 0;
    }
    else
    {
      if (v36)
        v37 = v36 - 24;
      else
        v37 = 0;
      if (*(unsigned __int8 *)(v37 + 16) - 29 >= 0xB)
        v38 = 0;
      else
        v38 = v37;
    }
    v39 = *(unsigned __int8 *)(v38 + 16);
    if (v39 != 30)
      __asm { BR              X12 }
    v40 = *(_QWORD *)(v38 - 32);
    *(_QWORD *)result = *a1 & 0xFFFFFFFFFFFFFFF8 | 4;
    *(_QWORD *)(result + 8) = 0;
    *(_OWORD *)(result + 16) = *((_OWORD *)a1 + 1);
    *(_QWORD *)(result + 32) = v40;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
  }
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 64) = result + 72;
  return result;
}

void sub_1C4EF7FF4()
{
  JUMPOUT(0x1C4EF7F94);
}

uint64_t *llvm::Region::Region(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *result = a2 | 4;
  result[1] = a6;
  result[2] = a4;
  result[3] = a5;
  result[4] = a3;
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  result[10] = 0;
  result[9] = 0;
  result[8] = (uint64_t)(result + 9);
  return result;
}

{
  *result = a2 | 4;
  result[1] = a6;
  result[2] = a4;
  result[3] = a5;
  result[4] = a3;
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  result[10] = 0;
  result[9] = 0;
  result[8] = (uint64_t)(result + 9);
  return result;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getEnteringBlock(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  BOOL v19;

  v1 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 8);
  if (!v1)
    return 0;
  while (1)
  {
    v3 = *(_QWORD *)(v1 + 24);
    v4 = *(unsigned __int8 *)(v3 + 16);
    v5 = v3 && v4 >= 0x1C;
    if (v5 && v4 - 29 < 0xB)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      return 0;
  }
  v9 = 0;
LABEL_13:
  v7 = *(_QWORD *)(v3 + 40);
  v10 = a1[3];
  v11 = *(_QWORD *)(v10 + 24);
  v12 = *(unsigned int *)(v10 + 40);
  if (!(_DWORD)v12)
    goto LABEL_19;
  LODWORD(v13) = ((v7 >> 4) ^ (v7 >> 9)) & (v12 - 1);
  v14 = (uint64_t *)(v11 + 16 * v13);
  v15 = *v14;
  if (v7 != *v14)
  {
    v16 = 1;
    while (v15 != -4096)
    {
      v17 = v13 + v16++;
      v13 = v17 & (v12 - 1);
      v15 = *(_QWORD *)(v11 + 16 * v13);
      if (v7 == v15)
      {
        v14 = (uint64_t *)(v11 + 16 * v13);
        goto LABEL_20;
      }
    }
LABEL_19:
    v14 = (uint64_t *)(v11 + 16 * v12);
  }
LABEL_20:
  if (v14 == (uint64_t *)(v11 + 16 * v12)
    || !v14[1]
    || llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(a1, v7))
  {
    v7 = v9;
    goto LABEL_24;
  }
  if (v9)
    return 0;
LABEL_24:
  while (1)
  {
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      return v7;
    v3 = *(_QWORD *)(v1 + 24);
    v18 = *(unsigned __int8 *)(v3 + 16);
    if (v3)
      v19 = v18 >= 0x1C;
    else
      v19 = 0;
    if (v19 && v18 - 29 < 0xB)
    {
      v9 = v7;
      goto LABEL_13;
    }
  }
}

{
  return __ZNK4llvm10RegionBaseINS_12RegionTraitsINS_8FunctionEEEE16getEnteringBlockEv(a1);
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getExitingBlock(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v8;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;

  v1 = a1[4];
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  while (1)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v5 = *(unsigned __int8 *)(v4 + 16);
    v6 = v4 && v5 >= 0x1C;
    if (v6 && v5 - 29 <= 0xA)
      break;
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
      return 0;
  }
  v10 = 0;
LABEL_14:
  v8 = *(_QWORD *)(v4 + 40);
  if (llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(a1, v8))
  {
    if (!v10)
      goto LABEL_18;
    return 0;
  }
  v8 = v10;
LABEL_18:
  while (1)
  {
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
      return v8;
    v4 = *(_QWORD *)(v2 + 24);
    v11 = *(unsigned __int8 *)(v4 + 16);
    if (v4)
      v12 = v11 >= 0x1C;
    else
      v12 = 0;
    if (v12 && v11 - 29 < 0xB)
    {
      v10 = v8;
      goto LABEL_14;
    }
  }
}

{
  return __ZNK4llvm10RegionBaseINS_12RegionTraitsINS_8FunctionEEEE15getExitingBlockEv(a1);
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getExitingBlocks(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  char v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  BOOL v15;

  v2 = a1[4];
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
  {
    while (1)
    {
      v6 = *(_QWORD *)(v3 + 24);
      v7 = *(unsigned __int8 *)(v6 + 16);
      v8 = v6 && v7 >= 0x1C;
      if (v8 && v7 - 29 < 0xB)
        break;
      v3 = *(_QWORD *)(v3 + 8);
      if (!v3)
        goto LABEL_12;
    }
    v11 = 1;
LABEL_14:
    v12 = *(_QWORD *)(v6 + 40);
    if (llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(a1, v12))
    {
      v13 = *(unsigned int *)(a2 + 8);
      if (v13 >= *(unsigned int *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v13 + 1, 8);
        v13 = *(unsigned int *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v13) = v12;
      ++*(_DWORD *)(a2 + 8);
    }
    else
    {
      v11 = 0;
    }
    while (1)
    {
      v3 = *(_QWORD *)(v3 + 8);
      if (!v3)
        break;
      v6 = *(_QWORD *)(v3 + 24);
      v14 = *(unsigned __int8 *)(v6 + 16);
      if (v6)
        v15 = v14 >= 0x1C;
      else
        v15 = 0;
      if (v15 && v14 - 29 < 0xB)
        goto LABEL_14;
    }
  }
  else
  {
LABEL_12:
    v11 = 1;
  }
  return v11 & 1;
}

void llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getNameStr(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  llvm::Value *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Value *v11;
  int v12;
  int v13;
  uint64_t v14;
  llvm::Value **v15;
  llvm::Value *v16;
  int v17;
  int v18;
  unint64_t *v19;
  std::string::size_type v20;
  const void *v21;
  unint64_t v22;
  std::string *p_dst;
  uint64_t v24;
  uint64_t v25;
  llvm::Value *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  llvm::Value *v33;
  int v34;
  int v35;
  uint64_t v36;
  llvm::Value **v37;
  llvm::Value *v38;
  int v39;
  int v40;
  unint64_t *v41;
  std::string::size_type v42;
  const void *v43;
  unint64_t v44;
  std::string *v45;
  uint64_t v46;
  uint64_t v47;
  size_t size;
  std::string *v49;
  std::string *v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  std::string __dst;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  int v59;
  std::string *p_p;
  std::string __p;
  std::string v62;

  memset(&v62, 0, sizeof(v62));
  memset(&__p, 0, sizeof(__p));
  v4 = (llvm::Value *)(*a1 & 0xFFFFFFFFFFFFFFF8);
  if ((*((_BYTE *)v4 + 23) & 0x10) == 0)
    goto LABEL_84;
  v5 = ***(_QWORD ***)v4;
  v6 = *(_QWORD *)(v5 + 152);
  v7 = *(unsigned int *)(v5 + 168);
  v8 = v4 >> 4;
  if (!(_DWORD)v7)
    goto LABEL_10;
  LODWORD(v9) = (v7 - 1) & (v8 ^ (v4 >> 9));
  v10 = v6 + 16 * v9;
  v11 = *(llvm::Value **)v10;
  if (*(llvm::Value **)v10 != v4)
  {
    v12 = 1;
    while (v11 != (llvm::Value *)-4096)
    {
      v13 = v9 + v12++;
      v9 = v13 & (v7 - 1);
      v11 = *(llvm::Value **)(v6 + 16 * v9);
      if (v11 == v4)
        goto LABEL_11;
    }
LABEL_10:
    v9 = v7;
LABEL_11:
    if (**(_QWORD **)(v6 + 16 * v9 + 8))
    {
      if (!(_DWORD)v7)
        goto LABEL_18;
      goto LABEL_13;
    }
    goto LABEL_84;
  }
  if (**(_QWORD **)(v10 + 8))
  {
LABEL_13:
    LODWORD(v14) = (v7 - 1) & (v8 ^ (v4 >> 9));
    v15 = (llvm::Value **)(v6 + 16 * v14);
    v16 = *v15;
    if (*v15 == v4)
      goto LABEL_19;
    v17 = 1;
    while (v16 != (llvm::Value *)-4096)
    {
      v18 = v14 + v17++;
      v14 = v18 & (v7 - 1);
      v16 = *(llvm::Value **)(v6 + 16 * v14);
      if (v16 == v4)
      {
        v15 = (llvm::Value **)(v6 + 16 * v14);
        goto LABEL_19;
      }
    }
LABEL_18:
    v15 = (llvm::Value **)(v6 + 16 * v7);
LABEL_19:
    v19 = (unint64_t *)v15[1];
    v22 = *v19;
    v21 = v19 + 2;
    v20 = v22;
    if (v22 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_90;
    if (v20 >= 0x17)
    {
      v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v24 = v20 | 7;
      v25 = v24 + 1;
      p_dst = (std::string *)operator new(v24 + 1);
      __dst.__r_.__value_.__l.__size_ = v20;
      __dst.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v20;
      p_dst = &__dst;
      if (!v20)
        goto LABEL_27;
    }
    memmove(p_dst, v21, v20);
LABEL_27:
    p_dst->__r_.__value_.__s.__data_[v20] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __dst;
    goto LABEL_30;
  }
LABEL_84:
  LODWORD(__dst.__r_.__value_.__r.__words[1]) = 0;
  v57 = 0;
  v58 = 0;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
  p_p = &__p;
  v59 = 0;
  v55 = 0;
  v56 = 0;
  __dst.__r_.__value_.__r.__words[2] = 0;
  llvm::Value::printAsOperand(v4, (llvm::raw_ostream *)&__dst, 0, 0);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
  if (v59 == 1 && __dst.__r_.__value_.__r.__words[2])
    MEMORY[0x1CAA32F9C](__dst.__r_.__value_.__r.__words[2], 0x1000C8077774924);
LABEL_30:
  v26 = (llvm::Value *)a1[4];
  if (!v26)
  {
    MEMORY[0x1CAA32ABC](&v62, "<Function Return>");
    goto LABEL_61;
  }
  if ((*((_BYTE *)v26 + 23) & 0x10) == 0)
    goto LABEL_87;
  v27 = ***(_QWORD ***)v26;
  v28 = *(_QWORD *)(v27 + 152);
  v29 = *(unsigned int *)(v27 + 168);
  v30 = v26 >> 4;
  if (!(_DWORD)v29)
    goto LABEL_41;
  LODWORD(v31) = (v29 - 1) & (v30 ^ (v26 >> 9));
  v32 = v28 + 16 * v31;
  v33 = *(llvm::Value **)v32;
  if (*(llvm::Value **)v32 != v26)
  {
    v34 = 1;
    while (v33 != (llvm::Value *)-4096)
    {
      v35 = v31 + v34++;
      v31 = v35 & (v29 - 1);
      v33 = *(llvm::Value **)(v28 + 16 * v31);
      if (v33 == v26)
        goto LABEL_42;
    }
LABEL_41:
    v31 = v29;
LABEL_42:
    if (**(_QWORD **)(v28 + 16 * v31 + 8))
    {
      if (!(_DWORD)v29)
        goto LABEL_49;
      goto LABEL_44;
    }
    goto LABEL_87;
  }
  if (**(_QWORD **)(v32 + 8))
  {
LABEL_44:
    LODWORD(v36) = (v29 - 1) & (v30 ^ (v26 >> 9));
    v37 = (llvm::Value **)(v28 + 16 * v36);
    v38 = *v37;
    if (*v37 == v26)
      goto LABEL_50;
    v39 = 1;
    while (v38 != (llvm::Value *)-4096)
    {
      v40 = v36 + v39++;
      v36 = v40 & (v29 - 1);
      v38 = *(llvm::Value **)(v28 + 16 * v36);
      if (v38 == v26)
      {
        v37 = (llvm::Value **)(v28 + 16 * v36);
        goto LABEL_50;
      }
    }
LABEL_49:
    v37 = (llvm::Value **)(v28 + 16 * v29);
LABEL_50:
    v41 = (unint64_t *)v37[1];
    v44 = *v41;
    v43 = v41 + 2;
    v42 = v44;
    if (v44 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v42 >= 0x17)
      {
        v46 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v42 | 7) != 0x17)
          v46 = v42 | 7;
        v47 = v46 + 1;
        v45 = (std::string *)operator new(v46 + 1);
        __dst.__r_.__value_.__l.__size_ = v42;
        __dst.__r_.__value_.__r.__words[2] = v47 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v42;
        v45 = &__dst;
        if (!v42)
          goto LABEL_58;
      }
      memmove(v45, v43, v42);
LABEL_58:
      v45->__r_.__value_.__s.__data_[v42] = 0;
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      v62 = __dst;
      goto LABEL_61;
    }
LABEL_90:
    abort();
  }
LABEL_87:
  LODWORD(__dst.__r_.__value_.__r.__words[1]) = 0;
  v57 = 0;
  v58 = 0;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
  p_p = &v62;
  v59 = 0;
  v55 = 0;
  v56 = 0;
  __dst.__r_.__value_.__r.__words[2] = 0;
  llvm::Value::printAsOperand(v26, (llvm::raw_ostream *)&__dst, 0, 0);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
  if (v59 == 1 && __dst.__r_.__value_.__r.__words[2])
    MEMORY[0x1CAA32F9C](__dst.__r_.__value_.__r.__words[2], 0x1000C8077774924);
LABEL_61:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v49 = &__dst;
  sub_1C484371C((uint64_t)&__dst, size + 4);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v49 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if (size)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v50 = &__p;
    else
      v50 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(v49, v50, size);
  }
  strcpy((char *)v49 + size, " => ");
  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v51 = &v62;
  else
    v51 = (std::string *)v62.__r_.__value_.__r.__words[0];
  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = *((_BYTE *)&v62.__r_.__value_.__s + 23) & 0x7F;
  else
    v52 = v62.__r_.__value_.__l.__size_;
  v53 = std::string::append(&__dst, (const std::string::value_type *)v51, v52);
  *a2 = *v53;
  v53->__r_.__value_.__r.__words[0] = 0;
  v53->__r_.__value_.__l.__size_ = 0;
  v53->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
}

{
  __ZNK4llvm10RegionBaseINS_12RegionTraitsINS_8FunctionEEEE10getNameStrEv(a1, a2);
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getRegionInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::print(_QWORD *a1, llvm::raw_ostream *a2, int a3, unsigned int a4, uint64_t a5)
{
  unsigned int v10;
  _BYTE *v11;
  _WORD *v12;
  std::string *p_p;
  size_t size;
  _BYTE *v15;
  _WORD *v16;
  _BYTE *v17;
  const void *v18;
  std::string::size_type v19;
  int v20;
  unsigned int v21;
  _BYTE *v22;
  const void *v23;
  void *v24;
  unsigned int v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  int v41;
  std::string *v42;
  size_t v43;
  size_t *v44;
  const void *v45;
  size_t v46;
  size_t v47;
  void *v48;
  _WORD *v49;
  _BYTE *v50;
  const void *v51;
  std::string::size_type v52;
  int v53;
  unsigned int v54;
  _BYTE *v55;
  const void *v56;
  void *v57;
  unsigned int v58;
  char *v59;
  char *v60;
  char *v61;
  int v62;
  BOOL v63;
  uint64_t ***v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t ****v69;
  uint64_t ***v70;
  int v71;
  int v72;
  uint64_t ***v73;
  const char *v74;
  size_t v75;
  size_t v76;
  _WORD *v77;
  _BYTE *v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  _BYTE *v88;
  _BYTE v89[64];
  char *v90;
  _BYTE *v91;
  uint64_t v92;
  _BYTE *v93;
  _BYTE *v94;
  int v95;
  int v96;
  int v97;
  _BYTE v98[64];
  void *v99;
  char *v100;
  uint64_t v101;
  std::string __p;
  int v103;
  void *v104;
  _BYTE *v105;
  void *v106;
  void *v107;
  unsigned int v108;
  unsigned int v109;
  void *v110;
  _BYTE *v111;
  std::string v112;

  v10 = 2 * a4;
  llvm::raw_ostream::indent(a2, 2 * a4);
  if (a3)
  {
    v11 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v11 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 91);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v11 + 1;
      *v11 = 91;
    }
    sub_1C5E21910(a2, a4, 0, 0, 0);
    v12 = (_WORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v12 > 1uLL)
    {
      *v12 = 8285;
      *((_QWORD *)a2 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a2, "] ", 2uLL);
    }
  }
  llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getNameStr(a1, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(a2, (const char *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v15 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v15 >= *((_QWORD *)a2 + 3))
  {
    llvm::raw_ostream::write(a2, 10);
    if (!(_DWORD)a5)
      goto LABEL_144;
  }
  else
  {
    *((_QWORD *)a2 + 4) = v15 + 1;
    *v15 = 10;
    if (!(_DWORD)a5)
    {
LABEL_144:
      if (a3)
        goto LABEL_147;
      goto LABEL_150;
    }
  }
  llvm::raw_ostream::indent(a2, v10);
  v16 = (_WORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v16 > 1uLL)
  {
    *v16 = 2683;
    *((_QWORD *)a2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a2, "{\n", 2uLL);
  }
  llvm::raw_ostream::indent(a2, v10 + 2);
  if ((_DWORD)a5 != 1)
  {
    if ((_DWORD)a5 != 2)
      goto LABEL_142;
    llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::elements(a1, &__p);
    v17 = v98;
    v93 = v98;
    v18 = (const void *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
    {
      v94 = v98;
      v19 = __p.__r_.__value_.__l.__size_;
    }
    else
    {
      v86 = __p.__r_.__value_.__r.__words[2];
      v17 = malloc_type_malloc(8 * LODWORD(__p.__r_.__value_.__r.__words[2]), 0x4065EBACuLL);
      if (!v17)
      {
        if (v86)
          goto LABEL_176;
        v17 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v17)
          goto LABEL_176;
      }
      v94 = v17;
      v18 = (const void *)__p.__r_.__value_.__l.__size_;
      v19 = __p.__r_.__value_.__r.__words[0];
    }
    v20 = HIDWORD(__p.__r_.__value_.__r.__words[2]);
    v95 = __p.__r_.__value_.__r.__words[2];
    if (v18 == (const void *)v19)
      v21 = HIDWORD(__p.__r_.__value_.__r.__words[2]);
    else
      v21 = __p.__r_.__value_.__r.__words[2];
    if (v21)
    {
      memmove(v17, v18, 8 * v21);
      v20 = HIDWORD(__p.__r_.__value_.__r.__words[2]);
    }
    v96 = v20;
    v97 = v103;
    v100 = 0;
    v101 = 0;
    v99 = 0;
    sub_1C4EFB920(&v99, v104, v105, 0xCCCCCCCCCCCCCCCDLL * ((v105 - (_BYTE *)v104) >> 3));
    v22 = v89;
    v23 = v107;
    if (v107 == v106)
    {
      v88 = v89;
      v24 = v107;
LABEL_32:
      if (v23 == v24)
        v25 = v109;
      else
        v25 = v108;
      if (v25)
        memmove(v22, v23, 8 * v25);
      v91 = 0;
      v92 = 0;
      v90 = 0;
      sub_1C4EFB920(&v90, v110, v111, 0xCCCCCCCCCCCCCCCDLL * ((v111 - (_BYTE *)v110) >> 3));
      while (1)
      {
        v26 = (char *)v99;
        v27 = v90;
        if (v100 - (_BYTE *)v99 == v91 - v90)
        {
          if (v99 == v100)
            goto LABEL_126;
          v28 = v90;
          while (*(_QWORD *)v26 == *(_QWORD *)v28)
          {
            v29 = v28[32];
            if (v26[32])
              v30 = v29 == 0;
            else
              v30 = 1;
            if (v30)
            {
              if ((v26[32] == 0) == (v29 != 0))
                break;
            }
            else
            {
              v31 = *((_QWORD *)v26 + 1);
              if ((v31 & 6) != 0)
              {
                if (((*((_DWORD *)v28 + 2) ^ v31) & 6) != 0)
                  break;
              }
              else if (*((_DWORD *)v26 + 6) != *((_DWORD *)v28 + 6))
              {
                break;
              }
            }
            v26 += 40;
            v28 += 40;
            if (v26 == v100)
              goto LABEL_126;
          }
        }
        v32 = (_QWORD *)*((_QWORD *)v100 - 5);
        if ((*v32 & 4) == 0)
          break;
        llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getNameStr(v32, &v112);
        if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v42 = &v112;
        else
          v42 = (std::string *)v112.__r_.__value_.__r.__words[0];
        if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v43 = *((_BYTE *)&v112.__r_.__value_.__s + 23) & 0x7F;
        else
          v43 = v112.__r_.__value_.__l.__size_;
        llvm::raw_ostream::write(a2, (const char *)v42, v43);
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v112.__r_.__value_.__l.__data_);
LABEL_76:
        v49 = (_WORD *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v49 > 1uLL)
        {
          *v49 = 8236;
          *((_QWORD *)a2 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(a2, ", ", 2uLL);
        }
        sub_1C4EFB9D0((llvm::SmallPtrSetImplBase *)&v93);
      }
      v33 = *v32 & 0xFFFFFFFFFFFFFFF8;
      if ((*(_BYTE *)(v33 + 23) & 0x10) == 0)
        goto LABEL_76;
      v34 = ***(_QWORD ***)v33;
      v35 = *(_QWORD *)(v34 + 152);
      v36 = *(unsigned int *)(v34 + 168);
      if ((_DWORD)v36)
      {
        LODWORD(v37) = (v36 - 1) & ((v33 >> 4) ^ (v33 >> 9));
        v38 = (uint64_t *)(v35 + 16 * v37);
        v39 = *v38;
        if (*v38 == v33)
          goto LABEL_72;
        v40 = 1;
        while (v39 != -4096)
        {
          v41 = v37 + v40++;
          v37 = v41 & (v36 - 1);
          v39 = *(_QWORD *)(v35 + 16 * v37);
          if (v39 == v33)
          {
            v38 = (uint64_t *)(v35 + 16 * v37);
            goto LABEL_72;
          }
        }
      }
      v38 = (uint64_t *)(v35 + 16 * v36);
LABEL_72:
      v44 = (size_t *)v38[1];
      v47 = *v44;
      v45 = v44 + 2;
      v46 = v47;
      v48 = (void *)*((_QWORD *)a2 + 4);
      if (v47 <= *((_QWORD *)a2 + 3) - (_QWORD)v48)
      {
        if (v46)
        {
          memcpy(v48, v45, v46);
          *((_QWORD *)a2 + 4) += v46;
        }
      }
      else
      {
        llvm::raw_ostream::write(a2, (const char *)v45, v46);
      }
      goto LABEL_76;
    }
    v87 = v108;
    v22 = malloc_type_malloc(8 * v108, 0x4065EBACuLL);
    if (v22 || !v87 && (v22 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v88 = v22;
      v24 = v106;
      v23 = v107;
      goto LABEL_32;
    }
LABEL_176:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::blocks(a1, &__p);
  v50 = v98;
  v93 = v98;
  v51 = (const void *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
  {
    v94 = v98;
    v52 = __p.__r_.__value_.__l.__size_;
  }
  else
  {
    v84 = __p.__r_.__value_.__r.__words[2];
    v50 = malloc_type_malloc(8 * LODWORD(__p.__r_.__value_.__r.__words[2]), 0x4065EBACuLL);
    if (!v50)
    {
      if (v84)
        goto LABEL_176;
      v50 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v50)
        goto LABEL_176;
    }
    v94 = v50;
    v51 = (const void *)__p.__r_.__value_.__l.__size_;
    v52 = __p.__r_.__value_.__r.__words[0];
  }
  v53 = HIDWORD(__p.__r_.__value_.__r.__words[2]);
  v95 = __p.__r_.__value_.__r.__words[2];
  if (v51 == (const void *)v52)
    v54 = HIDWORD(__p.__r_.__value_.__r.__words[2]);
  else
    v54 = __p.__r_.__value_.__r.__words[2];
  if (v54)
  {
    memmove(v50, v51, 8 * v54);
    v53 = HIDWORD(__p.__r_.__value_.__r.__words[2]);
  }
  v96 = v53;
  v97 = v103;
  v100 = 0;
  v101 = 0;
  v99 = 0;
  sub_1C4E19D7C(&v99, v104, v105, (v105 - (_BYTE *)v104) >> 5);
  v55 = v89;
  v56 = v107;
  if (v107 == v106)
  {
    v88 = v89;
    v57 = v107;
  }
  else
  {
    v85 = v108;
    v55 = malloc_type_malloc(8 * v108, 0x4065EBACuLL);
    if (!v55)
    {
      if (v85)
        goto LABEL_176;
      v55 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v55)
        goto LABEL_176;
    }
    v88 = v55;
    v57 = v106;
    v56 = v107;
  }
  if (v56 == v57)
    v58 = v109;
  else
    v58 = v108;
  if (v58)
    memmove(v55, v56, 8 * v58);
  v91 = 0;
  v92 = 0;
  v90 = 0;
  sub_1C4E19D7C(&v90, v110, v111, (v111 - (_BYTE *)v110) >> 5);
  while (1)
  {
    v27 = v90;
    if (v100 - (_BYTE *)v99 != v91 - v90)
      goto LABEL_109;
    if (v99 == v100)
      break;
    v59 = v90 + 16;
    v60 = (char *)v99 + 16;
    while (1)
    {
      v61 = v60 - 16;
      if (*((_QWORD *)v60 - 2) != *((_QWORD *)v59 - 2))
        break;
      v62 = v59[8];
      if (v60[8])
        v63 = v62 == 0;
      else
        v63 = 1;
      if (v63)
      {
        if ((v60[8] == 0) == (v62 != 0))
          break;
      }
      else if (*(_DWORD *)v60 != *(_DWORD *)v59)
      {
        break;
      }
      v59 += 32;
      v60 += 32;
      if (v61 + 32 == v100)
        goto LABEL_126;
    }
LABEL_109:
    v64 = (uint64_t ***)*((_QWORD *)v100 - 4);
    if ((*((_BYTE *)v64 + 23) & 0x10) == 0)
      goto LABEL_119;
    v65 = ***v64;
    v66 = *(_QWORD *)(v65 + 152);
    v67 = *(unsigned int *)(v65 + 168);
    if ((_DWORD)v67)
    {
      LODWORD(v68) = (v67 - 1) & ((v64 >> 4) ^ (v64 >> 9));
      v69 = (uint64_t ****)(v66 + 16 * v68);
      v70 = *v69;
      if (*v69 == v64)
        goto LABEL_117;
      v71 = 1;
      while (v70 != (uint64_t ***)-4096)
      {
        v72 = v68 + v71++;
        v68 = v72 & (v67 - 1);
        v70 = *(uint64_t ****)(v66 + 16 * v68);
        if (v70 == v64)
        {
          v69 = (uint64_t ****)(v66 + 16 * v68);
          goto LABEL_117;
        }
      }
    }
    v69 = (uint64_t ****)(v66 + 16 * v67);
LABEL_117:
    v73 = v69[1];
    v76 = (size_t)*v73;
    v74 = (const char *)(v73 + 2);
    v75 = v76;
    v77 = (_WORD *)*((_QWORD *)a2 + 4);
    if (v76 > *((_QWORD *)a2 + 3) - (_QWORD)v77)
    {
      llvm::raw_ostream::write(a2, v74, v75);
LABEL_119:
      v77 = (_WORD *)*((_QWORD *)a2 + 4);
      goto LABEL_122;
    }
    if (v75)
    {
      memcpy(v77, v74, v75);
      v77 = (_WORD *)(*((_QWORD *)a2 + 4) + v75);
      *((_QWORD *)a2 + 4) = v77;
    }
LABEL_122:
    if (*((_QWORD *)a2 + 3) - (_QWORD)v77 > 1uLL)
    {
      *v77 = 8236;
      *((_QWORD *)a2 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a2, ", ", 2uLL);
    }
    sub_1C61AF464((void **)&v93);
  }
LABEL_126:
  if (v27)
  {
    v91 = v27;
    operator delete(v27);
  }
  if (v88 != v89)
    free(v88);
  if (v99)
  {
    v100 = (char *)v99;
    operator delete(v99);
  }
  if (v94 != v93)
    free(v94);
  if (v110)
  {
    v111 = v110;
    operator delete(v110);
  }
  if (v107 != v106)
    free(v107);
  if (v104)
  {
    v105 = v104;
    operator delete(v104);
  }
  if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    free((void *)__p.__r_.__value_.__l.__size_);
LABEL_142:
  v78 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v78 < *((_QWORD *)a2 + 3))
  {
    *((_QWORD *)a2 + 4) = v78 + 1;
    *v78 = 10;
    goto LABEL_144;
  }
  llvm::raw_ostream::write(a2, 10);
  if (a3)
  {
LABEL_147:
    v80 = (uint64_t *)a1[5];
    v79 = (uint64_t *)a1[6];
    if (v80 != v79)
    {
      v81 = a4 + 1;
      do
      {
        v82 = *v80++;
        llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::print(v82, a2, 1, v81, a5);
      }
      while (v80 != v79);
    }
  }
LABEL_150:
  if ((_DWORD)a5)
  {
    llvm::raw_ostream::indent(a2, v10);
    v83 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v83) > 2)
    {
      *(_BYTE *)(v83 + 2) = 10;
      *(_WORD *)v83 = 8317;
      *((_QWORD *)a2 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(a2, "} \n", 3uLL);
    }
  }
}

{
  __ZNK4llvm10RegionBaseINS_12RegionTraitsINS_8FunctionEEEE5printERNS_11raw_ostreamEbjNS4_10PrintStyleE(a1, a2, a3, a4, a5);
}

void llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::blocks(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  int v6;
  _BYTE v7[64];
  void *__p;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  sub_1C4EFC5A8((uint64_t)&v11, *a1 & 0xFFFFFFFFFFFFFFF8, a1[4]);
  v3 = v7;
  v4 = v7;
  v5 = 8;
  v6 = 0;
  v9 = 0;
  v10 = 0;
  __p = 0;
  sub_1C6187DA4(a2, (uint64_t)&v11, (uint64_t)&v3);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  if (v4 != v3)
    free(v4);
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  if (v12 != v11)
    free(v12);
}

{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  int v6;
  _BYTE v7[64];
  void *__p;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  sub_1C4EFC3CC((uint64_t)&v11, *a1 & 0xFFFFFFFFFFFFFFF8, a1[4]);
  v3 = v7;
  v4 = v7;
  v5 = 8;
  v6 = 0;
  v9 = 0;
  v10 = 0;
  __p = 0;
  sub_1C6187DA4(a2, (uint64_t)&v11, (uint64_t)&v3);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  if (v4 != v3)
    free(v4);
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  if (v12 != v11)
    free(v12);
}

{
  __ZN4llvm10RegionBaseINS_12RegionTraitsINS_8FunctionEEEE6blocksEv(a1, a2);
}

{
  __ZNK4llvm10RegionBaseINS_12RegionTraitsINS_8FunctionEEEE6blocksEv(a1, a2);
}

void llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::dump(llvm *a1)
{
  unsigned int v2;
  llvm *v3;
  llvm *v4;

  v2 = -1;
  v3 = llvm::dbgs(a1);
  v4 = a1;
  do
  {
    v4 = (llvm *)*((_QWORD *)v4 + 1);
    ++v2;
  }
  while (v4);
  llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::print(a1, v3, 1, v2, llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::printStyle);
}

uint64_t *llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::outermostLoopInRegion(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  _BOOL4 v4;
  uint64_t *result;

  v2 = (uint64_t *)a2;
  v4 = llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(a1, a2);
  result = 0;
  if (v2 && v4)
  {
    while (llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(a1, *v2))
    {
      v2 = (uint64_t *)*v2;
      if (!v2)
        return 0;
    }
    return v2;
  }
  return result;
}

uint64_t *llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::outermostLoopInRegion(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t *v11;
  _BOOL4 v12;

  v3 = *((_DWORD *)a2 + 4);
  if (!v3)
    return 0;
  v5 = *a2;
  v6 = v3 - 1;
  v7 = (v3 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v8 = *(_QWORD *)(*a2 + 16 * v7);
  if (v8 != a3)
  {
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v7 + v9++;
      v7 = v10 & v6;
      v8 = *(_QWORD *)(v5 + 16 * v7);
      if (v8 == a3)
        goto LABEL_6;
    }
    return 0;
  }
LABEL_6:
  v11 = *(uint64_t **)(v5 + 16 * v7 + 8);
  v12 = llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(a1, (uint64_t)v11);
  if (!v11 || !v12)
    return 0;
  do
  {
    if (!llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(a1, *v11))
      break;
    v11 = (uint64_t *)*v11;
  }
  while (v11);
  return v11;
}

_QWORD *llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getSubRegionNode(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (uint64_t *)(a1[2] + 40);
  v9 = 0;
  v10 = a2;
  if ((sub_1C61252B8(v4, &v10, &v9) & 1) == 0)
    return 0;
  v5 = *(_QWORD **)(v9 + 8);
  if (!v5 || v5 == a1)
    return 0;
  do
  {
    v8 = v5;
    if (!llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(a1, (_QWORD *)v5[1]))
      break;
    v5 = (_QWORD *)v8[1];
  }
  while (v5 != a1);
  if ((*v8 & 0xFFFFFFFFFFFFFFF8) == a2)
    return v8;
  else
    return 0;
}

{
  return __ZNK4llvm10RegionBaseINS_12RegionTraitsINS_8FunctionEEEE16getSubRegionNodeEPNS_10BasicBlockE(a1, a2);
}

uint64_t *llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getNode(_QWORD *a1, unint64_t a2)
{
  uint64_t *result;

  result = llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getSubRegionNode(a1, a2);
  if (!result)
    return llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getBBNode((uint64_t)a1, a2);
  return result;
}

{
  return __ZNK4llvm10RegionBaseINS_12RegionTraitsINS_8FunctionEEEE7getNodeEPNS_10BasicBlockE(a1, a2);
}

void llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::addSubRegion(_QWORD *a1, uint64_t **a2, int a3)
{
  uint64_t **v6;
  uint64_t ***v7;
  uint64_t *v8;
  void **v9;
  const void *v10;
  void *v11;
  int v12;
  unsigned int v13;
  _BYTE *v14;
  const void *v15;
  void *v16;
  unsigned int v17;
  char *v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t *v54;
  char *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t *v70;
  char *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  int v77;
  unsigned int v78;
  _BYTE *v79;
  _BYTE v80[64];
  _BYTE *v81;
  _BYTE *v82;
  uint64_t v83;
  void **v84;
  void **v85;
  int v86;
  int v87;
  int v88;
  _BYTE v89[64];
  void *__p;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  int v96;
  void *v97;
  _BYTE *v98;
  void *v99;
  void *v100;
  unsigned int v101;
  unsigned int v102;
  void *v103;
  _BYTE *v104;
  unint64_t v105;

  a2[1] = a1;
  v6 = (uint64_t **)(a1 + 5);
  v93 = (char *)a2;
  v7 = (uint64_t ***)a1[6];
  if ((unint64_t)v7 >= a1[7])
  {
    v8 = sub_1C4EFBEFC(v6, (uint64_t *)&v93);
  }
  else
  {
    v93 = 0;
    *v7 = a2;
    v8 = (uint64_t *)(v7 + 1);
  }
  a1[6] = v8;
  sub_1C4EFBE80((uint64_t *)&v93, 0);
  if (!a3)
    return;
  llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::elements(a1, &v93);
  v9 = (void **)v89;
  v84 = (void **)v89;
  v10 = v94;
  if (v94 == v93)
  {
    v85 = (void **)v89;
    v11 = v94;
  }
  else
  {
    v77 = (int)v95;
    v9 = (void **)malloc_type_malloc(8 * v95, 0x4065EBACuLL);
    if (!v9)
    {
      if (v77)
        goto LABEL_145;
      v9 = (void **)malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v9)
        goto LABEL_145;
    }
    v85 = v9;
    v11 = v93;
    v10 = v94;
  }
  v12 = HIDWORD(v95);
  v86 = (int)v95;
  if (v10 == v11)
    v13 = HIDWORD(v95);
  else
    v13 = v95;
  if (v13)
  {
    memmove(v9, v10, 8 * v13);
    v12 = HIDWORD(v95);
  }
  v87 = v12;
  v88 = v96;
  v91 = 0;
  v92 = 0;
  __p = 0;
  sub_1C4EFB920(&__p, v97, v98, 0xCCCCCCCCCCCCCCCDLL * ((v98 - (_BYTE *)v97) >> 3));
  v14 = v80;
  v15 = v100;
  if (v100 != v99)
  {
    v78 = v101;
    v14 = malloc_type_malloc(8 * v101, 0x4065EBACuLL);
    if (v14 || !v78 && (v14 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v79 = v14;
      v16 = v99;
      v15 = v100;
      goto LABEL_14;
    }
LABEL_145:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v79 = v80;
  v16 = v100;
LABEL_14:
  if (v15 == v16)
    v17 = v102;
  else
    v17 = v101;
  if (v17)
    memmove(v14, v15, 8 * v17);
  v82 = 0;
  v83 = 0;
  v81 = 0;
  sub_1C4EFB920(&v81, v103, v104, 0xCCCCCCCCCCCCCCCDLL * ((v104 - (_BYTE *)v103) >> 3));
  while (1)
  {
    v18 = (char *)__p;
    if (v91 - (_BYTE *)__p != v82 - v81)
      goto LABEL_37;
    if (__p == v91)
      break;
    v19 = v81;
    while (*(_QWORD *)v18 == *(_QWORD *)v19)
    {
      v20 = *((unsigned __int8 *)v19 + 32);
      if (v18[32])
        v21 = v20 == 0;
      else
        v21 = 1;
      if (v21)
      {
        if ((v18[32] == 0) == (v20 != 0))
          break;
      }
      else
      {
        v22 = *((_QWORD *)v18 + 1);
        if ((v22 & 6) != 0)
        {
          if (((v19[2] ^ v22) & 6) != 0)
            break;
        }
        else if (*((_DWORD *)v18 + 6) != v19[6])
        {
          break;
        }
      }
      v18 += 40;
      v19 += 10;
      if (v18 == v91)
        goto LABEL_41;
    }
LABEL_37:
    v23 = **((_QWORD **)v91 - 5);
    if ((v23 & 4) == 0)
    {
      v24 = v23 & 0xFFFFFFFFFFFFFFF8;
      if (llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(a2, v23 & 0xFFFFFFFFFFFFFFF8))
      {
        v25 = a1[2];
        v105 = v24;
        sub_1C6180A54(v25 + 40, (uint64_t *)&v105)[1] = a2;
      }
    }
    sub_1C4EFBFFC((llvm::SmallPtrSetImplBase *)&v84);
  }
LABEL_41:
  if (v81)
  {
    v82 = v81;
    operator delete(v81);
  }
  if (v79 != v80)
    free(v79);
  if (__p)
  {
    v91 = (char *)__p;
    operator delete(__p);
  }
  if (v85 != v84)
    free(v85);
  if (v103)
  {
    v104 = v103;
    operator delete(v103);
  }
  if (v100 != v99)
    free(v100);
  if (v97)
  {
    v98 = v97;
    operator delete(v97);
  }
  if (v94 != v93)
    free(v94);
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v26 = (uint64_t *)a1[5];
  v27 = (uint64_t *)a1[6];
  if (v26 == v27)
  {
    v28 = 0;
LABEL_91:
    v44 = v26;
    goto LABEL_92;
  }
  v28 = 0;
  do
  {
    if (!llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(a2, (_QWORD *)*v26)
      || (uint64_t **)*v26 == a2)
    {
      if (v28 >= v95)
      {
        v34 = v93;
        v35 = (v28 - v93) >> 3;
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 61)
          goto LABEL_138;
        v37 = v95 - v93;
        if ((v95 - v93) >> 2 > v36)
          v36 = v37 >> 2;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
          v38 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
        {
          if (v38 >> 61)
            goto LABEL_139;
          v39 = (char *)operator new(8 * v38);
        }
        else
        {
          v39 = 0;
        }
        v40 = (uint64_t *)&v39[8 * v35];
        v41 = *v26;
        *v26 = 0;
        *v40 = v41;
        v33 = (char *)(v40 + 1);
        if (v28 == v34)
        {
          v93 = (char *)v40;
          v94 = (char *)(v40 + 1);
          v95 = &v39[8 * v38];
        }
        else
        {
          do
          {
            v42 = *((_QWORD *)v28 - 1);
            v28 -= 8;
            *(_QWORD *)v28 = 0;
            *--v40 = v42;
          }
          while (v28 != v34);
          v28 = v93;
          v43 = (uint64_t *)v94;
          v93 = (char *)v40;
          v94 = v33;
          v95 = &v39[8 * v38];
          while (v43 != (uint64_t *)v28)
            sub_1C4EFBE80(--v43, 0);
        }
        if (v28)
          operator delete(v28);
      }
      else
      {
        v32 = *v26;
        *v26 = 0;
        *(_QWORD *)v28 = v32;
        v33 = v28 + 8;
      }
      v94 = v33;
      v28 = v33;
    }
    else
    {
      *(_QWORD *)(*v26 + 8) = a2;
      v29 = a2[6];
      if (v29 >= a2[7])
      {
        v31 = sub_1C4EFBEFC(a2 + 5, v26);
      }
      else
      {
        v30 = *v26;
        *v26 = 0;
        *v29 = v30;
        v31 = v29 + 1;
      }
      a2[6] = v31;
    }
    ++v26;
  }
  while (v26 != v27);
  v44 = (uint64_t *)a1[5];
  v26 = (uint64_t *)a1[6];
  if (v26 == v44)
    goto LABEL_91;
  do
    sub_1C4EFBE80(--v26, 0);
  while (v26 != v44);
  v26 = *v6;
  v28 = v94;
LABEL_92:
  a1[6] = v44;
  v45 = (uint64_t *)v93;
  if (v28 - v93 >= 1)
  {
    v46 = (v28 - v93) >> 3;
    v47 = a1[7];
    if (v46 <= (v47 - (uint64_t)v44) >> 3)
    {
      v52 = v44 - v26;
      if (v52 >= v46)
      {
        v53 = &v93[8 * v46];
        v54 = v44;
      }
      else
      {
        v53 = &v93[8 * v52];
        v54 = v44;
        if (v53 != v28)
        {
          v55 = v53;
          v56 = v44;
          do
          {
            v57 = *(_QWORD *)v55;
            *(_QWORD *)v55 = 0;
            v55 += 8;
            *v56++ = v57;
            ++v54;
          }
          while (v55 != v28);
        }
        a1[6] = v54;
        if ((char *)v44 - (char *)v26 < 1)
          goto LABEL_133;
      }
      v58 = &v26[v46];
      v59 = &v54[-v46];
      v60 = v54;
      if (v59 < v44)
      {
        v60 = v54;
        do
        {
          v61 = *v59;
          *v59++ = 0;
          *v60++ = v61;
        }
        while (v59 < v44);
      }
      a1[6] = v60;
      if (v54 != v58)
      {
        v62 = v54 - 1;
        v63 = v54 - v58;
        v64 = v26 - 1;
        do
        {
          v65 = v64[v63];
          v64[v63] = 0;
          sub_1C4EFBE80(v62--, v65);
          --v63;
        }
        while (v63 * 8);
      }
      for (; v45 != (uint64_t *)v53; ++v26)
      {
        v66 = *v45;
        *v45++ = 0;
        sub_1C4EFBE80(v26, v66);
      }
      goto LABEL_133;
    }
    v48 = v46 + v44 - v26;
    if (v48 >> 61)
LABEL_138:
      abort();
    v49 = v47 - (_QWORD)v26;
    if (v49 >> 2 > v48)
      v48 = v49 >> 2;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
      v50 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v50 = v48;
    if (v50)
    {
      if (v50 >> 61)
LABEL_139:
        sub_1C4764EE4();
      v51 = (char *)operator new(8 * v50);
    }
    else
    {
      v51 = 0;
    }
    v67 = 0;
    v68 = (uint64_t *)&v51[8 * v46];
    do
    {
      v69 = v45[v67];
      v45[v67] = 0;
      *(_QWORD *)&v51[v67 * 8] = v69;
      ++v67;
    }
    while (v46 != v67);
    v70 = *v6;
    v71 = v51;
    if (v26 != *v6)
    {
      v72 = v26;
      v71 = v51;
      do
      {
        v73 = *--v72;
        *v72 = 0;
        *((_QWORD *)v71 - 1) = v73;
        v71 -= 8;
      }
      while (v72 != v70);
    }
    v74 = (uint64_t *)a1[6];
    if (v26 != v74)
    {
      do
      {
        v75 = *v26;
        *v26++ = 0;
        *v68++ = v75;
      }
      while (v26 != v74);
      v26 = (uint64_t *)a1[6];
    }
    v76 = (uint64_t *)a1[5];
    a1[5] = v71;
    a1[6] = v68;
    a1[7] = &v51[8 * v50];
    while (v26 != v76)
      sub_1C4EFBE80(--v26, 0);
    if (v76)
      operator delete(v76);
  }
LABEL_133:
  v84 = (void **)&v93;
  sub_1C4EFB84C(&v84);
}

{
  __ZN4llvm10RegionBaseINS_12RegionTraitsINS_8FunctionEEEE12addSubRegionEPNS_6RegionEb(a1, a2, a3);
}

